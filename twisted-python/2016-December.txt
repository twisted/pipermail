From exarkun at twistedmatrix.com  Thu Dec  1 11:51:42 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Thu, 1 Dec 2016 13:51:42 -0500
Subject: [Twisted-Python] Spurious commit/ticket links
Message-ID: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>

Hi,

In the last couple days I've noticed that there are a bunch of spurious
changes being made to tickets in the issue tracker.  These come from commit
messages that reference a GitHub PR that happens to match a ticket number
in trac.

For example, https://twistedmatrix.com/trac/ticket/600#comment:11

I guess this doesn't really hurt anything ... except it's dumping a
constant low level of garbage into the issue tracker and generating some
annoying emails (that end up having nothing to do with what the subject
suggests).

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161201/2ebdb3c3/attachment.html>

From glyph at twistedmatrix.com  Thu Dec  1 12:09:32 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 1 Dec 2016 11:09:32 -0800
Subject: [Twisted-Python] future directions for Deferred
Message-ID: <32689BBD-EEFE-4C6D-B8BA-52BE944464F4@twistedmatrix.com>

Since this is of potentially very broad interest within the Twisted maintainer team and development audience, those on the mailing list may want to read this github comment <https://github.com/twisted/twisted/pull/590#issuecomment-264070327> about ongoing discussions about future development of Deferred.

-glyph

From glyph at twistedmatrix.com  Thu Dec  1 12:14:10 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 1 Dec 2016 11:14:10 -0800
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
Message-ID: <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>


> On Dec 1, 2016, at 10:51 AM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> Hi,
> 
> In the last couple days I've noticed that there are a bunch of spurious changes being made to tickets in the issue tracker.  These come from commit messages that reference a GitHub PR that happens to match a ticket number in trac.
> 
> For example, https://twistedmatrix.com/trac/ticket/600#comment:11 <https://twistedmatrix.com/trac/ticket/600#comment:11>
> 
> I guess this doesn't really hurt anything ... except it's dumping a constant low level of garbage into the issue tracker and generating some annoying emails (that end up having nothing to do with what the subject suggests).

This is, unfortunately, going to keep happening more frequently as the PR numbers get higher and the corresponding Trac tickets get less sparse.

The way I'd like to address it is to change the format of our commit message to namespace Trac tickets differently; instead of just "#", using a URL, like "Fixes https://tm.tl/1234".  I wouldn't even mind if we just had to use the Trac wiki syntax for this, i.e. "Fixes [ticket:1234]" as long as we could turn off the "#" syntax which Github also uses.

However, this involves surgery within Trac's code, and for me personally, the work required to find the relevant regexes and modify them is worse than continuing to deal with the annoyance.  However, I would very much appreciate it if someone else would take this on :-).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161201/fd10ed02/attachment.html>

From exarkun at twistedmatrix.com  Thu Dec  1 13:13:11 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Thu, 1 Dec 2016 15:13:11 -0500
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
Message-ID: <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>

On Thu, Dec 1, 2016 at 2:14 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Dec 1, 2016, at 10:51 AM, Jean-Paul Calderone <
> exarkun at twistedmatrix.com> wrote:
>
> Hi,
>
> In the last couple days I've noticed that there are a bunch of spurious
> changes being made to tickets in the issue tracker.  These come from commit
> messages that reference a GitHub PR that happens to match a ticket number
> in trac.
>
> For example, https://twistedmatrix.com/trac/ticket/600#comment:11
>
> I guess this doesn't really hurt anything ... except it's dumping a
> constant low level of garbage into the issue tracker and generating some
> annoying emails (that end up having nothing to do with what the subject
> suggests).
>
>
> This is, unfortunately, going to keep happening more frequently as the PR
> numbers get higher and the corresponding Trac tickets get less sparse.
>
> The way I'd *like* to address it is to change the format of our commit
> message to namespace Trac tickets differently; instead of just "#", using a
> URL, like "Fixes https://tm.tl/1234".  I wouldn't even mind if we just
> had to use the Trac wiki syntax for this, i.e. "Fixes [ticket:1234]" as
> long as we could turn off the "#" syntax which Github also uses.
>
> However, this involves surgery within Trac's code, and for me personally,
> the work required to find the relevant regexes and modify them is worse
> than continuing to deal with the annoyance.  However, I would very much
> appreciate it if someone else would take this on :-).
>

Where's the source for Twisted's trac deployment?  Is it actually possible
to deploy modifications?  I'll take a look, if so.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161201/22956a76/attachment.html>

From glyph at twistedmatrix.com  Thu Dec  1 13:33:43 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 1 Dec 2016 12:33:43 -0800
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
 <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
Message-ID: <5C81318C-EFE6-47EF-9208-4098D485FA42@twistedmatrix.com>


> On Dec 1, 2016, at 12:13 PM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> On Thu, Dec 1, 2016 at 2:14 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
>> On Dec 1, 2016, at 10:51 AM, Jean-Paul Calderone <exarkun at twistedmatrix.com <mailto:exarkun at twistedmatrix.com>> wrote:
>> 
>> Hi,
>> 
>> In the last couple days I've noticed that there are a bunch of spurious changes being made to tickets in the issue tracker.  These come from commit messages that reference a GitHub PR that happens to match a ticket number in trac.
>> 
>> For example, https://twistedmatrix.com/trac/ticket/600#comment:11 <https://twistedmatrix.com/trac/ticket/600#comment:11>
>> 
>> I guess this doesn't really hurt anything ... except it's dumping a constant low level of garbage into the issue tracker and generating some annoying emails (that end up having nothing to do with what the subject suggests).
> 
> This is, unfortunately, going to keep happening more frequently as the PR numbers get higher and the corresponding Trac tickets get less sparse.
> 
> The way I'd like to address it is to change the format of our commit message to namespace Trac tickets differently; instead of just "#", using a URL, like "Fixes https://tm.tl/1234 <https://tm.tl/1234>".  I wouldn't even mind if we just had to use the Trac wiki syntax for this, i.e. "Fixes [ticket:1234]" as long as we could turn off the "#" syntax which Github also uses.
> 
> However, this involves surgery within Trac's code, and for me personally, the work required to find the relevant regexes and modify them is worse than continuing to deal with the annoyance.  However, I would very much appreciate it if someone else would take this on :-).
> 
> Where's the source for Twisted's trac deployment?

https://github.com/twisted-infra/twisted-trac-source
https://github.com/twisted-infra/twisted-trac-plugins
https://github.com/twisted-infra/braid/tree/master/services/trac

> Is it actually possible to deploy modifications?

There's probably still an undocumented setup step or two that we've missed - but after following <https://github.com/twisted-infra/braid/blob/master/README.md> 'fab config.production trac.upgrade' ought to do the trick.  Allegedly it's even possible to set up a test development environment as per <https://github.com/twisted-infra/braid/blob/master/README.md#vagrant> :-).

I haven't made any major changes since all these docs were added so I'm just following them from the beginning for the first time myself now. but certainly the prod-deploy process has worked fine for me many times on various services.

> I'll take a look, if so.

Please be vocal about any roadblocks you hit.  The ops situation has improved a ton since the last time you looked, but (accordingly) it's also changed almost completely.

Good luck - and hopefully you'll need a lot less of it than previously ;-).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161201/7ac6d7ba/attachment.html>

From exarkun at twistedmatrix.com  Thu Dec  1 13:34:36 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Thu, 1 Dec 2016 15:34:36 -0500
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
 <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
Message-ID: <CAEeXt4O+H=mbQq57hnqQm1fVE0yho_4xgGVcTvTpsCmp1g_TyQ@mail.gmail.com>

On Thu, Dec 1, 2016 at 3:13 PM, Jean-Paul Calderone <
exarkun at twistedmatrix.com> wrote:

> On Thu, Dec 1, 2016 at 2:14 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
> wrote:
>
>>
>> On Dec 1, 2016, at 10:51 AM, Jean-Paul Calderone <
>> exarkun at twistedmatrix.com> wrote:
>>
>> Hi,
>>
>> In the last couple days I've noticed that there are a bunch of spurious
>> changes being made to tickets in the issue tracker.  These come from commit
>> messages that reference a GitHub PR that happens to match a ticket number
>> in trac.
>>
>> For example, https://twistedmatrix.com/trac/ticket/600#comment:11
>>
>> I guess this doesn't really hurt anything ... except it's dumping a
>> constant low level of garbage into the issue tracker and generating some
>> annoying emails (that end up having nothing to do with what the subject
>> suggests).
>>
>>
>> This is, unfortunately, going to keep happening more frequently as the PR
>> numbers get higher and the corresponding Trac tickets get less sparse.
>>
>> The way I'd *like* to address it is to change the format of our commit
>> message to namespace Trac tickets differently; instead of just "#", using a
>> URL, like "Fixes https://tm.tl/1234".  I wouldn't even mind if we just
>> had to use the Trac wiki syntax for this, i.e. "Fixes [ticket:1234]" as
>> long as we could turn off the "#" syntax which Github also uses.
>>
>> However, this involves surgery within Trac's code, and for me personally,
>> the work required to find the relevant regexes and modify them is worse
>> than continuing to deal with the annoyance.  However, I would very much
>> appreciate it if someone else would take this on :-).
>>
>
> Where's the source for Twisted's trac deployment?  Is it actually possible
> to deploy modifications?  I'll take a look, if so.
>
>
https://trac.edgewall.org/browser/trunk/tracopt/ticket/commit_updater.py#L140
looks like the relevant regexp.  Removing the "#" branch would probably
produce the desired behavior.

However, also see
https://trac.edgewall.org/wiki/CommitTicketUpdater#Configuration.  I wonder
if commit_ticket_update_envelope would also fix it?  I don't think so
because I think these are just "references" not "commands", but I don't
know for sure.

Jean-Paul


> Jean-Paul
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161201/bf753456/attachment-0001.html>

From rodrigc at crodrigues.org  Thu Dec  1 18:11:37 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 1 Dec 2016 17:11:37 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host key?
Message-ID: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>

Hi,

I filed this bug:
https://twistedmatrix.com/trac/ticket/8931

At least for me, conch fails to parse a host key created by OpenSSH
in ~/.ssh/known_hosts
which is of type ecdsa-sha2-nistp256.

Anyone have an idea as to how to fix this?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161201/b8b127fc/attachment.html>

From ngoonee.talk at gmail.com  Thu Dec  1 18:24:53 2016
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Fri, 2 Dec 2016 09:24:53 +0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
Message-ID: <CAGQ70evwjz4VGWrd88VDJCDyHSqXEMcq3e-msQHJjXN4_T5=mQ@mail.gmail.com>

http://twistedmatrix.com/pipermail/twisted-python/2016-October/030819.html

On Fri, Dec 2, 2016 at 9:11 AM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> Hi,
>
> I filed this bug:
> https://twistedmatrix.com/trac/ticket/8931
>
> At least for me, conch fails to parse a host key created by OpenSSH
> in ~/.ssh/known_hosts
> which is of type ecdsa-sha2-nistp256.
>
> Anyone have an idea as to how to fix this?
>
> --
> Craig
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From exarkun at twistedmatrix.com  Thu Dec  1 18:50:54 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Thu, 1 Dec 2016 20:50:54 -0500
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <5C81318C-EFE6-47EF-9208-4098D485FA42@twistedmatrix.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
 <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
 <5C81318C-EFE6-47EF-9208-4098D485FA42@twistedmatrix.com>
Message-ID: <CAEeXt4ONncVJiAH1nh3PT+skpsaXzZZ7oKxBht3chQxSM64+ag@mail.gmail.com>

On Thu, Dec 1, 2016 at 3:33 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
>
> Please be vocal about any roadblocks you hit.  The ops situation has
> improved a ton since the last time you looked, but (accordingly) it's also
> changed almost completely.
>
> Good luck - and hopefully you'll need a lot less of it than previously ;-).
>
>
Here's a new plugin that has the new behavior, maybe:
https://github.com/twisted-infra/twisted-trac-plugins/pull/4
thijs did a review so maybe it's all set to merge.
There's also a config change:
https://github.com/twisted-infra/braid/pull/226

I had intended to test it with the local development environment but it
looks like it requires downloading gigs of data for vagrant boxes and to
upgrade a super-old ubuntu image.
Maybe someone else could do that step.

If not, maybe I'll test it on the production machine in a couple days. :)

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161201/9d26a87a/attachment.html>

From rodrigc at crodrigues.org  Thu Dec  1 19:02:26 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 1 Dec 2016 18:02:26 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <CAGQ70evwjz4VGWrd88VDJCDyHSqXEMcq3e-msQHJjXN4_T5=mQ@mail.gmail.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <CAGQ70evwjz4VGWrd88VDJCDyHSqXEMcq3e-msQHJjXN4_T5=mQ@mail.gmail.com>
Message-ID: <CAG=rPVeqPPM9Tqc8DYSogLi7+-AGt_FBku08pmuLOhU85r0p4g@mail.gmail.com>

I don't think that is it.  It is failing to parse an existing key generated
by OpenSSH.
If I delete the known_hosts file, conch generates a key which it ca parse.

--
Craig

On Thu, Dec 1, 2016 at 5:24 PM, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:

> http://twistedmatrix.com/pipermail/twisted-python/2016-October/030819.html
>
> On Fri, Dec 2, 2016 at 9:11 AM, Craig Rodrigues <rodrigc at crodrigues.org>
> wrote:
> > Hi,
> >
> > I filed this bug:
> > https://twistedmatrix.com/trac/ticket/8931
> >
> > At least for me, conch fails to parse a host key created by OpenSSH
> > in ~/.ssh/known_hosts
> > which is of type ecdsa-sha2-nistp256.
> >
> > Anyone have an idea as to how to fix this?
> >
> > --
> > Craig
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161201/c8e228eb/attachment.html>

From markrwilliams at gmail.com  Thu Dec  1 20:01:25 2016
From: markrwilliams at gmail.com (Mark Williams)
Date: Thu, 1 Dec 2016 19:01:25 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
Message-ID: <20161202030124.GA19532@hammal>

On Thu, Dec 01, 2016 at 05:11:37PM -0800, Craig Rodrigues wrote:
> Hi,
>
> I filed this bug:
> https://twistedmatrix.com/trac/ticket/8931
>
> At least for me, conch fails to parse a host key created by OpenSSH
> in ~/.ssh/known_hosts
> which is of type ecdsa-sha2-nistp256.
>
> Anyone have an idea as to how to fix this?
>

As usual you've found a fantastically interesting issue.

This is conch, the client, right?  I'm guessing so because
~/.ssh/known_hosts contains the servers the ssh client trusts.
(Specifically, among other things it contains a hostname and that
host's sshd server's public key fingerprint).

If it is conch, the-client, then deleting the offending entry from
~/.ssh/known_hosts and getting a new one makes sense.  That's because
sshd usually generates a couple of different keys in case clients
don't support the latest and greatest technology.

I think deleting the entry in ~/.ssh/known_hosts allows conch to ask
the server for a different key that it *can* understand.  You should
be able to find out which server key conch negotiated by doing thing
following after deleting the offending ~/.ssh/known_hosts entry:

(<hostname is the problematic OS X server>)
$ ssh-keygen -H -F <hostname> | awk '{ print $NF }'
dGhpcyBpcyB2ZXJ5IHZlcnkgdmVyeSB2ZXJ5IHZlcnkgbG9uZyBob3N0IGtleQ==

Then on the OS X server, grep for that in /etc/ssh/*.pub

I bet the key negotiated by conch is not an ECDSA key but rather an
RSA key.  If this is all the case, then I think you've found a key
that LibreSSL supports but your client's libssl (which conch calls
into via cryptography) does not.  What version of libssl do you have?

If any of this is helpful or relevant I'll ask more questions in the
ticket.

Thanks!

-Mark


From glyph at twistedmatrix.com  Fri Dec  2 01:19:42 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 2 Dec 2016 00:19:42 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <20161202030124.GA19532@hammal>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
Message-ID: <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>


> On Dec 1, 2016, at 7:01 PM, Mark Williams <markrwilliams at gmail.com> wrote:
> 
> On Thu, Dec 01, 2016 at 05:11:37PM -0800, Craig Rodrigues wrote:
>> Hi,
>> 
>> I filed this bug:
>> https://twistedmatrix.com/trac/ticket/8931
>> 
>> At least for me, conch fails to parse a host key created by OpenSSH
>> in ~/.ssh/known_hosts
>> which is of type ecdsa-sha2-nistp256.
>> 
>> Anyone have an idea as to how to fix this?
>> 
> 
> As usual you've found a fantastically interesting issue.
> 
> This is conch, the client, right?  I'm guessing so because
> ~/.ssh/known_hosts contains the servers the ssh client trusts.
> (Specifically, among other things it contains a hostname and that
> host's sshd server's public key fingerprint).
> 
> If it is conch, the-client, then deleting the offending entry from
> ~/.ssh/known_hosts and getting a new one makes sense.  That's because
> sshd usually generates a couple of different keys in case clients
> don't support the latest and greatest technology.
> 
> I think deleting the entry in ~/.ssh/known_hosts allows conch to ask
> the server for a different key that it *can* understand.  You should
> be able to find out which server key conch negotiated by doing thing
> following after deleting the offending ~/.ssh/known_hosts entry:
> 
> (<hostname is the problematic OS X server>)
> $ ssh-keygen -H -F <hostname> | awk '{ print $NF }'
> dGhpcyBpcyB2ZXJ5IHZlcnkgdmVyeSB2ZXJ5IHZlcnkgbG9uZyBob3N0IGtleQ==
> 
> Then on the OS X server, grep for that in /etc/ssh/*.pub
> 
> I bet the key negotiated by conch is not an ECDSA key but rather an
> RSA key.  If this is all the case, then I think you've found a key
> that LibreSSL supports but your client's libssl (which conch calls
> into via cryptography) does not.  What version of libssl do you have?
> 
> If any of this is helpful or relevant I'll ask more questions in the
> ticket.

I think there might be a regression in 16.6.0.

For every version up to 16.6.0, I can do 'conch twistedmatrix.com' in a shell and it works fine.

On 16.6.0, I get:

Connection to twistedmatrix.com closed.
conch: exiting with error [Failure instance: Traceback (failure with no frames): <class 'twisted.conch.error.ConchError'>: ('bad host key', 9)
]

instead.

Worth noting: the keys I have for twistedmatrix.com are RSA keys.

What did we add recently that changes key parsing?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161202/c791a91e/attachment-0001.html>

From glyph at twistedmatrix.com  Fri Dec  2 01:27:20 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 2 Dec 2016 00:27:20 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
Message-ID: <606A7085-2B51-4597-92EB-3995E4D49490@twistedmatrix.com>


> On Dec 2, 2016, at 12:19 AM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Dec 1, 2016, at 7:01 PM, Mark Williams <markrwilliams at gmail.com <mailto:markrwilliams at gmail.com>> wrote:
>> 
>> On Thu, Dec 01, 2016 at 05:11:37PM -0800, Craig Rodrigues wrote:
>>> Hi,
>>> 
>>> I filed this bug:
>>> https://twistedmatrix.com/trac/ticket/8931 <https://twistedmatrix.com/trac/ticket/8931>
>>> 
>>> At least for me, conch fails to parse a host key created by OpenSSH
>>> in ~/.ssh/known_hosts
>>> which is of type ecdsa-sha2-nistp256.
>>> 
>>> Anyone have an idea as to how to fix this?
>>> 
>> 
>> As usual you've found a fantastically interesting issue.
>> 
>> This is conch, the client, right?  I'm guessing so because
>> ~/.ssh/known_hosts contains the servers the ssh client trusts.
>> (Specifically, among other things it contains a hostname and that
>> host's sshd server's public key fingerprint).
>> 
>> If it is conch, the-client, then deleting the offending entry from
>> ~/.ssh/known_hosts and getting a new one makes sense.  That's because
>> sshd usually generates a couple of different keys in case clients
>> don't support the latest and greatest technology.
>> 
>> I think deleting the entry in ~/.ssh/known_hosts allows conch to ask
>> the server for a different key that it *can* understand.  You should
>> be able to find out which server key conch negotiated by doing thing
>> following after deleting the offending ~/.ssh/known_hosts entry:
>> 
>> (<hostname is the problematic OS X server>)
>> $ ssh-keygen -H -F <hostname> | awk '{ print $NF }'
>> dGhpcyBpcyB2ZXJ5IHZlcnkgdmVyeSB2ZXJ5IHZlcnkgbG9uZyBob3N0IGtleQ==
>> 
>> Then on the OS X server, grep for that in /etc/ssh/*.pub
>> 
>> I bet the key negotiated by conch is not an ECDSA key but rather an
>> RSA key.  If this is all the case, then I think you've found a key
>> that LibreSSL supports but your client's libssl (which conch calls
>> into via cryptography) does not.  What version of libssl do you have?
>> 
>> If any of this is helpful or relevant I'll ask more questions in the
>> ticket.
> 
> I think there might be a regression in 16.6.0.
> 
> For every version up to 16.6.0, I can do 'conch twistedmatrix.com <http://twistedmatrix.com/>' in a shell and it works fine.
> 
> On 16.6.0, I get:
> 
> Connection to twistedmatrix.com <http://twistedmatrix.com/> closed.
> conch: exiting with error [Failure instance: Traceback (failure with no frames): <class 'twisted.conch.error.ConchError'>: ('bad host key', 9)
> ]
> 
> instead.
> 
> Worth noting: the keys I have for twistedmatrix.com <http://twistedmatrix.com/> are RSA keys.
> 
> What did we add recently that changes key parsing?

The offending commit is 8164d89104a453947215b9296e8b406f15e63252.  Clearly something went wrong when introducing ECDSA parsing.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161202/65646f4c/attachment.html>

From glyph at twistedmatrix.com  Fri Dec  2 01:37:31 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 2 Dec 2016 00:37:31 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <606A7085-2B51-4597-92EB-3995E4D49490@twistedmatrix.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <606A7085-2B51-4597-92EB-3995E4D49490@twistedmatrix.com>
Message-ID: <E7543B17-C137-4CCA-A8C0-41429C000E2F@twistedmatrix.com>


> On Dec 2, 2016, at 12:27 AM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Dec 2, 2016, at 12:19 AM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>> 
>> 
>>> On Dec 1, 2016, at 7:01 PM, Mark Williams <markrwilliams at gmail.com <mailto:markrwilliams at gmail.com>> wrote:
>>> 
>>> On Thu, Dec 01, 2016 at 05:11:37PM -0800, Craig Rodrigues wrote:
>>>> Hi,
>>>> 
>>>> I filed this bug:
>>>> https://twistedmatrix.com/trac/ticket/8931 <https://twistedmatrix.com/trac/ticket/8931>
>>>> 
>>>> At least for me, conch fails to parse a host key created by OpenSSH
>>>> in ~/.ssh/known_hosts
>>>> which is of type ecdsa-sha2-nistp256.
>>>> 
>>>> Anyone have an idea as to how to fix this?
>>>> 
>>> 
>>> As usual you've found a fantastically interesting issue.
>>> 
>>> This is conch, the client, right?  I'm guessing so because
>>> ~/.ssh/known_hosts contains the servers the ssh client trusts.
>>> (Specifically, among other things it contains a hostname and that
>>> host's sshd server's public key fingerprint).
>>> 
>>> If it is conch, the-client, then deleting the offending entry from
>>> ~/.ssh/known_hosts and getting a new one makes sense.  That's because
>>> sshd usually generates a couple of different keys in case clients
>>> don't support the latest and greatest technology.
>>> 
>>> I think deleting the entry in ~/.ssh/known_hosts allows conch to ask
>>> the server for a different key that it *can* understand.  You should
>>> be able to find out which server key conch negotiated by doing thing
>>> following after deleting the offending ~/.ssh/known_hosts entry:
>>> 
>>> (<hostname is the problematic OS X server>)
>>> $ ssh-keygen -H -F <hostname> | awk '{ print $NF }'
>>> dGhpcyBpcyB2ZXJ5IHZlcnkgdmVyeSB2ZXJ5IHZlcnkgbG9uZyBob3N0IGtleQ==
>>> 
>>> Then on the OS X server, grep for that in /etc/ssh/*.pub
>>> 
>>> I bet the key negotiated by conch is not an ECDSA key but rather an
>>> RSA key.  If this is all the case, then I think you've found a key
>>> that LibreSSL supports but your client's libssl (which conch calls
>>> into via cryptography) does not.  What version of libssl do you have?
>>> 
>>> If any of this is helpful or relevant I'll ask more questions in the
>>> ticket.
>> 
>> I think there might be a regression in 16.6.0.
>> 
>> For every version up to 16.6.0, I can do 'conch twistedmatrix.com <http://twistedmatrix.com/>' in a shell and it works fine.
>> 
>> On 16.6.0, I get:
>> 
>> Connection to twistedmatrix.com <http://twistedmatrix.com/> closed.
>> conch: exiting with error [Failure instance: Traceback (failure with no frames): <class 'twisted.conch.error.ConchError'>: ('bad host key', 9)
>> ]
>> 
>> instead.
>> 
>> Worth noting: the keys I have for twistedmatrix.com <http://twistedmatrix.com/> are RSA keys.
>> 
>> What did we add recently that changes key parsing?
> 
> The offending commit is 8164d89104a453947215b9296e8b406f15e63252.  Clearly something went wrong when introducing ECDSA parsing.

The problem is not quite as bad as breaking RSA parsing, at least; the issue is that my known_hosts file includes an ecdsa-sha2-nistp256 entry that _precedes_ my ssh-rsa entry.  So the problem is that parsing one of those entries raises an exception which propagates.  From a superficial investigation, it would appear that _all_ ecdsa keys cause this failure, though.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161202/3d42e444/attachment.html>

From glyph at twistedmatrix.com  Fri Dec  2 02:23:25 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 2 Dec 2016 01:23:25 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <E7543B17-C137-4CCA-A8C0-41429C000E2F@twistedmatrix.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <606A7085-2B51-4597-92EB-3995E4D49490@twistedmatrix.com>
 <E7543B17-C137-4CCA-A8C0-41429C000E2F@twistedmatrix.com>
Message-ID: <FED4B0F9-BDAC-4872-80E8-F7FF3F4564E9@twistedmatrix.com>


> On Dec 2, 2016, at 12:37 AM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Dec 2, 2016, at 12:27 AM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>> 
>> 
>>> On Dec 2, 2016, at 12:19 AM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>>> 
>>> 
>>>> On Dec 1, 2016, at 7:01 PM, Mark Williams <markrwilliams at gmail.com <mailto:markrwilliams at gmail.com>> wrote:
>>>> 
>>>> On Thu, Dec 01, 2016 at 05:11:37PM -0800, Craig Rodrigues wrote:
>>>>> Hi,
>>>>> 
>>>>> I filed this bug:
>>>>> https://twistedmatrix.com/trac/ticket/8931 <https://twistedmatrix.com/trac/ticket/8931>
>>>>> 
>>>>> At least for me, conch fails to parse a host key created by OpenSSH
>>>>> in ~/.ssh/known_hosts
>>>>> which is of type ecdsa-sha2-nistp256.
>>>>> 
>>>>> Anyone have an idea as to how to fix this?
>>>>> 
>>>> 
>>>> As usual you've found a fantastically interesting issue.
>>>> 
>>>> This is conch, the client, right?  I'm guessing so because
>>>> ~/.ssh/known_hosts contains the servers the ssh client trusts.
>>>> (Specifically, among other things it contains a hostname and that
>>>> host's sshd server's public key fingerprint).
>>>> 
>>>> If it is conch, the-client, then deleting the offending entry from
>>>> ~/.ssh/known_hosts and getting a new one makes sense.  That's because
>>>> sshd usually generates a couple of different keys in case clients
>>>> don't support the latest and greatest technology.
>>>> 
>>>> I think deleting the entry in ~/.ssh/known_hosts allows conch to ask
>>>> the server for a different key that it *can* understand.  You should
>>>> be able to find out which server key conch negotiated by doing thing
>>>> following after deleting the offending ~/.ssh/known_hosts entry:
>>>> 
>>>> (<hostname is the problematic OS X server>)
>>>> $ ssh-keygen -H -F <hostname> | awk '{ print $NF }'
>>>> dGhpcyBpcyB2ZXJ5IHZlcnkgdmVyeSB2ZXJ5IHZlcnkgbG9uZyBob3N0IGtleQ==
>>>> 
>>>> Then on the OS X server, grep for that in /etc/ssh/*.pub
>>>> 
>>>> I bet the key negotiated by conch is not an ECDSA key but rather an
>>>> RSA key.  If this is all the case, then I think you've found a key
>>>> that LibreSSL supports but your client's libssl (which conch calls
>>>> into via cryptography) does not.  What version of libssl do you have?
>>>> 
>>>> If any of this is helpful or relevant I'll ask more questions in the
>>>> ticket.
>>> 
>>> I think there might be a regression in 16.6.0.
>>> 
>>> For every version up to 16.6.0, I can do 'conch twistedmatrix.com <http://twistedmatrix.com/>' in a shell and it works fine.
>>> 
>>> On 16.6.0, I get:
>>> 
>>> Connection to twistedmatrix.com <http://twistedmatrix.com/> closed.
>>> conch: exiting with error [Failure instance: Traceback (failure with no frames): <class 'twisted.conch.error.ConchError'>: ('bad host key', 9)
>>> ]
>>> 
>>> instead.
>>> 
>>> Worth noting: the keys I have for twistedmatrix.com <http://twistedmatrix.com/> are RSA keys.
>>> 
>>> What did we add recently that changes key parsing?
>> 
>> The offending commit is 8164d89104a453947215b9296e8b406f15e63252.  Clearly something went wrong when introducing ECDSA parsing.
> 
> The problem is not quite as bad as breaking RSA parsing, at least; the issue is that my known_hosts file includes an ecdsa-sha2-nistp256 entry that _precedes_ my ssh-rsa entry.  So the problem is that parsing one of those entries raises an exception which propagates.  From a superficial investigation, it would appear that _all_ ecdsa keys cause this failure, though.

Investigating further, I think I've figured it out.  Here's a patch that fixes the problem:

diff --git a/src/twisted/conch/ssh/keys.py b/src/twisted/conch/ssh/keys.py
index d47db7f..570f524 100644
--- a/src/twisted/conch/ssh/keys.py
+++ b/src/twisted/conch/ssh/keys.py
@@ -247,8 +247,10 @@ class Key(object):
                 ).public_key(default_backend())
             )
         elif keyType in [b'ecdsa-sha2-' + curve for curve in list(_curveTable.keys())]:
-            x, y, rest = common.getMP(rest, 2)
-            return cls._fromECComponents(x=x, y=y, curve=keyType)
+            return cls(load_ssh_public_key(
+                keyType + b' ' + base64.encodestring(blob),
+                default_backend())
+            )
         else:
             raise BadKeyError('unknown blob type: %s' % (keyType,))
 
I suspect, but do not fully understand, that the problem here is point compression.  Key._fromString_BLOB naively just does getMP(blob, 2) and expects that the x,y will be the EC point.  However, to quote https://tools.ietf.org/html/rfc5656#section-3.1, "point compression MAY be used".  I don't know exactly how point compression works, but I do understand that it means you do funky stuff with the Y value.  I do not believe that EllipticCurvePrivateNumbers understands said funky stuff.

A specific ECC integration test with ssh-keygen from OpenSSH and twisted.conch.client.knownhosts.KnownHostsFile would have spotted this specific manifestation of the issue.  However, another underlying bug is that KnownHostsFile _should_ ignore lines that it can't parse.  And, there's another potential manifestation of the issue where loading from an actual key blob might not work; arguably the problem here is that KnownHostsFile made the questionable decision to do its own base64-decoding and pass the blob straight to the key rather than just pass the portion of the line after the hostname and load it as an openssh-format key directly.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161202/740bdb5e/attachment-0001.html>

From rodrigc at crodrigues.org  Fri Dec  2 10:18:19 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 2 Dec 2016 09:18:19 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <FED4B0F9-BDAC-4872-80E8-F7FF3F4564E9@twistedmatrix.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <606A7085-2B51-4597-92EB-3995E4D49490@twistedmatrix.com>
 <E7543B17-C137-4CCA-A8C0-41429C000E2F@twistedmatrix.com>
 <FED4B0F9-BDAC-4872-80E8-F7FF3F4564E9@twistedmatrix.com>
Message-ID: <CAG=rPVcZmGB62UiVEoU099u_=TnCVe40QqjgKhBfYv3Dd3KJAw@mail.gmail.com>

On Fri, Dec 2, 2016 at 1:23 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
>
> Investigating further, I think I've figured it out.  Here's a patch that
> fixes the problem:
>
> diff --git a/src/twisted/conch/ssh/keys.py b/src/twisted/conch/ssh/keys.py
> index d47db7f..570f524 100644
> --- a/src/twisted/conch/ssh/keys.py
> +++ b/src/twisted/conch/ssh/keys.py
> @@ -247,8 +247,10 @@ class Key(object):
>                  ).public_key(default_backend())
>              )
>          elif keyType in [b'ecdsa-sha2-' + curve for curve in
> list(_curveTable.keys())]:
> -            x, y, rest = common.getMP(rest, 2)
> -            return cls._fromECComponents(x=x, y=y, curve=keyType)
> +            return cls(load_ssh_public_key(
> +                keyType + b' ' + base64.encodestring(blob),
> +                default_backend())
> +            )
>          else:
>              raise BadKeyError('unknown blob type: %s' % (keyType,))
>
>
> I suspect, but do not fully understand, that the problem here is point
> compression.  Key._fromString_BLOB naively just does getMP(blob, 2) and
> expects that the x,y will be the EC point.  However, to quote
> https://tools.ietf.org/html/rfc5656#section-3.1, "point compression MAY
> be used".  I don't know exactly how point compression works, but I do
> understand that it means you do funky stuff with the Y value.  I do not
> believe that EllipticCurvePrivateNumbers understands said funky stuff.
>
> A specific ECC integration test with ssh-keygen from OpenSSH and
> twisted.conch.client.knownhosts.KnownHostsFile would have spotted this
> specific manifestation of the issue.  However, another underlying bug is
> that KnownHostsFile _should_ ignore lines that it can't parse.  And,
> there's another potential manifestation of the issue where loading from an
> actual key blob might not work; arguably the problem here is that
> KnownHostsFile made the questionable decision to do its own base64-decoding
> and pass the blob straight to the key rather than just pass the portion of
> the line after the hostname and load it as an openssh-format key directly.
>
>
Yes, you are on the right track.  As the known_hosts file is parsed line by
line,
if an exception is thrown during parsing, then any valid keys further in
the file are ignored,
and you get the "bad host key" error.

I tried your patch, and while I don't get the same error, the patch doesn't
solve the problem for me.

I did some more debugging, and when I tried to put some print statements in
the code to
figure out what is going on, I found these errors:

Traceback (most recent call last):


  File "<pudb command line>", line 1, in <module>
  File "/Users/crodrigues/twisted8/src/twisted/conch/ssh/keys.py", line
787, in __repr__
    self._keyObject.key_size)]

AttributeError: '_EllipticCurvePublicKey' object has no attribute
'key_size'


and also this:

  File "/Users/crodrigues/twisted8/src/twisted/conch/client/knownhosts.py",
line 107, in matchesKey
    print("SELF.PUBLICKEY ", self.publickey)
AttributeError: 'PlainEntry' object has no attribute 'publickey'

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161202/0280b5ed/attachment.html>

From rodrigc at crodrigues.org  Fri Dec  2 13:49:50 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 2 Dec 2016 12:49:50 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <CAG=rPVcZmGB62UiVEoU099u_=TnCVe40QqjgKhBfYv3Dd3KJAw@mail.gmail.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <606A7085-2B51-4597-92EB-3995E4D49490@twistedmatrix.com>
 <E7543B17-C137-4CCA-A8C0-41429C000E2F@twistedmatrix.com>
 <FED4B0F9-BDAC-4872-80E8-F7FF3F4564E9@twistedmatrix.com>
 <CAG=rPVcZmGB62UiVEoU099u_=TnCVe40QqjgKhBfYv3Dd3KJAw@mail.gmail.com>
Message-ID: <CAG=rPVcMPOdcf5vtFj+F6v5iQcLDJ0JKA=TY-qr3rEUmHxA_wQ@mail.gmail.com>

On Fri, Dec 2, 2016 at 9:18 AM, Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

>
> Traceback (most recent call last):
>
>
>   File "<pudb command line>", line 1, in <module>
>   File "/Users/crodrigues/twisted8/src/twisted/conch/ssh/keys.py", line
> 787, in __repr__
>     self._keyObject.key_size)]
>
> AttributeError: '_EllipticCurvePublicKey' object has no attribute
> 'key_size'
>
>
This seems to be the problem.

On this line:
https://github.com/twisted/twisted/blob/trunk/src/twisted/conch/ssh/keys.py#L782
the __repr__() function wants to call the key_size() method.

This seems to exist for DSA and RSA keys:
https://github.com/pyca/cryptography/blob/master/src/cryptography/hazmat/backends/openssl/dsa.py#L232
https://github.com/pyca/cryptography/blob/master/src/cryptography/hazmat/backends/openssl/rsa.py#L482

However for EC keys, I do not see a 'key_size' attribute:
https://github.com/pyca/cryptography/blob/master/src/cryptography/hazmat/backends/openssl/ec.py#L256

When trying to compare the known host key, the code tries to do a
__repr__() and it fails,
so this doesn't seem to work with EC keys.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161202/c4acb5a7/attachment.html>

From glyph at twistedmatrix.com  Fri Dec  2 15:18:06 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 2 Dec 2016 14:18:06 -0800
Subject: [Twisted-Python] continuous integration update
Message-ID: <0DE7B9CD-B09E-42D0-9C6A-AEA971113E73@twistedmatrix.com>

Hi all,

On Github, the process was supposed to be that we push any 3rd-party contributor branches to the buildbots before doing a final merge.  However, we (myself included, I think) have been landing PRs without doing that first.

In order to ensure that the process is followed, I've added a representative sample of buildbot status checks - specifically, buildbot/osx10.10-py2.7, buildbot/freebsd10-py3.5, and buildbot/freebsd10-py2.7 to the required list.

Additionally, I think I'd like to take our Mac builds off of Travis.  They're still in the allow_fail section, so they haven't been blocking merges, but a Travis build can't complete (and therefore register as "succeded") without them.  Given the repeated OS X related incidents on Travis (see here https://www.traviscistatus.com/incidents/nq0sf0srvx8s and here https://www.traviscistatus.com/incidents/3d430hxd59ft here https://www.traviscistatus.com/incidents/06xg686x7wgw and here https://www.traviscistatus.com/incidents/w82t22dlpntr and here https://www.traviscistatus.com/incidents/j7ttlsnbkf33 if you haven't been personally affected) the OS X builds have been responsible for something like 90% of our build times and have prevented me from making a lot of progress this week.  I've submitted a PR for this at https://github.com/twisted/twisted/pull/614 which hopefully someone can review and merge if they agree.

Thanks,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161202/ea9dcd06/attachment.html>

From rodrigc at crodrigues.org  Fri Dec  2 17:41:20 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 2 Dec 2016 16:41:20 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <CAG=rPVcMPOdcf5vtFj+F6v5iQcLDJ0JKA=TY-qr3rEUmHxA_wQ@mail.gmail.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <606A7085-2B51-4597-92EB-3995E4D49490@twistedmatrix.com>
 <E7543B17-C137-4CCA-A8C0-41429C000E2F@twistedmatrix.com>
 <FED4B0F9-BDAC-4872-80E8-F7FF3F4564E9@twistedmatrix.com>
 <CAG=rPVcZmGB62UiVEoU099u_=TnCVe40QqjgKhBfYv3Dd3KJAw@mail.gmail.com>
 <CAG=rPVcMPOdcf5vtFj+F6v5iQcLDJ0JKA=TY-qr3rEUmHxA_wQ@mail.gmail.com>
Message-ID: <CAG=rPVcKHBW97vyf2=BsoTTFgNFO3oFzcY8db+U02QQPDWerPA@mail.gmail.com>

Glyph,

I took your fix, and added some fixes of my own for __repr__() printing of
EC keys in this branch:

https://github.com/twisted/twisted/pull/615


If I run the tests, I get a new failure:


trial twisted.conch.test.test_keys.KeyTests.test_fromBlobECDSA

Traceback (most recent call last):
  File "/Users/crodrigues/twisted_15/src/twisted/conch/test/test_keys.py",
line 776, in test_fromBlobECDSA
    eckey = keys.Key.fromString(ecblob)
  File "/Users/crodrigues/twisted_15/src/twisted/conch/ssh/keys.py", line
197, in fromString
    return method(data)
  File "/Users/crodrigues/twisted_15/src/twisted/conch/ssh/keys.py", line
253, in _fromString_BLOB
    default_backend()))
  File
"/Users/crodrigues/venv-3.6/lib/python3.6/site-packages/cryptography/hazmat/primitives/serialization.py",
line 69, in load_ssh_public_key
    return loader(key_type, rest, backend)
  File
"/Users/crodrigues/venv-3.6/lib/python3.6/site-packages/cryptography/hazmat/primitives/serialization.py",
line 103, in _load_ssh_ecdsa_public_key
    'Key header and key body contain different key type values.'

builtins.ValueError: Key header and key body contain different key type
values.


Also, if I try to access my machine with:
conch 192.168.1.2

I see that in the matchesKey() function on this line:
https://github.com/twisted/twisted/blob/trunk/src/twisted/conch/client/knownhosts.py#L106

self.publicKey is an EC key, while keyObject is an RSA key.

Therefore this function always fails, and I cannot log into the box.

Any ideas?

Thanks.
--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161202/694e21a9/attachment.html>

From exarkun at twistedmatrix.com  Fri Dec  2 17:49:38 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Fri, 2 Dec 2016 19:49:38 -0500
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <CAEeXt4ONncVJiAH1nh3PT+skpsaXzZZ7oKxBht3chQxSM64+ag@mail.gmail.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
 <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
 <5C81318C-EFE6-47EF-9208-4098D485FA42@twistedmatrix.com>
 <CAEeXt4ONncVJiAH1nh3PT+skpsaXzZZ7oKxBht3chQxSM64+ag@mail.gmail.com>
Message-ID: <CAEeXt4M-bWMrmPjx3DD1r3JWobDRjFQF2jndCYN2Rk36KCkSNw@mail.gmail.com>

I deployed this to production.  I don't see a good way to test it without
screwing around with twisted trunk ... so don't plan to.  I'll keep an eye
on real merges folks are working on and see if it's behaving as desired.

On Thu, Dec 1, 2016 at 8:50 PM, Jean-Paul Calderone <
exarkun at twistedmatrix.com> wrote:

> On Thu, Dec 1, 2016 at 3:33 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
> wrote:
>
>>
>>
>> Please be vocal about any roadblocks you hit.  The ops situation has
>> improved a ton since the last time you looked, but (accordingly) it's also
>> changed almost completely.
>>
>> Good luck - and hopefully you'll need a lot less of it than previously
>> ;-).
>>
>>
> Here's a new plugin that has the new behavior, maybe:
> https://github.com/twisted-infra/twisted-trac-plugins/pull/4
> thijs did a review so maybe it's all set to merge.
> There's also a config change: https://github.com/
> twisted-infra/braid/pull/226
>
> I had intended to test it with the local development environment but it
> looks like it requires downloading gigs of data for vagrant boxes and to
> upgrade a super-old ubuntu image.
> Maybe someone else could do that step.
>
> If not, maybe I'll test it on the production machine in a couple days. :)
>
> Jean-Paul
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161202/59cef46f/attachment.html>

From glyph at twistedmatrix.com  Fri Dec  2 19:28:28 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 2 Dec 2016 18:28:28 -0800
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <CAEeXt4M-bWMrmPjx3DD1r3JWobDRjFQF2jndCYN2Rk36KCkSNw@mail.gmail.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
 <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
 <5C81318C-EFE6-47EF-9208-4098D485FA42@twistedmatrix.com>
 <CAEeXt4ONncVJiAH1nh3PT+skpsaXzZZ7oKxBht3chQxSM64+ag@mail.gmail.com>
 <CAEeXt4M-bWMrmPjx3DD1r3JWobDRjFQF2jndCYN2Rk36KCkSNw@mail.gmail.com>
Message-ID: <64048028-5B08-4787-B179-F7720551D0C3@twistedmatrix.com>

> On Dec 2, 2016, at 4:49 PM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> I deployed this to production.  I don't see a good way to test it without screwing around with twisted trunk ... so don't plan to.  I'll keep an eye on real merges folks are working on and see if it's behaving as desired.

Thanks, JP!

Would you mind updating https://twistedmatrix.com/trac/wiki/ReviewProcess#Revertingachange and https://twistedmatrix.com/trac/wiki/ReviewProcess#Authors:Howtomergethechangetotrunk to reflect the new syntax that should be used on future merges?

-glyph



From glyph at twistedmatrix.com  Fri Dec  2 20:18:38 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 2 Dec 2016 19:18:38 -0800
Subject: [Twisted-Python] continuous integration update
In-Reply-To: <0DE7B9CD-B09E-42D0-9C6A-AEA971113E73@twistedmatrix.com>
References: <0DE7B9CD-B09E-42D0-9C6A-AEA971113E73@twistedmatrix.com>
Message-ID: <14FEBAAB-E4E4-4F61-9AA2-592EB071E2E4@twistedmatrix.com>


> On Dec 2, 2016, at 2:18 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> Hi all,
> 
> On Github, the process was supposed to be that we push any 3rd-party contributor branches to the buildbots before doing a final merge.  However, we (myself included, I think) have been landing PRs without doing that first.
> 
> In order to ensure that the process is followed, I've added a representative sample of buildbot status checks - specifically, buildbot/osx10.10-py2.7, buildbot/freebsd10-py3.5, and buildbot/freebsd10-py2.7 to the required list.

Oops. Apparently the FreeBSD ones aren't supported builds, and therefore don't run on every PR, so they were jamming things up.  I've reduced it to just the OS X builder.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161202/ef5462a0/attachment.html>

From exarkun at twistedmatrix.com  Sat Dec  3 07:28:42 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Sat, 3 Dec 2016 09:28:42 -0500
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <64048028-5B08-4787-B179-F7720551D0C3@twistedmatrix.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
 <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
 <5C81318C-EFE6-47EF-9208-4098D485FA42@twistedmatrix.com>
 <CAEeXt4ONncVJiAH1nh3PT+skpsaXzZZ7oKxBht3chQxSM64+ag@mail.gmail.com>
 <CAEeXt4M-bWMrmPjx3DD1r3JWobDRjFQF2jndCYN2Rk36KCkSNw@mail.gmail.com>
 <64048028-5B08-4787-B179-F7720551D0C3@twistedmatrix.com>
Message-ID: <CAEeXt4OsPyNs35iqkOozn3PKaDrj=giZFp0vEZq=hyOjYDyWhA@mail.gmail.com>

On Fri, Dec 2, 2016 at 9:28 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

> > On Dec 2, 2016, at 4:49 PM, Jean-Paul Calderone <
> exarkun at twistedmatrix.com> wrote:
> >
> > I deployed this to production.  I don't see a good way to test it
> without screwing around with twisted trunk ... so don't plan to.  I'll keep
> an eye on real merges folks are working on and see if it's behaving as
> desired.
>
> Thanks, JP!
>
> Would you mind updating https://twistedmatrix.com/trac/wiki/ReviewProcess#
> Revertingachange and https://twistedmatrix.com/trac/wiki/ReviewProcess#
> Authors:Howtomergethechangetotrunk to reflect the new syntax that should
> be used on future merges?
>
>
Updated.  As far as the behavior, do
https://github.com/twisted/twisted/pull/614 /
http://twistedmatrix.com/trac/ticket/8934 look right? The trac ticket is
fixed but with no comment.  OTOH, I can't find the commit message for the
PR merge so maybe that's as it should be?


> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161203/b46771cf/attachment.html>

From glyph at twistedmatrix.com  Sat Dec  3 15:04:26 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 3 Dec 2016 14:04:26 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <CAG=rPVcKHBW97vyf2=BsoTTFgNFO3oFzcY8db+U02QQPDWerPA@mail.gmail.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <606A7085-2B51-4597-92EB-3995E4D49490@twistedmatrix.com>
 <E7543B17-C137-4CCA-A8C0-41429C000E2F@twistedmatrix.com>
 <FED4B0F9-BDAC-4872-80E8-F7FF3F4564E9@twistedmatrix.com>
 <CAG=rPVcZmGB62UiVEoU099u_=TnCVe40QqjgKhBfYv3Dd3KJAw@mail.gmail.com>
 <CAG=rPVcMPOdcf5vtFj+F6v5iQcLDJ0JKA=TY-qr3rEUmHxA_wQ@mail.gmail.com>
 <CAG=rPVcKHBW97vyf2=BsoTTFgNFO3oFzcY8db+U02QQPDWerPA@mail.gmail.com>
Message-ID: <2C2889E8-7B8E-47CB-AE85-6990585C8579@twistedmatrix.com>


> On Dec 2, 2016, at 4:41 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Glyph,
> 
> I took your fix, and added some fixes of my own for __repr__() printing of EC keys in this branch:
> 
> https://github.com/twisted/twisted/pull/615 <https://github.com/twisted/twisted/pull/615>
> 
> 
> If I run the tests, I get a new failure:
> 
> 
> trial twisted.conch.test.test_keys.KeyTests.test_fromBlobECDSA
> 
> Traceback (most recent call last):
>   File "/Users/crodrigues/twisted_15/src/twisted/conch/test/test_keys.py", line 776, in test_fromBlobECDSA
>     eckey = keys.Key.fromString(ecblob)
>   File "/Users/crodrigues/twisted_15/src/twisted/conch/ssh/keys.py", line 197, in fromString
>     return method(data)
>   File "/Users/crodrigues/twisted_15/src/twisted/conch/ssh/keys.py", line 253, in _fromString_BLOB
>     default_backend()))
>   File "/Users/crodrigues/venv-3.6/lib/python3.6/site-packages/cryptography/hazmat/primitives/serialization.py", line 69, in load_ssh_public_key
>     return loader(key_type, rest, backend)
>   File "/Users/crodrigues/venv-3.6/lib/python3.6/site-packages/cryptography/hazmat/primitives/serialization.py", line 103, in _load_ssh_ecdsa_public_key
>     'Key header and key body contain different key type values.'
> 
> builtins.ValueError: Key header and key body contain different key type values.
> 
> 
> Also, if I try to access my machine with:
> conch 192.168.1.2
> 
> I see that in the matchesKey() function on this line:
> https://github.com/twisted/twisted/blob/trunk/src/twisted/conch/client/knownhosts.py#L106 <https://github.com/twisted/twisted/blob/trunk/src/twisted/conch/client/knownhosts.py#L106>
> 
> self.publicKey is an EC key, while keyObject is an RSA key.
> 
> Therefore this function always fails, and I cannot log into the box.
> 
> Any ideas?

It looks like https://github.com/twisted/twisted/blob/e48500b94a3b3c751a4ccea36db95a45db8c34be/src/twisted/conch/client/knownhosts.py#L434-L446 isn't really geared towards the idea that there might be multiple entries for one host.  The first step toward a fix would be to correct that algorithm to only fail if no matches are found, or to specifically check the key type before failing.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161203/256adfc5/attachment.html>

From rodrigc at crodrigues.org  Sat Dec  3 17:21:56 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 3 Dec 2016 16:21:56 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <20161202030124.GA19532@hammal>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
Message-ID: <CAG=rPVdQvVB8ke7_aSeFi+xhTNoBKgm=RrqA+UjtTSJo4gDUbA@mail.gmail.com>

On Thu, Dec 1, 2016 at 7:01 PM, Mark Williams <markrwilliams at gmail.com>
wrote:

>
> I bet the key negotiated by conch is not an ECDSA key but rather an
> RSA key.  If this is all the case, then I think you've found a key
> that LibreSSL supports but your client's libssl (which conch calls
> into via cryptography) does not.  What version of libssl do you have?
>


Yes, you are right.  I did some debugging and found that
in ssh_KEX_DH_GEX_REPLY()
https://github.com/twisted/twisted/blob/trunk/src/twisted/conch/ssh/transport.py#L1596
only an RSA key is negotiated, even if an EC key is in the known_hosts file.

I thought that with all the EC fixes committed to the tree that this was
all working,
but it looks like there is still some stuff missing.  This might fill in
the gaps:

https://github.com/twisted/twisted/pull/432

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161203/2b6bb82c/attachment.html>

From glyph at twistedmatrix.com  Sat Dec  3 20:56:20 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 3 Dec 2016 19:56:20 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <CAG=rPVdQvVB8ke7_aSeFi+xhTNoBKgm=RrqA+UjtTSJo4gDUbA@mail.gmail.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <CAG=rPVdQvVB8ke7_aSeFi+xhTNoBKgm=RrqA+UjtTSJo4gDUbA@mail.gmail.com>
Message-ID: <629C9A44-7A99-4896-BBEC-0FE012DE4F24@twistedmatrix.com>


> On Dec 3, 2016, at 4:21 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> On Thu, Dec 1, 2016 at 7:01 PM, Mark Williams <markrwilliams at gmail.com <mailto:markrwilliams at gmail.com>> wrote:
> 
> I bet the key negotiated by conch is not an ECDSA key but rather an
> RSA key.  If this is all the case, then I think you've found a key
> that LibreSSL supports but your client's libssl (which conch calls
> into via cryptography) does not.  What version of libssl do you have?
> 
> 
> Yes, you are right.  I did some debugging and found that in ssh_KEX_DH_GEX_REPLY()
> https://github.com/twisted/twisted/blob/trunk/src/twisted/conch/ssh/transport.py#L1596 <https://github.com/twisted/twisted/blob/trunk/src/twisted/conch/ssh/transport.py#L1596>
> only an RSA key is negotiated, even if an EC key is in the known_hosts file.
> 
> I thought that with all the EC fixes committed to the tree that this was all working,
> but it looks like there is still some stuff missing.  This might fill in the gaps:
> 
> https://github.com/twisted/twisted/pull/432 <https://github.com/twisted/twisted/pull/432>

Yep. The stuff that got merged was intentionally, explicitly a subset of full EC functionality.  We're trying to get it landed in stages, since, as you have already seen, even a partial implementation is very tricky to review :)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161203/4e9e2524/attachment.html>

From glyph at twistedmatrix.com  Sat Dec  3 22:50:55 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 3 Dec 2016 21:50:55 -0800
Subject: [Twisted-Python] memory leaks
Message-ID: <0DF2D12E-FB25-463B-A5DA-6AAF8F287866@twistedmatrix.com>

Following up on a Stack Overflow question from some time ago, http://stackoverflow.com/questions/40604545/twisted-using-connectprotocol-to-connect-endpoint-cause-memory-leak?noredirect=1#comment68573508_40604545 since the submitter added a minimal reproducer, I used Heappy https://pypi.org/project/guppy/ to look at memory sizing, and seeing large numbers of Logger instances and type objects leaking when using client endpoints.  It was not immediately obvious to me where the leak is occurring though, as I was careful to clean up the Deferred results and not leave them in a failure state.

I am hoping that I can entice someone else to diagnose this far enough to actually file a bug :-).

-glyph

From trac at twistedmatrix.com  Sun Dec  4 00:05:20 2016
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 04 Dec 2016 07:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1480835120.86.6930242301514831840@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161204/ed1ef113/attachment-0001.html>

From exarkun at twistedmatrix.com  Sun Dec  4 10:50:59 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Sun, 4 Dec 2016 12:50:59 -0500
Subject: [Twisted-Python] memory leaks
In-Reply-To: <0DF2D12E-FB25-463B-A5DA-6AAF8F287866@twistedmatrix.com>
References: <0DF2D12E-FB25-463B-A5DA-6AAF8F287866@twistedmatrix.com>
Message-ID: <CAEeXt4O4Mz1f-W0QKfULMoOEiuDezzvb4gCUCphLsh_QgmEfzA@mail.gmail.com>

On Sun, Dec 4, 2016 at 12:50 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

> Following up on a Stack Overflow question from some time ago,
> http://stackoverflow.com/questions/40604545/twisted-
> using-connectprotocol-to-connect-endpoint-cause-memory-leak?noredirect=1#
> comment68573508_40604545 since the submitter added a minimal reproducer,
> I used Heappy https://pypi.org/project/guppy/ to look at memory sizing,
> and seeing large numbers of Logger instances and type objects leaking when
> using client endpoints.  It was not immediately obvious to me where the
> leak is occurring though, as I was careful to clean up the Deferred results
> and not leave them in a failure state.
>
> I am hoping that I can entice someone else to diagnose this far enough to
> actually file a bug :-).
>
>
Answered.  I didn't file a bug, I'll let someone else with ideas about
twisted.logger think about what exactly the bug is.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161204/9b75c588/attachment.html>

From exarkun at twistedmatrix.com  Mon Dec  5 15:45:12 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Mon, 5 Dec 2016 17:45:12 -0500
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <CAEeXt4OsPyNs35iqkOozn3PKaDrj=giZFp0vEZq=hyOjYDyWhA@mail.gmail.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
 <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
 <5C81318C-EFE6-47EF-9208-4098D485FA42@twistedmatrix.com>
 <CAEeXt4ONncVJiAH1nh3PT+skpsaXzZZ7oKxBht3chQxSM64+ag@mail.gmail.com>
 <CAEeXt4M-bWMrmPjx3DD1r3JWobDRjFQF2jndCYN2Rk36KCkSNw@mail.gmail.com>
 <64048028-5B08-4787-B179-F7720551D0C3@twistedmatrix.com>
 <CAEeXt4OsPyNs35iqkOozn3PKaDrj=giZFp0vEZq=hyOjYDyWhA@mail.gmail.com>
Message-ID: <CAEeXt4PBRi6j=ZSQ_1eOdGiTKdpi5KyVqDrdayagdb2VozOvKg@mail.gmail.com>

On Sat, Dec 3, 2016 at 9:28 AM, Jean-Paul Calderone <
exarkun at twistedmatrix.com> wrote:

> On Fri, Dec 2, 2016 at 9:28 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
> wrote:
>
>> > On Dec 2, 2016, at 4:49 PM, Jean-Paul Calderone <
>> exarkun at twistedmatrix.com> wrote:
>> >
>> > I deployed this to production.  I don't see a good way to test it
>> without screwing around with twisted trunk ... so don't plan to.  I'll keep
>> an eye on real merges folks are working on and see if it's behaving as
>> desired.
>>
>> Thanks, JP!
>>
>> Would you mind updating https://twistedmatrix.com/trac
>> /wiki/ReviewProcess#Revertingachange and https://twistedmatrix.com/trac
>> /wiki/ReviewProcess#Authors:Howtomergethechangetotrunk to reflect the
>> new syntax that should be used on future merges?
>>
>>
> Updated.  As far as the behavior, do https://github.com/twisted/
> twisted/pull/614 / http://twistedmatrix.com/trac/ticket/8934 look right?
> The trac ticket is fixed but with no comment.  OTOH, I can't find the
> commit message for the PR merge so maybe that's as it should be?
>
>

Updated again.  Craig confirmed that it indeed wasn't working (at all).

Also, the site's now running trac 1.2 (was 1.0.12).  The fab target for
re-deploying trac just picks the newest release at the moment, despite the
*appearance* of being pinned to a particular version.  I don't think I'm
going to try to bite off fixing this.  The problem, though, is multiple
invocations of `pip -U` - a later instance of which is totally happy to
upgrade the trac 1.0.12 install to 1.2.

Jean-Paul



> -glyph
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161205/8fa18066/attachment.html>

From glyph at twistedmatrix.com  Mon Dec  5 23:08:24 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 5 Dec 2016 22:08:24 -0800
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <CAEeXt4PBRi6j=ZSQ_1eOdGiTKdpi5KyVqDrdayagdb2VozOvKg@mail.gmail.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
 <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
 <5C81318C-EFE6-47EF-9208-4098D485FA42@twistedmatrix.com>
 <CAEeXt4ONncVJiAH1nh3PT+skpsaXzZZ7oKxBht3chQxSM64+ag@mail.gmail.com>
 <CAEeXt4M-bWMrmPjx3DD1r3JWobDRjFQF2jndCYN2Rk36KCkSNw@mail.gmail.com>
 <64048028-5B08-4787-B179-F7720551D0C3@twistedmatrix.com>
 <CAEeXt4OsPyNs35iqkOozn3PKaDrj=giZFp0vEZq=hyOjYDyWhA@mail.gmail.com>
 <CAEeXt4PBRi6j=ZSQ_1eOdGiTKdpi5KyVqDrdayagdb2VozOvKg@mail.gmail.com>
Message-ID: <46AA2BA1-54A0-4630-ACB6-03B4BB7B2149@twistedmatrix.com>


> On Dec 5, 2016, at 2:45 PM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> On Sat, Dec 3, 2016 at 9:28 AM, Jean-Paul Calderone <exarkun at twistedmatrix.com <mailto:exarkun at twistedmatrix.com>> wrote:
> On Fri, Dec 2, 2016 at 9:28 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> > On Dec 2, 2016, at 4:49 PM, Jean-Paul Calderone <exarkun at twistedmatrix.com <mailto:exarkun at twistedmatrix.com>> wrote:
> >
> > I deployed this to production.  I don't see a good way to test it without screwing around with twisted trunk ... so don't plan to.  I'll keep an eye on real merges folks are working on and see if it's behaving as desired.
> 
> Thanks, JP!
> 
> Would you mind updating https://twistedmatrix.com/trac/wiki/ReviewProcess#Revertingachange <https://twistedmatrix.com/trac/wiki/ReviewProcess#Revertingachange> and https://twistedmatrix.com/trac/wiki/ReviewProcess#Authors:Howtomergethechangetotrunk <https://twistedmatrix.com/trac/wiki/ReviewProcess#Authors:Howtomergethechangetotrunk> to reflect the new syntax that should be used on future merges?
> 
> 
> Updated.  As far as the behavior, do https://github.com/twisted/twisted/pull/614 <https://github.com/twisted/twisted/pull/614> / http://twistedmatrix.com/trac/ticket/8934 <http://twistedmatrix.com/trac/ticket/8934> look right? The trac ticket is fixed but with no comment.  OTOH, I can't find the commit message for the PR merge so maybe that's as it should be?
>  
> 
> Updated again.  Craig confirmed that it indeed wasn't working (at all).
> 
> Also, the site's now running trac 1.2 (was 1.0.12).  The fab target for re-deploying trac just picks the newest release at the moment, despite the appearance of being pinned to a particular version.  I don't think I'm going to try to bite off fixing this.  The problem, though, is multiple invocations of `pip -U` - a later instance of which is totally happy to upgrade the trac 1.0.12 install to 1.2.

Now I can't create tickets at all.  I hope this is related and not just general decay of our Trac instance :).

The web UI tells me "Warning: The action "None" is not available" without actually creating the ticket.  Nothing that I can see appears in the logs.  Hopefully this warning message means something to someone?

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161205/51d18b40/attachment.html>

From glyph at twistedmatrix.com  Mon Dec  5 23:09:15 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 5 Dec 2016 22:09:15 -0800
Subject: [Twisted-Python] memory leaks
In-Reply-To: <CAEeXt4O4Mz1f-W0QKfULMoOEiuDezzvb4gCUCphLsh_QgmEfzA@mail.gmail.com>
References: <0DF2D12E-FB25-463B-A5DA-6AAF8F287866@twistedmatrix.com>
 <CAEeXt4O4Mz1f-W0QKfULMoOEiuDezzvb4gCUCphLsh_QgmEfzA@mail.gmail.com>
Message-ID: <FCF86015-D929-42AB-84A7-93140272F847@twistedmatrix.com>


> On Dec 4, 2016, at 9:50 AM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> On Sun, Dec 4, 2016 at 12:50 AM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> Following up on a Stack Overflow question from some time ago, http://stackoverflow.com/questions/40604545/twisted-using-connectprotocol-to-connect-endpoint-cause-memory-leak?noredirect=1#comment68573508_40604545 <http://stackoverflow.com/questions/40604545/twisted-using-connectprotocol-to-connect-endpoint-cause-memory-leak?noredirect=1#comment68573508_40604545> since the submitter added a minimal reproducer, I used Heappy https://pypi.org/project/guppy/ <https://pypi.org/project/guppy/> to look at memory sizing, and seeing large numbers of Logger instances and type objects leaking when using client endpoints.  It was not immediately obvious to me where the leak is occurring though, as I was careful to clean up the Deferred results and not leave them in a failure state.
> 
> I am hoping that I can entice someone else to diagnose this far enough to actually file a bug :-).
> 
> 
> Answered.  I didn't file a bug, I'll let someone else with ideas about twisted.logger think about what exactly the bug is.

I wrote up this bug, and will file it when the ability to file bugs on Trac comes back:

twisted.logger._initialBuffer can consume a surprisingly large amount of memory if logging is not initialized


The way that `twisted.logger` is supposed to work is that at process startup time, the global log observer has a ring buffer for any messages emitted before logging is initialized, and emit those messages to the initial set of log observers passed to `globalLogBeginner.beginLoggingTo`.

The size of this buffer (in `twisted.logger._buffer._DEFAULT_BUFFER_MAXIMUM` is 65535.  This value was selected arbitrarily, probably because somebody (me or wsanchez) thought "huh, yeah, 64k, that's probably a fine number); but of course, that's 64k ''bytes''.

If this were a buffer of actual formatted log messages, of say 200 bytes each, that would be about 13 megabytes, which is maybe an acceptable amount of RAM to spend on a log buffer.

However, it isn't that.  It's a buffer of 64k log ''events'', each of which probably has a `log_logger` and `log_source` set, each of which is an object attached to potentially arbitrary data.  For example, every `Factory` that starts up logs something, which means you're holding on to an instance, and an instance dictionary, and the protocol instance, and the protocol instance dictionary.  Worse yet, any logged ''failures'' might hold on to all the stuff on their stack.

Add it all up and you end up with a log buffer totaling in the hundreds of megabytes, or even gigabytes, once it's full.  In an application that naively uses Twisted without ever initializing logging, this hangs around forever.

This buffer should probably be a ''lot'' smaller, and we might want to emit a warning when it fills up, reminding people that it is ''only polite'' to start up the logging subsystem, even just to explicitly throw logs away.

Text is here in case someone else manages to make trac come back and would like to file it before I get back :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161205/f15acb77/attachment.html>

From hawkowl at atleastfornow.net  Mon Dec  5 23:18:12 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Tue, 6 Dec 2016 17:18:12 +1100
Subject: [Twisted-Python] memory leaks
In-Reply-To: <FCF86015-D929-42AB-84A7-93140272F847@twistedmatrix.com>
References: <0DF2D12E-FB25-463B-A5DA-6AAF8F287866@twistedmatrix.com>
 <CAEeXt4O4Mz1f-W0QKfULMoOEiuDezzvb4gCUCphLsh_QgmEfzA@mail.gmail.com>
 <FCF86015-D929-42AB-84A7-93140272F847@twistedmatrix.com>
Message-ID: <93DF4FD6-7B38-438E-A241-3BC39B28835E@atleastfornow.net>


> On 6 Dec. 2016, at 17:09, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 
> twisted.logger._initialBuffer can consume a surprisingly large amount of memory if logging is not initialized
> 
> 
> The way that `twisted.logger` is supposed to work is that at process startup time, the global log observer has a ring buffer for any messages emitted before logging is initialized, and emit those messages to the initial set of log observers passed to `globalLogBeginner.beginLoggingTo`.
> 
> The size of this buffer (in `twisted.logger._buffer._DEFAULT_BUFFER_MAXIMUM` is 65535.  This value was selected arbitrarily, probably because somebody (me or wsanchez) thought "huh, yeah, 64k, that's probably a fine number); but of course, that's 64k ''bytes''.
> 
> If this were a buffer of actual formatted log messages, of say 200 bytes each, that would be about 13 megabytes, which is maybe an acceptable amount of RAM to spend on a log buffer.
> 
> However, it isn't that.  It's a buffer of 64k log ''events'', each of which probably has a `log_logger` and `log_source` set, each of which is an object attached to potentially arbitrary data.  For example, every `Factory` that starts up logs something, which means you're holding on to an instance, and an instance dictionary, and the protocol instance, and the protocol instance dictionary.  Worse yet, any logged ''failures'' might hold on to all the stuff on their stack.
> 
> Add it all up and you end up with a log buffer totaling in the hundreds of megabytes, or even gigabytes, once it's full.  In an application that naively uses Twisted without ever initializing logging, this hangs around forever.
> 
> This buffer should probably be a ''lot'' smaller, and we might want to emit a warning when it fills up, reminding people that it is ''only polite'' to start up the logging subsystem, even just to explicitly throw logs away.


I fixed trac: https://twistedmatrix.com/trac/ticket/8936#ticket <https://twistedmatrix.com/trac/ticket/8936#ticket>

- Amber
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161206/c42eebe0/attachment-0001.html>

From glyph at twistedmatrix.com  Mon Dec  5 23:58:08 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 5 Dec 2016 22:58:08 -0800
Subject: [Twisted-Python] memory leaks
In-Reply-To: <93DF4FD6-7B38-438E-A241-3BC39B28835E@atleastfornow.net>
References: <0DF2D12E-FB25-463B-A5DA-6AAF8F287866@twistedmatrix.com>
 <CAEeXt4O4Mz1f-W0QKfULMoOEiuDezzvb4gCUCphLsh_QgmEfzA@mail.gmail.com>
 <FCF86015-D929-42AB-84A7-93140272F847@twistedmatrix.com>
 <93DF4FD6-7B38-438E-A241-3BC39B28835E@atleastfornow.net>
Message-ID: <3744C3D1-5932-4C27-ABB3-17AF8B908364@twistedmatrix.com>


> On Dec 5, 2016, at 10:18 PM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> 
>> On 6 Dec. 2016, at 17:09, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>> 
>> 
>> twisted.logger._initialBuffer can consume a surprisingly large amount of memory if logging is not initialized
>> 
>> 
>> The way that `twisted.logger` is supposed to work is that at process startup time, the global log observer has a ring buffer for any messages emitted before logging is initialized, and emit those messages to the initial set of log observers passed to `globalLogBeginner.beginLoggingTo`.
>> 
>> The size of this buffer (in `twisted.logger._buffer._DEFAULT_BUFFER_MAXIMUM` is 65535.  This value was selected arbitrarily, probably because somebody (me or wsanchez) thought "huh, yeah, 64k, that's probably a fine number); but of course, that's 64k ''bytes''.
>> 
>> If this were a buffer of actual formatted log messages, of say 200 bytes each, that would be about 13 megabytes, which is maybe an acceptable amount of RAM to spend on a log buffer.
>> 
>> However, it isn't that.  It's a buffer of 64k log ''events'', each of which probably has a `log_logger` and `log_source` set, each of which is an object attached to potentially arbitrary data.  For example, every `Factory` that starts up logs something, which means you're holding on to an instance, and an instance dictionary, and the protocol instance, and the protocol instance dictionary.  Worse yet, any logged ''failures'' might hold on to all the stuff on their stack.
>> 
>> Add it all up and you end up with a log buffer totaling in the hundreds of megabytes, or even gigabytes, once it's full.  In an application that naively uses Twisted without ever initializing logging, this hangs around forever.
>> 
>> This buffer should probably be a ''lot'' smaller, and we might want to emit a warning when it fills up, reminding people that it is ''only polite'' to start up the logging subsystem, even just to explicitly throw logs away.
> 
> 
> I fixed trac: https://twistedmatrix.com/trac/ticket/8936#ticket <https://twistedmatrix.com/trac/ticket/8936#ticket>
Thanks!

By "Fixed" I take it you mean rolled back, via:

trac at dornkirk:~$ ./virtualenv/bin/pip freeze | grep Trac==
Trac==1.0.13

and
https://github.com/twisted-infra/braid/commit/c2d393fd501c6464b1b475eff214cab64f13ee2a

Don't get me wrong, I'm not complaining :). This is certainly the right thing to do for now.  But I'm wondering if you know what's wrong with 1.2 so we can upgrade soonish?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161205/9f7bbeb1/attachment.html>

From psi29a at gmail.com  Tue Dec  6 04:17:16 2016
From: psi29a at gmail.com (bret curtis)
Date: Tue, 6 Dec 2016 12:17:16 +0100
Subject: [Twisted-Python] memory leaks
In-Reply-To: <3744C3D1-5932-4C27-ABB3-17AF8B908364@twistedmatrix.com>
References: <0DF2D12E-FB25-463B-A5DA-6AAF8F287866@twistedmatrix.com>
 <CAEeXt4O4Mz1f-W0QKfULMoOEiuDezzvb4gCUCphLsh_QgmEfzA@mail.gmail.com>
 <FCF86015-D929-42AB-84A7-93140272F847@twistedmatrix.com>
 <93DF4FD6-7B38-438E-A241-3BC39B28835E@atleastfornow.net>
 <3744C3D1-5932-4C27-ABB3-17AF8B908364@twistedmatrix.com>
Message-ID: <CA+LhZ98g4CnXFcUEfgt+_-cC1ofwgX1vvOjVbG32cr4oR=yUhQ@mail.gmail.com>

Isn't this a duplicate of my "memory leak" bug report from about 11 months ago?
https://twistedmatrix.com/trac/ticket/8164

Glype's last comment on the ticket was:
Now, again, I want to be clear that the buffer size here is still a
bug, and we vastly mis-estimated a reasonable size.

The end result was that Hawkie indicated that there was a 64K buffer
of variable length logs. Because they are variable in length means
they use either almost no memory to potentially causing the OOM to
come along. What wasn't clear was if you reached the 64K limit, does
Twisted then just drop the rest of the logs are is the buffer a
circular one and drops the first entry to accommodate the last entry
or something else entirely?

Cheers,
Bret


On Tue, Dec 6, 2016 at 7:58 AM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
> On Dec 5, 2016, at 10:18 PM, Amber Hawkie Brown <hawkowl at atleastfornow.net>
> wrote:
>
>
> On 6 Dec. 2016, at 17:09, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
>
> twisted.logger._initialBuffer can consume a surprisingly large amount of
> memory if logging is not initialized
>
>
> The way that `twisted.logger` is supposed to work is that at process startup
> time, the global log observer has a ring buffer for any messages emitted
> before logging is initialized, and emit those messages to the initial set of
> log observers passed to `globalLogBeginner.beginLoggingTo`.
>
> The size of this buffer (in `twisted.logger._buffer._DEFAULT_BUFFER_MAXIMUM`
> is 65535.  This value was selected arbitrarily, probably because somebody
> (me or wsanchez) thought "huh, yeah, 64k, that's probably a fine number);
> but of course, that's 64k ''bytes''.
>
> If this were a buffer of actual formatted log messages, of say 200 bytes
> each, that would be about 13 megabytes, which is maybe an acceptable amount
> of RAM to spend on a log buffer.
>
> However, it isn't that.  It's a buffer of 64k log ''events'', each of which
> probably has a `log_logger` and `log_source` set, each of which is an object
> attached to potentially arbitrary data.  For example, every `Factory` that
> starts up logs something, which means you're holding on to an instance, and
> an instance dictionary, and the protocol instance, and the protocol instance
> dictionary.  Worse yet, any logged ''failures'' might hold on to all the
> stuff on their stack.
>
> Add it all up and you end up with a log buffer totaling in the hundreds of
> megabytes, or even gigabytes, once it's full.  In an application that
> naively uses Twisted without ever initializing logging, this hangs around
> forever.
>
> This buffer should probably be a ''lot'' smaller, and we might want to emit
> a warning when it fills up, reminding people that it is ''only polite'' to
> start up the logging subsystem, even just to explicitly throw logs away.
>
>
> I fixed trac: https://twistedmatrix.com/trac/ticket/8936#ticket
>
>
> Thanks!
>
> By "Fixed" I take it you mean rolled back, via:
>
> trac at dornkirk:~$ ./virtualenv/bin/pip freeze | grep Trac==
> Trac==1.0.13
>
>
> and
>
> https://github.com/twisted-infra/braid/commit/c2d393fd501c6464b1b475eff214cab64f13ee2a
>
>
> Don't get me wrong, I'm not complaining :). This is certainly the right
> thing to do for now.  But I'm wondering if you know what's wrong with 1.2 so
> we can upgrade soonish?
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From exarkun at twistedmatrix.com  Tue Dec  6 06:04:11 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Tue, 6 Dec 2016 08:04:11 -0500
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <46AA2BA1-54A0-4630-ACB6-03B4BB7B2149@twistedmatrix.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
 <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
 <5C81318C-EFE6-47EF-9208-4098D485FA42@twistedmatrix.com>
 <CAEeXt4ONncVJiAH1nh3PT+skpsaXzZZ7oKxBht3chQxSM64+ag@mail.gmail.com>
 <CAEeXt4M-bWMrmPjx3DD1r3JWobDRjFQF2jndCYN2Rk36KCkSNw@mail.gmail.com>
 <64048028-5B08-4787-B179-F7720551D0C3@twistedmatrix.com>
 <CAEeXt4OsPyNs35iqkOozn3PKaDrj=giZFp0vEZq=hyOjYDyWhA@mail.gmail.com>
 <CAEeXt4PBRi6j=ZSQ_1eOdGiTKdpi5KyVqDrdayagdb2VozOvKg@mail.gmail.com>
 <46AA2BA1-54A0-4630-ACB6-03B4BB7B2149@twistedmatrix.com>
Message-ID: <CAEeXt4Pz2xKLX8mxMOOSEg_frUu=DENsPwk71Bt948cJkaM-oQ@mail.gmail.com>

On Tue, Dec 6, 2016 at 1:08 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> Now I can't create tickets at all.  I hope this is related and not just
> general decay of our Trac instance :).
>
> The web UI tells me "Warning: The action "None" is not available" without
> actually creating the ticket.  Nothing that I can see appears in the logs.
> Hopefully this warning message means something to someone?
>

Not to me, unfortunately. :(


>
> -glyph
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161206/69514518/attachment.html>

From exarkun at twistedmatrix.com  Tue Dec  6 06:24:02 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Tue, 6 Dec 2016 08:24:02 -0500
Subject: [Twisted-Python] trac deployment (was: memory leaks)
Message-ID: <CAEeXt4OQo+KhQCG5m0ym=D+1AyohL466mgTLzgjTKNj-W3xB5w@mail.gmail.com>

On Tue, Dec 6, 2016 at 1:58 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> Thanks!
>
> By "Fixed" I take it you mean rolled back, via:
>
> trac at dornkirk:~$ ./virtualenv/bin/pip freeze | grep Trac==
> Trac==1.0.13
>
>
> and
>
> https://github.com/twisted-infra/braid/commit/
> c2d393fd501c6464b1b475eff214cab64f13ee2a
>
>
> Don't get me wrong, I'm not complaining :). This is certainly the right
> thing to do for now.  But I'm wondering if you know what's wrong with 1.2
> so we can upgrade soonish?
>
>
Is the braid trac service also fixed - or does the next person who tries to
update the deployment need to watch out for this same failure mode?

Jean-Paul


> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161206/b43db52e/attachment.html>

From glyph at twistedmatrix.com  Tue Dec  6 10:54:35 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 6 Dec 2016 09:54:35 -0800
Subject: [Twisted-Python] trac deployment (was: memory leaks)
In-Reply-To: <CAEeXt4OQo+KhQCG5m0ym=D+1AyohL466mgTLzgjTKNj-W3xB5w@mail.gmail.com>
References: <CAEeXt4OQo+KhQCG5m0ym=D+1AyohL466mgTLzgjTKNj-W3xB5w@mail.gmail.com>
Message-ID: <CBEA0689-4B2A-42A3-AA34-D0E194A743B6@twistedmatrix.com>


> On Dec 6, 2016, at 5:24 AM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> On Tue, Dec 6, 2016 at 1:58 AM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> Thanks!
> 
> By "Fixed" I take it you mean rolled back, via:
> 
> trac at dornkirk:~$ ./virtualenv/bin/pip freeze | grep Trac==
> Trac==1.0.13
> 
> and
> https://github.com/twisted-infra/braid/commit/c2d393fd501c6464b1b475eff214cab64f13ee2a <https://github.com/twisted-infra/braid/commit/c2d393fd501c6464b1b475eff214cab64f13ee2a>
> 
> Don't get me wrong, I'm not complaining :). This is certainly the right thing to do for now.  But I'm wondering if you know what's wrong with 1.2 so we can upgrade soonish?
> 
> 
> Is the braid trac service also fixed - or does the next person who tries to update the deployment need to watch out for this same failure mode?

The referenced commit to braid switches from multiple .install calls (i.e. "pip" runs) with pinned versions of things to a single one where all versions are pinned; as I understand it this should pin it properly for the future.  (It was upgrading trac in some of the things-that-depend-on-trac .install() calls.)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161206/8ca75d84/attachment-0001.html>

From glyph at twistedmatrix.com  Tue Dec  6 10:55:35 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 6 Dec 2016 09:55:35 -0800
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <CAEeXt4Pz2xKLX8mxMOOSEg_frUu=DENsPwk71Bt948cJkaM-oQ@mail.gmail.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
 <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
 <5C81318C-EFE6-47EF-9208-4098D485FA42@twistedmatrix.com>
 <CAEeXt4ONncVJiAH1nh3PT+skpsaXzZZ7oKxBht3chQxSM64+ag@mail.gmail.com>
 <CAEeXt4M-bWMrmPjx3DD1r3JWobDRjFQF2jndCYN2Rk36KCkSNw@mail.gmail.com>
 <64048028-5B08-4787-B179-F7720551D0C3@twistedmatrix.com>
 <CAEeXt4OsPyNs35iqkOozn3PKaDrj=giZFp0vEZq=hyOjYDyWhA@mail.gmail.com>
 <CAEeXt4PBRi6j=ZSQ_1eOdGiTKdpi5KyVqDrdayagdb2VozOvKg@mail.gmail.com>
 <46AA2BA1-54A0-4630-ACB6-03B4BB7B2149@twistedmatrix.com>
 <CAEeXt4Pz2xKLX8mxMOOSEg_frUu=DENsPwk71Bt948cJkaM-oQ@mail.gmail.com>
Message-ID: <9FD52EDB-BEE2-4973-977E-2409CA255DE9@twistedmatrix.com>

On Dec 6, 2016, at 5:04 AM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> On Tue, Dec 6, 2016 at 1:08 AM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> Now I can't create tickets at all.  I hope this is related and not just general decay of our Trac instance :).
> 
> The web UI tells me "Warning: The action "None" is not available" without actually creating the ticket.  Nothing that I can see appears in the logs.  Hopefully this warning message means something to someone?
> 
> Not to me, unfortunately. :(

Luckily it meant something to Amber!

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161206/2768c00f/attachment.html>

From exarkun at twistedmatrix.com  Tue Dec  6 11:27:20 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Tue, 6 Dec 2016 13:27:20 -0500
Subject: [Twisted-Python] trac deployment (was: memory leaks)
In-Reply-To: <CBEA0689-4B2A-42A3-AA34-D0E194A743B6@twistedmatrix.com>
References: <CAEeXt4OQo+KhQCG5m0ym=D+1AyohL466mgTLzgjTKNj-W3xB5w@mail.gmail.com>
 <CBEA0689-4B2A-42A3-AA34-D0E194A743B6@twistedmatrix.com>
Message-ID: <CAEeXt4PQ5d8EgVmPknxJvMTndnnuBsxjV_-ag-u6aWddmd07dg@mail.gmail.com>

On Tue, Dec 6, 2016 at 12:54 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Dec 6, 2016, at 5:24 AM, Jean-Paul Calderone <exarkun at twistedmatrix.com>
> wrote:
>
> Is the braid trac service also fixed - or does the next person who tries
> to update the deployment need to watch out for this same failure mode?
>
>
> The referenced commit to braid switches from multiple .install calls (i.e.
> "pip" runs) with pinned versions of things to a single one where all
> versions are pinned; as I understand it this should pin it properly for the
> future.  (It was upgrading trac in some of the things-that-depend-on-trac
> .install() calls.)
>

Cool.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161206/45d1c290/attachment.html>

From glyph at twistedmatrix.com  Tue Dec  6 11:28:47 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 6 Dec 2016 10:28:47 -0800
Subject: [Twisted-Python] memory leaks
In-Reply-To: <CA+LhZ98g4CnXFcUEfgt+_-cC1ofwgX1vvOjVbG32cr4oR=yUhQ@mail.gmail.com>
References: <0DF2D12E-FB25-463B-A5DA-6AAF8F287866@twistedmatrix.com>
 <CAEeXt4O4Mz1f-W0QKfULMoOEiuDezzvb4gCUCphLsh_QgmEfzA@mail.gmail.com>
 <FCF86015-D929-42AB-84A7-93140272F847@twistedmatrix.com>
 <93DF4FD6-7B38-438E-A241-3BC39B28835E@atleastfornow.net>
 <3744C3D1-5932-4C27-ABB3-17AF8B908364@twistedmatrix.com>
 <CA+LhZ98g4CnXFcUEfgt+_-cC1ofwgX1vvOjVbG32cr4oR=yUhQ@mail.gmail.com>
Message-ID: <2C47E3C8-1D75-44AF-930A-54F7C6228E34@twistedmatrix.com>


> On Dec 6, 2016, at 3:17 AM, bret curtis <psi29a at gmail.com> wrote:
> 
> Isn't this a duplicate of my "memory leak" bug report from about 11 months ago?
> https://twistedmatrix.com/trac/ticket/8164

Yes, thank you for the reference to that.  I've closed the new one and updated the old one.

> Glype's last comment on the ticket was:
> Now, again, I want to be clear that the buffer size here is still a
> bug, and we vastly mis-estimated a reasonable size.

Apparently my opinion hasn't changed, although I didn't remember it ;).

> The end result was that Hawkie indicated that there was a 64K buffer
> of variable length logs. Because they are variable in length means
> they use either almost no memory to potentially causing the OOM to
> come along. What wasn't clear was if you reached the 64K limit, does
> Twisted then just drop the rest of the logs are is the buffer a
> circular one and drops the first entry to accommodate the last entry
> or something else entirely?

It's intended to be a ring buffer, yes, so it should drop the earlier ones.  A PR to shrink the default to something reasonable based on your measurements would be very helpful :).

-glyph

From glyph at twistedmatrix.com  Thu Dec  8 18:49:05 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 8 Dec 2016 17:49:05 -0800
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <CAEeXt4PBRi6j=ZSQ_1eOdGiTKdpi5KyVqDrdayagdb2VozOvKg@mail.gmail.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
 <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
 <5C81318C-EFE6-47EF-9208-4098D485FA42@twistedmatrix.com>
 <CAEeXt4ONncVJiAH1nh3PT+skpsaXzZZ7oKxBht3chQxSM64+ag@mail.gmail.com>
 <CAEeXt4M-bWMrmPjx3DD1r3JWobDRjFQF2jndCYN2Rk36KCkSNw@mail.gmail.com>
 <64048028-5B08-4787-B179-F7720551D0C3@twistedmatrix.com>
 <CAEeXt4OsPyNs35iqkOozn3PKaDrj=giZFp0vEZq=hyOjYDyWhA@mail.gmail.com>
 <CAEeXt4PBRi6j=ZSQ_1eOdGiTKdpi5KyVqDrdayagdb2VozOvKg@mail.gmail.com>
Message-ID: <AA00B922-B209-42CA-AD7C-EEF50ADFE2AC@twistedmatrix.com>


> On Dec 5, 2016, at 2:45 PM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> Updated again.  Craig confirmed that it indeed wasn't working (at all).
> 
> Also, the site's now running trac 1.2 (was 1.0.12).  The fab target for re-deploying trac just picks the newest release at the moment, despite the appearance of being pinned to a particular version.  I don't think I'm going to try to bite off fixing this.  The problem, though, is multiple invocations of `pip -U` - a later instance of which is totally happy to upgrade the trac 1.0.12 install to 1.2.


Another problem commit:

https://github.com/twisted/twisted/commit/6ec4521caae4edec97238ae00ff9bf81a4701a73

This should have reopened https://twistedmatrix.com/trac/ticket/8937 but didn't.

Have there been any examples of it working yet?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161208/e8c79515/attachment.html>

From exarkun at twistedmatrix.com  Thu Dec  8 20:03:49 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Thu, 8 Dec 2016 22:03:49 -0500
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <AA00B922-B209-42CA-AD7C-EEF50ADFE2AC@twistedmatrix.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
 <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
 <5C81318C-EFE6-47EF-9208-4098D485FA42@twistedmatrix.com>
 <CAEeXt4ONncVJiAH1nh3PT+skpsaXzZZ7oKxBht3chQxSM64+ag@mail.gmail.com>
 <CAEeXt4M-bWMrmPjx3DD1r3JWobDRjFQF2jndCYN2Rk36KCkSNw@mail.gmail.com>
 <64048028-5B08-4787-B179-F7720551D0C3@twistedmatrix.com>
 <CAEeXt4OsPyNs35iqkOozn3PKaDrj=giZFp0vEZq=hyOjYDyWhA@mail.gmail.com>
 <CAEeXt4PBRi6j=ZSQ_1eOdGiTKdpi5KyVqDrdayagdb2VozOvKg@mail.gmail.com>
 <AA00B922-B209-42CA-AD7C-EEF50ADFE2AC@twistedmatrix.com>
Message-ID: <CAEeXt4NWBKQAct6kG-Y1ncFR2ZOoSHRpeFkbCnG5U2g9Ni_SAA@mail.gmail.com>

On Thu, Dec 8, 2016 at 8:49 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Dec 5, 2016, at 2:45 PM, Jean-Paul Calderone <exarkun at twistedmatrix.com>
> wrote:
>
> Updated again.  Craig confirmed that it indeed wasn't working (at all).
>
> Also, the site's now running trac 1.2 (was 1.0.12).  The fab target for
> re-deploying trac just picks the newest release at the moment, despite the
>  *appearance* of being pinned to a particular version.  I don't think I'm
> going to try to bite off fixing this.  The problem, though, is multiple
> invocations of `pip -U` - a later instance of which is totally happy to
> upgrade the trac 1.0.12 install to 1.2.
>
>
>
> Another problem commit:
>
> https://github.com/twisted/twisted/commit/6ec4521caae4edec97238ae00ff9bf
> 81a4701a73
>
> This should have reopened https://twistedmatrix.com/trac/ticket/8937 but
> didn't.
>
> Have there been any examples of it working yet?
>

(Followed-up on IRC in Twisted admin channe; glyph can summarize if he
> wants.
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161208/b7a5c94a/attachment.html>

From glyph at twistedmatrix.com  Thu Dec  8 23:54:30 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 8 Dec 2016 22:54:30 -0800
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <CAEeXt4NWBKQAct6kG-Y1ncFR2ZOoSHRpeFkbCnG5U2g9Ni_SAA@mail.gmail.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
 <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
 <5C81318C-EFE6-47EF-9208-4098D485FA42@twistedmatrix.com>
 <CAEeXt4ONncVJiAH1nh3PT+skpsaXzZZ7oKxBht3chQxSM64+ag@mail.gmail.com>
 <CAEeXt4M-bWMrmPjx3DD1r3JWobDRjFQF2jndCYN2Rk36KCkSNw@mail.gmail.com>
 <64048028-5B08-4787-B179-F7720551D0C3@twistedmatrix.com>
 <CAEeXt4OsPyNs35iqkOozn3PKaDrj=giZFp0vEZq=hyOjYDyWhA@mail.gmail.com>
 <CAEeXt4PBRi6j=ZSQ_1eOdGiTKdpi5KyVqDrdayagdb2VozOvKg@mail.gmail.com>
 <AA00B922-B209-42CA-AD7C-EEF50ADFE2AC@twistedmatrix.com>
 <CAEeXt4NWBKQAct6kG-Y1ncFR2ZOoSHRpeFkbCnG5U2g9Ni_SAA@mail.gmail.com>
Message-ID: <4E1019A8-0A71-4553-85FA-D0E0464E366B@twistedmatrix.com>


> On Dec 8, 2016, at 7:03 PM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> On Thu, Dec 8, 2016 at 8:49 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
>> On Dec 5, 2016, at 2:45 PM, Jean-Paul Calderone <exarkun at twistedmatrix.com <mailto:exarkun at twistedmatrix.com>> wrote:
>> 
>> Updated again.  Craig confirmed that it indeed wasn't working (at all).
>> 
>> Also, the site's now running trac 1.2 (was 1.0.12).  The fab target for re-deploying trac just picks the newest release at the moment, despite the appearance of being pinned to a particular version.  I don't think I'm going to try to bite off fixing this.  The problem, though, is multiple invocations of `pip -U` - a later instance of which is totally happy to upgrade the trac 1.0.12 install to 1.2.
> 
> 
> Another problem commit:
> 
> https://github.com/twisted/twisted/commit/6ec4521caae4edec97238ae00ff9bf81a4701a73 <https://github.com/twisted/twisted/commit/6ec4521caae4edec97238ae00ff9bf81a4701a73>
> 
> This should have reopened https://twistedmatrix.com/trac/ticket/8937 <https://twistedmatrix.com/trac/ticket/8937> but didn't.
> 
> Have there been any examples of it working yet?
> 
> (Followed-up on IRC in Twisted admin channe; glyph can summarize if he wants.

The part that I remember was just fixing trac after it broke - but hopefully what broke it was an update that fixes the regex :).  Hopefully I'll close another ticket tonight and test it out...

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161208/53fc406c/attachment.html>

From glyph at twistedmatrix.com  Fri Dec  9 03:04:22 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 9 Dec 2016 02:04:22 -0800
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <4E1019A8-0A71-4553-85FA-D0E0464E366B@twistedmatrix.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
 <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
 <5C81318C-EFE6-47EF-9208-4098D485FA42@twistedmatrix.com>
 <CAEeXt4ONncVJiAH1nh3PT+skpsaXzZZ7oKxBht3chQxSM64+ag@mail.gmail.com>
 <CAEeXt4M-bWMrmPjx3DD1r3JWobDRjFQF2jndCYN2Rk36KCkSNw@mail.gmail.com>
 <64048028-5B08-4787-B179-F7720551D0C3@twistedmatrix.com>
 <CAEeXt4OsPyNs35iqkOozn3PKaDrj=giZFp0vEZq=hyOjYDyWhA@mail.gmail.com>
 <CAEeXt4PBRi6j=ZSQ_1eOdGiTKdpi5KyVqDrdayagdb2VozOvKg@mail.gmail.com>
 <AA00B922-B209-42CA-AD7C-EEF50ADFE2AC@twistedmatrix.com>
 <CAEeXt4NWBKQAct6kG-Y1ncFR2ZOoSHRpeFkbCnG5U2g9Ni_SAA@mail.gmail.com>
 <4E1019A8-0A71-4553-85FA-D0E0464E366B@twistedmatrix.com>
Message-ID: <3487B366-6804-47E8-B91A-D8ADFBBB6A1A@twistedmatrix.com>


> On Dec 8, 2016, at 10:54 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Dec 8, 2016, at 7:03 PM, Jean-Paul Calderone <exarkun at twistedmatrix.com <mailto:exarkun at twistedmatrix.com>> wrote:
>> 
>> On Thu, Dec 8, 2016 at 8:49 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>> 
>>> On Dec 5, 2016, at 2:45 PM, Jean-Paul Calderone <exarkun at twistedmatrix.com <mailto:exarkun at twistedmatrix.com>> wrote:
>>> 
>>> Updated again.  Craig confirmed that it indeed wasn't working (at all).
>>> 
>>> Also, the site's now running trac 1.2 (was 1.0.12).  The fab target for re-deploying trac just picks the newest release at the moment, despite the appearance of being pinned to a particular version.  I don't think I'm going to try to bite off fixing this.  The problem, though, is multiple invocations of `pip -U` - a later instance of which is totally happy to upgrade the trac 1.0.12 install to 1.2.
>> 
>> 
>> Another problem commit:
>> 
>> https://github.com/twisted/twisted/commit/6ec4521caae4edec97238ae00ff9bf81a4701a73 <https://github.com/twisted/twisted/commit/6ec4521caae4edec97238ae00ff9bf81a4701a73>
>> 
>> This should have reopened https://twistedmatrix.com/trac/ticket/8937 <https://twistedmatrix.com/trac/ticket/8937> but didn't.
>> 
>> Have there been any examples of it working yet?
>> 
>> (Followed-up on IRC in Twisted admin channe; glyph can summarize if he wants.
> 
> The part that I remember was just fixing trac after it broke - but hopefully what broke it was an update that fixes the regex :).  Hopefully I'll close another ticket tonight and test it out...

I did test it out, aaaaand:

https://twistedmatrix.com/trac/ticket/8922#comment:5

It works!  \o/

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161209/8bb4b813/attachment-0001.html>

From trac at twistedmatrix.com  Sun Dec 11 00:05:20 2016
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 11 Dec 2016 07:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1481439920.08.6715876988701666206@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161211/d24778e2/attachment.html>

From glyph at twistedmatrix.com  Mon Dec 12 16:38:38 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 12 Dec 2016 15:38:38 -0800
Subject: [Twisted-Python] CI FYI
Message-ID: <9AE042DC-E6E9-43C7-8358-F391F61DBFF4@twistedmatrix.com>

Hello Twisted maintainers,

I realized today that not not everyone is aware of this quirk in our build infrastructure, and since it's a required step, y'all should probably know about it.

Any PR that we merge should run not just on public CI (travis, appveyor, codecov) but also our own Buildbot infrastructure.  Many of our supported platforms, particularly desktop Windows and OS X, do not have good support from multi-tenant CI vendors.  This has always been true, but recently it became mechanically necessary because the OS X status from buildbot became a required status, which means that it appears in the "waiting" state even if no build has actually been started.  No twisted PR will have a successful build unless some TM Labs member has done the following.

Since our buildbots do not have adequate security to run totally untrusted code, only project members may submit builds to them.  The way a project member submits such a build is they cause a ref to exist in the official Twisted repo's namespace.

So, a necessary step in the code review process is to scan the diff to ensure that it's not malicious, and to then ensure that a branch exists in the https://github.com/twisted/twisted/ <https://github.com/twisted/twisted/> namespace pointing at the exact commit that you want buildbot builds to run tests for.  (Don't worry: the buildbots are not fully secured, but neither do they contain particularly sensitive data.  If you screw this check up, the main potentially bad consequence is to availability of the build fleet, not compromise of PyPI releases or anything like that.  That said, if you screw up the security check in the full review and it lands on master, then some really bad stuff can happen...)

The way to express this intent to Git is something like:

$ git fetch origin "refs/pull/${PR_NUMBER}/head"
$ git push origin FETCH_HEAD:"${TICKET_NUMBER}-branchname"

I don't know of a way to do it through the github web UI but perhaps someone more knowledgeable could chime in.

Thanks,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161212/f19a5d90/attachment.html>

From glyph at twistedmatrix.com  Tue Dec 13 12:18:11 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 13 Dec 2016 11:18:11 -0800
Subject: [Twisted-Python] buildbot certificate expiration
Message-ID: <223E3FD3-1530-4B6E-A7F4-7F17489A079C@twistedmatrix.com>

Buildbot's HTTPS certificate is expired.  This suggests that its txacme auto-renewal has come unglued and fallen off.  I'll probably poke at it later today but I figured I'd just send a note first in case someone else happened to know what was up...

-glyph

From ex.vitorino at gmail.com  Thu Dec 15 10:07:42 2016
From: ex.vitorino at gmail.com (exvito here)
Date: Thu, 15 Dec 2016 17:07:42 +0000
Subject: [Twisted-Python] ITransport.write after IProtocol.connectionLost --
	no failure/exception?
Message-ID: <CADtv4OAY19LAvF495Q3NAu=DAdogPD87dWyDJN-_Xv0ZB-Gbkg@mail.gmail.com>

Dear all,

The subject says most of it. While diagnosing a behavior on a somewhat
large codebase, I found out something somewhat surprising -- see
subject -- which is replicated with the minimal code example below.

It is a LineReceiver client that:
1. Connects to 127.0.0.1:10000.
2. Sends a line of text.
3. Disconnects one second later.
4. Tries to send another line of text, one second after disconnection.

I expected step 4 to fail somehow, given that Twisted promptly
detected that the connection closed and IProtocol.connectionLost was
called, as documented. Nevertheless, it does not fail.

So the questions are:
a) Why does it not fail? I'm sure there is a good reason for that, as
most things do in Twisted.
b) Does a protocol implementation, like the one in the example, really
need to track connectionMade / connectionLost calls before going for
self.transport.write?
c) Can a protocol implementation, instead, depend on
self.transport.connected for which I found no documentation? (I
probably missed it, where is it?)

Thanks in advance for enlightening me. :-)
Regards,
--
exvito


# --[ cut here ]----------------------------------------------------

from twisted.internet import protocol, reactor, defer
from twisted.protocols import basic


class ClientAPI(basic.LineReceiver):

    def _log(self, msg):
        print('[connected=%r] %s' % (self.transport.connected, msg))

    def _send(self, line):
        self.sendLine(line)
        self._log('sent: %r' % (line,))

    def connectionMade(self):
        self._log('connection made')
        self._send('first line')
        reactor.callLater(1, lambda: self.transport.loseConnection())

    def connectionLost(self, reason):
        self._log('connection lost')
        reactor.callLater(1, self.postConnectionLostCall)

    def postConnectionLostCall(self):
        self._send('post conn lost call - SHOULD FAIL')


class ClientFactory(protocol.ClientFactory):

    protocol = ClientAPI

    def clientConnectionFailed(self, connector, reason):
        print 'connection failed -', reason
        reactor.stop()


if __name__ == '__main__':

    factory = ClientFactory()
    reactor.connectTCP('127.0.0.1', 10000, factory)
    reactor.run()


From cory at lukasa.co.uk  Fri Dec 16 06:22:09 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Fri, 16 Dec 2016 08:22:09 -0500
Subject: [Twisted-Python] ITransport.write after
 IProtocol.connectionLost -- no failure/exception?
In-Reply-To: <CADtv4OAY19LAvF495Q3NAu=DAdogPD87dWyDJN-_Xv0ZB-Gbkg@mail.gmail.com>
References: <CADtv4OAY19LAvF495Q3NAu=DAdogPD87dWyDJN-_Xv0ZB-Gbkg@mail.gmail.com>
Message-ID: <2FA38717-2D39-4177-97C6-5BA16EE1A9DB@lukasa.co.uk>


> On 15 Dec 2016, at 12:07, exvito here <ex.vitorino at gmail.com> wrote:
> 
> Dear all,
> 
> The subject says most of it. While diagnosing a behavior on a somewhat
> large codebase, I found out something somewhat surprising -- see
> subject -- which is replicated with the minimal code example below.
> 
> It is a LineReceiver client that:
> 1. Connects to 127.0.0.1:10000.
> 2. Sends a line of text.
> 3. Disconnects one second later.
> 4. Tries to send another line of text, one second after disconnection.
> 
> I expected step 4 to fail somehow, given that Twisted promptly
> detected that the connection closed and IProtocol.connectionLost was
> called, as documented. Nevertheless, it does not fail.

I can?t speak for the design of Twisted, but this is definitely an intended implementation behaviour: because twisted?s write method is non-blocking, it is generally nicer to avoid write exploding in your face when disconnected.

> b) Does a protocol implementation, like the one in the example, really
> need to track connectionMade / connectionLost calls before going for
> self.transport.write?

A well-written protocol should stop finding reasons to write once connectionLost is called, yes. Similarly, it should probably avoid writing before connectionMade.

> c) Can a protocol implementation, instead, depend on
> self.transport.connected for which I found no documentation? (I
> probably missed it, where is it?)

I have no good answer to this one, but basically I suspect the answer is ?yes, for the default TCP transports?, but ?no, not in the general case, because it?s not part of a documented interface?.

Cory



From glyph at twistedmatrix.com  Fri Dec 16 13:27:59 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 16 Dec 2016 12:27:59 -0800
Subject: [Twisted-Python] ITransport.write after
 IProtocol.connectionLost -- no failure/exception?
In-Reply-To: <2FA38717-2D39-4177-97C6-5BA16EE1A9DB@lukasa.co.uk>
References: <CADtv4OAY19LAvF495Q3NAu=DAdogPD87dWyDJN-_Xv0ZB-Gbkg@mail.gmail.com>
 <2FA38717-2D39-4177-97C6-5BA16EE1A9DB@lukasa.co.uk>
Message-ID: <C43121A4-1FAC-47CC-BFD2-A2957D736A1A@twistedmatrix.com>


> On Dec 16, 2016, at 5:22 AM, Cory Benfield <cory at lukasa.co.uk> wrote:
> 
> 
>> On 15 Dec 2016, at 12:07, exvito here <ex.vitorino at gmail.com> wrote:
>> 
>> Dear all,
>> 
>> The subject says most of it. While diagnosing a behavior on a somewhat
>> large codebase, I found out something somewhat surprising -- see
>> subject -- which is replicated with the minimal code example below.
>> 
>> It is a LineReceiver client that:
>> 1. Connects to 127.0.0.1:10000.
>> 2. Sends a line of text.
>> 3. Disconnects one second later.
>> 4. Tries to send another line of text, one second after disconnection.
>> 
>> I expected step 4 to fail somehow, given that Twisted promptly
>> detected that the connection closed and IProtocol.connectionLost was
>> called, as documented. Nevertheless, it does not fail.
> 
> I can?t speak for the design of Twisted, but this is definitely an intended implementation behaviour: because twisted?s write method is non-blocking, it is generally nicer to avoid write exploding in your face when disconnected.

I can! The main design feature of this approach is that if you have a loop like this:

for x in messages:
    self.transport.write(self.encode(x))

you should not have to write it to be:

for x in messages:
    if self._flagISetInConnectionLost:
        break
    self.transport.write(self.encode(x))

just to avoid seeing tracebacks in your logs.

If you care about the disconnection event, implement connectionLost to do the thing that needs to be done (in this case, stop your LoopingCall).  That's what that callback is there for!

-glyph

From ex.vitorino at gmail.com  Sat Dec 17 07:11:22 2016
From: ex.vitorino at gmail.com (exvito here)
Date: Sat, 17 Dec 2016 14:11:22 +0000
Subject: [Twisted-Python] ITransport.write after
 IProtocol.connectionLost -- no failure/exception?
In-Reply-To: <C43121A4-1FAC-47CC-BFD2-A2957D736A1A@twistedmatrix.com>
References: <CADtv4OAY19LAvF495Q3NAu=DAdogPD87dWyDJN-_Xv0ZB-Gbkg@mail.gmail.com>
 <2FA38717-2D39-4177-97C6-5BA16EE1A9DB@lukasa.co.uk>
 <C43121A4-1FAC-47CC-BFD2-A2957D736A1A@twistedmatrix.com>
Message-ID: <CADtv4OBv8iqHK8eAOwoLBW2sJMtFTvEPEyGDdG8KgoFp0VtEaQ@mail.gmail.com>

On Fri, Dec 16, 2016 at 8:27 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
>
>> On Dec 16, 2016, at 5:22 AM, Cory Benfield <cory at lukasa.co.uk> wrote:
>>
>>> On 15 Dec 2016, at 12:07, exvito here <ex.vitorino at gmail.com> wrote:
>>>
>>> Dear all,
>>>
>>> The subject says most of it. While diagnosing a behavior on a somewhat
>>> large codebase, I found out something somewhat surprising -- see
>>> subject -- which is replicated with the minimal code example below.
>>>
>>> It is a LineReceiver client that:
>>> 1. Connects to 127.0.0.1:10000.
>>> 2. Sends a line of text.
>>> 3. Disconnects one second later.
>>> 4. Tries to send another line of text, one second after disconnection.
>>>
>>> I expected step 4 to fail somehow, given that Twisted promptly
>>> detected that the connection closed and IProtocol.connectionLost was
>>> called, as documented. Nevertheless, it does not fail.
>>
>> I can?t speak for the design of Twisted, but this is definitely an intended implementation behaviour: because twisted?s write method is non-blocking, it is generally nicer to avoid write exploding in your face when disconnected.
>
> I can! The main design feature of this approach is that if you have a loop like this:
>
> for x in messages:
>     self.transport.write(self.encode(x))
>
> you should not have to write it to be:
>
> for x in messages:
>     if self._flagISetInConnectionLost:
>         break
>     self.transport.write(self.encode(x))
>
> just to avoid seeing tracebacks in your logs.
>
> If you care about the disconnection event, implement connectionLost to do the thing that needs to be done (in this case, stop your LoopingCall).  That's what that callback is there for!


Thanks for your input Cory and Glyph.

I do agree that a well written protocol should not
self.transport.write after connectionLost -- it does not make any kind
of sense to do that. It's just that the one I was debugging was doing
it in its app-level keep alive messages triggered by
IReactorTime.callLater which wasn't properly cancelled on
connectionLost. This, in turn, lead to unpexpected app-level keep
alive timeouts after disconnection which, while acceptable (depending
on app/protocol design), were having a negative impact on the overall
connection/protocol teardown and cleanup.

Having said this, the fact that self.transport.write does not complain
after connectionLost just made my analysis and debugging more
difficult (yes, I was aware that it is non-blocking -- thanks Cory --
and that when talking to the network the only confirmation of delivery
must be obtained from a received message stating that fact).

All in all, I was just looking for confirmation from a conceptual /
design standpoint. That was my purpose and it is now clear. Thanks.

Going a little bit further, in this context, I wonder if my
understanding of the Protocol / Transport objects lifecycle is 100%
clear. I think there is a one to one relationship in the sense that,
simply put, on an incoming connection the underlying machinery
instantiates a Protocol via the Factory's buildProtocol method,
instantiates a Transport object and then calls Protocol.makeConnection
to "attach" the transport to the protocol; when the connection is
closed, the Transport calls connectionLost on the Protocol and, at
some point, those two objects are no longer "usable" -- they've done
their job and will be destroyed if no app level references are kept to
them.

If this is correct, in particular the fact that a given Transport
instance is not reusable after disconnection (if it is, could you
please point out such a case?), wouldn't it be valuable to log a
warning when write after disconnect is called? (agreed, raising an
Exception would be too much and break compatiblity). I find two
reasons for that: on one hand, given that it would have made my
debugging easier, it may help other developers pin point such cases;
on the other, the fact that Twisted itself logs messages on several
occasions, such as, for example, the default noisy Factory on doStart
/ doStop. Adding to that, the fact that, if I'm reading the code
correctly, ITransport.write just throws away the data for TCP
transports since it falls back to FileDescriptor.write that simply
returns if "not self.connected or self._writeDisconnected" in
src/twisted/internet/abstract.py.

Thoughts? (or corrections, of course?)

Again, thanks for your time and input.
Regards,

PS: I don't mean to start a huge discussion on the topic or question
the current design. It is very nice as it is, thank you! I'm just
looking for improving my understanding and, humbly, contributing back.
--
exvito


From glyph at twistedmatrix.com  Sat Dec 17 16:18:54 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 17 Dec 2016 15:18:54 -0800
Subject: [Twisted-Python] ITransport.write after
 IProtocol.connectionLost -- no failure/exception?
In-Reply-To: <CADtv4OBv8iqHK8eAOwoLBW2sJMtFTvEPEyGDdG8KgoFp0VtEaQ@mail.gmail.com>
References: <CADtv4OAY19LAvF495Q3NAu=DAdogPD87dWyDJN-_Xv0ZB-Gbkg@mail.gmail.com>
 <2FA38717-2D39-4177-97C6-5BA16EE1A9DB@lukasa.co.uk>
 <C43121A4-1FAC-47CC-BFD2-A2957D736A1A@twistedmatrix.com>
 <CADtv4OBv8iqHK8eAOwoLBW2sJMtFTvEPEyGDdG8KgoFp0VtEaQ@mail.gmail.com>
Message-ID: <55DA0155-4365-4D25-B915-145BE1583440@twistedmatrix.com>


> On Dec 17, 2016, at 6:11 AM, exvito here <ex.vitorino at gmail.com> wrote:
> 
> On Fri, Dec 16, 2016 at 8:27 PM, Glyph Lefkowitz
> <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>> 
>>> On Dec 16, 2016, at 5:22 AM, Cory Benfield <cory at lukasa.co.uk> wrote:
>>> 
>>>> On 15 Dec 2016, at 12:07, exvito here <ex.vitorino at gmail.com> wrote:
>>>> 
>>>> Dear all,
>>>> 
>>>> The subject says most of it. While diagnosing a behavior on a somewhat
>>>> large codebase, I found out something somewhat surprising -- see
>>>> subject -- which is replicated with the minimal code example below.
>>>> 
>>>> It is a LineReceiver client that:
>>>> 1. Connects to 127.0.0.1:10000.
>>>> 2. Sends a line of text.
>>>> 3. Disconnects one second later.
>>>> 4. Tries to send another line of text, one second after disconnection.
>>>> 
>>>> I expected step 4 to fail somehow, given that Twisted promptly
>>>> detected that the connection closed and IProtocol.connectionLost was
>>>> called, as documented. Nevertheless, it does not fail.
>>> 
>>> I can?t speak for the design of Twisted, but this is definitely an intended implementation behaviour: because twisted?s write method is non-blocking, it is generally nicer to avoid write exploding in your face when disconnected.
>> 
>> I can! The main design feature of this approach is that if you have a loop like this:
>> 
>> for x in messages:
>>    self.transport.write(self.encode(x))
>> 
>> you should not have to write it to be:
>> 
>> for x in messages:
>>    if self._flagISetInConnectionLost:
>>        break
>>    self.transport.write(self.encode(x))
>> 
>> just to avoid seeing tracebacks in your logs.
>> 
>> If you care about the disconnection event, implement connectionLost to do the thing that needs to be done (in this case, stop your LoopingCall).  That's what that callback is there for!
> 
> 
> Thanks for your input Cory and Glyph.
> 
> I do agree that a well written protocol should not
> self.transport.write after connectionLost -- it does not make any kind
> of sense to do that. It's just that the one I was debugging was doing
> it in its app-level keep alive messages triggered by
> IReactorTime.callLater which wasn't properly cancelled on
> connectionLost. This, in turn, lead to unpexpected app-level keep
> alive timeouts after disconnection which, while acceptable (depending
> on app/protocol design), were having a negative impact on the overall
> connection/protocol teardown and cleanup.
> 
> Having said this, the fact that self.transport.write does not complain
> after connectionLost just made my analysis and debugging more
> difficult (yes, I was aware that it is non-blocking -- thanks Cory --
> and that when talking to the network the only confirmation of delivery
> must be obtained from a received message stating that fact).
> 
> All in all, I was just looking for confirmation from a conceptual /
> design standpoint. That was my purpose and it is now clear. Thanks.
> 
> Going a little bit further, in this context, I wonder if my
> understanding of the Protocol / Transport objects lifecycle is 100%
> clear. I think there is a one to one relationship in the sense that,
> simply put, on an incoming connection the underlying machinery
> instantiates a Protocol via the Factory's buildProtocol method,
> instantiates a Transport object and then calls Protocol.makeConnection
> to "attach" the transport to the protocol; when the connection is
> closed, the Transport calls connectionLost on the Protocol and, at
> some point, those two objects are no longer "usable" -- they've done
> their job and will be destroyed if no app level references are kept to
> them.

They're not "destroyed", exactly.

The way to think about this is that the reactor, while running, is always on the stack.  The stack is the root of what's currently 'active' in the garbage collector.  The reactor then has references to various things - in this case, TCP transports and timed DelayedCall objects.  The transport has a reference to the protocol, which is what keeps both of them "usable".  The DelayedCall has a reference to your function, and your function to anything it needs to do its work.

Things can be removed from and added back to the reactor at any time - for example, a transport may be removed without being closed by calling .stopReading() and .stopWriting() on it.  If it gets garbage collected, its socket will be closed, but because the reactor didn't close it, you won't get a normal connectionLost notification.

So rather than thinking of a Transport as having a precisely-defined lifecycle - although it does have certain states it goes through; connecting/connected/disconnecting/disconnected - the best way to think about it is as a graph of objects that the reactor is doing stuff to.

> If this is correct, in particular the fact that a given Transport
> instance is not reusable after disconnection (if it is, could you
> please point out such a case?), wouldn't it be valuable to log a
> warning when write after disconnect is called? (agreed, raising an
> Exception would be too much and break compatiblity). I find two
> reasons for that: on one hand, given that it would have made my
> debugging easier, it may help other developers pin point such cases;
> on the other, the fact that Twisted itself logs messages on several
> occasions, such as, for example, the default noisy Factory on doStart
> / doStop. Adding to that, the fact that, if I'm reading the code
> correctly, ITransport.write just throws away the data for TCP
> transports since it falls back to FileDescriptor.write that simply
> returns if "not self.connected or self._writeDisconnected" in
> src/twisted/internet/abstract.py.

If you start logging a warning when write is called on a closed transport, then that means any code that wants to be warnings-clean needs to check to see if the transport is writable before writing to it.  This adds a lot of complexity to that sort of message-formatting code, and potentially makes it less efficient. After all, if you have to check each write() call, that will strongly encourage you to make your message-formatting happen entirely in memory, so you always have a big string that represents the whole message, just in case a transport.write() in the middle would encounter an error.

More importantly, when users start seeing a warning like this, they often develop an incorrect intuition about what's going on with the bytes; one of the _most_ frequently asked questions about how to write Twisted protocols is "how do I tell if my bytes got to the other end without sending an application-level acknowledgement".  The answer, of course, is "that's impossible" but if users see that sometimes it warns them when the connection's closed, it reinforces the idea that there must be a way.

If you call .write, there is always the possibility that the connection _looks_ open to Twisted, but in fact is closed on the wire, and those bytes will be lost.  So it's important to me that we behave the same way in both cases.

That said, it's not like there's no room for improvement here!  The solution _I'd_ really like to see for this problem is improved visualization of what the reactor is doing.  Something that drew a graph of the reactor, and open connections, and pending timed calls would allow you to instantly see that your timed call was not connected to an active connection, and correct your code.

> Thoughts? (or corrections, of course?)
> 
> Again, thanks for your time and input.
> Regards,
> 
> PS: I don't mean to start a huge discussion on the topic or question
> the current design. It is very nice as it is, thank you! I'm just
> looking for improving my understanding and, humbly, contributing back.


Don't worry, the design is pretty fixed - and if you managed to provoke such a discussion, then maybe it does need to change!  But I doubt it :)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161217/06753011/attachment-0001.html>

From trac at twistedmatrix.com  Sun Dec 18 00:05:19 2016
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 18 Dec 2016 07:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1482044719.14.2608934813517618978@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161218/061da65d/attachment.html>

From elguavas at gmail.com  Sun Dec 18 18:05:19 2016
From: elguavas at gmail.com (elguavas)
Date: Mon, 19 Dec 2016 12:05:19 +1100
Subject: [Twisted-Python] the right twisted base classes for my project
Message-ID: <0f9fc7bb-ebe9-05da-4b4c-51656ca151ff@gmail.com>

hi all. i have a project with a networked aspect that i'm thinking of 
rewriting to use twisted. i'd like to ask for any input on the best 
twisted functions to base my rewrite on for my usage case, thanks.

the project is a fairly simple "games room" that lets a small number of 
users (from 2 up to a handful, lets say 12 max) join to play simple 2d 
board games against each other. there is also a general chat among 
current players function.

i originally wrote the networking code for this using python's stdlib 
asyncore and asynchat modules, implementing a basic rpc-like mechanism 
to allow clients and server to communicate via simple structured string 
"messages".

i have to say if it was a only bit of a nightmare to code, it was a 
_lot_ of a nightmare to test and debug... anyway, so i'm rewriting the 
networking code and looking at twisted and i'd like to make sure i start 
off using the right parts of twisted for the job right from the beginning.

the networking is based on having a server, that maintains central game 
state and coordinates it among the clients, and clients that connect to 
the sever to participate in games.

the clients need to be able to call functions on the server. the server 
needs to be able to return data to the clients and also to call 
functions back on specific clients, or subsets of clients, or all clients.

i've had a good look through the twisted docs and i'm thinking that 
perspective broker is what probably i need, likely along with its avatar 
functionality.

is this a sensible way to go or am i overlooking something obvious?

(oh, and a last questionlet would be: if that would be the right parts 
of twisted to use, what would that buy me above the other possibility 
i'm considering, which is rewiriting using python's new asyncio stuff?)

tia for any replies,
stephen.


From glyph at twistedmatrix.com  Sun Dec 18 18:31:59 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 18 Dec 2016 17:31:59 -0800
Subject: [Twisted-Python] the right twisted base classes for my project
In-Reply-To: <0f9fc7bb-ebe9-05da-4b4c-51656ca151ff@gmail.com>
References: <0f9fc7bb-ebe9-05da-4b4c-51656ca151ff@gmail.com>
Message-ID: <C1AAC418-EB69-4275-9CE2-7057790783C7@twistedmatrix.com>


> On Dec 18, 2016, at 5:05 PM, elguavas <elguavas at gmail.com> wrote:
> 
> hi all. i have a project with a networked aspect that i'm thinking of rewriting to use twisted. i'd like to ask for any input on the best twisted functions to base my rewrite on for my usage case, thanks.
> 
> the project is a fairly simple "games room" that lets a small number of users (from 2 up to a handful, lets say 12 max) join to play simple 2d board games against each other. there is also a general chat among current players function.
> 
> i originally wrote the networking code for this using python's stdlib asyncore and asynchat modules, implementing a basic rpc-like mechanism to allow clients and server to communicate via simple structured string "messages".
> 
> i have to say if it was a only bit of a nightmare to code, it was a _lot_ of a nightmare to test and debug... anyway, so i'm rewriting the networking code and looking at twisted and i'd like to make sure i start off using the right parts of twisted for the job right from the beginning.
> 
> the networking is based on having a server, that maintains central game state and coordinates it among the clients, and clients that connect to the sever to participate in games.
> 
> the clients need to be able to call functions on the server. the server needs to be able to return data to the clients and also to call functions back on specific clients, or subsets of clients, or all clients.
> 
> i've had a good look through the twisted docs and i'm thinking that perspective broker is what probably i need, likely along with its avatar functionality.
> 
> is this a sensible way to go or am i overlooking something obvious?

This is definitely sensible, but it's not really specific enough to nail down any longer answer.  The thing that you want to look at to make testing easy is https://twistedmatrix.com/documents/16.6.0/api/twisted.test.proto_helpers.html <https://twistedmatrix.com/documents/16.6.0/api/twisted.test.proto_helpers.html> - stuff in this module will help you hook up your tests to an in-memory network.  (We also have some internal test helpers which make this even easier, but which need a publicly-documented interface - https://twistedmatrix.com/trac/ticket/5167 <https://twistedmatrix.com/trac/ticket/5167> is a good ticket to keep an eye on for that.)

> (oh, and a last questionlet would be: if that would be the right parts of twisted to use, what would that buy me above the other possibility i'm considering, which is rewiriting using python's new asyncio stuff?)


Twisted's event loop is already compatible with asyncio, so whatever you write should basically be compatible with it.  I would not worry about that right now :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161218/dd0d7695/attachment.html>

From elguavas at gmail.com  Sun Dec 18 18:50:15 2016
From: elguavas at gmail.com (elguavas)
Date: Mon, 19 Dec 2016 12:50:15 +1100
Subject: [Twisted-Python] the right twisted base classes for my project
In-Reply-To: <C1AAC418-EB69-4275-9CE2-7057790783C7@twistedmatrix.com>
References: <0f9fc7bb-ebe9-05da-4b4c-51656ca151ff@gmail.com>
 <C1AAC418-EB69-4275-9CE2-7057790783C7@twistedmatrix.com>
Message-ID: <9514a966-4779-4c88-9665-5b9175da2e2b@gmail.com>



On 19/12/16 12:31, Glyph Lefkowitz wrote:
>
>> On Dec 18, 2016, at 5:05 PM, elguavas <elguavas at gmail.com
>>[...]
>> i've had a good look through the twisted docs and i'm thinking that
>> perspective broker is what probably i need, likely along with its
>> avatar functionality.
>>
>> is this a sensible way to go or am i overlooking something obvious?
>
> This is definitely sensible, but it's not really specific enough to nail
> down any longer answer.

ok, really the important part of what i now see was quite a long winded 
ramble ;) was this:

 >> the clients need to be able to call functions on the server. the
 >> server needs to be able to return data to the clients and also to
 >> call
 >> functions back on specific clients, or subsets of clients, or all
 >> clients.

so calls in both directions and the server being able to identify deal 
with _specific_ clients or a _specific subset_ of clients all clients.

this last parts are what seemed to fit with pb and avatar on my reading.

i'm not looking for any implementation details at this point, just 
wanting to make sure i got off on the right foot using twisted, since it 
has so many parts...

> The thing that you want to look at to make
> testing easy
> [...]
> eye on for that.)

cool, thanks.

>
>> (oh, and a last questionlet would be: if that would be the right parts
>> of twisted to use, what would that buy me above the other possibility
>> i'm considering, which is rewiriting using python's new asyncio stuff?)
>
> Twisted's event loop is already compatible with asyncio, so whatever you
> write should basically be compatible with it.  I would not worry about
> that right now :).

ok, nice to know. i'm also hoping the twisted pb stuff will accomplish 
some of the lifting for me, ie that i won't have to go quite so low 
level... i guess i'll see on that when i start to suck it. ;)

>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From ex.vitorino at gmail.com  Mon Dec 19 06:13:18 2016
From: ex.vitorino at gmail.com (ex vito)
Date: Mon, 19 Dec 2016 13:13:18 +0000
Subject: [Twisted-Python] ITransport.write after
	IProtocol.connectionLost -- no failure/exception?
In-Reply-To: <55DA0155-4365-4D25-B915-145BE1583440@twistedmatrix.com>
References: <CADtv4OAY19LAvF495Q3NAu=DAdogPD87dWyDJN-_Xv0ZB-Gbkg@mail.gmail.com>
 <2FA38717-2D39-4177-97C6-5BA16EE1A9DB@lukasa.co.uk>
 <C43121A4-1FAC-47CC-BFD2-A2957D736A1A@twistedmatrix.com>
 <CADtv4OBv8iqHK8eAOwoLBW2sJMtFTvEPEyGDdG8KgoFp0VtEaQ@mail.gmail.com>
 <55DA0155-4365-4D25-B915-145BE1583440@twistedmatrix.com>
Message-ID: <8ED9DD0C-0490-4209-9096-256334DFEF27@gmail.com>

On 2016-12-17, at 23:18, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> On Dec 17, 2016, at 6:11 AM, exvito here <ex.vitorino at gmail.com> wrote:

[...]

>> Thanks for your input Cory and Glyph.
>> 
>> I do agree that a well written protocol should not
>> self.transport.write after connectionLost -- it does not make any kind
>> of sense to do that. It's just that the one I was debugging was doing
>> it in its app-level keep alive messages triggered by
>> IReactorTime.callLater which wasn't properly cancelled on
>> connectionLost. This, in turn, lead to unpexpected app-level keep
>> alive timeouts after disconnection which, while acceptable (depending
>> on app/protocol design), were having a negative impact on the overall
>> connection/protocol teardown and cleanup.
>> 
>> Having said this, the fact that self.transport.write does not complain
>> after connectionLost just made my analysis and debugging more
>> difficult (yes, I was aware that it is non-blocking -- thanks Cory --
>> and that when talking to the network the only confirmation of delivery
>> must be obtained from a received message stating that fact).
>> 
>> All in all, I was just looking for confirmation from a conceptual /
>> design standpoint. That was my purpose and it is now clear. Thanks.
>> 
>> Going a little bit further, in this context, I wonder if my
>> understanding of the Protocol / Transport objects lifecycle is 100%
>> clear. I think there is a one to one relationship in the sense that,
>> simply put, on an incoming connection the underlying machinery
>> instantiates a Protocol via the Factory's buildProtocol method,
>> instantiates a Transport object and then calls Protocol.makeConnection
>> to "attach" the transport to the protocol; when the connection is
>> closed, the Transport calls connectionLost on the Protocol and, at
>> some point, those two objects are no longer "usable" -- they've done
>> their job and will be destroyed if no app level references are kept to
>> them.
> 
> They're not "destroyed", exactly.
> 
> The way to think about this is that the reactor, while running, is always on the stack.  The stack is the root of what's currently 'active' in the garbage collector.  The reactor then has references to various things - in this case, TCP transports and timed DelayedCall objects.  The transport has a reference to the protocol, which is what keeps both of them "usable".  The DelayedCall has a reference to your function, and your function to anything it needs to do its work.
> 
> Things can be removed from and added back to the reactor at any time - for example, a transport may be removed without being closed by calling .stopReading() and .stopWriting() on it.  If it gets garbage collected, its socket will be closed, but because the reactor didn't close it, you won't get a normal connectionLost notification.

Sure, I had that clear in my understanding, thanks for the additional details on the stopReading/stopWriting -- I'm not familiar with low lever reactor details and, maybe, who knows, one day I'll put myself to the interesting exercise/challenge of playing around writing a reactor. Just to improve my understanding of these details.


> So rather than thinking of a Transport as having a precisely-defined lifecycle - although it does have certain states it goes through; connecting/connected/disconnecting/disconnected - the best way to think about it is as a graph of objects that the reactor is doing stuff to.

The bottom line (in my mind) is: is it correct or not to assume that, by design, once a Transport instance has been disconnected that same instance will never be connected again, regardless of when exactly that object is destroyed or garbage collected?


>> If this is correct, in particular the fact that a given Transport
>> instance is not reusable after disconnection (if it is, could you
>> please point out such a case?), wouldn't it be valuable to log a
>> warning when write after disconnect is called? (agreed, raising an
>> Exception would be too much and break compatiblity). I find two
>> reasons for that: on one hand, given that it would have made my
>> debugging easier, it may help other developers pin point such cases;
>> on the other, the fact that Twisted itself logs messages on several
>> occasions, such as, for example, the default noisy Factory on doStart
>> / doStop. Adding to that, the fact that, if I'm reading the code
>> correctly, ITransport.write just throws away the data for TCP
>> transports since it falls back to FileDescriptor.write that simply
>> returns if "not self.connected or self._writeDisconnected" in
>> src/twisted/internet/abstract.py.
> 
> If you start logging a warning when write is called on a closed transport, then that means any code that wants to be warnings-clean needs to check to see if the transport is writable before writing to it.  This adds a lot of complexity to that sort of message-formatting code, and potentially makes it less efficient. After all, if you have to check each write() call, that will strongly encourage you to make your message-formatting happen entirely in memory, so you always have a big string that represents the whole message, just in case a transport.write() in the middle would encounter an error.

I understand that and find it perfectly acceptable. I just tend to err on the extra-cautious side when facing data-loss / data-integrity possibilities and, in the many scenarios I've used Twisted in, performance was never an issue while semantic correctness and implementation resiliency tend to need fixes and improvements. :)

One could argue, though, that someone looking for warnings-clean code (who doesn't, even if the real world and interfacing with it most often prevents it?) might like to know that their "perfect" (lots of quotes here!) warnings-clean code writes won't go anywhere after connectionLost which, in some cases, may help pinpoint an underlying design / implementation issue.

I'd like to underline, though, that I'm not insisting on the "log warning" aspect I raised before. Like I said, the status quo is very good, thank you. Just sharing a few thoughts.


> More importantly, when users start seeing a warning like this, they often develop an incorrect intuition about what's going on with the bytes; one of the _most_ frequently asked questions about how to write Twisted protocols is "how do I tell if my bytes got to the other end without sending an application-level acknowledgement".  The answer, of course, is "that's impossible" but if users see that sometimes it warns them when the connection's closed, it reinforces the idea that there must be a way.
> 
> If you call .write, there is always the possibility that the connection _looks_ open to Twisted, but in fact is closed on the wire, and those bytes will be lost.  So it's important to me that we behave the same way in both cases.

Yes, I can relate to that common misconception regarding delivery confirmation, throughout the years, working with other people. Networking is non-trivival and there are lots of parts out of application control that can behave in unexpected ways and/or go wrong.


> That said, it's not like there's no room for improvement here!  The solution _I'd_ really like to see for this problem is improved visualization of what the reactor is doing.  Something that drew a graph of the reactor, and open connections, and pending timed calls would allow you to instantly see that your timed call was not connected to an active connection, and correct your code.

Well, trial already does that in part, doesn't it? It complains loudly about unclean reactor state after each test. It just doesn't relate timed calls to connections, which sounds like a very non-obvious challenge to handle at the reactor level: how could the reactor know that a given timed call callback will make use of a particular connection?

That does sound like a very interesting capability, though.


>> Thoughts? (or corrections, of course?)
>> 
>> Again, thanks for your time and input.
>> Regards,
>> 
>> PS: I don't mean to start a huge discussion on the topic or question
>> the current design. It is very nice as it is, thank you! I'm just
>> looking for improving my understanding and, humbly, contributing back.
> 
> 
> Don't worry, the design is pretty fixed - and if you managed to provoke such a discussion, then maybe it does need to change!  But I doubt it :)

I'm glad it is pretty fixed. That has always given me the confidence to work with it throughout the years. Thanks and congratulations for a very solid piece of code!

Having said this, again very humbly, who knows what the future may bring! ;)


Thanks for taking the time to respond.
Regards,
--
exvito


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161219/ebb9c33d/attachment-0001.html>

From glyph at twistedmatrix.com  Mon Dec 19 18:02:53 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 19 Dec 2016 17:02:53 -0800
Subject: [Twisted-Python] ITransport.write after
 IProtocol.connectionLost -- no failure/exception?
In-Reply-To: <8ED9DD0C-0490-4209-9096-256334DFEF27@gmail.com>
References: <CADtv4OAY19LAvF495Q3NAu=DAdogPD87dWyDJN-_Xv0ZB-Gbkg@mail.gmail.com>
 <2FA38717-2D39-4177-97C6-5BA16EE1A9DB@lukasa.co.uk>
 <C43121A4-1FAC-47CC-BFD2-A2957D736A1A@twistedmatrix.com>
 <CADtv4OBv8iqHK8eAOwoLBW2sJMtFTvEPEyGDdG8KgoFp0VtEaQ@mail.gmail.com>
 <55DA0155-4365-4D25-B915-145BE1583440@twistedmatrix.com>
 <8ED9DD0C-0490-4209-9096-256334DFEF27@gmail.com>
Message-ID: <5A4C9D3A-3327-4080-A0D2-74660736EB54@twistedmatrix.com>


> On Dec 19, 2016, at 5:13 AM, ex vito <ex.vitorino at gmail.com> wrote:
> 
> On 2016-12-17, at 23:18, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
>> On Dec 17, 2016, at 6:11 AM, exvito here <ex.vitorino at gmail.com <mailto:ex.vitorino at gmail.com>> wrote:
> 
> [...]
> 
>>> Thanks for your input Cory and Glyph.
>>> 
>>> I do agree that a well written protocol should not
>>> self.transport.write after connectionLost -- it does not make any kind
>>> of sense to do that. It's just that the one I was debugging was doing
>>> it in its app-level keep alive messages triggered by
>>> IReactorTime.callLater which wasn't properly cancelled on
>>> connectionLost. This, in turn, lead to unpexpected app-level keep
>>> alive timeouts after disconnection which, while acceptable (depending
>>> on app/protocol design), were having a negative impact on the overall
>>> connection/protocol teardown and cleanup.
>>> 
>>> Having said this, the fact that self.transport.write does not complain
>>> after connectionLost just made my analysis and debugging more
>>> difficult (yes, I was aware that it is non-blocking -- thanks Cory --
>>> and that when talking to the network the only confirmation of delivery
>>> must be obtained from a received message stating that fact).
>>> 
>>> All in all, I was just looking for confirmation from a conceptual /
>>> design standpoint. That was my purpose and it is now clear. Thanks.
>>> 
>>> Going a little bit further, in this context, I wonder if my
>>> understanding of the Protocol / Transport objects lifecycle is 100%
>>> clear. I think there is a one to one relationship in the sense that,
>>> simply put, on an incoming connection the underlying machinery
>>> instantiates a Protocol via the Factory's buildProtocol method,
>>> instantiates a Transport object and then calls Protocol.makeConnection
>>> to "attach" the transport to the protocol; when the connection is
>>> closed, the Transport calls connectionLost on the Protocol and, at
>>> some point, those two objects are no longer "usable" -- they've done
>>> their job and will be destroyed if no app level references are kept to
>>> them.
>> 
>> They're not "destroyed", exactly.
>> 
>> The way to think about this is that the reactor, while running, is always on the stack.  The stack is the root of what's currently 'active' in the garbage collector.  The reactor then has references to various things - in this case, TCP transports and timed DelayedCall objects.  The transport has a reference to the protocol, which is what keeps both of them "usable".  The DelayedCall has a reference to your function, and your function to anything it needs to do its work.
>> 
>> Things can be removed from and added back to the reactor at any time - for example, a transport may be removed without being closed by calling .stopReading() and .stopWriting() on it.  If it gets garbage collected, its socket will be closed, but because the reactor didn't close it, you won't get a normal connectionLost notification.
> 
> Sure, I had that clear in my understanding, thanks for the additional details on the stopReading/stopWriting -- I'm not familiar with low lever reactor details and, maybe, who knows, one day I'll put myself to the interesting exercise/challenge of playing around writing a reactor. Just to improve my understanding of these details.
> 
> 
>> So rather than thinking of a Transport as having a precisely-defined lifecycle - although it does have certain states it goes through; connecting/connected/disconnecting/disconnected - the best way to think about it is as a graph of objects that the reactor is doing stuff to.
> 
> The bottom line (in my mind) is: is it correct or not to assume that, by design, once a Transport instance has been disconnected that same instance will never be connected again, regardless of when exactly that object is destroyed or garbage collected?

Yes.

>>> If this is correct, in particular the fact that a given Transport
>>> instance is not reusable after disconnection (if it is, could you
>>> please point out such a case?), wouldn't it be valuable to log a
>>> warning when write after disconnect is called? (agreed, raising an
>>> Exception would be too much and break compatiblity). I find two
>>> reasons for that: on one hand, given that it would have made my
>>> debugging easier, it may help other developers pin point such cases;
>>> on the other, the fact that Twisted itself logs messages on several
>>> occasions, such as, for example, the default noisy Factory on doStart
>>> / doStop. Adding to that, the fact that, if I'm reading the code
>>> correctly, ITransport.write just throws away the data for TCP
>>> transports since it falls back to FileDescriptor.write that simply
>>> returns if "not self.connected or self._writeDisconnected" in
>>> src/twisted/internet/abstract.py.
>> 
>> If you start logging a warning when write is called on a closed transport, then that means any code that wants to be warnings-clean needs to check to see if the transport is writable before writing to it.  This adds a lot of complexity to that sort of message-formatting code, and potentially makes it less efficient. After all, if you have to check each write() call, that will strongly encourage you to make your message-formatting happen entirely in memory, so you always have a big string that represents the whole message, just in case a transport.write() in the middle would encounter an error.
> 
> I understand that and find it perfectly acceptable. I just tend to err on the extra-cautious side when facing data-loss / data-integrity possibilities and, in the many scenarios I've used Twisted in, performance was never an issue while semantic correctness and implementation resiliency tend to need fixes and improvements. :)
> 
> One could argue, though, that someone looking for warnings-clean code (who doesn't, even if the real world and interfacing with it most often prevents it?) might like to know that their "perfect" (lots of quotes here!) warnings-clean code writes won't go anywhere after connectionLost which, in some cases, may help pinpoint an underlying design / implementation issue.
> 
> I'd like to underline, though, that I'm not insisting on the "log warning" aspect I raised before. Like I said, the status quo is very good, thank you. Just sharing a few thoughts.
> 
> 
>> More importantly, when users start seeing a warning like this, they often develop an incorrect intuition about what's going on with the bytes; one of the _most_ frequently asked questions about how to write Twisted protocols is "how do I tell if my bytes got to the other end without sending an application-level acknowledgement".  The answer, of course, is "that's impossible" but if users see that sometimes it warns them when the connection's closed, it reinforces the idea that there must be a way.
>> 
>> If you call .write, there is always the possibility that the connection _looks_ open to Twisted, but in fact is closed on the wire, and those bytes will be lost.  So it's important to me that we behave the same way in both cases.
> 
> Yes, I can relate to that common misconception regarding delivery confirmation, throughout the years, working with other people. Networking is non-trivival and there are lots of parts out of application control that can behave in unexpected ways and/or go wrong.
> 
> 
>> That said, it's not like there's no room for improvement here!  The solution _I'd_ really like to see for this problem is improved visualization of what the reactor is doing.  Something that drew a graph of the reactor, and open connections, and pending timed calls would allow you to instantly see that your timed call was not connected to an active connection, and correct your code.
> 
> Well, trial already does that in part, doesn't it? It complains loudly about unclean reactor state after each test. It just doesn't relate timed calls to connections, which sounds like a very non-obvious challenge to handle at the reactor level: how could the reactor know that a given timed call callback will make use of a particular connection?

I'm not suggesting anything that fancy; in this case, you'd just see an active looping call and no active connection and hopefully that would give you the info you need to realize that the connection was not going to get updated :).

> That does sound like a very interesting capability, though.
> 
> 
>>> Thoughts? (or corrections, of course?)
>>> 
>>> Again, thanks for your time and input.
>>> Regards,
>>> 
>>> PS: I don't mean to start a huge discussion on the topic or question
>>> the current design. It is very nice as it is, thank you! I'm just
>>> looking for improving my understanding and, humbly, contributing back.
>> 
>> 
>> Don't worry, the design is pretty fixed - and if you managed to provoke such a discussion, then maybe it does need to change!  But I doubt it :)
> 
> I'm glad it is pretty fixed. That has always given me the confidence to work with it throughout the years. Thanks and congratulations for a very solid piece of code!
> 
> Having said this, again very humbly, who knows what the future may bring! ;)
> 
> 
> Thanks for taking the time to respond.
> Regards,
> --
> exvito
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161219/42915802/attachment-0001.html>

From rodrigc at crodrigues.org  Tue Dec 20 15:32:05 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 20 Dec 2016 14:32:05 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
Message-ID: <CAG=rPVc-ahNjN+br2MV-S5rTng71Y1jvR94oXJaZed+CZhskxw@mail.gmail.com>

On Friday, December 2, 2016, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:
>
> I think there might be a regression in 16.6.0.
>
> For every version up to 16.6.0, I can do 'conch twistedmatrix.com' in a
> shell and it works fine.
>

I believe that I have fixed this in trunk.
Can you try this with conch in trunk?

This works for me in trunk:

1.  Start with an empty ~/.ssh/known_hosts file , or one with an ecdsa key
for myhost.com
2.  ssh myhost.com
3.  log out of myhost.com
3.  see that ~/.ssh/known_hosts contains an ecdsa host key for myhost.com
4.  conch myhost.com
5.  successfully log into myhost.com with conch

Before the latest fixes, I would get a bad host key error in step 5.

Many thanks to the0id and acabhishek942 for providing the ecdsa fixes to
conch.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161220/e501c7e2/attachment.html>

From glyph at twistedmatrix.com  Tue Dec 20 17:10:59 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 20 Dec 2016 16:10:59 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <CAG=rPVc-ahNjN+br2MV-S5rTng71Y1jvR94oXJaZed+CZhskxw@mail.gmail.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <CAG=rPVc-ahNjN+br2MV-S5rTng71Y1jvR94oXJaZed+CZhskxw@mail.gmail.com>
Message-ID: <E464AABC-DB66-44E6-9482-594254B907EA@twistedmatrix.com>

It works:

$ conch twistedmatrix.com echo hooray
hooray
      $ conch --version
Twisted version: 16.6.0dev0
$ 

That's using an RSA host key though.  It seems that the hosts I have using ECDSA keys (buildbot.twistedmatrix.com <http://buildbot.twistedmatrix.com/>, for example) still don't work with conch.  Is that expected at this point?

-glyph

> On Dec 20, 2016, at 2:32 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> On Friday, December 2, 2016, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> I think there might be a regression in 16.6.0.
> 
> For every version up to 16.6.0, I can do 'conch twistedmatrix.com <http://twistedmatrix.com/>' in a shell and it works fine.
> 
> I believe that I have fixed this in trunk.
> Can you try this with conch in trunk?
> 
> This works for me in trunk:
> 
> 1.  Start with an empty ~/.ssh/known_hosts file , or one with an ecdsa key for myhost.com <http://myhost.com/>
> 2.  ssh myhost.com <http://myhost.com/>
> 3.  log out of myhost.com <http://myhost.com/>
> 3.  see that ~/.ssh/known_hosts contains an ecdsa host key for myhost.com <http://myhost.com/>
> 4.  conch myhost.com <http://myhost.com/>
> 5.  successfully log into myhost.com <http://myhost.com/> with conch
> 
> Before the latest fixes, I would get a bad host key error in step 5.
> 
> Many thanks to the0id and acabhishek942 for providing the ecdsa fixes to conch.
> 
> --
> Craig
>  
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161220/d8cc7e7d/attachment.html>

From rodrigc at crodrigues.org  Tue Dec 20 17:54:57 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 20 Dec 2016 16:54:57 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <E464AABC-DB66-44E6-9482-594254B907EA@twistedmatrix.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <CAG=rPVc-ahNjN+br2MV-S5rTng71Y1jvR94oXJaZed+CZhskxw@mail.gmail.com>
 <E464AABC-DB66-44E6-9482-594254B907EA@twistedmatrix.com>
Message-ID: <CAG=rPVdKNnD-gs3Aj+20HG-5BLJOmh7KEPUab5fD2A6P=ME96Q@mail.gmail.com>

I'm not sure. I was able to use conch to log into a box where the ecdsa key
looked like this in my ~/.ssh/known_hosts

192.168.1.2 ecdsa-sha2-nistp256 XXXXXXXXXX

--

Craig



On Tue, Dec 20, 2016 at 4:10 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

> It works:
>
> $ conch twistedmatrix.com echo hooray
> hooray
>       $ conch --version
> Twisted version: 16.6.0dev0
> $
>
>
> That's using an RSA host key though.  It seems that the hosts I have using
> ECDSA keys (buildbot.twistedmatrix.com, for example) still don't work
> with conch.  Is that expected at this point?
>
> -glyph
>
> On Dec 20, 2016, at 2:32 PM, Craig Rodrigues <rodrigc at crodrigues.org>
> wrote:
>
> On Friday, December 2, 2016, Glyph Lefkowitz <glyph at twistedmatrix.com>
> wrote:
>>
>> I think there might be a regression in 16.6.0.
>>
>> For every version up to 16.6.0, I can do 'conch twistedmatrix.com' in a
>> shell and it works fine.
>>
>
> I believe that I have fixed this in trunk.
> Can you try this with conch in trunk?
>
> This works for me in trunk:
>
> 1.  Start with an empty ~/.ssh/known_hosts file , or one with an ecdsa key
> for myhost.com
> 2.  ssh myhost.com
> 3.  log out of myhost.com
> 3.  see that ~/.ssh/known_hosts contains an ecdsa host key for myhost.com
> 4.  conch myhost.com
> 5.  successfully log into myhost.com with conch
>
> Before the latest fixes, I would get a bad host key error in step 5.
>
> Many thanks to the0id and acabhishek942 for providing the ecdsa fixes to
> conch.
>
> --
> Craig
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161220/5f7abfcb/attachment.html>

From glyph at twistedmatrix.com  Tue Dec 20 18:13:31 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 20 Dec 2016 17:13:31 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <CAG=rPVdKNnD-gs3Aj+20HG-5BLJOmh7KEPUab5fD2A6P=ME96Q@mail.gmail.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <CAG=rPVc-ahNjN+br2MV-S5rTng71Y1jvR94oXJaZed+CZhskxw@mail.gmail.com>
 <E464AABC-DB66-44E6-9482-594254B907EA@twistedmatrix.com>
 <CAG=rPVdKNnD-gs3Aj+20HG-5BLJOmh7KEPUab5fD2A6P=ME96Q@mail.gmail.com>
Message-ID: <720D721B-8360-43BE-8371-2DE572E18DF4@twistedmatrix.com>

Here's buildbot's key:

buildbot.twistedmatrix.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBBcw4pr6WdgDMw7PbkvsuEdCqKQTtpLYPGoe7qkuQucuexYBiCkO/BeoB0wANX2cVmxUP0llpYJQL4w3cAR0csA=

I think you should be able to validate that even if you can't auth :)

-g


> On Dec 20, 2016, at 4:54 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> I'm not sure. I was able to use conch to log into a box where the ecdsa key looked like this in my ~/.ssh/known_hosts
> 
> 192.168.1.2 ecdsa-sha2-nistp256 XXXXXXXXXX
> 
> --
> 
> Craig
> 
> 
> 
> 
> On Tue, Dec 20, 2016 at 4:10 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> It works:
> 
> $ conch twistedmatrix.com <http://twistedmatrix.com/> echo hooray
> hooray
>       $ conch --version
> Twisted version: 16.6.0dev0
> $ 
> 
> That's using an RSA host key though.  It seems that the hosts I have using ECDSA keys (buildbot.twistedmatrix.com <http://buildbot.twistedmatrix.com/>, for example) still don't work with conch.  Is that expected at this point?
> 
> -glyph
> 
>> On Dec 20, 2016, at 2:32 PM, Craig Rodrigues <rodrigc at crodrigues.org <mailto:rodrigc at crodrigues.org>> wrote:
>> 
>> On Friday, December 2, 2016, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>> I think there might be a regression in 16.6.0.
>> 
>> For every version up to 16.6.0, I can do 'conch twistedmatrix.com <http://twistedmatrix.com/>' in a shell and it works fine.
>> 
>> I believe that I have fixed this in trunk.
>> Can you try this with conch in trunk?
>> 
>> This works for me in trunk:
>> 
>> 1.  Start with an empty ~/.ssh/known_hosts file , or one with an ecdsa key for myhost.com <http://myhost.com/>
>> 2.  ssh myhost.com <http://myhost.com/>
>> 3.  log out of myhost.com <http://myhost.com/>
>> 3.  see that ~/.ssh/known_hosts contains an ecdsa host key for myhost.com <http://myhost.com/>
>> 4.  conch myhost.com <http://myhost.com/>
>> 5.  successfully log into myhost.com <http://myhost.com/> with conch
>> 
>> Before the latest fixes, I would get a bad host key error in step 5.
>> 
>> Many thanks to the0id and acabhishek942 for providing the ecdsa fixes to conch.
>> 
>> --
>> Craig
>>  
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161220/21ca472b/attachment-0001.html>

From rodrigc at crodrigues.org  Tue Dec 20 18:50:59 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 20 Dec 2016 17:50:59 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <720D721B-8360-43BE-8371-2DE572E18DF4@twistedmatrix.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <CAG=rPVc-ahNjN+br2MV-S5rTng71Y1jvR94oXJaZed+CZhskxw@mail.gmail.com>
 <E464AABC-DB66-44E6-9482-594254B907EA@twistedmatrix.com>
 <CAG=rPVdKNnD-gs3Aj+20HG-5BLJOmh7KEPUab5fD2A6P=ME96Q@mail.gmail.com>
 <720D721B-8360-43BE-8371-2DE572E18DF4@twistedmatrix.com>
Message-ID: <CAG=rPVe1=ZWf19tFbJxuvLzpB62w5JSXf+cJ7hFYC83Xac7c=A@mail.gmail.com>

Ah, OK.  In my testing, I had this in my server's /etc/ssh/sshd_config file
to force
use of ECDSA keys during my testing:


# HostKey for protocol version 1
#HostKey /etc/ssh/ssh_host_key
# HostKeys for protocol version 2
#HostKey /etc/ssh/ssh_host_rsa_key
#HostKey /etc/ssh/ssh_host_dsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key


If I then logged into the server with:
 *conch 192.168.1.2*

, then having an ecdsa key in ~/.ssh/known_hosts
worked fine and I could log in.  Before the latest patches, the ecdsa keys
were not
being parsed properly and this never worked at all.

If I changed the config on the server to:

# HostKey for protocol version 1
#HostKey /etc/ssh/ssh_host_key
# HostKeys for protocol version 2
#HostKey /etc/ssh/ssh_host_rsa_key
#HostKey /etc/ssh/ssh_host_dsa_key
#HostKey /etc/ssh/ssh_host_ecdsa_key
#HostKey /etc/ssh/ssh_host_ed25519_key

I got a bad host key error with conch, same as if I tried to log into
buildbot.twistedmatrix.com.
I put this:

import pudb; pudb.set_trace()

on this line inside *_continue_KEX_ECDH_REPLY()* :
https://github.com/twisted/twisted/blob/trunk/src/twisted/conch/ssh/transport.py#L1671

What I then found was that on this line:

hostkey, pubKey, signature, packet = getNS(packet, 3)


The host key is an RSA key.  Then this line in the same function:

 d = self.verifyHostKey(hostKey, fingerprint)
tries to compare the hostKey for 192.168.1.2 (which is RSA), against
the key in ~/.ssh/known_hosts which is ecdsa.  It then fails and returns a
bad host key error.

I also get this problem when trying to do *conch buildbot.twistedmatrix.com
<http://buildbot.twistedmatrix.com>*


--
Craig


On Tue, Dec 20, 2016 at 5:13 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

> Here's buildbot's key:
>
> buildbot.twistedmatrix.com ecdsa-sha2-nistp256
> AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBBcw4pr6
> WdgDMw7PbkvsuEdCqKQTtpLYPGoe7qkuQucuexYBiCkO/
> BeoB0wANX2cVmxUP0llpYJQL4w3cAR0csA=
>
> I think you should be able to validate that even if you can't auth :)
>
> -g
>
>
> On Dec 20, 2016, at 4:54 PM, Craig Rodrigues <rodrigc at crodrigues.org>
> wrote:
>
> I'm not sure. I was able to use conch to log into a box where the ecdsa
> key looked like this in my ~/.ssh/known_hosts
>
> 192.168.1.2 ecdsa-sha2-nistp256 XXXXXXXXXX
>
> --
>
> Craig
>
>
>
> On Tue, Dec 20, 2016 at 4:10 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
> wrote:
>
>> It works:
>>
>> $ conch twistedmatrix.com echo hooray
>> hooray
>>       $ conch --version
>> Twisted version: 16.6.0dev0
>> $
>>
>>
>> That's using an RSA host key though.  It seems that the hosts I have
>> using ECDSA keys (buildbot.twistedmatrix.com, for example) still don't
>> work with conch.  Is that expected at this point?
>>
>> -glyph
>>
>> On Dec 20, 2016, at 2:32 PM, Craig Rodrigues <rodrigc at crodrigues.org>
>> wrote:
>>
>> On Friday, December 2, 2016, Glyph Lefkowitz <glyph at twistedmatrix.com>
>> wrote:
>>>
>>> I think there might be a regression in 16.6.0.
>>>
>>> For every version up to 16.6.0, I can do 'conch twistedmatrix.com' in a
>>> shell and it works fine.
>>>
>>
>> I believe that I have fixed this in trunk.
>> Can you try this with conch in trunk?
>>
>> This works for me in trunk:
>>
>> 1.  Start with an empty ~/.ssh/known_hosts file , or one with an ecdsa
>> key for myhost.com
>> 2.  ssh myhost.com
>> 3.  log out of myhost.com
>> 3.  see that ~/.ssh/known_hosts contains an ecdsa host key for myhost.com
>> 4.  conch myhost.com
>> 5.  successfully log into myhost.com with conch
>>
>> Before the latest fixes, I would get a bad host key error in step 5.
>>
>> Many thanks to the0id and acabhishek942 for providing the ecdsa fixes to
>> conch.
>>
>> --
>> Craig
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161220/23fdbc3d/attachment.html>

From glyph at twistedmatrix.com  Tue Dec 20 19:24:04 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 20 Dec 2016 18:24:04 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <CAG=rPVe1=ZWf19tFbJxuvLzpB62w5JSXf+cJ7hFYC83Xac7c=A@mail.gmail.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <CAG=rPVc-ahNjN+br2MV-S5rTng71Y1jvR94oXJaZed+CZhskxw@mail.gmail.com>
 <E464AABC-DB66-44E6-9482-594254B907EA@twistedmatrix.com>
 <CAG=rPVdKNnD-gs3Aj+20HG-5BLJOmh7KEPUab5fD2A6P=ME96Q@mail.gmail.com>
 <720D721B-8360-43BE-8371-2DE572E18DF4@twistedmatrix.com>
 <CAG=rPVe1=ZWf19tFbJxuvLzpB62w5JSXf+cJ7hFYC83Xac7c=A@mail.gmail.com>
Message-ID: <A224B127-D889-485E-8007-3D16592305E6@twistedmatrix.com>


> On Dec 20, 2016, at 5:50 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Ah, OK.  In my testing, I had this in my server's /etc/ssh/sshd_config file to force
> use of ECDSA keys during my testing:
> 
> 
> # HostKey for protocol version 1
> #HostKey /etc/ssh/ssh_host_key
> # HostKeys for protocol version 2
> #HostKey /etc/ssh/ssh_host_rsa_key
> #HostKey /etc/ssh/ssh_host_dsa_key
> HostKey /etc/ssh/ssh_host_ecdsa_key
> HostKey /etc/ssh/ssh_host_ed25519_key
> 
> 
> If I then logged into the server with:
>  conch 192.168.1.2
> 
> , then having an ecdsa key in ~/.ssh/known_hosts
> worked fine and I could log in.  Before the latest patches, the ecdsa keys were not
> being parsed properly and this never worked at all.
> 
> If I changed the config on the server to:
> 
> # HostKey for protocol version 1
> #HostKey /etc/ssh/ssh_host_key
> # HostKeys for protocol version 2
> #HostKey /etc/ssh/ssh_host_rsa_key
> #HostKey /etc/ssh/ssh_host_dsa_key
> #HostKey /etc/ssh/ssh_host_ecdsa_key
> #HostKey /etc/ssh/ssh_host_ed25519_key
> 
> I got a bad host key error with conch, same as if I tried to log into buildbot.twistedmatrix.com <http://buildbot.twistedmatrix.com/>.
> I put this:
> 
> import pudb; pudb.set_trace()
> 
> on this line inside _continue_KEX_ECDH_REPLY() :
> https://github.com/twisted/twisted/blob/trunk/src/twisted/conch/ssh/transport.py#L1671 <https://github.com/twisted/twisted/blob/trunk/src/twisted/conch/ssh/transport.py#L1671>
Did you mean https://github.com/twisted/twisted/blob/71643ca93e024d33dba8de9eef149876554c2dd7/src/twisted/conch/ssh/transport.py#L1674 <https://github.com/twisted/twisted/blob/71643ca93e024d33dba8de9eef149876554c2dd7/src/twisted/conch/ssh/transport.py#L1674> ?

> What I then found was that on this line:
> 
> hostkey, pubKey, signature, packet = getNS(packet, 3)
> 
> 
> The host key is an RSA key.  Then this line in the same function:
>  d = self.verifyHostKey(hostKey, fingerprint)
> 
> tries to compare the hostKey for 192.168.1.2 (which is RSA), against
> the key in ~/.ssh/known_hosts which is ecdsa.  It then fails and returns a bad host key error.
> 
> I also get this problem when trying to do conch buildbot.twistedmatrix.com <http://buildbot.twistedmatrix.com/>
So... is this because buildbot.twistedmatrix.com <http://buildbot.twistedmatrix.com/> has an RSA key as well, and when it offers it, our checking isn't correctly comparing the type before deciding that it doesn't match, or allowing for multiple keys?  I notice that if I manually add the RSA key and delete the ECDSA key it seems to work.

-g

> --
> Craig
> 
> 
> On Tue, Dec 20, 2016 at 5:13 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> Here's buildbot's key:
> 
> buildbot.twistedmatrix.com <http://buildbot.twistedmatrix.com/> ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBBcw4pr6WdgDMw7PbkvsuEdCqKQTtpLYPGoe7qkuQucuexYBiCkO/BeoB0wANX2cVmxUP0llpYJQL4w3cAR0csA=
> 
> I think you should be able to validate that even if you can't auth :)
> 
> -g
> 
> 
>> On Dec 20, 2016, at 4:54 PM, Craig Rodrigues <rodrigc at crodrigues.org <mailto:rodrigc at crodrigues.org>> wrote:
>> 
>> I'm not sure. I was able to use conch to log into a box where the ecdsa key looked like this in my ~/.ssh/known_hosts
>> 
>> 192.168.1.2 ecdsa-sha2-nistp256 XXXXXXXXXX
>> 
>> --
>> 
>> Craig
>> 
>> 
>> 
>> 
>> On Tue, Dec 20, 2016 at 4:10 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>> It works:
>> 
>> $ conch twistedmatrix.com <http://twistedmatrix.com/> echo hooray
>> hooray
>>       $ conch --version
>> Twisted version: 16.6.0dev0
>> $ 
>> 
>> That's using an RSA host key though.  It seems that the hosts I have using ECDSA keys (buildbot.twistedmatrix.com <http://buildbot.twistedmatrix.com/>, for example) still don't work with conch.  Is that expected at this point?
>> 
>> -glyph
>> 
>>> On Dec 20, 2016, at 2:32 PM, Craig Rodrigues <rodrigc at crodrigues.org <mailto:rodrigc at crodrigues.org>> wrote:
>>> 
>>> On Friday, December 2, 2016, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>>> I think there might be a regression in 16.6.0.
>>> 
>>> For every version up to 16.6.0, I can do 'conch twistedmatrix.com <http://twistedmatrix.com/>' in a shell and it works fine.
>>> 
>>> I believe that I have fixed this in trunk.
>>> Can you try this with conch in trunk?
>>> 
>>> This works for me in trunk:
>>> 
>>> 1.  Start with an empty ~/.ssh/known_hosts file , or one with an ecdsa key for myhost.com <http://myhost.com/>
>>> 2.  ssh myhost.com <http://myhost.com/>
>>> 3.  log out of myhost.com <http://myhost.com/>
>>> 3.  see that ~/.ssh/known_hosts contains an ecdsa host key for myhost.com <http://myhost.com/>
>>> 4.  conch myhost.com <http://myhost.com/>
>>> 5.  successfully log into myhost.com <http://myhost.com/> with conch
>>> 
>>> Before the latest fixes, I would get a bad host key error in step 5.
>>> 
>>> Many thanks to the0id and acabhishek942 for providing the ecdsa fixes to conch.
>>> 
>>> --
>>> Craig
>>>  
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161220/24306d95/attachment-0001.html>

From chenjianhappy2008 at 126.com  Tue Dec 20 20:15:07 2016
From: chenjianhappy2008 at 126.com (=?GBK?B?s8K9oQ==?=)
Date: Wed, 21 Dec 2016 11:15:07 +0800 (CST)
Subject: [Twisted-Python] hmac-sha2-512 - Corrupted MAC on input with OpenSSH
Message-ID: <7aa77b23.1f5e.1591f6015fc.Coremail.chenjianhappy2008@126.com>

 hi:
|
|

    I write a SSH server with Twisted(15.5.0)  Conch.  But it  don't support hmac-sha2-512 MAC algorithms

|
.  However I see this problem has been fixed in https://twistedmatrix.com/trac/ticket/8108 .  I asked the question in http://stackoverflow.com/questions/41254398/twisted-hmac-sha2-512-corrupted-mac-on-input-with-openssh .

Best regards,

 ---jianchen

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161221/ac054496/attachment.html>

From rodrigc at crodrigues.org  Tue Dec 20 20:32:39 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 20 Dec 2016 19:32:39 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <A224B127-D889-485E-8007-3D16592305E6@twistedmatrix.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <CAG=rPVc-ahNjN+br2MV-S5rTng71Y1jvR94oXJaZed+CZhskxw@mail.gmail.com>
 <E464AABC-DB66-44E6-9482-594254B907EA@twistedmatrix.com>
 <CAG=rPVdKNnD-gs3Aj+20HG-5BLJOmh7KEPUab5fD2A6P=ME96Q@mail.gmail.com>
 <720D721B-8360-43BE-8371-2DE572E18DF4@twistedmatrix.com>
 <CAG=rPVe1=ZWf19tFbJxuvLzpB62w5JSXf+cJ7hFYC83Xac7c=A@mail.gmail.com>
 <A224B127-D889-485E-8007-3D16592305E6@twistedmatrix.com>
Message-ID: <CAG=rPVdiZSq4N+vx7na2yJMaNwh=AgUoNDBgBq_jNsXs+ghsOA@mail.gmail.com>

On Tue, Dec 20, 2016 at 6:24 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
>

>
> So... is this because buildbot.twistedmatrix.com has an RSA key as well,
> and when it offers it, our checking isn't correctly comparing the type
> before deciding that it doesn't match, or allowing for multiple keys?  I
> notice that if I manually add the RSA key and delete the ECDSA key it seems
> to work.
>
> -g
>
>

Yes, that is part of it.
What is happening is that the conch client sends a MSG_KEXINIT
packet to the server to negotatiate what the host key should be.
If I use an OpenSSH ssh client to connect to OpenSSH sshd server,
the negotiated host key algorithm is ecdsa-sha2-nistp256.

If I use a conch client to connect to the OpenSSH sshd server,
the negotiated host key algorithm is ssh-rsa.

I started a test instance of the sshd server with:

/usr/sbin/sshd -p 9000 -d -d -d

and captured the logs (see attached).

I think some problems are:
  (1)  conch proposes a list of *host key algorithms* in a different order
than
         OpenSSH.  It shouldn't matter, but conch proposes ssh-rsa first,
         while OpenSSH proposes it last.
  (2)  OpenSSH client seems to be able to receive multiple host keys back
         from the server, and can match the one it has.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161220/d6b488a5/attachment-0001.html>
-------------- next part --------------
Script started on Tue Dec 20 18:50:42 2016
Command: /usr/sbin/sshd -p 9000 -d -d -d
debug2: load_server_config: filename /etc/ssh/sshd_config

debug2: load_server_config: done config len = 197

debug2: parse_server_config: config /etc/ssh/sshd_config len 197

debug3: /etc/ssh/sshd_config:49 setting PermitRootLogin yes

debug3: /etc/ssh/sshd_config:131 setting Subsystem sftp	/usr/libexec/sftp-server

debug1: sshd version OpenSSH_7.2, OpenSSL 1.0.2j-freebsd  26 Sep 2016

debug1: private host key #0: ssh-rsa SHA256:73H4OcFhNGdHY2sVsbBOVVOudub2EkvfYNlwpxWM1Xw

debug1: private host key #1: ssh-dss SHA256:6BQ11F0ejGONS1+d4O63t7fyyGKaEyW33a73x5G/3ic

debug1: private host key #2: ecdsa-sha2-nistp256 SHA256:jkq3WG/EU+yyyg8xemPshcErRvPYmSbU202opbYgzHU

debug1: private host key #3: ssh-ed25519 SHA256:59NbS+jIUH9ADjLpk5nQLKq229hrx89QpAd3Z3Ts6j4

debug1: rexec_argv[0]='/usr/sbin/sshd'

debug1: rexec_argv[1]='-p'

debug1: rexec_argv[2]='9000'

debug1: rexec_argv[3]='-d'

debug1: rexec_argv[4]='-d'

debug1: rexec_argv[5]='-d'

debug2: fd 3 setting O_NONBLOCK

debug3: Fssh_sock_set_v6only: set socket 3 IPV6_V6ONLY

debug1: Bind to port 9000 on ::.

debug1: Server TCP RWIN socket size: 65536

Server listening on :: port 9000.

debug2: fd 4 setting O_NONBLOCK

debug1: Bind to port 9000 on 0.0.0.0.

debug1: Server TCP RWIN socket size: 65536

Server listening on 0.0.0.0 port 9000.

debug1: fd 5 clearing O_NONBLOCK

debug1: Server will not fork when running in debugging mode.

debug3: send_rexec_state: entering fd = 8 config len 197

debug3: ssh_msg_send: type 0

debug3: send_rexec_state: done

debug1: rexec start in 5 out 5 newsock 5 pipe -1 sock 8

debug1: inetd sockets after dupping: 3, 3

debug1: res_init()

Connection from 192.168.1.5 port 58546 on 192.168.1.2 port 9000

debug1: Client protocol version 2.0; client software version OpenSSH_7.2

debug1: match: OpenSSH_7.2 pat OpenSSH* compat 0x04000000

debug1: Enabling compatibility mode for protocol 2.0

debug1: Local version string SSH-2.0-OpenSSH_7.2 FreeBSD-20160310

debug2: fd 3 setting O_NONBLOCK

debug3: ssh_sandbox_init: preparing capsicum sandbox

debug2: Network child is on pid 68979

debug3: preauth child monitor started

debug3: privsep user:group 22:22 [preauth]

debug1: permanently_set_uid: 22/22 [preauth]

debug3: list_hostkey_types: ssh-dss key not permitted by HostkeyAlgorithms [preauth]

debug1: list_hostkey_types: ssh-rsa,rsa-sha2-512,rsa-sha2-256,ecdsa-sha2-nistp256,ssh-ed25519 [preauth]

debug3: send packet: type 20 [preauth]

debug1: SSH2_MSG_KEXINIT sent [preauth]

debug3: receive packet: type 20 [preauth]

debug1: SSH2_MSG_KEXINIT received [preauth]

debug2: local server KEXINIT proposal [preauth]

debug2: KEX algorithms: curve25519-sha256 at libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1 [preauth]

debug2: host key algorithms: ssh-rsa,rsa-sha2-512,rsa-sha2-256,ecdsa-sha2-nistp256,ssh-ed25519 [preauth]

debug2: ciphers ctos: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc [preauth]

debug2: ciphers stoc: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc [preauth]

debug2: MACs ctos: umac-64-etm at openssh.com,umac-128-etm at openssh.com,hmac-sha2-256-etm at openssh.com,hmac-sha2-512-etm at openssh.com,hmac-sha1-etm at openssh.com,umac-64 at openssh.com,umac-128 at openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 [preauth]

debug2: MACs stoc: umac-64-etm at openssh.com,umac-128-etm at openssh.com,hmac-sha2-256-etm at openssh.com,hmac-sha2-512-etm at openssh.com,hmac-sha1-etm at openssh.com,umac-64 at openssh.com,umac-128 at openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 [preauth]

debug2: compression ctos: none,zlib at openssh.com [preauth]

debug2: compression stoc: none,zlib at openssh.com [preauth]

debug2: languages ctos:  [preauth]

debug2: languages stoc:  [preauth]

debug2: first_kex_follows 0  [preauth]

debug2: reserved 0  [preauth]

debug2: peer client KEXINIT proposal [preauth]

debug2: KEX algorithms: curve25519-sha256 at libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,ext-info-c [preauth]

debug2: host key algorithms: ecdsa-sha2-nistp256-cert-v01 at openssh.com,ecdsa-sha2-nistp384-cert-v01 at openssh.com,ecdsa-sha2-nistp521-cert-v01 at openssh.com,ssh-ed25519-cert-v01 at openssh.com,ssh-rsa-cert-v01 at openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519,rsa-sha2-512,rsa-sha2-256,ssh-rsa [preauth]

debug2: ciphers ctos: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,3des-cbc [preauth]

debug2: ciphers stoc: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,3des-cbc [preauth]

debug2: MACs ctos: umac-64-etm at openssh.com,umac-128-etm at openssh.com,hmac-sha2-256-etm at openssh.com,hmac-sha2-512-etm at openssh.com,hmac-sha1-etm at openssh.com,umac-64 at openssh.com,umac-128 at openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 [preauth]

debug2: MACs stoc: umac-64-etm at openssh.com,umac-128-etm at openssh.com,hmac-sha2-256-etm at openssh.com,hmac-sha2-512-etm at openssh.com,hmac-sha1-etm at openssh.com,umac-64 at openssh.com,umac-128 at openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 [preauth]

debug2: compression ctos: none,zlib at openssh.com,zlib [preauth]

debug2: compression stoc: none,zlib at openssh.com,zlib [preauth]

debug2: languages ctos:  [preauth]

debug2: languages stoc:  [preauth]

debug2: first_kex_follows 0  [preauth]

debug2: reserved 0  [preauth]

debug1: kex: algorithm: curve25519-sha256 at libssh.org [preauth]

debug1: kex: host key algorithm: ecdsa-sha2-nistp256 [preauth]

debug1: kex: client->server cipher: chacha20-poly1305 at openssh.com MAC: <implicit> compression: none [preauth]

debug1: kex: server->client cipher: chacha20-poly1305 at openssh.com MAC: <implicit> compression: none [preauth]

debug1: expecting SSH2_MSG_KEX_ECDH_INIT [preauth]

debug3: receive packet: type 30 [preauth]

debug3: mm_key_sign entering [preauth]

debug3: mm_request_send entering: type 6 [preauth]

debug3: mm_key_sign: waiting for MONITOR_ANS_SIGN [preauth]

debug3: mm_request_receive_expect entering: type 7 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 6

debug3: mm_answer_sign

debug3: mm_answer_sign: hostkey proof signature 0x8040411c0(99)

debug3: mm_request_send entering: type 7

debug2: monitor_read: 6 used once, disabling now

debug3: send packet: type 31 [preauth]

debug3: send packet: type 21 [preauth]

debug2: set_newkeys: mode 1 [preauth]

debug1: rekey after 134217728 blocks [preauth]

debug1: SSH2_MSG_NEWKEYS sent [preauth]

debug1: expecting SSH2_MSG_NEWKEYS [preauth]

debug3: send packet: type 7 [preauth]

debug3: receive packet: type 21 [preauth]

debug2: set_newkeys: mode 0 [preauth]

debug1: rekey after 134217728 blocks [preauth]

debug1: SSH2_MSG_NEWKEYS received [preauth]

debug1: KEX done [preauth]

debug3: receive packet: type 5 [preauth]

debug3: send packet: type 6 [preauth]

debug3: receive packet: type 50 [preauth]

debug3: Trying to reverse map address 192.168.1.5. [preauth]

debug1: userauth-request for user rodrigc service ssh-connection method none [preauth]

debug1: attempt 0 failures 0 [preauth]

debug3: mm_getpwnamallow entering [preauth]

debug3: mm_request_send entering: type 8 [preauth]

debug3: mm_getpwnamallow: waiting for MONITOR_ANS_PWNAM [preauth]

debug3: mm_request_receive_expect entering: type 9 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 8

debug3: mm_answer_pwnamallow

debug3: Trying to reverse map address 192.168.1.5.

debug2: parse_server_config: config reprocess config len 197

debug3: mm_answer_pwnamallow: sending MONITOR_ANS_PWNAM: 1

debug3: mm_request_send entering: type 9

debug2: monitor_read: 8 used once, disabling now

debug2: input_userauth_request: setting up authctxt for rodrigc [preauth]

debug3: mm_start_pam entering [preauth]

debug3: mm_request_send entering: type 100 [preauth]

debug3: mm_inform_authserv entering [preauth]

debug3: mm_request_send entering: type 4 [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 100

debug1: PAM: initializing for "rodrigc"

debug1: PAM: setting PAM_RHOST to "192.168.1.5"

debug2: monitor_read: 100 used once, disabling now

debug2: input_userauth_request: try method none [preauth]

debug3: userauth_finish: failure partial=0 next methods="publickey,keyboard-interactive" [preauth]

debug3: send packet: type 51 [preauth]

debug3: receive packet: type 50 [preauth]

debug1: userauth-request for user rodrigc service ssh-connection method publickey [preauth]

debug1: attempt 1 failures 0 [preauth]

debug2: input_userauth_request: try method publickey [preauth]

debug1: userauth_pubkey: test whether pkalg/pkblob are acceptable for RSA SHA256:m2nfEMZA8SWbLCwY40QzK5CSxEAuW0H+aUC4g8jOWFo [preauth]

debug3: mm_key_allowed entering [preauth]

debug3: mm_request_send entering: type 22 [preauth]

debug3: mm_key_allowed: waiting for MONITOR_ANS_KEYALLOWED [preauth]

debug3: mm_request_receive_expect entering: type 23 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 4

debug3: mm_answer_authserv: service=ssh-connection, style=

debug2: monitor_read: 4 used once, disabling now

debug3: mm_request_receive entering

debug3: monitor_read: checking request 22

debug3: mm_answer_keyallowed entering

debug3: mm_answer_keyallowed: key_from_blob: 0x80401b540

debug1: trying public key file /opt2/home/rodrigc/.ssh/authorized_keys

debug1: fd 4 clearing O_NONBLOCK

debug2: user_key_allowed: check options: 'ssh-dss AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug2: user_key_allowed: advance: 'AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug2: key not found

debug1: trying public key file /opt2/home/rodrigc/.ssh/authorized_keys2

debug1: Could not open authorized keys '/opt2/home/rodrigc/.ssh/authorized_keys2': No such file or directory

Failed publickey for rodrigc from 192.168.1.5 port 58546 ssh2: RSA SHA256:m2nfEMZA8SWbLCwY40QzK5CSxEAuW0H+aUC4g8jOWFo

debug3: mm_answer_keyallowed: key 0x80401b540 is not allowed

debug3: mm_request_send entering: type 23

debug2: userauth_pubkey: authenticated 0 pkalg rsa-sha2-512 [preauth]

debug3: userauth_finish: failure partial=0 next methods="publickey,keyboard-interactive" [preauth]

debug3: send packet: type 51 [preauth]

debug3: receive packet: type 50 [preauth]

debug1: userauth-request for user rodrigc service ssh-connection method publickey [preauth]

debug1: attempt 2 failures 1 [preauth]

debug2: input_userauth_request: try method publickey [preauth]

debug1: userauth_pubkey: test whether pkalg/pkblob are acceptable for RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc [preauth]

debug3: mm_key_allowed entering [preauth]

debug3: mm_request_send entering: type 22 [preauth]

debug3: mm_key_allowed: waiting for MONITOR_ANS_KEYALLOWED [preauth]

debug3: mm_request_receive_expect entering: type 23 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 22

debug3: mm_answer_keyallowed entering

debug3: mm_answer_keyallowed: key_from_blob: 0x80401b540

debug1: trying public key file /opt2/home/rodrigc/.ssh/authorized_keys

debug1: fd 4 clearing O_NONBLOCK

debug2: user_key_allowed: check options: 'ssh-dss AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug2: user_key_allowed: advance: 'AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug1: matching key found: file /opt2/home/rodrigc/.ssh/authorized_keys, line 2 RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc

debug3: mm_answer_keyallowed: key 0x80401b540 is allowed

debug3: mm_request_send entering: type 23

debug3: send packet: type 60 [preauth]

debug2: userauth_pubkey: authenticated 0 pkalg rsa-sha2-512 [preauth]

Postponed publickey for rodrigc from 192.168.1.5 port 58546 ssh2 [preauth]

debug3: receive packet: type 50 [preauth]

debug1: userauth-request for user rodrigc service ssh-connection method publickey [preauth]

debug1: attempt 3 failures 1 [preauth]

debug2: input_userauth_request: try method publickey [preauth]

debug3: userauth_pubkey: have signature for RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc [preauth]

debug3: mm_key_allowed entering [preauth]

debug3: mm_request_send entering: type 22 [preauth]

debug3: mm_key_allowed: waiting for MONITOR_ANS_KEYALLOWED [preauth]

debug3: mm_request_receive_expect entering: type 23 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 22

debug3: mm_answer_keyallowed entering

debug3: mm_answer_keyallowed: key_from_blob: 0x80401b540

debug1: trying public key file /opt2/home/rodrigc/.ssh/authorized_keys

debug1: fd 4 clearing O_NONBLOCK

debug2: user_key_allowed: check options: 'ssh-dss AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug2: user_key_allowed: advance: 'AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug1: matching key found: file /opt2/home/rodrigc/.ssh/authorized_keys, line 2 RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc

debug3: mm_answer_keyallowed: key 0x80401b540 is allowed

debug3: mm_request_send entering: type 23

debug3: mm_key_verify entering [preauth]

debug3: mm_request_send entering: type 24 [preauth]

debug3: mm_key_verify: waiting for MONITOR_ANS_KEYVERIFY [preauth]

debug3: mm_request_receive_expect entering: type 25 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 24

debug3: mm_answer_keyverify: key 0x80401b540 signature verified

debug3: mm_request_send entering: type 25

debug3: mm_request_receive_expect entering: type 102

debug3: mm_request_receive entering

debug1: do_pam_account: called

debug3: PAM: do_pam_account pam_acct_mgmt = 0 (success)

debug3: mm_request_send entering: type 103

Accepted publickey for rodrigc from 192.168.1.5 port 58546 ssh2: RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc

debug1: monitor_child_preauth: rodrigc has been authenticated by privileged process

debug3: mm_get_keystate: Waiting for new keys

debug3: mm_request_receive_expect entering: type 26

debug3: mm_request_receive entering

debug3: mm_get_keystate: GOT new keys

debug2: userauth_pubkey: authenticated 1 pkalg rsa-sha2-512 [preauth]

debug3: mm_do_pam_account entering [preauth]

debug3: mm_request_send entering: type 102 [preauth]

debug3: mm_request_receive_expect entering: type 103 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_do_pam_account returning 1 [preauth]

debug3: send packet: type 52 [preauth]

debug3: mm_request_send entering: type 26 [preauth]

debug3: mm_send_keystate: Finished sending state [preauth]

debug1: monitor_read_log: child log fd closed

debug3: mm_share_sync: Share sync

debug3: mm_share_sync: Share sync end

debug3: ssh_sandbox_parent_finish: finished

debug1: PAM: establishing credentials

debug3: PAM: opening session

User child is on pid 68980

debug1: PAM: establishing credentials

debug3: monitor_apply_keystate: packet_set_state

debug2: set_newkeys: mode 0

debug1: rekey after 134217728 blocks

debug2: set_newkeys: mode 1

debug1: rekey after 134217728 blocks

debug1: ssh_packet_set_postauth: called

debug3: Fssh_ssh_packet_set_state: done

debug3: notify_hostkeys: key 0: ssh-rsa SHA256:73H4OcFhNGdHY2sVsbBOVVOudub2EkvfYNlwpxWM1Xw

debug3: notify_hostkeys: key 1: ssh-dss SHA256:6BQ11F0ejGONS1+d4O63t7fyyGKaEyW33a73x5G/3ic

debug3: notify_hostkeys: key 2: ecdsa-sha2-nistp256 SHA256:jkq3WG/EU+yyyg8xemPshcErRvPYmSbU202opbYgzHU

debug3: notify_hostkeys: key 3: ssh-ed25519 SHA256:59NbS+jIUH9ADjLpk5nQLKq229hrx89QpAd3Z3Ts6j4

debug3: notify_hostkeys: sent 4 hostkeys

debug3: send packet: type 80

debug1: Entering interactive session for SSH2.

debug2: fd 6 setting O_NONBLOCK

debug2: fd 7 setting O_NONBLOCK

debug1: server_init_dispatch_20

debug3: receive packet: type 90

debug1: server_input_channel_open: ctype session rchan 0 win 1048576 max 16384

debug1: input_session_request

debug1: channel 0: new [server-session]

debug2: session_new: allocate (allocated 0 max 10)

debug3: session_unused: session id 0 unused

debug1: session_new: session 0

debug1: session_open: channel 0

debug1: session_open: session 0: link with channel 0

debug1: server_input_channel_open: confirm session

debug3: send packet: type 91

debug3: receive packet: type 80

debug1: server_input_global_request: rtype no-more-sessions at openssh.com want_reply 0

debug3: receive packet: type 98

debug1: server_input_channel_req: channel 0 request pty-req reply 1

debug1: session_by_channel: session 0 channel 0

debug1: session_input_channel_req: session 0 req pty-req

debug1: Allocating pty.

debug3: mm_request_send entering: type 28

debug3: mm_pty_allocate: waiting for MONITOR_ANS_PTY

debug3: mm_request_receive_expect entering: type 29

debug3: mm_request_receive entering

debug3: mm_request_receive entering

debug3: monitor_read: checking request 28

debug3: mm_answer_pty entering

debug2: session_new: allocate (allocated 0 max 10)

debug3: session_unused: session id 0 unused

debug1: session_new: session 0

debug3: mm_request_send entering: type 29

debug3: mm_answer_pty: tty /dev/pts/4 ptyfd 5

debug1: session_pty_req: session 0 alloc /dev/pts/4

debug3: send packet: type 99

debug3: receive packet: type 98

debug1: server_input_channel_req: channel 0 request env reply 0

debug1: session_by_channel: session 0 channel 0

debug1: session_input_channel_req: session 0 req env

debug2: Ignoring env request LANG: disallowed name

debug3: receive packet: type 98

debug1: server_input_channel_req: channel 0 request shell reply 1

debug1: session_by_channel: session 0 channel 0

debug1: session_input_channel_req: session 0 req shell

Starting session: shell on pts/4 for rodrigc from 192.168.1.5 port 58546 id 0

debug2: fd 3 setting TCP_NODELAY

debug3: Fssh_ssh_packet_set_tos: set IP_TOS 0x10

debug2: channel 0: rfd 10 isatty

debug2: fd 10 setting O_NONBLOCK

debug3: fd 8 is O_NONBLOCK

debug3: send packet: type 99

debug1: Setting controlling tty using TIOCSCTTY.

debug2: channel 0: read<=0 rfd 10 len 0

debug2: channel 0: read failed

debug2: channel 0: close_read

debug2: channel 0: input open -> drain

debug2: channel 0: ibuf empty

debug2: channel 0: send eof

debug3: send packet: type 96

debug2: channel 0: input drain -> closed

debug1: Received SIGCHLD.

debug1: session_by_pid: pid 68981

debug1: session_exit_message: session 0 channel 0 pid 68981

debug2: channel 0: request exit-status confirm 0

debug3: send packet: type 98

debug1: session_exit_message: release channel 0

debug2: channel 0: write failed

debug2: channel 0: close_write

debug2: channel 0: send eow

debug3: send packet: type 98

debug2: channel 0: output open -> closed

debug3: mm_request_send entering: type 30

debug2: channel 0: send close

debug3: send packet: type 97

debug3: channel 0: will not send data after close

debug2: notify_done: reading

debug3: mm_request_receive entering

debug3: channel 0: will not send data after close

debug3: monitor_read: checking request 30

debug3: mm_answer_pty_cleanup entering

debug1: session_by_tty: session 0 tty /dev/pts/4

debug3: mm_session_close: session 0 pid 68980

debug3: mm_session_close: tty /dev/pts/4 ptyfd 5

debug1: session_pty_cleanup: session 0 release /dev/pts/4

debug3: session_unused: session id 0 unused

debug3: receive packet: type 97

debug2: channel 0: rcvd close

debug3: channel 0: will not send data after close

debug2: channel 0: is dead

debug2: channel 0: gc: notify user

debug1: session_by_channel: session 0 channel 0

debug1: session_close_by_channel: channel 0 child 0

Close session: user rodrigc from 192.168.1.5 port 58546 id 0

debug3: session_unused: session id 0 unused

debug2: channel 0: gc: user detached

debug2: channel 0: is dead

debug2: channel 0: garbage collecting

debug1: channel 0: free: server-session, nchannels 1

debug3: channel 0: status: The following connections are open:

  #0 server-session (t4 r0 i3/0 o3/0 fd -1/-1 cc -1)



debug3: receive packet: type 1

Received disconnect from 192.168.1.5 port 58546:11: disconnected by user

Disconnected from 192.168.1.5 port 58546

debug1: do_cleanup

debug3: PAM: sshpam_thread_cleanup entering

debug3: mm_request_receive entering

debug1: do_cleanup

debug1: PAM: cleanup

debug1: PAM: closing session

debug1: PAM: deleting credentials

debug3: PAM: sshpam_thread_cleanup entering


Command exit status: 255
Script done on Tue Dec 20 18:50:47 2016
-------------- next part --------------
Script started on Tue Dec 20 18:50:42 2016
Command: /usr/sbin/sshd -p 9000 -d -d -d
debug2: load_server_config: filename /etc/ssh/sshd_config

debug2: load_server_config: done config len = 197

debug2: parse_server_config: config /etc/ssh/sshd_config len 197

debug3: /etc/ssh/sshd_config:49 setting PermitRootLogin yes

debug3: /etc/ssh/sshd_config:131 setting Subsystem sftp	/usr/libexec/sftp-server

debug1: sshd version OpenSSH_7.2, OpenSSL 1.0.2j-freebsd  26 Sep 2016

debug1: private host key #0: ssh-rsa SHA256:73H4OcFhNGdHY2sVsbBOVVOudub2EkvfYNlwpxWM1Xw

debug1: private host key #1: ssh-dss SHA256:6BQ11F0ejGONS1+d4O63t7fyyGKaEyW33a73x5G/3ic

debug1: private host key #2: ecdsa-sha2-nistp256 SHA256:jkq3WG/EU+yyyg8xemPshcErRvPYmSbU202opbYgzHU

debug1: private host key #3: ssh-ed25519 SHA256:59NbS+jIUH9ADjLpk5nQLKq229hrx89QpAd3Z3Ts6j4

debug1: rexec_argv[0]='/usr/sbin/sshd'

debug1: rexec_argv[1]='-p'

debug1: rexec_argv[2]='9000'

debug1: rexec_argv[3]='-d'

debug1: rexec_argv[4]='-d'

debug1: rexec_argv[5]='-d'

debug2: fd 3 setting O_NONBLOCK

debug3: Fssh_sock_set_v6only: set socket 3 IPV6_V6ONLY

debug1: Bind to port 9000 on ::.

debug1: Server TCP RWIN socket size: 65536

Server listening on :: port 9000.

debug2: fd 4 setting O_NONBLOCK

debug1: Bind to port 9000 on 0.0.0.0.

debug1: Server TCP RWIN socket size: 65536

Server listening on 0.0.0.0 port 9000.

debug1: fd 5 clearing O_NONBLOCK

debug1: Server will not fork when running in debugging mode.

debug3: send_rexec_state: entering fd = 8 config len 197

debug3: ssh_msg_send: type 0

debug3: send_rexec_state: done

debug1: rexec start in 5 out 5 newsock 5 pipe -1 sock 8

debug1: inetd sockets after dupping: 3, 3

debug1: res_init()

Connection from 192.168.1.5 port 58546 on 192.168.1.2 port 9000

debug1: Client protocol version 2.0; client software version OpenSSH_7.2

debug1: match: OpenSSH_7.2 pat OpenSSH* compat 0x04000000

debug1: Enabling compatibility mode for protocol 2.0

debug1: Local version string SSH-2.0-OpenSSH_7.2 FreeBSD-20160310

debug2: fd 3 setting O_NONBLOCK

debug3: ssh_sandbox_init: preparing capsicum sandbox

debug2: Network child is on pid 68979

debug3: preauth child monitor started

debug3: privsep user:group 22:22 [preauth]

debug1: permanently_set_uid: 22/22 [preauth]

debug3: list_hostkey_types: ssh-dss key not permitted by HostkeyAlgorithms [preauth]

debug1: list_hostkey_types: ssh-rsa,rsa-sha2-512,rsa-sha2-256,ecdsa-sha2-nistp256,ssh-ed25519 [preauth]

debug3: send packet: type 20 [preauth]

debug1: SSH2_MSG_KEXINIT sent [preauth]

debug3: receive packet: type 20 [preauth]

debug1: SSH2_MSG_KEXINIT received [preauth]

debug2: local server KEXINIT proposal [preauth]

debug2: KEX algorithms: curve25519-sha256 at libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1 [preauth]

debug2: host key algorithms: ssh-rsa,rsa-sha2-512,rsa-sha2-256,ecdsa-sha2-nistp256,ssh-ed25519 [preauth]

debug2: ciphers ctos: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc [preauth]

debug2: ciphers stoc: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc [preauth]

debug2: MACs ctos: umac-64-etm at openssh.com,umac-128-etm at openssh.com,hmac-sha2-256-etm at openssh.com,hmac-sha2-512-etm at openssh.com,hmac-sha1-etm at openssh.com,umac-64 at openssh.com,umac-128 at openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 [preauth]

debug2: MACs stoc: umac-64-etm at openssh.com,umac-128-etm at openssh.com,hmac-sha2-256-etm at openssh.com,hmac-sha2-512-etm at openssh.com,hmac-sha1-etm at openssh.com,umac-64 at openssh.com,umac-128 at openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 [preauth]

debug2: compression ctos: none,zlib at openssh.com [preauth]

debug2: compression stoc: none,zlib at openssh.com [preauth]

debug2: languages ctos:  [preauth]

debug2: languages stoc:  [preauth]

debug2: first_kex_follows 0  [preauth]

debug2: reserved 0  [preauth]

debug2: peer client KEXINIT proposal [preauth]

debug2: KEX algorithms: curve25519-sha256 at libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,ext-info-c [preauth]

debug2: host key algorithms: ecdsa-sha2-nistp256-cert-v01 at openssh.com,ecdsa-sha2-nistp384-cert-v01 at openssh.com,ecdsa-sha2-nistp521-cert-v01 at openssh.com,ssh-ed25519-cert-v01 at openssh.com,ssh-rsa-cert-v01 at openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519,rsa-sha2-512,rsa-sha2-256,ssh-rsa [preauth]

debug2: ciphers ctos: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,3des-cbc [preauth]

debug2: ciphers stoc: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,3des-cbc [preauth]

debug2: MACs ctos: umac-64-etm at openssh.com,umac-128-etm at openssh.com,hmac-sha2-256-etm at openssh.com,hmac-sha2-512-etm at openssh.com,hmac-sha1-etm at openssh.com,umac-64 at openssh.com,umac-128 at openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 [preauth]

debug2: MACs stoc: umac-64-etm at openssh.com,umac-128-etm at openssh.com,hmac-sha2-256-etm at openssh.com,hmac-sha2-512-etm at openssh.com,hmac-sha1-etm at openssh.com,umac-64 at openssh.com,umac-128 at openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 [preauth]

debug2: compression ctos: none,zlib at openssh.com,zlib [preauth]

debug2: compression stoc: none,zlib at openssh.com,zlib [preauth]

debug2: languages ctos:  [preauth]

debug2: languages stoc:  [preauth]

debug2: first_kex_follows 0  [preauth]

debug2: reserved 0  [preauth]

debug1: kex: algorithm: curve25519-sha256 at libssh.org [preauth]

debug1: kex: host key algorithm: ecdsa-sha2-nistp256 [preauth]

debug1: kex: client->server cipher: chacha20-poly1305 at openssh.com MAC: <implicit> compression: none [preauth]

debug1: kex: server->client cipher: chacha20-poly1305 at openssh.com MAC: <implicit> compression: none [preauth]

debug1: expecting SSH2_MSG_KEX_ECDH_INIT [preauth]

debug3: receive packet: type 30 [preauth]

debug3: mm_key_sign entering [preauth]

debug3: mm_request_send entering: type 6 [preauth]

debug3: mm_key_sign: waiting for MONITOR_ANS_SIGN [preauth]

debug3: mm_request_receive_expect entering: type 7 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 6

debug3: mm_answer_sign

debug3: mm_answer_sign: hostkey proof signature 0x8040411c0(99)

debug3: mm_request_send entering: type 7

debug2: monitor_read: 6 used once, disabling now

debug3: send packet: type 31 [preauth]

debug3: send packet: type 21 [preauth]

debug2: set_newkeys: mode 1 [preauth]

debug1: rekey after 134217728 blocks [preauth]

debug1: SSH2_MSG_NEWKEYS sent [preauth]

debug1: expecting SSH2_MSG_NEWKEYS [preauth]

debug3: send packet: type 7 [preauth]

debug3: receive packet: type 21 [preauth]

debug2: set_newkeys: mode 0 [preauth]

debug1: rekey after 134217728 blocks [preauth]

debug1: SSH2_MSG_NEWKEYS received [preauth]

debug1: KEX done [preauth]

debug3: receive packet: type 5 [preauth]

debug3: send packet: type 6 [preauth]

debug3: receive packet: type 50 [preauth]

debug3: Trying to reverse map address 192.168.1.5. [preauth]

debug1: userauth-request for user rodrigc service ssh-connection method none [preauth]

debug1: attempt 0 failures 0 [preauth]

debug3: mm_getpwnamallow entering [preauth]

debug3: mm_request_send entering: type 8 [preauth]

debug3: mm_getpwnamallow: waiting for MONITOR_ANS_PWNAM [preauth]

debug3: mm_request_receive_expect entering: type 9 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 8

debug3: mm_answer_pwnamallow

debug3: Trying to reverse map address 192.168.1.5.

debug2: parse_server_config: config reprocess config len 197

debug3: mm_answer_pwnamallow: sending MONITOR_ANS_PWNAM: 1

debug3: mm_request_send entering: type 9

debug2: monitor_read: 8 used once, disabling now

debug2: input_userauth_request: setting up authctxt for rodrigc [preauth]

debug3: mm_start_pam entering [preauth]

debug3: mm_request_send entering: type 100 [preauth]

debug3: mm_inform_authserv entering [preauth]

debug3: mm_request_send entering: type 4 [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 100

debug1: PAM: initializing for "rodrigc"

debug1: PAM: setting PAM_RHOST to "192.168.1.5"

debug2: monitor_read: 100 used once, disabling now

debug2: input_userauth_request: try method none [preauth]

debug3: userauth_finish: failure partial=0 next methods="publickey,keyboard-interactive" [preauth]

debug3: send packet: type 51 [preauth]

debug3: receive packet: type 50 [preauth]

debug1: userauth-request for user rodrigc service ssh-connection method publickey [preauth]

debug1: attempt 1 failures 0 [preauth]

debug2: input_userauth_request: try method publickey [preauth]

debug1: userauth_pubkey: test whether pkalg/pkblob are acceptable for RSA SHA256:m2nfEMZA8SWbLCwY40QzK5CSxEAuW0H+aUC4g8jOWFo [preauth]

debug3: mm_key_allowed entering [preauth]

debug3: mm_request_send entering: type 22 [preauth]

debug3: mm_key_allowed: waiting for MONITOR_ANS_KEYALLOWED [preauth]

debug3: mm_request_receive_expect entering: type 23 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 4

debug3: mm_answer_authserv: service=ssh-connection, style=

debug2: monitor_read: 4 used once, disabling now

debug3: mm_request_receive entering

debug3: monitor_read: checking request 22

debug3: mm_answer_keyallowed entering

debug3: mm_answer_keyallowed: key_from_blob: 0x80401b540

debug1: trying public key file /opt2/home/rodrigc/.ssh/authorized_keys

debug1: fd 4 clearing O_NONBLOCK

debug2: user_key_allowed: check options: 'ssh-dss AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug2: user_key_allowed: advance: 'AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug2: key not found

debug1: trying public key file /opt2/home/rodrigc/.ssh/authorized_keys2

debug1: Could not open authorized keys '/opt2/home/rodrigc/.ssh/authorized_keys2': No such file or directory

Failed publickey for rodrigc from 192.168.1.5 port 58546 ssh2: RSA SHA256:m2nfEMZA8SWbLCwY40QzK5CSxEAuW0H+aUC4g8jOWFo

debug3: mm_answer_keyallowed: key 0x80401b540 is not allowed

debug3: mm_request_send entering: type 23

debug2: userauth_pubkey: authenticated 0 pkalg rsa-sha2-512 [preauth]

debug3: userauth_finish: failure partial=0 next methods="publickey,keyboard-interactive" [preauth]

debug3: send packet: type 51 [preauth]

debug3: receive packet: type 50 [preauth]

debug1: userauth-request for user rodrigc service ssh-connection method publickey [preauth]

debug1: attempt 2 failures 1 [preauth]

debug2: input_userauth_request: try method publickey [preauth]

debug1: userauth_pubkey: test whether pkalg/pkblob are acceptable for RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc [preauth]

debug3: mm_key_allowed entering [preauth]

debug3: mm_request_send entering: type 22 [preauth]

debug3: mm_key_allowed: waiting for MONITOR_ANS_KEYALLOWED [preauth]

debug3: mm_request_receive_expect entering: type 23 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 22

debug3: mm_answer_keyallowed entering

debug3: mm_answer_keyallowed: key_from_blob: 0x80401b540

debug1: trying public key file /opt2/home/rodrigc/.ssh/authorized_keys

debug1: fd 4 clearing O_NONBLOCK

debug2: user_key_allowed: check options: 'ssh-dss AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug2: user_key_allowed: advance: 'AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug1: matching key found: file /opt2/home/rodrigc/.ssh/authorized_keys, line 2 RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc

debug3: mm_answer_keyallowed: key 0x80401b540 is allowed

debug3: mm_request_send entering: type 23

debug3: send packet: type 60 [preauth]

debug2: userauth_pubkey: authenticated 0 pkalg rsa-sha2-512 [preauth]

Postponed publickey for rodrigc from 192.168.1.5 port 58546 ssh2 [preauth]

debug3: receive packet: type 50 [preauth]

debug1: userauth-request for user rodrigc service ssh-connection method publickey [preauth]

debug1: attempt 3 failures 1 [preauth]

debug2: input_userauth_request: try method publickey [preauth]

debug3: userauth_pubkey: have signature for RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc [preauth]

debug3: mm_key_allowed entering [preauth]

debug3: mm_request_send entering: type 22 [preauth]

debug3: mm_key_allowed: waiting for MONITOR_ANS_KEYALLOWED [preauth]

debug3: mm_request_receive_expect entering: type 23 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 22

debug3: mm_answer_keyallowed entering

debug3: mm_answer_keyallowed: key_from_blob: 0x80401b540

debug1: trying public key file /opt2/home/rodrigc/.ssh/authorized_keys

debug1: fd 4 clearing O_NONBLOCK

debug2: user_key_allowed: check options: 'ssh-dss AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug2: user_key_allowed: advance: 'AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug1: matching key found: file /opt2/home/rodrigc/.ssh/authorized_keys, line 2 RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc

debug3: mm_answer_keyallowed: key 0x80401b540 is allowed

debug3: mm_request_send entering: type 23

debug3: mm_key_verify entering [preauth]

debug3: mm_request_send entering: type 24 [preauth]

debug3: mm_key_verify: waiting for MONITOR_ANS_KEYVERIFY [preauth]

debug3: mm_request_receive_expect entering: type 25 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 24

debug3: mm_answer_keyverify: key 0x80401b540 signature verified

debug3: mm_request_send entering: type 25

debug3: mm_request_receive_expect entering: type 102

debug3: mm_request_receive entering

debug1: do_pam_account: called

debug3: PAM: do_pam_account pam_acct_mgmt = 0 (success)

debug3: mm_request_send entering: type 103

Accepted publickey for rodrigc from 192.168.1.5 port 58546 ssh2: RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc

debug1: monitor_child_preauth: rodrigc has been authenticated by privileged process

debug3: mm_get_keystate: Waiting for new keys

debug3: mm_request_receive_expect entering: type 26

debug3: mm_request_receive entering

debug3: mm_get_keystate: GOT new keys

debug2: userauth_pubkey: authenticated 1 pkalg rsa-sha2-512 [preauth]

debug3: mm_do_pam_account entering [preauth]

debug3: mm_request_send entering: type 102 [preauth]

debug3: mm_request_receive_expect entering: type 103 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_do_pam_account returning 1 [preauth]

debug3: send packet: type 52 [preauth]

debug3: mm_request_send entering: type 26 [preauth]

debug3: mm_send_keystate: Finished sending state [preauth]

debug1: monitor_read_log: child log fd closed

debug3: mm_share_sync: Share sync

debug3: mm_share_sync: Share sync end

debug3: ssh_sandbox_parent_finish: finished

debug1: PAM: establishing credentials

debug3: PAM: opening session

User child is on pid 68980

debug1: PAM: establishing credentials

debug3: monitor_apply_keystate: packet_set_state

debug2: set_newkeys: mode 0

debug1: rekey after 134217728 blocks

debug2: set_newkeys: mode 1

debug1: rekey after 134217728 blocks

debug1: ssh_packet_set_postauth: called

debug3: Fssh_ssh_packet_set_state: done

debug3: notify_hostkeys: key 0: ssh-rsa SHA256:73H4OcFhNGdHY2sVsbBOVVOudub2EkvfYNlwpxWM1Xw

debug3: notify_hostkeys: key 1: ssh-dss SHA256:6BQ11F0ejGONS1+d4O63t7fyyGKaEyW33a73x5G/3ic

debug3: notify_hostkeys: key 2: ecdsa-sha2-nistp256 SHA256:jkq3WG/EU+yyyg8xemPshcErRvPYmSbU202opbYgzHU

debug3: notify_hostkeys: key 3: ssh-ed25519 SHA256:59NbS+jIUH9ADjLpk5nQLKq229hrx89QpAd3Z3Ts6j4

debug3: notify_hostkeys: sent 4 hostkeys

debug3: send packet: type 80

debug1: Entering interactive session for SSH2.

debug2: fd 6 setting O_NONBLOCK

debug2: fd 7 setting O_NONBLOCK

debug1: server_init_dispatch_20

debug3: receive packet: type 90

debug1: server_input_channel_open: ctype session rchan 0 win 1048576 max 16384

debug1: input_session_request

debug1: channel 0: new [server-session]

debug2: session_new: allocate (allocated 0 max 10)

debug3: session_unused: session id 0 unused

debug1: session_new: session 0

debug1: session_open: channel 0

debug1: session_open: session 0: link with channel 0

debug1: server_input_channel_open: confirm session

debug3: send packet: type 91

debug3: receive packet: type 80

debug1: server_input_global_request: rtype no-more-sessions at openssh.com want_reply 0

debug3: receive packet: type 98

debug1: server_input_channel_req: channel 0 request pty-req reply 1

debug1: session_by_channel: session 0 channel 0

debug1: session_input_channel_req: session 0 req pty-req

debug1: Allocating pty.

debug3: mm_request_send entering: type 28

debug3: mm_pty_allocate: waiting for MONITOR_ANS_PTY

debug3: mm_request_receive_expect entering: type 29

debug3: mm_request_receive entering

debug3: mm_request_receive entering

debug3: monitor_read: checking request 28

debug3: mm_answer_pty entering

debug2: session_new: allocate (allocated 0 max 10)

debug3: session_unused: session id 0 unused

debug1: session_new: session 0

debug3: mm_request_send entering: type 29

debug3: mm_answer_pty: tty /dev/pts/4 ptyfd 5

debug1: session_pty_req: session 0 alloc /dev/pts/4

debug3: send packet: type 99

debug3: receive packet: type 98

debug1: server_input_channel_req: channel 0 request env reply 0

debug1: session_by_channel: session 0 channel 0

debug1: session_input_channel_req: session 0 req env

debug2: Ignoring env request LANG: disallowed name

debug3: receive packet: type 98

debug1: server_input_channel_req: channel 0 request shell reply 1

debug1: session_by_channel: session 0 channel 0

debug1: session_input_channel_req: session 0 req shell

Starting session: shell on pts/4 for rodrigc from 192.168.1.5 port 58546 id 0

debug2: fd 3 setting TCP_NODELAY

debug3: Fssh_ssh_packet_set_tos: set IP_TOS 0x10

debug2: channel 0: rfd 10 isatty

debug2: fd 10 setting O_NONBLOCK

debug3: fd 8 is O_NONBLOCK

debug3: send packet: type 99

debug1: Setting controlling tty using TIOCSCTTY.

debug2: channel 0: read<=0 rfd 10 len 0

debug2: channel 0: read failed

debug2: channel 0: close_read

debug2: channel 0: input open -> drain

debug2: channel 0: ibuf empty

debug2: channel 0: send eof

debug3: send packet: type 96

debug2: channel 0: input drain -> closed

debug1: Received SIGCHLD.

debug1: session_by_pid: pid 68981

debug1: session_exit_message: session 0 channel 0 pid 68981

debug2: channel 0: request exit-status confirm 0

debug3: send packet: type 98

debug1: session_exit_message: release channel 0

debug2: channel 0: write failed

debug2: channel 0: close_write

debug2: channel 0: send eow

debug3: send packet: type 98

debug2: channel 0: output open -> closed

debug3: mm_request_send entering: type 30

debug2: channel 0: send close

debug3: send packet: type 97

debug3: channel 0: will not send data after close

debug2: notify_done: reading

debug3: mm_request_receive entering

debug3: channel 0: will not send data after close

debug3: monitor_read: checking request 30

debug3: mm_answer_pty_cleanup entering

debug1: session_by_tty: session 0 tty /dev/pts/4

debug3: mm_session_close: session 0 pid 68980

debug3: mm_session_close: tty /dev/pts/4 ptyfd 5

debug1: session_pty_cleanup: session 0 release /dev/pts/4

debug3: session_unused: session id 0 unused

debug3: receive packet: type 97

debug2: channel 0: rcvd close

debug3: channel 0: will not send data after close

debug2: channel 0: is dead

debug2: channel 0: gc: notify user

debug1: session_by_channel: session 0 channel 0

debug1: session_close_by_channel: channel 0 child 0

Close session: user rodrigc from 192.168.1.5 port 58546 id 0

debug3: session_unused: session id 0 unused

debug2: channel 0: gc: user detached

debug2: channel 0: is dead

debug2: channel 0: garbage collecting

debug1: channel 0: free: server-session, nchannels 1

debug3: channel 0: status: The following connections are open:

  #0 server-session (t4 r0 i3/0 o3/0 fd -1/-1 cc -1)



debug3: receive packet: type 1

Received disconnect from 192.168.1.5 port 58546:11: disconnected by user

Disconnected from 192.168.1.5 port 58546

debug1: do_cleanup

debug3: PAM: sshpam_thread_cleanup entering

debug3: mm_request_receive entering

debug1: do_cleanup

debug1: PAM: cleanup

debug1: PAM: closing session

debug1: PAM: deleting credentials

debug3: PAM: sshpam_thread_cleanup entering


Command exit status: 255
Script done on Tue Dec 20 18:50:47 2016

From rodrigc at crodrigues.org  Tue Dec 20 20:56:06 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 20 Dec 2016 19:56:06 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <CAG=rPVdiZSq4N+vx7na2yJMaNwh=AgUoNDBgBq_jNsXs+ghsOA@mail.gmail.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <CAG=rPVc-ahNjN+br2MV-S5rTng71Y1jvR94oXJaZed+CZhskxw@mail.gmail.com>
 <E464AABC-DB66-44E6-9482-594254B907EA@twistedmatrix.com>
 <CAG=rPVdKNnD-gs3Aj+20HG-5BLJOmh7KEPUab5fD2A6P=ME96Q@mail.gmail.com>
 <720D721B-8360-43BE-8371-2DE572E18DF4@twistedmatrix.com>
 <CAG=rPVe1=ZWf19tFbJxuvLzpB62w5JSXf+cJ7hFYC83Xac7c=A@mail.gmail.com>
 <A224B127-D889-485E-8007-3D16592305E6@twistedmatrix.com>
 <CAG=rPVdiZSq4N+vx7na2yJMaNwh=AgUoNDBgBq_jNsXs+ghsOA@mail.gmail.com>
Message-ID: <CAG=rPVehfLoCvi4_onFk0MjnPr__Kafm3or=OfmRYLgvvC4EYw@mail.gmail.com>

On Tue, Dec 20, 2016 at 7:32 PM, Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

> On Tue, Dec 20, 2016 at 6:24 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
> wrote:
>
>>
>>
>
>>
>> So... is this because buildbot.twistedmatrix.com has an RSA key as well,
>> and when it offers it, our checking isn't correctly comparing the type
>> before deciding that it doesn't match, or allowing for multiple keys?  I
>> notice that if I manually add the RSA key and delete the ECDSA key it seems
>> to work.
>>
>> -g
>>
>>
>
> Yes, that is part of it.
> What is happening is that the conch client sends a MSG_KEXINIT
> packet to the server to negotatiate what the host key should be.
> If I use an OpenSSH ssh client to connect to OpenSSH sshd server,
> the negotiated host key algorithm is ecdsa-sha2-nistp256.
>
> If I use a conch client to connect to the OpenSSH sshd server,
> the negotiated host key algorithm is ssh-rsa.
>
> I started a test instance of the sshd server with:
>
> /usr/sbin/sshd -p 9000 -d -d -d
>
> and captured the logs (see attached).
>
> I think some problems are:
>   (1)  conch proposes a list of *host key algorithms* in a different
> order than
>          OpenSSH.  It shouldn't matter, but conch proposes ssh-rsa first,
>          while OpenSSH proposes it last.
>   (2)  OpenSSH client seems to be able to receive multiple host keys back
>          from the server, and can match the one it has.
>
> --
> Craig
>
>
Here are the proper logs.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161220/cf5edc71/attachment-0001.html>
-------------- next part --------------
Script started on Tue Dec 20 18:50:57 2016
Command: /usr/sbin/sshd -p 9000 -d -d -d
debug2: load_server_config: filename /etc/ssh/sshd_config

debug2: load_server_config: done config len = 197

debug2: parse_server_config: config /etc/ssh/sshd_config len 197

debug3: /etc/ssh/sshd_config:49 setting PermitRootLogin yes

debug3: /etc/ssh/sshd_config:131 setting Subsystem sftp	/usr/libexec/sftp-server

debug1: sshd version OpenSSH_7.2, OpenSSL 1.0.2j-freebsd  26 Sep 2016

debug1: private host key #0: ssh-rsa SHA256:73H4OcFhNGdHY2sVsbBOVVOudub2EkvfYNlwpxWM1Xw

debug1: private host key #1: ssh-dss SHA256:6BQ11F0ejGONS1+d4O63t7fyyGKaEyW33a73x5G/3ic

debug1: private host key #2: ecdsa-sha2-nistp256 SHA256:jkq3WG/EU+yyyg8xemPshcErRvPYmSbU202opbYgzHU

debug1: private host key #3: ssh-ed25519 SHA256:59NbS+jIUH9ADjLpk5nQLKq229hrx89QpAd3Z3Ts6j4

debug1: rexec_argv[0]='/usr/sbin/sshd'

debug1: rexec_argv[1]='-p'

debug1: rexec_argv[2]='9000'

debug1: rexec_argv[3]='-d'

debug1: rexec_argv[4]='-d'

debug1: rexec_argv[5]='-d'

debug2: fd 3 setting O_NONBLOCK

debug3: Fssh_sock_set_v6only: set socket 3 IPV6_V6ONLY

debug1: Bind to port 9000 on ::.

debug1: Server TCP RWIN socket size: 65536

Server listening on :: port 9000.

debug2: fd 4 setting O_NONBLOCK

debug1: Bind to port 9000 on 0.0.0.0.

debug1: Server TCP RWIN socket size: 65536

Server listening on 0.0.0.0 port 9000.

debug1: fd 5 clearing O_NONBLOCK

debug1: Server will not fork when running in debugging mode.

debug3: send_rexec_state: entering fd = 8 config len 197

debug3: ssh_msg_send: type 0

debug3: send_rexec_state: done

debug1: rexec start in 5 out 5 newsock 5 pipe -1 sock 8

debug1: inetd sockets after dupping: 3, 3

debug1: res_init()

Connection from 192.168.1.5 port 58547 on 192.168.1.2 port 9000

debug1: Client protocol version 2.0; client software version Twisted

debug1: no match: Twisted

debug1: Enabling compatibility mode for protocol 2.0

debug1: Local version string SSH-2.0-OpenSSH_7.2 FreeBSD-20160310

debug2: fd 3 setting O_NONBLOCK

debug3: ssh_sandbox_init: preparing capsicum sandbox

debug2: Network child is on pid 69006

debug3: preauth child monitor started

debug3: privsep user:group 22:22 [preauth]

debug1: permanently_set_uid: 22/22 [preauth]

debug3: list_hostkey_types: ssh-dss key not permitted by HostkeyAlgorithms [preauth]

debug1: list_hostkey_types: ssh-rsa,rsa-sha2-512,rsa-sha2-256,ecdsa-sha2-nistp256,ssh-ed25519 [preauth]

debug3: send packet: type 20 [preauth]

debug1: SSH2_MSG_KEXINIT sent [preauth]

debug3: receive packet: type 20 [preauth]

debug1: SSH2_MSG_KEXINIT received [preauth]

debug2: local server KEXINIT proposal [preauth]

debug2: KEX algorithms: curve25519-sha256 at libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1 [preauth]

debug2: host key algorithms: ssh-rsa,rsa-sha2-512,rsa-sha2-256,ecdsa-sha2-nistp256,ssh-ed25519 [preauth]

debug2: ciphers ctos: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc [preauth]

debug2: ciphers stoc: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc [preauth]

debug2: MACs ctos: umac-64-etm at openssh.com,umac-128-etm at openssh.com,hmac-sha2-256-etm at openssh.com,hmac-sha2-512-etm at openssh.com,hmac-sha1-etm at openssh.com,umac-64 at openssh.com,umac-128 at openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 [preauth]

debug2: MACs stoc: umac-64-etm at openssh.com,umac-128-etm at openssh.com,hmac-sha2-256-etm at openssh.com,hmac-sha2-512-etm at openssh.com,hmac-sha1-etm at openssh.com,umac-64 at openssh.com,umac-128 at openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 [preauth]

debug2: compression ctos: none,zlib at openssh.com [preauth]

debug2: compression stoc: none,zlib at openssh.com [preauth]

debug2: languages ctos:  [preauth]

debug2: languages stoc:  [preauth]

debug2: first_kex_follows 0  [preauth]

debug2: reserved 0  [preauth]

debug2: peer client KEXINIT proposal [preauth]

debug2: KEX algorithms: ecdh-sha2-nistp224,ecdh-sha2-nistp256,ecdh-sha2-nistk233,ecdh-sha2-nistb233,ecdh-sha2-nistk163,ecdh-sha2-nistp384,ecdh-sha2-nistk409,ecdh-sha2-nistk283,ecdh-sha2-nistb409,ecdh-sha2-nistt571,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group1-sha1,diffie-hellman-group14-sha1 [preauth]

debug2: host key algorithms: ssh-rsa,ssh-dss,ecdsa-sha2-nistp224,ecdsa-sha2-nistp256,ecdsa-sha2-nistk233,ecdsa-sha2-nistb233,ecdsa-sha2-nistk163,ecdsa-sha2-nistp384,ecdsa-sha2-nistk409,ecdsa-sha2-nistk283,ecdsa-sha2-nistb409,ecdsa-sha2-nistt571,ecdsa-sha2-nistp521 [preauth]

debug2: ciphers ctos: aes256-ctr,aes256-cbc,aes192-ctr,aes192-cbc,aes128-ctr,aes128-cbc,cast128-ctr,cast128-cbc,blowfish-cbc,3des-cbc [preauth]

debug2: ciphers stoc: aes256-ctr,aes256-cbc,aes192-ctr,aes192-cbc,aes128-ctr,aes128-cbc,cast128-ctr,cast128-cbc,blowfish-cbc,3des-cbc [preauth]

debug2: MACs ctos: hmac-sha2-512,hmac-sha2-384,hmac-sha2-256,hmac-sha1,hmac-md5 [preauth]

debug2: MACs stoc: hmac-sha2-512,hmac-sha2-384,hmac-sha2-256,hmac-sha1,hmac-md5 [preauth]

debug2: compression ctos: none,zlib [preauth]

debug2: compression stoc: none,zlib [preauth]

debug2: languages ctos:  [preauth]

debug2: languages stoc:  [preauth]

debug2: first_kex_follows 0  [preauth]

debug2: reserved 0  [preauth]

debug1: kex: algorithm: ecdh-sha2-nistp256 [preauth]

debug1: kex: host key algorithm: ssh-rsa [preauth]

debug1: kex: client->server cipher: aes256-ctr MAC: hmac-sha2-512 compression: none [preauth]

debug1: kex: server->client cipher: aes256-ctr MAC: hmac-sha2-512 compression: none [preauth]

debug1: expecting SSH2_MSG_KEX_ECDH_INIT [preauth]

debug3: receive packet: type 30 [preauth]

debug3: mm_key_sign entering [preauth]

debug3: mm_request_send entering: type 6 [preauth]

debug3: mm_key_sign: waiting for MONITOR_ANS_SIGN [preauth]

debug3: mm_request_receive_expect entering: type 7 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 6

debug3: mm_answer_sign

debug3: mm_answer_sign: hostkey proof signature 0x804079b40(271)

debug3: mm_request_send entering: type 7

debug2: monitor_read: 6 used once, disabling now

debug3: send packet: type 31 [preauth]

debug3: send packet: type 21 [preauth]

debug2: set_newkeys: mode 1 [preauth]

debug1: rekey after 4294967296 blocks [preauth]

debug1: SSH2_MSG_NEWKEYS sent [preauth]

debug1: expecting SSH2_MSG_NEWKEYS [preauth]

debug3: receive packet: type 1 [preauth]

Received disconnect from 192.168.1.5 port 58547:9: bbbad host key [preauth]

Disconnected from 192.168.1.5 port 58547 [preauth]

debug1: do_cleanup [preauth]

debug3: PAM: sshpam_thread_cleanup entering [preauth]

debug1: monitor_read_log: child log fd closed

debug3: mm_request_receive entering

debug1: do_cleanup

debug3: PAM: sshpam_thread_cleanup entering

debug1: Killing privsep child 69006


Command exit status: 255
Script done on Tue Dec 20 18:51:03 2016
-------------- next part --------------
Script started on Tue Dec 20 18:50:42 2016
Command: /usr/sbin/sshd -p 9000 -d -d -d
debug2: load_server_config: filename /etc/ssh/sshd_config

debug2: load_server_config: done config len = 197

debug2: parse_server_config: config /etc/ssh/sshd_config len 197

debug3: /etc/ssh/sshd_config:49 setting PermitRootLogin yes

debug3: /etc/ssh/sshd_config:131 setting Subsystem sftp	/usr/libexec/sftp-server

debug1: sshd version OpenSSH_7.2, OpenSSL 1.0.2j-freebsd  26 Sep 2016

debug1: private host key #0: ssh-rsa SHA256:73H4OcFhNGdHY2sVsbBOVVOudub2EkvfYNlwpxWM1Xw

debug1: private host key #1: ssh-dss SHA256:6BQ11F0ejGONS1+d4O63t7fyyGKaEyW33a73x5G/3ic

debug1: private host key #2: ecdsa-sha2-nistp256 SHA256:jkq3WG/EU+yyyg8xemPshcErRvPYmSbU202opbYgzHU

debug1: private host key #3: ssh-ed25519 SHA256:59NbS+jIUH9ADjLpk5nQLKq229hrx89QpAd3Z3Ts6j4

debug1: rexec_argv[0]='/usr/sbin/sshd'

debug1: rexec_argv[1]='-p'

debug1: rexec_argv[2]='9000'

debug1: rexec_argv[3]='-d'

debug1: rexec_argv[4]='-d'

debug1: rexec_argv[5]='-d'

debug2: fd 3 setting O_NONBLOCK

debug3: Fssh_sock_set_v6only: set socket 3 IPV6_V6ONLY

debug1: Bind to port 9000 on ::.

debug1: Server TCP RWIN socket size: 65536

Server listening on :: port 9000.

debug2: fd 4 setting O_NONBLOCK

debug1: Bind to port 9000 on 0.0.0.0.

debug1: Server TCP RWIN socket size: 65536

Server listening on 0.0.0.0 port 9000.

debug1: fd 5 clearing O_NONBLOCK

debug1: Server will not fork when running in debugging mode.

debug3: send_rexec_state: entering fd = 8 config len 197

debug3: ssh_msg_send: type 0

debug3: send_rexec_state: done

debug1: rexec start in 5 out 5 newsock 5 pipe -1 sock 8

debug1: inetd sockets after dupping: 3, 3

debug1: res_init()

Connection from 192.168.1.5 port 58546 on 192.168.1.2 port 9000

debug1: Client protocol version 2.0; client software version OpenSSH_7.2

debug1: match: OpenSSH_7.2 pat OpenSSH* compat 0x04000000

debug1: Enabling compatibility mode for protocol 2.0

debug1: Local version string SSH-2.0-OpenSSH_7.2 FreeBSD-20160310

debug2: fd 3 setting O_NONBLOCK

debug3: ssh_sandbox_init: preparing capsicum sandbox

debug2: Network child is on pid 68979

debug3: preauth child monitor started

debug3: privsep user:group 22:22 [preauth]

debug1: permanently_set_uid: 22/22 [preauth]

debug3: list_hostkey_types: ssh-dss key not permitted by HostkeyAlgorithms [preauth]

debug1: list_hostkey_types: ssh-rsa,rsa-sha2-512,rsa-sha2-256,ecdsa-sha2-nistp256,ssh-ed25519 [preauth]

debug3: send packet: type 20 [preauth]

debug1: SSH2_MSG_KEXINIT sent [preauth]

debug3: receive packet: type 20 [preauth]

debug1: SSH2_MSG_KEXINIT received [preauth]

debug2: local server KEXINIT proposal [preauth]

debug2: KEX algorithms: curve25519-sha256 at libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1 [preauth]

debug2: host key algorithms: ssh-rsa,rsa-sha2-512,rsa-sha2-256,ecdsa-sha2-nistp256,ssh-ed25519 [preauth]

debug2: ciphers ctos: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc [preauth]

debug2: ciphers stoc: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc [preauth]

debug2: MACs ctos: umac-64-etm at openssh.com,umac-128-etm at openssh.com,hmac-sha2-256-etm at openssh.com,hmac-sha2-512-etm at openssh.com,hmac-sha1-etm at openssh.com,umac-64 at openssh.com,umac-128 at openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 [preauth]

debug2: MACs stoc: umac-64-etm at openssh.com,umac-128-etm at openssh.com,hmac-sha2-256-etm at openssh.com,hmac-sha2-512-etm at openssh.com,hmac-sha1-etm at openssh.com,umac-64 at openssh.com,umac-128 at openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 [preauth]

debug2: compression ctos: none,zlib at openssh.com [preauth]

debug2: compression stoc: none,zlib at openssh.com [preauth]

debug2: languages ctos:  [preauth]

debug2: languages stoc:  [preauth]

debug2: first_kex_follows 0  [preauth]

debug2: reserved 0  [preauth]

debug2: peer client KEXINIT proposal [preauth]

debug2: KEX algorithms: curve25519-sha256 at libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,ext-info-c [preauth]

debug2: host key algorithms: ecdsa-sha2-nistp256-cert-v01 at openssh.com,ecdsa-sha2-nistp384-cert-v01 at openssh.com,ecdsa-sha2-nistp521-cert-v01 at openssh.com,ssh-ed25519-cert-v01 at openssh.com,ssh-rsa-cert-v01 at openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519,rsa-sha2-512,rsa-sha2-256,ssh-rsa [preauth]

debug2: ciphers ctos: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,3des-cbc [preauth]

debug2: ciphers stoc: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,3des-cbc [preauth]

debug2: MACs ctos: umac-64-etm at openssh.com,umac-128-etm at openssh.com,hmac-sha2-256-etm at openssh.com,hmac-sha2-512-etm at openssh.com,hmac-sha1-etm at openssh.com,umac-64 at openssh.com,umac-128 at openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 [preauth]

debug2: MACs stoc: umac-64-etm at openssh.com,umac-128-etm at openssh.com,hmac-sha2-256-etm at openssh.com,hmac-sha2-512-etm at openssh.com,hmac-sha1-etm at openssh.com,umac-64 at openssh.com,umac-128 at openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 [preauth]

debug2: compression ctos: none,zlib at openssh.com,zlib [preauth]

debug2: compression stoc: none,zlib at openssh.com,zlib [preauth]

debug2: languages ctos:  [preauth]

debug2: languages stoc:  [preauth]

debug2: first_kex_follows 0  [preauth]

debug2: reserved 0  [preauth]

debug1: kex: algorithm: curve25519-sha256 at libssh.org [preauth]

debug1: kex: host key algorithm: ecdsa-sha2-nistp256 [preauth]

debug1: kex: client->server cipher: chacha20-poly1305 at openssh.com MAC: <implicit> compression: none [preauth]

debug1: kex: server->client cipher: chacha20-poly1305 at openssh.com MAC: <implicit> compression: none [preauth]

debug1: expecting SSH2_MSG_KEX_ECDH_INIT [preauth]

debug3: receive packet: type 30 [preauth]

debug3: mm_key_sign entering [preauth]

debug3: mm_request_send entering: type 6 [preauth]

debug3: mm_key_sign: waiting for MONITOR_ANS_SIGN [preauth]

debug3: mm_request_receive_expect entering: type 7 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 6

debug3: mm_answer_sign

debug3: mm_answer_sign: hostkey proof signature 0x8040411c0(99)

debug3: mm_request_send entering: type 7

debug2: monitor_read: 6 used once, disabling now

debug3: send packet: type 31 [preauth]

debug3: send packet: type 21 [preauth]

debug2: set_newkeys: mode 1 [preauth]

debug1: rekey after 134217728 blocks [preauth]

debug1: SSH2_MSG_NEWKEYS sent [preauth]

debug1: expecting SSH2_MSG_NEWKEYS [preauth]

debug3: send packet: type 7 [preauth]

debug3: receive packet: type 21 [preauth]

debug2: set_newkeys: mode 0 [preauth]

debug1: rekey after 134217728 blocks [preauth]

debug1: SSH2_MSG_NEWKEYS received [preauth]

debug1: KEX done [preauth]

debug3: receive packet: type 5 [preauth]

debug3: send packet: type 6 [preauth]

debug3: receive packet: type 50 [preauth]

debug3: Trying to reverse map address 192.168.1.5. [preauth]

debug1: userauth-request for user rodrigc service ssh-connection method none [preauth]

debug1: attempt 0 failures 0 [preauth]

debug3: mm_getpwnamallow entering [preauth]

debug3: mm_request_send entering: type 8 [preauth]

debug3: mm_getpwnamallow: waiting for MONITOR_ANS_PWNAM [preauth]

debug3: mm_request_receive_expect entering: type 9 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 8

debug3: mm_answer_pwnamallow

debug3: Trying to reverse map address 192.168.1.5.

debug2: parse_server_config: config reprocess config len 197

debug3: mm_answer_pwnamallow: sending MONITOR_ANS_PWNAM: 1

debug3: mm_request_send entering: type 9

debug2: monitor_read: 8 used once, disabling now

debug2: input_userauth_request: setting up authctxt for rodrigc [preauth]

debug3: mm_start_pam entering [preauth]

debug3: mm_request_send entering: type 100 [preauth]

debug3: mm_inform_authserv entering [preauth]

debug3: mm_request_send entering: type 4 [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 100

debug1: PAM: initializing for "rodrigc"

debug1: PAM: setting PAM_RHOST to "192.168.1.5"

debug2: monitor_read: 100 used once, disabling now

debug2: input_userauth_request: try method none [preauth]

debug3: userauth_finish: failure partial=0 next methods="publickey,keyboard-interactive" [preauth]

debug3: send packet: type 51 [preauth]

debug3: receive packet: type 50 [preauth]

debug1: userauth-request for user rodrigc service ssh-connection method publickey [preauth]

debug1: attempt 1 failures 0 [preauth]

debug2: input_userauth_request: try method publickey [preauth]

debug1: userauth_pubkey: test whether pkalg/pkblob are acceptable for RSA SHA256:m2nfEMZA8SWbLCwY40QzK5CSxEAuW0H+aUC4g8jOWFo [preauth]

debug3: mm_key_allowed entering [preauth]

debug3: mm_request_send entering: type 22 [preauth]

debug3: mm_key_allowed: waiting for MONITOR_ANS_KEYALLOWED [preauth]

debug3: mm_request_receive_expect entering: type 23 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 4

debug3: mm_answer_authserv: service=ssh-connection, style=

debug2: monitor_read: 4 used once, disabling now

debug3: mm_request_receive entering

debug3: monitor_read: checking request 22

debug3: mm_answer_keyallowed entering

debug3: mm_answer_keyallowed: key_from_blob: 0x80401b540

debug1: trying public key file /opt2/home/rodrigc/.ssh/authorized_keys

debug1: fd 4 clearing O_NONBLOCK

debug2: user_key_allowed: check options: 'ssh-dss AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug2: user_key_allowed: advance: 'AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug2: key not found

debug1: trying public key file /opt2/home/rodrigc/.ssh/authorized_keys2

debug1: Could not open authorized keys '/opt2/home/rodrigc/.ssh/authorized_keys2': No such file or directory

Failed publickey for rodrigc from 192.168.1.5 port 58546 ssh2: RSA SHA256:m2nfEMZA8SWbLCwY40QzK5CSxEAuW0H+aUC4g8jOWFo

debug3: mm_answer_keyallowed: key 0x80401b540 is not allowed

debug3: mm_request_send entering: type 23

debug2: userauth_pubkey: authenticated 0 pkalg rsa-sha2-512 [preauth]

debug3: userauth_finish: failure partial=0 next methods="publickey,keyboard-interactive" [preauth]

debug3: send packet: type 51 [preauth]

debug3: receive packet: type 50 [preauth]

debug1: userauth-request for user rodrigc service ssh-connection method publickey [preauth]

debug1: attempt 2 failures 1 [preauth]

debug2: input_userauth_request: try method publickey [preauth]

debug1: userauth_pubkey: test whether pkalg/pkblob are acceptable for RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc [preauth]

debug3: mm_key_allowed entering [preauth]

debug3: mm_request_send entering: type 22 [preauth]

debug3: mm_key_allowed: waiting for MONITOR_ANS_KEYALLOWED [preauth]

debug3: mm_request_receive_expect entering: type 23 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 22

debug3: mm_answer_keyallowed entering

debug3: mm_answer_keyallowed: key_from_blob: 0x80401b540

debug1: trying public key file /opt2/home/rodrigc/.ssh/authorized_keys

debug1: fd 4 clearing O_NONBLOCK

debug2: user_key_allowed: check options: 'ssh-dss AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug2: user_key_allowed: advance: 'AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug1: matching key found: file /opt2/home/rodrigc/.ssh/authorized_keys, line 2 RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc

debug3: mm_answer_keyallowed: key 0x80401b540 is allowed

debug3: mm_request_send entering: type 23

debug3: send packet: type 60 [preauth]

debug2: userauth_pubkey: authenticated 0 pkalg rsa-sha2-512 [preauth]

Postponed publickey for rodrigc from 192.168.1.5 port 58546 ssh2 [preauth]

debug3: receive packet: type 50 [preauth]

debug1: userauth-request for user rodrigc service ssh-connection method publickey [preauth]

debug1: attempt 3 failures 1 [preauth]

debug2: input_userauth_request: try method publickey [preauth]

debug3: userauth_pubkey: have signature for RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc [preauth]

debug3: mm_key_allowed entering [preauth]

debug3: mm_request_send entering: type 22 [preauth]

debug3: mm_key_allowed: waiting for MONITOR_ANS_KEYALLOWED [preauth]

debug3: mm_request_receive_expect entering: type 23 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 22

debug3: mm_answer_keyallowed entering

debug3: mm_answer_keyallowed: key_from_blob: 0x80401b540

debug1: trying public key file /opt2/home/rodrigc/.ssh/authorized_keys

debug1: fd 4 clearing O_NONBLOCK

debug2: user_key_allowed: check options: 'ssh-dss AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug2: user_key_allowed: advance: 'AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug1: matching key found: file /opt2/home/rodrigc/.ssh/authorized_keys, line 2 RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc

debug3: mm_answer_keyallowed: key 0x80401b540 is allowed

debug3: mm_request_send entering: type 23

debug3: mm_key_verify entering [preauth]

debug3: mm_request_send entering: type 24 [preauth]

debug3: mm_key_verify: waiting for MONITOR_ANS_KEYVERIFY [preauth]

debug3: mm_request_receive_expect entering: type 25 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 24

debug3: mm_answer_keyverify: key 0x80401b540 signature verified

debug3: mm_request_send entering: type 25

debug3: mm_request_receive_expect entering: type 102

debug3: mm_request_receive entering

debug1: do_pam_account: called

debug3: PAM: do_pam_account pam_acct_mgmt = 0 (success)

debug3: mm_request_send entering: type 103

Accepted publickey for rodrigc from 192.168.1.5 port 58546 ssh2: RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc

debug1: monitor_child_preauth: rodrigc has been authenticated by privileged process

debug3: mm_get_keystate: Waiting for new keys

debug3: mm_request_receive_expect entering: type 26

debug3: mm_request_receive entering

debug3: mm_get_keystate: GOT new keys

debug2: userauth_pubkey: authenticated 1 pkalg rsa-sha2-512 [preauth]

debug3: mm_do_pam_account entering [preauth]

debug3: mm_request_send entering: type 102 [preauth]

debug3: mm_request_receive_expect entering: type 103 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_do_pam_account returning 1 [preauth]

debug3: send packet: type 52 [preauth]

debug3: mm_request_send entering: type 26 [preauth]

debug3: mm_send_keystate: Finished sending state [preauth]

debug1: monitor_read_log: child log fd closed

debug3: mm_share_sync: Share sync

debug3: mm_share_sync: Share sync end

debug3: ssh_sandbox_parent_finish: finished

debug1: PAM: establishing credentials

debug3: PAM: opening session

User child is on pid 68980

debug1: PAM: establishing credentials

debug3: monitor_apply_keystate: packet_set_state

debug2: set_newkeys: mode 0

debug1: rekey after 134217728 blocks

debug2: set_newkeys: mode 1

debug1: rekey after 134217728 blocks

debug1: ssh_packet_set_postauth: called

debug3: Fssh_ssh_packet_set_state: done

debug3: notify_hostkeys: key 0: ssh-rsa SHA256:73H4OcFhNGdHY2sVsbBOVVOudub2EkvfYNlwpxWM1Xw

debug3: notify_hostkeys: key 1: ssh-dss SHA256:6BQ11F0ejGONS1+d4O63t7fyyGKaEyW33a73x5G/3ic

debug3: notify_hostkeys: key 2: ecdsa-sha2-nistp256 SHA256:jkq3WG/EU+yyyg8xemPshcErRvPYmSbU202opbYgzHU

debug3: notify_hostkeys: key 3: ssh-ed25519 SHA256:59NbS+jIUH9ADjLpk5nQLKq229hrx89QpAd3Z3Ts6j4

debug3: notify_hostkeys: sent 4 hostkeys

debug3: send packet: type 80

debug1: Entering interactive session for SSH2.

debug2: fd 6 setting O_NONBLOCK

debug2: fd 7 setting O_NONBLOCK

debug1: server_init_dispatch_20

debug3: receive packet: type 90

debug1: server_input_channel_open: ctype session rchan 0 win 1048576 max 16384

debug1: input_session_request

debug1: channel 0: new [server-session]

debug2: session_new: allocate (allocated 0 max 10)

debug3: session_unused: session id 0 unused

debug1: session_new: session 0

debug1: session_open: channel 0

debug1: session_open: session 0: link with channel 0

debug1: server_input_channel_open: confirm session

debug3: send packet: type 91

debug3: receive packet: type 80

debug1: server_input_global_request: rtype no-more-sessions at openssh.com want_reply 0

debug3: receive packet: type 98

debug1: server_input_channel_req: channel 0 request pty-req reply 1

debug1: session_by_channel: session 0 channel 0

debug1: session_input_channel_req: session 0 req pty-req

debug1: Allocating pty.

debug3: mm_request_send entering: type 28

debug3: mm_pty_allocate: waiting for MONITOR_ANS_PTY

debug3: mm_request_receive_expect entering: type 29

debug3: mm_request_receive entering

debug3: mm_request_receive entering

debug3: monitor_read: checking request 28

debug3: mm_answer_pty entering

debug2: session_new: allocate (allocated 0 max 10)

debug3: session_unused: session id 0 unused

debug1: session_new: session 0

debug3: mm_request_send entering: type 29

debug3: mm_answer_pty: tty /dev/pts/4 ptyfd 5

debug1: session_pty_req: session 0 alloc /dev/pts/4

debug3: send packet: type 99

debug3: receive packet: type 98

debug1: server_input_channel_req: channel 0 request env reply 0

debug1: session_by_channel: session 0 channel 0

debug1: session_input_channel_req: session 0 req env

debug2: Ignoring env request LANG: disallowed name

debug3: receive packet: type 98

debug1: server_input_channel_req: channel 0 request shell reply 1

debug1: session_by_channel: session 0 channel 0

debug1: session_input_channel_req: session 0 req shell

Starting session: shell on pts/4 for rodrigc from 192.168.1.5 port 58546 id 0

debug2: fd 3 setting TCP_NODELAY

debug3: Fssh_ssh_packet_set_tos: set IP_TOS 0x10

debug2: channel 0: rfd 10 isatty

debug2: fd 10 setting O_NONBLOCK

debug3: fd 8 is O_NONBLOCK

debug3: send packet: type 99

debug1: Setting controlling tty using TIOCSCTTY.

debug2: channel 0: read<=0 rfd 10 len 0

debug2: channel 0: read failed

debug2: channel 0: close_read

debug2: channel 0: input open -> drain

debug2: channel 0: ibuf empty

debug2: channel 0: send eof

debug3: send packet: type 96

debug2: channel 0: input drain -> closed

debug1: Received SIGCHLD.

debug1: session_by_pid: pid 68981

debug1: session_exit_message: session 0 channel 0 pid 68981

debug2: channel 0: request exit-status confirm 0

debug3: send packet: type 98

debug1: session_exit_message: release channel 0

debug2: channel 0: write failed

debug2: channel 0: close_write

debug2: channel 0: send eow

debug3: send packet: type 98

debug2: channel 0: output open -> closed

debug3: mm_request_send entering: type 30

debug2: channel 0: send close

debug3: send packet: type 97

debug3: channel 0: will not send data after close

debug2: notify_done: reading

debug3: mm_request_receive entering

debug3: channel 0: will not send data after close

debug3: monitor_read: checking request 30

debug3: mm_answer_pty_cleanup entering

debug1: session_by_tty: session 0 tty /dev/pts/4

debug3: mm_session_close: session 0 pid 68980

debug3: mm_session_close: tty /dev/pts/4 ptyfd 5

debug1: session_pty_cleanup: session 0 release /dev/pts/4

debug3: session_unused: session id 0 unused

debug3: receive packet: type 97

debug2: channel 0: rcvd close

debug3: channel 0: will not send data after close

debug2: channel 0: is dead

debug2: channel 0: gc: notify user

debug1: session_by_channel: session 0 channel 0

debug1: session_close_by_channel: channel 0 child 0

Close session: user rodrigc from 192.168.1.5 port 58546 id 0

debug3: session_unused: session id 0 unused

debug2: channel 0: gc: user detached

debug2: channel 0: is dead

debug2: channel 0: garbage collecting

debug1: channel 0: free: server-session, nchannels 1

debug3: channel 0: status: The following connections are open:

  #0 server-session (t4 r0 i3/0 o3/0 fd -1/-1 cc -1)



debug3: receive packet: type 1

Received disconnect from 192.168.1.5 port 58546:11: disconnected by user

Disconnected from 192.168.1.5 port 58546

debug1: do_cleanup

debug3: PAM: sshpam_thread_cleanup entering

debug3: mm_request_receive entering

debug1: do_cleanup

debug1: PAM: cleanup

debug1: PAM: closing session

debug1: PAM: deleting credentials

debug3: PAM: sshpam_thread_cleanup entering


Command exit status: 255
Script done on Tue Dec 20 18:50:47 2016

From glyph at twistedmatrix.com  Wed Dec 21 17:45:40 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 21 Dec 2016 16:45:40 -0800
Subject: [Twisted-Python] hmac-sha2-512 - Corrupted MAC on input with
 OpenSSH
In-Reply-To: <7aa77b23.1f5e.1591f6015fc.Coremail.chenjianhappy2008@126.com>
References: <7aa77b23.1f5e.1591f6015fc.Coremail.chenjianhappy2008@126.com>
Message-ID: <9E235CCF-3098-4E57-99F2-870A9FED091E@twistedmatrix.com>

Hi Jianchen,

As I said on stack overflow, you will need to upgrade to a more recent version of Twisted to get a version with that bug fixed.  If it's still a problem in a current version, you'll need to provide more details, ideally a short SSCCE http://sscce.org explaining how to get a broken SSH server with conch.

Thanks for using Twisted & Conch - I hope a simple upgrade will fix it for you!

-glyph

> On Dec 20, 2016, at 7:15 PM, ?? <chenjianhappy2008 at 126.com> wrote:
> 
>  hi:
>     I write a SSH server with Twisted(15.5.0)  Conch.  But it  don't support hmac-sha2-512 MAC algorithms
> 
> .  However I see this problem has been fixed in https://twistedmatrix.com/trac/ticket/8108 <https://twistedmatrix.com/trac/ticket/8108> .  I asked the question in http://stackoverflow.com/questions/41254398/twisted-hmac-sha2-512-corrupted-mac-on-input-with-openssh <http://stackoverflow.com/questions/41254398/twisted-hmac-sha2-512-corrupted-mac-on-input-with-openssh> .
> Best regards,
> 
>  ---jianchen
> 
> 
> 
>  
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161221/2e291254/attachment.html>

From glyph at twistedmatrix.com  Wed Dec 21 17:46:34 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 21 Dec 2016 16:46:34 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <CAG=rPVdiZSq4N+vx7na2yJMaNwh=AgUoNDBgBq_jNsXs+ghsOA@mail.gmail.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <CAG=rPVc-ahNjN+br2MV-S5rTng71Y1jvR94oXJaZed+CZhskxw@mail.gmail.com>
 <E464AABC-DB66-44E6-9482-594254B907EA@twistedmatrix.com>
 <CAG=rPVdKNnD-gs3Aj+20HG-5BLJOmh7KEPUab5fD2A6P=ME96Q@mail.gmail.com>
 <720D721B-8360-43BE-8371-2DE572E18DF4@twistedmatrix.com>
 <CAG=rPVe1=ZWf19tFbJxuvLzpB62w5JSXf+cJ7hFYC83Xac7c=A@mail.gmail.com>
 <A224B127-D889-485E-8007-3D16592305E6@twistedmatrix.com>
 <CAG=rPVdiZSq4N+vx7na2yJMaNwh=AgUoNDBgBq_jNsXs+ghsOA@mail.gmail.com>
Message-ID: <7B22DAAB-497F-49EC-9E31-64C061F6C8FE@twistedmatrix.com>


> On Dec 20, 2016, at 7:32 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> On Tue, Dec 20, 2016 at 6:24 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
>  
> 
> So... is this because buildbot.twistedmatrix.com <http://buildbot.twistedmatrix.com/> has an RSA key as well, and when it offers it, our checking isn't correctly comparing the type before deciding that it doesn't match, or allowing for multiple keys?  I notice that if I manually add the RSA key and delete the ECDSA key it seems to work.
> 
> -g
> 
> 
> 
> Yes, that is part of it.
> What is happening is that the conch client sends a MSG_KEXINIT
> packet to the server to negotatiate what the host key should be.
> If I use an OpenSSH ssh client to connect to OpenSSH sshd server,
> the negotiated host key algorithm is ecdsa-sha2-nistp256.
> 
> If I use a conch client to connect to the OpenSSH sshd server,
> the negotiated host key algorithm is ssh-rsa.
> 
> I started a test instance of the sshd server with:
> 
> /usr/sbin/sshd -p 9000 -d -d -d
> 
> and captured the logs (see attached).
> 
> I think some problems are:
>   (1)  conch proposes a list of host key algorithms in a different order than
>          OpenSSH.  It shouldn't matter, but conch proposes ssh-rsa first,
>          while OpenSSH proposes it last.
>   (2)  OpenSSH client seems to be able to receive multiple host keys back
>          from the server, and can match the one it has.

Can you file a new ticket for each of these?  The ordering thing seems super low priority, but not being able to receive multiple host keys is definitely a spec violation.

Thanks for figuring it out,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161221/2adc0b43/attachment.html>

From rodrigc at crodrigues.org  Wed Dec 21 18:40:19 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 21 Dec 2016 17:40:19 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <7B22DAAB-497F-49EC-9E31-64C061F6C8FE@twistedmatrix.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <CAG=rPVc-ahNjN+br2MV-S5rTng71Y1jvR94oXJaZed+CZhskxw@mail.gmail.com>
 <E464AABC-DB66-44E6-9482-594254B907EA@twistedmatrix.com>
 <CAG=rPVdKNnD-gs3Aj+20HG-5BLJOmh7KEPUab5fD2A6P=ME96Q@mail.gmail.com>
 <720D721B-8360-43BE-8371-2DE572E18DF4@twistedmatrix.com>
 <CAG=rPVe1=ZWf19tFbJxuvLzpB62w5JSXf+cJ7hFYC83Xac7c=A@mail.gmail.com>
 <A224B127-D889-485E-8007-3D16592305E6@twistedmatrix.com>
 <CAG=rPVdiZSq4N+vx7na2yJMaNwh=AgUoNDBgBq_jNsXs+ghsOA@mail.gmail.com>
 <7B22DAAB-497F-49EC-9E31-64C061F6C8FE@twistedmatrix.com>
Message-ID: <CAG=rPVdJFnfeytFZ0j8nYt8NhBAi5SQKmBy7c4aaQ=g_Gq4jTA@mail.gmail.com>

On Wed, Dec 21, 2016 at 4:46 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
>
> Can you file a new ticket for each of these?  The ordering thing seems
> super low priority, but not being able to receive multiple host keys is
> definitely a spec violation.
>
> Thanks for figuring it out,
>
>
Can you try these two patches, combined in one workspace ?

https://github.com/twisted/twisted/pull/640
https://github.com/twisted/twisted/pull/642

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161221/47ee97aa/attachment.html>

From chenjianhappy2008 at 126.com  Wed Dec 21 19:57:46 2016
From: chenjianhappy2008 at 126.com (=?GBK?B?s8K9oQ==?=)
Date: Thu, 22 Dec 2016 10:57:46 +0800 (CST)
Subject: [Twisted-Python] hmac-sha2-512 - Corrupted MAC on input with
 OpenSSH
In-Reply-To: <9E235CCF-3098-4E57-99F2-870A9FED091E@twistedmatrix.com>
References: <7aa77b23.1f5e.1591f6015fc.Coremail.chenjianhappy2008@126.com>
 <9E235CCF-3098-4E57-99F2-870A9FED091E@twistedmatrix.com>
Message-ID: <4995f3d9.3b42.15924768e27.Coremail.chenjianhappy2008@126.com>

thank you for your reply?I have updated to the latest version of Twisted 16.6.0, but the problem remains.  More detailed debugging information with -vvv in http://stackoverflow.com/questions/41254398/twisted-hmac-sha2-512-corrupted-mac-on-input-with-openssh  . I really do not know how to do it now.


Best regards,
---jianchen





At 2016-12-22 08:45:40, "Glyph Lefkowitz" <glyph at twistedmatrix.com> wrote:

Hi Jianchen,


As I said on stack overflow, you will need to upgrade to a more recent version of Twisted to get a version with that bug fixed.  If it's still a problem in a current version, you'll need to provide more details, ideally a short SSCCE http://sscce.org explaining how to get a broken SSH server with conch.


Thanks for using Twisted & Conch - I hope a simple upgrade will fix it for you!


-glyph


On Dec 20, 2016, at 7:15 PM, ?? <chenjianhappy2008 at 126.com> wrote:


 hi:
|
|

    I write a SSH server with Twisted(15.5.0)  Conch.  But it  don't support hmac-sha2-512 MAC algorithms

|
.  However I see this problem has been fixed in https://twistedmatrix.com/trac/ticket/8108 .  I asked the question in http://stackoverflow.com/questions/41254398/twisted-hmac-sha2-512-corrupted-mac-on-input-with-openssh .

Best regards,

 ---jianchen





 

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161222/1399b5d0/attachment-0001.html>

From adi at roiban.ro  Thu Dec 22 00:21:55 2016
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 22 Dec 2016 07:21:55 +0000
Subject: [Twisted-Python] hmac-sha2-512 - Corrupted MAC on input with
	OpenSSH
In-Reply-To: <7aa77b23.1f5e.1591f6015fc.Coremail.chenjianhappy2008@126.com>
References: <7aa77b23.1f5e.1591f6015fc.Coremail.chenjianhappy2008@126.com>
Message-ID: <CAFycZ9do4yXaznuS_hRmBt5BaDqsnr-gaLwxs8fXKCQ3sPRZMg@mail.gmail.com>

On 21 December 2016 at 03:15, ?? <chenjianhappy2008 at 126.com> wrote:
>
>  hi:
>
>     I write a SSH server with Twisted(15.5.0)  Conch.  But it  don't
support hmac-sha2-512 MAC algorithms
>
> .  However I see this problem has been fixed in
https://twistedmatrix.com/trac/ticket/8108 .  I asked the question in
http://stackoverflow.com/questions/41254398/twisted-hmac-sha2-512-corrupted-mac-on-input-with-openssh
.
>

Hi,

#8108 did not fix hmac-sha2-512, but was an attempt to add support for it.
Since there were no automated tests, hmac-sha2-512 was never functional.

There is a defect ticket which is not yet closed
https://twistedmatrix.com/trac/ticket/8258

I hope that the ticket description can be used to reproduce this error.

This might not be a hmac-sha2-512 specific issue, but a generic issue
related to padding... is just that sha2-512 triggered it.

--
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161222/29b691b7/attachment.html>

From glyph at twistedmatrix.com  Thu Dec 22 01:51:08 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 22 Dec 2016 00:51:08 -0800
Subject: [Twisted-Python] hmac-sha2-512 - Corrupted MAC on input with
 OpenSSH
In-Reply-To: <4995f3d9.3b42.15924768e27.Coremail.chenjianhappy2008@126.com>
References: <7aa77b23.1f5e.1591f6015fc.Coremail.chenjianhappy2008@126.com>
 <9E235CCF-3098-4E57-99F2-870A9FED091E@twistedmatrix.com>
 <4995f3d9.3b42.15924768e27.Coremail.chenjianhappy2008@126.com>
Message-ID: <D3480A3A-DAE5-4845-827E-C560B8836BB5@twistedmatrix.com>

Sorry to have misdiagnosed your problem.  I am glad that Adi Roiban could help!  Thank you very much for upgrading to the latest version - it helps us a lot for users to try recent versions of the software.  (And when a fix is available, of course, you will have to upgrade to get it, so upgrading regularly makes that easier :))  Hopefully we will be fixing a few bugs in Conch soon to try to address these sorts of protocol bugs.

-glyph

> On Dec 21, 2016, at 6:57 PM, ?? <chenjianhappy2008 at 126.com> wrote:
> 
> thank you for your reply?I have updated to the latest version of Twisted 16.6.0, but the problem remains.  More detailed debugging information with -vvv in http://stackoverflow.com/questions/41254398/twisted-hmac-sha2-512-corrupted-mac-on-input-with-openssh <http://stackoverflow.com/questions/41254398/twisted-hmac-sha2-512-corrupted-mac-on-input-with-openssh>  . I really do not know how to do it now.
> 
> Best regards,
> ---jianchen
> 
> 
> 
> 
> At 2016-12-22 08:45:40, "Glyph Lefkowitz" <glyph at twistedmatrix.com> wrote:
> Hi Jianchen,
> 
> As I said on stack overflow, you will need to upgrade to a more recent version of Twisted to get a version with that bug fixed.  If it's still a problem in a current version, you'll need to provide more details, ideally a short SSCCE http://sscce.org <http://sscce.org/> explaining how to get a broken SSH server with conch.
> 
> Thanks for using Twisted & Conch - I hope a simple upgrade will fix it for you!
> 
> -glyph
> 
>> On Dec 20, 2016, at 7:15 PM, ?? <chenjianhappy2008 at 126.com <mailto:chenjianhappy2008 at 126.com>> wrote:
>> 
>>  hi:
>>     I write a SSH server with Twisted(15.5.0)  Conch.  But it  don't support hmac-sha2-512 MAC algorithms
>> 
>> .  However I see this problem has been fixed in https://twistedmatrix.com/trac/ticket/8108 <https://twistedmatrix.com/trac/ticket/8108> .  I asked the question in http://stackoverflow.com/questions/41254398/twisted-hmac-sha2-512-corrupted-mac-on-input-with-openssh <http://stackoverflow.com/questions/41254398/twisted-hmac-sha2-512-corrupted-mac-on-input-with-openssh> .
>> Best regards,
>> 
>>  ---jianchen
>> 
>> 
>> 
>>  
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 
>  
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161222/eb28475a/attachment.html>

From twisted-python at 2xlp.com  Thu Dec 22 10:42:43 2016
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Thu, 22 Dec 2016 12:42:43 -0500
Subject: [Twisted-Python] twistd and loglevel question
Message-ID: <E15CA554-9F4E-4544-ACDD-5DBB0702898C@2xlp.com>

i couldn't find anything in docs/source, but just want to double-check...

am i correct that there is nothing in `twistd` that will automatically set the (normal) python logging level based on args/env vars?




From glyph at twistedmatrix.com  Thu Dec 22 13:33:10 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 22 Dec 2016 12:33:10 -0800
Subject: [Twisted-Python] twistd and loglevel question
In-Reply-To: <E15CA554-9F4E-4544-ACDD-5DBB0702898C@2xlp.com>
References: <E15CA554-9F4E-4544-ACDD-5DBB0702898C@2xlp.com>
Message-ID: <F49EC250-933F-49CD-B195-FDD20036DADD@twistedmatrix.com>


> On Dec 22, 2016, at 9:42 AM, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:
> 
> i couldn't find anything in docs/source, but just want to double-check...
> 
> am i correct that there is nothing in `twistd` that will automatically set the (normal) python logging level based on args/env vars?

By "normal" I assume you mean stdlib?  No, we don't use stdlib logging.

-glyph

From twisted-python at 2xlp.com  Thu Dec 22 14:40:50 2016
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Thu, 22 Dec 2016 16:40:50 -0500
Subject: [Twisted-Python] twistd and loglevel question
In-Reply-To: <F49EC250-933F-49CD-B195-FDD20036DADD@twistedmatrix.com>
References: <E15CA554-9F4E-4544-ACDD-5DBB0702898C@2xlp.com>
 <F49EC250-933F-49CD-B195-FDD20036DADD@twistedmatrix.com>
Message-ID: <7731E10B-C507-46E8-9E1A-2947BCFB3406@2xlp.com>


On Dec 22, 2016, at 3:33 PM, Glyph Lefkowitz wrote:

> By "normal" I assume you mean stdlib?  No, we don't use stdlib logging.
> 
> -glyph

Yes, thanks!

I just realized that "if I don't do anything at all", all the standard library's logging calls (all imported 3rd party packages) wind up on stdout.

i wanted to make sure there wasn't something on the `twistd` that i was missing.





From glyph at twistedmatrix.com  Thu Dec 22 15:00:18 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 22 Dec 2016 14:00:18 -0800
Subject: [Twisted-Python] twistd and loglevel question
In-Reply-To: <7731E10B-C507-46E8-9E1A-2947BCFB3406@2xlp.com>
References: <E15CA554-9F4E-4544-ACDD-5DBB0702898C@2xlp.com>
 <F49EC250-933F-49CD-B195-FDD20036DADD@twistedmatrix.com>
 <7731E10B-C507-46E8-9E1A-2947BCFB3406@2xlp.com>
Message-ID: <5C60A667-CE12-462B-8A3A-E19FC8AE5375@twistedmatrix.com>


> On Dec 22, 2016, at 1:40 PM, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:
> 
> 
> On Dec 22, 2016, at 3:33 PM, Glyph Lefkowitz wrote:
> 
>> By "normal" I assume you mean stdlib?  No, we don't use stdlib logging.
>> 
>> -glyph
> 
> Yes, thanks!
> 
> I just realized that "if I don't do anything at all", all the standard library's logging calls (all imported 3rd party packages) wind up on stdout.
> 
> i wanted to make sure there wasn't something on the `twistd` that i was missing.

Nope. If you want interaction with stdlib logging, there's https://twistedmatrix.com/documents/16.6.0/api/twisted.logger.STDLibLogObserver.html <https://twistedmatrix.com/documents/16.6.0/api/twisted.logger.STDLibLogObserver.html> and some associated utilites.  But that's up to you, not twistd.  (Maybe twistd should start doing something to integrate the log streams?)

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161222/dd487054/attachment.html>

From twisted-python at 2xlp.com  Thu Dec 22 15:38:51 2016
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Thu, 22 Dec 2016 17:38:51 -0500
Subject: [Twisted-Python] twistd and loglevel question
In-Reply-To: <5C60A667-CE12-462B-8A3A-E19FC8AE5375@twistedmatrix.com>
References: <E15CA554-9F4E-4544-ACDD-5DBB0702898C@2xlp.com>
 <F49EC250-933F-49CD-B195-FDD20036DADD@twistedmatrix.com>
 <7731E10B-C507-46E8-9E1A-2947BCFB3406@2xlp.com>
 <5C60A667-CE12-462B-8A3A-E19FC8AE5375@twistedmatrix.com>
Message-ID: <0EDF62A8-C729-4854-B72F-7B279C961A11@2xlp.com>


On Dec 22, 2016, at 5:00 PM, Glyph Lefkowitz wrote:
> Nope. If you want interaction with stdlib logging, there's https://twistedmatrix.com/documents/16.6.0/api/twisted.logger.STDLibLogObserver.html and some associated utilites.  But that's up to you, not twistd.  (Maybe twistd should start doing something to integrate the log streams?)

thanks; I had seen that.  I didn't want any actual interaction... just to silence all the DEBUG lines.  i thought twistd might have registered something I could take advantage of.

all I needed to do, for now, was throw this in my twisted app:

	import logging
	logging.basicConfig()
	logger = logging.getLogger()
	logger.setLevel(logging.WARNING) 


i can work out a proper solution in the new year.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161222/f794f78d/attachment.html>

From glyph at twistedmatrix.com  Thu Dec 22 16:28:44 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 22 Dec 2016 15:28:44 -0800
Subject: [Twisted-Python] twistd and loglevel question
In-Reply-To: <0EDF62A8-C729-4854-B72F-7B279C961A11@2xlp.com>
References: <E15CA554-9F4E-4544-ACDD-5DBB0702898C@2xlp.com>
 <F49EC250-933F-49CD-B195-FDD20036DADD@twistedmatrix.com>
 <7731E10B-C507-46E8-9E1A-2947BCFB3406@2xlp.com>
 <5C60A667-CE12-462B-8A3A-E19FC8AE5375@twistedmatrix.com>
 <0EDF62A8-C729-4854-B72F-7B279C961A11@2xlp.com>
Message-ID: <F655F93B-3626-4082-87A1-809758F33C29@twistedmatrix.com>



> On Dec 22, 2016, at 2:38 PM, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:
> 
> 
> On Dec 22, 2016, at 5:00 PM, Glyph Lefkowitz wrote:
>> Nope. If you want interaction with stdlib logging, there's https://twistedmatrix.com/documents/16.6.0/api/twisted.logger.STDLibLogObserver.html <https://twistedmatrix.com/documents/16.6.0/api/twisted.logger.STDLibLogObserver.html> and some associated utilites.  But that's up to you, not twistd.  (Maybe twistd should start doing something to integrate the log streams?)
> 
> thanks; I had seen that.  I didn't want any actual interaction... just to silence all the DEBUG lines.  i thought twistd might have registered something I could take advantage of.
> 
> all I needed to do, for now, was throw this in my twisted app:
> 
> 	import logging
> 	logging.basicConfig()
> 	logger = logging.getLogger()
> 	logger.setLevel(logging.WARNING) 
> 
> 
> i can work out a proper solution in the new year.

Looking forward to reviewing your ticket, then :)

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161222/b890404f/attachment.html>

From hawkowl at atleastfornow.net  Thu Dec 22 21:33:58 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Fri, 23 Dec 2016 15:33:58 +1100
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate Announcement
Message-ID: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>

Hello everyone, and happy holidays!

Although it didn't quite fall on the solstice, one could call this Twisted release a little ray of sunshine, with some nice new improvements. 16.7.0rc1 brings the following stocking stuffers:

- twisted.web.client.Agent now supports IPv6! It's also now the primary web client in Twisted, with twisted.web.client.getPage being deprecated in favour of it and Treq.
- twisted.internet.ssl.CertificateOptions has had its `method` argument deprecated, in favour of the new raiseMinimumTo, lowerMaximumSecurityTo, and insecurelyLowerMinimumTo arguments, which take TLSVersion arguments. This allows you to better give a range of versions of TLS you wish to negotiate, rather than forcing yourself to any one version.
- twisted.internet.ssl.CertificateOptions will use OpenSSL's MODE_RELEASE_BUFFERS, which will let it free unused memory that was held by idle TLS connections.
- You can now call the new twist runner with `python -m twisted`.
- Conch has the beginnings of ECDH key exchange, and supports `hmac-sha2-384` in twisted.conch.ssh.
- Better Unicode support in twisted.internet.reactor.spawnProcess, especially on Windows on Python 3.6.
- More Python 3 porting in Conch, and more under-the-hood changes to facilitate a Twisted-wide jump to new-style classes only on Python 2 in 2018/2019. This release has also been tested on Python 3.6 on Linux.
- Lots of deprecated code removals, to make a sleeker, less confusing Twisted.
- 20+ closed tickets.

You can get the tarball and the NEWS file at https://twistedmatrix.com/Releases/rc/16.7.0rc1/ <https://twistedmatrix.com/Releases/rc/16.7.0rc1/> , or you can try it out from PyPI:

    python -m pip install Twisted==16.7.0rc1

Please test it, and let me know how your applications fare, good or bad! If nothing comes up, 16.7 looks like it'll land just before the new year.

With festive hoots,
    Amber Brown

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161223/d56e4b30/attachment-0001.html>

From ex.vitorino at gmail.com  Fri Dec 23 04:49:35 2016
From: ex.vitorino at gmail.com (ex vito)
Date: Fri, 23 Dec 2016 11:49:35 +0000
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate
	Announcement
In-Reply-To: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
References: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
Message-ID: <8EE8E179-EA0A-47EC-9449-6D7C3D8F7260@gmail.com>


On 2016-12-23, at 4:33, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:

> [...]
> 
> You can get the tarball and the NEWS file at https://twistedmatrix.com/Releases/rc/16.7.0rc1/ , or you can try it out from PyPI:
> 
>     python -m pip install Twisted==16.7.0rc1
> 
> Please test it, and let me know how your applications fare, good or bad! If nothing comes up, 16.7 looks like it'll land just before the new year.



Amber,

Do you think https://github.com/twisted/twisted/pull/599 can go in?
As far as I can tell, it's been reviewed and approved for merging. If not, please point out what should be improved.

Thanks and Happy Holidays,
--
exvito

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161223/08c0c2b2/attachment.html>

From glyph at twistedmatrix.com  Fri Dec 23 13:31:10 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 23 Dec 2016 12:31:10 -0800
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate
	Announcement
In-Reply-To: <8EE8E179-EA0A-47EC-9449-6D7C3D8F7260@gmail.com>
References: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
 <8EE8E179-EA0A-47EC-9449-6D7C3D8F7260@gmail.com>
Message-ID: <E19C9739-651D-4E4A-BA39-D37C060F89D6@twistedmatrix.com>


> On Dec 23, 2016, at 3:49 AM, ex vito <ex.vitorino at gmail.com> wrote:
> 
> 
> On 2016-12-23, at 4:33, Amber Hawkie Brown <hawkowl at atleastfornow.net <mailto:hawkowl at atleastfornow.net>> wrote:
> 
>> [...]
>> 
>> You can get the tarball and the NEWS file at https://twistedmatrix.com/Releases/rc/16.7.0rc1/ <https://twistedmatrix.com/Releases/rc/16.7.0rc1/> , or you can try it out from PyPI:
>> 
>>     python -m pip install Twisted==16.7.0rc1
>> 
>> Please test it, and let me know how your applications fare, good or bad! If nothing comes up, 16.7 looks like it'll land just before the new year.
> 
> 
> 
> Amber,
> 
> Do you think https://github.com/twisted/twisted/pull/599 <https://github.com/twisted/twisted/pull/599> can go in?
> As far as I can tell, it's been reviewed and approved for merging. If not, please point out what should be improved.

Amber is the release manager and therefore has final say, but, generally, we try not to roll more things into releases.  Instead, we try to roll releases more frequently (which has been a resounding success during 2016, and hopefully we can keep that momentum during 2017).

However, I have to say I'm very sorry this did not get merged in a timely way!  It seems I didn't get the github notification when you @mentioned me; I have no idea why that would be.

I'll get test results on trunk and get it merged, and it should be in the next 17.x release.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161223/6db7d63a/attachment.html>

From glyph at twistedmatrix.com  Fri Dec 23 14:22:09 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 23 Dec 2016 13:22:09 -0800
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate
	Announcement
In-Reply-To: <E19C9739-651D-4E4A-BA39-D37C060F89D6@twistedmatrix.com>
References: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
 <8EE8E179-EA0A-47EC-9449-6D7C3D8F7260@gmail.com>
 <E19C9739-651D-4E4A-BA39-D37C060F89D6@twistedmatrix.com>
Message-ID: <A12AF755-CE71-4C4A-883F-D36F9DDD8E29@twistedmatrix.com>


> On Dec 23, 2016, at 12:31 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Dec 23, 2016, at 3:49 AM, ex vito <ex.vitorino at gmail.com <mailto:ex.vitorino at gmail.com>> wrote:
>> 
>> 
>> On 2016-12-23, at 4:33, Amber Hawkie Brown <hawkowl at atleastfornow.net <mailto:hawkowl at atleastfornow.net>> wrote:
>> 
>>> [...]
>>> 
>>> You can get the tarball and the NEWS file at https://twistedmatrix.com/Releases/rc/16.7.0rc1/ <https://twistedmatrix.com/Releases/rc/16.7.0rc1/> , or you can try it out from PyPI:
>>> 
>>>     python -m pip install Twisted==16.7.0rc1
>>> 
>>> Please test it, and let me know how your applications fare, good or bad! If nothing comes up, 16.7 looks like it'll land just before the new year.
>> 
>> 
>> 
>> Amber,
>> 
>> Do you think https://github.com/twisted/twisted/pull/599 <https://github.com/twisted/twisted/pull/599> can go in?
>> As far as I can tell, it's been reviewed and approved for merging. If not, please point out what should be improved.
> 
> Amber is the release manager and therefore has final say, but, generally, we try not to roll more things into releases.  Instead, we try to roll releases more frequently (which has been a resounding success during 2016, and hopefully we can keep that momentum during 2017).
> 
> However, I have to say I'm very sorry this did not get merged in a timely way!  It seems I didn't get the github notification when you @mentioned me; I have no idea why that would be.
> 
> I'll get test results on trunk and get it merged, and it should be in the next 17.x release.
> 
> -glyph

It's merged now: https://twistedmatrix.com/trac/ticket/8911#comment:5 <https://twistedmatrix.com/trac/ticket/8911#comment:5>

On a related note - this still linked the '#' syntax back to the ticket number in Trac.

Perhaps related - tomprince fixed the bugs that were preventing us from upgrading us to 1.2, and upgraded us to 1.2.  So perhaps this has introduced a problem :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161223/67b06571/attachment.html>

From ex.vitorino at gmail.com  Sat Dec 24 07:01:44 2016
From: ex.vitorino at gmail.com (ex vito)
Date: Sat, 24 Dec 2016 14:01:44 +0000
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate
	Announcement
In-Reply-To: <A12AF755-CE71-4C4A-883F-D36F9DDD8E29@twistedmatrix.com>
References: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
 <8EE8E179-EA0A-47EC-9449-6D7C3D8F7260@gmail.com>
 <E19C9739-651D-4E4A-BA39-D37C060F89D6@twistedmatrix.com>
 <A12AF755-CE71-4C4A-883F-D36F9DDD8E29@twistedmatrix.com>
Message-ID: <F8A32F53-244C-49FB-A0D8-E275CFEDA601@gmail.com>

On 2016-12-23, at 21:22, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

>> On Dec 23, 2016, at 12:31 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>> 
>>> On Dec 23, 2016, at 3:49 AM, ex vito <ex.vitorino at gmail.com> wrote:
>>> 
>>> On 2016-12-23, at 4:33, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
>>> 
>>>> [...]
>>>> 
>>>> You can get the tarball and the NEWS file at https://twistedmatrix.com/Releases/rc/16.7.0rc1/ , or you can try it out from PyPI:
>>>> 
>>>>     python -m pip install Twisted==16.7.0rc1
>>>> 
>>>> Please test it, and let me know how your applications fare, good or bad! If nothing comes up, 16.7 looks like it'll land just before the new year.
>>> 
>>> 
>>> 
>>> Amber,
>>> 
>>> Do you think https://github.com/twisted/twisted/pull/599 can go in?
>>> As far as I can tell, it's been reviewed and approved for merging. If not, please point out what should be improved.
>> 
>> Amber is the release manager and therefore has final say, but, generally, we try not to roll more things into releases.  Instead, we try to roll releases more frequently (which has been a resounding success during 2016, and hopefully we can keep that momentum during 2017).
>> 
>> However, I have to say I'm very sorry this did not get merged in a timely way!  It seems I didn't get the github notification when you @mentioned me; I have no idea why that would be.
>> 
>> I'll get test results on trunk and get it merged, and it should be in the next 17.x release.

Glyph,

The next 17.x release sounds good. I'm in no hurries and that keeps an open time window to address the very tightly related https://twistedmatrix.com/trac/ticket/8912 which I recently noted was created by Tom Prince.

> It's merged now: https://twistedmatrix.com/trac/ticket/8911#comment:5
> 
> On a related note - this still linked the '#' syntax back to the ticket number in Trac.
> 
> Perhaps related - tomprince fixed the bugs that were preventing us from upgrading us to 1.2, and upgraded us to 1.2.  So perhaps this has introduced a problem :).

Thanks for the quick feedback and heads up on the '#' link.
Regards,
--
exvito

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161224/61fcaaee/attachment.html>

From glyph at twistedmatrix.com  Sat Dec 24 14:29:16 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 24 Dec 2016 13:29:16 -0800
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate
	Announcement
In-Reply-To: <F8A32F53-244C-49FB-A0D8-E275CFEDA601@gmail.com>
References: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
 <8EE8E179-EA0A-47EC-9449-6D7C3D8F7260@gmail.com>
 <E19C9739-651D-4E4A-BA39-D37C060F89D6@twistedmatrix.com>
 <A12AF755-CE71-4C4A-883F-D36F9DDD8E29@twistedmatrix.com>
 <F8A32F53-244C-49FB-A0D8-E275CFEDA601@gmail.com>
Message-ID: <138C0157-A4E2-4E10-B437-FF7B37E7A014@twistedmatrix.com>


> On Dec 24, 2016, at 6:01 AM, ex vito <ex.vitorino at gmail.com> wrote:
> 
> On 2016-12-23, at 21:22, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
>>> On Dec 23, 2016, at 12:31 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>>> 
>>>> On Dec 23, 2016, at 3:49 AM, ex vito <ex.vitorino at gmail.com <mailto:ex.vitorino at gmail.com>> wrote:
>>>> 
>>>> On 2016-12-23, at 4:33, Amber Hawkie Brown <hawkowl at atleastfornow.net <mailto:hawkowl at atleastfornow.net>> wrote:
>>>> 
>>>>> [...]
>>>>> 
>>>>> You can get the tarball and the NEWS file at https://twistedmatrix.com/Releases/rc/16.7.0rc1/ <https://twistedmatrix.com/Releases/rc/16.7.0rc1/> , or you can try it out from PyPI:
>>>>> 
>>>>>     python -m pip install Twisted==16.7.0rc1
>>>>> 
>>>>> Please test it, and let me know how your applications fare, good or bad! If nothing comes up, 16.7 looks like it'll land just before the new year.
>>>> 
>>>> 
>>>> 
>>>> Amber,
>>>> 
>>>> Do you think https://github.com/twisted/twisted/pull/599 <https://github.com/twisted/twisted/pull/599> can go in?
>>>> As far as I can tell, it's been reviewed and approved for merging. If not, please point out what should be improved.
>>> 
>>> Amber is the release manager and therefore has final say, but, generally, we try not to roll more things into releases.  Instead, we try to roll releases more frequently (which has been a resounding success during 2016, and hopefully we can keep that momentum during 2017).
>>> 
>>> However, I have to say I'm very sorry this did not get merged in a timely way!  It seems I didn't get the github notification when you @mentioned me; I have no idea why that would be.
>>> 
>>> I'll get test results on trunk and get it merged, and it should be in the next 17.x release.
> 
> Glyph,
> 
> The next 17.x release sounds good. I'm in no hurries and that keeps an open time window to address the very tightly related https://twistedmatrix.com/trac/ticket/8912 <https://twistedmatrix.com/trac/ticket/8912> which I recently noted was created by Tom Prince.

Great.  Basically, try not to worry about releases too much - just do the work as quick as you can, do reviews to speed along the queue in general, and the ever-faster release cadence that Amber has put in place will catch your changes soon enough.

>> It's merged now: https://twistedmatrix.com/trac/ticket/8911#comment:5 <https://twistedmatrix.com/trac/ticket/8911#comment:5>
>> 
>> On a related note - this still linked the '#' syntax back to the ticket number in Trac.
>> 
>> Perhaps related - tomprince fixed the bugs that were preventing us from upgrading us to 1.2, and upgraded us to 1.2.  So perhaps this has introduced a problem :).
> 
> Thanks for the quick feedback and heads up on the '#' link.

This was a heads-up for Jean-Paul, who has been trying to change this behavior (to make '#' on new commits refer to Github issues / PRs, and 'ticket:' refer to Trac tickets, so we don't get spurious email notifications about old Trac tickets).  You can pretty much ignore it :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161224/e740936d/attachment.html>

From hawkowl at atleastfornow.net  Sat Dec 24 21:17:59 2016
From: hawkowl at atleastfornow.net (Amber Hawkie Brown)
Date: Sun, 25 Dec 2016 15:17:59 +1100
Subject: [Twisted-Python] New Supported Platforms - FreeBSD (2.7 & 3.5),
	Python 3.6 (Linux)
Message-ID: <8B7FE57B-90C7-412D-A013-4EB1C2651D21@atleastfornow.net>

Hi everyone,

I just migrated a few buildbots over to the 'supported' column. This includes Python 3.6 on Ubuntu 16.04 (compiled, not an official distro binary :) ) and FreeBSD 10.1 (Python 2.7 & 3.5). Twisted 16.7 passes on both of these, so you can consider them supported platforms for it.

- Amber

From trac at twistedmatrix.com  Sun Dec 25 00:05:18 2016
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 25 Dec 2016 07:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1482649518.06.6142520099845210664@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161225/25e8cbd2/attachment-0001.html>

From exarkun at twistedmatrix.com  Sun Dec 25 08:09:59 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Sun, 25 Dec 2016 10:09:59 -0500
Subject: [Twisted-Python] AWS Auth v4 for Twisted?
Message-ID: <CAEeXt4N5O=yfcSPqVPcxwaadLi4L4tCUc1d6TXkRxadKmpGNnA@mail.gmail.com>

Seeking a library that implements this for use with txAWS.  More details:

https://stackoverflow.com/questions/41322251/is-there-an-aws-auth-v4-implementation-usable-with-a-twisted-friendly-http-clien

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161225/55394f5b/attachment.html>

From markrwilliams at gmail.com  Sun Dec 25 14:44:44 2016
From: markrwilliams at gmail.com (Mark Williams)
Date: Sun, 25 Dec 2016 13:44:44 -0800
Subject: [Twisted-Python] AWS Auth v4 for Twisted?
In-Reply-To: <CAEeXt4N5O=yfcSPqVPcxwaadLi4L4tCUc1d6TXkRxadKmpGNnA@mail.gmail.com>
References: <CAEeXt4N5O=yfcSPqVPcxwaadLi4L4tCUc1d6TXkRxadKmpGNnA@mail.gmail.com>
Message-ID: <CA+TSurANEugvPy7+WGa=nDYB=S9MoDgkRjaaSUC6iLiGhGy4PA@mail.gmail.com>

I implemented this at work.  On Tuesday I'll confirm my company's open
source policy will allow me to contribute it back to txaws.

On Sun, Dec 25, 2016 at 7:09 AM, Jean-Paul Calderone <
exarkun at twistedmatrix.com> wrote:

> Seeking a library that implements this for use with txAWS.  More details:
>
> https://stackoverflow.com/questions/41322251/is-there-
> an-aws-auth-v4-implementation-usable-with-a-twisted-friendly-http-clien
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161225/ad51f05c/attachment.html>

From exarkun at twistedmatrix.com  Sun Dec 25 15:49:41 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Sun, 25 Dec 2016 17:49:41 -0500
Subject: [Twisted-Python] AWS Auth v4 for Twisted?
In-Reply-To: <CA+TSurANEugvPy7+WGa=nDYB=S9MoDgkRjaaSUC6iLiGhGy4PA@mail.gmail.com>
References: <CAEeXt4N5O=yfcSPqVPcxwaadLi4L4tCUc1d6TXkRxadKmpGNnA@mail.gmail.com>
 <CA+TSurANEugvPy7+WGa=nDYB=S9MoDgkRjaaSUC6iLiGhGy4PA@mail.gmail.com>
Message-ID: <CAEeXt4NpYndbr5KgDT80HuEVC-H_kBH3MyGfJ_tedex9F10oQw@mail.gmail.com>

On Sun, Dec 25, 2016 at 4:44 PM, Mark Williams <markrwilliams at gmail.com>
wrote:

> I implemented this at work.  On Tuesday I'll confirm my company's open
> source policy will allow me to contribute it back to txaws.
>
>
Super!

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161225/f12bff89/attachment.html>

From glyph at twistedmatrix.com  Sun Dec 25 17:31:56 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 25 Dec 2016 16:31:56 -0800
Subject: [Twisted-Python] New Supported Platforms - FreeBSD (2.7 & 3.5),
 Python 3.6 (Linux)
In-Reply-To: <8B7FE57B-90C7-412D-A013-4EB1C2651D21@atleastfornow.net>
References: <8B7FE57B-90C7-412D-A013-4EB1C2651D21@atleastfornow.net>
Message-ID: <17A95701-288D-403B-986F-54353E5F4B7B@twistedmatrix.com>


> On Dec 24, 2016, at 8:17 PM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> Hi everyone,
> 
> I just migrated a few buildbots over to the 'supported' column. This includes Python 3.6 on Ubuntu 16.04 (compiled, not an official distro binary :) ) and FreeBSD 10.1 (Python 2.7 & 3.5). Twisted 16.7 passes on both of these, so you can consider them supported platforms for it.
> 
> - Amber

A few things:

Happy Hanukkah
The build reliability on FreeBSD seems pretty bad.  On one PR that is just a doc change I've gotten like 4 failed builds in a row, mostly variants of this: https://buildbot.twistedmatrix.com/builders/freebsd10-py2.7/builds/57/steps/default/logs/problems <https://buildbot.twistedmatrix.com/builders/freebsd10-py2.7/builds/57/steps/default/logs/problems>
Merry Christmas
Overall it seems to be failing a lot; appropriate to the holiday there is a festive combination of red and green on https://buildbot.twistedmatrix.com/builders/freebsd10-py3.5 <https://buildbot.twistedmatrix.com/builders/freebsd10-py3.5>
Season's Greetings

:)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161225/f2403b5c/attachment.html>

From exarkun at twistedmatrix.com  Mon Dec 26 17:14:04 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Mon, 26 Dec 2016 19:14:04 -0500
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate
	Announcement
In-Reply-To: <A12AF755-CE71-4C4A-883F-D36F9DDD8E29@twistedmatrix.com>
References: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
 <8EE8E179-EA0A-47EC-9449-6D7C3D8F7260@gmail.com>
 <E19C9739-651D-4E4A-BA39-D37C060F89D6@twistedmatrix.com>
 <A12AF755-CE71-4C4A-883F-D36F9DDD8E29@twistedmatrix.com>
Message-ID: <CAEeXt4Nj3LmqZn_b3CdULwG=nu565xKpZx52i6aG3WjNHW5-4w@mail.gmail.com>

On Fri, Dec 23, 2016 at 4:22 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
>
> It's merged now: https://twistedmatrix.com/trac/ticket/8911#comment:5
>
> On a related note - this still linked the '#' syntax back to the ticket
> number in Trac.
>
> Perhaps related - tomprince fixed the bugs that were preventing us from
> upgrading us to 1.2, and upgraded us to 1.2.  So perhaps this has
> introduced a problem :).
>
> -glyph
>
>
It looks like the link to ticket 599 in the merge/resolve comment on ticket
8911 is a different kind of link than the one I was looking in to.  I agree
it would be nice to fix this, too, and perhaps I'll take a look.  My goal
was only to stop ticket 599 (for example) from also receiving a copy of
this comment - which appears to have succeeded.  Let me know if I've missed
something.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161226/aa0b296d/attachment.html>

From ex.vitorino at gmail.com  Tue Dec 27 20:15:58 2016
From: ex.vitorino at gmail.com (ex vito)
Date: Wed, 28 Dec 2016 03:15:58 +0000
Subject: [Twisted-Python] twisted.python.sendmsg segfault - looking for
	confirmation
Message-ID: <4F35146F-E43C-437F-B33A-4F6CEA9343F6@gmail.com>

Dear all,

While working on http://twistedmatrix.com/trac/ticket/8912 and the associated PR at https://github.com/twisted/twisted/pull/647 I hit a segmentation fault on a test I was preparing.

I think narrowed it down Linux + Python 2, but I'm not 100% sure. Can anyone please confirm the  code below segfaults on such environment? For completeness, from my tests, it works fine on Linux + Python 3, and fails with socket.error/OSError on Mac OS 10.9.5 + Python 2/3. No BSDs at hand to try out...

As far as I can tell, no code in Twisted uses sendmsg in the way the code is using it. However, twisted.python.sendmsg is a public API so someone somewhere may hit this like I just did.

Other than looking for confirmation, I have a fix which I included two isolated commits in the PR. Twisted project members: if this is confirmed, maybe a ticket should be created in Trac and an independent PR created, correct?

Thanks in advance for any input.
Regards,
--
exvito

-[ cut here ]----------------------------------------------------------------------

import os
import socket
import struct
import sys

from twisted.python import sendmsg

if __name__ == '__main__':

    # This code segfaults when running with twisted/trunk commit
    # 98a3df200968b78bd3b985dfd4fb10a5b415d6fc on Linux Python 2
    # due to a bug in src/twisted/python/_sendmsg.c and glibc's
    # CMSG_NXTHDR implementation.

    # get connected sockets
    s1, s2 = socket.socketpair(socket.AF_UNIX)

    # two CMSGs in ancillary data (no segfault with just one)
    ancillary = [
        (socket.SOL_SOCKET, sendmsg.SCM_RIGHTS, struct.pack('i', s1.fileno())),
        (socket.SOL_SOCKET, sendmsg.SCM_RIGHTS, struct.pack('i', s2.fileno())),
    ]

    expected = {
        2: 'Expecting to segfault.',
        3: 'Should not segfault.',
    }
    print expected.get(sys.version_info.major, 'Unexpected Python version.')
    retval = sendmsg.sendmsg(s1, data=b'some data', ancillary=ancillary)
    print 'Did not segfault.'

-[ cut here ]----------------------------------------------------------------------



From hawkowl at atleastfornow.net  Tue Dec 27 20:25:39 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Wed, 28 Dec 2016 14:25:39 +1100
Subject: [Twisted-Python] twisted.python.sendmsg segfault - looking for
 confirmation
In-Reply-To: <4F35146F-E43C-437F-B33A-4F6CEA9343F6@gmail.com>
References: <4F35146F-E43C-437F-B33A-4F6CEA9343F6@gmail.com>
Message-ID: <B0E671A3-E2CD-4083-B86E-51B67988F862@atleastfornow.net>


> On 28 Dec. 2016, at 14:15, ex vito <ex.vitorino at gmail.com> wrote:
> 
> Dear all,
> 
> While working on http://twistedmatrix.com/trac/ticket/8912 and the associated PR at https://github.com/twisted/twisted/pull/647 I hit a segmentation fault on a test I was preparing.
> 
> I think narrowed it down Linux + Python 2, but I'm not 100% sure. Can anyone please confirm the  code below segfaults on such environment? For completeness, from my tests, it works fine on Linux + Python 3, and fails with socket.error/OSError on Mac OS 10.9.5 + Python 2/3. No BSDs at hand to try out...
> 
> As far as I can tell, no code in Twisted uses sendmsg in the way the code is using it. However, twisted.python.sendmsg is a public API so someone somewhere may hit this like I just did.
> 
> Other than looking for confirmation, I have a fix which I included two isolated commits in the PR. Twisted project members: if this is confirmed, maybe a ticket should be created in Trac and an independent PR created, correct?
> 
> Thanks in advance for any input.
> Regards,
> --
> exvito
> 
> -[ cut here ]----------------------------------------------------------------------
> 
> import os
> import socket
> import struct
> import sys
> 
> from twisted.python import sendmsg
> 
> if __name__ == '__main__':
> 
>    # This code segfaults when running with twisted/trunk commit
>    # 98a3df200968b78bd3b985dfd4fb10a5b415d6fc on Linux Python 2
>    # due to a bug in src/twisted/python/_sendmsg.c and glibc's
>    # CMSG_NXTHDR implementation.
> 
>    # get connected sockets
>    s1, s2 = socket.socketpair(socket.AF_UNIX)
> 
>    # two CMSGs in ancillary data (no segfault with just one)
>    ancillary = [
>        (socket.SOL_SOCKET, sendmsg.SCM_RIGHTS, struct.pack('i', s1.fileno())),
>        (socket.SOL_SOCKET, sendmsg.SCM_RIGHTS, struct.pack('i', s2.fileno())),
>    ]
> 
>    expected = {
>        2: 'Expecting to segfault.',
>        3: 'Should not segfault.',
>    }
>    print expected.get(sys.version_info.major, 'Unexpected Python version.')
>    retval = sendmsg.sendmsg(s1, data=b'some data', ancillary=ancillary)
>    print 'Did not segfault.'
> 
> -[ cut here ]----------------------------------------------------------------------
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

FWIW, for people wanting to track this down, this may be a bug in our C extension (src/twisted/python/_sendmsg.c). Python 3 uses the stdlib's functionality, which is probably why it isn't running into this.

- Amber



From rodrigc at crodrigues.org  Wed Dec 28 10:40:07 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 28 Dec 2016 12:40:07 -0500
Subject: [Twisted-Python] hmac-sha2-512 - Corrupted MAC on input with
	OpenSSH
In-Reply-To: <7aa77b23.1f5e.1591f6015fc.Coremail.chenjianhappy2008@126.com>
References: <7aa77b23.1f5e.1591f6015fc.Coremail.chenjianhappy2008@126.com>
Message-ID: <CAG=rPVccsxgVBpb_QarfK4=i+ti_9dpfGWMmJtm7ghP-qTytyA@mail.gmail.com>

Jianchen,

Can you provide more details about the server you are writing?

I cannot reproduce your problem with the latest Twisted code in trunk.

Here is what I did:


git clone https://github.com/twisted/twisted twisted-test
cd twisted-test
python setup.py develop
cd docs/conch/examples
mkdir ssh-examples
ckeygen -t rsa -f ssh-keys/ssh_host_rsa_key
twistd -ny demo_recvline.tac


I logged in with:


ssh username at 127.0.0.1 -m hmac-sha2-512 -vvv -p 6022

(using *username* for the login, and  *password* for the password)

>From the log, I saw:

debug1: Authenticating to 127.0.0.1:6022 as 'username'
debug3: put_host_port: [127.0.0.1]:6022
debug3: hostkeys_foreach: reading file "/Users/crodrigues/.ssh/known_hosts"
debug3: record_hostkey: found key type RSA in file
/Users/crodrigues/.ssh/known_hosts:5
debug3: load_hostkeys: loaded 1 keys from [127.0.0.1]:6022
debug3: order_hostkeyalgs: prefer hostkeyalgs: ssh-rsa-cert-v01 at openssh.com
,rsa-sha2-512,rsa-sha2-256,ssh-rsa
debug3: send packet: type 20
debug1: SSH2_MSG_KEXINIT sent
debug3: receive packet: type 20
debug1: SSH2_MSG_KEXINIT received
debug2: local client KEXINIT proposal
debug2: KEX algorithms: curve25519-sha256 at libssh.org
,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha256,diffie-hellman-group14-sha1,ext-info-c
debug2: host key algorithms: ssh-rsa-cert-v01 at openssh.com,rsa-sha2-512
,rsa-sha2-256,ssh-rsa,ecdsa-sha2-nistp256-cert-v01 at openssh.com,
ecdsa-sha2-nistp384-cert-v01 at openssh.com,
ecdsa-sha2-nistp521-cert-v01 at openssh.com,ssh-ed25519-cert-v01 at openssh.com
,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519
debug2: ciphers ctos: chacha20-poly1305 at openssh.com
,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,
aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,3des-cbc
debug2: ciphers stoc: chacha20-poly1305 at openssh.com
,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,
aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,3des-cbc
debug2: MACs ctos: hmac-sha2-512
debug2: MACs stoc: hmac-sha2-512
debug2: compression ctos: none,zlib at openssh.com,zlib
debug2: compression stoc: none,zlib at openssh.com,zlib
debug2: languages ctos:
debug2: languages stoc:
debug2: first_kex_follows 0
debug2: reserved 0
debug2: peer server KEXINIT proposal
debug2: KEX algorithms:
ecdh-sha2-nistp256,ecdh-sha2-nistk163,ecdh-sha2-nistp224,ecdh-sha2-nistk233,ecdh-sha2-nistb233,ecdh-sha2-nistp384,ecdh-sha2-nistk283,ecdh-sha2-nistk409,ecdh-sha2-nistb409,ecdh-sha2-nistp521,ecdh-sha2-nistt571,diffie-hellman-group1-sha1,diffie-hellman-group14-sha1
debug2: host key algorithms: ssh-rsa
debug2: ciphers ctos:
aes256-ctr,aes256-cbc,aes192-ctr,aes192-cbc,aes128-ctr,aes128-cbc,cast128-ctr,cast128-cbc,blowfish-cbc,
3des-cbc
debug2: ciphers stoc:
aes256-ctr,aes256-cbc,aes192-ctr,aes192-cbc,aes128-ctr,aes128-cbc,cast128-ctr,cast128-cbc,blowfish-cbc,
3des-cbc

debug2: MACs ctos: hmac-sha2-512,hmac-sha2-384,hmac-sha2-256
,hmac-sha1,hmac-md5

debug2: compression ctos: none,zlib
debug2: compression stoc: none,zlib
debug2: languages ctos:
debug2: languages stoc:debug2: first_kex_follows 0
debug2: reserved 0
debug1: kex: algorithm: ecdh-sha2-nistp256
debug1: kex: host key algorithm: ssh-rsa
debug1: kex: server->client cipher: aes128-ctr MAC: hmac-sha2-512
compression: none
debug1: kex: client->server cipher: aes128-ctr MAC: hmac-sha2-512
compression: none
debug3: send packet: type 30
debug1: sending SSH2_MSG_KEX_ECDH_INIT
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug3: receive packet: type 31
debug1: Server host key: ssh-rsa
SHA256:VP7JUyzN/BuRNuCOieijGHuF9fAylDBCYYJAtJ+gDO8
debug3: put_host_port: [127.0.0.1]:6022
debug3: put_host_port: [127.0.0.1]:6022
debug3: hostkeys_foreach: reading file "/Users/crodrigues/.ssh/known_hosts"
debug3: record_hostkey: found key type RSA in file
/Users/crodrigues/.ssh/known_hosts:5
debug3: load_hostkeys: loaded 1 keys from [127.0.0.1]:6022
debug1: Host '[127.0.0.1]:6022' is known and matches the RSA host key.
debug1: Found key in /Users/crodrigues/.ssh/known_hosts:5
debug3: send packet: type 21
debug2: set_newkeys: mode 1



I did not see the problem that you saw.

--
Craig


On Tue, Dec 20, 2016 at 10:15 PM, ?? <chenjianhappy2008 at 126.com> wrote:

>  hi:
>
>     I write a SSH server with Twisted(15.5.0)  Conch.  But it  don't
> support hmac-sha2-512 MAC algorithms
> .  However I see this problem has been fixed in https://twistedmatrix.com/
> trac/ticket/8108 .  I asked the question in http://stackoverflow.com/
> questions/41254398/twisted-hmac-sha2-512-corrupted-mac-
> on-input-with-openssh .
>
> Best regards,
>  ---jianchen
>
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161228/d1a79b16/attachment-0001.html>

From john at egh.com  Wed Dec 28 16:20:27 2016
From: john at egh.com (John Santos)
Date: Wed, 28 Dec 2016 18:20:27 -0500
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate
	Announcement
In-Reply-To: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
References: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
Message-ID: <2da9e7e0-4acf-d9af-9039-72533d3bfb24@egh.com>

Seems to require a new Python module, Automat.  (Not mentioned in the 
NEWS file, INSTALL, etc.)  I found Automat 0.3.0 (with Glyph's 
fingerprints on it) at PyPI, but it only exists in .whl format.  
Downloaded it, but I'm not sure what to do next.  I was able to get it 
working by downloading and installing get-pip.py and Automat (contrary 
to the python.org documentation, I didn't have pip installed on my 
system even though it is Python 2.7.13 downloaded from python.org.)
    sudo python get-pip.py
    sudo pip install Automat

This is worrisome to me because I think this requires Internet access to 
pypi.python.org, which I have on my development and testing systems, but 
not on my production systems.  Everything else I've ever needed, I could 
download and install source files.

Having done this, my app seems to run fine (only quick sanity testing so 
far.)


----install---
Searching for Automat>=0.3.0
Reading https://pypi.python.org/simple/Automat/
Download error on https://pypi.python.org/simple/Automat/: [SSL: 
CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:590) -- 
Some packages may not be found!
Couldn't find index page for 'Automat' (maybe misspelled?)
Scanning index of all packages (this may take a while)
Reading https://pypi.python.org/simple/
Download error on https://pypi.python.org/simple/: [SSL: 
CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:590) -- 
Some packages may not be found!
No local packages or working download links found for Automat>=0.3.0
error: Could not find suitable distribution for 
Requirement.parse('Automat>=0.3.0')
------

---try to use without Automat---
medusa at Medusa:~/run> python medusa_server.py Rain
Traceback (most recent call last):
   File "medusa_server.py", line 72, in <module>
     from twisted.application import service, internet
   File 
"/usr/lib/python2.7/site-packages/Twisted-16.7.0rc1-py2.7-linux-x86_64.egg/twisted/application/internet.py", 
line 54, in <module>
     from automat import MethodicalMachine
ImportError: No module named automat
------

On 12/22/2016 11:33 PM, Amber "Hawkie" Brown wrote:
> Hello everyone, and happy holidays!
>
> Although it didn't quite fall on the solstice, one could call this 
> Twisted release a little ray of sunshine, with some nice new 
> improvements. 16.7.0rc1 brings the following stocking stuffers:
>
> - twisted.web.client.Agent now supports IPv6! It's also now the 
> primary web client in Twisted, with twisted.web.client.getPage being 
> deprecated in favour of it and Treq.
> - twisted.internet.ssl.CertificateOptions has had its `method` 
> argument deprecated, in favour of the new raiseMinimumTo, 
> lowerMaximumSecurityTo, and insecurelyLowerMinimumTo arguments, which 
> take TLSVersion arguments. This allows you to better give a range of 
> versions of TLS you wish to negotiate, rather than forcing yourself to 
> any one version.
> - twisted.internet.ssl.CertificateOptions will use OpenSSL's 
> MODE_RELEASE_BUFFERS, which will let it free unused memory that was 
> held by idle TLS connections.
> - You can now call the new twist runner with `python -m twisted`.
> - Conch has the beginnings of ECDH key exchange, and supports 
> `hmac-sha2-384` in twisted.conch.ssh.
> - Better Unicode support in twisted.internet.reactor.spawnProcess, 
> especially on Windows on Python 3.6.
> - More Python 3 porting in Conch, and more under-the-hood changes to 
> facilitate a Twisted-wide jump to new-style classes only on Python 2 
> in 2018/2019. This release has also been tested on Python 3.6 on Linux.
> - Lots of deprecated code removals, to make a sleeker, less confusing 
> Twisted.
> - 20+ closed tickets.
>
> You can get the tarball and the NEWS file at 
> https://twistedmatrix.com/Releases/rc/16.7.0rc1/ , or you can try it 
> out from PyPI:
>
>     python -m pip install Twisted==16.7.0rc1
>
> Please test it, and let me know how your applications fare, good or 
> bad! If nothing comes up, 16.7 looks like it'll land just before the 
> new year.
>
> With festive hoots,
>     Amber Brown
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-- 
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161228/18f0f79b/attachment.html>

From hawkowl at atleastfornow.net  Wed Dec 28 16:37:28 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Thu, 29 Dec 2016 10:37:28 +1100
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate
	Announcement
In-Reply-To: <2da9e7e0-4acf-d9af-9039-72533d3bfb24@egh.com>
References: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
 <2da9e7e0-4acf-d9af-9039-72533d3bfb24@egh.com>
Message-ID: <21B58730-1090-443C-A3CF-01E66C79D989@atleastfornow.net>

Hi John,

.whl is just an optimised binary format, and can be installed by pip from a local file. If you want to get all the dependencies of Twisted in a future-proof way, without network on production, just do this on a machine with the same arch/OS:

hawkowl /p/t/tx> pip download twisted[tls]==16.7.0rc1
[LOADING BARS ELINED]
Successfully downloaded twisted zope.interface constantly incremental Automat pyopenssl service-identity idna setuptools six characteristic cryptography pyasn1 pyasn1-modules attrs ipaddress enum34 cffi pycparser

hawkowl /p/t/tx> ls
Automat-0.3.0-py2.py3-none-any.whl                      ipaddress-1.0.17-py2-none-any.whl
Twisted-16.7.0rc1.tar.bz2                               pyOpenSSL-16.2.0-py2.py3-none-any.whl
attrs-16.3.0-py2.py3-none-any.whl                       pyasn1-0.1.9-py2.py3-none-any.whl
cffi-1.9.1-cp27-cp27m-macosx_10_10_intel.whl            pyasn1_modules-0.0.8-py2.py3-none-any.whl
characteristic-14.3.0-py2.py3-none-any.whl              pycparser-2.17.tar.gz
constantly-15.1.0-py2.py3-none-any.whl                  service_identity-16.0.0-py2.py3-none-any.whl
cryptography-1.7.1-cp27-cp27m-macosx_10_10_intel.whl    setuptools-32.3.0-py2.py3-none-any.whl
enum34-1.1.6-py2-none-any.whl                           six-1.10.0-py2.py3-none-any.whl
idna-2.2-py2.py3-none-any.whl                           zope.interface-4.3.3-cp27-cp27m-macosx_10_11_x86_64.whl
incremental-16.10.1-py2.py3-none-any.whl

Put these files on the target machine. Then on the target machine, with no internet connection:

hawkowl /p/t/tx> virtualenv venv
Using real prefix '/System/Library/Frameworks/Python.framework/Versions/2.7'
New python executable in /private/tmp/tx/venv/bin/python
Installing setuptools, pip, wheel...done.

# Because incremental is setup_requires on twisted, install it explicitly or setuptools will go try and fetch it
hawkowl /p/t/tx [1]> venv/bin/pip install --no-index --find-links ./ incremental
Collecting incremental
Installing collected packages: incremental
Successfully installed incremental-16.10.1

hawkowl /p/t/tx> venv/bin/pip install --no-index --find-links ./ twisted[tls]
Collecting twisted[tls]
Collecting Automat>=0.3.0 (from twisted[tls])
Collecting zope.interface>=3.6.0 (from twisted[tls])
Collecting constantly>=15.1 (from twisted[tls])
Requirement already satisfied: incremental>=16.10.1 in ./venv/lib/python2.7/site-packages (from twisted[tls])
Collecting service-identity; extra == "tls" (from twisted[tls])
Collecting idna>=0.6; extra == "tls" (from twisted[tls])
Collecting pyopenssl>=16.0.0; extra == "tls" (from twisted[tls])
Requirement already satisfied: six in ./venv/lib/python2.7/site-packages (from Automat>=0.3.0->twisted[tls])
Requirement already satisfied: characteristic in ./venv/lib/python2.7/site-packages (from Automat>=0.3.0->twisted[tls])
Requirement already satisfied: setuptools in ./venv/lib/python2.7/site-packages (from zope.interface>=3.6.0->twisted[tls])
Collecting pyasn1 (from service-identity; extra == "tls"->twisted[tls])
Collecting pyasn1-modules (from service-identity; extra == "tls"->twisted[tls])
Requirement already satisfied: attrs in ./venv/lib/python2.7/site-packages (from service-identity; extra == "tls"->twisted[tls])
Collecting cryptography>=1.3.4 (from pyopenssl>=16.0.0; extra == "tls"->twisted[tls])
Collecting ipaddress (from cryptography>=1.3.4->pyopenssl>=16.0.0; extra == "tls"->twisted[tls])
Collecting enum34 (from cryptography>=1.3.4->pyopenssl>=16.0.0; extra == "tls"->twisted[tls])
Collecting cffi>=1.4.1 (from cryptography>=1.3.4->pyopenssl>=16.0.0; extra == "tls"->twisted[tls])
Collecting pycparser (from cffi>=1.4.1->cryptography>=1.3.4->pyopenssl>=16.0.0; extra == "tls"->twisted[tls])
Installing collected packages: Automat, zope.interface, constantly, pyasn1, pyasn1-modules, idna, ipaddress, enum34, pycparser, cffi, cryptography, pyopenssl, service-identity, twisted
Successfully installed Automat-0.3.0 cffi-1.9.1 constantly-15.1.0 cryptography-1.7.1 enum34-1.1.6 idna-2.2 ipaddress-1.0.17 pyasn1-0.1.9 pyasn1-modules-0.0.8 pycparser-2.17 pyopenssl-16.2.0 service-identity-16.0.0 twisted-16.7.0rc1 zope.interface-4.3.3

This will install Twisted and its dependencies the official pip way, without needing to hardcode which libraries you fetch, and will do the right thing as Twisted eventually adds more dependencies (like when we split out FilePath and Deferred).

- Amber

> On 29 Dec. 2016, at 10:20, John Santos <john at egh.com> wrote:
> 
> Seems to require a new Python module, Automat.  (Not mentioned in the NEWS file, INSTALL, etc.)  I found Automat 0.3.0 (with Glyph's fingerprints on it) at PyPI, but it only exists in .whl format.  Downloaded it, but I'm not sure what to do next.  I was able to get it working by downloading and installing get-pip.py and Automat (contrary to the python.org documentation, I didn't have pip installed on my system even though it is Python 2.7.13 downloaded from python.org.)
>    sudo python get-pip.py
>    sudo pip install Automat
> 
> This is worrisome to me because I think this requires Internet access to pypi.python.org, which I have on my development and testing systems, but not on my production systems.  Everything else I've ever needed, I could download and install source files.
> 
> Having done this, my app seems to run fine (only quick sanity testing so far.)
> 
> 
> ----install---
> Searching for Automat>=0.3.0
> Reading https://pypi.python.org/simple/Automat/ <https://pypi.python.org/simple/Automat/>
> Download error on https://pypi.python.org/simple/Automat/ <https://pypi.python.org/simple/Automat/>: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:590) -- Some packages may not be found!
> Couldn't find index page for 'Automat' (maybe misspelled?)
> Scanning index of all packages (this may take a while)
> Reading https://pypi.python.org/simple/ <https://pypi.python.org/simple/>
> Download error on https://pypi.python.org/simple/ <https://pypi.python.org/simple/>: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:590) -- Some packages may not be found!
> No local packages or working download links found for Automat>=0.3.0
> error: Could not find suitable distribution for Requirement.parse('Automat>=0.3.0')
> ------
> 
> ---try to use without Automat---
> medusa at Medusa:~/run> python medusa_server.py Rain
> Traceback (most recent call last):
>   File "medusa_server.py", line 72, in <module>
>     from twisted.application import service, internet
>   File "/usr/lib/python2.7/site-packages/Twisted-16.7.0rc1-py2.7-linux-x86_64.egg/twisted/application/internet.py", line 54, in <module>
>     from automat import MethodicalMachine
> ImportError: No module named automat
> ------
> 
> On 12/22/2016 11:33 PM, Amber "Hawkie" Brown wrote:
>> Hello everyone, and happy holidays!
>> 
>> Although it didn't quite fall on the solstice, one could call this Twisted release a little ray of sunshine, with some nice new improvements. 16.7.0rc1 brings the following stocking stuffers:
>> 
>> - twisted.web.client.Agent now supports IPv6! It's also now the primary web client in Twisted, with twisted.web.client.getPage being deprecated in favour of it and Treq.
>> - twisted.internet.ssl.CertificateOptions has had its `method` argument deprecated, in favour of the new raiseMinimumTo, lowerMaximumSecurityTo, and insecurelyLowerMinimumTo arguments, which take TLSVersion arguments. This allows you to better give a range of versions of TLS you wish to negotiate, rather than forcing yourself to any one version.
>> - twisted.internet.ssl.CertificateOptions will use OpenSSL's MODE_RELEASE_BUFFERS, which will let it free unused memory that was held by idle TLS connections.
>> - You can now call the new twist runner with `python -m twisted`.
>> - Conch has the beginnings of ECDH key exchange, and supports `hmac-sha2-384` in twisted.conch.ssh.
>> - Better Unicode support in twisted.internet.reactor.spawnProcess, especially on Windows on Python 3.6.
>> - More Python 3 porting in Conch, and more under-the-hood changes to facilitate a Twisted-wide jump to new-style classes only on Python 2 in 2018/2019. This release has also been tested on Python 3.6 on Linux.
>> - Lots of deprecated code removals, to make a sleeker, less confusing Twisted.
>> - 20+ closed tickets.
>> 
>> You can get the tarball and the NEWS file at https://twistedmatrix.com/Releases/rc/16.7.0rc1/ <https://twistedmatrix.com/Releases/rc/16.7.0rc1/> , or you can try it out from PyPI:
>> 
>>     python -m pip install Twisted==16.7.0rc1
>> 
>> Please test it, and let me know how your applications fare, good or bad! If nothing comes up, 16.7 looks like it'll land just before the new year.
>> 
>> With festive hoots,
>>     Amber Brown
>> 
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> 
> 
> -- 
> John Santos
> Evans Griffiths & Hart, Inc.
> 781-861-0670 ext 539
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161229/350d4896/attachment-0001.html>

From chenjianhappy2008 at 126.com  Wed Dec 28 19:39:18 2016
From: chenjianhappy2008 at 126.com (=?GBK?B?s8K9oQ==?=)
Date: Thu, 29 Dec 2016 10:39:18 +0800 (CST)
Subject: [Twisted-Python] hmac-sha2-512 - Corrupted MAC on input with
 OpenSSH
In-Reply-To: <CAG=rPVccsxgVBpb_QarfK4=i+ti_9dpfGWMmJtm7ghP-qTytyA@mail.gmail.com>
References: <7aa77b23.1f5e.1591f6015fc.Coremail.chenjianhappy2008@126.com>
 <CAG=rPVccsxgVBpb_QarfK4=i+ti_9dpfGWMmJtm7ghP-qTytyA@mail.gmail.com>
Message-ID: <789d21f8.2a9f.1594872283e.Coremail.chenjianhappy2008@126.com>




hi:
    Oh, I'm sorry,  It is my server-side code has bugs with Twisted(16.6.0) Conch, that i have fixed it . But 'Message Authentication Code did not verify (packet #3)'  error will occurs with the SecureCRT(8.0.0 or 7.3.4) client.  If I connect OpenSSH_5.3p1 (or OpenSSH_6.6.1p1 ) sshd server through the SecureCRT client, it is fine. Of course? if I connect Twisted SSH server by using the Xshell client with hmac-sha2-512 options or ?ssh -m hmac-sha2-512??it is OK.  I do not know if it is SecureCRT client  bug or  twisted problem.  http://stackoverflow.com/questions/41296412/securecrt-hmac-sha2-512-message-authentication-code-did-not-verify-packet-3






At 2016-12-29 01:40:07, "Craig Rodrigues" <rodrigc at crodrigues.org> wrote:

Jianchen,


Can you provide more details about the server you are writing?


I cannot reproduce your problem with the latest Twisted code in trunk.


Here is what I did:




git clone https://github.com/twisted/twisted twisted-test
cd twisted-test
python setup.py develop
cd docs/conch/examples
mkdir ssh-examples
ckeygen -t rsa -f ssh-keys/ssh_host_rsa_key
twistd -ny demo_recvline.tac




I logged in with:






sshusername at 127.0.0.1 -m hmac-sha2-512 -vvv -p 6022



(using username for the login, and  password for the password)

From the log, I saw:




debug1: Authenticating to 127.0.0.1:6022 as 'username'
debug3: put_host_port: [127.0.0.1]:6022
debug3: hostkeys_foreach: reading file "/Users/crodrigues/.ssh/known_hosts"
debug3: record_hostkey: found key type RSA in file /Users/crodrigues/.ssh/known_hosts:5
debug3: load_hostkeys: loaded 1keys from [127.0.0.1]:6022
debug3: order_hostkeyalgs: prefer hostkeyalgs: ssh-rsa-cert-v01 at openssh.com,rsa-sha2-512,rsa-sha2-256,ssh-rsa
debug3: send packet: type 20
debug1: SSH2_MSG_KEXINIT sent
debug3: receive packet: type 20
debug1: SSH2_MSG_KEXINIT received
debug2: local client KEXINIT proposal
debug2: KEX algorithms: curve25519-sha256 at libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha256,diffie-hellman-group14-sha1,ext-info-c
debug2: host key algorithms: ssh-rsa-cert-v01 at openssh.com,rsa-sha2-512,rsa-sha2-256,ssh-rsa,ecdsa-sha2-nistp256-cert-v01 at openssh.com,ecdsa-sha2-nistp384-cert-v01 at openssh.com,ecdsa-sha2-nistp521-cert-v01 at openssh.com,ssh-ed25519-cert-v01 at openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519
debug2: ciphers ctos: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,3des-cbc
debug2: ciphers stoc: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,3des-cbc
debug2: MACs ctos: hmac-sha2-512
debug2: MACs stoc: hmac-sha2-512
debug2: compression ctos: none,zlib at openssh.com,zlib
debug2: compression stoc: none,zlib at openssh.com,zlib
debug2: languages ctos:
debug2: languages stoc:
debug2: first_kex_follows 0
debug2: reserved 0
debug2: peer server KEXINIT proposal
debug2: KEX algorithms: ecdh-sha2-nistp256,ecdh-sha2-nistk163,ecdh-sha2-nistp224,ecdh-sha2-nistk233,ecdh-sha2-nistb233,ecdh-sha2-nistp384,ecdh-sha2-nistk283,ecdh-sha2-nistk409,ecdh-sha2-nistb409,ecdh-sha2-nistp521,ecdh-sha2-nistt571,diffie-hellman-group1-sha1,diffie-hellman-group14-sha1
debug2: host key algorithms: ssh-rsa
debug2: ciphers ctos: aes256-ctr,aes256-cbc,aes192-ctr,aes192-cbc,aes128-ctr,aes128-cbc,cast128-ctr,cast128-cbc,blowfish-cbc,3des-cbc
debug2: ciphers stoc: aes256-ctr,aes256-cbc,aes192-ctr,aes192-cbc,aes128-ctr,aes128-cbc,cast128-ctr,cast128-cbc,blowfish-cbc,3des-cbc

debug2: MACs ctos: hmac-sha2-512,hmac-sha2-384,hmac-sha2-256,hmac-sha1,hmac-md5

debug2: compression ctos: none,zlib

debug2: compression stoc: none,zlib
debug2: languages ctos:
debug2: languages stoc:debug2: first_kex_follows 0
debug2: reserved 0
debug1: kex: algorithm: ecdh-sha2-nistp256
debug1: kex: host key algorithm: ssh-rsa
debug1: kex: server->client cipher: aes128-ctr MAC: hmac-sha2-512 compression: none
debug1: kex: client->server cipher: aes128-ctr MAC: hmac-sha2-512 compression: none
debug3: send packet: type 30
debug1: sending SSH2_MSG_KEX_ECDH_INIT
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug3: receive packet: type 31
debug1: Server host key: ssh-rsa SHA256:VP7JUyzN/BuRNuCOieijGHuF9fAylDBCYYJAtJ+gDO8
debug3: put_host_port: [127.0.0.1]:6022
debug3: put_host_port: [127.0.0.1]:6022
debug3: hostkeys_foreach: reading file "/Users/crodrigues/.ssh/known_hosts"
debug3: record_hostkey: found key type RSA in file /Users/crodrigues/.ssh/known_hosts:5
debug3: load_hostkeys: loaded 1keys from [127.0.0.1]:6022
debug1: Host '[127.0.0.1]:6022' is known and matches the RSA host key.
debug1: Found key in /Users/crodrigues/.ssh/known_hosts:5
debug3: send packet: type 21
debug2: set_newkeys: mode 1




I did not see the problem that you saw.

--
Craig




On Tue, Dec 20, 2016 at 10:15 PM, ?? <chenjianhappy2008 at 126.com> wrote:

 hi:
|
|

    I write a SSH server with Twisted(15.5.0)  Conch.  But it  don't support hmac-sha2-512 MAC algorithms

|
.  However I see this problem has been fixed in https://twistedmatrix.com/trac/ticket/8108 .  I asked the question in http://stackoverflow.com/questions/41254398/twisted-hmac-sha2-512-corrupted-mac-on-input-with-openssh .

Best regards,

 ---jianchen






 


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161229/0b7a752c/attachment-0001.html>

From rodrigc at crodrigues.org  Wed Dec 28 21:35:57 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 28 Dec 2016 23:35:57 -0500
Subject: [Twisted-Python] hmac-sha2-512 - Corrupted MAC on input with
	OpenSSH
In-Reply-To: <789d21f8.2a9f.1594872283e.Coremail.chenjianhappy2008@126.com>
References: <7aa77b23.1f5e.1591f6015fc.Coremail.chenjianhappy2008@126.com>
 <CAG=rPVccsxgVBpb_QarfK4=i+ti_9dpfGWMmJtm7ghP-qTytyA@mail.gmail.com>
 <789d21f8.2a9f.1594872283e.Coremail.chenjianhappy2008@126.com>
Message-ID: <CAG=rPVfLo__eEH=5k2uTLUHRjsU1p3OmvM5dZmcucE_3xF1mtQ@mail.gmail.com>

Hi,

Is this what you are saying:

Twisted Server + OpenSSH client == WORKS
Twisted Server + Xshell client == WORKS
OpenSSH Server + SecureCRT client == WORKS
Twisted Server + SecureCRT client == FAIL

??

I don't have SecureCRT client, so don't know the solution to this problem.

You might want to try searching the SecureCRT site and see if there are any
clues
there:

https://goo.gl/UkKZvI

--
Craig

On Wed, Dec 28, 2016 at 9:39 PM, ?? <chenjianhappy2008 at 126.com> wrote:

>
>
> hi:
>     Oh, I'm sorry,  It is my server-side code has bugs with
> Twisted(16.6.0) Conch, that i have fixed it . But 'Message Authentication
> Code did not verify (packet #3)'  error will occurs with the SecureCRT(8.0.0
> or 7.3.4) client.  If I connect OpenSSH_5.3p1 (or OpenSSH_6.6.1p1 ) sshd
> server through the SecureCRT client, it is fine. Of course? if I connect
> Twisted SSH server by using the Xshell client with hmac-sha2-512 options
> or ?ssh -m hmac-sha2-512??it is OK.  I do not know if it is SecureCRT
> client  bug or  twisted problem.  *http://stackoverflow.com/questions/41296412/securecrt-hmac-sha2-512-message-authentication-code-did-not-verify-packet-3
> <http://stackoverflow.com/questions/41296412/securecrt-hmac-sha2-512-message-authentication-code-did-not-verify-packet-3>*
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161228/0960640e/attachment.html>

From chenjianhappy2008 at 126.com  Thu Dec 29 02:47:22 2016
From: chenjianhappy2008 at 126.com (=?GBK?B?s8K9oQ==?=)
Date: Thu, 29 Dec 2016 17:47:22 +0800 (CST)
Subject: [Twisted-Python] hmac-sha2-512 - Corrupted MAC on input with
 OpenSSH
In-Reply-To: <CAG=rPVfgyZLJPcAqrP3jKxEq56ACqwUhcMZBzRxJN0kA5CwMwA@mail.gmail.com>
References: <7aa77b23.1f5e.1591f6015fc.Coremail.chenjianhappy2008@126.com>
 <CAG=rPVccsxgVBpb_QarfK4=i+ti_9dpfGWMmJtm7ghP-qTytyA@mail.gmail.com>
 <789d21f8.2a9f.1594872283e.Coremail.chenjianhappy2008@126.com>
 <CAG=rPVfLo__eEH=5k2uTLUHRjsU1p3OmvM5dZmcucE_3xF1mtQ@mail.gmail.com>
 <208038e.575c.159493a0c1a.Coremail.chenjianhappy2008@126.com>
 <CAG=rPVfgyZLJPcAqrP3jKxEq56ACqwUhcMZBzRxJN0kA5CwMwA@mail.gmail.com>
Message-ID: <1901fa6f.954e.15949fa1388.Coremail.chenjianhappy2008@126.com>

hi,
       Yes, you are right. ssh -vv -oKexAlgorithms=diffie-hellman-group14-sha1 -oMACs=hmac-sha2-512 user at localhost
against a Twisted ssh server, and i saw the problem.  The reason is that twisted(16.6.0) is not supported the diffie-hellman-group14-sha1 and ecdh-sha512-nistp512 key exchange algorithms well, right ?


--

JianChen



At 2016-12-29 16:06:55, "Craig Rodrigues" <rodrigc at crodrigues.org> wrote:

Abhishek Choudhary pointed out to me that you can reproduce this problem easily, even with OpenSSH client.
Look at https://twistedmatrix.com/trac/ticket/8258


and do:



ssh -vv -oKexAlgorithms=diffie-hellman-group14-sha1 -oMACs=hmac-sha2-512 user at localhost

against a Twisted ssh server, and you will see the problem.




--

Craig






On Thu, Dec 29, 2016 at 1:17 AM, ?? <chenjianhappy2008 at 126.com> wrote:



hi,
    Yes, your understanding is correct. I must set the hmac-sha2-512 option unable with SecureCRT, it will be OK. I searched Google for a long time, still did not find the any clues!
   
          Twisted Server + OpenSSH client == WORKS
          Twisted Server + Xshell client == WORKS
          OpenSSH Server + SecureCRT client == WORKS
          Twisted Server + SecureCRT client == FAIL


--
JianChen



? 2016-12-29 12:35:57?"Craig Rodrigues" <rodrigc at crodrigues.org> ???

Hi,


Is this what you are saying:


Twisted Server + OpenSSH client == WORKS
Twisted Server + Xshell client == WORKS
OpenSSH Server + SecureCRT client == WORKS
Twisted Server + SecureCRT client == FAIL


??


I don't have SecureCRT client, so don't know the solution to this problem.


You might want to try searching the SecureCRT site and see if there are any clues
there:


https://goo.gl/UkKZvI



--
Craig


On Wed, Dec 28, 2016 at 9:39 PM, ?? <chenjianhappy2008 at 126.com> wrote:




hi:
    Oh, I'm sorry,  It is my server-side code has bugs with Twisted(16.6.0) Conch, that i have fixed it . But 'Message Authentication Code did not verify (packet #3)'  error will occurs with the SecureCRT(8.0.0 or 7.3.4) client.  If I connect OpenSSH_5.3p1 (or OpenSSH_6.6.1p1 ) sshd server through the SecureCRT client, it is fine. Of course? if I connect Twisted SSH server by using the Xshell client with hmac-sha2-512 options or ?ssh -m hmac-sha2-512??it is OK.  I do not know if it is SecureCRT client  bug or  twisted problem.  http://stackoverflow.com/questions/41296412/securecrt-hmac-sha2-512-message-authentication-code-did-not-verify-packet-3






 


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161229/dca1504f/attachment.html>

From rodrigc at crodrigues.org  Thu Dec 29 03:30:19 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 29 Dec 2016 05:30:19 -0500
Subject: [Twisted-Python] hmac-sha2-512 - Corrupted MAC on input with
 OpenSSH
In-Reply-To: <1901fa6f.954e.15949fa1388.Coremail.chenjianhappy2008@126.com>
References: <7aa77b23.1f5e.1591f6015fc.Coremail.chenjianhappy2008@126.com>
 <CAG=rPVccsxgVBpb_QarfK4=i+ti_9dpfGWMmJtm7ghP-qTytyA@mail.gmail.com>
 <789d21f8.2a9f.1594872283e.Coremail.chenjianhappy2008@126.com>
 <CAG=rPVfLo__eEH=5k2uTLUHRjsU1p3OmvM5dZmcucE_3xF1mtQ@mail.gmail.com>
 <208038e.575c.159493a0c1a.Coremail.chenjianhappy2008@126.com>
 <CAG=rPVfgyZLJPcAqrP3jKxEq56ACqwUhcMZBzRxJN0kA5CwMwA@mail.gmail.com>
 <1901fa6f.954e.15949fa1388.Coremail.chenjianhappy2008@126.com>
Message-ID: <CAG=rPVcDhh5Q2Higv_qEC07pfZwev4UifRihitG-2Rqrtsywbw@mail.gmail.com>

Hi,

Well in Twisted checked out directly from GitHub, this seems to work:

ssh -vv -oKexAlgorithms=ecdh-sha2-nistp256 -oMACs=hmac-sha2-512
user at localhost

and these fail:

ssh -vv -oKexAlgorithms=diffie-hellman-group1-sha1 -oMACs=hmac-sha2-512
user at localhost
ssh -vv -oKexAlgorithms=diffie-hellman-group14-sha1 -oMACs=hmac-sha2-512
user at localhost
ssh -vv -oKexAlgorithms=ecdh-sha2-nistp384 -oMACs=hmac-sha2-512
user at localhost
ssh -vv -oKexAlgorithms=ecdh-sha2-nistp521 -oMACs=hmac-sha2-512
user at localhost

--
Craig


On Thu, Dec 29, 2016 at 4:47 AM, ?? <chenjianhappy2008 at 126.com> wrote:

> hi,
>        Yes, you are right. ssh -vv -oKexAlgorithms=diffie-hellman-group14-sha1
> -oMACs=hmac-sha2-512 user at localhost
> against a Twisted ssh server, and i saw the problem.  The reason is that
> twisted(16.6.0) is not supported the diffie-hellman-group14-sha1 and ecdh-sha512-nistp512
> key exchange algorithms well, right ?
>
> --
>
> JianChen
>
>
> At 2016-12-29 16:06:55, "Craig Rodrigues" <rodrigc at crodrigues.org> wrote:
>
> Abhishek Choudhary pointed out to me that you can reproduce this problem
> easily, even with OpenSSH client.
> Look at https://twistedmatrix.com/trac/ticket/8258
>
> and do:
>
> ssh -vv -oKexAlgorithms=diffie-hellman-group14-sha1 -oMACs=hmac-sha2-512
> user at localhost
>
> against a Twisted ssh server, and you will see the problem.
>
>
> --
>
> Craig
>
>
>
> On Thu, Dec 29, 2016 at 1:17 AM, ?? <chenjianhappy2008 at 126.com> wrote:
>
>>
>> hi,
>>     Yes, your understanding is correct. I must set the hmac-sha2-512
>> option unable with SecureCRT, it will be OK. I searched Google for a long
>> time, still did not find the any clues!
>>
>>           Twisted Server + OpenSSH client == WORKS
>>           Twisted Server + Xshell client == WORKS
>>           OpenSSH Server + SecureCRT client == WORKS
>>           Twisted Server + SecureCRT client == FAIL
>>
>> --
>> JianChen
>>
>>
>> ? 2016-12-29 12:35:57?"Craig Rodrigues" <rodrigc at crodrigues.org> ???
>>
>> Hi,
>>
>> Is this what you are saying:
>>
>> Twisted Server + OpenSSH client == WORKS
>> Twisted Server + Xshell client == WORKS
>> OpenSSH Server + SecureCRT client == WORKS
>> Twisted Server + SecureCRT client == FAIL
>>
>> ??
>>
>> I don't have SecureCRT client, so don't know the solution to this problem.
>>
>> You might want to try searching the SecureCRT site and see if there are
>> any clues
>> there:
>>
>> https://goo.gl/UkKZvI
>>
>> --
>> Craig
>>
>> On Wed, Dec 28, 2016 at 9:39 PM, ?? <chenjianhappy2008 at 126.com> wrote:
>>
>>>
>>>
>>> hi:
>>>     Oh, I'm sorry,  It is my server-side code has bugs with
>>> Twisted(16.6.0) Conch, that i have fixed it . But 'Message
>>> Authentication Code did not verify (packet #3)'  error will occurs with
>>> the SecureCRT(8.0.0 or 7.3.4) client.  If I connect OpenSSH_5.3p1 (or
>>> OpenSSH_6.6.1p1 ) sshd server through the SecureCRT client, it is fine.
>>> Of course? if I connect Twisted SSH server by using the Xshell client with
>>> hmac-sha2-512 options or ?ssh -m hmac-sha2-512??it is OK.  I do not
>>> know if it is SecureCRT client  bug or  twisted problem.  *http://stackoverflow.com/questions/41296412/securecrt-hmac-sha2-512-message-authentication-code-did-not-verify-packet-3
>>> <http://stackoverflow.com/questions/41296412/securecrt-hmac-sha2-512-message-authentication-code-did-not-verify-packet-3>*
>>>
>>>
>>
>>
>>
>
>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161229/a7835226/attachment-0001.html>

From glyph at twistedmatrix.com  Thu Dec 29 05:23:44 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 29 Dec 2016 04:23:44 -0800
Subject: [Twisted-Python] twisted.python.sendmsg segfault - looking for
 confirmation
In-Reply-To: <4F35146F-E43C-437F-B33A-4F6CEA9343F6@gmail.com>
References: <4F35146F-E43C-437F-B33A-4F6CEA9343F6@gmail.com>
Message-ID: <EA9B12E5-C604-4E2D-B8D6-72A509DE827E@twistedmatrix.com>


> On Dec 27, 2016, at 19:15, ex vito <ex.vitorino at gmail.com> wrote:
> 
> As far as I can tell, no code in Twisted uses sendmsg in the way the code is using it. However, twisted.python.sendmsg is a public API so someone somewhere may hit this like I just did.

Quite.

> Other than looking for confirmation, I have a fix which I included two isolated commits in the PR. Twisted project members: if this is confirmed, maybe a ticket should be created in Trac and an independent PR created, correct?

You should definitely create that ticket.  In fact, you don't need to wait for confirmation - create the ticket now, and send the link to it, so someone else can comment on the ticket when it is confirmed - discussion of the reproduction process can happen there.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161229/b00080fa/attachment.html>

From glyph at twistedmatrix.com  Thu Dec 29 06:27:44 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 29 Dec 2016 05:27:44 -0800
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate
	Announcement
In-Reply-To: <2da9e7e0-4acf-d9af-9039-72533d3bfb24@egh.com>
References: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
 <2da9e7e0-4acf-d9af-9039-72533d3bfb24@egh.com>
Message-ID: <8CFE76D7-FB88-4734-9015-8FF36D57F0FD@twistedmatrix.com>


> On Dec 28, 2016, at 15:20, John Santos <JOHN at egh.com> wrote:
> 
> Seems to require a new Python module, Automat.

Good catch, that probably should have been announced at least a little :).

> (Not mentioned in the NEWS file, INSTALL, etc.)

Despite the fact that it would have been good to mention this particular dependency because its adoption is a new architectural direction for Twisted, in general we're actually planning to do less communication of dependencies in this way.  Right now, we have redundant listing of dependencies in a few places, but in the future, setup.py (or more specifically, "packaging metadata") will be the one, authoritative place that such things are listed.

> I found Automat 0.3.0 (with Glyph's fingerprints on it) at PyPI, but it only exists in .whl format.

Although you probably should just use the wheel, the fact that there was only a wheel was an oversight.  I've uploaded an sdist and pushed a corresponding tag (after making sure that the source files all matched, of course).

> Downloaded it, but I'm not sure what to do next.  [...] This is worrisome to me because I think this requires Internet access to pypi.python.org, which I have on my development and testing systems, but not on my production systems.  Everything else I've ever needed, I could download and install source files.


As Amber already explained, the ability to deploy offline is very much an important part of the pip/wheel ecosystem.  I went into some detail in one of my own blog posts on this: https://glyph.twistedmatrix.com/2015/03/docker-deploy-double-dutch.html <https://glyph.twistedmatrix.com/2015/03/docker-deploy-double-dutch.html>

Increasingly, we are assuming a pip-like packaging toolchain for dealing with Twisted's dependencies, so getting familiar with this stuff - pip, requirements.txt, pinning, virtualenv - is worthwhile.  (It'll make your life easier in more ways than one.)  It should handily meet all your requirements for security and flexibility, and if it doesn't, we have a good working relationship with the maintainers of all those tools so we'd like to hear about if it's a problem :).

> Having done this, my app seems to run fine (only quick sanity testing so far.)

Thanks for testing!

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161229/97115783/attachment.html>

From glyph at twistedmatrix.com  Thu Dec 29 06:28:44 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 29 Dec 2016 05:28:44 -0800
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate
	Announcement
In-Reply-To: <CAEeXt4Nj3LmqZn_b3CdULwG=nu565xKpZx52i6aG3WjNHW5-4w@mail.gmail.com>
References: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
 <8EE8E179-EA0A-47EC-9449-6D7C3D8F7260@gmail.com>
 <E19C9739-651D-4E4A-BA39-D37C060F89D6@twistedmatrix.com>
 <A12AF755-CE71-4C4A-883F-D36F9DDD8E29@twistedmatrix.com>
 <CAEeXt4Nj3LmqZn_b3CdULwG=nu565xKpZx52i6aG3WjNHW5-4w@mail.gmail.com>
Message-ID: <083421AA-BD84-46E4-BE4B-7AD81B5F280A@twistedmatrix.com>


> On Dec 26, 2016, at 16:14, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> On Fri, Dec 23, 2016 at 4:22 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> 
> It's merged now: https://twistedmatrix.com/trac/ticket/8911#comment:5 <https://twistedmatrix.com/trac/ticket/8911#comment:5>
> 
> On a related note - this still linked the '#' syntax back to the ticket number in Trac.
> 
> Perhaps related - tomprince fixed the bugs that were preventing us from upgrading us to 1.2, and upgraded us to 1.2.  So perhaps this has introduced a problem :).
> 
> -glyph
> 
> 
> It looks like the link to ticket 599 in the merge/resolve comment on ticket 8911 is a different kind of link than the one I was looking in to.  I agree it would be nice to fix this, too, and perhaps I'll take a look.  My goal was only to stop ticket 599 (for example) from also receiving a copy of this comment - which appears to have succeeded.  Let me know if I've missed something.

Sorry - this is fine.  I mistakenly assumed that the fact that the link was highlighted meant that the comment happened.  If we were to kill '#' links, that would also break all the existing commit messages, which would be bad.  So please leave it as-is!

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161229/a672a166/attachment.html>

From john at egh.com  Thu Dec 29 10:43:22 2016
From: john at egh.com (John Santos)
Date: Thu, 29 Dec 2016 12:43:22 -0500
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate
	Announcement
In-Reply-To: <21B58730-1090-443C-A3CF-01E66C79D989@atleastfornow.net>
References: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
 <2da9e7e0-4acf-d9af-9039-72533d3bfb24@egh.com>
 <21B58730-1090-443C-A3CF-01E66C79D989@atleastfornow.net>
Message-ID: <02990d9e-4884-f1ad-2220-c9a5de7c605f@egh.com>

Thank you (and Glyph for his followup) for the detailed instructions.  I 
will be trying this on our 2nd development system in a few days (or 
possibly sooner on the test system if 16.7.0 is released before I get 
around to it :-)) and will let you know if I encounter any difficulties.


On 12/28/2016 6:37 PM, Amber "Hawkie" Brown wrote:
> Hi John,
>
> .whl is just an optimised binary format, and can be installed by pip 
> from a local file. If you want to get all the dependencies of Twisted 
> in a future-proof way, without network on production, just do this on 
> a machine with the same arch/OS:
>
> hawkowl /p/t/tx> pip download twisted[tls]==16.7.0rc1
> [LOADING BARS ELINED]
> Successfully downloaded twisted zope.interface constantly incremental 
> Automat pyopenssl service-identity idna setuptools six characteristic 
> cryptography pyasn1 pyasn1-modules attrs ipaddress enum34 cffi pycparser
>
> hawkowl /p/t/tx> ls
> Automat-0.3.0-py2.py3-none-any.whl      ipaddress-1.0.17-py2-none-any.whl
> Twisted-16.7.0rc1.tar.bz2       pyOpenSSL-16.2.0-py2.py3-none-any.whl
> attrs-16.3.0-py2.py3-none-any.whl       pyasn1-0.1.9-py2.py3-none-any.whl
> cffi-1.9.1-cp27-cp27m-macosx_10_10_intel.whl     
>  pyasn1_modules-0.0.8-py2.py3-none-any.whl
> characteristic-14.3.0-py2.py3-none-any.whl      pycparser-2.17.tar.gz
> constantly-15.1.0-py2.py3-none-any.whl     
>  service_identity-16.0.0-py2.py3-none-any.whl
> cryptography-1.7.1-cp27-cp27m-macosx_10_10_intel.whl   
>  setuptools-32.3.0-py2.py3-none-any.whl
> enum34-1.1.6-py2-none-any.whl       six-1.10.0-py2.py3-none-any.whl
> idna-2.2-py2.py3-none-any.whl       
> zope.interface-4.3.3-cp27-cp27m-macosx_10_11_x86_64.whl
> incremental-16.10.1-py2.py3-none-any.whl
>
> Put these files on the target machine. Then on the target machine, 
> with no internet connection:
>
> hawkowl /p/t/tx> virtualenv venv
> Using real prefix 
> '/System/Library/Frameworks/Python.framework/Versions/2.7'
> New python executable in /private/tmp/tx/venv/bin/python
> Installing setuptools, pip, wheel...done.
>
> # Because incremental is setup_requires on twisted, install it 
> explicitly or setuptools will go try and fetch it
> hawkowl /p/t/tx [1]> venv/bin/pip install --no-index --find-links ./ 
> incremental
> Collecting incremental
> Installing collected packages: incremental
> Successfully installed incremental-16.10.1
>
> hawkowl /p/t/tx> venv/bin/pip install --no-index --find-links ./ 
> twisted[tls]
> Collecting twisted[tls]
> Collecting Automat>=0.3.0 (from twisted[tls])
> Collecting zope.interface>=3.6.0 (from twisted[tls])
> Collecting constantly>=15.1 (from twisted[tls])
> Requirement already satisfied: incremental>=16.10.1 in 
> ./venv/lib/python2.7/site-packages (from twisted[tls])
> Collecting service-identity; extra == "tls" (from twisted[tls])
> Collecting idna>=0.6; extra == "tls" (from twisted[tls])
> Collecting pyopenssl>=16.0.0; extra == "tls" (from twisted[tls])
> Requirement already satisfied: six in 
> ./venv/lib/python2.7/site-packages (from Automat>=0.3.0->twisted[tls])
> Requirement already satisfied: characteristic in 
> ./venv/lib/python2.7/site-packages (from Automat>=0.3.0->twisted[tls])
> Requirement already satisfied: setuptools in 
> ./venv/lib/python2.7/site-packages (from 
> zope.interface>=3.6.0->twisted[tls])
> Collecting pyasn1 (from service-identity; extra == "tls"->twisted[tls])
> Collecting pyasn1-modules (from service-identity; extra == 
> "tls"->twisted[tls])
> Requirement already satisfied: attrs in 
> ./venv/lib/python2.7/site-packages (from service-identity; extra == 
> "tls"->twisted[tls])
> Collecting cryptography>=1.3.4 (from pyopenssl>=16.0.0; extra == 
> "tls"->twisted[tls])
> Collecting ipaddress (from cryptography>=1.3.4->pyopenssl>=16.0.0; 
> extra == "tls"->twisted[tls])
> Collecting enum34 (from cryptography>=1.3.4->pyopenssl>=16.0.0; extra 
> == "tls"->twisted[tls])
> Collecting cffi>=1.4.1 (from cryptography>=1.3.4->pyopenssl>=16.0.0; 
> extra == "tls"->twisted[tls])
> Collecting pycparser (from 
> cffi>=1.4.1->cryptography>=1.3.4->pyopenssl>=16.0.0; extra == 
> "tls"->twisted[tls])
> Installing collected packages: Automat, zope.interface, constantly, 
> pyasn1, pyasn1-modules, idna, ipaddress, enum34, pycparser, cffi, 
> cryptography, pyopenssl, service-identity, twisted
> Successfully installed Automat-0.3.0 cffi-1.9.1 constantly-15.1.0 
> cryptography-1.7.1 enum34-1.1.6 idna-2.2 ipaddress-1.0.17 pyasn1-0.1.9 
> pyasn1-modules-0.0.8 pycparser-2.17 pyopenssl-16.2.0 
> service-identity-16.0.0 twisted-16.7.0rc1 zope.interface-4.3.3
>
> This will install Twisted and its dependencies the official pip way, 
> without needing to hardcode which libraries you fetch, and will do the 
> right thing as Twisted eventually adds more dependencies (like when we 
> split out FilePath and Deferred).
>
> - Amber
>
>> On 29 Dec. 2016, at 10:20, John Santos <john at egh.com 
>> <mailto:john at egh.com>> wrote:
>>
>> Seems to require a new Python module, Automat.  (Not mentioned in the 
>> NEWS file, INSTALL, etc.)  I found Automat 0.3.0 (with Glyph's 
>> fingerprints on it) at PyPI, but it only exists in .whl format.  
>> Downloaded it, but I'm not sure what to do next.  I was able to get 
>> it working by downloading and installing get-pip.py and Automat 
>> (contrary to the python.org <http://python.org> documentation, I 
>> didn't have pip installed on my system even though it is Python 
>> 2.7.13 downloaded from python.org <http://python.org>.)
>>    sudo python get-pip.py
>>    sudo pip install Automat
>>
>> This is worrisome to me because I think this requires Internet access 
>> to pypi.python.org <http://pypi.python.org>, which I have on my 
>> development and testing systems, but not on my production systems.  
>> Everything else I've ever needed, I could download and install source 
>> files.
>>
>> Having done this, my app seems to run fine (only quick sanity testing 
>> so far.)
>>
>>
>> ----install---
>> Searching for Automat>=0.3.0
>> Reading https://pypi.python.org/simple/Automat/
>> Download error on https://pypi.python.org/simple/Automat/: [SSL: 
>> CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:590) -- 
>> Some packages may not be found!
>> Couldn't find index page for 'Automat' (maybe misspelled?)
>> Scanning index of all packages (this may take a while)
>> Reading https://pypi.python.org/simple/
>> Download error on https://pypi.python.org/simple/: [SSL: 
>> CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:590) -- 
>> Some packages may not be found!
>> No local packages or working download links found for Automat>=0.3.0
>> error: Could not find suitable distribution for 
>> Requirement.parse('Automat>=0.3.0')
>> ------
>>
>> ---try to use without Automat---
>> medusa at Medusa:~/run> python medusa_server.py Rain
>> Traceback (most recent call last):
>>   File "medusa_server.py", line 72, in <module>
>>     from twisted.application import service, internet
>>   File 
>> "/usr/lib/python2.7/site-packages/Twisted-16.7.0rc1-py2.7-linux-x86_64.egg/twisted/application/internet.py", 
>> line 54, in <module>
>>     from automat import MethodicalMachine
>> ImportError: No module named automat
>> ------
>>
>> On 12/22/2016 11:33 PM, Amber "Hawkie" Brown wrote:
>>> Hello everyone, and happy holidays!
>>>
>>> Although it didn't quite fall on the solstice, one could call this 
>>> Twisted release a little ray of sunshine, with some nice new 
>>> improvements. 16.7.0rc1 brings the following stocking stuffers:
>>>
>>> - twisted.web.client.Agent now supports IPv6! It's also now the 
>>> primary web client in Twisted, with twisted.web.client.getPage being 
>>> deprecated in favour of it and Treq.
>>> - twisted.internet.ssl.CertificateOptions has had its `method` 
>>> argument deprecated, in favour of the new raiseMinimumTo, 
>>> lowerMaximumSecurityTo, and insecurelyLowerMinimumTo arguments, 
>>> which take TLSVersion arguments. This allows you to better give a 
>>> range of versions of TLS you wish to negotiate, rather than forcing 
>>> yourself to any one version.
>>> - twisted.internet.ssl.CertificateOptions will use OpenSSL's 
>>> MODE_RELEASE_BUFFERS, which will let it free unused memory that was 
>>> held by idle TLS connections.
>>> - You can now call the new twist runner with `python -m twisted`.
>>> - Conch has the beginnings of ECDH key exchange, and supports 
>>> `hmac-sha2-384` in twisted.conch.ssh.
>>> - Better Unicode support in twisted.internet.reactor.spawnProcess, 
>>> especially on Windows on Python 3.6.
>>> - More Python 3 porting in Conch, and more under-the-hood changes to 
>>> facilitate a Twisted-wide jump to new-style classes only on Python 2 
>>> in 2018/2019. This release has also been tested on Python 3.6 on Linux.
>>> - Lots of deprecated code removals, to make a sleeker, less 
>>> confusing Twisted.
>>> - 20+ closed tickets.
>>>
>>> You can get the tarball and the NEWS file at 
>>> https://twistedmatrix.com/Releases/rc/16.7.0rc1/ , or you can try it 
>>> out from PyPI:
>>>
>>>     python -m pip install Twisted==16.7.0rc1
>>>
>>> Please test it, and let me know how your applications fare, good or 
>>> bad! If nothing comes up, 16.7 looks like it'll land just before the 
>>> new year.
>>>
>>> With festive hoots,
>>>     Amber Brown
>>>
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>> -- 
>> John Santos
>> Evans Griffiths & Hart, Inc.
>> 781-861-0670 ext 539
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com 
>> <mailto:Twisted-Python at twistedmatrix.com>
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161229/0f45da22/attachment-0001.html>

From ex.vitorino at gmail.com  Thu Dec 29 12:01:04 2016
From: ex.vitorino at gmail.com (ex vito)
Date: Thu, 29 Dec 2016 19:01:04 +0000
Subject: [Twisted-Python] twisted.python.sendmsg segfault - looking for
	confirmation
In-Reply-To: <EA9B12E5-C604-4E2D-B8D6-72A509DE827E@twistedmatrix.com>
References: <4F35146F-E43C-437F-B33A-4F6CEA9343F6@gmail.com>
 <EA9B12E5-C604-4E2D-B8D6-72A509DE827E@twistedmatrix.com>
Message-ID: <A966C31E-FE51-44CC-836F-34063DC7C550@gmail.com>

On 2016-12-29, at 12:23, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
>> On Dec 27, 2016, at 19:15, ex vito <ex.vitorino at gmail.com> wrote:
>> 
>> Other than looking for confirmation, I have a fix which I included two isolated commits in the PR. Twisted project members: if this is confirmed, maybe a ticket should be created in Trac and an independent PR created, correct?
> 
> You should definitely create that ticket.  In fact, you don't need to wait for confirmation - create the ticket now, and send the link to it, so someone else can comment on the ticket when it is confirmed - discussion of the reproduction process can happen there.


Done,

Ticket: https://twistedmatrix.com/trac/ticket/8969
PR: https://github.com/twisted/twisted/pull/650

Up for review with a guidance request on how to achieve 100% diff coverage given that different platforms behave differently with the same input.

Thanks and regards,
--
exvito

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161229/736c59ca/attachment.html>

From screwtape at froup.com  Thu Dec 29 17:20:05 2016
From: screwtape at froup.com (Tim Allen)
Date: Fri, 30 Dec 2016 11:20:05 +1100
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate
	Announcement
In-Reply-To: <8CFE76D7-FB88-4734-9015-8FF36D57F0FD@twistedmatrix.com>
References: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
 <2da9e7e0-4acf-d9af-9039-72533d3bfb24@egh.com>
 <8CFE76D7-FB88-4734-9015-8FF36D57F0FD@twistedmatrix.com>
Message-ID: <20161230002005.sri3tv4tea3i2n3m@boombah.thristian.org>

On Thu, Dec 29, 2016 at 05:27:44AM -0800, Glyph Lefkowitz wrote:
> Increasingly, we are assuming a pip-like packaging toolchain for
> dealing with Twisted's dependencies, so getting familiar with this
> stuff - pip, requirements.txt, pinning, virtualenv - is worthwhile.
> (It'll make your life easier in more ways than one.)

I wasn't going to mention it (because we found a workaround), but since
the topic has come up...

My current employer has a fully pip-based packaging toolchain for all
our internal Python apps, where we build wheels for our apps and all
their dependencies, and then deploy them into a virtualenv in
production. For reproducability reasons, we have a PyPI mirror inside
the corporate firewall, and our wheel-building Docker image has
a `pip.conf` configured to point at it.

Twisted 16.6 broke this system when it added a package named
"incremental" to the `setup_requires` list in setup.py. Because
`setup_requires` is a feature provided by setuptools, packages listed
there are installed by (the same machinery as) setuptools' `ez_install`
command, which does *not* respect `pip.conf`, and so it tried to
download the package from upstream PyPI and timed out banging its head
against the firewall.

As a workaround, we messed with our build-scripts to manually "pip
install" incremental before installing Twisted, or anything that depends
on it, so everything's fine again.

The Python Packaging Authority already has plans for replacing
`setup_requires` with something more Pip-friendly (see PEP 518), so over
time this won't be an issue. For the short term, though, I hope there
won't be too many more things added to `setup_requires` without
announcement.


Tim.


From steve at stevemorin.com  Thu Dec 29 17:29:38 2016
From: steve at stevemorin.com (Steve Morin)
Date: Thu, 29 Dec 2016 16:29:38 -0800
Subject: [Twisted-Python] AWS Auth v4 for Twisted?
In-Reply-To: <CA+TSurANEugvPy7+WGa=nDYB=S9MoDgkRjaaSUC6iLiGhGy4PA@mail.gmail.com>
References: <CAEeXt4N5O=yfcSPqVPcxwaadLi4L4tCUc1d6TXkRxadKmpGNnA@mail.gmail.com>
 <CA+TSurANEugvPy7+WGa=nDYB=S9MoDgkRjaaSUC6iLiGhGy4PA@mail.gmail.com>
Message-ID: <CAPxhEGdBGid62OM4_xLfjEDUfEWbhP7yBn=RCkmm24AtnJzE8w@mail.gmail.com>

Mark,
  Did you get confirmation from your work?
-Steve

On Sun, Dec 25, 2016 at 1:44 PM, Mark Williams <markrwilliams at gmail.com>
wrote:

> I implemented this at work.  On Tuesday I'll confirm my company's open
> source policy will allow me to contribute it back to txaws.
>
> On Sun, Dec 25, 2016 at 7:09 AM, Jean-Paul Calderone <
> exarkun at twistedmatrix.com> wrote:
>
>> Seeking a library that implements this for use with txAWS.  More details:
>>
>> https://stackoverflow.com/questions/41322251/is-there-an-
>> aws-auth-v4-implementation-usable-with-a-twisted-friendly-http-clien
>>
>> Jean-Paul
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
*Steve Morin | Managing Partner - CTO*
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161229/20f4cc04/attachment.html>

From donald at stufft.io  Thu Dec 29 17:29:57 2016
From: donald at stufft.io (Donald Stufft)
Date: Thu, 29 Dec 2016 19:29:57 -0500
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate
	Announcement
In-Reply-To: <20161230002005.sri3tv4tea3i2n3m@boombah.thristian.org>
References: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
 <2da9e7e0-4acf-d9af-9039-72533d3bfb24@egh.com>
 <8CFE76D7-FB88-4734-9015-8FF36D57F0FD@twistedmatrix.com>
 <20161230002005.sri3tv4tea3i2n3m@boombah.thristian.org>
Message-ID: <D73C6920-5EF9-4AB0-B553-93F9EE314341@stufft.io>


> On Dec 29, 2016, at 7:20 PM, Tim Allen <screwtape at froup.com> wrote:
> 
> On Thu, Dec 29, 2016 at 05:27:44AM -0800, Glyph Lefkowitz wrote:
>> Increasingly, we are assuming a pip-like packaging toolchain for
>> dealing with Twisted's dependencies, so getting familiar with this
>> stuff - pip, requirements.txt, pinning, virtualenv - is worthwhile.
>> (It'll make your life easier in more ways than one.)
> 
> I wasn't going to mention it (because we found a workaround), but since
> the topic has come up...
> 
> My current employer has a fully pip-based packaging toolchain for all
> our internal Python apps, where we build wheels for our apps and all
> their dependencies, and then deploy them into a virtualenv in
> production. For reproducability reasons, we have a PyPI mirror inside
> the corporate firewall, and our wheel-building Docker image has
> a `pip.conf` configured to point at it.
> 
> Twisted 16.6 broke this system when it added a package named
> "incremental" to the `setup_requires` list in setup.py. Because
> `setup_requires` is a feature provided by setuptools, packages listed
> there are installed by (the same machinery as) setuptools' `ez_install`
> command, which does *not* respect `pip.conf`, and so it tried to
> download the package from upstream PyPI and timed out banging its head
> against the firewall.
> 
> As a workaround, we messed with our build-scripts to manually "pip
> install" incremental before installing Twisted, or anything that depends
> on it, so everything's fine again.
> 
> The Python Packaging Authority already has plans for replacing
> `setup_requires` with something more Pip-friendly (see PEP 518), so over
> time this won't be an issue. For the short term, though, I hope there
> won't be too many more things added to `setup_requires` without
> announcement.
> 



FTR, you can configure setup_requires too, it just uses a different format.
In any of the files listed at https://docs.python.org/3.6/install/index.html#location-and-names-of-config-files <https://docs.python.org/3.6/install/index.html#location-and-names-of-config-files>
You can drop a 

[easy_install]
Index_url = https://private.example.com/simple/
allow_hosts = private.example.com  # not strictly required, but will error instead of timeout for non private.example.com

I?m not 100% sure on the exact syntax/structure, but something like that should work.


?
Donald Stufft



-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161229/2819f4cf/attachment-0001.html>

From mithrandi at mithrandi.net  Thu Dec 29 18:55:00 2016
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Fri, 30 Dec 2016 01:55:00 +0000
Subject: [Twisted-Python] AWS Auth v4 for Twisted?
In-Reply-To: <CAPxhEGdBGid62OM4_xLfjEDUfEWbhP7yBn=RCkmm24AtnJzE8w@mail.gmail.com>
References: <CAEeXt4N5O=yfcSPqVPcxwaadLi4L4tCUc1d6TXkRxadKmpGNnA@mail.gmail.com>
 <CA+TSurANEugvPy7+WGa=nDYB=S9MoDgkRjaaSUC6iLiGhGy4PA@mail.gmail.com>
 <CAPxhEGdBGid62OM4_xLfjEDUfEWbhP7yBn=RCkmm24AtnJzE8w@mail.gmail.com>
Message-ID: <CAMcKhMTc=tOS13vG84OsptHhprP532xnJBqiEb6HEniVCPu75g@mail.gmail.com>

On Fri, 30 Dec 2016 at 02:30 Steve Morin <steve at stevemorin.com> wrote:

> Mark,
>   Did you get confirmation from your work?
>

It seems like he did; see https://github.com/twisted/txaws/pull/16 for more
details.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161230/ede52d74/attachment.html>

From glyph at twistedmatrix.com  Thu Dec 29 18:56:43 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 29 Dec 2016 17:56:43 -0800
Subject: [Twisted-Python] twisted.python.sendmsg segfault - looking for
 confirmation
In-Reply-To: <A966C31E-FE51-44CC-836F-34063DC7C550@gmail.com>
References: <4F35146F-E43C-437F-B33A-4F6CEA9343F6@gmail.com>
 <EA9B12E5-C604-4E2D-B8D6-72A509DE827E@twistedmatrix.com>
 <A966C31E-FE51-44CC-836F-34063DC7C550@gmail.com>
Message-ID: <669E1018-9EEF-41B1-99F1-22FDE09DE075@twistedmatrix.com>


> On Dec 29, 2016, at 11:01 AM, ex vito <ex.vitorino at gmail.com> wrote:
> 
> On 2016-12-29, at 12:23, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>> 
>>> On Dec 27, 2016, at 19:15, ex vito <ex.vitorino at gmail.com <mailto:ex.vitorino at gmail.com>> wrote:
>>> 
>>> Other than looking for confirmation, I have a fix which I included two isolated commits in the PR. Twisted project members: if this is confirmed, maybe a ticket should be created in Trac and an independent PR created, correct?
>> 
>> You should definitely create that ticket.  In fact, you don't need to wait for confirmation - create the ticket now, and send the link to it, so someone else can comment on the ticket when it is confirmed - discussion of the reproduction process can happen there.
> 
> 
> Done,
> 
> Ticket: https://twistedmatrix.com/trac/ticket/8969 <https://twistedmatrix.com/trac/ticket/8969>
> PR: https://github.com/twisted/twisted/pull/650 <https://github.com/twisted/twisted/pull/650>
> 
> Up for review with a guidance request on how to achieve 100% diff coverage given that different platforms behave differently with the same input.

All our supported platforms submit coverage reports; the coverage reported by codecov should be the union of all those reports.  So, when your code gets pushed to a branch and run on the buildbots, the coverage report should indicate that.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161229/78ce3da1/attachment.html>

From glyph at twistedmatrix.com  Thu Dec 29 19:07:32 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 29 Dec 2016 18:07:32 -0800
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate
	Announcement
In-Reply-To: <20161230002005.sri3tv4tea3i2n3m@boombah.thristian.org>
References: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
 <2da9e7e0-4acf-d9af-9039-72533d3bfb24@egh.com>
 <8CFE76D7-FB88-4734-9015-8FF36D57F0FD@twistedmatrix.com>
 <20161230002005.sri3tv4tea3i2n3m@boombah.thristian.org>
Message-ID: <78CE3AEC-5516-4F8B-9E33-F62DEF02F380@twistedmatrix.com>


> On Dec 29, 2016, at 4:20 PM, Tim Allen <screwtape at froup.com> wrote:
> 
> On Thu, Dec 29, 2016 at 05:27:44AM -0800, Glyph Lefkowitz wrote:
>> Increasingly, we are assuming a pip-like packaging toolchain for
>> dealing with Twisted's dependencies, so getting familiar with this
>> stuff - pip, requirements.txt, pinning, virtualenv - is worthwhile.
>> (It'll make your life easier in more ways than one.)
> 
> I wasn't going to mention it (because we found a workaround), but since
> the topic has come up...
> 
> My current employer has a fully pip-based packaging toolchain for all
> our internal Python apps, where we build wheels for our apps and all
> their dependencies, and then deploy them into a virtualenv in
> production. For reproducability reasons, we have a PyPI mirror inside
> the corporate firewall, and our wheel-building Docker image has
> a `pip.conf` configured to point at it.
> 
> Twisted 16.6 broke this system when it added a package named
> "incremental" to the `setup_requires` list in setup.py. Because
> `setup_requires` is a feature provided by setuptools, packages listed
> there are installed by (the same machinery as) setuptools' `ez_install`
> command, which does *not* respect `pip.conf`, and so it tried to
> download the package from upstream PyPI and timed out banging its head
> against the firewall.

Thanks, this is very useful information.

If you wanted to have this verified for the future, a network-isolated buildbot would be a good way to ensure we don't mess this up in other ways.  Based on this thread it seems that multiple users have this concern, so it's certainly not specific to you, either.

It would also force us to fix the dang documentation-generator test cases that keep failing when a certain someone forgets to update their SSL cert :-).

> As a workaround, we messed with our build-scripts to manually "pip
> install" incremental before installing Twisted, or anything that depends
> on it, so everything's fine again.
> 
> The Python Packaging Authority already has plans for replacing
> `setup_requires` with something more Pip-friendly (see PEP 518), so over
> time this won't be an issue. For the short term, though, I hope there
> won't be too many more things added to `setup_requires` without
> announcement.

Incremental is a bit of a special case, since "version definition" is one of the few things that needs synchronization between setup-time and run-time.  I was pretty nervous about adding `setup_requires`, but the value of getting our versioning logic outside of Twisted itself seemed worth the potential packaging fallout.

So, while you can expect to see many more things showing up in install_requires unannounced, as we split out low-level portions of Twisted and adopt libraries like h11, I doubt that you'll see another setup_requires arrive, especially before PyPA gets together a better approach than the literal setup.py setup_requires.  Given that you've specifically asked for notice, any project member submitting or reviewing a patch that adds one should give a shout here.

-glyph

From ex.vitorino at gmail.com  Fri Dec 30 04:48:19 2016
From: ex.vitorino at gmail.com (Ex Vitorino)
Date: Fri, 30 Dec 2016 11:48:19 +0000
Subject: [Twisted-Python] twisted.python.sendmsg segfault - looking for
	confirmation
In-Reply-To: <669E1018-9EEF-41B1-99F1-22FDE09DE075@twistedmatrix.com>
References: <4F35146F-E43C-437F-B33A-4F6CEA9343F6@gmail.com>
 <EA9B12E5-C604-4E2D-B8D6-72A509DE827E@twistedmatrix.com>
 <A966C31E-FE51-44CC-836F-34063DC7C550@gmail.com>
 <669E1018-9EEF-41B1-99F1-22FDE09DE075@twistedmatrix.com>
Message-ID: <D7B90778-5E45-4F3E-AE5D-4010ACE99707@gmail.com>



> On 30 Dec 2016, at 01:56, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Dec 29, 2016, at 11:01 AM, ex vito <ex.vitorino at gmail.com> wrote:
>> 
>>> On 2016-12-29, at 12:23, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>>> 
>>>> On Dec 27, 2016, at 19:15, ex vito <ex.vitorino at gmail.com> wrote:
>>>> 
>>>> Other than looking for confirmation, I have a fix which I included two isolated commits in the PR. Twisted project members: if this is confirmed, maybe a ticket should be created in Trac and an independent PR created, correct?
>>> 
>>> You should definitely create that ticket.  In fact, you don't need to wait for confirmation - create the ticket now, and send the link to it, so someone else can comment on the ticket when it is confirmed - discussion of the reproduction process can happen there.
>> 
>> 
>> Done,
>> 
>> Ticket: https://twistedmatrix.com/trac/ticket/8969
>> PR: https://github.com/twisted/twisted/pull/650
>> 
>> Up for review with a guidance request on how to achieve 100% diff coverage given that different platforms behave differently with the same input.
> 
> All our supported platforms submit coverage reports; the coverage reported by codecov should be the union of all those reports.  So, when your code gets pushed to a branch and run on the buildbots, the coverage report should indicate that.


Oh, nice! I hadn't figured that out, yet. It makes sense and after rodrigc pushed it to the buildbots it did confirm total diff coverage.

Thanks to both.
Regards,
--
exvito
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20161230/d623768d/attachment.html>

From exarkun at twistedmatrix.com  Thu Dec  1 11:51:42 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Thu, 1 Dec 2016 13:51:42 -0500
Subject: [Twisted-Python] Spurious commit/ticket links
Message-ID: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>

Hi,

In the last couple days I've noticed that there are a bunch of spurious
changes being made to tickets in the issue tracker.  These come from commit
messages that reference a GitHub PR that happens to match a ticket number
in trac.

For example, https://twistedmatrix.com/trac/ticket/600#comment:11

I guess this doesn't really hurt anything ... except it's dumping a
constant low level of garbage into the issue tracker and generating some
annoying emails (that end up having nothing to do with what the subject
suggests).

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161201/2ebdb3c3/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Dec  1 12:09:32 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 1 Dec 2016 11:09:32 -0800
Subject: [Twisted-Python] future directions for Deferred
Message-ID: <32689BBD-EEFE-4C6D-B8BA-52BE944464F4@twistedmatrix.com>

Since this is of potentially very broad interest within the Twisted maintainer team and development audience, those on the mailing list may want to read this github comment <https://github.com/twisted/twisted/pull/590#issuecomment-264070327> about ongoing discussions about future development of Deferred.

-glyph


From glyph at twistedmatrix.com  Thu Dec  1 12:14:10 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 1 Dec 2016 11:14:10 -0800
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
Message-ID: <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>


> On Dec 1, 2016, at 10:51 AM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> Hi,
> 
> In the last couple days I've noticed that there are a bunch of spurious changes being made to tickets in the issue tracker.  These come from commit messages that reference a GitHub PR that happens to match a ticket number in trac.
> 
> For example, https://twistedmatrix.com/trac/ticket/600#comment:11 <https://twistedmatrix.com/trac/ticket/600#comment:11>
> 
> I guess this doesn't really hurt anything ... except it's dumping a constant low level of garbage into the issue tracker and generating some annoying emails (that end up having nothing to do with what the subject suggests).

This is, unfortunately, going to keep happening more frequently as the PR numbers get higher and the corresponding Trac tickets get less sparse.

The way I'd like to address it is to change the format of our commit message to namespace Trac tickets differently; instead of just "#", using a URL, like "Fixes https://tm.tl/1234".  I wouldn't even mind if we just had to use the Trac wiki syntax for this, i.e. "Fixes [ticket:1234]" as long as we could turn off the "#" syntax which Github also uses.

However, this involves surgery within Trac's code, and for me personally, the work required to find the relevant regexes and modify them is worse than continuing to deal with the annoyance.  However, I would very much appreciate it if someone else would take this on :-).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161201/fd10ed02/attachment-0002.html>

From exarkun at twistedmatrix.com  Thu Dec  1 13:13:11 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Thu, 1 Dec 2016 15:13:11 -0500
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
Message-ID: <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>

On Thu, Dec 1, 2016 at 2:14 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Dec 1, 2016, at 10:51 AM, Jean-Paul Calderone <
> exarkun at twistedmatrix.com> wrote:
>
> Hi,
>
> In the last couple days I've noticed that there are a bunch of spurious
> changes being made to tickets in the issue tracker.  These come from commit
> messages that reference a GitHub PR that happens to match a ticket number
> in trac.
>
> For example, https://twistedmatrix.com/trac/ticket/600#comment:11
>
> I guess this doesn't really hurt anything ... except it's dumping a
> constant low level of garbage into the issue tracker and generating some
> annoying emails (that end up having nothing to do with what the subject
> suggests).
>
>
> This is, unfortunately, going to keep happening more frequently as the PR
> numbers get higher and the corresponding Trac tickets get less sparse.
>
> The way I'd *like* to address it is to change the format of our commit
> message to namespace Trac tickets differently; instead of just "#", using a
> URL, like "Fixes https://tm.tl/1234".  I wouldn't even mind if we just
> had to use the Trac wiki syntax for this, i.e. "Fixes [ticket:1234]" as
> long as we could turn off the "#" syntax which Github also uses.
>
> However, this involves surgery within Trac's code, and for me personally,
> the work required to find the relevant regexes and modify them is worse
> than continuing to deal with the annoyance.  However, I would very much
> appreciate it if someone else would take this on :-).
>

Where's the source for Twisted's trac deployment?  Is it actually possible
to deploy modifications?  I'll take a look, if so.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161201/22956a76/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Dec  1 13:33:43 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 1 Dec 2016 12:33:43 -0800
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
 <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
Message-ID: <5C81318C-EFE6-47EF-9208-4098D485FA42@twistedmatrix.com>


> On Dec 1, 2016, at 12:13 PM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> On Thu, Dec 1, 2016 at 2:14 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
>> On Dec 1, 2016, at 10:51 AM, Jean-Paul Calderone <exarkun at twistedmatrix.com <mailto:exarkun at twistedmatrix.com>> wrote:
>> 
>> Hi,
>> 
>> In the last couple days I've noticed that there are a bunch of spurious changes being made to tickets in the issue tracker.  These come from commit messages that reference a GitHub PR that happens to match a ticket number in trac.
>> 
>> For example, https://twistedmatrix.com/trac/ticket/600#comment:11 <https://twistedmatrix.com/trac/ticket/600#comment:11>
>> 
>> I guess this doesn't really hurt anything ... except it's dumping a constant low level of garbage into the issue tracker and generating some annoying emails (that end up having nothing to do with what the subject suggests).
> 
> This is, unfortunately, going to keep happening more frequently as the PR numbers get higher and the corresponding Trac tickets get less sparse.
> 
> The way I'd like to address it is to change the format of our commit message to namespace Trac tickets differently; instead of just "#", using a URL, like "Fixes https://tm.tl/1234 <https://tm.tl/1234>".  I wouldn't even mind if we just had to use the Trac wiki syntax for this, i.e. "Fixes [ticket:1234]" as long as we could turn off the "#" syntax which Github also uses.
> 
> However, this involves surgery within Trac's code, and for me personally, the work required to find the relevant regexes and modify them is worse than continuing to deal with the annoyance.  However, I would very much appreciate it if someone else would take this on :-).
> 
> Where's the source for Twisted's trac deployment?

https://github.com/twisted-infra/twisted-trac-source
https://github.com/twisted-infra/twisted-trac-plugins
https://github.com/twisted-infra/braid/tree/master/services/trac

> Is it actually possible to deploy modifications?

There's probably still an undocumented setup step or two that we've missed - but after following <https://github.com/twisted-infra/braid/blob/master/README.md> 'fab config.production trac.upgrade' ought to do the trick.  Allegedly it's even possible to set up a test development environment as per <https://github.com/twisted-infra/braid/blob/master/README.md#vagrant> :-).

I haven't made any major changes since all these docs were added so I'm just following them from the beginning for the first time myself now. but certainly the prod-deploy process has worked fine for me many times on various services.

> I'll take a look, if so.

Please be vocal about any roadblocks you hit.  The ops situation has improved a ton since the last time you looked, but (accordingly) it's also changed almost completely.

Good luck - and hopefully you'll need a lot less of it than previously ;-).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161201/7ac6d7ba/attachment-0002.html>

From exarkun at twistedmatrix.com  Thu Dec  1 13:34:36 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Thu, 1 Dec 2016 15:34:36 -0500
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
 <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
Message-ID: <CAEeXt4O+H=mbQq57hnqQm1fVE0yho_4xgGVcTvTpsCmp1g_TyQ@mail.gmail.com>

On Thu, Dec 1, 2016 at 3:13 PM, Jean-Paul Calderone <
exarkun at twistedmatrix.com> wrote:

> On Thu, Dec 1, 2016 at 2:14 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
> wrote:
>
>>
>> On Dec 1, 2016, at 10:51 AM, Jean-Paul Calderone <
>> exarkun at twistedmatrix.com> wrote:
>>
>> Hi,
>>
>> In the last couple days I've noticed that there are a bunch of spurious
>> changes being made to tickets in the issue tracker.  These come from commit
>> messages that reference a GitHub PR that happens to match a ticket number
>> in trac.
>>
>> For example, https://twistedmatrix.com/trac/ticket/600#comment:11
>>
>> I guess this doesn't really hurt anything ... except it's dumping a
>> constant low level of garbage into the issue tracker and generating some
>> annoying emails (that end up having nothing to do with what the subject
>> suggests).
>>
>>
>> This is, unfortunately, going to keep happening more frequently as the PR
>> numbers get higher and the corresponding Trac tickets get less sparse.
>>
>> The way I'd *like* to address it is to change the format of our commit
>> message to namespace Trac tickets differently; instead of just "#", using a
>> URL, like "Fixes https://tm.tl/1234".  I wouldn't even mind if we just
>> had to use the Trac wiki syntax for this, i.e. "Fixes [ticket:1234]" as
>> long as we could turn off the "#" syntax which Github also uses.
>>
>> However, this involves surgery within Trac's code, and for me personally,
>> the work required to find the relevant regexes and modify them is worse
>> than continuing to deal with the annoyance.  However, I would very much
>> appreciate it if someone else would take this on :-).
>>
>
> Where's the source for Twisted's trac deployment?  Is it actually possible
> to deploy modifications?  I'll take a look, if so.
>
>
https://trac.edgewall.org/browser/trunk/tracopt/ticket/commit_updater.py#L140
looks like the relevant regexp.  Removing the "#" branch would probably
produce the desired behavior.

However, also see
https://trac.edgewall.org/wiki/CommitTicketUpdater#Configuration.  I wonder
if commit_ticket_update_envelope would also fix it?  I don't think so
because I think these are just "references" not "commands", but I don't
know for sure.

Jean-Paul


> Jean-Paul
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161201/bf753456/attachment-0002.html>

From rodrigc at crodrigues.org  Thu Dec  1 18:11:37 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 1 Dec 2016 17:11:37 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host key?
Message-ID: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>

Hi,

I filed this bug:
https://twistedmatrix.com/trac/ticket/8931

At least for me, conch fails to parse a host key created by OpenSSH
in ~/.ssh/known_hosts
which is of type ecdsa-sha2-nistp256.

Anyone have an idea as to how to fix this?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161201/b8b127fc/attachment-0002.html>

From ngoonee.talk at gmail.com  Thu Dec  1 18:24:53 2016
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Fri, 2 Dec 2016 09:24:53 +0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
Message-ID: <CAGQ70evwjz4VGWrd88VDJCDyHSqXEMcq3e-msQHJjXN4_T5=mQ@mail.gmail.com>

http://twistedmatrix.com/pipermail/twisted-python/2016-October/030819.html

On Fri, Dec 2, 2016 at 9:11 AM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> Hi,
>
> I filed this bug:
> https://twistedmatrix.com/trac/ticket/8931
>
> At least for me, conch fails to parse a host key created by OpenSSH
> in ~/.ssh/known_hosts
> which is of type ecdsa-sha2-nistp256.
>
> Anyone have an idea as to how to fix this?
>
> --
> Craig
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From exarkun at twistedmatrix.com  Thu Dec  1 18:50:54 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Thu, 1 Dec 2016 20:50:54 -0500
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <5C81318C-EFE6-47EF-9208-4098D485FA42@twistedmatrix.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
 <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
 <5C81318C-EFE6-47EF-9208-4098D485FA42@twistedmatrix.com>
Message-ID: <CAEeXt4ONncVJiAH1nh3PT+skpsaXzZZ7oKxBht3chQxSM64+ag@mail.gmail.com>

On Thu, Dec 1, 2016 at 3:33 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
>
> Please be vocal about any roadblocks you hit.  The ops situation has
> improved a ton since the last time you looked, but (accordingly) it's also
> changed almost completely.
>
> Good luck - and hopefully you'll need a lot less of it than previously ;-).
>
>
Here's a new plugin that has the new behavior, maybe:
https://github.com/twisted-infra/twisted-trac-plugins/pull/4
thijs did a review so maybe it's all set to merge.
There's also a config change:
https://github.com/twisted-infra/braid/pull/226

I had intended to test it with the local development environment but it
looks like it requires downloading gigs of data for vagrant boxes and to
upgrade a super-old ubuntu image.
Maybe someone else could do that step.

If not, maybe I'll test it on the production machine in a couple days. :)

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161201/9d26a87a/attachment-0002.html>

From rodrigc at crodrigues.org  Thu Dec  1 19:02:26 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 1 Dec 2016 18:02:26 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <CAGQ70evwjz4VGWrd88VDJCDyHSqXEMcq3e-msQHJjXN4_T5=mQ@mail.gmail.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <CAGQ70evwjz4VGWrd88VDJCDyHSqXEMcq3e-msQHJjXN4_T5=mQ@mail.gmail.com>
Message-ID: <CAG=rPVeqPPM9Tqc8DYSogLi7+-AGt_FBku08pmuLOhU85r0p4g@mail.gmail.com>

I don't think that is it.  It is failing to parse an existing key generated
by OpenSSH.
If I delete the known_hosts file, conch generates a key which it ca parse.

--
Craig

On Thu, Dec 1, 2016 at 5:24 PM, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:

> http://twistedmatrix.com/pipermail/twisted-python/2016-October/030819.html
>
> On Fri, Dec 2, 2016 at 9:11 AM, Craig Rodrigues <rodrigc at crodrigues.org>
> wrote:
> > Hi,
> >
> > I filed this bug:
> > https://twistedmatrix.com/trac/ticket/8931
> >
> > At least for me, conch fails to parse a host key created by OpenSSH
> > in ~/.ssh/known_hosts
> > which is of type ecdsa-sha2-nistp256.
> >
> > Anyone have an idea as to how to fix this?
> >
> > --
> > Craig
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161201/c8e228eb/attachment-0002.html>

From markrwilliams at gmail.com  Thu Dec  1 20:01:25 2016
From: markrwilliams at gmail.com (Mark Williams)
Date: Thu, 1 Dec 2016 19:01:25 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
Message-ID: <20161202030124.GA19532@hammal>

On Thu, Dec 01, 2016 at 05:11:37PM -0800, Craig Rodrigues wrote:
> Hi,
>
> I filed this bug:
> https://twistedmatrix.com/trac/ticket/8931
>
> At least for me, conch fails to parse a host key created by OpenSSH
> in ~/.ssh/known_hosts
> which is of type ecdsa-sha2-nistp256.
>
> Anyone have an idea as to how to fix this?
>

As usual you've found a fantastically interesting issue.

This is conch, the client, right?  I'm guessing so because
~/.ssh/known_hosts contains the servers the ssh client trusts.
(Specifically, among other things it contains a hostname and that
host's sshd server's public key fingerprint).

If it is conch, the-client, then deleting the offending entry from
~/.ssh/known_hosts and getting a new one makes sense.  That's because
sshd usually generates a couple of different keys in case clients
don't support the latest and greatest technology.

I think deleting the entry in ~/.ssh/known_hosts allows conch to ask
the server for a different key that it *can* understand.  You should
be able to find out which server key conch negotiated by doing thing
following after deleting the offending ~/.ssh/known_hosts entry:

(<hostname is the problematic OS X server>)
$ ssh-keygen -H -F <hostname> | awk '{ print $NF }'
dGhpcyBpcyB2ZXJ5IHZlcnkgdmVyeSB2ZXJ5IHZlcnkgbG9uZyBob3N0IGtleQ==

Then on the OS X server, grep for that in /etc/ssh/*.pub

I bet the key negotiated by conch is not an ECDSA key but rather an
RSA key.  If this is all the case, then I think you've found a key
that LibreSSL supports but your client's libssl (which conch calls
into via cryptography) does not.  What version of libssl do you have?

If any of this is helpful or relevant I'll ask more questions in the
ticket.

Thanks!

-Mark



From glyph at twistedmatrix.com  Fri Dec  2 01:19:42 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 2 Dec 2016 00:19:42 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <20161202030124.GA19532@hammal>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
Message-ID: <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>


> On Dec 1, 2016, at 7:01 PM, Mark Williams <markrwilliams at gmail.com> wrote:
> 
> On Thu, Dec 01, 2016 at 05:11:37PM -0800, Craig Rodrigues wrote:
>> Hi,
>> 
>> I filed this bug:
>> https://twistedmatrix.com/trac/ticket/8931
>> 
>> At least for me, conch fails to parse a host key created by OpenSSH
>> in ~/.ssh/known_hosts
>> which is of type ecdsa-sha2-nistp256.
>> 
>> Anyone have an idea as to how to fix this?
>> 
> 
> As usual you've found a fantastically interesting issue.
> 
> This is conch, the client, right?  I'm guessing so because
> ~/.ssh/known_hosts contains the servers the ssh client trusts.
> (Specifically, among other things it contains a hostname and that
> host's sshd server's public key fingerprint).
> 
> If it is conch, the-client, then deleting the offending entry from
> ~/.ssh/known_hosts and getting a new one makes sense.  That's because
> sshd usually generates a couple of different keys in case clients
> don't support the latest and greatest technology.
> 
> I think deleting the entry in ~/.ssh/known_hosts allows conch to ask
> the server for a different key that it *can* understand.  You should
> be able to find out which server key conch negotiated by doing thing
> following after deleting the offending ~/.ssh/known_hosts entry:
> 
> (<hostname is the problematic OS X server>)
> $ ssh-keygen -H -F <hostname> | awk '{ print $NF }'
> dGhpcyBpcyB2ZXJ5IHZlcnkgdmVyeSB2ZXJ5IHZlcnkgbG9uZyBob3N0IGtleQ==
> 
> Then on the OS X server, grep for that in /etc/ssh/*.pub
> 
> I bet the key negotiated by conch is not an ECDSA key but rather an
> RSA key.  If this is all the case, then I think you've found a key
> that LibreSSL supports but your client's libssl (which conch calls
> into via cryptography) does not.  What version of libssl do you have?
> 
> If any of this is helpful or relevant I'll ask more questions in the
> ticket.

I think there might be a regression in 16.6.0.

For every version up to 16.6.0, I can do 'conch twistedmatrix.com' in a shell and it works fine.

On 16.6.0, I get:

Connection to twistedmatrix.com closed.
conch: exiting with error [Failure instance: Traceback (failure with no frames): <class 'twisted.conch.error.ConchError'>: ('bad host key', 9)
]

instead.

Worth noting: the keys I have for twistedmatrix.com are RSA keys.

What did we add recently that changes key parsing?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161202/c791a91e/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Dec  2 01:27:20 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 2 Dec 2016 00:27:20 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
Message-ID: <606A7085-2B51-4597-92EB-3995E4D49490@twistedmatrix.com>


> On Dec 2, 2016, at 12:19 AM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Dec 1, 2016, at 7:01 PM, Mark Williams <markrwilliams at gmail.com <mailto:markrwilliams at gmail.com>> wrote:
>> 
>> On Thu, Dec 01, 2016 at 05:11:37PM -0800, Craig Rodrigues wrote:
>>> Hi,
>>> 
>>> I filed this bug:
>>> https://twistedmatrix.com/trac/ticket/8931 <https://twistedmatrix.com/trac/ticket/8931>
>>> 
>>> At least for me, conch fails to parse a host key created by OpenSSH
>>> in ~/.ssh/known_hosts
>>> which is of type ecdsa-sha2-nistp256.
>>> 
>>> Anyone have an idea as to how to fix this?
>>> 
>> 
>> As usual you've found a fantastically interesting issue.
>> 
>> This is conch, the client, right?  I'm guessing so because
>> ~/.ssh/known_hosts contains the servers the ssh client trusts.
>> (Specifically, among other things it contains a hostname and that
>> host's sshd server's public key fingerprint).
>> 
>> If it is conch, the-client, then deleting the offending entry from
>> ~/.ssh/known_hosts and getting a new one makes sense.  That's because
>> sshd usually generates a couple of different keys in case clients
>> don't support the latest and greatest technology.
>> 
>> I think deleting the entry in ~/.ssh/known_hosts allows conch to ask
>> the server for a different key that it *can* understand.  You should
>> be able to find out which server key conch negotiated by doing thing
>> following after deleting the offending ~/.ssh/known_hosts entry:
>> 
>> (<hostname is the problematic OS X server>)
>> $ ssh-keygen -H -F <hostname> | awk '{ print $NF }'
>> dGhpcyBpcyB2ZXJ5IHZlcnkgdmVyeSB2ZXJ5IHZlcnkgbG9uZyBob3N0IGtleQ==
>> 
>> Then on the OS X server, grep for that in /etc/ssh/*.pub
>> 
>> I bet the key negotiated by conch is not an ECDSA key but rather an
>> RSA key.  If this is all the case, then I think you've found a key
>> that LibreSSL supports but your client's libssl (which conch calls
>> into via cryptography) does not.  What version of libssl do you have?
>> 
>> If any of this is helpful or relevant I'll ask more questions in the
>> ticket.
> 
> I think there might be a regression in 16.6.0.
> 
> For every version up to 16.6.0, I can do 'conch twistedmatrix.com <http://twistedmatrix.com/>' in a shell and it works fine.
> 
> On 16.6.0, I get:
> 
> Connection to twistedmatrix.com <http://twistedmatrix.com/> closed.
> conch: exiting with error [Failure instance: Traceback (failure with no frames): <class 'twisted.conch.error.ConchError'>: ('bad host key', 9)
> ]
> 
> instead.
> 
> Worth noting: the keys I have for twistedmatrix.com <http://twistedmatrix.com/> are RSA keys.
> 
> What did we add recently that changes key parsing?

The offending commit is 8164d89104a453947215b9296e8b406f15e63252.  Clearly something went wrong when introducing ECDSA parsing.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161202/65646f4c/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Dec  2 01:37:31 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 2 Dec 2016 00:37:31 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <606A7085-2B51-4597-92EB-3995E4D49490@twistedmatrix.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <606A7085-2B51-4597-92EB-3995E4D49490@twistedmatrix.com>
Message-ID: <E7543B17-C137-4CCA-A8C0-41429C000E2F@twistedmatrix.com>


> On Dec 2, 2016, at 12:27 AM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Dec 2, 2016, at 12:19 AM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>> 
>> 
>>> On Dec 1, 2016, at 7:01 PM, Mark Williams <markrwilliams at gmail.com <mailto:markrwilliams at gmail.com>> wrote:
>>> 
>>> On Thu, Dec 01, 2016 at 05:11:37PM -0800, Craig Rodrigues wrote:
>>>> Hi,
>>>> 
>>>> I filed this bug:
>>>> https://twistedmatrix.com/trac/ticket/8931 <https://twistedmatrix.com/trac/ticket/8931>
>>>> 
>>>> At least for me, conch fails to parse a host key created by OpenSSH
>>>> in ~/.ssh/known_hosts
>>>> which is of type ecdsa-sha2-nistp256.
>>>> 
>>>> Anyone have an idea as to how to fix this?
>>>> 
>>> 
>>> As usual you've found a fantastically interesting issue.
>>> 
>>> This is conch, the client, right?  I'm guessing so because
>>> ~/.ssh/known_hosts contains the servers the ssh client trusts.
>>> (Specifically, among other things it contains a hostname and that
>>> host's sshd server's public key fingerprint).
>>> 
>>> If it is conch, the-client, then deleting the offending entry from
>>> ~/.ssh/known_hosts and getting a new one makes sense.  That's because
>>> sshd usually generates a couple of different keys in case clients
>>> don't support the latest and greatest technology.
>>> 
>>> I think deleting the entry in ~/.ssh/known_hosts allows conch to ask
>>> the server for a different key that it *can* understand.  You should
>>> be able to find out which server key conch negotiated by doing thing
>>> following after deleting the offending ~/.ssh/known_hosts entry:
>>> 
>>> (<hostname is the problematic OS X server>)
>>> $ ssh-keygen -H -F <hostname> | awk '{ print $NF }'
>>> dGhpcyBpcyB2ZXJ5IHZlcnkgdmVyeSB2ZXJ5IHZlcnkgbG9uZyBob3N0IGtleQ==
>>> 
>>> Then on the OS X server, grep for that in /etc/ssh/*.pub
>>> 
>>> I bet the key negotiated by conch is not an ECDSA key but rather an
>>> RSA key.  If this is all the case, then I think you've found a key
>>> that LibreSSL supports but your client's libssl (which conch calls
>>> into via cryptography) does not.  What version of libssl do you have?
>>> 
>>> If any of this is helpful or relevant I'll ask more questions in the
>>> ticket.
>> 
>> I think there might be a regression in 16.6.0.
>> 
>> For every version up to 16.6.0, I can do 'conch twistedmatrix.com <http://twistedmatrix.com/>' in a shell and it works fine.
>> 
>> On 16.6.0, I get:
>> 
>> Connection to twistedmatrix.com <http://twistedmatrix.com/> closed.
>> conch: exiting with error [Failure instance: Traceback (failure with no frames): <class 'twisted.conch.error.ConchError'>: ('bad host key', 9)
>> ]
>> 
>> instead.
>> 
>> Worth noting: the keys I have for twistedmatrix.com <http://twistedmatrix.com/> are RSA keys.
>> 
>> What did we add recently that changes key parsing?
> 
> The offending commit is 8164d89104a453947215b9296e8b406f15e63252.  Clearly something went wrong when introducing ECDSA parsing.

The problem is not quite as bad as breaking RSA parsing, at least; the issue is that my known_hosts file includes an ecdsa-sha2-nistp256 entry that _precedes_ my ssh-rsa entry.  So the problem is that parsing one of those entries raises an exception which propagates.  From a superficial investigation, it would appear that _all_ ecdsa keys cause this failure, though.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161202/3d42e444/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Dec  2 02:23:25 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 2 Dec 2016 01:23:25 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <E7543B17-C137-4CCA-A8C0-41429C000E2F@twistedmatrix.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <606A7085-2B51-4597-92EB-3995E4D49490@twistedmatrix.com>
 <E7543B17-C137-4CCA-A8C0-41429C000E2F@twistedmatrix.com>
Message-ID: <FED4B0F9-BDAC-4872-80E8-F7FF3F4564E9@twistedmatrix.com>


> On Dec 2, 2016, at 12:37 AM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Dec 2, 2016, at 12:27 AM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>> 
>> 
>>> On Dec 2, 2016, at 12:19 AM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>>> 
>>> 
>>>> On Dec 1, 2016, at 7:01 PM, Mark Williams <markrwilliams at gmail.com <mailto:markrwilliams at gmail.com>> wrote:
>>>> 
>>>> On Thu, Dec 01, 2016 at 05:11:37PM -0800, Craig Rodrigues wrote:
>>>>> Hi,
>>>>> 
>>>>> I filed this bug:
>>>>> https://twistedmatrix.com/trac/ticket/8931 <https://twistedmatrix.com/trac/ticket/8931>
>>>>> 
>>>>> At least for me, conch fails to parse a host key created by OpenSSH
>>>>> in ~/.ssh/known_hosts
>>>>> which is of type ecdsa-sha2-nistp256.
>>>>> 
>>>>> Anyone have an idea as to how to fix this?
>>>>> 
>>>> 
>>>> As usual you've found a fantastically interesting issue.
>>>> 
>>>> This is conch, the client, right?  I'm guessing so because
>>>> ~/.ssh/known_hosts contains the servers the ssh client trusts.
>>>> (Specifically, among other things it contains a hostname and that
>>>> host's sshd server's public key fingerprint).
>>>> 
>>>> If it is conch, the-client, then deleting the offending entry from
>>>> ~/.ssh/known_hosts and getting a new one makes sense.  That's because
>>>> sshd usually generates a couple of different keys in case clients
>>>> don't support the latest and greatest technology.
>>>> 
>>>> I think deleting the entry in ~/.ssh/known_hosts allows conch to ask
>>>> the server for a different key that it *can* understand.  You should
>>>> be able to find out which server key conch negotiated by doing thing
>>>> following after deleting the offending ~/.ssh/known_hosts entry:
>>>> 
>>>> (<hostname is the problematic OS X server>)
>>>> $ ssh-keygen -H -F <hostname> | awk '{ print $NF }'
>>>> dGhpcyBpcyB2ZXJ5IHZlcnkgdmVyeSB2ZXJ5IHZlcnkgbG9uZyBob3N0IGtleQ==
>>>> 
>>>> Then on the OS X server, grep for that in /etc/ssh/*.pub
>>>> 
>>>> I bet the key negotiated by conch is not an ECDSA key but rather an
>>>> RSA key.  If this is all the case, then I think you've found a key
>>>> that LibreSSL supports but your client's libssl (which conch calls
>>>> into via cryptography) does not.  What version of libssl do you have?
>>>> 
>>>> If any of this is helpful or relevant I'll ask more questions in the
>>>> ticket.
>>> 
>>> I think there might be a regression in 16.6.0.
>>> 
>>> For every version up to 16.6.0, I can do 'conch twistedmatrix.com <http://twistedmatrix.com/>' in a shell and it works fine.
>>> 
>>> On 16.6.0, I get:
>>> 
>>> Connection to twistedmatrix.com <http://twistedmatrix.com/> closed.
>>> conch: exiting with error [Failure instance: Traceback (failure with no frames): <class 'twisted.conch.error.ConchError'>: ('bad host key', 9)
>>> ]
>>> 
>>> instead.
>>> 
>>> Worth noting: the keys I have for twistedmatrix.com <http://twistedmatrix.com/> are RSA keys.
>>> 
>>> What did we add recently that changes key parsing?
>> 
>> The offending commit is 8164d89104a453947215b9296e8b406f15e63252.  Clearly something went wrong when introducing ECDSA parsing.
> 
> The problem is not quite as bad as breaking RSA parsing, at least; the issue is that my known_hosts file includes an ecdsa-sha2-nistp256 entry that _precedes_ my ssh-rsa entry.  So the problem is that parsing one of those entries raises an exception which propagates.  From a superficial investigation, it would appear that _all_ ecdsa keys cause this failure, though.

Investigating further, I think I've figured it out.  Here's a patch that fixes the problem:

diff --git a/src/twisted/conch/ssh/keys.py b/src/twisted/conch/ssh/keys.py
index d47db7f..570f524 100644
--- a/src/twisted/conch/ssh/keys.py
+++ b/src/twisted/conch/ssh/keys.py
@@ -247,8 +247,10 @@ class Key(object):
                 ).public_key(default_backend())
             )
         elif keyType in [b'ecdsa-sha2-' + curve for curve in list(_curveTable.keys())]:
-            x, y, rest = common.getMP(rest, 2)
-            return cls._fromECComponents(x=x, y=y, curve=keyType)
+            return cls(load_ssh_public_key(
+                keyType + b' ' + base64.encodestring(blob),
+                default_backend())
+            )
         else:
             raise BadKeyError('unknown blob type: %s' % (keyType,))
 
I suspect, but do not fully understand, that the problem here is point compression.  Key._fromString_BLOB naively just does getMP(blob, 2) and expects that the x,y will be the EC point.  However, to quote https://tools.ietf.org/html/rfc5656#section-3.1, "point compression MAY be used".  I don't know exactly how point compression works, but I do understand that it means you do funky stuff with the Y value.  I do not believe that EllipticCurvePrivateNumbers understands said funky stuff.

A specific ECC integration test with ssh-keygen from OpenSSH and twisted.conch.client.knownhosts.KnownHostsFile would have spotted this specific manifestation of the issue.  However, another underlying bug is that KnownHostsFile _should_ ignore lines that it can't parse.  And, there's another potential manifestation of the issue where loading from an actual key blob might not work; arguably the problem here is that KnownHostsFile made the questionable decision to do its own base64-decoding and pass the blob straight to the key rather than just pass the portion of the line after the hostname and load it as an openssh-format key directly.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161202/740bdb5e/attachment-0002.html>

From rodrigc at crodrigues.org  Fri Dec  2 10:18:19 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 2 Dec 2016 09:18:19 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <FED4B0F9-BDAC-4872-80E8-F7FF3F4564E9@twistedmatrix.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <606A7085-2B51-4597-92EB-3995E4D49490@twistedmatrix.com>
 <E7543B17-C137-4CCA-A8C0-41429C000E2F@twistedmatrix.com>
 <FED4B0F9-BDAC-4872-80E8-F7FF3F4564E9@twistedmatrix.com>
Message-ID: <CAG=rPVcZmGB62UiVEoU099u_=TnCVe40QqjgKhBfYv3Dd3KJAw@mail.gmail.com>

On Fri, Dec 2, 2016 at 1:23 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
>
> Investigating further, I think I've figured it out.  Here's a patch that
> fixes the problem:
>
> diff --git a/src/twisted/conch/ssh/keys.py b/src/twisted/conch/ssh/keys.py
> index d47db7f..570f524 100644
> --- a/src/twisted/conch/ssh/keys.py
> +++ b/src/twisted/conch/ssh/keys.py
> @@ -247,8 +247,10 @@ class Key(object):
>                  ).public_key(default_backend())
>              )
>          elif keyType in [b'ecdsa-sha2-' + curve for curve in
> list(_curveTable.keys())]:
> -            x, y, rest = common.getMP(rest, 2)
> -            return cls._fromECComponents(x=x, y=y, curve=keyType)
> +            return cls(load_ssh_public_key(
> +                keyType + b' ' + base64.encodestring(blob),
> +                default_backend())
> +            )
>          else:
>              raise BadKeyError('unknown blob type: %s' % (keyType,))
>
>
> I suspect, but do not fully understand, that the problem here is point
> compression.  Key._fromString_BLOB naively just does getMP(blob, 2) and
> expects that the x,y will be the EC point.  However, to quote
> https://tools.ietf.org/html/rfc5656#section-3.1, "point compression MAY
> be used".  I don't know exactly how point compression works, but I do
> understand that it means you do funky stuff with the Y value.  I do not
> believe that EllipticCurvePrivateNumbers understands said funky stuff.
>
> A specific ECC integration test with ssh-keygen from OpenSSH and
> twisted.conch.client.knownhosts.KnownHostsFile would have spotted this
> specific manifestation of the issue.  However, another underlying bug is
> that KnownHostsFile _should_ ignore lines that it can't parse.  And,
> there's another potential manifestation of the issue where loading from an
> actual key blob might not work; arguably the problem here is that
> KnownHostsFile made the questionable decision to do its own base64-decoding
> and pass the blob straight to the key rather than just pass the portion of
> the line after the hostname and load it as an openssh-format key directly.
>
>
Yes, you are on the right track.  As the known_hosts file is parsed line by
line,
if an exception is thrown during parsing, then any valid keys further in
the file are ignored,
and you get the "bad host key" error.

I tried your patch, and while I don't get the same error, the patch doesn't
solve the problem for me.

I did some more debugging, and when I tried to put some print statements in
the code to
figure out what is going on, I found these errors:

Traceback (most recent call last):


  File "<pudb command line>", line 1, in <module>
  File "/Users/crodrigues/twisted8/src/twisted/conch/ssh/keys.py", line
787, in __repr__
    self._keyObject.key_size)]

AttributeError: '_EllipticCurvePublicKey' object has no attribute
'key_size'


and also this:

  File "/Users/crodrigues/twisted8/src/twisted/conch/client/knownhosts.py",
line 107, in matchesKey
    print("SELF.PUBLICKEY ", self.publickey)
AttributeError: 'PlainEntry' object has no attribute 'publickey'

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161202/0280b5ed/attachment-0002.html>

From rodrigc at crodrigues.org  Fri Dec  2 13:49:50 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 2 Dec 2016 12:49:50 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <CAG=rPVcZmGB62UiVEoU099u_=TnCVe40QqjgKhBfYv3Dd3KJAw@mail.gmail.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <606A7085-2B51-4597-92EB-3995E4D49490@twistedmatrix.com>
 <E7543B17-C137-4CCA-A8C0-41429C000E2F@twistedmatrix.com>
 <FED4B0F9-BDAC-4872-80E8-F7FF3F4564E9@twistedmatrix.com>
 <CAG=rPVcZmGB62UiVEoU099u_=TnCVe40QqjgKhBfYv3Dd3KJAw@mail.gmail.com>
Message-ID: <CAG=rPVcMPOdcf5vtFj+F6v5iQcLDJ0JKA=TY-qr3rEUmHxA_wQ@mail.gmail.com>

On Fri, Dec 2, 2016 at 9:18 AM, Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

>
> Traceback (most recent call last):
>
>
>   File "<pudb command line>", line 1, in <module>
>   File "/Users/crodrigues/twisted8/src/twisted/conch/ssh/keys.py", line
> 787, in __repr__
>     self._keyObject.key_size)]
>
> AttributeError: '_EllipticCurvePublicKey' object has no attribute
> 'key_size'
>
>
This seems to be the problem.

On this line:
https://github.com/twisted/twisted/blob/trunk/src/twisted/conch/ssh/keys.py#L782
the __repr__() function wants to call the key_size() method.

This seems to exist for DSA and RSA keys:
https://github.com/pyca/cryptography/blob/master/src/cryptography/hazmat/backends/openssl/dsa.py#L232
https://github.com/pyca/cryptography/blob/master/src/cryptography/hazmat/backends/openssl/rsa.py#L482

However for EC keys, I do not see a 'key_size' attribute:
https://github.com/pyca/cryptography/blob/master/src/cryptography/hazmat/backends/openssl/ec.py#L256

When trying to compare the known host key, the code tries to do a
__repr__() and it fails,
so this doesn't seem to work with EC keys.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161202/c4acb5a7/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Dec  2 15:18:06 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 2 Dec 2016 14:18:06 -0800
Subject: [Twisted-Python] continuous integration update
Message-ID: <0DE7B9CD-B09E-42D0-9C6A-AEA971113E73@twistedmatrix.com>

Hi all,

On Github, the process was supposed to be that we push any 3rd-party contributor branches to the buildbots before doing a final merge.  However, we (myself included, I think) have been landing PRs without doing that first.

In order to ensure that the process is followed, I've added a representative sample of buildbot status checks - specifically, buildbot/osx10.10-py2.7, buildbot/freebsd10-py3.5, and buildbot/freebsd10-py2.7 to the required list.

Additionally, I think I'd like to take our Mac builds off of Travis.  They're still in the allow_fail section, so they haven't been blocking merges, but a Travis build can't complete (and therefore register as "succeded") without them.  Given the repeated OS X related incidents on Travis (see here https://www.traviscistatus.com/incidents/nq0sf0srvx8s and here https://www.traviscistatus.com/incidents/3d430hxd59ft here https://www.traviscistatus.com/incidents/06xg686x7wgw and here https://www.traviscistatus.com/incidents/w82t22dlpntr and here https://www.traviscistatus.com/incidents/j7ttlsnbkf33 if you haven't been personally affected) the OS X builds have been responsible for something like 90% of our build times and have prevented me from making a lot of progress this week.  I've submitted a PR for this at https://github.com/twisted/twisted/pull/614 which hopefully someone can review and merge if they agree.

Thanks,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161202/ea9dcd06/attachment-0002.html>

From rodrigc at crodrigues.org  Fri Dec  2 17:41:20 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 2 Dec 2016 16:41:20 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <CAG=rPVcMPOdcf5vtFj+F6v5iQcLDJ0JKA=TY-qr3rEUmHxA_wQ@mail.gmail.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <606A7085-2B51-4597-92EB-3995E4D49490@twistedmatrix.com>
 <E7543B17-C137-4CCA-A8C0-41429C000E2F@twistedmatrix.com>
 <FED4B0F9-BDAC-4872-80E8-F7FF3F4564E9@twistedmatrix.com>
 <CAG=rPVcZmGB62UiVEoU099u_=TnCVe40QqjgKhBfYv3Dd3KJAw@mail.gmail.com>
 <CAG=rPVcMPOdcf5vtFj+F6v5iQcLDJ0JKA=TY-qr3rEUmHxA_wQ@mail.gmail.com>
Message-ID: <CAG=rPVcKHBW97vyf2=BsoTTFgNFO3oFzcY8db+U02QQPDWerPA@mail.gmail.com>

Glyph,

I took your fix, and added some fixes of my own for __repr__() printing of
EC keys in this branch:

https://github.com/twisted/twisted/pull/615


If I run the tests, I get a new failure:


trial twisted.conch.test.test_keys.KeyTests.test_fromBlobECDSA

Traceback (most recent call last):
  File "/Users/crodrigues/twisted_15/src/twisted/conch/test/test_keys.py",
line 776, in test_fromBlobECDSA
    eckey = keys.Key.fromString(ecblob)
  File "/Users/crodrigues/twisted_15/src/twisted/conch/ssh/keys.py", line
197, in fromString
    return method(data)
  File "/Users/crodrigues/twisted_15/src/twisted/conch/ssh/keys.py", line
253, in _fromString_BLOB
    default_backend()))
  File
"/Users/crodrigues/venv-3.6/lib/python3.6/site-packages/cryptography/hazmat/primitives/serialization.py",
line 69, in load_ssh_public_key
    return loader(key_type, rest, backend)
  File
"/Users/crodrigues/venv-3.6/lib/python3.6/site-packages/cryptography/hazmat/primitives/serialization.py",
line 103, in _load_ssh_ecdsa_public_key
    'Key header and key body contain different key type values.'

builtins.ValueError: Key header and key body contain different key type
values.


Also, if I try to access my machine with:
conch 192.168.1.2

I see that in the matchesKey() function on this line:
https://github.com/twisted/twisted/blob/trunk/src/twisted/conch/client/knownhosts.py#L106

self.publicKey is an EC key, while keyObject is an RSA key.

Therefore this function always fails, and I cannot log into the box.

Any ideas?

Thanks.
--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161202/694e21a9/attachment-0002.html>

From exarkun at twistedmatrix.com  Fri Dec  2 17:49:38 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Fri, 2 Dec 2016 19:49:38 -0500
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <CAEeXt4ONncVJiAH1nh3PT+skpsaXzZZ7oKxBht3chQxSM64+ag@mail.gmail.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
 <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
 <5C81318C-EFE6-47EF-9208-4098D485FA42@twistedmatrix.com>
 <CAEeXt4ONncVJiAH1nh3PT+skpsaXzZZ7oKxBht3chQxSM64+ag@mail.gmail.com>
Message-ID: <CAEeXt4M-bWMrmPjx3DD1r3JWobDRjFQF2jndCYN2Rk36KCkSNw@mail.gmail.com>

I deployed this to production.  I don't see a good way to test it without
screwing around with twisted trunk ... so don't plan to.  I'll keep an eye
on real merges folks are working on and see if it's behaving as desired.

On Thu, Dec 1, 2016 at 8:50 PM, Jean-Paul Calderone <
exarkun at twistedmatrix.com> wrote:

> On Thu, Dec 1, 2016 at 3:33 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
> wrote:
>
>>
>>
>> Please be vocal about any roadblocks you hit.  The ops situation has
>> improved a ton since the last time you looked, but (accordingly) it's also
>> changed almost completely.
>>
>> Good luck - and hopefully you'll need a lot less of it than previously
>> ;-).
>>
>>
> Here's a new plugin that has the new behavior, maybe:
> https://github.com/twisted-infra/twisted-trac-plugins/pull/4
> thijs did a review so maybe it's all set to merge.
> There's also a config change: https://github.com/
> twisted-infra/braid/pull/226
>
> I had intended to test it with the local development environment but it
> looks like it requires downloading gigs of data for vagrant boxes and to
> upgrade a super-old ubuntu image.
> Maybe someone else could do that step.
>
> If not, maybe I'll test it on the production machine in a couple days. :)
>
> Jean-Paul
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161202/59cef46f/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Dec  2 19:28:28 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 2 Dec 2016 18:28:28 -0800
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <CAEeXt4M-bWMrmPjx3DD1r3JWobDRjFQF2jndCYN2Rk36KCkSNw@mail.gmail.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
 <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
 <5C81318C-EFE6-47EF-9208-4098D485FA42@twistedmatrix.com>
 <CAEeXt4ONncVJiAH1nh3PT+skpsaXzZZ7oKxBht3chQxSM64+ag@mail.gmail.com>
 <CAEeXt4M-bWMrmPjx3DD1r3JWobDRjFQF2jndCYN2Rk36KCkSNw@mail.gmail.com>
Message-ID: <64048028-5B08-4787-B179-F7720551D0C3@twistedmatrix.com>

> On Dec 2, 2016, at 4:49 PM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> I deployed this to production.  I don't see a good way to test it without screwing around with twisted trunk ... so don't plan to.  I'll keep an eye on real merges folks are working on and see if it's behaving as desired.

Thanks, JP!

Would you mind updating https://twistedmatrix.com/trac/wiki/ReviewProcess#Revertingachange and https://twistedmatrix.com/trac/wiki/ReviewProcess#Authors:Howtomergethechangetotrunk to reflect the new syntax that should be used on future merges?

-glyph




From glyph at twistedmatrix.com  Fri Dec  2 20:18:38 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 2 Dec 2016 19:18:38 -0800
Subject: [Twisted-Python] continuous integration update
In-Reply-To: <0DE7B9CD-B09E-42D0-9C6A-AEA971113E73@twistedmatrix.com>
References: <0DE7B9CD-B09E-42D0-9C6A-AEA971113E73@twistedmatrix.com>
Message-ID: <14FEBAAB-E4E4-4F61-9AA2-592EB071E2E4@twistedmatrix.com>


> On Dec 2, 2016, at 2:18 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> Hi all,
> 
> On Github, the process was supposed to be that we push any 3rd-party contributor branches to the buildbots before doing a final merge.  However, we (myself included, I think) have been landing PRs without doing that first.
> 
> In order to ensure that the process is followed, I've added a representative sample of buildbot status checks - specifically, buildbot/osx10.10-py2.7, buildbot/freebsd10-py3.5, and buildbot/freebsd10-py2.7 to the required list.

Oops. Apparently the FreeBSD ones aren't supported builds, and therefore don't run on every PR, so they were jamming things up.  I've reduced it to just the OS X builder.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161202/ef5462a0/attachment-0002.html>

From exarkun at twistedmatrix.com  Sat Dec  3 07:28:42 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Sat, 3 Dec 2016 09:28:42 -0500
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <64048028-5B08-4787-B179-F7720551D0C3@twistedmatrix.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
 <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
 <5C81318C-EFE6-47EF-9208-4098D485FA42@twistedmatrix.com>
 <CAEeXt4ONncVJiAH1nh3PT+skpsaXzZZ7oKxBht3chQxSM64+ag@mail.gmail.com>
 <CAEeXt4M-bWMrmPjx3DD1r3JWobDRjFQF2jndCYN2Rk36KCkSNw@mail.gmail.com>
 <64048028-5B08-4787-B179-F7720551D0C3@twistedmatrix.com>
Message-ID: <CAEeXt4OsPyNs35iqkOozn3PKaDrj=giZFp0vEZq=hyOjYDyWhA@mail.gmail.com>

On Fri, Dec 2, 2016 at 9:28 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

> > On Dec 2, 2016, at 4:49 PM, Jean-Paul Calderone <
> exarkun at twistedmatrix.com> wrote:
> >
> > I deployed this to production.  I don't see a good way to test it
> without screwing around with twisted trunk ... so don't plan to.  I'll keep
> an eye on real merges folks are working on and see if it's behaving as
> desired.
>
> Thanks, JP!
>
> Would you mind updating https://twistedmatrix.com/trac/wiki/ReviewProcess#
> Revertingachange and https://twistedmatrix.com/trac/wiki/ReviewProcess#
> Authors:Howtomergethechangetotrunk to reflect the new syntax that should
> be used on future merges?
>
>
Updated.  As far as the behavior, do
https://github.com/twisted/twisted/pull/614 /
http://twistedmatrix.com/trac/ticket/8934 look right? The trac ticket is
fixed but with no comment.  OTOH, I can't find the commit message for the
PR merge so maybe that's as it should be?


> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161203/b46771cf/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Dec  3 15:04:26 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 3 Dec 2016 14:04:26 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <CAG=rPVcKHBW97vyf2=BsoTTFgNFO3oFzcY8db+U02QQPDWerPA@mail.gmail.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <606A7085-2B51-4597-92EB-3995E4D49490@twistedmatrix.com>
 <E7543B17-C137-4CCA-A8C0-41429C000E2F@twistedmatrix.com>
 <FED4B0F9-BDAC-4872-80E8-F7FF3F4564E9@twistedmatrix.com>
 <CAG=rPVcZmGB62UiVEoU099u_=TnCVe40QqjgKhBfYv3Dd3KJAw@mail.gmail.com>
 <CAG=rPVcMPOdcf5vtFj+F6v5iQcLDJ0JKA=TY-qr3rEUmHxA_wQ@mail.gmail.com>
 <CAG=rPVcKHBW97vyf2=BsoTTFgNFO3oFzcY8db+U02QQPDWerPA@mail.gmail.com>
Message-ID: <2C2889E8-7B8E-47CB-AE85-6990585C8579@twistedmatrix.com>


> On Dec 2, 2016, at 4:41 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Glyph,
> 
> I took your fix, and added some fixes of my own for __repr__() printing of EC keys in this branch:
> 
> https://github.com/twisted/twisted/pull/615 <https://github.com/twisted/twisted/pull/615>
> 
> 
> If I run the tests, I get a new failure:
> 
> 
> trial twisted.conch.test.test_keys.KeyTests.test_fromBlobECDSA
> 
> Traceback (most recent call last):
>   File "/Users/crodrigues/twisted_15/src/twisted/conch/test/test_keys.py", line 776, in test_fromBlobECDSA
>     eckey = keys.Key.fromString(ecblob)
>   File "/Users/crodrigues/twisted_15/src/twisted/conch/ssh/keys.py", line 197, in fromString
>     return method(data)
>   File "/Users/crodrigues/twisted_15/src/twisted/conch/ssh/keys.py", line 253, in _fromString_BLOB
>     default_backend()))
>   File "/Users/crodrigues/venv-3.6/lib/python3.6/site-packages/cryptography/hazmat/primitives/serialization.py", line 69, in load_ssh_public_key
>     return loader(key_type, rest, backend)
>   File "/Users/crodrigues/venv-3.6/lib/python3.6/site-packages/cryptography/hazmat/primitives/serialization.py", line 103, in _load_ssh_ecdsa_public_key
>     'Key header and key body contain different key type values.'
> 
> builtins.ValueError: Key header and key body contain different key type values.
> 
> 
> Also, if I try to access my machine with:
> conch 192.168.1.2
> 
> I see that in the matchesKey() function on this line:
> https://github.com/twisted/twisted/blob/trunk/src/twisted/conch/client/knownhosts.py#L106 <https://github.com/twisted/twisted/blob/trunk/src/twisted/conch/client/knownhosts.py#L106>
> 
> self.publicKey is an EC key, while keyObject is an RSA key.
> 
> Therefore this function always fails, and I cannot log into the box.
> 
> Any ideas?

It looks like https://github.com/twisted/twisted/blob/e48500b94a3b3c751a4ccea36db95a45db8c34be/src/twisted/conch/client/knownhosts.py#L434-L446 isn't really geared towards the idea that there might be multiple entries for one host.  The first step toward a fix would be to correct that algorithm to only fail if no matches are found, or to specifically check the key type before failing.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161203/256adfc5/attachment-0002.html>

From rodrigc at crodrigues.org  Sat Dec  3 17:21:56 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 3 Dec 2016 16:21:56 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <20161202030124.GA19532@hammal>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
Message-ID: <CAG=rPVdQvVB8ke7_aSeFi+xhTNoBKgm=RrqA+UjtTSJo4gDUbA@mail.gmail.com>

On Thu, Dec 1, 2016 at 7:01 PM, Mark Williams <markrwilliams at gmail.com>
wrote:

>
> I bet the key negotiated by conch is not an ECDSA key but rather an
> RSA key.  If this is all the case, then I think you've found a key
> that LibreSSL supports but your client's libssl (which conch calls
> into via cryptography) does not.  What version of libssl do you have?
>


Yes, you are right.  I did some debugging and found that
in ssh_KEX_DH_GEX_REPLY()
https://github.com/twisted/twisted/blob/trunk/src/twisted/conch/ssh/transport.py#L1596
only an RSA key is negotiated, even if an EC key is in the known_hosts file.

I thought that with all the EC fixes committed to the tree that this was
all working,
but it looks like there is still some stuff missing.  This might fill in
the gaps:

https://github.com/twisted/twisted/pull/432

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161203/2b6bb82c/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Dec  3 20:56:20 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 3 Dec 2016 19:56:20 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <CAG=rPVdQvVB8ke7_aSeFi+xhTNoBKgm=RrqA+UjtTSJo4gDUbA@mail.gmail.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <CAG=rPVdQvVB8ke7_aSeFi+xhTNoBKgm=RrqA+UjtTSJo4gDUbA@mail.gmail.com>
Message-ID: <629C9A44-7A99-4896-BBEC-0FE012DE4F24@twistedmatrix.com>


> On Dec 3, 2016, at 4:21 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> On Thu, Dec 1, 2016 at 7:01 PM, Mark Williams <markrwilliams at gmail.com <mailto:markrwilliams at gmail.com>> wrote:
> 
> I bet the key negotiated by conch is not an ECDSA key but rather an
> RSA key.  If this is all the case, then I think you've found a key
> that LibreSSL supports but your client's libssl (which conch calls
> into via cryptography) does not.  What version of libssl do you have?
> 
> 
> Yes, you are right.  I did some debugging and found that in ssh_KEX_DH_GEX_REPLY()
> https://github.com/twisted/twisted/blob/trunk/src/twisted/conch/ssh/transport.py#L1596 <https://github.com/twisted/twisted/blob/trunk/src/twisted/conch/ssh/transport.py#L1596>
> only an RSA key is negotiated, even if an EC key is in the known_hosts file.
> 
> I thought that with all the EC fixes committed to the tree that this was all working,
> but it looks like there is still some stuff missing.  This might fill in the gaps:
> 
> https://github.com/twisted/twisted/pull/432 <https://github.com/twisted/twisted/pull/432>

Yep. The stuff that got merged was intentionally, explicitly a subset of full EC functionality.  We're trying to get it landed in stages, since, as you have already seen, even a partial implementation is very tricky to review :)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161203/4e9e2524/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Dec  3 22:50:55 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 3 Dec 2016 21:50:55 -0800
Subject: [Twisted-Python] memory leaks
Message-ID: <0DF2D12E-FB25-463B-A5DA-6AAF8F287866@twistedmatrix.com>

Following up on a Stack Overflow question from some time ago, http://stackoverflow.com/questions/40604545/twisted-using-connectprotocol-to-connect-endpoint-cause-memory-leak?noredirect=1#comment68573508_40604545 since the submitter added a minimal reproducer, I used Heappy https://pypi.org/project/guppy/ to look at memory sizing, and seeing large numbers of Logger instances and type objects leaking when using client endpoints.  It was not immediately obvious to me where the leak is occurring though, as I was careful to clean up the Deferred results and not leave them in a failure state.

I am hoping that I can entice someone else to diagnose this far enough to actually file a bug :-).

-glyph


From trac at twistedmatrix.com  Sun Dec  4 00:05:20 2016
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 04 Dec 2016 07:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1480835120.86.6930242301514831840@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161204/ed1ef113/attachment-0002.html>

From exarkun at twistedmatrix.com  Sun Dec  4 10:50:59 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Sun, 4 Dec 2016 12:50:59 -0500
Subject: [Twisted-Python] memory leaks
In-Reply-To: <0DF2D12E-FB25-463B-A5DA-6AAF8F287866@twistedmatrix.com>
References: <0DF2D12E-FB25-463B-A5DA-6AAF8F287866@twistedmatrix.com>
Message-ID: <CAEeXt4O4Mz1f-W0QKfULMoOEiuDezzvb4gCUCphLsh_QgmEfzA@mail.gmail.com>

On Sun, Dec 4, 2016 at 12:50 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

> Following up on a Stack Overflow question from some time ago,
> http://stackoverflow.com/questions/40604545/twisted-
> using-connectprotocol-to-connect-endpoint-cause-memory-leak?noredirect=1#
> comment68573508_40604545 since the submitter added a minimal reproducer,
> I used Heappy https://pypi.org/project/guppy/ to look at memory sizing,
> and seeing large numbers of Logger instances and type objects leaking when
> using client endpoints.  It was not immediately obvious to me where the
> leak is occurring though, as I was careful to clean up the Deferred results
> and not leave them in a failure state.
>
> I am hoping that I can entice someone else to diagnose this far enough to
> actually file a bug :-).
>
>
Answered.  I didn't file a bug, I'll let someone else with ideas about
twisted.logger think about what exactly the bug is.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161204/9b75c588/attachment-0002.html>

From exarkun at twistedmatrix.com  Mon Dec  5 15:45:12 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Mon, 5 Dec 2016 17:45:12 -0500
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <CAEeXt4OsPyNs35iqkOozn3PKaDrj=giZFp0vEZq=hyOjYDyWhA@mail.gmail.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
 <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
 <5C81318C-EFE6-47EF-9208-4098D485FA42@twistedmatrix.com>
 <CAEeXt4ONncVJiAH1nh3PT+skpsaXzZZ7oKxBht3chQxSM64+ag@mail.gmail.com>
 <CAEeXt4M-bWMrmPjx3DD1r3JWobDRjFQF2jndCYN2Rk36KCkSNw@mail.gmail.com>
 <64048028-5B08-4787-B179-F7720551D0C3@twistedmatrix.com>
 <CAEeXt4OsPyNs35iqkOozn3PKaDrj=giZFp0vEZq=hyOjYDyWhA@mail.gmail.com>
Message-ID: <CAEeXt4PBRi6j=ZSQ_1eOdGiTKdpi5KyVqDrdayagdb2VozOvKg@mail.gmail.com>

On Sat, Dec 3, 2016 at 9:28 AM, Jean-Paul Calderone <
exarkun at twistedmatrix.com> wrote:

> On Fri, Dec 2, 2016 at 9:28 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
> wrote:
>
>> > On Dec 2, 2016, at 4:49 PM, Jean-Paul Calderone <
>> exarkun at twistedmatrix.com> wrote:
>> >
>> > I deployed this to production.  I don't see a good way to test it
>> without screwing around with twisted trunk ... so don't plan to.  I'll keep
>> an eye on real merges folks are working on and see if it's behaving as
>> desired.
>>
>> Thanks, JP!
>>
>> Would you mind updating https://twistedmatrix.com/trac
>> /wiki/ReviewProcess#Revertingachange and https://twistedmatrix.com/trac
>> /wiki/ReviewProcess#Authors:Howtomergethechangetotrunk to reflect the
>> new syntax that should be used on future merges?
>>
>>
> Updated.  As far as the behavior, do https://github.com/twisted/
> twisted/pull/614 / http://twistedmatrix.com/trac/ticket/8934 look right?
> The trac ticket is fixed but with no comment.  OTOH, I can't find the
> commit message for the PR merge so maybe that's as it should be?
>
>

Updated again.  Craig confirmed that it indeed wasn't working (at all).

Also, the site's now running trac 1.2 (was 1.0.12).  The fab target for
re-deploying trac just picks the newest release at the moment, despite the
*appearance* of being pinned to a particular version.  I don't think I'm
going to try to bite off fixing this.  The problem, though, is multiple
invocations of `pip -U` - a later instance of which is totally happy to
upgrade the trac 1.0.12 install to 1.2.

Jean-Paul



> -glyph
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161205/8fa18066/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Dec  5 23:08:24 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 5 Dec 2016 22:08:24 -0800
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <CAEeXt4PBRi6j=ZSQ_1eOdGiTKdpi5KyVqDrdayagdb2VozOvKg@mail.gmail.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
 <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
 <5C81318C-EFE6-47EF-9208-4098D485FA42@twistedmatrix.com>
 <CAEeXt4ONncVJiAH1nh3PT+skpsaXzZZ7oKxBht3chQxSM64+ag@mail.gmail.com>
 <CAEeXt4M-bWMrmPjx3DD1r3JWobDRjFQF2jndCYN2Rk36KCkSNw@mail.gmail.com>
 <64048028-5B08-4787-B179-F7720551D0C3@twistedmatrix.com>
 <CAEeXt4OsPyNs35iqkOozn3PKaDrj=giZFp0vEZq=hyOjYDyWhA@mail.gmail.com>
 <CAEeXt4PBRi6j=ZSQ_1eOdGiTKdpi5KyVqDrdayagdb2VozOvKg@mail.gmail.com>
Message-ID: <46AA2BA1-54A0-4630-ACB6-03B4BB7B2149@twistedmatrix.com>


> On Dec 5, 2016, at 2:45 PM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> On Sat, Dec 3, 2016 at 9:28 AM, Jean-Paul Calderone <exarkun at twistedmatrix.com <mailto:exarkun at twistedmatrix.com>> wrote:
> On Fri, Dec 2, 2016 at 9:28 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> > On Dec 2, 2016, at 4:49 PM, Jean-Paul Calderone <exarkun at twistedmatrix.com <mailto:exarkun at twistedmatrix.com>> wrote:
> >
> > I deployed this to production.  I don't see a good way to test it without screwing around with twisted trunk ... so don't plan to.  I'll keep an eye on real merges folks are working on and see if it's behaving as desired.
> 
> Thanks, JP!
> 
> Would you mind updating https://twistedmatrix.com/trac/wiki/ReviewProcess#Revertingachange <https://twistedmatrix.com/trac/wiki/ReviewProcess#Revertingachange> and https://twistedmatrix.com/trac/wiki/ReviewProcess#Authors:Howtomergethechangetotrunk <https://twistedmatrix.com/trac/wiki/ReviewProcess#Authors:Howtomergethechangetotrunk> to reflect the new syntax that should be used on future merges?
> 
> 
> Updated.  As far as the behavior, do https://github.com/twisted/twisted/pull/614 <https://github.com/twisted/twisted/pull/614> / http://twistedmatrix.com/trac/ticket/8934 <http://twistedmatrix.com/trac/ticket/8934> look right? The trac ticket is fixed but with no comment.  OTOH, I can't find the commit message for the PR merge so maybe that's as it should be?
>  
> 
> Updated again.  Craig confirmed that it indeed wasn't working (at all).
> 
> Also, the site's now running trac 1.2 (was 1.0.12).  The fab target for re-deploying trac just picks the newest release at the moment, despite the appearance of being pinned to a particular version.  I don't think I'm going to try to bite off fixing this.  The problem, though, is multiple invocations of `pip -U` - a later instance of which is totally happy to upgrade the trac 1.0.12 install to 1.2.

Now I can't create tickets at all.  I hope this is related and not just general decay of our Trac instance :).

The web UI tells me "Warning: The action "None" is not available" without actually creating the ticket.  Nothing that I can see appears in the logs.  Hopefully this warning message means something to someone?

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161205/51d18b40/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Dec  5 23:09:15 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 5 Dec 2016 22:09:15 -0800
Subject: [Twisted-Python] memory leaks
In-Reply-To: <CAEeXt4O4Mz1f-W0QKfULMoOEiuDezzvb4gCUCphLsh_QgmEfzA@mail.gmail.com>
References: <0DF2D12E-FB25-463B-A5DA-6AAF8F287866@twistedmatrix.com>
 <CAEeXt4O4Mz1f-W0QKfULMoOEiuDezzvb4gCUCphLsh_QgmEfzA@mail.gmail.com>
Message-ID: <FCF86015-D929-42AB-84A7-93140272F847@twistedmatrix.com>


> On Dec 4, 2016, at 9:50 AM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> On Sun, Dec 4, 2016 at 12:50 AM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> Following up on a Stack Overflow question from some time ago, http://stackoverflow.com/questions/40604545/twisted-using-connectprotocol-to-connect-endpoint-cause-memory-leak?noredirect=1#comment68573508_40604545 <http://stackoverflow.com/questions/40604545/twisted-using-connectprotocol-to-connect-endpoint-cause-memory-leak?noredirect=1#comment68573508_40604545> since the submitter added a minimal reproducer, I used Heappy https://pypi.org/project/guppy/ <https://pypi.org/project/guppy/> to look at memory sizing, and seeing large numbers of Logger instances and type objects leaking when using client endpoints.  It was not immediately obvious to me where the leak is occurring though, as I was careful to clean up the Deferred results and not leave them in a failure state.
> 
> I am hoping that I can entice someone else to diagnose this far enough to actually file a bug :-).
> 
> 
> Answered.  I didn't file a bug, I'll let someone else with ideas about twisted.logger think about what exactly the bug is.

I wrote up this bug, and will file it when the ability to file bugs on Trac comes back:

twisted.logger._initialBuffer can consume a surprisingly large amount of memory if logging is not initialized


The way that `twisted.logger` is supposed to work is that at process startup time, the global log observer has a ring buffer for any messages emitted before logging is initialized, and emit those messages to the initial set of log observers passed to `globalLogBeginner.beginLoggingTo`.

The size of this buffer (in `twisted.logger._buffer._DEFAULT_BUFFER_MAXIMUM` is 65535.  This value was selected arbitrarily, probably because somebody (me or wsanchez) thought "huh, yeah, 64k, that's probably a fine number); but of course, that's 64k ''bytes''.

If this were a buffer of actual formatted log messages, of say 200 bytes each, that would be about 13 megabytes, which is maybe an acceptable amount of RAM to spend on a log buffer.

However, it isn't that.  It's a buffer of 64k log ''events'', each of which probably has a `log_logger` and `log_source` set, each of which is an object attached to potentially arbitrary data.  For example, every `Factory` that starts up logs something, which means you're holding on to an instance, and an instance dictionary, and the protocol instance, and the protocol instance dictionary.  Worse yet, any logged ''failures'' might hold on to all the stuff on their stack.

Add it all up and you end up with a log buffer totaling in the hundreds of megabytes, or even gigabytes, once it's full.  In an application that naively uses Twisted without ever initializing logging, this hangs around forever.

This buffer should probably be a ''lot'' smaller, and we might want to emit a warning when it fills up, reminding people that it is ''only polite'' to start up the logging subsystem, even just to explicitly throw logs away.

Text is here in case someone else manages to make trac come back and would like to file it before I get back :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161205/f15acb77/attachment-0002.html>

From hawkowl at atleastfornow.net  Mon Dec  5 23:18:12 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Tue, 6 Dec 2016 17:18:12 +1100
Subject: [Twisted-Python] memory leaks
In-Reply-To: <FCF86015-D929-42AB-84A7-93140272F847@twistedmatrix.com>
References: <0DF2D12E-FB25-463B-A5DA-6AAF8F287866@twistedmatrix.com>
 <CAEeXt4O4Mz1f-W0QKfULMoOEiuDezzvb4gCUCphLsh_QgmEfzA@mail.gmail.com>
 <FCF86015-D929-42AB-84A7-93140272F847@twistedmatrix.com>
Message-ID: <93DF4FD6-7B38-438E-A241-3BC39B28835E@atleastfornow.net>


> On 6 Dec. 2016, at 17:09, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 
> twisted.logger._initialBuffer can consume a surprisingly large amount of memory if logging is not initialized
> 
> 
> The way that `twisted.logger` is supposed to work is that at process startup time, the global log observer has a ring buffer for any messages emitted before logging is initialized, and emit those messages to the initial set of log observers passed to `globalLogBeginner.beginLoggingTo`.
> 
> The size of this buffer (in `twisted.logger._buffer._DEFAULT_BUFFER_MAXIMUM` is 65535.  This value was selected arbitrarily, probably because somebody (me or wsanchez) thought "huh, yeah, 64k, that's probably a fine number); but of course, that's 64k ''bytes''.
> 
> If this were a buffer of actual formatted log messages, of say 200 bytes each, that would be about 13 megabytes, which is maybe an acceptable amount of RAM to spend on a log buffer.
> 
> However, it isn't that.  It's a buffer of 64k log ''events'', each of which probably has a `log_logger` and `log_source` set, each of which is an object attached to potentially arbitrary data.  For example, every `Factory` that starts up logs something, which means you're holding on to an instance, and an instance dictionary, and the protocol instance, and the protocol instance dictionary.  Worse yet, any logged ''failures'' might hold on to all the stuff on their stack.
> 
> Add it all up and you end up with a log buffer totaling in the hundreds of megabytes, or even gigabytes, once it's full.  In an application that naively uses Twisted without ever initializing logging, this hangs around forever.
> 
> This buffer should probably be a ''lot'' smaller, and we might want to emit a warning when it fills up, reminding people that it is ''only polite'' to start up the logging subsystem, even just to explicitly throw logs away.


I fixed trac: https://twistedmatrix.com/trac/ticket/8936#ticket <https://twistedmatrix.com/trac/ticket/8936#ticket>

- Amber
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161206/c42eebe0/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Dec  5 23:58:08 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 5 Dec 2016 22:58:08 -0800
Subject: [Twisted-Python] memory leaks
In-Reply-To: <93DF4FD6-7B38-438E-A241-3BC39B28835E@atleastfornow.net>
References: <0DF2D12E-FB25-463B-A5DA-6AAF8F287866@twistedmatrix.com>
 <CAEeXt4O4Mz1f-W0QKfULMoOEiuDezzvb4gCUCphLsh_QgmEfzA@mail.gmail.com>
 <FCF86015-D929-42AB-84A7-93140272F847@twistedmatrix.com>
 <93DF4FD6-7B38-438E-A241-3BC39B28835E@atleastfornow.net>
Message-ID: <3744C3D1-5932-4C27-ABB3-17AF8B908364@twistedmatrix.com>


> On Dec 5, 2016, at 10:18 PM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> 
>> On 6 Dec. 2016, at 17:09, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>> 
>> 
>> twisted.logger._initialBuffer can consume a surprisingly large amount of memory if logging is not initialized
>> 
>> 
>> The way that `twisted.logger` is supposed to work is that at process startup time, the global log observer has a ring buffer for any messages emitted before logging is initialized, and emit those messages to the initial set of log observers passed to `globalLogBeginner.beginLoggingTo`.
>> 
>> The size of this buffer (in `twisted.logger._buffer._DEFAULT_BUFFER_MAXIMUM` is 65535.  This value was selected arbitrarily, probably because somebody (me or wsanchez) thought "huh, yeah, 64k, that's probably a fine number); but of course, that's 64k ''bytes''.
>> 
>> If this were a buffer of actual formatted log messages, of say 200 bytes each, that would be about 13 megabytes, which is maybe an acceptable amount of RAM to spend on a log buffer.
>> 
>> However, it isn't that.  It's a buffer of 64k log ''events'', each of which probably has a `log_logger` and `log_source` set, each of which is an object attached to potentially arbitrary data.  For example, every `Factory` that starts up logs something, which means you're holding on to an instance, and an instance dictionary, and the protocol instance, and the protocol instance dictionary.  Worse yet, any logged ''failures'' might hold on to all the stuff on their stack.
>> 
>> Add it all up and you end up with a log buffer totaling in the hundreds of megabytes, or even gigabytes, once it's full.  In an application that naively uses Twisted without ever initializing logging, this hangs around forever.
>> 
>> This buffer should probably be a ''lot'' smaller, and we might want to emit a warning when it fills up, reminding people that it is ''only polite'' to start up the logging subsystem, even just to explicitly throw logs away.
> 
> 
> I fixed trac: https://twistedmatrix.com/trac/ticket/8936#ticket <https://twistedmatrix.com/trac/ticket/8936#ticket>
Thanks!

By "Fixed" I take it you mean rolled back, via:

trac at dornkirk:~$ ./virtualenv/bin/pip freeze | grep Trac==
Trac==1.0.13

and
https://github.com/twisted-infra/braid/commit/c2d393fd501c6464b1b475eff214cab64f13ee2a

Don't get me wrong, I'm not complaining :). This is certainly the right thing to do for now.  But I'm wondering if you know what's wrong with 1.2 so we can upgrade soonish?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161205/9f7bbeb1/attachment-0002.html>

From psi29a at gmail.com  Tue Dec  6 04:17:16 2016
From: psi29a at gmail.com (bret curtis)
Date: Tue, 6 Dec 2016 12:17:16 +0100
Subject: [Twisted-Python] memory leaks
In-Reply-To: <3744C3D1-5932-4C27-ABB3-17AF8B908364@twistedmatrix.com>
References: <0DF2D12E-FB25-463B-A5DA-6AAF8F287866@twistedmatrix.com>
 <CAEeXt4O4Mz1f-W0QKfULMoOEiuDezzvb4gCUCphLsh_QgmEfzA@mail.gmail.com>
 <FCF86015-D929-42AB-84A7-93140272F847@twistedmatrix.com>
 <93DF4FD6-7B38-438E-A241-3BC39B28835E@atleastfornow.net>
 <3744C3D1-5932-4C27-ABB3-17AF8B908364@twistedmatrix.com>
Message-ID: <CA+LhZ98g4CnXFcUEfgt+_-cC1ofwgX1vvOjVbG32cr4oR=yUhQ@mail.gmail.com>

Isn't this a duplicate of my "memory leak" bug report from about 11 months ago?
https://twistedmatrix.com/trac/ticket/8164

Glype's last comment on the ticket was:
Now, again, I want to be clear that the buffer size here is still a
bug, and we vastly mis-estimated a reasonable size.

The end result was that Hawkie indicated that there was a 64K buffer
of variable length logs. Because they are variable in length means
they use either almost no memory to potentially causing the OOM to
come along. What wasn't clear was if you reached the 64K limit, does
Twisted then just drop the rest of the logs are is the buffer a
circular one and drops the first entry to accommodate the last entry
or something else entirely?

Cheers,
Bret


On Tue, Dec 6, 2016 at 7:58 AM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
> On Dec 5, 2016, at 10:18 PM, Amber Hawkie Brown <hawkowl at atleastfornow.net>
> wrote:
>
>
> On 6 Dec. 2016, at 17:09, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
>
> twisted.logger._initialBuffer can consume a surprisingly large amount of
> memory if logging is not initialized
>
>
> The way that `twisted.logger` is supposed to work is that at process startup
> time, the global log observer has a ring buffer for any messages emitted
> before logging is initialized, and emit those messages to the initial set of
> log observers passed to `globalLogBeginner.beginLoggingTo`.
>
> The size of this buffer (in `twisted.logger._buffer._DEFAULT_BUFFER_MAXIMUM`
> is 65535.  This value was selected arbitrarily, probably because somebody
> (me or wsanchez) thought "huh, yeah, 64k, that's probably a fine number);
> but of course, that's 64k ''bytes''.
>
> If this were a buffer of actual formatted log messages, of say 200 bytes
> each, that would be about 13 megabytes, which is maybe an acceptable amount
> of RAM to spend on a log buffer.
>
> However, it isn't that.  It's a buffer of 64k log ''events'', each of which
> probably has a `log_logger` and `log_source` set, each of which is an object
> attached to potentially arbitrary data.  For example, every `Factory` that
> starts up logs something, which means you're holding on to an instance, and
> an instance dictionary, and the protocol instance, and the protocol instance
> dictionary.  Worse yet, any logged ''failures'' might hold on to all the
> stuff on their stack.
>
> Add it all up and you end up with a log buffer totaling in the hundreds of
> megabytes, or even gigabytes, once it's full.  In an application that
> naively uses Twisted without ever initializing logging, this hangs around
> forever.
>
> This buffer should probably be a ''lot'' smaller, and we might want to emit
> a warning when it fills up, reminding people that it is ''only polite'' to
> start up the logging subsystem, even just to explicitly throw logs away.
>
>
> I fixed trac: https://twistedmatrix.com/trac/ticket/8936#ticket
>
>
> Thanks!
>
> By "Fixed" I take it you mean rolled back, via:
>
> trac at dornkirk:~$ ./virtualenv/bin/pip freeze | grep Trac==
> Trac==1.0.13
>
>
> and
>
> https://github.com/twisted-infra/braid/commit/c2d393fd501c6464b1b475eff214cab64f13ee2a
>
>
> Don't get me wrong, I'm not complaining :). This is certainly the right
> thing to do for now.  But I'm wondering if you know what's wrong with 1.2 so
> we can upgrade soonish?
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From exarkun at twistedmatrix.com  Tue Dec  6 06:04:11 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Tue, 6 Dec 2016 08:04:11 -0500
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <46AA2BA1-54A0-4630-ACB6-03B4BB7B2149@twistedmatrix.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
 <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
 <5C81318C-EFE6-47EF-9208-4098D485FA42@twistedmatrix.com>
 <CAEeXt4ONncVJiAH1nh3PT+skpsaXzZZ7oKxBht3chQxSM64+ag@mail.gmail.com>
 <CAEeXt4M-bWMrmPjx3DD1r3JWobDRjFQF2jndCYN2Rk36KCkSNw@mail.gmail.com>
 <64048028-5B08-4787-B179-F7720551D0C3@twistedmatrix.com>
 <CAEeXt4OsPyNs35iqkOozn3PKaDrj=giZFp0vEZq=hyOjYDyWhA@mail.gmail.com>
 <CAEeXt4PBRi6j=ZSQ_1eOdGiTKdpi5KyVqDrdayagdb2VozOvKg@mail.gmail.com>
 <46AA2BA1-54A0-4630-ACB6-03B4BB7B2149@twistedmatrix.com>
Message-ID: <CAEeXt4Pz2xKLX8mxMOOSEg_frUu=DENsPwk71Bt948cJkaM-oQ@mail.gmail.com>

On Tue, Dec 6, 2016 at 1:08 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> Now I can't create tickets at all.  I hope this is related and not just
> general decay of our Trac instance :).
>
> The web UI tells me "Warning: The action "None" is not available" without
> actually creating the ticket.  Nothing that I can see appears in the logs.
> Hopefully this warning message means something to someone?
>

Not to me, unfortunately. :(


>
> -glyph
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161206/69514518/attachment-0002.html>

From exarkun at twistedmatrix.com  Tue Dec  6 06:24:02 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Tue, 6 Dec 2016 08:24:02 -0500
Subject: [Twisted-Python] trac deployment (was: memory leaks)
Message-ID: <CAEeXt4OQo+KhQCG5m0ym=D+1AyohL466mgTLzgjTKNj-W3xB5w@mail.gmail.com>

On Tue, Dec 6, 2016 at 1:58 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> Thanks!
>
> By "Fixed" I take it you mean rolled back, via:
>
> trac at dornkirk:~$ ./virtualenv/bin/pip freeze | grep Trac==
> Trac==1.0.13
>
>
> and
>
> https://github.com/twisted-infra/braid/commit/
> c2d393fd501c6464b1b475eff214cab64f13ee2a
>
>
> Don't get me wrong, I'm not complaining :). This is certainly the right
> thing to do for now.  But I'm wondering if you know what's wrong with 1.2
> so we can upgrade soonish?
>
>
Is the braid trac service also fixed - or does the next person who tries to
update the deployment need to watch out for this same failure mode?

Jean-Paul


> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161206/b43db52e/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Dec  6 10:54:35 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 6 Dec 2016 09:54:35 -0800
Subject: [Twisted-Python] trac deployment (was: memory leaks)
In-Reply-To: <CAEeXt4OQo+KhQCG5m0ym=D+1AyohL466mgTLzgjTKNj-W3xB5w@mail.gmail.com>
References: <CAEeXt4OQo+KhQCG5m0ym=D+1AyohL466mgTLzgjTKNj-W3xB5w@mail.gmail.com>
Message-ID: <CBEA0689-4B2A-42A3-AA34-D0E194A743B6@twistedmatrix.com>


> On Dec 6, 2016, at 5:24 AM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> On Tue, Dec 6, 2016 at 1:58 AM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> Thanks!
> 
> By "Fixed" I take it you mean rolled back, via:
> 
> trac at dornkirk:~$ ./virtualenv/bin/pip freeze | grep Trac==
> Trac==1.0.13
> 
> and
> https://github.com/twisted-infra/braid/commit/c2d393fd501c6464b1b475eff214cab64f13ee2a <https://github.com/twisted-infra/braid/commit/c2d393fd501c6464b1b475eff214cab64f13ee2a>
> 
> Don't get me wrong, I'm not complaining :). This is certainly the right thing to do for now.  But I'm wondering if you know what's wrong with 1.2 so we can upgrade soonish?
> 
> 
> Is the braid trac service also fixed - or does the next person who tries to update the deployment need to watch out for this same failure mode?

The referenced commit to braid switches from multiple .install calls (i.e. "pip" runs) with pinned versions of things to a single one where all versions are pinned; as I understand it this should pin it properly for the future.  (It was upgrading trac in some of the things-that-depend-on-trac .install() calls.)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161206/8ca75d84/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Dec  6 10:55:35 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 6 Dec 2016 09:55:35 -0800
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <CAEeXt4Pz2xKLX8mxMOOSEg_frUu=DENsPwk71Bt948cJkaM-oQ@mail.gmail.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
 <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
 <5C81318C-EFE6-47EF-9208-4098D485FA42@twistedmatrix.com>
 <CAEeXt4ONncVJiAH1nh3PT+skpsaXzZZ7oKxBht3chQxSM64+ag@mail.gmail.com>
 <CAEeXt4M-bWMrmPjx3DD1r3JWobDRjFQF2jndCYN2Rk36KCkSNw@mail.gmail.com>
 <64048028-5B08-4787-B179-F7720551D0C3@twistedmatrix.com>
 <CAEeXt4OsPyNs35iqkOozn3PKaDrj=giZFp0vEZq=hyOjYDyWhA@mail.gmail.com>
 <CAEeXt4PBRi6j=ZSQ_1eOdGiTKdpi5KyVqDrdayagdb2VozOvKg@mail.gmail.com>
 <46AA2BA1-54A0-4630-ACB6-03B4BB7B2149@twistedmatrix.com>
 <CAEeXt4Pz2xKLX8mxMOOSEg_frUu=DENsPwk71Bt948cJkaM-oQ@mail.gmail.com>
Message-ID: <9FD52EDB-BEE2-4973-977E-2409CA255DE9@twistedmatrix.com>

On Dec 6, 2016, at 5:04 AM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> On Tue, Dec 6, 2016 at 1:08 AM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> Now I can't create tickets at all.  I hope this is related and not just general decay of our Trac instance :).
> 
> The web UI tells me "Warning: The action "None" is not available" without actually creating the ticket.  Nothing that I can see appears in the logs.  Hopefully this warning message means something to someone?
> 
> Not to me, unfortunately. :(

Luckily it meant something to Amber!

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161206/2768c00f/attachment-0002.html>

From exarkun at twistedmatrix.com  Tue Dec  6 11:27:20 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Tue, 6 Dec 2016 13:27:20 -0500
Subject: [Twisted-Python] trac deployment (was: memory leaks)
In-Reply-To: <CBEA0689-4B2A-42A3-AA34-D0E194A743B6@twistedmatrix.com>
References: <CAEeXt4OQo+KhQCG5m0ym=D+1AyohL466mgTLzgjTKNj-W3xB5w@mail.gmail.com>
 <CBEA0689-4B2A-42A3-AA34-D0E194A743B6@twistedmatrix.com>
Message-ID: <CAEeXt4PQ5d8EgVmPknxJvMTndnnuBsxjV_-ag-u6aWddmd07dg@mail.gmail.com>

On Tue, Dec 6, 2016 at 12:54 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Dec 6, 2016, at 5:24 AM, Jean-Paul Calderone <exarkun at twistedmatrix.com>
> wrote:
>
> Is the braid trac service also fixed - or does the next person who tries
> to update the deployment need to watch out for this same failure mode?
>
>
> The referenced commit to braid switches from multiple .install calls (i.e.
> "pip" runs) with pinned versions of things to a single one where all
> versions are pinned; as I understand it this should pin it properly for the
> future.  (It was upgrading trac in some of the things-that-depend-on-trac
> .install() calls.)
>

Cool.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161206/45d1c290/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Dec  6 11:28:47 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 6 Dec 2016 10:28:47 -0800
Subject: [Twisted-Python] memory leaks
In-Reply-To: <CA+LhZ98g4CnXFcUEfgt+_-cC1ofwgX1vvOjVbG32cr4oR=yUhQ@mail.gmail.com>
References: <0DF2D12E-FB25-463B-A5DA-6AAF8F287866@twistedmatrix.com>
 <CAEeXt4O4Mz1f-W0QKfULMoOEiuDezzvb4gCUCphLsh_QgmEfzA@mail.gmail.com>
 <FCF86015-D929-42AB-84A7-93140272F847@twistedmatrix.com>
 <93DF4FD6-7B38-438E-A241-3BC39B28835E@atleastfornow.net>
 <3744C3D1-5932-4C27-ABB3-17AF8B908364@twistedmatrix.com>
 <CA+LhZ98g4CnXFcUEfgt+_-cC1ofwgX1vvOjVbG32cr4oR=yUhQ@mail.gmail.com>
Message-ID: <2C47E3C8-1D75-44AF-930A-54F7C6228E34@twistedmatrix.com>


> On Dec 6, 2016, at 3:17 AM, bret curtis <psi29a at gmail.com> wrote:
> 
> Isn't this a duplicate of my "memory leak" bug report from about 11 months ago?
> https://twistedmatrix.com/trac/ticket/8164

Yes, thank you for the reference to that.  I've closed the new one and updated the old one.

> Glype's last comment on the ticket was:
> Now, again, I want to be clear that the buffer size here is still a
> bug, and we vastly mis-estimated a reasonable size.

Apparently my opinion hasn't changed, although I didn't remember it ;).

> The end result was that Hawkie indicated that there was a 64K buffer
> of variable length logs. Because they are variable in length means
> they use either almost no memory to potentially causing the OOM to
> come along. What wasn't clear was if you reached the 64K limit, does
> Twisted then just drop the rest of the logs are is the buffer a
> circular one and drops the first entry to accommodate the last entry
> or something else entirely?

It's intended to be a ring buffer, yes, so it should drop the earlier ones.  A PR to shrink the default to something reasonable based on your measurements would be very helpful :).

-glyph


From glyph at twistedmatrix.com  Thu Dec  8 18:49:05 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 8 Dec 2016 17:49:05 -0800
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <CAEeXt4PBRi6j=ZSQ_1eOdGiTKdpi5KyVqDrdayagdb2VozOvKg@mail.gmail.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
 <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
 <5C81318C-EFE6-47EF-9208-4098D485FA42@twistedmatrix.com>
 <CAEeXt4ONncVJiAH1nh3PT+skpsaXzZZ7oKxBht3chQxSM64+ag@mail.gmail.com>
 <CAEeXt4M-bWMrmPjx3DD1r3JWobDRjFQF2jndCYN2Rk36KCkSNw@mail.gmail.com>
 <64048028-5B08-4787-B179-F7720551D0C3@twistedmatrix.com>
 <CAEeXt4OsPyNs35iqkOozn3PKaDrj=giZFp0vEZq=hyOjYDyWhA@mail.gmail.com>
 <CAEeXt4PBRi6j=ZSQ_1eOdGiTKdpi5KyVqDrdayagdb2VozOvKg@mail.gmail.com>
Message-ID: <AA00B922-B209-42CA-AD7C-EEF50ADFE2AC@twistedmatrix.com>


> On Dec 5, 2016, at 2:45 PM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> Updated again.  Craig confirmed that it indeed wasn't working (at all).
> 
> Also, the site's now running trac 1.2 (was 1.0.12).  The fab target for re-deploying trac just picks the newest release at the moment, despite the appearance of being pinned to a particular version.  I don't think I'm going to try to bite off fixing this.  The problem, though, is multiple invocations of `pip -U` - a later instance of which is totally happy to upgrade the trac 1.0.12 install to 1.2.


Another problem commit:

https://github.com/twisted/twisted/commit/6ec4521caae4edec97238ae00ff9bf81a4701a73

This should have reopened https://twistedmatrix.com/trac/ticket/8937 but didn't.

Have there been any examples of it working yet?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161208/e8c79515/attachment-0002.html>

From exarkun at twistedmatrix.com  Thu Dec  8 20:03:49 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Thu, 8 Dec 2016 22:03:49 -0500
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <AA00B922-B209-42CA-AD7C-EEF50ADFE2AC@twistedmatrix.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
 <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
 <5C81318C-EFE6-47EF-9208-4098D485FA42@twistedmatrix.com>
 <CAEeXt4ONncVJiAH1nh3PT+skpsaXzZZ7oKxBht3chQxSM64+ag@mail.gmail.com>
 <CAEeXt4M-bWMrmPjx3DD1r3JWobDRjFQF2jndCYN2Rk36KCkSNw@mail.gmail.com>
 <64048028-5B08-4787-B179-F7720551D0C3@twistedmatrix.com>
 <CAEeXt4OsPyNs35iqkOozn3PKaDrj=giZFp0vEZq=hyOjYDyWhA@mail.gmail.com>
 <CAEeXt4PBRi6j=ZSQ_1eOdGiTKdpi5KyVqDrdayagdb2VozOvKg@mail.gmail.com>
 <AA00B922-B209-42CA-AD7C-EEF50ADFE2AC@twistedmatrix.com>
Message-ID: <CAEeXt4NWBKQAct6kG-Y1ncFR2ZOoSHRpeFkbCnG5U2g9Ni_SAA@mail.gmail.com>

On Thu, Dec 8, 2016 at 8:49 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Dec 5, 2016, at 2:45 PM, Jean-Paul Calderone <exarkun at twistedmatrix.com>
> wrote:
>
> Updated again.  Craig confirmed that it indeed wasn't working (at all).
>
> Also, the site's now running trac 1.2 (was 1.0.12).  The fab target for
> re-deploying trac just picks the newest release at the moment, despite the
>  *appearance* of being pinned to a particular version.  I don't think I'm
> going to try to bite off fixing this.  The problem, though, is multiple
> invocations of `pip -U` - a later instance of which is totally happy to
> upgrade the trac 1.0.12 install to 1.2.
>
>
>
> Another problem commit:
>
> https://github.com/twisted/twisted/commit/6ec4521caae4edec97238ae00ff9bf
> 81a4701a73
>
> This should have reopened https://twistedmatrix.com/trac/ticket/8937 but
> didn't.
>
> Have there been any examples of it working yet?
>

(Followed-up on IRC in Twisted admin channe; glyph can summarize if he
> wants.
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161208/b7a5c94a/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Dec  8 23:54:30 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 8 Dec 2016 22:54:30 -0800
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <CAEeXt4NWBKQAct6kG-Y1ncFR2ZOoSHRpeFkbCnG5U2g9Ni_SAA@mail.gmail.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
 <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
 <5C81318C-EFE6-47EF-9208-4098D485FA42@twistedmatrix.com>
 <CAEeXt4ONncVJiAH1nh3PT+skpsaXzZZ7oKxBht3chQxSM64+ag@mail.gmail.com>
 <CAEeXt4M-bWMrmPjx3DD1r3JWobDRjFQF2jndCYN2Rk36KCkSNw@mail.gmail.com>
 <64048028-5B08-4787-B179-F7720551D0C3@twistedmatrix.com>
 <CAEeXt4OsPyNs35iqkOozn3PKaDrj=giZFp0vEZq=hyOjYDyWhA@mail.gmail.com>
 <CAEeXt4PBRi6j=ZSQ_1eOdGiTKdpi5KyVqDrdayagdb2VozOvKg@mail.gmail.com>
 <AA00B922-B209-42CA-AD7C-EEF50ADFE2AC@twistedmatrix.com>
 <CAEeXt4NWBKQAct6kG-Y1ncFR2ZOoSHRpeFkbCnG5U2g9Ni_SAA@mail.gmail.com>
Message-ID: <4E1019A8-0A71-4553-85FA-D0E0464E366B@twistedmatrix.com>


> On Dec 8, 2016, at 7:03 PM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> On Thu, Dec 8, 2016 at 8:49 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
>> On Dec 5, 2016, at 2:45 PM, Jean-Paul Calderone <exarkun at twistedmatrix.com <mailto:exarkun at twistedmatrix.com>> wrote:
>> 
>> Updated again.  Craig confirmed that it indeed wasn't working (at all).
>> 
>> Also, the site's now running trac 1.2 (was 1.0.12).  The fab target for re-deploying trac just picks the newest release at the moment, despite the appearance of being pinned to a particular version.  I don't think I'm going to try to bite off fixing this.  The problem, though, is multiple invocations of `pip -U` - a later instance of which is totally happy to upgrade the trac 1.0.12 install to 1.2.
> 
> 
> Another problem commit:
> 
> https://github.com/twisted/twisted/commit/6ec4521caae4edec97238ae00ff9bf81a4701a73 <https://github.com/twisted/twisted/commit/6ec4521caae4edec97238ae00ff9bf81a4701a73>
> 
> This should have reopened https://twistedmatrix.com/trac/ticket/8937 <https://twistedmatrix.com/trac/ticket/8937> but didn't.
> 
> Have there been any examples of it working yet?
> 
> (Followed-up on IRC in Twisted admin channe; glyph can summarize if he wants.

The part that I remember was just fixing trac after it broke - but hopefully what broke it was an update that fixes the regex :).  Hopefully I'll close another ticket tonight and test it out...

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161208/53fc406c/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Dec  9 03:04:22 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 9 Dec 2016 02:04:22 -0800
Subject: [Twisted-Python] Spurious commit/ticket links
In-Reply-To: <4E1019A8-0A71-4553-85FA-D0E0464E366B@twistedmatrix.com>
References: <CAEeXt4MbJttRpQHKM5iAch+Htt0OG-7r=bBiR4_Hm2=05-=2qQ@mail.gmail.com>
 <03ECA3CA-5D66-487C-93DB-811FB9E97B88@twistedmatrix.com>
 <CAEeXt4PrJb4a4orRhh1XJngCZwo1-WToAtO7iM=khHPcaYWzRA@mail.gmail.com>
 <5C81318C-EFE6-47EF-9208-4098D485FA42@twistedmatrix.com>
 <CAEeXt4ONncVJiAH1nh3PT+skpsaXzZZ7oKxBht3chQxSM64+ag@mail.gmail.com>
 <CAEeXt4M-bWMrmPjx3DD1r3JWobDRjFQF2jndCYN2Rk36KCkSNw@mail.gmail.com>
 <64048028-5B08-4787-B179-F7720551D0C3@twistedmatrix.com>
 <CAEeXt4OsPyNs35iqkOozn3PKaDrj=giZFp0vEZq=hyOjYDyWhA@mail.gmail.com>
 <CAEeXt4PBRi6j=ZSQ_1eOdGiTKdpi5KyVqDrdayagdb2VozOvKg@mail.gmail.com>
 <AA00B922-B209-42CA-AD7C-EEF50ADFE2AC@twistedmatrix.com>
 <CAEeXt4NWBKQAct6kG-Y1ncFR2ZOoSHRpeFkbCnG5U2g9Ni_SAA@mail.gmail.com>
 <4E1019A8-0A71-4553-85FA-D0E0464E366B@twistedmatrix.com>
Message-ID: <3487B366-6804-47E8-B91A-D8ADFBBB6A1A@twistedmatrix.com>


> On Dec 8, 2016, at 10:54 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Dec 8, 2016, at 7:03 PM, Jean-Paul Calderone <exarkun at twistedmatrix.com <mailto:exarkun at twistedmatrix.com>> wrote:
>> 
>> On Thu, Dec 8, 2016 at 8:49 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>> 
>>> On Dec 5, 2016, at 2:45 PM, Jean-Paul Calderone <exarkun at twistedmatrix.com <mailto:exarkun at twistedmatrix.com>> wrote:
>>> 
>>> Updated again.  Craig confirmed that it indeed wasn't working (at all).
>>> 
>>> Also, the site's now running trac 1.2 (was 1.0.12).  The fab target for re-deploying trac just picks the newest release at the moment, despite the appearance of being pinned to a particular version.  I don't think I'm going to try to bite off fixing this.  The problem, though, is multiple invocations of `pip -U` - a later instance of which is totally happy to upgrade the trac 1.0.12 install to 1.2.
>> 
>> 
>> Another problem commit:
>> 
>> https://github.com/twisted/twisted/commit/6ec4521caae4edec97238ae00ff9bf81a4701a73 <https://github.com/twisted/twisted/commit/6ec4521caae4edec97238ae00ff9bf81a4701a73>
>> 
>> This should have reopened https://twistedmatrix.com/trac/ticket/8937 <https://twistedmatrix.com/trac/ticket/8937> but didn't.
>> 
>> Have there been any examples of it working yet?
>> 
>> (Followed-up on IRC in Twisted admin channe; glyph can summarize if he wants.
> 
> The part that I remember was just fixing trac after it broke - but hopefully what broke it was an update that fixes the regex :).  Hopefully I'll close another ticket tonight and test it out...

I did test it out, aaaaand:

https://twistedmatrix.com/trac/ticket/8922#comment:5

It works!  \o/

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161209/8bb4b813/attachment-0002.html>

From trac at twistedmatrix.com  Sun Dec 11 00:05:20 2016
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 11 Dec 2016 07:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1481439920.08.6715876988701666206@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161211/d24778e2/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Dec 12 16:38:38 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 12 Dec 2016 15:38:38 -0800
Subject: [Twisted-Python] CI FYI
Message-ID: <9AE042DC-E6E9-43C7-8358-F391F61DBFF4@twistedmatrix.com>

Hello Twisted maintainers,

I realized today that not not everyone is aware of this quirk in our build infrastructure, and since it's a required step, y'all should probably know about it.

Any PR that we merge should run not just on public CI (travis, appveyor, codecov) but also our own Buildbot infrastructure.  Many of our supported platforms, particularly desktop Windows and OS X, do not have good support from multi-tenant CI vendors.  This has always been true, but recently it became mechanically necessary because the OS X status from buildbot became a required status, which means that it appears in the "waiting" state even if no build has actually been started.  No twisted PR will have a successful build unless some TM Labs member has done the following.

Since our buildbots do not have adequate security to run totally untrusted code, only project members may submit builds to them.  The way a project member submits such a build is they cause a ref to exist in the official Twisted repo's namespace.

So, a necessary step in the code review process is to scan the diff to ensure that it's not malicious, and to then ensure that a branch exists in the https://github.com/twisted/twisted/ <https://github.com/twisted/twisted/> namespace pointing at the exact commit that you want buildbot builds to run tests for.  (Don't worry: the buildbots are not fully secured, but neither do they contain particularly sensitive data.  If you screw this check up, the main potentially bad consequence is to availability of the build fleet, not compromise of PyPI releases or anything like that.  That said, if you screw up the security check in the full review and it lands on master, then some really bad stuff can happen...)

The way to express this intent to Git is something like:

$ git fetch origin "refs/pull/${PR_NUMBER}/head"
$ git push origin FETCH_HEAD:"${TICKET_NUMBER}-branchname"

I don't know of a way to do it through the github web UI but perhaps someone more knowledgeable could chime in.

Thanks,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161212/f19a5d90/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Dec 13 12:18:11 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 13 Dec 2016 11:18:11 -0800
Subject: [Twisted-Python] buildbot certificate expiration
Message-ID: <223E3FD3-1530-4B6E-A7F4-7F17489A079C@twistedmatrix.com>

Buildbot's HTTPS certificate is expired.  This suggests that its txacme auto-renewal has come unglued and fallen off.  I'll probably poke at it later today but I figured I'd just send a note first in case someone else happened to know what was up...

-glyph


From ex.vitorino at gmail.com  Thu Dec 15 10:07:42 2016
From: ex.vitorino at gmail.com (exvito here)
Date: Thu, 15 Dec 2016 17:07:42 +0000
Subject: [Twisted-Python] ITransport.write after IProtocol.connectionLost --
	no failure/exception?
Message-ID: <CADtv4OAY19LAvF495Q3NAu=DAdogPD87dWyDJN-_Xv0ZB-Gbkg@mail.gmail.com>

Dear all,

The subject says most of it. While diagnosing a behavior on a somewhat
large codebase, I found out something somewhat surprising -- see
subject -- which is replicated with the minimal code example below.

It is a LineReceiver client that:
1. Connects to 127.0.0.1:10000.
2. Sends a line of text.
3. Disconnects one second later.
4. Tries to send another line of text, one second after disconnection.

I expected step 4 to fail somehow, given that Twisted promptly
detected that the connection closed and IProtocol.connectionLost was
called, as documented. Nevertheless, it does not fail.

So the questions are:
a) Why does it not fail? I'm sure there is a good reason for that, as
most things do in Twisted.
b) Does a protocol implementation, like the one in the example, really
need to track connectionMade / connectionLost calls before going for
self.transport.write?
c) Can a protocol implementation, instead, depend on
self.transport.connected for which I found no documentation? (I
probably missed it, where is it?)

Thanks in advance for enlightening me. :-)
Regards,
--
exvito


# --[ cut here ]----------------------------------------------------

from twisted.internet import protocol, reactor, defer
from twisted.protocols import basic


class ClientAPI(basic.LineReceiver):

    def _log(self, msg):
        print('[connected=%r] %s' % (self.transport.connected, msg))

    def _send(self, line):
        self.sendLine(line)
        self._log('sent: %r' % (line,))

    def connectionMade(self):
        self._log('connection made')
        self._send('first line')
        reactor.callLater(1, lambda: self.transport.loseConnection())

    def connectionLost(self, reason):
        self._log('connection lost')
        reactor.callLater(1, self.postConnectionLostCall)

    def postConnectionLostCall(self):
        self._send('post conn lost call - SHOULD FAIL')


class ClientFactory(protocol.ClientFactory):

    protocol = ClientAPI

    def clientConnectionFailed(self, connector, reason):
        print 'connection failed -', reason
        reactor.stop()


if __name__ == '__main__':

    factory = ClientFactory()
    reactor.connectTCP('127.0.0.1', 10000, factory)
    reactor.run()



From cory at lukasa.co.uk  Fri Dec 16 06:22:09 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Fri, 16 Dec 2016 08:22:09 -0500
Subject: [Twisted-Python] ITransport.write after
 IProtocol.connectionLost -- no failure/exception?
In-Reply-To: <CADtv4OAY19LAvF495Q3NAu=DAdogPD87dWyDJN-_Xv0ZB-Gbkg@mail.gmail.com>
References: <CADtv4OAY19LAvF495Q3NAu=DAdogPD87dWyDJN-_Xv0ZB-Gbkg@mail.gmail.com>
Message-ID: <2FA38717-2D39-4177-97C6-5BA16EE1A9DB@lukasa.co.uk>


> On 15 Dec 2016, at 12:07, exvito here <ex.vitorino at gmail.com> wrote:
> 
> Dear all,
> 
> The subject says most of it. While diagnosing a behavior on a somewhat
> large codebase, I found out something somewhat surprising -- see
> subject -- which is replicated with the minimal code example below.
> 
> It is a LineReceiver client that:
> 1. Connects to 127.0.0.1:10000.
> 2. Sends a line of text.
> 3. Disconnects one second later.
> 4. Tries to send another line of text, one second after disconnection.
> 
> I expected step 4 to fail somehow, given that Twisted promptly
> detected that the connection closed and IProtocol.connectionLost was
> called, as documented. Nevertheless, it does not fail.

I can’t speak for the design of Twisted, but this is definitely an intended implementation behaviour: because twisted’s write method is non-blocking, it is generally nicer to avoid write exploding in your face when disconnected.

> b) Does a protocol implementation, like the one in the example, really
> need to track connectionMade / connectionLost calls before going for
> self.transport.write?

A well-written protocol should stop finding reasons to write once connectionLost is called, yes. Similarly, it should probably avoid writing before connectionMade.

> c) Can a protocol implementation, instead, depend on
> self.transport.connected for which I found no documentation? (I
> probably missed it, where is it?)

I have no good answer to this one, but basically I suspect the answer is “yes, for the default TCP transports”, but “no, not in the general case, because it’s not part of a documented interface”.

Cory




From glyph at twistedmatrix.com  Fri Dec 16 13:27:59 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 16 Dec 2016 12:27:59 -0800
Subject: [Twisted-Python] ITransport.write after
 IProtocol.connectionLost -- no failure/exception?
In-Reply-To: <2FA38717-2D39-4177-97C6-5BA16EE1A9DB@lukasa.co.uk>
References: <CADtv4OAY19LAvF495Q3NAu=DAdogPD87dWyDJN-_Xv0ZB-Gbkg@mail.gmail.com>
 <2FA38717-2D39-4177-97C6-5BA16EE1A9DB@lukasa.co.uk>
Message-ID: <C43121A4-1FAC-47CC-BFD2-A2957D736A1A@twistedmatrix.com>


> On Dec 16, 2016, at 5:22 AM, Cory Benfield <cory at lukasa.co.uk> wrote:
> 
> 
>> On 15 Dec 2016, at 12:07, exvito here <ex.vitorino at gmail.com> wrote:
>> 
>> Dear all,
>> 
>> The subject says most of it. While diagnosing a behavior on a somewhat
>> large codebase, I found out something somewhat surprising -- see
>> subject -- which is replicated with the minimal code example below.
>> 
>> It is a LineReceiver client that:
>> 1. Connects to 127.0.0.1:10000.
>> 2. Sends a line of text.
>> 3. Disconnects one second later.
>> 4. Tries to send another line of text, one second after disconnection.
>> 
>> I expected step 4 to fail somehow, given that Twisted promptly
>> detected that the connection closed and IProtocol.connectionLost was
>> called, as documented. Nevertheless, it does not fail.
> 
> I can’t speak for the design of Twisted, but this is definitely an intended implementation behaviour: because twisted’s write method is non-blocking, it is generally nicer to avoid write exploding in your face when disconnected.

I can! The main design feature of this approach is that if you have a loop like this:

for x in messages:
    self.transport.write(self.encode(x))

you should not have to write it to be:

for x in messages:
    if self._flagISetInConnectionLost:
        break
    self.transport.write(self.encode(x))

just to avoid seeing tracebacks in your logs.

If you care about the disconnection event, implement connectionLost to do the thing that needs to be done (in this case, stop your LoopingCall).  That's what that callback is there for!

-glyph


From ex.vitorino at gmail.com  Sat Dec 17 07:11:22 2016
From: ex.vitorino at gmail.com (exvito here)
Date: Sat, 17 Dec 2016 14:11:22 +0000
Subject: [Twisted-Python] ITransport.write after
 IProtocol.connectionLost -- no failure/exception?
In-Reply-To: <C43121A4-1FAC-47CC-BFD2-A2957D736A1A@twistedmatrix.com>
References: <CADtv4OAY19LAvF495Q3NAu=DAdogPD87dWyDJN-_Xv0ZB-Gbkg@mail.gmail.com>
 <2FA38717-2D39-4177-97C6-5BA16EE1A9DB@lukasa.co.uk>
 <C43121A4-1FAC-47CC-BFD2-A2957D736A1A@twistedmatrix.com>
Message-ID: <CADtv4OBv8iqHK8eAOwoLBW2sJMtFTvEPEyGDdG8KgoFp0VtEaQ@mail.gmail.com>

On Fri, Dec 16, 2016 at 8:27 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
>
>> On Dec 16, 2016, at 5:22 AM, Cory Benfield <cory at lukasa.co.uk> wrote:
>>
>>> On 15 Dec 2016, at 12:07, exvito here <ex.vitorino at gmail.com> wrote:
>>>
>>> Dear all,
>>>
>>> The subject says most of it. While diagnosing a behavior on a somewhat
>>> large codebase, I found out something somewhat surprising -- see
>>> subject -- which is replicated with the minimal code example below.
>>>
>>> It is a LineReceiver client that:
>>> 1. Connects to 127.0.0.1:10000.
>>> 2. Sends a line of text.
>>> 3. Disconnects one second later.
>>> 4. Tries to send another line of text, one second after disconnection.
>>>
>>> I expected step 4 to fail somehow, given that Twisted promptly
>>> detected that the connection closed and IProtocol.connectionLost was
>>> called, as documented. Nevertheless, it does not fail.
>>
>> I can’t speak for the design of Twisted, but this is definitely an intended implementation behaviour: because twisted’s write method is non-blocking, it is generally nicer to avoid write exploding in your face when disconnected.
>
> I can! The main design feature of this approach is that if you have a loop like this:
>
> for x in messages:
>     self.transport.write(self.encode(x))
>
> you should not have to write it to be:
>
> for x in messages:
>     if self._flagISetInConnectionLost:
>         break
>     self.transport.write(self.encode(x))
>
> just to avoid seeing tracebacks in your logs.
>
> If you care about the disconnection event, implement connectionLost to do the thing that needs to be done (in this case, stop your LoopingCall).  That's what that callback is there for!


Thanks for your input Cory and Glyph.

I do agree that a well written protocol should not
self.transport.write after connectionLost -- it does not make any kind
of sense to do that. It's just that the one I was debugging was doing
it in its app-level keep alive messages triggered by
IReactorTime.callLater which wasn't properly cancelled on
connectionLost. This, in turn, lead to unpexpected app-level keep
alive timeouts after disconnection which, while acceptable (depending
on app/protocol design), were having a negative impact on the overall
connection/protocol teardown and cleanup.

Having said this, the fact that self.transport.write does not complain
after connectionLost just made my analysis and debugging more
difficult (yes, I was aware that it is non-blocking -- thanks Cory --
and that when talking to the network the only confirmation of delivery
must be obtained from a received message stating that fact).

All in all, I was just looking for confirmation from a conceptual /
design standpoint. That was my purpose and it is now clear. Thanks.

Going a little bit further, in this context, I wonder if my
understanding of the Protocol / Transport objects lifecycle is 100%
clear. I think there is a one to one relationship in the sense that,
simply put, on an incoming connection the underlying machinery
instantiates a Protocol via the Factory's buildProtocol method,
instantiates a Transport object and then calls Protocol.makeConnection
to "attach" the transport to the protocol; when the connection is
closed, the Transport calls connectionLost on the Protocol and, at
some point, those two objects are no longer "usable" -- they've done
their job and will be destroyed if no app level references are kept to
them.

If this is correct, in particular the fact that a given Transport
instance is not reusable after disconnection (if it is, could you
please point out such a case?), wouldn't it be valuable to log a
warning when write after disconnect is called? (agreed, raising an
Exception would be too much and break compatiblity). I find two
reasons for that: on one hand, given that it would have made my
debugging easier, it may help other developers pin point such cases;
on the other, the fact that Twisted itself logs messages on several
occasions, such as, for example, the default noisy Factory on doStart
/ doStop. Adding to that, the fact that, if I'm reading the code
correctly, ITransport.write just throws away the data for TCP
transports since it falls back to FileDescriptor.write that simply
returns if "not self.connected or self._writeDisconnected" in
src/twisted/internet/abstract.py.

Thoughts? (or corrections, of course?)

Again, thanks for your time and input.
Regards,

PS: I don't mean to start a huge discussion on the topic or question
the current design. It is very nice as it is, thank you! I'm just
looking for improving my understanding and, humbly, contributing back.
--
exvito



From glyph at twistedmatrix.com  Sat Dec 17 16:18:54 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 17 Dec 2016 15:18:54 -0800
Subject: [Twisted-Python] ITransport.write after
 IProtocol.connectionLost -- no failure/exception?
In-Reply-To: <CADtv4OBv8iqHK8eAOwoLBW2sJMtFTvEPEyGDdG8KgoFp0VtEaQ@mail.gmail.com>
References: <CADtv4OAY19LAvF495Q3NAu=DAdogPD87dWyDJN-_Xv0ZB-Gbkg@mail.gmail.com>
 <2FA38717-2D39-4177-97C6-5BA16EE1A9DB@lukasa.co.uk>
 <C43121A4-1FAC-47CC-BFD2-A2957D736A1A@twistedmatrix.com>
 <CADtv4OBv8iqHK8eAOwoLBW2sJMtFTvEPEyGDdG8KgoFp0VtEaQ@mail.gmail.com>
Message-ID: <55DA0155-4365-4D25-B915-145BE1583440@twistedmatrix.com>


> On Dec 17, 2016, at 6:11 AM, exvito here <ex.vitorino at gmail.com> wrote:
> 
> On Fri, Dec 16, 2016 at 8:27 PM, Glyph Lefkowitz
> <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>> 
>>> On Dec 16, 2016, at 5:22 AM, Cory Benfield <cory at lukasa.co.uk> wrote:
>>> 
>>>> On 15 Dec 2016, at 12:07, exvito here <ex.vitorino at gmail.com> wrote:
>>>> 
>>>> Dear all,
>>>> 
>>>> The subject says most of it. While diagnosing a behavior on a somewhat
>>>> large codebase, I found out something somewhat surprising -- see
>>>> subject -- which is replicated with the minimal code example below.
>>>> 
>>>> It is a LineReceiver client that:
>>>> 1. Connects to 127.0.0.1:10000.
>>>> 2. Sends a line of text.
>>>> 3. Disconnects one second later.
>>>> 4. Tries to send another line of text, one second after disconnection.
>>>> 
>>>> I expected step 4 to fail somehow, given that Twisted promptly
>>>> detected that the connection closed and IProtocol.connectionLost was
>>>> called, as documented. Nevertheless, it does not fail.
>>> 
>>> I can’t speak for the design of Twisted, but this is definitely an intended implementation behaviour: because twisted’s write method is non-blocking, it is generally nicer to avoid write exploding in your face when disconnected.
>> 
>> I can! The main design feature of this approach is that if you have a loop like this:
>> 
>> for x in messages:
>>    self.transport.write(self.encode(x))
>> 
>> you should not have to write it to be:
>> 
>> for x in messages:
>>    if self._flagISetInConnectionLost:
>>        break
>>    self.transport.write(self.encode(x))
>> 
>> just to avoid seeing tracebacks in your logs.
>> 
>> If you care about the disconnection event, implement connectionLost to do the thing that needs to be done (in this case, stop your LoopingCall).  That's what that callback is there for!
> 
> 
> Thanks for your input Cory and Glyph.
> 
> I do agree that a well written protocol should not
> self.transport.write after connectionLost -- it does not make any kind
> of sense to do that. It's just that the one I was debugging was doing
> it in its app-level keep alive messages triggered by
> IReactorTime.callLater which wasn't properly cancelled on
> connectionLost. This, in turn, lead to unpexpected app-level keep
> alive timeouts after disconnection which, while acceptable (depending
> on app/protocol design), were having a negative impact on the overall
> connection/protocol teardown and cleanup.
> 
> Having said this, the fact that self.transport.write does not complain
> after connectionLost just made my analysis and debugging more
> difficult (yes, I was aware that it is non-blocking -- thanks Cory --
> and that when talking to the network the only confirmation of delivery
> must be obtained from a received message stating that fact).
> 
> All in all, I was just looking for confirmation from a conceptual /
> design standpoint. That was my purpose and it is now clear. Thanks.
> 
> Going a little bit further, in this context, I wonder if my
> understanding of the Protocol / Transport objects lifecycle is 100%
> clear. I think there is a one to one relationship in the sense that,
> simply put, on an incoming connection the underlying machinery
> instantiates a Protocol via the Factory's buildProtocol method,
> instantiates a Transport object and then calls Protocol.makeConnection
> to "attach" the transport to the protocol; when the connection is
> closed, the Transport calls connectionLost on the Protocol and, at
> some point, those two objects are no longer "usable" -- they've done
> their job and will be destroyed if no app level references are kept to
> them.

They're not "destroyed", exactly.

The way to think about this is that the reactor, while running, is always on the stack.  The stack is the root of what's currently 'active' in the garbage collector.  The reactor then has references to various things - in this case, TCP transports and timed DelayedCall objects.  The transport has a reference to the protocol, which is what keeps both of them "usable".  The DelayedCall has a reference to your function, and your function to anything it needs to do its work.

Things can be removed from and added back to the reactor at any time - for example, a transport may be removed without being closed by calling .stopReading() and .stopWriting() on it.  If it gets garbage collected, its socket will be closed, but because the reactor didn't close it, you won't get a normal connectionLost notification.

So rather than thinking of a Transport as having a precisely-defined lifecycle - although it does have certain states it goes through; connecting/connected/disconnecting/disconnected - the best way to think about it is as a graph of objects that the reactor is doing stuff to.

> If this is correct, in particular the fact that a given Transport
> instance is not reusable after disconnection (if it is, could you
> please point out such a case?), wouldn't it be valuable to log a
> warning when write after disconnect is called? (agreed, raising an
> Exception would be too much and break compatiblity). I find two
> reasons for that: on one hand, given that it would have made my
> debugging easier, it may help other developers pin point such cases;
> on the other, the fact that Twisted itself logs messages on several
> occasions, such as, for example, the default noisy Factory on doStart
> / doStop. Adding to that, the fact that, if I'm reading the code
> correctly, ITransport.write just throws away the data for TCP
> transports since it falls back to FileDescriptor.write that simply
> returns if "not self.connected or self._writeDisconnected" in
> src/twisted/internet/abstract.py.

If you start logging a warning when write is called on a closed transport, then that means any code that wants to be warnings-clean needs to check to see if the transport is writable before writing to it.  This adds a lot of complexity to that sort of message-formatting code, and potentially makes it less efficient. After all, if you have to check each write() call, that will strongly encourage you to make your message-formatting happen entirely in memory, so you always have a big string that represents the whole message, just in case a transport.write() in the middle would encounter an error.

More importantly, when users start seeing a warning like this, they often develop an incorrect intuition about what's going on with the bytes; one of the _most_ frequently asked questions about how to write Twisted protocols is "how do I tell if my bytes got to the other end without sending an application-level acknowledgement".  The answer, of course, is "that's impossible" but if users see that sometimes it warns them when the connection's closed, it reinforces the idea that there must be a way.

If you call .write, there is always the possibility that the connection _looks_ open to Twisted, but in fact is closed on the wire, and those bytes will be lost.  So it's important to me that we behave the same way in both cases.

That said, it's not like there's no room for improvement here!  The solution _I'd_ really like to see for this problem is improved visualization of what the reactor is doing.  Something that drew a graph of the reactor, and open connections, and pending timed calls would allow you to instantly see that your timed call was not connected to an active connection, and correct your code.

> Thoughts? (or corrections, of course?)
> 
> Again, thanks for your time and input.
> Regards,
> 
> PS: I don't mean to start a huge discussion on the topic or question
> the current design. It is very nice as it is, thank you! I'm just
> looking for improving my understanding and, humbly, contributing back.


Don't worry, the design is pretty fixed - and if you managed to provoke such a discussion, then maybe it does need to change!  But I doubt it :)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161217/06753011/attachment-0002.html>

From trac at twistedmatrix.com  Sun Dec 18 00:05:19 2016
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 18 Dec 2016 07:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1482044719.14.2608934813517618978@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161218/061da65d/attachment-0002.html>

From elguavas at gmail.com  Sun Dec 18 18:05:19 2016
From: elguavas at gmail.com (elguavas)
Date: Mon, 19 Dec 2016 12:05:19 +1100
Subject: [Twisted-Python] the right twisted base classes for my project
Message-ID: <0f9fc7bb-ebe9-05da-4b4c-51656ca151ff@gmail.com>

hi all. i have a project with a networked aspect that i'm thinking of 
rewriting to use twisted. i'd like to ask for any input on the best 
twisted functions to base my rewrite on for my usage case, thanks.

the project is a fairly simple "games room" that lets a small number of 
users (from 2 up to a handful, lets say 12 max) join to play simple 2d 
board games against each other. there is also a general chat among 
current players function.

i originally wrote the networking code for this using python's stdlib 
asyncore and asynchat modules, implementing a basic rpc-like mechanism 
to allow clients and server to communicate via simple structured string 
"messages".

i have to say if it was a only bit of a nightmare to code, it was a 
_lot_ of a nightmare to test and debug... anyway, so i'm rewriting the 
networking code and looking at twisted and i'd like to make sure i start 
off using the right parts of twisted for the job right from the beginning.

the networking is based on having a server, that maintains central game 
state and coordinates it among the clients, and clients that connect to 
the sever to participate in games.

the clients need to be able to call functions on the server. the server 
needs to be able to return data to the clients and also to call 
functions back on specific clients, or subsets of clients, or all clients.

i've had a good look through the twisted docs and i'm thinking that 
perspective broker is what probably i need, likely along with its avatar 
functionality.

is this a sensible way to go or am i overlooking something obvious?

(oh, and a last questionlet would be: if that would be the right parts 
of twisted to use, what would that buy me above the other possibility 
i'm considering, which is rewiriting using python's new asyncio stuff?)

tia for any replies,
stephen.



From glyph at twistedmatrix.com  Sun Dec 18 18:31:59 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 18 Dec 2016 17:31:59 -0800
Subject: [Twisted-Python] the right twisted base classes for my project
In-Reply-To: <0f9fc7bb-ebe9-05da-4b4c-51656ca151ff@gmail.com>
References: <0f9fc7bb-ebe9-05da-4b4c-51656ca151ff@gmail.com>
Message-ID: <C1AAC418-EB69-4275-9CE2-7057790783C7@twistedmatrix.com>


> On Dec 18, 2016, at 5:05 PM, elguavas <elguavas at gmail.com> wrote:
> 
> hi all. i have a project with a networked aspect that i'm thinking of rewriting to use twisted. i'd like to ask for any input on the best twisted functions to base my rewrite on for my usage case, thanks.
> 
> the project is a fairly simple "games room" that lets a small number of users (from 2 up to a handful, lets say 12 max) join to play simple 2d board games against each other. there is also a general chat among current players function.
> 
> i originally wrote the networking code for this using python's stdlib asyncore and asynchat modules, implementing a basic rpc-like mechanism to allow clients and server to communicate via simple structured string "messages".
> 
> i have to say if it was a only bit of a nightmare to code, it was a _lot_ of a nightmare to test and debug... anyway, so i'm rewriting the networking code and looking at twisted and i'd like to make sure i start off using the right parts of twisted for the job right from the beginning.
> 
> the networking is based on having a server, that maintains central game state and coordinates it among the clients, and clients that connect to the sever to participate in games.
> 
> the clients need to be able to call functions on the server. the server needs to be able to return data to the clients and also to call functions back on specific clients, or subsets of clients, or all clients.
> 
> i've had a good look through the twisted docs and i'm thinking that perspective broker is what probably i need, likely along with its avatar functionality.
> 
> is this a sensible way to go or am i overlooking something obvious?

This is definitely sensible, but it's not really specific enough to nail down any longer answer.  The thing that you want to look at to make testing easy is https://twistedmatrix.com/documents/16.6.0/api/twisted.test.proto_helpers.html <https://twistedmatrix.com/documents/16.6.0/api/twisted.test.proto_helpers.html> - stuff in this module will help you hook up your tests to an in-memory network.  (We also have some internal test helpers which make this even easier, but which need a publicly-documented interface - https://twistedmatrix.com/trac/ticket/5167 <https://twistedmatrix.com/trac/ticket/5167> is a good ticket to keep an eye on for that.)

> (oh, and a last questionlet would be: if that would be the right parts of twisted to use, what would that buy me above the other possibility i'm considering, which is rewiriting using python's new asyncio stuff?)


Twisted's event loop is already compatible with asyncio, so whatever you write should basically be compatible with it.  I would not worry about that right now :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161218/dd0d7695/attachment-0002.html>

From elguavas at gmail.com  Sun Dec 18 18:50:15 2016
From: elguavas at gmail.com (elguavas)
Date: Mon, 19 Dec 2016 12:50:15 +1100
Subject: [Twisted-Python] the right twisted base classes for my project
In-Reply-To: <C1AAC418-EB69-4275-9CE2-7057790783C7@twistedmatrix.com>
References: <0f9fc7bb-ebe9-05da-4b4c-51656ca151ff@gmail.com>
 <C1AAC418-EB69-4275-9CE2-7057790783C7@twistedmatrix.com>
Message-ID: <9514a966-4779-4c88-9665-5b9175da2e2b@gmail.com>



On 19/12/16 12:31, Glyph Lefkowitz wrote:
>
>> On Dec 18, 2016, at 5:05 PM, elguavas <elguavas at gmail.com
>>[...]
>> i've had a good look through the twisted docs and i'm thinking that
>> perspective broker is what probably i need, likely along with its
>> avatar functionality.
>>
>> is this a sensible way to go or am i overlooking something obvious?
>
> This is definitely sensible, but it's not really specific enough to nail
> down any longer answer.

ok, really the important part of what i now see was quite a long winded 
ramble ;) was this:

 >> the clients need to be able to call functions on the server. the
 >> server needs to be able to return data to the clients and also to
 >> call
 >> functions back on specific clients, or subsets of clients, or all
 >> clients.

so calls in both directions and the server being able to identify deal 
with _specific_ clients or a _specific subset_ of clients all clients.

this last parts are what seemed to fit with pb and avatar on my reading.

i'm not looking for any implementation details at this point, just 
wanting to make sure i got off on the right foot using twisted, since it 
has so many parts...

> The thing that you want to look at to make
> testing easy
> [...]
> eye on for that.)

cool, thanks.

>
>> (oh, and a last questionlet would be: if that would be the right parts
>> of twisted to use, what would that buy me above the other possibility
>> i'm considering, which is rewiriting using python's new asyncio stuff?)
>
> Twisted's event loop is already compatible with asyncio, so whatever you
> write should basically be compatible with it.  I would not worry about
> that right now :).

ok, nice to know. i'm also hoping the twisted pb stuff will accomplish 
some of the lifting for me, ie that i won't have to go quite so low 
level... i guess i'll see on that when i start to suck it. ;)

>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From ex.vitorino at gmail.com  Mon Dec 19 06:13:18 2016
From: ex.vitorino at gmail.com (ex vito)
Date: Mon, 19 Dec 2016 13:13:18 +0000
Subject: [Twisted-Python] ITransport.write after
	IProtocol.connectionLost -- no failure/exception?
In-Reply-To: <55DA0155-4365-4D25-B915-145BE1583440@twistedmatrix.com>
References: <CADtv4OAY19LAvF495Q3NAu=DAdogPD87dWyDJN-_Xv0ZB-Gbkg@mail.gmail.com>
 <2FA38717-2D39-4177-97C6-5BA16EE1A9DB@lukasa.co.uk>
 <C43121A4-1FAC-47CC-BFD2-A2957D736A1A@twistedmatrix.com>
 <CADtv4OBv8iqHK8eAOwoLBW2sJMtFTvEPEyGDdG8KgoFp0VtEaQ@mail.gmail.com>
 <55DA0155-4365-4D25-B915-145BE1583440@twistedmatrix.com>
Message-ID: <8ED9DD0C-0490-4209-9096-256334DFEF27@gmail.com>

On 2016-12-17, at 23:18, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> On Dec 17, 2016, at 6:11 AM, exvito here <ex.vitorino at gmail.com> wrote:

[...]

>> Thanks for your input Cory and Glyph.
>> 
>> I do agree that a well written protocol should not
>> self.transport.write after connectionLost -- it does not make any kind
>> of sense to do that. It's just that the one I was debugging was doing
>> it in its app-level keep alive messages triggered by
>> IReactorTime.callLater which wasn't properly cancelled on
>> connectionLost. This, in turn, lead to unpexpected app-level keep
>> alive timeouts after disconnection which, while acceptable (depending
>> on app/protocol design), were having a negative impact on the overall
>> connection/protocol teardown and cleanup.
>> 
>> Having said this, the fact that self.transport.write does not complain
>> after connectionLost just made my analysis and debugging more
>> difficult (yes, I was aware that it is non-blocking -- thanks Cory --
>> and that when talking to the network the only confirmation of delivery
>> must be obtained from a received message stating that fact).
>> 
>> All in all, I was just looking for confirmation from a conceptual /
>> design standpoint. That was my purpose and it is now clear. Thanks.
>> 
>> Going a little bit further, in this context, I wonder if my
>> understanding of the Protocol / Transport objects lifecycle is 100%
>> clear. I think there is a one to one relationship in the sense that,
>> simply put, on an incoming connection the underlying machinery
>> instantiates a Protocol via the Factory's buildProtocol method,
>> instantiates a Transport object and then calls Protocol.makeConnection
>> to "attach" the transport to the protocol; when the connection is
>> closed, the Transport calls connectionLost on the Protocol and, at
>> some point, those two objects are no longer "usable" -- they've done
>> their job and will be destroyed if no app level references are kept to
>> them.
> 
> They're not "destroyed", exactly.
> 
> The way to think about this is that the reactor, while running, is always on the stack.  The stack is the root of what's currently 'active' in the garbage collector.  The reactor then has references to various things - in this case, TCP transports and timed DelayedCall objects.  The transport has a reference to the protocol, which is what keeps both of them "usable".  The DelayedCall has a reference to your function, and your function to anything it needs to do its work.
> 
> Things can be removed from and added back to the reactor at any time - for example, a transport may be removed without being closed by calling .stopReading() and .stopWriting() on it.  If it gets garbage collected, its socket will be closed, but because the reactor didn't close it, you won't get a normal connectionLost notification.

Sure, I had that clear in my understanding, thanks for the additional details on the stopReading/stopWriting -- I'm not familiar with low lever reactor details and, maybe, who knows, one day I'll put myself to the interesting exercise/challenge of playing around writing a reactor. Just to improve my understanding of these details.


> So rather than thinking of a Transport as having a precisely-defined lifecycle - although it does have certain states it goes through; connecting/connected/disconnecting/disconnected - the best way to think about it is as a graph of objects that the reactor is doing stuff to.

The bottom line (in my mind) is: is it correct or not to assume that, by design, once a Transport instance has been disconnected that same instance will never be connected again, regardless of when exactly that object is destroyed or garbage collected?


>> If this is correct, in particular the fact that a given Transport
>> instance is not reusable after disconnection (if it is, could you
>> please point out such a case?), wouldn't it be valuable to log a
>> warning when write after disconnect is called? (agreed, raising an
>> Exception would be too much and break compatiblity). I find two
>> reasons for that: on one hand, given that it would have made my
>> debugging easier, it may help other developers pin point such cases;
>> on the other, the fact that Twisted itself logs messages on several
>> occasions, such as, for example, the default noisy Factory on doStart
>> / doStop. Adding to that, the fact that, if I'm reading the code
>> correctly, ITransport.write just throws away the data for TCP
>> transports since it falls back to FileDescriptor.write that simply
>> returns if "not self.connected or self._writeDisconnected" in
>> src/twisted/internet/abstract.py.
> 
> If you start logging a warning when write is called on a closed transport, then that means any code that wants to be warnings-clean needs to check to see if the transport is writable before writing to it.  This adds a lot of complexity to that sort of message-formatting code, and potentially makes it less efficient. After all, if you have to check each write() call, that will strongly encourage you to make your message-formatting happen entirely in memory, so you always have a big string that represents the whole message, just in case a transport.write() in the middle would encounter an error.

I understand that and find it perfectly acceptable. I just tend to err on the extra-cautious side when facing data-loss / data-integrity possibilities and, in the many scenarios I've used Twisted in, performance was never an issue while semantic correctness and implementation resiliency tend to need fixes and improvements. :)

One could argue, though, that someone looking for warnings-clean code (who doesn't, even if the real world and interfacing with it most often prevents it?) might like to know that their "perfect" (lots of quotes here!) warnings-clean code writes won't go anywhere after connectionLost which, in some cases, may help pinpoint an underlying design / implementation issue.

I'd like to underline, though, that I'm not insisting on the "log warning" aspect I raised before. Like I said, the status quo is very good, thank you. Just sharing a few thoughts.


> More importantly, when users start seeing a warning like this, they often develop an incorrect intuition about what's going on with the bytes; one of the _most_ frequently asked questions about how to write Twisted protocols is "how do I tell if my bytes got to the other end without sending an application-level acknowledgement".  The answer, of course, is "that's impossible" but if users see that sometimes it warns them when the connection's closed, it reinforces the idea that there must be a way.
> 
> If you call .write, there is always the possibility that the connection _looks_ open to Twisted, but in fact is closed on the wire, and those bytes will be lost.  So it's important to me that we behave the same way in both cases.

Yes, I can relate to that common misconception regarding delivery confirmation, throughout the years, working with other people. Networking is non-trivival and there are lots of parts out of application control that can behave in unexpected ways and/or go wrong.


> That said, it's not like there's no room for improvement here!  The solution _I'd_ really like to see for this problem is improved visualization of what the reactor is doing.  Something that drew a graph of the reactor, and open connections, and pending timed calls would allow you to instantly see that your timed call was not connected to an active connection, and correct your code.

Well, trial already does that in part, doesn't it? It complains loudly about unclean reactor state after each test. It just doesn't relate timed calls to connections, which sounds like a very non-obvious challenge to handle at the reactor level: how could the reactor know that a given timed call callback will make use of a particular connection?

That does sound like a very interesting capability, though.


>> Thoughts? (or corrections, of course?)
>> 
>> Again, thanks for your time and input.
>> Regards,
>> 
>> PS: I don't mean to start a huge discussion on the topic or question
>> the current design. It is very nice as it is, thank you! I'm just
>> looking for improving my understanding and, humbly, contributing back.
> 
> 
> Don't worry, the design is pretty fixed - and if you managed to provoke such a discussion, then maybe it does need to change!  But I doubt it :)

I'm glad it is pretty fixed. That has always given me the confidence to work with it throughout the years. Thanks and congratulations for a very solid piece of code!

Having said this, again very humbly, who knows what the future may bring! ;)


Thanks for taking the time to respond.
Regards,
--
exvito


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161219/ebb9c33d/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Dec 19 18:02:53 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 19 Dec 2016 17:02:53 -0800
Subject: [Twisted-Python] ITransport.write after
 IProtocol.connectionLost -- no failure/exception?
In-Reply-To: <8ED9DD0C-0490-4209-9096-256334DFEF27@gmail.com>
References: <CADtv4OAY19LAvF495Q3NAu=DAdogPD87dWyDJN-_Xv0ZB-Gbkg@mail.gmail.com>
 <2FA38717-2D39-4177-97C6-5BA16EE1A9DB@lukasa.co.uk>
 <C43121A4-1FAC-47CC-BFD2-A2957D736A1A@twistedmatrix.com>
 <CADtv4OBv8iqHK8eAOwoLBW2sJMtFTvEPEyGDdG8KgoFp0VtEaQ@mail.gmail.com>
 <55DA0155-4365-4D25-B915-145BE1583440@twistedmatrix.com>
 <8ED9DD0C-0490-4209-9096-256334DFEF27@gmail.com>
Message-ID: <5A4C9D3A-3327-4080-A0D2-74660736EB54@twistedmatrix.com>


> On Dec 19, 2016, at 5:13 AM, ex vito <ex.vitorino at gmail.com> wrote:
> 
> On 2016-12-17, at 23:18, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
>> On Dec 17, 2016, at 6:11 AM, exvito here <ex.vitorino at gmail.com <mailto:ex.vitorino at gmail.com>> wrote:
> 
> [...]
> 
>>> Thanks for your input Cory and Glyph.
>>> 
>>> I do agree that a well written protocol should not
>>> self.transport.write after connectionLost -- it does not make any kind
>>> of sense to do that. It's just that the one I was debugging was doing
>>> it in its app-level keep alive messages triggered by
>>> IReactorTime.callLater which wasn't properly cancelled on
>>> connectionLost. This, in turn, lead to unpexpected app-level keep
>>> alive timeouts after disconnection which, while acceptable (depending
>>> on app/protocol design), were having a negative impact on the overall
>>> connection/protocol teardown and cleanup.
>>> 
>>> Having said this, the fact that self.transport.write does not complain
>>> after connectionLost just made my analysis and debugging more
>>> difficult (yes, I was aware that it is non-blocking -- thanks Cory --
>>> and that when talking to the network the only confirmation of delivery
>>> must be obtained from a received message stating that fact).
>>> 
>>> All in all, I was just looking for confirmation from a conceptual /
>>> design standpoint. That was my purpose and it is now clear. Thanks.
>>> 
>>> Going a little bit further, in this context, I wonder if my
>>> understanding of the Protocol / Transport objects lifecycle is 100%
>>> clear. I think there is a one to one relationship in the sense that,
>>> simply put, on an incoming connection the underlying machinery
>>> instantiates a Protocol via the Factory's buildProtocol method,
>>> instantiates a Transport object and then calls Protocol.makeConnection
>>> to "attach" the transport to the protocol; when the connection is
>>> closed, the Transport calls connectionLost on the Protocol and, at
>>> some point, those two objects are no longer "usable" -- they've done
>>> their job and will be destroyed if no app level references are kept to
>>> them.
>> 
>> They're not "destroyed", exactly.
>> 
>> The way to think about this is that the reactor, while running, is always on the stack.  The stack is the root of what's currently 'active' in the garbage collector.  The reactor then has references to various things - in this case, TCP transports and timed DelayedCall objects.  The transport has a reference to the protocol, which is what keeps both of them "usable".  The DelayedCall has a reference to your function, and your function to anything it needs to do its work.
>> 
>> Things can be removed from and added back to the reactor at any time - for example, a transport may be removed without being closed by calling .stopReading() and .stopWriting() on it.  If it gets garbage collected, its socket will be closed, but because the reactor didn't close it, you won't get a normal connectionLost notification.
> 
> Sure, I had that clear in my understanding, thanks for the additional details on the stopReading/stopWriting -- I'm not familiar with low lever reactor details and, maybe, who knows, one day I'll put myself to the interesting exercise/challenge of playing around writing a reactor. Just to improve my understanding of these details.
> 
> 
>> So rather than thinking of a Transport as having a precisely-defined lifecycle - although it does have certain states it goes through; connecting/connected/disconnecting/disconnected - the best way to think about it is as a graph of objects that the reactor is doing stuff to.
> 
> The bottom line (in my mind) is: is it correct or not to assume that, by design, once a Transport instance has been disconnected that same instance will never be connected again, regardless of when exactly that object is destroyed or garbage collected?

Yes.

>>> If this is correct, in particular the fact that a given Transport
>>> instance is not reusable after disconnection (if it is, could you
>>> please point out such a case?), wouldn't it be valuable to log a
>>> warning when write after disconnect is called? (agreed, raising an
>>> Exception would be too much and break compatiblity). I find two
>>> reasons for that: on one hand, given that it would have made my
>>> debugging easier, it may help other developers pin point such cases;
>>> on the other, the fact that Twisted itself logs messages on several
>>> occasions, such as, for example, the default noisy Factory on doStart
>>> / doStop. Adding to that, the fact that, if I'm reading the code
>>> correctly, ITransport.write just throws away the data for TCP
>>> transports since it falls back to FileDescriptor.write that simply
>>> returns if "not self.connected or self._writeDisconnected" in
>>> src/twisted/internet/abstract.py.
>> 
>> If you start logging a warning when write is called on a closed transport, then that means any code that wants to be warnings-clean needs to check to see if the transport is writable before writing to it.  This adds a lot of complexity to that sort of message-formatting code, and potentially makes it less efficient. After all, if you have to check each write() call, that will strongly encourage you to make your message-formatting happen entirely in memory, so you always have a big string that represents the whole message, just in case a transport.write() in the middle would encounter an error.
> 
> I understand that and find it perfectly acceptable. I just tend to err on the extra-cautious side when facing data-loss / data-integrity possibilities and, in the many scenarios I've used Twisted in, performance was never an issue while semantic correctness and implementation resiliency tend to need fixes and improvements. :)
> 
> One could argue, though, that someone looking for warnings-clean code (who doesn't, even if the real world and interfacing with it most often prevents it?) might like to know that their "perfect" (lots of quotes here!) warnings-clean code writes won't go anywhere after connectionLost which, in some cases, may help pinpoint an underlying design / implementation issue.
> 
> I'd like to underline, though, that I'm not insisting on the "log warning" aspect I raised before. Like I said, the status quo is very good, thank you. Just sharing a few thoughts.
> 
> 
>> More importantly, when users start seeing a warning like this, they often develop an incorrect intuition about what's going on with the bytes; one of the _most_ frequently asked questions about how to write Twisted protocols is "how do I tell if my bytes got to the other end without sending an application-level acknowledgement".  The answer, of course, is "that's impossible" but if users see that sometimes it warns them when the connection's closed, it reinforces the idea that there must be a way.
>> 
>> If you call .write, there is always the possibility that the connection _looks_ open to Twisted, but in fact is closed on the wire, and those bytes will be lost.  So it's important to me that we behave the same way in both cases.
> 
> Yes, I can relate to that common misconception regarding delivery confirmation, throughout the years, working with other people. Networking is non-trivival and there are lots of parts out of application control that can behave in unexpected ways and/or go wrong.
> 
> 
>> That said, it's not like there's no room for improvement here!  The solution _I'd_ really like to see for this problem is improved visualization of what the reactor is doing.  Something that drew a graph of the reactor, and open connections, and pending timed calls would allow you to instantly see that your timed call was not connected to an active connection, and correct your code.
> 
> Well, trial already does that in part, doesn't it? It complains loudly about unclean reactor state after each test. It just doesn't relate timed calls to connections, which sounds like a very non-obvious challenge to handle at the reactor level: how could the reactor know that a given timed call callback will make use of a particular connection?

I'm not suggesting anything that fancy; in this case, you'd just see an active looping call and no active connection and hopefully that would give you the info you need to realize that the connection was not going to get updated :).

> That does sound like a very interesting capability, though.
> 
> 
>>> Thoughts? (or corrections, of course?)
>>> 
>>> Again, thanks for your time and input.
>>> Regards,
>>> 
>>> PS: I don't mean to start a huge discussion on the topic or question
>>> the current design. It is very nice as it is, thank you! I'm just
>>> looking for improving my understanding and, humbly, contributing back.
>> 
>> 
>> Don't worry, the design is pretty fixed - and if you managed to provoke such a discussion, then maybe it does need to change!  But I doubt it :)
> 
> I'm glad it is pretty fixed. That has always given me the confidence to work with it throughout the years. Thanks and congratulations for a very solid piece of code!
> 
> Having said this, again very humbly, who knows what the future may bring! ;)
> 
> 
> Thanks for taking the time to respond.
> Regards,
> --
> exvito
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161219/42915802/attachment-0002.html>

From rodrigc at crodrigues.org  Tue Dec 20 15:32:05 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 20 Dec 2016 14:32:05 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
Message-ID: <CAG=rPVc-ahNjN+br2MV-S5rTng71Y1jvR94oXJaZed+CZhskxw@mail.gmail.com>

On Friday, December 2, 2016, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:
>
> I think there might be a regression in 16.6.0.
>
> For every version up to 16.6.0, I can do 'conch twistedmatrix.com' in a
> shell and it works fine.
>

I believe that I have fixed this in trunk.
Can you try this with conch in trunk?

This works for me in trunk:

1.  Start with an empty ~/.ssh/known_hosts file , or one with an ecdsa key
for myhost.com
2.  ssh myhost.com
3.  log out of myhost.com
3.  see that ~/.ssh/known_hosts contains an ecdsa host key for myhost.com
4.  conch myhost.com
5.  successfully log into myhost.com with conch

Before the latest fixes, I would get a bad host key error in step 5.

Many thanks to the0id and acabhishek942 for providing the ecdsa fixes to
conch.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161220/e501c7e2/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Dec 20 17:10:59 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 20 Dec 2016 16:10:59 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <CAG=rPVc-ahNjN+br2MV-S5rTng71Y1jvR94oXJaZed+CZhskxw@mail.gmail.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <CAG=rPVc-ahNjN+br2MV-S5rTng71Y1jvR94oXJaZed+CZhskxw@mail.gmail.com>
Message-ID: <E464AABC-DB66-44E6-9482-594254B907EA@twistedmatrix.com>

It works:

$ conch twistedmatrix.com echo hooray
hooray
      $ conch --version
Twisted version: 16.6.0dev0
$ 

That's using an RSA host key though.  It seems that the hosts I have using ECDSA keys (buildbot.twistedmatrix.com <http://buildbot.twistedmatrix.com/>, for example) still don't work with conch.  Is that expected at this point?

-glyph

> On Dec 20, 2016, at 2:32 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> On Friday, December 2, 2016, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> I think there might be a regression in 16.6.0.
> 
> For every version up to 16.6.0, I can do 'conch twistedmatrix.com <http://twistedmatrix.com/>' in a shell and it works fine.
> 
> I believe that I have fixed this in trunk.
> Can you try this with conch in trunk?
> 
> This works for me in trunk:
> 
> 1.  Start with an empty ~/.ssh/known_hosts file , or one with an ecdsa key for myhost.com <http://myhost.com/>
> 2.  ssh myhost.com <http://myhost.com/>
> 3.  log out of myhost.com <http://myhost.com/>
> 3.  see that ~/.ssh/known_hosts contains an ecdsa host key for myhost.com <http://myhost.com/>
> 4.  conch myhost.com <http://myhost.com/>
> 5.  successfully log into myhost.com <http://myhost.com/> with conch
> 
> Before the latest fixes, I would get a bad host key error in step 5.
> 
> Many thanks to the0id and acabhishek942 for providing the ecdsa fixes to conch.
> 
> --
> Craig
>  
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161220/d8cc7e7d/attachment-0002.html>

From rodrigc at crodrigues.org  Tue Dec 20 17:54:57 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 20 Dec 2016 16:54:57 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <E464AABC-DB66-44E6-9482-594254B907EA@twistedmatrix.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <CAG=rPVc-ahNjN+br2MV-S5rTng71Y1jvR94oXJaZed+CZhskxw@mail.gmail.com>
 <E464AABC-DB66-44E6-9482-594254B907EA@twistedmatrix.com>
Message-ID: <CAG=rPVdKNnD-gs3Aj+20HG-5BLJOmh7KEPUab5fD2A6P=ME96Q@mail.gmail.com>

I'm not sure. I was able to use conch to log into a box where the ecdsa key
looked like this in my ~/.ssh/known_hosts

192.168.1.2 ecdsa-sha2-nistp256 XXXXXXXXXX

--

Craig



On Tue, Dec 20, 2016 at 4:10 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

> It works:
>
> $ conch twistedmatrix.com echo hooray
> hooray
>       $ conch --version
> Twisted version: 16.6.0dev0
> $
>
>
> That's using an RSA host key though.  It seems that the hosts I have using
> ECDSA keys (buildbot.twistedmatrix.com, for example) still don't work
> with conch.  Is that expected at this point?
>
> -glyph
>
> On Dec 20, 2016, at 2:32 PM, Craig Rodrigues <rodrigc at crodrigues.org>
> wrote:
>
> On Friday, December 2, 2016, Glyph Lefkowitz <glyph at twistedmatrix.com>
> wrote:
>>
>> I think there might be a regression in 16.6.0.
>>
>> For every version up to 16.6.0, I can do 'conch twistedmatrix.com' in a
>> shell and it works fine.
>>
>
> I believe that I have fixed this in trunk.
> Can you try this with conch in trunk?
>
> This works for me in trunk:
>
> 1.  Start with an empty ~/.ssh/known_hosts file , or one with an ecdsa key
> for myhost.com
> 2.  ssh myhost.com
> 3.  log out of myhost.com
> 3.  see that ~/.ssh/known_hosts contains an ecdsa host key for myhost.com
> 4.  conch myhost.com
> 5.  successfully log into myhost.com with conch
>
> Before the latest fixes, I would get a bad host key error in step 5.
>
> Many thanks to the0id and acabhishek942 for providing the ecdsa fixes to
> conch.
>
> --
> Craig
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161220/5f7abfcb/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Dec 20 18:13:31 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 20 Dec 2016 17:13:31 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <CAG=rPVdKNnD-gs3Aj+20HG-5BLJOmh7KEPUab5fD2A6P=ME96Q@mail.gmail.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <CAG=rPVc-ahNjN+br2MV-S5rTng71Y1jvR94oXJaZed+CZhskxw@mail.gmail.com>
 <E464AABC-DB66-44E6-9482-594254B907EA@twistedmatrix.com>
 <CAG=rPVdKNnD-gs3Aj+20HG-5BLJOmh7KEPUab5fD2A6P=ME96Q@mail.gmail.com>
Message-ID: <720D721B-8360-43BE-8371-2DE572E18DF4@twistedmatrix.com>

Here's buildbot's key:

buildbot.twistedmatrix.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBBcw4pr6WdgDMw7PbkvsuEdCqKQTtpLYPGoe7qkuQucuexYBiCkO/BeoB0wANX2cVmxUP0llpYJQL4w3cAR0csA=

I think you should be able to validate that even if you can't auth :)

-g


> On Dec 20, 2016, at 4:54 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> I'm not sure. I was able to use conch to log into a box where the ecdsa key looked like this in my ~/.ssh/known_hosts
> 
> 192.168.1.2 ecdsa-sha2-nistp256 XXXXXXXXXX
> 
> --
> 
> Craig
> 
> 
> 
> 
> On Tue, Dec 20, 2016 at 4:10 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> It works:
> 
> $ conch twistedmatrix.com <http://twistedmatrix.com/> echo hooray
> hooray
>       $ conch --version
> Twisted version: 16.6.0dev0
> $ 
> 
> That's using an RSA host key though.  It seems that the hosts I have using ECDSA keys (buildbot.twistedmatrix.com <http://buildbot.twistedmatrix.com/>, for example) still don't work with conch.  Is that expected at this point?
> 
> -glyph
> 
>> On Dec 20, 2016, at 2:32 PM, Craig Rodrigues <rodrigc at crodrigues.org <mailto:rodrigc at crodrigues.org>> wrote:
>> 
>> On Friday, December 2, 2016, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>> I think there might be a regression in 16.6.0.
>> 
>> For every version up to 16.6.0, I can do 'conch twistedmatrix.com <http://twistedmatrix.com/>' in a shell and it works fine.
>> 
>> I believe that I have fixed this in trunk.
>> Can you try this with conch in trunk?
>> 
>> This works for me in trunk:
>> 
>> 1.  Start with an empty ~/.ssh/known_hosts file , or one with an ecdsa key for myhost.com <http://myhost.com/>
>> 2.  ssh myhost.com <http://myhost.com/>
>> 3.  log out of myhost.com <http://myhost.com/>
>> 3.  see that ~/.ssh/known_hosts contains an ecdsa host key for myhost.com <http://myhost.com/>
>> 4.  conch myhost.com <http://myhost.com/>
>> 5.  successfully log into myhost.com <http://myhost.com/> with conch
>> 
>> Before the latest fixes, I would get a bad host key error in step 5.
>> 
>> Many thanks to the0id and acabhishek942 for providing the ecdsa fixes to conch.
>> 
>> --
>> Craig
>>  
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161220/21ca472b/attachment-0002.html>

From rodrigc at crodrigues.org  Tue Dec 20 18:50:59 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 20 Dec 2016 17:50:59 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <720D721B-8360-43BE-8371-2DE572E18DF4@twistedmatrix.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <CAG=rPVc-ahNjN+br2MV-S5rTng71Y1jvR94oXJaZed+CZhskxw@mail.gmail.com>
 <E464AABC-DB66-44E6-9482-594254B907EA@twistedmatrix.com>
 <CAG=rPVdKNnD-gs3Aj+20HG-5BLJOmh7KEPUab5fD2A6P=ME96Q@mail.gmail.com>
 <720D721B-8360-43BE-8371-2DE572E18DF4@twistedmatrix.com>
Message-ID: <CAG=rPVe1=ZWf19tFbJxuvLzpB62w5JSXf+cJ7hFYC83Xac7c=A@mail.gmail.com>

Ah, OK.  In my testing, I had this in my server's /etc/ssh/sshd_config file
to force
use of ECDSA keys during my testing:


# HostKey for protocol version 1
#HostKey /etc/ssh/ssh_host_key
# HostKeys for protocol version 2
#HostKey /etc/ssh/ssh_host_rsa_key
#HostKey /etc/ssh/ssh_host_dsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key


If I then logged into the server with:
 *conch 192.168.1.2*

, then having an ecdsa key in ~/.ssh/known_hosts
worked fine and I could log in.  Before the latest patches, the ecdsa keys
were not
being parsed properly and this never worked at all.

If I changed the config on the server to:

# HostKey for protocol version 1
#HostKey /etc/ssh/ssh_host_key
# HostKeys for protocol version 2
#HostKey /etc/ssh/ssh_host_rsa_key
#HostKey /etc/ssh/ssh_host_dsa_key
#HostKey /etc/ssh/ssh_host_ecdsa_key
#HostKey /etc/ssh/ssh_host_ed25519_key

I got a bad host key error with conch, same as if I tried to log into
buildbot.twistedmatrix.com.
I put this:

import pudb; pudb.set_trace()

on this line inside *_continue_KEX_ECDH_REPLY()* :
https://github.com/twisted/twisted/blob/trunk/src/twisted/conch/ssh/transport.py#L1671

What I then found was that on this line:

hostkey, pubKey, signature, packet = getNS(packet, 3)


The host key is an RSA key.  Then this line in the same function:

 d = self.verifyHostKey(hostKey, fingerprint)
tries to compare the hostKey for 192.168.1.2 (which is RSA), against
the key in ~/.ssh/known_hosts which is ecdsa.  It then fails and returns a
bad host key error.

I also get this problem when trying to do *conch buildbot.twistedmatrix.com
<http://buildbot.twistedmatrix.com>*


--
Craig


On Tue, Dec 20, 2016 at 5:13 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

> Here's buildbot's key:
>
> buildbot.twistedmatrix.com ecdsa-sha2-nistp256
> AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBBcw4pr6
> WdgDMw7PbkvsuEdCqKQTtpLYPGoe7qkuQucuexYBiCkO/
> BeoB0wANX2cVmxUP0llpYJQL4w3cAR0csA=
>
> I think you should be able to validate that even if you can't auth :)
>
> -g
>
>
> On Dec 20, 2016, at 4:54 PM, Craig Rodrigues <rodrigc at crodrigues.org>
> wrote:
>
> I'm not sure. I was able to use conch to log into a box where the ecdsa
> key looked like this in my ~/.ssh/known_hosts
>
> 192.168.1.2 ecdsa-sha2-nistp256 XXXXXXXXXX
>
> --
>
> Craig
>
>
>
> On Tue, Dec 20, 2016 at 4:10 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
> wrote:
>
>> It works:
>>
>> $ conch twistedmatrix.com echo hooray
>> hooray
>>       $ conch --version
>> Twisted version: 16.6.0dev0
>> $
>>
>>
>> That's using an RSA host key though.  It seems that the hosts I have
>> using ECDSA keys (buildbot.twistedmatrix.com, for example) still don't
>> work with conch.  Is that expected at this point?
>>
>> -glyph
>>
>> On Dec 20, 2016, at 2:32 PM, Craig Rodrigues <rodrigc at crodrigues.org>
>> wrote:
>>
>> On Friday, December 2, 2016, Glyph Lefkowitz <glyph at twistedmatrix.com>
>> wrote:
>>>
>>> I think there might be a regression in 16.6.0.
>>>
>>> For every version up to 16.6.0, I can do 'conch twistedmatrix.com' in a
>>> shell and it works fine.
>>>
>>
>> I believe that I have fixed this in trunk.
>> Can you try this with conch in trunk?
>>
>> This works for me in trunk:
>>
>> 1.  Start with an empty ~/.ssh/known_hosts file , or one with an ecdsa
>> key for myhost.com
>> 2.  ssh myhost.com
>> 3.  log out of myhost.com
>> 3.  see that ~/.ssh/known_hosts contains an ecdsa host key for myhost.com
>> 4.  conch myhost.com
>> 5.  successfully log into myhost.com with conch
>>
>> Before the latest fixes, I would get a bad host key error in step 5.
>>
>> Many thanks to the0id and acabhishek942 for providing the ecdsa fixes to
>> conch.
>>
>> --
>> Craig
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161220/23fdbc3d/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Dec 20 19:24:04 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 20 Dec 2016 18:24:04 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <CAG=rPVe1=ZWf19tFbJxuvLzpB62w5JSXf+cJ7hFYC83Xac7c=A@mail.gmail.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <CAG=rPVc-ahNjN+br2MV-S5rTng71Y1jvR94oXJaZed+CZhskxw@mail.gmail.com>
 <E464AABC-DB66-44E6-9482-594254B907EA@twistedmatrix.com>
 <CAG=rPVdKNnD-gs3Aj+20HG-5BLJOmh7KEPUab5fD2A6P=ME96Q@mail.gmail.com>
 <720D721B-8360-43BE-8371-2DE572E18DF4@twistedmatrix.com>
 <CAG=rPVe1=ZWf19tFbJxuvLzpB62w5JSXf+cJ7hFYC83Xac7c=A@mail.gmail.com>
Message-ID: <A224B127-D889-485E-8007-3D16592305E6@twistedmatrix.com>


> On Dec 20, 2016, at 5:50 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Ah, OK.  In my testing, I had this in my server's /etc/ssh/sshd_config file to force
> use of ECDSA keys during my testing:
> 
> 
> # HostKey for protocol version 1
> #HostKey /etc/ssh/ssh_host_key
> # HostKeys for protocol version 2
> #HostKey /etc/ssh/ssh_host_rsa_key
> #HostKey /etc/ssh/ssh_host_dsa_key
> HostKey /etc/ssh/ssh_host_ecdsa_key
> HostKey /etc/ssh/ssh_host_ed25519_key
> 
> 
> If I then logged into the server with:
>  conch 192.168.1.2
> 
> , then having an ecdsa key in ~/.ssh/known_hosts
> worked fine and I could log in.  Before the latest patches, the ecdsa keys were not
> being parsed properly and this never worked at all.
> 
> If I changed the config on the server to:
> 
> # HostKey for protocol version 1
> #HostKey /etc/ssh/ssh_host_key
> # HostKeys for protocol version 2
> #HostKey /etc/ssh/ssh_host_rsa_key
> #HostKey /etc/ssh/ssh_host_dsa_key
> #HostKey /etc/ssh/ssh_host_ecdsa_key
> #HostKey /etc/ssh/ssh_host_ed25519_key
> 
> I got a bad host key error with conch, same as if I tried to log into buildbot.twistedmatrix.com <http://buildbot.twistedmatrix.com/>.
> I put this:
> 
> import pudb; pudb.set_trace()
> 
> on this line inside _continue_KEX_ECDH_REPLY() :
> https://github.com/twisted/twisted/blob/trunk/src/twisted/conch/ssh/transport.py#L1671 <https://github.com/twisted/twisted/blob/trunk/src/twisted/conch/ssh/transport.py#L1671>
Did you mean https://github.com/twisted/twisted/blob/71643ca93e024d33dba8de9eef149876554c2dd7/src/twisted/conch/ssh/transport.py#L1674 <https://github.com/twisted/twisted/blob/71643ca93e024d33dba8de9eef149876554c2dd7/src/twisted/conch/ssh/transport.py#L1674> ?

> What I then found was that on this line:
> 
> hostkey, pubKey, signature, packet = getNS(packet, 3)
> 
> 
> The host key is an RSA key.  Then this line in the same function:
>  d = self.verifyHostKey(hostKey, fingerprint)
> 
> tries to compare the hostKey for 192.168.1.2 (which is RSA), against
> the key in ~/.ssh/known_hosts which is ecdsa.  It then fails and returns a bad host key error.
> 
> I also get this problem when trying to do conch buildbot.twistedmatrix.com <http://buildbot.twistedmatrix.com/>
So... is this because buildbot.twistedmatrix.com <http://buildbot.twistedmatrix.com/> has an RSA key as well, and when it offers it, our checking isn't correctly comparing the type before deciding that it doesn't match, or allowing for multiple keys?  I notice that if I manually add the RSA key and delete the ECDSA key it seems to work.

-g

> --
> Craig
> 
> 
> On Tue, Dec 20, 2016 at 5:13 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> Here's buildbot's key:
> 
> buildbot.twistedmatrix.com <http://buildbot.twistedmatrix.com/> ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBBcw4pr6WdgDMw7PbkvsuEdCqKQTtpLYPGoe7qkuQucuexYBiCkO/BeoB0wANX2cVmxUP0llpYJQL4w3cAR0csA=
> 
> I think you should be able to validate that even if you can't auth :)
> 
> -g
> 
> 
>> On Dec 20, 2016, at 4:54 PM, Craig Rodrigues <rodrigc at crodrigues.org <mailto:rodrigc at crodrigues.org>> wrote:
>> 
>> I'm not sure. I was able to use conch to log into a box where the ecdsa key looked like this in my ~/.ssh/known_hosts
>> 
>> 192.168.1.2 ecdsa-sha2-nistp256 XXXXXXXXXX
>> 
>> --
>> 
>> Craig
>> 
>> 
>> 
>> 
>> On Tue, Dec 20, 2016 at 4:10 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>> It works:
>> 
>> $ conch twistedmatrix.com <http://twistedmatrix.com/> echo hooray
>> hooray
>>       $ conch --version
>> Twisted version: 16.6.0dev0
>> $ 
>> 
>> That's using an RSA host key though.  It seems that the hosts I have using ECDSA keys (buildbot.twistedmatrix.com <http://buildbot.twistedmatrix.com/>, for example) still don't work with conch.  Is that expected at this point?
>> 
>> -glyph
>> 
>>> On Dec 20, 2016, at 2:32 PM, Craig Rodrigues <rodrigc at crodrigues.org <mailto:rodrigc at crodrigues.org>> wrote:
>>> 
>>> On Friday, December 2, 2016, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>>> I think there might be a regression in 16.6.0.
>>> 
>>> For every version up to 16.6.0, I can do 'conch twistedmatrix.com <http://twistedmatrix.com/>' in a shell and it works fine.
>>> 
>>> I believe that I have fixed this in trunk.
>>> Can you try this with conch in trunk?
>>> 
>>> This works for me in trunk:
>>> 
>>> 1.  Start with an empty ~/.ssh/known_hosts file , or one with an ecdsa key for myhost.com <http://myhost.com/>
>>> 2.  ssh myhost.com <http://myhost.com/>
>>> 3.  log out of myhost.com <http://myhost.com/>
>>> 3.  see that ~/.ssh/known_hosts contains an ecdsa host key for myhost.com <http://myhost.com/>
>>> 4.  conch myhost.com <http://myhost.com/>
>>> 5.  successfully log into myhost.com <http://myhost.com/> with conch
>>> 
>>> Before the latest fixes, I would get a bad host key error in step 5.
>>> 
>>> Many thanks to the0id and acabhishek942 for providing the ecdsa fixes to conch.
>>> 
>>> --
>>> Craig
>>>  
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161220/24306d95/attachment-0002.html>

From chenjianhappy2008 at 126.com  Tue Dec 20 20:15:07 2016
From: chenjianhappy2008 at 126.com (=?GBK?B?s8K9oQ==?=)
Date: Wed, 21 Dec 2016 11:15:07 +0800 (CST)
Subject: [Twisted-Python] hmac-sha2-512 - Corrupted MAC on input with OpenSSH
Message-ID: <7aa77b23.1f5e.1591f6015fc.Coremail.chenjianhappy2008@126.com>

 hi:
|
|

    I write a SSH server with Twisted(15.5.0)  Conch.  But it  don't support hmac-sha2-512 MAC algorithms

|
.  However I see this problem has been fixed in https://twistedmatrix.com/trac/ticket/8108 .  I asked the question in http://stackoverflow.com/questions/41254398/twisted-hmac-sha2-512-corrupted-mac-on-input-with-openssh .

Best regards,

 ---jianchen

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161221/ac054496/attachment-0002.html>

From rodrigc at crodrigues.org  Tue Dec 20 20:32:39 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 20 Dec 2016 19:32:39 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <A224B127-D889-485E-8007-3D16592305E6@twistedmatrix.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <CAG=rPVc-ahNjN+br2MV-S5rTng71Y1jvR94oXJaZed+CZhskxw@mail.gmail.com>
 <E464AABC-DB66-44E6-9482-594254B907EA@twistedmatrix.com>
 <CAG=rPVdKNnD-gs3Aj+20HG-5BLJOmh7KEPUab5fD2A6P=ME96Q@mail.gmail.com>
 <720D721B-8360-43BE-8371-2DE572E18DF4@twistedmatrix.com>
 <CAG=rPVe1=ZWf19tFbJxuvLzpB62w5JSXf+cJ7hFYC83Xac7c=A@mail.gmail.com>
 <A224B127-D889-485E-8007-3D16592305E6@twistedmatrix.com>
Message-ID: <CAG=rPVdiZSq4N+vx7na2yJMaNwh=AgUoNDBgBq_jNsXs+ghsOA@mail.gmail.com>

On Tue, Dec 20, 2016 at 6:24 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
>

>
> So... is this because buildbot.twistedmatrix.com has an RSA key as well,
> and when it offers it, our checking isn't correctly comparing the type
> before deciding that it doesn't match, or allowing for multiple keys?  I
> notice that if I manually add the RSA key and delete the ECDSA key it seems
> to work.
>
> -g
>
>

Yes, that is part of it.
What is happening is that the conch client sends a MSG_KEXINIT
packet to the server to negotatiate what the host key should be.
If I use an OpenSSH ssh client to connect to OpenSSH sshd server,
the negotiated host key algorithm is ecdsa-sha2-nistp256.

If I use a conch client to connect to the OpenSSH sshd server,
the negotiated host key algorithm is ssh-rsa.

I started a test instance of the sshd server with:

/usr/sbin/sshd -p 9000 -d -d -d

and captured the logs (see attached).

I think some problems are:
  (1)  conch proposes a list of *host key algorithms* in a different order
than
         OpenSSH.  It shouldn't matter, but conch proposes ssh-rsa first,
         while OpenSSH proposes it last.
  (2)  OpenSSH client seems to be able to receive multiple host keys back
         from the server, and can match the one it has.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161220/d6b488a5/attachment-0002.html>
-------------- next part --------------
Script started on Tue Dec 20 18:50:42 2016
Command: /usr/sbin/sshd -p 9000 -d -d -d
debug2: load_server_config: filename /etc/ssh/sshd_config

debug2: load_server_config: done config len = 197

debug2: parse_server_config: config /etc/ssh/sshd_config len 197

debug3: /etc/ssh/sshd_config:49 setting PermitRootLogin yes

debug3: /etc/ssh/sshd_config:131 setting Subsystem sftp	/usr/libexec/sftp-server

debug1: sshd version OpenSSH_7.2, OpenSSL 1.0.2j-freebsd  26 Sep 2016

debug1: private host key #0: ssh-rsa SHA256:73H4OcFhNGdHY2sVsbBOVVOudub2EkvfYNlwpxWM1Xw

debug1: private host key #1: ssh-dss SHA256:6BQ11F0ejGONS1+d4O63t7fyyGKaEyW33a73x5G/3ic

debug1: private host key #2: ecdsa-sha2-nistp256 SHA256:jkq3WG/EU+yyyg8xemPshcErRvPYmSbU202opbYgzHU

debug1: private host key #3: ssh-ed25519 SHA256:59NbS+jIUH9ADjLpk5nQLKq229hrx89QpAd3Z3Ts6j4

debug1: rexec_argv[0]='/usr/sbin/sshd'

debug1: rexec_argv[1]='-p'

debug1: rexec_argv[2]='9000'

debug1: rexec_argv[3]='-d'

debug1: rexec_argv[4]='-d'

debug1: rexec_argv[5]='-d'

debug2: fd 3 setting O_NONBLOCK

debug3: Fssh_sock_set_v6only: set socket 3 IPV6_V6ONLY

debug1: Bind to port 9000 on ::.

debug1: Server TCP RWIN socket size: 65536

Server listening on :: port 9000.

debug2: fd 4 setting O_NONBLOCK

debug1: Bind to port 9000 on 0.0.0.0.

debug1: Server TCP RWIN socket size: 65536

Server listening on 0.0.0.0 port 9000.

debug1: fd 5 clearing O_NONBLOCK

debug1: Server will not fork when running in debugging mode.

debug3: send_rexec_state: entering fd = 8 config len 197

debug3: ssh_msg_send: type 0

debug3: send_rexec_state: done

debug1: rexec start in 5 out 5 newsock 5 pipe -1 sock 8

debug1: inetd sockets after dupping: 3, 3

debug1: res_init()

Connection from 192.168.1.5 port 58546 on 192.168.1.2 port 9000

debug1: Client protocol version 2.0; client software version OpenSSH_7.2

debug1: match: OpenSSH_7.2 pat OpenSSH* compat 0x04000000

debug1: Enabling compatibility mode for protocol 2.0

debug1: Local version string SSH-2.0-OpenSSH_7.2 FreeBSD-20160310

debug2: fd 3 setting O_NONBLOCK

debug3: ssh_sandbox_init: preparing capsicum sandbox

debug2: Network child is on pid 68979

debug3: preauth child monitor started

debug3: privsep user:group 22:22 [preauth]

debug1: permanently_set_uid: 22/22 [preauth]

debug3: list_hostkey_types: ssh-dss key not permitted by HostkeyAlgorithms [preauth]

debug1: list_hostkey_types: ssh-rsa,rsa-sha2-512,rsa-sha2-256,ecdsa-sha2-nistp256,ssh-ed25519 [preauth]

debug3: send packet: type 20 [preauth]

debug1: SSH2_MSG_KEXINIT sent [preauth]

debug3: receive packet: type 20 [preauth]

debug1: SSH2_MSG_KEXINIT received [preauth]

debug2: local server KEXINIT proposal [preauth]

debug2: KEX algorithms: curve25519-sha256 at libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1 [preauth]

debug2: host key algorithms: ssh-rsa,rsa-sha2-512,rsa-sha2-256,ecdsa-sha2-nistp256,ssh-ed25519 [preauth]

debug2: ciphers ctos: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc [preauth]

debug2: ciphers stoc: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc [preauth]

debug2: MACs ctos: umac-64-etm at openssh.com,umac-128-etm at openssh.com,hmac-sha2-256-etm at openssh.com,hmac-sha2-512-etm at openssh.com,hmac-sha1-etm at openssh.com,umac-64 at openssh.com,umac-128 at openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 [preauth]

debug2: MACs stoc: umac-64-etm at openssh.com,umac-128-etm at openssh.com,hmac-sha2-256-etm at openssh.com,hmac-sha2-512-etm at openssh.com,hmac-sha1-etm at openssh.com,umac-64 at openssh.com,umac-128 at openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 [preauth]

debug2: compression ctos: none,zlib at openssh.com [preauth]

debug2: compression stoc: none,zlib at openssh.com [preauth]

debug2: languages ctos:  [preauth]

debug2: languages stoc:  [preauth]

debug2: first_kex_follows 0  [preauth]

debug2: reserved 0  [preauth]

debug2: peer client KEXINIT proposal [preauth]

debug2: KEX algorithms: curve25519-sha256 at libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,ext-info-c [preauth]

debug2: host key algorithms: ecdsa-sha2-nistp256-cert-v01 at openssh.com,ecdsa-sha2-nistp384-cert-v01 at openssh.com,ecdsa-sha2-nistp521-cert-v01 at openssh.com,ssh-ed25519-cert-v01 at openssh.com,ssh-rsa-cert-v01 at openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519,rsa-sha2-512,rsa-sha2-256,ssh-rsa [preauth]

debug2: ciphers ctos: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,3des-cbc [preauth]

debug2: ciphers stoc: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,3des-cbc [preauth]

debug2: MACs ctos: umac-64-etm at openssh.com,umac-128-etm at openssh.com,hmac-sha2-256-etm at openssh.com,hmac-sha2-512-etm at openssh.com,hmac-sha1-etm at openssh.com,umac-64 at openssh.com,umac-128 at openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 [preauth]

debug2: MACs stoc: umac-64-etm at openssh.com,umac-128-etm at openssh.com,hmac-sha2-256-etm at openssh.com,hmac-sha2-512-etm at openssh.com,hmac-sha1-etm at openssh.com,umac-64 at openssh.com,umac-128 at openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 [preauth]

debug2: compression ctos: none,zlib at openssh.com,zlib [preauth]

debug2: compression stoc: none,zlib at openssh.com,zlib [preauth]

debug2: languages ctos:  [preauth]

debug2: languages stoc:  [preauth]

debug2: first_kex_follows 0  [preauth]

debug2: reserved 0  [preauth]

debug1: kex: algorithm: curve25519-sha256 at libssh.org [preauth]

debug1: kex: host key algorithm: ecdsa-sha2-nistp256 [preauth]

debug1: kex: client->server cipher: chacha20-poly1305 at openssh.com MAC: <implicit> compression: none [preauth]

debug1: kex: server->client cipher: chacha20-poly1305 at openssh.com MAC: <implicit> compression: none [preauth]

debug1: expecting SSH2_MSG_KEX_ECDH_INIT [preauth]

debug3: receive packet: type 30 [preauth]

debug3: mm_key_sign entering [preauth]

debug3: mm_request_send entering: type 6 [preauth]

debug3: mm_key_sign: waiting for MONITOR_ANS_SIGN [preauth]

debug3: mm_request_receive_expect entering: type 7 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 6

debug3: mm_answer_sign

debug3: mm_answer_sign: hostkey proof signature 0x8040411c0(99)

debug3: mm_request_send entering: type 7

debug2: monitor_read: 6 used once, disabling now

debug3: send packet: type 31 [preauth]

debug3: send packet: type 21 [preauth]

debug2: set_newkeys: mode 1 [preauth]

debug1: rekey after 134217728 blocks [preauth]

debug1: SSH2_MSG_NEWKEYS sent [preauth]

debug1: expecting SSH2_MSG_NEWKEYS [preauth]

debug3: send packet: type 7 [preauth]

debug3: receive packet: type 21 [preauth]

debug2: set_newkeys: mode 0 [preauth]

debug1: rekey after 134217728 blocks [preauth]

debug1: SSH2_MSG_NEWKEYS received [preauth]

debug1: KEX done [preauth]

debug3: receive packet: type 5 [preauth]

debug3: send packet: type 6 [preauth]

debug3: receive packet: type 50 [preauth]

debug3: Trying to reverse map address 192.168.1.5. [preauth]

debug1: userauth-request for user rodrigc service ssh-connection method none [preauth]

debug1: attempt 0 failures 0 [preauth]

debug3: mm_getpwnamallow entering [preauth]

debug3: mm_request_send entering: type 8 [preauth]

debug3: mm_getpwnamallow: waiting for MONITOR_ANS_PWNAM [preauth]

debug3: mm_request_receive_expect entering: type 9 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 8

debug3: mm_answer_pwnamallow

debug3: Trying to reverse map address 192.168.1.5.

debug2: parse_server_config: config reprocess config len 197

debug3: mm_answer_pwnamallow: sending MONITOR_ANS_PWNAM: 1

debug3: mm_request_send entering: type 9

debug2: monitor_read: 8 used once, disabling now

debug2: input_userauth_request: setting up authctxt for rodrigc [preauth]

debug3: mm_start_pam entering [preauth]

debug3: mm_request_send entering: type 100 [preauth]

debug3: mm_inform_authserv entering [preauth]

debug3: mm_request_send entering: type 4 [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 100

debug1: PAM: initializing for "rodrigc"

debug1: PAM: setting PAM_RHOST to "192.168.1.5"

debug2: monitor_read: 100 used once, disabling now

debug2: input_userauth_request: try method none [preauth]

debug3: userauth_finish: failure partial=0 next methods="publickey,keyboard-interactive" [preauth]

debug3: send packet: type 51 [preauth]

debug3: receive packet: type 50 [preauth]

debug1: userauth-request for user rodrigc service ssh-connection method publickey [preauth]

debug1: attempt 1 failures 0 [preauth]

debug2: input_userauth_request: try method publickey [preauth]

debug1: userauth_pubkey: test whether pkalg/pkblob are acceptable for RSA SHA256:m2nfEMZA8SWbLCwY40QzK5CSxEAuW0H+aUC4g8jOWFo [preauth]

debug3: mm_key_allowed entering [preauth]

debug3: mm_request_send entering: type 22 [preauth]

debug3: mm_key_allowed: waiting for MONITOR_ANS_KEYALLOWED [preauth]

debug3: mm_request_receive_expect entering: type 23 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 4

debug3: mm_answer_authserv: service=ssh-connection, style=

debug2: monitor_read: 4 used once, disabling now

debug3: mm_request_receive entering

debug3: monitor_read: checking request 22

debug3: mm_answer_keyallowed entering

debug3: mm_answer_keyallowed: key_from_blob: 0x80401b540

debug1: trying public key file /opt2/home/rodrigc/.ssh/authorized_keys

debug1: fd 4 clearing O_NONBLOCK

debug2: user_key_allowed: check options: 'ssh-dss AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug2: user_key_allowed: advance: 'AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug2: key not found

debug1: trying public key file /opt2/home/rodrigc/.ssh/authorized_keys2

debug1: Could not open authorized keys '/opt2/home/rodrigc/.ssh/authorized_keys2': No such file or directory

Failed publickey for rodrigc from 192.168.1.5 port 58546 ssh2: RSA SHA256:m2nfEMZA8SWbLCwY40QzK5CSxEAuW0H+aUC4g8jOWFo

debug3: mm_answer_keyallowed: key 0x80401b540 is not allowed

debug3: mm_request_send entering: type 23

debug2: userauth_pubkey: authenticated 0 pkalg rsa-sha2-512 [preauth]

debug3: userauth_finish: failure partial=0 next methods="publickey,keyboard-interactive" [preauth]

debug3: send packet: type 51 [preauth]

debug3: receive packet: type 50 [preauth]

debug1: userauth-request for user rodrigc service ssh-connection method publickey [preauth]

debug1: attempt 2 failures 1 [preauth]

debug2: input_userauth_request: try method publickey [preauth]

debug1: userauth_pubkey: test whether pkalg/pkblob are acceptable for RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc [preauth]

debug3: mm_key_allowed entering [preauth]

debug3: mm_request_send entering: type 22 [preauth]

debug3: mm_key_allowed: waiting for MONITOR_ANS_KEYALLOWED [preauth]

debug3: mm_request_receive_expect entering: type 23 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 22

debug3: mm_answer_keyallowed entering

debug3: mm_answer_keyallowed: key_from_blob: 0x80401b540

debug1: trying public key file /opt2/home/rodrigc/.ssh/authorized_keys

debug1: fd 4 clearing O_NONBLOCK

debug2: user_key_allowed: check options: 'ssh-dss AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug2: user_key_allowed: advance: 'AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug1: matching key found: file /opt2/home/rodrigc/.ssh/authorized_keys, line 2 RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc

debug3: mm_answer_keyallowed: key 0x80401b540 is allowed

debug3: mm_request_send entering: type 23

debug3: send packet: type 60 [preauth]

debug2: userauth_pubkey: authenticated 0 pkalg rsa-sha2-512 [preauth]

Postponed publickey for rodrigc from 192.168.1.5 port 58546 ssh2 [preauth]

debug3: receive packet: type 50 [preauth]

debug1: userauth-request for user rodrigc service ssh-connection method publickey [preauth]

debug1: attempt 3 failures 1 [preauth]

debug2: input_userauth_request: try method publickey [preauth]

debug3: userauth_pubkey: have signature for RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc [preauth]

debug3: mm_key_allowed entering [preauth]

debug3: mm_request_send entering: type 22 [preauth]

debug3: mm_key_allowed: waiting for MONITOR_ANS_KEYALLOWED [preauth]

debug3: mm_request_receive_expect entering: type 23 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 22

debug3: mm_answer_keyallowed entering

debug3: mm_answer_keyallowed: key_from_blob: 0x80401b540

debug1: trying public key file /opt2/home/rodrigc/.ssh/authorized_keys

debug1: fd 4 clearing O_NONBLOCK

debug2: user_key_allowed: check options: 'ssh-dss AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug2: user_key_allowed: advance: 'AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug1: matching key found: file /opt2/home/rodrigc/.ssh/authorized_keys, line 2 RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc

debug3: mm_answer_keyallowed: key 0x80401b540 is allowed

debug3: mm_request_send entering: type 23

debug3: mm_key_verify entering [preauth]

debug3: mm_request_send entering: type 24 [preauth]

debug3: mm_key_verify: waiting for MONITOR_ANS_KEYVERIFY [preauth]

debug3: mm_request_receive_expect entering: type 25 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 24

debug3: mm_answer_keyverify: key 0x80401b540 signature verified

debug3: mm_request_send entering: type 25

debug3: mm_request_receive_expect entering: type 102

debug3: mm_request_receive entering

debug1: do_pam_account: called

debug3: PAM: do_pam_account pam_acct_mgmt = 0 (success)

debug3: mm_request_send entering: type 103

Accepted publickey for rodrigc from 192.168.1.5 port 58546 ssh2: RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc

debug1: monitor_child_preauth: rodrigc has been authenticated by privileged process

debug3: mm_get_keystate: Waiting for new keys

debug3: mm_request_receive_expect entering: type 26

debug3: mm_request_receive entering

debug3: mm_get_keystate: GOT new keys

debug2: userauth_pubkey: authenticated 1 pkalg rsa-sha2-512 [preauth]

debug3: mm_do_pam_account entering [preauth]

debug3: mm_request_send entering: type 102 [preauth]

debug3: mm_request_receive_expect entering: type 103 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_do_pam_account returning 1 [preauth]

debug3: send packet: type 52 [preauth]

debug3: mm_request_send entering: type 26 [preauth]

debug3: mm_send_keystate: Finished sending state [preauth]

debug1: monitor_read_log: child log fd closed

debug3: mm_share_sync: Share sync

debug3: mm_share_sync: Share sync end

debug3: ssh_sandbox_parent_finish: finished

debug1: PAM: establishing credentials

debug3: PAM: opening session

User child is on pid 68980

debug1: PAM: establishing credentials

debug3: monitor_apply_keystate: packet_set_state

debug2: set_newkeys: mode 0

debug1: rekey after 134217728 blocks

debug2: set_newkeys: mode 1

debug1: rekey after 134217728 blocks

debug1: ssh_packet_set_postauth: called

debug3: Fssh_ssh_packet_set_state: done

debug3: notify_hostkeys: key 0: ssh-rsa SHA256:73H4OcFhNGdHY2sVsbBOVVOudub2EkvfYNlwpxWM1Xw

debug3: notify_hostkeys: key 1: ssh-dss SHA256:6BQ11F0ejGONS1+d4O63t7fyyGKaEyW33a73x5G/3ic

debug3: notify_hostkeys: key 2: ecdsa-sha2-nistp256 SHA256:jkq3WG/EU+yyyg8xemPshcErRvPYmSbU202opbYgzHU

debug3: notify_hostkeys: key 3: ssh-ed25519 SHA256:59NbS+jIUH9ADjLpk5nQLKq229hrx89QpAd3Z3Ts6j4

debug3: notify_hostkeys: sent 4 hostkeys

debug3: send packet: type 80

debug1: Entering interactive session for SSH2.

debug2: fd 6 setting O_NONBLOCK

debug2: fd 7 setting O_NONBLOCK

debug1: server_init_dispatch_20

debug3: receive packet: type 90

debug1: server_input_channel_open: ctype session rchan 0 win 1048576 max 16384

debug1: input_session_request

debug1: channel 0: new [server-session]

debug2: session_new: allocate (allocated 0 max 10)

debug3: session_unused: session id 0 unused

debug1: session_new: session 0

debug1: session_open: channel 0

debug1: session_open: session 0: link with channel 0

debug1: server_input_channel_open: confirm session

debug3: send packet: type 91

debug3: receive packet: type 80

debug1: server_input_global_request: rtype no-more-sessions at openssh.com want_reply 0

debug3: receive packet: type 98

debug1: server_input_channel_req: channel 0 request pty-req reply 1

debug1: session_by_channel: session 0 channel 0

debug1: session_input_channel_req: session 0 req pty-req

debug1: Allocating pty.

debug3: mm_request_send entering: type 28

debug3: mm_pty_allocate: waiting for MONITOR_ANS_PTY

debug3: mm_request_receive_expect entering: type 29

debug3: mm_request_receive entering

debug3: mm_request_receive entering

debug3: monitor_read: checking request 28

debug3: mm_answer_pty entering

debug2: session_new: allocate (allocated 0 max 10)

debug3: session_unused: session id 0 unused

debug1: session_new: session 0

debug3: mm_request_send entering: type 29

debug3: mm_answer_pty: tty /dev/pts/4 ptyfd 5

debug1: session_pty_req: session 0 alloc /dev/pts/4

debug3: send packet: type 99

debug3: receive packet: type 98

debug1: server_input_channel_req: channel 0 request env reply 0

debug1: session_by_channel: session 0 channel 0

debug1: session_input_channel_req: session 0 req env

debug2: Ignoring env request LANG: disallowed name

debug3: receive packet: type 98

debug1: server_input_channel_req: channel 0 request shell reply 1

debug1: session_by_channel: session 0 channel 0

debug1: session_input_channel_req: session 0 req shell

Starting session: shell on pts/4 for rodrigc from 192.168.1.5 port 58546 id 0

debug2: fd 3 setting TCP_NODELAY

debug3: Fssh_ssh_packet_set_tos: set IP_TOS 0x10

debug2: channel 0: rfd 10 isatty

debug2: fd 10 setting O_NONBLOCK

debug3: fd 8 is O_NONBLOCK

debug3: send packet: type 99

debug1: Setting controlling tty using TIOCSCTTY.

debug2: channel 0: read<=0 rfd 10 len 0

debug2: channel 0: read failed

debug2: channel 0: close_read

debug2: channel 0: input open -> drain

debug2: channel 0: ibuf empty

debug2: channel 0: send eof

debug3: send packet: type 96

debug2: channel 0: input drain -> closed

debug1: Received SIGCHLD.

debug1: session_by_pid: pid 68981

debug1: session_exit_message: session 0 channel 0 pid 68981

debug2: channel 0: request exit-status confirm 0

debug3: send packet: type 98

debug1: session_exit_message: release channel 0

debug2: channel 0: write failed

debug2: channel 0: close_write

debug2: channel 0: send eow

debug3: send packet: type 98

debug2: channel 0: output open -> closed

debug3: mm_request_send entering: type 30

debug2: channel 0: send close

debug3: send packet: type 97

debug3: channel 0: will not send data after close

debug2: notify_done: reading

debug3: mm_request_receive entering

debug3: channel 0: will not send data after close

debug3: monitor_read: checking request 30

debug3: mm_answer_pty_cleanup entering

debug1: session_by_tty: session 0 tty /dev/pts/4

debug3: mm_session_close: session 0 pid 68980

debug3: mm_session_close: tty /dev/pts/4 ptyfd 5

debug1: session_pty_cleanup: session 0 release /dev/pts/4

debug3: session_unused: session id 0 unused

debug3: receive packet: type 97

debug2: channel 0: rcvd close

debug3: channel 0: will not send data after close

debug2: channel 0: is dead

debug2: channel 0: gc: notify user

debug1: session_by_channel: session 0 channel 0

debug1: session_close_by_channel: channel 0 child 0

Close session: user rodrigc from 192.168.1.5 port 58546 id 0

debug3: session_unused: session id 0 unused

debug2: channel 0: gc: user detached

debug2: channel 0: is dead

debug2: channel 0: garbage collecting

debug1: channel 0: free: server-session, nchannels 1

debug3: channel 0: status: The following connections are open:

  #0 server-session (t4 r0 i3/0 o3/0 fd -1/-1 cc -1)



debug3: receive packet: type 1

Received disconnect from 192.168.1.5 port 58546:11: disconnected by user

Disconnected from 192.168.1.5 port 58546

debug1: do_cleanup

debug3: PAM: sshpam_thread_cleanup entering

debug3: mm_request_receive entering

debug1: do_cleanup

debug1: PAM: cleanup

debug1: PAM: closing session

debug1: PAM: deleting credentials

debug3: PAM: sshpam_thread_cleanup entering


Command exit status: 255
Script done on Tue Dec 20 18:50:47 2016
-------------- next part --------------
Script started on Tue Dec 20 18:50:42 2016
Command: /usr/sbin/sshd -p 9000 -d -d -d
debug2: load_server_config: filename /etc/ssh/sshd_config

debug2: load_server_config: done config len = 197

debug2: parse_server_config: config /etc/ssh/sshd_config len 197

debug3: /etc/ssh/sshd_config:49 setting PermitRootLogin yes

debug3: /etc/ssh/sshd_config:131 setting Subsystem sftp	/usr/libexec/sftp-server

debug1: sshd version OpenSSH_7.2, OpenSSL 1.0.2j-freebsd  26 Sep 2016

debug1: private host key #0: ssh-rsa SHA256:73H4OcFhNGdHY2sVsbBOVVOudub2EkvfYNlwpxWM1Xw

debug1: private host key #1: ssh-dss SHA256:6BQ11F0ejGONS1+d4O63t7fyyGKaEyW33a73x5G/3ic

debug1: private host key #2: ecdsa-sha2-nistp256 SHA256:jkq3WG/EU+yyyg8xemPshcErRvPYmSbU202opbYgzHU

debug1: private host key #3: ssh-ed25519 SHA256:59NbS+jIUH9ADjLpk5nQLKq229hrx89QpAd3Z3Ts6j4

debug1: rexec_argv[0]='/usr/sbin/sshd'

debug1: rexec_argv[1]='-p'

debug1: rexec_argv[2]='9000'

debug1: rexec_argv[3]='-d'

debug1: rexec_argv[4]='-d'

debug1: rexec_argv[5]='-d'

debug2: fd 3 setting O_NONBLOCK

debug3: Fssh_sock_set_v6only: set socket 3 IPV6_V6ONLY

debug1: Bind to port 9000 on ::.

debug1: Server TCP RWIN socket size: 65536

Server listening on :: port 9000.

debug2: fd 4 setting O_NONBLOCK

debug1: Bind to port 9000 on 0.0.0.0.

debug1: Server TCP RWIN socket size: 65536

Server listening on 0.0.0.0 port 9000.

debug1: fd 5 clearing O_NONBLOCK

debug1: Server will not fork when running in debugging mode.

debug3: send_rexec_state: entering fd = 8 config len 197

debug3: ssh_msg_send: type 0

debug3: send_rexec_state: done

debug1: rexec start in 5 out 5 newsock 5 pipe -1 sock 8

debug1: inetd sockets after dupping: 3, 3

debug1: res_init()

Connection from 192.168.1.5 port 58546 on 192.168.1.2 port 9000

debug1: Client protocol version 2.0; client software version OpenSSH_7.2

debug1: match: OpenSSH_7.2 pat OpenSSH* compat 0x04000000

debug1: Enabling compatibility mode for protocol 2.0

debug1: Local version string SSH-2.0-OpenSSH_7.2 FreeBSD-20160310

debug2: fd 3 setting O_NONBLOCK

debug3: ssh_sandbox_init: preparing capsicum sandbox

debug2: Network child is on pid 68979

debug3: preauth child monitor started

debug3: privsep user:group 22:22 [preauth]

debug1: permanently_set_uid: 22/22 [preauth]

debug3: list_hostkey_types: ssh-dss key not permitted by HostkeyAlgorithms [preauth]

debug1: list_hostkey_types: ssh-rsa,rsa-sha2-512,rsa-sha2-256,ecdsa-sha2-nistp256,ssh-ed25519 [preauth]

debug3: send packet: type 20 [preauth]

debug1: SSH2_MSG_KEXINIT sent [preauth]

debug3: receive packet: type 20 [preauth]

debug1: SSH2_MSG_KEXINIT received [preauth]

debug2: local server KEXINIT proposal [preauth]

debug2: KEX algorithms: curve25519-sha256 at libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1 [preauth]

debug2: host key algorithms: ssh-rsa,rsa-sha2-512,rsa-sha2-256,ecdsa-sha2-nistp256,ssh-ed25519 [preauth]

debug2: ciphers ctos: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc [preauth]

debug2: ciphers stoc: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc [preauth]

debug2: MACs ctos: umac-64-etm at openssh.com,umac-128-etm at openssh.com,hmac-sha2-256-etm at openssh.com,hmac-sha2-512-etm at openssh.com,hmac-sha1-etm at openssh.com,umac-64 at openssh.com,umac-128 at openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 [preauth]

debug2: MACs stoc: umac-64-etm at openssh.com,umac-128-etm at openssh.com,hmac-sha2-256-etm at openssh.com,hmac-sha2-512-etm at openssh.com,hmac-sha1-etm at openssh.com,umac-64 at openssh.com,umac-128 at openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 [preauth]

debug2: compression ctos: none,zlib at openssh.com [preauth]

debug2: compression stoc: none,zlib at openssh.com [preauth]

debug2: languages ctos:  [preauth]

debug2: languages stoc:  [preauth]

debug2: first_kex_follows 0  [preauth]

debug2: reserved 0  [preauth]

debug2: peer client KEXINIT proposal [preauth]

debug2: KEX algorithms: curve25519-sha256 at libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,ext-info-c [preauth]

debug2: host key algorithms: ecdsa-sha2-nistp256-cert-v01 at openssh.com,ecdsa-sha2-nistp384-cert-v01 at openssh.com,ecdsa-sha2-nistp521-cert-v01 at openssh.com,ssh-ed25519-cert-v01 at openssh.com,ssh-rsa-cert-v01 at openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519,rsa-sha2-512,rsa-sha2-256,ssh-rsa [preauth]

debug2: ciphers ctos: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,3des-cbc [preauth]

debug2: ciphers stoc: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,3des-cbc [preauth]

debug2: MACs ctos: umac-64-etm at openssh.com,umac-128-etm at openssh.com,hmac-sha2-256-etm at openssh.com,hmac-sha2-512-etm at openssh.com,hmac-sha1-etm at openssh.com,umac-64 at openssh.com,umac-128 at openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 [preauth]

debug2: MACs stoc: umac-64-etm at openssh.com,umac-128-etm at openssh.com,hmac-sha2-256-etm at openssh.com,hmac-sha2-512-etm at openssh.com,hmac-sha1-etm at openssh.com,umac-64 at openssh.com,umac-128 at openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 [preauth]

debug2: compression ctos: none,zlib at openssh.com,zlib [preauth]

debug2: compression stoc: none,zlib at openssh.com,zlib [preauth]

debug2: languages ctos:  [preauth]

debug2: languages stoc:  [preauth]

debug2: first_kex_follows 0  [preauth]

debug2: reserved 0  [preauth]

debug1: kex: algorithm: curve25519-sha256 at libssh.org [preauth]

debug1: kex: host key algorithm: ecdsa-sha2-nistp256 [preauth]

debug1: kex: client->server cipher: chacha20-poly1305 at openssh.com MAC: <implicit> compression: none [preauth]

debug1: kex: server->client cipher: chacha20-poly1305 at openssh.com MAC: <implicit> compression: none [preauth]

debug1: expecting SSH2_MSG_KEX_ECDH_INIT [preauth]

debug3: receive packet: type 30 [preauth]

debug3: mm_key_sign entering [preauth]

debug3: mm_request_send entering: type 6 [preauth]

debug3: mm_key_sign: waiting for MONITOR_ANS_SIGN [preauth]

debug3: mm_request_receive_expect entering: type 7 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 6

debug3: mm_answer_sign

debug3: mm_answer_sign: hostkey proof signature 0x8040411c0(99)

debug3: mm_request_send entering: type 7

debug2: monitor_read: 6 used once, disabling now

debug3: send packet: type 31 [preauth]

debug3: send packet: type 21 [preauth]

debug2: set_newkeys: mode 1 [preauth]

debug1: rekey after 134217728 blocks [preauth]

debug1: SSH2_MSG_NEWKEYS sent [preauth]

debug1: expecting SSH2_MSG_NEWKEYS [preauth]

debug3: send packet: type 7 [preauth]

debug3: receive packet: type 21 [preauth]

debug2: set_newkeys: mode 0 [preauth]

debug1: rekey after 134217728 blocks [preauth]

debug1: SSH2_MSG_NEWKEYS received [preauth]

debug1: KEX done [preauth]

debug3: receive packet: type 5 [preauth]

debug3: send packet: type 6 [preauth]

debug3: receive packet: type 50 [preauth]

debug3: Trying to reverse map address 192.168.1.5. [preauth]

debug1: userauth-request for user rodrigc service ssh-connection method none [preauth]

debug1: attempt 0 failures 0 [preauth]

debug3: mm_getpwnamallow entering [preauth]

debug3: mm_request_send entering: type 8 [preauth]

debug3: mm_getpwnamallow: waiting for MONITOR_ANS_PWNAM [preauth]

debug3: mm_request_receive_expect entering: type 9 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 8

debug3: mm_answer_pwnamallow

debug3: Trying to reverse map address 192.168.1.5.

debug2: parse_server_config: config reprocess config len 197

debug3: mm_answer_pwnamallow: sending MONITOR_ANS_PWNAM: 1

debug3: mm_request_send entering: type 9

debug2: monitor_read: 8 used once, disabling now

debug2: input_userauth_request: setting up authctxt for rodrigc [preauth]

debug3: mm_start_pam entering [preauth]

debug3: mm_request_send entering: type 100 [preauth]

debug3: mm_inform_authserv entering [preauth]

debug3: mm_request_send entering: type 4 [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 100

debug1: PAM: initializing for "rodrigc"

debug1: PAM: setting PAM_RHOST to "192.168.1.5"

debug2: monitor_read: 100 used once, disabling now

debug2: input_userauth_request: try method none [preauth]

debug3: userauth_finish: failure partial=0 next methods="publickey,keyboard-interactive" [preauth]

debug3: send packet: type 51 [preauth]

debug3: receive packet: type 50 [preauth]

debug1: userauth-request for user rodrigc service ssh-connection method publickey [preauth]

debug1: attempt 1 failures 0 [preauth]

debug2: input_userauth_request: try method publickey [preauth]

debug1: userauth_pubkey: test whether pkalg/pkblob are acceptable for RSA SHA256:m2nfEMZA8SWbLCwY40QzK5CSxEAuW0H+aUC4g8jOWFo [preauth]

debug3: mm_key_allowed entering [preauth]

debug3: mm_request_send entering: type 22 [preauth]

debug3: mm_key_allowed: waiting for MONITOR_ANS_KEYALLOWED [preauth]

debug3: mm_request_receive_expect entering: type 23 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 4

debug3: mm_answer_authserv: service=ssh-connection, style=

debug2: monitor_read: 4 used once, disabling now

debug3: mm_request_receive entering

debug3: monitor_read: checking request 22

debug3: mm_answer_keyallowed entering

debug3: mm_answer_keyallowed: key_from_blob: 0x80401b540

debug1: trying public key file /opt2/home/rodrigc/.ssh/authorized_keys

debug1: fd 4 clearing O_NONBLOCK

debug2: user_key_allowed: check options: 'ssh-dss AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug2: user_key_allowed: advance: 'AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug2: key not found

debug1: trying public key file /opt2/home/rodrigc/.ssh/authorized_keys2

debug1: Could not open authorized keys '/opt2/home/rodrigc/.ssh/authorized_keys2': No such file or directory

Failed publickey for rodrigc from 192.168.1.5 port 58546 ssh2: RSA SHA256:m2nfEMZA8SWbLCwY40QzK5CSxEAuW0H+aUC4g8jOWFo

debug3: mm_answer_keyallowed: key 0x80401b540 is not allowed

debug3: mm_request_send entering: type 23

debug2: userauth_pubkey: authenticated 0 pkalg rsa-sha2-512 [preauth]

debug3: userauth_finish: failure partial=0 next methods="publickey,keyboard-interactive" [preauth]

debug3: send packet: type 51 [preauth]

debug3: receive packet: type 50 [preauth]

debug1: userauth-request for user rodrigc service ssh-connection method publickey [preauth]

debug1: attempt 2 failures 1 [preauth]

debug2: input_userauth_request: try method publickey [preauth]

debug1: userauth_pubkey: test whether pkalg/pkblob are acceptable for RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc [preauth]

debug3: mm_key_allowed entering [preauth]

debug3: mm_request_send entering: type 22 [preauth]

debug3: mm_key_allowed: waiting for MONITOR_ANS_KEYALLOWED [preauth]

debug3: mm_request_receive_expect entering: type 23 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 22

debug3: mm_answer_keyallowed entering

debug3: mm_answer_keyallowed: key_from_blob: 0x80401b540

debug1: trying public key file /opt2/home/rodrigc/.ssh/authorized_keys

debug1: fd 4 clearing O_NONBLOCK

debug2: user_key_allowed: check options: 'ssh-dss AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug2: user_key_allowed: advance: 'AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug1: matching key found: file /opt2/home/rodrigc/.ssh/authorized_keys, line 2 RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc

debug3: mm_answer_keyallowed: key 0x80401b540 is allowed

debug3: mm_request_send entering: type 23

debug3: send packet: type 60 [preauth]

debug2: userauth_pubkey: authenticated 0 pkalg rsa-sha2-512 [preauth]

Postponed publickey for rodrigc from 192.168.1.5 port 58546 ssh2 [preauth]

debug3: receive packet: type 50 [preauth]

debug1: userauth-request for user rodrigc service ssh-connection method publickey [preauth]

debug1: attempt 3 failures 1 [preauth]

debug2: input_userauth_request: try method publickey [preauth]

debug3: userauth_pubkey: have signature for RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc [preauth]

debug3: mm_key_allowed entering [preauth]

debug3: mm_request_send entering: type 22 [preauth]

debug3: mm_key_allowed: waiting for MONITOR_ANS_KEYALLOWED [preauth]

debug3: mm_request_receive_expect entering: type 23 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 22

debug3: mm_answer_keyallowed entering

debug3: mm_answer_keyallowed: key_from_blob: 0x80401b540

debug1: trying public key file /opt2/home/rodrigc/.ssh/authorized_keys

debug1: fd 4 clearing O_NONBLOCK

debug2: user_key_allowed: check options: 'ssh-dss AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug2: user_key_allowed: advance: 'AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug1: matching key found: file /opt2/home/rodrigc/.ssh/authorized_keys, line 2 RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc

debug3: mm_answer_keyallowed: key 0x80401b540 is allowed

debug3: mm_request_send entering: type 23

debug3: mm_key_verify entering [preauth]

debug3: mm_request_send entering: type 24 [preauth]

debug3: mm_key_verify: waiting for MONITOR_ANS_KEYVERIFY [preauth]

debug3: mm_request_receive_expect entering: type 25 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 24

debug3: mm_answer_keyverify: key 0x80401b540 signature verified

debug3: mm_request_send entering: type 25

debug3: mm_request_receive_expect entering: type 102

debug3: mm_request_receive entering

debug1: do_pam_account: called

debug3: PAM: do_pam_account pam_acct_mgmt = 0 (success)

debug3: mm_request_send entering: type 103

Accepted publickey for rodrigc from 192.168.1.5 port 58546 ssh2: RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc

debug1: monitor_child_preauth: rodrigc has been authenticated by privileged process

debug3: mm_get_keystate: Waiting for new keys

debug3: mm_request_receive_expect entering: type 26

debug3: mm_request_receive entering

debug3: mm_get_keystate: GOT new keys

debug2: userauth_pubkey: authenticated 1 pkalg rsa-sha2-512 [preauth]

debug3: mm_do_pam_account entering [preauth]

debug3: mm_request_send entering: type 102 [preauth]

debug3: mm_request_receive_expect entering: type 103 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_do_pam_account returning 1 [preauth]

debug3: send packet: type 52 [preauth]

debug3: mm_request_send entering: type 26 [preauth]

debug3: mm_send_keystate: Finished sending state [preauth]

debug1: monitor_read_log: child log fd closed

debug3: mm_share_sync: Share sync

debug3: mm_share_sync: Share sync end

debug3: ssh_sandbox_parent_finish: finished

debug1: PAM: establishing credentials

debug3: PAM: opening session

User child is on pid 68980

debug1: PAM: establishing credentials

debug3: monitor_apply_keystate: packet_set_state

debug2: set_newkeys: mode 0

debug1: rekey after 134217728 blocks

debug2: set_newkeys: mode 1

debug1: rekey after 134217728 blocks

debug1: ssh_packet_set_postauth: called

debug3: Fssh_ssh_packet_set_state: done

debug3: notify_hostkeys: key 0: ssh-rsa SHA256:73H4OcFhNGdHY2sVsbBOVVOudub2EkvfYNlwpxWM1Xw

debug3: notify_hostkeys: key 1: ssh-dss SHA256:6BQ11F0ejGONS1+d4O63t7fyyGKaEyW33a73x5G/3ic

debug3: notify_hostkeys: key 2: ecdsa-sha2-nistp256 SHA256:jkq3WG/EU+yyyg8xemPshcErRvPYmSbU202opbYgzHU

debug3: notify_hostkeys: key 3: ssh-ed25519 SHA256:59NbS+jIUH9ADjLpk5nQLKq229hrx89QpAd3Z3Ts6j4

debug3: notify_hostkeys: sent 4 hostkeys

debug3: send packet: type 80

debug1: Entering interactive session for SSH2.

debug2: fd 6 setting O_NONBLOCK

debug2: fd 7 setting O_NONBLOCK

debug1: server_init_dispatch_20

debug3: receive packet: type 90

debug1: server_input_channel_open: ctype session rchan 0 win 1048576 max 16384

debug1: input_session_request

debug1: channel 0: new [server-session]

debug2: session_new: allocate (allocated 0 max 10)

debug3: session_unused: session id 0 unused

debug1: session_new: session 0

debug1: session_open: channel 0

debug1: session_open: session 0: link with channel 0

debug1: server_input_channel_open: confirm session

debug3: send packet: type 91

debug3: receive packet: type 80

debug1: server_input_global_request: rtype no-more-sessions at openssh.com want_reply 0

debug3: receive packet: type 98

debug1: server_input_channel_req: channel 0 request pty-req reply 1

debug1: session_by_channel: session 0 channel 0

debug1: session_input_channel_req: session 0 req pty-req

debug1: Allocating pty.

debug3: mm_request_send entering: type 28

debug3: mm_pty_allocate: waiting for MONITOR_ANS_PTY

debug3: mm_request_receive_expect entering: type 29

debug3: mm_request_receive entering

debug3: mm_request_receive entering

debug3: monitor_read: checking request 28

debug3: mm_answer_pty entering

debug2: session_new: allocate (allocated 0 max 10)

debug3: session_unused: session id 0 unused

debug1: session_new: session 0

debug3: mm_request_send entering: type 29

debug3: mm_answer_pty: tty /dev/pts/4 ptyfd 5

debug1: session_pty_req: session 0 alloc /dev/pts/4

debug3: send packet: type 99

debug3: receive packet: type 98

debug1: server_input_channel_req: channel 0 request env reply 0

debug1: session_by_channel: session 0 channel 0

debug1: session_input_channel_req: session 0 req env

debug2: Ignoring env request LANG: disallowed name

debug3: receive packet: type 98

debug1: server_input_channel_req: channel 0 request shell reply 1

debug1: session_by_channel: session 0 channel 0

debug1: session_input_channel_req: session 0 req shell

Starting session: shell on pts/4 for rodrigc from 192.168.1.5 port 58546 id 0

debug2: fd 3 setting TCP_NODELAY

debug3: Fssh_ssh_packet_set_tos: set IP_TOS 0x10

debug2: channel 0: rfd 10 isatty

debug2: fd 10 setting O_NONBLOCK

debug3: fd 8 is O_NONBLOCK

debug3: send packet: type 99

debug1: Setting controlling tty using TIOCSCTTY.

debug2: channel 0: read<=0 rfd 10 len 0

debug2: channel 0: read failed

debug2: channel 0: close_read

debug2: channel 0: input open -> drain

debug2: channel 0: ibuf empty

debug2: channel 0: send eof

debug3: send packet: type 96

debug2: channel 0: input drain -> closed

debug1: Received SIGCHLD.

debug1: session_by_pid: pid 68981

debug1: session_exit_message: session 0 channel 0 pid 68981

debug2: channel 0: request exit-status confirm 0

debug3: send packet: type 98

debug1: session_exit_message: release channel 0

debug2: channel 0: write failed

debug2: channel 0: close_write

debug2: channel 0: send eow

debug3: send packet: type 98

debug2: channel 0: output open -> closed

debug3: mm_request_send entering: type 30

debug2: channel 0: send close

debug3: send packet: type 97

debug3: channel 0: will not send data after close

debug2: notify_done: reading

debug3: mm_request_receive entering

debug3: channel 0: will not send data after close

debug3: monitor_read: checking request 30

debug3: mm_answer_pty_cleanup entering

debug1: session_by_tty: session 0 tty /dev/pts/4

debug3: mm_session_close: session 0 pid 68980

debug3: mm_session_close: tty /dev/pts/4 ptyfd 5

debug1: session_pty_cleanup: session 0 release /dev/pts/4

debug3: session_unused: session id 0 unused

debug3: receive packet: type 97

debug2: channel 0: rcvd close

debug3: channel 0: will not send data after close

debug2: channel 0: is dead

debug2: channel 0: gc: notify user

debug1: session_by_channel: session 0 channel 0

debug1: session_close_by_channel: channel 0 child 0

Close session: user rodrigc from 192.168.1.5 port 58546 id 0

debug3: session_unused: session id 0 unused

debug2: channel 0: gc: user detached

debug2: channel 0: is dead

debug2: channel 0: garbage collecting

debug1: channel 0: free: server-session, nchannels 1

debug3: channel 0: status: The following connections are open:

  #0 server-session (t4 r0 i3/0 o3/0 fd -1/-1 cc -1)



debug3: receive packet: type 1

Received disconnect from 192.168.1.5 port 58546:11: disconnected by user

Disconnected from 192.168.1.5 port 58546

debug1: do_cleanup

debug3: PAM: sshpam_thread_cleanup entering

debug3: mm_request_receive entering

debug1: do_cleanup

debug1: PAM: cleanup

debug1: PAM: closing session

debug1: PAM: deleting credentials

debug3: PAM: sshpam_thread_cleanup entering


Command exit status: 255
Script done on Tue Dec 20 18:50:47 2016

From rodrigc at crodrigues.org  Tue Dec 20 20:56:06 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 20 Dec 2016 19:56:06 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <CAG=rPVdiZSq4N+vx7na2yJMaNwh=AgUoNDBgBq_jNsXs+ghsOA@mail.gmail.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <CAG=rPVc-ahNjN+br2MV-S5rTng71Y1jvR94oXJaZed+CZhskxw@mail.gmail.com>
 <E464AABC-DB66-44E6-9482-594254B907EA@twistedmatrix.com>
 <CAG=rPVdKNnD-gs3Aj+20HG-5BLJOmh7KEPUab5fD2A6P=ME96Q@mail.gmail.com>
 <720D721B-8360-43BE-8371-2DE572E18DF4@twistedmatrix.com>
 <CAG=rPVe1=ZWf19tFbJxuvLzpB62w5JSXf+cJ7hFYC83Xac7c=A@mail.gmail.com>
 <A224B127-D889-485E-8007-3D16592305E6@twistedmatrix.com>
 <CAG=rPVdiZSq4N+vx7na2yJMaNwh=AgUoNDBgBq_jNsXs+ghsOA@mail.gmail.com>
Message-ID: <CAG=rPVehfLoCvi4_onFk0MjnPr__Kafm3or=OfmRYLgvvC4EYw@mail.gmail.com>

On Tue, Dec 20, 2016 at 7:32 PM, Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

> On Tue, Dec 20, 2016 at 6:24 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
> wrote:
>
>>
>>
>
>>
>> So... is this because buildbot.twistedmatrix.com has an RSA key as well,
>> and when it offers it, our checking isn't correctly comparing the type
>> before deciding that it doesn't match, or allowing for multiple keys?  I
>> notice that if I manually add the RSA key and delete the ECDSA key it seems
>> to work.
>>
>> -g
>>
>>
>
> Yes, that is part of it.
> What is happening is that the conch client sends a MSG_KEXINIT
> packet to the server to negotatiate what the host key should be.
> If I use an OpenSSH ssh client to connect to OpenSSH sshd server,
> the negotiated host key algorithm is ecdsa-sha2-nistp256.
>
> If I use a conch client to connect to the OpenSSH sshd server,
> the negotiated host key algorithm is ssh-rsa.
>
> I started a test instance of the sshd server with:
>
> /usr/sbin/sshd -p 9000 -d -d -d
>
> and captured the logs (see attached).
>
> I think some problems are:
>   (1)  conch proposes a list of *host key algorithms* in a different
> order than
>          OpenSSH.  It shouldn't matter, but conch proposes ssh-rsa first,
>          while OpenSSH proposes it last.
>   (2)  OpenSSH client seems to be able to receive multiple host keys back
>          from the server, and can match the one it has.
>
> --
> Craig
>
>
Here are the proper logs.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161220/cf5edc71/attachment-0002.html>
-------------- next part --------------
Script started on Tue Dec 20 18:50:57 2016
Command: /usr/sbin/sshd -p 9000 -d -d -d
debug2: load_server_config: filename /etc/ssh/sshd_config

debug2: load_server_config: done config len = 197

debug2: parse_server_config: config /etc/ssh/sshd_config len 197

debug3: /etc/ssh/sshd_config:49 setting PermitRootLogin yes

debug3: /etc/ssh/sshd_config:131 setting Subsystem sftp	/usr/libexec/sftp-server

debug1: sshd version OpenSSH_7.2, OpenSSL 1.0.2j-freebsd  26 Sep 2016

debug1: private host key #0: ssh-rsa SHA256:73H4OcFhNGdHY2sVsbBOVVOudub2EkvfYNlwpxWM1Xw

debug1: private host key #1: ssh-dss SHA256:6BQ11F0ejGONS1+d4O63t7fyyGKaEyW33a73x5G/3ic

debug1: private host key #2: ecdsa-sha2-nistp256 SHA256:jkq3WG/EU+yyyg8xemPshcErRvPYmSbU202opbYgzHU

debug1: private host key #3: ssh-ed25519 SHA256:59NbS+jIUH9ADjLpk5nQLKq229hrx89QpAd3Z3Ts6j4

debug1: rexec_argv[0]='/usr/sbin/sshd'

debug1: rexec_argv[1]='-p'

debug1: rexec_argv[2]='9000'

debug1: rexec_argv[3]='-d'

debug1: rexec_argv[4]='-d'

debug1: rexec_argv[5]='-d'

debug2: fd 3 setting O_NONBLOCK

debug3: Fssh_sock_set_v6only: set socket 3 IPV6_V6ONLY

debug1: Bind to port 9000 on ::.

debug1: Server TCP RWIN socket size: 65536

Server listening on :: port 9000.

debug2: fd 4 setting O_NONBLOCK

debug1: Bind to port 9000 on 0.0.0.0.

debug1: Server TCP RWIN socket size: 65536

Server listening on 0.0.0.0 port 9000.

debug1: fd 5 clearing O_NONBLOCK

debug1: Server will not fork when running in debugging mode.

debug3: send_rexec_state: entering fd = 8 config len 197

debug3: ssh_msg_send: type 0

debug3: send_rexec_state: done

debug1: rexec start in 5 out 5 newsock 5 pipe -1 sock 8

debug1: inetd sockets after dupping: 3, 3

debug1: res_init()

Connection from 192.168.1.5 port 58547 on 192.168.1.2 port 9000

debug1: Client protocol version 2.0; client software version Twisted

debug1: no match: Twisted

debug1: Enabling compatibility mode for protocol 2.0

debug1: Local version string SSH-2.0-OpenSSH_7.2 FreeBSD-20160310

debug2: fd 3 setting O_NONBLOCK

debug3: ssh_sandbox_init: preparing capsicum sandbox

debug2: Network child is on pid 69006

debug3: preauth child monitor started

debug3: privsep user:group 22:22 [preauth]

debug1: permanently_set_uid: 22/22 [preauth]

debug3: list_hostkey_types: ssh-dss key not permitted by HostkeyAlgorithms [preauth]

debug1: list_hostkey_types: ssh-rsa,rsa-sha2-512,rsa-sha2-256,ecdsa-sha2-nistp256,ssh-ed25519 [preauth]

debug3: send packet: type 20 [preauth]

debug1: SSH2_MSG_KEXINIT sent [preauth]

debug3: receive packet: type 20 [preauth]

debug1: SSH2_MSG_KEXINIT received [preauth]

debug2: local server KEXINIT proposal [preauth]

debug2: KEX algorithms: curve25519-sha256 at libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1 [preauth]

debug2: host key algorithms: ssh-rsa,rsa-sha2-512,rsa-sha2-256,ecdsa-sha2-nistp256,ssh-ed25519 [preauth]

debug2: ciphers ctos: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc [preauth]

debug2: ciphers stoc: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc [preauth]

debug2: MACs ctos: umac-64-etm at openssh.com,umac-128-etm at openssh.com,hmac-sha2-256-etm at openssh.com,hmac-sha2-512-etm at openssh.com,hmac-sha1-etm at openssh.com,umac-64 at openssh.com,umac-128 at openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 [preauth]

debug2: MACs stoc: umac-64-etm at openssh.com,umac-128-etm at openssh.com,hmac-sha2-256-etm at openssh.com,hmac-sha2-512-etm at openssh.com,hmac-sha1-etm at openssh.com,umac-64 at openssh.com,umac-128 at openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 [preauth]

debug2: compression ctos: none,zlib at openssh.com [preauth]

debug2: compression stoc: none,zlib at openssh.com [preauth]

debug2: languages ctos:  [preauth]

debug2: languages stoc:  [preauth]

debug2: first_kex_follows 0  [preauth]

debug2: reserved 0  [preauth]

debug2: peer client KEXINIT proposal [preauth]

debug2: KEX algorithms: ecdh-sha2-nistp224,ecdh-sha2-nistp256,ecdh-sha2-nistk233,ecdh-sha2-nistb233,ecdh-sha2-nistk163,ecdh-sha2-nistp384,ecdh-sha2-nistk409,ecdh-sha2-nistk283,ecdh-sha2-nistb409,ecdh-sha2-nistt571,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group1-sha1,diffie-hellman-group14-sha1 [preauth]

debug2: host key algorithms: ssh-rsa,ssh-dss,ecdsa-sha2-nistp224,ecdsa-sha2-nistp256,ecdsa-sha2-nistk233,ecdsa-sha2-nistb233,ecdsa-sha2-nistk163,ecdsa-sha2-nistp384,ecdsa-sha2-nistk409,ecdsa-sha2-nistk283,ecdsa-sha2-nistb409,ecdsa-sha2-nistt571,ecdsa-sha2-nistp521 [preauth]

debug2: ciphers ctos: aes256-ctr,aes256-cbc,aes192-ctr,aes192-cbc,aes128-ctr,aes128-cbc,cast128-ctr,cast128-cbc,blowfish-cbc,3des-cbc [preauth]

debug2: ciphers stoc: aes256-ctr,aes256-cbc,aes192-ctr,aes192-cbc,aes128-ctr,aes128-cbc,cast128-ctr,cast128-cbc,blowfish-cbc,3des-cbc [preauth]

debug2: MACs ctos: hmac-sha2-512,hmac-sha2-384,hmac-sha2-256,hmac-sha1,hmac-md5 [preauth]

debug2: MACs stoc: hmac-sha2-512,hmac-sha2-384,hmac-sha2-256,hmac-sha1,hmac-md5 [preauth]

debug2: compression ctos: none,zlib [preauth]

debug2: compression stoc: none,zlib [preauth]

debug2: languages ctos:  [preauth]

debug2: languages stoc:  [preauth]

debug2: first_kex_follows 0  [preauth]

debug2: reserved 0  [preauth]

debug1: kex: algorithm: ecdh-sha2-nistp256 [preauth]

debug1: kex: host key algorithm: ssh-rsa [preauth]

debug1: kex: client->server cipher: aes256-ctr MAC: hmac-sha2-512 compression: none [preauth]

debug1: kex: server->client cipher: aes256-ctr MAC: hmac-sha2-512 compression: none [preauth]

debug1: expecting SSH2_MSG_KEX_ECDH_INIT [preauth]

debug3: receive packet: type 30 [preauth]

debug3: mm_key_sign entering [preauth]

debug3: mm_request_send entering: type 6 [preauth]

debug3: mm_key_sign: waiting for MONITOR_ANS_SIGN [preauth]

debug3: mm_request_receive_expect entering: type 7 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 6

debug3: mm_answer_sign

debug3: mm_answer_sign: hostkey proof signature 0x804079b40(271)

debug3: mm_request_send entering: type 7

debug2: monitor_read: 6 used once, disabling now

debug3: send packet: type 31 [preauth]

debug3: send packet: type 21 [preauth]

debug2: set_newkeys: mode 1 [preauth]

debug1: rekey after 4294967296 blocks [preauth]

debug1: SSH2_MSG_NEWKEYS sent [preauth]

debug1: expecting SSH2_MSG_NEWKEYS [preauth]

debug3: receive packet: type 1 [preauth]

Received disconnect from 192.168.1.5 port 58547:9: bbbad host key [preauth]

Disconnected from 192.168.1.5 port 58547 [preauth]

debug1: do_cleanup [preauth]

debug3: PAM: sshpam_thread_cleanup entering [preauth]

debug1: monitor_read_log: child log fd closed

debug3: mm_request_receive entering

debug1: do_cleanup

debug3: PAM: sshpam_thread_cleanup entering

debug1: Killing privsep child 69006


Command exit status: 255
Script done on Tue Dec 20 18:51:03 2016
-------------- next part --------------
Script started on Tue Dec 20 18:50:42 2016
Command: /usr/sbin/sshd -p 9000 -d -d -d
debug2: load_server_config: filename /etc/ssh/sshd_config

debug2: load_server_config: done config len = 197

debug2: parse_server_config: config /etc/ssh/sshd_config len 197

debug3: /etc/ssh/sshd_config:49 setting PermitRootLogin yes

debug3: /etc/ssh/sshd_config:131 setting Subsystem sftp	/usr/libexec/sftp-server

debug1: sshd version OpenSSH_7.2, OpenSSL 1.0.2j-freebsd  26 Sep 2016

debug1: private host key #0: ssh-rsa SHA256:73H4OcFhNGdHY2sVsbBOVVOudub2EkvfYNlwpxWM1Xw

debug1: private host key #1: ssh-dss SHA256:6BQ11F0ejGONS1+d4O63t7fyyGKaEyW33a73x5G/3ic

debug1: private host key #2: ecdsa-sha2-nistp256 SHA256:jkq3WG/EU+yyyg8xemPshcErRvPYmSbU202opbYgzHU

debug1: private host key #3: ssh-ed25519 SHA256:59NbS+jIUH9ADjLpk5nQLKq229hrx89QpAd3Z3Ts6j4

debug1: rexec_argv[0]='/usr/sbin/sshd'

debug1: rexec_argv[1]='-p'

debug1: rexec_argv[2]='9000'

debug1: rexec_argv[3]='-d'

debug1: rexec_argv[4]='-d'

debug1: rexec_argv[5]='-d'

debug2: fd 3 setting O_NONBLOCK

debug3: Fssh_sock_set_v6only: set socket 3 IPV6_V6ONLY

debug1: Bind to port 9000 on ::.

debug1: Server TCP RWIN socket size: 65536

Server listening on :: port 9000.

debug2: fd 4 setting O_NONBLOCK

debug1: Bind to port 9000 on 0.0.0.0.

debug1: Server TCP RWIN socket size: 65536

Server listening on 0.0.0.0 port 9000.

debug1: fd 5 clearing O_NONBLOCK

debug1: Server will not fork when running in debugging mode.

debug3: send_rexec_state: entering fd = 8 config len 197

debug3: ssh_msg_send: type 0

debug3: send_rexec_state: done

debug1: rexec start in 5 out 5 newsock 5 pipe -1 sock 8

debug1: inetd sockets after dupping: 3, 3

debug1: res_init()

Connection from 192.168.1.5 port 58546 on 192.168.1.2 port 9000

debug1: Client protocol version 2.0; client software version OpenSSH_7.2

debug1: match: OpenSSH_7.2 pat OpenSSH* compat 0x04000000

debug1: Enabling compatibility mode for protocol 2.0

debug1: Local version string SSH-2.0-OpenSSH_7.2 FreeBSD-20160310

debug2: fd 3 setting O_NONBLOCK

debug3: ssh_sandbox_init: preparing capsicum sandbox

debug2: Network child is on pid 68979

debug3: preauth child monitor started

debug3: privsep user:group 22:22 [preauth]

debug1: permanently_set_uid: 22/22 [preauth]

debug3: list_hostkey_types: ssh-dss key not permitted by HostkeyAlgorithms [preauth]

debug1: list_hostkey_types: ssh-rsa,rsa-sha2-512,rsa-sha2-256,ecdsa-sha2-nistp256,ssh-ed25519 [preauth]

debug3: send packet: type 20 [preauth]

debug1: SSH2_MSG_KEXINIT sent [preauth]

debug3: receive packet: type 20 [preauth]

debug1: SSH2_MSG_KEXINIT received [preauth]

debug2: local server KEXINIT proposal [preauth]

debug2: KEX algorithms: curve25519-sha256 at libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1 [preauth]

debug2: host key algorithms: ssh-rsa,rsa-sha2-512,rsa-sha2-256,ecdsa-sha2-nistp256,ssh-ed25519 [preauth]

debug2: ciphers ctos: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc [preauth]

debug2: ciphers stoc: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc [preauth]

debug2: MACs ctos: umac-64-etm at openssh.com,umac-128-etm at openssh.com,hmac-sha2-256-etm at openssh.com,hmac-sha2-512-etm at openssh.com,hmac-sha1-etm at openssh.com,umac-64 at openssh.com,umac-128 at openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 [preauth]

debug2: MACs stoc: umac-64-etm at openssh.com,umac-128-etm at openssh.com,hmac-sha2-256-etm at openssh.com,hmac-sha2-512-etm at openssh.com,hmac-sha1-etm at openssh.com,umac-64 at openssh.com,umac-128 at openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 [preauth]

debug2: compression ctos: none,zlib at openssh.com [preauth]

debug2: compression stoc: none,zlib at openssh.com [preauth]

debug2: languages ctos:  [preauth]

debug2: languages stoc:  [preauth]

debug2: first_kex_follows 0  [preauth]

debug2: reserved 0  [preauth]

debug2: peer client KEXINIT proposal [preauth]

debug2: KEX algorithms: curve25519-sha256 at libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,ext-info-c [preauth]

debug2: host key algorithms: ecdsa-sha2-nistp256-cert-v01 at openssh.com,ecdsa-sha2-nistp384-cert-v01 at openssh.com,ecdsa-sha2-nistp521-cert-v01 at openssh.com,ssh-ed25519-cert-v01 at openssh.com,ssh-rsa-cert-v01 at openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519,rsa-sha2-512,rsa-sha2-256,ssh-rsa [preauth]

debug2: ciphers ctos: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,3des-cbc [preauth]

debug2: ciphers stoc: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,3des-cbc [preauth]

debug2: MACs ctos: umac-64-etm at openssh.com,umac-128-etm at openssh.com,hmac-sha2-256-etm at openssh.com,hmac-sha2-512-etm at openssh.com,hmac-sha1-etm at openssh.com,umac-64 at openssh.com,umac-128 at openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 [preauth]

debug2: MACs stoc: umac-64-etm at openssh.com,umac-128-etm at openssh.com,hmac-sha2-256-etm at openssh.com,hmac-sha2-512-etm at openssh.com,hmac-sha1-etm at openssh.com,umac-64 at openssh.com,umac-128 at openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 [preauth]

debug2: compression ctos: none,zlib at openssh.com,zlib [preauth]

debug2: compression stoc: none,zlib at openssh.com,zlib [preauth]

debug2: languages ctos:  [preauth]

debug2: languages stoc:  [preauth]

debug2: first_kex_follows 0  [preauth]

debug2: reserved 0  [preauth]

debug1: kex: algorithm: curve25519-sha256 at libssh.org [preauth]

debug1: kex: host key algorithm: ecdsa-sha2-nistp256 [preauth]

debug1: kex: client->server cipher: chacha20-poly1305 at openssh.com MAC: <implicit> compression: none [preauth]

debug1: kex: server->client cipher: chacha20-poly1305 at openssh.com MAC: <implicit> compression: none [preauth]

debug1: expecting SSH2_MSG_KEX_ECDH_INIT [preauth]

debug3: receive packet: type 30 [preauth]

debug3: mm_key_sign entering [preauth]

debug3: mm_request_send entering: type 6 [preauth]

debug3: mm_key_sign: waiting for MONITOR_ANS_SIGN [preauth]

debug3: mm_request_receive_expect entering: type 7 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 6

debug3: mm_answer_sign

debug3: mm_answer_sign: hostkey proof signature 0x8040411c0(99)

debug3: mm_request_send entering: type 7

debug2: monitor_read: 6 used once, disabling now

debug3: send packet: type 31 [preauth]

debug3: send packet: type 21 [preauth]

debug2: set_newkeys: mode 1 [preauth]

debug1: rekey after 134217728 blocks [preauth]

debug1: SSH2_MSG_NEWKEYS sent [preauth]

debug1: expecting SSH2_MSG_NEWKEYS [preauth]

debug3: send packet: type 7 [preauth]

debug3: receive packet: type 21 [preauth]

debug2: set_newkeys: mode 0 [preauth]

debug1: rekey after 134217728 blocks [preauth]

debug1: SSH2_MSG_NEWKEYS received [preauth]

debug1: KEX done [preauth]

debug3: receive packet: type 5 [preauth]

debug3: send packet: type 6 [preauth]

debug3: receive packet: type 50 [preauth]

debug3: Trying to reverse map address 192.168.1.5. [preauth]

debug1: userauth-request for user rodrigc service ssh-connection method none [preauth]

debug1: attempt 0 failures 0 [preauth]

debug3: mm_getpwnamallow entering [preauth]

debug3: mm_request_send entering: type 8 [preauth]

debug3: mm_getpwnamallow: waiting for MONITOR_ANS_PWNAM [preauth]

debug3: mm_request_receive_expect entering: type 9 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 8

debug3: mm_answer_pwnamallow

debug3: Trying to reverse map address 192.168.1.5.

debug2: parse_server_config: config reprocess config len 197

debug3: mm_answer_pwnamallow: sending MONITOR_ANS_PWNAM: 1

debug3: mm_request_send entering: type 9

debug2: monitor_read: 8 used once, disabling now

debug2: input_userauth_request: setting up authctxt for rodrigc [preauth]

debug3: mm_start_pam entering [preauth]

debug3: mm_request_send entering: type 100 [preauth]

debug3: mm_inform_authserv entering [preauth]

debug3: mm_request_send entering: type 4 [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 100

debug1: PAM: initializing for "rodrigc"

debug1: PAM: setting PAM_RHOST to "192.168.1.5"

debug2: monitor_read: 100 used once, disabling now

debug2: input_userauth_request: try method none [preauth]

debug3: userauth_finish: failure partial=0 next methods="publickey,keyboard-interactive" [preauth]

debug3: send packet: type 51 [preauth]

debug3: receive packet: type 50 [preauth]

debug1: userauth-request for user rodrigc service ssh-connection method publickey [preauth]

debug1: attempt 1 failures 0 [preauth]

debug2: input_userauth_request: try method publickey [preauth]

debug1: userauth_pubkey: test whether pkalg/pkblob are acceptable for RSA SHA256:m2nfEMZA8SWbLCwY40QzK5CSxEAuW0H+aUC4g8jOWFo [preauth]

debug3: mm_key_allowed entering [preauth]

debug3: mm_request_send entering: type 22 [preauth]

debug3: mm_key_allowed: waiting for MONITOR_ANS_KEYALLOWED [preauth]

debug3: mm_request_receive_expect entering: type 23 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 4

debug3: mm_answer_authserv: service=ssh-connection, style=

debug2: monitor_read: 4 used once, disabling now

debug3: mm_request_receive entering

debug3: monitor_read: checking request 22

debug3: mm_answer_keyallowed entering

debug3: mm_answer_keyallowed: key_from_blob: 0x80401b540

debug1: trying public key file /opt2/home/rodrigc/.ssh/authorized_keys

debug1: fd 4 clearing O_NONBLOCK

debug2: user_key_allowed: check options: 'ssh-dss AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug2: user_key_allowed: advance: 'AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug2: key not found

debug1: trying public key file /opt2/home/rodrigc/.ssh/authorized_keys2

debug1: Could not open authorized keys '/opt2/home/rodrigc/.ssh/authorized_keys2': No such file or directory

Failed publickey for rodrigc from 192.168.1.5 port 58546 ssh2: RSA SHA256:m2nfEMZA8SWbLCwY40QzK5CSxEAuW0H+aUC4g8jOWFo

debug3: mm_answer_keyallowed: key 0x80401b540 is not allowed

debug3: mm_request_send entering: type 23

debug2: userauth_pubkey: authenticated 0 pkalg rsa-sha2-512 [preauth]

debug3: userauth_finish: failure partial=0 next methods="publickey,keyboard-interactive" [preauth]

debug3: send packet: type 51 [preauth]

debug3: receive packet: type 50 [preauth]

debug1: userauth-request for user rodrigc service ssh-connection method publickey [preauth]

debug1: attempt 2 failures 1 [preauth]

debug2: input_userauth_request: try method publickey [preauth]

debug1: userauth_pubkey: test whether pkalg/pkblob are acceptable for RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc [preauth]

debug3: mm_key_allowed entering [preauth]

debug3: mm_request_send entering: type 22 [preauth]

debug3: mm_key_allowed: waiting for MONITOR_ANS_KEYALLOWED [preauth]

debug3: mm_request_receive_expect entering: type 23 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 22

debug3: mm_answer_keyallowed entering

debug3: mm_answer_keyallowed: key_from_blob: 0x80401b540

debug1: trying public key file /opt2/home/rodrigc/.ssh/authorized_keys

debug1: fd 4 clearing O_NONBLOCK

debug2: user_key_allowed: check options: 'ssh-dss AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug2: user_key_allowed: advance: 'AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug1: matching key found: file /opt2/home/rodrigc/.ssh/authorized_keys, line 2 RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc

debug3: mm_answer_keyallowed: key 0x80401b540 is allowed

debug3: mm_request_send entering: type 23

debug3: send packet: type 60 [preauth]

debug2: userauth_pubkey: authenticated 0 pkalg rsa-sha2-512 [preauth]

Postponed publickey for rodrigc from 192.168.1.5 port 58546 ssh2 [preauth]

debug3: receive packet: type 50 [preauth]

debug1: userauth-request for user rodrigc service ssh-connection method publickey [preauth]

debug1: attempt 3 failures 1 [preauth]

debug2: input_userauth_request: try method publickey [preauth]

debug3: userauth_pubkey: have signature for RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc [preauth]

debug3: mm_key_allowed entering [preauth]

debug3: mm_request_send entering: type 22 [preauth]

debug3: mm_key_allowed: waiting for MONITOR_ANS_KEYALLOWED [preauth]

debug3: mm_request_receive_expect entering: type 23 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 22

debug3: mm_answer_keyallowed entering

debug3: mm_answer_keyallowed: key_from_blob: 0x80401b540

debug1: trying public key file /opt2/home/rodrigc/.ssh/authorized_keys

debug1: fd 4 clearing O_NONBLOCK

debug2: user_key_allowed: check options: 'ssh-dss AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug2: user_key_allowed: advance: 'AAAAB3NzaC1kc3MAAACBAO00EJjM71Kbjn+PUMQIvLi9OSVqlhwrKuFLTimAfDiRRXrGuTzOuzaYFb5SXQvJDdzGl1B1nSuzJLbTROfqIL/Mc3TxLBo1LeZjeTyNlYgXO+Me/keDygqcacHWDy+a2zXIYBqmwLnACF4B3lw5FUpySxwwwzJwdz8AaIfeMWhdAAAAFQChfRlm8UUrKI00Xtg/FfA+ajEfPQAAAIB2vKNP6T8QCsA6Hx82CQRP3Q1O/VsBOKqgQdgOf3a/1/rnxDFQHFtKMrCVgQu+M8SPOMOAub+Q3T07YEKhhFrONcRojARwzfYp6AJ35tZ70m8/5QrVXzhDM3HnCtyLv+aTatuFoHzOl8n9VxgTEieWQ6IekVPRtaMoSXKAgeX3eAAAAIBpjpXQH+mLK6a6xYwWxjjpemnG2I2luTR/NFWzdS4A0m5+qBEaKZmSwDKA/6jd3yG9MonRO5kmQhaS/bnXRp+vIH4i9E69XsCKsC53hGgGKS+V82rsrASO0snncRrtwiXljF/E5+4ZDSI2lPZeSbhnJdLnaOO86C62CfZN+Hocqw== rodrigc_android
'

debug1: matching key found: file /opt2/home/rodrigc/.ssh/authorized_keys, line 2 RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc

debug3: mm_answer_keyallowed: key 0x80401b540 is allowed

debug3: mm_request_send entering: type 23

debug3: mm_key_verify entering [preauth]

debug3: mm_request_send entering: type 24 [preauth]

debug3: mm_key_verify: waiting for MONITOR_ANS_KEYVERIFY [preauth]

debug3: mm_request_receive_expect entering: type 25 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_request_receive entering

debug3: monitor_read: checking request 24

debug3: mm_answer_keyverify: key 0x80401b540 signature verified

debug3: mm_request_send entering: type 25

debug3: mm_request_receive_expect entering: type 102

debug3: mm_request_receive entering

debug1: do_pam_account: called

debug3: PAM: do_pam_account pam_acct_mgmt = 0 (success)

debug3: mm_request_send entering: type 103

Accepted publickey for rodrigc from 192.168.1.5 port 58546 ssh2: RSA SHA256:a3jm5HIWdUdTsXuwT4LVYwLzViTu08OdGircV2/wDPc

debug1: monitor_child_preauth: rodrigc has been authenticated by privileged process

debug3: mm_get_keystate: Waiting for new keys

debug3: mm_request_receive_expect entering: type 26

debug3: mm_request_receive entering

debug3: mm_get_keystate: GOT new keys

debug2: userauth_pubkey: authenticated 1 pkalg rsa-sha2-512 [preauth]

debug3: mm_do_pam_account entering [preauth]

debug3: mm_request_send entering: type 102 [preauth]

debug3: mm_request_receive_expect entering: type 103 [preauth]

debug3: mm_request_receive entering [preauth]

debug3: mm_do_pam_account returning 1 [preauth]

debug3: send packet: type 52 [preauth]

debug3: mm_request_send entering: type 26 [preauth]

debug3: mm_send_keystate: Finished sending state [preauth]

debug1: monitor_read_log: child log fd closed

debug3: mm_share_sync: Share sync

debug3: mm_share_sync: Share sync end

debug3: ssh_sandbox_parent_finish: finished

debug1: PAM: establishing credentials

debug3: PAM: opening session

User child is on pid 68980

debug1: PAM: establishing credentials

debug3: monitor_apply_keystate: packet_set_state

debug2: set_newkeys: mode 0

debug1: rekey after 134217728 blocks

debug2: set_newkeys: mode 1

debug1: rekey after 134217728 blocks

debug1: ssh_packet_set_postauth: called

debug3: Fssh_ssh_packet_set_state: done

debug3: notify_hostkeys: key 0: ssh-rsa SHA256:73H4OcFhNGdHY2sVsbBOVVOudub2EkvfYNlwpxWM1Xw

debug3: notify_hostkeys: key 1: ssh-dss SHA256:6BQ11F0ejGONS1+d4O63t7fyyGKaEyW33a73x5G/3ic

debug3: notify_hostkeys: key 2: ecdsa-sha2-nistp256 SHA256:jkq3WG/EU+yyyg8xemPshcErRvPYmSbU202opbYgzHU

debug3: notify_hostkeys: key 3: ssh-ed25519 SHA256:59NbS+jIUH9ADjLpk5nQLKq229hrx89QpAd3Z3Ts6j4

debug3: notify_hostkeys: sent 4 hostkeys

debug3: send packet: type 80

debug1: Entering interactive session for SSH2.

debug2: fd 6 setting O_NONBLOCK

debug2: fd 7 setting O_NONBLOCK

debug1: server_init_dispatch_20

debug3: receive packet: type 90

debug1: server_input_channel_open: ctype session rchan 0 win 1048576 max 16384

debug1: input_session_request

debug1: channel 0: new [server-session]

debug2: session_new: allocate (allocated 0 max 10)

debug3: session_unused: session id 0 unused

debug1: session_new: session 0

debug1: session_open: channel 0

debug1: session_open: session 0: link with channel 0

debug1: server_input_channel_open: confirm session

debug3: send packet: type 91

debug3: receive packet: type 80

debug1: server_input_global_request: rtype no-more-sessions at openssh.com want_reply 0

debug3: receive packet: type 98

debug1: server_input_channel_req: channel 0 request pty-req reply 1

debug1: session_by_channel: session 0 channel 0

debug1: session_input_channel_req: session 0 req pty-req

debug1: Allocating pty.

debug3: mm_request_send entering: type 28

debug3: mm_pty_allocate: waiting for MONITOR_ANS_PTY

debug3: mm_request_receive_expect entering: type 29

debug3: mm_request_receive entering

debug3: mm_request_receive entering

debug3: monitor_read: checking request 28

debug3: mm_answer_pty entering

debug2: session_new: allocate (allocated 0 max 10)

debug3: session_unused: session id 0 unused

debug1: session_new: session 0

debug3: mm_request_send entering: type 29

debug3: mm_answer_pty: tty /dev/pts/4 ptyfd 5

debug1: session_pty_req: session 0 alloc /dev/pts/4

debug3: send packet: type 99

debug3: receive packet: type 98

debug1: server_input_channel_req: channel 0 request env reply 0

debug1: session_by_channel: session 0 channel 0

debug1: session_input_channel_req: session 0 req env

debug2: Ignoring env request LANG: disallowed name

debug3: receive packet: type 98

debug1: server_input_channel_req: channel 0 request shell reply 1

debug1: session_by_channel: session 0 channel 0

debug1: session_input_channel_req: session 0 req shell

Starting session: shell on pts/4 for rodrigc from 192.168.1.5 port 58546 id 0

debug2: fd 3 setting TCP_NODELAY

debug3: Fssh_ssh_packet_set_tos: set IP_TOS 0x10

debug2: channel 0: rfd 10 isatty

debug2: fd 10 setting O_NONBLOCK

debug3: fd 8 is O_NONBLOCK

debug3: send packet: type 99

debug1: Setting controlling tty using TIOCSCTTY.

debug2: channel 0: read<=0 rfd 10 len 0

debug2: channel 0: read failed

debug2: channel 0: close_read

debug2: channel 0: input open -> drain

debug2: channel 0: ibuf empty

debug2: channel 0: send eof

debug3: send packet: type 96

debug2: channel 0: input drain -> closed

debug1: Received SIGCHLD.

debug1: session_by_pid: pid 68981

debug1: session_exit_message: session 0 channel 0 pid 68981

debug2: channel 0: request exit-status confirm 0

debug3: send packet: type 98

debug1: session_exit_message: release channel 0

debug2: channel 0: write failed

debug2: channel 0: close_write

debug2: channel 0: send eow

debug3: send packet: type 98

debug2: channel 0: output open -> closed

debug3: mm_request_send entering: type 30

debug2: channel 0: send close

debug3: send packet: type 97

debug3: channel 0: will not send data after close

debug2: notify_done: reading

debug3: mm_request_receive entering

debug3: channel 0: will not send data after close

debug3: monitor_read: checking request 30

debug3: mm_answer_pty_cleanup entering

debug1: session_by_tty: session 0 tty /dev/pts/4

debug3: mm_session_close: session 0 pid 68980

debug3: mm_session_close: tty /dev/pts/4 ptyfd 5

debug1: session_pty_cleanup: session 0 release /dev/pts/4

debug3: session_unused: session id 0 unused

debug3: receive packet: type 97

debug2: channel 0: rcvd close

debug3: channel 0: will not send data after close

debug2: channel 0: is dead

debug2: channel 0: gc: notify user

debug1: session_by_channel: session 0 channel 0

debug1: session_close_by_channel: channel 0 child 0

Close session: user rodrigc from 192.168.1.5 port 58546 id 0

debug3: session_unused: session id 0 unused

debug2: channel 0: gc: user detached

debug2: channel 0: is dead

debug2: channel 0: garbage collecting

debug1: channel 0: free: server-session, nchannels 1

debug3: channel 0: status: The following connections are open:

  #0 server-session (t4 r0 i3/0 o3/0 fd -1/-1 cc -1)



debug3: receive packet: type 1

Received disconnect from 192.168.1.5 port 58546:11: disconnected by user

Disconnected from 192.168.1.5 port 58546

debug1: do_cleanup

debug3: PAM: sshpam_thread_cleanup entering

debug3: mm_request_receive entering

debug1: do_cleanup

debug1: PAM: cleanup

debug1: PAM: closing session

debug1: PAM: deleting credentials

debug3: PAM: sshpam_thread_cleanup entering


Command exit status: 255
Script done on Tue Dec 20 18:50:47 2016

From glyph at twistedmatrix.com  Wed Dec 21 17:45:40 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 21 Dec 2016 16:45:40 -0800
Subject: [Twisted-Python] hmac-sha2-512 - Corrupted MAC on input with
 OpenSSH
In-Reply-To: <7aa77b23.1f5e.1591f6015fc.Coremail.chenjianhappy2008@126.com>
References: <7aa77b23.1f5e.1591f6015fc.Coremail.chenjianhappy2008@126.com>
Message-ID: <9E235CCF-3098-4E57-99F2-870A9FED091E@twistedmatrix.com>

Hi Jianchen,

As I said on stack overflow, you will need to upgrade to a more recent version of Twisted to get a version with that bug fixed.  If it's still a problem in a current version, you'll need to provide more details, ideally a short SSCCE http://sscce.org explaining how to get a broken SSH server with conch.

Thanks for using Twisted & Conch - I hope a simple upgrade will fix it for you!

-glyph

> On Dec 20, 2016, at 7:15 PM, 陈健 <chenjianhappy2008 at 126.com> wrote:
> 
>  hi:
>     I write a SSH server with Twisted(15.5.0)  Conch.  But it  don't support hmac-sha2-512 MAC algorithms
> 
> .  However I see this problem has been fixed in https://twistedmatrix.com/trac/ticket/8108 <https://twistedmatrix.com/trac/ticket/8108> .  I asked the question in http://stackoverflow.com/questions/41254398/twisted-hmac-sha2-512-corrupted-mac-on-input-with-openssh <http://stackoverflow.com/questions/41254398/twisted-hmac-sha2-512-corrupted-mac-on-input-with-openssh> .
> Best regards,
> 
>  ---jianchen
> 
> 
> 
>  
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161221/2e291254/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Dec 21 17:46:34 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 21 Dec 2016 16:46:34 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <CAG=rPVdiZSq4N+vx7na2yJMaNwh=AgUoNDBgBq_jNsXs+ghsOA@mail.gmail.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <CAG=rPVc-ahNjN+br2MV-S5rTng71Y1jvR94oXJaZed+CZhskxw@mail.gmail.com>
 <E464AABC-DB66-44E6-9482-594254B907EA@twistedmatrix.com>
 <CAG=rPVdKNnD-gs3Aj+20HG-5BLJOmh7KEPUab5fD2A6P=ME96Q@mail.gmail.com>
 <720D721B-8360-43BE-8371-2DE572E18DF4@twistedmatrix.com>
 <CAG=rPVe1=ZWf19tFbJxuvLzpB62w5JSXf+cJ7hFYC83Xac7c=A@mail.gmail.com>
 <A224B127-D889-485E-8007-3D16592305E6@twistedmatrix.com>
 <CAG=rPVdiZSq4N+vx7na2yJMaNwh=AgUoNDBgBq_jNsXs+ghsOA@mail.gmail.com>
Message-ID: <7B22DAAB-497F-49EC-9E31-64C061F6C8FE@twistedmatrix.com>


> On Dec 20, 2016, at 7:32 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> On Tue, Dec 20, 2016 at 6:24 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
>  
> 
> So... is this because buildbot.twistedmatrix.com <http://buildbot.twistedmatrix.com/> has an RSA key as well, and when it offers it, our checking isn't correctly comparing the type before deciding that it doesn't match, or allowing for multiple keys?  I notice that if I manually add the RSA key and delete the ECDSA key it seems to work.
> 
> -g
> 
> 
> 
> Yes, that is part of it.
> What is happening is that the conch client sends a MSG_KEXINIT
> packet to the server to negotatiate what the host key should be.
> If I use an OpenSSH ssh client to connect to OpenSSH sshd server,
> the negotiated host key algorithm is ecdsa-sha2-nistp256.
> 
> If I use a conch client to connect to the OpenSSH sshd server,
> the negotiated host key algorithm is ssh-rsa.
> 
> I started a test instance of the sshd server with:
> 
> /usr/sbin/sshd -p 9000 -d -d -d
> 
> and captured the logs (see attached).
> 
> I think some problems are:
>   (1)  conch proposes a list of host key algorithms in a different order than
>          OpenSSH.  It shouldn't matter, but conch proposes ssh-rsa first,
>          while OpenSSH proposes it last.
>   (2)  OpenSSH client seems to be able to receive multiple host keys back
>          from the server, and can match the one it has.

Can you file a new ticket for each of these?  The ordering thing seems super low priority, but not being able to receive multiple host keys is definitely a spec violation.

Thanks for figuring it out,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161221/2adc0b43/attachment-0002.html>

From rodrigc at crodrigues.org  Wed Dec 21 18:40:19 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 21 Dec 2016 17:40:19 -0800
Subject: [Twisted-Python] conch problem with ecdsa-sha2-nistp256 host
	key?
In-Reply-To: <7B22DAAB-497F-49EC-9E31-64C061F6C8FE@twistedmatrix.com>
References: <CAG=rPVeh1V-knqaCq=hmhhbZVbnTEcibTHWfY6J07=QhMV2t_Q@mail.gmail.com>
 <20161202030124.GA19532@hammal>
 <1553C08C-AA06-4FB3-90DC-11D881295764@twistedmatrix.com>
 <CAG=rPVc-ahNjN+br2MV-S5rTng71Y1jvR94oXJaZed+CZhskxw@mail.gmail.com>
 <E464AABC-DB66-44E6-9482-594254B907EA@twistedmatrix.com>
 <CAG=rPVdKNnD-gs3Aj+20HG-5BLJOmh7KEPUab5fD2A6P=ME96Q@mail.gmail.com>
 <720D721B-8360-43BE-8371-2DE572E18DF4@twistedmatrix.com>
 <CAG=rPVe1=ZWf19tFbJxuvLzpB62w5JSXf+cJ7hFYC83Xac7c=A@mail.gmail.com>
 <A224B127-D889-485E-8007-3D16592305E6@twistedmatrix.com>
 <CAG=rPVdiZSq4N+vx7na2yJMaNwh=AgUoNDBgBq_jNsXs+ghsOA@mail.gmail.com>
 <7B22DAAB-497F-49EC-9E31-64C061F6C8FE@twistedmatrix.com>
Message-ID: <CAG=rPVdJFnfeytFZ0j8nYt8NhBAi5SQKmBy7c4aaQ=g_Gq4jTA@mail.gmail.com>

On Wed, Dec 21, 2016 at 4:46 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
>
> Can you file a new ticket for each of these?  The ordering thing seems
> super low priority, but not being able to receive multiple host keys is
> definitely a spec violation.
>
> Thanks for figuring it out,
>
>
Can you try these two patches, combined in one workspace ?

https://github.com/twisted/twisted/pull/640
https://github.com/twisted/twisted/pull/642

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161221/47ee97aa/attachment-0002.html>

From chenjianhappy2008 at 126.com  Wed Dec 21 19:57:46 2016
From: chenjianhappy2008 at 126.com (=?GBK?B?s8K9oQ==?=)
Date: Thu, 22 Dec 2016 10:57:46 +0800 (CST)
Subject: [Twisted-Python] hmac-sha2-512 - Corrupted MAC on input with
 OpenSSH
In-Reply-To: <9E235CCF-3098-4E57-99F2-870A9FED091E@twistedmatrix.com>
References: <7aa77b23.1f5e.1591f6015fc.Coremail.chenjianhappy2008@126.com>
 <9E235CCF-3098-4E57-99F2-870A9FED091E@twistedmatrix.com>
Message-ID: <4995f3d9.3b42.15924768e27.Coremail.chenjianhappy2008@126.com>

thank you for your reply！I have updated to the latest version of Twisted 16.6.0, but the problem remains.  More detailed debugging information with -vvv in http://stackoverflow.com/questions/41254398/twisted-hmac-sha2-512-corrupted-mac-on-input-with-openssh  . I really do not know how to do it now.


Best regards,
---jianchen





At 2016-12-22 08:45:40, "Glyph Lefkowitz" <glyph at twistedmatrix.com> wrote:

Hi Jianchen,


As I said on stack overflow, you will need to upgrade to a more recent version of Twisted to get a version with that bug fixed.  If it's still a problem in a current version, you'll need to provide more details, ideally a short SSCCE http://sscce.org explaining how to get a broken SSH server with conch.


Thanks for using Twisted & Conch - I hope a simple upgrade will fix it for you!


-glyph


On Dec 20, 2016, at 7:15 PM, 陈健 <chenjianhappy2008 at 126.com> wrote:


 hi:
|
|

    I write a SSH server with Twisted(15.5.0)  Conch.  But it  don't support hmac-sha2-512 MAC algorithms

|
.  However I see this problem has been fixed in https://twistedmatrix.com/trac/ticket/8108 .  I asked the question in http://stackoverflow.com/questions/41254398/twisted-hmac-sha2-512-corrupted-mac-on-input-with-openssh .

Best regards,

 ---jianchen





 

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161222/1399b5d0/attachment-0002.html>

From adi at roiban.ro  Thu Dec 22 00:21:55 2016
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 22 Dec 2016 07:21:55 +0000
Subject: [Twisted-Python] hmac-sha2-512 - Corrupted MAC on input with
	OpenSSH
In-Reply-To: <7aa77b23.1f5e.1591f6015fc.Coremail.chenjianhappy2008@126.com>
References: <7aa77b23.1f5e.1591f6015fc.Coremail.chenjianhappy2008@126.com>
Message-ID: <CAFycZ9do4yXaznuS_hRmBt5BaDqsnr-gaLwxs8fXKCQ3sPRZMg@mail.gmail.com>

On 21 December 2016 at 03:15, 陈健 <chenjianhappy2008 at 126.com> wrote:
>
>  hi:
>
>     I write a SSH server with Twisted(15.5.0)  Conch.  But it  don't
support hmac-sha2-512 MAC algorithms
>
> .  However I see this problem has been fixed in
https://twistedmatrix.com/trac/ticket/8108 .  I asked the question in
http://stackoverflow.com/questions/41254398/twisted-hmac-sha2-512-corrupted-mac-on-input-with-openssh
.
>

Hi,

#8108 did not fix hmac-sha2-512, but was an attempt to add support for it.
Since there were no automated tests, hmac-sha2-512 was never functional.

There is a defect ticket which is not yet closed
https://twistedmatrix.com/trac/ticket/8258

I hope that the ticket description can be used to reproduce this error.

This might not be a hmac-sha2-512 specific issue, but a generic issue
related to padding... is just that sha2-512 triggered it.

--
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161222/29b691b7/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Dec 22 01:51:08 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 22 Dec 2016 00:51:08 -0800
Subject: [Twisted-Python] hmac-sha2-512 - Corrupted MAC on input with
 OpenSSH
In-Reply-To: <4995f3d9.3b42.15924768e27.Coremail.chenjianhappy2008@126.com>
References: <7aa77b23.1f5e.1591f6015fc.Coremail.chenjianhappy2008@126.com>
 <9E235CCF-3098-4E57-99F2-870A9FED091E@twistedmatrix.com>
 <4995f3d9.3b42.15924768e27.Coremail.chenjianhappy2008@126.com>
Message-ID: <D3480A3A-DAE5-4845-827E-C560B8836BB5@twistedmatrix.com>

Sorry to have misdiagnosed your problem.  I am glad that Adi Roiban could help!  Thank you very much for upgrading to the latest version - it helps us a lot for users to try recent versions of the software.  (And when a fix is available, of course, you will have to upgrade to get it, so upgrading regularly makes that easier :))  Hopefully we will be fixing a few bugs in Conch soon to try to address these sorts of protocol bugs.

-glyph

> On Dec 21, 2016, at 6:57 PM, 陈健 <chenjianhappy2008 at 126.com> wrote:
> 
> thank you for your reply！I have updated to the latest version of Twisted 16.6.0, but the problem remains.  More detailed debugging information with -vvv in http://stackoverflow.com/questions/41254398/twisted-hmac-sha2-512-corrupted-mac-on-input-with-openssh <http://stackoverflow.com/questions/41254398/twisted-hmac-sha2-512-corrupted-mac-on-input-with-openssh>  . I really do not know how to do it now.
> 
> Best regards,
> ---jianchen
> 
> 
> 
> 
> At 2016-12-22 08:45:40, "Glyph Lefkowitz" <glyph at twistedmatrix.com> wrote:
> Hi Jianchen,
> 
> As I said on stack overflow, you will need to upgrade to a more recent version of Twisted to get a version with that bug fixed.  If it's still a problem in a current version, you'll need to provide more details, ideally a short SSCCE http://sscce.org <http://sscce.org/> explaining how to get a broken SSH server with conch.
> 
> Thanks for using Twisted & Conch - I hope a simple upgrade will fix it for you!
> 
> -glyph
> 
>> On Dec 20, 2016, at 7:15 PM, 陈健 <chenjianhappy2008 at 126.com <mailto:chenjianhappy2008 at 126.com>> wrote:
>> 
>>  hi:
>>     I write a SSH server with Twisted(15.5.0)  Conch.  But it  don't support hmac-sha2-512 MAC algorithms
>> 
>> .  However I see this problem has been fixed in https://twistedmatrix.com/trac/ticket/8108 <https://twistedmatrix.com/trac/ticket/8108> .  I asked the question in http://stackoverflow.com/questions/41254398/twisted-hmac-sha2-512-corrupted-mac-on-input-with-openssh <http://stackoverflow.com/questions/41254398/twisted-hmac-sha2-512-corrupted-mac-on-input-with-openssh> .
>> Best regards,
>> 
>>  ---jianchen
>> 
>> 
>> 
>>  
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 
>  
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161222/eb28475a/attachment-0002.html>

From twisted-python at 2xlp.com  Thu Dec 22 10:42:43 2016
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Thu, 22 Dec 2016 12:42:43 -0500
Subject: [Twisted-Python] twistd and loglevel question
Message-ID: <E15CA554-9F4E-4544-ACDD-5DBB0702898C@2xlp.com>

i couldn't find anything in docs/source, but just want to double-check...

am i correct that there is nothing in `twistd` that will automatically set the (normal) python logging level based on args/env vars?





From glyph at twistedmatrix.com  Thu Dec 22 13:33:10 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 22 Dec 2016 12:33:10 -0800
Subject: [Twisted-Python] twistd and loglevel question
In-Reply-To: <E15CA554-9F4E-4544-ACDD-5DBB0702898C@2xlp.com>
References: <E15CA554-9F4E-4544-ACDD-5DBB0702898C@2xlp.com>
Message-ID: <F49EC250-933F-49CD-B195-FDD20036DADD@twistedmatrix.com>


> On Dec 22, 2016, at 9:42 AM, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:
> 
> i couldn't find anything in docs/source, but just want to double-check...
> 
> am i correct that there is nothing in `twistd` that will automatically set the (normal) python logging level based on args/env vars?

By "normal" I assume you mean stdlib?  No, we don't use stdlib logging.

-glyph


From twisted-python at 2xlp.com  Thu Dec 22 14:40:50 2016
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Thu, 22 Dec 2016 16:40:50 -0500
Subject: [Twisted-Python] twistd and loglevel question
In-Reply-To: <F49EC250-933F-49CD-B195-FDD20036DADD@twistedmatrix.com>
References: <E15CA554-9F4E-4544-ACDD-5DBB0702898C@2xlp.com>
 <F49EC250-933F-49CD-B195-FDD20036DADD@twistedmatrix.com>
Message-ID: <7731E10B-C507-46E8-9E1A-2947BCFB3406@2xlp.com>


On Dec 22, 2016, at 3:33 PM, Glyph Lefkowitz wrote:

> By "normal" I assume you mean stdlib?  No, we don't use stdlib logging.
> 
> -glyph

Yes, thanks!

I just realized that "if I don't do anything at all", all the standard library's logging calls (all imported 3rd party packages) wind up on stdout.

i wanted to make sure there wasn't something on the `twistd` that i was missing.






From glyph at twistedmatrix.com  Thu Dec 22 15:00:18 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 22 Dec 2016 14:00:18 -0800
Subject: [Twisted-Python] twistd and loglevel question
In-Reply-To: <7731E10B-C507-46E8-9E1A-2947BCFB3406@2xlp.com>
References: <E15CA554-9F4E-4544-ACDD-5DBB0702898C@2xlp.com>
 <F49EC250-933F-49CD-B195-FDD20036DADD@twistedmatrix.com>
 <7731E10B-C507-46E8-9E1A-2947BCFB3406@2xlp.com>
Message-ID: <5C60A667-CE12-462B-8A3A-E19FC8AE5375@twistedmatrix.com>


> On Dec 22, 2016, at 1:40 PM, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:
> 
> 
> On Dec 22, 2016, at 3:33 PM, Glyph Lefkowitz wrote:
> 
>> By "normal" I assume you mean stdlib?  No, we don't use stdlib logging.
>> 
>> -glyph
> 
> Yes, thanks!
> 
> I just realized that "if I don't do anything at all", all the standard library's logging calls (all imported 3rd party packages) wind up on stdout.
> 
> i wanted to make sure there wasn't something on the `twistd` that i was missing.

Nope. If you want interaction with stdlib logging, there's https://twistedmatrix.com/documents/16.6.0/api/twisted.logger.STDLibLogObserver.html <https://twistedmatrix.com/documents/16.6.0/api/twisted.logger.STDLibLogObserver.html> and some associated utilites.  But that's up to you, not twistd.  (Maybe twistd should start doing something to integrate the log streams?)

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161222/dd487054/attachment-0002.html>

From twisted-python at 2xlp.com  Thu Dec 22 15:38:51 2016
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Thu, 22 Dec 2016 17:38:51 -0500
Subject: [Twisted-Python] twistd and loglevel question
In-Reply-To: <5C60A667-CE12-462B-8A3A-E19FC8AE5375@twistedmatrix.com>
References: <E15CA554-9F4E-4544-ACDD-5DBB0702898C@2xlp.com>
 <F49EC250-933F-49CD-B195-FDD20036DADD@twistedmatrix.com>
 <7731E10B-C507-46E8-9E1A-2947BCFB3406@2xlp.com>
 <5C60A667-CE12-462B-8A3A-E19FC8AE5375@twistedmatrix.com>
Message-ID: <0EDF62A8-C729-4854-B72F-7B279C961A11@2xlp.com>


On Dec 22, 2016, at 5:00 PM, Glyph Lefkowitz wrote:
> Nope. If you want interaction with stdlib logging, there's https://twistedmatrix.com/documents/16.6.0/api/twisted.logger.STDLibLogObserver.html and some associated utilites.  But that's up to you, not twistd.  (Maybe twistd should start doing something to integrate the log streams?)

thanks; I had seen that.  I didn't want any actual interaction... just to silence all the DEBUG lines.  i thought twistd might have registered something I could take advantage of.

all I needed to do, for now, was throw this in my twisted app:

	import logging
	logging.basicConfig()
	logger = logging.getLogger()
	logger.setLevel(logging.WARNING) 


i can work out a proper solution in the new year.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161222/f794f78d/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Dec 22 16:28:44 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 22 Dec 2016 15:28:44 -0800
Subject: [Twisted-Python] twistd and loglevel question
In-Reply-To: <0EDF62A8-C729-4854-B72F-7B279C961A11@2xlp.com>
References: <E15CA554-9F4E-4544-ACDD-5DBB0702898C@2xlp.com>
 <F49EC250-933F-49CD-B195-FDD20036DADD@twistedmatrix.com>
 <7731E10B-C507-46E8-9E1A-2947BCFB3406@2xlp.com>
 <5C60A667-CE12-462B-8A3A-E19FC8AE5375@twistedmatrix.com>
 <0EDF62A8-C729-4854-B72F-7B279C961A11@2xlp.com>
Message-ID: <F655F93B-3626-4082-87A1-809758F33C29@twistedmatrix.com>



> On Dec 22, 2016, at 2:38 PM, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:
> 
> 
> On Dec 22, 2016, at 5:00 PM, Glyph Lefkowitz wrote:
>> Nope. If you want interaction with stdlib logging, there's https://twistedmatrix.com/documents/16.6.0/api/twisted.logger.STDLibLogObserver.html <https://twistedmatrix.com/documents/16.6.0/api/twisted.logger.STDLibLogObserver.html> and some associated utilites.  But that's up to you, not twistd.  (Maybe twistd should start doing something to integrate the log streams?)
> 
> thanks; I had seen that.  I didn't want any actual interaction... just to silence all the DEBUG lines.  i thought twistd might have registered something I could take advantage of.
> 
> all I needed to do, for now, was throw this in my twisted app:
> 
> 	import logging
> 	logging.basicConfig()
> 	logger = logging.getLogger()
> 	logger.setLevel(logging.WARNING) 
> 
> 
> i can work out a proper solution in the new year.

Looking forward to reviewing your ticket, then :)

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161222/b890404f/attachment-0002.html>

From hawkowl at atleastfornow.net  Thu Dec 22 21:33:58 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Fri, 23 Dec 2016 15:33:58 +1100
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate Announcement
Message-ID: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>

Hello everyone, and happy holidays!

Although it didn't quite fall on the solstice, one could call this Twisted release a little ray of sunshine, with some nice new improvements. 16.7.0rc1 brings the following stocking stuffers:

- twisted.web.client.Agent now supports IPv6! It's also now the primary web client in Twisted, with twisted.web.client.getPage being deprecated in favour of it and Treq.
- twisted.internet.ssl.CertificateOptions has had its `method` argument deprecated, in favour of the new raiseMinimumTo, lowerMaximumSecurityTo, and insecurelyLowerMinimumTo arguments, which take TLSVersion arguments. This allows you to better give a range of versions of TLS you wish to negotiate, rather than forcing yourself to any one version.
- twisted.internet.ssl.CertificateOptions will use OpenSSL's MODE_RELEASE_BUFFERS, which will let it free unused memory that was held by idle TLS connections.
- You can now call the new twist runner with `python -m twisted`.
- Conch has the beginnings of ECDH key exchange, and supports `hmac-sha2-384` in twisted.conch.ssh.
- Better Unicode support in twisted.internet.reactor.spawnProcess, especially on Windows on Python 3.6.
- More Python 3 porting in Conch, and more under-the-hood changes to facilitate a Twisted-wide jump to new-style classes only on Python 2 in 2018/2019. This release has also been tested on Python 3.6 on Linux.
- Lots of deprecated code removals, to make a sleeker, less confusing Twisted.
- 20+ closed tickets.

You can get the tarball and the NEWS file at https://twistedmatrix.com/Releases/rc/16.7.0rc1/ <https://twistedmatrix.com/Releases/rc/16.7.0rc1/> , or you can try it out from PyPI:

    python -m pip install Twisted==16.7.0rc1

Please test it, and let me know how your applications fare, good or bad! If nothing comes up, 16.7 looks like it'll land just before the new year.

With festive hoots,
    Amber Brown

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161223/d56e4b30/attachment-0002.html>

From ex.vitorino at gmail.com  Fri Dec 23 04:49:35 2016
From: ex.vitorino at gmail.com (ex vito)
Date: Fri, 23 Dec 2016 11:49:35 +0000
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate
	Announcement
In-Reply-To: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
References: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
Message-ID: <8EE8E179-EA0A-47EC-9449-6D7C3D8F7260@gmail.com>


On 2016-12-23, at 4:33, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:

> [...]
> 
> You can get the tarball and the NEWS file at https://twistedmatrix.com/Releases/rc/16.7.0rc1/ , or you can try it out from PyPI:
> 
>     python -m pip install Twisted==16.7.0rc1
> 
> Please test it, and let me know how your applications fare, good or bad! If nothing comes up, 16.7 looks like it'll land just before the new year.



Amber,

Do you think https://github.com/twisted/twisted/pull/599 can go in?
As far as I can tell, it's been reviewed and approved for merging. If not, please point out what should be improved.

Thanks and Happy Holidays,
--
exvito

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161223/08c0c2b2/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Dec 23 13:31:10 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 23 Dec 2016 12:31:10 -0800
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate
	Announcement
In-Reply-To: <8EE8E179-EA0A-47EC-9449-6D7C3D8F7260@gmail.com>
References: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
 <8EE8E179-EA0A-47EC-9449-6D7C3D8F7260@gmail.com>
Message-ID: <E19C9739-651D-4E4A-BA39-D37C060F89D6@twistedmatrix.com>


> On Dec 23, 2016, at 3:49 AM, ex vito <ex.vitorino at gmail.com> wrote:
> 
> 
> On 2016-12-23, at 4:33, Amber Hawkie Brown <hawkowl at atleastfornow.net <mailto:hawkowl at atleastfornow.net>> wrote:
> 
>> [...]
>> 
>> You can get the tarball and the NEWS file at https://twistedmatrix.com/Releases/rc/16.7.0rc1/ <https://twistedmatrix.com/Releases/rc/16.7.0rc1/> , or you can try it out from PyPI:
>> 
>>     python -m pip install Twisted==16.7.0rc1
>> 
>> Please test it, and let me know how your applications fare, good or bad! If nothing comes up, 16.7 looks like it'll land just before the new year.
> 
> 
> 
> Amber,
> 
> Do you think https://github.com/twisted/twisted/pull/599 <https://github.com/twisted/twisted/pull/599> can go in?
> As far as I can tell, it's been reviewed and approved for merging. If not, please point out what should be improved.

Amber is the release manager and therefore has final say, but, generally, we try not to roll more things into releases.  Instead, we try to roll releases more frequently (which has been a resounding success during 2016, and hopefully we can keep that momentum during 2017).

However, I have to say I'm very sorry this did not get merged in a timely way!  It seems I didn't get the github notification when you @mentioned me; I have no idea why that would be.

I'll get test results on trunk and get it merged, and it should be in the next 17.x release.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161223/6db7d63a/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Dec 23 14:22:09 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 23 Dec 2016 13:22:09 -0800
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate
	Announcement
In-Reply-To: <E19C9739-651D-4E4A-BA39-D37C060F89D6@twistedmatrix.com>
References: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
 <8EE8E179-EA0A-47EC-9449-6D7C3D8F7260@gmail.com>
 <E19C9739-651D-4E4A-BA39-D37C060F89D6@twistedmatrix.com>
Message-ID: <A12AF755-CE71-4C4A-883F-D36F9DDD8E29@twistedmatrix.com>


> On Dec 23, 2016, at 12:31 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Dec 23, 2016, at 3:49 AM, ex vito <ex.vitorino at gmail.com <mailto:ex.vitorino at gmail.com>> wrote:
>> 
>> 
>> On 2016-12-23, at 4:33, Amber Hawkie Brown <hawkowl at atleastfornow.net <mailto:hawkowl at atleastfornow.net>> wrote:
>> 
>>> [...]
>>> 
>>> You can get the tarball and the NEWS file at https://twistedmatrix.com/Releases/rc/16.7.0rc1/ <https://twistedmatrix.com/Releases/rc/16.7.0rc1/> , or you can try it out from PyPI:
>>> 
>>>     python -m pip install Twisted==16.7.0rc1
>>> 
>>> Please test it, and let me know how your applications fare, good or bad! If nothing comes up, 16.7 looks like it'll land just before the new year.
>> 
>> 
>> 
>> Amber,
>> 
>> Do you think https://github.com/twisted/twisted/pull/599 <https://github.com/twisted/twisted/pull/599> can go in?
>> As far as I can tell, it's been reviewed and approved for merging. If not, please point out what should be improved.
> 
> Amber is the release manager and therefore has final say, but, generally, we try not to roll more things into releases.  Instead, we try to roll releases more frequently (which has been a resounding success during 2016, and hopefully we can keep that momentum during 2017).
> 
> However, I have to say I'm very sorry this did not get merged in a timely way!  It seems I didn't get the github notification when you @mentioned me; I have no idea why that would be.
> 
> I'll get test results on trunk and get it merged, and it should be in the next 17.x release.
> 
> -glyph

It's merged now: https://twistedmatrix.com/trac/ticket/8911#comment:5 <https://twistedmatrix.com/trac/ticket/8911#comment:5>

On a related note - this still linked the '#' syntax back to the ticket number in Trac.

Perhaps related - tomprince fixed the bugs that were preventing us from upgrading us to 1.2, and upgraded us to 1.2.  So perhaps this has introduced a problem :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161223/67b06571/attachment-0002.html>

From ex.vitorino at gmail.com  Sat Dec 24 07:01:44 2016
From: ex.vitorino at gmail.com (ex vito)
Date: Sat, 24 Dec 2016 14:01:44 +0000
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate
	Announcement
In-Reply-To: <A12AF755-CE71-4C4A-883F-D36F9DDD8E29@twistedmatrix.com>
References: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
 <8EE8E179-EA0A-47EC-9449-6D7C3D8F7260@gmail.com>
 <E19C9739-651D-4E4A-BA39-D37C060F89D6@twistedmatrix.com>
 <A12AF755-CE71-4C4A-883F-D36F9DDD8E29@twistedmatrix.com>
Message-ID: <F8A32F53-244C-49FB-A0D8-E275CFEDA601@gmail.com>

On 2016-12-23, at 21:22, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

>> On Dec 23, 2016, at 12:31 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>> 
>>> On Dec 23, 2016, at 3:49 AM, ex vito <ex.vitorino at gmail.com> wrote:
>>> 
>>> On 2016-12-23, at 4:33, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
>>> 
>>>> [...]
>>>> 
>>>> You can get the tarball and the NEWS file at https://twistedmatrix.com/Releases/rc/16.7.0rc1/ , or you can try it out from PyPI:
>>>> 
>>>>     python -m pip install Twisted==16.7.0rc1
>>>> 
>>>> Please test it, and let me know how your applications fare, good or bad! If nothing comes up, 16.7 looks like it'll land just before the new year.
>>> 
>>> 
>>> 
>>> Amber,
>>> 
>>> Do you think https://github.com/twisted/twisted/pull/599 can go in?
>>> As far as I can tell, it's been reviewed and approved for merging. If not, please point out what should be improved.
>> 
>> Amber is the release manager and therefore has final say, but, generally, we try not to roll more things into releases.  Instead, we try to roll releases more frequently (which has been a resounding success during 2016, and hopefully we can keep that momentum during 2017).
>> 
>> However, I have to say I'm very sorry this did not get merged in a timely way!  It seems I didn't get the github notification when you @mentioned me; I have no idea why that would be.
>> 
>> I'll get test results on trunk and get it merged, and it should be in the next 17.x release.

Glyph,

The next 17.x release sounds good. I'm in no hurries and that keeps an open time window to address the very tightly related https://twistedmatrix.com/trac/ticket/8912 which I recently noted was created by Tom Prince.

> It's merged now: https://twistedmatrix.com/trac/ticket/8911#comment:5
> 
> On a related note - this still linked the '#' syntax back to the ticket number in Trac.
> 
> Perhaps related - tomprince fixed the bugs that were preventing us from upgrading us to 1.2, and upgraded us to 1.2.  So perhaps this has introduced a problem :).

Thanks for the quick feedback and heads up on the '#' link.
Regards,
--
exvito

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161224/61fcaaee/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Dec 24 14:29:16 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 24 Dec 2016 13:29:16 -0800
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate
	Announcement
In-Reply-To: <F8A32F53-244C-49FB-A0D8-E275CFEDA601@gmail.com>
References: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
 <8EE8E179-EA0A-47EC-9449-6D7C3D8F7260@gmail.com>
 <E19C9739-651D-4E4A-BA39-D37C060F89D6@twistedmatrix.com>
 <A12AF755-CE71-4C4A-883F-D36F9DDD8E29@twistedmatrix.com>
 <F8A32F53-244C-49FB-A0D8-E275CFEDA601@gmail.com>
Message-ID: <138C0157-A4E2-4E10-B437-FF7B37E7A014@twistedmatrix.com>


> On Dec 24, 2016, at 6:01 AM, ex vito <ex.vitorino at gmail.com> wrote:
> 
> On 2016-12-23, at 21:22, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
>>> On Dec 23, 2016, at 12:31 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>>> 
>>>> On Dec 23, 2016, at 3:49 AM, ex vito <ex.vitorino at gmail.com <mailto:ex.vitorino at gmail.com>> wrote:
>>>> 
>>>> On 2016-12-23, at 4:33, Amber Hawkie Brown <hawkowl at atleastfornow.net <mailto:hawkowl at atleastfornow.net>> wrote:
>>>> 
>>>>> [...]
>>>>> 
>>>>> You can get the tarball and the NEWS file at https://twistedmatrix.com/Releases/rc/16.7.0rc1/ <https://twistedmatrix.com/Releases/rc/16.7.0rc1/> , or you can try it out from PyPI:
>>>>> 
>>>>>     python -m pip install Twisted==16.7.0rc1
>>>>> 
>>>>> Please test it, and let me know how your applications fare, good or bad! If nothing comes up, 16.7 looks like it'll land just before the new year.
>>>> 
>>>> 
>>>> 
>>>> Amber,
>>>> 
>>>> Do you think https://github.com/twisted/twisted/pull/599 <https://github.com/twisted/twisted/pull/599> can go in?
>>>> As far as I can tell, it's been reviewed and approved for merging. If not, please point out what should be improved.
>>> 
>>> Amber is the release manager and therefore has final say, but, generally, we try not to roll more things into releases.  Instead, we try to roll releases more frequently (which has been a resounding success during 2016, and hopefully we can keep that momentum during 2017).
>>> 
>>> However, I have to say I'm very sorry this did not get merged in a timely way!  It seems I didn't get the github notification when you @mentioned me; I have no idea why that would be.
>>> 
>>> I'll get test results on trunk and get it merged, and it should be in the next 17.x release.
> 
> Glyph,
> 
> The next 17.x release sounds good. I'm in no hurries and that keeps an open time window to address the very tightly related https://twistedmatrix.com/trac/ticket/8912 <https://twistedmatrix.com/trac/ticket/8912> which I recently noted was created by Tom Prince.

Great.  Basically, try not to worry about releases too much - just do the work as quick as you can, do reviews to speed along the queue in general, and the ever-faster release cadence that Amber has put in place will catch your changes soon enough.

>> It's merged now: https://twistedmatrix.com/trac/ticket/8911#comment:5 <https://twistedmatrix.com/trac/ticket/8911#comment:5>
>> 
>> On a related note - this still linked the '#' syntax back to the ticket number in Trac.
>> 
>> Perhaps related - tomprince fixed the bugs that were preventing us from upgrading us to 1.2, and upgraded us to 1.2.  So perhaps this has introduced a problem :).
> 
> Thanks for the quick feedback and heads up on the '#' link.

This was a heads-up for Jean-Paul, who has been trying to change this behavior (to make '#' on new commits refer to Github issues / PRs, and 'ticket:' refer to Trac tickets, so we don't get spurious email notifications about old Trac tickets).  You can pretty much ignore it :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161224/e740936d/attachment-0002.html>

From hawkowl at atleastfornow.net  Sat Dec 24 21:17:59 2016
From: hawkowl at atleastfornow.net (Amber Hawkie Brown)
Date: Sun, 25 Dec 2016 15:17:59 +1100
Subject: [Twisted-Python] New Supported Platforms - FreeBSD (2.7 & 3.5),
	Python 3.6 (Linux)
Message-ID: <8B7FE57B-90C7-412D-A013-4EB1C2651D21@atleastfornow.net>

Hi everyone,

I just migrated a few buildbots over to the 'supported' column. This includes Python 3.6 on Ubuntu 16.04 (compiled, not an official distro binary :) ) and FreeBSD 10.1 (Python 2.7 & 3.5). Twisted 16.7 passes on both of these, so you can consider them supported platforms for it.

- Amber


From trac at twistedmatrix.com  Sun Dec 25 00:05:18 2016
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 25 Dec 2016 07:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1482649518.06.6142520099845210664@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161225/25e8cbd2/attachment-0002.html>

From exarkun at twistedmatrix.com  Sun Dec 25 08:09:59 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Sun, 25 Dec 2016 10:09:59 -0500
Subject: [Twisted-Python] AWS Auth v4 for Twisted?
Message-ID: <CAEeXt4N5O=yfcSPqVPcxwaadLi4L4tCUc1d6TXkRxadKmpGNnA@mail.gmail.com>

Seeking a library that implements this for use with txAWS.  More details:

https://stackoverflow.com/questions/41322251/is-there-an-aws-auth-v4-implementation-usable-with-a-twisted-friendly-http-clien

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161225/55394f5b/attachment-0002.html>

From markrwilliams at gmail.com  Sun Dec 25 14:44:44 2016
From: markrwilliams at gmail.com (Mark Williams)
Date: Sun, 25 Dec 2016 13:44:44 -0800
Subject: [Twisted-Python] AWS Auth v4 for Twisted?
In-Reply-To: <CAEeXt4N5O=yfcSPqVPcxwaadLi4L4tCUc1d6TXkRxadKmpGNnA@mail.gmail.com>
References: <CAEeXt4N5O=yfcSPqVPcxwaadLi4L4tCUc1d6TXkRxadKmpGNnA@mail.gmail.com>
Message-ID: <CA+TSurANEugvPy7+WGa=nDYB=S9MoDgkRjaaSUC6iLiGhGy4PA@mail.gmail.com>

I implemented this at work.  On Tuesday I'll confirm my company's open
source policy will allow me to contribute it back to txaws.

On Sun, Dec 25, 2016 at 7:09 AM, Jean-Paul Calderone <
exarkun at twistedmatrix.com> wrote:

> Seeking a library that implements this for use with txAWS.  More details:
>
> https://stackoverflow.com/questions/41322251/is-there-
> an-aws-auth-v4-implementation-usable-with-a-twisted-friendly-http-clien
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161225/ad51f05c/attachment-0002.html>

From exarkun at twistedmatrix.com  Sun Dec 25 15:49:41 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Sun, 25 Dec 2016 17:49:41 -0500
Subject: [Twisted-Python] AWS Auth v4 for Twisted?
In-Reply-To: <CA+TSurANEugvPy7+WGa=nDYB=S9MoDgkRjaaSUC6iLiGhGy4PA@mail.gmail.com>
References: <CAEeXt4N5O=yfcSPqVPcxwaadLi4L4tCUc1d6TXkRxadKmpGNnA@mail.gmail.com>
 <CA+TSurANEugvPy7+WGa=nDYB=S9MoDgkRjaaSUC6iLiGhGy4PA@mail.gmail.com>
Message-ID: <CAEeXt4NpYndbr5KgDT80HuEVC-H_kBH3MyGfJ_tedex9F10oQw@mail.gmail.com>

On Sun, Dec 25, 2016 at 4:44 PM, Mark Williams <markrwilliams at gmail.com>
wrote:

> I implemented this at work.  On Tuesday I'll confirm my company's open
> source policy will allow me to contribute it back to txaws.
>
>
Super!

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161225/f12bff89/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Dec 25 17:31:56 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 25 Dec 2016 16:31:56 -0800
Subject: [Twisted-Python] New Supported Platforms - FreeBSD (2.7 & 3.5),
 Python 3.6 (Linux)
In-Reply-To: <8B7FE57B-90C7-412D-A013-4EB1C2651D21@atleastfornow.net>
References: <8B7FE57B-90C7-412D-A013-4EB1C2651D21@atleastfornow.net>
Message-ID: <17A95701-288D-403B-986F-54353E5F4B7B@twistedmatrix.com>


> On Dec 24, 2016, at 8:17 PM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> Hi everyone,
> 
> I just migrated a few buildbots over to the 'supported' column. This includes Python 3.6 on Ubuntu 16.04 (compiled, not an official distro binary :) ) and FreeBSD 10.1 (Python 2.7 & 3.5). Twisted 16.7 passes on both of these, so you can consider them supported platforms for it.
> 
> - Amber

A few things:

Happy Hanukkah
The build reliability on FreeBSD seems pretty bad.  On one PR that is just a doc change I've gotten like 4 failed builds in a row, mostly variants of this: https://buildbot.twistedmatrix.com/builders/freebsd10-py2.7/builds/57/steps/default/logs/problems <https://buildbot.twistedmatrix.com/builders/freebsd10-py2.7/builds/57/steps/default/logs/problems>
Merry Christmas
Overall it seems to be failing a lot; appropriate to the holiday there is a festive combination of red and green on https://buildbot.twistedmatrix.com/builders/freebsd10-py3.5 <https://buildbot.twistedmatrix.com/builders/freebsd10-py3.5>
Season's Greetings

:)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161225/f2403b5c/attachment-0002.html>

From exarkun at twistedmatrix.com  Mon Dec 26 17:14:04 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Mon, 26 Dec 2016 19:14:04 -0500
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate
	Announcement
In-Reply-To: <A12AF755-CE71-4C4A-883F-D36F9DDD8E29@twistedmatrix.com>
References: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
 <8EE8E179-EA0A-47EC-9449-6D7C3D8F7260@gmail.com>
 <E19C9739-651D-4E4A-BA39-D37C060F89D6@twistedmatrix.com>
 <A12AF755-CE71-4C4A-883F-D36F9DDD8E29@twistedmatrix.com>
Message-ID: <CAEeXt4Nj3LmqZn_b3CdULwG=nu565xKpZx52i6aG3WjNHW5-4w@mail.gmail.com>

On Fri, Dec 23, 2016 at 4:22 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
>
> It's merged now: https://twistedmatrix.com/trac/ticket/8911#comment:5
>
> On a related note - this still linked the '#' syntax back to the ticket
> number in Trac.
>
> Perhaps related - tomprince fixed the bugs that were preventing us from
> upgrading us to 1.2, and upgraded us to 1.2.  So perhaps this has
> introduced a problem :).
>
> -glyph
>
>
It looks like the link to ticket 599 in the merge/resolve comment on ticket
8911 is a different kind of link than the one I was looking in to.  I agree
it would be nice to fix this, too, and perhaps I'll take a look.  My goal
was only to stop ticket 599 (for example) from also receiving a copy of
this comment - which appears to have succeeded.  Let me know if I've missed
something.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161226/aa0b296d/attachment-0002.html>

From ex.vitorino at gmail.com  Tue Dec 27 20:15:58 2016
From: ex.vitorino at gmail.com (ex vito)
Date: Wed, 28 Dec 2016 03:15:58 +0000
Subject: [Twisted-Python] twisted.python.sendmsg segfault - looking for
	confirmation
Message-ID: <4F35146F-E43C-437F-B33A-4F6CEA9343F6@gmail.com>

Dear all,

While working on http://twistedmatrix.com/trac/ticket/8912 and the associated PR at https://github.com/twisted/twisted/pull/647 I hit a segmentation fault on a test I was preparing.

I think narrowed it down Linux + Python 2, but I'm not 100% sure. Can anyone please confirm the  code below segfaults on such environment? For completeness, from my tests, it works fine on Linux + Python 3, and fails with socket.error/OSError on Mac OS 10.9.5 + Python 2/3. No BSDs at hand to try out...

As far as I can tell, no code in Twisted uses sendmsg in the way the code is using it. However, twisted.python.sendmsg is a public API so someone somewhere may hit this like I just did.

Other than looking for confirmation, I have a fix which I included two isolated commits in the PR. Twisted project members: if this is confirmed, maybe a ticket should be created in Trac and an independent PR created, correct?

Thanks in advance for any input.
Regards,
--
exvito

-[ cut here ]----------------------------------------------------------------------

import os
import socket
import struct
import sys

from twisted.python import sendmsg

if __name__ == '__main__':

    # This code segfaults when running with twisted/trunk commit
    # 98a3df200968b78bd3b985dfd4fb10a5b415d6fc on Linux Python 2
    # due to a bug in src/twisted/python/_sendmsg.c and glibc's
    # CMSG_NXTHDR implementation.

    # get connected sockets
    s1, s2 = socket.socketpair(socket.AF_UNIX)

    # two CMSGs in ancillary data (no segfault with just one)
    ancillary = [
        (socket.SOL_SOCKET, sendmsg.SCM_RIGHTS, struct.pack('i', s1.fileno())),
        (socket.SOL_SOCKET, sendmsg.SCM_RIGHTS, struct.pack('i', s2.fileno())),
    ]

    expected = {
        2: 'Expecting to segfault.',
        3: 'Should not segfault.',
    }
    print expected.get(sys.version_info.major, 'Unexpected Python version.')
    retval = sendmsg.sendmsg(s1, data=b'some data', ancillary=ancillary)
    print 'Did not segfault.'

-[ cut here ]----------------------------------------------------------------------




From hawkowl at atleastfornow.net  Tue Dec 27 20:25:39 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Wed, 28 Dec 2016 14:25:39 +1100
Subject: [Twisted-Python] twisted.python.sendmsg segfault - looking for
 confirmation
In-Reply-To: <4F35146F-E43C-437F-B33A-4F6CEA9343F6@gmail.com>
References: <4F35146F-E43C-437F-B33A-4F6CEA9343F6@gmail.com>
Message-ID: <B0E671A3-E2CD-4083-B86E-51B67988F862@atleastfornow.net>


> On 28 Dec. 2016, at 14:15, ex vito <ex.vitorino at gmail.com> wrote:
> 
> Dear all,
> 
> While working on http://twistedmatrix.com/trac/ticket/8912 and the associated PR at https://github.com/twisted/twisted/pull/647 I hit a segmentation fault on a test I was preparing.
> 
> I think narrowed it down Linux + Python 2, but I'm not 100% sure. Can anyone please confirm the  code below segfaults on such environment? For completeness, from my tests, it works fine on Linux + Python 3, and fails with socket.error/OSError on Mac OS 10.9.5 + Python 2/3. No BSDs at hand to try out...
> 
> As far as I can tell, no code in Twisted uses sendmsg in the way the code is using it. However, twisted.python.sendmsg is a public API so someone somewhere may hit this like I just did.
> 
> Other than looking for confirmation, I have a fix which I included two isolated commits in the PR. Twisted project members: if this is confirmed, maybe a ticket should be created in Trac and an independent PR created, correct?
> 
> Thanks in advance for any input.
> Regards,
> --
> exvito
> 
> -[ cut here ]----------------------------------------------------------------------
> 
> import os
> import socket
> import struct
> import sys
> 
> from twisted.python import sendmsg
> 
> if __name__ == '__main__':
> 
>    # This code segfaults when running with twisted/trunk commit
>    # 98a3df200968b78bd3b985dfd4fb10a5b415d6fc on Linux Python 2
>    # due to a bug in src/twisted/python/_sendmsg.c and glibc's
>    # CMSG_NXTHDR implementation.
> 
>    # get connected sockets
>    s1, s2 = socket.socketpair(socket.AF_UNIX)
> 
>    # two CMSGs in ancillary data (no segfault with just one)
>    ancillary = [
>        (socket.SOL_SOCKET, sendmsg.SCM_RIGHTS, struct.pack('i', s1.fileno())),
>        (socket.SOL_SOCKET, sendmsg.SCM_RIGHTS, struct.pack('i', s2.fileno())),
>    ]
> 
>    expected = {
>        2: 'Expecting to segfault.',
>        3: 'Should not segfault.',
>    }
>    print expected.get(sys.version_info.major, 'Unexpected Python version.')
>    retval = sendmsg.sendmsg(s1, data=b'some data', ancillary=ancillary)
>    print 'Did not segfault.'
> 
> -[ cut here ]----------------------------------------------------------------------
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

FWIW, for people wanting to track this down, this may be a bug in our C extension (src/twisted/python/_sendmsg.c). Python 3 uses the stdlib's functionality, which is probably why it isn't running into this.

- Amber




From rodrigc at crodrigues.org  Wed Dec 28 10:40:07 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 28 Dec 2016 12:40:07 -0500
Subject: [Twisted-Python] hmac-sha2-512 - Corrupted MAC on input with
	OpenSSH
In-Reply-To: <7aa77b23.1f5e.1591f6015fc.Coremail.chenjianhappy2008@126.com>
References: <7aa77b23.1f5e.1591f6015fc.Coremail.chenjianhappy2008@126.com>
Message-ID: <CAG=rPVccsxgVBpb_QarfK4=i+ti_9dpfGWMmJtm7ghP-qTytyA@mail.gmail.com>

Jianchen,

Can you provide more details about the server you are writing?

I cannot reproduce your problem with the latest Twisted code in trunk.

Here is what I did:


git clone https://github.com/twisted/twisted twisted-test
cd twisted-test
python setup.py develop
cd docs/conch/examples
mkdir ssh-examples
ckeygen -t rsa -f ssh-keys/ssh_host_rsa_key
twistd -ny demo_recvline.tac


I logged in with:


ssh username at 127.0.0.1 -m hmac-sha2-512 -vvv -p 6022

(using *username* for the login, and  *password* for the password)

>From the log, I saw:

debug1: Authenticating to 127.0.0.1:6022 as 'username'
debug3: put_host_port: [127.0.0.1]:6022
debug3: hostkeys_foreach: reading file "/Users/crodrigues/.ssh/known_hosts"
debug3: record_hostkey: found key type RSA in file
/Users/crodrigues/.ssh/known_hosts:5
debug3: load_hostkeys: loaded 1 keys from [127.0.0.1]:6022
debug3: order_hostkeyalgs: prefer hostkeyalgs: ssh-rsa-cert-v01 at openssh.com
,rsa-sha2-512,rsa-sha2-256,ssh-rsa
debug3: send packet: type 20
debug1: SSH2_MSG_KEXINIT sent
debug3: receive packet: type 20
debug1: SSH2_MSG_KEXINIT received
debug2: local client KEXINIT proposal
debug2: KEX algorithms: curve25519-sha256 at libssh.org
,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha256,diffie-hellman-group14-sha1,ext-info-c
debug2: host key algorithms: ssh-rsa-cert-v01 at openssh.com,rsa-sha2-512
,rsa-sha2-256,ssh-rsa,ecdsa-sha2-nistp256-cert-v01 at openssh.com,
ecdsa-sha2-nistp384-cert-v01 at openssh.com,
ecdsa-sha2-nistp521-cert-v01 at openssh.com,ssh-ed25519-cert-v01 at openssh.com
,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519
debug2: ciphers ctos: chacha20-poly1305 at openssh.com
,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,
aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,3des-cbc
debug2: ciphers stoc: chacha20-poly1305 at openssh.com
,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,
aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,3des-cbc
debug2: MACs ctos: hmac-sha2-512
debug2: MACs stoc: hmac-sha2-512
debug2: compression ctos: none,zlib at openssh.com,zlib
debug2: compression stoc: none,zlib at openssh.com,zlib
debug2: languages ctos:
debug2: languages stoc:
debug2: first_kex_follows 0
debug2: reserved 0
debug2: peer server KEXINIT proposal
debug2: KEX algorithms:
ecdh-sha2-nistp256,ecdh-sha2-nistk163,ecdh-sha2-nistp224,ecdh-sha2-nistk233,ecdh-sha2-nistb233,ecdh-sha2-nistp384,ecdh-sha2-nistk283,ecdh-sha2-nistk409,ecdh-sha2-nistb409,ecdh-sha2-nistp521,ecdh-sha2-nistt571,diffie-hellman-group1-sha1,diffie-hellman-group14-sha1
debug2: host key algorithms: ssh-rsa
debug2: ciphers ctos:
aes256-ctr,aes256-cbc,aes192-ctr,aes192-cbc,aes128-ctr,aes128-cbc,cast128-ctr,cast128-cbc,blowfish-cbc,
3des-cbc
debug2: ciphers stoc:
aes256-ctr,aes256-cbc,aes192-ctr,aes192-cbc,aes128-ctr,aes128-cbc,cast128-ctr,cast128-cbc,blowfish-cbc,
3des-cbc

debug2: MACs ctos: hmac-sha2-512,hmac-sha2-384,hmac-sha2-256
,hmac-sha1,hmac-md5

debug2: compression ctos: none,zlib
debug2: compression stoc: none,zlib
debug2: languages ctos:
debug2: languages stoc:debug2: first_kex_follows 0
debug2: reserved 0
debug1: kex: algorithm: ecdh-sha2-nistp256
debug1: kex: host key algorithm: ssh-rsa
debug1: kex: server->client cipher: aes128-ctr MAC: hmac-sha2-512
compression: none
debug1: kex: client->server cipher: aes128-ctr MAC: hmac-sha2-512
compression: none
debug3: send packet: type 30
debug1: sending SSH2_MSG_KEX_ECDH_INIT
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug3: receive packet: type 31
debug1: Server host key: ssh-rsa
SHA256:VP7JUyzN/BuRNuCOieijGHuF9fAylDBCYYJAtJ+gDO8
debug3: put_host_port: [127.0.0.1]:6022
debug3: put_host_port: [127.0.0.1]:6022
debug3: hostkeys_foreach: reading file "/Users/crodrigues/.ssh/known_hosts"
debug3: record_hostkey: found key type RSA in file
/Users/crodrigues/.ssh/known_hosts:5
debug3: load_hostkeys: loaded 1 keys from [127.0.0.1]:6022
debug1: Host '[127.0.0.1]:6022' is known and matches the RSA host key.
debug1: Found key in /Users/crodrigues/.ssh/known_hosts:5
debug3: send packet: type 21
debug2: set_newkeys: mode 1



I did not see the problem that you saw.

--
Craig


On Tue, Dec 20, 2016 at 10:15 PM, 陈健 <chenjianhappy2008 at 126.com> wrote:

>  hi:
>
>     I write a SSH server with Twisted(15.5.0)  Conch.  But it  don't
> support hmac-sha2-512 MAC algorithms
> .  However I see this problem has been fixed in https://twistedmatrix.com/
> trac/ticket/8108 .  I asked the question in http://stackoverflow.com/
> questions/41254398/twisted-hmac-sha2-512-corrupted-mac-
> on-input-with-openssh .
>
> Best regards,
>  ---jianchen
>
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161228/d1a79b16/attachment-0002.html>

From john at egh.com  Wed Dec 28 16:20:27 2016
From: john at egh.com (John Santos)
Date: Wed, 28 Dec 2016 18:20:27 -0500
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate
	Announcement
In-Reply-To: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
References: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
Message-ID: <2da9e7e0-4acf-d9af-9039-72533d3bfb24@egh.com>

Seems to require a new Python module, Automat.  (Not mentioned in the 
NEWS file, INSTALL, etc.)  I found Automat 0.3.0 (with Glyph's 
fingerprints on it) at PyPI, but it only exists in .whl format.  
Downloaded it, but I'm not sure what to do next.  I was able to get it 
working by downloading and installing get-pip.py and Automat (contrary 
to the python.org documentation, I didn't have pip installed on my 
system even though it is Python 2.7.13 downloaded from python.org.)
    sudo python get-pip.py
    sudo pip install Automat

This is worrisome to me because I think this requires Internet access to 
pypi.python.org, which I have on my development and testing systems, but 
not on my production systems.  Everything else I've ever needed, I could 
download and install source files.

Having done this, my app seems to run fine (only quick sanity testing so 
far.)


----install---
Searching for Automat>=0.3.0
Reading https://pypi.python.org/simple/Automat/
Download error on https://pypi.python.org/simple/Automat/: [SSL: 
CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:590) -- 
Some packages may not be found!
Couldn't find index page for 'Automat' (maybe misspelled?)
Scanning index of all packages (this may take a while)
Reading https://pypi.python.org/simple/
Download error on https://pypi.python.org/simple/: [SSL: 
CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:590) -- 
Some packages may not be found!
No local packages or working download links found for Automat>=0.3.0
error: Could not find suitable distribution for 
Requirement.parse('Automat>=0.3.0')
------

---try to use without Automat---
medusa at Medusa:~/run> python medusa_server.py Rain
Traceback (most recent call last):
   File "medusa_server.py", line 72, in <module>
     from twisted.application import service, internet
   File 
"/usr/lib/python2.7/site-packages/Twisted-16.7.0rc1-py2.7-linux-x86_64.egg/twisted/application/internet.py", 
line 54, in <module>
     from automat import MethodicalMachine
ImportError: No module named automat
------

On 12/22/2016 11:33 PM, Amber "Hawkie" Brown wrote:
> Hello everyone, and happy holidays!
>
> Although it didn't quite fall on the solstice, one could call this 
> Twisted release a little ray of sunshine, with some nice new 
> improvements. 16.7.0rc1 brings the following stocking stuffers:
>
> - twisted.web.client.Agent now supports IPv6! It's also now the 
> primary web client in Twisted, with twisted.web.client.getPage being 
> deprecated in favour of it and Treq.
> - twisted.internet.ssl.CertificateOptions has had its `method` 
> argument deprecated, in favour of the new raiseMinimumTo, 
> lowerMaximumSecurityTo, and insecurelyLowerMinimumTo arguments, which 
> take TLSVersion arguments. This allows you to better give a range of 
> versions of TLS you wish to negotiate, rather than forcing yourself to 
> any one version.
> - twisted.internet.ssl.CertificateOptions will use OpenSSL's 
> MODE_RELEASE_BUFFERS, which will let it free unused memory that was 
> held by idle TLS connections.
> - You can now call the new twist runner with `python -m twisted`.
> - Conch has the beginnings of ECDH key exchange, and supports 
> `hmac-sha2-384` in twisted.conch.ssh.
> - Better Unicode support in twisted.internet.reactor.spawnProcess, 
> especially on Windows on Python 3.6.
> - More Python 3 porting in Conch, and more under-the-hood changes to 
> facilitate a Twisted-wide jump to new-style classes only on Python 2 
> in 2018/2019. This release has also been tested on Python 3.6 on Linux.
> - Lots of deprecated code removals, to make a sleeker, less confusing 
> Twisted.
> - 20+ closed tickets.
>
> You can get the tarball and the NEWS file at 
> https://twistedmatrix.com/Releases/rc/16.7.0rc1/ , or you can try it 
> out from PyPI:
>
>     python -m pip install Twisted==16.7.0rc1
>
> Please test it, and let me know how your applications fare, good or 
> bad! If nothing comes up, 16.7 looks like it'll land just before the 
> new year.
>
> With festive hoots,
>     Amber Brown
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-- 
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161228/18f0f79b/attachment-0002.html>

From hawkowl at atleastfornow.net  Wed Dec 28 16:37:28 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Thu, 29 Dec 2016 10:37:28 +1100
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate
	Announcement
In-Reply-To: <2da9e7e0-4acf-d9af-9039-72533d3bfb24@egh.com>
References: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
 <2da9e7e0-4acf-d9af-9039-72533d3bfb24@egh.com>
Message-ID: <21B58730-1090-443C-A3CF-01E66C79D989@atleastfornow.net>

Hi John,

.whl is just an optimised binary format, and can be installed by pip from a local file. If you want to get all the dependencies of Twisted in a future-proof way, without network on production, just do this on a machine with the same arch/OS:

hawkowl /p/t/tx> pip download twisted[tls]==16.7.0rc1
[LOADING BARS ELINED]
Successfully downloaded twisted zope.interface constantly incremental Automat pyopenssl service-identity idna setuptools six characteristic cryptography pyasn1 pyasn1-modules attrs ipaddress enum34 cffi pycparser

hawkowl /p/t/tx> ls
Automat-0.3.0-py2.py3-none-any.whl                      ipaddress-1.0.17-py2-none-any.whl
Twisted-16.7.0rc1.tar.bz2                               pyOpenSSL-16.2.0-py2.py3-none-any.whl
attrs-16.3.0-py2.py3-none-any.whl                       pyasn1-0.1.9-py2.py3-none-any.whl
cffi-1.9.1-cp27-cp27m-macosx_10_10_intel.whl            pyasn1_modules-0.0.8-py2.py3-none-any.whl
characteristic-14.3.0-py2.py3-none-any.whl              pycparser-2.17.tar.gz
constantly-15.1.0-py2.py3-none-any.whl                  service_identity-16.0.0-py2.py3-none-any.whl
cryptography-1.7.1-cp27-cp27m-macosx_10_10_intel.whl    setuptools-32.3.0-py2.py3-none-any.whl
enum34-1.1.6-py2-none-any.whl                           six-1.10.0-py2.py3-none-any.whl
idna-2.2-py2.py3-none-any.whl                           zope.interface-4.3.3-cp27-cp27m-macosx_10_11_x86_64.whl
incremental-16.10.1-py2.py3-none-any.whl

Put these files on the target machine. Then on the target machine, with no internet connection:

hawkowl /p/t/tx> virtualenv venv
Using real prefix '/System/Library/Frameworks/Python.framework/Versions/2.7'
New python executable in /private/tmp/tx/venv/bin/python
Installing setuptools, pip, wheel...done.

# Because incremental is setup_requires on twisted, install it explicitly or setuptools will go try and fetch it
hawkowl /p/t/tx [1]> venv/bin/pip install --no-index --find-links ./ incremental
Collecting incremental
Installing collected packages: incremental
Successfully installed incremental-16.10.1

hawkowl /p/t/tx> venv/bin/pip install --no-index --find-links ./ twisted[tls]
Collecting twisted[tls]
Collecting Automat>=0.3.0 (from twisted[tls])
Collecting zope.interface>=3.6.0 (from twisted[tls])
Collecting constantly>=15.1 (from twisted[tls])
Requirement already satisfied: incremental>=16.10.1 in ./venv/lib/python2.7/site-packages (from twisted[tls])
Collecting service-identity; extra == "tls" (from twisted[tls])
Collecting idna>=0.6; extra == "tls" (from twisted[tls])
Collecting pyopenssl>=16.0.0; extra == "tls" (from twisted[tls])
Requirement already satisfied: six in ./venv/lib/python2.7/site-packages (from Automat>=0.3.0->twisted[tls])
Requirement already satisfied: characteristic in ./venv/lib/python2.7/site-packages (from Automat>=0.3.0->twisted[tls])
Requirement already satisfied: setuptools in ./venv/lib/python2.7/site-packages (from zope.interface>=3.6.0->twisted[tls])
Collecting pyasn1 (from service-identity; extra == "tls"->twisted[tls])
Collecting pyasn1-modules (from service-identity; extra == "tls"->twisted[tls])
Requirement already satisfied: attrs in ./venv/lib/python2.7/site-packages (from service-identity; extra == "tls"->twisted[tls])
Collecting cryptography>=1.3.4 (from pyopenssl>=16.0.0; extra == "tls"->twisted[tls])
Collecting ipaddress (from cryptography>=1.3.4->pyopenssl>=16.0.0; extra == "tls"->twisted[tls])
Collecting enum34 (from cryptography>=1.3.4->pyopenssl>=16.0.0; extra == "tls"->twisted[tls])
Collecting cffi>=1.4.1 (from cryptography>=1.3.4->pyopenssl>=16.0.0; extra == "tls"->twisted[tls])
Collecting pycparser (from cffi>=1.4.1->cryptography>=1.3.4->pyopenssl>=16.0.0; extra == "tls"->twisted[tls])
Installing collected packages: Automat, zope.interface, constantly, pyasn1, pyasn1-modules, idna, ipaddress, enum34, pycparser, cffi, cryptography, pyopenssl, service-identity, twisted
Successfully installed Automat-0.3.0 cffi-1.9.1 constantly-15.1.0 cryptography-1.7.1 enum34-1.1.6 idna-2.2 ipaddress-1.0.17 pyasn1-0.1.9 pyasn1-modules-0.0.8 pycparser-2.17 pyopenssl-16.2.0 service-identity-16.0.0 twisted-16.7.0rc1 zope.interface-4.3.3

This will install Twisted and its dependencies the official pip way, without needing to hardcode which libraries you fetch, and will do the right thing as Twisted eventually adds more dependencies (like when we split out FilePath and Deferred).

- Amber

> On 29 Dec. 2016, at 10:20, John Santos <john at egh.com> wrote:
> 
> Seems to require a new Python module, Automat.  (Not mentioned in the NEWS file, INSTALL, etc.)  I found Automat 0.3.0 (with Glyph's fingerprints on it) at PyPI, but it only exists in .whl format.  Downloaded it, but I'm not sure what to do next.  I was able to get it working by downloading and installing get-pip.py and Automat (contrary to the python.org documentation, I didn't have pip installed on my system even though it is Python 2.7.13 downloaded from python.org.)
>    sudo python get-pip.py
>    sudo pip install Automat
> 
> This is worrisome to me because I think this requires Internet access to pypi.python.org, which I have on my development and testing systems, but not on my production systems.  Everything else I've ever needed, I could download and install source files.
> 
> Having done this, my app seems to run fine (only quick sanity testing so far.)
> 
> 
> ----install---
> Searching for Automat>=0.3.0
> Reading https://pypi.python.org/simple/Automat/ <https://pypi.python.org/simple/Automat/>
> Download error on https://pypi.python.org/simple/Automat/ <https://pypi.python.org/simple/Automat/>: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:590) -- Some packages may not be found!
> Couldn't find index page for 'Automat' (maybe misspelled?)
> Scanning index of all packages (this may take a while)
> Reading https://pypi.python.org/simple/ <https://pypi.python.org/simple/>
> Download error on https://pypi.python.org/simple/ <https://pypi.python.org/simple/>: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:590) -- Some packages may not be found!
> No local packages or working download links found for Automat>=0.3.0
> error: Could not find suitable distribution for Requirement.parse('Automat>=0.3.0')
> ------
> 
> ---try to use without Automat---
> medusa at Medusa:~/run> python medusa_server.py Rain
> Traceback (most recent call last):
>   File "medusa_server.py", line 72, in <module>
>     from twisted.application import service, internet
>   File "/usr/lib/python2.7/site-packages/Twisted-16.7.0rc1-py2.7-linux-x86_64.egg/twisted/application/internet.py", line 54, in <module>
>     from automat import MethodicalMachine
> ImportError: No module named automat
> ------
> 
> On 12/22/2016 11:33 PM, Amber "Hawkie" Brown wrote:
>> Hello everyone, and happy holidays!
>> 
>> Although it didn't quite fall on the solstice, one could call this Twisted release a little ray of sunshine, with some nice new improvements. 16.7.0rc1 brings the following stocking stuffers:
>> 
>> - twisted.web.client.Agent now supports IPv6! It's also now the primary web client in Twisted, with twisted.web.client.getPage being deprecated in favour of it and Treq.
>> - twisted.internet.ssl.CertificateOptions has had its `method` argument deprecated, in favour of the new raiseMinimumTo, lowerMaximumSecurityTo, and insecurelyLowerMinimumTo arguments, which take TLSVersion arguments. This allows you to better give a range of versions of TLS you wish to negotiate, rather than forcing yourself to any one version.
>> - twisted.internet.ssl.CertificateOptions will use OpenSSL's MODE_RELEASE_BUFFERS, which will let it free unused memory that was held by idle TLS connections.
>> - You can now call the new twist runner with `python -m twisted`.
>> - Conch has the beginnings of ECDH key exchange, and supports `hmac-sha2-384` in twisted.conch.ssh.
>> - Better Unicode support in twisted.internet.reactor.spawnProcess, especially on Windows on Python 3.6.
>> - More Python 3 porting in Conch, and more under-the-hood changes to facilitate a Twisted-wide jump to new-style classes only on Python 2 in 2018/2019. This release has also been tested on Python 3.6 on Linux.
>> - Lots of deprecated code removals, to make a sleeker, less confusing Twisted.
>> - 20+ closed tickets.
>> 
>> You can get the tarball and the NEWS file at https://twistedmatrix.com/Releases/rc/16.7.0rc1/ <https://twistedmatrix.com/Releases/rc/16.7.0rc1/> , or you can try it out from PyPI:
>> 
>>     python -m pip install Twisted==16.7.0rc1
>> 
>> Please test it, and let me know how your applications fare, good or bad! If nothing comes up, 16.7 looks like it'll land just before the new year.
>> 
>> With festive hoots,
>>     Amber Brown
>> 
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> 
> 
> -- 
> John Santos
> Evans Griffiths & Hart, Inc.
> 781-861-0670 ext 539
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161229/350d4896/attachment-0002.html>

From chenjianhappy2008 at 126.com  Wed Dec 28 19:39:18 2016
From: chenjianhappy2008 at 126.com (=?GBK?B?s8K9oQ==?=)
Date: Thu, 29 Dec 2016 10:39:18 +0800 (CST)
Subject: [Twisted-Python] hmac-sha2-512 - Corrupted MAC on input with
 OpenSSH
In-Reply-To: <CAG=rPVccsxgVBpb_QarfK4=i+ti_9dpfGWMmJtm7ghP-qTytyA@mail.gmail.com>
References: <7aa77b23.1f5e.1591f6015fc.Coremail.chenjianhappy2008@126.com>
 <CAG=rPVccsxgVBpb_QarfK4=i+ti_9dpfGWMmJtm7ghP-qTytyA@mail.gmail.com>
Message-ID: <789d21f8.2a9f.1594872283e.Coremail.chenjianhappy2008@126.com>




hi:
    Oh, I'm sorry,  It is my server-side code has bugs with Twisted(16.6.0) Conch, that i have fixed it . But 'Message Authentication Code did not verify (packet #3)'  error will occurs with the SecureCRT(8.0.0 or 7.3.4) client.  If I connect OpenSSH_5.3p1 (or OpenSSH_6.6.1p1 ) sshd server through the SecureCRT client, it is fine. Of course， if I connect Twisted SSH server by using the Xshell client with hmac-sha2-512 options or “ssh -m hmac-sha2-512”，it is OK.  I do not know if it is SecureCRT client  bug or  twisted problem.  http://stackoverflow.com/questions/41296412/securecrt-hmac-sha2-512-message-authentication-code-did-not-verify-packet-3






At 2016-12-29 01:40:07, "Craig Rodrigues" <rodrigc at crodrigues.org> wrote:

Jianchen,


Can you provide more details about the server you are writing?


I cannot reproduce your problem with the latest Twisted code in trunk.


Here is what I did:




git clone https://github.com/twisted/twisted twisted-test
cd twisted-test
python setup.py develop
cd docs/conch/examples
mkdir ssh-examples
ckeygen -t rsa -f ssh-keys/ssh_host_rsa_key
twistd -ny demo_recvline.tac




I logged in with:






sshusername at 127.0.0.1 -m hmac-sha2-512 -vvv -p 6022



(using username for the login, and  password for the password)

From the log, I saw:




debug1: Authenticating to 127.0.0.1:6022 as 'username'
debug3: put_host_port: [127.0.0.1]:6022
debug3: hostkeys_foreach: reading file "/Users/crodrigues/.ssh/known_hosts"
debug3: record_hostkey: found key type RSA in file /Users/crodrigues/.ssh/known_hosts:5
debug3: load_hostkeys: loaded 1keys from [127.0.0.1]:6022
debug3: order_hostkeyalgs: prefer hostkeyalgs: ssh-rsa-cert-v01 at openssh.com,rsa-sha2-512,rsa-sha2-256,ssh-rsa
debug3: send packet: type 20
debug1: SSH2_MSG_KEXINIT sent
debug3: receive packet: type 20
debug1: SSH2_MSG_KEXINIT received
debug2: local client KEXINIT proposal
debug2: KEX algorithms: curve25519-sha256 at libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha256,diffie-hellman-group14-sha1,ext-info-c
debug2: host key algorithms: ssh-rsa-cert-v01 at openssh.com,rsa-sha2-512,rsa-sha2-256,ssh-rsa,ecdsa-sha2-nistp256-cert-v01 at openssh.com,ecdsa-sha2-nistp384-cert-v01 at openssh.com,ecdsa-sha2-nistp521-cert-v01 at openssh.com,ssh-ed25519-cert-v01 at openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519
debug2: ciphers ctos: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,3des-cbc
debug2: ciphers stoc: chacha20-poly1305 at openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm at openssh.com,aes256-gcm at openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,3des-cbc
debug2: MACs ctos: hmac-sha2-512
debug2: MACs stoc: hmac-sha2-512
debug2: compression ctos: none,zlib at openssh.com,zlib
debug2: compression stoc: none,zlib at openssh.com,zlib
debug2: languages ctos:
debug2: languages stoc:
debug2: first_kex_follows 0
debug2: reserved 0
debug2: peer server KEXINIT proposal
debug2: KEX algorithms: ecdh-sha2-nistp256,ecdh-sha2-nistk163,ecdh-sha2-nistp224,ecdh-sha2-nistk233,ecdh-sha2-nistb233,ecdh-sha2-nistp384,ecdh-sha2-nistk283,ecdh-sha2-nistk409,ecdh-sha2-nistb409,ecdh-sha2-nistp521,ecdh-sha2-nistt571,diffie-hellman-group1-sha1,diffie-hellman-group14-sha1
debug2: host key algorithms: ssh-rsa
debug2: ciphers ctos: aes256-ctr,aes256-cbc,aes192-ctr,aes192-cbc,aes128-ctr,aes128-cbc,cast128-ctr,cast128-cbc,blowfish-cbc,3des-cbc
debug2: ciphers stoc: aes256-ctr,aes256-cbc,aes192-ctr,aes192-cbc,aes128-ctr,aes128-cbc,cast128-ctr,cast128-cbc,blowfish-cbc,3des-cbc

debug2: MACs ctos: hmac-sha2-512,hmac-sha2-384,hmac-sha2-256,hmac-sha1,hmac-md5

debug2: compression ctos: none,zlib

debug2: compression stoc: none,zlib
debug2: languages ctos:
debug2: languages stoc:debug2: first_kex_follows 0
debug2: reserved 0
debug1: kex: algorithm: ecdh-sha2-nistp256
debug1: kex: host key algorithm: ssh-rsa
debug1: kex: server->client cipher: aes128-ctr MAC: hmac-sha2-512 compression: none
debug1: kex: client->server cipher: aes128-ctr MAC: hmac-sha2-512 compression: none
debug3: send packet: type 30
debug1: sending SSH2_MSG_KEX_ECDH_INIT
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug3: receive packet: type 31
debug1: Server host key: ssh-rsa SHA256:VP7JUyzN/BuRNuCOieijGHuF9fAylDBCYYJAtJ+gDO8
debug3: put_host_port: [127.0.0.1]:6022
debug3: put_host_port: [127.0.0.1]:6022
debug3: hostkeys_foreach: reading file "/Users/crodrigues/.ssh/known_hosts"
debug3: record_hostkey: found key type RSA in file /Users/crodrigues/.ssh/known_hosts:5
debug3: load_hostkeys: loaded 1keys from [127.0.0.1]:6022
debug1: Host '[127.0.0.1]:6022' is known and matches the RSA host key.
debug1: Found key in /Users/crodrigues/.ssh/known_hosts:5
debug3: send packet: type 21
debug2: set_newkeys: mode 1




I did not see the problem that you saw.

--
Craig




On Tue, Dec 20, 2016 at 10:15 PM, 陈健 <chenjianhappy2008 at 126.com> wrote:

 hi:
|
|

    I write a SSH server with Twisted(15.5.0)  Conch.  But it  don't support hmac-sha2-512 MAC algorithms

|
.  However I see this problem has been fixed in https://twistedmatrix.com/trac/ticket/8108 .  I asked the question in http://stackoverflow.com/questions/41254398/twisted-hmac-sha2-512-corrupted-mac-on-input-with-openssh .

Best regards,

 ---jianchen






 


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161229/0b7a752c/attachment-0002.html>

From rodrigc at crodrigues.org  Wed Dec 28 21:35:57 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 28 Dec 2016 23:35:57 -0500
Subject: [Twisted-Python] hmac-sha2-512 - Corrupted MAC on input with
	OpenSSH
In-Reply-To: <789d21f8.2a9f.1594872283e.Coremail.chenjianhappy2008@126.com>
References: <7aa77b23.1f5e.1591f6015fc.Coremail.chenjianhappy2008@126.com>
 <CAG=rPVccsxgVBpb_QarfK4=i+ti_9dpfGWMmJtm7ghP-qTytyA@mail.gmail.com>
 <789d21f8.2a9f.1594872283e.Coremail.chenjianhappy2008@126.com>
Message-ID: <CAG=rPVfLo__eEH=5k2uTLUHRjsU1p3OmvM5dZmcucE_3xF1mtQ@mail.gmail.com>

Hi,

Is this what you are saying:

Twisted Server + OpenSSH client == WORKS
Twisted Server + Xshell client == WORKS
OpenSSH Server + SecureCRT client == WORKS
Twisted Server + SecureCRT client == FAIL

??

I don't have SecureCRT client, so don't know the solution to this problem.

You might want to try searching the SecureCRT site and see if there are any
clues
there:

https://goo.gl/UkKZvI

--
Craig

On Wed, Dec 28, 2016 at 9:39 PM, 陈健 <chenjianhappy2008 at 126.com> wrote:

>
>
> hi:
>     Oh, I'm sorry,  It is my server-side code has bugs with
> Twisted(16.6.0) Conch, that i have fixed it . But 'Message Authentication
> Code did not verify (packet #3)'  error will occurs with the SecureCRT(8.0.0
> or 7.3.4) client.  If I connect OpenSSH_5.3p1 (or OpenSSH_6.6.1p1 ) sshd
> server through the SecureCRT client, it is fine. Of course， if I connect
> Twisted SSH server by using the Xshell client with hmac-sha2-512 options
> or “ssh -m hmac-sha2-512”，it is OK.  I do not know if it is SecureCRT
> client  bug or  twisted problem.  *http://stackoverflow.com/questions/41296412/securecrt-hmac-sha2-512-message-authentication-code-did-not-verify-packet-3
> <http://stackoverflow.com/questions/41296412/securecrt-hmac-sha2-512-message-authentication-code-did-not-verify-packet-3>*
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161228/0960640e/attachment-0002.html>

From chenjianhappy2008 at 126.com  Thu Dec 29 02:47:22 2016
From: chenjianhappy2008 at 126.com (=?GBK?B?s8K9oQ==?=)
Date: Thu, 29 Dec 2016 17:47:22 +0800 (CST)
Subject: [Twisted-Python] hmac-sha2-512 - Corrupted MAC on input with
 OpenSSH
In-Reply-To: <CAG=rPVfgyZLJPcAqrP3jKxEq56ACqwUhcMZBzRxJN0kA5CwMwA@mail.gmail.com>
References: <7aa77b23.1f5e.1591f6015fc.Coremail.chenjianhappy2008@126.com>
 <CAG=rPVccsxgVBpb_QarfK4=i+ti_9dpfGWMmJtm7ghP-qTytyA@mail.gmail.com>
 <789d21f8.2a9f.1594872283e.Coremail.chenjianhappy2008@126.com>
 <CAG=rPVfLo__eEH=5k2uTLUHRjsU1p3OmvM5dZmcucE_3xF1mtQ@mail.gmail.com>
 <208038e.575c.159493a0c1a.Coremail.chenjianhappy2008@126.com>
 <CAG=rPVfgyZLJPcAqrP3jKxEq56ACqwUhcMZBzRxJN0kA5CwMwA@mail.gmail.com>
Message-ID: <1901fa6f.954e.15949fa1388.Coremail.chenjianhappy2008@126.com>

hi,
       Yes, you are right. ssh -vv -oKexAlgorithms=diffie-hellman-group14-sha1 -oMACs=hmac-sha2-512 user at localhost
against a Twisted ssh server, and i saw the problem.  The reason is that twisted(16.6.0) is not supported the diffie-hellman-group14-sha1 and ecdh-sha512-nistp512 key exchange algorithms well, right ?


--

JianChen



At 2016-12-29 16:06:55, "Craig Rodrigues" <rodrigc at crodrigues.org> wrote:

Abhishek Choudhary pointed out to me that you can reproduce this problem easily, even with OpenSSH client.
Look at https://twistedmatrix.com/trac/ticket/8258


and do:



ssh -vv -oKexAlgorithms=diffie-hellman-group14-sha1 -oMACs=hmac-sha2-512 user at localhost

against a Twisted ssh server, and you will see the problem.




--

Craig






On Thu, Dec 29, 2016 at 1:17 AM, 陈健 <chenjianhappy2008 at 126.com> wrote:



hi,
    Yes, your understanding is correct. I must set the hmac-sha2-512 option unable with SecureCRT, it will be OK. I searched Google for a long time, still did not find the any clues!
   
          Twisted Server + OpenSSH client == WORKS
          Twisted Server + Xshell client == WORKS
          OpenSSH Server + SecureCRT client == WORKS
          Twisted Server + SecureCRT client == FAIL


--
JianChen



在 2016-12-29 12:35:57，"Craig Rodrigues" <rodrigc at crodrigues.org> 写道：

Hi,


Is this what you are saying:


Twisted Server + OpenSSH client == WORKS
Twisted Server + Xshell client == WORKS
OpenSSH Server + SecureCRT client == WORKS
Twisted Server + SecureCRT client == FAIL


??


I don't have SecureCRT client, so don't know the solution to this problem.


You might want to try searching the SecureCRT site and see if there are any clues
there:


https://goo.gl/UkKZvI



--
Craig


On Wed, Dec 28, 2016 at 9:39 PM, 陈健 <chenjianhappy2008 at 126.com> wrote:




hi:
    Oh, I'm sorry,  It is my server-side code has bugs with Twisted(16.6.0) Conch, that i have fixed it . But 'Message Authentication Code did not verify (packet #3)'  error will occurs with the SecureCRT(8.0.0 or 7.3.4) client.  If I connect OpenSSH_5.3p1 (or OpenSSH_6.6.1p1 ) sshd server through the SecureCRT client, it is fine. Of course， if I connect Twisted SSH server by using the Xshell client with hmac-sha2-512 options or “ssh -m hmac-sha2-512”，it is OK.  I do not know if it is SecureCRT client  bug or  twisted problem.  http://stackoverflow.com/questions/41296412/securecrt-hmac-sha2-512-message-authentication-code-did-not-verify-packet-3






 


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161229/dca1504f/attachment-0002.html>

From rodrigc at crodrigues.org  Thu Dec 29 03:30:19 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 29 Dec 2016 05:30:19 -0500
Subject: [Twisted-Python] hmac-sha2-512 - Corrupted MAC on input with
 OpenSSH
In-Reply-To: <1901fa6f.954e.15949fa1388.Coremail.chenjianhappy2008@126.com>
References: <7aa77b23.1f5e.1591f6015fc.Coremail.chenjianhappy2008@126.com>
 <CAG=rPVccsxgVBpb_QarfK4=i+ti_9dpfGWMmJtm7ghP-qTytyA@mail.gmail.com>
 <789d21f8.2a9f.1594872283e.Coremail.chenjianhappy2008@126.com>
 <CAG=rPVfLo__eEH=5k2uTLUHRjsU1p3OmvM5dZmcucE_3xF1mtQ@mail.gmail.com>
 <208038e.575c.159493a0c1a.Coremail.chenjianhappy2008@126.com>
 <CAG=rPVfgyZLJPcAqrP3jKxEq56ACqwUhcMZBzRxJN0kA5CwMwA@mail.gmail.com>
 <1901fa6f.954e.15949fa1388.Coremail.chenjianhappy2008@126.com>
Message-ID: <CAG=rPVcDhh5Q2Higv_qEC07pfZwev4UifRihitG-2Rqrtsywbw@mail.gmail.com>

Hi,

Well in Twisted checked out directly from GitHub, this seems to work:

ssh -vv -oKexAlgorithms=ecdh-sha2-nistp256 -oMACs=hmac-sha2-512
user at localhost

and these fail:

ssh -vv -oKexAlgorithms=diffie-hellman-group1-sha1 -oMACs=hmac-sha2-512
user at localhost
ssh -vv -oKexAlgorithms=diffie-hellman-group14-sha1 -oMACs=hmac-sha2-512
user at localhost
ssh -vv -oKexAlgorithms=ecdh-sha2-nistp384 -oMACs=hmac-sha2-512
user at localhost
ssh -vv -oKexAlgorithms=ecdh-sha2-nistp521 -oMACs=hmac-sha2-512
user at localhost

--
Craig


On Thu, Dec 29, 2016 at 4:47 AM, 陈健 <chenjianhappy2008 at 126.com> wrote:

> hi,
>        Yes, you are right. ssh -vv -oKexAlgorithms=diffie-hellman-group14-sha1
> -oMACs=hmac-sha2-512 user at localhost
> against a Twisted ssh server, and i saw the problem.  The reason is that
> twisted(16.6.0) is not supported the diffie-hellman-group14-sha1 and ecdh-sha512-nistp512
> key exchange algorithms well, right ?
>
> --
>
> JianChen
>
>
> At 2016-12-29 16:06:55, "Craig Rodrigues" <rodrigc at crodrigues.org> wrote:
>
> Abhishek Choudhary pointed out to me that you can reproduce this problem
> easily, even with OpenSSH client.
> Look at https://twistedmatrix.com/trac/ticket/8258
>
> and do:
>
> ssh -vv -oKexAlgorithms=diffie-hellman-group14-sha1 -oMACs=hmac-sha2-512
> user at localhost
>
> against a Twisted ssh server, and you will see the problem.
>
>
> --
>
> Craig
>
>
>
> On Thu, Dec 29, 2016 at 1:17 AM, 陈健 <chenjianhappy2008 at 126.com> wrote:
>
>>
>> hi,
>>     Yes, your understanding is correct. I must set the hmac-sha2-512
>> option unable with SecureCRT, it will be OK. I searched Google for a long
>> time, still did not find the any clues!
>>
>>           Twisted Server + OpenSSH client == WORKS
>>           Twisted Server + Xshell client == WORKS
>>           OpenSSH Server + SecureCRT client == WORKS
>>           Twisted Server + SecureCRT client == FAIL
>>
>> --
>> JianChen
>>
>>
>> 在 2016-12-29 12:35:57，"Craig Rodrigues" <rodrigc at crodrigues.org> 写道：
>>
>> Hi,
>>
>> Is this what you are saying:
>>
>> Twisted Server + OpenSSH client == WORKS
>> Twisted Server + Xshell client == WORKS
>> OpenSSH Server + SecureCRT client == WORKS
>> Twisted Server + SecureCRT client == FAIL
>>
>> ??
>>
>> I don't have SecureCRT client, so don't know the solution to this problem.
>>
>> You might want to try searching the SecureCRT site and see if there are
>> any clues
>> there:
>>
>> https://goo.gl/UkKZvI
>>
>> --
>> Craig
>>
>> On Wed, Dec 28, 2016 at 9:39 PM, 陈健 <chenjianhappy2008 at 126.com> wrote:
>>
>>>
>>>
>>> hi:
>>>     Oh, I'm sorry,  It is my server-side code has bugs with
>>> Twisted(16.6.0) Conch, that i have fixed it . But 'Message
>>> Authentication Code did not verify (packet #3)'  error will occurs with
>>> the SecureCRT(8.0.0 or 7.3.4) client.  If I connect OpenSSH_5.3p1 (or
>>> OpenSSH_6.6.1p1 ) sshd server through the SecureCRT client, it is fine.
>>> Of course， if I connect Twisted SSH server by using the Xshell client with
>>> hmac-sha2-512 options or “ssh -m hmac-sha2-512”，it is OK.  I do not
>>> know if it is SecureCRT client  bug or  twisted problem.  *http://stackoverflow.com/questions/41296412/securecrt-hmac-sha2-512-message-authentication-code-did-not-verify-packet-3
>>> <http://stackoverflow.com/questions/41296412/securecrt-hmac-sha2-512-message-authentication-code-did-not-verify-packet-3>*
>>>
>>>
>>
>>
>>
>
>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161229/a7835226/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Dec 29 05:23:44 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 29 Dec 2016 04:23:44 -0800
Subject: [Twisted-Python] twisted.python.sendmsg segfault - looking for
 confirmation
In-Reply-To: <4F35146F-E43C-437F-B33A-4F6CEA9343F6@gmail.com>
References: <4F35146F-E43C-437F-B33A-4F6CEA9343F6@gmail.com>
Message-ID: <EA9B12E5-C604-4E2D-B8D6-72A509DE827E@twistedmatrix.com>


> On Dec 27, 2016, at 19:15, ex vito <ex.vitorino at gmail.com> wrote:
> 
> As far as I can tell, no code in Twisted uses sendmsg in the way the code is using it. However, twisted.python.sendmsg is a public API so someone somewhere may hit this like I just did.

Quite.

> Other than looking for confirmation, I have a fix which I included two isolated commits in the PR. Twisted project members: if this is confirmed, maybe a ticket should be created in Trac and an independent PR created, correct?

You should definitely create that ticket.  In fact, you don't need to wait for confirmation - create the ticket now, and send the link to it, so someone else can comment on the ticket when it is confirmed - discussion of the reproduction process can happen there.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161229/b00080fa/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Dec 29 06:27:44 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 29 Dec 2016 05:27:44 -0800
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate
	Announcement
In-Reply-To: <2da9e7e0-4acf-d9af-9039-72533d3bfb24@egh.com>
References: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
 <2da9e7e0-4acf-d9af-9039-72533d3bfb24@egh.com>
Message-ID: <8CFE76D7-FB88-4734-9015-8FF36D57F0FD@twistedmatrix.com>


> On Dec 28, 2016, at 15:20, John Santos <JOHN at egh.com> wrote:
> 
> Seems to require a new Python module, Automat.

Good catch, that probably should have been announced at least a little :).

> (Not mentioned in the NEWS file, INSTALL, etc.)

Despite the fact that it would have been good to mention this particular dependency because its adoption is a new architectural direction for Twisted, in general we're actually planning to do less communication of dependencies in this way.  Right now, we have redundant listing of dependencies in a few places, but in the future, setup.py (or more specifically, "packaging metadata") will be the one, authoritative place that such things are listed.

> I found Automat 0.3.0 (with Glyph's fingerprints on it) at PyPI, but it only exists in .whl format.

Although you probably should just use the wheel, the fact that there was only a wheel was an oversight.  I've uploaded an sdist and pushed a corresponding tag (after making sure that the source files all matched, of course).

> Downloaded it, but I'm not sure what to do next.  [...] This is worrisome to me because I think this requires Internet access to pypi.python.org, which I have on my development and testing systems, but not on my production systems.  Everything else I've ever needed, I could download and install source files.


As Amber already explained, the ability to deploy offline is very much an important part of the pip/wheel ecosystem.  I went into some detail in one of my own blog posts on this: https://glyph.twistedmatrix.com/2015/03/docker-deploy-double-dutch.html <https://glyph.twistedmatrix.com/2015/03/docker-deploy-double-dutch.html>

Increasingly, we are assuming a pip-like packaging toolchain for dealing with Twisted's dependencies, so getting familiar with this stuff - pip, requirements.txt, pinning, virtualenv - is worthwhile.  (It'll make your life easier in more ways than one.)  It should handily meet all your requirements for security and flexibility, and if it doesn't, we have a good working relationship with the maintainers of all those tools so we'd like to hear about if it's a problem :).

> Having done this, my app seems to run fine (only quick sanity testing so far.)

Thanks for testing!

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161229/97115783/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Dec 29 06:28:44 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 29 Dec 2016 05:28:44 -0800
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate
	Announcement
In-Reply-To: <CAEeXt4Nj3LmqZn_b3CdULwG=nu565xKpZx52i6aG3WjNHW5-4w@mail.gmail.com>
References: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
 <8EE8E179-EA0A-47EC-9449-6D7C3D8F7260@gmail.com>
 <E19C9739-651D-4E4A-BA39-D37C060F89D6@twistedmatrix.com>
 <A12AF755-CE71-4C4A-883F-D36F9DDD8E29@twistedmatrix.com>
 <CAEeXt4Nj3LmqZn_b3CdULwG=nu565xKpZx52i6aG3WjNHW5-4w@mail.gmail.com>
Message-ID: <083421AA-BD84-46E4-BE4B-7AD81B5F280A@twistedmatrix.com>


> On Dec 26, 2016, at 16:14, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> On Fri, Dec 23, 2016 at 4:22 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> 
> It's merged now: https://twistedmatrix.com/trac/ticket/8911#comment:5 <https://twistedmatrix.com/trac/ticket/8911#comment:5>
> 
> On a related note - this still linked the '#' syntax back to the ticket number in Trac.
> 
> Perhaps related - tomprince fixed the bugs that were preventing us from upgrading us to 1.2, and upgraded us to 1.2.  So perhaps this has introduced a problem :).
> 
> -glyph
> 
> 
> It looks like the link to ticket 599 in the merge/resolve comment on ticket 8911 is a different kind of link than the one I was looking in to.  I agree it would be nice to fix this, too, and perhaps I'll take a look.  My goal was only to stop ticket 599 (for example) from also receiving a copy of this comment - which appears to have succeeded.  Let me know if I've missed something.

Sorry - this is fine.  I mistakenly assumed that the fact that the link was highlighted meant that the comment happened.  If we were to kill '#' links, that would also break all the existing commit messages, which would be bad.  So please leave it as-is!

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161229/a672a166/attachment-0002.html>

From john at egh.com  Thu Dec 29 10:43:22 2016
From: john at egh.com (John Santos)
Date: Thu, 29 Dec 2016 12:43:22 -0500
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate
	Announcement
In-Reply-To: <21B58730-1090-443C-A3CF-01E66C79D989@atleastfornow.net>
References: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
 <2da9e7e0-4acf-d9af-9039-72533d3bfb24@egh.com>
 <21B58730-1090-443C-A3CF-01E66C79D989@atleastfornow.net>
Message-ID: <02990d9e-4884-f1ad-2220-c9a5de7c605f@egh.com>

Thank you (and Glyph for his followup) for the detailed instructions.  I 
will be trying this on our 2nd development system in a few days (or 
possibly sooner on the test system if 16.7.0 is released before I get 
around to it :-)) and will let you know if I encounter any difficulties.


On 12/28/2016 6:37 PM, Amber "Hawkie" Brown wrote:
> Hi John,
>
> .whl is just an optimised binary format, and can be installed by pip 
> from a local file. If you want to get all the dependencies of Twisted 
> in a future-proof way, without network on production, just do this on 
> a machine with the same arch/OS:
>
> hawkowl /p/t/tx> pip download twisted[tls]==16.7.0rc1
> [LOADING BARS ELINED]
> Successfully downloaded twisted zope.interface constantly incremental 
> Automat pyopenssl service-identity idna setuptools six characteristic 
> cryptography pyasn1 pyasn1-modules attrs ipaddress enum34 cffi pycparser
>
> hawkowl /p/t/tx> ls
> Automat-0.3.0-py2.py3-none-any.whl      ipaddress-1.0.17-py2-none-any.whl
> Twisted-16.7.0rc1.tar.bz2       pyOpenSSL-16.2.0-py2.py3-none-any.whl
> attrs-16.3.0-py2.py3-none-any.whl       pyasn1-0.1.9-py2.py3-none-any.whl
> cffi-1.9.1-cp27-cp27m-macosx_10_10_intel.whl     
>  pyasn1_modules-0.0.8-py2.py3-none-any.whl
> characteristic-14.3.0-py2.py3-none-any.whl      pycparser-2.17.tar.gz
> constantly-15.1.0-py2.py3-none-any.whl     
>  service_identity-16.0.0-py2.py3-none-any.whl
> cryptography-1.7.1-cp27-cp27m-macosx_10_10_intel.whl   
>  setuptools-32.3.0-py2.py3-none-any.whl
> enum34-1.1.6-py2-none-any.whl       six-1.10.0-py2.py3-none-any.whl
> idna-2.2-py2.py3-none-any.whl       
> zope.interface-4.3.3-cp27-cp27m-macosx_10_11_x86_64.whl
> incremental-16.10.1-py2.py3-none-any.whl
>
> Put these files on the target machine. Then on the target machine, 
> with no internet connection:
>
> hawkowl /p/t/tx> virtualenv venv
> Using real prefix 
> '/System/Library/Frameworks/Python.framework/Versions/2.7'
> New python executable in /private/tmp/tx/venv/bin/python
> Installing setuptools, pip, wheel...done.
>
> # Because incremental is setup_requires on twisted, install it 
> explicitly or setuptools will go try and fetch it
> hawkowl /p/t/tx [1]> venv/bin/pip install --no-index --find-links ./ 
> incremental
> Collecting incremental
> Installing collected packages: incremental
> Successfully installed incremental-16.10.1
>
> hawkowl /p/t/tx> venv/bin/pip install --no-index --find-links ./ 
> twisted[tls]
> Collecting twisted[tls]
> Collecting Automat>=0.3.0 (from twisted[tls])
> Collecting zope.interface>=3.6.0 (from twisted[tls])
> Collecting constantly>=15.1 (from twisted[tls])
> Requirement already satisfied: incremental>=16.10.1 in 
> ./venv/lib/python2.7/site-packages (from twisted[tls])
> Collecting service-identity; extra == "tls" (from twisted[tls])
> Collecting idna>=0.6; extra == "tls" (from twisted[tls])
> Collecting pyopenssl>=16.0.0; extra == "tls" (from twisted[tls])
> Requirement already satisfied: six in 
> ./venv/lib/python2.7/site-packages (from Automat>=0.3.0->twisted[tls])
> Requirement already satisfied: characteristic in 
> ./venv/lib/python2.7/site-packages (from Automat>=0.3.0->twisted[tls])
> Requirement already satisfied: setuptools in 
> ./venv/lib/python2.7/site-packages (from 
> zope.interface>=3.6.0->twisted[tls])
> Collecting pyasn1 (from service-identity; extra == "tls"->twisted[tls])
> Collecting pyasn1-modules (from service-identity; extra == 
> "tls"->twisted[tls])
> Requirement already satisfied: attrs in 
> ./venv/lib/python2.7/site-packages (from service-identity; extra == 
> "tls"->twisted[tls])
> Collecting cryptography>=1.3.4 (from pyopenssl>=16.0.0; extra == 
> "tls"->twisted[tls])
> Collecting ipaddress (from cryptography>=1.3.4->pyopenssl>=16.0.0; 
> extra == "tls"->twisted[tls])
> Collecting enum34 (from cryptography>=1.3.4->pyopenssl>=16.0.0; extra 
> == "tls"->twisted[tls])
> Collecting cffi>=1.4.1 (from cryptography>=1.3.4->pyopenssl>=16.0.0; 
> extra == "tls"->twisted[tls])
> Collecting pycparser (from 
> cffi>=1.4.1->cryptography>=1.3.4->pyopenssl>=16.0.0; extra == 
> "tls"->twisted[tls])
> Installing collected packages: Automat, zope.interface, constantly, 
> pyasn1, pyasn1-modules, idna, ipaddress, enum34, pycparser, cffi, 
> cryptography, pyopenssl, service-identity, twisted
> Successfully installed Automat-0.3.0 cffi-1.9.1 constantly-15.1.0 
> cryptography-1.7.1 enum34-1.1.6 idna-2.2 ipaddress-1.0.17 pyasn1-0.1.9 
> pyasn1-modules-0.0.8 pycparser-2.17 pyopenssl-16.2.0 
> service-identity-16.0.0 twisted-16.7.0rc1 zope.interface-4.3.3
>
> This will install Twisted and its dependencies the official pip way, 
> without needing to hardcode which libraries you fetch, and will do the 
> right thing as Twisted eventually adds more dependencies (like when we 
> split out FilePath and Deferred).
>
> - Amber
>
>> On 29 Dec. 2016, at 10:20, John Santos <john at egh.com 
>> <mailto:john at egh.com>> wrote:
>>
>> Seems to require a new Python module, Automat.  (Not mentioned in the 
>> NEWS file, INSTALL, etc.)  I found Automat 0.3.0 (with Glyph's 
>> fingerprints on it) at PyPI, but it only exists in .whl format.  
>> Downloaded it, but I'm not sure what to do next.  I was able to get 
>> it working by downloading and installing get-pip.py and Automat 
>> (contrary to the python.org <http://python.org> documentation, I 
>> didn't have pip installed on my system even though it is Python 
>> 2.7.13 downloaded from python.org <http://python.org>.)
>>    sudo python get-pip.py
>>    sudo pip install Automat
>>
>> This is worrisome to me because I think this requires Internet access 
>> to pypi.python.org <http://pypi.python.org>, which I have on my 
>> development and testing systems, but not on my production systems.  
>> Everything else I've ever needed, I could download and install source 
>> files.
>>
>> Having done this, my app seems to run fine (only quick sanity testing 
>> so far.)
>>
>>
>> ----install---
>> Searching for Automat>=0.3.0
>> Reading https://pypi.python.org/simple/Automat/
>> Download error on https://pypi.python.org/simple/Automat/: [SSL: 
>> CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:590) -- 
>> Some packages may not be found!
>> Couldn't find index page for 'Automat' (maybe misspelled?)
>> Scanning index of all packages (this may take a while)
>> Reading https://pypi.python.org/simple/
>> Download error on https://pypi.python.org/simple/: [SSL: 
>> CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:590) -- 
>> Some packages may not be found!
>> No local packages or working download links found for Automat>=0.3.0
>> error: Could not find suitable distribution for 
>> Requirement.parse('Automat>=0.3.0')
>> ------
>>
>> ---try to use without Automat---
>> medusa at Medusa:~/run> python medusa_server.py Rain
>> Traceback (most recent call last):
>>   File "medusa_server.py", line 72, in <module>
>>     from twisted.application import service, internet
>>   File 
>> "/usr/lib/python2.7/site-packages/Twisted-16.7.0rc1-py2.7-linux-x86_64.egg/twisted/application/internet.py", 
>> line 54, in <module>
>>     from automat import MethodicalMachine
>> ImportError: No module named automat
>> ------
>>
>> On 12/22/2016 11:33 PM, Amber "Hawkie" Brown wrote:
>>> Hello everyone, and happy holidays!
>>>
>>> Although it didn't quite fall on the solstice, one could call this 
>>> Twisted release a little ray of sunshine, with some nice new 
>>> improvements. 16.7.0rc1 brings the following stocking stuffers:
>>>
>>> - twisted.web.client.Agent now supports IPv6! It's also now the 
>>> primary web client in Twisted, with twisted.web.client.getPage being 
>>> deprecated in favour of it and Treq.
>>> - twisted.internet.ssl.CertificateOptions has had its `method` 
>>> argument deprecated, in favour of the new raiseMinimumTo, 
>>> lowerMaximumSecurityTo, and insecurelyLowerMinimumTo arguments, 
>>> which take TLSVersion arguments. This allows you to better give a 
>>> range of versions of TLS you wish to negotiate, rather than forcing 
>>> yourself to any one version.
>>> - twisted.internet.ssl.CertificateOptions will use OpenSSL's 
>>> MODE_RELEASE_BUFFERS, which will let it free unused memory that was 
>>> held by idle TLS connections.
>>> - You can now call the new twist runner with `python -m twisted`.
>>> - Conch has the beginnings of ECDH key exchange, and supports 
>>> `hmac-sha2-384` in twisted.conch.ssh.
>>> - Better Unicode support in twisted.internet.reactor.spawnProcess, 
>>> especially on Windows on Python 3.6.
>>> - More Python 3 porting in Conch, and more under-the-hood changes to 
>>> facilitate a Twisted-wide jump to new-style classes only on Python 2 
>>> in 2018/2019. This release has also been tested on Python 3.6 on Linux.
>>> - Lots of deprecated code removals, to make a sleeker, less 
>>> confusing Twisted.
>>> - 20+ closed tickets.
>>>
>>> You can get the tarball and the NEWS file at 
>>> https://twistedmatrix.com/Releases/rc/16.7.0rc1/ , or you can try it 
>>> out from PyPI:
>>>
>>>     python -m pip install Twisted==16.7.0rc1
>>>
>>> Please test it, and let me know how your applications fare, good or 
>>> bad! If nothing comes up, 16.7 looks like it'll land just before the 
>>> new year.
>>>
>>> With festive hoots,
>>>     Amber Brown
>>>
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>> -- 
>> John Santos
>> Evans Griffiths & Hart, Inc.
>> 781-861-0670 ext 539
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com 
>> <mailto:Twisted-Python at twistedmatrix.com>
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161229/0f45da22/attachment-0002.html>

From ex.vitorino at gmail.com  Thu Dec 29 12:01:04 2016
From: ex.vitorino at gmail.com (ex vito)
Date: Thu, 29 Dec 2016 19:01:04 +0000
Subject: [Twisted-Python] twisted.python.sendmsg segfault - looking for
	confirmation
In-Reply-To: <EA9B12E5-C604-4E2D-B8D6-72A509DE827E@twistedmatrix.com>
References: <4F35146F-E43C-437F-B33A-4F6CEA9343F6@gmail.com>
 <EA9B12E5-C604-4E2D-B8D6-72A509DE827E@twistedmatrix.com>
Message-ID: <A966C31E-FE51-44CC-836F-34063DC7C550@gmail.com>

On 2016-12-29, at 12:23, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
>> On Dec 27, 2016, at 19:15, ex vito <ex.vitorino at gmail.com> wrote:
>> 
>> Other than looking for confirmation, I have a fix which I included two isolated commits in the PR. Twisted project members: if this is confirmed, maybe a ticket should be created in Trac and an independent PR created, correct?
> 
> You should definitely create that ticket.  In fact, you don't need to wait for confirmation - create the ticket now, and send the link to it, so someone else can comment on the ticket when it is confirmed - discussion of the reproduction process can happen there.


Done,

Ticket: https://twistedmatrix.com/trac/ticket/8969
PR: https://github.com/twisted/twisted/pull/650

Up for review with a guidance request on how to achieve 100% diff coverage given that different platforms behave differently with the same input.

Thanks and regards,
--
exvito

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161229/736c59ca/attachment-0002.html>

From screwtape at froup.com  Thu Dec 29 17:20:05 2016
From: screwtape at froup.com (Tim Allen)
Date: Fri, 30 Dec 2016 11:20:05 +1100
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate
	Announcement
In-Reply-To: <8CFE76D7-FB88-4734-9015-8FF36D57F0FD@twistedmatrix.com>
References: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
 <2da9e7e0-4acf-d9af-9039-72533d3bfb24@egh.com>
 <8CFE76D7-FB88-4734-9015-8FF36D57F0FD@twistedmatrix.com>
Message-ID: <20161230002005.sri3tv4tea3i2n3m@boombah.thristian.org>

On Thu, Dec 29, 2016 at 05:27:44AM -0800, Glyph Lefkowitz wrote:
> Increasingly, we are assuming a pip-like packaging toolchain for
> dealing with Twisted's dependencies, so getting familiar with this
> stuff - pip, requirements.txt, pinning, virtualenv - is worthwhile.
> (It'll make your life easier in more ways than one.)

I wasn't going to mention it (because we found a workaround), but since
the topic has come up...

My current employer has a fully pip-based packaging toolchain for all
our internal Python apps, where we build wheels for our apps and all
their dependencies, and then deploy them into a virtualenv in
production. For reproducability reasons, we have a PyPI mirror inside
the corporate firewall, and our wheel-building Docker image has
a `pip.conf` configured to point at it.

Twisted 16.6 broke this system when it added a package named
"incremental" to the `setup_requires` list in setup.py. Because
`setup_requires` is a feature provided by setuptools, packages listed
there are installed by (the same machinery as) setuptools' `ez_install`
command, which does *not* respect `pip.conf`, and so it tried to
download the package from upstream PyPI and timed out banging its head
against the firewall.

As a workaround, we messed with our build-scripts to manually "pip
install" incremental before installing Twisted, or anything that depends
on it, so everything's fine again.

The Python Packaging Authority already has plans for replacing
`setup_requires` with something more Pip-friendly (see PEP 518), so over
time this won't be an issue. For the short term, though, I hope there
won't be too many more things added to `setup_requires` without
announcement.


Tim.



From steve at stevemorin.com  Thu Dec 29 17:29:38 2016
From: steve at stevemorin.com (Steve Morin)
Date: Thu, 29 Dec 2016 16:29:38 -0800
Subject: [Twisted-Python] AWS Auth v4 for Twisted?
In-Reply-To: <CA+TSurANEugvPy7+WGa=nDYB=S9MoDgkRjaaSUC6iLiGhGy4PA@mail.gmail.com>
References: <CAEeXt4N5O=yfcSPqVPcxwaadLi4L4tCUc1d6TXkRxadKmpGNnA@mail.gmail.com>
 <CA+TSurANEugvPy7+WGa=nDYB=S9MoDgkRjaaSUC6iLiGhGy4PA@mail.gmail.com>
Message-ID: <CAPxhEGdBGid62OM4_xLfjEDUfEWbhP7yBn=RCkmm24AtnJzE8w@mail.gmail.com>

Mark,
  Did you get confirmation from your work?
-Steve

On Sun, Dec 25, 2016 at 1:44 PM, Mark Williams <markrwilliams at gmail.com>
wrote:

> I implemented this at work.  On Tuesday I'll confirm my company's open
> source policy will allow me to contribute it back to txaws.
>
> On Sun, Dec 25, 2016 at 7:09 AM, Jean-Paul Calderone <
> exarkun at twistedmatrix.com> wrote:
>
>> Seeking a library that implements this for use with txAWS.  More details:
>>
>> https://stackoverflow.com/questions/41322251/is-there-an-
>> aws-auth-v4-implementation-usable-with-a-twisted-friendly-http-clien
>>
>> Jean-Paul
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
*Steve Morin | Managing Partner - CTO*
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161229/20f4cc04/attachment-0002.html>

From donald at stufft.io  Thu Dec 29 17:29:57 2016
From: donald at stufft.io (Donald Stufft)
Date: Thu, 29 Dec 2016 19:29:57 -0500
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate
	Announcement
In-Reply-To: <20161230002005.sri3tv4tea3i2n3m@boombah.thristian.org>
References: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
 <2da9e7e0-4acf-d9af-9039-72533d3bfb24@egh.com>
 <8CFE76D7-FB88-4734-9015-8FF36D57F0FD@twistedmatrix.com>
 <20161230002005.sri3tv4tea3i2n3m@boombah.thristian.org>
Message-ID: <D73C6920-5EF9-4AB0-B553-93F9EE314341@stufft.io>


> On Dec 29, 2016, at 7:20 PM, Tim Allen <screwtape at froup.com> wrote:
> 
> On Thu, Dec 29, 2016 at 05:27:44AM -0800, Glyph Lefkowitz wrote:
>> Increasingly, we are assuming a pip-like packaging toolchain for
>> dealing with Twisted's dependencies, so getting familiar with this
>> stuff - pip, requirements.txt, pinning, virtualenv - is worthwhile.
>> (It'll make your life easier in more ways than one.)
> 
> I wasn't going to mention it (because we found a workaround), but since
> the topic has come up...
> 
> My current employer has a fully pip-based packaging toolchain for all
> our internal Python apps, where we build wheels for our apps and all
> their dependencies, and then deploy them into a virtualenv in
> production. For reproducability reasons, we have a PyPI mirror inside
> the corporate firewall, and our wheel-building Docker image has
> a `pip.conf` configured to point at it.
> 
> Twisted 16.6 broke this system when it added a package named
> "incremental" to the `setup_requires` list in setup.py. Because
> `setup_requires` is a feature provided by setuptools, packages listed
> there are installed by (the same machinery as) setuptools' `ez_install`
> command, which does *not* respect `pip.conf`, and so it tried to
> download the package from upstream PyPI and timed out banging its head
> against the firewall.
> 
> As a workaround, we messed with our build-scripts to manually "pip
> install" incremental before installing Twisted, or anything that depends
> on it, so everything's fine again.
> 
> The Python Packaging Authority already has plans for replacing
> `setup_requires` with something more Pip-friendly (see PEP 518), so over
> time this won't be an issue. For the short term, though, I hope there
> won't be too many more things added to `setup_requires` without
> announcement.
> 



FTR, you can configure setup_requires too, it just uses a different format.
In any of the files listed at https://docs.python.org/3.6/install/index.html#location-and-names-of-config-files <https://docs.python.org/3.6/install/index.html#location-and-names-of-config-files>
You can drop a 

[easy_install]
Index_url = https://private.example.com/simple/
allow_hosts = private.example.com  # not strictly required, but will error instead of timeout for non private.example.com

I’m not 100% sure on the exact syntax/structure, but something like that should work.


—
Donald Stufft



-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161229/2819f4cf/attachment-0002.html>

From mithrandi at mithrandi.net  Thu Dec 29 18:55:00 2016
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Fri, 30 Dec 2016 01:55:00 +0000
Subject: [Twisted-Python] AWS Auth v4 for Twisted?
In-Reply-To: <CAPxhEGdBGid62OM4_xLfjEDUfEWbhP7yBn=RCkmm24AtnJzE8w@mail.gmail.com>
References: <CAEeXt4N5O=yfcSPqVPcxwaadLi4L4tCUc1d6TXkRxadKmpGNnA@mail.gmail.com>
 <CA+TSurANEugvPy7+WGa=nDYB=S9MoDgkRjaaSUC6iLiGhGy4PA@mail.gmail.com>
 <CAPxhEGdBGid62OM4_xLfjEDUfEWbhP7yBn=RCkmm24AtnJzE8w@mail.gmail.com>
Message-ID: <CAMcKhMTc=tOS13vG84OsptHhprP532xnJBqiEb6HEniVCPu75g@mail.gmail.com>

On Fri, 30 Dec 2016 at 02:30 Steve Morin <steve at stevemorin.com> wrote:

> Mark,
>   Did you get confirmation from your work?
>

It seems like he did; see https://github.com/twisted/txaws/pull/16 for more
details.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161230/ede52d74/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Dec 29 18:56:43 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 29 Dec 2016 17:56:43 -0800
Subject: [Twisted-Python] twisted.python.sendmsg segfault - looking for
 confirmation
In-Reply-To: <A966C31E-FE51-44CC-836F-34063DC7C550@gmail.com>
References: <4F35146F-E43C-437F-B33A-4F6CEA9343F6@gmail.com>
 <EA9B12E5-C604-4E2D-B8D6-72A509DE827E@twistedmatrix.com>
 <A966C31E-FE51-44CC-836F-34063DC7C550@gmail.com>
Message-ID: <669E1018-9EEF-41B1-99F1-22FDE09DE075@twistedmatrix.com>


> On Dec 29, 2016, at 11:01 AM, ex vito <ex.vitorino at gmail.com> wrote:
> 
> On 2016-12-29, at 12:23, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>> 
>>> On Dec 27, 2016, at 19:15, ex vito <ex.vitorino at gmail.com <mailto:ex.vitorino at gmail.com>> wrote:
>>> 
>>> Other than looking for confirmation, I have a fix which I included two isolated commits in the PR. Twisted project members: if this is confirmed, maybe a ticket should be created in Trac and an independent PR created, correct?
>> 
>> You should definitely create that ticket.  In fact, you don't need to wait for confirmation - create the ticket now, and send the link to it, so someone else can comment on the ticket when it is confirmed - discussion of the reproduction process can happen there.
> 
> 
> Done,
> 
> Ticket: https://twistedmatrix.com/trac/ticket/8969 <https://twistedmatrix.com/trac/ticket/8969>
> PR: https://github.com/twisted/twisted/pull/650 <https://github.com/twisted/twisted/pull/650>
> 
> Up for review with a guidance request on how to achieve 100% diff coverage given that different platforms behave differently with the same input.

All our supported platforms submit coverage reports; the coverage reported by codecov should be the union of all those reports.  So, when your code gets pushed to a branch and run on the buildbots, the coverage report should indicate that.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161229/78ce3da1/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Dec 29 19:07:32 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 29 Dec 2016 18:07:32 -0800
Subject: [Twisted-Python] Twisted 16.7.0rc1 Release Candidate
	Announcement
In-Reply-To: <20161230002005.sri3tv4tea3i2n3m@boombah.thristian.org>
References: <E3DC7732-2B53-4F79-B108-CD8029AB3975@atleastfornow.net>
 <2da9e7e0-4acf-d9af-9039-72533d3bfb24@egh.com>
 <8CFE76D7-FB88-4734-9015-8FF36D57F0FD@twistedmatrix.com>
 <20161230002005.sri3tv4tea3i2n3m@boombah.thristian.org>
Message-ID: <78CE3AEC-5516-4F8B-9E33-F62DEF02F380@twistedmatrix.com>


> On Dec 29, 2016, at 4:20 PM, Tim Allen <screwtape at froup.com> wrote:
> 
> On Thu, Dec 29, 2016 at 05:27:44AM -0800, Glyph Lefkowitz wrote:
>> Increasingly, we are assuming a pip-like packaging toolchain for
>> dealing with Twisted's dependencies, so getting familiar with this
>> stuff - pip, requirements.txt, pinning, virtualenv - is worthwhile.
>> (It'll make your life easier in more ways than one.)
> 
> I wasn't going to mention it (because we found a workaround), but since
> the topic has come up...
> 
> My current employer has a fully pip-based packaging toolchain for all
> our internal Python apps, where we build wheels for our apps and all
> their dependencies, and then deploy them into a virtualenv in
> production. For reproducability reasons, we have a PyPI mirror inside
> the corporate firewall, and our wheel-building Docker image has
> a `pip.conf` configured to point at it.
> 
> Twisted 16.6 broke this system when it added a package named
> "incremental" to the `setup_requires` list in setup.py. Because
> `setup_requires` is a feature provided by setuptools, packages listed
> there are installed by (the same machinery as) setuptools' `ez_install`
> command, which does *not* respect `pip.conf`, and so it tried to
> download the package from upstream PyPI and timed out banging its head
> against the firewall.

Thanks, this is very useful information.

If you wanted to have this verified for the future, a network-isolated buildbot would be a good way to ensure we don't mess this up in other ways.  Based on this thread it seems that multiple users have this concern, so it's certainly not specific to you, either.

It would also force us to fix the dang documentation-generator test cases that keep failing when a certain someone forgets to update their SSL cert :-).

> As a workaround, we messed with our build-scripts to manually "pip
> install" incremental before installing Twisted, or anything that depends
> on it, so everything's fine again.
> 
> The Python Packaging Authority already has plans for replacing
> `setup_requires` with something more Pip-friendly (see PEP 518), so over
> time this won't be an issue. For the short term, though, I hope there
> won't be too many more things added to `setup_requires` without
> announcement.

Incremental is a bit of a special case, since "version definition" is one of the few things that needs synchronization between setup-time and run-time.  I was pretty nervous about adding `setup_requires`, but the value of getting our versioning logic outside of Twisted itself seemed worth the potential packaging fallout.

So, while you can expect to see many more things showing up in install_requires unannounced, as we split out low-level portions of Twisted and adopt libraries like h11, I doubt that you'll see another setup_requires arrive, especially before PyPA gets together a better approach than the literal setup.py setup_requires.  Given that you've specifically asked for notice, any project member submitting or reviewing a patch that adds one should give a shout here.

-glyph


From ex.vitorino at gmail.com  Fri Dec 30 04:48:19 2016
From: ex.vitorino at gmail.com (Ex Vitorino)
Date: Fri, 30 Dec 2016 11:48:19 +0000
Subject: [Twisted-Python] twisted.python.sendmsg segfault - looking for
	confirmation
In-Reply-To: <669E1018-9EEF-41B1-99F1-22FDE09DE075@twistedmatrix.com>
References: <4F35146F-E43C-437F-B33A-4F6CEA9343F6@gmail.com>
 <EA9B12E5-C604-4E2D-B8D6-72A509DE827E@twistedmatrix.com>
 <A966C31E-FE51-44CC-836F-34063DC7C550@gmail.com>
 <669E1018-9EEF-41B1-99F1-22FDE09DE075@twistedmatrix.com>
Message-ID: <D7B90778-5E45-4F3E-AE5D-4010ACE99707@gmail.com>



> On 30 Dec 2016, at 01:56, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Dec 29, 2016, at 11:01 AM, ex vito <ex.vitorino at gmail.com> wrote:
>> 
>>> On 2016-12-29, at 12:23, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>>> 
>>>> On Dec 27, 2016, at 19:15, ex vito <ex.vitorino at gmail.com> wrote:
>>>> 
>>>> Other than looking for confirmation, I have a fix which I included two isolated commits in the PR. Twisted project members: if this is confirmed, maybe a ticket should be created in Trac and an independent PR created, correct?
>>> 
>>> You should definitely create that ticket.  In fact, you don't need to wait for confirmation - create the ticket now, and send the link to it, so someone else can comment on the ticket when it is confirmed - discussion of the reproduction process can happen there.
>> 
>> 
>> Done,
>> 
>> Ticket: https://twistedmatrix.com/trac/ticket/8969
>> PR: https://github.com/twisted/twisted/pull/650
>> 
>> Up for review with a guidance request on how to achieve 100% diff coverage given that different platforms behave differently with the same input.
> 
> All our supported platforms submit coverage reports; the coverage reported by codecov should be the union of all those reports.  So, when your code gets pushed to a branch and run on the buildbots, the coverage report should indicate that.


Oh, nice! I hadn't figured that out, yet. It makes sense and after rodrigc pushed it to the buildbots it did confirm total diff coverage.

Thanks to both.
Regards,
--
exvito
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20161230/d623768d/attachment-0002.html>

