From trac at twistedmatrix.com  Sun Feb  3 00:05:17 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 03 Feb 2019 07:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1549177517.54.6332333606754892988@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190203/c8897193/attachment.html>

From burak.arslan at arskom.com.tr  Tue Feb  5 08:15:27 2019
From: burak.arslan at arskom.com.tr (Burak Arslan)
Date: Tue, 5 Feb 2019 18:15:27 +0300
Subject: [Twisted-Python] SMTPClient disconnects following STARTTLS
Message-ID: <951a65e9-055e-61a3-60d8-a7a32e95a7d6@arskom.com.tr>

Hello,

I'm trying to deliver mail using twisted.mail.sendmail (version 18.9.0)

Delivery attempts to some servers fail either with disconnections or
timeouts following the STARTTLS command. When I disable STARTTLS (by
patching tryTLS()) message delivery succeeds.

So is there a way to log the TLS handshake process to be able to
understand why the TLS connection cannot resume? Any suggestions for
troubleshooting this? A dry ConnectionDone doesn't tell much.

Is it possible to make t.m.sendmail() attempt another delivery without
STARTTLS?

Best regards,
Burak ARSLAN



From jsmonges at gmail.com  Tue Feb  5 14:26:39 2019
From: jsmonges at gmail.com (Joe Smongeski)
Date: Tue, 5 Feb 2019 16:26:39 -0500
Subject: [Twisted-Python] trouble installing 18.9.0
Message-ID: <CAPO9U+mg2qFnx5wPS2NBYXsGP3eTo-4iwd1e8unF-SqTFxGMMA@mail.gmail.com>

I've been trying to install the latest Twisted 18.9.0 with pip install,
(using Oracle LInux 7.4),  but I'm getting compilation errors.  The first
one was:

src/twisted/test/raiser.c:4:20: fatal error: Python.h: No such file or
directory
#include "Python.h"

I was able to work around that, but now I"m getting this error:

gcc -pthread -shared -Wl,-z,relro -g -L ./python3.6m
build/temp.linux-x86_64-3.6/src/twisted/test/raiser.o -L/usr/lib64
*-lpython3.6m* -o build/lib.linux-x86_64-3.6/twisted/test/
raiser.cpython-36m-x86_64-linux-gnu.so
   * /etc/alternatives/ld: cannot find -lpython3.6m*
    collect2: error: ld returned 1 exit status
    error: command 'gcc' failed with exit status 1

Since the compile is under the control of all the install scripts, I can't
determine where the linker is looking for "python36m".

Any help would be much appreciated!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190205/4e46d585/attachment.html>

From sda at fstab.net  Tue Feb  5 14:57:56 2019
From: sda at fstab.net (Kyle Altendorf)
Date: Tue, 05 Feb 2019 16:57:56 -0500
Subject: [Twisted-Python] trouble installing 18.9.0
In-Reply-To: <CAPO9U+mg2qFnx5wPS2NBYXsGP3eTo-4iwd1e8unF-SqTFxGMMA@mail.gmail.com>
References: <CAPO9U+mg2qFnx5wPS2NBYXsGP3eTo-4iwd1e8unF-SqTFxGMMA@mail.gmail.com>
Message-ID: <e6d5200496c8e25a854223b76bdfeea4@fstab.net>

On 2019-02-05 16:26, Joe Smongeski wrote:

> I've been trying to install the latest Twisted 18.9.0 with pip install, 
> (using Oracle LInux 7.4),  but I'm getting compilation errors.  The 
> first one was:
> 
> src/twisted/test/raiser.c:4:20: fatal error: Python.h: No such file or 
> directory
> #include "Python.h"

This is usually addressed by installing a python3-dev package, or 
similar.  What did you do?

> I was able to work around that, but now I"m getting this error:
> 
> gcc -pthread -shared -Wl,-z,relro -g -L ./python3.6m 
> build/temp.linux-x86_64-3.6/src/twisted/test/raiser.o -L/usr/lib64 
> -LPYTHON3.6M -o 
> build/lib.linux-x86_64-3.6/twisted/test/raiser.cpython-36m-x86_64-linux-gnu.so
> /ETC/ALTERNATIVES/LD: CANNOT FIND -LPYTHON3.6M
> collect2: error: ld returned 1 exit status
> error: command 'gcc' failed with exit status 1
> 
> Since the compile is under the control of all the install scripts, I 
> can't determine where the linker is looking for "python36m".

The all caps `PYTHON3.6M` and `/ETC/ALTERNATIVES/LD: CANNOT FIND 
-LPYTHON3.6M` seem pretty weird to me.

It might be helpful to share a full transcript (prompts, commands, 
output) of the installation (including creating a virtualenv or venv, 
etc)

Cheers,
-kyle


From glyph at twistedmatrix.com  Sun Feb 10 00:35:42 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 9 Feb 2019 23:35:42 -0800
Subject: [Twisted-Python] SMTPClient disconnects following STARTTLS
In-Reply-To: <951a65e9-055e-61a3-60d8-a7a32e95a7d6@arskom.com.tr>
References: <951a65e9-055e-61a3-60d8-a7a32e95a7d6@arskom.com.tr>
Message-ID: <5BE021A5-F598-4455-B2A3-9E8CAE708E12@twistedmatrix.com>



> On Feb 5, 2019, at 7:15 AM, Burak Arslan <burak.arslan at arskom.com.tr> wrote:
> 
> Hello,
> 
> I'm trying to deliver mail using twisted.mail.sendmail (version 18.9.0)

Thanks for using Twisted, and thanks for already being on the latest version!

> Delivery attempts to some servers fail either with disconnections or
> timeouts following the STARTTLS command. When I disable STARTTLS (by
> patching tryTLS()) message delivery succeeds.
> 
> So is there a way to log the TLS handshake process to be able to
> understand why the TLS connection cannot resume? Any suggestions for
> troubleshooting this? A dry ConnectionDone doesn't tell much.

If you really want to log the handshake itself, you could try starting with Wireshark, which would at least tell you something about the contents of said handshake.  However, this may not be all that useful initially.

There are lots of potential problems here.  One is that ESMTPSender uses TLSv1_METHOD[1], which may be provoking your peers into dropping the connection because it's too old a version.  You haven't said anything about how you're building your client context, and there are several other potential problems with the default.

Another potential problem is that I don't know how you've set up Twisted's logging.  If Twisted were logging a traceback, would you see it?

In general this is a very difficult problem to debug, email is non-deterministic and scary, but it upgrades from "difficult" to "impossible" without seeing the sample code doing the sending :-).

> Is it possible to make t.m.sendmail() attempt another delivery without
> STARTTLS?

If you do this, you're quite likely to end up in a situation where your messages are far more likely to be flagged as spam by your ESP.  STARTTLS is generally considered a positive signal for deliverability.  (See https://starttls-everywhere.org <https://starttls-everywhere.org/>).

> Best regards,
> Burak ARSLAN

Hopefully some of my guesses were helpful, but I'm looking forward to seeing your code, and hopeful that someone on the list can help you work through to the point where you can deliver some mail :).

-g

[1]: At the time ESMTPSender was written, TLSv1_METHOD was a bold, forward-looking SSL_METHOD to select!  It was the most recent version of the protocol, and explicitly opted out of vulnerable SSLv2 and SSLv3 protocol versions.  However, the OpenSSL API is nothing if not deeply unfortunate, so this has metastasized over time into an incredibly ancient and bad SSL_METHOD; the correct one that you want is SSLv23_METHOD which means "negotiate TLS version" (and practically no current version of OpenSSL will negotiate either SSLv2 *or* SSLv3 with this method, since they're broken and deprecated).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190209/e3660830/attachment.html>

From mehtab.zafar98 at gmail.com  Sun Feb 10 11:22:56 2019
From: mehtab.zafar98 at gmail.com (Mehtab Zafar)
Date: Sun, 10 Feb 2019 23:52:56 +0530
Subject: [Twisted-Python] Content length of a response in treq
Message-ID: <CAOSmU6Qo5X8PFFEh0ALmaPsVCoyNrSkaQ1QbDup8JVgbg8_5fg@mail.gmail.com>

Hi,
I am trying to use treq for a project in which I am also going to generate
a progress bar for the downloading session. But the problem I am facing is
that I can't find a way to get the content length header from the response.

The "response.length"  gives me "unknown size".So I there a way I can get
the length for all types of content?

Thanks
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190210/081cff62/attachment.html>

From adi at roiban.ro  Sun Feb 10 12:36:19 2019
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 10 Feb 2019 19:36:19 +0000
Subject: [Twisted-Python] Content length of a response in treq
In-Reply-To: <CAOSmU6Qo5X8PFFEh0ALmaPsVCoyNrSkaQ1QbDup8JVgbg8_5fg@mail.gmail.com>
References: <CAOSmU6Qo5X8PFFEh0ALmaPsVCoyNrSkaQ1QbDup8JVgbg8_5fg@mail.gmail.com>
Message-ID: <CAFycZ9fuLVdVLZ1pfvrJP2Ak0fw=Doqe6+khyHhbEX0SqyS6Hw@mail.gmail.com>

On Sun, 10 Feb 2019 at 18:23, Mehtab Zafar <mehtab.zafar98 at gmail.com> wrote:
>
> Hi,
> I am trying to use treq for a project in which I am also going to generate a progress bar for the downloading session. But the problem I am facing is that I can't find a way to get the content length header from the response.
>
> The "response.length"  gives me "unknown size".So I there a way I can get the length for all types of content?
>
> Thanks

Hi,

Which encoding is used for your response?

Do you have Chunked encoding
https://en.wikipedia.org/wiki/Chunked_transfer_encoding
In this case, the content length is not advertised in the response headers.

Regards,
-- 
Adi Roiban


From trac at twistedmatrix.com  Sun Feb 17 00:05:27 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 17 Feb 2019 07:05:27 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1550387127.24.617031422454312050@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190217/3a75dfd9/attachment.html>

From chris at withers.org  Tue Feb 19 04:00:57 2019
From: chris at withers.org (Chris Withers)
Date: Tue, 19 Feb 2019 11:00:57 +0000
Subject: [Twisted-Python] why can't a callback be called with a deferred?
Message-ID: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>

Hi All,

There's this assert:

https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/defer.py#L459

...and I'd like to understand why it's there.

I have what feels like a legitimate case where that assert trips me up, 
as I'd like to change this line:

https://github.com/cjw296/carly/blob/d39e316aa0f9e05613c263410e7b3ba5bcacba3a/carly/hook.py#L67

...to just return result.value. However, if the method being hooked 
returns a deferred, then I trip the assert.
Unfortunately, the commit that introduced that assert is just a one 
liner from Itamar back in 2003 without any context of what problem lead 
him to introduce the change.

Of course, I can work around it, was more curious than anything...

Chris


From adi at roiban.ro  Tue Feb 19 04:41:37 2019
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 19 Feb 2019 11:41:37 +0000
Subject: [Twisted-Python] why can't a callback be called with a deferred?
In-Reply-To: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
References: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
Message-ID: <CAFycZ9dh71UhcjLyiN+RMfBwyt5bYB36-E6x9rSCP=4LyT+OGA@mail.gmail.com>

On Tue, 19 Feb 2019 at 11:01, Chris Withers <chris at withers.org> wrote:
>
> Hi All,
>
> There's this assert:
>
> https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/defer.py#L459
>
> ...and I'd like to understand why it's there.

[snip]

> Unfortunately, the commit that introduced that assert is just a one
> liner from Itamar back in 2003 without any context of what problem lead
> him to introduce the change.

I think it was introduced to catch some common bad usage patterns ...
like yours :)

If you want to chain the deferreds, use the dedicated helper
https://twistedmatrix.com/documents/current/core/howto/defer.html#chaining-deferreds

Deferred are not always 100% resolved/called.
You might have a deferred called, but the current result might be
another deferred... so it has no final result yet.

----

so in your case, instead of `returnValue(result)`  use

result = yield result
returnValue(result)


in this way, the result is resolved :)

Hope it helps



--
Adi Roiban


From chris at withers.org  Tue Feb 19 06:34:59 2019
From: chris at withers.org (Chris Withers)
Date: Tue, 19 Feb 2019 13:34:59 +0000
Subject: [Twisted-Python] why can't a callback be called with a deferred?
In-Reply-To: <CAFycZ9dh71UhcjLyiN+RMfBwyt5bYB36-E6x9rSCP=4LyT+OGA@mail.gmail.com>
References: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
 <CAFycZ9dh71UhcjLyiN+RMfBwyt5bYB36-E6x9rSCP=4LyT+OGA@mail.gmail.com>
Message-ID: <c6a3a513-abbf-a0c0-845a-74fa87bbef84@withers.org>

On 19/02/2019 11:41, Adi Roiban wrote:
>
> I think it was introduced to catch some common bad usage patterns ...
> like yours :)

Not a massively helpful comment.

> If you want to chain the deferreds, use the dedicated helper
> https://twistedmatrix.com/documents/current/core/howto/defer.html#chaining-deferreds
>
> Deferred are not always 100% resolved/called.
> You might have a deferred called, but the current result might be
> another deferred... so it has no final result yet.
>
> ----
>
> so in your case, instead of `returnValue(result)` use
>
> result = yield result
> returnValue(result)
>
>
> in this way, the result is resolved :)

The methods being hooked don't necessarily return deferreds.
I'd like it to be an explicit choice of the caller, ie:

result = yield SomeProtocol.onMessage.called()
# okay, we got here, we know onMessage was called,
# now we might want to tick a clock, or otherwise simulate
# async state manipulation.
# now I want to make sure the deferred chain on the onMessage result has 
been completed:
yield result

cheers,

Chris


From glyph at twistedmatrix.com  Wed Feb 20 23:55:24 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 20 Feb 2019 22:55:24 -0800
Subject: [Twisted-Python] why can't a callback be called with a deferred?
In-Reply-To: <c6a3a513-abbf-a0c0-845a-74fa87bbef84@withers.org>
References: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
 <CAFycZ9dh71UhcjLyiN+RMfBwyt5bYB36-E6x9rSCP=4LyT+OGA@mail.gmail.com>
 <c6a3a513-abbf-a0c0-845a-74fa87bbef84@withers.org>
Message-ID: <7D6C45E2-2B0E-4448-A077-189AE6484E73@twistedmatrix.com>



> On Feb 19, 2019, at 5:34 AM, Chris Withers <chris at withers.org> wrote:
> 
> On 19/02/2019 11:41, Adi Roiban wrote:
>> 
>> I think it was introduced to catch some common bad usage patterns ...
>> like yours :)
> 
> Not a massively helpful comment.

I think what Adi was trying to get at here is that this is exactly the sort of type confusion that this assert was intended to defend against.

That said, the bare assert in question was definitely written with the implementor's sort of "this should never happen" hat on, not the "let's report a useful error to the user" hat.  So it could certainly stand to be improved regardless.

>> If you want to chain the deferreds, use the dedicated helper
>> https://twistedmatrix.com/documents/current/core/howto/defer.html#chaining-deferreds <https://twistedmatrix.com/documents/current/core/howto/defer.html#chaining-deferreds>

>> Deferred are not always 100% resolved/called.
>> You might have a deferred called, but the current result might be
>> another deferred... so it has no final result yet.
>> 
>> ----
>> 
>> so in your case, instead of `returnValue(result)` use
>> 
>> result = yield result
>> returnValue(result)
>> 
>> in this way, the result is resolved :)
> 
> The methods being hooked don't necessarily return deferreds.
> I'd like it to be an explicit choice of the caller, ie:
> 
> result = yield SomeProtocol.onMessage.called()
> # okay, we got here, we know onMessage was called,
> # now we might want to tick a clock, or otherwise simulate
> # async state manipulation.
> # now I want to make sure the deferred chain on the onMessage result has been completed:
> yield result

I'm not sure I understand your example here.  The assertion in question only happens if you call returnValue or do a return with a Deferred directly; this example doesn't do either of those things.

I think you could fix the linked example code to still do what you want by simply doing `returnValue(yield result)`?

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190220/171a900a/attachment.html>

From chris at withers.org  Thu Feb 21 00:03:31 2019
From: chris at withers.org (Chris Withers)
Date: Thu, 21 Feb 2019 07:03:31 +0000
Subject: [Twisted-Python] why can't a callback be called with a deferred?
In-Reply-To: <7D6C45E2-2B0E-4448-A077-189AE6484E73@twistedmatrix.com>
References: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
 <CAFycZ9dh71UhcjLyiN+RMfBwyt5bYB36-E6x9rSCP=4LyT+OGA@mail.gmail.com>
 <c6a3a513-abbf-a0c0-845a-74fa87bbef84@withers.org>
 <7D6C45E2-2B0E-4448-A077-189AE6484E73@twistedmatrix.com>
Message-ID: <3a8b33a3-a339-e843-71cc-186338b5a9be@withers.org>

On 21/02/2019 06:55, Glyph wrote:
>
>
>> The methods being hooked don't necessarily return deferreds.

Glyph, this bit ^^^

>> I'd like it to be an explicit choice of the caller, ie:
>>
>> result = yield SomeProtocol.onMessage.called()
>> # okay, we got here, we know onMessage was called,
>> # now we might want to tick a clock, or otherwise simulate
>> # async state manipulation.
>> # now I want to make sure the deferred chain on the onMessage result 
>> has been completed:
>> yield result
>
> I'm not sure I understand your example here. 

Yeah, this is part of carly, that I posted earlier. It stems from the 
need to get the results of method calls when you have no reference to 
the object being calls, or sometimes a result that's a deferred you need 
to wait on, particularly in a test, but have no way of doing so.

If you're feeling brave, have a read of:
https://github.com/cjw296/carly/blob/master/carly/hook.py

> The assertion in question only happens if you call returnValue or do a 
> return with a Deferred directly; this example doesn't do either of 
> those things.

This is the test situation where I hit this issue:
https://github.com/cjw296/carly/blob/master/tests/test_untracked_deferred.py#L28-L35

I'd originally wanted to have that read:

@inlineCallbacks
def test1(self):
...
result = yield pita.asyncMethod.called()
with ShouldRaise(Exception(1)):
yield result

Now, which I'm actually happier with the end result here, I think the 
above it legit, if unusual, and that assert trips it up.

cheers,

Chris


From glyph at twistedmatrix.com  Thu Feb 21 00:32:54 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 20 Feb 2019 23:32:54 -0800
Subject: [Twisted-Python] why can't a callback be called with a deferred?
In-Reply-To: <42aba870-05ae-a3de-c7ae-0fddac487769@withers.org>
References: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
 <CAFycZ9dh71UhcjLyiN+RMfBwyt5bYB36-E6x9rSCP=4LyT+OGA@mail.gmail.com>
 <c6a3a513-abbf-a0c0-845a-74fa87bbef84@withers.org>
 <7D6C45E2-2B0E-4448-A077-189AE6484E73@twistedmatrix.com>
 <42aba870-05ae-a3de-c7ae-0fddac487769@withers.org>
Message-ID: <2F447265-3737-47F9-A328-589F9C375252@twistedmatrix.com>



> On Feb 20, 2019, at 11:03 PM, Chris Withers <chris at withers.org> wrote:
> 
> On 21/02/2019 06:55, Glyph wrote:
>>> The methods being hooked don't necessarily return deferreds.
> 
> Glyph, this bit ^^^
> 
>>> I'd like it to be an explicit choice of the caller, ie:
>>> 
>>> result = yield SomeProtocol.onMessage.called()
>>> # okay, we got here, we know onMessage was called,
>>> # now we might want to tick a clock, or otherwise simulate
>>> # async state manipulation.
>>> # now I want to make sure the deferred chain on the onMessage result has been completed:
>>> yield result
>> I'm not sure I understand your example here. 
> 
> Yeah, this is part of carly, that I posted earlier. It stems from the need to get the results of method calls when you have no reference to the object being calls, or sometimes a result that's a deferred you need to wait on, particularly in a test, but have no way of doing so.

I just can't parse this sentence.

Breaking it down:

> you have no reference to the object being calls,

How do you have no reference to the object being called? Aren't you calling it?

> or sometimes a result that's a deferred you need to wait on, particularly in a test, but have no way of doing so

But... you do have a way of doing so.  You yield it from inlineCallbacks or you add a callback to it.

In any case you either have a Deferred or you don't; if you do, then it's clear you should wait on it, if you don't, then it's clear you should not wait on it.  If you want an API that allows some user code to do either, that's what 'maybeDeferred' is for.

> If you're feeling brave, have a read of:
> https://github.com/cjw296/carly/blob/master/carly/hook.py
> 
>> The assertion in question only happens if you call returnValue or do a return with a Deferred directly; this example doesn't do either of those things.
> 
> This is the test situation where I hit this issue:
> https://github.com/cjw296/carly/blob/master/tests/test_untracked_deferred.py#L28-L35
> 
> I'd originally wanted to have that read:
> 
>    @inlineCallbacks
>    def test1(self):
>        ...
>        result = yield pita.asyncMethod.called()
>        with ShouldRaise(Exception(1)):
>            yield result
> 
> Now, which I'm actually happier with the end result here, I think the above it legit, if unusual, and that assert trips it up.

Some type annotations might make it a bit clearer what the two states here are :).  As it is, it looks to me you want a Deferred to come *out* of a 'yield', which should definitely never happen.  If this assert were to be removed, it would be done in such a way that would implicitly wait for the Deferred in question to fire: you should never receive a Deferred as an argument to a function, or as the result of an (inlineCallbacks) 'yield' or (async def) 'await'.  It breaks the whole model of what 'awaiting' means.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190220/56ad0744/attachment.html>

From chris at withers.org  Thu Feb 21 00:53:34 2019
From: chris at withers.org (Chris Withers)
Date: Thu, 21 Feb 2019 07:53:34 +0000
Subject: [Twisted-Python] why can't a callback be called with a deferred?
In-Reply-To: <2F447265-3737-47F9-A328-589F9C375252@twistedmatrix.com>
References: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
 <CAFycZ9dh71UhcjLyiN+RMfBwyt5bYB36-E6x9rSCP=4LyT+OGA@mail.gmail.com>
 <c6a3a513-abbf-a0c0-845a-74fa87bbef84@withers.org>
 <7D6C45E2-2B0E-4448-A077-189AE6484E73@twistedmatrix.com>
 <42aba870-05ae-a3de-c7ae-0fddac487769@withers.org>
 <2F447265-3737-47F9-A328-589F9C375252@twistedmatrix.com>
Message-ID: <61b73d1a-efdd-e374-df4b-dc1fc2ac9497@withers.org>

On 21/02/2019 07:32, Glyph wrote:
> 
> 
>> Yeah, this is part of carly, that I posted earlier. It stems from the 
>> need to get the results of method calls when you have no reference to 
>> the object being calls, or sometimes a result that's a deferred you 
>> need to wait on, particularly in a test, but have no way of doing so.
> 
> I just can't parse this sentence.

Sorry, some typos in there are not helping ;-(

> Breaking it down:
> 
>> you have no reference to the object being calls,
> 
> How do you have no reference to the object being called? Aren't you 
> calling it?

That test case I linked to shows one example, the original ones were 
from abstracting out JML's original post here:
https://jml.io/pages/how-to-disconnect-in-twisted-really.html

> In any case you either have a Deferred or you don't; if you do, then 
> it's clear you should wait on it,

Yes, but where to wait is the question here. I'd like to leave that 
choice to the user (see back in the thread for the details).

>> This is the test situation where I hit this issue:
>> https://github.com/cjw296/carly/blob/master/tests/test_untracked_deferred.py#L28-L35
>>
>> I'd originally wanted to have that read:
>>
>>    @inlineCallbacks
>>    def test1(self):
>>        ...
>>        result = yield pita.asyncMethod.called()
>>        with ShouldRaise(Exception(1)):
>>            yield result
>>
>> Now, which I'm actually happier with the end result here, I think the 
>> above it legit, if unusual, and that assert trips it up.
> 
> Some type annotations might make it a bit clearer what the two states 
> here are :).  

If those annotations were there, what would they look like? (I did link 
to the whole test file, which has all the detail I think you could need, 
it's pretty self contained and not that long)

> As it is, it looks to me you want a Deferred to come *out* 
> of a 'yield', which should definitely never happen. 

I disagree, in this specific case.

> If this assert were 
> to be removed, it would be done in such a way that would implicitly wait 
> for the Deferred in question to fire: you should /never/ receive a 
> Deferred as an argument to a function, or as the result of an 
> (inlineCallbacks) 'yield' or (async def) 'await'.  It breaks the whole 
> model of what 'awaiting' means.

Well, I'd agree 90% of the time, but test_untracked_deferred.py is where 
that's no always true.

Anyway, I'm happy with the API I have now, and it neatly works around 
that assert, so ¯\_(ツ)_/¯.

Chris


From trac at twistedmatrix.com  Sun Feb 24 00:05:18 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 24 Feb 2019 07:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1550991918.6.9179583645031384109@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190224/306acb5e/attachment.html>

From hawkowl at atleastfornow.net  Sun Feb 24 12:19:28 2019
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Sun, 24 Feb 2019 11:19:28 -0800
Subject: [Twisted-Python] Twisted 19.2.0rc1 Release Candidate Announcement
Message-ID: <946564e6-c351-66b5-cf5c-d29e9a15bb67@atleastfornow.net>

Hello from PyCascades! Straight from the Pacific North-West, a new 
Twisted release candidate!

In this release, there is:

- twisted.web.client.HostnameCachingHTTPSPolicy was added as a new 
contextFactory option. This reduces the performance overhead for making 
many TLS connections to the same host.
- twisted.conch.ssh.keys can now read private keys in the new 
"openssh-key-v1" format, introduced in OpenSSH 6.5 and made the default 
in OpenSSH 7.8.
- The sample code in the "Twisted Web In 60 Seconds" tutorial runs on 
Python 3.
- DeferredLock and DeferredSemaphore can be used as asynchronous context 
managers on Python 3.5+.
- twisted.internet.ssl.CertificateOptions now uses 32 random bytes 
instead of an MD5 hash for the ssl session identifier context.
- twisted.python.failure.Failure.getTracebackObject now returns 
traceback objects whose frames can be passed into traceback.print_stack 
for better debugging of where the exception came from.
- Much more! 20+ tickets closed overall.

You can get the tarball and the NEWS file at 
https://twistedmatrix.com/Releases/rc/19.2.0rc1/ , or you can try it out 
from PyPI:

     python -m pip install Twisted==19.2.0rc1

Please test it, and let me know how your applications fare, good or bad! 
If nothing comes up, 19.2 will release in a week.

Twisted regards,

Amber Brown (hawkowl)


From barry.scott at forcepoint.com  Mon Feb 25 04:32:18 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Mon, 25 Feb 2019 11:32:18 +0000
Subject: [Twisted-Python] why can't a callback be called with a deferred?
In-Reply-To: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
References: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
Message-ID: <5270225.y76kS8R4JG@barry-scott-desktop>

On Tuesday, 19 February 2019 11:00:57 GMT Chris Withers wrote:
> Hi All,
> 
> There's this assert:
> 
> https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/defer.py#
> L459
> 
> ...and I'd like to understand why it's there.

We hit this assert when porting from very old twisted to current twisted.
In all cases the problem was with our code that used deferreds in a poor, not
well understood way. After refactoring we are a lot happier with the
resulting code as it easier to maintain now.

Barry




From chris at withers.org  Mon Feb 25 05:02:48 2019
From: chris at withers.org (Chris Withers)
Date: Mon, 25 Feb 2019 12:02:48 +0000
Subject: [Twisted-Python] http://twistedmatrix.com/ down?
Message-ID: <ed8ea849-e1d9-0ac7-df6c-a4de9094391a@withers.org>

Looks to be...

Chris


From glyph at twistedmatrix.com  Mon Feb 25 23:33:52 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 25 Feb 2019 22:33:52 -0800
Subject: [Twisted-Python] http://twistedmatrix.com/ down?
In-Reply-To: <ed8ea849-e1d9-0ac7-df6c-a4de9094391a@withers.org>
References: <ed8ea849-e1d9-0ac7-df6c-a4de9094391a@withers.org>
Message-ID: <4B19FFCF-289B-45AA-878E-50E421CC3E67@twistedmatrix.com>



> On Feb 25, 2019, at 4:02 AM, Chris Withers <chris at withers.org> wrote:
> 
> Looks to be...
> 
> Chris

It seems like Mark Williams caught this and restarted the service shortly after this report, so it's mostly been fine since.

This might be a good opportunity to mention that Twisted's infrastructure has very few people to operate it, with fairly limited availability.  If you're interested in helping out with it, I'd love to hear from you.

One thing that we could use help with: there appears to be a memory leak, perhaps in Twisted itself, which leads to these slowdowns / crashes.  It would be great if someone could instrument the server to figure out where the problem is!  Said instrumentation could be delivered as a patch to https://github.com/twisted-infra/braid/blob/master/services/t-web/twisted-web/twisted-web <https://github.com/twisted-infra/braid/blob/master/services/t-web/twisted-web/twisted-web>.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190225/6bc4a609/attachment.html>

From glyph at twistedmatrix.com  Mon Feb 25 23:34:28 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 25 Feb 2019 22:34:28 -0800
Subject: [Twisted-Python] why can't a callback be called with a deferred?
In-Reply-To: <5270225.y76kS8R4JG@barry-scott-desktop>
References: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
 <5270225.y76kS8R4JG@barry-scott-desktop>
Message-ID: <F37821FA-01AE-4C39-8230-6046A3588704@twistedmatrix.com>



> On Feb 25, 2019, at 3:32 AM, Scott, Barry <barry.scott at forcepoint.com> wrote:
> 
> On Tuesday, 19 February 2019 11:00:57 GMT Chris Withers wrote:
>> Hi All,
>> 
>> There's this assert:
>> 
>> https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/defer.py#
>> L459
>> 
>> ...and I'd like to understand why it's there.
> 
> We hit this assert when porting from very old twisted to current twisted.
> In all cases the problem was with our code that used deferreds in a poor, not
> well understood way. After refactoring we are a lot happier with the
> resulting code as it easier to maintain now.

Thanks for the feedback, Barry!

It would still be great to figure out, if we can, how we might make the error message a bit more legible to folks with less knowledge of Twisted's internals.

-g

From barry.scott at forcepoint.com  Wed Feb 27 07:34:33 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Wed, 27 Feb 2019 14:34:33 +0000
Subject: [Twisted-Python] why can't a callback be called with a deferred?
In-Reply-To: <F37821FA-01AE-4C39-8230-6046A3588704@twistedmatrix.com>
References: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
 <5270225.y76kS8R4JG@barry-scott-desktop>
 <F37821FA-01AE-4C39-8230-6046A3588704@twistedmatrix.com>
Message-ID: <4829912.vJhfm6kxPa@barry-scott-desktop>

On Tuesday, 26 February 2019 06:34:28 GMT Glyph wrote:
> > On Feb 25, 2019, at 3:32 AM, Scott, Barry <barry.scott at forcepoint.com>
> > wrote:> 
> > On Tuesday, 19 February 2019 11:00:57 GMT Chris Withers wrote:
> >> Hi All,
> >> 
> >> There's this assert:
> >> 
> >> https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/defer.
> >> py# L459
> >> 
> >> ...and I'd like to understand why it's there.
> > 
> > We hit this assert when porting from very old twisted to current twisted.
> > In all cases the problem was with our code that used deferreds in a poor,
> > not well understood way. After refactoring we are a lot happier with the
> > resulting code as it easier to maintain now.
> 
> Thanks for the feedback, Barry!
> 
> It would still be great to figure out, if we can, how we might make the
> error message a bit more legible to folks with less knowledge of Twisted's
> internals.

Let suppose that I need work done by doWork function.
It returns a deferred for me to hang call backs and error backs on.

	d = doWork()
	d.addCallback(handleWorkDone)

In my handleWorkDone I expect to get the result of doWork completing.

The assert fires if instead of a result value is returned a Deferred is 
returned. This I consider a bug in the doWork() implementation.

What must happen in doWork is that it must arrange that
any Deferred it used internally has an addCallback used to
cause the d returned to the user to complete. Leaking the
any internal Deferred() objects must not happen to the user
of doWork.

def doWork():
	d = Deferred()

	def completeWork(result, d):
		d.callback(result)

	inner_d = doAsyncWork()
	inner_d.addCallback(completeWork, d)

	return d

The error message would need to say something like:
"Cannot return a Deferred as a result. Did you forgot to addCallback to the 
deferred?"

Maybe add something to docs based on the above and refer to it in the message?

Barry




From exarkun at twistedmatrix.com  Wed Feb 27 07:45:35 2019
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Wed, 27 Feb 2019 09:45:35 -0500
Subject: [Twisted-Python] why can't a callback be called with a deferred?
In-Reply-To: <4829912.vJhfm6kxPa@barry-scott-desktop>
References: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
 <5270225.y76kS8R4JG@barry-scott-desktop>
 <F37821FA-01AE-4C39-8230-6046A3588704@twistedmatrix.com>
 <4829912.vJhfm6kxPa@barry-scott-desktop>
Message-ID: <CAEeXt4PjQf1AODsuu+HVjHAAw8L0BqueGhwzBeVqL7J5GazzmQ@mail.gmail.com>

On Wed, Feb 27, 2019 at 9:34 AM Scott, Barry <barry.scott at forcepoint.com>
wrote:

> On Tuesday, 26 February 2019 06:34:28 GMT Glyph wrote:
> > > On Feb 25, 2019, at 3:32 AM, Scott, Barry <barry.scott at forcepoint.com>
> > > wrote:>
> > > On Tuesday, 19 February 2019 11:00:57 GMT Chris Withers wrote:
> > >> Hi All,
> > >>
> > >> There's this assert:
> > >>
> > >>
> https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/defer.
> > >> py# L459
> > >>
> > >> ...and I'd like to understand why it's there.
> > >
> > > We hit this assert when porting from very old twisted to current
> twisted.
> > > In all cases the problem was with our code that used deferreds in a
> poor,
> > > not well understood way. After refactoring we are a lot happier with
> the
> > > resulting code as it easier to maintain now.
> >
> > Thanks for the feedback, Barry!
> >
> > It would still be great to figure out, if we can, how we might make the
> > error message a bit more legible to folks with less knowledge of
> Twisted's
> > internals.
>
> Let suppose that I need work done by doWork function.
> It returns a deferred for me to hang call backs and error backs on.
>
>         d = doWork()
>         d.addCallback(handleWorkDone)
>
> In my handleWorkDone I expect to get the result of doWork completing.
>
> The assert fires if instead of a result value is returned a Deferred is
> returned. This I consider a bug in the doWork() implementation.
>

This doesn't sound right.  Can you provide an example implementation of
doWork that provokes this behavior?  Here's an implementation that seems
like it matches your description and which does not provoke the behavior:

    def doWork():
        d = Deferred()
        d.callback("result")
        return d

    d = doWork()
    d.addCallback(handleWorkDone)

This doesn't trigger the assert.  This calls handleWorkDone with "result".
If you simplify the code so the Deferred interaction remains the same but
all the extraneous code is removed, it looks like this:

    d = Deferred()
    d.callback("result")
    d.addCallback(handleWorkDone)

which *must* work or Deferred is completely useless.

Jean-Paul



>
> What must happen in doWork is that it must arrange that
> any Deferred it used internally has an addCallback used to
> cause the d returned to the user to complete. Leaking the
> any internal Deferred() objects must not happen to the user
> of doWork.
>
> def doWork():
>         d = Deferred()
>
>         def completeWork(result, d):
>                 d.callback(result)
>
>         inner_d = doAsyncWork()
>         inner_d.addCallback(completeWork, d)
>
>         return d
>
> The error message would need to say something like:
> "Cannot return a Deferred as a result. Did you forgot to addCallback to
> the
> deferred?"
>
> Maybe add something to docs based on the above and refer to it in the
> message?
>
> Barry
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190227/dd5a99e4/attachment.html>

From barry.scott at forcepoint.com  Wed Feb 27 08:06:50 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Wed, 27 Feb 2019 15:06:50 +0000
Subject: [Twisted-Python] why can't a callback be called with a deferred?
In-Reply-To: <CAEeXt4PjQf1AODsuu+HVjHAAw8L0BqueGhwzBeVqL7J5GazzmQ@mail.gmail.com>
References: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
 <4829912.vJhfm6kxPa@barry-scott-desktop>
 <CAEeXt4PjQf1AODsuu+HVjHAAw8L0BqueGhwzBeVqL7J5GazzmQ@mail.gmail.com>
Message-ID: <9246088.02nLPNFrPr@barry-scott-desktop>

On Wednesday, 27 February 2019 14:45:35 GMT Jean-Paul Calderone wrote:
> On Wed, Feb 27, 2019 at 9:34 AM Scott, Barry <barry.scott at forcepoint.com>
> 
> wrote:
> > On Tuesday, 26 February 2019 06:34:28 GMT Glyph wrote:
> > > > On Feb 25, 2019, at 3:32 AM, Scott, Barry <barry.scott at forcepoint.com>
> > > > wrote:>
> > > > 
> > > > On Tuesday, 19 February 2019 11:00:57 GMT Chris Withers wrote:
> > > >> Hi All,
> > 
> > > >> There's this assert:
> > https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/defer.
> > 
> > > >> py# L459
> > > >> 
> > > >> ...and I'd like to understand why it's there.
> > > > 
> > > > We hit this assert when porting from very old twisted to current
> > 
> > twisted.
> > 
> > > > In all cases the problem was with our code that used deferreds in a
> > 
> > poor,
> > 
> > > > not well understood way. After refactoring we are a lot happier with
> > 
> > the
> > 
> > > > resulting code as it easier to maintain now.
> > > 
> > > Thanks for the feedback, Barry!
> > > 
> > > It would still be great to figure out, if we can, how we might make the
> > > error message a bit more legible to folks with less knowledge of
> > 
> > Twisted's
> > 
> > > internals.
> > 
> > Let suppose that I need work done by doWork function.
> > It returns a deferred for me to hang call backs and error backs on.
> > 
> >         d = doWork()
> >         d.addCallback(handleWorkDone)
> > 
> > In my handleWorkDone I expect to get the result of doWork completing.
> > 
> > The assert fires if instead of a result value is returned a Deferred is
> > returned. This I consider a bug in the doWork() implementation.

The code I have posted is the good version so it works and the assert
does not fire. My goal is to show what I assume is the correct way to code
a function that uses internal Deferred(), not give an example that breaks.

This should cause the the assert as the code must wait for the thread to
return a result.

def doWork():
	d = Deferred()
	d2 = deferToThread(doWorkHelper)
	d.callback(d2)
	return d

Barry


> This doesn't sound right.  Can you provide an example implementation of
> doWork that provokes this behavior?  Here's an implementation that seems
> like it matches your description and which does not provoke the behavior:
> 
>     def doWork():
>         d = Deferred()
>         d.callback("result")
>         return d
> 
>     d = doWork()
>     d.addCallback(handleWorkDone)
> 
> This doesn't trigger the assert.  This calls handleWorkDone with "result".
> If you simplify the code so the Deferred interaction remains the same but
> all the extraneous code is removed, it looks like this:
> 
>     d = Deferred()
>     d.callback("result")
>     d.addCallback(handleWorkDone)
> 
> which *must* work or Deferred is completely useless.
> 
> Jean-Paul
> 
> > What must happen in doWork is that it must arrange that
> > any Deferred it used internally has an addCallback used to
> > cause the d returned to the user to complete. Leaking the
> > any internal Deferred() objects must not happen to the user
> > of doWork.
> > 
> > def doWork():
> >         d = Deferred()
> >         
> >         def completeWork(result, d):
> >                 d.callback(result)
> >         
> >         inner_d = doAsyncWork()
> >         inner_d.addCallback(completeWork, d)
> >         
> >         return d
> > 
> > The error message would need to say something like:
> > "Cannot return a Deferred as a result. Did you forgot to addCallback to
> > the
> > deferred?"
> > 
> > Maybe add something to docs based on the above and refer to it in the
> > message?
> > 
> > Barry
> > 
> > 
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From exarkun at twistedmatrix.com  Wed Feb 27 08:11:31 2019
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Wed, 27 Feb 2019 10:11:31 -0500
Subject: [Twisted-Python] why can't a callback be called with a deferred?
In-Reply-To: <9246088.02nLPNFrPr@barry-scott-desktop>
References: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
 <4829912.vJhfm6kxPa@barry-scott-desktop>
 <CAEeXt4PjQf1AODsuu+HVjHAAw8L0BqueGhwzBeVqL7J5GazzmQ@mail.gmail.com>
 <9246088.02nLPNFrPr@barry-scott-desktop>
Message-ID: <CAEeXt4MvF9EXr8jC46-pGkQffu9hduRfEzRDUJDiCMJ_p1ctOw@mail.gmail.com>

On Wed, Feb 27, 2019 at 10:07 AM Scott, Barry <barry.scott at forcepoint.com>
wrote:

>
> The code I have posted is the good version so it works and the assert
> does not fire. My goal is to show what I assume is the correct way to code
> a function that uses internal Deferred(), not give an example that breaks.
>
> This should cause the the assert as the code must wait for the thread to
> return a result.
>
> def doWork():
>         d = Deferred()
>         d2 = deferToThread(doWorkHelper)
>         d.callback(d2)
>         return d
>

Ah.  I see.  Indeed, this code is wrong and triggers the assert.  For what
it's worth, there is a simpler solution than the example you gave.  It uses
the "chainDeferred" method:

    def doWork():
        d = Deferred()
        d2 = deferToThread(doWorkHelper)
        d2.chainDeferred(d)
        return d

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190227/f9b6e27c/attachment.html>

From barry.scott at forcepoint.com  Thu Feb 28 03:08:25 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Thu, 28 Feb 2019 10:08:25 +0000
Subject: [Twisted-Python] why can't a callback be called with a deferred?
In-Reply-To: <CAEeXt4MvF9EXr8jC46-pGkQffu9hduRfEzRDUJDiCMJ_p1ctOw@mail.gmail.com>
References: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
 <9246088.02nLPNFrPr@barry-scott-desktop>
 <CAEeXt4MvF9EXr8jC46-pGkQffu9hduRfEzRDUJDiCMJ_p1ctOw@mail.gmail.com>
Message-ID: <2743526.WHCksr77UW@barry-scott-desktop>

On Wednesday, 27 February 2019 15:11:31 GMT Jean-Paul Calderone wrote:
> On Wed, Feb 27, 2019 at 10:07 AM Scott, Barry <barry.scott at forcepoint.com>
> 
> wrote:
> > The code I have posted is the good version so it works and the assert
> > does not fire. My goal is to show what I assume is the correct way to code
> > a function that uses internal Deferred(), not give an example that breaks.
> > 
> > This should cause the the assert as the code must wait for the thread to
> > return a result.
> > 
> > def doWork():
> >         d = Deferred()
> >         d2 = deferToThread(doWorkHelper)
> >         d.callback(d2)
> >         return d
> 
> Ah.  I see.  Indeed, this code is wrong and triggers the assert.  For what
> it's worth, there is a simpler solution than the example you gave.  It uses
> the "chainDeferred" method:
> 
>     def doWork():
>         d = Deferred()
>         d2 = deferToThread(doWorkHelper)
>         d2.chainDeferred(d)
>         return d

The improved error message could suggest using chainDeferred() maybe.

> 
> Jean-Paul





From barry.scott at forcepoint.com  Thu Feb 28 03:15:43 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Thu, 28 Feb 2019 10:15:43 +0000
Subject: [Twisted-Python] Twisted: [twisted.internet.defer#critical]
 Unhandled error in Deferred:
Message-ID: <48491933.SM6WFROj7y@barry-scott-desktop>

Is it intentional to trigger this message?

The reason I ask it it comes from defer.py DebugInfo.___del__().
I though that DebugInfo objects are only created
if defer.DebugInfo.debug == True.

But in Deferred._runCallbacks:701 its created without a check in the
debug flag.

The reason I have noticed is that during my app shutdown an
ftp.FTPClient object is deleted that I think is causing the ftp
connection to close and the connectionClosed event is not
handled.

Barry




From trac at twistedmatrix.com  Sun Feb  3 00:05:17 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 03 Feb 2019 07:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1549177517.54.6332333606754892988@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190203/c8897193/attachment-0002.html>

From burak.arslan at arskom.com.tr  Tue Feb  5 08:15:27 2019
From: burak.arslan at arskom.com.tr (Burak Arslan)
Date: Tue, 5 Feb 2019 18:15:27 +0300
Subject: [Twisted-Python] SMTPClient disconnects following STARTTLS
Message-ID: <951a65e9-055e-61a3-60d8-a7a32e95a7d6@arskom.com.tr>

Hello,

I'm trying to deliver mail using twisted.mail.sendmail (version 18.9.0)

Delivery attempts to some servers fail either with disconnections or
timeouts following the STARTTLS command. When I disable STARTTLS (by
patching tryTLS()) message delivery succeeds.

So is there a way to log the TLS handshake process to be able to
understand why the TLS connection cannot resume? Any suggestions for
troubleshooting this? A dry ConnectionDone doesn't tell much.

Is it possible to make t.m.sendmail() attempt another delivery without
STARTTLS?

Best regards,
Burak ARSLAN




From jsmonges at gmail.com  Tue Feb  5 14:26:39 2019
From: jsmonges at gmail.com (Joe Smongeski)
Date: Tue, 5 Feb 2019 16:26:39 -0500
Subject: [Twisted-Python] trouble installing 18.9.0
Message-ID: <CAPO9U+mg2qFnx5wPS2NBYXsGP3eTo-4iwd1e8unF-SqTFxGMMA@mail.gmail.com>

I've been trying to install the latest Twisted 18.9.0 with pip install,
(using Oracle LInux 7.4),  but I'm getting compilation errors.  The first
one was:

src/twisted/test/raiser.c:4:20: fatal error: Python.h: No such file or
directory
#include "Python.h"

I was able to work around that, but now I"m getting this error:

gcc -pthread -shared -Wl,-z,relro -g -L ./python3.6m
build/temp.linux-x86_64-3.6/src/twisted/test/raiser.o -L/usr/lib64
*-lpython3.6m* -o build/lib.linux-x86_64-3.6/twisted/test/
raiser.cpython-36m-x86_64-linux-gnu.so
   * /etc/alternatives/ld: cannot find -lpython3.6m*
    collect2: error: ld returned 1 exit status
    error: command 'gcc' failed with exit status 1

Since the compile is under the control of all the install scripts, I can't
determine where the linker is looking for "python36m".

Any help would be much appreciated!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190205/4e46d585/attachment-0002.html>

From sda at fstab.net  Tue Feb  5 14:57:56 2019
From: sda at fstab.net (Kyle Altendorf)
Date: Tue, 05 Feb 2019 16:57:56 -0500
Subject: [Twisted-Python] trouble installing 18.9.0
In-Reply-To: <CAPO9U+mg2qFnx5wPS2NBYXsGP3eTo-4iwd1e8unF-SqTFxGMMA@mail.gmail.com>
References: <CAPO9U+mg2qFnx5wPS2NBYXsGP3eTo-4iwd1e8unF-SqTFxGMMA@mail.gmail.com>
Message-ID: <e6d5200496c8e25a854223b76bdfeea4@fstab.net>

On 2019-02-05 16:26, Joe Smongeski wrote:

> I've been trying to install the latest Twisted 18.9.0 with pip install, 
> (using Oracle LInux 7.4),  but I'm getting compilation errors.  The 
> first one was:
> 
> src/twisted/test/raiser.c:4:20: fatal error: Python.h: No such file or 
> directory
> #include "Python.h"

This is usually addressed by installing a python3-dev package, or 
similar.  What did you do?

> I was able to work around that, but now I"m getting this error:
> 
> gcc -pthread -shared -Wl,-z,relro -g -L ./python3.6m 
> build/temp.linux-x86_64-3.6/src/twisted/test/raiser.o -L/usr/lib64 
> -LPYTHON3.6M -o 
> build/lib.linux-x86_64-3.6/twisted/test/raiser.cpython-36m-x86_64-linux-gnu.so
> /ETC/ALTERNATIVES/LD: CANNOT FIND -LPYTHON3.6M
> collect2: error: ld returned 1 exit status
> error: command 'gcc' failed with exit status 1
> 
> Since the compile is under the control of all the install scripts, I 
> can't determine where the linker is looking for "python36m".

The all caps `PYTHON3.6M` and `/ETC/ALTERNATIVES/LD: CANNOT FIND 
-LPYTHON3.6M` seem pretty weird to me.

It might be helpful to share a full transcript (prompts, commands, 
output) of the installation (including creating a virtualenv or venv, 
etc)

Cheers,
-kyle



From glyph at twistedmatrix.com  Sun Feb 10 00:35:42 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 9 Feb 2019 23:35:42 -0800
Subject: [Twisted-Python] SMTPClient disconnects following STARTTLS
In-Reply-To: <951a65e9-055e-61a3-60d8-a7a32e95a7d6@arskom.com.tr>
References: <951a65e9-055e-61a3-60d8-a7a32e95a7d6@arskom.com.tr>
Message-ID: <5BE021A5-F598-4455-B2A3-9E8CAE708E12@twistedmatrix.com>



> On Feb 5, 2019, at 7:15 AM, Burak Arslan <burak.arslan at arskom.com.tr> wrote:
> 
> Hello,
> 
> I'm trying to deliver mail using twisted.mail.sendmail (version 18.9.0)

Thanks for using Twisted, and thanks for already being on the latest version!

> Delivery attempts to some servers fail either with disconnections or
> timeouts following the STARTTLS command. When I disable STARTTLS (by
> patching tryTLS()) message delivery succeeds.
> 
> So is there a way to log the TLS handshake process to be able to
> understand why the TLS connection cannot resume? Any suggestions for
> troubleshooting this? A dry ConnectionDone doesn't tell much.

If you really want to log the handshake itself, you could try starting with Wireshark, which would at least tell you something about the contents of said handshake.  However, this may not be all that useful initially.

There are lots of potential problems here.  One is that ESMTPSender uses TLSv1_METHOD[1], which may be provoking your peers into dropping the connection because it's too old a version.  You haven't said anything about how you're building your client context, and there are several other potential problems with the default.

Another potential problem is that I don't know how you've set up Twisted's logging.  If Twisted were logging a traceback, would you see it?

In general this is a very difficult problem to debug, email is non-deterministic and scary, but it upgrades from "difficult" to "impossible" without seeing the sample code doing the sending :-).

> Is it possible to make t.m.sendmail() attempt another delivery without
> STARTTLS?

If you do this, you're quite likely to end up in a situation where your messages are far more likely to be flagged as spam by your ESP.  STARTTLS is generally considered a positive signal for deliverability.  (See https://starttls-everywhere.org <https://starttls-everywhere.org/>).

> Best regards,
> Burak ARSLAN

Hopefully some of my guesses were helpful, but I'm looking forward to seeing your code, and hopeful that someone on the list can help you work through to the point where you can deliver some mail :).

-g

[1]: At the time ESMTPSender was written, TLSv1_METHOD was a bold, forward-looking SSL_METHOD to select!  It was the most recent version of the protocol, and explicitly opted out of vulnerable SSLv2 and SSLv3 protocol versions.  However, the OpenSSL API is nothing if not deeply unfortunate, so this has metastasized over time into an incredibly ancient and bad SSL_METHOD; the correct one that you want is SSLv23_METHOD which means "negotiate TLS version" (and practically no current version of OpenSSL will negotiate either SSLv2 *or* SSLv3 with this method, since they're broken and deprecated).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190209/e3660830/attachment-0002.html>

From mehtab.zafar98 at gmail.com  Sun Feb 10 11:22:56 2019
From: mehtab.zafar98 at gmail.com (Mehtab Zafar)
Date: Sun, 10 Feb 2019 23:52:56 +0530
Subject: [Twisted-Python] Content length of a response in treq
Message-ID: <CAOSmU6Qo5X8PFFEh0ALmaPsVCoyNrSkaQ1QbDup8JVgbg8_5fg@mail.gmail.com>

Hi,
I am trying to use treq for a project in which I am also going to generate
a progress bar for the downloading session. But the problem I am facing is
that I can't find a way to get the content length header from the response.

The "response.length"  gives me "unknown size".So I there a way I can get
the length for all types of content?

Thanks
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190210/081cff62/attachment-0002.html>

From adi at roiban.ro  Sun Feb 10 12:36:19 2019
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 10 Feb 2019 19:36:19 +0000
Subject: [Twisted-Python] Content length of a response in treq
In-Reply-To: <CAOSmU6Qo5X8PFFEh0ALmaPsVCoyNrSkaQ1QbDup8JVgbg8_5fg@mail.gmail.com>
References: <CAOSmU6Qo5X8PFFEh0ALmaPsVCoyNrSkaQ1QbDup8JVgbg8_5fg@mail.gmail.com>
Message-ID: <CAFycZ9fuLVdVLZ1pfvrJP2Ak0fw=Doqe6+khyHhbEX0SqyS6Hw@mail.gmail.com>

On Sun, 10 Feb 2019 at 18:23, Mehtab Zafar <mehtab.zafar98 at gmail.com> wrote:
>
> Hi,
> I am trying to use treq for a project in which I am also going to generate a progress bar for the downloading session. But the problem I am facing is that I can't find a way to get the content length header from the response.
>
> The "response.length"  gives me "unknown size".So I there a way I can get the length for all types of content?
>
> Thanks

Hi,

Which encoding is used for your response?

Do you have Chunked encoding
https://en.wikipedia.org/wiki/Chunked_transfer_encoding
In this case, the content length is not advertised in the response headers.

Regards,
-- 
Adi Roiban



From trac at twistedmatrix.com  Sun Feb 17 00:05:27 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 17 Feb 2019 07:05:27 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1550387127.24.617031422454312050@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190217/3a75dfd9/attachment-0002.html>

From chris at withers.org  Tue Feb 19 04:00:57 2019
From: chris at withers.org (Chris Withers)
Date: Tue, 19 Feb 2019 11:00:57 +0000
Subject: [Twisted-Python] why can't a callback be called with a deferred?
Message-ID: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>

Hi All,

There's this assert:

https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/defer.py#L459

...and I'd like to understand why it's there.

I have what feels like a legitimate case where that assert trips me up, 
as I'd like to change this line:

https://github.com/cjw296/carly/blob/d39e316aa0f9e05613c263410e7b3ba5bcacba3a/carly/hook.py#L67

...to just return result.value. However, if the method being hooked 
returns a deferred, then I trip the assert.
Unfortunately, the commit that introduced that assert is just a one 
liner from Itamar back in 2003 without any context of what problem lead 
him to introduce the change.

Of course, I can work around it, was more curious than anything...

Chris



From adi at roiban.ro  Tue Feb 19 04:41:37 2019
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 19 Feb 2019 11:41:37 +0000
Subject: [Twisted-Python] why can't a callback be called with a deferred?
In-Reply-To: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
References: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
Message-ID: <CAFycZ9dh71UhcjLyiN+RMfBwyt5bYB36-E6x9rSCP=4LyT+OGA@mail.gmail.com>

On Tue, 19 Feb 2019 at 11:01, Chris Withers <chris at withers.org> wrote:
>
> Hi All,
>
> There's this assert:
>
> https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/defer.py#L459
>
> ...and I'd like to understand why it's there.

[snip]

> Unfortunately, the commit that introduced that assert is just a one
> liner from Itamar back in 2003 without any context of what problem lead
> him to introduce the change.

I think it was introduced to catch some common bad usage patterns ...
like yours :)

If you want to chain the deferreds, use the dedicated helper
https://twistedmatrix.com/documents/current/core/howto/defer.html#chaining-deferreds

Deferred are not always 100% resolved/called.
You might have a deferred called, but the current result might be
another deferred... so it has no final result yet.

----

so in your case, instead of `returnValue(result)`  use

result = yield result
returnValue(result)


in this way, the result is resolved :)

Hope it helps



--
Adi Roiban



From chris at withers.org  Tue Feb 19 06:34:59 2019
From: chris at withers.org (Chris Withers)
Date: Tue, 19 Feb 2019 13:34:59 +0000
Subject: [Twisted-Python] why can't a callback be called with a deferred?
In-Reply-To: <CAFycZ9dh71UhcjLyiN+RMfBwyt5bYB36-E6x9rSCP=4LyT+OGA@mail.gmail.com>
References: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
 <CAFycZ9dh71UhcjLyiN+RMfBwyt5bYB36-E6x9rSCP=4LyT+OGA@mail.gmail.com>
Message-ID: <c6a3a513-abbf-a0c0-845a-74fa87bbef84@withers.org>

On 19/02/2019 11:41, Adi Roiban wrote:
>
> I think it was introduced to catch some common bad usage patterns ...
> like yours :)

Not a massively helpful comment.

> If you want to chain the deferreds, use the dedicated helper
> https://twistedmatrix.com/documents/current/core/howto/defer.html#chaining-deferreds
>
> Deferred are not always 100% resolved/called.
> You might have a deferred called, but the current result might be
> another deferred... so it has no final result yet.
>
> ----
>
> so in your case, instead of `returnValue(result)` use
>
> result = yield result
> returnValue(result)
>
>
> in this way, the result is resolved :)

The methods being hooked don't necessarily return deferreds.
I'd like it to be an explicit choice of the caller, ie:

result = yield SomeProtocol.onMessage.called()
# okay, we got here, we know onMessage was called,
# now we might want to tick a clock, or otherwise simulate
# async state manipulation.
# now I want to make sure the deferred chain on the onMessage result has 
been completed:
yield result

cheers,

Chris



From glyph at twistedmatrix.com  Wed Feb 20 23:55:24 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 20 Feb 2019 22:55:24 -0800
Subject: [Twisted-Python] why can't a callback be called with a deferred?
In-Reply-To: <c6a3a513-abbf-a0c0-845a-74fa87bbef84@withers.org>
References: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
 <CAFycZ9dh71UhcjLyiN+RMfBwyt5bYB36-E6x9rSCP=4LyT+OGA@mail.gmail.com>
 <c6a3a513-abbf-a0c0-845a-74fa87bbef84@withers.org>
Message-ID: <7D6C45E2-2B0E-4448-A077-189AE6484E73@twistedmatrix.com>



> On Feb 19, 2019, at 5:34 AM, Chris Withers <chris at withers.org> wrote:
> 
> On 19/02/2019 11:41, Adi Roiban wrote:
>> 
>> I think it was introduced to catch some common bad usage patterns ...
>> like yours :)
> 
> Not a massively helpful comment.

I think what Adi was trying to get at here is that this is exactly the sort of type confusion that this assert was intended to defend against.

That said, the bare assert in question was definitely written with the implementor's sort of "this should never happen" hat on, not the "let's report a useful error to the user" hat.  So it could certainly stand to be improved regardless.

>> If you want to chain the deferreds, use the dedicated helper
>> https://twistedmatrix.com/documents/current/core/howto/defer.html#chaining-deferreds <https://twistedmatrix.com/documents/current/core/howto/defer.html#chaining-deferreds>

>> Deferred are not always 100% resolved/called.
>> You might have a deferred called, but the current result might be
>> another deferred... so it has no final result yet.
>> 
>> ----
>> 
>> so in your case, instead of `returnValue(result)` use
>> 
>> result = yield result
>> returnValue(result)
>> 
>> in this way, the result is resolved :)
> 
> The methods being hooked don't necessarily return deferreds.
> I'd like it to be an explicit choice of the caller, ie:
> 
> result = yield SomeProtocol.onMessage.called()
> # okay, we got here, we know onMessage was called,
> # now we might want to tick a clock, or otherwise simulate
> # async state manipulation.
> # now I want to make sure the deferred chain on the onMessage result has been completed:
> yield result

I'm not sure I understand your example here.  The assertion in question only happens if you call returnValue or do a return with a Deferred directly; this example doesn't do either of those things.

I think you could fix the linked example code to still do what you want by simply doing `returnValue(yield result)`?

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190220/171a900a/attachment-0002.html>

From chris at withers.org  Thu Feb 21 00:03:31 2019
From: chris at withers.org (Chris Withers)
Date: Thu, 21 Feb 2019 07:03:31 +0000
Subject: [Twisted-Python] why can't a callback be called with a deferred?
In-Reply-To: <7D6C45E2-2B0E-4448-A077-189AE6484E73@twistedmatrix.com>
References: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
 <CAFycZ9dh71UhcjLyiN+RMfBwyt5bYB36-E6x9rSCP=4LyT+OGA@mail.gmail.com>
 <c6a3a513-abbf-a0c0-845a-74fa87bbef84@withers.org>
 <7D6C45E2-2B0E-4448-A077-189AE6484E73@twistedmatrix.com>
Message-ID: <3a8b33a3-a339-e843-71cc-186338b5a9be@withers.org>

On 21/02/2019 06:55, Glyph wrote:
>
>
>> The methods being hooked don't necessarily return deferreds.

Glyph, this bit ^^^

>> I'd like it to be an explicit choice of the caller, ie:
>>
>> result = yield SomeProtocol.onMessage.called()
>> # okay, we got here, we know onMessage was called,
>> # now we might want to tick a clock, or otherwise simulate
>> # async state manipulation.
>> # now I want to make sure the deferred chain on the onMessage result 
>> has been completed:
>> yield result
>
> I'm not sure I understand your example here. 

Yeah, this is part of carly, that I posted earlier. It stems from the 
need to get the results of method calls when you have no reference to 
the object being calls, or sometimes a result that's a deferred you need 
to wait on, particularly in a test, but have no way of doing so.

If you're feeling brave, have a read of:
https://github.com/cjw296/carly/blob/master/carly/hook.py

> The assertion in question only happens if you call returnValue or do a 
> return with a Deferred directly; this example doesn't do either of 
> those things.

This is the test situation where I hit this issue:
https://github.com/cjw296/carly/blob/master/tests/test_untracked_deferred.py#L28-L35

I'd originally wanted to have that read:

@inlineCallbacks
def test1(self):
...
result = yield pita.asyncMethod.called()
with ShouldRaise(Exception(1)):
yield result

Now, which I'm actually happier with the end result here, I think the 
above it legit, if unusual, and that assert trips it up.

cheers,

Chris



From glyph at twistedmatrix.com  Thu Feb 21 00:32:54 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 20 Feb 2019 23:32:54 -0800
Subject: [Twisted-Python] why can't a callback be called with a deferred?
In-Reply-To: <42aba870-05ae-a3de-c7ae-0fddac487769@withers.org>
References: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
 <CAFycZ9dh71UhcjLyiN+RMfBwyt5bYB36-E6x9rSCP=4LyT+OGA@mail.gmail.com>
 <c6a3a513-abbf-a0c0-845a-74fa87bbef84@withers.org>
 <7D6C45E2-2B0E-4448-A077-189AE6484E73@twistedmatrix.com>
 <42aba870-05ae-a3de-c7ae-0fddac487769@withers.org>
Message-ID: <2F447265-3737-47F9-A328-589F9C375252@twistedmatrix.com>



> On Feb 20, 2019, at 11:03 PM, Chris Withers <chris at withers.org> wrote:
> 
> On 21/02/2019 06:55, Glyph wrote:
>>> The methods being hooked don't necessarily return deferreds.
> 
> Glyph, this bit ^^^
> 
>>> I'd like it to be an explicit choice of the caller, ie:
>>> 
>>> result = yield SomeProtocol.onMessage.called()
>>> # okay, we got here, we know onMessage was called,
>>> # now we might want to tick a clock, or otherwise simulate
>>> # async state manipulation.
>>> # now I want to make sure the deferred chain on the onMessage result has been completed:
>>> yield result
>> I'm not sure I understand your example here. 
> 
> Yeah, this is part of carly, that I posted earlier. It stems from the need to get the results of method calls when you have no reference to the object being calls, or sometimes a result that's a deferred you need to wait on, particularly in a test, but have no way of doing so.

I just can't parse this sentence.

Breaking it down:

> you have no reference to the object being calls,

How do you have no reference to the object being called? Aren't you calling it?

> or sometimes a result that's a deferred you need to wait on, particularly in a test, but have no way of doing so

But... you do have a way of doing so.  You yield it from inlineCallbacks or you add a callback to it.

In any case you either have a Deferred or you don't; if you do, then it's clear you should wait on it, if you don't, then it's clear you should not wait on it.  If you want an API that allows some user code to do either, that's what 'maybeDeferred' is for.

> If you're feeling brave, have a read of:
> https://github.com/cjw296/carly/blob/master/carly/hook.py
> 
>> The assertion in question only happens if you call returnValue or do a return with a Deferred directly; this example doesn't do either of those things.
> 
> This is the test situation where I hit this issue:
> https://github.com/cjw296/carly/blob/master/tests/test_untracked_deferred.py#L28-L35
> 
> I'd originally wanted to have that read:
> 
>    @inlineCallbacks
>    def test1(self):
>        ...
>        result = yield pita.asyncMethod.called()
>        with ShouldRaise(Exception(1)):
>            yield result
> 
> Now, which I'm actually happier with the end result here, I think the above it legit, if unusual, and that assert trips it up.

Some type annotations might make it a bit clearer what the two states here are :).  As it is, it looks to me you want a Deferred to come *out* of a 'yield', which should definitely never happen.  If this assert were to be removed, it would be done in such a way that would implicitly wait for the Deferred in question to fire: you should never receive a Deferred as an argument to a function, or as the result of an (inlineCallbacks) 'yield' or (async def) 'await'.  It breaks the whole model of what 'awaiting' means.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190220/56ad0744/attachment-0002.html>

From chris at withers.org  Thu Feb 21 00:53:34 2019
From: chris at withers.org (Chris Withers)
Date: Thu, 21 Feb 2019 07:53:34 +0000
Subject: [Twisted-Python] why can't a callback be called with a deferred?
In-Reply-To: <2F447265-3737-47F9-A328-589F9C375252@twistedmatrix.com>
References: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
 <CAFycZ9dh71UhcjLyiN+RMfBwyt5bYB36-E6x9rSCP=4LyT+OGA@mail.gmail.com>
 <c6a3a513-abbf-a0c0-845a-74fa87bbef84@withers.org>
 <7D6C45E2-2B0E-4448-A077-189AE6484E73@twistedmatrix.com>
 <42aba870-05ae-a3de-c7ae-0fddac487769@withers.org>
 <2F447265-3737-47F9-A328-589F9C375252@twistedmatrix.com>
Message-ID: <61b73d1a-efdd-e374-df4b-dc1fc2ac9497@withers.org>

On 21/02/2019 07:32, Glyph wrote:
> 
> 
>> Yeah, this is part of carly, that I posted earlier. It stems from the 
>> need to get the results of method calls when you have no reference to 
>> the object being calls, or sometimes a result that's a deferred you 
>> need to wait on, particularly in a test, but have no way of doing so.
> 
> I just can't parse this sentence.

Sorry, some typos in there are not helping ;-(

> Breaking it down:
> 
>> you have no reference to the object being calls,
> 
> How do you have no reference to the object being called? Aren't you 
> calling it?

That test case I linked to shows one example, the original ones were 
from abstracting out JML's original post here:
https://jml.io/pages/how-to-disconnect-in-twisted-really.html

> In any case you either have a Deferred or you don't; if you do, then 
> it's clear you should wait on it,

Yes, but where to wait is the question here. I'd like to leave that 
choice to the user (see back in the thread for the details).

>> This is the test situation where I hit this issue:
>> https://github.com/cjw296/carly/blob/master/tests/test_untracked_deferred.py#L28-L35
>>
>> I'd originally wanted to have that read:
>>
>>    @inlineCallbacks
>>    def test1(self):
>>        ...
>>        result = yield pita.asyncMethod.called()
>>        with ShouldRaise(Exception(1)):
>>            yield result
>>
>> Now, which I'm actually happier with the end result here, I think the 
>> above it legit, if unusual, and that assert trips it up.
> 
> Some type annotations might make it a bit clearer what the two states 
> here are :).  

If those annotations were there, what would they look like? (I did link 
to the whole test file, which has all the detail I think you could need, 
it's pretty self contained and not that long)

> As it is, it looks to me you want a Deferred to come *out* 
> of a 'yield', which should definitely never happen. 

I disagree, in this specific case.

> If this assert were 
> to be removed, it would be done in such a way that would implicitly wait 
> for the Deferred in question to fire: you should /never/ receive a 
> Deferred as an argument to a function, or as the result of an 
> (inlineCallbacks) 'yield' or (async def) 'await'.  It breaks the whole 
> model of what 'awaiting' means.

Well, I'd agree 90% of the time, but test_untracked_deferred.py is where 
that's no always true.

Anyway, I'm happy with the API I have now, and it neatly works around 
that assert, so ¯\_(ツ)_/¯.

Chris



From trac at twistedmatrix.com  Sun Feb 24 00:05:18 2019
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 24 Feb 2019 07:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1550991918.6.9179583645031384109@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190224/306acb5e/attachment-0002.html>

From hawkowl at atleastfornow.net  Sun Feb 24 12:19:28 2019
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Sun, 24 Feb 2019 11:19:28 -0800
Subject: [Twisted-Python] Twisted 19.2.0rc1 Release Candidate Announcement
Message-ID: <946564e6-c351-66b5-cf5c-d29e9a15bb67@atleastfornow.net>

Hello from PyCascades! Straight from the Pacific North-West, a new 
Twisted release candidate!

In this release, there is:

- twisted.web.client.HostnameCachingHTTPSPolicy was added as a new 
contextFactory option. This reduces the performance overhead for making 
many TLS connections to the same host.
- twisted.conch.ssh.keys can now read private keys in the new 
"openssh-key-v1" format, introduced in OpenSSH 6.5 and made the default 
in OpenSSH 7.8.
- The sample code in the "Twisted Web In 60 Seconds" tutorial runs on 
Python 3.
- DeferredLock and DeferredSemaphore can be used as asynchronous context 
managers on Python 3.5+.
- twisted.internet.ssl.CertificateOptions now uses 32 random bytes 
instead of an MD5 hash for the ssl session identifier context.
- twisted.python.failure.Failure.getTracebackObject now returns 
traceback objects whose frames can be passed into traceback.print_stack 
for better debugging of where the exception came from.
- Much more! 20+ tickets closed overall.

You can get the tarball and the NEWS file at 
https://twistedmatrix.com/Releases/rc/19.2.0rc1/ , or you can try it out 
from PyPI:

     python -m pip install Twisted==19.2.0rc1

Please test it, and let me know how your applications fare, good or bad! 
If nothing comes up, 19.2 will release in a week.

Twisted regards,

Amber Brown (hawkowl)



From barry.scott at forcepoint.com  Mon Feb 25 04:32:18 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Mon, 25 Feb 2019 11:32:18 +0000
Subject: [Twisted-Python] why can't a callback be called with a deferred?
In-Reply-To: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
References: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
Message-ID: <5270225.y76kS8R4JG@barry-scott-desktop>

On Tuesday, 19 February 2019 11:00:57 GMT Chris Withers wrote:
> Hi All,
> 
> There's this assert:
> 
> https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/defer.py#
> L459
> 
> ...and I'd like to understand why it's there.

We hit this assert when porting from very old twisted to current twisted.
In all cases the problem was with our code that used deferreds in a poor, not
well understood way. After refactoring we are a lot happier with the
resulting code as it easier to maintain now.

Barry





From chris at withers.org  Mon Feb 25 05:02:48 2019
From: chris at withers.org (Chris Withers)
Date: Mon, 25 Feb 2019 12:02:48 +0000
Subject: [Twisted-Python] http://twistedmatrix.com/ down?
Message-ID: <ed8ea849-e1d9-0ac7-df6c-a4de9094391a@withers.org>

Looks to be...

Chris



From glyph at twistedmatrix.com  Mon Feb 25 23:33:52 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 25 Feb 2019 22:33:52 -0800
Subject: [Twisted-Python] http://twistedmatrix.com/ down?
In-Reply-To: <ed8ea849-e1d9-0ac7-df6c-a4de9094391a@withers.org>
References: <ed8ea849-e1d9-0ac7-df6c-a4de9094391a@withers.org>
Message-ID: <4B19FFCF-289B-45AA-878E-50E421CC3E67@twistedmatrix.com>



> On Feb 25, 2019, at 4:02 AM, Chris Withers <chris at withers.org> wrote:
> 
> Looks to be...
> 
> Chris

It seems like Mark Williams caught this and restarted the service shortly after this report, so it's mostly been fine since.

This might be a good opportunity to mention that Twisted's infrastructure has very few people to operate it, with fairly limited availability.  If you're interested in helping out with it, I'd love to hear from you.

One thing that we could use help with: there appears to be a memory leak, perhaps in Twisted itself, which leads to these slowdowns / crashes.  It would be great if someone could instrument the server to figure out where the problem is!  Said instrumentation could be delivered as a patch to https://github.com/twisted-infra/braid/blob/master/services/t-web/twisted-web/twisted-web <https://github.com/twisted-infra/braid/blob/master/services/t-web/twisted-web/twisted-web>.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190225/6bc4a609/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Feb 25 23:34:28 2019
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 25 Feb 2019 22:34:28 -0800
Subject: [Twisted-Python] why can't a callback be called with a deferred?
In-Reply-To: <5270225.y76kS8R4JG@barry-scott-desktop>
References: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
 <5270225.y76kS8R4JG@barry-scott-desktop>
Message-ID: <F37821FA-01AE-4C39-8230-6046A3588704@twistedmatrix.com>



> On Feb 25, 2019, at 3:32 AM, Scott, Barry <barry.scott at forcepoint.com> wrote:
> 
> On Tuesday, 19 February 2019 11:00:57 GMT Chris Withers wrote:
>> Hi All,
>> 
>> There's this assert:
>> 
>> https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/defer.py#
>> L459
>> 
>> ...and I'd like to understand why it's there.
> 
> We hit this assert when porting from very old twisted to current twisted.
> In all cases the problem was with our code that used deferreds in a poor, not
> well understood way. After refactoring we are a lot happier with the
> resulting code as it easier to maintain now.

Thanks for the feedback, Barry!

It would still be great to figure out, if we can, how we might make the error message a bit more legible to folks with less knowledge of Twisted's internals.

-g


From barry.scott at forcepoint.com  Wed Feb 27 07:34:33 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Wed, 27 Feb 2019 14:34:33 +0000
Subject: [Twisted-Python] why can't a callback be called with a deferred?
In-Reply-To: <F37821FA-01AE-4C39-8230-6046A3588704@twistedmatrix.com>
References: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
 <5270225.y76kS8R4JG@barry-scott-desktop>
 <F37821FA-01AE-4C39-8230-6046A3588704@twistedmatrix.com>
Message-ID: <4829912.vJhfm6kxPa@barry-scott-desktop>

On Tuesday, 26 February 2019 06:34:28 GMT Glyph wrote:
> > On Feb 25, 2019, at 3:32 AM, Scott, Barry <barry.scott at forcepoint.com>
> > wrote:> 
> > On Tuesday, 19 February 2019 11:00:57 GMT Chris Withers wrote:
> >> Hi All,
> >> 
> >> There's this assert:
> >> 
> >> https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/defer.
> >> py# L459
> >> 
> >> ...and I'd like to understand why it's there.
> > 
> > We hit this assert when porting from very old twisted to current twisted.
> > In all cases the problem was with our code that used deferreds in a poor,
> > not well understood way. After refactoring we are a lot happier with the
> > resulting code as it easier to maintain now.
> 
> Thanks for the feedback, Barry!
> 
> It would still be great to figure out, if we can, how we might make the
> error message a bit more legible to folks with less knowledge of Twisted's
> internals.

Let suppose that I need work done by doWork function.
It returns a deferred for me to hang call backs and error backs on.

	d = doWork()
	d.addCallback(handleWorkDone)

In my handleWorkDone I expect to get the result of doWork completing.

The assert fires if instead of a result value is returned a Deferred is 
returned. This I consider a bug in the doWork() implementation.

What must happen in doWork is that it must arrange that
any Deferred it used internally has an addCallback used to
cause the d returned to the user to complete. Leaking the
any internal Deferred() objects must not happen to the user
of doWork.

def doWork():
	d = Deferred()

	def completeWork(result, d):
		d.callback(result)

	inner_d = doAsyncWork()
	inner_d.addCallback(completeWork, d)

	return d

The error message would need to say something like:
"Cannot return a Deferred as a result. Did you forgot to addCallback to the 
deferred?"

Maybe add something to docs based on the above and refer to it in the message?

Barry





From exarkun at twistedmatrix.com  Wed Feb 27 07:45:35 2019
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Wed, 27 Feb 2019 09:45:35 -0500
Subject: [Twisted-Python] why can't a callback be called with a deferred?
In-Reply-To: <4829912.vJhfm6kxPa@barry-scott-desktop>
References: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
 <5270225.y76kS8R4JG@barry-scott-desktop>
 <F37821FA-01AE-4C39-8230-6046A3588704@twistedmatrix.com>
 <4829912.vJhfm6kxPa@barry-scott-desktop>
Message-ID: <CAEeXt4PjQf1AODsuu+HVjHAAw8L0BqueGhwzBeVqL7J5GazzmQ@mail.gmail.com>

On Wed, Feb 27, 2019 at 9:34 AM Scott, Barry <barry.scott at forcepoint.com>
wrote:

> On Tuesday, 26 February 2019 06:34:28 GMT Glyph wrote:
> > > On Feb 25, 2019, at 3:32 AM, Scott, Barry <barry.scott at forcepoint.com>
> > > wrote:>
> > > On Tuesday, 19 February 2019 11:00:57 GMT Chris Withers wrote:
> > >> Hi All,
> > >>
> > >> There's this assert:
> > >>
> > >>
> https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/defer.
> > >> py# L459
> > >>
> > >> ...and I'd like to understand why it's there.
> > >
> > > We hit this assert when porting from very old twisted to current
> twisted.
> > > In all cases the problem was with our code that used deferreds in a
> poor,
> > > not well understood way. After refactoring we are a lot happier with
> the
> > > resulting code as it easier to maintain now.
> >
> > Thanks for the feedback, Barry!
> >
> > It would still be great to figure out, if we can, how we might make the
> > error message a bit more legible to folks with less knowledge of
> Twisted's
> > internals.
>
> Let suppose that I need work done by doWork function.
> It returns a deferred for me to hang call backs and error backs on.
>
>         d = doWork()
>         d.addCallback(handleWorkDone)
>
> In my handleWorkDone I expect to get the result of doWork completing.
>
> The assert fires if instead of a result value is returned a Deferred is
> returned. This I consider a bug in the doWork() implementation.
>

This doesn't sound right.  Can you provide an example implementation of
doWork that provokes this behavior?  Here's an implementation that seems
like it matches your description and which does not provoke the behavior:

    def doWork():
        d = Deferred()
        d.callback("result")
        return d

    d = doWork()
    d.addCallback(handleWorkDone)

This doesn't trigger the assert.  This calls handleWorkDone with "result".
If you simplify the code so the Deferred interaction remains the same but
all the extraneous code is removed, it looks like this:

    d = Deferred()
    d.callback("result")
    d.addCallback(handleWorkDone)

which *must* work or Deferred is completely useless.

Jean-Paul



>
> What must happen in doWork is that it must arrange that
> any Deferred it used internally has an addCallback used to
> cause the d returned to the user to complete. Leaking the
> any internal Deferred() objects must not happen to the user
> of doWork.
>
> def doWork():
>         d = Deferred()
>
>         def completeWork(result, d):
>                 d.callback(result)
>
>         inner_d = doAsyncWork()
>         inner_d.addCallback(completeWork, d)
>
>         return d
>
> The error message would need to say something like:
> "Cannot return a Deferred as a result. Did you forgot to addCallback to
> the
> deferred?"
>
> Maybe add something to docs based on the above and refer to it in the
> message?
>
> Barry
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190227/dd5a99e4/attachment-0002.html>

From barry.scott at forcepoint.com  Wed Feb 27 08:06:50 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Wed, 27 Feb 2019 15:06:50 +0000
Subject: [Twisted-Python] why can't a callback be called with a deferred?
In-Reply-To: <CAEeXt4PjQf1AODsuu+HVjHAAw8L0BqueGhwzBeVqL7J5GazzmQ@mail.gmail.com>
References: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
 <4829912.vJhfm6kxPa@barry-scott-desktop>
 <CAEeXt4PjQf1AODsuu+HVjHAAw8L0BqueGhwzBeVqL7J5GazzmQ@mail.gmail.com>
Message-ID: <9246088.02nLPNFrPr@barry-scott-desktop>

On Wednesday, 27 February 2019 14:45:35 GMT Jean-Paul Calderone wrote:
> On Wed, Feb 27, 2019 at 9:34 AM Scott, Barry <barry.scott at forcepoint.com>
> 
> wrote:
> > On Tuesday, 26 February 2019 06:34:28 GMT Glyph wrote:
> > > > On Feb 25, 2019, at 3:32 AM, Scott, Barry <barry.scott at forcepoint.com>
> > > > wrote:>
> > > > 
> > > > On Tuesday, 19 February 2019 11:00:57 GMT Chris Withers wrote:
> > > >> Hi All,
> > 
> > > >> There's this assert:
> > https://github.com/twisted/twisted/blob/trunk/src/twisted/internet/defer.
> > 
> > > >> py# L459
> > > >> 
> > > >> ...and I'd like to understand why it's there.
> > > > 
> > > > We hit this assert when porting from very old twisted to current
> > 
> > twisted.
> > 
> > > > In all cases the problem was with our code that used deferreds in a
> > 
> > poor,
> > 
> > > > not well understood way. After refactoring we are a lot happier with
> > 
> > the
> > 
> > > > resulting code as it easier to maintain now.
> > > 
> > > Thanks for the feedback, Barry!
> > > 
> > > It would still be great to figure out, if we can, how we might make the
> > > error message a bit more legible to folks with less knowledge of
> > 
> > Twisted's
> > 
> > > internals.
> > 
> > Let suppose that I need work done by doWork function.
> > It returns a deferred for me to hang call backs and error backs on.
> > 
> >         d = doWork()
> >         d.addCallback(handleWorkDone)
> > 
> > In my handleWorkDone I expect to get the result of doWork completing.
> > 
> > The assert fires if instead of a result value is returned a Deferred is
> > returned. This I consider a bug in the doWork() implementation.

The code I have posted is the good version so it works and the assert
does not fire. My goal is to show what I assume is the correct way to code
a function that uses internal Deferred(), not give an example that breaks.

This should cause the the assert as the code must wait for the thread to
return a result.

def doWork():
	d = Deferred()
	d2 = deferToThread(doWorkHelper)
	d.callback(d2)
	return d

Barry


> This doesn't sound right.  Can you provide an example implementation of
> doWork that provokes this behavior?  Here's an implementation that seems
> like it matches your description and which does not provoke the behavior:
> 
>     def doWork():
>         d = Deferred()
>         d.callback("result")
>         return d
> 
>     d = doWork()
>     d.addCallback(handleWorkDone)
> 
> This doesn't trigger the assert.  This calls handleWorkDone with "result".
> If you simplify the code so the Deferred interaction remains the same but
> all the extraneous code is removed, it looks like this:
> 
>     d = Deferred()
>     d.callback("result")
>     d.addCallback(handleWorkDone)
> 
> which *must* work or Deferred is completely useless.
> 
> Jean-Paul
> 
> > What must happen in doWork is that it must arrange that
> > any Deferred it used internally has an addCallback used to
> > cause the d returned to the user to complete. Leaking the
> > any internal Deferred() objects must not happen to the user
> > of doWork.
> > 
> > def doWork():
> >         d = Deferred()
> >         
> >         def completeWork(result, d):
> >                 d.callback(result)
> >         
> >         inner_d = doAsyncWork()
> >         inner_d.addCallback(completeWork, d)
> >         
> >         return d
> > 
> > The error message would need to say something like:
> > "Cannot return a Deferred as a result. Did you forgot to addCallback to
> > the
> > deferred?"
> > 
> > Maybe add something to docs based on the above and refer to it in the
> > message?
> > 
> > Barry
> > 
> > 
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python






From exarkun at twistedmatrix.com  Wed Feb 27 08:11:31 2019
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Wed, 27 Feb 2019 10:11:31 -0500
Subject: [Twisted-Python] why can't a callback be called with a deferred?
In-Reply-To: <9246088.02nLPNFrPr@barry-scott-desktop>
References: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
 <4829912.vJhfm6kxPa@barry-scott-desktop>
 <CAEeXt4PjQf1AODsuu+HVjHAAw8L0BqueGhwzBeVqL7J5GazzmQ@mail.gmail.com>
 <9246088.02nLPNFrPr@barry-scott-desktop>
Message-ID: <CAEeXt4MvF9EXr8jC46-pGkQffu9hduRfEzRDUJDiCMJ_p1ctOw@mail.gmail.com>

On Wed, Feb 27, 2019 at 10:07 AM Scott, Barry <barry.scott at forcepoint.com>
wrote:

>
> The code I have posted is the good version so it works and the assert
> does not fire. My goal is to show what I assume is the correct way to code
> a function that uses internal Deferred(), not give an example that breaks.
>
> This should cause the the assert as the code must wait for the thread to
> return a result.
>
> def doWork():
>         d = Deferred()
>         d2 = deferToThread(doWorkHelper)
>         d.callback(d2)
>         return d
>

Ah.  I see.  Indeed, this code is wrong and triggers the assert.  For what
it's worth, there is a simpler solution than the example you gave.  It uses
the "chainDeferred" method:

    def doWork():
        d = Deferred()
        d2 = deferToThread(doWorkHelper)
        d2.chainDeferred(d)
        return d

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20190227/f9b6e27c/attachment-0002.html>

From barry.scott at forcepoint.com  Thu Feb 28 03:08:25 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Thu, 28 Feb 2019 10:08:25 +0000
Subject: [Twisted-Python] why can't a callback be called with a deferred?
In-Reply-To: <CAEeXt4MvF9EXr8jC46-pGkQffu9hduRfEzRDUJDiCMJ_p1ctOw@mail.gmail.com>
References: <47efc2d0-9b5f-33ca-8ed7-d6f054443732@withers.org>
 <9246088.02nLPNFrPr@barry-scott-desktop>
 <CAEeXt4MvF9EXr8jC46-pGkQffu9hduRfEzRDUJDiCMJ_p1ctOw@mail.gmail.com>
Message-ID: <2743526.WHCksr77UW@barry-scott-desktop>

On Wednesday, 27 February 2019 15:11:31 GMT Jean-Paul Calderone wrote:
> On Wed, Feb 27, 2019 at 10:07 AM Scott, Barry <barry.scott at forcepoint.com>
> 
> wrote:
> > The code I have posted is the good version so it works and the assert
> > does not fire. My goal is to show what I assume is the correct way to code
> > a function that uses internal Deferred(), not give an example that breaks.
> > 
> > This should cause the the assert as the code must wait for the thread to
> > return a result.
> > 
> > def doWork():
> >         d = Deferred()
> >         d2 = deferToThread(doWorkHelper)
> >         d.callback(d2)
> >         return d
> 
> Ah.  I see.  Indeed, this code is wrong and triggers the assert.  For what
> it's worth, there is a simpler solution than the example you gave.  It uses
> the "chainDeferred" method:
> 
>     def doWork():
>         d = Deferred()
>         d2 = deferToThread(doWorkHelper)
>         d2.chainDeferred(d)
>         return d

The improved error message could suggest using chainDeferred() maybe.

> 
> Jean-Paul






From barry.scott at forcepoint.com  Thu Feb 28 03:15:43 2019
From: barry.scott at forcepoint.com (Scott, Barry)
Date: Thu, 28 Feb 2019 10:15:43 +0000
Subject: [Twisted-Python] Twisted: [twisted.internet.defer#critical]
 Unhandled error in Deferred:
Message-ID: <48491933.SM6WFROj7y@barry-scott-desktop>

Is it intentional to trigger this message?

The reason I ask it it comes from defer.py DebugInfo.___del__().
I though that DebugInfo objects are only created
if defer.DebugInfo.debug == True.

But in Deferred._runCallbacks:701 its created without a check in the
debug flag.

The reason I have noticed is that during my app shutdown an
ftp.FTPClient object is deleted that I think is causing the ftp
connection to close and the connectionClosed event is not
handled.

Barry





