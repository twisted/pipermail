From techtonik at gmail.com  Fri Apr  1 18:57:30 2016
From: techtonik at gmail.com (anatoly techtonik)
Date: Sat, 2 Apr 2016 03:57:30 +0300
Subject: [Twisted-Python] upcoming changes to twistedmatrix.com mail
	infrastructure
In-Reply-To: <6CC856DE-0A9F-44FC-A18B-63763D1DCFC0@twistedmatrix.com>
References: <D4ED8980-8B6B-48CD-AE83-8B00288A7481@twistedmatrix.com>
 <6CC856DE-0A9F-44FC-A18B-63763D1DCFC0@twistedmatrix.com>
Message-ID: <CAPkN8xL4K-xJz1D7gRySVPWAr_UEf4QKW3beCChoDGqhpjta+A@mail.gmail.com>

I prefer web-based access more than a list, so a thing like
http://try.discourse.org/ is more appropriate for me in terms
of usability.  Especially those shiny "with" login buttons.

On Fri, Apr 1, 2016 at 5:04 AM, Glyph <glyph at twistedmatrix.com> wrote:
>
> On Mar 16, 2016, at 11:52 AM, Glyph <glyph at twistedmatrix.com> wrote:
>
> Over the last few months, twistedmatrix.com's mailman installation has been
> used increasingly frequently to execute denial-of-service attacks against
> people's mailboxes.  This is accomplished by sending huge numbers of
> subscription requests to our website, which in turn sends huge numbers of
> confirmation emails to their inbox.  Based on some information that some
> targeted users have sent me, I now believe that this is to cause those
> users' mail quotas to be exceeded so that password reset or login
> notification emails won't reach them.
>
>
> I've taken the first few steps to migrating us over to Mailgun, but just as
> a minor status update: web-based subscription is now disabled.  If any
> generous souls would like to help out and update whatever wiki pages link to
> the mailman listinfo pages to say 'please send subscription requests to
> twisted-python-owner@ or twisted-web-owner@ instead' that would be great
> :-).  Those email addresses (and hopefully all the others, too) will keep
> working post-migration.
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
anatoly t.


From chris.norman2 at googlemail.com  Sat Apr  2 03:35:01 2016
From: chris.norman2 at googlemail.com (Chris Norman)
Date: Sat, 2 Apr 2016 10:35:01 +0100
Subject: [Twisted-Python] Problem with Deferreds
Message-ID: <56FF9245.2080208@googlemail.com>

Hi all,
I recently got over myself and forced myself to read about Deferreds 
rather than using threading opperations.

I've used them successfully in a couple of places, but this one has me 
flummoxed:

Here's the code for the Deferred and it's sub-commands:

  def do_command(self, cmd, **kwargs):
   """Process a command in true Deferred style."""
   if cmd.permissions(self.connection):
    cmd(self.connection, **kwargs)
   else:
    logger.warning('Blocked from running command %s which is secured 
with %s.', cmd.__name__, cmd.permissions.__name__)
    raise CommandError('You have insufficient privileges to perform this 
action. The staff have been notified.')

  def handle_error(self, err):
   """Handle an error from do_command."""
   if isinstance(err, CommandError):
    return self.send_error(e.message, disconnect = e.disconnect)
   else:
    self.log(e, level = 'exception')
    self.send_error('Sorry, but a problem with the server means your 
command was not executed. The staff have been notified.')

  def lineReceived(self, line):
   """Parse an incoming command."""
   global lines
   lines += 1 # Increment the line count.
   data = line.decode(settings.ENCODING)
   try:
    command, kwargs = json.loads(data)
    if not isinstance(command, string_types) or not isinstance(kwargs, 
dict):
     raise TypeError('Expecting [str, dict]. Got [%s, %s] instead.' % 
(type(command), type(kwargs)))
   except (TypeError, ValueError) as e:
    self.log('Invalid command string: %s', data, level = 'error')
    self.log(e, level = 'exception')
    return self.send_error('Invalid command.', disconnect = True)
   cmd = commands.commands.get(command, None)
   if cmd  is None:
    self.log('Unrecognised command: %s.', command, level = 'warning')
   elif self.connection.player or not cmd.login_required:
    d = defer.Deferred()
    print('Adding callback.')
    d.addCallback(self.do_command, **kwargs)
    print('Adding errback.')
    d.addErrback(self.handle_error)
    print('Calling callback.')
    d.callback(cmd)
    print('Called.') # Never gets this far.
    return d
   else:
    return self.send_error('Not authenticated.', disconnect = True)

Here's the traceback I get when the callback gets called:

Unhandled Error
Traceback (most recent call last):
   File "server/functions.py", line 88, in server_start
     reactor.run()
   File 
"/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/base.py", 
line 1194, in run
     self.mainLoop()
   File 
"/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/base.py", 
line 1206, in mainLoop
     self.doIteration(t)
   File 
"/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/epollreactor.py", 
line 396, in doPoll
     log.callWithLogger(selectable, _drdw, selectable, fd, event)
--- <exception caught here> ---
   File 
"/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/log.py", 
line 101, in callWithLogger
     return callWithContext({"system": lp}, func, *args, **kw)
   File 
"/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/log.py", 
line 84, in callWithContext
     return context.call({ILogContext: newCtx}, func, *args, **kw)
   File 
"/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/context.py", 
line 118, in callWithContext
     return self.currentContext().callWithContext(ctx, func, *args, **kw)
   File 
"/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/context.py", 
line 81, in callWithContext
     return func(*args,**kw)
   File 
"/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/posixbase.py", 
line 610, in _doReadOrWrite
     self._disconnectSelectable(selectable, why, inRead)
   File 
"/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/posixbase.py", 
line 258, in _disconnectSelectable
     selectable.connectionLost(failure.Failure(why))
   File 
"/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/failure.py", 
line 232, in __init__
     tb = self.value.__traceback__
builtins.AttributeError: 'Deferred' object has no attribute '__traceback__'

Anyone have any ideas?

Cheers,

Chris


From kevinjacobconway at gmail.com  Sat Apr  2 08:00:12 2016
From: kevinjacobconway at gmail.com (Kevin Conway)
Date: Sat, 02 Apr 2016 14:00:12 +0000
Subject: [Twisted-Python] Problem with Deferreds
In-Reply-To: <56FF9245.2080208@googlemail.com>
References: <56FF9245.2080208@googlemail.com>
Message-ID: <CAKF=+dhozabFY7ZbtM+KK2t=L+AGJz9jDk3y-BR=wQ8yQiPq6A@mail.gmail.com>

Hi Chris,

tl;dr: Returning a value from 'dataReceived', or any of its extensions such
as 'lineReceived' in the 'LineReceiver' Protocol subclass, triggers a
disconnect and uses the returned value as the 'reason'. A 'reason' must be
an Exception or t.p.Failure object as other values will trigger this error.

Are you quite certain that your last line is not getting printed? I'm not
sure exactly where this feature is documented, but returning any non-None
value from a Protocol's 'dataReceived' method can result in this behaviour.
The t.protocols.basic.LineReceiver calls 'lineReceived' from 'dataReceived'
and returns any value it gets from your implementation. The value returned
from 'dataReceived' is passed along to the transport's 'doRead' which,
again, returns it to the portion of the reactor handling selectables. The
reactor assumes that anything returned from a transport during a read or
write operation is a bad thing and disconnects the transport. During the
disconnect process the reactor is generating a t.p.failure.Failure object
and passing in your returned value as the 'why' which is expected to be an
Exception or Failure and not a Deferred. Try returning None instead of your
Deferred. That should resolve this particular issue.

On Sat, Apr 2, 2016 at 4:39 AM Chris Norman <chris.norman2 at googlemail.com>
wrote:

> Hi all,
> I recently got over myself and forced myself to read about Deferreds
> rather than using threading opperations.
>
> I've used them successfully in a couple of places, but this one has me
> flummoxed:
>
> Here's the code for the Deferred and it's sub-commands:
>
>   def do_command(self, cmd, **kwargs):
>    """Process a command in true Deferred style."""
>    if cmd.permissions(self.connection):
>     cmd(self.connection, **kwargs)
>    else:
>     logger.warning('Blocked from running command %s which is secured
> with %s.', cmd.__name__, cmd.permissions.__name__)
>     raise CommandError('You have insufficient privileges to perform this
> action. The staff have been notified.')
>
>   def handle_error(self, err):
>    """Handle an error from do_command."""
>    if isinstance(err, CommandError):
>     return self.send_error(e.message, disconnect = e.disconnect)
>    else:
>     self.log(e, level = 'exception')
>     self.send_error('Sorry, but a problem with the server means your
> command was not executed. The staff have been notified.')
>
>   def lineReceived(self, line):
>    """Parse an incoming command."""
>    global lines
>    lines += 1 # Increment the line count.
>    data = line.decode(settings.ENCODING)
>    try:
>     command, kwargs = json.loads(data)
>     if not isinstance(command, string_types) or not isinstance(kwargs,
> dict):
>      raise TypeError('Expecting [str, dict]. Got [%s, %s] instead.' %
> (type(command), type(kwargs)))
>    except (TypeError, ValueError) as e:
>     self.log('Invalid command string: %s', data, level = 'error')
>     self.log(e, level = 'exception')
>     return self.send_error('Invalid command.', disconnect = True)
>    cmd = commands.commands.get(command, None)
>    if cmd  is None:
>     self.log('Unrecognised command: %s.', command, level = 'warning')
>    elif self.connection.player or not cmd.login_required:
>     d = defer.Deferred()
>     print('Adding callback.')
>     d.addCallback(self.do_command, **kwargs)
>     print('Adding errback.')
>     d.addErrback(self.handle_error)
>     print('Calling callback.')
>     d.callback(cmd)
>     print('Called.') # Never gets this far.
>     return d
>    else:
>     return self.send_error('Not authenticated.', disconnect = True)
>
> Here's the traceback I get when the callback gets called:
>
> Unhandled Error
> Traceback (most recent call last):
>    File "server/functions.py", line 88, in server_start
>      reactor.run()
>    File
>
> "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/base.py",
> line 1194, in run
>      self.mainLoop()
>    File
>
> "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/base.py",
> line 1206, in mainLoop
>      self.doIteration(t)
>    File
>
> "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/epollreactor.py",
> line 396, in doPoll
>      log.callWithLogger(selectable, _drdw, selectable, fd, event)
> --- <exception caught here> ---
>    File
>
> "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/log.py",
> line 101, in callWithLogger
>      return callWithContext({"system": lp}, func, *args, **kw)
>    File
>
> "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/log.py",
> line 84, in callWithContext
>      return context.call({ILogContext: newCtx}, func, *args, **kw)
>    File
>
> "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/context.py",
> line 118, in callWithContext
>      return self.currentContext().callWithContext(ctx, func, *args, **kw)
>    File
>
> "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/context.py",
> line 81, in callWithContext
>      return func(*args,**kw)
>    File
>
> "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/posixbase.py",
> line 610, in _doReadOrWrite
>      self._disconnectSelectable(selectable, why, inRead)
>    File
>
> "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/posixbase.py",
> line 258, in _disconnectSelectable
>      selectable.connectionLost(failure.Failure(why))
>    File
>
> "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/failure.py",
> line 232, in __init__
>      tb = self.value.__traceback__
> builtins.AttributeError: 'Deferred' object has no attribute '__traceback__'
>
> Anyone have any ideas?
>
> Cheers,
>
> Chris
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160402/8e939840/attachment.html>

From chris.norman2 at googlemail.com  Sat Apr  2 08:22:33 2016
From: chris.norman2 at googlemail.com (Chris Norman)
Date: Sat, 2 Apr 2016 15:22:33 +0100
Subject: [Twisted-Python] Problem with Deferreds
In-Reply-To: <CAKF=+dhozabFY7ZbtM+KK2t=L+AGJz9jDk3y-BR=wQ8yQiPq6A@mail.gmail.com>
References: <56FF9245.2080208@googlemail.com>
 <CAKF=+dhozabFY7ZbtM+KK2t=L+AGJz9jDk3y-BR=wQ8yQiPq6A@mail.gmail.com>
Message-ID: <56FFD5A9.4030502@googlemail.com>

Hi,
Yes, that sorted the problem out no worries.

Thank you so much.



On 02/04/2016 15:00, Kevin Conway wrote:
> Hi Chris,
>
> tl;dr: Returning a value from 'dataReceived', or any of its extensions 
> such as 'lineReceived' in the 'LineReceiver' Protocol subclass, 
> triggers a disconnect and uses the returned value as the 'reason'. A 
> 'reason' must be an Exception or t.p.Failure object as other values 
> will trigger this error.
>
> Are you quite certain that your last line is not getting printed? I'm 
> not sure exactly where this feature is documented, but returning any 
> non-None value from a Protocol's 'dataReceived' method can result in 
> this behaviour. The t.protocols.basic.LineReceiver calls 
> 'lineReceived' from 'dataReceived' and returns any value it gets from 
> your implementation. The value returned from 'dataReceived' is passed 
> along to the transport's 'doRead' which, again, returns it to the 
> portion of the reactor handling selectables. The reactor assumes that 
> anything returned from a transport during a read or write operation is 
> a bad thing and disconnects the transport. During the disconnect 
> process the reactor is generating a t.p.failure.Failure object and 
> passing in your returned value as the 'why' which is expected to be an 
> Exception or Failure and not a Deferred. Try returning None instead of 
> your Deferred. That should resolve this particular issue.
>
> On Sat, Apr 2, 2016 at 4:39 AM Chris Norman 
> <chris.norman2 at googlemail.com <mailto:chris.norman2 at googlemail.com>> 
> wrote:
>
>     Hi all,
>     I recently got over myself and forced myself to read about Deferreds
>     rather than using threading opperations.
>
>     I've used them successfully in a couple of places, but this one has me
>     flummoxed:
>
>     Here's the code for the Deferred and it's sub-commands:
>
>       def do_command(self, cmd, **kwargs):
>        """Process a command in true Deferred style."""
>        if cmd.permissions(self.connection):
>         cmd(self.connection, **kwargs)
>        else:
>         logger.warning('Blocked from running command %s which is secured
>     with %s.', cmd.__name__, cmd.permissions.__name__)
>         raise CommandError('You have insufficient privileges to
>     perform this
>     action. The staff have been notified.')
>
>       def handle_error(self, err):
>        """Handle an error from do_command."""
>        if isinstance(err, CommandError):
>         return self.send_error(e.message, disconnect = e.disconnect)
>        else:
>         self.log(e, level = 'exception')
>         self.send_error('Sorry, but a problem with the server means your
>     command was not executed. The staff have been notified.')
>
>       def lineReceived(self, line):
>        """Parse an incoming command."""
>        global lines
>        lines += 1 # Increment the line count.
>        data = line.decode(settings.ENCODING)
>        try:
>         command, kwargs = json.loads(data)
>         if not isinstance(command, string_types) or not isinstance(kwargs,
>     dict):
>          raise TypeError('Expecting [str, dict]. Got [%s, %s] instead.' %
>     (type(command), type(kwargs)))
>        except (TypeError, ValueError) as e:
>         self.log('Invalid command string: %s', data, level = 'error')
>         self.log(e, level = 'exception')
>         return self.send_error('Invalid command.', disconnect = True)
>        cmd = commands.commands.get(command, None)
>        if cmd  is None:
>         self.log('Unrecognised command: %s.', command, level = 'warning')
>        elif self.connection.player or not cmd.login_required:
>         d = defer.Deferred()
>         print('Adding callback.')
>         d.addCallback(self.do_command, **kwargs)
>         print('Adding errback.')
>         d.addErrback(self.handle_error)
>         print('Calling callback.')
>         d.callback(cmd)
>         print('Called.') # Never gets this far.
>         return d
>        else:
>         return self.send_error('Not authenticated.', disconnect = True)
>
>     Here's the traceback I get when the callback gets called:
>
>     Unhandled Error
>     Traceback (most recent call last):
>        File "server/functions.py", line 88, in server_start
>          reactor.run()
>        File
>     "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/base.py",
>     line 1194, in run
>          self.mainLoop()
>        File
>     "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/base.py",
>     line 1206, in mainLoop
>          self.doIteration(t)
>        File
>     "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/epollreactor.py",
>     line 396, in doPoll
>          log.callWithLogger(selectable, _drdw, selectable, fd, event)
>     --- <exception caught here> ---
>        File
>     "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/log.py",
>     line 101, in callWithLogger
>          return callWithContext({"system": lp}, func, *args, **kw)
>        File
>     "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/log.py",
>     line 84, in callWithContext
>          return context.call({ILogContext: newCtx}, func, *args, **kw)
>        File
>     "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/context.py",
>     line 118, in callWithContext
>          return self.currentContext().callWithContext(ctx, func,
>     *args, **kw)
>        File
>     "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/context.py",
>     line 81, in callWithContext
>          return func(*args,**kw)
>        File
>     "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/posixbase.py",
>     line 610, in _doReadOrWrite
>          self._disconnectSelectable(selectable, why, inRead)
>        File
>     "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/posixbase.py",
>     line 258, in _disconnectSelectable
>          selectable.connectionLost(failure.Failure(why))
>        File
>     "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/failure.py",
>     line 232, in __init__
>          tb = self.value.__traceback__
>     builtins.AttributeError: 'Deferred' object has no attribute
>     '__traceback__'
>
>     Anyone have any ideas?
>
>     Cheers,
>
>     Chris
>
>     _______________________________________________
>     Twisted-Python mailing list
>     Twisted-Python at twistedmatrix.com
>     <mailto:Twisted-Python at twistedmatrix.com>
>     http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160402/a95eff4d/attachment-0001.html>

From johnaherne at rocs.co.uk  Sun Apr  3 07:29:18 2016
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sun, 3 Apr 2016 14:29:18 +0100
Subject: [Twisted-Python] SSL wincertstore Ticket 6371
Message-ID: <CAKmUHjYO8J8n8MBrQCGwP6=hudFsg+7yTmh2qMWTBo4XtkYV3g@mail.gmail.com>

I have picked up on this again.

There would appear to be a failing test in test_agent.py.

I have added a new test to check that certificateOptions.trustRoot is an
instance of  OpensSSLWindowsCertificateAuthorities if wincertstore is
available

And I have modified the existing test
 test_setsTrustRootOnContextDefaultTrustRoot to be skipped if wincertstore
is available.

I have run some simple tests using Agent against googlemaps to confirm the
host verification works and fails and a similar test with treq. So looks
good.

But before I send up the patch I need to be happy that trial twisted
completes with out error. And I keep getting an error on one test but I
can't work out what the problem is. Hopefully someone can fathom it from
the traceback and point me in the right direction.

Thanks

[ERROR]
Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
DelayedCalls: (set twisted.internet.base.DelayedCall.debug = True to debug)
<DelayedCall 0x42e4f30 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('d.root-servers.net', <Deferred at 0x42e4a80>)>
<DelayedCall 0x42e4328 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('e.root-servers.net', <Deferred at 0x42e4b48>)>
<DelayedCall 0x42e4d28 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('f.root-servers.net', <Deferred at 0x42e4fa8>)>
<DelayedCall 0x42e4ad0 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('h.root-servers.net', <Deferred at 0x42e4a58>)>
<DelayedCall 0x4299aa8 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('l.root-servers.net', <Deferred at 0x42ce3a0>)>
<DelayedCall 0x42e4cb0 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('a.root-servers.net', <Deferred at 0x42e40d0>)>
<DelayedCall 0x42e4d50 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('b.root-servers.net', <Deferred at 0x42e4ee0>)>
<DelayedCall 0x42e45d0 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('c.root-servers.net', <Deferred at 0x42e4af8>)>
<DelayedCall 0x42e4670 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('g.root-servers.net', <Deferred at 0x42e4468>)>
<DelayedCall 0x42e4968 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('i.root-servers.net', <Deferred at 0x42e4e68>)>
<DelayedCall 0x42e4558 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('j.root-servers.net', <Deferred at 0x42e4fd0>)>
<DelayedCall 0x42cee68 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('k.root-servers.net', <Deferred at 0x42e4b70>)>
<DelayedCall 0x4355f08 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('m.root-servers.net', <Deferred at 0x4355e68>)>

twisted.names.test.test_tap.OptionsTests.test_recursiveConfiguration
-------------------------------------------------------------------------------
Ran 11184 tests in 84.952s

FAILED (skips=2946, errors=1, successes=8237)




-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160403/56e21fe3/attachment.html>

From johnaherne at rocs.co.uk  Sun Apr  3 07:35:41 2016
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sun, 3 Apr 2016 14:35:41 +0100
Subject: [Twisted-Python] web.client.readBody
Message-ID: <CAKmUHjZoO1kso3FnSRO1hAdv4iY0LGkUDN5O5PvDN5uMPzjwjA@mail.gmail.com>

I have been using deliverBody to process in responses but decided that
readBody might be a better fit.

So far it works with http, but as soon as I switch to https it fails.

I get a response http code 200 OK but no data.

I've puzzled over this but can't see what the problem is.

Has anyone else seen this problem and found out what the solution is.

Thanks



Response received <twisted.web._newclient.Response object at 0x0362EB50>
Response version: ('HTTP', 1, 1)
Response code: 200
Response phrase: OK
Response headers: Headers({'alternate-protocol': ['443:quic'],
'x-xss-protection': ['1; mode=block'], 'accept-ranges': ['none'],
'expires': ['Mon, 04 Apr 2016 13:32:31 GMT'], 'vary':
['Accept-Language,Accept-Encoding'], 'server': ['mafe'], 'cache-control':
['public, max-age=86400'], 'date': ['Sun, 03 Apr 2016 13:32:31 GMT'],
'x-frame-options': ['SAMEORIGIN'], 'alt-svc': ['quic=":443"; ma=2592000;
v="32,31,30,29,28,27,26,25"'], 'content-type': ['application/json;
charset=UTF-8']})
LENGTH twisted.web.iweb.UNKNOWN_LENGTH
[('Alternate-Protocol', ['443:quic']),
 ('X-XSS-Protection', ['1; mode=block']),
 ('Accept-Ranges', ['none']),
 ('Expires', ['Mon, 04 Apr 2016 13:32:31 GMT']),
 ('Vary', ['Accept-Language,Accept-Encoding']),
 ('Server', ['mafe']),
 ('Cache-Control', ['public, max-age=86400']),
 ('Date', ['Sun, 03 Apr 2016 13:32:31 GMT']),
 ('X-Frame-Options', ['SAMEORIGIN']),
 ('Alt-Svc', ['quic=":443"; ma=2592000; v="32,31,30,29,28,27,26,25"']),
 ('Content-Type', ['application/json; charset=UTF-8'])]
Got Error
error res [Failure instance: Traceback (failure with no frames): <class
'twisted.web.client.PartialDownloadError'>: 200 OK
]
SHUTDOWN


-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160403/0c9ad3a9/attachment.html>

From johnaherne at rocs.co.uk  Sun Apr  3 07:45:34 2016
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sun, 3 Apr 2016 14:45:34 +0100
Subject: [Twisted-Python] Running trial on windows
Message-ID: <CAKmUHjYtuiwzptFT5nhdmKhbVBxVuS9fyjiqQNpicmJiUor=sQ@mail.gmail.com>

When I run trial in a virtualenv it seems to miss some imports and skips
some tests.

It would seem to be mainly wincertstore that it can't import.

To make it work I have to include wincertstore in my main python setup and
then it starts to test the wincertstore tests.

Anyone else seen this happening.

This is Windows 10 and python2.7.11 32 bit, virtualenvwrapper-win 1.2.1

Thanks


-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160403/bf599590/attachment.html>

From johnaherne at rocs.co.uk  Sun Apr  3 08:06:19 2016
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sun, 3 Apr 2016 15:06:19 +0100
Subject: [Twisted-Python] web.client.readbody
Message-ID: <CAKmUHjanm6b56BPfjiS+o_78aUnA7qKTpiH_NWLuK3vr4meDrg@mail.gmail.com>

I was obviously half-asleep when I posted the previous email.

Doing more tests, it would seem that only googlemaps is giving me this
problem.


-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160403/9c5fe7e5/attachment.html>

From glyph at twistedmatrix.com  Mon Apr  4 01:45:10 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 4 Apr 2016 00:45:10 -0700
Subject: [Twisted-Python] web.client.readbody
In-Reply-To: <CAKmUHjanm6b56BPfjiS+o_78aUnA7qKTpiH_NWLuK3vr4meDrg@mail.gmail.com>
References: <CAKmUHjanm6b56BPfjiS+o_78aUnA7qKTpiH_NWLuK3vr4meDrg@mail.gmail.com>
Message-ID: <536DBA59-8932-4C63-A46E-D79DF71D6516@twistedmatrix.com>

> On Apr 3, 2016, at 7:06 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> I was obviously half-asleep when I posted the previous email.
> 
> Doing more tests, it would seem that only googlemaps is giving me this problem.
> 

Is the request in question one you expect no data from?
-g



From glyph at twistedmatrix.com  Mon Apr  4 01:47:09 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 4 Apr 2016 00:47:09 -0700
Subject: [Twisted-Python] Running trial on windows
In-Reply-To: <CAKmUHjYtuiwzptFT5nhdmKhbVBxVuS9fyjiqQNpicmJiUor=sQ@mail.gmail.com>
References: <CAKmUHjYtuiwzptFT5nhdmKhbVBxVuS9fyjiqQNpicmJiUor=sQ@mail.gmail.com>
Message-ID: <CDF46B76-02E1-4DFA-A467-618DF07361BE@twistedmatrix.com>


> On Apr 3, 2016, at 6:45 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> When I run trial in a virtualenv it seems to miss some imports and skips some tests.
> 
> It would seem to be mainly wincertstore that it can't import.
> 
> To make it work I have to include wincertstore in my main python setup and then it starts to test the wincertstore tests.
> 
> Anyone else seen this happening.
> 
> This is Windows 10 and python2.7.11 32 bit, virtualenvwrapper-win 1.2.1
> 

How exactly are you running `trial? ?  I believe that, since we don't use console-scripts entry points, we don't get .exe files generated on Windows, and so the wrong thing may be happening when you type 'trial'.

IIRC the way to ask cmd.exe this is 'where trial'.

-glyph

From glyph at twistedmatrix.com  Mon Apr  4 01:49:58 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 4 Apr 2016 00:49:58 -0700
Subject: [Twisted-Python] SSL wincertstore Ticket 6371
In-Reply-To: <CAKmUHjYO8J8n8MBrQCGwP6=hudFsg+7yTmh2qMWTBo4XtkYV3g@mail.gmail.com>
References: <CAKmUHjYO8J8n8MBrQCGwP6=hudFsg+7yTmh2qMWTBo4XtkYV3g@mail.gmail.com>
Message-ID: <B23F745E-9B89-4356-8DBA-91FBFB20C9E2@twistedmatrix.com>


> On Apr 3, 2016, at 6:29 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> I have picked up on this again.
> 
> There would appear to be a failing test in test_agent.py.

You said 'test_agent' but the error below is coming from test_tap; which are you referring to?

> I have added a new test to check that certificateOptions.trustRoot is an instance of  OpensSSLWindowsCertificateAuthorities if wincertstore is available
> 
> And I have modified the existing test  test_setsTrustRootOnContextDefaultTrustRoot to be skipped if wincertstore is available.
> 
> I have run some simple tests using Agent against googlemaps to confirm the host verification works and fails and a similar test with treq. So looks good.
> 
> But before I send up the patch I need to be happy that trial twisted completes with out error. And I keep getting an error on one test but I can't work out what the problem is. Hopefully someone can fathom it from the traceback and point me in the right direction.
> 
> Thanks
> 
> [ERROR]
> Traceback (most recent call last):
> Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
> DelayedCalls: (set twisted.internet.base.DelayedCall.debug = True to debug)
> <DelayedCall 0x42e4f30 [60.0s] called=0 cancelled=0 ThreadedResolver._cleanup('d.root-servers.net <http://d.root-servers.net/>', <Deferred at 0x42e4a80>)>
> <DelayedCall 0x42e4328 [60.0s] called=0 cancelled=0 ThreadedResolver._cleanup('e.root-servers.net <http://e.root-servers.net/>', <Deferred at 0x42e4b48>)>
> <DelayedCall 0x42e4d28 [60.0s] called=0 cancelled=0 ThreadedResolver._cleanup('f.root-servers.net <http://f.root-servers.net/>', <Deferred at 0x42e4fa8>)>
> <DelayedCall 0x42e4ad0 [60.0s] called=0 cancelled=0 ThreadedResolver._cleanup('h.root-servers.net <http://h.root-servers.net/>', <Deferred at 0x42e4a58>)>
> <DelayedCall 0x4299aa8 [60.0s] called=0 cancelled=0 ThreadedResolver._cleanup('l.root-servers.net <http://l.root-servers.net/>', <Deferred at 0x42ce3a0>)>
> <DelayedCall 0x42e4cb0 [60.0s] called=0 cancelled=0 ThreadedResolver._cleanup('a.root-servers.net <http://a.root-servers.net/>', <Deferred at 0x42e40d0>)>
> <DelayedCall 0x42e4d50 [60.0s] called=0 cancelled=0 ThreadedResolver._cleanup('b.root-servers.net <http://b.root-servers.net/>', <Deferred at 0x42e4ee0>)>
> <DelayedCall 0x42e45d0 [60.0s] called=0 cancelled=0 ThreadedResolver._cleanup('c.root-servers.net <http://c.root-servers.net/>', <Deferred at 0x42e4af8>)>
> <DelayedCall 0x42e4670 [60.0s] called=0 cancelled=0 ThreadedResolver._cleanup('g.root-servers.net <http://g.root-servers.net/>', <Deferred at 0x42e4468>)>
> <DelayedCall 0x42e4968 [60.0s] called=0 cancelled=0 ThreadedResolver._cleanup('i.root-servers.net <http://i.root-servers.net/>', <Deferred at 0x42e4e68>)>
> <DelayedCall 0x42e4558 [60.0s] called=0 cancelled=0 ThreadedResolver._cleanup('j.root-servers.net <http://j.root-servers.net/>', <Deferred at 0x42e4fd0>)>
> <DelayedCall 0x42cee68 [60.0s] called=0 cancelled=0 ThreadedResolver._cleanup('k.root-servers.net <http://k.root-servers.net/>', <Deferred at 0x42e4b70>)>
> <DelayedCall 0x4355f08 [60.0s] called=0 cancelled=0 ThreadedResolver._cleanup('m.root-servers.net <http://m.root-servers.net/>', <Deferred at 0x4355e68>)>
> 
> twisted.names.test.test_tap.OptionsTests.test_recursiveConfiguration
> -------------------------------------------------------------------------------
> Ran 11184 tests in 84.952s
> 
> FAILED (skips=2946, errors=1, successes=8237)
> 

I am not sure what the issue is here, but does this test pass or fail for you on a clean trunk at HEAD without your changes?

It might be best to just submit your patch for review, even if it's failing, and the reviewer might be able to shed some light.  They'll also be able to run the tests on our build farm, which might shed some light on whether the problem is related to your patch or just related to your system.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160404/110f8927/attachment.html>

From cory at lukasa.co.uk  Mon Apr  4 02:03:24 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Mon, 4 Apr 2016 09:03:24 +0100
Subject: [Twisted-Python] web.client.readBody
In-Reply-To: <CAKmUHjZoO1kso3FnSRO1hAdv4iY0LGkUDN5O5PvDN5uMPzjwjA@mail.gmail.com>
References: <CAKmUHjZoO1kso3FnSRO1hAdv4iY0LGkUDN5O5PvDN5uMPzjwjA@mail.gmail.com>
Message-ID: <71304C75-EB29-48B6-9F16-5BC1B0F13BC6@lukasa.co.uk>


> On 3 Apr 2016, at 14:35, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> I have been using deliverBody to process in responses but decided that readBody might be a better fit.
> 
> So far it works with http, but as soon as I switch to https it fails.
> 
> I get a response http code 200 OK but no data.
> 
> I've puzzled over this but can't see what the problem is.
> 
> Has anyone else seen this problem and found out what the solution is.
> 
> Thanks

The problem is an interaction in readBody. Your logs actually contain the key clue:

> LENGTH twisted.web.iweb.UNKNOWN_LENGTH

This indicates that the remote server (which, while your logs don?t outright say it, is clearly a Google server) is doing something particularly stupid: that is, they?re sending a response that is neither chunked nor content-length-delimited. This means that message completion can only be signalled by the closing of the connection once the response is complete.

Twisted, correctly, gets a bit nervous about this: it?s very difficult to tell the actual completion of the response from any number of error conditions where the connection gets abruptly torn down. For this reason, the docstring of IResponse.deliverBody says that in a case like this: "The protocol's connectionLost method will be called with: PotentialDataLoss, which indicates that it cannot be determined if the entire response body has been delivered.?

When readBody?s protocol connectionLost method is called with PotentialDataLoss, it calls the errback with PartialDownloadError, which is what you?re seeing. The body of the response is available on the PartialDownloadError as PartialDownloadError.response, so if you?re interested in continuing to use readBody you?ll probably want to register an errback on the deferred that checks for this error and handles it appropriately: in your case, probably by converting the error to a safe response and then calling the callback!

In this instance, I?d *also* recommend that you reach out to whatever Google service is sending this response. RFC 7230 says that a server SHOULD send a Content-Length header if not sending a Transfer-Encoding: chunked header, and points out that not doing so exists primarily for backward compatibility with HTTP/1.0.

I hope that all helps!

Cory

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160404/79109fd3/attachment.pgp>

From johnaherne at rocs.co.uk  Mon Apr  4 02:31:50 2016
From: johnaherne at rocs.co.uk (John Aherne)
Date: Mon, 4 Apr 2016 09:31:50 +0100
Subject: [Twisted-Python] web.client.readbody
Message-ID: <CAKmUHjYd5CPdkvoM9QXhQBWcDroCQTJ+79mrnbmmxSio8LtFcQ@mail.gmail.com>

To Glyph

This works fine if I use response.deliverBody

I get a json response back.

I'll look at what Cory says and see where I get.

Thanks

John

-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160404/7a92410a/attachment-0001.html>

From johnaherne at rocs.co.uk  Mon Apr  4 02:32:33 2016
From: johnaherne at rocs.co.uk (John Aherne)
Date: Mon, 4 Apr 2016 09:32:33 +0100
Subject: [Twisted-Python] web.client.readBody
Message-ID: <CAKmUHjbLJWHP7dNgO_QyV=zsjfwxDi5k+9-ZaUP0KZPLWya6Xw@mail.gmail.com>

Cory

Thanks for the detailed reply.

I'll see what I can make of it.

I must admit I don't see Google paying much attention to this.

It does work if I use response.deliverBody, but I thought getting the
complete response in one hit would be better.

John

-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160404/92f51ad7/attachment.html>

From johnaherne at rocs.co.uk  Mon Apr  4 02:39:56 2016
From: johnaherne at rocs.co.uk (John Aherne)
Date: Mon, 4 Apr 2016 09:39:56 +0100
Subject: [Twisted-Python] running trial on windows
Message-ID: <CAKmUHjYEpMDR-M1dSsMVTwLEYQBvz3vMDTESYKAXui6KwL_Daw@mail.gmail.com>

I have to specify a really long path to pick up the copy of trial.py for
the virtualenv I am working in.

I specify the virtualenv python I want to run with and then the path to
trial.py then the test I want to run.

It would appear to be only the wincertstore module that is missed.

Perhaps I'll send a report off to virtualenvwrapper about this after some
more messing around.



*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160404/59e79fb3/attachment.html>

From johnaherne at rocs.co.uk  Mon Apr  4 03:32:31 2016
From: johnaherne at rocs.co.uk (John Aherne)
Date: Mon, 4 Apr 2016 10:32:31 +0100
Subject: [Twisted-Python] SSl wincertstore Ticket 6371
Message-ID: <CAKmUHjZNzjox3Ze6zS3=HfQD1hh0DOwZ+3mO9LV6pE53o=-USQ@mail.gmail.com>

The failure is in test_agent

 test_setsTrustRootOnContextDefaultTrustRoot

This fails if wincertstore is available with this failure:-

twisted.trial.unittest.FailTest:
<twisted.internet._sslverify.OpenSSLWindowsCertificateAuthorities object at
0x037DB2B0> is not an instance of <class
'twisted.internet._sslverify.OpenSSLDefaultPaths'>


This is because the patch from aaron which I have applied
has_sslverify.platformTrust check for wincertstore and does not return
OpenSSLDefaultPaths but returns
_sslverify.OpenSSLWindowsCertificateAuthorities

The solution I followed was to  add a test to specifically check for a
return of OpenSSLWindowscertificateAuthorities if wincertstore was
available otherwise to skip it.

The other part was to skip the test for
test_setsTrustRootOnContextDefaultTrustRoot
if wincertstore was available

The error message comes from the tests for the root name servers.

I just need to fix that so I have a clean test run before making any
changes.

I just can't see what the problem is with the error

Thanks




-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160404/f7b05368/attachment.html>

From johnaherne at rocs.co.uk  Mon Apr  4 03:56:02 2016
From: johnaherne at rocs.co.uk (John Aherne)
Date: Mon, 4 Apr 2016 10:56:02 +0100
Subject: [Twisted-Python] SSl wincertstore Ticket 6371
Message-ID: <CAKmUHjaH-R7rNsh+AcgeSVVUmf=VXLemYuQkUH8x+doytroz9g@mail.gmail.com>

I have done a clean download of twisted and run the tests without any
changes.

I still get the same error on:--

twisted.names.test.test_tap.OptionsTests.test_recursiveConfiguration

[ERROR]
Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
DelayedCalls: (set twisted.internet.base.DelayedCall.debug = True to debug)
<DelayedCall 0x4507698 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('d.root-servers.net', <Deferred at 0x4507c88>)>
<DelayedCall 0x450cd28 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('l.root-servers.net', <Deferred at 0x450ce68>)>
<DelayedCall 0x873e878 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('e.root-servers.net', <Deferred at 0x873e058>)>
<DelayedCall 0x873e580 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('f.root-servers.net', <Deferred at 0x873e6e8>)>
<DelayedCall 0x43d8350 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('h.root-servers.net', <Deferred at 0x43d86e8>)>
<DelayedCall 0x450cf08 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('m.root-servers.net', <Deferred at 0x450cd78>)>
<DelayedCall 0x4507d28 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('a.root-servers.net', <Deferred at 0x4507cb0>)>
<DelayedCall 0x4507620 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('b.root-servers.net', <Deferred at 0x4507328>)>
<DelayedCall 0x45074e0 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('c.root-servers.net', <Deferred at 0x45072b0>)>
<DelayedCall 0x43d8c10 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('g.root-servers.net', <Deferred at 0x873e8f0>)>
<DelayedCall 0x43d82b0 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('i.root-servers.net', <Deferred at 0x43d8800>)>
<DelayedCall 0x43d8558 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('j.root-servers.net', <Deferred at 0x43d8508>)>
<DelayedCall 0x43d0378 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('k.root-servers.net', <Deferred at 0x43d83c8>)>

twisted.names.test.test_tap.OptionsTests.test_recursiveConfiguration
-------------------------------------------------------------------------------
Ran 11183 tests in 109.669s

FAILED (skips=2945, errors=1, successes=8237)


-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160404/b32f0ae9/attachment.html>

From cory at lukasa.co.uk  Mon Apr  4 04:05:24 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Mon, 4 Apr 2016 11:05:24 +0100
Subject: [Twisted-Python] web.client.readBody
In-Reply-To: <CAKmUHjbLJWHP7dNgO_QyV=zsjfwxDi5k+9-ZaUP0KZPLWya6Xw@mail.gmail.com>
References: <CAKmUHjbLJWHP7dNgO_QyV=zsjfwxDi5k+9-ZaUP0KZPLWya6Xw@mail.gmail.com>
Message-ID: <1DF498CF-07B6-4DAF-B7FC-9CA611AA451E@lukasa.co.uk>


> On 4 Apr 2016, at 09:32, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> Cory
> 
> Thanks for the detailed reply.
> 
> I'll see what I can make of it.
> 
> I must admit I don't see Google paying much attention to this.
> 
> It does work if I use response.deliverBody, but I thought getting the complete response in one hit would be better.
> 
> John

Yeah, so the difference is that with response.deliverBody you?re not checking the code in connectionLost. If you were, you?d be seeing PotentialDataLoss as well. ;)

There?s nothing wrong with using readBody, you just need to adjust your errback/callback chain to transform the response appropriately in this case.

And yeah, I doubt Google will listen. =P

Cory

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160404/98bd5867/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160404/98bd5867/attachment-0001.pgp>

From hawkowl at atleastfornow.net  Mon Apr  4 11:10:23 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Tue, 5 Apr 2016 01:10:23 +0800
Subject: [Twisted-Python] Twisted 16.1 Release Announcement
Message-ID: <367BC573-64FD-4694-ADA1-C78B5D45E257@atleastfornow.net>

On behalf of Twisted Matrix Laboratories, I am honoured to announce the release of Twisted 16.1!

This release is hot off the heels of 16.0 released last month, including some nice little tidbits. The highlights include:

- twisted.application.internet.ClientService, a service that maintains a persistent outgoing endpoint-based connection -- a replacement for ReconnectingClientFactory that uses modern APIs;
- A large (77% on one benchmark) performance improvement when using twisted.web's client on PyPy;
- A few conch modules have been ported to Python 3, in preparation for further porting of the SSH functionality;
- Full support for OpenSSL 1.0.2f and above;
- t.web.http.Request.addCookie now accepts Unicode and bytes keys/values;
- `twistd manhole` no longer uses a hard-coded SSH host key, and will generate one for you on the fly (this adds a 'appdirs' PyPI dependency, installing with [conch] will add it automatically);
- Over eighteen tickets overall closed since 16.0.

For more information, check the NEWS file (link provided below).

You can find the downloads at <https://pypi.python.org/pypi/Twisted> (or alternatively <http://twistedmatrix.com/trac/wiki/Downloads>). The NEWS file is also available at <https://github.com/twisted/twisted/blob/twisted-16.1.0/NEWS>.

Many thanks to everyone who had a part in this release - the supporters of the Twisted Software Foundation, the developers who contributed code as well as documentation, and all the people building great things with Twisted!

Twisted Regards,
Amber Brown (HawkOwl)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160405/1ac6b898/attachment.pgp>

From glyph at twistedmatrix.com  Mon Apr  4 11:24:02 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 4 Apr 2016 10:24:02 -0700
Subject: [Twisted-Python] running trial on windows
In-Reply-To: <CAKmUHjYEpMDR-M1dSsMVTwLEYQBvz3vMDTESYKAXui6KwL_Daw@mail.gmail.com>
References: <CAKmUHjYEpMDR-M1dSsMVTwLEYQBvz3vMDTESYKAXui6KwL_Daw@mail.gmail.com>
Message-ID: <4A4ACEED-C659-406D-81A9-7728725D52F2@twistedmatrix.com>


> On Apr 4, 2016, at 1:39 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> I have to specify a really long path to pick up the copy of trial.py for the virtualenv I am working in.
> 
> I specify the virtualenv python I want to run with and then the path to trial.py then the test I want to run.
> 
> It would appear to be only the wincertstore module that is missed.
> 
> Perhaps I'll send a report off to virtualenvwrapper about this after some more messing around.
> 

How'd you install the wincertstore module?

Does running \path\to\venv\python.exe -c 'import wincertstore' work?

-g



From glyph at twistedmatrix.com  Mon Apr  4 11:24:33 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 4 Apr 2016 10:24:33 -0700
Subject: [Twisted-Python] SSl wincertstore Ticket 6371
In-Reply-To: <CAKmUHjaH-R7rNsh+AcgeSVVUmf=VXLemYuQkUH8x+doytroz9g@mail.gmail.com>
References: <CAKmUHjaH-R7rNsh+AcgeSVVUmf=VXLemYuQkUH8x+doytroz9g@mail.gmail.com>
Message-ID: <D84DFE92-0A1F-42B8-A992-1BF55730EC63@twistedmatrix.com>


> On Apr 4, 2016, at 2:56 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> I have done a clean download of twisted and run the tests without any changes.

OK.  This is a bug we should investigate, but I think we can safely say it's a separate bug and not one which will cause your patch to fail review.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160404/1e263fe2/attachment.html>

From ex.vitorino at gmail.com  Tue Apr  5 15:11:19 2016
From: ex.vitorino at gmail.com (exvito here)
Date: Tue, 5 Apr 2016 22:11:19 +0100
Subject: [Twisted-Python] Windows spawnProcess - Child process inherits
 files and sockets (POSIX does not)
In-Reply-To: <DE300510-5DB5-446D-8DF8-F1404FC69B32@twistedmatrix.com>
References: <CADtv4OC=7N9w4MLY62AkqC2K0wKjjM0dezM86URFGwBba5cDcg@mail.gmail.com>
 <DE300510-5DB5-446D-8DF8-F1404FC69B32@twistedmatrix.com>
Message-ID: <CADtv4OA4eSA73VGtsVVMQNHWW9+h3-mgwVQw5bY=oxWCpmooEQ@mail.gmail.com>

On Thu, Mar 31, 2016 at 10:27 PM, Glyph <glyph at twistedmatrix.com> wrote:

> Before submitting a patch for review, I'm looking for preliminary
> feedback, assuming you agree that the Windows vs POSIX semantics should be
> the same (if not, why?).
>
>
> After much thought: Yes.  They should be the same.  The reason they're not
> is largely ignorance of the relevant APIs and abstractions on Windows, not
> any desire that they differ.  The one place they have to differ a little
> bit is handle inheritance: we need to figure out some way to express the
> 'childFDs' mapping in terms of both file descriptors and handles.
>

Agreed. My code does not go into 'childFDs' mapping territory, though. All
it does is prevent all file- and socket-handles from being inherited by the
child process -- other than the pipes used for STDIO communication.

My patch calls a few Windows APIs via ctypes, however, as far as I can
> tell, Twisted on Windows requires pywin32 and, recently, there has been
> some discussion around dropping that dependency and moving towards
> something based on cffi.
>
>
> ctypes is dangerous and error-prone.  If you screw up the bit-width of a
> type, or the type in a header changes on some future version, ctypes gives
> you no way of finding out until some poor user's process segfaults, and
> usually not at the relevant call site.  So we'd prefer not to maintain more
> ctypes-using code.
>
> The APIs in pywin32 very closely mirror the underlying Windows API, so for
> addressing this issue, please just go ahead and use pywin32 APIs; porting
> them to a new API along with everything else should be relatively
> straightforward.
>

> If we do move forward with that change, we will probably use
> https://pypi.python.org/pypi/pywincffi and not move anything within
> Twisted.
>

Agreed with your ctypes comment -- I've been hit by such faults which
"magically" went away using cffi when coding against Windows TAPI.

pywin32, unfortunatelly, does not include two Windows APIs (out of four) my
code requires -- I just grepped the source for latest release I could find
on SourceForge, 220.

For completeness, the missing APIs are NtQuerySystemInformation [1] and
NtQueryObject [2].
The others are GetHandleInformation [3] and SetHandleInformation [4].

What would you say the way forward is? Should I submit the patch for review
> anyway? Is there any other work that needs to be done first that I may
> contribute to?
>
>
> Yes, just go ahead and write the patch.
>

Given that pywin32 does not provide two of the required APIs, maybe this
issue is somewhat blocked.

Adding to that is the fact that one particular API call in my code --
NtQuerySystemInformation [1] -- is being used with what seems to be an
undocumented option -- SystemHandleInformation (enum = 16) -- and
returning, again, an apparently undocumented data structure --
SYSTEM_HANDLE_INFORMATION. I downloaded and installed the available SDKs
and WDKs (driver dev kits) from Microsoft and could not find any reference
to those particular options or data structures.

My code was created after much investigation on how to obtain the list of
open handles for the current process.
The gist of it is:
- Call NtQuerySystemInformation with the SystemInformationClass arg set
to SystemHandleInformation.
- This returns all (!!!) of the handles in the system (no need for special
privileges).
- Filter those out by the current process PID and type, such that only
files and sockets are left.
- Use the GetHandleInformation to get the inheritance flag and clear it
with SetHandleInformation if needed.

It is mostly based on SysInternals information at
http://forum.sysinternals.com/howto-enumerate-handles_topic18892.html.
There are many other references across the web to those undocumented
options and data structures. But none of those come from formal Microsoft
documents, that I could find.

An alternative approach, which I also tried, for completeness sake, was to
try and Get/SetHandleInformation on all possible handles -- this is
completely unfeasible given that handles are at least 32 bit numbers.

After all of this -- including some frustration, I confess -- I decided to
go ahead and create a cffi ABI-mode variation of my original patch, anyway:
it passes the same tests and, much like the ctypes approach, works nicely
on my environment: Win 7 32, Win 2008R2 64, Win XP 32 (!!!), Python 2.7.11
32, Twisted 16.1, cffi 1.5.2.

Just for kicks I compared the performance of the ctypes vs cffi
implementation:
- The ctypes code runs in 0.014s - 0.016s.
- The cffi code runs in 0.03s - 0.04s.

This makes sense given that the code is mostly calling out to DLLs and,
AFAICT, cffi does the nice extra work of validating/converting types back
and forth.


Wrapping up: I'm really not sure how to more forward with this: not only
does pywin32 not provide the needed APIs, but also one of those APIs --
documented -- is being used in an undocumented fashion.

Even though I'd love to submit a patch, I don't think we're at that point
yet. However, for posterity's sake and if anyone wants to take a look at
the code, it is avalable at https://github.com/exvito/twisted in branches
win32-fix-handle-inherit-cffi and win32-fix-handle-inherit-ctypes. They add
two tests to twisted/test/test_process.py, one line to
twisted/internet/_dumbwin32proc.py and one module named
twisted/internet/_win32handleinherit.py

I'd love to hear feedback or ideas on this.
Thanks again

[1]
https://msdn.microsoft.com/en-us/library/windows/desktop/ms724509(v=vs.85).aspx
[2] https://msdn.microsoft.com/en-us/library/bb432383(v=vs.85).aspx
[3]
https://msdn.microsoft.com/en-us/library/windows/desktop/ms724329(v=vs.85).aspx
[4]
https://msdn.microsoft.com/en-us/library/windows/desktop/ms724935(v=vs.85).aspx
--
exvito
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160405/e3eb9e53/attachment.html>

From michael at mirwin.net  Tue Apr  5 16:24:00 2016
From: michael at mirwin.net (Mike Burns)
Date: Tue, 5 Apr 2016 15:24:00 -0700
Subject: [Twisted-Python] Sysadmin seeking projects
Message-ID: <CAMsDyYomyr4dahyLx6G0AenzZpH1MTg4rKSA0WO7KikRAZzFAw@mail.gmail.com>

Hi all,

tl;dr sysadmin wants to help Twisted. How do?


I've been lurking on this list (and irc) for a while with the intention of
lending a hand with some of the infrastructure tasks Glyph has flaunted in
some offline chats we've had. For context, I'm a DevOp at Rackspace and
have been around the FOSS world for a number of years starting back at
university (go Beavs!). After hearing some of Glyph's sysadmin war stories,
I thought I could lend a hand.

So far, I've landed a (very small) Braid documentation fix and gotten a dev
environment setup, but the real question is what the Twisted community
(and, in turn, Twisted admins) would most benefit from fixing and what
order things should be approached in?

There are a couple different pages I've come across that collect
sysadmin-sounding tasks[0][1] but they aren't really prioritized for
newcomers to adopt and work on. Are there infra/systems projects available
that I can help with? Where should I start?


[0]
https://twistedmatrix.com/trac/query?status=assigned&status=new&status=reopened&group=status&milestone=totally+automated+release+infrastructure
[1] https://github.com/twisted-infra/braid/pulls

Cheers!

-- 
@mburns | https://keybase.io/mburns
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160405/a255aa17/attachment.html>

From glyph at twistedmatrix.com  Tue Apr  5 18:23:46 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 5 Apr 2016 17:23:46 -0700
Subject: [Twisted-Python] Sysadmin seeking projects
In-Reply-To: <CAMsDyYomyr4dahyLx6G0AenzZpH1MTg4rKSA0WO7KikRAZzFAw@mail.gmail.com>
References: <CAMsDyYomyr4dahyLx6G0AenzZpH1MTg4rKSA0WO7KikRAZzFAw@mail.gmail.com>
Message-ID: <D8E10F8C-E6CB-4B61-A09C-E9202628E579@twistedmatrix.com>


> On Apr 5, 2016, at 3:24 PM, Mike Burns <michael at mirwin.net> wrote:
> 
> Hi all,
> 
> tl;dr sysadmin wants to help Twisted. How do?

HOORAY!

> I've been lurking on this list (and irc) for a while with the intention of lending a hand with some of the infrastructure tasks Glyph has flaunted in some offline chats we've had. For context, I'm a DevOp at Rackspace and have been around the FOSS world for a number of years starting back at university (go Beavs!). After hearing some of Glyph's sysadmin war stories, I thought I could lend a hand.

> So far, I've landed a (very small) Braid documentation fix and gotten a dev environment setup, but the real question is what the Twisted community (and, in turn, Twisted admins) would most benefit from fixing and what order things should be approached in?
> 
> There are a couple different pages I've come across that collect sysadmin-sounding tasks[0][1] but they aren't really prioritized for newcomers to adopt and work on. Are there infra/systems projects available that I can help with? Where should I start?

I really, really hope other people will respond, but I have 3 requests, roughly in order of preference:

Create a clearly-documented single point of entry to Twisted administrative tasks.

Right now, _I_ don't even know how to test changes to our infrastructure.  For example, I wanted to review this PR, to make a change to Trac: <https://github.com/twisted-infra/braid/pull/155>.  So, I asked how to do that.  There's a comment, <https://github.com/twisted-infra/braid/pull/155#issuecomment-161195289>, which links to another comment on another PR, <https://github.com/twisted-infra/braid/pull/111#issuecomment-138052006>, which tells me to run 'vagrant up' and then a bunch of 'fab' commands.  I commented a few times there, explaining that the instructions didn't work, and some details about how they didn't work, but nobody replied.  If you can figure this out and write some instructions that are actually part of the repo and clearly called out, that would be great.  If you've already done some work on the Braid documentation this seems like a natural next step.

Thought leadership!

By now, this should be painfully clear: we have no idea what we are doing.  As an experienced DevOp, you might be able to point to some things we could do that would remove some of the pain we are currently experiencing.

Github.

https://github.com/twisted-infra/braid/pull/179 contains a truly unfortunate number of changes, which need to be pulled apart into comprehensible individual steps so we can deploy them.

There's also the fact that we really want a more robust authentication backend (first, to get our passwords out of a text-file on the filesystem, to enable form-based authentication, and finally, to just start using oauth via github or something).  I could use some help on the email side of things, too, but that's a clearly lower priority than any of this stuff, in terms of a new contributor helping out.  Also, ultimately, I'd really like to move everything we're hosting to more powerful infrastructure, which we have a non-trivial amount of, for free, if we could only get our act together to use it.

That first item is by far the most important though, because right now there is a culture of fear among our (extremely small) operations community.  Nobody knows exactly how everything works, and the only reward for hours and hours of super annoying volunteer work is "development doesn't grind to a crushing halt".  If we had a reliable, easy-to-set-up staging environment, then we could maybe actually accept fun stuff as part of our operational footprint - "host some cool demos of Twisted code somewhere on twistedmatrix.com" is permanently on my to-do list and I can never really do anything about it.  Once we get to that point, it'll be possible to motivate more external contributors to do stuff, and we can maybe reverse the death-spiral of nobody wanting to touch this infrastructure.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160405/e7852cdb/attachment-0001.html>

From hawkowl at atleastfornow.net  Wed Apr  6 00:45:06 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Wed, 6 Apr 2016 14:45:06 +0800
Subject: [Twisted-Python] Twisted 16.1.1 Prerelease 1 Announcement
Message-ID: <A5C56BB7-CFFF-4A7D-8E1B-72B290445F53@atleastfornow.net>

Hi everyone,

I'd like to announce a prerelease of the upcoming Twisted 16.1.1, a patch release for Twisted 16.1. This fixes a regression in twisted.web where requests would not be logged.

The tarball and NEWS file can be found at https://twistedmatrix.com/Releases/pre/16.1.1pre1/ . Please test this release with your software.

If no issues are found, it will be released in a day or two.

Amber Brown
Twisted Release Manager
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160406/fb2603dc/attachment.pgp>

From itamar at itamarst.org  Wed Apr  6 11:29:28 2016
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 06 Apr 2016 13:29:28 -0400
Subject: [Twisted-Python] Available for consulting: Python, Twisted,
	distributed systems
Message-ID: <57042F1A.5050702@itamarst.org>

Hi, 

If anyone is looking for some help with a project, Twisted or otherwise,
I will be available over the next couple of months: prototyping new
products, improving existing ones, and solving hard problems in general.
For those who don't know me I started working on Twisted back in 2001,
though I have to admit I haven't been contributing much recently :) Full
resume @ http://itamarst.org/resume.html 

-Itamar 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160406/74029f0b/attachment.html>

From oliverpalmer at opalmer.com  Wed Apr  6 21:57:18 2016
From: oliverpalmer at opalmer.com (Oliver Palmer)
Date: Wed, 6 Apr 2016 23:57:18 -0400
Subject: [Twisted-Python] Windows spawnProcess - Child process inherits
 files and sockets (POSIX does not)
In-Reply-To: <CADtv4OA4eSA73VGtsVVMQNHWW9+h3-mgwVQw5bY=oxWCpmooEQ@mail.gmail.com>
References: <CADtv4OC=7N9w4MLY62AkqC2K0wKjjM0dezM86URFGwBba5cDcg@mail.gmail.com>
 <DE300510-5DB5-446D-8DF8-F1404FC69B32@twistedmatrix.com>
 <CADtv4OA4eSA73VGtsVVMQNHWW9+h3-mgwVQw5bY=oxWCpmooEQ@mail.gmail.com>
Message-ID: <CAEgpGv6D0QDTEdo=OX-SDNfwYuMJrN+E09KHpG367hiJwkF=4g@mail.gmail.com>

Owner of pywincffi here, I'd certainly welcome a PR or two for pywincffi
with the necessary functions/constants/etc so you don't have to manage that
code and I'd be happy to help write it too.  I think the consensus is
Twisted is going to eventually replace calls into pywin32 with calls into
pywincffi rather than implement all of that code inside of Twisted itself.
I've already started doing this in a couple of places,
twisted.python.lockfile
<https://github.com/twisted/twisted/compare/trunk...opalmer:windows-cffi>
being the one I'm actively working on because it's simpler to start with.
But the code inside of dumbwin32proc.py and _win32handleinherit.py are both
high on my list to convert too so it probably makes sense that we work on
this together if you're open to it.

Anyway as for some of your questions and points I've tried to reply to some
of them below.  I will admit, it's slanted towards making as much of this a
possible a part of pywincffi having plugged away at the 'what to do about
pywin32' and 'how to make Windows API calls more pythonic' quite a bit now
so keep that in mind.

> After all of this -- including some frustration, I confess -- I decided
to go ahead and create a cffi ABI-mode variation of my original patch,
anyway: it passes the same tests and, much like the ctypes approach, works
nicely on my environment: Win 7 32, Win 2008R2 64, Win XP 32 (!!!), Python
2.7.11 32, Twisted 16.1, cffi 1.5.2.

Looking at your code, some of it could be put into pywincffi already.  It
would need more tests and some additional code so the API calls are closer
to what's already in the project (type checking, default arguments,
documentation, etc) but overall it seems like you've already done the major
work of understanding how it all fits together.  The other advantages of
putting this code into pywincffi is testing and releases are easier because
the project is using AppVeyor to test all PRs and build the wheel files for
most major Python versions including both 32 and 64 bit variants.  From
Twisted's perspective, it's just a dependency on another library.

> Just for kicks I compared the performance of the ctypes vs cffi
implementation: ...

Have you tried a comparison between out-of-line modules and those using
dlopen?  I imagine they'd end up being pretty similar in the end
performance wise but I am a little curious.  In pywincffi I started out
using dlopen but moved away from it because I needed to write some extra
code which couldn't be included from a header.  The other advantage I saw
is that you don't have to rely on the DLL being present and/or Windows
being able to locate it so you can include code which might only
be available if you have some extra library installed.

> This makes sense given that the code is mostly calling out to DLLs and,
AFAICT, cffi does the nice extra work of validating/converting types back
and forth.

It usually does handle type conversion nicely but it can also do odd things
depending on the Python version (like bytes vs. unicode vs. strings) if
you're not careful.  The other issue is user input which can sometimes
result in odd error messages at the C-level that are difficult to
understand or correct without specific knowledge of the underlying code.
In non-public APIs this is not as big of an issue because the code is task
specific but in something like pywincffi or Twisted where people can use
APIs in unexpected ways the automatic conversion/validation can be somewhat
lacking (again, something I wanted to centralize and improve in pywincffi).

> It is mostly based on SysInternals information at
http://forum.sysinternals.com/howto-enumerate-handles_topic18892.html.
There are many other references across the web to those undocumented
options and data structures. But none of those come from formal Microsoft
documents, that I could find.

Some of the people on that site either have contacts within Microsoft or
have worked for Microsoft at one point so I usually trust what's there if
it's the only source.  The other place I often look is the ReactOS project
where they've managed to reverse engineer quite a bit of the Windows kernel
which can either hint at the info you need or validate what you already
know.

> Wrapping up: I'm really not sure how to more forward with this: not only
does pywin32 not provide the needed APIs, but also one of those APIs --
documented -- is being used in an undocumented fashion.

IMHO (again, with some bias), I think implementing the calls you need in
pywincffi is the first step.  If the calls are undocumented it would also
be a good place to do the necessary research, testing and development I
think in isolation from Twisted itself so it's clear we're going in the
right direction.  Once that's done a patch set for Twisted, which calls
into pywincffi, can be opened and tested across the supported platforms.
This makes the patch set smaller but also makes it easier to understand
what if anything the new code breaks.


Regardless, even if you don't want to go the route of putting this into
pywincffi thanks for working on this because it helps in some of the work
I'm doing too.

---Oliver



On Tue, Apr 5, 2016 at 5:11 PM, exvito here <ex.vitorino at gmail.com> wrote:

> On Thu, Mar 31, 2016 at 10:27 PM, Glyph <glyph at twistedmatrix.com> wrote:
>
>> Before submitting a patch for review, I'm looking for preliminary
>> feedback, assuming you agree that the Windows vs POSIX semantics should be
>> the same (if not, why?).
>>
>>
>> After much thought: Yes.  They should be the same.  The reason they're
>> not is largely ignorance of the relevant APIs and abstractions on Windows,
>> not any desire that they differ.  The one place they have to differ a
>> little bit is handle inheritance: we need to figure out some way to express
>> the 'childFDs' mapping in terms of both file descriptors and handles.
>>
>
> Agreed. My code does not go into 'childFDs' mapping territory, though. All
> it does is prevent all file- and socket-handles from being inherited by the
> child process -- other than the pipes used for STDIO communication.
>
> My patch calls a few Windows APIs via ctypes, however, as far as I can
>> tell, Twisted on Windows requires pywin32 and, recently, there has been
>> some discussion around dropping that dependency and moving towards
>> something based on cffi.
>>
>>
>> ctypes is dangerous and error-prone.  If you screw up the bit-width of a
>> type, or the type in a header changes on some future version, ctypes gives
>> you no way of finding out until some poor user's process segfaults, and
>> usually not at the relevant call site.  So we'd prefer not to maintain more
>> ctypes-using code.
>>
>> The APIs in pywin32 very closely mirror the underlying Windows API, so
>> for addressing this issue, please just go ahead and use pywin32 APIs;
>> porting them to a new API along with everything else should be relatively
>> straightforward.
>>
>
>> If we do move forward with that change, we will probably use
>> https://pypi.python.org/pypi/pywincffi and not move anything within
>> Twisted.
>>
>
> Agreed with your ctypes comment -- I've been hit by such faults which
> "magically" went away using cffi when coding against Windows TAPI.
>
> pywin32, unfortunatelly, does not include two Windows APIs (out of four)
> my code requires -- I just grepped the source for latest release I could
> find on SourceForge, 220.
>
> For completeness, the missing APIs are NtQuerySystemInformation [1] and
> NtQueryObject [2].
> The others are GetHandleInformation [3] and SetHandleInformation [4].
>
> What would you say the way forward is? Should I submit the patch for
>> review anyway? Is there any other work that needs to be done first that I
>> may contribute to?
>>
>>
>> Yes, just go ahead and write the patch.
>>
>
> Given that pywin32 does not provide two of the required APIs, maybe this
> issue is somewhat blocked.
>
> Adding to that is the fact that one particular API call in my code --
> NtQuerySystemInformation [1] -- is being used with what seems to be an
> undocumented option -- SystemHandleInformation (enum = 16) -- and
> returning, again, an apparently undocumented data structure --
> SYSTEM_HANDLE_INFORMATION. I downloaded and installed the available SDKs
> and WDKs (driver dev kits) from Microsoft and could not find any reference
> to those particular options or data structures.
>
> My code was created after much investigation on how to obtain the list of
> open handles for the current process.
> The gist of it is:
> - Call NtQuerySystemInformation with the SystemInformationClass arg set
> to SystemHandleInformation.
> - This returns all (!!!) of the handles in the system (no need for special
> privileges).
> - Filter those out by the current process PID and type, such that only
> files and sockets are left.
> - Use the GetHandleInformation to get the inheritance flag and clear it
> with SetHandleInformation if needed.
>
> It is mostly based on SysInternals information at
> http://forum.sysinternals.com/howto-enumerate-handles_topic18892.html.
> There are many other references across the web to those undocumented
> options and data structures. But none of those come from formal Microsoft
> documents, that I could find.
>
> An alternative approach, which I also tried, for completeness sake, was to
> try and Get/SetHandleInformation on all possible handles -- this is
> completely unfeasible given that handles are at least 32 bit numbers.
>
> After all of this -- including some frustration, I confess -- I decided to
> go ahead and create a cffi ABI-mode variation of my original patch, anyway:
> it passes the same tests and, much like the ctypes approach, works nicely
> on my environment: Win 7 32, Win 2008R2 64, Win XP 32 (!!!), Python 2.7.11
> 32, Twisted 16.1, cffi 1.5.2.
>
> Just for kicks I compared the performance of the ctypes vs cffi
> implementation:
> - The ctypes code runs in 0.014s - 0.016s.
> - The cffi code runs in 0.03s - 0.04s.
>
> This makes sense given that the code is mostly calling out to DLLs and,
> AFAICT, cffi does the nice extra work of validating/converting types back
> and forth.
>
>
> Wrapping up: I'm really not sure how to more forward with this: not only
> does pywin32 not provide the needed APIs, but also one of those APIs --
> documented -- is being used in an undocumented fashion.
>
> Even though I'd love to submit a patch, I don't think we're at that point
> yet. However, for posterity's sake and if anyone wants to take a look at
> the code, it is avalable at https://github.com/exvito/twisted in branches
> win32-fix-handle-inherit-cffi and win32-fix-handle-inherit-ctypes. They add
> two tests to twisted/test/test_process.py, one line to
> twisted/internet/_dumbwin32proc.py and one module named
> twisted/internet/_win32handleinherit.py
>
> I'd love to hear feedback or ideas on this.
> Thanks again
>
> [1]
> https://msdn.microsoft.com/en-us/library/windows/desktop/ms724509(v=vs.85).aspx
> [2] https://msdn.microsoft.com/en-us/library/bb432383(v=vs.85).aspx
> [3]
> https://msdn.microsoft.com/en-us/library/windows/desktop/ms724329(v=vs.85).aspx
> [4]
> https://msdn.microsoft.com/en-us/library/windows/desktop/ms724935(v=vs.85).aspx
> --
> exvito
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160406/f799f13b/attachment-0001.html>

From ex.vitorino at gmail.com  Thu Apr  7 11:09:04 2016
From: ex.vitorino at gmail.com (exvito here)
Date: Thu, 7 Apr 2016 18:09:04 +0100
Subject: [Twisted-Python] Windows spawnProcess - Child process inherits
 files and sockets (POSIX does not)
In-Reply-To: <CAEgpGv6D0QDTEdo=OX-SDNfwYuMJrN+E09KHpG367hiJwkF=4g@mail.gmail.com>
References: <CADtv4OC=7N9w4MLY62AkqC2K0wKjjM0dezM86URFGwBba5cDcg@mail.gmail.com>
 <DE300510-5DB5-446D-8DF8-F1404FC69B32@twistedmatrix.com>
 <CADtv4OA4eSA73VGtsVVMQNHWW9+h3-mgwVQw5bY=oxWCpmooEQ@mail.gmail.com>
 <CAEgpGv6D0QDTEdo=OX-SDNfwYuMJrN+E09KHpG367hiJwkF=4g@mail.gmail.com>
Message-ID: <CADtv4OBXh=jKyFCSif5OxSxJHfZ5GFUownj3amKiG6Nx98GWMw@mail.gmail.com>

On Thu, Apr 7, 2016 at 4:57 AM, Oliver Palmer <oliverpalmer at opalmer.com> wrote:

> Owner of pywincffi here, I'd certainly welcome a PR or two for pywincffi
> with the necessary functions/constants/etc so you don't have to manage that
> code and I'd be happy to help write it too.  I think the consensus is
> Twisted is going to eventually replace calls into pywin32 with calls into
> pywincffi rather than implement all of that code inside of Twisted itself.
> I've already started doing this in a couple of places,
> twisted.python.lockfile being the one I'm actively working on because it's
> simpler to start with.  But the code inside of dumbwin32proc.py and
> _win32handleinherit.py are both high on my list to convert too so it
> probably makes sense that we work on this together if you're open to it.

Certainly. Thanks for reaching out.

> Looking at your code, some of it could be put into pywincffi already.  It
> would need more tests and some additional code so the API calls are closer
> to what's already in the project (type checking, default arguments,
> documentation, etc) but overall it seems like you've already done the major
> work of understanding how it all fits together.  The other advantages of
> putting this code into pywincffi is testing and releases are easier because
> the project is using AppVeyor to test all PRs and build the wheel files for
> most major Python versions including both 32 and 64 bit variants.  From
> Twisted's perspective, it's just a dependency on another library.

Agreed. I'll be happy to follow your guidance in that.

>> Just for kicks I compared the performance of the ctypes vs cffi
>> implementation: ...
>
> Have you tried a comparison between out-of-line modules and those using
> dlopen?  I imagine they'd end up being pretty similar in the end performance
> wise but I am a little curious.  In pywincffi I started out using dlopen but
> moved away from it because I needed to write some extra code which couldn't
> be included from a header.  The other advantage I saw is that you don't have
> to rely on the DLL being present and/or Windows being able to locate it so
> you can include code which might only be available if you have some extra
> library installed.

I did not and I confess that I haven't fully grasped (yet) the
different cffi "approaches", if I may call them so.

>> It is mostly based on SysInternals information at
>> http://forum.sysinternals.com/howto-enumerate-handles_topic18892.html. There
>> are many other references across the web to those undocumented options and
>> data structures. But none of those come from formal Microsoft documents,
>> that I could find.
>
> Some of the people on that site either have contacts within Microsoft or
> have worked for Microsoft at one point so I usually trust what's there if
> it's the only source.  The other place I often look is the ReactOS project
> where they've managed to reverse engineer quite a bit of the Windows kernel
> which can either hint at the info you need or validate what you already
> know.

AFAICT, SysInternals was bought by / integrated with Microsoft: tteir
tools are now available under Microsoft domains (example: Process
Explorer at https://technet.microsoft.com/en-us/sysinternals/processexplorer.aspx).

>> Wrapping up: I'm really not sure how to more forward with this: not only
>> does pywin32 not provide the needed APIs, but also one of those APIs --
>> documented -- is being used in an undocumented fashion.
>
> IMHO (again, with some bias), I think implementing the calls you need in
> pywincffi is the first step.  If the calls are undocumented it would also be
> a good place to do the necessary research, testing and development I think
> in isolation from Twisted itself so it's clear we're going in the right
> direction.  Once that's done a patch set for Twisted, which calls into
> pywincffi, can be opened and tested across the supported platforms.  This
> makes the patch set smaller but also makes it easier to understand what if
> anything the new code breaks.

Sounds like a sane and safe approach.

> Regardless, even if you don't want to go the route of putting this into
> pywincffi thanks for working on this because it helps in some of the work
> I'm doing too.

Thank you to, again. I will issue PRs against pywincffi such that the
APIs are available. They most probably won't be up to pywincffi's
standards/requirements but I expect we can cooperate under that
context and go from there.
-- 
exvito


From ex.vitorino at gmail.com  Fri Apr  8 06:30:19 2016
From: ex.vitorino at gmail.com (exvito here)
Date: Fri, 8 Apr 2016 13:30:19 +0100
Subject: [Twisted-Python] Windows spawnProcess - Child process inherits
 files and sockets (POSIX does not)
In-Reply-To: <CADtv4OBXh=jKyFCSif5OxSxJHfZ5GFUownj3amKiG6Nx98GWMw@mail.gmail.com>
References: <CADtv4OC=7N9w4MLY62AkqC2K0wKjjM0dezM86URFGwBba5cDcg@mail.gmail.com>
 <DE300510-5DB5-446D-8DF8-F1404FC69B32@twistedmatrix.com>
 <CADtv4OA4eSA73VGtsVVMQNHWW9+h3-mgwVQw5bY=oxWCpmooEQ@mail.gmail.com>
 <CAEgpGv6D0QDTEdo=OX-SDNfwYuMJrN+E09KHpG367hiJwkF=4g@mail.gmail.com>
 <CADtv4OBXh=jKyFCSif5OxSxJHfZ5GFUownj3amKiG6Nx98GWMw@mail.gmail.com>
Message-ID: <CADtv4OBUivKiYRAmJeG-CikrQH=Y1YfXCLmZoPnckJL-PB=Gfw@mail.gmail.com>

> Thank you to, again. I will issue PRs against pywincffi such that the
> APIs are available. They most probably won't be up to pywincffi's
> standards/requirements but I expect we can cooperate under that
> context and go from there.

For completeness, if anyone wants to follow-along or contribute, first
PR is https://github.com/opalmer/pywincffi/pull/66.

Work will continue there. Once it becomes "Twisted ready" we'll bring
the discussion back here.

Thanks to all.
-- 
exvito


From mithrandi at mithrandi.net  Sat Apr  9 19:48:49 2016
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sun, 10 Apr 2016 01:48:49 +0000
Subject: [Twisted-Python] [ANN] txacme 0.9.0,
	zero-configuration HTTPS for your Twisted app!
Message-ID: <CAMcKhMQr0L2-+ckkL2+V7cSwRKtYX6AsRge4p6c2s9ZA-r7T6Q@mail.gmail.com>

txacme[0][1] provides a TLS endpoint to automatically issue (and renew)
certificates via the Let's Encrypt CA, allowing you to effortlessly turn on
HTTPS for your application. A brief demonstration can be seen here:
https://asciinema.org/a/41758

In support of this, txacme also includes a client implementation of
the draft-ietf-acme-acme-01[2] specification, and a service for
automatically checking and reissuing expired certificates. If the default
zero-configuration endpoint doesn't do what you want, then go wild with
these.

If you have any interest at all in txacme, please take a look at the
currently provided API, and ask questions and/or file issues on GitHub
should there be any aspects of your potential use case that are not covered
by the API as it stands; I would like to use the 0.9.x period to get a
solid API nailed down for the 1.0 release.

[0] https://pypi.python.org/pypi/txacme

[1] https://github.com/mithrandi/txacme

[2] https://tools.ietf.org/html/draft-ietf-acme-acme-01 ? support
for draft-ietf-acme-acme-02 will probably be forthcoming once Let's Encrypt
actually supports this server-side.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160410/ba372e0f/attachment.html>

From hawkowl at atleastfornow.net  Sun Apr 10 21:03:24 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Mon, 11 Apr 2016 11:03:24 +0800
Subject: [Twisted-Python] Twisted 16.1.1 Release Announcement
Message-ID: <2C938898-2174-4D85-94A5-C35E0236525A@atleastfornow.net>

On behalf of Twisted Matrix Laboratories, I am honoured to announce the release of Twisted 16.1.1!

This is a small bugfix release in the 16.1 series, fixing a bug where `twistd web` would not output access logs.

For more information, check the NEWS file (link provided below).

You can find the downloads at <https://pypi.python.org/pypi/Twisted> (or alternatively <http://twistedmatrix.com/trac/wiki/Downloads>). The NEWS file is also available at <https://github.com/twisted/twisted/blob/twisted-16.1.1/NEWS>.

Twisted Regards,
Amber Brown
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160411/6785f858/attachment.pgp>

From techtonik at gmail.com  Tue Apr 12 07:17:41 2016
From: techtonik at gmail.com (anatoly techtonik)
Date: Tue, 12 Apr 2016 16:17:41 +0300
Subject: [Twisted-Python] Twisted 16.1 Release Announcement
In-Reply-To: <367BC573-64FD-4694-ADA1-C78B5D45E257@atleastfornow.net>
References: <367BC573-64FD-4694-ADA1-C78B5D45E257@atleastfornow.net>
Message-ID: <CAPkN8x+CV-XBYEFrYV+Swipn4Rm_mMFH_+apB3xYOWgxDATvJg@mail.gmail.com>

Hi,

Are there any plans to get back 32-bit wheels for Twisted?


From hawkowl at atleastfornow.net  Tue Apr 12 07:21:40 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Tue, 12 Apr 2016 21:21:40 +0800
Subject: [Twisted-Python] Twisted 16.1 Release Announcement
In-Reply-To: <CAPkN8x+CV-XBYEFrYV+Swipn4Rm_mMFH_+apB3xYOWgxDATvJg@mail.gmail.com>
References: <367BC573-64FD-4694-ADA1-C78B5D45E257@atleastfornow.net>
 <CAPkN8x+CV-XBYEFrYV+Swipn4Rm_mMFH_+apB3xYOWgxDATvJg@mail.gmail.com>
Message-ID: <1B438157-8581-4C69-9E09-822C5A542614@atleastfornow.net>


> On 12 Apr 2016, at 21:17, anatoly techtonik <techtonik at gmail.com> wrote:
> 
> Hi,
> 
> Are there any plans to get back 32-bit wheels for Twisted?
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

Hi,

Yes, sometime, when either Glyph or I have the moment to do builder work and get the needed stuff installed on the builder. They will be Windows 7-compiled 32bit wheels.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160412/69b4326c/attachment.pgp>

From techtonik at gmail.com  Tue Apr 12 08:38:38 2016
From: techtonik at gmail.com (anatoly techtonik)
Date: Tue, 12 Apr 2016 17:38:38 +0300
Subject: [Twisted-Python] Twisted 16.1 Release Announcement
In-Reply-To: <1B438157-8581-4C69-9E09-822C5A542614@atleastfornow.net>
References: <367BC573-64FD-4694-ADA1-C78B5D45E257@atleastfornow.net>
 <CAPkN8x+CV-XBYEFrYV+Swipn4Rm_mMFH_+apB3xYOWgxDATvJg@mail.gmail.com>
 <1B438157-8581-4C69-9E09-822C5A542614@atleastfornow.net>
Message-ID: <CAPkN8xJuwS3w1vRmfFvtHDoCyu1F2Pu+QXUnnL=8A-EnRxmBqw@mail.gmail.com>

Awesome. Thanks.

On Tue, Apr 12, 2016 at 4:21 PM, Amber "Hawkie" Brown
<hawkowl at atleastfornow.net> wrote:
>
>> On 12 Apr 2016, at 21:17, anatoly techtonik <techtonik at gmail.com> wrote:
>>
>> Hi,
>>
>> Are there any plans to get back 32-bit wheels for Twisted?
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> Hi,
>
> Yes, sometime, when either Glyph or I have the moment to do builder work and get the needed stuff installed on the builder. They will be Windows 7-compiled 32bit wheels.
>
> - Amber
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
anatoly t.


From itamar at itamarst.org  Wed Apr 13 14:18:22 2016
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 13 Apr 2016 16:18:22 -0400
Subject: [Twisted-Python] Crochet 1.5.0: Use Twisted in Django, Flask,
	or anywhere else
Message-ID: <570EA98E.6010401@itamarst.org>

Do you wish you could:

  * Use the power of Twisted's asynchronous networking in Django, Flask,
    or other threaded applications?
  * Provide a blocking API powered by Twisted underneath, without
    exposing it to the caller?
  * Write a library that provides APIs both for Twisted and non-Twisted
    applications?
  * Use threads more easily inside Twisted applications?

Crochet lets you do all that, and more, by hiding and automatically 
starting the Twisted reactor and providing a blocking API for calling 
into Twisted. If you need to use your library from a normal Twisted 
application you can disable the auto-start functionality. Here's an 
example of using Twisted in a blocking manner:

from __future__ import print_function
from twisted.names import client
from crochet import setup, wait_for
setup()

@wait_for(timeout=5.0)
def gethostbyname(name):
      """Use the Twisted DNS library."""
      d = client.lookupAddress(name)
      d.addCallback(lambda result: result[0][0].payload.dottedQuad())
      return d

if __name__ == '__main__':
      # Application code using the public API - notice it works in a normal
      # blocking manner, with no event loop visible:
      import sys
      name = sys.argv[1]
      ip = gethostbyname(name)
      print(name, "->", ip)

New in 1.5.0 is official Python 3.5 support; Python 2.6, 3.3 and older 
versions of Twisted are no longer officially supported (but are likely 
to still work).

If you need help using Crochet (or just general Twisted or Python help) 
I am currently available for short-term consulting. You can read the 
documentation at https://crochet.readthedocs.org/.

--Itamar Turner-Trauring
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160413/9514cfbd/attachment.html>

From itamar at itamarst.org  Wed Apr 13 14:24:49 2016
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 13 Apr 2016 16:24:49 -0400
Subject: [Twisted-Python] Crochet 1.5.0: Use Twisted in Django, Flask,
 or anywhere else
In-Reply-To: <570EA98E.6010401@itamarst.org>
References: <570EA98E.6010401@itamarst.org>
Message-ID: <570EAB11.2010103@itamarst.org>

I messed up the email headers on this, so PLEASE BE CAREFUL if you're 
replying to this, or the reply will end up spamming 
python-announce-list. Sorry.


From glyph at twistedmatrix.com  Wed Apr 13 16:52:47 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 13 Apr 2016 15:52:47 -0700
Subject: [Twisted-Python] Crochet 1.5.0: Use Twisted in Django, Flask,
	or anywhere else
In-Reply-To: <570EA98E.6010401@itamarst.org>
References: <570EA98E.6010401@itamarst.org>
Message-ID: <BA7004CF-809C-4417-8413-ACBDE294C3D4@twistedmatrix.com>


> On Apr 13, 2016, at 13:18, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> 
> Do you wish you could:
> Use the power of Twisted's asynchronous networking in Django, Flask, or other threaded applications?

Thanks for the update, Itamar!

Do you think maybe it's time to integrate Crochet into Twisted proper, so we can obviate the need for the 'setup()' step, and just have the reactor do that itself?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160413/15fd20f5/attachment.html>

From itamar at itamarst.org  Wed Apr 13 17:50:10 2016
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 13 Apr 2016 19:50:10 -0400
Subject: [Twisted-Python] Crochet 1.5.0: Use Twisted in Django, Flask,
 or anywhere else
In-Reply-To: <BA7004CF-809C-4417-8413-ACBDE294C3D4@twistedmatrix.com>
References: <570EA98E.6010401@itamarst.org>
 <BA7004CF-809C-4417-8413-ACBDE294C3D4@twistedmatrix.com>
Message-ID: <570EDB32.2020701@itamarst.org>

On 04/13/2016 06:52 PM, Glyph wrote:
>
> Do you think maybe it's time to integrate Crochet into Twisted proper, 
> so we can obviate the need for the 'setup()' step, and just have the 
> reactor do that itself?
>
Well, setup() runs the reactor in a thread, which is probably not what 
you want in a regular Twisted program. For Twisted-native applications 
interacting with Crochet you don't want to do the auto-reactor mode, so 
you call no_setup() earlier in startup process, and then subsequent 
setup() calls (e.g. from other packages) are ignored.

So given it would have to have the same API as currently, I'm not sure 
what the benefit of integrating it into Twisted would be.


From glyph at twistedmatrix.com  Wed Apr 13 20:57:23 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 13 Apr 2016 19:57:23 -0700
Subject: [Twisted-Python] Crochet 1.5.0: Use Twisted in Django, Flask,
	or anywhere else
In-Reply-To: <570EDB32.2020701@itamarst.org>
References: <570EA98E.6010401@itamarst.org>
 <BA7004CF-809C-4417-8413-ACBDE294C3D4@twistedmatrix.com>
 <570EDB32.2020701@itamarst.org>
Message-ID: <CFE1BD14-65B5-4C6D-9E24-7E6EABA7C64B@twistedmatrix.com>


> On Apr 13, 2016, at 16:50, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> 
> On 04/13/2016 06:52 PM, Glyph wrote:
>> 
>> Do you think maybe it's time to integrate Crochet into Twisted proper, so we can obviate the need for the 'setup()' step, and just have the reactor do that itself?
>> 
> Well, setup() runs the reactor in a thread, which is probably not what you want in a regular Twisted program. For Twisted-native applications interacting with Crochet you don't want to do the auto-reactor mode, so you call no_setup() earlier in startup process, and then subsequent setup() calls (e.g. from other packages) are ignored.

One advantage of having this directly supported in Twisted, then, would be calling no_setup() (or equivalent) early on in 'twistd' and equivalent tools, so that crochet-using modules could be imported as part of a twisted-native plugin?

> So given it would have to have the same API as currently, I'm not sure what the benefit of integrating it into Twisted would be.

It might also be able to have a slightly different API.  For example, maybe setup() or some analogue thereof could set up an 'atexit' hook that runs the reactor if nobody gets around to calling run() before it exits?

-glyph

From itamar at itamarst.org  Thu Apr 14 06:45:58 2016
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 14 Apr 2016 08:45:58 -0400
Subject: [Twisted-Python] Crochet 1.5.0: Use Twisted in Django, Flask,
 or anywhere else
In-Reply-To: <CFE1BD14-65B5-4C6D-9E24-7E6EABA7C64B@twistedmatrix.com>
References: <570EA98E.6010401@itamarst.org>
 <BA7004CF-809C-4417-8413-ACBDE294C3D4@twistedmatrix.com>
 <570EDB32.2020701@itamarst.org>
 <CFE1BD14-65B5-4C6D-9E24-7E6EABA7C64B@twistedmatrix.com>
Message-ID: <570F9106.4000300@itamarst.org>

On 04/13/2016 10:57 PM, Glyph wrote:
> One advantage of having this directly supported in Twisted, then, would be calling no_setup() (or equivalent) early on in 'twistd' and equivalent tools, so that crochet-using modules could be imported as part of a twisted-native plugin?
That would be pretty cool, yes, although it doesn't strictly require 
Crochet be part of Twisted.
> It might also be able to have a slightly different API.  For example, maybe setup() or some analogue thereof could set up an 'atexit' hook that runs the reactor if nobody gets around to calling run() before it exits?
>
Huh. Well... Crochet exits when main thread exits, so if atexit was 
called that means there's no more threads. So that probably wouldn't work.

More broadly, Crochet is a pile of these sort of horrible hacks, 
encapsulated in one place and hidden as much as possible. But there's 
rough edges that poke out occasionally. I'm not sure Twisted ought to be 
that kind of library.



From glyph at twistedmatrix.com  Thu Apr 14 14:38:51 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 14 Apr 2016 13:38:51 -0700
Subject: [Twisted-Python] Crochet 1.5.0: Use Twisted in Django, Flask,
	or anywhere else
In-Reply-To: <570F9106.4000300@itamarst.org>
References: <570EA98E.6010401@itamarst.org>
 <BA7004CF-809C-4417-8413-ACBDE294C3D4@twistedmatrix.com>
 <570EDB32.2020701@itamarst.org>
 <CFE1BD14-65B5-4C6D-9E24-7E6EABA7C64B@twistedmatrix.com>
 <570F9106.4000300@itamarst.org>
Message-ID: <6AD9BADC-9EB2-4CC6-8630-995F81117799@twistedmatrix.com>


> On Apr 14, 2016, at 5:45 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> 
> Crochet is a pile of these sort of horrible hacks, encapsulated in one place and hidden as much as possible. But there's rough edges that poke out occasionally. I'm not sure Twisted ought to be that kind of library.


We already have an IMAP server so I feel like that ship may have sailed ;-)

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160414/34fe187c/attachment.html>

From jml at mumak.net  Fri Apr 15 02:34:04 2016
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 15 Apr 2016 08:34:04 +0000
Subject: [Twisted-Python] Crochet 1.5.0: Use Twisted in Django, Flask,
 or anywhere else
In-Reply-To: <BA7004CF-809C-4417-8413-ACBDE294C3D4@twistedmatrix.com>
References: <570EA98E.6010401@itamarst.org>
 <BA7004CF-809C-4417-8413-ACBDE294C3D4@twistedmatrix.com>
Message-ID: <CAHZ8tna_4tJKsabQyPE=5G5D6Xjnz1opsGT8YzX9VcpgWEtcjQ@mail.gmail.com>

On Wed, 13 Apr 2016 at 23:53 Glyph <glyph at twistedmatrix.com> wrote:

>
> On Apr 13, 2016, at 13:18, Itamar Turner-Trauring <itamar at itamarst.org>
> wrote:
>
> Do you wish you could:
>
>    - Use the power of Twisted's asynchronous networking in Django, Flask,
>    or other threaded applications?
>
> Thanks for the update, Itamar!
>
> Do you think maybe it's time to integrate Crochet into Twisted proper, so
> we can obviate the need for the 'setup()' step, and just have the reactor
> do that itself?
>
>
 +1 on integrating this functionality into Twisted.

I wrote
https://github.com/testing-cabal/testtools/blob/master/testtools/twistedsupport/_spinner.py
before
Crotchet came out. It's been used for years as part of testtools with great
success. I don't advocate integrating it into Twisted, but I think that
whoever integrates Crotchet should at least take a look in case it catches
edge cases that Crotchet misses.

jml
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160415/24bd5e2c/attachment.html>

From twisted-python at 2xlp.com  Tue Apr 19 17:32:34 2016
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Tue, 19 Apr 2016 19:32:34 -0400
Subject: [Twisted-Python] twisted listening on UDP port, why?
Message-ID: <71F0C715-C66B-44F8-9D8F-DC9CBBFF1C69@2xlp.com>

I'm trying to lock down a box, and came across a peculiarity with a twisted dameon -- it's binding to 0.0.0.0 for UDP on an arbitrary port

I can'f figure out why this is happening -- I'm not consciously/explicitly using anything on UDP, and the port changes every time I start up a daemon.

Does anyone have a clue what it could be?




From glyph at twistedmatrix.com  Tue Apr 19 18:01:22 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 19 Apr 2016 17:01:22 -0700
Subject: [Twisted-Python] twisted listening on UDP port, why?
In-Reply-To: <71F0C715-C66B-44F8-9D8F-DC9CBBFF1C69@2xlp.com>
References: <71F0C715-C66B-44F8-9D8F-DC9CBBFF1C69@2xlp.com>
Message-ID: <7EFE592B-A526-4DE3-8C2A-275A0336D439@twistedmatrix.com>


> On Apr 19, 2016, at 4:32 PM, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:
> 
> I'm trying to lock down a box, and came across a peculiarity with a twisted dameon -- it's binding to 0.0.0.0 for UDP on an arbitrary port
> 
> I can'f figure out why this is happening -- I'm not consciously/explicitly using anything on UDP, and the port changes every time I start up a daemon.
> 
> Does anyone have a clue what it could be?

Perhaps this is libc's DNS client?  Twisted doesn't do anything like this.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160419/25372cb0/attachment.html>

From p.mayers at imperial.ac.uk  Wed Apr 20 05:33:44 2016
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 20 Apr 2016 12:33:44 +0100
Subject: [Twisted-Python] twisted listening on UDP port, why?
In-Reply-To: <7EFE592B-A526-4DE3-8C2A-275A0336D439@twistedmatrix.com>
References: <71F0C715-C66B-44F8-9D8F-DC9CBBFF1C69@2xlp.com>
 <7EFE592B-A526-4DE3-8C2A-275A0336D439@twistedmatrix.com>
Message-ID: <57176918.6030609@imperial.ac.uk>

On 20/04/16 01:01, Glyph wrote:

> Perhaps this is libc's DNS client?  Twisted doesn't do anything like this.

It does something similar with win32reactor IIRC?

http://twistedmatrix.com/trac/browser/tags/releases/twisted-16.1.1/twisted/internet/posixbase.py#L60

...but that binds to 127.0.0.1 not 0.0.0.0

glibc doesn't hold it's DNS sockets open AFAIK - it closes them once the 
reply is done.


From exarkun at twistedmatrix.com  Wed Apr 20 07:22:58 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Wed, 20 Apr 2016 09:22:58 -0400
Subject: [Twisted-Python] twisted listening on UDP port, why?
In-Reply-To: <57176918.6030609@imperial.ac.uk>
References: <71F0C715-C66B-44F8-9D8F-DC9CBBFF1C69@2xlp.com>
 <7EFE592B-A526-4DE3-8C2A-275A0336D439@twistedmatrix.com>
 <57176918.6030609@imperial.ac.uk>
Message-ID: <CAEeXt4Ms6RUUCEPRkWEio8XwHtoFFigb29C+1X=kWDnEW0e14Q@mail.gmail.com>

Hi,

What do the logs for the app say?  Twisted logs a message when it binds a
UDP port.

Or, another though, you could put a breakpoint on listenUDP (or socket.bind
or something) and then run the process under pdb and look at the stack
trace.

You could also try sending some traffic to the port and see what happens.
:)  Maybe you'll get something back that identifies it or maybe you'll
provoke some more logging code somewhere.

Jean-Paul

On Wed, Apr 20, 2016 at 7:33 AM, Phil Mayers <p.mayers at imperial.ac.uk>
wrote:

> On 20/04/16 01:01, Glyph wrote:
>
> Perhaps this is libc's DNS client?  Twisted doesn't do anything like this.
>>
>
> It does something similar with win32reactor IIRC?
>
>
> http://twistedmatrix.com/trac/browser/tags/releases/twisted-16.1.1/twisted/internet/posixbase.py#L60
>
> ...but that binds to 127.0.0.1 not 0.0.0.0
>
> glibc doesn't hold it's DNS sockets open AFAIK - it closes them once the
> reply is done.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160420/59632733/attachment.html>

From twisted-python at 2xlp.com  Wed Apr 20 11:31:15 2016
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 20 Apr 2016 13:31:15 -0400
Subject: [Twisted-Python] twisted listening on UDP port, why?
In-Reply-To: <CAEeXt4Ms6RUUCEPRkWEio8XwHtoFFigb29C+1X=kWDnEW0e14Q@mail.gmail.com>
References: <71F0C715-C66B-44F8-9D8F-DC9CBBFF1C69@2xlp.com>
 <7EFE592B-A526-4DE3-8C2A-275A0336D439@twistedmatrix.com>
 <57176918.6030609@imperial.ac.uk>
 <CAEeXt4Ms6RUUCEPRkWEio8XwHtoFFigb29C+1X=kWDnEW0e14Q@mail.gmail.com>
Message-ID: <67331142-5C53-4144-A270-B3D8D377BAAE@2xlp.com>

Thanks all.

I was going to write everything below, then finally tracked it down.

A specific library was keeping the port open.  I'm tracking down how/why right now.

The worry on this, FYI, was that there is a critical vulnerability in glibc from a few months ago where a server could be compromised via UDP traffic.

One of my servers was compromised last week, and I think the vector was in-part exploiting that bug (it was also exploited by redis, but redis was secured, so somehow it got loosened).


On Apr 20, 2016, at 9:22 AM, Jean-Paul Calderone wrote:

> What do the logs for the app say?  Twisted logs a message when it binds a UDP port.

Nothing.  I don't think Twisted itself is doing this, I think it's just happening when other code is running in twisted.

> You could also try sending some traffic to the port and see what happens. :)  Maybe you'll get something back that identifies it or maybe you'll provoke some more logging code somewhere.

That was my first attempt!  It just closed the connection no matter what I sent.  I also made about 20 test cases.


> Or, another though, you could put a breakpoint on listenUDP (or socket.bind or something) and then run the process under pdb and look at the stack trace.

Aggressive use of pdb.set_trace() on some modified code finally let me find the issue.  




From thughes at thegoldfish.org  Wed Apr 20 11:37:50 2016
From: thughes at thegoldfish.org (Tim Hughes)
Date: Wed, 20 Apr 2016 18:37:50 +0100
Subject: [Twisted-Python] Cause epollreactor to busyspin
Message-ID: <6fc57744dc8398942db654d22d855dac@imap.gmail.com>


Hi All,

I have a latency sensitive application that gets affected when it is 
moved between cores or the system has to wake from idling. I would like 
to run the thread in as tight a loop as possible and to do this i need 
to cause epollreactor to busyspin on receiving data. I have worked out 
how to do it by editing the twisted code directly by hard coding the 
value of `timeout` to be 0 at this location in the code 
https://github.com/twisted/twisted/blob/f074ba3d5083aa1503abcf194aece327e7f84805/twisted/internet/epollreactor.py#L370

Is it possible to actually set this on the reactor in a more sensible 
way so I don't need to patch the twisted codebase. ? Below is basically 
what I am doing.


```
     def doPoll(self, timeout):
         """
         Poll the poller for new events.
         """
+       timeout = 0
-       if timeout is None:
-           timeout = -1  # Wait indefinitely.

         try:
```

Cheers

Tim Hughes



From twisted-python at 2xlp.com  Wed Apr 20 16:42:59 2016
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 20 Apr 2016 18:42:59 -0400
Subject: [Twisted-Python] twisted listening on UDP port, why?
In-Reply-To: <67331142-5C53-4144-A270-B3D8D377BAAE@2xlp.com>
References: <71F0C715-C66B-44F8-9D8F-DC9CBBFF1C69@2xlp.com>
 <7EFE592B-A526-4DE3-8C2A-275A0336D439@twistedmatrix.com>
 <57176918.6030609@imperial.ac.uk>
 <CAEeXt4Ms6RUUCEPRkWEio8XwHtoFFigb29C+1X=kWDnEW0e14Q@mail.gmail.com>
 <67331142-5C53-4144-A270-B3D8D377BAAE@2xlp.com>
Message-ID: <9A3F39F0-5A70-4054-AEDF-9489F418D8FD@2xlp.com>


On Apr 20, 2016, at 1:31 PM, Jonathan Vanasco wrote:

> A specific library was keeping the port open.  I'm tracking down how/why right now.

So this was fun <sarcasm> thing to learn...

An undocumented (yay) feature of python appears to be... python binds to a random port on all interfaces (0.0.0.0) once you send UDP data through it.  I assume this is to allow for a response to come back.  

We're using statsd for metrics in our twisted daemon and detect issues post-deployment.

If you haven't used it, it's a node.js daemon from etsy that collects udp data and pipes it into python's graphite/carbon libraries.  Then you get fancy graphics.

    # this does nothing...
    sock = socket.socket(family, socket.SOCK_DGRAM)
    # but this binds to 0.0.0.0
    sock.sendto(data.encode('ascii'), addr)

Sending data to the stats collector on 127.0.0.1:8125 inherently made python bind to 0.0.0.0, and on a port that seems to be in the 40000-60000 range.  
Since a socket to the stats collector is only created once for the process, Python holds that open the entire time.  




From glyph at twistedmatrix.com  Wed Apr 20 19:15:55 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 20 Apr 2016 18:15:55 -0700
Subject: [Twisted-Python] twisted listening on UDP port, why?
In-Reply-To: <9A3F39F0-5A70-4054-AEDF-9489F418D8FD@2xlp.com>
References: <71F0C715-C66B-44F8-9D8F-DC9CBBFF1C69@2xlp.com>
 <7EFE592B-A526-4DE3-8C2A-275A0336D439@twistedmatrix.com>
 <57176918.6030609@imperial.ac.uk>
 <CAEeXt4Ms6RUUCEPRkWEio8XwHtoFFigb29C+1X=kWDnEW0e14Q@mail.gmail.com>
 <67331142-5C53-4144-A270-B3D8D377BAAE@2xlp.com>
 <9A3F39F0-5A70-4054-AEDF-9489F418D8FD@2xlp.com>
Message-ID: <55E1D41C-5CF5-412D-9EC6-94ED64262522@twistedmatrix.com>


> On Apr 20, 2016, at 3:42 PM, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:
> 
> 
> On Apr 20, 2016, at 1:31 PM, Jonathan Vanasco wrote:
> 
>> A specific library was keeping the port open.  I'm tracking down how/why right now.
> 
> So this was fun <sarcasm> thing to learn...
> 
> An undocumented (yay) feature of python appears to be... python binds to a random port on all interfaces (0.0.0.0) once you send UDP data through it.  I assume this is to allow for a response to come back.  

This isn't so much a feature of Python as it is a feature of the BSD sockets API.  Sending traffic through a socket, whether it's TCP or UDP, has to bind a client port.  Given the nature of UDP, binding on all interfaces is the expectation unless you specify.

I didn't have time to test a simple C program before sending this message, but https://github.com/python/cpython/blob/master/Modules/socketmodule.c <https://github.com/python/cpython/blob/master/Modules/socketmodule.c> only calls "bind()" from sock_bind, not from send(), nor does https://github.com/python/cpython/blob/master/Lib/socket.py <https://github.com/python/cpython/blob/master/Lib/socket.py> engage in any such shenanigans.

> We're using statsd for metrics in our twisted daemon and detect issues post-deployment.
> 
> If you haven't used it, it's a node.js daemon from etsy that collects udp data and pipes it into python's graphite/carbon libraries.  Then you get fancy graphics.

There's also a Twisted version :) https://pypi.python.org/pypi/txStatsD <https://pypi.python.org/pypi/txStatsD>

txStatsD contains both server and client, so maybe you want to use that client if you want better control over the UDP port.

>    # this does nothing...
>    sock = socket.socket(family, socket.SOCK_DGRAM)
>    # but this binds to 0.0.0.0
>    sock.sendto(data.encode('ascii'), addr)
> 
> Sending data to the stats collector on 127.0.0.1:8125 inherently made python bind to 0.0.0.0, and on a port that seems to be in the 40000-60000 range.  

That range is the ephemeral client port range <https://en.wikipedia.org/wiki/Ephemeral_port <https://en.wikipedia.org/wiki/Ephemeral_port>> so that's what would be expected of an implicitly-bound socket.

> Since a socket to the stats collector is only created once for the process, Python holds that open the entire time.

If it needs to send UDP traffic, it needs to be able to receive UDP traffic as well.  You can bind it to a more specific interface, but you can't prevent the port from opening to receive traffic.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160420/bdc599e3/attachment.html>

From glyph at twistedmatrix.com  Wed Apr 20 20:57:06 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 20 Apr 2016 19:57:06 -0700
Subject: [Twisted-Python] Cause epollreactor to busyspin
In-Reply-To: <6fc57744dc8398942db654d22d855dac@imap.gmail.com>
References: <6fc57744dc8398942db654d22d855dac@imap.gmail.com>
Message-ID: <910ADBD6-147C-4983-BAF3-BB36B1AA89A0@twistedmatrix.com>


> On Apr 20, 2016, at 10:37, Tim Hughes <thughes at thegoldfish.org> wrote:
> 
> Hi All,
> 
> I have a latency sensitive application that gets affected when it is moved between cores or the system has to wake from idling.

Can you explain "gets affected" in more detail?  If moving between cores is the issue, could you set its CPU affinity?

> I would like to run the thread in as tight a loop as possible and to do this i need to cause epollreactor to busyspin on receiving data.

I am very curious about your application now :)

> I have worked out how to do it by editing the twisted code directly by hard coding the value of `timeout` to be 0 at this location in the code https://github.com/twisted/twisted/blob/f074ba3d5083aa1503abcf194aece327e7f84805/twisted/internet/epollreactor.py#L370

> Is it possible to actually set this on the reactor in a more sensible way so I don't need to patch the twisted codebase. ? Below is basically what I am doing.

You can achieve this with a tiny bit of extra overhead by doing something like this:

def cant_sleep_clown_will_eat_me():
    reactor.callLater(0, cant_sleep_clown_will_eat_me)
cant_sleep_clown_will_eat_me()

Does this actually improve your latency?

-glyph

From thughes at thegoldfish.org  Thu Apr 21 04:30:58 2016
From: thughes at thegoldfish.org (Tim Hughes)
Date: Thu, 21 Apr 2016 11:30:58 +0100
Subject: [Twisted-Python] Cause epollreactor to busyspin
In-Reply-To: <910ADBD6-147C-4983-BAF3-BB36B1AA89A0@twistedmatrix.com>
References: <6fc57744dc8398942db654d22d855dac@imap.gmail.com>
 <910ADBD6-147C-4983-BAF3-BB36B1AA89A0@twistedmatrix.com>
Message-ID: <3e9fdfd7ec98c8a681cdcfd64ab2851e@imap.gmail.com>

On 2016-04-21 03:57, Glyph wrote:
>> On Apr 20, 2016, at 10:37, Tim Hughes <thughes at thegoldfish.org> wrote:
>> 
>> Hi All,
>> 
>> I have a latency sensitive application that gets affected when it is 
>> moved between cores or the system has to wake from idling.
> 
> Can you explain "gets affected" in more detail?  If moving between
> cores is the issue, could you set its CPU affinity?

That is exactly what I would do with a physical machine but 
unfortunately where I need to use it is in china and I only have xen 
virtual machines available. I know this isn't the best situation but 
unfortunately that is all I can get in these locations.
> 
>> I would like to run the thread in as tight a loop as possible and to 
>> do this i need to cause epollreactor to busyspin on receiving data.
> 
> I am very curious about your application now :)

We are using it to test the performance of streaming financial market 
data over different CDN providers to different cities around the world. 
Currently trying to jump through the hoops to be able to opensource it 
and stick it on github. It isn't that exciting, it is basically a 
modified LineReceiver with the delimiter set to \x01 and the messages 
are key=value pairs at a peak rate of approx 130000 pairs per second 
https://en.wikipedia.org/wiki/Financial_Information_eXchange

> 
>> I have worked out how to do it by editing the twisted code directly by 
>> hard coding the value of `timeout` to be 0 at this location in the 
>> code 
>> https://github.com/twisted/twisted/blob/f074ba3d5083aa1503abcf194aece327e7f84805/twisted/internet/epollreactor.py#L370
> 
>> Is it possible to actually set this on the reactor in a more sensible 
>> way so I don't need to patch the twisted codebase. ? Below is 
>> basically what I am doing.
> 
> You can achieve this with a tiny bit of extra overhead by doing
> something like this:
> 
> def cant_sleep_clown_will_eat_me():
>     reactor.callLater(0, cant_sleep_clown_will_eat_me)
> cant_sleep_clown_will_eat_me()

Will give this a go

> 
> Does this actually improve your latency?
> 
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From thughes at thegoldfish.org  Thu Apr 21 11:26:48 2016
From: thughes at thegoldfish.org (Tim Hughes)
Date: Thu, 21 Apr 2016 18:26:48 +0100
Subject: [Twisted-Python] Cause epollreactor to busyspin
In-Reply-To: <3e9fdfd7ec98c8a681cdcfd64ab2851e@imap.gmail.com>
References: <6fc57744dc8398942db654d22d855dac@imap.gmail.com>
 <910ADBD6-147C-4983-BAF3-BB36B1AA89A0@twistedmatrix.com>
 <3e9fdfd7ec98c8a681cdcfd64ab2851e@imap.gmail.com>
Message-ID: <da5b1befd1d6ee261fa8993761a4edbb@imap.gmail.com>

On 2016-04-21 11:30, Tim Hughes wrote:
> On 2016-04-21 03:57, Glyph wrote:
>>> On Apr 20, 2016, at 10:37, Tim Hughes <thughes at thegoldfish.org> 
>>> wrote:
>>> 
>>> Hi All,
>>> 
>>> I have a latency sensitive application that gets affected when it is 
>>> moved between cores or the system has to wake from idling.
>> 
>> Can you explain "gets affected" in more detail?  If moving between
>> cores is the issue, could you set its CPU affinity?
> 
> That is exactly what I would do with a physical machine but
> unfortunately where I need to use it is in china and I only have xen
> virtual machines available. I know this isn't the best situation but
> unfortunately that is all I can get in these locations.
>> 
>>> I would like to run the thread in as tight a loop as possible and to 
>>> do this i need to cause epollreactor to busyspin on receiving data.
>> 
>> I am very curious about your application now :)
> 
> We are using it to test the performance of streaming financial market
> data over different CDN providers to different cities around the
> world. Currently trying to jump through the hoops to be able to
> opensource it and stick it on github. It isn't that exciting, it is
> basically a modified LineReceiver with the delimiter set to \x01 and
> the messages are key=value pairs at a peak rate of approx 130000 pairs
> per second
> https://en.wikipedia.org/wiki/Financial_Information_eXchange
> 

Hoops have been jumped and it is on github at 
https://github.com/LMAX-Exchange/txfixclient


>> 
>>> I have worked out how to do it by editing the twisted code directly 
>>> by hard coding the value of `timeout` to be 0 at this location in the 
>>> code 
>>> https://github.com/twisted/twisted/blob/f074ba3d5083aa1503abcf194aece327e7f84805/twisted/internet/epollreactor.py#L370
>> 
>>> Is it possible to actually set this on the reactor in a more sensible 
>>> way so I don't need to patch the twisted codebase. ? Below is 
>>> basically what I am doing.
>> 
>> You can achieve this with a tiny bit of extra overhead by doing
>> something like this:
>> 
>> def cant_sleep_clown_will_eat_me():
>>     reactor.callLater(0, cant_sleep_clown_will_eat_me)
>> cant_sleep_clown_will_eat_me()
> 
> Will give this a go
> 
>> 
>> Does this actually improve your latency?
>> 
>> -glyph
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From twisted-python at 2xlp.com  Fri Apr 22 20:36:41 2016
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Fri, 22 Apr 2016 22:36:41 -0400
Subject: [Twisted-Python] twisted listening on UDP port, why?
In-Reply-To: <55E1D41C-5CF5-412D-9EC6-94ED64262522@twistedmatrix.com>
References: <71F0C715-C66B-44F8-9D8F-DC9CBBFF1C69@2xlp.com>
 <7EFE592B-A526-4DE3-8C2A-275A0336D439@twistedmatrix.com>
 <57176918.6030609@imperial.ac.uk>
 <CAEeXt4Ms6RUUCEPRkWEio8XwHtoFFigb29C+1X=kWDnEW0e14Q@mail.gmail.com>
 <67331142-5C53-4144-A270-B3D8D377BAAE@2xlp.com>
 <9A3F39F0-5A70-4054-AEDF-9489F418D8FD@2xlp.com>
 <55E1D41C-5CF5-412D-9EC6-94ED64262522@twistedmatrix.com>
Message-ID: <EB17227D-5D61-4743-8E9D-D477414CC312@2xlp.com>

Thanks for all this.  

A few quick notes:

On Apr 20, 2016, at 9:15 PM, Glyph wrote:

> This isn't so much a feature of Python as it is a feature of the BSD sockets API.  Sending traffic through a socket, whether it's TCP or UDP, has to bind a client port.  Given the nature of UDP, binding on all interfaces is the expectation unless you specify.
> 
> I didn't have time to test a simple C program before sending this message, but https://github.com/python/cpython/blob/master/Modules/socketmodule.c only calls "bind()" from sock_bind, not from send(), nor does https://github.com/python/cpython/blob/master/Lib/socket.py engage in any such shenanigans.

The 'feature' of Python is a few things:

From what I could tell, the actual communication and binding happens somewhere in the c module.  

if you just construct socket:

    sock = socket.socket(family, socket.SOCK_DGRAM)

it will defer the bind on 0.0.0.0 until the first time data is emitted:

    sock.sendto(data.encode('ascii'), addr)

That's one of the things that drove me crazy (and the reason why I'm posting more than a simple "thank you", in case someone else gets stumped in the future).  
There's no call to anything with a "bind" involved in any python code.  it just happens behind the scenes.

> There's also a Twisted version :) https://pypi.python.org/pypi/txStatsD
> 
> txStatsD contains both server and client, so maybe you want to use that client if you want better control over the UDP port.

yeah, I'm gonna do that ;)

> That range is the ephemeral client port range <https://en.wikipedia.org/wiki/Ephemeral_port> so that's what would be expected of an implicitly-bound socket.

THANK YOU.  I could not remember that name.  I knew about the ephemeral port range, but have not seen that term in 10+ years.  THANK YOU!!!!


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160422/9c424490/attachment.html>

From p.mayers at imperial.ac.uk  Sat Apr 23 02:52:35 2016
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat, 23 Apr 2016 09:52:35 +0100
Subject: [Twisted-Python] twisted listening on UDP port, why?
In-Reply-To: <EB17227D-5D61-4743-8E9D-D477414CC312@2xlp.com>
References: <71F0C715-C66B-44F8-9D8F-DC9CBBFF1C69@2xlp.com>
 <7EFE592B-A526-4DE3-8C2A-275A0336D439@twistedmatrix.com>
 <57176918.6030609@imperial.ac.uk>
 <CAEeXt4Ms6RUUCEPRkWEio8XwHtoFFigb29C+1X=kWDnEW0e14Q@mail.gmail.com>
 <67331142-5C53-4144-A270-B3D8D377BAAE@2xlp.com>
 <9A3F39F0-5A70-4054-AEDF-9489F418D8FD@2xlp.com>
 <55E1D41C-5CF5-412D-9EC6-94ED64262522@twistedmatrix.com>
 <EB17227D-5D61-4743-8E9D-D477414CC312@2xlp.com>
Message-ID: <571B37D3.6060702@imperial.ac.uk>

On 23/04/16 03:36, Jonathan Vanasco wrote:
> Thanks for all this.
>
> A few quick notes:
>
> On Apr 20, 2016, at 9:15 PM, Glyph wrote:
>
>> This isn't so much a feature of Python as it is a feature of the BSD
>> sockets API.  Sending traffic through a socket, whether it's TCP or
>> UDP, has to bind a client port.  Given the nature of UDP, binding on
>> all interfaces is the expectation unless you specify.
>>
>> I didn't have time to test a simple C program before sending this
>> message, but
>> https://github.com/python/cpython/blob/master/Modules/socketmodule.c only
>> calls "bind()" from sock_bind, not from send(), nor does
>> https://github.com/python/cpython/blob/master/Lib/socket.py engage in
>> any such shenanigans.
>
> The 'feature' of Python is a few things:
>
>  From what I could tell, the actual communication and binding happens
> somewhere in the c module.
>

Not so. It's down inside the kernel. All applications using the socket 
API in this way will display this behaviour, regardless of language.

Seriously, try it and see:

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/ip.h>
#include <unistd.h>
#include <stdio.h>

int main(int argc, char* argv[]) {
	int s,r;
	struct sockaddr_in dst;
	dst.sin_family = AF_INET;
	dst.sin_port = htons(37);
	dst.sin_addr.s_addr = INADDR_LOOPBACK;

	s = socket(AF_INET, SOCK_DGRAM, 0);
	printf("socket created\n");
	sleep(30);
	sendto(s, "foo", 3, 0, &dst, sizeof(dst));
	printf("socket used\n");
	sleep(30);
	return 0;
}

Compile & run the program and quickly lsof the process, you'll see:

test    16258 pjm3    3u  sock    0,8      0t0 87111053 protocol: UDP

...wait until it has printed that it has used the socket, repeat and 
you'll see:

test    16258 pjm3    3u  IPv4 87111053      0t0     UDP *:51669

As glyph says, this is an inherent feature of the socket API. When you 
create a socket, it is unbound because you might be about to call bind() 
yourself.

If you then use it without binding it, the kernel has to allocate a 
source port, and in turn an interface, and the only sensible choice 
absent any instructions from userland is INADDR_ANY.

This is definitely not Python doing this.


From rutt.4 at osu.edu  Sun Apr 24 11:37:08 2016
From: rutt.4 at osu.edu (Benjamin Rutt)
Date: Sun, 24 Apr 2016 13:37:08 -0400
Subject: [Twisted-Python] waiting on any deferred in a list?
Message-ID: <CAMWA1_p7SVZtXS3ZdVt87QaHTwo9KVO+S+FpGSkX4-eeiUFmyQ@mail.gmail.com>

Hi all,

I've been using a pattern for quite some time to collect a bunch o'
deferreds in a list and then yield on them one at a time.  Here is some
untested pseudocode:

---
@defer.inlineCallbacks
def foo( ls ):
    defs = []

    # get all the deferreds going
    for item in ls:
        d = some_deferred_returning_function( item )
        defs.append( ( item, d ) ) # associate item with deferred

    # process results not as they come in but in the original order
    for ( item, d ) in defs:
        result = yield d
        print 'The result on item', item, 'is', result
---

In this way, I can get good concurrency (by spinning up all deferreds at
once) but also I can iterate on the results using a straightforward
traversal of the list data structure and yield.  This is working great for
me.  But on occasion I'd prefer that I can access the results not in the
order that I originally got, but rather in the order of completion of the
deferreds, so the faster ones come in first, and the slower ones don't hold
up faster ones.  The usual case when I'd want this is when I have "slower"
deferreds near the front, and "faster" deferreds near the back.  I can't
help but think that there's some async data structure out there for me that
can solve this.  I've used DeferredList before, and I can't see that it
does what I want:  it gives you a choice between getting all results only
when they are all done (default behavior), or getting the first one that's
ready (fireOnOneCallback=True).  I want all results, but I want the
processing of the results to unfold as the results come in.

Thanks for any ideas.
-- 
Benjamin Rutt
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160424/f718fb58/attachment.html>

From meejah at meejah.ca  Sun Apr 24 12:06:46 2016
From: meejah at meejah.ca (meejah)
Date: Sun, 24 Apr 2016 22:06:46 +0400
Subject: [Twisted-Python] waiting on any deferred in a list?
In-Reply-To: <CAMWA1_p7SVZtXS3ZdVt87QaHTwo9KVO+S+FpGSkX4-eeiUFmyQ@mail.gmail.com>
 (Benjamin Rutt's message of "Sun, 24 Apr 2016 13:37:08 -0400")
References: <CAMWA1_p7SVZtXS3ZdVt87QaHTwo9KVO+S+FpGSkX4-eeiUFmyQ@mail.gmail.com>
Message-ID: <86fuuazxs9.fsf@atlantis.meejah.ca>


I think you'll want an idiom kind of like this (also untested ;):

    @inlineCallbacks
    def foo(ls):
        defs = []

        def process_an_item(result, item):
            print("Item '{}' done: {}".format(item, result))

        for item in ls:
            d = something_async(item)
            d.addCallback(process_an_item, item)
            defs.append(d)
        yield DeferredList(defs)

Error-handling left as an exercise for the reader :)

-- 
meejah


From wasilak at gmail.com  Sun Apr 24 13:21:41 2016
From: wasilak at gmail.com (Maciej Wasilak)
Date: Sun, 24 Apr 2016 21:21:41 +0200
Subject: [Twisted-Python] IPv6 comparison handling
Message-ID: <CAFUtXGzx7UOg98Nj4s+ZWH1bfdBxUOmjh7uAR8RSv=o77C=Ldg@mail.gmail.com>

Hello,

In my UDP Twisted based library there is a problem with IPv6 addresses
representation. Addresses are compared as simple strings, and it
sometimes causes mismatches:

"fe80::aaaa:bbff:fecc:dddd" should be equal to
"fe80:0000:0000:0000:aaaa:bbff:fecc:dddd"

I've noticed that Python 3 has nice new module "ipaddress" exactly for
this kind of problems, and it has been backported to Python 2.7.
Before I add it as a new dependency I wanted to ask if maybe Twisted
has some other suggested solution for this problem?

Best Regards
Maciej Wasilak


From glyph at twistedmatrix.com  Sun Apr 24 20:39:01 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 24 Apr 2016 19:39:01 -0700
Subject: [Twisted-Python] IPv6 comparison handling
In-Reply-To: <CAFUtXGzx7UOg98Nj4s+ZWH1bfdBxUOmjh7uAR8RSv=o77C=Ldg@mail.gmail.com>
References: <CAFUtXGzx7UOg98Nj4s+ZWH1bfdBxUOmjh7uAR8RSv=o77C=Ldg@mail.gmail.com>
Message-ID: <1490723A-2F5E-43CE-AA43-52CB200BD98F@twistedmatrix.com>


> On Apr 24, 2016, at 12:21 PM, Maciej Wasilak <wasilak at gmail.com> wrote:
> 
> Hello,
> 
> In my UDP Twisted based library there is a problem with IPv6 addresses
> representation. Addresses are compared as simple strings, and it
> sometimes causes mismatches:
> 
> "fe80::aaaa:bbff:fecc:dddd" should be equal to
> "fe80:0000:0000:0000:aaaa:bbff:fecc:dddd"
> 
> I've noticed that Python 3 has nice new module "ipaddress" exactly for
> this kind of problems, and it has been backported to Python 2.7.
> Before I add it as a new dependency I wanted to ask if maybe Twisted
> has some other suggested solution for this problem?

You should probably use ipaddress.  Twisted's facilities in this area are somewhat primitive, and should be improved; particularly, you _should_ be able to do:

a = IPv6Address("UDP", "fe80::", 0)
b = IPv6Address("UDP", "fe80::00:00", 0)
a == b

but right now that doesn't work.

A patch that fixes it would be much appreciated though!

-glyph



From twisted-python at 2xlp.com  Mon Apr 25 10:17:29 2016
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Mon, 25 Apr 2016 12:17:29 -0400
Subject: [Twisted-Python] twisted listening on UDP port, why?
In-Reply-To: <571B37D3.6060702@imperial.ac.uk>
References: <71F0C715-C66B-44F8-9D8F-DC9CBBFF1C69@2xlp.com>
 <7EFE592B-A526-4DE3-8C2A-275A0336D439@twistedmatrix.com>
 <57176918.6030609@imperial.ac.uk>
 <CAEeXt4Ms6RUUCEPRkWEio8XwHtoFFigb29C+1X=kWDnEW0e14Q@mail.gmail.com>
 <67331142-5C53-4144-A270-B3D8D377BAAE@2xlp.com>
 <9A3F39F0-5A70-4054-AEDF-9489F418D8FD@2xlp.com>
 <55E1D41C-5CF5-412D-9EC6-94ED64262522@twistedmatrix.com>
 <EB17227D-5D61-4743-8E9D-D477414CC312@2xlp.com>
 <571B37D3.6060702@imperial.ac.uk>
Message-ID: <55CA91BC-AEAB-4537-8498-14E6DA43B305@2xlp.com>


On Apr 23, 2016, at 4:52 AM, Phil Mayers wrote:

> Not so. It's down inside the kernel. All applications using the socket API in this way will display this behaviour, regardless of language.
> ....
> 
> As glyph says, this is an inherent feature of the socket API. When you create a socket, it is unbound because you might be about to call bind() yourself.
> 
> If you then use it without binding it, the kernel has to allocate a source port, and in turn an interface, and the only sensible choice absent any instructions from userland is INADDR_ANY.
> 
> This is definitely not Python doing this.

Thanks for the correction!



From hawkowl at atleastfornow.net  Wed Apr 27 05:13:34 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Wed, 27 Apr 2016 19:13:34 +0800
Subject: [Twisted-Python] Changes to Twisted's Trac (GitHub Authentication)
Message-ID: <9C021F7C-297A-4D8D-8C47-32B66DC57FC1@atleastfornow.net>

Hi everyone,

If you've ever had your password eaten by our Trac instance, had your comment rejected by spambayes, or seen the amount of effort it takes removing random nulls from our htpasswd files, rejoice! With https://github.com/twisted-infra/braid/pull/192 , we are moving our Trac instance to log in using GitHub OAuth. This should mean we solve the issue of keeping passwords (making you and us more secure), being able to turn off the spam filter (as we don't have anonymous ticket submittal, and github is better at catching spammers than we are), and hopefully cause less ongoing issues with passwords suddenly not working.

What this means for you is that your username and password will no longer work for logging into our Trac, you will need to authorise your GitHub login to access it. This means that you may have another username, please contact me privately and I will see what I can do about migrating any ticket histories over, if you feel like it is needed.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160427/8ddef2a8/attachment.pgp>

From hawkowl at atleastfornow.net  Wed Apr 27 05:45:52 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Wed, 27 Apr 2016 19:45:52 +0800
Subject: [Twisted-Python] [MIGRATION COMPLETE] Changes to Twisted's Trac
	(GitHub Authentication)
In-Reply-To: <9C021F7C-297A-4D8D-8C47-32B66DC57FC1@atleastfornow.net>
References: <9C021F7C-297A-4D8D-8C47-32B66DC57FC1@atleastfornow.net>
Message-ID: <4046BCB1-1EDA-44F7-A17B-7FEB0AB8BA33@atleastfornow.net>

I would like to note that this migration has now finished, and you can now log in via GitHub. Legacy logins have been disabled, and previous admin accounts (except for a current handful) have been revoked in the name of minimising our security surface; if you once had access to our Trac and would like to still use it, please let me know what your GitHub user account is, and I can set those permissions back up.

- Amber

> On 27 Apr 2016, at 19:13, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> Hi everyone,
> 
> If you've ever had your password eaten by our Trac instance, had your comment rejected by spambayes, or seen the amount of effort it takes removing random nulls from our htpasswd files, rejoice! With https://github.com/twisted-infra/braid/pull/192 , we are moving our Trac instance to log in using GitHub OAuth. This should mean we solve the issue of keeping passwords (making you and us more secure), being able to turn off the spam filter (as we don't have anonymous ticket submittal, and github is better at catching spammers than we are), and hopefully cause less ongoing issues with passwords suddenly not working.
> 
> What this means for you is that your username and password will no longer work for logging into our Trac, you will need to authorise your GitHub login to access it. This means that you may have another username, please contact me privately and I will see what I can do about migrating any ticket histories over, if you feel like it is needed.
> 
> - Amber
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160427/b3ffcbcf/attachment.pgp>

From glyph at twistedmatrix.com  Wed Apr 27 11:54:20 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 27 Apr 2016 10:54:20 -0700
Subject: [Twisted-Python] [MIGRATION COMPLETE] Changes to Twisted's Trac
	(GitHub Authentication)
In-Reply-To: <4046BCB1-1EDA-44F7-A17B-7FEB0AB8BA33@atleastfornow.net>
References: <9C021F7C-297A-4D8D-8C47-32B66DC57FC1@atleastfornow.net>
 <4046BCB1-1EDA-44F7-A17B-7FEB0AB8BA33@atleastfornow.net>
Message-ID: <F5CE77AA-3475-47F2-BCD6-F6BA35314D0C@twistedmatrix.com>


> On Apr 27, 2016, at 4:45 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> I would like to note that this migration has now finished, and you can now log in via GitHub. Legacy logins have been disabled, and previous admin accounts (except for a current handful) have been revoked in the name of minimising our security surface; if you once had access to our Trac and would like to still use it, please let me know what your GitHub user account is, and I can set those permissions back up.

Amazing! :-D.

I feel a disturbance in the force, as if a million spammers cried out, and were suddenly silenced :-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160427/df5fd53c/attachment.html>

From hs at ox.cx  Wed Apr 27 23:37:05 2016
From: hs at ox.cx (Hynek Schlawack)
Date: Thu, 28 Apr 2016 07:37:05 +0200
Subject: [Twisted-Python] [MIGRATION COMPLETE] Changes to Twisted's Trac
	(GitHub Authentication)
In-Reply-To: <F5CE77AA-3475-47F2-BCD6-F6BA35314D0C@twistedmatrix.com>
References: <9C021F7C-297A-4D8D-8C47-32B66DC57FC1@atleastfornow.net>
 <4046BCB1-1EDA-44F7-A17B-7FEB0AB8BA33@atleastfornow.net>
 <F5CE77AA-3475-47F2-BCD6-F6BA35314D0C@twistedmatrix.com>
Message-ID: <BA88E01E-8B01-40D7-9B4C-47DFEBF494CE@ox.cx>

>> 
>> I would like to note that this migration has now finished, and you can now log in via GitHub. Legacy logins have been disabled, and previous admin accounts (except for a current handful) have been revoked in the name of minimising our security surface; if you once had access to our Trac and would like to still use it, please let me know what your GitHub user account is, and I can set those permissions back up.
> 
> Amazing! :-D.
> 
> I feel a disturbance in the force, as if a million spammers cried out, and were suddenly silenced :-).

And even more importantly: the sigh of relief of hopefully million contributors that aren?t kept out but spam filters and broken auth databases anymore!

Great work Hawkie!

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160428/b1f9a255/attachment.html>

From glyph at twistedmatrix.com  Wed Apr 27 23:42:18 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 27 Apr 2016 22:42:18 -0700
Subject: [Twisted-Python] [MIGRATION COMPLETE] Changes to Twisted's Trac
	(GitHub Authentication)
In-Reply-To: <BA88E01E-8B01-40D7-9B4C-47DFEBF494CE@ox.cx>
References: <9C021F7C-297A-4D8D-8C47-32B66DC57FC1@atleastfornow.net>
 <4046BCB1-1EDA-44F7-A17B-7FEB0AB8BA33@atleastfornow.net>
 <F5CE77AA-3475-47F2-BCD6-F6BA35314D0C@twistedmatrix.com>
 <BA88E01E-8B01-40D7-9B4C-47DFEBF494CE@ox.cx>
Message-ID: <9AED86DF-145E-4D5C-B2EE-EF8CBB56B6EE@twistedmatrix.com>


> On Apr 27, 2016, at 10:37 PM, Hynek Schlawack <hs at ox.cx> wrote:
> 
> Great work Hawkie!

Next step: DEATH TO SUBVERSION.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160427/0f61e19f/attachment.html>

From itamar at itamarst.org  Thu Apr 28 05:38:55 2016
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 28 Apr 2016 07:38:55 -0400
Subject: [Twisted-Python] [MIGRATION COMPLETE] Changes to Twisted's Trac
 (GitHub Authentication)
In-Reply-To: <4046BCB1-1EDA-44F7-A17B-7FEB0AB8BA33@atleastfornow.net>
References: <9C021F7C-297A-4D8D-8C47-32B66DC57FC1@atleastfornow.net>
 <4046BCB1-1EDA-44F7-A17B-7FEB0AB8BA33@atleastfornow.net>
Message-ID: <5721F64F.5090601@itamarst.org>

On 04/27/2016 07:45 AM, Amber "Hawkie" Brown wrote:
> I would like to note that this migration has now finished, and you can now log in via GitHub. Legacy logins have been disabled, and previous admin accounts (except for a current handful) have been revoked in the name of minimising our security surface; if you once had access to our Trac and would like to still use it, please let me know what your GitHub user account is, and I can set those permissions back up.
>
?


From techtonik at gmail.com  Fri Apr  1 18:57:30 2016
From: techtonik at gmail.com (anatoly techtonik)
Date: Sat, 2 Apr 2016 03:57:30 +0300
Subject: [Twisted-Python] upcoming changes to twistedmatrix.com mail
	infrastructure
In-Reply-To: <6CC856DE-0A9F-44FC-A18B-63763D1DCFC0@twistedmatrix.com>
References: <D4ED8980-8B6B-48CD-AE83-8B00288A7481@twistedmatrix.com>
 <6CC856DE-0A9F-44FC-A18B-63763D1DCFC0@twistedmatrix.com>
Message-ID: <CAPkN8xL4K-xJz1D7gRySVPWAr_UEf4QKW3beCChoDGqhpjta+A@mail.gmail.com>

I prefer web-based access more than a list, so a thing like
http://try.discourse.org/ is more appropriate for me in terms
of usability.  Especially those shiny "with" login buttons.

On Fri, Apr 1, 2016 at 5:04 AM, Glyph <glyph at twistedmatrix.com> wrote:
>
> On Mar 16, 2016, at 11:52 AM, Glyph <glyph at twistedmatrix.com> wrote:
>
> Over the last few months, twistedmatrix.com's mailman installation has been
> used increasingly frequently to execute denial-of-service attacks against
> people's mailboxes.  This is accomplished by sending huge numbers of
> subscription requests to our website, which in turn sends huge numbers of
> confirmation emails to their inbox.  Based on some information that some
> targeted users have sent me, I now believe that this is to cause those
> users' mail quotas to be exceeded so that password reset or login
> notification emails won't reach them.
>
>
> I've taken the first few steps to migrating us over to Mailgun, but just as
> a minor status update: web-based subscription is now disabled.  If any
> generous souls would like to help out and update whatever wiki pages link to
> the mailman listinfo pages to say 'please send subscription requests to
> twisted-python-owner@ or twisted-web-owner@ instead' that would be great
> :-).  Those email addresses (and hopefully all the others, too) will keep
> working post-migration.
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
anatoly t.



From chris.norman2 at googlemail.com  Sat Apr  2 03:35:01 2016
From: chris.norman2 at googlemail.com (Chris Norman)
Date: Sat, 2 Apr 2016 10:35:01 +0100
Subject: [Twisted-Python] Problem with Deferreds
Message-ID: <56FF9245.2080208@googlemail.com>

Hi all,
I recently got over myself and forced myself to read about Deferreds 
rather than using threading opperations.

I've used them successfully in a couple of places, but this one has me 
flummoxed:

Here's the code for the Deferred and it's sub-commands:

  def do_command(self, cmd, **kwargs):
   """Process a command in true Deferred style."""
   if cmd.permissions(self.connection):
    cmd(self.connection, **kwargs)
   else:
    logger.warning('Blocked from running command %s which is secured 
with %s.', cmd.__name__, cmd.permissions.__name__)
    raise CommandError('You have insufficient privileges to perform this 
action. The staff have been notified.')

  def handle_error(self, err):
   """Handle an error from do_command."""
   if isinstance(err, CommandError):
    return self.send_error(e.message, disconnect = e.disconnect)
   else:
    self.log(e, level = 'exception')
    self.send_error('Sorry, but a problem with the server means your 
command was not executed. The staff have been notified.')

  def lineReceived(self, line):
   """Parse an incoming command."""
   global lines
   lines += 1 # Increment the line count.
   data = line.decode(settings.ENCODING)
   try:
    command, kwargs = json.loads(data)
    if not isinstance(command, string_types) or not isinstance(kwargs, 
dict):
     raise TypeError('Expecting [str, dict]. Got [%s, %s] instead.' % 
(type(command), type(kwargs)))
   except (TypeError, ValueError) as e:
    self.log('Invalid command string: %s', data, level = 'error')
    self.log(e, level = 'exception')
    return self.send_error('Invalid command.', disconnect = True)
   cmd = commands.commands.get(command, None)
   if cmd  is None:
    self.log('Unrecognised command: %s.', command, level = 'warning')
   elif self.connection.player or not cmd.login_required:
    d = defer.Deferred()
    print('Adding callback.')
    d.addCallback(self.do_command, **kwargs)
    print('Adding errback.')
    d.addErrback(self.handle_error)
    print('Calling callback.')
    d.callback(cmd)
    print('Called.') # Never gets this far.
    return d
   else:
    return self.send_error('Not authenticated.', disconnect = True)

Here's the traceback I get when the callback gets called:

Unhandled Error
Traceback (most recent call last):
   File "server/functions.py", line 88, in server_start
     reactor.run()
   File 
"/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/base.py", 
line 1194, in run
     self.mainLoop()
   File 
"/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/base.py", 
line 1206, in mainLoop
     self.doIteration(t)
   File 
"/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/epollreactor.py", 
line 396, in doPoll
     log.callWithLogger(selectable, _drdw, selectable, fd, event)
--- <exception caught here> ---
   File 
"/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/log.py", 
line 101, in callWithLogger
     return callWithContext({"system": lp}, func, *args, **kw)
   File 
"/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/log.py", 
line 84, in callWithContext
     return context.call({ILogContext: newCtx}, func, *args, **kw)
   File 
"/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/context.py", 
line 118, in callWithContext
     return self.currentContext().callWithContext(ctx, func, *args, **kw)
   File 
"/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/context.py", 
line 81, in callWithContext
     return func(*args,**kw)
   File 
"/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/posixbase.py", 
line 610, in _doReadOrWrite
     self._disconnectSelectable(selectable, why, inRead)
   File 
"/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/posixbase.py", 
line 258, in _disconnectSelectable
     selectable.connectionLost(failure.Failure(why))
   File 
"/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/failure.py", 
line 232, in __init__
     tb = self.value.__traceback__
builtins.AttributeError: 'Deferred' object has no attribute '__traceback__'

Anyone have any ideas?

Cheers,

Chris



From kevinjacobconway at gmail.com  Sat Apr  2 08:00:12 2016
From: kevinjacobconway at gmail.com (Kevin Conway)
Date: Sat, 02 Apr 2016 14:00:12 +0000
Subject: [Twisted-Python] Problem with Deferreds
In-Reply-To: <56FF9245.2080208@googlemail.com>
References: <56FF9245.2080208@googlemail.com>
Message-ID: <CAKF=+dhozabFY7ZbtM+KK2t=L+AGJz9jDk3y-BR=wQ8yQiPq6A@mail.gmail.com>

Hi Chris,

tl;dr: Returning a value from 'dataReceived', or any of its extensions such
as 'lineReceived' in the 'LineReceiver' Protocol subclass, triggers a
disconnect and uses the returned value as the 'reason'. A 'reason' must be
an Exception or t.p.Failure object as other values will trigger this error.

Are you quite certain that your last line is not getting printed? I'm not
sure exactly where this feature is documented, but returning any non-None
value from a Protocol's 'dataReceived' method can result in this behaviour.
The t.protocols.basic.LineReceiver calls 'lineReceived' from 'dataReceived'
and returns any value it gets from your implementation. The value returned
from 'dataReceived' is passed along to the transport's 'doRead' which,
again, returns it to the portion of the reactor handling selectables. The
reactor assumes that anything returned from a transport during a read or
write operation is a bad thing and disconnects the transport. During the
disconnect process the reactor is generating a t.p.failure.Failure object
and passing in your returned value as the 'why' which is expected to be an
Exception or Failure and not a Deferred. Try returning None instead of your
Deferred. That should resolve this particular issue.

On Sat, Apr 2, 2016 at 4:39 AM Chris Norman <chris.norman2 at googlemail.com>
wrote:

> Hi all,
> I recently got over myself and forced myself to read about Deferreds
> rather than using threading opperations.
>
> I've used them successfully in a couple of places, but this one has me
> flummoxed:
>
> Here's the code for the Deferred and it's sub-commands:
>
>   def do_command(self, cmd, **kwargs):
>    """Process a command in true Deferred style."""
>    if cmd.permissions(self.connection):
>     cmd(self.connection, **kwargs)
>    else:
>     logger.warning('Blocked from running command %s which is secured
> with %s.', cmd.__name__, cmd.permissions.__name__)
>     raise CommandError('You have insufficient privileges to perform this
> action. The staff have been notified.')
>
>   def handle_error(self, err):
>    """Handle an error from do_command."""
>    if isinstance(err, CommandError):
>     return self.send_error(e.message, disconnect = e.disconnect)
>    else:
>     self.log(e, level = 'exception')
>     self.send_error('Sorry, but a problem with the server means your
> command was not executed. The staff have been notified.')
>
>   def lineReceived(self, line):
>    """Parse an incoming command."""
>    global lines
>    lines += 1 # Increment the line count.
>    data = line.decode(settings.ENCODING)
>    try:
>     command, kwargs = json.loads(data)
>     if not isinstance(command, string_types) or not isinstance(kwargs,
> dict):
>      raise TypeError('Expecting [str, dict]. Got [%s, %s] instead.' %
> (type(command), type(kwargs)))
>    except (TypeError, ValueError) as e:
>     self.log('Invalid command string: %s', data, level = 'error')
>     self.log(e, level = 'exception')
>     return self.send_error('Invalid command.', disconnect = True)
>    cmd = commands.commands.get(command, None)
>    if cmd  is None:
>     self.log('Unrecognised command: %s.', command, level = 'warning')
>    elif self.connection.player or not cmd.login_required:
>     d = defer.Deferred()
>     print('Adding callback.')
>     d.addCallback(self.do_command, **kwargs)
>     print('Adding errback.')
>     d.addErrback(self.handle_error)
>     print('Calling callback.')
>     d.callback(cmd)
>     print('Called.') # Never gets this far.
>     return d
>    else:
>     return self.send_error('Not authenticated.', disconnect = True)
>
> Here's the traceback I get when the callback gets called:
>
> Unhandled Error
> Traceback (most recent call last):
>    File "server/functions.py", line 88, in server_start
>      reactor.run()
>    File
>
> "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/base.py",
> line 1194, in run
>      self.mainLoop()
>    File
>
> "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/base.py",
> line 1206, in mainLoop
>      self.doIteration(t)
>    File
>
> "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/epollreactor.py",
> line 396, in doPoll
>      log.callWithLogger(selectable, _drdw, selectable, fd, event)
> --- <exception caught here> ---
>    File
>
> "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/log.py",
> line 101, in callWithLogger
>      return callWithContext({"system": lp}, func, *args, **kw)
>    File
>
> "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/log.py",
> line 84, in callWithContext
>      return context.call({ILogContext: newCtx}, func, *args, **kw)
>    File
>
> "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/context.py",
> line 118, in callWithContext
>      return self.currentContext().callWithContext(ctx, func, *args, **kw)
>    File
>
> "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/context.py",
> line 81, in callWithContext
>      return func(*args,**kw)
>    File
>
> "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/posixbase.py",
> line 610, in _doReadOrWrite
>      self._disconnectSelectable(selectable, why, inRead)
>    File
>
> "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/posixbase.py",
> line 258, in _disconnectSelectable
>      selectable.connectionLost(failure.Failure(why))
>    File
>
> "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/failure.py",
> line 232, in __init__
>      tb = self.value.__traceback__
> builtins.AttributeError: 'Deferred' object has no attribute '__traceback__'
>
> Anyone have any ideas?
>
> Cheers,
>
> Chris
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160402/8e939840/attachment-0002.html>

From chris.norman2 at googlemail.com  Sat Apr  2 08:22:33 2016
From: chris.norman2 at googlemail.com (Chris Norman)
Date: Sat, 2 Apr 2016 15:22:33 +0100
Subject: [Twisted-Python] Problem with Deferreds
In-Reply-To: <CAKF=+dhozabFY7ZbtM+KK2t=L+AGJz9jDk3y-BR=wQ8yQiPq6A@mail.gmail.com>
References: <56FF9245.2080208@googlemail.com>
 <CAKF=+dhozabFY7ZbtM+KK2t=L+AGJz9jDk3y-BR=wQ8yQiPq6A@mail.gmail.com>
Message-ID: <56FFD5A9.4030502@googlemail.com>

Hi,
Yes, that sorted the problem out no worries.

Thank you so much.



On 02/04/2016 15:00, Kevin Conway wrote:
> Hi Chris,
>
> tl;dr: Returning a value from 'dataReceived', or any of its extensions 
> such as 'lineReceived' in the 'LineReceiver' Protocol subclass, 
> triggers a disconnect and uses the returned value as the 'reason'. A 
> 'reason' must be an Exception or t.p.Failure object as other values 
> will trigger this error.
>
> Are you quite certain that your last line is not getting printed? I'm 
> not sure exactly where this feature is documented, but returning any 
> non-None value from a Protocol's 'dataReceived' method can result in 
> this behaviour. The t.protocols.basic.LineReceiver calls 
> 'lineReceived' from 'dataReceived' and returns any value it gets from 
> your implementation. The value returned from 'dataReceived' is passed 
> along to the transport's 'doRead' which, again, returns it to the 
> portion of the reactor handling selectables. The reactor assumes that 
> anything returned from a transport during a read or write operation is 
> a bad thing and disconnects the transport. During the disconnect 
> process the reactor is generating a t.p.failure.Failure object and 
> passing in your returned value as the 'why' which is expected to be an 
> Exception or Failure and not a Deferred. Try returning None instead of 
> your Deferred. That should resolve this particular issue.
>
> On Sat, Apr 2, 2016 at 4:39 AM Chris Norman 
> <chris.norman2 at googlemail.com <mailto:chris.norman2 at googlemail.com>> 
> wrote:
>
>     Hi all,
>     I recently got over myself and forced myself to read about Deferreds
>     rather than using threading opperations.
>
>     I've used them successfully in a couple of places, but this one has me
>     flummoxed:
>
>     Here's the code for the Deferred and it's sub-commands:
>
>       def do_command(self, cmd, **kwargs):
>        """Process a command in true Deferred style."""
>        if cmd.permissions(self.connection):
>         cmd(self.connection, **kwargs)
>        else:
>         logger.warning('Blocked from running command %s which is secured
>     with %s.', cmd.__name__, cmd.permissions.__name__)
>         raise CommandError('You have insufficient privileges to
>     perform this
>     action. The staff have been notified.')
>
>       def handle_error(self, err):
>        """Handle an error from do_command."""
>        if isinstance(err, CommandError):
>         return self.send_error(e.message, disconnect = e.disconnect)
>        else:
>         self.log(e, level = 'exception')
>         self.send_error('Sorry, but a problem with the server means your
>     command was not executed. The staff have been notified.')
>
>       def lineReceived(self, line):
>        """Parse an incoming command."""
>        global lines
>        lines += 1 # Increment the line count.
>        data = line.decode(settings.ENCODING)
>        try:
>         command, kwargs = json.loads(data)
>         if not isinstance(command, string_types) or not isinstance(kwargs,
>     dict):
>          raise TypeError('Expecting [str, dict]. Got [%s, %s] instead.' %
>     (type(command), type(kwargs)))
>        except (TypeError, ValueError) as e:
>         self.log('Invalid command string: %s', data, level = 'error')
>         self.log(e, level = 'exception')
>         return self.send_error('Invalid command.', disconnect = True)
>        cmd = commands.commands.get(command, None)
>        if cmd  is None:
>         self.log('Unrecognised command: %s.', command, level = 'warning')
>        elif self.connection.player or not cmd.login_required:
>         d = defer.Deferred()
>         print('Adding callback.')
>         d.addCallback(self.do_command, **kwargs)
>         print('Adding errback.')
>         d.addErrback(self.handle_error)
>         print('Calling callback.')
>         d.callback(cmd)
>         print('Called.') # Never gets this far.
>         return d
>        else:
>         return self.send_error('Not authenticated.', disconnect = True)
>
>     Here's the traceback I get when the callback gets called:
>
>     Unhandled Error
>     Traceback (most recent call last):
>        File "server/functions.py", line 88, in server_start
>          reactor.run()
>        File
>     "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/base.py",
>     line 1194, in run
>          self.mainLoop()
>        File
>     "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/base.py",
>     line 1206, in mainLoop
>          self.doIteration(t)
>        File
>     "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/epollreactor.py",
>     line 396, in doPoll
>          log.callWithLogger(selectable, _drdw, selectable, fd, event)
>     --- <exception caught here> ---
>        File
>     "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/log.py",
>     line 101, in callWithLogger
>          return callWithContext({"system": lp}, func, *args, **kw)
>        File
>     "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/log.py",
>     line 84, in callWithContext
>          return context.call({ILogContext: newCtx}, func, *args, **kw)
>        File
>     "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/context.py",
>     line 118, in callWithContext
>          return self.currentContext().callWithContext(ctx, func,
>     *args, **kw)
>        File
>     "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/context.py",
>     line 81, in callWithContext
>          return func(*args,**kw)
>        File
>     "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/posixbase.py",
>     line 610, in _doReadOrWrite
>          self._disconnectSelectable(selectable, why, inRead)
>        File
>     "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/internet/posixbase.py",
>     line 258, in _disconnectSelectable
>          selectable.connectionLost(failure.Failure(why))
>        File
>     "/usr/local/lib/python3.5/site-packages/Twisted-16.0.0-py3.5.egg/twisted/python/failure.py",
>     line 232, in __init__
>          tb = self.value.__traceback__
>     builtins.AttributeError: 'Deferred' object has no attribute
>     '__traceback__'
>
>     Anyone have any ideas?
>
>     Cheers,
>
>     Chris
>
>     _______________________________________________
>     Twisted-Python mailing list
>     Twisted-Python at twistedmatrix.com
>     <mailto:Twisted-Python at twistedmatrix.com>
>     http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160402/a95eff4d/attachment-0002.html>

From johnaherne at rocs.co.uk  Sun Apr  3 07:29:18 2016
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sun, 3 Apr 2016 14:29:18 +0100
Subject: [Twisted-Python] SSL wincertstore Ticket 6371
Message-ID: <CAKmUHjYO8J8n8MBrQCGwP6=hudFsg+7yTmh2qMWTBo4XtkYV3g@mail.gmail.com>

I have picked up on this again.

There would appear to be a failing test in test_agent.py.

I have added a new test to check that certificateOptions.trustRoot is an
instance of  OpensSSLWindowsCertificateAuthorities if wincertstore is
available

And I have modified the existing test
 test_setsTrustRootOnContextDefaultTrustRoot to be skipped if wincertstore
is available.

I have run some simple tests using Agent against googlemaps to confirm the
host verification works and fails and a similar test with treq. So looks
good.

But before I send up the patch I need to be happy that trial twisted
completes with out error. And I keep getting an error on one test but I
can't work out what the problem is. Hopefully someone can fathom it from
the traceback and point me in the right direction.

Thanks

[ERROR]
Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
DelayedCalls: (set twisted.internet.base.DelayedCall.debug = True to debug)
<DelayedCall 0x42e4f30 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('d.root-servers.net', <Deferred at 0x42e4a80>)>
<DelayedCall 0x42e4328 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('e.root-servers.net', <Deferred at 0x42e4b48>)>
<DelayedCall 0x42e4d28 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('f.root-servers.net', <Deferred at 0x42e4fa8>)>
<DelayedCall 0x42e4ad0 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('h.root-servers.net', <Deferred at 0x42e4a58>)>
<DelayedCall 0x4299aa8 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('l.root-servers.net', <Deferred at 0x42ce3a0>)>
<DelayedCall 0x42e4cb0 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('a.root-servers.net', <Deferred at 0x42e40d0>)>
<DelayedCall 0x42e4d50 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('b.root-servers.net', <Deferred at 0x42e4ee0>)>
<DelayedCall 0x42e45d0 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('c.root-servers.net', <Deferred at 0x42e4af8>)>
<DelayedCall 0x42e4670 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('g.root-servers.net', <Deferred at 0x42e4468>)>
<DelayedCall 0x42e4968 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('i.root-servers.net', <Deferred at 0x42e4e68>)>
<DelayedCall 0x42e4558 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('j.root-servers.net', <Deferred at 0x42e4fd0>)>
<DelayedCall 0x42cee68 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('k.root-servers.net', <Deferred at 0x42e4b70>)>
<DelayedCall 0x4355f08 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('m.root-servers.net', <Deferred at 0x4355e68>)>

twisted.names.test.test_tap.OptionsTests.test_recursiveConfiguration
-------------------------------------------------------------------------------
Ran 11184 tests in 84.952s

FAILED (skips=2946, errors=1, successes=8237)




-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160403/56e21fe3/attachment-0002.html>

From johnaherne at rocs.co.uk  Sun Apr  3 07:35:41 2016
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sun, 3 Apr 2016 14:35:41 +0100
Subject: [Twisted-Python] web.client.readBody
Message-ID: <CAKmUHjZoO1kso3FnSRO1hAdv4iY0LGkUDN5O5PvDN5uMPzjwjA@mail.gmail.com>

I have been using deliverBody to process in responses but decided that
readBody might be a better fit.

So far it works with http, but as soon as I switch to https it fails.

I get a response http code 200 OK but no data.

I've puzzled over this but can't see what the problem is.

Has anyone else seen this problem and found out what the solution is.

Thanks



Response received <twisted.web._newclient.Response object at 0x0362EB50>
Response version: ('HTTP', 1, 1)
Response code: 200
Response phrase: OK
Response headers: Headers({'alternate-protocol': ['443:quic'],
'x-xss-protection': ['1; mode=block'], 'accept-ranges': ['none'],
'expires': ['Mon, 04 Apr 2016 13:32:31 GMT'], 'vary':
['Accept-Language,Accept-Encoding'], 'server': ['mafe'], 'cache-control':
['public, max-age=86400'], 'date': ['Sun, 03 Apr 2016 13:32:31 GMT'],
'x-frame-options': ['SAMEORIGIN'], 'alt-svc': ['quic=":443"; ma=2592000;
v="32,31,30,29,28,27,26,25"'], 'content-type': ['application/json;
charset=UTF-8']})
LENGTH twisted.web.iweb.UNKNOWN_LENGTH
[('Alternate-Protocol', ['443:quic']),
 ('X-XSS-Protection', ['1; mode=block']),
 ('Accept-Ranges', ['none']),
 ('Expires', ['Mon, 04 Apr 2016 13:32:31 GMT']),
 ('Vary', ['Accept-Language,Accept-Encoding']),
 ('Server', ['mafe']),
 ('Cache-Control', ['public, max-age=86400']),
 ('Date', ['Sun, 03 Apr 2016 13:32:31 GMT']),
 ('X-Frame-Options', ['SAMEORIGIN']),
 ('Alt-Svc', ['quic=":443"; ma=2592000; v="32,31,30,29,28,27,26,25"']),
 ('Content-Type', ['application/json; charset=UTF-8'])]
Got Error
error res [Failure instance: Traceback (failure with no frames): <class
'twisted.web.client.PartialDownloadError'>: 200 OK
]
SHUTDOWN


-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160403/0c9ad3a9/attachment-0002.html>

From johnaherne at rocs.co.uk  Sun Apr  3 07:45:34 2016
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sun, 3 Apr 2016 14:45:34 +0100
Subject: [Twisted-Python] Running trial on windows
Message-ID: <CAKmUHjYtuiwzptFT5nhdmKhbVBxVuS9fyjiqQNpicmJiUor=sQ@mail.gmail.com>

When I run trial in a virtualenv it seems to miss some imports and skips
some tests.

It would seem to be mainly wincertstore that it can't import.

To make it work I have to include wincertstore in my main python setup and
then it starts to test the wincertstore tests.

Anyone else seen this happening.

This is Windows 10 and python2.7.11 32 bit, virtualenvwrapper-win 1.2.1

Thanks


-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160403/bf599590/attachment-0002.html>

From johnaherne at rocs.co.uk  Sun Apr  3 08:06:19 2016
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sun, 3 Apr 2016 15:06:19 +0100
Subject: [Twisted-Python] web.client.readbody
Message-ID: <CAKmUHjanm6b56BPfjiS+o_78aUnA7qKTpiH_NWLuK3vr4meDrg@mail.gmail.com>

I was obviously half-asleep when I posted the previous email.

Doing more tests, it would seem that only googlemaps is giving me this
problem.


-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160403/9c5fe7e5/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Apr  4 01:45:10 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 4 Apr 2016 00:45:10 -0700
Subject: [Twisted-Python] web.client.readbody
In-Reply-To: <CAKmUHjanm6b56BPfjiS+o_78aUnA7qKTpiH_NWLuK3vr4meDrg@mail.gmail.com>
References: <CAKmUHjanm6b56BPfjiS+o_78aUnA7qKTpiH_NWLuK3vr4meDrg@mail.gmail.com>
Message-ID: <536DBA59-8932-4C63-A46E-D79DF71D6516@twistedmatrix.com>

> On Apr 3, 2016, at 7:06 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> I was obviously half-asleep when I posted the previous email.
> 
> Doing more tests, it would seem that only googlemaps is giving me this problem.
> 

Is the request in question one you expect no data from?
-g




From glyph at twistedmatrix.com  Mon Apr  4 01:47:09 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 4 Apr 2016 00:47:09 -0700
Subject: [Twisted-Python] Running trial on windows
In-Reply-To: <CAKmUHjYtuiwzptFT5nhdmKhbVBxVuS9fyjiqQNpicmJiUor=sQ@mail.gmail.com>
References: <CAKmUHjYtuiwzptFT5nhdmKhbVBxVuS9fyjiqQNpicmJiUor=sQ@mail.gmail.com>
Message-ID: <CDF46B76-02E1-4DFA-A467-618DF07361BE@twistedmatrix.com>


> On Apr 3, 2016, at 6:45 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> When I run trial in a virtualenv it seems to miss some imports and skips some tests.
> 
> It would seem to be mainly wincertstore that it can't import.
> 
> To make it work I have to include wincertstore in my main python setup and then it starts to test the wincertstore tests.
> 
> Anyone else seen this happening.
> 
> This is Windows 10 and python2.7.11 32 bit, virtualenvwrapper-win 1.2.1
> 

How exactly are you running `trial´ ?  I believe that, since we don't use console-scripts entry points, we don't get .exe files generated on Windows, and so the wrong thing may be happening when you type 'trial'.

IIRC the way to ask cmd.exe this is 'where trial'.

-glyph


From glyph at twistedmatrix.com  Mon Apr  4 01:49:58 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 4 Apr 2016 00:49:58 -0700
Subject: [Twisted-Python] SSL wincertstore Ticket 6371
In-Reply-To: <CAKmUHjYO8J8n8MBrQCGwP6=hudFsg+7yTmh2qMWTBo4XtkYV3g@mail.gmail.com>
References: <CAKmUHjYO8J8n8MBrQCGwP6=hudFsg+7yTmh2qMWTBo4XtkYV3g@mail.gmail.com>
Message-ID: <B23F745E-9B89-4356-8DBA-91FBFB20C9E2@twistedmatrix.com>


> On Apr 3, 2016, at 6:29 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> I have picked up on this again.
> 
> There would appear to be a failing test in test_agent.py.

You said 'test_agent' but the error below is coming from test_tap; which are you referring to?

> I have added a new test to check that certificateOptions.trustRoot is an instance of  OpensSSLWindowsCertificateAuthorities if wincertstore is available
> 
> And I have modified the existing test  test_setsTrustRootOnContextDefaultTrustRoot to be skipped if wincertstore is available.
> 
> I have run some simple tests using Agent against googlemaps to confirm the host verification works and fails and a similar test with treq. So looks good.
> 
> But before I send up the patch I need to be happy that trial twisted completes with out error. And I keep getting an error on one test but I can't work out what the problem is. Hopefully someone can fathom it from the traceback and point me in the right direction.
> 
> Thanks
> 
> [ERROR]
> Traceback (most recent call last):
> Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
> DelayedCalls: (set twisted.internet.base.DelayedCall.debug = True to debug)
> <DelayedCall 0x42e4f30 [60.0s] called=0 cancelled=0 ThreadedResolver._cleanup('d.root-servers.net <http://d.root-servers.net/>', <Deferred at 0x42e4a80>)>
> <DelayedCall 0x42e4328 [60.0s] called=0 cancelled=0 ThreadedResolver._cleanup('e.root-servers.net <http://e.root-servers.net/>', <Deferred at 0x42e4b48>)>
> <DelayedCall 0x42e4d28 [60.0s] called=0 cancelled=0 ThreadedResolver._cleanup('f.root-servers.net <http://f.root-servers.net/>', <Deferred at 0x42e4fa8>)>
> <DelayedCall 0x42e4ad0 [60.0s] called=0 cancelled=0 ThreadedResolver._cleanup('h.root-servers.net <http://h.root-servers.net/>', <Deferred at 0x42e4a58>)>
> <DelayedCall 0x4299aa8 [60.0s] called=0 cancelled=0 ThreadedResolver._cleanup('l.root-servers.net <http://l.root-servers.net/>', <Deferred at 0x42ce3a0>)>
> <DelayedCall 0x42e4cb0 [60.0s] called=0 cancelled=0 ThreadedResolver._cleanup('a.root-servers.net <http://a.root-servers.net/>', <Deferred at 0x42e40d0>)>
> <DelayedCall 0x42e4d50 [60.0s] called=0 cancelled=0 ThreadedResolver._cleanup('b.root-servers.net <http://b.root-servers.net/>', <Deferred at 0x42e4ee0>)>
> <DelayedCall 0x42e45d0 [60.0s] called=0 cancelled=0 ThreadedResolver._cleanup('c.root-servers.net <http://c.root-servers.net/>', <Deferred at 0x42e4af8>)>
> <DelayedCall 0x42e4670 [60.0s] called=0 cancelled=0 ThreadedResolver._cleanup('g.root-servers.net <http://g.root-servers.net/>', <Deferred at 0x42e4468>)>
> <DelayedCall 0x42e4968 [60.0s] called=0 cancelled=0 ThreadedResolver._cleanup('i.root-servers.net <http://i.root-servers.net/>', <Deferred at 0x42e4e68>)>
> <DelayedCall 0x42e4558 [60.0s] called=0 cancelled=0 ThreadedResolver._cleanup('j.root-servers.net <http://j.root-servers.net/>', <Deferred at 0x42e4fd0>)>
> <DelayedCall 0x42cee68 [60.0s] called=0 cancelled=0 ThreadedResolver._cleanup('k.root-servers.net <http://k.root-servers.net/>', <Deferred at 0x42e4b70>)>
> <DelayedCall 0x4355f08 [60.0s] called=0 cancelled=0 ThreadedResolver._cleanup('m.root-servers.net <http://m.root-servers.net/>', <Deferred at 0x4355e68>)>
> 
> twisted.names.test.test_tap.OptionsTests.test_recursiveConfiguration
> -------------------------------------------------------------------------------
> Ran 11184 tests in 84.952s
> 
> FAILED (skips=2946, errors=1, successes=8237)
> 

I am not sure what the issue is here, but does this test pass or fail for you on a clean trunk at HEAD without your changes?

It might be best to just submit your patch for review, even if it's failing, and the reviewer might be able to shed some light.  They'll also be able to run the tests on our build farm, which might shed some light on whether the problem is related to your patch or just related to your system.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160404/110f8927/attachment-0002.html>

From cory at lukasa.co.uk  Mon Apr  4 02:03:24 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Mon, 4 Apr 2016 09:03:24 +0100
Subject: [Twisted-Python] web.client.readBody
In-Reply-To: <CAKmUHjZoO1kso3FnSRO1hAdv4iY0LGkUDN5O5PvDN5uMPzjwjA@mail.gmail.com>
References: <CAKmUHjZoO1kso3FnSRO1hAdv4iY0LGkUDN5O5PvDN5uMPzjwjA@mail.gmail.com>
Message-ID: <71304C75-EB29-48B6-9F16-5BC1B0F13BC6@lukasa.co.uk>


> On 3 Apr 2016, at 14:35, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> I have been using deliverBody to process in responses but decided that readBody might be a better fit.
> 
> So far it works with http, but as soon as I switch to https it fails.
> 
> I get a response http code 200 OK but no data.
> 
> I've puzzled over this but can't see what the problem is.
> 
> Has anyone else seen this problem and found out what the solution is.
> 
> Thanks

The problem is an interaction in readBody. Your logs actually contain the key clue:

> LENGTH twisted.web.iweb.UNKNOWN_LENGTH

This indicates that the remote server (which, while your logs don’t outright say it, is clearly a Google server) is doing something particularly stupid: that is, they’re sending a response that is neither chunked nor content-length-delimited. This means that message completion can only be signalled by the closing of the connection once the response is complete.

Twisted, correctly, gets a bit nervous about this: it’s very difficult to tell the actual completion of the response from any number of error conditions where the connection gets abruptly torn down. For this reason, the docstring of IResponse.deliverBody says that in a case like this: "The protocol's connectionLost method will be called with: PotentialDataLoss, which indicates that it cannot be determined if the entire response body has been delivered.”

When readBody’s protocol connectionLost method is called with PotentialDataLoss, it calls the errback with PartialDownloadError, which is what you’re seeing. The body of the response is available on the PartialDownloadError as PartialDownloadError.response, so if you’re interested in continuing to use readBody you’ll probably want to register an errback on the deferred that checks for this error and handles it appropriately: in your case, probably by converting the error to a safe response and then calling the callback!

In this instance, I’d *also* recommend that you reach out to whatever Google service is sending this response. RFC 7230 says that a server SHOULD send a Content-Length header if not sending a Transfer-Encoding: chunked header, and points out that not doing so exists primarily for backward compatibility with HTTP/1.0.

I hope that all helps!

Cory

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160404/79109fd3/attachment.sig>

From johnaherne at rocs.co.uk  Mon Apr  4 02:31:50 2016
From: johnaherne at rocs.co.uk (John Aherne)
Date: Mon, 4 Apr 2016 09:31:50 +0100
Subject: [Twisted-Python] web.client.readbody
Message-ID: <CAKmUHjYd5CPdkvoM9QXhQBWcDroCQTJ+79mrnbmmxSio8LtFcQ@mail.gmail.com>

To Glyph

This works fine if I use response.deliverBody

I get a json response back.

I'll look at what Cory says and see where I get.

Thanks

John

-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160404/7a92410a/attachment-0002.html>

From johnaherne at rocs.co.uk  Mon Apr  4 02:32:33 2016
From: johnaherne at rocs.co.uk (John Aherne)
Date: Mon, 4 Apr 2016 09:32:33 +0100
Subject: [Twisted-Python] web.client.readBody
Message-ID: <CAKmUHjbLJWHP7dNgO_QyV=zsjfwxDi5k+9-ZaUP0KZPLWya6Xw@mail.gmail.com>

Cory

Thanks for the detailed reply.

I'll see what I can make of it.

I must admit I don't see Google paying much attention to this.

It does work if I use response.deliverBody, but I thought getting the
complete response in one hit would be better.

John

-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160404/92f51ad7/attachment-0002.html>

From johnaherne at rocs.co.uk  Mon Apr  4 02:39:56 2016
From: johnaherne at rocs.co.uk (John Aherne)
Date: Mon, 4 Apr 2016 09:39:56 +0100
Subject: [Twisted-Python] running trial on windows
Message-ID: <CAKmUHjYEpMDR-M1dSsMVTwLEYQBvz3vMDTESYKAXui6KwL_Daw@mail.gmail.com>

I have to specify a really long path to pick up the copy of trial.py for
the virtualenv I am working in.

I specify the virtualenv python I want to run with and then the path to
trial.py then the test I want to run.

It would appear to be only the wincertstore module that is missed.

Perhaps I'll send a report off to virtualenvwrapper about this after some
more messing around.



*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160404/59e79fb3/attachment-0002.html>

From johnaherne at rocs.co.uk  Mon Apr  4 03:32:31 2016
From: johnaherne at rocs.co.uk (John Aherne)
Date: Mon, 4 Apr 2016 10:32:31 +0100
Subject: [Twisted-Python] SSl wincertstore Ticket 6371
Message-ID: <CAKmUHjZNzjox3Ze6zS3=HfQD1hh0DOwZ+3mO9LV6pE53o=-USQ@mail.gmail.com>

The failure is in test_agent

 test_setsTrustRootOnContextDefaultTrustRoot

This fails if wincertstore is available with this failure:-

twisted.trial.unittest.FailTest:
<twisted.internet._sslverify.OpenSSLWindowsCertificateAuthorities object at
0x037DB2B0> is not an instance of <class
'twisted.internet._sslverify.OpenSSLDefaultPaths'>


This is because the patch from aaron which I have applied
has_sslverify.platformTrust check for wincertstore and does not return
OpenSSLDefaultPaths but returns
_sslverify.OpenSSLWindowsCertificateAuthorities

The solution I followed was to  add a test to specifically check for a
return of OpenSSLWindowscertificateAuthorities if wincertstore was
available otherwise to skip it.

The other part was to skip the test for
test_setsTrustRootOnContextDefaultTrustRoot
if wincertstore was available

The error message comes from the tests for the root name servers.

I just need to fix that so I have a clean test run before making any
changes.

I just can't see what the problem is with the error

Thanks




-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160404/f7b05368/attachment-0002.html>

From johnaherne at rocs.co.uk  Mon Apr  4 03:56:02 2016
From: johnaherne at rocs.co.uk (John Aherne)
Date: Mon, 4 Apr 2016 10:56:02 +0100
Subject: [Twisted-Python] SSl wincertstore Ticket 6371
Message-ID: <CAKmUHjaH-R7rNsh+AcgeSVVUmf=VXLemYuQkUH8x+doytroz9g@mail.gmail.com>

I have done a clean download of twisted and run the tests without any
changes.

I still get the same error on:--

twisted.names.test.test_tap.OptionsTests.test_recursiveConfiguration

[ERROR]
Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
DelayedCalls: (set twisted.internet.base.DelayedCall.debug = True to debug)
<DelayedCall 0x4507698 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('d.root-servers.net', <Deferred at 0x4507c88>)>
<DelayedCall 0x450cd28 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('l.root-servers.net', <Deferred at 0x450ce68>)>
<DelayedCall 0x873e878 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('e.root-servers.net', <Deferred at 0x873e058>)>
<DelayedCall 0x873e580 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('f.root-servers.net', <Deferred at 0x873e6e8>)>
<DelayedCall 0x43d8350 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('h.root-servers.net', <Deferred at 0x43d86e8>)>
<DelayedCall 0x450cf08 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('m.root-servers.net', <Deferred at 0x450cd78>)>
<DelayedCall 0x4507d28 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('a.root-servers.net', <Deferred at 0x4507cb0>)>
<DelayedCall 0x4507620 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('b.root-servers.net', <Deferred at 0x4507328>)>
<DelayedCall 0x45074e0 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('c.root-servers.net', <Deferred at 0x45072b0>)>
<DelayedCall 0x43d8c10 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('g.root-servers.net', <Deferred at 0x873e8f0>)>
<DelayedCall 0x43d82b0 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('i.root-servers.net', <Deferred at 0x43d8800>)>
<DelayedCall 0x43d8558 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('j.root-servers.net', <Deferred at 0x43d8508>)>
<DelayedCall 0x43d0378 [60.0s] called=0 cancelled=0
ThreadedResolver._cleanup('k.root-servers.net', <Deferred at 0x43d83c8>)>

twisted.names.test.test_tap.OptionsTests.test_recursiveConfiguration
-------------------------------------------------------------------------------
Ran 11183 tests in 109.669s

FAILED (skips=2945, errors=1, successes=8237)


-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160404/b32f0ae9/attachment-0002.html>

From cory at lukasa.co.uk  Mon Apr  4 04:05:24 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Mon, 4 Apr 2016 11:05:24 +0100
Subject: [Twisted-Python] web.client.readBody
In-Reply-To: <CAKmUHjbLJWHP7dNgO_QyV=zsjfwxDi5k+9-ZaUP0KZPLWya6Xw@mail.gmail.com>
References: <CAKmUHjbLJWHP7dNgO_QyV=zsjfwxDi5k+9-ZaUP0KZPLWya6Xw@mail.gmail.com>
Message-ID: <1DF498CF-07B6-4DAF-B7FC-9CA611AA451E@lukasa.co.uk>


> On 4 Apr 2016, at 09:32, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> Cory
> 
> Thanks for the detailed reply.
> 
> I'll see what I can make of it.
> 
> I must admit I don't see Google paying much attention to this.
> 
> It does work if I use response.deliverBody, but I thought getting the complete response in one hit would be better.
> 
> John

Yeah, so the difference is that with response.deliverBody you’re not checking the code in connectionLost. If you were, you’d be seeing PotentialDataLoss as well. ;)

There’s nothing wrong with using readBody, you just need to adjust your errback/callback chain to transform the response appropriately in this case.

And yeah, I doubt Google will listen. =P

Cory

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160404/98bd5867/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160404/98bd5867/attachment.sig>

From hawkowl at atleastfornow.net  Mon Apr  4 11:10:23 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Tue, 5 Apr 2016 01:10:23 +0800
Subject: [Twisted-Python] Twisted 16.1 Release Announcement
Message-ID: <367BC573-64FD-4694-ADA1-C78B5D45E257@atleastfornow.net>

On behalf of Twisted Matrix Laboratories, I am honoured to announce the release of Twisted 16.1!

This release is hot off the heels of 16.0 released last month, including some nice little tidbits. The highlights include:

- twisted.application.internet.ClientService, a service that maintains a persistent outgoing endpoint-based connection -- a replacement for ReconnectingClientFactory that uses modern APIs;
- A large (77% on one benchmark) performance improvement when using twisted.web's client on PyPy;
- A few conch modules have been ported to Python 3, in preparation for further porting of the SSH functionality;
- Full support for OpenSSL 1.0.2f and above;
- t.web.http.Request.addCookie now accepts Unicode and bytes keys/values;
- `twistd manhole` no longer uses a hard-coded SSH host key, and will generate one for you on the fly (this adds a 'appdirs' PyPI dependency, installing with [conch] will add it automatically);
- Over eighteen tickets overall closed since 16.0.

For more information, check the NEWS file (link provided below).

You can find the downloads at <https://pypi.python.org/pypi/Twisted> (or alternatively <http://twistedmatrix.com/trac/wiki/Downloads>). The NEWS file is also available at <https://github.com/twisted/twisted/blob/twisted-16.1.0/NEWS>.

Many thanks to everyone who had a part in this release - the supporters of the Twisted Software Foundation, the developers who contributed code as well as documentation, and all the people building great things with Twisted!

Twisted Regards,
Amber Brown (HawkOwl)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160405/1ac6b898/attachment.sig>

From glyph at twistedmatrix.com  Mon Apr  4 11:24:02 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 4 Apr 2016 10:24:02 -0700
Subject: [Twisted-Python] running trial on windows
In-Reply-To: <CAKmUHjYEpMDR-M1dSsMVTwLEYQBvz3vMDTESYKAXui6KwL_Daw@mail.gmail.com>
References: <CAKmUHjYEpMDR-M1dSsMVTwLEYQBvz3vMDTESYKAXui6KwL_Daw@mail.gmail.com>
Message-ID: <4A4ACEED-C659-406D-81A9-7728725D52F2@twistedmatrix.com>


> On Apr 4, 2016, at 1:39 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> I have to specify a really long path to pick up the copy of trial.py for the virtualenv I am working in.
> 
> I specify the virtualenv python I want to run with and then the path to trial.py then the test I want to run.
> 
> It would appear to be only the wincertstore module that is missed.
> 
> Perhaps I'll send a report off to virtualenvwrapper about this after some more messing around.
> 

How'd you install the wincertstore module?

Does running \path\to\venv\python.exe -c 'import wincertstore' work?

-g




From glyph at twistedmatrix.com  Mon Apr  4 11:24:33 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 4 Apr 2016 10:24:33 -0700
Subject: [Twisted-Python] SSl wincertstore Ticket 6371
In-Reply-To: <CAKmUHjaH-R7rNsh+AcgeSVVUmf=VXLemYuQkUH8x+doytroz9g@mail.gmail.com>
References: <CAKmUHjaH-R7rNsh+AcgeSVVUmf=VXLemYuQkUH8x+doytroz9g@mail.gmail.com>
Message-ID: <D84DFE92-0A1F-42B8-A992-1BF55730EC63@twistedmatrix.com>


> On Apr 4, 2016, at 2:56 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> I have done a clean download of twisted and run the tests without any changes.

OK.  This is a bug we should investigate, but I think we can safely say it's a separate bug and not one which will cause your patch to fail review.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160404/1e263fe2/attachment-0002.html>

From ex.vitorino at gmail.com  Tue Apr  5 15:11:19 2016
From: ex.vitorino at gmail.com (exvito here)
Date: Tue, 5 Apr 2016 22:11:19 +0100
Subject: [Twisted-Python] Windows spawnProcess - Child process inherits
 files and sockets (POSIX does not)
In-Reply-To: <DE300510-5DB5-446D-8DF8-F1404FC69B32@twistedmatrix.com>
References: <CADtv4OC=7N9w4MLY62AkqC2K0wKjjM0dezM86URFGwBba5cDcg@mail.gmail.com>
 <DE300510-5DB5-446D-8DF8-F1404FC69B32@twistedmatrix.com>
Message-ID: <CADtv4OA4eSA73VGtsVVMQNHWW9+h3-mgwVQw5bY=oxWCpmooEQ@mail.gmail.com>

On Thu, Mar 31, 2016 at 10:27 PM, Glyph <glyph at twistedmatrix.com> wrote:

> Before submitting a patch for review, I'm looking for preliminary
> feedback, assuming you agree that the Windows vs POSIX semantics should be
> the same (if not, why?).
>
>
> After much thought: Yes.  They should be the same.  The reason they're not
> is largely ignorance of the relevant APIs and abstractions on Windows, not
> any desire that they differ.  The one place they have to differ a little
> bit is handle inheritance: we need to figure out some way to express the
> 'childFDs' mapping in terms of both file descriptors and handles.
>

Agreed. My code does not go into 'childFDs' mapping territory, though. All
it does is prevent all file- and socket-handles from being inherited by the
child process -- other than the pipes used for STDIO communication.

My patch calls a few Windows APIs via ctypes, however, as far as I can
> tell, Twisted on Windows requires pywin32 and, recently, there has been
> some discussion around dropping that dependency and moving towards
> something based on cffi.
>
>
> ctypes is dangerous and error-prone.  If you screw up the bit-width of a
> type, or the type in a header changes on some future version, ctypes gives
> you no way of finding out until some poor user's process segfaults, and
> usually not at the relevant call site.  So we'd prefer not to maintain more
> ctypes-using code.
>
> The APIs in pywin32 very closely mirror the underlying Windows API, so for
> addressing this issue, please just go ahead and use pywin32 APIs; porting
> them to a new API along with everything else should be relatively
> straightforward.
>

> If we do move forward with that change, we will probably use
> https://pypi.python.org/pypi/pywincffi and not move anything within
> Twisted.
>

Agreed with your ctypes comment -- I've been hit by such faults which
"magically" went away using cffi when coding against Windows TAPI.

pywin32, unfortunatelly, does not include two Windows APIs (out of four) my
code requires -- I just grepped the source for latest release I could find
on SourceForge, 220.

For completeness, the missing APIs are NtQuerySystemInformation [1] and
NtQueryObject [2].
The others are GetHandleInformation [3] and SetHandleInformation [4].

What would you say the way forward is? Should I submit the patch for review
> anyway? Is there any other work that needs to be done first that I may
> contribute to?
>
>
> Yes, just go ahead and write the patch.
>

Given that pywin32 does not provide two of the required APIs, maybe this
issue is somewhat blocked.

Adding to that is the fact that one particular API call in my code --
NtQuerySystemInformation [1] -- is being used with what seems to be an
undocumented option -- SystemHandleInformation (enum = 16) -- and
returning, again, an apparently undocumented data structure --
SYSTEM_HANDLE_INFORMATION. I downloaded and installed the available SDKs
and WDKs (driver dev kits) from Microsoft and could not find any reference
to those particular options or data structures.

My code was created after much investigation on how to obtain the list of
open handles for the current process.
The gist of it is:
- Call NtQuerySystemInformation with the SystemInformationClass arg set
to SystemHandleInformation.
- This returns all (!!!) of the handles in the system (no need for special
privileges).
- Filter those out by the current process PID and type, such that only
files and sockets are left.
- Use the GetHandleInformation to get the inheritance flag and clear it
with SetHandleInformation if needed.

It is mostly based on SysInternals information at
http://forum.sysinternals.com/howto-enumerate-handles_topic18892.html.
There are many other references across the web to those undocumented
options and data structures. But none of those come from formal Microsoft
documents, that I could find.

An alternative approach, which I also tried, for completeness sake, was to
try and Get/SetHandleInformation on all possible handles -- this is
completely unfeasible given that handles are at least 32 bit numbers.

After all of this -- including some frustration, I confess -- I decided to
go ahead and create a cffi ABI-mode variation of my original patch, anyway:
it passes the same tests and, much like the ctypes approach, works nicely
on my environment: Win 7 32, Win 2008R2 64, Win XP 32 (!!!), Python 2.7.11
32, Twisted 16.1, cffi 1.5.2.

Just for kicks I compared the performance of the ctypes vs cffi
implementation:
- The ctypes code runs in 0.014s - 0.016s.
- The cffi code runs in 0.03s - 0.04s.

This makes sense given that the code is mostly calling out to DLLs and,
AFAICT, cffi does the nice extra work of validating/converting types back
and forth.


Wrapping up: I'm really not sure how to more forward with this: not only
does pywin32 not provide the needed APIs, but also one of those APIs --
documented -- is being used in an undocumented fashion.

Even though I'd love to submit a patch, I don't think we're at that point
yet. However, for posterity's sake and if anyone wants to take a look at
the code, it is avalable at https://github.com/exvito/twisted in branches
win32-fix-handle-inherit-cffi and win32-fix-handle-inherit-ctypes. They add
two tests to twisted/test/test_process.py, one line to
twisted/internet/_dumbwin32proc.py and one module named
twisted/internet/_win32handleinherit.py

I'd love to hear feedback or ideas on this.
Thanks again

[1]
https://msdn.microsoft.com/en-us/library/windows/desktop/ms724509(v=vs.85).aspx
[2] https://msdn.microsoft.com/en-us/library/bb432383(v=vs.85).aspx
[3]
https://msdn.microsoft.com/en-us/library/windows/desktop/ms724329(v=vs.85).aspx
[4]
https://msdn.microsoft.com/en-us/library/windows/desktop/ms724935(v=vs.85).aspx
--
exvito
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160405/e3eb9e53/attachment-0002.html>

From michael at mirwin.net  Tue Apr  5 16:24:00 2016
From: michael at mirwin.net (Mike Burns)
Date: Tue, 5 Apr 2016 15:24:00 -0700
Subject: [Twisted-Python] Sysadmin seeking projects
Message-ID: <CAMsDyYomyr4dahyLx6G0AenzZpH1MTg4rKSA0WO7KikRAZzFAw@mail.gmail.com>

Hi all,

tl;dr sysadmin wants to help Twisted. How do?


I've been lurking on this list (and irc) for a while with the intention of
lending a hand with some of the infrastructure tasks Glyph has flaunted in
some offline chats we've had. For context, I'm a DevOp at Rackspace and
have been around the FOSS world for a number of years starting back at
university (go Beavs!). After hearing some of Glyph's sysadmin war stories,
I thought I could lend a hand.

So far, I've landed a (very small) Braid documentation fix and gotten a dev
environment setup, but the real question is what the Twisted community
(and, in turn, Twisted admins) would most benefit from fixing and what
order things should be approached in?

There are a couple different pages I've come across that collect
sysadmin-sounding tasks[0][1] but they aren't really prioritized for
newcomers to adopt and work on. Are there infra/systems projects available
that I can help with? Where should I start?


[0]
https://twistedmatrix.com/trac/query?status=assigned&status=new&status=reopened&group=status&milestone=totally+automated+release+infrastructure
[1] https://github.com/twisted-infra/braid/pulls

Cheers!

-- 
@mburns | https://keybase.io/mburns
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160405/a255aa17/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Apr  5 18:23:46 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 5 Apr 2016 17:23:46 -0700
Subject: [Twisted-Python] Sysadmin seeking projects
In-Reply-To: <CAMsDyYomyr4dahyLx6G0AenzZpH1MTg4rKSA0WO7KikRAZzFAw@mail.gmail.com>
References: <CAMsDyYomyr4dahyLx6G0AenzZpH1MTg4rKSA0WO7KikRAZzFAw@mail.gmail.com>
Message-ID: <D8E10F8C-E6CB-4B61-A09C-E9202628E579@twistedmatrix.com>


> On Apr 5, 2016, at 3:24 PM, Mike Burns <michael at mirwin.net> wrote:
> 
> Hi all,
> 
> tl;dr sysadmin wants to help Twisted. How do?

HOORAY!

> I've been lurking on this list (and irc) for a while with the intention of lending a hand with some of the infrastructure tasks Glyph has flaunted in some offline chats we've had. For context, I'm a DevOp at Rackspace and have been around the FOSS world for a number of years starting back at university (go Beavs!). After hearing some of Glyph's sysadmin war stories, I thought I could lend a hand.

> So far, I've landed a (very small) Braid documentation fix and gotten a dev environment setup, but the real question is what the Twisted community (and, in turn, Twisted admins) would most benefit from fixing and what order things should be approached in?
> 
> There are a couple different pages I've come across that collect sysadmin-sounding tasks[0][1] but they aren't really prioritized for newcomers to adopt and work on. Are there infra/systems projects available that I can help with? Where should I start?

I really, really hope other people will respond, but I have 3 requests, roughly in order of preference:

Create a clearly-documented single point of entry to Twisted administrative tasks.

Right now, _I_ don't even know how to test changes to our infrastructure.  For example, I wanted to review this PR, to make a change to Trac: <https://github.com/twisted-infra/braid/pull/155>.  So, I asked how to do that.  There's a comment, <https://github.com/twisted-infra/braid/pull/155#issuecomment-161195289>, which links to another comment on another PR, <https://github.com/twisted-infra/braid/pull/111#issuecomment-138052006>, which tells me to run 'vagrant up' and then a bunch of 'fab' commands.  I commented a few times there, explaining that the instructions didn't work, and some details about how they didn't work, but nobody replied.  If you can figure this out and write some instructions that are actually part of the repo and clearly called out, that would be great.  If you've already done some work on the Braid documentation this seems like a natural next step.

Thought leadership!

By now, this should be painfully clear: we have no idea what we are doing.  As an experienced DevOp, you might be able to point to some things we could do that would remove some of the pain we are currently experiencing.

Github.

https://github.com/twisted-infra/braid/pull/179 contains a truly unfortunate number of changes, which need to be pulled apart into comprehensible individual steps so we can deploy them.

There's also the fact that we really want a more robust authentication backend (first, to get our passwords out of a text-file on the filesystem, to enable form-based authentication, and finally, to just start using oauth via github or something).  I could use some help on the email side of things, too, but that's a clearly lower priority than any of this stuff, in terms of a new contributor helping out.  Also, ultimately, I'd really like to move everything we're hosting to more powerful infrastructure, which we have a non-trivial amount of, for free, if we could only get our act together to use it.

That first item is by far the most important though, because right now there is a culture of fear among our (extremely small) operations community.  Nobody knows exactly how everything works, and the only reward for hours and hours of super annoying volunteer work is "development doesn't grind to a crushing halt".  If we had a reliable, easy-to-set-up staging environment, then we could maybe actually accept fun stuff as part of our operational footprint - "host some cool demos of Twisted code somewhere on twistedmatrix.com" is permanently on my to-do list and I can never really do anything about it.  Once we get to that point, it'll be possible to motivate more external contributors to do stuff, and we can maybe reverse the death-spiral of nobody wanting to touch this infrastructure.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160405/e7852cdb/attachment-0002.html>

From hawkowl at atleastfornow.net  Wed Apr  6 00:45:06 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Wed, 6 Apr 2016 14:45:06 +0800
Subject: [Twisted-Python] Twisted 16.1.1 Prerelease 1 Announcement
Message-ID: <A5C56BB7-CFFF-4A7D-8E1B-72B290445F53@atleastfornow.net>

Hi everyone,

I'd like to announce a prerelease of the upcoming Twisted 16.1.1, a patch release for Twisted 16.1. This fixes a regression in twisted.web where requests would not be logged.

The tarball and NEWS file can be found at https://twistedmatrix.com/Releases/pre/16.1.1pre1/ . Please test this release with your software.

If no issues are found, it will be released in a day or two.

Amber Brown
Twisted Release Manager
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160406/fb2603dc/attachment.sig>

From itamar at itamarst.org  Wed Apr  6 11:29:28 2016
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 06 Apr 2016 13:29:28 -0400
Subject: [Twisted-Python] Available for consulting: Python, Twisted,
	distributed systems
Message-ID: <57042F1A.5050702@itamarst.org>

Hi, 

If anyone is looking for some help with a project, Twisted or otherwise,
I will be available over the next couple of months: prototyping new
products, improving existing ones, and solving hard problems in general.
For those who don't know me I started working on Twisted back in 2001,
though I have to admit I haven't been contributing much recently :) Full
resume @ http://itamarst.org/resume.html 

-Itamar 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160406/74029f0b/attachment-0002.html>

From oliverpalmer at opalmer.com  Wed Apr  6 21:57:18 2016
From: oliverpalmer at opalmer.com (Oliver Palmer)
Date: Wed, 6 Apr 2016 23:57:18 -0400
Subject: [Twisted-Python] Windows spawnProcess - Child process inherits
 files and sockets (POSIX does not)
In-Reply-To: <CADtv4OA4eSA73VGtsVVMQNHWW9+h3-mgwVQw5bY=oxWCpmooEQ@mail.gmail.com>
References: <CADtv4OC=7N9w4MLY62AkqC2K0wKjjM0dezM86URFGwBba5cDcg@mail.gmail.com>
 <DE300510-5DB5-446D-8DF8-F1404FC69B32@twistedmatrix.com>
 <CADtv4OA4eSA73VGtsVVMQNHWW9+h3-mgwVQw5bY=oxWCpmooEQ@mail.gmail.com>
Message-ID: <CAEgpGv6D0QDTEdo=OX-SDNfwYuMJrN+E09KHpG367hiJwkF=4g@mail.gmail.com>

Owner of pywincffi here, I'd certainly welcome a PR or two for pywincffi
with the necessary functions/constants/etc so you don't have to manage that
code and I'd be happy to help write it too.  I think the consensus is
Twisted is going to eventually replace calls into pywin32 with calls into
pywincffi rather than implement all of that code inside of Twisted itself.
I've already started doing this in a couple of places,
twisted.python.lockfile
<https://github.com/twisted/twisted/compare/trunk...opalmer:windows-cffi>
being the one I'm actively working on because it's simpler to start with.
But the code inside of dumbwin32proc.py and _win32handleinherit.py are both
high on my list to convert too so it probably makes sense that we work on
this together if you're open to it.

Anyway as for some of your questions and points I've tried to reply to some
of them below.  I will admit, it's slanted towards making as much of this a
possible a part of pywincffi having plugged away at the 'what to do about
pywin32' and 'how to make Windows API calls more pythonic' quite a bit now
so keep that in mind.

> After all of this -- including some frustration, I confess -- I decided
to go ahead and create a cffi ABI-mode variation of my original patch,
anyway: it passes the same tests and, much like the ctypes approach, works
nicely on my environment: Win 7 32, Win 2008R2 64, Win XP 32 (!!!), Python
2.7.11 32, Twisted 16.1, cffi 1.5.2.

Looking at your code, some of it could be put into pywincffi already.  It
would need more tests and some additional code so the API calls are closer
to what's already in the project (type checking, default arguments,
documentation, etc) but overall it seems like you've already done the major
work of understanding how it all fits together.  The other advantages of
putting this code into pywincffi is testing and releases are easier because
the project is using AppVeyor to test all PRs and build the wheel files for
most major Python versions including both 32 and 64 bit variants.  From
Twisted's perspective, it's just a dependency on another library.

> Just for kicks I compared the performance of the ctypes vs cffi
implementation: ...

Have you tried a comparison between out-of-line modules and those using
dlopen?  I imagine they'd end up being pretty similar in the end
performance wise but I am a little curious.  In pywincffi I started out
using dlopen but moved away from it because I needed to write some extra
code which couldn't be included from a header.  The other advantage I saw
is that you don't have to rely on the DLL being present and/or Windows
being able to locate it so you can include code which might only
be available if you have some extra library installed.

> This makes sense given that the code is mostly calling out to DLLs and,
AFAICT, cffi does the nice extra work of validating/converting types back
and forth.

It usually does handle type conversion nicely but it can also do odd things
depending on the Python version (like bytes vs. unicode vs. strings) if
you're not careful.  The other issue is user input which can sometimes
result in odd error messages at the C-level that are difficult to
understand or correct without specific knowledge of the underlying code.
In non-public APIs this is not as big of an issue because the code is task
specific but in something like pywincffi or Twisted where people can use
APIs in unexpected ways the automatic conversion/validation can be somewhat
lacking (again, something I wanted to centralize and improve in pywincffi).

> It is mostly based on SysInternals information at
http://forum.sysinternals.com/howto-enumerate-handles_topic18892.html.
There are many other references across the web to those undocumented
options and data structures. But none of those come from formal Microsoft
documents, that I could find.

Some of the people on that site either have contacts within Microsoft or
have worked for Microsoft at one point so I usually trust what's there if
it's the only source.  The other place I often look is the ReactOS project
where they've managed to reverse engineer quite a bit of the Windows kernel
which can either hint at the info you need or validate what you already
know.

> Wrapping up: I'm really not sure how to more forward with this: not only
does pywin32 not provide the needed APIs, but also one of those APIs --
documented -- is being used in an undocumented fashion.

IMHO (again, with some bias), I think implementing the calls you need in
pywincffi is the first step.  If the calls are undocumented it would also
be a good place to do the necessary research, testing and development I
think in isolation from Twisted itself so it's clear we're going in the
right direction.  Once that's done a patch set for Twisted, which calls
into pywincffi, can be opened and tested across the supported platforms.
This makes the patch set smaller but also makes it easier to understand
what if anything the new code breaks.


Regardless, even if you don't want to go the route of putting this into
pywincffi thanks for working on this because it helps in some of the work
I'm doing too.

---Oliver



On Tue, Apr 5, 2016 at 5:11 PM, exvito here <ex.vitorino at gmail.com> wrote:

> On Thu, Mar 31, 2016 at 10:27 PM, Glyph <glyph at twistedmatrix.com> wrote:
>
>> Before submitting a patch for review, I'm looking for preliminary
>> feedback, assuming you agree that the Windows vs POSIX semantics should be
>> the same (if not, why?).
>>
>>
>> After much thought: Yes.  They should be the same.  The reason they're
>> not is largely ignorance of the relevant APIs and abstractions on Windows,
>> not any desire that they differ.  The one place they have to differ a
>> little bit is handle inheritance: we need to figure out some way to express
>> the 'childFDs' mapping in terms of both file descriptors and handles.
>>
>
> Agreed. My code does not go into 'childFDs' mapping territory, though. All
> it does is prevent all file- and socket-handles from being inherited by the
> child process -- other than the pipes used for STDIO communication.
>
> My patch calls a few Windows APIs via ctypes, however, as far as I can
>> tell, Twisted on Windows requires pywin32 and, recently, there has been
>> some discussion around dropping that dependency and moving towards
>> something based on cffi.
>>
>>
>> ctypes is dangerous and error-prone.  If you screw up the bit-width of a
>> type, or the type in a header changes on some future version, ctypes gives
>> you no way of finding out until some poor user's process segfaults, and
>> usually not at the relevant call site.  So we'd prefer not to maintain more
>> ctypes-using code.
>>
>> The APIs in pywin32 very closely mirror the underlying Windows API, so
>> for addressing this issue, please just go ahead and use pywin32 APIs;
>> porting them to a new API along with everything else should be relatively
>> straightforward.
>>
>
>> If we do move forward with that change, we will probably use
>> https://pypi.python.org/pypi/pywincffi and not move anything within
>> Twisted.
>>
>
> Agreed with your ctypes comment -- I've been hit by such faults which
> "magically" went away using cffi when coding against Windows TAPI.
>
> pywin32, unfortunatelly, does not include two Windows APIs (out of four)
> my code requires -- I just grepped the source for latest release I could
> find on SourceForge, 220.
>
> For completeness, the missing APIs are NtQuerySystemInformation [1] and
> NtQueryObject [2].
> The others are GetHandleInformation [3] and SetHandleInformation [4].
>
> What would you say the way forward is? Should I submit the patch for
>> review anyway? Is there any other work that needs to be done first that I
>> may contribute to?
>>
>>
>> Yes, just go ahead and write the patch.
>>
>
> Given that pywin32 does not provide two of the required APIs, maybe this
> issue is somewhat blocked.
>
> Adding to that is the fact that one particular API call in my code --
> NtQuerySystemInformation [1] -- is being used with what seems to be an
> undocumented option -- SystemHandleInformation (enum = 16) -- and
> returning, again, an apparently undocumented data structure --
> SYSTEM_HANDLE_INFORMATION. I downloaded and installed the available SDKs
> and WDKs (driver dev kits) from Microsoft and could not find any reference
> to those particular options or data structures.
>
> My code was created after much investigation on how to obtain the list of
> open handles for the current process.
> The gist of it is:
> - Call NtQuerySystemInformation with the SystemInformationClass arg set
> to SystemHandleInformation.
> - This returns all (!!!) of the handles in the system (no need for special
> privileges).
> - Filter those out by the current process PID and type, such that only
> files and sockets are left.
> - Use the GetHandleInformation to get the inheritance flag and clear it
> with SetHandleInformation if needed.
>
> It is mostly based on SysInternals information at
> http://forum.sysinternals.com/howto-enumerate-handles_topic18892.html.
> There are many other references across the web to those undocumented
> options and data structures. But none of those come from formal Microsoft
> documents, that I could find.
>
> An alternative approach, which I also tried, for completeness sake, was to
> try and Get/SetHandleInformation on all possible handles -- this is
> completely unfeasible given that handles are at least 32 bit numbers.
>
> After all of this -- including some frustration, I confess -- I decided to
> go ahead and create a cffi ABI-mode variation of my original patch, anyway:
> it passes the same tests and, much like the ctypes approach, works nicely
> on my environment: Win 7 32, Win 2008R2 64, Win XP 32 (!!!), Python 2.7.11
> 32, Twisted 16.1, cffi 1.5.2.
>
> Just for kicks I compared the performance of the ctypes vs cffi
> implementation:
> - The ctypes code runs in 0.014s - 0.016s.
> - The cffi code runs in 0.03s - 0.04s.
>
> This makes sense given that the code is mostly calling out to DLLs and,
> AFAICT, cffi does the nice extra work of validating/converting types back
> and forth.
>
>
> Wrapping up: I'm really not sure how to more forward with this: not only
> does pywin32 not provide the needed APIs, but also one of those APIs --
> documented -- is being used in an undocumented fashion.
>
> Even though I'd love to submit a patch, I don't think we're at that point
> yet. However, for posterity's sake and if anyone wants to take a look at
> the code, it is avalable at https://github.com/exvito/twisted in branches
> win32-fix-handle-inherit-cffi and win32-fix-handle-inherit-ctypes. They add
> two tests to twisted/test/test_process.py, one line to
> twisted/internet/_dumbwin32proc.py and one module named
> twisted/internet/_win32handleinherit.py
>
> I'd love to hear feedback or ideas on this.
> Thanks again
>
> [1]
> https://msdn.microsoft.com/en-us/library/windows/desktop/ms724509(v=vs.85).aspx
> [2] https://msdn.microsoft.com/en-us/library/bb432383(v=vs.85).aspx
> [3]
> https://msdn.microsoft.com/en-us/library/windows/desktop/ms724329(v=vs.85).aspx
> [4]
> https://msdn.microsoft.com/en-us/library/windows/desktop/ms724935(v=vs.85).aspx
> --
> exvito
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160406/f799f13b/attachment-0002.html>

From ex.vitorino at gmail.com  Thu Apr  7 11:09:04 2016
From: ex.vitorino at gmail.com (exvito here)
Date: Thu, 7 Apr 2016 18:09:04 +0100
Subject: [Twisted-Python] Windows spawnProcess - Child process inherits
 files and sockets (POSIX does not)
In-Reply-To: <CAEgpGv6D0QDTEdo=OX-SDNfwYuMJrN+E09KHpG367hiJwkF=4g@mail.gmail.com>
References: <CADtv4OC=7N9w4MLY62AkqC2K0wKjjM0dezM86URFGwBba5cDcg@mail.gmail.com>
 <DE300510-5DB5-446D-8DF8-F1404FC69B32@twistedmatrix.com>
 <CADtv4OA4eSA73VGtsVVMQNHWW9+h3-mgwVQw5bY=oxWCpmooEQ@mail.gmail.com>
 <CAEgpGv6D0QDTEdo=OX-SDNfwYuMJrN+E09KHpG367hiJwkF=4g@mail.gmail.com>
Message-ID: <CADtv4OBXh=jKyFCSif5OxSxJHfZ5GFUownj3amKiG6Nx98GWMw@mail.gmail.com>

On Thu, Apr 7, 2016 at 4:57 AM, Oliver Palmer <oliverpalmer at opalmer.com> wrote:

> Owner of pywincffi here, I'd certainly welcome a PR or two for pywincffi
> with the necessary functions/constants/etc so you don't have to manage that
> code and I'd be happy to help write it too.  I think the consensus is
> Twisted is going to eventually replace calls into pywin32 with calls into
> pywincffi rather than implement all of that code inside of Twisted itself.
> I've already started doing this in a couple of places,
> twisted.python.lockfile being the one I'm actively working on because it's
> simpler to start with.  But the code inside of dumbwin32proc.py and
> _win32handleinherit.py are both high on my list to convert too so it
> probably makes sense that we work on this together if you're open to it.

Certainly. Thanks for reaching out.

> Looking at your code, some of it could be put into pywincffi already.  It
> would need more tests and some additional code so the API calls are closer
> to what's already in the project (type checking, default arguments,
> documentation, etc) but overall it seems like you've already done the major
> work of understanding how it all fits together.  The other advantages of
> putting this code into pywincffi is testing and releases are easier because
> the project is using AppVeyor to test all PRs and build the wheel files for
> most major Python versions including both 32 and 64 bit variants.  From
> Twisted's perspective, it's just a dependency on another library.

Agreed. I'll be happy to follow your guidance in that.

>> Just for kicks I compared the performance of the ctypes vs cffi
>> implementation: ...
>
> Have you tried a comparison between out-of-line modules and those using
> dlopen?  I imagine they'd end up being pretty similar in the end performance
> wise but I am a little curious.  In pywincffi I started out using dlopen but
> moved away from it because I needed to write some extra code which couldn't
> be included from a header.  The other advantage I saw is that you don't have
> to rely on the DLL being present and/or Windows being able to locate it so
> you can include code which might only be available if you have some extra
> library installed.

I did not and I confess that I haven't fully grasped (yet) the
different cffi "approaches", if I may call them so.

>> It is mostly based on SysInternals information at
>> http://forum.sysinternals.com/howto-enumerate-handles_topic18892.html. There
>> are many other references across the web to those undocumented options and
>> data structures. But none of those come from formal Microsoft documents,
>> that I could find.
>
> Some of the people on that site either have contacts within Microsoft or
> have worked for Microsoft at one point so I usually trust what's there if
> it's the only source.  The other place I often look is the ReactOS project
> where they've managed to reverse engineer quite a bit of the Windows kernel
> which can either hint at the info you need or validate what you already
> know.

AFAICT, SysInternals was bought by / integrated with Microsoft: tteir
tools are now available under Microsoft domains (example: Process
Explorer at https://technet.microsoft.com/en-us/sysinternals/processexplorer.aspx).

>> Wrapping up: I'm really not sure how to more forward with this: not only
>> does pywin32 not provide the needed APIs, but also one of those APIs --
>> documented -- is being used in an undocumented fashion.
>
> IMHO (again, with some bias), I think implementing the calls you need in
> pywincffi is the first step.  If the calls are undocumented it would also be
> a good place to do the necessary research, testing and development I think
> in isolation from Twisted itself so it's clear we're going in the right
> direction.  Once that's done a patch set for Twisted, which calls into
> pywincffi, can be opened and tested across the supported platforms.  This
> makes the patch set smaller but also makes it easier to understand what if
> anything the new code breaks.

Sounds like a sane and safe approach.

> Regardless, even if you don't want to go the route of putting this into
> pywincffi thanks for working on this because it helps in some of the work
> I'm doing too.

Thank you to, again. I will issue PRs against pywincffi such that the
APIs are available. They most probably won't be up to pywincffi's
standards/requirements but I expect we can cooperate under that
context and go from there.
-- 
exvito



From ex.vitorino at gmail.com  Fri Apr  8 06:30:19 2016
From: ex.vitorino at gmail.com (exvito here)
Date: Fri, 8 Apr 2016 13:30:19 +0100
Subject: [Twisted-Python] Windows spawnProcess - Child process inherits
 files and sockets (POSIX does not)
In-Reply-To: <CADtv4OBXh=jKyFCSif5OxSxJHfZ5GFUownj3amKiG6Nx98GWMw@mail.gmail.com>
References: <CADtv4OC=7N9w4MLY62AkqC2K0wKjjM0dezM86URFGwBba5cDcg@mail.gmail.com>
 <DE300510-5DB5-446D-8DF8-F1404FC69B32@twistedmatrix.com>
 <CADtv4OA4eSA73VGtsVVMQNHWW9+h3-mgwVQw5bY=oxWCpmooEQ@mail.gmail.com>
 <CAEgpGv6D0QDTEdo=OX-SDNfwYuMJrN+E09KHpG367hiJwkF=4g@mail.gmail.com>
 <CADtv4OBXh=jKyFCSif5OxSxJHfZ5GFUownj3amKiG6Nx98GWMw@mail.gmail.com>
Message-ID: <CADtv4OBUivKiYRAmJeG-CikrQH=Y1YfXCLmZoPnckJL-PB=Gfw@mail.gmail.com>

> Thank you to, again. I will issue PRs against pywincffi such that the
> APIs are available. They most probably won't be up to pywincffi's
> standards/requirements but I expect we can cooperate under that
> context and go from there.

For completeness, if anyone wants to follow-along or contribute, first
PR is https://github.com/opalmer/pywincffi/pull/66.

Work will continue there. Once it becomes "Twisted ready" we'll bring
the discussion back here.

Thanks to all.
-- 
exvito



From mithrandi at mithrandi.net  Sat Apr  9 19:48:49 2016
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sun, 10 Apr 2016 01:48:49 +0000
Subject: [Twisted-Python] [ANN] txacme 0.9.0,
	zero-configuration HTTPS for your Twisted app!
Message-ID: <CAMcKhMQr0L2-+ckkL2+V7cSwRKtYX6AsRge4p6c2s9ZA-r7T6Q@mail.gmail.com>

txacme[0][1] provides a TLS endpoint to automatically issue (and renew)
certificates via the Let's Encrypt CA, allowing you to effortlessly turn on
HTTPS for your application. A brief demonstration can be seen here:
https://asciinema.org/a/41758

In support of this, txacme also includes a client implementation of
the draft-ietf-acme-acme-01[2] specification, and a service for
automatically checking and reissuing expired certificates. If the default
zero-configuration endpoint doesn't do what you want, then go wild with
these.

If you have any interest at all in txacme, please take a look at the
currently provided API, and ask questions and/or file issues on GitHub
should there be any aspects of your potential use case that are not covered
by the API as it stands; I would like to use the 0.9.x period to get a
solid API nailed down for the 1.0 release.

[0] https://pypi.python.org/pypi/txacme

[1] https://github.com/mithrandi/txacme

[2] https://tools.ietf.org/html/draft-ietf-acme-acme-01 — support
for draft-ietf-acme-acme-02 will probably be forthcoming once Let's Encrypt
actually supports this server-side.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160410/ba372e0f/attachment-0002.html>

From hawkowl at atleastfornow.net  Sun Apr 10 21:03:24 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Mon, 11 Apr 2016 11:03:24 +0800
Subject: [Twisted-Python] Twisted 16.1.1 Release Announcement
Message-ID: <2C938898-2174-4D85-94A5-C35E0236525A@atleastfornow.net>

On behalf of Twisted Matrix Laboratories, I am honoured to announce the release of Twisted 16.1.1!

This is a small bugfix release in the 16.1 series, fixing a bug where `twistd web` would not output access logs.

For more information, check the NEWS file (link provided below).

You can find the downloads at <https://pypi.python.org/pypi/Twisted> (or alternatively <http://twistedmatrix.com/trac/wiki/Downloads>). The NEWS file is also available at <https://github.com/twisted/twisted/blob/twisted-16.1.1/NEWS>.

Twisted Regards,
Amber Brown
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160411/6785f858/attachment.sig>

From techtonik at gmail.com  Tue Apr 12 07:17:41 2016
From: techtonik at gmail.com (anatoly techtonik)
Date: Tue, 12 Apr 2016 16:17:41 +0300
Subject: [Twisted-Python] Twisted 16.1 Release Announcement
In-Reply-To: <367BC573-64FD-4694-ADA1-C78B5D45E257@atleastfornow.net>
References: <367BC573-64FD-4694-ADA1-C78B5D45E257@atleastfornow.net>
Message-ID: <CAPkN8x+CV-XBYEFrYV+Swipn4Rm_mMFH_+apB3xYOWgxDATvJg@mail.gmail.com>

Hi,

Are there any plans to get back 32-bit wheels for Twisted?



From hawkowl at atleastfornow.net  Tue Apr 12 07:21:40 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Tue, 12 Apr 2016 21:21:40 +0800
Subject: [Twisted-Python] Twisted 16.1 Release Announcement
In-Reply-To: <CAPkN8x+CV-XBYEFrYV+Swipn4Rm_mMFH_+apB3xYOWgxDATvJg@mail.gmail.com>
References: <367BC573-64FD-4694-ADA1-C78B5D45E257@atleastfornow.net>
 <CAPkN8x+CV-XBYEFrYV+Swipn4Rm_mMFH_+apB3xYOWgxDATvJg@mail.gmail.com>
Message-ID: <1B438157-8581-4C69-9E09-822C5A542614@atleastfornow.net>


> On 12 Apr 2016, at 21:17, anatoly techtonik <techtonik at gmail.com> wrote:
> 
> Hi,
> 
> Are there any plans to get back 32-bit wheels for Twisted?
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

Hi,

Yes, sometime, when either Glyph or I have the moment to do builder work and get the needed stuff installed on the builder. They will be Windows 7-compiled 32bit wheels.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160412/69b4326c/attachment.sig>

From techtonik at gmail.com  Tue Apr 12 08:38:38 2016
From: techtonik at gmail.com (anatoly techtonik)
Date: Tue, 12 Apr 2016 17:38:38 +0300
Subject: [Twisted-Python] Twisted 16.1 Release Announcement
In-Reply-To: <1B438157-8581-4C69-9E09-822C5A542614@atleastfornow.net>
References: <367BC573-64FD-4694-ADA1-C78B5D45E257@atleastfornow.net>
 <CAPkN8x+CV-XBYEFrYV+Swipn4Rm_mMFH_+apB3xYOWgxDATvJg@mail.gmail.com>
 <1B438157-8581-4C69-9E09-822C5A542614@atleastfornow.net>
Message-ID: <CAPkN8xJuwS3w1vRmfFvtHDoCyu1F2Pu+QXUnnL=8A-EnRxmBqw@mail.gmail.com>

Awesome. Thanks.

On Tue, Apr 12, 2016 at 4:21 PM, Amber "Hawkie" Brown
<hawkowl at atleastfornow.net> wrote:
>
>> On 12 Apr 2016, at 21:17, anatoly techtonik <techtonik at gmail.com> wrote:
>>
>> Hi,
>>
>> Are there any plans to get back 32-bit wheels for Twisted?
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> Hi,
>
> Yes, sometime, when either Glyph or I have the moment to do builder work and get the needed stuff installed on the builder. They will be Windows 7-compiled 32bit wheels.
>
> - Amber
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
anatoly t.



From itamar at itamarst.org  Wed Apr 13 14:18:22 2016
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 13 Apr 2016 16:18:22 -0400
Subject: [Twisted-Python] Crochet 1.5.0: Use Twisted in Django, Flask,
	or anywhere else
Message-ID: <570EA98E.6010401@itamarst.org>

Do you wish you could:

  * Use the power of Twisted's asynchronous networking in Django, Flask,
    or other threaded applications?
  * Provide a blocking API powered by Twisted underneath, without
    exposing it to the caller?
  * Write a library that provides APIs both for Twisted and non-Twisted
    applications?
  * Use threads more easily inside Twisted applications?

Crochet lets you do all that, and more, by hiding and automatically 
starting the Twisted reactor and providing a blocking API for calling 
into Twisted. If you need to use your library from a normal Twisted 
application you can disable the auto-start functionality. Here's an 
example of using Twisted in a blocking manner:

from __future__ import print_function
from twisted.names import client
from crochet import setup, wait_for
setup()

@wait_for(timeout=5.0)
def gethostbyname(name):
      """Use the Twisted DNS library."""
      d = client.lookupAddress(name)
      d.addCallback(lambda result: result[0][0].payload.dottedQuad())
      return d

if __name__ == '__main__':
      # Application code using the public API - notice it works in a normal
      # blocking manner, with no event loop visible:
      import sys
      name = sys.argv[1]
      ip = gethostbyname(name)
      print(name, "->", ip)

New in 1.5.0 is official Python 3.5 support; Python 2.6, 3.3 and older 
versions of Twisted are no longer officially supported (but are likely 
to still work).

If you need help using Crochet (or just general Twisted or Python help) 
I am currently available for short-term consulting. You can read the 
documentation at https://crochet.readthedocs.org/.

--Itamar Turner-Trauring
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160413/9514cfbd/attachment-0002.html>

From itamar at itamarst.org  Wed Apr 13 14:24:49 2016
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 13 Apr 2016 16:24:49 -0400
Subject: [Twisted-Python] Crochet 1.5.0: Use Twisted in Django, Flask,
 or anywhere else
In-Reply-To: <570EA98E.6010401@itamarst.org>
References: <570EA98E.6010401@itamarst.org>
Message-ID: <570EAB11.2010103@itamarst.org>

I messed up the email headers on this, so PLEASE BE CAREFUL if you're 
replying to this, or the reply will end up spamming 
python-announce-list. Sorry.



From glyph at twistedmatrix.com  Wed Apr 13 16:52:47 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 13 Apr 2016 15:52:47 -0700
Subject: [Twisted-Python] Crochet 1.5.0: Use Twisted in Django, Flask,
	or anywhere else
In-Reply-To: <570EA98E.6010401@itamarst.org>
References: <570EA98E.6010401@itamarst.org>
Message-ID: <BA7004CF-809C-4417-8413-ACBDE294C3D4@twistedmatrix.com>


> On Apr 13, 2016, at 13:18, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> 
> Do you wish you could:
> Use the power of Twisted's asynchronous networking in Django, Flask, or other threaded applications?

Thanks for the update, Itamar!

Do you think maybe it's time to integrate Crochet into Twisted proper, so we can obviate the need for the 'setup()' step, and just have the reactor do that itself?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160413/15fd20f5/attachment-0002.html>

From itamar at itamarst.org  Wed Apr 13 17:50:10 2016
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 13 Apr 2016 19:50:10 -0400
Subject: [Twisted-Python] Crochet 1.5.0: Use Twisted in Django, Flask,
 or anywhere else
In-Reply-To: <BA7004CF-809C-4417-8413-ACBDE294C3D4@twistedmatrix.com>
References: <570EA98E.6010401@itamarst.org>
 <BA7004CF-809C-4417-8413-ACBDE294C3D4@twistedmatrix.com>
Message-ID: <570EDB32.2020701@itamarst.org>

On 04/13/2016 06:52 PM, Glyph wrote:
>
> Do you think maybe it's time to integrate Crochet into Twisted proper, 
> so we can obviate the need for the 'setup()' step, and just have the 
> reactor do that itself?
>
Well, setup() runs the reactor in a thread, which is probably not what 
you want in a regular Twisted program. For Twisted-native applications 
interacting with Crochet you don't want to do the auto-reactor mode, so 
you call no_setup() earlier in startup process, and then subsequent 
setup() calls (e.g. from other packages) are ignored.

So given it would have to have the same API as currently, I'm not sure 
what the benefit of integrating it into Twisted would be.



From glyph at twistedmatrix.com  Wed Apr 13 20:57:23 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 13 Apr 2016 19:57:23 -0700
Subject: [Twisted-Python] Crochet 1.5.0: Use Twisted in Django, Flask,
	or anywhere else
In-Reply-To: <570EDB32.2020701@itamarst.org>
References: <570EA98E.6010401@itamarst.org>
 <BA7004CF-809C-4417-8413-ACBDE294C3D4@twistedmatrix.com>
 <570EDB32.2020701@itamarst.org>
Message-ID: <CFE1BD14-65B5-4C6D-9E24-7E6EABA7C64B@twistedmatrix.com>


> On Apr 13, 2016, at 16:50, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> 
> On 04/13/2016 06:52 PM, Glyph wrote:
>> 
>> Do you think maybe it's time to integrate Crochet into Twisted proper, so we can obviate the need for the 'setup()' step, and just have the reactor do that itself?
>> 
> Well, setup() runs the reactor in a thread, which is probably not what you want in a regular Twisted program. For Twisted-native applications interacting with Crochet you don't want to do the auto-reactor mode, so you call no_setup() earlier in startup process, and then subsequent setup() calls (e.g. from other packages) are ignored.

One advantage of having this directly supported in Twisted, then, would be calling no_setup() (or equivalent) early on in 'twistd' and equivalent tools, so that crochet-using modules could be imported as part of a twisted-native plugin?

> So given it would have to have the same API as currently, I'm not sure what the benefit of integrating it into Twisted would be.

It might also be able to have a slightly different API.  For example, maybe setup() or some analogue thereof could set up an 'atexit' hook that runs the reactor if nobody gets around to calling run() before it exits?

-glyph


From itamar at itamarst.org  Thu Apr 14 06:45:58 2016
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 14 Apr 2016 08:45:58 -0400
Subject: [Twisted-Python] Crochet 1.5.0: Use Twisted in Django, Flask,
 or anywhere else
In-Reply-To: <CFE1BD14-65B5-4C6D-9E24-7E6EABA7C64B@twistedmatrix.com>
References: <570EA98E.6010401@itamarst.org>
 <BA7004CF-809C-4417-8413-ACBDE294C3D4@twistedmatrix.com>
 <570EDB32.2020701@itamarst.org>
 <CFE1BD14-65B5-4C6D-9E24-7E6EABA7C64B@twistedmatrix.com>
Message-ID: <570F9106.4000300@itamarst.org>

On 04/13/2016 10:57 PM, Glyph wrote:
> One advantage of having this directly supported in Twisted, then, would be calling no_setup() (or equivalent) early on in 'twistd' and equivalent tools, so that crochet-using modules could be imported as part of a twisted-native plugin?
That would be pretty cool, yes, although it doesn't strictly require 
Crochet be part of Twisted.
> It might also be able to have a slightly different API.  For example, maybe setup() or some analogue thereof could set up an 'atexit' hook that runs the reactor if nobody gets around to calling run() before it exits?
>
Huh. Well... Crochet exits when main thread exits, so if atexit was 
called that means there's no more threads. So that probably wouldn't work.

More broadly, Crochet is a pile of these sort of horrible hacks, 
encapsulated in one place and hidden as much as possible. But there's 
rough edges that poke out occasionally. I'm not sure Twisted ought to be 
that kind of library.




From glyph at twistedmatrix.com  Thu Apr 14 14:38:51 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 14 Apr 2016 13:38:51 -0700
Subject: [Twisted-Python] Crochet 1.5.0: Use Twisted in Django, Flask,
	or anywhere else
In-Reply-To: <570F9106.4000300@itamarst.org>
References: <570EA98E.6010401@itamarst.org>
 <BA7004CF-809C-4417-8413-ACBDE294C3D4@twistedmatrix.com>
 <570EDB32.2020701@itamarst.org>
 <CFE1BD14-65B5-4C6D-9E24-7E6EABA7C64B@twistedmatrix.com>
 <570F9106.4000300@itamarst.org>
Message-ID: <6AD9BADC-9EB2-4CC6-8630-995F81117799@twistedmatrix.com>


> On Apr 14, 2016, at 5:45 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> 
> Crochet is a pile of these sort of horrible hacks, encapsulated in one place and hidden as much as possible. But there's rough edges that poke out occasionally. I'm not sure Twisted ought to be that kind of library.


We already have an IMAP server so I feel like that ship may have sailed ;-)

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160414/34fe187c/attachment-0002.html>

From jml at mumak.net  Fri Apr 15 02:34:04 2016
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 15 Apr 2016 08:34:04 +0000
Subject: [Twisted-Python] Crochet 1.5.0: Use Twisted in Django, Flask,
 or anywhere else
In-Reply-To: <BA7004CF-809C-4417-8413-ACBDE294C3D4@twistedmatrix.com>
References: <570EA98E.6010401@itamarst.org>
 <BA7004CF-809C-4417-8413-ACBDE294C3D4@twistedmatrix.com>
Message-ID: <CAHZ8tna_4tJKsabQyPE=5G5D6Xjnz1opsGT8YzX9VcpgWEtcjQ@mail.gmail.com>

On Wed, 13 Apr 2016 at 23:53 Glyph <glyph at twistedmatrix.com> wrote:

>
> On Apr 13, 2016, at 13:18, Itamar Turner-Trauring <itamar at itamarst.org>
> wrote:
>
> Do you wish you could:
>
>    - Use the power of Twisted's asynchronous networking in Django, Flask,
>    or other threaded applications?
>
> Thanks for the update, Itamar!
>
> Do you think maybe it's time to integrate Crochet into Twisted proper, so
> we can obviate the need for the 'setup()' step, and just have the reactor
> do that itself?
>
>
 +1 on integrating this functionality into Twisted.

I wrote
https://github.com/testing-cabal/testtools/blob/master/testtools/twistedsupport/_spinner.py
before
Crotchet came out. It's been used for years as part of testtools with great
success. I don't advocate integrating it into Twisted, but I think that
whoever integrates Crotchet should at least take a look in case it catches
edge cases that Crotchet misses.

jml
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160415/24bd5e2c/attachment-0002.html>

From twisted-python at 2xlp.com  Tue Apr 19 17:32:34 2016
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Tue, 19 Apr 2016 19:32:34 -0400
Subject: [Twisted-Python] twisted listening on UDP port, why?
Message-ID: <71F0C715-C66B-44F8-9D8F-DC9CBBFF1C69@2xlp.com>

I'm trying to lock down a box, and came across a peculiarity with a twisted dameon -- it's binding to 0.0.0.0 for UDP on an arbitrary port

I can'f figure out why this is happening -- I'm not consciously/explicitly using anything on UDP, and the port changes every time I start up a daemon.

Does anyone have a clue what it could be?





From glyph at twistedmatrix.com  Tue Apr 19 18:01:22 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 19 Apr 2016 17:01:22 -0700
Subject: [Twisted-Python] twisted listening on UDP port, why?
In-Reply-To: <71F0C715-C66B-44F8-9D8F-DC9CBBFF1C69@2xlp.com>
References: <71F0C715-C66B-44F8-9D8F-DC9CBBFF1C69@2xlp.com>
Message-ID: <7EFE592B-A526-4DE3-8C2A-275A0336D439@twistedmatrix.com>


> On Apr 19, 2016, at 4:32 PM, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:
> 
> I'm trying to lock down a box, and came across a peculiarity with a twisted dameon -- it's binding to 0.0.0.0 for UDP on an arbitrary port
> 
> I can'f figure out why this is happening -- I'm not consciously/explicitly using anything on UDP, and the port changes every time I start up a daemon.
> 
> Does anyone have a clue what it could be?

Perhaps this is libc's DNS client?  Twisted doesn't do anything like this.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160419/25372cb0/attachment-0002.html>

From p.mayers at imperial.ac.uk  Wed Apr 20 05:33:44 2016
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 20 Apr 2016 12:33:44 +0100
Subject: [Twisted-Python] twisted listening on UDP port, why?
In-Reply-To: <7EFE592B-A526-4DE3-8C2A-275A0336D439@twistedmatrix.com>
References: <71F0C715-C66B-44F8-9D8F-DC9CBBFF1C69@2xlp.com>
 <7EFE592B-A526-4DE3-8C2A-275A0336D439@twistedmatrix.com>
Message-ID: <57176918.6030609@imperial.ac.uk>

On 20/04/16 01:01, Glyph wrote:

> Perhaps this is libc's DNS client?  Twisted doesn't do anything like this.

It does something similar with win32reactor IIRC?

http://twistedmatrix.com/trac/browser/tags/releases/twisted-16.1.1/twisted/internet/posixbase.py#L60

...but that binds to 127.0.0.1 not 0.0.0.0

glibc doesn't hold it's DNS sockets open AFAIK - it closes them once the 
reply is done.



From exarkun at twistedmatrix.com  Wed Apr 20 07:22:58 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Wed, 20 Apr 2016 09:22:58 -0400
Subject: [Twisted-Python] twisted listening on UDP port, why?
In-Reply-To: <57176918.6030609@imperial.ac.uk>
References: <71F0C715-C66B-44F8-9D8F-DC9CBBFF1C69@2xlp.com>
 <7EFE592B-A526-4DE3-8C2A-275A0336D439@twistedmatrix.com>
 <57176918.6030609@imperial.ac.uk>
Message-ID: <CAEeXt4Ms6RUUCEPRkWEio8XwHtoFFigb29C+1X=kWDnEW0e14Q@mail.gmail.com>

Hi,

What do the logs for the app say?  Twisted logs a message when it binds a
UDP port.

Or, another though, you could put a breakpoint on listenUDP (or socket.bind
or something) and then run the process under pdb and look at the stack
trace.

You could also try sending some traffic to the port and see what happens.
:)  Maybe you'll get something back that identifies it or maybe you'll
provoke some more logging code somewhere.

Jean-Paul

On Wed, Apr 20, 2016 at 7:33 AM, Phil Mayers <p.mayers at imperial.ac.uk>
wrote:

> On 20/04/16 01:01, Glyph wrote:
>
> Perhaps this is libc's DNS client?  Twisted doesn't do anything like this.
>>
>
> It does something similar with win32reactor IIRC?
>
>
> http://twistedmatrix.com/trac/browser/tags/releases/twisted-16.1.1/twisted/internet/posixbase.py#L60
>
> ...but that binds to 127.0.0.1 not 0.0.0.0
>
> glibc doesn't hold it's DNS sockets open AFAIK - it closes them once the
> reply is done.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160420/59632733/attachment-0002.html>

From twisted-python at 2xlp.com  Wed Apr 20 11:31:15 2016
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 20 Apr 2016 13:31:15 -0400
Subject: [Twisted-Python] twisted listening on UDP port, why?
In-Reply-To: <CAEeXt4Ms6RUUCEPRkWEio8XwHtoFFigb29C+1X=kWDnEW0e14Q@mail.gmail.com>
References: <71F0C715-C66B-44F8-9D8F-DC9CBBFF1C69@2xlp.com>
 <7EFE592B-A526-4DE3-8C2A-275A0336D439@twistedmatrix.com>
 <57176918.6030609@imperial.ac.uk>
 <CAEeXt4Ms6RUUCEPRkWEio8XwHtoFFigb29C+1X=kWDnEW0e14Q@mail.gmail.com>
Message-ID: <67331142-5C53-4144-A270-B3D8D377BAAE@2xlp.com>

Thanks all.

I was going to write everything below, then finally tracked it down.

A specific library was keeping the port open.  I'm tracking down how/why right now.

The worry on this, FYI, was that there is a critical vulnerability in glibc from a few months ago where a server could be compromised via UDP traffic.

One of my servers was compromised last week, and I think the vector was in-part exploiting that bug (it was also exploited by redis, but redis was secured, so somehow it got loosened).


On Apr 20, 2016, at 9:22 AM, Jean-Paul Calderone wrote:

> What do the logs for the app say?  Twisted logs a message when it binds a UDP port.

Nothing.  I don't think Twisted itself is doing this, I think it's just happening when other code is running in twisted.

> You could also try sending some traffic to the port and see what happens. :)  Maybe you'll get something back that identifies it or maybe you'll provoke some more logging code somewhere.

That was my first attempt!  It just closed the connection no matter what I sent.  I also made about 20 test cases.


> Or, another though, you could put a breakpoint on listenUDP (or socket.bind or something) and then run the process under pdb and look at the stack trace.

Aggressive use of pdb.set_trace() on some modified code finally let me find the issue.  





From thughes at thegoldfish.org  Wed Apr 20 11:37:50 2016
From: thughes at thegoldfish.org (Tim Hughes)
Date: Wed, 20 Apr 2016 18:37:50 +0100
Subject: [Twisted-Python] Cause epollreactor to busyspin
Message-ID: <6fc57744dc8398942db654d22d855dac@imap.gmail.com>


Hi All,

I have a latency sensitive application that gets affected when it is 
moved between cores or the system has to wake from idling. I would like 
to run the thread in as tight a loop as possible and to do this i need 
to cause epollreactor to busyspin on receiving data. I have worked out 
how to do it by editing the twisted code directly by hard coding the 
value of `timeout` to be 0 at this location in the code 
https://github.com/twisted/twisted/blob/f074ba3d5083aa1503abcf194aece327e7f84805/twisted/internet/epollreactor.py#L370

Is it possible to actually set this on the reactor in a more sensible 
way so I don't need to patch the twisted codebase. ? Below is basically 
what I am doing.


```
     def doPoll(self, timeout):
         """
         Poll the poller for new events.
         """
+       timeout = 0
-       if timeout is None:
-           timeout = -1  # Wait indefinitely.

         try:
```

Cheers

Tim Hughes




From twisted-python at 2xlp.com  Wed Apr 20 16:42:59 2016
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 20 Apr 2016 18:42:59 -0400
Subject: [Twisted-Python] twisted listening on UDP port, why?
In-Reply-To: <67331142-5C53-4144-A270-B3D8D377BAAE@2xlp.com>
References: <71F0C715-C66B-44F8-9D8F-DC9CBBFF1C69@2xlp.com>
 <7EFE592B-A526-4DE3-8C2A-275A0336D439@twistedmatrix.com>
 <57176918.6030609@imperial.ac.uk>
 <CAEeXt4Ms6RUUCEPRkWEio8XwHtoFFigb29C+1X=kWDnEW0e14Q@mail.gmail.com>
 <67331142-5C53-4144-A270-B3D8D377BAAE@2xlp.com>
Message-ID: <9A3F39F0-5A70-4054-AEDF-9489F418D8FD@2xlp.com>


On Apr 20, 2016, at 1:31 PM, Jonathan Vanasco wrote:

> A specific library was keeping the port open.  I'm tracking down how/why right now.

So this was fun <sarcasm> thing to learn...

An undocumented (yay) feature of python appears to be... python binds to a random port on all interfaces (0.0.0.0) once you send UDP data through it.  I assume this is to allow for a response to come back.  

We're using statsd for metrics in our twisted daemon and detect issues post-deployment.

If you haven't used it, it's a node.js daemon from etsy that collects udp data and pipes it into python's graphite/carbon libraries.  Then you get fancy graphics.

    # this does nothing...
    sock = socket.socket(family, socket.SOCK_DGRAM)
    # but this binds to 0.0.0.0
    sock.sendto(data.encode('ascii'), addr)

Sending data to the stats collector on 127.0.0.1:8125 inherently made python bind to 0.0.0.0, and on a port that seems to be in the 40000-60000 range.  
Since a socket to the stats collector is only created once for the process, Python holds that open the entire time.  





From glyph at twistedmatrix.com  Wed Apr 20 19:15:55 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 20 Apr 2016 18:15:55 -0700
Subject: [Twisted-Python] twisted listening on UDP port, why?
In-Reply-To: <9A3F39F0-5A70-4054-AEDF-9489F418D8FD@2xlp.com>
References: <71F0C715-C66B-44F8-9D8F-DC9CBBFF1C69@2xlp.com>
 <7EFE592B-A526-4DE3-8C2A-275A0336D439@twistedmatrix.com>
 <57176918.6030609@imperial.ac.uk>
 <CAEeXt4Ms6RUUCEPRkWEio8XwHtoFFigb29C+1X=kWDnEW0e14Q@mail.gmail.com>
 <67331142-5C53-4144-A270-B3D8D377BAAE@2xlp.com>
 <9A3F39F0-5A70-4054-AEDF-9489F418D8FD@2xlp.com>
Message-ID: <55E1D41C-5CF5-412D-9EC6-94ED64262522@twistedmatrix.com>


> On Apr 20, 2016, at 3:42 PM, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:
> 
> 
> On Apr 20, 2016, at 1:31 PM, Jonathan Vanasco wrote:
> 
>> A specific library was keeping the port open.  I'm tracking down how/why right now.
> 
> So this was fun <sarcasm> thing to learn...
> 
> An undocumented (yay) feature of python appears to be... python binds to a random port on all interfaces (0.0.0.0) once you send UDP data through it.  I assume this is to allow for a response to come back.  

This isn't so much a feature of Python as it is a feature of the BSD sockets API.  Sending traffic through a socket, whether it's TCP or UDP, has to bind a client port.  Given the nature of UDP, binding on all interfaces is the expectation unless you specify.

I didn't have time to test a simple C program before sending this message, but https://github.com/python/cpython/blob/master/Modules/socketmodule.c <https://github.com/python/cpython/blob/master/Modules/socketmodule.c> only calls "bind()" from sock_bind, not from send(), nor does https://github.com/python/cpython/blob/master/Lib/socket.py <https://github.com/python/cpython/blob/master/Lib/socket.py> engage in any such shenanigans.

> We're using statsd for metrics in our twisted daemon and detect issues post-deployment.
> 
> If you haven't used it, it's a node.js daemon from etsy that collects udp data and pipes it into python's graphite/carbon libraries.  Then you get fancy graphics.

There's also a Twisted version :) https://pypi.python.org/pypi/txStatsD <https://pypi.python.org/pypi/txStatsD>

txStatsD contains both server and client, so maybe you want to use that client if you want better control over the UDP port.

>    # this does nothing...
>    sock = socket.socket(family, socket.SOCK_DGRAM)
>    # but this binds to 0.0.0.0
>    sock.sendto(data.encode('ascii'), addr)
> 
> Sending data to the stats collector on 127.0.0.1:8125 inherently made python bind to 0.0.0.0, and on a port that seems to be in the 40000-60000 range.  

That range is the ephemeral client port range <https://en.wikipedia.org/wiki/Ephemeral_port <https://en.wikipedia.org/wiki/Ephemeral_port>> so that's what would be expected of an implicitly-bound socket.

> Since a socket to the stats collector is only created once for the process, Python holds that open the entire time.

If it needs to send UDP traffic, it needs to be able to receive UDP traffic as well.  You can bind it to a more specific interface, but you can't prevent the port from opening to receive traffic.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160420/bdc599e3/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Apr 20 20:57:06 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 20 Apr 2016 19:57:06 -0700
Subject: [Twisted-Python] Cause epollreactor to busyspin
In-Reply-To: <6fc57744dc8398942db654d22d855dac@imap.gmail.com>
References: <6fc57744dc8398942db654d22d855dac@imap.gmail.com>
Message-ID: <910ADBD6-147C-4983-BAF3-BB36B1AA89A0@twistedmatrix.com>


> On Apr 20, 2016, at 10:37, Tim Hughes <thughes at thegoldfish.org> wrote:
> 
> Hi All,
> 
> I have a latency sensitive application that gets affected when it is moved between cores or the system has to wake from idling.

Can you explain "gets affected" in more detail?  If moving between cores is the issue, could you set its CPU affinity?

> I would like to run the thread in as tight a loop as possible and to do this i need to cause epollreactor to busyspin on receiving data.

I am very curious about your application now :)

> I have worked out how to do it by editing the twisted code directly by hard coding the value of `timeout` to be 0 at this location in the code https://github.com/twisted/twisted/blob/f074ba3d5083aa1503abcf194aece327e7f84805/twisted/internet/epollreactor.py#L370

> Is it possible to actually set this on the reactor in a more sensible way so I don't need to patch the twisted codebase. ? Below is basically what I am doing.

You can achieve this with a tiny bit of extra overhead by doing something like this:

def cant_sleep_clown_will_eat_me():
    reactor.callLater(0, cant_sleep_clown_will_eat_me)
cant_sleep_clown_will_eat_me()

Does this actually improve your latency?

-glyph


From thughes at thegoldfish.org  Thu Apr 21 04:30:58 2016
From: thughes at thegoldfish.org (Tim Hughes)
Date: Thu, 21 Apr 2016 11:30:58 +0100
Subject: [Twisted-Python] Cause epollreactor to busyspin
In-Reply-To: <910ADBD6-147C-4983-BAF3-BB36B1AA89A0@twistedmatrix.com>
References: <6fc57744dc8398942db654d22d855dac@imap.gmail.com>
 <910ADBD6-147C-4983-BAF3-BB36B1AA89A0@twistedmatrix.com>
Message-ID: <3e9fdfd7ec98c8a681cdcfd64ab2851e@imap.gmail.com>

On 2016-04-21 03:57, Glyph wrote:
>> On Apr 20, 2016, at 10:37, Tim Hughes <thughes at thegoldfish.org> wrote:
>> 
>> Hi All,
>> 
>> I have a latency sensitive application that gets affected when it is 
>> moved between cores or the system has to wake from idling.
> 
> Can you explain "gets affected" in more detail?  If moving between
> cores is the issue, could you set its CPU affinity?

That is exactly what I would do with a physical machine but 
unfortunately where I need to use it is in china and I only have xen 
virtual machines available. I know this isn't the best situation but 
unfortunately that is all I can get in these locations.
> 
>> I would like to run the thread in as tight a loop as possible and to 
>> do this i need to cause epollreactor to busyspin on receiving data.
> 
> I am very curious about your application now :)

We are using it to test the performance of streaming financial market 
data over different CDN providers to different cities around the world. 
Currently trying to jump through the hoops to be able to opensource it 
and stick it on github. It isn't that exciting, it is basically a 
modified LineReceiver with the delimiter set to \x01 and the messages 
are key=value pairs at a peak rate of approx 130000 pairs per second 
https://en.wikipedia.org/wiki/Financial_Information_eXchange

> 
>> I have worked out how to do it by editing the twisted code directly by 
>> hard coding the value of `timeout` to be 0 at this location in the 
>> code 
>> https://github.com/twisted/twisted/blob/f074ba3d5083aa1503abcf194aece327e7f84805/twisted/internet/epollreactor.py#L370
> 
>> Is it possible to actually set this on the reactor in a more sensible 
>> way so I don't need to patch the twisted codebase. ? Below is 
>> basically what I am doing.
> 
> You can achieve this with a tiny bit of extra overhead by doing
> something like this:
> 
> def cant_sleep_clown_will_eat_me():
>     reactor.callLater(0, cant_sleep_clown_will_eat_me)
> cant_sleep_clown_will_eat_me()

Will give this a go

> 
> Does this actually improve your latency?
> 
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From thughes at thegoldfish.org  Thu Apr 21 11:26:48 2016
From: thughes at thegoldfish.org (Tim Hughes)
Date: Thu, 21 Apr 2016 18:26:48 +0100
Subject: [Twisted-Python] Cause epollreactor to busyspin
In-Reply-To: <3e9fdfd7ec98c8a681cdcfd64ab2851e@imap.gmail.com>
References: <6fc57744dc8398942db654d22d855dac@imap.gmail.com>
 <910ADBD6-147C-4983-BAF3-BB36B1AA89A0@twistedmatrix.com>
 <3e9fdfd7ec98c8a681cdcfd64ab2851e@imap.gmail.com>
Message-ID: <da5b1befd1d6ee261fa8993761a4edbb@imap.gmail.com>

On 2016-04-21 11:30, Tim Hughes wrote:
> On 2016-04-21 03:57, Glyph wrote:
>>> On Apr 20, 2016, at 10:37, Tim Hughes <thughes at thegoldfish.org> 
>>> wrote:
>>> 
>>> Hi All,
>>> 
>>> I have a latency sensitive application that gets affected when it is 
>>> moved between cores or the system has to wake from idling.
>> 
>> Can you explain "gets affected" in more detail?  If moving between
>> cores is the issue, could you set its CPU affinity?
> 
> That is exactly what I would do with a physical machine but
> unfortunately where I need to use it is in china and I only have xen
> virtual machines available. I know this isn't the best situation but
> unfortunately that is all I can get in these locations.
>> 
>>> I would like to run the thread in as tight a loop as possible and to 
>>> do this i need to cause epollreactor to busyspin on receiving data.
>> 
>> I am very curious about your application now :)
> 
> We are using it to test the performance of streaming financial market
> data over different CDN providers to different cities around the
> world. Currently trying to jump through the hoops to be able to
> opensource it and stick it on github. It isn't that exciting, it is
> basically a modified LineReceiver with the delimiter set to \x01 and
> the messages are key=value pairs at a peak rate of approx 130000 pairs
> per second
> https://en.wikipedia.org/wiki/Financial_Information_eXchange
> 

Hoops have been jumped and it is on github at 
https://github.com/LMAX-Exchange/txfixclient


>> 
>>> I have worked out how to do it by editing the twisted code directly 
>>> by hard coding the value of `timeout` to be 0 at this location in the 
>>> code 
>>> https://github.com/twisted/twisted/blob/f074ba3d5083aa1503abcf194aece327e7f84805/twisted/internet/epollreactor.py#L370
>> 
>>> Is it possible to actually set this on the reactor in a more sensible 
>>> way so I don't need to patch the twisted codebase. ? Below is 
>>> basically what I am doing.
>> 
>> You can achieve this with a tiny bit of extra overhead by doing
>> something like this:
>> 
>> def cant_sleep_clown_will_eat_me():
>>     reactor.callLater(0, cant_sleep_clown_will_eat_me)
>> cant_sleep_clown_will_eat_me()
> 
> Will give this a go
> 
>> 
>> Does this actually improve your latency?
>> 
>> -glyph
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From twisted-python at 2xlp.com  Fri Apr 22 20:36:41 2016
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Fri, 22 Apr 2016 22:36:41 -0400
Subject: [Twisted-Python] twisted listening on UDP port, why?
In-Reply-To: <55E1D41C-5CF5-412D-9EC6-94ED64262522@twistedmatrix.com>
References: <71F0C715-C66B-44F8-9D8F-DC9CBBFF1C69@2xlp.com>
 <7EFE592B-A526-4DE3-8C2A-275A0336D439@twistedmatrix.com>
 <57176918.6030609@imperial.ac.uk>
 <CAEeXt4Ms6RUUCEPRkWEio8XwHtoFFigb29C+1X=kWDnEW0e14Q@mail.gmail.com>
 <67331142-5C53-4144-A270-B3D8D377BAAE@2xlp.com>
 <9A3F39F0-5A70-4054-AEDF-9489F418D8FD@2xlp.com>
 <55E1D41C-5CF5-412D-9EC6-94ED64262522@twistedmatrix.com>
Message-ID: <EB17227D-5D61-4743-8E9D-D477414CC312@2xlp.com>

Thanks for all this.  

A few quick notes:

On Apr 20, 2016, at 9:15 PM, Glyph wrote:

> This isn't so much a feature of Python as it is a feature of the BSD sockets API.  Sending traffic through a socket, whether it's TCP or UDP, has to bind a client port.  Given the nature of UDP, binding on all interfaces is the expectation unless you specify.
> 
> I didn't have time to test a simple C program before sending this message, but https://github.com/python/cpython/blob/master/Modules/socketmodule.c only calls "bind()" from sock_bind, not from send(), nor does https://github.com/python/cpython/blob/master/Lib/socket.py engage in any such shenanigans.

The 'feature' of Python is a few things:

From what I could tell, the actual communication and binding happens somewhere in the c module.  

if you just construct socket:

    sock = socket.socket(family, socket.SOCK_DGRAM)

it will defer the bind on 0.0.0.0 until the first time data is emitted:

    sock.sendto(data.encode('ascii'), addr)

That's one of the things that drove me crazy (and the reason why I'm posting more than a simple "thank you", in case someone else gets stumped in the future).  
There's no call to anything with a "bind" involved in any python code.  it just happens behind the scenes.

> There's also a Twisted version :) https://pypi.python.org/pypi/txStatsD
> 
> txStatsD contains both server and client, so maybe you want to use that client if you want better control over the UDP port.

yeah, I'm gonna do that ;)

> That range is the ephemeral client port range <https://en.wikipedia.org/wiki/Ephemeral_port> so that's what would be expected of an implicitly-bound socket.

THANK YOU.  I could not remember that name.  I knew about the ephemeral port range, but have not seen that term in 10+ years.  THANK YOU!!!!


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160422/9c424490/attachment-0002.html>

From p.mayers at imperial.ac.uk  Sat Apr 23 02:52:35 2016
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat, 23 Apr 2016 09:52:35 +0100
Subject: [Twisted-Python] twisted listening on UDP port, why?
In-Reply-To: <EB17227D-5D61-4743-8E9D-D477414CC312@2xlp.com>
References: <71F0C715-C66B-44F8-9D8F-DC9CBBFF1C69@2xlp.com>
 <7EFE592B-A526-4DE3-8C2A-275A0336D439@twistedmatrix.com>
 <57176918.6030609@imperial.ac.uk>
 <CAEeXt4Ms6RUUCEPRkWEio8XwHtoFFigb29C+1X=kWDnEW0e14Q@mail.gmail.com>
 <67331142-5C53-4144-A270-B3D8D377BAAE@2xlp.com>
 <9A3F39F0-5A70-4054-AEDF-9489F418D8FD@2xlp.com>
 <55E1D41C-5CF5-412D-9EC6-94ED64262522@twistedmatrix.com>
 <EB17227D-5D61-4743-8E9D-D477414CC312@2xlp.com>
Message-ID: <571B37D3.6060702@imperial.ac.uk>

On 23/04/16 03:36, Jonathan Vanasco wrote:
> Thanks for all this.
>
> A few quick notes:
>
> On Apr 20, 2016, at 9:15 PM, Glyph wrote:
>
>> This isn't so much a feature of Python as it is a feature of the BSD
>> sockets API.  Sending traffic through a socket, whether it's TCP or
>> UDP, has to bind a client port.  Given the nature of UDP, binding on
>> all interfaces is the expectation unless you specify.
>>
>> I didn't have time to test a simple C program before sending this
>> message, but
>> https://github.com/python/cpython/blob/master/Modules/socketmodule.c only
>> calls "bind()" from sock_bind, not from send(), nor does
>> https://github.com/python/cpython/blob/master/Lib/socket.py engage in
>> any such shenanigans.
>
> The 'feature' of Python is a few things:
>
>  From what I could tell, the actual communication and binding happens
> somewhere in the c module.
>

Not so. It's down inside the kernel. All applications using the socket 
API in this way will display this behaviour, regardless of language.

Seriously, try it and see:

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/ip.h>
#include <unistd.h>
#include <stdio.h>

int main(int argc, char* argv[]) {
	int s,r;
	struct sockaddr_in dst;
	dst.sin_family = AF_INET;
	dst.sin_port = htons(37);
	dst.sin_addr.s_addr = INADDR_LOOPBACK;

	s = socket(AF_INET, SOCK_DGRAM, 0);
	printf("socket created\n");
	sleep(30);
	sendto(s, "foo", 3, 0, &dst, sizeof(dst));
	printf("socket used\n");
	sleep(30);
	return 0;
}

Compile & run the program and quickly lsof the process, you'll see:

test    16258 pjm3    3u  sock    0,8      0t0 87111053 protocol: UDP

...wait until it has printed that it has used the socket, repeat and 
you'll see:

test    16258 pjm3    3u  IPv4 87111053      0t0     UDP *:51669

As glyph says, this is an inherent feature of the socket API. When you 
create a socket, it is unbound because you might be about to call bind() 
yourself.

If you then use it without binding it, the kernel has to allocate a 
source port, and in turn an interface, and the only sensible choice 
absent any instructions from userland is INADDR_ANY.

This is definitely not Python doing this.



From rutt.4 at osu.edu  Sun Apr 24 11:37:08 2016
From: rutt.4 at osu.edu (Benjamin Rutt)
Date: Sun, 24 Apr 2016 13:37:08 -0400
Subject: [Twisted-Python] waiting on any deferred in a list?
Message-ID: <CAMWA1_p7SVZtXS3ZdVt87QaHTwo9KVO+S+FpGSkX4-eeiUFmyQ@mail.gmail.com>

Hi all,

I've been using a pattern for quite some time to collect a bunch o'
deferreds in a list and then yield on them one at a time.  Here is some
untested pseudocode:

---
@defer.inlineCallbacks
def foo( ls ):
    defs = []

    # get all the deferreds going
    for item in ls:
        d = some_deferred_returning_function( item )
        defs.append( ( item, d ) ) # associate item with deferred

    # process results not as they come in but in the original order
    for ( item, d ) in defs:
        result = yield d
        print 'The result on item', item, 'is', result
---

In this way, I can get good concurrency (by spinning up all deferreds at
once) but also I can iterate on the results using a straightforward
traversal of the list data structure and yield.  This is working great for
me.  But on occasion I'd prefer that I can access the results not in the
order that I originally got, but rather in the order of completion of the
deferreds, so the faster ones come in first, and the slower ones don't hold
up faster ones.  The usual case when I'd want this is when I have "slower"
deferreds near the front, and "faster" deferreds near the back.  I can't
help but think that there's some async data structure out there for me that
can solve this.  I've used DeferredList before, and I can't see that it
does what I want:  it gives you a choice between getting all results only
when they are all done (default behavior), or getting the first one that's
ready (fireOnOneCallback=True).  I want all results, but I want the
processing of the results to unfold as the results come in.

Thanks for any ideas.
-- 
Benjamin Rutt
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160424/f718fb58/attachment-0002.html>

From meejah at meejah.ca  Sun Apr 24 12:06:46 2016
From: meejah at meejah.ca (meejah)
Date: Sun, 24 Apr 2016 22:06:46 +0400
Subject: [Twisted-Python] waiting on any deferred in a list?
In-Reply-To: <CAMWA1_p7SVZtXS3ZdVt87QaHTwo9KVO+S+FpGSkX4-eeiUFmyQ@mail.gmail.com>
 (Benjamin Rutt's message of "Sun, 24 Apr 2016 13:37:08 -0400")
References: <CAMWA1_p7SVZtXS3ZdVt87QaHTwo9KVO+S+FpGSkX4-eeiUFmyQ@mail.gmail.com>
Message-ID: <86fuuazxs9.fsf@atlantis.meejah.ca>


I think you'll want an idiom kind of like this (also untested ;):

    @inlineCallbacks
    def foo(ls):
        defs = []

        def process_an_item(result, item):
            print("Item '{}' done: {}".format(item, result))

        for item in ls:
            d = something_async(item)
            d.addCallback(process_an_item, item)
            defs.append(d)
        yield DeferredList(defs)

Error-handling left as an exercise for the reader :)

-- 
meejah



From wasilak at gmail.com  Sun Apr 24 13:21:41 2016
From: wasilak at gmail.com (Maciej Wasilak)
Date: Sun, 24 Apr 2016 21:21:41 +0200
Subject: [Twisted-Python] IPv6 comparison handling
Message-ID: <CAFUtXGzx7UOg98Nj4s+ZWH1bfdBxUOmjh7uAR8RSv=o77C=Ldg@mail.gmail.com>

Hello,

In my UDP Twisted based library there is a problem with IPv6 addresses
representation. Addresses are compared as simple strings, and it
sometimes causes mismatches:

"fe80::aaaa:bbff:fecc:dddd" should be equal to
"fe80:0000:0000:0000:aaaa:bbff:fecc:dddd"

I've noticed that Python 3 has nice new module "ipaddress" exactly for
this kind of problems, and it has been backported to Python 2.7.
Before I add it as a new dependency I wanted to ask if maybe Twisted
has some other suggested solution for this problem?

Best Regards
Maciej Wasilak



From glyph at twistedmatrix.com  Sun Apr 24 20:39:01 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 24 Apr 2016 19:39:01 -0700
Subject: [Twisted-Python] IPv6 comparison handling
In-Reply-To: <CAFUtXGzx7UOg98Nj4s+ZWH1bfdBxUOmjh7uAR8RSv=o77C=Ldg@mail.gmail.com>
References: <CAFUtXGzx7UOg98Nj4s+ZWH1bfdBxUOmjh7uAR8RSv=o77C=Ldg@mail.gmail.com>
Message-ID: <1490723A-2F5E-43CE-AA43-52CB200BD98F@twistedmatrix.com>


> On Apr 24, 2016, at 12:21 PM, Maciej Wasilak <wasilak at gmail.com> wrote:
> 
> Hello,
> 
> In my UDP Twisted based library there is a problem with IPv6 addresses
> representation. Addresses are compared as simple strings, and it
> sometimes causes mismatches:
> 
> "fe80::aaaa:bbff:fecc:dddd" should be equal to
> "fe80:0000:0000:0000:aaaa:bbff:fecc:dddd"
> 
> I've noticed that Python 3 has nice new module "ipaddress" exactly for
> this kind of problems, and it has been backported to Python 2.7.
> Before I add it as a new dependency I wanted to ask if maybe Twisted
> has some other suggested solution for this problem?

You should probably use ipaddress.  Twisted's facilities in this area are somewhat primitive, and should be improved; particularly, you _should_ be able to do:

a = IPv6Address("UDP", "fe80::", 0)
b = IPv6Address("UDP", "fe80::00:00", 0)
a == b

but right now that doesn't work.

A patch that fixes it would be much appreciated though!

-glyph




From twisted-python at 2xlp.com  Mon Apr 25 10:17:29 2016
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Mon, 25 Apr 2016 12:17:29 -0400
Subject: [Twisted-Python] twisted listening on UDP port, why?
In-Reply-To: <571B37D3.6060702@imperial.ac.uk>
References: <71F0C715-C66B-44F8-9D8F-DC9CBBFF1C69@2xlp.com>
 <7EFE592B-A526-4DE3-8C2A-275A0336D439@twistedmatrix.com>
 <57176918.6030609@imperial.ac.uk>
 <CAEeXt4Ms6RUUCEPRkWEio8XwHtoFFigb29C+1X=kWDnEW0e14Q@mail.gmail.com>
 <67331142-5C53-4144-A270-B3D8D377BAAE@2xlp.com>
 <9A3F39F0-5A70-4054-AEDF-9489F418D8FD@2xlp.com>
 <55E1D41C-5CF5-412D-9EC6-94ED64262522@twistedmatrix.com>
 <EB17227D-5D61-4743-8E9D-D477414CC312@2xlp.com>
 <571B37D3.6060702@imperial.ac.uk>
Message-ID: <55CA91BC-AEAB-4537-8498-14E6DA43B305@2xlp.com>


On Apr 23, 2016, at 4:52 AM, Phil Mayers wrote:

> Not so. It's down inside the kernel. All applications using the socket API in this way will display this behaviour, regardless of language.
> ....
> 
> As glyph says, this is an inherent feature of the socket API. When you create a socket, it is unbound because you might be about to call bind() yourself.
> 
> If you then use it without binding it, the kernel has to allocate a source port, and in turn an interface, and the only sensible choice absent any instructions from userland is INADDR_ANY.
> 
> This is definitely not Python doing this.

Thanks for the correction!




From hawkowl at atleastfornow.net  Wed Apr 27 05:13:34 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Wed, 27 Apr 2016 19:13:34 +0800
Subject: [Twisted-Python] Changes to Twisted's Trac (GitHub Authentication)
Message-ID: <9C021F7C-297A-4D8D-8C47-32B66DC57FC1@atleastfornow.net>

Hi everyone,

If you've ever had your password eaten by our Trac instance, had your comment rejected by spambayes, or seen the amount of effort it takes removing random nulls from our htpasswd files, rejoice! With https://github.com/twisted-infra/braid/pull/192 , we are moving our Trac instance to log in using GitHub OAuth. This should mean we solve the issue of keeping passwords (making you and us more secure), being able to turn off the spam filter (as we don't have anonymous ticket submittal, and github is better at catching spammers than we are), and hopefully cause less ongoing issues with passwords suddenly not working.

What this means for you is that your username and password will no longer work for logging into our Trac, you will need to authorise your GitHub login to access it. This means that you may have another username, please contact me privately and I will see what I can do about migrating any ticket histories over, if you feel like it is needed.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160427/8ddef2a8/attachment.sig>

From hawkowl at atleastfornow.net  Wed Apr 27 05:45:52 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Wed, 27 Apr 2016 19:45:52 +0800
Subject: [Twisted-Python] [MIGRATION COMPLETE] Changes to Twisted's Trac
	(GitHub Authentication)
In-Reply-To: <9C021F7C-297A-4D8D-8C47-32B66DC57FC1@atleastfornow.net>
References: <9C021F7C-297A-4D8D-8C47-32B66DC57FC1@atleastfornow.net>
Message-ID: <4046BCB1-1EDA-44F7-A17B-7FEB0AB8BA33@atleastfornow.net>

I would like to note that this migration has now finished, and you can now log in via GitHub. Legacy logins have been disabled, and previous admin accounts (except for a current handful) have been revoked in the name of minimising our security surface; if you once had access to our Trac and would like to still use it, please let me know what your GitHub user account is, and I can set those permissions back up.

- Amber

> On 27 Apr 2016, at 19:13, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> Hi everyone,
> 
> If you've ever had your password eaten by our Trac instance, had your comment rejected by spambayes, or seen the amount of effort it takes removing random nulls from our htpasswd files, rejoice! With https://github.com/twisted-infra/braid/pull/192 , we are moving our Trac instance to log in using GitHub OAuth. This should mean we solve the issue of keeping passwords (making you and us more secure), being able to turn off the spam filter (as we don't have anonymous ticket submittal, and github is better at catching spammers than we are), and hopefully cause less ongoing issues with passwords suddenly not working.
> 
> What this means for you is that your username and password will no longer work for logging into our Trac, you will need to authorise your GitHub login to access it. This means that you may have another username, please contact me privately and I will see what I can do about migrating any ticket histories over, if you feel like it is needed.
> 
> - Amber
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160427/b3ffcbcf/attachment.sig>

From glyph at twistedmatrix.com  Wed Apr 27 11:54:20 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 27 Apr 2016 10:54:20 -0700
Subject: [Twisted-Python] [MIGRATION COMPLETE] Changes to Twisted's Trac
	(GitHub Authentication)
In-Reply-To: <4046BCB1-1EDA-44F7-A17B-7FEB0AB8BA33@atleastfornow.net>
References: <9C021F7C-297A-4D8D-8C47-32B66DC57FC1@atleastfornow.net>
 <4046BCB1-1EDA-44F7-A17B-7FEB0AB8BA33@atleastfornow.net>
Message-ID: <F5CE77AA-3475-47F2-BCD6-F6BA35314D0C@twistedmatrix.com>


> On Apr 27, 2016, at 4:45 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> I would like to note that this migration has now finished, and you can now log in via GitHub. Legacy logins have been disabled, and previous admin accounts (except for a current handful) have been revoked in the name of minimising our security surface; if you once had access to our Trac and would like to still use it, please let me know what your GitHub user account is, and I can set those permissions back up.

Amazing! :-D.

I feel a disturbance in the force, as if a million spammers cried out, and were suddenly silenced :-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160427/df5fd53c/attachment-0002.html>

From hs at ox.cx  Wed Apr 27 23:37:05 2016
From: hs at ox.cx (Hynek Schlawack)
Date: Thu, 28 Apr 2016 07:37:05 +0200
Subject: [Twisted-Python] [MIGRATION COMPLETE] Changes to Twisted's Trac
	(GitHub Authentication)
In-Reply-To: <F5CE77AA-3475-47F2-BCD6-F6BA35314D0C@twistedmatrix.com>
References: <9C021F7C-297A-4D8D-8C47-32B66DC57FC1@atleastfornow.net>
 <4046BCB1-1EDA-44F7-A17B-7FEB0AB8BA33@atleastfornow.net>
 <F5CE77AA-3475-47F2-BCD6-F6BA35314D0C@twistedmatrix.com>
Message-ID: <BA88E01E-8B01-40D7-9B4C-47DFEBF494CE@ox.cx>

>> 
>> I would like to note that this migration has now finished, and you can now log in via GitHub. Legacy logins have been disabled, and previous admin accounts (except for a current handful) have been revoked in the name of minimising our security surface; if you once had access to our Trac and would like to still use it, please let me know what your GitHub user account is, and I can set those permissions back up.
> 
> Amazing! :-D.
> 
> I feel a disturbance in the force, as if a million spammers cried out, and were suddenly silenced :-).

And even more importantly: the sigh of relief of hopefully million contributors that aren’t kept out but spam filters and broken auth databases anymore!

Great work Hawkie!

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160428/b1f9a255/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Apr 27 23:42:18 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 27 Apr 2016 22:42:18 -0700
Subject: [Twisted-Python] [MIGRATION COMPLETE] Changes to Twisted's Trac
	(GitHub Authentication)
In-Reply-To: <BA88E01E-8B01-40D7-9B4C-47DFEBF494CE@ox.cx>
References: <9C021F7C-297A-4D8D-8C47-32B66DC57FC1@atleastfornow.net>
 <4046BCB1-1EDA-44F7-A17B-7FEB0AB8BA33@atleastfornow.net>
 <F5CE77AA-3475-47F2-BCD6-F6BA35314D0C@twistedmatrix.com>
 <BA88E01E-8B01-40D7-9B4C-47DFEBF494CE@ox.cx>
Message-ID: <9AED86DF-145E-4D5C-B2EE-EF8CBB56B6EE@twistedmatrix.com>


> On Apr 27, 2016, at 10:37 PM, Hynek Schlawack <hs at ox.cx> wrote:
> 
> Great work Hawkie!

Next step: DEATH TO SUBVERSION.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160427/0f61e19f/attachment-0002.html>

From itamar at itamarst.org  Thu Apr 28 05:38:55 2016
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 28 Apr 2016 07:38:55 -0400
Subject: [Twisted-Python] [MIGRATION COMPLETE] Changes to Twisted's Trac
 (GitHub Authentication)
In-Reply-To: <4046BCB1-1EDA-44F7-A17B-7FEB0AB8BA33@atleastfornow.net>
References: <9C021F7C-297A-4D8D-8C47-32B66DC57FC1@atleastfornow.net>
 <4046BCB1-1EDA-44F7-A17B-7FEB0AB8BA33@atleastfornow.net>
Message-ID: <5721F64F.5090601@itamarst.org>

On 04/27/2016 07:45 AM, Amber "Hawkie" Brown wrote:
> I would like to note that this migration has now finished, and you can now log in via GitHub. Legacy logins have been disabled, and previous admin accounts (except for a current handful) have been revoked in the name of minimising our security surface; if you once had access to our Trac and would like to still use it, please let me know what your GitHub user account is, and I can set those permissions back up.
>
♥



