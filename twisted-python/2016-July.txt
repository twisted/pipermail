From glyph at twistedmatrix.com  Fri Jul  1 00:08:55 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 30 Jun 2016 23:08:55 -0700
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
 <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
 <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>
 <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>
Message-ID: <449CFA03-C24F-453C-AE8C-FDB46A132246@twistedmatrix.com>


> On Jun 30, 2016, at 17:36, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> On Thu, Jun 30, 2016 at 6:25 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
>> On Jun 30, 2016, at 04:13, Jean-Paul Calderone <exarkun at twistedmatrix.com <mailto:exarkun at twistedmatrix.com>> wrote:
>> 
>> On Thu, Jun 30, 2016 at 6:43 AM, Adi Roiban <adi at roiban.ro <mailto:adi at roiban.ro>> wrote:
>> Hi,
>> 
>> Recently we have introduced a hard check of 100% coverage for all changes.
>> This is done via coverage + codecov + github protected branches.
>> 
>> Now, if your patch is not 100% covered github will not let you merge it.
>> 
>> See for example this change: https://github.com/twisted/twisted/pull/261/files#diff-0fea8a8ca713deb7ea6a10053273319aR2360 <https://github.com/twisted/twisted/pull/261/files#diff-0fea8a8ca713deb7ea6a10053273319aR2360>
>> 
>> The errback is there to help with test failures ... but the test should never fail, so that errback is never called... and that line is not covered.
>> 
>> 
>> It doesn't always make sense to require 100% execution of all test code.  It's not at all uncommon to only have code in a test suite that runs when a test fails.  Historically, Twisted has never had a requirement of 100% execution of test code.  The only test suite coverage requirements that have commonly been requested or enforced is for coverage of implementation code.
>> 
>> I'd suggest removing the coverage enforcement for test suite code.
> 
> I am inclined to disagree, albeit mildly.
> 
> When one is writing a deliberately un-covered path in test code, presumably, one is writing either a test helper - a mock, fake, or utility for setting up a real implementation - or an assertion method.  Historically, I believe that when we've invested more heavily in making these utilities "real" themselves, and not just throwaway stuff inline in a test method or module, the benefits have far outweighed the costs.  In fact the availability of proto_helpers is one of the selling points of Twisted as opposed to other competing engines.
> 
> I mostly agree with this.  However, I was thinking of a slightly different pattern when I wrote my earlier email.  Here's are a couple (fictional) examples of that pattern one might find in unit tests for application code (and there's nothing Twisted-specific here):
> 
> if foo:
>     self.fail("Foo!")
> 
> try:
>     foo()
> except:
>     bar
> else:
>     self.fail("Foo :(")

Hm.  This pattern is exactly what I was thinking of though - as you point out, these examples did get generalized :-).

In principle, I agree that a one-off example like this does not benefit from extensive refactoring to facilitate general use.  But... in practice, every example of this that I've seen in a long-lived codebase eventually metastasizes into a repeated copy/paste pattern, or a big gross mixin that all tests practically need.  Forcing everyone to deal with the problem sooner rather than later seems to have been a win on the few projects where I've gotten to practice it.

> It's not exactly that this can't be code that's executed in a passing run of the test suite.  It's more a question of what the right balance point is.  If someone wants to generalize logic like this (and, fortunately, someone did generalize these particular examples - they're assertFalse and assertRaises, respectively) then that's great and the result is a higher level of confidence resulting from a successful run of the test suite.  I'd suggest that if tests like these exercise all of the implementation code (on a successful run), though, then you've still achieved a pretty high level of test coverage and maybe further efforts are more productively directed elsewhere (increasing the coverage level of other implementation code in Twisted, for example :).

Speaking only from my direct experience here, adding good test helpers is a net reduction in effort very quickly; they pay for themselves on only the third test you write with them :).  So I don't feel like this is much of a burden, but I'd be interested in hearing others' feedback here.

> If folks want a higher bar than this, I'm not going to argue (at least not much, at least not now).  The bar hasn't been this high in the past though (and there are many many such cases to be found in Twisted's test suite right now and I don't have the impression this has ever been much of a source of problems).

I wish it were easier to search my own reviews, because I think I've prodded people to factor this kind of stuff out, but I can't find any handy examples.

But, I can see that right after this, I'm going to have to answer Craig's email, so perhaps we'll get to see a specific example :).

> Therefore, I think that asking folks to add independent test coverage to verify their fakes and ensure that the failure-reporting of their assertion messages are helpful in the event a test fails is a generally good idea, and we should keep the requirement for 100% coverage on both test and implementation coverage.
> 
> However, if there is contention around this, I'd much rather get a ratchet in place for implementation code that's reliable and everyone is happy with, so I'm OK with disabling coverage reporting for our *.test.* packages as a step towards that.
> 
> I completely agree that fakes should be verified.  So much so that I'm not even sure I believe in fakes in general anymore.  Instead, you should just have easy to use interfaces and ship inexpensive implementations alongside whatever other implementations you also need.

?

> And all those implementations should have great test coverage.  I also completely agree that when tests fail, they should do so in a meaningful way.  I suspect slightly the implication that automated test coverage for the failure case demonstrates the failure is reported meaningfully, though. :)  I think we're still stuck with relying on humans (authors, reviewers) to verify that property.

Sure, rich and meaningful semantic error reporting is a human's job.  But "doesn't just raise an exception and lose all the information about what happened due to an attribute spelling error on the rare race-y test that fails 1/10000 times" is a good first approximation, and tests are good at that sort of thing ;-).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160630/2fb16647/attachment.html>

From glyph at twistedmatrix.com  Fri Jul  1 00:29:07 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 30 Jun 2016 23:29:07 -0700
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <CAG=rPVd+HF3LUnb6EX-UYuGDSqLk8-e7XT-AV26RCgt_phfU8g@mail.gmail.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
 <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
 <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>
 <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>
 <CAG=rPVd+HF3LUnb6EX-UYuGDSqLk8-e7XT-AV26RCgt_phfU8g@mail.gmail.com>
Message-ID: <78DF920E-B059-4369-BDA5-AA65319BF692@twistedmatrix.com>


> On Jun 30, 2016, at 18:37, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Hi,
> 
> The conversation about coverage exceptions came up due to this:
> 
> https://github.com/twisted/twisted/pull/261 <https://github.com/twisted/twisted/pull/261>
> 
> I have that up to 97.87% of patch coverage.  I cannot merge it because the codecov integration with GitHub
> is currently configured to not accept patches which don't have 100% patch coverage.
> 
> Can someone please take a look at that, and make a decision as to how to move that PR forward?
> Thanks.

The problematic lines in question on this PR are here:

https://codecov.io/gh/twisted/twisted/compare/f43b16c097309d9747a0c1e708bd4ed05a6977e8...8a22bd8c626c8e496b9564879d85eb711e2bc408#747769737465642F746573742F746573745F64656665722E7079-2360

In this case, the fix to ensure they're covered is pretty easy.  The problem here is essentially a defect in the test: it's returning a Deferred from the test method to spin the reactor, even though the test has already done the work of isolating the system under test from the real reactor (self.lock is pointed at self._clock and a glance at the implementation shows it doesn't access the global reactor).

If you just fix the test to call self.successResultOf(d) after advancing the Clock to assert that it didn't fail, you can stop returning the Deferred, and remove the problematic un-covered callback.

More generally - although the ability to return a Deferred from a test is a very useful bit of integration testing functionality, tests within Twisted itself returning Deferreds are usually just insufficiently isolated.  We have a different way of doing integration tests with the reactors themselves (ReactorBuilder tests) which doesn't rely on returning Deferreds, and we don't have any tightly-coupled external systems like a database which it would make sense to rely upon in tests, so pretty much everything should be synchronous in our own test suite.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160630/94286bbb/attachment-0001.html>

From rodrigc at crodrigues.org  Fri Jul  1 12:34:32 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 1 Jul 2016 11:34:32 -0700
Subject: [Twisted-Python] Script which uploads coverage results to codecov
	failed, but reported success?
Message-ID: <CAG=rPVdVjJU3YEWu74vqQMsi5ZYH+G87rY3Q0P5fqh99AMHeYg@mail.gmail.com>

Hi,

For this pull request:

https://github.com/twisted/twisted/pull/284

This Windows build ran and tried to upload coverage results to codecov:

https://buildbot.twistedmatrix.com/builders/windows7-64-py2.7-coverage/builds/623/steps/shell_5/logs/stdio

but failed with this:

Error: 403 Client Error: Forbidden for url:
https://codecov.s3.amazonaws.com/v4/raw/2016-07-01/BB05435E28F8047E9B3D49B4B7BFA4B3/4a5903d2f0fcab3db7c6ca68ff563e2c859dd5c2/031e0d8f-aadc-47ae-9b69-29ca9d962287.txt?AWSAccessKeyId=AKIAIHLZSCQCS4WIHD4A&Expires=1467374016&Signature=i1IQndDSPC0vtJysR8vnPxDpPw0%3D

The upload failed, but the buildbot job reported success.

The result was that patch shows 57% coverage, when it should be 100%.
Is there a way to make that buildbot step fail if the upload to codecov
fails?

I don't know where the script for that is.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160701/f3d78a5b/attachment.html>

From rodrigc at crodrigues.org  Fri Jul  1 14:11:21 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 1 Jul 2016 13:11:21 -0700
Subject: [Twisted-Python] Script which uploads coverage results to
 codecov failed, but reported success?
In-Reply-To: <CAG=rPVdVjJU3YEWu74vqQMsi5ZYH+G87rY3Q0P5fqh99AMHeYg@mail.gmail.com>
References: <CAG=rPVdVjJU3YEWu74vqQMsi5ZYH+G87rY3Q0P5fqh99AMHeYg@mail.gmail.com>
Message-ID: <CAG=rPVdCCoesLSOTp5-W-uCbNcSAwaw3-f-FS5syU5_cbvbiiQ@mail.gmail.com>

On Fri, Jul 1, 2016 at 11:34 AM, Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

>
> Error: 403 Client Error: Forbidden for url: https://codecov.s3.amazonaws.com/v4/raw/2016-07-01/BB05435E28F8047E9B3D49B4B7BFA4B3/4a5903d2f0fcab3db7c6ca68ff563e2c859dd5c2/031e0d8f-aadc-47ae-9b69-29ca9d962287.txt?AWSAccessKeyId=AKIAIHLZSCQCS4WIHD4A&Expires=1467374016&Signature=i1IQndDSPC0vtJysR8vnPxDpPw0%3D
>
> The upload failed, but the buildbot job reported success.
>
>
>
It looks like every build from the windows7-64-py2.6-coverage buildbot is
failing to upload to codecov.  I have filed a ticket:

https://twistedmatrix.com/trac/ticket/8549#ticket

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160701/cbd272b1/attachment.html>

From dansut at gmail.com  Fri Jul  1 15:31:12 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Fri, 1 Jul 2016 17:31:12 -0400
Subject: [Twisted-Python] Style/testing for log-related changes
In-Reply-To: <CADzPF4tHXfE3qzn4fKOqk4NSEKvh8z_zfdi-YLx4v7-sOp73eA@mail.gmail.com>
References: <57555CA8.40404@imperial.ac.uk>
 <50BD783F-5296-40A3-B2A5-8A7F1F226D1B@twistedmatrix.com>
 <CADzPF4tHXfE3qzn4fKOqk4NSEKvh8z_zfdi-YLx4v7-sOp73eA@mail.gmail.com>
Message-ID: <CADzPF4sBm-MHSqCzuzPMJSAWhgzmLuue_7yniq+gv81SeAecJw@mail.gmail.com>

On Tue, Jun 28, 2016 at 1:49 PM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> This is what I came up with while trying to get twistd related
> messages all emitted through new logger and thus not have [-] in
> standard textual log:
>   https://github.com/twisted/twisted/compare/bb0d1d67...dansut:logger-update
> Probably did some really daft stuff here but comments appreciated on
> my forks branch to get me working in a way which will be acceptable
> for PRs in future.

I've done a rebase to stay current with trunk so messed up the results
of that URL, as long as do things 'right' in future this one should
work better to see what I attempted:
  https://github.com/dansut/twisted/compare/trunk...logger-update

Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>


From commercials24 at yahoo.de  Sat Jul  2 04:47:47 2016
From: commercials24 at yahoo.de (steven meier)
Date: Sat, 02 Jul 2016 12:47:47 +0200
Subject: [Twisted-Python] qt5 / twisted integration....reactor imported but
	NameError?
Message-ID: <1467456467.27915.8.camel@yahoo.de>

python main_code.py 
Gtk-Message: Failed to load module "canberra-gtk-module"
testing...
[Failure instance: Traceback: <type 'exceptions.NameError'>: global name
'reactor' is not defined
/home/julius/.local/lib/python2.7/site-packages/twisted/internet/tcp.py:293:connectionLost
/home/julius/.local/lib/python2.7/site-packages/twisted/web/client.py:222:connectionLost
/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py:393:callback
/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py:501:_startRunCallbacks
--- <exception caught here> ---
/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py:588:_runCallbacks
/home/julius/code/python/qt5-python2.x/webchat.py:75:main_page_result
]
123



main_code looks like this:
from PyQt5 import QtWidgets
import sys
from untitled import Ui_MainWindow




class Main(QtWidgets.QMainWindow):

    def __init__(self):
        QtWidgets.QMainWindow.__init__(self)
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.setupSignals()

    def button_1_Clicked(self):
        self.ui.textbox_2.setText(self.ui.textbox_1.text())

    def setupSignals(self):
        #self.ui.textbox_1.textChanged.connect(self.textbox_1_Changed)
        self.ui.button_1.clicked.connect(self.button_1_Clicked)



if __name__ == '__main__':
    #app = QtWidgets.QApplication(sys.argv)
    app = QtWidgets.QApplication(sys.argv) # your code to init QtCore
    import qt5reactor
    qt5reactor.install()
    from twisted.internet import reactor
    print "testing..."

<snip>

    from webchat import get_main_page
    get_main_page()
    reactor.run()




as you can see the qt5reactor.install() runs before the "from webchat
import get_main_page"

so how come that webchat does not know about reactor?



From adi at roiban.ro  Sat Jul  2 14:43:04 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 2 Jul 2016 21:43:04 +0100
Subject: [Twisted-Python] FreeBSD buildbots down?
In-Reply-To: <CAG=rPVfaqeNQPbqjKU=nyr6rNoF7BK7977bH0aH7jSZntWRYgg@mail.gmail.com>
References: <CAG=rPVfaqeNQPbqjKU=nyr6rNoF7BK7977bH0aH7jSZntWRYgg@mail.gmail.com>
Message-ID: <CAFycZ9dXeS5rWOURF89ZhaePXD3qAJ-hYzx9ExtsGX2=T0mdkQ@mail.gmail.com>

On 30 June 2016 at 23:55, Craig Rodrigues <rodrigc at crodrigues.org> wrote:

> Hi,
>
> The FreeBSD buildbots seem to be down since May 26.
> https://buildbot.twistedmatrix.com/boxes-all
>
> Any ideas as to what is wrong?
>
>
Hi,

Thanks for the email.

It looks like the slave is sponsored by Tavendo. Don't know why the contact
is not public.

https://buildbot.twistedmatrix.com/buildslaves/tavendo-freebsd-10.1-amd64

I have added Tobias in CC. Hope it will help.

If not, I think that we can create a server on the RackSpace cloud.
AFAIK we still have about $300/month left, sponsored by RackSpace.

BTW. I see that the Windows slave is pretty busy sometimes. Can we add a
Windows slave hosted by Rackspace? (I think that Glyph or Amber can answer
this)

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160702/9b59ad6f/attachment.html>

From adi at roiban.ro  Sat Jul  2 16:42:32 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 2 Jul 2016 23:42:32 +0100
Subject: [Twisted-Python] Buildbot upgrade to latest eight branch
In-Reply-To: <CAOtB_kmghLME7QMWp0C4mq3894U5bws=yXSfbBxEfuLJr9vffA@mail.gmail.com>
References: <CAFycZ9en8Vzts5s8Z4+vu8d1q73okX6736de=CH6XcedgsDQrw@mail.gmail.com>
 <5C1A7E78-BB95-4FC1-B323-7469916B443C@twistedmatrix.com>
 <CAFycZ9fPqJ1ec-WddC1jVX8brCnPqZjNTZDTkjBniMWfMjubAA@mail.gmail.com>
 <CAOtB_kmghLME7QMWp0C4mq3894U5bws=yXSfbBxEfuLJr9vffA@mail.gmail.com>
Message-ID: <CAFycZ9dYrkvdWd7R9tmxeKGJGZgMhE4Rkuy=8LMMv6+kiSpt5Q@mail.gmail.com>

On 25 June 2016 at 16:53, Tom Prince <tom.prince at ualberta.net> wrote:

> > https://github.com/twisted-infra/braid/pull/206
>
> I'll try to review this this weekend.
>


I have merged the GitHub commit status as I think that it was working OK.

I have now deployed the GitHub Hooks build trigger changes.

Build are automatically triggered for all pushes in all branches. There is
a delay of 5 seconds so that multiple builds pushed in the same time will
only trigger a single build for the last commit.

See this PR for details and if you want to review it :)

https://github.com/twisted-infra/braid/pull/208

With this change, Buildbot should have a closer behavior to Travis-CI. That
is, it will automatically start the builders and will report the build
results in GitHub PR.

Happy hacking :)
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160702/21391aa5/attachment.html>

From adi at roiban.ro  Sun Jul  3 01:27:15 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 3 Jul 2016 08:27:15 +0100
Subject: [Twisted-Python] Script which uploads coverage results to
 codecov failed, but reported success?
In-Reply-To: <CAG=rPVdVjJU3YEWu74vqQMsi5ZYH+G87rY3Q0P5fqh99AMHeYg@mail.gmail.com>
References: <CAG=rPVdVjJU3YEWu74vqQMsi5ZYH+G87rY3Q0P5fqh99AMHeYg@mail.gmail.com>
Message-ID: <CAFycZ9crDrVJ9_iFUDUQ1C=ixUP02H+sakUFvgXDaaN6H-wahA@mail.gmail.com>

On 1 July 2016 at 19:34, Craig Rodrigues <rodrigc at crodrigues.org> wrote:

> Hi,
>
> For this pull request:
>
> https://github.com/twisted/twisted/pull/284
>
> This Windows build ran and tried to upload coverage results to codecov:
>
>
> https://buildbot.twistedmatrix.com/builders/windows7-64-py2.7-coverage/builds/623/steps/shell_5/logs/stdio
>
> but failed with this:
>
>
I can see that the Windows coverage builder is not using virtualenv + tox
to run the coverage report.

I suggest that we should first convert all builders to virtualenv + tox.
There is a ticket pending review for that
https://twistedmatrix.com/trac/ticket/8544

Then I suggest to push the coverage from tox. There is a ticket pending
review for that https://twistedmatrix.com/trac/ticket/8532

--------

With builders using virtual env + tox it should be much easier to work and
debug issues as the exact commands executed by buildbot are no longer
hardcoded in the buildbot configuration.


--------

I have setup a buildslave for Windows 2012R2 on Rackspace and I can see
that the coverage was uploaded ...at least for trunk

https://buildbot.twistedmatrix.com/builders/win-64-py2.7-coverage/builds/1/steps/shell_5/logs/stdio

The PR for adding the Windows 2012 slave is waiting a review here
https://github.com/twisted-infra/braid/pull/215

---------

Craig, if you have access to the Windows 7 slave check the system clock.
I no longer have access to the Win7 VNC as it looks like the password was
changed.


-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160703/92b57814/attachment.html>

From adi at roiban.ro  Sun Jul  3 02:08:30 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 3 Jul 2016 09:08:30 +0100
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <78DF920E-B059-4369-BDA5-AA65319BF692@twistedmatrix.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
 <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
 <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>
 <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>
 <CAG=rPVd+HF3LUnb6EX-UYuGDSqLk8-e7XT-AV26RCgt_phfU8g@mail.gmail.com>
 <78DF920E-B059-4369-BDA5-AA65319BF692@twistedmatrix.com>
Message-ID: <CAFycZ9eWS56jAtqUJEGn1Vn7H2zgY+BV5_pQWRupWt6ex9j6hw@mail.gmail.com>

Hi,

What decision should be made based on the feedback sent so far?

Should we disabled the codecov coverage enforcement for 100% coverage for a
patch as it also blocks missing coverage in a test?

If we want to enforce only implementation code, then we need to update the
tests to send separate reports for implementation and testing... and this
is not done yet.

Disabling/Enabling codecov.io merge protection is done here
https://github.com/twisted-infra/braid/issues/213

--------

I would argue that testing code should have the same quality standards as
the implementation code and hence also go for 100% coverage.

It will help detect code which is never executed and which later might get
out of sync or might break. This include mocked code which is out of sync
or tests which are skipped on all builders and which will get out of sync
and fail (ex our apidoc builder tests).

It will also simplify the reporting infrastructure ... and we are
already short-handed so a simple infrastructure should help move things
forward much faster.

--
Adi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160703/d8f31643/attachment.html>

From mithrandi at mithrandi.net  Sun Jul  3 02:53:45 2016
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sun, 03 Jul 2016 08:53:45 +0000
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <CAFycZ9eWS56jAtqUJEGn1Vn7H2zgY+BV5_pQWRupWt6ex9j6hw@mail.gmail.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
 <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
 <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>
 <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>
 <CAG=rPVd+HF3LUnb6EX-UYuGDSqLk8-e7XT-AV26RCgt_phfU8g@mail.gmail.com>
 <78DF920E-B059-4369-BDA5-AA65319BF692@twistedmatrix.com>
 <CAFycZ9eWS56jAtqUJEGn1Vn7H2zgY+BV5_pQWRupWt6ex9j6hw@mail.gmail.com>
Message-ID: <CAMcKhMTh8EnPb7+b51svbqHrj5ztZkw6bymZVj6jLmZYc9q22w@mail.gmail.com>

The tests directories can simply be excluded in coverage.py (or codecov), I
don't think there's any need to do something more complicated than that.

While I agree that 100% test coverage is an ideal worth aspiring to, I
think getting there from the current state is going to be a large amount of
work that yields very little benefit at this point in time; I would say
that there are more important things to spend that effort on.

On Sun, 3 Jul 2016 at 10:09 Adi Roiban <adi at roiban.ro> wrote:

> Hi,
>
> What decision should be made based on the feedback sent so far?
>
> Should we disabled the codecov coverage enforcement for 100% coverage for
> a patch as it also blocks missing coverage in a test?
>
> If we want to enforce only implementation code, then we need to update the
> tests to send separate reports for implementation and testing... and this
> is not done yet.
>
> Disabling/Enabling codecov.io merge protection is done here
> https://github.com/twisted-infra/braid/issues/213
>
> --------
>
> I would argue that testing code should have the same quality standards as
> the implementation code and hence also go for 100% coverage.
>
> It will help detect code which is never executed and which later might get
> out of sync or might break. This include mocked code which is out of sync
> or tests which are skipped on all builders and which will get out of sync
> and fail (ex our apidoc builder tests).
>
> It will also simplify the reporting infrastructure ... and we are
> already short-handed so a simple infrastructure should help move things
> forward much faster.
>
> --
> Adi
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160703/e9c01465/attachment-0001.html>

From pawelmhm at gmail.com  Sun Jul  3 04:15:03 2016
From: pawelmhm at gmail.com (=?UTF-8?B?UGF3ZcWCIE1pZWNo?=)
Date: Sun, 3 Jul 2016 12:15:03 +0200
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
Message-ID: <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>

HTTP2 support sounds really exciting.

> Please let me know if you have any issues, as well as if you don't! If
everything works well, that's a good thing for me to know :)

I played around with this today and found out that the command you
recommend:

>  pip install -U https://twistedmatrix.com/Releases
/pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2#egg=Twisted[http2,tls]

does NOT install dependencies when ran on Python 3, I had to manually
install h2 to HTTP2 support to work. It works ok on Python 2. My
installation logs on Python 3.4 look like this:

> pip install -U
https://twistedmatrix.com/Releases/pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2#egg=Twisted[http2,tls]
Downloading/unpacking Twisted[http2,tls] from
https://twistedmatrix.com/Releases/pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2
  Downloading Twisted-16.3.0rc2.tar.bz2 (2.9MB): 2.9MB downloaded
  Running setup.py
(path:/home/pawel/.virtualenvs/foo3/build/Twisted/setup.py) egg_info for
package Twisted

    warning: no previously-included files matching '*.misc' found under
directory 'twisted'
    warning: no previously-included files matching '*.bugfix' found under
directory 'twisted'
    warning: no previously-included files matching '*.doc' found under
directory 'twisted'
    warning: no previously-included files matching '*.feature' found under
directory 'twisted'
    warning: no previously-included files matching '*.removal' found under
directory 'twisted'
    warning: no previously-included files matching 'NEWS' found under
directory 'twisted'
    warning: no previously-included files matching 'README' found under
directory 'twisted'
    warning: no previously-included files matching 'topfiles' found under
directory 'twisted'
    warning: no previously-included files found matching
'twisted/topfiles/CREDITS'
    warning: no previously-included files found matching
'twisted/topfiles/ChangeLog.Old'
    warning: no previously-included files found matching 'bin/_preamble.py'
    warning: no previously-included files found matching 'admin'
    warning: no previously-included files found matching 'bin/admin'
    warning: no previously-included files matching '*' found under
directory 'admin'
    warning: no previously-included files matching '*' found under
directory 'bin/admin'
    warning: no previously-included files found matching
'docs/historic/2003'
    warning: no previously-included files matching '*' found under
directory 'docs/historic/2003'
  Installing extra requirements: 'http2,tls'
Requirement already up-to-date: zope.interface>=4.0.2 in
/home/pawel/.virtualenvs/foo3/lib/python3.4/site-packages (from
Twisted[http2,tls])
Requirement already up-to-date: setuptools in
/home/pawel/.virtualenvs/foo3/lib/python3.4/site-packages (from
zope.interface>=4.0.2->Twisted[http2,tls])
Installing collected packages: Twisted
  Running setup.py install for Twisted

    warning: no previously-included files matching '*.misc' found under
directory 'twisted'
    warning: no previously-included files matching '*.bugfix' found under
directory 'twisted'
    warning: no previously-included files matching '*.doc' found under
directory 'twisted'
    warning: no previously-included files matching '*.feature' found under
directory 'twisted'
    warning: no previously-included files matching '*.removal' found under
directory 'twisted'
    warning: no previously-included files matching 'NEWS' found under
directory 'twisted'
    warning: no previously-included files matching 'README' found under
directory 'twisted'
    warning: no previously-included files matching 'topfiles' found under
directory 'twisted'
    warning: no previously-included files found matching
'twisted/topfiles/CREDITS'
    warning: no previously-included files found matching
'twisted/topfiles/ChangeLog.Old'
    warning: no previously-included files found matching 'bin/_preamble.py'
    warning: no previously-included files found matching 'admin'
    warning: no previously-included files found matching 'bin/admin'
    warning: no previously-included files matching '*' found under
directory 'admin'
    warning: no previously-included files matching '*' found under
directory 'bin/admin'
    warning: no previously-included files found matching
'docs/historic/2003'
    warning: no previously-included files matching '*' found under
directory 'docs/historic/2003'
    warning: PickyBuildPy: byte-compiling is disabled, skipping.

    changing mode of build/scripts-3.4/trial from 664 to 775
    changing mode of build/scripts-3.4/twistd from 664 to 775
    warning: install_lib: byte-compiling is disabled, skipping.

    changing mode of /home/pawel/.virtualenvs/foo3/bin/twistd to 775
    changing mode of /home/pawel/.virtualenvs/foo3/bin/trial to 775
  Could not find .egg-info directory in install record for
Twisted[http2,tls] from
https://twistedmatrix.com/Releases/pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2
Successfully installed Twisted
Cleaning up...


2016-06-28 14:44 GMT+02:00 Amber "Hawkie" Brown <hawkowl at atleastfornow.net>:

> Hi everyone,
>
> Here's another prerelease in the 16.3 series -- fixing a 16.2 regression
> in HTTP timeouts not working.
>
> For more information, check the NEWS file (link provided below).
>
> As usual, it's available for download -- go here (
> https://twistedmatrix.com/Releases/pre/16.3.0pre2/) to get the prerelease
> tarballs and the full NEWS file. If you want to install it right away, run:
>
>    pip install
> https://twistedmatrix.com/Releases/pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2
>
> A reminder that if you would like to try out the newly-landed HTTP/2
> support, run:
>
>    pip install -U
> https://twistedmatrix.com/Releases/pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2#egg=Twisted[http2,tls]
>
> This will download the new HTTP/2 dependencies and the TLS requirements as
> well.
>
> Please let me know if you have any issues, as well as if you don't! If
> everything works well, that's a good thing for me to know :)
>
> Twisted Regards,
> Amber Brown (HawkOwl)
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160703/c92cee2b/attachment.html>

From adi at roiban.ro  Sun Jul  3 04:50:22 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 3 Jul 2016 11:50:22 +0100
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
Message-ID: <CAFycZ9dxb+cn42A56QZeaZ2y4AvgL2KLnxCW0_vy+ftztimeNw@mail.gmail.com>

On 3 July 2016 at 11:15, Pawe? Miech <pawelmhm at gmail.com> wrote:

> HTTP2 support sounds really exciting.
>
> > Please let me know if you have any issues, as well as if you don't! If
> everything works well, that's a good thing for me to know :)
>
> I played around with this today and found out that the command you
> recommend:
>
> >  pip install -U https://twistedmatrix.com/Releases
> /pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2#egg=Twisted[http2,tls]
>
> does NOT install dependencies when ran on Python 3, I had to manually
> install h2 to HTTP2 support to work. It works ok on Python 2. My
> installation logs on Python 3.4 look like this:
>
>
AFAIK this is a known issue :

see
https://github.com/twisted/twisted/blob/trunk/docs/installation/howto/optional.rst



-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160703/07ea8edc/attachment.html>

From pawelmhm at gmail.com  Sun Jul  3 06:47:08 2016
From: pawelmhm at gmail.com (=?UTF-8?B?UGF3ZcWCIE1pZWNo?=)
Date: Sun, 3 Jul 2016 14:47:08 +0200
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAFycZ9dxb+cn42A56QZeaZ2y4AvgL2KLnxCW0_vy+ftztimeNw@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAFycZ9dxb+cn42A56QZeaZ2y4AvgL2KLnxCW0_vy+ftztimeNw@mail.gmail.com>
Message-ID: <CAO38UCmZyw2rPSs+-xAAOtY4erfRaP4WBW3KjpNZWGdux1gD4g@mail.gmail.com>

> AFAIK this is a known issue :

Ah thanks, that's ok.

One other thing I noticed a propos HTTP 2 is that it seems that reading
relatively large file results in error:
"priority.priority.MissingStreamError: 'Stream 1 not in tree'". I created
simple gist to recreate this issue see here:
https://gist.github.com/pawelmhm/3aa7e4f3a0e322364dcb75e3f0a32da4 Resource
is launched with Python 3.4, to test it on the client I used curl with
http2 support. Data file
<https://drive.google.com/file/d/0B6myg3n6dqcVcXpPdkJCNUJLOTA/view?pref=2&pli=1>
is
not huge (570kb) but the error is raised when I send it as a whole, when I
only send some smaller chunk (e.g. first 100 items from file) it seems to
work ok. It seems that Python-hyper is all right with this file, perhaps
curl --http2 does something weird.

2016-07-03 12:50 GMT+02:00 Adi Roiban <adi at roiban.ro>:

>
>
> On 3 July 2016 at 11:15, Pawe? Miech <pawelmhm at gmail.com> wrote:
>
>> HTTP2 support sounds really exciting.
>>
>> > Please let me know if you have any issues, as well as if you don't! If
>> everything works well, that's a good thing for me to know :)
>>
>> I played around with this today and found out that the command you
>> recommend:
>>
>> >  pip install -U https://twistedmatrix.com/Releases
>> /pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2#egg=Twisted[http2,tls]
>>
>> does NOT install dependencies when ran on Python 3, I had to manually
>> install h2 to HTTP2 support to work. It works ok on Python 2. My
>> installation logs on Python 3.4 look like this:
>>
>>
> AFAIK this is a known issue :
>
> see
> https://github.com/twisted/twisted/blob/trunk/docs/installation/howto/optional.rst
>
>
>
> --
> Adi Roiban
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160703/bc7423cc/attachment-0001.html>

From adi at roiban.ro  Sun Jul  3 08:13:38 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 3 Jul 2016 15:13:38 +0100
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <CAMcKhMTh8EnPb7+b51svbqHrj5ztZkw6bymZVj6jLmZYc9q22w@mail.gmail.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
 <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
 <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>
 <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>
 <CAG=rPVd+HF3LUnb6EX-UYuGDSqLk8-e7XT-AV26RCgt_phfU8g@mail.gmail.com>
 <78DF920E-B059-4369-BDA5-AA65319BF692@twistedmatrix.com>
 <CAFycZ9eWS56jAtqUJEGn1Vn7H2zgY+BV5_pQWRupWt6ex9j6hw@mail.gmail.com>
 <CAMcKhMTh8EnPb7+b51svbqHrj5ztZkw6bymZVj6jLmZYc9q22w@mail.gmail.com>
Message-ID: <CAFycZ9erykD7+bEe7LE13i_mvmoPpKVH8OtrGyOTExqx5n47vg@mail.gmail.com>

On 3 July 2016 at 09:53, Tristan Seligmann <mithrandi at mithrandi.net> wrote:

> The tests directories can simply be excluded in coverage.py (or codecov),
> I don't think there's any need to do something more complicated than that.
>
>
That is, don't report coverage at all for the test code?

I would prefer to see the coverage reports for tests, even if we don't
enforce 100% coverage.  Is a quick way to check that the test is executed
on at least one builder.

While I agree that 100% test coverage is an ideal worth aspiring to, I
> think getting there from the current state is going to be a large amount of
> work that yields very little benefit at this point in time; I would say
> that there are more important things to spend that effort on.
>
>
It might yield (arguably) little benefit for existing contributors, but I
think that for the new contributors it sends a bad message.

For me, as a reviewing it helps a lot if a contributors can get a quick
feedback about the quality of their code and I don't have to repeat in each
review that a topfile is required of that the code needs tests... the
topfile checker or coverage checker is red and this mean that a contributor
needs to work more before requesting a review.

We are preaching the Ultimate Quality Development System (UQDS) (tm) but
when new contributors are onboarded they found out that they should ignore
the tons of errors produced by twistedchecker, that the 100% coverage only
applied for implementation code and that test code is a 2nd class citizen
... that the api docs will produce error even if you have created a correct
cross reference to zope (similar to what existing code does)... etc

But maybe is just my fault for taking the UQDS too seriously and instead I
should read it as the Almost Ultimate Quality Development System.

pyflakes run is not clean on trunk... and I hope that pydoctor will soon
run without errors on trunk ... after that we can hit twistedchecker :)

--
Adi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160703/110e4b75/attachment.html>

From clayton.daley at gmail.com  Sun Jul  3 08:53:53 2016
From: clayton.daley at gmail.com (Clayton Daley)
Date: Sun, 3 Jul 2016 09:53:53 -0500
Subject: [Twisted-Python] Script which uploads coverage results to
 codecov failed, but reported success?
In-Reply-To: <CAFycZ9crDrVJ9_iFUDUQ1C=ixUP02H+sakUFvgXDaaN6H-wahA@mail.gmail.com>
References: <CAG=rPVdVjJU3YEWu74vqQMsi5ZYH+G87rY3Q0P5fqh99AMHeYg@mail.gmail.com>
 <CAFycZ9crDrVJ9_iFUDUQ1C=ixUP02H+sakUFvgXDaaN6H-wahA@mail.gmail.com>
Message-ID: <CACKEAnX0A3CJkcQSSk0X44jSzak6Akc2FGvK+K9nd1Fn2YY36g@mail.gmail.com>

A bit of an aside... but both personally and in several businesses I work
with, I've use Lastpass to manage passwords. Because the passwords are
shared at the server, updated passwords are propagated to all users. It
also has a really nice 2-factor option where your phone just offers you an
"approve" button (no 6-digit codes to transcribe).

Clayton Daley

On Sun, Jul 3, 2016 at 2:27 AM, Adi Roiban <adi at roiban.ro> wrote:

>
>
> On 1 July 2016 at 19:34, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
>
>> Hi,
>>
>> For this pull request:
>>
>> https://github.com/twisted/twisted/pull/284
>>
>> This Windows build ran and tried to upload coverage results to codecov:
>>
>>
>> https://buildbot.twistedmatrix.com/builders/windows7-64-py2.7-coverage/builds/623/steps/shell_5/logs/stdio
>>
>> but failed with this:
>>
>>
> I can see that the Windows coverage builder is not using virtualenv + tox
> to run the coverage report.
>
> I suggest that we should first convert all builders to virtualenv + tox.
> There is a ticket pending review for that
> https://twistedmatrix.com/trac/ticket/8544
>
> Then I suggest to push the coverage from tox. There is a ticket pending
> review for that https://twistedmatrix.com/trac/ticket/8532
>
> --------
>
> With builders using virtual env + tox it should be much easier to work and
> debug issues as the exact commands executed by buildbot are no longer
> hardcoded in the buildbot configuration.
>
>
> --------
>
> I have setup a buildslave for Windows 2012R2 on Rackspace and I can see
> that the coverage was uploaded ...at least for trunk
>
>
> https://buildbot.twistedmatrix.com/builders/win-64-py2.7-coverage/builds/1/steps/shell_5/logs/stdio
>
> The PR for adding the Windows 2012 slave is waiting a review here
> https://github.com/twisted-infra/braid/pull/215
>
> ---------
>
> Craig, if you have access to the Windows 7 slave check the system clock.
> I no longer have access to the Win7 VNC as it looks like the password was
> changed.
>
>
> --
> Adi Roiban
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160703/3263a847/attachment.html>

From glyph at twistedmatrix.com  Sun Jul  3 10:10:46 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 3 Jul 2016 09:10:46 -0700
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <CAMcKhMTh8EnPb7+b51svbqHrj5ztZkw6bymZVj6jLmZYc9q22w@mail.gmail.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
 <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
 <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>
 <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>
 <CAG=rPVd+HF3LUnb6EX-UYuGDSqLk8-e7XT-AV26RCgt_phfU8g@mail.gmail.com>
 <78DF920E-B059-4369-BDA5-AA65319BF692@twistedmatrix.com>
 <CAFycZ9eWS56jAtqUJEGn1Vn7H2zgY+BV5_pQWRupWt6ex9j6hw@mail.gmail.com>
 <CAMcKhMTh8EnPb7+b51svbqHrj5ztZkw6bymZVj6jLmZYc9q22w@mail.gmail.com>
Message-ID: <CFE65ECB-B688-480B-B9F5-AA2F5DD46DA2@twistedmatrix.com>


> On Jul 3, 2016, at 01:53, Tristan Seligmann <mithrandi at mithrandi.net> wrote:
> 
> While I agree that 100% test coverage is an ideal worth aspiring to, I think getting there from the current state is going to be a large amount of work that yields very little benefit at this point in time; I would say that there are more important things to spend that effort on.

What we're talking about is requiring new patches to cover the test code that they change, not an instant bar for 100% coverage of all test code.

Since this is being couched in terms of "effort" - it seems to me that this discussion alone is already more effort than just covering a few errant lines of test code here and there. :).

For now, let's just bite the bullet and require 100% patch coverage from here on out.  If we hit a really nasty case where it really is a significant investment of effort, then maybe we can revisit this discussion and explore a better way to express this exception without losing information about test coverage completely.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160703/2b1db84c/attachment.html>

From rodrigc at crodrigues.org  Sun Jul  3 13:32:55 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sun, 3 Jul 2016 12:32:55 -0700
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <CFE65ECB-B688-480B-B9F5-AA2F5DD46DA2@twistedmatrix.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
 <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
 <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>
 <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>
 <CAG=rPVd+HF3LUnb6EX-UYuGDSqLk8-e7XT-AV26RCgt_phfU8g@mail.gmail.com>
 <78DF920E-B059-4369-BDA5-AA65319BF692@twistedmatrix.com>
 <CAFycZ9eWS56jAtqUJEGn1Vn7H2zgY+BV5_pQWRupWt6ex9j6hw@mail.gmail.com>
 <CAMcKhMTh8EnPb7+b51svbqHrj5ztZkw6bymZVj6jLmZYc9q22w@mail.gmail.com>
 <CFE65ECB-B688-480B-B9F5-AA2F5DD46DA2@twistedmatrix.com>
Message-ID: <CAG=rPVd7n53F+oqC+RdU9p1X+kJXdR1qVady9BxsERp0cVvEJg@mail.gmail.com>

On Sun, Jul 3, 2016 at 9:10 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> For now, let's just bite the bullet and require 100% patch coverage from
> here on out.  If we hit a really nasty case where it really *is* a
> significant investment of effort, then maybe we can revisit this discussion
> and explore a better way to express this exception without losing
> information about test coverage completely.
>
>
Requiring 100% patch coverage sounds reasonable.  However, what if the
infrastructure for running coverage and uploading reports
to codecov.io isn't working?
Running coverage under Pypy is apparently not working (
https://github.com/twisted/twisted/pull/223#issuecomment-228626722 ).  This
is blocking forward progress on patches to fix the Pypy tests.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160703/d42206aa/attachment.html>

From glyph at twistedmatrix.com  Sun Jul  3 17:18:14 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 3 Jul 2016 16:18:14 -0700
Subject: [Twisted-Python] Script which uploads coverage results to
	codecov failed, but reported success?
In-Reply-To: <CAFycZ9crDrVJ9_iFUDUQ1C=ixUP02H+sakUFvgXDaaN6H-wahA@mail.gmail.com>
References: <CAG=rPVdVjJU3YEWu74vqQMsi5ZYH+G87rY3Q0P5fqh99AMHeYg@mail.gmail.com>
 <CAFycZ9crDrVJ9_iFUDUQ1C=ixUP02H+sakUFvgXDaaN6H-wahA@mail.gmail.com>
Message-ID: <EA9C60A1-2120-448F-8326-EFCE50D8A59C@twistedmatrix.com>


> On Jul 3, 2016, at 00:27, Adi Roiban <adi at roiban.ro> wrote:
> 
> I no longer have access to the Win7 VNC as it looks like the password was changed.

The password hasn't been changed, so I'm not sure why you're having trouble accessing it.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160703/f276ae0e/attachment.html>

From rodrigc at crodrigues.org  Sun Jul  3 17:43:32 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sun, 3 Jul 2016 16:43:32 -0700
Subject: [Twisted-Python] Python 3 code coverage not working?
Message-ID: <CAG=rPVeC+bT1ErCfzNCsKYOsVKEobf_GPr-v2tecFTVppjL6Qw@mail.gmail.com>

Hi,

I submitted this pull request:
https://github.com/twisted/twisted/pull/224

and codecov is saying that only 66.67% of the patch is covered because it
is not hitting the Python 3 specific block:
https://codecov.io/gh/twisted/twisted/compare/502f3a1e2cc125d214b6b7df5b173aa91fc7f966...d286bf22f8b653f75dc3a22cedbe295370435163

This buildbot ran the build on Python 3 and uploaded a coverage report:
https://buildbot.twistedmatrix.com/builders/fedora22-py3.4-coverage/builds/630

Is something wrong here?  I don't understand how Python 3 coverage is not
reported.
--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160703/e8449628/attachment.html>

From adi at roiban.ro  Mon Jul  4 00:00:08 2016
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 4 Jul 2016 07:00:08 +0100
Subject: [Twisted-Python] Python 3 code coverage not working?
In-Reply-To: <CAG=rPVeC+bT1ErCfzNCsKYOsVKEobf_GPr-v2tecFTVppjL6Qw@mail.gmail.com>
References: <CAG=rPVeC+bT1ErCfzNCsKYOsVKEobf_GPr-v2tecFTVppjL6Qw@mail.gmail.com>
Message-ID: <CAFycZ9fTXwFmC2c3si9VH37MWe=cmJQAs0xn8r-kzJF4p0+o4w@mail.gmail.com>

On 4 July 2016 at 00:43, Craig Rodrigues <rodrigc at crodrigues.org> wrote:

> Hi,
>
> I submitted this pull request:
> https://github.com/twisted/twisted/pull/224
>
> and codecov is saying that only 66.67% of the patch is covered because it
> is not hitting the Python 3 specific block:
>
> https://codecov.io/gh/twisted/twisted/compare/502f3a1e2cc125d214b6b7df5b173aa91fc7f966...d286bf22f8b653f75dc3a22cedbe295370435163
>
> This buildbot ran the build on Python 3 and uploaded a coverage report:
>
> https://buildbot.twistedmatrix.com/builders/fedora22-py3.4-coverage/builds/630
>
> Is something wrong here?  I don't understand how Python 3 coverage is not
> reported.
>

Only the modules (including the test modules) from dist3.py are executed on
Python3
https://github.com/twisted/twisted/blob/trunk/twisted/python/dist3.py

In the header of that file you can see

# -*- test-case-name: twisted.python.test.test_dist3 -*-

and also in the test modules we have

twisted.python.test.test_dist3

---------------

That is you need to make the changes in that module

twisted.python.test.test_dist is not executed on Python3 ... hence its
coverage is not reported on Python3

Hope this helps!

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160704/54cb797c/attachment.html>

From rodrigc at crodrigues.org  Mon Jul  4 01:00:40 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 4 Jul 2016 00:00:40 -0700
Subject: [Twisted-Python] Python 3 code coverage not working?
In-Reply-To: <CAFycZ9fTXwFmC2c3si9VH37MWe=cmJQAs0xn8r-kzJF4p0+o4w@mail.gmail.com>
References: <CAG=rPVeC+bT1ErCfzNCsKYOsVKEobf_GPr-v2tecFTVppjL6Qw@mail.gmail.com>
 <CAFycZ9fTXwFmC2c3si9VH37MWe=cmJQAs0xn8r-kzJF4p0+o4w@mail.gmail.com>
Message-ID: <CAG=rPVfJC=gJCypTUUdOgTUWo3mFwpxvvcOQ16P+VBfmbz-dqQ@mail.gmail.com>

On Sun, Jul 3, 2016 at 11:00 PM, Adi Roiban <adi at roiban.ro> wrote:

>
>
>
> On 4 July 2016 at 00:43, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
>
>> Hi,
>>
>> I submitted this pull request:
>> https://github.com/twisted/twisted/pull/224
>>
>> and codecov is saying that only 66.67% of the patch is covered because it
>> is not hitting the Python 3 specific block:
>>
>> https://codecov.io/gh/twisted/twisted/compare/502f3a1e2cc125d214b6b7df5b173aa91fc7f966...d286bf22f8b653f75dc3a22cedbe295370435163
>>
>> This buildbot ran the build on Python 3 and uploaded a coverage report:
>>
>> https://buildbot.twistedmatrix.com/builders/fedora22-py3.4-coverage/builds/630
>>
>> Is something wrong here?  I don't understand how Python 3 coverage is not
>> reported.
>>
>
> Only the modules (including the test modules) from dist3.py are executed
> on Python3
> https://github.com/twisted/twisted/blob/trunk/twisted/python/dist3.py
>
> In the header of that file you can see
>
> # -*- test-case-name: twisted.python.test.test_dist3 -*-
>
> and also in the test modules we have
>
> twisted.python.test.test_dist3
>
> ---------------
>
> That is you need to make the changes in that module
>
> twisted.python.test.test_dist is not executed on Python3 ... hence its
> coverage is not reported on Python3
>
>
>
Is it possible to add the actual invocation of setup.py to coverage?

That seems like a hole that the actual invocation of setup.py that does the
build and install
is not part of the coverage reporting.  setup.py is just a Python script,
so why can't it be run under coverage?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160704/34a2b9b9/attachment-0001.html>

From cory at lukasa.co.uk  Mon Jul  4 04:06:09 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Mon, 4 Jul 2016 11:06:09 +0100
Subject: [Twisted-Python] Buildbot upgrade to latest eight branch
In-Reply-To: <CAFycZ9dYrkvdWd7R9tmxeKGJGZgMhE4Rkuy=8LMMv6+kiSpt5Q@mail.gmail.com>
References: <CAFycZ9en8Vzts5s8Z4+vu8d1q73okX6736de=CH6XcedgsDQrw@mail.gmail.com>
 <5C1A7E78-BB95-4FC1-B323-7469916B443C@twistedmatrix.com>
 <CAFycZ9fPqJ1ec-WddC1jVX8brCnPqZjNTZDTkjBniMWfMjubAA@mail.gmail.com>
 <CAOtB_kmghLME7QMWp0C4mq3894U5bws=yXSfbBxEfuLJr9vffA@mail.gmail.com>
 <CAFycZ9dYrkvdWd7R9tmxeKGJGZgMhE4Rkuy=8LMMv6+kiSpt5Q@mail.gmail.com>
Message-ID: <8640C865-8381-486C-94A5-32BB1EFD926E@lukasa.co.uk>


> On 2 Jul 2016, at 23:42, Adi Roiban <adi at roiban.ro> wrote:
> 
> With this change, Buildbot should have a closer behavior to Travis-CI. That is, it will automatically start the builders and will report the build results in GitHub PR.

I spotted this in action today before I?d read this list post, so I just want to say: thanks so much for this Adi! This is one of those little changes that makes life a great deal nicer for me as a reviewer *and* contributor: not needing to do the dance with forcing the buildbots to run is really excellent.

Cory

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160704/e4b298ce/attachment.pgp>

From cory at lukasa.co.uk  Mon Jul  4 04:22:32 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Mon, 4 Jul 2016 11:22:32 +0100
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAO38UCmZyw2rPSs+-xAAOtY4erfRaP4WBW3KjpNZWGdux1gD4g@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAFycZ9dxb+cn42A56QZeaZ2y4AvgL2KLnxCW0_vy+ftztimeNw@mail.gmail.com>
 <CAO38UCmZyw2rPSs+-xAAOtY4erfRaP4WBW3KjpNZWGdux1gD4g@mail.gmail.com>
Message-ID: <E303FDF5-784E-4EDD-8E61-D89EBE2113C6@lukasa.co.uk>

Good catch Pawe?. I have opened this issue as Twisted issue #8558: https://twistedmatrix.com/trac/ticket/8558 <https://twistedmatrix.com/trac/ticket/8558>. I believe I know what the fix is and it?s fairly simple, so I?ll try to address this quickly and see if we can ship the fix in either the next pre-release or in the actual 16.3 release.

Cory

> On 3 Jul 2016, at 13:47, Pawe? Miech <pawelmhm at gmail.com <mailto:pawelmhm at gmail.com>> wrote:
> 
> > AFAIK this is a known issue :
> 
> Ah thanks, that's ok.
> 
> One other thing I noticed a propos HTTP 2 is that it seems that reading relatively large file results in error: "priority.priority.MissingStreamError: 'Stream 1 not in tree'". I created simple gist to recreate this issue see here: https://gist.github.com/pawelmhm/3aa7e4f3a0e322364dcb75e3f0a32da4 <https://gist.github.com/pawelmhm/3aa7e4f3a0e322364dcb75e3f0a32da4> Resource is launched with Python 3.4, to test it on the client I used curl with http2 support. Data file <https://drive.google.com/file/d/0B6myg3n6dqcVcXpPdkJCNUJLOTA/view?pref=2&pli=1> is not huge (570kb) but the error is raised when I send it as a whole, when I only send some smaller chunk (e.g. first 100 items from file) it seems to work ok. It seems that Python-hyper is all right with this file, perhaps curl --http2 does something weird.
> 
> 2016-07-03 12:50 GMT+02:00 Adi Roiban <adi at roiban.ro <mailto:adi at roiban.ro>>:
> 
> 
> On 3 July 2016 at 11:15, Pawe? Miech <pawelmhm at gmail.com <mailto:pawelmhm at gmail.com>> wrote:
> HTTP2 support sounds really exciting.
> 
> > Please let me know if you have any issues, as well as if you don't! If everything works well, that's a good thing for me to know :)
> 
> I played around with this today and found out that the command you recommend:
> 
> >  pip install -U https://twistedmatrix.com/Releases/pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2#egg=Twisted[http2,tls] <https://twistedmatrix.com/Releases/pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2#egg=Twisted[http2,tls]>
> does NOT install dependencies when ran on Python 3, I had to manually install h2 to HTTP2 support to work. It works ok on Python 2. My installation logs on Python 3.4 look like this:
> 
> 
> AFAIK this is a known issue :
> 
> see https://github.com/twisted/twisted/blob/trunk/docs/installation/howto/optional.rst <https://github.com/twisted/twisted/blob/trunk/docs/installation/howto/optional.rst>
> 
> 
> 
> --
> Adi Roiban
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160704/3b0f73ea/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160704/3b0f73ea/attachment.pgp>

From adi at roiban.ro  Mon Jul  4 04:30:55 2016
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 4 Jul 2016 11:30:55 +0100
Subject: [Twisted-Python] Python 3 code coverage not working?
In-Reply-To: <CAG=rPVfJC=gJCypTUUdOgTUWo3mFwpxvvcOQ16P+VBfmbz-dqQ@mail.gmail.com>
References: <CAG=rPVeC+bT1ErCfzNCsKYOsVKEobf_GPr-v2tecFTVppjL6Qw@mail.gmail.com>
 <CAFycZ9fTXwFmC2c3si9VH37MWe=cmJQAs0xn8r-kzJF4p0+o4w@mail.gmail.com>
 <CAG=rPVfJC=gJCypTUUdOgTUWo3mFwpxvvcOQ16P+VBfmbz-dqQ@mail.gmail.com>
Message-ID: <CAFycZ9dmsr+6RgkQrOu6TPE-zA1vwLTat=nssFP-JVt9Ce-cew@mail.gmail.com>

On 4 July 2016 at 08:00, Craig Rodrigues <rodrigc at crodrigues.org> wrote:

>
>
> On Sun, Jul 3, 2016 at 11:00 PM, Adi Roiban <adi at roiban.ro> wrote:
>
>>
>>
>>
>> On 4 July 2016 at 00:43, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
>>
>>> Hi,
>>>
>>> I submitted this pull request:
>>> https://github.com/twisted/twisted/pull/224
>>>
>>> and codecov is saying that only 66.67% of the patch is covered because
>>> it is not hitting the Python 3 specific block:
>>>
>>> https://codecov.io/gh/twisted/twisted/compare/502f3a1e2cc125d214b6b7df5b173aa91fc7f966...d286bf22f8b653f75dc3a22cedbe295370435163
>>>
>>> This buildbot ran the build on Python 3 and uploaded a coverage report:
>>>
>>> https://buildbot.twistedmatrix.com/builders/fedora22-py3.4-coverage/builds/630
>>>
>>> Is something wrong here?  I don't understand how Python 3 coverage is
>>> not reported.
>>>
>>
>> Only the modules (including the test modules) from dist3.py are executed
>> on Python3
>> https://github.com/twisted/twisted/blob/trunk/twisted/python/dist3.py
>>
>> In the header of that file you can see
>>
>> # -*- test-case-name: twisted.python.test.test_dist3 -*-
>>
>> and also in the test modules we have
>>
>> twisted.python.test.test_dist3
>>
>> ---------------
>>
>> That is you need to make the changes in that module
>>
>> twisted.python.test.test_dist is not executed on Python3 ... hence its
>> coverage is not reported on Python3
>>
>>
>>
> Is it possible to add the actual invocation of setup.py to coverage?
>
> That seems like a hole that the actual invocation of setup.py that does
> the build and install
> is not part of the coverage reporting.  setup.py is just a Python script,
> so why can't it be run under coverage?
>
>
We can have a test for setup.py, it just needs someone to write that test :)

Regards,
Adi

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160704/20faf4d6/attachment.html>

From rodrigc at crodrigues.org  Mon Jul  4 04:52:49 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 4 Jul 2016 03:52:49 -0700
Subject: [Twisted-Python] Python 3 code coverage not working?
In-Reply-To: <CAFycZ9dmsr+6RgkQrOu6TPE-zA1vwLTat=nssFP-JVt9Ce-cew@mail.gmail.com>
References: <CAG=rPVeC+bT1ErCfzNCsKYOsVKEobf_GPr-v2tecFTVppjL6Qw@mail.gmail.com>
 <CAFycZ9fTXwFmC2c3si9VH37MWe=cmJQAs0xn8r-kzJF4p0+o4w@mail.gmail.com>
 <CAG=rPVfJC=gJCypTUUdOgTUWo3mFwpxvvcOQ16P+VBfmbz-dqQ@mail.gmail.com>
 <CAFycZ9dmsr+6RgkQrOu6TPE-zA1vwLTat=nssFP-JVt9Ce-cew@mail.gmail.com>
Message-ID: <CAG=rPVcq-c385FFs8UCUL4=Hwf--jxdbE6kE=gAKDR47-kKexg@mail.gmail.com>

On Mon, Jul 4, 2016 at 3:30 AM, Adi Roiban <adi at roiban.ro> wrote:


>
>
> Is it possible to add the actual invocation of setup.py to coverage?
>>
>
>
> That seems like a hole that the actual invocation of setup.py that does
>> the build and install
>>
>
> is not part of the coverage reporting.  setup.py is just a Python script,
>> so why can't it be run under coverage?
>>
>
>
>
> We can have a test for setup.py, it just needs someone to write that test
> :)
>
>
>
Why can't we run setup.py directly under coverage, during the coverage
build?
Isn't running setup.py during the build one way of testing it?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160704/ce2aa264/attachment-0001.html>

From rodrigc at crodrigues.org  Mon Jul  4 05:27:23 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 4 Jul 2016 04:27:23 -0700
Subject: [Twisted-Python] Python 3 code coverage not working?
In-Reply-To: <CAFycZ9fTXwFmC2c3si9VH37MWe=cmJQAs0xn8r-kzJF4p0+o4w@mail.gmail.com>
References: <CAG=rPVeC+bT1ErCfzNCsKYOsVKEobf_GPr-v2tecFTVppjL6Qw@mail.gmail.com>
 <CAFycZ9fTXwFmC2c3si9VH37MWe=cmJQAs0xn8r-kzJF4p0+o4w@mail.gmail.com>
Message-ID: <CAG=rPVc1VXTm35NJ3qyVFPstR2xw=TGHq9mr8UvA2tEOhDHx4Q@mail.gmail.com>

On Sun, Jul 3, 2016 at 11:00 PM, Adi Roiban <adi at roiban.ro> wrote:

>
>
> Only the modules (including the test modules) from dist3.py are executed
> on Python3
> https://github.com/twisted/twisted/blob/trunk/twisted/python/dist3.py
>
> In the header of that file you can see
>
> # -*- test-case-name: twisted.python.test.test_dist3 -*-
>
> and also in the test modules we have
>
> twisted.python.test.test_dist3
>
> ---------------
>
> That is you need to make the changes in that module
>
> twisted.python.test.test_dist is not executed on Python3 ... hence its
> coverage is not reported on Python3
>
>


In https://github.com/twisted/twisted/pull/224 , I made no changes to
twisted/python/dist3.py, so
making changes to test_dist3.py will not help.

I added twisted.python.test.test_dist to the list of tests executed on
Python 3 in https://github.com/twisted/twisted/pull/288 and that
fixed the coverage problem.

I still think that setup.py should be invoked under coverage (I assume in
tox.ini)  in the coverage build,
without writing a separate test for setup.py

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160704/9cc3fcbc/attachment.html>

From adi at roiban.ro  Mon Jul  4 05:36:40 2016
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 4 Jul 2016 12:36:40 +0100
Subject: [Twisted-Python] Python 3 code coverage not working?
In-Reply-To: <CAG=rPVc1VXTm35NJ3qyVFPstR2xw=TGHq9mr8UvA2tEOhDHx4Q@mail.gmail.com>
References: <CAG=rPVeC+bT1ErCfzNCsKYOsVKEobf_GPr-v2tecFTVppjL6Qw@mail.gmail.com>
 <CAFycZ9fTXwFmC2c3si9VH37MWe=cmJQAs0xn8r-kzJF4p0+o4w@mail.gmail.com>
 <CAG=rPVc1VXTm35NJ3qyVFPstR2xw=TGHq9mr8UvA2tEOhDHx4Q@mail.gmail.com>
Message-ID: <CAFycZ9fL74+b6B1SOtj6ifAsT8LeBjc56Ec_3Fi33_7fZ9H2mg@mail.gmail.com>

On 4 July 2016 at 12:27, Craig Rodrigues <rodrigc at crodrigues.org> wrote:

> On Sun, Jul 3, 2016 at 11:00 PM, Adi Roiban <adi at roiban.ro> wrote:
>
>>
>>
>> Only the modules (including the test modules) from dist3.py are executed
>> on Python3
>> https://github.com/twisted/twisted/blob/trunk/twisted/python/dist3.py
>>
>> In the header of that file you can see
>>
>> # -*- test-case-name: twisted.python.test.test_dist3 -*-
>>
>> and also in the test modules we have
>>
>> twisted.python.test.test_dist3
>>
>> ---------------
>>
>> That is you need to make the changes in that module
>>
>> twisted.python.test.test_dist is not executed on Python3 ... hence its
>> coverage is not reported on Python3
>>
>>
>
>
> In https://github.com/twisted/twisted/pull/224 , I made no changes to
> twisted/python/dist3.py, so
> making changes to test_dist3.py will not help.
>
>
I added twisted.python.test.test_dist to the list of tests executed on
> Python 3 in https://github.com/twisted/twisted/pull/288 and that
> fixed the coverage problem.
>
>
I think that dist.py vs dist3.py was made on purpose as 2 different file.
That is, you should not have any `if _PY3` code in any of those files.

But I might be wrong :)

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160704/058a3d5e/attachment.html>

From adi at roiban.ro  Mon Jul  4 05:39:18 2016
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 4 Jul 2016 12:39:18 +0100
Subject: [Twisted-Python] Buildbot upgrade to latest eight branch
In-Reply-To: <8640C865-8381-486C-94A5-32BB1EFD926E@lukasa.co.uk>
References: <CAFycZ9en8Vzts5s8Z4+vu8d1q73okX6736de=CH6XcedgsDQrw@mail.gmail.com>
 <5C1A7E78-BB95-4FC1-B323-7469916B443C@twistedmatrix.com>
 <CAFycZ9fPqJ1ec-WddC1jVX8brCnPqZjNTZDTkjBniMWfMjubAA@mail.gmail.com>
 <CAOtB_kmghLME7QMWp0C4mq3894U5bws=yXSfbBxEfuLJr9vffA@mail.gmail.com>
 <CAFycZ9dYrkvdWd7R9tmxeKGJGZgMhE4Rkuy=8LMMv6+kiSpt5Q@mail.gmail.com>
 <8640C865-8381-486C-94A5-32BB1EFD926E@lukasa.co.uk>
Message-ID: <CAFycZ9cp1N5+L0-RVd6s+wGmBnbApX++R_=qhQhHScT3SA6k2w@mail.gmail.com>

On 4 July 2016 at 11:06, Cory Benfield <cory at lukasa.co.uk> wrote:

>
> > On 2 Jul 2016, at 23:42, Adi Roiban <adi at roiban.ro> wrote:
> >
> > With this change, Buildbot should have a closer behavior to Travis-CI.
> That is, it will automatically start the builders and will report the build
> results in GitHub PR.
>
> I spotted this in action today before I?d read this list post, so I just
> want to say: thanks so much for this Adi! This is one of those little
> changes that makes life a great deal nicer for me as a reviewer *and*
> contributor: not needing to do the dance with forcing the buildbots to run
> is really excellent.
>
>
With this change you no longer have to create duplicate PR for "imported"
branches . Just create the branch and Travis and Buildbot will
automatically do their job and you can merge the "imported" branch without
a PR.

"Imported" branch is a branch hosted in the Twisted main repo but which
contains changes merged from a forked repo.


-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160704/5c433c48/attachment.html>

From rodrigc at crodrigues.org  Mon Jul  4 05:48:26 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 4 Jul 2016 04:48:26 -0700
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
Message-ID: <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>

On Sun, Jul 3, 2016 at 3:15 AM, Pawe? Miech <pawelmhm at gmail.com> wrote:

> HTTP2 support sounds really exciting.
>
> > Please let me know if you have any issues, as well as if you don't! If
> everything works well, that's a good thing for me to know :)
>
> I played around with this today and found out that the command you
> recommend:
>
> >  pip install -U https://twistedmatrix.com/Releases
> /pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2#egg=Twisted[http2,tls]
>
> does NOT install dependencies when ran on Python 3, I had to manually
> install h2 to HTTP2 support to work. It works ok on Python 2. My
> installation logs on Python 3.4 look like this:
>
>
I think I've fixed that in trunk with this:

https://github.com/twisted/twisted/pull/287

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160704/576486fd/attachment.html>

From tom.prince at ualberta.net  Mon Jul  4 12:56:08 2016
From: tom.prince at ualberta.net (Tom Prince)
Date: Mon, 4 Jul 2016 12:56:08 -0600
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <CAFycZ9erykD7+bEe7LE13i_mvmoPpKVH8OtrGyOTExqx5n47vg@mail.gmail.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
 <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
 <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>
 <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>
 <CAG=rPVd+HF3LUnb6EX-UYuGDSqLk8-e7XT-AV26RCgt_phfU8g@mail.gmail.com>
 <78DF920E-B059-4369-BDA5-AA65319BF692@twistedmatrix.com>
 <CAFycZ9eWS56jAtqUJEGn1Vn7H2zgY+BV5_pQWRupWt6ex9j6hw@mail.gmail.com>
 <CAMcKhMTh8EnPb7+b51svbqHrj5ztZkw6bymZVj6jLmZYc9q22w@mail.gmail.com>
 <CAFycZ9erykD7+bEe7LE13i_mvmoPpKVH8OtrGyOTExqx5n47vg@mail.gmail.com>
Message-ID: <CAOtB_km6NCRE4jBqG=HLV7MOKZCHAAvMa+mCAmwrV_2uojbVtg@mail.gmail.com>

On Sun, Jul 3, 2016 at 8:13 AM, Adi Roiban <adi at roiban.ro> wrote:
> I would prefer to see the coverage reports for tests, even if we don't
> enforce 100% coverage.  Is a quick way to check that the test is executed on
> at least one builder.

I think this is definitely desirable.

> We are preaching the Ultimate Quality Development System (UQDS) (tm) but [...]

Reading through
https://twistedmatrix.com/trac/wiki/UltimateQualityDevelopmentSystem
it doesn't actually say anything about linters or code coverage or warnings.
That isn't t to say that the things you suggest are not valuable,
just that calling a process that doesn't enforce all of those things
absolutely all the time
as "Almost Ultimate Quality Development System" is doing a disservice
to the idea.

I'll admit that I haven't read that as closely as I should, but
re-reading it now, I see:
"A reviewer reviews the completed work, and provides feedback: at
least one good thing about the work, at least one area that needs
improvement, and a judgement as to whether the good qualities
ultimately outweigh the bad, i.e. whether the branch should be
merged."
which explicitly allows for imperfections in the code, as long as
there is an overall improvement.

> [...] that test code is a 2nd class citizen [...]

It isn't necessarily that test code is a second class citizen,
but the purpose of the code is different that implementation code,
so the trade-offs that make sense in each context might not be the same.

-- Tom


From adi at roiban.ro  Tue Jul  5 06:18:23 2016
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 5 Jul 2016 13:18:23 +0100
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <CAG=rPVd7n53F+oqC+RdU9p1X+kJXdR1qVady9BxsERp0cVvEJg@mail.gmail.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
 <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
 <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>
 <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>
 <CAG=rPVd+HF3LUnb6EX-UYuGDSqLk8-e7XT-AV26RCgt_phfU8g@mail.gmail.com>
 <78DF920E-B059-4369-BDA5-AA65319BF692@twistedmatrix.com>
 <CAFycZ9eWS56jAtqUJEGn1Vn7H2zgY+BV5_pQWRupWt6ex9j6hw@mail.gmail.com>
 <CAMcKhMTh8EnPb7+b51svbqHrj5ztZkw6bymZVj6jLmZYc9q22w@mail.gmail.com>
 <CFE65ECB-B688-480B-B9F5-AA2F5DD46DA2@twistedmatrix.com>
 <CAG=rPVd7n53F+oqC+RdU9p1X+kJXdR1qVady9BxsERp0cVvEJg@mail.gmail.com>
Message-ID: <CAFycZ9fBcAqb6MbjCiWZVLFjH5w0iZGreSM0PSDTKTrLycL8Nw@mail.gmail.com>

On 3 July 2016 at 20:32, Craig Rodrigues <rodrigc at crodrigues.org> wrote:

>
>
> On Sun, Jul 3, 2016 at 9:10 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>
> wrote:
>
>>
>> For now, let's just bite the bullet and require 100% patch coverage from
>> here on out.  If we hit a really nasty case where it really *is* a
>> significant investment of effort, then maybe we can revisit this discussion
>> and explore a better way to express this exception without losing
>> information about test coverage completely.
>>
>>
> Requiring 100% patch coverage sounds reasonable.  However, what if the
> infrastructure for running coverage and uploading reports
> to codecov.io isn't working?
> Running coverage under Pypy is apparently not working (
> https://github.com/twisted/twisted/pull/223#issuecomment-228626722 ).
> This is blocking forward progress on patches to fix the Pypy tests.
>
>
I have disabled codecov patch coverage for now as I think that codecov.io
reporting is buggy.

For coverage merge protection please see See
https://github.com/twisted-infra/braid/issues/213

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160705/e1aa5411/attachment.html>

From rodrigc at crodrigues.org  Tue Jul  5 16:26:22 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 5 Jul 2016 15:26:22 -0700
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <CAFycZ9fBcAqb6MbjCiWZVLFjH5w0iZGreSM0PSDTKTrLycL8Nw@mail.gmail.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
 <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
 <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>
 <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>
 <CAG=rPVd+HF3LUnb6EX-UYuGDSqLk8-e7XT-AV26RCgt_phfU8g@mail.gmail.com>
 <78DF920E-B059-4369-BDA5-AA65319BF692@twistedmatrix.com>
 <CAFycZ9eWS56jAtqUJEGn1Vn7H2zgY+BV5_pQWRupWt6ex9j6hw@mail.gmail.com>
 <CAMcKhMTh8EnPb7+b51svbqHrj5ztZkw6bymZVj6jLmZYc9q22w@mail.gmail.com>
 <CFE65ECB-B688-480B-B9F5-AA2F5DD46DA2@twistedmatrix.com>
 <CAG=rPVd7n53F+oqC+RdU9p1X+kJXdR1qVady9BxsERp0cVvEJg@mail.gmail.com>
 <CAFycZ9fBcAqb6MbjCiWZVLFjH5w0iZGreSM0PSDTKTrLycL8Nw@mail.gmail.com>
Message-ID: <CAG=rPVdbrNOHKpVS4_-yNvJYE9E=sWjwK3T_W59V4Yq1e7v2SA@mail.gmail.com>

On Tue, Jul 5, 2016 at 5:18 AM, Adi Roiban <adi at roiban.ro> wrote:
>
>
>
> I have disabled codecov patch coverage for now as I think that codecov.io
reporting is buggy.
>
> For coverage merge protection please see See
https://github.com/twisted-infra/braid/issues/213
>

I'm still seeing problems with codecov.  In this build:
https://buildbot.twistedmatrix.com/builders/windows7-64-py2.7-coverage/builds/680

uploading coverage results is failing:

==> Uploading
    .url https://codecov.io
    .query
package=py2.0.5&yaml=codecov.yml&token=<secret>&build=windows64py27&branch=8503-markrwilliams-pypy-indicator&commit=9176793afb9ca8fcafaf4f3d518f6a4166deddb4
    Pinging Codecov...
    Uploading to S3...
Error: 403 Client Error: Forbidden for url:
https://codecov.s3.amazonaws.com/v4/raw/2016-07-05/BB05435E28F8047E9B3D49B4B7BFA4B3/9176793afb9ca8fcafaf4f3d518f6a4166deddb4/10b1e59d-607a-4c5d-939d-6903844ba287.txt?AWSAccessKeyId=AKIAIHLZSCQCS4WIHD4A&Expires=1467755156&Signature=bmYejCo3NYpn7qPFLatb0RGydLk%3D


I am not sure, but I think this is blocking coverage results from being
reported in this PR: https://github.com/twisted/twisted/pull/223

--

Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160705/b730442a/attachment.html>

From glyph at twistedmatrix.com  Tue Jul  5 18:17:09 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 5 Jul 2016 17:17:09 -0700
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <CAFycZ9fBcAqb6MbjCiWZVLFjH5w0iZGreSM0PSDTKTrLycL8Nw@mail.gmail.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
 <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
 <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>
 <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>
 <CAG=rPVd+HF3LUnb6EX-UYuGDSqLk8-e7XT-AV26RCgt_phfU8g@mail.gmail.com>
 <78DF920E-B059-4369-BDA5-AA65319BF692@twistedmatrix.com>
 <CAFycZ9eWS56jAtqUJEGn1Vn7H2zgY+BV5_pQWRupWt6ex9j6hw@mail.gmail.com>
 <CAMcKhMTh8EnPb7+b51svbqHrj5ztZkw6bymZVj6jLmZYc9q22w@mail.gmail.com>
 <CFE65ECB-B688-480B-B9F5-AA2F5DD46DA2@twistedmatrix.com>
 <CAG=rPVd7n53F+oqC+RdU9p1X+kJXdR1qVady9BxsERp0cVvEJg@mail.gmail.com>
 <CAFycZ9fBcAqb6MbjCiWZVLFjH5w0iZGreSM0PSDTKTrLycL8Nw@mail.gmail.com>
Message-ID: <EA67A8B8-79F4-417B-972D-660BE1E1E6DE@twistedmatrix.com>


> On Jul 5, 2016, at 05:18, Adi Roiban <adi at roiban.ro> wrote:
> 
> 
> 
> On 3 July 2016 at 20:32, Craig Rodrigues <rodrigc at crodrigues.org <mailto:rodrigc at crodrigues.org>> wrote:
> 
> 
> On Sun, Jul 3, 2016 at 9:10 AM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> For now, let's just bite the bullet and require 100% patch coverage from here on out.  If we hit a really nasty case where it really is a significant investment of effort, then maybe we can revisit this discussion and explore a better way to express this exception without losing information about test coverage completely.
> 
> 
> Requiring 100% patch coverage sounds reasonable.  However, what if the infrastructure for running coverage and uploading reports
> to codecov.io <http://codecov.io/> isn't working? 
> Running coverage under Pypy is apparently not working ( https://github.com/twisted/twisted/pull/223#issuecomment-228626722 <https://github.com/twisted/twisted/pull/223#issuecomment-228626722> ).  This is blocking forward progress on patches to fix the Pypy tests.
> 
> 
> I have disabled codecov patch coverage for now as I think that codecov.io <http://codecov.io/> reporting is buggy.
> 
> For coverage merge protection please see See https://github.com/twisted-infra/braid/issues/213 <https://github.com/twisted-infra/braid/issues/213>
Thanks for documenting this.

This PR was recently rejected due to lack of test coverage (with no other feedback): https://twistedmatrix.com/trac/ticket/5705#comment:15.  If we believe codecov is buggy, are we sure that this is actually the case, and it wasn't just a codecov bug?

-glyph



-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160705/4f22ae08/attachment.html>

From hawkowl at atleastfornow.net  Wed Jul  6 06:41:37 2016
From: hawkowl at atleastfornow.net (Amber Hawkie Brown)
Date: Wed, 6 Jul 2016 20:41:37 +0800
Subject: [Twisted-Python] Twisted 16.3.0 Release Announcement
Message-ID: <1E7576CB-F343-4B87-B464-30530D9D8718@atleastfornow.net>

On behalf of Twisted Matrix Laboratories, I am honoured to announce the release of Twisted 16.3.0.

The highlights of this release are:

- The Git migration has happened, so we've updated our development documentation to match. We're now trialling accepting pull requests at github.com/twisted/twisted, so if you've ever wanted an excuse to contribute, now's the chance!
- In our steady shedding of baggage, twisted.spread.ui, twisted.manhole (not to be confused with twisted.conch.manhole!), and a bunch of old and deprecated stuff from twisted.python.reflect and twisted.protocols.sip have been removed.
- twisted.web's HTTP server now handles pipelined requests better -- it used to try and process them in parallel, but this was fraught with problems and now it processes them in series, which is less surprising to code that expects the Request's transport to not be buffered (e.g. WebSockets). There is also a bugfix for HTTP timeouts not working in 16.2.
- Twisted now has HTTP/2 support in its web server! This is currently not available by default -- you will need to install hyper-h2, which is available in the [h2] setuptools extras. If you want to play around with it "pip install twisted[h2]" (on Python 2, a bugfix release will make it available on Python 3) and add "h2" to your Site's acceptableProtocols.
- 53 tickets closed overall, including cleanups that move us closer to a total Python 3 port.

For more information, check the NEWS file (link provided below).

You can find the downloads at <https://pypi.python.org/pypi/Twisted> (or alternatively <http://twistedmatrix.com/trac/wiki/Downloads>). The NEWS file is also available at <https://github.com/twisted/twisted/blob/twisted-16.3.0/NEWS>.

Many thanks to everyone who had a part in this release - the supporters of the Twisted Software Foundation, the developers who contributed code as well as documentation, and all the people building great things with Twisted!

Twisted Regards,
Amber Brown (HawkOwl)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160706/c527332c/attachment.pgp>

From glyph at twistedmatrix.com  Thu Jul  7 13:50:25 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 7 Jul 2016 12:50:25 -0700
Subject: [Twisted-Python] dropping old pyOpenSSL versions
Message-ID: <9AD2CDAD-D794-48A5-8CA8-74537422EED6@twistedmatrix.com>

In the past, we've been very conservative about updating to require new versions of pyOpenSSL and cryptography.

Right now we have a patch, <https://github.com/twisted/twisted/pull/146> (<https://twistedmatrix.com/trac/ticket/8441#comment:1>), that I'd like to just land.  However, it establishes a dependency on a new version of pyOpenSSL, which transitively establishes a dependency on a new version of Cryptography.

Generally, my thinking has evolved over the last few years to think that security dependencies like this should move fast, especially on projects (like pyOpenSSL and cryptography specifically) that don't maintain "stable" branches which do security patch-releases.

In this specific case, the fix is not urgent; as it turns out, the netscape SPKI APIs actually do do the desired thing, which is just hashing the DER bytes of the key.  (At the time I made the change to use Netscape SPKI, I thought it might be including somet other junk in the hash; we just lucked out here.)  It's just a gross API for doing it which we should stop using now that better APIs have been exposed to do the same thing.

However, it bears discussing - what are the things that hold us to older versions of pyOpenSSL and cryptography?  Is there any good reason not to move our version pins forward whenever there's a new API or feature that we'd like, even for something simple like this cleanup?

My default position is "upgrade upgrade upgrade" so if there's not a lot of interest in this discussion I'll probably just land the PR in question as-is.

Thanks all,

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160707/eebb28aa/attachment.html>

From clayton.daley at gmail.com  Thu Jul  7 15:06:52 2016
From: clayton.daley at gmail.com (Clayton Daley)
Date: Thu, 7 Jul 2016 16:06:52 -0500
Subject: [Twisted-Python] dropping old pyOpenSSL versions
In-Reply-To: <9AD2CDAD-D794-48A5-8CA8-74537422EED6@twistedmatrix.com>
References: <9AD2CDAD-D794-48A5-8CA8-74537422EED6@twistedmatrix.com>
Message-ID: <CACKEAnXBwsGapZCw3nLdD-p1m3F+uFFVqybtDEHM4YSqJJOQwg@mail.gmail.com>

I don't object to this specific change (we're on shiny new code), but want
to offer some food-for-thought:

1) Is newer really better in cryptography?  Heartbleed affected 1.0.1, but
not 1.0.0 and there are a bunch of vulnerabilities that only affect the
newer libraries (https://www.openssl.org/news/vulnerabilities.html).  It
even makes sense that the older libraries have been more-thoroughly
tested... so new code may just mean new vulnerabilities.

2) How does this impact regulated industries.  In healthcare (my current
industry), changing a library (especially cryptography) could mean:

   - An internal review to select a new version of the library
   - An internal change management process
   - Technical testing (perhaps a 3rd party audit)
   - A notification to clients of the change
   - Secondary reviews/testing at clients

The intensity of this process depends on the risk level of the system and
this could be a long and complicated process for some organizations.  Seems
like a more deliberate deprecation policy would make it easier to plan
ahead.

Clayton Daley


On Thu, Jul 7, 2016 at 2:50 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

> In the past, we've been very conservative about updating to require new
> versions of pyOpenSSL and cryptography.
>
> Right now we have a patch, <https://github.com/twisted/twisted/pull/146
> > (<https://twistedmatrix.com/trac/ticket/8441#comment:1>), that I'd like
> to just land.  However, it establishes a dependency on a new version of
> pyOpenSSL, which transitively establishes a dependency on a new version of
> Cryptography.
>
> Generally, my thinking has evolved over the last few years to think that
> security dependencies like this should move fast, especially on projects
> (like pyOpenSSL and cryptography specifically) that don't maintain "stable"
> branches which do security patch-releases.
>
> In this specific case, the fix is not urgent; as it turns out, the
> netscape SPKI APIs actually *do* do the desired thing, which is just
> hashing the DER bytes of the key.  (At the time I made the change to use
> Netscape SPKI, I thought it might be including somet other junk in the
> hash; we just lucked out here.)  It's just a gross API for doing it which
> we should stop using now that better APIs have been exposed to do the same
> thing.
>
> However, it bears discussing - what are the things that hold us to older
> versions of pyOpenSSL and cryptography?  Is there any good reason *not* to
> move our version pins forward whenever there's a new API or feature that
> we'd like, even for something simple like this cleanup?
>
> My default position is "upgrade upgrade upgrade" so if there's not a lot
> of interest in this discussion I'll probably just land the PR in question
> as-is.
>
> Thanks all,
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160707/3b01d7c9/attachment.html>

From mithrandi at mithrandi.net  Thu Jul  7 16:03:45 2016
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Thu, 07 Jul 2016 22:03:45 +0000
Subject: [Twisted-Python] dropping old pyOpenSSL versions
In-Reply-To: <CACKEAnXBwsGapZCw3nLdD-p1m3F+uFFVqybtDEHM4YSqJJOQwg@mail.gmail.com>
References: <9AD2CDAD-D794-48A5-8CA8-74537422EED6@twistedmatrix.com>
 <CACKEAnXBwsGapZCw3nLdD-p1m3F+uFFVqybtDEHM4YSqJJOQwg@mail.gmail.com>
Message-ID: <CAMcKhMQrYKUKp6q7H-Taw9YnqP-JzPr1vKyOy5ErAZyZoNtD+A@mail.gmail.com>

On Thu, 7 Jul 2016 at 23:07 Clayton Daley <clayton.daley at gmail.com> wrote:

> I don't object to this specific change (we're on shiny new code), but want
> to offer some food-for-thought:
>
> 1) Is newer really better in cryptography?  Heartbleed affected 1.0.1, but
> not 1.0.0 and there are a bunch of vulnerabilities that only affect the
> newer libraries (https://www.openssl.org/news/vulnerabilities.html).  It
> even makes sense that the older libraries have been more-thoroughly
> tested... so new code may just mean new vulnerabilities.
>

First of all, newer cryptography and newer OpenSSL are different things.
Given that cryptography itself is mostly made of Python and cffi, not C
code, I think it's unlikely that a newer version of cryptography is likely
to be worse than an older one. Older libraries being "more thoroughly
tested" only really applies where a library has a plethora of simultaneous
release channels; for most libraries, using older versions just means
missing out on any fixes for issues that were found more recently than the
release was released.

Even regarding OpenSSL, which is a horrible pile of C, it's unlikely that
the potential of another *Heartbleed*-like issue is more dangerous than the
lack of actual known improvements.

2) How does this impact regulated industries.  In healthcare (my current
> industry), changing a library (especially cryptography) could mean:
>
>    - An internal review to select a new version of the library
>    - An internal change management process
>    - Technical testing (perhaps a 3rd party audit)
>    - A notification to clients of the change
>    - Secondary reviews/testing at clients
>
> The intensity of this process depends on the risk level of the system and
> this could be a long and complicated process for some organizations.  Seems
> like a more deliberate deprecation policy would make it easier to plan
> ahead.
>

Wouldn't all of the above apply equally to the new version of Twisted? I
would imagine you could upgrade Twisted and cryptography at the same time,
thus only doing one round of testing/review/etc. for both. (Perhaps I'm
missing something?)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160707/dc5808f0/attachment.html>

From glyph at twistedmatrix.com  Thu Jul  7 17:00:31 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 7 Jul 2016 16:00:31 -0700
Subject: [Twisted-Python] dropping old pyOpenSSL versions
In-Reply-To: <CACKEAnXBwsGapZCw3nLdD-p1m3F+uFFVqybtDEHM4YSqJJOQwg@mail.gmail.com>
References: <9AD2CDAD-D794-48A5-8CA8-74537422EED6@twistedmatrix.com>
 <CACKEAnXBwsGapZCw3nLdD-p1m3F+uFFVqybtDEHM4YSqJJOQwg@mail.gmail.com>
Message-ID: <6F737E29-D013-4E93-B5F1-C506FAAF0CA6@twistedmatrix.com>


> On Jul 7, 2016, at 2:06 PM, Clayton Daley <clayton.daley at gmail.com> wrote:
> 
> I don't object to this specific change (we're on shiny new code), but want to offer some food-for-thought:
> 
> 1) Is newer really better in cryptography?  Heartbleed affected 1.0.1, but not 1.0.0 and there are a bunch of vulnerabilities that only affect the newer libraries (https://www.openssl.org/news/vulnerabilities.html <https://www.openssl.org/news/vulnerabilities.html>).  It even makes sense that the older libraries have been more-thoroughly tested... so new code may just mean new vulnerabilities.

I can understand the point here - that upgrades are not zero-risk - but this is a very dangerous line of reasoning.  (I think "in cryptography" you really mean the general english word "cryptography" and not like "PyCA? Cryptography?".)  It's dangerous because, as application developers, you and I aren't really _qualified_ to evaluate whether newer versions of security-critical libraries are more or less secure; the best we can do is always, always, always upgrade.  The solution to heartbleed was to upgrade to a newer version of 1.0.1, not to roll back to 0.9.8.

More importantly, heartbleed itself is not a general category of defect, in the sense that heartbleed itself shone a bright light directly on OpenSSL and exposed the real problem, which was massive underinvestment in critical security infrastructure.  The issue isn't that upgrading is dangerous, it's that letting critical infrastructure decay is dangerous.

One way that you can promote the decay of critical infrastructure is to defer upgrading out of vague fears about the upgrade going poorly rather than specific technical issues.

I should take the opportunity to point out that if you're a professional network software developer, you should really be giving a couple of bucks to the OpenSSL foundation: <https://www.openssl.org/support/donations.html>.  The most direct way to fight the decay of critical infrastructure is to fund it with cash money.  (And, for that matter, <https://twistedmatrix.com/trac/#DonatetoTwisted>...)

> 2) How does this impact regulated industries.  In healthcare (my current industry), changing a library (especially cryptography) could mean:
> An internal review to select a new version of the library
> An internal change management process
> Technical testing (perhaps a 3rd party audit)
> A notification to clients of the change
> Secondary reviews/testing at clients
> The intensity of this process depends on the risk level of the system and this could be a long and complicated process for some organizations.  Seems like a more deliberate deprecation policy would make it easier to plan ahead.

The problem with a lot of the regulatory standards that require this sort of laborious change-control is that during the entire period where all this redundant analysis and re-analysis of the change is happening, customers are still vulnerable (and in a health care context, this may mean even that lives remain at risk!).

My (entirely secondhand) understanding is that recognition is dawning in many compliance fields (HIPPA, PCI-DSS, SOX) that there is a mismatch between the realities of software development (delay in making changes == risk) and industrial change control (every change == risk), and auditors and regulators are beginning to take this into account.  This means that the ability to make changes quickly to ensure safe operation is slowly gaining ground over the ability to delay changes until sufficient evaluation has taken place.

This recognition is dawning because many of these reviews are, in fact, nonsense.  For example: "an internal review to select a new version of the library" - does every healthcare project have a qualified cryptographer and penetration tester to each independently spend the 6 months of careful code audits required to actually evaluate the relative security of new versions of OpenSSL, or does this internal review consist mainly of unqualified people pontificating about hypothetical risks, divorced from the technical realities of the upgrade in question?

My own experience has taught me that fear of changes like this is mostly developers being afraid of audit or compliance, rather than audit or compliance actually requiring it.  If you tell your auditor "we absolutely have to upgrade OpenSSL every week if an update is available", they'll usually figure out a way to do it.

I don't mean to jump down your throat here; the tone is definitely harsher than I would like, but I want it to be very clear why I have such strong feelings about upgrading security-critical dependencies.

Additionally, the Netscape SPKI APIs are disappearing from OpenSSL itself eventually, so this specific issue isn't just about upgrading - it's about preventing it from being difficult to upgrade in the future.  If we wait until the APIs are actually gone, rather than just deprecated, this may create friction around a critical security update.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160707/4be785fa/attachment-0001.html>

From clayton.daley at gmail.com  Thu Jul  7 17:00:47 2016
From: clayton.daley at gmail.com (Clayton Daley)
Date: Thu, 7 Jul 2016 18:00:47 -0500
Subject: [Twisted-Python] dropping old pyOpenSSL versions
In-Reply-To: <CAMcKhMQrYKUKp6q7H-Taw9YnqP-JzPr1vKyOy5ErAZyZoNtD+A@mail.gmail.com>
References: <9AD2CDAD-D794-48A5-8CA8-74537422EED6@twistedmatrix.com>
 <CACKEAnXBwsGapZCw3nLdD-p1m3F+uFFVqybtDEHM4YSqJJOQwg@mail.gmail.com>
 <CAMcKhMQrYKUKp6q7H-Taw9YnqP-JzPr1vKyOy5ErAZyZoNtD+A@mail.gmail.com>
Message-ID: <CACKEAnVoQfTAusPx+7ig4au5PUjaGcxGHHCX3g=eeVViqm0kDw@mail.gmail.com>

>
> First of all, newer cryptography and newer OpenSSL are different things.


The proposal was a change to pyOpenSSL.  If newer is better in all
(potentially) affected layers, then you've answered my question in the
affirmative.


> 2) How does this impact regulated industries.  In healthcare (my current
>> industry), changing a library (especially cryptography) could mean:
>>
>>    - An internal review to select a new version of the library
>>    - An internal change management process
>>    - Technical testing (perhaps a 3rd party audit)
>>    - A notification to clients of the change
>>    - Secondary reviews/testing at clients
>>
>> The intensity of this process depends on the risk level of the system and
>> this could be a long and complicated process for some organizations.  Seems
>> like a more deliberate deprecation policy would make it easier to plan
>> ahead.
>>
>
> Wouldn't all of the above apply equally to the new version of Twisted? I
> would imagine you could upgrade Twisted and cryptography at the same time,
> thus only doing one round of testing/review/etc. for both. (Perhaps I'm
> missing something?)
>

Regulations require an amount of scrutiny proportionate to the risk.  We're
small so it's not as obvious in our policies and procedures, but the
potential for big differences in process are exemplified by this paraphrase
from a vendor's document (since I'm not sure I can outright quote it):

Changes with a high rank are escalated to the individual in Role X and
> Committee Y for approval

Changes with a medium risk are escalated to the individual in Role X for
> approval

[presumably low risk changes aren't escalated]
>

So your question comes down to... is a point release in Twisted as risky as
a change to the cryptography stack? You'd certainly know better than I.

Clayton Daley
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160707/8b279a54/attachment.html>

From clayton.daley at gmail.com  Thu Jul  7 17:20:07 2016
From: clayton.daley at gmail.com (Clayton Daley)
Date: Thu, 7 Jul 2016 18:20:07 -0500
Subject: [Twisted-Python] dropping old pyOpenSSL versions
In-Reply-To: <6F737E29-D013-4E93-B5F1-C506FAAF0CA6@twistedmatrix.com>
References: <9AD2CDAD-D794-48A5-8CA8-74537422EED6@twistedmatrix.com>
 <CACKEAnXBwsGapZCw3nLdD-p1m3F+uFFVqybtDEHM4YSqJJOQwg@mail.gmail.com>
 <6F737E29-D013-4E93-B5F1-C506FAAF0CA6@twistedmatrix.com>
Message-ID: <CACKEAnXM8v2_grPF1GEUb4W3qPugzE2XjYuEg-4PBKjLVf+NrQ@mail.gmail.com>

>
> I don't mean to jump down your throat here; the tone is definitely harsher
> than I would like, but I want it to be very clear why I have such strong
> feelings about upgrading security-critical dependencies.
>

I don't take it personally.  I do a little coding (hello startup) but I'm
actually the guy who:

   - Had to develop our Policies and Procedures (P&P) in conjunction with
   our Compliance consultant
   - Has to work with our lawyers to negotiate Information Security and
   Business Associate agreements with customers
   - Has to provide implementation details in request to our customers'
   security groups (I spent all day working through a 160 item self-assessment
   so it was top-of-mind for me)

When there's a vulnerability, you can fast track an upgrade because there's
a non-theoretical risk to doing nothing.  The problem is an "optional"
version bump.  It's all CYA.  If I don't follow my P&P, the federal
government, state government, and customers all have (extra) grounds to sue
my company (cofounder so literally *mine*).  If the consequence of waiting
are a transient Twisted bug or a delayed feature depending on a feature in
a blocked version, it's an easy choice.

Clayton Daley


On Thu, Jul 7, 2016 at 6:00 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Jul 7, 2016, at 2:06 PM, Clayton Daley <clayton.daley at gmail.com> wrote:
>
> I don't object to this specific change (we're on shiny new code), but want
> to offer some food-for-thought:
>
> 1) Is newer really better in cryptography?  Heartbleed affected 1.0.1, but
> not 1.0.0 and there are a bunch of vulnerabilities that only affect the
> newer libraries (https://www.openssl.org/news/vulnerabilities.html).  It
> even makes sense that the older libraries have been more-thoroughly
> tested... so new code may just mean new vulnerabilities.
>
>
> I can understand the point here - that upgrades are not zero-risk - but
> this is a very dangerous line of reasoning.  (I think "in cryptography" you
> really mean the general english word "cryptography" and not like "PyCA?
> Cryptography?".)  It's dangerous because, as application developers, you
> and I aren't really _qualified_ to evaluate whether newer versions of
> security-critical libraries are more or less secure; the best we can do is
> always, always, always upgrade.  The solution to heartbleed was to upgrade
> to a newer version of 1.0.1, not to roll back to 0.9.8.
>
> More importantly, heartbleed itself is not a general category of defect,
> in the sense that heartbleed itself shone a bright light directly on
> OpenSSL and exposed the real problem, which was massive underinvestment in
> critical security infrastructure.  The issue isn't that upgrading is
> dangerous, it's that letting critical infrastructure decay is dangerous.
>
> One way that you can *promote* the decay of critical infrastructure is to
> defer upgrading out of vague fears about the upgrade going poorly rather
> than specific technical issues.
>
> I should take the opportunity to point out that if you're a professional
> network software developer, you should really be giving a couple of bucks
> to the OpenSSL foundation: <https://www.openssl.org/support/donations.html>.
> The most direct way to fight the decay of critical infrastructure is to
> fund it with cash money.  (And, for that matter, <
> https://twistedmatrix.com/trac/#DonatetoTwisted>...)
>
> 2) How does this impact regulated industries.  In healthcare (my current
> industry), changing a library (especially cryptography) could mean:
>
>    - An internal review to select a new version of the library
>    - An internal change management process
>    - Technical testing (perhaps a 3rd party audit)
>    - A notification to clients of the change
>    - Secondary reviews/testing at clients
>
> The intensity of this process depends on the risk level of the system and
> this could be a long and complicated process for some organizations.  Seems
> like a more deliberate deprecation policy would make it easier to plan
> ahead.
>
>
> The problem with a lot of the regulatory standards that require this sort
> of laborious change-control is that during the entire period where all this
> redundant analysis and re-analysis of the change is happening, customers
> are still vulnerable (and in a health care context, this may mean even that
> lives remain at risk!).
>
> My (entirely secondhand) understanding is that recognition is dawning in
> many compliance fields (HIPPA, PCI-DSS, SOX) that there is a mismatch
> between the realities of software development (delay in making changes ==
> risk) and industrial change control (every change == risk), and auditors
> and regulators are beginning to take this into account.  This means that
> the ability to make changes *quickly* to ensure safe operation is slowly
> gaining ground over the ability to delay changes until sufficient
> evaluation has taken place.
>
> This recognition is dawning because many of these reviews are, in fact,
> nonsense.  For example: "an internal review to select a new version of the
> library" - does every healthcare project have a qualified cryptographer and
> penetration tester to each independently spend the 6 months of careful code
> audits required to actually evaluate the relative security of new versions
> of OpenSSL, or does this internal review consist mainly of unqualified
> people pontificating about hypothetical risks, divorced from the technical
> realities of the upgrade in question?
>
> My own experience has taught me that fear of changes like this is mostly
> developers being afraid of audit or compliance, rather than audit or
> compliance actually requiring it.  If you tell your auditor "we absolutely
> have to upgrade OpenSSL every week if an update is available", they'll
> usually figure out a way to do it.
>
> I don't mean to jump down your throat here; the tone is definitely harsher
> than I would like, but I want it to be very clear why I have such strong
> feelings about upgrading security-critical dependencies.
>
> Additionally, the Netscape SPKI APIs are disappearing from OpenSSL itself
> eventually, so this specific issue isn't just about upgrading - it's about
> preventing it from being difficult to upgrade in the future.  If we wait
> until the APIs are actually gone, rather than just deprecated, this may
> create friction around a critical security update.
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160707/73b2fdbf/attachment.html>

From glyph at twistedmatrix.com  Thu Jul  7 17:48:56 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 7 Jul 2016 16:48:56 -0700
Subject: [Twisted-Python] dropping old pyOpenSSL versions
In-Reply-To: <CACKEAnXM8v2_grPF1GEUb4W3qPugzE2XjYuEg-4PBKjLVf+NrQ@mail.gmail.com>
References: <9AD2CDAD-D794-48A5-8CA8-74537422EED6@twistedmatrix.com>
 <CACKEAnXBwsGapZCw3nLdD-p1m3F+uFFVqybtDEHM4YSqJJOQwg@mail.gmail.com>
 <6F737E29-D013-4E93-B5F1-C506FAAF0CA6@twistedmatrix.com>
 <CACKEAnXM8v2_grPF1GEUb4W3qPugzE2XjYuEg-4PBKjLVf+NrQ@mail.gmail.com>
Message-ID: <01ACB6DA-59EF-4916-9591-43865B25D24C@twistedmatrix.com>


> On Jul 7, 2016, at 4:20 PM, Clayton Daley <clayton.daley at gmail.com> wrote:
> 
> I don't mean to jump down your throat here; the tone is definitely harsher than I would like, but I want it to be very clear why I have such strong feelings about upgrading security-critical dependencies.
> 
> I don't take it personally.

Whew :).

> I do a little coding (hello startup) but I'm actually the guy who:
> Had to develop our Policies and Procedures (P&P) in conjunction with our Compliance consultant
> Has to work with our lawyers to negotiate Information Security and Business Associate agreements with customers
> Has to provide implementation details in request to our customers' security groups (I spent all day working through a 160 item self-assessment so it was top-of-mind for me)
> When there's a vulnerability, you can fast track an upgrade because there's a non-theoretical risk to doing nothing.  The problem is an "optional" version bump.  It's all CYA.  If I don't follow my P&P, the federal government, state government, and customers all have (extra) grounds to sue my company (cofounder so literally *mine*).  If the consequence of waiting are a transient Twisted bug or a delayed feature depending on a feature in a blocked version, it's an easy choice.

The problem with this perspective is that it inappropriately assigns risk by default to upgrading but no risk by default to not-upgrading.  For example, it is well known that various adversaries stockpile 0-day vulnerabilities in popular libraries.  Of course new releases don't ever empty this stockpile, but they quite often reduce it.

Often fixes to this type of secret vulnerability are not identified as "high severity" because severity classifications are often incorrect, almost always in the direction of having a lower severity than they ought to.  See for example this paper: https://www.usenix.org/legacy/event/hotos09/tech/full_papers/arnold/arnold_html/  It shows that (under the range of data collected, 2006-2008) there is _always_ a non-zero number of misclassified bugs impacting "stable" kernel versions' security.  The same is almost certainly true of OpenSSL.  Not to mention the fact that being stuck on old OpenSSL means being stuck without fundamental improvements such as TLS 1.3.

In other words, it may be possible to show that there is absolutely always a vulnerability being fixed by new versions, even when you are pretty sure there isn't.

I understand that certain regulatory regimes do still give a huge financial incentive to bias your change management decisions towards "status quo"; my comment earlier indicated that this is starting to change, not that that process is complete.  Even if you were to agree with me completely it might not be reasonable to risk the entire future of your business on a fast upgrade cadence if you are liable for the risks of upgrading but not liable for the risks of not-upgrading.

However, in a situation with perverse incentives like that, an equally significant risk is building a process that punishes even preparing to make a change.  Inasmuch as it's feasible should always have a codebase which is ready to roll out upgraded versions of every dependency, as if the regulators were to allow the upgrades, because when security researchers identify that a vulnerability is high-impact after the fact, you don't want to have to make big changes or retrofit your tooling or your codebase in the moment of that impact.  Presumably all the governments and the customers could still sue you if you hadn't managed to fix e.g. Heartbleed after <some span of time that a layperson would think is unreasonable>.

Another great example of why you want to be ready to upgrade: if you can run your tests against a new Twisted in its pre-release week and report a regression (or better yet, run continuously against trunk and report regressions that affect your code as they occur) then you can offload the work of actually keeping your application running onto us, and force us to avoid ever releasing a version that breaks you.  But if you only identify bugs years after the fact, there's no longer anything we can do except fix them with the same priority as everything else.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160707/ff47521e/attachment-0001.html>

From clayton.daley at gmail.com  Thu Jul  7 20:32:28 2016
From: clayton.daley at gmail.com (Clayton Daley)
Date: Thu, 7 Jul 2016 21:32:28 -0500
Subject: [Twisted-Python] dropping old pyOpenSSL versions
In-Reply-To: <01ACB6DA-59EF-4916-9591-43865B25D24C@twistedmatrix.com>
References: <9AD2CDAD-D794-48A5-8CA8-74537422EED6@twistedmatrix.com>
 <CACKEAnXBwsGapZCw3nLdD-p1m3F+uFFVqybtDEHM4YSqJJOQwg@mail.gmail.com>
 <6F737E29-D013-4E93-B5F1-C506FAAF0CA6@twistedmatrix.com>
 <CACKEAnXM8v2_grPF1GEUb4W3qPugzE2XjYuEg-4PBKjLVf+NrQ@mail.gmail.com>
 <01ACB6DA-59EF-4916-9591-43865B25D24C@twistedmatrix.com>
Message-ID: <CACKEAnUOnBL5+ZD3RrY7HMnEiPtD3RKf1=_joMQ3-=8LxStM0A@mail.gmail.com>

We're very close on the theory.  My point wasn't to discourage upgrades.
Even regulated entities can and should upgrade their security libraries as
part of their annual audit cycle.  My point was to promote a more
deliberate depreciation cycle with better visibility for regulated entities.

I'm not clear the age of the library we're talking about, but for the sake
of argument consider something like:

   - On Jan 1 every year, we mark the "current" version of the library
   - On Jan 1 two years later, we deprecate everything older than that
   version
   - On Jan 1 three years later, we kill off support for everything before
   that version

The worst case scenario is a library from Dec 31, 2015 is killed on Jan 1,
2018, a two year (plus one day) window.  That would mean a minimum of two
annual cycles to make the upgrade.  It would be easy to plan upgrades. It
would be clear which versions were dying when.

On the flip side, it would strongly discourage use of a library older than
3 years.  Most folks would go from a 1.5 yr old library to a 0.5 yr old
library each year.  Even a luddite (who wanted to guarantee support) would
be replacing a 2.5yr old library with a 1.5yr old library.

Clayton Daley

On Thu, Jul 7, 2016 at 6:48 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Jul 7, 2016, at 4:20 PM, Clayton Daley <clayton.daley at gmail.com> wrote:
>
> I don't mean to jump down your throat here; the tone is definitely harsher
>> than I would like, but I want it to be very clear why I have such strong
>> feelings about upgrading security-critical dependencies.
>>
>
> I don't take it personally.
>
>
> Whew :).
>
> I do a little coding (hello startup) but I'm actually the guy who:
>
>    - Had to develop our Policies and Procedures (P&P) in conjunction with
>    our Compliance consultant
>    - Has to work with our lawyers to negotiate Information Security and
>    Business Associate agreements with customers
>    - Has to provide implementation details in request to our customers'
>    security groups (I spent all day working through a 160 item self-assessment
>    so it was top-of-mind for me)
>
> When there's a vulnerability, you can fast track an upgrade because
> there's a non-theoretical risk to doing nothing.  The problem is an
> "optional" version bump.  It's all CYA.  If I don't follow my P&P, the
> federal government, state government, and customers all have (extra)
> grounds to sue my company (cofounder so literally *mine*).  If the
> consequence of waiting are a transient Twisted bug or a delayed feature
> depending on a feature in a blocked version, it's an easy choice.
>
>
> The problem with this perspective is that it inappropriately assigns risk
> by default to upgrading but no risk by default to not-upgrading.  For
> example, it is well known that various adversaries stockpile 0-day
> vulnerabilities in popular libraries.  Of course new releases don't ever
> *empty* this stockpile, but they quite often reduce it.
>
> Often fixes to this type of secret vulnerability are not identified as
> "high severity" because severity classifications are often incorrect,
> almost always in the direction of having a lower severity than they ought
> to.  See for example this paper:
> https://www.usenix.org/legacy/event/hotos09/tech/full_papers/arnold/arnold_html/
>  It shows that (under the range of data collected, 2006-2008) there is
> _always_ a non-zero number of misclassified bugs impacting "stable" kernel
> versions' security.  The same is almost certainly true of OpenSSL.  Not to
> mention the fact that being stuck on old OpenSSL means being stuck without
> fundamental improvements such as TLS 1.3.
>
> In other words, it may be possible to show that there is absolutely always
> a vulnerability being fixed by new versions, even when you are pretty sure
> there isn't.
>
> I understand that certain regulatory regimes do still give a huge
> financial incentive to bias your change management decisions towards
> "status quo"; my comment earlier indicated that this is *starting *to
> change, not that that process is complete.  Even if you were to agree with
> me completely it might not be reasonable to risk the entire future of your
> business on a fast upgrade cadence if you are liable for the risks of
> upgrading but not liable for the risks of not-upgrading.
>
> However, in a situation with perverse incentives like that, an equally
> significant risk is building a process that punishes even *preparing* to
> make a change.  Inasmuch as it's feasible should always have a codebase
> which is ready to roll out upgraded versions of every dependency, *as if* the
> regulators were to allow the upgrades, because when security researchers
> identify that a vulnerability is high-impact after the fact, you don't want
> to have to make big changes or retrofit your tooling or your codebase in
> the moment of that impact.  Presumably all the governments and the
> customers could still sue you if you hadn't managed to fix e.g. Heartbleed
> after <some span of time that a layperson would think is unreasonable>.
>
> Another great example of why you want to be ready to upgrade: if you can
> run your tests against a new Twisted in its pre-release week and report a
> regression (or better yet, run continuously against trunk and report
> regressions that affect your code as they occur) then you can offload the
> work of actually keeping your application running onto us, and force us to
> avoid ever releasing a version that breaks you.  But if you only identify
> bugs years after the fact, there's no longer anything we can do except fix
> them with the same priority as everything else.
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160707/a2bce86c/attachment.html>

From rgacote at appropriatesolutions.com  Fri Jul  8 13:14:46 2016
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Fri, 8 Jul 2016 15:14:46 -0400
Subject: [Twisted-Python] dropping old pyOpenSSL versions
In-Reply-To: <6F737E29-D013-4E93-B5F1-C506FAAF0CA6@twistedmatrix.com>
References: <9AD2CDAD-D794-48A5-8CA8-74537422EED6@twistedmatrix.com>
 <CACKEAnXBwsGapZCw3nLdD-p1m3F+uFFVqybtDEHM4YSqJJOQwg@mail.gmail.com>
 <6F737E29-D013-4E93-B5F1-C506FAAF0CA6@twistedmatrix.com>
Message-ID: <CAG5tnzo-Lkm2Z_ya5nZtieZA8LtKDKs=midGOz+HNhhctQ1qeQ@mail.gmail.com>

On Thu, Jul 7, 2016 at 7:00 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

> 2) How does this impact regulated industries.  In healthcare (my current
> industry), changing a library (especially cryptography) could mean:
>
>    - An internal review to select a new version of the library
>    - An internal change management process
>    - Technical testing (perhaps a 3rd party audit)
>    - A notification to clients of the change
>    - Secondary reviews/testing at clients
>
> The intensity of this process depends on the risk level of the system and
> this could be a long and complicated process for some organizations.  Seems
> like a more deliberate deprecation policy would make it easier to plan
> ahead.
>
>
Contrast this with a standard such as PCI (credit card security compliance)
where the assessors are required to check if you?re running the latest
version of all components.
Need to be up to date if you want to be compliant.



-- 
Raymond Cote, President
voice: +1.603.924.6079 email: rgacote at AppropriateSolutions.com skype:
ray.cote
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160708/e061b569/attachment.html>

From pawelmhm at gmail.com  Sat Jul  9 11:30:37 2016
From: pawelmhm at gmail.com (=?UTF-8?B?UGF3ZcWCIE1pZWNo?=)
Date: Sat, 9 Jul 2016 19:30:37 +0200
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
Message-ID: <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>

Thanks for fixing this.

Did anyone actually manage to make HTTP2 in Twisted work with
Google-Chrome? I tried to do this today, and it seems this is surprisingly
difficult. It turns out that Chrome requires ALPN and it dropped support
for NPN. ALPN is only supported with OpenSSL 1.0.2 or above, which by
default is not available in most systems. This is discussed here
<https://www.nginx.com/blog/supporting-http2-google-chrome-users/>. I tried
setting up docker image with Ubuntu 16.04 that has required version of
OpenSSL, but it seems that Chrome still doesn't like it. It
returns ERR_SPDY_INADEQUATE_TRANSPORT_SECURITY error and fails to load
page. Looking up this error I found out this might be happening because
some TSL ciphers are blacklisted in HTTP2, there is nice answer about this
here
<https://serverfault.com/questions/712808/chrome-reports-err-spdy-inadequate-transport-security-connecting-to-local-web-se/712838#712838>
it
links to this part of HTTP2 spec
https://http2.github.io/http2-spec/#rfc.section.9.2.2

My question is: should user deal with this kind of stuff themselves? If
some ciphers are blacklisted in HTTP2 shouldn't this be handled somewhere
in Twisted? E.g. perhaps there should be some Http2SSLContextFactory? If
you'd like to reproduce this I did some sample repo here:
https://github.com/pawelmhm/sf-books-http2 it contains dockerfile that
builds from Ubuntu 16.04 and runs simple Twisted HTTP 2 resource.

2016-07-04 13:48 GMT+02:00 Craig Rodrigues <rodrigc at crodrigues.org>:

> On Sun, Jul 3, 2016 at 3:15 AM, Pawe? Miech <pawelmhm at gmail.com> wrote:
>
>> HTTP2 support sounds really exciting.
>>
>> > Please let me know if you have any issues, as well as if you don't! If
>> everything works well, that's a good thing for me to know :)
>>
>> I played around with this today and found out that the command you
>> recommend:
>>
>> >  pip install -U https://twistedmatrix.com/Releases
>> /pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2#egg=Twisted[http2,tls]
>>
>> does NOT install dependencies when ran on Python 3, I had to manually
>> install h2 to HTTP2 support to work. It works ok on Python 2. My
>> installation logs on Python 3.4 look like this:
>>
>>
> I think I've fixed that in trunk with this:
>
> https://github.com/twisted/twisted/pull/287
>
> --
> Craig
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160709/e07d0014/attachment.html>

From donal.mcmullan at gmail.com  Sat Jul  9 12:08:51 2016
From: donal.mcmullan at gmail.com (Donal McMullan)
Date: Sat, 9 Jul 2016 19:08:51 +0100
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
Message-ID: <CADf-aJF++6pF4RtQgB6xVCTndATQVvqxuR0ZCYxuiaz5E1Xajw@mail.gmail.com>

Works for me with txacme and a lets: cert

IIRC, when I was trying to use a self signed cert on my local network I got
the ERR_SPDY_INADEQUATE_TRANSPORT_SECURITY error.

DJM

On 9 July 2016 at 18:30, Pawe? Miech <pawelmhm at gmail.com> wrote:

> Thanks for fixing this.
>
> Did anyone actually manage to make HTTP2 in Twisted work with
> Google-Chrome? I tried to do this today, and it seems this is surprisingly
> difficult. It turns out that Chrome requires ALPN and it dropped support
> for NPN. ALPN is only supported with OpenSSL 1.0.2 or above, which by
> default is not available in most systems. This is discussed here
> <https://www.nginx.com/blog/supporting-http2-google-chrome-users/>. I
> tried setting up docker image with Ubuntu 16.04 that has required version
> of OpenSSL, but it seems that Chrome still doesn't like it. It
> returns ERR_SPDY_INADEQUATE_TRANSPORT_SECURITY error and fails to load
> page. Looking up this error I found out this might be happening because
> some TSL ciphers are blacklisted in HTTP2, there is nice answer about
> this here
> <https://serverfault.com/questions/712808/chrome-reports-err-spdy-inadequate-transport-security-connecting-to-local-web-se/712838#712838> it
> links to this part of HTTP2 spec
> https://http2.github.io/http2-spec/#rfc.section.9.2.2
>
> My question is: should user deal with this kind of stuff themselves? If
> some ciphers are blacklisted in HTTP2 shouldn't this be handled somewhere
> in Twisted? E.g. perhaps there should be some Http2SSLContextFactory? If
> you'd like to reproduce this I did some sample repo here:
> https://github.com/pawelmhm/sf-books-http2 it contains dockerfile that
> builds from Ubuntu 16.04 and runs simple Twisted HTTP 2 resource.
>
> 2016-07-04 13:48 GMT+02:00 Craig Rodrigues <rodrigc at crodrigues.org>:
>
>> On Sun, Jul 3, 2016 at 3:15 AM, Pawe? Miech <pawelmhm at gmail.com> wrote:
>>
>>> HTTP2 support sounds really exciting.
>>>
>>> > Please let me know if you have any issues, as well as if you don't! If
>>> everything works well, that's a good thing for me to know :)
>>>
>>> I played around with this today and found out that the command you
>>> recommend:
>>>
>>> >  pip install -U https://twistedmatrix.com/Releases
>>> /pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2#egg=Twisted[http2,tls]
>>>
>>> does NOT install dependencies when ran on Python 3, I had to manually
>>> install h2 to HTTP2 support to work. It works ok on Python 2. My
>>> installation logs on Python 3.4 look like this:
>>>
>>>
>> I think I've fixed that in trunk with this:
>>
>> https://github.com/twisted/twisted/pull/287
>>
>> --
>> Craig
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160709/1a8d4989/attachment.html>

From hawkowl at atleastfornow.net  Sat Jul  9 12:22:39 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sun, 10 Jul 2016 02:22:39 +0800
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
Message-ID: <B55AAAC5-0069-4E64-82D3-06AA3F3CD10E@atleastfornow.net>

Hmm, I have it working fine (Python 2.7/3.5, w/ Cryptography wheels on OS X)...

The default ciphers in Twisted are:

ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS

So I am not sure why it's not picking up "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256" first...

- Amber

> On 10 Jul 2016, at 01:30, Pawe? Miech <pawelmhm at gmail.com> wrote:
> 
> Thanks for fixing this.
> 
> Did anyone actually manage to make HTTP2 in Twisted work with Google-Chrome? I tried to do this today, and it seems this is surprisingly difficult. It turns out that Chrome requires ALPN and it dropped support for NPN. ALPN is only supported with OpenSSL 1.0.2 or above, which by default is not available in most systems. This is discussed here. I tried setting up docker image with Ubuntu 16.04 that has required version of OpenSSL, but it seems that Chrome still doesn't like it. It returns ERR_SPDY_INADEQUATE_TRANSPORT_SECURITY error and fails to load page. Looking up this error I found out this might be happening because some TSL ciphers are blacklisted in HTTP2, there is nice answer about this here it links to this part of HTTP2 spec https://http2.github.io/http2-spec/#rfc.section.9.2.2
> 
> My question is: should user deal with this kind of stuff themselves? If some ciphers are blacklisted in HTTP2 shouldn't this be handled somewhere in Twisted? E.g. perhaps there should be some Http2SSLContextFactory? If you'd like to reproduce this I did some sample repo here: https://github.com/pawelmhm/sf-books-http2 it contains dockerfile that builds from Ubuntu 16.04 and runs simple Twisted HTTP 2 resource.
> 
> 2016-07-04 13:48 GMT+02:00 Craig Rodrigues <rodrigc at crodrigues.org>:
> On Sun, Jul 3, 2016 at 3:15 AM, Pawe? Miech <pawelmhm at gmail.com> wrote:
> HTTP2 support sounds really exciting.
> 
> > Please let me know if you have any issues, as well as if you don't! If everything works well, that's a good thing for me to know :)
> 
> I played around with this today and found out that the command you recommend:
> 
> >  pip install -U https://twistedmatrix.com/Releases/pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2#egg=Twisted[http2,tls]
> 
> does NOT install dependencies when ran on Python 3, I had to manually install h2 to HTTP2 support to work. It works ok on Python 2. My installation logs on Python 3.4 look like this:
> 
> 
> I think I've fixed that in trunk with this:
> 
> https://github.com/twisted/twisted/pull/287
> 
> --
> Craig
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160710/f7ee83ce/attachment.pgp>

From glyph at twistedmatrix.com  Sun Jul 10 18:45:31 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 10 Jul 2016 17:45:31 -0700
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
Message-ID: <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>


> On Jul 9, 2016, at 10:30 AM, Pawe? Miech <pawelmhm at gmail.com> wrote:
> 
> My question is: should user deal with this kind of stuff themselves? If some ciphers are blacklisted in HTTP2 shouldn't this be handled somewhere in Twisted?

As others have already said, this should work out of the box, and I'm not sure why it isn't for you, especially that you've gone to the extra trouble of building a Docker image and retrieving recent enough versions of every relevant layer of the stack.

However, to answer this question generally: this should absolutely be handled by Twisted.  In fact, even if we're doing the right thing already except in your one configuration, we should go a step beyond and provide tooling and logging to clearly explain to system operators why they won't get HTTP/2 if their dependencies are out of date.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160710/27d1d221/attachment.html>

From cory at lukasa.co.uk  Mon Jul 11 04:35:11 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Mon, 11 Jul 2016 11:35:11 +0100
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
Message-ID: <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>


> On 11 Jul 2016, at 01:45, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Jul 9, 2016, at 10:30 AM, Pawe? Miech <pawelmhm at gmail.com <mailto:pawelmhm at gmail.com>> wrote:
>> 
>> My question is: should user deal with this kind of stuff themselves? If some ciphers are blacklisted in HTTP2 shouldn't this be handled somewhere in Twisted?
> 
> As others have already said, this should work out of the box, and I'm not sure why it isn't for you, especially that you've gone to the extra trouble of building a Docker image and retrieving recent enough versions of every relevant layer of the stack.
> 
> However, to answer this question generally: this should absolutely be handled by Twisted.  In fact, even if we're doing the right thing already except in your one configuration, we should go a step beyond and provide tooling and logging to clearly explain to system operators why they won't get HTTP/2 if their dependencies are out of date.

This turns out to be trickier than you?d expect.

PyOpenSSL does not expose any of the APIs for us to programmatically detect what ciphers are available to the OpenSSL we have installed. Cryptography exposes only one: SSL_get_ciphers. This is not really the one we want, because it lists all *possible* ciphers, rather than the ones that are actually enabled for a given connection. This makes it very difficult for us to conclude that we?d want to use HTTP/2 but we cannot because of a lack of cipher support.

Now, Twisted *could* add code to introspect the HTTP/2 TLS configuration and optionally terminate the connection in the same manner that Chrome does. Currently I?ve not done that because it?s not been hugely needed, but we could do that. The reality is, though, that Twisted can?t unconditionally not use those ciphers because it needs to support HTTP/1.1 as well as HTTP/2, and HTTP/1.1 does not have those same restrictions.

What would be looking for here? Out of the box, Twisted should do the very best it can, but right now it seems like the only thing we could do is detect when HTTP/2 is literally impossible to support (e.g. when there is no TLS 1.2 support). With that said, those versions *completely* overlap with the versions where OpenSSL doesn?t support ALPN.

Regardless, Twisted?s default cipher ordering is appropriate for HTTP/2 (it prefers ECDHE AES GCM, which is what is required). So I?m not sure what more we could do.

Cory
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160711/c3b9b8af/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160711/c3b9b8af/attachment.pgp>

From glyph at twistedmatrix.com  Mon Jul 11 13:22:45 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 11 Jul 2016 12:22:45 -0700
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
Message-ID: <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>


> On Jul 11, 2016, at 3:35 AM, Cory Benfield <cory at lukasa.co.uk <mailto:cory at lukasa.co.uk>> wrote:
> 
>> 
>> On 11 Jul 2016, at 01:45, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>> 
>> 
>>> On Jul 9, 2016, at 10:30 AM, Pawe? Miech <pawelmhm at gmail.com <mailto:pawelmhm at gmail.com>> wrote:
>>> 
>>> My question is: should user deal with this kind of stuff themselves? If some ciphers are blacklisted in HTTP2 shouldn't this be handled somewhere in Twisted?
>> 
>> As others have already said, this should work out of the box, and I'm not sure why it isn't for you, especially that you've gone to the extra trouble of building a Docker image and retrieving recent enough versions of every relevant layer of the stack.
>> 
>> However, to answer this question generally: this should absolutely be handled by Twisted.  In fact, even if we're doing the right thing already except in your one configuration, we should go a step beyond and provide tooling and logging to clearly explain to system operators why they won't get HTTP/2 if their dependencies are out of date.
> 
> This turns out to be trickier than you?d expect.
> 
> PyOpenSSL does not expose any of the APIs for us to programmatically detect what ciphers are available to the OpenSSL we have installed. Cryptography exposes only one: SSL_get_ciphers. This is not really the one we want, because it lists all *possible* ciphers, rather than the ones that are actually enabled for a given connection. This makes it very difficult for us to conclude that we?d want to use HTTP/2 but we cannot because of a lack of cipher support.

So pyOpenSSL/Cryptography doesn't have SSL_get_current_cipher anywhere?

> Now, Twisted *could* add code to introspect the HTTP/2 TLS configuration and optionally terminate the connection in the same manner that Chrome does. Currently I?ve not done that because it?s not been hugely needed, but we could do that. The reality is, though, that Twisted can?t unconditionally not use those ciphers because it needs to support HTTP/1.1 as well as HTTP/2, and HTTP/1.1 does not have those same restrictions.

The main interest I think we have is to placate Chrome, to ensure it can speak HTTP/2 if it's possible, and to explain why it's not possible, if it's not.

> What would be looking for here? Out of the box, Twisted should do the very best it can, but right now it seems like the only thing we could do is detect when HTTP/2 is literally impossible to support (e.g. when there is no TLS 1.2 support). With that said, those versions *completely* overlap with the versions where OpenSSL doesn?t support ALPN.

In the same way that we complain about service_identity perhaps we should complain about OpenSSL?

> Regardless, Twisted?s default cipher ordering is appropriate for HTTP/2 (it prefers ECDHE AES GCM, which is what is required). So I?m not sure what more we could do.

Yeah, I'm curious why the OP was having this problem.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160711/0244f07d/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 3707 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160711/0244f07d/attachment.bin>

From pawelmhm at gmail.com  Mon Jul 11 15:04:10 2016
From: pawelmhm at gmail.com (=?UTF-8?B?UGF3ZcWCIE1pZWNo?=)
Date: Mon, 11 Jul 2016 23:04:10 +0200
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
Message-ID: <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>

Thanks for input everyone!

@Cory

> right now it seems like the only thing we could do is detect when HTTP/2
is literally impossible to support (e.g. when there is no TLS 1.2 support)

This seems to suggest that Ubuntu 16.04 (the system I'm testing) does not
support ciphers required by HTTP2. But nginx article about HTTP2 lists
ubuntu as only linux like system that is able to support HTTP2 over ALPN
which is required by Chrome:
https://www.nginx.com/blog/supporting-http2-google-chrome-users/

I decided to verify tnginx statements and I tried to set up nginx with
HTTP2 on ubuntu 16.04. It turns out this is possible and it works ok. I
just followed this article here:
https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-with-http-2-support-on-ubuntu-16-04
This means that in principle Ubuntu 16.04 should be able to support HTTP2
and it has required TLS ciphers.

So the problem here is not about lack of OS support.

Looking into this nginx article they recommend two things that are part of
manual setup which (maybe?) are required?

1) They say ciphers should be set to ssl_ciphers
EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;

This long string does not mean much to me, but reading email from Amber
again I see it differs slightly from what she says Twisted uses. But one
thing I'm wondering about is how do you guys know which ciphers are set in
Twisted? Looking into source code of DefaultOpenSSLContextFactory I see
context is created here:
https://github.com/twisted/twisted/blob/3455a902fb15e732ee43b59f4d82a66b105351ba/twisted/internet/ssl.py#L107
I dont see any point where there is a call that sets ciphers. Maybe this is
done somewhere else? I tried grepping source for string mentioned by Amber
but cant find it.

2) they ask user to generate DHE key and provide this to nginx
configuration.

When I compare my nginx with Twisted using openssl I see that ciphers in
response differ.

For example this is what my nginx cipher is:

> openssl s_client -connect localhost:443
...
...
...
New, TLSv1/SSLv3, Cipher is ECDHE-RSA-AES128-GCM-SHA256

And here is cipher for Twisted

> openssl s_client -connect localhost:8080

New, TLSv1/SSLv3, Cipher is AES256-GCM-SHA384

When I check HTTP2 cipher black list I see AES256-GCM-SHA384 is there on
this list see here https://http2.github.io/http2-spec/#BadCipherSuites





2016-07-11 21:22 GMT+02:00 Glyph Lefkowitz <glyph at twistedmatrix.com>:

>
> On Jul 11, 2016, at 3:35 AM, Cory Benfield <cory at lukasa.co.uk> wrote:
>
>
> On 11 Jul 2016, at 01:45, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
>
> On Jul 9, 2016, at 10:30 AM, Pawe? Miech <pawelmhm at gmail.com> wrote:
>
> My question is: should user deal with this kind of stuff themselves? If
> some ciphers are blacklisted in HTTP2 shouldn't this be handled somewhere
> in Twisted?
>
>
> As others have already said, this *should* work out of the box, and I'm
> not sure why it isn't for you, especially that you've gone to the extra
> trouble of building a Docker image and retrieving recent enough versions of
> every relevant layer of the stack.
>
> However, to answer this question generally: this should *absolutely* be
> handled by Twisted.  In fact, even if we're doing the right thing already
> except in your one configuration, we should go a step beyond and provide
> tooling and logging to clearly explain to system operators why they won't
> get HTTP/2 if their dependencies are out of date.
>
>
> This turns out to be trickier than you?d expect.
>
> PyOpenSSL does not expose any of the APIs for us to programmatically
> detect what ciphers are available to the OpenSSL we have installed.
> Cryptography exposes only one: SSL_get_ciphers. This is not really the one
> we want, because it lists all *possible* ciphers, rather than the ones that
> are actually enabled for a given connection. This makes it very difficult
> for us to conclude that we?d want to use HTTP/2 but we cannot because of a
> lack of cipher support.
>
>
> So pyOpenSSL/Cryptography doesn't have SSL_get_current_cipher anywhere?
>
> Now, Twisted *could* add code to introspect the HTTP/2 TLS configuration
> and optionally terminate the connection in the same manner that Chrome
> does. Currently I?ve not done that because it?s not been hugely needed, but
> we could do that. The reality is, though, that Twisted can?t
> unconditionally not use those ciphers because it needs to support HTTP/1.1
> as well as HTTP/2, and HTTP/1.1 does not have those same restrictions.
>
>
> The main interest I think we have is to placate Chrome, to ensure it can
> speak HTTP/2 if it's possible, and to explain why it's not possible, if
> it's not.
>
> What would be looking for here? Out of the box, Twisted should do the very
> best it can, but right now it seems like the only thing we could do is
> detect when HTTP/2 is literally impossible to support (e.g. when there is
> no TLS 1.2 support). With that said, those versions *completely* overlap
> with the versions where OpenSSL doesn?t support ALPN.
>
>
> In the same way that we complain about service_identity perhaps we should
> complain about OpenSSL?
>
> Regardless, Twisted?s default cipher ordering is appropriate for HTTP/2
> (it prefers ECDHE AES GCM, which is what is required). So I?m not sure what
> more we could do.
>
>
> Yeah, I'm curious why the OP was having this problem.
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160711/ff1a3fa4/attachment-0001.html>

From rodrigc at crodrigues.org  Mon Jul 11 16:01:48 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 11 Jul 2016 15:01:48 -0700
Subject: [Twisted-Python] PyPy buildbot, less failed tests
Message-ID: <CAG=rPVd3KwKcOW0Moa1dsQ3oV5h1qZOve9CWEtXPmGAtw6AeCA@mail.gmail.com>

I would like to acknowledge the contributions of Ville Skytt? who submitted
several patches to close open file descriptors in various Twisted tests.

I looked at these two PyPy builds:

https://buildbot.twistedmatrix.com/builders/ubuntu16.04-pypy5/builds/207
52 Failed tests (20 failures, 32 errors)

https://buildbot.twistedmatrix.com/builders/ubuntu16.04-pypy5/builds/208
32 Failed tests (15 failures, 17 errors)

This reduction is directly due to Ville's contributions.
Thank you Ville!!

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160711/21a9947b/attachment.html>

From rodrigc at crodrigues.org  Mon Jul 11 16:08:07 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 11 Jul 2016 15:08:07 -0700
Subject: [Twisted-Python] Trial running tests on Windows Python 3
Message-ID: <CAG=rPVc_qdZdxhQf-VCpso1dzxkYvxkOdbuHnRUOcXyGSN=92A@mail.gmail.com>

I have committed some fixes to trunk, and now trial is running tests on
Windows Python 3.

This buildbot is one example build with Python 3.5:
https://buildbot.twistedmatrix.com/builders/win2012r2-64-py3.5/builds/12

There are some test failures, but a lot of things are passing.  One nice
thing to see in this build is
that there are DeprecationWarnings where str is used when bytes should be
used,
and also ResourceWarnings for tests which are not cleanly shutting down
sockets.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160711/6b3314c1/attachment.html>

From rodrigc at crodrigues.org  Mon Jul 11 17:42:04 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 11 Jul 2016 16:42:04 -0700
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
Message-ID: <CAG=rPVc_bmBXZ3UbBPYxiXi4aAYXTVXZCuWmaR03ChK9NBFBmw@mail.gmail.com>

On Mon, Jul 11, 2016 at 2:04 PM, Pawe? Miech <pawelmhm at gmail.com> wrote:

> 1) They say ciphers should be set to ssl_ciphers
> EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;
>
> This long string does not mean much to me, but reading email from Amber
> again I see it differs slightly from what she says Twisted uses. But one
> thing I'm wondering about is how do you guys know which ciphers are set in
> Twisted? Looking into source code of DefaultOpenSSLContextFactory I see
> context is created here:
> https://github.com/twisted/twisted/blob/3455a902fb15e732ee43b59f4d82a66b105351ba/twisted/internet/ssl.py#L107
> I dont see any point where there is a call that sets ciphers. Maybe this is
> done somewhere else? I tried grepping source for string mentioned by Amber
> but cant find it.
>

In an earlier e-mail you mentioned that you were using Python 3.  Is that
still true?

In the Windows Python 3 build which was recently enabled, I saw these
warnings:

c:\buildslave\win2012r2-64-py3_5\Twisted\twisted\internet\_sslverify.py:1799:
DeprecationWarning: str for cipher_list is no longer accepted, use
bytes
c:\buildslave\win2012r2-64-py3_5\Twisted\twisted\internet\_sslverify.py:1656:
DeprecationWarning: str for buf is no longer accepted, use bytes
c:\buildslave\win2012r2-64-py3_5\Twisted\twisted\internet\_sslverify.py:1660:
DeprecationWarning: str for cipher_list is no longer accepted, use
bytes

I am not sure if this is related to your problem, but it struck me that you
mentioned a problem
with ciphers, and I saw this warning just now.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160711/16d9589c/attachment.html>

From glyph at twistedmatrix.com  Mon Jul 11 17:47:59 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 11 Jul 2016 16:47:59 -0700
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAG=rPVc_bmBXZ3UbBPYxiXi4aAYXTVXZCuWmaR03ChK9NBFBmw@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
 <CAG=rPVc_bmBXZ3UbBPYxiXi4aAYXTVXZCuWmaR03ChK9NBFBmw@mail.gmail.com>
Message-ID: <2EEEDBA5-171F-4343-A5D6-8F7401D241F4@twistedmatrix.com>


> On Jul 11, 2016, at 4:42 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> In an earlier e-mail you mentioned that you were using Python 3.  Is that still true?

Seconded - it would be very interesting to know if switching to python 2 fixes your issue. :)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160711/7aa590b0/attachment.html>

From pawelmhm at gmail.com  Tue Jul 12 01:03:20 2016
From: pawelmhm at gmail.com (=?UTF-8?B?UGF3ZcWCIE1pZWNo?=)
Date: Tue, 12 Jul 2016 09:03:20 +0200
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <2EEEDBA5-171F-4343-A5D6-8F7401D241F4@twistedmatrix.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
 <CAG=rPVc_bmBXZ3UbBPYxiXi4aAYXTVXZCuWmaR03ChK9NBFBmw@mail.gmail.com>
 <2EEEDBA5-171F-4343-A5D6-8F7401D241F4@twistedmatrix.com>
Message-ID: <CAO38UCmeKuVY4q8VTT4s-eyGG_+8-F2WvswfVo1z+9jpeQsMGQ@mail.gmail.com>

> In an earlier e-mail you mentioned that you were using Python 3.  Is that
still true?

I can reproduce this in Python 2.7.11 and Python 3.5.2. In both of them
Chrome responds with ERR_SPDY_INADEQUATE_TRANSPORT_SECURITY.  When I test
with curl with verbose flag I see that it also shows information about
ciphers used:

Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH

...
SSL connection using TLSv1.2 / AES256-GCM-SHA384


I see ciphers are set at this point here:
https://github.com/twisted/twisted/blob/556f0f24df2eba2f38ec7f0fa422c4aa7df07fec/twisted/internet/_sslverify.py#L1660
and Twisted cipher is described here:
https://github.com/twisted/twisted/blob/556f0f24df2eba2f38ec7f0fa422c4aa7df07fec/twisted/internet/_sslverify.py#L1851
so probably this is the area to look for in case there is something going
awry in setting ciphers.

One thing to note is that I use DefaultOpenSSLContextFactory and do
something like this:

context_factory = DefaultOpenSSLContextFactory("key.pem", "cert.pem")
reactor.listenSSL(8080, site, context_factory)

Twisted docs for SSL
https://twistedmatrix.com/documents/current/core/howto/ssl.html suggest to
try something like this:

certData = getModule(__name__).filePath.sibling('server.pem').getContent()
certificate = ssl.PrivateCertificate.loadPEM(certData)
factory = protocol.Factory.forProtocol(echoserv.Echo)
reactor.listenSSL(8000, factory, certificate.options())

but those code samples from docs appeared broken. I was not able to run
them I was planning to review those docs later, find out what is wrong and
create PR for that.

Is it possible that using DefaultOpenSSLContextFactory instead of
certificate.options() affects something here? I can see my Twisted-SSL code
works ok in Chrome with HTTP 1.1 ( I can see green "secure" icon in url bar
and confirm that requests flies all right with ssl in dev tools) only fails
with HTTP2. This seems to suggest that using DefaultSSLContextFactory is ok
(even if it's not documented officially),  but maybe execution path is
different for contextFactory and certificate.options()?


2016-07-12 1:47 GMT+02:00 Glyph Lefkowitz <glyph at twistedmatrix.com>:

>
> On Jul 11, 2016, at 4:42 PM, Craig Rodrigues <rodrigc at crodrigues.org>
> wrote:
>
> In an earlier e-mail you mentioned that you were using Python 3.  Is that
> still true?
>
>
> Seconded - it would be very interesting to know if switching to python 2
> fixes your issue. :)
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160712/db3a4bf7/attachment-0001.html>

From cory at lukasa.co.uk  Tue Jul 12 01:43:01 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Tue, 12 Jul 2016 08:43:01 +0100
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
Message-ID: <7C50EE3F-7717-462E-B9DC-2782331DAED0@lukasa.co.uk>


> On 11 Jul 2016, at 22:04, Pawe? Miech <pawelmhm at gmail.com> wrote:
> 
> This seems to suggest that Ubuntu 16.04 (the system I'm testing) does not support ciphers required by HTTP2. But nginx article about HTTP2 lists ubuntu as only linux like system that is able to support HTTP2 over ALPN which is required by Chrome: https://www.nginx.com/blog/supporting-http2-google-chrome-users/ <https://www.nginx.com/blog/supporting-http2-google-chrome-users/>
Sorry. To be clear, I was not responding to your specific needs but discussing Glyph?s wider point about alerting when bad configuration is present.

> I decided to verify tnginx statements and I tried to set up nginx with HTTP2 on ubuntu 16.04. It turns out this is possible and it works ok. I just followed this article here: https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-with-http-2-support-on-ubuntu-16-04 <https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-with-http-2-support-on-ubuntu-16-04> This means that in principle Ubuntu 16.04 should be able to support HTTP2 and it has required TLS ciphers.
> 
> So the problem here is not about lack of OS support.
> 
> Looking into this nginx article they recommend two things that are part of manual setup which (maybe?) are required?
> 
> 1) They say ciphers should be set to ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;
> 
> This long string does not mean much to me, but reading email from Amber again I see it differs slightly from what she says Twisted uses. But one thing I'm wondering about is how do you guys know which ciphers are set in Twisted? Looking into source code of DefaultOpenSSLContextFactory I see context is created here: https://github.com/twisted/twisted/blob/3455a902fb15e732ee43b59f4d82a66b105351ba/twisted/internet/ssl.py#L107 <https://github.com/twisted/twisted/blob/3455a902fb15e732ee43b59f4d82a66b105351ba/twisted/internet/ssl.py#L107> I dont see any point where there is a call that sets ciphers. Maybe this is done somewhere else? I tried grepping source for string mentioned by Amber but cant find it.

Ok, this is your problem.

DefaultOpenSSLContextFactory should have been deprecated a long time ago. It?s insecure, and in particular does not set a cipher string, so it uses DEFAULT. That will have all kinds of messed up priorities. For that reason, you should adjust your code to use OpenSSLCertificateOptions or, even better, use the TLS endpoint directly.

The TL;DR is: yes, it seems that DefaultOpenSSLContextFactory produces a context that is genuinely unacceptable for HTTP/2.

Cory

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160712/bd554fb9/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160712/bd554fb9/attachment.pgp>

From cory at lukasa.co.uk  Tue Jul 12 01:45:03 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Tue, 12 Jul 2016 08:45:03 +0100
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
Message-ID: <8F094A16-47CC-42EF-8DC8-FBEE41BB3588@lukasa.co.uk>


> On 11 Jul 2016, at 20:22, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> So pyOpenSSL/Cryptography doesn't have SSL_get_current_cipher anywhere?

get_current_cipher isn?t helpful. In particular, it puts us in an awkward place where we have a connection that has been negotiated for HTTP/2, but we cannot use it. The only action Twisted can meaningfully take at that point is to log and tear the connection down, which doesn?t really solve our problems.

We can do that, for sure, but it wouldn?t be much clearer than what happened here.

Cory
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160712/9c360c77/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160712/9c360c77/attachment.pgp>

From mithrandi at mithrandi.net  Tue Jul 12 01:56:00 2016
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Tue, 12 Jul 2016 07:56:00 +0000
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <7C50EE3F-7717-462E-B9DC-2782331DAED0@lukasa.co.uk>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
 <7C50EE3F-7717-462E-B9DC-2782331DAED0@lukasa.co.uk>
Message-ID: <CAMcKhMSpNcFY0Lc8YPHPc+9PLq73nGPWu2Cnb=Z5WDwv7FVpeg@mail.gmail.com>

On Tue, 12 Jul 2016 at 09:43 Cory Benfield <cory at lukasa.co.uk> wrote:

> For that reason, you should adjust your code to use
> OpenSSLCertificateOptions or, even better, use the TLS endpoint directly.
>
> The exported name of this class is actually just "CertificateOptions",
fwiw.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160712/23082c86/attachment.html>

From pawelmhm at gmail.com  Tue Jul 12 02:33:03 2016
From: pawelmhm at gmail.com (=?UTF-8?B?UGF3ZcWCIE1pZWNo?=)
Date: Tue, 12 Jul 2016 10:33:03 +0200
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAMcKhMSpNcFY0Lc8YPHPc+9PLq73nGPWu2Cnb=Z5WDwv7FVpeg@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
 <7C50EE3F-7717-462E-B9DC-2782331DAED0@lukasa.co.uk>
 <CAMcKhMSpNcFY0Lc8YPHPc+9PLq73nGPWu2Cnb=Z5WDwv7FVpeg@mail.gmail.com>
Message-ID: <CAO38UCmouunMMnfa_UJTks4A-J2U9cWTxTf5fZdM=G-a=Ozhyw@mail.gmail.com>

> DefaultOpenSSLContextFactory should have been deprecated a long time ago.
It?s insecure, and in particular does not set a cipher string, so it uses
DEFAULT. That will have all kinds of messed up priorities. For that reason,
you should adjust your code to use OpenSSLCertificateOptions or, even
better, use the TLS endpoint directly.The TL;DR is: yes, it seems that
DefaultOpenSSLContextFactory produces a context that is genuinely
unacceptable for HTTP/2.

Indeed it all works fine with endpoints. Thanks!

I was not aware that DefaultOpenSSLContextFactory is deprecated. There is
no warning about it anywhere. It seems that is is very widely used by
users, I just did some github search now and found around 5k occurences of
people using it:

https://github.com/search?utf8=%E2%9C%93&q=defaultopensslcontextfactory&type=Code&ref=searchresults

If you google for "ssl in twisted" you will also find articles that
recommend it. Since so many people use it, maybe it could be updated to be
more secure? If it does not make sense to update it then perhaps it would
be good to deprecate it so that it does not confuse users?

2016-07-12 9:56 GMT+02:00 Tristan Seligmann <mithrandi at mithrandi.net>:

> On Tue, 12 Jul 2016 at 09:43 Cory Benfield <cory at lukasa.co.uk> wrote:
>
>> For that reason, you should adjust your code to use
>> OpenSSLCertificateOptions or, even better, use the TLS endpoint directly.
>>
>> The exported name of this class is actually just "CertificateOptions",
> fwiw.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160712/854af023/attachment-0001.html>

From cory at lukasa.co.uk  Tue Jul 12 09:13:11 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Tue, 12 Jul 2016 16:13:11 +0100
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAO38UCmouunMMnfa_UJTks4A-J2U9cWTxTf5fZdM=G-a=Ozhyw@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
 <7C50EE3F-7717-462E-B9DC-2782331DAED0@lukasa.co.uk>
 <CAMcKhMSpNcFY0Lc8YPHPc+9PLq73nGPWu2Cnb=Z5WDwv7FVpeg@mail.gmail.com>
 <CAO38UCmouunMMnfa_UJTks4A-J2U9cWTxTf5fZdM=G-a=Ozhyw@mail.gmail.com>
Message-ID: <2E4FCA18-A29C-4DD8-B288-6F8A02B854A4@lukasa.co.uk>


> On 12 Jul 2016, at 09:33, Pawe? Miech <pawelmhm at gmail.com> wrote:
> 
> If you google for "ssl in twisted" you will also find articles that recommend it. Since so many people use it, maybe it could be updated to be more secure? If it does not make sense to update it then perhaps it would be good to deprecate it so that it does not confuse users?

Agreed. I?m planning to begin the deprecation process, though it will take a little while as we need to remove all uses of it from within the Twisted codebase itself, as well as from the documentation. That turns out to be a bigger task than expected!

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160712/df7c3f74/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160712/df7c3f74/attachment.pgp>

From pawelmhm at gmail.com  Tue Jul 12 10:42:28 2016
From: pawelmhm at gmail.com (=?UTF-8?B?UGF3ZcWCIE1pZWNo?=)
Date: Tue, 12 Jul 2016 18:42:28 +0200
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <2E4FCA18-A29C-4DD8-B288-6F8A02B854A4@lukasa.co.uk>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
 <7C50EE3F-7717-462E-B9DC-2782331DAED0@lukasa.co.uk>
 <CAMcKhMSpNcFY0Lc8YPHPc+9PLq73nGPWu2Cnb=Z5WDwv7FVpeg@mail.gmail.com>
 <CAO38UCmouunMMnfa_UJTks4A-J2U9cWTxTf5fZdM=G-a=Ozhyw@mail.gmail.com>
 <2E4FCA18-A29C-4DD8-B288-6F8A02B854A4@lukasa.co.uk>
Message-ID: <CAO38UCkRhcRdKUX9d6eZ2gavwLUOLrRYnxEKw32By+PVyT5PUw@mail.gmail.com>

> Agreed. I?m planning to begin the deprecation process, though it will
take a little while as we need to remove all uses of it from within the
Twisted codebase itself, as well as from the documentation. That turns out
to be a bigger task than expected!

+1

One final point that I glossed over earlier

> To be clear, I was not responding to your specific needs but discussing
Glyph?s wider point about alerting when bad configuration is present.

When using Twisted endpoints (e.g. serverFromString) the problem with bad
openssl configuration is not bad. If OS does not support ALPN (OpenSSL
versions below 1.0.2) so in vast majority of Linux systems currently in use
Chrome connection simply falls back to HTTP 1.1 (I tested this on Ubuntu
14.04), This means there is no error and content is served, so it's some
sort of graceful degradation. This behavior is identical to nginx. I'm not
sure if Twisted can and should do something about this. Maybe it can print
some warning or maybe it can just let users know in documentation that
HTTP2 support via ALPN (which is required in Chrome) requires Openssl
1.0.2? Adding warnings to code might require some extra development but it
does not look that difficult. If you think about this, you probably dont
need to check ciphers available in system, you can probably only
check OpenSSL version available and check if client attempts to use ALPN.

2016-07-12 17:13 GMT+02:00 Cory Benfield <cory at lukasa.co.uk>:

>
> On 12 Jul 2016, at 09:33, Pawe? Miech <pawelmhm at gmail.com> wrote:
>
> If you google for "ssl in twisted" you will also find articles that
> recommend it. Since so many people use it, maybe it could be updated to be
> more secure? If it does not make sense to update it then perhaps it would
> be good to deprecate it so that it does not confuse users?
>
>
> Agreed. I?m planning to begin the deprecation process, though it will take
> a little while as we need to remove all uses of it from within the Twisted
> codebase itself, as well as from the documentation. That turns out to be a
> bigger task than expected!
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160712/da4a1892/attachment.html>

From cory at lukasa.co.uk  Tue Jul 12 13:24:37 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Tue, 12 Jul 2016 20:24:37 +0100
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAO38UCkRhcRdKUX9d6eZ2gavwLUOLrRYnxEKw32By+PVyT5PUw@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
 <7C50EE3F-7717-462E-B9DC-2782331DAED0@lukasa.co.uk>
 <CAMcKhMSpNcFY0Lc8YPHPc+9PLq73nGPWu2Cnb=Z5WDwv7FVpeg@mail.gmail.com>
 <CAO38UCmouunMMnfa_UJTks4A-J2U9cWTxTf5fZdM=G-a=Ozhyw@mail.gmail.com>
 <2E4FCA18-A29C-4DD8-B288-6F8A02B854A4@lukasa.co.uk>
 <CAO38UCkRhcRdKUX9d6eZ2gavwLUOLrRYnxEKw32By+PVyT5PUw@mail.gmail.com>
Message-ID: <927774DD-74F6-420E-BB6F-BFDCE60CDB16@lukasa.co.uk>


> On 12 Jul 2016, at 17:42, Pawe? Miech <pawelmhm at gmail.com> wrote:
> 
> > Agreed. I?m planning to begin the deprecation process, though it will take a little while as we need to remove all uses of it from within the Twisted codebase itself, as well as from the documentation. That turns out to be a bigger task than expected!
> 
> +1
> 
> One final point that I glossed over earlier
> 
> > To be clear, I was not responding to your specific needs but discussing Glyph?s wider point about alerting when bad configuration is present.
> 
> When using Twisted endpoints (e.g. serverFromString) the problem with bad openssl configuration is not bad. If OS does not support ALPN (OpenSSL versions below 1.0.2) so in vast majority of Linux systems currently in use Chrome connection simply falls back to HTTP 1.1 (I tested this on Ubuntu 14.04), This means there is no error and content is served, so it's some sort of graceful degradation. This behavior is identical to nginx. I'm not sure if Twisted can and should do something about this. Maybe it can print some warning or maybe it can just let users know in documentation that HTTP2 support via ALPN (which is required in Chrome) requires Openssl 1.0.2? Adding warnings to code might require some extra development but it does not look that difficult. If you think about this, you probably dont need to check ciphers available in system, you can probably only check OpenSSL version available and check if client attempts to use ALPN.

We can actually do better than that.

The way the Twisted APIs are constructed, it knows if it?s got NPN, ALPN, neither, or both. So Twisted is capable of warning in a situation where it has protocols to advertise/negotiate, but no mechanism with which to do it. Unfortunately, I?m not sure of a way of doing it that isn?t intrusive: users opt in to HTTP/2 only by having the HTTP/2 dependencies installed, which they may have for other reasons (they?re common code used by other tools). That means that you could have a situation where you have the HTTP/2 dependencies installed, install Twisted, and then get spammed with warnings because you have older OpenSSL?s.

I?m definitely open to it, but I?m not sure that the user experience is good. If anyone has suggestions of how to get a better UX, I?m open to it.

Cory

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160712/46094d4e/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160712/46094d4e/attachment.pgp>

From glyph at twistedmatrix.com  Tue Jul 12 15:04:27 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 12 Jul 2016 14:04:27 -0700
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <7C50EE3F-7717-462E-B9DC-2782331DAED0@lukasa.co.uk>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
 <7C50EE3F-7717-462E-B9DC-2782331DAED0@lukasa.co.uk>
Message-ID: <0989F397-D755-4E43-A9BF-0C745B5496BD@twistedmatrix.com>


> On Jul 12, 2016, at 12:43 AM, Cory Benfield <cory at lukasa.co.uk> wrote:
> 
> DefaultOpenSSLContextFactory should have been deprecated a long time ago. 

2 years ago, to be precise: 

https://twistedmatrix.com/trac/ticket/6923

Someone fixing this would be tremendously useful.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160712/9a167ec4/attachment.html>

From glyph at twistedmatrix.com  Tue Jul 12 17:37:41 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 12 Jul 2016 16:37:41 -0700
Subject: [Twisted-Python] removing twistedchecker buildbot for the time being
Message-ID: <3F6678C4-83BC-4261-8389-83C8F49EF72A@twistedmatrix.com>

Right now it seems the difference-computation logic on the twistedchecker buildbot has just broken completely.  It's introducing useless noise into the build results because it makes every actually-passing build into a big red 'X' on the pull request status page.  I think I'm going to remove it.  Any objections?

-glyph

From adi at roiban.ro  Tue Jul 12 18:27:29 2016
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 13 Jul 2016 01:27:29 +0100
Subject: [Twisted-Python] removing twistedchecker buildbot for the time
	being
In-Reply-To: <3F6678C4-83BC-4261-8389-83C8F49EF72A@twistedmatrix.com>
References: <3F6678C4-83BC-4261-8389-83C8F49EF72A@twistedmatrix.com>
Message-ID: <CAFycZ9cA9Argmf5W1JZbAniiBFPm0rGhJecmPyZQv+OJ-dN4iw@mail.gmail.com>

On 13 July 2016 at 00:37, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> Right now it seems the difference-computation logic on the twistedchecker
> buildbot has just broken completely.  It's introducing useless noise into
> the build results because it makes every actually-passing build into a big
> red 'X' on the pull request status page.  I think I'm going to remove it.
> Any objections?
>
>
1. Maybe use the --diff option on Buildbot.

2. We can move it to Travis based on the --diff option, ticket pending
review https://twistedmatrix.com/trac/ticket/8572
And if we move to Travis, get rid of tox-travis so that we can have
multiple jobs for the same python version,
https://twistedmatrix.com/trac/ticket/8535

----------

I am +1 for removing the buildbot specific logic and allow to run a diff on
the local branch, so that it is much easier to work on improving the diff
functionality.

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160713/2340edff/attachment.html>

From cory at lukasa.co.uk  Wed Jul 13 02:52:49 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Wed, 13 Jul 2016 09:52:49 +0100
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <0989F397-D755-4E43-A9BF-0C745B5496BD@twistedmatrix.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
 <7C50EE3F-7717-462E-B9DC-2782331DAED0@lukasa.co.uk>
 <0989F397-D755-4E43-A9BF-0C745B5496BD@twistedmatrix.com>
Message-ID: <1477978A-0EF7-4026-821D-AA0C829DCA79@lukasa.co.uk>


> On 12 Jul 2016, at 22:04, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 2 years ago, to be precise:
> 
> https://twistedmatrix.com/trac/ticket/6923 <https://twistedmatrix.com/trac/ticket/6923>
> 
> Someone fixing this would be tremendously useful.
> 
> -glyph

I tried to get started on this yesterday. Unfortunately, the stack of work that requires this means I?ll be chasing after this for a while. Specifically:

- To deprecate ContextManager, we need to remove all instances of it from the code and documentation.
- That?s fine, except that code/docs that used ContextManager used {connect,listen}SSL and friends (because those were the appropriate APIs)
- Which means that we actually need to adjust a huge swathe of docs to use endpoints in order to remove the use of ContextManager.

I?ve gotten started on this, but sadly the {connect,listen} paradigm for SSL is extremely widespread in the Twisted documentation. This means I?m going to generate *several* sizeable tickets that require review just to get to a place where we can actually put the darn deprecation marker on those classes.

I?ve begun by tackling the tutorial in #8588 (https://twistedmatrix.com/trac/ticket/8588 <https://twistedmatrix.com/trac/ticket/8588>). There are further questions about the pedagogical value of this as ?The Twisted Tutorial?, but for now I just want to bring it into 2014.

Anyway, I?ll be spending my Twisted time on this for a while I suspect. This will delay HTTP/2 client support, unfortunately. =(

Cory
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160713/5b2223ed/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160713/5b2223ed/attachment-0001.pgp>

From pawelmhm at gmail.com  Wed Jul 13 03:00:59 2016
From: pawelmhm at gmail.com (=?UTF-8?B?UGF3ZcWCIE1pZWNo?=)
Date: Wed, 13 Jul 2016 11:00:59 +0200
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <1477978A-0EF7-4026-821D-AA0C829DCA79@lukasa.co.uk>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
 <7C50EE3F-7717-462E-B9DC-2782331DAED0@lukasa.co.uk>
 <0989F397-D755-4E43-A9BF-0C745B5496BD@twistedmatrix.com>
 <1477978A-0EF7-4026-821D-AA0C829DCA79@lukasa.co.uk>
Message-ID: <CAO38UC=7-S6p6qEJasOTO2F_F6VvXr5CqM0nuBn4aKy2m=NyKQ@mail.gmail.com>

> Anyway, I?ll be spending my Twisted time on this for a while I suspect.
This will delay HTTP/2 client support, unfortunately. =(

Isn't it better to get HTTP2 client support and just document things better
for HTTP2? Or maybe even backport some features from CertificateOptions to
factory? DefaultSSLContextFactory seems to work ok for cases outside HTTP2.
It is not evidently broken. It is probably less secure than
twisted.internet.ssl.CertificateOptions but is really broken beyond repair?

2016-07-13 10:52 GMT+02:00 Cory Benfield <cory at lukasa.co.uk>:

>
> On 12 Jul 2016, at 22:04, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
> 2 years ago, to be precise:
>
> https://twistedmatrix.com/trac/ticket/6923
>
> Someone fixing this would be tremendously useful.
>
> -glyph
>
>
> I tried to get started on this yesterday. Unfortunately, the stack of work
> that requires this means I?ll be chasing after this for a while.
> Specifically:
>
> - To deprecate ContextManager, we need to remove all instances of it from
> the code and documentation.
> - That?s fine, except that code/docs that used ContextManager used
> {connect,listen}SSL and friends (because those were the appropriate APIs)
> - Which means that we actually need to adjust a huge swathe of docs to use
> endpoints in order to remove the use of ContextManager.
>
> I?ve gotten started on this, but sadly the {connect,listen} paradigm for
> SSL is extremely widespread in the Twisted documentation. This means I?m
> going to generate *several* sizeable tickets that require review just to
> get to a place where we can actually put the darn deprecation marker on
> those classes.
>
> I?ve begun by tackling the tutorial in #8588 (
> https://twistedmatrix.com/trac/ticket/8588). There are further questions
> about the pedagogical value of this as ?The Twisted Tutorial?, but for now
> I just want to bring it into 2014.
>
> Anyway, I?ll be spending my Twisted time on this for a while I suspect.
> This will delay HTTP/2 client support, unfortunately. =(
>
> Cory
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160713/6f2bd967/attachment.html>

From cory at lukasa.co.uk  Wed Jul 13 04:39:27 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Wed, 13 Jul 2016 11:39:27 +0100
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAO38UC=7-S6p6qEJasOTO2F_F6VvXr5CqM0nuBn4aKy2m=NyKQ@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
 <7C50EE3F-7717-462E-B9DC-2782331DAED0@lukasa.co.uk>
 <0989F397-D755-4E43-A9BF-0C745B5496BD@twistedmatrix.com>
 <1477978A-0EF7-4026-821D-AA0C829DCA79@lukasa.co.uk>
 <CAO38UC=7-S6p6qEJasOTO2F_F6VvXr5CqM0nuBn4aKy2m=NyKQ@mail.gmail.com>
Message-ID: <ED8C29C3-D7A1-429A-AA06-081D031F917F@lukasa.co.uk>


> On 13 Jul 2016, at 10:00, Pawe? Miech <pawelmhm at gmail.com> wrote:
> 
> > Anyway, I?ll be spending my Twisted time on this for a while I suspect. This will delay HTTP/2 client support, unfortunately. =(
> 
> Isn't it better to get HTTP2 client support and just document things better for HTTP2? Or maybe even backport some features from CertificateOptions to factory? DefaultSSLContextFactory seems to work ok for cases outside HTTP2. It is not evidently broken. It is probably less secure than twisted.internet.ssl.CertificateOptions but is really broken beyond repair?

Generally speaking I?d say it isn?t better, for a couple of reasons.

Firstly, it rarely works well to document one?s way out of a usability problem. This is doubly-true when the *rest* of the documentation is contrary to what your new documentation would say. For example, the Twisted Web howto client documentation uses ClientContextFactory, which will be utterly unsuitable for HTTP/2.

More generally, having two different ways to do TLS, one of which is substantially less secure and powerful than the other, is a real problem. For example, DefaultSSLContextFactory literally only works for HTTP/2 servers by chance: it was never actually *designed* to work with ALPN and only managed to do so because we refactored the implementation to have the TLSMemoryBIOFactory apply the ALPN/NPN logic. In essence, by sheer bad luck we managed to change the HTTP/2 implementation to accidentally work with the old method, when it was never planned to do so.

Worse, though, is that while the ContextFactory isn?t that bad for servers, it?s *terrible* for clients. In particular, the ClientContextFactory does not use SNI, does not validate hostnames, and generally speaking does not produce secure TLS. That means I?d want to prevent the HTTP/2 client from using the ClientContextFactory *anyway*: it?s really genuinely terrible and needs to be burned with fire.

If you?re interested in speeding up the arrival of HTTP/2 client support, then, the best way to do that is to help out with the deprecation effort. I?ve got patches open for the majority of the docs problems, and will be starting to work on the code problems over the next few days. All of these patches will require review, and other people writing patches will also speed things up.

Basically, I?m disinclined to want to prolong the lifetime of something that was supposed to go away two years ago. Twisted has a lot of things in it that were *supposed* to be deprecated but were never *actually* deprecated, and that kind of soft deprecation ends up causing the kind of problem we?ve bumped into here, whereby a lot of people have code that ?works? with current features, but new features are designed only with an eye to the best practice. On a personal level, I want to push for Twisted to *actually* deprecate things that are soft deprecated. That has the best long-term effect on the project, by reducing the amount of code that needs to be maintained and encouraging users to move towards features that function better.

Cory
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160713/4e64882b/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160713/4e64882b/attachment.pgp>

From hawkowl at atleastfornow.net  Fri Jul 15 07:02:53 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Fri, 15 Jul 2016 21:02:53 +0800
Subject: [Twisted-Python] IProtocolWithReactor,
	or passing the reactor though to protocols
Message-ID: <753010BE-FF69-4BBF-AC91-BC1C5AB5D33A@atleastfornow.net>

(disclaimer: this is after several hours on an aeroplane, this may all be nonsense)

So, I'm currently looking into adding some features to twisted.web -- something that historically hasn't had the best support for pluggable reactors, and which requires levels and levels of monkeypatching (see the top level of https://github.com/twisted/twisted/compare/trunk...deferreds-in-resrender-3711 ). So, I was thinking, what if we made a new way for things to get their reactor, rather than extending all these concrete implementations everywhere?

Currently, you'd pass a reactor instance through to protocols by making the factory understand it, and the protocol calling self.factory._reactor or whatever. I never thought this was a supremely helpful or useful interface -- especially for one-shot classes -- so what if instead we made a new IProtocol-extending interface, which signals to tcp.Port/etc that the protocol, once created, should have a reactor set on it (maybe through some "setConnectingReactor" or something). This would mean that the factory doesn't know about the reactor in most cases (with things like HTTPFactory doing logging as an exception) -- but we could also have an IClient/ServerFactoryWithReactor, that Endpoints (which needs to know about the reactor, and which reactor it is listening on) can then check for and call a similar function, telling the Factory what reactor it is actually running under.

This, I think, would reduce a bunch of duplicate code in __init__s of factories, and could be implemented in the base class of Protocol or ServerFactory, possibly. What do people think?

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160715/af67a45b/attachment.pgp>

From rodrigc at crodrigues.org  Fri Jul 15 12:05:44 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 15 Jul 2016 11:05:44 -0700
Subject: [Twisted-Python] New users cannot subscribe to mailing list
Message-ID: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>

Hi,

I have talked to two recent contributors to Twisted,
and both mentioned to me that they cannot subscribe to the mailing list.
The mailing list is essentially unusable to new subscribers.

Is anyone working on fixing this?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160715/7ad0f09e/attachment.html>

From dansut at gmail.com  Fri Jul 15 12:41:05 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Fri, 15 Jul 2016 14:41:05 -0400
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
Message-ID: <CADzPF4vLA5nCXkOE0p22=+OmEgSPQPizMo_7cqK8x2==Og_sGA@mail.gmail.com>

On Fri, Jul 15, 2016 at 2:05 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> I have talked to two recent contributors to Twisted,
> and both mentioned to me that they cannot subscribe to the mailing list.
> The mailing list is essentially unusable to new subscribers.

Only the Web interface seems to be broken, and I can't even remember
exactly how - I just took this as an initiation test and used the
email interface to get here ;)

Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>


From mithrandi at mithrandi.net  Fri Jul 15 14:11:28 2016
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Fri, 15 Jul 2016 20:11:28 +0000
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
Message-ID: <CAMcKhMSmRZEK1fcTvMcd6YVnX4smyUrZ-YGiHJFpQbUwMAD7Fg@mail.gmail.com>

On Fri, 15 Jul 2016 at 20:06 Craig Rodrigues <rodrigc at crodrigues.org> wrote:

> Is anyone working on fixing this?
>

I believe this email explains things:
http://twistedmatrix.com/pipermail/twisted-python/2016-March/030233.html
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160715/57555034/attachment.html>

From glyph at twistedmatrix.com  Fri Jul 15 15:06:28 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 15 Jul 2016 14:06:28 -0700
Subject: [Twisted-Python] IProtocolWithReactor,
	or passing the reactor though to protocols
In-Reply-To: <753010BE-FF69-4BBF-AC91-BC1C5AB5D33A@atleastfornow.net>
References: <753010BE-FF69-4BBF-AC91-BC1C5AB5D33A@atleastfornow.net>
Message-ID: <BDED83AC-50BE-4EF8-9CD1-ABAF2C2BD14D@twistedmatrix.com>


> On Jul 15, 2016, at 6:02 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> (disclaimer: this is after several hours on an aeroplane, this may all be nonsense)
> 
> So, I'm currently looking into adding some features to twisted.web -- something that historically hasn't had the best support for pluggable reactors, and which requires levels and levels of monkeypatching (see the top level of https://github.com/twisted/twisted/compare/trunk...deferreds-in-resrender-3711 ). So, I was thinking, what if we made a new way for things to get their reactor, rather than extending all these concrete implementations everywhere?
> 
> Currently, you'd pass a reactor instance through to protocols by making the factory understand it, and the protocol calling self.factory._reactor or whatever. I never thought this was a supremely helpful or useful interface -- especially for one-shot classes -- so what if instead we made a new IProtocol-extending interface, which signals to tcp.Port/etc that the protocol, once created, should have a reactor set on it (maybe through some "setConnectingReactor" or something). This would mean that the factory doesn't know about the reactor in most cases (with things like HTTPFactory doing logging as an exception) -- but we could also have an IClient/ServerFactoryWithReactor, that Endpoints (which needs to know about the reactor, and which reactor it is listening on) can then check for and call a similar function, telling the Factory what reactor it is actually running under.
> 
> This, I think, would reduce a bunch of duplicate code in __init__s of factories, and could be implemented in the base class of Protocol or ServerFactory, possibly. What do people think?


First off, I think a clearer articulation of the problem would be helpful :).  Is it "I don't want to take parameters in __init__"?  Or "I don't want to have duplicated code to grab the global reactor everywhere, but I still want to grab the global reactor everywhere"?  Is it "most factories don't need the reactor except to hand it to their protocols, therefore they shouldn't have to have code to deal with it at all"?

I definitely don't think we should address any of these issues with 'setConnectedReactor'.  This is using a side-effect rather than just constructing the object with the things that it needs.  We also shouldn't do it with a base class.  Depending even more on inheritance would be movement in the wrong direction.

If we want to address the issue of duplicated code in constructors, how about something like a @reactorParameter(name='reactor') decorator, which does the grab-the-current-global-reactor-if-it's-not-passed thing?  A better pattern is 'just pass in the reactor', of course.

Or, perhaps what you want is this 7-year-old ticket? :) https://twistedmatrix.com/trac/ticket/3205

-glyph

From glyph at twistedmatrix.com  Fri Jul 15 15:06:49 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 15 Jul 2016 14:06:49 -0700
Subject: [Twisted-Python] IProtocolWithReactor,
	or passing the reactor though to protocols
In-Reply-To: <753010BE-FF69-4BBF-AC91-BC1C5AB5D33A@atleastfornow.net>
References: <753010BE-FF69-4BBF-AC91-BC1C5AB5D33A@atleastfornow.net>
Message-ID: <E0BE033B-D91E-4288-83C1-C1C496E1A408@twistedmatrix.com>


> On Jul 15, 2016, at 6:02 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> (disclaimer: this is after several hours on an aeroplane, this may all be nonsense)
> 
> So, I'm currently looking into adding some features to twisted.web -- something that historically hasn't had the best support for pluggable reactors, and which requires levels and levels of monkeypatching (see the top level of https://github.com/twisted/twisted/compare/trunk...deferreds-in-resrender-3711 ). So, I was thinking, what if we made a new way for things to get their reactor, rather than extending all these concrete implementations everywhere?
> 
> Currently, you'd pass a reactor instance through to protocols by making the factory understand it, and the protocol calling self.factory._reactor or whatever. I never thought this was a supremely helpful or useful interface -- especially for one-shot classes -- so what if instead we made a new IProtocol-extending interface, which signals to tcp.Port/etc that the protocol, once created, should have a reactor set on it (maybe through some "setConnectingReactor" or something). This would mean that the factory doesn't know about the reactor in most cases (with things like HTTPFactory doing logging as an exception) -- but we could also have an IClient/ServerFactoryWithReactor, that Endpoints (which needs to know about the reactor, and which reactor it is listening on) can then check for and call a similar function, telling the Factory what reactor it is actually running under.
> 
> This, I think, would reduce a bunch of duplicate code in __init__s of factories, and could be implemented in the base class of Protocol or ServerFactory, possibly. What do people think?


First off, I think a clearer articulation of the problem would be helpful :).  Is it "I don't want to take parameters in __init__"?  Or "I don't want to have duplicated code to grab the global reactor everywhere, but I still want to grab the global reactor everywhere"?  Is it "most factories don't need the reactor except to hand it to their protocols, therefore they shouldn't have to have code to deal with it at all"?

I definitely don't think we should address any of these issues with 'setConnectedReactor'.  This is using a side-effect rather than just constructing the object with the things that it needs.  We also shouldn't do it with a base class.  Depending even more on inheritance would be movement in the wrong direction.

If we want to address the issue of duplicated code in constructors, how about something like a @reactorParameter(name='reactor') decorator, which does the grab-the-current-global-reactor-if-it's-not-passed thing?  A better pattern is 'just pass in the reactor', of course.

Or, perhaps what you want is this 7-year-old ticket? :) https://twistedmatrix.com/trac/ticket/3205

-glyph

From glyph at twistedmatrix.com  Fri Jul 15 15:14:46 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 15 Jul 2016 14:14:46 -0700
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <CADzPF4vLA5nCXkOE0p22=+OmEgSPQPizMo_7cqK8x2==Og_sGA@mail.gmail.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
 <CADzPF4vLA5nCXkOE0p22=+OmEgSPQPizMo_7cqK8x2==Og_sGA@mail.gmail.com>
Message-ID: <7CADE897-C04B-479D-9C0A-081096CB3250@twistedmatrix.com>


> On Jul 15, 2016, at 11:41 AM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> 
> On Fri, Jul 15, 2016 at 2:05 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
>> I have talked to two recent contributors to Twisted,
>> and both mentioned to me that they cannot subscribe to the mailing list.
>> The mailing list is essentially unusable to new subscribers.
> 
> Only the Web interface seems to be broken, and I can't even remember
> exactly how - I just took this as an initiation test and used the
> email interface to get here ;)

I am aware and I am working on it.  The subscription interface has been disabled because it's a magnet for backscatter spam that was being used in several nefarious ways, so we can't really turn it back on in its current state; I am migrating elsewhere for discussion lists.

If someone wanted to write up some self-service tips for using the email interface on the wiki in the meanwhile, that would be great ;).

-glyph

From adi at roiban.ro  Fri Jul 15 17:40:02 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 16 Jul 2016 00:40:02 +0100
Subject: [Twisted-Python] IProtocolWithReactor,
 or passing the reactor though to protocols
In-Reply-To: <BDED83AC-50BE-4EF8-9CD1-ABAF2C2BD14D@twistedmatrix.com>
References: <753010BE-FF69-4BBF-AC91-BC1C5AB5D33A@atleastfornow.net>
 <BDED83AC-50BE-4EF8-9CD1-ABAF2C2BD14D@twistedmatrix.com>
Message-ID: <CAFycZ9cBN7QL1XCCeO_z0tAMfxAocfEd70=1qnVjMAOKFDvu1A@mail.gmail.com>

On 15 July 2016 at 22:06, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

>

Or, perhaps what you want is this 7-year-old ticket? :)
> https://twistedmatrix.com/trac/ticket/3205
>

I left my feedback on the ticket :)

+1 for getting the reactor from the transport

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160716/b5f5aa8c/attachment-0001.html>

From rodrigc at crodrigues.org  Fri Jul 15 19:51:48 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 15 Jul 2016 18:51:48 -0700
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <7CADE897-C04B-479D-9C0A-081096CB3250@twistedmatrix.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
 <CADzPF4vLA5nCXkOE0p22=+OmEgSPQPizMo_7cqK8x2==Og_sGA@mail.gmail.com>
 <7CADE897-C04B-479D-9C0A-081096CB3250@twistedmatrix.com>
Message-ID: <CAG=rPVfTW_si7XqfJwLTXgmmk5VTZuRmS7_oM2DPTyGEpc2KQA@mail.gmail.com>

On Fri, Jul 15, 2016 at 2:14 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
>
> I am aware and I am working on it.  The subscription interface has been
> disabled because it's a magnet for backscatter spam that was being used in
> several nefarious ways, so we can't really turn it back on in its current
> state; I am migrating elsewhere for discussion lists.
>
> If someone wanted to write up some self-service tips for using the email
> interface on the wiki in the meanwhile, that would be great ;).
>

Since you are working on this, can you write up the wiki page with the
correct
way to subscribe to the mailing list, and correct any links on the web page
to point to the wiki page?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160715/03b935fb/attachment.html>

From rodrigc at crodrigues.org  Fri Jul 15 20:00:12 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 15 Jul 2016 19:00:12 -0700
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <CAMcKhMSmRZEK1fcTvMcd6YVnX4smyUrZ-YGiHJFpQbUwMAD7Fg@mail.gmail.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
 <CAMcKhMSmRZEK1fcTvMcd6YVnX4smyUrZ-YGiHJFpQbUwMAD7Fg@mail.gmail.com>
Message-ID: <CAG=rPVfBJ5DJTwqvM5jE9x4h421yQe+ePEYU5U61k30mh1nxiQ@mail.gmail.com>

On Fri, Jul 15, 2016 at 1:11 PM, Tristan Seligmann <mithrandi at mithrandi.net>
wrote:

>
> I believe this email explains things:
> http://twistedmatrix.com/pipermail/twisted-python/2016-March/030233.html
>


Two comments about that posting:

(1)  For someone who is not subscribed to the mailing list, that isn't
going to help them.  In order to
       read that,  they need to be subscribed to the mailing list.

(2)  That was posted back in March, nearly 4 months ago.  What is blocking
forward progress on fixing the mailing list?
       I realize that folks are overloaded and busy, but is this a 4 month
job to fix the mailing list?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160715/745d1167/attachment.html>

From hawkowl at atleastfornow.net  Sat Jul 16 07:01:43 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sat, 16 Jul 2016 15:01:43 +0200
Subject: [Twisted-Python] IProtocolWithReactor,
	or passing the reactor though to protocols
In-Reply-To: <BDED83AC-50BE-4EF8-9CD1-ABAF2C2BD14D@twistedmatrix.com>
References: <753010BE-FF69-4BBF-AC91-BC1C5AB5D33A@atleastfornow.net>
 <BDED83AC-50BE-4EF8-9CD1-ABAF2C2BD14D@twistedmatrix.com>
Message-ID: <C2037DA9-1533-48CB-9872-782268C2A47B@atleastfornow.net>


> On 15 Jul 2016, at 23:06, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
>> 
>> On Jul 15, 2016, at 6:02 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
>> 
>> (disclaimer: this is after several hours on an aeroplane, this may all be nonsense)
>> 
>> So, I'm currently looking into adding some features to twisted.web -- something that historically hasn't had the best support for pluggable reactors, and which requires levels and levels of monkeypatching (see the top level of https://github.com/twisted/twisted/compare/trunk...deferreds-in-resrender-3711 ). So, I was thinking, what if we made a new way for things to get their reactor, rather than extending all these concrete implementations everywhere?
>> 
>> Currently, you'd pass a reactor instance through to protocols by making the factory understand it, and the protocol calling self.factory._reactor or whatever. I never thought this was a supremely helpful or useful interface -- especially for one-shot classes -- so what if instead we made a new IProtocol-extending interface, which signals to tcp.Port/etc that the protocol, once created, should have a reactor set on it (maybe through some "setConnectingReactor" or something). This would mean that the factory doesn't know about the reactor in most cases (with things like HTTPFactory doing logging as an exception) -- but we could also have an IClient/ServerFactoryWithReactor, that Endpoints (which needs to know about the reactor, and which reactor it is listening on) can then check for and call a similar function, telling the Factory what reactor it is actually running under.
>> 
>> This, I think, would reduce a bunch of duplicate code in __init__s of factories, and could be implemented in the base class of Protocol or ServerFactory, possibly. What do people think?
> 
> 
> First off, I think a clearer articulation of the problem would be helpful :).  Is it "I don't want to take parameters in __init__"?  Or "I don't want to have duplicated code to grab the global reactor everywhere, but I still want to grab the global reactor everywhere"?  Is it "most factories don't need the reactor except to hand it to their protocols, therefore they shouldn't have to have code to deal with it at all"?
> 
> I definitely don't think we should address any of these issues with 'setConnectedReactor'.  This is using a side-effect rather than just constructing the object with the things that it needs.  We also shouldn't do it with a base class.  Depending even more on inheritance would be movement in the wrong direction.
> 
> If we want to address the issue of duplicated code in constructors, how about something like a @reactorParameter(name='reactor') decorator, which does the grab-the-current-global-reactor-if-it's-not-passed thing?  A better pattern is 'just pass in the reactor', of course.
> 
> Or, perhaps what you want is this 7-year-old ticket? :) https://twistedmatrix.com/trac/ticket/3205
> 
> -glyph

Yes, that ticket is almost what I want! That is a much better solution for Protocols.

However, Factories still need the reactor given, and it seems really silly and very hard to explain why you both would need to create a Factory with a reference to a reactor, and then call reactor.listenTCP/endpoint.connect/listen, also with a reactor. I feel like one of these should really be able to tell the other.

This also doesn't fit the problem idnar raised on IRC -- that the reactor serving the connections may not be the one that the protocol wants to use, for whatever reason (gui reactor and a not gui reactor?) -- I can't say if #3205 has the same problems, but I believe it does. I guess then that's up to the protocol, but I kind of would like if all protocols had one consistent place for "this is the reactor I should schedule things on" -- and transport.reactor does not seem to be it, because that's still got the problem that idnar has raised.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160716/6f102857/attachment.pgp>

From adi at roiban.ro  Sat Jul 16 19:58:17 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 17 Jul 2016 02:58:17 +0100
Subject: [Twisted-Python] CI testing on Windows
Message-ID: <CAFycZ9cO6TJtWQZihueGqpzq-QWcDid8fk8eXvdjb+HXsfrd2A@mail.gmail.com>

Hi,

We now have automated tests running on Windows an Appveyor for any PR.

In this way team and non-team member can get some feedback about their
changes... and also see the coverage report for windows.

Some tests are failing on the Appveyor env, while they pass on the the Win7
and Win2012 buildbot slaves.

Here is the ticket https://twistedmatrix.com/trac/ticket/8612

Keeping buildbot running and Windows slaves running takes a lot of time.

Coverage reports from Windows7 are broken... and I don't know why, while
python processes on Win2012 are left running and some of them using up to
1.2G of memory.

If you care about running Twisted on Windows please consider contributing
to improve the Appveyor test or to manage the Windows slaves.

I was the one pushing for the Win2012, but I don't have time to keep it
running. If someone want to take care of it, please let me know. Otherwise
I will remove it as I don't have time to monitor it and kill stray
processes.

I added Win2012 to get coverage reported from Windows, but now that we have
Appveyor, the Win2012 slave is no longer that important.

Many thanks to Rackspace for sponsoring the Win2012 slave and for Appveyor
providing a great free service.

Regards,
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160717/4129b5df/attachment.html>

From rodrigc at crodrigues.org  Sat Jul 16 23:11:27 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 16 Jul 2016 22:11:27 -0700
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down a lot
Message-ID: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>

In the past few days, buildbot.twistedmatrix.com seems to be down all the
time, and requires manual restarts.  As I write this, it is down right now.

Is there something wrong with the hardware involved with
buildbot.twistedmatrix.com?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160716/d54822ab/attachment.html>

From adi at roiban.ro  Sun Jul 17 00:18:14 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 17 Jul 2016 07:18:14 +0100
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down a lot
In-Reply-To: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>
References: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>
Message-ID: <CAFycZ9fifV4cPy2Mi4PYMQ1zW2C8RX-C4ofkE7A_Zp=KDaacMg@mail.gmail.com>

On 17 July 2016 at 06:11, Craig Rodrigues <rodrigc at crodrigues.org> wrote:

> In the past few days, buildbot.twistedmatrix.com seems to be down all the
> time, and requires manual restarts.  As I write this, it is down right now.
>
> Is there something wrong with the hardware involved with
> buildbot.twistedmatrix.com?
>
>
The hardware is fine.
For some unknown reason the buildmaster process is terminated.

I have restarted it again.
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160717/60682b15/attachment.html>

From hawkowl at atleastfornow.net  Sun Jul 17 00:21:51 2016
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Sat, 16 Jul 2016 23:21:51 -0700
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down a lot
In-Reply-To: <CAFycZ9fifV4cPy2Mi4PYMQ1zW2C8RX-C4ofkE7A_Zp=KDaacMg@mail.gmail.com>
References: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>
 <CAFycZ9fifV4cPy2Mi4PYMQ1zW2C8RX-C4ofkE7A_Zp=KDaacMg@mail.gmail.com>
Message-ID: <CAMxb2it6Lc=5Rw991pVgS22RWvjy90PEjaY06maPD4gwgGFpxw@mail.gmail.com>

It's OOMing -- I think the upgrade to Eight trunk introduced some sort of
memory usage regression or we've done something wrong -- I've unfortunately
not had time to investigate.

We could size up the RAM in the meantime I guess?

-Amber

On 17 Jul 2016 08:19, "Adi Roiban" <adi at roiban.ro> wrote:

>
>
> On 17 July 2016 at 06:11, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
>
>> In the past few days, buildbot.twistedmatrix.com seems to be down all the
>> time, and requires manual restarts.  As I write this, it is down right
>> now.
>>
>> Is there something wrong with the hardware involved with
>> buildbot.twistedmatrix.com?
>>
>>
> The hardware is fine.
> For some unknown reason the buildmaster process is terminated.
>
> I have restarted it again.
> --
> Adi Roiban
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160716/f323f4c2/attachment.html>

From adi at roiban.ro  Sun Jul 17 00:36:23 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 17 Jul 2016 07:36:23 +0100
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down a lot
In-Reply-To: <CAMxb2it6Lc=5Rw991pVgS22RWvjy90PEjaY06maPD4gwgGFpxw@mail.gmail.com>
References: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>
 <CAFycZ9fifV4cPy2Mi4PYMQ1zW2C8RX-C4ofkE7A_Zp=KDaacMg@mail.gmail.com>
 <CAMxb2it6Lc=5Rw991pVgS22RWvjy90PEjaY06maPD4gwgGFpxw@mail.gmail.com>
Message-ID: <CAFycZ9c8M95JYX3T7Oydm2T++EM+=TXNCASPZhY3M0w2ate6JQ@mail.gmail.com>

On 17 July 2016 at 07:21, Amber Brown <hawkowl at atleastfornow.net> wrote:

> It's OOMing -- I think the upgrade to Eight trunk introduced some sort of
> memory usage regression or we've done something wrong -- I've unfortunately
> not had time to investigate.
>
> We could size up the RAM in the meantime I guess?
>
> -Amber
>

I can try to revert the github webhooks + github status send and see if we
still get these errors.

I also don't have too much time to investigate, but I can revert things if
it helps.

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160717/baae2c97/attachment.html>

From hawkowl at atleastfornow.net  Sun Jul 17 00:38:38 2016
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Sat, 16 Jul 2016 23:38:38 -0700
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down a lot
In-Reply-To: <CAFycZ9c8M95JYX3T7Oydm2T++EM+=TXNCASPZhY3M0w2ate6JQ@mail.gmail.com>
References: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>
 <CAFycZ9fifV4cPy2Mi4PYMQ1zW2C8RX-C4ofkE7A_Zp=KDaacMg@mail.gmail.com>
 <CAMxb2it6Lc=5Rw991pVgS22RWvjy90PEjaY06maPD4gwgGFpxw@mail.gmail.com>
 <CAFycZ9c8M95JYX3T7Oydm2T++EM+=TXNCASPZhY3M0w2ate6JQ@mail.gmail.com>
Message-ID: <CAMxb2iuufu9YoJ6qYC6pOqvUrT=mazgfGVD2WM2L8ZY+9RdikQ@mail.gmail.com>

Yeah, that's a good idea - disable them for now, and we'll see if the OOMs
happen. Then we can investigate them closer if it stops.

On 17 Jul 2016 08:37, "Adi Roiban" <adi at roiban.ro> wrote:

>
>
> On 17 July 2016 at 07:21, Amber Brown <hawkowl at atleastfornow.net> wrote:
>
>> It's OOMing -- I think the upgrade to Eight trunk introduced some sort of
>> memory usage regression or we've done something wrong -- I've unfortunately
>> not had time to investigate.
>>
>> We could size up the RAM in the meantime I guess?
>>
>> -Amber
>>
>
> I can try to revert the github webhooks + github status send and see if we
> still get these errors.
>
> I also don't have too much time to investigate, but I can revert things if
> it helps.
>
> --
> Adi Roiban
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160716/be146242/attachment-0001.html>

From adi at roiban.ro  Sun Jul 17 00:47:40 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 17 Jul 2016 07:47:40 +0100
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down a lot
In-Reply-To: <CAMxb2iuufu9YoJ6qYC6pOqvUrT=mazgfGVD2WM2L8ZY+9RdikQ@mail.gmail.com>
References: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>
 <CAFycZ9fifV4cPy2Mi4PYMQ1zW2C8RX-C4ofkE7A_Zp=KDaacMg@mail.gmail.com>
 <CAMxb2it6Lc=5Rw991pVgS22RWvjy90PEjaY06maPD4gwgGFpxw@mail.gmail.com>
 <CAFycZ9c8M95JYX3T7Oydm2T++EM+=TXNCASPZhY3M0w2ate6JQ@mail.gmail.com>
 <CAMxb2iuufu9YoJ6qYC6pOqvUrT=mazgfGVD2WM2L8ZY+9RdikQ@mail.gmail.com>
Message-ID: <CAFycZ9f-O6R6AH0cZLORaL3aKMyYb0t=u+Nepm=yv7ZT9sQpCg@mail.gmail.com>

On 17 July 2016 at 07:38, Amber Brown <hawkowl at atleastfornow.net> wrote:

> Yeah, that's a good idea - disable them for now, and we'll see if the OOMs
> happen. Then we can investigate them closer if it stops.
>
> On 17 Jul 2016 08:37, "Adi Roiban" <adi at roiban.ro> wrote:
>
>>
>>
>> On 17 July 2016 at 07:21, Amber Brown <hawkowl at atleastfornow.net> wrote:
>>
>>> It's OOMing -- I think the upgrade to Eight trunk introduced some sort
>>> of memory usage regression or we've done something wrong -- I've
>>> unfortunately not had time to investigate.
>>>
>>> We could size up the RAM in the meantime I guess?
>>>
>>> -Amber
>>>
>>
>> I can try to revert the github webhooks + github status send and see if
>> we still get these errors.
>>
>> I also don't have too much time to investigate, but I can revert things
>> if it helps.
>>
>>
There is this ticket https://github.com/twisted-infra/braid/issues/216 to
track the progress and changes.


-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160717/b6a9ffc3/attachment.html>

From glyph at twistedmatrix.com  Mon Jul 18 00:12:34 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 17 Jul 2016 23:12:34 -0700
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <CAG=rPVfTW_si7XqfJwLTXgmmk5VTZuRmS7_oM2DPTyGEpc2KQA@mail.gmail.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
 <CADzPF4vLA5nCXkOE0p22=+OmEgSPQPizMo_7cqK8x2==Og_sGA@mail.gmail.com>
 <7CADE897-C04B-479D-9C0A-081096CB3250@twistedmatrix.com>
 <CAG=rPVfTW_si7XqfJwLTXgmmk5VTZuRmS7_oM2DPTyGEpc2KQA@mail.gmail.com>
Message-ID: <463BECAE-737F-4166-92F4-BA696DC64E71@twistedmatrix.com>


> On Jul 15, 2016, at 18:51, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> On Fri, Jul 15, 2016 at 2:14 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> 
> I am aware and I am working on it.  The subscription interface has been disabled because it's a magnet for backscatter spam that was being used in several nefarious ways, so we can't really turn it back on in its current state; I am migrating elsewhere for discussion lists.
> 
> If someone wanted to write up some self-service tips for using the email interface on the wiki in the meanwhile, that would be great ;).
> 
> Since you are working on this, can you write up the wiki page with the correct
> way to subscribe to the mailing list, and correct any links on the web page to point to the wiki page?

I'd rather spend the time I have available to complete the actual admin work necessary to move to the new list.  I would appreciate it if someone else could take this part on.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160717/048624b1/attachment.html>

From glyph at twistedmatrix.com  Mon Jul 18 00:33:21 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 17 Jul 2016 23:33:21 -0700
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <CAG=rPVfBJ5DJTwqvM5jE9x4h421yQe+ePEYU5U61k30mh1nxiQ@mail.gmail.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
 <CAMcKhMSmRZEK1fcTvMcd6YVnX4smyUrZ-YGiHJFpQbUwMAD7Fg@mail.gmail.com>
 <CAG=rPVfBJ5DJTwqvM5jE9x4h421yQe+ePEYU5U61k30mh1nxiQ@mail.gmail.com>
Message-ID: <7B1F3933-1C02-4217-B4EC-5D7CC571AEA2@twistedmatrix.com>


> On Jul 15, 2016, at 19:00, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> 
> 
> On Fri, Jul 15, 2016 at 1:11 PM, Tristan Seligmann <mithrandi at mithrandi.net <mailto:mithrandi at mithrandi.net>> wrote:
> 
> I believe this email explains things: http://twistedmatrix.com/pipermail/twisted-python/2016-March/030233.html <http://twistedmatrix.com/pipermail/twisted-python/2016-March/030233.html> 
> 
> 
> Two comments about that posting:
> 
> (1)  For someone who is not subscribed to the mailing list, that isn't going to help them.  In order to
>        read that,  they need to be subscribed to the mailing list.

No, the archives are open; you don't need to be subscribed.  I realize that non-subscribers might not have any way to _discover_ that message, but that's a different problem.

> (2)  That was posted back in March, nearly 4 months ago.  What is blocking forward progress on fixing the mailing list?
>        I realize that folks are overloaded and busy, but is this a 4 month job to fix the mailing list?

Yes.  Consider:

I've got no help on this task; volunteers have thus far not been able to make good on their intentions to help out.  I have been reluctant to ask for help from existing administrative contributors (yourself, adi, hawkowl) because you've had your plates full as well.
Between now and then I've had PyCon, DockerCon, dozens of Twisted reviews, 2 weeks of vacation, numerous Twisted reviews and a plethora of other tasks at work.
Due to the tightly-coupled nature of our infrastructure, the simple solutions like "upgrade mailman" are not as trivial as they should be, so we are having to take the proverbial long way around.

It's like that old adage from Fred Brooks: "How does a project get to be a year late?  One day at a time."

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160717/8cb0dd1e/attachment.html>

From glyph at twistedmatrix.com  Mon Jul 18 01:15:49 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 18 Jul 2016 00:15:49 -0700
Subject: [Twisted-Python] IProtocolWithReactor,
	or passing the reactor though to protocols
In-Reply-To: <C2037DA9-1533-48CB-9872-782268C2A47B@atleastfornow.net>
References: <753010BE-FF69-4BBF-AC91-BC1C5AB5D33A@atleastfornow.net>
 <BDED83AC-50BE-4EF8-9CD1-ABAF2C2BD14D@twistedmatrix.com>
 <C2037DA9-1533-48CB-9872-782268C2A47B@atleastfornow.net>
Message-ID: <E7AEEA79-1265-4358-A5E6-03B264E2E3AA@twistedmatrix.com>


> On Jul 16, 2016, at 06:01, Amber Hawkie Brown <hawkowl at atleastfornow.net <mailto:hawkowl at atleastfornow.net>> wrote:
> 
> Yes, that ticket is almost what I want! That is a much better solution for Protocols.
> 
> However, Factories still need the reactor given, and it seems really silly and very hard to explain why you both would need to create a Factory with a reference to a reactor, and then call reactor.listenTCP/endpoint.connect/listen, also with a reactor. I feel like one of these should really be able to tell the other.

Which factories need this reference given?  Some need a clock, for e.g. timeouts, but then... that's OK, give them a clock.  The fact that a parameter must sometimes be passed to two different places doesn't mean we shouldn't make it a parameter...

Possibly the problem here is that 'doStart' and 'doStop' ought to receive the reactor passed to them as well.  And maybe something else, too, for that matter, like an address, or an endpoint - that interface has always been a bit annoyingly narrow.  But a concrete use-case would help here.

> This also doesn't fit the problem idnar raised on IRC -- that the reactor serving the connections may not be the one that the protocol wants to use, for whatever reason (gui reactor and a not gui reactor?)

This use-case doesn't make any sense, because if you want to have a GUI you need to use a GUI reactor for everything; the reference passed is the running reactor.

> -- I can't say if #3205 has the same problems, but I believe it does. I guess then that's up to the protocol, but I kind of would like if all protocols had one consistent place for "this is the reactor I should schedule things on" -- and transport.reactor does not seem to be it, because that's still got the problem that idnar has raised.

Where did idnar raise this problem?  I am still not clear on exactly what we're talking about.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160718/0f731114/attachment.html>

From glyph at twistedmatrix.com  Mon Jul 18 01:29:52 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 18 Jul 2016 00:29:52 -0700
Subject: [Twisted-Python] CI testing on Windows
In-Reply-To: <CAFycZ9cO6TJtWQZihueGqpzq-QWcDid8fk8eXvdjb+HXsfrd2A@mail.gmail.com>
References: <CAFycZ9cO6TJtWQZihueGqpzq-QWcDid8fk8eXvdjb+HXsfrd2A@mail.gmail.com>
Message-ID: <EEA0BDCB-752B-48D3-AAD9-D3F5FD30D168@twistedmatrix.com>


> On Jul 16, 2016, at 18:58, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> We now have automated tests running on Windows an Appveyor for any PR.
> 
> In this way team and non-team member can get some feedback about their changes... and also see the coverage report for windows.
> 
> Some tests are failing on the Appveyor env, while they pass on the the Win7 and Win2012 buildbot slaves.
> 
> Here is the ticket https://twistedmatrix.com/trac/ticket/8612 <https://twistedmatrix.com/trac/ticket/8612>
> 
> Keeping buildbot running and Windows slaves running takes a lot of time.
> 
> Coverage reports from Windows7 are broken... and I don't know why, while python processes on Win2012 are left running and some of them using up to 1.2G of memory.
> 
> If you care about running Twisted on Windows please consider contributing to improve the Appveyor test or to manage the Windows slaves.
> 
> I was the one pushing for the Win2012, but I don't have time to keep it running. If someone want to take care of it, please let me know. Otherwise I will remove it as I don't have time to monitor it and kill stray processes.
> 
> I added Win2012 to get coverage reported from Windows, but now that we have Appveyor, the Win2012 slave is no longer that important.
> 
> Many thanks to Rackspace for sponsoring the Win2012 slave and for Appveyor providing a great free service.

Thanks for all your work on our continuous integration in general, Adi, this work specifically, and double-thanks for providing these detailed reports of what's going on.  It's often confusing for contributors (and even project members!) to figure out exactly what's going on with CI at any moment so it's very helpful to have this.

Other Windows contributors: it would be great to get those appveyor tests passing ;-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160718/b0d4eef1/attachment-0001.html>

From hawkowl at atleastfornow.net  Mon Jul 18 01:53:59 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Mon, 18 Jul 2016 09:53:59 +0200
Subject: [Twisted-Python] IProtocolWithReactor,
	or passing the reactor though to protocols
In-Reply-To: <E7AEEA79-1265-4358-A5E6-03B264E2E3AA@twistedmatrix.com>
References: <753010BE-FF69-4BBF-AC91-BC1C5AB5D33A@atleastfornow.net>
 <BDED83AC-50BE-4EF8-9CD1-ABAF2C2BD14D@twistedmatrix.com>
 <C2037DA9-1533-48CB-9872-782268C2A47B@atleastfornow.net>
 <E7AEEA79-1265-4358-A5E6-03B264E2E3AA@twistedmatrix.com>
Message-ID: <4E29E141-F1DF-4CD9-AA25-82AFE56AB890@atleastfornow.net>


> On 18 Jul 2016, at 09:15, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
>> On Jul 16, 2016, at 06:01, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
>> 
>> Yes, that ticket is almost what I want! That is a much better solution for Protocols.
>> 
>> However, Factories still need the reactor given, and it seems really silly and very hard to explain why you both would need to create a Factory with a reference to a reactor, and then call reactor.listenTCP/endpoint.connect/listen, also with a reactor. I feel like one of these should really be able to tell the other.
> 
> Which factories need this reference given?  Some need a clock, for e.g. timeouts, but then... that's OK, give them a clock.  The fact that a parameter must sometimes be passed to two different places doesn't mean we shouldn't make it a parameter...

Yes, but it's a very big footgun. If we are using a custom reactor, we must pass it at every level of the stack, when the information can easily be got from other sources.

> Possibly the problem here is that 'doStart' and 'doStop' ought to receive the reactor passed to them as well.  And maybe something else, too, for that matter, like an address, or an endpoint - that interface has always been a bit annoyingly narrow.  But a concrete use-case would help here.

My use case is making it easier to write things that require the reactor not having to be given absolutely everywhere -- it's very very inpenetrable to look at every interface and see if it has a reactor parameter.

> 
>> This also doesn't fit the problem idnar raised on IRC -- that the reactor serving the connections may not be the one that the protocol wants to use, for whatever reason (gui reactor and a not gui reactor?)
> 
> This use-case doesn't make any sense, because if you want to have a GUI you need to use a GUI reactor for everything; the reference passed is the running reactor.
> 

Different reactors in threads (e.g. gilectomy, STM).

>> -- I can't say if #3205 has the same problems, but I believe it does. I guess then that's up to the protocol, but I kind of would like if all protocols had one consistent place for "this is the reactor I should schedule things on" -- and transport.reactor does not seem to be it, because that's still got the problem that idnar has raised.
> 
> Where did idnar raise this problem?  I am still not clear on exactly what we're talking about.

IRC, like I mentioned :)

> 
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160718/67809a07/attachment.pgp>

From jamesbroadhead at gmail.com  Mon Jul 18 12:04:12 2016
From: jamesbroadhead at gmail.com (James Broadhead)
Date: Mon, 18 Jul 2016 19:04:12 +0100
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down a lot
In-Reply-To: <CAMxb2it6Lc=5Rw991pVgS22RWvjy90PEjaY06maPD4gwgGFpxw@mail.gmail.com>
References: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>
 <CAFycZ9fifV4cPy2Mi4PYMQ1zW2C8RX-C4ofkE7A_Zp=KDaacMg@mail.gmail.com>
 <CAMxb2it6Lc=5Rw991pVgS22RWvjy90PEjaY06maPD4gwgGFpxw@mail.gmail.com>
Message-ID: <CA+hid6EYrtRZ4T2QPufMUSVV_p56DWtneUJU1+djzNw7vVHdxQ@mail.gmail.com>

On 17 July 2016 at 07:21, Amber Brown <hawkowl at atleastfornow.net> wrote:

> It's OOMing  (...)
>

Have you considered something like monit[1] to detect & restart in cases
like this?

[1] https://mmonit.com/monit/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160718/4b025379/attachment.html>

From glyph at twistedmatrix.com  Mon Jul 18 12:17:51 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 18 Jul 2016 11:17:51 -0700
Subject: [Twisted-Python] IProtocolWithReactor,
	or passing the reactor though to protocols
In-Reply-To: <4E29E141-F1DF-4CD9-AA25-82AFE56AB890@atleastfornow.net>
References: <753010BE-FF69-4BBF-AC91-BC1C5AB5D33A@atleastfornow.net>
 <BDED83AC-50BE-4EF8-9CD1-ABAF2C2BD14D@twistedmatrix.com>
 <C2037DA9-1533-48CB-9872-782268C2A47B@atleastfornow.net>
 <E7AEEA79-1265-4358-A5E6-03B264E2E3AA@twistedmatrix.com>
 <4E29E141-F1DF-4CD9-AA25-82AFE56AB890@atleastfornow.net>
Message-ID: <2BC1B82A-0D88-4110-A301-B5B51DCC6A89@twistedmatrix.com>


> On Jul 18, 2016, at 12:53 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> 
>> On 18 Jul 2016, at 09:15, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>> 
>>> On Jul 16, 2016, at 06:01, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
>>> 
>>> Yes, that ticket is almost what I want! That is a much better solution for Protocols.
>>> 
>>> However, Factories still need the reactor given, and it seems really silly and very hard to explain why you both would need to create a Factory with a reference to a reactor, and then call reactor.listenTCP/endpoint.connect/listen, also with a reactor. I feel like one of these should really be able to tell the other.
>> 
>> Which factories need this reference given?  Some need a clock, for e.g. timeouts, but then... that's OK, give them a clock.  The fact that a parameter must sometimes be passed to two different places doesn't mean we shouldn't make it a parameter...
> 
> Yes, but it's a very big footgun. If we are using a custom reactor, we must pass it at every level of the stack, when the information can easily be got from other sources.

How is passing a reactor parameter a 'footgun'?  What is the misuse you anticipate that will cause people to habitually use incorrectly?

>> Possibly the problem here is that 'doStart' and 'doStop' ought to receive the reactor passed to them as well.  And maybe something else, too, for that matter, like an address, or an endpoint - that interface has always been a bit annoyingly narrow.  But a concrete use-case would help here.
> 
> My use case is making it easier to write things that require the reactor not having to be given absolutely everywhere -- it's very very inpenetrable to look at every interface and see if it has a reactor parameter.

You have to look at every interface to see what other parameters it has though.  So I don't see how it is impenetrable.  In fact it's required :).

>>> This also doesn't fit the problem idnar raised on IRC -- that the reactor serving the connections may not be the one that the protocol wants to use, for whatever reason (gui reactor and a not gui reactor?)
>> 
>> This use-case doesn't make any sense, because if you want to have a GUI you need to use a GUI reactor for everything; the reference passed is the running reactor.
> 
> Different reactors in threads (e.g. gilectomy, STM).

In that case we'd need an API for getting the reactor for the current thread (ideally when the thread was started).  In that case it still wouldn't make much sense to pass a different one to a Protocol and a Factory.

>>> -- I can't say if #3205 has the same problems, but I believe it does. I guess then that's up to the protocol, but I kind of would like if all protocols had one consistent place for "this is the reactor I should schedule things on" -- and transport.reactor does not seem to be it, because that's still got the problem that idnar has raised.
>> 
>> Where did idnar raise this problem?  I am still not clear on exactly what we're talking about.
> 
> IRC, like I mentioned :)

It would be good to get a write-up of the whole problem first, then.  Making new functions that accept parameters is not a "problem" :).

-glyph



From glyph at twistedmatrix.com  Mon Jul 18 15:23:42 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 18 Jul 2016 14:23:42 -0700
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <8F094A16-47CC-42EF-8DC8-FBEE41BB3588@lukasa.co.uk>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <8F094A16-47CC-42EF-8DC8-FBEE41BB3588@lukasa.co.uk>
Message-ID: <9F791D00-D5AF-4E77-A5B4-BFF85813E2E3@twistedmatrix.com>


> On Jul 12, 2016, at 12:45 AM, Cory Benfield <cory at lukasa.co.uk <mailto:cory at lukasa.co.uk>> wrote:
> 
> 
>> On 11 Jul 2016, at 20:22, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>> 
>> So pyOpenSSL/Cryptography doesn't have SSL_get_current_cipher anywhere?
> 
> get_current_cipher isn?t helpful. In particular, it puts us in an awkward place where we have a connection that has been negotiated for HTTP/2, but we cannot use it. The only action Twisted can meaningfully take at that point is to log and tear the connection down, which doesn?t really solve our problems.
> 
> We can do that, for sure, but it wouldn?t be much clearer than what happened here.

Just generally we should probably be logging this (at INFO or somesuch) regardless, so that interested parties can extract which cipher suites are actually in use.  But perhaps not relevant to this problem, really.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160718/20f92b7d/attachment.html>

From dansut at gmail.com  Tue Jul 19 07:02:18 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Tue, 19 Jul 2016 09:02:18 -0400
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <463BECAE-737F-4166-92F4-BA696DC64E71@twistedmatrix.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
 <CADzPF4vLA5nCXkOE0p22=+OmEgSPQPizMo_7cqK8x2==Og_sGA@mail.gmail.com>
 <7CADE897-C04B-479D-9C0A-081096CB3250@twistedmatrix.com>
 <CAG=rPVfTW_si7XqfJwLTXgmmk5VTZuRmS7_oM2DPTyGEpc2KQA@mail.gmail.com>
 <463BECAE-737F-4166-92F4-BA696DC64E71@twistedmatrix.com>
Message-ID: <CADzPF4tZZLSbX6LKNhs2c7rJTQOmzX=5k-a=UmF5OjcEPvzczw@mail.gmail.com>

On Jul 15, 2016, at 18:51, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> Since you are working on this, can you write up the wiki page with the
> correct way to subscribe to the mailing list, and correct any links on the web
> page to point to the wiki page?

On Mon, Jul 18, 2016 at 2:12 AM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
>> I'd rather spend the time I have available to complete the actual admin work
> necessary to move to the new list.  I would appreciate it if someone else
> could take this part on.

I thought I could add this to the Wiki as I subscribed this way fairly
recently...

- presumably to this page: https://twistedmatrix.com/trac/wiki/TwistedCommunity

logged in with my GitHub account though I obviously don't have Wiki edit perms.

It's pretty simple though, you just need to send an email to:
twisted-python-join at twistedmatrix.com

Maybe for more info add a link to here:
http://www.list.org/mailman-member/node10.html

Hopefully this will make it easy for someone with perms to update.
Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>


From glyph at twistedmatrix.com  Tue Jul 19 13:12:51 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 19 Jul 2016 12:12:51 -0700
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <CADzPF4tZZLSbX6LKNhs2c7rJTQOmzX=5k-a=UmF5OjcEPvzczw@mail.gmail.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
 <CADzPF4vLA5nCXkOE0p22=+OmEgSPQPizMo_7cqK8x2==Og_sGA@mail.gmail.com>
 <7CADE897-C04B-479D-9C0A-081096CB3250@twistedmatrix.com>
 <CAG=rPVfTW_si7XqfJwLTXgmmk5VTZuRmS7_oM2DPTyGEpc2KQA@mail.gmail.com>
 <463BECAE-737F-4166-92F4-BA696DC64E71@twistedmatrix.com>
 <CADzPF4tZZLSbX6LKNhs2c7rJTQOmzX=5k-a=UmF5OjcEPvzczw@mail.gmail.com>
Message-ID: <26EBEA14-73B0-4E90-93E5-962059CC74B3@twistedmatrix.com>


> On Jul 19, 2016, at 6:02 AM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> 
> Hopefully this will make it easy for someone with perms to update.

What's your github handle? We are not stingy with edit permissions, they're only disabled by default to discourage spammers :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160719/d707d229/attachment.html>

From adi at roiban.ro  Wed Jul 20 01:37:56 2016
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 20 Jul 2016 08:37:56 +0100
Subject: [Twisted-Python] removing twistedchecker buildbot for the time
	being
In-Reply-To: <CAFycZ9cA9Argmf5W1JZbAniiBFPm0rGhJecmPyZQv+OJ-dN4iw@mail.gmail.com>
References: <3F6678C4-83BC-4261-8389-83C8F49EF72A@twistedmatrix.com>
 <CAFycZ9cA9Argmf5W1JZbAniiBFPm0rGhJecmPyZQv+OJ-dN4iw@mail.gmail.com>
Message-ID: <CAFycZ9dBW5-7HCABSYMaX8vmLXbOg_o9dFKpToTPsn-MRW=o1Q@mail.gmail.com>

On 13 July 2016 at 01:27, Adi Roiban <adi at roiban.ro> wrote:

>
>
> On 13 July 2016 at 00:37, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
>> Right now it seems the difference-computation logic on the twistedchecker
>> buildbot has just broken completely.  It's introducing useless noise into
>> the build results because it makes every actually-passing build into a big
>> red 'X' on the pull request status page.  I think I'm going to remove it.
>> Any objections?
>>
>>
> 1. Maybe use the --diff option on Buildbot.
>
> 2. We can move it to Travis based on the --diff option, ticket pending
> review https://twistedmatrix.com/trac/ticket/8572
> And if we move to Travis, get rid of tox-travis so that we can have
> multiple jobs for the same python version,
> https://twistedmatrix.com/trac/ticket/8535
>
> ----------
>
> I am +1 for removing the buildbot specific logic and allow to run a diff
> on the local branch, so that it is much easier to work on improving the
> diff functionality.
>
>
The twistechecker buildbot builder was removed  ... as for a short time we
had twistechecker running on Travis-CI

For more details see https://twistedmatrix.com/trac/ticket/8572

twistedchecker --diff needs to be improved --
https://github.com/twisted/twistedchecker/issues

Has anyone used https://pypi.python.org/pypi/diff_cover  ?

Since twistedchecker is based on pylint I was thinking that maybe we can
reuse that code :)

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160720/acd29ab0/attachment.html>

From adi at roiban.ro  Wed Jul 20 07:31:24 2016
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 20 Jul 2016 14:31:24 +0100
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down a lot
In-Reply-To: <CA+hid6EYrtRZ4T2QPufMUSVV_p56DWtneUJU1+djzNw7vVHdxQ@mail.gmail.com>
References: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>
 <CAFycZ9fifV4cPy2Mi4PYMQ1zW2C8RX-C4ofkE7A_Zp=KDaacMg@mail.gmail.com>
 <CAMxb2it6Lc=5Rw991pVgS22RWvjy90PEjaY06maPD4gwgGFpxw@mail.gmail.com>
 <CA+hid6EYrtRZ4T2QPufMUSVV_p56DWtneUJU1+djzNw7vVHdxQ@mail.gmail.com>
Message-ID: <CAFycZ9d0_cpv1c4HKjhbkHsjAe5xgBYRGncx6M7p1owRzU39gg@mail.gmail.com>

On 18 July 2016 at 19:04, James Broadhead <jamesbroadhead at gmail.com> wrote:

> On 17 July 2016 at 07:21, Amber Brown <hawkowl at atleastfornow.net> wrote:
>
>> It's OOMing  (...)
>>
>
> Have you considered something like monit[1] to detect & restart in cases
> like this?
>
>
This might help, but will not help up understand what we are doing wrong :)

After disabling the github webhooks, the buildbot look stable... so we
might have a clue about what goes wrong.

Right now I don't have time to look into this issue, so github hooks are
disabled for now from the GitHub UI.

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160720/6f2d4f44/attachment.html>

From glyph at twistedmatrix.com  Wed Jul 20 10:51:59 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 20 Jul 2016 09:51:59 -0700
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down a lot
In-Reply-To: <CAFycZ9d0_cpv1c4HKjhbkHsjAe5xgBYRGncx6M7p1owRzU39gg@mail.gmail.com>
References: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>
 <CAFycZ9fifV4cPy2Mi4PYMQ1zW2C8RX-C4ofkE7A_Zp=KDaacMg@mail.gmail.com>
 <CAMxb2it6Lc=5Rw991pVgS22RWvjy90PEjaY06maPD4gwgGFpxw@mail.gmail.com>
 <CA+hid6EYrtRZ4T2QPufMUSVV_p56DWtneUJU1+djzNw7vVHdxQ@mail.gmail.com>
 <CAFycZ9d0_cpv1c4HKjhbkHsjAe5xgBYRGncx6M7p1owRzU39gg@mail.gmail.com>
Message-ID: <A96D75B7-70B4-4F49-93FA-E090FA1BD55A@twistedmatrix.com>


> On Jul 20, 2016, at 6:31 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> 
> 
> On 18 July 2016 at 19:04, James Broadhead <jamesbroadhead at gmail.com <mailto:jamesbroadhead at gmail.com>> wrote:
> On 17 July 2016 at 07:21, Amber Brown <hawkowl at atleastfornow.net <mailto:hawkowl at atleastfornow.net>> wrote:
> It's OOMing  (...)
> 
> 
> Have you considered something like monit[1] to detect & restart in cases like this?  
> 
> 
> This might help, but will not help up understand what we are doing wrong :)
> 
> After disabling the github webhooks, the buildbot look stable... so we might have a clue about what goes wrong.
> 
> Right now I don't have time to look into this issue, so github hooks are disabled for now from the GitHub UI.

Can someone who's had a direct look at the OOMing process (adi? amber?) report this upstream?  It's a real pity that we won't get github statuses for buildbot builds any more; that was a huge step in the right direction.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160720/6c556737/attachment.html>

From adi at roiban.ro  Wed Jul 20 12:01:44 2016
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 20 Jul 2016 19:01:44 +0100
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down a lot
In-Reply-To: <A96D75B7-70B4-4F49-93FA-E090FA1BD55A@twistedmatrix.com>
References: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>
 <CAFycZ9fifV4cPy2Mi4PYMQ1zW2C8RX-C4ofkE7A_Zp=KDaacMg@mail.gmail.com>
 <CAMxb2it6Lc=5Rw991pVgS22RWvjy90PEjaY06maPD4gwgGFpxw@mail.gmail.com>
 <CA+hid6EYrtRZ4T2QPufMUSVV_p56DWtneUJU1+djzNw7vVHdxQ@mail.gmail.com>
 <CAFycZ9d0_cpv1c4HKjhbkHsjAe5xgBYRGncx6M7p1owRzU39gg@mail.gmail.com>
 <A96D75B7-70B4-4F49-93FA-E090FA1BD55A@twistedmatrix.com>
Message-ID: <CAFycZ9fcvSEzZXfd-ezR7tADsYvViwQ=0DUnSR6qPMgx=DyMhg@mail.gmail.com>

On 20 July 2016 at 17:51, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

>
> On Jul 20, 2016, at 6:31 AM, Adi Roiban <adi at roiban.ro> wrote:
>
>
>
> On 18 July 2016 at 19:04, James Broadhead <jamesbroadhead at gmail.com>
> wrote:
>
>> On 17 July 2016 at 07:21, Amber Brown <hawkowl at atleastfornow.net> wrote:
>>
>>> It's OOMing  (...)
>>>
>>
>> Have you considered something like monit[1] to detect & restart in cases
>> like this?
>>
>>
> This might help, but will not help up understand what we are doing wrong :)
>
> After disabling the github webhooks, the buildbot look stable... so we
> might have a clue about what goes wrong.
>
> Right now I don't have time to look into this issue, so github hooks are
> disabled for now from the GitHub UI.
>
>
> Can someone who's had a direct look at the OOMing process (adi? amber?)
> report this upstream?  It's a real pity that we won't get github statuses
> for buildbot builds any more; that was a huge step in the right direction.
>
>
I don't know how to grasp this.
By the time I was observing the issue, the buildbot process was already
dead.

I have recently discovered the Rackspace monitoring capabilities for VM...
and set up a memory notification... not sure who will receive the alerts.

I have re-enable to GitHub hooks and will start taking a closer look at the
buildmaster process.... but maybe 2GB is just not enough for a buildmaster.

I have triggered the creation of an image for the current buildbot machine
and will consider upgrading the buildbot to 4GB of memory to see if we
still hit the ceiling.

For my project I have a similar buildmaster based on number of builders and
slaves (without github hooks and without linter factories) and in 2 weeks
of uptime the virtual memory usage is 1.5GB
.... so mabybe 2GB is just not enough for buildbot.

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160720/efb76a2a/attachment.html>

From adi at roiban.ro  Wed Jul 20 12:59:18 2016
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 20 Jul 2016 19:59:18 +0100
Subject: [Twisted-Python] Twisted tests on public CI
Message-ID: <CAFycZ9ezGvCM4537x3907QYmHhDdeMWrXnfhikEVic+gK91wWA@mail.gmail.com>

Hi,

We now have Ubuntu / Windows Server and OS X running Twisted tests for each
PR, using Travis-CI and Appveyor

Non-`Twisted GitHub Team` members can now run a pretty extensive test suite
for commits associated with a PR.

The coverage report is 90.52% (+/- 0.01%) just by running tests on the
public CI.
As far as I can tell this is better than what we get with Buildbot builders
(since we no longer have BSD slaves and Win7 coverage reporter is broken
and Win2012 slave was removed)

Some tests on Appveyor are still failing. Help here is much appreciated.

We also got some tests failing on OS X but Amber has already started
working to fix them https://twistedmatrix.com/trac/ticket/8639

OS X tests results will not block for now a merge, but you will have to
wait for the OS X results. In this way we can see how much longer does a
test run takes, now that we also have OS X.

Appveyor was pretty fast in the last days... after the move to Rackspace.

Travis-CI was a bit slow on the free queue... not sure how fast is the
payed queue :)

Please report any issues here or on Twisted Infrastructure tracker
https://github.com/twisted-infra/braid/issues

Regards,
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160720/3c04abb4/attachment.html>

From dansut at gmail.com  Wed Jul 20 13:14:59 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Wed, 20 Jul 2016 15:14:59 -0400
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <26EBEA14-73B0-4E90-93E5-962059CC74B3@twistedmatrix.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
 <CADzPF4vLA5nCXkOE0p22=+OmEgSPQPizMo_7cqK8x2==Og_sGA@mail.gmail.com>
 <7CADE897-C04B-479D-9C0A-081096CB3250@twistedmatrix.com>
 <CAG=rPVfTW_si7XqfJwLTXgmmk5VTZuRmS7_oM2DPTyGEpc2KQA@mail.gmail.com>
 <463BECAE-737F-4166-92F4-BA696DC64E71@twistedmatrix.com>
 <CADzPF4tZZLSbX6LKNhs2c7rJTQOmzX=5k-a=UmF5OjcEPvzczw@mail.gmail.com>
 <26EBEA14-73B0-4E90-93E5-962059CC74B3@twistedmatrix.com>
Message-ID: <CADzPF4sA3ojT9rsdY=zW7VvfHKokRmh6_JEVMcRZ8Yhu6xQ-vQ@mail.gmail.com>

> On Jul 19, 2016, at 6:02 AM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> Hopefully this will make it easy for someone with perms to update.

On Tue, Jul 19, 2016 at 3:12 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> What's your github handle? We are not stingy with edit permissions, they're
> only disabled by default to discourage spammers :).

dansut

Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>


From glyph at twistedmatrix.com  Wed Jul 20 15:31:54 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 20 Jul 2016 14:31:54 -0700
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down a lot
In-Reply-To: <CAFycZ9fcvSEzZXfd-ezR7tADsYvViwQ=0DUnSR6qPMgx=DyMhg@mail.gmail.com>
References: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>
 <CAFycZ9fifV4cPy2Mi4PYMQ1zW2C8RX-C4ofkE7A_Zp=KDaacMg@mail.gmail.com>
 <CAMxb2it6Lc=5Rw991pVgS22RWvjy90PEjaY06maPD4gwgGFpxw@mail.gmail.com>
 <CA+hid6EYrtRZ4T2QPufMUSVV_p56DWtneUJU1+djzNw7vVHdxQ@mail.gmail.com>
 <CAFycZ9d0_cpv1c4HKjhbkHsjAe5xgBYRGncx6M7p1owRzU39gg@mail.gmail.com>
 <A96D75B7-70B4-4F49-93FA-E090FA1BD55A@twistedmatrix.com>
 <CAFycZ9fcvSEzZXfd-ezR7tADsYvViwQ=0DUnSR6qPMgx=DyMhg@mail.gmail.com>
Message-ID: <038DA9C1-7E61-49BE-91FE-478DAD409C67@twistedmatrix.com>


> On Jul 20, 2016, at 11:01 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> 
> 
> On 20 July 2016 at 17:51, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
>> On Jul 20, 2016, at 6:31 AM, Adi Roiban <adi at roiban.ro <mailto:adi at roiban.ro>> wrote:
>> 
>> 
>> 
>> On 18 July 2016 at 19:04, James Broadhead <jamesbroadhead at gmail.com <mailto:jamesbroadhead at gmail.com>> wrote:
>> On 17 July 2016 at 07:21, Amber Brown <hawkowl at atleastfornow.net <mailto:hawkowl at atleastfornow.net>> wrote:
>> It's OOMing  (...)
>> 
>> 
>> Have you considered something like monit[1] to detect & restart in cases like this?  
>> 
>> 
>> This might help, but will not help up understand what we are doing wrong :)
>> 
>> After disabling the github webhooks, the buildbot look stable... so we might have a clue about what goes wrong.
>> 
>> Right now I don't have time to look into this issue, so github hooks are disabled for now from the GitHub UI.
> 
> Can someone who's had a direct look at the OOMing process (adi? amber?) report this upstream?  It's a real pity that we won't get github statuses for buildbot builds any more; that was a huge step in the right direction.
> 
> 
> I don't know how to grasp this.
> By the time I was observing the issue, the buildbot process was already dead.

Yeah, these types of issues are tricky to debug.  Thanks for looking into it nonetheless; I was hoping you knew more, but if you don't, nothing to be done.

> I have recently discovered the Rackspace monitoring capabilities for VM... and set up a memory notification... not sure who will receive the alerts.

I'll make sure that the relevant people are on the monitoring list.

> I have re-enable to GitHub hooks and will start taking a closer look at the buildmaster process.... but maybe 2GB is just not enough for a buildmaster.

Thanks.

> I have triggered the creation of an image for the current buildbot machine and will consider upgrading the buildbot to 4GB of memory to see if we still hit the ceiling.

> For my project I have a similar buildmaster based on number of builders and slaves (without github hooks and without linter factories) and in 2 weeks of uptime the virtual memory usage is 1.5GB
> .... so mabybe 2GB is just not enough for buildbot.

Bummer.  It does seem like that's quite likely.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160720/b0ae6073/attachment-0001.html>

From glyph at twistedmatrix.com  Wed Jul 20 15:36:02 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 20 Jul 2016 14:36:02 -0700
Subject: [Twisted-Python] Twisted tests on public CI
In-Reply-To: <CAFycZ9ezGvCM4537x3907QYmHhDdeMWrXnfhikEVic+gK91wWA@mail.gmail.com>
References: <CAFycZ9ezGvCM4537x3907QYmHhDdeMWrXnfhikEVic+gK91wWA@mail.gmail.com>
Message-ID: <39FD9FDA-9A64-498D-8723-33E12F66CC61@twistedmatrix.com>


> On Jul 20, 2016, at 11:59 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> We now have Ubuntu / Windows Server and OS X running Twisted tests for each PR, using Travis-CI and Appveyor
> 
> Non-`Twisted GitHub Team` members can now run a pretty extensive test suite for commits associated with a PR. 
> 
> The coverage report is 90.52% (+/- 0.01%) just by running tests on the public CI.
> As far as I can tell this is better than what we get with Buildbot builders (since we no longer have BSD slaves and Win7 coverage reporter is broken and Win2012 slave was removed)

It seems like the only thing that Buildbot is now covering which this setup is not is alternate kernels, which have not diverged in behavior from Twisted's perspective for 7 or 8 years.  I am starting to wonder if we could get rid of the entire current buildbot environment with all its complicated trust issues and just start over with the parts that we actually want: on-demand, latent FreeBSD and Windows builders, for example.  This is a tricky problem, but if it's the *only* thing we're trying to get buildbot to do it's a lot simpler to start there.

Someone please correct me if I'm wrong though ;).

> Some tests on Appveyor are still failing. Help here is much appreciated.
> 
> We also got some tests failing on OS X but Amber has already started working to fix them https://twistedmatrix.com/trac/ticket/8639 <https://twistedmatrix.com/trac/ticket/8639>
> 
> OS X tests results will not block for now a merge, but you will have to wait for the OS X results. In this way we can see how much longer does a test run takes, now that we also have OS X.
> 
> Appveyor was pretty fast in the last days... after the move to Rackspace.

I'm a little confused - does Appveyor run on Rackspace now, or do we run some component of Appveyor on Twisted's Rackspace account?

> Travis-CI was a bit slow on the free queue... not sure how fast is the payed queue :)
> 
> Please report any issues here or on Twisted Infrastructure tracker https://github.com/twisted-infra/braid/issues <https://github.com/twisted-infra/braid/issues>
Thanks *again* for the sustained effort on improving the CI situation, Adi.  It seems like we're not quite there yet, but things are really starting to come together.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160720/c5523041/attachment.html>

From glyph at twistedmatrix.com  Wed Jul 20 15:40:48 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 20 Jul 2016 14:40:48 -0700
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <CADzPF4sA3ojT9rsdY=zW7VvfHKokRmh6_JEVMcRZ8Yhu6xQ-vQ@mail.gmail.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
 <CADzPF4vLA5nCXkOE0p22=+OmEgSPQPizMo_7cqK8x2==Og_sGA@mail.gmail.com>
 <7CADE897-C04B-479D-9C0A-081096CB3250@twistedmatrix.com>
 <CAG=rPVfTW_si7XqfJwLTXgmmk5VTZuRmS7_oM2DPTyGEpc2KQA@mail.gmail.com>
 <463BECAE-737F-4166-92F4-BA696DC64E71@twistedmatrix.com>
 <CADzPF4tZZLSbX6LKNhs2c7rJTQOmzX=5k-a=UmF5OjcEPvzczw@mail.gmail.com>
 <26EBEA14-73B0-4E90-93E5-962059CC74B3@twistedmatrix.com>
 <CADzPF4sA3ojT9rsdY=zW7VvfHKokRmh6_JEVMcRZ8Yhu6xQ-vQ@mail.gmail.com>
Message-ID: <21CFB48D-C6CD-46DC-BD6F-5B451FF4628D@twistedmatrix.com>


> On Jul 20, 2016, at 12:14 PM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> 
>> On Jul 19, 2016, at 6:02 AM, Daniel Sutcliffe <dansut at gmail.com> wrote:
>> Hopefully this will make it easy for someone with perms to update.
> 
> On Tue, Jul 19, 2016 at 3:12 PM, Glyph Lefkowitz
> <glyph at twistedmatrix.com> wrote:
>> What's your github handle? We are not stingy with edit permissions, they're
>> only disabled by default to discourage spammers :).
> 
> dansut

You now have wiki-edit superpowers!  Use them for good, or at least, the kind of evil which makes a good story.

-glyph




From hawkowl at atleastfornow.net  Wed Jul 20 15:46:23 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Wed, 20 Jul 2016 23:46:23 +0200
Subject: [Twisted-Python] Twisted tests on public CI
In-Reply-To: <39FD9FDA-9A64-498D-8723-33E12F66CC61@twistedmatrix.com>
References: <CAFycZ9ezGvCM4537x3907QYmHhDdeMWrXnfhikEVic+gK91wWA@mail.gmail.com>
 <39FD9FDA-9A64-498D-8723-33E12F66CC61@twistedmatrix.com>
Message-ID: <E53B76CB-1D10-46DE-BC6F-FFFB4D0BA573@atleastfornow.net>


> On 20 Jul 2016, at 23:36, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> It seems like the only thing that Buildbot is now covering which this setup is not is alternate kernels, which have not diverged in behavior from Twisted's perspective for 7 or 8 years.  I am starting to wonder if we could get rid of the entire current buildbot environment with all its complicated trust issues and just start over with the parts that we actually want: on-demand, latent FreeBSD and Windows builders, for example.  This is a tricky problem, but if it's the *only* thing we're trying to get buildbot to do it's a lot simpler to start there.
> 
> Someone please correct me if I'm wrong though ;).

That and non-old Ubuntus -- new Fedora/RHEL versions for the past year or two have uncovered OpenSSL changes (partially because Fedora uses FIPS mode, and things like SSLv3 and MD5 just don't work on them), as well as testing more diverse versions (like Ubuntu 12.04, which has an OpenSSL which doesn't support NPN/ALPN).

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160720/7e466463/attachment.pgp>

From rodrigc at crodrigues.org  Wed Jul 20 16:04:19 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 20 Jul 2016 15:04:19 -0700
Subject: [Twisted-Python] Twisted tests on public CI
In-Reply-To: <39FD9FDA-9A64-498D-8723-33E12F66CC61@twistedmatrix.com>
References: <CAFycZ9ezGvCM4537x3907QYmHhDdeMWrXnfhikEVic+gK91wWA@mail.gmail.com>
 <39FD9FDA-9A64-498D-8723-33E12F66CC61@twistedmatrix.com>
Message-ID: <CAG=rPVf0UU5zTeLtxaKh==U6oKHxwaOhSu1dScOtvefPdBMYEA@mail.gmail.com>

On Wed, Jul 20, 2016 at 2:36 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
>
> I am starting to wonder if we could get rid of the entire current buildbot
> environment with all its complicated trust issues and just start over with
> the parts that we actually want: on-demand, latent FreeBSD and Windows
> builders, for example.  This is a tricky problem, but if it's the *only*
> thing we're trying to get buildbot to do it's a lot simpler to start there.
>
>
I agree with your thoughts and think that this is a good direction to go in.

I think it is a good goal to have Travis + Appveyor + whatever 3rd party CI
system out there be
the primary go-to, with Twisted buildbot filling in the gaps that these
systems don't cover.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160720/77c712f5/attachment.html>

From adi at roiban.ro  Wed Jul 20 16:18:10 2016
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 20 Jul 2016 23:18:10 +0100
Subject: [Twisted-Python] Twisted tests on public CI
In-Reply-To: <39FD9FDA-9A64-498D-8723-33E12F66CC61@twistedmatrix.com>
References: <CAFycZ9ezGvCM4537x3907QYmHhDdeMWrXnfhikEVic+gK91wWA@mail.gmail.com>
 <39FD9FDA-9A64-498D-8723-33E12F66CC61@twistedmatrix.com>
Message-ID: <CAFycZ9eaJxH8AWjcQAKee4V_VcJsE59cag70XKD21SBVSot3ig@mail.gmail.com>

On 20 July 2016 at 22:36, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

>
> On Jul 20, 2016, at 11:59 AM, Adi Roiban <adi at roiban.ro> wrote:
>
> Hi,
>
> We now have Ubuntu / Windows Server and OS X running Twisted tests for
> each PR, using Travis-CI and Appveyor
>
> Non-`Twisted GitHub Team` members can now run a pretty extensive test
> suite for commits associated with a PR.
>
> The coverage report is 90.52% (+/- 0.01%) just by running tests on the
> public CI.
> As far as I can tell this is better than what we get with Buildbot
> builders (since we no longer have BSD slaves and Win7 coverage reporter is
> broken and Win2012 slave was removed)
>
>
> It seems like the only thing that Buildbot is now covering which this
> setup is not is alternate kernels, which have not diverged in behavior from
> Twisted's perspective for 7 or 8 years.  I am starting to wonder if we
> could get rid of the entire current buildbot environment with all its
> complicated trust issues and just start over with the parts that we
> actually want: on-demand, latent FreeBSD and Windows builders, for
> example.  This is a tricky problem, but if it's the *only* thing we're
> trying to get buildbot to do it's a lot simpler to start there.
>
> Someone please correct me if I'm wrong though ;).
>
>
+1 to Amber's remark ... different distro have different OpenSSL

I don't know which OpenSSL versions are supported by latest Twisted.

For the kernel, I don't think that there are big differences.... so maybe
we can have docker based latent slaves to run all these distros and destroy
them after each run.

The docker slaves should keep the Rackspace invoice under control.

-------------

api-documentation is still executed on Buildbot ... but there is a ticket
in the review queue to move it to Travis-CI
https://twistedmatrix.com/trac/ticket/8518

Some tests on Appveyor are still failing. Help here is much appreciated.
>
> We also got some tests failing on OS X but Amber has already started
> working to fix them https://twistedmatrix.com/trac/ticket/8639
>
> OS X tests results will not block for now a merge, but you will have to
> wait for the OS X results. In this way we can see how much longer does a
> test run takes, now that we also have OS X.
>
> Appveyor was pretty fast in the last days... after the move to Rackspace.
>
>
> I'm a little confused - does Appveyor run on Rackspace now, or do we run
> some component of Appveyor on Twisted's Rackspace account?
>
>
I have received a message from AppVeyor saying that they have moved the
open source projects to Rackspace ... and after that the time a build was
waiting in the queue is much shorter

https://www.appveyor.com/blog/2016/07/16/migration-to-rackspace


> Travis-CI was a bit slow on the free queue... not sure how fast is the
> payed queue :)
>
> Please report any issues here or on Twisted Infrastructure tracker
> https://github.com/twisted-infra/braid/issues
>
>
> Thanks *again* for the sustained effort on improving the CI situation,
> Adi.  It seems like we're not quite there yet, but things are really
> starting to come together.
>
>
I would consider the Travis-CI / AppVeyor integrations still experimental.

I am happy that we are moving to a command line driven CI design as it
should make it easier to move between CI systems.

This can also help if we want to get latent buildslave as by that time we
 get the latent slaves we should be familiar with running tests in a
disposable VM/container.

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160720/2cbf76d5/attachment-0001.html>

From rodrigc at crodrigues.org  Wed Jul 20 16:32:03 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 20 Jul 2016 15:32:03 -0700
Subject: [Twisted-Python] Windows buildbots and Appveyor
Message-ID: <CAG=rPVe_t4BEUfB_mfEgTAQfX45YGJuABf_Vh=CBbHwjVGMDVg@mail.gmail.com>

The Appveyor setup with Python 2.7 currently does not build any C
extensions.
This means that IOCP reactor is not currently built and none of the IOCP
tests are run in Appveyor.  I'm not sure offhand what the fix is,
but I notice that quite a few Python projects import this script from
Olivier Grisel:
https://github.com/ogrisel/python-appveyor-demo/blob/master/appveyor/run_with_env.cmd

which sets the environment correctly for the Windows compilers, and
then uses the script from inside appveyor.yml with something like:
https://github.com/ogrisel/python-appveyor-demo/blob/master/appveyor.yml

It would be nice if we could get the C extensions buildin in Appveyor.


The Appveyor setup does not have a Python 3 setup, so no Python 3 builds
are done.

There used to be a Python 3 buildbot, and although many of the tests were
broken,
it was producing some interesting logs.  For example, I saw a lot of
warnings
in the SSL code where strings where being passed as arguments to API's which
took bytes as arguments.

Can we bring back at least one Windows Python 3 buildbot, and leave
it as an unsupported, on-demand environment?

I am working on getting more Windows Python 3 tests to pass, so this
would be useful.


--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160720/ada21aa3/attachment.html>

From glyph at twistedmatrix.com  Wed Jul 20 17:18:37 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 20 Jul 2016 16:18:37 -0700
Subject: [Twisted-Python] Twisted tests on public CI
In-Reply-To: <CAFycZ9eaJxH8AWjcQAKee4V_VcJsE59cag70XKD21SBVSot3ig@mail.gmail.com>
References: <CAFycZ9ezGvCM4537x3907QYmHhDdeMWrXnfhikEVic+gK91wWA@mail.gmail.com>
 <39FD9FDA-9A64-498D-8723-33E12F66CC61@twistedmatrix.com>
 <CAFycZ9eaJxH8AWjcQAKee4V_VcJsE59cag70XKD21SBVSot3ig@mail.gmail.com>
Message-ID: <E31AEACE-2D7E-4C2C-A9A2-3E9C3E74DB61@twistedmatrix.com>


> On Jul 20, 2016, at 3:18 PM, Adi Roiban <adi at roiban.ro> wrote:
> 
> 
> 
> On 20 July 2016 at 22:36, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
>> On Jul 20, 2016, at 11:59 AM, Adi Roiban <adi at roiban.ro <mailto:adi at roiban.ro>> wrote:
>> 
>> Hi,
>> 
>> We now have Ubuntu / Windows Server and OS X running Twisted tests for each PR, using Travis-CI and Appveyor
>> 
>> Non-`Twisted GitHub Team` members can now run a pretty extensive test suite for commits associated with a PR. 
>> 
>> The coverage report is 90.52% (+/- 0.01%) just by running tests on the public CI.
>> As far as I can tell this is better than what we get with Buildbot builders (since we no longer have BSD slaves and Win7 coverage reporter is broken and Win2012 slave was removed)
> 
> It seems like the only thing that Buildbot is now covering which this setup is not is alternate kernels, which have not diverged in behavior from Twisted's perspective for 7 or 8 years.  I am starting to wonder if we could get rid of the entire current buildbot environment with all its complicated trust issues and just start over with the parts that we actually want: on-demand, latent FreeBSD and Windows builders, for example.  This is a tricky problem, but if it's the *only* thing we're trying to get buildbot to do it's a lot simpler to start there.
> 
> Someone please correct me if I'm wrong though ;).
> 
> 
> +1 to Amber's remark ... different distro have different OpenSSL
>  
> I don't know which OpenSSL versions are supported by latest Twisted.
> 
> For the kernel, I don't think that there are big differences.... so maybe we can have docker based latent slaves to run all these distros and destroy them after each run.
> 
> The docker slaves should keep the Rackspace invoice under control.

This is exactly where I was going, with one important caveat - Travis-CI supports running arbitrary docker images: <https://docs.travis-ci.com/user/docker/> so we do not need buildbot for this :-).

> api-documentation is still executed on Buildbot ... but there is a ticket in the review queue to move it to Travis-CI
> https://twistedmatrix.com/trac/ticket/8518 <https://twistedmatrix.com/trac/ticket/8518>
Cool; that one seems pretty straightforward to move.

>> Some tests on Appveyor are still failing. Help here is much appreciated.
>> 
>> We also got some tests failing on OS X but Amber has already started working to fix them https://twistedmatrix.com/trac/ticket/8639 <https://twistedmatrix.com/trac/ticket/8639>
>> 
>> OS X tests results will not block for now a merge, but you will have to wait for the OS X results. In this way we can see how much longer does a test run takes, now that we also have OS X.
>> 
>> Appveyor was pretty fast in the last days... after the move to Rackspace.
> 
> I'm a little confused - does Appveyor run on Rackspace now, or do we run some component of Appveyor on Twisted's Rackspace account?
> 
> I have received a message from AppVeyor saying that they have moved the open source projects to Rackspace ... and after that the time a build was waiting in the queue is much shorter
> 
> https://www.appveyor.com/blog/2016/07/16/migration-to-rackspace <https://www.appveyor.com/blog/2016/07/16/migration-to-rackspace>

Woot!  Go team Rackspace!  Thanks for that link.

>> Travis-CI was a bit slow on the free queue... not sure how fast is the payed queue :)
>> 
>> Please report any issues here or on Twisted Infrastructure tracker https://github.com/twisted-infra/braid/issues <https://github.com/twisted-infra/braid/issues>
> Thanks *again* for the sustained effort on improving the CI situation, Adi.  It seems like we're not quite there yet, but things are really starting to come together.
> 
> I would consider the Travis-CI / AppVeyor integrations still experimental. 
> 
> I am happy that we are moving to a command line driven CI design as it should make it easier to move between CI systems.

The one thing I wish we could do is extract our build information in some structured format we could actually parse, to make moving between CI executors even easier... but that's probably a few years out at least :).

> This can also help if we want to get latent buildslave as by that time we  get the latent slaves we should be familiar with running tests in a disposable VM/container.

Latent builders would certainly improve our ability to use buildbot considerably.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160720/b715c7e1/attachment.html>

From glyph at twistedmatrix.com  Wed Jul 20 17:18:48 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 20 Jul 2016 16:18:48 -0700
Subject: [Twisted-Python] Twisted tests on public CI
In-Reply-To: <CAG=rPVf0UU5zTeLtxaKh==U6oKHxwaOhSu1dScOtvefPdBMYEA@mail.gmail.com>
References: <CAFycZ9ezGvCM4537x3907QYmHhDdeMWrXnfhikEVic+gK91wWA@mail.gmail.com>
 <39FD9FDA-9A64-498D-8723-33E12F66CC61@twistedmatrix.com>
 <CAG=rPVf0UU5zTeLtxaKh==U6oKHxwaOhSu1dScOtvefPdBMYEA@mail.gmail.com>
Message-ID: <86F53C39-CA32-40FA-89AB-F2FBBF9E194D@twistedmatrix.com>


> On Jul 20, 2016, at 3:04 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> On Wed, Jul 20, 2016 at 2:36 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> 
> I am starting to wonder if we could get rid of the entire current buildbot environment with all its complicated trust issues and just start over with the parts that we actually want: on-demand, latent FreeBSD and Windows builders, for example.  This is a tricky problem, but if it's the *only* thing we're trying to get buildbot to do it's a lot simpler to start there.
> 
> 
> I agree with your thoughts and think that this is a good direction to go in.
> 
> I think it is a good goal to have Travis + Appveyor + whatever 3rd party CI system out there be
> the primary go-to, with Twisted buildbot filling in the gaps that these systems don't cover.

+1.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160720/c8b0bb3e/attachment.html>

From glyph at twistedmatrix.com  Wed Jul 20 17:58:33 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 20 Jul 2016 16:58:33 -0700
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down a lot
In-Reply-To: <038DA9C1-7E61-49BE-91FE-478DAD409C67@twistedmatrix.com>
References: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>
 <CAFycZ9fifV4cPy2Mi4PYMQ1zW2C8RX-C4ofkE7A_Zp=KDaacMg@mail.gmail.com>
 <CAMxb2it6Lc=5Rw991pVgS22RWvjy90PEjaY06maPD4gwgGFpxw@mail.gmail.com>
 <CA+hid6EYrtRZ4T2QPufMUSVV_p56DWtneUJU1+djzNw7vVHdxQ@mail.gmail.com>
 <CAFycZ9d0_cpv1c4HKjhbkHsjAe5xgBYRGncx6M7p1owRzU39gg@mail.gmail.com>
 <A96D75B7-70B4-4F49-93FA-E090FA1BD55A@twistedmatrix.com>
 <CAFycZ9fcvSEzZXfd-ezR7tADsYvViwQ=0DUnSR6qPMgx=DyMhg@mail.gmail.com>
 <038DA9C1-7E61-49BE-91FE-478DAD409C67@twistedmatrix.com>
Message-ID: <10975DF2-E7C9-4D3A-9DA9-CC05C5E376DB@twistedmatrix.com>


> On Jul 20, 2016, at 2:31 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
>> I have recently discovered the Rackspace monitoring capabilities for VM... and set up a memory notification... not sure who will receive the alerts.
> 
> I'll make sure that the relevant people are on the monitoring list.

I created 'technical contact' users for you and Amber, with current email addresses, which you can use (and even log in as!) if you edit yourselves under 'user management'. I apparently had one already.  You should both have a bogus alert about a MySQL server (since we don't run mysql it seemed a reasonable thing to test).  Make sure that's not flagged as spam and we should all be set up to receive alerts :).

I also added some basic HTTPS monitoring to it as well, so we should see if it goes down for reasons unrelated to memory.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160720/a5ef4c5d/attachment-0001.html>

From oliverpalmer at opalmer.com  Wed Jul 20 19:25:10 2016
From: oliverpalmer at opalmer.com (Oliver Palmer)
Date: Wed, 20 Jul 2016 21:25:10 -0400
Subject: [Twisted-Python] Windows buildbots and Appveyor
In-Reply-To: <CAG=rPVe_t4BEUfB_mfEgTAQfX45YGJuABf_Vh=CBbHwjVGMDVg@mail.gmail.com>
References: <CAG=rPVe_t4BEUfB_mfEgTAQfX45YGJuABf_Vh=CBbHwjVGMDVg@mail.gmail.com>
Message-ID: <CAEgpGv7ieBCRqY4K3R7GQ+Nuin5xV=gU_QC275BQWx4vVwbhRA@mail.gmail.com>

If you or someone else ends up working on this I can attest that his setup
works well and will build C-extensions.  I've been using his script
extensively on pywincffi for Python 2.6+ and Python 3.3+ so far without
issues.  For reference, here's my yaml file:

    https://github.com/opalmer/pywincffi/blob/master/appveyor.yml

Since Twisted is using tox I assume that either tox should setup the
environment or %PYTHON_VERSION% and %PYTHON_ARCH% need to be set by the
build matrix and tox would be called with the wrapper:

    cmd /E:ON /V:ON /C run_with_cmd.cmd tox <arguments>

For pywincffi I thought about writing a tox plugin to do the work of
setting up the environment but ended up deciding against it and using the
build matrix approach instead.  It kept it simple, made it easy for people
to see how the build was setup and adding new versions to the build became
a one or two line change.

I'm not sure about how others would feel about it but it seems like
expanding the build matrix and adding run_with_cmd would be a good way to
start testing against more versions and fixing the C-extension issue.
Improving the build on AppyVeyor might also help shed some light on the
existing test failures too maybe.

On Wed, Jul 20, 2016 at 6:32 PM, Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

> The Appveyor setup with Python 2.7 currently does not build any C
> extensions.
> This means that IOCP reactor is not currently built and none of the IOCP
> tests are run in Appveyor.  I'm not sure offhand what the fix is,
> but I notice that quite a few Python projects import this script from
> Olivier Grisel:
>
> https://github.com/ogrisel/python-appveyor-demo/blob/master/appveyor/run_with_env.cmd
>
> which sets the environment correctly for the Windows compilers, and
> then uses the script from inside appveyor.yml with something like:
> https://github.com/ogrisel/python-appveyor-demo/blob/master/appveyor.yml
>
> It would be nice if we could get the C extensions buildin in Appveyor.
>
>
> The Appveyor setup does not have a Python 3 setup, so no Python 3 builds
> are done.
>
> There used to be a Python 3 buildbot, and although many of the tests were
> broken,
> it was producing some interesting logs.  For example, I saw a lot of
> warnings
> in the SSL code where strings where being passed as arguments to API's
> which
> took bytes as arguments.
>
> Can we bring back at least one Windows Python 3 buildbot, and leave
> it as an unsupported, on-demand environment?
>
> I am working on getting more Windows Python 3 tests to pass, so this
> would be useful.
>
>
> --
> Craig
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160720/6d3e16bf/attachment.html>

From rodrigc at crodrigues.org  Wed Jul 20 19:58:54 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 20 Jul 2016 18:58:54 -0700
Subject: [Twisted-Python] Windows buildbots and Appveyor
In-Reply-To: <CAEgpGv7ieBCRqY4K3R7GQ+Nuin5xV=gU_QC275BQWx4vVwbhRA@mail.gmail.com>
References: <CAG=rPVe_t4BEUfB_mfEgTAQfX45YGJuABf_Vh=CBbHwjVGMDVg@mail.gmail.com>
 <CAEgpGv7ieBCRqY4K3R7GQ+Nuin5xV=gU_QC275BQWx4vVwbhRA@mail.gmail.com>
Message-ID: <CAG=rPVcWRJHiF2FNmjcx5RUgD-j9N_677f1xW588i4pQNz2jmA@mail.gmail.com>

On Wed, Jul 20, 2016 at 6:25 PM, Oliver Palmer <oliverpalmer at opalmer.com>
wrote:

> If you or someone else ends up working on this I can attest that his setup
> works well and will build C-extensions.  I've been using his script
> extensively on pywincffi for Python 2.6+ and Python 3.3+ so far without
> issues.  For reference, here's my yaml file:
>
>     https://github.com/opalmer/pywincffi/blob/master/appveyor.yml
>
> Since Twisted is using tox I assume that either tox should setup the
> environment or %PYTHON_VERSION% and %PYTHON_ARCH% need to be set by the
> build matrix and tox would be called with the wrapper:
>
>     cmd /E:ON /V:ON /C run_with_cmd.cmd tox <arguments>
>
>
Using tox is the desired way to go.
I made an initial cut at this here:
https://github.com/rodrigc/twisted/blob/appveyor2/appveyor.yml

Do you have any cycles to help me improve this and get something working?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160720/46b9e447/attachment.html>

From oliverpalmer at opalmer.com  Wed Jul 20 20:16:50 2016
From: oliverpalmer at opalmer.com (Oliver Palmer)
Date: Wed, 20 Jul 2016 22:16:50 -0400
Subject: [Twisted-Python] Windows buildbots and Appveyor
In-Reply-To: <CAG=rPVcWRJHiF2FNmjcx5RUgD-j9N_677f1xW588i4pQNz2jmA@mail.gmail.com>
References: <CAG=rPVe_t4BEUfB_mfEgTAQfX45YGJuABf_Vh=CBbHwjVGMDVg@mail.gmail.com>
 <CAEgpGv7ieBCRqY4K3R7GQ+Nuin5xV=gU_QC275BQWx4vVwbhRA@mail.gmail.com>
 <CAG=rPVcWRJHiF2FNmjcx5RUgD-j9N_677f1xW588i4pQNz2jmA@mail.gmail.com>
Message-ID: <CAEgpGv50iWu17DS8P489xdHHMt25ZRFQ_HFHssfj84LdzKPBwg@mail.gmail.com>

I should this weekend but it looks like you're on the right track so far.
Looking at tox's config it shouldn't have issues picking up the environment
being added in appveyor.yaml because passenv = * currently.  If this works
out then we can hopefully avoid the need for a plugin and just rely
directly on the wrapper script.  At least in my experience the wrapper
script was all I needed to get builds working across Python versions.

By the way, this can be really useful to help debug problems at runtime
while the build is running:

https://www.appveyor.com/docs/how-to/rdp-to-build-worker

Hit me with @opalmer on GitHub if you've got a PR open between now and the
weekend or want some input, I'll be happy to help either there or on this
list.




On Wed, Jul 20, 2016 at 9:58 PM, Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

> On Wed, Jul 20, 2016 at 6:25 PM, Oliver Palmer <oliverpalmer at opalmer.com>
> wrote:
>
>> If you or someone else ends up working on this I can attest that his
>> setup works well and will build C-extensions.  I've been using his script
>> extensively on pywincffi for Python 2.6+ and Python 3.3+ so far without
>> issues.  For reference, here's my yaml file:
>>
>>     https://github.com/opalmer/pywincffi/blob/master/appveyor.yml
>>
>> Since Twisted is using tox I assume that either tox should setup the
>> environment or %PYTHON_VERSION% and %PYTHON_ARCH% need to be set by the
>> build matrix and tox would be called with the wrapper:
>>
>>     cmd /E:ON /V:ON /C run_with_cmd.cmd tox <arguments>
>>
>>
> Using tox is the desired way to go.
> I made an initial cut at this here:
> https://github.com/rodrigc/twisted/blob/appveyor2/appveyor.yml
>
> Do you have any cycles to help me improve this and get something working?
>
> --
> Craig
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160720/9fa70331/attachment.html>

From oliverpalmer at opalmer.com  Wed Jul 20 20:42:14 2016
From: oliverpalmer at opalmer.com (Oliver Palmer)
Date: Wed, 20 Jul 2016 22:42:14 -0400
Subject: [Twisted-Python] pywincffi status update and next steps
Message-ID: <CAEgpGv7kih6DJmG=Uq_Ft_67EyO4+3gni6A2XAffbBdJzuZNgw@mail.gmail.com>

All (or at least those interested in replacing pywin32 in Twisted),

pywincffi is getting very close to having all the API calls necessary to
replace pywin32. By my count there should be one function left,
GetOverlappedResult().  All of the other functions and constants in use
today should be covered and ready to start swapping into Twisted.

    https://github.com/opalmer/pywincffi/issues/69

There's a couple of reasons I've been holding off on any integration work.
First, Twisted itself has shifted development and testing workflows to
public infrastructure which overall should make integration easier.  The
other issue right now seems to be some of the tests are not passing on
AppVeyor and it's not testing across as many Python versions.

These are not big issues for pywincffi itself but I think it's probably a
good idea to do the integration on top of a known stable build so we can
all be confident in the results.  I plan to spend some time this weekend
taking a look at the build starting off by helping Craig (see thread:
"Windows buildbots and Appveyor") add support for more versions of Python.
After that, unless someone is already working on it, I can start to take a
look at the existing test failures on Windows.

To wrap up, a big thank you to those who've reached out to help move
pywincffi forward so far.  Especially exvito who came up with a system to
wrap cffi types, added functions, fixed some tests and contributed to
several improvements on the development process.

---Oliver
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160720/a5b7becd/attachment-0001.html>

From glyph at twistedmatrix.com  Wed Jul 20 21:20:58 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 20 Jul 2016 20:20:58 -0700
Subject: [Twisted-Python] pywincffi status update and next steps
In-Reply-To: <CAEgpGv7kih6DJmG=Uq_Ft_67EyO4+3gni6A2XAffbBdJzuZNgw@mail.gmail.com>
References: <CAEgpGv7kih6DJmG=Uq_Ft_67EyO4+3gni6A2XAffbBdJzuZNgw@mail.gmail.com>
Message-ID: <746C0F3C-2F5E-4251-B3B8-C7FB639F5BBC@twistedmatrix.com>


> On Jul 20, 2016, at 7:42 PM, Oliver Palmer <oliverpalmer at opalmer.com> wrote:
> 
> pywincffi is getting very close to having all the API calls necessary to replace pywin32. By my count there should be one function left, GetOverlappedResult().  All of the other functions and constants in use today should be covered and ready to start swapping into Twisted.

This is fantastic news.  If we can move the build infrastructure for producing wheels for all the various flavors of windows Python into pywincffi, that will simplify and streamline the Twisted build process even more.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160720/c84a5fad/attachment.html>

From chenjianhappy2008 at 126.com  Wed Jul 20 21:23:04 2016
From: chenjianhappy2008 at 126.com (=?GBK?B?s8K9oQ==?=)
Date: Thu, 21 Jul 2016 11:23:04 +0800 (CST)
Subject: [Twisted-Python] Python SSH Server(twisted.conch) set
 ChallengeResponseAuthentication to yes
Message-ID: <a341e15.46aa.1560b7a5f29.Coremail.chenjianhappy2008@126.com>

hi:
     I wrote a SSH server with Twisted Conch. I want to support for the 'keyboard-interactive' authentication .ChallengeResponseAuthentication controls support for the 'keyboard-interactive' authentication scheme defined in RFC-4256. The 'keyboard-interactive' authentication scheme could, in theory, ask a user any number of multi-facited questions. In openssh the "ChallengeResponseAuthentication" option can be configured in "/etc/ssh/sshd_config". But in twisted i don't know how to do that enable the "ChallengeResponseAuthentication" option ?
    http://stackoverflow.com/questions/38364930/python-ssh-servertwisted-conch-set-challengeresponseauthentication-to-yes
    Best regards,
    ---jianchen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160721/9012d24a/attachment.html>

From glyph at twistedmatrix.com  Wed Jul 20 22:36:10 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 20 Jul 2016 21:36:10 -0700
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <ED8C29C3-D7A1-429A-AA06-081D031F917F@lukasa.co.uk>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
 <7C50EE3F-7717-462E-B9DC-2782331DAED0@lukasa.co.uk>
 <0989F397-D755-4E43-A9BF-0C745B5496BD@twistedmatrix.com>
 <1477978A-0EF7-4026-821D-AA0C829DCA79@lukasa.co.uk>
 <CAO38UC=7-S6p6qEJasOTO2F_F6VvXr5CqM0nuBn4aKy2m=NyKQ@mail.gmail.com>
 <ED8C29C3-D7A1-429A-AA06-081D031F917F@lukasa.co.uk>
Message-ID: <7577C71C-E875-462C-9795-13AEC82D52F9@twistedmatrix.com>

My earlier replies to this thread were pretty terse, so just to expand on it:

> On Jul 13, 2016, at 3:39 AM, Cory Benfield <cory at lukasa.co.uk> wrote:
> 
> 
>> On 13 Jul 2016, at 10:00, Pawe? Miech <pawelmhm at gmail.com <mailto:pawelmhm at gmail.com>> wrote:
>> 
>> > Anyway, I?ll be spending my Twisted time on this for a while I suspect. This will delay HTTP/2 client support, unfortunately. =(
>> 
>> Isn't it better to get HTTP2 client support and just document things better for HTTP2? Or maybe even backport some features from CertificateOptions to factory? DefaultSSLContextFactory seems to work ok for cases outside HTTP2.

It really doesn't.

>> It is not evidently broken.

For clients, it's horribly broken and provides no security whatsoever.  For servers, it's badly configured enough that you will have problems with SSLLabs and other automated testing things.

>> It is probably less secure than twisted.internet.ssl.CertificateOptions but is really broken beyond repair?

Yes, it really is.  The only reason we didn't just delete it immediately in a compatibility-breaking exception is that if you knew what you were doing, it was the only way to reasonably be secure in the past, and we did not want to punish those users who had done the best they could with what Twisted was giving them.  It was possible to make something secure with it, if you absolutely knew what you were doing and you layered a bunch of things on top of it.

> Generally speaking I?d say it isn?t better, for a couple of reasons.
> 
> Firstly, it rarely works well to document one?s way out of a usability problem. This is doubly-true when the *rest* of the documentation is contrary to what your new documentation would say. For example, the Twisted Web howto client documentation uses ClientContextFactory, which will be utterly unsuitable for HTTP/2.

Not to mention the fact that it provides no security.  Client-side, anything other than optionsForClientTLS is probably completely unacceptable.  Again? it was possible to add your own security to ClientContextFactory but that is the only reason we didn't delet it.

> More generally, having two different ways to do TLS, one of which is substantially less secure and powerful than the other, is a real problem. For example, DefaultSSLContextFactory literally only works for HTTP/2 servers by chance: it was never actually *designed* to work with ALPN and only managed to do so because we refactored the implementation to have the TLSMemoryBIOFactory apply the ALPN/NPN logic. In essence, by sheer bad luck we managed to change the HTTP/2 implementation to accidentally work with the old method, when it was never planned to do so.

In fairness, the fact that random accidents like this happen is as much a fault of OpenSSL's ... idiosyncratic, shall we say, API, where promiscuous mutable data sharing is completely the norm, as it is a fault of Twisted's bad early misinterpretation of said API.

> Worse, though, is that while the ContextFactory isn?t that bad for servers, it?s *terrible* for clients. In particular, the ClientContextFactory does not use SNI, does not validate hostnames, and generally speaking does not produce secure TLS. That means I?d want to prevent the HTTP/2 client from using the ClientContextFactory *anyway*: it?s really genuinely terrible and needs to be burned with fire.

TERRIBLE TERRIBLE TERRIBLE FOR CLIENTS DON'T USE IT

> If you?re interested in speeding up the arrival of HTTP/2 client support, then, the best way to do that is to help out with the deprecation effort. I?ve got patches open for the majority of the docs problems, and will be starting to work on the code problems over the next few days. All of these patches will require review, and other people writing patches will also speed things up.

+1000 thank you for saying this.

> Basically, I?m disinclined to want to prolong the lifetime of something that was supposed to go away two years ago. Twisted has a lot of things in it that were *supposed* to be deprecated but were never *actually* deprecated, and that kind of soft deprecation ends up causing the kind of problem we?ve bumped into here, whereby a lot of people have code that ?works? with current features, but new features are designed only with an eye to the best practice. On a personal level, I want to push for Twisted to *actually* deprecate things that are soft deprecated. That has the best long-term effect on the project, by reducing the amount of code that needs to be maintained and encouraging users to move towards features that function better.

Basically I just wanted to chime in to make it clear that I _absolutely_ agree with _every_ part of this and we should _immediately_ move to implement all of these plans.  Cory, I also really appreciate you going through and taking the time to clear up the messaging around these APIs in our documentation and our implementations to help users understand what's going on so you don't need to be a member of the Twisted cabal to get good security and modern protocol features.

Thanks,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160720/d6b41953/attachment-0001.html>

From ex.vitorino at gmail.com  Thu Jul 21 06:33:02 2016
From: ex.vitorino at gmail.com (Ex Vitorino)
Date: Thu, 21 Jul 2016 14:33:02 +0200
Subject: [Twisted-Python] pywincffi status update and next steps
In-Reply-To: <746C0F3C-2F5E-4251-B3B8-C7FB639F5BBC@twistedmatrix.com>
References: <CAEgpGv7kih6DJmG=Uq_Ft_67EyO4+3gni6A2XAffbBdJzuZNgw@mail.gmail.com>
 <746C0F3C-2F5E-4251-B3B8-C7FB639F5BBC@twistedmatrix.com>
Message-ID: <1EFD7FB7-ECD9-41C6-8B45-ACD39E4A5138@gmail.com>

(rushing from one talk to another)

I'm currently at EuroPython in Bilbao where I've me Amber. I hope I can contribute to more progress on this if we get to Sprint over the coming weekend.

Cheers to all,
--
exvito


> On 21 Jul 2016, at 05:20, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Jul 20, 2016, at 7:42 PM, Oliver Palmer <oliverpalmer at opalmer.com> wrote:
>> 
>> pywincffi is getting very close to having all the API calls necessary to replace pywin32. By my count there should be one function left, GetOverlappedResult().  All of the other functions and constants in use today should be covered and ready to start swapping into Twisted.
> 
> This is fantastic news.  If we can move the build infrastructure for producing wheels for all the various flavors of windows Python into pywincffi, that will simplify and streamline the Twisted build process even more.
> 
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160721/d634b53b/attachment.html>

From adi at roiban.ro  Thu Jul 21 06:49:28 2016
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 21 Jul 2016 13:49:28 +0100
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down a lot
In-Reply-To: <10975DF2-E7C9-4D3A-9DA9-CC05C5E376DB@twistedmatrix.com>
References: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>
 <CAFycZ9fifV4cPy2Mi4PYMQ1zW2C8RX-C4ofkE7A_Zp=KDaacMg@mail.gmail.com>
 <CAMxb2it6Lc=5Rw991pVgS22RWvjy90PEjaY06maPD4gwgGFpxw@mail.gmail.com>
 <CA+hid6EYrtRZ4T2QPufMUSVV_p56DWtneUJU1+djzNw7vVHdxQ@mail.gmail.com>
 <CAFycZ9d0_cpv1c4HKjhbkHsjAe5xgBYRGncx6M7p1owRzU39gg@mail.gmail.com>
 <A96D75B7-70B4-4F49-93FA-E090FA1BD55A@twistedmatrix.com>
 <CAFycZ9fcvSEzZXfd-ezR7tADsYvViwQ=0DUnSR6qPMgx=DyMhg@mail.gmail.com>
 <038DA9C1-7E61-49BE-91FE-478DAD409C67@twistedmatrix.com>
 <10975DF2-E7C9-4D3A-9DA9-CC05C5E376DB@twistedmatrix.com>
Message-ID: <CAFycZ9cXzDt9vnumaA0nGRMYWcEiNprAo=okBGseLmobkV3GNA@mail.gmail.com>

On 21 July 2016 at 00:58, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

>
> On Jul 20, 2016, at 2:31 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
> wrote:
>
> I have recently discovered the Rackspace monitoring capabilities for VM...
> and set up a memory notification... not sure who will receive the alerts.
>
>
> I'll make sure that the relevant people are on the monitoring list.
>
>
> I created 'technical contact' users for you and Amber, with current email
> addresses, which you can use (and even log in as!) if you edit yourselves
> under 'user management'. I apparently had one already.  You should both
> have a bogus alert about a MySQL server (since we don't run mysql it seemed
> a reasonable thing to test).  Make sure that's not flagged as spam and we
> should all be set up to receive alerts :).
>
> I also added some basic HTTPS monitoring to it as well, so we should see
> if it goes down for reasons unrelated to memory.
>
>
OK. I have received the mysql error

I can see that when there we got more builds there is significant increase
in memory usage... but will recover once moved to idle.

For now the VM still has 2GB ... and GitHub webhooks are still enabled

Regards
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160721/f43e3b94/attachment.html>

From glyph at twistedmatrix.com  Thu Jul 21 11:40:27 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 21 Jul 2016 10:40:27 -0700
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down a lot
In-Reply-To: <CAFycZ9cXzDt9vnumaA0nGRMYWcEiNprAo=okBGseLmobkV3GNA@mail.gmail.com>
References: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>
 <CAFycZ9fifV4cPy2Mi4PYMQ1zW2C8RX-C4ofkE7A_Zp=KDaacMg@mail.gmail.com>
 <CAMxb2it6Lc=5Rw991pVgS22RWvjy90PEjaY06maPD4gwgGFpxw@mail.gmail.com>
 <CA+hid6EYrtRZ4T2QPufMUSVV_p56DWtneUJU1+djzNw7vVHdxQ@mail.gmail.com>
 <CAFycZ9d0_cpv1c4HKjhbkHsjAe5xgBYRGncx6M7p1owRzU39gg@mail.gmail.com>
 <A96D75B7-70B4-4F49-93FA-E090FA1BD55A@twistedmatrix.com>
 <CAFycZ9fcvSEzZXfd-ezR7tADsYvViwQ=0DUnSR6qPMgx=DyMhg@mail.gmail.com>
 <038DA9C1-7E61-49BE-91FE-478DAD409C67@twistedmatrix.com>
 <10975DF2-E7C9-4D3A-9DA9-CC05C5E376DB@twistedmatrix.com>
 <CAFycZ9cXzDt9vnumaA0nGRMYWcEiNprAo=okBGseLmobkV3GNA@mail.gmail.com>
Message-ID: <FF6BDFB9-A92A-4DC2-B708-FBB1C39F0A4A@twistedmatrix.com>


> On Jul 21, 2016, at 5:49 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> I can see that when there we got more builds there is significant increase in memory usage... but will recover once moved to idle.
> 

Cool.  Is there something we can do to limit the global concurrency of the builds to preserve resources on the buildmaster, then?

Or: perhaps we could move the buildbot to Carina, which has 4G of RAM and won't impact our hosting budget?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160721/8593c6e6/attachment.html>

From dansut at gmail.com  Fri Jul 22 09:47:02 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Fri, 22 Jul 2016 11:47:02 -0400
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <21CFB48D-C6CD-46DC-BD6F-5B451FF4628D@twistedmatrix.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
 <CADzPF4vLA5nCXkOE0p22=+OmEgSPQPizMo_7cqK8x2==Og_sGA@mail.gmail.com>
 <7CADE897-C04B-479D-9C0A-081096CB3250@twistedmatrix.com>
 <CAG=rPVfTW_si7XqfJwLTXgmmk5VTZuRmS7_oM2DPTyGEpc2KQA@mail.gmail.com>
 <463BECAE-737F-4166-92F4-BA696DC64E71@twistedmatrix.com>
 <CADzPF4tZZLSbX6LKNhs2c7rJTQOmzX=5k-a=UmF5OjcEPvzczw@mail.gmail.com>
 <26EBEA14-73B0-4E90-93E5-962059CC74B3@twistedmatrix.com>
 <CADzPF4sA3ojT9rsdY=zW7VvfHKokRmh6_JEVMcRZ8Yhu6xQ-vQ@mail.gmail.com>
 <21CFB48D-C6CD-46DC-BD6F-5B451FF4628D@twistedmatrix.com>
Message-ID: <CADzPF4vQ-KipOpm=YVVMMqhQf2XPTniyvndkw-=GQVkhG53tgw@mail.gmail.com>

On Wed, Jul 20, 2016 at 5:40 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> You now have wiki-edit superpowers!  Use them for good, or at least, the kind of evil which makes a good story.

Well I tried, but the results weren't the best. Trac replied:
> Configuration Error
> Cannot find an implementation of the IRejectHandler interface named FilterSystem.
> Please check that the Component is enabled or update the option [spam-filter] reject_handler in trac.ini.

Sorry :(
Probably ought to create a ticket for this...
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>


From dansut at gmail.com  Fri Jul 22 13:28:00 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Fri, 22 Jul 2016 15:28:00 -0400
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <CADzPF4vQ-KipOpm=YVVMMqhQf2XPTniyvndkw-=GQVkhG53tgw@mail.gmail.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
 <CADzPF4vLA5nCXkOE0p22=+OmEgSPQPizMo_7cqK8x2==Og_sGA@mail.gmail.com>
 <7CADE897-C04B-479D-9C0A-081096CB3250@twistedmatrix.com>
 <CAG=rPVfTW_si7XqfJwLTXgmmk5VTZuRmS7_oM2DPTyGEpc2KQA@mail.gmail.com>
 <463BECAE-737F-4166-92F4-BA696DC64E71@twistedmatrix.com>
 <CADzPF4tZZLSbX6LKNhs2c7rJTQOmzX=5k-a=UmF5OjcEPvzczw@mail.gmail.com>
 <26EBEA14-73B0-4E90-93E5-962059CC74B3@twistedmatrix.com>
 <CADzPF4sA3ojT9rsdY=zW7VvfHKokRmh6_JEVMcRZ8Yhu6xQ-vQ@mail.gmail.com>
 <21CFB48D-C6CD-46DC-BD6F-5B451FF4628D@twistedmatrix.com>
 <CADzPF4vQ-KipOpm=YVVMMqhQf2XPTniyvndkw-=GQVkhG53tgw@mail.gmail.com>
Message-ID: <CADzPF4scdsKxOmDmCZFx-9RShC1oV3eFxGKp5nqWZk6DKD143w@mail.gmail.com>

On Wed, Jul 20, 2016 at 5:40 PM, Glyph Lefkowitz
> <glyph at twistedmatrix.com> wrote:
>> You now have wiki-edit superpowers!  Use them for good, or at least, the kind of evil which makes a good story.

On Fri, Jul 22, 2016 at 11:47 AM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> Well I tried, but the results weren't the best. Trac replied:
>> Configuration Error
>> Cannot find an implementation of the IRejectHandler interface named FilterSystem.
>> Please check that the Component is enabled or update the option [spam-filter] reject_handler in trac.ini.
>
> Sorry :(
> Probably ought to create a ticket for this...

Fixed and fixed :)
Thanks
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>


From glyph at twistedmatrix.com  Fri Jul 22 16:37:04 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 22 Jul 2016 15:37:04 -0700
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <CADzPF4scdsKxOmDmCZFx-9RShC1oV3eFxGKp5nqWZk6DKD143w@mail.gmail.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
 <CADzPF4vLA5nCXkOE0p22=+OmEgSPQPizMo_7cqK8x2==Og_sGA@mail.gmail.com>
 <7CADE897-C04B-479D-9C0A-081096CB3250@twistedmatrix.com>
 <CAG=rPVfTW_si7XqfJwLTXgmmk5VTZuRmS7_oM2DPTyGEpc2KQA@mail.gmail.com>
 <463BECAE-737F-4166-92F4-BA696DC64E71@twistedmatrix.com>
 <CADzPF4tZZLSbX6LKNhs2c7rJTQOmzX=5k-a=UmF5OjcEPvzczw@mail.gmail.com>
 <26EBEA14-73B0-4E90-93E5-962059CC74B3@twistedmatrix.com>
 <CADzPF4sA3ojT9rsdY=zW7VvfHKokRmh6_JEVMcRZ8Yhu6xQ-vQ@mail.gmail.com>
 <21CFB48D-C6CD-46DC-BD6F-5B451FF4628D@twistedmatrix.com>
 <CADzPF4vQ-KipOpm=YVVMMqhQf2XPTniyvndkw-=GQVkhG53tgw@mail.gmail.com>
 <CADzPF4scdsKxOmDmCZFx-9RShC1oV3eFxGKp5nqWZk6DKD143w@mail.gmail.com>
Message-ID: <39275BE4-3B06-450F-A1BE-64CB9AFAEF55@twistedmatrix.com>


> On Jul 22, 2016, at 12:28, Daniel Sutcliffe <dansut at gmail.com> wrote:
> 
> On Wed, Jul 20, 2016 at 5:40 PM, Glyph Lefkowitz
>> <glyph at twistedmatrix.com> wrote:
>>> You now have wiki-edit superpowers!  Use them for good, or at least, the kind of evil which makes a good story.
> 
> On Fri, Jul 22, 2016 at 11:47 AM, Daniel Sutcliffe <dansut at gmail.com> wrote:
>> Well I tried, but the results weren't the best. Trac replied:
>>> Configuration Error
>>> Cannot find an implementation of the IRejectHandler interface named FilterSystem.
>>> Please check that the Component is enabled or update the option [spam-filter] reject_handler in trac.ini.
>> 
>> Sorry :(
>> Probably ought to create a ticket for this...
> 
> Fixed and fixed :)
> Thanks
> /dan

Oh, cool.  Did you figure out what the problem was?

-g



From dansut at gmail.com  Sat Jul 23 06:13:37 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Sat, 23 Jul 2016 08:13:37 -0400
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <39275BE4-3B06-450F-A1BE-64CB9AFAEF55@twistedmatrix.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
 <CADzPF4vLA5nCXkOE0p22=+OmEgSPQPizMo_7cqK8x2==Og_sGA@mail.gmail.com>
 <7CADE897-C04B-479D-9C0A-081096CB3250@twistedmatrix.com>
 <CAG=rPVfTW_si7XqfJwLTXgmmk5VTZuRmS7_oM2DPTyGEpc2KQA@mail.gmail.com>
 <463BECAE-737F-4166-92F4-BA696DC64E71@twistedmatrix.com>
 <CADzPF4tZZLSbX6LKNhs2c7rJTQOmzX=5k-a=UmF5OjcEPvzczw@mail.gmail.com>
 <26EBEA14-73B0-4E90-93E5-962059CC74B3@twistedmatrix.com>
 <CADzPF4sA3ojT9rsdY=zW7VvfHKokRmh6_JEVMcRZ8Yhu6xQ-vQ@mail.gmail.com>
 <21CFB48D-C6CD-46DC-BD6F-5B451FF4628D@twistedmatrix.com>
 <CADzPF4vQ-KipOpm=YVVMMqhQf2XPTniyvndkw-=GQVkhG53tgw@mail.gmail.com>
 <CADzPF4scdsKxOmDmCZFx-9RShC1oV3eFxGKp5nqWZk6DKD143w@mail.gmail.com>
 <39275BE4-3B06-450F-A1BE-64CB9AFAEF55@twistedmatrix.com>
Message-ID: <CADzPF4vNnfipK02N6Sg7p0XfCP67vk_gAzs7MBuy48dDYxLhiQ@mail.gmail.com>

On Fri, Jul 22, 2016 at 11:47 AM, Daniel Sutcliffe <dansut at gmail.com> wrote:
>>> Well I tried, but the results weren't the best. Trac replied:
>>>> Configuration Error
>>>> Cannot find an implementation of the IRejectHandler interface named FilterSystem.
>>>> Please check that the Component is enabled or update the option [spam-filter] reject_handler in trac.ini.
>>>
>>> Sorry :(
>>> Probably ought to create a ticket for this...

>> On Jul 22, 2016, at 12:28, Daniel Sutcliffe <dansut at gmail.com> wrote:
>> Fixed and fixed :)

On Fri, Jul 22, 2016 at 6:37 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> Oh, cool.  Did you figure out what the problem was?

I'm afraid I cannot take credit for fixing Trac, see hawkowl
There was a ticket: https://twistedmatrix.com/trac/ticket/8655

Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>


From glyph at twistedmatrix.com  Sun Jul 24 13:01:47 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 24 Jul 2016 12:01:47 -0700
Subject: [Twisted-Python] close to the finish line on hosted windows testing
Message-ID: <4BBAB63C-216F-48B5-9163-F2659C0F34F9@twistedmatrix.com>

Thanks to Craig and Adi's work, we now have tests sort of working on appveyor.  However, they aren't actually reporting their pass/fail status right now as github statuses, I am assuming because of the persistent failures that were causing noise on unrelated tickets.

However, it's very close to being a useful builder; there are really only 2 remaining issues, not counting turning on the reporting itself.  I've made an umbrella ticket here: https://twistedmatrix.com/trac/ticket/8664 <https://twistedmatrix.com/trac/ticket/8664> and documented what's wrong with each one.

So, if you care about Twisted on Windows, fixing the issues documented there should make it much easier for more folks to contribute easily :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160724/7024b33a/attachment.html>

From hawkowl at atleastfornow.net  Sun Jul 24 13:07:36 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sun, 24 Jul 2016 21:07:36 +0200
Subject: [Twisted-Python] close to the finish line on hosted windows
	testing
In-Reply-To: <4BBAB63C-216F-48B5-9163-F2659C0F34F9@twistedmatrix.com>
References: <4BBAB63C-216F-48B5-9163-F2659C0F34F9@twistedmatrix.com>
Message-ID: <EC43BB15-AFDC-42F3-8182-33EE3F2EFDC6@atleastfornow.net>

Just a note; I've got both issues fixed on a branch and am just cleaning it up for review. Them, I would like to remove the (quite broken) Windows 7 builder and just use appveyor.

- Amber

> On 24 Jul 2016, at 21:01, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> Thanks to Craig and Adi's work, we now have tests sort of working on appveyor.  However, they aren't actually reporting their pass/fail status right now as github statuses, I am assuming because of the persistent failures that were causing noise on unrelated tickets.
> 
> However, it's very close to being a useful builder; there are really only 2 remaining issues, not counting turning on the reporting itself.  I've made an umbrella ticket here: https://twistedmatrix.com/trac/ticket/8664 <https://twistedmatrix.com/trac/ticket/8664> and documented what's wrong with each one.
> 
> So, if you care about Twisted on Windows, fixing the issues documented there should make it much easier for more folks to contribute easily :).
> 
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160724/69307f40/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160724/69307f40/attachment.pgp>

From mcepl at cepl.eu  Mon Jul 25 03:03:30 2016
From: mcepl at cepl.eu (=?UTF-8?Q?Mat=c4=9bj_Cepl?=)
Date: Mon, 25 Jul 2016 11:03:30 +0200
Subject: [Twisted-Python] Request for help with Twisted bindings in M2Crypto
Message-ID: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>

Hello,

I took over a maintenance of (surprisingly) still quite popular M2Crypto
project in the last year. I have just released 0.25.0 which is my fifth
release during that time and I think we are slowly but surely moving
towards porting to py3k, cleaning up the code, etc.

I am now working on porting to py3k, but the biggest PITA for me (aside
from the Windows Pain? ;)) is the Twisted integration module
(https://gitlab.com/m2crypto/m2crypto/blob/python3/M2Crypto/SSL/TwistedProtocolWrapper.py).

1) I get bugs like https://gitlab.com/m2crypto/m2crypto/issues/111 which
I have no idea how to solve, because I don't understand the deep magic
which Twisted seems to me, and I am not even sure that M2Crypto is in
fault here (not mentioning that I have a hard time to reproduce).

2) Even more pressing is that the Twisted module breaks my tests when
porting to py3k (https://travis-ci.org/mcepl/M2Crypto/jobs/146633964).
Given the opaque and complicated data types in Twisted, I see horribly
complicated task of diving into it in front of me and I am not eager.

3) Moreover, I would like to know how much interest there is in
maintaining the M2Crypto module for Twisted. I got some hope from
http://twistedmatrix.com/trac/wiki/TransportLayerSecurity which seems
like there is an interest in more complete OpenSSL bindings, but OTOH I
see on the list that Twisted now seems to use more and more of
Cryptography (why in the world somebody made such confusing name of
their project ...). Obviously the most simple way for me to be cutting
Twisted module from M2Crypto and let it be (although I am afraid I have
still some legacy users who would like to see it maintained, and given
that the legacy support is still the most important reason for
maintaining M2Crypto, I don't want to give up lightly).

Moreover, I am suspicious that for somebody who actually understands
Twisted, most of my problems are trivial and they could be solved
easily. So, before I start studying
http://krondo.com/slow-poetry-and-the-apocalypse/ (is there some better
tutorial from ground up for complete idiots?), I would like to solicit
help here for help with this module.

Would somebody raise up their hand to help me and help Twisted?

Best,

Mat?j

-- 
https://matej.ceplovi.cz/blog/, Jabber: mcepl at ceplovi.cz
GPG Finger: 3C76 A027 CA45 AD70 98B5  BC1D 7920 5802 880B C9D8

Give a man a regular expression and he?ll match a string?
teach him to make his own regular expressions and you?ve got a man with
problems.
  -- yakugo in http://regex.info/blog/2006-09-15/247#comment-3022

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: OpenPGP digital signature
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160725/d0a4c30d/attachment.pgp>

From rodrigc at crodrigues.org  Mon Jul 25 03:33:20 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 25 Jul 2016 02:33:20 -0700
Subject: [Twisted-Python] Request for help with Twisted bindings in
	M2Crypto
In-Reply-To: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
References: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
Message-ID: <CAG=rPVfO_QTsQ-VY4zeE64HJJsTkgES6d+mEjS0cSUSdiHX6gw@mail.gmail.com>

On Mon, Jul 25, 2016 at 2:03 AM, Mat?j Cepl <mcepl at cepl.eu> wrote:

> Hello,
>
> Would somebody raise up their hand to help me and help Twisted?
>
>
Hi,

Earlier this year, I contributed lots of patches to you in M2Crypto to port
it to py3k.
Now I have shifted efforts to Twisted, where in the past month I have
contributed hundreds of patches to help improve py3k support in Twisted.

I'm not sure I have much bandwidth to help more on M2Crypto, but I'll give
advice where I can.

Twisted code is definitely not py3k clean in the parts where it interacts
with OpenSSL.

For example, if you do the following in a Python 3 virtual environment:

pip install pyOpenSSL
git clone https://github.com/twisted/twisted twisted_test
cd twisted_test
python -Wall -bb bin/trial twisted.test.test_sslverify

The tests will pass, but you will get warnings like:

twisted/internet/_sslverify.py:1648: DeprecationWarning: str for buf is no
longer accepted, use bytes
twisted/internet/_sslverify.py:1652: DeprecationWarning: str for
cipher_list is no longer accepted, use bytes
twisted/internet/_sslverify.py:1791: DeprecationWarning: str for
cipher_list is no longer accepted, use bytes

Getting correct usage of  bytes vs. str is really important on py3k.  I've
observed weird errors when it isn't correct.

--
Craig


--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160725/0b1a5257/attachment.html>

From rodrigc at crodrigues.org  Mon Jul 25 03:55:11 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 25 Jul 2016 02:55:11 -0700
Subject: [Twisted-Python] Request for help with Twisted bindings in
	M2Crypto
In-Reply-To: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
References: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
Message-ID: <CAG=rPVfJhSZgoVuSoQ93YvkcDA=3kTgaB9wJRwOf9_neiiPPMA@mail.gmail.com>

On Mon, Jul 25, 2016 at 2:03 AM, Mat?j Cepl <mcepl at cepl.eu> wrote:

>
> 2) Even more pressing is that the Twisted module breaks my tests when
> porting to py3k (https://travis-ci.org/mcepl/M2Crypto/jobs/146633964).
> Given the opaque and complicated data types in Twisted, I see horribly
> complicated task of diving into it in front of me and I am not eager.
>

I call shenanigans on you.

Twisted is open source, so none of the data types are opaque.
Twisted is probably the best open source project I have worked with
in terms of having documentation which is generated from the code (
https://twistedmatrix.com/documents/current/api/ ).

Twisted is also absolutely *the* best project I have worked with in terms
of having unit tests with very high coverage
of the code.

If you are unfamiliar with Twisted's code and data types, and don't have
the energy to dig in,
then be honest about that, but don't accuse Twisted of being "opaque",
because it isn't.

Regarding your code example which is failing,
your code is failing because you are intermixing bytes and strings which is
a big no-no for Python 3.

If I look at this line for example:
https://gitlab.com/m2crypto/m2crypto/blob/master/M2Crypto/SSL/TwistedProtocolWrapper.py#L357

I see the code is doing stuff like:
   data = ''
   encryptedData = ''

Those are of type str, and need to be of type bytes:

   data = b''
   encryptedData = b''

You need to clean stuff like that up in your code so that you are only
using bytes.

I've really learned this lesson very hard after contributing hundreds of
py3k fixes for Twisted:

      Python 2:
              type(str) == type(bytes)
              type(str)  != type(unicode)
              b"foo" == "foo"
              "foo" != u"foo"

      Python 3:
              type(str) != type(bytes)
              type(unicode) is Gone
              b"foo" != "foo"
              "foo" == u"foo"

There is lots of code out there which uses Python strings and bytes
interchangeably
which "works" under Python2, but breaks big time on Python 3.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160725/e6733f8b/attachment-0001.html>

From sank.daniel at gmail.com  Mon Jul 25 04:10:27 2016
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 25 Jul 2016 03:10:27 -0700
Subject: [Twisted-Python] Request for help with Twisted bindings in
	M2Crypto
In-Reply-To: <CAG=rPVfJhSZgoVuSoQ93YvkcDA=3kTgaB9wJRwOf9_neiiPPMA@mail.gmail.com>
References: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
 <CAG=rPVfJhSZgoVuSoQ93YvkcDA=3kTgaB9wJRwOf9_neiiPPMA@mail.gmail.com>
Message-ID: <CAKN9TD+_PCK7f90QPsVQp+8jy9HX3Q_TqarQKkmQHuuQ0LctFw@mail.gmail.com>

I realize this is not the main point of this thread, but I'd like to make a
comment regarding Twisted being opaque.

> Twisted is open source, so none of the data types are opaque.

That's a non sequitur. A bunch of open source text in a language you don't
understand is opaque, or perhaps better called "obscure". Among other
things, Twisted's use of interfaces makes the code very hard to understand.

> Twisted is probably the best open source project I have worked with
> in terms of having documentation which is generated from the code

I agree that the documentation is generally excellent and that the tests
coverage is similarly excellent. However, I still find large fractions of
the code very hard to comprehend. A while ago I made a serious effort to
understand PB and fix some bugs, but the interface stuff combined with some
very odd contortions of python class innards eventually lead me to give up.
This is despite the friendly helpful attitude of the main developers both
here and in IRC (seriously, thanks everyone for your help back then!).

I just randomly clicked through the docs to this:
https://twistedmatrix.com/documents/current/api/twisted._threads.IWorker.html

Note that:

1. It is an interface, and I still don't _really_ understand what that
means in Twisted.

2. I have no idea what a "task" is. I realize this is python and yay
duck-typing but not specifying the expected behavior of an argument seems
like a big omission.

So, while the Twisted docs are great, consider not faulting people for
being confused/daunted.


On Mon, Jul 25, 2016 at 2:55 AM, Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

> On Mon, Jul 25, 2016 at 2:03 AM, Mat?j Cepl <mcepl at cepl.eu> wrote:
>
>>
>> 2) Even more pressing is that the Twisted module breaks my tests when
>> porting to py3k (https://travis-ci.org/mcepl/M2Crypto/jobs/146633964).
>> Given the opaque and complicated data types in Twisted, I see horribly
>> complicated task of diving into it in front of me and I am not eager.
>>
>
> I call shenanigans on you.
>
> Twisted is open source, so none of the data types are opaque.
> Twisted is probably the best open source project I have worked with
> in terms of having documentation which is generated from the code (
> https://twistedmatrix.com/documents/current/api/ ).
>
> Twisted is also absolutely *the* best project I have worked with in terms
> of having unit tests with very high coverage
> of the code.
>
> If you are unfamiliar with Twisted's code and data types, and don't have
> the energy to dig in,
> then be honest about that, but don't accuse Twisted of being "opaque",
> because it isn't.
>
> Regarding your code example which is failing,
> your code is failing because you are intermixing bytes and strings which
> is a big no-no for Python 3.
>
> If I look at this line for example:
>
> https://gitlab.com/m2crypto/m2crypto/blob/master/M2Crypto/SSL/TwistedProtocolWrapper.py#L357
>
> I see the code is doing stuff like:
>    data = ''
>    encryptedData = ''
>
> Those are of type str, and need to be of type bytes:
>
>    data = b''
>    encryptedData = b''
>
> You need to clean stuff like that up in your code so that you are only
> using bytes.
>
> I've really learned this lesson very hard after contributing hundreds of
> py3k fixes for Twisted:
>
>       Python 2:
>               type(str) == type(bytes)
>               type(str)  != type(unicode)
>               b"foo" == "foo"
>               "foo" != u"foo"
>
>       Python 3:
>               type(str) != type(bytes)
>               type(unicode) is Gone
>               b"foo" != "foo"
>               "foo" == u"foo"
>
> There is lots of code out there which uses Python strings and bytes
> interchangeably
> which "works" under Python2, but breaks big time on Python 3.
>
> --
> Craig
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Daniel Sank
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160725/5dfd61df/attachment.html>

From cory at lukasa.co.uk  Mon Jul 25 06:19:55 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Mon, 25 Jul 2016 14:19:55 +0200
Subject: [Twisted-Python] Request for help with Twisted bindings in
 M2Crypto
In-Reply-To: <CAKN9TD+_PCK7f90QPsVQp+8jy9HX3Q_TqarQKkmQHuuQ0LctFw@mail.gmail.com>
References: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
 <CAG=rPVfJhSZgoVuSoQ93YvkcDA=3kTgaB9wJRwOf9_neiiPPMA@mail.gmail.com>
 <CAKN9TD+_PCK7f90QPsVQp+8jy9HX3Q_TqarQKkmQHuuQ0LctFw@mail.gmail.com>
Message-ID: <ED96440E-D5AB-4160-BFA6-155ECFD9B865@lukasa.co.uk>


> On 25 Jul 2016, at 12:10, Daniel Sank <sank.daniel at gmail.com> wrote:
> 
> I just randomly clicked through the docs to this: https://twistedmatrix.com/documents/current/api/twisted._threads.IWorker.html <https://twistedmatrix.com/documents/current/api/twisted._threads.IWorker.html>
> 
> Note that:
> 
> 1. It is an interface, and I still don't _really_ understand what that means in Twisted.
> 
> 2. I have no idea what a "task" is. I realize this is python and yay duck-typing but not specifying the expected behavior of an argument seems like a big omission.
> 
> So, while the Twisted docs are great, consider not faulting people for being confused/daunted.
> 

Well, at this point I should argue that _threads, being prefixed by an underscore, is technically a private module to Twisted. That means that, realistically, you shouldn?t really need to consult this *at all*: if anyone outside of Twisted is using IWorker then they?re taking their life into their own hands. That largely argues for part 2, though modern Twisted development practice would still require that we document types and interfaces (see https://twistedmatrix.com/documents/current/api/twisted.web._http2.H2Connection.html <https://twistedmatrix.com/documents/current/api/twisted.web._http2.H2Connection.html>, for example).

As to interfaces, that?s a separate problem. Interfaces in Twisted are documented. See https://twistedmatrix.com/documents/current/core/howto/components.html <https://twistedmatrix.com/documents/current/core/howto/components.html> for a very lengthy discussion of interfaces in Twisted. Note that Glyph has also written heavily about interfaces: https://glyph.twistedmatrix.com/2009/02/explaining-why-interfaces-are-great.html <https://glyph.twistedmatrix.com/2009/02/explaining-why-interfaces-are-great.html>. Have those documents not helped, or have you been unable to find them?

Cory

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160725/a62b1576/attachment.html>

From mcepl at cepl.eu  Mon Jul 25 17:02:48 2016
From: mcepl at cepl.eu (=?iso-8859-2?Q?Mat=ECj?= Cepl)
Date: Tue, 26 Jul 2016 01:02:48 +0200
Subject: [Twisted-Python] Parameters of
 twisted.internet.interfaces.ITLSTransport [Was: Re: Request for help with
 Twisted bindings in M2Crypto]
In-Reply-To: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
Message-ID: <20160725230244.GA26728@mitmanek.redhat.com>

On 2016-07-25, 09:33 GMT, Craig Rodrigues wrote:
> Earlier this year, I contributed lots of patches to you in M2Crypto to port
> it to py3k.
> Now I have shifted efforts to Twisted, where in the past month I have
> contributed hundreds of patches to help improve py3k support in Twisted.

Hi,

can I for a piece of advice on the documentation.
M2Crypto.SSL.TwistedProtocolWrapper.TLSProtocolWrapper.startTLS
implements ITLSTransport.startTLS interace method, which first parameter
is called ``ctx`` and in `the current implementation in M2Crypto`_ it is of
type control of SSL Context (that's M2Crypto.SSL.Context.Context) or
whether it is factory generating such Contexts (which is what
https://twistedmatrix.com/documents/current/api/twisted.internet._newtls.ConnectionMixin.html
says, at least I understand it in this way). Is my current
implementation wrong?

Thank you for any answer in advance,

Mat?j

.. _`the current implementation in M2Crypto`:
     https://gitlab.com/m2crypto/m2crypto/blob/python3/M2Crypto/SSL/TwistedProtocolWrapper.py#L231

-- 
https://matej.ceplovi.cz/blog/, Jabber: mcepl at ceplovi.cz
GPG Finger: 3C76 A027 CA45 AD70 98B5  BC1D 7920 5802 880B C9D8
  
To err is human, to purr feline.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 198 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160726/38d1ad81/attachment.pgp>

From glyph at twistedmatrix.com  Mon Jul 25 17:50:29 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 25 Jul 2016 16:50:29 -0700
Subject: [Twisted-Python] Request for help with Twisted bindings in
	M2Crypto
In-Reply-To: <ED96440E-D5AB-4160-BFA6-155ECFD9B865@lukasa.co.uk>
References: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
 <CAG=rPVfJhSZgoVuSoQ93YvkcDA=3kTgaB9wJRwOf9_neiiPPMA@mail.gmail.com>
 <CAKN9TD+_PCK7f90QPsVQp+8jy9HX3Q_TqarQKkmQHuuQ0LctFw@mail.gmail.com>
 <ED96440E-D5AB-4160-BFA6-155ECFD9B865@lukasa.co.uk>
Message-ID: <5FED3CC4-05EF-47E1-9871-2095B793FABE@twistedmatrix.com>


> On Jul 25, 2016, at 5:19 AM, Cory Benfield <cory at lukasa.co.uk> wrote:
> 
> Well, at this point I should argue that _threads, being prefixed by an underscore, is technically a private module to Twisted. That means that, realistically, you shouldn?t really need to consult this *at all*: if anyone outside of Twisted is using IWorker then they?re taking their life into their own hands. That largely argues for part 2, though modern Twisted development practice would still require that we document types and interfaces (see https://twistedmatrix.com/documents/current/api/twisted.web._http2.H2Connection.html <https://twistedmatrix.com/documents/current/api/twisted.web._http2.H2Connection.html>, for example).

However, we do still recognize that the presentation of said private documentation to end-users in apparently the same way as public documentation is a problem.  You can track that here: <https://github.com/twisted/pydoctor/issues/49>.  Some of the things there have been done, but we need to complete it.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160725/636ec563/attachment.html>

From jlitzingerdev at gmail.com  Mon Jul 25 22:43:30 2016
From: jlitzingerdev at gmail.com (Jason Litzinger)
Date: Mon, 25 Jul 2016 22:43:30 -0600
Subject: [Twisted-Python] RFC: IPv6 multicast join/ticket 6597
Message-ID: <20160726044330.GA8172@jlitzing-dell>


Hello,

I'm looking at making the changes to support IPv6 multicast groups as described
in ticket 6597 but wanted to get some feedback (and get a feel whether this is
even desirable) before formally submitting any patches.

Specifically:

1.  I've read [1] and it alludes to udp hopefully disappearing, is that something in the
    works?  Is there a new approach to solving this problem I should look at?  A
    branch in the works where this (conceptual) change belongs?

    Note:  The addressFamily attribute referenced already exists and is set
           properly for IPv6.

2.  The attached change has the side effect that calls to ReactorBase.resolve()
    with IPv6 literals will now likely succeed where they may have failed in the
    past.  That means clients counting on resolve raising an exception for an
    IPv6 literal will break.  Not sure whether this is considered a
    compatibility issue, but I wanted to raise it.

3.  One alternative to the above would be a complete API separation, via
    something like joinIPv6Group(), and a new resolve.  Is that more appealing
    in this case?

Caveats:

1.  I have not finished all of the documentation related to developers, I will
    do so prior to formal submission.

2.  I know I need tests and docs and will submit them with the final changes.

On to the patches.  With these changes, I can use the joinGroup API to add
myself to an IPv6 multicast group on Linux (verified via /proc/net/igmp6).
Additionally, trial reports the same two failures before and after these changes
(twisted.python.test.test_release.APIBuilderTests.test_build and
test_buildWithPolicy).  These changes struck me as the obvious approach, but
given the changes to resolve, not necessarily the best.


diff --git a/twisted/internet/base.py b/twisted/internet/base.py
index 4f2c862..e813741 100644
--- a/twisted/internet/base.py
+++ b/twisted/internet/base.py
@@ -567,6 +567,8 @@ class ReactorBase(object):
             return defer.succeed('0.0.0.0')
         if abstract.isIPAddress(name):
             return defer.succeed(name)
+        elif abstract.isIPv6Address(name):
+            return defer.succeed(name)
         return self.resolver.getHostByName(name, timeout)
 
     # Installation.
diff --git a/twisted/internet/udp.py b/twisted/internet/udp.py
index b5a5322..210b079 100644
--- a/twisted/internet/udp.py
+++ b/twisted/internet/udp.py
@@ -485,7 +485,10 @@ class MulticastMixin:
 
 
     def _joinAddr1(self, addr, interface, join):
-        return self.reactor.resolve(interface).addCallback(self._joinAddr2, addr, join)
+        if self.addressFamily == socket.AF_INET:
+            return self.reactor.resolve(interface).addCallback(self._joinAddr2, addr, join)
+        else:
+            return self.reactor.resolve(interface).addCallback(self._joinAddrIPv6, addr, join)
 
 
     def _joinAddr2(self, interface, addr, join):
@@ -500,6 +503,18 @@ class MulticastMixin:
         except socket.error as e:
             return failure.Failure(error.MulticastJoinError(addr, interface, *e.args))
 
+    def _joinAddrIPv6(self, interface, addr, join):
+        addr = socket.inet_pton(socket.AF_INET6, addr)
+        interface = socket.inet_pton(socket.AF_INET6, interface)
+        if join:
+            cmd = socket.IPV6_JOIN_GROUP
+        else:
+            cmd = socket.IPV6_LEAVE_GROUP
+        try:
+            self.socket.setsockopt(socket.IPPROTO_IPV6, cmd, addr + interface)
+        except socket.error as e:
+            return failure.Failure(error.MulticastJoinError(addr, interface, *e.args))
+
 
     def leaveGroup(self, addr, interface=""):
         """Leave multicast group, return Deferred of success."""


This does require the client specify the interface argument when calling
joinGroup, e.g. self.transport.joinGroup("ff02::1", interface="::").

Thanks in advance for any feedback!

-Jason Litzinger


[1] http://twistedmatrix.com/pipermail/twisted-python/2016-March/030188.html


From glyph at twistedmatrix.com  Tue Jul 26 00:05:17 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 25 Jul 2016 23:05:17 -0700
Subject: [Twisted-Python] Request for help with Twisted bindings in
	M2Crypto
In-Reply-To: <CAKN9TD+_PCK7f90QPsVQp+8jy9HX3Q_TqarQKkmQHuuQ0LctFw@mail.gmail.com>
References: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
 <CAG=rPVfJhSZgoVuSoQ93YvkcDA=3kTgaB9wJRwOf9_neiiPPMA@mail.gmail.com>
 <CAKN9TD+_PCK7f90QPsVQp+8jy9HX3Q_TqarQKkmQHuuQ0LctFw@mail.gmail.com>
Message-ID: <AFC57424-CA61-4587-986F-261BE3A8786B@twistedmatrix.com>


> On Jul 25, 2016, at 3:10 AM, Daniel Sank <sank.daniel at gmail.com> wrote:
> 
> I realize this is not the main point of this thread, but I'd like to make a comment regarding Twisted being opaque.
> 
> > Twisted is open source, so none of the data types are opaque.
> 
> That's a non sequitur. A bunch of open source text in a language you don't understand is opaque, or perhaps better called "obscure". Among other things, Twisted's use of interfaces makes the code very hard to understand.

This is not the first time that someone has made this comment, and I find it very discouraging.

An interface is a very simple concept - an abstract description of what an object is expected to provide if you're going to do something useful with it.  As a specific programmatic instantiation of this concept, zope.interface provides us with two chief advantages, one purely informational and one useful at run-time.  The informational one is that rather than saying "this parameter must provide four methods, the first of which is makeConnection, the second of which is (optionally) connectionMade, the third of which is dataReceived, the fourth of which is connectionLost, which take parameters, respectively,..." we can say "@type: L{IProtocol} provider".  The programmatic advantage is that we can ask the question directly; not 'do you have attributes with these names' or 'does this function signature match', but IProtocol.providedBy(something), which asks if 'something' even _intends_ to implement all the relevant functionality described by IProtocol.

In my view, interface definition is the primary activity of software development; deciding how the pieces of the system fit together and precisely describing what they do.  The fact that so many people seem to find either the basic idea of an abstract type, or the concrete instantiation of that idea in the Zope Interface library, so horribly confusing, makes me despair of ever communicating the actually hard stuff that Twisted gets up to in its internals.

The main thing that I have heard in the past about what makes interfaces confusing is that people want to trace through the implementation to see what twisted is 'really doing', and the fact that there is -more than one- implementation of a method like 'listenTCP' is the source of the real confusion, underlying the problem with "interfaces".  But, that's the whole point: 'listenTCP' is an abstract concept.  The better parts of twisted are _more_ abstract, like 'IStreamServerEndpoint.listen', which has dozens of implementations rather than just 3 or 4, or Deferred.callback, which might do anything at all - if the callback chain did one specific thing there would hardly be any point.

So, this is more just an emotional appeal from me, than anything the project needs, but I would very much like to understand *what* is so confusing about "interfaces".  Is it, as Cory posited, just that the documentation is not properly linked?  Or is it that the average Python developer needs a gentle introduction to the entire idea of abstract rather than concrete types?  If they do - is it really Twisted's responsibility to provide it to them?  Should Zope Interface just have a snazzier website?

> > Twisted is probably the best open source project I have worked with
> > in terms of having documentation which is generated from the code
> 
> I agree that the documentation is generally excellent and that the tests coverage is similarly excellent. However, I still find large fractions of the code very hard to comprehend. A while ago I made a serious effort to understand PB and fix some bugs, but the interface stuff combined with some very odd contortions of python class innards eventually lead me to give up. This is despite the friendly helpful attitude of the main developers both here and in IRC (seriously, thanks everyone for your help back then!).

Given that Twisted is often translating network protocol data into Python method calls, one needs both a working domain knowledge of the protocol involved and a robust understanding of Python metaprogramming constructs.  It sounds here like where you fell down was mostly in the "Python metaprogramming" area, where PB is especially intense.  Unfortunately, framework code just looks like that (the inner guts of Django are similarly, if not more, obscure, for example); it's not especially specific to Twisted.

Don't get me wrong, Python metaprogramming _is_ hard.  It's something that I know pretty well, but I can recognize that each additional layer of indirection is additional complexity for someone to learn, and metaprogramming is by definition at least 3 layers indirected from your actual problem.  But it's also not really specific to Twisted either.  This is another case where I'm not sure what to do except to refer people to the language reference and tell them to work through it slowly.

> I just randomly clicked through the docs to this: https://twistedmatrix.com/documents/current/api/twisted._threads.IWorker.html <https://twistedmatrix.com/documents/current/api/twisted._threads.IWorker.html>
> 
> Note that:
> 
> 1. It is an interface, and I still don't _really_ understand what that means in Twisted.

The interface stuff in Twisted is a wholly separate library, 'zope.interface'.  You can read its documentation - both narrative tutorials and API documentation - here:

https://docs.zope.org/zope.interface/README.html

This is referenced by the Twisted documentation which Cory referred to earlier, but I think it would be helpful to call that out specifically - you can read about interfaces completely separate from Twisted.  They don't mean anything special within Twisted itself (beyond our addition of registerAdapter, which is used less and less often in modern Twisted apps).

> 2. I have no idea what a "task" is. I realize this is python and yay duck-typing but not specifying the expected behavior of an argument seems like a big omission.

Did you miss the part where it said "type: 0-argument callable" in the documentation?  The expected behavior of the argument is that it is a thing that can be called, and it takes 0 arguments.  Its return value is unspecified because IWorker providers aren't allowed to use its return value.

> So, while the Twisted docs are great, consider not faulting people for being confused/daunted.

I don't want to fault people, and there are many issues we can address within Twisted's documentation.  For example, culling things from the API documentation and presenting it as it is really intended to be consumed, eliding private methods that have underscores or live in test_* packages to present a smaller surface, improving tutorial documentation, and so on.  It's not entirely the user's fault.

But certain things - the fact that we might have an abstract interface with multiple concrete implementations, for example - are inherent parts of the problem domain that Twisted is trying to address, and this is what Interfaces let us express.  When people have said things like "Twisted's use of interfaces makes 

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160725/933fed60/attachment-0001.html>

From glyph at twistedmatrix.com  Tue Jul 26 00:28:23 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 25 Jul 2016 23:28:23 -0700
Subject: [Twisted-Python] Parameters of
	twisted.internet.interfaces.ITLSTransport [Was: Re: Request
	for help with Twisted bindings in M2Crypto]
In-Reply-To: <20160725230244.GA26728@mitmanek.redhat.com>
References: <20160725230244.GA26728@mitmanek.redhat.com>
Message-ID: <517A02D1-67EE-4E92-8EA8-A5DFA859C5D4@twistedmatrix.com>


> On Jul 25, 2016, at 16:02, Mat?j Cepl <mcepl at cepl.eu> wrote:
> 
> On 2016-07-25, 09:33 GMT, Craig Rodrigues wrote:
>> Earlier this year, I contributed lots of patches to you in M2Crypto to port
>> it to py3k.
>> Now I have shifted efforts to Twisted, where in the past month I have
>> contributed hundreds of patches to help improve py3k support in Twisted.
> 
> Hi,
> 
> can I for a piece of advice on the documentation.
> M2Crypto.SSL.TwistedProtocolWrapper.TLSProtocolWrapper.startTLS
> implements ITLSTransport.startTLS interace method, which first parameter
> is called ``ctx`` and in `the current implementation in M2Crypto`_ it is of
> type control of SSL Context (that's M2Crypto.SSL.Context.Context) or
> whether it is factory generating such Contexts (which is what
> https://twistedmatrix.com/documents/current/api/twisted.internet._newtls.ConnectionMixin.html
> says, at least I understand it in this way). Is my current
> implementation wrong?

Technically speaking, your implementation is wrong because it claims to implement <https://twistedmatrix.com/documents/16.3.0/api/twisted.internet.interfaces.ITLSTransport.html>, which documents the method startTLS <https://twistedmatrix.com/documents/16.3.0/api/twisted.internet.interfaces.ITLSTransport.html#startTLS> to accept a `contextFactory? which is a provider of either <https://twistedmatrix.com/documents/16.3.0/api/twisted.internet.interfaces.IOpenSSLClientConnectionCreator.html> or <https://twistedmatrix.com/documents/16.3.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html>.  Both of these interfaces return pyOpenSSL-specific objects.  If you want to do TLS with M2Crypto, you must therefore give up on supporting any of Twisted's interfaces directly, because (for example) optionsForClientTLS <https://twistedmatrix.com/documents/16.3.0/api/twisted.internet.ssl.html#optionsForClientTLS> is not going to work with your implementation, since you don't call clientConnectionForTLS on it.

If you want to provide TLS purely with M2Crypto, then you should have interfaces which describe exactly how it should work with M2Crypto.  You can make it take a concrete context if you want, or a factory, whichever makes sense for how you're going to set it up.  Personally my recommendation would be to go in the direction that Twisted itself has been moving and pass a thing that can create Connection objects (or, in OpenSSL-speak, an "SSL*", or in M2Crypto, an _SSLProxy(ssl_new())).  No existing Twisted code which is going to call startTLS() can be made to work with these interfaces without extensive monkey-patching, and even then, anything which expects to be able to cut in at the OpenSSL layer will break.

Basically, Twisted doesn't have a mechanism for abstracting away the TLS backend yet.  I'd really like it if it did!  If you want M2Crypto to be able to do what it's currently trying to do, you could contribute code to Twisted to make things like optionsForClientTLS more abstract, and to isolate the TLS implementation more closely to the TLS wrapper factory.  This would make it easier to adopt Cryptography's TLS API eventually, which is what we'll need to do as pyOpenSSL eventually becomes less relevant.

This is still several years away, of course.  But it would be nice to have some help getting there in advance.

-glyph

From sank.daniel at gmail.com  Tue Jul 26 01:26:44 2016
From: sank.daniel at gmail.com (Daniel Sank)
Date: Tue, 26 Jul 2016 00:26:44 -0700
Subject: [Twisted-Python] Request for help with Twisted bindings in
	M2Crypto
In-Reply-To: <AFC57424-CA61-4587-986F-261BE3A8786B@twistedmatrix.com>
References: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
 <CAG=rPVfJhSZgoVuSoQ93YvkcDA=3kTgaB9wJRwOf9_neiiPPMA@mail.gmail.com>
 <CAKN9TD+_PCK7f90QPsVQp+8jy9HX3Q_TqarQKkmQHuuQ0LctFw@mail.gmail.com>
 <AFC57424-CA61-4587-986F-261BE3A8786B@twistedmatrix.com>
Message-ID: <CAKN9TDJ8TX1r5AqZfoochxkw_UEEYSdKBNvpXM5=aHAhA6K3+Q@mail.gmail.com>

Glyph,

>> 2. I have no idea what a "task" is. I realize this is python and yay
duck-typing but not
>> specifying the expected behavior of an argument seems like a big
omission.

> Did you miss the part where it said "type: 0-argument callable" in the
documentation?

Yes :(

I can only guess that I missed it because the type is defined near the end
of the description line, whereas I'm used to seeing

def foo(x, y):
    """Do something.

    Args:
        x (int): blah blah
        y (banana): yadda yadda
    """

FWIW, now that I look at the code, the type specification is way more
visually apparent there than it is in the generated HTML.

tl,dr: I take it all back and thanks for pointing out the obvious.

> An interface is a very simple concept - an abstract description of what
an object is expected
> to provide if you're going to do something useful with it.

Indeed, a general understanding of interfaces is not the problem.

> In my view, interface definition is the primary activity of software
development

Agreed 100%.

> The fact that so many people seem to find either the basic idea of an
abstract type, or the concrete
> instantiation of that idea in the Zope Interface library, so horribly
confusing, makes me despair of
> ever communicating the actually *hard* stuff that Twisted gets up to in
its internals.

> I would very much like to understand *what* is so confusing about
"interfaces".  Is it, as Cory posited,
> just that the documentation is not properly linked?  Or is it that the
average Python developer needs
> a gentle introduction to the entire idea of abstract rather than concrete
types?  If they do - is it really
> Twisted's responsibility to provide it to them?  Should Zope Interface
just have a snazzier website?

Some years ago when I tried to understand Twisted's use of interfaces via
Twisted's own documentation (which included something about hair dryers and
voltage standards) I was puzzled by the fact that the examples didn't
really show me how to solve a useful problem (or I was too stupid to
understand that the examples did in fact do that) *despite the fact that I
knew what an interface was in general terms*. It was a case of
understanding the intent but none of the examples. A brief look at the zope
documentation just now makes me think the situation has improved.

The other problem was that interfaces were sprinkled somewhat haphazardly
around the code I was trying to understand (perspective broker) and it was
just plain hard to keep navigating around the code files to understand who
was implementing what interfaces. This could have been my own fault for not
having a editor set up. I don't know.

> Should Zope Interface just have a snazzier website?

I think the real issue is the need for compelling and simple examples.

- Daniel


P.S. Everything below here is completely off topic of this thread and I
probably shouldn't have written it.

> Given that Twisted is often translating network protocol data into Python
method calls, one needs both
> a working domain knowledge of the protocol involved and a robust
understanding of Python
> metaprogramming constructs.  It sounds here like where you fell down was
mostly in the "Python
> metaprogramming" area, where PB is especially intense.

> But it's also not really specific to Twisted either.  This is another
case where I'm not sure what to do
> except to refer people to the language reference and tell them to work
through it slowly.

> Unfortunately, framework code just looks like that

I spent a considerable amount of time reading the PB code, reproducing
parts of it myself, and talking to people on IRC and the mailing list to
understand a particularly weird issue in PB. See here for the bug I was
trying to fix (note in particular my first comment to the one existing
answer):

http://stackoverflow.com/questions/23421423/why-are-dummy-objects-created-in-twisteds-pb-system

I distinctly recall that near the end of my efforts you (Glyph) or someone
else more or less told me that the PB code was old, horrible, and that the
issues I was trying to understand were probably incidental complexity due
to poor design etc. You guys were joking around on IRC about how ridiculous
all the dummy object construction is. So, I think this *particular*
incident was
less due a lack of understanding of python metaprogramming and more due to
PB having some bizarre warts.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160726/6fd03167/attachment.html>

From glyph at twistedmatrix.com  Tue Jul 26 01:41:08 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 26 Jul 2016 00:41:08 -0700
Subject: [Twisted-Python] Request for help with Twisted bindings in
	M2Crypto
In-Reply-To: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
References: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
Message-ID: <62C21C48-86AA-4270-A0BA-0BFC78275D09@twistedmatrix.com>

> On Jul 25, 2016, at 02:03, Mat?j Cepl <mcepl at cepl.eu> wrote:
> 
> 3) Moreover, I would like to know how much interest there is in
> maintaining the M2Crypto module for Twisted. I got some hope from
> http://twistedmatrix.com/trac/wiki/TransportLayerSecurity <http://twistedmatrix.com/trac/wiki/TransportLayerSecurity> which seems
> like there is an interest in more complete OpenSSL bindings,

That is a very old wiki page.  I will delete it to avoid confusing people in the future!  Not only has pyOpenSSL had complete enough bindings to implement the feature described on that wiki page for several years now (a Twisted developer, Jean-Paul Calderone, actually took over maintenance of pyOpenSSL expressly for the purpose of adding those APIs), we actually implemented the TLS implementation based on those APIs <https://github.com/twisted/twisted/blob/trunk/twisted/internet/_newtls.py <https://github.com/twisted/twisted/blob/trunk/twisted/internet/_newtls.py>> in 2011, and fully finished transitioning to that new API in 2014 <https://github.com/twisted/twisted/commit/ee2070fe9e3f539ff702d9ff133aafa33ea19ac5> when we deleted the older, SSLSocket based API.

> but OTOH I see on the list that Twisted now seems to use more and more of
> Cryptography (why in the world somebody made such confusing name of
> their project ...).

The choice of name is intentional: it is designed to convey a sense of authoritativeness.  I.e. if you need cryptography in Python, you should 'import cryptography', and ignore everything else.  The Cryptography project specifically calls out M2Crypto, PyCrypto, and PyOpenSSL as having problems and lacking maintenance: <https://cryptography.io/en/latest/#why-a-new-crypto-library-for-python <https://cryptography.io/en/latest/#why-a-new-crypto-library-for-python>>.  pyOpenSSL is now just a thin wrapper over Cryptography itself, and PyCrypto's maintainer now generally suggests Cryptography <https://github.com/dlitz/pycrypto/issues/158#issuecomment-140833926 <https://github.com/dlitz/pycrypto/issues/158#issuecomment-140833926>>.  So it is 2/3 of the way to achieving its goal of eliminating these libraries which duplicate so much effort - M2Crypto is all that remains :).

> Obviously the most simple way for me to be cutting
> Twisted module from M2Crypto and let it be (although I am afraid I have
> still some legacy users who would like to see it maintained, and given
> that the legacy support is still the most important reason for
> maintaining M2Crypto, I don't want to give up lightly).

I do not want to denigrate the work you've done maintaining a legacy library.  I think it's noble to take on this kind of work.  But if you don't have any particular reason for needing to maintain this library beyond "legacy support", and it is not different from Cryptography in any meaningful way, the best thing that you could do for its existing users would be to do the same thing that was done with pyOpenSSL: make it a thin wrapper over the bindings layer in Cryptography, get rid of all of the SWIG code in M2Crypto, and start gently directing users in the direction of Cryptography for any new code.  This would get everyone onto a supported base platform for their security primitives, allow them to share code with other parts of large systems that already use Cryptography or pyOpenSSL, and provide a well-maintained path forward.

M2Crypto's main claim to superiority in past years was its higher degree of completeness of OpenSSL APIs, but Cryptography has since far surpassed it.  Even if there are some APIs that Cryptography's bindings layer doesn't export, it's easier and safer to add more bindings there than in M2Crypto.

Even if you're not going to get rid of M2Crypto entirely, M2Crypto's implementation of Twisted TLS copies the terrible no-security defaults it inherits from OpenSSL, the same ones that Twisted had 5 years ago, and Twisted has moved on to have actual security (certificate verification, service identity, and trust root configuration).  We also continue to improve that security regularly.  Given all that, this is a rare case where I would not mind seeing Twisted support disappear from a library.  Unless I were to get some new information I would have to very strongly discourage anyone who wanted to use the SSL backend in M2Crypto.  I realize you have users, but possibly the best thing you could do for their own good would be to force them to move to Twisted's much better native TLS support, which thankfully is easy to adopt at this point.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160726/303e9658/attachment-0001.html>

From glyph at twistedmatrix.com  Tue Jul 26 01:57:29 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 26 Jul 2016 00:57:29 -0700
Subject: [Twisted-Python] RFC: IPv6 multicast join/ticket 6597
In-Reply-To: <20160726044330.GA8172@jlitzing-dell>
References: <20160726044330.GA8172@jlitzing-dell>
Message-ID: <4608F909-EE03-401B-A898-BAC3D3CBB35B@twistedmatrix.com>


> On Jul 25, 2016, at 9:43 PM, Jason Litzinger <jlitzingerdev at gmail.com> wrote:
> 
> 
> Hello,
> 
> I'm looking at making the changes to support IPv6 multicast groups as described
> in ticket 6597 but wanted to get some feedback (and get a feel whether this is
> even desirable) before formally submitting any patches.

Thanks for taking this up!

> Specifically:
> 
> 1.  I've read [1] and it alludes to udp hopefully disappearing, is that something in the
>    works?  Is there a new approach to solving this problem I should look at?  A
>    branch in the works where this (conceptual) change belongs?
> 
>    Note:  The addressFamily attribute referenced already exists and is set
>           properly for IPv6.

'twisted.internet.udp', as an importable module; not 'udp' as a feature of Twisted (or of the Internet, for that matter).  

> 2.  The attached change has the side effect that calls to ReactorBase.resolve()
>    with IPv6 literals will now likely succeed where they may have failed in the
>    past.  That means clients counting on resolve raising an exception for an
>    IPv6 literal will break.  Not sure whether this is considered a
>    compatibility issue, but I wanted to raise it.

We have explicitly avoided adding IPv6 name resolution to the reactor because the reactor's API for name resolution is fundamentally the wrong shape for IPv6.  If you want to add the ability to resolve IPv6 names to the reactor itself, please see this ticket: https://twistedmatrix.com/trac/ticket/4362 <https://twistedmatrix.com/trac/ticket/4362>

For the purposes of this ticket alone, you should probably just skip resolution in _joinAddr1 if resolution is 

> 3.  One alternative to the above would be a complete API separation, via
>    something like joinIPv6Group(), and a new resolve.  Is that more appealing
>    in this case?

Given what we've done with connectTCP et. al., it makes sense to leave 'joinGroup' as the API for doing this.  But we probably want to leave '.resolve' alone.

> Caveats:
> 
> 1.  I have not finished all of the documentation related to developers, I will
>    do so prior to formal submission.

I think we can do the narrative docs in a separate PR, as the interface looks like the straightforward expansion of the IPv4 interface.  You should clean up the reference documentation (i.e. docstrings) to ensure they're accurate of course.

> 2.  I know I need tests and docs and will submit them with the final changes.

Testing multicast is ... challenging.  I barely have any idea how to set up a test environment for IPv4, and no idea what to do for IPv6.  If you can speak to this in your tests (and hopefully docs as well) that would be super helpful.

> On to the patches.  With these changes, I can use the joinGroup API to add
> myself to an IPv6 multicast group on Linux (verified via /proc/net/igmp6).
> Additionally, trial reports the same two failures before and after these changes
> (twisted.python.test.test_release.APIBuilderTests.test_build and
> test_buildWithPolicy).  These changes struck me as the obvious approach, but
> given the changes to resolve, not necessarily the best.
> 
> 
> diff --git a/twisted/internet/base.py b/twisted/internet/base.py
> index 4f2c862..e813741 100644
> --- a/twisted/internet/base.py
> +++ b/twisted/internet/base.py
> @@ -567,6 +567,8 @@ class ReactorBase(object):
>             return defer.succeed('0.0.0.0')
>         if abstract.isIPAddress(name):
>             return defer.succeed(name)
> +        elif abstract.isIPv6Address(name):
> +            return defer.succeed(name)
>         return self.resolver.getHostByName(name, timeout)
> 
>     # Installation.
> diff --git a/twisted/internet/udp.py b/twisted/internet/udp.py
> index b5a5322..210b079 100644
> --- a/twisted/internet/udp.py
> +++ b/twisted/internet/udp.py
> @@ -485,7 +485,10 @@ class MulticastMixin:
> 
> 
>     def _joinAddr1(self, addr, interface, join):
> -        return self.reactor.resolve(interface).addCallback(self._joinAddr2, addr, join)
> +        if self.addressFamily == socket.AF_INET:
> +            return self.reactor.resolve(interface).addCallback(self._joinAddr2, addr, join)
> +        else:
> +            return self.reactor.resolve(interface).addCallback(self._joinAddrIPv6, addr, join)
> 
> 
>     def _joinAddr2(self, interface, addr, join):
> @@ -500,6 +503,18 @@ class MulticastMixin:
>         except socket.error as e:
>             return failure.Failure(error.MulticastJoinError(addr, interface, *e.args))
> 
> +    def _joinAddrIPv6(self, interface, addr, join):
> +        addr = socket.inet_pton(socket.AF_INET6, addr)
> +        interface = socket.inet_pton(socket.AF_INET6, interface)
> +        if join:
> +            cmd = socket.IPV6_JOIN_GROUP
> +        else:
> +            cmd = socket.IPV6_LEAVE_GROUP
> +        try:
> +            self.socket.setsockopt(socket.IPPROTO_IPV6, cmd, addr + interface)
> +        except socket.error as e:
> +            return failure.Failure(error.MulticastJoinError(addr, interface, *e.args))
> +
> 
>     def leaveGroup(self, addr, interface=""):
>         """Leave multicast group, return Deferred of success."""
> 
> 
> This does require the client specify the interface argument when calling
> joinGroup, e.g. self.transport.joinGroup("ff02::1", interface="::").
> 
> Thanks in advance for any feedback!
> 
> -Jason Litzinger
> 
> 
> [1] http://twistedmatrix.com/pipermail/twisted-python/2016-March/030188.html
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160726/e52151af/attachment.html>

From glyph at twistedmatrix.com  Tue Jul 26 02:18:41 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 26 Jul 2016 01:18:41 -0700
Subject: [Twisted-Python] Request for help with Twisted bindings in
	M2Crypto
In-Reply-To: <CAKN9TDJ8TX1r5AqZfoochxkw_UEEYSdKBNvpXM5=aHAhA6K3+Q@mail.gmail.com>
References: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
 <CAG=rPVfJhSZgoVuSoQ93YvkcDA=3kTgaB9wJRwOf9_neiiPPMA@mail.gmail.com>
 <CAKN9TD+_PCK7f90QPsVQp+8jy9HX3Q_TqarQKkmQHuuQ0LctFw@mail.gmail.com>
 <AFC57424-CA61-4587-986F-261BE3A8786B@twistedmatrix.com>
 <CAKN9TDJ8TX1r5AqZfoochxkw_UEEYSdKBNvpXM5=aHAhA6K3+Q@mail.gmail.com>
Message-ID: <2BD68CE7-2326-4975-87E9-CE0C16E07902@twistedmatrix.com>


> On Jul 26, 2016, at 12:26 AM, Daniel Sank <sank.daniel at gmail.com> wrote:
> 
> Glyph,
> 
> >> 2. I have no idea what a "task" is. I realize this is python and yay duck-typing but not
> >> specifying the expected behavior of an argument seems like a big omission.
> 
> > Did you miss the part where it said "type: 0-argument callable" in the documentation?
> 
> Yes :(
> 
> I can only guess that I missed it because the type is defined near the end of the description line, whereas I'm used to seeing
> 
> def foo(x, y):
>     """Do something.
> 
>     Args:
>         x (int): blah blah
>         y (banana): yadda yadda
>     """
> 
> FWIW, now that I look at the code, the type specification is way more visually apparent there than it is in the generated HTML.
> 
> tl,dr: I take it all back and thanks for pointing out the obvious.

This does at least point to a real problem with pydoctor in the way it presents types.  It should probably put them in their own colored box, not use the string 'type' or parentheses to offset them, and put the type closer to (rather than farther from) the parameter name.  Would you mind filing a bug on pydoctor?  Or commenting on one if it already exists? :)

> > An interface is a very simple concept - an abstract description of what an object is expected
> > to provide if you're going to do something useful with it.
> 
> Indeed, a general understanding of interfaces is not the problem.
> 
> > In my view, interface definition is the primary activity of software development
> 
> Agreed 100%.

OK.  Glad to hear it.

> > The fact that so many people seem to find either the basic idea of an abstract type, or the concrete
> > instantiation of that idea in the Zope Interface library, so horribly confusing, makes me despair of
> > ever communicating the actually hard stuff that Twisted gets up to in its internals.
> 
> > I would very much like to understand *what* is so confusing about "interfaces".  Is it, as Cory posited,
> > just that the documentation is not properly linked?  Or is it that the average Python developer needs
> > a gentle introduction to the entire idea of abstract rather than concrete types?  If they do - is it really
> > Twisted's responsibility to provide it to them?  Should Zope Interface just have a snazzier website?
> 
> Some years ago when I tried to understand Twisted's use of interfaces via Twisted's own documentation (which included something about hair dryers and voltage standards) I was puzzled by the fact that the examples didn't really show me how to solve a useful problem (or I was too stupid to understand that the examples did in fact do that) despite the fact that I knew what an interface was in general terms. It was a case of understanding the intent but none of the examples.

OK... it's a fair cop.  That documentation is not the best.  Among other things, it's mainly trying to explain adaptation, which sort of puts the cart before the horse, and automatic adaptation is increasingly considered spooky action-at-a-distance within Twisted code.  You can see it here: <http://twisted.readthedocs.io/en/latest/core/howto/components.html <http://twisted.readthedocs.io/en/latest/core/howto/components.html>>.

You're the perfect person to submit patches against this doc, by the way, since you have a firm grasp of the whole "abstract interface" thing but also found it confusing.  Personally, I find the examples very clear - I say the documentation is "not the best" because I could see how it could confuse somebody _else_, but it doesn't confuse _me_ at all, so it's a bit hard for me to improve it (especially incrementally).

> A brief look at the zope documentation just now makes me think the situation has improved.

Well that's good, at least.  perhaps we should link to it more prominently.

> The other problem was that interfaces were sprinkled somewhat haphazardly around the code I was trying to understand (perspective broker) and it was just plain hard to keep navigating around the code files to understand who was implementing what interfaces. This could have been my own fault for not having a editor set up. I don't know.

Setting up your editor to have a 'jump to definition' key definitely helps; but then, it generally helps with any large codebase.  So, hard to say.

> > Should Zope Interface just have a snazzier website?
> 
> I think the real issue is the need for compelling and simple examples.

Do you think it would be better to put things in terms of a concrete Twisted interface, like "IProtocol"?  I am pretty sure these docs were trying to stay away from anything "real" because this is a highly abstract concept that could apply to anything, and when we drag a concrete example in 

> P.S. Everything below here is completely off topic of this thread and I probably shouldn't have written it.

In for a penny...

(We may want to spin out into a different thread for talking about the PB issue, but it looks like this was unresolved for you, and I can definitely shed some more light.)

> > Given that Twisted is often translating network protocol data into Python method calls, one needs both
> > a working domain knowledge of the protocol involved and a robust understanding of Python
> > metaprogramming constructs.  It sounds here like where you fell down was mostly in the "Python
> > metaprogramming" area, where PB is especially intense.
> 
> > But it's also not really specific to Twisted either.  This is another case where I'm not sure what to do
> > except to refer people to the language reference and tell them to work through it slowly.
> 
> > Unfortunately, framework code just looks like that
> 
> I spent a considerable amount of time reading the PB code, reproducing parts of it myself, and talking to people on IRC and the mailing list to understand a particularly weird issue in PB. See here for the bug I was trying to fix (note in particular my first comment to the one existing answer):
> 
> http://stackoverflow.com/questions/23421423/why-are-dummy-objects-created-in-twisteds-pb-system <http://stackoverflow.com/questions/23421423/why-are-dummy-objects-created-in-twisteds-pb-system>
> 
> I distinctly recall that near the end of my efforts you (Glyph) or someone else more or less told me that the PB code was old, horrible, and that the issues I was trying to understand were probably incidental complexity due to poor design etc. You guys were joking around on IRC about how ridiculous all the dummy object construction is. So, I think this particular incident was less due a lack of understanding of python metaprogramming and more due to PB having some bizarre warts.

OK.  Maybe I made this sound a bit too simple, but it's still not really Twisted's fault.  The bizarre warts here - and they are definitely here - are mostly an outgrowth of the bizarre mismatch between old-style and new-style classes, and the mad shuffle of random API deprecations, often without suitable replacements, or without suitable portable replacements, within the standard library.

In the old-style world, you had Class objects.  Class objects could be created in a variety of ways, but the Right? way to make a new, empty class that hadn't had its initializer run was 'new.instance'.  Of course, new.instance doesn't work with new-style classes, because now the Right? way to make a new, empty class that hadn't had its initializer run was yourclass.__new__().  Unless of course you overrode __new__, which is totally allowed, so the caller can't know what that signature is supposed to be.  So then you use `object.__new__(yourclass)? in order to get a known signature - but of course that won't work at all with old-style classes.  PB is bridging the gap between these two worlds, and it has to find hacks which work in both and don't draw in any deprecated APIs that are gone in python 3 in order to do it.  This means you can't use the Right? way at all, and instead must resort to contortions which depend on implementation details that happen to be held in common between both new-style and old-style objects.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160726/0263a821/attachment-0001.html>

From glyph at twistedmatrix.com  Tue Jul 26 04:09:41 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 26 Jul 2016 03:09:41 -0700
Subject: [Twisted-Python] Request for help with Twisted bindings in
	M2Crypto
In-Reply-To: <2BD68CE7-2326-4975-87E9-CE0C16E07902@twistedmatrix.com>
References: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
 <CAG=rPVfJhSZgoVuSoQ93YvkcDA=3kTgaB9wJRwOf9_neiiPPMA@mail.gmail.com>
 <CAKN9TD+_PCK7f90QPsVQp+8jy9HX3Q_TqarQKkmQHuuQ0LctFw@mail.gmail.com>
 <AFC57424-CA61-4587-986F-261BE3A8786B@twistedmatrix.com>
 <CAKN9TDJ8TX1r5AqZfoochxkw_UEEYSdKBNvpXM5=aHAhA6K3+Q@mail.gmail.com>
 <2BD68CE7-2326-4975-87E9-CE0C16E07902@twistedmatrix.com>
Message-ID: <CA66239B-E979-43D3-AA02-ACFC4344192A@twistedmatrix.com>


> On Jul 26, 2016, at 1:18 AM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
>> I spent a considerable amount of time reading the PB code, reproducing parts of it myself, and talking to people on IRC and the mailing list to understand a particularly weird issue in PB. See here for the bug I was trying to fix (note in particular my first comment to the one existing answer):
>> 
>> http://stackoverflow.com/questions/23421423/why-are-dummy-objects-created-in-twisteds-pb-system <http://stackoverflow.com/questions/23421423/why-are-dummy-objects-created-in-twisteds-pb-system>
> 

BTW, since this discussion raised this question again, and since I now understand better what I think you were _actually_ asking, I put a new answer on that question. Hopefully it resolves the mystery for you :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160726/187f0927/attachment.html>

From mcepl at cepl.eu  Tue Jul 26 09:43:58 2016
From: mcepl at cepl.eu (=?iso-8859-2?Q?Mat=ECj?= Cepl)
Date: Tue, 26 Jul 2016 17:43:58 +0200
Subject: [Twisted-Python] Request for help with Twisted bindings in
	M2Crypto
In-Reply-To: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
Message-ID: <20160726154357.GA7233@mitmanek.redhat.com>

On 2016-07-26, 07:41 GMT, Glyph Lefkowitz wrote:
> I do not want to denigrate the work you've done maintaining 
> a legacy library.  I think it's noble to take on this kind of 
> work.

I was watching ?A Special Day? (1977) yesterday so I have 
somewhat lesser tolerance for the pompous superiority complex, 
but I will think about your reply and the support for Twisted 
will probably go.

Mat?j

-- 
https://matej.ceplovi.cz/blog/, Jabber: mcepl at ceplovi.cz
GPG Finger: 3C76 A027 CA45 AD70 98B5  BC1D 7920 5802 880B C9D8
 
http://xkcd.com/743/ ? enough said.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 198 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160726/5f51a743/attachment.pgp>

From mcepl at cepl.eu  Tue Jul 26 09:45:25 2016
From: mcepl at cepl.eu (=?iso-8859-2?Q?Mat=ECj?= Cepl)
Date: Tue, 26 Jul 2016 17:45:25 +0200
Subject: [Twisted-Python] Request for help with Twisted bindings in
	M2Crypto
In-Reply-To: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
Message-ID: <20160726154525.GB7233@mitmanek.redhat.com>

On 2016-07-26, 06:05 GMT, Glyph Lefkowitz wrote:
> An interface is a very simple concept

Actually I found 
https://twistedmatrix.com/documents/current/core/howto/components.html 
to be a very good description. Yes, the concept is not that 
complicated, but it is very uncommon in the Pythonic world and 
the experience with M2Crypto and your previous reply seems to 
indicate that even you in the end prefer hard-wiring 
Cryptography to Twisted instead of using your own interfaces.  
Isn?t simple better than complex?

Whatever,

Mat?j

-- 
https://matej.ceplovi.cz/blog/, Jabber: mcepl at ceplovi.cz
GPG Finger: 3C76 A027 CA45 AD70 98B5  BC1D 7920 5802 880B C9D8
 
http://xkcd.com/743/ ? enough said.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 198 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160726/95303ba2/attachment.pgp>

From mcepl at cepl.eu  Tue Jul 26 09:47:10 2016
From: mcepl at cepl.eu (=?iso-8859-2?Q?Mat=ECj?= Cepl)
Date: Tue, 26 Jul 2016 17:47:10 +0200
Subject: [Twisted-Python] Request for help with Twisted bindings in
	M2Crypto
In-Reply-To: <CAG=rPVfJhSZgoVuSoQ93YvkcDA=3kTgaB9wJRwOf9_neiiPPMA@mail.gmail.com>
Message-ID: <20160726154710.GC7233@mitmanek.redhat.com>

On 2016-07-25, 09:55 GMT, Craig Rodrigues wrote:
First of all, thank you very much for all help you gave to 
M2Crypto. However, ...

> I call shenanigans on you.

Nothing of which I have been accused of has anything to do with 
what I meant. When I said ?opaque?, I didn?t mean to offend 
Twisted. Just to say, that while I was marking whole library 
with PEP-484 type hints, I usually dealt with bytes, str, ints, 
and very few rather simple objects. With Twisted I get object

    @implementer(ITLSTransport)
    class TLSProtocolWrapper(ProtocolWrapper):
        def __init__(self, factory, wrappedProtocol, 
                     startPassThrough, client,
                     contextFactory, postConnectionCheck):
            # type: policies.WrappingFactory, object, int, int, object, Checker

(and with those two objects, I don't even dare to guess what 
types these are, and all that covered in some weird decorator 
from Zope (?)).

That's nothing wrong with Twisted, just that it is really 
difficult for idiot like me to understand what's going on.

> If you are unfamiliar with Twisted's code and data types, and 
> don't have the energy to dig in, then be honest about that, 
> but don't accuse Twisted of being "opaque", because it isn't.

I don't think what's dishonest on saying that Twisted API is 
quite complicated and I am stupid enough not understanding 
what's going on.

> Regarding your code example which is failing,
> your code is failing because you are intermixing bytes and strings which is
> a big no-no for Python 3.

Of course I know that (it is not the first place where I have to 
deal with bytes ? str dichotomy in py3k), but in order to 
understand what's going, I have to first understand where these 
values come from and where they run to, i.e., to decipher 
Twisted. Thus I was asking for help.

> If I look at this line for example:
> https://gitlab.com/m2crypto/m2crypto/blob/master/M2Crypto/SSL/TwistedProtocolWrapper.py#L357
>
> I see the code is doing stuff like:
>    data = ''
>    encryptedData = ''
>
> Those are of type str, and need to be of type bytes:
>
>    data = b''
>    encryptedData = b''
>
> You need to clean stuff like that up in your code so that you are only
> using bytes.

I believe I have fixed all I can do without actually 
understanding Twisted in 
https://gitlab.com/mcepl/m2crypto/commit/6cd5f87b31e50016ebb7e44f3f2ae46610bc24e0.  
So now, if Twisted is so transparent and perfectly 
understandable, could you please suggest, what I do wrong, that 
the test ends in the endless loop 
(https://travis-ci.org/mcepl/M2Crypto/builds/147175901)?

Thank you,

Mat?j Cepl

-- 
https://matej.ceplovi.cz/blog/, Jabber: mcepl at ceplovi.cz
GPG Finger: 3C76 A027 CA45 AD70 98B5  BC1D 7920 5802 880B C9D8
 
Never ascribe to malice that which is adequately explained by
stupidity.
    -- Napoleon Bonaparte (or many other people to whom this
       quote is ascribed)

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 198 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160726/0a218800/attachment.pgp>

From sank.daniel at gmail.com  Tue Jul 26 10:37:29 2016
From: sank.daniel at gmail.com (Daniel Sank)
Date: Tue, 26 Jul 2016 09:37:29 -0700
Subject: [Twisted-Python] Pydoc parameter formatting and explaining
	interfaces
Message-ID: <CAKN9TDLPD1quR2XTQ3R0eLzij3Lk=zfQD7Zev7BsUe-zD4JmOw@mail.gmail.com>

This is a branch from the thread with subject "Request for help with
Twisted bindings in M2Crypt".

Regarding my inability to read documentation:

> This does at least point to a real problem with pydoctor in the way it
presents types.
> It should probably put them in their own colored box, not use the string
'type' or
> parentheses to offset them, and put the type closer to (rather than
farther from) the
> parameter name.  Would you mind filing a bug on pydoctor?  Or commenting
on
> one if it already exists? :)

Done: https://github.com/twisted/pydoctor/issues/121

>> Some years ago when I tried to understand Twisted's use of interfaces
via Twisted's
>> own documentation (which included something about hair dryers and
voltage standards)
>> I was puzzled by the fact that the examples didn't really show me how to
solve a useful
>> problem (or I was too stupid to understand that the examples did in fact
do that) despite
>> the fact that I knew what an interface was in general terms. It was a
case of
>> understanding the intent but none of the examples.

> OK... it's a fair cop.

I'm unfamiliar with that term.

> Among other things, it's mainly trying to explain adaptation, which sort
of puts the cart before
> the horse

Yes! That is definitely a big part of the problem. When I think "interface"
I think "methods and their signatures an object promises to provided".
Adaptation is a detail, so to speak. It's also somewhat confusing that the
discussion begins with shapes as it goes over the basic idea of interfaces,
and then switches to hair dryers when it comes time for an example. It
would be easier to read if the examples were more consistent.

> and automatic adaptation is increasingly considered spooky
action-at-a-distance within
> Twisted code.

All the more reason to not use adaptation as the in-your-face example.

> You're the perfect person to submit patches against this doc, by the way,
since you have a
> firm grasp of the whole "abstract interface" thing but also found it
confusing.

Perhaps. On the other hand I think it might be better to replace Twisted's
own documentation with a link to zope's, or at least put the link at the
top and say "read this before reading our examples about adaptation." We'll
see if such a patch receives any love.

--
Daniel Sank
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160726/caa860f0/attachment.html>

From glyph at twistedmatrix.com  Tue Jul 26 11:55:12 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 26 Jul 2016 10:55:12 -0700
Subject: [Twisted-Python] Request for help with Twisted bindings in
	M2Crypto
In-Reply-To: <20160726154357.GA7233@mitmanek.redhat.com>
References: <20160726154357.GA7233@mitmanek.redhat.com>
Message-ID: <779EB6C9-5FCD-4077-AB8F-4BB5C9733D9F@twistedmatrix.com>


> On Jul 26, 2016, at 8:43 AM, Mat?j Cepl <mcepl at cepl.eu> wrote:
> 
> On 2016-07-26, 07:41 GMT, Glyph Lefkowitz wrote:
>> I do not want to denigrate the work you've done maintaining a legacy library.  I think it's noble to take on this kind of work.
> 
> I was watching ?A Special Day? (1977) yesterday so I have somewhat lesser tolerance for the pompous superiority complex,

Despite your quite rude introduction to the mailing list (twisted is "opaque and complicated", "deep magic", learning it is "horribly complicated"), several people (including myself) invested quite a bit of time to try to answer your questions in detail.  And, for taking the trouble to be diplomatic, you have now, as I understand it, made a veiled allegation that I'm a fascist?  If you are not _trying_ to be heinously offensive, perhaps you should stop posting here.

-glyph

From glyph at twistedmatrix.com  Tue Jul 26 11:58:19 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 26 Jul 2016 10:58:19 -0700
Subject: [Twisted-Python] Pydoc parameter formatting and explaining
	interfaces
In-Reply-To: <CAKN9TDLPD1quR2XTQ3R0eLzij3Lk=zfQD7Zev7BsUe-zD4JmOw@mail.gmail.com>
References: <CAKN9TDLPD1quR2XTQ3R0eLzij3Lk=zfQD7Zev7BsUe-zD4JmOw@mail.gmail.com>
Message-ID: <BCE23D2E-D5BB-4A42-9BD5-EC33904DB1D3@twistedmatrix.com>


> On Jul 26, 2016, at 9:37 AM, Daniel Sank <sank.daniel at gmail.com> wrote:
> 
> This is a branch from the thread with subject "Request for help with Twisted bindings in M2Crypt".
> 
> Regarding my inability to read documentation:
> 
> > This does at least point to a real problem with pydoctor in the way it presents types.
> > It should probably put them in their own colored box, not use the string 'type' or
> > parentheses to offset them, and put the type closer to (rather than farther from) the
> > parameter name.  Would you mind filing a bug on pydoctor?  Or commenting on
> > one if it already exists? :)
> 
> Done: https://github.com/twisted/pydoctor/issues/121 <https://github.com/twisted/pydoctor/issues/121>

Thanks!  I especially appreciate the screen shot :).

> >> Some years ago when I tried to understand Twisted's use of interfaces via Twisted's
> >> own documentation (which included something about hair dryers and voltage standards)
> >> I was puzzled by the fact that the examples didn't really show me how to solve a useful
> >> problem (or I was too stupid to understand that the examples did in fact do that) despite
> >> the fact that I knew what an interface was in general terms. It was a case of
> >> understanding the intent but none of the examples.
> 
> > OK... it's a fair cop.
> 
> I'm unfamiliar with that term.

For me it's a monty python reference, but I suspect for most speakers of British English, it's just an idiom :).  It roughly means "mea culpa", although, more specifically, I believe it means "you've caught me doing something bad".

> > Among other things, it's mainly trying to explain adaptation, which sort of puts the cart before
> > the horse
> 
> Yes! That is definitely a big part of the problem. When I think "interface" I think "methods and their signatures an object promises to provided". Adaptation is a detail, so to speak. It's also somewhat confusing that the discussion begins with shapes as it goes over the basic idea of interfaces, and then switches to hair dryers when it comes time for an example. It would be easier to read if the examples were more consistent.
> 
> > and automatic adaptation is increasingly considered spooky action-at-a-distance within
> > Twisted code.
> 
> All the more reason to not use adaptation as the in-your-face example.
> 
> > You're the perfect person to submit patches against this doc, by the way, since you have a
> > firm grasp of the whole "abstract interface" thing but also found it confusing.
> 
> Perhaps. On the other hand I think it might be better to replace Twisted's own documentation with a link to zope's, or at least put the link at the top and say "read this before reading our examples about adaptation." We'll see if such a patch receives any love.

Please direct my attention to it when one exists :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160726/331aafd6/attachment-0001.html>

From meejah at meejah.ca  Tue Jul 26 17:31:24 2016
From: meejah at meejah.ca (meejah)
Date: Wed, 27 Jul 2016 03:31:24 +0400
Subject: [Twisted-Python] txtorcon 0.15.0
Message-ID: <86eg6g0yer.fsf@atlantis.meejah.ca>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I'm happy to announce txtorcon 0.15.0:

 * added support for NULL control-port-authentication which is often
   appropriate when used with a UNIX domain socket
 * switched to https://docs.python.org/3/library/ipaddress.html instead
   of
   Google's ipaddr; the API should be the same from a user
   perspective but **packagers and tutorials** will want to change
   their instructions slightly (``pip install ipaddress`` or ``apt-get
   install python-ipaddress`` are the new ways).
 * support the new ADD_ONION and DEL_ONION "ephemeral hidden services"
   commands in TorConfig
 * a first stealth-authentication implementation (for "normal" hidden
   services, not ephemeral)
 * bug-fix from https://github.com/david415 to raise
   ConnectionRefusedError instead of StopIteration when running out of
   SOCKS ports.
 * new feature from https://github.com/david415 adding a
   ``build_timeout_circuit`` method which provides a Deferred that
   callbacks only when the circuit is completely built and errbacks if
   the provided timeout expires. This is useful because
   :doc:`TorState.build_circuit` callbacks as soon as a Circuit
   instance can be provided (and then you'd use
   :doc:`Circuit.when_built` to find out when it's done building).
 * new feature from https://github.com/coffeemakr
   falling back to password authentication if cookie authentication
   isn't available (or fails, e.g. because the file isn't readable).
 * both TorState and TorConfig now have a ``.from_protocol``
   class-method.
 * spec-compliant string-un-escaping from https://github.com/coffeemakr
 * fix https://github.com/meejah/txtorcon/issues/176

You can download the release from PyPI or GitHub (or of
course "pip install txtorcon"):

   https://pypi.python.org/pypi/txtorcon/0.15.0
   https://github.com/meejah/txtorcon/releases/tag/v0.15.0

Releases are also available from the hidden service:

   http://timaq4ygg2iegci7.onion/txtorcon-0.15.0.tar.gz
   http://timaq4ygg2iegci7.onion/txtorcon-0.15.0.tar.gz.asc

You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat <<EOF | sha256sum --check
f2e8cdb130aa48d63c39603c2404d9496c669fa8b4c724497ca6bfa7752a9475
dist/txtorcon-0.15.0.tar.gz
a359fb5e560263499400018262494378b3d347cd04a361adb08939df95ecedf6
dist/txtorcon-0.15.0-py2-none-any.whl
EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----

iQEcBAEBAgAGBQJXl/KEAAoJEMJgKAMSgGmn76gH/1du7i9dmkMpr2PJrexVeXSo
9mSaeX/7KKaW71pEMmaCXfvhDJ6dMZDQpZ7saTM31zJZTp+MXjtHf0DZI2QTwgDw
NYEBH+LO8PINN1ezPomgeZE6E4eJYlaDCyO6c7j3cOsEmohST+GPpvvdWdft+Sw2
hWvVf2+I4BV7vcIx6WQx4jKBS2gmlHbxuUv3LAnjj/Tn6oSYpft1IUK39pM66DX4
FzdYeBTloC6nzyH4sRTxnax+l9MfQJ2ZR+5alJi8uEvGlk580ciFASQNCVLaBY9r
4YALoipEg2Fm4BFA7qLsH0aFoLgx0lv7ng8lmpaP7XlPjUCuA7OcDp5jSqhGt2A=
=hWml
-----END PGP SIGNATURE-----


From clayton.daley at gmail.com  Tue Jul 26 17:41:54 2016
From: clayton.daley at gmail.com (Clayton Daley)
Date: Tue, 26 Jul 2016 18:41:54 -0500
Subject: [Twisted-Python] Pydoc parameter formatting and explaining
	interfaces
In-Reply-To: <BCE23D2E-D5BB-4A42-9BD5-EC33904DB1D3@twistedmatrix.com>
References: <CAKN9TDLPD1quR2XTQ3R0eLzij3Lk=zfQD7Zev7BsUe-zD4JmOw@mail.gmail.com>
 <BCE23D2E-D5BB-4A42-9BD5-EC33904DB1D3@twistedmatrix.com>
Message-ID: <CACKEAnXLAagohWCvApby9XCgcGiRGe-Yd2u++kqdNGAksdvN6g@mail.gmail.com>

Speaking just from my own experience, I don't think it's a problem with the
docs per se.  Rather, I think there's often a disconnect between the
answers people are looking for and the nature of Twisted.  It's hard to
explain, but this is the best I can manage:

   - If you're used to using frameworks, interfaces reflect your motives
   when interacting with a library.  To use an audio-video (A/V) analogy, you
   have interfaces like IVolume, IPlayback (play, pause, stop, ff, rew), and
   IChannel. Documentation just "makes sense".
   - Twisted is like a box of electronics parts.  The docs are enough to
   see why IDigital and IAnalog are used by DigitalToAnalogConverter, but
   that's a long way from understanding when you'd even need/care to consume
   something using an IAnalog.
   - There are several layers of architecture between a LineReader and a
   REST library.  If you don't realize these layers exist, it's not obvious
   that you'd need to find/create them in a Twisted app.
   - The (excellent) krondo tutorial is like a small kit that shows you how
   to build a model piece of electronics.  If you want to build a complete A/V
   device, where do you go next?

To make it more concrete for twisted, here's a example of that next step:

   - Start with the chat server example (
   https://twistedmatrix.com/documents/current/_downloads/chatserver.py)
   - To add rooms, you need to introduce a layer of commands (minimally
   JOIN and SEND).  This requires a complete rewrite of the Protocol and I'm
   not aware of any tutorial that helps you make this architectural leap.
   - Maybe Twisted has a class for this so one might search the docs, spend
   lots of time, get really confused, and (tentatively) conclude it's not
   there.  Figuring out that something doesn't exist is especially hard.
   - The authentication example (
   https://twistedmatrix.com/documents/current/core/howto/cred.html)
   actually has a command layer, but key parts of it (i.e. the lineReceived
   call) are buried in the ellipses.  How do you intuit the missing code if
   you don't even realize that you need a commands layer?
   - Of course, to combine auth with chat, you also need to figure out how
   to rewrite the business logic as an IMailbox implementing avatars.  That's
   a LOT of moving pieces to get right at the same time.

When I decided to try out Zend Framework (PHP), their full-stack skeleton
application (
https://docs.zendframework.com/tutorials/getting-started/skeleton-application/)
showed you how everything fit together. Maybe twisted would benefit from
something similar... especially if it emphasized the various architectural
layers by putting the protocol, command handler, and actual business logic
into separate classes.

Clayton Daley

On Tue, Jul 26, 2016 at 12:58 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Jul 26, 2016, at 9:37 AM, Daniel Sank <sank.daniel at gmail.com> wrote:
>
> This is a branch from the thread with subject "Request for help with
> Twisted bindings in M2Crypt".
>
> Regarding my inability to read documentation:
>
> > This does at least point to a real problem with pydoctor in the way it
> presents types.
> > It should probably put them in their own colored box, not use the string
> 'type' or
> > parentheses to offset them, and put the type closer to (rather than
> farther from) the
> > parameter name.  Would you mind filing a bug on pydoctor?  Or commenting
> on
> > one if it already exists? :)
>
> Done: https://github.com/twisted/pydoctor/issues/121
>
>
> Thanks!  I especially appreciate the screen shot :).
>
> >> Some years ago when I tried to understand Twisted's use of interfaces
> via Twisted's
> >> own documentation (which included something about hair dryers and
> voltage standards)
> >> I was puzzled by the fact that the examples didn't really show me how
> to solve a useful
> >> problem (or I was too stupid to understand that the examples did in
> fact do that) despite
> >> the fact that I knew what an interface was in general terms. It was a
> case of
> >> understanding the intent but none of the examples.
>
> > OK... it's a fair cop.
>
> I'm unfamiliar with that term.
>
>
> For *me* it's a monty python reference, but I suspect for most speakers
> of British English, it's just an idiom :).  It roughly means "mea culpa",
> although, more specifically, I believe it means "you've caught me doing
> something bad".
>
> > Among other things, it's mainly trying to explain adaptation, which sort
> of puts the cart before
> > the horse
>
> Yes! That is definitely a big part of the problem. When I think
> "interface" I think "methods and their signatures an object promises to
> provided". Adaptation is a detail, so to speak. It's also somewhat
> confusing that the discussion begins with shapes as it goes over the basic
> idea of interfaces, and then switches to hair dryers when it comes time for
> an example. It would be easier to read if the examples were more consistent.
>
> > and automatic adaptation is increasingly considered spooky
> action-at-a-distance within
> > Twisted code.
>
> All the more reason to not use adaptation as the in-your-face example.
>
> > You're the perfect person to submit patches against this doc, by the
> way, since you have a
> > firm grasp of the whole "abstract interface" thing but also found it
> confusing.
>
> Perhaps. On the other hand I think it might be better to replace Twisted's
> own documentation with a link to zope's, or at least put the link at the
> top and say "read this before reading our examples about adaptation." We'll
> see if such a patch receives any love.
>
>
> Please direct my attention to it when one exists :).
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160726/a9e58af9/attachment.html>

From rodrigc at crodrigues.org  Tue Jul 26 20:19:30 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 26 Jul 2016 19:19:30 -0700
Subject: [Twisted-Python] Fixes for Twisted bindings in M2Crypto
Message-ID: <CAG=rPVejnWDK9g8vQRqBuBPCWcqLFruSYEetc=MoN7938yx2wA@mail.gmail.com>

On Tue, Jul 26, 2016 at 8:47 AM, Mat?j Cepl <mcepl at cepl.eu> wrote:

>
> I believe I have fixed all I can do without actually understanding Twisted
> in
> https://gitlab.com/mcepl/m2crypto/commit/6cd5f87b31e50016ebb7e44f3f2ae46610bc24e0.
> So now, if Twisted is so transparent and perfectly understandable, could
> you please suggest, what I do wrong, that the test ends in the endless loop
> (https://travis-ci.org/mcepl/M2Crypto/builds/147175901)?
>
>

In your initial e-mail, it would have been useful if you could have
provided reproduction steps
for your problem.

Can you provide reproduction steps?

Since I wasn't sure, I took a guess.

I did the following inside a Python 3.6 virtual environment under OS X:

git clone https://gitlab.com/mcepl/m2crypto.git m2crypto_test
cd m2crypto_test
git checkout python3
python setup.py build --openssl=/usr/local/opt/openssl
python setup.py bdist
python setup.py develop

py.test -v -s -k test_twisted_wrapper tests/test_ssl.py

I was able to reproduce the problem with something looping around:

DEBUG:_encrypt:self.data = "b'GET / HTTP/1.0\n\n\r\n'"
DEBUG:_decrypt:self.encrypted = "b''"
DEBUG:_encrypt:self.data = "b'GET / HTTP/1.0\n\n\r\n'"
DEBUG:_decrypt:self.encrypted = "b''"
DEBUG:_encrypt:self.data = "b'GET / HTTP/1.0\n\n\r\n'"
DEBUG:_decrypt:self.encrypted = "b''"
DEBUG:_encrypt:self.data = "b'GET / HTTP/1.0\n\n\r\n'"
DEBUG:_decrypt:self.encrypted = "b''"

I took a look in the M2Crypto code which interfaces with
Twisted, and found that the dataReceived() loop was never terminating
because dataReceived() takes bytes, but the code was
comparing to an emptry str.  So, the loop was never terminating.

I fixed this and other problems, and now the test_twisted_wrapper
passes on Python 3.  I submitted this merge request:

https://gitlab.com/mcepl/m2crypto/merge_requests/3/commits


While I was looking at the code, I also saw that the make_certs.py
utility does not work on Python 3.

I fixed that, and submitted this merge request:

https://gitlab.com/mcepl/m2crypto/merge_requests/4/commits

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160726/ff9caa33/attachment-0001.html>

From jlitzingerdev at gmail.com  Wed Jul 27 00:00:07 2016
From: jlitzingerdev at gmail.com (Jason Litzinger)
Date: Wed, 27 Jul 2016 00:00:07 -0600
Subject: [Twisted-Python] RFC: IPv6 multicast join/ticket 6597
In-Reply-To: <4608F909-EE03-401B-A898-BAC3D3CBB35B@twistedmatrix.com>
References: <20160726044330.GA8172@jlitzing-dell>
 <4608F909-EE03-401B-A898-BAC3D3CBB35B@twistedmatrix.com>
Message-ID: <20160727060007.GA3076@jlitzing-dell>

> 
> Thanks for taking this up!
No problem, do I need to reflect anything in the Ticket to indicate I'm
looking at it?
> 
> 'twisted.internet.udp', as an importable module; not 'udp' as a feature of Twisted (or of the Internet, for that matter).  
My question was poorly phrased, I assumed that it was the module that
was problematic, and wondered if anyone was working on an alternative
where this is better suited.

> 
> We have explicitly avoided adding IPv6 name resolution to the reactor because the reactor's API for name resolution is fundamentally the wrong shape for IPv6.  If you want to add the ability to resolve IPv6 names to the reactor itself, please see this ticket: https://twistedmatrix.com/trac/ticket/4362 <https://twistedmatrix.com/trac/ticket/4362>
> 
> For the purposes of this ticket alone, you should probably just skip resolution in _joinAddr1 if resolution is 

I assume you mean skip resolution in joinGroup as well?  That's the only
way to avoid resolve completely.

Additionally, any objections to me updating setTTL in this patch?  It's
pretty common to set the hop limit when doing a multicast.  Not
required, but common.
> 
> Testing multicast is ... challenging.  I barely have any idea how to set up a test environment for IPv4, and no idea what to do for IPv6.  If you can speak to this in your tests (and hopefully docs as well) that would be super helpful.
> 
Indeed.  I have an interest beyond the scope of this change so I'll see
what I can do/find.

Thanks!
-Jason Litzinger


From glyph at twistedmatrix.com  Wed Jul 27 03:04:31 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 27 Jul 2016 02:04:31 -0700
Subject: [Twisted-Python] txtorcon 0.15.0
In-Reply-To: <86eg6g0yer.fsf@atlantis.meejah.ca>
References: <86eg6g0yer.fsf@atlantis.meejah.ca>
Message-ID: <F4AB21C7-EFC5-4FFC-85A3-287D181CDC1A@twistedmatrix.com>


> On Jul 26, 2016, at 4:31 PM, meejah <meejah at meejah.ca <mailto:meejah at meejah.ca>> wrote:
> 
> I'm happy to announce txtorcon 0.15.0:


Awesome, Meejah!  Keep up the good work :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160727/d809cdd4/attachment.html>

From glyph at twistedmatrix.com  Wed Jul 27 03:14:58 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 27 Jul 2016 02:14:58 -0700
Subject: [Twisted-Python] RFC: IPv6 multicast join/ticket 6597
In-Reply-To: <20160727060007.GA3076@jlitzing-dell>
References: <20160726044330.GA8172@jlitzing-dell>
 <4608F909-EE03-401B-A898-BAC3D3CBB35B@twistedmatrix.com>
 <20160727060007.GA3076@jlitzing-dell>
Message-ID: <28A3C345-0F54-452F-8CA1-901D8E5F839C@twistedmatrix.com>


> On Jul 26, 2016, at 11:00 PM, Jason Litzinger <jlitzingerdev at gmail.com> wrote:
> 
>> 
>> Thanks for taking this up!
> No problem, do I need to reflect anything in the Ticket to indicate I'm
> looking at it?

Nothing specific, although any conclusions drawn on the mailing list, or any specific thoughts you have about how you're going to proceed, are always helpful to record on the ticket for future reference.  Even if you think you're going to get it done in the next couple of days, chances are you'll take an 18 month hiatus in the middle and it's always helpful to have those notes to come back to :).

>> 'twisted.internet.udp', as an importable module; not 'udp' as a feature of Twisted (or of the Internet, for that matter).  
> My question was poorly phrased, I assumed that it was the module that
> was problematic, and wondered if anyone was working on an alternative
> where this is better suited.

The module's implementation is actually fine; the only problem is that it's exposed to third-party applications, and that there are some things that those applications can't achieve without it being so exposed.  We need to make it private, but first, we need to address all the issues like this :).

>> We have explicitly avoided adding IPv6 name resolution to the reactor because the reactor's API for name resolution is fundamentally the wrong shape for IPv6.  If you want to add the ability to resolve IPv6 names to the reactor itself, please see this ticket: https://twistedmatrix.com/trac/ticket/4362 <https://twistedmatrix.com/trac/ticket/4362>
>> 
>> For the purposes of this ticket alone, you should probably just skip resolution in _joinAddr1 if resolution is 
> 
> I assume you mean skip resolution in joinGroup as well?  That's the only
> way to avoid resolve completely.

Right, I meant to check isIPv6Address in joinGroup and everything it calls.

> Additionally, any objections to me updating setTTL in this patch?  It's
> pretty common to set the hop limit when doing a multicast.  Not
> required, but common.

Smaller patches are better.  What do you want to 'update' about it?  If it's an independent change, just submit a different ticket and it will probably land quickly if it's an obvious fix.

>> Testing multicast is ... challenging.  I barely have any idea how to set up a test environment for IPv4, and no idea what to do for IPv6.  If you can speak to this in your tests (and hopefully docs as well) that would be super helpful.
>> 
> Indeed.  I have an interest beyond the scope of this change so I'll see
> what I can do/find.

If you have an interest in UDP generally, a fix for this horribly embarrassing and probably pretty important bug <https://twistedmatrix.com/trac/ticket/2790 <https://twistedmatrix.com/trac/ticket/2790>> would be (A) super appreciated, and (B) really straightforward (the ambivalence on the ticket is all about how to test it "realistically", but a straightforward unit test with a fake socket would probably be fine).

Thanks again,

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160727/627ead66/attachment.html>

From jlitzingerdev at gmail.com  Wed Jul 27 21:44:41 2016
From: jlitzingerdev at gmail.com (Jason Litzinger)
Date: Wed, 27 Jul 2016 21:44:41 -0600
Subject: [Twisted-Python] RFC: IPv6 multicast join/ticket 6597
In-Reply-To: <28A3C345-0F54-452F-8CA1-901D8E5F839C@twistedmatrix.com>
References: <20160726044330.GA8172@jlitzing-dell>
 <4608F909-EE03-401B-A898-BAC3D3CBB35B@twistedmatrix.com>
 <20160727060007.GA3076@jlitzing-dell>
 <28A3C345-0F54-452F-8CA1-901D8E5F839C@twistedmatrix.com>
Message-ID: <20160728034441.GA3911@jlitzing-dell>

> Nothing specific, although any conclusions drawn on the mailing list, or any specific thoughts you have about how you're going to proceed, are always helpful to record on the ticket for future reference.  Even if you think you're going to get it done in the next couple of days, chances are you'll take an 18 month hiatus in the middle and it's always helpful to have those notes to come back to :).
> 
Agree completely, done.

> Smaller patches are better.  What do you want to 'update' about it?  If it's an independent change, just submit a different ticket and it will probably land quickly if it's an obvious fix.
It isn't so much update as I think it is equally broken for IPv6.  If I'm not misunderstanding my reference (UNPv3), socket.IP_MULTICAST_TTL is specific to IPv4, while IPV6_MULTICAST_HOPS is required for v6.  I attempted to use the former in some IPv6 test code and, surprise surprise, inspecting the IP header revealed it didn't work.  Using the latter worked.

Regardless, I agree, smaller patches keep things sane, I'll put this on the queue after joinGroup.

Thanks,
-Jason


From jlitzingerdev at gmail.com  Wed Jul 27 22:39:18 2016
From: jlitzingerdev at gmail.com (Jason Litzinger)
Date: Wed, 27 Jul 2016 22:39:18 -0600
Subject: [Twisted-Python] RFC: IPv6 multicast join/ticket 6597
In-Reply-To: <4608F909-EE03-401B-A898-BAC3D3CBB35B@twistedmatrix.com>
References: <20160726044330.GA8172@jlitzing-dell>
 <4608F909-EE03-401B-A898-BAC3D3CBB35B@twistedmatrix.com>
Message-ID: <20160728043918.GA4671@jlitzing-dell>

> > +    def _joinAddrIPv6(self, interface, addr, join):
> > +        addr = socket.inet_pton(socket.AF_INET6, addr)
> > +        interface = socket.inet_pton(socket.AF_INET6, interface)
> > +        if join:
> > +            cmd = socket.IPV6_JOIN_GROUP
> > +        else:
> > +            cmd = socket.IPV6_LEAVE_GROUP
> > +        try:
> > +            self.socket.setsockopt(socket.IPPROTO_IPV6, cmd, addr + interface)
> > +        except socket.error as e:
> > +            return failure.Failure(error.MulticastJoinError(addr, interface, *e.args))
To make sure its out there, the above is completely wrong.  It happens
to work, but is wrong.  The argument to setsockopt for v6 is very
different from v4.  The above happens to work with "::" as the
interface, but is very very wrong.

-Jason


From wolfgang.kde at rohdewald.de  Thu Jul 28 07:49:28 2016
From: wolfgang.kde at rohdewald.de (Wolfgang Rohdewald)
Date: Thu, 28 Jul 2016 15:49:28 +0200
Subject: [Twisted-Python] [Twisted] #7598: Port twisted.spread.pb to
	Python3
In-Reply-To: <068.60dd16daf365e1c4d37c98004bda68bc@twistedmatrix.com>
References: <053.3921990c4e23d1c358e60a8157e4dfe8@twistedmatrix.com>
 <068.60dd16daf365e1c4d37c98004bda68bc@twistedmatrix.com>
Message-ID: <6176651.KYjNDdrXcG@skull>

Am Donnerstag, 28. Juli 2016, 11:27:15 CEST schrieb Twisted:
> The branch there ports PB to Python 3. There might still be a few coverage
> issues, and since I trust codecov, I'm not entiirely sure.  But this is
> definitely worth at least a first pass review at this point.

Great news!

I should be able to do some testing next week

--
Wolfgang


From commercials24 at yahoo.de  Fri Jul 29 12:13:16 2016
From: commercials24 at yahoo.de (steven meier)
Date: Fri, 29 Jul 2016 20:13:16 +0200
Subject: [Twisted-Python] running code on its own and importing,
 howto install  a different reactor?
Message-ID: <1469815996.6151.50.camel@yahoo.de>

hi,

i ran into this issue, i can run the code on its own "python
working_code.py", but i cant import it...how do you fit the reactor in
this scenario?




    python main_code.py
    Unhandled error in Deferred:
     
     
    Traceback (most recent call last):
      File
"/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py", line 1274, in unwindGenerator
        return _inlineCallbacks(None, gen, Deferred())
      File
"/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py", line 1128, in _inlineCallbacks
        result = g.send(result)
      File
"/home/julius/code/python/qt5-python2.x/example/working_code.py", line
7, in print_it
        arg = yield terrific_method()
      File
"/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py", line 1274, in unwindGenerator
        return _inlineCallbacks(None, gen, Deferred())
    --- <exception caught here> ---
      File
"/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py", line 1128, in _inlineCallbacks
        result = g.send(result)
      File
"/home/julius/code/python/qt5-python2.x/example/working_code.py", line
14, in terrific_method
        reactor.callLater(2, d.callback, 2)
    exceptions.NameError: global name 'reactor' is not defined
     
     
     
    



 
   cat main_code.py
   


    import qt5reactor
    qt5reactor.install()
     
    from twisted.internet import reactor
    from working_code import print_it
     
     
    print_it()
     
     


    cat working_code.py
    
    
    from twisted.internet.defer import inlineCallbacks, Deferred,
returnValue
     
    @inlineCallbacks
    def print_it():
        arg = yield terrific_method()
        print arg
     
     
    @inlineCallbacks
    def terrific_method():
        d = Deferred()
        reactor.callLater(2, d.callback, 2)
        result = yield d
        returnValue(result)
     
     
     
     
    if __name__ == '__main__':
        import qt5reactor
        qt5reactor.install()
        from twisted.internet import reactor
        reactor.callWhenRunning(print_it)
        reactor.run()



From sank.daniel at gmail.com  Fri Jul 29 12:27:54 2016
From: sank.daniel at gmail.com (Daniel Sank)
Date: Fri, 29 Jul 2016 11:27:54 -0700
Subject: [Twisted-Python] running code on its own and importing,
 howto install a different reactor?
In-Reply-To: <1469815996.6151.50.camel@yahoo.de>
References: <1469815996.6151.50.camel@yahoo.de>
Message-ID: <CAKN9TD+Yqa4FPJe1OTrk5ihktZRB4Hbw5+9fxSwFLHuu3AjFAw@mail.gmail.com>

Looks like the problem is that the twisted.internet.reactor is imported
inside a block guarded by

if __name__ == '__main__'

When you import working_code that block doesn't run, because of the guard,
so terrific_method tries to access "reactor" which doesn't exist. I guess
your question is really how to get access to the reactor in
working_code.py, since you can't import it in the top level namespace
because you have ti install the qt5reactor *before* importing
twisted.internet.reactor (right?).

I don't know if there's a generally advised way of handling this, but I
would simply put all the stuff in the guarded block in its own file and
make sure to install the qt5reactor before importing anything else.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160729/06286f9c/attachment.html>

From meejah at meejah.ca  Fri Jul 29 13:11:56 2016
From: meejah at meejah.ca (meejah)
Date: Fri, 29 Jul 2016 23:11:56 +0400
Subject: [Twisted-Python] running code on its own and importing,
	howto install a different reactor?
In-Reply-To: <CAKN9TD+Yqa4FPJe1OTrk5ihktZRB4Hbw5+9fxSwFLHuu3AjFAw@mail.gmail.com>
 (Daniel Sank's message of "Fri, 29 Jul 2016 11:27:54 -0700")
References: <1469815996.6151.50.camel@yahoo.de>
 <CAKN9TD+Yqa4FPJe1OTrk5ihktZRB4Hbw5+9fxSwFLHuu3AjFAw@mail.gmail.com>
Message-ID: <86shusz2bn.fsf@atlantis.meejah.ca>


I think the "recommended" way to get access to a reactor instance is to
pass it in to methods that require it.

While this can sometimes seem tedious it a) helps testing (because now
you can easily pass a fake reactor object like Clock or a Mock instance)
and b) shows you (and your users) which methods are (or might-be) async.

So, try a signature like "def terrific_method(reactor):" instead. Now
when you're writing tests, you can do this:

    fake_reactor = Clock()
    d = terrific_method(fake_reactor)
    fake_reactor.advance(2)
    # etc.

-- 
meejah


From commercials24 at yahoo.de  Fri Jul 29 13:42:37 2016
From: commercials24 at yahoo.de (steven meier)
Date: Fri, 29 Jul 2016 21:42:37 +0200
Subject: [Twisted-Python] running code on its own and importing,
 howto install a different reactor?
In-Reply-To: <86shusz2bn.fsf@atlantis.meejah.ca>
References: <1469815996.6151.50.camel@yahoo.de>
 <CAKN9TD+Yqa4FPJe1OTrk5ihktZRB4Hbw5+9fxSwFLHuu3AjFAw@mail.gmail.com>
 <86shusz2bn.fsf@atlantis.meejah.ca>
Message-ID: <1469821357.6151.55.camel@yahoo.de>

On Fri, 2016-07-29 at 23:11 +0400, meejah wrote:
> I think the "recommended" way to get access to a reactor instance is to
> pass it in to methods that require it.
> 
> While this can sometimes seem tedious it a) helps testing (because now
> you can easily pass a fake reactor object like Clock or a Mock instance)
> and b) shows you (and your users) which methods are (or might-be) async.
> 
> So, try a signature like "def terrific_method(reactor):" instead. Now
> when you're writing tests, you can do this:
> 
>     fake_reactor = Clock()
>     d = terrific_method(fake_reactor)
>     fake_reactor.advance(2)
>     # etc.
> 


Ah yes, you answered a question of mine not so long ago earlier and told
me exactly that....sorry forgot.

workig  example if anybody ever digs this out:

i modified the code like this:




working_code.py
from twisted.internet.defer import inlineCallbacks, Deferred,
returnValue

@inlineCallbacks
def print_it(reactor):
    arg = yield terrific_method(reactor)
    print arg


@inlineCallbacks
def terrific_method(reactor):
    d = Deferred()
    reactor.callLater(2, d.callback, 2)
    result = yield d
    returnValue(result)




if __name__ == '__main__':
    import qt5reactor
    qt5reactor.install()
    from twisted.internet import reactor
    reactor.callWhenRunning(print_it, reactor)
    reactor.run()





main_code.py:
import qt5reactor
qt5reactor.install()

from twisted.internet import reactor
from working_code import print_it


print_it(reactor)
reactor.run()




now on to some tests...



From meejah at meejah.ca  Fri Jul 29 13:59:00 2016
From: meejah at meejah.ca (meejah)
Date: Fri, 29 Jul 2016 23:59:00 +0400
Subject: [Twisted-Python] running code on its own and importing,
	howto install a different reactor?
In-Reply-To: <1469821357.6151.55.camel@yahoo.de> (steven meier's message of
 "Fri, 29 Jul 2016 21:42:37 +0200")
References: <1469815996.6151.50.camel@yahoo.de>
 <CAKN9TD+Yqa4FPJe1OTrk5ihktZRB4Hbw5+9fxSwFLHuu3AjFAw@mail.gmail.com>
 <86shusz2bn.fsf@atlantis.meejah.ca>
 <1469821357.6151.55.camel@yahoo.de>
Message-ID: <86eg6cz057.fsf@atlantis.meejah.ca>

steven meier <commercials24 at yahoo.de> writes:

> if __name__ == '__main__':
>     import qt5reactor
>     qt5reactor.install()
>     from twisted.internet import reactor
>     reactor.callWhenRunning(print_it, reactor)
>     reactor.run()

For "client-style" things (I guess I just mean "something that exits"),
there's even a utility function that calls some method you provide with
the reactor as the first argument, and arranges for reactor.stop() to
get called exactly once (when the Deferred returned by your method
fires).

    import qt5reactor
    qt5reactor.install()
    from twisted.internet.task import react

    if __name__ == '__main__':
        react(print_it)

-- 
meejah


From commercials24 at yahoo.de  Sat Jul 30 06:03:43 2016
From: commercials24 at yahoo.de (steven meier)
Date: Sat, 30 Jul 2016 14:03:43 +0200
Subject: [Twisted-Python] adding reactor as argument to getPage()?
In-Reply-To: <CAKN9TD+Yqa4FPJe1OTrk5ihktZRB4Hbw5+9fxSwFLHuu3AjFAw@mail.gmail.com>
References: <1469815996.6151.50.camel@yahoo.de>
 <CAKN9TD+Yqa4FPJe1OTrk5ihktZRB4Hbw5+9fxSwFLHuu3AjFAw@mail.gmail.com>
Message-ID: <1469880223.6151.72.camel@yahoo.de>

hi,


after my last question which was answered with:
...the reactor should be passed in by the user...

i ran into getPage(), the
file: ./lib/python2.7/site-packages/twisted/web/client.py
which contains getPage() imports the reactor at the top.

it can be easily changed to add a argument to getPage() which passes it
down to _makeGetter...
then just comment out the import at the top and getPage() works when
given a reactor as argument.

probably breaking a lot of other code in that file.

since getPage() is a method thats probably used a lot...did i understand
the passing of the reactor or i did my mind go overboard?


as a reminder: i want to use the qt5reactor to get some gui output




From glyph at twistedmatrix.com  Sat Jul 30 13:38:10 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 30 Jul 2016 12:38:10 -0700
Subject: [Twisted-Python] adding reactor as argument to getPage()?
In-Reply-To: <1469880223.6151.72.camel@yahoo.de>
References: <1469815996.6151.50.camel@yahoo.de>
 <CAKN9TD+Yqa4FPJe1OTrk5ihktZRB4Hbw5+9fxSwFLHuu3AjFAw@mail.gmail.com>
 <1469880223.6151.72.camel@yahoo.de>
Message-ID: <B83C9448-6884-48CD-A26E-D89DD5E65580@twistedmatrix.com>


> On Jul 30, 2016, at 5:03 AM, steven meier <commercials24 at yahoo.de> wrote:
> 
> hi,
> 
> 
> after my last question which was answered with:
> ...the reactor should be passed in by the user...
> 
> i ran into getPage(), the
> file: ./lib/python2.7/site-packages/twisted/web/client.py
> which contains getPage() imports the reactor at the top.
> 
> it can be easily changed to add a argument to getPage() which passes it
> down to _makeGetter...
> then just comment out the import at the top and getPage() works when
> given a reactor as argument.
> 
> probably breaking a lot of other code in that file.
> 
> since getPage() is a method thats probably used a lot...did i understand
> the passing of the reactor or i did my mind go overboard?
> 
> 
> as a reminder: i want to use the qt5reactor to get some gui output

Don't use getPage.  You want Agent.request <https://twistedmatrix.com/documents/16.3.0/api/twisted.web.client.Agent.html#request>, or possibly treq.get <http://treq.readthedocs.org>.  getPage has a lot of problems and will be deprecated in a future release.

-glyph

From glyph at twistedmatrix.com  Fri Jul  1 00:08:55 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 30 Jun 2016 23:08:55 -0700
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
 <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
 <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>
 <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>
Message-ID: <449CFA03-C24F-453C-AE8C-FDB46A132246@twistedmatrix.com>


> On Jun 30, 2016, at 17:36, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> On Thu, Jun 30, 2016 at 6:25 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
>> On Jun 30, 2016, at 04:13, Jean-Paul Calderone <exarkun at twistedmatrix.com <mailto:exarkun at twistedmatrix.com>> wrote:
>> 
>> On Thu, Jun 30, 2016 at 6:43 AM, Adi Roiban <adi at roiban.ro <mailto:adi at roiban.ro>> wrote:
>> Hi,
>> 
>> Recently we have introduced a hard check of 100% coverage for all changes.
>> This is done via coverage + codecov + github protected branches.
>> 
>> Now, if your patch is not 100% covered github will not let you merge it.
>> 
>> See for example this change: https://github.com/twisted/twisted/pull/261/files#diff-0fea8a8ca713deb7ea6a10053273319aR2360 <https://github.com/twisted/twisted/pull/261/files#diff-0fea8a8ca713deb7ea6a10053273319aR2360>
>> 
>> The errback is there to help with test failures ... but the test should never fail, so that errback is never called... and that line is not covered.
>> 
>> 
>> It doesn't always make sense to require 100% execution of all test code.  It's not at all uncommon to only have code in a test suite that runs when a test fails.  Historically, Twisted has never had a requirement of 100% execution of test code.  The only test suite coverage requirements that have commonly been requested or enforced is for coverage of implementation code.
>> 
>> I'd suggest removing the coverage enforcement for test suite code.
> 
> I am inclined to disagree, albeit mildly.
> 
> When one is writing a deliberately un-covered path in test code, presumably, one is writing either a test helper - a mock, fake, or utility for setting up a real implementation - or an assertion method.  Historically, I believe that when we've invested more heavily in making these utilities "real" themselves, and not just throwaway stuff inline in a test method or module, the benefits have far outweighed the costs.  In fact the availability of proto_helpers is one of the selling points of Twisted as opposed to other competing engines.
> 
> I mostly agree with this.  However, I was thinking of a slightly different pattern when I wrote my earlier email.  Here's are a couple (fictional) examples of that pattern one might find in unit tests for application code (and there's nothing Twisted-specific here):
> 
> if foo:
>     self.fail("Foo!")
> 
> try:
>     foo()
> except:
>     bar
> else:
>     self.fail("Foo :(")

Hm.  This pattern is exactly what I was thinking of though - as you point out, these examples did get generalized :-).

In principle, I agree that a one-off example like this does not benefit from extensive refactoring to facilitate general use.  But... in practice, every example of this that I've seen in a long-lived codebase eventually metastasizes into a repeated copy/paste pattern, or a big gross mixin that all tests practically need.  Forcing everyone to deal with the problem sooner rather than later seems to have been a win on the few projects where I've gotten to practice it.

> It's not exactly that this can't be code that's executed in a passing run of the test suite.  It's more a question of what the right balance point is.  If someone wants to generalize logic like this (and, fortunately, someone did generalize these particular examples - they're assertFalse and assertRaises, respectively) then that's great and the result is a higher level of confidence resulting from a successful run of the test suite.  I'd suggest that if tests like these exercise all of the implementation code (on a successful run), though, then you've still achieved a pretty high level of test coverage and maybe further efforts are more productively directed elsewhere (increasing the coverage level of other implementation code in Twisted, for example :).

Speaking only from my direct experience here, adding good test helpers is a net reduction in effort very quickly; they pay for themselves on only the third test you write with them :).  So I don't feel like this is much of a burden, but I'd be interested in hearing others' feedback here.

> If folks want a higher bar than this, I'm not going to argue (at least not much, at least not now).  The bar hasn't been this high in the past though (and there are many many such cases to be found in Twisted's test suite right now and I don't have the impression this has ever been much of a source of problems).

I wish it were easier to search my own reviews, because I think I've prodded people to factor this kind of stuff out, but I can't find any handy examples.

But, I can see that right after this, I'm going to have to answer Craig's email, so perhaps we'll get to see a specific example :).

> Therefore, I think that asking folks to add independent test coverage to verify their fakes and ensure that the failure-reporting of their assertion messages are helpful in the event a test fails is a generally good idea, and we should keep the requirement for 100% coverage on both test and implementation coverage.
> 
> However, if there is contention around this, I'd much rather get a ratchet in place for implementation code that's reliable and everyone is happy with, so I'm OK with disabling coverage reporting for our *.test.* packages as a step towards that.
> 
> I completely agree that fakes should be verified.  So much so that I'm not even sure I believe in fakes in general anymore.  Instead, you should just have easy to use interfaces and ship inexpensive implementations alongside whatever other implementations you also need.

💯

> And all those implementations should have great test coverage.  I also completely agree that when tests fail, they should do so in a meaningful way.  I suspect slightly the implication that automated test coverage for the failure case demonstrates the failure is reported meaningfully, though. :)  I think we're still stuck with relying on humans (authors, reviewers) to verify that property.

Sure, rich and meaningful semantic error reporting is a human's job.  But "doesn't just raise an exception and lose all the information about what happened due to an attribute spelling error on the rare race-y test that fails 1/10000 times" is a good first approximation, and tests are good at that sort of thing ;-).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160630/2fb16647/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Jul  1 00:29:07 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 30 Jun 2016 23:29:07 -0700
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <CAG=rPVd+HF3LUnb6EX-UYuGDSqLk8-e7XT-AV26RCgt_phfU8g@mail.gmail.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
 <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
 <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>
 <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>
 <CAG=rPVd+HF3LUnb6EX-UYuGDSqLk8-e7XT-AV26RCgt_phfU8g@mail.gmail.com>
Message-ID: <78DF920E-B059-4369-BDA5-AA65319BF692@twistedmatrix.com>


> On Jun 30, 2016, at 18:37, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Hi,
> 
> The conversation about coverage exceptions came up due to this:
> 
> https://github.com/twisted/twisted/pull/261 <https://github.com/twisted/twisted/pull/261>
> 
> I have that up to 97.87% of patch coverage.  I cannot merge it because the codecov integration with GitHub
> is currently configured to not accept patches which don't have 100% patch coverage.
> 
> Can someone please take a look at that, and make a decision as to how to move that PR forward?
> Thanks.

The problematic lines in question on this PR are here:

https://codecov.io/gh/twisted/twisted/compare/f43b16c097309d9747a0c1e708bd4ed05a6977e8...8a22bd8c626c8e496b9564879d85eb711e2bc408#747769737465642F746573742F746573745F64656665722E7079-2360

In this case, the fix to ensure they're covered is pretty easy.  The problem here is essentially a defect in the test: it's returning a Deferred from the test method to spin the reactor, even though the test has already done the work of isolating the system under test from the real reactor (self.lock is pointed at self._clock and a glance at the implementation shows it doesn't access the global reactor).

If you just fix the test to call self.successResultOf(d) after advancing the Clock to assert that it didn't fail, you can stop returning the Deferred, and remove the problematic un-covered callback.

More generally - although the ability to return a Deferred from a test is a very useful bit of integration testing functionality, tests within Twisted itself returning Deferreds are usually just insufficiently isolated.  We have a different way of doing integration tests with the reactors themselves (ReactorBuilder tests) which doesn't rely on returning Deferreds, and we don't have any tightly-coupled external systems like a database which it would make sense to rely upon in tests, so pretty much everything should be synchronous in our own test suite.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160630/94286bbb/attachment-0002.html>

From rodrigc at crodrigues.org  Fri Jul  1 12:34:32 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 1 Jul 2016 11:34:32 -0700
Subject: [Twisted-Python] Script which uploads coverage results to codecov
	failed, but reported success?
Message-ID: <CAG=rPVdVjJU3YEWu74vqQMsi5ZYH+G87rY3Q0P5fqh99AMHeYg@mail.gmail.com>

Hi,

For this pull request:

https://github.com/twisted/twisted/pull/284

This Windows build ran and tried to upload coverage results to codecov:

https://buildbot.twistedmatrix.com/builders/windows7-64-py2.7-coverage/builds/623/steps/shell_5/logs/stdio

but failed with this:

Error: 403 Client Error: Forbidden for url:
https://codecov.s3.amazonaws.com/v4/raw/2016-07-01/BB05435E28F8047E9B3D49B4B7BFA4B3/4a5903d2f0fcab3db7c6ca68ff563e2c859dd5c2/031e0d8f-aadc-47ae-9b69-29ca9d962287.txt?AWSAccessKeyId=AKIAIHLZSCQCS4WIHD4A&Expires=1467374016&Signature=i1IQndDSPC0vtJysR8vnPxDpPw0%3D

The upload failed, but the buildbot job reported success.

The result was that patch shows 57% coverage, when it should be 100%.
Is there a way to make that buildbot step fail if the upload to codecov
fails?

I don't know where the script for that is.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160701/f3d78a5b/attachment-0002.html>

From rodrigc at crodrigues.org  Fri Jul  1 14:11:21 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 1 Jul 2016 13:11:21 -0700
Subject: [Twisted-Python] Script which uploads coverage results to
 codecov failed, but reported success?
In-Reply-To: <CAG=rPVdVjJU3YEWu74vqQMsi5ZYH+G87rY3Q0P5fqh99AMHeYg@mail.gmail.com>
References: <CAG=rPVdVjJU3YEWu74vqQMsi5ZYH+G87rY3Q0P5fqh99AMHeYg@mail.gmail.com>
Message-ID: <CAG=rPVdCCoesLSOTp5-W-uCbNcSAwaw3-f-FS5syU5_cbvbiiQ@mail.gmail.com>

On Fri, Jul 1, 2016 at 11:34 AM, Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

>
> Error: 403 Client Error: Forbidden for url: https://codecov.s3.amazonaws.com/v4/raw/2016-07-01/BB05435E28F8047E9B3D49B4B7BFA4B3/4a5903d2f0fcab3db7c6ca68ff563e2c859dd5c2/031e0d8f-aadc-47ae-9b69-29ca9d962287.txt?AWSAccessKeyId=AKIAIHLZSCQCS4WIHD4A&Expires=1467374016&Signature=i1IQndDSPC0vtJysR8vnPxDpPw0%3D
>
> The upload failed, but the buildbot job reported success.
>
>
>
It looks like every build from the windows7-64-py2.6-coverage buildbot is
failing to upload to codecov.  I have filed a ticket:

https://twistedmatrix.com/trac/ticket/8549#ticket

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160701/cbd272b1/attachment-0002.html>

From dansut at gmail.com  Fri Jul  1 15:31:12 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Fri, 1 Jul 2016 17:31:12 -0400
Subject: [Twisted-Python] Style/testing for log-related changes
In-Reply-To: <CADzPF4tHXfE3qzn4fKOqk4NSEKvh8z_zfdi-YLx4v7-sOp73eA@mail.gmail.com>
References: <57555CA8.40404@imperial.ac.uk>
 <50BD783F-5296-40A3-B2A5-8A7F1F226D1B@twistedmatrix.com>
 <CADzPF4tHXfE3qzn4fKOqk4NSEKvh8z_zfdi-YLx4v7-sOp73eA@mail.gmail.com>
Message-ID: <CADzPF4sBm-MHSqCzuzPMJSAWhgzmLuue_7yniq+gv81SeAecJw@mail.gmail.com>

On Tue, Jun 28, 2016 at 1:49 PM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> This is what I came up with while trying to get twistd related
> messages all emitted through new logger and thus not have [-] in
> standard textual log:
>   https://github.com/twisted/twisted/compare/bb0d1d67...dansut:logger-update
> Probably did some really daft stuff here but comments appreciated on
> my forks branch to get me working in a way which will be acceptable
> for PRs in future.

I've done a rebase to stay current with trunk so messed up the results
of that URL, as long as do things 'right' in future this one should
work better to see what I attempted:
  https://github.com/dansut/twisted/compare/trunk...logger-update

Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>



From commercials24 at yahoo.de  Sat Jul  2 04:47:47 2016
From: commercials24 at yahoo.de (steven meier)
Date: Sat, 02 Jul 2016 12:47:47 +0200
Subject: [Twisted-Python] qt5 / twisted integration....reactor imported but
	NameError?
Message-ID: <1467456467.27915.8.camel@yahoo.de>

python main_code.py 
Gtk-Message: Failed to load module "canberra-gtk-module"
testing...
[Failure instance: Traceback: <type 'exceptions.NameError'>: global name
'reactor' is not defined
/home/julius/.local/lib/python2.7/site-packages/twisted/internet/tcp.py:293:connectionLost
/home/julius/.local/lib/python2.7/site-packages/twisted/web/client.py:222:connectionLost
/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py:393:callback
/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py:501:_startRunCallbacks
--- <exception caught here> ---
/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py:588:_runCallbacks
/home/julius/code/python/qt5-python2.x/webchat.py:75:main_page_result
]
123



main_code looks like this:
from PyQt5 import QtWidgets
import sys
from untitled import Ui_MainWindow




class Main(QtWidgets.QMainWindow):

    def __init__(self):
        QtWidgets.QMainWindow.__init__(self)
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.setupSignals()

    def button_1_Clicked(self):
        self.ui.textbox_2.setText(self.ui.textbox_1.text())

    def setupSignals(self):
        #self.ui.textbox_1.textChanged.connect(self.textbox_1_Changed)
        self.ui.button_1.clicked.connect(self.button_1_Clicked)



if __name__ == '__main__':
    #app = QtWidgets.QApplication(sys.argv)
    app = QtWidgets.QApplication(sys.argv) # your code to init QtCore
    import qt5reactor
    qt5reactor.install()
    from twisted.internet import reactor
    print "testing..."

<snip>

    from webchat import get_main_page
    get_main_page()
    reactor.run()




as you can see the qt5reactor.install() runs before the "from webchat
import get_main_page"

so how come that webchat does not know about reactor?




From adi at roiban.ro  Sat Jul  2 14:43:04 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 2 Jul 2016 21:43:04 +0100
Subject: [Twisted-Python] FreeBSD buildbots down?
In-Reply-To: <CAG=rPVfaqeNQPbqjKU=nyr6rNoF7BK7977bH0aH7jSZntWRYgg@mail.gmail.com>
References: <CAG=rPVfaqeNQPbqjKU=nyr6rNoF7BK7977bH0aH7jSZntWRYgg@mail.gmail.com>
Message-ID: <CAFycZ9dXeS5rWOURF89ZhaePXD3qAJ-hYzx9ExtsGX2=T0mdkQ@mail.gmail.com>

On 30 June 2016 at 23:55, Craig Rodrigues <rodrigc at crodrigues.org> wrote:

> Hi,
>
> The FreeBSD buildbots seem to be down since May 26.
> https://buildbot.twistedmatrix.com/boxes-all
>
> Any ideas as to what is wrong?
>
>
Hi,

Thanks for the email.

It looks like the slave is sponsored by Tavendo. Don't know why the contact
is not public.

https://buildbot.twistedmatrix.com/buildslaves/tavendo-freebsd-10.1-amd64

I have added Tobias in CC. Hope it will help.

If not, I think that we can create a server on the RackSpace cloud.
AFAIK we still have about $300/month left, sponsored by RackSpace.

BTW. I see that the Windows slave is pretty busy sometimes. Can we add a
Windows slave hosted by Rackspace? (I think that Glyph or Amber can answer
this)

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160702/9b59ad6f/attachment-0002.html>

From adi at roiban.ro  Sat Jul  2 16:42:32 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 2 Jul 2016 23:42:32 +0100
Subject: [Twisted-Python] Buildbot upgrade to latest eight branch
In-Reply-To: <CAOtB_kmghLME7QMWp0C4mq3894U5bws=yXSfbBxEfuLJr9vffA@mail.gmail.com>
References: <CAFycZ9en8Vzts5s8Z4+vu8d1q73okX6736de=CH6XcedgsDQrw@mail.gmail.com>
 <5C1A7E78-BB95-4FC1-B323-7469916B443C@twistedmatrix.com>
 <CAFycZ9fPqJ1ec-WddC1jVX8brCnPqZjNTZDTkjBniMWfMjubAA@mail.gmail.com>
 <CAOtB_kmghLME7QMWp0C4mq3894U5bws=yXSfbBxEfuLJr9vffA@mail.gmail.com>
Message-ID: <CAFycZ9dYrkvdWd7R9tmxeKGJGZgMhE4Rkuy=8LMMv6+kiSpt5Q@mail.gmail.com>

On 25 June 2016 at 16:53, Tom Prince <tom.prince at ualberta.net> wrote:

> > https://github.com/twisted-infra/braid/pull/206
>
> I'll try to review this this weekend.
>


I have merged the GitHub commit status as I think that it was working OK.

I have now deployed the GitHub Hooks build trigger changes.

Build are automatically triggered for all pushes in all branches. There is
a delay of 5 seconds so that multiple builds pushed in the same time will
only trigger a single build for the last commit.

See this PR for details and if you want to review it :)

https://github.com/twisted-infra/braid/pull/208

With this change, Buildbot should have a closer behavior to Travis-CI. That
is, it will automatically start the builders and will report the build
results in GitHub PR.

Happy hacking :)
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160702/21391aa5/attachment-0002.html>

From adi at roiban.ro  Sun Jul  3 01:27:15 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 3 Jul 2016 08:27:15 +0100
Subject: [Twisted-Python] Script which uploads coverage results to
 codecov failed, but reported success?
In-Reply-To: <CAG=rPVdVjJU3YEWu74vqQMsi5ZYH+G87rY3Q0P5fqh99AMHeYg@mail.gmail.com>
References: <CAG=rPVdVjJU3YEWu74vqQMsi5ZYH+G87rY3Q0P5fqh99AMHeYg@mail.gmail.com>
Message-ID: <CAFycZ9crDrVJ9_iFUDUQ1C=ixUP02H+sakUFvgXDaaN6H-wahA@mail.gmail.com>

On 1 July 2016 at 19:34, Craig Rodrigues <rodrigc at crodrigues.org> wrote:

> Hi,
>
> For this pull request:
>
> https://github.com/twisted/twisted/pull/284
>
> This Windows build ran and tried to upload coverage results to codecov:
>
>
> https://buildbot.twistedmatrix.com/builders/windows7-64-py2.7-coverage/builds/623/steps/shell_5/logs/stdio
>
> but failed with this:
>
>
I can see that the Windows coverage builder is not using virtualenv + tox
to run the coverage report.

I suggest that we should first convert all builders to virtualenv + tox.
There is a ticket pending review for that
https://twistedmatrix.com/trac/ticket/8544

Then I suggest to push the coverage from tox. There is a ticket pending
review for that https://twistedmatrix.com/trac/ticket/8532

--------

With builders using virtual env + tox it should be much easier to work and
debug issues as the exact commands executed by buildbot are no longer
hardcoded in the buildbot configuration.


--------

I have setup a buildslave for Windows 2012R2 on Rackspace and I can see
that the coverage was uploaded ...at least for trunk

https://buildbot.twistedmatrix.com/builders/win-64-py2.7-coverage/builds/1/steps/shell_5/logs/stdio

The PR for adding the Windows 2012 slave is waiting a review here
https://github.com/twisted-infra/braid/pull/215

---------

Craig, if you have access to the Windows 7 slave check the system clock.
I no longer have access to the Win7 VNC as it looks like the password was
changed.


-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160703/92b57814/attachment-0002.html>

From adi at roiban.ro  Sun Jul  3 02:08:30 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 3 Jul 2016 09:08:30 +0100
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <78DF920E-B059-4369-BDA5-AA65319BF692@twistedmatrix.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
 <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
 <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>
 <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>
 <CAG=rPVd+HF3LUnb6EX-UYuGDSqLk8-e7XT-AV26RCgt_phfU8g@mail.gmail.com>
 <78DF920E-B059-4369-BDA5-AA65319BF692@twistedmatrix.com>
Message-ID: <CAFycZ9eWS56jAtqUJEGn1Vn7H2zgY+BV5_pQWRupWt6ex9j6hw@mail.gmail.com>

Hi,

What decision should be made based on the feedback sent so far?

Should we disabled the codecov coverage enforcement for 100% coverage for a
patch as it also blocks missing coverage in a test?

If we want to enforce only implementation code, then we need to update the
tests to send separate reports for implementation and testing... and this
is not done yet.

Disabling/Enabling codecov.io merge protection is done here
https://github.com/twisted-infra/braid/issues/213

--------

I would argue that testing code should have the same quality standards as
the implementation code and hence also go for 100% coverage.

It will help detect code which is never executed and which later might get
out of sync or might break. This include mocked code which is out of sync
or tests which are skipped on all builders and which will get out of sync
and fail (ex our apidoc builder tests).

It will also simplify the reporting infrastructure ... and we are
already short-handed so a simple infrastructure should help move things
forward much faster.

--
Adi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160703/d8f31643/attachment-0002.html>

From mithrandi at mithrandi.net  Sun Jul  3 02:53:45 2016
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sun, 03 Jul 2016 08:53:45 +0000
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <CAFycZ9eWS56jAtqUJEGn1Vn7H2zgY+BV5_pQWRupWt6ex9j6hw@mail.gmail.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
 <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
 <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>
 <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>
 <CAG=rPVd+HF3LUnb6EX-UYuGDSqLk8-e7XT-AV26RCgt_phfU8g@mail.gmail.com>
 <78DF920E-B059-4369-BDA5-AA65319BF692@twistedmatrix.com>
 <CAFycZ9eWS56jAtqUJEGn1Vn7H2zgY+BV5_pQWRupWt6ex9j6hw@mail.gmail.com>
Message-ID: <CAMcKhMTh8EnPb7+b51svbqHrj5ztZkw6bymZVj6jLmZYc9q22w@mail.gmail.com>

The tests directories can simply be excluded in coverage.py (or codecov), I
don't think there's any need to do something more complicated than that.

While I agree that 100% test coverage is an ideal worth aspiring to, I
think getting there from the current state is going to be a large amount of
work that yields very little benefit at this point in time; I would say
that there are more important things to spend that effort on.

On Sun, 3 Jul 2016 at 10:09 Adi Roiban <adi at roiban.ro> wrote:

> Hi,
>
> What decision should be made based on the feedback sent so far?
>
> Should we disabled the codecov coverage enforcement for 100% coverage for
> a patch as it also blocks missing coverage in a test?
>
> If we want to enforce only implementation code, then we need to update the
> tests to send separate reports for implementation and testing... and this
> is not done yet.
>
> Disabling/Enabling codecov.io merge protection is done here
> https://github.com/twisted-infra/braid/issues/213
>
> --------
>
> I would argue that testing code should have the same quality standards as
> the implementation code and hence also go for 100% coverage.
>
> It will help detect code which is never executed and which later might get
> out of sync or might break. This include mocked code which is out of sync
> or tests which are skipped on all builders and which will get out of sync
> and fail (ex our apidoc builder tests).
>
> It will also simplify the reporting infrastructure ... and we are
> already short-handed so a simple infrastructure should help move things
> forward much faster.
>
> --
> Adi
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160703/e9c01465/attachment-0002.html>

From pawelmhm at gmail.com  Sun Jul  3 04:15:03 2016
From: pawelmhm at gmail.com (=?UTF-8?B?UGF3ZcWCIE1pZWNo?=)
Date: Sun, 3 Jul 2016 12:15:03 +0200
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
Message-ID: <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>

HTTP2 support sounds really exciting.

> Please let me know if you have any issues, as well as if you don't! If
everything works well, that's a good thing for me to know :)

I played around with this today and found out that the command you
recommend:

>  pip install -U https://twistedmatrix.com/Releases
/pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2#egg=Twisted[http2,tls]

does NOT install dependencies when ran on Python 3, I had to manually
install h2 to HTTP2 support to work. It works ok on Python 2. My
installation logs on Python 3.4 look like this:

> pip install -U
https://twistedmatrix.com/Releases/pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2#egg=Twisted[http2,tls]
Downloading/unpacking Twisted[http2,tls] from
https://twistedmatrix.com/Releases/pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2
  Downloading Twisted-16.3.0rc2.tar.bz2 (2.9MB): 2.9MB downloaded
  Running setup.py
(path:/home/pawel/.virtualenvs/foo3/build/Twisted/setup.py) egg_info for
package Twisted

    warning: no previously-included files matching '*.misc' found under
directory 'twisted'
    warning: no previously-included files matching '*.bugfix' found under
directory 'twisted'
    warning: no previously-included files matching '*.doc' found under
directory 'twisted'
    warning: no previously-included files matching '*.feature' found under
directory 'twisted'
    warning: no previously-included files matching '*.removal' found under
directory 'twisted'
    warning: no previously-included files matching 'NEWS' found under
directory 'twisted'
    warning: no previously-included files matching 'README' found under
directory 'twisted'
    warning: no previously-included files matching 'topfiles' found under
directory 'twisted'
    warning: no previously-included files found matching
'twisted/topfiles/CREDITS'
    warning: no previously-included files found matching
'twisted/topfiles/ChangeLog.Old'
    warning: no previously-included files found matching 'bin/_preamble.py'
    warning: no previously-included files found matching 'admin'
    warning: no previously-included files found matching 'bin/admin'
    warning: no previously-included files matching '*' found under
directory 'admin'
    warning: no previously-included files matching '*' found under
directory 'bin/admin'
    warning: no previously-included files found matching
'docs/historic/2003'
    warning: no previously-included files matching '*' found under
directory 'docs/historic/2003'
  Installing extra requirements: 'http2,tls'
Requirement already up-to-date: zope.interface>=4.0.2 in
/home/pawel/.virtualenvs/foo3/lib/python3.4/site-packages (from
Twisted[http2,tls])
Requirement already up-to-date: setuptools in
/home/pawel/.virtualenvs/foo3/lib/python3.4/site-packages (from
zope.interface>=4.0.2->Twisted[http2,tls])
Installing collected packages: Twisted
  Running setup.py install for Twisted

    warning: no previously-included files matching '*.misc' found under
directory 'twisted'
    warning: no previously-included files matching '*.bugfix' found under
directory 'twisted'
    warning: no previously-included files matching '*.doc' found under
directory 'twisted'
    warning: no previously-included files matching '*.feature' found under
directory 'twisted'
    warning: no previously-included files matching '*.removal' found under
directory 'twisted'
    warning: no previously-included files matching 'NEWS' found under
directory 'twisted'
    warning: no previously-included files matching 'README' found under
directory 'twisted'
    warning: no previously-included files matching 'topfiles' found under
directory 'twisted'
    warning: no previously-included files found matching
'twisted/topfiles/CREDITS'
    warning: no previously-included files found matching
'twisted/topfiles/ChangeLog.Old'
    warning: no previously-included files found matching 'bin/_preamble.py'
    warning: no previously-included files found matching 'admin'
    warning: no previously-included files found matching 'bin/admin'
    warning: no previously-included files matching '*' found under
directory 'admin'
    warning: no previously-included files matching '*' found under
directory 'bin/admin'
    warning: no previously-included files found matching
'docs/historic/2003'
    warning: no previously-included files matching '*' found under
directory 'docs/historic/2003'
    warning: PickyBuildPy: byte-compiling is disabled, skipping.

    changing mode of build/scripts-3.4/trial from 664 to 775
    changing mode of build/scripts-3.4/twistd from 664 to 775
    warning: install_lib: byte-compiling is disabled, skipping.

    changing mode of /home/pawel/.virtualenvs/foo3/bin/twistd to 775
    changing mode of /home/pawel/.virtualenvs/foo3/bin/trial to 775
  Could not find .egg-info directory in install record for
Twisted[http2,tls] from
https://twistedmatrix.com/Releases/pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2
Successfully installed Twisted
Cleaning up...


2016-06-28 14:44 GMT+02:00 Amber "Hawkie" Brown <hawkowl at atleastfornow.net>:

> Hi everyone,
>
> Here's another prerelease in the 16.3 series -- fixing a 16.2 regression
> in HTTP timeouts not working.
>
> For more information, check the NEWS file (link provided below).
>
> As usual, it's available for download -- go here (
> https://twistedmatrix.com/Releases/pre/16.3.0pre2/) to get the prerelease
> tarballs and the full NEWS file. If you want to install it right away, run:
>
>    pip install
> https://twistedmatrix.com/Releases/pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2
>
> A reminder that if you would like to try out the newly-landed HTTP/2
> support, run:
>
>    pip install -U
> https://twistedmatrix.com/Releases/pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2#egg=Twisted[http2,tls]
>
> This will download the new HTTP/2 dependencies and the TLS requirements as
> well.
>
> Please let me know if you have any issues, as well as if you don't! If
> everything works well, that's a good thing for me to know :)
>
> Twisted Regards,
> Amber Brown (HawkOwl)
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160703/c92cee2b/attachment-0002.html>

From adi at roiban.ro  Sun Jul  3 04:50:22 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 3 Jul 2016 11:50:22 +0100
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
Message-ID: <CAFycZ9dxb+cn42A56QZeaZ2y4AvgL2KLnxCW0_vy+ftztimeNw@mail.gmail.com>

On 3 July 2016 at 11:15, Paweł Miech <pawelmhm at gmail.com> wrote:

> HTTP2 support sounds really exciting.
>
> > Please let me know if you have any issues, as well as if you don't! If
> everything works well, that's a good thing for me to know :)
>
> I played around with this today and found out that the command you
> recommend:
>
> >  pip install -U https://twistedmatrix.com/Releases
> /pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2#egg=Twisted[http2,tls]
>
> does NOT install dependencies when ran on Python 3, I had to manually
> install h2 to HTTP2 support to work. It works ok on Python 2. My
> installation logs on Python 3.4 look like this:
>
>
AFAIK this is a known issue :

see
https://github.com/twisted/twisted/blob/trunk/docs/installation/howto/optional.rst



-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160703/07ea8edc/attachment-0002.html>

From pawelmhm at gmail.com  Sun Jul  3 06:47:08 2016
From: pawelmhm at gmail.com (=?UTF-8?B?UGF3ZcWCIE1pZWNo?=)
Date: Sun, 3 Jul 2016 14:47:08 +0200
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAFycZ9dxb+cn42A56QZeaZ2y4AvgL2KLnxCW0_vy+ftztimeNw@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAFycZ9dxb+cn42A56QZeaZ2y4AvgL2KLnxCW0_vy+ftztimeNw@mail.gmail.com>
Message-ID: <CAO38UCmZyw2rPSs+-xAAOtY4erfRaP4WBW3KjpNZWGdux1gD4g@mail.gmail.com>

> AFAIK this is a known issue :

Ah thanks, that's ok.

One other thing I noticed a propos HTTP 2 is that it seems that reading
relatively large file results in error:
"priority.priority.MissingStreamError: 'Stream 1 not in tree'". I created
simple gist to recreate this issue see here:
https://gist.github.com/pawelmhm/3aa7e4f3a0e322364dcb75e3f0a32da4 Resource
is launched with Python 3.4, to test it on the client I used curl with
http2 support. Data file
<https://drive.google.com/file/d/0B6myg3n6dqcVcXpPdkJCNUJLOTA/view?pref=2&pli=1>
is
not huge (570kb) but the error is raised when I send it as a whole, when I
only send some smaller chunk (e.g. first 100 items from file) it seems to
work ok. It seems that Python-hyper is all right with this file, perhaps
curl --http2 does something weird.

2016-07-03 12:50 GMT+02:00 Adi Roiban <adi at roiban.ro>:

>
>
> On 3 July 2016 at 11:15, Paweł Miech <pawelmhm at gmail.com> wrote:
>
>> HTTP2 support sounds really exciting.
>>
>> > Please let me know if you have any issues, as well as if you don't! If
>> everything works well, that's a good thing for me to know :)
>>
>> I played around with this today and found out that the command you
>> recommend:
>>
>> >  pip install -U https://twistedmatrix.com/Releases
>> /pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2#egg=Twisted[http2,tls]
>>
>> does NOT install dependencies when ran on Python 3, I had to manually
>> install h2 to HTTP2 support to work. It works ok on Python 2. My
>> installation logs on Python 3.4 look like this:
>>
>>
> AFAIK this is a known issue :
>
> see
> https://github.com/twisted/twisted/blob/trunk/docs/installation/howto/optional.rst
>
>
>
> --
> Adi Roiban
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160703/bc7423cc/attachment-0002.html>

From adi at roiban.ro  Sun Jul  3 08:13:38 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 3 Jul 2016 15:13:38 +0100
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <CAMcKhMTh8EnPb7+b51svbqHrj5ztZkw6bymZVj6jLmZYc9q22w@mail.gmail.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
 <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
 <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>
 <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>
 <CAG=rPVd+HF3LUnb6EX-UYuGDSqLk8-e7XT-AV26RCgt_phfU8g@mail.gmail.com>
 <78DF920E-B059-4369-BDA5-AA65319BF692@twistedmatrix.com>
 <CAFycZ9eWS56jAtqUJEGn1Vn7H2zgY+BV5_pQWRupWt6ex9j6hw@mail.gmail.com>
 <CAMcKhMTh8EnPb7+b51svbqHrj5ztZkw6bymZVj6jLmZYc9q22w@mail.gmail.com>
Message-ID: <CAFycZ9erykD7+bEe7LE13i_mvmoPpKVH8OtrGyOTExqx5n47vg@mail.gmail.com>

On 3 July 2016 at 09:53, Tristan Seligmann <mithrandi at mithrandi.net> wrote:

> The tests directories can simply be excluded in coverage.py (or codecov),
> I don't think there's any need to do something more complicated than that.
>
>
That is, don't report coverage at all for the test code?

I would prefer to see the coverage reports for tests, even if we don't
enforce 100% coverage.  Is a quick way to check that the test is executed
on at least one builder.

While I agree that 100% test coverage is an ideal worth aspiring to, I
> think getting there from the current state is going to be a large amount of
> work that yields very little benefit at this point in time; I would say
> that there are more important things to spend that effort on.
>
>
It might yield (arguably) little benefit for existing contributors, but I
think that for the new contributors it sends a bad message.

For me, as a reviewing it helps a lot if a contributors can get a quick
feedback about the quality of their code and I don't have to repeat in each
review that a topfile is required of that the code needs tests... the
topfile checker or coverage checker is red and this mean that a contributor
needs to work more before requesting a review.

We are preaching the Ultimate Quality Development System (UQDS) (tm) but
when new contributors are onboarded they found out that they should ignore
the tons of errors produced by twistedchecker, that the 100% coverage only
applied for implementation code and that test code is a 2nd class citizen
... that the api docs will produce error even if you have created a correct
cross reference to zope (similar to what existing code does)... etc

But maybe is just my fault for taking the UQDS too seriously and instead I
should read it as the Almost Ultimate Quality Development System.

pyflakes run is not clean on trunk... and I hope that pydoctor will soon
run without errors on trunk ... after that we can hit twistedchecker :)

--
Adi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160703/110e4b75/attachment-0002.html>

From clayton.daley at gmail.com  Sun Jul  3 08:53:53 2016
From: clayton.daley at gmail.com (Clayton Daley)
Date: Sun, 3 Jul 2016 09:53:53 -0500
Subject: [Twisted-Python] Script which uploads coverage results to
 codecov failed, but reported success?
In-Reply-To: <CAFycZ9crDrVJ9_iFUDUQ1C=ixUP02H+sakUFvgXDaaN6H-wahA@mail.gmail.com>
References: <CAG=rPVdVjJU3YEWu74vqQMsi5ZYH+G87rY3Q0P5fqh99AMHeYg@mail.gmail.com>
 <CAFycZ9crDrVJ9_iFUDUQ1C=ixUP02H+sakUFvgXDaaN6H-wahA@mail.gmail.com>
Message-ID: <CACKEAnX0A3CJkcQSSk0X44jSzak6Akc2FGvK+K9nd1Fn2YY36g@mail.gmail.com>

A bit of an aside... but both personally and in several businesses I work
with, I've use Lastpass to manage passwords. Because the passwords are
shared at the server, updated passwords are propagated to all users. It
also has a really nice 2-factor option where your phone just offers you an
"approve" button (no 6-digit codes to transcribe).

Clayton Daley

On Sun, Jul 3, 2016 at 2:27 AM, Adi Roiban <adi at roiban.ro> wrote:

>
>
> On 1 July 2016 at 19:34, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
>
>> Hi,
>>
>> For this pull request:
>>
>> https://github.com/twisted/twisted/pull/284
>>
>> This Windows build ran and tried to upload coverage results to codecov:
>>
>>
>> https://buildbot.twistedmatrix.com/builders/windows7-64-py2.7-coverage/builds/623/steps/shell_5/logs/stdio
>>
>> but failed with this:
>>
>>
> I can see that the Windows coverage builder is not using virtualenv + tox
> to run the coverage report.
>
> I suggest that we should first convert all builders to virtualenv + tox.
> There is a ticket pending review for that
> https://twistedmatrix.com/trac/ticket/8544
>
> Then I suggest to push the coverage from tox. There is a ticket pending
> review for that https://twistedmatrix.com/trac/ticket/8532
>
> --------
>
> With builders using virtual env + tox it should be much easier to work and
> debug issues as the exact commands executed by buildbot are no longer
> hardcoded in the buildbot configuration.
>
>
> --------
>
> I have setup a buildslave for Windows 2012R2 on Rackspace and I can see
> that the coverage was uploaded ...at least for trunk
>
>
> https://buildbot.twistedmatrix.com/builders/win-64-py2.7-coverage/builds/1/steps/shell_5/logs/stdio
>
> The PR for adding the Windows 2012 slave is waiting a review here
> https://github.com/twisted-infra/braid/pull/215
>
> ---------
>
> Craig, if you have access to the Windows 7 slave check the system clock.
> I no longer have access to the Win7 VNC as it looks like the password was
> changed.
>
>
> --
> Adi Roiban
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160703/3263a847/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Jul  3 10:10:46 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 3 Jul 2016 09:10:46 -0700
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <CAMcKhMTh8EnPb7+b51svbqHrj5ztZkw6bymZVj6jLmZYc9q22w@mail.gmail.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
 <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
 <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>
 <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>
 <CAG=rPVd+HF3LUnb6EX-UYuGDSqLk8-e7XT-AV26RCgt_phfU8g@mail.gmail.com>
 <78DF920E-B059-4369-BDA5-AA65319BF692@twistedmatrix.com>
 <CAFycZ9eWS56jAtqUJEGn1Vn7H2zgY+BV5_pQWRupWt6ex9j6hw@mail.gmail.com>
 <CAMcKhMTh8EnPb7+b51svbqHrj5ztZkw6bymZVj6jLmZYc9q22w@mail.gmail.com>
Message-ID: <CFE65ECB-B688-480B-B9F5-AA2F5DD46DA2@twistedmatrix.com>


> On Jul 3, 2016, at 01:53, Tristan Seligmann <mithrandi at mithrandi.net> wrote:
> 
> While I agree that 100% test coverage is an ideal worth aspiring to, I think getting there from the current state is going to be a large amount of work that yields very little benefit at this point in time; I would say that there are more important things to spend that effort on.

What we're talking about is requiring new patches to cover the test code that they change, not an instant bar for 100% coverage of all test code.

Since this is being couched in terms of "effort" - it seems to me that this discussion alone is already more effort than just covering a few errant lines of test code here and there. :).

For now, let's just bite the bullet and require 100% patch coverage from here on out.  If we hit a really nasty case where it really is a significant investment of effort, then maybe we can revisit this discussion and explore a better way to express this exception without losing information about test coverage completely.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160703/2b1db84c/attachment-0002.html>

From rodrigc at crodrigues.org  Sun Jul  3 13:32:55 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sun, 3 Jul 2016 12:32:55 -0700
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <CFE65ECB-B688-480B-B9F5-AA2F5DD46DA2@twistedmatrix.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
 <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
 <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>
 <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>
 <CAG=rPVd+HF3LUnb6EX-UYuGDSqLk8-e7XT-AV26RCgt_phfU8g@mail.gmail.com>
 <78DF920E-B059-4369-BDA5-AA65319BF692@twistedmatrix.com>
 <CAFycZ9eWS56jAtqUJEGn1Vn7H2zgY+BV5_pQWRupWt6ex9j6hw@mail.gmail.com>
 <CAMcKhMTh8EnPb7+b51svbqHrj5ztZkw6bymZVj6jLmZYc9q22w@mail.gmail.com>
 <CFE65ECB-B688-480B-B9F5-AA2F5DD46DA2@twistedmatrix.com>
Message-ID: <CAG=rPVd7n53F+oqC+RdU9p1X+kJXdR1qVady9BxsERp0cVvEJg@mail.gmail.com>

On Sun, Jul 3, 2016 at 9:10 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> For now, let's just bite the bullet and require 100% patch coverage from
> here on out.  If we hit a really nasty case where it really *is* a
> significant investment of effort, then maybe we can revisit this discussion
> and explore a better way to express this exception without losing
> information about test coverage completely.
>
>
Requiring 100% patch coverage sounds reasonable.  However, what if the
infrastructure for running coverage and uploading reports
to codecov.io isn't working?
Running coverage under Pypy is apparently not working (
https://github.com/twisted/twisted/pull/223#issuecomment-228626722 ).  This
is blocking forward progress on patches to fix the Pypy tests.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160703/d42206aa/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Jul  3 17:18:14 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 3 Jul 2016 16:18:14 -0700
Subject: [Twisted-Python] Script which uploads coverage results to
	codecov failed, but reported success?
In-Reply-To: <CAFycZ9crDrVJ9_iFUDUQ1C=ixUP02H+sakUFvgXDaaN6H-wahA@mail.gmail.com>
References: <CAG=rPVdVjJU3YEWu74vqQMsi5ZYH+G87rY3Q0P5fqh99AMHeYg@mail.gmail.com>
 <CAFycZ9crDrVJ9_iFUDUQ1C=ixUP02H+sakUFvgXDaaN6H-wahA@mail.gmail.com>
Message-ID: <EA9C60A1-2120-448F-8326-EFCE50D8A59C@twistedmatrix.com>


> On Jul 3, 2016, at 00:27, Adi Roiban <adi at roiban.ro> wrote:
> 
> I no longer have access to the Win7 VNC as it looks like the password was changed.

The password hasn't been changed, so I'm not sure why you're having trouble accessing it.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160703/f276ae0e/attachment-0002.html>

From rodrigc at crodrigues.org  Sun Jul  3 17:43:32 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sun, 3 Jul 2016 16:43:32 -0700
Subject: [Twisted-Python] Python 3 code coverage not working?
Message-ID: <CAG=rPVeC+bT1ErCfzNCsKYOsVKEobf_GPr-v2tecFTVppjL6Qw@mail.gmail.com>

Hi,

I submitted this pull request:
https://github.com/twisted/twisted/pull/224

and codecov is saying that only 66.67% of the patch is covered because it
is not hitting the Python 3 specific block:
https://codecov.io/gh/twisted/twisted/compare/502f3a1e2cc125d214b6b7df5b173aa91fc7f966...d286bf22f8b653f75dc3a22cedbe295370435163

This buildbot ran the build on Python 3 and uploaded a coverage report:
https://buildbot.twistedmatrix.com/builders/fedora22-py3.4-coverage/builds/630

Is something wrong here?  I don't understand how Python 3 coverage is not
reported.
--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160703/e8449628/attachment-0002.html>

From adi at roiban.ro  Mon Jul  4 00:00:08 2016
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 4 Jul 2016 07:00:08 +0100
Subject: [Twisted-Python] Python 3 code coverage not working?
In-Reply-To: <CAG=rPVeC+bT1ErCfzNCsKYOsVKEobf_GPr-v2tecFTVppjL6Qw@mail.gmail.com>
References: <CAG=rPVeC+bT1ErCfzNCsKYOsVKEobf_GPr-v2tecFTVppjL6Qw@mail.gmail.com>
Message-ID: <CAFycZ9fTXwFmC2c3si9VH37MWe=cmJQAs0xn8r-kzJF4p0+o4w@mail.gmail.com>

On 4 July 2016 at 00:43, Craig Rodrigues <rodrigc at crodrigues.org> wrote:

> Hi,
>
> I submitted this pull request:
> https://github.com/twisted/twisted/pull/224
>
> and codecov is saying that only 66.67% of the patch is covered because it
> is not hitting the Python 3 specific block:
>
> https://codecov.io/gh/twisted/twisted/compare/502f3a1e2cc125d214b6b7df5b173aa91fc7f966...d286bf22f8b653f75dc3a22cedbe295370435163
>
> This buildbot ran the build on Python 3 and uploaded a coverage report:
>
> https://buildbot.twistedmatrix.com/builders/fedora22-py3.4-coverage/builds/630
>
> Is something wrong here?  I don't understand how Python 3 coverage is not
> reported.
>

Only the modules (including the test modules) from dist3.py are executed on
Python3
https://github.com/twisted/twisted/blob/trunk/twisted/python/dist3.py

In the header of that file you can see

# -*- test-case-name: twisted.python.test.test_dist3 -*-

and also in the test modules we have

twisted.python.test.test_dist3

---------------

That is you need to make the changes in that module

twisted.python.test.test_dist is not executed on Python3 ... hence its
coverage is not reported on Python3

Hope this helps!

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160704/54cb797c/attachment-0002.html>

From rodrigc at crodrigues.org  Mon Jul  4 01:00:40 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 4 Jul 2016 00:00:40 -0700
Subject: [Twisted-Python] Python 3 code coverage not working?
In-Reply-To: <CAFycZ9fTXwFmC2c3si9VH37MWe=cmJQAs0xn8r-kzJF4p0+o4w@mail.gmail.com>
References: <CAG=rPVeC+bT1ErCfzNCsKYOsVKEobf_GPr-v2tecFTVppjL6Qw@mail.gmail.com>
 <CAFycZ9fTXwFmC2c3si9VH37MWe=cmJQAs0xn8r-kzJF4p0+o4w@mail.gmail.com>
Message-ID: <CAG=rPVfJC=gJCypTUUdOgTUWo3mFwpxvvcOQ16P+VBfmbz-dqQ@mail.gmail.com>

On Sun, Jul 3, 2016 at 11:00 PM, Adi Roiban <adi at roiban.ro> wrote:

>
>
>
> On 4 July 2016 at 00:43, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
>
>> Hi,
>>
>> I submitted this pull request:
>> https://github.com/twisted/twisted/pull/224
>>
>> and codecov is saying that only 66.67% of the patch is covered because it
>> is not hitting the Python 3 specific block:
>>
>> https://codecov.io/gh/twisted/twisted/compare/502f3a1e2cc125d214b6b7df5b173aa91fc7f966...d286bf22f8b653f75dc3a22cedbe295370435163
>>
>> This buildbot ran the build on Python 3 and uploaded a coverage report:
>>
>> https://buildbot.twistedmatrix.com/builders/fedora22-py3.4-coverage/builds/630
>>
>> Is something wrong here?  I don't understand how Python 3 coverage is not
>> reported.
>>
>
> Only the modules (including the test modules) from dist3.py are executed
> on Python3
> https://github.com/twisted/twisted/blob/trunk/twisted/python/dist3.py
>
> In the header of that file you can see
>
> # -*- test-case-name: twisted.python.test.test_dist3 -*-
>
> and also in the test modules we have
>
> twisted.python.test.test_dist3
>
> ---------------
>
> That is you need to make the changes in that module
>
> twisted.python.test.test_dist is not executed on Python3 ... hence its
> coverage is not reported on Python3
>
>
>
Is it possible to add the actual invocation of setup.py to coverage?

That seems like a hole that the actual invocation of setup.py that does the
build and install
is not part of the coverage reporting.  setup.py is just a Python script,
so why can't it be run under coverage?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160704/34a2b9b9/attachment-0002.html>

From cory at lukasa.co.uk  Mon Jul  4 04:06:09 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Mon, 4 Jul 2016 11:06:09 +0100
Subject: [Twisted-Python] Buildbot upgrade to latest eight branch
In-Reply-To: <CAFycZ9dYrkvdWd7R9tmxeKGJGZgMhE4Rkuy=8LMMv6+kiSpt5Q@mail.gmail.com>
References: <CAFycZ9en8Vzts5s8Z4+vu8d1q73okX6736de=CH6XcedgsDQrw@mail.gmail.com>
 <5C1A7E78-BB95-4FC1-B323-7469916B443C@twistedmatrix.com>
 <CAFycZ9fPqJ1ec-WddC1jVX8brCnPqZjNTZDTkjBniMWfMjubAA@mail.gmail.com>
 <CAOtB_kmghLME7QMWp0C4mq3894U5bws=yXSfbBxEfuLJr9vffA@mail.gmail.com>
 <CAFycZ9dYrkvdWd7R9tmxeKGJGZgMhE4Rkuy=8LMMv6+kiSpt5Q@mail.gmail.com>
Message-ID: <8640C865-8381-486C-94A5-32BB1EFD926E@lukasa.co.uk>


> On 2 Jul 2016, at 23:42, Adi Roiban <adi at roiban.ro> wrote:
> 
> With this change, Buildbot should have a closer behavior to Travis-CI. That is, it will automatically start the builders and will report the build results in GitHub PR.

I spotted this in action today before I’d read this list post, so I just want to say: thanks so much for this Adi! This is one of those little changes that makes life a great deal nicer for me as a reviewer *and* contributor: not needing to do the dance with forcing the buildbots to run is really excellent.

Cory

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160704/e4b298ce/attachment.sig>

From cory at lukasa.co.uk  Mon Jul  4 04:22:32 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Mon, 4 Jul 2016 11:22:32 +0100
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAO38UCmZyw2rPSs+-xAAOtY4erfRaP4WBW3KjpNZWGdux1gD4g@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAFycZ9dxb+cn42A56QZeaZ2y4AvgL2KLnxCW0_vy+ftztimeNw@mail.gmail.com>
 <CAO38UCmZyw2rPSs+-xAAOtY4erfRaP4WBW3KjpNZWGdux1gD4g@mail.gmail.com>
Message-ID: <E303FDF5-784E-4EDD-8E61-D89EBE2113C6@lukasa.co.uk>

Good catch Paweł. I have opened this issue as Twisted issue #8558: https://twistedmatrix.com/trac/ticket/8558 <https://twistedmatrix.com/trac/ticket/8558>. I believe I know what the fix is and it’s fairly simple, so I’ll try to address this quickly and see if we can ship the fix in either the next pre-release or in the actual 16.3 release.

Cory

> On 3 Jul 2016, at 13:47, Paweł Miech <pawelmhm at gmail.com <mailto:pawelmhm at gmail.com>> wrote:
> 
> > AFAIK this is a known issue :
> 
> Ah thanks, that's ok.
> 
> One other thing I noticed a propos HTTP 2 is that it seems that reading relatively large file results in error: "priority.priority.MissingStreamError: 'Stream 1 not in tree'". I created simple gist to recreate this issue see here: https://gist.github.com/pawelmhm/3aa7e4f3a0e322364dcb75e3f0a32da4 <https://gist.github.com/pawelmhm/3aa7e4f3a0e322364dcb75e3f0a32da4> Resource is launched with Python 3.4, to test it on the client I used curl with http2 support. Data file <https://drive.google.com/file/d/0B6myg3n6dqcVcXpPdkJCNUJLOTA/view?pref=2&pli=1> is not huge (570kb) but the error is raised when I send it as a whole, when I only send some smaller chunk (e.g. first 100 items from file) it seems to work ok. It seems that Python-hyper is all right with this file, perhaps curl --http2 does something weird.
> 
> 2016-07-03 12:50 GMT+02:00 Adi Roiban <adi at roiban.ro <mailto:adi at roiban.ro>>:
> 
> 
> On 3 July 2016 at 11:15, Paweł Miech <pawelmhm at gmail.com <mailto:pawelmhm at gmail.com>> wrote:
> HTTP2 support sounds really exciting.
> 
> > Please let me know if you have any issues, as well as if you don't! If everything works well, that's a good thing for me to know :)
> 
> I played around with this today and found out that the command you recommend:
> 
> >  pip install -U https://twistedmatrix.com/Releases/pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2#egg=Twisted[http2,tls] <https://twistedmatrix.com/Releases/pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2#egg=Twisted[http2,tls]>
> does NOT install dependencies when ran on Python 3, I had to manually install h2 to HTTP2 support to work. It works ok on Python 2. My installation logs on Python 3.4 look like this:
> 
> 
> AFAIK this is a known issue :
> 
> see https://github.com/twisted/twisted/blob/trunk/docs/installation/howto/optional.rst <https://github.com/twisted/twisted/blob/trunk/docs/installation/howto/optional.rst>
> 
> 
> 
> --
> Adi Roiban
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160704/3b0f73ea/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160704/3b0f73ea/attachment.sig>

From adi at roiban.ro  Mon Jul  4 04:30:55 2016
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 4 Jul 2016 11:30:55 +0100
Subject: [Twisted-Python] Python 3 code coverage not working?
In-Reply-To: <CAG=rPVfJC=gJCypTUUdOgTUWo3mFwpxvvcOQ16P+VBfmbz-dqQ@mail.gmail.com>
References: <CAG=rPVeC+bT1ErCfzNCsKYOsVKEobf_GPr-v2tecFTVppjL6Qw@mail.gmail.com>
 <CAFycZ9fTXwFmC2c3si9VH37MWe=cmJQAs0xn8r-kzJF4p0+o4w@mail.gmail.com>
 <CAG=rPVfJC=gJCypTUUdOgTUWo3mFwpxvvcOQ16P+VBfmbz-dqQ@mail.gmail.com>
Message-ID: <CAFycZ9dmsr+6RgkQrOu6TPE-zA1vwLTat=nssFP-JVt9Ce-cew@mail.gmail.com>

On 4 July 2016 at 08:00, Craig Rodrigues <rodrigc at crodrigues.org> wrote:

>
>
> On Sun, Jul 3, 2016 at 11:00 PM, Adi Roiban <adi at roiban.ro> wrote:
>
>>
>>
>>
>> On 4 July 2016 at 00:43, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
>>
>>> Hi,
>>>
>>> I submitted this pull request:
>>> https://github.com/twisted/twisted/pull/224
>>>
>>> and codecov is saying that only 66.67% of the patch is covered because
>>> it is not hitting the Python 3 specific block:
>>>
>>> https://codecov.io/gh/twisted/twisted/compare/502f3a1e2cc125d214b6b7df5b173aa91fc7f966...d286bf22f8b653f75dc3a22cedbe295370435163
>>>
>>> This buildbot ran the build on Python 3 and uploaded a coverage report:
>>>
>>> https://buildbot.twistedmatrix.com/builders/fedora22-py3.4-coverage/builds/630
>>>
>>> Is something wrong here?  I don't understand how Python 3 coverage is
>>> not reported.
>>>
>>
>> Only the modules (including the test modules) from dist3.py are executed
>> on Python3
>> https://github.com/twisted/twisted/blob/trunk/twisted/python/dist3.py
>>
>> In the header of that file you can see
>>
>> # -*- test-case-name: twisted.python.test.test_dist3 -*-
>>
>> and also in the test modules we have
>>
>> twisted.python.test.test_dist3
>>
>> ---------------
>>
>> That is you need to make the changes in that module
>>
>> twisted.python.test.test_dist is not executed on Python3 ... hence its
>> coverage is not reported on Python3
>>
>>
>>
> Is it possible to add the actual invocation of setup.py to coverage?
>
> That seems like a hole that the actual invocation of setup.py that does
> the build and install
> is not part of the coverage reporting.  setup.py is just a Python script,
> so why can't it be run under coverage?
>
>
We can have a test for setup.py, it just needs someone to write that test :)

Regards,
Adi

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160704/20faf4d6/attachment-0002.html>

From rodrigc at crodrigues.org  Mon Jul  4 04:52:49 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 4 Jul 2016 03:52:49 -0700
Subject: [Twisted-Python] Python 3 code coverage not working?
In-Reply-To: <CAFycZ9dmsr+6RgkQrOu6TPE-zA1vwLTat=nssFP-JVt9Ce-cew@mail.gmail.com>
References: <CAG=rPVeC+bT1ErCfzNCsKYOsVKEobf_GPr-v2tecFTVppjL6Qw@mail.gmail.com>
 <CAFycZ9fTXwFmC2c3si9VH37MWe=cmJQAs0xn8r-kzJF4p0+o4w@mail.gmail.com>
 <CAG=rPVfJC=gJCypTUUdOgTUWo3mFwpxvvcOQ16P+VBfmbz-dqQ@mail.gmail.com>
 <CAFycZ9dmsr+6RgkQrOu6TPE-zA1vwLTat=nssFP-JVt9Ce-cew@mail.gmail.com>
Message-ID: <CAG=rPVcq-c385FFs8UCUL4=Hwf--jxdbE6kE=gAKDR47-kKexg@mail.gmail.com>

On Mon, Jul 4, 2016 at 3:30 AM, Adi Roiban <adi at roiban.ro> wrote:


>
>
> Is it possible to add the actual invocation of setup.py to coverage?
>>
>
>
> That seems like a hole that the actual invocation of setup.py that does
>> the build and install
>>
>
> is not part of the coverage reporting.  setup.py is just a Python script,
>> so why can't it be run under coverage?
>>
>
>
>
> We can have a test for setup.py, it just needs someone to write that test
> :)
>
>
>
Why can't we run setup.py directly under coverage, during the coverage
build?
Isn't running setup.py during the build one way of testing it?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160704/ce2aa264/attachment-0002.html>

From rodrigc at crodrigues.org  Mon Jul  4 05:27:23 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 4 Jul 2016 04:27:23 -0700
Subject: [Twisted-Python] Python 3 code coverage not working?
In-Reply-To: <CAFycZ9fTXwFmC2c3si9VH37MWe=cmJQAs0xn8r-kzJF4p0+o4w@mail.gmail.com>
References: <CAG=rPVeC+bT1ErCfzNCsKYOsVKEobf_GPr-v2tecFTVppjL6Qw@mail.gmail.com>
 <CAFycZ9fTXwFmC2c3si9VH37MWe=cmJQAs0xn8r-kzJF4p0+o4w@mail.gmail.com>
Message-ID: <CAG=rPVc1VXTm35NJ3qyVFPstR2xw=TGHq9mr8UvA2tEOhDHx4Q@mail.gmail.com>

On Sun, Jul 3, 2016 at 11:00 PM, Adi Roiban <adi at roiban.ro> wrote:

>
>
> Only the modules (including the test modules) from dist3.py are executed
> on Python3
> https://github.com/twisted/twisted/blob/trunk/twisted/python/dist3.py
>
> In the header of that file you can see
>
> # -*- test-case-name: twisted.python.test.test_dist3 -*-
>
> and also in the test modules we have
>
> twisted.python.test.test_dist3
>
> ---------------
>
> That is you need to make the changes in that module
>
> twisted.python.test.test_dist is not executed on Python3 ... hence its
> coverage is not reported on Python3
>
>


In https://github.com/twisted/twisted/pull/224 , I made no changes to
twisted/python/dist3.py, so
making changes to test_dist3.py will not help.

I added twisted.python.test.test_dist to the list of tests executed on
Python 3 in https://github.com/twisted/twisted/pull/288 and that
fixed the coverage problem.

I still think that setup.py should be invoked under coverage (I assume in
tox.ini)  in the coverage build,
without writing a separate test for setup.py

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160704/9cc3fcbc/attachment-0002.html>

From adi at roiban.ro  Mon Jul  4 05:36:40 2016
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 4 Jul 2016 12:36:40 +0100
Subject: [Twisted-Python] Python 3 code coverage not working?
In-Reply-To: <CAG=rPVc1VXTm35NJ3qyVFPstR2xw=TGHq9mr8UvA2tEOhDHx4Q@mail.gmail.com>
References: <CAG=rPVeC+bT1ErCfzNCsKYOsVKEobf_GPr-v2tecFTVppjL6Qw@mail.gmail.com>
 <CAFycZ9fTXwFmC2c3si9VH37MWe=cmJQAs0xn8r-kzJF4p0+o4w@mail.gmail.com>
 <CAG=rPVc1VXTm35NJ3qyVFPstR2xw=TGHq9mr8UvA2tEOhDHx4Q@mail.gmail.com>
Message-ID: <CAFycZ9fL74+b6B1SOtj6ifAsT8LeBjc56Ec_3Fi33_7fZ9H2mg@mail.gmail.com>

On 4 July 2016 at 12:27, Craig Rodrigues <rodrigc at crodrigues.org> wrote:

> On Sun, Jul 3, 2016 at 11:00 PM, Adi Roiban <adi at roiban.ro> wrote:
>
>>
>>
>> Only the modules (including the test modules) from dist3.py are executed
>> on Python3
>> https://github.com/twisted/twisted/blob/trunk/twisted/python/dist3.py
>>
>> In the header of that file you can see
>>
>> # -*- test-case-name: twisted.python.test.test_dist3 -*-
>>
>> and also in the test modules we have
>>
>> twisted.python.test.test_dist3
>>
>> ---------------
>>
>> That is you need to make the changes in that module
>>
>> twisted.python.test.test_dist is not executed on Python3 ... hence its
>> coverage is not reported on Python3
>>
>>
>
>
> In https://github.com/twisted/twisted/pull/224 , I made no changes to
> twisted/python/dist3.py, so
> making changes to test_dist3.py will not help.
>
>
I added twisted.python.test.test_dist to the list of tests executed on
> Python 3 in https://github.com/twisted/twisted/pull/288 and that
> fixed the coverage problem.
>
>
I think that dist.py vs dist3.py was made on purpose as 2 different file.
That is, you should not have any `if _PY3` code in any of those files.

But I might be wrong :)

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160704/058a3d5e/attachment-0002.html>

From adi at roiban.ro  Mon Jul  4 05:39:18 2016
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 4 Jul 2016 12:39:18 +0100
Subject: [Twisted-Python] Buildbot upgrade to latest eight branch
In-Reply-To: <8640C865-8381-486C-94A5-32BB1EFD926E@lukasa.co.uk>
References: <CAFycZ9en8Vzts5s8Z4+vu8d1q73okX6736de=CH6XcedgsDQrw@mail.gmail.com>
 <5C1A7E78-BB95-4FC1-B323-7469916B443C@twistedmatrix.com>
 <CAFycZ9fPqJ1ec-WddC1jVX8brCnPqZjNTZDTkjBniMWfMjubAA@mail.gmail.com>
 <CAOtB_kmghLME7QMWp0C4mq3894U5bws=yXSfbBxEfuLJr9vffA@mail.gmail.com>
 <CAFycZ9dYrkvdWd7R9tmxeKGJGZgMhE4Rkuy=8LMMv6+kiSpt5Q@mail.gmail.com>
 <8640C865-8381-486C-94A5-32BB1EFD926E@lukasa.co.uk>
Message-ID: <CAFycZ9cp1N5+L0-RVd6s+wGmBnbApX++R_=qhQhHScT3SA6k2w@mail.gmail.com>

On 4 July 2016 at 11:06, Cory Benfield <cory at lukasa.co.uk> wrote:

>
> > On 2 Jul 2016, at 23:42, Adi Roiban <adi at roiban.ro> wrote:
> >
> > With this change, Buildbot should have a closer behavior to Travis-CI.
> That is, it will automatically start the builders and will report the build
> results in GitHub PR.
>
> I spotted this in action today before I’d read this list post, so I just
> want to say: thanks so much for this Adi! This is one of those little
> changes that makes life a great deal nicer for me as a reviewer *and*
> contributor: not needing to do the dance with forcing the buildbots to run
> is really excellent.
>
>
With this change you no longer have to create duplicate PR for "imported"
branches . Just create the branch and Travis and Buildbot will
automatically do their job and you can merge the "imported" branch without
a PR.

"Imported" branch is a branch hosted in the Twisted main repo but which
contains changes merged from a forked repo.


-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160704/5c433c48/attachment-0002.html>

From rodrigc at crodrigues.org  Mon Jul  4 05:48:26 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 4 Jul 2016 04:48:26 -0700
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
Message-ID: <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>

On Sun, Jul 3, 2016 at 3:15 AM, Paweł Miech <pawelmhm at gmail.com> wrote:

> HTTP2 support sounds really exciting.
>
> > Please let me know if you have any issues, as well as if you don't! If
> everything works well, that's a good thing for me to know :)
>
> I played around with this today and found out that the command you
> recommend:
>
> >  pip install -U https://twistedmatrix.com/Releases
> /pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2#egg=Twisted[http2,tls]
>
> does NOT install dependencies when ran on Python 3, I had to manually
> install h2 to HTTP2 support to work. It works ok on Python 2. My
> installation logs on Python 3.4 look like this:
>
>
I think I've fixed that in trunk with this:

https://github.com/twisted/twisted/pull/287

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160704/576486fd/attachment-0002.html>

From tom.prince at ualberta.net  Mon Jul  4 12:56:08 2016
From: tom.prince at ualberta.net (Tom Prince)
Date: Mon, 4 Jul 2016 12:56:08 -0600
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <CAFycZ9erykD7+bEe7LE13i_mvmoPpKVH8OtrGyOTExqx5n47vg@mail.gmail.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
 <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
 <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>
 <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>
 <CAG=rPVd+HF3LUnb6EX-UYuGDSqLk8-e7XT-AV26RCgt_phfU8g@mail.gmail.com>
 <78DF920E-B059-4369-BDA5-AA65319BF692@twistedmatrix.com>
 <CAFycZ9eWS56jAtqUJEGn1Vn7H2zgY+BV5_pQWRupWt6ex9j6hw@mail.gmail.com>
 <CAMcKhMTh8EnPb7+b51svbqHrj5ztZkw6bymZVj6jLmZYc9q22w@mail.gmail.com>
 <CAFycZ9erykD7+bEe7LE13i_mvmoPpKVH8OtrGyOTExqx5n47vg@mail.gmail.com>
Message-ID: <CAOtB_km6NCRE4jBqG=HLV7MOKZCHAAvMa+mCAmwrV_2uojbVtg@mail.gmail.com>

On Sun, Jul 3, 2016 at 8:13 AM, Adi Roiban <adi at roiban.ro> wrote:
> I would prefer to see the coverage reports for tests, even if we don't
> enforce 100% coverage.  Is a quick way to check that the test is executed on
> at least one builder.

I think this is definitely desirable.

> We are preaching the Ultimate Quality Development System (UQDS) (tm) but [...]

Reading through
https://twistedmatrix.com/trac/wiki/UltimateQualityDevelopmentSystem
it doesn't actually say anything about linters or code coverage or warnings.
That isn't t to say that the things you suggest are not valuable,
just that calling a process that doesn't enforce all of those things
absolutely all the time
as "Almost Ultimate Quality Development System" is doing a disservice
to the idea.

I'll admit that I haven't read that as closely as I should, but
re-reading it now, I see:
"A reviewer reviews the completed work, and provides feedback: at
least one good thing about the work, at least one area that needs
improvement, and a judgement as to whether the good qualities
ultimately outweigh the bad, i.e. whether the branch should be
merged."
which explicitly allows for imperfections in the code, as long as
there is an overall improvement.

> [...] that test code is a 2nd class citizen [...]

It isn't necessarily that test code is a second class citizen,
but the purpose of the code is different that implementation code,
so the trade-offs that make sense in each context might not be the same.

-- Tom



From adi at roiban.ro  Tue Jul  5 06:18:23 2016
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 5 Jul 2016 13:18:23 +0100
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <CAG=rPVd7n53F+oqC+RdU9p1X+kJXdR1qVady9BxsERp0cVvEJg@mail.gmail.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
 <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
 <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>
 <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>
 <CAG=rPVd+HF3LUnb6EX-UYuGDSqLk8-e7XT-AV26RCgt_phfU8g@mail.gmail.com>
 <78DF920E-B059-4369-BDA5-AA65319BF692@twistedmatrix.com>
 <CAFycZ9eWS56jAtqUJEGn1Vn7H2zgY+BV5_pQWRupWt6ex9j6hw@mail.gmail.com>
 <CAMcKhMTh8EnPb7+b51svbqHrj5ztZkw6bymZVj6jLmZYc9q22w@mail.gmail.com>
 <CFE65ECB-B688-480B-B9F5-AA2F5DD46DA2@twistedmatrix.com>
 <CAG=rPVd7n53F+oqC+RdU9p1X+kJXdR1qVady9BxsERp0cVvEJg@mail.gmail.com>
Message-ID: <CAFycZ9fBcAqb6MbjCiWZVLFjH5w0iZGreSM0PSDTKTrLycL8Nw@mail.gmail.com>

On 3 July 2016 at 20:32, Craig Rodrigues <rodrigc at crodrigues.org> wrote:

>
>
> On Sun, Jul 3, 2016 at 9:10 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>
> wrote:
>
>>
>> For now, let's just bite the bullet and require 100% patch coverage from
>> here on out.  If we hit a really nasty case where it really *is* a
>> significant investment of effort, then maybe we can revisit this discussion
>> and explore a better way to express this exception without losing
>> information about test coverage completely.
>>
>>
> Requiring 100% patch coverage sounds reasonable.  However, what if the
> infrastructure for running coverage and uploading reports
> to codecov.io isn't working?
> Running coverage under Pypy is apparently not working (
> https://github.com/twisted/twisted/pull/223#issuecomment-228626722 ).
> This is blocking forward progress on patches to fix the Pypy tests.
>
>
I have disabled codecov patch coverage for now as I think that codecov.io
reporting is buggy.

For coverage merge protection please see See
https://github.com/twisted-infra/braid/issues/213

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160705/e1aa5411/attachment-0002.html>

From rodrigc at crodrigues.org  Tue Jul  5 16:26:22 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 5 Jul 2016 15:26:22 -0700
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <CAFycZ9fBcAqb6MbjCiWZVLFjH5w0iZGreSM0PSDTKTrLycL8Nw@mail.gmail.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
 <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
 <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>
 <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>
 <CAG=rPVd+HF3LUnb6EX-UYuGDSqLk8-e7XT-AV26RCgt_phfU8g@mail.gmail.com>
 <78DF920E-B059-4369-BDA5-AA65319BF692@twistedmatrix.com>
 <CAFycZ9eWS56jAtqUJEGn1Vn7H2zgY+BV5_pQWRupWt6ex9j6hw@mail.gmail.com>
 <CAMcKhMTh8EnPb7+b51svbqHrj5ztZkw6bymZVj6jLmZYc9q22w@mail.gmail.com>
 <CFE65ECB-B688-480B-B9F5-AA2F5DD46DA2@twistedmatrix.com>
 <CAG=rPVd7n53F+oqC+RdU9p1X+kJXdR1qVady9BxsERp0cVvEJg@mail.gmail.com>
 <CAFycZ9fBcAqb6MbjCiWZVLFjH5w0iZGreSM0PSDTKTrLycL8Nw@mail.gmail.com>
Message-ID: <CAG=rPVdbrNOHKpVS4_-yNvJYE9E=sWjwK3T_W59V4Yq1e7v2SA@mail.gmail.com>

On Tue, Jul 5, 2016 at 5:18 AM, Adi Roiban <adi at roiban.ro> wrote:
>
>
>
> I have disabled codecov patch coverage for now as I think that codecov.io
reporting is buggy.
>
> For coverage merge protection please see See
https://github.com/twisted-infra/braid/issues/213
>

I'm still seeing problems with codecov.  In this build:
https://buildbot.twistedmatrix.com/builders/windows7-64-py2.7-coverage/builds/680

uploading coverage results is failing:

==> Uploading
    .url https://codecov.io
    .query
package=py2.0.5&yaml=codecov.yml&token=<secret>&build=windows64py27&branch=8503-markrwilliams-pypy-indicator&commit=9176793afb9ca8fcafaf4f3d518f6a4166deddb4
    Pinging Codecov...
    Uploading to S3...
Error: 403 Client Error: Forbidden for url:
https://codecov.s3.amazonaws.com/v4/raw/2016-07-05/BB05435E28F8047E9B3D49B4B7BFA4B3/9176793afb9ca8fcafaf4f3d518f6a4166deddb4/10b1e59d-607a-4c5d-939d-6903844ba287.txt?AWSAccessKeyId=AKIAIHLZSCQCS4WIHD4A&Expires=1467755156&Signature=bmYejCo3NYpn7qPFLatb0RGydLk%3D


I am not sure, but I think this is blocking coverage results from being
reported in this PR: https://github.com/twisted/twisted/pull/223

--

Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160705/b730442a/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Jul  5 18:17:09 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 5 Jul 2016 17:17:09 -0700
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <CAFycZ9fBcAqb6MbjCiWZVLFjH5w0iZGreSM0PSDTKTrLycL8Nw@mail.gmail.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
 <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
 <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>
 <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>
 <CAG=rPVd+HF3LUnb6EX-UYuGDSqLk8-e7XT-AV26RCgt_phfU8g@mail.gmail.com>
 <78DF920E-B059-4369-BDA5-AA65319BF692@twistedmatrix.com>
 <CAFycZ9eWS56jAtqUJEGn1Vn7H2zgY+BV5_pQWRupWt6ex9j6hw@mail.gmail.com>
 <CAMcKhMTh8EnPb7+b51svbqHrj5ztZkw6bymZVj6jLmZYc9q22w@mail.gmail.com>
 <CFE65ECB-B688-480B-B9F5-AA2F5DD46DA2@twistedmatrix.com>
 <CAG=rPVd7n53F+oqC+RdU9p1X+kJXdR1qVady9BxsERp0cVvEJg@mail.gmail.com>
 <CAFycZ9fBcAqb6MbjCiWZVLFjH5w0iZGreSM0PSDTKTrLycL8Nw@mail.gmail.com>
Message-ID: <EA67A8B8-79F4-417B-972D-660BE1E1E6DE@twistedmatrix.com>


> On Jul 5, 2016, at 05:18, Adi Roiban <adi at roiban.ro> wrote:
> 
> 
> 
> On 3 July 2016 at 20:32, Craig Rodrigues <rodrigc at crodrigues.org <mailto:rodrigc at crodrigues.org>> wrote:
> 
> 
> On Sun, Jul 3, 2016 at 9:10 AM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> For now, let's just bite the bullet and require 100% patch coverage from here on out.  If we hit a really nasty case where it really is a significant investment of effort, then maybe we can revisit this discussion and explore a better way to express this exception without losing information about test coverage completely.
> 
> 
> Requiring 100% patch coverage sounds reasonable.  However, what if the infrastructure for running coverage and uploading reports
> to codecov.io <http://codecov.io/> isn't working? 
> Running coverage under Pypy is apparently not working ( https://github.com/twisted/twisted/pull/223#issuecomment-228626722 <https://github.com/twisted/twisted/pull/223#issuecomment-228626722> ).  This is blocking forward progress on patches to fix the Pypy tests.
> 
> 
> I have disabled codecov patch coverage for now as I think that codecov.io <http://codecov.io/> reporting is buggy.
> 
> For coverage merge protection please see See https://github.com/twisted-infra/braid/issues/213 <https://github.com/twisted-infra/braid/issues/213>
Thanks for documenting this.

This PR was recently rejected due to lack of test coverage (with no other feedback): https://twistedmatrix.com/trac/ticket/5705#comment:15.  If we believe codecov is buggy, are we sure that this is actually the case, and it wasn't just a codecov bug?

-glyph



-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160705/4f22ae08/attachment-0002.html>

From hawkowl at atleastfornow.net  Wed Jul  6 06:41:37 2016
From: hawkowl at atleastfornow.net (Amber Hawkie Brown)
Date: Wed, 6 Jul 2016 20:41:37 +0800
Subject: [Twisted-Python] Twisted 16.3.0 Release Announcement
Message-ID: <1E7576CB-F343-4B87-B464-30530D9D8718@atleastfornow.net>

On behalf of Twisted Matrix Laboratories, I am honoured to announce the release of Twisted 16.3.0.

The highlights of this release are:

- The Git migration has happened, so we've updated our development documentation to match. We're now trialling accepting pull requests at github.com/twisted/twisted, so if you've ever wanted an excuse to contribute, now's the chance!
- In our steady shedding of baggage, twisted.spread.ui, twisted.manhole (not to be confused with twisted.conch.manhole!), and a bunch of old and deprecated stuff from twisted.python.reflect and twisted.protocols.sip have been removed.
- twisted.web's HTTP server now handles pipelined requests better -- it used to try and process them in parallel, but this was fraught with problems and now it processes them in series, which is less surprising to code that expects the Request's transport to not be buffered (e.g. WebSockets). There is also a bugfix for HTTP timeouts not working in 16.2.
- Twisted now has HTTP/2 support in its web server! This is currently not available by default -- you will need to install hyper-h2, which is available in the [h2] setuptools extras. If you want to play around with it "pip install twisted[h2]" (on Python 2, a bugfix release will make it available on Python 3) and add "h2" to your Site's acceptableProtocols.
- 53 tickets closed overall, including cleanups that move us closer to a total Python 3 port.

For more information, check the NEWS file (link provided below).

You can find the downloads at <https://pypi.python.org/pypi/Twisted> (or alternatively <http://twistedmatrix.com/trac/wiki/Downloads>). The NEWS file is also available at <https://github.com/twisted/twisted/blob/twisted-16.3.0/NEWS>.

Many thanks to everyone who had a part in this release - the supporters of the Twisted Software Foundation, the developers who contributed code as well as documentation, and all the people building great things with Twisted!

Twisted Regards,
Amber Brown (HawkOwl)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160706/c527332c/attachment.sig>

From glyph at twistedmatrix.com  Thu Jul  7 13:50:25 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 7 Jul 2016 12:50:25 -0700
Subject: [Twisted-Python] dropping old pyOpenSSL versions
Message-ID: <9AD2CDAD-D794-48A5-8CA8-74537422EED6@twistedmatrix.com>

In the past, we've been very conservative about updating to require new versions of pyOpenSSL and cryptography.

Right now we have a patch, <https://github.com/twisted/twisted/pull/146> (<https://twistedmatrix.com/trac/ticket/8441#comment:1>), that I'd like to just land.  However, it establishes a dependency on a new version of pyOpenSSL, which transitively establishes a dependency on a new version of Cryptography.

Generally, my thinking has evolved over the last few years to think that security dependencies like this should move fast, especially on projects (like pyOpenSSL and cryptography specifically) that don't maintain "stable" branches which do security patch-releases.

In this specific case, the fix is not urgent; as it turns out, the netscape SPKI APIs actually do do the desired thing, which is just hashing the DER bytes of the key.  (At the time I made the change to use Netscape SPKI, I thought it might be including somet other junk in the hash; we just lucked out here.)  It's just a gross API for doing it which we should stop using now that better APIs have been exposed to do the same thing.

However, it bears discussing - what are the things that hold us to older versions of pyOpenSSL and cryptography?  Is there any good reason not to move our version pins forward whenever there's a new API or feature that we'd like, even for something simple like this cleanup?

My default position is "upgrade upgrade upgrade" so if there's not a lot of interest in this discussion I'll probably just land the PR in question as-is.

Thanks all,

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160707/eebb28aa/attachment-0002.html>

From clayton.daley at gmail.com  Thu Jul  7 15:06:52 2016
From: clayton.daley at gmail.com (Clayton Daley)
Date: Thu, 7 Jul 2016 16:06:52 -0500
Subject: [Twisted-Python] dropping old pyOpenSSL versions
In-Reply-To: <9AD2CDAD-D794-48A5-8CA8-74537422EED6@twistedmatrix.com>
References: <9AD2CDAD-D794-48A5-8CA8-74537422EED6@twistedmatrix.com>
Message-ID: <CACKEAnXBwsGapZCw3nLdD-p1m3F+uFFVqybtDEHM4YSqJJOQwg@mail.gmail.com>

I don't object to this specific change (we're on shiny new code), but want
to offer some food-for-thought:

1) Is newer really better in cryptography?  Heartbleed affected 1.0.1, but
not 1.0.0 and there are a bunch of vulnerabilities that only affect the
newer libraries (https://www.openssl.org/news/vulnerabilities.html).  It
even makes sense that the older libraries have been more-thoroughly
tested... so new code may just mean new vulnerabilities.

2) How does this impact regulated industries.  In healthcare (my current
industry), changing a library (especially cryptography) could mean:

   - An internal review to select a new version of the library
   - An internal change management process
   - Technical testing (perhaps a 3rd party audit)
   - A notification to clients of the change
   - Secondary reviews/testing at clients

The intensity of this process depends on the risk level of the system and
this could be a long and complicated process for some organizations.  Seems
like a more deliberate deprecation policy would make it easier to plan
ahead.

Clayton Daley


On Thu, Jul 7, 2016 at 2:50 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

> In the past, we've been very conservative about updating to require new
> versions of pyOpenSSL and cryptography.
>
> Right now we have a patch, <https://github.com/twisted/twisted/pull/146
> > (<https://twistedmatrix.com/trac/ticket/8441#comment:1>), that I'd like
> to just land.  However, it establishes a dependency on a new version of
> pyOpenSSL, which transitively establishes a dependency on a new version of
> Cryptography.
>
> Generally, my thinking has evolved over the last few years to think that
> security dependencies like this should move fast, especially on projects
> (like pyOpenSSL and cryptography specifically) that don't maintain "stable"
> branches which do security patch-releases.
>
> In this specific case, the fix is not urgent; as it turns out, the
> netscape SPKI APIs actually *do* do the desired thing, which is just
> hashing the DER bytes of the key.  (At the time I made the change to use
> Netscape SPKI, I thought it might be including somet other junk in the
> hash; we just lucked out here.)  It's just a gross API for doing it which
> we should stop using now that better APIs have been exposed to do the same
> thing.
>
> However, it bears discussing - what are the things that hold us to older
> versions of pyOpenSSL and cryptography?  Is there any good reason *not* to
> move our version pins forward whenever there's a new API or feature that
> we'd like, even for something simple like this cleanup?
>
> My default position is "upgrade upgrade upgrade" so if there's not a lot
> of interest in this discussion I'll probably just land the PR in question
> as-is.
>
> Thanks all,
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160707/3b01d7c9/attachment-0002.html>

From mithrandi at mithrandi.net  Thu Jul  7 16:03:45 2016
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Thu, 07 Jul 2016 22:03:45 +0000
Subject: [Twisted-Python] dropping old pyOpenSSL versions
In-Reply-To: <CACKEAnXBwsGapZCw3nLdD-p1m3F+uFFVqybtDEHM4YSqJJOQwg@mail.gmail.com>
References: <9AD2CDAD-D794-48A5-8CA8-74537422EED6@twistedmatrix.com>
 <CACKEAnXBwsGapZCw3nLdD-p1m3F+uFFVqybtDEHM4YSqJJOQwg@mail.gmail.com>
Message-ID: <CAMcKhMQrYKUKp6q7H-Taw9YnqP-JzPr1vKyOy5ErAZyZoNtD+A@mail.gmail.com>

On Thu, 7 Jul 2016 at 23:07 Clayton Daley <clayton.daley at gmail.com> wrote:

> I don't object to this specific change (we're on shiny new code), but want
> to offer some food-for-thought:
>
> 1) Is newer really better in cryptography?  Heartbleed affected 1.0.1, but
> not 1.0.0 and there are a bunch of vulnerabilities that only affect the
> newer libraries (https://www.openssl.org/news/vulnerabilities.html).  It
> even makes sense that the older libraries have been more-thoroughly
> tested... so new code may just mean new vulnerabilities.
>

First of all, newer cryptography and newer OpenSSL are different things.
Given that cryptography itself is mostly made of Python and cffi, not C
code, I think it's unlikely that a newer version of cryptography is likely
to be worse than an older one. Older libraries being "more thoroughly
tested" only really applies where a library has a plethora of simultaneous
release channels; for most libraries, using older versions just means
missing out on any fixes for issues that were found more recently than the
release was released.

Even regarding OpenSSL, which is a horrible pile of C, it's unlikely that
the potential of another *Heartbleed*-like issue is more dangerous than the
lack of actual known improvements.

2) How does this impact regulated industries.  In healthcare (my current
> industry), changing a library (especially cryptography) could mean:
>
>    - An internal review to select a new version of the library
>    - An internal change management process
>    - Technical testing (perhaps a 3rd party audit)
>    - A notification to clients of the change
>    - Secondary reviews/testing at clients
>
> The intensity of this process depends on the risk level of the system and
> this could be a long and complicated process for some organizations.  Seems
> like a more deliberate deprecation policy would make it easier to plan
> ahead.
>

Wouldn't all of the above apply equally to the new version of Twisted? I
would imagine you could upgrade Twisted and cryptography at the same time,
thus only doing one round of testing/review/etc. for both. (Perhaps I'm
missing something?)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160707/dc5808f0/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Jul  7 17:00:31 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 7 Jul 2016 16:00:31 -0700
Subject: [Twisted-Python] dropping old pyOpenSSL versions
In-Reply-To: <CACKEAnXBwsGapZCw3nLdD-p1m3F+uFFVqybtDEHM4YSqJJOQwg@mail.gmail.com>
References: <9AD2CDAD-D794-48A5-8CA8-74537422EED6@twistedmatrix.com>
 <CACKEAnXBwsGapZCw3nLdD-p1m3F+uFFVqybtDEHM4YSqJJOQwg@mail.gmail.com>
Message-ID: <6F737E29-D013-4E93-B5F1-C506FAAF0CA6@twistedmatrix.com>


> On Jul 7, 2016, at 2:06 PM, Clayton Daley <clayton.daley at gmail.com> wrote:
> 
> I don't object to this specific change (we're on shiny new code), but want to offer some food-for-thought:
> 
> 1) Is newer really better in cryptography?  Heartbleed affected 1.0.1, but not 1.0.0 and there are a bunch of vulnerabilities that only affect the newer libraries (https://www.openssl.org/news/vulnerabilities.html <https://www.openssl.org/news/vulnerabilities.html>).  It even makes sense that the older libraries have been more-thoroughly tested... so new code may just mean new vulnerabilities.

I can understand the point here - that upgrades are not zero-risk - but this is a very dangerous line of reasoning.  (I think "in cryptography" you really mean the general english word "cryptography" and not like "PyCA™ Cryptography™".)  It's dangerous because, as application developers, you and I aren't really _qualified_ to evaluate whether newer versions of security-critical libraries are more or less secure; the best we can do is always, always, always upgrade.  The solution to heartbleed was to upgrade to a newer version of 1.0.1, not to roll back to 0.9.8.

More importantly, heartbleed itself is not a general category of defect, in the sense that heartbleed itself shone a bright light directly on OpenSSL and exposed the real problem, which was massive underinvestment in critical security infrastructure.  The issue isn't that upgrading is dangerous, it's that letting critical infrastructure decay is dangerous.

One way that you can promote the decay of critical infrastructure is to defer upgrading out of vague fears about the upgrade going poorly rather than specific technical issues.

I should take the opportunity to point out that if you're a professional network software developer, you should really be giving a couple of bucks to the OpenSSL foundation: <https://www.openssl.org/support/donations.html>.  The most direct way to fight the decay of critical infrastructure is to fund it with cash money.  (And, for that matter, <https://twistedmatrix.com/trac/#DonatetoTwisted>...)

> 2) How does this impact regulated industries.  In healthcare (my current industry), changing a library (especially cryptography) could mean:
> An internal review to select a new version of the library
> An internal change management process
> Technical testing (perhaps a 3rd party audit)
> A notification to clients of the change
> Secondary reviews/testing at clients
> The intensity of this process depends on the risk level of the system and this could be a long and complicated process for some organizations.  Seems like a more deliberate deprecation policy would make it easier to plan ahead.

The problem with a lot of the regulatory standards that require this sort of laborious change-control is that during the entire period where all this redundant analysis and re-analysis of the change is happening, customers are still vulnerable (and in a health care context, this may mean even that lives remain at risk!).

My (entirely secondhand) understanding is that recognition is dawning in many compliance fields (HIPPA, PCI-DSS, SOX) that there is a mismatch between the realities of software development (delay in making changes == risk) and industrial change control (every change == risk), and auditors and regulators are beginning to take this into account.  This means that the ability to make changes quickly to ensure safe operation is slowly gaining ground over the ability to delay changes until sufficient evaluation has taken place.

This recognition is dawning because many of these reviews are, in fact, nonsense.  For example: "an internal review to select a new version of the library" - does every healthcare project have a qualified cryptographer and penetration tester to each independently spend the 6 months of careful code audits required to actually evaluate the relative security of new versions of OpenSSL, or does this internal review consist mainly of unqualified people pontificating about hypothetical risks, divorced from the technical realities of the upgrade in question?

My own experience has taught me that fear of changes like this is mostly developers being afraid of audit or compliance, rather than audit or compliance actually requiring it.  If you tell your auditor "we absolutely have to upgrade OpenSSL every week if an update is available", they'll usually figure out a way to do it.

I don't mean to jump down your throat here; the tone is definitely harsher than I would like, but I want it to be very clear why I have such strong feelings about upgrading security-critical dependencies.

Additionally, the Netscape SPKI APIs are disappearing from OpenSSL itself eventually, so this specific issue isn't just about upgrading - it's about preventing it from being difficult to upgrade in the future.  If we wait until the APIs are actually gone, rather than just deprecated, this may create friction around a critical security update.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160707/4be785fa/attachment-0002.html>

From clayton.daley at gmail.com  Thu Jul  7 17:00:47 2016
From: clayton.daley at gmail.com (Clayton Daley)
Date: Thu, 7 Jul 2016 18:00:47 -0500
Subject: [Twisted-Python] dropping old pyOpenSSL versions
In-Reply-To: <CAMcKhMQrYKUKp6q7H-Taw9YnqP-JzPr1vKyOy5ErAZyZoNtD+A@mail.gmail.com>
References: <9AD2CDAD-D794-48A5-8CA8-74537422EED6@twistedmatrix.com>
 <CACKEAnXBwsGapZCw3nLdD-p1m3F+uFFVqybtDEHM4YSqJJOQwg@mail.gmail.com>
 <CAMcKhMQrYKUKp6q7H-Taw9YnqP-JzPr1vKyOy5ErAZyZoNtD+A@mail.gmail.com>
Message-ID: <CACKEAnVoQfTAusPx+7ig4au5PUjaGcxGHHCX3g=eeVViqm0kDw@mail.gmail.com>

>
> First of all, newer cryptography and newer OpenSSL are different things.


The proposal was a change to pyOpenSSL.  If newer is better in all
(potentially) affected layers, then you've answered my question in the
affirmative.


> 2) How does this impact regulated industries.  In healthcare (my current
>> industry), changing a library (especially cryptography) could mean:
>>
>>    - An internal review to select a new version of the library
>>    - An internal change management process
>>    - Technical testing (perhaps a 3rd party audit)
>>    - A notification to clients of the change
>>    - Secondary reviews/testing at clients
>>
>> The intensity of this process depends on the risk level of the system and
>> this could be a long and complicated process for some organizations.  Seems
>> like a more deliberate deprecation policy would make it easier to plan
>> ahead.
>>
>
> Wouldn't all of the above apply equally to the new version of Twisted? I
> would imagine you could upgrade Twisted and cryptography at the same time,
> thus only doing one round of testing/review/etc. for both. (Perhaps I'm
> missing something?)
>

Regulations require an amount of scrutiny proportionate to the risk.  We're
small so it's not as obvious in our policies and procedures, but the
potential for big differences in process are exemplified by this paraphrase
from a vendor's document (since I'm not sure I can outright quote it):

Changes with a high rank are escalated to the individual in Role X and
> Committee Y for approval

Changes with a medium risk are escalated to the individual in Role X for
> approval

[presumably low risk changes aren't escalated]
>

So your question comes down to... is a point release in Twisted as risky as
a change to the cryptography stack? You'd certainly know better than I.

Clayton Daley
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160707/8b279a54/attachment-0002.html>

From clayton.daley at gmail.com  Thu Jul  7 17:20:07 2016
From: clayton.daley at gmail.com (Clayton Daley)
Date: Thu, 7 Jul 2016 18:20:07 -0500
Subject: [Twisted-Python] dropping old pyOpenSSL versions
In-Reply-To: <6F737E29-D013-4E93-B5F1-C506FAAF0CA6@twistedmatrix.com>
References: <9AD2CDAD-D794-48A5-8CA8-74537422EED6@twistedmatrix.com>
 <CACKEAnXBwsGapZCw3nLdD-p1m3F+uFFVqybtDEHM4YSqJJOQwg@mail.gmail.com>
 <6F737E29-D013-4E93-B5F1-C506FAAF0CA6@twistedmatrix.com>
Message-ID: <CACKEAnXM8v2_grPF1GEUb4W3qPugzE2XjYuEg-4PBKjLVf+NrQ@mail.gmail.com>

>
> I don't mean to jump down your throat here; the tone is definitely harsher
> than I would like, but I want it to be very clear why I have such strong
> feelings about upgrading security-critical dependencies.
>

I don't take it personally.  I do a little coding (hello startup) but I'm
actually the guy who:

   - Had to develop our Policies and Procedures (P&P) in conjunction with
   our Compliance consultant
   - Has to work with our lawyers to negotiate Information Security and
   Business Associate agreements with customers
   - Has to provide implementation details in request to our customers'
   security groups (I spent all day working through a 160 item self-assessment
   so it was top-of-mind for me)

When there's a vulnerability, you can fast track an upgrade because there's
a non-theoretical risk to doing nothing.  The problem is an "optional"
version bump.  It's all CYA.  If I don't follow my P&P, the federal
government, state government, and customers all have (extra) grounds to sue
my company (cofounder so literally *mine*).  If the consequence of waiting
are a transient Twisted bug or a delayed feature depending on a feature in
a blocked version, it's an easy choice.

Clayton Daley


On Thu, Jul 7, 2016 at 6:00 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Jul 7, 2016, at 2:06 PM, Clayton Daley <clayton.daley at gmail.com> wrote:
>
> I don't object to this specific change (we're on shiny new code), but want
> to offer some food-for-thought:
>
> 1) Is newer really better in cryptography?  Heartbleed affected 1.0.1, but
> not 1.0.0 and there are a bunch of vulnerabilities that only affect the
> newer libraries (https://www.openssl.org/news/vulnerabilities.html).  It
> even makes sense that the older libraries have been more-thoroughly
> tested... so new code may just mean new vulnerabilities.
>
>
> I can understand the point here - that upgrades are not zero-risk - but
> this is a very dangerous line of reasoning.  (I think "in cryptography" you
> really mean the general english word "cryptography" and not like "PyCA™
> Cryptography™".)  It's dangerous because, as application developers, you
> and I aren't really _qualified_ to evaluate whether newer versions of
> security-critical libraries are more or less secure; the best we can do is
> always, always, always upgrade.  The solution to heartbleed was to upgrade
> to a newer version of 1.0.1, not to roll back to 0.9.8.
>
> More importantly, heartbleed itself is not a general category of defect,
> in the sense that heartbleed itself shone a bright light directly on
> OpenSSL and exposed the real problem, which was massive underinvestment in
> critical security infrastructure.  The issue isn't that upgrading is
> dangerous, it's that letting critical infrastructure decay is dangerous.
>
> One way that you can *promote* the decay of critical infrastructure is to
> defer upgrading out of vague fears about the upgrade going poorly rather
> than specific technical issues.
>
> I should take the opportunity to point out that if you're a professional
> network software developer, you should really be giving a couple of bucks
> to the OpenSSL foundation: <https://www.openssl.org/support/donations.html>.
> The most direct way to fight the decay of critical infrastructure is to
> fund it with cash money.  (And, for that matter, <
> https://twistedmatrix.com/trac/#DonatetoTwisted>...)
>
> 2) How does this impact regulated industries.  In healthcare (my current
> industry), changing a library (especially cryptography) could mean:
>
>    - An internal review to select a new version of the library
>    - An internal change management process
>    - Technical testing (perhaps a 3rd party audit)
>    - A notification to clients of the change
>    - Secondary reviews/testing at clients
>
> The intensity of this process depends on the risk level of the system and
> this could be a long and complicated process for some organizations.  Seems
> like a more deliberate deprecation policy would make it easier to plan
> ahead.
>
>
> The problem with a lot of the regulatory standards that require this sort
> of laborious change-control is that during the entire period where all this
> redundant analysis and re-analysis of the change is happening, customers
> are still vulnerable (and in a health care context, this may mean even that
> lives remain at risk!).
>
> My (entirely secondhand) understanding is that recognition is dawning in
> many compliance fields (HIPPA, PCI-DSS, SOX) that there is a mismatch
> between the realities of software development (delay in making changes ==
> risk) and industrial change control (every change == risk), and auditors
> and regulators are beginning to take this into account.  This means that
> the ability to make changes *quickly* to ensure safe operation is slowly
> gaining ground over the ability to delay changes until sufficient
> evaluation has taken place.
>
> This recognition is dawning because many of these reviews are, in fact,
> nonsense.  For example: "an internal review to select a new version of the
> library" - does every healthcare project have a qualified cryptographer and
> penetration tester to each independently spend the 6 months of careful code
> audits required to actually evaluate the relative security of new versions
> of OpenSSL, or does this internal review consist mainly of unqualified
> people pontificating about hypothetical risks, divorced from the technical
> realities of the upgrade in question?
>
> My own experience has taught me that fear of changes like this is mostly
> developers being afraid of audit or compliance, rather than audit or
> compliance actually requiring it.  If you tell your auditor "we absolutely
> have to upgrade OpenSSL every week if an update is available", they'll
> usually figure out a way to do it.
>
> I don't mean to jump down your throat here; the tone is definitely harsher
> than I would like, but I want it to be very clear why I have such strong
> feelings about upgrading security-critical dependencies.
>
> Additionally, the Netscape SPKI APIs are disappearing from OpenSSL itself
> eventually, so this specific issue isn't just about upgrading - it's about
> preventing it from being difficult to upgrade in the future.  If we wait
> until the APIs are actually gone, rather than just deprecated, this may
> create friction around a critical security update.
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160707/73b2fdbf/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Jul  7 17:48:56 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 7 Jul 2016 16:48:56 -0700
Subject: [Twisted-Python] dropping old pyOpenSSL versions
In-Reply-To: <CACKEAnXM8v2_grPF1GEUb4W3qPugzE2XjYuEg-4PBKjLVf+NrQ@mail.gmail.com>
References: <9AD2CDAD-D794-48A5-8CA8-74537422EED6@twistedmatrix.com>
 <CACKEAnXBwsGapZCw3nLdD-p1m3F+uFFVqybtDEHM4YSqJJOQwg@mail.gmail.com>
 <6F737E29-D013-4E93-B5F1-C506FAAF0CA6@twistedmatrix.com>
 <CACKEAnXM8v2_grPF1GEUb4W3qPugzE2XjYuEg-4PBKjLVf+NrQ@mail.gmail.com>
Message-ID: <01ACB6DA-59EF-4916-9591-43865B25D24C@twistedmatrix.com>


> On Jul 7, 2016, at 4:20 PM, Clayton Daley <clayton.daley at gmail.com> wrote:
> 
> I don't mean to jump down your throat here; the tone is definitely harsher than I would like, but I want it to be very clear why I have such strong feelings about upgrading security-critical dependencies.
> 
> I don't take it personally.

Whew :).

> I do a little coding (hello startup) but I'm actually the guy who:
> Had to develop our Policies and Procedures (P&P) in conjunction with our Compliance consultant
> Has to work with our lawyers to negotiate Information Security and Business Associate agreements with customers
> Has to provide implementation details in request to our customers' security groups (I spent all day working through a 160 item self-assessment so it was top-of-mind for me)
> When there's a vulnerability, you can fast track an upgrade because there's a non-theoretical risk to doing nothing.  The problem is an "optional" version bump.  It's all CYA.  If I don't follow my P&P, the federal government, state government, and customers all have (extra) grounds to sue my company (cofounder so literally *mine*).  If the consequence of waiting are a transient Twisted bug or a delayed feature depending on a feature in a blocked version, it's an easy choice.

The problem with this perspective is that it inappropriately assigns risk by default to upgrading but no risk by default to not-upgrading.  For example, it is well known that various adversaries stockpile 0-day vulnerabilities in popular libraries.  Of course new releases don't ever empty this stockpile, but they quite often reduce it.

Often fixes to this type of secret vulnerability are not identified as "high severity" because severity classifications are often incorrect, almost always in the direction of having a lower severity than they ought to.  See for example this paper: https://www.usenix.org/legacy/event/hotos09/tech/full_papers/arnold/arnold_html/  It shows that (under the range of data collected, 2006-2008) there is _always_ a non-zero number of misclassified bugs impacting "stable" kernel versions' security.  The same is almost certainly true of OpenSSL.  Not to mention the fact that being stuck on old OpenSSL means being stuck without fundamental improvements such as TLS 1.3.

In other words, it may be possible to show that there is absolutely always a vulnerability being fixed by new versions, even when you are pretty sure there isn't.

I understand that certain regulatory regimes do still give a huge financial incentive to bias your change management decisions towards "status quo"; my comment earlier indicated that this is starting to change, not that that process is complete.  Even if you were to agree with me completely it might not be reasonable to risk the entire future of your business on a fast upgrade cadence if you are liable for the risks of upgrading but not liable for the risks of not-upgrading.

However, in a situation with perverse incentives like that, an equally significant risk is building a process that punishes even preparing to make a change.  Inasmuch as it's feasible should always have a codebase which is ready to roll out upgraded versions of every dependency, as if the regulators were to allow the upgrades, because when security researchers identify that a vulnerability is high-impact after the fact, you don't want to have to make big changes or retrofit your tooling or your codebase in the moment of that impact.  Presumably all the governments and the customers could still sue you if you hadn't managed to fix e.g. Heartbleed after <some span of time that a layperson would think is unreasonable>.

Another great example of why you want to be ready to upgrade: if you can run your tests against a new Twisted in its pre-release week and report a regression (or better yet, run continuously against trunk and report regressions that affect your code as they occur) then you can offload the work of actually keeping your application running onto us, and force us to avoid ever releasing a version that breaks you.  But if you only identify bugs years after the fact, there's no longer anything we can do except fix them with the same priority as everything else.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160707/ff47521e/attachment-0002.html>

From clayton.daley at gmail.com  Thu Jul  7 20:32:28 2016
From: clayton.daley at gmail.com (Clayton Daley)
Date: Thu, 7 Jul 2016 21:32:28 -0500
Subject: [Twisted-Python] dropping old pyOpenSSL versions
In-Reply-To: <01ACB6DA-59EF-4916-9591-43865B25D24C@twistedmatrix.com>
References: <9AD2CDAD-D794-48A5-8CA8-74537422EED6@twistedmatrix.com>
 <CACKEAnXBwsGapZCw3nLdD-p1m3F+uFFVqybtDEHM4YSqJJOQwg@mail.gmail.com>
 <6F737E29-D013-4E93-B5F1-C506FAAF0CA6@twistedmatrix.com>
 <CACKEAnXM8v2_grPF1GEUb4W3qPugzE2XjYuEg-4PBKjLVf+NrQ@mail.gmail.com>
 <01ACB6DA-59EF-4916-9591-43865B25D24C@twistedmatrix.com>
Message-ID: <CACKEAnUOnBL5+ZD3RrY7HMnEiPtD3RKf1=_joMQ3-=8LxStM0A@mail.gmail.com>

We're very close on the theory.  My point wasn't to discourage upgrades.
Even regulated entities can and should upgrade their security libraries as
part of their annual audit cycle.  My point was to promote a more
deliberate depreciation cycle with better visibility for regulated entities.

I'm not clear the age of the library we're talking about, but for the sake
of argument consider something like:

   - On Jan 1 every year, we mark the "current" version of the library
   - On Jan 1 two years later, we deprecate everything older than that
   version
   - On Jan 1 three years later, we kill off support for everything before
   that version

The worst case scenario is a library from Dec 31, 2015 is killed on Jan 1,
2018, a two year (plus one day) window.  That would mean a minimum of two
annual cycles to make the upgrade.  It would be easy to plan upgrades. It
would be clear which versions were dying when.

On the flip side, it would strongly discourage use of a library older than
3 years.  Most folks would go from a 1.5 yr old library to a 0.5 yr old
library each year.  Even a luddite (who wanted to guarantee support) would
be replacing a 2.5yr old library with a 1.5yr old library.

Clayton Daley

On Thu, Jul 7, 2016 at 6:48 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Jul 7, 2016, at 4:20 PM, Clayton Daley <clayton.daley at gmail.com> wrote:
>
> I don't mean to jump down your throat here; the tone is definitely harsher
>> than I would like, but I want it to be very clear why I have such strong
>> feelings about upgrading security-critical dependencies.
>>
>
> I don't take it personally.
>
>
> Whew :).
>
> I do a little coding (hello startup) but I'm actually the guy who:
>
>    - Had to develop our Policies and Procedures (P&P) in conjunction with
>    our Compliance consultant
>    - Has to work with our lawyers to negotiate Information Security and
>    Business Associate agreements with customers
>    - Has to provide implementation details in request to our customers'
>    security groups (I spent all day working through a 160 item self-assessment
>    so it was top-of-mind for me)
>
> When there's a vulnerability, you can fast track an upgrade because
> there's a non-theoretical risk to doing nothing.  The problem is an
> "optional" version bump.  It's all CYA.  If I don't follow my P&P, the
> federal government, state government, and customers all have (extra)
> grounds to sue my company (cofounder so literally *mine*).  If the
> consequence of waiting are a transient Twisted bug or a delayed feature
> depending on a feature in a blocked version, it's an easy choice.
>
>
> The problem with this perspective is that it inappropriately assigns risk
> by default to upgrading but no risk by default to not-upgrading.  For
> example, it is well known that various adversaries stockpile 0-day
> vulnerabilities in popular libraries.  Of course new releases don't ever
> *empty* this stockpile, but they quite often reduce it.
>
> Often fixes to this type of secret vulnerability are not identified as
> "high severity" because severity classifications are often incorrect,
> almost always in the direction of having a lower severity than they ought
> to.  See for example this paper:
> https://www.usenix.org/legacy/event/hotos09/tech/full_papers/arnold/arnold_html/
>  It shows that (under the range of data collected, 2006-2008) there is
> _always_ a non-zero number of misclassified bugs impacting "stable" kernel
> versions' security.  The same is almost certainly true of OpenSSL.  Not to
> mention the fact that being stuck on old OpenSSL means being stuck without
> fundamental improvements such as TLS 1.3.
>
> In other words, it may be possible to show that there is absolutely always
> a vulnerability being fixed by new versions, even when you are pretty sure
> there isn't.
>
> I understand that certain regulatory regimes do still give a huge
> financial incentive to bias your change management decisions towards
> "status quo"; my comment earlier indicated that this is *starting *to
> change, not that that process is complete.  Even if you were to agree with
> me completely it might not be reasonable to risk the entire future of your
> business on a fast upgrade cadence if you are liable for the risks of
> upgrading but not liable for the risks of not-upgrading.
>
> However, in a situation with perverse incentives like that, an equally
> significant risk is building a process that punishes even *preparing* to
> make a change.  Inasmuch as it's feasible should always have a codebase
> which is ready to roll out upgraded versions of every dependency, *as if* the
> regulators were to allow the upgrades, because when security researchers
> identify that a vulnerability is high-impact after the fact, you don't want
> to have to make big changes or retrofit your tooling or your codebase in
> the moment of that impact.  Presumably all the governments and the
> customers could still sue you if you hadn't managed to fix e.g. Heartbleed
> after <some span of time that a layperson would think is unreasonable>.
>
> Another great example of why you want to be ready to upgrade: if you can
> run your tests against a new Twisted in its pre-release week and report a
> regression (or better yet, run continuously against trunk and report
> regressions that affect your code as they occur) then you can offload the
> work of actually keeping your application running onto us, and force us to
> avoid ever releasing a version that breaks you.  But if you only identify
> bugs years after the fact, there's no longer anything we can do except fix
> them with the same priority as everything else.
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160707/a2bce86c/attachment-0002.html>

From rgacote at appropriatesolutions.com  Fri Jul  8 13:14:46 2016
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Fri, 8 Jul 2016 15:14:46 -0400
Subject: [Twisted-Python] dropping old pyOpenSSL versions
In-Reply-To: <6F737E29-D013-4E93-B5F1-C506FAAF0CA6@twistedmatrix.com>
References: <9AD2CDAD-D794-48A5-8CA8-74537422EED6@twistedmatrix.com>
 <CACKEAnXBwsGapZCw3nLdD-p1m3F+uFFVqybtDEHM4YSqJJOQwg@mail.gmail.com>
 <6F737E29-D013-4E93-B5F1-C506FAAF0CA6@twistedmatrix.com>
Message-ID: <CAG5tnzo-Lkm2Z_ya5nZtieZA8LtKDKs=midGOz+HNhhctQ1qeQ@mail.gmail.com>

On Thu, Jul 7, 2016 at 7:00 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

> 2) How does this impact regulated industries.  In healthcare (my current
> industry), changing a library (especially cryptography) could mean:
>
>    - An internal review to select a new version of the library
>    - An internal change management process
>    - Technical testing (perhaps a 3rd party audit)
>    - A notification to clients of the change
>    - Secondary reviews/testing at clients
>
> The intensity of this process depends on the risk level of the system and
> this could be a long and complicated process for some organizations.  Seems
> like a more deliberate deprecation policy would make it easier to plan
> ahead.
>
>
Contrast this with a standard such as PCI (credit card security compliance)
where the assessors are required to check if you’re running the latest
version of all components.
Need to be up to date if you want to be compliant.



-- 
Raymond Cote, President
voice: +1.603.924.6079 email: rgacote at AppropriateSolutions.com skype:
ray.cote
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160708/e061b569/attachment-0002.html>

From pawelmhm at gmail.com  Sat Jul  9 11:30:37 2016
From: pawelmhm at gmail.com (=?UTF-8?B?UGF3ZcWCIE1pZWNo?=)
Date: Sat, 9 Jul 2016 19:30:37 +0200
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
Message-ID: <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>

Thanks for fixing this.

Did anyone actually manage to make HTTP2 in Twisted work with
Google-Chrome? I tried to do this today, and it seems this is surprisingly
difficult. It turns out that Chrome requires ALPN and it dropped support
for NPN. ALPN is only supported with OpenSSL 1.0.2 or above, which by
default is not available in most systems. This is discussed here
<https://www.nginx.com/blog/supporting-http2-google-chrome-users/>. I tried
setting up docker image with Ubuntu 16.04 that has required version of
OpenSSL, but it seems that Chrome still doesn't like it. It
returns ERR_SPDY_INADEQUATE_TRANSPORT_SECURITY error and fails to load
page. Looking up this error I found out this might be happening because
some TSL ciphers are blacklisted in HTTP2, there is nice answer about this
here
<https://serverfault.com/questions/712808/chrome-reports-err-spdy-inadequate-transport-security-connecting-to-local-web-se/712838#712838>
it
links to this part of HTTP2 spec
https://http2.github.io/http2-spec/#rfc.section.9.2.2

My question is: should user deal with this kind of stuff themselves? If
some ciphers are blacklisted in HTTP2 shouldn't this be handled somewhere
in Twisted? E.g. perhaps there should be some Http2SSLContextFactory? If
you'd like to reproduce this I did some sample repo here:
https://github.com/pawelmhm/sf-books-http2 it contains dockerfile that
builds from Ubuntu 16.04 and runs simple Twisted HTTP 2 resource.

2016-07-04 13:48 GMT+02:00 Craig Rodrigues <rodrigc at crodrigues.org>:

> On Sun, Jul 3, 2016 at 3:15 AM, Paweł Miech <pawelmhm at gmail.com> wrote:
>
>> HTTP2 support sounds really exciting.
>>
>> > Please let me know if you have any issues, as well as if you don't! If
>> everything works well, that's a good thing for me to know :)
>>
>> I played around with this today and found out that the command you
>> recommend:
>>
>> >  pip install -U https://twistedmatrix.com/Releases
>> /pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2#egg=Twisted[http2,tls]
>>
>> does NOT install dependencies when ran on Python 3, I had to manually
>> install h2 to HTTP2 support to work. It works ok on Python 2. My
>> installation logs on Python 3.4 look like this:
>>
>>
> I think I've fixed that in trunk with this:
>
> https://github.com/twisted/twisted/pull/287
>
> --
> Craig
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160709/e07d0014/attachment-0002.html>

From donal.mcmullan at gmail.com  Sat Jul  9 12:08:51 2016
From: donal.mcmullan at gmail.com (Donal McMullan)
Date: Sat, 9 Jul 2016 19:08:51 +0100
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
Message-ID: <CADf-aJF++6pF4RtQgB6xVCTndATQVvqxuR0ZCYxuiaz5E1Xajw@mail.gmail.com>

Works for me with txacme and a lets: cert

IIRC, when I was trying to use a self signed cert on my local network I got
the ERR_SPDY_INADEQUATE_TRANSPORT_SECURITY error.

DJM

On 9 July 2016 at 18:30, Paweł Miech <pawelmhm at gmail.com> wrote:

> Thanks for fixing this.
>
> Did anyone actually manage to make HTTP2 in Twisted work with
> Google-Chrome? I tried to do this today, and it seems this is surprisingly
> difficult. It turns out that Chrome requires ALPN and it dropped support
> for NPN. ALPN is only supported with OpenSSL 1.0.2 or above, which by
> default is not available in most systems. This is discussed here
> <https://www.nginx.com/blog/supporting-http2-google-chrome-users/>. I
> tried setting up docker image with Ubuntu 16.04 that has required version
> of OpenSSL, but it seems that Chrome still doesn't like it. It
> returns ERR_SPDY_INADEQUATE_TRANSPORT_SECURITY error and fails to load
> page. Looking up this error I found out this might be happening because
> some TSL ciphers are blacklisted in HTTP2, there is nice answer about
> this here
> <https://serverfault.com/questions/712808/chrome-reports-err-spdy-inadequate-transport-security-connecting-to-local-web-se/712838#712838> it
> links to this part of HTTP2 spec
> https://http2.github.io/http2-spec/#rfc.section.9.2.2
>
> My question is: should user deal with this kind of stuff themselves? If
> some ciphers are blacklisted in HTTP2 shouldn't this be handled somewhere
> in Twisted? E.g. perhaps there should be some Http2SSLContextFactory? If
> you'd like to reproduce this I did some sample repo here:
> https://github.com/pawelmhm/sf-books-http2 it contains dockerfile that
> builds from Ubuntu 16.04 and runs simple Twisted HTTP 2 resource.
>
> 2016-07-04 13:48 GMT+02:00 Craig Rodrigues <rodrigc at crodrigues.org>:
>
>> On Sun, Jul 3, 2016 at 3:15 AM, Paweł Miech <pawelmhm at gmail.com> wrote:
>>
>>> HTTP2 support sounds really exciting.
>>>
>>> > Please let me know if you have any issues, as well as if you don't! If
>>> everything works well, that's a good thing for me to know :)
>>>
>>> I played around with this today and found out that the command you
>>> recommend:
>>>
>>> >  pip install -U https://twistedmatrix.com/Releases
>>> /pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2#egg=Twisted[http2,tls]
>>>
>>> does NOT install dependencies when ran on Python 3, I had to manually
>>> install h2 to HTTP2 support to work. It works ok on Python 2. My
>>> installation logs on Python 3.4 look like this:
>>>
>>>
>> I think I've fixed that in trunk with this:
>>
>> https://github.com/twisted/twisted/pull/287
>>
>> --
>> Craig
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160709/1a8d4989/attachment-0002.html>

From hawkowl at atleastfornow.net  Sat Jul  9 12:22:39 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sun, 10 Jul 2016 02:22:39 +0800
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
Message-ID: <B55AAAC5-0069-4E64-82D3-06AA3F3CD10E@atleastfornow.net>

Hmm, I have it working fine (Python 2.7/3.5, w/ Cryptography wheels on OS X)...

The default ciphers in Twisted are:

ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS

So I am not sure why it's not picking up "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256" first...

- Amber

> On 10 Jul 2016, at 01:30, Paweł Miech <pawelmhm at gmail.com> wrote:
> 
> Thanks for fixing this.
> 
> Did anyone actually manage to make HTTP2 in Twisted work with Google-Chrome? I tried to do this today, and it seems this is surprisingly difficult. It turns out that Chrome requires ALPN and it dropped support for NPN. ALPN is only supported with OpenSSL 1.0.2 or above, which by default is not available in most systems. This is discussed here. I tried setting up docker image with Ubuntu 16.04 that has required version of OpenSSL, but it seems that Chrome still doesn't like it. It returns ERR_SPDY_INADEQUATE_TRANSPORT_SECURITY error and fails to load page. Looking up this error I found out this might be happening because some TSL ciphers are blacklisted in HTTP2, there is nice answer about this here it links to this part of HTTP2 spec https://http2.github.io/http2-spec/#rfc.section.9.2.2
> 
> My question is: should user deal with this kind of stuff themselves? If some ciphers are blacklisted in HTTP2 shouldn't this be handled somewhere in Twisted? E.g. perhaps there should be some Http2SSLContextFactory? If you'd like to reproduce this I did some sample repo here: https://github.com/pawelmhm/sf-books-http2 it contains dockerfile that builds from Ubuntu 16.04 and runs simple Twisted HTTP 2 resource.
> 
> 2016-07-04 13:48 GMT+02:00 Craig Rodrigues <rodrigc at crodrigues.org>:
> On Sun, Jul 3, 2016 at 3:15 AM, Paweł Miech <pawelmhm at gmail.com> wrote:
> HTTP2 support sounds really exciting.
> 
> > Please let me know if you have any issues, as well as if you don't! If everything works well, that's a good thing for me to know :)
> 
> I played around with this today and found out that the command you recommend:
> 
> >  pip install -U https://twistedmatrix.com/Releases/pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2#egg=Twisted[http2,tls]
> 
> does NOT install dependencies when ran on Python 3, I had to manually install h2 to HTTP2 support to work. It works ok on Python 2. My installation logs on Python 3.4 look like this:
> 
> 
> I think I've fixed that in trunk with this:
> 
> https://github.com/twisted/twisted/pull/287
> 
> --
> Craig
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160710/f7ee83ce/attachment.sig>

From glyph at twistedmatrix.com  Sun Jul 10 18:45:31 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 10 Jul 2016 17:45:31 -0700
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
Message-ID: <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>


> On Jul 9, 2016, at 10:30 AM, Paweł Miech <pawelmhm at gmail.com> wrote:
> 
> My question is: should user deal with this kind of stuff themselves? If some ciphers are blacklisted in HTTP2 shouldn't this be handled somewhere in Twisted?

As others have already said, this should work out of the box, and I'm not sure why it isn't for you, especially that you've gone to the extra trouble of building a Docker image and retrieving recent enough versions of every relevant layer of the stack.

However, to answer this question generally: this should absolutely be handled by Twisted.  In fact, even if we're doing the right thing already except in your one configuration, we should go a step beyond and provide tooling and logging to clearly explain to system operators why they won't get HTTP/2 if their dependencies are out of date.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160710/27d1d221/attachment-0002.html>

From cory at lukasa.co.uk  Mon Jul 11 04:35:11 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Mon, 11 Jul 2016 11:35:11 +0100
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
Message-ID: <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>


> On 11 Jul 2016, at 01:45, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Jul 9, 2016, at 10:30 AM, Paweł Miech <pawelmhm at gmail.com <mailto:pawelmhm at gmail.com>> wrote:
>> 
>> My question is: should user deal with this kind of stuff themselves? If some ciphers are blacklisted in HTTP2 shouldn't this be handled somewhere in Twisted?
> 
> As others have already said, this should work out of the box, and I'm not sure why it isn't for you, especially that you've gone to the extra trouble of building a Docker image and retrieving recent enough versions of every relevant layer of the stack.
> 
> However, to answer this question generally: this should absolutely be handled by Twisted.  In fact, even if we're doing the right thing already except in your one configuration, we should go a step beyond and provide tooling and logging to clearly explain to system operators why they won't get HTTP/2 if their dependencies are out of date.

This turns out to be trickier than you’d expect.

PyOpenSSL does not expose any of the APIs for us to programmatically detect what ciphers are available to the OpenSSL we have installed. Cryptography exposes only one: SSL_get_ciphers. This is not really the one we want, because it lists all *possible* ciphers, rather than the ones that are actually enabled for a given connection. This makes it very difficult for us to conclude that we’d want to use HTTP/2 but we cannot because of a lack of cipher support.

Now, Twisted *could* add code to introspect the HTTP/2 TLS configuration and optionally terminate the connection in the same manner that Chrome does. Currently I’ve not done that because it’s not been hugely needed, but we could do that. The reality is, though, that Twisted can’t unconditionally not use those ciphers because it needs to support HTTP/1.1 as well as HTTP/2, and HTTP/1.1 does not have those same restrictions.

What would be looking for here? Out of the box, Twisted should do the very best it can, but right now it seems like the only thing we could do is detect when HTTP/2 is literally impossible to support (e.g. when there is no TLS 1.2 support). With that said, those versions *completely* overlap with the versions where OpenSSL doesn’t support ALPN.

Regardless, Twisted’s default cipher ordering is appropriate for HTTP/2 (it prefers ECDHE AES GCM, which is what is required). So I’m not sure what more we could do.

Cory
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160711/c3b9b8af/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160711/c3b9b8af/attachment.sig>

From glyph at twistedmatrix.com  Mon Jul 11 13:22:45 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 11 Jul 2016 12:22:45 -0700
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
Message-ID: <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>


> On Jul 11, 2016, at 3:35 AM, Cory Benfield <cory at lukasa.co.uk <mailto:cory at lukasa.co.uk>> wrote:
> 
>> 
>> On 11 Jul 2016, at 01:45, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>> 
>> 
>>> On Jul 9, 2016, at 10:30 AM, Paweł Miech <pawelmhm at gmail.com <mailto:pawelmhm at gmail.com>> wrote:
>>> 
>>> My question is: should user deal with this kind of stuff themselves? If some ciphers are blacklisted in HTTP2 shouldn't this be handled somewhere in Twisted?
>> 
>> As others have already said, this should work out of the box, and I'm not sure why it isn't for you, especially that you've gone to the extra trouble of building a Docker image and retrieving recent enough versions of every relevant layer of the stack.
>> 
>> However, to answer this question generally: this should absolutely be handled by Twisted.  In fact, even if we're doing the right thing already except in your one configuration, we should go a step beyond and provide tooling and logging to clearly explain to system operators why they won't get HTTP/2 if their dependencies are out of date.
> 
> This turns out to be trickier than you’d expect.
> 
> PyOpenSSL does not expose any of the APIs for us to programmatically detect what ciphers are available to the OpenSSL we have installed. Cryptography exposes only one: SSL_get_ciphers. This is not really the one we want, because it lists all *possible* ciphers, rather than the ones that are actually enabled for a given connection. This makes it very difficult for us to conclude that we’d want to use HTTP/2 but we cannot because of a lack of cipher support.

So pyOpenSSL/Cryptography doesn't have SSL_get_current_cipher anywhere?

> Now, Twisted *could* add code to introspect the HTTP/2 TLS configuration and optionally terminate the connection in the same manner that Chrome does. Currently I’ve not done that because it’s not been hugely needed, but we could do that. The reality is, though, that Twisted can’t unconditionally not use those ciphers because it needs to support HTTP/1.1 as well as HTTP/2, and HTTP/1.1 does not have those same restrictions.

The main interest I think we have is to placate Chrome, to ensure it can speak HTTP/2 if it's possible, and to explain why it's not possible, if it's not.

> What would be looking for here? Out of the box, Twisted should do the very best it can, but right now it seems like the only thing we could do is detect when HTTP/2 is literally impossible to support (e.g. when there is no TLS 1.2 support). With that said, those versions *completely* overlap with the versions where OpenSSL doesn’t support ALPN.

In the same way that we complain about service_identity perhaps we should complain about OpenSSL?

> Regardless, Twisted’s default cipher ordering is appropriate for HTTP/2 (it prefers ECDHE AES GCM, which is what is required). So I’m not sure what more we could do.

Yeah, I'm curious why the OP was having this problem.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160711/0244f07d/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 3707 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20160711/0244f07d/attachment-0002.bin>

From pawelmhm at gmail.com  Mon Jul 11 15:04:10 2016
From: pawelmhm at gmail.com (=?UTF-8?B?UGF3ZcWCIE1pZWNo?=)
Date: Mon, 11 Jul 2016 23:04:10 +0200
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
Message-ID: <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>

Thanks for input everyone!

@Cory

> right now it seems like the only thing we could do is detect when HTTP/2
is literally impossible to support (e.g. when there is no TLS 1.2 support)

This seems to suggest that Ubuntu 16.04 (the system I'm testing) does not
support ciphers required by HTTP2. But nginx article about HTTP2 lists
ubuntu as only linux like system that is able to support HTTP2 over ALPN
which is required by Chrome:
https://www.nginx.com/blog/supporting-http2-google-chrome-users/

I decided to verify tnginx statements and I tried to set up nginx with
HTTP2 on ubuntu 16.04. It turns out this is possible and it works ok. I
just followed this article here:
https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-with-http-2-support-on-ubuntu-16-04
This means that in principle Ubuntu 16.04 should be able to support HTTP2
and it has required TLS ciphers.

So the problem here is not about lack of OS support.

Looking into this nginx article they recommend two things that are part of
manual setup which (maybe?) are required?

1) They say ciphers should be set to ssl_ciphers
EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;

This long string does not mean much to me, but reading email from Amber
again I see it differs slightly from what she says Twisted uses. But one
thing I'm wondering about is how do you guys know which ciphers are set in
Twisted? Looking into source code of DefaultOpenSSLContextFactory I see
context is created here:
https://github.com/twisted/twisted/blob/3455a902fb15e732ee43b59f4d82a66b105351ba/twisted/internet/ssl.py#L107
I dont see any point where there is a call that sets ciphers. Maybe this is
done somewhere else? I tried grepping source for string mentioned by Amber
but cant find it.

2) they ask user to generate DHE key and provide this to nginx
configuration.

When I compare my nginx with Twisted using openssl I see that ciphers in
response differ.

For example this is what my nginx cipher is:

> openssl s_client -connect localhost:443
...
...
...
New, TLSv1/SSLv3, Cipher is ECDHE-RSA-AES128-GCM-SHA256

And here is cipher for Twisted

> openssl s_client -connect localhost:8080

New, TLSv1/SSLv3, Cipher is AES256-GCM-SHA384

When I check HTTP2 cipher black list I see AES256-GCM-SHA384 is there on
this list see here https://http2.github.io/http2-spec/#BadCipherSuites





2016-07-11 21:22 GMT+02:00 Glyph Lefkowitz <glyph at twistedmatrix.com>:

>
> On Jul 11, 2016, at 3:35 AM, Cory Benfield <cory at lukasa.co.uk> wrote:
>
>
> On 11 Jul 2016, at 01:45, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
>
> On Jul 9, 2016, at 10:30 AM, Paweł Miech <pawelmhm at gmail.com> wrote:
>
> My question is: should user deal with this kind of stuff themselves? If
> some ciphers are blacklisted in HTTP2 shouldn't this be handled somewhere
> in Twisted?
>
>
> As others have already said, this *should* work out of the box, and I'm
> not sure why it isn't for you, especially that you've gone to the extra
> trouble of building a Docker image and retrieving recent enough versions of
> every relevant layer of the stack.
>
> However, to answer this question generally: this should *absolutely* be
> handled by Twisted.  In fact, even if we're doing the right thing already
> except in your one configuration, we should go a step beyond and provide
> tooling and logging to clearly explain to system operators why they won't
> get HTTP/2 if their dependencies are out of date.
>
>
> This turns out to be trickier than you’d expect.
>
> PyOpenSSL does not expose any of the APIs for us to programmatically
> detect what ciphers are available to the OpenSSL we have installed.
> Cryptography exposes only one: SSL_get_ciphers. This is not really the one
> we want, because it lists all *possible* ciphers, rather than the ones that
> are actually enabled for a given connection. This makes it very difficult
> for us to conclude that we’d want to use HTTP/2 but we cannot because of a
> lack of cipher support.
>
>
> So pyOpenSSL/Cryptography doesn't have SSL_get_current_cipher anywhere?
>
> Now, Twisted *could* add code to introspect the HTTP/2 TLS configuration
> and optionally terminate the connection in the same manner that Chrome
> does. Currently I’ve not done that because it’s not been hugely needed, but
> we could do that. The reality is, though, that Twisted can’t
> unconditionally not use those ciphers because it needs to support HTTP/1.1
> as well as HTTP/2, and HTTP/1.1 does not have those same restrictions.
>
>
> The main interest I think we have is to placate Chrome, to ensure it can
> speak HTTP/2 if it's possible, and to explain why it's not possible, if
> it's not.
>
> What would be looking for here? Out of the box, Twisted should do the very
> best it can, but right now it seems like the only thing we could do is
> detect when HTTP/2 is literally impossible to support (e.g. when there is
> no TLS 1.2 support). With that said, those versions *completely* overlap
> with the versions where OpenSSL doesn’t support ALPN.
>
>
> In the same way that we complain about service_identity perhaps we should
> complain about OpenSSL?
>
> Regardless, Twisted’s default cipher ordering is appropriate for HTTP/2
> (it prefers ECDHE AES GCM, which is what is required). So I’m not sure what
> more we could do.
>
>
> Yeah, I'm curious why the OP was having this problem.
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160711/ff1a3fa4/attachment-0002.html>

From rodrigc at crodrigues.org  Mon Jul 11 16:01:48 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 11 Jul 2016 15:01:48 -0700
Subject: [Twisted-Python] PyPy buildbot, less failed tests
Message-ID: <CAG=rPVd3KwKcOW0Moa1dsQ3oV5h1qZOve9CWEtXPmGAtw6AeCA@mail.gmail.com>

I would like to acknowledge the contributions of Ville Skyttä who submitted
several patches to close open file descriptors in various Twisted tests.

I looked at these two PyPy builds:

https://buildbot.twistedmatrix.com/builders/ubuntu16.04-pypy5/builds/207
52 Failed tests (20 failures, 32 errors)

https://buildbot.twistedmatrix.com/builders/ubuntu16.04-pypy5/builds/208
32 Failed tests (15 failures, 17 errors)

This reduction is directly due to Ville's contributions.
Thank you Ville!!

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160711/21a9947b/attachment-0002.html>

From rodrigc at crodrigues.org  Mon Jul 11 16:08:07 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 11 Jul 2016 15:08:07 -0700
Subject: [Twisted-Python] Trial running tests on Windows Python 3
Message-ID: <CAG=rPVc_qdZdxhQf-VCpso1dzxkYvxkOdbuHnRUOcXyGSN=92A@mail.gmail.com>

I have committed some fixes to trunk, and now trial is running tests on
Windows Python 3.

This buildbot is one example build with Python 3.5:
https://buildbot.twistedmatrix.com/builders/win2012r2-64-py3.5/builds/12

There are some test failures, but a lot of things are passing.  One nice
thing to see in this build is
that there are DeprecationWarnings where str is used when bytes should be
used,
and also ResourceWarnings for tests which are not cleanly shutting down
sockets.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160711/6b3314c1/attachment-0002.html>

From rodrigc at crodrigues.org  Mon Jul 11 17:42:04 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 11 Jul 2016 16:42:04 -0700
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
Message-ID: <CAG=rPVc_bmBXZ3UbBPYxiXi4aAYXTVXZCuWmaR03ChK9NBFBmw@mail.gmail.com>

On Mon, Jul 11, 2016 at 2:04 PM, Paweł Miech <pawelmhm at gmail.com> wrote:

> 1) They say ciphers should be set to ssl_ciphers
> EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;
>
> This long string does not mean much to me, but reading email from Amber
> again I see it differs slightly from what she says Twisted uses. But one
> thing I'm wondering about is how do you guys know which ciphers are set in
> Twisted? Looking into source code of DefaultOpenSSLContextFactory I see
> context is created here:
> https://github.com/twisted/twisted/blob/3455a902fb15e732ee43b59f4d82a66b105351ba/twisted/internet/ssl.py#L107
> I dont see any point where there is a call that sets ciphers. Maybe this is
> done somewhere else? I tried grepping source for string mentioned by Amber
> but cant find it.
>

In an earlier e-mail you mentioned that you were using Python 3.  Is that
still true?

In the Windows Python 3 build which was recently enabled, I saw these
warnings:

c:\buildslave\win2012r2-64-py3_5\Twisted\twisted\internet\_sslverify.py:1799:
DeprecationWarning: str for cipher_list is no longer accepted, use
bytes
c:\buildslave\win2012r2-64-py3_5\Twisted\twisted\internet\_sslverify.py:1656:
DeprecationWarning: str for buf is no longer accepted, use bytes
c:\buildslave\win2012r2-64-py3_5\Twisted\twisted\internet\_sslverify.py:1660:
DeprecationWarning: str for cipher_list is no longer accepted, use
bytes

I am not sure if this is related to your problem, but it struck me that you
mentioned a problem
with ciphers, and I saw this warning just now.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160711/16d9589c/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Jul 11 17:47:59 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 11 Jul 2016 16:47:59 -0700
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAG=rPVc_bmBXZ3UbBPYxiXi4aAYXTVXZCuWmaR03ChK9NBFBmw@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
 <CAG=rPVc_bmBXZ3UbBPYxiXi4aAYXTVXZCuWmaR03ChK9NBFBmw@mail.gmail.com>
Message-ID: <2EEEDBA5-171F-4343-A5D6-8F7401D241F4@twistedmatrix.com>


> On Jul 11, 2016, at 4:42 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> In an earlier e-mail you mentioned that you were using Python 3.  Is that still true?

Seconded - it would be very interesting to know if switching to python 2 fixes your issue. :)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160711/7aa590b0/attachment-0002.html>

From pawelmhm at gmail.com  Tue Jul 12 01:03:20 2016
From: pawelmhm at gmail.com (=?UTF-8?B?UGF3ZcWCIE1pZWNo?=)
Date: Tue, 12 Jul 2016 09:03:20 +0200
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <2EEEDBA5-171F-4343-A5D6-8F7401D241F4@twistedmatrix.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
 <CAG=rPVc_bmBXZ3UbBPYxiXi4aAYXTVXZCuWmaR03ChK9NBFBmw@mail.gmail.com>
 <2EEEDBA5-171F-4343-A5D6-8F7401D241F4@twistedmatrix.com>
Message-ID: <CAO38UCmeKuVY4q8VTT4s-eyGG_+8-F2WvswfVo1z+9jpeQsMGQ@mail.gmail.com>

> In an earlier e-mail you mentioned that you were using Python 3.  Is that
still true?

I can reproduce this in Python 2.7.11 and Python 3.5.2. In both of them
Chrome responds with ERR_SPDY_INADEQUATE_TRANSPORT_SECURITY.  When I test
with curl with verbose flag I see that it also shows information about
ciphers used:

Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH

...
SSL connection using TLSv1.2 / AES256-GCM-SHA384


I see ciphers are set at this point here:
https://github.com/twisted/twisted/blob/556f0f24df2eba2f38ec7f0fa422c4aa7df07fec/twisted/internet/_sslverify.py#L1660
and Twisted cipher is described here:
https://github.com/twisted/twisted/blob/556f0f24df2eba2f38ec7f0fa422c4aa7df07fec/twisted/internet/_sslverify.py#L1851
so probably this is the area to look for in case there is something going
awry in setting ciphers.

One thing to note is that I use DefaultOpenSSLContextFactory and do
something like this:

context_factory = DefaultOpenSSLContextFactory("key.pem", "cert.pem")
reactor.listenSSL(8080, site, context_factory)

Twisted docs for SSL
https://twistedmatrix.com/documents/current/core/howto/ssl.html suggest to
try something like this:

certData = getModule(__name__).filePath.sibling('server.pem').getContent()
certificate = ssl.PrivateCertificate.loadPEM(certData)
factory = protocol.Factory.forProtocol(echoserv.Echo)
reactor.listenSSL(8000, factory, certificate.options())

but those code samples from docs appeared broken. I was not able to run
them I was planning to review those docs later, find out what is wrong and
create PR for that.

Is it possible that using DefaultOpenSSLContextFactory instead of
certificate.options() affects something here? I can see my Twisted-SSL code
works ok in Chrome with HTTP 1.1 ( I can see green "secure" icon in url bar
and confirm that requests flies all right with ssl in dev tools) only fails
with HTTP2. This seems to suggest that using DefaultSSLContextFactory is ok
(even if it's not documented officially),  but maybe execution path is
different for contextFactory and certificate.options()?


2016-07-12 1:47 GMT+02:00 Glyph Lefkowitz <glyph at twistedmatrix.com>:

>
> On Jul 11, 2016, at 4:42 PM, Craig Rodrigues <rodrigc at crodrigues.org>
> wrote:
>
> In an earlier e-mail you mentioned that you were using Python 3.  Is that
> still true?
>
>
> Seconded - it would be very interesting to know if switching to python 2
> fixes your issue. :)
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160712/db3a4bf7/attachment-0002.html>

From cory at lukasa.co.uk  Tue Jul 12 01:43:01 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Tue, 12 Jul 2016 08:43:01 +0100
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
Message-ID: <7C50EE3F-7717-462E-B9DC-2782331DAED0@lukasa.co.uk>


> On 11 Jul 2016, at 22:04, Paweł Miech <pawelmhm at gmail.com> wrote:
> 
> This seems to suggest that Ubuntu 16.04 (the system I'm testing) does not support ciphers required by HTTP2. But nginx article about HTTP2 lists ubuntu as only linux like system that is able to support HTTP2 over ALPN which is required by Chrome: https://www.nginx.com/blog/supporting-http2-google-chrome-users/ <https://www.nginx.com/blog/supporting-http2-google-chrome-users/>
Sorry. To be clear, I was not responding to your specific needs but discussing Glyph’s wider point about alerting when bad configuration is present.

> I decided to verify tnginx statements and I tried to set up nginx with HTTP2 on ubuntu 16.04. It turns out this is possible and it works ok. I just followed this article here: https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-with-http-2-support-on-ubuntu-16-04 <https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-with-http-2-support-on-ubuntu-16-04> This means that in principle Ubuntu 16.04 should be able to support HTTP2 and it has required TLS ciphers.
> 
> So the problem here is not about lack of OS support.
> 
> Looking into this nginx article they recommend two things that are part of manual setup which (maybe?) are required?
> 
> 1) They say ciphers should be set to ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;
> 
> This long string does not mean much to me, but reading email from Amber again I see it differs slightly from what she says Twisted uses. But one thing I'm wondering about is how do you guys know which ciphers are set in Twisted? Looking into source code of DefaultOpenSSLContextFactory I see context is created here: https://github.com/twisted/twisted/blob/3455a902fb15e732ee43b59f4d82a66b105351ba/twisted/internet/ssl.py#L107 <https://github.com/twisted/twisted/blob/3455a902fb15e732ee43b59f4d82a66b105351ba/twisted/internet/ssl.py#L107> I dont see any point where there is a call that sets ciphers. Maybe this is done somewhere else? I tried grepping source for string mentioned by Amber but cant find it.

Ok, this is your problem.

DefaultOpenSSLContextFactory should have been deprecated a long time ago. It’s insecure, and in particular does not set a cipher string, so it uses DEFAULT. That will have all kinds of messed up priorities. For that reason, you should adjust your code to use OpenSSLCertificateOptions or, even better, use the TLS endpoint directly.

The TL;DR is: yes, it seems that DefaultOpenSSLContextFactory produces a context that is genuinely unacceptable for HTTP/2.

Cory

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160712/bd554fb9/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160712/bd554fb9/attachment.sig>

From cory at lukasa.co.uk  Tue Jul 12 01:45:03 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Tue, 12 Jul 2016 08:45:03 +0100
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
Message-ID: <8F094A16-47CC-42EF-8DC8-FBEE41BB3588@lukasa.co.uk>


> On 11 Jul 2016, at 20:22, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> So pyOpenSSL/Cryptography doesn't have SSL_get_current_cipher anywhere?

get_current_cipher isn’t helpful. In particular, it puts us in an awkward place where we have a connection that has been negotiated for HTTP/2, but we cannot use it. The only action Twisted can meaningfully take at that point is to log and tear the connection down, which doesn’t really solve our problems.

We can do that, for sure, but it wouldn’t be much clearer than what happened here.

Cory
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160712/9c360c77/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160712/9c360c77/attachment.sig>

From mithrandi at mithrandi.net  Tue Jul 12 01:56:00 2016
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Tue, 12 Jul 2016 07:56:00 +0000
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <7C50EE3F-7717-462E-B9DC-2782331DAED0@lukasa.co.uk>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
 <7C50EE3F-7717-462E-B9DC-2782331DAED0@lukasa.co.uk>
Message-ID: <CAMcKhMSpNcFY0Lc8YPHPc+9PLq73nGPWu2Cnb=Z5WDwv7FVpeg@mail.gmail.com>

On Tue, 12 Jul 2016 at 09:43 Cory Benfield <cory at lukasa.co.uk> wrote:

> For that reason, you should adjust your code to use
> OpenSSLCertificateOptions or, even better, use the TLS endpoint directly.
>
> The exported name of this class is actually just "CertificateOptions",
fwiw.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160712/23082c86/attachment-0002.html>

From pawelmhm at gmail.com  Tue Jul 12 02:33:03 2016
From: pawelmhm at gmail.com (=?UTF-8?B?UGF3ZcWCIE1pZWNo?=)
Date: Tue, 12 Jul 2016 10:33:03 +0200
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAMcKhMSpNcFY0Lc8YPHPc+9PLq73nGPWu2Cnb=Z5WDwv7FVpeg@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
 <7C50EE3F-7717-462E-B9DC-2782331DAED0@lukasa.co.uk>
 <CAMcKhMSpNcFY0Lc8YPHPc+9PLq73nGPWu2Cnb=Z5WDwv7FVpeg@mail.gmail.com>
Message-ID: <CAO38UCmouunMMnfa_UJTks4A-J2U9cWTxTf5fZdM=G-a=Ozhyw@mail.gmail.com>

> DefaultOpenSSLContextFactory should have been deprecated a long time ago.
It’s insecure, and in particular does not set a cipher string, so it uses
DEFAULT. That will have all kinds of messed up priorities. For that reason,
you should adjust your code to use OpenSSLCertificateOptions or, even
better, use the TLS endpoint directly.The TL;DR is: yes, it seems that
DefaultOpenSSLContextFactory produces a context that is genuinely
unacceptable for HTTP/2.

Indeed it all works fine with endpoints. Thanks!

I was not aware that DefaultOpenSSLContextFactory is deprecated. There is
no warning about it anywhere. It seems that is is very widely used by
users, I just did some github search now and found around 5k occurences of
people using it:

https://github.com/search?utf8=%E2%9C%93&q=defaultopensslcontextfactory&type=Code&ref=searchresults

If you google for "ssl in twisted" you will also find articles that
recommend it. Since so many people use it, maybe it could be updated to be
more secure? If it does not make sense to update it then perhaps it would
be good to deprecate it so that it does not confuse users?

2016-07-12 9:56 GMT+02:00 Tristan Seligmann <mithrandi at mithrandi.net>:

> On Tue, 12 Jul 2016 at 09:43 Cory Benfield <cory at lukasa.co.uk> wrote:
>
>> For that reason, you should adjust your code to use
>> OpenSSLCertificateOptions or, even better, use the TLS endpoint directly.
>>
>> The exported name of this class is actually just "CertificateOptions",
> fwiw.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160712/854af023/attachment-0002.html>

From cory at lukasa.co.uk  Tue Jul 12 09:13:11 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Tue, 12 Jul 2016 16:13:11 +0100
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAO38UCmouunMMnfa_UJTks4A-J2U9cWTxTf5fZdM=G-a=Ozhyw@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
 <7C50EE3F-7717-462E-B9DC-2782331DAED0@lukasa.co.uk>
 <CAMcKhMSpNcFY0Lc8YPHPc+9PLq73nGPWu2Cnb=Z5WDwv7FVpeg@mail.gmail.com>
 <CAO38UCmouunMMnfa_UJTks4A-J2U9cWTxTf5fZdM=G-a=Ozhyw@mail.gmail.com>
Message-ID: <2E4FCA18-A29C-4DD8-B288-6F8A02B854A4@lukasa.co.uk>


> On 12 Jul 2016, at 09:33, Paweł Miech <pawelmhm at gmail.com> wrote:
> 
> If you google for "ssl in twisted" you will also find articles that recommend it. Since so many people use it, maybe it could be updated to be more secure? If it does not make sense to update it then perhaps it would be good to deprecate it so that it does not confuse users?

Agreed. I’m planning to begin the deprecation process, though it will take a little while as we need to remove all uses of it from within the Twisted codebase itself, as well as from the documentation. That turns out to be a bigger task than expected!

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160712/df7c3f74/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160712/df7c3f74/attachment.sig>

From pawelmhm at gmail.com  Tue Jul 12 10:42:28 2016
From: pawelmhm at gmail.com (=?UTF-8?B?UGF3ZcWCIE1pZWNo?=)
Date: Tue, 12 Jul 2016 18:42:28 +0200
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <2E4FCA18-A29C-4DD8-B288-6F8A02B854A4@lukasa.co.uk>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
 <7C50EE3F-7717-462E-B9DC-2782331DAED0@lukasa.co.uk>
 <CAMcKhMSpNcFY0Lc8YPHPc+9PLq73nGPWu2Cnb=Z5WDwv7FVpeg@mail.gmail.com>
 <CAO38UCmouunMMnfa_UJTks4A-J2U9cWTxTf5fZdM=G-a=Ozhyw@mail.gmail.com>
 <2E4FCA18-A29C-4DD8-B288-6F8A02B854A4@lukasa.co.uk>
Message-ID: <CAO38UCkRhcRdKUX9d6eZ2gavwLUOLrRYnxEKw32By+PVyT5PUw@mail.gmail.com>

> Agreed. I’m planning to begin the deprecation process, though it will
take a little while as we need to remove all uses of it from within the
Twisted codebase itself, as well as from the documentation. That turns out
to be a bigger task than expected!

+1

One final point that I glossed over earlier

> To be clear, I was not responding to your specific needs but discussing
Glyph’s wider point about alerting when bad configuration is present.

When using Twisted endpoints (e.g. serverFromString) the problem with bad
openssl configuration is not bad. If OS does not support ALPN (OpenSSL
versions below 1.0.2) so in vast majority of Linux systems currently in use
Chrome connection simply falls back to HTTP 1.1 (I tested this on Ubuntu
14.04), This means there is no error and content is served, so it's some
sort of graceful degradation. This behavior is identical to nginx. I'm not
sure if Twisted can and should do something about this. Maybe it can print
some warning or maybe it can just let users know in documentation that
HTTP2 support via ALPN (which is required in Chrome) requires Openssl
1.0.2? Adding warnings to code might require some extra development but it
does not look that difficult. If you think about this, you probably dont
need to check ciphers available in system, you can probably only
check OpenSSL version available and check if client attempts to use ALPN.

2016-07-12 17:13 GMT+02:00 Cory Benfield <cory at lukasa.co.uk>:

>
> On 12 Jul 2016, at 09:33, Paweł Miech <pawelmhm at gmail.com> wrote:
>
> If you google for "ssl in twisted" you will also find articles that
> recommend it. Since so many people use it, maybe it could be updated to be
> more secure? If it does not make sense to update it then perhaps it would
> be good to deprecate it so that it does not confuse users?
>
>
> Agreed. I’m planning to begin the deprecation process, though it will take
> a little while as we need to remove all uses of it from within the Twisted
> codebase itself, as well as from the documentation. That turns out to be a
> bigger task than expected!
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160712/da4a1892/attachment-0002.html>

From cory at lukasa.co.uk  Tue Jul 12 13:24:37 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Tue, 12 Jul 2016 20:24:37 +0100
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAO38UCkRhcRdKUX9d6eZ2gavwLUOLrRYnxEKw32By+PVyT5PUw@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
 <7C50EE3F-7717-462E-B9DC-2782331DAED0@lukasa.co.uk>
 <CAMcKhMSpNcFY0Lc8YPHPc+9PLq73nGPWu2Cnb=Z5WDwv7FVpeg@mail.gmail.com>
 <CAO38UCmouunMMnfa_UJTks4A-J2U9cWTxTf5fZdM=G-a=Ozhyw@mail.gmail.com>
 <2E4FCA18-A29C-4DD8-B288-6F8A02B854A4@lukasa.co.uk>
 <CAO38UCkRhcRdKUX9d6eZ2gavwLUOLrRYnxEKw32By+PVyT5PUw@mail.gmail.com>
Message-ID: <927774DD-74F6-420E-BB6F-BFDCE60CDB16@lukasa.co.uk>


> On 12 Jul 2016, at 17:42, Paweł Miech <pawelmhm at gmail.com> wrote:
> 
> > Agreed. I’m planning to begin the deprecation process, though it will take a little while as we need to remove all uses of it from within the Twisted codebase itself, as well as from the documentation. That turns out to be a bigger task than expected!
> 
> +1
> 
> One final point that I glossed over earlier
> 
> > To be clear, I was not responding to your specific needs but discussing Glyph’s wider point about alerting when bad configuration is present.
> 
> When using Twisted endpoints (e.g. serverFromString) the problem with bad openssl configuration is not bad. If OS does not support ALPN (OpenSSL versions below 1.0.2) so in vast majority of Linux systems currently in use Chrome connection simply falls back to HTTP 1.1 (I tested this on Ubuntu 14.04), This means there is no error and content is served, so it's some sort of graceful degradation. This behavior is identical to nginx. I'm not sure if Twisted can and should do something about this. Maybe it can print some warning or maybe it can just let users know in documentation that HTTP2 support via ALPN (which is required in Chrome) requires Openssl 1.0.2? Adding warnings to code might require some extra development but it does not look that difficult. If you think about this, you probably dont need to check ciphers available in system, you can probably only check OpenSSL version available and check if client attempts to use ALPN.

We can actually do better than that.

The way the Twisted APIs are constructed, it knows if it’s got NPN, ALPN, neither, or both. So Twisted is capable of warning in a situation where it has protocols to advertise/negotiate, but no mechanism with which to do it. Unfortunately, I’m not sure of a way of doing it that isn’t intrusive: users opt in to HTTP/2 only by having the HTTP/2 dependencies installed, which they may have for other reasons (they’re common code used by other tools). That means that you could have a situation where you have the HTTP/2 dependencies installed, install Twisted, and then get spammed with warnings because you have older OpenSSL’s.

I’m definitely open to it, but I’m not sure that the user experience is good. If anyone has suggestions of how to get a better UX, I’m open to it.

Cory

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160712/46094d4e/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160712/46094d4e/attachment.sig>

From glyph at twistedmatrix.com  Tue Jul 12 15:04:27 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 12 Jul 2016 14:04:27 -0700
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <7C50EE3F-7717-462E-B9DC-2782331DAED0@lukasa.co.uk>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
 <7C50EE3F-7717-462E-B9DC-2782331DAED0@lukasa.co.uk>
Message-ID: <0989F397-D755-4E43-A9BF-0C745B5496BD@twistedmatrix.com>


> On Jul 12, 2016, at 12:43 AM, Cory Benfield <cory at lukasa.co.uk> wrote:
> 
> DefaultOpenSSLContextFactory should have been deprecated a long time ago. 

2 years ago, to be precise: 

https://twistedmatrix.com/trac/ticket/6923

Someone fixing this would be tremendously useful.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160712/9a167ec4/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Jul 12 17:37:41 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 12 Jul 2016 16:37:41 -0700
Subject: [Twisted-Python] removing twistedchecker buildbot for the time being
Message-ID: <3F6678C4-83BC-4261-8389-83C8F49EF72A@twistedmatrix.com>

Right now it seems the difference-computation logic on the twistedchecker buildbot has just broken completely.  It's introducing useless noise into the build results because it makes every actually-passing build into a big red 'X' on the pull request status page.  I think I'm going to remove it.  Any objections?

-glyph


From adi at roiban.ro  Tue Jul 12 18:27:29 2016
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 13 Jul 2016 01:27:29 +0100
Subject: [Twisted-Python] removing twistedchecker buildbot for the time
	being
In-Reply-To: <3F6678C4-83BC-4261-8389-83C8F49EF72A@twistedmatrix.com>
References: <3F6678C4-83BC-4261-8389-83C8F49EF72A@twistedmatrix.com>
Message-ID: <CAFycZ9cA9Argmf5W1JZbAniiBFPm0rGhJecmPyZQv+OJ-dN4iw@mail.gmail.com>

On 13 July 2016 at 00:37, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> Right now it seems the difference-computation logic on the twistedchecker
> buildbot has just broken completely.  It's introducing useless noise into
> the build results because it makes every actually-passing build into a big
> red 'X' on the pull request status page.  I think I'm going to remove it.
> Any objections?
>
>
1. Maybe use the --diff option on Buildbot.

2. We can move it to Travis based on the --diff option, ticket pending
review https://twistedmatrix.com/trac/ticket/8572
And if we move to Travis, get rid of tox-travis so that we can have
multiple jobs for the same python version,
https://twistedmatrix.com/trac/ticket/8535

----------

I am +1 for removing the buildbot specific logic and allow to run a diff on
the local branch, so that it is much easier to work on improving the diff
functionality.

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160713/2340edff/attachment-0002.html>

From cory at lukasa.co.uk  Wed Jul 13 02:52:49 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Wed, 13 Jul 2016 09:52:49 +0100
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <0989F397-D755-4E43-A9BF-0C745B5496BD@twistedmatrix.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
 <7C50EE3F-7717-462E-B9DC-2782331DAED0@lukasa.co.uk>
 <0989F397-D755-4E43-A9BF-0C745B5496BD@twistedmatrix.com>
Message-ID: <1477978A-0EF7-4026-821D-AA0C829DCA79@lukasa.co.uk>


> On 12 Jul 2016, at 22:04, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 2 years ago, to be precise:
> 
> https://twistedmatrix.com/trac/ticket/6923 <https://twistedmatrix.com/trac/ticket/6923>
> 
> Someone fixing this would be tremendously useful.
> 
> -glyph

I tried to get started on this yesterday. Unfortunately, the stack of work that requires this means I’ll be chasing after this for a while. Specifically:

- To deprecate ContextManager, we need to remove all instances of it from the code and documentation.
- That’s fine, except that code/docs that used ContextManager used {connect,listen}SSL and friends (because those were the appropriate APIs)
- Which means that we actually need to adjust a huge swathe of docs to use endpoints in order to remove the use of ContextManager.

I’ve gotten started on this, but sadly the {connect,listen} paradigm for SSL is extremely widespread in the Twisted documentation. This means I’m going to generate *several* sizeable tickets that require review just to get to a place where we can actually put the darn deprecation marker on those classes.

I’ve begun by tackling the tutorial in #8588 (https://twistedmatrix.com/trac/ticket/8588 <https://twistedmatrix.com/trac/ticket/8588>). There are further questions about the pedagogical value of this as “The Twisted Tutorial”, but for now I just want to bring it into 2014.

Anyway, I’ll be spending my Twisted time on this for a while I suspect. This will delay HTTP/2 client support, unfortunately. =(

Cory
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160713/5b2223ed/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160713/5b2223ed/attachment.sig>

From pawelmhm at gmail.com  Wed Jul 13 03:00:59 2016
From: pawelmhm at gmail.com (=?UTF-8?B?UGF3ZcWCIE1pZWNo?=)
Date: Wed, 13 Jul 2016 11:00:59 +0200
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <1477978A-0EF7-4026-821D-AA0C829DCA79@lukasa.co.uk>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
 <7C50EE3F-7717-462E-B9DC-2782331DAED0@lukasa.co.uk>
 <0989F397-D755-4E43-A9BF-0C745B5496BD@twistedmatrix.com>
 <1477978A-0EF7-4026-821D-AA0C829DCA79@lukasa.co.uk>
Message-ID: <CAO38UC=7-S6p6qEJasOTO2F_F6VvXr5CqM0nuBn4aKy2m=NyKQ@mail.gmail.com>

> Anyway, I’ll be spending my Twisted time on this for a while I suspect.
This will delay HTTP/2 client support, unfortunately. =(

Isn't it better to get HTTP2 client support and just document things better
for HTTP2? Or maybe even backport some features from CertificateOptions to
factory? DefaultSSLContextFactory seems to work ok for cases outside HTTP2.
It is not evidently broken. It is probably less secure than
twisted.internet.ssl.CertificateOptions but is really broken beyond repair?

2016-07-13 10:52 GMT+02:00 Cory Benfield <cory at lukasa.co.uk>:

>
> On 12 Jul 2016, at 22:04, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
> 2 years ago, to be precise:
>
> https://twistedmatrix.com/trac/ticket/6923
>
> Someone fixing this would be tremendously useful.
>
> -glyph
>
>
> I tried to get started on this yesterday. Unfortunately, the stack of work
> that requires this means I’ll be chasing after this for a while.
> Specifically:
>
> - To deprecate ContextManager, we need to remove all instances of it from
> the code and documentation.
> - That’s fine, except that code/docs that used ContextManager used
> {connect,listen}SSL and friends (because those were the appropriate APIs)
> - Which means that we actually need to adjust a huge swathe of docs to use
> endpoints in order to remove the use of ContextManager.
>
> I’ve gotten started on this, but sadly the {connect,listen} paradigm for
> SSL is extremely widespread in the Twisted documentation. This means I’m
> going to generate *several* sizeable tickets that require review just to
> get to a place where we can actually put the darn deprecation marker on
> those classes.
>
> I’ve begun by tackling the tutorial in #8588 (
> https://twistedmatrix.com/trac/ticket/8588). There are further questions
> about the pedagogical value of this as “The Twisted Tutorial”, but for now
> I just want to bring it into 2014.
>
> Anyway, I’ll be spending my Twisted time on this for a while I suspect.
> This will delay HTTP/2 client support, unfortunately. =(
>
> Cory
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160713/6f2bd967/attachment-0002.html>

From cory at lukasa.co.uk  Wed Jul 13 04:39:27 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Wed, 13 Jul 2016 11:39:27 +0100
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <CAO38UC=7-S6p6qEJasOTO2F_F6VvXr5CqM0nuBn4aKy2m=NyKQ@mail.gmail.com>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
 <7C50EE3F-7717-462E-B9DC-2782331DAED0@lukasa.co.uk>
 <0989F397-D755-4E43-A9BF-0C745B5496BD@twistedmatrix.com>
 <1477978A-0EF7-4026-821D-AA0C829DCA79@lukasa.co.uk>
 <CAO38UC=7-S6p6qEJasOTO2F_F6VvXr5CqM0nuBn4aKy2m=NyKQ@mail.gmail.com>
Message-ID: <ED8C29C3-D7A1-429A-AA06-081D031F917F@lukasa.co.uk>


> On 13 Jul 2016, at 10:00, Paweł Miech <pawelmhm at gmail.com> wrote:
> 
> > Anyway, I’ll be spending my Twisted time on this for a while I suspect. This will delay HTTP/2 client support, unfortunately. =(
> 
> Isn't it better to get HTTP2 client support and just document things better for HTTP2? Or maybe even backport some features from CertificateOptions to factory? DefaultSSLContextFactory seems to work ok for cases outside HTTP2. It is not evidently broken. It is probably less secure than twisted.internet.ssl.CertificateOptions but is really broken beyond repair?

Generally speaking I’d say it isn’t better, for a couple of reasons.

Firstly, it rarely works well to document one’s way out of a usability problem. This is doubly-true when the *rest* of the documentation is contrary to what your new documentation would say. For example, the Twisted Web howto client documentation uses ClientContextFactory, which will be utterly unsuitable for HTTP/2.

More generally, having two different ways to do TLS, one of which is substantially less secure and powerful than the other, is a real problem. For example, DefaultSSLContextFactory literally only works for HTTP/2 servers by chance: it was never actually *designed* to work with ALPN and only managed to do so because we refactored the implementation to have the TLSMemoryBIOFactory apply the ALPN/NPN logic. In essence, by sheer bad luck we managed to change the HTTP/2 implementation to accidentally work with the old method, when it was never planned to do so.

Worse, though, is that while the ContextFactory isn’t that bad for servers, it’s *terrible* for clients. In particular, the ClientContextFactory does not use SNI, does not validate hostnames, and generally speaking does not produce secure TLS. That means I’d want to prevent the HTTP/2 client from using the ClientContextFactory *anyway*: it’s really genuinely terrible and needs to be burned with fire.

If you’re interested in speeding up the arrival of HTTP/2 client support, then, the best way to do that is to help out with the deprecation effort. I’ve got patches open for the majority of the docs problems, and will be starting to work on the code problems over the next few days. All of these patches will require review, and other people writing patches will also speed things up.

Basically, I’m disinclined to want to prolong the lifetime of something that was supposed to go away two years ago. Twisted has a lot of things in it that were *supposed* to be deprecated but were never *actually* deprecated, and that kind of soft deprecation ends up causing the kind of problem we’ve bumped into here, whereby a lot of people have code that “works” with current features, but new features are designed only with an eye to the best practice. On a personal level, I want to push for Twisted to *actually* deprecate things that are soft deprecated. That has the best long-term effect on the project, by reducing the amount of code that needs to be maintained and encouraging users to move towards features that function better.

Cory
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160713/4e64882b/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160713/4e64882b/attachment.sig>

From hawkowl at atleastfornow.net  Fri Jul 15 07:02:53 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Fri, 15 Jul 2016 21:02:53 +0800
Subject: [Twisted-Python] IProtocolWithReactor,
	or passing the reactor though to protocols
Message-ID: <753010BE-FF69-4BBF-AC91-BC1C5AB5D33A@atleastfornow.net>

(disclaimer: this is after several hours on an aeroplane, this may all be nonsense)

So, I'm currently looking into adding some features to twisted.web -- something that historically hasn't had the best support for pluggable reactors, and which requires levels and levels of monkeypatching (see the top level of https://github.com/twisted/twisted/compare/trunk...deferreds-in-resrender-3711 ). So, I was thinking, what if we made a new way for things to get their reactor, rather than extending all these concrete implementations everywhere?

Currently, you'd pass a reactor instance through to protocols by making the factory understand it, and the protocol calling self.factory._reactor or whatever. I never thought this was a supremely helpful or useful interface -- especially for one-shot classes -- so what if instead we made a new IProtocol-extending interface, which signals to tcp.Port/etc that the protocol, once created, should have a reactor set on it (maybe through some "setConnectingReactor" or something). This would mean that the factory doesn't know about the reactor in most cases (with things like HTTPFactory doing logging as an exception) -- but we could also have an IClient/ServerFactoryWithReactor, that Endpoints (which needs to know about the reactor, and which reactor it is listening on) can then check for and call a similar function, telling the Factory what reactor it is actually running under.

This, I think, would reduce a bunch of duplicate code in __init__s of factories, and could be implemented in the base class of Protocol or ServerFactory, possibly. What do people think?

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160715/af67a45b/attachment.sig>

From rodrigc at crodrigues.org  Fri Jul 15 12:05:44 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 15 Jul 2016 11:05:44 -0700
Subject: [Twisted-Python] New users cannot subscribe to mailing list
Message-ID: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>

Hi,

I have talked to two recent contributors to Twisted,
and both mentioned to me that they cannot subscribe to the mailing list.
The mailing list is essentially unusable to new subscribers.

Is anyone working on fixing this?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160715/7ad0f09e/attachment-0002.html>

From dansut at gmail.com  Fri Jul 15 12:41:05 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Fri, 15 Jul 2016 14:41:05 -0400
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
Message-ID: <CADzPF4vLA5nCXkOE0p22=+OmEgSPQPizMo_7cqK8x2==Og_sGA@mail.gmail.com>

On Fri, Jul 15, 2016 at 2:05 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> I have talked to two recent contributors to Twisted,
> and both mentioned to me that they cannot subscribe to the mailing list.
> The mailing list is essentially unusable to new subscribers.

Only the Web interface seems to be broken, and I can't even remember
exactly how - I just took this as an initiation test and used the
email interface to get here ;)

Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>



From mithrandi at mithrandi.net  Fri Jul 15 14:11:28 2016
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Fri, 15 Jul 2016 20:11:28 +0000
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
Message-ID: <CAMcKhMSmRZEK1fcTvMcd6YVnX4smyUrZ-YGiHJFpQbUwMAD7Fg@mail.gmail.com>

On Fri, 15 Jul 2016 at 20:06 Craig Rodrigues <rodrigc at crodrigues.org> wrote:

> Is anyone working on fixing this?
>

I believe this email explains things:
http://twistedmatrix.com/pipermail/twisted-python/2016-March/030233.html
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160715/57555034/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Jul 15 15:06:28 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 15 Jul 2016 14:06:28 -0700
Subject: [Twisted-Python] IProtocolWithReactor,
	or passing the reactor though to protocols
In-Reply-To: <753010BE-FF69-4BBF-AC91-BC1C5AB5D33A@atleastfornow.net>
References: <753010BE-FF69-4BBF-AC91-BC1C5AB5D33A@atleastfornow.net>
Message-ID: <BDED83AC-50BE-4EF8-9CD1-ABAF2C2BD14D@twistedmatrix.com>


> On Jul 15, 2016, at 6:02 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> (disclaimer: this is after several hours on an aeroplane, this may all be nonsense)
> 
> So, I'm currently looking into adding some features to twisted.web -- something that historically hasn't had the best support for pluggable reactors, and which requires levels and levels of monkeypatching (see the top level of https://github.com/twisted/twisted/compare/trunk...deferreds-in-resrender-3711 ). So, I was thinking, what if we made a new way for things to get their reactor, rather than extending all these concrete implementations everywhere?
> 
> Currently, you'd pass a reactor instance through to protocols by making the factory understand it, and the protocol calling self.factory._reactor or whatever. I never thought this was a supremely helpful or useful interface -- especially for one-shot classes -- so what if instead we made a new IProtocol-extending interface, which signals to tcp.Port/etc that the protocol, once created, should have a reactor set on it (maybe through some "setConnectingReactor" or something). This would mean that the factory doesn't know about the reactor in most cases (with things like HTTPFactory doing logging as an exception) -- but we could also have an IClient/ServerFactoryWithReactor, that Endpoints (which needs to know about the reactor, and which reactor it is listening on) can then check for and call a similar function, telling the Factory what reactor it is actually running under.
> 
> This, I think, would reduce a bunch of duplicate code in __init__s of factories, and could be implemented in the base class of Protocol or ServerFactory, possibly. What do people think?


First off, I think a clearer articulation of the problem would be helpful :).  Is it "I don't want to take parameters in __init__"?  Or "I don't want to have duplicated code to grab the global reactor everywhere, but I still want to grab the global reactor everywhere"?  Is it "most factories don't need the reactor except to hand it to their protocols, therefore they shouldn't have to have code to deal with it at all"?

I definitely don't think we should address any of these issues with 'setConnectedReactor'.  This is using a side-effect rather than just constructing the object with the things that it needs.  We also shouldn't do it with a base class.  Depending even more on inheritance would be movement in the wrong direction.

If we want to address the issue of duplicated code in constructors, how about something like a @reactorParameter(name='reactor') decorator, which does the grab-the-current-global-reactor-if-it's-not-passed thing?  A better pattern is 'just pass in the reactor', of course.

Or, perhaps what you want is this 7-year-old ticket? :) https://twistedmatrix.com/trac/ticket/3205

-glyph


From glyph at twistedmatrix.com  Fri Jul 15 15:06:49 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 15 Jul 2016 14:06:49 -0700
Subject: [Twisted-Python] IProtocolWithReactor,
	or passing the reactor though to protocols
In-Reply-To: <753010BE-FF69-4BBF-AC91-BC1C5AB5D33A@atleastfornow.net>
References: <753010BE-FF69-4BBF-AC91-BC1C5AB5D33A@atleastfornow.net>
Message-ID: <E0BE033B-D91E-4288-83C1-C1C496E1A408@twistedmatrix.com>


> On Jul 15, 2016, at 6:02 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> (disclaimer: this is after several hours on an aeroplane, this may all be nonsense)
> 
> So, I'm currently looking into adding some features to twisted.web -- something that historically hasn't had the best support for pluggable reactors, and which requires levels and levels of monkeypatching (see the top level of https://github.com/twisted/twisted/compare/trunk...deferreds-in-resrender-3711 ). So, I was thinking, what if we made a new way for things to get their reactor, rather than extending all these concrete implementations everywhere?
> 
> Currently, you'd pass a reactor instance through to protocols by making the factory understand it, and the protocol calling self.factory._reactor or whatever. I never thought this was a supremely helpful or useful interface -- especially for one-shot classes -- so what if instead we made a new IProtocol-extending interface, which signals to tcp.Port/etc that the protocol, once created, should have a reactor set on it (maybe through some "setConnectingReactor" or something). This would mean that the factory doesn't know about the reactor in most cases (with things like HTTPFactory doing logging as an exception) -- but we could also have an IClient/ServerFactoryWithReactor, that Endpoints (which needs to know about the reactor, and which reactor it is listening on) can then check for and call a similar function, telling the Factory what reactor it is actually running under.
> 
> This, I think, would reduce a bunch of duplicate code in __init__s of factories, and could be implemented in the base class of Protocol or ServerFactory, possibly. What do people think?


First off, I think a clearer articulation of the problem would be helpful :).  Is it "I don't want to take parameters in __init__"?  Or "I don't want to have duplicated code to grab the global reactor everywhere, but I still want to grab the global reactor everywhere"?  Is it "most factories don't need the reactor except to hand it to their protocols, therefore they shouldn't have to have code to deal with it at all"?

I definitely don't think we should address any of these issues with 'setConnectedReactor'.  This is using a side-effect rather than just constructing the object with the things that it needs.  We also shouldn't do it with a base class.  Depending even more on inheritance would be movement in the wrong direction.

If we want to address the issue of duplicated code in constructors, how about something like a @reactorParameter(name='reactor') decorator, which does the grab-the-current-global-reactor-if-it's-not-passed thing?  A better pattern is 'just pass in the reactor', of course.

Or, perhaps what you want is this 7-year-old ticket? :) https://twistedmatrix.com/trac/ticket/3205

-glyph


From glyph at twistedmatrix.com  Fri Jul 15 15:14:46 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 15 Jul 2016 14:14:46 -0700
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <CADzPF4vLA5nCXkOE0p22=+OmEgSPQPizMo_7cqK8x2==Og_sGA@mail.gmail.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
 <CADzPF4vLA5nCXkOE0p22=+OmEgSPQPizMo_7cqK8x2==Og_sGA@mail.gmail.com>
Message-ID: <7CADE897-C04B-479D-9C0A-081096CB3250@twistedmatrix.com>


> On Jul 15, 2016, at 11:41 AM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> 
> On Fri, Jul 15, 2016 at 2:05 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
>> I have talked to two recent contributors to Twisted,
>> and both mentioned to me that they cannot subscribe to the mailing list.
>> The mailing list is essentially unusable to new subscribers.
> 
> Only the Web interface seems to be broken, and I can't even remember
> exactly how - I just took this as an initiation test and used the
> email interface to get here ;)

I am aware and I am working on it.  The subscription interface has been disabled because it's a magnet for backscatter spam that was being used in several nefarious ways, so we can't really turn it back on in its current state; I am migrating elsewhere for discussion lists.

If someone wanted to write up some self-service tips for using the email interface on the wiki in the meanwhile, that would be great ;).

-glyph


From adi at roiban.ro  Fri Jul 15 17:40:02 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 16 Jul 2016 00:40:02 +0100
Subject: [Twisted-Python] IProtocolWithReactor,
 or passing the reactor though to protocols
In-Reply-To: <BDED83AC-50BE-4EF8-9CD1-ABAF2C2BD14D@twistedmatrix.com>
References: <753010BE-FF69-4BBF-AC91-BC1C5AB5D33A@atleastfornow.net>
 <BDED83AC-50BE-4EF8-9CD1-ABAF2C2BD14D@twistedmatrix.com>
Message-ID: <CAFycZ9cBN7QL1XCCeO_z0tAMfxAocfEd70=1qnVjMAOKFDvu1A@mail.gmail.com>

On 15 July 2016 at 22:06, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

>

Or, perhaps what you want is this 7-year-old ticket? :)
> https://twistedmatrix.com/trac/ticket/3205
>

I left my feedback on the ticket :)

+1 for getting the reactor from the transport

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160716/b5f5aa8c/attachment-0002.html>

From rodrigc at crodrigues.org  Fri Jul 15 19:51:48 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 15 Jul 2016 18:51:48 -0700
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <7CADE897-C04B-479D-9C0A-081096CB3250@twistedmatrix.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
 <CADzPF4vLA5nCXkOE0p22=+OmEgSPQPizMo_7cqK8x2==Og_sGA@mail.gmail.com>
 <7CADE897-C04B-479D-9C0A-081096CB3250@twistedmatrix.com>
Message-ID: <CAG=rPVfTW_si7XqfJwLTXgmmk5VTZuRmS7_oM2DPTyGEpc2KQA@mail.gmail.com>

On Fri, Jul 15, 2016 at 2:14 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
>
> I am aware and I am working on it.  The subscription interface has been
> disabled because it's a magnet for backscatter spam that was being used in
> several nefarious ways, so we can't really turn it back on in its current
> state; I am migrating elsewhere for discussion lists.
>
> If someone wanted to write up some self-service tips for using the email
> interface on the wiki in the meanwhile, that would be great ;).
>

Since you are working on this, can you write up the wiki page with the
correct
way to subscribe to the mailing list, and correct any links on the web page
to point to the wiki page?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160715/03b935fb/attachment-0002.html>

From rodrigc at crodrigues.org  Fri Jul 15 20:00:12 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 15 Jul 2016 19:00:12 -0700
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <CAMcKhMSmRZEK1fcTvMcd6YVnX4smyUrZ-YGiHJFpQbUwMAD7Fg@mail.gmail.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
 <CAMcKhMSmRZEK1fcTvMcd6YVnX4smyUrZ-YGiHJFpQbUwMAD7Fg@mail.gmail.com>
Message-ID: <CAG=rPVfBJ5DJTwqvM5jE9x4h421yQe+ePEYU5U61k30mh1nxiQ@mail.gmail.com>

On Fri, Jul 15, 2016 at 1:11 PM, Tristan Seligmann <mithrandi at mithrandi.net>
wrote:

>
> I believe this email explains things:
> http://twistedmatrix.com/pipermail/twisted-python/2016-March/030233.html
>


Two comments about that posting:

(1)  For someone who is not subscribed to the mailing list, that isn't
going to help them.  In order to
       read that,  they need to be subscribed to the mailing list.

(2)  That was posted back in March, nearly 4 months ago.  What is blocking
forward progress on fixing the mailing list?
       I realize that folks are overloaded and busy, but is this a 4 month
job to fix the mailing list?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160715/745d1167/attachment-0002.html>

From hawkowl at atleastfornow.net  Sat Jul 16 07:01:43 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sat, 16 Jul 2016 15:01:43 +0200
Subject: [Twisted-Python] IProtocolWithReactor,
	or passing the reactor though to protocols
In-Reply-To: <BDED83AC-50BE-4EF8-9CD1-ABAF2C2BD14D@twistedmatrix.com>
References: <753010BE-FF69-4BBF-AC91-BC1C5AB5D33A@atleastfornow.net>
 <BDED83AC-50BE-4EF8-9CD1-ABAF2C2BD14D@twistedmatrix.com>
Message-ID: <C2037DA9-1533-48CB-9872-782268C2A47B@atleastfornow.net>


> On 15 Jul 2016, at 23:06, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
>> 
>> On Jul 15, 2016, at 6:02 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
>> 
>> (disclaimer: this is after several hours on an aeroplane, this may all be nonsense)
>> 
>> So, I'm currently looking into adding some features to twisted.web -- something that historically hasn't had the best support for pluggable reactors, and which requires levels and levels of monkeypatching (see the top level of https://github.com/twisted/twisted/compare/trunk...deferreds-in-resrender-3711 ). So, I was thinking, what if we made a new way for things to get their reactor, rather than extending all these concrete implementations everywhere?
>> 
>> Currently, you'd pass a reactor instance through to protocols by making the factory understand it, and the protocol calling self.factory._reactor or whatever. I never thought this was a supremely helpful or useful interface -- especially for one-shot classes -- so what if instead we made a new IProtocol-extending interface, which signals to tcp.Port/etc that the protocol, once created, should have a reactor set on it (maybe through some "setConnectingReactor" or something). This would mean that the factory doesn't know about the reactor in most cases (with things like HTTPFactory doing logging as an exception) -- but we could also have an IClient/ServerFactoryWithReactor, that Endpoints (which needs to know about the reactor, and which reactor it is listening on) can then check for and call a similar function, telling the Factory what reactor it is actually running under.
>> 
>> This, I think, would reduce a bunch of duplicate code in __init__s of factories, and could be implemented in the base class of Protocol or ServerFactory, possibly. What do people think?
> 
> 
> First off, I think a clearer articulation of the problem would be helpful :).  Is it "I don't want to take parameters in __init__"?  Or "I don't want to have duplicated code to grab the global reactor everywhere, but I still want to grab the global reactor everywhere"?  Is it "most factories don't need the reactor except to hand it to their protocols, therefore they shouldn't have to have code to deal with it at all"?
> 
> I definitely don't think we should address any of these issues with 'setConnectedReactor'.  This is using a side-effect rather than just constructing the object with the things that it needs.  We also shouldn't do it with a base class.  Depending even more on inheritance would be movement in the wrong direction.
> 
> If we want to address the issue of duplicated code in constructors, how about something like a @reactorParameter(name='reactor') decorator, which does the grab-the-current-global-reactor-if-it's-not-passed thing?  A better pattern is 'just pass in the reactor', of course.
> 
> Or, perhaps what you want is this 7-year-old ticket? :) https://twistedmatrix.com/trac/ticket/3205
> 
> -glyph

Yes, that ticket is almost what I want! That is a much better solution for Protocols.

However, Factories still need the reactor given, and it seems really silly and very hard to explain why you both would need to create a Factory with a reference to a reactor, and then call reactor.listenTCP/endpoint.connect/listen, also with a reactor. I feel like one of these should really be able to tell the other.

This also doesn't fit the problem idnar raised on IRC -- that the reactor serving the connections may not be the one that the protocol wants to use, for whatever reason (gui reactor and a not gui reactor?) -- I can't say if #3205 has the same problems, but I believe it does. I guess then that's up to the protocol, but I kind of would like if all protocols had one consistent place for "this is the reactor I should schedule things on" -- and transport.reactor does not seem to be it, because that's still got the problem that idnar has raised.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160716/6f102857/attachment.sig>

From adi at roiban.ro  Sat Jul 16 19:58:17 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 17 Jul 2016 02:58:17 +0100
Subject: [Twisted-Python] CI testing on Windows
Message-ID: <CAFycZ9cO6TJtWQZihueGqpzq-QWcDid8fk8eXvdjb+HXsfrd2A@mail.gmail.com>

Hi,

We now have automated tests running on Windows an Appveyor for any PR.

In this way team and non-team member can get some feedback about their
changes... and also see the coverage report for windows.

Some tests are failing on the Appveyor env, while they pass on the the Win7
and Win2012 buildbot slaves.

Here is the ticket https://twistedmatrix.com/trac/ticket/8612

Keeping buildbot running and Windows slaves running takes a lot of time.

Coverage reports from Windows7 are broken... and I don't know why, while
python processes on Win2012 are left running and some of them using up to
1.2G of memory.

If you care about running Twisted on Windows please consider contributing
to improve the Appveyor test or to manage the Windows slaves.

I was the one pushing for the Win2012, but I don't have time to keep it
running. If someone want to take care of it, please let me know. Otherwise
I will remove it as I don't have time to monitor it and kill stray
processes.

I added Win2012 to get coverage reported from Windows, but now that we have
Appveyor, the Win2012 slave is no longer that important.

Many thanks to Rackspace for sponsoring the Win2012 slave and for Appveyor
providing a great free service.

Regards,
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160717/4129b5df/attachment-0002.html>

From rodrigc at crodrigues.org  Sat Jul 16 23:11:27 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 16 Jul 2016 22:11:27 -0700
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down a lot
Message-ID: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>

In the past few days, buildbot.twistedmatrix.com seems to be down all the
time, and requires manual restarts.  As I write this, it is down right now.

Is there something wrong with the hardware involved with
buildbot.twistedmatrix.com?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160716/d54822ab/attachment-0002.html>

From adi at roiban.ro  Sun Jul 17 00:18:14 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 17 Jul 2016 07:18:14 +0100
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down a lot
In-Reply-To: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>
References: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>
Message-ID: <CAFycZ9fifV4cPy2Mi4PYMQ1zW2C8RX-C4ofkE7A_Zp=KDaacMg@mail.gmail.com>

On 17 July 2016 at 06:11, Craig Rodrigues <rodrigc at crodrigues.org> wrote:

> In the past few days, buildbot.twistedmatrix.com seems to be down all the
> time, and requires manual restarts.  As I write this, it is down right now.
>
> Is there something wrong with the hardware involved with
> buildbot.twistedmatrix.com?
>
>
The hardware is fine.
For some unknown reason the buildmaster process is terminated.

I have restarted it again.
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160717/60682b15/attachment-0002.html>

From hawkowl at atleastfornow.net  Sun Jul 17 00:21:51 2016
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Sat, 16 Jul 2016 23:21:51 -0700
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down a lot
In-Reply-To: <CAFycZ9fifV4cPy2Mi4PYMQ1zW2C8RX-C4ofkE7A_Zp=KDaacMg@mail.gmail.com>
References: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>
 <CAFycZ9fifV4cPy2Mi4PYMQ1zW2C8RX-C4ofkE7A_Zp=KDaacMg@mail.gmail.com>
Message-ID: <CAMxb2it6Lc=5Rw991pVgS22RWvjy90PEjaY06maPD4gwgGFpxw@mail.gmail.com>

It's OOMing -- I think the upgrade to Eight trunk introduced some sort of
memory usage regression or we've done something wrong -- I've unfortunately
not had time to investigate.

We could size up the RAM in the meantime I guess?

-Amber

On 17 Jul 2016 08:19, "Adi Roiban" <adi at roiban.ro> wrote:

>
>
> On 17 July 2016 at 06:11, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
>
>> In the past few days, buildbot.twistedmatrix.com seems to be down all the
>> time, and requires manual restarts.  As I write this, it is down right
>> now.
>>
>> Is there something wrong with the hardware involved with
>> buildbot.twistedmatrix.com?
>>
>>
> The hardware is fine.
> For some unknown reason the buildmaster process is terminated.
>
> I have restarted it again.
> --
> Adi Roiban
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160716/f323f4c2/attachment-0002.html>

From adi at roiban.ro  Sun Jul 17 00:36:23 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 17 Jul 2016 07:36:23 +0100
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down a lot
In-Reply-To: <CAMxb2it6Lc=5Rw991pVgS22RWvjy90PEjaY06maPD4gwgGFpxw@mail.gmail.com>
References: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>
 <CAFycZ9fifV4cPy2Mi4PYMQ1zW2C8RX-C4ofkE7A_Zp=KDaacMg@mail.gmail.com>
 <CAMxb2it6Lc=5Rw991pVgS22RWvjy90PEjaY06maPD4gwgGFpxw@mail.gmail.com>
Message-ID: <CAFycZ9c8M95JYX3T7Oydm2T++EM+=TXNCASPZhY3M0w2ate6JQ@mail.gmail.com>

On 17 July 2016 at 07:21, Amber Brown <hawkowl at atleastfornow.net> wrote:

> It's OOMing -- I think the upgrade to Eight trunk introduced some sort of
> memory usage regression or we've done something wrong -- I've unfortunately
> not had time to investigate.
>
> We could size up the RAM in the meantime I guess?
>
> -Amber
>

I can try to revert the github webhooks + github status send and see if we
still get these errors.

I also don't have too much time to investigate, but I can revert things if
it helps.

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160717/baae2c97/attachment-0002.html>

From hawkowl at atleastfornow.net  Sun Jul 17 00:38:38 2016
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Sat, 16 Jul 2016 23:38:38 -0700
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down a lot
In-Reply-To: <CAFycZ9c8M95JYX3T7Oydm2T++EM+=TXNCASPZhY3M0w2ate6JQ@mail.gmail.com>
References: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>
 <CAFycZ9fifV4cPy2Mi4PYMQ1zW2C8RX-C4ofkE7A_Zp=KDaacMg@mail.gmail.com>
 <CAMxb2it6Lc=5Rw991pVgS22RWvjy90PEjaY06maPD4gwgGFpxw@mail.gmail.com>
 <CAFycZ9c8M95JYX3T7Oydm2T++EM+=TXNCASPZhY3M0w2ate6JQ@mail.gmail.com>
Message-ID: <CAMxb2iuufu9YoJ6qYC6pOqvUrT=mazgfGVD2WM2L8ZY+9RdikQ@mail.gmail.com>

Yeah, that's a good idea - disable them for now, and we'll see if the OOMs
happen. Then we can investigate them closer if it stops.

On 17 Jul 2016 08:37, "Adi Roiban" <adi at roiban.ro> wrote:

>
>
> On 17 July 2016 at 07:21, Amber Brown <hawkowl at atleastfornow.net> wrote:
>
>> It's OOMing -- I think the upgrade to Eight trunk introduced some sort of
>> memory usage regression or we've done something wrong -- I've unfortunately
>> not had time to investigate.
>>
>> We could size up the RAM in the meantime I guess?
>>
>> -Amber
>>
>
> I can try to revert the github webhooks + github status send and see if we
> still get these errors.
>
> I also don't have too much time to investigate, but I can revert things if
> it helps.
>
> --
> Adi Roiban
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160716/be146242/attachment-0002.html>

From adi at roiban.ro  Sun Jul 17 00:47:40 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 17 Jul 2016 07:47:40 +0100
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down a lot
In-Reply-To: <CAMxb2iuufu9YoJ6qYC6pOqvUrT=mazgfGVD2WM2L8ZY+9RdikQ@mail.gmail.com>
References: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>
 <CAFycZ9fifV4cPy2Mi4PYMQ1zW2C8RX-C4ofkE7A_Zp=KDaacMg@mail.gmail.com>
 <CAMxb2it6Lc=5Rw991pVgS22RWvjy90PEjaY06maPD4gwgGFpxw@mail.gmail.com>
 <CAFycZ9c8M95JYX3T7Oydm2T++EM+=TXNCASPZhY3M0w2ate6JQ@mail.gmail.com>
 <CAMxb2iuufu9YoJ6qYC6pOqvUrT=mazgfGVD2WM2L8ZY+9RdikQ@mail.gmail.com>
Message-ID: <CAFycZ9f-O6R6AH0cZLORaL3aKMyYb0t=u+Nepm=yv7ZT9sQpCg@mail.gmail.com>

On 17 July 2016 at 07:38, Amber Brown <hawkowl at atleastfornow.net> wrote:

> Yeah, that's a good idea - disable them for now, and we'll see if the OOMs
> happen. Then we can investigate them closer if it stops.
>
> On 17 Jul 2016 08:37, "Adi Roiban" <adi at roiban.ro> wrote:
>
>>
>>
>> On 17 July 2016 at 07:21, Amber Brown <hawkowl at atleastfornow.net> wrote:
>>
>>> It's OOMing -- I think the upgrade to Eight trunk introduced some sort
>>> of memory usage regression or we've done something wrong -- I've
>>> unfortunately not had time to investigate.
>>>
>>> We could size up the RAM in the meantime I guess?
>>>
>>> -Amber
>>>
>>
>> I can try to revert the github webhooks + github status send and see if
>> we still get these errors.
>>
>> I also don't have too much time to investigate, but I can revert things
>> if it helps.
>>
>>
There is this ticket https://github.com/twisted-infra/braid/issues/216 to
track the progress and changes.


-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160717/b6a9ffc3/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Jul 18 00:12:34 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 17 Jul 2016 23:12:34 -0700
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <CAG=rPVfTW_si7XqfJwLTXgmmk5VTZuRmS7_oM2DPTyGEpc2KQA@mail.gmail.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
 <CADzPF4vLA5nCXkOE0p22=+OmEgSPQPizMo_7cqK8x2==Og_sGA@mail.gmail.com>
 <7CADE897-C04B-479D-9C0A-081096CB3250@twistedmatrix.com>
 <CAG=rPVfTW_si7XqfJwLTXgmmk5VTZuRmS7_oM2DPTyGEpc2KQA@mail.gmail.com>
Message-ID: <463BECAE-737F-4166-92F4-BA696DC64E71@twistedmatrix.com>


> On Jul 15, 2016, at 18:51, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> On Fri, Jul 15, 2016 at 2:14 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> 
> I am aware and I am working on it.  The subscription interface has been disabled because it's a magnet for backscatter spam that was being used in several nefarious ways, so we can't really turn it back on in its current state; I am migrating elsewhere for discussion lists.
> 
> If someone wanted to write up some self-service tips for using the email interface on the wiki in the meanwhile, that would be great ;).
> 
> Since you are working on this, can you write up the wiki page with the correct
> way to subscribe to the mailing list, and correct any links on the web page to point to the wiki page?

I'd rather spend the time I have available to complete the actual admin work necessary to move to the new list.  I would appreciate it if someone else could take this part on.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160717/048624b1/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Jul 18 00:33:21 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 17 Jul 2016 23:33:21 -0700
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <CAG=rPVfBJ5DJTwqvM5jE9x4h421yQe+ePEYU5U61k30mh1nxiQ@mail.gmail.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
 <CAMcKhMSmRZEK1fcTvMcd6YVnX4smyUrZ-YGiHJFpQbUwMAD7Fg@mail.gmail.com>
 <CAG=rPVfBJ5DJTwqvM5jE9x4h421yQe+ePEYU5U61k30mh1nxiQ@mail.gmail.com>
Message-ID: <7B1F3933-1C02-4217-B4EC-5D7CC571AEA2@twistedmatrix.com>


> On Jul 15, 2016, at 19:00, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> 
> 
> On Fri, Jul 15, 2016 at 1:11 PM, Tristan Seligmann <mithrandi at mithrandi.net <mailto:mithrandi at mithrandi.net>> wrote:
> 
> I believe this email explains things: http://twistedmatrix.com/pipermail/twisted-python/2016-March/030233.html <http://twistedmatrix.com/pipermail/twisted-python/2016-March/030233.html> 
> 
> 
> Two comments about that posting:
> 
> (1)  For someone who is not subscribed to the mailing list, that isn't going to help them.  In order to
>        read that,  they need to be subscribed to the mailing list.

No, the archives are open; you don't need to be subscribed.  I realize that non-subscribers might not have any way to _discover_ that message, but that's a different problem.

> (2)  That was posted back in March, nearly 4 months ago.  What is blocking forward progress on fixing the mailing list?
>        I realize that folks are overloaded and busy, but is this a 4 month job to fix the mailing list?

Yes.  Consider:

I've got no help on this task; volunteers have thus far not been able to make good on their intentions to help out.  I have been reluctant to ask for help from existing administrative contributors (yourself, adi, hawkowl) because you've had your plates full as well.
Between now and then I've had PyCon, DockerCon, dozens of Twisted reviews, 2 weeks of vacation, numerous Twisted reviews and a plethora of other tasks at work.
Due to the tightly-coupled nature of our infrastructure, the simple solutions like "upgrade mailman" are not as trivial as they should be, so we are having to take the proverbial long way around.

It's like that old adage from Fred Brooks: "How does a project get to be a year late?  One day at a time."

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160717/8cb0dd1e/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Jul 18 01:15:49 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 18 Jul 2016 00:15:49 -0700
Subject: [Twisted-Python] IProtocolWithReactor,
	or passing the reactor though to protocols
In-Reply-To: <C2037DA9-1533-48CB-9872-782268C2A47B@atleastfornow.net>
References: <753010BE-FF69-4BBF-AC91-BC1C5AB5D33A@atleastfornow.net>
 <BDED83AC-50BE-4EF8-9CD1-ABAF2C2BD14D@twistedmatrix.com>
 <C2037DA9-1533-48CB-9872-782268C2A47B@atleastfornow.net>
Message-ID: <E7AEEA79-1265-4358-A5E6-03B264E2E3AA@twistedmatrix.com>


> On Jul 16, 2016, at 06:01, Amber Hawkie Brown <hawkowl at atleastfornow.net <mailto:hawkowl at atleastfornow.net>> wrote:
> 
> Yes, that ticket is almost what I want! That is a much better solution for Protocols.
> 
> However, Factories still need the reactor given, and it seems really silly and very hard to explain why you both would need to create a Factory with a reference to a reactor, and then call reactor.listenTCP/endpoint.connect/listen, also with a reactor. I feel like one of these should really be able to tell the other.

Which factories need this reference given?  Some need a clock, for e.g. timeouts, but then... that's OK, give them a clock.  The fact that a parameter must sometimes be passed to two different places doesn't mean we shouldn't make it a parameter...

Possibly the problem here is that 'doStart' and 'doStop' ought to receive the reactor passed to them as well.  And maybe something else, too, for that matter, like an address, or an endpoint - that interface has always been a bit annoyingly narrow.  But a concrete use-case would help here.

> This also doesn't fit the problem idnar raised on IRC -- that the reactor serving the connections may not be the one that the protocol wants to use, for whatever reason (gui reactor and a not gui reactor?)

This use-case doesn't make any sense, because if you want to have a GUI you need to use a GUI reactor for everything; the reference passed is the running reactor.

> -- I can't say if #3205 has the same problems, but I believe it does. I guess then that's up to the protocol, but I kind of would like if all protocols had one consistent place for "this is the reactor I should schedule things on" -- and transport.reactor does not seem to be it, because that's still got the problem that idnar has raised.

Where did idnar raise this problem?  I am still not clear on exactly what we're talking about.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160718/0f731114/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Jul 18 01:29:52 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 18 Jul 2016 00:29:52 -0700
Subject: [Twisted-Python] CI testing on Windows
In-Reply-To: <CAFycZ9cO6TJtWQZihueGqpzq-QWcDid8fk8eXvdjb+HXsfrd2A@mail.gmail.com>
References: <CAFycZ9cO6TJtWQZihueGqpzq-QWcDid8fk8eXvdjb+HXsfrd2A@mail.gmail.com>
Message-ID: <EEA0BDCB-752B-48D3-AAD9-D3F5FD30D168@twistedmatrix.com>


> On Jul 16, 2016, at 18:58, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> We now have automated tests running on Windows an Appveyor for any PR.
> 
> In this way team and non-team member can get some feedback about their changes... and also see the coverage report for windows.
> 
> Some tests are failing on the Appveyor env, while they pass on the the Win7 and Win2012 buildbot slaves.
> 
> Here is the ticket https://twistedmatrix.com/trac/ticket/8612 <https://twistedmatrix.com/trac/ticket/8612>
> 
> Keeping buildbot running and Windows slaves running takes a lot of time.
> 
> Coverage reports from Windows7 are broken... and I don't know why, while python processes on Win2012 are left running and some of them using up to 1.2G of memory.
> 
> If you care about running Twisted on Windows please consider contributing to improve the Appveyor test or to manage the Windows slaves.
> 
> I was the one pushing for the Win2012, but I don't have time to keep it running. If someone want to take care of it, please let me know. Otherwise I will remove it as I don't have time to monitor it and kill stray processes.
> 
> I added Win2012 to get coverage reported from Windows, but now that we have Appveyor, the Win2012 slave is no longer that important.
> 
> Many thanks to Rackspace for sponsoring the Win2012 slave and for Appveyor providing a great free service.

Thanks for all your work on our continuous integration in general, Adi, this work specifically, and double-thanks for providing these detailed reports of what's going on.  It's often confusing for contributors (and even project members!) to figure out exactly what's going on with CI at any moment so it's very helpful to have this.

Other Windows contributors: it would be great to get those appveyor tests passing ;-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160718/b0d4eef1/attachment-0002.html>

From hawkowl at atleastfornow.net  Mon Jul 18 01:53:59 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Mon, 18 Jul 2016 09:53:59 +0200
Subject: [Twisted-Python] IProtocolWithReactor,
	or passing the reactor though to protocols
In-Reply-To: <E7AEEA79-1265-4358-A5E6-03B264E2E3AA@twistedmatrix.com>
References: <753010BE-FF69-4BBF-AC91-BC1C5AB5D33A@atleastfornow.net>
 <BDED83AC-50BE-4EF8-9CD1-ABAF2C2BD14D@twistedmatrix.com>
 <C2037DA9-1533-48CB-9872-782268C2A47B@atleastfornow.net>
 <E7AEEA79-1265-4358-A5E6-03B264E2E3AA@twistedmatrix.com>
Message-ID: <4E29E141-F1DF-4CD9-AA25-82AFE56AB890@atleastfornow.net>


> On 18 Jul 2016, at 09:15, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
>> On Jul 16, 2016, at 06:01, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
>> 
>> Yes, that ticket is almost what I want! That is a much better solution for Protocols.
>> 
>> However, Factories still need the reactor given, and it seems really silly and very hard to explain why you both would need to create a Factory with a reference to a reactor, and then call reactor.listenTCP/endpoint.connect/listen, also with a reactor. I feel like one of these should really be able to tell the other.
> 
> Which factories need this reference given?  Some need a clock, for e.g. timeouts, but then... that's OK, give them a clock.  The fact that a parameter must sometimes be passed to two different places doesn't mean we shouldn't make it a parameter...

Yes, but it's a very big footgun. If we are using a custom reactor, we must pass it at every level of the stack, when the information can easily be got from other sources.

> Possibly the problem here is that 'doStart' and 'doStop' ought to receive the reactor passed to them as well.  And maybe something else, too, for that matter, like an address, or an endpoint - that interface has always been a bit annoyingly narrow.  But a concrete use-case would help here.

My use case is making it easier to write things that require the reactor not having to be given absolutely everywhere -- it's very very inpenetrable to look at every interface and see if it has a reactor parameter.

> 
>> This also doesn't fit the problem idnar raised on IRC -- that the reactor serving the connections may not be the one that the protocol wants to use, for whatever reason (gui reactor and a not gui reactor?)
> 
> This use-case doesn't make any sense, because if you want to have a GUI you need to use a GUI reactor for everything; the reference passed is the running reactor.
> 

Different reactors in threads (e.g. gilectomy, STM).

>> -- I can't say if #3205 has the same problems, but I believe it does. I guess then that's up to the protocol, but I kind of would like if all protocols had one consistent place for "this is the reactor I should schedule things on" -- and transport.reactor does not seem to be it, because that's still got the problem that idnar has raised.
> 
> Where did idnar raise this problem?  I am still not clear on exactly what we're talking about.

IRC, like I mentioned :)

> 
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160718/67809a07/attachment.sig>

From jamesbroadhead at gmail.com  Mon Jul 18 12:04:12 2016
From: jamesbroadhead at gmail.com (James Broadhead)
Date: Mon, 18 Jul 2016 19:04:12 +0100
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down a lot
In-Reply-To: <CAMxb2it6Lc=5Rw991pVgS22RWvjy90PEjaY06maPD4gwgGFpxw@mail.gmail.com>
References: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>
 <CAFycZ9fifV4cPy2Mi4PYMQ1zW2C8RX-C4ofkE7A_Zp=KDaacMg@mail.gmail.com>
 <CAMxb2it6Lc=5Rw991pVgS22RWvjy90PEjaY06maPD4gwgGFpxw@mail.gmail.com>
Message-ID: <CA+hid6EYrtRZ4T2QPufMUSVV_p56DWtneUJU1+djzNw7vVHdxQ@mail.gmail.com>

On 17 July 2016 at 07:21, Amber Brown <hawkowl at atleastfornow.net> wrote:

> It's OOMing  (...)
>

Have you considered something like monit[1] to detect & restart in cases
like this?

[1] https://mmonit.com/monit/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160718/4b025379/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Jul 18 12:17:51 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 18 Jul 2016 11:17:51 -0700
Subject: [Twisted-Python] IProtocolWithReactor,
	or passing the reactor though to protocols
In-Reply-To: <4E29E141-F1DF-4CD9-AA25-82AFE56AB890@atleastfornow.net>
References: <753010BE-FF69-4BBF-AC91-BC1C5AB5D33A@atleastfornow.net>
 <BDED83AC-50BE-4EF8-9CD1-ABAF2C2BD14D@twistedmatrix.com>
 <C2037DA9-1533-48CB-9872-782268C2A47B@atleastfornow.net>
 <E7AEEA79-1265-4358-A5E6-03B264E2E3AA@twistedmatrix.com>
 <4E29E141-F1DF-4CD9-AA25-82AFE56AB890@atleastfornow.net>
Message-ID: <2BC1B82A-0D88-4110-A301-B5B51DCC6A89@twistedmatrix.com>


> On Jul 18, 2016, at 12:53 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> 
>> On 18 Jul 2016, at 09:15, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>> 
>>> On Jul 16, 2016, at 06:01, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
>>> 
>>> Yes, that ticket is almost what I want! That is a much better solution for Protocols.
>>> 
>>> However, Factories still need the reactor given, and it seems really silly and very hard to explain why you both would need to create a Factory with a reference to a reactor, and then call reactor.listenTCP/endpoint.connect/listen, also with a reactor. I feel like one of these should really be able to tell the other.
>> 
>> Which factories need this reference given?  Some need a clock, for e.g. timeouts, but then... that's OK, give them a clock.  The fact that a parameter must sometimes be passed to two different places doesn't mean we shouldn't make it a parameter...
> 
> Yes, but it's a very big footgun. If we are using a custom reactor, we must pass it at every level of the stack, when the information can easily be got from other sources.

How is passing a reactor parameter a 'footgun'?  What is the misuse you anticipate that will cause people to habitually use incorrectly?

>> Possibly the problem here is that 'doStart' and 'doStop' ought to receive the reactor passed to them as well.  And maybe something else, too, for that matter, like an address, or an endpoint - that interface has always been a bit annoyingly narrow.  But a concrete use-case would help here.
> 
> My use case is making it easier to write things that require the reactor not having to be given absolutely everywhere -- it's very very inpenetrable to look at every interface and see if it has a reactor parameter.

You have to look at every interface to see what other parameters it has though.  So I don't see how it is impenetrable.  In fact it's required :).

>>> This also doesn't fit the problem idnar raised on IRC -- that the reactor serving the connections may not be the one that the protocol wants to use, for whatever reason (gui reactor and a not gui reactor?)
>> 
>> This use-case doesn't make any sense, because if you want to have a GUI you need to use a GUI reactor for everything; the reference passed is the running reactor.
> 
> Different reactors in threads (e.g. gilectomy, STM).

In that case we'd need an API for getting the reactor for the current thread (ideally when the thread was started).  In that case it still wouldn't make much sense to pass a different one to a Protocol and a Factory.

>>> -- I can't say if #3205 has the same problems, but I believe it does. I guess then that's up to the protocol, but I kind of would like if all protocols had one consistent place for "this is the reactor I should schedule things on" -- and transport.reactor does not seem to be it, because that's still got the problem that idnar has raised.
>> 
>> Where did idnar raise this problem?  I am still not clear on exactly what we're talking about.
> 
> IRC, like I mentioned :)

It would be good to get a write-up of the whole problem first, then.  Making new functions that accept parameters is not a "problem" :).

-glyph




From glyph at twistedmatrix.com  Mon Jul 18 15:23:42 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 18 Jul 2016 14:23:42 -0700
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <8F094A16-47CC-42EF-8DC8-FBEE41BB3588@lukasa.co.uk>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <8F094A16-47CC-42EF-8DC8-FBEE41BB3588@lukasa.co.uk>
Message-ID: <9F791D00-D5AF-4E77-A5B4-BFF85813E2E3@twistedmatrix.com>


> On Jul 12, 2016, at 12:45 AM, Cory Benfield <cory at lukasa.co.uk <mailto:cory at lukasa.co.uk>> wrote:
> 
> 
>> On 11 Jul 2016, at 20:22, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
>> 
>> So pyOpenSSL/Cryptography doesn't have SSL_get_current_cipher anywhere?
> 
> get_current_cipher isn’t helpful. In particular, it puts us in an awkward place where we have a connection that has been negotiated for HTTP/2, but we cannot use it. The only action Twisted can meaningfully take at that point is to log and tear the connection down, which doesn’t really solve our problems.
> 
> We can do that, for sure, but it wouldn’t be much clearer than what happened here.

Just generally we should probably be logging this (at INFO or somesuch) regardless, so that interested parties can extract which cipher suites are actually in use.  But perhaps not relevant to this problem, really.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160718/20f92b7d/attachment-0002.html>

From dansut at gmail.com  Tue Jul 19 07:02:18 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Tue, 19 Jul 2016 09:02:18 -0400
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <463BECAE-737F-4166-92F4-BA696DC64E71@twistedmatrix.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
 <CADzPF4vLA5nCXkOE0p22=+OmEgSPQPizMo_7cqK8x2==Og_sGA@mail.gmail.com>
 <7CADE897-C04B-479D-9C0A-081096CB3250@twistedmatrix.com>
 <CAG=rPVfTW_si7XqfJwLTXgmmk5VTZuRmS7_oM2DPTyGEpc2KQA@mail.gmail.com>
 <463BECAE-737F-4166-92F4-BA696DC64E71@twistedmatrix.com>
Message-ID: <CADzPF4tZZLSbX6LKNhs2c7rJTQOmzX=5k-a=UmF5OjcEPvzczw@mail.gmail.com>

On Jul 15, 2016, at 18:51, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> Since you are working on this, can you write up the wiki page with the
> correct way to subscribe to the mailing list, and correct any links on the web
> page to point to the wiki page?

On Mon, Jul 18, 2016 at 2:12 AM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
>> I'd rather spend the time I have available to complete the actual admin work
> necessary to move to the new list.  I would appreciate it if someone else
> could take this part on.

I thought I could add this to the Wiki as I subscribed this way fairly
recently...

- presumably to this page: https://twistedmatrix.com/trac/wiki/TwistedCommunity

logged in with my GitHub account though I obviously don't have Wiki edit perms.

It's pretty simple though, you just need to send an email to:
twisted-python-join at twistedmatrix.com

Maybe for more info add a link to here:
http://www.list.org/mailman-member/node10.html

Hopefully this will make it easy for someone with perms to update.
Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>



From glyph at twistedmatrix.com  Tue Jul 19 13:12:51 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 19 Jul 2016 12:12:51 -0700
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <CADzPF4tZZLSbX6LKNhs2c7rJTQOmzX=5k-a=UmF5OjcEPvzczw@mail.gmail.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
 <CADzPF4vLA5nCXkOE0p22=+OmEgSPQPizMo_7cqK8x2==Og_sGA@mail.gmail.com>
 <7CADE897-C04B-479D-9C0A-081096CB3250@twistedmatrix.com>
 <CAG=rPVfTW_si7XqfJwLTXgmmk5VTZuRmS7_oM2DPTyGEpc2KQA@mail.gmail.com>
 <463BECAE-737F-4166-92F4-BA696DC64E71@twistedmatrix.com>
 <CADzPF4tZZLSbX6LKNhs2c7rJTQOmzX=5k-a=UmF5OjcEPvzczw@mail.gmail.com>
Message-ID: <26EBEA14-73B0-4E90-93E5-962059CC74B3@twistedmatrix.com>


> On Jul 19, 2016, at 6:02 AM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> 
> Hopefully this will make it easy for someone with perms to update.

What's your github handle? We are not stingy with edit permissions, they're only disabled by default to discourage spammers :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160719/d707d229/attachment-0002.html>

From adi at roiban.ro  Wed Jul 20 01:37:56 2016
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 20 Jul 2016 08:37:56 +0100
Subject: [Twisted-Python] removing twistedchecker buildbot for the time
	being
In-Reply-To: <CAFycZ9cA9Argmf5W1JZbAniiBFPm0rGhJecmPyZQv+OJ-dN4iw@mail.gmail.com>
References: <3F6678C4-83BC-4261-8389-83C8F49EF72A@twistedmatrix.com>
 <CAFycZ9cA9Argmf5W1JZbAniiBFPm0rGhJecmPyZQv+OJ-dN4iw@mail.gmail.com>
Message-ID: <CAFycZ9dBW5-7HCABSYMaX8vmLXbOg_o9dFKpToTPsn-MRW=o1Q@mail.gmail.com>

On 13 July 2016 at 01:27, Adi Roiban <adi at roiban.ro> wrote:

>
>
> On 13 July 2016 at 00:37, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
>> Right now it seems the difference-computation logic on the twistedchecker
>> buildbot has just broken completely.  It's introducing useless noise into
>> the build results because it makes every actually-passing build into a big
>> red 'X' on the pull request status page.  I think I'm going to remove it.
>> Any objections?
>>
>>
> 1. Maybe use the --diff option on Buildbot.
>
> 2. We can move it to Travis based on the --diff option, ticket pending
> review https://twistedmatrix.com/trac/ticket/8572
> And if we move to Travis, get rid of tox-travis so that we can have
> multiple jobs for the same python version,
> https://twistedmatrix.com/trac/ticket/8535
>
> ----------
>
> I am +1 for removing the buildbot specific logic and allow to run a diff
> on the local branch, so that it is much easier to work on improving the
> diff functionality.
>
>
The twistechecker buildbot builder was removed  ... as for a short time we
had twistechecker running on Travis-CI

For more details see https://twistedmatrix.com/trac/ticket/8572

twistedchecker --diff needs to be improved --
https://github.com/twisted/twistedchecker/issues

Has anyone used https://pypi.python.org/pypi/diff_cover  ?

Since twistedchecker is based on pylint I was thinking that maybe we can
reuse that code :)

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160720/acd29ab0/attachment-0002.html>

From adi at roiban.ro  Wed Jul 20 07:31:24 2016
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 20 Jul 2016 14:31:24 +0100
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down a lot
In-Reply-To: <CA+hid6EYrtRZ4T2QPufMUSVV_p56DWtneUJU1+djzNw7vVHdxQ@mail.gmail.com>
References: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>
 <CAFycZ9fifV4cPy2Mi4PYMQ1zW2C8RX-C4ofkE7A_Zp=KDaacMg@mail.gmail.com>
 <CAMxb2it6Lc=5Rw991pVgS22RWvjy90PEjaY06maPD4gwgGFpxw@mail.gmail.com>
 <CA+hid6EYrtRZ4T2QPufMUSVV_p56DWtneUJU1+djzNw7vVHdxQ@mail.gmail.com>
Message-ID: <CAFycZ9d0_cpv1c4HKjhbkHsjAe5xgBYRGncx6M7p1owRzU39gg@mail.gmail.com>

On 18 July 2016 at 19:04, James Broadhead <jamesbroadhead at gmail.com> wrote:

> On 17 July 2016 at 07:21, Amber Brown <hawkowl at atleastfornow.net> wrote:
>
>> It's OOMing  (...)
>>
>
> Have you considered something like monit[1] to detect & restart in cases
> like this?
>
>
This might help, but will not help up understand what we are doing wrong :)

After disabling the github webhooks, the buildbot look stable... so we
might have a clue about what goes wrong.

Right now I don't have time to look into this issue, so github hooks are
disabled for now from the GitHub UI.

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160720/6f2d4f44/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Jul 20 10:51:59 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 20 Jul 2016 09:51:59 -0700
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down a lot
In-Reply-To: <CAFycZ9d0_cpv1c4HKjhbkHsjAe5xgBYRGncx6M7p1owRzU39gg@mail.gmail.com>
References: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>
 <CAFycZ9fifV4cPy2Mi4PYMQ1zW2C8RX-C4ofkE7A_Zp=KDaacMg@mail.gmail.com>
 <CAMxb2it6Lc=5Rw991pVgS22RWvjy90PEjaY06maPD4gwgGFpxw@mail.gmail.com>
 <CA+hid6EYrtRZ4T2QPufMUSVV_p56DWtneUJU1+djzNw7vVHdxQ@mail.gmail.com>
 <CAFycZ9d0_cpv1c4HKjhbkHsjAe5xgBYRGncx6M7p1owRzU39gg@mail.gmail.com>
Message-ID: <A96D75B7-70B4-4F49-93FA-E090FA1BD55A@twistedmatrix.com>


> On Jul 20, 2016, at 6:31 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> 
> 
> On 18 July 2016 at 19:04, James Broadhead <jamesbroadhead at gmail.com <mailto:jamesbroadhead at gmail.com>> wrote:
> On 17 July 2016 at 07:21, Amber Brown <hawkowl at atleastfornow.net <mailto:hawkowl at atleastfornow.net>> wrote:
> It's OOMing  (...)
> 
> 
> Have you considered something like monit[1] to detect & restart in cases like this?  
> 
> 
> This might help, but will not help up understand what we are doing wrong :)
> 
> After disabling the github webhooks, the buildbot look stable... so we might have a clue about what goes wrong.
> 
> Right now I don't have time to look into this issue, so github hooks are disabled for now from the GitHub UI.

Can someone who's had a direct look at the OOMing process (adi? amber?) report this upstream?  It's a real pity that we won't get github statuses for buildbot builds any more; that was a huge step in the right direction.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160720/6c556737/attachment-0002.html>

From adi at roiban.ro  Wed Jul 20 12:01:44 2016
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 20 Jul 2016 19:01:44 +0100
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down a lot
In-Reply-To: <A96D75B7-70B4-4F49-93FA-E090FA1BD55A@twistedmatrix.com>
References: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>
 <CAFycZ9fifV4cPy2Mi4PYMQ1zW2C8RX-C4ofkE7A_Zp=KDaacMg@mail.gmail.com>
 <CAMxb2it6Lc=5Rw991pVgS22RWvjy90PEjaY06maPD4gwgGFpxw@mail.gmail.com>
 <CA+hid6EYrtRZ4T2QPufMUSVV_p56DWtneUJU1+djzNw7vVHdxQ@mail.gmail.com>
 <CAFycZ9d0_cpv1c4HKjhbkHsjAe5xgBYRGncx6M7p1owRzU39gg@mail.gmail.com>
 <A96D75B7-70B4-4F49-93FA-E090FA1BD55A@twistedmatrix.com>
Message-ID: <CAFycZ9fcvSEzZXfd-ezR7tADsYvViwQ=0DUnSR6qPMgx=DyMhg@mail.gmail.com>

On 20 July 2016 at 17:51, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

>
> On Jul 20, 2016, at 6:31 AM, Adi Roiban <adi at roiban.ro> wrote:
>
>
>
> On 18 July 2016 at 19:04, James Broadhead <jamesbroadhead at gmail.com>
> wrote:
>
>> On 17 July 2016 at 07:21, Amber Brown <hawkowl at atleastfornow.net> wrote:
>>
>>> It's OOMing  (...)
>>>
>>
>> Have you considered something like monit[1] to detect & restart in cases
>> like this?
>>
>>
> This might help, but will not help up understand what we are doing wrong :)
>
> After disabling the github webhooks, the buildbot look stable... so we
> might have a clue about what goes wrong.
>
> Right now I don't have time to look into this issue, so github hooks are
> disabled for now from the GitHub UI.
>
>
> Can someone who's had a direct look at the OOMing process (adi? amber?)
> report this upstream?  It's a real pity that we won't get github statuses
> for buildbot builds any more; that was a huge step in the right direction.
>
>
I don't know how to grasp this.
By the time I was observing the issue, the buildbot process was already
dead.

I have recently discovered the Rackspace monitoring capabilities for VM...
and set up a memory notification... not sure who will receive the alerts.

I have re-enable to GitHub hooks and will start taking a closer look at the
buildmaster process.... but maybe 2GB is just not enough for a buildmaster.

I have triggered the creation of an image for the current buildbot machine
and will consider upgrading the buildbot to 4GB of memory to see if we
still hit the ceiling.

For my project I have a similar buildmaster based on number of builders and
slaves (without github hooks and without linter factories) and in 2 weeks
of uptime the virtual memory usage is 1.5GB
.... so mabybe 2GB is just not enough for buildbot.

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160720/efb76a2a/attachment-0002.html>

From adi at roiban.ro  Wed Jul 20 12:59:18 2016
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 20 Jul 2016 19:59:18 +0100
Subject: [Twisted-Python] Twisted tests on public CI
Message-ID: <CAFycZ9ezGvCM4537x3907QYmHhDdeMWrXnfhikEVic+gK91wWA@mail.gmail.com>

Hi,

We now have Ubuntu / Windows Server and OS X running Twisted tests for each
PR, using Travis-CI and Appveyor

Non-`Twisted GitHub Team` members can now run a pretty extensive test suite
for commits associated with a PR.

The coverage report is 90.52% (+/- 0.01%) just by running tests on the
public CI.
As far as I can tell this is better than what we get with Buildbot builders
(since we no longer have BSD slaves and Win7 coverage reporter is broken
and Win2012 slave was removed)

Some tests on Appveyor are still failing. Help here is much appreciated.

We also got some tests failing on OS X but Amber has already started
working to fix them https://twistedmatrix.com/trac/ticket/8639

OS X tests results will not block for now a merge, but you will have to
wait for the OS X results. In this way we can see how much longer does a
test run takes, now that we also have OS X.

Appveyor was pretty fast in the last days... after the move to Rackspace.

Travis-CI was a bit slow on the free queue... not sure how fast is the
payed queue :)

Please report any issues here or on Twisted Infrastructure tracker
https://github.com/twisted-infra/braid/issues

Regards,
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160720/3c04abb4/attachment-0002.html>

From dansut at gmail.com  Wed Jul 20 13:14:59 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Wed, 20 Jul 2016 15:14:59 -0400
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <26EBEA14-73B0-4E90-93E5-962059CC74B3@twistedmatrix.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
 <CADzPF4vLA5nCXkOE0p22=+OmEgSPQPizMo_7cqK8x2==Og_sGA@mail.gmail.com>
 <7CADE897-C04B-479D-9C0A-081096CB3250@twistedmatrix.com>
 <CAG=rPVfTW_si7XqfJwLTXgmmk5VTZuRmS7_oM2DPTyGEpc2KQA@mail.gmail.com>
 <463BECAE-737F-4166-92F4-BA696DC64E71@twistedmatrix.com>
 <CADzPF4tZZLSbX6LKNhs2c7rJTQOmzX=5k-a=UmF5OjcEPvzczw@mail.gmail.com>
 <26EBEA14-73B0-4E90-93E5-962059CC74B3@twistedmatrix.com>
Message-ID: <CADzPF4sA3ojT9rsdY=zW7VvfHKokRmh6_JEVMcRZ8Yhu6xQ-vQ@mail.gmail.com>

> On Jul 19, 2016, at 6:02 AM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> Hopefully this will make it easy for someone with perms to update.

On Tue, Jul 19, 2016 at 3:12 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> What's your github handle? We are not stingy with edit permissions, they're
> only disabled by default to discourage spammers :).

dansut

Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>



From glyph at twistedmatrix.com  Wed Jul 20 15:31:54 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 20 Jul 2016 14:31:54 -0700
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down a lot
In-Reply-To: <CAFycZ9fcvSEzZXfd-ezR7tADsYvViwQ=0DUnSR6qPMgx=DyMhg@mail.gmail.com>
References: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>
 <CAFycZ9fifV4cPy2Mi4PYMQ1zW2C8RX-C4ofkE7A_Zp=KDaacMg@mail.gmail.com>
 <CAMxb2it6Lc=5Rw991pVgS22RWvjy90PEjaY06maPD4gwgGFpxw@mail.gmail.com>
 <CA+hid6EYrtRZ4T2QPufMUSVV_p56DWtneUJU1+djzNw7vVHdxQ@mail.gmail.com>
 <CAFycZ9d0_cpv1c4HKjhbkHsjAe5xgBYRGncx6M7p1owRzU39gg@mail.gmail.com>
 <A96D75B7-70B4-4F49-93FA-E090FA1BD55A@twistedmatrix.com>
 <CAFycZ9fcvSEzZXfd-ezR7tADsYvViwQ=0DUnSR6qPMgx=DyMhg@mail.gmail.com>
Message-ID: <038DA9C1-7E61-49BE-91FE-478DAD409C67@twistedmatrix.com>


> On Jul 20, 2016, at 11:01 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> 
> 
> On 20 July 2016 at 17:51, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
>> On Jul 20, 2016, at 6:31 AM, Adi Roiban <adi at roiban.ro <mailto:adi at roiban.ro>> wrote:
>> 
>> 
>> 
>> On 18 July 2016 at 19:04, James Broadhead <jamesbroadhead at gmail.com <mailto:jamesbroadhead at gmail.com>> wrote:
>> On 17 July 2016 at 07:21, Amber Brown <hawkowl at atleastfornow.net <mailto:hawkowl at atleastfornow.net>> wrote:
>> It's OOMing  (...)
>> 
>> 
>> Have you considered something like monit[1] to detect & restart in cases like this?  
>> 
>> 
>> This might help, but will not help up understand what we are doing wrong :)
>> 
>> After disabling the github webhooks, the buildbot look stable... so we might have a clue about what goes wrong.
>> 
>> Right now I don't have time to look into this issue, so github hooks are disabled for now from the GitHub UI.
> 
> Can someone who's had a direct look at the OOMing process (adi? amber?) report this upstream?  It's a real pity that we won't get github statuses for buildbot builds any more; that was a huge step in the right direction.
> 
> 
> I don't know how to grasp this.
> By the time I was observing the issue, the buildbot process was already dead.

Yeah, these types of issues are tricky to debug.  Thanks for looking into it nonetheless; I was hoping you knew more, but if you don't, nothing to be done.

> I have recently discovered the Rackspace monitoring capabilities for VM... and set up a memory notification... not sure who will receive the alerts.

I'll make sure that the relevant people are on the monitoring list.

> I have re-enable to GitHub hooks and will start taking a closer look at the buildmaster process.... but maybe 2GB is just not enough for a buildmaster.

Thanks.

> I have triggered the creation of an image for the current buildbot machine and will consider upgrading the buildbot to 4GB of memory to see if we still hit the ceiling.

> For my project I have a similar buildmaster based on number of builders and slaves (without github hooks and without linter factories) and in 2 weeks of uptime the virtual memory usage is 1.5GB
> .... so mabybe 2GB is just not enough for buildbot.

Bummer.  It does seem like that's quite likely.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160720/b0ae6073/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Jul 20 15:36:02 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 20 Jul 2016 14:36:02 -0700
Subject: [Twisted-Python] Twisted tests on public CI
In-Reply-To: <CAFycZ9ezGvCM4537x3907QYmHhDdeMWrXnfhikEVic+gK91wWA@mail.gmail.com>
References: <CAFycZ9ezGvCM4537x3907QYmHhDdeMWrXnfhikEVic+gK91wWA@mail.gmail.com>
Message-ID: <39FD9FDA-9A64-498D-8723-33E12F66CC61@twistedmatrix.com>


> On Jul 20, 2016, at 11:59 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> We now have Ubuntu / Windows Server and OS X running Twisted tests for each PR, using Travis-CI and Appveyor
> 
> Non-`Twisted GitHub Team` members can now run a pretty extensive test suite for commits associated with a PR. 
> 
> The coverage report is 90.52% (+/- 0.01%) just by running tests on the public CI.
> As far as I can tell this is better than what we get with Buildbot builders (since we no longer have BSD slaves and Win7 coverage reporter is broken and Win2012 slave was removed)

It seems like the only thing that Buildbot is now covering which this setup is not is alternate kernels, which have not diverged in behavior from Twisted's perspective for 7 or 8 years.  I am starting to wonder if we could get rid of the entire current buildbot environment with all its complicated trust issues and just start over with the parts that we actually want: on-demand, latent FreeBSD and Windows builders, for example.  This is a tricky problem, but if it's the *only* thing we're trying to get buildbot to do it's a lot simpler to start there.

Someone please correct me if I'm wrong though ;).

> Some tests on Appveyor are still failing. Help here is much appreciated.
> 
> We also got some tests failing on OS X but Amber has already started working to fix them https://twistedmatrix.com/trac/ticket/8639 <https://twistedmatrix.com/trac/ticket/8639>
> 
> OS X tests results will not block for now a merge, but you will have to wait for the OS X results. In this way we can see how much longer does a test run takes, now that we also have OS X.
> 
> Appveyor was pretty fast in the last days... after the move to Rackspace.

I'm a little confused - does Appveyor run on Rackspace now, or do we run some component of Appveyor on Twisted's Rackspace account?

> Travis-CI was a bit slow on the free queue... not sure how fast is the payed queue :)
> 
> Please report any issues here or on Twisted Infrastructure tracker https://github.com/twisted-infra/braid/issues <https://github.com/twisted-infra/braid/issues>
Thanks *again* for the sustained effort on improving the CI situation, Adi.  It seems like we're not quite there yet, but things are really starting to come together.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160720/c5523041/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Jul 20 15:40:48 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 20 Jul 2016 14:40:48 -0700
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <CADzPF4sA3ojT9rsdY=zW7VvfHKokRmh6_JEVMcRZ8Yhu6xQ-vQ@mail.gmail.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
 <CADzPF4vLA5nCXkOE0p22=+OmEgSPQPizMo_7cqK8x2==Og_sGA@mail.gmail.com>
 <7CADE897-C04B-479D-9C0A-081096CB3250@twistedmatrix.com>
 <CAG=rPVfTW_si7XqfJwLTXgmmk5VTZuRmS7_oM2DPTyGEpc2KQA@mail.gmail.com>
 <463BECAE-737F-4166-92F4-BA696DC64E71@twistedmatrix.com>
 <CADzPF4tZZLSbX6LKNhs2c7rJTQOmzX=5k-a=UmF5OjcEPvzczw@mail.gmail.com>
 <26EBEA14-73B0-4E90-93E5-962059CC74B3@twistedmatrix.com>
 <CADzPF4sA3ojT9rsdY=zW7VvfHKokRmh6_JEVMcRZ8Yhu6xQ-vQ@mail.gmail.com>
Message-ID: <21CFB48D-C6CD-46DC-BD6F-5B451FF4628D@twistedmatrix.com>


> On Jul 20, 2016, at 12:14 PM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> 
>> On Jul 19, 2016, at 6:02 AM, Daniel Sutcliffe <dansut at gmail.com> wrote:
>> Hopefully this will make it easy for someone with perms to update.
> 
> On Tue, Jul 19, 2016 at 3:12 PM, Glyph Lefkowitz
> <glyph at twistedmatrix.com> wrote:
>> What's your github handle? We are not stingy with edit permissions, they're
>> only disabled by default to discourage spammers :).
> 
> dansut

You now have wiki-edit superpowers!  Use them for good, or at least, the kind of evil which makes a good story.

-glyph





From hawkowl at atleastfornow.net  Wed Jul 20 15:46:23 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Wed, 20 Jul 2016 23:46:23 +0200
Subject: [Twisted-Python] Twisted tests on public CI
In-Reply-To: <39FD9FDA-9A64-498D-8723-33E12F66CC61@twistedmatrix.com>
References: <CAFycZ9ezGvCM4537x3907QYmHhDdeMWrXnfhikEVic+gK91wWA@mail.gmail.com>
 <39FD9FDA-9A64-498D-8723-33E12F66CC61@twistedmatrix.com>
Message-ID: <E53B76CB-1D10-46DE-BC6F-FFFB4D0BA573@atleastfornow.net>


> On 20 Jul 2016, at 23:36, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> It seems like the only thing that Buildbot is now covering which this setup is not is alternate kernels, which have not diverged in behavior from Twisted's perspective for 7 or 8 years.  I am starting to wonder if we could get rid of the entire current buildbot environment with all its complicated trust issues and just start over with the parts that we actually want: on-demand, latent FreeBSD and Windows builders, for example.  This is a tricky problem, but if it's the *only* thing we're trying to get buildbot to do it's a lot simpler to start there.
> 
> Someone please correct me if I'm wrong though ;).

That and non-old Ubuntus -- new Fedora/RHEL versions for the past year or two have uncovered OpenSSL changes (partially because Fedora uses FIPS mode, and things like SSLv3 and MD5 just don't work on them), as well as testing more diverse versions (like Ubuntu 12.04, which has an OpenSSL which doesn't support NPN/ALPN).

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160720/7e466463/attachment.sig>

From rodrigc at crodrigues.org  Wed Jul 20 16:04:19 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 20 Jul 2016 15:04:19 -0700
Subject: [Twisted-Python] Twisted tests on public CI
In-Reply-To: <39FD9FDA-9A64-498D-8723-33E12F66CC61@twistedmatrix.com>
References: <CAFycZ9ezGvCM4537x3907QYmHhDdeMWrXnfhikEVic+gK91wWA@mail.gmail.com>
 <39FD9FDA-9A64-498D-8723-33E12F66CC61@twistedmatrix.com>
Message-ID: <CAG=rPVf0UU5zTeLtxaKh==U6oKHxwaOhSu1dScOtvefPdBMYEA@mail.gmail.com>

On Wed, Jul 20, 2016 at 2:36 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
>
> I am starting to wonder if we could get rid of the entire current buildbot
> environment with all its complicated trust issues and just start over with
> the parts that we actually want: on-demand, latent FreeBSD and Windows
> builders, for example.  This is a tricky problem, but if it's the *only*
> thing we're trying to get buildbot to do it's a lot simpler to start there.
>
>
I agree with your thoughts and think that this is a good direction to go in.

I think it is a good goal to have Travis + Appveyor + whatever 3rd party CI
system out there be
the primary go-to, with Twisted buildbot filling in the gaps that these
systems don't cover.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160720/77c712f5/attachment-0002.html>

From adi at roiban.ro  Wed Jul 20 16:18:10 2016
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 20 Jul 2016 23:18:10 +0100
Subject: [Twisted-Python] Twisted tests on public CI
In-Reply-To: <39FD9FDA-9A64-498D-8723-33E12F66CC61@twistedmatrix.com>
References: <CAFycZ9ezGvCM4537x3907QYmHhDdeMWrXnfhikEVic+gK91wWA@mail.gmail.com>
 <39FD9FDA-9A64-498D-8723-33E12F66CC61@twistedmatrix.com>
Message-ID: <CAFycZ9eaJxH8AWjcQAKee4V_VcJsE59cag70XKD21SBVSot3ig@mail.gmail.com>

On 20 July 2016 at 22:36, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

>
> On Jul 20, 2016, at 11:59 AM, Adi Roiban <adi at roiban.ro> wrote:
>
> Hi,
>
> We now have Ubuntu / Windows Server and OS X running Twisted tests for
> each PR, using Travis-CI and Appveyor
>
> Non-`Twisted GitHub Team` members can now run a pretty extensive test
> suite for commits associated with a PR.
>
> The coverage report is 90.52% (+/- 0.01%) just by running tests on the
> public CI.
> As far as I can tell this is better than what we get with Buildbot
> builders (since we no longer have BSD slaves and Win7 coverage reporter is
> broken and Win2012 slave was removed)
>
>
> It seems like the only thing that Buildbot is now covering which this
> setup is not is alternate kernels, which have not diverged in behavior from
> Twisted's perspective for 7 or 8 years.  I am starting to wonder if we
> could get rid of the entire current buildbot environment with all its
> complicated trust issues and just start over with the parts that we
> actually want: on-demand, latent FreeBSD and Windows builders, for
> example.  This is a tricky problem, but if it's the *only* thing we're
> trying to get buildbot to do it's a lot simpler to start there.
>
> Someone please correct me if I'm wrong though ;).
>
>
+1 to Amber's remark ... different distro have different OpenSSL

I don't know which OpenSSL versions are supported by latest Twisted.

For the kernel, I don't think that there are big differences.... so maybe
we can have docker based latent slaves to run all these distros and destroy
them after each run.

The docker slaves should keep the Rackspace invoice under control.

-------------

api-documentation is still executed on Buildbot ... but there is a ticket
in the review queue to move it to Travis-CI
https://twistedmatrix.com/trac/ticket/8518

Some tests on Appveyor are still failing. Help here is much appreciated.
>
> We also got some tests failing on OS X but Amber has already started
> working to fix them https://twistedmatrix.com/trac/ticket/8639
>
> OS X tests results will not block for now a merge, but you will have to
> wait for the OS X results. In this way we can see how much longer does a
> test run takes, now that we also have OS X.
>
> Appveyor was pretty fast in the last days... after the move to Rackspace.
>
>
> I'm a little confused - does Appveyor run on Rackspace now, or do we run
> some component of Appveyor on Twisted's Rackspace account?
>
>
I have received a message from AppVeyor saying that they have moved the
open source projects to Rackspace ... and after that the time a build was
waiting in the queue is much shorter

https://www.appveyor.com/blog/2016/07/16/migration-to-rackspace


> Travis-CI was a bit slow on the free queue... not sure how fast is the
> payed queue :)
>
> Please report any issues here or on Twisted Infrastructure tracker
> https://github.com/twisted-infra/braid/issues
>
>
> Thanks *again* for the sustained effort on improving the CI situation,
> Adi.  It seems like we're not quite there yet, but things are really
> starting to come together.
>
>
I would consider the Travis-CI / AppVeyor integrations still experimental.

I am happy that we are moving to a command line driven CI design as it
should make it easier to move between CI systems.

This can also help if we want to get latent buildslave as by that time we
 get the latent slaves we should be familiar with running tests in a
disposable VM/container.

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160720/2cbf76d5/attachment-0002.html>

From rodrigc at crodrigues.org  Wed Jul 20 16:32:03 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 20 Jul 2016 15:32:03 -0700
Subject: [Twisted-Python] Windows buildbots and Appveyor
Message-ID: <CAG=rPVe_t4BEUfB_mfEgTAQfX45YGJuABf_Vh=CBbHwjVGMDVg@mail.gmail.com>

The Appveyor setup with Python 2.7 currently does not build any C
extensions.
This means that IOCP reactor is not currently built and none of the IOCP
tests are run in Appveyor.  I'm not sure offhand what the fix is,
but I notice that quite a few Python projects import this script from
Olivier Grisel:
https://github.com/ogrisel/python-appveyor-demo/blob/master/appveyor/run_with_env.cmd

which sets the environment correctly for the Windows compilers, and
then uses the script from inside appveyor.yml with something like:
https://github.com/ogrisel/python-appveyor-demo/blob/master/appveyor.yml

It would be nice if we could get the C extensions buildin in Appveyor.


The Appveyor setup does not have a Python 3 setup, so no Python 3 builds
are done.

There used to be a Python 3 buildbot, and although many of the tests were
broken,
it was producing some interesting logs.  For example, I saw a lot of
warnings
in the SSL code where strings where being passed as arguments to API's which
took bytes as arguments.

Can we bring back at least one Windows Python 3 buildbot, and leave
it as an unsupported, on-demand environment?

I am working on getting more Windows Python 3 tests to pass, so this
would be useful.


--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160720/ada21aa3/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Jul 20 17:18:37 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 20 Jul 2016 16:18:37 -0700
Subject: [Twisted-Python] Twisted tests on public CI
In-Reply-To: <CAFycZ9eaJxH8AWjcQAKee4V_VcJsE59cag70XKD21SBVSot3ig@mail.gmail.com>
References: <CAFycZ9ezGvCM4537x3907QYmHhDdeMWrXnfhikEVic+gK91wWA@mail.gmail.com>
 <39FD9FDA-9A64-498D-8723-33E12F66CC61@twistedmatrix.com>
 <CAFycZ9eaJxH8AWjcQAKee4V_VcJsE59cag70XKD21SBVSot3ig@mail.gmail.com>
Message-ID: <E31AEACE-2D7E-4C2C-A9A2-3E9C3E74DB61@twistedmatrix.com>


> On Jul 20, 2016, at 3:18 PM, Adi Roiban <adi at roiban.ro> wrote:
> 
> 
> 
> On 20 July 2016 at 22:36, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
>> On Jul 20, 2016, at 11:59 AM, Adi Roiban <adi at roiban.ro <mailto:adi at roiban.ro>> wrote:
>> 
>> Hi,
>> 
>> We now have Ubuntu / Windows Server and OS X running Twisted tests for each PR, using Travis-CI and Appveyor
>> 
>> Non-`Twisted GitHub Team` members can now run a pretty extensive test suite for commits associated with a PR. 
>> 
>> The coverage report is 90.52% (+/- 0.01%) just by running tests on the public CI.
>> As far as I can tell this is better than what we get with Buildbot builders (since we no longer have BSD slaves and Win7 coverage reporter is broken and Win2012 slave was removed)
> 
> It seems like the only thing that Buildbot is now covering which this setup is not is alternate kernels, which have not diverged in behavior from Twisted's perspective for 7 or 8 years.  I am starting to wonder if we could get rid of the entire current buildbot environment with all its complicated trust issues and just start over with the parts that we actually want: on-demand, latent FreeBSD and Windows builders, for example.  This is a tricky problem, but if it's the *only* thing we're trying to get buildbot to do it's a lot simpler to start there.
> 
> Someone please correct me if I'm wrong though ;).
> 
> 
> +1 to Amber's remark ... different distro have different OpenSSL
>  
> I don't know which OpenSSL versions are supported by latest Twisted.
> 
> For the kernel, I don't think that there are big differences.... so maybe we can have docker based latent slaves to run all these distros and destroy them after each run.
> 
> The docker slaves should keep the Rackspace invoice under control.

This is exactly where I was going, with one important caveat - Travis-CI supports running arbitrary docker images: <https://docs.travis-ci.com/user/docker/> so we do not need buildbot for this :-).

> api-documentation is still executed on Buildbot ... but there is a ticket in the review queue to move it to Travis-CI
> https://twistedmatrix.com/trac/ticket/8518 <https://twistedmatrix.com/trac/ticket/8518>
Cool; that one seems pretty straightforward to move.

>> Some tests on Appveyor are still failing. Help here is much appreciated.
>> 
>> We also got some tests failing on OS X but Amber has already started working to fix them https://twistedmatrix.com/trac/ticket/8639 <https://twistedmatrix.com/trac/ticket/8639>
>> 
>> OS X tests results will not block for now a merge, but you will have to wait for the OS X results. In this way we can see how much longer does a test run takes, now that we also have OS X.
>> 
>> Appveyor was pretty fast in the last days... after the move to Rackspace.
> 
> I'm a little confused - does Appveyor run on Rackspace now, or do we run some component of Appveyor on Twisted's Rackspace account?
> 
> I have received a message from AppVeyor saying that they have moved the open source projects to Rackspace ... and after that the time a build was waiting in the queue is much shorter
> 
> https://www.appveyor.com/blog/2016/07/16/migration-to-rackspace <https://www.appveyor.com/blog/2016/07/16/migration-to-rackspace>

Woot!  Go team Rackspace!  Thanks for that link.

>> Travis-CI was a bit slow on the free queue... not sure how fast is the payed queue :)
>> 
>> Please report any issues here or on Twisted Infrastructure tracker https://github.com/twisted-infra/braid/issues <https://github.com/twisted-infra/braid/issues>
> Thanks *again* for the sustained effort on improving the CI situation, Adi.  It seems like we're not quite there yet, but things are really starting to come together.
> 
> I would consider the Travis-CI / AppVeyor integrations still experimental. 
> 
> I am happy that we are moving to a command line driven CI design as it should make it easier to move between CI systems.

The one thing I wish we could do is extract our build information in some structured format we could actually parse, to make moving between CI executors even easier... but that's probably a few years out at least :).

> This can also help if we want to get latent buildslave as by that time we  get the latent slaves we should be familiar with running tests in a disposable VM/container.

Latent builders would certainly improve our ability to use buildbot considerably.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160720/b715c7e1/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Jul 20 17:18:48 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 20 Jul 2016 16:18:48 -0700
Subject: [Twisted-Python] Twisted tests on public CI
In-Reply-To: <CAG=rPVf0UU5zTeLtxaKh==U6oKHxwaOhSu1dScOtvefPdBMYEA@mail.gmail.com>
References: <CAFycZ9ezGvCM4537x3907QYmHhDdeMWrXnfhikEVic+gK91wWA@mail.gmail.com>
 <39FD9FDA-9A64-498D-8723-33E12F66CC61@twistedmatrix.com>
 <CAG=rPVf0UU5zTeLtxaKh==U6oKHxwaOhSu1dScOtvefPdBMYEA@mail.gmail.com>
Message-ID: <86F53C39-CA32-40FA-89AB-F2FBBF9E194D@twistedmatrix.com>


> On Jul 20, 2016, at 3:04 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> On Wed, Jul 20, 2016 at 2:36 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> 
> I am starting to wonder if we could get rid of the entire current buildbot environment with all its complicated trust issues and just start over with the parts that we actually want: on-demand, latent FreeBSD and Windows builders, for example.  This is a tricky problem, but if it's the *only* thing we're trying to get buildbot to do it's a lot simpler to start there.
> 
> 
> I agree with your thoughts and think that this is a good direction to go in.
> 
> I think it is a good goal to have Travis + Appveyor + whatever 3rd party CI system out there be
> the primary go-to, with Twisted buildbot filling in the gaps that these systems don't cover.

+1.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160720/c8b0bb3e/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Jul 20 17:58:33 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 20 Jul 2016 16:58:33 -0700
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down a lot
In-Reply-To: <038DA9C1-7E61-49BE-91FE-478DAD409C67@twistedmatrix.com>
References: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>
 <CAFycZ9fifV4cPy2Mi4PYMQ1zW2C8RX-C4ofkE7A_Zp=KDaacMg@mail.gmail.com>
 <CAMxb2it6Lc=5Rw991pVgS22RWvjy90PEjaY06maPD4gwgGFpxw@mail.gmail.com>
 <CA+hid6EYrtRZ4T2QPufMUSVV_p56DWtneUJU1+djzNw7vVHdxQ@mail.gmail.com>
 <CAFycZ9d0_cpv1c4HKjhbkHsjAe5xgBYRGncx6M7p1owRzU39gg@mail.gmail.com>
 <A96D75B7-70B4-4F49-93FA-E090FA1BD55A@twistedmatrix.com>
 <CAFycZ9fcvSEzZXfd-ezR7tADsYvViwQ=0DUnSR6qPMgx=DyMhg@mail.gmail.com>
 <038DA9C1-7E61-49BE-91FE-478DAD409C67@twistedmatrix.com>
Message-ID: <10975DF2-E7C9-4D3A-9DA9-CC05C5E376DB@twistedmatrix.com>


> On Jul 20, 2016, at 2:31 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
>> I have recently discovered the Rackspace monitoring capabilities for VM... and set up a memory notification... not sure who will receive the alerts.
> 
> I'll make sure that the relevant people are on the monitoring list.

I created 'technical contact' users for you and Amber, with current email addresses, which you can use (and even log in as!) if you edit yourselves under 'user management'. I apparently had one already.  You should both have a bogus alert about a MySQL server (since we don't run mysql it seemed a reasonable thing to test).  Make sure that's not flagged as spam and we should all be set up to receive alerts :).

I also added some basic HTTPS monitoring to it as well, so we should see if it goes down for reasons unrelated to memory.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160720/a5ef4c5d/attachment-0002.html>

From oliverpalmer at opalmer.com  Wed Jul 20 19:25:10 2016
From: oliverpalmer at opalmer.com (Oliver Palmer)
Date: Wed, 20 Jul 2016 21:25:10 -0400
Subject: [Twisted-Python] Windows buildbots and Appveyor
In-Reply-To: <CAG=rPVe_t4BEUfB_mfEgTAQfX45YGJuABf_Vh=CBbHwjVGMDVg@mail.gmail.com>
References: <CAG=rPVe_t4BEUfB_mfEgTAQfX45YGJuABf_Vh=CBbHwjVGMDVg@mail.gmail.com>
Message-ID: <CAEgpGv7ieBCRqY4K3R7GQ+Nuin5xV=gU_QC275BQWx4vVwbhRA@mail.gmail.com>

If you or someone else ends up working on this I can attest that his setup
works well and will build C-extensions.  I've been using his script
extensively on pywincffi for Python 2.6+ and Python 3.3+ so far without
issues.  For reference, here's my yaml file:

    https://github.com/opalmer/pywincffi/blob/master/appveyor.yml

Since Twisted is using tox I assume that either tox should setup the
environment or %PYTHON_VERSION% and %PYTHON_ARCH% need to be set by the
build matrix and tox would be called with the wrapper:

    cmd /E:ON /V:ON /C run_with_cmd.cmd tox <arguments>

For pywincffi I thought about writing a tox plugin to do the work of
setting up the environment but ended up deciding against it and using the
build matrix approach instead.  It kept it simple, made it easy for people
to see how the build was setup and adding new versions to the build became
a one or two line change.

I'm not sure about how others would feel about it but it seems like
expanding the build matrix and adding run_with_cmd would be a good way to
start testing against more versions and fixing the C-extension issue.
Improving the build on AppyVeyor might also help shed some light on the
existing test failures too maybe.

On Wed, Jul 20, 2016 at 6:32 PM, Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

> The Appveyor setup with Python 2.7 currently does not build any C
> extensions.
> This means that IOCP reactor is not currently built and none of the IOCP
> tests are run in Appveyor.  I'm not sure offhand what the fix is,
> but I notice that quite a few Python projects import this script from
> Olivier Grisel:
>
> https://github.com/ogrisel/python-appveyor-demo/blob/master/appveyor/run_with_env.cmd
>
> which sets the environment correctly for the Windows compilers, and
> then uses the script from inside appveyor.yml with something like:
> https://github.com/ogrisel/python-appveyor-demo/blob/master/appveyor.yml
>
> It would be nice if we could get the C extensions buildin in Appveyor.
>
>
> The Appveyor setup does not have a Python 3 setup, so no Python 3 builds
> are done.
>
> There used to be a Python 3 buildbot, and although many of the tests were
> broken,
> it was producing some interesting logs.  For example, I saw a lot of
> warnings
> in the SSL code where strings where being passed as arguments to API's
> which
> took bytes as arguments.
>
> Can we bring back at least one Windows Python 3 buildbot, and leave
> it as an unsupported, on-demand environment?
>
> I am working on getting more Windows Python 3 tests to pass, so this
> would be useful.
>
>
> --
> Craig
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160720/6d3e16bf/attachment-0002.html>

From rodrigc at crodrigues.org  Wed Jul 20 19:58:54 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 20 Jul 2016 18:58:54 -0700
Subject: [Twisted-Python] Windows buildbots and Appveyor
In-Reply-To: <CAEgpGv7ieBCRqY4K3R7GQ+Nuin5xV=gU_QC275BQWx4vVwbhRA@mail.gmail.com>
References: <CAG=rPVe_t4BEUfB_mfEgTAQfX45YGJuABf_Vh=CBbHwjVGMDVg@mail.gmail.com>
 <CAEgpGv7ieBCRqY4K3R7GQ+Nuin5xV=gU_QC275BQWx4vVwbhRA@mail.gmail.com>
Message-ID: <CAG=rPVcWRJHiF2FNmjcx5RUgD-j9N_677f1xW588i4pQNz2jmA@mail.gmail.com>

On Wed, Jul 20, 2016 at 6:25 PM, Oliver Palmer <oliverpalmer at opalmer.com>
wrote:

> If you or someone else ends up working on this I can attest that his setup
> works well and will build C-extensions.  I've been using his script
> extensively on pywincffi for Python 2.6+ and Python 3.3+ so far without
> issues.  For reference, here's my yaml file:
>
>     https://github.com/opalmer/pywincffi/blob/master/appveyor.yml
>
> Since Twisted is using tox I assume that either tox should setup the
> environment or %PYTHON_VERSION% and %PYTHON_ARCH% need to be set by the
> build matrix and tox would be called with the wrapper:
>
>     cmd /E:ON /V:ON /C run_with_cmd.cmd tox <arguments>
>
>
Using tox is the desired way to go.
I made an initial cut at this here:
https://github.com/rodrigc/twisted/blob/appveyor2/appveyor.yml

Do you have any cycles to help me improve this and get something working?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160720/46b9e447/attachment-0002.html>

From oliverpalmer at opalmer.com  Wed Jul 20 20:16:50 2016
From: oliverpalmer at opalmer.com (Oliver Palmer)
Date: Wed, 20 Jul 2016 22:16:50 -0400
Subject: [Twisted-Python] Windows buildbots and Appveyor
In-Reply-To: <CAG=rPVcWRJHiF2FNmjcx5RUgD-j9N_677f1xW588i4pQNz2jmA@mail.gmail.com>
References: <CAG=rPVe_t4BEUfB_mfEgTAQfX45YGJuABf_Vh=CBbHwjVGMDVg@mail.gmail.com>
 <CAEgpGv7ieBCRqY4K3R7GQ+Nuin5xV=gU_QC275BQWx4vVwbhRA@mail.gmail.com>
 <CAG=rPVcWRJHiF2FNmjcx5RUgD-j9N_677f1xW588i4pQNz2jmA@mail.gmail.com>
Message-ID: <CAEgpGv50iWu17DS8P489xdHHMt25ZRFQ_HFHssfj84LdzKPBwg@mail.gmail.com>

I should this weekend but it looks like you're on the right track so far.
Looking at tox's config it shouldn't have issues picking up the environment
being added in appveyor.yaml because passenv = * currently.  If this works
out then we can hopefully avoid the need for a plugin and just rely
directly on the wrapper script.  At least in my experience the wrapper
script was all I needed to get builds working across Python versions.

By the way, this can be really useful to help debug problems at runtime
while the build is running:

https://www.appveyor.com/docs/how-to/rdp-to-build-worker

Hit me with @opalmer on GitHub if you've got a PR open between now and the
weekend or want some input, I'll be happy to help either there or on this
list.




On Wed, Jul 20, 2016 at 9:58 PM, Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

> On Wed, Jul 20, 2016 at 6:25 PM, Oliver Palmer <oliverpalmer at opalmer.com>
> wrote:
>
>> If you or someone else ends up working on this I can attest that his
>> setup works well and will build C-extensions.  I've been using his script
>> extensively on pywincffi for Python 2.6+ and Python 3.3+ so far without
>> issues.  For reference, here's my yaml file:
>>
>>     https://github.com/opalmer/pywincffi/blob/master/appveyor.yml
>>
>> Since Twisted is using tox I assume that either tox should setup the
>> environment or %PYTHON_VERSION% and %PYTHON_ARCH% need to be set by the
>> build matrix and tox would be called with the wrapper:
>>
>>     cmd /E:ON /V:ON /C run_with_cmd.cmd tox <arguments>
>>
>>
> Using tox is the desired way to go.
> I made an initial cut at this here:
> https://github.com/rodrigc/twisted/blob/appveyor2/appveyor.yml
>
> Do you have any cycles to help me improve this and get something working?
>
> --
> Craig
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160720/9fa70331/attachment-0002.html>

From oliverpalmer at opalmer.com  Wed Jul 20 20:42:14 2016
From: oliverpalmer at opalmer.com (Oliver Palmer)
Date: Wed, 20 Jul 2016 22:42:14 -0400
Subject: [Twisted-Python] pywincffi status update and next steps
Message-ID: <CAEgpGv7kih6DJmG=Uq_Ft_67EyO4+3gni6A2XAffbBdJzuZNgw@mail.gmail.com>

All (or at least those interested in replacing pywin32 in Twisted),

pywincffi is getting very close to having all the API calls necessary to
replace pywin32. By my count there should be one function left,
GetOverlappedResult().  All of the other functions and constants in use
today should be covered and ready to start swapping into Twisted.

    https://github.com/opalmer/pywincffi/issues/69

There's a couple of reasons I've been holding off on any integration work.
First, Twisted itself has shifted development and testing workflows to
public infrastructure which overall should make integration easier.  The
other issue right now seems to be some of the tests are not passing on
AppVeyor and it's not testing across as many Python versions.

These are not big issues for pywincffi itself but I think it's probably a
good idea to do the integration on top of a known stable build so we can
all be confident in the results.  I plan to spend some time this weekend
taking a look at the build starting off by helping Craig (see thread:
"Windows buildbots and Appveyor") add support for more versions of Python.
After that, unless someone is already working on it, I can start to take a
look at the existing test failures on Windows.

To wrap up, a big thank you to those who've reached out to help move
pywincffi forward so far.  Especially exvito who came up with a system to
wrap cffi types, added functions, fixed some tests and contributed to
several improvements on the development process.

---Oliver
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160720/a5b7becd/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Jul 20 21:20:58 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 20 Jul 2016 20:20:58 -0700
Subject: [Twisted-Python] pywincffi status update and next steps
In-Reply-To: <CAEgpGv7kih6DJmG=Uq_Ft_67EyO4+3gni6A2XAffbBdJzuZNgw@mail.gmail.com>
References: <CAEgpGv7kih6DJmG=Uq_Ft_67EyO4+3gni6A2XAffbBdJzuZNgw@mail.gmail.com>
Message-ID: <746C0F3C-2F5E-4251-B3B8-C7FB639F5BBC@twistedmatrix.com>


> On Jul 20, 2016, at 7:42 PM, Oliver Palmer <oliverpalmer at opalmer.com> wrote:
> 
> pywincffi is getting very close to having all the API calls necessary to replace pywin32. By my count there should be one function left, GetOverlappedResult().  All of the other functions and constants in use today should be covered and ready to start swapping into Twisted.

This is fantastic news.  If we can move the build infrastructure for producing wheels for all the various flavors of windows Python into pywincffi, that will simplify and streamline the Twisted build process even more.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160720/c84a5fad/attachment-0002.html>

From chenjianhappy2008 at 126.com  Wed Jul 20 21:23:04 2016
From: chenjianhappy2008 at 126.com (=?GBK?B?s8K9oQ==?=)
Date: Thu, 21 Jul 2016 11:23:04 +0800 (CST)
Subject: [Twisted-Python] Python SSH Server(twisted.conch) set
 ChallengeResponseAuthentication to yes
Message-ID: <a341e15.46aa.1560b7a5f29.Coremail.chenjianhappy2008@126.com>

hi:
     I wrote a SSH server with Twisted Conch. I want to support for the 'keyboard-interactive' authentication .ChallengeResponseAuthentication controls support for the 'keyboard-interactive' authentication scheme defined in RFC-4256. The 'keyboard-interactive' authentication scheme could, in theory, ask a user any number of multi-facited questions. In openssh the "ChallengeResponseAuthentication" option can be configured in "/etc/ssh/sshd_config". But in twisted i don't know how to do that enable the "ChallengeResponseAuthentication" option ?
    http://stackoverflow.com/questions/38364930/python-ssh-servertwisted-conch-set-challengeresponseauthentication-to-yes
    Best regards,
    ---jianchen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160721/9012d24a/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Jul 20 22:36:10 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 20 Jul 2016 21:36:10 -0700
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
In-Reply-To: <ED8C29C3-D7A1-429A-AA06-081D031F917F@lukasa.co.uk>
References: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>
 <CAO38UCktqG1h3qBNMZNh+c97bSKvA=xFpC8kCmsJ2wDh=mqr5A@mail.gmail.com>
 <CAG=rPVcAA01==PeKxyeEpfBRuUmmXuB+9bSp7ruCx8NQd6=nLg@mail.gmail.com>
 <CAO38UCn21v3pv32K6msRrUDitpvcT0ZRSUU2GTYc+Cuq6FdN=A@mail.gmail.com>
 <52A85622-3590-4A50-8D90-AB2D5F54FBF7@twistedmatrix.com>
 <20919858-3CFD-43FD-9F9A-D72252D44D22@lukasa.co.uk>
 <21DE9FE1-4A6F-421B-941F-4C38C3B00015@twistedmatrix.com>
 <CAO38UCmRu6PE0ZL9X637vd9sFrajhvhQ3WNSAt7oB=RTuBWLdA@mail.gmail.com>
 <7C50EE3F-7717-462E-B9DC-2782331DAED0@lukasa.co.uk>
 <0989F397-D755-4E43-A9BF-0C745B5496BD@twistedmatrix.com>
 <1477978A-0EF7-4026-821D-AA0C829DCA79@lukasa.co.uk>
 <CAO38UC=7-S6p6qEJasOTO2F_F6VvXr5CqM0nuBn4aKy2m=NyKQ@mail.gmail.com>
 <ED8C29C3-D7A1-429A-AA06-081D031F917F@lukasa.co.uk>
Message-ID: <7577C71C-E875-462C-9795-13AEC82D52F9@twistedmatrix.com>

My earlier replies to this thread were pretty terse, so just to expand on it:

> On Jul 13, 2016, at 3:39 AM, Cory Benfield <cory at lukasa.co.uk> wrote:
> 
> 
>> On 13 Jul 2016, at 10:00, Paweł Miech <pawelmhm at gmail.com <mailto:pawelmhm at gmail.com>> wrote:
>> 
>> > Anyway, I’ll be spending my Twisted time on this for a while I suspect. This will delay HTTP/2 client support, unfortunately. =(
>> 
>> Isn't it better to get HTTP2 client support and just document things better for HTTP2? Or maybe even backport some features from CertificateOptions to factory? DefaultSSLContextFactory seems to work ok for cases outside HTTP2.

It really doesn't.

>> It is not evidently broken.

For clients, it's horribly broken and provides no security whatsoever.  For servers, it's badly configured enough that you will have problems with SSLLabs and other automated testing things.

>> It is probably less secure than twisted.internet.ssl.CertificateOptions but is really broken beyond repair?

Yes, it really is.  The only reason we didn't just delete it immediately in a compatibility-breaking exception is that if you knew what you were doing, it was the only way to reasonably be secure in the past, and we did not want to punish those users who had done the best they could with what Twisted was giving them.  It was possible to make something secure with it, if you absolutely knew what you were doing and you layered a bunch of things on top of it.

> Generally speaking I’d say it isn’t better, for a couple of reasons.
> 
> Firstly, it rarely works well to document one’s way out of a usability problem. This is doubly-true when the *rest* of the documentation is contrary to what your new documentation would say. For example, the Twisted Web howto client documentation uses ClientContextFactory, which will be utterly unsuitable for HTTP/2.

Not to mention the fact that it provides no security.  Client-side, anything other than optionsForClientTLS is probably completely unacceptable.  Again… it was possible to add your own security to ClientContextFactory but that is the only reason we didn't delet it.

> More generally, having two different ways to do TLS, one of which is substantially less secure and powerful than the other, is a real problem. For example, DefaultSSLContextFactory literally only works for HTTP/2 servers by chance: it was never actually *designed* to work with ALPN and only managed to do so because we refactored the implementation to have the TLSMemoryBIOFactory apply the ALPN/NPN logic. In essence, by sheer bad luck we managed to change the HTTP/2 implementation to accidentally work with the old method, when it was never planned to do so.

In fairness, the fact that random accidents like this happen is as much a fault of OpenSSL's ... idiosyncratic, shall we say, API, where promiscuous mutable data sharing is completely the norm, as it is a fault of Twisted's bad early misinterpretation of said API.

> Worse, though, is that while the ContextFactory isn’t that bad for servers, it’s *terrible* for clients. In particular, the ClientContextFactory does not use SNI, does not validate hostnames, and generally speaking does not produce secure TLS. That means I’d want to prevent the HTTP/2 client from using the ClientContextFactory *anyway*: it’s really genuinely terrible and needs to be burned with fire.

TERRIBLE TERRIBLE TERRIBLE FOR CLIENTS DON'T USE IT

> If you’re interested in speeding up the arrival of HTTP/2 client support, then, the best way to do that is to help out with the deprecation effort. I’ve got patches open for the majority of the docs problems, and will be starting to work on the code problems over the next few days. All of these patches will require review, and other people writing patches will also speed things up.

+1000 thank you for saying this.

> Basically, I’m disinclined to want to prolong the lifetime of something that was supposed to go away two years ago. Twisted has a lot of things in it that were *supposed* to be deprecated but were never *actually* deprecated, and that kind of soft deprecation ends up causing the kind of problem we’ve bumped into here, whereby a lot of people have code that “works” with current features, but new features are designed only with an eye to the best practice. On a personal level, I want to push for Twisted to *actually* deprecate things that are soft deprecated. That has the best long-term effect on the project, by reducing the amount of code that needs to be maintained and encouraging users to move towards features that function better.

Basically I just wanted to chime in to make it clear that I _absolutely_ agree with _every_ part of this and we should _immediately_ move to implement all of these plans.  Cory, I also really appreciate you going through and taking the time to clear up the messaging around these APIs in our documentation and our implementations to help users understand what's going on so you don't need to be a member of the Twisted cabal to get good security and modern protocol features.

Thanks,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160720/d6b41953/attachment-0002.html>

From ex.vitorino at gmail.com  Thu Jul 21 06:33:02 2016
From: ex.vitorino at gmail.com (Ex Vitorino)
Date: Thu, 21 Jul 2016 14:33:02 +0200
Subject: [Twisted-Python] pywincffi status update and next steps
In-Reply-To: <746C0F3C-2F5E-4251-B3B8-C7FB639F5BBC@twistedmatrix.com>
References: <CAEgpGv7kih6DJmG=Uq_Ft_67EyO4+3gni6A2XAffbBdJzuZNgw@mail.gmail.com>
 <746C0F3C-2F5E-4251-B3B8-C7FB639F5BBC@twistedmatrix.com>
Message-ID: <1EFD7FB7-ECD9-41C6-8B45-ACD39E4A5138@gmail.com>

(rushing from one talk to another)

I'm currently at EuroPython in Bilbao where I've me Amber. I hope I can contribute to more progress on this if we get to Sprint over the coming weekend.

Cheers to all,
--
exvito


> On 21 Jul 2016, at 05:20, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Jul 20, 2016, at 7:42 PM, Oliver Palmer <oliverpalmer at opalmer.com> wrote:
>> 
>> pywincffi is getting very close to having all the API calls necessary to replace pywin32. By my count there should be one function left, GetOverlappedResult().  All of the other functions and constants in use today should be covered and ready to start swapping into Twisted.
> 
> This is fantastic news.  If we can move the build infrastructure for producing wheels for all the various flavors of windows Python into pywincffi, that will simplify and streamline the Twisted build process even more.
> 
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160721/d634b53b/attachment-0002.html>

From adi at roiban.ro  Thu Jul 21 06:49:28 2016
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 21 Jul 2016 13:49:28 +0100
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down a lot
In-Reply-To: <10975DF2-E7C9-4D3A-9DA9-CC05C5E376DB@twistedmatrix.com>
References: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>
 <CAFycZ9fifV4cPy2Mi4PYMQ1zW2C8RX-C4ofkE7A_Zp=KDaacMg@mail.gmail.com>
 <CAMxb2it6Lc=5Rw991pVgS22RWvjy90PEjaY06maPD4gwgGFpxw@mail.gmail.com>
 <CA+hid6EYrtRZ4T2QPufMUSVV_p56DWtneUJU1+djzNw7vVHdxQ@mail.gmail.com>
 <CAFycZ9d0_cpv1c4HKjhbkHsjAe5xgBYRGncx6M7p1owRzU39gg@mail.gmail.com>
 <A96D75B7-70B4-4F49-93FA-E090FA1BD55A@twistedmatrix.com>
 <CAFycZ9fcvSEzZXfd-ezR7tADsYvViwQ=0DUnSR6qPMgx=DyMhg@mail.gmail.com>
 <038DA9C1-7E61-49BE-91FE-478DAD409C67@twistedmatrix.com>
 <10975DF2-E7C9-4D3A-9DA9-CC05C5E376DB@twistedmatrix.com>
Message-ID: <CAFycZ9cXzDt9vnumaA0nGRMYWcEiNprAo=okBGseLmobkV3GNA@mail.gmail.com>

On 21 July 2016 at 00:58, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

>
> On Jul 20, 2016, at 2:31 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
> wrote:
>
> I have recently discovered the Rackspace monitoring capabilities for VM...
> and set up a memory notification... not sure who will receive the alerts.
>
>
> I'll make sure that the relevant people are on the monitoring list.
>
>
> I created 'technical contact' users for you and Amber, with current email
> addresses, which you can use (and even log in as!) if you edit yourselves
> under 'user management'. I apparently had one already.  You should both
> have a bogus alert about a MySQL server (since we don't run mysql it seemed
> a reasonable thing to test).  Make sure that's not flagged as spam and we
> should all be set up to receive alerts :).
>
> I also added some basic HTTPS monitoring to it as well, so we should see
> if it goes down for reasons unrelated to memory.
>
>
OK. I have received the mysql error

I can see that when there we got more builds there is significant increase
in memory usage... but will recover once moved to idle.

For now the VM still has 2GB ... and GitHub webhooks are still enabled

Regards
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160721/f43e3b94/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Jul 21 11:40:27 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 21 Jul 2016 10:40:27 -0700
Subject: [Twisted-Python] buildbot.twistedmatrix.com is down a lot
In-Reply-To: <CAFycZ9cXzDt9vnumaA0nGRMYWcEiNprAo=okBGseLmobkV3GNA@mail.gmail.com>
References: <CAG=rPVcNHeWT_M-u1NG9djdn8NsYMW=C0qaxJej6RtFgxsa4yw@mail.gmail.com>
 <CAFycZ9fifV4cPy2Mi4PYMQ1zW2C8RX-C4ofkE7A_Zp=KDaacMg@mail.gmail.com>
 <CAMxb2it6Lc=5Rw991pVgS22RWvjy90PEjaY06maPD4gwgGFpxw@mail.gmail.com>
 <CA+hid6EYrtRZ4T2QPufMUSVV_p56DWtneUJU1+djzNw7vVHdxQ@mail.gmail.com>
 <CAFycZ9d0_cpv1c4HKjhbkHsjAe5xgBYRGncx6M7p1owRzU39gg@mail.gmail.com>
 <A96D75B7-70B4-4F49-93FA-E090FA1BD55A@twistedmatrix.com>
 <CAFycZ9fcvSEzZXfd-ezR7tADsYvViwQ=0DUnSR6qPMgx=DyMhg@mail.gmail.com>
 <038DA9C1-7E61-49BE-91FE-478DAD409C67@twistedmatrix.com>
 <10975DF2-E7C9-4D3A-9DA9-CC05C5E376DB@twistedmatrix.com>
 <CAFycZ9cXzDt9vnumaA0nGRMYWcEiNprAo=okBGseLmobkV3GNA@mail.gmail.com>
Message-ID: <FF6BDFB9-A92A-4DC2-B708-FBB1C39F0A4A@twistedmatrix.com>


> On Jul 21, 2016, at 5:49 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> I can see that when there we got more builds there is significant increase in memory usage... but will recover once moved to idle.
> 

Cool.  Is there something we can do to limit the global concurrency of the builds to preserve resources on the buildmaster, then?

Or: perhaps we could move the buildbot to Carina, which has 4G of RAM and won't impact our hosting budget?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160721/8593c6e6/attachment-0002.html>

From dansut at gmail.com  Fri Jul 22 09:47:02 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Fri, 22 Jul 2016 11:47:02 -0400
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <21CFB48D-C6CD-46DC-BD6F-5B451FF4628D@twistedmatrix.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
 <CADzPF4vLA5nCXkOE0p22=+OmEgSPQPizMo_7cqK8x2==Og_sGA@mail.gmail.com>
 <7CADE897-C04B-479D-9C0A-081096CB3250@twistedmatrix.com>
 <CAG=rPVfTW_si7XqfJwLTXgmmk5VTZuRmS7_oM2DPTyGEpc2KQA@mail.gmail.com>
 <463BECAE-737F-4166-92F4-BA696DC64E71@twistedmatrix.com>
 <CADzPF4tZZLSbX6LKNhs2c7rJTQOmzX=5k-a=UmF5OjcEPvzczw@mail.gmail.com>
 <26EBEA14-73B0-4E90-93E5-962059CC74B3@twistedmatrix.com>
 <CADzPF4sA3ojT9rsdY=zW7VvfHKokRmh6_JEVMcRZ8Yhu6xQ-vQ@mail.gmail.com>
 <21CFB48D-C6CD-46DC-BD6F-5B451FF4628D@twistedmatrix.com>
Message-ID: <CADzPF4vQ-KipOpm=YVVMMqhQf2XPTniyvndkw-=GQVkhG53tgw@mail.gmail.com>

On Wed, Jul 20, 2016 at 5:40 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> You now have wiki-edit superpowers!  Use them for good, or at least, the kind of evil which makes a good story.

Well I tried, but the results weren't the best. Trac replied:
> Configuration Error
> Cannot find an implementation of the IRejectHandler interface named FilterSystem.
> Please check that the Component is enabled or update the option [spam-filter] reject_handler in trac.ini.

Sorry :(
Probably ought to create a ticket for this...
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>



From dansut at gmail.com  Fri Jul 22 13:28:00 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Fri, 22 Jul 2016 15:28:00 -0400
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <CADzPF4vQ-KipOpm=YVVMMqhQf2XPTniyvndkw-=GQVkhG53tgw@mail.gmail.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
 <CADzPF4vLA5nCXkOE0p22=+OmEgSPQPizMo_7cqK8x2==Og_sGA@mail.gmail.com>
 <7CADE897-C04B-479D-9C0A-081096CB3250@twistedmatrix.com>
 <CAG=rPVfTW_si7XqfJwLTXgmmk5VTZuRmS7_oM2DPTyGEpc2KQA@mail.gmail.com>
 <463BECAE-737F-4166-92F4-BA696DC64E71@twistedmatrix.com>
 <CADzPF4tZZLSbX6LKNhs2c7rJTQOmzX=5k-a=UmF5OjcEPvzczw@mail.gmail.com>
 <26EBEA14-73B0-4E90-93E5-962059CC74B3@twistedmatrix.com>
 <CADzPF4sA3ojT9rsdY=zW7VvfHKokRmh6_JEVMcRZ8Yhu6xQ-vQ@mail.gmail.com>
 <21CFB48D-C6CD-46DC-BD6F-5B451FF4628D@twistedmatrix.com>
 <CADzPF4vQ-KipOpm=YVVMMqhQf2XPTniyvndkw-=GQVkhG53tgw@mail.gmail.com>
Message-ID: <CADzPF4scdsKxOmDmCZFx-9RShC1oV3eFxGKp5nqWZk6DKD143w@mail.gmail.com>

On Wed, Jul 20, 2016 at 5:40 PM, Glyph Lefkowitz
> <glyph at twistedmatrix.com> wrote:
>> You now have wiki-edit superpowers!  Use them for good, or at least, the kind of evil which makes a good story.

On Fri, Jul 22, 2016 at 11:47 AM, Daniel Sutcliffe <dansut at gmail.com> wrote:
> Well I tried, but the results weren't the best. Trac replied:
>> Configuration Error
>> Cannot find an implementation of the IRejectHandler interface named FilterSystem.
>> Please check that the Component is enabled or update the option [spam-filter] reject_handler in trac.ini.
>
> Sorry :(
> Probably ought to create a ticket for this...

Fixed and fixed :)
Thanks
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>



From glyph at twistedmatrix.com  Fri Jul 22 16:37:04 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 22 Jul 2016 15:37:04 -0700
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <CADzPF4scdsKxOmDmCZFx-9RShC1oV3eFxGKp5nqWZk6DKD143w@mail.gmail.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
 <CADzPF4vLA5nCXkOE0p22=+OmEgSPQPizMo_7cqK8x2==Og_sGA@mail.gmail.com>
 <7CADE897-C04B-479D-9C0A-081096CB3250@twistedmatrix.com>
 <CAG=rPVfTW_si7XqfJwLTXgmmk5VTZuRmS7_oM2DPTyGEpc2KQA@mail.gmail.com>
 <463BECAE-737F-4166-92F4-BA696DC64E71@twistedmatrix.com>
 <CADzPF4tZZLSbX6LKNhs2c7rJTQOmzX=5k-a=UmF5OjcEPvzczw@mail.gmail.com>
 <26EBEA14-73B0-4E90-93E5-962059CC74B3@twistedmatrix.com>
 <CADzPF4sA3ojT9rsdY=zW7VvfHKokRmh6_JEVMcRZ8Yhu6xQ-vQ@mail.gmail.com>
 <21CFB48D-C6CD-46DC-BD6F-5B451FF4628D@twistedmatrix.com>
 <CADzPF4vQ-KipOpm=YVVMMqhQf2XPTniyvndkw-=GQVkhG53tgw@mail.gmail.com>
 <CADzPF4scdsKxOmDmCZFx-9RShC1oV3eFxGKp5nqWZk6DKD143w@mail.gmail.com>
Message-ID: <39275BE4-3B06-450F-A1BE-64CB9AFAEF55@twistedmatrix.com>


> On Jul 22, 2016, at 12:28, Daniel Sutcliffe <dansut at gmail.com> wrote:
> 
> On Wed, Jul 20, 2016 at 5:40 PM, Glyph Lefkowitz
>> <glyph at twistedmatrix.com> wrote:
>>> You now have wiki-edit superpowers!  Use them for good, or at least, the kind of evil which makes a good story.
> 
> On Fri, Jul 22, 2016 at 11:47 AM, Daniel Sutcliffe <dansut at gmail.com> wrote:
>> Well I tried, but the results weren't the best. Trac replied:
>>> Configuration Error
>>> Cannot find an implementation of the IRejectHandler interface named FilterSystem.
>>> Please check that the Component is enabled or update the option [spam-filter] reject_handler in trac.ini.
>> 
>> Sorry :(
>> Probably ought to create a ticket for this...
> 
> Fixed and fixed :)
> Thanks
> /dan

Oh, cool.  Did you figure out what the problem was?

-g




From dansut at gmail.com  Sat Jul 23 06:13:37 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Sat, 23 Jul 2016 08:13:37 -0400
Subject: [Twisted-Python] New users cannot subscribe to mailing list
In-Reply-To: <39275BE4-3B06-450F-A1BE-64CB9AFAEF55@twistedmatrix.com>
References: <CAG=rPVfSnQxW81O8yhchnvnyFJkjxGqDGqop3eCbpbuEA3WQtw@mail.gmail.com>
 <CADzPF4vLA5nCXkOE0p22=+OmEgSPQPizMo_7cqK8x2==Og_sGA@mail.gmail.com>
 <7CADE897-C04B-479D-9C0A-081096CB3250@twistedmatrix.com>
 <CAG=rPVfTW_si7XqfJwLTXgmmk5VTZuRmS7_oM2DPTyGEpc2KQA@mail.gmail.com>
 <463BECAE-737F-4166-92F4-BA696DC64E71@twistedmatrix.com>
 <CADzPF4tZZLSbX6LKNhs2c7rJTQOmzX=5k-a=UmF5OjcEPvzczw@mail.gmail.com>
 <26EBEA14-73B0-4E90-93E5-962059CC74B3@twistedmatrix.com>
 <CADzPF4sA3ojT9rsdY=zW7VvfHKokRmh6_JEVMcRZ8Yhu6xQ-vQ@mail.gmail.com>
 <21CFB48D-C6CD-46DC-BD6F-5B451FF4628D@twistedmatrix.com>
 <CADzPF4vQ-KipOpm=YVVMMqhQf2XPTniyvndkw-=GQVkhG53tgw@mail.gmail.com>
 <CADzPF4scdsKxOmDmCZFx-9RShC1oV3eFxGKp5nqWZk6DKD143w@mail.gmail.com>
 <39275BE4-3B06-450F-A1BE-64CB9AFAEF55@twistedmatrix.com>
Message-ID: <CADzPF4vNnfipK02N6Sg7p0XfCP67vk_gAzs7MBuy48dDYxLhiQ@mail.gmail.com>

On Fri, Jul 22, 2016 at 11:47 AM, Daniel Sutcliffe <dansut at gmail.com> wrote:
>>> Well I tried, but the results weren't the best. Trac replied:
>>>> Configuration Error
>>>> Cannot find an implementation of the IRejectHandler interface named FilterSystem.
>>>> Please check that the Component is enabled or update the option [spam-filter] reject_handler in trac.ini.
>>>
>>> Sorry :(
>>> Probably ought to create a ticket for this...

>> On Jul 22, 2016, at 12:28, Daniel Sutcliffe <dansut at gmail.com> wrote:
>> Fixed and fixed :)

On Fri, Jul 22, 2016 at 6:37 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> Oh, cool.  Did you figure out what the problem was?

I'm afraid I cannot take credit for fixing Trac, see hawkowl
There was a ticket: https://twistedmatrix.com/trac/ticket/8655

Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>



From glyph at twistedmatrix.com  Sun Jul 24 13:01:47 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 24 Jul 2016 12:01:47 -0700
Subject: [Twisted-Python] close to the finish line on hosted windows testing
Message-ID: <4BBAB63C-216F-48B5-9163-F2659C0F34F9@twistedmatrix.com>

Thanks to Craig and Adi's work, we now have tests sort of working on appveyor.  However, they aren't actually reporting their pass/fail status right now as github statuses, I am assuming because of the persistent failures that were causing noise on unrelated tickets.

However, it's very close to being a useful builder; there are really only 2 remaining issues, not counting turning on the reporting itself.  I've made an umbrella ticket here: https://twistedmatrix.com/trac/ticket/8664 <https://twistedmatrix.com/trac/ticket/8664> and documented what's wrong with each one.

So, if you care about Twisted on Windows, fixing the issues documented there should make it much easier for more folks to contribute easily :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160724/7024b33a/attachment-0002.html>

From hawkowl at atleastfornow.net  Sun Jul 24 13:07:36 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sun, 24 Jul 2016 21:07:36 +0200
Subject: [Twisted-Python] close to the finish line on hosted windows
	testing
In-Reply-To: <4BBAB63C-216F-48B5-9163-F2659C0F34F9@twistedmatrix.com>
References: <4BBAB63C-216F-48B5-9163-F2659C0F34F9@twistedmatrix.com>
Message-ID: <EC43BB15-AFDC-42F3-8182-33EE3F2EFDC6@atleastfornow.net>

Just a note; I've got both issues fixed on a branch and am just cleaning it up for review. Them, I would like to remove the (quite broken) Windows 7 builder and just use appveyor.

- Amber

> On 24 Jul 2016, at 21:01, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> Thanks to Craig and Adi's work, we now have tests sort of working on appveyor.  However, they aren't actually reporting their pass/fail status right now as github statuses, I am assuming because of the persistent failures that were causing noise on unrelated tickets.
> 
> However, it's very close to being a useful builder; there are really only 2 remaining issues, not counting turning on the reporting itself.  I've made an umbrella ticket here: https://twistedmatrix.com/trac/ticket/8664 <https://twistedmatrix.com/trac/ticket/8664> and documented what's wrong with each one.
> 
> So, if you care about Twisted on Windows, fixing the issues documented there should make it much easier for more folks to contribute easily :).
> 
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160724/69307f40/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160724/69307f40/attachment.sig>

From mcepl at cepl.eu  Mon Jul 25 03:03:30 2016
From: mcepl at cepl.eu (=?UTF-8?Q?Mat=c4=9bj_Cepl?=)
Date: Mon, 25 Jul 2016 11:03:30 +0200
Subject: [Twisted-Python] Request for help with Twisted bindings in M2Crypto
Message-ID: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>

Hello,

I took over a maintenance of (surprisingly) still quite popular M2Crypto
project in the last year. I have just released 0.25.0 which is my fifth
release during that time and I think we are slowly but surely moving
towards porting to py3k, cleaning up the code, etc.

I am now working on porting to py3k, but the biggest PITA for me (aside
from the Windows Pain™ ;)) is the Twisted integration module
(https://gitlab.com/m2crypto/m2crypto/blob/python3/M2Crypto/SSL/TwistedProtocolWrapper.py).

1) I get bugs like https://gitlab.com/m2crypto/m2crypto/issues/111 which
I have no idea how to solve, because I don't understand the deep magic
which Twisted seems to me, and I am not even sure that M2Crypto is in
fault here (not mentioning that I have a hard time to reproduce).

2) Even more pressing is that the Twisted module breaks my tests when
porting to py3k (https://travis-ci.org/mcepl/M2Crypto/jobs/146633964).
Given the opaque and complicated data types in Twisted, I see horribly
complicated task of diving into it in front of me and I am not eager.

3) Moreover, I would like to know how much interest there is in
maintaining the M2Crypto module for Twisted. I got some hope from
http://twistedmatrix.com/trac/wiki/TransportLayerSecurity which seems
like there is an interest in more complete OpenSSL bindings, but OTOH I
see on the list that Twisted now seems to use more and more of
Cryptography (why in the world somebody made such confusing name of
their project ...). Obviously the most simple way for me to be cutting
Twisted module from M2Crypto and let it be (although I am afraid I have
still some legacy users who would like to see it maintained, and given
that the legacy support is still the most important reason for
maintaining M2Crypto, I don't want to give up lightly).

Moreover, I am suspicious that for somebody who actually understands
Twisted, most of my problems are trivial and they could be solved
easily. So, before I start studying
http://krondo.com/slow-poetry-and-the-apocalypse/ (is there some better
tutorial from ground up for complete idiots?), I would like to solicit
help here for help with this module.

Would somebody raise up their hand to help me and help Twisted?

Best,

Matěj

-- 
https://matej.ceplovi.cz/blog/, Jabber: mcepl at ceplovi.cz
GPG Finger: 3C76 A027 CA45 AD70 98B5  BC1D 7920 5802 880B C9D8

Give a man a regular expression and he’ll match a string…
teach him to make his own regular expressions and you’ve got a man with
problems.
  -- yakugo in http://regex.info/blog/2006-09-15/247#comment-3022

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20160725/d0a4c30d/attachment.sig>

From rodrigc at crodrigues.org  Mon Jul 25 03:33:20 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 25 Jul 2016 02:33:20 -0700
Subject: [Twisted-Python] Request for help with Twisted bindings in
	M2Crypto
In-Reply-To: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
References: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
Message-ID: <CAG=rPVfO_QTsQ-VY4zeE64HJJsTkgES6d+mEjS0cSUSdiHX6gw@mail.gmail.com>

On Mon, Jul 25, 2016 at 2:03 AM, Matěj Cepl <mcepl at cepl.eu> wrote:

> Hello,
>
> Would somebody raise up their hand to help me and help Twisted?
>
>
Hi,

Earlier this year, I contributed lots of patches to you in M2Crypto to port
it to py3k.
Now I have shifted efforts to Twisted, where in the past month I have
contributed hundreds of patches to help improve py3k support in Twisted.

I'm not sure I have much bandwidth to help more on M2Crypto, but I'll give
advice where I can.

Twisted code is definitely not py3k clean in the parts where it interacts
with OpenSSL.

For example, if you do the following in a Python 3 virtual environment:

pip install pyOpenSSL
git clone https://github.com/twisted/twisted twisted_test
cd twisted_test
python -Wall -bb bin/trial twisted.test.test_sslverify

The tests will pass, but you will get warnings like:

twisted/internet/_sslverify.py:1648: DeprecationWarning: str for buf is no
longer accepted, use bytes
twisted/internet/_sslverify.py:1652: DeprecationWarning: str for
cipher_list is no longer accepted, use bytes
twisted/internet/_sslverify.py:1791: DeprecationWarning: str for
cipher_list is no longer accepted, use bytes

Getting correct usage of  bytes vs. str is really important on py3k.  I've
observed weird errors when it isn't correct.

--
Craig


--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160725/0b1a5257/attachment-0002.html>

From rodrigc at crodrigues.org  Mon Jul 25 03:55:11 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 25 Jul 2016 02:55:11 -0700
Subject: [Twisted-Python] Request for help with Twisted bindings in
	M2Crypto
In-Reply-To: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
References: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
Message-ID: <CAG=rPVfJhSZgoVuSoQ93YvkcDA=3kTgaB9wJRwOf9_neiiPPMA@mail.gmail.com>

On Mon, Jul 25, 2016 at 2:03 AM, Matěj Cepl <mcepl at cepl.eu> wrote:

>
> 2) Even more pressing is that the Twisted module breaks my tests when
> porting to py3k (https://travis-ci.org/mcepl/M2Crypto/jobs/146633964).
> Given the opaque and complicated data types in Twisted, I see horribly
> complicated task of diving into it in front of me and I am not eager.
>

I call shenanigans on you.

Twisted is open source, so none of the data types are opaque.
Twisted is probably the best open source project I have worked with
in terms of having documentation which is generated from the code (
https://twistedmatrix.com/documents/current/api/ ).

Twisted is also absolutely *the* best project I have worked with in terms
of having unit tests with very high coverage
of the code.

If you are unfamiliar with Twisted's code and data types, and don't have
the energy to dig in,
then be honest about that, but don't accuse Twisted of being "opaque",
because it isn't.

Regarding your code example which is failing,
your code is failing because you are intermixing bytes and strings which is
a big no-no for Python 3.

If I look at this line for example:
https://gitlab.com/m2crypto/m2crypto/blob/master/M2Crypto/SSL/TwistedProtocolWrapper.py#L357

I see the code is doing stuff like:
   data = ''
   encryptedData = ''

Those are of type str, and need to be of type bytes:

   data = b''
   encryptedData = b''

You need to clean stuff like that up in your code so that you are only
using bytes.

I've really learned this lesson very hard after contributing hundreds of
py3k fixes for Twisted:

      Python 2:
              type(str) == type(bytes)
              type(str)  != type(unicode)
              b"foo" == "foo"
              "foo" != u"foo"

      Python 3:
              type(str) != type(bytes)
              type(unicode) is Gone
              b"foo" != "foo"
              "foo" == u"foo"

There is lots of code out there which uses Python strings and bytes
interchangeably
which "works" under Python2, but breaks big time on Python 3.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160725/e6733f8b/attachment-0002.html>

From sank.daniel at gmail.com  Mon Jul 25 04:10:27 2016
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 25 Jul 2016 03:10:27 -0700
Subject: [Twisted-Python] Request for help with Twisted bindings in
	M2Crypto
In-Reply-To: <CAG=rPVfJhSZgoVuSoQ93YvkcDA=3kTgaB9wJRwOf9_neiiPPMA@mail.gmail.com>
References: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
 <CAG=rPVfJhSZgoVuSoQ93YvkcDA=3kTgaB9wJRwOf9_neiiPPMA@mail.gmail.com>
Message-ID: <CAKN9TD+_PCK7f90QPsVQp+8jy9HX3Q_TqarQKkmQHuuQ0LctFw@mail.gmail.com>

I realize this is not the main point of this thread, but I'd like to make a
comment regarding Twisted being opaque.

> Twisted is open source, so none of the data types are opaque.

That's a non sequitur. A bunch of open source text in a language you don't
understand is opaque, or perhaps better called "obscure". Among other
things, Twisted's use of interfaces makes the code very hard to understand.

> Twisted is probably the best open source project I have worked with
> in terms of having documentation which is generated from the code

I agree that the documentation is generally excellent and that the tests
coverage is similarly excellent. However, I still find large fractions of
the code very hard to comprehend. A while ago I made a serious effort to
understand PB and fix some bugs, but the interface stuff combined with some
very odd contortions of python class innards eventually lead me to give up.
This is despite the friendly helpful attitude of the main developers both
here and in IRC (seriously, thanks everyone for your help back then!).

I just randomly clicked through the docs to this:
https://twistedmatrix.com/documents/current/api/twisted._threads.IWorker.html

Note that:

1. It is an interface, and I still don't _really_ understand what that
means in Twisted.

2. I have no idea what a "task" is. I realize this is python and yay
duck-typing but not specifying the expected behavior of an argument seems
like a big omission.

So, while the Twisted docs are great, consider not faulting people for
being confused/daunted.


On Mon, Jul 25, 2016 at 2:55 AM, Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

> On Mon, Jul 25, 2016 at 2:03 AM, Matěj Cepl <mcepl at cepl.eu> wrote:
>
>>
>> 2) Even more pressing is that the Twisted module breaks my tests when
>> porting to py3k (https://travis-ci.org/mcepl/M2Crypto/jobs/146633964).
>> Given the opaque and complicated data types in Twisted, I see horribly
>> complicated task of diving into it in front of me and I am not eager.
>>
>
> I call shenanigans on you.
>
> Twisted is open source, so none of the data types are opaque.
> Twisted is probably the best open source project I have worked with
> in terms of having documentation which is generated from the code (
> https://twistedmatrix.com/documents/current/api/ ).
>
> Twisted is also absolutely *the* best project I have worked with in terms
> of having unit tests with very high coverage
> of the code.
>
> If you are unfamiliar with Twisted's code and data types, and don't have
> the energy to dig in,
> then be honest about that, but don't accuse Twisted of being "opaque",
> because it isn't.
>
> Regarding your code example which is failing,
> your code is failing because you are intermixing bytes and strings which
> is a big no-no for Python 3.
>
> If I look at this line for example:
>
> https://gitlab.com/m2crypto/m2crypto/blob/master/M2Crypto/SSL/TwistedProtocolWrapper.py#L357
>
> I see the code is doing stuff like:
>    data = ''
>    encryptedData = ''
>
> Those are of type str, and need to be of type bytes:
>
>    data = b''
>    encryptedData = b''
>
> You need to clean stuff like that up in your code so that you are only
> using bytes.
>
> I've really learned this lesson very hard after contributing hundreds of
> py3k fixes for Twisted:
>
>       Python 2:
>               type(str) == type(bytes)
>               type(str)  != type(unicode)
>               b"foo" == "foo"
>               "foo" != u"foo"
>
>       Python 3:
>               type(str) != type(bytes)
>               type(unicode) is Gone
>               b"foo" != "foo"
>               "foo" == u"foo"
>
> There is lots of code out there which uses Python strings and bytes
> interchangeably
> which "works" under Python2, but breaks big time on Python 3.
>
> --
> Craig
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Daniel Sank
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160725/5dfd61df/attachment-0002.html>

From cory at lukasa.co.uk  Mon Jul 25 06:19:55 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Mon, 25 Jul 2016 14:19:55 +0200
Subject: [Twisted-Python] Request for help with Twisted bindings in
 M2Crypto
In-Reply-To: <CAKN9TD+_PCK7f90QPsVQp+8jy9HX3Q_TqarQKkmQHuuQ0LctFw@mail.gmail.com>
References: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
 <CAG=rPVfJhSZgoVuSoQ93YvkcDA=3kTgaB9wJRwOf9_neiiPPMA@mail.gmail.com>
 <CAKN9TD+_PCK7f90QPsVQp+8jy9HX3Q_TqarQKkmQHuuQ0LctFw@mail.gmail.com>
Message-ID: <ED96440E-D5AB-4160-BFA6-155ECFD9B865@lukasa.co.uk>


> On 25 Jul 2016, at 12:10, Daniel Sank <sank.daniel at gmail.com> wrote:
> 
> I just randomly clicked through the docs to this: https://twistedmatrix.com/documents/current/api/twisted._threads.IWorker.html <https://twistedmatrix.com/documents/current/api/twisted._threads.IWorker.html>
> 
> Note that:
> 
> 1. It is an interface, and I still don't _really_ understand what that means in Twisted.
> 
> 2. I have no idea what a "task" is. I realize this is python and yay duck-typing but not specifying the expected behavior of an argument seems like a big omission.
> 
> So, while the Twisted docs are great, consider not faulting people for being confused/daunted.
> 

Well, at this point I should argue that _threads, being prefixed by an underscore, is technically a private module to Twisted. That means that, realistically, you shouldn’t really need to consult this *at all*: if anyone outside of Twisted is using IWorker then they’re taking their life into their own hands. That largely argues for part 2, though modern Twisted development practice would still require that we document types and interfaces (see https://twistedmatrix.com/documents/current/api/twisted.web._http2.H2Connection.html <https://twistedmatrix.com/documents/current/api/twisted.web._http2.H2Connection.html>, for example).

As to interfaces, that’s a separate problem. Interfaces in Twisted are documented. See https://twistedmatrix.com/documents/current/core/howto/components.html <https://twistedmatrix.com/documents/current/core/howto/components.html> for a very lengthy discussion of interfaces in Twisted. Note that Glyph has also written heavily about interfaces: https://glyph.twistedmatrix.com/2009/02/explaining-why-interfaces-are-great.html <https://glyph.twistedmatrix.com/2009/02/explaining-why-interfaces-are-great.html>. Have those documents not helped, or have you been unable to find them?

Cory

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160725/a62b1576/attachment-0002.html>

From mcepl at cepl.eu  Mon Jul 25 17:02:48 2016
From: mcepl at cepl.eu (=?iso-8859-2?Q?Mat=ECj?= Cepl)
Date: Tue, 26 Jul 2016 01:02:48 +0200
Subject: [Twisted-Python] Parameters of
 twisted.internet.interfaces.ITLSTransport [Was: Re: Request for help with
 Twisted bindings in M2Crypto]
In-Reply-To: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
Message-ID: <20160725230244.GA26728@mitmanek.redhat.com>

On 2016-07-25, 09:33 GMT, Craig Rodrigues wrote:
> Earlier this year, I contributed lots of patches to you in M2Crypto to port
> it to py3k.
> Now I have shifted efforts to Twisted, where in the past month I have
> contributed hundreds of patches to help improve py3k support in Twisted.

Hi,

can I for a piece of advice on the documentation.
M2Crypto.SSL.TwistedProtocolWrapper.TLSProtocolWrapper.startTLS
implements ITLSTransport.startTLS interace method, which first parameter
is called ``ctx`` and in `the current implementation in M2Crypto`_ it is of
type control of SSL Context (that's M2Crypto.SSL.Context.Context) or
whether it is factory generating such Contexts (which is what
https://twistedmatrix.com/documents/current/api/twisted.internet._newtls.ConnectionMixin.html
says, at least I understand it in this way). Is my current
implementation wrong?

Thank you for any answer in advance,

Matěj

.. _`the current implementation in M2Crypto`:
     https://gitlab.com/m2crypto/m2crypto/blob/python3/M2Crypto/SSL/TwistedProtocolWrapper.py#L231

-- 
https://matej.ceplovi.cz/blog/, Jabber: mcepl at ceplovi.cz
GPG Finger: 3C76 A027 CA45 AD70 98B5  BC1D 7920 5802 880B C9D8
  
To err is human, to purr feline.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 198 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20160726/38d1ad81/attachment.sig>

From glyph at twistedmatrix.com  Mon Jul 25 17:50:29 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 25 Jul 2016 16:50:29 -0700
Subject: [Twisted-Python] Request for help with Twisted bindings in
	M2Crypto
In-Reply-To: <ED96440E-D5AB-4160-BFA6-155ECFD9B865@lukasa.co.uk>
References: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
 <CAG=rPVfJhSZgoVuSoQ93YvkcDA=3kTgaB9wJRwOf9_neiiPPMA@mail.gmail.com>
 <CAKN9TD+_PCK7f90QPsVQp+8jy9HX3Q_TqarQKkmQHuuQ0LctFw@mail.gmail.com>
 <ED96440E-D5AB-4160-BFA6-155ECFD9B865@lukasa.co.uk>
Message-ID: <5FED3CC4-05EF-47E1-9871-2095B793FABE@twistedmatrix.com>


> On Jul 25, 2016, at 5:19 AM, Cory Benfield <cory at lukasa.co.uk> wrote:
> 
> Well, at this point I should argue that _threads, being prefixed by an underscore, is technically a private module to Twisted. That means that, realistically, you shouldn’t really need to consult this *at all*: if anyone outside of Twisted is using IWorker then they’re taking their life into their own hands. That largely argues for part 2, though modern Twisted development practice would still require that we document types and interfaces (see https://twistedmatrix.com/documents/current/api/twisted.web._http2.H2Connection.html <https://twistedmatrix.com/documents/current/api/twisted.web._http2.H2Connection.html>, for example).

However, we do still recognize that the presentation of said private documentation to end-users in apparently the same way as public documentation is a problem.  You can track that here: <https://github.com/twisted/pydoctor/issues/49>.  Some of the things there have been done, but we need to complete it.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160725/636ec563/attachment-0002.html>

From jlitzingerdev at gmail.com  Mon Jul 25 22:43:30 2016
From: jlitzingerdev at gmail.com (Jason Litzinger)
Date: Mon, 25 Jul 2016 22:43:30 -0600
Subject: [Twisted-Python] RFC: IPv6 multicast join/ticket 6597
Message-ID: <20160726044330.GA8172@jlitzing-dell>


Hello,

I'm looking at making the changes to support IPv6 multicast groups as described
in ticket 6597 but wanted to get some feedback (and get a feel whether this is
even desirable) before formally submitting any patches.

Specifically:

1.  I've read [1] and it alludes to udp hopefully disappearing, is that something in the
    works?  Is there a new approach to solving this problem I should look at?  A
    branch in the works where this (conceptual) change belongs?

    Note:  The addressFamily attribute referenced already exists and is set
           properly for IPv6.

2.  The attached change has the side effect that calls to ReactorBase.resolve()
    with IPv6 literals will now likely succeed where they may have failed in the
    past.  That means clients counting on resolve raising an exception for an
    IPv6 literal will break.  Not sure whether this is considered a
    compatibility issue, but I wanted to raise it.

3.  One alternative to the above would be a complete API separation, via
    something like joinIPv6Group(), and a new resolve.  Is that more appealing
    in this case?

Caveats:

1.  I have not finished all of the documentation related to developers, I will
    do so prior to formal submission.

2.  I know I need tests and docs and will submit them with the final changes.

On to the patches.  With these changes, I can use the joinGroup API to add
myself to an IPv6 multicast group on Linux (verified via /proc/net/igmp6).
Additionally, trial reports the same two failures before and after these changes
(twisted.python.test.test_release.APIBuilderTests.test_build and
test_buildWithPolicy).  These changes struck me as the obvious approach, but
given the changes to resolve, not necessarily the best.


diff --git a/twisted/internet/base.py b/twisted/internet/base.py
index 4f2c862..e813741 100644
--- a/twisted/internet/base.py
+++ b/twisted/internet/base.py
@@ -567,6 +567,8 @@ class ReactorBase(object):
             return defer.succeed('0.0.0.0')
         if abstract.isIPAddress(name):
             return defer.succeed(name)
+        elif abstract.isIPv6Address(name):
+            return defer.succeed(name)
         return self.resolver.getHostByName(name, timeout)
 
     # Installation.
diff --git a/twisted/internet/udp.py b/twisted/internet/udp.py
index b5a5322..210b079 100644
--- a/twisted/internet/udp.py
+++ b/twisted/internet/udp.py
@@ -485,7 +485,10 @@ class MulticastMixin:
 
 
     def _joinAddr1(self, addr, interface, join):
-        return self.reactor.resolve(interface).addCallback(self._joinAddr2, addr, join)
+        if self.addressFamily == socket.AF_INET:
+            return self.reactor.resolve(interface).addCallback(self._joinAddr2, addr, join)
+        else:
+            return self.reactor.resolve(interface).addCallback(self._joinAddrIPv6, addr, join)
 
 
     def _joinAddr2(self, interface, addr, join):
@@ -500,6 +503,18 @@ class MulticastMixin:
         except socket.error as e:
             return failure.Failure(error.MulticastJoinError(addr, interface, *e.args))
 
+    def _joinAddrIPv6(self, interface, addr, join):
+        addr = socket.inet_pton(socket.AF_INET6, addr)
+        interface = socket.inet_pton(socket.AF_INET6, interface)
+        if join:
+            cmd = socket.IPV6_JOIN_GROUP
+        else:
+            cmd = socket.IPV6_LEAVE_GROUP
+        try:
+            self.socket.setsockopt(socket.IPPROTO_IPV6, cmd, addr + interface)
+        except socket.error as e:
+            return failure.Failure(error.MulticastJoinError(addr, interface, *e.args))
+
 
     def leaveGroup(self, addr, interface=""):
         """Leave multicast group, return Deferred of success."""


This does require the client specify the interface argument when calling
joinGroup, e.g. self.transport.joinGroup("ff02::1", interface="::").

Thanks in advance for any feedback!

-Jason Litzinger


[1] http://twistedmatrix.com/pipermail/twisted-python/2016-March/030188.html



From glyph at twistedmatrix.com  Tue Jul 26 00:05:17 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 25 Jul 2016 23:05:17 -0700
Subject: [Twisted-Python] Request for help with Twisted bindings in
	M2Crypto
In-Reply-To: <CAKN9TD+_PCK7f90QPsVQp+8jy9HX3Q_TqarQKkmQHuuQ0LctFw@mail.gmail.com>
References: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
 <CAG=rPVfJhSZgoVuSoQ93YvkcDA=3kTgaB9wJRwOf9_neiiPPMA@mail.gmail.com>
 <CAKN9TD+_PCK7f90QPsVQp+8jy9HX3Q_TqarQKkmQHuuQ0LctFw@mail.gmail.com>
Message-ID: <AFC57424-CA61-4587-986F-261BE3A8786B@twistedmatrix.com>


> On Jul 25, 2016, at 3:10 AM, Daniel Sank <sank.daniel at gmail.com> wrote:
> 
> I realize this is not the main point of this thread, but I'd like to make a comment regarding Twisted being opaque.
> 
> > Twisted is open source, so none of the data types are opaque.
> 
> That's a non sequitur. A bunch of open source text in a language you don't understand is opaque, or perhaps better called "obscure". Among other things, Twisted's use of interfaces makes the code very hard to understand.

This is not the first time that someone has made this comment, and I find it very discouraging.

An interface is a very simple concept - an abstract description of what an object is expected to provide if you're going to do something useful with it.  As a specific programmatic instantiation of this concept, zope.interface provides us with two chief advantages, one purely informational and one useful at run-time.  The informational one is that rather than saying "this parameter must provide four methods, the first of which is makeConnection, the second of which is (optionally) connectionMade, the third of which is dataReceived, the fourth of which is connectionLost, which take parameters, respectively,..." we can say "@type: L{IProtocol} provider".  The programmatic advantage is that we can ask the question directly; not 'do you have attributes with these names' or 'does this function signature match', but IProtocol.providedBy(something), which asks if 'something' even _intends_ to implement all the relevant functionality described by IProtocol.

In my view, interface definition is the primary activity of software development; deciding how the pieces of the system fit together and precisely describing what they do.  The fact that so many people seem to find either the basic idea of an abstract type, or the concrete instantiation of that idea in the Zope Interface library, so horribly confusing, makes me despair of ever communicating the actually hard stuff that Twisted gets up to in its internals.

The main thing that I have heard in the past about what makes interfaces confusing is that people want to trace through the implementation to see what twisted is 'really doing', and the fact that there is -more than one- implementation of a method like 'listenTCP' is the source of the real confusion, underlying the problem with "interfaces".  But, that's the whole point: 'listenTCP' is an abstract concept.  The better parts of twisted are _more_ abstract, like 'IStreamServerEndpoint.listen', which has dozens of implementations rather than just 3 or 4, or Deferred.callback, which might do anything at all - if the callback chain did one specific thing there would hardly be any point.

So, this is more just an emotional appeal from me, than anything the project needs, but I would very much like to understand *what* is so confusing about "interfaces".  Is it, as Cory posited, just that the documentation is not properly linked?  Or is it that the average Python developer needs a gentle introduction to the entire idea of abstract rather than concrete types?  If they do - is it really Twisted's responsibility to provide it to them?  Should Zope Interface just have a snazzier website?

> > Twisted is probably the best open source project I have worked with
> > in terms of having documentation which is generated from the code
> 
> I agree that the documentation is generally excellent and that the tests coverage is similarly excellent. However, I still find large fractions of the code very hard to comprehend. A while ago I made a serious effort to understand PB and fix some bugs, but the interface stuff combined with some very odd contortions of python class innards eventually lead me to give up. This is despite the friendly helpful attitude of the main developers both here and in IRC (seriously, thanks everyone for your help back then!).

Given that Twisted is often translating network protocol data into Python method calls, one needs both a working domain knowledge of the protocol involved and a robust understanding of Python metaprogramming constructs.  It sounds here like where you fell down was mostly in the "Python metaprogramming" area, where PB is especially intense.  Unfortunately, framework code just looks like that (the inner guts of Django are similarly, if not more, obscure, for example); it's not especially specific to Twisted.

Don't get me wrong, Python metaprogramming _is_ hard.  It's something that I know pretty well, but I can recognize that each additional layer of indirection is additional complexity for someone to learn, and metaprogramming is by definition at least 3 layers indirected from your actual problem.  But it's also not really specific to Twisted either.  This is another case where I'm not sure what to do except to refer people to the language reference and tell them to work through it slowly.

> I just randomly clicked through the docs to this: https://twistedmatrix.com/documents/current/api/twisted._threads.IWorker.html <https://twistedmatrix.com/documents/current/api/twisted._threads.IWorker.html>
> 
> Note that:
> 
> 1. It is an interface, and I still don't _really_ understand what that means in Twisted.

The interface stuff in Twisted is a wholly separate library, 'zope.interface'.  You can read its documentation - both narrative tutorials and API documentation - here:

https://docs.zope.org/zope.interface/README.html

This is referenced by the Twisted documentation which Cory referred to earlier, but I think it would be helpful to call that out specifically - you can read about interfaces completely separate from Twisted.  They don't mean anything special within Twisted itself (beyond our addition of registerAdapter, which is used less and less often in modern Twisted apps).

> 2. I have no idea what a "task" is. I realize this is python and yay duck-typing but not specifying the expected behavior of an argument seems like a big omission.

Did you miss the part where it said "type: 0-argument callable" in the documentation?  The expected behavior of the argument is that it is a thing that can be called, and it takes 0 arguments.  Its return value is unspecified because IWorker providers aren't allowed to use its return value.

> So, while the Twisted docs are great, consider not faulting people for being confused/daunted.

I don't want to fault people, and there are many issues we can address within Twisted's documentation.  For example, culling things from the API documentation and presenting it as it is really intended to be consumed, eliding private methods that have underscores or live in test_* packages to present a smaller surface, improving tutorial documentation, and so on.  It's not entirely the user's fault.

But certain things - the fact that we might have an abstract interface with multiple concrete implementations, for example - are inherent parts of the problem domain that Twisted is trying to address, and this is what Interfaces let us express.  When people have said things like "Twisted's use of interfaces makes 

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160725/933fed60/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Jul 26 00:28:23 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 25 Jul 2016 23:28:23 -0700
Subject: [Twisted-Python] Parameters of
	twisted.internet.interfaces.ITLSTransport [Was: Re: Request
	for help with Twisted bindings in M2Crypto]
In-Reply-To: <20160725230244.GA26728@mitmanek.redhat.com>
References: <20160725230244.GA26728@mitmanek.redhat.com>
Message-ID: <517A02D1-67EE-4E92-8EA8-A5DFA859C5D4@twistedmatrix.com>


> On Jul 25, 2016, at 16:02, Matěj Cepl <mcepl at cepl.eu> wrote:
> 
> On 2016-07-25, 09:33 GMT, Craig Rodrigues wrote:
>> Earlier this year, I contributed lots of patches to you in M2Crypto to port
>> it to py3k.
>> Now I have shifted efforts to Twisted, where in the past month I have
>> contributed hundreds of patches to help improve py3k support in Twisted.
> 
> Hi,
> 
> can I for a piece of advice on the documentation.
> M2Crypto.SSL.TwistedProtocolWrapper.TLSProtocolWrapper.startTLS
> implements ITLSTransport.startTLS interace method, which first parameter
> is called ``ctx`` and in `the current implementation in M2Crypto`_ it is of
> type control of SSL Context (that's M2Crypto.SSL.Context.Context) or
> whether it is factory generating such Contexts (which is what
> https://twistedmatrix.com/documents/current/api/twisted.internet._newtls.ConnectionMixin.html
> says, at least I understand it in this way). Is my current
> implementation wrong?

Technically speaking, your implementation is wrong because it claims to implement <https://twistedmatrix.com/documents/16.3.0/api/twisted.internet.interfaces.ITLSTransport.html>, which documents the method startTLS <https://twistedmatrix.com/documents/16.3.0/api/twisted.internet.interfaces.ITLSTransport.html#startTLS> to accept a `contextFactory´ which is a provider of either <https://twistedmatrix.com/documents/16.3.0/api/twisted.internet.interfaces.IOpenSSLClientConnectionCreator.html> or <https://twistedmatrix.com/documents/16.3.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html>.  Both of these interfaces return pyOpenSSL-specific objects.  If you want to do TLS with M2Crypto, you must therefore give up on supporting any of Twisted's interfaces directly, because (for example) optionsForClientTLS <https://twistedmatrix.com/documents/16.3.0/api/twisted.internet.ssl.html#optionsForClientTLS> is not going to work with your implementation, since you don't call clientConnectionForTLS on it.

If you want to provide TLS purely with M2Crypto, then you should have interfaces which describe exactly how it should work with M2Crypto.  You can make it take a concrete context if you want, or a factory, whichever makes sense for how you're going to set it up.  Personally my recommendation would be to go in the direction that Twisted itself has been moving and pass a thing that can create Connection objects (or, in OpenSSL-speak, an "SSL*", or in M2Crypto, an _SSLProxy(ssl_new())).  No existing Twisted code which is going to call startTLS() can be made to work with these interfaces without extensive monkey-patching, and even then, anything which expects to be able to cut in at the OpenSSL layer will break.

Basically, Twisted doesn't have a mechanism for abstracting away the TLS backend yet.  I'd really like it if it did!  If you want M2Crypto to be able to do what it's currently trying to do, you could contribute code to Twisted to make things like optionsForClientTLS more abstract, and to isolate the TLS implementation more closely to the TLS wrapper factory.  This would make it easier to adopt Cryptography's TLS API eventually, which is what we'll need to do as pyOpenSSL eventually becomes less relevant.

This is still several years away, of course.  But it would be nice to have some help getting there in advance.

-glyph


From sank.daniel at gmail.com  Tue Jul 26 01:26:44 2016
From: sank.daniel at gmail.com (Daniel Sank)
Date: Tue, 26 Jul 2016 00:26:44 -0700
Subject: [Twisted-Python] Request for help with Twisted bindings in
	M2Crypto
In-Reply-To: <AFC57424-CA61-4587-986F-261BE3A8786B@twistedmatrix.com>
References: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
 <CAG=rPVfJhSZgoVuSoQ93YvkcDA=3kTgaB9wJRwOf9_neiiPPMA@mail.gmail.com>
 <CAKN9TD+_PCK7f90QPsVQp+8jy9HX3Q_TqarQKkmQHuuQ0LctFw@mail.gmail.com>
 <AFC57424-CA61-4587-986F-261BE3A8786B@twistedmatrix.com>
Message-ID: <CAKN9TDJ8TX1r5AqZfoochxkw_UEEYSdKBNvpXM5=aHAhA6K3+Q@mail.gmail.com>

Glyph,

>> 2. I have no idea what a "task" is. I realize this is python and yay
duck-typing but not
>> specifying the expected behavior of an argument seems like a big
omission.

> Did you miss the part where it said "type: 0-argument callable" in the
documentation?

Yes :(

I can only guess that I missed it because the type is defined near the end
of the description line, whereas I'm used to seeing

def foo(x, y):
    """Do something.

    Args:
        x (int): blah blah
        y (banana): yadda yadda
    """

FWIW, now that I look at the code, the type specification is way more
visually apparent there than it is in the generated HTML.

tl,dr: I take it all back and thanks for pointing out the obvious.

> An interface is a very simple concept - an abstract description of what
an object is expected
> to provide if you're going to do something useful with it.

Indeed, a general understanding of interfaces is not the problem.

> In my view, interface definition is the primary activity of software
development

Agreed 100%.

> The fact that so many people seem to find either the basic idea of an
abstract type, or the concrete
> instantiation of that idea in the Zope Interface library, so horribly
confusing, makes me despair of
> ever communicating the actually *hard* stuff that Twisted gets up to in
its internals.

> I would very much like to understand *what* is so confusing about
"interfaces".  Is it, as Cory posited,
> just that the documentation is not properly linked?  Or is it that the
average Python developer needs
> a gentle introduction to the entire idea of abstract rather than concrete
types?  If they do - is it really
> Twisted's responsibility to provide it to them?  Should Zope Interface
just have a snazzier website?

Some years ago when I tried to understand Twisted's use of interfaces via
Twisted's own documentation (which included something about hair dryers and
voltage standards) I was puzzled by the fact that the examples didn't
really show me how to solve a useful problem (or I was too stupid to
understand that the examples did in fact do that) *despite the fact that I
knew what an interface was in general terms*. It was a case of
understanding the intent but none of the examples. A brief look at the zope
documentation just now makes me think the situation has improved.

The other problem was that interfaces were sprinkled somewhat haphazardly
around the code I was trying to understand (perspective broker) and it was
just plain hard to keep navigating around the code files to understand who
was implementing what interfaces. This could have been my own fault for not
having a editor set up. I don't know.

> Should Zope Interface just have a snazzier website?

I think the real issue is the need for compelling and simple examples.

- Daniel


P.S. Everything below here is completely off topic of this thread and I
probably shouldn't have written it.

> Given that Twisted is often translating network protocol data into Python
method calls, one needs both
> a working domain knowledge of the protocol involved and a robust
understanding of Python
> metaprogramming constructs.  It sounds here like where you fell down was
mostly in the "Python
> metaprogramming" area, where PB is especially intense.

> But it's also not really specific to Twisted either.  This is another
case where I'm not sure what to do
> except to refer people to the language reference and tell them to work
through it slowly.

> Unfortunately, framework code just looks like that

I spent a considerable amount of time reading the PB code, reproducing
parts of it myself, and talking to people on IRC and the mailing list to
understand a particularly weird issue in PB. See here for the bug I was
trying to fix (note in particular my first comment to the one existing
answer):

http://stackoverflow.com/questions/23421423/why-are-dummy-objects-created-in-twisteds-pb-system

I distinctly recall that near the end of my efforts you (Glyph) or someone
else more or less told me that the PB code was old, horrible, and that the
issues I was trying to understand were probably incidental complexity due
to poor design etc. You guys were joking around on IRC about how ridiculous
all the dummy object construction is. So, I think this *particular*
incident was
less due a lack of understanding of python metaprogramming and more due to
PB having some bizarre warts.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160726/6fd03167/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Jul 26 01:41:08 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 26 Jul 2016 00:41:08 -0700
Subject: [Twisted-Python] Request for help with Twisted bindings in
	M2Crypto
In-Reply-To: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
References: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
Message-ID: <62C21C48-86AA-4270-A0BA-0BFC78275D09@twistedmatrix.com>

> On Jul 25, 2016, at 02:03, Matěj Cepl <mcepl at cepl.eu> wrote:
> 
> 3) Moreover, I would like to know how much interest there is in
> maintaining the M2Crypto module for Twisted. I got some hope from
> http://twistedmatrix.com/trac/wiki/TransportLayerSecurity <http://twistedmatrix.com/trac/wiki/TransportLayerSecurity> which seems
> like there is an interest in more complete OpenSSL bindings,

That is a very old wiki page.  I will delete it to avoid confusing people in the future!  Not only has pyOpenSSL had complete enough bindings to implement the feature described on that wiki page for several years now (a Twisted developer, Jean-Paul Calderone, actually took over maintenance of pyOpenSSL expressly for the purpose of adding those APIs), we actually implemented the TLS implementation based on those APIs <https://github.com/twisted/twisted/blob/trunk/twisted/internet/_newtls.py <https://github.com/twisted/twisted/blob/trunk/twisted/internet/_newtls.py>> in 2011, and fully finished transitioning to that new API in 2014 <https://github.com/twisted/twisted/commit/ee2070fe9e3f539ff702d9ff133aafa33ea19ac5> when we deleted the older, SSLSocket based API.

> but OTOH I see on the list that Twisted now seems to use more and more of
> Cryptography (why in the world somebody made such confusing name of
> their project ...).

The choice of name is intentional: it is designed to convey a sense of authoritativeness.  I.e. if you need cryptography in Python, you should 'import cryptography', and ignore everything else.  The Cryptography project specifically calls out M2Crypto, PyCrypto, and PyOpenSSL as having problems and lacking maintenance: <https://cryptography.io/en/latest/#why-a-new-crypto-library-for-python <https://cryptography.io/en/latest/#why-a-new-crypto-library-for-python>>.  pyOpenSSL is now just a thin wrapper over Cryptography itself, and PyCrypto's maintainer now generally suggests Cryptography <https://github.com/dlitz/pycrypto/issues/158#issuecomment-140833926 <https://github.com/dlitz/pycrypto/issues/158#issuecomment-140833926>>.  So it is 2/3 of the way to achieving its goal of eliminating these libraries which duplicate so much effort - M2Crypto is all that remains :).

> Obviously the most simple way for me to be cutting
> Twisted module from M2Crypto and let it be (although I am afraid I have
> still some legacy users who would like to see it maintained, and given
> that the legacy support is still the most important reason for
> maintaining M2Crypto, I don't want to give up lightly).

I do not want to denigrate the work you've done maintaining a legacy library.  I think it's noble to take on this kind of work.  But if you don't have any particular reason for needing to maintain this library beyond "legacy support", and it is not different from Cryptography in any meaningful way, the best thing that you could do for its existing users would be to do the same thing that was done with pyOpenSSL: make it a thin wrapper over the bindings layer in Cryptography, get rid of all of the SWIG code in M2Crypto, and start gently directing users in the direction of Cryptography for any new code.  This would get everyone onto a supported base platform for their security primitives, allow them to share code with other parts of large systems that already use Cryptography or pyOpenSSL, and provide a well-maintained path forward.

M2Crypto's main claim to superiority in past years was its higher degree of completeness of OpenSSL APIs, but Cryptography has since far surpassed it.  Even if there are some APIs that Cryptography's bindings layer doesn't export, it's easier and safer to add more bindings there than in M2Crypto.

Even if you're not going to get rid of M2Crypto entirely, M2Crypto's implementation of Twisted TLS copies the terrible no-security defaults it inherits from OpenSSL, the same ones that Twisted had 5 years ago, and Twisted has moved on to have actual security (certificate verification, service identity, and trust root configuration).  We also continue to improve that security regularly.  Given all that, this is a rare case where I would not mind seeing Twisted support disappear from a library.  Unless I were to get some new information I would have to very strongly discourage anyone who wanted to use the SSL backend in M2Crypto.  I realize you have users, but possibly the best thing you could do for their own good would be to force them to move to Twisted's much better native TLS support, which thankfully is easy to adopt at this point.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160726/303e9658/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Jul 26 01:57:29 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 26 Jul 2016 00:57:29 -0700
Subject: [Twisted-Python] RFC: IPv6 multicast join/ticket 6597
In-Reply-To: <20160726044330.GA8172@jlitzing-dell>
References: <20160726044330.GA8172@jlitzing-dell>
Message-ID: <4608F909-EE03-401B-A898-BAC3D3CBB35B@twistedmatrix.com>


> On Jul 25, 2016, at 9:43 PM, Jason Litzinger <jlitzingerdev at gmail.com> wrote:
> 
> 
> Hello,
> 
> I'm looking at making the changes to support IPv6 multicast groups as described
> in ticket 6597 but wanted to get some feedback (and get a feel whether this is
> even desirable) before formally submitting any patches.

Thanks for taking this up!

> Specifically:
> 
> 1.  I've read [1] and it alludes to udp hopefully disappearing, is that something in the
>    works?  Is there a new approach to solving this problem I should look at?  A
>    branch in the works where this (conceptual) change belongs?
> 
>    Note:  The addressFamily attribute referenced already exists and is set
>           properly for IPv6.

'twisted.internet.udp', as an importable module; not 'udp' as a feature of Twisted (or of the Internet, for that matter).  

> 2.  The attached change has the side effect that calls to ReactorBase.resolve()
>    with IPv6 literals will now likely succeed where they may have failed in the
>    past.  That means clients counting on resolve raising an exception for an
>    IPv6 literal will break.  Not sure whether this is considered a
>    compatibility issue, but I wanted to raise it.

We have explicitly avoided adding IPv6 name resolution to the reactor because the reactor's API for name resolution is fundamentally the wrong shape for IPv6.  If you want to add the ability to resolve IPv6 names to the reactor itself, please see this ticket: https://twistedmatrix.com/trac/ticket/4362 <https://twistedmatrix.com/trac/ticket/4362>

For the purposes of this ticket alone, you should probably just skip resolution in _joinAddr1 if resolution is 

> 3.  One alternative to the above would be a complete API separation, via
>    something like joinIPv6Group(), and a new resolve.  Is that more appealing
>    in this case?

Given what we've done with connectTCP et. al., it makes sense to leave 'joinGroup' as the API for doing this.  But we probably want to leave '.resolve' alone.

> Caveats:
> 
> 1.  I have not finished all of the documentation related to developers, I will
>    do so prior to formal submission.

I think we can do the narrative docs in a separate PR, as the interface looks like the straightforward expansion of the IPv4 interface.  You should clean up the reference documentation (i.e. docstrings) to ensure they're accurate of course.

> 2.  I know I need tests and docs and will submit them with the final changes.

Testing multicast is ... challenging.  I barely have any idea how to set up a test environment for IPv4, and no idea what to do for IPv6.  If you can speak to this in your tests (and hopefully docs as well) that would be super helpful.

> On to the patches.  With these changes, I can use the joinGroup API to add
> myself to an IPv6 multicast group on Linux (verified via /proc/net/igmp6).
> Additionally, trial reports the same two failures before and after these changes
> (twisted.python.test.test_release.APIBuilderTests.test_build and
> test_buildWithPolicy).  These changes struck me as the obvious approach, but
> given the changes to resolve, not necessarily the best.
> 
> 
> diff --git a/twisted/internet/base.py b/twisted/internet/base.py
> index 4f2c862..e813741 100644
> --- a/twisted/internet/base.py
> +++ b/twisted/internet/base.py
> @@ -567,6 +567,8 @@ class ReactorBase(object):
>             return defer.succeed('0.0.0.0')
>         if abstract.isIPAddress(name):
>             return defer.succeed(name)
> +        elif abstract.isIPv6Address(name):
> +            return defer.succeed(name)
>         return self.resolver.getHostByName(name, timeout)
> 
>     # Installation.
> diff --git a/twisted/internet/udp.py b/twisted/internet/udp.py
> index b5a5322..210b079 100644
> --- a/twisted/internet/udp.py
> +++ b/twisted/internet/udp.py
> @@ -485,7 +485,10 @@ class MulticastMixin:
> 
> 
>     def _joinAddr1(self, addr, interface, join):
> -        return self.reactor.resolve(interface).addCallback(self._joinAddr2, addr, join)
> +        if self.addressFamily == socket.AF_INET:
> +            return self.reactor.resolve(interface).addCallback(self._joinAddr2, addr, join)
> +        else:
> +            return self.reactor.resolve(interface).addCallback(self._joinAddrIPv6, addr, join)
> 
> 
>     def _joinAddr2(self, interface, addr, join):
> @@ -500,6 +503,18 @@ class MulticastMixin:
>         except socket.error as e:
>             return failure.Failure(error.MulticastJoinError(addr, interface, *e.args))
> 
> +    def _joinAddrIPv6(self, interface, addr, join):
> +        addr = socket.inet_pton(socket.AF_INET6, addr)
> +        interface = socket.inet_pton(socket.AF_INET6, interface)
> +        if join:
> +            cmd = socket.IPV6_JOIN_GROUP
> +        else:
> +            cmd = socket.IPV6_LEAVE_GROUP
> +        try:
> +            self.socket.setsockopt(socket.IPPROTO_IPV6, cmd, addr + interface)
> +        except socket.error as e:
> +            return failure.Failure(error.MulticastJoinError(addr, interface, *e.args))
> +
> 
>     def leaveGroup(self, addr, interface=""):
>         """Leave multicast group, return Deferred of success."""
> 
> 
> This does require the client specify the interface argument when calling
> joinGroup, e.g. self.transport.joinGroup("ff02::1", interface="::").
> 
> Thanks in advance for any feedback!
> 
> -Jason Litzinger
> 
> 
> [1] http://twistedmatrix.com/pipermail/twisted-python/2016-March/030188.html
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160726/e52151af/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Jul 26 02:18:41 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 26 Jul 2016 01:18:41 -0700
Subject: [Twisted-Python] Request for help with Twisted bindings in
	M2Crypto
In-Reply-To: <CAKN9TDJ8TX1r5AqZfoochxkw_UEEYSdKBNvpXM5=aHAhA6K3+Q@mail.gmail.com>
References: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
 <CAG=rPVfJhSZgoVuSoQ93YvkcDA=3kTgaB9wJRwOf9_neiiPPMA@mail.gmail.com>
 <CAKN9TD+_PCK7f90QPsVQp+8jy9HX3Q_TqarQKkmQHuuQ0LctFw@mail.gmail.com>
 <AFC57424-CA61-4587-986F-261BE3A8786B@twistedmatrix.com>
 <CAKN9TDJ8TX1r5AqZfoochxkw_UEEYSdKBNvpXM5=aHAhA6K3+Q@mail.gmail.com>
Message-ID: <2BD68CE7-2326-4975-87E9-CE0C16E07902@twistedmatrix.com>


> On Jul 26, 2016, at 12:26 AM, Daniel Sank <sank.daniel at gmail.com> wrote:
> 
> Glyph,
> 
> >> 2. I have no idea what a "task" is. I realize this is python and yay duck-typing but not
> >> specifying the expected behavior of an argument seems like a big omission.
> 
> > Did you miss the part where it said "type: 0-argument callable" in the documentation?
> 
> Yes :(
> 
> I can only guess that I missed it because the type is defined near the end of the description line, whereas I'm used to seeing
> 
> def foo(x, y):
>     """Do something.
> 
>     Args:
>         x (int): blah blah
>         y (banana): yadda yadda
>     """
> 
> FWIW, now that I look at the code, the type specification is way more visually apparent there than it is in the generated HTML.
> 
> tl,dr: I take it all back and thanks for pointing out the obvious.

This does at least point to a real problem with pydoctor in the way it presents types.  It should probably put them in their own colored box, not use the string 'type' or parentheses to offset them, and put the type closer to (rather than farther from) the parameter name.  Would you mind filing a bug on pydoctor?  Or commenting on one if it already exists? :)

> > An interface is a very simple concept - an abstract description of what an object is expected
> > to provide if you're going to do something useful with it.
> 
> Indeed, a general understanding of interfaces is not the problem.
> 
> > In my view, interface definition is the primary activity of software development
> 
> Agreed 100%.

OK.  Glad to hear it.

> > The fact that so many people seem to find either the basic idea of an abstract type, or the concrete
> > instantiation of that idea in the Zope Interface library, so horribly confusing, makes me despair of
> > ever communicating the actually hard stuff that Twisted gets up to in its internals.
> 
> > I would very much like to understand *what* is so confusing about "interfaces".  Is it, as Cory posited,
> > just that the documentation is not properly linked?  Or is it that the average Python developer needs
> > a gentle introduction to the entire idea of abstract rather than concrete types?  If they do - is it really
> > Twisted's responsibility to provide it to them?  Should Zope Interface just have a snazzier website?
> 
> Some years ago when I tried to understand Twisted's use of interfaces via Twisted's own documentation (which included something about hair dryers and voltage standards) I was puzzled by the fact that the examples didn't really show me how to solve a useful problem (or I was too stupid to understand that the examples did in fact do that) despite the fact that I knew what an interface was in general terms. It was a case of understanding the intent but none of the examples.

OK... it's a fair cop.  That documentation is not the best.  Among other things, it's mainly trying to explain adaptation, which sort of puts the cart before the horse, and automatic adaptation is increasingly considered spooky action-at-a-distance within Twisted code.  You can see it here: <http://twisted.readthedocs.io/en/latest/core/howto/components.html <http://twisted.readthedocs.io/en/latest/core/howto/components.html>>.

You're the perfect person to submit patches against this doc, by the way, since you have a firm grasp of the whole "abstract interface" thing but also found it confusing.  Personally, I find the examples very clear - I say the documentation is "not the best" because I could see how it could confuse somebody _else_, but it doesn't confuse _me_ at all, so it's a bit hard for me to improve it (especially incrementally).

> A brief look at the zope documentation just now makes me think the situation has improved.

Well that's good, at least.  perhaps we should link to it more prominently.

> The other problem was that interfaces were sprinkled somewhat haphazardly around the code I was trying to understand (perspective broker) and it was just plain hard to keep navigating around the code files to understand who was implementing what interfaces. This could have been my own fault for not having a editor set up. I don't know.

Setting up your editor to have a 'jump to definition' key definitely helps; but then, it generally helps with any large codebase.  So, hard to say.

> > Should Zope Interface just have a snazzier website?
> 
> I think the real issue is the need for compelling and simple examples.

Do you think it would be better to put things in terms of a concrete Twisted interface, like "IProtocol"?  I am pretty sure these docs were trying to stay away from anything "real" because this is a highly abstract concept that could apply to anything, and when we drag a concrete example in 

> P.S. Everything below here is completely off topic of this thread and I probably shouldn't have written it.

In for a penny...

(We may want to spin out into a different thread for talking about the PB issue, but it looks like this was unresolved for you, and I can definitely shed some more light.)

> > Given that Twisted is often translating network protocol data into Python method calls, one needs both
> > a working domain knowledge of the protocol involved and a robust understanding of Python
> > metaprogramming constructs.  It sounds here like where you fell down was mostly in the "Python
> > metaprogramming" area, where PB is especially intense.
> 
> > But it's also not really specific to Twisted either.  This is another case where I'm not sure what to do
> > except to refer people to the language reference and tell them to work through it slowly.
> 
> > Unfortunately, framework code just looks like that
> 
> I spent a considerable amount of time reading the PB code, reproducing parts of it myself, and talking to people on IRC and the mailing list to understand a particularly weird issue in PB. See here for the bug I was trying to fix (note in particular my first comment to the one existing answer):
> 
> http://stackoverflow.com/questions/23421423/why-are-dummy-objects-created-in-twisteds-pb-system <http://stackoverflow.com/questions/23421423/why-are-dummy-objects-created-in-twisteds-pb-system>
> 
> I distinctly recall that near the end of my efforts you (Glyph) or someone else more or less told me that the PB code was old, horrible, and that the issues I was trying to understand were probably incidental complexity due to poor design etc. You guys were joking around on IRC about how ridiculous all the dummy object construction is. So, I think this particular incident was less due a lack of understanding of python metaprogramming and more due to PB having some bizarre warts.

OK.  Maybe I made this sound a bit too simple, but it's still not really Twisted's fault.  The bizarre warts here - and they are definitely here - are mostly an outgrowth of the bizarre mismatch between old-style and new-style classes, and the mad shuffle of random API deprecations, often without suitable replacements, or without suitable portable replacements, within the standard library.

In the old-style world, you had Class objects.  Class objects could be created in a variety of ways, but the Right™ way to make a new, empty class that hadn't had its initializer run was 'new.instance'.  Of course, new.instance doesn't work with new-style classes, because now the Right™ way to make a new, empty class that hadn't had its initializer run was yourclass.__new__().  Unless of course you overrode __new__, which is totally allowed, so the caller can't know what that signature is supposed to be.  So then you use `object.__new__(yourclass)´ in order to get a known signature - but of course that won't work at all with old-style classes.  PB is bridging the gap between these two worlds, and it has to find hacks which work in both and don't draw in any deprecated APIs that are gone in python 3 in order to do it.  This means you can't use the Right™ way at all, and instead must resort to contortions which depend on implementation details that happen to be held in common between both new-style and old-style objects.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160726/0263a821/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Jul 26 04:09:41 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 26 Jul 2016 03:09:41 -0700
Subject: [Twisted-Python] Request for help with Twisted bindings in
	M2Crypto
In-Reply-To: <2BD68CE7-2326-4975-87E9-CE0C16E07902@twistedmatrix.com>
References: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
 <CAG=rPVfJhSZgoVuSoQ93YvkcDA=3kTgaB9wJRwOf9_neiiPPMA@mail.gmail.com>
 <CAKN9TD+_PCK7f90QPsVQp+8jy9HX3Q_TqarQKkmQHuuQ0LctFw@mail.gmail.com>
 <AFC57424-CA61-4587-986F-261BE3A8786B@twistedmatrix.com>
 <CAKN9TDJ8TX1r5AqZfoochxkw_UEEYSdKBNvpXM5=aHAhA6K3+Q@mail.gmail.com>
 <2BD68CE7-2326-4975-87E9-CE0C16E07902@twistedmatrix.com>
Message-ID: <CA66239B-E979-43D3-AA02-ACFC4344192A@twistedmatrix.com>


> On Jul 26, 2016, at 1:18 AM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
>> I spent a considerable amount of time reading the PB code, reproducing parts of it myself, and talking to people on IRC and the mailing list to understand a particularly weird issue in PB. See here for the bug I was trying to fix (note in particular my first comment to the one existing answer):
>> 
>> http://stackoverflow.com/questions/23421423/why-are-dummy-objects-created-in-twisteds-pb-system <http://stackoverflow.com/questions/23421423/why-are-dummy-objects-created-in-twisteds-pb-system>
> 

BTW, since this discussion raised this question again, and since I now understand better what I think you were _actually_ asking, I put a new answer on that question. Hopefully it resolves the mystery for you :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160726/187f0927/attachment-0002.html>

From mcepl at cepl.eu  Tue Jul 26 09:43:58 2016
From: mcepl at cepl.eu (=?iso-8859-2?Q?Mat=ECj?= Cepl)
Date: Tue, 26 Jul 2016 17:43:58 +0200
Subject: [Twisted-Python] Request for help with Twisted bindings in
	M2Crypto
In-Reply-To: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
Message-ID: <20160726154357.GA7233@mitmanek.redhat.com>

On 2016-07-26, 07:41 GMT, Glyph Lefkowitz wrote:
> I do not want to denigrate the work you've done maintaining 
> a legacy library.  I think it's noble to take on this kind of 
> work.

I was watching “A Special Day” (1977) yesterday so I have 
somewhat lesser tolerance for the pompous superiority complex, 
but I will think about your reply and the support for Twisted 
will probably go.

Matěj

-- 
https://matej.ceplovi.cz/blog/, Jabber: mcepl at ceplovi.cz
GPG Finger: 3C76 A027 CA45 AD70 98B5  BC1D 7920 5802 880B C9D8
 
http://xkcd.com/743/ … enough said.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 198 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20160726/5f51a743/attachment.sig>

From mcepl at cepl.eu  Tue Jul 26 09:45:25 2016
From: mcepl at cepl.eu (=?iso-8859-2?Q?Mat=ECj?= Cepl)
Date: Tue, 26 Jul 2016 17:45:25 +0200
Subject: [Twisted-Python] Request for help with Twisted bindings in
	M2Crypto
In-Reply-To: <7d3bb5d0-4d9c-5ffd-691e-8ad09172daeb@cepl.eu>
Message-ID: <20160726154525.GB7233@mitmanek.redhat.com>

On 2016-07-26, 06:05 GMT, Glyph Lefkowitz wrote:
> An interface is a very simple concept

Actually I found 
https://twistedmatrix.com/documents/current/core/howto/components.html 
to be a very good description. Yes, the concept is not that 
complicated, but it is very uncommon in the Pythonic world and 
the experience with M2Crypto and your previous reply seems to 
indicate that even you in the end prefer hard-wiring 
Cryptography to Twisted instead of using your own interfaces.  
Isn’t simple better than complex?

Whatever,

Matěj

-- 
https://matej.ceplovi.cz/blog/, Jabber: mcepl at ceplovi.cz
GPG Finger: 3C76 A027 CA45 AD70 98B5  BC1D 7920 5802 880B C9D8
 
http://xkcd.com/743/ … enough said.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 198 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20160726/95303ba2/attachment.sig>

From mcepl at cepl.eu  Tue Jul 26 09:47:10 2016
From: mcepl at cepl.eu (=?iso-8859-2?Q?Mat=ECj?= Cepl)
Date: Tue, 26 Jul 2016 17:47:10 +0200
Subject: [Twisted-Python] Request for help with Twisted bindings in
	M2Crypto
In-Reply-To: <CAG=rPVfJhSZgoVuSoQ93YvkcDA=3kTgaB9wJRwOf9_neiiPPMA@mail.gmail.com>
Message-ID: <20160726154710.GC7233@mitmanek.redhat.com>

On 2016-07-25, 09:55 GMT, Craig Rodrigues wrote:
First of all, thank you very much for all help you gave to 
M2Crypto. However, ...

> I call shenanigans on you.

Nothing of which I have been accused of has anything to do with 
what I meant. When I said „opaque“, I didn’t mean to offend 
Twisted. Just to say, that while I was marking whole library 
with PEP-484 type hints, I usually dealt with bytes, str, ints, 
and very few rather simple objects. With Twisted I get object

    @implementer(ITLSTransport)
    class TLSProtocolWrapper(ProtocolWrapper):
        def __init__(self, factory, wrappedProtocol, 
                     startPassThrough, client,
                     contextFactory, postConnectionCheck):
            # type: policies.WrappingFactory, object, int, int, object, Checker

(and with those two objects, I don't even dare to guess what 
types these are, and all that covered in some weird decorator 
from Zope (?)).

That's nothing wrong with Twisted, just that it is really 
difficult for idiot like me to understand what's going on.

> If you are unfamiliar with Twisted's code and data types, and 
> don't have the energy to dig in, then be honest about that, 
> but don't accuse Twisted of being "opaque", because it isn't.

I don't think what's dishonest on saying that Twisted API is 
quite complicated and I am stupid enough not understanding 
what's going on.

> Regarding your code example which is failing,
> your code is failing because you are intermixing bytes and strings which is
> a big no-no for Python 3.

Of course I know that (it is not the first place where I have to 
deal with bytes × str dichotomy in py3k), but in order to 
understand what's going, I have to first understand where these 
values come from and where they run to, i.e., to decipher 
Twisted. Thus I was asking for help.

> If I look at this line for example:
> https://gitlab.com/m2crypto/m2crypto/blob/master/M2Crypto/SSL/TwistedProtocolWrapper.py#L357
>
> I see the code is doing stuff like:
>    data = ''
>    encryptedData = ''
>
> Those are of type str, and need to be of type bytes:
>
>    data = b''
>    encryptedData = b''
>
> You need to clean stuff like that up in your code so that you are only
> using bytes.

I believe I have fixed all I can do without actually 
understanding Twisted in 
https://gitlab.com/mcepl/m2crypto/commit/6cd5f87b31e50016ebb7e44f3f2ae46610bc24e0.  
So now, if Twisted is so transparent and perfectly 
understandable, could you please suggest, what I do wrong, that 
the test ends in the endless loop 
(https://travis-ci.org/mcepl/M2Crypto/builds/147175901)?

Thank you,

Matěj Cepl

-- 
https://matej.ceplovi.cz/blog/, Jabber: mcepl at ceplovi.cz
GPG Finger: 3C76 A027 CA45 AD70 98B5  BC1D 7920 5802 880B C9D8
 
Never ascribe to malice that which is adequately explained by
stupidity.
    -- Napoleon Bonaparte (or many other people to whom this
       quote is ascribed)

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 198 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20160726/0a218800/attachment.sig>

From sank.daniel at gmail.com  Tue Jul 26 10:37:29 2016
From: sank.daniel at gmail.com (Daniel Sank)
Date: Tue, 26 Jul 2016 09:37:29 -0700
Subject: [Twisted-Python] Pydoc parameter formatting and explaining
	interfaces
Message-ID: <CAKN9TDLPD1quR2XTQ3R0eLzij3Lk=zfQD7Zev7BsUe-zD4JmOw@mail.gmail.com>

This is a branch from the thread with subject "Request for help with
Twisted bindings in M2Crypt".

Regarding my inability to read documentation:

> This does at least point to a real problem with pydoctor in the way it
presents types.
> It should probably put them in their own colored box, not use the string
'type' or
> parentheses to offset them, and put the type closer to (rather than
farther from) the
> parameter name.  Would you mind filing a bug on pydoctor?  Or commenting
on
> one if it already exists? :)

Done: https://github.com/twisted/pydoctor/issues/121

>> Some years ago when I tried to understand Twisted's use of interfaces
via Twisted's
>> own documentation (which included something about hair dryers and
voltage standards)
>> I was puzzled by the fact that the examples didn't really show me how to
solve a useful
>> problem (or I was too stupid to understand that the examples did in fact
do that) despite
>> the fact that I knew what an interface was in general terms. It was a
case of
>> understanding the intent but none of the examples.

> OK... it's a fair cop.

I'm unfamiliar with that term.

> Among other things, it's mainly trying to explain adaptation, which sort
of puts the cart before
> the horse

Yes! That is definitely a big part of the problem. When I think "interface"
I think "methods and their signatures an object promises to provided".
Adaptation is a detail, so to speak. It's also somewhat confusing that the
discussion begins with shapes as it goes over the basic idea of interfaces,
and then switches to hair dryers when it comes time for an example. It
would be easier to read if the examples were more consistent.

> and automatic adaptation is increasingly considered spooky
action-at-a-distance within
> Twisted code.

All the more reason to not use adaptation as the in-your-face example.

> You're the perfect person to submit patches against this doc, by the way,
since you have a
> firm grasp of the whole "abstract interface" thing but also found it
confusing.

Perhaps. On the other hand I think it might be better to replace Twisted's
own documentation with a link to zope's, or at least put the link at the
top and say "read this before reading our examples about adaptation." We'll
see if such a patch receives any love.

--
Daniel Sank
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160726/caa860f0/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Jul 26 11:55:12 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 26 Jul 2016 10:55:12 -0700
Subject: [Twisted-Python] Request for help with Twisted bindings in
	M2Crypto
In-Reply-To: <20160726154357.GA7233@mitmanek.redhat.com>
References: <20160726154357.GA7233@mitmanek.redhat.com>
Message-ID: <779EB6C9-5FCD-4077-AB8F-4BB5C9733D9F@twistedmatrix.com>


> On Jul 26, 2016, at 8:43 AM, Matěj Cepl <mcepl at cepl.eu> wrote:
> 
> On 2016-07-26, 07:41 GMT, Glyph Lefkowitz wrote:
>> I do not want to denigrate the work you've done maintaining a legacy library.  I think it's noble to take on this kind of work.
> 
> I was watching “A Special Day” (1977) yesterday so I have somewhat lesser tolerance for the pompous superiority complex,

Despite your quite rude introduction to the mailing list (twisted is "opaque and complicated", "deep magic", learning it is "horribly complicated"), several people (including myself) invested quite a bit of time to try to answer your questions in detail.  And, for taking the trouble to be diplomatic, you have now, as I understand it, made a veiled allegation that I'm a fascist?  If you are not _trying_ to be heinously offensive, perhaps you should stop posting here.

-glyph


From glyph at twistedmatrix.com  Tue Jul 26 11:58:19 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 26 Jul 2016 10:58:19 -0700
Subject: [Twisted-Python] Pydoc parameter formatting and explaining
	interfaces
In-Reply-To: <CAKN9TDLPD1quR2XTQ3R0eLzij3Lk=zfQD7Zev7BsUe-zD4JmOw@mail.gmail.com>
References: <CAKN9TDLPD1quR2XTQ3R0eLzij3Lk=zfQD7Zev7BsUe-zD4JmOw@mail.gmail.com>
Message-ID: <BCE23D2E-D5BB-4A42-9BD5-EC33904DB1D3@twistedmatrix.com>


> On Jul 26, 2016, at 9:37 AM, Daniel Sank <sank.daniel at gmail.com> wrote:
> 
> This is a branch from the thread with subject "Request for help with Twisted bindings in M2Crypt".
> 
> Regarding my inability to read documentation:
> 
> > This does at least point to a real problem with pydoctor in the way it presents types.
> > It should probably put them in their own colored box, not use the string 'type' or
> > parentheses to offset them, and put the type closer to (rather than farther from) the
> > parameter name.  Would you mind filing a bug on pydoctor?  Or commenting on
> > one if it already exists? :)
> 
> Done: https://github.com/twisted/pydoctor/issues/121 <https://github.com/twisted/pydoctor/issues/121>

Thanks!  I especially appreciate the screen shot :).

> >> Some years ago when I tried to understand Twisted's use of interfaces via Twisted's
> >> own documentation (which included something about hair dryers and voltage standards)
> >> I was puzzled by the fact that the examples didn't really show me how to solve a useful
> >> problem (or I was too stupid to understand that the examples did in fact do that) despite
> >> the fact that I knew what an interface was in general terms. It was a case of
> >> understanding the intent but none of the examples.
> 
> > OK... it's a fair cop.
> 
> I'm unfamiliar with that term.

For me it's a monty python reference, but I suspect for most speakers of British English, it's just an idiom :).  It roughly means "mea culpa", although, more specifically, I believe it means "you've caught me doing something bad".

> > Among other things, it's mainly trying to explain adaptation, which sort of puts the cart before
> > the horse
> 
> Yes! That is definitely a big part of the problem. When I think "interface" I think "methods and their signatures an object promises to provided". Adaptation is a detail, so to speak. It's also somewhat confusing that the discussion begins with shapes as it goes over the basic idea of interfaces, and then switches to hair dryers when it comes time for an example. It would be easier to read if the examples were more consistent.
> 
> > and automatic adaptation is increasingly considered spooky action-at-a-distance within
> > Twisted code.
> 
> All the more reason to not use adaptation as the in-your-face example.
> 
> > You're the perfect person to submit patches against this doc, by the way, since you have a
> > firm grasp of the whole "abstract interface" thing but also found it confusing.
> 
> Perhaps. On the other hand I think it might be better to replace Twisted's own documentation with a link to zope's, or at least put the link at the top and say "read this before reading our examples about adaptation." We'll see if such a patch receives any love.

Please direct my attention to it when one exists :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160726/331aafd6/attachment-0002.html>

From meejah at meejah.ca  Tue Jul 26 17:31:24 2016
From: meejah at meejah.ca (meejah)
Date: Wed, 27 Jul 2016 03:31:24 +0400
Subject: [Twisted-Python] txtorcon 0.15.0
Message-ID: <86eg6g0yer.fsf@atlantis.meejah.ca>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I'm happy to announce txtorcon 0.15.0:

 * added support for NULL control-port-authentication which is often
   appropriate when used with a UNIX domain socket
 * switched to https://docs.python.org/3/library/ipaddress.html instead
   of
   Google's ipaddr; the API should be the same from a user
   perspective but **packagers and tutorials** will want to change
   their instructions slightly (``pip install ipaddress`` or ``apt-get
   install python-ipaddress`` are the new ways).
 * support the new ADD_ONION and DEL_ONION "ephemeral hidden services"
   commands in TorConfig
 * a first stealth-authentication implementation (for "normal" hidden
   services, not ephemeral)
 * bug-fix from https://github.com/david415 to raise
   ConnectionRefusedError instead of StopIteration when running out of
   SOCKS ports.
 * new feature from https://github.com/david415 adding a
   ``build_timeout_circuit`` method which provides a Deferred that
   callbacks only when the circuit is completely built and errbacks if
   the provided timeout expires. This is useful because
   :doc:`TorState.build_circuit` callbacks as soon as a Circuit
   instance can be provided (and then you'd use
   :doc:`Circuit.when_built` to find out when it's done building).
 * new feature from https://github.com/coffeemakr
   falling back to password authentication if cookie authentication
   isn't available (or fails, e.g. because the file isn't readable).
 * both TorState and TorConfig now have a ``.from_protocol``
   class-method.
 * spec-compliant string-un-escaping from https://github.com/coffeemakr
 * fix https://github.com/meejah/txtorcon/issues/176

You can download the release from PyPI or GitHub (or of
course "pip install txtorcon"):

   https://pypi.python.org/pypi/txtorcon/0.15.0
   https://github.com/meejah/txtorcon/releases/tag/v0.15.0

Releases are also available from the hidden service:

   http://timaq4ygg2iegci7.onion/txtorcon-0.15.0.tar.gz
   http://timaq4ygg2iegci7.onion/txtorcon-0.15.0.tar.gz.asc

You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat <<EOF | sha256sum --check
f2e8cdb130aa48d63c39603c2404d9496c669fa8b4c724497ca6bfa7752a9475
dist/txtorcon-0.15.0.tar.gz
a359fb5e560263499400018262494378b3d347cd04a361adb08939df95ecedf6
dist/txtorcon-0.15.0-py2-none-any.whl
EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----

iQEcBAEBAgAGBQJXl/KEAAoJEMJgKAMSgGmn76gH/1du7i9dmkMpr2PJrexVeXSo
9mSaeX/7KKaW71pEMmaCXfvhDJ6dMZDQpZ7saTM31zJZTp+MXjtHf0DZI2QTwgDw
NYEBH+LO8PINN1ezPomgeZE6E4eJYlaDCyO6c7j3cOsEmohST+GPpvvdWdft+Sw2
hWvVf2+I4BV7vcIx6WQx4jKBS2gmlHbxuUv3LAnjj/Tn6oSYpft1IUK39pM66DX4
FzdYeBTloC6nzyH4sRTxnax+l9MfQJ2ZR+5alJi8uEvGlk580ciFASQNCVLaBY9r
4YALoipEg2Fm4BFA7qLsH0aFoLgx0lv7ng8lmpaP7XlPjUCuA7OcDp5jSqhGt2A=
=hWml
-----END PGP SIGNATURE-----



From clayton.daley at gmail.com  Tue Jul 26 17:41:54 2016
From: clayton.daley at gmail.com (Clayton Daley)
Date: Tue, 26 Jul 2016 18:41:54 -0500
Subject: [Twisted-Python] Pydoc parameter formatting and explaining
	interfaces
In-Reply-To: <BCE23D2E-D5BB-4A42-9BD5-EC33904DB1D3@twistedmatrix.com>
References: <CAKN9TDLPD1quR2XTQ3R0eLzij3Lk=zfQD7Zev7BsUe-zD4JmOw@mail.gmail.com>
 <BCE23D2E-D5BB-4A42-9BD5-EC33904DB1D3@twistedmatrix.com>
Message-ID: <CACKEAnXLAagohWCvApby9XCgcGiRGe-Yd2u++kqdNGAksdvN6g@mail.gmail.com>

Speaking just from my own experience, I don't think it's a problem with the
docs per se.  Rather, I think there's often a disconnect between the
answers people are looking for and the nature of Twisted.  It's hard to
explain, but this is the best I can manage:

   - If you're used to using frameworks, interfaces reflect your motives
   when interacting with a library.  To use an audio-video (A/V) analogy, you
   have interfaces like IVolume, IPlayback (play, pause, stop, ff, rew), and
   IChannel. Documentation just "makes sense".
   - Twisted is like a box of electronics parts.  The docs are enough to
   see why IDigital and IAnalog are used by DigitalToAnalogConverter, but
   that's a long way from understanding when you'd even need/care to consume
   something using an IAnalog.
   - There are several layers of architecture between a LineReader and a
   REST library.  If you don't realize these layers exist, it's not obvious
   that you'd need to find/create them in a Twisted app.
   - The (excellent) krondo tutorial is like a small kit that shows you how
   to build a model piece of electronics.  If you want to build a complete A/V
   device, where do you go next?

To make it more concrete for twisted, here's a example of that next step:

   - Start with the chat server example (
   https://twistedmatrix.com/documents/current/_downloads/chatserver.py)
   - To add rooms, you need to introduce a layer of commands (minimally
   JOIN and SEND).  This requires a complete rewrite of the Protocol and I'm
   not aware of any tutorial that helps you make this architectural leap.
   - Maybe Twisted has a class for this so one might search the docs, spend
   lots of time, get really confused, and (tentatively) conclude it's not
   there.  Figuring out that something doesn't exist is especially hard.
   - The authentication example (
   https://twistedmatrix.com/documents/current/core/howto/cred.html)
   actually has a command layer, but key parts of it (i.e. the lineReceived
   call) are buried in the ellipses.  How do you intuit the missing code if
   you don't even realize that you need a commands layer?
   - Of course, to combine auth with chat, you also need to figure out how
   to rewrite the business logic as an IMailbox implementing avatars.  That's
   a LOT of moving pieces to get right at the same time.

When I decided to try out Zend Framework (PHP), their full-stack skeleton
application (
https://docs.zendframework.com/tutorials/getting-started/skeleton-application/)
showed you how everything fit together. Maybe twisted would benefit from
something similar... especially if it emphasized the various architectural
layers by putting the protocol, command handler, and actual business logic
into separate classes.

Clayton Daley

On Tue, Jul 26, 2016 at 12:58 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Jul 26, 2016, at 9:37 AM, Daniel Sank <sank.daniel at gmail.com> wrote:
>
> This is a branch from the thread with subject "Request for help with
> Twisted bindings in M2Crypt".
>
> Regarding my inability to read documentation:
>
> > This does at least point to a real problem with pydoctor in the way it
> presents types.
> > It should probably put them in their own colored box, not use the string
> 'type' or
> > parentheses to offset them, and put the type closer to (rather than
> farther from) the
> > parameter name.  Would you mind filing a bug on pydoctor?  Or commenting
> on
> > one if it already exists? :)
>
> Done: https://github.com/twisted/pydoctor/issues/121
>
>
> Thanks!  I especially appreciate the screen shot :).
>
> >> Some years ago when I tried to understand Twisted's use of interfaces
> via Twisted's
> >> own documentation (which included something about hair dryers and
> voltage standards)
> >> I was puzzled by the fact that the examples didn't really show me how
> to solve a useful
> >> problem (or I was too stupid to understand that the examples did in
> fact do that) despite
> >> the fact that I knew what an interface was in general terms. It was a
> case of
> >> understanding the intent but none of the examples.
>
> > OK... it's a fair cop.
>
> I'm unfamiliar with that term.
>
>
> For *me* it's a monty python reference, but I suspect for most speakers
> of British English, it's just an idiom :).  It roughly means "mea culpa",
> although, more specifically, I believe it means "you've caught me doing
> something bad".
>
> > Among other things, it's mainly trying to explain adaptation, which sort
> of puts the cart before
> > the horse
>
> Yes! That is definitely a big part of the problem. When I think
> "interface" I think "methods and their signatures an object promises to
> provided". Adaptation is a detail, so to speak. It's also somewhat
> confusing that the discussion begins with shapes as it goes over the basic
> idea of interfaces, and then switches to hair dryers when it comes time for
> an example. It would be easier to read if the examples were more consistent.
>
> > and automatic adaptation is increasingly considered spooky
> action-at-a-distance within
> > Twisted code.
>
> All the more reason to not use adaptation as the in-your-face example.
>
> > You're the perfect person to submit patches against this doc, by the
> way, since you have a
> > firm grasp of the whole "abstract interface" thing but also found it
> confusing.
>
> Perhaps. On the other hand I think it might be better to replace Twisted's
> own documentation with a link to zope's, or at least put the link at the
> top and say "read this before reading our examples about adaptation." We'll
> see if such a patch receives any love.
>
>
> Please direct my attention to it when one exists :).
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160726/a9e58af9/attachment-0002.html>

From rodrigc at crodrigues.org  Tue Jul 26 20:19:30 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 26 Jul 2016 19:19:30 -0700
Subject: [Twisted-Python] Fixes for Twisted bindings in M2Crypto
Message-ID: <CAG=rPVejnWDK9g8vQRqBuBPCWcqLFruSYEetc=MoN7938yx2wA@mail.gmail.com>

On Tue, Jul 26, 2016 at 8:47 AM, Matěj Cepl <mcepl at cepl.eu> wrote:

>
> I believe I have fixed all I can do without actually understanding Twisted
> in
> https://gitlab.com/mcepl/m2crypto/commit/6cd5f87b31e50016ebb7e44f3f2ae46610bc24e0.
> So now, if Twisted is so transparent and perfectly understandable, could
> you please suggest, what I do wrong, that the test ends in the endless loop
> (https://travis-ci.org/mcepl/M2Crypto/builds/147175901)?
>
>

In your initial e-mail, it would have been useful if you could have
provided reproduction steps
for your problem.

Can you provide reproduction steps?

Since I wasn't sure, I took a guess.

I did the following inside a Python 3.6 virtual environment under OS X:

git clone https://gitlab.com/mcepl/m2crypto.git m2crypto_test
cd m2crypto_test
git checkout python3
python setup.py build --openssl=/usr/local/opt/openssl
python setup.py bdist
python setup.py develop

py.test -v -s -k test_twisted_wrapper tests/test_ssl.py

I was able to reproduce the problem with something looping around:

DEBUG:_encrypt:self.data = "b'GET / HTTP/1.0\n\n\r\n'"
DEBUG:_decrypt:self.encrypted = "b''"
DEBUG:_encrypt:self.data = "b'GET / HTTP/1.0\n\n\r\n'"
DEBUG:_decrypt:self.encrypted = "b''"
DEBUG:_encrypt:self.data = "b'GET / HTTP/1.0\n\n\r\n'"
DEBUG:_decrypt:self.encrypted = "b''"
DEBUG:_encrypt:self.data = "b'GET / HTTP/1.0\n\n\r\n'"
DEBUG:_decrypt:self.encrypted = "b''"

I took a look in the M2Crypto code which interfaces with
Twisted, and found that the dataReceived() loop was never terminating
because dataReceived() takes bytes, but the code was
comparing to an emptry str.  So, the loop was never terminating.

I fixed this and other problems, and now the test_twisted_wrapper
passes on Python 3.  I submitted this merge request:

https://gitlab.com/mcepl/m2crypto/merge_requests/3/commits


While I was looking at the code, I also saw that the make_certs.py
utility does not work on Python 3.

I fixed that, and submitted this merge request:

https://gitlab.com/mcepl/m2crypto/merge_requests/4/commits

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160726/ff9caa33/attachment-0002.html>

From jlitzingerdev at gmail.com  Wed Jul 27 00:00:07 2016
From: jlitzingerdev at gmail.com (Jason Litzinger)
Date: Wed, 27 Jul 2016 00:00:07 -0600
Subject: [Twisted-Python] RFC: IPv6 multicast join/ticket 6597
In-Reply-To: <4608F909-EE03-401B-A898-BAC3D3CBB35B@twistedmatrix.com>
References: <20160726044330.GA8172@jlitzing-dell>
 <4608F909-EE03-401B-A898-BAC3D3CBB35B@twistedmatrix.com>
Message-ID: <20160727060007.GA3076@jlitzing-dell>

> 
> Thanks for taking this up!
No problem, do I need to reflect anything in the Ticket to indicate I'm
looking at it?
> 
> 'twisted.internet.udp', as an importable module; not 'udp' as a feature of Twisted (or of the Internet, for that matter).  
My question was poorly phrased, I assumed that it was the module that
was problematic, and wondered if anyone was working on an alternative
where this is better suited.

> 
> We have explicitly avoided adding IPv6 name resolution to the reactor because the reactor's API for name resolution is fundamentally the wrong shape for IPv6.  If you want to add the ability to resolve IPv6 names to the reactor itself, please see this ticket: https://twistedmatrix.com/trac/ticket/4362 <https://twistedmatrix.com/trac/ticket/4362>
> 
> For the purposes of this ticket alone, you should probably just skip resolution in _joinAddr1 if resolution is 

I assume you mean skip resolution in joinGroup as well?  That's the only
way to avoid resolve completely.

Additionally, any objections to me updating setTTL in this patch?  It's
pretty common to set the hop limit when doing a multicast.  Not
required, but common.
> 
> Testing multicast is ... challenging.  I barely have any idea how to set up a test environment for IPv4, and no idea what to do for IPv6.  If you can speak to this in your tests (and hopefully docs as well) that would be super helpful.
> 
Indeed.  I have an interest beyond the scope of this change so I'll see
what I can do/find.

Thanks!
-Jason Litzinger



From glyph at twistedmatrix.com  Wed Jul 27 03:04:31 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 27 Jul 2016 02:04:31 -0700
Subject: [Twisted-Python] txtorcon 0.15.0
In-Reply-To: <86eg6g0yer.fsf@atlantis.meejah.ca>
References: <86eg6g0yer.fsf@atlantis.meejah.ca>
Message-ID: <F4AB21C7-EFC5-4FFC-85A3-287D181CDC1A@twistedmatrix.com>


> On Jul 26, 2016, at 4:31 PM, meejah <meejah at meejah.ca <mailto:meejah at meejah.ca>> wrote:
> 
> I'm happy to announce txtorcon 0.15.0:


Awesome, Meejah!  Keep up the good work :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160727/d809cdd4/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Jul 27 03:14:58 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 27 Jul 2016 02:14:58 -0700
Subject: [Twisted-Python] RFC: IPv6 multicast join/ticket 6597
In-Reply-To: <20160727060007.GA3076@jlitzing-dell>
References: <20160726044330.GA8172@jlitzing-dell>
 <4608F909-EE03-401B-A898-BAC3D3CBB35B@twistedmatrix.com>
 <20160727060007.GA3076@jlitzing-dell>
Message-ID: <28A3C345-0F54-452F-8CA1-901D8E5F839C@twistedmatrix.com>


> On Jul 26, 2016, at 11:00 PM, Jason Litzinger <jlitzingerdev at gmail.com> wrote:
> 
>> 
>> Thanks for taking this up!
> No problem, do I need to reflect anything in the Ticket to indicate I'm
> looking at it?

Nothing specific, although any conclusions drawn on the mailing list, or any specific thoughts you have about how you're going to proceed, are always helpful to record on the ticket for future reference.  Even if you think you're going to get it done in the next couple of days, chances are you'll take an 18 month hiatus in the middle and it's always helpful to have those notes to come back to :).

>> 'twisted.internet.udp', as an importable module; not 'udp' as a feature of Twisted (or of the Internet, for that matter).  
> My question was poorly phrased, I assumed that it was the module that
> was problematic, and wondered if anyone was working on an alternative
> where this is better suited.

The module's implementation is actually fine; the only problem is that it's exposed to third-party applications, and that there are some things that those applications can't achieve without it being so exposed.  We need to make it private, but first, we need to address all the issues like this :).

>> We have explicitly avoided adding IPv6 name resolution to the reactor because the reactor's API for name resolution is fundamentally the wrong shape for IPv6.  If you want to add the ability to resolve IPv6 names to the reactor itself, please see this ticket: https://twistedmatrix.com/trac/ticket/4362 <https://twistedmatrix.com/trac/ticket/4362>
>> 
>> For the purposes of this ticket alone, you should probably just skip resolution in _joinAddr1 if resolution is 
> 
> I assume you mean skip resolution in joinGroup as well?  That's the only
> way to avoid resolve completely.

Right, I meant to check isIPv6Address in joinGroup and everything it calls.

> Additionally, any objections to me updating setTTL in this patch?  It's
> pretty common to set the hop limit when doing a multicast.  Not
> required, but common.

Smaller patches are better.  What do you want to 'update' about it?  If it's an independent change, just submit a different ticket and it will probably land quickly if it's an obvious fix.

>> Testing multicast is ... challenging.  I barely have any idea how to set up a test environment for IPv4, and no idea what to do for IPv6.  If you can speak to this in your tests (and hopefully docs as well) that would be super helpful.
>> 
> Indeed.  I have an interest beyond the scope of this change so I'll see
> what I can do/find.

If you have an interest in UDP generally, a fix for this horribly embarrassing and probably pretty important bug <https://twistedmatrix.com/trac/ticket/2790 <https://twistedmatrix.com/trac/ticket/2790>> would be (A) super appreciated, and (B) really straightforward (the ambivalence on the ticket is all about how to test it "realistically", but a straightforward unit test with a fake socket would probably be fine).

Thanks again,

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160727/627ead66/attachment-0002.html>

From jlitzingerdev at gmail.com  Wed Jul 27 21:44:41 2016
From: jlitzingerdev at gmail.com (Jason Litzinger)
Date: Wed, 27 Jul 2016 21:44:41 -0600
Subject: [Twisted-Python] RFC: IPv6 multicast join/ticket 6597
In-Reply-To: <28A3C345-0F54-452F-8CA1-901D8E5F839C@twistedmatrix.com>
References: <20160726044330.GA8172@jlitzing-dell>
 <4608F909-EE03-401B-A898-BAC3D3CBB35B@twistedmatrix.com>
 <20160727060007.GA3076@jlitzing-dell>
 <28A3C345-0F54-452F-8CA1-901D8E5F839C@twistedmatrix.com>
Message-ID: <20160728034441.GA3911@jlitzing-dell>

> Nothing specific, although any conclusions drawn on the mailing list, or any specific thoughts you have about how you're going to proceed, are always helpful to record on the ticket for future reference.  Even if you think you're going to get it done in the next couple of days, chances are you'll take an 18 month hiatus in the middle and it's always helpful to have those notes to come back to :).
> 
Agree completely, done.

> Smaller patches are better.  What do you want to 'update' about it?  If it's an independent change, just submit a different ticket and it will probably land quickly if it's an obvious fix.
It isn't so much update as I think it is equally broken for IPv6.  If I'm not misunderstanding my reference (UNPv3), socket.IP_MULTICAST_TTL is specific to IPv4, while IPV6_MULTICAST_HOPS is required for v6.  I attempted to use the former in some IPv6 test code and, surprise surprise, inspecting the IP header revealed it didn't work.  Using the latter worked.

Regardless, I agree, smaller patches keep things sane, I'll put this on the queue after joinGroup.

Thanks,
-Jason



From jlitzingerdev at gmail.com  Wed Jul 27 22:39:18 2016
From: jlitzingerdev at gmail.com (Jason Litzinger)
Date: Wed, 27 Jul 2016 22:39:18 -0600
Subject: [Twisted-Python] RFC: IPv6 multicast join/ticket 6597
In-Reply-To: <4608F909-EE03-401B-A898-BAC3D3CBB35B@twistedmatrix.com>
References: <20160726044330.GA8172@jlitzing-dell>
 <4608F909-EE03-401B-A898-BAC3D3CBB35B@twistedmatrix.com>
Message-ID: <20160728043918.GA4671@jlitzing-dell>

> > +    def _joinAddrIPv6(self, interface, addr, join):
> > +        addr = socket.inet_pton(socket.AF_INET6, addr)
> > +        interface = socket.inet_pton(socket.AF_INET6, interface)
> > +        if join:
> > +            cmd = socket.IPV6_JOIN_GROUP
> > +        else:
> > +            cmd = socket.IPV6_LEAVE_GROUP
> > +        try:
> > +            self.socket.setsockopt(socket.IPPROTO_IPV6, cmd, addr + interface)
> > +        except socket.error as e:
> > +            return failure.Failure(error.MulticastJoinError(addr, interface, *e.args))
To make sure its out there, the above is completely wrong.  It happens
to work, but is wrong.  The argument to setsockopt for v6 is very
different from v4.  The above happens to work with "::" as the
interface, but is very very wrong.

-Jason



From wolfgang.kde at rohdewald.de  Thu Jul 28 07:49:28 2016
From: wolfgang.kde at rohdewald.de (Wolfgang Rohdewald)
Date: Thu, 28 Jul 2016 15:49:28 +0200
Subject: [Twisted-Python] [Twisted] #7598: Port twisted.spread.pb to
	Python3
In-Reply-To: <068.60dd16daf365e1c4d37c98004bda68bc@twistedmatrix.com>
References: <053.3921990c4e23d1c358e60a8157e4dfe8@twistedmatrix.com>
 <068.60dd16daf365e1c4d37c98004bda68bc@twistedmatrix.com>
Message-ID: <6176651.KYjNDdrXcG@skull>

Am Donnerstag, 28. Juli 2016, 11:27:15 CEST schrieb Twisted:
> The branch there ports PB to Python 3. There might still be a few coverage
> issues, and since I trust codecov, I'm not entiirely sure.  But this is
> definitely worth at least a first pass review at this point.

Great news!

I should be able to do some testing next week

--
Wolfgang



From commercials24 at yahoo.de  Fri Jul 29 12:13:16 2016
From: commercials24 at yahoo.de (steven meier)
Date: Fri, 29 Jul 2016 20:13:16 +0200
Subject: [Twisted-Python] running code on its own and importing,
 howto install  a different reactor?
Message-ID: <1469815996.6151.50.camel@yahoo.de>

hi,

i ran into this issue, i can run the code on its own "python
working_code.py", but i cant import it...how do you fit the reactor in
this scenario?




    python main_code.py
    Unhandled error in Deferred:
     
     
    Traceback (most recent call last):
      File
"/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py", line 1274, in unwindGenerator
        return _inlineCallbacks(None, gen, Deferred())
      File
"/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py", line 1128, in _inlineCallbacks
        result = g.send(result)
      File
"/home/julius/code/python/qt5-python2.x/example/working_code.py", line
7, in print_it
        arg = yield terrific_method()
      File
"/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py", line 1274, in unwindGenerator
        return _inlineCallbacks(None, gen, Deferred())
    --- <exception caught here> ---
      File
"/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py", line 1128, in _inlineCallbacks
        result = g.send(result)
      File
"/home/julius/code/python/qt5-python2.x/example/working_code.py", line
14, in terrific_method
        reactor.callLater(2, d.callback, 2)
    exceptions.NameError: global name 'reactor' is not defined
     
     
     
    



 
   cat main_code.py
   


    import qt5reactor
    qt5reactor.install()
     
    from twisted.internet import reactor
    from working_code import print_it
     
     
    print_it()
     
     


    cat working_code.py
    
    
    from twisted.internet.defer import inlineCallbacks, Deferred,
returnValue
     
    @inlineCallbacks
    def print_it():
        arg = yield terrific_method()
        print arg
     
     
    @inlineCallbacks
    def terrific_method():
        d = Deferred()
        reactor.callLater(2, d.callback, 2)
        result = yield d
        returnValue(result)
     
     
     
     
    if __name__ == '__main__':
        import qt5reactor
        qt5reactor.install()
        from twisted.internet import reactor
        reactor.callWhenRunning(print_it)
        reactor.run()




From sank.daniel at gmail.com  Fri Jul 29 12:27:54 2016
From: sank.daniel at gmail.com (Daniel Sank)
Date: Fri, 29 Jul 2016 11:27:54 -0700
Subject: [Twisted-Python] running code on its own and importing,
 howto install a different reactor?
In-Reply-To: <1469815996.6151.50.camel@yahoo.de>
References: <1469815996.6151.50.camel@yahoo.de>
Message-ID: <CAKN9TD+Yqa4FPJe1OTrk5ihktZRB4Hbw5+9fxSwFLHuu3AjFAw@mail.gmail.com>

Looks like the problem is that the twisted.internet.reactor is imported
inside a block guarded by

if __name__ == '__main__'

When you import working_code that block doesn't run, because of the guard,
so terrific_method tries to access "reactor" which doesn't exist. I guess
your question is really how to get access to the reactor in
working_code.py, since you can't import it in the top level namespace
because you have ti install the qt5reactor *before* importing
twisted.internet.reactor (right?).

I don't know if there's a generally advised way of handling this, but I
would simply put all the stuff in the guarded block in its own file and
make sure to install the qt5reactor before importing anything else.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160729/06286f9c/attachment-0002.html>

From meejah at meejah.ca  Fri Jul 29 13:11:56 2016
From: meejah at meejah.ca (meejah)
Date: Fri, 29 Jul 2016 23:11:56 +0400
Subject: [Twisted-Python] running code on its own and importing,
	howto install a different reactor?
In-Reply-To: <CAKN9TD+Yqa4FPJe1OTrk5ihktZRB4Hbw5+9fxSwFLHuu3AjFAw@mail.gmail.com>
 (Daniel Sank's message of "Fri, 29 Jul 2016 11:27:54 -0700")
References: <1469815996.6151.50.camel@yahoo.de>
 <CAKN9TD+Yqa4FPJe1OTrk5ihktZRB4Hbw5+9fxSwFLHuu3AjFAw@mail.gmail.com>
Message-ID: <86shusz2bn.fsf@atlantis.meejah.ca>


I think the "recommended" way to get access to a reactor instance is to
pass it in to methods that require it.

While this can sometimes seem tedious it a) helps testing (because now
you can easily pass a fake reactor object like Clock or a Mock instance)
and b) shows you (and your users) which methods are (or might-be) async.

So, try a signature like "def terrific_method(reactor):" instead. Now
when you're writing tests, you can do this:

    fake_reactor = Clock()
    d = terrific_method(fake_reactor)
    fake_reactor.advance(2)
    # etc.

-- 
meejah



From commercials24 at yahoo.de  Fri Jul 29 13:42:37 2016
From: commercials24 at yahoo.de (steven meier)
Date: Fri, 29 Jul 2016 21:42:37 +0200
Subject: [Twisted-Python] running code on its own and importing,
 howto install a different reactor?
In-Reply-To: <86shusz2bn.fsf@atlantis.meejah.ca>
References: <1469815996.6151.50.camel@yahoo.de>
 <CAKN9TD+Yqa4FPJe1OTrk5ihktZRB4Hbw5+9fxSwFLHuu3AjFAw@mail.gmail.com>
 <86shusz2bn.fsf@atlantis.meejah.ca>
Message-ID: <1469821357.6151.55.camel@yahoo.de>

On Fri, 2016-07-29 at 23:11 +0400, meejah wrote:
> I think the "recommended" way to get access to a reactor instance is to
> pass it in to methods that require it.
> 
> While this can sometimes seem tedious it a) helps testing (because now
> you can easily pass a fake reactor object like Clock or a Mock instance)
> and b) shows you (and your users) which methods are (or might-be) async.
> 
> So, try a signature like "def terrific_method(reactor):" instead. Now
> when you're writing tests, you can do this:
> 
>     fake_reactor = Clock()
>     d = terrific_method(fake_reactor)
>     fake_reactor.advance(2)
>     # etc.
> 


Ah yes, you answered a question of mine not so long ago earlier and told
me exactly that....sorry forgot.

workig  example if anybody ever digs this out:

i modified the code like this:




working_code.py
from twisted.internet.defer import inlineCallbacks, Deferred,
returnValue

@inlineCallbacks
def print_it(reactor):
    arg = yield terrific_method(reactor)
    print arg


@inlineCallbacks
def terrific_method(reactor):
    d = Deferred()
    reactor.callLater(2, d.callback, 2)
    result = yield d
    returnValue(result)




if __name__ == '__main__':
    import qt5reactor
    qt5reactor.install()
    from twisted.internet import reactor
    reactor.callWhenRunning(print_it, reactor)
    reactor.run()





main_code.py:
import qt5reactor
qt5reactor.install()

from twisted.internet import reactor
from working_code import print_it


print_it(reactor)
reactor.run()




now on to some tests...




From meejah at meejah.ca  Fri Jul 29 13:59:00 2016
From: meejah at meejah.ca (meejah)
Date: Fri, 29 Jul 2016 23:59:00 +0400
Subject: [Twisted-Python] running code on its own and importing,
	howto install a different reactor?
In-Reply-To: <1469821357.6151.55.camel@yahoo.de> (steven meier's message of
 "Fri, 29 Jul 2016 21:42:37 +0200")
References: <1469815996.6151.50.camel@yahoo.de>
 <CAKN9TD+Yqa4FPJe1OTrk5ihktZRB4Hbw5+9fxSwFLHuu3AjFAw@mail.gmail.com>
 <86shusz2bn.fsf@atlantis.meejah.ca>
 <1469821357.6151.55.camel@yahoo.de>
Message-ID: <86eg6cz057.fsf@atlantis.meejah.ca>

steven meier <commercials24 at yahoo.de> writes:

> if __name__ == '__main__':
>     import qt5reactor
>     qt5reactor.install()
>     from twisted.internet import reactor
>     reactor.callWhenRunning(print_it, reactor)
>     reactor.run()

For "client-style" things (I guess I just mean "something that exits"),
there's even a utility function that calls some method you provide with
the reactor as the first argument, and arranges for reactor.stop() to
get called exactly once (when the Deferred returned by your method
fires).

    import qt5reactor
    qt5reactor.install()
    from twisted.internet.task import react

    if __name__ == '__main__':
        react(print_it)

-- 
meejah



From commercials24 at yahoo.de  Sat Jul 30 06:03:43 2016
From: commercials24 at yahoo.de (steven meier)
Date: Sat, 30 Jul 2016 14:03:43 +0200
Subject: [Twisted-Python] adding reactor as argument to getPage()?
In-Reply-To: <CAKN9TD+Yqa4FPJe1OTrk5ihktZRB4Hbw5+9fxSwFLHuu3AjFAw@mail.gmail.com>
References: <1469815996.6151.50.camel@yahoo.de>
 <CAKN9TD+Yqa4FPJe1OTrk5ihktZRB4Hbw5+9fxSwFLHuu3AjFAw@mail.gmail.com>
Message-ID: <1469880223.6151.72.camel@yahoo.de>

hi,


after my last question which was answered with:
...the reactor should be passed in by the user...

i ran into getPage(), the
file: ./lib/python2.7/site-packages/twisted/web/client.py
which contains getPage() imports the reactor at the top.

it can be easily changed to add a argument to getPage() which passes it
down to _makeGetter...
then just comment out the import at the top and getPage() works when
given a reactor as argument.

probably breaking a lot of other code in that file.

since getPage() is a method thats probably used a lot...did i understand
the passing of the reactor or i did my mind go overboard?


as a reminder: i want to use the qt5reactor to get some gui output





From glyph at twistedmatrix.com  Sat Jul 30 13:38:10 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 30 Jul 2016 12:38:10 -0700
Subject: [Twisted-Python] adding reactor as argument to getPage()?
In-Reply-To: <1469880223.6151.72.camel@yahoo.de>
References: <1469815996.6151.50.camel@yahoo.de>
 <CAKN9TD+Yqa4FPJe1OTrk5ihktZRB4Hbw5+9fxSwFLHuu3AjFAw@mail.gmail.com>
 <1469880223.6151.72.camel@yahoo.de>
Message-ID: <B83C9448-6884-48CD-A26E-D89DD5E65580@twistedmatrix.com>


> On Jul 30, 2016, at 5:03 AM, steven meier <commercials24 at yahoo.de> wrote:
> 
> hi,
> 
> 
> after my last question which was answered with:
> ...the reactor should be passed in by the user...
> 
> i ran into getPage(), the
> file: ./lib/python2.7/site-packages/twisted/web/client.py
> which contains getPage() imports the reactor at the top.
> 
> it can be easily changed to add a argument to getPage() which passes it
> down to _makeGetter...
> then just comment out the import at the top and getPage() works when
> given a reactor as argument.
> 
> probably breaking a lot of other code in that file.
> 
> since getPage() is a method thats probably used a lot...did i understand
> the passing of the reactor or i did my mind go overboard?
> 
> 
> as a reminder: i want to use the qt5reactor to get some gui output

Don't use getPage.  You want Agent.request <https://twistedmatrix.com/documents/16.3.0/api/twisted.web.client.Agent.html#request>, or possibly treq.get <http://treq.readthedocs.org>.  getPage has a lot of problems and will be deprecated in a future release.

-glyph


