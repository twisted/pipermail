From burslem2001 at yahoo.com  Thu Oct  1 10:32:15 2009
From: burslem2001 at yahoo.com (gary clark)
Date: Thu, 1 Oct 2009 07:32:15 -0700 (PDT)
Subject: [Twisted-Python] Twisted and db table changes
In-Reply-To: <522237.35121.qm@web112510.mail.gq1.yahoo.com>
Message-ID: <789701.43712.qm@web112519.mail.gq1.yahoo.com>

Thanks for the information, thats what I need to use in this case

"wisted.internet.task.LoopingCall".


Great support.

Much appreciated,
Garyc



From burslem2001 at yahoo.com  Thu Oct  1 13:53:56 2009
From: burslem2001 at yahoo.com (gary clark)
Date: Thu, 1 Oct 2009 10:53:56 -0700 (PDT)
Subject: [Twisted-Python] XML parsing on twisted
In-Reply-To: <789701.43712.qm@web112519.mail.gq1.yahoo.com>
Message-ID: <635103.87666.qm@web112510.mail.gq1.yahoo.com>

Hello,

Probably a pretty standard question. However what are recommended mechanics of parsing XML on twisted? I have a humongous string that needs to be parsed and pushed into a database in the right columns.

Much appreciated in advance,
Garyc




From vpogrebi at verizon.net  Thu Oct  1 14:17:07 2009
From: vpogrebi at verizon.net (Valeriy Pogrebitskiy)
Date: Thu, 01 Oct 2009 14:17:07 -0400
Subject: [Twisted-Python] Use of 'twistd' utility with command-line arguments
Message-ID: <F4DB8A39-ACA1-4F4E-8A51-04424AF928BE@verizon.net>

I came across some problem using 'twistd' utility - that I would not  
have expected from it. The problem is - using 'twistd' to start  
application that requires command-line arguments. In other words, I  
would expect that 'twistd' passes command-line arguments to Python  
application - just as Python does.

But... I get following error:

Usage: twistd [options]
Options:
       --savestats        save the Stats object rather than the text  
output of
                          the profiler.
   -o, --no_save          do not save state on shutdown
   -e, --encrypted        The specified tap/aos/xml file is encrypted.
   .........................
   .........................

/usr/bin/twistd: option -a not recognized


when application is started either as 'twistd -y <fileName.py>' or  
'twistd --file <fileName.py>' followed by a list of command-line  
arguments

My question is: how is it possible to use 'twistd' to start  
applications that do require command-line arguments? Does anyone have  
suggestions?

In other words, I want to be able to start application using 'twistd'  
- just as it would have been started using standard Python:

 > python    <fileName.py> [argList]
 > twistd -y <fileName.py> [argList]



Second question to Twisted development team: how such an important  
case has slipped attention? I suggest this to be added to bug fix  
requests, with high priority.

Kind regards,

Valeriy Pogrebitskiy
vpogrebi at verizon.net




-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091001/c788ded5/attachment.htm 

From steve at divillo.com  Thu Oct  1 16:27:55 2009
From: steve at divillo.com (Steve)
Date: Thu, 01 Oct 2009 13:27:55 -0700
Subject: [Twisted-Python] Twisted and db table changes
Message-ID: <20091001132755.e13ae574f475ea337c2ec5b0e03ebbf3.e837c4e2b3.wbe@email02.secureserver.net>

If you are using PostgreSQL you can use this technique

http://www.divillo.com



-------- Original Message --------
Subject: Re: [Twisted-Python] Twisted and db table changes
From: Mark Visser <markv at lumierevfx.com>
Date: Tue, September 29, 2009 12:04 pm
To: Twisted general discussion <twisted-python at twistedmatrix.com>

gary clark wrote:
> Hello,
>
> I have a server that needs to track changes on a table database.
>
> When a table changes it needs the server accesses the table and send data out.
>
> Not sure what the best approach to do this in twisted. Do I create a thread in twisted and monitor for any changes in a table or can I create
> a callback method to be triggered when a change occurs to table.
> 
Check out twisted.internet.task.LoopingCall. It will run a callback 
periodically, during which you can poll for changes.


-- 
Mark Visser, Software Director
Lumi?re VFX
Email: markv at lumierevfx.com
Phone: +1-514-316-1080 x3030


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From glyph at twistedmatrix.com  Thu Oct  1 16:51:54 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 1 Oct 2009 16:51:54 -0400
Subject: [Twisted-Python] Twisted and db table changes
In-Reply-To: <20091001132755.e13ae574f475ea337c2ec5b0e03ebbf3.e837c4e2b3.wbe@email02.secureserver.net>
References: <20091001132755.e13ae574f475ea337c2ec5b0e03ebbf3.e837c4e2b3.wbe@email02.secureserver.net>
Message-ID: <d9047f780910011351m69e89217gbab67e0dd17a03a@mail.gmail.com>

On Thu, Oct 1, 2009 at 4:27 PM, Steve <steve at divillo.com> wrote:

> If you are using PostgreSQL you can use this technique
>
> http://www.divillo.com
>
>
This is very interesting, thanks for sharing!

However, whenever I see a Twisted program calling select()... especially
select() in a thread ;-) I wonder if things couldn't be made a bit simpler,
responsive, and performant by just asking the Twisted main loop to monitor
the file descriptor instead.  It looks like "psycho pig two" has the
functionality that you need.

(Are you planning to keep this technique described on the front of your
website indefinitely?  If not, a more durable link would be great :).)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091001/b05ea77b/attachment.htm 

From glyph at twistedmatrix.com  Thu Oct  1 16:55:34 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 1 Oct 2009 16:55:34 -0400
Subject: [Twisted-Python] Use of 'twistd' utility with command-line
	arguments
In-Reply-To: <F4DB8A39-ACA1-4F4E-8A51-04424AF928BE@verizon.net>
References: <F4DB8A39-ACA1-4F4E-8A51-04424AF928BE@verizon.net>
Message-ID: <d9047f780910011355r37419c68s5267212badde2fcc@mail.gmail.com>

On Thu, Oct 1, 2009 at 2:17 PM, Valeriy Pogrebitskiy
<vpogrebi at verizon.net>wrote:

> I came across some problem using 'twistd' utility - that I would not have
> expected from it. The problem is - using 'twistd' to start application that
> requires command-line arguments. In other words, I would expect that
> 'twistd' passes command-line arguments to Python application - just as
> Python does.
>

While this is a reasonable expectation, twistd does quite a lot and it
wouldn't be quite right to pass on all the arguments in a flat list the way
Python does.


> My question is: how is it possible to use 'twistd' to start applications
> that do require command-line arguments? Does anyone have suggestions?
>

twistd doesn't do this for scripts passed with the '-y' option.  Those are
supposed to be fully-formed configuration files; the options are present in
the file itself.

However, it's fairly straightforward to get what you want.  Instead of
writing a python configuration file, write a plug-in for twistd.  The
technique for doing so is documented here:

<http://twistedmatrix.com/projects/core/documentation/howto/tap.html>

Hope this helps.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091001/4e4c06c7/attachment.htm 

From itamar at itamarst.org  Thu Oct  1 17:01:11 2009
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 1 Oct 2009 17:01:11 -0400 (EDT)
Subject: [Twisted-Python] Use of 'twistd' utility with command-line
 arguments
In-Reply-To: <F4DB8A39-ACA1-4F4E-8A51-04424AF928BE@verizon.net>
References: <F4DB8A39-ACA1-4F4E-8A51-04424AF928BE@verizon.net>
Message-ID: <9004.63.107.91.99.1254430871.squirrel@webmail.zoteca.com>

> I came across some problem using 'twistd' utility - that I would not
> have expected from it. The problem is - using 'twistd' to start
> application that requires command-line arguments. In other words, I
> would expect that 'twistd' passes command-line arguments to Python
> application - just as Python does.
>
> But... I get following error:

...

You can do this with twistd plugins:
http://twistedmatrix.com/projects/core/documentation/howto/tap.html




From steve at divillo.com  Thu Oct  1 17:49:29 2009
From: steve at divillo.com (Steve)
Date: Thu, 01 Oct 2009 14:49:29 -0700
Subject: [Twisted-Python] Twisted and db table changes
Message-ID: <20091001144929.e13ae574f475ea337c2ec5b0e03ebbf3.aa4f487056.wbe@email02.secureserver.net>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091001/4514e1b2/attachment.htm 

From glyph at twistedmatrix.com  Thu Oct  1 17:53:24 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 1 Oct 2009 17:53:24 -0400
Subject: [Twisted-Python] Twisted and db table changes
In-Reply-To: <20091001144929.e13ae574f475ea337c2ec5b0e03ebbf3.aa4f487056.wbe@email02.secureserver.net>
References: <20091001144929.e13ae574f475ea337c2ec5b0e03ebbf3.aa4f487056.wbe@email02.secureserver.net>
Message-ID: <d9047f780910011453q3061e7e3kb055b9b57bdfa02f@mail.gmail.com>

On Thu, Oct 1, 2009 at 5:49 PM, Steve <steve at divillo.com> wrote:

> Thanks for the suggestion. I will look into replacing select but first I
> need to learn more about Twisted. I just discovered it a week or so ago.
>

In that case, welcome!

Probably the best route for you to take suggestions on making a ... shall we
say, twistier, async notify mechanism, would be for you to drop by the
#twisted IRC channel on freenode.net.  Off the top of my head I don't think
I know enough about Postgres to be more specific.


> I will probably change the main site. A more durable link would be
> http://www.divillo.com/asyncnotify.html
>

 Thanks.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091001/7b9475ad/attachment-0001.htm 

From burslem2001 at yahoo.com  Thu Oct  1 20:09:20 2009
From: burslem2001 at yahoo.com (gary clark)
Date: Thu, 1 Oct 2009 17:09:20 -0700 (PDT)
Subject: [Twisted-Python] Twisted and db table changes
In-Reply-To: <20091001144929.e13ae574f475ea337c2ec5b0e03ebbf3.aa4f487056.wbe@email02.secureserver.net>
Message-ID: <538272.73712.qm@web112503.mail.gq1.yahoo.com>

I'm building a website with twisted and pylons which I hope to release in December. I cant explain what the idea is, but I like python and the twisted site seems excellent. Smart guys, hopefully I can reciprocate one day.

Cheers,
Garyc

--- On Thu, 10/1/09, Steve <steve at divillo.com> wrote:

> From: Steve <steve at divillo.com>
> Subject: Re: [Twisted-Python] Twisted and db table changes
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Date: Thursday, October 1, 2009, 4:49 PM
> Thanks
> for the suggestion. I will look into replacing select but
> first I need to learn more about Twisted. I just discovered
> it a week or so ago.
> 
> I will probably change the main site. A more
> durable link would be http://www.divillo.com/asyncnotify.html
> 
> 
> 
> -------- Original Message --------
> 
> Subject: Re: [Twisted-Python] Twisted and db table changes
> 
> From: Glyph Lefkowitz <glyph at twistedmatrix.com>
> 
> Date: Thu, October 01, 2009 1:51 pm
> 
> To: Twisted general discussion
> <twisted-python at twistedmatrix.com>
> 
> 
> 
> On Thu, Oct 1, 2009 at 4:27 PM,
> Steve <steve at divillo.com>
> wrote:
>  If you are using PostgreSQL you
> can use this technique
>  
>  http://www.divillo.com
> 
> 
> This is very interesting, thanks for sharing!
> 
> However, whenever I see a Twisted program calling
> select()... especially select() in a thread ;-) I wonder if
> things couldn't be made a bit simpler, responsive, and
> performant by just asking the Twisted main loop to monitor
> the file descriptor instead.? It looks like
> "psycho pig two" has the functionality that you
> need.
>  
> (Are you planning to keep this technique described on the
> front of your website indefinitely?? If not, a more
> durable link would be great :).)
> 
> 
> _______________________________________________
> 
> Twisted-Python mailing list
> 
> Twisted-Python at twistedmatrix.com
> 
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 
>  
> 
> 
> -----Inline Attachment Follows-----
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From steve at divillo.com  Thu Oct  1 20:32:59 2009
From: steve at divillo.com (Steve)
Date: Thu, 01 Oct 2009 17:32:59 -0700
Subject: [Twisted-Python] Twisted and db table changes
In-Reply-To: <d9047f780910011453q3061e7e3kb055b9b57bdfa02f@mail.gmail.com>
References: <20091001144929.e13ae574f475ea337c2ec5b0e03ebbf3.aa4f487056.wbe@email02.secureserver.net>
	<d9047f780910011453q3061e7e3kb055b9b57bdfa02f@mail.gmail.com>
Message-ID: <1254443579.9474.42.camel@nori.divillo.com>

On Thu, 2009-10-01 at 17:53 -0400, Glyph Lefkowitz wrote:
> On Thu, Oct 1, 2009 at 5:49 PM, Steve <steve at divillo.com> wrote:
>         Thanks for the suggestion. I will look into replacing select
>         but first I need to learn more about Twisted. I just
>         discovered it a week or so ago.
>         
> 
> In that case, welcome!

So I was in this bookstore last weekend looking at the Python section
for nothing in particular. This O'reilly book called Twisted jumped out
at me because of the name so I started leafing through it. "Cool stuff"
I thought to myself. I look at the publication date and see that it is
pretty old. I ask the store clerk to check and see if there is a newer
edition. There wasn't so I went ahead and bought the book.

I thought your name was familiar for some reason! After picking up the
book again tonight I realized why :-)

Excellent work and probably the best name for a communications framework.

I do have a question about the book. Is there anything obsolete about
it? Anything I should watch out for?

Thanks!




From rutt.4 at osu.edu  Thu Oct  1 22:21:07 2009
From: rutt.4 at osu.edu (Benjamin Rutt)
Date: Thu, 1 Oct 2009 22:21:07 -0400
Subject: [Twisted-Python] getPeer() inside conch
In-Reply-To: <d9047f780909291948n5e433b54l6b4a5cf1b82ec831@mail.gmail.com>
References: <68f3f1f70909281710p1ddc3a47l134208c06b680cdb@mail.gmail.com>
	<d9047f780909282258v167e852cl76105ba92adb976a@mail.gmail.com>
	<68f3f1f70909291616tc8c23c3t75de943b725a9b21@mail.gmail.com>
	<d9047f780909291948n5e433b54l6b4a5cf1b82ec831@mail.gmail.com>
Message-ID: <68f3f1f70910011921h1e834454sa4f0b3701fafca61@mail.gmail.com>

(A/B) it looks like the SSHChannel implementation of getPeer() is faulty.
If I change my two-line implementation of getPeer() inside
SSHSessionProcessProtocol to simply 'return self.session.getPeer()', I get:

  File
"/home/ruttbe/dev/python/twisted-8.2.0-inst/lib/python/twisted/conch/ssh/session.py",
line 216, in getPeer
    return self.session.getPeer()
  File
"/home/ruttbe/dev/python/twisted-8.2.0-inst/lib/python/twisted/conch/ssh/channel.py",
line 261, in getPeer
    return('SSH', )+self.conn.transport.getPeer()
AttributeError: SSHServerTransport instance has no attribute 'getPeer'

(C) regarding adding a test, which file do you think would be suitable
here?  something in the twisted/test dir?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091001/a8a4cc21/attachment.htm 

From glyph at twistedmatrix.com  Thu Oct  1 22:53:05 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 1 Oct 2009 22:53:05 -0400
Subject: [Twisted-Python] getPeer() inside conch
In-Reply-To: <68f3f1f70910011921h1e834454sa4f0b3701fafca61@mail.gmail.com>
References: <68f3f1f70909281710p1ddc3a47l134208c06b680cdb@mail.gmail.com>
	<d9047f780909282258v167e852cl76105ba92adb976a@mail.gmail.com>
	<68f3f1f70909291616tc8c23c3t75de943b725a9b21@mail.gmail.com>
	<d9047f780909291948n5e433b54l6b4a5cf1b82ec831@mail.gmail.com>
	<68f3f1f70910011921h1e834454sa4f0b3701fafca61@mail.gmail.com>
Message-ID: <d9047f780910011953s5bdefa39s22697cd15639954c@mail.gmail.com>

On Thu, Oct 1, 2009 at 10:21 PM, Benjamin Rutt <rutt.4 at osu.edu> wrote:

> (A/B) it looks like the SSHChannel implementation of getPeer() is faulty.
> If I change my two-line implementation of getPeer() inside
> SSHSessionProcessProtocol to simply 'return self.session.getPeer()', I get:
>
>   File
> "/home/ruttbe/dev/python/twisted-8.2.0-inst/lib/python/twisted/conch/ssh/session.py",
> line 216, in getPeer
>     return self.session.getPeer()
>   File
> "/home/ruttbe/dev/python/twisted-8.2.0-inst/lib/python/twisted/conch/ssh/channel.py",
> line 261, in getPeer
>     return('SSH', )+self.conn.transport.getPeer()
> AttributeError: SSHServerTransport instance has no attribute 'getPeer'
>

OK, I give up :).  Looks like that is pretty clearly a bug, though.


> (C) regarding adding a test, which file do you think would be suitable
> here?  something in the twisted/test dir?
>

I am not sure which exact file, but something of the form
twisted/conch/test/test_<something>.py

Paul Swartz (z3p) should really weigh in on this.  You can find him on IRC
most days, although hopefully he's reading the mailing list :).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091001/90851e55/attachment.htm 

From twisted at ralphm.ik.nu  Fri Oct  2 03:38:25 2009
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Fri, 02 Oct 2009 09:38:25 +0200
Subject: [Twisted-Python] twisted-wave?
In-Reply-To: <4A8EBFDF.6050602@nasa.gov>
References: <4A8EBFDF.6050602@nasa.gov>
Message-ID: <1254469105.2668.18.camel@dwaal>

On Fri, 2009-08-21 at 11:40 -0400, Stephen Waterbury wrote:
> Just curious what the twisted minions think of google wave
> and whether anyone is considering or working on a twisted
> implementation of the federation protocol,
> <http://www.waveprotocol.org/draft-protocol-spec>.

In general, implementing the protocol is the easy part. It is 'just'
XMPP and Twisted has support for that. It uses the XMPP Publish
Subscribe extension protocol [1], for which Wokkel [2] has extensive
support that should move to Twisted proper.

The thing that is harder is interpreting all the commands and applying
the Operational Transformation [1] algorithms that are communicated
throught the rather easy federation protocol. Oh, and use Protocol
Buffers, of course.

ralphm

[1] http://xmpp.org/extensions/xep-0060.html
[2] http://wokkel.ik.nu/
[3] http://www.waveprotocol.org/whitepapers/operational-transform





From lvh at laurensvh.be  Fri Oct  2 03:50:09 2009
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Fri, 2 Oct 2009 09:50:09 +0200
Subject: [Twisted-Python] twisted-wave?
In-Reply-To: <1254469105.2668.18.camel@dwaal>
References: <4A8EBFDF.6050602@nasa.gov> <1254469105.2668.18.camel@dwaal>
Message-ID: <cedc0c090910020050i176d5b44k809560d073bf7f97@mail.gmail.com>

If anyone starts doing serious stuff with this, feel free to let me
know, I might be able to help :-) Received an invite for Google Wave,
but unsure if it's going to be a second GMail again (invites are
pretty useless when everyone has a million of them)...

On Fri, Oct 2, 2009 at 9:38 AM, Ralph Meijer <twisted at ralphm.ik.nu> wrote:
> On Fri, 2009-08-21 at 11:40 -0400, Stephen Waterbury wrote:
>> Just curious what the twisted minions think of google wave
>> and whether anyone is considering or working on a twisted
>> implementation of the federation protocol,
>> <http://www.waveprotocol.org/draft-protocol-spec>.
>
> In general, implementing the protocol is the easy part. It is 'just'
> XMPP and Twisted has support for that. It uses the XMPP Publish
> Subscribe extension protocol [1], for which Wokkel [2] has extensive
> support that should move to Twisted proper.
>
> The thing that is harder is interpreting all the commands and applying
> the Operational Transformation [1] algorithms that are communicated
> throught the rather easy federation protocol. Oh, and use Protocol
> Buffers, of course.
>
> ralphm
>
> [1] http://xmpp.org/extensions/xep-0060.html
> [2] http://wokkel.ik.nu/
> [3] http://www.waveprotocol.org/whitepapers/operational-transform
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From exarkun at twistedmatrix.com  Fri Oct  2 10:40:32 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 02 Oct 2009 14:40:32 -0000
Subject: [Twisted-Python] XML parsing on twisted
In-Reply-To: <635103.87666.qm@web112510.mail.gq1.yahoo.com>
References: <789701.43712.qm@web112519.mail.gq1.yahoo.com>
	<635103.87666.qm@web112510.mail.gq1.yahoo.com>
Message-ID: <20091002144032.1533.250771487.divmod.xquotient.554@localhost.localdomain>

On 1 Oct, 05:53 pm, burslem2001 at yahoo.com wrote:
>Hello,
>
>Probably a pretty standard question. However what are recommended 
>mechanics of parsing XML on twisted? I have a humongous string that 
>needs to be parsed and pushed into a database in the right columns.

Depending on how big the strings are, you may just want to parse them in 
the obvious way and then deal with the results.  If the strings are 
really epically big, then you have a few options.

You can handle them in another thread in the usual way. 
twisted.internet.threads.deferToThread gives you easy access to a 
threadpool which you can use for tasks like this.

You can hand them off to another process and deal with them there. 
Twisted has child process control built in, via reactor.spawnProcess. 
You may also find the Ampoule library (not part of Twisted) handy for 
this.

You can also do the XML parsing incrementally.  The Python standard 
library includes a SAX parser which you might want to use for this.  I 
think the newer APIs (eg etree) also support some forms of incremental 
parsing.  This should let you spread out the task of handling the XML 
over a longer period of time, thus avoiding blocking the reactor thread 
for unreasonable amounts of time.

Jean-Paul


From vitaly at synapticvision.com  Fri Oct  2 12:47:18 2009
From: vitaly at synapticvision.com (vitaly at synapticvision.com)
Date: Fri, 02 Oct 2009 12:47:18 -0400
Subject: [Twisted-Python] twisted python usage
Message-ID: <20091002124718.70485crfem4wdig4@216.129.205.5>

hi,
I'm trying to accomplish to work couple of CLI commands without luck.
http://twistedmatrix.com/projects/core/documentation/howto/options.html and  
test/test_usage.py were not really helpful.

Commands:
1.python test.py cmd1 -s 'dfsgdfg' -e 'sdfgdfg'
2.python test.py cmd2 -t 123
3.python test.py cmd3 cmd4 -t '2345ge' -y 'rebtr' cmd5 -p 'wgerg'

Appreciate any help.



From vpogrebi at verizon.net  Fri Oct  2 12:14:19 2009
From: vpogrebi at verizon.net (Valeriy Pogrebitskiy)
Date: Fri, 02 Oct 2009 12:14:19 -0400
Subject: [Twisted-Python] Use of 'twistd' utility with command-line
 arguments
In-Reply-To: <d9047f780910011355r37419c68s5267212badde2fcc@mail.gmail.com>
References: <F4DB8A39-ACA1-4F4E-8A51-04424AF928BE@verizon.net>
	<d9047f780910011355r37419c68s5267212badde2fcc@mail.gmail.com>
Message-ID: <93B58057-6954-4EB4-AA61-F8FD050A29A5@verizon.net>

Thank you!

I still disagree with the following statement:

> While this is a reasonable expectation, twistd does quite a lot and  
> it wouldn't be quite right to pass on all the arguments in a flat  
> list the way Python does.

Something can be done about that. One possible approach could be to  
use two argument lists (one - 'twistd' arguments, second -  
application's arguments) and enforce following rule(s):

- all arguments that follow after 'twistd' but before Python file name  
(*.py) are considered as 'twistd' arguments (loaded into <twistdArgs>  
list;
- all arguments that follow Python file name (*.py) are considered as  
Python application's arguments (loaded into <appArgs> list and get  
passed to that application)

Thus, it should be possible to execute following commands:

twistd <twistd_args> *.py <app_args>

Using this approach, it should be simple enough (at least - logically)  
to allow passing arguments to an application. Of course, this would  
also limit "duplicate" arguments (same argument appearing in both  
lists) - due to 'getopt' limitations... But if these rules and  
limitations are well documented - developers should be able to work  
around this problem.

I suggest that Twisted dev. team looks into implementing this...


Kind regards,

Valeriy Pogrebitskiy
vpogrebi at verizon.net




On Oct 1, 2009, at 4:55 PM, Glyph Lefkowitz wrote:

> On Thu, Oct 1, 2009 at 2:17 PM, Valeriy Pogrebitskiy <vpogrebi at verizon.net 
> > wrote:
> I came across some problem using 'twistd' utility - that I would not  
> have expected from it. The problem is - using 'twistd' to start  
> application that requires command-line arguments. In other words, I  
> would expect that 'twistd' passes command-line arguments to Python  
> application - just as Python does.
>
> While this is a reasonable expectation, twistd does quite a lot and  
> it wouldn't be quite right to pass on all the arguments in a flat  
> list the way Python does.
>
> My question is: how is it possible to use 'twistd' to start  
> applications that do require command-line arguments? Does anyone  
> have suggestions?
>
> twistd doesn't do this for scripts passed with the '-y' option.   
> Those are supposed to be fully-formed configuration files; the  
> options are present in the file itself.
>
> However, it's fairly straightforward to get what you want.  Instead  
> of writing a python configuration file, write a plug-in for twistd.   
> The technique for doing so is documented here:
>
> <http://twistedmatrix.com/projects/core/documentation/howto/tap.html>
>
> Hope this helps.
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091002/a1007c89/attachment.htm 

From listsin at integrateddevcorp.com  Fri Oct  2 13:18:56 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Fri, 2 Oct 2009 13:18:56 -0400
Subject: [Twisted-Python] Use of 'twistd' utility with command-line
	arguments
In-Reply-To: <93B58057-6954-4EB4-AA61-F8FD050A29A5@verizon.net>
References: <F4DB8A39-ACA1-4F4E-8A51-04424AF928BE@verizon.net>
	<d9047f780910011355r37419c68s5267212badde2fcc@mail.gmail.com>
	<93B58057-6954-4EB4-AA61-F8FD050A29A5@verizon.net>
Message-ID: <D904C397-5D35-4D55-9A7C-0A0414ED82E7@integrateddevcorp.com>


On Oct 2, 2009, at 12:14 PM, Valeriy Pogrebitskiy wrote:
>
> I suggest that Twisted dev. team looks into implementing this...

Since we're telling other people how to spend their time...I suggest  
that you supply a patch.

Thanks,

S

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091002/b63c1ce8/attachment.htm 

From exarkun at twistedmatrix.com  Fri Oct  2 13:23:06 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 02 Oct 2009 17:23:06 -0000
Subject: [Twisted-Python] Use of 'twistd' utility with
	command-line	arguments
In-Reply-To: <93B58057-6954-4EB4-AA61-F8FD050A29A5@verizon.net>
References: <F4DB8A39-ACA1-4F4E-8A51-04424AF928BE@verizon.net>
	<d9047f780910011355r37419c68s5267212badde2fcc@mail.gmail.com>
	<93B58057-6954-4EB4-AA61-F8FD050A29A5@verizon.net>
Message-ID: <20091002172306.1533.1914911860.divmod.xquotient.569@localhost.localdomain>

On 04:14 pm, vpogrebi at verizon.net wrote:
>Thank you!
>
>I still disagree with the following statement:
>>While this is a reasonable expectation, twistd does quite a lot and 
>>it wouldn't be quite right to pass on all the arguments in a flat 
>>list the way Python does.
>
>Something can be done about that. One possible approach could be to 
>use two argument lists (one - 'twistd' arguments, second - 
>application's arguments) and enforce following rule(s):

Given this:
>>However, it's fairly straightforward to get what you want.  Instead 
>>of writing a python configuration file, write a plug-in for twistd. 
>>The technique for doing so is documented here:

what is your motivation for seeking out this feature?

Also, Glyph didn't mention #1490, an open ticket describing yet another 
way twistd might be invoked which allows command line arguments to be 
passed to the application.

Jean-Paul


From glyph at twistedmatrix.com  Fri Oct  2 13:26:32 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 2 Oct 2009 13:26:32 -0400
Subject: [Twisted-Python] twisted python usage
In-Reply-To: <20091002124718.70485crfem4wdig4@216.129.205.5>
References: <20091002124718.70485crfem4wdig4@216.129.205.5>
Message-ID: <d9047f780910021026r39009017w370e67136e3baa04@mail.gmail.com>

On Fri, Oct 2, 2009 at 12:47 PM, <vitaly at synapticvision.com> wrote:

> hi,
>

Hi, Vitaly!


> I'm trying to accomplish to work couple of CLI commands without luck.
>


> http://twistedmatrix.com/projects/core/documentation/howto/options.htmland
> test/test_usage.py were not really helpful.
>

Why weren't these helpful?  To me, they seem to clearly explain everything
you're trying to do.


> Commands:
> 1.python test.py cmd1 -s 'dfsgdfg' -e 'sdfgdfg'
> 2.python test.py cmd2 -t 123
> 3.python test.py cmd3 cmd4 -t '2345ge' -y 'rebtr' cmd5 -p 'wgerg'
>

These commands are way too abstract.  Especially that last one ("cmd3 cmd4")
could be interpreted in a few different ways.  Can you provide a more
specific example of what you're actually trying to do, and what the Options
API, documentation, and tests don't explain?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091002/05240559/attachment.htm 

From paulswartz at gmail.com  Fri Oct  2 13:28:16 2009
From: paulswartz at gmail.com (Paul Swartz)
Date: Fri, 2 Oct 2009 13:28:16 -0400
Subject: [Twisted-Python] getPeer() inside conch
In-Reply-To: <d9047f780910011953s5bdefa39s22697cd15639954c@mail.gmail.com>
References: <68f3f1f70909281710p1ddc3a47l134208c06b680cdb@mail.gmail.com> 
	<d9047f780909282258v167e852cl76105ba92adb976a@mail.gmail.com> 
	<68f3f1f70909291616tc8c23c3t75de943b725a9b21@mail.gmail.com> 
	<d9047f780909291948n5e433b54l6b4a5cf1b82ec831@mail.gmail.com> 
	<68f3f1f70910011921h1e834454sa4f0b3701fafca61@mail.gmail.com> 
	<d9047f780910011953s5bdefa39s22697cd15639954c@mail.gmail.com>
Message-ID: <324cfb540910021028o571b480g65e79b03fb50a190@mail.gmail.com>

On Thu, Oct 1, 2009 at 10:53 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> On Thu, Oct 1, 2009 at 10:21 PM, Benjamin Rutt <rutt.4 at osu.edu> wrote:
>>
>> (A/B) it looks like the SSHChannel implementation of getPeer() is faulty.
>> If I change my two-line implementation of getPeer() inside
>> SSHSessionProcessProtocol to simply 'return self.session.getPeer()', I get:
>> ? File
>> "/home/ruttbe/dev/python/twisted-8.2.0-inst/lib/python/twisted/conch/ssh/session.py",
>> line 216, in getPeer
>> ??? return self.session.getPeer()
>> ? File
>> "/home/ruttbe/dev/python/twisted-8.2.0-inst/lib/python/twisted/conch/ssh/channel.py",
>> line 261, in getPeer
>> ??? return('SSH', )+self.conn.transport.getPeer()
>> AttributeError: SSHServerTransport instance has no attribute 'getPeer'
>
> OK, I give up :).? Looks like that is pretty clearly a bug, though.

You're correct; it's bug http://twistedmatrix.com/trac/ticket/2997

There's also http://twistedmatrix.com/trac/ticket/2453 for adding
getHost()/getPeer() to SSHSessionProcessProtocol.

A patch should probably be against
branches/conch-old-session-tests-4047, which already includes tests
for other things in twisted/conch/ssh/session.py

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://paulswartz.net/
AIM: z3penguin


From glyph at twistedmatrix.com  Fri Oct  2 13:30:23 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 2 Oct 2009 13:30:23 -0400
Subject: [Twisted-Python] Use of 'twistd' utility with command-line
	arguments
In-Reply-To: <93B58057-6954-4EB4-AA61-F8FD050A29A5@verizon.net>
References: <F4DB8A39-ACA1-4F4E-8A51-04424AF928BE@verizon.net>
	<d9047f780910011355r37419c68s5267212badde2fcc@mail.gmail.com>
	<93B58057-6954-4EB4-AA61-F8FD050A29A5@verizon.net>
Message-ID: <d9047f780910021030k41eb7435me6b92100d41e1ba6@mail.gmail.com>

On Fri, Oct 2, 2009 at 12:14 PM, Valeriy Pogrebitskiy
<vpogrebi at verizon.net>wrote:


> Something can be done about that. One possible approach could be to use two
> argument lists (one - 'twistd' arguments, second - application's arguments)
> and enforce following rule(s):
>

As Jean-Paul mentioned, there is a ticket which almost exactly describes
your idea: #1490.  In particular, you can read my last comment explaining
what that ticket is supposed to be about:

http://twistedmatrix.com/trac/ticket/1490#comment:39

If you'd like to implement what's specified there, we would be happy to
receive your patch :).  Making 'twistd foo.py' equivalent to 'twistd run
foo' is a trivial afterthought once #1490 is implemented.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091002/151de983/attachment-0001.htm 

From vitaly at synapticvision.com  Fri Oct  2 13:47:18 2009
From: vitaly at synapticvision.com (vitaly at synapticvision.com)
Date: Fri, 02 Oct 2009 13:47:18 -0400
Subject: [Twisted-Python] twisted python usage
In-Reply-To: <d9047f780910021026r39009017w370e67136e3baa04@mail.gmail.com>
References: <20091002124718.70485crfem4wdig4@216.129.205.5>
	<d9047f780910021026r39009017w370e67136e3baa04@mail.gmail.com>
Message-ID: <20091002134718.168532kl1nwogfwg@216.129.205.5>

Quoting "Glyph Lefkowitz" <glyph at twistedmatrix.com>:

> On Fri, Oct 2, 2009 at 12:47 PM, <vitaly at synapticvision.com> wrote:
>
>> hi,
>>
>
> Hi, Vitaly!
>
>
>> I'm trying to accomplish to work couple of CLI commands without luck.
>>
>
>
>> http://twistedmatrix.com/projects/core/documentation/howto/options.htmland
>> test/test_usage.py were not really helpful.
>>
>
> Why weren't these helpful?  To me, they seem to clearly explain everything
> you're trying to do.

First of all - I'm sorry, I've succeed to accomplish first two  
commands with previous doc link partially: I can't read value per key  
...

Trying to follow the following snip, how can I read for example value  
of key -m?
CLI: python test.py import -m 'abc321'

from twisted.python import usage
import sys

class ImportOptions(usage.Options):
     optParameters = [
         ['module',  'm', 1, None],
         ['vendor',  'v', None, None],
         ['release', 'r', None]
     ]

class CheckoutOptions(usage.Options):
     optParameters = [['module', 'm', None, None], ['tag', 'r', None, None]]

class Options(usage.Options):
     subCommands = [['import', None, ImportOptions, "Do an Import"],
                    ['checkout', None, CheckoutOptions, "Do a Checkout"]]

     optParameters = [
         ['compression', 'z', 0, 'Use compression'],
         ['repository', 'r', None, 'Specify an alternate repository']
     ]

def doImport():
     print "TODO: how can I now read the value of key, let's say of -m key?"

def doCheckout():
     print "TODO: same as doImport()"

config = Options()
try:
     config.parseOptions()
except usage.UsageError, errortext:
     print '%s: %s' % (sys.argv[0], errortext)
     print '%s: Try --help for usage details.' % (sys.argv[0])
     sys.exit(1)

if config.subCommand == 'import':
     doImport(config.subOptions)
elif config.subCommand == 'checkout':
     doCheckout(config.subOptions)


>
>
>> Commands:
>> 1.python test.py cmd1 -s 'dfsgdfg' -e 'sdfgdfg'
>> 2.python test.py cmd2 -t 123
>> 3.python test.py cmd3 cmd4 -t '2345ge' -y 'rebtr' cmd5 -p 'wgerg'
>>
>
> These commands are way too abstract.  Especially that last one ("cmd3 cmd4")
> could be interpreted in a few different ways.  Can you provide a more
> specific example of what you're actually trying to do, and what the Options
> API, documentation, and tests don't explain?
>




From exarkun at twistedmatrix.com  Fri Oct  2 14:00:25 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 02 Oct 2009 18:00:25 -0000
Subject: [Twisted-Python] twisted python usage
In-Reply-To: <20091002134718.168532kl1nwogfwg@216.129.205.5>
References: <20091002124718.70485crfem4wdig4@216.129.205.5>
	<d9047f780910021026r39009017w370e67136e3baa04@mail.gmail.com>
	<20091002134718.168532kl1nwogfwg@216.129.205.5>
Message-ID: <20091002180025.1533.1810599265.divmod.xquotient.581@localhost.localdomain>

On 05:47 pm, vitaly at synapticvision.com wrote:
>Quoting "Glyph Lefkowitz" <glyph at twistedmatrix.com>:
>>On Fri, Oct 2, 2009 at 12:47 PM, <vitaly at synapticvision.com> wrote:
>>>hi,
>>Hi, Vitaly!
>>>I'm trying to accomplish to work couple of CLI commands without luck.
>>
>>>http://twistedmatrix.com/projects/core/documentation/howto/options.htmland
>>>test/test_usage.py were not really helpful.
>>
>>Why weren't these helpful?  To me, they seem to clearly explain 
>>everything
>>you're trying to do.
>
>First of all - I'm sorry, I've succeed to accomplish first two
>commands with previous doc link partially: I can't read value per key
>...
>
>Trying to follow the following snip, how can I read for example value
>of key -m?
>CLI: python test.py import -m 'abc321'
>
>from twisted.python import usage
>import sys
>
>class ImportOptions(usage.Options):
>     optParameters = [
>         ['module',  'm', 1, None],
>         ['vendor',  'v', None, None],
>         ['release', 'r', None]
>     ]

I think the idiomatic approach would be to add another method to this 
class to replace the "doImport" function below:

    def execute(self):
        print "My -m option was", repr(self['module'])
>
>class CheckoutOptions(usage.Options):
>     optParameters = [['module', 'm', None, None], ['tag', 'r', None, 
>None]]

And again here, replacing "doCheckout":

    def execute(self):
        print "*My* -m option was", repr(self['module'])
>
>class Options(usage.Options):
>     subCommands = [['import', None, ImportOptions, "Do an Import"],
>                    ['checkout', None, CheckoutOptions, "Do a 
>Checkout"]]
>
>     optParameters = [
>         ['compression', 'z', 0, 'Use compression'],
>         ['repository', 'r', None, 'Specify an alternate repository']
>     ]
>
>def doImport():
>     print "TODO: how can I now read the value of key, let's say of -m 
>key?"
>
>def doCheckout():
>     print "TODO: same as doImport()"
>
>config = Options()
>try:
>     config.parseOptions()
>except usage.UsageError, errortext:
>     print '%s: %s' % (sys.argv[0], errortext)
>     print '%s: Try --help for usage details.' % (sys.argv[0])
>     sys.exit(1)
>
>if config.subCommand == 'import':
>     doImport(config.subOptions)
>elif config.subCommand == 'checkout':
>     doCheckout(config.subOptions)

Then replace this thing with this:

    config.subOptions.execute()

But the answer to your original question seems to just be 
"options[optionName]".

Jean-Paul


From vitaly at synapticvision.com  Fri Oct  2 14:18:50 2009
From: vitaly at synapticvision.com (vitaly at synapticvision.com)
Date: Fri, 02 Oct 2009 14:18:50 -0400
Subject: [Twisted-Python] twisted python usage
In-Reply-To: <20091002180025.1533.1810599265.divmod.xquotient.581@localhost.localdomain>
References: <20091002124718.70485crfem4wdig4@216.129.205.5>
	<d9047f780910021026r39009017w370e67136e3baa04@mail.gmail.com>
	<20091002134718.168532kl1nwogfwg@216.129.205.5>
	<20091002180025.1533.1810599265.divmod.xquotient.581@localhost.localdomain>
Message-ID: <20091002141850.28092ylhvr9pkug4@216.129.205.5>


bingo! thank you guys a lot! it was all about 'repr(self['module'])'.

Glyph, sorry man, did mean to hurt and shit on twisted: personally and  
professionally I think its a VERY professional framework, and I'm  
using it about a year.

Good job guys, keep doing.


Quoting exarkun at twistedmatrix.com:

> On 05:47 pm, vitaly at synapticvision.com wrote:
>> Quoting "Glyph Lefkowitz" <glyph at twistedmatrix.com>:
>>> On Fri, Oct 2, 2009 at 12:47 PM, <vitaly at synapticvision.com> wrote:
>>>> hi,
>>> Hi, Vitaly!
>>>> I'm trying to accomplish to work couple of CLI commands without luck.
>>>
>>>> http://twistedmatrix.com/projects/core/documentation/howto/options.htmland
>>>> test/test_usage.py were not really helpful.
>>>
>>> Why weren't these helpful?  To me, they seem to clearly explain
>>> everything
>>> you're trying to do.
>>
>> First of all - I'm sorry, I've succeed to accomplish first two
>> commands with previous doc link partially: I can't read value per key
>> ...
>>
>> Trying to follow the following snip, how can I read for example value
>> of key -m?
>> CLI: python test.py import -m 'abc321'
>>
>> from twisted.python import usage
>> import sys
>>
>> class ImportOptions(usage.Options):
>>     optParameters = [
>>         ['module',  'm', 1, None],
>>         ['vendor',  'v', None, None],
>>         ['release', 'r', None]
>>     ]
>
> I think the idiomatic approach would be to add another method to this
> class to replace the "doImport" function below:
>
>     def execute(self):
>         print "My -m option was", repr(self['module'])
>>
>> class CheckoutOptions(usage.Options):
>>     optParameters = [['module', 'm', None, None], ['tag', 'r', None,
>> None]]
>
> And again here, replacing "doCheckout":
>
>     def execute(self):
>         print "*My* -m option was", repr(self['module'])
>>
>> class Options(usage.Options):
>>     subCommands = [['import', None, ImportOptions, "Do an Import"],
>>                    ['checkout', None, CheckoutOptions, "Do a
>> Checkout"]]
>>
>>     optParameters = [
>>         ['compression', 'z', 0, 'Use compression'],
>>         ['repository', 'r', None, 'Specify an alternate repository']
>>     ]
>>
>> def doImport():
>>     print "TODO: how can I now read the value of key, let's say of -m
>> key?"
>>
>> def doCheckout():
>>     print "TODO: same as doImport()"
>>
>> config = Options()
>> try:
>>     config.parseOptions()
>> except usage.UsageError, errortext:
>>     print '%s: %s' % (sys.argv[0], errortext)
>>     print '%s: Try --help for usage details.' % (sys.argv[0])
>>     sys.exit(1)
>>
>> if config.subCommand == 'import':
>>     doImport(config.subOptions)
>> elif config.subCommand == 'checkout':
>>     doCheckout(config.subOptions)
>
> Then replace this thing with this:
>
>     config.subOptions.execute()
>
> But the answer to your original question seems to just be
> "options[optionName]".
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From glyph at twistedmatrix.com  Fri Oct  2 14:28:27 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 2 Oct 2009 14:28:27 -0400
Subject: [Twisted-Python] twisted python usage
In-Reply-To: <20091002141850.28092ylhvr9pkug4@216.129.205.5>
References: <20091002124718.70485crfem4wdig4@216.129.205.5>
	<d9047f780910021026r39009017w370e67136e3baa04@mail.gmail.com>
	<20091002134718.168532kl1nwogfwg@216.129.205.5>
	<20091002180025.1533.1810599265.divmod.xquotient.581@localhost.localdomain>
	<20091002141850.28092ylhvr9pkug4@216.129.205.5>
Message-ID: <d9047f780910021128o2dc1e00cwa8bd0bfc566ccff@mail.gmail.com>

On Fri, Oct 2, 2009 at 2:18 PM, <vitaly at synapticvision.com> wrote:

>
> bingo! thank you guys a lot! it was all about 'repr(self['module'])'.
>

Great!


> Glyph, sorry man, did mean to hurt and shit on twisted: personally and
> professionally I think its a VERY professional framework, and I'm
> using it about a year.
>

Did you do something terrible somewhere else? Because just reading this
e-mail exchange I didn't like you insulted Twisted at all.  You found a
weakness in the docs, you were confused, you asked a question, it was
answered, and everybody's happy.  Hooray, the process works!

Good job guys, keep doing.
>

Thanks :).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091002/d77cd2a3/attachment.htm 

From glyph at twistedmatrix.com  Fri Oct  2 17:40:05 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 2 Oct 2009 17:40:05 -0400
Subject: [Twisted-Python] Boston Twisted Sprint
In-Reply-To: <b282a1340909201909w5eb75b2fve13a00ffe32cc368@mail.gmail.com>
References: <b282a1340909201909w5eb75b2fve13a00ffe32cc368@mail.gmail.com>
Message-ID: <d9047f780910021440p44574869reda467655cdeffab@mail.gmail.com>

On Sun, Sep 20, 2009 at 10:09 PM, Jessica McKellar <
jessica.mckellar at gmail.com> wrote:

> The proposal was for a sprint in Boston from September 28-October 2. That
> starts a week from today.
>

... and they end today.

This was a pretty small sprint, but I still think it has been a success.  It
motivated Paul to drag himself all the way out to eastern mass to get some
Conch fixes done, and we (hopefully) encouraged some folks to help with the
release.

Thanks a lot to Jessica for organizing this.

Let's do another one soon.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091002/87c4be2e/attachment.htm 

From burslem2001 at yahoo.com  Sat Oct  3 18:30:15 2009
From: burslem2001 at yahoo.com (gary clark)
Date: Sat, 3 Oct 2009 15:30:15 -0700 (PDT)
Subject: [Twisted-Python]  XML parsing on twisted
Message-ID: <613196.98595.qm@web112516.mail.gq1.yahoo.com>

Hello,

I went to use the SAX library to perform parsing. However I hit an unusual
problem.

Its having a problem parsing a token that has a '&' it just crashes. It certainly woke me up when I witnessed this.

<books> Jim & Nancy </books>

are passed to the ContentHandler class. When characters(self,chars) member gets called I perform self.book+=chars to reassemble the string.

I dump out the self.book string as its being assembled. If I replace the '&' character with "and" then its Ok. Of course I dont want to have to replace '&' with 'and'.

Not good. So has anybody else seen this problem. I'm assuming it thinks its a reference and becomes confused when I attempt to add a reference.

Much appreciated,
Garyc



From amauryfa at gmail.com  Sat Oct  3 18:42:06 2009
From: amauryfa at gmail.com (Amaury Forgeot d'Arc)
Date: Sun, 4 Oct 2009 00:42:06 +0200
Subject: [Twisted-Python] XML parsing on twisted
In-Reply-To: <613196.98595.qm@web112516.mail.gq1.yahoo.com>
References: <613196.98595.qm@web112516.mail.gq1.yahoo.com>
Message-ID: <e27efe130910031542j25f4d316l814f363d6b326e9c@mail.gmail.com>

Hi,

2009/10/4 gary clark <burslem2001 at yahoo.com>:
> Hello,
>
> I went to use the SAX library to perform parsing. However I hit an unusual
> problem.
>
> Its having a problem parsing a token that has a '&' it just crashes. It certainly woke me up when I witnessed this.
>
> <books> Jim & Nancy </books>
>
> are passed to the ContentHandler class. When characters(self,chars) member gets called I perform self.book+=chars to reassemble the string.
>
> I dump out the self.book string as its being assembled. If I replace the '&' character with "and" then its Ok. Of course I dont want to have to replace '&' with 'and'.
>
> Not good. So has anybody else seen this problem. I'm assuming it thinks its a reference and becomes confused when I attempt to add a reference.
>
> Much appreciated,

the & character is a special character in XML. You are parsing an
invalid XML string.
This page says it well:
http://www.devx.com/tips/Tip/14068
(a 10 years old "tip of the day"!)

-- 
Amaury Forgeot d'Arc


From burslem2001 at yahoo.com  Sat Oct  3 22:25:34 2009
From: burslem2001 at yahoo.com (gary clark)
Date: Sat, 3 Oct 2009 19:25:34 -0700 (PDT)
Subject: [Twisted-Python] XML parsing on twisted
In-Reply-To: <e27efe130910031542j25f4d316l814f363d6b326e9c@mail.gmail.com>
Message-ID: <51108.15369.qm@web112513.mail.gq1.yahoo.com>

thanks. ughh! 10 years old. oh boy.

Garyc

--- On Sat, 10/3/09, Amaury Forgeot d'Arc <amauryfa at gmail.com> wrote:

> From: Amaury Forgeot d'Arc <amauryfa at gmail.com>
> Subject: Re: [Twisted-Python] XML parsing on twisted
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Date: Saturday, October 3, 2009, 5:42 PM
> Hi,
> 
> 2009/10/4 gary clark <burslem2001 at yahoo.com>:
> > Hello,
> >
> > I went to use the SAX library to perform parsing.
> However I hit an unusual
> > problem.
> >
> > Its having a problem parsing a token that has a
> '&' it just crashes. It certainly woke me up when I
> witnessed this.
> >
> > <books> Jim & Nancy </books>
> >
> > are passed to the ContentHandler class. When
> characters(self,chars) member gets called I perform
> self.book+=chars to reassemble the string.
> >
> > I dump out the self.book string as its being
> assembled. If I replace the '&' character with "and"
> then its Ok. Of course I dont want to have to replace
> '&' with 'and'.
> >
> > Not good. So has anybody else seen this problem. I'm
> assuming it thinks its a reference and becomes confused when
> I attempt to add a reference.
> >
> > Much appreciated,
> 
> the & character is a special character in XML. You are
> parsing an
> invalid XML string.
> This page says it well:
> http://www.devx.com/tips/Tip/14068
> (a 10 years old "tip of the day"!)
> 
> -- 
> Amaury Forgeot d'Arc
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From exarkun at twistedmatrix.com  Sun Oct  4 00:05:20 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 04 Oct 2009 04:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1254629120.33.847300174@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091004/6db9eb1f/attachment.htm 

From jacopo.pecci at gmail.com  Mon Oct  5 09:14:02 2009
From: jacopo.pecci at gmail.com (jacopo.pecci at gmail.com)
Date: Mon, 05 Oct 2009 13:14:02 +0000
Subject: [Twisted-Python] PB vs JMS
Message-ID: <0016e6d640873a273304752fe3d3@google.com>

I looked at PB for an architecture with one client distributing some  
processing to several servers. Now I came across JMS and I have seen that  
using ActiveMQ with the Stomp protocol there would be a good support for  
Python.
Surprising I couldn't find any article comparing the two technologies. I  
wonder if they target different problems (it doesn't look to me).
Is anyone able to sketch advantages of one solution against the other?

Thanks,
Jacopo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091005/3e4507b6/attachment.htm 

From kevin.horn at gmail.com  Mon Oct  5 12:22:22 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 5 Oct 2009 11:22:22 -0500
Subject: [Twisted-Python] Structural issues in Lore XHTML documents
Message-ID: <562bcc10910050922p1623c273g49422ebc4ddf37a9@mail.gmail.com>

I've been looking over the xhtml documents used to generate the twisted
documentation, and I've noticed a number of issues:

- some docs do not have a DOCTYPE declaration, I think they should all have
one
- of those documents that do have DOCTYPEs, some are using xhmtl-strict, and
some are using xhtml-transitional, which is preferred?  I think they should
all use the same one
- some of the docs are lacking an xml namespace attribute in their root
<html> element...I think they should either all have one, or none of them
should
- according to:
http://twistedmatrix.com/projects/lore/documentation/howto/lore.html
  all of the docs should have the same text in both their <title> element
and their <h1> element...this is not the case

I'm planning to correct some of these issues, but I wanted to get others'
opinions on exactly how to go about it.  For example, what DOCTYPE to use,
XMLNS to use, etc.

Thoughts?  Suggestions?

I've opened a ticket (#4050) at http://twistedmatrix.com/trac/ticket/4050
Please comment.

Thanks,

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091005/16670b75/attachment.htm 

From kevin.horn at gmail.com  Mon Oct  5 12:34:42 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 5 Oct 2009 11:34:42 -0500
Subject: [Twisted-Python] getting #2015 (Generic SASL library) moving again?
Message-ID: <562bcc10910050934x18e7781dl5e40f4a61edda4e0@mail.gmail.com>

I'd like to see this ticket get moving again.  I've gone over what's been
done so far (and put my comments in the ticket), and it looks like
everything is at least mostly ready to be merged into the Twisted trunk.

So what else needs to be done to get this to happen?  I'm happy to try and
get it done, but a little direction would be really handy. ;)

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091005/ecf0f4ff/attachment.htm 

From drew.smathers at gmail.com  Mon Oct  5 13:21:52 2009
From: drew.smathers at gmail.com (Drew Smathers)
Date: Mon, 5 Oct 2009 13:21:52 -0400
Subject: [Twisted-Python] PB vs JMS
In-Reply-To: <0016e6d640873a273304752fe3d3@google.com>
References: <0016e6d640873a273304752fe3d3@google.com>
Message-ID: <368574aa0910051021g702e4fffx6df865f5dfe60588@mail.gmail.com>

On Mon, Oct 5, 2009 at 9:14 AM, <jacopo.pecci at gmail.com> wrote:

> I looked at PB for an architecture with one client distributing some
> processing to several servers. Now I came across JMS and I have seen that
> using ActiveMQ with the Stomp protocol there would be a good support for
> Python.
> Surprising I couldn?t find any article comparing the two technologies. I
> wonder if they target different problems (it doesn?t look to me).
> Is anyone able to sketch advantages of one solution against the other?
>
>
I don't think there is a good comparison between the two because they're
different technologies addressing different problems.  JMS is a messaging
middleware defined at the Java language API level (hence the need to for
STOMP protocol and similar adapting layers for use with Python or other
non-Java languages).  PB is a "secure, easy-to-use Remote Procedure Call
(RPC) mechanism."

For the system you're descibing it seems like message middleware is more
what you want.  Unless you want to implement your own load balacing, work
distribution and failover algorithms?  Another alternative to ActiveMQ is
RabbitMQ which implements AMQP, which a Python client can speak directly
without using a limited protocol like STOMP.  There's also handful of good
AMQP python libs including one for use in Twisted: txamqp.

-Drew
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091005/0df5d175/attachment.htm 

From dsuch at gefira.pl  Mon Oct  5 14:05:57 2009
From: dsuch at gefira.pl (Dariusz Suchojad)
Date: Mon, 05 Oct 2009 20:05:57 +0200
Subject: [Twisted-Python] PB vs JMS
In-Reply-To: <368574aa0910051021g702e4fffx6df865f5dfe60588@mail.gmail.com>
References: <0016e6d640873a273304752fe3d3@google.com>
	<368574aa0910051021g702e4fffx6df865f5dfe60588@mail.gmail.com>
Message-ID: <4ACA3585.5050807@gefira.pl>

Drew Smathers wrote:

Hi,

> JMS is a messaging
> middleware defined at the Java language API level (hence the need to for
> STOMP protocol and similar adapting layers for use with Python or other
> non-Java languages). 

A bit off-topic, but note that it's sometimes possible to use JMS almost
as-is with Python too. Doing that is probably pointless if one's not
coming from Java world and expect to see a similar API in Python and it
probably doesn't make much sense for open source messaging middleware
but it makes sense if you have to use proprietary software such as
WebSphere MQ or webMethods that doesn't care much about open protocols,
especially when there's a need for seamless integration with Java JMS
clients.

http://jira.springframework.org/browse/SESPRINGPYTHONPY-12
https://src.springframework.org/svn/se-springpython-py/sandbox/dsuch/jira/SESPRINGPYTHONPY-12/
https://src.springframework.org/svn/se-springpython-py/sandbox/dsuch/misc/jms-wmq-examples.py

-- 
Dariusz Suchojad


From glyph at twistedmatrix.com  Mon Oct  5 14:25:53 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 5 Oct 2009 14:25:53 -0400
Subject: [Twisted-Python] Structural issues in Lore XHTML documents
In-Reply-To: <562bcc10910050922p1623c273g49422ebc4ddf37a9@mail.gmail.com>
References: <562bcc10910050922p1623c273g49422ebc4ddf37a9@mail.gmail.com>
Message-ID: <d9047f780910051125n3778199cnac5428b190e418e6@mail.gmail.com>

On Mon, Oct 5, 2009 at 12:22 PM, Kevin Horn <kevin.horn at gmail.com> wrote:

> I've been looking over the xhtml documents used to generate the twisted
> documentation, and I've noticed a number of issues:
>

Are these issues really affecting you in some way?


> I'm planning to correct some of these issues, but I wanted to get others'
> opinions on exactly how to go about it.  For example, what DOCTYPE to use,
> XMLNS to use, etc.
>

They are supposed to be XHTML, so they should be annotated as appropriate
for that format.  Lore doesn't define its own attributes, on purpose: it
uses existing XHTML facilities like "class" to encode its metadata.


> Thoughts?  Suggestions?
>

I'm sure we'd be happy to accept some patches to clean these documents up,
especially if it's bothering you, but it seems pretty low-priority to me :).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091005/3b826688/attachment.htm 

From glyph at twistedmatrix.com  Mon Oct  5 14:32:30 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 5 Oct 2009 14:32:30 -0400
Subject: [Twisted-Python] getting #2015 (Generic SASL library) moving
	again?
In-Reply-To: <562bcc10910050934x18e7781dl5e40f4a61edda4e0@mail.gmail.com>
References: <562bcc10910050934x18e7781dl5e40f4a61edda4e0@mail.gmail.com>
Message-ID: <d9047f780910051132w78b29ca3n7a7d1e9c81fd97e6@mail.gmail.com>

On Mon, Oct 5, 2009 at 12:34 PM, Kevin Horn <kevin.horn at gmail.com> wrote:

> I'd like to see this ticket get moving again.


Excellent!


> I've gone over what's been done so far (and put my comments in the ticket),
> and it looks like everything is at least mostly ready to be merged into the
> Twisted trunk.
>

Your analysis on the ticket looks fairly thorough.


> So what else needs to be done to get this to happen?  I'm happy to try and
> get it done, but a little direction would be really handy. ;)
>

The workflow is pretty simple.

   1. author submits change
   2. reviewer reviews change
   3. someone responds to feedback
   4. "someone" becomes "author", repeat

Right now we're stuck in the middle of step 3, but given that therve does
not appear to be actively working on this branch, the path forward is
clear.  *You* become "someone", and submit a patch that finishes dealing
with the issues that you have mentioned as not already taken care of by
therve's subsequent changesets.  The best way to do this is to submit a
patch against the branch, rather than against trunk.  Given such a patch, a
twisted committer can then apply the patch to the branch and submit to
buildbots (etc) as appropriate.  By submitting it against the branch, you
make it easy for the reviewer to examine the changes you're submitting in
isolation from the rest of the larger change, to see if they address the
points that you've brought up.

If the reviewer is happy with your changes, then the patch + branch will be
immediately merged to trunk; of course, the next review might have a little
more feedback for you to deal with ;).

Thanks for your interest!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091005/0cd11e5d/attachment.htm 

From kevin.horn at gmail.com  Mon Oct  5 14:44:02 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 5 Oct 2009 13:44:02 -0500
Subject: [Twisted-Python] Structural issues in Lore XHTML documents
In-Reply-To: <d9047f780910051125n3778199cnac5428b190e418e6@mail.gmail.com>
References: <562bcc10910050922p1623c273g49422ebc4ddf37a9@mail.gmail.com>
	<d9047f780910051125n3778199cnac5428b190e418e6@mail.gmail.com>
Message-ID: <562bcc10910051144x17e6f7a0t8abc036d0f62c68b@mail.gmail.com>

On Mon, Oct 5, 2009 at 1:25 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

> On Mon, Oct 5, 2009 at 12:22 PM, Kevin Horn <kevin.horn at gmail.com> wrote:
>
>> I've been looking over the xhtml documents used to generate the twisted
>> documentation, and I've noticed a number of issues:
>>
>
> Are these issues really affecting you in some way?
>

Yes and no.  I'm playing around with some automated processing of these
documents (mostly as an exercise to learn lxml), and I'm having to work
around some of these things.  And since I was thinking about it anyway, I
thought I'd take the opportunity to fix up some "broken windows".


>
>
>> I'm planning to correct some of these issues, but I wanted to get others'
>> opinions on exactly how to go about it.  For example, what DOCTYPE to use,
>> XMLNS to use, etc.
>>
>
> They are supposed to be XHTML, so they should be annotated as appropriate
> for that format.  Lore doesn't define its own attributes, on purpose: it
> uses existing XHTML facilities like "class" to encode its metadata.
>
>

The main thing I was worried about was whether they were supposed ot be
xhtml-strict or xhtml-transitional.


> Thoughts?  Suggestions?
>>
>
> I'm sure we'd be happy to accept some patches to clean these documents up,
> especially if it's bothering you, but it seems pretty low-priority to me :).
>
>
It's not "bothering" me per se, and we're agreed that it's not any kind of
priority, just thought I might as well try and fix it up while I was looking
at it.

FYI: I've hacked together a simple "lorelint" script to automatically check
for these type of issues.  Happy to share if anyone thinks it might be
useful for future release mgmt automation or whatever.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091005/2f2683b8/attachment-0001.htm 

From kevin.horn at gmail.com  Mon Oct  5 14:49:32 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 5 Oct 2009 13:49:32 -0500
Subject: [Twisted-Python] getting #2015 (Generic SASL library) moving
	again?
In-Reply-To: <d9047f780910051132w78b29ca3n7a7d1e9c81fd97e6@mail.gmail.com>
References: <562bcc10910050934x18e7781dl5e40f4a61edda4e0@mail.gmail.com>
	<d9047f780910051132w78b29ca3n7a7d1e9c81fd97e6@mail.gmail.com>
Message-ID: <562bcc10910051149h29cce9f0j6cca093016da99b2@mail.gmail.com>

On Mon, Oct 5, 2009 at 1:32 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

> On Mon, Oct 5, 2009 at 12:34 PM, Kevin Horn <kevin.horn at gmail.com> wrote:
>
>> I'd like to see this ticket get moving again.
>
>
> Excellent!
>
>
>> I've gone over what's been done so far (and put my comments in the
>> ticket), and it looks like everything is at least mostly ready to be merged
>> into the Twisted trunk.
>>
>
> Your analysis on the ticket looks fairly thorough.
>

Thanks!  Though, really I just went over the changesets that therve
submitted, and checked them against exarkun's suggestions.


>
>
>> So what else needs to be done to get this to happen?  I'm happy to try and
>> get it done, but a little direction would be really handy. ;)
>>
>
> The workflow is pretty simple.
>
>    1. author submits change
>    2. reviewer reviews change
>    3. someone responds to feedback
>    4. "someone" becomes "author", repeat
>
> Right now we're stuck in the middle of step 3, but given that therve does
> not appear to be actively working on this branch, the path forward is
> clear.  *You* become "someone", and submit a patch that finishes dealing
> with the issues that you have mentioned as not already taken care of by
> therve's subsequent changesets.  The best way to do this is to submit a
> patch against the branch, rather than against trunk.  Given such a patch, a
> twisted committer can then apply the patch to the branch and submit to
> buildbots (etc) as appropriate.  By submitting it against the branch, you
> make it easy for the reviewer to examine the changes you're submitting in
> isolation from the rest of the larger change, to see if they address the
> points that you've brought up.
>
> If the reviewer is happy with your changes, then the patch + branch will be
> immediately merged to trunk; of course, the next review might have a little
> more feedback for you to deal with ;).
>
> Thanks for your interest!
>
>
That's kind of what I figured.


From fetbiz at gmail.com  Tue Oct  6 00:08:10 2009
From: fetbiz at gmail.com (biziap biziap)
Date: Tue, 6 Oct 2009 12:08:10 +0800
Subject: [Twisted-Python] Is it necessary to utilize twisted.cred in twisted
	web?
Message-ID: <d067ddcf0910052108x47fe7efey753b9e9d72f6c97d@mail.gmail.com>

I have googled this topic and found and example in
(A) http://www.mail-archive.com/twisted-web at twistedmatrix.com/msg01796.html
well, another simpler example is
(B) http://www.mail-archive.com/twisted-web at twistedmatrix.com/msg01788.html

My questions are:
1. Does the approach in (A) be recommended? To generate resource
dynamically seems not efficient and not necessary for simple scenario.
Is there other way to bind twisted.cred and twisted.web together?
(except the  deprecated twisted.web.guard)

2. The approach in (B) which suggests that request.getSession() along
is quite enough to implement an simple authentication feature. Here
the "simple scenario" means to guard some resource with username and
password.
To do it: In a protected resource, just to check for a flag in the
session, if failure, then redirect to login page. If succeeded, render
the resource. Why shall we bother the portal, credentials,
checker,.... ?

Any suggestion? Thanks in advance.


From clemesha at gmail.com  Tue Oct  6 00:19:18 2009
From: clemesha at gmail.com (Alex Clemesha)
Date: Mon, 5 Oct 2009 21:19:18 -0700
Subject: [Twisted-Python] Is it necessary to utilize twisted.cred in
	twisted web?
In-Reply-To: <d067ddcf0910052108x47fe7efey753b9e9d72f6c97d@mail.gmail.com>
References: <d067ddcf0910052108x47fe7efey753b9e9d72f6c97d@mail.gmail.com>
Message-ID: <d272f0690910052119g2ef34967ma04ed61bb283f943@mail.gmail.com>

Hi,

I'd love to provide a 'canonical answer' to this question, but unfortunately
it is something that I've been confused with in the past too.

I'm hoping there is a sort of 'best practice' answer to this, and I'd
additionally hope that this answer might appear in this extremely
good running series on Twisted Web:
http://jcalderone.livejournal.com/tag/sixty+seconds


thanks,
Alex




On Mon, Oct 5, 2009 at 9:08 PM, biziap biziap <fetbiz at gmail.com> wrote:
> I have googled this topic and found and example in
> (A) http://www.mail-archive.com/twisted-web at twistedmatrix.com/msg01796.html
> well, another simpler example is
> (B) http://www.mail-archive.com/twisted-web at twistedmatrix.com/msg01788.html
>
> My questions are:
> 1. Does the approach in (A) be recommended? To generate resource
> dynamically seems not efficient and not necessary for simple scenario.
> Is there other way to bind twisted.cred and twisted.web together?
> (except the ?deprecated twisted.web.guard)
>
> 2. The approach in (B) which suggests that request.getSession() along
> is quite enough to implement an simple authentication feature. Here
> the "simple scenario" means to guard some resource with username and
> password.
> To do it: In a protected resource, just to check for a flag in the
> session, if failure, then redirect to login page. If succeeded, render
> the resource. Why shall we bother the portal, credentials,
> checker,.... ?
>
> Any suggestion? Thanks in advance.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Alex Clemesha
clemesha.org


From phil at bubblehouse.org  Tue Oct  6 01:31:50 2009
From: phil at bubblehouse.org (Phil Christensen)
Date: Tue, 6 Oct 2009 01:31:50 -0400
Subject: [Twisted-Python] Is it necessary to utilize twisted.cred in
	twisted web?
In-Reply-To: <d067ddcf0910052108x47fe7efey753b9e9d72f6c97d@mail.gmail.com>
References: <d067ddcf0910052108x47fe7efey753b9e9d72f6c97d@mail.gmail.com>
Message-ID: <7DDA846A-5A87-4F3F-9212-5ADD45A8074E@bubblehouse.org>

crossposted to twisted-web at twistedmatrix.com, which is probably a  
better venue...

On Oct 6, 2009, at 12:08 AM, biziap biziap wrote:
> I have googled this topic and found and example in
> (A) http://www.mail-archive.com/twisted-web at twistedmatrix.com/msg01796.html
> well, another simpler example is
> (B) http://www.mail-archive.com/twisted-web at twistedmatrix.com/msg01788.html
>
> My questions are:
> 1. Does the approach in (A) be recommended? To generate resource
> dynamically seems not efficient and not necessary for simple scenario.
> Is there other way to bind twisted.cred and twisted.web together?
> (except the  deprecated twisted.web.guard)

There's a few problems with this approach. The biggest is that it  
requires username/password data to be sent on every authenticated  
request.

Another one is more of a design principle; that you shouldn't have  
account/permissions code inside resource display code. I violate this  
principle all the time ;-)

The use of dynamic resource instantiation is a common idiom in  
twisted.web coding, though. it isn't inherently inefficient, as long  
as your resource objects are fairly sane.

> 2. The approach in (B) which suggests that request.getSession() along
> is quite enough to implement an simple authentication feature. Here
> the "simple scenario" means to guard some resource with username and
> password.
> To do it: In a protected resource, just to check for a flag in the
> session, if failure, then redirect to login page. If succeeded, render
> the resource. Why shall we bother the portal, credentials,
> checker,.... ?


true, depending on your needs, this may be all that you need. from  
your description, though, it sounds like you'd be doing this  
authentication step in every resource you want to protect, which could  
become tedious (aka error-prone) in a big project.

twisted.cred can seem daunting when you're just trying to protect a  
trivial web resource or two, but for more advanced uses like more  
complicated authentication levels, it's worth the time to learn. also,  
a big part of its real value comes when you need to support a variety  
of protocols and/or authentication types.

-phil


From fetbiz at gmail.com  Tue Oct  6 03:18:55 2009
From: fetbiz at gmail.com (biziap biziap)
Date: Tue, 6 Oct 2009 15:18:55 +0800
Subject: [Twisted-Python] Is it necessary to utilize twisted.cred in
	twisted web?
In-Reply-To: <7DDA846A-5A87-4F3F-9212-5ADD45A8074E@bubblehouse.org>
References: <d067ddcf0910052108x47fe7efey753b9e9d72f6c97d@mail.gmail.com>
	<7DDA846A-5A87-4F3F-9212-5ADD45A8074E@bubblehouse.org>
Message-ID: <d067ddcf0910060018v6003aacfnc93e51acaeded4ef@mail.gmail.com>

Dear phil
> true, depending on your needs, this may be all that you need. from
> your description, though, it sounds like you'd be doing this
> authentication step in every resource you want to protect, which could
> become tedious (aka error-prone) in a big project.

I do have lots of resources to protect.
Things I have to do is getSession() and hasattr(session,'authenticated')
in very request. Just like the Django, it puts @login_required in very
protected resources.
Username and password were verified once.

>
> twisted.cred can seem daunting when you're just trying to protect a
> trivial web resource or two, but for more advanced uses like more
> complicated authentication levels, it's worth the time to learn. also,
> a big part of its real value comes when you need to support a variety
> of protocols and/or authentication types.
>

Agree, that is the reason I am asking here.
I feel unconfortable to drop the twisted.cred and adapt to getSession() only.
Originally, I expect to get the avatar from request if user has been
authenticated by the twisted.cred framework, for example,
request.getAvatar() without any extra works to do, no need to assign
the avatar to session in the login phase, just need to implement
required components of twisted.cred framework. Or even simply to claim
a class variable in the resource (like addSlash, isLeaf) and the
twisted.cred framework handles the rest of things. If the avatar has
to be stored in the session and retrieve from the session in very
protected resource, then to adapt the twisted.cred framework seems to
be too luxury for my project which authenticate the request with only
one source of backend. Do I miss some good things that the
twisted.cred brings?

By the way, can some one kindly drop a conceptual design which utilize
twisted.cred in a multiple protocol environment? Especially the way to
retrieve the avatar back in the descending phases (protected
resources). That could be very interesting. Thanks in advance.


From petshmidt at googlemail.com  Tue Oct  6 10:47:48 2009
From: petshmidt at googlemail.com (Pet)
Date: Tue, 6 Oct 2009 16:47:48 +0200
Subject: [Twisted-Python] inlineCallbacks
Message-ID: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>

Hi,

calling in client code self.cred.login() I can't print login result.
What I'm doing wrong? login method returns deffered, but should yield
result from callRemote method.

Thanks for any help!

Pet

class Cred:

    @inlineCallbacks
    def login(self):
        proxy = Proxy(LOGIN_PROXY)
        l = {"user":LOGIN_USERNAME, "pass":LOGIN_PASSWD}
        loginResult = yield proxy.callRemote('login', l)
        print "RESULT", loginResult.result
        returnValue(loginResult)


From kevin.horn at gmail.com  Tue Oct  6 19:57:07 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 6 Oct 2009 18:57:07 -0500
Subject: [Twisted-Python] Structural issues in Lore XHTML documents
In-Reply-To: <562bcc10910051144x17e6f7a0t8abc036d0f62c68b@mail.gmail.com>
References: <562bcc10910050922p1623c273g49422ebc4ddf37a9@mail.gmail.com>
	<d9047f780910051125n3778199cnac5428b190e418e6@mail.gmail.com>
	<562bcc10910051144x17e6f7a0t8abc036d0f62c68b@mail.gmail.com>
Message-ID: <562bcc10910061657n7d024c16i5421dda3a51ab520@mail.gmail.com>

On Mon, Oct 5, 2009 at 1:44 PM, Kevin Horn <kevin.horn at gmail.com> wrote:

>
> FYI: I've hacked together a simple "lorelint" script to automatically check
> for these type of issues.  Happy to share if anyone thinks it might be
> useful for future release mgmt automation or whatever.
>

For benefit of future readers...Lore already does something like this.  Try:

    lore -olint mydocument.xhtml

Thanks to exarkun for pointing this out.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091006/adab9f43/attachment.htm 

From asset at impactdamage.com  Tue Oct  6 20:00:19 2009
From: asset at impactdamage.com (asset)
Date: Tue, 6 Oct 2009 17:00:19 -0700
Subject: [Twisted-Python] Problem with XMLRPC resource wrapped with guard
	basic auth
Message-ID: <3d9b0f27$47ae1a4$685b66bd$@com>

 Using the current trunk r27366 (which is after #4014 fixed a related 
issue), I am having trouble with an implementation of web.guard wrapped 
XMLRPC.  This is a new test implementation to expose both a soap and xmlrpc 
interface.  SOAP works, but xmlrpc throws UnsupportedMethod POST.

Here is my test code, can anybody tell me if im doing something wrong?  
Again, /soap works, but /rpc2 freaks on the POST method being unavailable.

###### test-script.py

from zope.interface import implements
from twisted.internet import reactor
from twisted.web.resource import IResource, Resource
from twisted.web import server, guard
from twisted.cred.portal import IRealm
from twisted.python import log

from zope.interface import implements

from twisted.python import log
from twisted.internet import reactor
from twisted.web import server, resource, guard, xmlrpc, soap
from twisted.cred.portal import IRealm, Portal
from twisted.cred.checkers import InMemoryUsernamePasswordDatabaseDontUse

import sys

def getQuote():
    return "Victory to the burgeois, you capitalist swine!"

class XMLRPCQuoter(xmlrpc.XMLRPC):
    def xmlrpc_quote(self):
        return getQuote()

class SOAPQuoter(soap.SOAPPublisher):
    def soap_quote(self):
        return getQuote()

class WebServicesRealm(object):
    implements(IRealm)

    def requestAvatar(self, avatarId, mind, *interfaces):
        if resource.IResource in interfaces:
            node = resource.Resource()
            node.putChild("rpc2", XMLRPCQuoter())
            node.putChild("soap", SOAPQuoter())
            return resource.IResource, node, lambda: None
        raise NotImplementedError()

if __name__ == "__main__":
   log.startLogging(sys.stdout)

   checker = [InMemoryUsernamePasswordDatabaseDontUse(foo='bar')]
   webServicesWrapper = 
guard.HTTPAuthSessionWrapper(Portal(WebServicesRealm(), checker),
                                             
[guard.BasicCredentialFactory("test")])

   reactor.listenTCP(9999, server.Site(webServicesWrapper))
   reactor.run()

######

http://localhost:9999/soap *good*
http://localhost:9999/rpc2 *bad; POST isnt an allowed method*

Thanks,

TWKiel

 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091006/091dc8b1/attachment.htm 

From exarkun at twistedmatrix.com  Tue Oct  6 21:15:58 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 07 Oct 2009 01:15:58 -0000
Subject: [Twisted-Python] Problem with XMLRPC resource wrapped with
	guard	basic auth
In-Reply-To: <3d9b0f27$47ae1a4$685b66bd$@com>
References: <3d9b0f27$47ae1a4$685b66bd$@com>
Message-ID: <20091007011558.24460.746569620.divmod.xquotient.154@boson>

On 12:00 am, asset at impactdamage.com wrote:
>Using the current trunk r27366 (which is after #4014 fixed a related
>issue), I am having trouble with an implementation of web.guard wrapped
>XMLRPC.  This is a new test implementation to expose both a soap and 
>xmlrpc
>interface.  SOAP works, but xmlrpc throws UnsupportedMethod POST.

I think you're being tricked by the confusing way in which this 
exception is displayed and by a slight implementation difference (and 
indeed externally visible behavioral difference) between XMLRPC and 
SOAPPublisher.

SOAPPublisher defines "render" and no other render methods.  So it will 
accept any request method and treat it the same way.  It will never 
raise UnsupportedMethod.

XMLRPC, on the other hand, defines "render_POST" and no other render 
methods, so it will only accept POST requests.  For any other request, 
it will raise UnsupportedMethod and create that exception with a tuple 
of which methods it does allow.  ('POST',) in this case.

The exception I see when I approach this server at /rpc2 with my web 
browser (which is the only thing I've tried, because it's too much work 
to put together a real xml-rpc client that supports basic auth) is just 
what I'd expect.  The browser issues a GET, the XMLRPC resource rejects 
this, indicating it only accepts POSTs.

It may be worth improving the way UnsupportedMethod exceptions are 
stringified to make it more clear what's going on.  Or, if this doesn't 
actually explain your problem, feel free to point that out and provide 
more details about how the client you're using behaves.

Jean-Paul


From listsin at integrateddevcorp.com  Tue Oct  6 22:40:49 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Tue, 6 Oct 2009 22:40:49 -0400
Subject: [Twisted-Python] Lots and lots and lots and lots... of deferreds
In-Reply-To: <20091007011558.24460.746569620.divmod.xquotient.154@boson>
References: <3d9b0f27$47ae1a4$685b66bd$@com>
	<20091007011558.24460.746569620.divmod.xquotient.154@boson>
Message-ID: <EEF62EFB-31D9-493C-BF0E-BEB2654CA246@integrateddevcorp.com>

So, I have a situation...

	I have an application whose basic function is, in simplified form:

	def main():
		get_web_page(main_page_from_params)

	def get_web_page(page_name):
		set up a page getter deferred,
			one of the callbacks gets the links out of the page and sends them  
to get_them()

	def get_them(links):
		for l in links:
			if l is not being gotten or hasn't been got:
				deferred = get_web_page(l)

	In other words, I feed in the top level page, then recursively feed  
in any pages linked to by the current page, and they feed in all their  
links, until all pages are gotten.

	I understand the concurrency issues with multiple deferred's trying  
to add pages to the "get list" -- it's properly handled in the code  
(far as I can tell, so far).

	So, here's the question...

	I have a "pages"  list containing all of the pages.

	They are set to either gotten or in-flight.

	In-flight means I have a deferred that's going to go get it (in  
get_web_page()).

	IOW, right now, if I don't already have the page, and I have a link  
to it, I just start a deferred to go get it.

	Should I limit the number of "in-flight" pages?

	Currently, I'm scanning sites that have upwards of 5000 pages and it  
seems that, when I get too many deferred's in flight, the app  
*appears* to crash.

	I'm not sure whether it's actually going out to lunch or just appears  
that way and, before I go instrumenting the app to death, can anyone  
tell me whether there is some sort of practical limit to how many "in- 
flight" deferreds might start to cause issues, just due to the sheer  
number?

	Thanks for any insight on this that anyone might offer.

	I expect the usual flurry of  "you must post your exact code or we  
can't help you at all, moron" posts, but...
	
	In spite of my not having posted specific code, could someone with  
some actual experience in this please give me a clue, within an order  
of magnitude, how many deferreds might start to cause real trouble?

Thanks,

S





From glyph at twistedmatrix.com  Tue Oct  6 22:57:42 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 6 Oct 2009 22:57:42 -0400
Subject: [Twisted-Python] Lots and lots and lots and lots... of deferreds
In-Reply-To: <EEF62EFB-31D9-493C-BF0E-BEB2654CA246@integrateddevcorp.com>
References: <3d9b0f27$47ae1a4$685b66bd$@com>
	<20091007011558.24460.746569620.divmod.xquotient.154@boson>
	<EEF62EFB-31D9-493C-BF0E-BEB2654CA246@integrateddevcorp.com>
Message-ID: <d9047f780910061957t35603084h42114fdd8458cc65@mail.gmail.com>

On Tue, Oct 6, 2009 at 10:40 PM, Steve Steiner (listsin) <
listsin at integrateddevcorp.com> wrote:


>        Should I limit the number of "in-flight" pages?
>

I'm not going to comment on that, because I don't know what your app is
doing or why it appears to be dying.  As you said, you didn't post code :).

However, you can experiment with it pretty easily using DeferredSemaphore:
http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.defer.DeferredSemaphore.html


>        Currently, I'm scanning sites that have upwards of 5000 pages and it
> seems that, when I get too many deferred's in flight, the app
> *appears* to crash.
>
>        I'm not sure whether it's actually going out to lunch or just
> appears
> that way and, before I go instrumenting the app to death, can anyone
> tell me whether there is some sort of practical limit to how many "in-
> flight" deferreds might start to cause issues, just due to the sheer
> number?
>

If your app is doing something strange that you don't understand, you should
instrument it until you understand it.  Regardless of any practical advice
you may receive as a temporary stopgap, there's always a chance that
something *else* is going wrong, and by reducing the number of concurrent
requests you're just decreasing its likelihood rather than properly fixing
it.

It's highly unlikely that it's actually the number of Deferreds.  A Deferred
is just a Python object, so if you've got the RAM to store them and their
associated callbacks, you should be fine.  It's more likely that it has
something to do with long callback chains, or hitting some kind of
file-descriptor limit (what version of Twisted are you using?) or perhaps
that 5000 pages is just a lot of pages to request and you might need to wait
a while.

Good luck,

-Glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091006/c81a2093/attachment.htm 

From matt at unshift.net  Tue Oct  6 23:00:03 2009
From: matt at unshift.net (Matt Perry)
Date: Tue, 6 Oct 2009 23:00:03 -0400
Subject: [Twisted-Python] Lots and lots and lots and lots... of deferreds
In-Reply-To: <EEF62EFB-31D9-493C-BF0E-BEB2654CA246@integrateddevcorp.com>
References: <3d9b0f27$47ae1a4$685b66bd$@com>
	<20091007011558.24460.746569620.divmod.xquotient.154@boson>
	<EEF62EFB-31D9-493C-BF0E-BEB2654CA246@integrateddevcorp.com>
Message-ID: <a8c89c8c0910062000hcc53f6dia5542c8aaa6ec1e2@mail.gmail.com>

Your limit will usually be the number of file descriptors in the system,
which can be usually changed via ulimit or your system's equivalent.  On
Linux I believe it defaults to 1024, so you should be able to handle 1024
simultaneous connections.

One thing of note is that you say you have concurrency issues handled -- but
with asynchronous I/O, there are no concurrency issues, since there's no
concurrency (at least, not at application level).  This is confusing at
first but it's important to understand.

All that said, you probably want to maintain a queue of URLs and some sort
of graph representation of your data for purposes of finding loops (e.g. A
links to B, B links to C, C links to A).  You can then set an upper limit on
the number of concurrent connections (say 1000) and track the number of
deferreds in the system just based on when you start connections and when
they finish (via callbacks).   Your initial seed can start one URL, and then
its callback can hit all linked nodes, and so on and so on.

You might be hitting a cycle in the page traversal graph, and that is
causing you all sorts of problems in terms of recursion depth or running out
of file descriptors.  Without seeing your code or your target site, though,
it's impossible to say.

Have you considered using another library for web spidering?  I believe
Scrapy (http://scrapy.org) is a good spidering tool, and it might be easier
to use a decent library than roll your own.


  - Matt



On Tue, Oct 6, 2009 at 10:40 PM, Steve Steiner (listsin) <
listsin at integrateddevcorp.com> wrote:

> So, I have a situation...
>
>        I have an application whose basic function is, in simplified form:
>
>        def main():
>                get_web_page(main_page_from_params)
>
>        def get_web_page(page_name):
>                set up a page getter deferred,
>                        one of the callbacks gets the links out of the page
> and sends them
> to get_them()
>
>        def get_them(links):
>                for l in links:
>                        if l is not being gotten or hasn't been got:
>                                deferred = get_web_page(l)
>
>        In other words, I feed in the top level page, then recursively feed
> in any pages linked to by the current page, and they feed in all their
> links, until all pages are gotten.
>
>        I understand the concurrency issues with multiple deferred's trying
> to add pages to the "get list" -- it's properly handled in the code
> (far as I can tell, so far).
>
>        So, here's the question...
>
>        I have a "pages"  list containing all of the pages.
>
>        They are set to either gotten or in-flight.
>
>        In-flight means I have a deferred that's going to go get it (in
> get_web_page()).
>
>        IOW, right now, if I don't already have the page, and I have a link
> to it, I just start a deferred to go get it.
>
>        Should I limit the number of "in-flight" pages?
>
>        Currently, I'm scanning sites that have upwards of 5000 pages and it
> seems that, when I get too many deferred's in flight, the app
> *appears* to crash.
>
>        I'm not sure whether it's actually going out to lunch or just
> appears
> that way and, before I go instrumenting the app to death, can anyone
> tell me whether there is some sort of practical limit to how many "in-
> flight" deferreds might start to cause issues, just due to the sheer
> number?
>
>        Thanks for any insight on this that anyone might offer.
>
>        I expect the usual flurry of  "you must post your exact code or we
> can't help you at all, moron" posts, but...
>
>        In spite of my not having posted specific code, could someone with
> some actual experience in this please give me a clue, within an order
> of magnitude, how many deferreds might start to cause real trouble?
>
> Thanks,
>
> S
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091006/2398f84b/attachment-0001.htm 

From listsin at integrateddevcorp.com  Tue Oct  6 23:13:00 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Tue, 6 Oct 2009 23:13:00 -0400
Subject: [Twisted-Python] Lots and lots and lots and lots... of deferreds
In-Reply-To: <a8c89c8c0910062000hcc53f6dia5542c8aaa6ec1e2@mail.gmail.com>
References: <3d9b0f27$47ae1a4$685b66bd$@com>
	<20091007011558.24460.746569620.divmod.xquotient.154@boson>
	<EEF62EFB-31D9-493C-BF0E-BEB2654CA246@integrateddevcorp.com>
	<a8c89c8c0910062000hcc53f6dia5542c8aaa6ec1e2@mail.gmail.com>
Message-ID: <076858B8-020C-4873-929F-B19271F705DD@integrateddevcorp.com>


On Oct 6, 2009, at 11:00 PM, Matt Perry wrote:

> One thing of note is that you say you have concurrency issues  
> handled -- but with asynchronous I/O, there are no concurrency  
> issues, since there's no concurrency (at least, not at application  
> level).  This is confusing at first but it's important to understand.

The concurrency to which I was referring was having multiple deferreds  
adding to the "getlist" semi-simultaneously.

They have to obtain a lock on the "getlist" before they can add new  
things to "get", then they release it.

Thanks,

S



From rburns at stic.net  Tue Oct  6 23:18:27 2009
From: rburns at stic.net (Ryan Burns)
Date: Tue, 6 Oct 2009 20:18:27 -0700
Subject: [Twisted-Python] using perspective broker to talk to a subprocess?
Message-ID: <87846F13-09DD-4F80-9437-9C731901A196@stic.net>

Hi All,

I'm writing a twisted application where I'd like to run and  
communicate with subprocesses that also happen to be twisted apps. I'm  
wondering if I can somehow combine twisted's process and perspective  
broker code so that I can launch a twisted server in a subprocess and  
communicate with it via the perspective broker using the subprocess's  
stdin/stdout. Ideally, it would be great if this could scale, say up  
to 200 subprocesses.

Disregarding reasons of why I would want to do this, is this something  
that is possible? I've looked at the perspective broker classes and  
the processProtocol as well as some of the helpers, but I don't quite  
see how to make it happen. Should I just use a socket instead and  
handle managing unique names/ports per subprocess on my own? Or any  
alternative ideas? Ultimately I just want to run subprocesses from my  
twisted app and communicate with them without having to do a bunch of  
parsing on my own and the subprocesses will be twisted as well, so I  
figure why not make use of twisted for my IPC.

Thanks,
Ryan


From matt at unshift.net  Tue Oct  6 23:23:44 2009
From: matt at unshift.net (Matt Perry)
Date: Tue, 6 Oct 2009 23:23:44 -0400
Subject: [Twisted-Python] Lots and lots and lots and lots... of deferreds
In-Reply-To: <076858B8-020C-4873-929F-B19271F705DD@integrateddevcorp.com>
References: <3d9b0f27$47ae1a4$685b66bd$@com>
	<20091007011558.24460.746569620.divmod.xquotient.154@boson>
	<EEF62EFB-31D9-493C-BF0E-BEB2654CA246@integrateddevcorp.com>
	<a8c89c8c0910062000hcc53f6dia5542c8aaa6ec1e2@mail.gmail.com>
	<076858B8-020C-4873-929F-B19271F705DD@integrateddevcorp.com>
Message-ID: <a8c89c8c0910062023q17b6afcfpa69f1aea4a174336@mail.gmail.com>

If everything is happening in a single thread, you probably don't need to
lock anything, because there's no shared access and therefore no race
conditions.  I have no idea how your app is written, so you may need them -
I don't know.  Just an observation.


 - Matt

On Tue, Oct 6, 2009 at 11:13 PM, Steve Steiner (listsin) <
listsin at integrateddevcorp.com> wrote:

>
> On Oct 6, 2009, at 11:00 PM, Matt Perry wrote:
>
> > One thing of note is that you say you have concurrency issues
> > handled -- but with asynchronous I/O, there are no concurrency
> > issues, since there's no concurrency (at least, not at application
> > level).  This is confusing at first but it's important to understand.
>
> The concurrency to which I was referring was having multiple deferreds
> adding to the "getlist" semi-simultaneously.
>
> They have to obtain a lock on the "getlist" before they can add new
> things to "get", then they release it.
>
> Thanks,
>
> S
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091006/f5f14eab/attachment.htm 

From andrew at bemusement.org  Tue Oct  6 23:25:53 2009
From: andrew at bemusement.org (Andrew Bennetts)
Date: Wed, 7 Oct 2009 14:25:53 +1100
Subject: [Twisted-Python] Lots and lots and lots and lots... of	deferreds
In-Reply-To: <EEF62EFB-31D9-493C-BF0E-BEB2654CA246@integrateddevcorp.com>
References: <3d9b0f27$47ae1a4$685b66bd$@com>
	<20091007011558.24460.746569620.divmod.xquotient.154@boson>
	<EEF62EFB-31D9-493C-BF0E-BEB2654CA246@integrateddevcorp.com>
Message-ID: <20091007032553.GO1931@steerpike.home.puzzling.org>

Steve Steiner (listsin) wrote:
[...]
> 	I expect the usual flurry of  "you must post your exact code or we  
> can't help you at all, moron" posts, but...

I'll try to restrain myself ;)

> 	In spite of my not having posted specific code, could someone with  
> some actual experience in this please give me a clue, within an order  
> of magnitude, how many deferreds might start to cause real trouble?

None.  Deferreds aren't the problem; they are just Python objects.  You can
probably have *millions* of them without great difficulty.  They are a symptom,
not a cause.

The problem is more likely the underlying operations that are linked to the
Deferreds.  My two top guesses are:

 1) the web server failing to cope with thousands of concurrent requests
    gracefully, or
 2) the number of sockets is hitting a system limit (number of FDs you can pass
    to select(), or hitting the max number of file descriptors, something like
    that)

in that order.

For the second one, assuming you're on Linux, you may benefit from a trivial
change to use the epoll reactor rather than the default one.  For the first one,
you're at the mercy of the webserver.  IIRC the RFCs say that clients SHOULD use
no more than two concurrent connections to a server...

Regardless, I imagine you're unlikely to get much performance benefit from
hammering a server with 1000 concurrent requests over something much smaller,
like 5 or 10.  So I'd use a DeferredSemaphore, or perhaps look into using
Cooperator, and not worry about solving the mystery how to make 1000s of
concurrent requests work.

Of course, if you give more specific info about how your code fails and what it
does I might be able to give more specific advice... ;)

-Andrew.



From stephenmattison at gmail.com  Tue Oct  6 23:30:30 2009
From: stephenmattison at gmail.com (Stephen Mattison)
Date: Tue, 6 Oct 2009 20:30:30 -0700
Subject: [Twisted-Python] Example of a long-polling asynchronous web servic?
Message-ID: <9502a4d30910062030l18098b1fh9d0f962a76c57eb@mail.gmail.com>

Hey guys I'm trying to implement some web-services over JSON-RPC, and one of
the methods needs to use server-push.

I will try and explain my problem as well as I can.

I have a client, which is an iPhone, natively running a JSON-RPC( or XML-RPC
) client implementation.

I need to do something like this from the iPhone

service = ServerProxy("http://mydomain.com/webservice")
init_data = service.subscribe_to_updates()
...
...
...
some_result = service.some_regular_function(params)

How can I implement this in Twisted?
-- 
Stephen Mattison
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091006/f7a96dc8/attachment.htm 

From listsin at integrateddevcorp.com  Tue Oct  6 23:38:49 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Tue, 6 Oct 2009 23:38:49 -0400
Subject: [Twisted-Python] Lots and lots and lots and lots... of deferreds
In-Reply-To: <d9047f780910061957t35603084h42114fdd8458cc65@mail.gmail.com>
References: <3d9b0f27$47ae1a4$685b66bd$@com>
	<20091007011558.24460.746569620.divmod.xquotient.154@boson>
	<EEF62EFB-31D9-493C-BF0E-BEB2654CA246@integrateddevcorp.com>
	<d9047f780910061957t35603084h42114fdd8458cc65@mail.gmail.com>
Message-ID: <96CEA763-6408-46BB-814D-39615C5428DA@integrateddevcorp.com>


On Oct 6, 2009, at 10:57 PM, Glyph Lefkowitz wrote:

> However, you can experiment with it pretty easily using  
> DeferredSemaphore: http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.defer.DeferredSemaphore.html

Cool, I didn't know about that, I'll give it a look.  Thanks!

> If your app is doing something strange that you don't understand,  
> you should instrument it until you understand it.

It's not that I don't understand what's supposed to be happening, or  
that it's doing something strange, it just seems that sites up to  
about 2000 pages work fine, then things get dicey.

I was just looking for some guidance on the "max-deferred" that has  
been found in practical experience more than anything else.

>  Regardless of any practical advice you may receive as a temporary  
> stopgap, there's always a chance that something else is going wrong,  
> and by reducing the number of concurrent requests you're just  
> decreasing its likelihood rather than properly fixing it.

I understand, and agree.  I'm not looking for a stopgap, just maybe a  
ballpark of "don't set more than 2000 in-flight deferreds at one time"  
type of guideline.

I understand that every situation is different, I'm working to limit  
my in-filght requests to a manageable number,

> It's highly unlikely that it's actually the number of Deferreds.  A  
> Deferred is just a Python object, so if you've got the RAM to store  
> them and their associated callbacks, you should be fine.

Yes, I understand that, thank you for clarifying.

> It's more likely that it has something to do with long callback  
> chains, or hitting some kind of file-descriptor limit

The callback chains are short, and I'm not getting a file-descriptor  
limit exception, or any exception that's getting percolated up.

> (what version of Twisted are you using?)

Sorry for not including this earlier...

# python -V
Python 2.6.1

 >>> import twisted
 >>> twisted.__version__
'8.2.0'

I'm running right out of the release versions for these tests since  
that's what my users will have installed.

> or perhaps that 5000 pages is just a lot of pages to request and you  
> might need to wait a while.

Yes, it is a lot of stuff...

What I'm working on determining is whether limiting the number of "in- 
flight" URL getters would beneficial.

Thanks,

S















>
> Good luck,
>
> -Glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091006/5f6e7844/attachment.htm 

From glyph at twistedmatrix.com  Tue Oct  6 23:46:43 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 6 Oct 2009 23:46:43 -0400
Subject: [Twisted-Python] Example of a long-polling asynchronous web
	servic?
In-Reply-To: <9502a4d30910062030l18098b1fh9d0f962a76c57eb@mail.gmail.com>
References: <9502a4d30910062030l18098b1fh9d0f962a76c57eb@mail.gmail.com>
Message-ID: <d9047f780910062046v4d1abf6dxd4e5f38ee7fd0765@mail.gmail.com>

On Tue, Oct 6, 2009 at 11:30 PM, Stephen Mattison <stephenmattison at gmail.com
> wrote:


> How can I implement this in Twisted?
>

You can use DeferredResource:


http://twistedmatrix.com/documents/8.2.0/api/twisted.web.util.DeferredResource.html

or you can return NOT_DONE_YET from Resource.render(), and hold on to the
request:


http://twistedmatrix.com/documents/8.2.0/api/twisted.web.resource.Resource.html#render

to leave the connection open until something happens.

For a more elaborate example of a long-polling server component, you could
see Nevow's Athena:

    http://www.divmod.org/trac/wiki/DivmodNevow/Athena

This does not implement JSON-RPC or XML-RPC, but it has lots of code for
managing the outstanding connection, which may give you some ideas.

-Glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091006/d6c7dfd8/attachment-0001.htm 

From glyph at twistedmatrix.com  Tue Oct  6 23:56:07 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 6 Oct 2009 23:56:07 -0400
Subject: [Twisted-Python] using perspective broker to talk to a
	subprocess?
In-Reply-To: <87846F13-09DD-4F80-9437-9C731901A196@stic.net>
References: <87846F13-09DD-4F80-9437-9C731901A196@stic.net>
Message-ID: <d9047f780910062056k551d2f2eh4941ff2aea360c1d@mail.gmail.com>

On Tue, Oct 6, 2009 at 11:18 PM, Ryan Burns <rburns at stic.net> wrote:


> Disregarding reasons of why I would want to do this, is this something
> that is possible?


Absolutely.  Here's an example that uses AMP rather than PB:

    https://launchpad.net/ampoule

If AMP is OK, you can just use Ampoule as-is; if not, you can replace the
AMP protocol classes it uses with the appropriate PB analogs.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091006/be43624a/attachment.htm 

From stephenmattison at gmail.com  Wed Oct  7 00:06:20 2009
From: stephenmattison at gmail.com (Stephen Mattison)
Date: Tue, 6 Oct 2009 21:06:20 -0700
Subject: [Twisted-Python] Example of a long-polling asynchronous web
	servic?
In-Reply-To: <d9047f780910062046v4d1abf6dxd4e5f38ee7fd0765@mail.gmail.com>
References: <9502a4d30910062030l18098b1fh9d0f962a76c57eb@mail.gmail.com>
	<d9047f780910062046v4d1abf6dxd4e5f38ee7fd0765@mail.gmail.com>
Message-ID: <9502a4d30910062106i451a3614kb8dbb2ba59669182@mail.gmail.com>

Hey Glyph thanks for responding so promptly! First if I understand correctly
on the server-side we have some code like:

def get_data_updates():
   if (!has_updates):
      return NO_DATA
   return json.encode(the_updates)

and on the client side

def poll_for_updates():
   while True:
      response = service.get_data_updates()
      if response != NO_DATA: break
      sleep(1)
   do_something_with_response(response)
   poll_for_updates()

As far as I can tell doing this has NO guarantee that all messages are
delivered unless every server->client connection maintains a stack of "new"
messages, whereas in a message-brokered setting the server just keeps
sending "global" updates as they occur, and the broker guarantees that
clients will receive every one. Where as in this situation, since the client
is asking the server for updates, unless the server strictly maintains all
of the updates for a specific client, some of them might be thrown on the
ground.

Am I correct here?



On Tue, Oct 6, 2009 at 8:46 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

> On Tue, Oct 6, 2009 at 11:30 PM, Stephen Mattison <
> stephenmattison at gmail.com> wrote:
>
>
>> How can I implement this in Twisted?
>>
>
> You can use DeferredResource:
>
>
> http://twistedmatrix.com/documents/8.2.0/api/twisted.web.util.DeferredResource.html
>
> or you can return NOT_DONE_YET from Resource.render(), and hold on to the
> request:
>
>
> http://twistedmatrix.com/documents/8.2.0/api/twisted.web.resource.Resource.html#render
>
> to leave the connection open until something happens.
>
> For a more elaborate example of a long-polling server component, you could
> see Nevow's Athena:
>
>     http://www.divmod.org/trac/wiki/DivmodNevow/Athena
>
> This does not implement JSON-RPC or XML-RPC, but it has lots of code for
> managing the outstanding connection, which may give you some ideas.
>
> -Glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Stephen Mattison
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091006/de70ddf6/attachment.htm 

From listsin at integrateddevcorp.com  Wed Oct  7 00:38:55 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Wed, 7 Oct 2009 00:38:55 -0400
Subject: [Twisted-Python] Lots and lots and lots and lots... of	deferreds
In-Reply-To: <20091007032553.GO1931@steerpike.home.puzzling.org>
References: <3d9b0f27$47ae1a4$685b66bd$@com>
	<20091007011558.24460.746569620.divmod.xquotient.154@boson>
	<EEF62EFB-31D9-493C-BF0E-BEB2654CA246@integrateddevcorp.com>
	<20091007032553.GO1931@steerpike.home.puzzling.org>
Message-ID: <9F409A57-0797-451E-997D-4323ABFC0F37@integrateddevcorp.com>


On Oct 6, 2009, at 11:25 PM, Andrew Bennetts wrote:

> Steve Steiner (listsin) wrote:
> [...]
>> 	I expect the usual flurry of  "you must post your exact code or we
>> can't help you at all, moron" posts, but...
>
> I'll try to restrain myself ;)

Thanks, I appreciate your restraint.  Must say, most posts without  
code drive me a little cuckoo, too.  I hope this one was justified in  
not including specific code.

>> My two top guesses are:
>
> 1) the web server failing to cope with thousands of concurrent  
> requests
>    gracefully, or

Ah, that would certainly make sense in this particular case.  I am  
asking the server for an *awful* lot of stuff all at one time.

> 2) the number of sockets is hitting a system limit (number of FDs  
> you can pass
>    to select(), or hitting the max number of file descriptors,  
> something like
>    that)

That may also be an issue, thank you for pointing that out.

> IIRC the RFCs say that clients SHOULD use no more than two  
> concurrent connections to a server...

As you said, the performance is going to be rate-limited by the  
server's ability to respond to requests anyway, so I think what I'll  
do is just make it so that the "get me a page" queue doesn't put more  
than a couple of requests "in-flight" at the same time.

Thanks for helping me think this out!

Thanks,

S



From rburns at stic.net  Wed Oct  7 01:08:13 2009
From: rburns at stic.net (Ryan Burns)
Date: Tue, 6 Oct 2009 22:08:13 -0700
Subject: [Twisted-Python] using perspective broker to talk to a
	subprocess?
In-Reply-To: <d9047f780910062056k551d2f2eh4941ff2aea360c1d@mail.gmail.com>
References: <87846F13-09DD-4F80-9437-9C731901A196@stic.net>
	<d9047f780910062056k551d2f2eh4941ff2aea360c1d@mail.gmail.com>
Message-ID: <5E9ACE79-F4DE-455C-98C7-1FBE4A0455F6@stic.net>

wow, ampoule looks like just what I need, and I think it will work  
fine as-is.

Thanks for the help,
Ryan



On Oct 6, 2009, at 8:56 PM, Glyph Lefkowitz wrote:

> On Tue, Oct 6, 2009 at 11:18 PM, Ryan Burns <rburns at stic.net> wrote:
>
> Disregarding reasons of why I would want to do this, is this something
> that is possible?
>
> Absolutely.  Here's an example that uses AMP rather than PB:
>
>     https://launchpad.net/ampoule
>
> If AMP is OK, you can just use Ampoule as-is; if not, you can  
> replace the AMP protocol classes it uses with the appropriate PB  
> analogs.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091006/44aab126/attachment.htm 

From spongelavapaul at googlemail.com  Wed Oct  7 15:30:46 2009
From: spongelavapaul at googlemail.com (Paul Thomas)
Date: Wed, 7 Oct 2009 20:30:46 +0100
Subject: [Twisted-Python] sleeping in inlineCallbacks
Message-ID: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>

Is there any way to do something like "yield sleep(10)" inside an  
@inlineCallbacks method?


From spongelavapaul at googlemail.com  Wed Oct  7 15:35:50 2009
From: spongelavapaul at googlemail.com (Paul Thomas)
Date: Wed, 7 Oct 2009 20:35:50 +0100
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
Message-ID: <A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>


On 7 Oct 2009, at 20:30, Paul Thomas wrote:

> Is there any way to do something like "yield sleep(10)" inside an  
> @inlineCallbacks method?

I realise I can do this:

def sleep(seconds):
     d = defer.Deferred()
     reactor.callLater(seconds, d.callback, seconds)
     return d

but I wondered if something like that is already in the libraries?


From matt at unshift.net  Wed Oct  7 15:46:05 2009
From: matt at unshift.net (Matt Perry)
Date: Wed, 7 Oct 2009 15:46:05 -0400
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>
Message-ID: <a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>

reactor.callLater() is the best way to delay a certain function call.
sleep() will block the entire program from running, which you probably don't
want to do.


On Wed, Oct 7, 2009 at 3:35 PM, Paul Thomas
<spongelavapaul at googlemail.com>wrote:

>
> On 7 Oct 2009, at 20:30, Paul Thomas wrote:
>
> > Is there any way to do something like "yield sleep(10)" inside an
> > @inlineCallbacks method?
>
> I realise I can do this:
>
> def sleep(seconds):
>     d = defer.Deferred()
>     reactor.callLater(seconds, d.callback, seconds)
>     return d
>
> but I wondered if something like that is already in the libraries?
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091007/336d4567/attachment.htm 

From asset at impactdamage.com  Wed Oct  7 15:59:12 2009
From: asset at impactdamage.com (asset)
Date: Wed, 7 Oct 2009 12:59:12 -0700
Subject: [Twisted-Python] Problem with XMLRPC resource wrapped with
	guard basic auth
Message-ID: <4451dd6f$6965490b$2639ba57$@com>

I was indeed being tricked. I actually tested soap with a real client, but 
with xmlrpc i was using the browser.  I was expecting to see the same error 
message, and instead got a new one that was presented by the modifications 
I pulled out of the trunk to support the issue in #4014.  I was expecting 
to see the older error message and it was replaced.

A quick test via,

>>> import xmlrpclib
>>> server = xmlrpclib.Server('http://user:password at localhost:9999/rpc2')
>>> server.quote()

Showed it indeed worked like it should. Swapped it to use SSL and now I'm 
all set.

Thank you for the clarification. Next time I'll test more before posting to 
the list. ;)

TWKiel

----------------------------------------
From: exarkun at twistedmatrix.com
Sent: Tuesday, October 06, 2009 6:43 PM
To: asset at impactdamage.com, "Twisted general discussion" 
<twisted-python at twistedmatrix.com>
Subject: Re: [Twisted-Python] Problem with XMLRPC resource wrapped with 
guard basic auth 

On 12:00 am, asset at impactdamage.com wrote:
>Using the current trunk r27366 (which is after #4014 fixed a related
>issue), I am having trouble with an implementation of web.guard wrapped
>XMLRPC.  This is a new test implementation to expose both a soap and 
>xmlrpc
>interface.  SOAP works, but xmlrpc throws UnsupportedMethod POST.

I think you're being tricked by the confusing way in which this 
exception is displayed and by a slight implementation difference (and 
indeed externally visible behavioral difference) between XMLRPC and 
SOAPPublisher.

SOAPPublisher defines "render" and no other render methods.  So it will 
accept any request method and treat it the same way.  It will never 
raise UnsupportedMethod.

XMLRPC, on the other hand, defines "render_POST" and no other render 
methods, so it will only accept POST requests.  For any other request, 
it will raise UnsupportedMethod and create that exception with a tuple 
of which methods it does allow.  ('POST',) in this case.

The exception I see when I approach this server at /rpc2 with my web 
browser (which is the only thing I've tried, because it's too much work 
to put together a real xml-rpc client that supports basic auth) is just 
what I'd expect.  The browser issues a GET, the XMLRPC resource rejects 
this, indicating it only accepts POSTs.

It may be worth improving the way UnsupportedMethod exceptions are 
stringified to make it more clear what's going on.  Or, if this doesn't 
actually explain your problem, feel free to point that out and provide 
more details about how the client you're using behaves.

Jean-Paul

 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091007/9e8a203c/attachment.htm 

From phil at bubblehouse.org  Wed Oct  7 18:04:41 2009
From: phil at bubblehouse.org (Phil Christensen)
Date: Wed, 7 Oct 2009 18:04:41 -0400
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>
	<a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
Message-ID: <5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>

On Oct 7, 2009, at 3:46 PM, Matt Perry wrote:
> On 7 Oct 2009, at 20:30, Paul Thomas wrote:

>> Is there any way to do something like "yield sleep(10)" inside an
>> @inlineCallbacks method?
>>
>> I realise I can do this:
>>
>> def sleep(seconds):
>>     d = defer.Deferred()
>>     reactor.callLater(seconds, d.callback, seconds)
>>     return d
>>
>> but I wondered if something like that is already in the libraries?
>

> reactor.callLater() is the best way to delay a certain function  
> call.  sleep() will block the entire program from running, which you  
> probably don't want to do.

Not in this case; note he's referring to his custom sleep() function,  
not time.sleep()

Paul's example will work just fine. Also, AFAIK there's no existing  
twisted function to do replicate an asynchronous sleep() in this way.

-phil


From exarkun at twistedmatrix.com  Wed Oct  7 18:29:11 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 07 Oct 2009 22:29:11 -0000
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>
	<a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
	<5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
Message-ID: <20091007222911.24460.1105732800.divmod.xquotient.208@boson>

On 10:04 pm, phil at bubblehouse.org wrote:
>On Oct 7, 2009, at 3:46 PM, Matt Perry wrote:
>>On 7 Oct 2009, at 20:30, Paul Thomas wrote:
>
>>>Is there any way to do something like "yield sleep(10)" inside an
>>>@inlineCallbacks method?
>>>
>>>I realise I can do this:
>>>
>>>def sleep(seconds):
>>>     d = defer.Deferred()
>>>     reactor.callLater(seconds, d.callback, seconds)
>>>     return d
>>>
>>>but I wondered if something like that is already in the libraries?
>>
>
>>reactor.callLater() is the best way to delay a certain function
>>call.  sleep() will block the entire program from running, which you
>>probably don't want to do.
>
>Not in this case; note he's referring to his custom sleep() function,
>not time.sleep()
>
>Paul's example will work just fine. Also, AFAIK there's no existing
>twisted function to do replicate an asynchronous sleep() in this way.

Recent versions of Twisted include twisted.internet.defer.deferLater, a 
function rather similar to the sleep function defined above.

Jean-Paul


From kevin.horn at gmail.com  Wed Oct  7 18:40:16 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 7 Oct 2009 17:40:16 -0500
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <20091007222911.24460.1105732800.divmod.xquotient.208@boson>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>
	<a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
	<5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
	<20091007222911.24460.1105732800.divmod.xquotient.208@boson>
Message-ID: <562bcc10910071540g7abd9bd3j3190602c7417a6e0@mail.gmail.com>

On Wed, Oct 7, 2009 at 5:29 PM, <exarkun at twistedmatrix.com> wrote:

> Recent versions of Twisted include twisted.internet.defer.deferLater, a
> function rather similar to the sleep function defined above.
>
> Jean-Paul
>
>
Do you mean twisted.internet.task.deferLater?
Or am I missing something?

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091007/140d3db9/attachment.htm 

From exarkun at twistedmatrix.com  Wed Oct  7 20:12:32 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 08 Oct 2009 00:12:32 -0000
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <562bcc10910071540g7abd9bd3j3190602c7417a6e0@mail.gmail.com>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>
	<a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
	<5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
	<20091007222911.24460.1105732800.divmod.xquotient.208@boson>
	<562bcc10910071540g7abd9bd3j3190602c7417a6e0@mail.gmail.com>
Message-ID: <20091008001232.24460.1267375784.divmod.xquotient.209@boson>

On 7 Oct, 10:40 pm, kevin.horn at gmail.com wrote:
>On Wed, Oct 7, 2009 at 5:29 PM, <exarkun at twistedmatrix.com> wrote:
>>Recent versions of Twisted include twisted.internet.defer.deferLater, 
>>a
>>function rather similar to the sleep function defined above.
>>
>>Jean-Paul
>Do you mean twisted.internet.task.deferLater?
>Or am I missing something?

Nope, you're right.  Thanks for the correction.

Jean-Paul


From termim at gmail.com  Wed Oct  7 23:08:28 2009
From: termim at gmail.com (Mikhail Terekhov)
Date: Wed, 7 Oct 2009 23:08:28 -0400
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>
	<a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
	<5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
Message-ID: <12aaa0810910072008o5b6af468u9f78e29b385f9323@mail.gmail.com>

On Wed, Oct 7, 2009 at 6:04 PM, Phil Christensen <phil at bubblehouse.org>wrote:

>
> Paul's example will work just fine. Also, AFAIK there's no existing
> twisted function to do replicate an asynchronous sleep() in this way.
>
> -phil
>

What about Deferred.setTimeout?
http://twistedmatrix.com/documents/current/api/twisted.internet.defer.Deferred.html#setTimeout
IMHO it solves similar problem.

-- 
Mikhail Terekhov
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091007/72e3b0a0/attachment-0001.htm 

From glyph at twistedmatrix.com  Wed Oct  7 23:12:45 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 7 Oct 2009 23:12:45 -0400
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <12aaa0810910072008o5b6af468u9f78e29b385f9323@mail.gmail.com>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>
	<a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
	<5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
	<12aaa0810910072008o5b6af468u9f78e29b385f9323@mail.gmail.com>
Message-ID: <d9047f780910072012p607658c9xaf4b6832c838fb03@mail.gmail.com>

On Wed, Oct 7, 2009 at 11:08 PM, Mikhail Terekhov <termim at gmail.com> wrote:

>
> What about Deferred.setTimeout?
> http://twistedmatrix.com/documents/current/api/twisted.internet.defer.Deferred.html#setTimeout
> IMHO it solves similar problem.
>

Deferred.setTimeout does something else.  More importantly, it is
deprecated.  Furthermore, it's fundamentally broken and cannot be made to
work in a reliable way.  Don't use it, or your Twisted programs will break
in a future release of Twisted Core.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091007/5aa443e4/attachment.htm 

From andrew at bemusement.org  Wed Oct  7 23:28:22 2009
From: andrew at bemusement.org (Andrew Bennetts)
Date: Thu, 8 Oct 2009 14:28:22 +1100
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <12aaa0810910072008o5b6af468u9f78e29b385f9323@mail.gmail.com>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>
	<a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
	<5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
	<12aaa0810910072008o5b6af468u9f78e29b385f9323@mail.gmail.com>
Message-ID: <20091008032822.GQ1931@steerpike.home.puzzling.org>

Mikhail Terekhov wrote:
>    On Wed, Oct 7, 2009 at 6:04 PM, Phil Christensen <[1]phil at bubblehouse.org>
>    wrote:
> 
>      Paul's example will work just fine. Also, AFAIK there's no existing
>      twisted function to do replicate an asynchronous sleep() in this way.
> 
>      -phil
> 
>    What about Deferred.setTimeout?
>    [2]http://twistedmatrix.com/documents/current/api/twisted.internet.defer.Deferred.html#setTimeout
>    IMHO it solves similar problem.

Deferred.setTimeout is a poor API and is deprecated (despite what the
automatically generated API docs think).
<http://twistedmatrix.com/trac/ticket/178> has some discussion (and links to
more discussion) explaining what's wrong with it, and what a good replacement
would look like.

So please, don't use setTimeout, and definitely do not recommend it to others!

-Andrew.



From jacopo.pecci at gmail.com  Thu Oct  8 02:35:18 2009
From: jacopo.pecci at gmail.com (Jacopo Pecci)
Date: Thu, 8 Oct 2009 09:35:18 +0300
Subject: [Twisted-Python] PB vs JMS
In-Reply-To: <368574aa0910051021g702e4fffx6df865f5dfe60588@mail.gmail.com>
References: <0016e6d640873a273304752fe3d3@google.com>
	<368574aa0910051021g702e4fffx6df865f5dfe60588@mail.gmail.com>
Message-ID: <295c22190910072335u14885af4yf16258d250ca8aa2@mail.gmail.com>

On Mon, Oct 5, 2009 at 8:21 PM, Drew Smathers <drew.smathers at gmail.com> wrote:
>
>
> On Mon, Oct 5, 2009 at 9:14 AM, <jacopo.pecci at gmail.com> wrote:
>>
>> I looked at PB for an architecture with one client distributing some
>> processing to several servers. Now I came across JMS and I have seen that
>> using ActiveMQ with the Stomp protocol there would be a good support for
>> Python.
>> Surprising I couldn?t find any article comparing the two technologies. I
>> wonder if they target different problems (it doesn?t look to me).
>> Is anyone able to sketch advantages of one solution against the other?
>>
>
> I don't think there is a good comparison between the two because they're
> different technologies addressing different problems.? JMS is a messaging
> middleware defined at the Java language API level (hence the need to for
> STOMP protocol and similar adapting layers for use with Python or other
> non-Java languages).? PB is a "secure, easy-to-use Remote Procedure Call
> (RPC) mechanism."
>
> For the system you're descibing it seems like message middleware is more
> what you want.? Unless you want to implement your own load balacing, work
> distribution and failover algorithms?? Another alternative to ActiveMQ is
> RabbitMQ which implements AMQP, which a Python client can speak directly
> without using a limited protocol like STOMP.? There's also handful of good
> AMQP python libs including one for use in Twisted: txamqp.
>
> -Drew
>
>

Thank you Drew.
I should have sketched a bit more:  I have to compute many
self-contained jobs and then elaborate their results.
Jobs are  distributed to many machines and  results are sent back to
the Master. The Master should not wait for all the results to be ready
but should start processing as soon as the first one arrives.  After
all the results have been collected and processed, everything starts
over with newer data.

I have implemented a mock example with PB but if I understand
correctly a messaging system would put me to a higher level of
abstraction taking care of many technicalities. I am now looking at
rabbitmq and txamqp, it is a bit hard to find some documentations but
slowly i am getting the full picture.

Thanks Jacopo


From mr.file at gmail.com  Thu Oct  8 05:04:12 2009
From: mr.file at gmail.com (Fabrizio Mancini)
Date: Thu, 8 Oct 2009 11:04:12 +0200
Subject: [Twisted-Python] PB vs JMS
In-Reply-To: <295c22190910072335u14885af4yf16258d250ca8aa2@mail.gmail.com>
References: <0016e6d640873a273304752fe3d3@google.com>
	<368574aa0910051021g702e4fffx6df865f5dfe60588@mail.gmail.com>
	<295c22190910072335u14885af4yf16258d250ca8aa2@mail.gmail.com>
Message-ID: <793463d60910080204w37469687s2413befc312be8e8@mail.gmail.com>

>
> Thank you Drew.
> I should have sketched a bit more:  I have to compute many
> self-contained jobs and then elaborate their results.
> Jobs are  distributed to many machines and  results are sent back to
> the Master. The Master should not wait for all the results to be ready
> but should start processing as soon as the first one arrives.  After
> all the results have been collected and processed, everything starts
> over with newer data.
>
> I have implemented a mock example with PB but if I understand
> correctly a messaging system would put me to a higher level of
> abstraction taking care of many technicalities. I am now looking at
> rabbitmq and txamqp, it is a bit hard to find some documentations but
> slowly i am getting the full picture.
>
> Thanks Jacopo
>
> Hi Jacopo,
this article problably can give you a big picture
http://blogs.digitar.com/jjww/2009/01/rabbits-and-warrens/
AMQP helps you distribute messages to clients that are network connected and
can do some jobs when receiving messages.
So you can distribute data to your clients using the json protocol to send
messages containing data to the clients. And from the computing client you
can send back the results always using the json protocol. This only if you
don't want to use a central database... but this depends on how you design
your app.
HTH
Fabrizio
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091008/053175f4/attachment.htm 

From exarkun at twistedmatrix.com  Thu Oct  8 08:15:47 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 08 Oct 2009 12:15:47 -0000
Subject: [Twisted-Python] inlineCallbacks
In-Reply-To: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
Message-ID: <20091008121547.24460.166029432.divmod.xquotient.219@boson>

On 6 Oct, 02:47 pm, petshmidt at googlemail.com wrote:
>Hi,
>
>calling in client code self.cred.login() I can't print login result.
>What I'm doing wrong? login method returns deffered, but should yield
>result from callRemote method.
>
>Thanks for any help!
>
>Pet
>
>class Cred:
>
>    @inlineCallbacks
>    def login(self):
>        proxy = Proxy(LOGIN_PROXY)
>        l = {"user":LOGIN_USERNAME, "pass":LOGIN_PASSWD}
>        loginResult = yield proxy.callRemote('login', l)
>        print "RESULT", loginResult.result
>        returnValue(loginResult)

It's hard to tell what's going wrong since this example isn't complete. 
If I assume I know what Proxy does, then the code basically looks right 
- although I suspect you only want to print "loginResult", not 
"loginResult.result".  If you can post an sscce - http://sscce.org/ - 
someone might be able to be of more help.

Jean-Paul


From petshmidt at googlemail.com  Thu Oct  8 10:08:23 2009
From: petshmidt at googlemail.com (Pet)
Date: Thu, 8 Oct 2009 16:08:23 +0200
Subject: [Twisted-Python] inlineCallbacks
In-Reply-To: <20091008121547.24460.166029432.divmod.xquotient.219@boson>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com> 
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
Message-ID: <b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>

On Thu, Oct 8, 2009 at 2:15 PM,  <exarkun at twistedmatrix.com> wrote:
> On 6 Oct, 02:47 pm, petshmidt at googlemail.com wrote:
>>Hi,
>>
>>calling in client code self.cred.login() I can't print login result.
>>What I'm doing wrong? login method returns deffered, but should yield
>>result from callRemote method.
>>
>>Thanks for any help!
>>
>>Pet
>>
>>class Cred:
>>
>> ? ?@inlineCallbacks
>> ? ?def login(self):
>> ? ? ? ?proxy = Proxy(LOGIN_PROXY)
>> ? ? ? ?l = {"user":LOGIN_USERNAME, "pass":LOGIN_PASSWD}
>> ? ? ? ?loginResult = yield proxy.callRemote('login', l)
>> ? ? ? ?print "RESULT", loginResult.result
>> ? ? ? ?returnValue(loginResult)
>
> It's hard to tell what's going wrong since this example isn't complete.
> If I assume I know what Proxy does, then the code basically looks right
> - although I suspect you only want to print "loginResult", not
> "loginResult.result". ?If you can post an sscce - http://sscce.org/ -
> someone might be able to be of more help.

Hi,

I've misunderstood the concept of inlinecallbacks. I've thought they
makes deferred blocking "again" so execution of code stops until
result is available and didn't catch any errors of Proxy. Because
connection failed, there was no error and no result. I've finally
realized that inlinecallbacks do not change behavior of deferred and
now I simply use my login function as deferred with callbacks and
errbacks

Pet

>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From amacbeth at gmail.com  Thu Oct  8 15:54:59 2009
From: amacbeth at gmail.com (Adam MacBeth)
Date: Thu, 8 Oct 2009 12:54:59 -0700
Subject: [Twisted-Python] IMAP IDLE client support
Message-ID: <4ef057f60910081254y2e9ccb86h408bd717e046a479@mail.gmail.com>

It doesn't appear that Twisted's IMAP client
(twisted.mail.imap.IMAP4Client) supports the IDLE command.

Are there any plans for this or does anyone have any thoughts on the
complexity of implementing it?

Thanks,
Adam


From listsin at integrateddevcorp.com  Thu Oct  8 17:31:37 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Thu, 8 Oct 2009 17:31:37 -0400
Subject: [Twisted-Python] HTTPClientFactory's deferred never finishing
	download on .vcf (vcard file) link
In-Reply-To: <b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
Message-ID: <5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>

I'm attempting to get some web pages using the following code which I  
did not write.  While it seems to work (except for this, so far) I  
have no idea if this is a reasonable way to do this (get simple web  
pages) at all:

def getPage(url, contextFactory=None, *args, **kwargs):
     """
     Download a web page as a string.

     Download a page. Return a deferred, which will callback with a
     page (as a string) or errback with a description of the error.

     See HTTPClientFactory to see what extra args can be passed.
     """
     scheme, host, port, path = parse_url(url)
     factory = HTTPClientFactory(url, *args, **kwargs)
     if scheme == 'https':
         from twisted.internet import ssl
         if contextFactory is None:
             contextFactory = ssl.ClientContextFactory()
         reactor.connectSSL(host, port, factory, contextFactory)
     else:
         reactor.connectTCP(host, port, factory)

     return factory.deferred

The code then adds a bunch of callbacks to the returned deferred to do  
various things  to the data and everything's swell.

Until the url shown below occurs.  The deferred never calls any of the  
callbacks and just never seems to finish.

I haven't found any way to dump the actual headers from within Twisted  
as this occurs so the header values shown below are from firefox  
calling into the same URL.  I will put tcpdump in the way if I need to  
to figure this out but I'm thinking this is something simple (or wrong  
with the method used in the code above).

Can anyone tell me what it is about this particular transaction that's  
not allowing the deferred to fire its callbacks which I presume is  
because it never finishes getting the stuff it's looking for.  This  
particular URL returns a .vcf file.

Also, what is the proper intervention?  I'd like not to download  
the .vcf as it's completely useless for my purpose but I'm not  
familiar enough with twisted.web to know where to intervene.


Thanks,

S

http://www.integrateddevcorp.com/index.php?option=com_contact&task=vcard&contact_id=1&format=raw&tmpl=component

GET /index.php? 
option=com_contact&task=vcard&contact_id=1&format=raw&tmpl=component  
HTTP/1.1
Host: www.integrateddevcorp.com
User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.6; en-US; rv: 
1.9.1.3) Gecko/20090824 Firefox/3.5.3
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip,deflate
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7
Keep-Alive: 300
Connection: keep-alive

HTTP/1.x 200 OK
Date: Thu, 08 Oct 2009 21:14:37 GMT
Server: Apache
X-Powered-By: PHP/5.2.8
Set-Cookie:  
ff70eb7218d444fa639af7ae7e66e82f=488606e54b7fdd9affb0b0725a2a6607;  
path=/
P3P: CP="NOI ADM DEV PSAi COM NAV OUR OTRo STP IND DEM"
Content-Disposition: attachment;  
filename=Integrated_Development_Corporation.vcf
Content-Length: 1020
Connection: close
Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre- 
check=0
Pragma: no-cache
Expires: Mon, 1 Jan 2001 00:00:00 GMT
Last-Modified: Thu, 08 Oct 2009 21:14:37 GMT
Content-Type: text/html; charset=utf-8
----------------------------------------------------------



From ellisonbg.net at gmail.com  Thu Oct  8 19:23:39 2009
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Thu, 8 Oct 2009 16:23:39 -0700
Subject: [Twisted-Python] Disturbing aspect of zope.interface
Message-ID: <6ce0ac130910081623sba5fb11g2c10b76013c318f3@mail.gmail.com>

Hi,

I know this is not the zope list, but I am encountering this in a twisted
project, so I
wanted to get some ideas here first.  I am finding that zope.interface is
like
an infectious disease.  Here is a simple example:

In [35]: import zope.interface as zi

In [37]: class A(object):
   ....:         pass

In [38]: class IB(zi.Interface):
   ....:         pass

In [39]: hasattr(A, '__provides__')
Out[39]: False

In [41]: # Inheriting from A gives A additional methods

In [42]: class B(A):
   ....:         zi.implements(IB)

In [43]: hasattr(A, '__provides__')
Out[43]: True

In [45]: # C is clean of the additional methods

In [46]: class C(object):
   ....:         pass

In [47]: hasattr(C, '__provides__')
Out[47]: False

The disturbing thing is that now A (which is just an object) has been hacked
on
by zope.interface.  It has additional methods (__provides__, etc.) that are
specific to
zope.

Summary: If a class A is later subclassed by something B that calls
zi.implements, the original class A
becomes infected with all the zope.interface stuff.

Is there a way to avoid this?  Doesn't this seem like a bad idea?

Cheers,

Brian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091008/fd0ac4c5/attachment.htm 

From glyph at twistedmatrix.com  Thu Oct  8 19:57:52 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 8 Oct 2009 19:57:52 -0400
Subject: [Twisted-Python] Disturbing aspect of zope.interface
In-Reply-To: <6ce0ac130910081623sba5fb11g2c10b76013c318f3@mail.gmail.com>
References: <6ce0ac130910081623sba5fb11g2c10b76013c318f3@mail.gmail.com>
Message-ID: <d9047f780910081657x2516218vb020d38aa664403b@mail.gmail.com>

On Thu, Oct 8, 2009 at 7:23 PM, Brian Granger <ellisonbg.net at gmail.com>wrote:

> I know this is not the zope list
>

You're right, it's not.  Perhaps you could send a message to the interface
package development list?

    https://mail.zope.org/mailman/listinfo/interface-dev

The disturbing thing is that now A (which is just an object) has been hacked
> on
> by zope.interface.  It has additional methods (__provides__, etc.) that are
> specific to
> zope.
>

Why does this disturb you?  Would you feel better if it were called
__zope_provides__?

Summary: If a class A is later subclassed by something B that calls
> zi.implements, the original class A
> becomes infected with all the zope.interface stuff.
>

A gets an additional attribute.  Its behavior doesn't change in any other
way.  I don't really see what's wrong with that, unless you have a differing
definition of the __provides__ attribute in your code.

Is there a way to avoid this?


Depending on what your definition of "this" is, there almost certainly is.
In the simplest case, you could submit a patch to zope interface.

Doesn't this seem like a bad idea?
>

No.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091008/f97830cd/attachment.htm 

From markv at lumierevfx.com  Thu Oct  8 19:59:03 2009
From: markv at lumierevfx.com (Mark Visser)
Date: Thu, 08 Oct 2009 19:59:03 -0400
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <6ce0ac130910081623sba5fb11g2c10b76013c318f3@mail.gmail.com>
References: <6ce0ac130910081623sba5fb11g2c10b76013c318f3@mail.gmail.com>
Message-ID: <4ACE7CC7.30705@lumierevfx.com>

Is there a project underway to modernize twisted?

I've been bitten a couple times by twisted's use of old-style classes. 
Now that Jython is finally off the 2.2 branch, is there any real reason 
to stay backwards compatible?

cheers,
-Mark

-- 
Mark Visser, Software Director
Lumi?re VFX
Email: markv at lumierevfx.com
Phone: +1-514-316-1080 x3030



From glyph at twistedmatrix.com  Thu Oct  8 20:08:12 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 8 Oct 2009 20:08:12 -0400
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <4ACE7CC7.30705@lumierevfx.com>
References: <6ce0ac130910081623sba5fb11g2c10b76013c318f3@mail.gmail.com>
	<4ACE7CC7.30705@lumierevfx.com>
Message-ID: <d9047f780910081708g688b8a54l3767b0a81cce6698@mail.gmail.com>

On Thu, Oct 8, 2009 at 7:59 PM, Mark Visser <markv at lumierevfx.com> wrote:

> Is there a project underway to modernize twisted?
>

Yes.  The project is called "twisted" :).  Personally I find that it is very
"modern".

I've been bitten a couple times by twisted's use of old-style classes.
> Now that Jython is finally off the 2.2 branch, is there any real reason
> to stay backwards compatible?
>

Changing a class from old-style to new-style is an incompatible change.  The
difficulty is that if existing libraries use a particular class and inherit
from it, changing the class to be new-style can have effects from changing
how their descriptors work to causing an exception when their module is
imported.

We have a compatibility policy, intended to prevent people's applications
from breaking when they upgrade Twisted:
http://twistedmatrix.com/trac/wiki/CompatibilityPolicy

If old-style classes can be evolved into new-style classes while somehow
following this policy, that would be great.  The problem is that providing
compatibility at this level is time-consuming and difficult.  One problem in
particular is that we don't want to litter the codebase with lots of "Foo"
and "NewFoo" or "Foo2" sitting right next to it, so we would have to think
of new names for everything.

If you have a particular interest in the new-style vs. old-style problem,
please feel free to submit patches!  This is one of those areas where we
need a continuous stream of small improvements from the community, because
it's just too much drudgework for the core team to take care of in our spare
time.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091008/27523248/attachment.htm 

From foom at fuhm.net  Thu Oct  8 20:13:31 2009
From: foom at fuhm.net (James Y Knight)
Date: Thu, 8 Oct 2009 20:13:31 -0400
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <4ACE7CC7.30705@lumierevfx.com>
References: <6ce0ac130910081623sba5fb11g2c10b76013c318f3@mail.gmail.com>
	<4ACE7CC7.30705@lumierevfx.com>
Message-ID: <72782FFC-8211-49AC-B1E2-7C8BD812ED50@fuhm.net>

On Oct 8, 2009, at 7:59 PM, Mark Visser wrote:
> I've been bitten a couple times by twisted's use of old-style classes.
> Now that Jython is finally off the 2.2 branch, is there any real  
> reason
> to stay backwards compatible?

I don't see any reason to make this change for twisted running on the  
2.x branch of CPython.

Switching all the classes in twisted to newstyle before then could  
break some user's code or tests, and doesn't really provide any  
benefits as far as I can tell.

For Python 3.x, oldstyle classes don't exist, so that'll happen  
automatically during the conversion.

Apparently in PyPy, oldstyle classes are significantly slower than  
newstyle classes. So it might be interesting for them to force  
everything in twisted.* to be newstyle classes and see what breaks. :)

James


From markv at lumierevfx.com  Thu Oct  8 21:03:58 2009
From: markv at lumierevfx.com (Mark Visser)
Date: Thu, 08 Oct 2009 21:03:58 -0400
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <72782FFC-8211-49AC-B1E2-7C8BD812ED50@fuhm.net>
References: <6ce0ac130910081623sba5fb11g2c10b76013c318f3@mail.gmail.com>	<4ACE7CC7.30705@lumierevfx.com>
	<72782FFC-8211-49AC-B1E2-7C8BD812ED50@fuhm.net>
Message-ID: <4ACE8BFE.3010200@lumierevfx.com>


> For Python 3.x, oldstyle classes don't exist, so that'll happen  
> automatically during the conversion.
>   
Aha! Let me rephrase that, then:

Is there a project underway to port Twisted to Python 3.x?

cheers,
-Mark

-- 
Mark Visser, Software Director
Lumi?re VFX
Email: markv at lumierevfx.com
Phone: +1-514-316-1080 x3030



From listsin at integrateddevcorp.com  Thu Oct  8 21:18:57 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Thu, 8 Oct 2009 21:18:57 -0400
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <4ACE8BFE.3010200@lumierevfx.com>
References: <6ce0ac130910081623sba5fb11g2c10b76013c318f3@mail.gmail.com>	<4ACE7CC7.30705@lumierevfx.com>
	<72782FFC-8211-49AC-B1E2-7C8BD812ED50@fuhm.net>
	<4ACE8BFE.3010200@lumierevfx.com>
Message-ID: <E9CC8DF1-94E6-49BA-81C2-42F3BD246746@integrateddevcorp.com>


On Oct 8, 2009, at 9:03 PM, Mark Visser wrote:

>
>> For Python 3.x, oldstyle classes don't exist, so that'll happen
>> automatically during the conversion.
>>
> Aha! Let me rephrase that, then:
>
> Is there a project underway to port Twisted to Python 3.x?

Yes, it's called Twisted.

S




From matt at unshift.net  Thu Oct  8 21:28:10 2009
From: matt at unshift.net (Matt Perry)
Date: Thu, 8 Oct 2009 21:28:10 -0400
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <E9CC8DF1-94E6-49BA-81C2-42F3BD246746@integrateddevcorp.com>
References: <6ce0ac130910081623sba5fb11g2c10b76013c318f3@mail.gmail.com>
	<4ACE7CC7.30705@lumierevfx.com>
	<72782FFC-8211-49AC-B1E2-7C8BD812ED50@fuhm.net>
	<4ACE8BFE.3010200@lumierevfx.com>
	<E9CC8DF1-94E6-49BA-81C2-42F3BD246746@integrateddevcorp.com>
Message-ID: <a8c89c8c0910081828n4e2787efw78e99589ff0a620d@mail.gmail.com>

Mark, you might find this link helpful:
http://stackoverflow.com/questions/172306/how-are-you-planning-on-handling-the-migration-to-python-3/214601#214601

Seems to me that the answer is no, there isn't a serious effort underway to
port to Python 3, and there probably won't be for a while.  My guess is that
porting efforts will be rather pedestrian (e.g., running 2to3 and fixing a
few things here and there) for a while until Python 3 gains some momentum,
or unless there's a lot of community contributions for it.


  - Matt




On Thu, Oct 8, 2009 at 9:18 PM, Steve Steiner (listsin) <
listsin at integrateddevcorp.com> wrote:

>
> On Oct 8, 2009, at 9:03 PM, Mark Visser wrote:
>
> >
> >> For Python 3.x, oldstyle classes don't exist, so that'll happen
> >> automatically during the conversion.
> >>
> > Aha! Let me rephrase that, then:
> >
> > Is there a project underway to port Twisted to Python 3.x?
>
> Yes, it's called Twisted.
>
> S
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091008/b738cbeb/attachment.htm 

From itamar at itamarst.org  Thu Oct  8 23:00:32 2009
From: itamar at itamarst.org (Itamar Turner-Trauring (aka Shtull-Trauring))
Date: Thu, 08 Oct 2009 23:00:32 -0400
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <4ACE8BFE.3010200@lumierevfx.com>
References: <6ce0ac130910081623sba5fb11g2c10b76013c318f3@mail.gmail.com>
	<4ACE7CC7.30705@lumierevfx.com>
	<72782FFC-8211-49AC-B1E2-7C8BD812ED50@fuhm.net>
	<4ACE8BFE.3010200@lumierevfx.com>
Message-ID: <1255057232.2243.67.camel@pintsize>

On Thu, 2009-10-08 at 21:03 -0400, Mark Visser wrote:

> Is there a project underway to port Twisted to Python 3.x?

Not at the moment. Supporting both 2.x and 3.x is harder than it should
be, and all of Twisted's users (and almost all Python users) use 2.x.

-Itamar



From exarkun at twistedmatrix.com  Thu Oct  8 23:45:02 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 09 Oct 2009 03:45:02 -0000
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <4ACE8BFE.3010200@lumierevfx.com>
References: <6ce0ac130910081623sba5fb11g2c10b76013c318f3@mail.gmail.com>
	<4ACE7CC7.30705@lumierevfx.com>
	<72782FFC-8211-49AC-B1E2-7C8BD812ED50@fuhm.net>
	<4ACE8BFE.3010200@lumierevfx.com>
Message-ID: <20091009034502.24460.508537305.divmod.xquotient.226@boson>

On 01:03 am, markv at lumierevfx.com wrote:
>
>>For Python 3.x, oldstyle classes don't exist, so that'll happen
>>automatically during the conversion.
>Aha! Let me rephrase that, then:
>
>Is there a project underway to port Twisted to Python 3.x?

It would be misleading to characterize any part of Twisted development 
as "a project underway".  Twisted is a project, certainly.  It may even 
be underway itself.  Beyond that point, I don't think the metaphor is 
terribly useful or applicable.  People work on Twisted.  Sometimes they 
do it with a long term plan.  More often than not, they just have a 
feature they want to add or a bug they want to fix.

However, if I were to make up a plan for porting Twisted to Python 3.x, 
then the first part of that plan would be to fix all of the failing 
tests reported here:

http://buildbot.twistedmatrix.com/builders/python-3k- 
warnings/builds/203/steps/trial/logs/problems

These are tests which fail when Twisted's test suite is run with the -3 
option on Python 2.6.  Tickets for these failures and patches fixing 
them would be greatly appreciated.

Once that's out of the way, it will make sense to talk about what the 
next step is.

Jean-Paul


From ellisonbg.net at gmail.com  Fri Oct  9 01:53:48 2009
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Thu, 8 Oct 2009 22:53:48 -0700
Subject: [Twisted-Python] Disturbing aspect of zope.interface
In-Reply-To: <d9047f780910081657x2516218vb020d38aa664403b@mail.gmail.com>
References: <6ce0ac130910081623sba5fb11g2c10b76013c318f3@mail.gmail.com>
	<d9047f780910081657x2516218vb020d38aa664403b@mail.gmail.com>
Message-ID: <6ce0ac130910082253w5ddf3755s41c23974c3c13d9b@mail.gmail.com>

> On Thu, Oct 8, 2009 at 7:23 PM, Brian Granger <ellisonbg.net at gmail.com>wrote:
>
>> I know this is not the zope list
>>
>
> You're right, it's not.  Perhaps you could send a message to the interface
> package development list?
>
>     https://mail.zope.org/mailman/listinfo/interface-dev
>
>
Yes, I will do that.  I wanted to get an opinion here first from the "users
of zope.interface" first though
to see if anyone else had run into these things in the wild.


> The disturbing thing is that now A (which is just an object) has been
>> hacked on
>> by zope.interface.  It has additional methods (__provides__, etc.) that
>> are specific to
>> zope.
>>
>
> Why does this disturb you?  Would you feel better if it were called
> __zope_provides__?
>
>
Maybe a little bit, but name collisions are a minor concern in my case...


> Summary: If a class A is later subclassed by something B that calls
>> zi.implements, the original class A
>> becomes infected with all the zope.interface stuff.
>>
>
> A gets an additional attribute.  Its behavior doesn't change in any other
> way.  I don't really see what's wrong with that, unless you have a differing
> definition of the __provides__ attribute in your code.
>
>
...but __provides__ is not exactly a "plain old attribute":

* The __provides__ attribute is a descriptor that sometimes raises
AttributeError even though it exists.
This is how I found all of this.  I called dir on my class and __provides__
was listed.  But
hasattr(cls, '__provides') returned False.  I consider this to be a separate
bug, but because __provides__
started to appear on all of my classes, I was seeing it *everywhere*.

* The internal implementation of __provides__ is handled by a custom
__metaclass__ hook.
zope.interface tries to be pretty careful in not actually *using* a custom
metaclass, but it
does set and then later remove the __metaclass__ hook.

In my mind, both of these things are in the "unwanted side effect" category.


> Is there a way to avoid this?
>
>
> Depending on what your definition of "this" is, there almost certainly is.
> In the simplest case, you could submit a patch to zope interface.
>
>
That is definitely a likely outcome of this discussion.  For now though, I
was just wondering
if other's had run into this issue.  For now, it sounds like not.

Cheers,

Brian


> Doesn't this seem like a bad idea?
>>
>
> No.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091008/7e6efe88/attachment.htm 

From rlotun at gmail.com  Fri Oct  9 05:53:44 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Fri, 9 Oct 2009 10:53:44 +0100
Subject: [Twisted-Python] HTTPClientFactory's deferred never finishing
	download on .vcf (vcard file) link
In-Reply-To: <5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
Message-ID: <95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>

Hi,


On Thu, Oct 8, 2009 at 10:31 PM, Steve Steiner (listsin)
<listsin at integrateddevcorp.com> wrote:
> I haven't found any way to dump the actual headers from within Twisted

The getPage function in twisted.web is suited for simple calls but
won't return returns. What you have to do is create your own slightly
modified version of getPage that keeps track of the factory used for
the call (by attaching it to the deferred or something).

> Can anyone tell me what it is about this particular transaction that's
> not allowing the deferred to fire its callbacks which I presume is
> because it never finishes getting the stuff it's looking for. ?This
> particular URL returns a .vcf file.

Well, without seeing the complete code example that's failing I can't
really tell you. The best I can say is that you should make sure to
attach errBacks that log any errors you see (i.e. it could be as
simple as going 'print result.getTraceback()').

Cheers,
Reza

-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   reza at tweetdeck.com
twitter: @rlotun


From rlotun at gmail.com  Fri Oct  9 05:54:29 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Fri, 9 Oct 2009 10:54:29 +0100
Subject: [Twisted-Python] HTTPClientFactory's deferred never finishing
	download on .vcf (vcard file) link
In-Reply-To: <95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
Message-ID: <95bb10690910090254g23895fa3nac658ff6a7f4507f@mail.gmail.com>

On Fri, Oct 9, 2009 at 10:53 AM, Reza Lotun <rlotun at gmail.com> wrote:
> won't return returns. What you have to do is create your own slightly

I meant won't return headers ;-)

Reza

-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   reza at tweetdeck.com
twitter: @rlotun


From screwtape at froup.com  Fri Oct  9 07:56:10 2009
From: screwtape at froup.com (Tim Allen)
Date: Fri, 9 Oct 2009 22:56:10 +1100
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <20091009034502.24460.508537305.divmod.xquotient.226@boson>
References: <6ce0ac130910081623sba5fb11g2c10b76013c318f3@mail.gmail.com>
	<4ACE7CC7.30705@lumierevfx.com>
	<72782FFC-8211-49AC-B1E2-7C8BD812ED50@fuhm.net>
	<4ACE8BFE.3010200@lumierevfx.com>
	<20091009034502.24460.508537305.divmod.xquotient.226@boson>
Message-ID: <20091009115610.GA28048@thristian.org>

On Fri, Oct 09, 2009 at 03:45:02AM -0000, exarkun at twistedmatrix.com wrote:
> However, if I were to make up a plan for porting Twisted to Python 3.x, 
> then the first part of that plan would be to fix all of the failing 
> tests reported here:
> 
> http://buildbot.twistedmatrix.com/builders/python-3k- 
> warnings/builds/203/steps/trial/logs/problems
> 
> These are tests which fail when Twisted's test suite is run with the -3 
> option on Python 2.6.  Tickets for these failures and patches fixing 
> them would be greatly appreciated.

I found ticket 2484 which is (I believe) about making Twisted
translatable to Python 3.x with the stock 2to3 tool:

    http://twistedmatrix.com/trac/ticket/2484

I've added a comment about all the DeprecationWarnings issued by
Twisted's test suite when run under Python 2.6's 3.x-compatibility
warning mode; there's an awful lot more than just the 24 that cause test
failures.

I've also filed a bug about fixing one of the warnings mentioned, the
one about has_key() being removed in 3.x:

    http://twistedmatrix.com/trac/ticket/4053

There's a few other warnings for which cleanup patches would be a good
lazy-afternoon effort. :)


From listsin at integrateddevcorp.com  Sat Oct 10 01:34:03 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Sat, 10 Oct 2009 01:34:03 -0400
Subject: [Twisted-Python] HTTPClientFactory's deferred never finishing
	download on .vcf (vcard file) link
In-Reply-To: <95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
Message-ID: <2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>


On Oct 9, 2009, at 5:53 AM, Reza Lotun wrote:

>> I haven't found any way to dump the actual headers from within  
>> Twisted
>
> The getPage function in twisted.web is suited for simple calls but
> won't return returns. What you have to do is create your own slightly
> modified version of getPage that keeps track of the factory used for
> the call (by attaching it to the deferred or something).

Yah, I kind of think this code was intended to do his own getPage()  
but I'm not exactly sure what the point was.  Maybe he used it for  
debugging along the way, but the original intent was lost due to lack  
of VCS (as was he!)

I ended up rewriting it to use the simple client.getPage()

Along the way, I ran into:

	http://python.net/crew/mwh/apidocs/twisted.web.http.Request.html

Good Lord, no wonder I'm confused.

Half PEP-8, http://www.python.org/dev/peps/pep-0008/, half JavaRama.

I finally figured out that it was a stupid string formatting bug in  
the code that was being echoed by Twisted but swallowed by the "Grand  
Catcher of all Things Exception" in Twisted..

Once I found and fixed that, everything works fine -- until the next  
time.

Thanks for your help.

S



From listsin at integrateddevcorp.com  Sat Oct 10 02:22:07 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Sat, 10 Oct 2009 02:22:07 -0400
Subject: [Twisted-Python] HTTPClientFactory's deferred never finishing
	download on .vcf (vcard file) link
In-Reply-To: <2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
	<2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
Message-ID: <F1E69386-1C79-4F59-A7C8-F5BA1F81AE24@integrateddevcorp.com>


On Oct 10, 2009, at 1:34 AM, Steve Steiner (listsin) wrote:
> Along the way, I ran into:
>
> 	http://python.net/crew/mwh/apidocs/twisted.web.http.Request.html

Just realized that that was off-twistedmatrix, same doc at:

	http://twistedmatrix.com/documents/8.2.0/api/twisted.web.http.Request.html

so it's not some off-site weirdness...

S



From glyph at twistedmatrix.com  Sat Oct 10 03:18:36 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 10 Oct 2009 03:18:36 -0400
Subject: [Twisted-Python] HTTPClientFactory's deferred never finishing
	download on .vcf (vcard file) link
In-Reply-To: <F1E69386-1C79-4F59-A7C8-F5BA1F81AE24@integrateddevcorp.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
	<2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
	<F1E69386-1C79-4F59-A7C8-F5BA1F81AE24@integrateddevcorp.com>
Message-ID: <d9047f780910100018k1785cff3q5a742fcbcb8ec41b@mail.gmail.com>

On Sat, Oct 10, 2009 at 2:22 AM, Steve Steiner (listsin) <
listsin at integrateddevcorp.com> wrote:
>
> Just realized that that was off-twistedmatrix, same doc at:
>
>
> http://twistedmatrix.com/documents/8.2.0/api/twisted.web.http.Request.html
>
> so it's not some off-site weirdness...
>

What "weirdness" are you referring to?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091010/421844fb/attachment.htm 

From rlotun at gmail.com  Sat Oct 10 07:34:40 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Sat, 10 Oct 2009 12:34:40 +0100
Subject: [Twisted-Python] HTTPClientFactory's deferred never finishing
	download on .vcf (vcard file) link
In-Reply-To: <2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
	<2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
Message-ID: <95bb10690910100434y7808a2a4v1955b9f4e58efd83@mail.gmail.com>

Hi,

On Sat, Oct 10, 2009 at 6:34 AM, Steve Steiner
<listsin at integrateddevcorp.com> wrote:
> ? ? ? ?http://python.net/crew/mwh/apidocs/twisted.web.http.Request.html
>
> Good Lord, no wonder I'm confused.
>
> Half PEP-8, http://www.python.org/dev/peps/pep-0008/, half JavaRama.

I'm not quite sure what you mean. Are you talking about web.client or
web.server? If you're writing an HTTP server in Twisted you deal with
Request objects - client requests use HTTPClientFactory. There is a
new twisted.web client implementation in the works which will
hopefully be ready for trunk in the near future, and which should
provide nearly the same functionality offered by urllib2 (or more).

> I finally figured out that it was a stupid string formatting bug in the code
> that was being echoed by Twisted but swallowed by the "Grand Catcher of all
> Things Exception" in Twisted..
>
> Once I found and fixed that, everything works fine -- until the next time.

Exceptions shouldn't be swallowed by twisted. If you simply attach
errBacks then you'll get the exception and full traceback. It really
isn't that bad at all - I thought it looked crazy when I first
started, but all the information is there to debug, etc.

> Thanks for your help.

No problem.

Cheers,
Reza

-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   reza at tweetdeck.com
twitter: @rlotun


From decvar at gmail.com  Sat Oct 10 08:14:45 2009
From: decvar at gmail.com (Stanislav Yudin)
Date: Sat, 10 Oct 2009 17:44:45 +0530
Subject: [Twisted-Python] reactor.run() do not return after reactor.stop()
Message-ID: <cb137f960910100514u76e5aca3w9f8961a545084201@mail.gmail.com>

Hi everyone,
I am having a problem with current twisted trunk (rev 27375). I am trying to
implement simple ssh client with conch.ssh but right now my implementation
works wrong way. I've made a wrapper class for my client factory, to
separate host/creds information and command I want to execute. So in execute
method of the wrapper I am calling reactor.run() - (that blocks execute
method) and in one of callbacks for success/error calling reactor.stop(). So
the problem is that the first call to execute returns from reactor.run()
right after reactor.stop(), but second call to same method of same instance
do not return ever.
I believe I am doing something wrong, so please help with find out what I've
missed. Problem code attached.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091010/55a822b2/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: problem.py
Type: text/x-python
Size: 6721 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20091010/55a822b2/attachment.py 

From johann.borck at densedata.com  Sat Oct 10 08:40:15 2009
From: johann.borck at densedata.com (Johann Borck)
Date: Sat, 10 Oct 2009 14:40:15 +0200
Subject: [Twisted-Python] reactor.run() do not return after
	reactor.stop()
In-Reply-To: <cb137f960910100514u76e5aca3w9f8961a545084201@mail.gmail.com>
References: <cb137f960910100514u76e5aca3w9f8961a545084201@mail.gmail.com>
Message-ID: <4AD080AF.6020202@densedata.com>

Stanislav Yudin wrote:
> Hi everyone,
> I am having a problem with current twisted trunk (rev 27375). ...  So 
> the problem is that the first call to execute returns from 
> reactor.run() right after reactor.stop(), but second call to same 
> method of same instance do not return ever.
> I believe I am doing something wrong, so please help with find out 
> what I've missed. Problem code attached.
http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#WhycanttheTwistedsreactorberestarted

But since you can do everything without restarting the reactor, that's 
no real limitation.

hth, Johann


From exarkun at twistedmatrix.com  Sat Oct 10 09:43:39 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 10 Oct 2009 13:43:39 -0000
Subject: [Twisted-Python] HTTPClientFactory's deferred never
	finishing	download on .vcf (vcard file) link
Message-ID: <20091010134339.21185.1361288728.divmod.xquotient.20@localhost.localdomain>

On 05:34 am, listsin at integrateddevcorp.com wrote:
>
>On Oct 9, 2009, at 5:53 AM, Reza Lotun wrote:
>>>I haven't found any way to dump the actual headers from within
>>>Twisted
>>
>>The getPage function in twisted.web is suited for simple calls but
>>won't return returns. What you have to do is create your own slightly
>>modified version of getPage that keeps track of the factory used for
>>the call (by attaching it to the deferred or something).
>
>Yah, I kind of think this code was intended to do his own getPage()
>but I'm not exactly sure what the point was.  Maybe he used it for
>debugging along the way, but the original intent was lost due to lack
>of VCS (as was he!)
>
>I ended up rewriting it to use the simple client.getPage()
>
>Along the way, I ran into:
>
>http://python.net/crew/mwh/apidocs/twisted.web.http.Request.html
>
>Good Lord, no wonder I'm confused.
>
>Half PEP-8, http://www.python.org/dev/peps/pep-0008/, half JavaRama.
>
>I finally figured out that it was a stupid string formatting bug in
>the code that was being echoed by Twisted but swallowed by the "Grand
>Catcher of all Things Exception" in Twisted..
>
>Once I found and fixed that, everything works fine -- until the next
>time.

As Reza Lotun pointed out, exceptions raised by application code and 
caught by Twisted are logged.  If you find a place where application 
code can raise an exception and Twisted doesn't log it, this is a bug 
and should be reported.

Jean-Paul


From listsin at integrateddevcorp.com  Sat Oct 10 11:56:41 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Sat, 10 Oct 2009 11:56:41 -0400
Subject: [Twisted-Python] HTTPClientFactory's deferred never finishing
	download on .vcf (vcard file) link
In-Reply-To: <d9047f780910100018k1785cff3q5a742fcbcb8ec41b@mail.gmail.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
	<2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
	<F1E69386-1C79-4F59-A7C8-F5BA1F81AE24@integrateddevcorp.com>
	<d9047f780910100018k1785cff3q5a742fcbcb8ec41b@mail.gmail.com>
Message-ID: <86D97BA9-3E96-4CB2-AE91-F7AD0CD19726@integrateddevcorp.com>


On Oct 10, 2009, at 3:18 AM, Glyph Lefkowitz wrote:

> On Sat, Oct 10, 2009 at 2:22 AM, Steve Steiner (listsin) <listsin at integrateddevcorp.com 
> > wrote:
> Just realized that that was off-twistedmatrix, same doc at:
>
>        http://twistedmatrix.com/documents/8.2.0/api/twisted.web.http.Request.html
>
> so it's not some off-site weirdness...
>
> What "weirdness" are you referring to?

I was just referring to the fact that the original document was not on  
the Twisted site so I was referring to it not being something someone  
else did with Twisted.

One of the things I was, and still am having some trouble with in  
Twisted is remembering the right names of things.

Much of the other code I'm using follows PEP-8 naming_conventions for  
methods and such whereas Twisted follows the Twisted Coding Standard  
which is a more javaCamelCase style convention.

That particular documentation refers to 'backwards compatible'  
functions using PEP-8 style attribute names while preferring the newer  
Twisted Coding Standard flavoured names.

S

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091010/52f2c508/attachment.htm 

From decvar at gmail.com  Sat Oct 10 12:50:01 2009
From: decvar at gmail.com (Stanislav Yudin)
Date: Sat, 10 Oct 2009 22:20:01 +0530
Subject: [Twisted-Python] reactor.run() do not return after
	reactor.stop()
In-Reply-To: <4AD080AF.6020202@densedata.com>
References: <cb137f960910100514u76e5aca3w9f8961a545084201@mail.gmail.com>
	<4AD080AF.6020202@densedata.com>
Message-ID: <cb137f960910100950h41eae4ackfbefd7332904ce52@mail.gmail.com>

Thanks, but how can I pass control back to calling code after starting the
reactor? Or the idea is to run it in separate thread? I understand that main
idea on twisted is async processing, but this time I need to block the
calling code until response is received.

On Sat, Oct 10, 2009 at 6:10 PM, Johann Borck <johann.borck at densedata.com>wrote:

> Stanislav Yudin wrote:
> > Hi everyone,
> > I am having a problem with current twisted trunk (rev 27375). ...  So
> > the problem is that the first call to execute returns from
> > reactor.run() right after reactor.stop(), but second call to same
> > method of same instance do not return ever.
> > I believe I am doing something wrong, so please help with find out
> > what I've missed. Problem code attached.
>
> http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#WhycanttheTwistedsreactorberestarted
>
> But since you can do everything without restarting the reactor, that's
> no real limitation.
>
> hth, Johann
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091010/9c895107/attachment.htm 

From johann.borck at densedata.com  Sat Oct 10 14:25:35 2009
From: johann.borck at densedata.com (Johann Borck)
Date: Sat, 10 Oct 2009 20:25:35 +0200
Subject: [Twisted-Python] reactor.run() do not return
	after	reactor.stop()
In-Reply-To: <cb137f960910100950h41eae4ackfbefd7332904ce52@mail.gmail.com>
References: <cb137f960910100514u76e5aca3w9f8961a545084201@mail.gmail.com>	<4AD080AF.6020202@densedata.com>
	<cb137f960910100950h41eae4ackfbefd7332904ce52@mail.gmail.com>
Message-ID: <4AD0D19F.5090902@densedata.com>

Stanislav Yudin wrote:
> Thanks, but how can I pass control back to calling code after starting 
> the reactor? Or the idea is to run it in separate thread? I understand 
> that main idea on twisted is async processing, but this time I need to 
> block the calling code until response is received.
>
You already have everything set up, make your SimpleClient._on_done 
callback aware of what has to happen next, and if you don't know 
beforehand, maybe because the next thing to do depends on the result of 
the current, you can pass a callable to the code in charge of that 
decision. The only difference is that you have to break the currently 
blocking code into several callables.

hth, Johann


From glyph at twistedmatrix.com  Sat Oct 10 15:47:00 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 10 Oct 2009 15:47:00 -0400
Subject: [Twisted-Python] reactor.run() do not return after
	reactor.stop()
In-Reply-To: <cb137f960910100950h41eae4ackfbefd7332904ce52@mail.gmail.com>
References: <cb137f960910100514u76e5aca3w9f8961a545084201@mail.gmail.com>
	<4AD080AF.6020202@densedata.com>
	<cb137f960910100950h41eae4ackfbefd7332904ce52@mail.gmail.com>
Message-ID: <d9047f780910101247k36e886d3td8426c943bcec863@mail.gmail.com>

On Sat, Oct 10, 2009 at 12:50 PM, Stanislav Yudin <decvar at gmail.com> wrote:

> Thanks, but how can I pass control back to calling code after starting the
> reactor? Or the idea is to run it in separate thread? I understand that main
> idea on twisted is async processing, but this time I need to block the
> calling code until response is received.


The way that you want to do this is to run all of your Twisted code in a
thread, and make calls into it from a different thread using one of the
utility APIs for that purpose.  See, for example, <
http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.threads.html#blockingCallFromThread>.
 Remember not to touch any Twisted APIs directly from the non-Twisted
thread.  Leave the Twisted I/O thread running for the entire lifetime of
your process; don't start and stop it repeatedly.

For what it's worth, you should really look into restructuring your
application so that this kind of hack is not necessary.  It will almost
certainly have hard-to-debug unforseen consequences.  There's nothing
fundamentally broken here, but it is much harder to keep track of and get
right than you think it will be, just based on the fact that many many
people who try this strategy end up giving up on it.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091010/f73ec020/attachment.htm 

From exarkun at twistedmatrix.com  Sat Oct 10 16:04:56 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 10 Oct 2009 20:04:56 -0000
Subject: [Twisted-Python] reactor.run() do not return after
	reactor.stop()
In-Reply-To: <cb137f960910100950h41eae4ackfbefd7332904ce52@mail.gmail.com>
References: <cb137f960910100514u76e5aca3w9f8961a545084201@mail.gmail.com>
	<4AD080AF.6020202@densedata.com>
	<cb137f960910100950h41eae4ackfbefd7332904ce52@mail.gmail.com>
Message-ID: <20091010200456.13824.1223351827.divmod.xquotient.2@localhost.localdomain>

On 04:50 pm, decvar at gmail.com wrote:
>Thanks, but how can I pass control back to calling code after starting 
>the
>reactor? Or the idea is to run it in separate thread? I understand that 
>main
>idea on twisted is async processing, but this time I need to block the
>calling code until response is received.

No, you don't need to block the calling code until the response is 
received.  The main idea on Twisted is async processing.  :)

Jean-Paul


From listsin at integrateddevcorp.com  Sat Oct 10 16:09:10 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Sat, 10 Oct 2009 16:09:10 -0400
Subject: [Twisted-Python] HTTPClientFactory's deferred never finishing
	download on .vcf (vcard file) link
In-Reply-To: <95bb10690910100434y7808a2a4v1955b9f4e58efd83@mail.gmail.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
	<2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
	<95bb10690910100434y7808a2a4v1955b9f4e58efd83@mail.gmail.com>
Message-ID: <C86E331F-76A9-4EFC-8737-FDF8D344645B@integrateddevcorp.com>


On Oct 10, 2009, at 7:34 AM, Reza Lotun wrote:

>> I'm not quite sure what you mean. Are you talking about web.client or
> web.server?

Web client.  I was having trouble with a particular URL which happened  
to be a download URL and wanted to see what the request and response  
objects looked like and was trying to find where I could examine  
them.  In the code I posted before, we were creating an  
HTTPClientFactory, then snagging the deferred.  I've simplified that  
by just using client.getPage().  The advantage of the  
HTTPClientFactory approach is that you can get at the response_headers.

> There is a new twisted.web client implementation in the works which  
> will hopefully be ready for trunk in the near future, and which  
> should provide nearly the same functionality offered by urllib2 (or  
> more).

Where might that be hiding?  I'd love to have something that does  
deferreds like Twisted and also implements all of urllib2.  I find the  
info() from urlopen() particularly helpful when debugging issues like  
this.

>> I finally figured out that it was a stupid string formatting bug in  
>> the code
>> that was being echoed by Twisted but swallowed by the "Grand  
>> Catcher of all
>> Things Exception" in Twisted..
>>
>> Once I found and fixed that, everything works fine -- until the  
>> next time.
>
> Exceptions shouldn't be swallowed by twisted. If you simply attach
> errBacks then you'll get the exception and full traceback. It really
> isn't that bad at all - I thought it looked crazy when I first
> started, but all the information is there to debug, etc.

Yes, the problem was in my mis-reading of the info in my errback.   
Unfortunately, the way the logging is set up in this particular code,  
logging.debug() returns 10 zillion times too much repetitive  
information and it makes it hard to wade through to find the relevant  
info (like the errback's output I was missing).

Thanks again for your help with this and I'd love to know more about  
this new urllib2 type module for Twisted.

Thanks,

S




From exarkun at twistedmatrix.com  Sat Oct 10 17:15:42 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 10 Oct 2009 21:15:42 -0000
Subject: [Twisted-Python] HTTPClientFactory's deferred never
	finishing	download on .vcf (vcard file) link
In-Reply-To: <C86E331F-76A9-4EFC-8737-FDF8D344645B@integrateddevcorp.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
	<2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
	<95bb10690910100434y7808a2a4v1955b9f4e58efd83@mail.gmail.com>
	<C86E331F-76A9-4EFC-8737-FDF8D344645B@integrateddevcorp.com>
Message-ID: <20091010211542.13824.1597743213.divmod.xquotient.9@localhost.localdomain>

On 08:09 pm, listsin at integrateddevcorp.com wrote:
>
>On Oct 10, 2009, at 7:34 AM, Reza Lotun wrote:
>>>I'm not quite sure what you mean. Are you talking about web.client or
>>web.server?
>
>Web client.  I was having trouble with a particular URL which happened
>to be a download URL and wanted to see what the request and response
>objects looked like and was trying to find where I could examine
>them.  In the code I posted before, we were creating an
>HTTPClientFactory, then snagging the deferred.  I've simplified that
>by just using client.getPage().  The advantage of the
>HTTPClientFactory approach is that you can get at the response_headers.
>>There is a new twisted.web client implementation in the works which
>>will hopefully be ready for trunk in the near future, and which
>>should provide nearly the same functionality offered by urllib2 (or
>>more).
>
>Where might that be hiding?  I'd love to have something that does
>deferreds like Twisted and also implements all of urllib2.  I find the
>info() from urlopen() particularly helpful when debugging issues like
>this.

  http://twistedmatrix.com/trac/ticket/886
  http://twistedmatrix.com/trac/ticket/3987

As I understand the "info" method, it gives you access to the response 
headers.  The new API definitely exposes that information.

You'll notice that neither of these tickets is closed.  #3987 is 
presently up for review.  If you want to help out, you could take a look 
at the code and point out any problems you notice.

Jean-Paul


From listsin at integrateddevcorp.com  Sat Oct 10 20:48:28 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Sat, 10 Oct 2009 20:48:28 -0400
Subject: [Twisted-Python] HTTPClientFactory's deferred never
	finishing	download on .vcf (vcard file) link
In-Reply-To: <20091010211542.13824.1597743213.divmod.xquotient.9@localhost.localdomain>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
	<2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
	<95bb10690910100434y7808a2a4v1955b9f4e58efd83@mail.gmail.com>
	<C86E331F-76A9-4EFC-8737-FDF8D344645B@integrateddevcorp.com>
	<20091010211542.13824.1597743213.divmod.xquotient.9@localhost.localdomain>
Message-ID: <884C7678-EFDD-4F7C-B125-54BF4393E3F8@integrateddevcorp.com>


On Oct 10, 2009, at 5:15 PM, exarkun at twistedmatrix.com wrote:
>>
>> Where might that be hiding?  I'd love to have something that does
>> deferreds like Twisted and also implements all of urllib2.  I find  
>> the
>> info() from urlopen() particularly helpful when debugging issues like
>> this.
>
>  http://twistedmatrix.com/trac/ticket/886
>  http://twistedmatrix.com/trac/ticket/3987
>
> As I understand the "info" method, it gives you access to the response
> headers.  The new API definitely exposes that information.

Yes, pretty much everything known about the round-trip is attached as  
attributes of the return value for easy inspection with a couple of  
little convenience methods for getting at them.

I just had a major debugging nightmare where the client, a web  
services company, insisted that "I must be sending some weird headers"  
and it wasn't that easy to prove I wasn't without being able to just  
access that info.  I finally ended up using tcpdump.  I had forgotten  
how much "fun" setting up tcpdump filters is.

> You'll notice that neither of these tickets is closed.  #3987 is
> presently up for review.  If you want to help out, you could take a  
> look
> at the code and point out any problems you notice.

Hopefully I can just fire up a virtualenv, set this as my Twisted, and  
run a few of the things I'm working on through it.

For some of them, I've been doing tcpdump pushups to find out what's  
going on and it'd be great to have that right in the Python code  
instead.

Please excuse my ignorance of how Twisted branches are used (there  
sure do seem to be a lot of them!), but is this branch supposed to be  
trunk + branch mods or latest release + branch mods?

Thanks!

S



From glyph at twistedmatrix.com  Sat Oct 10 21:07:31 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 10 Oct 2009 21:07:31 -0400
Subject: [Twisted-Python] HTTPClientFactory's deferred never finishing
	download on .vcf (vcard file) link
In-Reply-To: <86D97BA9-3E96-4CB2-AE91-F7AD0CD19726@integrateddevcorp.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
	<2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
	<F1E69386-1C79-4F59-A7C8-F5BA1F81AE24@integrateddevcorp.com>
	<d9047f780910100018k1785cff3q5a742fcbcb8ec41b@mail.gmail.com>
	<86D97BA9-3E96-4CB2-AE91-F7AD0CD19726@integrateddevcorp.com>
Message-ID: <d9047f780910101807s35e72296v5ea0755dabcf0b4@mail.gmail.com>

On Sat, Oct 10, 2009 at 11:56 AM, Steve Steiner (listsin) <
listsin at integrateddevcorp.com> wrote:

>
> On Oct 10, 2009, at 3:18 AM, Glyph Lefkowitz wrote:
>
> What "weirdness" are you referring to?
>
> I was just referring to the fact that the original document was not on the
> Twisted site so I was referring to it not being something someone else did
> with Twisted.
>

Ah.


> Much of the other code I'm using follows PEP-8 naming_conventions for
> methods and such whereas Twisted follows the Twisted Coding Standard which
> is a more javaCamelCase style convention.
>

For what it's worth, the Twisted coding standard pre-dates PEP-8 (In fact, I
think it might even predate the whole PEP process).

Also, Java did not invent the convention of camel-case names.  My use of the
convention in the early Twisted coding standard was a deliberate aping of
Smalltalk's coding convention.  I realize a lot more people have seen Java
written this way than ST, but nevertheless ST was my inspiration for many of
Twisted's conventions, coding-standard and otherwise.

That particular documentation refers to 'backwards compatible' functions
> using PEP-8 style attribute names while preferring the newer Twisted Coding
> Standard flavoured names.
>

Yes, before code review was consistently applied throughout the codebase, we
did have a few inconsistent names slip through.  Since then we've tried to
update them where we've found them so everything is consistently in one
style.

Making the right things show up in the right order in our API documentation
is a constant challenge.  If you have any ideas for emphasizing the correct
(i.e. non-"backwards-compatibility") names, you might want to submit a patch
to pydoctor and/or Twisted's docstrings.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091010/c614521a/attachment-0001.htm 

From exarkun at twistedmatrix.com  Sun Oct 11 00:05:11 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 11 Oct 2009 04:05:11 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1255233911.49.492459702@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091011/6ee735c8/attachment.htm 

From listsin at integrateddevcorp.com  Sun Oct 11 11:07:56 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Sun, 11 Oct 2009 11:07:56 -0400
Subject: [Twisted-Python] HTTPClientFactory's deferred never finishing
	download on .vcf (vcard file) link
In-Reply-To: <d9047f780910101807s35e72296v5ea0755dabcf0b4@mail.gmail.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
	<2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
	<F1E69386-1C79-4F59-A7C8-F5BA1F81AE24@integrateddevcorp.com>
	<d9047f780910100018k1785cff3q5a742fcbcb8ec41b@mail.gmail.com>
	<86D97BA9-3E96-4CB2-AE91-F7AD0CD19726@integrateddevcorp.com>
	<d9047f780910101807s35e72296v5ea0755dabcf0b4@mail.gmail.com>
Message-ID: <BE1B8AE2-5EBD-4460-865E-935E67C60250@integrateddevcorp.com>


On Oct 10, 2009, at 9:07 PM, Glyph Lefkowitz wrote:

> Much of the other code I'm using follows PEP-8 naming_conventions  
> for methods and such whereas Twisted follows the Twisted Coding  
> Standard which is a more javaCamelCase style convention.
>
> For what it's worth, the Twisted coding standard pre-dates PEP-8 (In  
> fact, I think it might even predate the whole PEP process).

> Also, Java did not invent the convention of camel-case names.  My  
> use of the convention in the early Twisted coding standard was a  
> deliberate aping of Smalltalk's coding convention.  I realize a lot  
> more people have seen Java written this way than ST, but  
> nevertheless ST was my inspiration for many of Twisted's  
> conventions, coding-standard and otherwise.

I understand.  I refer to it as "Java" since that's more current.  I  
think of it more as ST as well; I was there "back then."  It's one of  
the things I really like about Twisted.  I just kind of "get" it  
'cause it makes sense from for a long time <sic>.

I don't particularly agree with, or like some things in PEP-8.

For example, I like to line things up "right" when organization can be  
indicated by spacing like (which will be mutilated by e-mail, but you  
know what I mean):

foo = (
		("this value is long",	"default"),
		("short",			"other"),
	)

If it's a table, it should be laid out like a table, not all crooked  
and stuff.  CamelCase is another issue.  Why it should be OK in  
ClassNames but not OK in variable_names, since you have to hit the  
shift key to get the flippin' underscore anyway, has 'logic' that  
escapes me. "Inserting an extra, meaningless extra character, which  
requires using the Shift key, instead of the next letter, also with  
the shift key saves *thing*."

> That particular documentation refers to 'backwards compatible'  
> functions using PEP-8 style attribute names while preferring the  
> newer Twisted Coding Standard flavoured names.
>
> Yes, before code review was consistently applied throughout the  
> codebase, we did have a few inconsistent names slip through.  Since  
> then we've tried to update them where we've found them so everything  
> is consistently in one style.

Also understood.  That's the thing about writing stuff other people  
use; you've got to keep it working even when you're slapping your  
forehead about something you decided then that's now so _obviously_  
better done another way.

> Making the right things show up in the right order in our API  
> documentation is a constant challenge.  If you have any ideas for  
> emphasizing the correct (i.e. non-"backwards-compatibility") names,  
> you might want to submit a patch to pydoctor and/or Twisted's  
> docstrings.

I actually took a quick look at pydoctor for the first time tonight.   
I'm wrestling with getting a doc set together from some code that's  
EpyDoc, some that's Sphinx, and some that's not there at all.

What I'd like is to use Sphinx, using all of EpyDoc's nice extensions  
to reStructuredText (e.g. the nice :Parameters: block stuff) so I'm  
looking to see if anyone's already done that work for Sphinx.

Meanwhile, vis-?-vis the Twisted docs, has there been any recent  
discussion about moving the Twisted docs to Sphinx?  I found some doc  
discussions way back to 2002, nothing later than 2007/8-ish, but, as  
far as I know, there's not particular effort underway.

If Twisted could get documented with Sphinx, while adding anything  
Twisted needs that Sphinx doesn't have already, it would sure be  
nice...and would remove one more Twisted specific tool to maintain in  
the Twisted toolchain, while enhancing Sphinx at the same time.

I'm having to do the pydoctor vs. Sphinx vs. EpyDoc research  
anyway...I'll post it somewhere public and send a link/message to the  
list.

S






-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091011/887948a9/attachment.htm 

From exarkun at twistedmatrix.com  Sun Oct 11 12:14:11 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 11 Oct 2009 16:14:11 -0000
Subject: [Twisted-Python] HTTPClientFactory's deferred never
	finishing	download on .vcf (vcard file) link
In-Reply-To: <BE1B8AE2-5EBD-4460-865E-935E67C60250@integrateddevcorp.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
	<2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
	<F1E69386-1C79-4F59-A7C8-F5BA1F81AE24@integrateddevcorp.com>
	<d9047f780910100018k1785cff3q5a742fcbcb8ec41b@mail.gmail.com>
	<86D97BA9-3E96-4CB2-AE91-F7AD0CD19726@integrateddevcorp.com>
	<d9047f780910101807s35e72296v5ea0755dabcf0b4@mail.gmail.com>
	<BE1B8AE2-5EBD-4460-865E-935E67C60250@integrateddevcorp.com>
Message-ID: <20091011161411.8308.1442935772.divmod.xquotient.2@localhost.localdomain>

On 03:07 pm, listsin at integrateddevcorp.com wrote:
>
>[snip]
>
>I actually took a quick look at pydoctor for the first time tonight. 
>I'm wrestling with getting a doc set together from some code that's 
>EpyDoc, some that's Sphinx, and some that's not there at all.
>
>What I'd like is to use Sphinx, using all of EpyDoc's nice extensions 
>to reStructuredText (e.g. the nice :Parameters: block stuff) so I'm 
>looking to see if anyone's already done that work for Sphinx.
>
>Meanwhile, vis-?-vis the Twisted docs, has there been any recent 
>discussion about moving the Twisted docs to Sphinx?  I found some doc 
>discussions way back to 2002, nothing later than 2007/8-ish, but, as 
>far as I know, there's not particular effort underway.
>
>If Twisted could get documented with Sphinx, while adding anything 
>Twisted needs that Sphinx doesn't have already, it would sure be 
>nice...and would remove one more Twisted specific tool to maintain in 
>the Twisted toolchain, while enhancing Sphinx at the same time.
>
>I'm having to do the pydoctor vs. Sphinx vs. EpyDoc research 
>anyway...I'll post it somewhere public and send a link/message to the 
>list.

This was raised in July (in a thread you posted to ;).

http://twistedmatrix.com/pipermail/twisted-python/2009-July/020102.html

Jean-Paul


From listsin at integrateddevcorp.com  Sun Oct 11 13:29:48 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Sun, 11 Oct 2009 13:29:48 -0400
Subject: [Twisted-Python] HTTPClientFactory's deferred never
	finishing	download on .vcf (vcard file) link
In-Reply-To: <20091011161411.8308.1442935772.divmod.xquotient.2@localhost.localdomain>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
	<2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
	<F1E69386-1C79-4F59-A7C8-F5BA1F81AE24@integrateddevcorp.com>
	<d9047f780910100018k1785cff3q5a742fcbcb8ec41b@mail.gmail.com>
	<86D97BA9-3E96-4CB2-AE91-F7AD0CD19726@integrateddevcorp.com>
	<d9047f780910101807s35e72296v5ea0755dabcf0b4@mail.gmail.com>
	<BE1B8AE2-5EBD-4460-865E-935E67C60250@integrateddevcorp.com>
	<20091011161411.8308.1442935772.divmod.xquotient.2@localhost.localdomain>
Message-ID: <4D35B819-EDB2-424B-A30C-106E889B4D68@integrateddevcorp.com>

>>
>> I'm having to do the pydoctor vs. Sphinx vs. EpyDoc research  
>> anyway...I'll post it somewhere public and send a link/message to  
>> the list.
>
> This was raised in July (in a thread you posted to ;).
>
> http://twistedmatrix.com/pipermail/twisted-python/2009-July/ 
> 020102.html

I knew I'd thought about it before!  I've been slammed with other work  
since then and haven't had to face the "doc monster" again until now.   
I'm pulling docs together on several new modules/packages that have  
been factored out of a large code base and we have a complete mish- 
mosh.  Not as big as Twisted, but much less organized.

Twisted, and probably almost every project of similar size and, more  
particularly, age, has some level of doc fung.  Back in the 'old days'  
the tools were sparse (or bad) enough that the Twisted project made  
some of its own; of course.  So did lots of other people. Also, as  
time went on, more options (like wikis) came about and parts of the  
docs found their way into the mix.

 From reading back over that previous discussion, I realize that my  
main thought was to build a database of what is on hand, from all the  
various sources, then pulling them together into some sort of system  
where they could all be organized, filtered, and finally sent to  
*something* to come out done on the other side.

As far as I know, there is no good answer available off the shelf.

Maybe someone else knows of something?

It could be that it's just something that has to be 'done.'  And, done  
in a comprehensive (and/or extensible) enough way that it will serve  
the needs of other projects, too.

I'm not sure (as I wasn't in July) what the next step is, but it might  
be as simple as writing a simple DocCollector app that pulls  
everything into one database, cross references and indexes it, and  
gets it into some sort of visual presentation that we can start to  
make sense of the whole thing with.

Maybe the first step would be to pull together a list of "everywhere  
we know Twisted docs are known to live" and start pulling it in to see  
where that leads...

Where would be the best place to put the "collector" page where  
everyone would know to look for it and would be able to contribute to  
it (some wiki, but which one?).

Thanks,

S




From fernandor at sescam.jccm.es  Tue Oct 13 06:58:25 2009
From: fernandor at sescam.jccm.es (Fernando Ruza Rodriguez)
Date: Tue, 13 Oct 2009 12:58:25 +0200
Subject: [Twisted-Python] CalendarServer
Message-ID: <1255431505.1206.10.camel@hpcinf18.hguv.local>

Hi, sorry for the cross-posting.

I'm trying to compile CalendarServer and it has a script which get
Twisted from subversion here:

svn.twistedmatrix.com/svn/Twisted/branches/dav-take-two-3081-4

Also if I try to get latest SVN of Twisted as says in the page
http://svn.twistedmatrix.com/ I get the following error:

~$ svn co svn://svn.twistedmatrix.com/svn/Twisted/trunk Twisted
svn: Cannot be possible to connect to 'svn.twistedmatrix.com': time
connection expired

Is it subversion up there ?? is there to access in another way ?? Am I
doing something wrong ??

Thanks.

Fernando.




From dirkmoors at gmail.com  Tue Oct 13 09:18:09 2009
From: dirkmoors at gmail.com (Dirk Moors)
Date: Tue, 13 Oct 2009 15:18:09 +0200
Subject: [Twisted-Python] Twisted Python vs. "Blocking" Python: Weird
	performance on small operations.
Message-ID: <cf75a1410910130618qe2b1109sc7c04fa54cce290b@mail.gmail.com>

Hello Everyone!
My name is Dirk Moors, and since 4 years now, I've been involved in
developing a cloud computing platform, using Python as the programming
language. A year ago I discovered Twisted Python, and it got me very
interested, upto the point where I made the decision to convert our platform
(in progress) to a Twisted platform. One year later I'm still very
enthousiastic about the overal performance and stability, but last week I
encountered something I did't expect;

It appeared that it was less efficient to run small "atomic" operations in
different deferred-callbacks, when compared to running these "atomic"
operations together in "blocking" mode. Am I doing something wrong here?

To prove the problem to myself, I created the following example (Full
source- and test code is attached):
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
import struct

def int2binAsync(anInteger):
    def packStruct(i):
        #Packs an integer, result is 4 bytes
        return struct.pack("i", i)

    d = defer.Deferred()
    d.addCallback(packStruct)

    reactor.callLater(0,
                      d.callback,
                      anInteger)

    return d

def bin2intAsync(aBin):
    def unpackStruct(p):
        #Unpacks a bytestring into an integer
        return struct.unpack("i", p)[0]

    d = defer.Deferred()
    d.addCallback(unpackStruct)

    reactor.callLater(0,
                      d.callback,
                      aBin)
    return d

def int2binSync(anInteger):
    #Packs an integer, result is 4 bytes
    return struct.pack("i", anInteger)

def bin2intSync(aBin):
    #Unpacks a bytestring into an integer
    return struct.unpack("i", aBin)[0]

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

While running the testcode I got the following results:

(1 run = converting an integer to a byte string, converting that byte string
back to an integer, and finally checking whether that last integer is the
same as the input integer.)

*** Starting Synchronous Benchmarks. *(No Twisted => "blocking" code)*
  -> Synchronous Benchmark (1 runs) Completed in 0.0 seconds.
  -> Synchronous Benchmark (10 runs) Completed in 0.0 seconds.
  -> Synchronous Benchmark (100 runs) Completed in 0.0 seconds.
  -> Synchronous Benchmark (1000 runs) Completed in 0.00399994850159
seconds.
  -> Synchronous Benchmark (10000 runs) Completed in 0.0369999408722
seconds.
  -> Synchronous Benchmark (100000 runs) Completed in 0.362999916077
seconds.
*** Synchronous Benchmarks Completed in* 0.406000137329* seconds.

*** Starting Asynchronous Benchmarks . *(Twisted => "non-blocking" code)*
  -> Asynchronous Benchmark (1 runs) Completed in 34.5090000629 seconds.
  -> Asynchronous Benchmark (10 runs) Completed in 34.5099999905 seconds.
  -> Asynchronous Benchmark (100 runs) Completed in 34.5130000114 seconds.
  -> Asynchronous Benchmark (1000 runs) Completed in 34.5859999657 seconds.
  -> Asynchronous Benchmark (10000 runs) Completed in 35.2829999924 seconds.
  -> Asynchronous Benchmark (100000 runs) Completed in 41.492000103 seconds.
*** Asynchronous Benchmarks Completed in *42.1460001469* seconds.

Am I really seeing factor 100x??

I really hope that I made a huge reasoning error here but I just can't find
it. If my results are correct then I really need to go and check my entire
cloud platform for the places where I decided to split functions into atomic
operations while thinking that it would actually improve the performance
while on the contrary it did the opposit.

I personaly suspect that I lose my cpu-cycles to the reactor scheduling the
deferred-callbacks. Would that assumption make any sense?
The part where I need these conversion functions is in marshalling/protocol
reading and writing throughout the cloud platform, which implies that these
functions will be called constantly so I need them to be superfast. I always
though I had to split the entire marshalling process into small atomic
(deferred-callback) functions to be efficient, but these figures tell me
otherwise.

I really hope someone can help me out here.

Thanks in advance,
Best regards,
Dirk Moors
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091013/c6a95abd/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: twistedbenchmark.py
Type: application/octet-stream
Size: 7679 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20091013/c6a95abd/attachment.obj 

From vpogrebi at verizon.net  Tue Oct 13 09:41:19 2009
From: vpogrebi at verizon.net (Valeriy Pogrebitskiy)
Date: Tue, 13 Oct 2009 09:41:19 -0400
Subject: [Twisted-Python] Twisted Python vs. "Blocking" Python: Weird
 performance on small operations.
In-Reply-To: <cf75a1410910130618qe2b1109sc7c04fa54cce290b@mail.gmail.com>
References: <cf75a1410910130618qe2b1109sc7c04fa54cce290b@mail.gmail.com>
Message-ID: <EDB2B354-B25D-4A98-AC9D-B9745CA6C3AB@verizon.net>

Dirk,

Using deferred directly in your bin2intAsync() may be somewhat less  
efficient than some other way described in Recipe 439358: [Twisted]  
 From blocking functions to deferred functions

recipe (http://code.activestate.com/recipes/439358/)

You would get same effect (asynchronous execution) - but potentially  
more efficiently - by just decorating your synchronous methods as:

from twisted.internet.threads import deferToThread
deferred = deferToThread.__get__
....
@deferred
def int2binAsync(anInteger):
     #Packs an integer, result is 4 bytes
     return struct.pack("i", anInteger)

@deferred
def bin2intAsync(aBin):
     #Unpacks a bytestring into an integer
     return struct.unpack("i", aBin)[0]




Kind regards,

Valeriy Pogrebitskiy
vpogrebi at verizon.net




On Oct 13, 2009, at 9:18 AM, Dirk Moors wrote:

> Hello Everyone!
>
> My name is Dirk Moors, and since 4 years now, I've been involved in  
> developing a cloud computing platform, using Python as the  
> programming language. A year ago I discovered Twisted Python, and it  
> got me very interested, upto the point where I made the decision to  
> convert our platform (in progress) to a Twisted platform. One year  
> later I'm still very enthousiastic about the overal performance and  
> stability, but last week I encountered something I did't expect;
>
> It appeared that it was less efficient to run small "atomic"  
> operations in different deferred-callbacks, when compared to running  
> these "atomic" operations together in "blocking" mode. Am I doing  
> something wrong here?
>
> To prove the problem to myself, I created the following example  
> (Full source- and test code is attached):
> ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
> import struct
>
> def int2binAsync(anInteger):
>     def packStruct(i):
>         #Packs an integer, result is 4 bytes
>         return struct.pack("i", i)
>
>     d = defer.Deferred()
>     d.addCallback(packStruct)
>
>     reactor.callLater(0,
>                       d.callback,
>                       anInteger)
>
>     return d
>
> def bin2intAsync(aBin):
>     def unpackStruct(p):
>         #Unpacks a bytestring into an integer
>         return struct.unpack("i", p)[0]
>
>     d = defer.Deferred()
>     d.addCallback(unpackStruct)
>
>     reactor.callLater(0,
>                       d.callback,
>                       aBin)
>     return d
>
> def int2binSync(anInteger):
>     #Packs an integer, result is 4 bytes
>     return struct.pack("i", anInteger)
>
> def bin2intSync(aBin):
>     #Unpacks a bytestring into an integer
>     return struct.unpack("i", aBin)[0]
>
> ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
>
> While running the testcode I got the following results:
>
> (1 run = converting an integer to a byte string, converting that  
> byte string back to an integer, and finally checking whether that  
> last integer is the same as the input integer.)
>
> *** Starting Synchronous Benchmarks. (No Twisted => "blocking" code)
>   -> Synchronous Benchmark (1 runs) Completed in 0.0 seconds.
>   -> Synchronous Benchmark (10 runs) Completed in 0.0 seconds.
>   -> Synchronous Benchmark (100 runs) Completed in 0.0 seconds.
>   -> Synchronous Benchmark (1000 runs) Completed in 0.00399994850159  
> seconds.
>   -> Synchronous Benchmark (10000 runs) Completed in 0.0369999408722  
> seconds.
>   -> Synchronous Benchmark (100000 runs) Completed in 0.362999916077  
> seconds.
> *** Synchronous Benchmarks Completed in 0.406000137329 seconds.
>
> *** Starting Asynchronous Benchmarks . (Twisted => "non-blocking"  
> code)
>   -> Asynchronous Benchmark (1 runs) Completed in 34.5090000629  
> seconds.
>   -> Asynchronous Benchmark (10 runs) Completed in 34.5099999905  
> seconds.
>   -> Asynchronous Benchmark (100 runs) Completed in 34.5130000114  
> seconds.
>   -> Asynchronous Benchmark (1000 runs) Completed in 34.5859999657  
> seconds.
>   -> Asynchronous Benchmark (10000 runs) Completed in 35.2829999924  
> seconds.
>   -> Asynchronous Benchmark (100000 runs) Completed in 41.492000103  
> seconds.
> *** Asynchronous Benchmarks Completed in 42.1460001469 seconds.
>
> Am I really seeing factor 100x??
>
> I really hope that I made a huge reasoning error here but I just  
> can't find it. If my results are correct then I really need to go  
> and check my entire cloud platform for the places where I decided to  
> split functions into atomic operations while thinking that it would  
> actually improve the performance while on the contrary it did the  
> opposit.
>
> I personaly suspect that I lose my cpu-cycles to the reactor  
> scheduling the deferred-callbacks. Would that assumption make any  
> sense?
> The part where I need these conversion functions is in marshalling/ 
> protocol reading and writing throughout the cloud platform, which  
> implies that these functions will be called constantly so I need  
> them to be superfast. I always though I had to split the entire  
> marshalling process into small atomic (deferred-callback) functions  
> to be efficient, but these figures tell me otherwise.
>
> I really hope someone can help me out here.
>
> Thanks in advance,
> Best regards,
> Dirk Moors
>
>
>
>
>
>
>
>
>
>
>
>
>
> <twistedbenchmark.py>_______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091013/e9ae2546/attachment-0001.htm 

From rlotun at gmail.com  Tue Oct 13 10:04:06 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Tue, 13 Oct 2009 15:04:06 +0100
Subject: [Twisted-Python] Twisted Python vs. "Blocking" Python: Weird
	performance on small operations.
In-Reply-To: <cf75a1410910130618qe2b1109sc7c04fa54cce290b@mail.gmail.com>
References: <cf75a1410910130618qe2b1109sc7c04fa54cce290b@mail.gmail.com>
Message-ID: <95bb10690910130704o7c0ff2besf00dcf5918990dcf@mail.gmail.com>

Hi Dirk,

I took a look at your code sample and got the async benchmark to run
with the following values:
*** Starting Asynchronous Benchmarks.

  -> Asynchronous Benchmark (1 runs) Completed in 0.000181913375854 seconds.
  -> Asynchronous Benchmark (10 runs) Completed in 0.000736951828003 seconds.
  -> Asynchronous Benchmark (100 runs) Completed in 0.00641012191772 seconds.
  -> Asynchronous Benchmark (1000 runs) Completed in 0.0741751194 seconds.
  -> Asynchronous Benchmark (10000 runs) Completed in 0.675071001053 seconds.
  -> Asynchronous Benchmark (100000 runs) Completed in 7.29738497734 seconds.

*** Asynchronous Benchmarks Completed in 8.16032314301 seconds.

Which, though still quite a bit slower than the synchronous version,
is still much better than the 40 sec. mark that you were experiencing.
My modified version simply returned defer.succeed from your aync
block-compute functions.

i.e. Instead of your initial example:
def int2binAsync(anInteger):
    def packStruct(i):
        #Packs an integer, result is 4 bytes
        return struct.pack("i", i)

    d = defer.Deferred()
    d.addCallback(packStruct)

    reactor.callLater(0,
                      d.callback,
                      anInteger)

    return d

my version does:

def int2binAsync(anInteger):
    return defer.succeed(struct.pack('i', anInteger))

A few things to note in general however:
1) Twisted shines for block I/O operations - i.e. networking. A
compute intesive process will not necessarily yield any gains in
performance by using Twisted since the Python GIL exists (a global
lock).

2) If you are doing computations that use a C module (unforunately
struct pre 2.6 I believe doesn't use a C module), there may be a
chance that the C module releases the GIL, allowing you to do those
computations in a thread. In this case you'd be better off using
deferToThread as suggested earlier.

3) There is some (usually minimal but it exists) overhead to using
Twisted. Instead of computing a bunch of stuff serially and returning
your answer as in your sync example, you're wrapping everything up in
deferreds and starting a reactor - it's definitely going to be a bit
slower than the pure synchronous version for this case.

Hope that makes sense.

Cheers,
Reza


-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   reza at tweetdeck.com
twitter: @rlotun


From dirkmoors at gmail.com  Tue Oct 13 10:18:35 2009
From: dirkmoors at gmail.com (Dirk Moors)
Date: Tue, 13 Oct 2009 16:18:35 +0200
Subject: [Twisted-Python] Twisted-Python Digest, Vol 67, Issue 22
In-Reply-To: <mailman.85384.1255441779.23374.twisted-python@twistedmatrix.com>
References: <mailman.85384.1255441779.23374.twisted-python@twistedmatrix.com>
Message-ID: <cf75a1410910130718m53645515oc65f0890366a12f2@mail.gmail.com>

Hello Valeriy,

I tried the thing you suggested, and I attached the (updated) code.
Unfortunatly, the new code was even slower, producing the following results:

*** Starting Asynchronous Benchmarks. (Using Twisted, with
"deferred-decorator")
  -> Asynchronous Benchmark (1 runs) Completed in 56.0279998779 seconds.
  -> Asynchronous Benchmark (10 runs) Completed in 56.0130000114 seconds.
  -> Asynchronous Benchmark (100 runs) Completed in 56.010999918 seconds.
  -> Asynchronous Benchmark (1000 runs) Completed in 56.0410001278 seconds.
  -> Asynchronous Benchmark (10000 runs) Completed in 56.3069999218 seconds.
  -> Asynchronous Benchmark (100000 runs) Completed in 58.8910000324
seconds.
*** Asynchronous Benchmarks Completed in 59.4659998417 seconds.

I suspect that this would me more inefficient because with the deferToThread
function in place, every single operation will be executed in its own
thread, which means:
(1 x 2) + (10 x 2) + (100 x 2) + (1000 x 2) + (10000 x 2) + (100000 x 2)
threads....which is...a lot.

Maybe the problem lies in the way I test the code? I understand that using
the asynchronous testcode this way (generating the deferreds using a
FOR-loop), a lot of deferreds are generated before the reactor starts
calling the deferred-callbacks.....would there be another, better way to
test the code?
The reason I need to now which one is faster (async vs sync functions) is
because I need to decide on whetehr or not I should re-evaluate the code I
just recently finished building.

Any other ideas maybe?

Thanks in advance,
Dirk


________________________________________________________________________________________________________________________________________________________
> Message: 3
> Date: Tue, 13 Oct 2009 09:41:19 -0400
> From: Valeriy Pogrebitskiy <vpogrebi at verizon.net>
> Subject: Re: [Twisted-Python] Twisted Python vs. "Blocking" Python:
>        Weird performance on small operations.
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Message-ID: <EDB2B354-B25D-4A98-AC9D-B9745CA6C3AB at verizon.net>
> Content-Type: text/plain; charset="us-ascii"
>
> Dirk,
>
> Using deferred directly in your bin2intAsync() may be somewhat less
> efficient than some other way described in Recipe 439358: [Twisted]
>  From blocking functions to deferred functions
>
> recipe (http://code.activestate.com/recipes/439358/)
>
> You would get same effect (asynchronous execution) - but potentially
> more efficiently - by just decorating your synchronous methods as:
>
> from twisted.internet.threads import deferToThread
> deferred = deferToThread.__get__
> ....
> @deferred
> def int2binAsync(anInteger):
>     #Packs an integer, result is 4 bytes
>     return struct.pack("i", anInteger)
>
> @deferred
> def bin2intAsync(aBin):
>     #Unpacks a bytestring into an integer
>     return struct.unpack("i", aBin)[0]
>
>
>
>
> Kind regards,
>
> Valeriy Pogrebitskiy
> vpogrebi at verizon.net
>
>
>
>
> On Oct 13, 2009, at 9:18 AM, Dirk Moors wrote:
>
> > Hello Everyone!
> >
> > My name is Dirk Moors, and since 4 years now, I've been involved in
> > developing a cloud computing platform, using Python as the
> > programming language. A year ago I discovered Twisted Python, and it
> > got me very interested, upto the point where I made the decision to
> > convert our platform (in progress) to a Twisted platform. One year
> > later I'm still very enthousiastic about the overal performance and
> > stability, but last week I encountered something I did't expect;
> >
> > It appeared that it was less efficient to run small "atomic"
> > operations in different deferred-callbacks, when compared to running
> > these "atomic" operations together in "blocking" mode. Am I doing
> > something wrong here?
> >
> > To prove the problem to myself, I created the following example
> > (Full source- and test code is attached):
> >
> ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
> > import struct
> >
> > def int2binAsync(anInteger):
> >     def packStruct(i):
> >         #Packs an integer, result is 4 bytes
> >         return struct.pack("i", i)
> >
> >     d = defer.Deferred()
> >     d.addCallback(packStruct)
> >
> >     reactor.callLater(0,
> >                       d.callback,
> >                       anInteger)
> >
> >     return d
> >
> > def bin2intAsync(aBin):
> >     def unpackStruct(p):
> >         #Unpacks a bytestring into an integer
> >         return struct.unpack("i", p)[0]
> >
> >     d = defer.Deferred()
> >     d.addCallback(unpackStruct)
> >
> >     reactor.callLater(0,
> >                       d.callback,
> >                       aBin)
> >     return d
> >
> > def int2binSync(anInteger):
> >     #Packs an integer, result is 4 bytes
> >     return struct.pack("i", anInteger)
> >
> > def bin2intSync(aBin):
> >     #Unpacks a bytestring into an integer
> >     return struct.unpack("i", aBin)[0]
> >
> >
> ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
> >
> > While running the testcode I got the following results:
> >
> > (1 run = converting an integer to a byte string, converting that
> > byte string back to an integer, and finally checking whether that
> > last integer is the same as the input integer.)
> >
> > *** Starting Synchronous Benchmarks. (No Twisted => "blocking" code)
> >   -> Synchronous Benchmark (1 runs) Completed in 0.0 seconds.
> >   -> Synchronous Benchmark (10 runs) Completed in 0.0 seconds.
> >   -> Synchronous Benchmark (100 runs) Completed in 0.0 seconds.
> >   -> Synchronous Benchmark (1000 runs) Completed in 0.00399994850159
> > seconds.
> >   -> Synchronous Benchmark (10000 runs) Completed in 0.0369999408722
> > seconds.
> >   -> Synchronous Benchmark (100000 runs) Completed in 0.362999916077
> > seconds.
> > *** Synchronous Benchmarks Completed in 0.406000137329 seconds.
> >
> > *** Starting Asynchronous Benchmarks . (Twisted => "non-blocking"
> > code)
> >   -> Asynchronous Benchmark (1 runs) Completed in 34.5090000629
> > seconds.
> >   -> Asynchronous Benchmark (10 runs) Completed in 34.5099999905
> > seconds.
> >   -> Asynchronous Benchmark (100 runs) Completed in 34.5130000114
> > seconds.
> >   -> Asynchronous Benchmark (1000 runs) Completed in 34.5859999657
> > seconds.
> >   -> Asynchronous Benchmark (10000 runs) Completed in 35.2829999924
> > seconds.
> >   -> Asynchronous Benchmark (100000 runs) Completed in 41.492000103
> > seconds.
> > *** Asynchronous Benchmarks Completed in 42.1460001469 seconds.
> >
> > Am I really seeing factor 100x??
> >
> > I really hope that I made a huge reasoning error here but I just
> > can't find it. If my results are correct then I really need to go
> > and check my entire cloud platform for the places where I decided to
> > split functions into atomic operations while thinking that it would
> > actually improve the performance while on the contrary it did the
> > opposit.
> >
> > I personaly suspect that I lose my cpu-cycles to the reactor
> > scheduling the deferred-callbacks. Would that assumption make any
> > sense?
> > The part where I need these conversion functions is in marshalling/
> > protocol reading and writing throughout the cloud platform, which
> > implies that these functions will be called constantly so I need
> > them to be superfast. I always though I had to split the entire
> > marshalling process into small atomic (deferred-callback) functions
> > to be efficient, but these figures tell me otherwise.
> >
> > I really hope someone can help me out here.
> >
> > Thanks in advance,
> > Best regards,
> > Dirk Moors
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> > <twistedbenchmark.py>_______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> -------------- next part --------------
> An HTML attachment was scrubbed...
> URL:
> http://twistedmatrix.com/pipermail/twisted-python/attachments/20091013/e9ae2546/attachment.htm
>
> ------------------------------
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> End of Twisted-Python Digest, Vol 67, Issue 22
> **********************************************
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091013/357ffe0c/attachment-0001.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: twistedbenchmark.py
Type: application/octet-stream
Size: 7269 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20091013/357ffe0c/attachment-0001.obj 

From dirkmoors at gmail.com  Tue Oct 13 10:32:53 2009
From: dirkmoors at gmail.com (Dirk Moors)
Date: Tue, 13 Oct 2009 16:32:53 +0200
Subject: [Twisted-Python] Twisted-Python Digest, Vol 67, Issue 23
In-Reply-To: <mailman.85392.1255443518.23374.twisted-python@twistedmatrix.com>
References: <mailman.85392.1255443518.23374.twisted-python@twistedmatrix.com>
Message-ID: <cf75a1410910130732j7e3964f6m2fad9a4b71af7bee@mail.gmail.com>

Hello Reza,
I tried the solution you provided and I have to say, that changed a lot!
You gave me a better understanding of how things work with Twisted, and I
really appreciate your response!

Thanks for your help!
Best regards,
Dirk Moors

2009/10/13 <twisted-python-request at twistedmatrix.com>

> Send Twisted-Python mailing list submissions to
>        twisted-python at twistedmatrix.com
>
> To subscribe or unsubscribe via the World Wide Web, visit
>        http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> or, via email, send a message with subject or body 'help' to
>        twisted-python-request at twistedmatrix.com
>
> You can reach the person managing the list at
>        twisted-python-owner at twistedmatrix.com
>
> When replying, please edit your Subject line so it is more specific
> than "Re: Contents of Twisted-Python digest..."
>
>
> Today's Topics:
>
>   1. Re: Twisted Python vs. "Blocking" Python: Weird   performance
>      on small operations. (Reza Lotun)
>   2. Re: Twisted-Python Digest, Vol 67, Issue 22 (Dirk Moors)
>
>
> ----------------------------------------------------------------------
>
> Message: 1
> Date: Tue, 13 Oct 2009 15:04:06 +0100
> From: Reza Lotun <rlotun at gmail.com>
> Subject: Re: [Twisted-Python] Twisted Python vs. "Blocking" Python:
>        Weird   performance on small operations.
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Message-ID:
>        <95bb10690910130704o7c0ff2besf00dcf5918990dcf at mail.gmail.com>
> Content-Type: text/plain; charset=UTF-8
>
> Hi Dirk,
>
> I took a look at your code sample and got the async benchmark to run
> with the following values:
> *** Starting Asynchronous Benchmarks.
>
>  -> Asynchronous Benchmark (1 runs) Completed in 0.000181913375854 seconds.
>  -> Asynchronous Benchmark (10 runs) Completed in 0.000736951828003
> seconds.
>  -> Asynchronous Benchmark (100 runs) Completed in 0.00641012191772
> seconds.
>  -> Asynchronous Benchmark (1000 runs) Completed in 0.0741751194 seconds.
>  -> Asynchronous Benchmark (10000 runs) Completed in 0.675071001053
> seconds.
>  -> Asynchronous Benchmark (100000 runs) Completed in 7.29738497734
> seconds.
>
> *** Asynchronous Benchmarks Completed in 8.16032314301 seconds.
>
> Which, though still quite a bit slower than the synchronous version,
> is still much better than the 40 sec. mark that you were experiencing.
> My modified version simply returned defer.succeed from your aync
> block-compute functions.
>
> i.e. Instead of your initial example:
> def int2binAsync(anInteger):
>    def packStruct(i):
>        #Packs an integer, result is 4 bytes
>        return struct.pack("i", i)
>
>    d = defer.Deferred()
>    d.addCallback(packStruct)
>
>    reactor.callLater(0,
>                      d.callback,
>                      anInteger)
>
>    return d
>
> my version does:
>
> def int2binAsync(anInteger):
>    return defer.succeed(struct.pack('i', anInteger))
>
> A few things to note in general however:
> 1) Twisted shines for block I/O operations - i.e. networking. A
> compute intesive process will not necessarily yield any gains in
> performance by using Twisted since the Python GIL exists (a global
> lock).
>
> 2) If you are doing computations that use a C module (unforunately
> struct pre 2.6 I believe doesn't use a C module), there may be a
> chance that the C module releases the GIL, allowing you to do those
> computations in a thread. In this case you'd be better off using
> deferToThread as suggested earlier.
>
> 3) There is some (usually minimal but it exists) overhead to using
> Twisted. Instead of computing a bunch of stuff serially and returning
> your answer as in your sync example, you're wrapping everything up in
> deferreds and starting a reactor - it's definitely going to be a bit
> slower than the pure synchronous version for this case.
>
> Hope that makes sense.
>
> Cheers,
> Reza
>
>
> --
> Reza Lotun
> mobile: +44 (0)7521 310 763
> email:  rlotun at gmail.com
> work:   reza at tweetdeck.com
> twitter: @rlotun
>
>
>
> ------------------------------
>
> Message: 2
> Date: Tue, 13 Oct 2009 16:18:35 +0200
> From: Dirk Moors <dirkmoors at gmail.com>
> Subject: Re: [Twisted-Python] Twisted-Python Digest, Vol 67, Issue 22
> To: twisted-python at twistedmatrix.com
> Message-ID:
>        <cf75a1410910130718m53645515oc65f0890366a12f2 at mail.gmail.com>
> Content-Type: text/plain; charset="iso-8859-1"
>
> Hello Valeriy,
>
> I tried the thing you suggested, and I attached the (updated) code.
> Unfortunatly, the new code was even slower, producing the following
> results:
>
> *** Starting Asynchronous Benchmarks. (Using Twisted, with
> "deferred-decorator")
>  -> Asynchronous Benchmark (1 runs) Completed in 56.0279998779 seconds.
>  -> Asynchronous Benchmark (10 runs) Completed in 56.0130000114 seconds.
>  -> Asynchronous Benchmark (100 runs) Completed in 56.010999918 seconds.
>  -> Asynchronous Benchmark (1000 runs) Completed in 56.0410001278 seconds.
>  -> Asynchronous Benchmark (10000 runs) Completed in 56.3069999218 seconds.
>  -> Asynchronous Benchmark (100000 runs) Completed in 58.8910000324
> seconds.
> *** Asynchronous Benchmarks Completed in 59.4659998417 seconds.
>
> I suspect that this would me more inefficient because with the
> deferToThread
> function in place, every single operation will be executed in its own
> thread, which means:
> (1 x 2) + (10 x 2) + (100 x 2) + (1000 x 2) + (10000 x 2) + (100000 x 2)
> threads....which is...a lot.
>
> Maybe the problem lies in the way I test the code? I understand that using
> the asynchronous testcode this way (generating the deferreds using a
> FOR-loop), a lot of deferreds are generated before the reactor starts
> calling the deferred-callbacks.....would there be another, better way to
> test the code?
> The reason I need to now which one is faster (async vs sync functions) is
> because I need to decide on whetehr or not I should re-evaluate the code I
> just recently finished building.
>
> Any other ideas maybe?
>
> Thanks in advance,
> Dirk
>
>
>
> ________________________________________________________________________________________________________________________________________________________
> > Message: 3
> > Date: Tue, 13 Oct 2009 09:41:19 -0400
> > From: Valeriy Pogrebitskiy <vpogrebi at verizon.net>
> > Subject: Re: [Twisted-Python] Twisted Python vs. "Blocking" Python:
> >        Weird performance on small operations.
> > To: Twisted general discussion <twisted-python at twistedmatrix.com>
> > Message-ID: <EDB2B354-B25D-4A98-AC9D-B9745CA6C3AB at verizon.net>
> > Content-Type: text/plain; charset="us-ascii"
> >
> > Dirk,
> >
> > Using deferred directly in your bin2intAsync() may be somewhat less
> > efficient than some other way described in Recipe 439358: [Twisted]
> >  From blocking functions to deferred functions
> >
> > recipe (http://code.activestate.com/recipes/439358/)
> >
> > You would get same effect (asynchronous execution) - but potentially
> > more efficiently - by just decorating your synchronous methods as:
> >
> > from twisted.internet.threads import deferToThread
> > deferred = deferToThread.__get__
> > ....
> > @deferred
> > def int2binAsync(anInteger):
> >     #Packs an integer, result is 4 bytes
> >     return struct.pack("i", anInteger)
> >
> > @deferred
> > def bin2intAsync(aBin):
> >     #Unpacks a bytestring into an integer
> >     return struct.unpack("i", aBin)[0]
> >
> >
> >
> >
> > Kind regards,
> >
> > Valeriy Pogrebitskiy
> > vpogrebi at verizon.net
> >
> >
> >
> >
> > On Oct 13, 2009, at 9:18 AM, Dirk Moors wrote:
> >
> > > Hello Everyone!
> > >
> > > My name is Dirk Moors, and since 4 years now, I've been involved in
> > > developing a cloud computing platform, using Python as the
> > > programming language. A year ago I discovered Twisted Python, and it
> > > got me very interested, upto the point where I made the decision to
> > > convert our platform (in progress) to a Twisted platform. One year
> > > later I'm still very enthousiastic about the overal performance and
> > > stability, but last week I encountered something I did't expect;
> > >
> > > It appeared that it was less efficient to run small "atomic"
> > > operations in different deferred-callbacks, when compared to running
> > > these "atomic" operations together in "blocking" mode. Am I doing
> > > something wrong here?
> > >
> > > To prove the problem to myself, I created the following example
> > > (Full source- and test code is attached):
> > >
> >
> ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
> > > import struct
> > >
> > > def int2binAsync(anInteger):
> > >     def packStruct(i):
> > >         #Packs an integer, result is 4 bytes
> > >         return struct.pack("i", i)
> > >
> > >     d = defer.Deferred()
> > >     d.addCallback(packStruct)
> > >
> > >     reactor.callLater(0,
> > >                       d.callback,
> > >                       anInteger)
> > >
> > >     return d
> > >
> > > def bin2intAsync(aBin):
> > >     def unpackStruct(p):
> > >         #Unpacks a bytestring into an integer
> > >         return struct.unpack("i", p)[0]
> > >
> > >     d = defer.Deferred()
> > >     d.addCallback(unpackStruct)
> > >
> > >     reactor.callLater(0,
> > >                       d.callback,
> > >                       aBin)
> > >     return d
> > >
> > > def int2binSync(anInteger):
> > >     #Packs an integer, result is 4 bytes
> > >     return struct.pack("i", anInteger)
> > >
> > > def bin2intSync(aBin):
> > >     #Unpacks a bytestring into an integer
> > >     return struct.unpack("i", aBin)[0]
> > >
> > >
> >
> ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
> > >
> > > While running the testcode I got the following results:
> > >
> > > (1 run = converting an integer to a byte string, converting that
> > > byte string back to an integer, and finally checking whether that
> > > last integer is the same as the input integer.)
> > >
> > > *** Starting Synchronous Benchmarks. (No Twisted => "blocking" code)
> > >   -> Synchronous Benchmark (1 runs) Completed in 0.0 seconds.
> > >   -> Synchronous Benchmark (10 runs) Completed in 0.0 seconds.
> > >   -> Synchronous Benchmark (100 runs) Completed in 0.0 seconds.
> > >   -> Synchronous Benchmark (1000 runs) Completed in 0.00399994850159
> > > seconds.
> > >   -> Synchronous Benchmark (10000 runs) Completed in 0.0369999408722
> > > seconds.
> > >   -> Synchronous Benchmark (100000 runs) Completed in 0.362999916077
> > > seconds.
> > > *** Synchronous Benchmarks Completed in 0.406000137329 seconds.
> > >
> > > *** Starting Asynchronous Benchmarks . (Twisted => "non-blocking"
> > > code)
> > >   -> Asynchronous Benchmark (1 runs) Completed in 34.5090000629
> > > seconds.
> > >   -> Asynchronous Benchmark (10 runs) Completed in 34.5099999905
> > > seconds.
> > >   -> Asynchronous Benchmark (100 runs) Completed in 34.5130000114
> > > seconds.
> > >   -> Asynchronous Benchmark (1000 runs) Completed in 34.5859999657
> > > seconds.
> > >   -> Asynchronous Benchmark (10000 runs) Completed in 35.2829999924
> > > seconds.
> > >   -> Asynchronous Benchmark (100000 runs) Completed in 41.492000103
> > > seconds.
> > > *** Asynchronous Benchmarks Completed in 42.1460001469 seconds.
> > >
> > > Am I really seeing factor 100x??
> > >
> > > I really hope that I made a huge reasoning error here but I just
> > > can't find it. If my results are correct then I really need to go
> > > and check my entire cloud platform for the places where I decided to
> > > split functions into atomic operations while thinking that it would
> > > actually improve the performance while on the contrary it did the
> > > opposit.
> > >
> > > I personaly suspect that I lose my cpu-cycles to the reactor
> > > scheduling the deferred-callbacks. Would that assumption make any
> > > sense?
> > > The part where I need these conversion functions is in marshalling/
> > > protocol reading and writing throughout the cloud platform, which
> > > implies that these functions will be called constantly so I need
> > > them to be superfast. I always though I had to split the entire
> > > marshalling process into small atomic (deferred-callback) functions
> > > to be efficient, but these figures tell me otherwise.
> > >
> > > I really hope someone can help me out here.
> > >
> > > Thanks in advance,
> > > Best regards,
> > > Dirk Moors
> > >
> > >
> > >
> > >
> > >
> > >
> > >
> > >
> > >
> > >
> > >
> > >
> > >
> > > <twistedbenchmark.py>_______________________________________________
> > > Twisted-Python mailing list
> > > Twisted-Python at twistedmatrix.com
> > > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> > -------------- next part --------------
> > An HTML attachment was scrubbed...
> > URL:
> >
> http://twistedmatrix.com/pipermail/twisted-python/attachments/20091013/e9ae2546/attachment.htm
> >
> > ------------------------------
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> >
> > End of Twisted-Python Digest, Vol 67, Issue 22
> > **********************************************
> >
> -------------- next part --------------
> An HTML attachment was scrubbed...
> URL:
> http://twistedmatrix.com/pipermail/twisted-python/attachments/20091013/357ffe0c/attachment.htm
> -------------- next part --------------
> A non-text attachment was scrubbed...
> Name: twistedbenchmark.py
> Type: application/octet-stream
> Size: 7269 bytes
> Desc: not available
> Url :
> http://twistedmatrix.com/pipermail/twisted-python/attachments/20091013/357ffe0c/attachment.obj
>
> ------------------------------
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> End of Twisted-Python Digest, Vol 67, Issue 23
> **********************************************
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091013/74db3ae5/attachment-0001.htm 

From vpogrebi at verizon.net  Tue Oct 13 10:29:00 2009
From: vpogrebi at verizon.net (Valeriy Pogrebitskiy)
Date: Tue, 13 Oct 2009 10:29:00 -0400
Subject: [Twisted-Python] Twisted-Python Digest, Vol 67, Issue 22
In-Reply-To: <cf75a1410910130718m53645515oc65f0890366a12f2@mail.gmail.com>
References: <mailman.85384.1255441779.23374.twisted-python@twistedmatrix.com>
	<cf75a1410910130718m53645515oc65f0890366a12f2@mail.gmail.com>
Message-ID: <B9A2C5D6-0837-433B-A28B-D94C3B51C6EE@verizon.net>

Dirk,

I hope you are using 'twisted.trial.unittest' instead of standard  
Python's 'unittest'... Right? In case this is not so - update your  
test script to use Twisted's unittest module.


Kind regards,

Valeriy Pogrebitskiy
vpogrebi at verizon.net




On Oct 13, 2009, at 10:18 AM, Dirk Moors wrote:

> Hello Valeriy,
>
> I tried the thing you suggested, and I attached the (updated) code.
> Unfortunatly, the new code was even slower, producing the following  
> results:
>
> *** Starting Asynchronous Benchmarks. (Using Twisted, with "deferred- 
> decorator")
>   -> Asynchronous Benchmark (1 runs) Completed in 56.0279998779  
> seconds.
>   -> Asynchronous Benchmark (10 runs) Completed in 56.0130000114  
> seconds.
>   -> Asynchronous Benchmark (100 runs) Completed in 56.010999918  
> seconds.
>   -> Asynchronous Benchmark (1000 runs) Completed in 56.0410001278  
> seconds.
>   -> Asynchronous Benchmark (10000 runs) Completed in 56.3069999218  
> seconds.
>   -> Asynchronous Benchmark (100000 runs) Completed in 58.8910000324  
> seconds.
> *** Asynchronous Benchmarks Completed in 59.4659998417 seconds.
>
> I suspect that this would me more inefficient because with the  
> deferToThread function in place, every single operation will be  
> executed in its own thread, which means:
> (1 x 2) + (10 x 2) + (100 x 2) + (1000 x 2) + (10000 x 2) + (100000  
> x 2) threads....which is...a lot.
>
> Maybe the problem lies in the way I test the code? I understand that  
> using the asynchronous testcode this way (generating the deferreds  
> using a FOR-loop), a lot of deferreds are generated before the  
> reactor starts calling the deferred-callbacks.....would there be  
> another, better way to test the code?
> The reason I need to now which one is faster (async vs sync  
> functions) is because I need to decide on whetehr or not I should re- 
> evaluate the code I just recently finished building.
>
> Any other ideas maybe?
>
> Thanks in advance,
> Dirk
>
>
> ________________________________________________________________________________________________________________________________________________________
> Message: 3
> Date: Tue, 13 Oct 2009 09:41:19 -0400
> From: Valeriy Pogrebitskiy <vpogrebi at verizon.net>
> Subject: Re: [Twisted-Python] Twisted Python vs. "Blocking" Python:
>        Weird performance on small operations.
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Message-ID: <EDB2B354-B25D-4A98-AC9D-B9745CA6C3AB at verizon.net>
> Content-Type: text/plain; charset="us-ascii"
>
> Dirk,
>
> Using deferred directly in your bin2intAsync() may be somewhat less
> efficient than some other way described in Recipe 439358: [Twisted]
>  From blocking functions to deferred functions
>
> recipe (http://code.activestate.com/recipes/439358/)
>
> You would get same effect (asynchronous execution) - but potentially
> more efficiently - by just decorating your synchronous methods as:
>
> from twisted.internet.threads import deferToThread
> deferred = deferToThread.__get__
> ....
> @deferred
> def int2binAsync(anInteger):
>     #Packs an integer, result is 4 bytes
>     return struct.pack("i", anInteger)
>
> @deferred
> def bin2intAsync(aBin):
>     #Unpacks a bytestring into an integer
>     return struct.unpack("i", aBin)[0]
>
>
>
>
> Kind regards,
>
> Valeriy Pogrebitskiy
> vpogrebi at verizon.net
>
>
>
>
> On Oct 13, 2009, at 9:18 AM, Dirk Moors wrote:
>
> > Hello Everyone!
> >
> > My name is Dirk Moors, and since 4 years now, I've been involved in
> > developing a cloud computing platform, using Python as the
> > programming language. A year ago I discovered Twisted Python, and it
> > got me very interested, upto the point where I made the decision to
> > convert our platform (in progress) to a Twisted platform. One year
> > later I'm still very enthousiastic about the overal performance and
> > stability, but last week I encountered something I did't expect;
> >
> > It appeared that it was less efficient to run small "atomic"
> > operations in different deferred-callbacks, when compared to running
> > these "atomic" operations together in "blocking" mode. Am I doing
> > something wrong here?
> >
> > To prove the problem to myself, I created the following example
> > (Full source- and test code is attached):
> >  
> ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
> > import struct
> >
> > def int2binAsync(anInteger):
> >     def packStruct(i):
> >         #Packs an integer, result is 4 bytes
> >         return struct.pack("i", i)
> >
> >     d = defer.Deferred()
> >     d.addCallback(packStruct)
> >
> >     reactor.callLater(0,
> >                       d.callback,
> >                       anInteger)
> >
> >     return d
> >
> > def bin2intAsync(aBin):
> >     def unpackStruct(p):
> >         #Unpacks a bytestring into an integer
> >         return struct.unpack("i", p)[0]
> >
> >     d = defer.Deferred()
> >     d.addCallback(unpackStruct)
> >
> >     reactor.callLater(0,
> >                       d.callback,
> >                       aBin)
> >     return d
> >
> > def int2binSync(anInteger):
> >     #Packs an integer, result is 4 bytes
> >     return struct.pack("i", anInteger)
> >
> > def bin2intSync(aBin):
> >     #Unpacks a bytestring into an integer
> >     return struct.unpack("i", aBin)[0]
> >
> >  
> ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
> >
> > While running the testcode I got the following results:
> >
> > (1 run = converting an integer to a byte string, converting that
> > byte string back to an integer, and finally checking whether that
> > last integer is the same as the input integer.)
> >
> > *** Starting Synchronous Benchmarks. (No Twisted => "blocking" code)
> >   -> Synchronous Benchmark (1 runs) Completed in 0.0 seconds.
> >   -> Synchronous Benchmark (10 runs) Completed in 0.0 seconds.
> >   -> Synchronous Benchmark (100 runs) Completed in 0.0 seconds.
> >   -> Synchronous Benchmark (1000 runs) Completed in 0.00399994850159
> > seconds.
> >   -> Synchronous Benchmark (10000 runs) Completed in 0.0369999408722
> > seconds.
> >   -> Synchronous Benchmark (100000 runs) Completed in 0.362999916077
> > seconds.
> > *** Synchronous Benchmarks Completed in 0.406000137329 seconds.
> >
> > *** Starting Asynchronous Benchmarks . (Twisted => "non-blocking"
> > code)
> >   -> Asynchronous Benchmark (1 runs) Completed in 34.5090000629
> > seconds.
> >   -> Asynchronous Benchmark (10 runs) Completed in 34.5099999905
> > seconds.
> >   -> Asynchronous Benchmark (100 runs) Completed in 34.5130000114
> > seconds.
> >   -> Asynchronous Benchmark (1000 runs) Completed in 34.5859999657
> > seconds.
> >   -> Asynchronous Benchmark (10000 runs) Completed in 35.2829999924
> > seconds.
> >   -> Asynchronous Benchmark (100000 runs) Completed in 41.492000103
> > seconds.
> > *** Asynchronous Benchmarks Completed in 42.1460001469 seconds.
> >
> > Am I really seeing factor 100x??
> >
> > I really hope that I made a huge reasoning error here but I just
> > can't find it. If my results are correct then I really need to go
> > and check my entire cloud platform for the places where I decided to
> > split functions into atomic operations while thinking that it would
> > actually improve the performance while on the contrary it did the
> > opposit.
> >
> > I personaly suspect that I lose my cpu-cycles to the reactor
> > scheduling the deferred-callbacks. Would that assumption make any
> > sense?
> > The part where I need these conversion functions is in marshalling/
> > protocol reading and writing throughout the cloud platform, which
> > implies that these functions will be called constantly so I need
> > them to be superfast. I always though I had to split the entire
> > marshalling process into small atomic (deferred-callback) functions
> > to be efficient, but these figures tell me otherwise.
> >
> > I really hope someone can help me out here.
> >
> > Thanks in advance,
> > Best regards,
> > Dirk Moors
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> > <twistedbenchmark.py>_______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> -------------- next part --------------
> An HTML attachment was scrubbed...
> URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091013/e9ae2546/attachment.htm
>
> ------------------------------
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> End of Twisted-Python Digest, Vol 67, Issue 22
> **********************************************
>
> <twistedbenchmark.py>_______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091013/af1ae18b/attachment.htm 

From listsin at integrateddevcorp.com  Tue Oct 13 10:43:33 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Tue, 13 Oct 2009 10:43:33 -0400
Subject: [Twisted-Python] Twisted-Python Digest, Vol 67, Issue 23
In-Reply-To: <cf75a1410910130732j7e3964f6m2fad9a4b71af7bee@mail.gmail.com>
References: <mailman.85392.1255443518.23374.twisted-python@twistedmatrix.com>
	<cf75a1410910130732j7e3964f6m2fad9a4b71af7bee@mail.gmail.com>
Message-ID: <10E77527-DAE9-4245-A5CF-EA5A1899023A@integrateddevcorp.com>


On Oct 13, 2009, at 10:32 AM, Dirk Moors wrote:

> Hello Reza,
>
> I tried the solution you provided and I have to say, that changed a  
> lot!
> You gave me a better understanding of how things work with Twisted,  
> and I really appreciate your response!

Can you show the new code and benchmark results?

Sounds like there's an important lesson here...

Thanks,

S



From steveire at gmail.com  Tue Oct 13 10:42:03 2009
From: steveire at gmail.com (Stephen Kelly)
Date: Tue, 13 Oct 2009 16:42:03 +0200
Subject: [Twisted-Python] python-twisted-akonadi and akonadi-gtk
Message-ID: <hb23jr$pj6$1@ger.gmane.org>

Hi,

Twisted is a framework for event driven applications. Typically client-
server architectures can be implemented with Twisted. Existing servers and 
clients exist for a long list of protocols and communication devices 
including HTTP, SSH, and notably for my purpose, IMAP and UNIX sockets. It 
provides an event loop, and asynchronous Deferred objects which are similar 
to KJob objects.

http://twistedmatrix.com/trac/

Akonadi is a cross platform PIM (personal information management) framework 
developed as part of the KDE4 platform. The goals of Akonadi include

* Isolating user applications handing PIM data such as emails, contacts, 
notes etc from the protocols used to access or store that data (IMAP, POP, 
Maildir, Groupware, vcards, etc).
* Provide a single point of storage (actually a cache) of PIM data 
accessible and manipulatable by any application written in any language on 
the target platform.

http://pim.kde.org/akonadi/

Akonadi is designed as a client/server architecture. The server is written 
in Qt/C++, and we already have one client library  for interfacing with the 
server written in C++ using the KDE platform. Notifications of changes to 
data are transmitted over D-Bus, and the actual data is transferred over a 
local socket (on Unix. On windows it's a named pipe). The protocol used for 
communication is IMAP with some non-standard extensions.

And so the purpose emerges :).

I have started an Akonadi client library written in python using twisted-
imap with some extensions on top of it for Akonadi specific functionality. 
The code currently lives here:

http://gitorious.org/python-twisted-akonadi

There is the twisted-akonadi library a gtkAkonadi library containing some 
high level classes for PyGtk applications and a simple email reader and 
addressbook written in pygtk. Because Akonadi keeps everything in sync, you 
can change items in a KDE application, the gtk application, or the django 
application, and the other two will be instantly updated with the change.

I've blogged about it twice already here:
* http://steveire.wordpress.com/2009/10/09/holy-grail-no-thanks-weve-
already-got-one/
* http://steveire.wordpress.com/2009/10/13/cross-platform-akonadi-video/

As you can see, this is only a proof of concept of the project. The aim is 
to create a library which feels pythonic and natural to use for twisted 
users. If you think I've started in the wrong way, or you have ideas for 
ways this API could be used, please let me know. I've just started with 
twisted, so I've probably not found some stuff which would make this task 
easier.

Additionally, if you would like to contribute to the project, that would be 
very welcome. :)

If you find the ideas here interesting and want to know more, the Akonadi 
developers are in #akonadi on Freenode and kde-pim at KDE.org, and I am 
already in #twisted.

It isn't quite a twisted success story yet, but I think it has the potential 
to become one.


All the best,

Steve.




From mardiros at laposte.net  Tue Oct 13 15:28:30 2009
From: mardiros at laposte.net (mardiros)
Date: Tue, 13 Oct 2009 21:28:30 +0200
Subject: [Twisted-Python] CalendarServer
In-Reply-To: <1255431505.1206.10.camel@hpcinf18.hguv.local>
References: <1255431505.1206.10.camel@hpcinf18.hguv.local>
Message-ID: <4AD4D4DE.9000501@laposte.net>


Fernando Ruza Rodriguez a ?crit :
> ~$ svn co svn://svn.twistedmatrix.com/svn/Twisted/trunk Twisted
> svn: Cannot be possible to connect to 'svn.twistedmatrix.com': time
>
> Thanks.
>
> Fernando.
>
>   
I have the same problem at my office,
svn port is closed by the firewall ( Port 3690 )

http://svnbook.red-bean.com/en/1.0/ch06s03.html

mardiros




From listsin at integrateddevcorp.com  Tue Oct 13 20:02:47 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Tue, 13 Oct 2009 20:02:47 -0400
Subject: [Twisted-Python] How to find out if exceptions are being raised in
	your errBack?
Message-ID: <E096D98B-3BD0-464A-94DF-C28ED3337066@integrateddevcorp.com>

I've been hunting down a problem that I've finally found the cause of  
and I'd like to know what's the Twisted way to catch this "error  
within the code handling the error"  type of error.

Basically, in one branch of the errBack, there was a typo.  A simple  
typo that caused an unhandled NameError exception, but only once in  a  
few thousand runs.

The exception got caught and "displayed" by Twisted, but it wasn't  
going anyplace anyone was looking (buried under zillions of lines of  
logging) and the app continues on as if nothing went wrong.

I've put up a simple app that demonstrates the issue: http://pastebin.com/m59217f60

If you put in a 404 error URL, let it run through, you'll see the 404  
error printed out, the exception will occur in the background, and the  
program just keeps on going.

If you then hit Ctrl-C, you can see the traceback showing that Twisted  
caught the NameError .

What is the best way to handle programming errors like this in  
deferreds so they don't slip by, unnoticed?

Thanks,

S

(~/twisted_err)# ./errs_away.py
URL: http://www.yahoo.com
line = http://www.yahoo.com
Got data, len ==  9490
URL: http://thereisnodomainnamedthis.com
line = http://thereisnodomainnamedthis.com
Error: DNS lookup failed: address 'thereisnodomainnamedthis.com' not  
found: [Errno 8] nodename nor servname provided, or not known.
URL: http://www.yahoo.com/non-existent-page
line = http://www.yahoo.com/non-existent-page
Error: 400 Bad Request	<====== This triggers the code with the bad  
variable
URL: ^C		<============= manually stop the program

============= Then, you get to see the traceback ==================
Unhandled error in Deferred:
Traceback (most recent call last):
   File "/System/Library/Frameworks/Python.framework/Versions/2.6/ 
Extras/lib/python/twisted/web/client.py", line 143, in handleResponse
     self.status, self.message, response)))
   File "/System/Library/Frameworks/Python.framework/Versions/2.6/ 
Extras/lib/python/twisted/web/client.py", line 309, in noPage
     self.deferred.errback(reason)
   File "/System/Library/Frameworks/Python.framework/Versions/2.6/ 
Extras/lib/python/twisted/internet/defer.py", line 269, in errback
     self._startRunCallbacks(fail)
   File "/System/Library/Frameworks/Python.framework/Versions/2.6/ 
Extras/lib/python/twisted/internet/defer.py", line 312, in  
_startRunCallbacks
     self._runCallbacks()
--- <exception caught here> ---
   File "/System/Library/Frameworks/Python.framework/Versions/2.6/ 
Extras/lib/python/twisted/internet/defer.py", line 328, in _runCallbacks
     self.result = callback(self.result, *args, **kw)
   File "./errs_away.py", line 15, in printError
     print oops      # variable's not defined...
exceptions.NameError: global name 'oops' is not defined

Thanks,

S




From dgriff1 at gmail.com  Tue Oct 13 22:44:20 2009
From: dgriff1 at gmail.com (Daniel Griffin)
Date: Tue, 13 Oct 2009 21:44:20 -0500
Subject: [Twisted-Python] Twisted Performance
Message-ID: <3db160680910131944w7f101c1fhfd29dad00eb4dfe0@mail.gmail.com>

Hi,

I am new to twisted and have been having trouble finding out information
about twisted's performance. I have a fairly simple setup where I need to
open a bunch of TCP connections that last for varying amounts of time but
dont do much. I have tried using threads(got GILed to death) and
Processes(even worse). Now I am looking at either making a system to start
the connection and send info to have the remote point "phone home" when its
done, then closing the connection or using something like Twisted.

my socket conversation:
my app -> send a message that triggers an action on the other end
other end -> recv's message does action(can take any amount of time)
other end - > sends results back to my app

Can twisted handle up to several hundred connections like this? Is there a
better approach? Is there anything I should avoid?

Thanks,

Dan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091013/625eb989/attachment.htm 

From listsin at integrateddevcorp.com  Wed Oct 14 00:34:56 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Wed, 14 Oct 2009 00:34:56 -0400
Subject: [Twisted-Python] Twisted Performance
In-Reply-To: <3db160680910131944w7f101c1fhfd29dad00eb4dfe0@mail.gmail.com>
References: <3db160680910131944w7f101c1fhfd29dad00eb4dfe0@mail.gmail.com>
Message-ID: <7E5C519B-FC3C-430D-8D78-35A91C66286F@integrateddevcorp.com>


On Oct 13, 2009, at 10:44 PM, Daniel Griffin wrote:

> Hi,
>
> I am new to twisted and have been having trouble finding out  
> information about twisted's performance. I have a fairly simple  
> setup where I need to open a bunch of TCP connections that last for  
> varying amounts of time but dont do much. I have tried using threads 
> (got GILed to death) and Processes(even worse). Now I am looking at  
> either making a system to start the connection and send info to have  
> the remote point "phone home" when its done, then closing the  
> connection or using something like Twisted.
>
> my socket conversation:
> 	my app -> send a message that triggers an action on the other end
> 	other end -> recv's message does action(can take any amount of time)
> 	other end - > sends results back to my app

Twisted Documentation: Writing Clients

I would suggest deferring worrying at this point. (;-b).

Twisted can almost certainly handle it.

Do the simplest thing possible, see how it performs, then worry as  
necessary.

S

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091014/43df3a5f/attachment.htm 

From glyph at twistedmatrix.com  Wed Oct 14 02:07:49 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 14 Oct 2009 02:07:49 -0400
Subject: [Twisted-Python] How to find out if exceptions are being raised
	in your errBack?
In-Reply-To: <E096D98B-3BD0-464A-94DF-C28ED3337066@integrateddevcorp.com>
References: <E096D98B-3BD0-464A-94DF-C28ED3337066@integrateddevcorp.com>
Message-ID: <d9047f780910132307l3a217978s5843f84f4263c9c8@mail.gmail.com>

On Tue, Oct 13, 2009 at 8:02 PM, Steve Steiner (listsin) <
listsin at integrateddevcorp.com> wrote:

> I've been hunting down a problem that I've finally found the cause of
> and I'd like to know what's the Twisted way to catch this "error
> within the code handling the error"  type of error.
>

The right way to catch this is to write tests for your code and run them
before deploying it to production :).  Trial will helpfully fail tests which
cause exceptions to be logged, so you don't need to write any special extra
test to make sure that nothing is blowing up; just test your error-handling
case, and if it blows up you will see it.


> Basically, in one branch of the errBack, there was a typo.  A simple
> typo that caused an unhandled NameError exception, but only once in  a
> few thousand runs.
>

If it's a NameError, you also could have used Pyflakes to catch it :).


> The exception got caught and "displayed" by Twisted, but it wasn't
> going anyplace anyone was looking (buried under zillions of lines of
> logging) and the app continues on as if nothing went wrong.
>

The real lesson here is that you should be paying attention to logged
tracebacks.

There are many ways to do this.  Many operations teams running Twisted
servers will trawl the logs with regular expressions.  Not my preferred way
of doing it, but I'm not really an ops person :).

If you want to handle logged exceptions specially, for example to put them
in a separate file, or to e-mail them to somebody, consider writing a log
observer that checks for the isError key and does something special there.
You can find out more about writing log observers here: <
http://twistedmatrix.com/projects/core/documentation/howto/logging.html>.


> What is the best way to handle programming errors like this in
> deferreds so they don't slip by, unnoticed?
>

I'm answering a question you didn't ask, about logged errors, because I
think it's the one you meant to ask.  The answer to the question you are
actually asking here, i.e. "how do I handle errors in an errback", is quite
simple: add another errback.  This is sort of like asking how to handle
exceptions in an 'except:' block in Python.  For example, if you want to
catch errors from this code:

try:
  foo()
except:
  oops()

you could modify it to look like this:

try:
  foo()
except:
  try:
    oops()
  except:
    handleOopsOops()

which is what adding another errback is like.  But, as I said: I don't think
this is what you want, since it will only let you handle un-handled errors
in Deferreds (not unhandled errors in, for example, protocols) and you will
have to attach your error-handling callbacks everywhere (not to mention
trying to guess a sane return value for the error-handler-error-handler.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091014/7c4cd6a6/attachment.htm 

From andrew at bemusement.org  Wed Oct 14 03:22:34 2009
From: andrew at bemusement.org (Andrew Bennetts)
Date: Wed, 14 Oct 2009 18:22:34 +1100
Subject: [Twisted-Python] How to find out if exceptions are being	raised
	in your errBack?
In-Reply-To: <d9047f780910132307l3a217978s5843f84f4263c9c8@mail.gmail.com>
References: <E096D98B-3BD0-464A-94DF-C28ED3337066@integrateddevcorp.com>
	<d9047f780910132307l3a217978s5843f84f4263c9c8@mail.gmail.com>
Message-ID: <20091014072234.GB16893@steerpike.home.puzzling.org>

Glyph Lefkowitz wrote:
[...]
>    I'm answering a question you didn't ask, about logged errors, because I
>    think it's the one you meant to ask.? The answer to the question you are
>    actually asking here, i.e. "how do I handle errors in an errback", is
>    quite simple: add another errback.? This is sort of like asking how to
>    handle exceptions in an 'except:' block in Python.? For example, if you
[...]

To think about it another way, what happens when an unhandled exception occurs
in a thread?  The thread dies, and Python simply throws the traceback at stderr.
There's not much else it can reasonably do.  If you want to catch (or suppress)
that error, you add (another) try/except at the outermost layer of the call
stack.

Possibly Twisted could provide some sort of last-ditch error reporting hook,
like sys.excepthook in core Python, but I'm not sure it would offer much
advantage over writing a log observer that looks for events where isError is
set.

-Andrew.



From lvh at laurensvh.be  Wed Oct 14 04:55:53 2009
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Wed, 14 Oct 2009 10:55:53 +0200
Subject: [Twisted-Python] Twisted Performance
In-Reply-To: <3db160680910131944w7f101c1fhfd29dad00eb4dfe0@mail.gmail.com>
References: <3db160680910131944w7f101c1fhfd29dad00eb4dfe0@mail.gmail.com>
Message-ID: <cedc0c090910140155l4bfd70eek364dca61c9ea2f44@mail.gmail.com>

On Wed, Oct 14, 2009 at 4:44 AM, Daniel Griffin <dgriff1 at gmail.com> wrote:
> Hi,
>
> I am new to twisted and have been having trouble finding out information
> about twisted's performance. I have a fairly simple setup where I need to
> open a bunch of TCP connections that last for varying amounts of time but
> dont do much. I have tried using threads(got GILed to death) and
> Processes(even worse). Now I am looking at either making a system to start
> the connection and send info to have the remote point "phone home" when its
> done, then closing the connection or using something like Twisted.
>
> my socket conversation:
> my app -> send a message that triggers an action on the other end
> other end -> recv's message does action(can take any amount of time)
> other end - > sends results back to my app

Sure, that's a blueprint for pretty much every Twisted app. You just
need to make the thing that takes a long time not block the reactor.
How you do that mostly depends on what the "long thing" is.

Usually this means using an existing library, sometimes it means
writing your own, and for some unfortunate cases it means deferring to
a thread. (Note that deferring to a thread to fake non-blocking IO is
not anywhere near as bad as doing actual _work_ in threads ;-))

Personally I'm a big fan of this series of blog posts:
http://krondo.com/blog/?page_id=1327

And you should probably read the finger tutorial and the deferreds tutorial :-)

> Can twisted handle up to several hundred connections like this? Is there a
> better approach? Is there anything I should avoid?

Depends how much work you're doing in the Twisted process or on the
same box, of course. You're probably looking at several thousand
rather than several hundred, depending on how much work needs to be
done in each one.

> Thanks,
>
> Dan


From listsin at integrateddevcorp.com  Wed Oct 14 07:31:02 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Wed, 14 Oct 2009 07:31:02 -0400
Subject: [Twisted-Python] How to find out if exceptions are being	raised
	in your errBack?
In-Reply-To: <20091014072234.GB16893@steerpike.home.puzzling.org>
References: <E096D98B-3BD0-464A-94DF-C28ED3337066@integrateddevcorp.com>
	<d9047f780910132307l3a217978s5843f84f4263c9c8@mail.gmail.com>
	<20091014072234.GB16893@steerpike.home.puzzling.org>
Message-ID: <A18C0B08-5D81-416A-8485-777AF02A8326@integrateddevcorp.com>


On Oct 14, 2009, at 3:22 AM, Andrew Bennetts wrote:

> Glyph Lefkowitz wrote:
> [...]
>>   I'm answering a question you didn't ask, about logged errors,  
>> because I
>>   think it's the one you meant to ask.  The answer to the question  
>> you are
>>   actually asking here, i.e. "how do I handle errors in an  
>> errback", is
>>   quite simple: add another errback.  This is sort of like asking  
>> how to
>>   handle exceptions in an 'except:' block in Python.  For example,  
>> if you
> [...]
>
> To think about it another way, what happens when an unhandled  
> exception occurs
> in a thread?  The thread dies, and Python simply throws the  
> traceback at stderr.
> There's not much else it can reasonably do.  If you want to catch  
> (or suppress)
> that error, you add (another) try/except at the outermost layer of  
> the call
> stack.

Yah, I started thinking about how far out I'd have to start the try/ 
except and started to get a headache when I thought about how much  
code it would have to encompass or, with an alternate approach, how  
many zillions of little extra blocks I'd have to insert everywhere.

> Possibly Twisted could provide some sort of last-ditch error  
> reporting hook,
> like sys.excepthook in core Python, but I'm not sure it would offer  
> much
> advantage over writing a log observer that looks for events where  
> isError is
> set.

I'm going to use the log observer option with tail -f in a separate  
console window on a linux console that's just sitting there doing  
nothing anyway.  That way, if it shows up on that terminal, something  
bad is happening.

Thanks!

S



From listsin at integrateddevcorp.com  Wed Oct 14 07:43:41 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Wed, 14 Oct 2009 07:43:41 -0400
Subject: [Twisted-Python] How to find out if exceptions are being raised
	in your errBack?
In-Reply-To: <d9047f780910132307l3a217978s5843f84f4263c9c8@mail.gmail.com>
References: <E096D98B-3BD0-464A-94DF-C28ED3337066@integrateddevcorp.com>
	<d9047f780910132307l3a217978s5843f84f4263c9c8@mail.gmail.com>
Message-ID: <B04EC372-364F-4A97-A51A-DB074933997D@integrateddevcorp.com>


On Oct 14, 2009, at 2:07 AM, Glyph Lefkowitz wrote:

> On Tue, Oct 13, 2009 at 8:02 PM, Steve Steiner (listsin) <listsin at integrateddevcorp.com 
> > wrote:
> I've been hunting down a problem that I've finally found the cause of
> and I'd like to know what's the Twisted way to catch this "error
> within the code handling the error"  type of error.
>
> The right way to catch this is to write tests for your code and run  
> them before deploying it to production :).

Yes, we're working on it but it's a large code base and we started  
with exactly zero tests.  While that leaves infinite room for  
improvement, it's a little overwhelming.  Oh well, at least we know  
where to concentrate first ;-0.

> Trial will helpfully fail tests which cause exceptions to be logged,  
> so you don't need to write any special extra test to make sure that  
> nothing is blowing up; just test your error-handling case, and if it  
> blows up you will see it.

We've just been using nose; is that something Trial handles specially  
for Twisted?

> Basically, in one branch of the errBack, there was a typo.  A simple
> typo that caused an unhandled NameError exception, but only once in  a
> few thousand runs.
>
> If it's a NameError, you also could have used Pyflakes to catch it :).

That's in our list of 'things to put in the commit pre-hook' as well.   
I'm not sure pyflakes would have caught this one, though because it's  
a legitimate instance variable, it's just not set to something usable  
before this particular error condition comes up.

> The exception got caught and "displayed" by Twisted, but it wasn't
> going anyplace anyone was looking (buried under zillions of lines of
> logging) and the app continues on as if nothing went wrong.
>
> The real lesson here is that you should be paying attention to  
> logged tracebacks.
>
> There are many ways to do this.  Many operations teams running  
> Twisted servers will trawl the logs with regular expressions.  Not  
> my preferred way of doing it, but I'm not really an ops person :).

I'm not much on the ops end either but I guess I'm learning...

> If you want to handle logged exceptions specially, for example to  
> put them in a separate file, or to e-mail them to somebody, consider  
> writing a log observer that checks for the isError key and does  
> something special there.  You can find out more about writing log  
> observers here: <http://twistedmatrix.com/projects/core/documentation/howto/logging.html 
> >.

This is an area of Twisted I haven't explored at all since the code's  
all using the standard Python logging.

That's the thing about Twisted; sometimes it's hard to know whether  
the stuff that has been built into standard Python since Twisted  
'rolled their own' is a superset, a subset, or a completely different  
beast.  Logging is a good case in point.  Since we're using Python's  
logging everywhere, I wasn't even sure whether there would be an  
advantage to learning Twisted's similar system.  Twisted's trial is  
another example; we've just been using nose.  Seems like there's  
always some little extra that makes the Twisted stuff worth knowing.

> What is the best way to handle programming errors like this in
> deferreds so they don't slip by, unnoticed?
>
> I'm answering a question you didn't ask, about logged errors,  
> because I think it's the one you meant to ask.  The answer to the  
> question you are actually asking here, i.e. "how do I handle errors  
> in an errback", is quite simple: add another errback.  This is sort  
> of like asking how to handle exceptions in an 'except:' block in  
> Python.  For example, if you want to catch errors from this code:
>
> try:
>   foo()
> except:
>   oops()
>
> you could modify it to look like this:
>
> try:
>   foo()
> except:
>   try:
>     oops()
>   except:
>     handleOopsOops()
>
> which is what adding another errback is like.  But, as I said: I  
> don't think this is what you want, since it will only let you handle  
> un-handled errors in Deferreds (not unhandled errors in, for  
> example, protocols) and you will have to attach your error-handling  
> callbacks everywhere (not to mention trying to guess a sane return  
> value for the error-handler-error-handler.

Right, I started thinking down that infinitely nested slippery slope  
and figured there must be a better way.  I think the logging question  
you answered that I didn't ask was the one I meant ;-).

Thanks again for another enlightening answer.

S



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091014/e86d131c/attachment.htm 

From listsin at integrateddevcorp.com  Wed Oct 14 08:14:51 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Wed, 14 Oct 2009 08:14:51 -0400
Subject: [Twisted-Python] Twisted Performance
In-Reply-To: <cedc0c090910140155l4bfd70eek364dca61c9ea2f44@mail.gmail.com>
References: <3db160680910131944w7f101c1fhfd29dad00eb4dfe0@mail.gmail.com>
	<cedc0c090910140155l4bfd70eek364dca61c9ea2f44@mail.gmail.com>
Message-ID: <80F2A1FE-BE1F-404F-BD29-21BA0B7B4D16@integrateddevcorp.com>


On Oct 14, 2009, at 4:55 AM, Laurens Van Houtven wrote:
> Personally I'm a big fan of this series of blog posts:
> http://krondo.com/blog/?page_id=1327

Very nice, thanks for sharing!

S



From screwtape at froup.com  Wed Oct 14 08:26:27 2009
From: screwtape at froup.com (Tim Allen)
Date: Wed, 14 Oct 2009 23:26:27 +1100
Subject: [Twisted-Python] How to find out if exceptions are being raised
 in your errBack?
In-Reply-To: <B04EC372-364F-4A97-A51A-DB074933997D@integrateddevcorp.com>
References: <E096D98B-3BD0-464A-94DF-C28ED3337066@integrateddevcorp.com>
	<d9047f780910132307l3a217978s5843f84f4263c9c8@mail.gmail.com>
	<B04EC372-364F-4A97-A51A-DB074933997D@integrateddevcorp.com>
Message-ID: <20091014122627.GA19632@thristian.org>

On Wed, Oct 14, 2009 at 07:43:41AM -0400, Steve Steiner (listsin) wrote:
> That's the thing about Twisted; sometimes it's hard to know whether
> the stuff that has been built into standard Python since Twisted
> 'rolled their own' is a superset, a subset, or a completely
> different beast.  Logging is a good case in point.  Since we're
> using Python's logging everywhere, I wasn't even sure whether there
> would be an advantage to learning Twisted's similar system.
> Twisted's trial is another example; we've just been using nose.
> Seems like there's always some little extra that makes the Twisted
> stuff worth knowing.

Most of the duplicate stuff in Twisted has the excuse of being written
before any alternatives were available, and usually having one or two
extra little integration features that current alternatives don't
provide.

A year or two ago I was planning a new project using Twisted, and (as
a reaction to the masses of horrible, legacy code at my employer) had
decreed that the project would use the Python stdlib wherever possible,
including logging and testing, and well-integrated third-party tools
where necessary.

First on the chopping block was the use of standard Python unit-tests
and nose. At the time, I don't believe it was possible to run TestCases
inheriting from twisted.trial.unittest.TestCase in anything besides
Trial - and you need to use trial's TestCase class if you want to do
anything with Deferreds, so nose and the standard unittest.TestCase had
to go.

Once I was using Trial, which automatically sets up Twisted's logging
system to log to a handy file for debugging purposes, I had to decide
what to do about logging - try to reroute Twisted's logging into the
Python logging system (which would mean doing something complicated for
tests), or just give up and use Twisted's logging everywhere. I opted
for the latter route as the path of least resistance (and because it
would be easier to set up with twistd later).

I believe nose does for Python logging what Trial does for Twisted
logging these days, and if nose can run Trial's TestCase subclasses, you
might just as well stick with what you're already using. There are
integration advantages to using all the Twisted goodies together, but
it's not nearly the same amazing quantum leap in understanding and
capability that Twisted's core provides.


From glyph at twistedmatrix.com  Wed Oct 14 08:45:28 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 14 Oct 2009 05:45:28 -0700
Subject: [Twisted-Python] How to find out if exceptions are being raised
	in your errBack?
In-Reply-To: <B04EC372-364F-4A97-A51A-DB074933997D@integrateddevcorp.com>
References: <E096D98B-3BD0-464A-94DF-C28ED3337066@integrateddevcorp.com>
	<d9047f780910132307l3a217978s5843f84f4263c9c8@mail.gmail.com>
	<B04EC372-364F-4A97-A51A-DB074933997D@integrateddevcorp.com>
Message-ID: <d9047f780910140545u6d9c4f15w5f12885856a08c3f@mail.gmail.com>

On Wed, Oct 14, 2009 at 4:43 AM, Steve Steiner (listsin) <
listsin at integrateddevcorp.com> wrote:

>
> On Oct 14, 2009, at 2:07 AM, Glyph Lefkowitz wrote:
>
> Yes, we're working on it but it's a large code base and we started with
> exactly zero tests.  While that leaves infinite room for improvement, it's a
> little overwhelming.  Oh well, at least we know where to concentrate first
> ;-0.
>

I realize it's a challenge, but, well, "Doctor, doctor, it hurts when I
don't do this!".  My immediate reaction is "go ahead and do it, then" :-).

> Trial will helpfully fail tests which cause exceptions to be logged, so you
> don't need to write any special extra test to make sure that nothing is
> blowing up; just test your error-handling case, and if it blows up you will
> see it.
>
>
> We've just been using nose; is that something Trial handles specially for
> Twisted?
>

Yes.

> If you want to handle logged exceptions specially, for example to put them
> in a separate file, or to e-mail them to somebody, consider writing a log
> observer that checks for the isError key and does something special there.
> You can find out more about writing log observers here: <
> http://twistedmatrix.com/projects/core/documentation/howto/logging.html>.
>
>
> This is an area of Twisted I haven't explored at all since the code's all
> using the standard Python logging.
> That's the thing about Twisted; sometimes it's hard to know whether the
> stuff that has been built into standard Python since Twisted 'rolled their
> own' is a superset, a subset, or a completely different beast.  Logging is a
> good case in point.  Since we're using Python's logging everywhere, I wasn't
> even sure whether there would be an advantage to learning Twisted's similar
> system.  Twisted's trial is another example; we've just been using nose.
>  Seems like there's always some little extra that makes the Twisted stuff
> worth knowing.
>

Another option here would be to set up a PythonLoggingObserver that relay's
Twisted's log messages to Python standard logging, then setup a standard log
handler (another poster suggests nose already does this) to fail the test
when appropriate.  I'm fairly sure that the information you need is being
properly relayed to the relevant parties, but if I'm wrong, it's a bug and
probably a pretty easy one to fix :).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091014/4828fde8/attachment-0001.htm 

From listsin at integrateddevcorp.com  Wed Oct 14 09:05:00 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Wed, 14 Oct 2009 09:05:00 -0400
Subject: [Twisted-Python] How to find out if exceptions are being raised
	in your errBack?
In-Reply-To: <20091014122627.GA19632@thristian.org>
References: <E096D98B-3BD0-464A-94DF-C28ED3337066@integrateddevcorp.com>
	<d9047f780910132307l3a217978s5843f84f4263c9c8@mail.gmail.com>
	<B04EC372-364F-4A97-A51A-DB074933997D@integrateddevcorp.com>
	<20091014122627.GA19632@thristian.org>
Message-ID: <9CCEFD45-01E6-4875-B3CA-A4E17AE6E1F7@integrateddevcorp.com>


On Oct 14, 2009, at 8:26 AM, Tim Allen wrote:

> On Wed, Oct 14, 2009 at 07:43:41AM -0400, Steve Steiner (listsin)  
> wrote:
>> That's the thing about Twisted; sometimes it's hard to know whether
>> the stuff that has been built into standard Python since Twisted
>> 'rolled their own' is a superset, a subset, or a completely
>> different beast.  Logging is a good case in point.  Since we're
>> using Python's logging everywhere, I wasn't even sure whether there
>> would be an advantage to learning Twisted's similar system.
>> Twisted's trial is another example; we've just been using nose.
>> Seems like there's always some little extra that makes the Twisted
>> stuff worth knowing.
>
> Most of the duplicate stuff in Twisted has the excuse of being written
> before any alternatives were available, and usually having one or two
> extra little integration features that current alternatives don't
> provide.

Yes, that extra little integration feature sometimes makes a huge  
difference.  But, as you said, being as much of Twisted's stuff  
predates the 'equivalent' stdlib stuff, it's hard to know where the  
leverage is going to be.

For example, Python's standard logging has the advantage of being able  
to generate many different types of logging outputs (e.g.  
logging.handlers.SMTPHandler) whereas Twisted's is better integrated  
with Twisted but is missing many of those types of things.

Trial and deferreds vs. nose and its integration with e.g. coverage...

It's hard to know when to use which and, as you said, we want to use  
standard library stuff wherever possible.

> Once I was using Trial, which automatically sets up Twisted's logging
> system to log to a handy file for debugging purposes, I had to decide
> what to do about logging - try to reroute Twisted's logging into the
> Python logging system (which would mean doing something complicated  
> for
> tests), or just give up and use Twisted's logging everywhere. I opted
> for the latter route as the path of least resistance (and because it
> would be easier to set up with twistd later).

I'm working out a blended method having a PythonLoggingObserver that  
relay's Twisted's log messages to Python standard logging, as per  
Glyph's suggestion.  That way we don't have to mangle all of our  
working logging code, bug special notifications we can reroute to a  
special "Twisted Messages" file that we know to keep an eye on.

> I believe nose does for Python logging what Trial does for Twisted
> logging these days, and if nose can run Trial's TestCase subclasses,  
> you
> might just as well stick with what you're already using. There are
> integration advantages to using all the Twisted goodies together, but
> it's not nearly the same amazing quantum leap in understanding and
> capability that Twisted's core provides.

Again, we'll probably end up with a blended approach since we use nose  
for coverage and profiling integration as well.

We are having fun now, right?

S




From dgriff1 at gmail.com  Wed Oct 14 09:53:22 2009
From: dgriff1 at gmail.com (Daniel Griffin)
Date: Wed, 14 Oct 2009 08:53:22 -0500
Subject: [Twisted-Python] Twisted Performance
In-Reply-To: <80F2A1FE-BE1F-404F-BD29-21BA0B7B4D16@integrateddevcorp.com>
References: <3db160680910131944w7f101c1fhfd29dad00eb4dfe0@mail.gmail.com>
	<cedc0c090910140155l4bfd70eek364dca61c9ea2f44@mail.gmail.com>
	<80F2A1FE-BE1F-404F-BD29-21BA0B7B4D16@integrateddevcorp.com>
Message-ID: <3db160680910140653t6fb4f9ddk3051afc056f6a8b9@mail.gmail.com>

Sounds good, I am going to try to get this up and running over the next few
days. I'll get back with some results.


Dan

On Wed, Oct 14, 2009 at 7:14 AM, Steve Steiner (listsin) <
listsin at integrateddevcorp.com> wrote:

>
> On Oct 14, 2009, at 4:55 AM, Laurens Van Houtven wrote:
> > Personally I'm a big fan of this series of blog posts:
> > http://krondo.com/blog/?page_id=1327
>
> Very nice, thanks for sharing!
>
> S
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091014/ec624523/attachment.htm 

From dave at krondo.com  Wed Oct 14 21:30:21 2009
From: dave at krondo.com (Dave Peticolas)
Date: Wed, 14 Oct 2009 18:30:21 -0700
Subject: [Twisted-Python] Twisted Performance
In-Reply-To: <80F2A1FE-BE1F-404F-BD29-21BA0B7B4D16@integrateddevcorp.com>
References: <3db160680910131944w7f101c1fhfd29dad00eb4dfe0@mail.gmail.com>	<cedc0c090910140155l4bfd70eek364dca61c9ea2f44@mail.gmail.com>
	<80F2A1FE-BE1F-404F-BD29-21BA0B7B4D16@integrateddevcorp.com>
Message-ID: <4AD67B2D.3050500@krondo.com>

Steve Steiner (listsin) wrote:
> On Oct 14, 2009, at 4:55 AM, Laurens Van Houtven wrote:
>> Personally I'm a big fan of this series of blog posts:
>> http://krondo.com/blog/?page_id=1327
> 
> Very nice, thanks for sharing!

Thank you. I really meant to make a public announcement
about that on this list, but I was trying to get to
Deferreds first :)

Anyway...I'm writing an Introduction to Twisted and
asynchronous programming. Surprise :)

dave


From listsin at integrateddevcorp.com  Wed Oct 14 21:47:35 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Wed, 14 Oct 2009 21:47:35 -0400
Subject: [Twisted-Python] Twisted Performance
In-Reply-To: <4AD67B2D.3050500@krondo.com>
References: <3db160680910131944w7f101c1fhfd29dad00eb4dfe0@mail.gmail.com>	<cedc0c090910140155l4bfd70eek364dca61c9ea2f44@mail.gmail.com>
	<80F2A1FE-BE1F-404F-BD29-21BA0B7B4D16@integrateddevcorp.com>
	<4AD67B2D.3050500@krondo.com>
Message-ID: <4EBDD6C1-53B5-4CA9-AD44-205F5E101264@integrateddevcorp.com>

Cool, please let me know off-list if you'd like a quick review before  
"going live."

S

On Oct 14, 2009, at 9:30 PM, Dave Peticolas wrote:

> Steve Steiner (listsin) wrote:
>> On Oct 14, 2009, at 4:55 AM, Laurens Van Houtven wrote:
>>> Personally I'm a big fan of this series of blog posts:
>>> http://krondo.com/blog/?page_id=1327
>>
>> Very nice, thanks for sharing!
>
> Thank you. I really meant to make a public announcement
> about that on this list, but I was trying to get to
> Deferreds first :)
>
> Anyway...I'm writing an Introduction to Twisted and
> asynchronous programming. Surprise :)
>
> dave
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From listsin at integrateddevcorp.com  Thu Oct 15 00:01:45 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Thu, 15 Oct 2009 00:01:45 -0400
Subject: [Twisted-Python] Can I post a consultant request here?
Message-ID: <EF928A00-AFA0-4529-AFC0-DDF1F26B2CF4@integrateddevcorp.com>

Hey!

	I apologize in advance if this type of request is not desired/allowed  
on this list.

	I'm looking for a very short-term mentoring/consulting contract to   
help me get an Ajax/Comet type of connection working between a web  
interface and a fairly long-running, server-side process.

	I want the web interface to reflect the server-side data as it  
becomes available.

	I'm sure someone on this list knows exactly how to hook the pieces  
together; I don't.

	It would be much more efficient to have someone who already knows  
help me hook it up instead of spending an unpredictable amount of time  
figuring it out myself.

	I'd also like to have, as a primary product of this project, a  
tutorial showing a real-world application of Twisted to handle a  
modern, real-world use-case with full, open, well documented source  
code.

	If you're interested, please contact me off-list at  
ssteinerx at gmail.com.

Thanks,

S


	



From itamar at itamarst.org  Thu Oct 15 08:53:58 2009
From: itamar at itamarst.org (Itamar Turner-Trauring (aka Shtull-Trauring))
Date: Thu, 15 Oct 2009 08:53:58 -0400
Subject: [Twisted-Python] Can I post a consultant request here?
In-Reply-To: <EF928A00-AFA0-4529-AFC0-DDF1F26B2CF4@integrateddevcorp.com>
References: <EF928A00-AFA0-4529-AFC0-DDF1F26B2CF4@integrateddevcorp.com>
Message-ID: <1255611238.2243.85.camel@pintsize>

On Thu, 2009-10-15 at 00:01 -0400, Steve Steiner (listsin) wrote:
> Hey!
> 
> 	I apologize in advance if this type of request is not desired/allowed  
> on this list.

Nope, it's fine. You might also want to post to the twisted-web list.

> 	I'm looking for a very short-term mentoring/consulting contract to   
> help me get an Ajax/Comet type of connection working between a web  
> interface and a fairly long-running, server-side process.
> 
> 	I want the web interface to reflect the server-side data as it  
> becomes available.

Have you seen http://orbited.org? Latest version uses Twisted, I think.



From christopher.zorn at gmail.com  Thu Oct 15 09:11:44 2009
From: christopher.zorn at gmail.com (Christopher Zorn)
Date: Thu, 15 Oct 2009 09:11:44 -0400
Subject: [Twisted-Python] Can I post a consultant request here?
In-Reply-To: <EF928A00-AFA0-4529-AFC0-DDF1F26B2CF4@integrateddevcorp.com>
References: <EF928A00-AFA0-4529-AFC0-DDF1F26B2CF4@integrateddevcorp.com>
Message-ID: <149014b90910150611p21747fd1ra668649759e60ebd@mail.gmail.com>

On Thu, Oct 15, 2009 at 12:01 AM, Steve Steiner (listsin) <
listsin at integrateddevcorp.com> wrote:

> Hey!
>
>        I apologize in advance if this type of request is not
> desired/allowed
> on this list.
>
>        I'm looking for a very short-term mentoring/consulting contract to
> help me get an Ajax/Comet type of connection working between a web
> interface and a fairly long-running, server-side process.
>
>        I want the web interface to reflect the server-side data as it
> becomes available.
>
>        I'm sure someone on this list knows exactly how to hook the pieces
> together; I don't.
>
>        It would be much more efficient to have someone who already knows
> help me hook it up instead of spending an unpredictable amount of time
> figuring it out myself.
>
>        I'd also like to have, as a primary product of this project, a
> tutorial showing a real-world application of Twisted to handle a
> modern, real-world use-case with full, open, well documented source
> code.
>
>
Punjab is a BOSH connection manager. Which is a HTTP long polling connection
to an XMPP server.

See : http://code.stanziq.com/punjab

It is used at http://www.chesspark.com and other places.

And of course, it is twisted! :)



>        If you're interested, please contact me off-list at
> ssteinerx at gmail.com.
>
> Thanks,
>
> S
>
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091015/5b1f657f/attachment.htm 

From listsin at integrateddevcorp.com  Thu Oct 15 10:04:32 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Thu, 15 Oct 2009 10:04:32 -0400
Subject: [Twisted-Python] Can I post a consultant request here?
In-Reply-To: <149014b90910150611p21747fd1ra668649759e60ebd@mail.gmail.com>
References: <EF928A00-AFA0-4529-AFC0-DDF1F26B2CF4@integrateddevcorp.com>
	<149014b90910150611p21747fd1ra668649759e60ebd@mail.gmail.com>
Message-ID: <5534FAB8-046F-43DC-9895-4C181657F249@integrateddevcorp.com>


On Oct 15, 2009, at 9:11 AM, Christopher Zorn wrote:

>
>
> On Thu, Oct 15, 2009 at 12:01 AM, Steve Steiner (listsin) <listsin at integrateddevcorp.com 
> > wrote:
>        It would be much more efficient to have someone who already  
> knows
> help me hook it up instead of spending an unpredictable amount of time
> figuring it out myself.
>
>        I'd also like to have, as a primary product of this project, a
> tutorial showing a real-world application of Twisted to handle a
> modern, real-world use-case with full, open, well documented source
> code.
>
>
> Punjab is a BOSH connection manager. Which is a HTTP long polling  
> connection to an XMPP server.
>
> See : http://code.stanziq.com/punjab
>
> It is used at http://www.chesspark.com and other places.
>
> And of course, it is twisted! :)

Ok...thanks for that.

Do you know, off the top of your head, how to use it?

The whole idea here is to get off the ground without spending hours  
figuring out a whole new protocol/product.

None of the examples seem to have any actual content in them.

While this may be a fine product and all, this is exactly what I  
*don't* want to do.

I want something I can drop in and someone to help me do it.

Thanks,

S








-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091015/85c3ea6e/attachment.htm 

From listsin at integrateddevcorp.com  Thu Oct 15 10:14:26 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Thu, 15 Oct 2009 10:14:26 -0400
Subject: [Twisted-Python] Can I post a consultant request here?
In-Reply-To: <1255611238.2243.85.camel@pintsize>
References: <EF928A00-AFA0-4529-AFC0-DDF1F26B2CF4@integrateddevcorp.com>
	<1255611238.2243.85.camel@pintsize>
Message-ID: <12303E0F-10BA-4D6A-A3B1-3589229D599F@integrateddevcorp.com>


On Oct 15, 2009, at 8:53 AM, Itamar Turner-Trauring (aka Shtull- 
Trauring) wrote:

> On Thu, 2009-10-15 at 00:01 -0400, Steve Steiner (listsin) wrote:
>> Hey!
>>
>> 	I apologize in advance if this type of request is not desired/ 
>> allowed
>> on this list.
>
> Nope, it's fine. You might also want to post to the twisted-web list.
>
>> 	I'm looking for a very short-term mentoring/consulting contract to
>> help me get an Ajax/Comet type of connection working between a web
>> interface and a fairly long-running, server-side process.
>>
>> 	I want the web interface to reflect the server-side data as it
>> becomes available.
>
> Have you seen http://orbited.org? Latest version uses Twisted, I  
> think.

Yes, thanks, I've seen it, but I don't want to figure it out myself.

I want to hire someone who already knows it to make it go.

I've got too many other things to do to stop and learn yet another tool.

S



From james at james.id.au  Thu Oct 15 20:02:12 2009
From: james at james.id.au (James Gregory)
Date: Thu, 15 Oct 2009 17:02:12 -0700
Subject: [Twisted-Python] Replacement for CherryPy
Message-ID: <4AD7B804.6060906@james.id.au>

Hi all,

I'm trying to replace a server that I've written with CherryPy to use 
Twisted. My reasons are that my particular app has the server waiting on 
sockets to third-party services a lot of the time, which is tying up all 
the worker-threads I have allocated for CherryPy => scalability nightmare.

In short, I want to be able to write a class more or less like so:

class C:
     def searchData(self, query, resultCount) :
         # produce a deferred that will eventually return the data to go 
back to the client, d.
         return d

And have it exposed such that fetching

     http://server/api/searchData?query=query+string&resultCount=10

will call that searchData method, passing in the URL's GET parameters as 
the arguments to that method. It'd be awesome if it also worked for 
POSTed data too.

I realise that I can probably build this myself using twisted.web etc, 
but am wondering if someone's already done the legwork here.

Any suggestions?

Thanks in advance.

James.



From mardiros at laposte.net  Fri Oct 16 04:01:11 2009
From: mardiros at laposte.net (mardiros)
Date: Fri, 16 Oct 2009 10:01:11 +0200 (CEST)
Subject: [Twisted-Python] maybeDeferred capability
Message-ID: <27098674.27638.1255680071067.JavaMail.www@wwinf8403>



As I am still a new user of Twisted,
I have decide to use the maybeDeferred capability.

The real aim is to cache sql queries,
but I have written this example from 
the twisted mayneDeferred doc.


I am happy with my code, but, I would like
to share it to have some feed back

Here it is:
---

import types
from datetime import datetime, timedelta

from twisted.internet import defer
from twisted.internet import reactor, task


class asyncmemoize:
def __init__(self, function,pool_time=10,cachelifetime=10):
self.function = function
self._cache = {}
self._cachelifetime = timedelta(0,cachelifetime)
self._cleaner = task.LoopingCall(self.cleanCache)
self._cleaner.start(pool_time,now=False)
self._cleanrun = False


def __call__(self, *args, **kwargs):
key = (tuple(args), frozenset(kwargs.items()))

if key not in self._cache:
f = self.function(*args, **kwargs).addCallback(self.callback,key)
self._cache[key]=[datetime.today(), f]

else:
print "from cache"
return self._cache[key][1]

def callback(self,result,key):
print "Put real value in cache"
self._cache[key]=[datetime.today(), self._cachelifetime, result]
return result

def cleanCache(self):
if not self._cleanrun:
self._cleanrun = True
print 'Clean the cache...'
#log.msg('Clean the persistent cache...', logLevel=logging.DEBUG)
expire = datetime.today()
i = 0
for k,v in self._cache.items():
print v[0], "<", expire, "=>", v[0] > expire 
if v[0] < expire:
i+=1
del self._cache[k]
print '%i items removed' % i
#log.msg('%i items removed' % i, logLevel=logging.DEBUG)
self._cleanrun = False


def saveInCache(result,key):
print "saving to cache"
cache[key] = result
return result

@asyncmemoize
def asynchronousIsValidUser(user):
print "Loading is authenticating from async"
d = defer.Deferred()
reactor.callLater(2, d.callback, user in ["Alice", "Angus", "Agnes"])
return d

def synchronousIsValidUser(user):
'''
Return true if user is a valid user, false otherwise
'''
return user in ["Alice", "Angus", "Agnes"]


def printResult(result,user):
if result:
print "User", user ,"is authenticated"
else:
print "User", user ,"is not authenticated"

def authenticateUser(isValidUser, user):
print "Authenticating user ", user
d = defer.maybeDeferred(isValidUser, user)
return d.addCallback(printResult,user)


authenticateUser(asynchronousIsValidUser,"Alice")

reactor.callLater(3,authenticateUser,asynchronousIsValidUser,"Alice")
reactor.callLater(5,authenticateUser,asynchronousIsValidUser,"Alice")

reactor.callLater(15,authenticateUser,asynchronousIsValidUser,"Alice")


reactor.callLater(30,authenticateUser,asynchronousIsValidUser,"Alice")

reactor.run()


---------------------------------------------------------------------------- 
Laposte.net f?te ses 10 ans ! 

Gratuite, garantie ? vie et d?j? utilis?e par des millions d'internautes... 
vous aussi, pour votre adresse e-mail, choisissez laposte.net. 

Laposte.net, bien + qu'une messagerie 
----------------------------------------------------------------------------



From rroberts at adobe.com  Sat Oct 17 00:15:03 2009
From: rroberts at adobe.com (Read Roberts)
Date: Fri, 16 Oct 2009 21:15:03 -0700
Subject: [Twisted-Python] Newbie question: can't get getProcessOutput to run
 from inside a listenTCP service call-back
Message-ID: <C6FE92D7.592A%rroberts@adobe.com>

I have a Python server using twisted which responds to pyAMF calls from
Flex/Air applications (following Bruce Eckels 5/1/2008 article "Concurrency
with Python, Twisted, and Flex"). The service is basically as follows below.
When the client calls a service API, the API needs to make a OS shell call.
I see that if I call reactor.stop() after the  getProcessOutput call (such
as within the doLog and doError functions), the call happens and I see the
output. How can can I retrieve the output without calling reactor.stop()? In
the example below, the AIR app calls the callback helloWorldTest(), and the
deferred.addCallback function is never called.

import os
from twisted.spread import pb
from  twisted.internet.utils import getProcessOutput
from twisted.internet import reactor

class FlexInterface(pb.Root):
    def __init__(self):
        self.result e

    def doLog(self, result):
        self.result = "%s" % (result)
        return result
        
    def doError(self, failure):
        self.result = "%s" % ( failure)
        return failure

    def helloWorldTest(self):
        deferred = getProcessOutput("echo", ["Hello World"], os.environ)
        deferred.addErrback(self.doError)
        deferred.addCallback(self.doLog)
        while (self.result == None)
            print "doLog still hasn't been called"
        return self.result

    def terminate(self, discardPostAag):
        reactor.callLater(1, reactor.stop)
        return "Terminating CubeGlyphServices"

def run():
    # Place the namespace mapping into a TwistedGateway:
    fi = FlexInterface()
    gateway = TwistedGateway({ "flexAppServer": fi })

    # Publish the PyAMF gateway at the root URL:
    root = resource.Resource()
    root.putChild("", gateway)

    # Tell the twisted reactor to listen:
    reactor.listenTCP(8050, server.Site(root))
    print "Local python server listening on localhost port 8050"
    reactor.run()


if __name__=='__main__':
    run()

I do know that If I used Python 2.6 and later, a twisted bug is fixed such
that I could use subprocess.Popen, and that the next release of AIR will
allow direct execv calls. However, for performance issues  I still want to
call one Python process running a server, and I have to work within a Python
2.5 environment.

Thanks for any advice,
 Read Roberts





From nick at boxdesign.co.uk  Sat Oct 17 04:53:12 2009
From: nick at boxdesign.co.uk (Nick Joyce)
Date: Sat, 17 Oct 2009 09:53:12 +0100
Subject: [Twisted-Python] Newbie question: can't get getProcessOutput to
	run from inside a listenTCP service call-back
In-Reply-To: <C6FE92D7.592A%rroberts@adobe.com>
References: <C6FE92D7.592A%rroberts@adobe.com>
Message-ID: <1EF4C760-66C8-49C4-89C2-1BD790C92374@boxdesign.co.uk>

On 17 Oct 2009, at 05:15, Read Roberts wrote:

> I have a Python server using twisted which responds to pyAMF calls  
> from
> Flex/Air applications (following Bruce Eckels 5/1/2008 article  
> "Concurrency
> with Python, Twisted, and Flex"). The service is basically as  
> follows below.
> When the client calls a service API, the API needs to make a OS  
> shell call.
> I see that if I call reactor.stop() after the  getProcessOutput call  
> (such
> as within the doLog and doError functions), the call happens and I  
> see the
> output. How can can I retrieve the output without calling  
> reactor.stop()? In
> the example below, the AIR app calls the callback helloWorldTest(),  
> and the
> deferred.addCallback function is never called.
>
> import os
> from twisted.spread import pb
> from  twisted.internet.utils import getProcessOutput
> from twisted.internet import reactor
>
> class FlexInterface(pb.Root):
>    def __init__(self):
>        self.result e
>
>    def doLog(self, result):
>        self.result = "%s" % (result)
>        return result
>
>    def doError(self, failure):
>        self.result = "%s" % ( failure)
>        return failure
>
>    def helloWorldTest(self):
>        deferred = getProcessOutput("echo", ["Hello World"],  
> os.environ)
>        deferred.addErrback(self.doError)
>        deferred.addCallback(self.doLog)
>        while (self.result == None)
>            print "doLog still hasn't been called"
>        return self.result


The while loop will block the event loop, preventing the deferred from  
ever being called. PyAMF will accept a deferred as a return value for  
the service function and will not return a response until the  
deferred's callback is fired.

So, you could re-write the method like:

     def helloWorldTest(self):
         deferred = getProcessOutput("echo", ["Hello World"],  
os.environ)

         deferred.addErrback(self.doError)
         deferred.addCallback(self.doLog)

         return deferred

If the deferred's callback is called then the return value of doLog  
will be used as the response value. If the errback is called, the  
return value of doError will be used as the response, in this case a  
Failure instance. PyAMF converts Failure instances to remoting/ 
messaging error objects automagically, so the faultHandler on the  
flash/air side will be called.

hth,

Nick



From rroberts at adobe.com  Sat Oct 17 13:03:23 2009
From: rroberts at adobe.com (Read Roberts)
Date: Sat, 17 Oct 2009 10:03:23 -0700
Subject: [Twisted-Python] Newbie question: can't get getProcessOutput to
 run from inside a listenTCP service call-back
In-Reply-To: <1EF4C760-66C8-49C4-89C2-1BD790C92374@boxdesign.co.uk>
Message-ID: <C6FF46EB.5935%rroberts@adobe.com>

Hi Nick;

Thanks for the answer. However, If I take the while loop out,  "helloWorldTest()" returns immediately, and the Flex app gets the initial value of self.result. The defer.callback function doLog never gets called.  If I call  the "terminate()" from the Flex app, which in turn calls reactor.sop()  the doLog  function finally then gets called.   I am looking for what I need to do to allow getProcessOutput to run such that the defer.callback function doLog actually gets called.

I have figured out that if instead of calling getProcessOutput() directly within the helloWorldTest() method, that I can queue it for running  after helloWorldTest() as returned, as in:
    reactor.callLater(1, self. helloWorldTest2)
 and that the defer.callback function doLog does then get called.

This means that the defer.callback function doLog will get  called after the helloWorldTest()  has returned. I see can call helloWorldTest() , and then keep querying the python service from the Flex app until the  defer.callback function doLog  has run.

I still don't understand why calling getProcessOutput() directly within the helloWorldTest() method doesn't work. Any explanation would be welcome.

    Thanks,  Read Roberts

On 10/17/09 1:53 AM, "Nick Joyce" <nick at boxdesign.co.uk> wrote:

On 17 Oct 2009, at 05:15, Read Roberts wrote:

> I have a Python server using twisted which responds to pyAMF calls
> from
> Flex/Air applications (following Bruce Eckels 5/1/2008 article
> "Concurrency
> with Python, Twisted, and Flex"). The service is basically as
> follows below.
> When the client calls a service API, the API needs to make a OS
> shell call.
> I see that if I call reactor.stop() after the  getProcessOutput call
> (such
> as within the doLog and doError functions), the call happens and I
> see the
> output. How can can I retrieve the output without calling
> reactor.stop()? In
> the example below, the AIR app calls the callback helloWorldTest(),
> and the
> deferred.addCallback function is never called.
>
> import os
> from twisted.spread import pb
> from  twisted.internet.utils import getProcessOutput
> from twisted.internet import reactor
>
> class FlexInterface(pb.Root):
>    def __init__(self):
>        self.result e
>
>    def doLog(self, result):
>        self.result = "%s" % (result)
>        return result
>
>    def doError(self, failure):
>        self.result = "%s" % ( failure)
>        return failure
>
>    def helloWorldTest(self):
>        deferred = getProcessOutput("echo", ["Hello World"],
> os.environ)
>        deferred.addErrback(self.doError)
>        deferred.addCallback(self.doLog)
>        while (self.result == None)
>            print "doLog still hasn't been called"
>        return self.result


The while loop will block the event loop, preventing the deferred from
ever being called. PyAMF will accept a deferred as a return value for
the service function and will not return a response until the
deferred's callback is fired.

So, you could re-write the method like:

     def helloWorldTest(self):
         deferred = getProcessOutput("echo", ["Hello World"],
os.environ)

         deferred.addErrback(self.doError)
         deferred.addCallback(self.doLog)

         return deferred

If the deferred's callback is called then the return value of doLog
will be used as the response value. If the errback is called, the
return value of doError will be used as the response, in this case a
Failure instance. PyAMF converts Failure instances to remoting/
messaging error objects automagically, so the faultHandler on the
flash/air side will be called.

hth,

Nick


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091017/d90d5d38/attachment.htm 

From exarkun at twistedmatrix.com  Sun Oct 18 00:05:19 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 18 Oct 2009 04:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1255838719.88.171687412@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091018/9f8a0bfd/attachment.htm 

From nathan.stocks at gmail.com  Sun Oct 18 22:29:09 2009
From: nathan.stocks at gmail.com (Nathan)
Date: Sun, 18 Oct 2009 20:29:09 -0600
Subject: [Twisted-Python] Conferences / training?
Message-ID: <96c9d6a80910181929v8ed7cc9i83268485736753e4@mail.gmail.com>

Does anyone do any "formal" Twisted training?

I've got several employees that are nearing the point where they need
to learn twisted (and I wouldn't mind getting some formal training
myself), and so I'm exploring the idea of either flying someone out to
our offices to train or having us all go out to some conference
(OSCON?) where some Twisted training goes on.  I'm not in a rush -- I
could wait up to a year if I had to, but I thought I ought to start
putting feelers out.

We're located in Utah, by the way.

~ Nathan


From konrads at smelkovs.com  Mon Oct 19 13:13:42 2009
From: konrads at smelkovs.com (Konrads Smelkovs)
Date: Mon, 19 Oct 2009 20:13:42 +0300
Subject: [Twisted-Python] Can I post a consultant request here?
In-Reply-To: <12303E0F-10BA-4D6A-A3B1-3589229D599F@integrateddevcorp.com>
References: <EF928A00-AFA0-4529-AFC0-DDF1F26B2CF4@integrateddevcorp.com>
	<1255611238.2243.85.camel@pintsize>
	<12303E0F-10BA-4D6A-A3B1-3589229D599F@integrateddevcorp.com>
Message-ID: <d79700b90910191013y25faa96bt68d78d10345194f2@mail.gmail.com>

hi,
i wrote a project that got cancelled that does almost what you need:
screen scraping controller with some scrapers. I wold gladly adapt
this for your needs. This system takes json data and searches on other
sites for information with scrapers. Scrapers can take a while to
return data. Once done;; user can poll to fetch data. System is at
http://rogue.smelkovs.com:8080/ with system docs at
http://rogue.smelkovs.com:8080/static/manual.doc
code shows how to use storm orm as well. This platform may be of value
to you to kick start your project.
i can do general twisted consultancy as well.
Let me know if I can help.

2009/10/15, Steve Steiner (listsin) <listsin at integrateddevcorp.com>:
>
> On Oct 15, 2009, at 8:53 AM, Itamar Turner-Trauring (aka Shtull-
> Trauring) wrote:
>
>> On Thu, 2009-10-15 at 00:01 -0400, Steve Steiner (listsin) wrote:
>>> Hey!
>>>
>>> 	I apologize in advance if this type of request is not desired/
>>> allowed
>>> on this list.
>>
>> Nope, it's fine. You might also want to post to the twisted-web list.
>>
>>> 	I'm looking for a very short-term mentoring/consulting contract to
>>> help me get an Ajax/Comet type of connection working between a web
>>> interface and a fairly long-running, server-side process.
>>>
>>> 	I want the web interface to reflect the server-side data as it
>>> becomes available.
>>
>> Have you seen http://orbited.org? Latest version uses Twisted, I
>> think.
>
> Yes, thanks, I've seen it, but I don't want to figure it out myself.
>
> I want to hire someone who already knows it to make it go.
>
> I've got too many other things to do to stop and learn yet another tool.
>
> S
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

-- 
Nos?t?ts no manas mobil?s ier?ces

--
Konrads Smelkovs
Applied IT sorcery.


From konrads at smelkovs.com  Mon Oct 19 13:25:40 2009
From: konrads at smelkovs.com (Konrads Smelkovs)
Date: Mon, 19 Oct 2009 20:25:40 +0300
Subject: [Twisted-Python] Twisted screen scraper manager software for sale
Message-ID: <d79700b90910191025q51311cddi948ab92375c28f98@mail.gmail.com>

 Hello and apologies for offtopic...
I wrote a piece of software for a cancelled project and am looking to sell it.
It is a screen scraper runner and manager web backend. It was built to
extract data from form driven web sites (specific scrapers written are
for swedish home insurance, but is very generic). User submits a json
request with some sort of sructured request, e.g. home size, desired
payout etc. System then runs appropriate scrapers and once complete,
user can poll for data (can be made to push with comet if one so
wishes). It features logging nicietied, database stored scrapers for
quicker code updates and some more bits.
You can check the software at http://rogue.smelkovs.com:8080 and
manual at http://rogue.smelkovs.com:8080/static/manual.doc
I would be happy to sell it (with some modifications if necessary) for 2400 usd.

kick-start your "get best price site" today!

-- 
Nos?t?ts no manas mobil?s ier?ces

--
Konrads Smelkovs
Applied IT sorcery.


From jesper at taxboel.dk  Tue Oct 20 15:50:33 2009
From: jesper at taxboel.dk (=?ISO-8859-1?Q?Jesper_Taxb=F8l?=)
Date: Tue, 20 Oct 2009 21:50:33 +0200
Subject: [Twisted-Python] Handeling unresolved DNS queries?
Message-ID: <e78558910910201250n270d329di7678454ad9d231b9@mail.gmail.com>

Hi Guys,

Im playing with a dns-cache script, that overrides DNS requests for certain
IP addresses.

I would like to add functionality, so unresolved requests are sent to a
spicific IP. How do I go about doing that?

Is there a negative answer in the (udp) DNS protocol or am I forced to use a
timeout.

Kind regards

Tax


import sys, os
from socket import *
from twisted.internet.protocol import Factory, Protocol
from twisted.internet import reactor
from twisted.names import dns, client, server
import time

LOGFILE = 'dnsfilter.log'

def allowip(ip):
    return True


class Log:
    """file like for writes with auto flush after each write
    to ensure that everything is logged, even during an
    unexpected exit."""
    def __init__(self, f):
        self.f = f
    def write(self, s):
        self.f.write(s)
        self.f.flush()

if __name__ == "__main__":
    dns_servers = []
    f = open('/etc/resolv.conf', "r")
    while 1:
        line = f.readline()
        if not line:
            break
        if line[0]!='#':
            s, ns = line.strip().split(' ')
            if s == 'nameserver':
                dns_servers.append((ns,53))
    #redirect outputs to a logfile
    sys.stdout = sys.stderr = Log(open(LOGFILE, 'a+'))

    print 'dnsfilter starting'
    print dns_servers

    #address that traffic is redirected to
    redirect = '10.0.64.1'

    greenlist=  ['63.4.241.16', \
                 '216.13.188.67']


    class DNSDatagramProtocolTest(dns.DNSDatagramProtocol):
        def writeMessage(self, message, address):
            log = '%s DNS request from: %s\n' % (time.strftime("%m/%d/%y -
%H:%M:%S", time.localtime()) ,address[0])
            for i in range(len(message.answers)):
                x = message.answers[i]
                print x.type
                if x.type==1 and x.payload:
                    if not allowip(address[0]):
                        to_adr = inet_ntoa(x.payload.address)
                        if to_adr in greenlist:
                            log += ' allowed to %s\n'%(to_adr)
                        else:
                            log += ' not allowed so %s becomes
%s\n'%(to_adr, redirect)
                            x.payload.address = inet_aton(redirect)
                    else:
                        log += ' to %s\n'%(inet_ntoa(x.payload.address))
            print log
            self.transport.write(message.toStr(), address)

    resolver = client.Resolver(servers=dns_servers)
    f = server.DNSServerFactory(clients=[resolver])
    p = DNSDatagramProtocolTest(f)
    reactor.listenUDP(53, p)
    reactor.run()
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091020/9e55ace4/attachment.htm 

From general at vultaire.net  Wed Oct 21 01:59:45 2009
From: general at vultaire.net (general at vultaire.net)
Date: Tue, 20 Oct 2009 22:59:45 -0700
Subject: [Twisted-Python] Help with porting .tac-based custom logging to
	twisted plugin architecture
Message-ID: <20091020225945.7f11f3b431f165ce659dcf13aa5d7085.ad86cc7257.wbe@email.secureserver.net>

I have an app I'm working on, and until this point it's been done
utilizing a .tac file.  Recent changes in requirements are encouraging a
change to use the Twisted plugin system instead.  This seems clear for
the most part, but I'm unsure about the logging.

Specifically, in the .tac version, I'm using this:

    lf = logfile.DailyLogFile("my.log", ".")
    logname = "testlog"
    configure_python_logging(lf, logname)
    application.setComponent(log.ILogObserver,
                             log.PythonLoggingObserver(logname).emit)

However, in the plugin version, I'm not sure how to proceed since I
don't have an application object.  I can't seem to find any
documentation for configuring logging with plugins, either.  Is there a
way to make this work?

Just in case, I've pasted a complete working example of the .tac code
below, along with the partially complete plugin module.

- Paul Goins

####################################

###########################
# log_example/logtest.tac #
###########################
# -*- coding: utf-8 -*-

from twisted.application import service
from twisted.internet import reactor
from twisted.web import server as webserver

from logtest import log

application = service.Application("myapp")
log.init_logger_8dot2(application)

service = log.MyService()
service.setServiceParent(application)

###################################
# log_example/logtest/__init__.py #
###################################

##############################
# log_example/logtest/log.py #
##############################

# -*- coding: utf-8 -*-

from twisted.application.service import Service
from twisted.internet import reactor
from twisted.python import log, logfile
import logging

def init_logger_8dot2(application):
    lf = logfile.DailyLogFile("my.log", ".")
    logname = "testlog"
    configure_python_logging(lf, logname)
    application.setComponent(log.ILogObserver,
                             log.PythonLoggingObserver(logname).emit)

def configure_python_logging(file_obj, log_name):
    logging.basicConfig(stream=file_obj,
                        format="[%(asctime)s] %(levelname)s:
%(message)s",
                        datefmt="%Y-%m-%d %H:%M:%S")
    logger = logging.getLogger(log_name)
    logger.setLevel(logging.INFO)


class MyService(Service):

    def startService(self):
        reactor.callLater(2, reactor.stop)

#############################################
# log_example/twisted/plugins/log_plugin.py #
#############################################

# -*- coding: utf-8 -*-

from zope.interface import implements
from twisted.python import usage
from twisted.plugin import IPlugin
from twisted.application.service import IServiceMaker

from logtest.log import MyService

class Options(usage.Options):
    optParamaters = [[]]

class MyServiceMaker(object):
    implements(IServiceMaker, IPlugin)
    tapname = "logtest"
    description = "Twisted plugin log tester"
    options = Options

    def makeService(self, options):
        # set up servers and stuff here
        return MyService()

serviceMaker = MyServiceMaker()




From general at vultaire.net  Wed Oct 21 02:12:05 2009
From: general at vultaire.net (general at vultaire.net)
Date: Tue, 20 Oct 2009 23:12:05 -0700
Subject: [Twisted-Python] Help with porting .tac-based custom logging to
 twisted plugin architecture
Message-ID: <20091020231205.7f11f3b431f165ce659dcf13aa5d7085.58e6e0c5b1.wbe@email.secureserver.net>

Apologies on the killed indentation in the source.  Didn't know my web
mail client did that.  Will post via a normal client next time.  - Paul




From glyph at twistedmatrix.com  Wed Oct 21 04:12:59 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 21 Oct 2009 04:12:59 -0400
Subject: [Twisted-Python] Conferences / training?
In-Reply-To: <96c9d6a80910181929v8ed7cc9i83268485736753e4@mail.gmail.com>
References: <96c9d6a80910181929v8ed7cc9i83268485736753e4@mail.gmail.com>
Message-ID: <C76E5692-88A0-417D-A657-8DE2ABAC96A3@twistedmatrix.com>

On Oct 18, 2009, at 10:29 PM, Nathan wrote:

> Does anyone do any "formal" Twisted training?

Steve Holden does excellent Python training and you might be able to  
get him to prepare some Twisted materials, especially with your  
lengthy time-horizon.  His "Teach Me Twisted" session at PyCon a few  
years ago was... epic ;).

More information here: http://holdenweb.com/

Good luck!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091021/28f815e1/attachment.htm 

From fernandor at sescam.jccm.es  Wed Oct 21 05:45:55 2009
From: fernandor at sescam.jccm.es (Fernando Ruza Rodriguez)
Date: Wed, 21 Oct 2009 11:45:55 +0200
Subject: [Twisted-Python] CalendarServer
In-Reply-To: <4AD4D4DE.9000501@laposte.net>
References: <1255431505.1206.10.camel@hpcinf18.hguv.local>
	<4AD4D4DE.9000501@laposte.net>
Message-ID: <1256118355.9415.14.camel@hpcinf18.hguv.local>

Thank you very much, it was that. I almost get crazy.

Regards,

Fernando.


El mar, 13-10-2009 a las 21:28 +0200, mardiros escribi?:
> Fernando Ruza Rodriguez a ?crit :
> > ~$ svn co svn://svn.twistedmatrix.com/svn/Twisted/trunk Twisted
> > svn: Cannot be possible to connect to 'svn.twistedmatrix.com': time
> >
> > Thanks.
> >
> > Fernando.
> >
> >   
> I have the same problem at my office,
> svn port is closed by the firewall ( Port 3690 )
> 
> http://svnbook.red-bean.com/en/1.0/ch06s03.html
> 
> mardiros
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From lvh at laurensvh.be  Wed Oct 21 06:40:53 2009
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Wed, 21 Oct 2009 12:40:53 +0200
Subject: [Twisted-Python] Conferences / training?
In-Reply-To: <C76E5692-88A0-417D-A657-8DE2ABAC96A3@twistedmatrix.com>
References: <96c9d6a80910181929v8ed7cc9i83268485736753e4@mail.gmail.com>
	<C76E5692-88A0-417D-A657-8DE2ABAC96A3@twistedmatrix.com>
Message-ID: <cedc0c090910210340p6a999bc1t144fbbafd648f9dd@mail.gmail.com>

On a related note, I know that a bunch of people in my university are
interested in informal Python and perhaps Twisted introductions, and a
few people in charge have told me that it wouldn't really be a problem
to get some infrastructure assigned for the occasion (yes, the hoops
they're willing to jump through to get undergrads to do stuff is
amazing).

Since the most commonly heard complaint about Twisted is that the
initial barrier is too high and the introductory documentation is
insufficient (as much as I don't agree with that, if other people feel
that's the case, it's probably our job to prove them wro^H^H^H^H^Hfix
it), it would probably be a good idea for that sort of material to be
publicly available.

If no free materials (I'm thinking mostly about presentations, there's
plenty of plain old documents already around in the form of Twisted's
own docs and blog posts) exist and I have to make them myself, are
there any preferences in terms of format and location?

Normally I'd probably end up using a TeX-based slide producing thing
and a launchpad/github/whatever repo, but I'm just as happy to use
Google Docs -- that might make it easier to collaborate. I've got
Google Wave access, but somehow I don't think that'll be a viable
platform just yet due to huge lack of people having access.

Maybe I ought to talk to Steve Holden about it -- but since he makes
money giving those presentation, I can understand that he wouldn't be
very interested in spending a lot of time producing free material ;-)


thanks for listening
Laurens


On Wed, Oct 21, 2009 at 10:12 AM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> On Oct 18, 2009, at 10:29 PM, Nathan wrote:
>
> Does anyone do any "formal" Twisted training?
>
> Steve Holden does excellent Python training and you might be able to get him
> to prepare some Twisted materials, especially with your lengthy
> time-horizon. ?His "Teach Me Twisted" session at PyCon a few years ago
> was... epic ;).
> More information here:?http://holdenweb.com/
> Good luck!
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From florent.chuffart at gmail.com  Wed Oct 21 08:56:34 2009
From: florent.chuffart at gmail.com (Florent Chuffart)
Date: Wed, 21 Oct 2009 14:56:34 +0200
Subject: [Twisted-Python] NAT / firewall facilities
Message-ID: <FCF5D28B-DA9D-4C97-9BB3-F8AABBE22DE0@gmail.com>

Hi people,

I'm evaluating twisted framework according to my needs and I want to  
know if twisted provide some NAT / firewall facilities allowing  
automatic routed communication or reverse connection establishment ?

Regards,

--
Florent Chuffart
florent.chuffart at gmail.com






From glyph at twistedmatrix.com  Wed Oct 21 12:19:52 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 21 Oct 2009 12:19:52 -0400
Subject: [Twisted-Python] NAT / firewall facilities
In-Reply-To: <FCF5D28B-DA9D-4C97-9BB3-F8AABBE22DE0@gmail.com>
References: <FCF5D28B-DA9D-4C97-9BB3-F8AABBE22DE0@gmail.com>
Message-ID: <CABE4A17-2021-47E1-B32F-63BAE2C72F34@twistedmatrix.com>

On Oct 21, 2009, at 8:56 AM, Florent Chuffart wrote:

> I'm evaluating twisted framework according to my needs and I want to
> know if twisted provide some NAT / firewall facilities allowing
> automatic routed communication or reverse connection establishment ?

Not directly, but you can find a library which does that for Twisted  
at http://divmod.org/trac/wiki/DivmodVertex



From glyph at twistedmatrix.com  Wed Oct 21 12:22:59 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 21 Oct 2009 12:22:59 -0400
Subject: [Twisted-Python] Conferences / training?
In-Reply-To: <cedc0c090910210340p6a999bc1t144fbbafd648f9dd@mail.gmail.com>
References: <96c9d6a80910181929v8ed7cc9i83268485736753e4@mail.gmail.com>
	<C76E5692-88A0-417D-A657-8DE2ABAC96A3@twistedmatrix.com>
	<cedc0c090910210340p6a999bc1t144fbbafd648f9dd@mail.gmail.com>
Message-ID: <A1D2A83D-DD34-4C3D-A480-84CA9F060164@twistedmatrix.com>


On Oct 21, 2009, at 6:40 AM, Laurens Van Houtven wrote:

> Maybe I ought to talk to Steve Holden about it -- but since he makes
> money giving those presentation, I can understand that he wouldn't be
> very interested in spending a lot of time producing free material ;-)

Steve is also a big supporter of open source, and has done lots of  
work for free for PyCon, so it's worth talking to him anyway.  More  
worth it if you could actually pay him to do it, of course ;-).



From sorin7486 at gmail.com  Wed Oct 21 13:00:37 2009
From: sorin7486 at gmail.com (Sorin Silaghi)
Date: Wed, 21 Oct 2009 20:00:37 +0300
Subject: [Twisted-Python] porting to 3.0
Message-ID: <751facc70910211000g50a681ay94f08632049dcce6@mail.gmail.com>

Hello,


       I found some older mails in the archive about porting and I was
wondering if there have been any changes since then. Is anybody
actively working on it ? Do the recomandations you guys made back then
still stand ?

Here is the original mail that I mentioned:
http://twistedmatrix.com/pipermail/twisted-python/2009-January/019096.html


Thank you,
                    Sorin.


From natester at gmail.com  Wed Oct 21 14:23:30 2009
From: natester at gmail.com (Nathaniel Haggard)
Date: Wed, 21 Oct 2009 12:23:30 -0600
Subject: [Twisted-Python] testing a unit that spawnsProcess
Message-ID: <4adac7a30910211123w2f25e5a5n2690345b88b1f420@mail.gmail.com>

What is a good way to unit test this amp responder which will call a
process?  Other things it does are covered with other tests thanks
to the tests I copied from lp:game.  That should be a pretty awesome
game or at least it will work.

Should the test actually spawn a process or only pretend to?
test_process already tests spawnProcess after all.


   def test_StartProcess(self):
       """
       When L{StartProcess} is issued client starts a process and
returns a status code
       """
       responder = self.controller.lookupFunction(StartProcess.commandName)
       d = responder({
               'identifier': self.identifier,
               'cmd':'/bin/ls',
               'args':''
               })

       def gotStartProcess(a):
           # assert something about the process
                                                       <---- what goes here?
       d.addCallback(gotStartProcess)
       return d


From vitaly at synapticvision.com  Wed Oct 21 16:12:22 2009
From: vitaly at synapticvision.com (vitaly at synapticvision.com)
Date: Wed, 21 Oct 2009 16:12:22 -0400
Subject: [Twisted-Python] How to chain deferred calls
Message-ID: <20091021161222.11812v7szd1uhfok@216.129.205.5>

hi,
how can I chain in defer methods that could raise exception while  
showing the exception that coming from method? I mean, if I'll do:
return (
   adc1().abc2().abc3().addErrback("Common2AllException")
)
than "Common2AllException" will be raised if abc1() raise Exception,  
but I'd like to see the adc1() own exception (and not  
"Common2AllException") ?



t = Test()
def abc1(self):
   if t.test() is None:
     raise Exception("Error11")
   else:
     return 1

def abc2(self):
   if t.test() is None:
     raise Exception("Error12")
   else:
     return 1

def abc3(self):
   if t.test() is None:
     raise Exception("Error13")
   else:
     return 1




Appreciate the help.



From vpogrebi at verizon.net  Wed Oct 21 16:53:31 2009
From: vpogrebi at verizon.net (Valeriy Pogrebitskiy)
Date: Wed, 21 Oct 2009 16:53:31 -0400
Subject: [Twisted-Python] How to chain deferred calls
In-Reply-To: <20091021161222.11812v7szd1uhfok@216.129.205.5>
References: <20091021161222.11812v7szd1uhfok@216.129.205.5>
Message-ID: <10DDB81F-BCF2-48FA-AD9D-C9C4E8CF1C60@verizon.net>

Add another .addErrback() directly after adc1() - to handle that  
specific exception...


Kind regards,

Valeriy Pogrebitskiy
vpogrebi at verizon.net




On Oct 21, 2009, at 4:12 PM, vitaly at synapticvision.com wrote:

> hi,
> how can I chain in defer methods that could raise exception while
> showing the exception that coming from method? I mean, if I'll do:
> return (
>   adc1().abc2().abc3().addErrback("Common2AllException")
> )
> than "Common2AllException" will be raised if abc1() raise Exception,
> but I'd like to see the adc1() own exception (and not
> "Common2AllException") ?
>
>
>
> t = Test()
> def abc1(self):
>   if t.test() is None:
>     raise Exception("Error11")
>   else:
>     return 1
>
> def abc2(self):
>   if t.test() is None:
>     raise Exception("Error12")
>   else:
>     return 1
>
> def abc3(self):
>   if t.test() is None:
>     raise Exception("Error13")
>   else:
>     return 1
>
>
>
>
> Appreciate the help.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From deldotdr at gmail.com  Wed Oct 21 18:14:26 2009
From: deldotdr at gmail.com (Dorian Raymer)
Date: Wed, 21 Oct 2009 15:14:26 -0700
Subject: [Twisted-Python] txRedis - Redis Client for Twisted
Message-ID: <ea3c455d0910211514recce66n17cebc1fb30112f9@mail.gmail.com>

Hello,
I have created a Twisted version of redis.py.
I needed an asynchronous version of the python client for use in Twisted
based projects, and I have not seen any other efforts on this front. Please
let me know if I completely overlooked an existing Twisted+Redis Client
project.

I have translated all of the doc tests in redis.py to Trial unit tests, and
they are all passing.

Version 0.1.1 is available on pypi<http://pypi.python.org/pypi/txredis/0.1.1>,
and here is the source code
<http://ooici.net:82/?p=txredis.git;a=summary>git repository.

To the Twisted gurus, feedback on the implementation is very welcome. I
would like to make this is a solid client library.

Thank you,
Dorian Raymer
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091021/a52d1a67/attachment.htm 

From terry at jon.es  Wed Oct 21 18:32:36 2009
From: terry at jon.es (Terry Jones)
Date: Thu, 22 Oct 2009 00:32:36 +0200
Subject: [Twisted-Python] txRedis - Redis Client for Twisted
In-Reply-To: Your message at 15:14:26 on Wednesday, 21 October 2009
References: <ea3c455d0910211514recce66n17cebc1fb30112f9@mail.gmail.com>
Message-ID: <19167.35844.444785.191303@jon.es>

Hi Dorian

> I have created a Twisted version of redis.py.

Cool!  I'll certainly take a look. Thanks for releasing it.

BTW, it would be good to get this into https://launchpad.net/tx, presumably
by mirroring to Launchpad.

Terry


From exarkun at twistedmatrix.com  Thu Oct 22 09:55:16 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 22 Oct 2009 13:55:16 -0000
Subject: [Twisted-Python] Handeling unresolved DNS queries?
In-Reply-To: <e78558910910201250n270d329di7678454ad9d231b9@mail.gmail.com>
References: <e78558910910201250n270d329di7678454ad9d231b9@mail.gmail.com>
Message-ID: <20091022135516.11571.1780136361.divmod.xquotient.1414@localhost.localdomain>

On 20 Oct, 07:50 pm, jesper at taxboel.dk wrote:
>Hi Guys,
>
>Im playing with a dns-cache script, that overrides DNS requests for 
>certain
>IP addresses.
>
>I would like to add functionality, so unresolved requests are sent to a
>spicific IP. How do I go about doing that?
>
>Is there a negative answer in the (udp) DNS protocol or am I forced to 
>use a
>timeout.

You've overridden writeMessage to inspect messages for answers and 
rewrite them if necessary.  You can recognize error responses by looking 
at the rCode attribute of the message object itself.  This will take on 
a value like dns.OK, dns.EFORMAT, dns.ESERVER, dns.ENAME, dns.ENOTIMP, 
or dns.EREFUSED.  You can handle these errors by making a request of 
another domain, although since writeMessage is a very low-level API in 
the process and not really intended to be overridden, I'm not sure how 
you'll insert the responses you get from these new requests into the 
original request/response process.

Jean-Paul


From exarkun at twistedmatrix.com  Thu Oct 22 09:59:23 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 22 Oct 2009 13:59:23 -0000
Subject: [Twisted-Python] Help with porting .tac-based custom logging
	to	twisted plugin architecture
In-Reply-To: <20091020225945.7f11f3b431f165ce659dcf13aa5d7085.ad86cc7257.wbe@email.secureserver.net>
References: <20091020225945.7f11f3b431f165ce659dcf13aa5d7085.ad86cc7257.wbe@email.secureserver.net>
Message-ID: <20091022135923.11571.191291189.divmod.xquotient.1421@localhost.localdomain>

On 21 Oct, 05:59 am, general at vultaire.net wrote:
>I have an app I'm working on, and until this point it's been done
>utilizing a .tac file.  Recent changes in requirements are encouraging 
>a
>change to use the Twisted plugin system instead.  This seems clear for
>the most part, but I'm unsure about the logging.
>
>Specifically, in the .tac version, I'm using this:
>
>    lf = logfile.DailyLogFile("my.log", ".")
>    logname = "testlog"
>    configure_python_logging(lf, logname)
>    application.setComponent(log.ILogObserver,
>                             log.PythonLoggingObserver(logname).emit)
>
>However, in the plugin version, I'm not sure how to proceed since I
>don't have an application object.  I can't seem to find any
>documentation for configuring logging with plugins, either.  Is there a
>way to make this work?

This is a limitation of the implementation of twistd's plugin support. 
tac files can define custom log observers.  Plugins for twistd cannot. 
Ticket #638 was originally for all of the custom logging feature, but it 
was eventually split up and the tac parts moved to a separate ticket, 
#3534, which is now resolved.  #638 is still open, however.  #3538 is 
another related ticket which proposes an alternate solution to the 
problem, allowing tacs and plugins to be used in combination.

Jean-Paul


From exarkun at twistedmatrix.com  Thu Oct 22 10:07:59 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 22 Oct 2009 14:07:59 -0000
Subject: [Twisted-Python] porting to 3.0
In-Reply-To: <751facc70910211000g50a681ay94f08632049dcce6@mail.gmail.com>
References: <751facc70910211000g50a681ay94f08632049dcce6@mail.gmail.com>
Message-ID: <20091022140759.11571.1776752212.divmod.xquotient.1423@localhost.localdomain>

On 21 Oct, 05:00 pm, sorin7486 at gmail.com wrote:
>Hello,
>
>
>       I found some older mails in the archive about porting and I was
>wondering if there have been any changes since then. Is anybody
>actively working on it ? Do the recomandations you guys made back then
>still stand ?
>
>Here is the original mail that I mentioned:
>http://twistedmatrix.com/pipermail/twisted- 
>python/2009-January/019096.html

Those recommendations still stand.  At the moment, there happens to be a 
related ticket up for review, 
<http://twistedmatrix.com/trac/ticket/4053>.

Jean-Paul


From sorin7486 at gmail.com  Thu Oct 22 10:38:46 2009
From: sorin7486 at gmail.com (Sorin Silaghi)
Date: Thu, 22 Oct 2009 17:38:46 +0300
Subject: [Twisted-Python] porting to 3.0
In-Reply-To: <20091022140759.11571.1776752212.divmod.xquotient.1423@localhost.localdomain>
References: <751facc70910211000g50a681ay94f08632049dcce6@mail.gmail.com>
	<20091022140759.11571.1776752212.divmod.xquotient.1423@localhost.localdomain>
Message-ID: <751facc70910220738h5d4bce2bm35cf819f7f118d61@mail.gmail.com>

so basically just pick up the warnings list, start fixing them and
submit the patches right ? ... shiny. I can give that a try.


Sorin.


On Thu, Oct 22, 2009 at 5:07 PM,  <exarkun at twistedmatrix.com> wrote:
> On 21 Oct, 05:00 pm, sorin7486 at gmail.com wrote:
>>Hello,
>>
>>
>> ? ? ? I found some older mails in the archive about porting and I was
>>wondering if there have been any changes since then. Is anybody
>>actively working on it ? Do the recomandations you guys made back then
>>still stand ?
>>
>>Here is the original mail that I mentioned:
>>http://twistedmatrix.com/pipermail/twisted-
>>python/2009-January/019096.html
>
> Those recommendations still stand. ?At the moment, there happens to be a
> related ticket up for review,
> <http://twistedmatrix.com/trac/ticket/4053>.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From jesper at taxboel.dk  Thu Oct 22 10:46:31 2009
From: jesper at taxboel.dk (=?ISO-8859-1?Q?Jesper_Taxb=F8l?=)
Date: Thu, 22 Oct 2009 16:46:31 +0200
Subject: [Twisted-Python] Handeling unresolved DNS queries?
In-Reply-To: <20091022135516.11571.1780136361.divmod.xquotient.1414@localhost.localdomain>
References: <e78558910910201250n270d329di7678454ad9d231b9@mail.gmail.com>
	<20091022135516.11571.1780136361.divmod.xquotient.1414@localhost.localdomain>
Message-ID: <e78558910910220746hb112a81r292185addfd82dc2@mail.gmail.com>

Hi Jean-Paul,

Thanx for your nice reply. My problem seems to be that I dont get any calls
to writemessage when the domain is a bogus one?

/tax



2009/10/22 <exarkun at twistedmatrix.com>

> On 20 Oct, 07:50 pm, jesper at taxboel.dk wrote:
> >Hi Guys,
> >
> >Im playing with a dns-cache script, that overrides DNS requests for
> >certain
> >IP addresses.
> >
> >I would like to add functionality, so unresolved requests are sent to a
> >spicific IP. How do I go about doing that?
> >
> >Is there a negative answer in the (udp) DNS protocol or am I forced to
> >use a
> >timeout.
>
> You've overridden writeMessage to inspect messages for answers and
> rewrite them if necessary.  You can recognize error responses by looking
> at the rCode attribute of the message object itself.  This will take on
> a value like dns.OK, dns.EFORMAT, dns.ESERVER, dns.ENAME, dns.ENOTIMP,
> or dns.EREFUSED.  You can handle these errors by making a request of
> another domain, although since writeMessage is a very low-level API in
> the process and not really intended to be overridden, I'm not sure how
> you'll insert the responses you get from these new requests into the
> original request/response process.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091022/37167546/attachment.htm 

From exarkun at twistedmatrix.com  Thu Oct 22 13:31:50 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 22 Oct 2009 17:31:50 -0000
Subject: [Twisted-Python] Handeling unresolved DNS queries?
In-Reply-To: <e78558910910220746hb112a81r292185addfd82dc2@mail.gmail.com>
References: <e78558910910201250n270d329di7678454ad9d231b9@mail.gmail.com>
	<20091022135516.11571.1780136361.divmod.xquotient.1414@localhost.localdomain>
	<e78558910910220746hb112a81r292185addfd82dc2@mail.gmail.com>
Message-ID: <20091022173150.11571.1534618114.divmod.xquotient.1432@localhost.localdomain>

On 02:46 pm, jesper at taxboel.dk wrote:
>Hi Jean-Paul,
>
>Thanx for your nice reply. My problem seems to be that I dont get any 
>calls
>to writemessage when the domain is a bogus one?

It's not immediately obvious why this would be.  writeMessage is called 
to write responses back to your clients.  If the requests your server 
issues get answers, then writeMessage will be called with those answers. 
If it's not being called, perhaps the problem is that your server's 
requests are being answered by the servers it is asking.

Jean-Paul


From vitaly at synapticvision.com  Thu Oct 22 14:01:57 2009
From: vitaly at synapticvision.com (vitaly at synapticvision.com)
Date: Thu, 22 Oct 2009 14:01:57 -0400
Subject: [Twisted-Python] How to chain deferred calls
In-Reply-To: <10DDB81F-BCF2-48FA-AD9D-C9C4E8CF1C60@verizon.net>
References: <20091021161222.11812v7szd1uhfok@216.129.205.5>
	<10DDB81F-BCF2-48FA-AD9D-C9C4E8CF1C60@verizon.net>
Message-ID: <20091022140157.19972pda1t8zlb0g@216.129.205.5>


Thank you for response.

the issue is if adc1() will raise up an exception, than following it  
.addErrback() will never be called cause adc1() will exit or raise  
Exception.

Quoting "Valeriy Pogrebitskiy" <vpogrebi at verizon.net>:

> Add another .addErrback() directly after adc1() - to handle that
> specific exception...
>
>
> Kind regards,
>
> Valeriy Pogrebitskiy
> vpogrebi at verizon.net
>
>
>
>
> On Oct 21, 2009, at 4:12 PM, vitaly at synapticvision.com wrote:
>
>> hi,
>> how can I chain in defer methods that could raise exception while
>> showing the exception that coming from method? I mean, if I'll do:
>> return (
>>   adc1().abc2().abc3().addErrback("Common2AllException")
>> )
>> than "Common2AllException" will be raised if abc1() raise Exception,
>> but I'd like to see the adc1() own exception (and not
>> "Common2AllException") ?
>>
>>
>>
>> t = Test()
>> def abc1(self):
>>   if t.test() is None:
>>     raise Exception("Error11")
>>   else:
>>     return 1
>>
>> def abc2(self):
>>   if t.test() is None:
>>     raise Exception("Error12")
>>   else:
>>     return 1
>>
>> def abc3(self):
>>   if t.test() is None:
>>     raise Exception("Error13")
>>   else:
>>     return 1
>>
>>
>>
>>
>> Appreciate the help.
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From glyph at twistedmatrix.com  Thu Oct 22 14:37:21 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 22 Oct 2009 14:37:21 -0400
Subject: [Twisted-Python] porting to 3.0
In-Reply-To: <751facc70910220738h5d4bce2bm35cf819f7f118d61@mail.gmail.com>
References: <751facc70910211000g50a681ay94f08632049dcce6@mail.gmail.com>
	<20091022140759.11571.1776752212.divmod.xquotient.1423@localhost.localdomain>
	<751facc70910220738h5d4bce2bm35cf819f7f118d61@mail.gmail.com>
Message-ID: <d9047f780910221137u6308abc9l9cd466c3115c5835@mail.gmail.com>

On Thu, Oct 22, 2009 at 10:38 AM, Sorin Silaghi <sorin7486 at gmail.com> wrote:

> so basically just pick up the warnings list, start fixing them and
> submit the patches right ? ... shiny. I can give that a try.


Thanks!  I look forward to seeing your patches :-D.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091022/ab7032cc/attachment.htm 

From jesper at taxboel.dk  Thu Oct 22 15:00:35 2009
From: jesper at taxboel.dk (=?ISO-8859-1?Q?Jesper_Taxb=F8l?=)
Date: Thu, 22 Oct 2009 21:00:35 +0200
Subject: [Twisted-Python] Handeling unresolved DNS queries?
In-Reply-To: <20091022173150.11571.1534618114.divmod.xquotient.1432@localhost.localdomain>
References: <e78558910910201250n270d329di7678454ad9d231b9@mail.gmail.com>
	<20091022135516.11571.1780136361.divmod.xquotient.1414@localhost.localdomain>
	<e78558910910220746hb112a81r292185addfd82dc2@mail.gmail.com>
	<20091022173150.11571.1534618114.divmod.xquotient.1432@localhost.localdomain>
Message-ID: <e78558910910221200vc1b0229g5fae565c9c4e5fcd@mail.gmail.com>

Hi Jean-Paul,

I guess my focus is right when it comes to redirecting clients.

Im hooking into

DNSDatagramProtocol.writeMessage(self, message, address):

And I guess thats OK?

But when it comes to bogus domains, I guess i could use:

DNSServerFactory.gotResolverError(self, failure, protocol, message,
address):

My problem is now how I construct a redirect package and channel it back to
the client.

Do you think that is a sensible approach? -and do you hava a pointer on how
to find the associated client.

kind regards

/tax

2009/10/22 <exarkun at twistedmatrix.com>

> On 02:46 pm, jesper at taxboel.dk wrote:
> >Hi Jean-Paul,
> >
> >Thanx for your nice reply. My problem seems to be that I dont get any
> >calls
> >to writemessage when the domain is a bogus one?
>
> It's not immediately obvious why this would be.  writeMessage is called
> to write responses back to your clients.  If the requests your server
> issues get answers, then writeMessage will be called with those answers.
> If it's not being called, perhaps the problem is that your server's
> requests are being answered by the servers it is asking.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091022/98c64a21/attachment.htm 

From exarkun at twistedmatrix.com  Thu Oct 22 16:38:06 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 22 Oct 2009 20:38:06 -0000
Subject: [Twisted-Python] Handeling unresolved DNS queries?
In-Reply-To: <e78558910910221200vc1b0229g5fae565c9c4e5fcd@mail.gmail.com>
References: <e78558910910201250n270d329di7678454ad9d231b9@mail.gmail.com>
	<20091022135516.11571.1780136361.divmod.xquotient.1414@localhost.localdomain>
	<e78558910910220746hb112a81r292185addfd82dc2@mail.gmail.com>
	<20091022173150.11571.1534618114.divmod.xquotient.1432@localhost.localdomain>
	<e78558910910221200vc1b0229g5fae565c9c4e5fcd@mail.gmail.com>
Message-ID: <20091022203806.11571.909308342.divmod.xquotient.1441@localhost.localdomain>

On 07:00 pm, jesper at taxboel.dk wrote:
>Hi Jean-Paul,
>
>I guess my focus is right when it comes to redirecting clients.
>
>Im hooking into
>
>DNSDatagramProtocol.writeMessage(self, message, address):
>
>And I guess thats OK?

Depends what "OK" is supposed to mean.
>
>But when it comes to bogus domains, I guess i could use:
>
>DNSServerFactory.gotResolverError(self, failure, protocol, message,
>address):

I don't know why you should have to do that.
>My problem is now how I construct a redirect package and channel it 
>back to
>the client.
>
>Do you think that is a sensible approach? -and do you hava a pointer on 
>how
>to find the associated client.

It would probably be a lot easier and more robust to implement a 
completely new custom resolver that *wraps* an existing resolver, rather 
than trying to extend an existing resolver via a subclass.  This removes 
many irrelevant implementation details from consideration (such as 
writeMessage and gotResolverError) and gives you an obvious place to put 
your redirect logic - in an errback on the Deferred returned by one of 
the wrapped resolver's lookup/query methods.

Jean-Paul


From jesper at taxboel.dk  Thu Oct 22 16:55:05 2009
From: jesper at taxboel.dk (=?ISO-8859-1?Q?Jesper_Taxb=F8l?=)
Date: Thu, 22 Oct 2009 22:55:05 +0200
Subject: [Twisted-Python] Handeling unresolved DNS queries?
In-Reply-To: <20091022203806.11571.909308342.divmod.xquotient.1441@localhost.localdomain>
References: <e78558910910201250n270d329di7678454ad9d231b9@mail.gmail.com>
	<20091022135516.11571.1780136361.divmod.xquotient.1414@localhost.localdomain>
	<e78558910910220746hb112a81r292185addfd82dc2@mail.gmail.com>
	<20091022173150.11571.1534618114.divmod.xquotient.1432@localhost.localdomain>
	<e78558910910221200vc1b0229g5fae565c9c4e5fcd@mail.gmail.com>
	<20091022203806.11571.909308342.divmod.xquotient.1441@localhost.localdomain>
Message-ID: <e78558910910221355h7f0f3233h4545302fef1adc7f@mail.gmail.com>

I'm still new to the whole twisted way of doing things, but it sounds very
sensible. :)

Could you suggest a class to start studying from ?

/tax

2009/10/22 <exarkun at twistedmatrix.com>

> On 07:00 pm, jesper at taxboel.dk wrote:
> >Hi Jean-Paul,
> >
> >I guess my focus is right when it comes to redirecting clients.
> >
> >Im hooking into
> >
> >DNSDatagramProtocol.writeMessage(self, message, address):
> >
> >And I guess thats OK?
>
> Depends what "OK" is supposed to mean.
> >
> >But when it comes to bogus domains, I guess i could use:
> >
> >DNSServerFactory.gotResolverError(self, failure, protocol, message,
> >address):
>
> I don't know why you should have to do that.
> >My problem is now how I construct a redirect package and channel it
> >back to
> >the client.
> >
> >Do you think that is a sensible approach? -and do you hava a pointer on
> >how
> >to find the associated client.
>
> It would probably be a lot easier and more robust to implement a
> completely new custom resolver that *wraps* an existing resolver, rather
> than trying to extend an existing resolver via a subclass.  This removes
> many irrelevant implementation details from consideration (such as
> writeMessage and gotResolverError) and gives you an obvious place to put
> your redirect logic - in an errback on the Deferred returned by one of
> the wrapped resolver's lookup/query methods.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091022/72217d8f/attachment.htm 

From vpogrebi at verizon.net  Thu Oct 22 18:20:21 2009
From: vpogrebi at verizon.net (Valeriy Pogrebitskiy)
Date: Thu, 22 Oct 2009 18:20:21 -0400
Subject: [Twisted-Python] How to chain deferred calls
In-Reply-To: <20091022140157.19972pda1t8zlb0g@216.129.205.5>
Message-ID: <9391BC461E7844DF8F71029DA8C2CD91@valeriy>

I am confused... If an exception is being raised in adc1() - errback is
supposed to be called and passed your Exception instance (wrapped up as an
instance of twisted.python.failure.Failure). 

Kind regards,
 
Valeriy Pogrebitskiy
Email: vpogrebi at iname.com
 
 
-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
vitaly at synapticvision.com
Sent: Thursday, October 22, 2009 2:02 PM
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] How to chain deferred calls


Thank you for response.

the issue is if adc1() will raise up an exception, than following it  
.addErrback() will never be called cause adc1() will exit or raise  
Exception.

Quoting "Valeriy Pogrebitskiy" <vpogrebi at verizon.net>:

> Add another .addErrback() directly after adc1() - to handle that
> specific exception...
>
>
> Kind regards,
>
> Valeriy Pogrebitskiy
> vpogrebi at verizon.net
>
>
>
>
> On Oct 21, 2009, at 4:12 PM, vitaly at synapticvision.com wrote:
>
>> hi,
>> how can I chain in defer methods that could raise exception while
>> showing the exception that coming from method? I mean, if I'll do:
>> return (
>>   adc1().abc2().abc3().addErrback("Common2AllException")
>> )
>> than "Common2AllException" will be raised if abc1() raise Exception,
>> but I'd like to see the adc1() own exception (and not
>> "Common2AllException") ?
>>
>>
>>
>> t = Test()
>> def abc1(self):
>>   if t.test() is None:
>>     raise Exception("Error11")
>>   else:
>>     return 1
>>
>> def abc2(self):
>>   if t.test() is None:
>>     raise Exception("Error12")
>>   else:
>>     return 1
>>
>> def abc3(self):
>>   if t.test() is None:
>>     raise Exception("Error13")
>>   else:
>>     return 1
>>
>>
>>
>>
>> Appreciate the help.
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From vitaly at synapticvision.com  Thu Oct 22 18:38:26 2009
From: vitaly at synapticvision.com (vitaly at synapticvision.com)
Date: Thu, 22 Oct 2009 18:38:26 -0400
Subject: [Twisted-Python] How to chain deferred calls
In-Reply-To: <9391BC461E7844DF8F71029DA8C2CD91@valeriy>
References: <9391BC461E7844DF8F71029DA8C2CD91@valeriy>
Message-ID: <20091022183826.71344j9qa1ki8i04@216.129.205.5>


me too,
may be its because of the way I'm calling the chain:

return (
   self.abc1().
   addErrback(self.handleFailure1).
   addCallback(self.abc2,args).
   addCallback(self.abc3).
   addErrback(self.handleFailure2)
)

I see no call to self.handleFailure1() at all, abc1() just fail on  
exception (if it was raised).

Quoting "Valeriy Pogrebitskiy" <vpogrebi at verizon.net>:

> I am confused... If an exception is being raised in adc1() - errback is
> supposed to be called and passed your Exception instance (wrapped up as an
> instance of twisted.python.failure.Failure).
>
> Kind regards,
>
> Valeriy Pogrebitskiy
> Email: vpogrebi at iname.com
>
>
> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com
> [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
> vitaly at synapticvision.com
> Sent: Thursday, October 22, 2009 2:02 PM
> To: twisted-python at twistedmatrix.com
> Subject: Re: [Twisted-Python] How to chain deferred calls
>
>
> Thank you for response.
>
> the issue is if adc1() will raise up an exception, than following it
> .addErrback() will never be called cause adc1() will exit or raise
> Exception.
>
> Quoting "Valeriy Pogrebitskiy" <vpogrebi at verizon.net>:
>
>> Add another .addErrback() directly after adc1() - to handle that
>> specific exception...
>>
>>
>> Kind regards,
>>
>> Valeriy Pogrebitskiy
>> vpogrebi at verizon.net
>>
>>
>>
>>
>> On Oct 21, 2009, at 4:12 PM, vitaly at synapticvision.com wrote:
>>
>>> hi,
>>> how can I chain in defer methods that could raise exception while
>>> showing the exception that coming from method? I mean, if I'll do:
>>> return (
>>>   adc1().abc2().abc3().addErrback("Common2AllException")
>>> )
>>> than "Common2AllException" will be raised if abc1() raise Exception,
>>> but I'd like to see the adc1() own exception (and not
>>> "Common2AllException") ?
>>>
>>>
>>>
>>> t = Test()
>>> def abc1(self):
>>>   if t.test() is None:
>>>     raise Exception("Error11")
>>>   else:
>>>     return 1
>>>
>>> def abc2(self):
>>>   if t.test() is None:
>>>     raise Exception("Error12")
>>>   else:
>>>     return 1
>>>
>>> def abc3(self):
>>>   if t.test() is None:
>>>     raise Exception("Error13")
>>>   else:
>>>     return 1
>>>
>>>
>>>
>>>
>>> Appreciate the help.
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From vpogrebi at verizon.net  Thu Oct 22 19:15:19 2009
From: vpogrebi at verizon.net (Valeriy Pogrebitskiy)
Date: Thu, 22 Oct 2009 19:15:19 -0400
Subject: [Twisted-Python] How to chain deferred calls
In-Reply-To: <20091022183826.71344j9qa1ki8i04@216.129.205.5>
Message-ID: <E7A7380914534C1A8E6A6D367E72244A@valeriy>

After taking closer look at your code - this is obvious...

To use callbacks - you MUST use deferred. In your case - each method in a
chain (except the last one) must return deferred. Without that - you can't
construct such chain.

Your abc1() and abc2() must return deferred (or be decorated by a method
that returns deferred)...

Kind regards,
 
Valeriy Pogrebitskiy
Email: vpogrebi at iname.com
 
 

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
vitaly at synapticvision.com
Sent: Thursday, October 22, 2009 6:38 PM
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] How to chain deferred calls


me too,
may be its because of the way I'm calling the chain:

return (
   self.abc1().
   addErrback(self.handleFailure1).
   addCallback(self.abc2,args).
   addCallback(self.abc3).
   addErrback(self.handleFailure2)
)

I see no call to self.handleFailure1() at all, abc1() just fail on  
exception (if it was raised).

Quoting "Valeriy Pogrebitskiy" <vpogrebi at verizon.net>:

> I am confused... If an exception is being raised in adc1() - errback is
> supposed to be called and passed your Exception instance (wrapped up as an
> instance of twisted.python.failure.Failure).
>
> Kind regards,
>
> Valeriy Pogrebitskiy
> Email: vpogrebi at iname.com
>
>
> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com
> [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
> vitaly at synapticvision.com
> Sent: Thursday, October 22, 2009 2:02 PM
> To: twisted-python at twistedmatrix.com
> Subject: Re: [Twisted-Python] How to chain deferred calls
>
>
> Thank you for response.
>
> the issue is if adc1() will raise up an exception, than following it
> .addErrback() will never be called cause adc1() will exit or raise
> Exception.
>
> Quoting "Valeriy Pogrebitskiy" <vpogrebi at verizon.net>:
>
>> Add another .addErrback() directly after adc1() - to handle that
>> specific exception...
>>
>>
>> Kind regards,
>>
>> Valeriy Pogrebitskiy
>> vpogrebi at verizon.net
>>
>>
>>
>>
>> On Oct 21, 2009, at 4:12 PM, vitaly at synapticvision.com wrote:
>>
>>> hi,
>>> how can I chain in defer methods that could raise exception while
>>> showing the exception that coming from method? I mean, if I'll do:
>>> return (
>>>   adc1().abc2().abc3().addErrback("Common2AllException")
>>> )
>>> than "Common2AllException" will be raised if abc1() raise Exception,
>>> but I'd like to see the adc1() own exception (and not
>>> "Common2AllException") ?
>>>
>>>
>>>
>>> t = Test()
>>> def abc1(self):
>>>   if t.test() is None:
>>>     raise Exception("Error11")
>>>   else:
>>>     return 1
>>>
>>> def abc2(self):
>>>   if t.test() is None:
>>>     raise Exception("Error12")
>>>   else:
>>>     return 1
>>>
>>> def abc3(self):
>>>   if t.test() is None:
>>>     raise Exception("Error13")
>>>   else:
>>>     return 1
>>>
>>>
>>>
>>>
>>> Appreciate the help.
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From exarkun at twistedmatrix.com  Thu Oct 22 19:18:55 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 22 Oct 2009 23:18:55 -0000
Subject: [Twisted-Python] Handeling unresolved DNS queries?
In-Reply-To: <e78558910910221355h7f0f3233h4545302fef1adc7f@mail.gmail.com>
References: <e78558910910201250n270d329di7678454ad9d231b9@mail.gmail.com>
	<20091022135516.11571.1780136361.divmod.xquotient.1414@localhost.localdomain>
	<e78558910910220746hb112a81r292185addfd82dc2@mail.gmail.com>
	<20091022173150.11571.1534618114.divmod.xquotient.1432@localhost.localdomain>
	<e78558910910221200vc1b0229g5fae565c9c4e5fcd@mail.gmail.com>
	<20091022203806.11571.909308342.divmod.xquotient.1441@localhost.localdomain>
	<e78558910910221355h7f0f3233h4545302fef1adc7f@mail.gmail.com>
Message-ID: <20091022231855.11571.1506567463.divmod.xquotient.1460@localhost.localdomain>

On 08:55 pm, jesper at taxboel.dk wrote:
>I'm still new to the whole twisted way of doing things, but it sounds 
>very
>sensible. :)
>
>Could you suggest a class to start studying from ?

twisted/names/common.py is probably a good place to start.  It has what 
comes closest to the definition of a Twisted Names "resolver".

Jean-Paul


From vitaly at synapticvision.com  Thu Oct 22 19:38:07 2009
From: vitaly at synapticvision.com (vitaly at synapticvision.com)
Date: Thu, 22 Oct 2009 19:38:07 -0400
Subject: [Twisted-Python] How to chain deferred calls
In-Reply-To: <E7A7380914534C1A8E6A6D367E72244A@valeriy>
References: <E7A7380914534C1A8E6A6D367E72244A@valeriy>
Message-ID: <20091022193807.70591gxlq1e1yiu8@216.129.205.5>


Correct, sorry, tried:

return (
    self.abc1().
    addErrback(self.handleFailure1).
    addCallback(self.abc2,args).
    addCallback(self.abc3).
    addErrback(self.handleFailure2)
)


def abc1(self):
    if t.test() is None:
      raise Exception("Error11")
    else:
      d = defer.Deferred()
      d.callback(1)
      return d

Still in case of exception from abc1() - self.handleFailure1() never  
called, instead of it abc1() just fail.

Do I need "raise Exception("Error11")" also return as deferred ? Than how?


Quoting "Valeriy Pogrebitskiy" <vpogrebi at verizon.net>:

> After taking closer look at your code - this is obvious...
>
> To use callbacks - you MUST use deferred. In your case - each method in a
> chain (except the last one) must return deferred. Without that - you can't
> construct such chain.
>
> Your abc1() and abc2() must return deferred (or be decorated by a method
> that returns deferred)...
>
> Kind regards,
>
> Valeriy Pogrebitskiy
> Email: vpogrebi at iname.com
>
>
>
> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com
> [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
> vitaly at synapticvision.com
> Sent: Thursday, October 22, 2009 6:38 PM
> To: twisted-python at twistedmatrix.com
> Subject: Re: [Twisted-Python] How to chain deferred calls
>
>
> me too,
> may be its because of the way I'm calling the chain:
>
> return (
>    self.abc1().
>    addErrback(self.handleFailure1).
>    addCallback(self.abc2,args).
>    addCallback(self.abc3).
>    addErrback(self.handleFailure2)
> )
>
> I see no call to self.handleFailure1() at all, abc1() just fail on
> exception (if it was raised).
>
> Quoting "Valeriy Pogrebitskiy" <vpogrebi at verizon.net>:
>
>> I am confused... If an exception is being raised in adc1() - errback is
>> supposed to be called and passed your Exception instance (wrapped up as an
>> instance of twisted.python.failure.Failure).
>>
>> Kind regards,
>>
>> Valeriy Pogrebitskiy
>> Email: vpogrebi at iname.com
>>
>>
>> -----Original Message-----
>> From: twisted-python-bounces at twistedmatrix.com
>> [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
>> vitaly at synapticvision.com
>> Sent: Thursday, October 22, 2009 2:02 PM
>> To: twisted-python at twistedmatrix.com
>> Subject: Re: [Twisted-Python] How to chain deferred calls
>>
>>
>> Thank you for response.
>>
>> the issue is if adc1() will raise up an exception, than following it
>> .addErrback() will never be called cause adc1() will exit or raise
>> Exception.
>>
>> Quoting "Valeriy Pogrebitskiy" <vpogrebi at verizon.net>:
>>
>>> Add another .addErrback() directly after adc1() - to handle that
>>> specific exception...
>>>
>>>
>>> Kind regards,
>>>
>>> Valeriy Pogrebitskiy
>>> vpogrebi at verizon.net
>>>
>>>
>>>
>>>
>>> On Oct 21, 2009, at 4:12 PM, vitaly at synapticvision.com wrote:
>>>
>>>> hi,
>>>> how can I chain in defer methods that could raise exception while
>>>> showing the exception that coming from method? I mean, if I'll do:
>>>> return (
>>>>   adc1().abc2().abc3().addErrback("Common2AllException")
>>>> )
>>>> than "Common2AllException" will be raised if abc1() raise Exception,
>>>> but I'd like to see the adc1() own exception (and not
>>>> "Common2AllException") ?
>>>>
>>>>
>>>>
>>>> t = Test()
>>>> def abc1(self):
>>>>   if t.test() is None:
>>>>     raise Exception("Error11")
>>>>   else:
>>>>     return 1
>>>>
>>>> def abc2(self):
>>>>   if t.test() is None:
>>>>     raise Exception("Error12")
>>>>   else:
>>>>     return 1
>>>>
>>>> def abc3(self):
>>>>   if t.test() is None:
>>>>     raise Exception("Error13")
>>>>   else:
>>>>     return 1
>>>>
>>>>
>>>>
>>>>
>>>> Appreciate the help.
>>>>
>>>>
>>>> _______________________________________________
>>>> Twisted-Python mailing list
>>>> Twisted-Python at twistedmatrix.com
>>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From general at vultaire.net  Thu Oct 22 19:41:56 2009
From: general at vultaire.net (Paul Goins)
Date: Fri, 23 Oct 2009 08:41:56 +0900
Subject: [Twisted-Python] How to chain deferred calls
In-Reply-To: <20091022183826.71344j9qa1ki8i04@216.129.205.5>
References: <9391BC461E7844DF8F71029DA8C2CD91@valeriy>
	<20091022183826.71344j9qa1ki8i04@216.129.205.5>
Message-ID: <4AE0EDC4.10206@vultaire.net>

Hello,

>>> On Oct 21, 2009, at 4:12 PM, vitaly at synapticvision.com wrote:
>>>
>>>> hi,
>>>> how can I chain in defer methods that could raise exception while
>>>> showing the exception that coming from method?

This is covered in the Twisted documentation.  There's 3 pages I often
have reviewed when confused about something:

1. Asynchronous Programming with Twisted
(http://twistedmatrix.com/projects/core/documentation/howto/async.html)
2. Deferred Reference
(http://twistedmatrix.com/projects/core/documentation/howto/defer.html)
3. Generating Deferreds
(http://twistedmatrix.com/projects/core/documentation/howto/gendefer.html)

Specifically, the most relevant is the Visual Explanation:
http://twistedmatrix.com/projects/core/documentation/howto/defer.html#auto2
This should give you the info you need, but I'll explain a little more
anyway.

>>>> I mean, if I'll do:
>>>> return (
>>>>   adc1().abc2().abc3().addErrback("Common2AllException")
>>>> )
>>>> than "Common2AllException" will be raised if abc1() raise Exception,
>>>> but I'd like to see the adc1() own exception (and not
>>>> "Common2AllException") ?

If abc1 raises an exception, it's going to go through each step of the
callback/errback chain until it finds an errback.  If the only thing you
have is attached at the very end, then that's where the exception will
be handled.

> the issue is if adc1() will raise up an exception, than following it
> .addErrback() will never be called cause adc1() will exit or raise
> Exception.

Let's say that your abc() was returning a Deferred.  In this case, doing
abc().addErrback("Common2AllException") would make sense.  However, your
example either returns 1 (not a Deferred), or it raises an Exception.
Neither one will chain like this.  The example is bad.

If you can provide a better example, please do.  In any case, please
review the documentation, especially the "visual explanation" I
mentioned above.  And finally, do a search on the web for "twisted
inlineCallbacks decorator" - that makes writing a lot of Deferred-using
code much easier, and helped me out a lot as a beginner.

- Paul



From vitaly at synapticvision.com  Thu Oct 22 20:15:40 2009
From: vitaly at synapticvision.com (vitaly at synapticvision.com)
Date: Thu, 22 Oct 2009 20:15:40 -0400
Subject: [Twisted-Python] How to chain deferred calls
In-Reply-To: <4AE0EDC4.10206@vultaire.net>
References: <9391BC461E7844DF8F71029DA8C2CD91@valeriy>
	<20091022183826.71344j9qa1ki8i04@216.129.205.5>
	<4AE0EDC4.10206@vultaire.net>
Message-ID: <20091022201540.42317d4b9h5b720w@216.129.205.5>


Thank you a lot for pointing me to the Twisted doc-s, but we're  
discussing the following snippet:

return (
     self.abc1().
     addErrback(self.handleFailure1).
     addCallback(self.abc2,args).
     addCallback(self.abc3).
     addErrback(self.handleFailure2)
)


def abc1(self):
     if t.test() is None:
       raise Exception("Error11")
     else:
       d = defer.Deferred()
       d.callback(1)
       return d


and basically, I've expected in case of exception  
self.handleFailure1() to be called, but I don't see it happen.

cheers.


Quoting "Paul Goins" <general at vultaire.net>:

> Hello,
>
>>>> On Oct 21, 2009, at 4:12 PM, vitaly at synapticvision.com wrote:
>>>>
>>>>> hi,
>>>>> how can I chain in defer methods that could raise exception while
>>>>> showing the exception that coming from method?
>
> This is covered in the Twisted documentation.  There's 3 pages I often
> have reviewed when confused about something:
>
> 1. Asynchronous Programming with Twisted
> (http://twistedmatrix.com/projects/core/documentation/howto/async.html)
> 2. Deferred Reference
> (http://twistedmatrix.com/projects/core/documentation/howto/defer.html)
> 3. Generating Deferreds
> (http://twistedmatrix.com/projects/core/documentation/howto/gendefer.html)
>
> Specifically, the most relevant is the Visual Explanation:
> http://twistedmatrix.com/projects/core/documentation/howto/defer.html#auto2
> This should give you the info you need, but I'll explain a little more
> anyway.
>
>>>>> I mean, if I'll do:
>>>>> return (
>>>>>   adc1().abc2().abc3().addErrback("Common2AllException")
>>>>> )
>>>>> than "Common2AllException" will be raised if abc1() raise Exception,
>>>>> but I'd like to see the adc1() own exception (and not
>>>>> "Common2AllException") ?
>
> If abc1 raises an exception, it's going to go through each step of the
> callback/errback chain until it finds an errback.  If the only thing you
> have is attached at the very end, then that's where the exception will
> be handled.
>
>> the issue is if adc1() will raise up an exception, than following it
>> .addErrback() will never be called cause adc1() will exit or raise
>> Exception.
>
> Let's say that your abc() was returning a Deferred.  In this case, doing
> abc().addErrback("Common2AllException") would make sense.  However, your
> example either returns 1 (not a Deferred), or it raises an Exception.
> Neither one will chain like this.  The example is bad.
>
> If you can provide a better example, please do.  In any case, please
> review the documentation, especially the "visual explanation" I
> mentioned above.  And finally, do a search on the web for "twisted
> inlineCallbacks decorator" - that makes writing a lot of Deferred-using
> code much easier, and helped me out a lot as a beginner.
>
> - Paul
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From terry at jon.es  Thu Oct 22 21:13:00 2009
From: terry at jon.es (Terry Jones)
Date: Fri, 23 Oct 2009 03:13:00 +0200
Subject: [Twisted-Python] How to chain deferred calls
In-Reply-To: Your message at 20:15:40 on Thursday, 22 October 2009
References: <9391BC461E7844DF8F71029DA8C2CD91@valeriy>
	<20091022183826.71344j9qa1ki8i04@216.129.205.5>
	<4AE0EDC4.10206@vultaire.net>
	<20091022201540.42317d4b9h5b720w@216.129.205.5>
Message-ID: <19169.796.737302.242405@jon.es>

>>>>> "vitaly" == vitaly  <vitaly at synapticvision.com> writes:

vitaly> Thank you a lot for pointing me to the Twisted doc-s, but we're
vitaly> discussing the following snippet:
[snip]
vitaly> and basically, I've expected in case of exception
vitaly> self.handleFailure1() to be called, but I don't see it happen.

The reason you're not seeing handleFailure1 being called is that the
exception is not occurring in the context of deferred processing. You've
got a regular Python function call, a regular exception is raised, etc.
Twisted and its deferred do not / cannot alter that behavior.

What they *can* do is handle exceptions and turn them into failures and
route the failure to an errback chain *in the context of calling functions
that have been added to a deferred*.  Because your abc1 has not been added
to any deferred's call/errback chain, none of that happens when your
exception is raised.

If your code looked like this (pseudocode), you would see the exception

    return (
         self.abc1().
         addErrback(self.handleFailure1).
         addCallback(self.abc2,args).
         addCallback(self.abc3).
         addErrback(self.handleFailure2)
    )

    def abc1(self):
        d = defer.Deferred()
        d.addCallback(raiser)
        d.callback(1)
        return d

    def raiser(self, _):
        raise Exception("Error11")

Because the thing that raises is being called by Twisted's deferred class,
and its exception is caught and routed to d's errback chain and winds up in
the handleFailure1 method.

Does that make sense?

Terry


From andrew at bemusement.org  Thu Oct 22 21:37:19 2009
From: andrew at bemusement.org (Andrew Bennetts)
Date: Fri, 23 Oct 2009 12:37:19 +1100
Subject: [Twisted-Python] How to chain deferred calls
In-Reply-To: <20091022201540.42317d4b9h5b720w@216.129.205.5>
References: <9391BC461E7844DF8F71029DA8C2CD91@valeriy>
	<20091022183826.71344j9qa1ki8i04@216.129.205.5>
	<4AE0EDC4.10206@vultaire.net>
	<20091022201540.42317d4b9h5b720w@216.129.205.5>
Message-ID: <20091023013719.GF2963@steerpike.home.puzzling.org>

vitaly at synapticvision.com wrote:
[...]
> def abc1(self):
>      if t.test() is None:
>        raise Exception("Error11")
>      else:
>        d = defer.Deferred()
>        d.callback(1)
>        return d
> 
> 
> and basically, I've expected in case of exception  
> self.handleFailure1() to be called, but I don't see it happen.

This is a function that either returns a Deferred or raises an exception.  This
isn't a Twisted issue, it's simply a Python one: in ?func1().func2()?, if func1
raises an exception then func2 will not be invoked.  That's fundamental to what
raising an exception in Python means.

If you want to convert this to something that always returns a Deferred, you can
either rewrite it, e.g. using ?return defer.fail(Exception('Error11'))?, or use
maybeDeferred which will intercept exceptions for you, e.g.:

    return (
        maybeDeferred(self.abc1).
        addErrback(self.handleFailure1).
	# etc...
	)

You can find maybeDeferred in the twisted.internet.defer module.

-Andrew.



From vitaly at synapticvision.com  Thu Oct 22 21:49:33 2009
From: vitaly at synapticvision.com (vitaly at synapticvision.com)
Date: Thu, 22 Oct 2009 21:49:33 -0400
Subject: [Twisted-Python] How to chain deferred calls
In-Reply-To: <19169.796.737302.242405@jon.es>
References: <9391BC461E7844DF8F71029DA8C2CD91@valeriy>
	<20091022183826.71344j9qa1ki8i04@216.129.205.5>
	<4AE0EDC4.10206@vultaire.net>
	<20091022201540.42317d4b9h5b720w@216.129.205.5>
	<19169.796.737302.242405@jon.es>
Message-ID: <20091022214933.10926hlf044k7lc8@216.129.205.5>


Very, very close to want I wanted to understand, thank you!

One more q please: what if I complicate the abc1() like following, is  
this expected to work or again I've missed the point?

   return (
          self.abc1().
          addErrback(self.handleFailure1).
          addCallback(self.abc2,args).
          addCallback(self.abc3).
          addErrback(self.handleFailure2)
     )

     def abc1(self):

         d = defer.Deferred()

         c = myClass()
         result = c.myTestFunc()
         if result != 1:
             d.addCallback(raiser)

         d.callback(result)
         return d

     def raiser(self, _):
         raise Exception("Error11")



Quoting "Terry Jones" <terry at jon.es>:

> If your code looked like this (pseudocode), you would see the exception
>
>     return (
>          self.abc1().
>          addErrback(self.handleFailure1).
>          addCallback(self.abc2,args).
>          addCallback(self.abc3).
>          addErrback(self.handleFailure2)
>     )
>
>     def abc1(self):
>         d = defer.Deferred()
>         d.addCallback(raiser)
>         d.callback(1)
>         return d
>
>     def raiser(self, _):
>         raise Exception("Error11")
>
> Because the thing that raises is being called by Twisted's deferred class,
> and its exception is caught and routed to d's errback chain and winds up in
> the handleFailure1 method.
>
> Does that make sense?
>
> Terry
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From vitaly at synapticvision.com  Thu Oct 22 22:16:11 2009
From: vitaly at synapticvision.com (vitaly at synapticvision.com)
Date: Thu, 22 Oct 2009 22:16:11 -0400
Subject: [Twisted-Python] How to chain deferred calls
In-Reply-To: <20091023013719.GF2963@steerpike.home.puzzling.org>
References: <9391BC461E7844DF8F71029DA8C2CD91@valeriy>
	<20091022183826.71344j9qa1ki8i04@216.129.205.5>
	<4AE0EDC4.10206@vultaire.net>
	<20091022201540.42317d4b9h5b720w@216.129.205.5>
	<20091023013719.GF2963@steerpike.home.puzzling.org>
Message-ID: <20091022221611.8854575bwfb17xgk@216.129.205.5>


This is it! Thank you.

Quoting "Andrew Bennetts" <andrew at bemusement.org>:

> vitaly at synapticvision.com wrote:
> [...]
>> def abc1(self):
>>      if t.test() is None:
>>        raise Exception("Error11")
>>      else:
>>        d = defer.Deferred()
>>        d.callback(1)
>>        return d
>>
>>
>> and basically, I've expected in case of exception
>> self.handleFailure1() to be called, but I don't see it happen.
>
> This is a function that either returns a Deferred or raises an   
> exception.  This
> isn't a Twisted issue, it's simply a Python one: in   
> ?func1().func2()?, if func1
> raises an exception then func2 will not be invoked.  That's   
> fundamental to what
> raising an exception in Python means.
>
> If you want to convert this to something that always returns a   
> Deferred, you can
> either rewrite it, e.g. using ?return   
> defer.fail(Exception('Error11'))?, or use
> maybeDeferred which will intercept exceptions for you, e.g.:
>
>     return (
>         maybeDeferred(self.abc1).
>         addErrback(self.handleFailure1).
> 	# etc...
> 	)
>
> You can find maybeDeferred in the twisted.internet.defer module.
>
> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From k.kelly.gordon at gmail.com  Sat Oct 24 10:39:40 2009
From: k.kelly.gordon at gmail.com (Kelly)
Date: Sun, 25 Oct 2009 01:39:40 +1100
Subject: [Twisted-Python]  Phasing out old-style classes
Message-ID: <40b76abc0910240739w4c23108aoe5e7e933dda1ac83@mail.gmail.com>

On Thu Oct 8 20:08:12 EDT 2009, Glyph Lefkowitz <glyph at
twistedmatrix.com> wrote:

> On Thu, Oct 8, 2009 at 7:59 PM, Mark Visser <markv at lumierevfx.com> wrote:
>
> > I've been bitten a couple times by twisted's use of old-style classes.
> > Now that Jython is finally off the 2.2 branch, is there any real reason
> > to stay backwards compatible?
> >
>
> Changing a class from old-style to new-style is an incompatible change.  The
> difficulty is that if existing libraries use a particular class and inherit
> from it, changing the class to be new-style can have effects from changing
> how their descriptors work to causing an exception when their module is
> imported.
>
...
>
> If old-style classes can be evolved into new-style classes while somehow
> following this policy, that would be great.  The problem is that providing
> compatibility at this level is time-consuming and difficult.  One problem in
> particular is that we don't want to litter the codebase with lots of "Foo"
> and "NewFoo" or "Foo2" sitting right next to it, so we would have to think
> of new names for everything.
>

I have some POC code for this.  It provides a simple toggle at the start
of the application to select between old style (the default) and new style
classes.  After that, a DeprecationWarning is issued every time an old
style class is defined.  The only user visible change is that old style
classes gain an empty old-style base class.  The idea being the
old-style/new-style migration could be managed using the usual twisted
deprecation plan.  Thoughts?


From exarkun at twistedmatrix.com  Sat Oct 24 10:50:11 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 24 Oct 2009 14:50:11 -0000
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <40b76abc0910240739w4c23108aoe5e7e933dda1ac83@mail.gmail.com>
References: <40b76abc0910240739w4c23108aoe5e7e933dda1ac83@mail.gmail.com>
Message-ID: <20091024145011.11571.1125183848.divmod.xquotient.1491@localhost.localdomain>

On 02:39 pm, k.kelly.gordon at gmail.com wrote:
>On Thu Oct 8 20:08:12 EDT 2009, Glyph Lefkowitz <glyph at
>twistedmatrix.com> wrote:
>>On Thu, Oct 8, 2009 at 7:59 PM, Mark Visser <markv at lumierevfx.com> 
>>wrote:
>>
>> > I've been bitten a couple times by twisted's use of old-style 
>>classes.
>> > Now that Jython is finally off the 2.2 branch, is there any real 
>>reason
>> > to stay backwards compatible?
>> >
>>
>>Changing a class from old-style to new-style is an incompatible 
>>change.  The
>>difficulty is that if existing libraries use a particular class and 
>>inherit
>>from it, changing the class to be new-style can have effects from 
>>changing
>>how their descriptors work to causing an exception when their module 
>>is
>>imported.
>...
>>
>>If old-style classes can be evolved into new-style classes while 
>>somehow
>>following this policy, that would be great.  The problem is that 
>>providing
>>compatibility at this level is time-consuming and difficult.  One 
>>problem in
>>particular is that we don't want to litter the codebase with lots of 
>>"Foo"
>>and "NewFoo" or "Foo2" sitting right next to it, so we would have to 
>>think
>>of new names for everything.
>
>I have some POC code for this.  It provides a simple toggle at the 
>start
>of the application to select between old style (the default) and new 
>style
>classes.  After that, a DeprecationWarning is issued every time an old
>style class is defined.  The only user visible change is that old style
>classes gain an empty old-style base class.  The idea being the
>old-style/new-style migration could be managed using the usual twisted
>deprecation plan.  Thoughts?

Process-wide switches are tricky.  Some code may decide it wants new- 
style, while other code wants to stick with classic.  They have a fight, 
one of them loses.  I think that adding this is just an invitation for 
people to create more problems.

I think that we should consider requests to make specific classes new- 
style (and grant them when doing so won't cause compatibility problems), 
make all new classes new-style, but otherwise leave this alone until 3.x 
is widely adopted.

Jean-Paul


From dgriff1 at gmail.com  Sat Oct 24 15:47:33 2009
From: dgriff1 at gmail.com (Daniel Griffin)
Date: Sat, 24 Oct 2009 14:47:33 -0500
Subject: [Twisted-Python] Twisted Performance
In-Reply-To: <4EBDD6C1-53B5-4CA9-AD44-205F5E101264@integrateddevcorp.com>
References: <3db160680910131944w7f101c1fhfd29dad00eb4dfe0@mail.gmail.com>
	<cedc0c090910140155l4bfd70eek364dca61c9ea2f44@mail.gmail.com>
	<80F2A1FE-BE1F-404F-BD29-21BA0B7B4D16@integrateddevcorp.com>
	<4AD67B2D.3050500@krondo.com>
	<4EBDD6C1-53B5-4CA9-AD44-205F5E101264@integrateddevcorp.com>
Message-ID: <3db160680910241247q6825dca0j6dd7e4d0877bea13@mail.gmail.com>

Hi everyone,

I ported my thread based socket code to twisted and have been happy with my
results. To re-hash, my code creates a connection then waits for the other
end to do something and respond, each connection takes a different amount of
time. I went from 3-5 connections completed per second to about 15 per
second. Most importantly connections that take a long time have almost no
impact on other running connections. The thread stuff would peg the CPU and
now I never really venture over 20%. Also testing this code is far easier
than testing stuff that directly calls sockets.

Basically its a huge win on every level.

Thanks for all the help everyone.


Dan

On Wed, Oct 14, 2009 at 8:47 PM, Steve Steiner (listsin) <
listsin at integrateddevcorp.com> wrote:

> Cool, please let me know off-list if you'd like a quick review before
> "going live."
>
> S
>
> On Oct 14, 2009, at 9:30 PM, Dave Peticolas wrote:
>
> > Steve Steiner (listsin) wrote:
> >> On Oct 14, 2009, at 4:55 AM, Laurens Van Houtven wrote:
> >>> Personally I'm a big fan of this series of blog posts:
> >>> http://krondo.com/blog/?page_id=1327
> >>
> >> Very nice, thanks for sharing!
> >
> > Thank you. I really meant to make a public announcement
> > about that on this list, but I was trying to get to
> > Deferreds first :)
> >
> > Anyway...I'm writing an Introduction to Twisted and
> > asynchronous programming. Surprise :)
> >
> > dave
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091024/a374cee7/attachment.htm 

From jesper at taxboel.dk  Sat Oct 24 16:04:25 2009
From: jesper at taxboel.dk (=?ISO-8859-1?Q?Jesper_Taxb=F8l?=)
Date: Sat, 24 Oct 2009 22:04:25 +0200
Subject: [Twisted-Python] Handeling unresolved DNS queries?
In-Reply-To: <20091022231855.11571.1506567463.divmod.xquotient.1460@localhost.localdomain>
References: <e78558910910201250n270d329di7678454ad9d231b9@mail.gmail.com>
	<20091022135516.11571.1780136361.divmod.xquotient.1414@localhost.localdomain>
	<e78558910910220746hb112a81r292185addfd82dc2@mail.gmail.com>
	<20091022173150.11571.1534618114.divmod.xquotient.1432@localhost.localdomain>
	<e78558910910221200vc1b0229g5fae565c9c4e5fcd@mail.gmail.com>
	<20091022203806.11571.909308342.divmod.xquotient.1441@localhost.localdomain>
	<e78558910910221355h7f0f3233h4545302fef1adc7f@mail.gmail.com>
	<20091022231855.11571.1506567463.divmod.xquotient.1460@localhost.localdomain>
Message-ID: <e78558910910241304j476d00c1k47a81ff9e00036d2@mail.gmail.com>

Im looking at the common.py and I feel a bit confused about how to wrap a
resolver.

Would'nt a subclass achieve the same thing. I would only need to implement
the changed functions in the subclass.

I guess my problem is that I dont exactly know how to write a wrapper in
python.

Kind regards

Tax

2009/10/23 <exarkun at twistedmatrix.com>

> On 08:55 pm, jesper at taxboel.dk wrote:
> >I'm still new to the whole twisted way of doing things, but it sounds
> >very
> >sensible. :)
> >
> >Could you suggest a class to start studying from ?
>
> twisted/names/common.py is probably a good place to start.  It has what
> comes closest to the definition of a Twisted Names "resolver".
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091024/d312cbbc/attachment.htm 

From exarkun at twistedmatrix.com  Sun Oct 25 00:05:12 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 25 Oct 2009 04:05:12 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1256443512.5.165733972@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091025/abc1a23a/attachment.htm 

From glyph at twistedmatrix.com  Sun Oct 25 01:15:30 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 25 Oct 2009 01:15:30 -0400
Subject: [Twisted-Python] Twisted Performance
In-Reply-To: <3db160680910241247q6825dca0j6dd7e4d0877bea13@mail.gmail.com>
References: <3db160680910131944w7f101c1fhfd29dad00eb4dfe0@mail.gmail.com>
	<cedc0c090910140155l4bfd70eek364dca61c9ea2f44@mail.gmail.com>
	<80F2A1FE-BE1F-404F-BD29-21BA0B7B4D16@integrateddevcorp.com>
	<4AD67B2D.3050500@krondo.com>
	<4EBDD6C1-53B5-4CA9-AD44-205F5E101264@integrateddevcorp.com>
	<3db160680910241247q6825dca0j6dd7e4d0877bea13@mail.gmail.com>
Message-ID: <D9EA4D8F-B3CA-486A-86D0-5FB392A95294@twistedmatrix.com>

On Oct 24, 2009, at 3:47 PM, Daniel Griffin wrote:

> I ported my thread based socket code to twisted and have been happy  
> with my results. (...)
> Basically its a huge win on every level.
>
> Thanks for all the help everyone.

Glad to hear it!  Do you want to write up something more specific for  
the SuccessStories page?



From glyph at twistedmatrix.com  Sun Oct 25 01:38:12 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 25 Oct 2009 01:38:12 -0400
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <20091024145011.11571.1125183848.divmod.xquotient.1491@localhost.localdomain>
References: <40b76abc0910240739w4c23108aoe5e7e933dda1ac83@mail.gmail.com>
	<20091024145011.11571.1125183848.divmod.xquotient.1491@localhost.localdomain>
Message-ID: <6EE454CA-F803-4C6B-BE67-23B2078087B9@twistedmatrix.com>

On Oct 24, 2009, at 10:50 AM, exarkun at twistedmatrix.com wrote:

> I think that we should consider requests to make specific classes new-
> style (and grant them when doing so won't cause compatibility  
> problems),
> make all new classes new-style, but otherwise leave this alone until  
> 3.x
> is widely adopted.

While your argument makes sense to me, there's a fundamental problem  
with the way Python introduced new-style classes that creates an  
ongoing maintenance tension.  I think we should start addressing the  
problem incrementally now (especially since it sounded like Kelly was  
volunteering for some work!) rather than put it off for one big chunk  
when we do a 3k migration.

Let's say you're writing a new Twisted application today.  You want to  
be prepared for the day when everything is new-style, but you also  
want to use existing Twisted functionality.  You're using some long- 
standing library class, that looks like this:

# in Twisted
class Library: pass

What do you do?  Well, the obvious upgrade path here is to make a  
class which (A) inherits from "Library" to get Twisted functionality  
and (B) inherits from "object" to get new-style-ness.  So you go ahead  
and write:

# in your application
class Application(object, Library): pass

... and that's great.  It works, your class is new-style, and it gets  
all the library functionality that you want.  Except now, you've made  
the old-style-ness of 'Library' a very important part of its  
interface.  If, one day, we flip any kind of new-style switch, instead  
of neatly defining a new-style twisted-using class, your code will do  
this instead:

Traceback (most recent call last):
   File "your-application.py", line 1, in <module>
     class Application(object, Library): pass
TypeError: Error when calling the metaclass bases
     Cannot create a consistent method resolution
order (MRO) for bases object, Library

I would really like a more abstract declaration that applications can  
use in the meanwhile, to get new-style semantics but still allow  
inheritable classes to evolve.

I suspect that we could do this with some kind of metaclass, but that  
seems ugly.  More reasonable, I imagine, would be something like:

class Application(newStyle(Library)): pass

and we could implement 'newStyle' to do something sane in the face of  
either an old-style or a new-style "Library" class.

Of course, there are still issues with behavior differences on  
decorators and so on, and so the same compatibility issues might still  
come up, but in my experience those issues are significantly less  
serious and easier to fix than "my entire program blows up and will  
not start unless I make all my classes old-style".


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091025/9b272f18/attachment-0001.htm 

From foom at fuhm.net  Sun Oct 25 01:50:15 2009
From: foom at fuhm.net (James Y Knight)
Date: Sun, 25 Oct 2009 01:50:15 -0400
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <6EE454CA-F803-4C6B-BE67-23B2078087B9@twistedmatrix.com>
References: <40b76abc0910240739w4c23108aoe5e7e933dda1ac83@mail.gmail.com>
	<20091024145011.11571.1125183848.divmod.xquotient.1491@localhost.localdomain>
	<6EE454CA-F803-4C6B-BE67-23B2078087B9@twistedmatrix.com>
Message-ID: <E486FA77-BDA0-4ADF-90E9-9E1D8E4E5273@fuhm.net>

On Oct 25, 2009, at 1:38 AM, Glyph Lefkowitz wrote:
> What do you do?  Well, the obvious upgrade path here is to make a  
> class which (A) inherits from "Library" to get Twisted functionality  
> and (B) inherits from "object" to get new-style-ness.  So you go  
> ahead and write:
>
> # in your application
> class Application(object, Library): pass

Maybe the answer "why not" is obvious and I should already know it,  
but wouldn't it be more obvious to write:
class Application(Library, object): pass
instead. That at least has the advantage of not blowing up if Library  
later becomes newstyle, right?

James
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091025/13a87d66/attachment.htm 

From glyph at twistedmatrix.com  Sun Oct 25 02:32:08 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 25 Oct 2009 02:32:08 -0400
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <E486FA77-BDA0-4ADF-90E9-9E1D8E4E5273@fuhm.net>
References: <40b76abc0910240739w4c23108aoe5e7e933dda1ac83@mail.gmail.com>
	<20091024145011.11571.1125183848.divmod.xquotient.1491@localhost.localdomain>
	<6EE454CA-F803-4C6B-BE67-23B2078087B9@twistedmatrix.com>
	<E486FA77-BDA0-4ADF-90E9-9E1D8E4E5273@fuhm.net>
Message-ID: <4FE7148D-78E9-48E8-B1D6-0B76B05D31D5@twistedmatrix.com>

On Oct 25, 2009, at 1:50 AM, James Y Knight wrote:

> On Oct 25, 2009, at 1:38 AM, Glyph Lefkowitz wrote:
>> What do you do?  Well, the obvious upgrade path here is to make a  
>> class which (A) inherits from "Library" to get Twisted  
>> functionality and (B) inherits from "object" to get new-style- 
>> ness.  So you go ahead and write:
>>
>> # in your application
>> class Application(object, Library): pass
>
> Maybe the answer "why not" is obvious and I should already know it,  
> but wouldn't it be more obvious to write:
> class Application(Library, object): pass
> instead. That at least has the advantage of not blowing up if  
> Library later becomes newstyle, right?

Huh.  You may have just pointed out that I misunderstand the algorithm  
used to generate that error.  I thought that certain other hierarchies  
in cases more complex than the trivial one I presented would also give  
you that error if something became new-style in the middle, but I  
can't seem to generate any hierarchies that cause a problem.  Is it  
really this simple?  Always put 'object' at the *end* of your bases- 
list to declare the intention "I want to be new-style" and you'll be  
OK?  (If so, why is that?)

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091025/6ee2a79e/attachment.htm 

From dgriff1 at gmail.com  Sun Oct 25 11:17:35 2009
From: dgriff1 at gmail.com (Daniel Griffin)
Date: Sun, 25 Oct 2009 10:17:35 -0500
Subject: [Twisted-Python] Twisted Performance
In-Reply-To: <D9EA4D8F-B3CA-486A-86D0-5FB392A95294@twistedmatrix.com>
References: <3db160680910131944w7f101c1fhfd29dad00eb4dfe0@mail.gmail.com>
	<cedc0c090910140155l4bfd70eek364dca61c9ea2f44@mail.gmail.com>
	<80F2A1FE-BE1F-404F-BD29-21BA0B7B4D16@integrateddevcorp.com>
	<4AD67B2D.3050500@krondo.com>
	<4EBDD6C1-53B5-4CA9-AD44-205F5E101264@integrateddevcorp.com>
	<3db160680910241247q6825dca0j6dd7e4d0877bea13@mail.gmail.com>
	<D9EA4D8F-B3CA-486A-86D0-5FB392A95294@twistedmatrix.com>
Message-ID: <3db160680910250817l763e0c83hc505cb5776297238@mail.gmail.com>

Sure, I am not really finished with it yet. When I do get done I will do a
write up.


Dan

On Sun, Oct 25, 2009 at 12:15 AM, Glyph Lefkowitz
<glyph at twistedmatrix.com>wrote:

> On Oct 24, 2009, at 3:47 PM, Daniel Griffin wrote:
>
> > I ported my thread based socket code to twisted and have been happy
> > with my results. (...)
> > Basically its a huge win on every level.
> >
> > Thanks for all the help everyone.
>
> Glad to hear it!  Do you want to write up something more specific for
> the SuccessStories page?
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091025/9fb9c7b6/attachment.htm 

From exarkun at twistedmatrix.com  Sun Oct 25 12:47:32 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 25 Oct 2009 16:47:32 -0000
Subject: [Twisted-Python] Handeling unresolved DNS queries?
In-Reply-To: <e78558910910241304j476d00c1k47a81ff9e00036d2@mail.gmail.com>
References: <e78558910910201250n270d329di7678454ad9d231b9@mail.gmail.com>
	<20091022135516.11571.1780136361.divmod.xquotient.1414@localhost.localdomain>
	<e78558910910220746hb112a81r292185addfd82dc2@mail.gmail.com>
	<20091022173150.11571.1534618114.divmod.xquotient.1432@localhost.localdomain>
	<e78558910910221200vc1b0229g5fae565c9c4e5fcd@mail.gmail.com>
	<20091022203806.11571.909308342.divmod.xquotient.1441@localhost.localdomain>
	<e78558910910221355h7f0f3233h4545302fef1adc7f@mail.gmail.com>
	<20091022231855.11571.1506567463.divmod.xquotient.1460@localhost.localdomain>
	<e78558910910241304j476d00c1k47a81ff9e00036d2@mail.gmail.com>
Message-ID: <20091025164732.11571.925103503.divmod.xquotient.1560@localhost.localdomain>

On 24 Oct, 08:04 pm, jesper at taxboel.dk wrote:
>Im looking at the common.py and I feel a bit confused about how to wrap 
>a
>resolver.
>
>Would'nt a subclass achieve the same thing. I would only need to 
>implement
>the changed functions in the subclass.
>
>I guess my problem is that I dont exactly know how to write a wrapper 
>in
>python.

There's nothing special to it.  Just do the obvious thing:

    class SomeWrapper:
        def __init__(self, wrapee):
            self.wrapee = wrapee

        def someMethod(self, args):
            do something with self.wrapee.someMethod and args

common.py will show you all the methods that a resolver is expected to 
have.  Subclassing ResolverBase might help, though it's unfortunate that 
it works by demultiplexing everything to "_lookup", a private method 
that Twisted's compatibility policy doesn't guarantee will continue to 
operate as it presently does.

Wrapping (ie "containment" or "has-a") is just an alternative 
implementation strategy to subclassing (ie "inheritance" or "is-a"). 
Generally it's a better approach for various reasons, none of which are 
really specific to Twisted.

Jean-Paul


From leyssw at ihug.co.nz  Mon Oct 26 02:49:52 2009
From: leyssw at ihug.co.nz (Tom Leys)
Date: Mon, 26 Oct 2009 19:49:52 +1300
Subject: [Twisted-Python] Gridspy - a new project using Twisted
Message-ID: <4AE54690.9030907@ihug.co.nz>

Hi Everyone

I would like to introduce my project for the 
http://twistedmatrix.com/trac/wiki/ProjectsUsingTwisted page. We use 
twisted as the central server that talks to many power measurement 
sensors in the field.

"
Gridspy provides you with an interactive view of resource usage in your 
building. It gives you hard data on your consumption patterns and helps 
you to make informed decisions.
...
The Gridspy allows you to access and monitor your consumption patterns 
in real-time using a standard web browser on your PC, laptop or mobile 
phone. The data is presented in high resolution and updated each second 
as you watch. The moment a light is turned on in your house, you can see 
the change on your Gridspy dashboard from across the room or across the 
planet.
"
Our homepage is here http://www.gridspy.co.nz/
a running demo is here http://your.gridspy.co.nz/powertech

And you can read more about the role of our twisted backend here: 
http://blog.gridspy.co.nz/2009/10/realtime-data-from-sensors-to-browsers.html

"
... The nexus then collects those sensor samples from the nearby 
Gridspies, bundles it up with its own data and uploads it to our central 
servers. To collect the data we use a custom application written using 
the excellent Twisted framework <http://twistedmatrix.com/>. Every 
single reading gets instant attention: it is evaluated for real-time 
events, queued to be stored in the database and finally forwarded to 
watching dashboard users. Processing the data stream live on the server 
opens up many exciting possible features that I look forward to 
discussing in future blog posts. By the time that the sample reaches the 
server, it is about 0.2 seconds old. ...
"

It has been a great framework to work with. My sincere thanks goes to 
everyone who has ever contributed to this project. Job very well done!

-Tom

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091026/cabfb146/attachment.htm 

From maarten at treewalker.org  Mon Oct 26 04:14:30 2009
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Mon, 26 Oct 2009 10:14:30 +0200
Subject: [Twisted-Python] Gridspy - a new project using Twisted
In-Reply-To: <4AE54690.9030907@ihug.co.nz>
References: <4AE54690.9030907@ihug.co.nz>
Message-ID: <200910260914.30601.maarten@treewalker.org>

On Monday 26 October 2009, Tom Leys wrote:

> Gridspy provides you with an interactive view of resource usage in your
> building. It gives you hard data on your consumption patterns and helps
> you to make informed decisions.

How can other people get their own Gridspy? Do you plan to release it as a 
do-it-yourself project or as a commercial product?

Bye,
		Maarten


From leyssw at ihug.co.nz  Mon Oct 26 15:48:27 2009
From: leyssw at ihug.co.nz (leyssw at ihug.co.nz)
Date: Tue, 27 Oct 2009 08:48:27 +1300
Subject: [Twisted-Python] Gridspy - a new project using Twisted
In-Reply-To: <mailman.1.1256572802.8027.twisted-python@twistedmatrix.com>
References: <mailman.1.1256572802.8027.twisted-python@twistedmatrix.com>
Message-ID: <db2bd63e8e0c97dfe4e73744a5872375@vodafone.co.nz>

Hi Maarten

The Gridspy is a commercial product. At the moment we are manufacturing
small runs of prototypes for development and testing, soon they will be
available from our site on-line.

We are making it "hacker friendly" and it has spare serial ports, digital
and analogue inputs so electronics enthusiasts can make their own daughter
boards. We hope it will then become a great way to take your inventions
on-line. 

We consider our "secret sauce" to be the core hardware and the uplink to
the web (including the twisted portion). Everything else on both ends will
be open (still development efforts needed on SDK and documentation). You
will be able to create an electronics gadget that sets the Gridspy / Nexus
analogue and digital inputs and see those inputs changing in some script
you wrote on the web via an RPC mechanism from our server. 

Right now our focus is on selling to commercial users here in Auckland, New
Zealand (keep it local) to test the hardware. As production scales up, the
pricing will become much more affordable for us normal people. 

Making our platform open and easy to work with is a cause close to my heart
too.

-Tom


> Message: 3
> Date: Mon, 26 Oct 2009 10:14:30 +0200
> From: Maarten ter Huurne <maarten at treewalker.org>
> Subject: Re: [Twisted-Python] Gridspy - a new project using Twisted
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Message-ID: <200910260914.30601.maarten at treewalker.org>
> Content-Type: Text/Plain;  charset="iso-8859-15"
> 
> On Monday 26 October 2009, Tom Leys wrote:
> 
>> Gridspy provides you with an interactive view of resource usage in your
>> building. It gives you hard data on your consumption patterns and helps
>> you to make informed decisions.
> 
> How can other people get their own Gridspy? Do you plan to release it as
a 
> do-it-yourself project or as a commercial product?
> 
> Bye,
> 		Maarten
> 
> 
> 
> ------------------------------
> 


From kevin.horn at gmail.com  Mon Oct 26 17:11:50 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 26 Oct 2009 16:11:50 -0500
Subject: [Twisted-Python] getting #2015 (Generic SASL library) moving
	again?
In-Reply-To: <562bcc10910051149h29cce9f0j6cca093016da99b2@mail.gmail.com>
References: <562bcc10910050934x18e7781dl5e40f4a61edda4e0@mail.gmail.com>
	<d9047f780910051132w78b29ca3n7a7d1e9c81fd97e6@mail.gmail.com>
	<562bcc10910051149h29cce9f0j6cca093016da99b2@mail.gmail.com>
Message-ID: <562bcc10910261411n2e8256d9q69f5a3b773a47170@mail.gmail.com>

On Mon, Oct 5, 2009 at 1:49 PM, Kevin Horn <kevin.horn at gmail.com> wrote:

> On Mon, Oct 5, 2009 at 1:32 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:
>
>> On Mon, Oct 5, 2009 at 12:34 PM, Kevin Horn <kevin.horn at gmail.com> wrote:
>>
>>> I'd like to see this ticket get moving again.
>>
>>
>> Excellent!
>>
>>
>>> I've gone over what's been done so far (and put my comments in the
>>> ticket), and it looks like everything is at least mostly ready to be merged
>>> into the Twisted trunk.
>>>
>>
>> Your analysis on the ticket looks fairly thorough.
>>
>
> Thanks!  Though, really I just went over the changesets that therve
> submitted, and checked them against exarkun's suggestions.
>
>
>>
>>
>>> So what else needs to be done to get this to happen?  I'm happy to try
>>> and get it done, but a little direction would be really handy. ;)
>>>
>>
>> The workflow is pretty simple.
>>
>>    1. author submits change
>>    2. reviewer reviews change
>>    3. someone responds to feedback
>>    4. "someone" becomes "author", repeat
>>
>> Right now we're stuck in the middle of step 3, but given that therve does
>> not appear to be actively working on this branch, the path forward is
>> clear.  *You* become "someone", and submit a patch that finishes dealing
>> with the issues that you have mentioned as not already taken care of by
>> therve's subsequent changesets.  The best way to do this is to submit a
>> patch against the branch, rather than against trunk.  Given such a patch, a
>> twisted committer can then apply the patch to the branch and submit to
>> buildbots (etc) as appropriate.  By submitting it against the branch, you
>> make it easy for the reviewer to examine the changes you're submitting in
>> isolation from the rest of the larger change, to see if they address the
>> points that you've brought up.
>>
>> If the reviewer is happy with your changes, then the patch + branch will
>> be immediately merged to trunk; of course, the next review might have a
>> little more feedback for you to deal with ;).
>>
>> Thanks for your interest!
>>
>>
> That's kind of what I figured.
>
> From my previous review of the current status, it looks pretty well done to
> me, but  I'll start taking a look at it in more detail, and see what I can
> come up with.  Might need some more tests, etc.
>
> Kevin "Someone" Horn
>

FYI, this ticket back up for review...

Kevin Horn

>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091026/dafbdfe4/attachment.htm 

From glyph at twistedmatrix.com  Mon Oct 26 17:24:43 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 26 Oct 2009 17:24:43 -0400
Subject: [Twisted-Python] getting #2015 (Generic SASL library) moving
	again?
In-Reply-To: <562bcc10910261411n2e8256d9q69f5a3b773a47170@mail.gmail.com>
References: <562bcc10910050934x18e7781dl5e40f4a61edda4e0@mail.gmail.com>
	<d9047f780910051132w78b29ca3n7a7d1e9c81fd97e6@mail.gmail.com>
	<562bcc10910051149h29cce9f0j6cca093016da99b2@mail.gmail.com>
	<562bcc10910261411n2e8256d9q69f5a3b773a47170@mail.gmail.com>
Message-ID: <3BFE7682-36B1-43C6-A1ED-F5707C734306@twistedmatrix.com>

On Oct 26, 2009, at 5:11 PM, Kevin Horn wrote:

> FYI, this ticket back up for review...

Thanks!

Sorry about the review backlog; the core committers have all been  
pretty busy lately.  I'll try to get to this soon.



From jesper at taxboel.dk  Mon Oct 26 17:34:50 2009
From: jesper at taxboel.dk (=?ISO-8859-1?Q?Jesper_Taxb=F8l?=)
Date: Mon, 26 Oct 2009 22:34:50 +0100
Subject: [Twisted-Python] Handeling unresolved DNS queries?
In-Reply-To: <20091025164732.11571.925103503.divmod.xquotient.1560@localhost.localdomain>
References: <e78558910910201250n270d329di7678454ad9d231b9@mail.gmail.com>
	<20091022135516.11571.1780136361.divmod.xquotient.1414@localhost.localdomain>
	<e78558910910220746hb112a81r292185addfd82dc2@mail.gmail.com>
	<20091022173150.11571.1534618114.divmod.xquotient.1432@localhost.localdomain>
	<e78558910910221200vc1b0229g5fae565c9c4e5fcd@mail.gmail.com>
	<20091022203806.11571.909308342.divmod.xquotient.1441@localhost.localdomain>
	<e78558910910221355h7f0f3233h4545302fef1adc7f@mail.gmail.com>
	<20091022231855.11571.1506567463.divmod.xquotient.1460@localhost.localdomain>
	<e78558910910241304j476d00c1k47a81ff9e00036d2@mail.gmail.com>
	<20091025164732.11571.925103503.divmod.xquotient.1560@localhost.localdomain>
Message-ID: <e78558910910261434t6b9834b8m40a6b653cb55b98@mail.gmail.com>

First of all. Thanx for the help!!! The internet is just fantastic!!

I like the wrapper approach.

I had not thought of that approach myself. Sounds very reasonable. -So I
started wrapping Resolver, but got stuck pretty fast. I get a problem saying
that

'NoneType' object has no attribute 'addCallback'

"addCallback" seems to be implemented in defer.py, but im unsure on how to
handle that in the wrapper?

Kind regards

/Tax

P.S:
As a side question: In my old hack approach, which I have had almost
working, I have had problems constructing valid DNS answers. Wold you happen
to know what requirements there is to the returning package, to be accepted.

I made some attempts by using pickle to capture live packages, but have a
hard time tweaking other values than the address. Ideally I would like to
pass on a very short TTL, so the client would not be bothered by fake DNS
when I turn the system off.

As you might have guessed, Im building a gateway system for a small set of
apartments. Requirements are:

invalid domains should go to a shop
valid domains should be redirected to the shop if the client have not paid,
except if the query is for paypal.





2009/10/25 <exarkun at twistedmatrix.com>

> On 24 Oct, 08:04 pm, jesper at taxboel.dk wrote:
> >Im looking at the common.py and I feel a bit confused about how to wrap
> >a
> >resolver.
> >
> >Would'nt a subclass achieve the same thing. I would only need to
> >implement
> >the changed functions in the subclass.
> >
> >I guess my problem is that I dont exactly know how to write a wrapper
> >in
> >python.
>
> There's nothing special to it.  Just do the obvious thing:
>
>    class SomeWrapper:
>        def __init__(self, wrapee):
>            self.wrapee = wrapee
>
>        def someMethod(self, args):
>            do something with self.wrapee.someMethod and args
>
> common.py will show you all the methods that a resolver is expected to
> have.  Subclassing ResolverBase might help, though it's unfortunate that
> it works by demultiplexing everything to "_lookup", a private method
> that Twisted's compatibility policy doesn't guarantee will continue to
> operate as it presently does.
>
> Wrapping (ie "containment" or "has-a") is just an alternative
> implementation strategy to subclassing (ie "inheritance" or "is-a").
> Generally it's a better approach for various reasons, none of which are
> really specific to Twisted.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091026/a61330d8/attachment.htm 

From namanvit at gmail.com  Tue Oct 27 01:44:54 2009
From: namanvit at gmail.com (naman jain)
Date: Tue, 27 Oct 2009 06:44:54 +0100
Subject: [Twisted-Python] Regarding Twisted Matrix
Message-ID: <74b1256b0910262244x24bebeadxa3154556496e69a3@mail.gmail.com>

Hi,

I have a client server model in twisted, where the server spawns a thread (
basically a test script in python that runs for about 20 mins)
I want to track the progress of the thread, and send the progress to the
client back

So, I write something like this in my server:

parent_conn, child_conn = Pipe()
thread = Process(target = start_test.main_func, args=(SCRIPT_PATH,
TEMP_OUTPUT_PATH, self.output_name, child_conn))
thread.start()

response = parent_conn.recv()
print response //prints like: initialization done
self.transport.write(response)


response = parent_conn.recv()
print response // configuration done
self.transport.write(response)

.
.
.

thread.join()


But the transport.write calls don't send at the same time. instead they wait
for the thread to finish (coz of thread.join) and then append all the
response and send it back; like "initialization doneconfiguration
done...done"
thereby defeating the purpose of creating a thread.

How do I give the control to the reactor to write the data back, and still
keep the thread running?
or is there any other way these kinda of progress can be tracked ?
I am kinda stuck with this :(
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091027/39bd7a94/attachment.htm 

From nathan.stocks at gmail.com  Tue Oct 27 02:03:20 2009
From: nathan.stocks at gmail.com (Nathan)
Date: Tue, 27 Oct 2009 00:03:20 -0600
Subject: [Twisted-Python] Regarding Twisted Matrix
In-Reply-To: <74b1256b0910262244x24bebeadxa3154556496e69a3@mail.gmail.com>
References: <74b1256b0910262244x24bebeadxa3154556496e69a3@mail.gmail.com>
Message-ID: <96c9d6a80910262303t37028d1fwd578e73926154f03@mail.gmail.com>

On Mon, Oct 26, 2009 at 11:44 PM, naman jain <namanvit at gmail.com> wrote:
> Hi,
>
> I have a client server model in twisted, where the server spawns a thread (
> basically a test script in python that runs for about 20 mins)
> I want to track the progress of the thread, and send the progress to the
> client back
>
> So, I write something like this in my server:
>
> parent_conn, child_conn = Pipe()
> thread = Process(target = start_test.main_func, args=(SCRIPT_PATH,
> TEMP_OUTPUT_PATH, self.output_name, child_conn))
> thread.start()
>
> response = parent_conn.recv()
> print response //prints like: initialization done
> self.transport.write(response)
>
>
> response = parent_conn.recv()
> print response // configuration done
> self.transport.write(response)
>
> .
> .
> .
>
> thread.join()
>
>
> But the transport.write calls don't send at the same time. instead they wait
> for the thread to finish (coz of thread.join) and then append all the
> response and send it back; like "initialization doneconfiguration
> done...done"
> thereby defeating the purpose of creating a thread.
>
> How do I give the control to the reactor to write the data back, and still
> keep the thread running?
> or is there any other way these kinda of progress can be tracked ?
> I am kinda stuck with this :(

I'm no expert with threads, but I don't see any deferToThread in
there, which is what people on this list tend to mention whenever
threading comes up.  Perhaps you need to switch to the "twisted way"
to create your thread?

http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.threads.html

~ Nathan


From clemesha at gmail.com  Tue Oct 27 03:36:11 2009
From: clemesha at gmail.com (Alex Clemesha)
Date: Tue, 27 Oct 2009 00:36:11 -0700
Subject: [Twisted-Python] Can I post a consultant request here?
In-Reply-To: <EF928A00-AFA0-4529-AFC0-DDF1F26B2CF4@integrateddevcorp.com>
References: <EF928A00-AFA0-4529-AFC0-DDF1F26B2CF4@integrateddevcorp.com>
Message-ID: <d272f0690910270036v35845f4dna64d32591e9d0a18@mail.gmail.com>

Hi Steve,

> ? ? ? ?I'm looking for a very short-term mentoring/consulting contract to
> help me get an Ajax/Comet type of connection working between a web
> interface and a fairly long-running, server-side process.
>
> ? ? ? ?I want the web interface to reflect the server-side data as it
> becomes available.
>
> ? ? ? ?I'm sure someone on this list knows exactly how to hook the pieces
> together; I don't.
>
> ? ? ? ?It would be much more efficient to have someone who already knows
> help me hook it up instead of spending an unpredictable amount of time
> figuring it out myself.
>
> ? ? ? ?I'd also like to have, as a primary product of this project, a
> tutorial showing a real-world application of Twisted to handle a
> modern, real-world use-case with full, open, well documented source
> code.

I wanted to mention a project that I've been hacking that I think fits
the bill of what you are looking for.  Here is my current description of
what it is: " A very complete example of how to a create a realtime
web application using Django + Orbited + Twisted."

Currently the code is a glorified example (it nearly could be called a
'complete app')
and that is: "Realtime Voting Both - Realtime Voting, Chatting, and
Editing Polls."

The code is here:
http://github.com/clemesha/hotdot

and it is basically a "larger, more complete example" than the one I
did some months
ago, described here (you (Steve) have made a couple very helpful
comments there so I
know that you know of it's existence):
http://clemesha.org/blog/2009/apr/23/Django-on-Twisted-using-latest-twisted-web-wsgi/


So, in the spirit of "release early and iterate", I invite you to go
play with it: http://github.com/clemesha/hotdot
It has some really cool parts (Django running from twisted.web.wsgi,
Orbited as a Twisted Service, authentication
using Twisted Cred+Django models, filtering/modification/logging of
in-transit Orbited messages, etc) but it is
also 'not done' and has some remaining 'crufty parts' (which others
might have great ideas on how to improve on :-).
I plan to continue to improve on it, and fairly soon I'll do a formal
write-up/blog-post on the whole thing, but for
now any feedback is appreciated.


-Alex



>
> ? ? ? ?If you're interested, please contact me off-list at
> ssteinerx at gmail.com.
>
> Thanks,
>
> S


-- 
Alex Clemesha
clemesha.org


From k.kelly.gordon at gmail.com  Tue Oct 27 04:35:06 2009
From: k.kelly.gordon at gmail.com (Kelly)
Date: Tue, 27 Oct 2009 19:35:06 +1100
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <6EE454CA-F803-4C6B-BE67-23B2078087B9@twistedmatrix.com>
References: <40b76abc0910240739w4c23108aoe5e7e933dda1ac83@mail.gmail.com>
	<20091024145011.11571.1125183848.divmod.xquotient.1491@localhost.localdomain>
	<6EE454CA-F803-4C6B-BE67-23B2078087B9@twistedmatrix.com>
Message-ID: <40b76abc0910270135g48380e45u1bc8117e9dcb9403@mail.gmail.com>

On Sun, Oct 25, 2009 at 4:38 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> On Oct 24, 2009, at 10:50 AM, exarkun at twistedmatrix.com wrote:
>>
>> I think that we should consider requests to make specific classes new-
>> style (and grant them when doing so won't cause compatibility problems),
>> make all new classes new-style, but otherwise leave this alone until 3.x
>> is widely adopted.
>
> While your argument makes sense to me, there's a fundamental problem with
> the way Python introduced new-style classes that creates an ongoing
> maintenance tension. ?I think we should start addressing the problem
> incrementally now (especially since it sounded like Kelly was volunteering
> for some work!) rather than put it off for one big chunk when we do a 3k
> migration.

Well yes I am.  I am hoping that the discussion will get to a point
where I understand what an acceptable solution might be, even if that
should be like exarkun said "leave it alone/migrate classes one at a
time".

>
> I would really like a more abstract declaration that applications can use in
> the meanwhile, to get new-style semantics but still allow inheritable
> classes to evolve.
>


As noted by James, users of the Twisted library can add object to the
end of their inheritance chain to get new style semantics for their
classes.  I was thinking more along the lines of being able to use
new-style stuff inside the Twisted library.


From k.kelly.gordon at gmail.com  Tue Oct 27 04:35:22 2009
From: k.kelly.gordon at gmail.com (Kelly)
Date: Tue, 27 Oct 2009 19:35:22 +1100
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <4FE7148D-78E9-48E8-B1D6-0B76B05D31D5@twistedmatrix.com>
References: <40b76abc0910240739w4c23108aoe5e7e933dda1ac83@mail.gmail.com>
	<20091024145011.11571.1125183848.divmod.xquotient.1491@localhost.localdomain>
	<6EE454CA-F803-4C6B-BE67-23B2078087B9@twistedmatrix.com>
	<E486FA77-BDA0-4ADF-90E9-9E1D8E4E5273@fuhm.net>
	<4FE7148D-78E9-48E8-B1D6-0B76B05D31D5@twistedmatrix.com>
Message-ID: <40b76abc0910270135h26cb1251ja1effe255fed8460@mail.gmail.com>

On Sun, Oct 25, 2009 at 5:32 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> On Oct 25, 2009, at 1:50 AM, James Y Knight wrote:
>
>> On Oct 25, 2009, at 1:38 AM, Glyph Lefkowitz wrote:
>>> # in your application
>>> class Application(object, Library): pass
>>
>> Maybe the answer "why not" is obvious and I should already know it, but
>> wouldn't it be more obvious to write:
>> class Application(Library, object): pass
>> instead. That at least has the advantage of not blowing up if Library later
>> becomes newstyle, right?
>
> Huh. ?You may have just pointed out that I misunderstand the algorithm used
> to generate that error. ?I thought that certain other hierarchies in cases
> more complex than the trivial one I presented would also give you that error
> if something became new-style in the middle, but I can't seem to generate
> any hierarchies that cause a problem. ?Is it really this simple? ?Always put
> 'object' at the *end* of your bases-list to declare the intention "I want to
> be new-style" and you'll be OK? ?(If so, why is that?)


From k.kelly.gordon at gmail.com  Tue Oct 27 04:38:02 2009
From: k.kelly.gordon at gmail.com (Kelly)
Date: Tue, 27 Oct 2009 19:38:02 +1100
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <20091024145011.11571.1125183848.divmod.xquotient.1491@localhost.localdomain>
References: <40b76abc0910240739w4c23108aoe5e7e933dda1ac83@mail.gmail.com>
	<20091024145011.11571.1125183848.divmod.xquotient.1491@localhost.localdomain>
Message-ID: <40b76abc0910270138p711d33ddjf55c76e23673d74b@mail.gmail.com>

On Sun, Oct 25, 2009 at 1:50 AM,  <exarkun at twistedmatrix.com> wrote:
> On 02:39 pm, k.kelly.gordon at gmail.com wrote:
>> On Thu Oct 8 20:08:12 EDT 2009, Glyph Lefkowitz
>> <glyph at twistedmatrix.com> wrote:
>>> If old-style classes can be evolved into new-style classes while
>>> somehow following this policy, that would be great.


>> I have some POC code for this.  It provides a simple toggle at the
>> start of the application to select between old style (the default)
>> and new style classes.  After that, a DeprecationWarning is issued
>> every time an old style class is defined.


> Process-wide switches are tricky.  Some code may decide it wants
> new-style, while other code wants to stick with classic.  They have
> a fight, one of them loses.  I think that adding this is just an
> invitation for people to create more problems.


I guess that would be a problem if an application used two libraries
that use Twisted and each initialised Twisted differently.  However, I
was thinking this would be something that should only be called by
the application (ie the thing with #! at the top)

Roughly speaking - in the Twisted library:

    from twisted.object import ClassStyle

    class MustBeOldStyle(ClassStyle.old): pass

    class DoesntMatter(ClassStyle.default): pass


In the application's top level file:

    #!/usr/bin/env python

    from twisted.object import ClassStyle

    ClassStyle.use_old_style()
    # or
    ClassStyle.use_new_style()


Which would have the effect flipping ClassStyle.default between old
and new style.  Once set it can't be changed which is why it needs to
be done before any Twisted classes are defined.

>
> I think that we should consider requests to make specific classes
> new-style (and grant them when doing so won't cause compatibility
> problems), make all new classes new-style, but otherwise leave
> this alone until 3.x is widely adopted.
>
> Jean-Paul


How could that be done in a way that was consistent with the
deprecation policy?  ie how could a warning be issued: "this class
will be new style in a couple of releases", such that the developer
could "fix" their code to remove the warning?

Changing from old-style to new-style changes a number of class
behaviours (notably: mro, __coerce__, assignment to Class.__dict__
and Class.__bases__), so its not really something that can be done
silently to any class that might be inherited from.

Presumably there will be a period when Twisted works on both 2.x and
3.x.  At that point there will be two sets of users,  the 3.x's that
use only new-style classes and the 2.x's for which Twisted classes
may be either old or new.  It would probably be better to have
switched to new-style before then and only have to support the use
of new style classes.


From don at delphexonline.com  Tue Oct 27 06:14:52 2009
From: don at delphexonline.com (Don Schoeman)
Date: Tue, 27 Oct 2009 12:14:52 +0200
Subject: [Twisted-Python] You guys are my heroes
Message-ID: <4AE6C81C.1050106@delphexonline.com>

Just as the subject says... you guys (everyone involved with TM) are my
heroes.

Problem:
I needed to develop a TCP server that could serve multiple GPS tracking
devices over GPRS. These devices uses a multi-level (structures within
structures) style binary protocol. I looked at various possible
solutions which handled the complex asynchronous processing while I
could concentrate on implementing the protocol. Time was of the essence
(as it always is).

Solution:
I finally ran into Twisted Matrix and it immediately looked very
promising. Only problem was that I didn't know Python at the time and
looking at it for the first time I couldn't make heads or tails out of
it. (I come from a Delphi background but knows a bit of C, PHP and Java
as well). Anyway, after about a week of straining the old brain I not
only managed to learn the basics of Python, but wrote my first concept
server in TM and through it all learned to come to love both of these
solutions very much!

Final Verdict:
About a month down the line my now completed server is running as smooth
as butter handling an ever growing number of unit's just lovely. The
data, once parsed is all pushed to a Apache/PHP based server via XML-RPC
which in turn performs all the database related stuff. Thanks for all
your hard work guys, it is noticed and deeply, deeply appreciated!

Kind Regards,
Don Schoeman





From namanvit at gmail.com  Tue Oct 27 06:35:49 2009
From: namanvit at gmail.com (naman jain)
Date: Tue, 27 Oct 2009 11:35:49 +0100
Subject: [Twisted-Python] Regarding Twisted Matrix
In-Reply-To: <96c9d6a80910262303t37028d1fwd578e73926154f03@mail.gmail.com>
References: <74b1256b0910262244x24bebeadxa3154556496e69a3@mail.gmail.com>
	<96c9d6a80910262303t37028d1fwd578e73926154f03@mail.gmail.com>
Message-ID: <74b1256b0910270335w4eed529ey74b99997fa3dcafe@mail.gmail.com>

I tried to implement this:

parent_conn, child_conn = Pipe()

f = defer.Deferred()
f = threads.deferToThread(start_test.main_func, SCRIPT_PATH,
TEMP_OUTPUT_PATH, self.output_name, child_conn)

response = parent_conn.recv()
print response //prints like: initialization done
self.transport.write(response)

response = parent_conn.recv()
print response // configuration done
self.transport.write(response)

But get the same output ie all status messages concatenated and sent at
once.!

[Do we need to put some deffered/callback  mechanism on parent_conn.recv()
??
as that is the call blocking the thread waiting for reading.]

Any ideas ? How is such stuff done in twisted servers??

Naman


On Tue, Oct 27, 2009 at 7:03 AM, Nathan <nathan.stocks at gmail.com> wrote:

> On Mon, Oct 26, 2009 at 11:44 PM, naman jain <namanvit at gmail.com> wrote:
> > Hi,
> >
> > I have a client server model in twisted, where the server spawns a thread
> (
> > basically a test script in python that runs for about 20 mins)
> > I want to track the progress of the thread, and send the progress to the
> > client back
> >
> > So, I write something like this in my server:
> >
> > parent_conn, child_conn = Pipe()
> > thread = Process(target = start_test.main_func, args=(SCRIPT_PATH,
> > TEMP_OUTPUT_PATH, self.output_name, child_conn))
> > thread.start()
> >
> > response = parent_conn.recv()
> > print response //prints like: initialization done
> > self.transport.write(response)
> >
> >
> > response = parent_conn.recv()
> > print response // configuration done
> > self.transport.write(response)
> >
> > .
> > .
> > .
> >
> > thread.join()
> >
> >
> > But the transport.write calls don't send at the same time. instead they
> wait
> > for the thread to finish (coz of thread.join) and then append all the
> > response and send it back; like "initialization doneconfiguration
> > done...done"
> > thereby defeating the purpose of creating a thread.
> >
> > How do I give the control to the reactor to write the data back, and
> still
> > keep the thread running?
> > or is there any other way these kinda of progress can be tracked ?
> > I am kinda stuck with this :(
>
> I'm no expert with threads, but I don't see any deferToThread in
> there, which is what people on this list tend to mention whenever
> threading comes up.  Perhaps you need to switch to the "twisted way"
> to create your thread?
>
> http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.threads.html
>
> ~ Nathan
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091027/4fa18fef/attachment.htm 

From rlotun at gmail.com  Tue Oct 27 07:57:11 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Tue, 27 Oct 2009 12:57:11 +0100
Subject: [Twisted-Python] Regarding Twisted Matrix
In-Reply-To: <74b1256b0910270335w4eed529ey74b99997fa3dcafe@mail.gmail.com>
References: <74b1256b0910262244x24bebeadxa3154556496e69a3@mail.gmail.com>
	<96c9d6a80910262303t37028d1fwd578e73926154f03@mail.gmail.com>
	<74b1256b0910270335w4eed529ey74b99997fa3dcafe@mail.gmail.com>
Message-ID: <95bb10690910270457h3a8e3250ref53977077627c84@mail.gmail.com>

Hi Naman,

> I tried to implement this:
>
> parent_conn, child_conn = Pipe()
>
> f = defer.Deferred()
> f = threads.deferToThread(start_test.main_func, SCRIPT_PATH,
> TEMP_OUTPUT_PATH, self.output_name, child_conn)

Do you really want to spawn a thread or a process? Since it seems like
you're trying to run a python script, you'd want to spawn a process
(since it also looks like you want to use a pipe for communication
with that process). Twisted has support for spawning processes - see
reactor.spawnProcess and ProcessProtocol:
http://twistedmatrix.com/projects/core/documentation/howto/process.html#auto2

Cheers,
Reza

-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   reza at tweetdeck.com
twitter: @rlotun


From exarkun at twistedmatrix.com  Tue Oct 27 08:17:02 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 27 Oct 2009 12:17:02 -0000
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <40b76abc0910270138p711d33ddjf55c76e23673d74b@mail.gmail.com>
References: <40b76abc0910240739w4c23108aoe5e7e933dda1ac83@mail.gmail.com>
	<20091024145011.11571.1125183848.divmod.xquotient.1491@localhost.localdomain>
	<40b76abc0910270138p711d33ddjf55c76e23673d74b@mail.gmail.com>
Message-ID: <20091027121702.31526.1705363637.divmod.xquotient.120@localhost.localdomain>

On 08:38 am, k.kelly.gordon at gmail.com wrote:
>On Sun, Oct 25, 2009 at 1:50 AM,  <exarkun at twistedmatrix.com> wrote:
>>On 02:39 pm, k.kelly.gordon at gmail.com wrote:
>>>On Thu Oct 8 20:08:12 EDT 2009, Glyph Lefkowitz
>>><glyph at twistedmatrix.com> wrote:
>>>>If old-style classes can be evolved into new-style classes while
>>>>somehow following this policy, that would be great.
>
>>>I have some POC code for this.  It provides a simple toggle at the
>>>start of the application to select between old style (the default)
>>>and new style classes.  After that, a DeprecationWarning is issued
>>>every time an old style class is defined.
>
>>Process-wide switches are tricky.  Some code may decide it wants
>>new-style, while other code wants to stick with classic.  They have
>>a fight, one of them loses.  I think that adding this is just an
>>invitation for people to create more problems.
>
>
>I guess that would be a problem if an application used two libraries
>that use Twisted and each initialised Twisted differently.  However, I
>was thinking this would be something that should only be called by
>the application (ie the thing with #! at the top)
>
>Roughly speaking - in the Twisted library:
>
>    from twisted.object import ClassStyle
>
>    class MustBeOldStyle(ClassStyle.old): pass
>
>    class DoesntMatter(ClassStyle.default): pass
>
>
>In the application's top level file:
>
>    #!/usr/bin/env python
>
>    from twisted.object import ClassStyle
>
>    ClassStyle.use_old_style()
>    # or
>    ClassStyle.use_new_style()
>
>
>Which would have the effect flipping ClassStyle.default between old
>and new style.  Once set it can't be changed which is why it needs to
>be done before any Twisted classes are defined.
>>
>>I think that we should consider requests to make specific classes
>>new-style (and grant them when doing so won't cause compatibility
>>problems), make all new classes new-style, but otherwise leave
>>this alone until 3.x is widely adopted.
>>
>>Jean-Paul
>
>
>How could that be done in a way that was consistent with the
>deprecation policy?  ie how could a warning be issued: "this class
>will be new style in a couple of releases", such that the developer
>could "fix" their code to remove the warning?
>
>Changing from old-style to new-style changes a number of class
>behaviours (notably: mro, __coerce__, assignment to Class.__dict__
>and Class.__bases__), so its not really something that can be done
>silently to any class that might be inherited from.

Actually, I was thinking that we would only do it to classes that can 
not be inherited from.  For example, no one's really supposed to be 
subclassing Deferred, so we might consider making Deferred new-style 
(perhaps for performance reasons, for example).
>Presumably there will be a period when Twisted works on both 2.x and
>3.x.

I think it is still early to presume this. :)
>At that point there will be two sets of users,  the 3.x's that
>use only new-style classes and the 2.x's for which Twisted classes
>may be either old or new.  It would probably be better to have
>switched to new-style before then and only have to support the use
>of new style classes.

But, presuming this :) I don't think we need to have switched to new- 
style classes for support this scenario.  We only have to have written 
all our code such that it continues to work even when there are no 
longer any classic classes.  I think that the majority of code in 
Twisted already works even if you flip the new-style switch.  We just 
need to identify and fix the few places that don't.
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From listsin at integrateddevcorp.com  Tue Oct 27 10:32:56 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Tue, 27 Oct 2009 10:32:56 -0400
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <20091027121702.31526.1705363637.divmod.xquotient.120@localhost.localdomain>
References: <40b76abc0910240739w4c23108aoe5e7e933dda1ac83@mail.gmail.com>
	<20091024145011.11571.1125183848.divmod.xquotient.1491@localhost.localdomain>
	<40b76abc0910270138p711d33ddjf55c76e23673d74b@mail.gmail.com>
	<20091027121702.31526.1705363637.divmod.xquotient.120@localhost.localdomain>
Message-ID: <DA54C26A-4111-4108-85BB-1D32717D6E71@integrateddevcorp.com>


On Oct 27, 2009, at 8:17 AM, exarkun at twistedmatrix.com wrote:
>> At that point there will be two sets of users,  the 3.x's that
>> use only new-style classes and the 2.x's for which Twisted classes
>> may be either old or new.  It would probably be better to have
>> switched to new-style before then and only have to support the use
>> of new style classes.
>
> But, presuming this :) I don't think we need to have switched to new-
> style classes for support this scenario.  We only have to have written
> all our code such that it continues to work even when there are no
> longer any classic classes.  I think that the majority of code in
> Twisted already works even if you flip the new-style switch.  We just
> need to identify and fix the few places that don't.

Is this something that can be handled by just running the tests with  
the right switch so we can see everything that passes without the  
switch but doesn't with?

Is there a "new-style" switch or just -3?

S



From vpogrebi at verizon.net  Tue Oct 27 10:49:57 2009
From: vpogrebi at verizon.net (Valeriy Pogrebitskiy)
Date: Tue, 27 Oct 2009 10:49:57 -0400
Subject: [Twisted-Python] Regarding Twisted Matrix
In-Reply-To: <74b1256b0910262244x24bebeadxa3154556496e69a3@mail.gmail.com>
Message-ID: <E76556F2CE4A41DAA8F218E2EA68D6F5@valeriy>

Naman,

 

Using threads - is not a good way of testing Twisted code. Instead, you can
implement unit test script (using twisted.trial.unittest) - implementing
test versions of your Twisted server and/or client class(es). This can be
done by extending original class(es) and overwriting appropriate methods
(like connectionMade(), connectionLost(), dataReceived(), etc.) - by adding
deferreds and executing callbacks when given event occurs. These callbacks
would be methods within your unittest script (these deferreds would be
instantiated and added to these classes by the test script) - thus allowing
you to test client's or server's behavior, or track progress

 

Kind regards,

 

Valeriy Pogrebitskiy

Email: vpogrebi at iname.com

 

 

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of naman jain
Sent: Tuesday, October 27, 2009 1:45 AM
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] Regarding Twisted Matrix

 

Hi,

I have a client server model in twisted, where the server spawns a thread (
basically a test script in python that runs for about 20 mins)
I want to track the progress of the thread, and send the progress to the
client back

So, I write something like this in my server:

parent_conn, child_conn = Pipe()
thread = Process(target = start_test.main_func, args=(SCRIPT_PATH,
TEMP_OUTPUT_PATH, self.output_name, child_conn))
thread.start()

response = parent_conn.recv()
print response //prints like: initialization done
self.transport.write(response)
                

response = parent_conn.recv()
print response // configuration done
self.transport.write(response)

.
.
.
                
thread.join()


But the transport.write calls don't send at the same time. instead they wait
for the thread to finish (coz of thread.join) and then append all the
response and send it back; like "initialization doneconfiguration
done...done"
thereby defeating the purpose of creating a thread.

How do I give the control to the reactor to write the data back, and still
keep the thread running?
or is there any other way these kinda of progress can be tracked ?
I am kinda stuck with this :(

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091027/ebc6eede/attachment.htm 

From vpogrebi at verizon.net  Tue Oct 27 11:31:03 2009
From: vpogrebi at verizon.net (Valeriy Pogrebitskiy)
Date: Tue, 27 Oct 2009 11:31:03 -0400
Subject: [Twisted-Python] Regarding Twisted Matrix
In-Reply-To: <74b1256b0910270335w4eed529ey74b99997fa3dcafe@mail.gmail.com>
Message-ID: <E0465CB5C1DD4B0FA4E2C1BC650E85A1@valeriy>

Naman,

 

Another problem you might (possibly) be encountering - is the way your
server and/or client protocol is implemented. If you just inherit from
"plain" twisted.internet.protocol.Protocol - you are automatically using
write () and dataReceived() methods that do not implement buffering (it is
left up to developer). To enforce that line (string) oriented communication
works correctly - you might want to refactor to use
twisted.protocols.basic.LineReceiver instead. 

 

Kind regards,

 

Valeriy Pogrebitskiy

Email: vpogrebi at iname.com

 

 

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of naman jain
Sent: Tuesday, October 27, 2009 6:36 AM
To: Twisted general discussion
Subject: Re: [Twisted-Python] Regarding Twisted Matrix

 

I tried to implement this:

parent_conn, child_conn = Pipe()

f = defer.Deferred()
f = threads.deferToThread(start_test.main_func, SCRIPT_PATH,
TEMP_OUTPUT_PATH, self.output_name, child_conn)

response = parent_conn.recv()
print response //prints like: initialization done
self.transport.write(response)

response = parent_conn.recv()
print response // configuration done
self.transport.write(response)

But get the same output ie all status messages concatenated and sent at
once.!

[Do we need to put some deffered/callback  mechanism on parent_conn.recv()
??
as that is the call blocking the thread waiting for reading.]

Any ideas ? How is such stuff done in twisted servers??

Naman



On Tue, Oct 27, 2009 at 7:03 AM, Nathan <nathan.stocks at gmail.com> wrote:

On Mon, Oct 26, 2009 at 11:44 PM, naman jain <namanvit at gmail.com> wrote:
> Hi,
>
> I have a client server model in twisted, where the server spawns a thread
(
> basically a test script in python that runs for about 20 mins)
> I want to track the progress of the thread, and send the progress to the
> client back
>
> So, I write something like this in my server:
>
> parent_conn, child_conn = Pipe()
> thread = Process(target = start_test.main_func, args=(SCRIPT_PATH,
> TEMP_OUTPUT_PATH, self.output_name, child_conn))
> thread.start()
>
> response = parent_conn.recv()
> print response //prints like: initialization done
> self.transport.write(response)
>
>
> response = parent_conn.recv()
> print response // configuration done
> self.transport.write(response)
>
> .
> .
> .
>
> thread.join()
>
>
> But the transport.write calls don't send at the same time. instead they
wait
> for the thread to finish (coz of thread.join) and then append all the
> response and send it back; like "initialization doneconfiguration
> done...done"
> thereby defeating the purpose of creating a thread.
>
> How do I give the control to the reactor to write the data back, and still
> keep the thread running?
> or is there any other way these kinda of progress can be tracked ?
> I am kinda stuck with this :(

I'm no expert with threads, but I don't see any deferToThread in
there, which is what people on this list tend to mention whenever
threading comes up.  Perhaps you need to switch to the "twisted way"
to create your thread?

http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.threads.html

~ Nathan


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091027/574eaf7a/attachment.htm 

From foom at fuhm.net  Tue Oct 27 11:39:22 2009
From: foom at fuhm.net (James Y Knight)
Date: Tue, 27 Oct 2009 11:39:22 -0400
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <DA54C26A-4111-4108-85BB-1D32717D6E71@integrateddevcorp.com>
References: <40b76abc0910240739w4c23108aoe5e7e933dda1ac83@mail.gmail.com>
	<20091024145011.11571.1125183848.divmod.xquotient.1491@localhost.localdomain>
	<40b76abc0910270138p711d33ddjf55c76e23673d74b@mail.gmail.com>
	<20091027121702.31526.1705363637.divmod.xquotient.120@localhost.localdomain>
	<DA54C26A-4111-4108-85BB-1D32717D6E71@integrateddevcorp.com>
Message-ID: <D2FFDB0A-4D45-4530-B3C8-EAE111B1BD1B@fuhm.net>

On Oct 27, 2009, at 10:32 AM, Steve Steiner (listsin) wrote:
> Is this something that can be handled by just running the tests with
> the right switch so we can see everything that passes without the
> switch but doesn't with?
>
> Is there a "new-style" switch or just -3?


Download:
http://twistedmatrix.com/trac/browser/sandbox/foom/newstyler.py?format=txt

And, before importing anything from twisted, run:
   import newstyler
   newstyler.newstyle_prefix('twisted')

Or (perhaps easier), you could put those statements in your copy of  
twisted/__init__.py before it does anything else.

I haven't run the tests to see what breaks; I'll leave that to you. :)

James



From clemesha at gmail.com  Tue Oct 27 17:11:48 2009
From: clemesha at gmail.com (Alex Clemesha)
Date: Tue, 27 Oct 2009 14:11:48 -0700
Subject: [Twisted-Python] Hotdot
In-Reply-To: <4ae73945.34d.6b08.1310339097@webmaildh6.aruba.it>
References: <4ae73945.34d.6b08.1310339097@webmaildh6.aruba.it>
Message-ID: <d272f0690910271411q27f5f766tb5b5f4287ebee62c@mail.gmail.com>

Run the example *not* as root, then it will work. sys.path is
different for the root user, that is the problem.

-Alex



On Tue, Oct 27, 2009 at 11:17 AM, Alfredo Veltri
<alfredo.veltri at digitalia.it> wrote:
> Hi Alex,
> i'm trying with hotdot.
> i receive the following errors. Would help me about that?
> Thanks in advance.
>
> root at myhome:/var/www/clemesha-hotdot-522849b/djangoweb# cd
> .
>
> root at myhome:/var/www/clemesha-hotdot-522849b# ls
>
> djangoweb ?README.rst ?realtime ?server.py ?static
>
> root at myhome:/var/www/clemesha-hotdot-522849b# twistd -ny
> server.py
>
> Traceback (most recent call last):
> ?File
> "/usr/local/lib/python2.6/dist-packages/Twisted-8.2.0_r27386-py2.6-linux-i686.egg/twisted/application/app.py"
> , line 690, in run
> ? ?runApp(config)
> ?File
> "/usr/local/lib/python2.6/dist-packages/Twisted-8.2.0_r27386-py2.6-linux-i686.egg/twisted/scripts/twistd.py"
> , line 23, in runApp
> ? ?_SomeApplicationRunner(config).run()
> ?File
> "/usr/local/lib/python2.6/dist-packages/Twisted-8.2.0_r27386-py2.6-linux-i686.egg/twisted/application/app.py"
> , line 411, in run
> ? ?self.application = self.createOrGetApplication()
> ?File
> "/usr/local/lib/python2.6/dist-packages/Twisted-8.2.0_r27386-py2.6-linux-i686.egg/twisted/application/app.py"
> , line 494, in createOrGetApplication
> ? ?application = getApplication(self.config, passphrase)
> --- <exception caught here> ---
> ?File
> "/usr/local/lib/python2.6/dist-packages/Twisted-8.2.0_r27386-py2.6-linux-i686.egg/twisted/application/app.py"
> , line 505, in getApplication
> ? ?application = service.loadApplication(filename, style,
> passphrase)
> ?File
> "/usr/local/lib/python2.6/dist-packages/Twisted-8.2.0_r27386-py2.6-linux-i686.egg/twisted/application/service.py"
> , line 390, in loadApplication
> ? ?application = sob.loadValueFromFile(filename,
> 'application', passphrase)
> ?File
> "/usr/local/lib/python2.6/dist-packages/Twisted-8.2.0_r27386-py2.6-linux-i686.egg/twisted/persisted/sob.py"
> , line 210, in loadValueFromFile
> ? ?exec fileObj in d, d
> ?File "server.py", line 25, in <module>
> ? ?from djangoweb.twisted_wsgi import get_root_resource
> exceptions.ImportError: No module named
> djangoweb.twisted_wsgi
>
> Failed to load application: No module named
> djangoweb.twisted_wsgi
>
>



-- 
Alex Clemesha
clemesha.org


From namanvit at gmail.com  Wed Oct 28 07:04:52 2009
From: namanvit at gmail.com (naman jain)
Date: Wed, 28 Oct 2009 12:04:52 +0100
Subject: [Twisted-Python] Regarding Twisted Matrix
In-Reply-To: <E0465CB5C1DD4B0FA4E2C1BC650E85A1@valeriy>
References: <74b1256b0910270335w4eed529ey74b99997fa3dcafe@mail.gmail.com>
	<E0465CB5C1DD4B0FA4E2C1BC650E85A1@valeriy>
Message-ID: <74b1256b0910280404k6e1c486dm8e71fcdaa827979e@mail.gmail.com>

Hey guys,

Thanks for your responses.
Nathan your pointer to the "deferToThread" really helped.

I finally did this:

ran my external script in a thread using:
threads.deferToThread(test.main....)

and started a function called status_check in another thread
threads.deferToThread(self.check_status)

then immidiately returned control to reactor.

def check_status:
                self.testprocess_status = self.parent_conn.recv()

now, this call on pipe blocks the thread not the reactor main loop.
in the reactor when the value is changed of this self.testprocess_status I
ping my client with the new status.

"Threads are twisted :)"

Thanks
Naman

On Tue, Oct 27, 2009 at 4:31 PM, Valeriy Pogrebitskiy
<vpogrebi at verizon.net>wrote:


> Naman,
>
>
>
> Another problem you might (possibly) be encountering ? is the way your
> server and/or client protocol is implemented. If you just inherit from
> ?plain? twisted.internet.protocol.Protocol ? you are automatically using
> write () and dataReceived() methods that do not implement buffering (it is
> left up to developer). To enforce that line (string) oriented communication
> works correctly ? you might want to refactor to use
> twisted.protocols.basic.LineReceiver instead.
>
>
>
> Kind regards,
>
>
>
> Valeriy Pogrebitskiy
>
> Email: vpogrebi at iname.com
>
>
>
>
>
> -----Original Message-----
> *From:* twisted-python-bounces at twistedmatrix.com [mailto:
> twisted-python-bounces at twistedmatrix.com] *On Behalf Of *naman jain
> *Sent:* Tuesday, October 27, 2009 6:36 AM
> *To:* Twisted general discussion
> *Subject:* Re: [Twisted-Python] Regarding Twisted Matrix
>
>
>
> I tried to implement this:
>
> parent_conn, child_conn = Pipe()
>
> f = defer.Deferred()
> f = threads.deferToThread(start_test.main_func, SCRIPT_PATH,
> TEMP_OUTPUT_PATH, self.output_name, child_conn)
>
> response = parent_conn.recv()
> print response //prints like: initialization done
> self.transport.write(response)
>
> response = parent_conn.recv()
> print response // configuration done
> self.transport.write(response)
>
> But get the same output ie all status messages concatenated and sent at
> once.!
>
> [Do we need to put some deffered/callback  mechanism on parent_conn.recv()
> ??
> as that is the call blocking the thread waiting for reading.]
>
> Any ideas ? How is such stuff done in twisted servers??
>
> Naman
>
>  On Tue, Oct 27, 2009 at 7:03 AM, Nathan <nathan.stocks at gmail.com> wrote:
>
> On Mon, Oct 26, 2009 at 11:44 PM, naman jain <namanvit at gmail.com> wrote:
> > Hi,
> >
> > I have a client server model in twisted, where the server spawns a thread
> (
> > basically a test script in python that runs for about 20 mins)
> > I want to track the progress of the thread, and send the progress to the
> > client back
> >
> > So, I write something like this in my server:
> >
> > parent_conn, child_conn = Pipe()
> > thread = Process(target = start_test.main_func, args=(SCRIPT_PATH,
> > TEMP_OUTPUT_PATH, self.output_name, child_conn))
> > thread.start()
> >
> > response = parent_conn.recv()
> > print response //prints like: initialization done
> > self.transport.write(response)
> >
> >
> > response = parent_conn.recv()
> > print response // configuration done
> > self.transport.write(response)
> >
> > .
> > .
> > .
> >
> > thread.join()
> >
> >
> > But the transport.write calls don't send at the same time. instead they
> wait
> > for the thread to finish (coz of thread.join) and then append all the
> > response and send it back; like "initialization doneconfiguration
> > done...done"
> > thereby defeating the purpose of creating a thread.
> >
> > How do I give the control to the reactor to write the data back, and
> still
> > keep the thread running?
> > or is there any other way these kinda of progress can be tracked ?
> > I am kinda stuck with this :(
>
> I'm no expert with threads, but I don't see any deferToThread in
> there, which is what people on this list tend to mention whenever
> threading comes up.  Perhaps you need to switch to the "twisted way"
> to create your thread?
>
> http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.threads.html
>
> ~ Nathan
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091028/cf2078f3/attachment.htm 

From ellisonbg.net at gmail.com  Wed Oct 28 17:48:59 2009
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Wed, 28 Oct 2009 14:48:59 -0700
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <20091008032822.GQ1931@steerpike.home.puzzling.org>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>
	<a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
	<5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
	<12aaa0810910072008o5b6af468u9f78e29b385f9323@mail.gmail.com>
	<20091008032822.GQ1931@steerpike.home.puzzling.org>
Message-ID: <6ce0ac130910281448m2896e797oc6fdf762f300d0a3@mail.gmail.com>

I have been using Twisted for years but only recently began to use
inlineCallbacks (couldn't give up Python 2.4 support until recently).  This
simple asynch. sleep function is fantastic.  Just today I used to it with
inlineCallbacks to dramatically clean up some complex deferred logic.
Thanks,

Brian

On Wed, Oct 7, 2009 at 8:28 PM, Andrew Bennetts <andrew at bemusement.org>wrote:

> Mikhail Terekhov wrote:
> >    On Wed, Oct 7, 2009 at 6:04 PM, Phil Christensen <[1]
> phil at bubblehouse.org>
> >    wrote:
> >
> >      Paul's example will work just fine. Also, AFAIK there's no existing
> >      twisted function to do replicate an asynchronous sleep() in this
> way.
> >
> >      -phil
> >
> >    What about Deferred.setTimeout?
> >    [2]
> http://twistedmatrix.com/documents/current/api/twisted.internet.defer.Deferred.html#setTimeout
> >    IMHO it solves similar problem.
>
> Deferred.setTimeout is a poor API and is deprecated (despite what the
> automatically generated API docs think).
> <http://twistedmatrix.com/trac/ticket/178> has some discussion (and links
> to
> more discussion) explaining what's wrong with it, and what a good
> replacement
> would look like.
>
> So please, don't use setTimeout, and definitely do not recommend it to
> others!
>
> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091028/f4dee4a3/attachment.htm 

From glyph at twistedmatrix.com  Thu Oct 29 04:06:11 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 29 Oct 2009 04:06:11 -0400
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <6ce0ac130910281448m2896e797oc6fdf762f300d0a3@mail.gmail.com>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>
	<a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
	<5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
	<12aaa0810910072008o5b6af468u9f78e29b385f9323@mail.gmail.com>
	<20091008032822.GQ1931@steerpike.home.puzzling.org>
	<6ce0ac130910281448m2896e797oc6fdf762f300d0a3@mail.gmail.com>
Message-ID: <5245EDB8-EDFC-44D1-959A-47C1377FA28B@twistedmatrix.com>

Hi Brian,

In general, please reply on this list inline, with quoting and  
trimming, like so:

     http://en.wikipedia.org/wiki/Posting_style#Inline_replying

This might seem like a minor thing, but it really helps those of us  
who have to follow long discussions and many mailing lists.

Now, on to the main point of your message:

On Oct 28, 2009, at 5:48 PM, Brian Granger wrote:

> I have been using Twisted for years but only recently began to use  
> inlineCallbacks (couldn't give up Python 2.4 support until  
> recently).  This simple asynch. sleep function is fantastic.  Just  
> today I used to it with inlineCallbacks to dramatically clean up  
> some complex deferred logic.

Which asynch sleep function?

I hope you're not talking about this stuff, quoted in your message:

> On Wed, Oct 7, 2009 at 8:28 PM, Andrew Bennetts  
> <andrew at bemusement.org> wrote:
> >    What about Deferred.setTimeout?

Please note spiv's reply:

> Deferred.setTimeout is a poor API and is deprecated (despite what the
> automatically generated API docs think).

and his recommendation:

> So please, don't use setTimeout, and definitely do not recommend it  
> to others!

I hope that, instead, you're talking about the deferLater function  
that was introduced in Twisted 8.0?

http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.task.html#deferLater

This will act like an async 'sleep' if its result is yielded from an  
@inlineCallbacks function.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091029/c2ab8406/attachment.htm 

From namanvit at gmail.com  Thu Oct 29 08:37:06 2009
From: namanvit at gmail.com (naman jain)
Date: Thu, 29 Oct 2009 13:37:06 +0100
Subject: [Twisted-Python] Logging to both console and file (using twisted
	logging API)?
Message-ID: <74b1256b0910290537n6ae1a672g8b2663a48757b4a1@mail.gmail.com>

Hi,

I wanted to log in a file and keep the console also going with it.

I am using
log.startLogging(open(logname, 'w'))

whatever documentation I could find about this API, it suggested me to pass
setStdout=False(in order to keep stdout away from putting into log)
somewhere in the startlogging function.

Something like this I tried:
log.startLogging(sys.stdout,setStdout=False)

Doesnt help in solving the problem of getting both things:

Requirement:
log.msg("messageforlog")    -> goes to log
print "message for console" -> goes to console

Could anyone give some ideas on this?

Regards
Naman
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091029/359f0a14/attachment.htm 

From ellisonbg.net at gmail.com  Thu Oct 29 10:59:58 2009
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Thu, 29 Oct 2009 07:59:58 -0700
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <5245EDB8-EDFC-44D1-959A-47C1377FA28B@twistedmatrix.com>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>
	<a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
	<5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
	<12aaa0810910072008o5b6af468u9f78e29b385f9323@mail.gmail.com>
	<20091008032822.GQ1931@steerpike.home.puzzling.org>
	<6ce0ac130910281448m2896e797oc6fdf762f300d0a3@mail.gmail.com>
	<5245EDB8-EDFC-44D1-959A-47C1377FA28B@twistedmatrix.com>
Message-ID: <6ce0ac130910290759j3d82a3e9q64777756a0ddc046@mail.gmail.com>

Glyph,


In general, please reply on this list inline, with quoting and trimming,
> like so:
>
>     http://en.wikipedia.org/wiki/Posting_style#Inline_replying
>
> This might seem like a minor thing, but it really helps those of us who
> have to follow long discussions and many mailing lists.
>

Sorry, just being lazy...


I have been using Twisted for years but only recently began to use
> inlineCallbacks (couldn't give up Python 2.4 support until recently).  This
> simple asynch. sleep function is fantastic.  Just today I used to it with
> inlineCallbacks to dramatically clean up some complex deferred logic.
>
>
> Which asynch sleep function?
>
>
This one posted by Paul:

def sleep(seconds):
    d = defer.Deferred()
    reactor.callLater(seconds, d.callback, seconds)
    return d

I hope you're not talking about this stuff, quoted in your message:
>
> On Wed, Oct 7, 2009 at 8:28 PM, Andrew Bennetts <andrew at bemusement.org>wrote:
>
>> >    What about Deferred.setTimeout?
>>
>
> Please note spiv's reply:
>
> Deferred.setTimeout is a poor API and is deprecated (despite what the
>> automatically generated API docs think).
>>
> and his recommendation:
>
> So please, don't use setTimeout, and definitely do not recommend it to
>> others!
>>
>
Definitely not - I did see this warning.



> I hope that, instead, you're talking about the deferLater function that was
> introduced in Twisted 8.0?
>
>
> http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.task.html#deferLater
>
> This will act like an async 'sleep' if its result is yielded from an
> @inlineCallbacks function.
>
>
I looked at deferLater, but am not using it right now.  The sleep function I
am using is basically the same as this - in my case "sleep" turned out to be
a little simpler because I don't have to create and pass the clock around.
But I will probably use deferLater for this same purpose in the future as
well.

Cheers,

Brian


>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091029/0efad1cb/attachment.htm 

From terry at jon.es  Thu Oct 29 11:49:24 2009
From: terry at jon.es (Terry Jones)
Date: Thu, 29 Oct 2009 16:49:24 +0100
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: Your message at 07:59:58 on Thursday, 29 October 2009
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>
	<a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
	<5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
	<12aaa0810910072008o5b6af468u9f78e29b385f9323@mail.gmail.com>
	<20091008032822.GQ1931@steerpike.home.puzzling.org>
	<6ce0ac130910281448m2896e797oc6fdf762f300d0a3@mail.gmail.com>
	<5245EDB8-EDFC-44D1-959A-47C1377FA28B@twistedmatrix.com>
	<6ce0ac130910290759j3d82a3e9q64777756a0ddc046@mail.gmail.com>
Message-ID: <19177.47492.948264.671819@jon.es>

>>>>> "Brian" == Brian Granger <ellisonbg.net at gmail.com> writes:
Brian> I looked at deferLater, but am not using it right now.  The sleep
Brian> function I am using is basically the same as this - in my case
Brian> "sleep" turned out to be a little simpler because I don't have to
Brian> create and pass the clock around.  But I will probably use
Brian> deferLater for this same purpose in the future as well.

Hi Brian

Forgive me for butting in, but.... why :-)

Importing the reactor is no big deal, and if you use task.deferLater, apart
from not having to write any code you also have the advantage of being able
to pass it a result that the deferred will be called with.

For this reason you can also put a task.deferLater result into a callback
chain to achieve an async sleep and it will duly pass the result along. E.g.:
  
  from twisted.internet import reactor, task, defer

  d = somethingReturningADeferred()
  d.addCallback(lambda x: task.deferLater(reactor, 5.0, defer.passthru, x))

Terry


From listsin at integrateddevcorp.com  Thu Oct 29 12:49:55 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Thu, 29 Oct 2009 12:49:55 -0400
Subject: [Twisted-Python] Can browse,
	but getPage() fails on localhost address
Message-ID: <2C250B2F-3D89-49D4-91AD-4444124C4E3F@integrateddevcorp.com>

I can browse to either URL in any browser, getPage() works fine on the  
external address, 404's on the localhost address.

Any insight greatly appreciated; this is about as simple a test case  
as there can be and I'm mystified as to why it's not working.  Of  
course, that probably means I'll feel like a complete moron when  
someone clops me on the head with the answer, but I can deal with  
that...

Thanks,

S

Just in case it gets mutilated by mail:

	http://pastebin.com/d2f80ce0a

from twisted.web import client

def showPage(pageData):
     print pageData
     reactor.stop()

def handleError(failure):
     print "Error:", failure.getErrorMessage()
     failure.printDetailedTraceback()
     reactor.stop()

if __name__ == "__main__":
     from twisted.internet import reactor
     # postRequest = client.getPage("http://localhost/w3c-validator/check 
")
     postRequest = client.getPage("http://validator.w3.org/check")
     postRequest.addCallback(showPage).addErrback(handleError)
     reactor.run()


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091029/a8a571ef/attachment.htm 

From maarten at treewalker.org  Thu Oct 29 13:10:25 2009
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Thu, 29 Oct 2009 19:10:25 +0200
Subject: [Twisted-Python] Can browse,
	but getPage() fails on localhost address
In-Reply-To: <2C250B2F-3D89-49D4-91AD-4444124C4E3F@integrateddevcorp.com>
References: <2C250B2F-3D89-49D4-91AD-4444124C4E3F@integrateddevcorp.com>
Message-ID: <200910291810.25526.maarten@treewalker.org>

On Thursday 29 October 2009, Steve Steiner (listsin) wrote:

> I can browse to either URL in any browser, getPage() works fine on the
> external address, 404's on the localhost address.

Does the same thing happen with "127.0.0.1" instead of "localhost" in the 
URL? I once encountered a nasty setup where a machine itself did not have 
"localhost" in /etc/hosts and the DNS server returned the IP address of 
another machine on the network...

Bye,
		Maarten


From listsin at integrateddevcorp.com  Thu Oct 29 13:36:26 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Thu, 29 Oct 2009 13:36:26 -0400
Subject: [Twisted-Python] Can browse,
	but getPage() fails on localhost address
In-Reply-To: <200910291810.25526.maarten@treewalker.org>
References: <2C250B2F-3D89-49D4-91AD-4444124C4E3F@integrateddevcorp.com>
	<200910291810.25526.maarten@treewalker.org>
Message-ID: <4BBE900A-D3EF-42D2-9FB0-A7D1CA50D615@integrateddevcorp.com>

On Oct 29, 2009, at 1:10 PM, Maarten ter Huurne wrote:

> On Thursday 29 October 2009, Steve Steiner (listsin) wrote:
>
>> I can browse to either URL in any browser, getPage() works fine on  
>> the
>> external address, 404's on the localhost address.
>
> Does the same thing happen with "127.0.0.1" instead of "localhost"  
> in the
> URL? I once encountered a nasty setup where a machine itself did not  
> have
> "localhost" in /etc/hosts and the DNS server returned the IP address  
> of
> another machine on the network...

Yes, unfortunately, same thing and the hosts file is also correct.

This is in OS X, and the valida?or URL I'm calling is being served by  
Apache 2.2, and is a ScriptAlias like so (in an includ of httpd.conf):

ScriptAlias      /w3c-validator/check   '/Applications/Validator- 
SAC.app/Contents/Resources/validator/httpd/cgi-bin/check_wrapper.sh'

Thing that's got me baffled is that I can go to it just fine in a  
browser, I can `curl` it, but, now, after a little more digging, wget  
can't get it either!

So:
curl  http://localhost/w3c-validator/check			   <-- returns HTML code
any browser to  http://localhost/w3c-validator/check  <-- returns HTML  
code
t.w.c.getPage("http://localhost/w3c-validator/check") <-- 404
wget  http://localhost/w3c-validator/check		   <-- 404

So what the heck is the difference in how these things resolve that  
address!?

Thanks,

S




From kevin.horn at gmail.com  Thu Oct 29 13:49:11 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 29 Oct 2009 12:49:11 -0500
Subject: [Twisted-Python] Can browse,
	but getPage() fails on localhost 	address
In-Reply-To: <4BBE900A-D3EF-42D2-9FB0-A7D1CA50D615@integrateddevcorp.com>
References: <2C250B2F-3D89-49D4-91AD-4444124C4E3F@integrateddevcorp.com>
	<200910291810.25526.maarten@treewalker.org>
	<4BBE900A-D3EF-42D2-9FB0-A7D1CA50D615@integrateddevcorp.com>
Message-ID: <562bcc10910291049l25a8f55cgea6165d2a495f132@mail.gmail.com>

On Thu, Oct 29, 2009 at 12:36 PM, Steve Steiner (listsin) <
listsin at integrateddevcorp.com> wrote:

> On Oct 29, 2009, at 1:10 PM, Maarten ter Huurne wrote:
>
> > On Thursday 29 October 2009, Steve Steiner (listsin) wrote:
> >
> >> I can browse to either URL in any browser, getPage() works fine on
> >> the
> >> external address, 404's on the localhost address.
> >
> > Does the same thing happen with "127.0.0.1" instead of "localhost"
> > in the
> > URL? I once encountered a nasty setup where a machine itself did not
> > have
> > "localhost" in /etc/hosts and the DNS server returned the IP address
> > of
> > another machine on the network...
>
> Yes, unfortunately, same thing and the hosts file is also correct.
>
> This is in OS X, and the valida?or URL I'm calling is being served by
> Apache 2.2, and is a ScriptAlias like so (in an includ of httpd.conf):
>
> ScriptAlias      /w3c-validator/check   '/Applications/Validator-
> SAC.app/Contents/Resources/validator/httpd/cgi-bin/check_wrapper.sh'
>
> Thing that's got me baffled is that I can go to it just fine in a
> browser, I can `curl` it, but, now, after a little more digging, wget
> can't get it either!
>
> So:
> curl  http://localhost/w3c-validator/check                         <--
> returns HTML code
> any browser to  http://localhost/w3c-validator/check  <-- returns HTML
> code
> t.w.c.getPage("http://localhost/w3c-validator/check") <-- 404
> wget  http://localhost/w3c-validator/check                 <-- 404
>
> So what the heck is the difference in how these things resolve that
> address!?
>
> Thanks,
>
> S
>
>
When you say "resolve that address" do you mean the IP Address  or the URL?

If the requests are in fact going to the same address (IP), I would take a
look at the HTTP headers for each method and compare them.  Wget failing in
a similar fashion to getPage() may actually help you diagnose this.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091029/afe2d141/attachment.htm 

From terry at jon.es  Thu Oct 29 14:01:18 2009
From: terry at jon.es (Terry Jones)
Date: Thu, 29 Oct 2009 19:01:18 +0100
Subject: [Twisted-Python] Can browse,
	but getPage() fails on localhost address
In-Reply-To: Your message at 13:36:26 on Thursday, 29 October 2009
References: <2C250B2F-3D89-49D4-91AD-4444124C4E3F@integrateddevcorp.com>
	<200910291810.25526.maarten@treewalker.org>
	<4BBE900A-D3EF-42D2-9FB0-A7D1CA50D615@integrateddevcorp.com>
Message-ID: <19177.55406.518710.164462@jon.es>

>>>>> "Steve" == Steve Steiner (listsin) <listsin at integrateddevcorp.com> writes:
Steve> curl  http://localhost/w3c-validator/check			   <-- returns HTML code
Steve> any browser to  http://localhost/w3c-validator/check  <-- returns HTML code

Steve> t.w.c.getPage("http://localhost/w3c-validator/check") <-- 404
Steve> wget  http://localhost/w3c-validator/check		   <-- 404

Steve> So what the heck is the difference in how these things resolve that  
Steve> address!?

When you say 404, do you really mean that you get a 404? Or are you just
saying that to informally tell us that it doesn't work?

If the former, then it seems this has nothing to do with DNS and host
names.  The connection is being made in all cases. It looks like there's
something different about the HTTP requests that causes the server to react
differently.  You're writing the server, correct? Can you log output?

If the latter, then I guess you really mean that the connection fails.

Terry


From ellisonbg.net at gmail.com  Thu Oct 29 14:38:34 2009
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Thu, 29 Oct 2009 11:38:34 -0700
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <19177.47492.948264.671819@jon.es>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>
	<a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
	<5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
	<12aaa0810910072008o5b6af468u9f78e29b385f9323@mail.gmail.com>
	<20091008032822.GQ1931@steerpike.home.puzzling.org>
	<6ce0ac130910281448m2896e797oc6fdf762f300d0a3@mail.gmail.com>
	<5245EDB8-EDFC-44D1-959A-47C1377FA28B@twistedmatrix.com>
	<6ce0ac130910290759j3d82a3e9q64777756a0ddc046@mail.gmail.com>
	<19177.47492.948264.671819@jon.es>
Message-ID: <6ce0ac130910291138r6409aa39o7983ebbefaa16c10@mail.gmail.com>

> Hi Brian
>
> Forgive me for butting in, but.... why :-)
>
>
Helpful butting in is more than fine..


> Importing the reactor is no big deal, and if you use task.deferLater, apart
> from not having to write any code you also have the advantage of being able
> to pass it a result that the deferred will be called with.
>
> For this reason you can also put a task.deferLater result into a callback
> chain to achieve an async sleep and it will duly pass the result along.
> E.g.:
>
>  from twisted.internet import reactor, task, defer
>
>  d = somethingReturningADeferred()
>  d.addCallback(lambda x: task.deferLater(reactor, 5.0, defer.passthru, x))
>
>
Ahh, I see.  I saw the signature of deferLater and the Clock class in task
and I thought that I would have
to create a Clock instance by hand.  That I can simply use the reactor
(which of course is already imported and running in my code) simplifies the
usage of deferLater.  Thanks!

But, even with this, I do like the flow and readability of code that uses
sleep like this:

@inlineCallbacks
def f():
  result1 = yield somethingDeferred()
  yield sleep(1.0)
  result2 = yield anotherDeferred(result2)

Rather than the way that deferLater looks:

@inlineCallbacks
def f():
  result1 = yield somethingDeferred()
  result2 = yield task.deferLater(reactor, 1.0, anotherDeferred, result2)

But, the difference at this point is entirely aesthetic.

One question though - can someone explain the need/usage cases for
task.Clock and the other things in task?

Cheers,

Brian




> Terry
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091029/f0bb8ce6/attachment.htm 

From listsin at integrateddevcorp.com  Thu Oct 29 15:29:27 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Thu, 29 Oct 2009 15:29:27 -0400
Subject: [Twisted-Python] Can browse,
	but getPage() fails on localhost address
In-Reply-To: <19177.55406.518710.164462@jon.es>
References: <2C250B2F-3D89-49D4-91AD-4444124C4E3F@integrateddevcorp.com>
	<200910291810.25526.maarten@treewalker.org>
	<4BBE900A-D3EF-42D2-9FB0-A7D1CA50D615@integrateddevcorp.com>
	<19177.55406.518710.164462@jon.es>
Message-ID: <848FD6B5-8815-4835-A0BF-9B886DF3016E@integrateddevcorp.com>


On Oct 29, 2009, at 2:01 PM, Terry Jones wrote:

>>>>>> "Steve" == Steve Steiner (listsin)  
>>>>>> <listsin at integrateddevcorp.com> writes:
> Steve> curl  http://localhost/w3c-validator/check			   <-- returns  
> HTML code
> Steve> any browser to  http://localhost/w3c-validator/check  <--  
> returns HTML code
>
> Steve> t.w.c.getPage("http://localhost/w3c-validator/check") <-- 404
> Steve> wget  http://localhost/w3c-validator/check		   <-- 404
>
> Steve> So what the heck is the difference in how these things  
> resolve that
> Steve> address!?
>
> When you say 404, do you really mean that you get a 404? Or are you  
> just
> saying that to informally tell us that it doesn't work?

No, I mean this, exactly:

# wget  http://localhost/w3c-validator/check
--2009-10-29 13:31:40--  http://localhost/w3c-validator/check
Resolving localhost... 127.0.0.1, ::1, fe80::1
Connecting to localhost|127.0.0.1|:80... connected.
HTTP request sent, awaiting response... 404 Not Found
2009-10-29 13:31:40 ERROR 404: Not Found.

# python foo.py
Error: 404 Not Found
*--- Failure #6 ---
Failure: twisted.web.error.Error: 404 Not Found
*--- End of Failure #6 ---

That last is from failure.printDetailedTraceback().

S



From listsin at integrateddevcorp.com  Thu Oct 29 18:47:09 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Thu, 29 Oct 2009 18:47:09 -0400
Subject: [Twisted-Python] Can browse,
	but getPage() fails on localhost address
In-Reply-To: <848FD6B5-8815-4835-A0BF-9B886DF3016E@integrateddevcorp.com>
References: <2C250B2F-3D89-49D4-91AD-4444124C4E3F@integrateddevcorp.com>
	<200910291810.25526.maarten@treewalker.org>
	<4BBE900A-D3EF-42D2-9FB0-A7D1CA50D615@integrateddevcorp.com>
	<19177.55406.518710.164462@jon.es>
	<848FD6B5-8815-4835-A0BF-9B886DF3016E@integrateddevcorp.com>
Message-ID: <9B3644BF-3E73-4BBF-ADD4-B12F9085D6B2@integrateddevcorp.com>

On Oct 29, 2009, at 3:29 PM, Steve Steiner (listsin) wrote:
> On Oct 29, 2009, at 2:01 PM, Terry Jones wrote:
>
>>>>>>> "Steve" == Steve Steiner (listsin)
>>>>>>> <listsin at integrateddevcorp.com> writes:
>> Steve> curl  http://localhost/w3c-validator/check			   <-- returns
>> HTML code
>> Steve> any browser to  http://localhost/w3c-validator/check  <--
>> returns HTML code
>>
>> Steve> t.w.c.getPage("http://localhost/w3c-validator/check") <-- 404
>> Steve> wget  http://localhost/w3c-validator/check		   <-- 404
>>
>> Steve> So what the heck is the difference in how these things
>> resolve that
>> Steve> address!?
>>
>> When you say 404, do you really mean that you get a 404? Or are you
>> just
>> saying that to informally tell us that it doesn't work?
>
> No, I mean this, exactly:
>
> # wget  http://localhost/w3c-validator/check
> --2009-10-29 13:31:40--  http://localhost/w3c-validator/check
> Resolving localhost... 127.0.0.1, ::1, fe80::1
> Connecting to localhost|127.0.0.1|:80... connected.
> HTTP request sent, awaiting response... 404 Not Found
> 2009-10-29 13:31:40 ERROR 404: Not Found.
>
> # python foo.py
> Error: 404 Not Found
> *--- Failure #6 ---
> Failure: twisted.web.error.Error: 404 Not Found
> *--- End of Failure #6 ---
>
> That last is from failure.printDetailedTraceback().

The only difference between the requests, as far as I can see (via  
tcpdump et al.), is that both `curl` and my browsers send HTTP/1.1  
requests and both `wget` and t.w.c.getPage() send HTTP/1.0.

This code also works:

     import httplib
     headers = { "Accept":"*/*"}
     h1 = httplib.HTTPConnection("localhost")
     h1.connect()
     h1.request("GET", url="/w3c-validator/check", headers=headers)
     rsp = h1.getresponse()
     print rsp.read()

Does this make any sense, that an HTTP/1.1 request would succeed where  
a simple HTTP/1.0 request returns a 404?

Maybe it's time to whip out that /twisted-branch-high-level-web- 
client-3987 I checked out a while ago...

S








From listsin at integrateddevcorp.com  Thu Oct 29 19:34:05 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Thu, 29 Oct 2009 19:34:05 -0400
Subject: [Twisted-Python] HTTPClientFactory's deferred never
	finishing	download on .vcf (vcard file) link
In-Reply-To: <20091010211542.13824.1597743213.divmod.xquotient.9@localhost.localdomain>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
	<2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
	<95bb10690910100434y7808a2a4v1955b9f4e58efd83@mail.gmail.com>
	<C86E331F-76A9-4EFC-8737-FDF8D344645B@integrateddevcorp.com>
	<20091010211542.13824.1597743213.divmod.xquotient.9@localhost.localdomain>
Message-ID: <58037725-E7CB-4E10-B970-EFD37F5A6AC7@integrateddevcorp.com>

On Oct 10, 2009, at 5:15 PM, exarkun at twistedmatrix.com wrote:

>> Where might that be hiding?  I'd love to have something that does
>> deferreds like Twisted and also implements all of urllib2.  I find  
>> the
>> info() from urlopen() particularly helpful when debugging issues like
>> this.
>
>  http://twistedmatrix.com/trac/ticket/886
>  http://twistedmatrix.com/trac/ticket/3987
>
> As I understand the "info" method, it gives you access to the response
> headers.  The new API definitely exposes that information.
>
> You'll notice that neither of these tickets is closed.  #3987 is
> presently up for review.  If you want to help out, you could take a  
> look
> at the code and point out any problems you notice.
>
> Jean-Paul

Well...I've now spent some actual time with 886 (-2,-3,and -4), and  
also with 3987.

While there is some very nice stuff in there, I'm really not sure how  
one would actually put it to use since the back-end and the front-end  
seem to have been split into separate branches.

It seems that you can't use 3987 without 886-x but you can't get them  
checked out at the same time in the same place or, at least, it's not  
clear to me how one would do that.

Is there any way to get a single checkout, that I can install into a  
virtualenv, where I can actually try to put this stuff to some sort of  
concrete use?

For me, until I put it to some actual use in the real world, all the  
abstract "code review" in the world isn't going to get it any closer  
to being shippable.

Thanks,

S













From mithrandi at mithrandi.net  Thu Oct 29 21:26:05 2009
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Fri, 30 Oct 2009 03:26:05 +0200
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <6ce0ac130910291138r6409aa39o7983ebbefaa16c10@mail.gmail.com>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
	<5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
	<12aaa0810910072008o5b6af468u9f78e29b385f9323@mail.gmail.com>
	<20091008032822.GQ1931@steerpike.home.puzzling.org>
	<6ce0ac130910281448m2896e797oc6fdf762f300d0a3@mail.gmail.com>
	<5245EDB8-EDFC-44D1-959A-47C1377FA28B@twistedmatrix.com>
	<6ce0ac130910290759j3d82a3e9q64777756a0ddc046@mail.gmail.com>
	<19177.47492.948264.671819@jon.es>
	<6ce0ac130910291138r6409aa39o7983ebbefaa16c10@mail.gmail.com>
Message-ID: <f5eea9170910291826k2dff638g1f83822df0b247dc@mail.gmail.com>

On Thu, Oct 29, 2009 at 8:38 PM, Brian Granger <ellisonbg.net at gmail.com> wrote:
> One question though - can someone explain the need/usage cases for
> task.Clock and the other things in task?

Clock is a "fake" IReactorTime implementation; as the docstring says,
it is intended for writing unit tests where you want control over the
behaviour of the clock, rather than using the real time source.

As for the other things... LoopingCall repeatedly runs a callable at a
certain interval, coiterate takes a generator and iterates it
cooperatively (returning control back to the reactor between
iterations), and cooperate is a new-and-improved version of coiterate
which I haven't looked at yet.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From ssteinerx at gmail.com  Thu Oct 29 21:48:58 2009
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Thu, 29 Oct 2009 21:48:58 -0400
Subject: [Twisted-Python] Working on multiple Twisted branches
Message-ID: <9AAF881A-2945-4A8F-A5FC-D82DF8F8BFBB@gmail.com>

So...

	I am very interested in the improvements to the Twisted Web Client  
portion of Twisted and have been wanting to review two tickets/ 
branches in particular; 3987 and 886.

	Today I finally got around to getting the branches checked out and  
merged, with some great help from `ivan` on IRC and, wrote a blog post  
detailing exactly how to do it.

	http://websaucesoftware.com/blog/?p=434

	It uses Git instead of Subversion for the actual merges so it didn't  
suck anywhere as much as it would have with Subversion alone.

	Comments/corrections always welcome.

S



From exarkun at twistedmatrix.com  Thu Oct 29 23:05:39 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 30 Oct 2009 03:05:39 -0000
Subject: [Twisted-Python] HTTPClientFactory's deferred never
	finishing	download on .vcf (vcard file) link
In-Reply-To: <58037725-E7CB-4E10-B970-EFD37F5A6AC7@integrateddevcorp.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
	<2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
	<95bb10690910100434y7808a2a4v1955b9f4e58efd83@mail.gmail.com>
	<C86E331F-76A9-4EFC-8737-FDF8D344645B@integrateddevcorp.com>
	<20091010211542.13824.1597743213.divmod.xquotient.9@localhost.localdomain>
	<58037725-E7CB-4E10-B970-EFD37F5A6AC7@integrateddevcorp.com>
Message-ID: <20091030030539.12668.1881055704.divmod.xquotient.64@localhost.localdomain>

On 29 Oct, 11:34 pm, listsin at integrateddevcorp.com wrote:
>On Oct 10, 2009, at 5:15 PM, exarkun at twistedmatrix.com wrote:
>>>Where might that be hiding?  I'd love to have something that does
>>>deferreds like Twisted and also implements all of urllib2.  I find
>>>the
>>>info() from urlopen() particularly helpful when debugging issues like
>>>this.
>>
>>  http://twistedmatrix.com/trac/ticket/886
>>  http://twistedmatrix.com/trac/ticket/3987
>>
>>As I understand the "info" method, it gives you access to the response
>>headers.  The new API definitely exposes that information.
>>
>>You'll notice that neither of these tickets is closed.  #3987 is
>>presently up for review.  If you want to help out, you could take a
>>look
>>at the code and point out any problems you notice.
>>
>>Jean-Paul
>
>Well...I've now spent some actual time with 886 (-2,-3,and -4), and
>also with 3987.
>
>While there is some very nice stuff in there, I'm really not sure how
>one would actually put it to use since the back-end and the front-end
>seem to have been split into separate branches.

They're not really split.  The 3987 branch is complete and usable on its 
own.  You don't need a checkout of the 886 branch.

Jean-Paul


From exarkun at twistedmatrix.com  Thu Oct 29 23:07:38 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 30 Oct 2009 03:07:38 -0000
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <f5eea9170910291826k2dff638g1f83822df0b247dc@mail.gmail.com>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
	<5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
	<12aaa0810910072008o5b6af468u9f78e29b385f9323@mail.gmail.com>
	<20091008032822.GQ1931@steerpike.home.puzzling.org>
	<6ce0ac130910281448m2896e797oc6fdf762f300d0a3@mail.gmail.com>
	<5245EDB8-EDFC-44D1-959A-47C1377FA28B@twistedmatrix.com>
	<6ce0ac130910290759j3d82a3e9q64777756a0ddc046@mail.gmail.com>
	<19177.47492.948264.671819@jon.es>
	<6ce0ac130910291138r6409aa39o7983ebbefaa16c10@mail.gmail.com>
	<f5eea9170910291826k2dff638g1f83822df0b247dc@mail.gmail.com>
Message-ID: <20091030030738.12668.1686795274.divmod.xquotient.67@localhost.localdomain>

On 01:26 am, mithrandi at mithrandi.net wrote:
>On Thu, Oct 29, 2009 at 8:38 PM, Brian Granger 
><ellisonbg.net at gmail.com> wrote:
>>One question though - can someone explain the need/usage cases for
>>task.Clock and the other things in task?
>
>Clock is a "fake" IReactorTime implementation; as the docstring says,
>it is intended for writing unit tests where you want control over the
>behaviour of the clock, rather than using the real time source.
>
>As for the other things... LoopingCall repeatedly runs a callable at a
>certain interval, coiterate takes a generator and iterates it
>cooperatively (returning control back to the reactor between
>iterations), and cooperate is a new-and-improved version of coiterate
>which I haven't looked at yet.

cooperate and coiterate basically do the same thing.  The difference is 
that cooperate gives you access to extra features, like pausing, 
resuming, and canceling.

Jean-Paul


From ssteinerx at gmail.com  Thu Oct 29 23:25:12 2009
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Thu, 29 Oct 2009 23:25:12 -0400
Subject: [Twisted-Python] HTTPClientFactory's deferred never finishing
	download on .vcf (vcard file) link
In-Reply-To: <20091030030539.12668.1881055704.divmod.xquotient.64@localhost.localdomain>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
	<2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
	<95bb10690910100434y7808a2a4v1955b9f4e58efd83@mail.gmail.com>
	<C86E331F-76A9-4EFC-8737-FDF8D344645B@integrateddevcorp.com>
	<20091010211542.13824.1597743213.divmod.xquotient.9@localhost.localdomain>
	<58037725-E7CB-4E10-B970-EFD37F5A6AC7@integrateddevcorp.com>
	<20091030030539.12668.1881055704.divmod.xquotient.64@localhost.localdomain>
Message-ID: <43FD4C59-F7CF-4CA6-85A0-B4A37D59CF1B@gmail.com>


On Oct 29, 2009, at 11:05 PM, exarkun at twistedmatrix.com wrote:

> They're not really split.  The 3987 branch is complete and usable on  
> its
> own.  You don't need a checkout of the 886 branch.

Cool, maybe that could be noted in the ticket(s)?

Thanks,

S



From cwellington at ccg.murdoch.edu.au  Fri Oct 30 05:38:12 2009
From: cwellington at ccg.murdoch.edu.au (Crispin Wellington)
Date: Fri, 30 Oct 2009 17:38:12 +0800
Subject: [Twisted-Python] Using a custom reactor in twisted trial for test
	cases?
Message-ID: <1256895492.4200.9.camel@wolfwood>

Hi there,

I am using twisted trial to run test cases for an application. The
application however uses stackless python and has a custom stackless
reactor. I implemented this reactor like this...

-------------------- stacklessreactor.py -----------------------
# Use epoll() as our base reactor
from twisted.internet.epollreactor import EPollReactor as StacklessBaseReactor

import stackless

# seconds between running the greenthreads. 0.0 for flat out 100% CPU
STACKLESS_MAX_PUMP_RATE = 0.1

class StacklessReactor(StacklessBaseReactor):
    """This reactor does the stackless greenthread pumping in the main thread, interwoven with the reactor pump"""
    
    def doIteration(self, timeout):
        """Calls the base reactors doIteration, and then fires off all the stackless threads"""
        if timeout > STACKLESS_MAX_PUMP_RATE:
            timeout = STACKLESS_MAX_PUMP_RATE
        stackless.schedule()
        return StacklessBaseReactor.doIteration(self,timeout)

def install():
    """
    Install the stackless() reactor.
    """
    p = StacklessReactor()
    from twisted.internet.main import installReactor
    installReactor(p)
-------------------------------------------------------------------

And I install this as my reactor in my application with...

import stacklessreactor
stacklessreactor.install()

...placed right at the top of my .tac python file. And this all works.
Running the app with twistd, the custom reactor is installed and is used
as the reactor for the app.

Now however, I come to write tests and run them with trial. I *need* the
tests to be run under the stackless reactor or things simply wont work
(a lot of the code I need to test are stackless tasklets).

When I go "/usr/local/stackless/bin/trial --help-reactors" I get the
following list:

    kqueue	kqueue(2)-based reactor.
    win32	Win32 WaitForMultipleObjects-based reactor.
    epoll	epoll(4)-based reactor.
    iocp	Win32 IO Completion Ports-based reactor.
    gtk 	Gtk1 integration reactor.
    cf  	CoreFoundation integration reactor.
    gtk2	Gtk2 integration reactor.
    default	The best reactor for the current platform.
    debug-gui	Semi-functional debugging/introspection reactor.
    poll	poll(2)-based reactor.
    glib2	GLib2 event-loop integration reactor.
    select	select(2)-based reactor.
    wx  	wxPython integration reactor.
    qt  	QT integration reactor

One of these I can use by passing in --reactor=name. 

So the question is, is there a way of getting the trial framework to use
my custom reactor? Is there a way to get my reactor into that list
somehow? Is this not a supported feature of trial?

And... if this isn't a supported feature, what is the best way to get a
TestCase that will run under that reactor?

Look forward to any help people can offer me.

With kind regards

Crispin Wellington




From vishalshetye at gmail.com  Fri Oct 30 09:27:16 2009
From: vishalshetye at gmail.com (Vishal Shetye)
Date: Fri, 30 Oct 2009 18:57:16 +0530
Subject: [Twisted-Python] Regarding Ticket 3629,
	Error in adbapi Connection Pool in cleanup
Message-ID: <6a2dc2340910300627x7a2d8207s7cc05a30d14ee512@mail.gmail.com>

Hi,
I was facing the issue as noted here http://twistedmatrix.com/trac/ticket/3629.
As I see, python 2.5 can be build with pysqlite2.1.3 and sqlite 3.0.8 or later.
However, support for a connection to be moved across multiple threads
was added to sqlite at version3.3.1.

Last comment in the ticket says, the module is just overprotective.
Which module is he referring to and why is it said that it is overprotective?
Is he referring to the pysqlite module?
He says using check_same_thread=False is safe, is he saying it
specifically in the twisted's context?
Is it really safe even if I am using sqlite version between 3.0.8 to 3.3.1?

-- 
vishal


From exarkun at twistedmatrix.com  Fri Oct 30 10:06:21 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 30 Oct 2009 14:06:21 -0000
Subject: [Twisted-Python] Using a custom reactor in twisted trial for
	test	cases?
In-Reply-To: <1256895492.4200.9.camel@wolfwood>
References: <1256895492.4200.9.camel@wolfwood>
Message-ID: <20091030140621.12668.2112281336.divmod.xquotient.76@localhost.localdomain>

On 09:38 am, cwellington at ccg.murdoch.edu.au wrote:
>Hi there,
>
>I am using twisted trial to run test cases for an application. The
>application however uses stackless python and has a custom stackless
>reactor. I implemented this reactor like this...

It looks like your custom reactor is mainly in charge of making sure 
stackless.schedule() gets called at least once every 0.1 seconds.  Is 
that right?  If so, a much better approach would be to use 
twisted.internet.task.LoopingCall rather than implementing a custom 
reactor.

Is there something undesirable about that (much simpler, less fragile) 
approach?

As for your actual question, if you want a new reactor to be as usable 
as one of the existing ones, you need to write a plugin declaring its 
available.  Take a look at twisted/plugins/twisted_reactors.py for some 
examples.

Jean-Paul


From andrewfr_ice at yahoo.com  Fri Oct 30 13:12:48 2009
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Fri, 30 Oct 2009 10:12:48 -0700 (PDT)
Subject: [Twisted-Python] Using a custom reactor in twisted trial for
	test cases?
Message-ID: <450379.51650.qm@web112419.mail.gq1.yahoo.com>

Hi Crispin:

Message: 8
Date: Fri, 30 Oct 2009 17:38:12 +0800
From: Crispin Wellington <cwellington at ccg.murdoch.edu.au>
Subject: [Twisted-Python] Using a custom reactor in twisted trial for
? ? test? ? cases?
To: twisted-python at twistedmatrix.com
Message-ID: <1256895492.4200.9.camel at wolfwood>
Content-Type: text/plain

>I am using twisted trial to run test cases for an application. The
>application however uses stackless python and has a custom stackless
>reactor. I implemented this reactor like this...

For better or worse, much of what you have discussed have been fleshed out about two years ago in this mailing list and in stackless. Also I outline strategies in the PyCon 2008 talk "Adventures in Stackless Twisted Integration." Personally, I don't know why more people don't use Stackless with Twisted.

Some advice:

1) Based on what I have seen, you don't need to write a custom reactor (I still remember Glyph setting me straight on that one). At least for what you are doing :-).

2) Use task.loopingCall to make the reactor periodically yield.

l = task.LoopingCall(stackless.schedule)
l.start(.01)

however there is some weird interaction between Stackless Python 2.6 and Twisted so you may have to do

task.LoopingCall(__tick__)

def __tick__():
    stackless.schedule

or play with the recursionlimit variable. I have not gotten to the bottom of that problem.


Cheers,
Andrew


      


From db3l.net at gmail.com  Fri Oct 30 16:25:06 2009
From: db3l.net at gmail.com (David Bolen)
Date: Fri, 30 Oct 2009 16:25:06 -0400
Subject: [Twisted-Python] Logging to both console and file (using
	twisted logging API)?
References: <74b1256b0910290537n6ae1a672g8b2663a48757b4a1@mail.gmail.com>
Message-ID: <m2r5skaau5.fsf@valheru.db3l.homeip.net>

naman jain <namanvit at gmail.com> writes:

> I wanted to log in a file and keep the console also going with it.

I can read this as either:

  * Keep file logs and stdout/console completely separate, or
  * File gets explicit logs and copies of stdout, but stdout also goes to
    console as well.

The latter is something I'd more commonly do, but the former is what
you explain further below with your rules.

> I am using
> log.startLogging(open(logname, 'w'))
>
> whatever documentation I could find about this API, it suggested me to pass
> setStdout=False(in order to keep stdout away from putting into log)
> somewhere in the startlogging function.
>
> Something like this I tried:
> log.startLogging(sys.stdout,setStdout=False)

Why did you switch to sys.stdout here?  While this will prevent
sys.stdout and sys.stderr from being redirected, it will use
sys.stdout for any log.msg() calls, so nothing would end up in your
log file.

> Doesnt help in solving the problem of getting both things:
>
> Requirement:
> log.msg("messageforlog")    -> goes to log
> print "message for console" -> goes to console
>
> Could anyone give some ideas on this?

I think you had the right idea with setStdout, but changed more than
just that when you tested it.  If you use a call like
log.startLogging(open(logname, 'w'), setStdout=False) I believe you'll
get what you want.  Only calls to log.msg() will go to the file, and
stdout/stderr will be left unchanged.

-- David



From ssteinerx at gmail.com  Sat Oct 31 00:07:03 2009
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Sat, 31 Oct 2009 00:07:03 -0400
Subject: [Twisted-Python] Fwd: Twisted WSGI (trunk) + Django 1.1.1 + Pinax
	Twisted WSGI setup == broken forms?
References: <mailman.93286.1256961720.23374.twisted-python@twistedmatrix.com>
Message-ID: <23127962-2733-4558-B244-090617AE5408@gmail.com>

Hi!
	I've been pulling my hair out all day...

	I have a Django 1.1.x project running under Twisted Trunk (27392)  
using WSGI.

	I've been having mega-problems with forms not showing up in Django's  
REQUEST object so I decided to nail it down to the simplest case.  I  
thought I was only having problems with simple <form>...</form> type  
submissions but, nope, as soon as I wrote the regular Django one, it  
also failed.  The form runs fine under ?jango's development server.

	The project's at:

		http://github.com/ssteiner/twisted-django

	I am using the WSGI method that is shown for use with Pinax which has  
worked for me in the past and is very simple.

	I also included a newer, more complicated method that I stole from an  
earlier version of clemesha's hotdot at master - GitHub, from an  
article he wrote a little while ago that I'm too tired to find right  
now.

	I would love to get to the bottom of this as Twisted + Django +  
Orbited really is the foundation of an app I'm writing and this is a  
real showstopper.

	Comments, suggestions, corrections, etc. always welcome.

Thanks,

S




-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091031/7eee73cd/attachment.htm 

From itamar at itamarst.org  Sat Oct 31 09:03:42 2009
From: itamar at itamarst.org (Itamar Turner-Trauring (aka Shtull-Trauring))
Date: Sat, 31 Oct 2009 09:03:42 -0400
Subject: [Twisted-Python] Fwd: Twisted WSGI (trunk) + Django 1.1.1 +
 Pinax Twisted WSGI setup == broken forms?
In-Reply-To: <23127962-2733-4558-B244-090617AE5408@gmail.com>
References: <mailman.93286.1256961720.23374.twisted-python@twistedmatrix.com>
	<23127962-2733-4558-B244-090617AE5408@gmail.com>
Message-ID: <1256994222.3814.51.camel@pintsize>

You might also try the twisted-web list.



From ssteinerx at gmail.com  Sat Oct 31 09:24:41 2009
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Sat, 31 Oct 2009 09:24:41 -0400
Subject: [Twisted-Python] Django + Twisted trunk, fresh virtualenv,
	simplest demo
Message-ID: <9AB29445-5186-458D-8F46-1E099C0BE717@gmail.com>

Hi!

	I was pulling my hair out yesterday, trying to get my Django  
application's forms working on both the development server, and  
running under Twisted trunk.

	POST variables were not arriving in the REQUEST object where they  
belonged, but only under Twisted.

	So, I did the only logical thing; I made a completely isolated test  
case, now available at:

	https://github.com/ssteiner/twisted-django/

	Along the way, I finally decided to start over from scratch with a  
brand new --no-site-packages virtualenv, then installed only what was  
absolutely required.

	The repository shows what I think may be the simplest way to run  
Django under Twisted WSGI which I pretty much stole wholesale from the  
Pinax WSGI setup.

	I'll be writing a blog post with a blow-by-blow shortly which I'll  
post when it's done but, for now, this is a very clear, and dead  
simple way to run Django under Twisted WSGI.

	Please note: you *must* be running a Twisted trunk checkout because  
some WSGI bugs have been fixed since the most recent release.

S





From ssteinerx at gmail.com  Sat Oct 31 09:25:31 2009
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Sat, 31 Oct 2009 09:25:31 -0400
Subject: [Twisted-Python] Fwd: Twisted WSGI (trunk) + Django 1.1.1 +
	Pinax Twisted WSGI setup == broken forms?
In-Reply-To: <1256994222.3814.51.camel@pintsize>
References: <mailman.93286.1256961720.23374.twisted-python@twistedmatrix.com>
	<23127962-2733-4558-B244-090617AE5408@gmail.com>
	<1256994222.3814.51.camel@pintsize>
Message-ID: <CEEFED23-956B-40C1-A01E-836C4133AED7@gmail.com>


On Oct 31, 2009, at 9:03 AM, Itamar Turner-Trauring (aka Shtull- 
Trauring) wrote:

> You might also try the twisted-web list.

Maybe my subscription's broken but I haven't seen a single message  
since I signed up a week and a half or so ago.  Is that right?

Thanks,

S


>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From george at ringdevelopment.com  Sat Oct 31 10:53:39 2009
From: george at ringdevelopment.com (George Pauly)
Date: Sat, 31 Oct 2009 10:53:39 -0400
Subject: [Twisted-Python] Fwd: Twisted WSGI (trunk) + Django 1.1.1
	+	Pinax Twisted WSGI setup == broken forms?
In-Reply-To: <CEEFED23-956B-40C1-A01E-836C4133AED7@gmail.com>
References: <mailman.93286.1256961720.23374.twisted-python@twistedmatrix.com>
	<23127962-2733-4558-B244-090617AE5408@gmail.com>
	<1256994222.3814.51.camel@pintsize>
	<CEEFED23-956B-40C1-A01E-836C4133AED7@gmail.com>
Message-ID: <1257000819.6622.54.camel@localhost.localdomain>

On Sat, 2009-10-31 at 09:25 -0400, ssteinerX at gmail.com wrote:

> 
> Maybe my subscription's broken but I haven't seen a single message  
> since I signed up a week and a half or so ago.  Is that right?
> 
There were posts on Wednesday.

-- 
George Pauly
Ring Development
www.ringdevelopment.com



From burslem2001 at yahoo.com  Thu Oct  1 08:32:15 2009
From: burslem2001 at yahoo.com (gary clark)
Date: Thu, 1 Oct 2009 07:32:15 -0700 (PDT)
Subject: [Twisted-Python] Twisted and db table changes
In-Reply-To: <522237.35121.qm@web112510.mail.gq1.yahoo.com>
Message-ID: <789701.43712.qm@web112519.mail.gq1.yahoo.com>

Thanks for the information, thats what I need to use in this case

"wisted.internet.task.LoopingCall".


Great support.

Much appreciated,
Garyc




From burslem2001 at yahoo.com  Thu Oct  1 11:53:56 2009
From: burslem2001 at yahoo.com (gary clark)
Date: Thu, 1 Oct 2009 10:53:56 -0700 (PDT)
Subject: [Twisted-Python] XML parsing on twisted
In-Reply-To: <789701.43712.qm@web112519.mail.gq1.yahoo.com>
Message-ID: <635103.87666.qm@web112510.mail.gq1.yahoo.com>

Hello,

Probably a pretty standard question. However what are recommended mechanics of parsing XML on twisted? I have a humongous string that needs to be parsed and pushed into a database in the right columns.

Much appreciated in advance,
Garyc





From vpogrebi at verizon.net  Thu Oct  1 12:17:07 2009
From: vpogrebi at verizon.net (Valeriy Pogrebitskiy)
Date: Thu, 01 Oct 2009 14:17:07 -0400
Subject: [Twisted-Python] Use of 'twistd' utility with command-line arguments
Message-ID: <F4DB8A39-ACA1-4F4E-8A51-04424AF928BE@verizon.net>

I came across some problem using 'twistd' utility - that I would not  
have expected from it. The problem is - using 'twistd' to start  
application that requires command-line arguments. In other words, I  
would expect that 'twistd' passes command-line arguments to Python  
application - just as Python does.

But... I get following error:

Usage: twistd [options]
Options:
       --savestats        save the Stats object rather than the text  
output of
                          the profiler.
   -o, --no_save          do not save state on shutdown
   -e, --encrypted        The specified tap/aos/xml file is encrypted.
   .........................
   .........................

/usr/bin/twistd: option -a not recognized


when application is started either as 'twistd -y <fileName.py>' or  
'twistd --file <fileName.py>' followed by a list of command-line  
arguments

My question is: how is it possible to use 'twistd' to start  
applications that do require command-line arguments? Does anyone have  
suggestions?

In other words, I want to be able to start application using 'twistd'  
- just as it would have been started using standard Python:

 > python    <fileName.py> [argList]
 > twistd -y <fileName.py> [argList]



Second question to Twisted development team: how such an important  
case has slipped attention? I suggest this to be added to bug fix  
requests, with high priority.

Kind regards,

Valeriy Pogrebitskiy
vpogrebi at verizon.net




-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091001/c788ded5/attachment.html>

From steve at divillo.com  Thu Oct  1 14:27:55 2009
From: steve at divillo.com (Steve)
Date: Thu, 01 Oct 2009 13:27:55 -0700
Subject: [Twisted-Python] Twisted and db table changes
Message-ID: <20091001132755.e13ae574f475ea337c2ec5b0e03ebbf3.e837c4e2b3.wbe@email02.secureserver.net>

If you are using PostgreSQL you can use this technique

http://www.divillo.com



-------- Original Message --------
Subject: Re: [Twisted-Python] Twisted and db table changes
From: Mark Visser <markv at lumierevfx.com>
Date: Tue, September 29, 2009 12:04 pm
To: Twisted general discussion <twisted-python at twistedmatrix.com>

gary clark wrote:
> Hello,
>
> I have a server that needs to track changes on a table database.
>
> When a table changes it needs the server accesses the table and send data out.
>
> Not sure what the best approach to do this in twisted. Do I create a thread in twisted and monitor for any changes in a table or can I create
> a callback method to be triggered when a change occurs to table.
> 
Check out twisted.internet.task.LoopingCall. It will run a callback 
periodically, during which you can poll for changes.


-- 
Mark Visser, Software Director
Lumière VFX
Email: markv at lumierevfx.com
Phone: +1-514-316-1080 x3030


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From glyph at twistedmatrix.com  Thu Oct  1 14:51:54 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 1 Oct 2009 16:51:54 -0400
Subject: [Twisted-Python] Twisted and db table changes
In-Reply-To: <20091001132755.e13ae574f475ea337c2ec5b0e03ebbf3.e837c4e2b3.wbe@email02.secureserver.net>
References: <20091001132755.e13ae574f475ea337c2ec5b0e03ebbf3.e837c4e2b3.wbe@email02.secureserver.net>
Message-ID: <d9047f780910011351m69e89217gbab67e0dd17a03a@mail.gmail.com>

On Thu, Oct 1, 2009 at 4:27 PM, Steve <steve at divillo.com> wrote:

> If you are using PostgreSQL you can use this technique
>
> http://www.divillo.com
>
>
This is very interesting, thanks for sharing!

However, whenever I see a Twisted program calling select()... especially
select() in a thread ;-) I wonder if things couldn't be made a bit simpler,
responsive, and performant by just asking the Twisted main loop to monitor
the file descriptor instead.  It looks like "psycho pig two" has the
functionality that you need.

(Are you planning to keep this technique described on the front of your
website indefinitely?  If not, a more durable link would be great :).)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091001/b05ea77b/attachment.html>

From glyph at twistedmatrix.com  Thu Oct  1 14:55:34 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 1 Oct 2009 16:55:34 -0400
Subject: [Twisted-Python] Use of 'twistd' utility with command-line
	arguments
In-Reply-To: <F4DB8A39-ACA1-4F4E-8A51-04424AF928BE@verizon.net>
References: <F4DB8A39-ACA1-4F4E-8A51-04424AF928BE@verizon.net>
Message-ID: <d9047f780910011355r37419c68s5267212badde2fcc@mail.gmail.com>

On Thu, Oct 1, 2009 at 2:17 PM, Valeriy Pogrebitskiy
<vpogrebi at verizon.net>wrote:

> I came across some problem using 'twistd' utility - that I would not have
> expected from it. The problem is - using 'twistd' to start application that
> requires command-line arguments. In other words, I would expect that
> 'twistd' passes command-line arguments to Python application - just as
> Python does.
>

While this is a reasonable expectation, twistd does quite a lot and it
wouldn't be quite right to pass on all the arguments in a flat list the way
Python does.


> My question is: how is it possible to use 'twistd' to start applications
> that do require command-line arguments? Does anyone have suggestions?
>

twistd doesn't do this for scripts passed with the '-y' option.  Those are
supposed to be fully-formed configuration files; the options are present in
the file itself.

However, it's fairly straightforward to get what you want.  Instead of
writing a python configuration file, write a plug-in for twistd.  The
technique for doing so is documented here:

<http://twistedmatrix.com/projects/core/documentation/howto/tap.html>

Hope this helps.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091001/4e4c06c7/attachment.html>

From itamar at itamarst.org  Thu Oct  1 15:01:11 2009
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 1 Oct 2009 17:01:11 -0400 (EDT)
Subject: [Twisted-Python] Use of 'twistd' utility with command-line
 arguments
In-Reply-To: <F4DB8A39-ACA1-4F4E-8A51-04424AF928BE@verizon.net>
References: <F4DB8A39-ACA1-4F4E-8A51-04424AF928BE@verizon.net>
Message-ID: <9004.63.107.91.99.1254430871.squirrel@webmail.zoteca.com>

> I came across some problem using 'twistd' utility - that I would not
> have expected from it. The problem is - using 'twistd' to start
> application that requires command-line arguments. In other words, I
> would expect that 'twistd' passes command-line arguments to Python
> application - just as Python does.
>
> But... I get following error:

...

You can do this with twistd plugins:
http://twistedmatrix.com/projects/core/documentation/howto/tap.html





From steve at divillo.com  Thu Oct  1 15:49:29 2009
From: steve at divillo.com (Steve)
Date: Thu, 01 Oct 2009 14:49:29 -0700
Subject: [Twisted-Python] Twisted and db table changes
Message-ID: <20091001144929.e13ae574f475ea337c2ec5b0e03ebbf3.aa4f487056.wbe@email02.secureserver.net>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091001/4514e1b2/attachment.html>

From glyph at twistedmatrix.com  Thu Oct  1 15:53:24 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 1 Oct 2009 17:53:24 -0400
Subject: [Twisted-Python] Twisted and db table changes
In-Reply-To: <20091001144929.e13ae574f475ea337c2ec5b0e03ebbf3.aa4f487056.wbe@email02.secureserver.net>
References: <20091001144929.e13ae574f475ea337c2ec5b0e03ebbf3.aa4f487056.wbe@email02.secureserver.net>
Message-ID: <d9047f780910011453q3061e7e3kb055b9b57bdfa02f@mail.gmail.com>

On Thu, Oct 1, 2009 at 5:49 PM, Steve <steve at divillo.com> wrote:

> Thanks for the suggestion. I will look into replacing select but first I
> need to learn more about Twisted. I just discovered it a week or so ago.
>

In that case, welcome!

Probably the best route for you to take suggestions on making a ... shall we
say, twistier, async notify mechanism, would be for you to drop by the
#twisted IRC channel on freenode.net.  Off the top of my head I don't think
I know enough about Postgres to be more specific.


> I will probably change the main site. A more durable link would be
> http://www.divillo.com/asyncnotify.html
>

 Thanks.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091001/7b9475ad/attachment.html>

From burslem2001 at yahoo.com  Thu Oct  1 18:09:20 2009
From: burslem2001 at yahoo.com (gary clark)
Date: Thu, 1 Oct 2009 17:09:20 -0700 (PDT)
Subject: [Twisted-Python] Twisted and db table changes
In-Reply-To: <20091001144929.e13ae574f475ea337c2ec5b0e03ebbf3.aa4f487056.wbe@email02.secureserver.net>
Message-ID: <538272.73712.qm@web112503.mail.gq1.yahoo.com>

I'm building a website with twisted and pylons which I hope to release in December. I cant explain what the idea is, but I like python and the twisted site seems excellent. Smart guys, hopefully I can reciprocate one day.

Cheers,
Garyc

--- On Thu, 10/1/09, Steve <steve at divillo.com> wrote:

> From: Steve <steve at divillo.com>
> Subject: Re: [Twisted-Python] Twisted and db table changes
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Date: Thursday, October 1, 2009, 4:49 PM
> Thanks
> for the suggestion. I will look into replacing select but
> first I need to learn more about Twisted. I just discovered
> it a week or so ago.
> 
> I will probably change the main site. A more
> durable link would be http://www.divillo.com/asyncnotify.html
> 
> 
> 
> -------- Original Message --------
> 
> Subject: Re: [Twisted-Python] Twisted and db table changes
> 
> From: Glyph Lefkowitz <glyph at twistedmatrix.com>
> 
> Date: Thu, October 01, 2009 1:51 pm
> 
> To: Twisted general discussion
> <twisted-python at twistedmatrix.com>
> 
> 
> 
> On Thu, Oct 1, 2009 at 4:27 PM,
> Steve <steve at divillo.com>
> wrote:
>  If you are using PostgreSQL you
> can use this technique
>  
>  http://www.divillo.com
> 
> 
> This is very interesting, thanks for sharing!
> 
> However, whenever I see a Twisted program calling
> select()... especially select() in a thread ;-) I wonder if
> things couldn't be made a bit simpler, responsive, and
> performant by just asking the Twisted main loop to monitor
> the file descriptor instead.  It looks like
> "psycho pig two" has the functionality that you
> need.
>  
> (Are you planning to keep this technique described on the
> front of your website indefinitely?  If not, a more
> durable link would be great :).)
> 
> 
> _______________________________________________
> 
> Twisted-Python mailing list
> 
> Twisted-Python at twistedmatrix.com
> 
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 
>  
> 
> 
> -----Inline Attachment Follows-----
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 




From steve at divillo.com  Thu Oct  1 18:32:59 2009
From: steve at divillo.com (Steve)
Date: Thu, 01 Oct 2009 17:32:59 -0700
Subject: [Twisted-Python] Twisted and db table changes
In-Reply-To: <d9047f780910011453q3061e7e3kb055b9b57bdfa02f@mail.gmail.com>
References: <20091001144929.e13ae574f475ea337c2ec5b0e03ebbf3.aa4f487056.wbe@email02.secureserver.net>
	<d9047f780910011453q3061e7e3kb055b9b57bdfa02f@mail.gmail.com>
Message-ID: <1254443579.9474.42.camel@nori.divillo.com>

On Thu, 2009-10-01 at 17:53 -0400, Glyph Lefkowitz wrote:
> On Thu, Oct 1, 2009 at 5:49 PM, Steve <steve at divillo.com> wrote:
>         Thanks for the suggestion. I will look into replacing select
>         but first I need to learn more about Twisted. I just
>         discovered it a week or so ago.
>         
> 
> In that case, welcome!

So I was in this bookstore last weekend looking at the Python section
for nothing in particular. This O'reilly book called Twisted jumped out
at me because of the name so I started leafing through it. "Cool stuff"
I thought to myself. I look at the publication date and see that it is
pretty old. I ask the store clerk to check and see if there is a newer
edition. There wasn't so I went ahead and bought the book.

I thought your name was familiar for some reason! After picking up the
book again tonight I realized why :-)

Excellent work and probably the best name for a communications framework.

I do have a question about the book. Is there anything obsolete about
it? Anything I should watch out for?

Thanks!





From rutt.4 at osu.edu  Thu Oct  1 20:21:07 2009
From: rutt.4 at osu.edu (Benjamin Rutt)
Date: Thu, 1 Oct 2009 22:21:07 -0400
Subject: [Twisted-Python] getPeer() inside conch
In-Reply-To: <d9047f780909291948n5e433b54l6b4a5cf1b82ec831@mail.gmail.com>
References: <68f3f1f70909281710p1ddc3a47l134208c06b680cdb@mail.gmail.com>
	<d9047f780909282258v167e852cl76105ba92adb976a@mail.gmail.com>
	<68f3f1f70909291616tc8c23c3t75de943b725a9b21@mail.gmail.com>
	<d9047f780909291948n5e433b54l6b4a5cf1b82ec831@mail.gmail.com>
Message-ID: <68f3f1f70910011921h1e834454sa4f0b3701fafca61@mail.gmail.com>

(A/B) it looks like the SSHChannel implementation of getPeer() is faulty.
If I change my two-line implementation of getPeer() inside
SSHSessionProcessProtocol to simply 'return self.session.getPeer()', I get:

  File
"/home/ruttbe/dev/python/twisted-8.2.0-inst/lib/python/twisted/conch/ssh/session.py",
line 216, in getPeer
    return self.session.getPeer()
  File
"/home/ruttbe/dev/python/twisted-8.2.0-inst/lib/python/twisted/conch/ssh/channel.py",
line 261, in getPeer
    return('SSH', )+self.conn.transport.getPeer()
AttributeError: SSHServerTransport instance has no attribute 'getPeer'

(C) regarding adding a test, which file do you think would be suitable
here?  something in the twisted/test dir?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091001/a8a4cc21/attachment-0001.html>

From glyph at twistedmatrix.com  Thu Oct  1 20:53:05 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 1 Oct 2009 22:53:05 -0400
Subject: [Twisted-Python] getPeer() inside conch
In-Reply-To: <68f3f1f70910011921h1e834454sa4f0b3701fafca61@mail.gmail.com>
References: <68f3f1f70909281710p1ddc3a47l134208c06b680cdb@mail.gmail.com>
	<d9047f780909282258v167e852cl76105ba92adb976a@mail.gmail.com>
	<68f3f1f70909291616tc8c23c3t75de943b725a9b21@mail.gmail.com>
	<d9047f780909291948n5e433b54l6b4a5cf1b82ec831@mail.gmail.com>
	<68f3f1f70910011921h1e834454sa4f0b3701fafca61@mail.gmail.com>
Message-ID: <d9047f780910011953s5bdefa39s22697cd15639954c@mail.gmail.com>

On Thu, Oct 1, 2009 at 10:21 PM, Benjamin Rutt <rutt.4 at osu.edu> wrote:

> (A/B) it looks like the SSHChannel implementation of getPeer() is faulty.
> If I change my two-line implementation of getPeer() inside
> SSHSessionProcessProtocol to simply 'return self.session.getPeer()', I get:
>
>   File
> "/home/ruttbe/dev/python/twisted-8.2.0-inst/lib/python/twisted/conch/ssh/session.py",
> line 216, in getPeer
>     return self.session.getPeer()
>   File
> "/home/ruttbe/dev/python/twisted-8.2.0-inst/lib/python/twisted/conch/ssh/channel.py",
> line 261, in getPeer
>     return('SSH', )+self.conn.transport.getPeer()
> AttributeError: SSHServerTransport instance has no attribute 'getPeer'
>

OK, I give up :).  Looks like that is pretty clearly a bug, though.


> (C) regarding adding a test, which file do you think would be suitable
> here?  something in the twisted/test dir?
>

I am not sure which exact file, but something of the form
twisted/conch/test/test_<something>.py

Paul Swartz (z3p) should really weigh in on this.  You can find him on IRC
most days, although hopefully he's reading the mailing list :).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091001/90851e55/attachment.html>

From twisted at ralphm.ik.nu  Fri Oct  2 01:38:25 2009
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Fri, 02 Oct 2009 09:38:25 +0200
Subject: [Twisted-Python] twisted-wave?
In-Reply-To: <4A8EBFDF.6050602@nasa.gov>
References: <4A8EBFDF.6050602@nasa.gov>
Message-ID: <1254469105.2668.18.camel@dwaal>

On Fri, 2009-08-21 at 11:40 -0400, Stephen Waterbury wrote:
> Just curious what the twisted minions think of google wave
> and whether anyone is considering or working on a twisted
> implementation of the federation protocol,
> <http://www.waveprotocol.org/draft-protocol-spec>.

In general, implementing the protocol is the easy part. It is 'just'
XMPP and Twisted has support for that. It uses the XMPP Publish
Subscribe extension protocol [1], for which Wokkel [2] has extensive
support that should move to Twisted proper.

The thing that is harder is interpreting all the commands and applying
the Operational Transformation [1] algorithms that are communicated
throught the rather easy federation protocol. Oh, and use Protocol
Buffers, of course.

ralphm

[1] http://xmpp.org/extensions/xep-0060.html
[2] http://wokkel.ik.nu/
[3] http://www.waveprotocol.org/whitepapers/operational-transform






From lvh at laurensvh.be  Fri Oct  2 01:50:09 2009
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Fri, 2 Oct 2009 09:50:09 +0200
Subject: [Twisted-Python] twisted-wave?
In-Reply-To: <1254469105.2668.18.camel@dwaal>
References: <4A8EBFDF.6050602@nasa.gov> <1254469105.2668.18.camel@dwaal>
Message-ID: <cedc0c090910020050i176d5b44k809560d073bf7f97@mail.gmail.com>

If anyone starts doing serious stuff with this, feel free to let me
know, I might be able to help :-) Received an invite for Google Wave,
but unsure if it's going to be a second GMail again (invites are
pretty useless when everyone has a million of them)...

On Fri, Oct 2, 2009 at 9:38 AM, Ralph Meijer <twisted at ralphm.ik.nu> wrote:
> On Fri, 2009-08-21 at 11:40 -0400, Stephen Waterbury wrote:
>> Just curious what the twisted minions think of google wave
>> and whether anyone is considering or working on a twisted
>> implementation of the federation protocol,
>> <http://www.waveprotocol.org/draft-protocol-spec>.
>
> In general, implementing the protocol is the easy part. It is 'just'
> XMPP and Twisted has support for that. It uses the XMPP Publish
> Subscribe extension protocol [1], for which Wokkel [2] has extensive
> support that should move to Twisted proper.
>
> The thing that is harder is interpreting all the commands and applying
> the Operational Transformation [1] algorithms that are communicated
> throught the rather easy federation protocol. Oh, and use Protocol
> Buffers, of course.
>
> ralphm
>
> [1] http://xmpp.org/extensions/xep-0060.html
> [2] http://wokkel.ik.nu/
> [3] http://www.waveprotocol.org/whitepapers/operational-transform
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From exarkun at twistedmatrix.com  Fri Oct  2 08:40:32 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 02 Oct 2009 14:40:32 -0000
Subject: [Twisted-Python] XML parsing on twisted
In-Reply-To: <635103.87666.qm@web112510.mail.gq1.yahoo.com>
References: <789701.43712.qm@web112519.mail.gq1.yahoo.com>
	<635103.87666.qm@web112510.mail.gq1.yahoo.com>
Message-ID: <20091002144032.1533.250771487.divmod.xquotient.554@localhost.localdomain>

On 1 Oct, 05:53 pm, burslem2001 at yahoo.com wrote:
>Hello,
>
>Probably a pretty standard question. However what are recommended 
>mechanics of parsing XML on twisted? I have a humongous string that 
>needs to be parsed and pushed into a database in the right columns.

Depending on how big the strings are, you may just want to parse them in 
the obvious way and then deal with the results.  If the strings are 
really epically big, then you have a few options.

You can handle them in another thread in the usual way. 
twisted.internet.threads.deferToThread gives you easy access to a 
threadpool which you can use for tasks like this.

You can hand them off to another process and deal with them there. 
Twisted has child process control built in, via reactor.spawnProcess. 
You may also find the Ampoule library (not part of Twisted) handy for 
this.

You can also do the XML parsing incrementally.  The Python standard 
library includes a SAX parser which you might want to use for this.  I 
think the newer APIs (eg etree) also support some forms of incremental 
parsing.  This should let you spread out the task of handling the XML 
over a longer period of time, thus avoiding blocking the reactor thread 
for unreasonable amounts of time.

Jean-Paul



From vitaly at synapticvision.com  Fri Oct  2 10:47:18 2009
From: vitaly at synapticvision.com (vitaly at synapticvision.com)
Date: Fri, 02 Oct 2009 12:47:18 -0400
Subject: [Twisted-Python] twisted python usage
Message-ID: <20091002124718.70485crfem4wdig4@216.129.205.5>

hi,
I'm trying to accomplish to work couple of CLI commands without luck.
http://twistedmatrix.com/projects/core/documentation/howto/options.html and  
test/test_usage.py were not really helpful.

Commands:
1.python test.py cmd1 -s 'dfsgdfg' -e 'sdfgdfg'
2.python test.py cmd2 -t 123
3.python test.py cmd3 cmd4 -t '2345ge' -y 'rebtr' cmd5 -p 'wgerg'

Appreciate any help.




From vpogrebi at verizon.net  Fri Oct  2 10:14:19 2009
From: vpogrebi at verizon.net (Valeriy Pogrebitskiy)
Date: Fri, 02 Oct 2009 12:14:19 -0400
Subject: [Twisted-Python] Use of 'twistd' utility with command-line
 arguments
In-Reply-To: <d9047f780910011355r37419c68s5267212badde2fcc@mail.gmail.com>
References: <F4DB8A39-ACA1-4F4E-8A51-04424AF928BE@verizon.net>
	<d9047f780910011355r37419c68s5267212badde2fcc@mail.gmail.com>
Message-ID: <93B58057-6954-4EB4-AA61-F8FD050A29A5@verizon.net>

Thank you!

I still disagree with the following statement:

> While this is a reasonable expectation, twistd does quite a lot and  
> it wouldn't be quite right to pass on all the arguments in a flat  
> list the way Python does.

Something can be done about that. One possible approach could be to  
use two argument lists (one - 'twistd' arguments, second -  
application's arguments) and enforce following rule(s):

- all arguments that follow after 'twistd' but before Python file name  
(*.py) are considered as 'twistd' arguments (loaded into <twistdArgs>  
list;
- all arguments that follow Python file name (*.py) are considered as  
Python application's arguments (loaded into <appArgs> list and get  
passed to that application)

Thus, it should be possible to execute following commands:

twistd <twistd_args> *.py <app_args>

Using this approach, it should be simple enough (at least - logically)  
to allow passing arguments to an application. Of course, this would  
also limit "duplicate" arguments (same argument appearing in both  
lists) - due to 'getopt' limitations... But if these rules and  
limitations are well documented - developers should be able to work  
around this problem.

I suggest that Twisted dev. team looks into implementing this...


Kind regards,

Valeriy Pogrebitskiy
vpogrebi at verizon.net




On Oct 1, 2009, at 4:55 PM, Glyph Lefkowitz wrote:

> On Thu, Oct 1, 2009 at 2:17 PM, Valeriy Pogrebitskiy <vpogrebi at verizon.net 
> > wrote:
> I came across some problem using 'twistd' utility - that I would not  
> have expected from it. The problem is - using 'twistd' to start  
> application that requires command-line arguments. In other words, I  
> would expect that 'twistd' passes command-line arguments to Python  
> application - just as Python does.
>
> While this is a reasonable expectation, twistd does quite a lot and  
> it wouldn't be quite right to pass on all the arguments in a flat  
> list the way Python does.
>
> My question is: how is it possible to use 'twistd' to start  
> applications that do require command-line arguments? Does anyone  
> have suggestions?
>
> twistd doesn't do this for scripts passed with the '-y' option.   
> Those are supposed to be fully-formed configuration files; the  
> options are present in the file itself.
>
> However, it's fairly straightforward to get what you want.  Instead  
> of writing a python configuration file, write a plug-in for twistd.   
> The technique for doing so is documented here:
>
> <http://twistedmatrix.com/projects/core/documentation/howto/tap.html>
>
> Hope this helps.
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091002/a1007c89/attachment.html>

From listsin at integrateddevcorp.com  Fri Oct  2 11:18:56 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Fri, 2 Oct 2009 13:18:56 -0400
Subject: [Twisted-Python] Use of 'twistd' utility with command-line
	arguments
In-Reply-To: <93B58057-6954-4EB4-AA61-F8FD050A29A5@verizon.net>
References: <F4DB8A39-ACA1-4F4E-8A51-04424AF928BE@verizon.net>
	<d9047f780910011355r37419c68s5267212badde2fcc@mail.gmail.com>
	<93B58057-6954-4EB4-AA61-F8FD050A29A5@verizon.net>
Message-ID: <D904C397-5D35-4D55-9A7C-0A0414ED82E7@integrateddevcorp.com>


On Oct 2, 2009, at 12:14 PM, Valeriy Pogrebitskiy wrote:
>
> I suggest that Twisted dev. team looks into implementing this...

Since we're telling other people how to spend their time...I suggest  
that you supply a patch.

Thanks,

S

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091002/b63c1ce8/attachment.html>

From exarkun at twistedmatrix.com  Fri Oct  2 11:23:06 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 02 Oct 2009 17:23:06 -0000
Subject: [Twisted-Python] Use of 'twistd' utility with
	command-line	arguments
In-Reply-To: <93B58057-6954-4EB4-AA61-F8FD050A29A5@verizon.net>
References: <F4DB8A39-ACA1-4F4E-8A51-04424AF928BE@verizon.net>
	<d9047f780910011355r37419c68s5267212badde2fcc@mail.gmail.com>
	<93B58057-6954-4EB4-AA61-F8FD050A29A5@verizon.net>
Message-ID: <20091002172306.1533.1914911860.divmod.xquotient.569@localhost.localdomain>

On 04:14 pm, vpogrebi at verizon.net wrote:
>Thank you!
>
>I still disagree with the following statement:
>>While this is a reasonable expectation, twistd does quite a lot and 
>>it wouldn't be quite right to pass on all the arguments in a flat 
>>list the way Python does.
>
>Something can be done about that. One possible approach could be to 
>use two argument lists (one - 'twistd' arguments, second - 
>application's arguments) and enforce following rule(s):

Given this:
>>However, it's fairly straightforward to get what you want.  Instead 
>>of writing a python configuration file, write a plug-in for twistd. 
>>The technique for doing so is documented here:

what is your motivation for seeking out this feature?

Also, Glyph didn't mention #1490, an open ticket describing yet another 
way twistd might be invoked which allows command line arguments to be 
passed to the application.

Jean-Paul



From glyph at twistedmatrix.com  Fri Oct  2 11:26:32 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 2 Oct 2009 13:26:32 -0400
Subject: [Twisted-Python] twisted python usage
In-Reply-To: <20091002124718.70485crfem4wdig4@216.129.205.5>
References: <20091002124718.70485crfem4wdig4@216.129.205.5>
Message-ID: <d9047f780910021026r39009017w370e67136e3baa04@mail.gmail.com>

On Fri, Oct 2, 2009 at 12:47 PM, <vitaly at synapticvision.com> wrote:

> hi,
>

Hi, Vitaly!


> I'm trying to accomplish to work couple of CLI commands without luck.
>


> http://twistedmatrix.com/projects/core/documentation/howto/options.htmland
> test/test_usage.py were not really helpful.
>

Why weren't these helpful?  To me, they seem to clearly explain everything
you're trying to do.


> Commands:
> 1.python test.py cmd1 -s 'dfsgdfg' -e 'sdfgdfg'
> 2.python test.py cmd2 -t 123
> 3.python test.py cmd3 cmd4 -t '2345ge' -y 'rebtr' cmd5 -p 'wgerg'
>

These commands are way too abstract.  Especially that last one ("cmd3 cmd4")
could be interpreted in a few different ways.  Can you provide a more
specific example of what you're actually trying to do, and what the Options
API, documentation, and tests don't explain?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091002/05240559/attachment.html>

From paulswartz at gmail.com  Fri Oct  2 11:28:16 2009
From: paulswartz at gmail.com (Paul Swartz)
Date: Fri, 2 Oct 2009 13:28:16 -0400
Subject: [Twisted-Python] getPeer() inside conch
In-Reply-To: <d9047f780910011953s5bdefa39s22697cd15639954c@mail.gmail.com>
References: <68f3f1f70909281710p1ddc3a47l134208c06b680cdb@mail.gmail.com> 
	<d9047f780909282258v167e852cl76105ba92adb976a@mail.gmail.com> 
	<68f3f1f70909291616tc8c23c3t75de943b725a9b21@mail.gmail.com> 
	<d9047f780909291948n5e433b54l6b4a5cf1b82ec831@mail.gmail.com> 
	<68f3f1f70910011921h1e834454sa4f0b3701fafca61@mail.gmail.com> 
	<d9047f780910011953s5bdefa39s22697cd15639954c@mail.gmail.com>
Message-ID: <324cfb540910021028o571b480g65e79b03fb50a190@mail.gmail.com>

On Thu, Oct 1, 2009 at 10:53 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> On Thu, Oct 1, 2009 at 10:21 PM, Benjamin Rutt <rutt.4 at osu.edu> wrote:
>>
>> (A/B) it looks like the SSHChannel implementation of getPeer() is faulty.
>> If I change my two-line implementation of getPeer() inside
>> SSHSessionProcessProtocol to simply 'return self.session.getPeer()', I get:
>>   File
>> "/home/ruttbe/dev/python/twisted-8.2.0-inst/lib/python/twisted/conch/ssh/session.py",
>> line 216, in getPeer
>>     return self.session.getPeer()
>>   File
>> "/home/ruttbe/dev/python/twisted-8.2.0-inst/lib/python/twisted/conch/ssh/channel.py",
>> line 261, in getPeer
>>     return('SSH', )+self.conn.transport.getPeer()
>> AttributeError: SSHServerTransport instance has no attribute 'getPeer'
>
> OK, I give up :).  Looks like that is pretty clearly a bug, though.

You're correct; it's bug http://twistedmatrix.com/trac/ticket/2997

There's also http://twistedmatrix.com/trac/ticket/2453 for adding
getHost()/getPeer() to SSHSessionProcessProtocol.

A patch should probably be against
branches/conch-old-session-tests-4047, which already includes tests
for other things in twisted/conch/ssh/session.py

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://paulswartz.net/
AIM: z3penguin



From glyph at twistedmatrix.com  Fri Oct  2 11:30:23 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 2 Oct 2009 13:30:23 -0400
Subject: [Twisted-Python] Use of 'twistd' utility with command-line
	arguments
In-Reply-To: <93B58057-6954-4EB4-AA61-F8FD050A29A5@verizon.net>
References: <F4DB8A39-ACA1-4F4E-8A51-04424AF928BE@verizon.net>
	<d9047f780910011355r37419c68s5267212badde2fcc@mail.gmail.com>
	<93B58057-6954-4EB4-AA61-F8FD050A29A5@verizon.net>
Message-ID: <d9047f780910021030k41eb7435me6b92100d41e1ba6@mail.gmail.com>

On Fri, Oct 2, 2009 at 12:14 PM, Valeriy Pogrebitskiy
<vpogrebi at verizon.net>wrote:


> Something can be done about that. One possible approach could be to use two
> argument lists (one - 'twistd' arguments, second - application's arguments)
> and enforce following rule(s):
>

As Jean-Paul mentioned, there is a ticket which almost exactly describes
your idea: #1490.  In particular, you can read my last comment explaining
what that ticket is supposed to be about:

http://twistedmatrix.com/trac/ticket/1490#comment:39

If you'd like to implement what's specified there, we would be happy to
receive your patch :).  Making 'twistd foo.py' equivalent to 'twistd run
foo' is a trivial afterthought once #1490 is implemented.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091002/151de983/attachment.html>

From vitaly at synapticvision.com  Fri Oct  2 11:47:18 2009
From: vitaly at synapticvision.com (vitaly at synapticvision.com)
Date: Fri, 02 Oct 2009 13:47:18 -0400
Subject: [Twisted-Python] twisted python usage
In-Reply-To: <d9047f780910021026r39009017w370e67136e3baa04@mail.gmail.com>
References: <20091002124718.70485crfem4wdig4@216.129.205.5>
	<d9047f780910021026r39009017w370e67136e3baa04@mail.gmail.com>
Message-ID: <20091002134718.168532kl1nwogfwg@216.129.205.5>

Quoting "Glyph Lefkowitz" <glyph at twistedmatrix.com>:

> On Fri, Oct 2, 2009 at 12:47 PM, <vitaly at synapticvision.com> wrote:
>
>> hi,
>>
>
> Hi, Vitaly!
>
>
>> I'm trying to accomplish to work couple of CLI commands without luck.
>>
>
>
>> http://twistedmatrix.com/projects/core/documentation/howto/options.htmland
>> test/test_usage.py were not really helpful.
>>
>
> Why weren't these helpful?  To me, they seem to clearly explain everything
> you're trying to do.

First of all - I'm sorry, I've succeed to accomplish first two  
commands with previous doc link partially: I can't read value per key  
...

Trying to follow the following snip, how can I read for example value  
of key -m?
CLI: python test.py import -m 'abc321'

from twisted.python import usage
import sys

class ImportOptions(usage.Options):
     optParameters = [
         ['module',  'm', 1, None],
         ['vendor',  'v', None, None],
         ['release', 'r', None]
     ]

class CheckoutOptions(usage.Options):
     optParameters = [['module', 'm', None, None], ['tag', 'r', None, None]]

class Options(usage.Options):
     subCommands = [['import', None, ImportOptions, "Do an Import"],
                    ['checkout', None, CheckoutOptions, "Do a Checkout"]]

     optParameters = [
         ['compression', 'z', 0, 'Use compression'],
         ['repository', 'r', None, 'Specify an alternate repository']
     ]

def doImport():
     print "TODO: how can I now read the value of key, let's say of -m key?"

def doCheckout():
     print "TODO: same as doImport()"

config = Options()
try:
     config.parseOptions()
except usage.UsageError, errortext:
     print '%s: %s' % (sys.argv[0], errortext)
     print '%s: Try --help for usage details.' % (sys.argv[0])
     sys.exit(1)

if config.subCommand == 'import':
     doImport(config.subOptions)
elif config.subCommand == 'checkout':
     doCheckout(config.subOptions)


>
>
>> Commands:
>> 1.python test.py cmd1 -s 'dfsgdfg' -e 'sdfgdfg'
>> 2.python test.py cmd2 -t 123
>> 3.python test.py cmd3 cmd4 -t '2345ge' -y 'rebtr' cmd5 -p 'wgerg'
>>
>
> These commands are way too abstract.  Especially that last one ("cmd3 cmd4")
> could be interpreted in a few different ways.  Can you provide a more
> specific example of what you're actually trying to do, and what the Options
> API, documentation, and tests don't explain?
>





From exarkun at twistedmatrix.com  Fri Oct  2 12:00:25 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 02 Oct 2009 18:00:25 -0000
Subject: [Twisted-Python] twisted python usage
In-Reply-To: <20091002134718.168532kl1nwogfwg@216.129.205.5>
References: <20091002124718.70485crfem4wdig4@216.129.205.5>
	<d9047f780910021026r39009017w370e67136e3baa04@mail.gmail.com>
	<20091002134718.168532kl1nwogfwg@216.129.205.5>
Message-ID: <20091002180025.1533.1810599265.divmod.xquotient.581@localhost.localdomain>

On 05:47 pm, vitaly at synapticvision.com wrote:
>Quoting "Glyph Lefkowitz" <glyph at twistedmatrix.com>:
>>On Fri, Oct 2, 2009 at 12:47 PM, <vitaly at synapticvision.com> wrote:
>>>hi,
>>Hi, Vitaly!
>>>I'm trying to accomplish to work couple of CLI commands without luck.
>>
>>>http://twistedmatrix.com/projects/core/documentation/howto/options.htmland
>>>test/test_usage.py were not really helpful.
>>
>>Why weren't these helpful?  To me, they seem to clearly explain 
>>everything
>>you're trying to do.
>
>First of all - I'm sorry, I've succeed to accomplish first two
>commands with previous doc link partially: I can't read value per key
>...
>
>Trying to follow the following snip, how can I read for example value
>of key -m?
>CLI: python test.py import -m 'abc321'
>
>from twisted.python import usage
>import sys
>
>class ImportOptions(usage.Options):
>     optParameters = [
>         ['module',  'm', 1, None],
>         ['vendor',  'v', None, None],
>         ['release', 'r', None]
>     ]

I think the idiomatic approach would be to add another method to this 
class to replace the "doImport" function below:

    def execute(self):
        print "My -m option was", repr(self['module'])
>
>class CheckoutOptions(usage.Options):
>     optParameters = [['module', 'm', None, None], ['tag', 'r', None, 
>None]]

And again here, replacing "doCheckout":

    def execute(self):
        print "*My* -m option was", repr(self['module'])
>
>class Options(usage.Options):
>     subCommands = [['import', None, ImportOptions, "Do an Import"],
>                    ['checkout', None, CheckoutOptions, "Do a 
>Checkout"]]
>
>     optParameters = [
>         ['compression', 'z', 0, 'Use compression'],
>         ['repository', 'r', None, 'Specify an alternate repository']
>     ]
>
>def doImport():
>     print "TODO: how can I now read the value of key, let's say of -m 
>key?"
>
>def doCheckout():
>     print "TODO: same as doImport()"
>
>config = Options()
>try:
>     config.parseOptions()
>except usage.UsageError, errortext:
>     print '%s: %s' % (sys.argv[0], errortext)
>     print '%s: Try --help for usage details.' % (sys.argv[0])
>     sys.exit(1)
>
>if config.subCommand == 'import':
>     doImport(config.subOptions)
>elif config.subCommand == 'checkout':
>     doCheckout(config.subOptions)

Then replace this thing with this:

    config.subOptions.execute()

But the answer to your original question seems to just be 
"options[optionName]".

Jean-Paul



From vitaly at synapticvision.com  Fri Oct  2 12:18:50 2009
From: vitaly at synapticvision.com (vitaly at synapticvision.com)
Date: Fri, 02 Oct 2009 14:18:50 -0400
Subject: [Twisted-Python] twisted python usage
In-Reply-To: <20091002180025.1533.1810599265.divmod.xquotient.581@localhost.localdomain>
References: <20091002124718.70485crfem4wdig4@216.129.205.5>
	<d9047f780910021026r39009017w370e67136e3baa04@mail.gmail.com>
	<20091002134718.168532kl1nwogfwg@216.129.205.5>
	<20091002180025.1533.1810599265.divmod.xquotient.581@localhost.localdomain>
Message-ID: <20091002141850.28092ylhvr9pkug4@216.129.205.5>


bingo! thank you guys a lot! it was all about 'repr(self['module'])'.

Glyph, sorry man, did mean to hurt and shit on twisted: personally and  
professionally I think its a VERY professional framework, and I'm  
using it about a year.

Good job guys, keep doing.


Quoting exarkun at twistedmatrix.com:

> On 05:47 pm, vitaly at synapticvision.com wrote:
>> Quoting "Glyph Lefkowitz" <glyph at twistedmatrix.com>:
>>> On Fri, Oct 2, 2009 at 12:47 PM, <vitaly at synapticvision.com> wrote:
>>>> hi,
>>> Hi, Vitaly!
>>>> I'm trying to accomplish to work couple of CLI commands without luck.
>>>
>>>> http://twistedmatrix.com/projects/core/documentation/howto/options.htmland
>>>> test/test_usage.py were not really helpful.
>>>
>>> Why weren't these helpful?  To me, they seem to clearly explain
>>> everything
>>> you're trying to do.
>>
>> First of all - I'm sorry, I've succeed to accomplish first two
>> commands with previous doc link partially: I can't read value per key
>> ...
>>
>> Trying to follow the following snip, how can I read for example value
>> of key -m?
>> CLI: python test.py import -m 'abc321'
>>
>> from twisted.python import usage
>> import sys
>>
>> class ImportOptions(usage.Options):
>>     optParameters = [
>>         ['module',  'm', 1, None],
>>         ['vendor',  'v', None, None],
>>         ['release', 'r', None]
>>     ]
>
> I think the idiomatic approach would be to add another method to this
> class to replace the "doImport" function below:
>
>     def execute(self):
>         print "My -m option was", repr(self['module'])
>>
>> class CheckoutOptions(usage.Options):
>>     optParameters = [['module', 'm', None, None], ['tag', 'r', None,
>> None]]
>
> And again here, replacing "doCheckout":
>
>     def execute(self):
>         print "*My* -m option was", repr(self['module'])
>>
>> class Options(usage.Options):
>>     subCommands = [['import', None, ImportOptions, "Do an Import"],
>>                    ['checkout', None, CheckoutOptions, "Do a
>> Checkout"]]
>>
>>     optParameters = [
>>         ['compression', 'z', 0, 'Use compression'],
>>         ['repository', 'r', None, 'Specify an alternate repository']
>>     ]
>>
>> def doImport():
>>     print "TODO: how can I now read the value of key, let's say of -m
>> key?"
>>
>> def doCheckout():
>>     print "TODO: same as doImport()"
>>
>> config = Options()
>> try:
>>     config.parseOptions()
>> except usage.UsageError, errortext:
>>     print '%s: %s' % (sys.argv[0], errortext)
>>     print '%s: Try --help for usage details.' % (sys.argv[0])
>>     sys.exit(1)
>>
>> if config.subCommand == 'import':
>>     doImport(config.subOptions)
>> elif config.subCommand == 'checkout':
>>     doCheckout(config.subOptions)
>
> Then replace this thing with this:
>
>     config.subOptions.execute()
>
> But the answer to your original question seems to just be
> "options[optionName]".
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>





From glyph at twistedmatrix.com  Fri Oct  2 12:28:27 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 2 Oct 2009 14:28:27 -0400
Subject: [Twisted-Python] twisted python usage
In-Reply-To: <20091002141850.28092ylhvr9pkug4@216.129.205.5>
References: <20091002124718.70485crfem4wdig4@216.129.205.5>
	<d9047f780910021026r39009017w370e67136e3baa04@mail.gmail.com>
	<20091002134718.168532kl1nwogfwg@216.129.205.5>
	<20091002180025.1533.1810599265.divmod.xquotient.581@localhost.localdomain>
	<20091002141850.28092ylhvr9pkug4@216.129.205.5>
Message-ID: <d9047f780910021128o2dc1e00cwa8bd0bfc566ccff@mail.gmail.com>

On Fri, Oct 2, 2009 at 2:18 PM, <vitaly at synapticvision.com> wrote:

>
> bingo! thank you guys a lot! it was all about 'repr(self['module'])'.
>

Great!


> Glyph, sorry man, did mean to hurt and shit on twisted: personally and
> professionally I think its a VERY professional framework, and I'm
> using it about a year.
>

Did you do something terrible somewhere else? Because just reading this
e-mail exchange I didn't like you insulted Twisted at all.  You found a
weakness in the docs, you were confused, you asked a question, it was
answered, and everybody's happy.  Hooray, the process works!

Good job guys, keep doing.
>

Thanks :).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091002/d77cd2a3/attachment-0001.html>

From glyph at twistedmatrix.com  Fri Oct  2 15:40:05 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 2 Oct 2009 17:40:05 -0400
Subject: [Twisted-Python] Boston Twisted Sprint
In-Reply-To: <b282a1340909201909w5eb75b2fve13a00ffe32cc368@mail.gmail.com>
References: <b282a1340909201909w5eb75b2fve13a00ffe32cc368@mail.gmail.com>
Message-ID: <d9047f780910021440p44574869reda467655cdeffab@mail.gmail.com>

On Sun, Sep 20, 2009 at 10:09 PM, Jessica McKellar <
jessica.mckellar at gmail.com> wrote:

> The proposal was for a sprint in Boston from September 28-October 2. That
> starts a week from today.
>

... and they end today.

This was a pretty small sprint, but I still think it has been a success.  It
motivated Paul to drag himself all the way out to eastern mass to get some
Conch fixes done, and we (hopefully) encouraged some folks to help with the
release.

Thanks a lot to Jessica for organizing this.

Let's do another one soon.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091002/87c4be2e/attachment.html>

From burslem2001 at yahoo.com  Sat Oct  3 16:30:15 2009
From: burslem2001 at yahoo.com (gary clark)
Date: Sat, 3 Oct 2009 15:30:15 -0700 (PDT)
Subject: [Twisted-Python]  XML parsing on twisted
Message-ID: <613196.98595.qm@web112516.mail.gq1.yahoo.com>

Hello,

I went to use the SAX library to perform parsing. However I hit an unusual
problem.

Its having a problem parsing a token that has a '&' it just crashes. It certainly woke me up when I witnessed this.

<books> Jim & Nancy </books>

are passed to the ContentHandler class. When characters(self,chars) member gets called I perform self.book+=chars to reassemble the string.

I dump out the self.book string as its being assembled. If I replace the '&' character with "and" then its Ok. Of course I dont want to have to replace '&' with 'and'.

Not good. So has anybody else seen this problem. I'm assuming it thinks its a reference and becomes confused when I attempt to add a reference.

Much appreciated,
Garyc




From amauryfa at gmail.com  Sat Oct  3 16:42:06 2009
From: amauryfa at gmail.com (Amaury Forgeot d'Arc)
Date: Sun, 4 Oct 2009 00:42:06 +0200
Subject: [Twisted-Python] XML parsing on twisted
In-Reply-To: <613196.98595.qm@web112516.mail.gq1.yahoo.com>
References: <613196.98595.qm@web112516.mail.gq1.yahoo.com>
Message-ID: <e27efe130910031542j25f4d316l814f363d6b326e9c@mail.gmail.com>

Hi,

2009/10/4 gary clark <burslem2001 at yahoo.com>:
> Hello,
>
> I went to use the SAX library to perform parsing. However I hit an unusual
> problem.
>
> Its having a problem parsing a token that has a '&' it just crashes. It certainly woke me up when I witnessed this.
>
> <books> Jim & Nancy </books>
>
> are passed to the ContentHandler class. When characters(self,chars) member gets called I perform self.book+=chars to reassemble the string.
>
> I dump out the self.book string as its being assembled. If I replace the '&' character with "and" then its Ok. Of course I dont want to have to replace '&' with 'and'.
>
> Not good. So has anybody else seen this problem. I'm assuming it thinks its a reference and becomes confused when I attempt to add a reference.
>
> Much appreciated,

the & character is a special character in XML. You are parsing an
invalid XML string.
This page says it well:
http://www.devx.com/tips/Tip/14068
(a 10 years old "tip of the day"!)

-- 
Amaury Forgeot d'Arc



From burslem2001 at yahoo.com  Sat Oct  3 20:25:34 2009
From: burslem2001 at yahoo.com (gary clark)
Date: Sat, 3 Oct 2009 19:25:34 -0700 (PDT)
Subject: [Twisted-Python] XML parsing on twisted
In-Reply-To: <e27efe130910031542j25f4d316l814f363d6b326e9c@mail.gmail.com>
Message-ID: <51108.15369.qm@web112513.mail.gq1.yahoo.com>

thanks. ughh! 10 years old. oh boy.

Garyc

--- On Sat, 10/3/09, Amaury Forgeot d'Arc <amauryfa at gmail.com> wrote:

> From: Amaury Forgeot d'Arc <amauryfa at gmail.com>
> Subject: Re: [Twisted-Python] XML parsing on twisted
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Date: Saturday, October 3, 2009, 5:42 PM
> Hi,
> 
> 2009/10/4 gary clark <burslem2001 at yahoo.com>:
> > Hello,
> >
> > I went to use the SAX library to perform parsing.
> However I hit an unusual
> > problem.
> >
> > Its having a problem parsing a token that has a
> '&' it just crashes. It certainly woke me up when I
> witnessed this.
> >
> > <books> Jim & Nancy </books>
> >
> > are passed to the ContentHandler class. When
> characters(self,chars) member gets called I perform
> self.book+=chars to reassemble the string.
> >
> > I dump out the self.book string as its being
> assembled. If I replace the '&' character with "and"
> then its Ok. Of course I dont want to have to replace
> '&' with 'and'.
> >
> > Not good. So has anybody else seen this problem. I'm
> assuming it thinks its a reference and becomes confused when
> I attempt to add a reference.
> >
> > Much appreciated,
> 
> the & character is a special character in XML. You are
> parsing an
> invalid XML string.
> This page says it well:
> http://www.devx.com/tips/Tip/14068
> (a 10 years old "tip of the day"!)
> 
> -- 
> Amaury Forgeot d'Arc
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 




From exarkun at twistedmatrix.com  Sat Oct  3 22:05:20 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 04 Oct 2009 04:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1254629120.33.847300174@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091004/6db9eb1f/attachment-0001.html>

From jacopo.pecci at gmail.com  Mon Oct  5 07:14:02 2009
From: jacopo.pecci at gmail.com (jacopo.pecci at gmail.com)
Date: Mon, 05 Oct 2009 13:14:02 +0000
Subject: [Twisted-Python] PB vs JMS
Message-ID: <0016e6d640873a273304752fe3d3@google.com>

I looked at PB for an architecture with one client distributing some  
processing to several servers. Now I came across JMS and I have seen that  
using ActiveMQ with the Stomp protocol there would be a good support for  
Python.
Surprising I couldn't find any article comparing the two technologies. I  
wonder if they target different problems (it doesn't look to me).
Is anyone able to sketch advantages of one solution against the other?

Thanks,
Jacopo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091005/3e4507b6/attachment-0001.html>

From kevin.horn at gmail.com  Mon Oct  5 10:22:22 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 5 Oct 2009 11:22:22 -0500
Subject: [Twisted-Python] Structural issues in Lore XHTML documents
Message-ID: <562bcc10910050922p1623c273g49422ebc4ddf37a9@mail.gmail.com>

I've been looking over the xhtml documents used to generate the twisted
documentation, and I've noticed a number of issues:

- some docs do not have a DOCTYPE declaration, I think they should all have
one
- of those documents that do have DOCTYPEs, some are using xhmtl-strict, and
some are using xhtml-transitional, which is preferred?  I think they should
all use the same one
- some of the docs are lacking an xml namespace attribute in their root
<html> element...I think they should either all have one, or none of them
should
- according to:
http://twistedmatrix.com/projects/lore/documentation/howto/lore.html
  all of the docs should have the same text in both their <title> element
and their <h1> element...this is not the case

I'm planning to correct some of these issues, but I wanted to get others'
opinions on exactly how to go about it.  For example, what DOCTYPE to use,
XMLNS to use, etc.

Thoughts?  Suggestions?

I've opened a ticket (#4050) at http://twistedmatrix.com/trac/ticket/4050
Please comment.

Thanks,

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091005/16670b75/attachment.html>

From kevin.horn at gmail.com  Mon Oct  5 10:34:42 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 5 Oct 2009 11:34:42 -0500
Subject: [Twisted-Python] getting #2015 (Generic SASL library) moving again?
Message-ID: <562bcc10910050934x18e7781dl5e40f4a61edda4e0@mail.gmail.com>

I'd like to see this ticket get moving again.  I've gone over what's been
done so far (and put my comments in the ticket), and it looks like
everything is at least mostly ready to be merged into the Twisted trunk.

So what else needs to be done to get this to happen?  I'm happy to try and
get it done, but a little direction would be really handy. ;)

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091005/ecf0f4ff/attachment.html>

From drew.smathers at gmail.com  Mon Oct  5 11:21:52 2009
From: drew.smathers at gmail.com (Drew Smathers)
Date: Mon, 5 Oct 2009 13:21:52 -0400
Subject: [Twisted-Python] PB vs JMS
In-Reply-To: <0016e6d640873a273304752fe3d3@google.com>
References: <0016e6d640873a273304752fe3d3@google.com>
Message-ID: <368574aa0910051021g702e4fffx6df865f5dfe60588@mail.gmail.com>

On Mon, Oct 5, 2009 at 9:14 AM, <jacopo.pecci at gmail.com> wrote:

> I looked at PB for an architecture with one client distributing some
> processing to several servers. Now I came across JMS and I have seen that
> using ActiveMQ with the Stomp protocol there would be a good support for
> Python.
> Surprising I couldn’t find any article comparing the two technologies. I
> wonder if they target different problems (it doesn’t look to me).
> Is anyone able to sketch advantages of one solution against the other?
>
>
I don't think there is a good comparison between the two because they're
different technologies addressing different problems.  JMS is a messaging
middleware defined at the Java language API level (hence the need to for
STOMP protocol and similar adapting layers for use with Python or other
non-Java languages).  PB is a "secure, easy-to-use Remote Procedure Call
(RPC) mechanism."

For the system you're descibing it seems like message middleware is more
what you want.  Unless you want to implement your own load balacing, work
distribution and failover algorithms?  Another alternative to ActiveMQ is
RabbitMQ which implements AMQP, which a Python client can speak directly
without using a limited protocol like STOMP.  There's also handful of good
AMQP python libs including one for use in Twisted: txamqp.

-Drew
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091005/0df5d175/attachment.html>

From dsuch at gefira.pl  Mon Oct  5 12:05:57 2009
From: dsuch at gefira.pl (Dariusz Suchojad)
Date: Mon, 05 Oct 2009 20:05:57 +0200
Subject: [Twisted-Python] PB vs JMS
In-Reply-To: <368574aa0910051021g702e4fffx6df865f5dfe60588@mail.gmail.com>
References: <0016e6d640873a273304752fe3d3@google.com>
	<368574aa0910051021g702e4fffx6df865f5dfe60588@mail.gmail.com>
Message-ID: <4ACA3585.5050807@gefira.pl>

Drew Smathers wrote:

Hi,

> JMS is a messaging
> middleware defined at the Java language API level (hence the need to for
> STOMP protocol and similar adapting layers for use with Python or other
> non-Java languages). 

A bit off-topic, but note that it's sometimes possible to use JMS almost
as-is with Python too. Doing that is probably pointless if one's not
coming from Java world and expect to see a similar API in Python and it
probably doesn't make much sense for open source messaging middleware
but it makes sense if you have to use proprietary software such as
WebSphere MQ or webMethods that doesn't care much about open protocols,
especially when there's a need for seamless integration with Java JMS
clients.

http://jira.springframework.org/browse/SESPRINGPYTHONPY-12
https://src.springframework.org/svn/se-springpython-py/sandbox/dsuch/jira/SESPRINGPYTHONPY-12/
https://src.springframework.org/svn/se-springpython-py/sandbox/dsuch/misc/jms-wmq-examples.py

-- 
Dariusz Suchojad



From glyph at twistedmatrix.com  Mon Oct  5 12:25:53 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 5 Oct 2009 14:25:53 -0400
Subject: [Twisted-Python] Structural issues in Lore XHTML documents
In-Reply-To: <562bcc10910050922p1623c273g49422ebc4ddf37a9@mail.gmail.com>
References: <562bcc10910050922p1623c273g49422ebc4ddf37a9@mail.gmail.com>
Message-ID: <d9047f780910051125n3778199cnac5428b190e418e6@mail.gmail.com>

On Mon, Oct 5, 2009 at 12:22 PM, Kevin Horn <kevin.horn at gmail.com> wrote:

> I've been looking over the xhtml documents used to generate the twisted
> documentation, and I've noticed a number of issues:
>

Are these issues really affecting you in some way?


> I'm planning to correct some of these issues, but I wanted to get others'
> opinions on exactly how to go about it.  For example, what DOCTYPE to use,
> XMLNS to use, etc.
>

They are supposed to be XHTML, so they should be annotated as appropriate
for that format.  Lore doesn't define its own attributes, on purpose: it
uses existing XHTML facilities like "class" to encode its metadata.


> Thoughts?  Suggestions?
>

I'm sure we'd be happy to accept some patches to clean these documents up,
especially if it's bothering you, but it seems pretty low-priority to me :).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091005/3b826688/attachment.html>

From glyph at twistedmatrix.com  Mon Oct  5 12:32:30 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 5 Oct 2009 14:32:30 -0400
Subject: [Twisted-Python] getting #2015 (Generic SASL library) moving
	again?
In-Reply-To: <562bcc10910050934x18e7781dl5e40f4a61edda4e0@mail.gmail.com>
References: <562bcc10910050934x18e7781dl5e40f4a61edda4e0@mail.gmail.com>
Message-ID: <d9047f780910051132w78b29ca3n7a7d1e9c81fd97e6@mail.gmail.com>

On Mon, Oct 5, 2009 at 12:34 PM, Kevin Horn <kevin.horn at gmail.com> wrote:

> I'd like to see this ticket get moving again.


Excellent!


> I've gone over what's been done so far (and put my comments in the ticket),
> and it looks like everything is at least mostly ready to be merged into the
> Twisted trunk.
>

Your analysis on the ticket looks fairly thorough.


> So what else needs to be done to get this to happen?  I'm happy to try and
> get it done, but a little direction would be really handy. ;)
>

The workflow is pretty simple.

   1. author submits change
   2. reviewer reviews change
   3. someone responds to feedback
   4. "someone" becomes "author", repeat

Right now we're stuck in the middle of step 3, but given that therve does
not appear to be actively working on this branch, the path forward is
clear.  *You* become "someone", and submit a patch that finishes dealing
with the issues that you have mentioned as not already taken care of by
therve's subsequent changesets.  The best way to do this is to submit a
patch against the branch, rather than against trunk.  Given such a patch, a
twisted committer can then apply the patch to the branch and submit to
buildbots (etc) as appropriate.  By submitting it against the branch, you
make it easy for the reviewer to examine the changes you're submitting in
isolation from the rest of the larger change, to see if they address the
points that you've brought up.

If the reviewer is happy with your changes, then the patch + branch will be
immediately merged to trunk; of course, the next review might have a little
more feedback for you to deal with ;).

Thanks for your interest!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091005/0cd11e5d/attachment.html>

From kevin.horn at gmail.com  Mon Oct  5 12:44:02 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 5 Oct 2009 13:44:02 -0500
Subject: [Twisted-Python] Structural issues in Lore XHTML documents
In-Reply-To: <d9047f780910051125n3778199cnac5428b190e418e6@mail.gmail.com>
References: <562bcc10910050922p1623c273g49422ebc4ddf37a9@mail.gmail.com>
	<d9047f780910051125n3778199cnac5428b190e418e6@mail.gmail.com>
Message-ID: <562bcc10910051144x17e6f7a0t8abc036d0f62c68b@mail.gmail.com>

On Mon, Oct 5, 2009 at 1:25 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

> On Mon, Oct 5, 2009 at 12:22 PM, Kevin Horn <kevin.horn at gmail.com> wrote:
>
>> I've been looking over the xhtml documents used to generate the twisted
>> documentation, and I've noticed a number of issues:
>>
>
> Are these issues really affecting you in some way?
>

Yes and no.  I'm playing around with some automated processing of these
documents (mostly as an exercise to learn lxml), and I'm having to work
around some of these things.  And since I was thinking about it anyway, I
thought I'd take the opportunity to fix up some "broken windows".


>
>
>> I'm planning to correct some of these issues, but I wanted to get others'
>> opinions on exactly how to go about it.  For example, what DOCTYPE to use,
>> XMLNS to use, etc.
>>
>
> They are supposed to be XHTML, so they should be annotated as appropriate
> for that format.  Lore doesn't define its own attributes, on purpose: it
> uses existing XHTML facilities like "class" to encode its metadata.
>
>

The main thing I was worried about was whether they were supposed ot be
xhtml-strict or xhtml-transitional.


> Thoughts?  Suggestions?
>>
>
> I'm sure we'd be happy to accept some patches to clean these documents up,
> especially if it's bothering you, but it seems pretty low-priority to me :).
>
>
It's not "bothering" me per se, and we're agreed that it's not any kind of
priority, just thought I might as well try and fix it up while I was looking
at it.

FYI: I've hacked together a simple "lorelint" script to automatically check
for these type of issues.  Happy to share if anyone thinks it might be
useful for future release mgmt automation or whatever.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091005/2f2683b8/attachment.html>

From kevin.horn at gmail.com  Mon Oct  5 12:49:32 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 5 Oct 2009 13:49:32 -0500
Subject: [Twisted-Python] getting #2015 (Generic SASL library) moving
	again?
In-Reply-To: <d9047f780910051132w78b29ca3n7a7d1e9c81fd97e6@mail.gmail.com>
References: <562bcc10910050934x18e7781dl5e40f4a61edda4e0@mail.gmail.com>
	<d9047f780910051132w78b29ca3n7a7d1e9c81fd97e6@mail.gmail.com>
Message-ID: <562bcc10910051149h29cce9f0j6cca093016da99b2@mail.gmail.com>

On Mon, Oct 5, 2009 at 1:32 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

> On Mon, Oct 5, 2009 at 12:34 PM, Kevin Horn <kevin.horn at gmail.com> wrote:
>
>> I'd like to see this ticket get moving again.
>
>
> Excellent!
>
>
>> I've gone over what's been done so far (and put my comments in the
>> ticket), and it looks like everything is at least mostly ready to be merged
>> into the Twisted trunk.
>>
>
> Your analysis on the ticket looks fairly thorough.
>

Thanks!  Though, really I just went over the changesets that therve
submitted, and checked them against exarkun's suggestions.


>
>
>> So what else needs to be done to get this to happen?  I'm happy to try and
>> get it done, but a little direction would be really handy. ;)
>>
>
> The workflow is pretty simple.
>
>    1. author submits change
>    2. reviewer reviews change
>    3. someone responds to feedback
>    4. "someone" becomes "author", repeat
>
> Right now we're stuck in the middle of step 3, but given that therve does
> not appear to be actively working on this branch, the path forward is
> clear.  *You* become "someone", and submit a patch that finishes dealing
> with the issues that you have mentioned as not already taken care of by
> therve's subsequent changesets.  The best way to do this is to submit a
> patch against the branch, rather than against trunk.  Given such a patch, a
> twisted committer can then apply the patch to the branch and submit to
> buildbots (etc) as appropriate.  By submitting it against the branch, you
> make it easy for the reviewer to examine the changes you're submitting in
> isolation from the rest of the larger change, to see if they address the
> points that you've brought up.
>
> If the reviewer is happy with your changes, then the patch + branch will be
> immediately merged to trunk; of course, the next review might have a little
> more feedback for you to deal with ;).
>
> Thanks for your interest!
>
>
That's kind of what I figured.

>From my previous review of the current status, it looks pretty well done to
me, but  I'll start taking a look at it in more detail, and see what I can
come up with.  Might need some more tests, etc.

Kevin "Someone" Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091005/522c5b86/attachment-0001.html>

From fetbiz at gmail.com  Mon Oct  5 22:08:10 2009
From: fetbiz at gmail.com (biziap biziap)
Date: Tue, 6 Oct 2009 12:08:10 +0800
Subject: [Twisted-Python] Is it necessary to utilize twisted.cred in twisted
	web?
Message-ID: <d067ddcf0910052108x47fe7efey753b9e9d72f6c97d@mail.gmail.com>

I have googled this topic and found and example in
(A) http://www.mail-archive.com/twisted-web at twistedmatrix.com/msg01796.html
well, another simpler example is
(B) http://www.mail-archive.com/twisted-web at twistedmatrix.com/msg01788.html

My questions are:
1. Does the approach in (A) be recommended? To generate resource
dynamically seems not efficient and not necessary for simple scenario.
Is there other way to bind twisted.cred and twisted.web together?
(except the  deprecated twisted.web.guard)

2. The approach in (B) which suggests that request.getSession() along
is quite enough to implement an simple authentication feature. Here
the "simple scenario" means to guard some resource with username and
password.
To do it: In a protected resource, just to check for a flag in the
session, if failure, then redirect to login page. If succeeded, render
the resource. Why shall we bother the portal, credentials,
checker,.... ?

Any suggestion? Thanks in advance.



From clemesha at gmail.com  Mon Oct  5 22:19:18 2009
From: clemesha at gmail.com (Alex Clemesha)
Date: Mon, 5 Oct 2009 21:19:18 -0700
Subject: [Twisted-Python] Is it necessary to utilize twisted.cred in
	twisted web?
In-Reply-To: <d067ddcf0910052108x47fe7efey753b9e9d72f6c97d@mail.gmail.com>
References: <d067ddcf0910052108x47fe7efey753b9e9d72f6c97d@mail.gmail.com>
Message-ID: <d272f0690910052119g2ef34967ma04ed61bb283f943@mail.gmail.com>

Hi,

I'd love to provide a 'canonical answer' to this question, but unfortunately
it is something that I've been confused with in the past too.

I'm hoping there is a sort of 'best practice' answer to this, and I'd
additionally hope that this answer might appear in this extremely
good running series on Twisted Web:
http://jcalderone.livejournal.com/tag/sixty+seconds


thanks,
Alex




On Mon, Oct 5, 2009 at 9:08 PM, biziap biziap <fetbiz at gmail.com> wrote:
> I have googled this topic and found and example in
> (A) http://www.mail-archive.com/twisted-web at twistedmatrix.com/msg01796.html
> well, another simpler example is
> (B) http://www.mail-archive.com/twisted-web at twistedmatrix.com/msg01788.html
>
> My questions are:
> 1. Does the approach in (A) be recommended? To generate resource
> dynamically seems not efficient and not necessary for simple scenario.
> Is there other way to bind twisted.cred and twisted.web together?
> (except the  deprecated twisted.web.guard)
>
> 2. The approach in (B) which suggests that request.getSession() along
> is quite enough to implement an simple authentication feature. Here
> the "simple scenario" means to guard some resource with username and
> password.
> To do it: In a protected resource, just to check for a flag in the
> session, if failure, then redirect to login page. If succeeded, render
> the resource. Why shall we bother the portal, credentials,
> checker,.... ?
>
> Any suggestion? Thanks in advance.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Alex Clemesha
clemesha.org



From phil at bubblehouse.org  Mon Oct  5 23:31:50 2009
From: phil at bubblehouse.org (Phil Christensen)
Date: Tue, 6 Oct 2009 01:31:50 -0400
Subject: [Twisted-Python] Is it necessary to utilize twisted.cred in
	twisted web?
In-Reply-To: <d067ddcf0910052108x47fe7efey753b9e9d72f6c97d@mail.gmail.com>
References: <d067ddcf0910052108x47fe7efey753b9e9d72f6c97d@mail.gmail.com>
Message-ID: <7DDA846A-5A87-4F3F-9212-5ADD45A8074E@bubblehouse.org>

crossposted to twisted-web at twistedmatrix.com, which is probably a  
better venue...

On Oct 6, 2009, at 12:08 AM, biziap biziap wrote:
> I have googled this topic and found and example in
> (A) http://www.mail-archive.com/twisted-web at twistedmatrix.com/msg01796.html
> well, another simpler example is
> (B) http://www.mail-archive.com/twisted-web at twistedmatrix.com/msg01788.html
>
> My questions are:
> 1. Does the approach in (A) be recommended? To generate resource
> dynamically seems not efficient and not necessary for simple scenario.
> Is there other way to bind twisted.cred and twisted.web together?
> (except the  deprecated twisted.web.guard)

There's a few problems with this approach. The biggest is that it  
requires username/password data to be sent on every authenticated  
request.

Another one is more of a design principle; that you shouldn't have  
account/permissions code inside resource display code. I violate this  
principle all the time ;-)

The use of dynamic resource instantiation is a common idiom in  
twisted.web coding, though. it isn't inherently inefficient, as long  
as your resource objects are fairly sane.

> 2. The approach in (B) which suggests that request.getSession() along
> is quite enough to implement an simple authentication feature. Here
> the "simple scenario" means to guard some resource with username and
> password.
> To do it: In a protected resource, just to check for a flag in the
> session, if failure, then redirect to login page. If succeeded, render
> the resource. Why shall we bother the portal, credentials,
> checker,.... ?


true, depending on your needs, this may be all that you need. from  
your description, though, it sounds like you'd be doing this  
authentication step in every resource you want to protect, which could  
become tedious (aka error-prone) in a big project.

twisted.cred can seem daunting when you're just trying to protect a  
trivial web resource or two, but for more advanced uses like more  
complicated authentication levels, it's worth the time to learn. also,  
a big part of its real value comes when you need to support a variety  
of protocols and/or authentication types.

-phil



From fetbiz at gmail.com  Tue Oct  6 01:18:55 2009
From: fetbiz at gmail.com (biziap biziap)
Date: Tue, 6 Oct 2009 15:18:55 +0800
Subject: [Twisted-Python] Is it necessary to utilize twisted.cred in
	twisted web?
In-Reply-To: <7DDA846A-5A87-4F3F-9212-5ADD45A8074E@bubblehouse.org>
References: <d067ddcf0910052108x47fe7efey753b9e9d72f6c97d@mail.gmail.com>
	<7DDA846A-5A87-4F3F-9212-5ADD45A8074E@bubblehouse.org>
Message-ID: <d067ddcf0910060018v6003aacfnc93e51acaeded4ef@mail.gmail.com>

Dear phil
> true, depending on your needs, this may be all that you need. from
> your description, though, it sounds like you'd be doing this
> authentication step in every resource you want to protect, which could
> become tedious (aka error-prone) in a big project.

I do have lots of resources to protect.
Things I have to do is getSession() and hasattr(session,'authenticated')
in very request. Just like the Django, it puts @login_required in very
protected resources.
Username and password were verified once.

>
> twisted.cred can seem daunting when you're just trying to protect a
> trivial web resource or two, but for more advanced uses like more
> complicated authentication levels, it's worth the time to learn. also,
> a big part of its real value comes when you need to support a variety
> of protocols and/or authentication types.
>

Agree, that is the reason I am asking here.
I feel unconfortable to drop the twisted.cred and adapt to getSession() only.
Originally, I expect to get the avatar from request if user has been
authenticated by the twisted.cred framework, for example,
request.getAvatar() without any extra works to do, no need to assign
the avatar to session in the login phase, just need to implement
required components of twisted.cred framework. Or even simply to claim
a class variable in the resource (like addSlash, isLeaf) and the
twisted.cred framework handles the rest of things. If the avatar has
to be stored in the session and retrieve from the session in very
protected resource, then to adapt the twisted.cred framework seems to
be too luxury for my project which authenticate the request with only
one source of backend. Do I miss some good things that the
twisted.cred brings?

By the way, can some one kindly drop a conceptual design which utilize
twisted.cred in a multiple protocol environment? Especially the way to
retrieve the avatar back in the descending phases (protected
resources). That could be very interesting. Thanks in advance.



From petshmidt at googlemail.com  Tue Oct  6 08:47:48 2009
From: petshmidt at googlemail.com (Pet)
Date: Tue, 6 Oct 2009 16:47:48 +0200
Subject: [Twisted-Python] inlineCallbacks
Message-ID: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>

Hi,

calling in client code self.cred.login() I can't print login result.
What I'm doing wrong? login method returns deffered, but should yield
result from callRemote method.

Thanks for any help!

Pet

class Cred:

    @inlineCallbacks
    def login(self):
        proxy = Proxy(LOGIN_PROXY)
        l = {"user":LOGIN_USERNAME, "pass":LOGIN_PASSWD}
        loginResult = yield proxy.callRemote('login', l)
        print "RESULT", loginResult.result
        returnValue(loginResult)



From kevin.horn at gmail.com  Tue Oct  6 17:57:07 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 6 Oct 2009 18:57:07 -0500
Subject: [Twisted-Python] Structural issues in Lore XHTML documents
In-Reply-To: <562bcc10910051144x17e6f7a0t8abc036d0f62c68b@mail.gmail.com>
References: <562bcc10910050922p1623c273g49422ebc4ddf37a9@mail.gmail.com>
	<d9047f780910051125n3778199cnac5428b190e418e6@mail.gmail.com>
	<562bcc10910051144x17e6f7a0t8abc036d0f62c68b@mail.gmail.com>
Message-ID: <562bcc10910061657n7d024c16i5421dda3a51ab520@mail.gmail.com>

On Mon, Oct 5, 2009 at 1:44 PM, Kevin Horn <kevin.horn at gmail.com> wrote:

>
> FYI: I've hacked together a simple "lorelint" script to automatically check
> for these type of issues.  Happy to share if anyone thinks it might be
> useful for future release mgmt automation or whatever.
>

For benefit of future readers...Lore already does something like this.  Try:

    lore -olint mydocument.xhtml

Thanks to exarkun for pointing this out.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091006/adab9f43/attachment.html>

From asset at impactdamage.com  Tue Oct  6 18:00:19 2009
From: asset at impactdamage.com (asset)
Date: Tue, 6 Oct 2009 17:00:19 -0700
Subject: [Twisted-Python] Problem with XMLRPC resource wrapped with guard
	basic auth
Message-ID: <3d9b0f27$47ae1a4$685b66bd$@com>

 Using the current trunk r27366 (which is after #4014 fixed a related 
issue), I am having trouble with an implementation of web.guard wrapped 
XMLRPC.  This is a new test implementation to expose both a soap and xmlrpc 
interface.  SOAP works, but xmlrpc throws UnsupportedMethod POST.

Here is my test code, can anybody tell me if im doing something wrong?  
Again, /soap works, but /rpc2 freaks on the POST method being unavailable.

###### test-script.py

from zope.interface import implements
from twisted.internet import reactor
from twisted.web.resource import IResource, Resource
from twisted.web import server, guard
from twisted.cred.portal import IRealm
from twisted.python import log

from zope.interface import implements

from twisted.python import log
from twisted.internet import reactor
from twisted.web import server, resource, guard, xmlrpc, soap
from twisted.cred.portal import IRealm, Portal
from twisted.cred.checkers import InMemoryUsernamePasswordDatabaseDontUse

import sys

def getQuote():
    return "Victory to the burgeois, you capitalist swine!"

class XMLRPCQuoter(xmlrpc.XMLRPC):
    def xmlrpc_quote(self):
        return getQuote()

class SOAPQuoter(soap.SOAPPublisher):
    def soap_quote(self):
        return getQuote()

class WebServicesRealm(object):
    implements(IRealm)

    def requestAvatar(self, avatarId, mind, *interfaces):
        if resource.IResource in interfaces:
            node = resource.Resource()
            node.putChild("rpc2", XMLRPCQuoter())
            node.putChild("soap", SOAPQuoter())
            return resource.IResource, node, lambda: None
        raise NotImplementedError()

if __name__ == "__main__":
   log.startLogging(sys.stdout)

   checker = [InMemoryUsernamePasswordDatabaseDontUse(foo='bar')]
   webServicesWrapper = 
guard.HTTPAuthSessionWrapper(Portal(WebServicesRealm(), checker),
                                             
[guard.BasicCredentialFactory("test")])

   reactor.listenTCP(9999, server.Site(webServicesWrapper))
   reactor.run()

######

http://localhost:9999/soap *good*
http://localhost:9999/rpc2 *bad; POST isnt an allowed method*

Thanks,

TWKiel

 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091006/091dc8b1/attachment.html>

From exarkun at twistedmatrix.com  Tue Oct  6 19:15:58 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 07 Oct 2009 01:15:58 -0000
Subject: [Twisted-Python] Problem with XMLRPC resource wrapped with
	guard	basic auth
In-Reply-To: <3d9b0f27$47ae1a4$685b66bd$@com>
References: <3d9b0f27$47ae1a4$685b66bd$@com>
Message-ID: <20091007011558.24460.746569620.divmod.xquotient.154@boson>

On 12:00 am, asset at impactdamage.com wrote:
>Using the current trunk r27366 (which is after #4014 fixed a related
>issue), I am having trouble with an implementation of web.guard wrapped
>XMLRPC.  This is a new test implementation to expose both a soap and 
>xmlrpc
>interface.  SOAP works, but xmlrpc throws UnsupportedMethod POST.

I think you're being tricked by the confusing way in which this 
exception is displayed and by a slight implementation difference (and 
indeed externally visible behavioral difference) between XMLRPC and 
SOAPPublisher.

SOAPPublisher defines "render" and no other render methods.  So it will 
accept any request method and treat it the same way.  It will never 
raise UnsupportedMethod.

XMLRPC, on the other hand, defines "render_POST" and no other render 
methods, so it will only accept POST requests.  For any other request, 
it will raise UnsupportedMethod and create that exception with a tuple 
of which methods it does allow.  ('POST',) in this case.

The exception I see when I approach this server at /rpc2 with my web 
browser (which is the only thing I've tried, because it's too much work 
to put together a real xml-rpc client that supports basic auth) is just 
what I'd expect.  The browser issues a GET, the XMLRPC resource rejects 
this, indicating it only accepts POSTs.

It may be worth improving the way UnsupportedMethod exceptions are 
stringified to make it more clear what's going on.  Or, if this doesn't 
actually explain your problem, feel free to point that out and provide 
more details about how the client you're using behaves.

Jean-Paul



From listsin at integrateddevcorp.com  Tue Oct  6 20:40:49 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Tue, 6 Oct 2009 22:40:49 -0400
Subject: [Twisted-Python] Lots and lots and lots and lots... of deferreds
In-Reply-To: <20091007011558.24460.746569620.divmod.xquotient.154@boson>
References: <3d9b0f27$47ae1a4$685b66bd$@com>
	<20091007011558.24460.746569620.divmod.xquotient.154@boson>
Message-ID: <EEF62EFB-31D9-493C-BF0E-BEB2654CA246@integrateddevcorp.com>

So, I have a situation...

	I have an application whose basic function is, in simplified form:

	def main():
		get_web_page(main_page_from_params)

	def get_web_page(page_name):
		set up a page getter deferred,
			one of the callbacks gets the links out of the page and sends them  
to get_them()

	def get_them(links):
		for l in links:
			if l is not being gotten or hasn't been got:
				deferred = get_web_page(l)

	In other words, I feed in the top level page, then recursively feed  
in any pages linked to by the current page, and they feed in all their  
links, until all pages are gotten.

	I understand the concurrency issues with multiple deferred's trying  
to add pages to the "get list" -- it's properly handled in the code  
(far as I can tell, so far).

	So, here's the question...

	I have a "pages"  list containing all of the pages.

	They are set to either gotten or in-flight.

	In-flight means I have a deferred that's going to go get it (in  
get_web_page()).

	IOW, right now, if I don't already have the page, and I have a link  
to it, I just start a deferred to go get it.

	Should I limit the number of "in-flight" pages?

	Currently, I'm scanning sites that have upwards of 5000 pages and it  
seems that, when I get too many deferred's in flight, the app  
*appears* to crash.

	I'm not sure whether it's actually going out to lunch or just appears  
that way and, before I go instrumenting the app to death, can anyone  
tell me whether there is some sort of practical limit to how many "in- 
flight" deferreds might start to cause issues, just due to the sheer  
number?

	Thanks for any insight on this that anyone might offer.

	I expect the usual flurry of  "you must post your exact code or we  
can't help you at all, moron" posts, but...
	
	In spite of my not having posted specific code, could someone with  
some actual experience in this please give me a clue, within an order  
of magnitude, how many deferreds might start to cause real trouble?

Thanks,

S






From glyph at twistedmatrix.com  Tue Oct  6 20:57:42 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 6 Oct 2009 22:57:42 -0400
Subject: [Twisted-Python] Lots and lots and lots and lots... of deferreds
In-Reply-To: <EEF62EFB-31D9-493C-BF0E-BEB2654CA246@integrateddevcorp.com>
References: <3d9b0f27$47ae1a4$685b66bd$@com>
	<20091007011558.24460.746569620.divmod.xquotient.154@boson>
	<EEF62EFB-31D9-493C-BF0E-BEB2654CA246@integrateddevcorp.com>
Message-ID: <d9047f780910061957t35603084h42114fdd8458cc65@mail.gmail.com>

On Tue, Oct 6, 2009 at 10:40 PM, Steve Steiner (listsin) <
listsin at integrateddevcorp.com> wrote:


>        Should I limit the number of "in-flight" pages?
>

I'm not going to comment on that, because I don't know what your app is
doing or why it appears to be dying.  As you said, you didn't post code :).

However, you can experiment with it pretty easily using DeferredSemaphore:
http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.defer.DeferredSemaphore.html


>        Currently, I'm scanning sites that have upwards of 5000 pages and it
> seems that, when I get too many deferred's in flight, the app
> *appears* to crash.
>
>        I'm not sure whether it's actually going out to lunch or just
> appears
> that way and, before I go instrumenting the app to death, can anyone
> tell me whether there is some sort of practical limit to how many "in-
> flight" deferreds might start to cause issues, just due to the sheer
> number?
>

If your app is doing something strange that you don't understand, you should
instrument it until you understand it.  Regardless of any practical advice
you may receive as a temporary stopgap, there's always a chance that
something *else* is going wrong, and by reducing the number of concurrent
requests you're just decreasing its likelihood rather than properly fixing
it.

It's highly unlikely that it's actually the number of Deferreds.  A Deferred
is just a Python object, so if you've got the RAM to store them and their
associated callbacks, you should be fine.  It's more likely that it has
something to do with long callback chains, or hitting some kind of
file-descriptor limit (what version of Twisted are you using?) or perhaps
that 5000 pages is just a lot of pages to request and you might need to wait
a while.

Good luck,

-Glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091006/c81a2093/attachment.html>

From matt at unshift.net  Tue Oct  6 21:00:03 2009
From: matt at unshift.net (Matt Perry)
Date: Tue, 6 Oct 2009 23:00:03 -0400
Subject: [Twisted-Python] Lots and lots and lots and lots... of deferreds
In-Reply-To: <EEF62EFB-31D9-493C-BF0E-BEB2654CA246@integrateddevcorp.com>
References: <3d9b0f27$47ae1a4$685b66bd$@com>
	<20091007011558.24460.746569620.divmod.xquotient.154@boson>
	<EEF62EFB-31D9-493C-BF0E-BEB2654CA246@integrateddevcorp.com>
Message-ID: <a8c89c8c0910062000hcc53f6dia5542c8aaa6ec1e2@mail.gmail.com>

Your limit will usually be the number of file descriptors in the system,
which can be usually changed via ulimit or your system's equivalent.  On
Linux I believe it defaults to 1024, so you should be able to handle 1024
simultaneous connections.

One thing of note is that you say you have concurrency issues handled -- but
with asynchronous I/O, there are no concurrency issues, since there's no
concurrency (at least, not at application level).  This is confusing at
first but it's important to understand.

All that said, you probably want to maintain a queue of URLs and some sort
of graph representation of your data for purposes of finding loops (e.g. A
links to B, B links to C, C links to A).  You can then set an upper limit on
the number of concurrent connections (say 1000) and track the number of
deferreds in the system just based on when you start connections and when
they finish (via callbacks).   Your initial seed can start one URL, and then
its callback can hit all linked nodes, and so on and so on.

You might be hitting a cycle in the page traversal graph, and that is
causing you all sorts of problems in terms of recursion depth or running out
of file descriptors.  Without seeing your code or your target site, though,
it's impossible to say.

Have you considered using another library for web spidering?  I believe
Scrapy (http://scrapy.org) is a good spidering tool, and it might be easier
to use a decent library than roll your own.


  - Matt



On Tue, Oct 6, 2009 at 10:40 PM, Steve Steiner (listsin) <
listsin at integrateddevcorp.com> wrote:

> So, I have a situation...
>
>        I have an application whose basic function is, in simplified form:
>
>        def main():
>                get_web_page(main_page_from_params)
>
>        def get_web_page(page_name):
>                set up a page getter deferred,
>                        one of the callbacks gets the links out of the page
> and sends them
> to get_them()
>
>        def get_them(links):
>                for l in links:
>                        if l is not being gotten or hasn't been got:
>                                deferred = get_web_page(l)
>
>        In other words, I feed in the top level page, then recursively feed
> in any pages linked to by the current page, and they feed in all their
> links, until all pages are gotten.
>
>        I understand the concurrency issues with multiple deferred's trying
> to add pages to the "get list" -- it's properly handled in the code
> (far as I can tell, so far).
>
>        So, here's the question...
>
>        I have a "pages"  list containing all of the pages.
>
>        They are set to either gotten or in-flight.
>
>        In-flight means I have a deferred that's going to go get it (in
> get_web_page()).
>
>        IOW, right now, if I don't already have the page, and I have a link
> to it, I just start a deferred to go get it.
>
>        Should I limit the number of "in-flight" pages?
>
>        Currently, I'm scanning sites that have upwards of 5000 pages and it
> seems that, when I get too many deferred's in flight, the app
> *appears* to crash.
>
>        I'm not sure whether it's actually going out to lunch or just
> appears
> that way and, before I go instrumenting the app to death, can anyone
> tell me whether there is some sort of practical limit to how many "in-
> flight" deferreds might start to cause issues, just due to the sheer
> number?
>
>        Thanks for any insight on this that anyone might offer.
>
>        I expect the usual flurry of  "you must post your exact code or we
> can't help you at all, moron" posts, but...
>
>        In spite of my not having posted specific code, could someone with
> some actual experience in this please give me a clue, within an order
> of magnitude, how many deferreds might start to cause real trouble?
>
> Thanks,
>
> S
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091006/2398f84b/attachment.html>

From listsin at integrateddevcorp.com  Tue Oct  6 21:13:00 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Tue, 6 Oct 2009 23:13:00 -0400
Subject: [Twisted-Python] Lots and lots and lots and lots... of deferreds
In-Reply-To: <a8c89c8c0910062000hcc53f6dia5542c8aaa6ec1e2@mail.gmail.com>
References: <3d9b0f27$47ae1a4$685b66bd$@com>
	<20091007011558.24460.746569620.divmod.xquotient.154@boson>
	<EEF62EFB-31D9-493C-BF0E-BEB2654CA246@integrateddevcorp.com>
	<a8c89c8c0910062000hcc53f6dia5542c8aaa6ec1e2@mail.gmail.com>
Message-ID: <076858B8-020C-4873-929F-B19271F705DD@integrateddevcorp.com>


On Oct 6, 2009, at 11:00 PM, Matt Perry wrote:

> One thing of note is that you say you have concurrency issues  
> handled -- but with asynchronous I/O, there are no concurrency  
> issues, since there's no concurrency (at least, not at application  
> level).  This is confusing at first but it's important to understand.

The concurrency to which I was referring was having multiple deferreds  
adding to the "getlist" semi-simultaneously.

They have to obtain a lock on the "getlist" before they can add new  
things to "get", then they release it.

Thanks,

S




From rburns at stic.net  Tue Oct  6 21:18:27 2009
From: rburns at stic.net (Ryan Burns)
Date: Tue, 6 Oct 2009 20:18:27 -0700
Subject: [Twisted-Python] using perspective broker to talk to a subprocess?
Message-ID: <87846F13-09DD-4F80-9437-9C731901A196@stic.net>

Hi All,

I'm writing a twisted application where I'd like to run and  
communicate with subprocesses that also happen to be twisted apps. I'm  
wondering if I can somehow combine twisted's process and perspective  
broker code so that I can launch a twisted server in a subprocess and  
communicate with it via the perspective broker using the subprocess's  
stdin/stdout. Ideally, it would be great if this could scale, say up  
to 200 subprocesses.

Disregarding reasons of why I would want to do this, is this something  
that is possible? I've looked at the perspective broker classes and  
the processProtocol as well as some of the helpers, but I don't quite  
see how to make it happen. Should I just use a socket instead and  
handle managing unique names/ports per subprocess on my own? Or any  
alternative ideas? Ultimately I just want to run subprocesses from my  
twisted app and communicate with them without having to do a bunch of  
parsing on my own and the subprocesses will be twisted as well, so I  
figure why not make use of twisted for my IPC.

Thanks,
Ryan



From matt at unshift.net  Tue Oct  6 21:23:44 2009
From: matt at unshift.net (Matt Perry)
Date: Tue, 6 Oct 2009 23:23:44 -0400
Subject: [Twisted-Python] Lots and lots and lots and lots... of deferreds
In-Reply-To: <076858B8-020C-4873-929F-B19271F705DD@integrateddevcorp.com>
References: <3d9b0f27$47ae1a4$685b66bd$@com>
	<20091007011558.24460.746569620.divmod.xquotient.154@boson>
	<EEF62EFB-31D9-493C-BF0E-BEB2654CA246@integrateddevcorp.com>
	<a8c89c8c0910062000hcc53f6dia5542c8aaa6ec1e2@mail.gmail.com>
	<076858B8-020C-4873-929F-B19271F705DD@integrateddevcorp.com>
Message-ID: <a8c89c8c0910062023q17b6afcfpa69f1aea4a174336@mail.gmail.com>

If everything is happening in a single thread, you probably don't need to
lock anything, because there's no shared access and therefore no race
conditions.  I have no idea how your app is written, so you may need them -
I don't know.  Just an observation.


 - Matt

On Tue, Oct 6, 2009 at 11:13 PM, Steve Steiner (listsin) <
listsin at integrateddevcorp.com> wrote:

>
> On Oct 6, 2009, at 11:00 PM, Matt Perry wrote:
>
> > One thing of note is that you say you have concurrency issues
> > handled -- but with asynchronous I/O, there are no concurrency
> > issues, since there's no concurrency (at least, not at application
> > level).  This is confusing at first but it's important to understand.
>
> The concurrency to which I was referring was having multiple deferreds
> adding to the "getlist" semi-simultaneously.
>
> They have to obtain a lock on the "getlist" before they can add new
> things to "get", then they release it.
>
> Thanks,
>
> S
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091006/f5f14eab/attachment.html>

From andrew at bemusement.org  Tue Oct  6 21:25:53 2009
From: andrew at bemusement.org (Andrew Bennetts)
Date: Wed, 7 Oct 2009 14:25:53 +1100
Subject: [Twisted-Python] Lots and lots and lots and lots... of	deferreds
In-Reply-To: <EEF62EFB-31D9-493C-BF0E-BEB2654CA246@integrateddevcorp.com>
References: <3d9b0f27$47ae1a4$685b66bd$@com>
	<20091007011558.24460.746569620.divmod.xquotient.154@boson>
	<EEF62EFB-31D9-493C-BF0E-BEB2654CA246@integrateddevcorp.com>
Message-ID: <20091007032553.GO1931@steerpike.home.puzzling.org>

Steve Steiner (listsin) wrote:
[...]
> 	I expect the usual flurry of  "you must post your exact code or we  
> can't help you at all, moron" posts, but...

I'll try to restrain myself ;)

> 	In spite of my not having posted specific code, could someone with  
> some actual experience in this please give me a clue, within an order  
> of magnitude, how many deferreds might start to cause real trouble?

None.  Deferreds aren't the problem; they are just Python objects.  You can
probably have *millions* of them without great difficulty.  They are a symptom,
not a cause.

The problem is more likely the underlying operations that are linked to the
Deferreds.  My two top guesses are:

 1) the web server failing to cope with thousands of concurrent requests
    gracefully, or
 2) the number of sockets is hitting a system limit (number of FDs you can pass
    to select(), or hitting the max number of file descriptors, something like
    that)

in that order.

For the second one, assuming you're on Linux, you may benefit from a trivial
change to use the epoll reactor rather than the default one.  For the first one,
you're at the mercy of the webserver.  IIRC the RFCs say that clients SHOULD use
no more than two concurrent connections to a server...

Regardless, I imagine you're unlikely to get much performance benefit from
hammering a server with 1000 concurrent requests over something much smaller,
like 5 or 10.  So I'd use a DeferredSemaphore, or perhaps look into using
Cooperator, and not worry about solving the mystery how to make 1000s of
concurrent requests work.

Of course, if you give more specific info about how your code fails and what it
does I might be able to give more specific advice... ;)

-Andrew.




From stephenmattison at gmail.com  Tue Oct  6 21:30:30 2009
From: stephenmattison at gmail.com (Stephen Mattison)
Date: Tue, 6 Oct 2009 20:30:30 -0700
Subject: [Twisted-Python] Example of a long-polling asynchronous web servic?
Message-ID: <9502a4d30910062030l18098b1fh9d0f962a76c57eb@mail.gmail.com>

Hey guys I'm trying to implement some web-services over JSON-RPC, and one of
the methods needs to use server-push.

I will try and explain my problem as well as I can.

I have a client, which is an iPhone, natively running a JSON-RPC( or XML-RPC
) client implementation.

I need to do something like this from the iPhone

service = ServerProxy("http://mydomain.com/webservice")
init_data = service.subscribe_to_updates()
...
...
...
some_result = service.some_regular_function(params)

How can I implement this in Twisted?
-- 
Stephen Mattison
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091006/f7a96dc8/attachment.html>

From listsin at integrateddevcorp.com  Tue Oct  6 21:38:49 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Tue, 6 Oct 2009 23:38:49 -0400
Subject: [Twisted-Python] Lots and lots and lots and lots... of deferreds
In-Reply-To: <d9047f780910061957t35603084h42114fdd8458cc65@mail.gmail.com>
References: <3d9b0f27$47ae1a4$685b66bd$@com>
	<20091007011558.24460.746569620.divmod.xquotient.154@boson>
	<EEF62EFB-31D9-493C-BF0E-BEB2654CA246@integrateddevcorp.com>
	<d9047f780910061957t35603084h42114fdd8458cc65@mail.gmail.com>
Message-ID: <96CEA763-6408-46BB-814D-39615C5428DA@integrateddevcorp.com>


On Oct 6, 2009, at 10:57 PM, Glyph Lefkowitz wrote:

> However, you can experiment with it pretty easily using  
> DeferredSemaphore: http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.defer.DeferredSemaphore.html

Cool, I didn't know about that, I'll give it a look.  Thanks!

> If your app is doing something strange that you don't understand,  
> you should instrument it until you understand it.

It's not that I don't understand what's supposed to be happening, or  
that it's doing something strange, it just seems that sites up to  
about 2000 pages work fine, then things get dicey.

I was just looking for some guidance on the "max-deferred" that has  
been found in practical experience more than anything else.

>  Regardless of any practical advice you may receive as a temporary  
> stopgap, there's always a chance that something else is going wrong,  
> and by reducing the number of concurrent requests you're just  
> decreasing its likelihood rather than properly fixing it.

I understand, and agree.  I'm not looking for a stopgap, just maybe a  
ballpark of "don't set more than 2000 in-flight deferreds at one time"  
type of guideline.

I understand that every situation is different, I'm working to limit  
my in-filght requests to a manageable number,

> It's highly unlikely that it's actually the number of Deferreds.  A  
> Deferred is just a Python object, so if you've got the RAM to store  
> them and their associated callbacks, you should be fine.

Yes, I understand that, thank you for clarifying.

> It's more likely that it has something to do with long callback  
> chains, or hitting some kind of file-descriptor limit

The callback chains are short, and I'm not getting a file-descriptor  
limit exception, or any exception that's getting percolated up.

> (what version of Twisted are you using?)

Sorry for not including this earlier...

# python -V
Python 2.6.1

 >>> import twisted
 >>> twisted.__version__
'8.2.0'

I'm running right out of the release versions for these tests since  
that's what my users will have installed.

> or perhaps that 5000 pages is just a lot of pages to request and you  
> might need to wait a while.

Yes, it is a lot of stuff...

What I'm working on determining is whether limiting the number of "in- 
flight" URL getters would beneficial.

Thanks,

S















>
> Good luck,
>
> -Glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091006/5f6e7844/attachment.html>

From glyph at twistedmatrix.com  Tue Oct  6 21:46:43 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 6 Oct 2009 23:46:43 -0400
Subject: [Twisted-Python] Example of a long-polling asynchronous web
	servic?
In-Reply-To: <9502a4d30910062030l18098b1fh9d0f962a76c57eb@mail.gmail.com>
References: <9502a4d30910062030l18098b1fh9d0f962a76c57eb@mail.gmail.com>
Message-ID: <d9047f780910062046v4d1abf6dxd4e5f38ee7fd0765@mail.gmail.com>

On Tue, Oct 6, 2009 at 11:30 PM, Stephen Mattison <stephenmattison at gmail.com
> wrote:


> How can I implement this in Twisted?
>

You can use DeferredResource:


http://twistedmatrix.com/documents/8.2.0/api/twisted.web.util.DeferredResource.html

or you can return NOT_DONE_YET from Resource.render(), and hold on to the
request:


http://twistedmatrix.com/documents/8.2.0/api/twisted.web.resource.Resource.html#render

to leave the connection open until something happens.

For a more elaborate example of a long-polling server component, you could
see Nevow's Athena:

    http://www.divmod.org/trac/wiki/DivmodNevow/Athena

This does not implement JSON-RPC or XML-RPC, but it has lots of code for
managing the outstanding connection, which may give you some ideas.

-Glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091006/d6c7dfd8/attachment.html>

From glyph at twistedmatrix.com  Tue Oct  6 21:56:07 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 6 Oct 2009 23:56:07 -0400
Subject: [Twisted-Python] using perspective broker to talk to a
	subprocess?
In-Reply-To: <87846F13-09DD-4F80-9437-9C731901A196@stic.net>
References: <87846F13-09DD-4F80-9437-9C731901A196@stic.net>
Message-ID: <d9047f780910062056k551d2f2eh4941ff2aea360c1d@mail.gmail.com>

On Tue, Oct 6, 2009 at 11:18 PM, Ryan Burns <rburns at stic.net> wrote:


> Disregarding reasons of why I would want to do this, is this something
> that is possible?


Absolutely.  Here's an example that uses AMP rather than PB:

    https://launchpad.net/ampoule

If AMP is OK, you can just use Ampoule as-is; if not, you can replace the
AMP protocol classes it uses with the appropriate PB analogs.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091006/be43624a/attachment.html>

From stephenmattison at gmail.com  Tue Oct  6 22:06:20 2009
From: stephenmattison at gmail.com (Stephen Mattison)
Date: Tue, 6 Oct 2009 21:06:20 -0700
Subject: [Twisted-Python] Example of a long-polling asynchronous web
	servic?
In-Reply-To: <d9047f780910062046v4d1abf6dxd4e5f38ee7fd0765@mail.gmail.com>
References: <9502a4d30910062030l18098b1fh9d0f962a76c57eb@mail.gmail.com>
	<d9047f780910062046v4d1abf6dxd4e5f38ee7fd0765@mail.gmail.com>
Message-ID: <9502a4d30910062106i451a3614kb8dbb2ba59669182@mail.gmail.com>

Hey Glyph thanks for responding so promptly! First if I understand correctly
on the server-side we have some code like:

def get_data_updates():
   if (!has_updates):
      return NO_DATA
   return json.encode(the_updates)

and on the client side

def poll_for_updates():
   while True:
      response = service.get_data_updates()
      if response != NO_DATA: break
      sleep(1)
   do_something_with_response(response)
   poll_for_updates()

As far as I can tell doing this has NO guarantee that all messages are
delivered unless every server->client connection maintains a stack of "new"
messages, whereas in a message-brokered setting the server just keeps
sending "global" updates as they occur, and the broker guarantees that
clients will receive every one. Where as in this situation, since the client
is asking the server for updates, unless the server strictly maintains all
of the updates for a specific client, some of them might be thrown on the
ground.

Am I correct here?



On Tue, Oct 6, 2009 at 8:46 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

> On Tue, Oct 6, 2009 at 11:30 PM, Stephen Mattison <
> stephenmattison at gmail.com> wrote:
>
>
>> How can I implement this in Twisted?
>>
>
> You can use DeferredResource:
>
>
> http://twistedmatrix.com/documents/8.2.0/api/twisted.web.util.DeferredResource.html
>
> or you can return NOT_DONE_YET from Resource.render(), and hold on to the
> request:
>
>
> http://twistedmatrix.com/documents/8.2.0/api/twisted.web.resource.Resource.html#render
>
> to leave the connection open until something happens.
>
> For a more elaborate example of a long-polling server component, you could
> see Nevow's Athena:
>
>     http://www.divmod.org/trac/wiki/DivmodNevow/Athena
>
> This does not implement JSON-RPC or XML-RPC, but it has lots of code for
> managing the outstanding connection, which may give you some ideas.
>
> -Glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Stephen Mattison
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091006/de70ddf6/attachment.html>

From listsin at integrateddevcorp.com  Tue Oct  6 22:38:55 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Wed, 7 Oct 2009 00:38:55 -0400
Subject: [Twisted-Python] Lots and lots and lots and lots... of	deferreds
In-Reply-To: <20091007032553.GO1931@steerpike.home.puzzling.org>
References: <3d9b0f27$47ae1a4$685b66bd$@com>
	<20091007011558.24460.746569620.divmod.xquotient.154@boson>
	<EEF62EFB-31D9-493C-BF0E-BEB2654CA246@integrateddevcorp.com>
	<20091007032553.GO1931@steerpike.home.puzzling.org>
Message-ID: <9F409A57-0797-451E-997D-4323ABFC0F37@integrateddevcorp.com>


On Oct 6, 2009, at 11:25 PM, Andrew Bennetts wrote:

> Steve Steiner (listsin) wrote:
> [...]
>> 	I expect the usual flurry of  "you must post your exact code or we
>> can't help you at all, moron" posts, but...
>
> I'll try to restrain myself ;)

Thanks, I appreciate your restraint.  Must say, most posts without  
code drive me a little cuckoo, too.  I hope this one was justified in  
not including specific code.

>> My two top guesses are:
>
> 1) the web server failing to cope with thousands of concurrent  
> requests
>    gracefully, or

Ah, that would certainly make sense in this particular case.  I am  
asking the server for an *awful* lot of stuff all at one time.

> 2) the number of sockets is hitting a system limit (number of FDs  
> you can pass
>    to select(), or hitting the max number of file descriptors,  
> something like
>    that)

That may also be an issue, thank you for pointing that out.

> IIRC the RFCs say that clients SHOULD use no more than two  
> concurrent connections to a server...

As you said, the performance is going to be rate-limited by the  
server's ability to respond to requests anyway, so I think what I'll  
do is just make it so that the "get me a page" queue doesn't put more  
than a couple of requests "in-flight" at the same time.

Thanks for helping me think this out!

Thanks,

S




From rburns at stic.net  Tue Oct  6 23:08:13 2009
From: rburns at stic.net (Ryan Burns)
Date: Tue, 6 Oct 2009 22:08:13 -0700
Subject: [Twisted-Python] using perspective broker to talk to a
	subprocess?
In-Reply-To: <d9047f780910062056k551d2f2eh4941ff2aea360c1d@mail.gmail.com>
References: <87846F13-09DD-4F80-9437-9C731901A196@stic.net>
	<d9047f780910062056k551d2f2eh4941ff2aea360c1d@mail.gmail.com>
Message-ID: <5E9ACE79-F4DE-455C-98C7-1FBE4A0455F6@stic.net>

wow, ampoule looks like just what I need, and I think it will work  
fine as-is.

Thanks for the help,
Ryan



On Oct 6, 2009, at 8:56 PM, Glyph Lefkowitz wrote:

> On Tue, Oct 6, 2009 at 11:18 PM, Ryan Burns <rburns at stic.net> wrote:
>
> Disregarding reasons of why I would want to do this, is this something
> that is possible?
>
> Absolutely.  Here's an example that uses AMP rather than PB:
>
>     https://launchpad.net/ampoule
>
> If AMP is OK, you can just use Ampoule as-is; if not, you can  
> replace the AMP protocol classes it uses with the appropriate PB  
> analogs.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091006/44aab126/attachment.html>

From spongelavapaul at googlemail.com  Wed Oct  7 13:30:46 2009
From: spongelavapaul at googlemail.com (Paul Thomas)
Date: Wed, 7 Oct 2009 20:30:46 +0100
Subject: [Twisted-Python] sleeping in inlineCallbacks
Message-ID: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>

Is there any way to do something like "yield sleep(10)" inside an  
@inlineCallbacks method?



From spongelavapaul at googlemail.com  Wed Oct  7 13:35:50 2009
From: spongelavapaul at googlemail.com (Paul Thomas)
Date: Wed, 7 Oct 2009 20:35:50 +0100
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
Message-ID: <A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>


On 7 Oct 2009, at 20:30, Paul Thomas wrote:

> Is there any way to do something like "yield sleep(10)" inside an  
> @inlineCallbacks method?

I realise I can do this:

def sleep(seconds):
     d = defer.Deferred()
     reactor.callLater(seconds, d.callback, seconds)
     return d

but I wondered if something like that is already in the libraries?



From matt at unshift.net  Wed Oct  7 13:46:05 2009
From: matt at unshift.net (Matt Perry)
Date: Wed, 7 Oct 2009 15:46:05 -0400
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>
Message-ID: <a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>

reactor.callLater() is the best way to delay a certain function call.
sleep() will block the entire program from running, which you probably don't
want to do.


On Wed, Oct 7, 2009 at 3:35 PM, Paul Thomas
<spongelavapaul at googlemail.com>wrote:

>
> On 7 Oct 2009, at 20:30, Paul Thomas wrote:
>
> > Is there any way to do something like "yield sleep(10)" inside an
> > @inlineCallbacks method?
>
> I realise I can do this:
>
> def sleep(seconds):
>     d = defer.Deferred()
>     reactor.callLater(seconds, d.callback, seconds)
>     return d
>
> but I wondered if something like that is already in the libraries?
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091007/336d4567/attachment.html>

From asset at impactdamage.com  Wed Oct  7 13:59:12 2009
From: asset at impactdamage.com (asset)
Date: Wed, 7 Oct 2009 12:59:12 -0700
Subject: [Twisted-Python] Problem with XMLRPC resource wrapped with
	guard basic auth
Message-ID: <4451dd6f$6965490b$2639ba57$@com>

I was indeed being tricked. I actually tested soap with a real client, but 
with xmlrpc i was using the browser.  I was expecting to see the same error 
message, and instead got a new one that was presented by the modifications 
I pulled out of the trunk to support the issue in #4014.  I was expecting 
to see the older error message and it was replaced.

A quick test via,

>>> import xmlrpclib
>>> server = xmlrpclib.Server('http://user:password at localhost:9999/rpc2')
>>> server.quote()

Showed it indeed worked like it should. Swapped it to use SSL and now I'm 
all set.

Thank you for the clarification. Next time I'll test more before posting to 
the list. ;)

TWKiel

----------------------------------------
From: exarkun at twistedmatrix.com
Sent: Tuesday, October 06, 2009 6:43 PM
To: asset at impactdamage.com, "Twisted general discussion" 
<twisted-python at twistedmatrix.com>
Subject: Re: [Twisted-Python] Problem with XMLRPC resource wrapped with 
guard basic auth 

On 12:00 am, asset at impactdamage.com wrote:
>Using the current trunk r27366 (which is after #4014 fixed a related
>issue), I am having trouble with an implementation of web.guard wrapped
>XMLRPC.  This is a new test implementation to expose both a soap and 
>xmlrpc
>interface.  SOAP works, but xmlrpc throws UnsupportedMethod POST.

I think you're being tricked by the confusing way in which this 
exception is displayed and by a slight implementation difference (and 
indeed externally visible behavioral difference) between XMLRPC and 
SOAPPublisher.

SOAPPublisher defines "render" and no other render methods.  So it will 
accept any request method and treat it the same way.  It will never 
raise UnsupportedMethod.

XMLRPC, on the other hand, defines "render_POST" and no other render 
methods, so it will only accept POST requests.  For any other request, 
it will raise UnsupportedMethod and create that exception with a tuple 
of which methods it does allow.  ('POST',) in this case.

The exception I see when I approach this server at /rpc2 with my web 
browser (which is the only thing I've tried, because it's too much work 
to put together a real xml-rpc client that supports basic auth) is just 
what I'd expect.  The browser issues a GET, the XMLRPC resource rejects 
this, indicating it only accepts POSTs.

It may be worth improving the way UnsupportedMethod exceptions are 
stringified to make it more clear what's going on.  Or, if this doesn't 
actually explain your problem, feel free to point that out and provide 
more details about how the client you're using behaves.

Jean-Paul

 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091007/9e8a203c/attachment.html>

From phil at bubblehouse.org  Wed Oct  7 16:04:41 2009
From: phil at bubblehouse.org (Phil Christensen)
Date: Wed, 7 Oct 2009 18:04:41 -0400
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>
	<a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
Message-ID: <5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>

On Oct 7, 2009, at 3:46 PM, Matt Perry wrote:
> On 7 Oct 2009, at 20:30, Paul Thomas wrote:

>> Is there any way to do something like "yield sleep(10)" inside an
>> @inlineCallbacks method?
>>
>> I realise I can do this:
>>
>> def sleep(seconds):
>>     d = defer.Deferred()
>>     reactor.callLater(seconds, d.callback, seconds)
>>     return d
>>
>> but I wondered if something like that is already in the libraries?
>

> reactor.callLater() is the best way to delay a certain function  
> call.  sleep() will block the entire program from running, which you  
> probably don't want to do.

Not in this case; note he's referring to his custom sleep() function,  
not time.sleep()

Paul's example will work just fine. Also, AFAIK there's no existing  
twisted function to do replicate an asynchronous sleep() in this way.

-phil



From exarkun at twistedmatrix.com  Wed Oct  7 16:29:11 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 07 Oct 2009 22:29:11 -0000
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>
	<a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
	<5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
Message-ID: <20091007222911.24460.1105732800.divmod.xquotient.208@boson>

On 10:04 pm, phil at bubblehouse.org wrote:
>On Oct 7, 2009, at 3:46 PM, Matt Perry wrote:
>>On 7 Oct 2009, at 20:30, Paul Thomas wrote:
>
>>>Is there any way to do something like "yield sleep(10)" inside an
>>>@inlineCallbacks method?
>>>
>>>I realise I can do this:
>>>
>>>def sleep(seconds):
>>>     d = defer.Deferred()
>>>     reactor.callLater(seconds, d.callback, seconds)
>>>     return d
>>>
>>>but I wondered if something like that is already in the libraries?
>>
>
>>reactor.callLater() is the best way to delay a certain function
>>call.  sleep() will block the entire program from running, which you
>>probably don't want to do.
>
>Not in this case; note he's referring to his custom sleep() function,
>not time.sleep()
>
>Paul's example will work just fine. Also, AFAIK there's no existing
>twisted function to do replicate an asynchronous sleep() in this way.

Recent versions of Twisted include twisted.internet.defer.deferLater, a 
function rather similar to the sleep function defined above.

Jean-Paul



From kevin.horn at gmail.com  Wed Oct  7 16:40:16 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 7 Oct 2009 17:40:16 -0500
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <20091007222911.24460.1105732800.divmod.xquotient.208@boson>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>
	<a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
	<5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
	<20091007222911.24460.1105732800.divmod.xquotient.208@boson>
Message-ID: <562bcc10910071540g7abd9bd3j3190602c7417a6e0@mail.gmail.com>

On Wed, Oct 7, 2009 at 5:29 PM, <exarkun at twistedmatrix.com> wrote:

> Recent versions of Twisted include twisted.internet.defer.deferLater, a
> function rather similar to the sleep function defined above.
>
> Jean-Paul
>
>
Do you mean twisted.internet.task.deferLater?
Or am I missing something?

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091007/140d3db9/attachment.html>

From exarkun at twistedmatrix.com  Wed Oct  7 18:12:32 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 08 Oct 2009 00:12:32 -0000
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <562bcc10910071540g7abd9bd3j3190602c7417a6e0@mail.gmail.com>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>
	<a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
	<5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
	<20091007222911.24460.1105732800.divmod.xquotient.208@boson>
	<562bcc10910071540g7abd9bd3j3190602c7417a6e0@mail.gmail.com>
Message-ID: <20091008001232.24460.1267375784.divmod.xquotient.209@boson>

On 7 Oct, 10:40 pm, kevin.horn at gmail.com wrote:
>On Wed, Oct 7, 2009 at 5:29 PM, <exarkun at twistedmatrix.com> wrote:
>>Recent versions of Twisted include twisted.internet.defer.deferLater, 
>>a
>>function rather similar to the sleep function defined above.
>>
>>Jean-Paul
>Do you mean twisted.internet.task.deferLater?
>Or am I missing something?

Nope, you're right.  Thanks for the correction.

Jean-Paul



From termim at gmail.com  Wed Oct  7 21:08:28 2009
From: termim at gmail.com (Mikhail Terekhov)
Date: Wed, 7 Oct 2009 23:08:28 -0400
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>
	<a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
	<5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
Message-ID: <12aaa0810910072008o5b6af468u9f78e29b385f9323@mail.gmail.com>

On Wed, Oct 7, 2009 at 6:04 PM, Phil Christensen <phil at bubblehouse.org>wrote:

>
> Paul's example will work just fine. Also, AFAIK there's no existing
> twisted function to do replicate an asynchronous sleep() in this way.
>
> -phil
>

What about Deferred.setTimeout?
http://twistedmatrix.com/documents/current/api/twisted.internet.defer.Deferred.html#setTimeout
IMHO it solves similar problem.

-- 
Mikhail Terekhov
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091007/72e3b0a0/attachment.html>

From glyph at twistedmatrix.com  Wed Oct  7 21:12:45 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 7 Oct 2009 23:12:45 -0400
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <12aaa0810910072008o5b6af468u9f78e29b385f9323@mail.gmail.com>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>
	<a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
	<5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
	<12aaa0810910072008o5b6af468u9f78e29b385f9323@mail.gmail.com>
Message-ID: <d9047f780910072012p607658c9xaf4b6832c838fb03@mail.gmail.com>

On Wed, Oct 7, 2009 at 11:08 PM, Mikhail Terekhov <termim at gmail.com> wrote:

>
> What about Deferred.setTimeout?
> http://twistedmatrix.com/documents/current/api/twisted.internet.defer.Deferred.html#setTimeout
> IMHO it solves similar problem.
>

Deferred.setTimeout does something else.  More importantly, it is
deprecated.  Furthermore, it's fundamentally broken and cannot be made to
work in a reliable way.  Don't use it, or your Twisted programs will break
in a future release of Twisted Core.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091007/5aa443e4/attachment-0001.html>

From andrew at bemusement.org  Wed Oct  7 21:28:22 2009
From: andrew at bemusement.org (Andrew Bennetts)
Date: Thu, 8 Oct 2009 14:28:22 +1100
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <12aaa0810910072008o5b6af468u9f78e29b385f9323@mail.gmail.com>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>
	<a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
	<5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
	<12aaa0810910072008o5b6af468u9f78e29b385f9323@mail.gmail.com>
Message-ID: <20091008032822.GQ1931@steerpike.home.puzzling.org>

Mikhail Terekhov wrote:
>    On Wed, Oct 7, 2009 at 6:04 PM, Phil Christensen <[1]phil at bubblehouse.org>
>    wrote:
> 
>      Paul's example will work just fine. Also, AFAIK there's no existing
>      twisted function to do replicate an asynchronous sleep() in this way.
> 
>      -phil
> 
>    What about Deferred.setTimeout?
>    [2]http://twistedmatrix.com/documents/current/api/twisted.internet.defer.Deferred.html#setTimeout
>    IMHO it solves similar problem.

Deferred.setTimeout is a poor API and is deprecated (despite what the
automatically generated API docs think).
<http://twistedmatrix.com/trac/ticket/178> has some discussion (and links to
more discussion) explaining what's wrong with it, and what a good replacement
would look like.

So please, don't use setTimeout, and definitely do not recommend it to others!

-Andrew.




From jacopo.pecci at gmail.com  Thu Oct  8 00:35:18 2009
From: jacopo.pecci at gmail.com (Jacopo Pecci)
Date: Thu, 8 Oct 2009 09:35:18 +0300
Subject: [Twisted-Python] PB vs JMS
In-Reply-To: <368574aa0910051021g702e4fffx6df865f5dfe60588@mail.gmail.com>
References: <0016e6d640873a273304752fe3d3@google.com>
	<368574aa0910051021g702e4fffx6df865f5dfe60588@mail.gmail.com>
Message-ID: <295c22190910072335u14885af4yf16258d250ca8aa2@mail.gmail.com>

On Mon, Oct 5, 2009 at 8:21 PM, Drew Smathers <drew.smathers at gmail.com> wrote:
>
>
> On Mon, Oct 5, 2009 at 9:14 AM, <jacopo.pecci at gmail.com> wrote:
>>
>> I looked at PB for an architecture with one client distributing some
>> processing to several servers. Now I came across JMS and I have seen that
>> using ActiveMQ with the Stomp protocol there would be a good support for
>> Python.
>> Surprising I couldn’t find any article comparing the two technologies. I
>> wonder if they target different problems (it doesn’t look to me).
>> Is anyone able to sketch advantages of one solution against the other?
>>
>
> I don't think there is a good comparison between the two because they're
> different technologies addressing different problems.  JMS is a messaging
> middleware defined at the Java language API level (hence the need to for
> STOMP protocol and similar adapting layers for use with Python or other
> non-Java languages).  PB is a "secure, easy-to-use Remote Procedure Call
> (RPC) mechanism."
>
> For the system you're descibing it seems like message middleware is more
> what you want.  Unless you want to implement your own load balacing, work
> distribution and failover algorithms?  Another alternative to ActiveMQ is
> RabbitMQ which implements AMQP, which a Python client can speak directly
> without using a limited protocol like STOMP.  There's also handful of good
> AMQP python libs including one for use in Twisted: txamqp.
>
> -Drew
>
>

Thank you Drew.
I should have sketched a bit more:  I have to compute many
self-contained jobs and then elaborate their results.
Jobs are  distributed to many machines and  results are sent back to
the Master. The Master should not wait for all the results to be ready
but should start processing as soon as the first one arrives.  After
all the results have been collected and processed, everything starts
over with newer data.

I have implemented a mock example with PB but if I understand
correctly a messaging system would put me to a higher level of
abstraction taking care of many technicalities. I am now looking at
rabbitmq and txamqp, it is a bit hard to find some documentations but
slowly i am getting the full picture.

Thanks Jacopo



From mr.file at gmail.com  Thu Oct  8 03:04:12 2009
From: mr.file at gmail.com (Fabrizio Mancini)
Date: Thu, 8 Oct 2009 11:04:12 +0200
Subject: [Twisted-Python] PB vs JMS
In-Reply-To: <295c22190910072335u14885af4yf16258d250ca8aa2@mail.gmail.com>
References: <0016e6d640873a273304752fe3d3@google.com>
	<368574aa0910051021g702e4fffx6df865f5dfe60588@mail.gmail.com>
	<295c22190910072335u14885af4yf16258d250ca8aa2@mail.gmail.com>
Message-ID: <793463d60910080204w37469687s2413befc312be8e8@mail.gmail.com>

>
> Thank you Drew.
> I should have sketched a bit more:  I have to compute many
> self-contained jobs and then elaborate their results.
> Jobs are  distributed to many machines and  results are sent back to
> the Master. The Master should not wait for all the results to be ready
> but should start processing as soon as the first one arrives.  After
> all the results have been collected and processed, everything starts
> over with newer data.
>
> I have implemented a mock example with PB but if I understand
> correctly a messaging system would put me to a higher level of
> abstraction taking care of many technicalities. I am now looking at
> rabbitmq and txamqp, it is a bit hard to find some documentations but
> slowly i am getting the full picture.
>
> Thanks Jacopo
>
> Hi Jacopo,
this article problably can give you a big picture
http://blogs.digitar.com/jjww/2009/01/rabbits-and-warrens/
AMQP helps you distribute messages to clients that are network connected and
can do some jobs when receiving messages.
So you can distribute data to your clients using the json protocol to send
messages containing data to the clients. And from the computing client you
can send back the results always using the json protocol. This only if you
don't want to use a central database... but this depends on how you design
your app.
HTH
Fabrizio
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091008/053175f4/attachment.html>

From exarkun at twistedmatrix.com  Thu Oct  8 06:15:47 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 08 Oct 2009 12:15:47 -0000
Subject: [Twisted-Python] inlineCallbacks
In-Reply-To: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
Message-ID: <20091008121547.24460.166029432.divmod.xquotient.219@boson>

On 6 Oct, 02:47 pm, petshmidt at googlemail.com wrote:
>Hi,
>
>calling in client code self.cred.login() I can't print login result.
>What I'm doing wrong? login method returns deffered, but should yield
>result from callRemote method.
>
>Thanks for any help!
>
>Pet
>
>class Cred:
>
>    @inlineCallbacks
>    def login(self):
>        proxy = Proxy(LOGIN_PROXY)
>        l = {"user":LOGIN_USERNAME, "pass":LOGIN_PASSWD}
>        loginResult = yield proxy.callRemote('login', l)
>        print "RESULT", loginResult.result
>        returnValue(loginResult)

It's hard to tell what's going wrong since this example isn't complete. 
If I assume I know what Proxy does, then the code basically looks right 
- although I suspect you only want to print "loginResult", not 
"loginResult.result".  If you can post an sscce - http://sscce.org/ - 
someone might be able to be of more help.

Jean-Paul



From petshmidt at googlemail.com  Thu Oct  8 08:08:23 2009
From: petshmidt at googlemail.com (Pet)
Date: Thu, 8 Oct 2009 16:08:23 +0200
Subject: [Twisted-Python] inlineCallbacks
In-Reply-To: <20091008121547.24460.166029432.divmod.xquotient.219@boson>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com> 
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
Message-ID: <b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>

On Thu, Oct 8, 2009 at 2:15 PM,  <exarkun at twistedmatrix.com> wrote:
> On 6 Oct, 02:47 pm, petshmidt at googlemail.com wrote:
>>Hi,
>>
>>calling in client code self.cred.login() I can't print login result.
>>What I'm doing wrong? login method returns deffered, but should yield
>>result from callRemote method.
>>
>>Thanks for any help!
>>
>>Pet
>>
>>class Cred:
>>
>>    @inlineCallbacks
>>    def login(self):
>>        proxy = Proxy(LOGIN_PROXY)
>>        l = {"user":LOGIN_USERNAME, "pass":LOGIN_PASSWD}
>>        loginResult = yield proxy.callRemote('login', l)
>>        print "RESULT", loginResult.result
>>        returnValue(loginResult)
>
> It's hard to tell what's going wrong since this example isn't complete.
> If I assume I know what Proxy does, then the code basically looks right
> - although I suspect you only want to print "loginResult", not
> "loginResult.result".  If you can post an sscce - http://sscce.org/ -
> someone might be able to be of more help.

Hi,

I've misunderstood the concept of inlinecallbacks. I've thought they
makes deferred blocking "again" so execution of code stops until
result is available and didn't catch any errors of Proxy. Because
connection failed, there was no error and no result. I've finally
realized that inlinecallbacks do not change behavior of deferred and
now I simply use my login function as deferred with callbacks and
errbacks

Pet

>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From amacbeth at gmail.com  Thu Oct  8 13:54:59 2009
From: amacbeth at gmail.com (Adam MacBeth)
Date: Thu, 8 Oct 2009 12:54:59 -0700
Subject: [Twisted-Python] IMAP IDLE client support
Message-ID: <4ef057f60910081254y2e9ccb86h408bd717e046a479@mail.gmail.com>

It doesn't appear that Twisted's IMAP client
(twisted.mail.imap.IMAP4Client) supports the IDLE command.

Are there any plans for this or does anyone have any thoughts on the
complexity of implementing it?

Thanks,
Adam



From listsin at integrateddevcorp.com  Thu Oct  8 15:31:37 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Thu, 8 Oct 2009 17:31:37 -0400
Subject: [Twisted-Python] HTTPClientFactory's deferred never finishing
	download on .vcf (vcard file) link
In-Reply-To: <b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
Message-ID: <5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>

I'm attempting to get some web pages using the following code which I  
did not write.  While it seems to work (except for this, so far) I  
have no idea if this is a reasonable way to do this (get simple web  
pages) at all:

def getPage(url, contextFactory=None, *args, **kwargs):
     """
     Download a web page as a string.

     Download a page. Return a deferred, which will callback with a
     page (as a string) or errback with a description of the error.

     See HTTPClientFactory to see what extra args can be passed.
     """
     scheme, host, port, path = parse_url(url)
     factory = HTTPClientFactory(url, *args, **kwargs)
     if scheme == 'https':
         from twisted.internet import ssl
         if contextFactory is None:
             contextFactory = ssl.ClientContextFactory()
         reactor.connectSSL(host, port, factory, contextFactory)
     else:
         reactor.connectTCP(host, port, factory)

     return factory.deferred

The code then adds a bunch of callbacks to the returned deferred to do  
various things  to the data and everything's swell.

Until the url shown below occurs.  The deferred never calls any of the  
callbacks and just never seems to finish.

I haven't found any way to dump the actual headers from within Twisted  
as this occurs so the header values shown below are from firefox  
calling into the same URL.  I will put tcpdump in the way if I need to  
to figure this out but I'm thinking this is something simple (or wrong  
with the method used in the code above).

Can anyone tell me what it is about this particular transaction that's  
not allowing the deferred to fire its callbacks which I presume is  
because it never finishes getting the stuff it's looking for.  This  
particular URL returns a .vcf file.

Also, what is the proper intervention?  I'd like not to download  
the .vcf as it's completely useless for my purpose but I'm not  
familiar enough with twisted.web to know where to intervene.


Thanks,

S

http://www.integrateddevcorp.com/index.php?option=com_contact&task=vcard&contact_id=1&format=raw&tmpl=component

GET /index.php? 
option=com_contact&task=vcard&contact_id=1&format=raw&tmpl=component  
HTTP/1.1
Host: www.integrateddevcorp.com
User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.6; en-US; rv: 
1.9.1.3) Gecko/20090824 Firefox/3.5.3
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip,deflate
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7
Keep-Alive: 300
Connection: keep-alive

HTTP/1.x 200 OK
Date: Thu, 08 Oct 2009 21:14:37 GMT
Server: Apache
X-Powered-By: PHP/5.2.8
Set-Cookie:  
ff70eb7218d444fa639af7ae7e66e82f=488606e54b7fdd9affb0b0725a2a6607;  
path=/
P3P: CP="NOI ADM DEV PSAi COM NAV OUR OTRo STP IND DEM"
Content-Disposition: attachment;  
filename=Integrated_Development_Corporation.vcf
Content-Length: 1020
Connection: close
Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre- 
check=0
Pragma: no-cache
Expires: Mon, 1 Jan 2001 00:00:00 GMT
Last-Modified: Thu, 08 Oct 2009 21:14:37 GMT
Content-Type: text/html; charset=utf-8
----------------------------------------------------------




From ellisonbg.net at gmail.com  Thu Oct  8 17:23:39 2009
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Thu, 8 Oct 2009 16:23:39 -0700
Subject: [Twisted-Python] Disturbing aspect of zope.interface
Message-ID: <6ce0ac130910081623sba5fb11g2c10b76013c318f3@mail.gmail.com>

Hi,

I know this is not the zope list, but I am encountering this in a twisted
project, so I
wanted to get some ideas here first.  I am finding that zope.interface is
like
an infectious disease.  Here is a simple example:

In [35]: import zope.interface as zi

In [37]: class A(object):
   ....:         pass

In [38]: class IB(zi.Interface):
   ....:         pass

In [39]: hasattr(A, '__provides__')
Out[39]: False

In [41]: # Inheriting from A gives A additional methods

In [42]: class B(A):
   ....:         zi.implements(IB)

In [43]: hasattr(A, '__provides__')
Out[43]: True

In [45]: # C is clean of the additional methods

In [46]: class C(object):
   ....:         pass

In [47]: hasattr(C, '__provides__')
Out[47]: False

The disturbing thing is that now A (which is just an object) has been hacked
on
by zope.interface.  It has additional methods (__provides__, etc.) that are
specific to
zope.

Summary: If a class A is later subclassed by something B that calls
zi.implements, the original class A
becomes infected with all the zope.interface stuff.

Is there a way to avoid this?  Doesn't this seem like a bad idea?

Cheers,

Brian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091008/fd0ac4c5/attachment.html>

From glyph at twistedmatrix.com  Thu Oct  8 17:57:52 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 8 Oct 2009 19:57:52 -0400
Subject: [Twisted-Python] Disturbing aspect of zope.interface
In-Reply-To: <6ce0ac130910081623sba5fb11g2c10b76013c318f3@mail.gmail.com>
References: <6ce0ac130910081623sba5fb11g2c10b76013c318f3@mail.gmail.com>
Message-ID: <d9047f780910081657x2516218vb020d38aa664403b@mail.gmail.com>

On Thu, Oct 8, 2009 at 7:23 PM, Brian Granger <ellisonbg.net at gmail.com>wrote:

> I know this is not the zope list
>

You're right, it's not.  Perhaps you could send a message to the interface
package development list?

    https://mail.zope.org/mailman/listinfo/interface-dev

The disturbing thing is that now A (which is just an object) has been hacked
> on
> by zope.interface.  It has additional methods (__provides__, etc.) that are
> specific to
> zope.
>

Why does this disturb you?  Would you feel better if it were called
__zope_provides__?

Summary: If a class A is later subclassed by something B that calls
> zi.implements, the original class A
> becomes infected with all the zope.interface stuff.
>

A gets an additional attribute.  Its behavior doesn't change in any other
way.  I don't really see what's wrong with that, unless you have a differing
definition of the __provides__ attribute in your code.

Is there a way to avoid this?


Depending on what your definition of "this" is, there almost certainly is.
In the simplest case, you could submit a patch to zope interface.

Doesn't this seem like a bad idea?
>

No.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091008/f97830cd/attachment.html>

From markv at lumierevfx.com  Thu Oct  8 17:59:03 2009
From: markv at lumierevfx.com (Mark Visser)
Date: Thu, 08 Oct 2009 19:59:03 -0400
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <6ce0ac130910081623sba5fb11g2c10b76013c318f3@mail.gmail.com>
References: <6ce0ac130910081623sba5fb11g2c10b76013c318f3@mail.gmail.com>
Message-ID: <4ACE7CC7.30705@lumierevfx.com>

Is there a project underway to modernize twisted?

I've been bitten a couple times by twisted's use of old-style classes. 
Now that Jython is finally off the 2.2 branch, is there any real reason 
to stay backwards compatible?

cheers,
-Mark

-- 
Mark Visser, Software Director
Lumière VFX
Email: markv at lumierevfx.com
Phone: +1-514-316-1080 x3030




From glyph at twistedmatrix.com  Thu Oct  8 18:08:12 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 8 Oct 2009 20:08:12 -0400
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <4ACE7CC7.30705@lumierevfx.com>
References: <6ce0ac130910081623sba5fb11g2c10b76013c318f3@mail.gmail.com>
	<4ACE7CC7.30705@lumierevfx.com>
Message-ID: <d9047f780910081708g688b8a54l3767b0a81cce6698@mail.gmail.com>

On Thu, Oct 8, 2009 at 7:59 PM, Mark Visser <markv at lumierevfx.com> wrote:

> Is there a project underway to modernize twisted?
>

Yes.  The project is called "twisted" :).  Personally I find that it is very
"modern".

I've been bitten a couple times by twisted's use of old-style classes.
> Now that Jython is finally off the 2.2 branch, is there any real reason
> to stay backwards compatible?
>

Changing a class from old-style to new-style is an incompatible change.  The
difficulty is that if existing libraries use a particular class and inherit
from it, changing the class to be new-style can have effects from changing
how their descriptors work to causing an exception when their module is
imported.

We have a compatibility policy, intended to prevent people's applications
from breaking when they upgrade Twisted:
http://twistedmatrix.com/trac/wiki/CompatibilityPolicy

If old-style classes can be evolved into new-style classes while somehow
following this policy, that would be great.  The problem is that providing
compatibility at this level is time-consuming and difficult.  One problem in
particular is that we don't want to litter the codebase with lots of "Foo"
and "NewFoo" or "Foo2" sitting right next to it, so we would have to think
of new names for everything.

If you have a particular interest in the new-style vs. old-style problem,
please feel free to submit patches!  This is one of those areas where we
need a continuous stream of small improvements from the community, because
it's just too much drudgework for the core team to take care of in our spare
time.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091008/27523248/attachment.html>

From foom at fuhm.net  Thu Oct  8 18:13:31 2009
From: foom at fuhm.net (James Y Knight)
Date: Thu, 8 Oct 2009 20:13:31 -0400
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <4ACE7CC7.30705@lumierevfx.com>
References: <6ce0ac130910081623sba5fb11g2c10b76013c318f3@mail.gmail.com>
	<4ACE7CC7.30705@lumierevfx.com>
Message-ID: <72782FFC-8211-49AC-B1E2-7C8BD812ED50@fuhm.net>

On Oct 8, 2009, at 7:59 PM, Mark Visser wrote:
> I've been bitten a couple times by twisted's use of old-style classes.
> Now that Jython is finally off the 2.2 branch, is there any real  
> reason
> to stay backwards compatible?

I don't see any reason to make this change for twisted running on the  
2.x branch of CPython.

Switching all the classes in twisted to newstyle before then could  
break some user's code or tests, and doesn't really provide any  
benefits as far as I can tell.

For Python 3.x, oldstyle classes don't exist, so that'll happen  
automatically during the conversion.

Apparently in PyPy, oldstyle classes are significantly slower than  
newstyle classes. So it might be interesting for them to force  
everything in twisted.* to be newstyle classes and see what breaks. :)

James



From markv at lumierevfx.com  Thu Oct  8 19:03:58 2009
From: markv at lumierevfx.com (Mark Visser)
Date: Thu, 08 Oct 2009 21:03:58 -0400
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <72782FFC-8211-49AC-B1E2-7C8BD812ED50@fuhm.net>
References: <6ce0ac130910081623sba5fb11g2c10b76013c318f3@mail.gmail.com>	<4ACE7CC7.30705@lumierevfx.com>
	<72782FFC-8211-49AC-B1E2-7C8BD812ED50@fuhm.net>
Message-ID: <4ACE8BFE.3010200@lumierevfx.com>


> For Python 3.x, oldstyle classes don't exist, so that'll happen  
> automatically during the conversion.
>   
Aha! Let me rephrase that, then:

Is there a project underway to port Twisted to Python 3.x?

cheers,
-Mark

-- 
Mark Visser, Software Director
Lumière VFX
Email: markv at lumierevfx.com
Phone: +1-514-316-1080 x3030




From listsin at integrateddevcorp.com  Thu Oct  8 19:18:57 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Thu, 8 Oct 2009 21:18:57 -0400
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <4ACE8BFE.3010200@lumierevfx.com>
References: <6ce0ac130910081623sba5fb11g2c10b76013c318f3@mail.gmail.com>	<4ACE7CC7.30705@lumierevfx.com>
	<72782FFC-8211-49AC-B1E2-7C8BD812ED50@fuhm.net>
	<4ACE8BFE.3010200@lumierevfx.com>
Message-ID: <E9CC8DF1-94E6-49BA-81C2-42F3BD246746@integrateddevcorp.com>


On Oct 8, 2009, at 9:03 PM, Mark Visser wrote:

>
>> For Python 3.x, oldstyle classes don't exist, so that'll happen
>> automatically during the conversion.
>>
> Aha! Let me rephrase that, then:
>
> Is there a project underway to port Twisted to Python 3.x?

Yes, it's called Twisted.

S





From matt at unshift.net  Thu Oct  8 19:28:10 2009
From: matt at unshift.net (Matt Perry)
Date: Thu, 8 Oct 2009 21:28:10 -0400
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <E9CC8DF1-94E6-49BA-81C2-42F3BD246746@integrateddevcorp.com>
References: <6ce0ac130910081623sba5fb11g2c10b76013c318f3@mail.gmail.com>
	<4ACE7CC7.30705@lumierevfx.com>
	<72782FFC-8211-49AC-B1E2-7C8BD812ED50@fuhm.net>
	<4ACE8BFE.3010200@lumierevfx.com>
	<E9CC8DF1-94E6-49BA-81C2-42F3BD246746@integrateddevcorp.com>
Message-ID: <a8c89c8c0910081828n4e2787efw78e99589ff0a620d@mail.gmail.com>

Mark, you might find this link helpful:
http://stackoverflow.com/questions/172306/how-are-you-planning-on-handling-the-migration-to-python-3/214601#214601

Seems to me that the answer is no, there isn't a serious effort underway to
port to Python 3, and there probably won't be for a while.  My guess is that
porting efforts will be rather pedestrian (e.g., running 2to3 and fixing a
few things here and there) for a while until Python 3 gains some momentum,
or unless there's a lot of community contributions for it.


  - Matt




On Thu, Oct 8, 2009 at 9:18 PM, Steve Steiner (listsin) <
listsin at integrateddevcorp.com> wrote:

>
> On Oct 8, 2009, at 9:03 PM, Mark Visser wrote:
>
> >
> >> For Python 3.x, oldstyle classes don't exist, so that'll happen
> >> automatically during the conversion.
> >>
> > Aha! Let me rephrase that, then:
> >
> > Is there a project underway to port Twisted to Python 3.x?
>
> Yes, it's called Twisted.
>
> S
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091008/b738cbeb/attachment.html>

From itamar at itamarst.org  Thu Oct  8 21:00:32 2009
From: itamar at itamarst.org (Itamar Turner-Trauring (aka Shtull-Trauring))
Date: Thu, 08 Oct 2009 23:00:32 -0400
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <4ACE8BFE.3010200@lumierevfx.com>
References: <6ce0ac130910081623sba5fb11g2c10b76013c318f3@mail.gmail.com>
	<4ACE7CC7.30705@lumierevfx.com>
	<72782FFC-8211-49AC-B1E2-7C8BD812ED50@fuhm.net>
	<4ACE8BFE.3010200@lumierevfx.com>
Message-ID: <1255057232.2243.67.camel@pintsize>

On Thu, 2009-10-08 at 21:03 -0400, Mark Visser wrote:

> Is there a project underway to port Twisted to Python 3.x?

Not at the moment. Supporting both 2.x and 3.x is harder than it should
be, and all of Twisted's users (and almost all Python users) use 2.x.

-Itamar




From exarkun at twistedmatrix.com  Thu Oct  8 21:45:02 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 09 Oct 2009 03:45:02 -0000
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <4ACE8BFE.3010200@lumierevfx.com>
References: <6ce0ac130910081623sba5fb11g2c10b76013c318f3@mail.gmail.com>
	<4ACE7CC7.30705@lumierevfx.com>
	<72782FFC-8211-49AC-B1E2-7C8BD812ED50@fuhm.net>
	<4ACE8BFE.3010200@lumierevfx.com>
Message-ID: <20091009034502.24460.508537305.divmod.xquotient.226@boson>

On 01:03 am, markv at lumierevfx.com wrote:
>
>>For Python 3.x, oldstyle classes don't exist, so that'll happen
>>automatically during the conversion.
>Aha! Let me rephrase that, then:
>
>Is there a project underway to port Twisted to Python 3.x?

It would be misleading to characterize any part of Twisted development 
as "a project underway".  Twisted is a project, certainly.  It may even 
be underway itself.  Beyond that point, I don't think the metaphor is 
terribly useful or applicable.  People work on Twisted.  Sometimes they 
do it with a long term plan.  More often than not, they just have a 
feature they want to add or a bug they want to fix.

However, if I were to make up a plan for porting Twisted to Python 3.x, 
then the first part of that plan would be to fix all of the failing 
tests reported here:

http://buildbot.twistedmatrix.com/builders/python-3k- 
warnings/builds/203/steps/trial/logs/problems

These are tests which fail when Twisted's test suite is run with the -3 
option on Python 2.6.  Tickets for these failures and patches fixing 
them would be greatly appreciated.

Once that's out of the way, it will make sense to talk about what the 
next step is.

Jean-Paul



From ellisonbg.net at gmail.com  Thu Oct  8 23:53:48 2009
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Thu, 8 Oct 2009 22:53:48 -0700
Subject: [Twisted-Python] Disturbing aspect of zope.interface
In-Reply-To: <d9047f780910081657x2516218vb020d38aa664403b@mail.gmail.com>
References: <6ce0ac130910081623sba5fb11g2c10b76013c318f3@mail.gmail.com>
	<d9047f780910081657x2516218vb020d38aa664403b@mail.gmail.com>
Message-ID: <6ce0ac130910082253w5ddf3755s41c23974c3c13d9b@mail.gmail.com>

> On Thu, Oct 8, 2009 at 7:23 PM, Brian Granger <ellisonbg.net at gmail.com>wrote:
>
>> I know this is not the zope list
>>
>
> You're right, it's not.  Perhaps you could send a message to the interface
> package development list?
>
>     https://mail.zope.org/mailman/listinfo/interface-dev
>
>
Yes, I will do that.  I wanted to get an opinion here first from the "users
of zope.interface" first though
to see if anyone else had run into these things in the wild.


> The disturbing thing is that now A (which is just an object) has been
>> hacked on
>> by zope.interface.  It has additional methods (__provides__, etc.) that
>> are specific to
>> zope.
>>
>
> Why does this disturb you?  Would you feel better if it were called
> __zope_provides__?
>
>
Maybe a little bit, but name collisions are a minor concern in my case...


> Summary: If a class A is later subclassed by something B that calls
>> zi.implements, the original class A
>> becomes infected with all the zope.interface stuff.
>>
>
> A gets an additional attribute.  Its behavior doesn't change in any other
> way.  I don't really see what's wrong with that, unless you have a differing
> definition of the __provides__ attribute in your code.
>
>
...but __provides__ is not exactly a "plain old attribute":

* The __provides__ attribute is a descriptor that sometimes raises
AttributeError even though it exists.
This is how I found all of this.  I called dir on my class and __provides__
was listed.  But
hasattr(cls, '__provides') returned False.  I consider this to be a separate
bug, but because __provides__
started to appear on all of my classes, I was seeing it *everywhere*.

* The internal implementation of __provides__ is handled by a custom
__metaclass__ hook.
zope.interface tries to be pretty careful in not actually *using* a custom
metaclass, but it
does set and then later remove the __metaclass__ hook.

In my mind, both of these things are in the "unwanted side effect" category.


> Is there a way to avoid this?
>
>
> Depending on what your definition of "this" is, there almost certainly is.
> In the simplest case, you could submit a patch to zope interface.
>
>
That is definitely a likely outcome of this discussion.  For now though, I
was just wondering
if other's had run into this issue.  For now, it sounds like not.

Cheers,

Brian


> Doesn't this seem like a bad idea?
>>
>
> No.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091008/7e6efe88/attachment.html>

From rlotun at gmail.com  Fri Oct  9 03:53:44 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Fri, 9 Oct 2009 10:53:44 +0100
Subject: [Twisted-Python] HTTPClientFactory's deferred never finishing
	download on .vcf (vcard file) link
In-Reply-To: <5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
Message-ID: <95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>

Hi,


On Thu, Oct 8, 2009 at 10:31 PM, Steve Steiner (listsin)
<listsin at integrateddevcorp.com> wrote:
> I haven't found any way to dump the actual headers from within Twisted

The getPage function in twisted.web is suited for simple calls but
won't return returns. What you have to do is create your own slightly
modified version of getPage that keeps track of the factory used for
the call (by attaching it to the deferred or something).

> Can anyone tell me what it is about this particular transaction that's
> not allowing the deferred to fire its callbacks which I presume is
> because it never finishes getting the stuff it's looking for.  This
> particular URL returns a .vcf file.

Well, without seeing the complete code example that's failing I can't
really tell you. The best I can say is that you should make sure to
attach errBacks that log any errors you see (i.e. it could be as
simple as going 'print result.getTraceback()').

Cheers,
Reza

-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   reza at tweetdeck.com
twitter: @rlotun



From rlotun at gmail.com  Fri Oct  9 03:54:29 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Fri, 9 Oct 2009 10:54:29 +0100
Subject: [Twisted-Python] HTTPClientFactory's deferred never finishing
	download on .vcf (vcard file) link
In-Reply-To: <95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
Message-ID: <95bb10690910090254g23895fa3nac658ff6a7f4507f@mail.gmail.com>

On Fri, Oct 9, 2009 at 10:53 AM, Reza Lotun <rlotun at gmail.com> wrote:
> won't return returns. What you have to do is create your own slightly

I meant won't return headers ;-)

Reza

-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   reza at tweetdeck.com
twitter: @rlotun



From screwtape at froup.com  Fri Oct  9 05:56:10 2009
From: screwtape at froup.com (Tim Allen)
Date: Fri, 9 Oct 2009 22:56:10 +1100
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <20091009034502.24460.508537305.divmod.xquotient.226@boson>
References: <6ce0ac130910081623sba5fb11g2c10b76013c318f3@mail.gmail.com>
	<4ACE7CC7.30705@lumierevfx.com>
	<72782FFC-8211-49AC-B1E2-7C8BD812ED50@fuhm.net>
	<4ACE8BFE.3010200@lumierevfx.com>
	<20091009034502.24460.508537305.divmod.xquotient.226@boson>
Message-ID: <20091009115610.GA28048@thristian.org>

On Fri, Oct 09, 2009 at 03:45:02AM -0000, exarkun at twistedmatrix.com wrote:
> However, if I were to make up a plan for porting Twisted to Python 3.x, 
> then the first part of that plan would be to fix all of the failing 
> tests reported here:
> 
> http://buildbot.twistedmatrix.com/builders/python-3k- 
> warnings/builds/203/steps/trial/logs/problems
> 
> These are tests which fail when Twisted's test suite is run with the -3 
> option on Python 2.6.  Tickets for these failures and patches fixing 
> them would be greatly appreciated.

I found ticket 2484 which is (I believe) about making Twisted
translatable to Python 3.x with the stock 2to3 tool:

    http://twistedmatrix.com/trac/ticket/2484

I've added a comment about all the DeprecationWarnings issued by
Twisted's test suite when run under Python 2.6's 3.x-compatibility
warning mode; there's an awful lot more than just the 24 that cause test
failures.

I've also filed a bug about fixing one of the warnings mentioned, the
one about has_key() being removed in 3.x:

    http://twistedmatrix.com/trac/ticket/4053

There's a few other warnings for which cleanup patches would be a good
lazy-afternoon effort. :)



From listsin at integrateddevcorp.com  Fri Oct  9 23:34:03 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Sat, 10 Oct 2009 01:34:03 -0400
Subject: [Twisted-Python] HTTPClientFactory's deferred never finishing
	download on .vcf (vcard file) link
In-Reply-To: <95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
Message-ID: <2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>


On Oct 9, 2009, at 5:53 AM, Reza Lotun wrote:

>> I haven't found any way to dump the actual headers from within  
>> Twisted
>
> The getPage function in twisted.web is suited for simple calls but
> won't return returns. What you have to do is create your own slightly
> modified version of getPage that keeps track of the factory used for
> the call (by attaching it to the deferred or something).

Yah, I kind of think this code was intended to do his own getPage()  
but I'm not exactly sure what the point was.  Maybe he used it for  
debugging along the way, but the original intent was lost due to lack  
of VCS (as was he!)

I ended up rewriting it to use the simple client.getPage()

Along the way, I ran into:

	http://python.net/crew/mwh/apidocs/twisted.web.http.Request.html

Good Lord, no wonder I'm confused.

Half PEP-8, http://www.python.org/dev/peps/pep-0008/, half JavaRama.

I finally figured out that it was a stupid string formatting bug in  
the code that was being echoed by Twisted but swallowed by the "Grand  
Catcher of all Things Exception" in Twisted..

Once I found and fixed that, everything works fine -- until the next  
time.

Thanks for your help.

S




From listsin at integrateddevcorp.com  Sat Oct 10 00:22:07 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Sat, 10 Oct 2009 02:22:07 -0400
Subject: [Twisted-Python] HTTPClientFactory's deferred never finishing
	download on .vcf (vcard file) link
In-Reply-To: <2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
	<2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
Message-ID: <F1E69386-1C79-4F59-A7C8-F5BA1F81AE24@integrateddevcorp.com>


On Oct 10, 2009, at 1:34 AM, Steve Steiner (listsin) wrote:
> Along the way, I ran into:
>
> 	http://python.net/crew/mwh/apidocs/twisted.web.http.Request.html

Just realized that that was off-twistedmatrix, same doc at:

	http://twistedmatrix.com/documents/8.2.0/api/twisted.web.http.Request.html

so it's not some off-site weirdness...

S




From glyph at twistedmatrix.com  Sat Oct 10 01:18:36 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 10 Oct 2009 03:18:36 -0400
Subject: [Twisted-Python] HTTPClientFactory's deferred never finishing
	download on .vcf (vcard file) link
In-Reply-To: <F1E69386-1C79-4F59-A7C8-F5BA1F81AE24@integrateddevcorp.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
	<2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
	<F1E69386-1C79-4F59-A7C8-F5BA1F81AE24@integrateddevcorp.com>
Message-ID: <d9047f780910100018k1785cff3q5a742fcbcb8ec41b@mail.gmail.com>

On Sat, Oct 10, 2009 at 2:22 AM, Steve Steiner (listsin) <
listsin at integrateddevcorp.com> wrote:
>
> Just realized that that was off-twistedmatrix, same doc at:
>
>
> http://twistedmatrix.com/documents/8.2.0/api/twisted.web.http.Request.html
>
> so it's not some off-site weirdness...
>

What "weirdness" are you referring to?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091010/421844fb/attachment.html>

From rlotun at gmail.com  Sat Oct 10 05:34:40 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Sat, 10 Oct 2009 12:34:40 +0100
Subject: [Twisted-Python] HTTPClientFactory's deferred never finishing
	download on .vcf (vcard file) link
In-Reply-To: <2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
	<2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
Message-ID: <95bb10690910100434y7808a2a4v1955b9f4e58efd83@mail.gmail.com>

Hi,

On Sat, Oct 10, 2009 at 6:34 AM, Steve Steiner
<listsin at integrateddevcorp.com> wrote:
>        http://python.net/crew/mwh/apidocs/twisted.web.http.Request.html
>
> Good Lord, no wonder I'm confused.
>
> Half PEP-8, http://www.python.org/dev/peps/pep-0008/, half JavaRama.

I'm not quite sure what you mean. Are you talking about web.client or
web.server? If you're writing an HTTP server in Twisted you deal with
Request objects - client requests use HTTPClientFactory. There is a
new twisted.web client implementation in the works which will
hopefully be ready for trunk in the near future, and which should
provide nearly the same functionality offered by urllib2 (or more).

> I finally figured out that it was a stupid string formatting bug in the code
> that was being echoed by Twisted but swallowed by the "Grand Catcher of all
> Things Exception" in Twisted..
>
> Once I found and fixed that, everything works fine -- until the next time.

Exceptions shouldn't be swallowed by twisted. If you simply attach
errBacks then you'll get the exception and full traceback. It really
isn't that bad at all - I thought it looked crazy when I first
started, but all the information is there to debug, etc.

> Thanks for your help.

No problem.

Cheers,
Reza

-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   reza at tweetdeck.com
twitter: @rlotun



From decvar at gmail.com  Sat Oct 10 06:14:45 2009
From: decvar at gmail.com (Stanislav Yudin)
Date: Sat, 10 Oct 2009 17:44:45 +0530
Subject: [Twisted-Python] reactor.run() do not return after reactor.stop()
Message-ID: <cb137f960910100514u76e5aca3w9f8961a545084201@mail.gmail.com>

Hi everyone,
I am having a problem with current twisted trunk (rev 27375). I am trying to
implement simple ssh client with conch.ssh but right now my implementation
works wrong way. I've made a wrapper class for my client factory, to
separate host/creds information and command I want to execute. So in execute
method of the wrapper I am calling reactor.run() - (that blocks execute
method) and in one of callbacks for success/error calling reactor.stop(). So
the problem is that the first call to execute returns from reactor.run()
right after reactor.stop(), but second call to same method of same instance
do not return ever.
I believe I am doing something wrong, so please help with find out what I've
missed. Problem code attached.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091010/55a822b2/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: problem.py
Type: text/x-python
Size: 6722 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20091010/55a822b2/attachment-0002.py>

From johann.borck at densedata.com  Sat Oct 10 06:40:15 2009
From: johann.borck at densedata.com (Johann Borck)
Date: Sat, 10 Oct 2009 14:40:15 +0200
Subject: [Twisted-Python] reactor.run() do not return after
	reactor.stop()
In-Reply-To: <cb137f960910100514u76e5aca3w9f8961a545084201@mail.gmail.com>
References: <cb137f960910100514u76e5aca3w9f8961a545084201@mail.gmail.com>
Message-ID: <4AD080AF.6020202@densedata.com>

Stanislav Yudin wrote:
> Hi everyone,
> I am having a problem with current twisted trunk (rev 27375). ...  So 
> the problem is that the first call to execute returns from 
> reactor.run() right after reactor.stop(), but second call to same 
> method of same instance do not return ever.
> I believe I am doing something wrong, so please help with find out 
> what I've missed. Problem code attached.
http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#WhycanttheTwistedsreactorberestarted

But since you can do everything without restarting the reactor, that's 
no real limitation.

hth, Johann



From exarkun at twistedmatrix.com  Sat Oct 10 07:43:39 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 10 Oct 2009 13:43:39 -0000
Subject: [Twisted-Python] HTTPClientFactory's deferred never
	finishing	download on .vcf (vcard file) link
Message-ID: <20091010134339.21185.1361288728.divmod.xquotient.20@localhost.localdomain>

On 05:34 am, listsin at integrateddevcorp.com wrote:
>
>On Oct 9, 2009, at 5:53 AM, Reza Lotun wrote:
>>>I haven't found any way to dump the actual headers from within
>>>Twisted
>>
>>The getPage function in twisted.web is suited for simple calls but
>>won't return returns. What you have to do is create your own slightly
>>modified version of getPage that keeps track of the factory used for
>>the call (by attaching it to the deferred or something).
>
>Yah, I kind of think this code was intended to do his own getPage()
>but I'm not exactly sure what the point was.  Maybe he used it for
>debugging along the way, but the original intent was lost due to lack
>of VCS (as was he!)
>
>I ended up rewriting it to use the simple client.getPage()
>
>Along the way, I ran into:
>
>http://python.net/crew/mwh/apidocs/twisted.web.http.Request.html
>
>Good Lord, no wonder I'm confused.
>
>Half PEP-8, http://www.python.org/dev/peps/pep-0008/, half JavaRama.
>
>I finally figured out that it was a stupid string formatting bug in
>the code that was being echoed by Twisted but swallowed by the "Grand
>Catcher of all Things Exception" in Twisted..
>
>Once I found and fixed that, everything works fine -- until the next
>time.

As Reza Lotun pointed out, exceptions raised by application code and 
caught by Twisted are logged.  If you find a place where application 
code can raise an exception and Twisted doesn't log it, this is a bug 
and should be reported.

Jean-Paul



From listsin at integrateddevcorp.com  Sat Oct 10 09:56:41 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Sat, 10 Oct 2009 11:56:41 -0400
Subject: [Twisted-Python] HTTPClientFactory's deferred never finishing
	download on .vcf (vcard file) link
In-Reply-To: <d9047f780910100018k1785cff3q5a742fcbcb8ec41b@mail.gmail.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
	<2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
	<F1E69386-1C79-4F59-A7C8-F5BA1F81AE24@integrateddevcorp.com>
	<d9047f780910100018k1785cff3q5a742fcbcb8ec41b@mail.gmail.com>
Message-ID: <86D97BA9-3E96-4CB2-AE91-F7AD0CD19726@integrateddevcorp.com>


On Oct 10, 2009, at 3:18 AM, Glyph Lefkowitz wrote:

> On Sat, Oct 10, 2009 at 2:22 AM, Steve Steiner (listsin) <listsin at integrateddevcorp.com 
> > wrote:
> Just realized that that was off-twistedmatrix, same doc at:
>
>        http://twistedmatrix.com/documents/8.2.0/api/twisted.web.http.Request.html
>
> so it's not some off-site weirdness...
>
> What "weirdness" are you referring to?

I was just referring to the fact that the original document was not on  
the Twisted site so I was referring to it not being something someone  
else did with Twisted.

One of the things I was, and still am having some trouble with in  
Twisted is remembering the right names of things.

Much of the other code I'm using follows PEP-8 naming_conventions for  
methods and such whereas Twisted follows the Twisted Coding Standard  
which is a more javaCamelCase style convention.

That particular documentation refers to 'backwards compatible'  
functions using PEP-8 style attribute names while preferring the newer  
Twisted Coding Standard flavoured names.

S

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091010/52f2c508/attachment-0001.html>

From decvar at gmail.com  Sat Oct 10 10:50:01 2009
From: decvar at gmail.com (Stanislav Yudin)
Date: Sat, 10 Oct 2009 22:20:01 +0530
Subject: [Twisted-Python] reactor.run() do not return after
	reactor.stop()
In-Reply-To: <4AD080AF.6020202@densedata.com>
References: <cb137f960910100514u76e5aca3w9f8961a545084201@mail.gmail.com>
	<4AD080AF.6020202@densedata.com>
Message-ID: <cb137f960910100950h41eae4ackfbefd7332904ce52@mail.gmail.com>

Thanks, but how can I pass control back to calling code after starting the
reactor? Or the idea is to run it in separate thread? I understand that main
idea on twisted is async processing, but this time I need to block the
calling code until response is received.

On Sat, Oct 10, 2009 at 6:10 PM, Johann Borck <johann.borck at densedata.com>wrote:

> Stanislav Yudin wrote:
> > Hi everyone,
> > I am having a problem with current twisted trunk (rev 27375). ...  So
> > the problem is that the first call to execute returns from
> > reactor.run() right after reactor.stop(), but second call to same
> > method of same instance do not return ever.
> > I believe I am doing something wrong, so please help with find out
> > what I've missed. Problem code attached.
>
> http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#WhycanttheTwistedsreactorberestarted
>
> But since you can do everything without restarting the reactor, that's
> no real limitation.
>
> hth, Johann
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091010/9c895107/attachment.html>

From johann.borck at densedata.com  Sat Oct 10 12:25:35 2009
From: johann.borck at densedata.com (Johann Borck)
Date: Sat, 10 Oct 2009 20:25:35 +0200
Subject: [Twisted-Python] reactor.run() do not return
	after	reactor.stop()
In-Reply-To: <cb137f960910100950h41eae4ackfbefd7332904ce52@mail.gmail.com>
References: <cb137f960910100514u76e5aca3w9f8961a545084201@mail.gmail.com>	<4AD080AF.6020202@densedata.com>
	<cb137f960910100950h41eae4ackfbefd7332904ce52@mail.gmail.com>
Message-ID: <4AD0D19F.5090902@densedata.com>

Stanislav Yudin wrote:
> Thanks, but how can I pass control back to calling code after starting 
> the reactor? Or the idea is to run it in separate thread? I understand 
> that main idea on twisted is async processing, but this time I need to 
> block the calling code until response is received.
>
You already have everything set up, make your SimpleClient._on_done 
callback aware of what has to happen next, and if you don't know 
beforehand, maybe because the next thing to do depends on the result of 
the current, you can pass a callable to the code in charge of that 
decision. The only difference is that you have to break the currently 
blocking code into several callables.

hth, Johann



From glyph at twistedmatrix.com  Sat Oct 10 13:47:00 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 10 Oct 2009 15:47:00 -0400
Subject: [Twisted-Python] reactor.run() do not return after
	reactor.stop()
In-Reply-To: <cb137f960910100950h41eae4ackfbefd7332904ce52@mail.gmail.com>
References: <cb137f960910100514u76e5aca3w9f8961a545084201@mail.gmail.com>
	<4AD080AF.6020202@densedata.com>
	<cb137f960910100950h41eae4ackfbefd7332904ce52@mail.gmail.com>
Message-ID: <d9047f780910101247k36e886d3td8426c943bcec863@mail.gmail.com>

On Sat, Oct 10, 2009 at 12:50 PM, Stanislav Yudin <decvar at gmail.com> wrote:

> Thanks, but how can I pass control back to calling code after starting the
> reactor? Or the idea is to run it in separate thread? I understand that main
> idea on twisted is async processing, but this time I need to block the
> calling code until response is received.


The way that you want to do this is to run all of your Twisted code in a
thread, and make calls into it from a different thread using one of the
utility APIs for that purpose.  See, for example, <
http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.threads.html#blockingCallFromThread>.
 Remember not to touch any Twisted APIs directly from the non-Twisted
thread.  Leave the Twisted I/O thread running for the entire lifetime of
your process; don't start and stop it repeatedly.

For what it's worth, you should really look into restructuring your
application so that this kind of hack is not necessary.  It will almost
certainly have hard-to-debug unforseen consequences.  There's nothing
fundamentally broken here, but it is much harder to keep track of and get
right than you think it will be, just based on the fact that many many
people who try this strategy end up giving up on it.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091010/f73ec020/attachment.html>

From exarkun at twistedmatrix.com  Sat Oct 10 14:04:56 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 10 Oct 2009 20:04:56 -0000
Subject: [Twisted-Python] reactor.run() do not return after
	reactor.stop()
In-Reply-To: <cb137f960910100950h41eae4ackfbefd7332904ce52@mail.gmail.com>
References: <cb137f960910100514u76e5aca3w9f8961a545084201@mail.gmail.com>
	<4AD080AF.6020202@densedata.com>
	<cb137f960910100950h41eae4ackfbefd7332904ce52@mail.gmail.com>
Message-ID: <20091010200456.13824.1223351827.divmod.xquotient.2@localhost.localdomain>

On 04:50 pm, decvar at gmail.com wrote:
>Thanks, but how can I pass control back to calling code after starting 
>the
>reactor? Or the idea is to run it in separate thread? I understand that 
>main
>idea on twisted is async processing, but this time I need to block the
>calling code until response is received.

No, you don't need to block the calling code until the response is 
received.  The main idea on Twisted is async processing.  :)

Jean-Paul



From listsin at integrateddevcorp.com  Sat Oct 10 14:09:10 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Sat, 10 Oct 2009 16:09:10 -0400
Subject: [Twisted-Python] HTTPClientFactory's deferred never finishing
	download on .vcf (vcard file) link
In-Reply-To: <95bb10690910100434y7808a2a4v1955b9f4e58efd83@mail.gmail.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
	<2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
	<95bb10690910100434y7808a2a4v1955b9f4e58efd83@mail.gmail.com>
Message-ID: <C86E331F-76A9-4EFC-8737-FDF8D344645B@integrateddevcorp.com>


On Oct 10, 2009, at 7:34 AM, Reza Lotun wrote:

>> I'm not quite sure what you mean. Are you talking about web.client or
> web.server?

Web client.  I was having trouble with a particular URL which happened  
to be a download URL and wanted to see what the request and response  
objects looked like and was trying to find where I could examine  
them.  In the code I posted before, we were creating an  
HTTPClientFactory, then snagging the deferred.  I've simplified that  
by just using client.getPage().  The advantage of the  
HTTPClientFactory approach is that you can get at the response_headers.

> There is a new twisted.web client implementation in the works which  
> will hopefully be ready for trunk in the near future, and which  
> should provide nearly the same functionality offered by urllib2 (or  
> more).

Where might that be hiding?  I'd love to have something that does  
deferreds like Twisted and also implements all of urllib2.  I find the  
info() from urlopen() particularly helpful when debugging issues like  
this.

>> I finally figured out that it was a stupid string formatting bug in  
>> the code
>> that was being echoed by Twisted but swallowed by the "Grand  
>> Catcher of all
>> Things Exception" in Twisted..
>>
>> Once I found and fixed that, everything works fine -- until the  
>> next time.
>
> Exceptions shouldn't be swallowed by twisted. If you simply attach
> errBacks then you'll get the exception and full traceback. It really
> isn't that bad at all - I thought it looked crazy when I first
> started, but all the information is there to debug, etc.

Yes, the problem was in my mis-reading of the info in my errback.   
Unfortunately, the way the logging is set up in this particular code,  
logging.debug() returns 10 zillion times too much repetitive  
information and it makes it hard to wade through to find the relevant  
info (like the errback's output I was missing).

Thanks again for your help with this and I'd love to know more about  
this new urllib2 type module for Twisted.

Thanks,

S





From exarkun at twistedmatrix.com  Sat Oct 10 15:15:42 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 10 Oct 2009 21:15:42 -0000
Subject: [Twisted-Python] HTTPClientFactory's deferred never
	finishing	download on .vcf (vcard file) link
In-Reply-To: <C86E331F-76A9-4EFC-8737-FDF8D344645B@integrateddevcorp.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
	<2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
	<95bb10690910100434y7808a2a4v1955b9f4e58efd83@mail.gmail.com>
	<C86E331F-76A9-4EFC-8737-FDF8D344645B@integrateddevcorp.com>
Message-ID: <20091010211542.13824.1597743213.divmod.xquotient.9@localhost.localdomain>

On 08:09 pm, listsin at integrateddevcorp.com wrote:
>
>On Oct 10, 2009, at 7:34 AM, Reza Lotun wrote:
>>>I'm not quite sure what you mean. Are you talking about web.client or
>>web.server?
>
>Web client.  I was having trouble with a particular URL which happened
>to be a download URL and wanted to see what the request and response
>objects looked like and was trying to find where I could examine
>them.  In the code I posted before, we were creating an
>HTTPClientFactory, then snagging the deferred.  I've simplified that
>by just using client.getPage().  The advantage of the
>HTTPClientFactory approach is that you can get at the response_headers.
>>There is a new twisted.web client implementation in the works which
>>will hopefully be ready for trunk in the near future, and which
>>should provide nearly the same functionality offered by urllib2 (or
>>more).
>
>Where might that be hiding?  I'd love to have something that does
>deferreds like Twisted and also implements all of urllib2.  I find the
>info() from urlopen() particularly helpful when debugging issues like
>this.

  http://twistedmatrix.com/trac/ticket/886
  http://twistedmatrix.com/trac/ticket/3987

As I understand the "info" method, it gives you access to the response 
headers.  The new API definitely exposes that information.

You'll notice that neither of these tickets is closed.  #3987 is 
presently up for review.  If you want to help out, you could take a look 
at the code and point out any problems you notice.

Jean-Paul



From listsin at integrateddevcorp.com  Sat Oct 10 18:48:28 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Sat, 10 Oct 2009 20:48:28 -0400
Subject: [Twisted-Python] HTTPClientFactory's deferred never
	finishing	download on .vcf (vcard file) link
In-Reply-To: <20091010211542.13824.1597743213.divmod.xquotient.9@localhost.localdomain>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
	<2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
	<95bb10690910100434y7808a2a4v1955b9f4e58efd83@mail.gmail.com>
	<C86E331F-76A9-4EFC-8737-FDF8D344645B@integrateddevcorp.com>
	<20091010211542.13824.1597743213.divmod.xquotient.9@localhost.localdomain>
Message-ID: <884C7678-EFDD-4F7C-B125-54BF4393E3F8@integrateddevcorp.com>


On Oct 10, 2009, at 5:15 PM, exarkun at twistedmatrix.com wrote:
>>
>> Where might that be hiding?  I'd love to have something that does
>> deferreds like Twisted and also implements all of urllib2.  I find  
>> the
>> info() from urlopen() particularly helpful when debugging issues like
>> this.
>
>  http://twistedmatrix.com/trac/ticket/886
>  http://twistedmatrix.com/trac/ticket/3987
>
> As I understand the "info" method, it gives you access to the response
> headers.  The new API definitely exposes that information.

Yes, pretty much everything known about the round-trip is attached as  
attributes of the return value for easy inspection with a couple of  
little convenience methods for getting at them.

I just had a major debugging nightmare where the client, a web  
services company, insisted that "I must be sending some weird headers"  
and it wasn't that easy to prove I wasn't without being able to just  
access that info.  I finally ended up using tcpdump.  I had forgotten  
how much "fun" setting up tcpdump filters is.

> You'll notice that neither of these tickets is closed.  #3987 is
> presently up for review.  If you want to help out, you could take a  
> look
> at the code and point out any problems you notice.

Hopefully I can just fire up a virtualenv, set this as my Twisted, and  
run a few of the things I'm working on through it.

For some of them, I've been doing tcpdump pushups to find out what's  
going on and it'd be great to have that right in the Python code  
instead.

Please excuse my ignorance of how Twisted branches are used (there  
sure do seem to be a lot of them!), but is this branch supposed to be  
trunk + branch mods or latest release + branch mods?

Thanks!

S




From glyph at twistedmatrix.com  Sat Oct 10 19:07:31 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 10 Oct 2009 21:07:31 -0400
Subject: [Twisted-Python] HTTPClientFactory's deferred never finishing
	download on .vcf (vcard file) link
In-Reply-To: <86D97BA9-3E96-4CB2-AE91-F7AD0CD19726@integrateddevcorp.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
	<2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
	<F1E69386-1C79-4F59-A7C8-F5BA1F81AE24@integrateddevcorp.com>
	<d9047f780910100018k1785cff3q5a742fcbcb8ec41b@mail.gmail.com>
	<86D97BA9-3E96-4CB2-AE91-F7AD0CD19726@integrateddevcorp.com>
Message-ID: <d9047f780910101807s35e72296v5ea0755dabcf0b4@mail.gmail.com>

On Sat, Oct 10, 2009 at 11:56 AM, Steve Steiner (listsin) <
listsin at integrateddevcorp.com> wrote:

>
> On Oct 10, 2009, at 3:18 AM, Glyph Lefkowitz wrote:
>
> What "weirdness" are you referring to?
>
> I was just referring to the fact that the original document was not on the
> Twisted site so I was referring to it not being something someone else did
> with Twisted.
>

Ah.


> Much of the other code I'm using follows PEP-8 naming_conventions for
> methods and such whereas Twisted follows the Twisted Coding Standard which
> is a more javaCamelCase style convention.
>

For what it's worth, the Twisted coding standard pre-dates PEP-8 (In fact, I
think it might even predate the whole PEP process).

Also, Java did not invent the convention of camel-case names.  My use of the
convention in the early Twisted coding standard was a deliberate aping of
Smalltalk's coding convention.  I realize a lot more people have seen Java
written this way than ST, but nevertheless ST was my inspiration for many of
Twisted's conventions, coding-standard and otherwise.

That particular documentation refers to 'backwards compatible' functions
> using PEP-8 style attribute names while preferring the newer Twisted Coding
> Standard flavoured names.
>

Yes, before code review was consistently applied throughout the codebase, we
did have a few inconsistent names slip through.  Since then we've tried to
update them where we've found them so everything is consistently in one
style.

Making the right things show up in the right order in our API documentation
is a constant challenge.  If you have any ideas for emphasizing the correct
(i.e. non-"backwards-compatibility") names, you might want to submit a patch
to pydoctor and/or Twisted's docstrings.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091010/c614521a/attachment.html>

From exarkun at twistedmatrix.com  Sat Oct 10 22:05:11 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 11 Oct 2009 04:05:11 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1255233911.49.492459702@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091011/6ee735c8/attachment-0001.html>

From listsin at integrateddevcorp.com  Sun Oct 11 09:07:56 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Sun, 11 Oct 2009 11:07:56 -0400
Subject: [Twisted-Python] HTTPClientFactory's deferred never finishing
	download on .vcf (vcard file) link
In-Reply-To: <d9047f780910101807s35e72296v5ea0755dabcf0b4@mail.gmail.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
	<2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
	<F1E69386-1C79-4F59-A7C8-F5BA1F81AE24@integrateddevcorp.com>
	<d9047f780910100018k1785cff3q5a742fcbcb8ec41b@mail.gmail.com>
	<86D97BA9-3E96-4CB2-AE91-F7AD0CD19726@integrateddevcorp.com>
	<d9047f780910101807s35e72296v5ea0755dabcf0b4@mail.gmail.com>
Message-ID: <BE1B8AE2-5EBD-4460-865E-935E67C60250@integrateddevcorp.com>


On Oct 10, 2009, at 9:07 PM, Glyph Lefkowitz wrote:

> Much of the other code I'm using follows PEP-8 naming_conventions  
> for methods and such whereas Twisted follows the Twisted Coding  
> Standard which is a more javaCamelCase style convention.
>
> For what it's worth, the Twisted coding standard pre-dates PEP-8 (In  
> fact, I think it might even predate the whole PEP process).

> Also, Java did not invent the convention of camel-case names.  My  
> use of the convention in the early Twisted coding standard was a  
> deliberate aping of Smalltalk's coding convention.  I realize a lot  
> more people have seen Java written this way than ST, but  
> nevertheless ST was my inspiration for many of Twisted's  
> conventions, coding-standard and otherwise.

I understand.  I refer to it as "Java" since that's more current.  I  
think of it more as ST as well; I was there "back then."  It's one of  
the things I really like about Twisted.  I just kind of "get" it  
'cause it makes sense from for a long time <sic>.

I don't particularly agree with, or like some things in PEP-8.

For example, I like to line things up "right" when organization can be  
indicated by spacing like (which will be mutilated by e-mail, but you  
know what I mean):

foo = (
		("this value is long",	"default"),
		("short",			"other"),
	)

If it's a table, it should be laid out like a table, not all crooked  
and stuff.  CamelCase is another issue.  Why it should be OK in  
ClassNames but not OK in variable_names, since you have to hit the  
shift key to get the flippin' underscore anyway, has 'logic' that  
escapes me. "Inserting an extra, meaningless extra character, which  
requires using the Shift key, instead of the next letter, also with  
the shift key saves *thing*."

> That particular documentation refers to 'backwards compatible'  
> functions using PEP-8 style attribute names while preferring the  
> newer Twisted Coding Standard flavoured names.
>
> Yes, before code review was consistently applied throughout the  
> codebase, we did have a few inconsistent names slip through.  Since  
> then we've tried to update them where we've found them so everything  
> is consistently in one style.

Also understood.  That's the thing about writing stuff other people  
use; you've got to keep it working even when you're slapping your  
forehead about something you decided then that's now so _obviously_  
better done another way.

> Making the right things show up in the right order in our API  
> documentation is a constant challenge.  If you have any ideas for  
> emphasizing the correct (i.e. non-"backwards-compatibility") names,  
> you might want to submit a patch to pydoctor and/or Twisted's  
> docstrings.

I actually took a quick look at pydoctor for the first time tonight.   
I'm wrestling with getting a doc set together from some code that's  
EpyDoc, some that's Sphinx, and some that's not there at all.

What I'd like is to use Sphinx, using all of EpyDoc's nice extensions  
to reStructuredText (e.g. the nice :Parameters: block stuff) so I'm  
looking to see if anyone's already done that work for Sphinx.

Meanwhile, vis-à-vis the Twisted docs, has there been any recent  
discussion about moving the Twisted docs to Sphinx?  I found some doc  
discussions way back to 2002, nothing later than 2007/8-ish, but, as  
far as I know, there's not particular effort underway.

If Twisted could get documented with Sphinx, while adding anything  
Twisted needs that Sphinx doesn't have already, it would sure be  
nice...and would remove one more Twisted specific tool to maintain in  
the Twisted toolchain, while enhancing Sphinx at the same time.

I'm having to do the pydoctor vs. Sphinx vs. EpyDoc research  
anyway...I'll post it somewhere public and send a link/message to the  
list.

S






-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091011/887948a9/attachment.html>

From exarkun at twistedmatrix.com  Sun Oct 11 10:14:11 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 11 Oct 2009 16:14:11 -0000
Subject: [Twisted-Python] HTTPClientFactory's deferred never
	finishing	download on .vcf (vcard file) link
In-Reply-To: <BE1B8AE2-5EBD-4460-865E-935E67C60250@integrateddevcorp.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
	<2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
	<F1E69386-1C79-4F59-A7C8-F5BA1F81AE24@integrateddevcorp.com>
	<d9047f780910100018k1785cff3q5a742fcbcb8ec41b@mail.gmail.com>
	<86D97BA9-3E96-4CB2-AE91-F7AD0CD19726@integrateddevcorp.com>
	<d9047f780910101807s35e72296v5ea0755dabcf0b4@mail.gmail.com>
	<BE1B8AE2-5EBD-4460-865E-935E67C60250@integrateddevcorp.com>
Message-ID: <20091011161411.8308.1442935772.divmod.xquotient.2@localhost.localdomain>

On 03:07 pm, listsin at integrateddevcorp.com wrote:
>
>[snip]
>
>I actually took a quick look at pydoctor for the first time tonight. 
>I'm wrestling with getting a doc set together from some code that's 
>EpyDoc, some that's Sphinx, and some that's not there at all.
>
>What I'd like is to use Sphinx, using all of EpyDoc's nice extensions 
>to reStructuredText (e.g. the nice :Parameters: block stuff) so I'm 
>looking to see if anyone's already done that work for Sphinx.
>
>Meanwhile, vis-�-vis the Twisted docs, has there been any recent 
>discussion about moving the Twisted docs to Sphinx?  I found some doc 
>discussions way back to 2002, nothing later than 2007/8-ish, but, as 
>far as I know, there's not particular effort underway.
>
>If Twisted could get documented with Sphinx, while adding anything 
>Twisted needs that Sphinx doesn't have already, it would sure be 
>nice...and would remove one more Twisted specific tool to maintain in 
>the Twisted toolchain, while enhancing Sphinx at the same time.
>
>I'm having to do the pydoctor vs. Sphinx vs. EpyDoc research 
>anyway...I'll post it somewhere public and send a link/message to the 
>list.

This was raised in July (in a thread you posted to ;).

http://twistedmatrix.com/pipermail/twisted-python/2009-July/020102.html

Jean-Paul



From listsin at integrateddevcorp.com  Sun Oct 11 11:29:48 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Sun, 11 Oct 2009 13:29:48 -0400
Subject: [Twisted-Python] HTTPClientFactory's deferred never
	finishing	download on .vcf (vcard file) link
In-Reply-To: <20091011161411.8308.1442935772.divmod.xquotient.2@localhost.localdomain>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
	<2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
	<F1E69386-1C79-4F59-A7C8-F5BA1F81AE24@integrateddevcorp.com>
	<d9047f780910100018k1785cff3q5a742fcbcb8ec41b@mail.gmail.com>
	<86D97BA9-3E96-4CB2-AE91-F7AD0CD19726@integrateddevcorp.com>
	<d9047f780910101807s35e72296v5ea0755dabcf0b4@mail.gmail.com>
	<BE1B8AE2-5EBD-4460-865E-935E67C60250@integrateddevcorp.com>
	<20091011161411.8308.1442935772.divmod.xquotient.2@localhost.localdomain>
Message-ID: <4D35B819-EDB2-424B-A30C-106E889B4D68@integrateddevcorp.com>

>>
>> I'm having to do the pydoctor vs. Sphinx vs. EpyDoc research  
>> anyway...I'll post it somewhere public and send a link/message to  
>> the list.
>
> This was raised in July (in a thread you posted to ;).
>
> http://twistedmatrix.com/pipermail/twisted-python/2009-July/ 
> 020102.html

I knew I'd thought about it before!  I've been slammed with other work  
since then and haven't had to face the "doc monster" again until now.   
I'm pulling docs together on several new modules/packages that have  
been factored out of a large code base and we have a complete mish- 
mosh.  Not as big as Twisted, but much less organized.

Twisted, and probably almost every project of similar size and, more  
particularly, age, has some level of doc fung.  Back in the 'old days'  
the tools were sparse (or bad) enough that the Twisted project made  
some of its own; of course.  So did lots of other people. Also, as  
time went on, more options (like wikis) came about and parts of the  
docs found their way into the mix.

 From reading back over that previous discussion, I realize that my  
main thought was to build a database of what is on hand, from all the  
various sources, then pulling them together into some sort of system  
where they could all be organized, filtered, and finally sent to  
*something* to come out done on the other side.

As far as I know, there is no good answer available off the shelf.

Maybe someone else knows of something?

It could be that it's just something that has to be 'done.'  And, done  
in a comprehensive (and/or extensible) enough way that it will serve  
the needs of other projects, too.

I'm not sure (as I wasn't in July) what the next step is, but it might  
be as simple as writing a simple DocCollector app that pulls  
everything into one database, cross references and indexes it, and  
gets it into some sort of visual presentation that we can start to  
make sense of the whole thing with.

Maybe the first step would be to pull together a list of "everywhere  
we know Twisted docs are known to live" and start pulling it in to see  
where that leads...

Where would be the best place to put the "collector" page where  
everyone would know to look for it and would be able to contribute to  
it (some wiki, but which one?).

Thanks,

S





From fernandor at sescam.jccm.es  Tue Oct 13 04:58:25 2009
From: fernandor at sescam.jccm.es (Fernando Ruza Rodriguez)
Date: Tue, 13 Oct 2009 12:58:25 +0200
Subject: [Twisted-Python] CalendarServer
Message-ID: <1255431505.1206.10.camel@hpcinf18.hguv.local>

Hi, sorry for the cross-posting.

I'm trying to compile CalendarServer and it has a script which get
Twisted from subversion here:

svn.twistedmatrix.com/svn/Twisted/branches/dav-take-two-3081-4

Also if I try to get latest SVN of Twisted as says in the page
http://svn.twistedmatrix.com/ I get the following error:

~$ svn co svn://svn.twistedmatrix.com/svn/Twisted/trunk Twisted
svn: Cannot be possible to connect to 'svn.twistedmatrix.com': time
connection expired

Is it subversion up there ?? is there to access in another way ?? Am I
doing something wrong ??

Thanks.

Fernando.





From dirkmoors at gmail.com  Tue Oct 13 07:18:09 2009
From: dirkmoors at gmail.com (Dirk Moors)
Date: Tue, 13 Oct 2009 15:18:09 +0200
Subject: [Twisted-Python] Twisted Python vs. "Blocking" Python: Weird
	performance on small operations.
Message-ID: <cf75a1410910130618qe2b1109sc7c04fa54cce290b@mail.gmail.com>

Hello Everyone!
My name is Dirk Moors, and since 4 years now, I've been involved in
developing a cloud computing platform, using Python as the programming
language. A year ago I discovered Twisted Python, and it got me very
interested, upto the point where I made the decision to convert our platform
(in progress) to a Twisted platform. One year later I'm still very
enthousiastic about the overal performance and stability, but last week I
encountered something I did't expect;

It appeared that it was less efficient to run small "atomic" operations in
different deferred-callbacks, when compared to running these "atomic"
operations together in "blocking" mode. Am I doing something wrong here?

To prove the problem to myself, I created the following example (Full
source- and test code is attached):
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
import struct

def int2binAsync(anInteger):
    def packStruct(i):
        #Packs an integer, result is 4 bytes
        return struct.pack("i", i)

    d = defer.Deferred()
    d.addCallback(packStruct)

    reactor.callLater(0,
                      d.callback,
                      anInteger)

    return d

def bin2intAsync(aBin):
    def unpackStruct(p):
        #Unpacks a bytestring into an integer
        return struct.unpack("i", p)[0]

    d = defer.Deferred()
    d.addCallback(unpackStruct)

    reactor.callLater(0,
                      d.callback,
                      aBin)
    return d

def int2binSync(anInteger):
    #Packs an integer, result is 4 bytes
    return struct.pack("i", anInteger)

def bin2intSync(aBin):
    #Unpacks a bytestring into an integer
    return struct.unpack("i", aBin)[0]

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

While running the testcode I got the following results:

(1 run = converting an integer to a byte string, converting that byte string
back to an integer, and finally checking whether that last integer is the
same as the input integer.)

*** Starting Synchronous Benchmarks. *(No Twisted => "blocking" code)*
  -> Synchronous Benchmark (1 runs) Completed in 0.0 seconds.
  -> Synchronous Benchmark (10 runs) Completed in 0.0 seconds.
  -> Synchronous Benchmark (100 runs) Completed in 0.0 seconds.
  -> Synchronous Benchmark (1000 runs) Completed in 0.00399994850159
seconds.
  -> Synchronous Benchmark (10000 runs) Completed in 0.0369999408722
seconds.
  -> Synchronous Benchmark (100000 runs) Completed in 0.362999916077
seconds.
*** Synchronous Benchmarks Completed in* 0.406000137329* seconds.

*** Starting Asynchronous Benchmarks . *(Twisted => "non-blocking" code)*
  -> Asynchronous Benchmark (1 runs) Completed in 34.5090000629 seconds.
  -> Asynchronous Benchmark (10 runs) Completed in 34.5099999905 seconds.
  -> Asynchronous Benchmark (100 runs) Completed in 34.5130000114 seconds.
  -> Asynchronous Benchmark (1000 runs) Completed in 34.5859999657 seconds.
  -> Asynchronous Benchmark (10000 runs) Completed in 35.2829999924 seconds.
  -> Asynchronous Benchmark (100000 runs) Completed in 41.492000103 seconds.
*** Asynchronous Benchmarks Completed in *42.1460001469* seconds.

Am I really seeing factor 100x??

I really hope that I made a huge reasoning error here but I just can't find
it. If my results are correct then I really need to go and check my entire
cloud platform for the places where I decided to split functions into atomic
operations while thinking that it would actually improve the performance
while on the contrary it did the opposit.

I personaly suspect that I lose my cpu-cycles to the reactor scheduling the
deferred-callbacks. Would that assumption make any sense?
The part where I need these conversion functions is in marshalling/protocol
reading and writing throughout the cloud platform, which implies that these
functions will be called constantly so I need them to be superfast. I always
though I had to split the entire marshalling process into small atomic
(deferred-callback) functions to be efficient, but these figures tell me
otherwise.

I really hope someone can help me out here.

Thanks in advance,
Best regards,
Dirk Moors
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091013/c6a95abd/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: twistedbenchmark.py
Type: application/octet-stream
Size: 7680 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20091013/c6a95abd/attachment-0002.obj>

From vpogrebi at verizon.net  Tue Oct 13 07:41:19 2009
From: vpogrebi at verizon.net (Valeriy Pogrebitskiy)
Date: Tue, 13 Oct 2009 09:41:19 -0400
Subject: [Twisted-Python] Twisted Python vs. "Blocking" Python: Weird
 performance on small operations.
In-Reply-To: <cf75a1410910130618qe2b1109sc7c04fa54cce290b@mail.gmail.com>
References: <cf75a1410910130618qe2b1109sc7c04fa54cce290b@mail.gmail.com>
Message-ID: <EDB2B354-B25D-4A98-AC9D-B9745CA6C3AB@verizon.net>

Dirk,

Using deferred directly in your bin2intAsync() may be somewhat less  
efficient than some other way described in Recipe 439358: [Twisted]  
 From blocking functions to deferred functions

recipe (http://code.activestate.com/recipes/439358/)

You would get same effect (asynchronous execution) - but potentially  
more efficiently - by just decorating your synchronous methods as:

from twisted.internet.threads import deferToThread
deferred = deferToThread.__get__
....
@deferred
def int2binAsync(anInteger):
     #Packs an integer, result is 4 bytes
     return struct.pack("i", anInteger)

@deferred
def bin2intAsync(aBin):
     #Unpacks a bytestring into an integer
     return struct.unpack("i", aBin)[0]




Kind regards,

Valeriy Pogrebitskiy
vpogrebi at verizon.net




On Oct 13, 2009, at 9:18 AM, Dirk Moors wrote:

> Hello Everyone!
>
> My name is Dirk Moors, and since 4 years now, I've been involved in  
> developing a cloud computing platform, using Python as the  
> programming language. A year ago I discovered Twisted Python, and it  
> got me very interested, upto the point where I made the decision to  
> convert our platform (in progress) to a Twisted platform. One year  
> later I'm still very enthousiastic about the overal performance and  
> stability, but last week I encountered something I did't expect;
>
> It appeared that it was less efficient to run small "atomic"  
> operations in different deferred-callbacks, when compared to running  
> these "atomic" operations together in "blocking" mode. Am I doing  
> something wrong here?
>
> To prove the problem to myself, I created the following example  
> (Full source- and test code is attached):
> ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
> import struct
>
> def int2binAsync(anInteger):
>     def packStruct(i):
>         #Packs an integer, result is 4 bytes
>         return struct.pack("i", i)
>
>     d = defer.Deferred()
>     d.addCallback(packStruct)
>
>     reactor.callLater(0,
>                       d.callback,
>                       anInteger)
>
>     return d
>
> def bin2intAsync(aBin):
>     def unpackStruct(p):
>         #Unpacks a bytestring into an integer
>         return struct.unpack("i", p)[0]
>
>     d = defer.Deferred()
>     d.addCallback(unpackStruct)
>
>     reactor.callLater(0,
>                       d.callback,
>                       aBin)
>     return d
>
> def int2binSync(anInteger):
>     #Packs an integer, result is 4 bytes
>     return struct.pack("i", anInteger)
>
> def bin2intSync(aBin):
>     #Unpacks a bytestring into an integer
>     return struct.unpack("i", aBin)[0]
>
> ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
>
> While running the testcode I got the following results:
>
> (1 run = converting an integer to a byte string, converting that  
> byte string back to an integer, and finally checking whether that  
> last integer is the same as the input integer.)
>
> *** Starting Synchronous Benchmarks. (No Twisted => "blocking" code)
>   -> Synchronous Benchmark (1 runs) Completed in 0.0 seconds.
>   -> Synchronous Benchmark (10 runs) Completed in 0.0 seconds.
>   -> Synchronous Benchmark (100 runs) Completed in 0.0 seconds.
>   -> Synchronous Benchmark (1000 runs) Completed in 0.00399994850159  
> seconds.
>   -> Synchronous Benchmark (10000 runs) Completed in 0.0369999408722  
> seconds.
>   -> Synchronous Benchmark (100000 runs) Completed in 0.362999916077  
> seconds.
> *** Synchronous Benchmarks Completed in 0.406000137329 seconds.
>
> *** Starting Asynchronous Benchmarks . (Twisted => "non-blocking"  
> code)
>   -> Asynchronous Benchmark (1 runs) Completed in 34.5090000629  
> seconds.
>   -> Asynchronous Benchmark (10 runs) Completed in 34.5099999905  
> seconds.
>   -> Asynchronous Benchmark (100 runs) Completed in 34.5130000114  
> seconds.
>   -> Asynchronous Benchmark (1000 runs) Completed in 34.5859999657  
> seconds.
>   -> Asynchronous Benchmark (10000 runs) Completed in 35.2829999924  
> seconds.
>   -> Asynchronous Benchmark (100000 runs) Completed in 41.492000103  
> seconds.
> *** Asynchronous Benchmarks Completed in 42.1460001469 seconds.
>
> Am I really seeing factor 100x??
>
> I really hope that I made a huge reasoning error here but I just  
> can't find it. If my results are correct then I really need to go  
> and check my entire cloud platform for the places where I decided to  
> split functions into atomic operations while thinking that it would  
> actually improve the performance while on the contrary it did the  
> opposit.
>
> I personaly suspect that I lose my cpu-cycles to the reactor  
> scheduling the deferred-callbacks. Would that assumption make any  
> sense?
> The part where I need these conversion functions is in marshalling/ 
> protocol reading and writing throughout the cloud platform, which  
> implies that these functions will be called constantly so I need  
> them to be superfast. I always though I had to split the entire  
> marshalling process into small atomic (deferred-callback) functions  
> to be efficient, but these figures tell me otherwise.
>
> I really hope someone can help me out here.
>
> Thanks in advance,
> Best regards,
> Dirk Moors
>
>
>
>
>
>
>
>
>
>
>
>
>
> <twistedbenchmark.py>_______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091013/e9ae2546/attachment.html>

From rlotun at gmail.com  Tue Oct 13 08:04:06 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Tue, 13 Oct 2009 15:04:06 +0100
Subject: [Twisted-Python] Twisted Python vs. "Blocking" Python: Weird
	performance on small operations.
In-Reply-To: <cf75a1410910130618qe2b1109sc7c04fa54cce290b@mail.gmail.com>
References: <cf75a1410910130618qe2b1109sc7c04fa54cce290b@mail.gmail.com>
Message-ID: <95bb10690910130704o7c0ff2besf00dcf5918990dcf@mail.gmail.com>

Hi Dirk,

I took a look at your code sample and got the async benchmark to run
with the following values:
*** Starting Asynchronous Benchmarks.

  -> Asynchronous Benchmark (1 runs) Completed in 0.000181913375854 seconds.
  -> Asynchronous Benchmark (10 runs) Completed in 0.000736951828003 seconds.
  -> Asynchronous Benchmark (100 runs) Completed in 0.00641012191772 seconds.
  -> Asynchronous Benchmark (1000 runs) Completed in 0.0741751194 seconds.
  -> Asynchronous Benchmark (10000 runs) Completed in 0.675071001053 seconds.
  -> Asynchronous Benchmark (100000 runs) Completed in 7.29738497734 seconds.

*** Asynchronous Benchmarks Completed in 8.16032314301 seconds.

Which, though still quite a bit slower than the synchronous version,
is still much better than the 40 sec. mark that you were experiencing.
My modified version simply returned defer.succeed from your aync
block-compute functions.

i.e. Instead of your initial example:
def int2binAsync(anInteger):
    def packStruct(i):
        #Packs an integer, result is 4 bytes
        return struct.pack("i", i)

    d = defer.Deferred()
    d.addCallback(packStruct)

    reactor.callLater(0,
                      d.callback,
                      anInteger)

    return d

my version does:

def int2binAsync(anInteger):
    return defer.succeed(struct.pack('i', anInteger))

A few things to note in general however:
1) Twisted shines for block I/O operations - i.e. networking. A
compute intesive process will not necessarily yield any gains in
performance by using Twisted since the Python GIL exists (a global
lock).

2) If you are doing computations that use a C module (unforunately
struct pre 2.6 I believe doesn't use a C module), there may be a
chance that the C module releases the GIL, allowing you to do those
computations in a thread. In this case you'd be better off using
deferToThread as suggested earlier.

3) There is some (usually minimal but it exists) overhead to using
Twisted. Instead of computing a bunch of stuff serially and returning
your answer as in your sync example, you're wrapping everything up in
deferreds and starting a reactor - it's definitely going to be a bit
slower than the pure synchronous version for this case.

Hope that makes sense.

Cheers,
Reza


-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   reza at tweetdeck.com
twitter: @rlotun



From dirkmoors at gmail.com  Tue Oct 13 08:18:35 2009
From: dirkmoors at gmail.com (Dirk Moors)
Date: Tue, 13 Oct 2009 16:18:35 +0200
Subject: [Twisted-Python] Twisted-Python Digest, Vol 67, Issue 22
In-Reply-To: <mailman.85384.1255441779.23374.twisted-python@twistedmatrix.com>
References: <mailman.85384.1255441779.23374.twisted-python@twistedmatrix.com>
Message-ID: <cf75a1410910130718m53645515oc65f0890366a12f2@mail.gmail.com>

Hello Valeriy,

I tried the thing you suggested, and I attached the (updated) code.
Unfortunatly, the new code was even slower, producing the following results:

*** Starting Asynchronous Benchmarks. (Using Twisted, with
"deferred-decorator")
  -> Asynchronous Benchmark (1 runs) Completed in 56.0279998779 seconds.
  -> Asynchronous Benchmark (10 runs) Completed in 56.0130000114 seconds.
  -> Asynchronous Benchmark (100 runs) Completed in 56.010999918 seconds.
  -> Asynchronous Benchmark (1000 runs) Completed in 56.0410001278 seconds.
  -> Asynchronous Benchmark (10000 runs) Completed in 56.3069999218 seconds.
  -> Asynchronous Benchmark (100000 runs) Completed in 58.8910000324
seconds.
*** Asynchronous Benchmarks Completed in 59.4659998417 seconds.

I suspect that this would me more inefficient because with the deferToThread
function in place, every single operation will be executed in its own
thread, which means:
(1 x 2) + (10 x 2) + (100 x 2) + (1000 x 2) + (10000 x 2) + (100000 x 2)
threads....which is...a lot.

Maybe the problem lies in the way I test the code? I understand that using
the asynchronous testcode this way (generating the deferreds using a
FOR-loop), a lot of deferreds are generated before the reactor starts
calling the deferred-callbacks.....would there be another, better way to
test the code?
The reason I need to now which one is faster (async vs sync functions) is
because I need to decide on whetehr or not I should re-evaluate the code I
just recently finished building.

Any other ideas maybe?

Thanks in advance,
Dirk


________________________________________________________________________________________________________________________________________________________
> Message: 3
> Date: Tue, 13 Oct 2009 09:41:19 -0400
> From: Valeriy Pogrebitskiy <vpogrebi at verizon.net>
> Subject: Re: [Twisted-Python] Twisted Python vs. "Blocking" Python:
>        Weird performance on small operations.
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Message-ID: <EDB2B354-B25D-4A98-AC9D-B9745CA6C3AB at verizon.net>
> Content-Type: text/plain; charset="us-ascii"
>
> Dirk,
>
> Using deferred directly in your bin2intAsync() may be somewhat less
> efficient than some other way described in Recipe 439358: [Twisted]
>  From blocking functions to deferred functions
>
> recipe (http://code.activestate.com/recipes/439358/)
>
> You would get same effect (asynchronous execution) - but potentially
> more efficiently - by just decorating your synchronous methods as:
>
> from twisted.internet.threads import deferToThread
> deferred = deferToThread.__get__
> ....
> @deferred
> def int2binAsync(anInteger):
>     #Packs an integer, result is 4 bytes
>     return struct.pack("i", anInteger)
>
> @deferred
> def bin2intAsync(aBin):
>     #Unpacks a bytestring into an integer
>     return struct.unpack("i", aBin)[0]
>
>
>
>
> Kind regards,
>
> Valeriy Pogrebitskiy
> vpogrebi at verizon.net
>
>
>
>
> On Oct 13, 2009, at 9:18 AM, Dirk Moors wrote:
>
> > Hello Everyone!
> >
> > My name is Dirk Moors, and since 4 years now, I've been involved in
> > developing a cloud computing platform, using Python as the
> > programming language. A year ago I discovered Twisted Python, and it
> > got me very interested, upto the point where I made the decision to
> > convert our platform (in progress) to a Twisted platform. One year
> > later I'm still very enthousiastic about the overal performance and
> > stability, but last week I encountered something I did't expect;
> >
> > It appeared that it was less efficient to run small "atomic"
> > operations in different deferred-callbacks, when compared to running
> > these "atomic" operations together in "blocking" mode. Am I doing
> > something wrong here?
> >
> > To prove the problem to myself, I created the following example
> > (Full source- and test code is attached):
> >
> ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
> > import struct
> >
> > def int2binAsync(anInteger):
> >     def packStruct(i):
> >         #Packs an integer, result is 4 bytes
> >         return struct.pack("i", i)
> >
> >     d = defer.Deferred()
> >     d.addCallback(packStruct)
> >
> >     reactor.callLater(0,
> >                       d.callback,
> >                       anInteger)
> >
> >     return d
> >
> > def bin2intAsync(aBin):
> >     def unpackStruct(p):
> >         #Unpacks a bytestring into an integer
> >         return struct.unpack("i", p)[0]
> >
> >     d = defer.Deferred()
> >     d.addCallback(unpackStruct)
> >
> >     reactor.callLater(0,
> >                       d.callback,
> >                       aBin)
> >     return d
> >
> > def int2binSync(anInteger):
> >     #Packs an integer, result is 4 bytes
> >     return struct.pack("i", anInteger)
> >
> > def bin2intSync(aBin):
> >     #Unpacks a bytestring into an integer
> >     return struct.unpack("i", aBin)[0]
> >
> >
> ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
> >
> > While running the testcode I got the following results:
> >
> > (1 run = converting an integer to a byte string, converting that
> > byte string back to an integer, and finally checking whether that
> > last integer is the same as the input integer.)
> >
> > *** Starting Synchronous Benchmarks. (No Twisted => "blocking" code)
> >   -> Synchronous Benchmark (1 runs) Completed in 0.0 seconds.
> >   -> Synchronous Benchmark (10 runs) Completed in 0.0 seconds.
> >   -> Synchronous Benchmark (100 runs) Completed in 0.0 seconds.
> >   -> Synchronous Benchmark (1000 runs) Completed in 0.00399994850159
> > seconds.
> >   -> Synchronous Benchmark (10000 runs) Completed in 0.0369999408722
> > seconds.
> >   -> Synchronous Benchmark (100000 runs) Completed in 0.362999916077
> > seconds.
> > *** Synchronous Benchmarks Completed in 0.406000137329 seconds.
> >
> > *** Starting Asynchronous Benchmarks . (Twisted => "non-blocking"
> > code)
> >   -> Asynchronous Benchmark (1 runs) Completed in 34.5090000629
> > seconds.
> >   -> Asynchronous Benchmark (10 runs) Completed in 34.5099999905
> > seconds.
> >   -> Asynchronous Benchmark (100 runs) Completed in 34.5130000114
> > seconds.
> >   -> Asynchronous Benchmark (1000 runs) Completed in 34.5859999657
> > seconds.
> >   -> Asynchronous Benchmark (10000 runs) Completed in 35.2829999924
> > seconds.
> >   -> Asynchronous Benchmark (100000 runs) Completed in 41.492000103
> > seconds.
> > *** Asynchronous Benchmarks Completed in 42.1460001469 seconds.
> >
> > Am I really seeing factor 100x??
> >
> > I really hope that I made a huge reasoning error here but I just
> > can't find it. If my results are correct then I really need to go
> > and check my entire cloud platform for the places where I decided to
> > split functions into atomic operations while thinking that it would
> > actually improve the performance while on the contrary it did the
> > opposit.
> >
> > I personaly suspect that I lose my cpu-cycles to the reactor
> > scheduling the deferred-callbacks. Would that assumption make any
> > sense?
> > The part where I need these conversion functions is in marshalling/
> > protocol reading and writing throughout the cloud platform, which
> > implies that these functions will be called constantly so I need
> > them to be superfast. I always though I had to split the entire
> > marshalling process into small atomic (deferred-callback) functions
> > to be efficient, but these figures tell me otherwise.
> >
> > I really hope someone can help me out here.
> >
> > Thanks in advance,
> > Best regards,
> > Dirk Moors
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> > <twistedbenchmark.py>_______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> -------------- next part --------------
> An HTML attachment was scrubbed...
> URL:
> http://twistedmatrix.com/pipermail/twisted-python/attachments/20091013/e9ae2546/attachment.htm
>
> ------------------------------
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> End of Twisted-Python Digest, Vol 67, Issue 22
> **********************************************
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091013/357ffe0c/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: twistedbenchmark.py
Type: application/octet-stream
Size: 7270 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20091013/357ffe0c/attachment-0002.obj>

From dirkmoors at gmail.com  Tue Oct 13 08:32:53 2009
From: dirkmoors at gmail.com (Dirk Moors)
Date: Tue, 13 Oct 2009 16:32:53 +0200
Subject: [Twisted-Python] Twisted-Python Digest, Vol 67, Issue 23
In-Reply-To: <mailman.85392.1255443518.23374.twisted-python@twistedmatrix.com>
References: <mailman.85392.1255443518.23374.twisted-python@twistedmatrix.com>
Message-ID: <cf75a1410910130732j7e3964f6m2fad9a4b71af7bee@mail.gmail.com>

Hello Reza,
I tried the solution you provided and I have to say, that changed a lot!
You gave me a better understanding of how things work with Twisted, and I
really appreciate your response!

Thanks for your help!
Best regards,
Dirk Moors

2009/10/13 <twisted-python-request at twistedmatrix.com>

> Send Twisted-Python mailing list submissions to
>        twisted-python at twistedmatrix.com
>
> To subscribe or unsubscribe via the World Wide Web, visit
>        http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> or, via email, send a message with subject or body 'help' to
>        twisted-python-request at twistedmatrix.com
>
> You can reach the person managing the list at
>        twisted-python-owner at twistedmatrix.com
>
> When replying, please edit your Subject line so it is more specific
> than "Re: Contents of Twisted-Python digest..."
>
>
> Today's Topics:
>
>   1. Re: Twisted Python vs. "Blocking" Python: Weird   performance
>      on small operations. (Reza Lotun)
>   2. Re: Twisted-Python Digest, Vol 67, Issue 22 (Dirk Moors)
>
>
> ----------------------------------------------------------------------
>
> Message: 1
> Date: Tue, 13 Oct 2009 15:04:06 +0100
> From: Reza Lotun <rlotun at gmail.com>
> Subject: Re: [Twisted-Python] Twisted Python vs. "Blocking" Python:
>        Weird   performance on small operations.
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Message-ID:
>        <95bb10690910130704o7c0ff2besf00dcf5918990dcf at mail.gmail.com>
> Content-Type: text/plain; charset=UTF-8
>
> Hi Dirk,
>
> I took a look at your code sample and got the async benchmark to run
> with the following values:
> *** Starting Asynchronous Benchmarks.
>
>  -> Asynchronous Benchmark (1 runs) Completed in 0.000181913375854 seconds.
>  -> Asynchronous Benchmark (10 runs) Completed in 0.000736951828003
> seconds.
>  -> Asynchronous Benchmark (100 runs) Completed in 0.00641012191772
> seconds.
>  -> Asynchronous Benchmark (1000 runs) Completed in 0.0741751194 seconds.
>  -> Asynchronous Benchmark (10000 runs) Completed in 0.675071001053
> seconds.
>  -> Asynchronous Benchmark (100000 runs) Completed in 7.29738497734
> seconds.
>
> *** Asynchronous Benchmarks Completed in 8.16032314301 seconds.
>
> Which, though still quite a bit slower than the synchronous version,
> is still much better than the 40 sec. mark that you were experiencing.
> My modified version simply returned defer.succeed from your aync
> block-compute functions.
>
> i.e. Instead of your initial example:
> def int2binAsync(anInteger):
>    def packStruct(i):
>        #Packs an integer, result is 4 bytes
>        return struct.pack("i", i)
>
>    d = defer.Deferred()
>    d.addCallback(packStruct)
>
>    reactor.callLater(0,
>                      d.callback,
>                      anInteger)
>
>    return d
>
> my version does:
>
> def int2binAsync(anInteger):
>    return defer.succeed(struct.pack('i', anInteger))
>
> A few things to note in general however:
> 1) Twisted shines for block I/O operations - i.e. networking. A
> compute intesive process will not necessarily yield any gains in
> performance by using Twisted since the Python GIL exists (a global
> lock).
>
> 2) If you are doing computations that use a C module (unforunately
> struct pre 2.6 I believe doesn't use a C module), there may be a
> chance that the C module releases the GIL, allowing you to do those
> computations in a thread. In this case you'd be better off using
> deferToThread as suggested earlier.
>
> 3) There is some (usually minimal but it exists) overhead to using
> Twisted. Instead of computing a bunch of stuff serially and returning
> your answer as in your sync example, you're wrapping everything up in
> deferreds and starting a reactor - it's definitely going to be a bit
> slower than the pure synchronous version for this case.
>
> Hope that makes sense.
>
> Cheers,
> Reza
>
>
> --
> Reza Lotun
> mobile: +44 (0)7521 310 763
> email:  rlotun at gmail.com
> work:   reza at tweetdeck.com
> twitter: @rlotun
>
>
>
> ------------------------------
>
> Message: 2
> Date: Tue, 13 Oct 2009 16:18:35 +0200
> From: Dirk Moors <dirkmoors at gmail.com>
> Subject: Re: [Twisted-Python] Twisted-Python Digest, Vol 67, Issue 22
> To: twisted-python at twistedmatrix.com
> Message-ID:
>        <cf75a1410910130718m53645515oc65f0890366a12f2 at mail.gmail.com>
> Content-Type: text/plain; charset="iso-8859-1"
>
> Hello Valeriy,
>
> I tried the thing you suggested, and I attached the (updated) code.
> Unfortunatly, the new code was even slower, producing the following
> results:
>
> *** Starting Asynchronous Benchmarks. (Using Twisted, with
> "deferred-decorator")
>  -> Asynchronous Benchmark (1 runs) Completed in 56.0279998779 seconds.
>  -> Asynchronous Benchmark (10 runs) Completed in 56.0130000114 seconds.
>  -> Asynchronous Benchmark (100 runs) Completed in 56.010999918 seconds.
>  -> Asynchronous Benchmark (1000 runs) Completed in 56.0410001278 seconds.
>  -> Asynchronous Benchmark (10000 runs) Completed in 56.3069999218 seconds.
>  -> Asynchronous Benchmark (100000 runs) Completed in 58.8910000324
> seconds.
> *** Asynchronous Benchmarks Completed in 59.4659998417 seconds.
>
> I suspect that this would me more inefficient because with the
> deferToThread
> function in place, every single operation will be executed in its own
> thread, which means:
> (1 x 2) + (10 x 2) + (100 x 2) + (1000 x 2) + (10000 x 2) + (100000 x 2)
> threads....which is...a lot.
>
> Maybe the problem lies in the way I test the code? I understand that using
> the asynchronous testcode this way (generating the deferreds using a
> FOR-loop), a lot of deferreds are generated before the reactor starts
> calling the deferred-callbacks.....would there be another, better way to
> test the code?
> The reason I need to now which one is faster (async vs sync functions) is
> because I need to decide on whetehr or not I should re-evaluate the code I
> just recently finished building.
>
> Any other ideas maybe?
>
> Thanks in advance,
> Dirk
>
>
>
> ________________________________________________________________________________________________________________________________________________________
> > Message: 3
> > Date: Tue, 13 Oct 2009 09:41:19 -0400
> > From: Valeriy Pogrebitskiy <vpogrebi at verizon.net>
> > Subject: Re: [Twisted-Python] Twisted Python vs. "Blocking" Python:
> >        Weird performance on small operations.
> > To: Twisted general discussion <twisted-python at twistedmatrix.com>
> > Message-ID: <EDB2B354-B25D-4A98-AC9D-B9745CA6C3AB at verizon.net>
> > Content-Type: text/plain; charset="us-ascii"
> >
> > Dirk,
> >
> > Using deferred directly in your bin2intAsync() may be somewhat less
> > efficient than some other way described in Recipe 439358: [Twisted]
> >  From blocking functions to deferred functions
> >
> > recipe (http://code.activestate.com/recipes/439358/)
> >
> > You would get same effect (asynchronous execution) - but potentially
> > more efficiently - by just decorating your synchronous methods as:
> >
> > from twisted.internet.threads import deferToThread
> > deferred = deferToThread.__get__
> > ....
> > @deferred
> > def int2binAsync(anInteger):
> >     #Packs an integer, result is 4 bytes
> >     return struct.pack("i", anInteger)
> >
> > @deferred
> > def bin2intAsync(aBin):
> >     #Unpacks a bytestring into an integer
> >     return struct.unpack("i", aBin)[0]
> >
> >
> >
> >
> > Kind regards,
> >
> > Valeriy Pogrebitskiy
> > vpogrebi at verizon.net
> >
> >
> >
> >
> > On Oct 13, 2009, at 9:18 AM, Dirk Moors wrote:
> >
> > > Hello Everyone!
> > >
> > > My name is Dirk Moors, and since 4 years now, I've been involved in
> > > developing a cloud computing platform, using Python as the
> > > programming language. A year ago I discovered Twisted Python, and it
> > > got me very interested, upto the point where I made the decision to
> > > convert our platform (in progress) to a Twisted platform. One year
> > > later I'm still very enthousiastic about the overal performance and
> > > stability, but last week I encountered something I did't expect;
> > >
> > > It appeared that it was less efficient to run small "atomic"
> > > operations in different deferred-callbacks, when compared to running
> > > these "atomic" operations together in "blocking" mode. Am I doing
> > > something wrong here?
> > >
> > > To prove the problem to myself, I created the following example
> > > (Full source- and test code is attached):
> > >
> >
> ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
> > > import struct
> > >
> > > def int2binAsync(anInteger):
> > >     def packStruct(i):
> > >         #Packs an integer, result is 4 bytes
> > >         return struct.pack("i", i)
> > >
> > >     d = defer.Deferred()
> > >     d.addCallback(packStruct)
> > >
> > >     reactor.callLater(0,
> > >                       d.callback,
> > >                       anInteger)
> > >
> > >     return d
> > >
> > > def bin2intAsync(aBin):
> > >     def unpackStruct(p):
> > >         #Unpacks a bytestring into an integer
> > >         return struct.unpack("i", p)[0]
> > >
> > >     d = defer.Deferred()
> > >     d.addCallback(unpackStruct)
> > >
> > >     reactor.callLater(0,
> > >                       d.callback,
> > >                       aBin)
> > >     return d
> > >
> > > def int2binSync(anInteger):
> > >     #Packs an integer, result is 4 bytes
> > >     return struct.pack("i", anInteger)
> > >
> > > def bin2intSync(aBin):
> > >     #Unpacks a bytestring into an integer
> > >     return struct.unpack("i", aBin)[0]
> > >
> > >
> >
> ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
> > >
> > > While running the testcode I got the following results:
> > >
> > > (1 run = converting an integer to a byte string, converting that
> > > byte string back to an integer, and finally checking whether that
> > > last integer is the same as the input integer.)
> > >
> > > *** Starting Synchronous Benchmarks. (No Twisted => "blocking" code)
> > >   -> Synchronous Benchmark (1 runs) Completed in 0.0 seconds.
> > >   -> Synchronous Benchmark (10 runs) Completed in 0.0 seconds.
> > >   -> Synchronous Benchmark (100 runs) Completed in 0.0 seconds.
> > >   -> Synchronous Benchmark (1000 runs) Completed in 0.00399994850159
> > > seconds.
> > >   -> Synchronous Benchmark (10000 runs) Completed in 0.0369999408722
> > > seconds.
> > >   -> Synchronous Benchmark (100000 runs) Completed in 0.362999916077
> > > seconds.
> > > *** Synchronous Benchmarks Completed in 0.406000137329 seconds.
> > >
> > > *** Starting Asynchronous Benchmarks . (Twisted => "non-blocking"
> > > code)
> > >   -> Asynchronous Benchmark (1 runs) Completed in 34.5090000629
> > > seconds.
> > >   -> Asynchronous Benchmark (10 runs) Completed in 34.5099999905
> > > seconds.
> > >   -> Asynchronous Benchmark (100 runs) Completed in 34.5130000114
> > > seconds.
> > >   -> Asynchronous Benchmark (1000 runs) Completed in 34.5859999657
> > > seconds.
> > >   -> Asynchronous Benchmark (10000 runs) Completed in 35.2829999924
> > > seconds.
> > >   -> Asynchronous Benchmark (100000 runs) Completed in 41.492000103
> > > seconds.
> > > *** Asynchronous Benchmarks Completed in 42.1460001469 seconds.
> > >
> > > Am I really seeing factor 100x??
> > >
> > > I really hope that I made a huge reasoning error here but I just
> > > can't find it. If my results are correct then I really need to go
> > > and check my entire cloud platform for the places where I decided to
> > > split functions into atomic operations while thinking that it would
> > > actually improve the performance while on the contrary it did the
> > > opposit.
> > >
> > > I personaly suspect that I lose my cpu-cycles to the reactor
> > > scheduling the deferred-callbacks. Would that assumption make any
> > > sense?
> > > The part where I need these conversion functions is in marshalling/
> > > protocol reading and writing throughout the cloud platform, which
> > > implies that these functions will be called constantly so I need
> > > them to be superfast. I always though I had to split the entire
> > > marshalling process into small atomic (deferred-callback) functions
> > > to be efficient, but these figures tell me otherwise.
> > >
> > > I really hope someone can help me out here.
> > >
> > > Thanks in advance,
> > > Best regards,
> > > Dirk Moors
> > >
> > >
> > >
> > >
> > >
> > >
> > >
> > >
> > >
> > >
> > >
> > >
> > >
> > > <twistedbenchmark.py>_______________________________________________
> > > Twisted-Python mailing list
> > > Twisted-Python at twistedmatrix.com
> > > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> > -------------- next part --------------
> > An HTML attachment was scrubbed...
> > URL:
> >
> http://twistedmatrix.com/pipermail/twisted-python/attachments/20091013/e9ae2546/attachment.htm
> >
> > ------------------------------
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> >
> > End of Twisted-Python Digest, Vol 67, Issue 22
> > **********************************************
> >
> -------------- next part --------------
> An HTML attachment was scrubbed...
> URL:
> http://twistedmatrix.com/pipermail/twisted-python/attachments/20091013/357ffe0c/attachment.htm
> -------------- next part --------------
> A non-text attachment was scrubbed...
> Name: twistedbenchmark.py
> Type: application/octet-stream
> Size: 7269 bytes
> Desc: not available
> Url :
> http://twistedmatrix.com/pipermail/twisted-python/attachments/20091013/357ffe0c/attachment.obj
>
> ------------------------------
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> End of Twisted-Python Digest, Vol 67, Issue 23
> **********************************************
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091013/74db3ae5/attachment.html>

From vpogrebi at verizon.net  Tue Oct 13 08:29:00 2009
From: vpogrebi at verizon.net (Valeriy Pogrebitskiy)
Date: Tue, 13 Oct 2009 10:29:00 -0400
Subject: [Twisted-Python] Twisted-Python Digest, Vol 67, Issue 22
In-Reply-To: <cf75a1410910130718m53645515oc65f0890366a12f2@mail.gmail.com>
References: <mailman.85384.1255441779.23374.twisted-python@twistedmatrix.com>
	<cf75a1410910130718m53645515oc65f0890366a12f2@mail.gmail.com>
Message-ID: <B9A2C5D6-0837-433B-A28B-D94C3B51C6EE@verizon.net>

Dirk,

I hope you are using 'twisted.trial.unittest' instead of standard  
Python's 'unittest'... Right? In case this is not so - update your  
test script to use Twisted's unittest module.


Kind regards,

Valeriy Pogrebitskiy
vpogrebi at verizon.net




On Oct 13, 2009, at 10:18 AM, Dirk Moors wrote:

> Hello Valeriy,
>
> I tried the thing you suggested, and I attached the (updated) code.
> Unfortunatly, the new code was even slower, producing the following  
> results:
>
> *** Starting Asynchronous Benchmarks. (Using Twisted, with "deferred- 
> decorator")
>   -> Asynchronous Benchmark (1 runs) Completed in 56.0279998779  
> seconds.
>   -> Asynchronous Benchmark (10 runs) Completed in 56.0130000114  
> seconds.
>   -> Asynchronous Benchmark (100 runs) Completed in 56.010999918  
> seconds.
>   -> Asynchronous Benchmark (1000 runs) Completed in 56.0410001278  
> seconds.
>   -> Asynchronous Benchmark (10000 runs) Completed in 56.3069999218  
> seconds.
>   -> Asynchronous Benchmark (100000 runs) Completed in 58.8910000324  
> seconds.
> *** Asynchronous Benchmarks Completed in 59.4659998417 seconds.
>
> I suspect that this would me more inefficient because with the  
> deferToThread function in place, every single operation will be  
> executed in its own thread, which means:
> (1 x 2) + (10 x 2) + (100 x 2) + (1000 x 2) + (10000 x 2) + (100000  
> x 2) threads....which is...a lot.
>
> Maybe the problem lies in the way I test the code? I understand that  
> using the asynchronous testcode this way (generating the deferreds  
> using a FOR-loop), a lot of deferreds are generated before the  
> reactor starts calling the deferred-callbacks.....would there be  
> another, better way to test the code?
> The reason I need to now which one is faster (async vs sync  
> functions) is because I need to decide on whetehr or not I should re- 
> evaluate the code I just recently finished building.
>
> Any other ideas maybe?
>
> Thanks in advance,
> Dirk
>
>
> ________________________________________________________________________________________________________________________________________________________
> Message: 3
> Date: Tue, 13 Oct 2009 09:41:19 -0400
> From: Valeriy Pogrebitskiy <vpogrebi at verizon.net>
> Subject: Re: [Twisted-Python] Twisted Python vs. "Blocking" Python:
>        Weird performance on small operations.
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Message-ID: <EDB2B354-B25D-4A98-AC9D-B9745CA6C3AB at verizon.net>
> Content-Type: text/plain; charset="us-ascii"
>
> Dirk,
>
> Using deferred directly in your bin2intAsync() may be somewhat less
> efficient than some other way described in Recipe 439358: [Twisted]
>  From blocking functions to deferred functions
>
> recipe (http://code.activestate.com/recipes/439358/)
>
> You would get same effect (asynchronous execution) - but potentially
> more efficiently - by just decorating your synchronous methods as:
>
> from twisted.internet.threads import deferToThread
> deferred = deferToThread.__get__
> ....
> @deferred
> def int2binAsync(anInteger):
>     #Packs an integer, result is 4 bytes
>     return struct.pack("i", anInteger)
>
> @deferred
> def bin2intAsync(aBin):
>     #Unpacks a bytestring into an integer
>     return struct.unpack("i", aBin)[0]
>
>
>
>
> Kind regards,
>
> Valeriy Pogrebitskiy
> vpogrebi at verizon.net
>
>
>
>
> On Oct 13, 2009, at 9:18 AM, Dirk Moors wrote:
>
> > Hello Everyone!
> >
> > My name is Dirk Moors, and since 4 years now, I've been involved in
> > developing a cloud computing platform, using Python as the
> > programming language. A year ago I discovered Twisted Python, and it
> > got me very interested, upto the point where I made the decision to
> > convert our platform (in progress) to a Twisted platform. One year
> > later I'm still very enthousiastic about the overal performance and
> > stability, but last week I encountered something I did't expect;
> >
> > It appeared that it was less efficient to run small "atomic"
> > operations in different deferred-callbacks, when compared to running
> > these "atomic" operations together in "blocking" mode. Am I doing
> > something wrong here?
> >
> > To prove the problem to myself, I created the following example
> > (Full source- and test code is attached):
> >  
> ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
> > import struct
> >
> > def int2binAsync(anInteger):
> >     def packStruct(i):
> >         #Packs an integer, result is 4 bytes
> >         return struct.pack("i", i)
> >
> >     d = defer.Deferred()
> >     d.addCallback(packStruct)
> >
> >     reactor.callLater(0,
> >                       d.callback,
> >                       anInteger)
> >
> >     return d
> >
> > def bin2intAsync(aBin):
> >     def unpackStruct(p):
> >         #Unpacks a bytestring into an integer
> >         return struct.unpack("i", p)[0]
> >
> >     d = defer.Deferred()
> >     d.addCallback(unpackStruct)
> >
> >     reactor.callLater(0,
> >                       d.callback,
> >                       aBin)
> >     return d
> >
> > def int2binSync(anInteger):
> >     #Packs an integer, result is 4 bytes
> >     return struct.pack("i", anInteger)
> >
> > def bin2intSync(aBin):
> >     #Unpacks a bytestring into an integer
> >     return struct.unpack("i", aBin)[0]
> >
> >  
> ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
> >
> > While running the testcode I got the following results:
> >
> > (1 run = converting an integer to a byte string, converting that
> > byte string back to an integer, and finally checking whether that
> > last integer is the same as the input integer.)
> >
> > *** Starting Synchronous Benchmarks. (No Twisted => "blocking" code)
> >   -> Synchronous Benchmark (1 runs) Completed in 0.0 seconds.
> >   -> Synchronous Benchmark (10 runs) Completed in 0.0 seconds.
> >   -> Synchronous Benchmark (100 runs) Completed in 0.0 seconds.
> >   -> Synchronous Benchmark (1000 runs) Completed in 0.00399994850159
> > seconds.
> >   -> Synchronous Benchmark (10000 runs) Completed in 0.0369999408722
> > seconds.
> >   -> Synchronous Benchmark (100000 runs) Completed in 0.362999916077
> > seconds.
> > *** Synchronous Benchmarks Completed in 0.406000137329 seconds.
> >
> > *** Starting Asynchronous Benchmarks . (Twisted => "non-blocking"
> > code)
> >   -> Asynchronous Benchmark (1 runs) Completed in 34.5090000629
> > seconds.
> >   -> Asynchronous Benchmark (10 runs) Completed in 34.5099999905
> > seconds.
> >   -> Asynchronous Benchmark (100 runs) Completed in 34.5130000114
> > seconds.
> >   -> Asynchronous Benchmark (1000 runs) Completed in 34.5859999657
> > seconds.
> >   -> Asynchronous Benchmark (10000 runs) Completed in 35.2829999924
> > seconds.
> >   -> Asynchronous Benchmark (100000 runs) Completed in 41.492000103
> > seconds.
> > *** Asynchronous Benchmarks Completed in 42.1460001469 seconds.
> >
> > Am I really seeing factor 100x??
> >
> > I really hope that I made a huge reasoning error here but I just
> > can't find it. If my results are correct then I really need to go
> > and check my entire cloud platform for the places where I decided to
> > split functions into atomic operations while thinking that it would
> > actually improve the performance while on the contrary it did the
> > opposit.
> >
> > I personaly suspect that I lose my cpu-cycles to the reactor
> > scheduling the deferred-callbacks. Would that assumption make any
> > sense?
> > The part where I need these conversion functions is in marshalling/
> > protocol reading and writing throughout the cloud platform, which
> > implies that these functions will be called constantly so I need
> > them to be superfast. I always though I had to split the entire
> > marshalling process into small atomic (deferred-callback) functions
> > to be efficient, but these figures tell me otherwise.
> >
> > I really hope someone can help me out here.
> >
> > Thanks in advance,
> > Best regards,
> > Dirk Moors
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> > <twistedbenchmark.py>_______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> -------------- next part --------------
> An HTML attachment was scrubbed...
> URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20091013/e9ae2546/attachment.htm
>
> ------------------------------
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> End of Twisted-Python Digest, Vol 67, Issue 22
> **********************************************
>
> <twistedbenchmark.py>_______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091013/af1ae18b/attachment.html>

From listsin at integrateddevcorp.com  Tue Oct 13 08:43:33 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Tue, 13 Oct 2009 10:43:33 -0400
Subject: [Twisted-Python] Twisted-Python Digest, Vol 67, Issue 23
In-Reply-To: <cf75a1410910130732j7e3964f6m2fad9a4b71af7bee@mail.gmail.com>
References: <mailman.85392.1255443518.23374.twisted-python@twistedmatrix.com>
	<cf75a1410910130732j7e3964f6m2fad9a4b71af7bee@mail.gmail.com>
Message-ID: <10E77527-DAE9-4245-A5CF-EA5A1899023A@integrateddevcorp.com>


On Oct 13, 2009, at 10:32 AM, Dirk Moors wrote:

> Hello Reza,
>
> I tried the solution you provided and I have to say, that changed a  
> lot!
> You gave me a better understanding of how things work with Twisted,  
> and I really appreciate your response!

Can you show the new code and benchmark results?

Sounds like there's an important lesson here...

Thanks,

S




From steveire at gmail.com  Tue Oct 13 08:42:03 2009
From: steveire at gmail.com (Stephen Kelly)
Date: Tue, 13 Oct 2009 16:42:03 +0200
Subject: [Twisted-Python] python-twisted-akonadi and akonadi-gtk
Message-ID: <hb23jr$pj6$1@ger.gmane.org>

Hi,

Twisted is a framework for event driven applications. Typically client-
server architectures can be implemented with Twisted. Existing servers and 
clients exist for a long list of protocols and communication devices 
including HTTP, SSH, and notably for my purpose, IMAP and UNIX sockets. It 
provides an event loop, and asynchronous Deferred objects which are similar 
to KJob objects.

http://twistedmatrix.com/trac/

Akonadi is a cross platform PIM (personal information management) framework 
developed as part of the KDE4 platform. The goals of Akonadi include

* Isolating user applications handing PIM data such as emails, contacts, 
notes etc from the protocols used to access or store that data (IMAP, POP, 
Maildir, Groupware, vcards, etc).
* Provide a single point of storage (actually a cache) of PIM data 
accessible and manipulatable by any application written in any language on 
the target platform.

http://pim.kde.org/akonadi/

Akonadi is designed as a client/server architecture. The server is written 
in Qt/C++, and we already have one client library  for interfacing with the 
server written in C++ using the KDE platform. Notifications of changes to 
data are transmitted over D-Bus, and the actual data is transferred over a 
local socket (on Unix. On windows it's a named pipe). The protocol used for 
communication is IMAP with some non-standard extensions.

And so the purpose emerges :).

I have started an Akonadi client library written in python using twisted-
imap with some extensions on top of it for Akonadi specific functionality. 
The code currently lives here:

http://gitorious.org/python-twisted-akonadi

There is the twisted-akonadi library a gtkAkonadi library containing some 
high level classes for PyGtk applications and a simple email reader and 
addressbook written in pygtk. Because Akonadi keeps everything in sync, you 
can change items in a KDE application, the gtk application, or the django 
application, and the other two will be instantly updated with the change.

I've blogged about it twice already here:
* http://steveire.wordpress.com/2009/10/09/holy-grail-no-thanks-weve-
already-got-one/
* http://steveire.wordpress.com/2009/10/13/cross-platform-akonadi-video/

As you can see, this is only a proof of concept of the project. The aim is 
to create a library which feels pythonic and natural to use for twisted 
users. If you think I've started in the wrong way, or you have ideas for 
ways this API could be used, please let me know. I've just started with 
twisted, so I've probably not found some stuff which would make this task 
easier.

Additionally, if you would like to contribute to the project, that would be 
very welcome. :)

If you find the ideas here interesting and want to know more, the Akonadi 
developers are in #akonadi on Freenode and kde-pim at KDE.org, and I am 
already in #twisted.

It isn't quite a twisted success story yet, but I think it has the potential 
to become one.


All the best,

Steve.





From mardiros at laposte.net  Tue Oct 13 13:28:30 2009
From: mardiros at laposte.net (mardiros)
Date: Tue, 13 Oct 2009 21:28:30 +0200
Subject: [Twisted-Python] CalendarServer
In-Reply-To: <1255431505.1206.10.camel@hpcinf18.hguv.local>
References: <1255431505.1206.10.camel@hpcinf18.hguv.local>
Message-ID: <4AD4D4DE.9000501@laposte.net>


Fernando Ruza Rodriguez a écrit :
> ~$ svn co svn://svn.twistedmatrix.com/svn/Twisted/trunk Twisted
> svn: Cannot be possible to connect to 'svn.twistedmatrix.com': time
>
> Thanks.
>
> Fernando.
>
>   
I have the same problem at my office,
svn port is closed by the firewall ( Port 3690 )

http://svnbook.red-bean.com/en/1.0/ch06s03.html

mardiros





From listsin at integrateddevcorp.com  Tue Oct 13 18:02:47 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Tue, 13 Oct 2009 20:02:47 -0400
Subject: [Twisted-Python] How to find out if exceptions are being raised in
	your errBack?
Message-ID: <E096D98B-3BD0-464A-94DF-C28ED3337066@integrateddevcorp.com>

I've been hunting down a problem that I've finally found the cause of  
and I'd like to know what's the Twisted way to catch this "error  
within the code handling the error"  type of error.

Basically, in one branch of the errBack, there was a typo.  A simple  
typo that caused an unhandled NameError exception, but only once in  a  
few thousand runs.

The exception got caught and "displayed" by Twisted, but it wasn't  
going anyplace anyone was looking (buried under zillions of lines of  
logging) and the app continues on as if nothing went wrong.

I've put up a simple app that demonstrates the issue: http://pastebin.com/m59217f60

If you put in a 404 error URL, let it run through, you'll see the 404  
error printed out, the exception will occur in the background, and the  
program just keeps on going.

If you then hit Ctrl-C, you can see the traceback showing that Twisted  
caught the NameError .

What is the best way to handle programming errors like this in  
deferreds so they don't slip by, unnoticed?

Thanks,

S

(~/twisted_err)# ./errs_away.py
URL: http://www.yahoo.com
line = http://www.yahoo.com
Got data, len ==  9490
URL: http://thereisnodomainnamedthis.com
line = http://thereisnodomainnamedthis.com
Error: DNS lookup failed: address 'thereisnodomainnamedthis.com' not  
found: [Errno 8] nodename nor servname provided, or not known.
URL: http://www.yahoo.com/non-existent-page
line = http://www.yahoo.com/non-existent-page
Error: 400 Bad Request	<====== This triggers the code with the bad  
variable
URL: ^C		<============= manually stop the program

============= Then, you get to see the traceback ==================
Unhandled error in Deferred:
Traceback (most recent call last):
   File "/System/Library/Frameworks/Python.framework/Versions/2.6/ 
Extras/lib/python/twisted/web/client.py", line 143, in handleResponse
     self.status, self.message, response)))
   File "/System/Library/Frameworks/Python.framework/Versions/2.6/ 
Extras/lib/python/twisted/web/client.py", line 309, in noPage
     self.deferred.errback(reason)
   File "/System/Library/Frameworks/Python.framework/Versions/2.6/ 
Extras/lib/python/twisted/internet/defer.py", line 269, in errback
     self._startRunCallbacks(fail)
   File "/System/Library/Frameworks/Python.framework/Versions/2.6/ 
Extras/lib/python/twisted/internet/defer.py", line 312, in  
_startRunCallbacks
     self._runCallbacks()
--- <exception caught here> ---
   File "/System/Library/Frameworks/Python.framework/Versions/2.6/ 
Extras/lib/python/twisted/internet/defer.py", line 328, in _runCallbacks
     self.result = callback(self.result, *args, **kw)
   File "./errs_away.py", line 15, in printError
     print oops      # variable's not defined...
exceptions.NameError: global name 'oops' is not defined

Thanks,

S





From dgriff1 at gmail.com  Tue Oct 13 20:44:20 2009
From: dgriff1 at gmail.com (Daniel Griffin)
Date: Tue, 13 Oct 2009 21:44:20 -0500
Subject: [Twisted-Python] Twisted Performance
Message-ID: <3db160680910131944w7f101c1fhfd29dad00eb4dfe0@mail.gmail.com>

Hi,

I am new to twisted and have been having trouble finding out information
about twisted's performance. I have a fairly simple setup where I need to
open a bunch of TCP connections that last for varying amounts of time but
dont do much. I have tried using threads(got GILed to death) and
Processes(even worse). Now I am looking at either making a system to start
the connection and send info to have the remote point "phone home" when its
done, then closing the connection or using something like Twisted.

my socket conversation:
my app -> send a message that triggers an action on the other end
other end -> recv's message does action(can take any amount of time)
other end - > sends results back to my app

Can twisted handle up to several hundred connections like this? Is there a
better approach? Is there anything I should avoid?

Thanks,

Dan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091013/625eb989/attachment.html>

From listsin at integrateddevcorp.com  Tue Oct 13 22:34:56 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Wed, 14 Oct 2009 00:34:56 -0400
Subject: [Twisted-Python] Twisted Performance
In-Reply-To: <3db160680910131944w7f101c1fhfd29dad00eb4dfe0@mail.gmail.com>
References: <3db160680910131944w7f101c1fhfd29dad00eb4dfe0@mail.gmail.com>
Message-ID: <7E5C519B-FC3C-430D-8D78-35A91C66286F@integrateddevcorp.com>


On Oct 13, 2009, at 10:44 PM, Daniel Griffin wrote:

> Hi,
>
> I am new to twisted and have been having trouble finding out  
> information about twisted's performance. I have a fairly simple  
> setup where I need to open a bunch of TCP connections that last for  
> varying amounts of time but dont do much. I have tried using threads 
> (got GILed to death) and Processes(even worse). Now I am looking at  
> either making a system to start the connection and send info to have  
> the remote point "phone home" when its done, then closing the  
> connection or using something like Twisted.
>
> my socket conversation:
> 	my app -> send a message that triggers an action on the other end
> 	other end -> recv's message does action(can take any amount of time)
> 	other end - > sends results back to my app

Twisted Documentation: Writing Clients

I would suggest deferring worrying at this point. (;-b).

Twisted can almost certainly handle it.

Do the simplest thing possible, see how it performs, then worry as  
necessary.

S

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091014/43df3a5f/attachment.html>

From glyph at twistedmatrix.com  Wed Oct 14 00:07:49 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 14 Oct 2009 02:07:49 -0400
Subject: [Twisted-Python] How to find out if exceptions are being raised
	in your errBack?
In-Reply-To: <E096D98B-3BD0-464A-94DF-C28ED3337066@integrateddevcorp.com>
References: <E096D98B-3BD0-464A-94DF-C28ED3337066@integrateddevcorp.com>
Message-ID: <d9047f780910132307l3a217978s5843f84f4263c9c8@mail.gmail.com>

On Tue, Oct 13, 2009 at 8:02 PM, Steve Steiner (listsin) <
listsin at integrateddevcorp.com> wrote:

> I've been hunting down a problem that I've finally found the cause of
> and I'd like to know what's the Twisted way to catch this "error
> within the code handling the error"  type of error.
>

The right way to catch this is to write tests for your code and run them
before deploying it to production :).  Trial will helpfully fail tests which
cause exceptions to be logged, so you don't need to write any special extra
test to make sure that nothing is blowing up; just test your error-handling
case, and if it blows up you will see it.


> Basically, in one branch of the errBack, there was a typo.  A simple
> typo that caused an unhandled NameError exception, but only once in  a
> few thousand runs.
>

If it's a NameError, you also could have used Pyflakes to catch it :).


> The exception got caught and "displayed" by Twisted, but it wasn't
> going anyplace anyone was looking (buried under zillions of lines of
> logging) and the app continues on as if nothing went wrong.
>

The real lesson here is that you should be paying attention to logged
tracebacks.

There are many ways to do this.  Many operations teams running Twisted
servers will trawl the logs with regular expressions.  Not my preferred way
of doing it, but I'm not really an ops person :).

If you want to handle logged exceptions specially, for example to put them
in a separate file, or to e-mail them to somebody, consider writing a log
observer that checks for the isError key and does something special there.
You can find out more about writing log observers here: <
http://twistedmatrix.com/projects/core/documentation/howto/logging.html>.


> What is the best way to handle programming errors like this in
> deferreds so they don't slip by, unnoticed?
>

I'm answering a question you didn't ask, about logged errors, because I
think it's the one you meant to ask.  The answer to the question you are
actually asking here, i.e. "how do I handle errors in an errback", is quite
simple: add another errback.  This is sort of like asking how to handle
exceptions in an 'except:' block in Python.  For example, if you want to
catch errors from this code:

try:
  foo()
except:
  oops()

you could modify it to look like this:

try:
  foo()
except:
  try:
    oops()
  except:
    handleOopsOops()

which is what adding another errback is like.  But, as I said: I don't think
this is what you want, since it will only let you handle un-handled errors
in Deferreds (not unhandled errors in, for example, protocols) and you will
have to attach your error-handling callbacks everywhere (not to mention
trying to guess a sane return value for the error-handler-error-handler.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091014/7c4cd6a6/attachment.html>

From andrew at bemusement.org  Wed Oct 14 01:22:34 2009
From: andrew at bemusement.org (Andrew Bennetts)
Date: Wed, 14 Oct 2009 18:22:34 +1100
Subject: [Twisted-Python] How to find out if exceptions are being	raised
	in your errBack?
In-Reply-To: <d9047f780910132307l3a217978s5843f84f4263c9c8@mail.gmail.com>
References: <E096D98B-3BD0-464A-94DF-C28ED3337066@integrateddevcorp.com>
	<d9047f780910132307l3a217978s5843f84f4263c9c8@mail.gmail.com>
Message-ID: <20091014072234.GB16893@steerpike.home.puzzling.org>

Glyph Lefkowitz wrote:
[...]
>    I'm answering a question you didn't ask, about logged errors, because I
>    think it's the one you meant to ask.  The answer to the question you are
>    actually asking here, i.e. "how do I handle errors in an errback", is
>    quite simple: add another errback.  This is sort of like asking how to
>    handle exceptions in an 'except:' block in Python.  For example, if you
[...]

To think about it another way, what happens when an unhandled exception occurs
in a thread?  The thread dies, and Python simply throws the traceback at stderr.
There's not much else it can reasonably do.  If you want to catch (or suppress)
that error, you add (another) try/except at the outermost layer of the call
stack.

Possibly Twisted could provide some sort of last-ditch error reporting hook,
like sys.excepthook in core Python, but I'm not sure it would offer much
advantage over writing a log observer that looks for events where isError is
set.

-Andrew.




From lvh at laurensvh.be  Wed Oct 14 02:55:53 2009
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Wed, 14 Oct 2009 10:55:53 +0200
Subject: [Twisted-Python] Twisted Performance
In-Reply-To: <3db160680910131944w7f101c1fhfd29dad00eb4dfe0@mail.gmail.com>
References: <3db160680910131944w7f101c1fhfd29dad00eb4dfe0@mail.gmail.com>
Message-ID: <cedc0c090910140155l4bfd70eek364dca61c9ea2f44@mail.gmail.com>

On Wed, Oct 14, 2009 at 4:44 AM, Daniel Griffin <dgriff1 at gmail.com> wrote:
> Hi,
>
> I am new to twisted and have been having trouble finding out information
> about twisted's performance. I have a fairly simple setup where I need to
> open a bunch of TCP connections that last for varying amounts of time but
> dont do much. I have tried using threads(got GILed to death) and
> Processes(even worse). Now I am looking at either making a system to start
> the connection and send info to have the remote point "phone home" when its
> done, then closing the connection or using something like Twisted.
>
> my socket conversation:
> my app -> send a message that triggers an action on the other end
> other end -> recv's message does action(can take any amount of time)
> other end - > sends results back to my app

Sure, that's a blueprint for pretty much every Twisted app. You just
need to make the thing that takes a long time not block the reactor.
How you do that mostly depends on what the "long thing" is.

Usually this means using an existing library, sometimes it means
writing your own, and for some unfortunate cases it means deferring to
a thread. (Note that deferring to a thread to fake non-blocking IO is
not anywhere near as bad as doing actual _work_ in threads ;-))

Personally I'm a big fan of this series of blog posts:
http://krondo.com/blog/?page_id=1327

And you should probably read the finger tutorial and the deferreds tutorial :-)

> Can twisted handle up to several hundred connections like this? Is there a
> better approach? Is there anything I should avoid?

Depends how much work you're doing in the Twisted process or on the
same box, of course. You're probably looking at several thousand
rather than several hundred, depending on how much work needs to be
done in each one.

> Thanks,
>
> Dan



From listsin at integrateddevcorp.com  Wed Oct 14 05:31:02 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Wed, 14 Oct 2009 07:31:02 -0400
Subject: [Twisted-Python] How to find out if exceptions are being	raised
	in your errBack?
In-Reply-To: <20091014072234.GB16893@steerpike.home.puzzling.org>
References: <E096D98B-3BD0-464A-94DF-C28ED3337066@integrateddevcorp.com>
	<d9047f780910132307l3a217978s5843f84f4263c9c8@mail.gmail.com>
	<20091014072234.GB16893@steerpike.home.puzzling.org>
Message-ID: <A18C0B08-5D81-416A-8485-777AF02A8326@integrateddevcorp.com>


On Oct 14, 2009, at 3:22 AM, Andrew Bennetts wrote:

> Glyph Lefkowitz wrote:
> [...]
>>   I'm answering a question you didn't ask, about logged errors,  
>> because I
>>   think it's the one you meant to ask.  The answer to the question  
>> you are
>>   actually asking here, i.e. "how do I handle errors in an  
>> errback", is
>>   quite simple: add another errback.  This is sort of like asking  
>> how to
>>   handle exceptions in an 'except:' block in Python.  For example,  
>> if you
> [...]
>
> To think about it another way, what happens when an unhandled  
> exception occurs
> in a thread?  The thread dies, and Python simply throws the  
> traceback at stderr.
> There's not much else it can reasonably do.  If you want to catch  
> (or suppress)
> that error, you add (another) try/except at the outermost layer of  
> the call
> stack.

Yah, I started thinking about how far out I'd have to start the try/ 
except and started to get a headache when I thought about how much  
code it would have to encompass or, with an alternate approach, how  
many zillions of little extra blocks I'd have to insert everywhere.

> Possibly Twisted could provide some sort of last-ditch error  
> reporting hook,
> like sys.excepthook in core Python, but I'm not sure it would offer  
> much
> advantage over writing a log observer that looks for events where  
> isError is
> set.

I'm going to use the log observer option with tail -f in a separate  
console window on a linux console that's just sitting there doing  
nothing anyway.  That way, if it shows up on that terminal, something  
bad is happening.

Thanks!

S




From listsin at integrateddevcorp.com  Wed Oct 14 05:43:41 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Wed, 14 Oct 2009 07:43:41 -0400
Subject: [Twisted-Python] How to find out if exceptions are being raised
	in your errBack?
In-Reply-To: <d9047f780910132307l3a217978s5843f84f4263c9c8@mail.gmail.com>
References: <E096D98B-3BD0-464A-94DF-C28ED3337066@integrateddevcorp.com>
	<d9047f780910132307l3a217978s5843f84f4263c9c8@mail.gmail.com>
Message-ID: <B04EC372-364F-4A97-A51A-DB074933997D@integrateddevcorp.com>


On Oct 14, 2009, at 2:07 AM, Glyph Lefkowitz wrote:

> On Tue, Oct 13, 2009 at 8:02 PM, Steve Steiner (listsin) <listsin at integrateddevcorp.com 
> > wrote:
> I've been hunting down a problem that I've finally found the cause of
> and I'd like to know what's the Twisted way to catch this "error
> within the code handling the error"  type of error.
>
> The right way to catch this is to write tests for your code and run  
> them before deploying it to production :).

Yes, we're working on it but it's a large code base and we started  
with exactly zero tests.  While that leaves infinite room for  
improvement, it's a little overwhelming.  Oh well, at least we know  
where to concentrate first ;-0.

> Trial will helpfully fail tests which cause exceptions to be logged,  
> so you don't need to write any special extra test to make sure that  
> nothing is blowing up; just test your error-handling case, and if it  
> blows up you will see it.

We've just been using nose; is that something Trial handles specially  
for Twisted?

> Basically, in one branch of the errBack, there was a typo.  A simple
> typo that caused an unhandled NameError exception, but only once in  a
> few thousand runs.
>
> If it's a NameError, you also could have used Pyflakes to catch it :).

That's in our list of 'things to put in the commit pre-hook' as well.   
I'm not sure pyflakes would have caught this one, though because it's  
a legitimate instance variable, it's just not set to something usable  
before this particular error condition comes up.

> The exception got caught and "displayed" by Twisted, but it wasn't
> going anyplace anyone was looking (buried under zillions of lines of
> logging) and the app continues on as if nothing went wrong.
>
> The real lesson here is that you should be paying attention to  
> logged tracebacks.
>
> There are many ways to do this.  Many operations teams running  
> Twisted servers will trawl the logs with regular expressions.  Not  
> my preferred way of doing it, but I'm not really an ops person :).

I'm not much on the ops end either but I guess I'm learning...

> If you want to handle logged exceptions specially, for example to  
> put them in a separate file, or to e-mail them to somebody, consider  
> writing a log observer that checks for the isError key and does  
> something special there.  You can find out more about writing log  
> observers here: <http://twistedmatrix.com/projects/core/documentation/howto/logging.html 
> >.

This is an area of Twisted I haven't explored at all since the code's  
all using the standard Python logging.

That's the thing about Twisted; sometimes it's hard to know whether  
the stuff that has been built into standard Python since Twisted  
'rolled their own' is a superset, a subset, or a completely different  
beast.  Logging is a good case in point.  Since we're using Python's  
logging everywhere, I wasn't even sure whether there would be an  
advantage to learning Twisted's similar system.  Twisted's trial is  
another example; we've just been using nose.  Seems like there's  
always some little extra that makes the Twisted stuff worth knowing.

> What is the best way to handle programming errors like this in
> deferreds so they don't slip by, unnoticed?
>
> I'm answering a question you didn't ask, about logged errors,  
> because I think it's the one you meant to ask.  The answer to the  
> question you are actually asking here, i.e. "how do I handle errors  
> in an errback", is quite simple: add another errback.  This is sort  
> of like asking how to handle exceptions in an 'except:' block in  
> Python.  For example, if you want to catch errors from this code:
>
> try:
>   foo()
> except:
>   oops()
>
> you could modify it to look like this:
>
> try:
>   foo()
> except:
>   try:
>     oops()
>   except:
>     handleOopsOops()
>
> which is what adding another errback is like.  But, as I said: I  
> don't think this is what you want, since it will only let you handle  
> un-handled errors in Deferreds (not unhandled errors in, for  
> example, protocols) and you will have to attach your error-handling  
> callbacks everywhere (not to mention trying to guess a sane return  
> value for the error-handler-error-handler.

Right, I started thinking down that infinitely nested slippery slope  
and figured there must be a better way.  I think the logging question  
you answered that I didn't ask was the one I meant ;-).

Thanks again for another enlightening answer.

S



-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091014/e86d131c/attachment.html>

From listsin at integrateddevcorp.com  Wed Oct 14 06:14:51 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Wed, 14 Oct 2009 08:14:51 -0400
Subject: [Twisted-Python] Twisted Performance
In-Reply-To: <cedc0c090910140155l4bfd70eek364dca61c9ea2f44@mail.gmail.com>
References: <3db160680910131944w7f101c1fhfd29dad00eb4dfe0@mail.gmail.com>
	<cedc0c090910140155l4bfd70eek364dca61c9ea2f44@mail.gmail.com>
Message-ID: <80F2A1FE-BE1F-404F-BD29-21BA0B7B4D16@integrateddevcorp.com>


On Oct 14, 2009, at 4:55 AM, Laurens Van Houtven wrote:
> Personally I'm a big fan of this series of blog posts:
> http://krondo.com/blog/?page_id=1327

Very nice, thanks for sharing!

S




From screwtape at froup.com  Wed Oct 14 06:26:27 2009
From: screwtape at froup.com (Tim Allen)
Date: Wed, 14 Oct 2009 23:26:27 +1100
Subject: [Twisted-Python] How to find out if exceptions are being raised
 in your errBack?
In-Reply-To: <B04EC372-364F-4A97-A51A-DB074933997D@integrateddevcorp.com>
References: <E096D98B-3BD0-464A-94DF-C28ED3337066@integrateddevcorp.com>
	<d9047f780910132307l3a217978s5843f84f4263c9c8@mail.gmail.com>
	<B04EC372-364F-4A97-A51A-DB074933997D@integrateddevcorp.com>
Message-ID: <20091014122627.GA19632@thristian.org>

On Wed, Oct 14, 2009 at 07:43:41AM -0400, Steve Steiner (listsin) wrote:
> That's the thing about Twisted; sometimes it's hard to know whether
> the stuff that has been built into standard Python since Twisted
> 'rolled their own' is a superset, a subset, or a completely
> different beast.  Logging is a good case in point.  Since we're
> using Python's logging everywhere, I wasn't even sure whether there
> would be an advantage to learning Twisted's similar system.
> Twisted's trial is another example; we've just been using nose.
> Seems like there's always some little extra that makes the Twisted
> stuff worth knowing.

Most of the duplicate stuff in Twisted has the excuse of being written
before any alternatives were available, and usually having one or two
extra little integration features that current alternatives don't
provide.

A year or two ago I was planning a new project using Twisted, and (as
a reaction to the masses of horrible, legacy code at my employer) had
decreed that the project would use the Python stdlib wherever possible,
including logging and testing, and well-integrated third-party tools
where necessary.

First on the chopping block was the use of standard Python unit-tests
and nose. At the time, I don't believe it was possible to run TestCases
inheriting from twisted.trial.unittest.TestCase in anything besides
Trial - and you need to use trial's TestCase class if you want to do
anything with Deferreds, so nose and the standard unittest.TestCase had
to go.

Once I was using Trial, which automatically sets up Twisted's logging
system to log to a handy file for debugging purposes, I had to decide
what to do about logging - try to reroute Twisted's logging into the
Python logging system (which would mean doing something complicated for
tests), or just give up and use Twisted's logging everywhere. I opted
for the latter route as the path of least resistance (and because it
would be easier to set up with twistd later).

I believe nose does for Python logging what Trial does for Twisted
logging these days, and if nose can run Trial's TestCase subclasses, you
might just as well stick with what you're already using. There are
integration advantages to using all the Twisted goodies together, but
it's not nearly the same amazing quantum leap in understanding and
capability that Twisted's core provides.



From glyph at twistedmatrix.com  Wed Oct 14 06:45:28 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 14 Oct 2009 05:45:28 -0700
Subject: [Twisted-Python] How to find out if exceptions are being raised
	in your errBack?
In-Reply-To: <B04EC372-364F-4A97-A51A-DB074933997D@integrateddevcorp.com>
References: <E096D98B-3BD0-464A-94DF-C28ED3337066@integrateddevcorp.com>
	<d9047f780910132307l3a217978s5843f84f4263c9c8@mail.gmail.com>
	<B04EC372-364F-4A97-A51A-DB074933997D@integrateddevcorp.com>
Message-ID: <d9047f780910140545u6d9c4f15w5f12885856a08c3f@mail.gmail.com>

On Wed, Oct 14, 2009 at 4:43 AM, Steve Steiner (listsin) <
listsin at integrateddevcorp.com> wrote:

>
> On Oct 14, 2009, at 2:07 AM, Glyph Lefkowitz wrote:
>
> Yes, we're working on it but it's a large code base and we started with
> exactly zero tests.  While that leaves infinite room for improvement, it's a
> little overwhelming.  Oh well, at least we know where to concentrate first
> ;-0.
>

I realize it's a challenge, but, well, "Doctor, doctor, it hurts when I
don't do this!".  My immediate reaction is "go ahead and do it, then" :-).

> Trial will helpfully fail tests which cause exceptions to be logged, so you
> don't need to write any special extra test to make sure that nothing is
> blowing up; just test your error-handling case, and if it blows up you will
> see it.
>
>
> We've just been using nose; is that something Trial handles specially for
> Twisted?
>

Yes.

> If you want to handle logged exceptions specially, for example to put them
> in a separate file, or to e-mail them to somebody, consider writing a log
> observer that checks for the isError key and does something special there.
> You can find out more about writing log observers here: <
> http://twistedmatrix.com/projects/core/documentation/howto/logging.html>.
>
>
> This is an area of Twisted I haven't explored at all since the code's all
> using the standard Python logging.
> That's the thing about Twisted; sometimes it's hard to know whether the
> stuff that has been built into standard Python since Twisted 'rolled their
> own' is a superset, a subset, or a completely different beast.  Logging is a
> good case in point.  Since we're using Python's logging everywhere, I wasn't
> even sure whether there would be an advantage to learning Twisted's similar
> system.  Twisted's trial is another example; we've just been using nose.
>  Seems like there's always some little extra that makes the Twisted stuff
> worth knowing.
>

Another option here would be to set up a PythonLoggingObserver that relay's
Twisted's log messages to Python standard logging, then setup a standard log
handler (another poster suggests nose already does this) to fail the test
when appropriate.  I'm fairly sure that the information you need is being
properly relayed to the relevant parties, but if I'm wrong, it's a bug and
probably a pretty easy one to fix :).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091014/4828fde8/attachment.html>

From listsin at integrateddevcorp.com  Wed Oct 14 07:05:00 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Wed, 14 Oct 2009 09:05:00 -0400
Subject: [Twisted-Python] How to find out if exceptions are being raised
	in your errBack?
In-Reply-To: <20091014122627.GA19632@thristian.org>
References: <E096D98B-3BD0-464A-94DF-C28ED3337066@integrateddevcorp.com>
	<d9047f780910132307l3a217978s5843f84f4263c9c8@mail.gmail.com>
	<B04EC372-364F-4A97-A51A-DB074933997D@integrateddevcorp.com>
	<20091014122627.GA19632@thristian.org>
Message-ID: <9CCEFD45-01E6-4875-B3CA-A4E17AE6E1F7@integrateddevcorp.com>


On Oct 14, 2009, at 8:26 AM, Tim Allen wrote:

> On Wed, Oct 14, 2009 at 07:43:41AM -0400, Steve Steiner (listsin)  
> wrote:
>> That's the thing about Twisted; sometimes it's hard to know whether
>> the stuff that has been built into standard Python since Twisted
>> 'rolled their own' is a superset, a subset, or a completely
>> different beast.  Logging is a good case in point.  Since we're
>> using Python's logging everywhere, I wasn't even sure whether there
>> would be an advantage to learning Twisted's similar system.
>> Twisted's trial is another example; we've just been using nose.
>> Seems like there's always some little extra that makes the Twisted
>> stuff worth knowing.
>
> Most of the duplicate stuff in Twisted has the excuse of being written
> before any alternatives were available, and usually having one or two
> extra little integration features that current alternatives don't
> provide.

Yes, that extra little integration feature sometimes makes a huge  
difference.  But, as you said, being as much of Twisted's stuff  
predates the 'equivalent' stdlib stuff, it's hard to know where the  
leverage is going to be.

For example, Python's standard logging has the advantage of being able  
to generate many different types of logging outputs (e.g.  
logging.handlers.SMTPHandler) whereas Twisted's is better integrated  
with Twisted but is missing many of those types of things.

Trial and deferreds vs. nose and its integration with e.g. coverage...

It's hard to know when to use which and, as you said, we want to use  
standard library stuff wherever possible.

> Once I was using Trial, which automatically sets up Twisted's logging
> system to log to a handy file for debugging purposes, I had to decide
> what to do about logging - try to reroute Twisted's logging into the
> Python logging system (which would mean doing something complicated  
> for
> tests), or just give up and use Twisted's logging everywhere. I opted
> for the latter route as the path of least resistance (and because it
> would be easier to set up with twistd later).

I'm working out a blended method having a PythonLoggingObserver that  
relay's Twisted's log messages to Python standard logging, as per  
Glyph's suggestion.  That way we don't have to mangle all of our  
working logging code, bug special notifications we can reroute to a  
special "Twisted Messages" file that we know to keep an eye on.

> I believe nose does for Python logging what Trial does for Twisted
> logging these days, and if nose can run Trial's TestCase subclasses,  
> you
> might just as well stick with what you're already using. There are
> integration advantages to using all the Twisted goodies together, but
> it's not nearly the same amazing quantum leap in understanding and
> capability that Twisted's core provides.

Again, we'll probably end up with a blended approach since we use nose  
for coverage and profiling integration as well.

We are having fun now, right?

S





From dgriff1 at gmail.com  Wed Oct 14 07:53:22 2009
From: dgriff1 at gmail.com (Daniel Griffin)
Date: Wed, 14 Oct 2009 08:53:22 -0500
Subject: [Twisted-Python] Twisted Performance
In-Reply-To: <80F2A1FE-BE1F-404F-BD29-21BA0B7B4D16@integrateddevcorp.com>
References: <3db160680910131944w7f101c1fhfd29dad00eb4dfe0@mail.gmail.com>
	<cedc0c090910140155l4bfd70eek364dca61c9ea2f44@mail.gmail.com>
	<80F2A1FE-BE1F-404F-BD29-21BA0B7B4D16@integrateddevcorp.com>
Message-ID: <3db160680910140653t6fb4f9ddk3051afc056f6a8b9@mail.gmail.com>

Sounds good, I am going to try to get this up and running over the next few
days. I'll get back with some results.


Dan

On Wed, Oct 14, 2009 at 7:14 AM, Steve Steiner (listsin) <
listsin at integrateddevcorp.com> wrote:

>
> On Oct 14, 2009, at 4:55 AM, Laurens Van Houtven wrote:
> > Personally I'm a big fan of this series of blog posts:
> > http://krondo.com/blog/?page_id=1327
>
> Very nice, thanks for sharing!
>
> S
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091014/ec624523/attachment-0001.html>

From dave at krondo.com  Wed Oct 14 19:30:21 2009
From: dave at krondo.com (Dave Peticolas)
Date: Wed, 14 Oct 2009 18:30:21 -0700
Subject: [Twisted-Python] Twisted Performance
In-Reply-To: <80F2A1FE-BE1F-404F-BD29-21BA0B7B4D16@integrateddevcorp.com>
References: <3db160680910131944w7f101c1fhfd29dad00eb4dfe0@mail.gmail.com>	<cedc0c090910140155l4bfd70eek364dca61c9ea2f44@mail.gmail.com>
	<80F2A1FE-BE1F-404F-BD29-21BA0B7B4D16@integrateddevcorp.com>
Message-ID: <4AD67B2D.3050500@krondo.com>

Steve Steiner (listsin) wrote:
> On Oct 14, 2009, at 4:55 AM, Laurens Van Houtven wrote:
>> Personally I'm a big fan of this series of blog posts:
>> http://krondo.com/blog/?page_id=1327
> 
> Very nice, thanks for sharing!

Thank you. I really meant to make a public announcement
about that on this list, but I was trying to get to
Deferreds first :)

Anyway...I'm writing an Introduction to Twisted and
asynchronous programming. Surprise :)

dave



From listsin at integrateddevcorp.com  Wed Oct 14 19:47:35 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Wed, 14 Oct 2009 21:47:35 -0400
Subject: [Twisted-Python] Twisted Performance
In-Reply-To: <4AD67B2D.3050500@krondo.com>
References: <3db160680910131944w7f101c1fhfd29dad00eb4dfe0@mail.gmail.com>	<cedc0c090910140155l4bfd70eek364dca61c9ea2f44@mail.gmail.com>
	<80F2A1FE-BE1F-404F-BD29-21BA0B7B4D16@integrateddevcorp.com>
	<4AD67B2D.3050500@krondo.com>
Message-ID: <4EBDD6C1-53B5-4CA9-AD44-205F5E101264@integrateddevcorp.com>

Cool, please let me know off-list if you'd like a quick review before  
"going live."

S

On Oct 14, 2009, at 9:30 PM, Dave Peticolas wrote:

> Steve Steiner (listsin) wrote:
>> On Oct 14, 2009, at 4:55 AM, Laurens Van Houtven wrote:
>>> Personally I'm a big fan of this series of blog posts:
>>> http://krondo.com/blog/?page_id=1327
>>
>> Very nice, thanks for sharing!
>
> Thank you. I really meant to make a public announcement
> about that on this list, but I was trying to get to
> Deferreds first :)
>
> Anyway...I'm writing an Introduction to Twisted and
> asynchronous programming. Surprise :)
>
> dave
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From listsin at integrateddevcorp.com  Wed Oct 14 22:01:45 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Thu, 15 Oct 2009 00:01:45 -0400
Subject: [Twisted-Python] Can I post a consultant request here?
Message-ID: <EF928A00-AFA0-4529-AFC0-DDF1F26B2CF4@integrateddevcorp.com>

Hey!

	I apologize in advance if this type of request is not desired/allowed  
on this list.

	I'm looking for a very short-term mentoring/consulting contract to   
help me get an Ajax/Comet type of connection working between a web  
interface and a fairly long-running, server-side process.

	I want the web interface to reflect the server-side data as it  
becomes available.

	I'm sure someone on this list knows exactly how to hook the pieces  
together; I don't.

	It would be much more efficient to have someone who already knows  
help me hook it up instead of spending an unpredictable amount of time  
figuring it out myself.

	I'd also like to have, as a primary product of this project, a  
tutorial showing a real-world application of Twisted to handle a  
modern, real-world use-case with full, open, well documented source  
code.

	If you're interested, please contact me off-list at  
ssteinerx at gmail.com.

Thanks,

S


	




From itamar at itamarst.org  Thu Oct 15 06:53:58 2009
From: itamar at itamarst.org (Itamar Turner-Trauring (aka Shtull-Trauring))
Date: Thu, 15 Oct 2009 08:53:58 -0400
Subject: [Twisted-Python] Can I post a consultant request here?
In-Reply-To: <EF928A00-AFA0-4529-AFC0-DDF1F26B2CF4@integrateddevcorp.com>
References: <EF928A00-AFA0-4529-AFC0-DDF1F26B2CF4@integrateddevcorp.com>
Message-ID: <1255611238.2243.85.camel@pintsize>

On Thu, 2009-10-15 at 00:01 -0400, Steve Steiner (listsin) wrote:
> Hey!
> 
> 	I apologize in advance if this type of request is not desired/allowed  
> on this list.

Nope, it's fine. You might also want to post to the twisted-web list.

> 	I'm looking for a very short-term mentoring/consulting contract to   
> help me get an Ajax/Comet type of connection working between a web  
> interface and a fairly long-running, server-side process.
> 
> 	I want the web interface to reflect the server-side data as it  
> becomes available.

Have you seen http://orbited.org? Latest version uses Twisted, I think.




From christopher.zorn at gmail.com  Thu Oct 15 07:11:44 2009
From: christopher.zorn at gmail.com (Christopher Zorn)
Date: Thu, 15 Oct 2009 09:11:44 -0400
Subject: [Twisted-Python] Can I post a consultant request here?
In-Reply-To: <EF928A00-AFA0-4529-AFC0-DDF1F26B2CF4@integrateddevcorp.com>
References: <EF928A00-AFA0-4529-AFC0-DDF1F26B2CF4@integrateddevcorp.com>
Message-ID: <149014b90910150611p21747fd1ra668649759e60ebd@mail.gmail.com>

On Thu, Oct 15, 2009 at 12:01 AM, Steve Steiner (listsin) <
listsin at integrateddevcorp.com> wrote:

> Hey!
>
>        I apologize in advance if this type of request is not
> desired/allowed
> on this list.
>
>        I'm looking for a very short-term mentoring/consulting contract to
> help me get an Ajax/Comet type of connection working between a web
> interface and a fairly long-running, server-side process.
>
>        I want the web interface to reflect the server-side data as it
> becomes available.
>
>        I'm sure someone on this list knows exactly how to hook the pieces
> together; I don't.
>
>        It would be much more efficient to have someone who already knows
> help me hook it up instead of spending an unpredictable amount of time
> figuring it out myself.
>
>        I'd also like to have, as a primary product of this project, a
> tutorial showing a real-world application of Twisted to handle a
> modern, real-world use-case with full, open, well documented source
> code.
>
>
Punjab is a BOSH connection manager. Which is a HTTP long polling connection
to an XMPP server.

See : http://code.stanziq.com/punjab

It is used at http://www.chesspark.com and other places.

And of course, it is twisted! :)



>        If you're interested, please contact me off-list at
> ssteinerx at gmail.com.
>
> Thanks,
>
> S
>
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091015/5b1f657f/attachment-0001.html>

From listsin at integrateddevcorp.com  Thu Oct 15 08:04:32 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Thu, 15 Oct 2009 10:04:32 -0400
Subject: [Twisted-Python] Can I post a consultant request here?
In-Reply-To: <149014b90910150611p21747fd1ra668649759e60ebd@mail.gmail.com>
References: <EF928A00-AFA0-4529-AFC0-DDF1F26B2CF4@integrateddevcorp.com>
	<149014b90910150611p21747fd1ra668649759e60ebd@mail.gmail.com>
Message-ID: <5534FAB8-046F-43DC-9895-4C181657F249@integrateddevcorp.com>


On Oct 15, 2009, at 9:11 AM, Christopher Zorn wrote:

>
>
> On Thu, Oct 15, 2009 at 12:01 AM, Steve Steiner (listsin) <listsin at integrateddevcorp.com 
> > wrote:
>        It would be much more efficient to have someone who already  
> knows
> help me hook it up instead of spending an unpredictable amount of time
> figuring it out myself.
>
>        I'd also like to have, as a primary product of this project, a
> tutorial showing a real-world application of Twisted to handle a
> modern, real-world use-case with full, open, well documented source
> code.
>
>
> Punjab is a BOSH connection manager. Which is a HTTP long polling  
> connection to an XMPP server.
>
> See : http://code.stanziq.com/punjab
>
> It is used at http://www.chesspark.com and other places.
>
> And of course, it is twisted! :)

Ok...thanks for that.

Do you know, off the top of your head, how to use it?

The whole idea here is to get off the ground without spending hours  
figuring out a whole new protocol/product.

None of the examples seem to have any actual content in them.

While this may be a fine product and all, this is exactly what I  
*don't* want to do.

I want something I can drop in and someone to help me do it.

Thanks,

S








-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091015/85c3ea6e/attachment.html>

From listsin at integrateddevcorp.com  Thu Oct 15 08:14:26 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Thu, 15 Oct 2009 10:14:26 -0400
Subject: [Twisted-Python] Can I post a consultant request here?
In-Reply-To: <1255611238.2243.85.camel@pintsize>
References: <EF928A00-AFA0-4529-AFC0-DDF1F26B2CF4@integrateddevcorp.com>
	<1255611238.2243.85.camel@pintsize>
Message-ID: <12303E0F-10BA-4D6A-A3B1-3589229D599F@integrateddevcorp.com>


On Oct 15, 2009, at 8:53 AM, Itamar Turner-Trauring (aka Shtull- 
Trauring) wrote:

> On Thu, 2009-10-15 at 00:01 -0400, Steve Steiner (listsin) wrote:
>> Hey!
>>
>> 	I apologize in advance if this type of request is not desired/ 
>> allowed
>> on this list.
>
> Nope, it's fine. You might also want to post to the twisted-web list.
>
>> 	I'm looking for a very short-term mentoring/consulting contract to
>> help me get an Ajax/Comet type of connection working between a web
>> interface and a fairly long-running, server-side process.
>>
>> 	I want the web interface to reflect the server-side data as it
>> becomes available.
>
> Have you seen http://orbited.org? Latest version uses Twisted, I  
> think.

Yes, thanks, I've seen it, but I don't want to figure it out myself.

I want to hire someone who already knows it to make it go.

I've got too many other things to do to stop and learn yet another tool.

S




From james at james.id.au  Thu Oct 15 18:02:12 2009
From: james at james.id.au (James Gregory)
Date: Thu, 15 Oct 2009 17:02:12 -0700
Subject: [Twisted-Python] Replacement for CherryPy
Message-ID: <4AD7B804.6060906@james.id.au>

Hi all,

I'm trying to replace a server that I've written with CherryPy to use 
Twisted. My reasons are that my particular app has the server waiting on 
sockets to third-party services a lot of the time, which is tying up all 
the worker-threads I have allocated for CherryPy => scalability nightmare.

In short, I want to be able to write a class more or less like so:

class C:
     def searchData(self, query, resultCount) :
         # produce a deferred that will eventually return the data to go 
back to the client, d.
         return d

And have it exposed such that fetching

     http://server/api/searchData?query=query+string&resultCount=10

will call that searchData method, passing in the URL's GET parameters as 
the arguments to that method. It'd be awesome if it also worked for 
POSTed data too.

I realise that I can probably build this myself using twisted.web etc, 
but am wondering if someone's already done the legwork here.

Any suggestions?

Thanks in advance.

James.




From mardiros at laposte.net  Fri Oct 16 02:01:11 2009
From: mardiros at laposte.net (mardiros)
Date: Fri, 16 Oct 2009 10:01:11 +0200 (CEST)
Subject: [Twisted-Python] maybeDeferred capability
Message-ID: <27098674.27638.1255680071067.JavaMail.www@wwinf8403>



As I am still a new user of Twisted,
I have decide to use the maybeDeferred capability.

The real aim is to cache sql queries,
but I have written this example from 
the twisted mayneDeferred doc.


I am happy with my code, but, I would like
to share it to have some feed back

Here it is:
---

import types
from datetime import datetime, timedelta

from twisted.internet import defer
from twisted.internet import reactor, task


class asyncmemoize:
def __init__(self, function,pool_time=10,cachelifetime=10):
self.function = function
self._cache = {}
self._cachelifetime = timedelta(0,cachelifetime)
self._cleaner = task.LoopingCall(self.cleanCache)
self._cleaner.start(pool_time,now=False)
self._cleanrun = False


def __call__(self, *args, **kwargs):
key = (tuple(args), frozenset(kwargs.items()))

if key not in self._cache:
f = self.function(*args, **kwargs).addCallback(self.callback,key)
self._cache[key]=[datetime.today(), f]

else:
print "from cache"
return self._cache[key][1]

def callback(self,result,key):
print "Put real value in cache"
self._cache[key]=[datetime.today(), self._cachelifetime, result]
return result

def cleanCache(self):
if not self._cleanrun:
self._cleanrun = True
print 'Clean the cache...'
#log.msg('Clean the persistent cache...', logLevel=logging.DEBUG)
expire = datetime.today()
i = 0
for k,v in self._cache.items():
print v[0], "<", expire, "=>", v[0] > expire 
if v[0] < expire:
i+=1
del self._cache[k]
print '%i items removed' % i
#log.msg('%i items removed' % i, logLevel=logging.DEBUG)
self._cleanrun = False


def saveInCache(result,key):
print "saving to cache"
cache[key] = result
return result

@asyncmemoize
def asynchronousIsValidUser(user):
print "Loading is authenticating from async"
d = defer.Deferred()
reactor.callLater(2, d.callback, user in ["Alice", "Angus", "Agnes"])
return d

def synchronousIsValidUser(user):
'''
Return true if user is a valid user, false otherwise
'''
return user in ["Alice", "Angus", "Agnes"]


def printResult(result,user):
if result:
print "User", user ,"is authenticated"
else:
print "User", user ,"is not authenticated"

def authenticateUser(isValidUser, user):
print "Authenticating user ", user
d = defer.maybeDeferred(isValidUser, user)
return d.addCallback(printResult,user)


authenticateUser(asynchronousIsValidUser,"Alice")

reactor.callLater(3,authenticateUser,asynchronousIsValidUser,"Alice")
reactor.callLater(5,authenticateUser,asynchronousIsValidUser,"Alice")

reactor.callLater(15,authenticateUser,asynchronousIsValidUser,"Alice")


reactor.callLater(30,authenticateUser,asynchronousIsValidUser,"Alice")

reactor.run()


---------------------------------------------------------------------------- 
Laposte.net fête ses 10 ans ! 

Gratuite, garantie à vie et déjà utilisée par des millions d'internautes... 
vous aussi, pour votre adresse e-mail, choisissez laposte.net. 

Laposte.net, bien + qu'une messagerie 
----------------------------------------------------------------------------




From rroberts at adobe.com  Fri Oct 16 22:15:03 2009
From: rroberts at adobe.com (Read Roberts)
Date: Fri, 16 Oct 2009 21:15:03 -0700
Subject: [Twisted-Python] Newbie question: can't get getProcessOutput to run
 from inside a listenTCP service call-back
Message-ID: <C6FE92D7.592A%rroberts@adobe.com>

I have a Python server using twisted which responds to pyAMF calls from
Flex/Air applications (following Bruce Eckels 5/1/2008 article "Concurrency
with Python, Twisted, and Flex"). The service is basically as follows below.
When the client calls a service API, the API needs to make a OS shell call.
I see that if I call reactor.stop() after the  getProcessOutput call (such
as within the doLog and doError functions), the call happens and I see the
output. How can can I retrieve the output without calling reactor.stop()? In
the example below, the AIR app calls the callback helloWorldTest(), and the
deferred.addCallback function is never called.

import os
from twisted.spread import pb
from  twisted.internet.utils import getProcessOutput
from twisted.internet import reactor

class FlexInterface(pb.Root):
    def __init__(self):
        self.result e

    def doLog(self, result):
        self.result = "%s" % (result)
        return result
        
    def doError(self, failure):
        self.result = "%s" % ( failure)
        return failure

    def helloWorldTest(self):
        deferred = getProcessOutput("echo", ["Hello World"], os.environ)
        deferred.addErrback(self.doError)
        deferred.addCallback(self.doLog)
        while (self.result == None)
            print "doLog still hasn't been called"
        return self.result

    def terminate(self, discardPostAag):
        reactor.callLater(1, reactor.stop)
        return "Terminating CubeGlyphServices"

def run():
    # Place the namespace mapping into a TwistedGateway:
    fi = FlexInterface()
    gateway = TwistedGateway({ "flexAppServer": fi })

    # Publish the PyAMF gateway at the root URL:
    root = resource.Resource()
    root.putChild("", gateway)

    # Tell the twisted reactor to listen:
    reactor.listenTCP(8050, server.Site(root))
    print "Local python server listening on localhost port 8050"
    reactor.run()


if __name__=='__main__':
    run()

I do know that If I used Python 2.6 and later, a twisted bug is fixed such
that I could use subprocess.Popen, and that the next release of AIR will
allow direct execv calls. However, for performance issues  I still want to
call one Python process running a server, and I have to work within a Python
2.5 environment.

Thanks for any advice,
 Read Roberts






From nick at boxdesign.co.uk  Sat Oct 17 02:53:12 2009
From: nick at boxdesign.co.uk (Nick Joyce)
Date: Sat, 17 Oct 2009 09:53:12 +0100
Subject: [Twisted-Python] Newbie question: can't get getProcessOutput to
	run from inside a listenTCP service call-back
In-Reply-To: <C6FE92D7.592A%rroberts@adobe.com>
References: <C6FE92D7.592A%rroberts@adobe.com>
Message-ID: <1EF4C760-66C8-49C4-89C2-1BD790C92374@boxdesign.co.uk>

On 17 Oct 2009, at 05:15, Read Roberts wrote:

> I have a Python server using twisted which responds to pyAMF calls  
> from
> Flex/Air applications (following Bruce Eckels 5/1/2008 article  
> "Concurrency
> with Python, Twisted, and Flex"). The service is basically as  
> follows below.
> When the client calls a service API, the API needs to make a OS  
> shell call.
> I see that if I call reactor.stop() after the  getProcessOutput call  
> (such
> as within the doLog and doError functions), the call happens and I  
> see the
> output. How can can I retrieve the output without calling  
> reactor.stop()? In
> the example below, the AIR app calls the callback helloWorldTest(),  
> and the
> deferred.addCallback function is never called.
>
> import os
> from twisted.spread import pb
> from  twisted.internet.utils import getProcessOutput
> from twisted.internet import reactor
>
> class FlexInterface(pb.Root):
>    def __init__(self):
>        self.result e
>
>    def doLog(self, result):
>        self.result = "%s" % (result)
>        return result
>
>    def doError(self, failure):
>        self.result = "%s" % ( failure)
>        return failure
>
>    def helloWorldTest(self):
>        deferred = getProcessOutput("echo", ["Hello World"],  
> os.environ)
>        deferred.addErrback(self.doError)
>        deferred.addCallback(self.doLog)
>        while (self.result == None)
>            print "doLog still hasn't been called"
>        return self.result


The while loop will block the event loop, preventing the deferred from  
ever being called. PyAMF will accept a deferred as a return value for  
the service function and will not return a response until the  
deferred's callback is fired.

So, you could re-write the method like:

     def helloWorldTest(self):
         deferred = getProcessOutput("echo", ["Hello World"],  
os.environ)

         deferred.addErrback(self.doError)
         deferred.addCallback(self.doLog)

         return deferred

If the deferred's callback is called then the return value of doLog  
will be used as the response value. If the errback is called, the  
return value of doError will be used as the response, in this case a  
Failure instance. PyAMF converts Failure instances to remoting/ 
messaging error objects automagically, so the faultHandler on the  
flash/air side will be called.

hth,

Nick




From rroberts at adobe.com  Sat Oct 17 11:03:23 2009
From: rroberts at adobe.com (Read Roberts)
Date: Sat, 17 Oct 2009 10:03:23 -0700
Subject: [Twisted-Python] Newbie question: can't get getProcessOutput to
 run from inside a listenTCP service call-back
In-Reply-To: <1EF4C760-66C8-49C4-89C2-1BD790C92374@boxdesign.co.uk>
Message-ID: <C6FF46EB.5935%rroberts@adobe.com>

Hi Nick;

Thanks for the answer. However, If I take the while loop out,  "helloWorldTest()" returns immediately, and the Flex app gets the initial value of self.result. The defer.callback function doLog never gets called.  If I call  the "terminate()" from the Flex app, which in turn calls reactor.sop()  the doLog  function finally then gets called.   I am looking for what I need to do to allow getProcessOutput to run such that the defer.callback function doLog actually gets called.

I have figured out that if instead of calling getProcessOutput() directly within the helloWorldTest() method, that I can queue it for running  after helloWorldTest() as returned, as in:
    reactor.callLater(1, self. helloWorldTest2)
 and that the defer.callback function doLog does then get called.

This means that the defer.callback function doLog will get  called after the helloWorldTest()  has returned. I see can call helloWorldTest() , and then keep querying the python service from the Flex app until the  defer.callback function doLog  has run.

I still don't understand why calling getProcessOutput() directly within the helloWorldTest() method doesn't work. Any explanation would be welcome.

    Thanks,  Read Roberts

On 10/17/09 1:53 AM, "Nick Joyce" <nick at boxdesign.co.uk> wrote:

On 17 Oct 2009, at 05:15, Read Roberts wrote:

> I have a Python server using twisted which responds to pyAMF calls
> from
> Flex/Air applications (following Bruce Eckels 5/1/2008 article
> "Concurrency
> with Python, Twisted, and Flex"). The service is basically as
> follows below.
> When the client calls a service API, the API needs to make a OS
> shell call.
> I see that if I call reactor.stop() after the  getProcessOutput call
> (such
> as within the doLog and doError functions), the call happens and I
> see the
> output. How can can I retrieve the output without calling
> reactor.stop()? In
> the example below, the AIR app calls the callback helloWorldTest(),
> and the
> deferred.addCallback function is never called.
>
> import os
> from twisted.spread import pb
> from  twisted.internet.utils import getProcessOutput
> from twisted.internet import reactor
>
> class FlexInterface(pb.Root):
>    def __init__(self):
>        self.result e
>
>    def doLog(self, result):
>        self.result = "%s" % (result)
>        return result
>
>    def doError(self, failure):
>        self.result = "%s" % ( failure)
>        return failure
>
>    def helloWorldTest(self):
>        deferred = getProcessOutput("echo", ["Hello World"],
> os.environ)
>        deferred.addErrback(self.doError)
>        deferred.addCallback(self.doLog)
>        while (self.result == None)
>            print "doLog still hasn't been called"
>        return self.result


The while loop will block the event loop, preventing the deferred from
ever being called. PyAMF will accept a deferred as a return value for
the service function and will not return a response until the
deferred's callback is fired.

So, you could re-write the method like:

     def helloWorldTest(self):
         deferred = getProcessOutput("echo", ["Hello World"],
os.environ)

         deferred.addErrback(self.doError)
         deferred.addCallback(self.doLog)

         return deferred

If the deferred's callback is called then the return value of doLog
will be used as the response value. If the errback is called, the
return value of doError will be used as the response, in this case a
Failure instance. PyAMF converts Failure instances to remoting/
messaging error objects automagically, so the faultHandler on the
flash/air side will be called.

hth,

Nick


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091017/d90d5d38/attachment-0001.html>

From exarkun at twistedmatrix.com  Sat Oct 17 22:05:19 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 18 Oct 2009 04:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1255838719.88.171687412@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091018/9f8a0bfd/attachment.html>

From nathan.stocks at gmail.com  Sun Oct 18 20:29:09 2009
From: nathan.stocks at gmail.com (Nathan)
Date: Sun, 18 Oct 2009 20:29:09 -0600
Subject: [Twisted-Python] Conferences / training?
Message-ID: <96c9d6a80910181929v8ed7cc9i83268485736753e4@mail.gmail.com>

Does anyone do any "formal" Twisted training?

I've got several employees that are nearing the point where they need
to learn twisted (and I wouldn't mind getting some formal training
myself), and so I'm exploring the idea of either flying someone out to
our offices to train or having us all go out to some conference
(OSCON?) where some Twisted training goes on.  I'm not in a rush -- I
could wait up to a year if I had to, but I thought I ought to start
putting feelers out.

We're located in Utah, by the way.

~ Nathan



From konrads at smelkovs.com  Mon Oct 19 11:13:42 2009
From: konrads at smelkovs.com (Konrads Smelkovs)
Date: Mon, 19 Oct 2009 20:13:42 +0300
Subject: [Twisted-Python] Can I post a consultant request here?
In-Reply-To: <12303E0F-10BA-4D6A-A3B1-3589229D599F@integrateddevcorp.com>
References: <EF928A00-AFA0-4529-AFC0-DDF1F26B2CF4@integrateddevcorp.com>
	<1255611238.2243.85.camel@pintsize>
	<12303E0F-10BA-4D6A-A3B1-3589229D599F@integrateddevcorp.com>
Message-ID: <d79700b90910191013y25faa96bt68d78d10345194f2@mail.gmail.com>

hi,
i wrote a project that got cancelled that does almost what you need:
screen scraping controller with some scrapers. I wold gladly adapt
this for your needs. This system takes json data and searches on other
sites for information with scrapers. Scrapers can take a while to
return data. Once done;; user can poll to fetch data. System is at
http://rogue.smelkovs.com:8080/ with system docs at
http://rogue.smelkovs.com:8080/static/manual.doc
code shows how to use storm orm as well. This platform may be of value
to you to kick start your project.
i can do general twisted consultancy as well.
Let me know if I can help.

2009/10/15, Steve Steiner (listsin) <listsin at integrateddevcorp.com>:
>
> On Oct 15, 2009, at 8:53 AM, Itamar Turner-Trauring (aka Shtull-
> Trauring) wrote:
>
>> On Thu, 2009-10-15 at 00:01 -0400, Steve Steiner (listsin) wrote:
>>> Hey!
>>>
>>> 	I apologize in advance if this type of request is not desired/
>>> allowed
>>> on this list.
>>
>> Nope, it's fine. You might also want to post to the twisted-web list.
>>
>>> 	I'm looking for a very short-term mentoring/consulting contract to
>>> help me get an Ajax/Comet type of connection working between a web
>>> interface and a fairly long-running, server-side process.
>>>
>>> 	I want the web interface to reflect the server-side data as it
>>> becomes available.
>>
>> Have you seen http://orbited.org? Latest version uses Twisted, I
>> think.
>
> Yes, thanks, I've seen it, but I don't want to figure it out myself.
>
> I want to hire someone who already knows it to make it go.
>
> I've got too many other things to do to stop and learn yet another tool.
>
> S
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

-- 
Nosūtīts no manas mobilās ierīces

--
Konrads Smelkovs
Applied IT sorcery.



From konrads at smelkovs.com  Mon Oct 19 11:25:40 2009
From: konrads at smelkovs.com (Konrads Smelkovs)
Date: Mon, 19 Oct 2009 20:25:40 +0300
Subject: [Twisted-Python] Twisted screen scraper manager software for sale
Message-ID: <d79700b90910191025q51311cddi948ab92375c28f98@mail.gmail.com>

 Hello and apologies for offtopic...
I wrote a piece of software for a cancelled project and am looking to sell it.
It is a screen scraper runner and manager web backend. It was built to
extract data from form driven web sites (specific scrapers written are
for swedish home insurance, but is very generic). User submits a json
request with some sort of sructured request, e.g. home size, desired
payout etc. System then runs appropriate scrapers and once complete,
user can poll for data (can be made to push with comet if one so
wishes). It features logging nicietied, database stored scrapers for
quicker code updates and some more bits.
You can check the software at http://rogue.smelkovs.com:8080 and
manual at http://rogue.smelkovs.com:8080/static/manual.doc
I would be happy to sell it (with some modifications if necessary) for 2400 usd.

kick-start your "get best price site" today!

-- 
Nosūtīts no manas mobilās ierīces

--
Konrads Smelkovs
Applied IT sorcery.



From jesper at taxboel.dk  Tue Oct 20 13:50:33 2009
From: jesper at taxboel.dk (=?ISO-8859-1?Q?Jesper_Taxb=F8l?=)
Date: Tue, 20 Oct 2009 21:50:33 +0200
Subject: [Twisted-Python] Handeling unresolved DNS queries?
Message-ID: <e78558910910201250n270d329di7678454ad9d231b9@mail.gmail.com>

Hi Guys,

Im playing with a dns-cache script, that overrides DNS requests for certain
IP addresses.

I would like to add functionality, so unresolved requests are sent to a
spicific IP. How do I go about doing that?

Is there a negative answer in the (udp) DNS protocol or am I forced to use a
timeout.

Kind regards

Tax


import sys, os
from socket import *
from twisted.internet.protocol import Factory, Protocol
from twisted.internet import reactor
from twisted.names import dns, client, server
import time

LOGFILE = 'dnsfilter.log'

def allowip(ip):
    return True


class Log:
    """file like for writes with auto flush after each write
    to ensure that everything is logged, even during an
    unexpected exit."""
    def __init__(self, f):
        self.f = f
    def write(self, s):
        self.f.write(s)
        self.f.flush()

if __name__ == "__main__":
    dns_servers = []
    f = open('/etc/resolv.conf', "r")
    while 1:
        line = f.readline()
        if not line:
            break
        if line[0]!='#':
            s, ns = line.strip().split(' ')
            if s == 'nameserver':
                dns_servers.append((ns,53))
    #redirect outputs to a logfile
    sys.stdout = sys.stderr = Log(open(LOGFILE, 'a+'))

    print 'dnsfilter starting'
    print dns_servers

    #address that traffic is redirected to
    redirect = '10.0.64.1'

    greenlist=  ['63.4.241.16', \
                 '216.13.188.67']


    class DNSDatagramProtocolTest(dns.DNSDatagramProtocol):
        def writeMessage(self, message, address):
            log = '%s DNS request from: %s\n' % (time.strftime("%m/%d/%y -
%H:%M:%S", time.localtime()) ,address[0])
            for i in range(len(message.answers)):
                x = message.answers[i]
                print x.type
                if x.type==1 and x.payload:
                    if not allowip(address[0]):
                        to_adr = inet_ntoa(x.payload.address)
                        if to_adr in greenlist:
                            log += ' allowed to %s\n'%(to_adr)
                        else:
                            log += ' not allowed so %s becomes
%s\n'%(to_adr, redirect)
                            x.payload.address = inet_aton(redirect)
                    else:
                        log += ' to %s\n'%(inet_ntoa(x.payload.address))
            print log
            self.transport.write(message.toStr(), address)

    resolver = client.Resolver(servers=dns_servers)
    f = server.DNSServerFactory(clients=[resolver])
    p = DNSDatagramProtocolTest(f)
    reactor.listenUDP(53, p)
    reactor.run()
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091020/9e55ace4/attachment-0001.html>

From general at vultaire.net  Tue Oct 20 23:59:45 2009
From: general at vultaire.net (general at vultaire.net)
Date: Tue, 20 Oct 2009 22:59:45 -0700
Subject: [Twisted-Python] Help with porting .tac-based custom logging to
	twisted plugin architecture
Message-ID: <20091020225945.7f11f3b431f165ce659dcf13aa5d7085.ad86cc7257.wbe@email.secureserver.net>

I have an app I'm working on, and until this point it's been done
utilizing a .tac file.  Recent changes in requirements are encouraging a
change to use the Twisted plugin system instead.  This seems clear for
the most part, but I'm unsure about the logging.

Specifically, in the .tac version, I'm using this:

    lf = logfile.DailyLogFile("my.log", ".")
    logname = "testlog"
    configure_python_logging(lf, logname)
    application.setComponent(log.ILogObserver,
                             log.PythonLoggingObserver(logname).emit)

However, in the plugin version, I'm not sure how to proceed since I
don't have an application object.  I can't seem to find any
documentation for configuring logging with plugins, either.  Is there a
way to make this work?

Just in case, I've pasted a complete working example of the .tac code
below, along with the partially complete plugin module.

- Paul Goins

####################################

###########################
# log_example/logtest.tac #
###########################
# -*- coding: utf-8 -*-

from twisted.application import service
from twisted.internet import reactor
from twisted.web import server as webserver

from logtest import log

application = service.Application("myapp")
log.init_logger_8dot2(application)

service = log.MyService()
service.setServiceParent(application)

###################################
# log_example/logtest/__init__.py #
###################################

##############################
# log_example/logtest/log.py #
##############################

# -*- coding: utf-8 -*-

from twisted.application.service import Service
from twisted.internet import reactor
from twisted.python import log, logfile
import logging

def init_logger_8dot2(application):
    lf = logfile.DailyLogFile("my.log", ".")
    logname = "testlog"
    configure_python_logging(lf, logname)
    application.setComponent(log.ILogObserver,
                             log.PythonLoggingObserver(logname).emit)

def configure_python_logging(file_obj, log_name):
    logging.basicConfig(stream=file_obj,
                        format="[%(asctime)s] %(levelname)s:
%(message)s",
                        datefmt="%Y-%m-%d %H:%M:%S")
    logger = logging.getLogger(log_name)
    logger.setLevel(logging.INFO)


class MyService(Service):

    def startService(self):
        reactor.callLater(2, reactor.stop)

#############################################
# log_example/twisted/plugins/log_plugin.py #
#############################################

# -*- coding: utf-8 -*-

from zope.interface import implements
from twisted.python import usage
from twisted.plugin import IPlugin
from twisted.application.service import IServiceMaker

from logtest.log import MyService

class Options(usage.Options):
    optParamaters = [[]]

class MyServiceMaker(object):
    implements(IServiceMaker, IPlugin)
    tapname = "logtest"
    description = "Twisted plugin log tester"
    options = Options

    def makeService(self, options):
        # set up servers and stuff here
        return MyService()

serviceMaker = MyServiceMaker()





From general at vultaire.net  Wed Oct 21 00:12:05 2009
From: general at vultaire.net (general at vultaire.net)
Date: Tue, 20 Oct 2009 23:12:05 -0700
Subject: [Twisted-Python] Help with porting .tac-based custom logging to
 twisted plugin architecture
Message-ID: <20091020231205.7f11f3b431f165ce659dcf13aa5d7085.58e6e0c5b1.wbe@email.secureserver.net>

Apologies on the killed indentation in the source.  Didn't know my web
mail client did that.  Will post via a normal client next time.  - Paul





From glyph at twistedmatrix.com  Wed Oct 21 02:12:59 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 21 Oct 2009 04:12:59 -0400
Subject: [Twisted-Python] Conferences / training?
In-Reply-To: <96c9d6a80910181929v8ed7cc9i83268485736753e4@mail.gmail.com>
References: <96c9d6a80910181929v8ed7cc9i83268485736753e4@mail.gmail.com>
Message-ID: <C76E5692-88A0-417D-A657-8DE2ABAC96A3@twistedmatrix.com>

On Oct 18, 2009, at 10:29 PM, Nathan wrote:

> Does anyone do any "formal" Twisted training?

Steve Holden does excellent Python training and you might be able to  
get him to prepare some Twisted materials, especially with your  
lengthy time-horizon.  His "Teach Me Twisted" session at PyCon a few  
years ago was... epic ;).

More information here: http://holdenweb.com/

Good luck!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091021/28f815e1/attachment.html>

From fernandor at sescam.jccm.es  Wed Oct 21 03:45:55 2009
From: fernandor at sescam.jccm.es (Fernando Ruza Rodriguez)
Date: Wed, 21 Oct 2009 11:45:55 +0200
Subject: [Twisted-Python] CalendarServer
In-Reply-To: <4AD4D4DE.9000501@laposte.net>
References: <1255431505.1206.10.camel@hpcinf18.hguv.local>
	<4AD4D4DE.9000501@laposte.net>
Message-ID: <1256118355.9415.14.camel@hpcinf18.hguv.local>

Thank you very much, it was that. I almost get crazy.

Regards,

Fernando.


El mar, 13-10-2009 a las 21:28 +0200, mardiros escribió:
> Fernando Ruza Rodriguez a écrit :
> > ~$ svn co svn://svn.twistedmatrix.com/svn/Twisted/trunk Twisted
> > svn: Cannot be possible to connect to 'svn.twistedmatrix.com': time
> >
> > Thanks.
> >
> > Fernando.
> >
> >   
> I have the same problem at my office,
> svn port is closed by the firewall ( Port 3690 )
> 
> http://svnbook.red-bean.com/en/1.0/ch06s03.html
> 
> mardiros
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From lvh at laurensvh.be  Wed Oct 21 04:40:53 2009
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Wed, 21 Oct 2009 12:40:53 +0200
Subject: [Twisted-Python] Conferences / training?
In-Reply-To: <C76E5692-88A0-417D-A657-8DE2ABAC96A3@twistedmatrix.com>
References: <96c9d6a80910181929v8ed7cc9i83268485736753e4@mail.gmail.com>
	<C76E5692-88A0-417D-A657-8DE2ABAC96A3@twistedmatrix.com>
Message-ID: <cedc0c090910210340p6a999bc1t144fbbafd648f9dd@mail.gmail.com>

On a related note, I know that a bunch of people in my university are
interested in informal Python and perhaps Twisted introductions, and a
few people in charge have told me that it wouldn't really be a problem
to get some infrastructure assigned for the occasion (yes, the hoops
they're willing to jump through to get undergrads to do stuff is
amazing).

Since the most commonly heard complaint about Twisted is that the
initial barrier is too high and the introductory documentation is
insufficient (as much as I don't agree with that, if other people feel
that's the case, it's probably our job to prove them wro^H^H^H^H^Hfix
it), it would probably be a good idea for that sort of material to be
publicly available.

If no free materials (I'm thinking mostly about presentations, there's
plenty of plain old documents already around in the form of Twisted's
own docs and blog posts) exist and I have to make them myself, are
there any preferences in terms of format and location?

Normally I'd probably end up using a TeX-based slide producing thing
and a launchpad/github/whatever repo, but I'm just as happy to use
Google Docs -- that might make it easier to collaborate. I've got
Google Wave access, but somehow I don't think that'll be a viable
platform just yet due to huge lack of people having access.

Maybe I ought to talk to Steve Holden about it -- but since he makes
money giving those presentation, I can understand that he wouldn't be
very interested in spending a lot of time producing free material ;-)


thanks for listening
Laurens


On Wed, Oct 21, 2009 at 10:12 AM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> On Oct 18, 2009, at 10:29 PM, Nathan wrote:
>
> Does anyone do any "formal" Twisted training?
>
> Steve Holden does excellent Python training and you might be able to get him
> to prepare some Twisted materials, especially with your lengthy
> time-horizon.  His "Teach Me Twisted" session at PyCon a few years ago
> was... epic ;).
> More information here: http://holdenweb.com/
> Good luck!
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From florent.chuffart at gmail.com  Wed Oct 21 06:56:34 2009
From: florent.chuffart at gmail.com (Florent Chuffart)
Date: Wed, 21 Oct 2009 14:56:34 +0200
Subject: [Twisted-Python] NAT / firewall facilities
Message-ID: <FCF5D28B-DA9D-4C97-9BB3-F8AABBE22DE0@gmail.com>

Hi people,

I'm evaluating twisted framework according to my needs and I want to  
know if twisted provide some NAT / firewall facilities allowing  
automatic routed communication or reverse connection establishment ?

Regards,

--
Florent Chuffart
florent.chuffart at gmail.com







From glyph at twistedmatrix.com  Wed Oct 21 10:19:52 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 21 Oct 2009 12:19:52 -0400
Subject: [Twisted-Python] NAT / firewall facilities
In-Reply-To: <FCF5D28B-DA9D-4C97-9BB3-F8AABBE22DE0@gmail.com>
References: <FCF5D28B-DA9D-4C97-9BB3-F8AABBE22DE0@gmail.com>
Message-ID: <CABE4A17-2021-47E1-B32F-63BAE2C72F34@twistedmatrix.com>

On Oct 21, 2009, at 8:56 AM, Florent Chuffart wrote:

> I'm evaluating twisted framework according to my needs and I want to
> know if twisted provide some NAT / firewall facilities allowing
> automatic routed communication or reverse connection establishment ?

Not directly, but you can find a library which does that for Twisted  
at http://divmod.org/trac/wiki/DivmodVertex




From glyph at twistedmatrix.com  Wed Oct 21 10:22:59 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 21 Oct 2009 12:22:59 -0400
Subject: [Twisted-Python] Conferences / training?
In-Reply-To: <cedc0c090910210340p6a999bc1t144fbbafd648f9dd@mail.gmail.com>
References: <96c9d6a80910181929v8ed7cc9i83268485736753e4@mail.gmail.com>
	<C76E5692-88A0-417D-A657-8DE2ABAC96A3@twistedmatrix.com>
	<cedc0c090910210340p6a999bc1t144fbbafd648f9dd@mail.gmail.com>
Message-ID: <A1D2A83D-DD34-4C3D-A480-84CA9F060164@twistedmatrix.com>


On Oct 21, 2009, at 6:40 AM, Laurens Van Houtven wrote:

> Maybe I ought to talk to Steve Holden about it -- but since he makes
> money giving those presentation, I can understand that he wouldn't be
> very interested in spending a lot of time producing free material ;-)

Steve is also a big supporter of open source, and has done lots of  
work for free for PyCon, so it's worth talking to him anyway.  More  
worth it if you could actually pay him to do it, of course ;-).




From sorin7486 at gmail.com  Wed Oct 21 11:00:37 2009
From: sorin7486 at gmail.com (Sorin Silaghi)
Date: Wed, 21 Oct 2009 20:00:37 +0300
Subject: [Twisted-Python] porting to 3.0
Message-ID: <751facc70910211000g50a681ay94f08632049dcce6@mail.gmail.com>

Hello,


       I found some older mails in the archive about porting and I was
wondering if there have been any changes since then. Is anybody
actively working on it ? Do the recomandations you guys made back then
still stand ?

Here is the original mail that I mentioned:
http://twistedmatrix.com/pipermail/twisted-python/2009-January/019096.html


Thank you,
                    Sorin.



From natester at gmail.com  Wed Oct 21 12:23:30 2009
From: natester at gmail.com (Nathaniel Haggard)
Date: Wed, 21 Oct 2009 12:23:30 -0600
Subject: [Twisted-Python] testing a unit that spawnsProcess
Message-ID: <4adac7a30910211123w2f25e5a5n2690345b88b1f420@mail.gmail.com>

What is a good way to unit test this amp responder which will call a
process?  Other things it does are covered with other tests thanks
to the tests I copied from lp:game.  That should be a pretty awesome
game or at least it will work.

Should the test actually spawn a process or only pretend to?
test_process already tests spawnProcess after all.


   def test_StartProcess(self):
       """
       When L{StartProcess} is issued client starts a process and
returns a status code
       """
       responder = self.controller.lookupFunction(StartProcess.commandName)
       d = responder({
               'identifier': self.identifier,
               'cmd':'/bin/ls',
               'args':''
               })

       def gotStartProcess(a):
           # assert something about the process
                                                       <---- what goes here?
       d.addCallback(gotStartProcess)
       return d



From vitaly at synapticvision.com  Wed Oct 21 14:12:22 2009
From: vitaly at synapticvision.com (vitaly at synapticvision.com)
Date: Wed, 21 Oct 2009 16:12:22 -0400
Subject: [Twisted-Python] How to chain deferred calls
Message-ID: <20091021161222.11812v7szd1uhfok@216.129.205.5>

hi,
how can I chain in defer methods that could raise exception while  
showing the exception that coming from method? I mean, if I'll do:
return (
   adc1().abc2().abc3().addErrback("Common2AllException")
)
than "Common2AllException" will be raised if abc1() raise Exception,  
but I'd like to see the adc1() own exception (and not  
"Common2AllException") ?



t = Test()
def abc1(self):
   if t.test() is None:
     raise Exception("Error11")
   else:
     return 1

def abc2(self):
   if t.test() is None:
     raise Exception("Error12")
   else:
     return 1

def abc3(self):
   if t.test() is None:
     raise Exception("Error13")
   else:
     return 1




Appreciate the help.




From vpogrebi at verizon.net  Wed Oct 21 14:53:31 2009
From: vpogrebi at verizon.net (Valeriy Pogrebitskiy)
Date: Wed, 21 Oct 2009 16:53:31 -0400
Subject: [Twisted-Python] How to chain deferred calls
In-Reply-To: <20091021161222.11812v7szd1uhfok@216.129.205.5>
References: <20091021161222.11812v7szd1uhfok@216.129.205.5>
Message-ID: <10DDB81F-BCF2-48FA-AD9D-C9C4E8CF1C60@verizon.net>

Add another .addErrback() directly after adc1() - to handle that  
specific exception...


Kind regards,

Valeriy Pogrebitskiy
vpogrebi at verizon.net




On Oct 21, 2009, at 4:12 PM, vitaly at synapticvision.com wrote:

> hi,
> how can I chain in defer methods that could raise exception while
> showing the exception that coming from method? I mean, if I'll do:
> return (
>   adc1().abc2().abc3().addErrback("Common2AllException")
> )
> than "Common2AllException" will be raised if abc1() raise Exception,
> but I'd like to see the adc1() own exception (and not
> "Common2AllException") ?
>
>
>
> t = Test()
> def abc1(self):
>   if t.test() is None:
>     raise Exception("Error11")
>   else:
>     return 1
>
> def abc2(self):
>   if t.test() is None:
>     raise Exception("Error12")
>   else:
>     return 1
>
> def abc3(self):
>   if t.test() is None:
>     raise Exception("Error13")
>   else:
>     return 1
>
>
>
>
> Appreciate the help.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From deldotdr at gmail.com  Wed Oct 21 16:14:26 2009
From: deldotdr at gmail.com (Dorian Raymer)
Date: Wed, 21 Oct 2009 15:14:26 -0700
Subject: [Twisted-Python] txRedis - Redis Client for Twisted
Message-ID: <ea3c455d0910211514recce66n17cebc1fb30112f9@mail.gmail.com>

Hello,
I have created a Twisted version of redis.py.
I needed an asynchronous version of the python client for use in Twisted
based projects, and I have not seen any other efforts on this front. Please
let me know if I completely overlooked an existing Twisted+Redis Client
project.

I have translated all of the doc tests in redis.py to Trial unit tests, and
they are all passing.

Version 0.1.1 is available on pypi<http://pypi.python.org/pypi/txredis/0.1.1>,
and here is the source code
<http://ooici.net:82/?p=txredis.git;a=summary>git repository.

To the Twisted gurus, feedback on the implementation is very welcome. I
would like to make this is a solid client library.

Thank you,
Dorian Raymer
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091021/a52d1a67/attachment.html>

From terry at jon.es  Wed Oct 21 16:32:36 2009
From: terry at jon.es (Terry Jones)
Date: Thu, 22 Oct 2009 00:32:36 +0200
Subject: [Twisted-Python] txRedis - Redis Client for Twisted
In-Reply-To: Your message at 15:14:26 on Wednesday, 21 October 2009
References: <ea3c455d0910211514recce66n17cebc1fb30112f9@mail.gmail.com>
Message-ID: <19167.35844.444785.191303@jon.es>

Hi Dorian

> I have created a Twisted version of redis.py.

Cool!  I'll certainly take a look. Thanks for releasing it.

BTW, it would be good to get this into https://launchpad.net/tx, presumably
by mirroring to Launchpad.

Terry



From exarkun at twistedmatrix.com  Thu Oct 22 07:55:16 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 22 Oct 2009 13:55:16 -0000
Subject: [Twisted-Python] Handeling unresolved DNS queries?
In-Reply-To: <e78558910910201250n270d329di7678454ad9d231b9@mail.gmail.com>
References: <e78558910910201250n270d329di7678454ad9d231b9@mail.gmail.com>
Message-ID: <20091022135516.11571.1780136361.divmod.xquotient.1414@localhost.localdomain>

On 20 Oct, 07:50 pm, jesper at taxboel.dk wrote:
>Hi Guys,
>
>Im playing with a dns-cache script, that overrides DNS requests for 
>certain
>IP addresses.
>
>I would like to add functionality, so unresolved requests are sent to a
>spicific IP. How do I go about doing that?
>
>Is there a negative answer in the (udp) DNS protocol or am I forced to 
>use a
>timeout.

You've overridden writeMessage to inspect messages for answers and 
rewrite them if necessary.  You can recognize error responses by looking 
at the rCode attribute of the message object itself.  This will take on 
a value like dns.OK, dns.EFORMAT, dns.ESERVER, dns.ENAME, dns.ENOTIMP, 
or dns.EREFUSED.  You can handle these errors by making a request of 
another domain, although since writeMessage is a very low-level API in 
the process and not really intended to be overridden, I'm not sure how 
you'll insert the responses you get from these new requests into the 
original request/response process.

Jean-Paul



From exarkun at twistedmatrix.com  Thu Oct 22 07:59:23 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 22 Oct 2009 13:59:23 -0000
Subject: [Twisted-Python] Help with porting .tac-based custom logging
	to	twisted plugin architecture
In-Reply-To: <20091020225945.7f11f3b431f165ce659dcf13aa5d7085.ad86cc7257.wbe@email.secureserver.net>
References: <20091020225945.7f11f3b431f165ce659dcf13aa5d7085.ad86cc7257.wbe@email.secureserver.net>
Message-ID: <20091022135923.11571.191291189.divmod.xquotient.1421@localhost.localdomain>

On 21 Oct, 05:59 am, general at vultaire.net wrote:
>I have an app I'm working on, and until this point it's been done
>utilizing a .tac file.  Recent changes in requirements are encouraging 
>a
>change to use the Twisted plugin system instead.  This seems clear for
>the most part, but I'm unsure about the logging.
>
>Specifically, in the .tac version, I'm using this:
>
>    lf = logfile.DailyLogFile("my.log", ".")
>    logname = "testlog"
>    configure_python_logging(lf, logname)
>    application.setComponent(log.ILogObserver,
>                             log.PythonLoggingObserver(logname).emit)
>
>However, in the plugin version, I'm not sure how to proceed since I
>don't have an application object.  I can't seem to find any
>documentation for configuring logging with plugins, either.  Is there a
>way to make this work?

This is a limitation of the implementation of twistd's plugin support. 
tac files can define custom log observers.  Plugins for twistd cannot. 
Ticket #638 was originally for all of the custom logging feature, but it 
was eventually split up and the tac parts moved to a separate ticket, 
#3534, which is now resolved.  #638 is still open, however.  #3538 is 
another related ticket which proposes an alternate solution to the 
problem, allowing tacs and plugins to be used in combination.

Jean-Paul



From exarkun at twistedmatrix.com  Thu Oct 22 08:07:59 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 22 Oct 2009 14:07:59 -0000
Subject: [Twisted-Python] porting to 3.0
In-Reply-To: <751facc70910211000g50a681ay94f08632049dcce6@mail.gmail.com>
References: <751facc70910211000g50a681ay94f08632049dcce6@mail.gmail.com>
Message-ID: <20091022140759.11571.1776752212.divmod.xquotient.1423@localhost.localdomain>

On 21 Oct, 05:00 pm, sorin7486 at gmail.com wrote:
>Hello,
>
>
>       I found some older mails in the archive about porting and I was
>wondering if there have been any changes since then. Is anybody
>actively working on it ? Do the recomandations you guys made back then
>still stand ?
>
>Here is the original mail that I mentioned:
>http://twistedmatrix.com/pipermail/twisted- 
>python/2009-January/019096.html

Those recommendations still stand.  At the moment, there happens to be a 
related ticket up for review, 
<http://twistedmatrix.com/trac/ticket/4053>.

Jean-Paul



From sorin7486 at gmail.com  Thu Oct 22 08:38:46 2009
From: sorin7486 at gmail.com (Sorin Silaghi)
Date: Thu, 22 Oct 2009 17:38:46 +0300
Subject: [Twisted-Python] porting to 3.0
In-Reply-To: <20091022140759.11571.1776752212.divmod.xquotient.1423@localhost.localdomain>
References: <751facc70910211000g50a681ay94f08632049dcce6@mail.gmail.com>
	<20091022140759.11571.1776752212.divmod.xquotient.1423@localhost.localdomain>
Message-ID: <751facc70910220738h5d4bce2bm35cf819f7f118d61@mail.gmail.com>

so basically just pick up the warnings list, start fixing them and
submit the patches right ? ... shiny. I can give that a try.


Sorin.


On Thu, Oct 22, 2009 at 5:07 PM,  <exarkun at twistedmatrix.com> wrote:
> On 21 Oct, 05:00 pm, sorin7486 at gmail.com wrote:
>>Hello,
>>
>>
>>       I found some older mails in the archive about porting and I was
>>wondering if there have been any changes since then. Is anybody
>>actively working on it ? Do the recomandations you guys made back then
>>still stand ?
>>
>>Here is the original mail that I mentioned:
>>http://twistedmatrix.com/pipermail/twisted-
>>python/2009-January/019096.html
>
> Those recommendations still stand.  At the moment, there happens to be a
> related ticket up for review,
> <http://twistedmatrix.com/trac/ticket/4053>.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From jesper at taxboel.dk  Thu Oct 22 08:46:31 2009
From: jesper at taxboel.dk (=?ISO-8859-1?Q?Jesper_Taxb=F8l?=)
Date: Thu, 22 Oct 2009 16:46:31 +0200
Subject: [Twisted-Python] Handeling unresolved DNS queries?
In-Reply-To: <20091022135516.11571.1780136361.divmod.xquotient.1414@localhost.localdomain>
References: <e78558910910201250n270d329di7678454ad9d231b9@mail.gmail.com>
	<20091022135516.11571.1780136361.divmod.xquotient.1414@localhost.localdomain>
Message-ID: <e78558910910220746hb112a81r292185addfd82dc2@mail.gmail.com>

Hi Jean-Paul,

Thanx for your nice reply. My problem seems to be that I dont get any calls
to writemessage when the domain is a bogus one?

/tax



2009/10/22 <exarkun at twistedmatrix.com>

> On 20 Oct, 07:50 pm, jesper at taxboel.dk wrote:
> >Hi Guys,
> >
> >Im playing with a dns-cache script, that overrides DNS requests for
> >certain
> >IP addresses.
> >
> >I would like to add functionality, so unresolved requests are sent to a
> >spicific IP. How do I go about doing that?
> >
> >Is there a negative answer in the (udp) DNS protocol or am I forced to
> >use a
> >timeout.
>
> You've overridden writeMessage to inspect messages for answers and
> rewrite them if necessary.  You can recognize error responses by looking
> at the rCode attribute of the message object itself.  This will take on
> a value like dns.OK, dns.EFORMAT, dns.ESERVER, dns.ENAME, dns.ENOTIMP,
> or dns.EREFUSED.  You can handle these errors by making a request of
> another domain, although since writeMessage is a very low-level API in
> the process and not really intended to be overridden, I'm not sure how
> you'll insert the responses you get from these new requests into the
> original request/response process.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091022/37167546/attachment-0001.html>

From exarkun at twistedmatrix.com  Thu Oct 22 11:31:50 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 22 Oct 2009 17:31:50 -0000
Subject: [Twisted-Python] Handeling unresolved DNS queries?
In-Reply-To: <e78558910910220746hb112a81r292185addfd82dc2@mail.gmail.com>
References: <e78558910910201250n270d329di7678454ad9d231b9@mail.gmail.com>
	<20091022135516.11571.1780136361.divmod.xquotient.1414@localhost.localdomain>
	<e78558910910220746hb112a81r292185addfd82dc2@mail.gmail.com>
Message-ID: <20091022173150.11571.1534618114.divmod.xquotient.1432@localhost.localdomain>

On 02:46 pm, jesper at taxboel.dk wrote:
>Hi Jean-Paul,
>
>Thanx for your nice reply. My problem seems to be that I dont get any 
>calls
>to writemessage when the domain is a bogus one?

It's not immediately obvious why this would be.  writeMessage is called 
to write responses back to your clients.  If the requests your server 
issues get answers, then writeMessage will be called with those answers. 
If it's not being called, perhaps the problem is that your server's 
requests are being answered by the servers it is asking.

Jean-Paul



From vitaly at synapticvision.com  Thu Oct 22 12:01:57 2009
From: vitaly at synapticvision.com (vitaly at synapticvision.com)
Date: Thu, 22 Oct 2009 14:01:57 -0400
Subject: [Twisted-Python] How to chain deferred calls
In-Reply-To: <10DDB81F-BCF2-48FA-AD9D-C9C4E8CF1C60@verizon.net>
References: <20091021161222.11812v7szd1uhfok@216.129.205.5>
	<10DDB81F-BCF2-48FA-AD9D-C9C4E8CF1C60@verizon.net>
Message-ID: <20091022140157.19972pda1t8zlb0g@216.129.205.5>


Thank you for response.

the issue is if adc1() will raise up an exception, than following it  
.addErrback() will never be called cause adc1() will exit or raise  
Exception.

Quoting "Valeriy Pogrebitskiy" <vpogrebi at verizon.net>:

> Add another .addErrback() directly after adc1() - to handle that
> specific exception...
>
>
> Kind regards,
>
> Valeriy Pogrebitskiy
> vpogrebi at verizon.net
>
>
>
>
> On Oct 21, 2009, at 4:12 PM, vitaly at synapticvision.com wrote:
>
>> hi,
>> how can I chain in defer methods that could raise exception while
>> showing the exception that coming from method? I mean, if I'll do:
>> return (
>>   adc1().abc2().abc3().addErrback("Common2AllException")
>> )
>> than "Common2AllException" will be raised if abc1() raise Exception,
>> but I'd like to see the adc1() own exception (and not
>> "Common2AllException") ?
>>
>>
>>
>> t = Test()
>> def abc1(self):
>>   if t.test() is None:
>>     raise Exception("Error11")
>>   else:
>>     return 1
>>
>> def abc2(self):
>>   if t.test() is None:
>>     raise Exception("Error12")
>>   else:
>>     return 1
>>
>> def abc3(self):
>>   if t.test() is None:
>>     raise Exception("Error13")
>>   else:
>>     return 1
>>
>>
>>
>>
>> Appreciate the help.
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>





From glyph at twistedmatrix.com  Thu Oct 22 12:37:21 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 22 Oct 2009 14:37:21 -0400
Subject: [Twisted-Python] porting to 3.0
In-Reply-To: <751facc70910220738h5d4bce2bm35cf819f7f118d61@mail.gmail.com>
References: <751facc70910211000g50a681ay94f08632049dcce6@mail.gmail.com>
	<20091022140759.11571.1776752212.divmod.xquotient.1423@localhost.localdomain>
	<751facc70910220738h5d4bce2bm35cf819f7f118d61@mail.gmail.com>
Message-ID: <d9047f780910221137u6308abc9l9cd466c3115c5835@mail.gmail.com>

On Thu, Oct 22, 2009 at 10:38 AM, Sorin Silaghi <sorin7486 at gmail.com> wrote:

> so basically just pick up the warnings list, start fixing them and
> submit the patches right ? ... shiny. I can give that a try.


Thanks!  I look forward to seeing your patches :-D.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091022/ab7032cc/attachment.html>

From jesper at taxboel.dk  Thu Oct 22 13:00:35 2009
From: jesper at taxboel.dk (=?ISO-8859-1?Q?Jesper_Taxb=F8l?=)
Date: Thu, 22 Oct 2009 21:00:35 +0200
Subject: [Twisted-Python] Handeling unresolved DNS queries?
In-Reply-To: <20091022173150.11571.1534618114.divmod.xquotient.1432@localhost.localdomain>
References: <e78558910910201250n270d329di7678454ad9d231b9@mail.gmail.com>
	<20091022135516.11571.1780136361.divmod.xquotient.1414@localhost.localdomain>
	<e78558910910220746hb112a81r292185addfd82dc2@mail.gmail.com>
	<20091022173150.11571.1534618114.divmod.xquotient.1432@localhost.localdomain>
Message-ID: <e78558910910221200vc1b0229g5fae565c9c4e5fcd@mail.gmail.com>

Hi Jean-Paul,

I guess my focus is right when it comes to redirecting clients.

Im hooking into

DNSDatagramProtocol.writeMessage(self, message, address):

And I guess thats OK?

But when it comes to bogus domains, I guess i could use:

DNSServerFactory.gotResolverError(self, failure, protocol, message,
address):

My problem is now how I construct a redirect package and channel it back to
the client.

Do you think that is a sensible approach? -and do you hava a pointer on how
to find the associated client.

kind regards

/tax

2009/10/22 <exarkun at twistedmatrix.com>

> On 02:46 pm, jesper at taxboel.dk wrote:
> >Hi Jean-Paul,
> >
> >Thanx for your nice reply. My problem seems to be that I dont get any
> >calls
> >to writemessage when the domain is a bogus one?
>
> It's not immediately obvious why this would be.  writeMessage is called
> to write responses back to your clients.  If the requests your server
> issues get answers, then writeMessage will be called with those answers.
> If it's not being called, perhaps the problem is that your server's
> requests are being answered by the servers it is asking.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091022/98c64a21/attachment.html>

From exarkun at twistedmatrix.com  Thu Oct 22 14:38:06 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 22 Oct 2009 20:38:06 -0000
Subject: [Twisted-Python] Handeling unresolved DNS queries?
In-Reply-To: <e78558910910221200vc1b0229g5fae565c9c4e5fcd@mail.gmail.com>
References: <e78558910910201250n270d329di7678454ad9d231b9@mail.gmail.com>
	<20091022135516.11571.1780136361.divmod.xquotient.1414@localhost.localdomain>
	<e78558910910220746hb112a81r292185addfd82dc2@mail.gmail.com>
	<20091022173150.11571.1534618114.divmod.xquotient.1432@localhost.localdomain>
	<e78558910910221200vc1b0229g5fae565c9c4e5fcd@mail.gmail.com>
Message-ID: <20091022203806.11571.909308342.divmod.xquotient.1441@localhost.localdomain>

On 07:00 pm, jesper at taxboel.dk wrote:
>Hi Jean-Paul,
>
>I guess my focus is right when it comes to redirecting clients.
>
>Im hooking into
>
>DNSDatagramProtocol.writeMessage(self, message, address):
>
>And I guess thats OK?

Depends what "OK" is supposed to mean.
>
>But when it comes to bogus domains, I guess i could use:
>
>DNSServerFactory.gotResolverError(self, failure, protocol, message,
>address):

I don't know why you should have to do that.
>My problem is now how I construct a redirect package and channel it 
>back to
>the client.
>
>Do you think that is a sensible approach? -and do you hava a pointer on 
>how
>to find the associated client.

It would probably be a lot easier and more robust to implement a 
completely new custom resolver that *wraps* an existing resolver, rather 
than trying to extend an existing resolver via a subclass.  This removes 
many irrelevant implementation details from consideration (such as 
writeMessage and gotResolverError) and gives you an obvious place to put 
your redirect logic - in an errback on the Deferred returned by one of 
the wrapped resolver's lookup/query methods.

Jean-Paul



From jesper at taxboel.dk  Thu Oct 22 14:55:05 2009
From: jesper at taxboel.dk (=?ISO-8859-1?Q?Jesper_Taxb=F8l?=)
Date: Thu, 22 Oct 2009 22:55:05 +0200
Subject: [Twisted-Python] Handeling unresolved DNS queries?
In-Reply-To: <20091022203806.11571.909308342.divmod.xquotient.1441@localhost.localdomain>
References: <e78558910910201250n270d329di7678454ad9d231b9@mail.gmail.com>
	<20091022135516.11571.1780136361.divmod.xquotient.1414@localhost.localdomain>
	<e78558910910220746hb112a81r292185addfd82dc2@mail.gmail.com>
	<20091022173150.11571.1534618114.divmod.xquotient.1432@localhost.localdomain>
	<e78558910910221200vc1b0229g5fae565c9c4e5fcd@mail.gmail.com>
	<20091022203806.11571.909308342.divmod.xquotient.1441@localhost.localdomain>
Message-ID: <e78558910910221355h7f0f3233h4545302fef1adc7f@mail.gmail.com>

I'm still new to the whole twisted way of doing things, but it sounds very
sensible. :)

Could you suggest a class to start studying from ?

/tax

2009/10/22 <exarkun at twistedmatrix.com>

> On 07:00 pm, jesper at taxboel.dk wrote:
> >Hi Jean-Paul,
> >
> >I guess my focus is right when it comes to redirecting clients.
> >
> >Im hooking into
> >
> >DNSDatagramProtocol.writeMessage(self, message, address):
> >
> >And I guess thats OK?
>
> Depends what "OK" is supposed to mean.
> >
> >But when it comes to bogus domains, I guess i could use:
> >
> >DNSServerFactory.gotResolverError(self, failure, protocol, message,
> >address):
>
> I don't know why you should have to do that.
> >My problem is now how I construct a redirect package and channel it
> >back to
> >the client.
> >
> >Do you think that is a sensible approach? -and do you hava a pointer on
> >how
> >to find the associated client.
>
> It would probably be a lot easier and more robust to implement a
> completely new custom resolver that *wraps* an existing resolver, rather
> than trying to extend an existing resolver via a subclass.  This removes
> many irrelevant implementation details from consideration (such as
> writeMessage and gotResolverError) and gives you an obvious place to put
> your redirect logic - in an errback on the Deferred returned by one of
> the wrapped resolver's lookup/query methods.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091022/72217d8f/attachment.html>

From vpogrebi at verizon.net  Thu Oct 22 16:20:21 2009
From: vpogrebi at verizon.net (Valeriy Pogrebitskiy)
Date: Thu, 22 Oct 2009 18:20:21 -0400
Subject: [Twisted-Python] How to chain deferred calls
In-Reply-To: <20091022140157.19972pda1t8zlb0g@216.129.205.5>
Message-ID: <9391BC461E7844DF8F71029DA8C2CD91@valeriy>

I am confused... If an exception is being raised in adc1() - errback is
supposed to be called and passed your Exception instance (wrapped up as an
instance of twisted.python.failure.Failure). 

Kind regards,
 
Valeriy Pogrebitskiy
Email: vpogrebi at iname.com
 
 
-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
vitaly at synapticvision.com
Sent: Thursday, October 22, 2009 2:02 PM
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] How to chain deferred calls


Thank you for response.

the issue is if adc1() will raise up an exception, than following it  
.addErrback() will never be called cause adc1() will exit or raise  
Exception.

Quoting "Valeriy Pogrebitskiy" <vpogrebi at verizon.net>:

> Add another .addErrback() directly after adc1() - to handle that
> specific exception...
>
>
> Kind regards,
>
> Valeriy Pogrebitskiy
> vpogrebi at verizon.net
>
>
>
>
> On Oct 21, 2009, at 4:12 PM, vitaly at synapticvision.com wrote:
>
>> hi,
>> how can I chain in defer methods that could raise exception while
>> showing the exception that coming from method? I mean, if I'll do:
>> return (
>>   adc1().abc2().abc3().addErrback("Common2AllException")
>> )
>> than "Common2AllException" will be raised if abc1() raise Exception,
>> but I'd like to see the adc1() own exception (and not
>> "Common2AllException") ?
>>
>>
>>
>> t = Test()
>> def abc1(self):
>>   if t.test() is None:
>>     raise Exception("Error11")
>>   else:
>>     return 1
>>
>> def abc2(self):
>>   if t.test() is None:
>>     raise Exception("Error12")
>>   else:
>>     return 1
>>
>> def abc3(self):
>>   if t.test() is None:
>>     raise Exception("Error13")
>>   else:
>>     return 1
>>
>>
>>
>>
>> Appreciate the help.
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From vitaly at synapticvision.com  Thu Oct 22 16:38:26 2009
From: vitaly at synapticvision.com (vitaly at synapticvision.com)
Date: Thu, 22 Oct 2009 18:38:26 -0400
Subject: [Twisted-Python] How to chain deferred calls
In-Reply-To: <9391BC461E7844DF8F71029DA8C2CD91@valeriy>
References: <9391BC461E7844DF8F71029DA8C2CD91@valeriy>
Message-ID: <20091022183826.71344j9qa1ki8i04@216.129.205.5>


me too,
may be its because of the way I'm calling the chain:

return (
   self.abc1().
   addErrback(self.handleFailure1).
   addCallback(self.abc2,args).
   addCallback(self.abc3).
   addErrback(self.handleFailure2)
)

I see no call to self.handleFailure1() at all, abc1() just fail on  
exception (if it was raised).

Quoting "Valeriy Pogrebitskiy" <vpogrebi at verizon.net>:

> I am confused... If an exception is being raised in adc1() - errback is
> supposed to be called and passed your Exception instance (wrapped up as an
> instance of twisted.python.failure.Failure).
>
> Kind regards,
>
> Valeriy Pogrebitskiy
> Email: vpogrebi at iname.com
>
>
> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com
> [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
> vitaly at synapticvision.com
> Sent: Thursday, October 22, 2009 2:02 PM
> To: twisted-python at twistedmatrix.com
> Subject: Re: [Twisted-Python] How to chain deferred calls
>
>
> Thank you for response.
>
> the issue is if adc1() will raise up an exception, than following it
> .addErrback() will never be called cause adc1() will exit or raise
> Exception.
>
> Quoting "Valeriy Pogrebitskiy" <vpogrebi at verizon.net>:
>
>> Add another .addErrback() directly after adc1() - to handle that
>> specific exception...
>>
>>
>> Kind regards,
>>
>> Valeriy Pogrebitskiy
>> vpogrebi at verizon.net
>>
>>
>>
>>
>> On Oct 21, 2009, at 4:12 PM, vitaly at synapticvision.com wrote:
>>
>>> hi,
>>> how can I chain in defer methods that could raise exception while
>>> showing the exception that coming from method? I mean, if I'll do:
>>> return (
>>>   adc1().abc2().abc3().addErrback("Common2AllException")
>>> )
>>> than "Common2AllException" will be raised if abc1() raise Exception,
>>> but I'd like to see the adc1() own exception (and not
>>> "Common2AllException") ?
>>>
>>>
>>>
>>> t = Test()
>>> def abc1(self):
>>>   if t.test() is None:
>>>     raise Exception("Error11")
>>>   else:
>>>     return 1
>>>
>>> def abc2(self):
>>>   if t.test() is None:
>>>     raise Exception("Error12")
>>>   else:
>>>     return 1
>>>
>>> def abc3(self):
>>>   if t.test() is None:
>>>     raise Exception("Error13")
>>>   else:
>>>     return 1
>>>
>>>
>>>
>>>
>>> Appreciate the help.
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>





From vpogrebi at verizon.net  Thu Oct 22 17:15:19 2009
From: vpogrebi at verizon.net (Valeriy Pogrebitskiy)
Date: Thu, 22 Oct 2009 19:15:19 -0400
Subject: [Twisted-Python] How to chain deferred calls
In-Reply-To: <20091022183826.71344j9qa1ki8i04@216.129.205.5>
Message-ID: <E7A7380914534C1A8E6A6D367E72244A@valeriy>

After taking closer look at your code - this is obvious...

To use callbacks - you MUST use deferred. In your case - each method in a
chain (except the last one) must return deferred. Without that - you can't
construct such chain.

Your abc1() and abc2() must return deferred (or be decorated by a method
that returns deferred)...

Kind regards,
 
Valeriy Pogrebitskiy
Email: vpogrebi at iname.com
 
 

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
vitaly at synapticvision.com
Sent: Thursday, October 22, 2009 6:38 PM
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] How to chain deferred calls


me too,
may be its because of the way I'm calling the chain:

return (
   self.abc1().
   addErrback(self.handleFailure1).
   addCallback(self.abc2,args).
   addCallback(self.abc3).
   addErrback(self.handleFailure2)
)

I see no call to self.handleFailure1() at all, abc1() just fail on  
exception (if it was raised).

Quoting "Valeriy Pogrebitskiy" <vpogrebi at verizon.net>:

> I am confused... If an exception is being raised in adc1() - errback is
> supposed to be called and passed your Exception instance (wrapped up as an
> instance of twisted.python.failure.Failure).
>
> Kind regards,
>
> Valeriy Pogrebitskiy
> Email: vpogrebi at iname.com
>
>
> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com
> [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
> vitaly at synapticvision.com
> Sent: Thursday, October 22, 2009 2:02 PM
> To: twisted-python at twistedmatrix.com
> Subject: Re: [Twisted-Python] How to chain deferred calls
>
>
> Thank you for response.
>
> the issue is if adc1() will raise up an exception, than following it
> .addErrback() will never be called cause adc1() will exit or raise
> Exception.
>
> Quoting "Valeriy Pogrebitskiy" <vpogrebi at verizon.net>:
>
>> Add another .addErrback() directly after adc1() - to handle that
>> specific exception...
>>
>>
>> Kind regards,
>>
>> Valeriy Pogrebitskiy
>> vpogrebi at verizon.net
>>
>>
>>
>>
>> On Oct 21, 2009, at 4:12 PM, vitaly at synapticvision.com wrote:
>>
>>> hi,
>>> how can I chain in defer methods that could raise exception while
>>> showing the exception that coming from method? I mean, if I'll do:
>>> return (
>>>   adc1().abc2().abc3().addErrback("Common2AllException")
>>> )
>>> than "Common2AllException" will be raised if abc1() raise Exception,
>>> but I'd like to see the adc1() own exception (and not
>>> "Common2AllException") ?
>>>
>>>
>>>
>>> t = Test()
>>> def abc1(self):
>>>   if t.test() is None:
>>>     raise Exception("Error11")
>>>   else:
>>>     return 1
>>>
>>> def abc2(self):
>>>   if t.test() is None:
>>>     raise Exception("Error12")
>>>   else:
>>>     return 1
>>>
>>> def abc3(self):
>>>   if t.test() is None:
>>>     raise Exception("Error13")
>>>   else:
>>>     return 1
>>>
>>>
>>>
>>>
>>> Appreciate the help.
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From exarkun at twistedmatrix.com  Thu Oct 22 17:18:55 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 22 Oct 2009 23:18:55 -0000
Subject: [Twisted-Python] Handeling unresolved DNS queries?
In-Reply-To: <e78558910910221355h7f0f3233h4545302fef1adc7f@mail.gmail.com>
References: <e78558910910201250n270d329di7678454ad9d231b9@mail.gmail.com>
	<20091022135516.11571.1780136361.divmod.xquotient.1414@localhost.localdomain>
	<e78558910910220746hb112a81r292185addfd82dc2@mail.gmail.com>
	<20091022173150.11571.1534618114.divmod.xquotient.1432@localhost.localdomain>
	<e78558910910221200vc1b0229g5fae565c9c4e5fcd@mail.gmail.com>
	<20091022203806.11571.909308342.divmod.xquotient.1441@localhost.localdomain>
	<e78558910910221355h7f0f3233h4545302fef1adc7f@mail.gmail.com>
Message-ID: <20091022231855.11571.1506567463.divmod.xquotient.1460@localhost.localdomain>

On 08:55 pm, jesper at taxboel.dk wrote:
>I'm still new to the whole twisted way of doing things, but it sounds 
>very
>sensible. :)
>
>Could you suggest a class to start studying from ?

twisted/names/common.py is probably a good place to start.  It has what 
comes closest to the definition of a Twisted Names "resolver".

Jean-Paul



From vitaly at synapticvision.com  Thu Oct 22 17:38:07 2009
From: vitaly at synapticvision.com (vitaly at synapticvision.com)
Date: Thu, 22 Oct 2009 19:38:07 -0400
Subject: [Twisted-Python] How to chain deferred calls
In-Reply-To: <E7A7380914534C1A8E6A6D367E72244A@valeriy>
References: <E7A7380914534C1A8E6A6D367E72244A@valeriy>
Message-ID: <20091022193807.70591gxlq1e1yiu8@216.129.205.5>


Correct, sorry, tried:

return (
    self.abc1().
    addErrback(self.handleFailure1).
    addCallback(self.abc2,args).
    addCallback(self.abc3).
    addErrback(self.handleFailure2)
)


def abc1(self):
    if t.test() is None:
      raise Exception("Error11")
    else:
      d = defer.Deferred()
      d.callback(1)
      return d

Still in case of exception from abc1() - self.handleFailure1() never  
called, instead of it abc1() just fail.

Do I need "raise Exception("Error11")" also return as deferred ? Than how?


Quoting "Valeriy Pogrebitskiy" <vpogrebi at verizon.net>:

> After taking closer look at your code - this is obvious...
>
> To use callbacks - you MUST use deferred. In your case - each method in a
> chain (except the last one) must return deferred. Without that - you can't
> construct such chain.
>
> Your abc1() and abc2() must return deferred (or be decorated by a method
> that returns deferred)...
>
> Kind regards,
>
> Valeriy Pogrebitskiy
> Email: vpogrebi at iname.com
>
>
>
> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com
> [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
> vitaly at synapticvision.com
> Sent: Thursday, October 22, 2009 6:38 PM
> To: twisted-python at twistedmatrix.com
> Subject: Re: [Twisted-Python] How to chain deferred calls
>
>
> me too,
> may be its because of the way I'm calling the chain:
>
> return (
>    self.abc1().
>    addErrback(self.handleFailure1).
>    addCallback(self.abc2,args).
>    addCallback(self.abc3).
>    addErrback(self.handleFailure2)
> )
>
> I see no call to self.handleFailure1() at all, abc1() just fail on
> exception (if it was raised).
>
> Quoting "Valeriy Pogrebitskiy" <vpogrebi at verizon.net>:
>
>> I am confused... If an exception is being raised in adc1() - errback is
>> supposed to be called and passed your Exception instance (wrapped up as an
>> instance of twisted.python.failure.Failure).
>>
>> Kind regards,
>>
>> Valeriy Pogrebitskiy
>> Email: vpogrebi at iname.com
>>
>>
>> -----Original Message-----
>> From: twisted-python-bounces at twistedmatrix.com
>> [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
>> vitaly at synapticvision.com
>> Sent: Thursday, October 22, 2009 2:02 PM
>> To: twisted-python at twistedmatrix.com
>> Subject: Re: [Twisted-Python] How to chain deferred calls
>>
>>
>> Thank you for response.
>>
>> the issue is if adc1() will raise up an exception, than following it
>> .addErrback() will never be called cause adc1() will exit or raise
>> Exception.
>>
>> Quoting "Valeriy Pogrebitskiy" <vpogrebi at verizon.net>:
>>
>>> Add another .addErrback() directly after adc1() - to handle that
>>> specific exception...
>>>
>>>
>>> Kind regards,
>>>
>>> Valeriy Pogrebitskiy
>>> vpogrebi at verizon.net
>>>
>>>
>>>
>>>
>>> On Oct 21, 2009, at 4:12 PM, vitaly at synapticvision.com wrote:
>>>
>>>> hi,
>>>> how can I chain in defer methods that could raise exception while
>>>> showing the exception that coming from method? I mean, if I'll do:
>>>> return (
>>>>   adc1().abc2().abc3().addErrback("Common2AllException")
>>>> )
>>>> than "Common2AllException" will be raised if abc1() raise Exception,
>>>> but I'd like to see the adc1() own exception (and not
>>>> "Common2AllException") ?
>>>>
>>>>
>>>>
>>>> t = Test()
>>>> def abc1(self):
>>>>   if t.test() is None:
>>>>     raise Exception("Error11")
>>>>   else:
>>>>     return 1
>>>>
>>>> def abc2(self):
>>>>   if t.test() is None:
>>>>     raise Exception("Error12")
>>>>   else:
>>>>     return 1
>>>>
>>>> def abc3(self):
>>>>   if t.test() is None:
>>>>     raise Exception("Error13")
>>>>   else:
>>>>     return 1
>>>>
>>>>
>>>>
>>>>
>>>> Appreciate the help.
>>>>
>>>>
>>>> _______________________________________________
>>>> Twisted-Python mailing list
>>>> Twisted-Python at twistedmatrix.com
>>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>





From general at vultaire.net  Thu Oct 22 17:41:56 2009
From: general at vultaire.net (Paul Goins)
Date: Fri, 23 Oct 2009 08:41:56 +0900
Subject: [Twisted-Python] How to chain deferred calls
In-Reply-To: <20091022183826.71344j9qa1ki8i04@216.129.205.5>
References: <9391BC461E7844DF8F71029DA8C2CD91@valeriy>
	<20091022183826.71344j9qa1ki8i04@216.129.205.5>
Message-ID: <4AE0EDC4.10206@vultaire.net>

Hello,

>>> On Oct 21, 2009, at 4:12 PM, vitaly at synapticvision.com wrote:
>>>
>>>> hi,
>>>> how can I chain in defer methods that could raise exception while
>>>> showing the exception that coming from method?

This is covered in the Twisted documentation.  There's 3 pages I often
have reviewed when confused about something:

1. Asynchronous Programming with Twisted
(http://twistedmatrix.com/projects/core/documentation/howto/async.html)
2. Deferred Reference
(http://twistedmatrix.com/projects/core/documentation/howto/defer.html)
3. Generating Deferreds
(http://twistedmatrix.com/projects/core/documentation/howto/gendefer.html)

Specifically, the most relevant is the Visual Explanation:
http://twistedmatrix.com/projects/core/documentation/howto/defer.html#auto2
This should give you the info you need, but I'll explain a little more
anyway.

>>>> I mean, if I'll do:
>>>> return (
>>>>   adc1().abc2().abc3().addErrback("Common2AllException")
>>>> )
>>>> than "Common2AllException" will be raised if abc1() raise Exception,
>>>> but I'd like to see the adc1() own exception (and not
>>>> "Common2AllException") ?

If abc1 raises an exception, it's going to go through each step of the
callback/errback chain until it finds an errback.  If the only thing you
have is attached at the very end, then that's where the exception will
be handled.

> the issue is if adc1() will raise up an exception, than following it
> .addErrback() will never be called cause adc1() will exit or raise
> Exception.

Let's say that your abc() was returning a Deferred.  In this case, doing
abc().addErrback("Common2AllException") would make sense.  However, your
example either returns 1 (not a Deferred), or it raises an Exception.
Neither one will chain like this.  The example is bad.

If you can provide a better example, please do.  In any case, please
review the documentation, especially the "visual explanation" I
mentioned above.  And finally, do a search on the web for "twisted
inlineCallbacks decorator" - that makes writing a lot of Deferred-using
code much easier, and helped me out a lot as a beginner.

- Paul




From vitaly at synapticvision.com  Thu Oct 22 18:15:40 2009
From: vitaly at synapticvision.com (vitaly at synapticvision.com)
Date: Thu, 22 Oct 2009 20:15:40 -0400
Subject: [Twisted-Python] How to chain deferred calls
In-Reply-To: <4AE0EDC4.10206@vultaire.net>
References: <9391BC461E7844DF8F71029DA8C2CD91@valeriy>
	<20091022183826.71344j9qa1ki8i04@216.129.205.5>
	<4AE0EDC4.10206@vultaire.net>
Message-ID: <20091022201540.42317d4b9h5b720w@216.129.205.5>


Thank you a lot for pointing me to the Twisted doc-s, but we're  
discussing the following snippet:

return (
     self.abc1().
     addErrback(self.handleFailure1).
     addCallback(self.abc2,args).
     addCallback(self.abc3).
     addErrback(self.handleFailure2)
)


def abc1(self):
     if t.test() is None:
       raise Exception("Error11")
     else:
       d = defer.Deferred()
       d.callback(1)
       return d


and basically, I've expected in case of exception  
self.handleFailure1() to be called, but I don't see it happen.

cheers.


Quoting "Paul Goins" <general at vultaire.net>:

> Hello,
>
>>>> On Oct 21, 2009, at 4:12 PM, vitaly at synapticvision.com wrote:
>>>>
>>>>> hi,
>>>>> how can I chain in defer methods that could raise exception while
>>>>> showing the exception that coming from method?
>
> This is covered in the Twisted documentation.  There's 3 pages I often
> have reviewed when confused about something:
>
> 1. Asynchronous Programming with Twisted
> (http://twistedmatrix.com/projects/core/documentation/howto/async.html)
> 2. Deferred Reference
> (http://twistedmatrix.com/projects/core/documentation/howto/defer.html)
> 3. Generating Deferreds
> (http://twistedmatrix.com/projects/core/documentation/howto/gendefer.html)
>
> Specifically, the most relevant is the Visual Explanation:
> http://twistedmatrix.com/projects/core/documentation/howto/defer.html#auto2
> This should give you the info you need, but I'll explain a little more
> anyway.
>
>>>>> I mean, if I'll do:
>>>>> return (
>>>>>   adc1().abc2().abc3().addErrback("Common2AllException")
>>>>> )
>>>>> than "Common2AllException" will be raised if abc1() raise Exception,
>>>>> but I'd like to see the adc1() own exception (and not
>>>>> "Common2AllException") ?
>
> If abc1 raises an exception, it's going to go through each step of the
> callback/errback chain until it finds an errback.  If the only thing you
> have is attached at the very end, then that's where the exception will
> be handled.
>
>> the issue is if adc1() will raise up an exception, than following it
>> .addErrback() will never be called cause adc1() will exit or raise
>> Exception.
>
> Let's say that your abc() was returning a Deferred.  In this case, doing
> abc().addErrback("Common2AllException") would make sense.  However, your
> example either returns 1 (not a Deferred), or it raises an Exception.
> Neither one will chain like this.  The example is bad.
>
> If you can provide a better example, please do.  In any case, please
> review the documentation, especially the "visual explanation" I
> mentioned above.  And finally, do a search on the web for "twisted
> inlineCallbacks decorator" - that makes writing a lot of Deferred-using
> code much easier, and helped me out a lot as a beginner.
>
> - Paul
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>





From terry at jon.es  Thu Oct 22 19:13:00 2009
From: terry at jon.es (Terry Jones)
Date: Fri, 23 Oct 2009 03:13:00 +0200
Subject: [Twisted-Python] How to chain deferred calls
In-Reply-To: Your message at 20:15:40 on Thursday, 22 October 2009
References: <9391BC461E7844DF8F71029DA8C2CD91@valeriy>
	<20091022183826.71344j9qa1ki8i04@216.129.205.5>
	<4AE0EDC4.10206@vultaire.net>
	<20091022201540.42317d4b9h5b720w@216.129.205.5>
Message-ID: <19169.796.737302.242405@jon.es>

>>>>> "vitaly" == vitaly  <vitaly at synapticvision.com> writes:

vitaly> Thank you a lot for pointing me to the Twisted doc-s, but we're
vitaly> discussing the following snippet:
[snip]
vitaly> and basically, I've expected in case of exception
vitaly> self.handleFailure1() to be called, but I don't see it happen.

The reason you're not seeing handleFailure1 being called is that the
exception is not occurring in the context of deferred processing. You've
got a regular Python function call, a regular exception is raised, etc.
Twisted and its deferred do not / cannot alter that behavior.

What they *can* do is handle exceptions and turn them into failures and
route the failure to an errback chain *in the context of calling functions
that have been added to a deferred*.  Because your abc1 has not been added
to any deferred's call/errback chain, none of that happens when your
exception is raised.

If your code looked like this (pseudocode), you would see the exception

    return (
         self.abc1().
         addErrback(self.handleFailure1).
         addCallback(self.abc2,args).
         addCallback(self.abc3).
         addErrback(self.handleFailure2)
    )

    def abc1(self):
        d = defer.Deferred()
        d.addCallback(raiser)
        d.callback(1)
        return d

    def raiser(self, _):
        raise Exception("Error11")

Because the thing that raises is being called by Twisted's deferred class,
and its exception is caught and routed to d's errback chain and winds up in
the handleFailure1 method.

Does that make sense?

Terry



From andrew at bemusement.org  Thu Oct 22 19:37:19 2009
From: andrew at bemusement.org (Andrew Bennetts)
Date: Fri, 23 Oct 2009 12:37:19 +1100
Subject: [Twisted-Python] How to chain deferred calls
In-Reply-To: <20091022201540.42317d4b9h5b720w@216.129.205.5>
References: <9391BC461E7844DF8F71029DA8C2CD91@valeriy>
	<20091022183826.71344j9qa1ki8i04@216.129.205.5>
	<4AE0EDC4.10206@vultaire.net>
	<20091022201540.42317d4b9h5b720w@216.129.205.5>
Message-ID: <20091023013719.GF2963@steerpike.home.puzzling.org>

vitaly at synapticvision.com wrote:
[...]
> def abc1(self):
>      if t.test() is None:
>        raise Exception("Error11")
>      else:
>        d = defer.Deferred()
>        d.callback(1)
>        return d
> 
> 
> and basically, I've expected in case of exception  
> self.handleFailure1() to be called, but I don't see it happen.

This is a function that either returns a Deferred or raises an exception.  This
isn't a Twisted issue, it's simply a Python one: in “func1().func2()”, if func1
raises an exception then func2 will not be invoked.  That's fundamental to what
raising an exception in Python means.

If you want to convert this to something that always returns a Deferred, you can
either rewrite it, e.g. using “return defer.fail(Exception('Error11'))”, or use
maybeDeferred which will intercept exceptions for you, e.g.:

    return (
        maybeDeferred(self.abc1).
        addErrback(self.handleFailure1).
	# etc...
	)

You can find maybeDeferred in the twisted.internet.defer module.

-Andrew.




From vitaly at synapticvision.com  Thu Oct 22 19:49:33 2009
From: vitaly at synapticvision.com (vitaly at synapticvision.com)
Date: Thu, 22 Oct 2009 21:49:33 -0400
Subject: [Twisted-Python] How to chain deferred calls
In-Reply-To: <19169.796.737302.242405@jon.es>
References: <9391BC461E7844DF8F71029DA8C2CD91@valeriy>
	<20091022183826.71344j9qa1ki8i04@216.129.205.5>
	<4AE0EDC4.10206@vultaire.net>
	<20091022201540.42317d4b9h5b720w@216.129.205.5>
	<19169.796.737302.242405@jon.es>
Message-ID: <20091022214933.10926hlf044k7lc8@216.129.205.5>


Very, very close to want I wanted to understand, thank you!

One more q please: what if I complicate the abc1() like following, is  
this expected to work or again I've missed the point?

   return (
          self.abc1().
          addErrback(self.handleFailure1).
          addCallback(self.abc2,args).
          addCallback(self.abc3).
          addErrback(self.handleFailure2)
     )

     def abc1(self):

         d = defer.Deferred()

         c = myClass()
         result = c.myTestFunc()
         if result != 1:
             d.addCallback(raiser)

         d.callback(result)
         return d

     def raiser(self, _):
         raise Exception("Error11")



Quoting "Terry Jones" <terry at jon.es>:

> If your code looked like this (pseudocode), you would see the exception
>
>     return (
>          self.abc1().
>          addErrback(self.handleFailure1).
>          addCallback(self.abc2,args).
>          addCallback(self.abc3).
>          addErrback(self.handleFailure2)
>     )
>
>     def abc1(self):
>         d = defer.Deferred()
>         d.addCallback(raiser)
>         d.callback(1)
>         return d
>
>     def raiser(self, _):
>         raise Exception("Error11")
>
> Because the thing that raises is being called by Twisted's deferred class,
> and its exception is caught and routed to d's errback chain and winds up in
> the handleFailure1 method.
>
> Does that make sense?
>
> Terry
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>





From vitaly at synapticvision.com  Thu Oct 22 20:16:11 2009
From: vitaly at synapticvision.com (vitaly at synapticvision.com)
Date: Thu, 22 Oct 2009 22:16:11 -0400
Subject: [Twisted-Python] How to chain deferred calls
In-Reply-To: <20091023013719.GF2963@steerpike.home.puzzling.org>
References: <9391BC461E7844DF8F71029DA8C2CD91@valeriy>
	<20091022183826.71344j9qa1ki8i04@216.129.205.5>
	<4AE0EDC4.10206@vultaire.net>
	<20091022201540.42317d4b9h5b720w@216.129.205.5>
	<20091023013719.GF2963@steerpike.home.puzzling.org>
Message-ID: <20091022221611.8854575bwfb17xgk@216.129.205.5>


This is it! Thank you.

Quoting "Andrew Bennetts" <andrew at bemusement.org>:

> vitaly at synapticvision.com wrote:
> [...]
>> def abc1(self):
>>      if t.test() is None:
>>        raise Exception("Error11")
>>      else:
>>        d = defer.Deferred()
>>        d.callback(1)
>>        return d
>>
>>
>> and basically, I've expected in case of exception
>> self.handleFailure1() to be called, but I don't see it happen.
>
> This is a function that either returns a Deferred or raises an   
> exception.  This
> isn't a Twisted issue, it's simply a Python one: in   
> “func1().func2()”, if func1
> raises an exception then func2 will not be invoked.  That's   
> fundamental to what
> raising an exception in Python means.
>
> If you want to convert this to something that always returns a   
> Deferred, you can
> either rewrite it, e.g. using “return   
> defer.fail(Exception('Error11'))”, or use
> maybeDeferred which will intercept exceptions for you, e.g.:
>
>     return (
>         maybeDeferred(self.abc1).
>         addErrback(self.handleFailure1).
> 	# etc...
> 	)
>
> You can find maybeDeferred in the twisted.internet.defer module.
>
> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>





From k.kelly.gordon at gmail.com  Sat Oct 24 08:39:40 2009
From: k.kelly.gordon at gmail.com (Kelly)
Date: Sun, 25 Oct 2009 01:39:40 +1100
Subject: [Twisted-Python]  Phasing out old-style classes
Message-ID: <40b76abc0910240739w4c23108aoe5e7e933dda1ac83@mail.gmail.com>

On Thu Oct 8 20:08:12 EDT 2009, Glyph Lefkowitz <glyph at
twistedmatrix.com> wrote:

> On Thu, Oct 8, 2009 at 7:59 PM, Mark Visser <markv at lumierevfx.com> wrote:
>
> > I've been bitten a couple times by twisted's use of old-style classes.
> > Now that Jython is finally off the 2.2 branch, is there any real reason
> > to stay backwards compatible?
> >
>
> Changing a class from old-style to new-style is an incompatible change.  The
> difficulty is that if existing libraries use a particular class and inherit
> from it, changing the class to be new-style can have effects from changing
> how their descriptors work to causing an exception when their module is
> imported.
>
...
>
> If old-style classes can be evolved into new-style classes while somehow
> following this policy, that would be great.  The problem is that providing
> compatibility at this level is time-consuming and difficult.  One problem in
> particular is that we don't want to litter the codebase with lots of "Foo"
> and "NewFoo" or "Foo2" sitting right next to it, so we would have to think
> of new names for everything.
>

I have some POC code for this.  It provides a simple toggle at the start
of the application to select between old style (the default) and new style
classes.  After that, a DeprecationWarning is issued every time an old
style class is defined.  The only user visible change is that old style
classes gain an empty old-style base class.  The idea being the
old-style/new-style migration could be managed using the usual twisted
deprecation plan.  Thoughts?



From exarkun at twistedmatrix.com  Sat Oct 24 08:50:11 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 24 Oct 2009 14:50:11 -0000
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <40b76abc0910240739w4c23108aoe5e7e933dda1ac83@mail.gmail.com>
References: <40b76abc0910240739w4c23108aoe5e7e933dda1ac83@mail.gmail.com>
Message-ID: <20091024145011.11571.1125183848.divmod.xquotient.1491@localhost.localdomain>

On 02:39 pm, k.kelly.gordon at gmail.com wrote:
>On Thu Oct 8 20:08:12 EDT 2009, Glyph Lefkowitz <glyph at
>twistedmatrix.com> wrote:
>>On Thu, Oct 8, 2009 at 7:59 PM, Mark Visser <markv at lumierevfx.com> 
>>wrote:
>>
>> > I've been bitten a couple times by twisted's use of old-style 
>>classes.
>> > Now that Jython is finally off the 2.2 branch, is there any real 
>>reason
>> > to stay backwards compatible?
>> >
>>
>>Changing a class from old-style to new-style is an incompatible 
>>change.  The
>>difficulty is that if existing libraries use a particular class and 
>>inherit
>>from it, changing the class to be new-style can have effects from 
>>changing
>>how their descriptors work to causing an exception when their module 
>>is
>>imported.
>...
>>
>>If old-style classes can be evolved into new-style classes while 
>>somehow
>>following this policy, that would be great.  The problem is that 
>>providing
>>compatibility at this level is time-consuming and difficult.  One 
>>problem in
>>particular is that we don't want to litter the codebase with lots of 
>>"Foo"
>>and "NewFoo" or "Foo2" sitting right next to it, so we would have to 
>>think
>>of new names for everything.
>
>I have some POC code for this.  It provides a simple toggle at the 
>start
>of the application to select between old style (the default) and new 
>style
>classes.  After that, a DeprecationWarning is issued every time an old
>style class is defined.  The only user visible change is that old style
>classes gain an empty old-style base class.  The idea being the
>old-style/new-style migration could be managed using the usual twisted
>deprecation plan.  Thoughts?

Process-wide switches are tricky.  Some code may decide it wants new- 
style, while other code wants to stick with classic.  They have a fight, 
one of them loses.  I think that adding this is just an invitation for 
people to create more problems.

I think that we should consider requests to make specific classes new- 
style (and grant them when doing so won't cause compatibility problems), 
make all new classes new-style, but otherwise leave this alone until 3.x 
is widely adopted.

Jean-Paul



From dgriff1 at gmail.com  Sat Oct 24 13:47:33 2009
From: dgriff1 at gmail.com (Daniel Griffin)
Date: Sat, 24 Oct 2009 14:47:33 -0500
Subject: [Twisted-Python] Twisted Performance
In-Reply-To: <4EBDD6C1-53B5-4CA9-AD44-205F5E101264@integrateddevcorp.com>
References: <3db160680910131944w7f101c1fhfd29dad00eb4dfe0@mail.gmail.com>
	<cedc0c090910140155l4bfd70eek364dca61c9ea2f44@mail.gmail.com>
	<80F2A1FE-BE1F-404F-BD29-21BA0B7B4D16@integrateddevcorp.com>
	<4AD67B2D.3050500@krondo.com>
	<4EBDD6C1-53B5-4CA9-AD44-205F5E101264@integrateddevcorp.com>
Message-ID: <3db160680910241247q6825dca0j6dd7e4d0877bea13@mail.gmail.com>

Hi everyone,

I ported my thread based socket code to twisted and have been happy with my
results. To re-hash, my code creates a connection then waits for the other
end to do something and respond, each connection takes a different amount of
time. I went from 3-5 connections completed per second to about 15 per
second. Most importantly connections that take a long time have almost no
impact on other running connections. The thread stuff would peg the CPU and
now I never really venture over 20%. Also testing this code is far easier
than testing stuff that directly calls sockets.

Basically its a huge win on every level.

Thanks for all the help everyone.


Dan

On Wed, Oct 14, 2009 at 8:47 PM, Steve Steiner (listsin) <
listsin at integrateddevcorp.com> wrote:

> Cool, please let me know off-list if you'd like a quick review before
> "going live."
>
> S
>
> On Oct 14, 2009, at 9:30 PM, Dave Peticolas wrote:
>
> > Steve Steiner (listsin) wrote:
> >> On Oct 14, 2009, at 4:55 AM, Laurens Van Houtven wrote:
> >>> Personally I'm a big fan of this series of blog posts:
> >>> http://krondo.com/blog/?page_id=1327
> >>
> >> Very nice, thanks for sharing!
> >
> > Thank you. I really meant to make a public announcement
> > about that on this list, but I was trying to get to
> > Deferreds first :)
> >
> > Anyway...I'm writing an Introduction to Twisted and
> > asynchronous programming. Surprise :)
> >
> > dave
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091024/a374cee7/attachment.html>

From jesper at taxboel.dk  Sat Oct 24 14:04:25 2009
From: jesper at taxboel.dk (=?ISO-8859-1?Q?Jesper_Taxb=F8l?=)
Date: Sat, 24 Oct 2009 22:04:25 +0200
Subject: [Twisted-Python] Handeling unresolved DNS queries?
In-Reply-To: <20091022231855.11571.1506567463.divmod.xquotient.1460@localhost.localdomain>
References: <e78558910910201250n270d329di7678454ad9d231b9@mail.gmail.com>
	<20091022135516.11571.1780136361.divmod.xquotient.1414@localhost.localdomain>
	<e78558910910220746hb112a81r292185addfd82dc2@mail.gmail.com>
	<20091022173150.11571.1534618114.divmod.xquotient.1432@localhost.localdomain>
	<e78558910910221200vc1b0229g5fae565c9c4e5fcd@mail.gmail.com>
	<20091022203806.11571.909308342.divmod.xquotient.1441@localhost.localdomain>
	<e78558910910221355h7f0f3233h4545302fef1adc7f@mail.gmail.com>
	<20091022231855.11571.1506567463.divmod.xquotient.1460@localhost.localdomain>
Message-ID: <e78558910910241304j476d00c1k47a81ff9e00036d2@mail.gmail.com>

Im looking at the common.py and I feel a bit confused about how to wrap a
resolver.

Would'nt a subclass achieve the same thing. I would only need to implement
the changed functions in the subclass.

I guess my problem is that I dont exactly know how to write a wrapper in
python.

Kind regards

Tax

2009/10/23 <exarkun at twistedmatrix.com>

> On 08:55 pm, jesper at taxboel.dk wrote:
> >I'm still new to the whole twisted way of doing things, but it sounds
> >very
> >sensible. :)
> >
> >Could you suggest a class to start studying from ?
>
> twisted/names/common.py is probably a good place to start.  It has what
> comes closest to the definition of a Twisted Names "resolver".
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091024/d312cbbc/attachment.html>

From exarkun at twistedmatrix.com  Sat Oct 24 22:05:12 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 25 Oct 2009 04:05:12 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1256443512.5.165733972@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091025/abc1a23a/attachment.html>

From glyph at twistedmatrix.com  Sat Oct 24 23:15:30 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 25 Oct 2009 01:15:30 -0400
Subject: [Twisted-Python] Twisted Performance
In-Reply-To: <3db160680910241247q6825dca0j6dd7e4d0877bea13@mail.gmail.com>
References: <3db160680910131944w7f101c1fhfd29dad00eb4dfe0@mail.gmail.com>
	<cedc0c090910140155l4bfd70eek364dca61c9ea2f44@mail.gmail.com>
	<80F2A1FE-BE1F-404F-BD29-21BA0B7B4D16@integrateddevcorp.com>
	<4AD67B2D.3050500@krondo.com>
	<4EBDD6C1-53B5-4CA9-AD44-205F5E101264@integrateddevcorp.com>
	<3db160680910241247q6825dca0j6dd7e4d0877bea13@mail.gmail.com>
Message-ID: <D9EA4D8F-B3CA-486A-86D0-5FB392A95294@twistedmatrix.com>

On Oct 24, 2009, at 3:47 PM, Daniel Griffin wrote:

> I ported my thread based socket code to twisted and have been happy  
> with my results. (...)
> Basically its a huge win on every level.
>
> Thanks for all the help everyone.

Glad to hear it!  Do you want to write up something more specific for  
the SuccessStories page?




From glyph at twistedmatrix.com  Sat Oct 24 23:38:12 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 25 Oct 2009 01:38:12 -0400
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <20091024145011.11571.1125183848.divmod.xquotient.1491@localhost.localdomain>
References: <40b76abc0910240739w4c23108aoe5e7e933dda1ac83@mail.gmail.com>
	<20091024145011.11571.1125183848.divmod.xquotient.1491@localhost.localdomain>
Message-ID: <6EE454CA-F803-4C6B-BE67-23B2078087B9@twistedmatrix.com>

On Oct 24, 2009, at 10:50 AM, exarkun at twistedmatrix.com wrote:

> I think that we should consider requests to make specific classes new-
> style (and grant them when doing so won't cause compatibility  
> problems),
> make all new classes new-style, but otherwise leave this alone until  
> 3.x
> is widely adopted.

While your argument makes sense to me, there's a fundamental problem  
with the way Python introduced new-style classes that creates an  
ongoing maintenance tension.  I think we should start addressing the  
problem incrementally now (especially since it sounded like Kelly was  
volunteering for some work!) rather than put it off for one big chunk  
when we do a 3k migration.

Let's say you're writing a new Twisted application today.  You want to  
be prepared for the day when everything is new-style, but you also  
want to use existing Twisted functionality.  You're using some long- 
standing library class, that looks like this:

# in Twisted
class Library: pass

What do you do?  Well, the obvious upgrade path here is to make a  
class which (A) inherits from "Library" to get Twisted functionality  
and (B) inherits from "object" to get new-style-ness.  So you go ahead  
and write:

# in your application
class Application(object, Library): pass

... and that's great.  It works, your class is new-style, and it gets  
all the library functionality that you want.  Except now, you've made  
the old-style-ness of 'Library' a very important part of its  
interface.  If, one day, we flip any kind of new-style switch, instead  
of neatly defining a new-style twisted-using class, your code will do  
this instead:

Traceback (most recent call last):
   File "your-application.py", line 1, in <module>
     class Application(object, Library): pass
TypeError: Error when calling the metaclass bases
     Cannot create a consistent method resolution
order (MRO) for bases object, Library

I would really like a more abstract declaration that applications can  
use in the meanwhile, to get new-style semantics but still allow  
inheritable classes to evolve.

I suspect that we could do this with some kind of metaclass, but that  
seems ugly.  More reasonable, I imagine, would be something like:

class Application(newStyle(Library)): pass

and we could implement 'newStyle' to do something sane in the face of  
either an old-style or a new-style "Library" class.

Of course, there are still issues with behavior differences on  
decorators and so on, and so the same compatibility issues might still  
come up, but in my experience those issues are significantly less  
serious and easier to fix than "my entire program blows up and will  
not start unless I make all my classes old-style".


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091025/9b272f18/attachment.html>

From foom at fuhm.net  Sat Oct 24 23:50:15 2009
From: foom at fuhm.net (James Y Knight)
Date: Sun, 25 Oct 2009 01:50:15 -0400
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <6EE454CA-F803-4C6B-BE67-23B2078087B9@twistedmatrix.com>
References: <40b76abc0910240739w4c23108aoe5e7e933dda1ac83@mail.gmail.com>
	<20091024145011.11571.1125183848.divmod.xquotient.1491@localhost.localdomain>
	<6EE454CA-F803-4C6B-BE67-23B2078087B9@twistedmatrix.com>
Message-ID: <E486FA77-BDA0-4ADF-90E9-9E1D8E4E5273@fuhm.net>

On Oct 25, 2009, at 1:38 AM, Glyph Lefkowitz wrote:
> What do you do?  Well, the obvious upgrade path here is to make a  
> class which (A) inherits from "Library" to get Twisted functionality  
> and (B) inherits from "object" to get new-style-ness.  So you go  
> ahead and write:
>
> # in your application
> class Application(object, Library): pass

Maybe the answer "why not" is obvious and I should already know it,  
but wouldn't it be more obvious to write:
class Application(Library, object): pass
instead. That at least has the advantage of not blowing up if Library  
later becomes newstyle, right?

James
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091025/13a87d66/attachment-0001.html>

From glyph at twistedmatrix.com  Sun Oct 25 00:32:08 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 25 Oct 2009 02:32:08 -0400
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <E486FA77-BDA0-4ADF-90E9-9E1D8E4E5273@fuhm.net>
References: <40b76abc0910240739w4c23108aoe5e7e933dda1ac83@mail.gmail.com>
	<20091024145011.11571.1125183848.divmod.xquotient.1491@localhost.localdomain>
	<6EE454CA-F803-4C6B-BE67-23B2078087B9@twistedmatrix.com>
	<E486FA77-BDA0-4ADF-90E9-9E1D8E4E5273@fuhm.net>
Message-ID: <4FE7148D-78E9-48E8-B1D6-0B76B05D31D5@twistedmatrix.com>

On Oct 25, 2009, at 1:50 AM, James Y Knight wrote:

> On Oct 25, 2009, at 1:38 AM, Glyph Lefkowitz wrote:
>> What do you do?  Well, the obvious upgrade path here is to make a  
>> class which (A) inherits from "Library" to get Twisted  
>> functionality and (B) inherits from "object" to get new-style- 
>> ness.  So you go ahead and write:
>>
>> # in your application
>> class Application(object, Library): pass
>
> Maybe the answer "why not" is obvious and I should already know it,  
> but wouldn't it be more obvious to write:
> class Application(Library, object): pass
> instead. That at least has the advantage of not blowing up if  
> Library later becomes newstyle, right?

Huh.  You may have just pointed out that I misunderstand the algorithm  
used to generate that error.  I thought that certain other hierarchies  
in cases more complex than the trivial one I presented would also give  
you that error if something became new-style in the middle, but I  
can't seem to generate any hierarchies that cause a problem.  Is it  
really this simple?  Always put 'object' at the *end* of your bases- 
list to declare the intention "I want to be new-style" and you'll be  
OK?  (If so, why is that?)

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091025/6ee2a79e/attachment.html>

From dgriff1 at gmail.com  Sun Oct 25 09:17:35 2009
From: dgriff1 at gmail.com (Daniel Griffin)
Date: Sun, 25 Oct 2009 10:17:35 -0500
Subject: [Twisted-Python] Twisted Performance
In-Reply-To: <D9EA4D8F-B3CA-486A-86D0-5FB392A95294@twistedmatrix.com>
References: <3db160680910131944w7f101c1fhfd29dad00eb4dfe0@mail.gmail.com>
	<cedc0c090910140155l4bfd70eek364dca61c9ea2f44@mail.gmail.com>
	<80F2A1FE-BE1F-404F-BD29-21BA0B7B4D16@integrateddevcorp.com>
	<4AD67B2D.3050500@krondo.com>
	<4EBDD6C1-53B5-4CA9-AD44-205F5E101264@integrateddevcorp.com>
	<3db160680910241247q6825dca0j6dd7e4d0877bea13@mail.gmail.com>
	<D9EA4D8F-B3CA-486A-86D0-5FB392A95294@twistedmatrix.com>
Message-ID: <3db160680910250817l763e0c83hc505cb5776297238@mail.gmail.com>

Sure, I am not really finished with it yet. When I do get done I will do a
write up.


Dan

On Sun, Oct 25, 2009 at 12:15 AM, Glyph Lefkowitz
<glyph at twistedmatrix.com>wrote:

> On Oct 24, 2009, at 3:47 PM, Daniel Griffin wrote:
>
> > I ported my thread based socket code to twisted and have been happy
> > with my results. (...)
> > Basically its a huge win on every level.
> >
> > Thanks for all the help everyone.
>
> Glad to hear it!  Do you want to write up something more specific for
> the SuccessStories page?
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091025/9fb9c7b6/attachment.html>

From exarkun at twistedmatrix.com  Sun Oct 25 10:47:32 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 25 Oct 2009 16:47:32 -0000
Subject: [Twisted-Python] Handeling unresolved DNS queries?
In-Reply-To: <e78558910910241304j476d00c1k47a81ff9e00036d2@mail.gmail.com>
References: <e78558910910201250n270d329di7678454ad9d231b9@mail.gmail.com>
	<20091022135516.11571.1780136361.divmod.xquotient.1414@localhost.localdomain>
	<e78558910910220746hb112a81r292185addfd82dc2@mail.gmail.com>
	<20091022173150.11571.1534618114.divmod.xquotient.1432@localhost.localdomain>
	<e78558910910221200vc1b0229g5fae565c9c4e5fcd@mail.gmail.com>
	<20091022203806.11571.909308342.divmod.xquotient.1441@localhost.localdomain>
	<e78558910910221355h7f0f3233h4545302fef1adc7f@mail.gmail.com>
	<20091022231855.11571.1506567463.divmod.xquotient.1460@localhost.localdomain>
	<e78558910910241304j476d00c1k47a81ff9e00036d2@mail.gmail.com>
Message-ID: <20091025164732.11571.925103503.divmod.xquotient.1560@localhost.localdomain>

On 24 Oct, 08:04 pm, jesper at taxboel.dk wrote:
>Im looking at the common.py and I feel a bit confused about how to wrap 
>a
>resolver.
>
>Would'nt a subclass achieve the same thing. I would only need to 
>implement
>the changed functions in the subclass.
>
>I guess my problem is that I dont exactly know how to write a wrapper 
>in
>python.

There's nothing special to it.  Just do the obvious thing:

    class SomeWrapper:
        def __init__(self, wrapee):
            self.wrapee = wrapee

        def someMethod(self, args):
            do something with self.wrapee.someMethod and args

common.py will show you all the methods that a resolver is expected to 
have.  Subclassing ResolverBase might help, though it's unfortunate that 
it works by demultiplexing everything to "_lookup", a private method 
that Twisted's compatibility policy doesn't guarantee will continue to 
operate as it presently does.

Wrapping (ie "containment" or "has-a") is just an alternative 
implementation strategy to subclassing (ie "inheritance" or "is-a"). 
Generally it's a better approach for various reasons, none of which are 
really specific to Twisted.

Jean-Paul



From leyssw at ihug.co.nz  Mon Oct 26 00:49:52 2009
From: leyssw at ihug.co.nz (Tom Leys)
Date: Mon, 26 Oct 2009 19:49:52 +1300
Subject: [Twisted-Python] Gridspy - a new project using Twisted
Message-ID: <4AE54690.9030907@ihug.co.nz>

Hi Everyone

I would like to introduce my project for the 
http://twistedmatrix.com/trac/wiki/ProjectsUsingTwisted page. We use 
twisted as the central server that talks to many power measurement 
sensors in the field.

"
Gridspy provides you with an interactive view of resource usage in your 
building. It gives you hard data on your consumption patterns and helps 
you to make informed decisions.
...
The Gridspy allows you to access and monitor your consumption patterns 
in real-time using a standard web browser on your PC, laptop or mobile 
phone. The data is presented in high resolution and updated each second 
as you watch. The moment a light is turned on in your house, you can see 
the change on your Gridspy dashboard from across the room or across the 
planet.
"
Our homepage is here http://www.gridspy.co.nz/
a running demo is here http://your.gridspy.co.nz/powertech

And you can read more about the role of our twisted backend here: 
http://blog.gridspy.co.nz/2009/10/realtime-data-from-sensors-to-browsers.html

"
... The nexus then collects those sensor samples from the nearby 
Gridspies, bundles it up with its own data and uploads it to our central 
servers. To collect the data we use a custom application written using 
the excellent Twisted framework <http://twistedmatrix.com/>. Every 
single reading gets instant attention: it is evaluated for real-time 
events, queued to be stored in the database and finally forwarded to 
watching dashboard users. Processing the data stream live on the server 
opens up many exciting possible features that I look forward to 
discussing in future blog posts. By the time that the sample reaches the 
server, it is about 0.2 seconds old. ...
"

It has been a great framework to work with. My sincere thanks goes to 
everyone who has ever contributed to this project. Job very well done!

-Tom

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091026/cabfb146/attachment-0001.html>

From maarten at treewalker.org  Mon Oct 26 02:14:30 2009
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Mon, 26 Oct 2009 10:14:30 +0200
Subject: [Twisted-Python] Gridspy - a new project using Twisted
In-Reply-To: <4AE54690.9030907@ihug.co.nz>
References: <4AE54690.9030907@ihug.co.nz>
Message-ID: <200910260914.30601.maarten@treewalker.org>

On Monday 26 October 2009, Tom Leys wrote:

> Gridspy provides you with an interactive view of resource usage in your
> building. It gives you hard data on your consumption patterns and helps
> you to make informed decisions.

How can other people get their own Gridspy? Do you plan to release it as a 
do-it-yourself project or as a commercial product?

Bye,
		Maarten



From leyssw at ihug.co.nz  Mon Oct 26 13:48:27 2009
From: leyssw at ihug.co.nz (leyssw at ihug.co.nz)
Date: Tue, 27 Oct 2009 08:48:27 +1300
Subject: [Twisted-Python] Gridspy - a new project using Twisted
In-Reply-To: <mailman.1.1256572802.8027.twisted-python@twistedmatrix.com>
References: <mailman.1.1256572802.8027.twisted-python@twistedmatrix.com>
Message-ID: <db2bd63e8e0c97dfe4e73744a5872375@vodafone.co.nz>

Hi Maarten

The Gridspy is a commercial product. At the moment we are manufacturing
small runs of prototypes for development and testing, soon they will be
available from our site on-line.

We are making it "hacker friendly" and it has spare serial ports, digital
and analogue inputs so electronics enthusiasts can make their own daughter
boards. We hope it will then become a great way to take your inventions
on-line. 

We consider our "secret sauce" to be the core hardware and the uplink to
the web (including the twisted portion). Everything else on both ends will
be open (still development efforts needed on SDK and documentation). You
will be able to create an electronics gadget that sets the Gridspy / Nexus
analogue and digital inputs and see those inputs changing in some script
you wrote on the web via an RPC mechanism from our server. 

Right now our focus is on selling to commercial users here in Auckland, New
Zealand (keep it local) to test the hardware. As production scales up, the
pricing will become much more affordable for us normal people. 

Making our platform open and easy to work with is a cause close to my heart
too.

-Tom


> Message: 3
> Date: Mon, 26 Oct 2009 10:14:30 +0200
> From: Maarten ter Huurne <maarten at treewalker.org>
> Subject: Re: [Twisted-Python] Gridspy - a new project using Twisted
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Message-ID: <200910260914.30601.maarten at treewalker.org>
> Content-Type: Text/Plain;  charset="iso-8859-15"
> 
> On Monday 26 October 2009, Tom Leys wrote:
> 
>> Gridspy provides you with an interactive view of resource usage in your
>> building. It gives you hard data on your consumption patterns and helps
>> you to make informed decisions.
> 
> How can other people get their own Gridspy? Do you plan to release it as
a 
> do-it-yourself project or as a commercial product?
> 
> Bye,
> 		Maarten
> 
> 
> 
> ------------------------------
> 



From kevin.horn at gmail.com  Mon Oct 26 15:11:50 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 26 Oct 2009 16:11:50 -0500
Subject: [Twisted-Python] getting #2015 (Generic SASL library) moving
	again?
In-Reply-To: <562bcc10910051149h29cce9f0j6cca093016da99b2@mail.gmail.com>
References: <562bcc10910050934x18e7781dl5e40f4a61edda4e0@mail.gmail.com>
	<d9047f780910051132w78b29ca3n7a7d1e9c81fd97e6@mail.gmail.com>
	<562bcc10910051149h29cce9f0j6cca093016da99b2@mail.gmail.com>
Message-ID: <562bcc10910261411n2e8256d9q69f5a3b773a47170@mail.gmail.com>

On Mon, Oct 5, 2009 at 1:49 PM, Kevin Horn <kevin.horn at gmail.com> wrote:

> On Mon, Oct 5, 2009 at 1:32 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:
>
>> On Mon, Oct 5, 2009 at 12:34 PM, Kevin Horn <kevin.horn at gmail.com> wrote:
>>
>>> I'd like to see this ticket get moving again.
>>
>>
>> Excellent!
>>
>>
>>> I've gone over what's been done so far (and put my comments in the
>>> ticket), and it looks like everything is at least mostly ready to be merged
>>> into the Twisted trunk.
>>>
>>
>> Your analysis on the ticket looks fairly thorough.
>>
>
> Thanks!  Though, really I just went over the changesets that therve
> submitted, and checked them against exarkun's suggestions.
>
>
>>
>>
>>> So what else needs to be done to get this to happen?  I'm happy to try
>>> and get it done, but a little direction would be really handy. ;)
>>>
>>
>> The workflow is pretty simple.
>>
>>    1. author submits change
>>    2. reviewer reviews change
>>    3. someone responds to feedback
>>    4. "someone" becomes "author", repeat
>>
>> Right now we're stuck in the middle of step 3, but given that therve does
>> not appear to be actively working on this branch, the path forward is
>> clear.  *You* become "someone", and submit a patch that finishes dealing
>> with the issues that you have mentioned as not already taken care of by
>> therve's subsequent changesets.  The best way to do this is to submit a
>> patch against the branch, rather than against trunk.  Given such a patch, a
>> twisted committer can then apply the patch to the branch and submit to
>> buildbots (etc) as appropriate.  By submitting it against the branch, you
>> make it easy for the reviewer to examine the changes you're submitting in
>> isolation from the rest of the larger change, to see if they address the
>> points that you've brought up.
>>
>> If the reviewer is happy with your changes, then the patch + branch will
>> be immediately merged to trunk; of course, the next review might have a
>> little more feedback for you to deal with ;).
>>
>> Thanks for your interest!
>>
>>
> That's kind of what I figured.
>
> From my previous review of the current status, it looks pretty well done to
> me, but  I'll start taking a look at it in more detail, and see what I can
> come up with.  Might need some more tests, etc.
>
> Kevin "Someone" Horn
>

FYI, this ticket back up for review...

Kevin Horn

>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091026/dafbdfe4/attachment.html>

From glyph at twistedmatrix.com  Mon Oct 26 15:24:43 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 26 Oct 2009 17:24:43 -0400
Subject: [Twisted-Python] getting #2015 (Generic SASL library) moving
	again?
In-Reply-To: <562bcc10910261411n2e8256d9q69f5a3b773a47170@mail.gmail.com>
References: <562bcc10910050934x18e7781dl5e40f4a61edda4e0@mail.gmail.com>
	<d9047f780910051132w78b29ca3n7a7d1e9c81fd97e6@mail.gmail.com>
	<562bcc10910051149h29cce9f0j6cca093016da99b2@mail.gmail.com>
	<562bcc10910261411n2e8256d9q69f5a3b773a47170@mail.gmail.com>
Message-ID: <3BFE7682-36B1-43C6-A1ED-F5707C734306@twistedmatrix.com>

On Oct 26, 2009, at 5:11 PM, Kevin Horn wrote:

> FYI, this ticket back up for review...

Thanks!

Sorry about the review backlog; the core committers have all been  
pretty busy lately.  I'll try to get to this soon.




From jesper at taxboel.dk  Mon Oct 26 15:34:50 2009
From: jesper at taxboel.dk (=?ISO-8859-1?Q?Jesper_Taxb=F8l?=)
Date: Mon, 26 Oct 2009 22:34:50 +0100
Subject: [Twisted-Python] Handeling unresolved DNS queries?
In-Reply-To: <20091025164732.11571.925103503.divmod.xquotient.1560@localhost.localdomain>
References: <e78558910910201250n270d329di7678454ad9d231b9@mail.gmail.com>
	<20091022135516.11571.1780136361.divmod.xquotient.1414@localhost.localdomain>
	<e78558910910220746hb112a81r292185addfd82dc2@mail.gmail.com>
	<20091022173150.11571.1534618114.divmod.xquotient.1432@localhost.localdomain>
	<e78558910910221200vc1b0229g5fae565c9c4e5fcd@mail.gmail.com>
	<20091022203806.11571.909308342.divmod.xquotient.1441@localhost.localdomain>
	<e78558910910221355h7f0f3233h4545302fef1adc7f@mail.gmail.com>
	<20091022231855.11571.1506567463.divmod.xquotient.1460@localhost.localdomain>
	<e78558910910241304j476d00c1k47a81ff9e00036d2@mail.gmail.com>
	<20091025164732.11571.925103503.divmod.xquotient.1560@localhost.localdomain>
Message-ID: <e78558910910261434t6b9834b8m40a6b653cb55b98@mail.gmail.com>

First of all. Thanx for the help!!! The internet is just fantastic!!

I like the wrapper approach.

I had not thought of that approach myself. Sounds very reasonable. -So I
started wrapping Resolver, but got stuck pretty fast. I get a problem saying
that

'NoneType' object has no attribute 'addCallback'

"addCallback" seems to be implemented in defer.py, but im unsure on how to
handle that in the wrapper?

Kind regards

/Tax

P.S:
As a side question: In my old hack approach, which I have had almost
working, I have had problems constructing valid DNS answers. Wold you happen
to know what requirements there is to the returning package, to be accepted.

I made some attempts by using pickle to capture live packages, but have a
hard time tweaking other values than the address. Ideally I would like to
pass on a very short TTL, so the client would not be bothered by fake DNS
when I turn the system off.

As you might have guessed, Im building a gateway system for a small set of
apartments. Requirements are:

invalid domains should go to a shop
valid domains should be redirected to the shop if the client have not paid,
except if the query is for paypal.





2009/10/25 <exarkun at twistedmatrix.com>

> On 24 Oct, 08:04 pm, jesper at taxboel.dk wrote:
> >Im looking at the common.py and I feel a bit confused about how to wrap
> >a
> >resolver.
> >
> >Would'nt a subclass achieve the same thing. I would only need to
> >implement
> >the changed functions in the subclass.
> >
> >I guess my problem is that I dont exactly know how to write a wrapper
> >in
> >python.
>
> There's nothing special to it.  Just do the obvious thing:
>
>    class SomeWrapper:
>        def __init__(self, wrapee):
>            self.wrapee = wrapee
>
>        def someMethod(self, args):
>            do something with self.wrapee.someMethod and args
>
> common.py will show you all the methods that a resolver is expected to
> have.  Subclassing ResolverBase might help, though it's unfortunate that
> it works by demultiplexing everything to "_lookup", a private method
> that Twisted's compatibility policy doesn't guarantee will continue to
> operate as it presently does.
>
> Wrapping (ie "containment" or "has-a") is just an alternative
> implementation strategy to subclassing (ie "inheritance" or "is-a").
> Generally it's a better approach for various reasons, none of which are
> really specific to Twisted.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091026/a61330d8/attachment.html>

From namanvit at gmail.com  Mon Oct 26 23:44:54 2009
From: namanvit at gmail.com (naman jain)
Date: Tue, 27 Oct 2009 06:44:54 +0100
Subject: [Twisted-Python] Regarding Twisted Matrix
Message-ID: <74b1256b0910262244x24bebeadxa3154556496e69a3@mail.gmail.com>

Hi,

I have a client server model in twisted, where the server spawns a thread (
basically a test script in python that runs for about 20 mins)
I want to track the progress of the thread, and send the progress to the
client back

So, I write something like this in my server:

parent_conn, child_conn = Pipe()
thread = Process(target = start_test.main_func, args=(SCRIPT_PATH,
TEMP_OUTPUT_PATH, self.output_name, child_conn))
thread.start()

response = parent_conn.recv()
print response //prints like: initialization done
self.transport.write(response)


response = parent_conn.recv()
print response // configuration done
self.transport.write(response)

.
.
.

thread.join()


But the transport.write calls don't send at the same time. instead they wait
for the thread to finish (coz of thread.join) and then append all the
response and send it back; like "initialization doneconfiguration
done...done"
thereby defeating the purpose of creating a thread.

How do I give the control to the reactor to write the data back, and still
keep the thread running?
or is there any other way these kinda of progress can be tracked ?
I am kinda stuck with this :(
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091027/39bd7a94/attachment.html>

From nathan.stocks at gmail.com  Tue Oct 27 00:03:20 2009
From: nathan.stocks at gmail.com (Nathan)
Date: Tue, 27 Oct 2009 00:03:20 -0600
Subject: [Twisted-Python] Regarding Twisted Matrix
In-Reply-To: <74b1256b0910262244x24bebeadxa3154556496e69a3@mail.gmail.com>
References: <74b1256b0910262244x24bebeadxa3154556496e69a3@mail.gmail.com>
Message-ID: <96c9d6a80910262303t37028d1fwd578e73926154f03@mail.gmail.com>

On Mon, Oct 26, 2009 at 11:44 PM, naman jain <namanvit at gmail.com> wrote:
> Hi,
>
> I have a client server model in twisted, where the server spawns a thread (
> basically a test script in python that runs for about 20 mins)
> I want to track the progress of the thread, and send the progress to the
> client back
>
> So, I write something like this in my server:
>
> parent_conn, child_conn = Pipe()
> thread = Process(target = start_test.main_func, args=(SCRIPT_PATH,
> TEMP_OUTPUT_PATH, self.output_name, child_conn))
> thread.start()
>
> response = parent_conn.recv()
> print response //prints like: initialization done
> self.transport.write(response)
>
>
> response = parent_conn.recv()
> print response // configuration done
> self.transport.write(response)
>
> .
> .
> .
>
> thread.join()
>
>
> But the transport.write calls don't send at the same time. instead they wait
> for the thread to finish (coz of thread.join) and then append all the
> response and send it back; like "initialization doneconfiguration
> done...done"
> thereby defeating the purpose of creating a thread.
>
> How do I give the control to the reactor to write the data back, and still
> keep the thread running?
> or is there any other way these kinda of progress can be tracked ?
> I am kinda stuck with this :(

I'm no expert with threads, but I don't see any deferToThread in
there, which is what people on this list tend to mention whenever
threading comes up.  Perhaps you need to switch to the "twisted way"
to create your thread?

http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.threads.html

~ Nathan



From clemesha at gmail.com  Tue Oct 27 01:36:11 2009
From: clemesha at gmail.com (Alex Clemesha)
Date: Tue, 27 Oct 2009 00:36:11 -0700
Subject: [Twisted-Python] Can I post a consultant request here?
In-Reply-To: <EF928A00-AFA0-4529-AFC0-DDF1F26B2CF4@integrateddevcorp.com>
References: <EF928A00-AFA0-4529-AFC0-DDF1F26B2CF4@integrateddevcorp.com>
Message-ID: <d272f0690910270036v35845f4dna64d32591e9d0a18@mail.gmail.com>

Hi Steve,

>        I'm looking for a very short-term mentoring/consulting contract to
> help me get an Ajax/Comet type of connection working between a web
> interface and a fairly long-running, server-side process.
>
>        I want the web interface to reflect the server-side data as it
> becomes available.
>
>        I'm sure someone on this list knows exactly how to hook the pieces
> together; I don't.
>
>        It would be much more efficient to have someone who already knows
> help me hook it up instead of spending an unpredictable amount of time
> figuring it out myself.
>
>        I'd also like to have, as a primary product of this project, a
> tutorial showing a real-world application of Twisted to handle a
> modern, real-world use-case with full, open, well documented source
> code.

I wanted to mention a project that I've been hacking that I think fits
the bill of what you are looking for.  Here is my current description of
what it is: " A very complete example of how to a create a realtime
web application using Django + Orbited + Twisted."

Currently the code is a glorified example (it nearly could be called a
'complete app')
and that is: "Realtime Voting Both - Realtime Voting, Chatting, and
Editing Polls."

The code is here:
http://github.com/clemesha/hotdot

and it is basically a "larger, more complete example" than the one I
did some months
ago, described here (you (Steve) have made a couple very helpful
comments there so I
know that you know of it's existence):
http://clemesha.org/blog/2009/apr/23/Django-on-Twisted-using-latest-twisted-web-wsgi/


So, in the spirit of "release early and iterate", I invite you to go
play with it: http://github.com/clemesha/hotdot
It has some really cool parts (Django running from twisted.web.wsgi,
Orbited as a Twisted Service, authentication
using Twisted Cred+Django models, filtering/modification/logging of
in-transit Orbited messages, etc) but it is
also 'not done' and has some remaining 'crufty parts' (which others
might have great ideas on how to improve on :-).
I plan to continue to improve on it, and fairly soon I'll do a formal
write-up/blog-post on the whole thing, but for
now any feedback is appreciated.


-Alex



>
>        If you're interested, please contact me off-list at
> ssteinerx at gmail.com.
>
> Thanks,
>
> S


-- 
Alex Clemesha
clemesha.org



From k.kelly.gordon at gmail.com  Tue Oct 27 02:35:06 2009
From: k.kelly.gordon at gmail.com (Kelly)
Date: Tue, 27 Oct 2009 19:35:06 +1100
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <6EE454CA-F803-4C6B-BE67-23B2078087B9@twistedmatrix.com>
References: <40b76abc0910240739w4c23108aoe5e7e933dda1ac83@mail.gmail.com>
	<20091024145011.11571.1125183848.divmod.xquotient.1491@localhost.localdomain>
	<6EE454CA-F803-4C6B-BE67-23B2078087B9@twistedmatrix.com>
Message-ID: <40b76abc0910270135g48380e45u1bc8117e9dcb9403@mail.gmail.com>

On Sun, Oct 25, 2009 at 4:38 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> On Oct 24, 2009, at 10:50 AM, exarkun at twistedmatrix.com wrote:
>>
>> I think that we should consider requests to make specific classes new-
>> style (and grant them when doing so won't cause compatibility problems),
>> make all new classes new-style, but otherwise leave this alone until 3.x
>> is widely adopted.
>
> While your argument makes sense to me, there's a fundamental problem with
> the way Python introduced new-style classes that creates an ongoing
> maintenance tension.  I think we should start addressing the problem
> incrementally now (especially since it sounded like Kelly was volunteering
> for some work!) rather than put it off for one big chunk when we do a 3k
> migration.

Well yes I am.  I am hoping that the discussion will get to a point
where I understand what an acceptable solution might be, even if that
should be like exarkun said "leave it alone/migrate classes one at a
time".

>
> I would really like a more abstract declaration that applications can use in
> the meanwhile, to get new-style semantics but still allow inheritable
> classes to evolve.
>


As noted by James, users of the Twisted library can add object to the
end of their inheritance chain to get new style semantics for their
classes.  I was thinking more along the lines of being able to use
new-style stuff inside the Twisted library.



From k.kelly.gordon at gmail.com  Tue Oct 27 02:35:22 2009
From: k.kelly.gordon at gmail.com (Kelly)
Date: Tue, 27 Oct 2009 19:35:22 +1100
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <4FE7148D-78E9-48E8-B1D6-0B76B05D31D5@twistedmatrix.com>
References: <40b76abc0910240739w4c23108aoe5e7e933dda1ac83@mail.gmail.com>
	<20091024145011.11571.1125183848.divmod.xquotient.1491@localhost.localdomain>
	<6EE454CA-F803-4C6B-BE67-23B2078087B9@twistedmatrix.com>
	<E486FA77-BDA0-4ADF-90E9-9E1D8E4E5273@fuhm.net>
	<4FE7148D-78E9-48E8-B1D6-0B76B05D31D5@twistedmatrix.com>
Message-ID: <40b76abc0910270135h26cb1251ja1effe255fed8460@mail.gmail.com>

On Sun, Oct 25, 2009 at 5:32 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> On Oct 25, 2009, at 1:50 AM, James Y Knight wrote:
>
>> On Oct 25, 2009, at 1:38 AM, Glyph Lefkowitz wrote:
>>> # in your application
>>> class Application(object, Library): pass
>>
>> Maybe the answer "why not" is obvious and I should already know it, but
>> wouldn't it be more obvious to write:
>> class Application(Library, object): pass
>> instead. That at least has the advantage of not blowing up if Library later
>> becomes newstyle, right?
>
> Huh.  You may have just pointed out that I misunderstand the algorithm used
> to generate that error.  I thought that certain other hierarchies in cases
> more complex than the trivial one I presented would also give you that error
> if something became new-style in the middle, but I can't seem to generate
> any hierarchies that cause a problem.  Is it really this simple?  Always put
> 'object' at the *end* of your bases-list to declare the intention "I want to
> be new-style" and you'll be OK?  (If so, why is that?)

>From my understanding of the C3 algorithm, the relative order of
classes in a base class's mro will be preserved in classes that
inherit from it.  Since "object" inherits from nothing, it can always
be shunted to the end of the mro, provided it hasn't ever been
declared to be ahead of anything else.



From k.kelly.gordon at gmail.com  Tue Oct 27 02:38:02 2009
From: k.kelly.gordon at gmail.com (Kelly)
Date: Tue, 27 Oct 2009 19:38:02 +1100
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <20091024145011.11571.1125183848.divmod.xquotient.1491@localhost.localdomain>
References: <40b76abc0910240739w4c23108aoe5e7e933dda1ac83@mail.gmail.com>
	<20091024145011.11571.1125183848.divmod.xquotient.1491@localhost.localdomain>
Message-ID: <40b76abc0910270138p711d33ddjf55c76e23673d74b@mail.gmail.com>

On Sun, Oct 25, 2009 at 1:50 AM,  <exarkun at twistedmatrix.com> wrote:
> On 02:39 pm, k.kelly.gordon at gmail.com wrote:
>> On Thu Oct 8 20:08:12 EDT 2009, Glyph Lefkowitz
>> <glyph at twistedmatrix.com> wrote:
>>> If old-style classes can be evolved into new-style classes while
>>> somehow following this policy, that would be great.


>> I have some POC code for this.  It provides a simple toggle at the
>> start of the application to select between old style (the default)
>> and new style classes.  After that, a DeprecationWarning is issued
>> every time an old style class is defined.


> Process-wide switches are tricky.  Some code may decide it wants
> new-style, while other code wants to stick with classic.  They have
> a fight, one of them loses.  I think that adding this is just an
> invitation for people to create more problems.


I guess that would be a problem if an application used two libraries
that use Twisted and each initialised Twisted differently.  However, I
was thinking this would be something that should only be called by
the application (ie the thing with #! at the top)

Roughly speaking - in the Twisted library:

    from twisted.object import ClassStyle

    class MustBeOldStyle(ClassStyle.old): pass

    class DoesntMatter(ClassStyle.default): pass


In the application's top level file:

    #!/usr/bin/env python

    from twisted.object import ClassStyle

    ClassStyle.use_old_style()
    # or
    ClassStyle.use_new_style()


Which would have the effect flipping ClassStyle.default between old
and new style.  Once set it can't be changed which is why it needs to
be done before any Twisted classes are defined.

>
> I think that we should consider requests to make specific classes
> new-style (and grant them when doing so won't cause compatibility
> problems), make all new classes new-style, but otherwise leave
> this alone until 3.x is widely adopted.
>
> Jean-Paul


How could that be done in a way that was consistent with the
deprecation policy?  ie how could a warning be issued: "this class
will be new style in a couple of releases", such that the developer
could "fix" their code to remove the warning?

Changing from old-style to new-style changes a number of class
behaviours (notably: mro, __coerce__, assignment to Class.__dict__
and Class.__bases__), so its not really something that can be done
silently to any class that might be inherited from.

Presumably there will be a period when Twisted works on both 2.x and
3.x.  At that point there will be two sets of users,  the 3.x's that
use only new-style classes and the 2.x's for which Twisted classes
may be either old or new.  It would probably be better to have
switched to new-style before then and only have to support the use
of new style classes.



From don at delphexonline.com  Tue Oct 27 04:14:52 2009
From: don at delphexonline.com (Don Schoeman)
Date: Tue, 27 Oct 2009 12:14:52 +0200
Subject: [Twisted-Python] You guys are my heroes
Message-ID: <4AE6C81C.1050106@delphexonline.com>

Just as the subject says... you guys (everyone involved with TM) are my
heroes.

Problem:
I needed to develop a TCP server that could serve multiple GPS tracking
devices over GPRS. These devices uses a multi-level (structures within
structures) style binary protocol. I looked at various possible
solutions which handled the complex asynchronous processing while I
could concentrate on implementing the protocol. Time was of the essence
(as it always is).

Solution:
I finally ran into Twisted Matrix and it immediately looked very
promising. Only problem was that I didn't know Python at the time and
looking at it for the first time I couldn't make heads or tails out of
it. (I come from a Delphi background but knows a bit of C, PHP and Java
as well). Anyway, after about a week of straining the old brain I not
only managed to learn the basics of Python, but wrote my first concept
server in TM and through it all learned to come to love both of these
solutions very much!

Final Verdict:
About a month down the line my now completed server is running as smooth
as butter handling an ever growing number of unit's just lovely. The
data, once parsed is all pushed to a Apache/PHP based server via XML-RPC
which in turn performs all the database related stuff. Thanks for all
your hard work guys, it is noticed and deeply, deeply appreciated!

Kind Regards,
Don Schoeman






From namanvit at gmail.com  Tue Oct 27 04:35:49 2009
From: namanvit at gmail.com (naman jain)
Date: Tue, 27 Oct 2009 11:35:49 +0100
Subject: [Twisted-Python] Regarding Twisted Matrix
In-Reply-To: <96c9d6a80910262303t37028d1fwd578e73926154f03@mail.gmail.com>
References: <74b1256b0910262244x24bebeadxa3154556496e69a3@mail.gmail.com>
	<96c9d6a80910262303t37028d1fwd578e73926154f03@mail.gmail.com>
Message-ID: <74b1256b0910270335w4eed529ey74b99997fa3dcafe@mail.gmail.com>

I tried to implement this:

parent_conn, child_conn = Pipe()

f = defer.Deferred()
f = threads.deferToThread(start_test.main_func, SCRIPT_PATH,
TEMP_OUTPUT_PATH, self.output_name, child_conn)

response = parent_conn.recv()
print response //prints like: initialization done
self.transport.write(response)

response = parent_conn.recv()
print response // configuration done
self.transport.write(response)

But get the same output ie all status messages concatenated and sent at
once.!

[Do we need to put some deffered/callback  mechanism on parent_conn.recv()
??
as that is the call blocking the thread waiting for reading.]

Any ideas ? How is such stuff done in twisted servers??

Naman


On Tue, Oct 27, 2009 at 7:03 AM, Nathan <nathan.stocks at gmail.com> wrote:

> On Mon, Oct 26, 2009 at 11:44 PM, naman jain <namanvit at gmail.com> wrote:
> > Hi,
> >
> > I have a client server model in twisted, where the server spawns a thread
> (
> > basically a test script in python that runs for about 20 mins)
> > I want to track the progress of the thread, and send the progress to the
> > client back
> >
> > So, I write something like this in my server:
> >
> > parent_conn, child_conn = Pipe()
> > thread = Process(target = start_test.main_func, args=(SCRIPT_PATH,
> > TEMP_OUTPUT_PATH, self.output_name, child_conn))
> > thread.start()
> >
> > response = parent_conn.recv()
> > print response //prints like: initialization done
> > self.transport.write(response)
> >
> >
> > response = parent_conn.recv()
> > print response // configuration done
> > self.transport.write(response)
> >
> > .
> > .
> > .
> >
> > thread.join()
> >
> >
> > But the transport.write calls don't send at the same time. instead they
> wait
> > for the thread to finish (coz of thread.join) and then append all the
> > response and send it back; like "initialization doneconfiguration
> > done...done"
> > thereby defeating the purpose of creating a thread.
> >
> > How do I give the control to the reactor to write the data back, and
> still
> > keep the thread running?
> > or is there any other way these kinda of progress can be tracked ?
> > I am kinda stuck with this :(
>
> I'm no expert with threads, but I don't see any deferToThread in
> there, which is what people on this list tend to mention whenever
> threading comes up.  Perhaps you need to switch to the "twisted way"
> to create your thread?
>
> http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.threads.html
>
> ~ Nathan
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091027/4fa18fef/attachment.html>

From rlotun at gmail.com  Tue Oct 27 05:57:11 2009
From: rlotun at gmail.com (Reza Lotun)
Date: Tue, 27 Oct 2009 12:57:11 +0100
Subject: [Twisted-Python] Regarding Twisted Matrix
In-Reply-To: <74b1256b0910270335w4eed529ey74b99997fa3dcafe@mail.gmail.com>
References: <74b1256b0910262244x24bebeadxa3154556496e69a3@mail.gmail.com>
	<96c9d6a80910262303t37028d1fwd578e73926154f03@mail.gmail.com>
	<74b1256b0910270335w4eed529ey74b99997fa3dcafe@mail.gmail.com>
Message-ID: <95bb10690910270457h3a8e3250ref53977077627c84@mail.gmail.com>

Hi Naman,

> I tried to implement this:
>
> parent_conn, child_conn = Pipe()
>
> f = defer.Deferred()
> f = threads.deferToThread(start_test.main_func, SCRIPT_PATH,
> TEMP_OUTPUT_PATH, self.output_name, child_conn)

Do you really want to spawn a thread or a process? Since it seems like
you're trying to run a python script, you'd want to spawn a process
(since it also looks like you want to use a pipe for communication
with that process). Twisted has support for spawning processes - see
reactor.spawnProcess and ProcessProtocol:
http://twistedmatrix.com/projects/core/documentation/howto/process.html#auto2

Cheers,
Reza

-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   reza at tweetdeck.com
twitter: @rlotun



From exarkun at twistedmatrix.com  Tue Oct 27 06:17:02 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 27 Oct 2009 12:17:02 -0000
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <40b76abc0910270138p711d33ddjf55c76e23673d74b@mail.gmail.com>
References: <40b76abc0910240739w4c23108aoe5e7e933dda1ac83@mail.gmail.com>
	<20091024145011.11571.1125183848.divmod.xquotient.1491@localhost.localdomain>
	<40b76abc0910270138p711d33ddjf55c76e23673d74b@mail.gmail.com>
Message-ID: <20091027121702.31526.1705363637.divmod.xquotient.120@localhost.localdomain>

On 08:38 am, k.kelly.gordon at gmail.com wrote:
>On Sun, Oct 25, 2009 at 1:50 AM,  <exarkun at twistedmatrix.com> wrote:
>>On 02:39 pm, k.kelly.gordon at gmail.com wrote:
>>>On Thu Oct 8 20:08:12 EDT 2009, Glyph Lefkowitz
>>><glyph at twistedmatrix.com> wrote:
>>>>If old-style classes can be evolved into new-style classes while
>>>>somehow following this policy, that would be great.
>
>>>I have some POC code for this.  It provides a simple toggle at the
>>>start of the application to select between old style (the default)
>>>and new style classes.  After that, a DeprecationWarning is issued
>>>every time an old style class is defined.
>
>>Process-wide switches are tricky.  Some code may decide it wants
>>new-style, while other code wants to stick with classic.  They have
>>a fight, one of them loses.  I think that adding this is just an
>>invitation for people to create more problems.
>
>
>I guess that would be a problem if an application used two libraries
>that use Twisted and each initialised Twisted differently.  However, I
>was thinking this would be something that should only be called by
>the application (ie the thing with #! at the top)
>
>Roughly speaking - in the Twisted library:
>
>    from twisted.object import ClassStyle
>
>    class MustBeOldStyle(ClassStyle.old): pass
>
>    class DoesntMatter(ClassStyle.default): pass
>
>
>In the application's top level file:
>
>    #!/usr/bin/env python
>
>    from twisted.object import ClassStyle
>
>    ClassStyle.use_old_style()
>    # or
>    ClassStyle.use_new_style()
>
>
>Which would have the effect flipping ClassStyle.default between old
>and new style.  Once set it can't be changed which is why it needs to
>be done before any Twisted classes are defined.
>>
>>I think that we should consider requests to make specific classes
>>new-style (and grant them when doing so won't cause compatibility
>>problems), make all new classes new-style, but otherwise leave
>>this alone until 3.x is widely adopted.
>>
>>Jean-Paul
>
>
>How could that be done in a way that was consistent with the
>deprecation policy?  ie how could a warning be issued: "this class
>will be new style in a couple of releases", such that the developer
>could "fix" their code to remove the warning?
>
>Changing from old-style to new-style changes a number of class
>behaviours (notably: mro, __coerce__, assignment to Class.__dict__
>and Class.__bases__), so its not really something that can be done
>silently to any class that might be inherited from.

Actually, I was thinking that we would only do it to classes that can 
not be inherited from.  For example, no one's really supposed to be 
subclassing Deferred, so we might consider making Deferred new-style 
(perhaps for performance reasons, for example).
>Presumably there will be a period when Twisted works on both 2.x and
>3.x.

I think it is still early to presume this. :)
>At that point there will be two sets of users,  the 3.x's that
>use only new-style classes and the 2.x's for which Twisted classes
>may be either old or new.  It would probably be better to have
>switched to new-style before then and only have to support the use
>of new style classes.

But, presuming this :) I don't think we need to have switched to new- 
style classes for support this scenario.  We only have to have written 
all our code such that it continues to work even when there are no 
longer any classic classes.  I think that the majority of code in 
Twisted already works even if you flip the new-style switch.  We just 
need to identify and fix the few places that don't.
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From listsin at integrateddevcorp.com  Tue Oct 27 08:32:56 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Tue, 27 Oct 2009 10:32:56 -0400
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <20091027121702.31526.1705363637.divmod.xquotient.120@localhost.localdomain>
References: <40b76abc0910240739w4c23108aoe5e7e933dda1ac83@mail.gmail.com>
	<20091024145011.11571.1125183848.divmod.xquotient.1491@localhost.localdomain>
	<40b76abc0910270138p711d33ddjf55c76e23673d74b@mail.gmail.com>
	<20091027121702.31526.1705363637.divmod.xquotient.120@localhost.localdomain>
Message-ID: <DA54C26A-4111-4108-85BB-1D32717D6E71@integrateddevcorp.com>


On Oct 27, 2009, at 8:17 AM, exarkun at twistedmatrix.com wrote:
>> At that point there will be two sets of users,  the 3.x's that
>> use only new-style classes and the 2.x's for which Twisted classes
>> may be either old or new.  It would probably be better to have
>> switched to new-style before then and only have to support the use
>> of new style classes.
>
> But, presuming this :) I don't think we need to have switched to new-
> style classes for support this scenario.  We only have to have written
> all our code such that it continues to work even when there are no
> longer any classic classes.  I think that the majority of code in
> Twisted already works even if you flip the new-style switch.  We just
> need to identify and fix the few places that don't.

Is this something that can be handled by just running the tests with  
the right switch so we can see everything that passes without the  
switch but doesn't with?

Is there a "new-style" switch or just -3?

S




From vpogrebi at verizon.net  Tue Oct 27 08:49:57 2009
From: vpogrebi at verizon.net (Valeriy Pogrebitskiy)
Date: Tue, 27 Oct 2009 10:49:57 -0400
Subject: [Twisted-Python] Regarding Twisted Matrix
In-Reply-To: <74b1256b0910262244x24bebeadxa3154556496e69a3@mail.gmail.com>
Message-ID: <E76556F2CE4A41DAA8F218E2EA68D6F5@valeriy>

Naman,

 

Using threads - is not a good way of testing Twisted code. Instead, you can
implement unit test script (using twisted.trial.unittest) - implementing
test versions of your Twisted server and/or client class(es). This can be
done by extending original class(es) and overwriting appropriate methods
(like connectionMade(), connectionLost(), dataReceived(), etc.) - by adding
deferreds and executing callbacks when given event occurs. These callbacks
would be methods within your unittest script (these deferreds would be
instantiated and added to these classes by the test script) - thus allowing
you to test client's or server's behavior, or track progress

 

Kind regards,

 

Valeriy Pogrebitskiy

Email: vpogrebi at iname.com

 

 

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of naman jain
Sent: Tuesday, October 27, 2009 1:45 AM
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] Regarding Twisted Matrix

 

Hi,

I have a client server model in twisted, where the server spawns a thread (
basically a test script in python that runs for about 20 mins)
I want to track the progress of the thread, and send the progress to the
client back

So, I write something like this in my server:

parent_conn, child_conn = Pipe()
thread = Process(target = start_test.main_func, args=(SCRIPT_PATH,
TEMP_OUTPUT_PATH, self.output_name, child_conn))
thread.start()

response = parent_conn.recv()
print response //prints like: initialization done
self.transport.write(response)
                

response = parent_conn.recv()
print response // configuration done
self.transport.write(response)

.
.
.
                
thread.join()


But the transport.write calls don't send at the same time. instead they wait
for the thread to finish (coz of thread.join) and then append all the
response and send it back; like "initialization doneconfiguration
done...done"
thereby defeating the purpose of creating a thread.

How do I give the control to the reactor to write the data back, and still
keep the thread running?
or is there any other way these kinda of progress can be tracked ?
I am kinda stuck with this :(

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091027/ebc6eede/attachment.html>

From vpogrebi at verizon.net  Tue Oct 27 09:31:03 2009
From: vpogrebi at verizon.net (Valeriy Pogrebitskiy)
Date: Tue, 27 Oct 2009 11:31:03 -0400
Subject: [Twisted-Python] Regarding Twisted Matrix
In-Reply-To: <74b1256b0910270335w4eed529ey74b99997fa3dcafe@mail.gmail.com>
Message-ID: <E0465CB5C1DD4B0FA4E2C1BC650E85A1@valeriy>

Naman,

 

Another problem you might (possibly) be encountering - is the way your
server and/or client protocol is implemented. If you just inherit from
"plain" twisted.internet.protocol.Protocol - you are automatically using
write () and dataReceived() methods that do not implement buffering (it is
left up to developer). To enforce that line (string) oriented communication
works correctly - you might want to refactor to use
twisted.protocols.basic.LineReceiver instead. 

 

Kind regards,

 

Valeriy Pogrebitskiy

Email: vpogrebi at iname.com

 

 

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of naman jain
Sent: Tuesday, October 27, 2009 6:36 AM
To: Twisted general discussion
Subject: Re: [Twisted-Python] Regarding Twisted Matrix

 

I tried to implement this:

parent_conn, child_conn = Pipe()

f = defer.Deferred()
f = threads.deferToThread(start_test.main_func, SCRIPT_PATH,
TEMP_OUTPUT_PATH, self.output_name, child_conn)

response = parent_conn.recv()
print response //prints like: initialization done
self.transport.write(response)

response = parent_conn.recv()
print response // configuration done
self.transport.write(response)

But get the same output ie all status messages concatenated and sent at
once.!

[Do we need to put some deffered/callback  mechanism on parent_conn.recv()
??
as that is the call blocking the thread waiting for reading.]

Any ideas ? How is such stuff done in twisted servers??

Naman



On Tue, Oct 27, 2009 at 7:03 AM, Nathan <nathan.stocks at gmail.com> wrote:

On Mon, Oct 26, 2009 at 11:44 PM, naman jain <namanvit at gmail.com> wrote:
> Hi,
>
> I have a client server model in twisted, where the server spawns a thread
(
> basically a test script in python that runs for about 20 mins)
> I want to track the progress of the thread, and send the progress to the
> client back
>
> So, I write something like this in my server:
>
> parent_conn, child_conn = Pipe()
> thread = Process(target = start_test.main_func, args=(SCRIPT_PATH,
> TEMP_OUTPUT_PATH, self.output_name, child_conn))
> thread.start()
>
> response = parent_conn.recv()
> print response //prints like: initialization done
> self.transport.write(response)
>
>
> response = parent_conn.recv()
> print response // configuration done
> self.transport.write(response)
>
> .
> .
> .
>
> thread.join()
>
>
> But the transport.write calls don't send at the same time. instead they
wait
> for the thread to finish (coz of thread.join) and then append all the
> response and send it back; like "initialization doneconfiguration
> done...done"
> thereby defeating the purpose of creating a thread.
>
> How do I give the control to the reactor to write the data back, and still
> keep the thread running?
> or is there any other way these kinda of progress can be tracked ?
> I am kinda stuck with this :(

I'm no expert with threads, but I don't see any deferToThread in
there, which is what people on this list tend to mention whenever
threading comes up.  Perhaps you need to switch to the "twisted way"
to create your thread?

http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.threads.html

~ Nathan


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091027/574eaf7a/attachment.html>

From foom at fuhm.net  Tue Oct 27 09:39:22 2009
From: foom at fuhm.net (James Y Knight)
Date: Tue, 27 Oct 2009 11:39:22 -0400
Subject: [Twisted-Python] Phasing out old-style classes
In-Reply-To: <DA54C26A-4111-4108-85BB-1D32717D6E71@integrateddevcorp.com>
References: <40b76abc0910240739w4c23108aoe5e7e933dda1ac83@mail.gmail.com>
	<20091024145011.11571.1125183848.divmod.xquotient.1491@localhost.localdomain>
	<40b76abc0910270138p711d33ddjf55c76e23673d74b@mail.gmail.com>
	<20091027121702.31526.1705363637.divmod.xquotient.120@localhost.localdomain>
	<DA54C26A-4111-4108-85BB-1D32717D6E71@integrateddevcorp.com>
Message-ID: <D2FFDB0A-4D45-4530-B3C8-EAE111B1BD1B@fuhm.net>

On Oct 27, 2009, at 10:32 AM, Steve Steiner (listsin) wrote:
> Is this something that can be handled by just running the tests with
> the right switch so we can see everything that passes without the
> switch but doesn't with?
>
> Is there a "new-style" switch or just -3?


Download:
http://twistedmatrix.com/trac/browser/sandbox/foom/newstyler.py?format=txt

And, before importing anything from twisted, run:
   import newstyler
   newstyler.newstyle_prefix('twisted')

Or (perhaps easier), you could put those statements in your copy of  
twisted/__init__.py before it does anything else.

I haven't run the tests to see what breaks; I'll leave that to you. :)

James




From clemesha at gmail.com  Tue Oct 27 15:11:48 2009
From: clemesha at gmail.com (Alex Clemesha)
Date: Tue, 27 Oct 2009 14:11:48 -0700
Subject: [Twisted-Python] Hotdot
In-Reply-To: <4ae73945.34d.6b08.1310339097@webmaildh6.aruba.it>
References: <4ae73945.34d.6b08.1310339097@webmaildh6.aruba.it>
Message-ID: <d272f0690910271411q27f5f766tb5b5f4287ebee62c@mail.gmail.com>

Run the example *not* as root, then it will work. sys.path is
different for the root user, that is the problem.

-Alex



On Tue, Oct 27, 2009 at 11:17 AM, Alfredo Veltri
<alfredo.veltri at digitalia.it> wrote:
> Hi Alex,
> i'm trying with hotdot.
> i receive the following errors. Would help me about that?
> Thanks in advance.
>
> root at myhome:/var/www/clemesha-hotdot-522849b/djangoweb# cd
> .
>
> root at myhome:/var/www/clemesha-hotdot-522849b# ls
>
> djangoweb  README.rst  realtime  server.py  static
>
> root at myhome:/var/www/clemesha-hotdot-522849b# twistd -ny
> server.py
>
> Traceback (most recent call last):
>  File
> "/usr/local/lib/python2.6/dist-packages/Twisted-8.2.0_r27386-py2.6-linux-i686.egg/twisted/application/app.py"
> , line 690, in run
>    runApp(config)
>  File
> "/usr/local/lib/python2.6/dist-packages/Twisted-8.2.0_r27386-py2.6-linux-i686.egg/twisted/scripts/twistd.py"
> , line 23, in runApp
>    _SomeApplicationRunner(config).run()
>  File
> "/usr/local/lib/python2.6/dist-packages/Twisted-8.2.0_r27386-py2.6-linux-i686.egg/twisted/application/app.py"
> , line 411, in run
>    self.application = self.createOrGetApplication()
>  File
> "/usr/local/lib/python2.6/dist-packages/Twisted-8.2.0_r27386-py2.6-linux-i686.egg/twisted/application/app.py"
> , line 494, in createOrGetApplication
>    application = getApplication(self.config, passphrase)
> --- <exception caught here> ---
>  File
> "/usr/local/lib/python2.6/dist-packages/Twisted-8.2.0_r27386-py2.6-linux-i686.egg/twisted/application/app.py"
> , line 505, in getApplication
>    application = service.loadApplication(filename, style,
> passphrase)
>  File
> "/usr/local/lib/python2.6/dist-packages/Twisted-8.2.0_r27386-py2.6-linux-i686.egg/twisted/application/service.py"
> , line 390, in loadApplication
>    application = sob.loadValueFromFile(filename,
> 'application', passphrase)
>  File
> "/usr/local/lib/python2.6/dist-packages/Twisted-8.2.0_r27386-py2.6-linux-i686.egg/twisted/persisted/sob.py"
> , line 210, in loadValueFromFile
>    exec fileObj in d, d
>  File "server.py", line 25, in <module>
>    from djangoweb.twisted_wsgi import get_root_resource
> exceptions.ImportError: No module named
> djangoweb.twisted_wsgi
>
> Failed to load application: No module named
> djangoweb.twisted_wsgi
>
>



-- 
Alex Clemesha
clemesha.org



From namanvit at gmail.com  Wed Oct 28 05:04:52 2009
From: namanvit at gmail.com (naman jain)
Date: Wed, 28 Oct 2009 12:04:52 +0100
Subject: [Twisted-Python] Regarding Twisted Matrix
In-Reply-To: <E0465CB5C1DD4B0FA4E2C1BC650E85A1@valeriy>
References: <74b1256b0910270335w4eed529ey74b99997fa3dcafe@mail.gmail.com>
	<E0465CB5C1DD4B0FA4E2C1BC650E85A1@valeriy>
Message-ID: <74b1256b0910280404k6e1c486dm8e71fcdaa827979e@mail.gmail.com>

Hey guys,

Thanks for your responses.
Nathan your pointer to the "deferToThread" really helped.

I finally did this:

ran my external script in a thread using:
threads.deferToThread(test.main....)

and started a function called status_check in another thread
threads.deferToThread(self.check_status)

then immidiately returned control to reactor.

def check_status:
                self.testprocess_status = self.parent_conn.recv()

now, this call on pipe blocks the thread not the reactor main loop.
in the reactor when the value is changed of this self.testprocess_status I
ping my client with the new status.

"Threads are twisted :)"

Thanks
Naman

On Tue, Oct 27, 2009 at 4:31 PM, Valeriy Pogrebitskiy
<vpogrebi at verizon.net>wrote:


> Naman,
>
>
>
> Another problem you might (possibly) be encountering – is the way your
> server and/or client protocol is implemented. If you just inherit from
> “plain” twisted.internet.protocol.Protocol – you are automatically using
> write () and dataReceived() methods that do not implement buffering (it is
> left up to developer). To enforce that line (string) oriented communication
> works correctly – you might want to refactor to use
> twisted.protocols.basic.LineReceiver instead.
>
>
>
> Kind regards,
>
>
>
> Valeriy Pogrebitskiy
>
> Email: vpogrebi at iname.com
>
>
>
>
>
> -----Original Message-----
> *From:* twisted-python-bounces at twistedmatrix.com [mailto:
> twisted-python-bounces at twistedmatrix.com] *On Behalf Of *naman jain
> *Sent:* Tuesday, October 27, 2009 6:36 AM
> *To:* Twisted general discussion
> *Subject:* Re: [Twisted-Python] Regarding Twisted Matrix
>
>
>
> I tried to implement this:
>
> parent_conn, child_conn = Pipe()
>
> f = defer.Deferred()
> f = threads.deferToThread(start_test.main_func, SCRIPT_PATH,
> TEMP_OUTPUT_PATH, self.output_name, child_conn)
>
> response = parent_conn.recv()
> print response //prints like: initialization done
> self.transport.write(response)
>
> response = parent_conn.recv()
> print response // configuration done
> self.transport.write(response)
>
> But get the same output ie all status messages concatenated and sent at
> once.!
>
> [Do we need to put some deffered/callback  mechanism on parent_conn.recv()
> ??
> as that is the call blocking the thread waiting for reading.]
>
> Any ideas ? How is such stuff done in twisted servers??
>
> Naman
>
>  On Tue, Oct 27, 2009 at 7:03 AM, Nathan <nathan.stocks at gmail.com> wrote:
>
> On Mon, Oct 26, 2009 at 11:44 PM, naman jain <namanvit at gmail.com> wrote:
> > Hi,
> >
> > I have a client server model in twisted, where the server spawns a thread
> (
> > basically a test script in python that runs for about 20 mins)
> > I want to track the progress of the thread, and send the progress to the
> > client back
> >
> > So, I write something like this in my server:
> >
> > parent_conn, child_conn = Pipe()
> > thread = Process(target = start_test.main_func, args=(SCRIPT_PATH,
> > TEMP_OUTPUT_PATH, self.output_name, child_conn))
> > thread.start()
> >
> > response = parent_conn.recv()
> > print response //prints like: initialization done
> > self.transport.write(response)
> >
> >
> > response = parent_conn.recv()
> > print response // configuration done
> > self.transport.write(response)
> >
> > .
> > .
> > .
> >
> > thread.join()
> >
> >
> > But the transport.write calls don't send at the same time. instead they
> wait
> > for the thread to finish (coz of thread.join) and then append all the
> > response and send it back; like "initialization doneconfiguration
> > done...done"
> > thereby defeating the purpose of creating a thread.
> >
> > How do I give the control to the reactor to write the data back, and
> still
> > keep the thread running?
> > or is there any other way these kinda of progress can be tracked ?
> > I am kinda stuck with this :(
>
> I'm no expert with threads, but I don't see any deferToThread in
> there, which is what people on this list tend to mention whenever
> threading comes up.  Perhaps you need to switch to the "twisted way"
> to create your thread?
>
> http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.threads.html
>
> ~ Nathan
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091028/cf2078f3/attachment-0001.html>

From ellisonbg.net at gmail.com  Wed Oct 28 15:48:59 2009
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Wed, 28 Oct 2009 14:48:59 -0700
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <20091008032822.GQ1931@steerpike.home.puzzling.org>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>
	<a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
	<5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
	<12aaa0810910072008o5b6af468u9f78e29b385f9323@mail.gmail.com>
	<20091008032822.GQ1931@steerpike.home.puzzling.org>
Message-ID: <6ce0ac130910281448m2896e797oc6fdf762f300d0a3@mail.gmail.com>

I have been using Twisted for years but only recently began to use
inlineCallbacks (couldn't give up Python 2.4 support until recently).  This
simple asynch. sleep function is fantastic.  Just today I used to it with
inlineCallbacks to dramatically clean up some complex deferred logic.
Thanks,

Brian

On Wed, Oct 7, 2009 at 8:28 PM, Andrew Bennetts <andrew at bemusement.org>wrote:

> Mikhail Terekhov wrote:
> >    On Wed, Oct 7, 2009 at 6:04 PM, Phil Christensen <[1]
> phil at bubblehouse.org>
> >    wrote:
> >
> >      Paul's example will work just fine. Also, AFAIK there's no existing
> >      twisted function to do replicate an asynchronous sleep() in this
> way.
> >
> >      -phil
> >
> >    What about Deferred.setTimeout?
> >    [2]
> http://twistedmatrix.com/documents/current/api/twisted.internet.defer.Deferred.html#setTimeout
> >    IMHO it solves similar problem.
>
> Deferred.setTimeout is a poor API and is deprecated (despite what the
> automatically generated API docs think).
> <http://twistedmatrix.com/trac/ticket/178> has some discussion (and links
> to
> more discussion) explaining what's wrong with it, and what a good
> replacement
> would look like.
>
> So please, don't use setTimeout, and definitely do not recommend it to
> others!
>
> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091028/f4dee4a3/attachment-0001.html>

From glyph at twistedmatrix.com  Thu Oct 29 02:06:11 2009
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 29 Oct 2009 04:06:11 -0400
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <6ce0ac130910281448m2896e797oc6fdf762f300d0a3@mail.gmail.com>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>
	<a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
	<5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
	<12aaa0810910072008o5b6af468u9f78e29b385f9323@mail.gmail.com>
	<20091008032822.GQ1931@steerpike.home.puzzling.org>
	<6ce0ac130910281448m2896e797oc6fdf762f300d0a3@mail.gmail.com>
Message-ID: <5245EDB8-EDFC-44D1-959A-47C1377FA28B@twistedmatrix.com>

Hi Brian,

In general, please reply on this list inline, with quoting and  
trimming, like so:

     http://en.wikipedia.org/wiki/Posting_style#Inline_replying

This might seem like a minor thing, but it really helps those of us  
who have to follow long discussions and many mailing lists.

Now, on to the main point of your message:

On Oct 28, 2009, at 5:48 PM, Brian Granger wrote:

> I have been using Twisted for years but only recently began to use  
> inlineCallbacks (couldn't give up Python 2.4 support until  
> recently).  This simple asynch. sleep function is fantastic.  Just  
> today I used to it with inlineCallbacks to dramatically clean up  
> some complex deferred logic.

Which asynch sleep function?

I hope you're not talking about this stuff, quoted in your message:

> On Wed, Oct 7, 2009 at 8:28 PM, Andrew Bennetts  
> <andrew at bemusement.org> wrote:
> >    What about Deferred.setTimeout?

Please note spiv's reply:

> Deferred.setTimeout is a poor API and is deprecated (despite what the
> automatically generated API docs think).

and his recommendation:

> So please, don't use setTimeout, and definitely do not recommend it  
> to others!

I hope that, instead, you're talking about the deferLater function  
that was introduced in Twisted 8.0?

http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.task.html#deferLater

This will act like an async 'sleep' if its result is yielded from an  
@inlineCallbacks function.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091029/c2ab8406/attachment.html>

From namanvit at gmail.com  Thu Oct 29 06:37:06 2009
From: namanvit at gmail.com (naman jain)
Date: Thu, 29 Oct 2009 13:37:06 +0100
Subject: [Twisted-Python] Logging to both console and file (using twisted
	logging API)?
Message-ID: <74b1256b0910290537n6ae1a672g8b2663a48757b4a1@mail.gmail.com>

Hi,

I wanted to log in a file and keep the console also going with it.

I am using
log.startLogging(open(logname, 'w'))

whatever documentation I could find about this API, it suggested me to pass
setStdout=False(in order to keep stdout away from putting into log)
somewhere in the startlogging function.

Something like this I tried:
log.startLogging(sys.stdout,setStdout=False)

Doesnt help in solving the problem of getting both things:

Requirement:
log.msg("messageforlog")    -> goes to log
print "message for console" -> goes to console

Could anyone give some ideas on this?

Regards
Naman
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091029/359f0a14/attachment.html>

From ellisonbg.net at gmail.com  Thu Oct 29 08:59:58 2009
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Thu, 29 Oct 2009 07:59:58 -0700
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <5245EDB8-EDFC-44D1-959A-47C1377FA28B@twistedmatrix.com>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>
	<a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
	<5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
	<12aaa0810910072008o5b6af468u9f78e29b385f9323@mail.gmail.com>
	<20091008032822.GQ1931@steerpike.home.puzzling.org>
	<6ce0ac130910281448m2896e797oc6fdf762f300d0a3@mail.gmail.com>
	<5245EDB8-EDFC-44D1-959A-47C1377FA28B@twistedmatrix.com>
Message-ID: <6ce0ac130910290759j3d82a3e9q64777756a0ddc046@mail.gmail.com>

Glyph,


In general, please reply on this list inline, with quoting and trimming,
> like so:
>
>     http://en.wikipedia.org/wiki/Posting_style#Inline_replying
>
> This might seem like a minor thing, but it really helps those of us who
> have to follow long discussions and many mailing lists.
>

Sorry, just being lazy...


I have been using Twisted for years but only recently began to use
> inlineCallbacks (couldn't give up Python 2.4 support until recently).  This
> simple asynch. sleep function is fantastic.  Just today I used to it with
> inlineCallbacks to dramatically clean up some complex deferred logic.
>
>
> Which asynch sleep function?
>
>
This one posted by Paul:

def sleep(seconds):
    d = defer.Deferred()
    reactor.callLater(seconds, d.callback, seconds)
    return d

I hope you're not talking about this stuff, quoted in your message:
>
> On Wed, Oct 7, 2009 at 8:28 PM, Andrew Bennetts <andrew at bemusement.org>wrote:
>
>> >    What about Deferred.setTimeout?
>>
>
> Please note spiv's reply:
>
> Deferred.setTimeout is a poor API and is deprecated (despite what the
>> automatically generated API docs think).
>>
> and his recommendation:
>
> So please, don't use setTimeout, and definitely do not recommend it to
>> others!
>>
>
Definitely not - I did see this warning.



> I hope that, instead, you're talking about the deferLater function that was
> introduced in Twisted 8.0?
>
>
> http://twistedmatrix.com/documents/8.2.0/api/twisted.internet.task.html#deferLater
>
> This will act like an async 'sleep' if its result is yielded from an
> @inlineCallbacks function.
>
>
I looked at deferLater, but am not using it right now.  The sleep function I
am using is basically the same as this - in my case "sleep" turned out to be
a little simpler because I don't have to create and pass the clock around.
But I will probably use deferLater for this same purpose in the future as
well.

Cheers,

Brian


>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091029/0efad1cb/attachment.html>

From terry at jon.es  Thu Oct 29 09:49:24 2009
From: terry at jon.es (Terry Jones)
Date: Thu, 29 Oct 2009 16:49:24 +0100
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: Your message at 07:59:58 on Thursday, 29 October 2009
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>
	<a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
	<5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
	<12aaa0810910072008o5b6af468u9f78e29b385f9323@mail.gmail.com>
	<20091008032822.GQ1931@steerpike.home.puzzling.org>
	<6ce0ac130910281448m2896e797oc6fdf762f300d0a3@mail.gmail.com>
	<5245EDB8-EDFC-44D1-959A-47C1377FA28B@twistedmatrix.com>
	<6ce0ac130910290759j3d82a3e9q64777756a0ddc046@mail.gmail.com>
Message-ID: <19177.47492.948264.671819@jon.es>

>>>>> "Brian" == Brian Granger <ellisonbg.net at gmail.com> writes:
Brian> I looked at deferLater, but am not using it right now.  The sleep
Brian> function I am using is basically the same as this - in my case
Brian> "sleep" turned out to be a little simpler because I don't have to
Brian> create and pass the clock around.  But I will probably use
Brian> deferLater for this same purpose in the future as well.

Hi Brian

Forgive me for butting in, but.... why :-)

Importing the reactor is no big deal, and if you use task.deferLater, apart
from not having to write any code you also have the advantage of being able
to pass it a result that the deferred will be called with.

For this reason you can also put a task.deferLater result into a callback
chain to achieve an async sleep and it will duly pass the result along. E.g.:
  
  from twisted.internet import reactor, task, defer

  d = somethingReturningADeferred()
  d.addCallback(lambda x: task.deferLater(reactor, 5.0, defer.passthru, x))

Terry



From listsin at integrateddevcorp.com  Thu Oct 29 10:49:55 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Thu, 29 Oct 2009 12:49:55 -0400
Subject: [Twisted-Python] Can browse,
	but getPage() fails on localhost address
Message-ID: <2C250B2F-3D89-49D4-91AD-4444124C4E3F@integrateddevcorp.com>

I can browse to either URL in any browser, getPage() works fine on the  
external address, 404's on the localhost address.

Any insight greatly appreciated; this is about as simple a test case  
as there can be and I'm mystified as to why it's not working.  Of  
course, that probably means I'll feel like a complete moron when  
someone clops me on the head with the answer, but I can deal with  
that...

Thanks,

S

Just in case it gets mutilated by mail:

	http://pastebin.com/d2f80ce0a

from twisted.web import client

def showPage(pageData):
     print pageData
     reactor.stop()

def handleError(failure):
     print "Error:", failure.getErrorMessage()
     failure.printDetailedTraceback()
     reactor.stop()

if __name__ == "__main__":
     from twisted.internet import reactor
     # postRequest = client.getPage("http://localhost/w3c-validator/check 
")
     postRequest = client.getPage("http://validator.w3.org/check")
     postRequest.addCallback(showPage).addErrback(handleError)
     reactor.run()


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091029/a8a571ef/attachment.html>

From maarten at treewalker.org  Thu Oct 29 11:10:25 2009
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Thu, 29 Oct 2009 19:10:25 +0200
Subject: [Twisted-Python] Can browse,
	but getPage() fails on localhost address
In-Reply-To: <2C250B2F-3D89-49D4-91AD-4444124C4E3F@integrateddevcorp.com>
References: <2C250B2F-3D89-49D4-91AD-4444124C4E3F@integrateddevcorp.com>
Message-ID: <200910291810.25526.maarten@treewalker.org>

On Thursday 29 October 2009, Steve Steiner (listsin) wrote:

> I can browse to either URL in any browser, getPage() works fine on the
> external address, 404's on the localhost address.

Does the same thing happen with "127.0.0.1" instead of "localhost" in the 
URL? I once encountered a nasty setup where a machine itself did not have 
"localhost" in /etc/hosts and the DNS server returned the IP address of 
another machine on the network...

Bye,
		Maarten



From listsin at integrateddevcorp.com  Thu Oct 29 11:36:26 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Thu, 29 Oct 2009 13:36:26 -0400
Subject: [Twisted-Python] Can browse,
	but getPage() fails on localhost address
In-Reply-To: <200910291810.25526.maarten@treewalker.org>
References: <2C250B2F-3D89-49D4-91AD-4444124C4E3F@integrateddevcorp.com>
	<200910291810.25526.maarten@treewalker.org>
Message-ID: <4BBE900A-D3EF-42D2-9FB0-A7D1CA50D615@integrateddevcorp.com>

On Oct 29, 2009, at 1:10 PM, Maarten ter Huurne wrote:

> On Thursday 29 October 2009, Steve Steiner (listsin) wrote:
>
>> I can browse to either URL in any browser, getPage() works fine on  
>> the
>> external address, 404's on the localhost address.
>
> Does the same thing happen with "127.0.0.1" instead of "localhost"  
> in the
> URL? I once encountered a nasty setup where a machine itself did not  
> have
> "localhost" in /etc/hosts and the DNS server returned the IP address  
> of
> another machine on the network...

Yes, unfortunately, same thing and the hosts file is also correct.

This is in OS X, and the valida†or URL I'm calling is being served by  
Apache 2.2, and is a ScriptAlias like so (in an includ of httpd.conf):

ScriptAlias      /w3c-validator/check   '/Applications/Validator- 
SAC.app/Contents/Resources/validator/httpd/cgi-bin/check_wrapper.sh'

Thing that's got me baffled is that I can go to it just fine in a  
browser, I can `curl` it, but, now, after a little more digging, wget  
can't get it either!

So:
curl  http://localhost/w3c-validator/check			   <-- returns HTML code
any browser to  http://localhost/w3c-validator/check  <-- returns HTML  
code
t.w.c.getPage("http://localhost/w3c-validator/check") <-- 404
wget  http://localhost/w3c-validator/check		   <-- 404

So what the heck is the difference in how these things resolve that  
address!?

Thanks,

S





From kevin.horn at gmail.com  Thu Oct 29 11:49:11 2009
From: kevin.horn at gmail.com (Kevin Horn)
Date: Thu, 29 Oct 2009 12:49:11 -0500
Subject: [Twisted-Python] Can browse,
	but getPage() fails on localhost 	address
In-Reply-To: <4BBE900A-D3EF-42D2-9FB0-A7D1CA50D615@integrateddevcorp.com>
References: <2C250B2F-3D89-49D4-91AD-4444124C4E3F@integrateddevcorp.com>
	<200910291810.25526.maarten@treewalker.org>
	<4BBE900A-D3EF-42D2-9FB0-A7D1CA50D615@integrateddevcorp.com>
Message-ID: <562bcc10910291049l25a8f55cgea6165d2a495f132@mail.gmail.com>

On Thu, Oct 29, 2009 at 12:36 PM, Steve Steiner (listsin) <
listsin at integrateddevcorp.com> wrote:

> On Oct 29, 2009, at 1:10 PM, Maarten ter Huurne wrote:
>
> > On Thursday 29 October 2009, Steve Steiner (listsin) wrote:
> >
> >> I can browse to either URL in any browser, getPage() works fine on
> >> the
> >> external address, 404's on the localhost address.
> >
> > Does the same thing happen with "127.0.0.1" instead of "localhost"
> > in the
> > URL? I once encountered a nasty setup where a machine itself did not
> > have
> > "localhost" in /etc/hosts and the DNS server returned the IP address
> > of
> > another machine on the network...
>
> Yes, unfortunately, same thing and the hosts file is also correct.
>
> This is in OS X, and the valida†or URL I'm calling is being served by
> Apache 2.2, and is a ScriptAlias like so (in an includ of httpd.conf):
>
> ScriptAlias      /w3c-validator/check   '/Applications/Validator-
> SAC.app/Contents/Resources/validator/httpd/cgi-bin/check_wrapper.sh'
>
> Thing that's got me baffled is that I can go to it just fine in a
> browser, I can `curl` it, but, now, after a little more digging, wget
> can't get it either!
>
> So:
> curl  http://localhost/w3c-validator/check                         <--
> returns HTML code
> any browser to  http://localhost/w3c-validator/check  <-- returns HTML
> code
> t.w.c.getPage("http://localhost/w3c-validator/check") <-- 404
> wget  http://localhost/w3c-validator/check                 <-- 404
>
> So what the heck is the difference in how these things resolve that
> address!?
>
> Thanks,
>
> S
>
>
When you say "resolve that address" do you mean the IP Address  or the URL?

If the requests are in fact going to the same address (IP), I would take a
look at the HTTP headers for each method and compare them.  Wget failing in
a similar fashion to getPage() may actually help you diagnose this.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091029/afe2d141/attachment.html>

From terry at jon.es  Thu Oct 29 12:01:18 2009
From: terry at jon.es (Terry Jones)
Date: Thu, 29 Oct 2009 19:01:18 +0100
Subject: [Twisted-Python] Can browse,
	but getPage() fails on localhost address
In-Reply-To: Your message at 13:36:26 on Thursday, 29 October 2009
References: <2C250B2F-3D89-49D4-91AD-4444124C4E3F@integrateddevcorp.com>
	<200910291810.25526.maarten@treewalker.org>
	<4BBE900A-D3EF-42D2-9FB0-A7D1CA50D615@integrateddevcorp.com>
Message-ID: <19177.55406.518710.164462@jon.es>

>>>>> "Steve" == Steve Steiner (listsin) <listsin at integrateddevcorp.com> writes:
Steve> curl  http://localhost/w3c-validator/check			   <-- returns HTML code
Steve> any browser to  http://localhost/w3c-validator/check  <-- returns HTML code

Steve> t.w.c.getPage("http://localhost/w3c-validator/check") <-- 404
Steve> wget  http://localhost/w3c-validator/check		   <-- 404

Steve> So what the heck is the difference in how these things resolve that  
Steve> address!?

When you say 404, do you really mean that you get a 404? Or are you just
saying that to informally tell us that it doesn't work?

If the former, then it seems this has nothing to do with DNS and host
names.  The connection is being made in all cases. It looks like there's
something different about the HTTP requests that causes the server to react
differently.  You're writing the server, correct? Can you log output?

If the latter, then I guess you really mean that the connection fails.

Terry



From ellisonbg.net at gmail.com  Thu Oct 29 12:38:34 2009
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Thu, 29 Oct 2009 11:38:34 -0700
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <19177.47492.948264.671819@jon.es>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<A77399EB-9F22-4EF2-87B4-780DCB216187@googlemail.com>
	<a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
	<5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
	<12aaa0810910072008o5b6af468u9f78e29b385f9323@mail.gmail.com>
	<20091008032822.GQ1931@steerpike.home.puzzling.org>
	<6ce0ac130910281448m2896e797oc6fdf762f300d0a3@mail.gmail.com>
	<5245EDB8-EDFC-44D1-959A-47C1377FA28B@twistedmatrix.com>
	<6ce0ac130910290759j3d82a3e9q64777756a0ddc046@mail.gmail.com>
	<19177.47492.948264.671819@jon.es>
Message-ID: <6ce0ac130910291138r6409aa39o7983ebbefaa16c10@mail.gmail.com>

> Hi Brian
>
> Forgive me for butting in, but.... why :-)
>
>
Helpful butting in is more than fine..


> Importing the reactor is no big deal, and if you use task.deferLater, apart
> from not having to write any code you also have the advantage of being able
> to pass it a result that the deferred will be called with.
>
> For this reason you can also put a task.deferLater result into a callback
> chain to achieve an async sleep and it will duly pass the result along.
> E.g.:
>
>  from twisted.internet import reactor, task, defer
>
>  d = somethingReturningADeferred()
>  d.addCallback(lambda x: task.deferLater(reactor, 5.0, defer.passthru, x))
>
>
Ahh, I see.  I saw the signature of deferLater and the Clock class in task
and I thought that I would have
to create a Clock instance by hand.  That I can simply use the reactor
(which of course is already imported and running in my code) simplifies the
usage of deferLater.  Thanks!

But, even with this, I do like the flow and readability of code that uses
sleep like this:

@inlineCallbacks
def f():
  result1 = yield somethingDeferred()
  yield sleep(1.0)
  result2 = yield anotherDeferred(result2)

Rather than the way that deferLater looks:

@inlineCallbacks
def f():
  result1 = yield somethingDeferred()
  result2 = yield task.deferLater(reactor, 1.0, anotherDeferred, result2)

But, the difference at this point is entirely aesthetic.

One question though - can someone explain the need/usage cases for
task.Clock and the other things in task?

Cheers,

Brian




> Terry
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091029/f0bb8ce6/attachment.html>

From listsin at integrateddevcorp.com  Thu Oct 29 13:29:27 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Thu, 29 Oct 2009 15:29:27 -0400
Subject: [Twisted-Python] Can browse,
	but getPage() fails on localhost address
In-Reply-To: <19177.55406.518710.164462@jon.es>
References: <2C250B2F-3D89-49D4-91AD-4444124C4E3F@integrateddevcorp.com>
	<200910291810.25526.maarten@treewalker.org>
	<4BBE900A-D3EF-42D2-9FB0-A7D1CA50D615@integrateddevcorp.com>
	<19177.55406.518710.164462@jon.es>
Message-ID: <848FD6B5-8815-4835-A0BF-9B886DF3016E@integrateddevcorp.com>


On Oct 29, 2009, at 2:01 PM, Terry Jones wrote:

>>>>>> "Steve" == Steve Steiner (listsin)  
>>>>>> <listsin at integrateddevcorp.com> writes:
> Steve> curl  http://localhost/w3c-validator/check			   <-- returns  
> HTML code
> Steve> any browser to  http://localhost/w3c-validator/check  <--  
> returns HTML code
>
> Steve> t.w.c.getPage("http://localhost/w3c-validator/check") <-- 404
> Steve> wget  http://localhost/w3c-validator/check		   <-- 404
>
> Steve> So what the heck is the difference in how these things  
> resolve that
> Steve> address!?
>
> When you say 404, do you really mean that you get a 404? Or are you  
> just
> saying that to informally tell us that it doesn't work?

No, I mean this, exactly:

# wget  http://localhost/w3c-validator/check
--2009-10-29 13:31:40--  http://localhost/w3c-validator/check
Resolving localhost... 127.0.0.1, ::1, fe80::1
Connecting to localhost|127.0.0.1|:80... connected.
HTTP request sent, awaiting response... 404 Not Found
2009-10-29 13:31:40 ERROR 404: Not Found.

# python foo.py
Error: 404 Not Found
*--- Failure #6 ---
Failure: twisted.web.error.Error: 404 Not Found
*--- End of Failure #6 ---

That last is from failure.printDetailedTraceback().

S




From listsin at integrateddevcorp.com  Thu Oct 29 16:47:09 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Thu, 29 Oct 2009 18:47:09 -0400
Subject: [Twisted-Python] Can browse,
	but getPage() fails on localhost address
In-Reply-To: <848FD6B5-8815-4835-A0BF-9B886DF3016E@integrateddevcorp.com>
References: <2C250B2F-3D89-49D4-91AD-4444124C4E3F@integrateddevcorp.com>
	<200910291810.25526.maarten@treewalker.org>
	<4BBE900A-D3EF-42D2-9FB0-A7D1CA50D615@integrateddevcorp.com>
	<19177.55406.518710.164462@jon.es>
	<848FD6B5-8815-4835-A0BF-9B886DF3016E@integrateddevcorp.com>
Message-ID: <9B3644BF-3E73-4BBF-ADD4-B12F9085D6B2@integrateddevcorp.com>

On Oct 29, 2009, at 3:29 PM, Steve Steiner (listsin) wrote:
> On Oct 29, 2009, at 2:01 PM, Terry Jones wrote:
>
>>>>>>> "Steve" == Steve Steiner (listsin)
>>>>>>> <listsin at integrateddevcorp.com> writes:
>> Steve> curl  http://localhost/w3c-validator/check			   <-- returns
>> HTML code
>> Steve> any browser to  http://localhost/w3c-validator/check  <--
>> returns HTML code
>>
>> Steve> t.w.c.getPage("http://localhost/w3c-validator/check") <-- 404
>> Steve> wget  http://localhost/w3c-validator/check		   <-- 404
>>
>> Steve> So what the heck is the difference in how these things
>> resolve that
>> Steve> address!?
>>
>> When you say 404, do you really mean that you get a 404? Or are you
>> just
>> saying that to informally tell us that it doesn't work?
>
> No, I mean this, exactly:
>
> # wget  http://localhost/w3c-validator/check
> --2009-10-29 13:31:40--  http://localhost/w3c-validator/check
> Resolving localhost... 127.0.0.1, ::1, fe80::1
> Connecting to localhost|127.0.0.1|:80... connected.
> HTTP request sent, awaiting response... 404 Not Found
> 2009-10-29 13:31:40 ERROR 404: Not Found.
>
> # python foo.py
> Error: 404 Not Found
> *--- Failure #6 ---
> Failure: twisted.web.error.Error: 404 Not Found
> *--- End of Failure #6 ---
>
> That last is from failure.printDetailedTraceback().

The only difference between the requests, as far as I can see (via  
tcpdump et al.), is that both `curl` and my browsers send HTTP/1.1  
requests and both `wget` and t.w.c.getPage() send HTTP/1.0.

This code also works:

     import httplib
     headers = { "Accept":"*/*"}
     h1 = httplib.HTTPConnection("localhost")
     h1.connect()
     h1.request("GET", url="/w3c-validator/check", headers=headers)
     rsp = h1.getresponse()
     print rsp.read()

Does this make any sense, that an HTTP/1.1 request would succeed where  
a simple HTTP/1.0 request returns a 404?

Maybe it's time to whip out that /twisted-branch-high-level-web- 
client-3987 I checked out a while ago...

S









From listsin at integrateddevcorp.com  Thu Oct 29 17:34:05 2009
From: listsin at integrateddevcorp.com (Steve Steiner (listsin))
Date: Thu, 29 Oct 2009 19:34:05 -0400
Subject: [Twisted-Python] HTTPClientFactory's deferred never
	finishing	download on .vcf (vcard file) link
In-Reply-To: <20091010211542.13824.1597743213.divmod.xquotient.9@localhost.localdomain>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
	<2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
	<95bb10690910100434y7808a2a4v1955b9f4e58efd83@mail.gmail.com>
	<C86E331F-76A9-4EFC-8737-FDF8D344645B@integrateddevcorp.com>
	<20091010211542.13824.1597743213.divmod.xquotient.9@localhost.localdomain>
Message-ID: <58037725-E7CB-4E10-B970-EFD37F5A6AC7@integrateddevcorp.com>

On Oct 10, 2009, at 5:15 PM, exarkun at twistedmatrix.com wrote:

>> Where might that be hiding?  I'd love to have something that does
>> deferreds like Twisted and also implements all of urllib2.  I find  
>> the
>> info() from urlopen() particularly helpful when debugging issues like
>> this.
>
>  http://twistedmatrix.com/trac/ticket/886
>  http://twistedmatrix.com/trac/ticket/3987
>
> As I understand the "info" method, it gives you access to the response
> headers.  The new API definitely exposes that information.
>
> You'll notice that neither of these tickets is closed.  #3987 is
> presently up for review.  If you want to help out, you could take a  
> look
> at the code and point out any problems you notice.
>
> Jean-Paul

Well...I've now spent some actual time with 886 (-2,-3,and -4), and  
also with 3987.

While there is some very nice stuff in there, I'm really not sure how  
one would actually put it to use since the back-end and the front-end  
seem to have been split into separate branches.

It seems that you can't use 3987 without 886-x but you can't get them  
checked out at the same time in the same place or, at least, it's not  
clear to me how one would do that.

Is there any way to get a single checkout, that I can install into a  
virtualenv, where I can actually try to put this stuff to some sort of  
concrete use?

For me, until I put it to some actual use in the real world, all the  
abstract "code review" in the world isn't going to get it any closer  
to being shippable.

Thanks,

S














From mithrandi at mithrandi.net  Thu Oct 29 19:26:05 2009
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Fri, 30 Oct 2009 03:26:05 +0200
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <6ce0ac130910291138r6409aa39o7983ebbefaa16c10@mail.gmail.com>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
	<5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
	<12aaa0810910072008o5b6af468u9f78e29b385f9323@mail.gmail.com>
	<20091008032822.GQ1931@steerpike.home.puzzling.org>
	<6ce0ac130910281448m2896e797oc6fdf762f300d0a3@mail.gmail.com>
	<5245EDB8-EDFC-44D1-959A-47C1377FA28B@twistedmatrix.com>
	<6ce0ac130910290759j3d82a3e9q64777756a0ddc046@mail.gmail.com>
	<19177.47492.948264.671819@jon.es>
	<6ce0ac130910291138r6409aa39o7983ebbefaa16c10@mail.gmail.com>
Message-ID: <f5eea9170910291826k2dff638g1f83822df0b247dc@mail.gmail.com>

On Thu, Oct 29, 2009 at 8:38 PM, Brian Granger <ellisonbg.net at gmail.com> wrote:
> One question though - can someone explain the need/usage cases for
> task.Clock and the other things in task?

Clock is a "fake" IReactorTime implementation; as the docstring says,
it is intended for writing unit tests where you want control over the
behaviour of the clock, rather than using the real time source.

As for the other things... LoopingCall repeatedly runs a callable at a
certain interval, coiterate takes a generator and iterates it
cooperatively (returning control back to the reactor between
iterations), and cooperate is a new-and-improved version of coiterate
which I haven't looked at yet.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From ssteinerx at gmail.com  Thu Oct 29 19:48:58 2009
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Thu, 29 Oct 2009 21:48:58 -0400
Subject: [Twisted-Python] Working on multiple Twisted branches
Message-ID: <9AAF881A-2945-4A8F-A5FC-D82DF8F8BFBB@gmail.com>

So...

	I am very interested in the improvements to the Twisted Web Client  
portion of Twisted and have been wanting to review two tickets/ 
branches in particular; 3987 and 886.

	Today I finally got around to getting the branches checked out and  
merged, with some great help from `ivan` on IRC and, wrote a blog post  
detailing exactly how to do it.

	http://websaucesoftware.com/blog/?p=434

	It uses Git instead of Subversion for the actual merges so it didn't  
suck anywhere as much as it would have with Subversion alone.

	Comments/corrections always welcome.

S




From exarkun at twistedmatrix.com  Thu Oct 29 21:05:39 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 30 Oct 2009 03:05:39 -0000
Subject: [Twisted-Python] HTTPClientFactory's deferred never
	finishing	download on .vcf (vcard file) link
In-Reply-To: <58037725-E7CB-4E10-B970-EFD37F5A6AC7@integrateddevcorp.com>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
	<2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
	<95bb10690910100434y7808a2a4v1955b9f4e58efd83@mail.gmail.com>
	<C86E331F-76A9-4EFC-8737-FDF8D344645B@integrateddevcorp.com>
	<20091010211542.13824.1597743213.divmod.xquotient.9@localhost.localdomain>
	<58037725-E7CB-4E10-B970-EFD37F5A6AC7@integrateddevcorp.com>
Message-ID: <20091030030539.12668.1881055704.divmod.xquotient.64@localhost.localdomain>

On 29 Oct, 11:34 pm, listsin at integrateddevcorp.com wrote:
>On Oct 10, 2009, at 5:15 PM, exarkun at twistedmatrix.com wrote:
>>>Where might that be hiding?  I'd love to have something that does
>>>deferreds like Twisted and also implements all of urllib2.  I find
>>>the
>>>info() from urlopen() particularly helpful when debugging issues like
>>>this.
>>
>>  http://twistedmatrix.com/trac/ticket/886
>>  http://twistedmatrix.com/trac/ticket/3987
>>
>>As I understand the "info" method, it gives you access to the response
>>headers.  The new API definitely exposes that information.
>>
>>You'll notice that neither of these tickets is closed.  #3987 is
>>presently up for review.  If you want to help out, you could take a
>>look
>>at the code and point out any problems you notice.
>>
>>Jean-Paul
>
>Well...I've now spent some actual time with 886 (-2,-3,and -4), and
>also with 3987.
>
>While there is some very nice stuff in there, I'm really not sure how
>one would actually put it to use since the back-end and the front-end
>seem to have been split into separate branches.

They're not really split.  The 3987 branch is complete and usable on its 
own.  You don't need a checkout of the 886 branch.

Jean-Paul



From exarkun at twistedmatrix.com  Thu Oct 29 21:07:38 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 30 Oct 2009 03:07:38 -0000
Subject: [Twisted-Python] sleeping in inlineCallbacks
In-Reply-To: <f5eea9170910291826k2dff638g1f83822df0b247dc@mail.gmail.com>
References: <AB97EC5D-589B-4D3B-ADFA-568E8EA06990@googlemail.com>
	<a8c89c8c0910071246v2dd32cfm6544f97cd590f9c8@mail.gmail.com>
	<5A39761D-1A09-4808-8F4B-E22AEF70AC4F@bubblehouse.org>
	<12aaa0810910072008o5b6af468u9f78e29b385f9323@mail.gmail.com>
	<20091008032822.GQ1931@steerpike.home.puzzling.org>
	<6ce0ac130910281448m2896e797oc6fdf762f300d0a3@mail.gmail.com>
	<5245EDB8-EDFC-44D1-959A-47C1377FA28B@twistedmatrix.com>
	<6ce0ac130910290759j3d82a3e9q64777756a0ddc046@mail.gmail.com>
	<19177.47492.948264.671819@jon.es>
	<6ce0ac130910291138r6409aa39o7983ebbefaa16c10@mail.gmail.com>
	<f5eea9170910291826k2dff638g1f83822df0b247dc@mail.gmail.com>
Message-ID: <20091030030738.12668.1686795274.divmod.xquotient.67@localhost.localdomain>

On 01:26 am, mithrandi at mithrandi.net wrote:
>On Thu, Oct 29, 2009 at 8:38 PM, Brian Granger 
><ellisonbg.net at gmail.com> wrote:
>>One question though - can someone explain the need/usage cases for
>>task.Clock and the other things in task?
>
>Clock is a "fake" IReactorTime implementation; as the docstring says,
>it is intended for writing unit tests where you want control over the
>behaviour of the clock, rather than using the real time source.
>
>As for the other things... LoopingCall repeatedly runs a callable at a
>certain interval, coiterate takes a generator and iterates it
>cooperatively (returning control back to the reactor between
>iterations), and cooperate is a new-and-improved version of coiterate
>which I haven't looked at yet.

cooperate and coiterate basically do the same thing.  The difference is 
that cooperate gives you access to extra features, like pausing, 
resuming, and canceling.

Jean-Paul



From ssteinerx at gmail.com  Thu Oct 29 21:25:12 2009
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Thu, 29 Oct 2009 23:25:12 -0400
Subject: [Twisted-Python] HTTPClientFactory's deferred never finishing
	download on .vcf (vcard file) link
In-Reply-To: <20091030030539.12668.1881055704.divmod.xquotient.64@localhost.localdomain>
References: <b460e9630910060747r541af190j1e160b1353f58d4b@mail.gmail.com>
	<20091008121547.24460.166029432.divmod.xquotient.219@boson>
	<b460e9630910080708v4d282c4cmc25156420d8bf657@mail.gmail.com>
	<5F4EEF56-D482-475D-8D97-3AB362ADD944@integrateddevcorp.com>
	<95bb10690910090253j5c2a734ch364009f7d09864fe@mail.gmail.com>
	<2EB5AC14-5489-4CBB-ADA4-2900914A1D10@integrateddevcorp.com>
	<95bb10690910100434y7808a2a4v1955b9f4e58efd83@mail.gmail.com>
	<C86E331F-76A9-4EFC-8737-FDF8D344645B@integrateddevcorp.com>
	<20091010211542.13824.1597743213.divmod.xquotient.9@localhost.localdomain>
	<58037725-E7CB-4E10-B970-EFD37F5A6AC7@integrateddevcorp.com>
	<20091030030539.12668.1881055704.divmod.xquotient.64@localhost.localdomain>
Message-ID: <43FD4C59-F7CF-4CA6-85A0-B4A37D59CF1B@gmail.com>


On Oct 29, 2009, at 11:05 PM, exarkun at twistedmatrix.com wrote:

> They're not really split.  The 3987 branch is complete and usable on  
> its
> own.  You don't need a checkout of the 886 branch.

Cool, maybe that could be noted in the ticket(s)?

Thanks,

S




From cwellington at ccg.murdoch.edu.au  Fri Oct 30 03:38:12 2009
From: cwellington at ccg.murdoch.edu.au (Crispin Wellington)
Date: Fri, 30 Oct 2009 17:38:12 +0800
Subject: [Twisted-Python] Using a custom reactor in twisted trial for test
	cases?
Message-ID: <1256895492.4200.9.camel@wolfwood>

Hi there,

I am using twisted trial to run test cases for an application. The
application however uses stackless python and has a custom stackless
reactor. I implemented this reactor like this...

-------------------- stacklessreactor.py -----------------------
# Use epoll() as our base reactor
from twisted.internet.epollreactor import EPollReactor as StacklessBaseReactor

import stackless

# seconds between running the greenthreads. 0.0 for flat out 100% CPU
STACKLESS_MAX_PUMP_RATE = 0.1

class StacklessReactor(StacklessBaseReactor):
    """This reactor does the stackless greenthread pumping in the main thread, interwoven with the reactor pump"""
    
    def doIteration(self, timeout):
        """Calls the base reactors doIteration, and then fires off all the stackless threads"""
        if timeout > STACKLESS_MAX_PUMP_RATE:
            timeout = STACKLESS_MAX_PUMP_RATE
        stackless.schedule()
        return StacklessBaseReactor.doIteration(self,timeout)

def install():
    """
    Install the stackless() reactor.
    """
    p = StacklessReactor()
    from twisted.internet.main import installReactor
    installReactor(p)
-------------------------------------------------------------------

And I install this as my reactor in my application with...

import stacklessreactor
stacklessreactor.install()

...placed right at the top of my .tac python file. And this all works.
Running the app with twistd, the custom reactor is installed and is used
as the reactor for the app.

Now however, I come to write tests and run them with trial. I *need* the
tests to be run under the stackless reactor or things simply wont work
(a lot of the code I need to test are stackless tasklets).

When I go "/usr/local/stackless/bin/trial --help-reactors" I get the
following list:

    kqueue	kqueue(2)-based reactor.
    win32	Win32 WaitForMultipleObjects-based reactor.
    epoll	epoll(4)-based reactor.
    iocp	Win32 IO Completion Ports-based reactor.
    gtk 	Gtk1 integration reactor.
    cf  	CoreFoundation integration reactor.
    gtk2	Gtk2 integration reactor.
    default	The best reactor for the current platform.
    debug-gui	Semi-functional debugging/introspection reactor.
    poll	poll(2)-based reactor.
    glib2	GLib2 event-loop integration reactor.
    select	select(2)-based reactor.
    wx  	wxPython integration reactor.
    qt  	QT integration reactor

One of these I can use by passing in --reactor=name. 

So the question is, is there a way of getting the trial framework to use
my custom reactor? Is there a way to get my reactor into that list
somehow? Is this not a supported feature of trial?

And... if this isn't a supported feature, what is the best way to get a
TestCase that will run under that reactor?

Look forward to any help people can offer me.

With kind regards

Crispin Wellington





From vishalshetye at gmail.com  Fri Oct 30 07:27:16 2009
From: vishalshetye at gmail.com (Vishal Shetye)
Date: Fri, 30 Oct 2009 18:57:16 +0530
Subject: [Twisted-Python] Regarding Ticket 3629,
	Error in adbapi Connection Pool in cleanup
Message-ID: <6a2dc2340910300627x7a2d8207s7cc05a30d14ee512@mail.gmail.com>

Hi,
I was facing the issue as noted here http://twistedmatrix.com/trac/ticket/3629.
As I see, python 2.5 can be build with pysqlite2.1.3 and sqlite 3.0.8 or later.
However, support for a connection to be moved across multiple threads
was added to sqlite at version3.3.1.

Last comment in the ticket says, the module is just overprotective.
Which module is he referring to and why is it said that it is overprotective?
Is he referring to the pysqlite module?
He says using check_same_thread=False is safe, is he saying it
specifically in the twisted's context?
Is it really safe even if I am using sqlite version between 3.0.8 to 3.3.1?

-- 
vishal



From exarkun at twistedmatrix.com  Fri Oct 30 08:06:21 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 30 Oct 2009 14:06:21 -0000
Subject: [Twisted-Python] Using a custom reactor in twisted trial for
	test	cases?
In-Reply-To: <1256895492.4200.9.camel@wolfwood>
References: <1256895492.4200.9.camel@wolfwood>
Message-ID: <20091030140621.12668.2112281336.divmod.xquotient.76@localhost.localdomain>

On 09:38 am, cwellington at ccg.murdoch.edu.au wrote:
>Hi there,
>
>I am using twisted trial to run test cases for an application. The
>application however uses stackless python and has a custom stackless
>reactor. I implemented this reactor like this...

It looks like your custom reactor is mainly in charge of making sure 
stackless.schedule() gets called at least once every 0.1 seconds.  Is 
that right?  If so, a much better approach would be to use 
twisted.internet.task.LoopingCall rather than implementing a custom 
reactor.

Is there something undesirable about that (much simpler, less fragile) 
approach?

As for your actual question, if you want a new reactor to be as usable 
as one of the existing ones, you need to write a plugin declaring its 
available.  Take a look at twisted/plugins/twisted_reactors.py for some 
examples.

Jean-Paul



From andrewfr_ice at yahoo.com  Fri Oct 30 11:12:48 2009
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Fri, 30 Oct 2009 10:12:48 -0700 (PDT)
Subject: [Twisted-Python] Using a custom reactor in twisted trial for
	test cases?
Message-ID: <450379.51650.qm@web112419.mail.gq1.yahoo.com>

Hi Crispin:

Message: 8
Date: Fri, 30 Oct 2009 17:38:12 +0800
From: Crispin Wellington <cwellington at ccg.murdoch.edu.au>
Subject: [Twisted-Python] Using a custom reactor in twisted trial for
    test    cases?
To: twisted-python at twistedmatrix.com
Message-ID: <1256895492.4200.9.camel at wolfwood>
Content-Type: text/plain

>I am using twisted trial to run test cases for an application. The
>application however uses stackless python and has a custom stackless
>reactor. I implemented this reactor like this...

For better or worse, much of what you have discussed have been fleshed out about two years ago in this mailing list and in stackless. Also I outline strategies in the PyCon 2008 talk "Adventures in Stackless Twisted Integration." Personally, I don't know why more people don't use Stackless with Twisted.

Some advice:

1) Based on what I have seen, you don't need to write a custom reactor (I still remember Glyph setting me straight on that one). At least for what you are doing :-).

2) Use task.loopingCall to make the reactor periodically yield.

l = task.LoopingCall(stackless.schedule)
l.start(.01)

however there is some weird interaction between Stackless Python 2.6 and Twisted so you may have to do

task.LoopingCall(__tick__)

def __tick__():
    stackless.schedule

or play with the recursionlimit variable. I have not gotten to the bottom of that problem.


Cheers,
Andrew


      



From db3l.net at gmail.com  Fri Oct 30 14:25:06 2009
From: db3l.net at gmail.com (David Bolen)
Date: Fri, 30 Oct 2009 16:25:06 -0400
Subject: [Twisted-Python] Logging to both console and file (using
	twisted logging API)?
References: <74b1256b0910290537n6ae1a672g8b2663a48757b4a1@mail.gmail.com>
Message-ID: <m2r5skaau5.fsf@valheru.db3l.homeip.net>

naman jain <namanvit at gmail.com> writes:

> I wanted to log in a file and keep the console also going with it.

I can read this as either:

  * Keep file logs and stdout/console completely separate, or
  * File gets explicit logs and copies of stdout, but stdout also goes to
    console as well.

The latter is something I'd more commonly do, but the former is what
you explain further below with your rules.

> I am using
> log.startLogging(open(logname, 'w'))
>
> whatever documentation I could find about this API, it suggested me to pass
> setStdout=False(in order to keep stdout away from putting into log)
> somewhere in the startlogging function.
>
> Something like this I tried:
> log.startLogging(sys.stdout,setStdout=False)

Why did you switch to sys.stdout here?  While this will prevent
sys.stdout and sys.stderr from being redirected, it will use
sys.stdout for any log.msg() calls, so nothing would end up in your
log file.

> Doesnt help in solving the problem of getting both things:
>
> Requirement:
> log.msg("messageforlog")    -> goes to log
> print "message for console" -> goes to console
>
> Could anyone give some ideas on this?

I think you had the right idea with setStdout, but changed more than
just that when you tested it.  If you use a call like
log.startLogging(open(logname, 'w'), setStdout=False) I believe you'll
get what you want.  Only calls to log.msg() will go to the file, and
stdout/stderr will be left unchanged.

-- David




From ssteinerx at gmail.com  Fri Oct 30 22:07:03 2009
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Sat, 31 Oct 2009 00:07:03 -0400
Subject: [Twisted-Python] Fwd: Twisted WSGI (trunk) + Django 1.1.1 + Pinax
	Twisted WSGI setup == broken forms?
References: <mailman.93286.1256961720.23374.twisted-python@twistedmatrix.com>
Message-ID: <23127962-2733-4558-B244-090617AE5408@gmail.com>

Hi!
	I've been pulling my hair out all day...

	I have a Django 1.1.x project running under Twisted Trunk (27392)  
using WSGI.

	I've been having mega-problems with forms not showing up in Django's  
REQUEST object so I decided to nail it down to the simplest case.  I  
thought I was only having problems with simple <form>...</form> type  
submissions but, nope, as soon as I wrote the regular Django one, it  
also failed.  The form runs fine under ∂jango's development server.

	The project's at:

		http://github.com/ssteiner/twisted-django

	I am using the WSGI method that is shown for use with Pinax which has  
worked for me in the past and is very simple.

	I also included a newer, more complicated method that I stole from an  
earlier version of clemesha's hotdot at master - GitHub, from an  
article he wrote a little while ago that I'm too tired to find right  
now.

	I would love to get to the bottom of this as Twisted + Django +  
Orbited really is the foundation of an app I'm writing and this is a  
real showstopper.

	Comments, suggestions, corrections, etc. always welcome.

Thanks,

S




-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091031/7eee73cd/attachment-0001.html>

From itamar at itamarst.org  Sat Oct 31 07:03:42 2009
From: itamar at itamarst.org (Itamar Turner-Trauring (aka Shtull-Trauring))
Date: Sat, 31 Oct 2009 09:03:42 -0400
Subject: [Twisted-Python] Fwd: Twisted WSGI (trunk) + Django 1.1.1 +
 Pinax Twisted WSGI setup == broken forms?
In-Reply-To: <23127962-2733-4558-B244-090617AE5408@gmail.com>
References: <mailman.93286.1256961720.23374.twisted-python@twistedmatrix.com>
	<23127962-2733-4558-B244-090617AE5408@gmail.com>
Message-ID: <1256994222.3814.51.camel@pintsize>

You might also try the twisted-web list.




From ssteinerx at gmail.com  Sat Oct 31 07:24:41 2009
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Sat, 31 Oct 2009 09:24:41 -0400
Subject: [Twisted-Python] Django + Twisted trunk, fresh virtualenv,
	simplest demo
Message-ID: <9AB29445-5186-458D-8F46-1E099C0BE717@gmail.com>

Hi!

	I was pulling my hair out yesterday, trying to get my Django  
application's forms working on both the development server, and  
running under Twisted trunk.

	POST variables were not arriving in the REQUEST object where they  
belonged, but only under Twisted.

	So, I did the only logical thing; I made a completely isolated test  
case, now available at:

	https://github.com/ssteiner/twisted-django/

	Along the way, I finally decided to start over from scratch with a  
brand new --no-site-packages virtualenv, then installed only what was  
absolutely required.

	The repository shows what I think may be the simplest way to run  
Django under Twisted WSGI which I pretty much stole wholesale from the  
Pinax WSGI setup.

	I'll be writing a blog post with a blow-by-blow shortly which I'll  
post when it's done but, for now, this is a very clear, and dead  
simple way to run Django under Twisted WSGI.

	Please note: you *must* be running a Twisted trunk checkout because  
some WSGI bugs have been fixed since the most recent release.

S






From ssteinerx at gmail.com  Sat Oct 31 07:25:31 2009
From: ssteinerx at gmail.com (ssteinerX@gmail.com)
Date: Sat, 31 Oct 2009 09:25:31 -0400
Subject: [Twisted-Python] Fwd: Twisted WSGI (trunk) + Django 1.1.1 +
	Pinax Twisted WSGI setup == broken forms?
In-Reply-To: <1256994222.3814.51.camel@pintsize>
References: <mailman.93286.1256961720.23374.twisted-python@twistedmatrix.com>
	<23127962-2733-4558-B244-090617AE5408@gmail.com>
	<1256994222.3814.51.camel@pintsize>
Message-ID: <CEEFED23-956B-40C1-A01E-836C4133AED7@gmail.com>


On Oct 31, 2009, at 9:03 AM, Itamar Turner-Trauring (aka Shtull- 
Trauring) wrote:

> You might also try the twisted-web list.

Maybe my subscription's broken but I haven't seen a single message  
since I signed up a week and a half or so ago.  Is that right?

Thanks,

S


>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From george at ringdevelopment.com  Sat Oct 31 08:53:39 2009
From: george at ringdevelopment.com (George Pauly)
Date: Sat, 31 Oct 2009 10:53:39 -0400
Subject: [Twisted-Python] Fwd: Twisted WSGI (trunk) + Django 1.1.1
	+	Pinax Twisted WSGI setup == broken forms?
In-Reply-To: <CEEFED23-956B-40C1-A01E-836C4133AED7@gmail.com>
References: <mailman.93286.1256961720.23374.twisted-python@twistedmatrix.com>
	<23127962-2733-4558-B244-090617AE5408@gmail.com>
	<1256994222.3814.51.camel@pintsize>
	<CEEFED23-956B-40C1-A01E-836C4133AED7@gmail.com>
Message-ID: <1257000819.6622.54.camel@localhost.localdomain>

On Sat, 2009-10-31 at 09:25 -0400, ssteinerX at gmail.com wrote:

> 
> Maybe my subscription's broken but I haven't seen a single message  
> since I signed up a week and a half or so ago.  Is that right?
> 
There were posts on Wednesday.

-- 
George Pauly
Ring Development
www.ringdevelopment.com




From exarkun at twistedmatrix.com  Sat Oct 31 22:05:21 2009
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 01 Nov 2009 04:05:21 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1257048321.71.373825820@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20091101/e5e50970/attachment-0001.html>

