From adi at roiban.ro  Thu Jun  2 06:10:48 2016
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 2 Jun 2016 13:10:48 +0100
Subject: [Twisted-Python] Travis-CI integration work
Message-ID: <CAFycZ9cWJQsgzzptpNMZSON0eSKKjZ-UL8Av8n=8g32SbJ8Ovw@mail.gmail.com>

Hi,

I just want to let you know that we are almost done with the work of
integrating Travis-CI with Twisted GitHub PRs.

The ticket is here https://twistedmatrix.com/trac/ticket/7229

If you have time, please take a look at the current work and suggest any
changes or provide any feedback.

The goal of this ticket is to have an initial set of tests executed for a
patch, on behalf on non-Twisted commiters.

In this way, I hope that contributors would be able to get a faster
feedback regarding the quality of their patch.

This should also reduce the work required to review a branch, as commiters
will no longer have to merge and send to buildbot each new revision
submitted by a contributor.

Cheers,

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160602/12c1ee70/attachment.html>

From glyph at twistedmatrix.com  Thu Jun  2 15:04:59 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 2 Jun 2016 14:04:59 -0700
Subject: [Twisted-Python] Travis-CI integration work
In-Reply-To: <CAFycZ9cWJQsgzzptpNMZSON0eSKKjZ-UL8Av8n=8g32SbJ8Ovw@mail.gmail.com>
References: <CAFycZ9cWJQsgzzptpNMZSON0eSKKjZ-UL8Av8n=8g32SbJ8Ovw@mail.gmail.com>
Message-ID: <285FF03A-C7BA-446E-8A58-D353087A8019@twistedmatrix.com>


> On Jun 2, 2016, at 05:10, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> I just want to let you know that we are almost done with the work of integrating Travis-CI with Twisted GitHub PRs.
> 
> The ticket is here https://twistedmatrix.com/trac/ticket/7229 <https://twistedmatrix.com/trac/ticket/7229>
> 
> If you have time, please take a look at the current work and suggest any changes or provide any feedback.
> 
> The goal of this ticket is to have an initial set of tests executed for a patch, on behalf on non-Twisted commiters.
> 
> In this way, I hope that contributors would be able to get a faster feedback regarding the quality of their patch.
> 
> This should also reduce the work required to review a branch, as commiters will no longer have to merge and send to buildbot each new revision submitted by a contributor. 

Thanks for doing this, Adi.  I don't know if I'm going to have time to look at this at the PyCon sprints, but I sure hope someone does :).  If not, we'll get to it soon.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160602/b75e5cc4/attachment.html>

From jasonjwwilliams at gmail.com  Thu Jun  2 15:07:26 2016
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Thu, 2 Jun 2016 14:07:26 -0700
Subject: [Twisted-Python] Travis-CI integration work
In-Reply-To: <CAFycZ9cWJQsgzzptpNMZSON0eSKKjZ-UL8Av8n=8g32SbJ8Ovw@mail.gmail.com>
References: <CAFycZ9cWJQsgzzptpNMZSON0eSKKjZ-UL8Av8n=8g32SbJ8Ovw@mail.gmail.com>
Message-ID: <CAHZAEpdoMyRZ0a=8sCHsngwGvdGy+x31rTZFu+tyce8L942rTQ@mail.gmail.com>

That's awesome. Happy to see this.

-J

On Thu, Jun 2, 2016 at 5:10 AM, Adi Roiban <adi at roiban.ro> wrote:

> Hi,
>
> I just want to let you know that we are almost done with the work of
> integrating Travis-CI with Twisted GitHub PRs.
>
> The ticket is here https://twistedmatrix.com/trac/ticket/7229
>
> If you have time, please take a look at the current work and suggest any
> changes or provide any feedback.
>
> The goal of this ticket is to have an initial set of tests executed for a
> patch, on behalf on non-Twisted commiters.
>
> In this way, I hope that contributors would be able to get a faster
> feedback regarding the quality of their patch.
>
> This should also reduce the work required to review a branch, as commiters
> will no longer have to merge and send to buildbot each new revision
> submitted by a contributor.
>
> Cheers,
>
> --
> Adi Roiban
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160602/6f8e0dba/attachment.html>

From glyph at twistedmatrix.com  Fri Jun  3 01:39:30 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 3 Jun 2016 00:39:30 -0700
Subject: [Twisted-Python] buildbots: normal service will resume shortly
Message-ID: <B2F5DE9E-6AB8-4565-829E-9F9C8E8EC181@twistedmatrix.com>

We had a minor hiccup earlier today due partially to a new Cryptography release (the Windows builders, which started spuriously failing builds) and some random networking issues (the OS X builders, which went offline).  I believe I've gotten them back online and performing to spec and they should chew through their respective backlogs shortly.

-glyph

From glyph at twistedmatrix.com  Fri Jun  3 01:49:18 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 3 Jun 2016 00:49:18 -0700
Subject: [Twisted-Python] buildbots: normal service will resume shortly
In-Reply-To: <B2F5DE9E-6AB8-4565-829E-9F9C8E8EC181@twistedmatrix.com>
References: <B2F5DE9E-6AB8-4565-829E-9F9C8E8EC181@twistedmatrix.com>
Message-ID: <9953D523-8B1B-44E8-AADB-C408DD3A56C0@twistedmatrix.com>


> On Jun 3, 2016, at 00:39, Glyph <glyph at twistedmatrix.com> wrote:
> 
> We had a minor hiccup earlier today due partially to a new Cryptography release (the Windows builders, which started spuriously failing builds) and some random networking issues (the OS X builders, which went offline).  I believe I've gotten them back online and performing to spec and they should chew through their respective backlogs shortly.

Oops!  The _actual_ bug on Windows appears to be a regression in virtualenv, which I have filed here - https://github.com/pypa/virtualenv/issues/929 - which I've now downgraded to 15.0.1 to work around it for now.

-glyph

From bra at fsn.hu  Fri Jun  3 02:06:43 2016
From: bra at fsn.hu (Nagy, Attila)
Date: Fri, 3 Jun 2016 10:06:43 +0200
Subject: [Twisted-Python] Why deferToThread is so slow?
Message-ID: <57513A93.2030000@fsn.hu>

Hi,

I have a thread safe synchronous library, which I would like to use in a 
threadpool using deferToThread.

Without using (deferTo)threads I get consistent 1-3 ms response times, 
with deferring to threadpool, I get 30-300, varying wildly.

I've tried to construct a test, which is of course not perfect, but 
shows some differences, which widen with the number of threads (while 
directly calling that dumb function remains the same).
I can see similar results with using the (database) library, but because 
it's an external dependency and performance gets worse with the number 
of queries (threads), I thought it would be best to leave that out of 
the picture, hence the dumb function.

# python /tmp/deft.py 1
deferToThread: avg 316.17 us, sync: avg 1.38 us, 228.71x increase
deferToThread: avg 312.92 us, sync: avg 1.38 us, 226.96x increase
deferToThread: avg 320.22 us, sync: avg 1.39 us, 230.37x increase
deferToThread: avg 317.33 us, sync: avg 1.35 us, 235.24x increase

# python /tmp/deft.py 8
deferToThread: avg 2542.90 us, sync: avg 1.37 us, 1854.14x increase
deferToThread: avg 2544.50 us, sync: avg 1.35 us, 1878.13x increase
deferToThread: avg 2544.47 us, sync: avg 1.36 us, 1864.52x increase
deferToThread: avg 2544.52 us, sync: avg 1.38 us, 1839.01x increase
deferToThread: avg 2544.92 us, sync: avg 1.36 us, 1871.81x increase
deferToThread: avg 2546.71 us, sync: avg 1.39 us, 1830.35x increase
deferToThread: avg 2552.38 us, sync: avg 1.35 us, 1893.17x increase
deferToThread: avg 2552.40 us, sync: avg 1.36 us, 1870.20x increase

# python /tmp/deft.py 16
deferToThread: avg 4745.76 us, sync: avg 1.26 us, 3770.11x increase
deferToThread: avg 4748.67 us, sync: avg 1.24 us, 3817.03x increase
deferToThread: avg 4749.81 us, sync: avg 1.26 us, 3756.39x increase
deferToThread: avg 4749.72 us, sync: avg 1.24 us, 3839.88x increase
deferToThread: avg 4749.87 us, sync: avg 1.28 us, 3709.99x increase
deferToThread: avg 4752.63 us, sync: avg 1.24 us, 3842.90x increase
deferToThread: avg 4752.53 us, sync: avg 1.23 us, 3866.08x increase
deferToThread: avg 4752.55 us, sync: avg 1.23 us, 3855.40x increase
deferToThread: avg 4754.03 us, sync: avg 1.29 us, 3678.09x increase
deferToThread: avg 4754.97 us, sync: avg 1.25 us, 3817.19x increase
deferToThread: avg 4755.45 us, sync: avg 1.32 us, 3593.28x increase
deferToThread: avg 4756.35 us, sync: avg 1.25 us, 3804.18x increase
deferToThread: avg 4756.19 us, sync: avg 1.29 us, 3687.73x increase
deferToThread: avg 4757.19 us, sync: avg 1.23 us, 3860.74x increase
deferToThread: avg 4758.02 us, sync: avg 1.24 us, 3824.33x increase
deferToThread: avg 4759.63 us, sync: avg 1.24 us, 3830.40x increase

On 16 threads it takes nearly 5 ms(!) to call a local function...

The test program is here:
https://gist.github.com/bra-fsn/1fd481b44590a939e849cb9073ba1a41

cpython 2.7.11, Twisted 16.2.0

BTW, I've run this on pypy 5.1.1 with even worse results:
https://mail.python.org/pipermail/pypy-dev/2016-June/014477.html


From glyph at twistedmatrix.com  Fri Jun  3 02:24:55 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 3 Jun 2016 01:24:55 -0700
Subject: [Twisted-Python] Why deferToThread is so slow?
In-Reply-To: <57513A93.2030000@fsn.hu>
References: <57513A93.2030000@fsn.hu>
Message-ID: <6C723C6F-26B4-49D6-89D2-67E9D985B8B3@twistedmatrix.com>


> On Jun 3, 2016, at 01:06, Nagy, Attila <bra at fsn.hu> wrote:
> 
> Hi,
> 
> I have a thread safe synchronous library, which I would like to use in a threadpool using deferToThread.
> 
> Without using (deferTo)threads I get consistent 1-3 ms response times, with deferring to threadpool, I get 30-300, varying wildly.

Why do you think this is bad performance?

With a direct call, you are doing almost nothing.  Just pushing a stack frame.

With a deferToThread call, you are:

acquiring the GIL,
pushing a message into a call queue,
releasing the GIL,
waiting for the worker thread to wake up,
acquiring the GIL,
pulling the work off the queue,
invoking the work in the worker thread,
storing the response on a return queue,
writing a byte into a pipe to wake up the reactor thread,
releasing the GIL,
waiting for the reactor thread to wake up,
acquiring the GIL,
reading the byte from the pipe,
pulling the response work off the queue,
executing it,
then invoking a Deferred's callback chain.

Each of these steps involves a couple of function calls each, and if each takes 3ms like your simple no-op call, you're looking at 48ms just for starters, not taking into account the fact that when you start tossing things into pipes and mutexes the kernel's scheduler gets involved and may (as you noticed) introduce large amounts of non-determinism as other processes and threads run.

While I would certainly like to see this get faster, and I think it probably could be optimized somewhat, it's not reasonable to expect that a single function call could be competitive with this sort of algorithm, when it's made up of so many function calls of its own.

I could definitely be convinced that this is unreasonably slow but it does not seem so from a first reading.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160603/52b65832/attachment-0001.html>

From glyph at twistedmatrix.com  Fri Jun  3 03:35:06 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 3 Jun 2016 02:35:06 -0700
Subject: [Twisted-Python] buildbots: normal service will resume shortly
In-Reply-To: <9953D523-8B1B-44E8-AADB-C408DD3A56C0@twistedmatrix.com>
References: <B2F5DE9E-6AB8-4565-829E-9F9C8E8EC181@twistedmatrix.com>
 <9953D523-8B1B-44E8-AADB-C408DD3A56C0@twistedmatrix.com>
Message-ID: <0A774029-C99D-4EB0-8E1A-11B919996EE8@twistedmatrix.com>


> On Jun 3, 2016, at 00:49, Glyph <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Jun 3, 2016, at 00:39, Glyph <glyph at twistedmatrix.com> wrote:
>> 
>> We had a minor hiccup earlier today due partially to a new Cryptography release (the Windows builders, which started spuriously failing builds) and some random networking issues (the OS X builders, which went offline).  I believe I've gotten them back online and performing to spec and they should chew through their respective backlogs shortly.
> 
> Oops!  The _actual_ bug on Windows appears to be a regression in virtualenv, which I have filed here - https://github.com/pypa/virtualenv/issues/929 - which I've now downgraded to 15.0.1 to work around it for now.

Aaaaand downgrading it caused cryptography installations to fail again, which I take it was due to the older 'pip', hence the reason for the upgrade in the first place.

I've tried to put a workaround into braid and updated the buildmaster; hopefully it will be working again now.

-glyph



From bra at fsn.hu  Fri Jun  3 05:27:21 2016
From: bra at fsn.hu (Nagy, Attila)
Date: Fri, 3 Jun 2016 13:27:21 +0200
Subject: [Twisted-Python] Why deferToThread is so slow?
In-Reply-To: <6C723C6F-26B4-49D6-89D2-67E9D985B8B3@twistedmatrix.com>
References: <57513A93.2030000@fsn.hu>
 <6C723C6F-26B4-49D6-89D2-67E9D985B8B3@twistedmatrix.com>
Message-ID: <57516999.9060009@fsn.hu>

On 06/03/16 10:24, Glyph wrote:
>
>> On Jun 3, 2016, at 01:06, Nagy, Attila <bra at fsn.hu 
>> <mailto:bra at fsn.hu>> wrote:
>>
>> Hi,
>>
>> I have a thread safe synchronous library, which I would like to use 
>> in a threadpool using deferToThread.
>>
>> Without using (deferTo)threads I get consistent 1-3 ms response 
>> times, with deferring to threadpool, I get 30-300, varying wildly.
>
> Why do you think this is bad performance?
>
> With a direct call, you are doing almost nothing.  Just pushing a 
> stack frame.
>
> With a deferToThread call, you are:
[...]

Sure, this is not the perfect example, I just wanted to measure the 
plain latency which this solution gives.
The whole picture is this:
I have an application which runs in uwsgi in multithreaded mode. It uses 
(the blocking)elasticsearch client.
That app can serve queries with some tens of concurrent requests in 
around 3 ms.

For some reasons I would like to rewrite this app in Twisted. If I use 
the txes2 lib (which is nonblocking), I can achieve around the same 
performance (although it varies a lot more). This is async, no threads 
are involved.

My problem is that this library lacks several features, so I would like 
to use the blocking one, which needs to run in threads.
When I do the requests in threads (with deferToThread, or just 
callInThread the whole handler) the response time is around 10-20 times 
more than uwsgi's threaded and blocking and Twisted's async and becomes 
highly unpredictable.

I haven't looked into the details of Twisted's threadpools, but what I 
would expect here is the same as using a simple python threadpool (like 
something uwsgi does, or just in the standard libraries), which 
according to the results work much faster and predictable than Twisted's.

BTW, I use queues in non-twisted programs and they are nowhere to cause 
several milliseconds(!) of latency.

OK, here's a more realistic example:
https://gist.github.com/bra-fsn/08734197601e5a63d6a2b56d7b048119

This does what is described above: calls an ES query in a Twisted 
threadpool and calls it directly in the thread the whole loop runs.

With one thread the overhead is somewhat acceptable:
deferToThread: avg 2051.00 us, sync: avg 1554.70 us, 1.32x increase
The direct call responds in 1.5 ms, while the deferToThread returns in 2ms.

Things get worse with the concurrency.
With 16 threads the response time is 18 times of the direct call (51 ms 
vs 2.8 ms!):
deferToThread: avg 51515.36 us, sync: avg 2798.19 us, 18.41x increase

With 32 threads:
deferToThread: avg 108222.73 us, sync: avg 2922.28 us, 37.03x increase

I use normal (stdlib) threadpools and I haven't seen this kind of 
performance degradation.

100 ms is a lot of time...
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160603/18ea4fd2/attachment.html>

From markrwilliams at gmail.com  Fri Jun  3 16:22:57 2016
From: markrwilliams at gmail.com (Mark Williams)
Date: Fri, 3 Jun 2016 15:22:57 -0700
Subject: [Twisted-Python] Why deferToThread is so slow?
In-Reply-To: <57513A93.2030000@fsn.hu>
References: <57513A93.2030000@fsn.hu>
Message-ID: <20160603222256.GA21373@hammal>

On Fri, Jun 03, 2016 at 10:06:43AM +0200, Nagy, Attila wrote:
> Hi,
>
> I have a thread safe synchronous library, which I would like to use
> in a threadpool using deferToThread.
>
> Without using (deferTo)threads I get consistent 1-3 ms response
> times, with deferring to threadpool, I get 30-300, varying wildly.
> [snip...]
> # python /tmp/deft.py 1
> deferToThread: avg 316.17 us, sync: avg 1.38 us, 228.71x increase
> ...
> # python /tmp/deft.py 8
> deferToThread: avg 2542.90 us, sync: avg 1.37 us, 1854.14x increase
> ...
> # python /tmp/deft.py 16
> deferToThread: avg 4745.76 us, sync: avg 1.26 us, 3770.11x increase
>  ...
> On 16 threads it takes nearly 5 ms(!) to call a local function...
>
> The test program is here:
> https://gist.github.com/bra-fsn/1fd481b44590a939e849cb9073ba1a41

There's a lot going on here!  I'm going to break my responses down into three
categories:

1) those about the way your test program is written;
2) those about Queue-based thread pools.
3) those about threads in Python;


1) The way your test program is written.

There are two puzzling lines in your test program.

The first is the use of reactor.callWhenRunning(dtt):
https://gist.github.com/bra-fsn/1fd481b44590a939e849cb9073ba1a41#file-defert-py-L22

I'm guessing the goal here was to call dtt over and over again
infinitely?  Why not replace this with a while True: loop?  The
reactor won't begin scheduling threads until it's begun running, so
you could rely on the yield blocking the coroutine until the reactor's
started.  I'll use a while True: loop in my version of your test program.

...the second, and more interesting line:
https://gist.github.com/bra-fsn/1fd481b44590a939e849cb9073ba1a41#file-defert-py-L26

Why run this code in a separate thread?  Besides the fact that doing
so requires you to write thread-safe code (which is hard!), this also
means your dtt function will compete with deferToThread for access to
the reactor's thread pool.

In general, if you're writing performance-sensitive code, you should
not use deferToThread.  Instead, you should use deferToThreadPool:

https://twistedmatrix.com/documents/current/api/twisted.internet.threads.html#deferToThreadPool

That's because the reactor's threadpool, which deferToThread uses,
also handles things like DNS lookups.  That means other parts of your
Twisted program will compete with your performance-sensitive code.  To
ensure that your performance-sensitive code gets the best chance to
run it should be given its own thread pool, which *only* runs that
code.  I'll use such a thread pool in my version of your test program.


2) The way Queue-based thread pools work.

There's another source of scheduling contention in your program.
sys.argv[1] does *not* increase the number of threads -- instead, it
increases the *demand* on threads.  The number of threads will be no
more than 64, per:

https://gist.github.com/bra-fsn/1fd481b44590a939e849cb9073ba1a41#file-defert-py-L24

With a value 16 threads, you'll have 16 * 10000 scheduled function calls
that can only run across 64 threads.

To make this behavior clear, consider this minimal implementation of a
Queue-based thread pool:

https://gist.github.com/markrwilliams/2e40ed0fa06a9e653609dd61fd80ca95#file-simple_threadpool-py

Note that each testRun needs its own thread, so that waiting for a
result doesn't prevent more function calls from being scheduled.  This
isn't necessary with Twisted because deferToThread(Pool) because
that's exactly what Deferreds are for!

Also note that this implementation cheats -- results of a function
call f(1) aren't routed back to the place where they were requested.
Twisted's thread pool does in fact do this.

With those caveats, let's try this with just 1 * 10000 scheduled
function calls across 64 threads:

$ python /tmp/tp.py 1
threadpool: avg 46.067005 us, sync: avg 0.416845 us, 110.51x increase

We see a pretty significant difference between a simple synchronous
function call and dispatching to a thread via a Queue and obtaining
its result.

What happens if we bump things up to 16 * 10000?

$ python simple_threadpool.py 16
threadpool: avg 667.252771 us, sync: avg 1.551497 us, 430.07x increase
threadpool: avg 668.004651 us, sync: avg 1.498873 us, 445.67x increase
threadpool: avg 667.386251 us, sync: avg 1.686789 us, 395.65x increase
threadpool: avg 668.936246 us, sync: avg 1.448275 us, 461.88x increase
threadpool: avg 666.702565 us, sync: avg 1.459888 us, 456.68x increase
threadpool: avg 669.740488 us, sync: avg 1.620622 us, 413.26x increase
threadpool: avg 666.529074 us, sync: avg 1.657008 us, 402.25x increase
threadpool: avg 666.151787 us, sync: avg 1.583210 us, 420.76x increase
threadpool: avg 666.713700 us, sync: avg 1.509841 us, 441.58x increase
threadpool: avg 666.670518 us, sync: avg 1.533161 us, 434.83x increase
threadpool: avg 666.880252 us, sync: avg 1.536666 us, 433.98x increase
threadpool: avg 666.819521 us, sync: avg 1.507123 us, 442.45x increase
threadpool: avg 664.132656 us, sync: avg 1.624818 us, 408.74x increase
threadpool: avg 667.016451 us, sync: avg 1.490790 us, 447.42x increase
threadpool: avg 668.779542 us, sync: avg 1.488286 us, 449.36x increase
threadpool: avg 667.080139 us, sync: avg 1.524386 us, 437.61x increase

Not only did the the difference between the two increase, it also took
longer to run our synchronus function in a given thread!  The
difference between the synchronous and threadpool based calls is due
to the fact that as the amount of work increases, the number of
workers to do it doesn't.  That means the queue keeps getting longer
and longer.


3) The way threads work in Python.

As for our synchronous function, remember that it's running in its own
thread; that means it's very likely that it took longer to run because
of contention for the GIL.

So two things to remember about using thread pools in Python:

a) Increasing the amount of work without increasing the number of
workers always makes latency worse.  This is true of queues and
threads in any environment.

b) The GIL *will* become a bottleneck with larges amounts of work and
an increasing number of threads.  That means you can't just keep
adding threads to address the workload problem described in a).

Now, let's take what we've learned and apply it to a different version
of your test program.
>
> BTW, I've run this on pypy 5.1.1 with even worse results:
> https://mail.python.org/pipermail/pypy-dev/2016-June/014477.html
>
...that also has an affordance to not use inlineCallbacks, as these
likely interfere with PyPy's JIT:
https://twistedmatrix.com/trac/ticket/6278

Here's the program:

https://gist.github.com/markrwilliams/2e40ed0fa06a9e653609dd61fd80ca95#file-twisted_threadpool-py

Let's try it with 1 * 10000 scheduled functions:

$ python twisted_threadpool.py 1
deferToThread: avg 121.014680 us, sync: avg 0.463771 us, 260.94x increase
deferToThread: avg 130.383369 us, sync: avg 0.475454 us, 274.23x increase
deferToThread: avg 125.587505 us, sync: avg 0.466942 us, 268.96x increase
deferToThread: avg 124.141280 us, sync: avg 0.469970 us, 264.15x increase
deferToThread: avg 135.672952 us, sync: avg 0.505450 us, 268.42x increase
deferToThread: avg 130.711776 us, sync: avg 0.483895 us, 270.12x increase
deferToThread: avg 118.456074 us, sync: avg 0.438543 us, 270.11x increase
deferToThread: avg 137.559747 us, sync: avg 0.504330 us, 272.76x increase
deferToThread: avg 121.825337 us, sync: avg 0.459836 us, 264.93x increase
deferToThread: avg 141.214092 us, sync: avg 0.539142 us, 261.92x increase
...

So Twisted's thread pool is about twice as slow as our toy one.  Not too bad!

With 16 * 10000 scheduled functions:

deferToThread: avg 1691.969863 us, sync: avg 0.444171 us, 3809.28x increase
deferToThread: avg 1693.141545 us, sync: avg 0.434609 us, 3895.78x increase
deferToThread: avg 1693.619694 us, sync: avg 0.443431 us, 3819.35x increase
deferToThread: avg 1693.614949 us, sync: avg 0.439235 us, 3855.83x increase
deferToThread: avg 1694.422696 us, sync: avg 0.435658 us, 3889.34x increase
deferToThread: avg 1694.554698 us, sync: avg 0.431748 us, 3924.87x increase
deferToThread: avg 1694.615262 us, sync: avg 0.430913 us, 3932.61x increase
deferToThread: avg 1694.747073 us, sync: avg 0.428314 us, 3956.79x increase
deferToThread: avg 1694.701245 us, sync: avg 0.427885 us, 3960.65x increase
deferToThread: avg 1695.052327 us, sync: avg 0.419444 us, 4041.19x increase
deferToThread: avg 1695.149564 us, sync: avg 0.432749 us, 3917.16x increase
deferToThread: avg 1695.340127 us, sync: avg 0.432845 us, 3916.74x increase
deferToThread: avg 1695.489345 us, sync: avg 0.433822 us, 3908.26x increase
deferToThread: avg 1695.886709 us, sync: avg 0.436207 us, 3887.81x increase
deferToThread: avg 1696.334289 us, sync: avg 0.438710 us, 3866.64x increase
deferToThread: avg 1696.634512 us, sync: avg 0.434704 us, 3902.96x increase

Our synchronous function hasn't gotten worse because there are fewer
threads at play (thanks, Twisted!), and the difference between the two
has gone up by about 16x (3809.28 / 16 = 238.08 -- and we were seeing
~260x)

For fun, here are the PyPy results for the code that *doesn't* use
inlineCallbacks:

$ pypy twisted_threadpool.py 1 deferred
deferToThread: avg 248.463297 us, sync: avg 0.979066 us, 253.78x increase
deferToThread: avg 89.544964 us, sync: avg 0.260448 us, 343.81x increase
deferToThread: avg 63.347292 us, sync: avg 0.204158 us, 310.29x increase
deferToThread: avg 63.825631 us, sync: avg 0.205946 us, 309.91x increase
deferToThread: avg 55.110717 us, sync: avg 0.193667 us, 284.56x increase
deferToThread: avg 51.918244 us, sync: avg 0.212955 us, 243.80x increase
...
deferToThread: avg 62.353158 us, sync: avg 0.239372 us, 260.49x increase
deferToThread: avg 40.433884 us, sync: avg 0.148630 us, 272.04x increase
deferToThread: avg 65.630174 us, sync: avg 0.165820 us, 395.79x increase
deferToThread: avg 85.674763 us, sync: avg 0.259972 us, 329.55x increase
deferToThread: avg 65.085721 us, sync: avg 0.198150 us, 328.47x increase
deferToThread: avg 44.353342 us, sync: avg 0.153947 us, 288.11x increase
...

Looks like PyPy is doing a pretty good job!

(I won't show it here, but there's a comment in that gist that
contains links to vmprof PyPy runs for both the inlineCallback and
inlineCallback-free versions.  Looks like inlineCallbacks *does* get
optimized pretty well...)

Thins to consider:

1) Use your own thread pool - see the gist I wrote for how to do that.

2) The behavior you were observing was due to increasing the amount of
work but not the workers to do it, and occurs with any thread pool
implementation.

3) PyPy can be really fast!

Hope this helps.  Let me know if anything's unclear!

Best,

Mark


From dynamicgl at gmail.com  Fri Jun  3 20:10:36 2016
From: dynamicgl at gmail.com (Gelin Yan)
Date: Sat, 4 Jun 2016 10:10:36 +0800
Subject: [Twisted-Python] Why deferToThread is so slow?
In-Reply-To: <20160603222256.GA21373@hammal>
References: <57513A93.2030000@fsn.hu> <20160603222256.GA21373@hammal>
Message-ID: <CABkOF6TV52QrORwxbz_N9jsORG=Tz7EVFQh0RR5o6H3UT6ONNg@mail.gmail.com>

>
>
>
> In general, if you're writing performance-sensitive code, you should
> not use deferToThread.  Instead, you should use deferToThreadPool:
>
>
> https://twistedmatrix.com/documents/current/api/twisted.internet.threads.html#deferToThreadPool
>
> That's because the reactor's threadpool, which deferToThread uses,
> also handles things like DNS lookups.  That means other parts of your
> Twisted program will compete with your performance-sensitive code.  To
> ensure that your performance-sensitive code gets the best chance to
> run it should be given its own thread pool, which *only* runs that
> code.  I'll use such a thread pool in my version of your test program.
>
>
>
>
> https://gist.github.com/markrwilliams/2e40ed0fa06a9e653609dd61fd80ca95#file-simple_threadpool-py
>
>
>
>
Hi Mark

     You mentioned deferToThreadPool. I am curious whether the standard
threadpool in multipleprocessing.dummy works with twisted.

Regards

gelin yan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160604/75ec2dce/attachment.html>

From glyph at twistedmatrix.com  Fri Jun  3 20:55:02 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 3 Jun 2016 19:55:02 -0700
Subject: [Twisted-Python] Why deferToThread is so slow?
In-Reply-To: <CABkOF6TV52QrORwxbz_N9jsORG=Tz7EVFQh0RR5o6H3UT6ONNg@mail.gmail.com>
References: <57513A93.2030000@fsn.hu> <20160603222256.GA21373@hammal>
 <CABkOF6TV52QrORwxbz_N9jsORG=Tz7EVFQh0RR5o6H3UT6ONNg@mail.gmail.com>
Message-ID: <3B6A53BD-6C8C-422E-8A95-1C18F001A256@twistedmatrix.com>


> On Jun 3, 2016, at 19:10, Gelin Yan <dynamicgl at gmail.com> wrote:

> 
> Hi Mark
> 
>      You mentioned deferToThreadPool. I am curious whether the standard threadpool in multipleprocessing.dummy works with twisted.

deferToThreadPool uses a Twisted threadpool interface, not a stdlib one.

-glyph

From rodrigc at crodrigues.org  Sat Jun  4 05:41:37 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 4 Jun 2016 04:41:37 -0700
Subject: [Twisted-Python] Need clarification on reviews for Python 3
 fixes for Twisted
In-Reply-To: <2474609.Rc1Be5hivi@i5>
References: <CAG=rPVdkNbLiOSS3BNmx5FVbLus8JAcZkepCXMjhMmrXdvKt4A@mail.gmail.com>
 <475c31e5-ae8c-e42b-f20f-467683e231c0@itamarst.org> <2474609.Rc1Be5hivi@i5>
Message-ID: <CAG=rPVcxiTdXymzEtEFjrRKi-Ejq6B6cVCud707wRVa2Sjhy8A@mail.gmail.com>

On Fri, May 27, 2016 at 6:14 AM, Wolfgang Rohdewald <
wolfgang.kde at rohdewald.de> wrote:

> Am Freitag, 27. Mai 2016, 08:13:10 schrieb Itamar Turner-Trauring:
>
> This would have been helpful when I tried to port PB to python3.
> Instead, that port is now bitrotting.
>

Can you point me to your attempt to port PB to python3?
Glyph and cyli have been merging a lot of my simple python3 fixes,
so now I am motivated to do more. :)

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160604/901e6424/attachment.html>

From wolfgang.kde at rohdewald.de  Sat Jun  4 06:36:24 2016
From: wolfgang.kde at rohdewald.de (Wolfgang Rohdewald)
Date: Sat, 04 Jun 2016 14:36:24 +0200
Subject: [Twisted-Python] Need clarification on reviews for Python 3
	fixes for Twisted
In-Reply-To: <CAG=rPVcxiTdXymzEtEFjrRKi-Ejq6B6cVCud707wRVa2Sjhy8A@mail.gmail.com>
References: <CAG=rPVdkNbLiOSS3BNmx5FVbLus8JAcZkepCXMjhMmrXdvKt4A@mail.gmail.com>
 <2474609.Rc1Be5hivi@i5>
 <CAG=rPVcxiTdXymzEtEFjrRKi-Ejq6B6cVCud707wRVa2Sjhy8A@mail.gmail.com>
Message-ID: <1926291.9cLF1DGSPq@i5>

Am Samstag, 4. Juni 2016, 04:41:37 schrieb Craig Rodrigues:
> On Fri, May 27, 2016 at 6:14 AM, Wolfgang Rohdewald <
> wolfgang.kde at rohdewald.de> wrote:
> 
> > Am Freitag, 27. Mai 2016, 08:13:10 schrieb Itamar Turner-Trauring:
> >
> > This would have been helpful when I tried to port PB to python3.
> > Instead, that port is now bitrotting.
> >
> 
> Can you point me to your attempt to port PB to python3?
> Glyph and cyli have been merging a lot of my simple python3 fixes,
> so now I am motivated to do more. :)
> 
> --
> Craig

You are welcome: https://github.com/wrohdewald/twisted/commits/spread-py3-7598/twisted

-- 
Wolfgang


From rodrigc at crodrigues.org  Sun Jun  5 09:15:06 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sun, 5 Jun 2016 08:15:06 -0700
Subject: [Twisted-Python] Need clarification on reviews for Python 3
 fixes for Twisted
In-Reply-To: <475c31e5-ae8c-e42b-f20f-467683e231c0@itamarst.org>
References: <CAG=rPVdkNbLiOSS3BNmx5FVbLus8JAcZkepCXMjhMmrXdvKt4A@mail.gmail.com>
 <475c31e5-ae8c-e42b-f20f-467683e231c0@itamarst.org>
Message-ID: <CAG=rPVdhvUOKXNEw-FP9c0LDZmEVtPrw-X1FtYnk9cidmRmQHw@mail.gmail.com>

On Fri, May 27, 2016 at 5:13 AM, Itamar Turner-Trauring <itamar at itamarst.org
> wrote:

On 05/27/2016 04:19 AM, Craig Rodrigues wrote:
>
> I think they're fine to accept insofar as:
>
> 1. There is strong ongoing momentum for the port now, so these changes
> makes porting module-by-module easier and won't just bitrot.
> 2. They're doing one particular incompatibility at a time, rather than
> "here's an assortment of random changes to a module that may or may not
> port that module fully, who knows."
>
> I don't think they are sufficient to port a module (someone needs to read
> the code and think a bit, usually), but they will make it easier to do so,
> so they definitely are worth continuing.
>
>
Thanks!  You have summarized exactly the strategy I have been using when
submitting these patches.
At Pycon, Glyph and cyli managed to review and merge a number of my patches.

Do you have any bandwidth to review some of the print -> print() changes I
did?  They are here:

http://bit.ly/24r2fuJ

Thanks.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160605/1d808bb3/attachment.html>

From glyph at twistedmatrix.com  Mon Jun  6 01:36:56 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 6 Jun 2016 00:36:56 -0700
Subject: [Twisted-Python] Need clarification on reviews for Python 3
	fixes for Twisted
In-Reply-To: <CAG=rPVdhvUOKXNEw-FP9c0LDZmEVtPrw-X1FtYnk9cidmRmQHw@mail.gmail.com>
References: <CAG=rPVdkNbLiOSS3BNmx5FVbLus8JAcZkepCXMjhMmrXdvKt4A@mail.gmail.com>
 <475c31e5-ae8c-e42b-f20f-467683e231c0@itamarst.org>
 <CAG=rPVdhvUOKXNEw-FP9c0LDZmEVtPrw-X1FtYnk9cidmRmQHw@mail.gmail.com>
Message-ID: <6017CABE-55A5-4724-9764-0C273785F1DF@twistedmatrix.com>


> On Jun 5, 2016, at 8:15 AM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> At Pycon, Glyph and cyli managed to review and merge a number of my patches.

I would like to point out that at the sprints, I was nearly continuously engaged in conversation, so I should be able to review many more now that PyCon is done :).  Thanks again for submitting all of these.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160606/01019e91/attachment.html>

From p.mayers at imperial.ac.uk  Mon Jun  6 05:21:12 2016
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 6 Jun 2016 12:21:12 +0100
Subject: [Twisted-Python] Style/testing for log-related changes
Message-ID: <57555CA8.40404@imperial.ac.uk>

All,

I'd like to submit a patch to convert t.conch.ssh to the new logging. 
The main reason is that the conch code logs a *lot* of really, really, 
really boring crap that I want to throw away because it just clutters up 
the logs e.g.

https://github.com/twisted/twisted/blob/twisted-16.2.0/twisted/conch/ssh/connection.py#L454

Moving it to the new logging would, at very least, let me trivially 
write an observer which throws away these by module.

Does anyone have an example ticket/commit for a conversion to the new 
logging showing the general style, and the technique used for writing 
tests for that?

Cheers,
Phil


From glyph at twistedmatrix.com  Mon Jun  6 14:40:04 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 6 Jun 2016 13:40:04 -0700
Subject: [Twisted-Python] Style/testing for log-related changes
In-Reply-To: <57555CA8.40404@imperial.ac.uk>
References: <57555CA8.40404@imperial.ac.uk>
Message-ID: <50BD783F-5296-40A3-B2A5-8A7F1F226D1B@twistedmatrix.com>


> On Jun 6, 2016, at 04:21, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> 
> All,
> 
> I'd like to submit a patch to convert t.conch.ssh to the new logging. The main reason is that the conch code logs a *lot* of really, really, really boring crap that I want to throw away because it just clutters up the logs e.g.
> 
> https://github.com/twisted/twisted/blob/twisted-16.2.0/twisted/conch/ssh/connection.py#L454

No need to justify it - any work to move us internally to new APIs so we can finally get to the business of deprecating the old ones would be great!

> Moving it to the new logging would, at very least, let me trivially write an observer which throws away these by module.

No need to write one!  This is an explicit use-case for new logging: see https://twistedmatrix.com/documents/16.2.0/api/twisted.logger.LogLevelFilterPredicate.html and https://twistedmatrix.com/documents/16.2.0/api/twisted.logger.FilteringLogObserver.html

(You may also be interested in figuring out a solution to https://twistedmatrix.com/trac/ticket/7969 )

> Does anyone have an example ticket/commit for a conversion to the new logging showing the general style, and the technique used for writing tests for that?

twistd itself was converted over - https://twistedmatrix.com/trac/ticket/8235 - but of course that's mostly from the consumer side rather than emitting logs.  It shouldn't be too complex, honestly; just get rid of all manual string formatting, and convert any %()s format strings to {}.  The testing support is the same as for the old logging system (add a global observer, remove it in an addCleanup, assert about the things it caught) because it's still just key-value pairs, they're just better-defined now.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160606/718dfdd9/attachment.html>

From glyph at twistedmatrix.com  Mon Jun  6 15:38:55 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 6 Jun 2016 14:38:55 -0700
Subject: [Twisted-Python] buildbot is back
Message-ID: <05D63E8A-4FCB-498F-9F87-FF6B47DD5F16@twistedmatrix.com>

When migrating it to a new VM, we seem to have somewhat underprovisioned buildbot.twistedmatrix.com.  I've just moved it from a 1G to a 2G instance.  Sorry about the downtime!  Hopefully this is enough RAM for it to do its job.  It seemed to happily consume only a few hundred megs when we were doing test builds, but there's some kind of load spike that happens periodically which was OOM killing it and I believe this change should fix it.

-glyph

From commercials24 at yahoo.de  Tue Jun  7 04:50:57 2016
From: commercials24 at yahoo.de (steven meier)
Date: Tue, 07 Jun 2016 12:50:57 +0200
Subject: [Twisted-Python] inlinecallbacks, unhandled error....where?
Message-ID: <1465296657.5264.12.camel@yahoo.de>

hi,


ive got these two functions:
@inlineCallbacks
def getUserList():
    reload_interval = yield getReloadInterval()
    print "222", reload_interval
    
    target_url = host + "/?ReloaderUserOnline"

    body = urllib.urlencode({"reloadsequenz":reload_interval})
    #body = '\r\n'
    #headers = {'Content-Type': 'application/x-www-form-urlencoded'}

    d = getPage(url = target_url, cookies=cookies, agent=useragent,
        postdata=body,
        method = 'POST',
        headers=headers)

    defer.returnValue(d)



i can see the output:
222 somenumber, so apparently getReloadInterval works. it returns some
magic number as expected



now i call getUserList from this function:
(response is 1, so d = getUserList gets evaluated)
but there i get:

222 5821
Unhandled error in Deferred (short version, complete error at the end)


Traceback (most recent call last):
  File
"/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py", line 1184, in gotResult


def printLoginResult(response):
    #we are in, login accepted
    if response == ' 1':
        print "we are in, get user list"
        #printChat(response)
        
        def printResult(result):
            print repr(result)
        d = getUserList()
        d.addCallback(printResult)
        d.addErrback(printResult)
      
        


why is printResult not run?







Unhandled error in Deferred:


Traceback (most recent call last):
  File
"/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py", line 1184, in gotResult
    _inlineCallbacks(r, g, deferred)
  File
"/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py", line 1171, in _inlineCallbacks
    deferred.callback(e.value)
  File
"/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py", line 393, in callback
    self._startRunCallbacks(result)
  File
"/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py", line 501, in _startRunCallbacks
    self._runCallbacks()
--- <exception caught here> ---
  File
"/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py", line 588, in _runCallbacks
    current.result = callback(current.result, *args, **kw)
  File
"/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py", line 1184, in gotResult
    _inlineCallbacks(r, g, deferred)
  File
"/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py", line 1171, in _inlineCallbacks
    deferred.callback(e.value)
  File
"/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py", line 392, in callback
    assert not isinstance(result, Deferred)
exceptions.AssertionError: 




From rodrigc at crodrigues.org  Tue Jun  7 16:39:52 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 7 Jun 2016 15:39:52 -0700
Subject: [Twisted-Python] Travis-CI integration work
In-Reply-To: <CAHZAEpdoMyRZ0a=8sCHsngwGvdGy+x31rTZFu+tyce8L942rTQ@mail.gmail.com>
References: <CAFycZ9cWJQsgzzptpNMZSON0eSKKjZ-UL8Av8n=8g32SbJ8Ovw@mail.gmail.com>
 <CAHZAEpdoMyRZ0a=8sCHsngwGvdGy+x31rTZFu+tyce8L942rTQ@mail.gmail.com>
Message-ID: <CAG=rPVe7T3PLB+HgUO9Uc+diFkR7ui_N3V=BX=QtBtU9mOXXFQ@mail.gmail.com>

Travis-CI integration for Twisted has reached a milestone!
Travis has been set up and is currently in use for Twisted.

For pull requests submitted against Twisted:

https://github.com/twisted/twisted/pulls

the Travis service will build it, and report status in the pull request
itself.
The build status of pull requests is also available on the Travis site:

https://travis-ci.org/twisted/twisted/pull_requests

This is how it works:

   - The *.travis.yml* file checked into the Twisted source tree gives the
   Travis service the commands that should be executed.
   - In .travis.yml, we make use of *tox-travis* (
   https://pypi.python.org/pypi/tox-travis ).
   - tox-travis looks tells Travis to execute tox, using the *[tox:travis]*
   section in the *tox.ini* file checked into the Twisted source tree.
   This is how Travis executes the Twisted tests


Thanks to Adi for taking my initial patch for this, finishing it off, and
doing the initial Travis setup.
Thanks to cyli for doing the final review of the patch and for committing
it to trunk.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160607/d7405fb5/attachment.html>

From rodrigc at crodrigues.org  Fri Jun 10 03:57:19 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 10 Jun 2016 02:57:19 -0700
Subject: [Twisted-Python] Using zope
Message-ID: <CAG=rPVdLL+s3qJrXv1nc=2fm-KaX9xQ16BfF_CPSkYHLvKMy2A@mail.gmail.com>

Hi,

There are some places in the Twisted code which use zope.interface to do
things like:


class MyClass:
    inherits(IMyInterface)


That works in Python 2, but the zope.interface library has code to hard
fail that
line on Python 3.  The supported way of doing the same thing on Python 2
and 3 is:


@implementer(IMyInterface)
class MyClass

This was discussed on the mailing list before by Barry Warsaw:
https://twistedmatrix.com/pipermail/twisted-python/2013-January/026414.html

I have submitted several patches for review (Trac ticket is in each one):

http://bit.ly/1YhxKI2

For anyone who can help review the patches, the help would be appreciated.
:)

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160610/b42b3b07/attachment.html>

From rodrigc at crodrigues.org  Fri Jun 10 13:39:20 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 10 Jun 2016 12:39:20 -0700
Subject: [Twisted-Python] Porting PB to python3
Message-ID: <CAG=rPVe=wvNZoczU621nWFMj7wXpG5SPNxKuNs6aKU9Rgz=cNA@mail.gmail.com>

Hi,

I reviewed your branch:
https://github.com/wrohdewald/twisted/commits/spread-py3-7598/twisted

In my opinion, that branch has two categories of Python 3 porting:

Category 1: Minor
  -> these are "minor" fixos, such as dealing with xrange -> range

Category 2: Major
   -> you have done a lot of work to deal with bytes versus unicode strings

I hope you haven't lost interest in this, and are still willing to push
forward.
I would recommend that if you can separate out the minor fixes
into separate GitHub pull requests and separate Trac tickets, then do that.

If you see: https://github.com/twisted/twisted/commits/trunk

you will see I have submitted a lot of pull requests + trac tickets of
"minor"
Python 3 fixes, and those have successfully been reviewed and merged
by Twisted committers.

Dealing with bytes versus unicode strings will take longer to review,
because it is more advanced.  That is why I recommend separating
out the "minor" fixos if you can.

The other think I would recommend is if you do periodic merges
from trunk to your branch, since a lot of new Python 3 fixes have gone into
trunk in the past few weeks.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160610/fb353a95/attachment.html>

From hawkowl at atleastfornow.net  Fri Jun 10 16:56:46 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sat, 11 Jun 2016 06:56:46 +0800
Subject: [Twisted-Python] Porting PB to python3
In-Reply-To: <CAG=rPVe=wvNZoczU621nWFMj7wXpG5SPNxKuNs6aKU9Rgz=cNA@mail.gmail.com>
References: <CAG=rPVe=wvNZoczU621nWFMj7wXpG5SPNxKuNs6aKU9Rgz=cNA@mail.gmail.com>
Message-ID: <B670F4E1-E48A-4B11-9198-0910D533F465@atleastfornow.net>


> On 11 Jun 2016, at 03:39, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Hi,
> 
> I reviewed your branch:  https://github.com/wrohdewald/twisted/commits/spread-py3-7598/twisted
> 
> In my opinion, that branch has two categories of Python 3 porting:
> 
> Category 1: Minor
>   -> these are "minor" fixos, such as dealing with xrange -> range
> 
> Category 2: Major
>    -> you have done a lot of work to deal with bytes versus unicode strings
> 
> I hope you haven't lost interest in this, and are still willing to push forward.
> I would recommend that if you can separate out the minor fixes
> into separate GitHub pull requests and separate Trac tickets, then do that.
> 
> If you see: https://github.com/twisted/twisted/commits/trunk
> 
> you will see I have submitted a lot of pull requests + trac tickets of "minor"
> Python 3 fixes, and those have successfully been reviewed and merged
> by Twisted committers.
> 
> Dealing with bytes versus unicode strings will take longer to review,
> because it is more advanced.  That is why I recommend separating
> out the "minor" fixos if you can.
> 
> The other think I would recommend is if you do periodic merges
> from trunk to your branch, since a lot of new Python 3 fixes have gone into trunk in the past few weeks.
> 
> --
> Craig
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

I've also taken a hack at this whilst I was on the plane; please see https://github.com/twisted/twisted/compare/trunk...port-pb-7598 which has some minorly different approaches to porting than your branch. There is a few fixes to things I hadn't got to, which I'll investigate :)

- Amber

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160611/62451179/attachment.pgp>

From hawkowl at atleastfornow.net  Fri Jun 10 22:35:24 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sat, 11 Jun 2016 12:35:24 +0800
Subject: [Twisted-Python] Upcoming Buildbot Changes (Ubuntu version support)
Message-ID: <4C6711AD-E55E-4292-AC86-3519127B0A50@atleastfornow.net>

Hi everyone,

I'm doing some builder work today; including changing the versions of Ubuntu we test on. From next week, our supported Ubuntu platforms will be:

- Ubuntu 12.04 (Python 2.7)
- Ubuntu 14.04 (Python 2.7)
- Ubuntu 16.04 (Python 2.7, Python 3.4, Python 3.5, PyPy (unsupported))

These are all LTS versions right now, and should provide us pretty wide coverage of Ubuntus that are widely used.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160611/86a771dc/attachment.pgp>

From glyph at twistedmatrix.com  Sat Jun 11 13:36:29 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 11 Jun 2016 12:36:29 -0700
Subject: [Twisted-Python] Upcoming Buildbot Changes (Ubuntu version
	support)
In-Reply-To: <4C6711AD-E55E-4292-AC86-3519127B0A50@atleastfornow.net>
References: <4C6711AD-E55E-4292-AC86-3519127B0A50@atleastfornow.net>
Message-ID: <37999FF5-58B2-4D89-89F8-502C62D5D5E2@twistedmatrix.com>

> On Jun 10, 2016, at 21:35, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> Hi everyone,
> 
> I'm doing some builder work today; including changing the versions of Ubuntu we test on. From next week, our supported Ubuntu platforms will be:
> 
> - Ubuntu 12.04 (Python 2.7)
> - Ubuntu 14.04 (Python 2.7)
> - Ubuntu 16.04 (Python 2.7, Python 3.4, Python 3.5, PyPy (unsupported))

Cool!  Is this going to let us delete any builders? :)

> These are all LTS versions right now, and should provide us pretty wide coverage of Ubuntus that are widely used.

Thanks for taking on this maintenance.

-g

From hawkowl at atleastfornow.net  Sat Jun 11 23:50:22 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sun, 12 Jun 2016 13:50:22 +0800
Subject: [Twisted-Python] Upcoming Buildbot Changes (Ubuntu version
	support)
In-Reply-To: <37999FF5-58B2-4D89-89F8-502C62D5D5E2@twistedmatrix.com>
References: <4C6711AD-E55E-4292-AC86-3519127B0A50@atleastfornow.net>
 <37999FF5-58B2-4D89-89F8-502C62D5D5E2@twistedmatrix.com>
Message-ID: <F8B9F8E7-D634-44AD-939B-CB68C89C7A1B@atleastfornow.net>


> On 12 Jun 2016, at 03:36, Glyph <glyph at twistedmatrix.com> wrote:
> 
>> On Jun 10, 2016, at 21:35, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
>> 
>> Hi everyone,
>> 
>> I'm doing some builder work today; including changing the versions of Ubuntu we test on. From next week, our supported Ubuntu platforms will be:
>> 
>> - Ubuntu 12.04 (Python 2.7)
>> - Ubuntu 14.04 (Python 2.7)
>> - Ubuntu 16.04 (Python 2.7, Python 3.4, Python 3.5, PyPy (unsupported))

(correction, 16.04 dropped Python 3.4 from the repos, so it will be 2.7, 3.5, PyPy on that platform, with 3.4 being covered by Fedora)

> 
> Cool!  Is this going to let us delete any builders? :)

Yes, all of our 15.04 and 15.10 builders can be removed now, which I'll do shortly.

> 
>> These are all LTS versions right now, and should provide us pretty wide coverage of Ubuntus that are widely used.
> 
> Thanks for taking on this maintenance.

:)

> 
> -g
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160612/34c00a1a/attachment.pgp>

From wolfgang.kde at rohdewald.de  Sun Jun 12 11:04:49 2016
From: wolfgang.kde at rohdewald.de (Wolfgang Rohdewald)
Date: Sun, 12 Jun 2016 19:04:49 +0200
Subject: [Twisted-Python] Porting PB to python3
In-Reply-To: <CAG=rPVe=wvNZoczU621nWFMj7wXpG5SPNxKuNs6aKU9Rgz=cNA@mail.gmail.com>
References: <CAG=rPVe=wvNZoczU621nWFMj7wXpG5SPNxKuNs6aKU9Rgz=cNA@mail.gmail.com>
Message-ID: <1568933.RT1ME0EebJ@skull>

Am Freitag, 10. Juni 2016, 12:39:20 CEST schrieb Craig Rodrigues:
> I hope you haven't lost interest in this, and are still willing to push
> forward.

Maybe in autumn. But I rather hope somebody else would continue with this.

--
Wolfgang


From itamar at itamarst.org  Sun Jun 12 14:32:20 2016
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 12 Jun 2016 16:32:20 -0400
Subject: [Twisted-Python] Responding to PRs
Message-ID: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>

Hi all,

Since we're starting to get PRs from random people it's worth trying to 
make the process as friendly as possible.

So, maybe instead of telling new contribtutors "PRs won't be reviewed 
without an issue, see contributor guidelines" it would be better to say 
"Thanks for the PR! I opened an issue for this PR here (tm.tl/12345). In 
the future we'd appreciate it if you could open an issue before 
submitting PRs; see contributor guidelines for details".

If someone went out of their way to provide a fix, we should try to 
minimize any unnecessary stop-energy they encounter along the way, even 
if that means some people won't learn the intricacies of the process.

-Itamar



From rodrigc at crodrigues.org  Sun Jun 12 15:15:37 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sun, 12 Jun 2016 14:15:37 -0700
Subject: [Twisted-Python] Responding to PRs
In-Reply-To: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
References: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
Message-ID: <CAG=rPVcS4KArL+t9ZXUin0iw+hhsyxJ13QKnn5764Fsr1c=ozQ@mail.gmail.com>

Hi,

I support this approach.

I have a few small suggestions.
  (1)  Give the exact link of some reasonable text that you want people to
read. The contributor guidelines are accurate,
        but the text is verbose.  It takes a while to get to the text that
gives you the actual steps to follow.

  (2)  GitHub uses the term "issue", while Trac uses the term "ticket".  If
you tell people to open an "issue" they
        might get confused and try to open a GitHub issue.

*"Thanks for the PR! I opened a ticket for this PR here (tm.tl/12345
<http://tm.tl/12345>). In the future we'd appreciate it if you could open a
ticket before submitting PRs;
see https://twistedmatrix.com/trac/wiki/TwistedDevelopment#SubmittingaPatch
<https://twistedmatrix.com/trac/wiki/TwistedDevelopment#SubmittingaPatch> "*

If the Twisted developers get very efficient at opening Trac tickets on
behalf of patch submitters,
then the incentive for patch submitters to interact with Trac goes down.
 :) :)

--
Craig

On Sun, Jun 12, 2016 at 1:32 PM, Itamar Turner-Trauring <itamar at itamarst.org
> wrote:

> Hi all,
>
> Since we're starting to get PRs from random people it's worth trying to
> make the process as friendly as possible.
>
> So, maybe instead of telling new contribtutors "PRs won't be reviewed
> without an issue, see contributor guidelines" it would be better to say
> "Thanks for the PR! I opened an issue for this PR here (tm.tl/12345). In
> the future we'd appreciate it if you could open an issue before submitting
> PRs; see contributor guidelines for details".
>
> If someone went out of their way to provide a fix, we should try to
> minimize any unnecessary stop-energy they encounter along the way, even if
> that means some people won't learn the intricacies of the process.
>
> -Itamar
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160612/540d5fd5/attachment.html>

From adi at roiban.ro  Sun Jun 12 15:22:34 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 12 Jun 2016 22:22:34 +0100
Subject: [Twisted-Python] Responding to PRs
In-Reply-To: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
References: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
Message-ID: <CAFycZ9ciDDMOVn4-uB9=M2vXXrO-ubw+QOLfjcUZ+2eq7P5+vA@mail.gmail.com>

On 12 June 2016 at 21:32, Itamar Turner-Trauring <itamar at itamarst.org>
wrote:

> Hi all,
>
> Since we're starting to get PRs from random people it's worth trying to
> make the process as friendly as possible.
>
> So, maybe instead of telling new contribtutors "PRs won't be reviewed
> without an issue, see contributor guidelines" it would be better to say
> "Thanks for the PR! I opened an issue for this PR here (tm.tl/12345). In
> the future we'd appreciate it if you could open an issue before submitting
> PRs; see contributor guidelines for details".
>
> If someone went out of their way to provide a fix, we should try to
> minimize any unnecessary stop-energy they encounter along the way, even if
> that means some people won't learn the intricacies of the process.
>
>
Beside the fix, we need tests, documentation, release notes fragment....
sometimes compatibility with python 2 and python3... so I would say that
Twisted is not designed for low-energy contributors.

I would like to thank Craig for monitoring the Twisted PR. For low-energy
dudes, like me, it is of great help as I am only monitoring the Twisted's
official review queue (https://twistedmatrix.com/trac/report/25) which is
already huge.

Thanks again Craig and keep up the good work ! :)
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160612/d4192bb2/attachment.html>

From hawkowl at atleastfornow.net  Sun Jun 12 20:04:41 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Mon, 13 Jun 2016 10:04:41 +0800
Subject: [Twisted-Python] Porting PB to python3
In-Reply-To: <1568933.RT1ME0EebJ@skull>
References: <CAG=rPVe=wvNZoczU621nWFMj7wXpG5SPNxKuNs6aKU9Rgz=cNA@mail.gmail.com>
 <1568933.RT1ME0EebJ@skull>
Message-ID: <A2D32279-196B-4E6E-ACDD-99CD4487BB1A@atleastfornow.net>


> On 13 Jun 2016, at 01:04, Wolfgang Rohdewald <wolfgang.kde at rohdewald.de> wrote:
> 
> Am Freitag, 10. Juni 2016, 12:39:20 CEST schrieb Craig Rodrigues:
>> I hope you haven't lost interest in this, and are still willing to push
>> forward.
> 
> Maybe in autumn. But I rather hope somebody else would continue with this.
> 

I will -- as mentioned, I have a patch that's missing a few things, so I'll combine them and keep pushing this forward :)

- Amber

> --
> Wolfgang
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160613/afb8df3e/attachment.pgp>

From glyph at twistedmatrix.com  Sun Jun 12 20:09:55 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 12 Jun 2016 19:09:55 -0700
Subject: [Twisted-Python] Responding to PRs
In-Reply-To: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
References: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
Message-ID: <ACF6EEA6-4C96-4AEA-B8F0-2425F1EFB938@twistedmatrix.com>


> On Jun 12, 2016, at 13:32, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> 
> Hi all,
> 
> Since we're starting to get PRs from random people it's worth trying to make the process as friendly as possible.
> 
> So, maybe instead of telling new contribtutors "PRs won't be reviewed without an issue, see contributor guidelines" it would be better to say "Thanks for the PR! I opened an issue for this PR here (tm.tl/12345). In the future we'd appreciate it if you could open an issue before submitting PRs; see contributor guidelines for details".

Anyone who wants to do this is absolutely welcome to.  Personally, I won't be, but just because there's more than enough work for me to do on the "official" review queue if I have time for it, and manually de-duplicating all the data is challenging.

> If someone went out of their way to provide a fix, we should try to minimize any unnecessary stop-energy they encounter along the way, even if that means some people won't learn the intricacies of the process.

I don't have any interest in teaching people the intricacies of this somewhat janky process :-).  The sooner we can switch to the "review queue" simply being open PRs, the better; so thanks for volunteering to manage the correspondence in the meanwhile.

-glyph



From adi at roiban.ro  Mon Jun 13 05:20:18 2016
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 13 Jun 2016 12:20:18 +0100
Subject: [Twisted-Python] Responding to PRs
In-Reply-To: <ACF6EEA6-4C96-4AEA-B8F0-2425F1EFB938@twistedmatrix.com>
References: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
 <ACF6EEA6-4C96-4AEA-B8F0-2425F1EFB938@twistedmatrix.com>
Message-ID: <CAFycZ9eX8BFn-yZGN3fW86kih_bd65wFQA4Bqp21GtHmq6u2fw@mail.gmail.com>

On 13 June 2016 at 03:09, Glyph <glyph at twistedmatrix.com> wrote:

[snip]

I don't have any interest in teaching people the intricacies of this
> somewhat janky process :-).  The sooner we can switch to the "review queue"
> simply being open PRs, the better; so thanks for volunteering to manage the
> correspondence in the meanwhile.
>
>
Is there a wiki page, a ticket or some place where switching to the 'review
queue' as GitHub PR list is discussed or brainstormed?

I could not find any reference in the git migration plan
https://github.com/twisted-infra/braid/milestones/Migrate-to-Git

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160613/9744a6dd/attachment-0001.html>

From adi at roiban.ro  Mon Jun 13 05:26:31 2016
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 13 Jun 2016 12:26:31 +0100
Subject: [Twisted-Python] Deprecating classes and writing tests
Message-ID: <CAFycZ9dLEvdO797LYH5RgJoFezDxwwM7zE1ruvz2_wGkt5V0ng@mail.gmail.com>

Hi,

What is the best practice for deprecating a class in Twisted and writing
tests for it ... and updating existing tests.

I think that the part in which the deprecation code is written, is well
understood and documented here

http://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html#classes

What is missing, is the part talking about how to test these changes and
how to update existing tests.

The compatibility / deprecation documentation include a section about how
to test deprecation code, but the section is brief.

http://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html#testing-deprecation-code

----

This email is a follow up of a review done for this ticket
https://twistedmatrix.com/trac/ticket/8368

Please also check the comments on that ticket.

Please leave your feedback and we can try to apply and document it as part
of the work for ticket #8368

Regards,
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160613/d3081de3/attachment.html>

From glyph at twistedmatrix.com  Mon Jun 13 15:35:01 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 13 Jun 2016 14:35:01 -0700
Subject: [Twisted-Python] Responding to PRs
In-Reply-To: <CAFycZ9eX8BFn-yZGN3fW86kih_bd65wFQA4Bqp21GtHmq6u2fw@mail.gmail.com>
References: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
 <ACF6EEA6-4C96-4AEA-B8F0-2425F1EFB938@twistedmatrix.com>
 <CAFycZ9eX8BFn-yZGN3fW86kih_bd65wFQA4Bqp21GtHmq6u2fw@mail.gmail.com>
Message-ID: <D85ABED7-EAF7-415A-A40C-B50E1CCCCCA7@twistedmatrix.com>


> On Jun 13, 2016, at 4:20 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> Is there a wiki page, a ticket or some place where switching to the 'review queue' as GitHub PR list is discussed or brainstormed?
> 

Thus far all discussion has been on the mailing list.  I feel like putting it on the wiki would not be that useful, though; hopefully the discussion will continue for at most another month or two, and it's mostly just a question of coming to consensus about how exactly we're going to use the queue and model discrete review/resubmit events than doing a bunch of work.  https://github.com/markrwilliams/txghbot is probably most of what we need already, perhaps with one or two slight tweaks?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160613/e0eb5c09/attachment.html>

From glyph at twistedmatrix.com  Mon Jun 13 15:46:29 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 13 Jun 2016 14:46:29 -0700
Subject: [Twisted-Python] Deprecating classes and writing tests
In-Reply-To: <CAFycZ9dLEvdO797LYH5RgJoFezDxwwM7zE1ruvz2_wGkt5V0ng@mail.gmail.com>
References: <CAFycZ9dLEvdO797LYH5RgJoFezDxwwM7zE1ruvz2_wGkt5V0ng@mail.gmail.com>
Message-ID: <EC6A7BBB-2011-4A0F-BC8D-E855801CEF82@twistedmatrix.com>


> On Jun 13, 2016, at 4:26 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> What is the best practice for deprecating a class in Twisted and writing tests for it ... and updating existing tests.

We appear to have 'assertDeprecated' type methods scattered around the codebase.  These should be refactored into a single location.

> I think that the part in which the deprecation code is written, is well understood and documented here
> 
> http://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html#classes <http://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html#classes>
> 
> What is missing, is the part talking about how to test these changes and how to update existing tests.

The thing that ends up being deprecated with the recommended technique here is the import of the class itself. So I think what's missing is the explanation that the import needs to be moved to test scope, not module scope within the tests.  The tests should also be separated out and dated so it's clear what to delete when the deprecation period expires, and removals are easy.

Does that answer your question sufficiently?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160613/d4a59bd5/attachment.html>

From markrwilliams at gmail.com  Mon Jun 13 21:33:37 2016
From: markrwilliams at gmail.com (Mark Williams)
Date: Mon, 13 Jun 2016 20:33:37 -0700
Subject: [Twisted-Python] Responding to PRs
In-Reply-To: <D85ABED7-EAF7-415A-A40C-B50E1CCCCCA7@twistedmatrix.com>
References: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
 <ACF6EEA6-4C96-4AEA-B8F0-2425F1EFB938@twistedmatrix.com>
 <CAFycZ9eX8BFn-yZGN3fW86kih_bd65wFQA4Bqp21GtHmq6u2fw@mail.gmail.com>
 <D85ABED7-EAF7-415A-A40C-B50E1CCCCCA7@twistedmatrix.com>
Message-ID: <20160614033336.GA23579@hammal>

On Mon, Jun 13, 2016 at 02:35:01PM -0700, Glyph wrote:
>
> Thus far all discussion has been on the mailing list.  I feel like putting it on the wiki would not be that useful, though; hopefully the discussion will continue for at most another month or two, and it's mostly just a question of coming to consensus about how exactly we're going to use the queue and model discrete review/resubmit events than doing a bunch of work.  https://github.com/markrwilliams/txghbot is probably most of what we need already, perhaps with one or two slight tweaks?

I'm the owner of txghbot.  I hope it ends up being useful for Twisted!

Despite the stern warning at the top of the README, the process it describes should result in a functioning GitHub bot.

If you feel adventurous you can write your own webhooks.  They're Twisted plugins that implement this interface:

https://github.com/markrwilliams/txghbot/blob/master/txghbot/_core.py#L42-L79

I'll claim the lack of any abstraction over the GitHub Webhook API is intentional; this remains the authoritative documentation:

https://developer.github.com/webhooks/

Please let me know if there's anything I can do to make txghbot make PRs easier for everyone.  If it ends up being at all useful I'm happy to transfer ownership to the Twisted organization.

-Mark


From glyph at twistedmatrix.com  Mon Jun 13 22:24:27 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 13 Jun 2016 21:24:27 -0700
Subject: [Twisted-Python] Responding to PRs
In-Reply-To: <20160614033336.GA23579@hammal>
References: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
 <ACF6EEA6-4C96-4AEA-B8F0-2425F1EFB938@twistedmatrix.com>
 <CAFycZ9eX8BFn-yZGN3fW86kih_bd65wFQA4Bqp21GtHmq6u2fw@mail.gmail.com>
 <D85ABED7-EAF7-415A-A40C-B50E1CCCCCA7@twistedmatrix.com>
 <20160614033336.GA23579@hammal>
Message-ID: <1C8F481F-AC4B-4B4D-BB9F-91455772AA69@twistedmatrix.com>


> On Jun 13, 2016, at 8:33 PM, Mark Williams <markrwilliams at gmail.com> wrote:
> 
> On Mon, Jun 13, 2016 at 02:35:01PM -0700, Glyph wrote:
>> 
>> Thus far all discussion has been on the mailing list.  I feel like putting it on the wiki would not be that useful, though; hopefully the discussion will continue for at most another month or two, and it's mostly just a question of coming to consensus about how exactly we're going to use the queue and model discrete review/resubmit events than doing a bunch of work.  https://github.com/markrwilliams/txghbot is probably most of what we need already, perhaps with one or two slight tweaks?
> 
> I'm the owner of txghbot.  I hope it ends up being useful for Twisted!

I strongly suspect that it will be the official solution.  Thanks so much for doing this - the existence of this code is a structural expression of the setup process which short-circuits me needing to read and process all the developer documentation ;).

> Despite the stern warning at the top of the README, the process it describes should result in a functioning GitHub bot.

Cool.  I will set that up soon.

> If you feel adventurous you can write your own webhooks.  They're Twisted plugins that implement this interface:
> 
> https://github.com/markrwilliams/txghbot/blob/master/txghbot/_core.py#L42-L79
> 
> I'll claim the lack of any abstraction over the GitHub Webhook API is intentional; this remains the authoritative documentation:
> 
> https://developer.github.com/webhooks/
> 
> Please let me know if there's anything I can do to make txghbot make PRs easier for everyone.  If it ends up being at all useful I'm happy to transfer ownership to the Twisted organization.


The first thing that comes to mind is that you could get Tom Prince to give you write access to txghbot on PyPI so that this could be 'pip install'ed like anything else, instead of cut live from master at HEAD :-).

I think that some folks were really over-focused on the whole "closing PRs" part of the previous discussion, when what I was really trying to get at was the need for a single, clear "review queue".  Something like txghbot is necessary no matter how we do it because non-(maintainer|reviewer|person with repo:write access|we need a good standard word for this)s will not be able to manipulate the labels.

At this point I think closing PRs creates more problems than it solves.  In particular:

It means that people can't push changes to their PRs to experiment with travis build status, because reviewers will keep closing them, which prevents further pushes from running in CI.
It means that force-pushing has weird and confusing side-effects (even weirder and confusinger than usual).  I am not a big fan of the rebase/force-push workflow, but judiciously used (i.e. with interactive rebases) it can help with splitting up big changes, and it also mitigates Github's atrocious management of the diff display of long-running branches.
It is definitely perceived as an "abnormal" way of doing reviews on Github.

Point 3 was not enough to dissuade me, but it certainly isn't a point in favor, and in combination with the other two I don't think it looks good.

So, instead of treating /pulls as our review queue, I think something like <https://github.com/twisted/twisted/pulls?utf8=?&q=is%3Apr+is%3Aopen+-label%3A%22awaiting+review+response%22+-status%3Afailure> will have to do.  By subtracting a label from the review query rather than adding one, we can make it so that if our bot breaks down, contributors can still get their new submissions reviewed, and in the worst case where it is down when they want to resubmit, they can work around a broken bot by closing their "awaiting" PR and opening a new one.  (The ability to work around broken infra is important because I have to assume that things are going to go wrong with this, it being a distributed system on the public Internet.)

This means that txghbot's responsibility, instead of reopening the PR, will be to add and remove the 'awaiting review response' label.  If you wanted to write the actual plugin for doing that it might be helpful.  And then setting up a repo where we can play with it to test it out before turning it on for twisted/twisted :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160613/0af604d7/attachment-0001.html>

From adi at roiban.ro  Tue Jun 14 06:20:52 2016
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 14 Jun 2016 13:20:52 +0100
Subject: [Twisted-Python] Responding to PRs
In-Reply-To: <D85ABED7-EAF7-415A-A40C-B50E1CCCCCA7@twistedmatrix.com>
References: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
 <ACF6EEA6-4C96-4AEA-B8F0-2425F1EFB938@twistedmatrix.com>
 <CAFycZ9eX8BFn-yZGN3fW86kih_bd65wFQA4Bqp21GtHmq6u2fw@mail.gmail.com>
 <D85ABED7-EAF7-415A-A40C-B50E1CCCCCA7@twistedmatrix.com>
Message-ID: <CAFycZ9dURsazpZLDP=1XYTOGS+u=iafSGAymP1tWjzG_TPZgDg@mail.gmail.com>

On 13 June 2016 at 22:35, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Jun 13, 2016, at 4:20 AM, Adi Roiban <adi at roiban.ro> wrote:
>
> Is there a wiki page, a ticket or some place where switching to the
> 'review queue' as GitHub PR list is discussed or brainstormed?
>
>
> Thus far all discussion has been on the mailing list.  I feel like putting
> it on the wiki would not be that useful, though; hopefully the discussion
> will continue for at most another month or two, and it's mostly just a
> question of coming to consensus about how exactly we're going to use the
> queue and model discrete review/resubmit events than doing a bunch of work.
>  https://github.com/markrwilliams/txghbot is probably most of what we
> need already, perhaps with one or two slight tweaks?
>
>
OK. Thanks!

I was not sure if the github bot technical decision was taken.

I was not sure if we made a decision for labels vs PR state.

I am -1 for closing a PR as a way of saying: changes are pretty good but a
few tests are missing :)

---------

I am +1 on using labels/keywords in GitHub but I am not sure what will be
the relation between the Trac tickets and the PRs?
Will there be links between them?
Will the Trac tickets be migrated to GitHub Issues?

---------

In case it helps, for my project I am doing it in another way.

I am not suggesting that Twisted should use the same process, but maybe it
can help to get an idea of how this can be done.

The code for the bot is here https://github.com/chevah/github-hooks-server
... and it uses Trac via xml-rpc

The tickets are hosted in Trac, but I have implemented a Trac ticket
workflow. I can share the Trac configuration.

Instead of adding the 'review' keyword, a ticket is actually placed in a
'need_review' state... and instead of removing the 'review' keyword and
assigning the ticket back the ticket can either go into a
'changes_approved' state ... or in a 'need_more_work' state.

Each PR has an associated ticket in Trac.

I have 'needs-review', 'changes-approved' and 'needs-changes' keyword for
managing the ticket state via GitHub PR comments.
The bot also update the "branch" Trac field with a link to the latest PR
associated with a Trac ticket

You can see an example here for the GitHub side
https://github.com/chevah/python-package/pull/54 ... the Trac side is
private but I can share a screenshot if required.

The bot is briefly described here
http://styleguide.chevah.com/review.html#overview-of-the-github-and-trac-integration

Regards,
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160614/6c6c06b5/attachment.html>

From hawkowl at atleastfornow.net  Tue Jun 14 10:08:57 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Wed, 15 Jun 2016 00:08:57 +0800
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 1 Announcement
Message-ID: <871A7FAE-EAD0-4570-9431-1D70466D0698@atleastfornow.net>

Hello everyone! It's time for yet another Twisted release -- although not long after the last, we have had a bunch of good changes from the PyCon sprints, and some long-awaited work has landed!

- The Git migration has happened, so we've updated our development documentation to match. We're now trialling accepting pull requests at github.com/twisted/twisted, so if you've ever wanted an excuse to contribute, now's the chance!
- In our steady shedding of baggage, twisted.spread.ui, twisted.manhole (not to be confused with twisted.conch.manhole!), and a bunch of old and deprecated stuff from twisted.python.reflect and twisted.protocols.sip have been removed.
- twisted.web's HTTP server now handles pipelined requests better -- it used to try and process them in parallel, but this was fraught with problems and now it processes them in series, which is less surprising to code that expects the Request's transport to not be buffered (e.g. WebSockets).
- Twisted now has HTTP/2 support in its web server! This is currently not available by default -- you will need to install hyper-h2, which is available in the [h2] setuptools extras. If you want to play around with it, see the install link below. Upon release, you will be able to simply "pip install twisted[http2]".
- 53 tickets closed overall, including cleanups that move us closer to a total Python 3 port.

For more information, check the NEWS file (link provided below).

As usual, it's available for download -- go here (https://twistedmatrix.com/Releases/pre/16.3.0pre1/) to get the prerelease tarballs and the full NEWS file. If you want to install it right away, run:

    pip install https://twistedmatrix.com/Releases/pre/16.3.0pre1/Twisted-16.3.0rc1.tar.bz2

If you would like to try out the newly-landed HTTP/2 support, run:

    pip install -U https://twistedmatrix.com/Releases/pre/16.3.0pre1/Twisted-16.3.0rc1.tar.bz2#egg=Twisted[http2,tls]

This will download the new HTTP/2 dependencies and the TLS requirements as well.

Please let me know if you have any issues, as well as if you don't! If everything works well, that's a good thing for me to know :)

Twisted Regards,
Amber Brown (HawkOwl)

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160615/8f5dad25/attachment.pgp>

From ashfall at twistedmatrix.com  Tue Jun 14 19:44:53 2016
From: ashfall at twistedmatrix.com (Ashwini Oruganti)
Date: Tue, 14 Jun 2016 18:44:53 -0700
Subject: [Twisted-Python] Twisted Challenge Coins!
Message-ID: <CAMFCZ-39k2kNhOao+WfBLPbHW3WcC2cds48OjV8+BE_Veyh18g@mail.gmail.com>

Hello!

We are planning to get us some challenge coins, which is exciting! You
should also be excited with us because this means:

- we can now give it out to contributors at sprints and meetups.
- challenge coins are awesome.

Each coin costs about $6, and the minimum order is 100 coins. Glyph thinks
everyone should have some to give out as tokens of appreciation to other
contributors, and glyph's thoughts are usually worth following.

So, if you are a Twisted contributor and would like to own a challenge
coin, please respond to this email. Also, do mention how many coins you
would like, and where you are located so that we can send you your coin(s).


-ashfall
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160614/1330a445/attachment.html>

From cory at lukasa.co.uk  Wed Jun 15 01:35:49 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Wed, 15 Jun 2016 08:35:49 +0100
Subject: [Twisted-Python] Twisted Challenge Coins!
In-Reply-To: <CAMFCZ-39k2kNhOao+WfBLPbHW3WcC2cds48OjV8+BE_Veyh18g@mail.gmail.com>
References: <CAMFCZ-39k2kNhOao+WfBLPbHW3WcC2cds48OjV8+BE_Veyh18g@mail.gmail.com>
Message-ID: <9E2E21AD-75FF-485F-83EA-5EC8F6F6767A@lukasa.co.uk>


> On 15 Jun 2016, at 02:44, Ashwini Oruganti <ashfall at twistedmatrix.com> wrote:
> 
> So, if you are a Twisted contributor and would like to own a challenge coin, please respond to this email. Also, do mention how many coins you would like, and where you are located so that we can send you your coin(s).

Well for obvious reasons I?d like a challenge coin. Of course, sending it to Europe might not be the easiest thing to do, so take that under advisement!

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160615/07b24f29/attachment.pgp>

From glyph at twistedmatrix.com  Wed Jun 15 02:24:13 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 15 Jun 2016 01:24:13 -0700
Subject: [Twisted-Python] Twisted Challenge Coins!
In-Reply-To: <9E2E21AD-75FF-485F-83EA-5EC8F6F6767A@lukasa.co.uk>
References: <CAMFCZ-39k2kNhOao+WfBLPbHW3WcC2cds48OjV8+BE_Veyh18g@mail.gmail.com>
 <9E2E21AD-75FF-485F-83EA-5EC8F6F6767A@lukasa.co.uk>
Message-ID: <90832D83-3924-4441-B518-8E58F9DAA654@twistedmatrix.com>


> On Jun 15, 2016, at 12:35 AM, Cory Benfield <cory at lukasa.co.uk <mailto:cory at lukasa.co.uk>> wrote:
> 
> 
>> On 15 Jun 2016, at 02:44, Ashwini Oruganti <ashfall at twistedmatrix.com <mailto:ashfall at twistedmatrix.com>> wrote:
>> 
>> So, if you are a Twisted contributor and would like to own a challenge coin, please respond to this email. Also, do mention how many coins you would like, and where you are located so that we can send you your coin(s).
> 
> Well for obvious reasons I?d like a challenge coin. Of course, sending it to Europe might not be the easiest thing to do, so take that under advisement!

You might be eligible to receive one, but first we need enough committers to buy them in sufficient quantity that they can exist at all :).

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160615/8bd90f58/attachment.html>

From mithrandi at mithrandi.net  Wed Jun 15 02:48:47 2016
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Wed, 15 Jun 2016 08:48:47 +0000
Subject: [Twisted-Python] Twisted Challenge Coins!
In-Reply-To: <CAMFCZ-39k2kNhOao+WfBLPbHW3WcC2cds48OjV8+BE_Veyh18g@mail.gmail.com>
References: <CAMFCZ-39k2kNhOao+WfBLPbHW3WcC2cds48OjV8+BE_Veyh18g@mail.gmail.com>
Message-ID: <CAMcKhMRXPEJcAyn5H1UaNNffVh32XqmUrXh7gHTom-sfCHV-sQ@mail.gmail.com>

I'll take 5 coins. I'm in South Africa, but I have a US forwarding address
(in Florida) that can be used to simplify logistics.

On Wed, 15 Jun 2016 at 03:46 Ashwini Oruganti <ashfall at twistedmatrix.com>
wrote:

> Hello!
>
> We are planning to get us some challenge coins, which is exciting! You
> should also be excited with us because this means:
>
> - we can now give it out to contributors at sprints and meetups.
> - challenge coins are awesome.
>
> Each coin costs about $6, and the minimum order is 100 coins. Glyph thinks
> everyone should have some to give out as tokens of appreciation to other
> contributors, and glyph's thoughts are usually worth following.
>
> So, if you are a Twisted contributor and would like to own a challenge
> coin, please respond to this email. Also, do mention how many coins you
> would like, and where you are located so that we can send you your coin(s).
>
>
> -ashfall
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160615/dcf8f76c/attachment.html>

From cory at lukasa.co.uk  Wed Jun 15 07:29:31 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Wed, 15 Jun 2016 14:29:31 +0100
Subject: [Twisted-Python] Twisted Challenge Coins!
In-Reply-To: <90832D83-3924-4441-B518-8E58F9DAA654@twistedmatrix.com>
References: <CAMFCZ-39k2kNhOao+WfBLPbHW3WcC2cds48OjV8+BE_Veyh18g@mail.gmail.com>
 <9E2E21AD-75FF-485F-83EA-5EC8F6F6767A@lukasa.co.uk>
 <90832D83-3924-4441-B518-8E58F9DAA654@twistedmatrix.com>
Message-ID: <3EF0ED20-1EE8-4687-9B67-7AC491AF4AF6@lukasa.co.uk>


> On 15 Jun 2016, at 09:24, Glyph <glyph at twistedmatrix.com> wrote:
> 
> You might be eligible to receive one, but first we need enough committers to buy them in sufficient quantity that they can exist at all :).

Heh, let?s assume I?m an idiot and didn?t extract that message from the original email.

In that case, I?m willing to take 5 coins as well. I can also provide US-based forwarding addresses if needed.

Cory

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160615/9644354f/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160615/9644354f/attachment.pgp>

From hs at ox.cx  Wed Jun 15 11:13:13 2016
From: hs at ox.cx (Hynek Schlawack)
Date: Wed, 15 Jun 2016 10:13:13 -0700
Subject: [Twisted-Python] Twisted Challenge Coins!
In-Reply-To: <3EF0ED20-1EE8-4687-9B67-7AC491AF4AF6@lukasa.co.uk>
References: <CAMFCZ-39k2kNhOao+WfBLPbHW3WcC2cds48OjV8+BE_Veyh18g@mail.gmail.com>
 <9E2E21AD-75FF-485F-83EA-5EC8F6F6767A@lukasa.co.uk>
 <90832D83-3924-4441-B518-8E58F9DAA654@twistedmatrix.com>
 <3EF0ED20-1EE8-4687-9B67-7AC491AF4AF6@lukasa.co.uk>
Message-ID: <5E2CE56C-B27C-4645-BAF8-EC29E4E78C81@ox.cx>

>> You might be eligible to receive one, but first we need enough committers to buy them in sufficient quantity that they can exist at all :).
> 
> Heh, let?s assume I?m an idiot and didn?t extract that message from the original email.
> 
> In that case, I?m willing to take 5 coins as well. I can also provide US-based forwarding addresses if needed.

Guess I?d take 5 too?I don?t have a fwd address (save some PyCon mules :)) but maybe you could send it via Cory or something?

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160615/a68ccb7f/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160615/a68ccb7f/attachment-0001.pgp>

From _ at lvh.io  Wed Jun 15 11:20:43 2016
From: _ at lvh.io (lvh)
Date: Wed, 15 Jun 2016 12:20:43 -0500
Subject: [Twisted-Python] Twisted Challenge Coins!
In-Reply-To: <CAMFCZ-39k2kNhOao+WfBLPbHW3WcC2cds48OjV8+BE_Veyh18g@mail.gmail.com>
References: <CAMFCZ-39k2kNhOao+WfBLPbHW3WcC2cds48OjV8+BE_Veyh18g@mail.gmail.com>
Message-ID: <34992645-AA34-4AD2-883B-FD90CB526FFE@lvh.io>

Hey,


> On Jun 14, 2016, at 8:44 PM, Ashwini Oruganti <ashfall at twistedmatrix.com> wrote:
> 
> Hello!
> 
> We are planning to get us some challenge coins, which is exciting! You should also be excited with us because this means:
> 
> - we can now give it out to contributors at sprints and meetups.
> - challenge coins are awesome.
> 
> Each coin costs about $6, and the minimum order is 100 coins. Glyph thinks everyone should have some to give out as tokens of appreciation to other contributors, and glyph's thoughts are usually worth following.

5 seems like the number, but we?ll see if we get up to the required minimum order :)


lvh

> So, if you are a Twisted contributor and would like to own a challenge coin, please respond to this email. Also, do mention how many coins you would like, and where you are located so that we can send you your coin(s).
> 
> 
> -ashfall
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From adi at roiban.ro  Wed Jun 15 15:29:42 2016
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 15 Jun 2016 22:29:42 +0100
Subject: [Twisted-Python] Responding to PRs
In-Reply-To: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
References: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
Message-ID: <CAFycZ9dE4giseFGktttsSbGVrsTSR2Q9iXaNA3Xaz7f8AyGRMg@mail.gmail.com>

On 12 June 2016 at 21:32, Itamar Turner-Trauring <itamar at itamarst.org>
wrote:

[snip]


> So, maybe instead of telling new contribtutors "PRs won't be reviewed
> without an issue, see contributor guidelines" it would be better to say
> "Thanks for the PR! I opened an issue for this PR here (tm.tl/12345). In
> the future we'd appreciate it if you could open an issue before submitting
> PRs; see contributor guidelines for details".
>
>
[snip]

I think that is important that the Trac ticket is created by the PR
contributor. In this way we can make sure that the PR contributor has an
account in Trac and that the contributor will receive notifications for all
the discussions done in the Trac ticket.

AFAIK the PR are just replacing the attached patched to a Trac ticket. The
review should still be done in the Trac ticket.

Cheers,
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160615/cfa80994/attachment.html>

From kebin70 at gmail.com  Wed Jun 15 22:16:08 2016
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Wed, 15 Jun 2016 21:16:08 -0700
Subject: [Twisted-Python] web Resource question
Message-ID: <CAA-sNEZhDJpTNrYJq2SYreKh+dONHwmYcQW7+3Abh=byN_HM8w@mail.gmail.com>

what is child.server = self.server in Resource.putChild?

shouldn't it be child.server = self?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160615/076483fa/attachment.html>

From adi at roiban.ro  Thu Jun 16 05:26:51 2016
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 16 Jun 2016 12:26:51 +0100
Subject: [Twisted-Python] Deprecating classes and writing tests
In-Reply-To: <EC6A7BBB-2011-4A0F-BC8D-E855801CEF82@twistedmatrix.com>
References: <CAFycZ9dLEvdO797LYH5RgJoFezDxwwM7zE1ruvz2_wGkt5V0ng@mail.gmail.com>
 <EC6A7BBB-2011-4A0F-BC8D-E855801CEF82@twistedmatrix.com>
Message-ID: <CAFycZ9fV-a4W721GorpP6harwFPD-LMsS-AkSq6jihGfY5nx_A@mail.gmail.com>

On 13 June 2016 at 22:46, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Jun 13, 2016, at 4:26 AM, Adi Roiban <adi at roiban.ro> wrote:
>
> Hi,
>
> What is the best practice for deprecating a class in Twisted and writing
> tests for it ... and updating existing tests.
>
>
> We appear to have 'assertDeprecated' type methods scattered around the
> codebase.  These should be refactored into a single location.
>
> I think that the part in which the deprecation code is written, is well
> understood and documented here
>
>
> http://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html#classes
>
> What is missing, is the part talking about how to test these changes and
> how to update existing tests.
>
>
> The thing that ends up being deprecated with the recommended technique
> here is the import of the class itself. So I think what's missing is the
> explanation that the import needs to be moved to test scope, not module
> scope within the tests.  The tests should also be separated out and dated
> so it's clear what to delete when the deprecation period expires, and
> removals are easy.
>
> Does that answer your question sufficiently?
>
>
I have created https://twistedmatrix.com/trac/ticket/8478 and I have pushed
a branch to document testing deprecated module attributes.

Doing test scope import will work, but I am thinking of a different method.

Instead of importing/using the deprecated code as

# Import raises the warning
from twisted.cred.credentials import UsernameHashedPassword
# Usage will not raise the warning.
UsernameHashedPassword

it can be imported and used in this way

# Import will not raise the warning
from twisted.cred import credentials
# Usage will raise the warning
credentials.UsernameHashedPassword

I feel that the second approach is easier to integrated with
self.callDeprecated

If you have time, please review https://twistedmatrix.com/trac/ticket/8478

Thanks!
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160616/8b380419/attachment.html>

From cory at lukasa.co.uk  Thu Jun 16 06:11:23 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Thu, 16 Jun 2016 13:11:23 +0100
Subject: [Twisted-Python] web Resource question
In-Reply-To: <CAA-sNEZhDJpTNrYJq2SYreKh+dONHwmYcQW7+3Abh=byN_HM8w@mail.gmail.com>
References: <CAA-sNEZhDJpTNrYJq2SYreKh+dONHwmYcQW7+3Abh=byN_HM8w@mail.gmail.com>
Message-ID: <69E0101C-95E3-4DA2-A95F-3F5F1CB1BCDD@lukasa.co.uk>


> On 16 Jun 2016, at 05:16, Kevin Mcintyre <kebin70 at gmail.com> wrote:
> 
> 
> what is child.server = self.server in Resource.putChild?
> 
> shouldn't it be child.server = self?

I don?t think so. The reference to the server is presumably intended to refer to the Site object that is hosting the Resource. With that said, I can?t actually *find* anywhere that sets the server on a Resource, so it?s possible that the whole thing is vestigial.

Cory
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160616/5c24662e/attachment.pgp>

From kebin70 at gmail.com  Thu Jun 16 12:14:37 2016
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Thu, 16 Jun 2016 11:14:37 -0700
Subject: [Twisted-Python] web Resource question
In-Reply-To: <69E0101C-95E3-4DA2-A95F-3F5F1CB1BCDD@lukasa.co.uk>
References: <CAA-sNEZhDJpTNrYJq2SYreKh+dONHwmYcQW7+3Abh=byN_HM8w@mail.gmail.com>
 <69E0101C-95E3-4DA2-A95F-3F5F1CB1BCDD@lukasa.co.uk>
Message-ID: <CAA-sNEaeka+i4MOTO9dSvmXCtxjCbkZ6gEAvExzaRoaD6O-knA@mail.gmail.com>

Hey, thanks for the reply.

It seems like there's the possibility of more beneficial assignments...but
first trying to understand if there's a specific reason for the
child.server assignment.

On Thu, Jun 16, 2016 at 5:11 AM, Cory Benfield <cory at lukasa.co.uk> wrote:

>
> > On 16 Jun 2016, at 05:16, Kevin Mcintyre <kebin70 at gmail.com> wrote:
> >
> >
> > what is child.server = self.server in Resource.putChild?
> >
> > shouldn't it be child.server = self?
>
> I don?t think so. The reference to the server is presumably intended to
> refer to the Site object that is hosting the Resource. With that said, I
> can?t actually *find* anywhere that sets the server on a Resource, so it?s
> possible that the whole thing is vestigial.
>
> Cory
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160616/fb03a5ab/attachment.html>

From rodrigc at crodrigues.org  Fri Jun 17 00:49:55 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 16 Jun 2016 23:49:55 -0700
Subject: [Twisted-Python] Need write access to Twisted
Message-ID: <CAG=rPVf2E5gfCT_u4G8-LK6zLx41jBXe90M-CC3f+3xgVwhjFg@mail.gmail.com>

Hi,

Can someone grant me write access to Twisted?
I want to continue with my Python3 porting patches,
and help test things directly on the buildbots.

Thanks.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160616/69024bf9/attachment.html>

From adi at roiban.ro  Fri Jun 17 01:02:09 2016
From: adi at roiban.ro (Adi Roiban)
Date: Fri, 17 Jun 2016 08:02:09 +0100
Subject: [Twisted-Python] Need write access to Twisted
In-Reply-To: <CAG=rPVf2E5gfCT_u4G8-LK6zLx41jBXe90M-CC3f+3xgVwhjFg@mail.gmail.com>
References: <CAG=rPVf2E5gfCT_u4G8-LK6zLx41jBXe90M-CC3f+3xgVwhjFg@mail.gmail.com>
Message-ID: <CAFycZ9fXA+EW2GOtMJFEwW1fROO-OAWs2s+tWcAyRygdqWeN9Q@mail.gmail.com>

On 17 June 2016 at 07:49, Craig Rodrigues <rodrigc at crodrigues.org> wrote:

> Hi,
>
> Can someone grant me write access to Twisted?
> I want to continue with my Python3 porting patches,
> and help test things directly on the buildbots.
>
>
I am +1

As a reviewer I am looking forward for just reviewing the buildbot status,
codecoverage and then adding comments, rather than also creating branches
in twisted, updating Trac ticket, trigger buildbot builds, composing the
merge message and doing the actual merge and push :)

Many thanks Craig for your help :)


-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160617/620689ee/attachment.html>

From glyph at twistedmatrix.com  Fri Jun 17 01:23:35 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 17 Jun 2016 00:23:35 -0700
Subject: [Twisted-Python] Need write access to Twisted
In-Reply-To: <CAFycZ9fXA+EW2GOtMJFEwW1fROO-OAWs2s+tWcAyRygdqWeN9Q@mail.gmail.com>
References: <CAG=rPVf2E5gfCT_u4G8-LK6zLx41jBXe90M-CC3f+3xgVwhjFg@mail.gmail.com>
 <CAFycZ9fXA+EW2GOtMJFEwW1fROO-OAWs2s+tWcAyRygdqWeN9Q@mail.gmail.com>
Message-ID: <9A6808E3-653E-455B-B452-6254C668DB31@twistedmatrix.com>


> On Jun 17, 2016, at 12:02 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> On 17 June 2016 at 07:49, Craig Rodrigues <rodrigc at crodrigues.org <mailto:rodrigc at crodrigues.org>> wrote:
> Hi,
> 
> Can someone grant me write access to Twisted?
> I want to continue with my Python3 porting patches,
> and help test things directly on the buildbots.
> 
> 
> I am +1
> 
> As a reviewer I am looking forward for just reviewing the buildbot status, codecoverage and then adding comments, rather than also creating branches in twisted, updating Trac ticket, trigger buildbot builds, composing the merge message and doing the actual merge and push :)
> 
> Many thanks Craig for your help :) 

I am also +1.  I think Craig has demonstrated the utmost respect for the process and has demonstrated a clear ability to follow it, which is the main criteria.

Please do remember though that as a team member you have the responsibility to review others' code as well, so be sure to familiarize yourself with the process ;-).  I've sent you an invite to the relevant github organization.

Also: we've previously discussed governance and a better onboarding / selection process for new members.  We haven't had a person willing to take charge of that process, design and administer it, so in the meanwhile, rather than the vague in-between state we've had, I am going to make it explicit: induction of new members into the Twisted Matrix Labs org will just be at my discretion as Project Leader for now.  So I'm making Craig a member by executive order ;-).

If someone would like to step forward to help facilitate a better induction/onboarding process (I don't think this one is ideal, it's certainly more work for me!) then we can do something more formal, but in the meanwhile, it can at least be clear, if not ideal.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160617/021664b8/attachment.html>

From commercials24 at yahoo.de  Fri Jun 17 10:26:19 2016
From: commercials24 at yahoo.de (steven meier)
Date: Fri, 17 Jun 2016 18:26:19 +0200
Subject: [Twisted-Python] integrating a Qt interface with twisted, qt5,
	python 2.x
Message-ID: <1466180779.9389.22.camel@yahoo.de>

hi,


why does the code below print "testing..." but not "123" 5 seconds after
the application started?




import sys
from PyQt5 import QtWidgets
from untitled import Ui_MainWindow
#from webchat import get_main_page

class Main(QtWidgets.QMainWindow):

    def __init__(self):
        QtWidgets.QMainWindow.__init__(self)
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.setupSignals()

    def button_1_Clicked(self):
        self.ui.textbox_2.setText(self.ui.textbox_1.text())

    def setupSignals(self):
        #self.ui.textbox_1.textChanged.connect(self.textbox_1_Changed)
        self.ui.button_1.clicked.connect(self.button_1_Clicked)




if __name__ == '__main__':
    #app = QtWidgets.QApplication(sys.argv)
    
    app = QtWidgets.QApplication(sys.argv) # your code to init QtCore
    import qt5reactor
    qt5reactor.install()

    print "testing..."

    #get_main_page()
    window = Main()
    window.show()
    sys.exit(app.exec_())
    def printMe(argument):
        print argument

    def lala():
        reactor.callLater(5, printMe, '123')


    lala()
    reactor.run()




From rodrigc at crodrigues.org  Fri Jun 17 11:48:24 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 17 Jun 2016 10:48:24 -0700
Subject: [Twisted-Python] Need write access to Twisted
In-Reply-To: <9A6808E3-653E-455B-B452-6254C668DB31@twistedmatrix.com>
References: <CAG=rPVf2E5gfCT_u4G8-LK6zLx41jBXe90M-CC3f+3xgVwhjFg@mail.gmail.com>
 <CAFycZ9fXA+EW2GOtMJFEwW1fROO-OAWs2s+tWcAyRygdqWeN9Q@mail.gmail.com>
 <9A6808E3-653E-455B-B452-6254C668DB31@twistedmatrix.com>
Message-ID: <CAG=rPVeyKbnWADO2OcbGJfoGRzEbvbfg0=s4h0Pjh=Q4V=T4Lw@mail.gmail.com>

On Fri, Jun 17, 2016 at 12:23 AM, Glyph <glyph at twistedmatrix.com> wrote:


>
> I am also +1.  I think Craig has demonstrated the utmost respect for the
> process and has demonstrated a clear ability to follow it, which is the
> main criteria.
>
>
>
Thank you.  I will do my best to maintain the high standards of the Twisted
project.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160617/c7e3afb7/attachment-0001.html>

From clayton.daley at gmail.com  Sun Jun 19 09:34:30 2016
From: clayton.daley at gmail.com (Clayton Daley)
Date: Sun, 19 Jun 2016 10:34:30 -0500
Subject: [Twisted-Python] integrating a Qt interface with twisted, qt5,
 python 2.x
In-Reply-To: <1466180779.9389.22.camel@yahoo.de>
References: <1466180779.9389.22.camel@yahoo.de>
Message-ID: <CACKEAnWYiwkbtiaCiSHNdY_1dy3EL2ry8iBsxoJ-CnFpgLdzdw@mail.gmail.com>

I believe your problem is this line:

> sys.exit(app.exec_())

Two issues:

   - It looks like app.exec_() blocks (e.g.
   http://stackoverflow.com/questions/22289423/how-to-avoid-qt-app-exec-blocking-main-thread
   )
   - When it unblocks, the program sys.exit() terminates (
   https://docs.python.org/2/library/sys.html#sys.exit)

Thus, your app never reaches any of the twisted code. If you're not
familiar with debugging tools that let you walk through the code, adding a
print line between each line of actual code would have made it obvious that
you never got past this line.

Clayton Daley

On Fri, Jun 17, 2016 at 11:26 AM, steven meier <commercials24 at yahoo.de>
wrote:

> hi,
>
>
> why does the code below print "testing..." but not "123" 5 seconds after
> the application started?
>
>
>
>
> import sys
> from PyQt5 import QtWidgets
> from untitled import Ui_MainWindow
> #from webchat import get_main_page
>
> class Main(QtWidgets.QMainWindow):
>
>     def __init__(self):
>         QtWidgets.QMainWindow.__init__(self)
>         self.ui = Ui_MainWindow()
>         self.ui.setupUi(self)
>         self.setupSignals()
>
>     def button_1_Clicked(self):
>         self.ui.textbox_2.setText(self.ui.textbox_1.text())
>
>     def setupSignals(self):
>         #self.ui.textbox_1.textChanged.connect(self.textbox_1_Changed)
>         self.ui.button_1.clicked.connect(self.button_1_Clicked)
>
>
>
>
> if __name__ == '__main__':
>     #app = QtWidgets.QApplication(sys.argv)
>
>     app = QtWidgets.QApplication(sys.argv) # your code to init QtCore
>     import qt5reactor
>     qt5reactor.install()
>
>     print "testing..."
>
>     #get_main_page()
>     window = Main()
>     window.show()
>     sys.exit(app.exec_())
>     def printMe(argument):
>         print argument
>
>     def lala():
>         reactor.callLater(5, printMe, '123')
>
>
>     lala()
>     reactor.run()
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160619/2fc1a35d/attachment.html>

From kevin.horn at gmail.com  Mon Jun 20 10:33:24 2016
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 20 Jun 2016 11:33:24 -0500
Subject: [Twisted-Python] Twisted Challenge Coins!
In-Reply-To: <34992645-AA34-4AD2-883B-FD90CB526FFE@lvh.io>
References: <CAMFCZ-39k2kNhOao+WfBLPbHW3WcC2cds48OjV8+BE_Veyh18g@mail.gmail.com>
 <34992645-AA34-4AD2-883B-FD90CB526FFE@lvh.io>
Message-ID: <CA+U=zK34Mz_5LsSCfv2O4B3mhAviw50hhviBDf1wvuKvbmRpUA@mail.gmail.com>

I haven't been very active in a while, but:

a) this is a really cool idea
b) I'd really like one of these for myself

So, sign me up for 5 coins.  I might be willing to up that to 10 if it
makes a difference in this happening or not.



On Wed, Jun 15, 2016 at 12:20 PM, lvh <_ at lvh.io> wrote:

> Hey,
>
>
> > On Jun 14, 2016, at 8:44 PM, Ashwini Oruganti <ashfall at twistedmatrix.com>
> wrote:
> >
> > Hello!
> >
> > We are planning to get us some challenge coins, which is exciting! You
> should also be excited with us because this means:
> >
> > - we can now give it out to contributors at sprints and meetups.
> > - challenge coins are awesome.
> >
> > Each coin costs about $6, and the minimum order is 100 coins. Glyph
> thinks everyone should have some to give out as tokens of appreciation to
> other contributors, and glyph's thoughts are usually worth following.
>
> 5 seems like the number, but we?ll see if we get up to the required
> minimum order :)
>
>
> lvh
>
> > So, if you are a Twisted contributor and would like to own a challenge
> coin, please respond to this email. Also, do mention how many coins you
> would like, and where you are located so that we can send you your coin(s).
> >
> >
> > -ashfall
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160620/8569cbdb/attachment.html>

From cory at lukasa.co.uk  Tue Jun 21 03:19:26 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Tue, 21 Jun 2016 10:19:26 +0100
Subject: [Twisted-Python] Improvements to Resource dispatch
Message-ID: <F8E47650-51AE-4A10-A0E7-944569FCAF9D@lukasa.co.uk>

All,

Now that the HTTP/2 server changes have landed, one of the things I?d like to start dealing with is server Resource dispatch. Those of you who have been paying attention to this mailing list will remember that we discussed this a bit back when I was originally implementing HTTP/2 logic, and we ended up deferring the work for a while. It?s time to re-discuss this.

To try to avoid boiling the ocean I?d like to divide this into small steps. Adi has pointed out Twisted ticket #6928, which includes an original patch to allow Resources to opt-in to early-dispatch when headers are received. This allows them to handle 100 Continue more feature fully than Twisted does today (where it unconditionally emits 100 Continue). If Adi is up for it, I?m willing to take over the lead reviewer role for that patch and try to help shepherd it through the process.

The rest of this mail is a commentary on the proposed interface, which you can see here[0]. Note that the patch available there is non-functional: we?re mostly concerned with discussing the interfaces, more than we?re concerned about the actual function of the patch.

Ok, let?s go.

Adi, my high level summary is that this patch looks reasonable. headersReceived is a sensible interface, and while I don?t like the names IEarlyHeaders{Request,Resource}, those names can be addressed later in the review process. An obvious thing missing from your draft is that the HTTPChannel doesn?t check for IEarlyHeadersRequest before calling headersReceived, but that?s presumably an oversight.

I?d like separate patches that implement IEarlyHeadersResource for some relevant built-in resources, such as t.w.static.File, mostly so we can confirm that the behaviour works in cases where we do not need to check the request content.

Otherwise, I think this is a good enough prototype to start working from. The biggest question mark I have is how we plan to evolve this. The next logical step, presumably, is a new set of interfaces (children of IEarlyHeaders{Request,Resource}) that allow for streaming body delivery. I?m a bit nervous about wanting to publish too many of these *intermediary* interfaces, especially because it will mean we need fallback code for each case (what about Resources that don?t implement IEarlyHeadersResource?, what about Resources that don?t implement IStreamingBodyResource? each requires a new code path). In this instance, I?d want to be pretty aggressive about deprecating older interfaces and ensuring that people move to the newer interface model. Perhaps when we merge this we should deprecate plain Resource objects and encourage people to move to IEarlyHeadersResource, so that they have a smaller delta when streaming resources are implemented too.

Those are my high level thoughts. If anyone else has feedback please feel free to leap in, but otherwise I?m going to encourage Adi to provide a ?proper? patch (or possibly sequence of patches) that we can more formally review.

Cory



[0]: https://github.com/twisted/twisted/compare/trunk...chevah:6928-http-100-accept
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160621/40b446b8/attachment.pgp>

From rodrigc at crodrigues.org  Tue Jun 21 03:24:44 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 21 Jun 2016 02:24:44 -0700
Subject: [Twisted-Python] Question about twistedchecker failures
Message-ID: <CAG=rPVfSpuFoYW0rgHqjYzsqwXPcY80nPgsck+=NozVHJ6Xuxw@mail.gmail.com>

Hi,

Why did this twistedchecker build succeed:
https://buildbot.twistedmatrix.com/builders/twistedchecker/builds/341

and this one fail:
https://buildbot.twistedmatrix.com/builders/twistedchecker/builds/342

I don't understand what is causing the failure.

I looked at:
https://github.com/twisted-infra/braid/blob/master/services/buildbot/master/txbuildbot/lint.py

but didn't see how that script is resulting in an error.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160621/a6d104c4/attachment.html>

From msc at contact.de  Tue Jun 21 04:16:41 2016
From: msc at contact.de (Michael Schlenker)
Date: Tue, 21 Jun 2016 12:16:41 +0200
Subject: [Twisted-Python] Error handling in twisted.web.HTTPClient for bad
 certificates with TLSMemoryBIOProtocol
Message-ID: <03db4ac9-07e3-4aaf-293f-80d48902a397@contact.de>

Hi,

i just stumbled onto some issue while trying to use xmlrpc.Proxy
together with the TLSMemoryBIOProtocol, but its probably the same for
all wrapping protocols sitting on top of the old HTTP client.

If the target certificate is invalid and cannot be verified, the errback
just tells me 'ConnectionDone', as if all was okay, and simply drops the
SSL Error. See below for details/tracebacks.

The root cause is in twisted.web.HTTPClient.connectionLost:

    def connectionLost(self, reason):
	self.handleResponseEnd()

it simply ignores the reason passed to it and tries to extract some
reason from the response. But in the case of a TLS handshake problem,
there is no valid response yet. Looks like a bug to me.

Basically what should happen is similar to the clientConnectionLost()
method of a ClientFactory, but the Protocol already got the
connectionMade from the tls Layer...

Now i want to find the best way to deal with it.

- Fix HTTPClient.connectionLost to handle the reason properly if no
  valid Response exists?
- Wrap TLSMemoryBIOFactory to handle this?
- Something else? Would the new connector API handle it better?

The code is a bit older, so does not use the new connector APIs yet, but
is running like this on Twisted 16.2. (Traceback is from 14.0.2 as i
have reproduced it there first).

Basically i do this:

class MyTLSXMLRPCProxy(xmlrpc.Proxy):
    queryFactory = xmlrpc._QueryFactory

    def set_ssl_client_context(self, ctx):
        self.ssl_ctx = ctx

    def callRemote(self, method, *args):
        query_factory = self.queryFactory(
            self.path, self.host, method, self.user,
            self.password, self.allowNone, args)

        if self.secure:
            port = self.port or 443
            factory = sslsupport.TLSMemoryBIOFactory(self.ssl_ctx,
                                                     True,
                                                     query_factory)
        else:
            port = self.port or 80
            factory = query_factory

        reactor.connectTCP(self.host, port, factory)
        return query_factory.deferred

Now binding an errback to call_remote does only show something like this:

[Failure instance: Traceback (failure with no frames): <class
'twisted.internet.error.ConnectionDone'>: Connection was closed cleanly.

But the true error, as seen in the connectionLost() handler of the
TLSMemoryBIOProtocol looks like this:

[Failure instance: Traceback: <class 'OpenSSL.SSL.Error'>: [('SSL
routines', 'ssl3_get_server_certificate', 'certificate verify failed')]
	...\site-packages\twisted-14.0.2-py2.7-win32.egg\twisted\internet\selectreactor.py:149:_doReadOrWrite
	...\site-packages\twisted-14.0.2-py2.7-win32.egg\twisted\internet\tcp.py:214:doRead
	...\site-packages\twisted-14.0.2-py2.7-win32.egg\twisted\internet\tcp.py:220:_dataReceived
	...\site-packages\twisted-14.0.2-py2.7-win32.egg\twisted\protocols\tls.py:415:dataReceived
	--- <exception caught here> ---
	...\site-packages\twisted-14.0.2-py2.7-win32.egg\twisted\protocols\tls.py:554:_write
	...\site-packages\pyopenssl-0.15.1-py2.7.egg\OpenSSL\SSL.py:1271:send
	...\lib\site-packages\pyopenssl-0.15.1-py2.7.egg\OpenSSL\SSL.py:1187:_raise_ssl_error
	...\site-packages\pyopenssl-0.15.1-py2.7.egg\OpenSSL\_util.py:48:exception_from_error_queue
	]

Michael

---
Michael Schlenker
Senior Software Engineer

CONTACT Software GmbH           Tel.:   +49 (421) 20153-80
Wiener Stra?e 1-3               Fax:    +49 (421) 20153-41
28359 Bremen
E-Mail: michael.schlenker at contact-software.com
http://www.contact-software.com/

Registered office: Bremen, Germany
Managing directors: Karl Heinz Zachries, Ralf Holtgrefe
Court of register: Amtsgericht Bremen HRB 1321


From glyph at twistedmatrix.com  Tue Jun 21 13:07:04 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 21 Jun 2016 12:07:04 -0700
Subject: [Twisted-Python] two minor things
Message-ID: <6325D6CF-E456-4DF9-886D-395C5F0BAA6A@twistedmatrix.com>

These are mostly for Craig but they're relevant to everyone, so I am sending it to the mailing list.  I don't know if these have been properly written down as part of a policy.

1. Please don't assign reviews normally.

If someone reviews your tickets, don't punish them by crushing them with all the other tickets you have :).  The point of having a single review queue for all reviewers is that the responsibility should be diffused and lots of people should be doing reviews.  You can always ask someone to review your tickets, of course, but assigning them suggests to other reviewers that they won't be able to do a complete job and that they should leave it to the assignee.  Assigning should be reserved for cases where either the original reviewer did a really huge review and you'd like a re-review from the same person to ensure that you fully understood it, or the person in question has some specialized knowledge because you're adding test coverage or documentation to untested/undocumented code that they wrote and you want to make sure you're getting it right.

2. The branch-naming convention puts the ticket number at the _end_ of the branch name.

For example, foo-1234, not 1234-foo.  If we re-add the automation to recognize branch names and update the 'branch' field in trac, getting this consistent will be important.

Thanks!

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160621/912600c1/attachment.html>

From rodrigc at crodrigues.org  Tue Jun 21 13:58:14 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 21 Jun 2016 12:58:14 -0700
Subject: [Twisted-Python] two minor things
In-Reply-To: <6325D6CF-E456-4DF9-886D-395C5F0BAA6A@twistedmatrix.com>
References: <6325D6CF-E456-4DF9-886D-395C5F0BAA6A@twistedmatrix.com>
Message-ID: <CAG=rPVdvEcJ=gqrWQSivT558_bo7Ewi=3V65cLycw+zNxw6yjg@mail.gmail.com>

On Tue, Jun 21, 2016 at 12:07 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> 2. The branch-naming convention puts the ticket number at the _end_ of the
> branch name.
>
> For example, foo-1234, not 1234-foo.  If we re-add the automation to
> recognize branch names and update the 'branch' field in trac, getting this
> consistent will be important.
>
>
The example given here:
https://twistedmatrix.com/trac/wiki/UltimateQualityDevelopmentSystem

is opposite of what you just described.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160621/0ada80f3/attachment.html>

From adi at roiban.ro  Tue Jun 21 14:01:23 2016
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 21 Jun 2016 21:01:23 +0100
Subject: [Twisted-Python] two minor things
In-Reply-To: <6325D6CF-E456-4DF9-886D-395C5F0BAA6A@twistedmatrix.com>
References: <6325D6CF-E456-4DF9-886D-395C5F0BAA6A@twistedmatrix.com>
Message-ID: <CAFycZ9cMXLvFe0BNC8heF6p3=pEmdzpiAPXjiYqm8Gdrn1MtbA@mail.gmail.com>

On 21 June 2016 at 20:07, Glyph <glyph at twistedmatrix.com> wrote:

> 2. The branch-naming convention puts the ticket number at the _end_ of the
> branch name.
>
> For example, foo-1234, not 1234-foo.  If we re-add the automation to
> recognize branch names and update the 'branch' field in trac, getting this
> consistent will be important.
>
>
AFAIK we agreed that 1234-foo is a better convention... but just that with
the SVN to Git migration we did nothing.

I was the one pushing for this change, and to my defense, Amber was also
happy with the change.

I hope that when we add the automation, it will work with both methods...
but hopefully people will prefer 1234.

For me is easier to auto-complete branches based on id.

Cheers,
Adi



-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160621/05adbe4a/attachment.html>

From jerryguitarist at gmail.com  Tue Jun 21 20:54:42 2016
From: jerryguitarist at gmail.com (Eeshan Garg)
Date: Wed, 22 Jun 2016 00:24:42 -0230
Subject: [Twisted-Python] Regarding moving on with ticket #7934 (New Logging
	System)
Message-ID: <CA+2gYiriE1EXmU89Vxj5Y5iB-Qu7rNNuxygW-mP_NExAEtjtsQ@mail.gmail.com>

Hello again!

I am fully aware that it has been a _very_ long time since I mentioned that
I would get on with <https://twistedmatrix.com/trac/ticket/7934>, but I
haven't really had the time to actually do anything about it. :-/

I would love to work on more tickets like <
https://twistedmatrix.com/trac/ticket/7897> and help port Twisted to the
new logging system and kind of get back into the flow of submitting patches
and contributing to Twisted again (I miss it so much!!).

My main concerns about moving on with #7934 after my last patch have
already been reported by hawkowl in <
https://twistedmatrix.com/trac/ticket/7983>. However, it was a bit unclear
to me from the discussions in 7983 as to how to move forward. It would mean
a lot to me if someone who is working on this right now (or glyph or
hawkowl) could please give me a couple of pointers as to what should be
done with the "self.log" issue for porting existing code to the new logging
system.

- Should I declare a log attribute for an entire module to use?

- Should I rewrite my new patch around hawkowl's suggestion in 7983, use
_loggerFor for everything? If so, how do you refer to the Logger instance
to compare the log_logger in the event dict with what is expected (since
asserting everything in the event dict, including log_logger is crucial for
optimum test coverage)?

- Or is there another way I should be searching for? Has anything changed
since 7983 was filed? :-)

I have already started working on the other suggestions put forth by the
reviewers (such as context managers for capturing log events, etc.).
Looking forward to contributing more!

Regards,
Eeshan Garg
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160622/35efb88b/attachment.html>

From glyph at twistedmatrix.com  Wed Jun 22 02:05:07 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 22 Jun 2016 01:05:07 -0700
Subject: [Twisted-Python] two minor things
In-Reply-To: <CAFycZ9cMXLvFe0BNC8heF6p3=pEmdzpiAPXjiYqm8Gdrn1MtbA@mail.gmail.com>
References: <6325D6CF-E456-4DF9-886D-395C5F0BAA6A@twistedmatrix.com>
 <CAFycZ9cMXLvFe0BNC8heF6p3=pEmdzpiAPXjiYqm8Gdrn1MtbA@mail.gmail.com>
Message-ID: <508BCBC7-7A79-4142-B764-C994435AFB5A@twistedmatrix.com>

> On Jun 21, 2016, at 13:01, Adi Roiban <adi at roiban.ro> wrote:
> 
> 
> 
> On 21 June 2016 at 20:07, Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 2. The branch-naming convention puts the ticket number at the _end_ of the branch name.
> 
> For example, foo-1234, not 1234-foo.  If we re-add the automation to recognize branch names and update the 'branch' field in trac, getting this consistent will be important.
> 
> 
> AFAIK we agreed that 1234-foo is a better convention... but just that with the SVN to Git migration we did nothing.
> 
> I was the one pushing for this change, and to my defense, Amber was also happy with the change.
> 
> I hope that when we add the automation, it will work with both methods... but hopefully people will prefer 1234.
> 
> For me is easier to auto-complete branches based on id.

If we are going to change this, I would really appreciate it if someone in favor of the change would write a script to re-name the literally thousands of outstanding branches to the new convention, so we don't have a random mix.  Luckily git makes this considerably more light weight, since it just changes the name of the pointer and doesn't create new revisions :-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160622/2694c427/attachment-0001.html>

From mithrandi at mithrandi.net  Wed Jun 22 02:51:10 2016
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Wed, 22 Jun 2016 08:51:10 +0000
Subject: [Twisted-Python] two minor things
In-Reply-To: <508BCBC7-7A79-4142-B764-C994435AFB5A@twistedmatrix.com>
References: <6325D6CF-E456-4DF9-886D-395C5F0BAA6A@twistedmatrix.com>
 <CAFycZ9cMXLvFe0BNC8heF6p3=pEmdzpiAPXjiYqm8Gdrn1MtbA@mail.gmail.com>
 <508BCBC7-7A79-4142-B764-C994435AFB5A@twistedmatrix.com>
Message-ID: <CAMcKhMTtzzN9StiBt7Tw4N75My1dM0H32mTCWT_U+ycp5dR9xQ@mail.gmail.com>

On Wed, 22 Jun 2016 at 10:05 Glyph <glyph at twistedmatrix.com> wrote:

>
> If we are going to change this, I would really appreciate it if someone in
> favor of the change would write a script to re-name the literally thousands
> of outstanding branches to the new convention, so we don't have a random
> mix.  Luckily git makes this considerably more light weight, since it just
> changes the name of the pointer and doesn't create new revisions :-).
>

I think most of the "outstanding branches" are actually merged, and need to
be deleted. So maybe a script to do that first...? (Sorry, I'm not likely
to get around to this any time soon)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160622/108a4749/attachment.html>

From hawkowl at atleastfornow.net  Wed Jun 22 02:53:09 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Wed, 22 Jun 2016 18:53:09 +1000
Subject: [Twisted-Python] two minor things
In-Reply-To: <CAMcKhMTtzzN9StiBt7Tw4N75My1dM0H32mTCWT_U+ycp5dR9xQ@mail.gmail.com>
References: <6325D6CF-E456-4DF9-886D-395C5F0BAA6A@twistedmatrix.com>
 <CAFycZ9cMXLvFe0BNC8heF6p3=pEmdzpiAPXjiYqm8Gdrn1MtbA@mail.gmail.com>
 <508BCBC7-7A79-4142-B764-C994435AFB5A@twistedmatrix.com>
 <CAMcKhMTtzzN9StiBt7Tw4N75My1dM0H32mTCWT_U+ycp5dR9xQ@mail.gmail.com>
Message-ID: <E526058C-22FF-4A6A-9D12-F51B8C104F0C@atleastfornow.net>


> On 22 Jun 2016, at 18:51, Tristan Seligmann <mithrandi at mithrandi.net> wrote:
> 
> On Wed, 22 Jun 2016 at 10:05 Glyph <glyph at twistedmatrix.com> wrote:
> 
> If we are going to change this, I would really appreciate it if someone in favor of the change would write a script to re-name the literally thousands of outstanding branches to the new convention, so we don't have a random mix.  Luckily git makes this considerably more light weight, since it just changes the name of the pointer and doesn't create new revisions :-).
> 
> I think most of the "outstanding branches" are actually merged, and need to be deleted. So maybe a script to do that first...? (Sorry, I'm not likely to get around to this any time soon)

I might take a stab at this... firstly we want to delete the merged ones, and then migrate the rest.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160622/f6e306ec/attachment.pgp>

From adi at roiban.ro  Wed Jun 22 09:28:50 2016
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 22 Jun 2016 16:28:50 +0100
Subject: [Twisted-Python] Responding to PRs
In-Reply-To: <1C8F481F-AC4B-4B4D-BB9F-91455772AA69@twistedmatrix.com>
References: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
 <ACF6EEA6-4C96-4AEA-B8F0-2425F1EFB938@twistedmatrix.com>
 <CAFycZ9eX8BFn-yZGN3fW86kih_bd65wFQA4Bqp21GtHmq6u2fw@mail.gmail.com>
 <D85ABED7-EAF7-415A-A40C-B50E1CCCCCA7@twistedmatrix.com>
 <20160614033336.GA23579@hammal>
 <1C8F481F-AC4B-4B4D-BB9F-91455772AA69@twistedmatrix.com>
Message-ID: <CAFycZ9cQcLRfxAFd8513nL0WKsiT8ejF-J1w56EVGwtWNYK5_g@mail.gmail.com>

On 14 June 2016 at 05:24, Glyph <glyph at twistedmatrix.com> wrote:

>
>
> I'm the owner of txghbot.  I hope it ends up being useful for Twisted!
>
>
> I strongly suspect that it will be the official solution.  Thanks so much
> for doing this - the existence of this code is a structural expression of
> the setup process which short-circuits me needing to read and process all
> the developer documentation ;).
>
>
I am trying to work on GitHub <-> Buildbot intergration (2 ways) and for
doing this we will end up with something like a "bot" running
inside/alongside Buildbot and triggering builds based on webhooks.

We will also have another "bot" inside buildbot which will POST Commit
Status requests to GitHub.

Now, my questions are:

* Do we need an external txghbot ?
* Can we integrate all the webhook logic inside the buildbot hook handler
or inside the txghbot?

By integrating all webhooks handlers in a single place, for me it will be
easier to discover everything which is linked of triggered by webhooks.

Cheers,
Adi

PS: GitHub <-> Buildbot integration will follow soon after this PR will be
reviewed and approved https://github.com/twisted-infra/braid/pull/205 :)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160622/085a55d0/attachment.html>

From glyph at twistedmatrix.com  Wed Jun 22 15:33:18 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 22 Jun 2016 14:33:18 -0700
Subject: [Twisted-Python] Responding to PRs
In-Reply-To: <CAFycZ9cQcLRfxAFd8513nL0WKsiT8ejF-J1w56EVGwtWNYK5_g@mail.gmail.com>
References: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
 <ACF6EEA6-4C96-4AEA-B8F0-2425F1EFB938@twistedmatrix.com>
 <CAFycZ9eX8BFn-yZGN3fW86kih_bd65wFQA4Bqp21GtHmq6u2fw@mail.gmail.com>
 <D85ABED7-EAF7-415A-A40C-B50E1CCCCCA7@twistedmatrix.com>
 <20160614033336.GA23579@hammal>
 <1C8F481F-AC4B-4B4D-BB9F-91455772AA69@twistedmatrix.com>
 <CAFycZ9cQcLRfxAFd8513nL0WKsiT8ejF-J1w56EVGwtWNYK5_g@mail.gmail.com>
Message-ID: <3180BBD6-79AF-433B-ADF0-C4A6EC3413F8@twistedmatrix.com>


> On Jun 22, 2016, at 08:28, Adi Roiban <adi at roiban.ro> wrote:
> 
> 
> 
> On 14 June 2016 at 05:24, Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
>> 
>> I'm the owner of txghbot.  I hope it ends up being useful for Twisted!
> 
> I strongly suspect that it will be the official solution.  Thanks so much for doing this - the existence of this code is a structural expression of the setup process which short-circuits me needing to read and process all the developer documentation ;).
> 
> 
> I am trying to work on GitHub <-> Buildbot intergration (2 ways) and for doing this we will end up with something like a "bot" running inside/alongside Buildbot and triggering builds based on webhooks.
> 
> We will also have another "bot" inside buildbot which will POST Commit Status requests to GitHub.
> 
> Now, my questions are:
> 
> * Do we need an external txghbot ? 
> * Can we integrate all the webhook logic inside the buildbot hook handler or inside the txghbot?
> 
> By integrating all webhooks handlers in a single place, for me it will be easier to discover everything which is linked of triggered by webhooks.
> 
> Cheers,
> Adi
> 
> PS: GitHub <-> Buildbot integration will follow soon after this PR will be reviewed and approved https://github.com/twisted-infra/braid/pull/205 <https://github.com/twisted-infra/braid/pull/205> :)

I'd rather have a separate bot for workflow stuff, because buildbot can be fairly opaque and difficult to understand or run in isolation, especially if someone wants to set it up against a test project to try out workflow changes.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160622/3a8d1cf9/attachment.html>

From rodrigc at crodrigues.org  Thu Jun 23 00:14:20 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 22 Jun 2016 23:14:20 -0700
Subject: [Twisted-Python] windows7-64-py3.5 buildbot failure
Message-ID: <CAG=rPVcLR-wd-i8ShgGOrJrVvaFg5sYYHbEKwySwHbF1AF0iJg@mail.gmail.com>

Hi,

I notice that this buildbot is failing because it cannot find vcvarsall.bat

https://buildbot.twistedmatrix.com/builders/windows7-64-py3.5/builds/174/steps/shell_2/logs/stdio

I was able to get a Windows 10 environment going by doing the following:

(1)  Installing Python 3.5 from https://www.python.org/downloads/windows/
(2)  Install the exact Microsoft compiler version specified in:
https://wiki.python.org/moin/WindowsCompilers
(3)   Ran this command to put CL.EXE in PATH:   "C:\Program Files
(x86)\Microsoft Visual C++ Build Tools\vcbuildtools.bat"
(4)  Ran these commands to put Python in PATH:

set PYTHON_ROOT=C:\Users\Craig\AppData\Local\Programs\Python\Python35
set
PATH=%PYTHON_ROOT%;%PYTHON_ROOT%\Scripts;%PYTHON_ROOT%\Tools\Scripts;%PATH%

At this point, I was able to checkout Twisted from git and do

python setup.py build
python setup.py install

Can we fix this buildbot at least to the point where we can do that?

Thanks.
--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160622/60935a0d/attachment.html>

From adi at roiban.ro  Thu Jun 23 04:52:31 2016
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 23 Jun 2016 11:52:31 +0100
Subject: [Twisted-Python] Buildbot upgrade to latest eight branch
Message-ID: <CAFycZ9en8Vzts5s8Z4+vu8d1q73okX6736de=CH6XcedgsDQrw@mail.gmail.com>

Hi,

I have updated the version of buildbot used by
https://buildbot.twistedmatrix.com

it used to be an old forked version with some patches... but the fork did
not had good documentation.

To move things forward I have discarded the forked changes and went for
upstream version.

The changes were done in this PR
https://github.com/twisted-infra/braid/pull/205

The changes will allow us to use the new upstream code for GitHub <->
Buildbot integration ... aka webhooks and commit status reports.

This might introduce retrogressions and things might start to fall.
Please report any errors you see when interacting with buildbot here, over
#twisted-admin or by creating a new issue here
https://github.com/twisted-infra/braid/issues

Have a good day!
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160623/db435a64/attachment.html>

From glyph at twistedmatrix.com  Thu Jun 23 14:39:25 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 23 Jun 2016 13:39:25 -0700
Subject: [Twisted-Python] windows7-64-py3.5 buildbot failure
In-Reply-To: <CAG=rPVcLR-wd-i8ShgGOrJrVvaFg5sYYHbEKwySwHbF1AF0iJg@mail.gmail.com>
References: <CAG=rPVcLR-wd-i8ShgGOrJrVvaFg5sYYHbEKwySwHbF1AF0iJg@mail.gmail.com>
Message-ID: <7FD7D2C6-1DEA-4B64-ADE2-293EC84CF7A4@twistedmatrix.com>


> On Jun 22, 2016, at 23:14, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Can we fix this buildbot at least to the point where we can do that?


Since nobody answered, and I'd really rather not spend my vacation maintaining Windows buildbots, would you like the credentials to do this fixing yourself?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160623/e1faf98a/attachment.html>

From glyph at twistedmatrix.com  Thu Jun 23 14:40:43 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 23 Jun 2016 13:40:43 -0700
Subject: [Twisted-Python] Buildbot upgrade to latest eight branch
In-Reply-To: <CAFycZ9en8Vzts5s8Z4+vu8d1q73okX6736de=CH6XcedgsDQrw@mail.gmail.com>
References: <CAFycZ9en8Vzts5s8Z4+vu8d1q73okX6736de=CH6XcedgsDQrw@mail.gmail.com>
Message-ID: <5C1A7E78-BB95-4FC1-B323-7469916B443C@twistedmatrix.com>


> On Jun 23, 2016, at 03:52, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> I have updated the version of buildbot used by https://buildbot.twistedmatrix.com <https://buildbot.twistedmatrix.com/>
> 
> it used to be an old forked version with some patches... but the fork did not had good documentation.
> 
> To move things forward I have discarded the forked changes and went for upstream version.
> 
> The changes were done in this PR https://github.com/twisted-infra/braid/pull/205 <https://github.com/twisted-infra/braid/pull/205>
> 
> The changes will allow us to use the new upstream code for GitHub <-> Buildbot integration ... aka webhooks and commit status reports.
> 
> This might introduce retrogressions and things might start to fall.
> Please report any errors you see when interacting with buildbot here, over #twisted-admin or by creating a new issue here https://github.com/twisted-infra/braid/issues <https://github.com/twisted-infra/braid/issues>
Thanks a lot for doing this, Adi!  The less random infrastructure forks we maintain, the easier it gets to manage the burden of operating all this stuff...

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160623/27b31294/attachment.html>

From rodrigc at crodrigues.org  Thu Jun 23 15:08:08 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 23 Jun 2016 14:08:08 -0700
Subject: [Twisted-Python] windows7-64-py3.5 buildbot failure
In-Reply-To: <7FD7D2C6-1DEA-4B64-ADE2-293EC84CF7A4@twistedmatrix.com>
References: <CAG=rPVcLR-wd-i8ShgGOrJrVvaFg5sYYHbEKwySwHbF1AF0iJg@mail.gmail.com>
 <7FD7D2C6-1DEA-4B64-ADE2-293EC84CF7A4@twistedmatrix.com>
Message-ID: <CAG=rPVcFbDfbN_rehDB82=sWjMK=pJX2Y9DEtvpYRKe_SUp_Vg@mail.gmail.com>

On Thu, Jun 23, 2016 at 1:39 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
>
> On Jun 22, 2016, at 23:14, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
>
> Can we fix this buildbot at least to the point where we can do that?
>
>
> Since nobody answered, and I'd really rather not spend my vacation
> maintaining Windows buildbots, would you like the credentials to do this
> fixing yourself?
>

OK.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160623/cbb5bd5e/attachment.html>

From adi at roiban.ro  Fri Jun 24 08:15:26 2016
From: adi at roiban.ro (Adi Roiban)
Date: Fri, 24 Jun 2016 15:15:26 +0100
Subject: [Twisted-Python] Buildbot upgrade to latest eight branch
In-Reply-To: <5C1A7E78-BB95-4FC1-B323-7469916B443C@twistedmatrix.com>
References: <CAFycZ9en8Vzts5s8Z4+vu8d1q73okX6736de=CH6XcedgsDQrw@mail.gmail.com>
 <5C1A7E78-BB95-4FC1-B323-7469916B443C@twistedmatrix.com>
Message-ID: <CAFycZ9fPqJ1ec-WddC1jVX8brCnPqZjNTZDTkjBniMWfMjubAA@mail.gmail.com>

Reporting the build status from Buildbot to GitHub was deployed into
production using the branch which is waiting a review before being merged
in master

https://github.com/twisted-infra/braid/pull/206

Please report any feedback or issues with the GitHub commit status reports
in the PR

Thanks!


-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160624/92e2fa58/attachment.html>

From glyph at twistedmatrix.com  Fri Jun 24 15:38:15 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 24 Jun 2016 14:38:15 -0700
Subject: [Twisted-Python] Buildbot upgrade to latest eight branch
In-Reply-To: <CAFycZ9fPqJ1ec-WddC1jVX8brCnPqZjNTZDTkjBniMWfMjubAA@mail.gmail.com>
References: <CAFycZ9en8Vzts5s8Z4+vu8d1q73okX6736de=CH6XcedgsDQrw@mail.gmail.com>
 <5C1A7E78-BB95-4FC1-B323-7469916B443C@twistedmatrix.com>
 <CAFycZ9fPqJ1ec-WddC1jVX8brCnPqZjNTZDTkjBniMWfMjubAA@mail.gmail.com>
Message-ID: <A2423E66-3682-41D6-81CD-A5ECD804F543@twistedmatrix.com>


> On Jun 24, 2016, at 07:15, Adi Roiban <adi at roiban.ro> wrote:
> 
> Reporting the build status from Buildbot to GitHub was deployed into production using the branch which is waiting a review before being merged in master
> 
> https://github.com/twisted-infra/braid/pull/206 <https://github.com/twisted-infra/braid/pull/206>
> 
> Please report any feedback or issues with the GitHub commit status reports in the PR

Woohoo!

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160624/d5bf1342/attachment.html>

From hawkowl at atleastfornow.net  Tue Jun 28 06:44:08 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Tue, 28 Jun 2016 22:44:08 +1000
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
Message-ID: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>

Hi everyone,

Here's another prerelease in the 16.3 series -- fixing a 16.2 regression in HTTP timeouts not working.

For more information, check the NEWS file (link provided below).

As usual, it's available for download -- go here (https://twistedmatrix.com/Releases/pre/16.3.0pre2/) to get the prerelease tarballs and the full NEWS file. If you want to install it right away, run:

   pip install https://twistedmatrix.com/Releases/pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2

A reminder that if you would like to try out the newly-landed HTTP/2 support, run:

   pip install -U https://twistedmatrix.com/Releases/pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2#egg=Twisted[http2,tls]

This will download the new HTTP/2 dependencies and the TLS requirements as well.

Please let me know if you have any issues, as well as if you don't! If everything works well, that's a good thing for me to know :)

Twisted Regards,
Amber Brown (HawkOwl)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160628/75b6f0d6/attachment.pgp>

From dansut at gmail.com  Tue Jun 28 11:49:05 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Tue, 28 Jun 2016 13:49:05 -0400
Subject: [Twisted-Python] Style/testing for log-related changes
In-Reply-To: <50BD783F-5296-40A3-B2A5-8A7F1F226D1B@twistedmatrix.com>
References: <57555CA8.40404@imperial.ac.uk>
 <50BD783F-5296-40A3-B2A5-8A7F1F226D1B@twistedmatrix.com>
Message-ID: <CADzPF4tHXfE3qzn4fKOqk4NSEKvh8z_zfdi-YLx4v7-sOp73eA@mail.gmail.com>

I'm also finding myself looking at doing some of this so thought it
might be worth rejuvenating this thread...

On Jun 6, 2016, at 04:21, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> > I'd like to submit a patch to convert t.conch.ssh to the new logging. The
> > main reason is that the conch code logs a *lot* of really, really, really
> > boring crap that I want to throw away because it just clutters up the logs
> > e.g.
> > https://github.com/twisted/twisted/blob/twisted-16.2.0/twisted/conch/ssh/connection.py#L454

On Mon, Jun 6, 2016 at 4:40 PM, Glyph <glyph at twistedmatrix.com> wrote:
> No need to justify it - any work to move us internally to new APIs so we can
> finally get to the business of deprecating the old ones would be great!

Looking through the code it doesn't actually seem like there's that
much work to get there, but as someone who is new to this project I
feel a bit more guidance would be useful. There seems to be little in
the way of examples of this being done, and when it has been done
there seem to be 2 approaches:

- one with a style similar to the examples in the docs:
    _log = twisted.logger.Logger()
    self._log.emit()
    https://github.com/twisted/twisted/commit/ff7a05da

- and a more recent one that uses this style:
    twisted.logger._loggerFor(self).emit()
    https://github.com/twisted/twisted/commit/c575f1d

Appreciating consistancy is important and not wanting to waste time
doing the former when the latter is now thought of as a better idea

> > Moving it to the new logging would, at very least, let me trivially write an
> > observer which throws away these by module.
>
> No need to write one!  This is an explicit use-case for new logging: see
> https://twistedmatrix.com/documents/16.2.0/api/twisted.logger.LogLevelFilterPredicate.html
> and
> https://twistedmatrix.com/documents/16.2.0/api/twisted.logger.FilteringLogObserver.html
>
> (You may also be interested in figuring out a solution to
> https://twistedmatrix.com/trac/ticket/7969 )

That looks like an interesting and worthwhile challenge, but first a
little practice porting the basics to the new logger

> Does anyone have an example ticket/commit for a conversion to the new
> logging showing the general style, and the technique used for writing tests
> for that?

This is what I came up with while trying to get twistd related
messages all emitted through new logger and thus not have [-] in
standard textual log:
  https://github.com/twisted/twisted/compare/bb0d1d67...dansut:logger-update
Probably did some really daft stuff here but comments appreciated on
my forks branch to get me working in a way which will be acceptable
for PRs in future.

> twistd itself was converted over -
> https://twistedmatrix.com/trac/ticket/8235 - but of course that's mostly
> from the consumer side rather than emitting logs.

That's where I found use of _loggerFor ...

> It shouldn't be too complex, honestly; just get rid of all manual string
> formatting, and convert any %()s format strings to {}.

That side of things is pretty clear, there are a few places where
longer strings are being logged that might be questionable, and a
bunch of places where utility function log.callWithLogger is used that
I'm not sure how to handle.

> The testing support is the same as for the old logging system (add a global
> observer, remove it in an addCleanup, assert about the things it caught)
> because it's still just key-value pairs, they're just better-defined now.

Any chance of a pointer to a good clear example to emulate?

Also still trying to get my head around whether there should be one
Trac ticket to cover all logger porting effort, or individual tickets
for each porting effort.

Sorry for being such a newb, all help and pointers appreciated.
Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>


From commercials24 at yahoo.de  Wed Jun 29 16:39:02 2016
From: commercials24 at yahoo.de (steven meier)
Date: Thu, 30 Jun 2016 00:39:02 +0200
Subject: [Twisted-Python] qt5 and twisted, reactor already installed,
	python 2.x
Message-ID: <1467239942.6939.24.camel@yahoo.de>

hi,


ive got some twisted code that runs on its own
and some python code that also runs on its own,

now i would like to combine the two, so i added:

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv) # your code to init QtCore
    import qt5reactor
    qt5reactor.install()
    from twisted.internet import reactor
   


to use some qt reactor with twisted.
running the qt code with those lines also works.
but as soon as i import other code into this one i get:


python main_code.py 
Gtk-Message: Failed to load module "canberra-gtk-module"
Traceback (most recent call last):
  File "main_code.py", line 29, in <module>
    qt5reactor.install()
  File "/home/julius/.local/lib/python2.7/site-packages/qt5reactor.py",
line 412, in posixinstall
    installReactor(p)
  File
"/home/julius/.local/lib/python2.7/site-packages/twisted/internet/main.py", line 32, in installReactor
    raise error.ReactorAlreadyInstalledError("reactor already
installed")
twisted.internet.error.ReactorAlreadyInstalledError: reactor already
installed




here is my code:
when importing get_main_page i get the error above...

import sys
from PyQt5 import QtWidgets
from untitled import Ui_MainWindow
#from webchat import get_main_page

class Main(QtWidgets.QMainWindow):

    def __init__(self):
        QtWidgets.QMainWindow.__init__(self)
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.setupSignals()

    def button_1_Clicked(self):
        self.ui.textbox_2.setText(self.ui.textbox_1.text())

    def setupSignals(self):
        #self.ui.textbox_1.textChanged.connect(self.textbox_1_Changed)
        self.ui.button_1.clicked.connect(self.button_1_Clicked)




if __name__ == '__main__':
    #app = QtWidgets.QApplication(sys.argv)
    
    app = QtWidgets.QApplication(sys.argv) # your code to init QtCore
    import qt5reactor
    qt5reactor.install()
    from twisted.internet import reactor
    print "testing..."

    #get_main_page()
    window = Main()
    window.show()
    #sys.exit(app.exec_())
    def printMe(argument):
        print argument

    def lala():
        reactor.callLater(5, printMe, '123')


    lala()
    reactor.run()






webchat.py (containing get_main_page) starts with the lines:

from twisted.web.client import Agent, CookieAgent, getPage,
HTTPClientFactory
from bs4 import BeautifulSoup
import json
import urllib
import random
from myglobals import *
from twisted.internet.task import LoopingCall




how can i get a more "refined" error message, that actually tells me
which line is causing the error?

because as i said, the line 29 in main_code works when i do not import
get_main_page



From glyph at twistedmatrix.com  Wed Jun 29 17:01:17 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 29 Jun 2016 16:01:17 -0700
Subject: [Twisted-Python] qt5 and twisted, reactor already installed,
	python 2.x
In-Reply-To: <1467239942.6939.24.camel@yahoo.de>
References: <1467239942.6939.24.camel@yahoo.de>
Message-ID: <095CAE26-E5A7-4145-A6E8-35659A2AB05B@twistedmatrix.com>


> On Jun 29, 2016, at 15:39, steven meier <commercials24 at yahoo.de> wrote:
> 
> 
> here is my code:
> when importing get_main_page i get the error above...
> 
> import sys
> from PyQt5 import QtWidgets
> from untitled import Ui_MainWindow
> #from webchat import get_main_page

You have to put the qt5reactor installation at the very top of the very first file that you run.  What's happened here is that you imported some Twisted code that did 'from twisted.internet import reactor' at the top level, which unfortunately far too many modules do, before you installed the qt5 reactor.

For this and other reasons, you should always put your `if __name__ == '__main__'` block - if you have one at all - at the very top of your script, not the bottom.  This blog post may be informative: https://moshez.wordpress.com/2016/06/07/__name__-__main__-considered-harmful/

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160629/3ce8aeb3/attachment.html>

From adi at roiban.ro  Thu Jun 30 04:43:17 2016
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 30 Jun 2016 11:43:17 +0100
Subject: [Twisted-Python] Coverage exceptions
Message-ID: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>

Hi,

Recently we have introduced a hard check of 100% coverage for all changes.
This is done via coverage + codecov + github protected branches.

Now, if your patch is not 100% covered github will not let you merge it.

See for example this change:
https://github.com/twisted/twisted/pull/261/files#diff-0fea8a8ca713deb7ea6a10053273319aR2360

The errback is there to help with test failures ... but the test should
never fail, so that errback is never called... and that line is not covered.

How should we proceed with these changes?

Maybe this is not the best example and that code could be refactored... but
I think that the topic of ignoring missing coverage is still valid.

I suggest to introduce `  # pragma: no cover`

and update the coverage config with

[report]
exclude_lines =
    pragma: no cover

-----------

What do you think?

Thanks!
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160630/ad3526b2/attachment.html>

From commercials24 at yahoo.de  Thu Jun 30 04:44:44 2016
From: commercials24 at yahoo.de (steven meier)
Date: Thu, 30 Jun 2016 12:44:44 +0200
Subject: [Twisted-Python] qt5 and twisted, reactor already installed,
 python 2.x
In-Reply-To: <095CAE26-E5A7-4145-A6E8-35659A2AB05B@twistedmatrix.com>
References: <1467239942.6939.24.camel@yahoo.de>
 <095CAE26-E5A7-4145-A6E8-35659A2AB05B@twistedmatrix.com>
Message-ID: <1467283484.6939.26.camel@yahoo.de>

On Wed, 2016-06-29 at 16:01 -0700, Glyph wrote:
> 
> > On Jun 29, 2016, at 15:39, steven meier <commercials24 at yahoo.de>
> > wrote:
> > 
> > 
> > here is my code:
> > when importing get_main_page i get the error above...
> > 
> > import sys
> > from PyQt5 import QtWidgets
> > from untitled import Ui_MainWindow
> > #from webchat import get_main_page
> > 
> 
> You have to put the qt5reactor installation at the very top of the
> very first file that you run.  What's happened here is that you
> imported some Twisted code that did 'from twisted.internet import
> reactor' at the top level, which unfortunately far too many modules
> do, before you installed the qt5 reactor.
> 
> 
> For this and other reasons, you should always put your `if __name__ ==
> '__main__'` block - if you have one at all - at the very top of your
> script, not the bottom.  This blog post may be
> informative: https://moshez.wordpress.com/2016/06/07/__name__-__main__-considered-harmful/
> 
> 
> -glyph
> _______________________________________________



thank you for the quick reply, you were right.
but because of the qt imports / Main class my file now basically has the
line:
from webchat import get_main_page

at the end with the rest unchanged....but at least it runs



From commercials24 at yahoo.de  Thu Jun 30 04:49:00 2016
From: commercials24 at yahoo.de (steven meier)
Date: Thu, 30 Jun 2016 12:49:00 +0200
Subject: [Twisted-Python] qt5 and twisted, reactor already installed,
 python 2.x
In-Reply-To: <095CAE26-E5A7-4145-A6E8-35659A2AB05B@twistedmatrix.com>
References: <1467239942.6939.24.camel@yahoo.de>
 <095CAE26-E5A7-4145-A6E8-35659A2AB05B@twistedmatrix.com>
Message-ID: <1467283740.6939.29.camel@yahoo.de>


> You have to put the qt5reactor installation at the very top of the
> very first file that you run.  What's happened here is that you
> imported some Twisted code that did 'from twisted.internet import
> reactor' at the top level, which unfortunately far too many modules
> do, before you installed the qt5 reactor.


So twisted modules should not at all import the reactor but rely on the
user code todo that?








From exarkun at twistedmatrix.com  Thu Jun 30 05:13:52 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Thu, 30 Jun 2016 07:13:52 -0400
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
Message-ID: <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>

On Thu, Jun 30, 2016 at 6:43 AM, Adi Roiban <adi at roiban.ro> wrote:

> Hi,
>
> Recently we have introduced a hard check of 100% coverage for all changes.
> This is done via coverage + codecov + github protected branches.
>
> Now, if your patch is not 100% covered github will not let you merge it.
>
> See for example this change:
> https://github.com/twisted/twisted/pull/261/files#diff-0fea8a8ca713deb7ea6a10053273319aR2360
>
> The errback is there to help with test failures ... but the test should
> never fail, so that errback is never called... and that line is not covered.
>
>
It doesn't always make sense to require 100% execution of all test code.
It's not at all uncommon to only have code in a test suite that runs when a
test fails.  Historically, Twisted has never had a requirement of 100%
execution of test code.  The only test suite coverage requirements that
have commonly been requested or enforced is for coverage of implementation
code.

I'd suggest removing the coverage enforcement for test suite code.


> How should we proceed with these changes?
>
> Maybe this is not the best example and that code could be refactored...
> but I think that the topic of ignoring missing coverage is still valid.
>
> I suggest to introduce `  # pragma: no cover`
>
> and update the coverage config with
>
> [report]
> exclude_lines =
>     pragma: no cover
>
>
This seems like the wrong solution to me.  It forces contributors to do
extra work to mark their test code as an exception *and* provides a
mechanism for incorrectly bypassing the check by using a no-cover pragma in
implementation code.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160630/4f9e5eab/attachment-0001.html>

From glyph at twistedmatrix.com  Thu Jun 30 16:09:20 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 30 Jun 2016 15:09:20 -0700
Subject: [Twisted-Python] qt5 and twisted, reactor already installed,
	python 2.x
In-Reply-To: <1467283740.6939.29.camel@yahoo.de>
References: <1467239942.6939.24.camel@yahoo.de>
 <095CAE26-E5A7-4145-A6E8-35659A2AB05B@twistedmatrix.com>
 <1467283740.6939.29.camel@yahoo.de>
Message-ID: <719CE020-992A-433D-95BA-F030538490F7@twistedmatrix.com>


> On Jun 30, 2016, at 03:49, steven meier <commercials24 at yahoo.de> wrote:
> 
> 
>> You have to put the qt5reactor installation at the very top of the
>> very first file that you run.  What's happened here is that you
>> imported some Twisted code that did 'from twisted.internet import
>> reactor' at the top level, which unfortunately far too many modules
>> do, before you installed the qt5 reactor.
> 
> 
> So twisted modules should not at all import the reactor but rely on the
> user code todo that?

Yes.  Unfortunately, lots of places do import the reactor directly today, but we have long since decided that this is a bad way to do things.  This is why e.g. react <https://twistedmatrix.com/documents/16.2.0/api/twisted.internet.task.html#react> passes the reactor to your function as a parameter, so you can pass it on down to any other code that needs it.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160630/2ff752aa/attachment.html>

From glyph at twistedmatrix.com  Thu Jun 30 16:25:38 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 30 Jun 2016 15:25:38 -0700
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
 <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
Message-ID: <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>


> On Jun 30, 2016, at 04:13, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> On Thu, Jun 30, 2016 at 6:43 AM, Adi Roiban <adi at roiban.ro <mailto:adi at roiban.ro>> wrote:
> Hi,
> 
> Recently we have introduced a hard check of 100% coverage for all changes.
> This is done via coverage + codecov + github protected branches.
> 
> Now, if your patch is not 100% covered github will not let you merge it.
> 
> See for example this change: https://github.com/twisted/twisted/pull/261/files#diff-0fea8a8ca713deb7ea6a10053273319aR2360 <https://github.com/twisted/twisted/pull/261/files#diff-0fea8a8ca713deb7ea6a10053273319aR2360>
> 
> The errback is there to help with test failures ... but the test should never fail, so that errback is never called... and that line is not covered.
> 
> 
> It doesn't always make sense to require 100% execution of all test code.  It's not at all uncommon to only have code in a test suite that runs when a test fails.  Historically, Twisted has never had a requirement of 100% execution of test code.  The only test suite coverage requirements that have commonly been requested or enforced is for coverage of implementation code.
> 
> I'd suggest removing the coverage enforcement for test suite code.

I am inclined to disagree, albeit mildly.

When one is writing a deliberately un-covered path in test code, presumably, one is writing either a test helper - a mock, fake, or utility for setting up a real implementation - or an assertion method.  Historically, I believe that when we've invested more heavily in making these utilities "real" themselves, and not just throwaway stuff inline in a test method or module, the benefits have far outweighed the costs.  In fact the availability of proto_helpers is one of the selling points of Twisted as opposed to other competing engines.

Therefore, I think that asking folks to add independent test coverage to verify their fakes and ensure that the failure-reporting of their assertion messages are helpful in the event a test fails is a generally good idea, and we should keep the requirement for 100% coverage on both test and implementation coverage.

However, if there is contention around this, I'd much rather get a ratchet in place for implementation code that's reliable and everyone is happy with, so I'm OK with disabling coverage reporting for our *.test.* packages as a step towards that.

> How should we proceed with these changes?
> 
> Maybe this is not the best example and that code could be refactored... but I think that the topic of ignoring missing coverage is still valid.
> 
> I suggest to introduce `  # pragma: no cover`
> 
> and update the coverage config with
> 
> [report]
> exclude_lines =
>     pragma: no cover
> 
> 
> This seems like the wrong solution to me.  It forces contributors to do extra work to mark their test code as an exception and provides a mechanism for incorrectly bypassing the check by using a no-cover pragma in implementation code.

In any case I totally agree with this.  If we have a categorical difference in types of code (test vs. non-test) then let's make that distinction, but we should not be adding one-off exceptions as an exercise of non-uniform reviewer judgement on every review.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160630/4e1ad970/attachment.html>

From rodrigc at crodrigues.org  Thu Jun 30 16:55:06 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 30 Jun 2016 15:55:06 -0700
Subject: [Twisted-Python] FreeBSD buildbots down?
Message-ID: <CAG=rPVfaqeNQPbqjKU=nyr6rNoF7BK7977bH0aH7jSZntWRYgg@mail.gmail.com>

Hi,

The FreeBSD buildbots seem to be down since May 26.
https://buildbot.twistedmatrix.com/boxes-all

Any ideas as to what is wrong?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160630/b464d162/attachment.html>

From meejah at meejah.ca  Thu Jun 30 17:22:29 2016
From: meejah at meejah.ca (meejah)
Date: Fri, 01 Jul 2016 03:22:29 +0400
Subject: [Twisted-Python] qt5 and twisted, reactor already installed,
	python 2.x
In-Reply-To: <719CE020-992A-433D-95BA-F030538490F7@twistedmatrix.com> (Glyph
 Lefkowitz's message of "Thu, 30 Jun 2016 15:09:20 -0700")
References: <1467239942.6939.24.camel@yahoo.de>
 <095CAE26-E5A7-4145-A6E8-35659A2AB05B@twistedmatrix.com>
 <1467283740.6939.29.camel@yahoo.de>
 <719CE020-992A-433D-95BA-F030538490F7@twistedmatrix.com>
Message-ID: <86y45m2rey.fsf@atlantis.meejah.ca>

Glyph Lefkowitz <glyph at twistedmatrix.com> writes:

> Yes.  Unfortunately, lots of places do import the reactor directly
> today, but we have long since decided that this is a bad way to do
> things.  This is why e.g. react
> <https://twistedmatrix.com/documents/16.2.0/api/twisted.internet.task.h
> tml#react> passes the reactor to your function as a parameter, so you
> can pass it on down to any other code that needs it.

As a "casual" user of Twisted, I was somewhat skeptical of this "pass
the reactor everywhere" approach -- but I did try to follow this advice
in txtorcon, and was rewarded with easy-to-write tests regarding timing,
which are (usually) a horror-show *and* I was rewarded with having to
think about "do I *really* need the reactor here?".

Now, sometimes you can compromise. For example, see my AddrMap class
which assigns a "self.scheduler" which is usually just gotten by
importing from twisted.internet.reactor -- *but* critically, the tests
can re-assign this:

   https://github.com/meejah/txtorcon/blob/master/test/test_addrmap.py#L109

Ideally, this would have been passed-in via the __init__ but,
*shruggy-face*. The point being, you can incrementally upgrade to "the
better way".

Overall, I'm very sold on accessing "the reactor" via "self dot
something" rather than via imports *even if* the only reason ends up
being "because testing". It's pretty likely that some random user you've
never heard of has a similar use-case to that thing you needed to do in
that one test... (I've read this elsewhere, not my idea)

If nothing else, it will cause you to pause and consider "how will this
thing access the reactor", which will cause you to think about
concurrency issues... (Or, contrary-wise, classes which *don't* have a
self._reactor definitely do *not* need any thinking about concurrency --
which is also a big win).

In any case, my concurrency-hackles raise when I see ".. import
reactor". Best to localize these fears to "self._reactor".

-- 
meejah



From rodrigc at crodrigues.org  Thu Jun 30 18:09:35 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 30 Jun 2016 17:09:35 -0700
Subject: [Twisted-Python] Fwd: More tests running on Python 3
In-Reply-To: <CAG=rPVeu-GS=wEb+RdhvwUC8+q72MZKG+-3=Twb6PE8Qwi_bEw@mail.gmail.com>
References: <CAG=rPVeu-GS=wEb+RdhvwUC8+q72MZKG+-3=Twb6PE8Qwi_bEw@mail.gmail.com>
Message-ID: <CAG=rPVfnCRQae9AvzKJcjHV_CTV3vq6nePbyn0JiP2=+qZ+wAA@mail.gmail.com>

Hi,

I looked at these two Travis builds on Linux

DATE              BUILD
====              =====
June  3, 2016    https://travis-ci.org/twisted/twisted/builds/135219940
June 30, 2016    https://travis-ci.org/twisted/twisted/builds/141426367


I noticed:

DATE             Tests on Python 2.7
====              =====================================
June  3, 2016     11438 (skips=3013, successes=8425)
June 30, 2016    11496 (skips=2063, successes=9433)


DATE             Tests on Python 3.5
====               =====================================
June  3, 2016     6367 (skips=1533, successes=4834)
June 30, 2016    7902 (skips=1693, successes=6209)

So it looks like some progress is being made with getting more
tests to pass on Python 3.  Thanks for everyone helping with my code
reviews!

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160630/b855d4b4/attachment-0001.html>

From glyph at twistedmatrix.com  Thu Jun 30 18:32:35 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 30 Jun 2016 17:32:35 -0700
Subject: [Twisted-Python] Fwd: More tests running on Python 3
In-Reply-To: <CAG=rPVfnCRQae9AvzKJcjHV_CTV3vq6nePbyn0JiP2=+qZ+wAA@mail.gmail.com>
References: <CAG=rPVeu-GS=wEb+RdhvwUC8+q72MZKG+-3=Twb6PE8Qwi_bEw@mail.gmail.com>
 <CAG=rPVfnCRQae9AvzKJcjHV_CTV3vq6nePbyn0JiP2=+qZ+wAA@mail.gmail.com>
Message-ID: <C2FC23B3-0646-479E-A623-7E931179A8C0@twistedmatrix.com>


> On Jun 30, 2016, at 17:09, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Hi,
> 
> I looked at these two Travis builds on Linux
> 
> DATE              BUILD
> ====              =====
> June  3, 2016    https://travis-ci.org/twisted/twisted/builds/135219940 <https://travis-ci.org/twisted/twisted/builds/135219940>
> June 30, 2016    https://travis-ci.org/twisted/twisted/builds/141426367 <https://travis-ci.org/twisted/twisted/builds/141426367>
> 
> 
> I noticed:
> 
> DATE             Tests on Python 2.7
> ====              =====================================
> June  3, 2016     11438 (skips=3013, successes=8425)
> June 30, 2016    11496 (skips=2063, successes=9433)
> 
> 
> DATE             Tests on Python 3.5
> ====               =====================================
> June  3, 2016     6367 (skips=1533, successes=4834)
> June 30, 2016    7902 (skips=1693, successes=6209)
> 
> So it looks like some progress is being made with getting more
> tests to pass on Python 3.  Thanks for everyone helping with my code reviews!

Wow, these are great numbers - thanks for digging them up!

Maybe these should be mentioned in the release notes?

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160630/757be806/attachment.html>

From exarkun at twistedmatrix.com  Thu Jun 30 18:36:37 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Thu, 30 Jun 2016 20:36:37 -0400
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
 <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
 <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>
Message-ID: <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>

On Thu, Jun 30, 2016 at 6:25 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Jun 30, 2016, at 04:13, Jean-Paul Calderone <exarkun at twistedmatrix.com>
> wrote:
>
> On Thu, Jun 30, 2016 at 6:43 AM, Adi Roiban <adi at roiban.ro> wrote:
>
>> Hi,
>>
>> Recently we have introduced a hard check of 100% coverage for all changes.
>> This is done via coverage + codecov + github protected branches.
>>
>> Now, if your patch is not 100% covered github will not let you merge it.
>>
>> See for example this change:
>> https://github.com/twisted/twisted/pull/261/files#diff-0fea8a8ca713deb7ea6a10053273319aR2360
>>
>> The errback is there to help with test failures ... but the test should
>> never fail, so that errback is never called... and that line is not covered.
>>
>>
> It doesn't always make sense to require 100% execution of all test code.
> It's not at all uncommon to only have code in a test suite that runs when a
> test fails.  Historically, Twisted has never had a requirement of 100%
> execution of test code.  The only test suite coverage requirements that
> have commonly been requested or enforced is for coverage of implementation
> code.
>
> I'd suggest removing the coverage enforcement for test suite code.
>
>
> I am inclined to disagree, albeit mildly.
>
> When one is writing a deliberately un-covered path in test code,
> presumably, one is writing either a test helper - a mock, fake, or utility
> for setting up a real implementation - or an assertion method.
> Historically, I believe that when we've invested more heavily in making
> these utilities "real" themselves, and not just throwaway stuff inline in a
> test method or module, the benefits have far outweighed the costs.  In fact
> the availability of proto_helpers is one of the selling points of Twisted
> as opposed to other competing engines.
>

I mostly agree with this.  However, I was thinking of a slightly different
pattern when I wrote my earlier email.  Here's are a couple (fictional)
examples of that pattern one might find in unit tests for application code
(and there's nothing Twisted-specific here):

if foo:
    self.fail("Foo!")

try:
    foo()
except:
    bar
else:
    self.fail("Foo :(")

It's not exactly that this *can't* be code that's executed in a passing run
of the test suite.  It's more a question of what the right balance point
is.  If someone wants to generalize logic like this (and, fortunately,
someone did generalize these *particular* examples - they're assertFalse
and assertRaises, respectively) then that's great and the result is a
higher level of confidence resulting from a successful run of the test
suite.  I'd suggest that if tests like these exercise all of the
implementation code (on a successful run), though, then you've still
achieved a pretty high level of test coverage and maybe further efforts are
more productively directed elsewhere (increasing the coverage level of
other implementation code in Twisted, for example :).

If folks want a higher bar than this, I'm not going to argue (at least not
much, at least not now).  The bar *hasn't* been this high in the past
though (and there are many many such cases to be found in Twisted's test
suite right now and I don't have the impression this has ever been *much*
of a source of problems).


> Therefore, I think that asking folks to add independent test coverage to
> verify their fakes and ensure that the failure-reporting of their assertion
> messages are helpful in the event a test fails is a generally good idea,
> and we should keep the requirement for 100% coverage on both test and
> implementation coverage.
>
> However, if there is contention around this, I'd much rather get a ratchet
> in place for implementation code that's reliable and everyone is happy
> with, so I'm OK with disabling coverage reporting for our *.test.* packages
> as a step towards that.
>
>
I completely agree that fakes should be verified.  So much so that I'm not
even sure I believe in fakes in *general* anymore.  Instead, you should
just have easy to use interfaces and ship inexpensive implementations
alongside whatever other implementations you also need.  And all those
implementations should have great test coverage.  I also completely agree
that when tests fail, they should do so in a meaningful way.  I suspect
slightly the implication that automated test coverage for the failure case
demonstrates the failure is reported meaningfully, though. :)  I think
we're still stuck with relying on humans (authors, reviewers) to verify
that property.

Jean-Paul


> How should we proceed with these changes?
>>
>> Maybe this is not the best example and that code could be refactored...
>> but I think that the topic of ignoring missing coverage is still valid.
>>
>> I suggest to introduce `  # pragma: no cover`
>>
>> and update the coverage config with
>>
>> [report]
>> exclude_lines =
>>     pragma: no cover
>>
>>
> This seems like the wrong solution to me.  It forces contributors to do
> extra work to mark their test code as an exception *and* provides a
> mechanism for incorrectly bypassing the check by using a no-cover pragma in
> implementation code.
>
>
> In any case I totally agree with *this*.  If we have a categorical
> difference in types of code (test vs. non-test) then let's make that
> distinction, but we should not be adding one-off exceptions as an exercise
> of non-uniform reviewer judgement on every review.
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160630/72f32c74/attachment.html>

From rodrigc at crodrigues.org  Thu Jun 30 19:37:41 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 30 Jun 2016 18:37:41 -0700
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
 <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
 <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>
 <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>
Message-ID: <CAG=rPVd+HF3LUnb6EX-UYuGDSqLk8-e7XT-AV26RCgt_phfU8g@mail.gmail.com>

Hi,

The conversation about coverage exceptions came up due to this:

https://github.com/twisted/twisted/pull/261

I have that up to 97.87% of patch coverage.  I cannot merge it because the
codecov integration with GitHub
is currently configured to not accept patches which don't have 100% patch
coverage.

Can someone please take a look at that, and make a decision as to how to
move that PR forward?
Thanks.
--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160630/84f9b879/attachment.html>

From rodrigc at crodrigues.org  Thu Jun 30 22:19:29 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 30 Jun 2016 21:19:29 -0700
Subject: [Twisted-Python] Captcha warnings preventing me from submitting
	changes to Trac ticket
Message-ID: <CAG=rPVcD5OFN3jpvqP1H4FC8R5NsJVzE50WSSrd+MNOm4_dg6A@mail.gmail.com>

Hi,

I tried to modify a Trac ticket, but when I tried to submit the changes,
I got a Captcha warning that prevented it.
When I clicked on the checkbox, "I am not a robot" and tried to re-submit,
the Captcha warning re-appeared and blocked the submission.

Can someone please fix this?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160630/816c5f18/attachment-0001.html>

From glyph at twistedmatrix.com  Thu Jun 30 23:59:05 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 30 Jun 2016 22:59:05 -0700
Subject: [Twisted-Python] Captcha warnings preventing me from submitting
	changes to Trac ticket
In-Reply-To: <CAG=rPVcD5OFN3jpvqP1H4FC8R5NsJVzE50WSSrd+MNOm4_dg6A@mail.gmail.com>
References: <CAG=rPVcD5OFN3jpvqP1H4FC8R5NsJVzE50WSSrd+MNOm4_dg6A@mail.gmail.com>
Message-ID: <B5EFF7B7-1A94-458A-B7CD-29698FC51898@twistedmatrix.com>


> On Jun 30, 2016, at 21:19, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Hi,
> 
> I tried to modify a Trac ticket, but when I tried to submit the changes,
> I got a Captcha warning that prevented it.
> When I clicked on the checkbox, "I am not a robot" and tried to re-submit,
> the Captcha warning re-appeared and blocked the submission.
> 
> Can someone please fix this?

I've made you a Trac admin.  You can now go into https://twistedmatrix.com/trac/admin/spamfilter/monitor and classify your own posts as ham, which should prevent this from happening to you (or others!) in the future.  The way that this works is that you "delete as ham" any posts that are legit, and "delete as spam" any garbage.  There's quite a backlog since I've been at conferences and on vacation for a while, and I am the only one who looks at it with any regularity :-).

-glyph

P.S.: Subtext: please look at this page occasionally and classify others posts as well...

P.P.S.: OK I guess it's just 'text' now, since I wrote it there.  Or, post-text, at the very least.

P.P.P.S.: Some out there might be thinking "do we really need a spam filter? won't github auth protect us?" and, ICYMI: no, it turns out that it doesn't, github definitely lets spammers in.  They do so at a lower rate than our process used to, but we tried deactivating the spam filter after migrating to github auth, and we definitely got some crap tickets.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20160630/cd3608b9/attachment.html>

From adi at roiban.ro  Thu Jun  2 06:10:48 2016
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 2 Jun 2016 13:10:48 +0100
Subject: [Twisted-Python] Travis-CI integration work
Message-ID: <CAFycZ9cWJQsgzzptpNMZSON0eSKKjZ-UL8Av8n=8g32SbJ8Ovw@mail.gmail.com>

Hi,

I just want to let you know that we are almost done with the work of
integrating Travis-CI with Twisted GitHub PRs.

The ticket is here https://twistedmatrix.com/trac/ticket/7229

If you have time, please take a look at the current work and suggest any
changes or provide any feedback.

The goal of this ticket is to have an initial set of tests executed for a
patch, on behalf on non-Twisted commiters.

In this way, I hope that contributors would be able to get a faster
feedback regarding the quality of their patch.

This should also reduce the work required to review a branch, as commiters
will no longer have to merge and send to buildbot each new revision
submitted by a contributor.

Cheers,

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160602/12c1ee70/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Jun  2 15:04:59 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 2 Jun 2016 14:04:59 -0700
Subject: [Twisted-Python] Travis-CI integration work
In-Reply-To: <CAFycZ9cWJQsgzzptpNMZSON0eSKKjZ-UL8Av8n=8g32SbJ8Ovw@mail.gmail.com>
References: <CAFycZ9cWJQsgzzptpNMZSON0eSKKjZ-UL8Av8n=8g32SbJ8Ovw@mail.gmail.com>
Message-ID: <285FF03A-C7BA-446E-8A58-D353087A8019@twistedmatrix.com>


> On Jun 2, 2016, at 05:10, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> I just want to let you know that we are almost done with the work of integrating Travis-CI with Twisted GitHub PRs.
> 
> The ticket is here https://twistedmatrix.com/trac/ticket/7229 <https://twistedmatrix.com/trac/ticket/7229>
> 
> If you have time, please take a look at the current work and suggest any changes or provide any feedback.
> 
> The goal of this ticket is to have an initial set of tests executed for a patch, on behalf on non-Twisted commiters.
> 
> In this way, I hope that contributors would be able to get a faster feedback regarding the quality of their patch.
> 
> This should also reduce the work required to review a branch, as commiters will no longer have to merge and send to buildbot each new revision submitted by a contributor. 

Thanks for doing this, Adi.  I don't know if I'm going to have time to look at this at the PyCon sprints, but I sure hope someone does :).  If not, we'll get to it soon.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160602/b75e5cc4/attachment-0002.html>

From jasonjwwilliams at gmail.com  Thu Jun  2 15:07:26 2016
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Thu, 2 Jun 2016 14:07:26 -0700
Subject: [Twisted-Python] Travis-CI integration work
In-Reply-To: <CAFycZ9cWJQsgzzptpNMZSON0eSKKjZ-UL8Av8n=8g32SbJ8Ovw@mail.gmail.com>
References: <CAFycZ9cWJQsgzzptpNMZSON0eSKKjZ-UL8Av8n=8g32SbJ8Ovw@mail.gmail.com>
Message-ID: <CAHZAEpdoMyRZ0a=8sCHsngwGvdGy+x31rTZFu+tyce8L942rTQ@mail.gmail.com>

That's awesome. Happy to see this.

-J

On Thu, Jun 2, 2016 at 5:10 AM, Adi Roiban <adi at roiban.ro> wrote:

> Hi,
>
> I just want to let you know that we are almost done with the work of
> integrating Travis-CI with Twisted GitHub PRs.
>
> The ticket is here https://twistedmatrix.com/trac/ticket/7229
>
> If you have time, please take a look at the current work and suggest any
> changes or provide any feedback.
>
> The goal of this ticket is to have an initial set of tests executed for a
> patch, on behalf on non-Twisted commiters.
>
> In this way, I hope that contributors would be able to get a faster
> feedback regarding the quality of their patch.
>
> This should also reduce the work required to review a branch, as commiters
> will no longer have to merge and send to buildbot each new revision
> submitted by a contributor.
>
> Cheers,
>
> --
> Adi Roiban
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160602/6f8e0dba/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Jun  3 01:39:30 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 3 Jun 2016 00:39:30 -0700
Subject: [Twisted-Python] buildbots: normal service will resume shortly
Message-ID: <B2F5DE9E-6AB8-4565-829E-9F9C8E8EC181@twistedmatrix.com>

We had a minor hiccup earlier today due partially to a new Cryptography release (the Windows builders, which started spuriously failing builds) and some random networking issues (the OS X builders, which went offline).  I believe I've gotten them back online and performing to spec and they should chew through their respective backlogs shortly.

-glyph


From glyph at twistedmatrix.com  Fri Jun  3 01:49:18 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 3 Jun 2016 00:49:18 -0700
Subject: [Twisted-Python] buildbots: normal service will resume shortly
In-Reply-To: <B2F5DE9E-6AB8-4565-829E-9F9C8E8EC181@twistedmatrix.com>
References: <B2F5DE9E-6AB8-4565-829E-9F9C8E8EC181@twistedmatrix.com>
Message-ID: <9953D523-8B1B-44E8-AADB-C408DD3A56C0@twistedmatrix.com>


> On Jun 3, 2016, at 00:39, Glyph <glyph at twistedmatrix.com> wrote:
> 
> We had a minor hiccup earlier today due partially to a new Cryptography release (the Windows builders, which started spuriously failing builds) and some random networking issues (the OS X builders, which went offline).  I believe I've gotten them back online and performing to spec and they should chew through their respective backlogs shortly.

Oops!  The _actual_ bug on Windows appears to be a regression in virtualenv, which I have filed here - https://github.com/pypa/virtualenv/issues/929 - which I've now downgraded to 15.0.1 to work around it for now.

-glyph


From bra at fsn.hu  Fri Jun  3 02:06:43 2016
From: bra at fsn.hu (Nagy, Attila)
Date: Fri, 3 Jun 2016 10:06:43 +0200
Subject: [Twisted-Python] Why deferToThread is so slow?
Message-ID: <57513A93.2030000@fsn.hu>

Hi,

I have a thread safe synchronous library, which I would like to use in a 
threadpool using deferToThread.

Without using (deferTo)threads I get consistent 1-3 ms response times, 
with deferring to threadpool, I get 30-300, varying wildly.

I've tried to construct a test, which is of course not perfect, but 
shows some differences, which widen with the number of threads (while 
directly calling that dumb function remains the same).
I can see similar results with using the (database) library, but because 
it's an external dependency and performance gets worse with the number 
of queries (threads), I thought it would be best to leave that out of 
the picture, hence the dumb function.

# python /tmp/deft.py 1
deferToThread: avg 316.17 us, sync: avg 1.38 us, 228.71x increase
deferToThread: avg 312.92 us, sync: avg 1.38 us, 226.96x increase
deferToThread: avg 320.22 us, sync: avg 1.39 us, 230.37x increase
deferToThread: avg 317.33 us, sync: avg 1.35 us, 235.24x increase

# python /tmp/deft.py 8
deferToThread: avg 2542.90 us, sync: avg 1.37 us, 1854.14x increase
deferToThread: avg 2544.50 us, sync: avg 1.35 us, 1878.13x increase
deferToThread: avg 2544.47 us, sync: avg 1.36 us, 1864.52x increase
deferToThread: avg 2544.52 us, sync: avg 1.38 us, 1839.01x increase
deferToThread: avg 2544.92 us, sync: avg 1.36 us, 1871.81x increase
deferToThread: avg 2546.71 us, sync: avg 1.39 us, 1830.35x increase
deferToThread: avg 2552.38 us, sync: avg 1.35 us, 1893.17x increase
deferToThread: avg 2552.40 us, sync: avg 1.36 us, 1870.20x increase

# python /tmp/deft.py 16
deferToThread: avg 4745.76 us, sync: avg 1.26 us, 3770.11x increase
deferToThread: avg 4748.67 us, sync: avg 1.24 us, 3817.03x increase
deferToThread: avg 4749.81 us, sync: avg 1.26 us, 3756.39x increase
deferToThread: avg 4749.72 us, sync: avg 1.24 us, 3839.88x increase
deferToThread: avg 4749.87 us, sync: avg 1.28 us, 3709.99x increase
deferToThread: avg 4752.63 us, sync: avg 1.24 us, 3842.90x increase
deferToThread: avg 4752.53 us, sync: avg 1.23 us, 3866.08x increase
deferToThread: avg 4752.55 us, sync: avg 1.23 us, 3855.40x increase
deferToThread: avg 4754.03 us, sync: avg 1.29 us, 3678.09x increase
deferToThread: avg 4754.97 us, sync: avg 1.25 us, 3817.19x increase
deferToThread: avg 4755.45 us, sync: avg 1.32 us, 3593.28x increase
deferToThread: avg 4756.35 us, sync: avg 1.25 us, 3804.18x increase
deferToThread: avg 4756.19 us, sync: avg 1.29 us, 3687.73x increase
deferToThread: avg 4757.19 us, sync: avg 1.23 us, 3860.74x increase
deferToThread: avg 4758.02 us, sync: avg 1.24 us, 3824.33x increase
deferToThread: avg 4759.63 us, sync: avg 1.24 us, 3830.40x increase

On 16 threads it takes nearly 5 ms(!) to call a local function...

The test program is here:
https://gist.github.com/bra-fsn/1fd481b44590a939e849cb9073ba1a41

cpython 2.7.11, Twisted 16.2.0

BTW, I've run this on pypy 5.1.1 with even worse results:
https://mail.python.org/pipermail/pypy-dev/2016-June/014477.html



From glyph at twistedmatrix.com  Fri Jun  3 02:24:55 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 3 Jun 2016 01:24:55 -0700
Subject: [Twisted-Python] Why deferToThread is so slow?
In-Reply-To: <57513A93.2030000@fsn.hu>
References: <57513A93.2030000@fsn.hu>
Message-ID: <6C723C6F-26B4-49D6-89D2-67E9D985B8B3@twistedmatrix.com>


> On Jun 3, 2016, at 01:06, Nagy, Attila <bra at fsn.hu> wrote:
> 
> Hi,
> 
> I have a thread safe synchronous library, which I would like to use in a threadpool using deferToThread.
> 
> Without using (deferTo)threads I get consistent 1-3 ms response times, with deferring to threadpool, I get 30-300, varying wildly.

Why do you think this is bad performance?

With a direct call, you are doing almost nothing.  Just pushing a stack frame.

With a deferToThread call, you are:

acquiring the GIL,
pushing a message into a call queue,
releasing the GIL,
waiting for the worker thread to wake up,
acquiring the GIL,
pulling the work off the queue,
invoking the work in the worker thread,
storing the response on a return queue,
writing a byte into a pipe to wake up the reactor thread,
releasing the GIL,
waiting for the reactor thread to wake up,
acquiring the GIL,
reading the byte from the pipe,
pulling the response work off the queue,
executing it,
then invoking a Deferred's callback chain.

Each of these steps involves a couple of function calls each, and if each takes 3ms like your simple no-op call, you're looking at 48ms just for starters, not taking into account the fact that when you start tossing things into pipes and mutexes the kernel's scheduler gets involved and may (as you noticed) introduce large amounts of non-determinism as other processes and threads run.

While I would certainly like to see this get faster, and I think it probably could be optimized somewhat, it's not reasonable to expect that a single function call could be competitive with this sort of algorithm, when it's made up of so many function calls of its own.

I could definitely be convinced that this is unreasonably slow but it does not seem so from a first reading.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160603/52b65832/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Jun  3 03:35:06 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 3 Jun 2016 02:35:06 -0700
Subject: [Twisted-Python] buildbots: normal service will resume shortly
In-Reply-To: <9953D523-8B1B-44E8-AADB-C408DD3A56C0@twistedmatrix.com>
References: <B2F5DE9E-6AB8-4565-829E-9F9C8E8EC181@twistedmatrix.com>
 <9953D523-8B1B-44E8-AADB-C408DD3A56C0@twistedmatrix.com>
Message-ID: <0A774029-C99D-4EB0-8E1A-11B919996EE8@twistedmatrix.com>


> On Jun 3, 2016, at 00:49, Glyph <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Jun 3, 2016, at 00:39, Glyph <glyph at twistedmatrix.com> wrote:
>> 
>> We had a minor hiccup earlier today due partially to a new Cryptography release (the Windows builders, which started spuriously failing builds) and some random networking issues (the OS X builders, which went offline).  I believe I've gotten them back online and performing to spec and they should chew through their respective backlogs shortly.
> 
> Oops!  The _actual_ bug on Windows appears to be a regression in virtualenv, which I have filed here - https://github.com/pypa/virtualenv/issues/929 - which I've now downgraded to 15.0.1 to work around it for now.

Aaaaand downgrading it caused cryptography installations to fail again, which I take it was due to the older 'pip', hence the reason for the upgrade in the first place.

I've tried to put a workaround into braid and updated the buildmaster; hopefully it will be working again now.

-glyph




From bra at fsn.hu  Fri Jun  3 05:27:21 2016
From: bra at fsn.hu (Nagy, Attila)
Date: Fri, 3 Jun 2016 13:27:21 +0200
Subject: [Twisted-Python] Why deferToThread is so slow?
In-Reply-To: <6C723C6F-26B4-49D6-89D2-67E9D985B8B3@twistedmatrix.com>
References: <57513A93.2030000@fsn.hu>
 <6C723C6F-26B4-49D6-89D2-67E9D985B8B3@twistedmatrix.com>
Message-ID: <57516999.9060009@fsn.hu>

On 06/03/16 10:24, Glyph wrote:
>
>> On Jun 3, 2016, at 01:06, Nagy, Attila <bra at fsn.hu 
>> <mailto:bra at fsn.hu>> wrote:
>>
>> Hi,
>>
>> I have a thread safe synchronous library, which I would like to use 
>> in a threadpool using deferToThread.
>>
>> Without using (deferTo)threads I get consistent 1-3 ms response 
>> times, with deferring to threadpool, I get 30-300, varying wildly.
>
> Why do you think this is bad performance?
>
> With a direct call, you are doing almost nothing.  Just pushing a 
> stack frame.
>
> With a deferToThread call, you are:
[...]

Sure, this is not the perfect example, I just wanted to measure the 
plain latency which this solution gives.
The whole picture is this:
I have an application which runs in uwsgi in multithreaded mode. It uses 
(the blocking)elasticsearch client.
That app can serve queries with some tens of concurrent requests in 
around 3 ms.

For some reasons I would like to rewrite this app in Twisted. If I use 
the txes2 lib (which is nonblocking), I can achieve around the same 
performance (although it varies a lot more). This is async, no threads 
are involved.

My problem is that this library lacks several features, so I would like 
to use the blocking one, which needs to run in threads.
When I do the requests in threads (with deferToThread, or just 
callInThread the whole handler) the response time is around 10-20 times 
more than uwsgi's threaded and blocking and Twisted's async and becomes 
highly unpredictable.

I haven't looked into the details of Twisted's threadpools, but what I 
would expect here is the same as using a simple python threadpool (like 
something uwsgi does, or just in the standard libraries), which 
according to the results work much faster and predictable than Twisted's.

BTW, I use queues in non-twisted programs and they are nowhere to cause 
several milliseconds(!) of latency.

OK, here's a more realistic example:
https://gist.github.com/bra-fsn/08734197601e5a63d6a2b56d7b048119

This does what is described above: calls an ES query in a Twisted 
threadpool and calls it directly in the thread the whole loop runs.

With one thread the overhead is somewhat acceptable:
deferToThread: avg 2051.00 us, sync: avg 1554.70 us, 1.32x increase
The direct call responds in 1.5 ms, while the deferToThread returns in 2ms.

Things get worse with the concurrency.
With 16 threads the response time is 18 times of the direct call (51 ms 
vs 2.8 ms!):
deferToThread: avg 51515.36 us, sync: avg 2798.19 us, 18.41x increase

With 32 threads:
deferToThread: avg 108222.73 us, sync: avg 2922.28 us, 37.03x increase

I use normal (stdlib) threadpools and I haven't seen this kind of 
performance degradation.

100 ms is a lot of time...
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160603/18ea4fd2/attachment-0002.html>

From markrwilliams at gmail.com  Fri Jun  3 16:22:57 2016
From: markrwilliams at gmail.com (Mark Williams)
Date: Fri, 3 Jun 2016 15:22:57 -0700
Subject: [Twisted-Python] Why deferToThread is so slow?
In-Reply-To: <57513A93.2030000@fsn.hu>
References: <57513A93.2030000@fsn.hu>
Message-ID: <20160603222256.GA21373@hammal>

On Fri, Jun 03, 2016 at 10:06:43AM +0200, Nagy, Attila wrote:
> Hi,
>
> I have a thread safe synchronous library, which I would like to use
> in a threadpool using deferToThread.
>
> Without using (deferTo)threads I get consistent 1-3 ms response
> times, with deferring to threadpool, I get 30-300, varying wildly.
> [snip...]
> # python /tmp/deft.py 1
> deferToThread: avg 316.17 us, sync: avg 1.38 us, 228.71x increase
> ...
> # python /tmp/deft.py 8
> deferToThread: avg 2542.90 us, sync: avg 1.37 us, 1854.14x increase
> ...
> # python /tmp/deft.py 16
> deferToThread: avg 4745.76 us, sync: avg 1.26 us, 3770.11x increase
>  ...
> On 16 threads it takes nearly 5 ms(!) to call a local function...
>
> The test program is here:
> https://gist.github.com/bra-fsn/1fd481b44590a939e849cb9073ba1a41

There's a lot going on here!  I'm going to break my responses down into three
categories:

1) those about the way your test program is written;
2) those about Queue-based thread pools.
3) those about threads in Python;


1) The way your test program is written.

There are two puzzling lines in your test program.

The first is the use of reactor.callWhenRunning(dtt):
https://gist.github.com/bra-fsn/1fd481b44590a939e849cb9073ba1a41#file-defert-py-L22

I'm guessing the goal here was to call dtt over and over again
infinitely?  Why not replace this with a while True: loop?  The
reactor won't begin scheduling threads until it's begun running, so
you could rely on the yield blocking the coroutine until the reactor's
started.  I'll use a while True: loop in my version of your test program.

...the second, and more interesting line:
https://gist.github.com/bra-fsn/1fd481b44590a939e849cb9073ba1a41#file-defert-py-L26

Why run this code in a separate thread?  Besides the fact that doing
so requires you to write thread-safe code (which is hard!), this also
means your dtt function will compete with deferToThread for access to
the reactor's thread pool.

In general, if you're writing performance-sensitive code, you should
not use deferToThread.  Instead, you should use deferToThreadPool:

https://twistedmatrix.com/documents/current/api/twisted.internet.threads.html#deferToThreadPool

That's because the reactor's threadpool, which deferToThread uses,
also handles things like DNS lookups.  That means other parts of your
Twisted program will compete with your performance-sensitive code.  To
ensure that your performance-sensitive code gets the best chance to
run it should be given its own thread pool, which *only* runs that
code.  I'll use such a thread pool in my version of your test program.


2) The way Queue-based thread pools work.

There's another source of scheduling contention in your program.
sys.argv[1] does *not* increase the number of threads -- instead, it
increases the *demand* on threads.  The number of threads will be no
more than 64, per:

https://gist.github.com/bra-fsn/1fd481b44590a939e849cb9073ba1a41#file-defert-py-L24

With a value 16 threads, you'll have 16 * 10000 scheduled function calls
that can only run across 64 threads.

To make this behavior clear, consider this minimal implementation of a
Queue-based thread pool:

https://gist.github.com/markrwilliams/2e40ed0fa06a9e653609dd61fd80ca95#file-simple_threadpool-py

Note that each testRun needs its own thread, so that waiting for a
result doesn't prevent more function calls from being scheduled.  This
isn't necessary with Twisted because deferToThread(Pool) because
that's exactly what Deferreds are for!

Also note that this implementation cheats -- results of a function
call f(1) aren't routed back to the place where they were requested.
Twisted's thread pool does in fact do this.

With those caveats, let's try this with just 1 * 10000 scheduled
function calls across 64 threads:

$ python /tmp/tp.py 1
threadpool: avg 46.067005 us, sync: avg 0.416845 us, 110.51x increase

We see a pretty significant difference between a simple synchronous
function call and dispatching to a thread via a Queue and obtaining
its result.

What happens if we bump things up to 16 * 10000?

$ python simple_threadpool.py 16
threadpool: avg 667.252771 us, sync: avg 1.551497 us, 430.07x increase
threadpool: avg 668.004651 us, sync: avg 1.498873 us, 445.67x increase
threadpool: avg 667.386251 us, sync: avg 1.686789 us, 395.65x increase
threadpool: avg 668.936246 us, sync: avg 1.448275 us, 461.88x increase
threadpool: avg 666.702565 us, sync: avg 1.459888 us, 456.68x increase
threadpool: avg 669.740488 us, sync: avg 1.620622 us, 413.26x increase
threadpool: avg 666.529074 us, sync: avg 1.657008 us, 402.25x increase
threadpool: avg 666.151787 us, sync: avg 1.583210 us, 420.76x increase
threadpool: avg 666.713700 us, sync: avg 1.509841 us, 441.58x increase
threadpool: avg 666.670518 us, sync: avg 1.533161 us, 434.83x increase
threadpool: avg 666.880252 us, sync: avg 1.536666 us, 433.98x increase
threadpool: avg 666.819521 us, sync: avg 1.507123 us, 442.45x increase
threadpool: avg 664.132656 us, sync: avg 1.624818 us, 408.74x increase
threadpool: avg 667.016451 us, sync: avg 1.490790 us, 447.42x increase
threadpool: avg 668.779542 us, sync: avg 1.488286 us, 449.36x increase
threadpool: avg 667.080139 us, sync: avg 1.524386 us, 437.61x increase

Not only did the the difference between the two increase, it also took
longer to run our synchronus function in a given thread!  The
difference between the synchronous and threadpool based calls is due
to the fact that as the amount of work increases, the number of
workers to do it doesn't.  That means the queue keeps getting longer
and longer.


3) The way threads work in Python.

As for our synchronous function, remember that it's running in its own
thread; that means it's very likely that it took longer to run because
of contention for the GIL.

So two things to remember about using thread pools in Python:

a) Increasing the amount of work without increasing the number of
workers always makes latency worse.  This is true of queues and
threads in any environment.

b) The GIL *will* become a bottleneck with larges amounts of work and
an increasing number of threads.  That means you can't just keep
adding threads to address the workload problem described in a).

Now, let's take what we've learned and apply it to a different version
of your test program.
>
> BTW, I've run this on pypy 5.1.1 with even worse results:
> https://mail.python.org/pipermail/pypy-dev/2016-June/014477.html
>
...that also has an affordance to not use inlineCallbacks, as these
likely interfere with PyPy's JIT:
https://twistedmatrix.com/trac/ticket/6278

Here's the program:

https://gist.github.com/markrwilliams/2e40ed0fa06a9e653609dd61fd80ca95#file-twisted_threadpool-py

Let's try it with 1 * 10000 scheduled functions:

$ python twisted_threadpool.py 1
deferToThread: avg 121.014680 us, sync: avg 0.463771 us, 260.94x increase
deferToThread: avg 130.383369 us, sync: avg 0.475454 us, 274.23x increase
deferToThread: avg 125.587505 us, sync: avg 0.466942 us, 268.96x increase
deferToThread: avg 124.141280 us, sync: avg 0.469970 us, 264.15x increase
deferToThread: avg 135.672952 us, sync: avg 0.505450 us, 268.42x increase
deferToThread: avg 130.711776 us, sync: avg 0.483895 us, 270.12x increase
deferToThread: avg 118.456074 us, sync: avg 0.438543 us, 270.11x increase
deferToThread: avg 137.559747 us, sync: avg 0.504330 us, 272.76x increase
deferToThread: avg 121.825337 us, sync: avg 0.459836 us, 264.93x increase
deferToThread: avg 141.214092 us, sync: avg 0.539142 us, 261.92x increase
...

So Twisted's thread pool is about twice as slow as our toy one.  Not too bad!

With 16 * 10000 scheduled functions:

deferToThread: avg 1691.969863 us, sync: avg 0.444171 us, 3809.28x increase
deferToThread: avg 1693.141545 us, sync: avg 0.434609 us, 3895.78x increase
deferToThread: avg 1693.619694 us, sync: avg 0.443431 us, 3819.35x increase
deferToThread: avg 1693.614949 us, sync: avg 0.439235 us, 3855.83x increase
deferToThread: avg 1694.422696 us, sync: avg 0.435658 us, 3889.34x increase
deferToThread: avg 1694.554698 us, sync: avg 0.431748 us, 3924.87x increase
deferToThread: avg 1694.615262 us, sync: avg 0.430913 us, 3932.61x increase
deferToThread: avg 1694.747073 us, sync: avg 0.428314 us, 3956.79x increase
deferToThread: avg 1694.701245 us, sync: avg 0.427885 us, 3960.65x increase
deferToThread: avg 1695.052327 us, sync: avg 0.419444 us, 4041.19x increase
deferToThread: avg 1695.149564 us, sync: avg 0.432749 us, 3917.16x increase
deferToThread: avg 1695.340127 us, sync: avg 0.432845 us, 3916.74x increase
deferToThread: avg 1695.489345 us, sync: avg 0.433822 us, 3908.26x increase
deferToThread: avg 1695.886709 us, sync: avg 0.436207 us, 3887.81x increase
deferToThread: avg 1696.334289 us, sync: avg 0.438710 us, 3866.64x increase
deferToThread: avg 1696.634512 us, sync: avg 0.434704 us, 3902.96x increase

Our synchronous function hasn't gotten worse because there are fewer
threads at play (thanks, Twisted!), and the difference between the two
has gone up by about 16x (3809.28 / 16 = 238.08 -- and we were seeing
~260x)

For fun, here are the PyPy results for the code that *doesn't* use
inlineCallbacks:

$ pypy twisted_threadpool.py 1 deferred
deferToThread: avg 248.463297 us, sync: avg 0.979066 us, 253.78x increase
deferToThread: avg 89.544964 us, sync: avg 0.260448 us, 343.81x increase
deferToThread: avg 63.347292 us, sync: avg 0.204158 us, 310.29x increase
deferToThread: avg 63.825631 us, sync: avg 0.205946 us, 309.91x increase
deferToThread: avg 55.110717 us, sync: avg 0.193667 us, 284.56x increase
deferToThread: avg 51.918244 us, sync: avg 0.212955 us, 243.80x increase
...
deferToThread: avg 62.353158 us, sync: avg 0.239372 us, 260.49x increase
deferToThread: avg 40.433884 us, sync: avg 0.148630 us, 272.04x increase
deferToThread: avg 65.630174 us, sync: avg 0.165820 us, 395.79x increase
deferToThread: avg 85.674763 us, sync: avg 0.259972 us, 329.55x increase
deferToThread: avg 65.085721 us, sync: avg 0.198150 us, 328.47x increase
deferToThread: avg 44.353342 us, sync: avg 0.153947 us, 288.11x increase
...

Looks like PyPy is doing a pretty good job!

(I won't show it here, but there's a comment in that gist that
contains links to vmprof PyPy runs for both the inlineCallback and
inlineCallback-free versions.  Looks like inlineCallbacks *does* get
optimized pretty well...)

Thins to consider:

1) Use your own thread pool - see the gist I wrote for how to do that.

2) The behavior you were observing was due to increasing the amount of
work but not the workers to do it, and occurs with any thread pool
implementation.

3) PyPy can be really fast!

Hope this helps.  Let me know if anything's unclear!

Best,

Mark



From dynamicgl at gmail.com  Fri Jun  3 20:10:36 2016
From: dynamicgl at gmail.com (Gelin Yan)
Date: Sat, 4 Jun 2016 10:10:36 +0800
Subject: [Twisted-Python] Why deferToThread is so slow?
In-Reply-To: <20160603222256.GA21373@hammal>
References: <57513A93.2030000@fsn.hu> <20160603222256.GA21373@hammal>
Message-ID: <CABkOF6TV52QrORwxbz_N9jsORG=Tz7EVFQh0RR5o6H3UT6ONNg@mail.gmail.com>

>
>
>
> In general, if you're writing performance-sensitive code, you should
> not use deferToThread.  Instead, you should use deferToThreadPool:
>
>
> https://twistedmatrix.com/documents/current/api/twisted.internet.threads.html#deferToThreadPool
>
> That's because the reactor's threadpool, which deferToThread uses,
> also handles things like DNS lookups.  That means other parts of your
> Twisted program will compete with your performance-sensitive code.  To
> ensure that your performance-sensitive code gets the best chance to
> run it should be given its own thread pool, which *only* runs that
> code.  I'll use such a thread pool in my version of your test program.
>
>
>
>
> https://gist.github.com/markrwilliams/2e40ed0fa06a9e653609dd61fd80ca95#file-simple_threadpool-py
>
>
>
>
Hi Mark

     You mentioned deferToThreadPool. I am curious whether the standard
threadpool in multipleprocessing.dummy works with twisted.

Regards

gelin yan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160604/75ec2dce/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Jun  3 20:55:02 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 3 Jun 2016 19:55:02 -0700
Subject: [Twisted-Python] Why deferToThread is so slow?
In-Reply-To: <CABkOF6TV52QrORwxbz_N9jsORG=Tz7EVFQh0RR5o6H3UT6ONNg@mail.gmail.com>
References: <57513A93.2030000@fsn.hu> <20160603222256.GA21373@hammal>
 <CABkOF6TV52QrORwxbz_N9jsORG=Tz7EVFQh0RR5o6H3UT6ONNg@mail.gmail.com>
Message-ID: <3B6A53BD-6C8C-422E-8A95-1C18F001A256@twistedmatrix.com>


> On Jun 3, 2016, at 19:10, Gelin Yan <dynamicgl at gmail.com> wrote:

> 
> Hi Mark
> 
>      You mentioned deferToThreadPool. I am curious whether the standard threadpool in multipleprocessing.dummy works with twisted.

deferToThreadPool uses a Twisted threadpool interface, not a stdlib one.

-glyph


From rodrigc at crodrigues.org  Sat Jun  4 05:41:37 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 4 Jun 2016 04:41:37 -0700
Subject: [Twisted-Python] Need clarification on reviews for Python 3
 fixes for Twisted
In-Reply-To: <2474609.Rc1Be5hivi@i5>
References: <CAG=rPVdkNbLiOSS3BNmx5FVbLus8JAcZkepCXMjhMmrXdvKt4A@mail.gmail.com>
 <475c31e5-ae8c-e42b-f20f-467683e231c0@itamarst.org> <2474609.Rc1Be5hivi@i5>
Message-ID: <CAG=rPVcxiTdXymzEtEFjrRKi-Ejq6B6cVCud707wRVa2Sjhy8A@mail.gmail.com>

On Fri, May 27, 2016 at 6:14 AM, Wolfgang Rohdewald <
wolfgang.kde at rohdewald.de> wrote:

> Am Freitag, 27. Mai 2016, 08:13:10 schrieb Itamar Turner-Trauring:
>
> This would have been helpful when I tried to port PB to python3.
> Instead, that port is now bitrotting.
>

Can you point me to your attempt to port PB to python3?
Glyph and cyli have been merging a lot of my simple python3 fixes,
so now I am motivated to do more. :)

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160604/901e6424/attachment-0002.html>

From wolfgang.kde at rohdewald.de  Sat Jun  4 06:36:24 2016
From: wolfgang.kde at rohdewald.de (Wolfgang Rohdewald)
Date: Sat, 04 Jun 2016 14:36:24 +0200
Subject: [Twisted-Python] Need clarification on reviews for Python 3
	fixes for Twisted
In-Reply-To: <CAG=rPVcxiTdXymzEtEFjrRKi-Ejq6B6cVCud707wRVa2Sjhy8A@mail.gmail.com>
References: <CAG=rPVdkNbLiOSS3BNmx5FVbLus8JAcZkepCXMjhMmrXdvKt4A@mail.gmail.com>
 <2474609.Rc1Be5hivi@i5>
 <CAG=rPVcxiTdXymzEtEFjrRKi-Ejq6B6cVCud707wRVa2Sjhy8A@mail.gmail.com>
Message-ID: <1926291.9cLF1DGSPq@i5>

Am Samstag, 4. Juni 2016, 04:41:37 schrieb Craig Rodrigues:
> On Fri, May 27, 2016 at 6:14 AM, Wolfgang Rohdewald <
> wolfgang.kde at rohdewald.de> wrote:
> 
> > Am Freitag, 27. Mai 2016, 08:13:10 schrieb Itamar Turner-Trauring:
> >
> > This would have been helpful when I tried to port PB to python3.
> > Instead, that port is now bitrotting.
> >
> 
> Can you point me to your attempt to port PB to python3?
> Glyph and cyli have been merging a lot of my simple python3 fixes,
> so now I am motivated to do more. :)
> 
> --
> Craig

You are welcome: https://github.com/wrohdewald/twisted/commits/spread-py3-7598/twisted

-- 
Wolfgang



From rodrigc at crodrigues.org  Sun Jun  5 09:15:06 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sun, 5 Jun 2016 08:15:06 -0700
Subject: [Twisted-Python] Need clarification on reviews for Python 3
 fixes for Twisted
In-Reply-To: <475c31e5-ae8c-e42b-f20f-467683e231c0@itamarst.org>
References: <CAG=rPVdkNbLiOSS3BNmx5FVbLus8JAcZkepCXMjhMmrXdvKt4A@mail.gmail.com>
 <475c31e5-ae8c-e42b-f20f-467683e231c0@itamarst.org>
Message-ID: <CAG=rPVdhvUOKXNEw-FP9c0LDZmEVtPrw-X1FtYnk9cidmRmQHw@mail.gmail.com>

On Fri, May 27, 2016 at 5:13 AM, Itamar Turner-Trauring <itamar at itamarst.org
> wrote:

On 05/27/2016 04:19 AM, Craig Rodrigues wrote:
>
> I think they're fine to accept insofar as:
>
> 1. There is strong ongoing momentum for the port now, so these changes
> makes porting module-by-module easier and won't just bitrot.
> 2. They're doing one particular incompatibility at a time, rather than
> "here's an assortment of random changes to a module that may or may not
> port that module fully, who knows."
>
> I don't think they are sufficient to port a module (someone needs to read
> the code and think a bit, usually), but they will make it easier to do so,
> so they definitely are worth continuing.
>
>
Thanks!  You have summarized exactly the strategy I have been using when
submitting these patches.
At Pycon, Glyph and cyli managed to review and merge a number of my patches.

Do you have any bandwidth to review some of the print -> print() changes I
did?  They are here:

http://bit.ly/24r2fuJ

Thanks.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160605/1d808bb3/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Jun  6 01:36:56 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 6 Jun 2016 00:36:56 -0700
Subject: [Twisted-Python] Need clarification on reviews for Python 3
	fixes for Twisted
In-Reply-To: <CAG=rPVdhvUOKXNEw-FP9c0LDZmEVtPrw-X1FtYnk9cidmRmQHw@mail.gmail.com>
References: <CAG=rPVdkNbLiOSS3BNmx5FVbLus8JAcZkepCXMjhMmrXdvKt4A@mail.gmail.com>
 <475c31e5-ae8c-e42b-f20f-467683e231c0@itamarst.org>
 <CAG=rPVdhvUOKXNEw-FP9c0LDZmEVtPrw-X1FtYnk9cidmRmQHw@mail.gmail.com>
Message-ID: <6017CABE-55A5-4724-9764-0C273785F1DF@twistedmatrix.com>


> On Jun 5, 2016, at 8:15 AM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> At Pycon, Glyph and cyli managed to review and merge a number of my patches.

I would like to point out that at the sprints, I was nearly continuously engaged in conversation, so I should be able to review many more now that PyCon is done :).  Thanks again for submitting all of these.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160606/01019e91/attachment-0002.html>

From p.mayers at imperial.ac.uk  Mon Jun  6 05:21:12 2016
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 6 Jun 2016 12:21:12 +0100
Subject: [Twisted-Python] Style/testing for log-related changes
Message-ID: <57555CA8.40404@imperial.ac.uk>

All,

I'd like to submit a patch to convert t.conch.ssh to the new logging. 
The main reason is that the conch code logs a *lot* of really, really, 
really boring crap that I want to throw away because it just clutters up 
the logs e.g.

https://github.com/twisted/twisted/blob/twisted-16.2.0/twisted/conch/ssh/connection.py#L454

Moving it to the new logging would, at very least, let me trivially 
write an observer which throws away these by module.

Does anyone have an example ticket/commit for a conversion to the new 
logging showing the general style, and the technique used for writing 
tests for that?

Cheers,
Phil



From glyph at twistedmatrix.com  Mon Jun  6 14:40:04 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 6 Jun 2016 13:40:04 -0700
Subject: [Twisted-Python] Style/testing for log-related changes
In-Reply-To: <57555CA8.40404@imperial.ac.uk>
References: <57555CA8.40404@imperial.ac.uk>
Message-ID: <50BD783F-5296-40A3-B2A5-8A7F1F226D1B@twistedmatrix.com>


> On Jun 6, 2016, at 04:21, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> 
> All,
> 
> I'd like to submit a patch to convert t.conch.ssh to the new logging. The main reason is that the conch code logs a *lot* of really, really, really boring crap that I want to throw away because it just clutters up the logs e.g.
> 
> https://github.com/twisted/twisted/blob/twisted-16.2.0/twisted/conch/ssh/connection.py#L454

No need to justify it - any work to move us internally to new APIs so we can finally get to the business of deprecating the old ones would be great!

> Moving it to the new logging would, at very least, let me trivially write an observer which throws away these by module.

No need to write one!  This is an explicit use-case for new logging: see https://twistedmatrix.com/documents/16.2.0/api/twisted.logger.LogLevelFilterPredicate.html and https://twistedmatrix.com/documents/16.2.0/api/twisted.logger.FilteringLogObserver.html

(You may also be interested in figuring out a solution to https://twistedmatrix.com/trac/ticket/7969 )

> Does anyone have an example ticket/commit for a conversion to the new logging showing the general style, and the technique used for writing tests for that?

twistd itself was converted over - https://twistedmatrix.com/trac/ticket/8235 - but of course that's mostly from the consumer side rather than emitting logs.  It shouldn't be too complex, honestly; just get rid of all manual string formatting, and convert any %()s format strings to {}.  The testing support is the same as for the old logging system (add a global observer, remove it in an addCleanup, assert about the things it caught) because it's still just key-value pairs, they're just better-defined now.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160606/718dfdd9/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Jun  6 15:38:55 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 6 Jun 2016 14:38:55 -0700
Subject: [Twisted-Python] buildbot is back
Message-ID: <05D63E8A-4FCB-498F-9F87-FF6B47DD5F16@twistedmatrix.com>

When migrating it to a new VM, we seem to have somewhat underprovisioned buildbot.twistedmatrix.com.  I've just moved it from a 1G to a 2G instance.  Sorry about the downtime!  Hopefully this is enough RAM for it to do its job.  It seemed to happily consume only a few hundred megs when we were doing test builds, but there's some kind of load spike that happens periodically which was OOM killing it and I believe this change should fix it.

-glyph


From commercials24 at yahoo.de  Tue Jun  7 04:50:57 2016
From: commercials24 at yahoo.de (steven meier)
Date: Tue, 07 Jun 2016 12:50:57 +0200
Subject: [Twisted-Python] inlinecallbacks, unhandled error....where?
Message-ID: <1465296657.5264.12.camel@yahoo.de>

hi,


ive got these two functions:
@inlineCallbacks
def getUserList():
    reload_interval = yield getReloadInterval()
    print "222", reload_interval
    
    target_url = host + "/?ReloaderUserOnline"

    body = urllib.urlencode({"reloadsequenz":reload_interval})
    #body = '\r\n'
    #headers = {'Content-Type': 'application/x-www-form-urlencoded'}

    d = getPage(url = target_url, cookies=cookies, agent=useragent,
        postdata=body,
        method = 'POST',
        headers=headers)

    defer.returnValue(d)



i can see the output:
222 somenumber, so apparently getReloadInterval works. it returns some
magic number as expected



now i call getUserList from this function:
(response is 1, so d = getUserList gets evaluated)
but there i get:

222 5821
Unhandled error in Deferred (short version, complete error at the end)


Traceback (most recent call last):
  File
"/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py", line 1184, in gotResult


def printLoginResult(response):
    #we are in, login accepted
    if response == ' 1':
        print "we are in, get user list"
        #printChat(response)
        
        def printResult(result):
            print repr(result)
        d = getUserList()
        d.addCallback(printResult)
        d.addErrback(printResult)
      
        


why is printResult not run?







Unhandled error in Deferred:


Traceback (most recent call last):
  File
"/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py", line 1184, in gotResult
    _inlineCallbacks(r, g, deferred)
  File
"/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py", line 1171, in _inlineCallbacks
    deferred.callback(e.value)
  File
"/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py", line 393, in callback
    self._startRunCallbacks(result)
  File
"/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py", line 501, in _startRunCallbacks
    self._runCallbacks()
--- <exception caught here> ---
  File
"/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py", line 588, in _runCallbacks
    current.result = callback(current.result, *args, **kw)
  File
"/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py", line 1184, in gotResult
    _inlineCallbacks(r, g, deferred)
  File
"/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py", line 1171, in _inlineCallbacks
    deferred.callback(e.value)
  File
"/home/julius/.local/lib/python2.7/site-packages/twisted/internet/defer.py", line 392, in callback
    assert not isinstance(result, Deferred)
exceptions.AssertionError: 





From rodrigc at crodrigues.org  Tue Jun  7 16:39:52 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 7 Jun 2016 15:39:52 -0700
Subject: [Twisted-Python] Travis-CI integration work
In-Reply-To: <CAHZAEpdoMyRZ0a=8sCHsngwGvdGy+x31rTZFu+tyce8L942rTQ@mail.gmail.com>
References: <CAFycZ9cWJQsgzzptpNMZSON0eSKKjZ-UL8Av8n=8g32SbJ8Ovw@mail.gmail.com>
 <CAHZAEpdoMyRZ0a=8sCHsngwGvdGy+x31rTZFu+tyce8L942rTQ@mail.gmail.com>
Message-ID: <CAG=rPVe7T3PLB+HgUO9Uc+diFkR7ui_N3V=BX=QtBtU9mOXXFQ@mail.gmail.com>

Travis-CI integration for Twisted has reached a milestone!
Travis has been set up and is currently in use for Twisted.

For pull requests submitted against Twisted:

https://github.com/twisted/twisted/pulls

the Travis service will build it, and report status in the pull request
itself.
The build status of pull requests is also available on the Travis site:

https://travis-ci.org/twisted/twisted/pull_requests

This is how it works:

   - The *.travis.yml* file checked into the Twisted source tree gives the
   Travis service the commands that should be executed.
   - In .travis.yml, we make use of *tox-travis* (
   https://pypi.python.org/pypi/tox-travis ).
   - tox-travis looks tells Travis to execute tox, using the *[tox:travis]*
   section in the *tox.ini* file checked into the Twisted source tree.
   This is how Travis executes the Twisted tests


Thanks to Adi for taking my initial patch for this, finishing it off, and
doing the initial Travis setup.
Thanks to cyli for doing the final review of the patch and for committing
it to trunk.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160607/d7405fb5/attachment-0002.html>

From rodrigc at crodrigues.org  Fri Jun 10 03:57:19 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 10 Jun 2016 02:57:19 -0700
Subject: [Twisted-Python] Using zope
Message-ID: <CAG=rPVdLL+s3qJrXv1nc=2fm-KaX9xQ16BfF_CPSkYHLvKMy2A@mail.gmail.com>

Hi,

There are some places in the Twisted code which use zope.interface to do
things like:


class MyClass:
    inherits(IMyInterface)


That works in Python 2, but the zope.interface library has code to hard
fail that
line on Python 3.  The supported way of doing the same thing on Python 2
and 3 is:


@implementer(IMyInterface)
class MyClass

This was discussed on the mailing list before by Barry Warsaw:
https://twistedmatrix.com/pipermail/twisted-python/2013-January/026414.html

I have submitted several patches for review (Trac ticket is in each one):

http://bit.ly/1YhxKI2

For anyone who can help review the patches, the help would be appreciated.
:)

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160610/b42b3b07/attachment-0002.html>

From rodrigc at crodrigues.org  Fri Jun 10 13:39:20 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 10 Jun 2016 12:39:20 -0700
Subject: [Twisted-Python] Porting PB to python3
Message-ID: <CAG=rPVe=wvNZoczU621nWFMj7wXpG5SPNxKuNs6aKU9Rgz=cNA@mail.gmail.com>

Hi,

I reviewed your branch:
https://github.com/wrohdewald/twisted/commits/spread-py3-7598/twisted

In my opinion, that branch has two categories of Python 3 porting:

Category 1: Minor
  -> these are "minor" fixos, such as dealing with xrange -> range

Category 2: Major
   -> you have done a lot of work to deal with bytes versus unicode strings

I hope you haven't lost interest in this, and are still willing to push
forward.
I would recommend that if you can separate out the minor fixes
into separate GitHub pull requests and separate Trac tickets, then do that.

If you see: https://github.com/twisted/twisted/commits/trunk

you will see I have submitted a lot of pull requests + trac tickets of
"minor"
Python 3 fixes, and those have successfully been reviewed and merged
by Twisted committers.

Dealing with bytes versus unicode strings will take longer to review,
because it is more advanced.  That is why I recommend separating
out the "minor" fixos if you can.

The other think I would recommend is if you do periodic merges
from trunk to your branch, since a lot of new Python 3 fixes have gone into
trunk in the past few weeks.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160610/fb353a95/attachment-0002.html>

From hawkowl at atleastfornow.net  Fri Jun 10 16:56:46 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sat, 11 Jun 2016 06:56:46 +0800
Subject: [Twisted-Python] Porting PB to python3
In-Reply-To: <CAG=rPVe=wvNZoczU621nWFMj7wXpG5SPNxKuNs6aKU9Rgz=cNA@mail.gmail.com>
References: <CAG=rPVe=wvNZoczU621nWFMj7wXpG5SPNxKuNs6aKU9Rgz=cNA@mail.gmail.com>
Message-ID: <B670F4E1-E48A-4B11-9198-0910D533F465@atleastfornow.net>


> On 11 Jun 2016, at 03:39, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Hi,
> 
> I reviewed your branch:  https://github.com/wrohdewald/twisted/commits/spread-py3-7598/twisted
> 
> In my opinion, that branch has two categories of Python 3 porting:
> 
> Category 1: Minor
>   -> these are "minor" fixos, such as dealing with xrange -> range
> 
> Category 2: Major
>    -> you have done a lot of work to deal with bytes versus unicode strings
> 
> I hope you haven't lost interest in this, and are still willing to push forward.
> I would recommend that if you can separate out the minor fixes
> into separate GitHub pull requests and separate Trac tickets, then do that.
> 
> If you see: https://github.com/twisted/twisted/commits/trunk
> 
> you will see I have submitted a lot of pull requests + trac tickets of "minor"
> Python 3 fixes, and those have successfully been reviewed and merged
> by Twisted committers.
> 
> Dealing with bytes versus unicode strings will take longer to review,
> because it is more advanced.  That is why I recommend separating
> out the "minor" fixos if you can.
> 
> The other think I would recommend is if you do periodic merges
> from trunk to your branch, since a lot of new Python 3 fixes have gone into trunk in the past few weeks.
> 
> --
> Craig
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

I've also taken a hack at this whilst I was on the plane; please see https://github.com/twisted/twisted/compare/trunk...port-pb-7598 which has some minorly different approaches to porting than your branch. There is a few fixes to things I hadn't got to, which I'll investigate :)

- Amber

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160611/62451179/attachment.sig>

From hawkowl at atleastfornow.net  Fri Jun 10 22:35:24 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sat, 11 Jun 2016 12:35:24 +0800
Subject: [Twisted-Python] Upcoming Buildbot Changes (Ubuntu version support)
Message-ID: <4C6711AD-E55E-4292-AC86-3519127B0A50@atleastfornow.net>

Hi everyone,

I'm doing some builder work today; including changing the versions of Ubuntu we test on. From next week, our supported Ubuntu platforms will be:

- Ubuntu 12.04 (Python 2.7)
- Ubuntu 14.04 (Python 2.7)
- Ubuntu 16.04 (Python 2.7, Python 3.4, Python 3.5, PyPy (unsupported))

These are all LTS versions right now, and should provide us pretty wide coverage of Ubuntus that are widely used.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160611/86a771dc/attachment.sig>

From glyph at twistedmatrix.com  Sat Jun 11 13:36:29 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 11 Jun 2016 12:36:29 -0700
Subject: [Twisted-Python] Upcoming Buildbot Changes (Ubuntu version
	support)
In-Reply-To: <4C6711AD-E55E-4292-AC86-3519127B0A50@atleastfornow.net>
References: <4C6711AD-E55E-4292-AC86-3519127B0A50@atleastfornow.net>
Message-ID: <37999FF5-58B2-4D89-89F8-502C62D5D5E2@twistedmatrix.com>

> On Jun 10, 2016, at 21:35, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> Hi everyone,
> 
> I'm doing some builder work today; including changing the versions of Ubuntu we test on. From next week, our supported Ubuntu platforms will be:
> 
> - Ubuntu 12.04 (Python 2.7)
> - Ubuntu 14.04 (Python 2.7)
> - Ubuntu 16.04 (Python 2.7, Python 3.4, Python 3.5, PyPy (unsupported))

Cool!  Is this going to let us delete any builders? :)

> These are all LTS versions right now, and should provide us pretty wide coverage of Ubuntus that are widely used.

Thanks for taking on this maintenance.

-g


From hawkowl at atleastfornow.net  Sat Jun 11 23:50:22 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sun, 12 Jun 2016 13:50:22 +0800
Subject: [Twisted-Python] Upcoming Buildbot Changes (Ubuntu version
	support)
In-Reply-To: <37999FF5-58B2-4D89-89F8-502C62D5D5E2@twistedmatrix.com>
References: <4C6711AD-E55E-4292-AC86-3519127B0A50@atleastfornow.net>
 <37999FF5-58B2-4D89-89F8-502C62D5D5E2@twistedmatrix.com>
Message-ID: <F8B9F8E7-D634-44AD-939B-CB68C89C7A1B@atleastfornow.net>


> On 12 Jun 2016, at 03:36, Glyph <glyph at twistedmatrix.com> wrote:
> 
>> On Jun 10, 2016, at 21:35, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
>> 
>> Hi everyone,
>> 
>> I'm doing some builder work today; including changing the versions of Ubuntu we test on. From next week, our supported Ubuntu platforms will be:
>> 
>> - Ubuntu 12.04 (Python 2.7)
>> - Ubuntu 14.04 (Python 2.7)
>> - Ubuntu 16.04 (Python 2.7, Python 3.4, Python 3.5, PyPy (unsupported))

(correction, 16.04 dropped Python 3.4 from the repos, so it will be 2.7, 3.5, PyPy on that platform, with 3.4 being covered by Fedora)

> 
> Cool!  Is this going to let us delete any builders? :)

Yes, all of our 15.04 and 15.10 builders can be removed now, which I'll do shortly.

> 
>> These are all LTS versions right now, and should provide us pretty wide coverage of Ubuntus that are widely used.
> 
> Thanks for taking on this maintenance.

:)

> 
> -g
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160612/34c00a1a/attachment.sig>

From wolfgang.kde at rohdewald.de  Sun Jun 12 11:04:49 2016
From: wolfgang.kde at rohdewald.de (Wolfgang Rohdewald)
Date: Sun, 12 Jun 2016 19:04:49 +0200
Subject: [Twisted-Python] Porting PB to python3
In-Reply-To: <CAG=rPVe=wvNZoczU621nWFMj7wXpG5SPNxKuNs6aKU9Rgz=cNA@mail.gmail.com>
References: <CAG=rPVe=wvNZoczU621nWFMj7wXpG5SPNxKuNs6aKU9Rgz=cNA@mail.gmail.com>
Message-ID: <1568933.RT1ME0EebJ@skull>

Am Freitag, 10. Juni 2016, 12:39:20 CEST schrieb Craig Rodrigues:
> I hope you haven't lost interest in this, and are still willing to push
> forward.

Maybe in autumn. But I rather hope somebody else would continue with this.

--
Wolfgang



From itamar at itamarst.org  Sun Jun 12 14:32:20 2016
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 12 Jun 2016 16:32:20 -0400
Subject: [Twisted-Python] Responding to PRs
Message-ID: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>

Hi all,

Since we're starting to get PRs from random people it's worth trying to 
make the process as friendly as possible.

So, maybe instead of telling new contribtutors "PRs won't be reviewed 
without an issue, see contributor guidelines" it would be better to say 
"Thanks for the PR! I opened an issue for this PR here (tm.tl/12345). In 
the future we'd appreciate it if you could open an issue before 
submitting PRs; see contributor guidelines for details".

If someone went out of their way to provide a fix, we should try to 
minimize any unnecessary stop-energy they encounter along the way, even 
if that means some people won't learn the intricacies of the process.

-Itamar




From rodrigc at crodrigues.org  Sun Jun 12 15:15:37 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sun, 12 Jun 2016 14:15:37 -0700
Subject: [Twisted-Python] Responding to PRs
In-Reply-To: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
References: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
Message-ID: <CAG=rPVcS4KArL+t9ZXUin0iw+hhsyxJ13QKnn5764Fsr1c=ozQ@mail.gmail.com>

Hi,

I support this approach.

I have a few small suggestions.
  (1)  Give the exact link of some reasonable text that you want people to
read. The contributor guidelines are accurate,
        but the text is verbose.  It takes a while to get to the text that
gives you the actual steps to follow.

  (2)  GitHub uses the term "issue", while Trac uses the term "ticket".  If
you tell people to open an "issue" they
        might get confused and try to open a GitHub issue.

*"Thanks for the PR! I opened a ticket for this PR here (tm.tl/12345
<http://tm.tl/12345>). In the future we'd appreciate it if you could open a
ticket before submitting PRs;
see https://twistedmatrix.com/trac/wiki/TwistedDevelopment#SubmittingaPatch
<https://twistedmatrix.com/trac/wiki/TwistedDevelopment#SubmittingaPatch> "*

If the Twisted developers get very efficient at opening Trac tickets on
behalf of patch submitters,
then the incentive for patch submitters to interact with Trac goes down.
 :) :)

--
Craig

On Sun, Jun 12, 2016 at 1:32 PM, Itamar Turner-Trauring <itamar at itamarst.org
> wrote:

> Hi all,
>
> Since we're starting to get PRs from random people it's worth trying to
> make the process as friendly as possible.
>
> So, maybe instead of telling new contribtutors "PRs won't be reviewed
> without an issue, see contributor guidelines" it would be better to say
> "Thanks for the PR! I opened an issue for this PR here (tm.tl/12345). In
> the future we'd appreciate it if you could open an issue before submitting
> PRs; see contributor guidelines for details".
>
> If someone went out of their way to provide a fix, we should try to
> minimize any unnecessary stop-energy they encounter along the way, even if
> that means some people won't learn the intricacies of the process.
>
> -Itamar
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160612/540d5fd5/attachment-0002.html>

From adi at roiban.ro  Sun Jun 12 15:22:34 2016
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 12 Jun 2016 22:22:34 +0100
Subject: [Twisted-Python] Responding to PRs
In-Reply-To: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
References: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
Message-ID: <CAFycZ9ciDDMOVn4-uB9=M2vXXrO-ubw+QOLfjcUZ+2eq7P5+vA@mail.gmail.com>

On 12 June 2016 at 21:32, Itamar Turner-Trauring <itamar at itamarst.org>
wrote:

> Hi all,
>
> Since we're starting to get PRs from random people it's worth trying to
> make the process as friendly as possible.
>
> So, maybe instead of telling new contribtutors "PRs won't be reviewed
> without an issue, see contributor guidelines" it would be better to say
> "Thanks for the PR! I opened an issue for this PR here (tm.tl/12345). In
> the future we'd appreciate it if you could open an issue before submitting
> PRs; see contributor guidelines for details".
>
> If someone went out of their way to provide a fix, we should try to
> minimize any unnecessary stop-energy they encounter along the way, even if
> that means some people won't learn the intricacies of the process.
>
>
Beside the fix, we need tests, documentation, release notes fragment....
sometimes compatibility with python 2 and python3... so I would say that
Twisted is not designed for low-energy contributors.

I would like to thank Craig for monitoring the Twisted PR. For low-energy
dudes, like me, it is of great help as I am only monitoring the Twisted's
official review queue (https://twistedmatrix.com/trac/report/25) which is
already huge.

Thanks again Craig and keep up the good work ! :)
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160612/d4192bb2/attachment-0002.html>

From hawkowl at atleastfornow.net  Sun Jun 12 20:04:41 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Mon, 13 Jun 2016 10:04:41 +0800
Subject: [Twisted-Python] Porting PB to python3
In-Reply-To: <1568933.RT1ME0EebJ@skull>
References: <CAG=rPVe=wvNZoczU621nWFMj7wXpG5SPNxKuNs6aKU9Rgz=cNA@mail.gmail.com>
 <1568933.RT1ME0EebJ@skull>
Message-ID: <A2D32279-196B-4E6E-ACDD-99CD4487BB1A@atleastfornow.net>


> On 13 Jun 2016, at 01:04, Wolfgang Rohdewald <wolfgang.kde at rohdewald.de> wrote:
> 
> Am Freitag, 10. Juni 2016, 12:39:20 CEST schrieb Craig Rodrigues:
>> I hope you haven't lost interest in this, and are still willing to push
>> forward.
> 
> Maybe in autumn. But I rather hope somebody else would continue with this.
> 

I will -- as mentioned, I have a patch that's missing a few things, so I'll combine them and keep pushing this forward :)

- Amber

> --
> Wolfgang
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160613/afb8df3e/attachment.sig>

From glyph at twistedmatrix.com  Sun Jun 12 20:09:55 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 12 Jun 2016 19:09:55 -0700
Subject: [Twisted-Python] Responding to PRs
In-Reply-To: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
References: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
Message-ID: <ACF6EEA6-4C96-4AEA-B8F0-2425F1EFB938@twistedmatrix.com>


> On Jun 12, 2016, at 13:32, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> 
> Hi all,
> 
> Since we're starting to get PRs from random people it's worth trying to make the process as friendly as possible.
> 
> So, maybe instead of telling new contribtutors "PRs won't be reviewed without an issue, see contributor guidelines" it would be better to say "Thanks for the PR! I opened an issue for this PR here (tm.tl/12345). In the future we'd appreciate it if you could open an issue before submitting PRs; see contributor guidelines for details".

Anyone who wants to do this is absolutely welcome to.  Personally, I won't be, but just because there's more than enough work for me to do on the "official" review queue if I have time for it, and manually de-duplicating all the data is challenging.

> If someone went out of their way to provide a fix, we should try to minimize any unnecessary stop-energy they encounter along the way, even if that means some people won't learn the intricacies of the process.

I don't have any interest in teaching people the intricacies of this somewhat janky process :-).  The sooner we can switch to the "review queue" simply being open PRs, the better; so thanks for volunteering to manage the correspondence in the meanwhile.

-glyph




From adi at roiban.ro  Mon Jun 13 05:20:18 2016
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 13 Jun 2016 12:20:18 +0100
Subject: [Twisted-Python] Responding to PRs
In-Reply-To: <ACF6EEA6-4C96-4AEA-B8F0-2425F1EFB938@twistedmatrix.com>
References: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
 <ACF6EEA6-4C96-4AEA-B8F0-2425F1EFB938@twistedmatrix.com>
Message-ID: <CAFycZ9eX8BFn-yZGN3fW86kih_bd65wFQA4Bqp21GtHmq6u2fw@mail.gmail.com>

On 13 June 2016 at 03:09, Glyph <glyph at twistedmatrix.com> wrote:

[snip]

I don't have any interest in teaching people the intricacies of this
> somewhat janky process :-).  The sooner we can switch to the "review queue"
> simply being open PRs, the better; so thanks for volunteering to manage the
> correspondence in the meanwhile.
>
>
Is there a wiki page, a ticket or some place where switching to the 'review
queue' as GitHub PR list is discussed or brainstormed?

I could not find any reference in the git migration plan
https://github.com/twisted-infra/braid/milestones/Migrate-to-Git

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160613/9744a6dd/attachment-0002.html>

From adi at roiban.ro  Mon Jun 13 05:26:31 2016
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 13 Jun 2016 12:26:31 +0100
Subject: [Twisted-Python] Deprecating classes and writing tests
Message-ID: <CAFycZ9dLEvdO797LYH5RgJoFezDxwwM7zE1ruvz2_wGkt5V0ng@mail.gmail.com>

Hi,

What is the best practice for deprecating a class in Twisted and writing
tests for it ... and updating existing tests.

I think that the part in which the deprecation code is written, is well
understood and documented here

http://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html#classes

What is missing, is the part talking about how to test these changes and
how to update existing tests.

The compatibility / deprecation documentation include a section about how
to test deprecation code, but the section is brief.

http://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html#testing-deprecation-code

----

This email is a follow up of a review done for this ticket
https://twistedmatrix.com/trac/ticket/8368

Please also check the comments on that ticket.

Please leave your feedback and we can try to apply and document it as part
of the work for ticket #8368

Regards,
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160613/d3081de3/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Jun 13 15:35:01 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 13 Jun 2016 14:35:01 -0700
Subject: [Twisted-Python] Responding to PRs
In-Reply-To: <CAFycZ9eX8BFn-yZGN3fW86kih_bd65wFQA4Bqp21GtHmq6u2fw@mail.gmail.com>
References: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
 <ACF6EEA6-4C96-4AEA-B8F0-2425F1EFB938@twistedmatrix.com>
 <CAFycZ9eX8BFn-yZGN3fW86kih_bd65wFQA4Bqp21GtHmq6u2fw@mail.gmail.com>
Message-ID: <D85ABED7-EAF7-415A-A40C-B50E1CCCCCA7@twistedmatrix.com>


> On Jun 13, 2016, at 4:20 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> Is there a wiki page, a ticket or some place where switching to the 'review queue' as GitHub PR list is discussed or brainstormed?
> 

Thus far all discussion has been on the mailing list.  I feel like putting it on the wiki would not be that useful, though; hopefully the discussion will continue for at most another month or two, and it's mostly just a question of coming to consensus about how exactly we're going to use the queue and model discrete review/resubmit events than doing a bunch of work.  https://github.com/markrwilliams/txghbot is probably most of what we need already, perhaps with one or two slight tweaks?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160613/e0eb5c09/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Jun 13 15:46:29 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 13 Jun 2016 14:46:29 -0700
Subject: [Twisted-Python] Deprecating classes and writing tests
In-Reply-To: <CAFycZ9dLEvdO797LYH5RgJoFezDxwwM7zE1ruvz2_wGkt5V0ng@mail.gmail.com>
References: <CAFycZ9dLEvdO797LYH5RgJoFezDxwwM7zE1ruvz2_wGkt5V0ng@mail.gmail.com>
Message-ID: <EC6A7BBB-2011-4A0F-BC8D-E855801CEF82@twistedmatrix.com>


> On Jun 13, 2016, at 4:26 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> What is the best practice for deprecating a class in Twisted and writing tests for it ... and updating existing tests.

We appear to have 'assertDeprecated' type methods scattered around the codebase.  These should be refactored into a single location.

> I think that the part in which the deprecation code is written, is well understood and documented here
> 
> http://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html#classes <http://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html#classes>
> 
> What is missing, is the part talking about how to test these changes and how to update existing tests.

The thing that ends up being deprecated with the recommended technique here is the import of the class itself. So I think what's missing is the explanation that the import needs to be moved to test scope, not module scope within the tests.  The tests should also be separated out and dated so it's clear what to delete when the deprecation period expires, and removals are easy.

Does that answer your question sufficiently?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160613/d4a59bd5/attachment-0002.html>

From markrwilliams at gmail.com  Mon Jun 13 21:33:37 2016
From: markrwilliams at gmail.com (Mark Williams)
Date: Mon, 13 Jun 2016 20:33:37 -0700
Subject: [Twisted-Python] Responding to PRs
In-Reply-To: <D85ABED7-EAF7-415A-A40C-B50E1CCCCCA7@twistedmatrix.com>
References: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
 <ACF6EEA6-4C96-4AEA-B8F0-2425F1EFB938@twistedmatrix.com>
 <CAFycZ9eX8BFn-yZGN3fW86kih_bd65wFQA4Bqp21GtHmq6u2fw@mail.gmail.com>
 <D85ABED7-EAF7-415A-A40C-B50E1CCCCCA7@twistedmatrix.com>
Message-ID: <20160614033336.GA23579@hammal>

On Mon, Jun 13, 2016 at 02:35:01PM -0700, Glyph wrote:
>
> Thus far all discussion has been on the mailing list.  I feel like putting it on the wiki would not be that useful, though; hopefully the discussion will continue for at most another month or two, and it's mostly just a question of coming to consensus about how exactly we're going to use the queue and model discrete review/resubmit events than doing a bunch of work.  https://github.com/markrwilliams/txghbot is probably most of what we need already, perhaps with one or two slight tweaks?

I'm the owner of txghbot.  I hope it ends up being useful for Twisted!

Despite the stern warning at the top of the README, the process it describes should result in a functioning GitHub bot.

If you feel adventurous you can write your own webhooks.  They're Twisted plugins that implement this interface:

https://github.com/markrwilliams/txghbot/blob/master/txghbot/_core.py#L42-L79

I'll claim the lack of any abstraction over the GitHub Webhook API is intentional; this remains the authoritative documentation:

https://developer.github.com/webhooks/

Please let me know if there's anything I can do to make txghbot make PRs easier for everyone.  If it ends up being at all useful I'm happy to transfer ownership to the Twisted organization.

-Mark



From glyph at twistedmatrix.com  Mon Jun 13 22:24:27 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 13 Jun 2016 21:24:27 -0700
Subject: [Twisted-Python] Responding to PRs
In-Reply-To: <20160614033336.GA23579@hammal>
References: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
 <ACF6EEA6-4C96-4AEA-B8F0-2425F1EFB938@twistedmatrix.com>
 <CAFycZ9eX8BFn-yZGN3fW86kih_bd65wFQA4Bqp21GtHmq6u2fw@mail.gmail.com>
 <D85ABED7-EAF7-415A-A40C-B50E1CCCCCA7@twistedmatrix.com>
 <20160614033336.GA23579@hammal>
Message-ID: <1C8F481F-AC4B-4B4D-BB9F-91455772AA69@twistedmatrix.com>


> On Jun 13, 2016, at 8:33 PM, Mark Williams <markrwilliams at gmail.com> wrote:
> 
> On Mon, Jun 13, 2016 at 02:35:01PM -0700, Glyph wrote:
>> 
>> Thus far all discussion has been on the mailing list.  I feel like putting it on the wiki would not be that useful, though; hopefully the discussion will continue for at most another month or two, and it's mostly just a question of coming to consensus about how exactly we're going to use the queue and model discrete review/resubmit events than doing a bunch of work.  https://github.com/markrwilliams/txghbot is probably most of what we need already, perhaps with one or two slight tweaks?
> 
> I'm the owner of txghbot.  I hope it ends up being useful for Twisted!

I strongly suspect that it will be the official solution.  Thanks so much for doing this - the existence of this code is a structural expression of the setup process which short-circuits me needing to read and process all the developer documentation ;).

> Despite the stern warning at the top of the README, the process it describes should result in a functioning GitHub bot.

Cool.  I will set that up soon.

> If you feel adventurous you can write your own webhooks.  They're Twisted plugins that implement this interface:
> 
> https://github.com/markrwilliams/txghbot/blob/master/txghbot/_core.py#L42-L79
> 
> I'll claim the lack of any abstraction over the GitHub Webhook API is intentional; this remains the authoritative documentation:
> 
> https://developer.github.com/webhooks/
> 
> Please let me know if there's anything I can do to make txghbot make PRs easier for everyone.  If it ends up being at all useful I'm happy to transfer ownership to the Twisted organization.


The first thing that comes to mind is that you could get Tom Prince to give you write access to txghbot on PyPI so that this could be 'pip install'ed like anything else, instead of cut live from master at HEAD :-).

I think that some folks were really over-focused on the whole "closing PRs" part of the previous discussion, when what I was really trying to get at was the need for a single, clear "review queue".  Something like txghbot is necessary no matter how we do it because non-(maintainer|reviewer|person with repo:write access|we need a good standard word for this)s will not be able to manipulate the labels.

At this point I think closing PRs creates more problems than it solves.  In particular:

It means that people can't push changes to their PRs to experiment with travis build status, because reviewers will keep closing them, which prevents further pushes from running in CI.
It means that force-pushing has weird and confusing side-effects (even weirder and confusinger than usual).  I am not a big fan of the rebase/force-push workflow, but judiciously used (i.e. with interactive rebases) it can help with splitting up big changes, and it also mitigates Github's atrocious management of the diff display of long-running branches.
It is definitely perceived as an "abnormal" way of doing reviews on Github.

Point 3 was not enough to dissuade me, but it certainly isn't a point in favor, and in combination with the other two I don't think it looks good.

So, instead of treating /pulls as our review queue, I think something like <https://github.com/twisted/twisted/pulls?utf8=✓&q=is%3Apr+is%3Aopen+-label%3A%22awaiting+review+response%22+-status%3Afailure> will have to do.  By subtracting a label from the review query rather than adding one, we can make it so that if our bot breaks down, contributors can still get their new submissions reviewed, and in the worst case where it is down when they want to resubmit, they can work around a broken bot by closing their "awaiting" PR and opening a new one.  (The ability to work around broken infra is important because I have to assume that things are going to go wrong with this, it being a distributed system on the public Internet.)

This means that txghbot's responsibility, instead of reopening the PR, will be to add and remove the 'awaiting review response' label.  If you wanted to write the actual plugin for doing that it might be helpful.  And then setting up a repo where we can play with it to test it out before turning it on for twisted/twisted :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160613/0af604d7/attachment-0002.html>

From adi at roiban.ro  Tue Jun 14 06:20:52 2016
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 14 Jun 2016 13:20:52 +0100
Subject: [Twisted-Python] Responding to PRs
In-Reply-To: <D85ABED7-EAF7-415A-A40C-B50E1CCCCCA7@twistedmatrix.com>
References: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
 <ACF6EEA6-4C96-4AEA-B8F0-2425F1EFB938@twistedmatrix.com>
 <CAFycZ9eX8BFn-yZGN3fW86kih_bd65wFQA4Bqp21GtHmq6u2fw@mail.gmail.com>
 <D85ABED7-EAF7-415A-A40C-B50E1CCCCCA7@twistedmatrix.com>
Message-ID: <CAFycZ9dURsazpZLDP=1XYTOGS+u=iafSGAymP1tWjzG_TPZgDg@mail.gmail.com>

On 13 June 2016 at 22:35, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Jun 13, 2016, at 4:20 AM, Adi Roiban <adi at roiban.ro> wrote:
>
> Is there a wiki page, a ticket or some place where switching to the
> 'review queue' as GitHub PR list is discussed or brainstormed?
>
>
> Thus far all discussion has been on the mailing list.  I feel like putting
> it on the wiki would not be that useful, though; hopefully the discussion
> will continue for at most another month or two, and it's mostly just a
> question of coming to consensus about how exactly we're going to use the
> queue and model discrete review/resubmit events than doing a bunch of work.
>  https://github.com/markrwilliams/txghbot is probably most of what we
> need already, perhaps with one or two slight tweaks?
>
>
OK. Thanks!

I was not sure if the github bot technical decision was taken.

I was not sure if we made a decision for labels vs PR state.

I am -1 for closing a PR as a way of saying: changes are pretty good but a
few tests are missing :)

---------

I am +1 on using labels/keywords in GitHub but I am not sure what will be
the relation between the Trac tickets and the PRs?
Will there be links between them?
Will the Trac tickets be migrated to GitHub Issues?

---------

In case it helps, for my project I am doing it in another way.

I am not suggesting that Twisted should use the same process, but maybe it
can help to get an idea of how this can be done.

The code for the bot is here https://github.com/chevah/github-hooks-server
... and it uses Trac via xml-rpc

The tickets are hosted in Trac, but I have implemented a Trac ticket
workflow. I can share the Trac configuration.

Instead of adding the 'review' keyword, a ticket is actually placed in a
'need_review' state... and instead of removing the 'review' keyword and
assigning the ticket back the ticket can either go into a
'changes_approved' state ... or in a 'need_more_work' state.

Each PR has an associated ticket in Trac.

I have 'needs-review', 'changes-approved' and 'needs-changes' keyword for
managing the ticket state via GitHub PR comments.
The bot also update the "branch" Trac field with a link to the latest PR
associated with a Trac ticket

You can see an example here for the GitHub side
https://github.com/chevah/python-package/pull/54 ... the Trac side is
private but I can share a screenshot if required.

The bot is briefly described here
http://styleguide.chevah.com/review.html#overview-of-the-github-and-trac-integration

Regards,
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160614/6c6c06b5/attachment-0002.html>

From hawkowl at atleastfornow.net  Tue Jun 14 10:08:57 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Wed, 15 Jun 2016 00:08:57 +0800
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 1 Announcement
Message-ID: <871A7FAE-EAD0-4570-9431-1D70466D0698@atleastfornow.net>

Hello everyone! It's time for yet another Twisted release -- although not long after the last, we have had a bunch of good changes from the PyCon sprints, and some long-awaited work has landed!

- The Git migration has happened, so we've updated our development documentation to match. We're now trialling accepting pull requests at github.com/twisted/twisted, so if you've ever wanted an excuse to contribute, now's the chance!
- In our steady shedding of baggage, twisted.spread.ui, twisted.manhole (not to be confused with twisted.conch.manhole!), and a bunch of old and deprecated stuff from twisted.python.reflect and twisted.protocols.sip have been removed.
- twisted.web's HTTP server now handles pipelined requests better -- it used to try and process them in parallel, but this was fraught with problems and now it processes them in series, which is less surprising to code that expects the Request's transport to not be buffered (e.g. WebSockets).
- Twisted now has HTTP/2 support in its web server! This is currently not available by default -- you will need to install hyper-h2, which is available in the [h2] setuptools extras. If you want to play around with it, see the install link below. Upon release, you will be able to simply "pip install twisted[http2]".
- 53 tickets closed overall, including cleanups that move us closer to a total Python 3 port.

For more information, check the NEWS file (link provided below).

As usual, it's available for download -- go here (https://twistedmatrix.com/Releases/pre/16.3.0pre1/) to get the prerelease tarballs and the full NEWS file. If you want to install it right away, run:

    pip install https://twistedmatrix.com/Releases/pre/16.3.0pre1/Twisted-16.3.0rc1.tar.bz2

If you would like to try out the newly-landed HTTP/2 support, run:

    pip install -U https://twistedmatrix.com/Releases/pre/16.3.0pre1/Twisted-16.3.0rc1.tar.bz2#egg=Twisted[http2,tls]

This will download the new HTTP/2 dependencies and the TLS requirements as well.

Please let me know if you have any issues, as well as if you don't! If everything works well, that's a good thing for me to know :)

Twisted Regards,
Amber Brown (HawkOwl)

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160615/8f5dad25/attachment.sig>

From ashfall at twistedmatrix.com  Tue Jun 14 19:44:53 2016
From: ashfall at twistedmatrix.com (Ashwini Oruganti)
Date: Tue, 14 Jun 2016 18:44:53 -0700
Subject: [Twisted-Python] Twisted Challenge Coins!
Message-ID: <CAMFCZ-39k2kNhOao+WfBLPbHW3WcC2cds48OjV8+BE_Veyh18g@mail.gmail.com>

Hello!

We are planning to get us some challenge coins, which is exciting! You
should also be excited with us because this means:

- we can now give it out to contributors at sprints and meetups.
- challenge coins are awesome.

Each coin costs about $6, and the minimum order is 100 coins. Glyph thinks
everyone should have some to give out as tokens of appreciation to other
contributors, and glyph's thoughts are usually worth following.

So, if you are a Twisted contributor and would like to own a challenge
coin, please respond to this email. Also, do mention how many coins you
would like, and where you are located so that we can send you your coin(s).


-ashfall
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160614/1330a445/attachment-0002.html>

From cory at lukasa.co.uk  Wed Jun 15 01:35:49 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Wed, 15 Jun 2016 08:35:49 +0100
Subject: [Twisted-Python] Twisted Challenge Coins!
In-Reply-To: <CAMFCZ-39k2kNhOao+WfBLPbHW3WcC2cds48OjV8+BE_Veyh18g@mail.gmail.com>
References: <CAMFCZ-39k2kNhOao+WfBLPbHW3WcC2cds48OjV8+BE_Veyh18g@mail.gmail.com>
Message-ID: <9E2E21AD-75FF-485F-83EA-5EC8F6F6767A@lukasa.co.uk>


> On 15 Jun 2016, at 02:44, Ashwini Oruganti <ashfall at twistedmatrix.com> wrote:
> 
> So, if you are a Twisted contributor and would like to own a challenge coin, please respond to this email. Also, do mention how many coins you would like, and where you are located so that we can send you your coin(s).

Well for obvious reasons I’d like a challenge coin. Of course, sending it to Europe might not be the easiest thing to do, so take that under advisement!

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160615/07b24f29/attachment.sig>

From glyph at twistedmatrix.com  Wed Jun 15 02:24:13 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 15 Jun 2016 01:24:13 -0700
Subject: [Twisted-Python] Twisted Challenge Coins!
In-Reply-To: <9E2E21AD-75FF-485F-83EA-5EC8F6F6767A@lukasa.co.uk>
References: <CAMFCZ-39k2kNhOao+WfBLPbHW3WcC2cds48OjV8+BE_Veyh18g@mail.gmail.com>
 <9E2E21AD-75FF-485F-83EA-5EC8F6F6767A@lukasa.co.uk>
Message-ID: <90832D83-3924-4441-B518-8E58F9DAA654@twistedmatrix.com>


> On Jun 15, 2016, at 12:35 AM, Cory Benfield <cory at lukasa.co.uk <mailto:cory at lukasa.co.uk>> wrote:
> 
> 
>> On 15 Jun 2016, at 02:44, Ashwini Oruganti <ashfall at twistedmatrix.com <mailto:ashfall at twistedmatrix.com>> wrote:
>> 
>> So, if you are a Twisted contributor and would like to own a challenge coin, please respond to this email. Also, do mention how many coins you would like, and where you are located so that we can send you your coin(s).
> 
> Well for obvious reasons I’d like a challenge coin. Of course, sending it to Europe might not be the easiest thing to do, so take that under advisement!

You might be eligible to receive one, but first we need enough committers to buy them in sufficient quantity that they can exist at all :).

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160615/8bd90f58/attachment-0002.html>

From mithrandi at mithrandi.net  Wed Jun 15 02:48:47 2016
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Wed, 15 Jun 2016 08:48:47 +0000
Subject: [Twisted-Python] Twisted Challenge Coins!
In-Reply-To: <CAMFCZ-39k2kNhOao+WfBLPbHW3WcC2cds48OjV8+BE_Veyh18g@mail.gmail.com>
References: <CAMFCZ-39k2kNhOao+WfBLPbHW3WcC2cds48OjV8+BE_Veyh18g@mail.gmail.com>
Message-ID: <CAMcKhMRXPEJcAyn5H1UaNNffVh32XqmUrXh7gHTom-sfCHV-sQ@mail.gmail.com>

I'll take 5 coins. I'm in South Africa, but I have a US forwarding address
(in Florida) that can be used to simplify logistics.

On Wed, 15 Jun 2016 at 03:46 Ashwini Oruganti <ashfall at twistedmatrix.com>
wrote:

> Hello!
>
> We are planning to get us some challenge coins, which is exciting! You
> should also be excited with us because this means:
>
> - we can now give it out to contributors at sprints and meetups.
> - challenge coins are awesome.
>
> Each coin costs about $6, and the minimum order is 100 coins. Glyph thinks
> everyone should have some to give out as tokens of appreciation to other
> contributors, and glyph's thoughts are usually worth following.
>
> So, if you are a Twisted contributor and would like to own a challenge
> coin, please respond to this email. Also, do mention how many coins you
> would like, and where you are located so that we can send you your coin(s).
>
>
> -ashfall
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160615/dcf8f76c/attachment-0002.html>

From cory at lukasa.co.uk  Wed Jun 15 07:29:31 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Wed, 15 Jun 2016 14:29:31 +0100
Subject: [Twisted-Python] Twisted Challenge Coins!
In-Reply-To: <90832D83-3924-4441-B518-8E58F9DAA654@twistedmatrix.com>
References: <CAMFCZ-39k2kNhOao+WfBLPbHW3WcC2cds48OjV8+BE_Veyh18g@mail.gmail.com>
 <9E2E21AD-75FF-485F-83EA-5EC8F6F6767A@lukasa.co.uk>
 <90832D83-3924-4441-B518-8E58F9DAA654@twistedmatrix.com>
Message-ID: <3EF0ED20-1EE8-4687-9B67-7AC491AF4AF6@lukasa.co.uk>


> On 15 Jun 2016, at 09:24, Glyph <glyph at twistedmatrix.com> wrote:
> 
> You might be eligible to receive one, but first we need enough committers to buy them in sufficient quantity that they can exist at all :).

Heh, let’s assume I’m an idiot and didn’t extract that message from the original email.

In that case, I’m willing to take 5 coins as well. I can also provide US-based forwarding addresses if needed.

Cory

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160615/9644354f/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160615/9644354f/attachment.sig>

From hs at ox.cx  Wed Jun 15 11:13:13 2016
From: hs at ox.cx (Hynek Schlawack)
Date: Wed, 15 Jun 2016 10:13:13 -0700
Subject: [Twisted-Python] Twisted Challenge Coins!
In-Reply-To: <3EF0ED20-1EE8-4687-9B67-7AC491AF4AF6@lukasa.co.uk>
References: <CAMFCZ-39k2kNhOao+WfBLPbHW3WcC2cds48OjV8+BE_Veyh18g@mail.gmail.com>
 <9E2E21AD-75FF-485F-83EA-5EC8F6F6767A@lukasa.co.uk>
 <90832D83-3924-4441-B518-8E58F9DAA654@twistedmatrix.com>
 <3EF0ED20-1EE8-4687-9B67-7AC491AF4AF6@lukasa.co.uk>
Message-ID: <5E2CE56C-B27C-4645-BAF8-EC29E4E78C81@ox.cx>

>> You might be eligible to receive one, but first we need enough committers to buy them in sufficient quantity that they can exist at all :).
> 
> Heh, let’s assume I’m an idiot and didn’t extract that message from the original email.
> 
> In that case, I’m willing to take 5 coins as well. I can also provide US-based forwarding addresses if needed.

Guess I’d take 5 too…I don‘t have a fwd address (save some PyCon mules :)) but maybe you could send it via Cory or something?

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160615/a68ccb7f/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160615/a68ccb7f/attachment.sig>

From _ at lvh.io  Wed Jun 15 11:20:43 2016
From: _ at lvh.io (lvh)
Date: Wed, 15 Jun 2016 12:20:43 -0500
Subject: [Twisted-Python] Twisted Challenge Coins!
In-Reply-To: <CAMFCZ-39k2kNhOao+WfBLPbHW3WcC2cds48OjV8+BE_Veyh18g@mail.gmail.com>
References: <CAMFCZ-39k2kNhOao+WfBLPbHW3WcC2cds48OjV8+BE_Veyh18g@mail.gmail.com>
Message-ID: <34992645-AA34-4AD2-883B-FD90CB526FFE@lvh.io>

Hey,


> On Jun 14, 2016, at 8:44 PM, Ashwini Oruganti <ashfall at twistedmatrix.com> wrote:
> 
> Hello!
> 
> We are planning to get us some challenge coins, which is exciting! You should also be excited with us because this means:
> 
> - we can now give it out to contributors at sprints and meetups.
> - challenge coins are awesome.
> 
> Each coin costs about $6, and the minimum order is 100 coins. Glyph thinks everyone should have some to give out as tokens of appreciation to other contributors, and glyph's thoughts are usually worth following.

5 seems like the number, but we’ll see if we get up to the required minimum order :)


lvh

> So, if you are a Twisted contributor and would like to own a challenge coin, please respond to this email. Also, do mention how many coins you would like, and where you are located so that we can send you your coin(s).
> 
> 
> -ashfall
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From adi at roiban.ro  Wed Jun 15 15:29:42 2016
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 15 Jun 2016 22:29:42 +0100
Subject: [Twisted-Python] Responding to PRs
In-Reply-To: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
References: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
Message-ID: <CAFycZ9dE4giseFGktttsSbGVrsTSR2Q9iXaNA3Xaz7f8AyGRMg@mail.gmail.com>

On 12 June 2016 at 21:32, Itamar Turner-Trauring <itamar at itamarst.org>
wrote:

[snip]


> So, maybe instead of telling new contribtutors "PRs won't be reviewed
> without an issue, see contributor guidelines" it would be better to say
> "Thanks for the PR! I opened an issue for this PR here (tm.tl/12345). In
> the future we'd appreciate it if you could open an issue before submitting
> PRs; see contributor guidelines for details".
>
>
[snip]

I think that is important that the Trac ticket is created by the PR
contributor. In this way we can make sure that the PR contributor has an
account in Trac and that the contributor will receive notifications for all
the discussions done in the Trac ticket.

AFAIK the PR are just replacing the attached patched to a Trac ticket. The
review should still be done in the Trac ticket.

Cheers,
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160615/cfa80994/attachment-0002.html>

From kebin70 at gmail.com  Wed Jun 15 22:16:08 2016
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Wed, 15 Jun 2016 21:16:08 -0700
Subject: [Twisted-Python] web Resource question
Message-ID: <CAA-sNEZhDJpTNrYJq2SYreKh+dONHwmYcQW7+3Abh=byN_HM8w@mail.gmail.com>

what is child.server = self.server in Resource.putChild?

shouldn't it be child.server = self?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160615/076483fa/attachment-0002.html>

From adi at roiban.ro  Thu Jun 16 05:26:51 2016
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 16 Jun 2016 12:26:51 +0100
Subject: [Twisted-Python] Deprecating classes and writing tests
In-Reply-To: <EC6A7BBB-2011-4A0F-BC8D-E855801CEF82@twistedmatrix.com>
References: <CAFycZ9dLEvdO797LYH5RgJoFezDxwwM7zE1ruvz2_wGkt5V0ng@mail.gmail.com>
 <EC6A7BBB-2011-4A0F-BC8D-E855801CEF82@twistedmatrix.com>
Message-ID: <CAFycZ9fV-a4W721GorpP6harwFPD-LMsS-AkSq6jihGfY5nx_A@mail.gmail.com>

On 13 June 2016 at 22:46, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Jun 13, 2016, at 4:26 AM, Adi Roiban <adi at roiban.ro> wrote:
>
> Hi,
>
> What is the best practice for deprecating a class in Twisted and writing
> tests for it ... and updating existing tests.
>
>
> We appear to have 'assertDeprecated' type methods scattered around the
> codebase.  These should be refactored into a single location.
>
> I think that the part in which the deprecation code is written, is well
> understood and documented here
>
>
> http://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html#classes
>
> What is missing, is the part talking about how to test these changes and
> how to update existing tests.
>
>
> The thing that ends up being deprecated with the recommended technique
> here is the import of the class itself. So I think what's missing is the
> explanation that the import needs to be moved to test scope, not module
> scope within the tests.  The tests should also be separated out and dated
> so it's clear what to delete when the deprecation period expires, and
> removals are easy.
>
> Does that answer your question sufficiently?
>
>
I have created https://twistedmatrix.com/trac/ticket/8478 and I have pushed
a branch to document testing deprecated module attributes.

Doing test scope import will work, but I am thinking of a different method.

Instead of importing/using the deprecated code as

# Import raises the warning
from twisted.cred.credentials import UsernameHashedPassword
# Usage will not raise the warning.
UsernameHashedPassword

it can be imported and used in this way

# Import will not raise the warning
from twisted.cred import credentials
# Usage will raise the warning
credentials.UsernameHashedPassword

I feel that the second approach is easier to integrated with
self.callDeprecated

If you have time, please review https://twistedmatrix.com/trac/ticket/8478

Thanks!
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160616/8b380419/attachment-0002.html>

From cory at lukasa.co.uk  Thu Jun 16 06:11:23 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Thu, 16 Jun 2016 13:11:23 +0100
Subject: [Twisted-Python] web Resource question
In-Reply-To: <CAA-sNEZhDJpTNrYJq2SYreKh+dONHwmYcQW7+3Abh=byN_HM8w@mail.gmail.com>
References: <CAA-sNEZhDJpTNrYJq2SYreKh+dONHwmYcQW7+3Abh=byN_HM8w@mail.gmail.com>
Message-ID: <69E0101C-95E3-4DA2-A95F-3F5F1CB1BCDD@lukasa.co.uk>


> On 16 Jun 2016, at 05:16, Kevin Mcintyre <kebin70 at gmail.com> wrote:
> 
> 
> what is child.server = self.server in Resource.putChild?
> 
> shouldn't it be child.server = self?

I don’t think so. The reference to the server is presumably intended to refer to the Site object that is hosting the Resource. With that said, I can’t actually *find* anywhere that sets the server on a Resource, so it’s possible that the whole thing is vestigial.

Cory
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160616/5c24662e/attachment.sig>

From kebin70 at gmail.com  Thu Jun 16 12:14:37 2016
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Thu, 16 Jun 2016 11:14:37 -0700
Subject: [Twisted-Python] web Resource question
In-Reply-To: <69E0101C-95E3-4DA2-A95F-3F5F1CB1BCDD@lukasa.co.uk>
References: <CAA-sNEZhDJpTNrYJq2SYreKh+dONHwmYcQW7+3Abh=byN_HM8w@mail.gmail.com>
 <69E0101C-95E3-4DA2-A95F-3F5F1CB1BCDD@lukasa.co.uk>
Message-ID: <CAA-sNEaeka+i4MOTO9dSvmXCtxjCbkZ6gEAvExzaRoaD6O-knA@mail.gmail.com>

Hey, thanks for the reply.

It seems like there's the possibility of more beneficial assignments...but
first trying to understand if there's a specific reason for the
child.server assignment.

On Thu, Jun 16, 2016 at 5:11 AM, Cory Benfield <cory at lukasa.co.uk> wrote:

>
> > On 16 Jun 2016, at 05:16, Kevin Mcintyre <kebin70 at gmail.com> wrote:
> >
> >
> > what is child.server = self.server in Resource.putChild?
> >
> > shouldn't it be child.server = self?
>
> I don’t think so. The reference to the server is presumably intended to
> refer to the Site object that is hosting the Resource. With that said, I
> can’t actually *find* anywhere that sets the server on a Resource, so it’s
> possible that the whole thing is vestigial.
>
> Cory
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160616/fb03a5ab/attachment-0002.html>

From rodrigc at crodrigues.org  Fri Jun 17 00:49:55 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 16 Jun 2016 23:49:55 -0700
Subject: [Twisted-Python] Need write access to Twisted
Message-ID: <CAG=rPVf2E5gfCT_u4G8-LK6zLx41jBXe90M-CC3f+3xgVwhjFg@mail.gmail.com>

Hi,

Can someone grant me write access to Twisted?
I want to continue with my Python3 porting patches,
and help test things directly on the buildbots.

Thanks.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160616/69024bf9/attachment-0002.html>

From adi at roiban.ro  Fri Jun 17 01:02:09 2016
From: adi at roiban.ro (Adi Roiban)
Date: Fri, 17 Jun 2016 08:02:09 +0100
Subject: [Twisted-Python] Need write access to Twisted
In-Reply-To: <CAG=rPVf2E5gfCT_u4G8-LK6zLx41jBXe90M-CC3f+3xgVwhjFg@mail.gmail.com>
References: <CAG=rPVf2E5gfCT_u4G8-LK6zLx41jBXe90M-CC3f+3xgVwhjFg@mail.gmail.com>
Message-ID: <CAFycZ9fXA+EW2GOtMJFEwW1fROO-OAWs2s+tWcAyRygdqWeN9Q@mail.gmail.com>

On 17 June 2016 at 07:49, Craig Rodrigues <rodrigc at crodrigues.org> wrote:

> Hi,
>
> Can someone grant me write access to Twisted?
> I want to continue with my Python3 porting patches,
> and help test things directly on the buildbots.
>
>
I am +1

As a reviewer I am looking forward for just reviewing the buildbot status,
codecoverage and then adding comments, rather than also creating branches
in twisted, updating Trac ticket, trigger buildbot builds, composing the
merge message and doing the actual merge and push :)

Many thanks Craig for your help :)


-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160617/620689ee/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Jun 17 01:23:35 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 17 Jun 2016 00:23:35 -0700
Subject: [Twisted-Python] Need write access to Twisted
In-Reply-To: <CAFycZ9fXA+EW2GOtMJFEwW1fROO-OAWs2s+tWcAyRygdqWeN9Q@mail.gmail.com>
References: <CAG=rPVf2E5gfCT_u4G8-LK6zLx41jBXe90M-CC3f+3xgVwhjFg@mail.gmail.com>
 <CAFycZ9fXA+EW2GOtMJFEwW1fROO-OAWs2s+tWcAyRygdqWeN9Q@mail.gmail.com>
Message-ID: <9A6808E3-653E-455B-B452-6254C668DB31@twistedmatrix.com>


> On Jun 17, 2016, at 12:02 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> On 17 June 2016 at 07:49, Craig Rodrigues <rodrigc at crodrigues.org <mailto:rodrigc at crodrigues.org>> wrote:
> Hi,
> 
> Can someone grant me write access to Twisted?
> I want to continue with my Python3 porting patches,
> and help test things directly on the buildbots.
> 
> 
> I am +1
> 
> As a reviewer I am looking forward for just reviewing the buildbot status, codecoverage and then adding comments, rather than also creating branches in twisted, updating Trac ticket, trigger buildbot builds, composing the merge message and doing the actual merge and push :)
> 
> Many thanks Craig for your help :) 

I am also +1.  I think Craig has demonstrated the utmost respect for the process and has demonstrated a clear ability to follow it, which is the main criteria.

Please do remember though that as a team member you have the responsibility to review others' code as well, so be sure to familiarize yourself with the process ;-).  I've sent you an invite to the relevant github organization.

Also: we've previously discussed governance and a better onboarding / selection process for new members.  We haven't had a person willing to take charge of that process, design and administer it, so in the meanwhile, rather than the vague in-between state we've had, I am going to make it explicit: induction of new members into the Twisted Matrix Labs org will just be at my discretion as Project Leader for now.  So I'm making Craig a member by executive order ;-).

If someone would like to step forward to help facilitate a better induction/onboarding process (I don't think this one is ideal, it's certainly more work for me!) then we can do something more formal, but in the meanwhile, it can at least be clear, if not ideal.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160617/021664b8/attachment-0002.html>

From commercials24 at yahoo.de  Fri Jun 17 10:26:19 2016
From: commercials24 at yahoo.de (steven meier)
Date: Fri, 17 Jun 2016 18:26:19 +0200
Subject: [Twisted-Python] integrating a Qt interface with twisted, qt5,
	python 2.x
Message-ID: <1466180779.9389.22.camel@yahoo.de>

hi,


why does the code below print "testing..." but not "123" 5 seconds after
the application started?




import sys
from PyQt5 import QtWidgets
from untitled import Ui_MainWindow
#from webchat import get_main_page

class Main(QtWidgets.QMainWindow):

    def __init__(self):
        QtWidgets.QMainWindow.__init__(self)
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.setupSignals()

    def button_1_Clicked(self):
        self.ui.textbox_2.setText(self.ui.textbox_1.text())

    def setupSignals(self):
        #self.ui.textbox_1.textChanged.connect(self.textbox_1_Changed)
        self.ui.button_1.clicked.connect(self.button_1_Clicked)




if __name__ == '__main__':
    #app = QtWidgets.QApplication(sys.argv)
    
    app = QtWidgets.QApplication(sys.argv) # your code to init QtCore
    import qt5reactor
    qt5reactor.install()

    print "testing..."

    #get_main_page()
    window = Main()
    window.show()
    sys.exit(app.exec_())
    def printMe(argument):
        print argument

    def lala():
        reactor.callLater(5, printMe, '123')


    lala()
    reactor.run()





From rodrigc at crodrigues.org  Fri Jun 17 11:48:24 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 17 Jun 2016 10:48:24 -0700
Subject: [Twisted-Python] Need write access to Twisted
In-Reply-To: <9A6808E3-653E-455B-B452-6254C668DB31@twistedmatrix.com>
References: <CAG=rPVf2E5gfCT_u4G8-LK6zLx41jBXe90M-CC3f+3xgVwhjFg@mail.gmail.com>
 <CAFycZ9fXA+EW2GOtMJFEwW1fROO-OAWs2s+tWcAyRygdqWeN9Q@mail.gmail.com>
 <9A6808E3-653E-455B-B452-6254C668DB31@twistedmatrix.com>
Message-ID: <CAG=rPVeyKbnWADO2OcbGJfoGRzEbvbfg0=s4h0Pjh=Q4V=T4Lw@mail.gmail.com>

On Fri, Jun 17, 2016 at 12:23 AM, Glyph <glyph at twistedmatrix.com> wrote:


>
> I am also +1.  I think Craig has demonstrated the utmost respect for the
> process and has demonstrated a clear ability to follow it, which is the
> main criteria.
>
>
>
Thank you.  I will do my best to maintain the high standards of the Twisted
project.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160617/c7e3afb7/attachment-0002.html>

From clayton.daley at gmail.com  Sun Jun 19 09:34:30 2016
From: clayton.daley at gmail.com (Clayton Daley)
Date: Sun, 19 Jun 2016 10:34:30 -0500
Subject: [Twisted-Python] integrating a Qt interface with twisted, qt5,
 python 2.x
In-Reply-To: <1466180779.9389.22.camel@yahoo.de>
References: <1466180779.9389.22.camel@yahoo.de>
Message-ID: <CACKEAnWYiwkbtiaCiSHNdY_1dy3EL2ry8iBsxoJ-CnFpgLdzdw@mail.gmail.com>

I believe your problem is this line:

> sys.exit(app.exec_())

Two issues:

   - It looks like app.exec_() blocks (e.g.
   http://stackoverflow.com/questions/22289423/how-to-avoid-qt-app-exec-blocking-main-thread
   )
   - When it unblocks, the program sys.exit() terminates (
   https://docs.python.org/2/library/sys.html#sys.exit)

Thus, your app never reaches any of the twisted code. If you're not
familiar with debugging tools that let you walk through the code, adding a
print line between each line of actual code would have made it obvious that
you never got past this line.

Clayton Daley

On Fri, Jun 17, 2016 at 11:26 AM, steven meier <commercials24 at yahoo.de>
wrote:

> hi,
>
>
> why does the code below print "testing..." but not "123" 5 seconds after
> the application started?
>
>
>
>
> import sys
> from PyQt5 import QtWidgets
> from untitled import Ui_MainWindow
> #from webchat import get_main_page
>
> class Main(QtWidgets.QMainWindow):
>
>     def __init__(self):
>         QtWidgets.QMainWindow.__init__(self)
>         self.ui = Ui_MainWindow()
>         self.ui.setupUi(self)
>         self.setupSignals()
>
>     def button_1_Clicked(self):
>         self.ui.textbox_2.setText(self.ui.textbox_1.text())
>
>     def setupSignals(self):
>         #self.ui.textbox_1.textChanged.connect(self.textbox_1_Changed)
>         self.ui.button_1.clicked.connect(self.button_1_Clicked)
>
>
>
>
> if __name__ == '__main__':
>     #app = QtWidgets.QApplication(sys.argv)
>
>     app = QtWidgets.QApplication(sys.argv) # your code to init QtCore
>     import qt5reactor
>     qt5reactor.install()
>
>     print "testing..."
>
>     #get_main_page()
>     window = Main()
>     window.show()
>     sys.exit(app.exec_())
>     def printMe(argument):
>         print argument
>
>     def lala():
>         reactor.callLater(5, printMe, '123')
>
>
>     lala()
>     reactor.run()
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160619/2fc1a35d/attachment-0002.html>

From kevin.horn at gmail.com  Mon Jun 20 10:33:24 2016
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 20 Jun 2016 11:33:24 -0500
Subject: [Twisted-Python] Twisted Challenge Coins!
In-Reply-To: <34992645-AA34-4AD2-883B-FD90CB526FFE@lvh.io>
References: <CAMFCZ-39k2kNhOao+WfBLPbHW3WcC2cds48OjV8+BE_Veyh18g@mail.gmail.com>
 <34992645-AA34-4AD2-883B-FD90CB526FFE@lvh.io>
Message-ID: <CA+U=zK34Mz_5LsSCfv2O4B3mhAviw50hhviBDf1wvuKvbmRpUA@mail.gmail.com>

I haven't been very active in a while, but:

a) this is a really cool idea
b) I'd really like one of these for myself

So, sign me up for 5 coins.  I might be willing to up that to 10 if it
makes a difference in this happening or not.



On Wed, Jun 15, 2016 at 12:20 PM, lvh <_ at lvh.io> wrote:

> Hey,
>
>
> > On Jun 14, 2016, at 8:44 PM, Ashwini Oruganti <ashfall at twistedmatrix.com>
> wrote:
> >
> > Hello!
> >
> > We are planning to get us some challenge coins, which is exciting! You
> should also be excited with us because this means:
> >
> > - we can now give it out to contributors at sprints and meetups.
> > - challenge coins are awesome.
> >
> > Each coin costs about $6, and the minimum order is 100 coins. Glyph
> thinks everyone should have some to give out as tokens of appreciation to
> other contributors, and glyph's thoughts are usually worth following.
>
> 5 seems like the number, but we’ll see if we get up to the required
> minimum order :)
>
>
> lvh
>
> > So, if you are a Twisted contributor and would like to own a challenge
> coin, please respond to this email. Also, do mention how many coins you
> would like, and where you are located so that we can send you your coin(s).
> >
> >
> > -ashfall
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160620/8569cbdb/attachment-0002.html>

From cory at lukasa.co.uk  Tue Jun 21 03:19:26 2016
From: cory at lukasa.co.uk (Cory Benfield)
Date: Tue, 21 Jun 2016 10:19:26 +0100
Subject: [Twisted-Python] Improvements to Resource dispatch
Message-ID: <F8E47650-51AE-4A10-A0E7-944569FCAF9D@lukasa.co.uk>

All,

Now that the HTTP/2 server changes have landed, one of the things I’d like to start dealing with is server Resource dispatch. Those of you who have been paying attention to this mailing list will remember that we discussed this a bit back when I was originally implementing HTTP/2 logic, and we ended up deferring the work for a while. It’s time to re-discuss this.

To try to avoid boiling the ocean I’d like to divide this into small steps. Adi has pointed out Twisted ticket #6928, which includes an original patch to allow Resources to opt-in to early-dispatch when headers are received. This allows them to handle 100 Continue more feature fully than Twisted does today (where it unconditionally emits 100 Continue). If Adi is up for it, I’m willing to take over the lead reviewer role for that patch and try to help shepherd it through the process.

The rest of this mail is a commentary on the proposed interface, which you can see here[0]. Note that the patch available there is non-functional: we’re mostly concerned with discussing the interfaces, more than we’re concerned about the actual function of the patch.

Ok, let’s go.

Adi, my high level summary is that this patch looks reasonable. headersReceived is a sensible interface, and while I don’t like the names IEarlyHeaders{Request,Resource}, those names can be addressed later in the review process. An obvious thing missing from your draft is that the HTTPChannel doesn’t check for IEarlyHeadersRequest before calling headersReceived, but that’s presumably an oversight.

I’d like separate patches that implement IEarlyHeadersResource for some relevant built-in resources, such as t.w.static.File, mostly so we can confirm that the behaviour works in cases where we do not need to check the request content.

Otherwise, I think this is a good enough prototype to start working from. The biggest question mark I have is how we plan to evolve this. The next logical step, presumably, is a new set of interfaces (children of IEarlyHeaders{Request,Resource}) that allow for streaming body delivery. I’m a bit nervous about wanting to publish too many of these *intermediary* interfaces, especially because it will mean we need fallback code for each case (what about Resources that don’t implement IEarlyHeadersResource?, what about Resources that don’t implement IStreamingBodyResource? each requires a new code path). In this instance, I’d want to be pretty aggressive about deprecating older interfaces and ensuring that people move to the newer interface model. Perhaps when we merge this we should deprecate plain Resource objects and encourage people to move to IEarlyHeadersResource, so that they have a smaller delta when streaming resources are implemented too.

Those are my high level thoughts. If anyone else has feedback please feel free to leap in, but otherwise I’m going to encourage Adi to provide a “proper” patch (or possibly sequence of patches) that we can more formally review.

Cory



[0]: https://github.com/twisted/twisted/compare/trunk...chevah:6928-http-100-accept
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160621/40b446b8/attachment.sig>

From rodrigc at crodrigues.org  Tue Jun 21 03:24:44 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 21 Jun 2016 02:24:44 -0700
Subject: [Twisted-Python] Question about twistedchecker failures
Message-ID: <CAG=rPVfSpuFoYW0rgHqjYzsqwXPcY80nPgsck+=NozVHJ6Xuxw@mail.gmail.com>

Hi,

Why did this twistedchecker build succeed:
https://buildbot.twistedmatrix.com/builders/twistedchecker/builds/341

and this one fail:
https://buildbot.twistedmatrix.com/builders/twistedchecker/builds/342

I don't understand what is causing the failure.

I looked at:
https://github.com/twisted-infra/braid/blob/master/services/buildbot/master/txbuildbot/lint.py

but didn't see how that script is resulting in an error.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160621/a6d104c4/attachment-0002.html>

From msc at contact.de  Tue Jun 21 04:16:41 2016
From: msc at contact.de (Michael Schlenker)
Date: Tue, 21 Jun 2016 12:16:41 +0200
Subject: [Twisted-Python] Error handling in twisted.web.HTTPClient for bad
 certificates with TLSMemoryBIOProtocol
Message-ID: <03db4ac9-07e3-4aaf-293f-80d48902a397@contact.de>

Hi,

i just stumbled onto some issue while trying to use xmlrpc.Proxy
together with the TLSMemoryBIOProtocol, but its probably the same for
all wrapping protocols sitting on top of the old HTTP client.

If the target certificate is invalid and cannot be verified, the errback
just tells me 'ConnectionDone', as if all was okay, and simply drops the
SSL Error. See below for details/tracebacks.

The root cause is in twisted.web.HTTPClient.connectionLost:

    def connectionLost(self, reason):
	self.handleResponseEnd()

it simply ignores the reason passed to it and tries to extract some
reason from the response. But in the case of a TLS handshake problem,
there is no valid response yet. Looks like a bug to me.

Basically what should happen is similar to the clientConnectionLost()
method of a ClientFactory, but the Protocol already got the
connectionMade from the tls Layer...

Now i want to find the best way to deal with it.

- Fix HTTPClient.connectionLost to handle the reason properly if no
  valid Response exists?
- Wrap TLSMemoryBIOFactory to handle this?
- Something else? Would the new connector API handle it better?

The code is a bit older, so does not use the new connector APIs yet, but
is running like this on Twisted 16.2. (Traceback is from 14.0.2 as i
have reproduced it there first).

Basically i do this:

class MyTLSXMLRPCProxy(xmlrpc.Proxy):
    queryFactory = xmlrpc._QueryFactory

    def set_ssl_client_context(self, ctx):
        self.ssl_ctx = ctx

    def callRemote(self, method, *args):
        query_factory = self.queryFactory(
            self.path, self.host, method, self.user,
            self.password, self.allowNone, args)

        if self.secure:
            port = self.port or 443
            factory = sslsupport.TLSMemoryBIOFactory(self.ssl_ctx,
                                                     True,
                                                     query_factory)
        else:
            port = self.port or 80
            factory = query_factory

        reactor.connectTCP(self.host, port, factory)
        return query_factory.deferred

Now binding an errback to call_remote does only show something like this:

[Failure instance: Traceback (failure with no frames): <class
'twisted.internet.error.ConnectionDone'>: Connection was closed cleanly.

But the true error, as seen in the connectionLost() handler of the
TLSMemoryBIOProtocol looks like this:

[Failure instance: Traceback: <class 'OpenSSL.SSL.Error'>: [('SSL
routines', 'ssl3_get_server_certificate', 'certificate verify failed')]
	...\site-packages\twisted-14.0.2-py2.7-win32.egg\twisted\internet\selectreactor.py:149:_doReadOrWrite
	...\site-packages\twisted-14.0.2-py2.7-win32.egg\twisted\internet\tcp.py:214:doRead
	...\site-packages\twisted-14.0.2-py2.7-win32.egg\twisted\internet\tcp.py:220:_dataReceived
	...\site-packages\twisted-14.0.2-py2.7-win32.egg\twisted\protocols\tls.py:415:dataReceived
	--- <exception caught here> ---
	...\site-packages\twisted-14.0.2-py2.7-win32.egg\twisted\protocols\tls.py:554:_write
	...\site-packages\pyopenssl-0.15.1-py2.7.egg\OpenSSL\SSL.py:1271:send
	...\lib\site-packages\pyopenssl-0.15.1-py2.7.egg\OpenSSL\SSL.py:1187:_raise_ssl_error
	...\site-packages\pyopenssl-0.15.1-py2.7.egg\OpenSSL\_util.py:48:exception_from_error_queue
	]

Michael

---
Michael Schlenker
Senior Software Engineer

CONTACT Software GmbH           Tel.:   +49 (421) 20153-80
Wiener Straße 1-3               Fax:    +49 (421) 20153-41
28359 Bremen
E-Mail: michael.schlenker at contact-software.com
http://www.contact-software.com/

Registered office: Bremen, Germany
Managing directors: Karl Heinz Zachries, Ralf Holtgrefe
Court of register: Amtsgericht Bremen HRB 1321



From glyph at twistedmatrix.com  Tue Jun 21 13:07:04 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 21 Jun 2016 12:07:04 -0700
Subject: [Twisted-Python] two minor things
Message-ID: <6325D6CF-E456-4DF9-886D-395C5F0BAA6A@twistedmatrix.com>

These are mostly for Craig but they're relevant to everyone, so I am sending it to the mailing list.  I don't know if these have been properly written down as part of a policy.

1. Please don't assign reviews normally.

If someone reviews your tickets, don't punish them by crushing them with all the other tickets you have :).  The point of having a single review queue for all reviewers is that the responsibility should be diffused and lots of people should be doing reviews.  You can always ask someone to review your tickets, of course, but assigning them suggests to other reviewers that they won't be able to do a complete job and that they should leave it to the assignee.  Assigning should be reserved for cases where either the original reviewer did a really huge review and you'd like a re-review from the same person to ensure that you fully understood it, or the person in question has some specialized knowledge because you're adding test coverage or documentation to untested/undocumented code that they wrote and you want to make sure you're getting it right.

2. The branch-naming convention puts the ticket number at the _end_ of the branch name.

For example, foo-1234, not 1234-foo.  If we re-add the automation to recognize branch names and update the 'branch' field in trac, getting this consistent will be important.

Thanks!

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160621/912600c1/attachment-0002.html>

From rodrigc at crodrigues.org  Tue Jun 21 13:58:14 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 21 Jun 2016 12:58:14 -0700
Subject: [Twisted-Python] two minor things
In-Reply-To: <6325D6CF-E456-4DF9-886D-395C5F0BAA6A@twistedmatrix.com>
References: <6325D6CF-E456-4DF9-886D-395C5F0BAA6A@twistedmatrix.com>
Message-ID: <CAG=rPVdvEcJ=gqrWQSivT558_bo7Ewi=3V65cLycw+zNxw6yjg@mail.gmail.com>

On Tue, Jun 21, 2016 at 12:07 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> 2. The branch-naming convention puts the ticket number at the _end_ of the
> branch name.
>
> For example, foo-1234, not 1234-foo.  If we re-add the automation to
> recognize branch names and update the 'branch' field in trac, getting this
> consistent will be important.
>
>
The example given here:
https://twistedmatrix.com/trac/wiki/UltimateQualityDevelopmentSystem

is opposite of what you just described.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160621/0ada80f3/attachment-0002.html>

From adi at roiban.ro  Tue Jun 21 14:01:23 2016
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 21 Jun 2016 21:01:23 +0100
Subject: [Twisted-Python] two minor things
In-Reply-To: <6325D6CF-E456-4DF9-886D-395C5F0BAA6A@twistedmatrix.com>
References: <6325D6CF-E456-4DF9-886D-395C5F0BAA6A@twistedmatrix.com>
Message-ID: <CAFycZ9cMXLvFe0BNC8heF6p3=pEmdzpiAPXjiYqm8Gdrn1MtbA@mail.gmail.com>

On 21 June 2016 at 20:07, Glyph <glyph at twistedmatrix.com> wrote:

> 2. The branch-naming convention puts the ticket number at the _end_ of the
> branch name.
>
> For example, foo-1234, not 1234-foo.  If we re-add the automation to
> recognize branch names and update the 'branch' field in trac, getting this
> consistent will be important.
>
>
AFAIK we agreed that 1234-foo is a better convention... but just that with
the SVN to Git migration we did nothing.

I was the one pushing for this change, and to my defense, Amber was also
happy with the change.

I hope that when we add the automation, it will work with both methods...
but hopefully people will prefer 1234.

For me is easier to auto-complete branches based on id.

Cheers,
Adi



-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160621/05adbe4a/attachment-0002.html>

From jerryguitarist at gmail.com  Tue Jun 21 20:54:42 2016
From: jerryguitarist at gmail.com (Eeshan Garg)
Date: Wed, 22 Jun 2016 00:24:42 -0230
Subject: [Twisted-Python] Regarding moving on with ticket #7934 (New Logging
	System)
Message-ID: <CA+2gYiriE1EXmU89Vxj5Y5iB-Qu7rNNuxygW-mP_NExAEtjtsQ@mail.gmail.com>

Hello again!

I am fully aware that it has been a _very_ long time since I mentioned that
I would get on with <https://twistedmatrix.com/trac/ticket/7934>, but I
haven't really had the time to actually do anything about it. :-/

I would love to work on more tickets like <
https://twistedmatrix.com/trac/ticket/7897> and help port Twisted to the
new logging system and kind of get back into the flow of submitting patches
and contributing to Twisted again (I miss it so much!!).

My main concerns about moving on with #7934 after my last patch have
already been reported by hawkowl in <
https://twistedmatrix.com/trac/ticket/7983>. However, it was a bit unclear
to me from the discussions in 7983 as to how to move forward. It would mean
a lot to me if someone who is working on this right now (or glyph or
hawkowl) could please give me a couple of pointers as to what should be
done with the "self.log" issue for porting existing code to the new logging
system.

- Should I declare a log attribute for an entire module to use?

- Should I rewrite my new patch around hawkowl's suggestion in 7983, use
_loggerFor for everything? If so, how do you refer to the Logger instance
to compare the log_logger in the event dict with what is expected (since
asserting everything in the event dict, including log_logger is crucial for
optimum test coverage)?

- Or is there another way I should be searching for? Has anything changed
since 7983 was filed? :-)

I have already started working on the other suggestions put forth by the
reviewers (such as context managers for capturing log events, etc.).
Looking forward to contributing more!

Regards,
Eeshan Garg
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160622/35efb88b/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Jun 22 02:05:07 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 22 Jun 2016 01:05:07 -0700
Subject: [Twisted-Python] two minor things
In-Reply-To: <CAFycZ9cMXLvFe0BNC8heF6p3=pEmdzpiAPXjiYqm8Gdrn1MtbA@mail.gmail.com>
References: <6325D6CF-E456-4DF9-886D-395C5F0BAA6A@twistedmatrix.com>
 <CAFycZ9cMXLvFe0BNC8heF6p3=pEmdzpiAPXjiYqm8Gdrn1MtbA@mail.gmail.com>
Message-ID: <508BCBC7-7A79-4142-B764-C994435AFB5A@twistedmatrix.com>

> On Jun 21, 2016, at 13:01, Adi Roiban <adi at roiban.ro> wrote:
> 
> 
> 
> On 21 June 2016 at 20:07, Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 2. The branch-naming convention puts the ticket number at the _end_ of the branch name.
> 
> For example, foo-1234, not 1234-foo.  If we re-add the automation to recognize branch names and update the 'branch' field in trac, getting this consistent will be important.
> 
> 
> AFAIK we agreed that 1234-foo is a better convention... but just that with the SVN to Git migration we did nothing.
> 
> I was the one pushing for this change, and to my defense, Amber was also happy with the change.
> 
> I hope that when we add the automation, it will work with both methods... but hopefully people will prefer 1234.
> 
> For me is easier to auto-complete branches based on id.

If we are going to change this, I would really appreciate it if someone in favor of the change would write a script to re-name the literally thousands of outstanding branches to the new convention, so we don't have a random mix.  Luckily git makes this considerably more light weight, since it just changes the name of the pointer and doesn't create new revisions :-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160622/2694c427/attachment-0002.html>

From mithrandi at mithrandi.net  Wed Jun 22 02:51:10 2016
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Wed, 22 Jun 2016 08:51:10 +0000
Subject: [Twisted-Python] two minor things
In-Reply-To: <508BCBC7-7A79-4142-B764-C994435AFB5A@twistedmatrix.com>
References: <6325D6CF-E456-4DF9-886D-395C5F0BAA6A@twistedmatrix.com>
 <CAFycZ9cMXLvFe0BNC8heF6p3=pEmdzpiAPXjiYqm8Gdrn1MtbA@mail.gmail.com>
 <508BCBC7-7A79-4142-B764-C994435AFB5A@twistedmatrix.com>
Message-ID: <CAMcKhMTtzzN9StiBt7Tw4N75My1dM0H32mTCWT_U+ycp5dR9xQ@mail.gmail.com>

On Wed, 22 Jun 2016 at 10:05 Glyph <glyph at twistedmatrix.com> wrote:

>
> If we are going to change this, I would really appreciate it if someone in
> favor of the change would write a script to re-name the literally thousands
> of outstanding branches to the new convention, so we don't have a random
> mix.  Luckily git makes this considerably more light weight, since it just
> changes the name of the pointer and doesn't create new revisions :-).
>

I think most of the "outstanding branches" are actually merged, and need to
be deleted. So maybe a script to do that first...? (Sorry, I'm not likely
to get around to this any time soon)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160622/108a4749/attachment-0002.html>

From hawkowl at atleastfornow.net  Wed Jun 22 02:53:09 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Wed, 22 Jun 2016 18:53:09 +1000
Subject: [Twisted-Python] two minor things
In-Reply-To: <CAMcKhMTtzzN9StiBt7Tw4N75My1dM0H32mTCWT_U+ycp5dR9xQ@mail.gmail.com>
References: <6325D6CF-E456-4DF9-886D-395C5F0BAA6A@twistedmatrix.com>
 <CAFycZ9cMXLvFe0BNC8heF6p3=pEmdzpiAPXjiYqm8Gdrn1MtbA@mail.gmail.com>
 <508BCBC7-7A79-4142-B764-C994435AFB5A@twistedmatrix.com>
 <CAMcKhMTtzzN9StiBt7Tw4N75My1dM0H32mTCWT_U+ycp5dR9xQ@mail.gmail.com>
Message-ID: <E526058C-22FF-4A6A-9D12-F51B8C104F0C@atleastfornow.net>


> On 22 Jun 2016, at 18:51, Tristan Seligmann <mithrandi at mithrandi.net> wrote:
> 
> On Wed, 22 Jun 2016 at 10:05 Glyph <glyph at twistedmatrix.com> wrote:
> 
> If we are going to change this, I would really appreciate it if someone in favor of the change would write a script to re-name the literally thousands of outstanding branches to the new convention, so we don't have a random mix.  Luckily git makes this considerably more light weight, since it just changes the name of the pointer and doesn't create new revisions :-).
> 
> I think most of the "outstanding branches" are actually merged, and need to be deleted. So maybe a script to do that first...? (Sorry, I'm not likely to get around to this any time soon)

I might take a stab at this... firstly we want to delete the merged ones, and then migrate the rest.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160622/f6e306ec/attachment.sig>

From adi at roiban.ro  Wed Jun 22 09:28:50 2016
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 22 Jun 2016 16:28:50 +0100
Subject: [Twisted-Python] Responding to PRs
In-Reply-To: <1C8F481F-AC4B-4B4D-BB9F-91455772AA69@twistedmatrix.com>
References: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
 <ACF6EEA6-4C96-4AEA-B8F0-2425F1EFB938@twistedmatrix.com>
 <CAFycZ9eX8BFn-yZGN3fW86kih_bd65wFQA4Bqp21GtHmq6u2fw@mail.gmail.com>
 <D85ABED7-EAF7-415A-A40C-B50E1CCCCCA7@twistedmatrix.com>
 <20160614033336.GA23579@hammal>
 <1C8F481F-AC4B-4B4D-BB9F-91455772AA69@twistedmatrix.com>
Message-ID: <CAFycZ9cQcLRfxAFd8513nL0WKsiT8ejF-J1w56EVGwtWNYK5_g@mail.gmail.com>

On 14 June 2016 at 05:24, Glyph <glyph at twistedmatrix.com> wrote:

>
>
> I'm the owner of txghbot.  I hope it ends up being useful for Twisted!
>
>
> I strongly suspect that it will be the official solution.  Thanks so much
> for doing this - the existence of this code is a structural expression of
> the setup process which short-circuits me needing to read and process all
> the developer documentation ;).
>
>
I am trying to work on GitHub <-> Buildbot intergration (2 ways) and for
doing this we will end up with something like a "bot" running
inside/alongside Buildbot and triggering builds based on webhooks.

We will also have another "bot" inside buildbot which will POST Commit
Status requests to GitHub.

Now, my questions are:

* Do we need an external txghbot ?
* Can we integrate all the webhook logic inside the buildbot hook handler
or inside the txghbot?

By integrating all webhooks handlers in a single place, for me it will be
easier to discover everything which is linked of triggered by webhooks.

Cheers,
Adi

PS: GitHub <-> Buildbot integration will follow soon after this PR will be
reviewed and approved https://github.com/twisted-infra/braid/pull/205 :)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160622/085a55d0/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Jun 22 15:33:18 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 22 Jun 2016 14:33:18 -0700
Subject: [Twisted-Python] Responding to PRs
In-Reply-To: <CAFycZ9cQcLRfxAFd8513nL0WKsiT8ejF-J1w56EVGwtWNYK5_g@mail.gmail.com>
References: <09d7f33f-dd21-4546-e92a-b37769e1eda9@itamarst.org>
 <ACF6EEA6-4C96-4AEA-B8F0-2425F1EFB938@twistedmatrix.com>
 <CAFycZ9eX8BFn-yZGN3fW86kih_bd65wFQA4Bqp21GtHmq6u2fw@mail.gmail.com>
 <D85ABED7-EAF7-415A-A40C-B50E1CCCCCA7@twistedmatrix.com>
 <20160614033336.GA23579@hammal>
 <1C8F481F-AC4B-4B4D-BB9F-91455772AA69@twistedmatrix.com>
 <CAFycZ9cQcLRfxAFd8513nL0WKsiT8ejF-J1w56EVGwtWNYK5_g@mail.gmail.com>
Message-ID: <3180BBD6-79AF-433B-ADF0-C4A6EC3413F8@twistedmatrix.com>


> On Jun 22, 2016, at 08:28, Adi Roiban <adi at roiban.ro> wrote:
> 
> 
> 
> On 14 June 2016 at 05:24, Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
>> 
>> I'm the owner of txghbot.  I hope it ends up being useful for Twisted!
> 
> I strongly suspect that it will be the official solution.  Thanks so much for doing this - the existence of this code is a structural expression of the setup process which short-circuits me needing to read and process all the developer documentation ;).
> 
> 
> I am trying to work on GitHub <-> Buildbot intergration (2 ways) and for doing this we will end up with something like a "bot" running inside/alongside Buildbot and triggering builds based on webhooks.
> 
> We will also have another "bot" inside buildbot which will POST Commit Status requests to GitHub.
> 
> Now, my questions are:
> 
> * Do we need an external txghbot ? 
> * Can we integrate all the webhook logic inside the buildbot hook handler or inside the txghbot?
> 
> By integrating all webhooks handlers in a single place, for me it will be easier to discover everything which is linked of triggered by webhooks.
> 
> Cheers,
> Adi
> 
> PS: GitHub <-> Buildbot integration will follow soon after this PR will be reviewed and approved https://github.com/twisted-infra/braid/pull/205 <https://github.com/twisted-infra/braid/pull/205> :)

I'd rather have a separate bot for workflow stuff, because buildbot can be fairly opaque and difficult to understand or run in isolation, especially if someone wants to set it up against a test project to try out workflow changes.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160622/3a8d1cf9/attachment-0002.html>

From rodrigc at crodrigues.org  Thu Jun 23 00:14:20 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 22 Jun 2016 23:14:20 -0700
Subject: [Twisted-Python] windows7-64-py3.5 buildbot failure
Message-ID: <CAG=rPVcLR-wd-i8ShgGOrJrVvaFg5sYYHbEKwySwHbF1AF0iJg@mail.gmail.com>

Hi,

I notice that this buildbot is failing because it cannot find vcvarsall.bat

https://buildbot.twistedmatrix.com/builders/windows7-64-py3.5/builds/174/steps/shell_2/logs/stdio

I was able to get a Windows 10 environment going by doing the following:

(1)  Installing Python 3.5 from https://www.python.org/downloads/windows/
(2)  Install the exact Microsoft compiler version specified in:
https://wiki.python.org/moin/WindowsCompilers
(3)   Ran this command to put CL.EXE in PATH:   "C:\Program Files
(x86)\Microsoft Visual C++ Build Tools\vcbuildtools.bat"
(4)  Ran these commands to put Python in PATH:

set PYTHON_ROOT=C:\Users\Craig\AppData\Local\Programs\Python\Python35
set
PATH=%PYTHON_ROOT%;%PYTHON_ROOT%\Scripts;%PYTHON_ROOT%\Tools\Scripts;%PATH%

At this point, I was able to checkout Twisted from git and do

python setup.py build
python setup.py install

Can we fix this buildbot at least to the point where we can do that?

Thanks.
--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160622/60935a0d/attachment-0002.html>

From adi at roiban.ro  Thu Jun 23 04:52:31 2016
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 23 Jun 2016 11:52:31 +0100
Subject: [Twisted-Python] Buildbot upgrade to latest eight branch
Message-ID: <CAFycZ9en8Vzts5s8Z4+vu8d1q73okX6736de=CH6XcedgsDQrw@mail.gmail.com>

Hi,

I have updated the version of buildbot used by
https://buildbot.twistedmatrix.com

it used to be an old forked version with some patches... but the fork did
not had good documentation.

To move things forward I have discarded the forked changes and went for
upstream version.

The changes were done in this PR
https://github.com/twisted-infra/braid/pull/205

The changes will allow us to use the new upstream code for GitHub <->
Buildbot integration ... aka webhooks and commit status reports.

This might introduce retrogressions and things might start to fall.
Please report any errors you see when interacting with buildbot here, over
#twisted-admin or by creating a new issue here
https://github.com/twisted-infra/braid/issues

Have a good day!
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160623/db435a64/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Jun 23 14:39:25 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 23 Jun 2016 13:39:25 -0700
Subject: [Twisted-Python] windows7-64-py3.5 buildbot failure
In-Reply-To: <CAG=rPVcLR-wd-i8ShgGOrJrVvaFg5sYYHbEKwySwHbF1AF0iJg@mail.gmail.com>
References: <CAG=rPVcLR-wd-i8ShgGOrJrVvaFg5sYYHbEKwySwHbF1AF0iJg@mail.gmail.com>
Message-ID: <7FD7D2C6-1DEA-4B64-ADE2-293EC84CF7A4@twistedmatrix.com>


> On Jun 22, 2016, at 23:14, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Can we fix this buildbot at least to the point where we can do that?


Since nobody answered, and I'd really rather not spend my vacation maintaining Windows buildbots, would you like the credentials to do this fixing yourself?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160623/e1faf98a/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Jun 23 14:40:43 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 23 Jun 2016 13:40:43 -0700
Subject: [Twisted-Python] Buildbot upgrade to latest eight branch
In-Reply-To: <CAFycZ9en8Vzts5s8Z4+vu8d1q73okX6736de=CH6XcedgsDQrw@mail.gmail.com>
References: <CAFycZ9en8Vzts5s8Z4+vu8d1q73okX6736de=CH6XcedgsDQrw@mail.gmail.com>
Message-ID: <5C1A7E78-BB95-4FC1-B323-7469916B443C@twistedmatrix.com>


> On Jun 23, 2016, at 03:52, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> I have updated the version of buildbot used by https://buildbot.twistedmatrix.com <https://buildbot.twistedmatrix.com/>
> 
> it used to be an old forked version with some patches... but the fork did not had good documentation.
> 
> To move things forward I have discarded the forked changes and went for upstream version.
> 
> The changes were done in this PR https://github.com/twisted-infra/braid/pull/205 <https://github.com/twisted-infra/braid/pull/205>
> 
> The changes will allow us to use the new upstream code for GitHub <-> Buildbot integration ... aka webhooks and commit status reports.
> 
> This might introduce retrogressions and things might start to fall.
> Please report any errors you see when interacting with buildbot here, over #twisted-admin or by creating a new issue here https://github.com/twisted-infra/braid/issues <https://github.com/twisted-infra/braid/issues>
Thanks a lot for doing this, Adi!  The less random infrastructure forks we maintain, the easier it gets to manage the burden of operating all this stuff...

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160623/27b31294/attachment-0002.html>

From rodrigc at crodrigues.org  Thu Jun 23 15:08:08 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 23 Jun 2016 14:08:08 -0700
Subject: [Twisted-Python] windows7-64-py3.5 buildbot failure
In-Reply-To: <7FD7D2C6-1DEA-4B64-ADE2-293EC84CF7A4@twistedmatrix.com>
References: <CAG=rPVcLR-wd-i8ShgGOrJrVvaFg5sYYHbEKwySwHbF1AF0iJg@mail.gmail.com>
 <7FD7D2C6-1DEA-4B64-ADE2-293EC84CF7A4@twistedmatrix.com>
Message-ID: <CAG=rPVcFbDfbN_rehDB82=sWjMK=pJX2Y9DEtvpYRKe_SUp_Vg@mail.gmail.com>

On Thu, Jun 23, 2016 at 1:39 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
>
> On Jun 22, 2016, at 23:14, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
>
> Can we fix this buildbot at least to the point where we can do that?
>
>
> Since nobody answered, and I'd really rather not spend my vacation
> maintaining Windows buildbots, would you like the credentials to do this
> fixing yourself?
>

OK.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160623/cbb5bd5e/attachment-0002.html>

From adi at roiban.ro  Fri Jun 24 08:15:26 2016
From: adi at roiban.ro (Adi Roiban)
Date: Fri, 24 Jun 2016 15:15:26 +0100
Subject: [Twisted-Python] Buildbot upgrade to latest eight branch
In-Reply-To: <5C1A7E78-BB95-4FC1-B323-7469916B443C@twistedmatrix.com>
References: <CAFycZ9en8Vzts5s8Z4+vu8d1q73okX6736de=CH6XcedgsDQrw@mail.gmail.com>
 <5C1A7E78-BB95-4FC1-B323-7469916B443C@twistedmatrix.com>
Message-ID: <CAFycZ9fPqJ1ec-WddC1jVX8brCnPqZjNTZDTkjBniMWfMjubAA@mail.gmail.com>

Reporting the build status from Buildbot to GitHub was deployed into
production using the branch which is waiting a review before being merged
in master

https://github.com/twisted-infra/braid/pull/206

Please report any feedback or issues with the GitHub commit status reports
in the PR

Thanks!


-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160624/92e2fa58/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Jun 24 15:38:15 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 24 Jun 2016 14:38:15 -0700
Subject: [Twisted-Python] Buildbot upgrade to latest eight branch
In-Reply-To: <CAFycZ9fPqJ1ec-WddC1jVX8brCnPqZjNTZDTkjBniMWfMjubAA@mail.gmail.com>
References: <CAFycZ9en8Vzts5s8Z4+vu8d1q73okX6736de=CH6XcedgsDQrw@mail.gmail.com>
 <5C1A7E78-BB95-4FC1-B323-7469916B443C@twistedmatrix.com>
 <CAFycZ9fPqJ1ec-WddC1jVX8brCnPqZjNTZDTkjBniMWfMjubAA@mail.gmail.com>
Message-ID: <A2423E66-3682-41D6-81CD-A5ECD804F543@twistedmatrix.com>


> On Jun 24, 2016, at 07:15, Adi Roiban <adi at roiban.ro> wrote:
> 
> Reporting the build status from Buildbot to GitHub was deployed into production using the branch which is waiting a review before being merged in master
> 
> https://github.com/twisted-infra/braid/pull/206 <https://github.com/twisted-infra/braid/pull/206>
> 
> Please report any feedback or issues with the GitHub commit status reports in the PR

Woohoo!

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160624/d5bf1342/attachment-0002.html>

From hawkowl at atleastfornow.net  Tue Jun 28 06:44:08 2016
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Tue, 28 Jun 2016 22:44:08 +1000
Subject: [Twisted-Python] Twisted 16.3.0 Prerelease 2 Announcement
Message-ID: <D7B5EB1B-B56D-4357-AD17-8D25BCC3F70B@atleastfornow.net>

Hi everyone,

Here's another prerelease in the 16.3 series -- fixing a 16.2 regression in HTTP timeouts not working.

For more information, check the NEWS file (link provided below).

As usual, it's available for download -- go here (https://twistedmatrix.com/Releases/pre/16.3.0pre2/) to get the prerelease tarballs and the full NEWS file. If you want to install it right away, run:

   pip install https://twistedmatrix.com/Releases/pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2

A reminder that if you would like to try out the newly-landed HTTP/2 support, run:

   pip install -U https://twistedmatrix.com/Releases/pre/16.3.0pre2/Twisted-16.3.0rc2.tar.bz2#egg=Twisted[http2,tls]

This will download the new HTTP/2 dependencies and the TLS requirements as well.

Please let me know if you have any issues, as well as if you don't! If everything works well, that's a good thing for me to know :)

Twisted Regards,
Amber Brown (HawkOwl)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20160628/75b6f0d6/attachment.sig>

From dansut at gmail.com  Tue Jun 28 11:49:05 2016
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Tue, 28 Jun 2016 13:49:05 -0400
Subject: [Twisted-Python] Style/testing for log-related changes
In-Reply-To: <50BD783F-5296-40A3-B2A5-8A7F1F226D1B@twistedmatrix.com>
References: <57555CA8.40404@imperial.ac.uk>
 <50BD783F-5296-40A3-B2A5-8A7F1F226D1B@twistedmatrix.com>
Message-ID: <CADzPF4tHXfE3qzn4fKOqk4NSEKvh8z_zfdi-YLx4v7-sOp73eA@mail.gmail.com>

I'm also finding myself looking at doing some of this so thought it
might be worth rejuvenating this thread...

On Jun 6, 2016, at 04:21, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> > I'd like to submit a patch to convert t.conch.ssh to the new logging. The
> > main reason is that the conch code logs a *lot* of really, really, really
> > boring crap that I want to throw away because it just clutters up the logs
> > e.g.
> > https://github.com/twisted/twisted/blob/twisted-16.2.0/twisted/conch/ssh/connection.py#L454

On Mon, Jun 6, 2016 at 4:40 PM, Glyph <glyph at twistedmatrix.com> wrote:
> No need to justify it - any work to move us internally to new APIs so we can
> finally get to the business of deprecating the old ones would be great!

Looking through the code it doesn't actually seem like there's that
much work to get there, but as someone who is new to this project I
feel a bit more guidance would be useful. There seems to be little in
the way of examples of this being done, and when it has been done
there seem to be 2 approaches:

- one with a style similar to the examples in the docs:
    _log = twisted.logger.Logger()
    self._log.emit()
    https://github.com/twisted/twisted/commit/ff7a05da

- and a more recent one that uses this style:
    twisted.logger._loggerFor(self).emit()
    https://github.com/twisted/twisted/commit/c575f1d

Appreciating consistancy is important and not wanting to waste time
doing the former when the latter is now thought of as a better idea

> > Moving it to the new logging would, at very least, let me trivially write an
> > observer which throws away these by module.
>
> No need to write one!  This is an explicit use-case for new logging: see
> https://twistedmatrix.com/documents/16.2.0/api/twisted.logger.LogLevelFilterPredicate.html
> and
> https://twistedmatrix.com/documents/16.2.0/api/twisted.logger.FilteringLogObserver.html
>
> (You may also be interested in figuring out a solution to
> https://twistedmatrix.com/trac/ticket/7969 )

That looks like an interesting and worthwhile challenge, but first a
little practice porting the basics to the new logger

> Does anyone have an example ticket/commit for a conversion to the new
> logging showing the general style, and the technique used for writing tests
> for that?

This is what I came up with while trying to get twistd related
messages all emitted through new logger and thus not have [-] in
standard textual log:
  https://github.com/twisted/twisted/compare/bb0d1d67...dansut:logger-update
Probably did some really daft stuff here but comments appreciated on
my forks branch to get me working in a way which will be acceptable
for PRs in future.

> twistd itself was converted over -
> https://twistedmatrix.com/trac/ticket/8235 - but of course that's mostly
> from the consumer side rather than emitting logs.

That's where I found use of _loggerFor ...

> It shouldn't be too complex, honestly; just get rid of all manual string
> formatting, and convert any %()s format strings to {}.

That side of things is pretty clear, there are a few places where
longer strings are being logged that might be questionable, and a
bunch of places where utility function log.callWithLogger is used that
I'm not sure how to handle.

> The testing support is the same as for the old logging system (add a global
> observer, remove it in an addCleanup, assert about the things it caught)
> because it's still just key-value pairs, they're just better-defined now.

Any chance of a pointer to a good clear example to emulate?

Also still trying to get my head around whether there should be one
Trac ticket to cover all logger porting effort, or individual tickets
for each porting effort.

Sorry for being such a newb, all help and pointers appreciated.
Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>



From commercials24 at yahoo.de  Wed Jun 29 16:39:02 2016
From: commercials24 at yahoo.de (steven meier)
Date: Thu, 30 Jun 2016 00:39:02 +0200
Subject: [Twisted-Python] qt5 and twisted, reactor already installed,
	python 2.x
Message-ID: <1467239942.6939.24.camel@yahoo.de>

hi,


ive got some twisted code that runs on its own
and some python code that also runs on its own,

now i would like to combine the two, so i added:

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv) # your code to init QtCore
    import qt5reactor
    qt5reactor.install()
    from twisted.internet import reactor
   


to use some qt reactor with twisted.
running the qt code with those lines also works.
but as soon as i import other code into this one i get:


python main_code.py 
Gtk-Message: Failed to load module "canberra-gtk-module"
Traceback (most recent call last):
  File "main_code.py", line 29, in <module>
    qt5reactor.install()
  File "/home/julius/.local/lib/python2.7/site-packages/qt5reactor.py",
line 412, in posixinstall
    installReactor(p)
  File
"/home/julius/.local/lib/python2.7/site-packages/twisted/internet/main.py", line 32, in installReactor
    raise error.ReactorAlreadyInstalledError("reactor already
installed")
twisted.internet.error.ReactorAlreadyInstalledError: reactor already
installed




here is my code:
when importing get_main_page i get the error above...

import sys
from PyQt5 import QtWidgets
from untitled import Ui_MainWindow
#from webchat import get_main_page

class Main(QtWidgets.QMainWindow):

    def __init__(self):
        QtWidgets.QMainWindow.__init__(self)
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.setupSignals()

    def button_1_Clicked(self):
        self.ui.textbox_2.setText(self.ui.textbox_1.text())

    def setupSignals(self):
        #self.ui.textbox_1.textChanged.connect(self.textbox_1_Changed)
        self.ui.button_1.clicked.connect(self.button_1_Clicked)




if __name__ == '__main__':
    #app = QtWidgets.QApplication(sys.argv)
    
    app = QtWidgets.QApplication(sys.argv) # your code to init QtCore
    import qt5reactor
    qt5reactor.install()
    from twisted.internet import reactor
    print "testing..."

    #get_main_page()
    window = Main()
    window.show()
    #sys.exit(app.exec_())
    def printMe(argument):
        print argument

    def lala():
        reactor.callLater(5, printMe, '123')


    lala()
    reactor.run()






webchat.py (containing get_main_page) starts with the lines:

from twisted.web.client import Agent, CookieAgent, getPage,
HTTPClientFactory
from bs4 import BeautifulSoup
import json
import urllib
import random
from myglobals import *
from twisted.internet.task import LoopingCall




how can i get a more "refined" error message, that actually tells me
which line is causing the error?

because as i said, the line 29 in main_code works when i do not import
get_main_page




From glyph at twistedmatrix.com  Wed Jun 29 17:01:17 2016
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 29 Jun 2016 16:01:17 -0700
Subject: [Twisted-Python] qt5 and twisted, reactor already installed,
	python 2.x
In-Reply-To: <1467239942.6939.24.camel@yahoo.de>
References: <1467239942.6939.24.camel@yahoo.de>
Message-ID: <095CAE26-E5A7-4145-A6E8-35659A2AB05B@twistedmatrix.com>


> On Jun 29, 2016, at 15:39, steven meier <commercials24 at yahoo.de> wrote:
> 
> 
> here is my code:
> when importing get_main_page i get the error above...
> 
> import sys
> from PyQt5 import QtWidgets
> from untitled import Ui_MainWindow
> #from webchat import get_main_page

You have to put the qt5reactor installation at the very top of the very first file that you run.  What's happened here is that you imported some Twisted code that did 'from twisted.internet import reactor' at the top level, which unfortunately far too many modules do, before you installed the qt5 reactor.

For this and other reasons, you should always put your `if __name__ == '__main__'` block - if you have one at all - at the very top of your script, not the bottom.  This blog post may be informative: https://moshez.wordpress.com/2016/06/07/__name__-__main__-considered-harmful/

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160629/3ce8aeb3/attachment-0002.html>

From adi at roiban.ro  Thu Jun 30 04:43:17 2016
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 30 Jun 2016 11:43:17 +0100
Subject: [Twisted-Python] Coverage exceptions
Message-ID: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>

Hi,

Recently we have introduced a hard check of 100% coverage for all changes.
This is done via coverage + codecov + github protected branches.

Now, if your patch is not 100% covered github will not let you merge it.

See for example this change:
https://github.com/twisted/twisted/pull/261/files#diff-0fea8a8ca713deb7ea6a10053273319aR2360

The errback is there to help with test failures ... but the test should
never fail, so that errback is never called... and that line is not covered.

How should we proceed with these changes?

Maybe this is not the best example and that code could be refactored... but
I think that the topic of ignoring missing coverage is still valid.

I suggest to introduce `  # pragma: no cover`

and update the coverage config with

[report]
exclude_lines =
    pragma: no cover

-----------

What do you think?

Thanks!
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160630/ad3526b2/attachment-0002.html>

From commercials24 at yahoo.de  Thu Jun 30 04:44:44 2016
From: commercials24 at yahoo.de (steven meier)
Date: Thu, 30 Jun 2016 12:44:44 +0200
Subject: [Twisted-Python] qt5 and twisted, reactor already installed,
 python 2.x
In-Reply-To: <095CAE26-E5A7-4145-A6E8-35659A2AB05B@twistedmatrix.com>
References: <1467239942.6939.24.camel@yahoo.de>
 <095CAE26-E5A7-4145-A6E8-35659A2AB05B@twistedmatrix.com>
Message-ID: <1467283484.6939.26.camel@yahoo.de>

On Wed, 2016-06-29 at 16:01 -0700, Glyph wrote:
> 
> > On Jun 29, 2016, at 15:39, steven meier <commercials24 at yahoo.de>
> > wrote:
> > 
> > 
> > here is my code:
> > when importing get_main_page i get the error above...
> > 
> > import sys
> > from PyQt5 import QtWidgets
> > from untitled import Ui_MainWindow
> > #from webchat import get_main_page
> > 
> 
> You have to put the qt5reactor installation at the very top of the
> very first file that you run.  What's happened here is that you
> imported some Twisted code that did 'from twisted.internet import
> reactor' at the top level, which unfortunately far too many modules
> do, before you installed the qt5 reactor.
> 
> 
> For this and other reasons, you should always put your `if __name__ ==
> '__main__'` block - if you have one at all - at the very top of your
> script, not the bottom.  This blog post may be
> informative: https://moshez.wordpress.com/2016/06/07/__name__-__main__-considered-harmful/
> 
> 
> -glyph
> _______________________________________________



thank you for the quick reply, you were right.
but because of the qt imports / Main class my file now basically has the
line:
from webchat import get_main_page

at the end with the rest unchanged....but at least it runs




From commercials24 at yahoo.de  Thu Jun 30 04:49:00 2016
From: commercials24 at yahoo.de (steven meier)
Date: Thu, 30 Jun 2016 12:49:00 +0200
Subject: [Twisted-Python] qt5 and twisted, reactor already installed,
 python 2.x
In-Reply-To: <095CAE26-E5A7-4145-A6E8-35659A2AB05B@twistedmatrix.com>
References: <1467239942.6939.24.camel@yahoo.de>
 <095CAE26-E5A7-4145-A6E8-35659A2AB05B@twistedmatrix.com>
Message-ID: <1467283740.6939.29.camel@yahoo.de>


> You have to put the qt5reactor installation at the very top of the
> very first file that you run.  What's happened here is that you
> imported some Twisted code that did 'from twisted.internet import
> reactor' at the top level, which unfortunately far too many modules
> do, before you installed the qt5 reactor.


So twisted modules should not at all import the reactor but rely on the
user code todo that?









From exarkun at twistedmatrix.com  Thu Jun 30 05:13:52 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Thu, 30 Jun 2016 07:13:52 -0400
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
Message-ID: <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>

On Thu, Jun 30, 2016 at 6:43 AM, Adi Roiban <adi at roiban.ro> wrote:

> Hi,
>
> Recently we have introduced a hard check of 100% coverage for all changes.
> This is done via coverage + codecov + github protected branches.
>
> Now, if your patch is not 100% covered github will not let you merge it.
>
> See for example this change:
> https://github.com/twisted/twisted/pull/261/files#diff-0fea8a8ca713deb7ea6a10053273319aR2360
>
> The errback is there to help with test failures ... but the test should
> never fail, so that errback is never called... and that line is not covered.
>
>
It doesn't always make sense to require 100% execution of all test code.
It's not at all uncommon to only have code in a test suite that runs when a
test fails.  Historically, Twisted has never had a requirement of 100%
execution of test code.  The only test suite coverage requirements that
have commonly been requested or enforced is for coverage of implementation
code.

I'd suggest removing the coverage enforcement for test suite code.


> How should we proceed with these changes?
>
> Maybe this is not the best example and that code could be refactored...
> but I think that the topic of ignoring missing coverage is still valid.
>
> I suggest to introduce `  # pragma: no cover`
>
> and update the coverage config with
>
> [report]
> exclude_lines =
>     pragma: no cover
>
>
This seems like the wrong solution to me.  It forces contributors to do
extra work to mark their test code as an exception *and* provides a
mechanism for incorrectly bypassing the check by using a no-cover pragma in
implementation code.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160630/4f9e5eab/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Jun 30 16:09:20 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 30 Jun 2016 15:09:20 -0700
Subject: [Twisted-Python] qt5 and twisted, reactor already installed,
	python 2.x
In-Reply-To: <1467283740.6939.29.camel@yahoo.de>
References: <1467239942.6939.24.camel@yahoo.de>
 <095CAE26-E5A7-4145-A6E8-35659A2AB05B@twistedmatrix.com>
 <1467283740.6939.29.camel@yahoo.de>
Message-ID: <719CE020-992A-433D-95BA-F030538490F7@twistedmatrix.com>


> On Jun 30, 2016, at 03:49, steven meier <commercials24 at yahoo.de> wrote:
> 
> 
>> You have to put the qt5reactor installation at the very top of the
>> very first file that you run.  What's happened here is that you
>> imported some Twisted code that did 'from twisted.internet import
>> reactor' at the top level, which unfortunately far too many modules
>> do, before you installed the qt5 reactor.
> 
> 
> So twisted modules should not at all import the reactor but rely on the
> user code todo that?

Yes.  Unfortunately, lots of places do import the reactor directly today, but we have long since decided that this is a bad way to do things.  This is why e.g. react <https://twistedmatrix.com/documents/16.2.0/api/twisted.internet.task.html#react> passes the reactor to your function as a parameter, so you can pass it on down to any other code that needs it.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160630/2ff752aa/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Jun 30 16:25:38 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 30 Jun 2016 15:25:38 -0700
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
 <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
Message-ID: <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>


> On Jun 30, 2016, at 04:13, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> On Thu, Jun 30, 2016 at 6:43 AM, Adi Roiban <adi at roiban.ro <mailto:adi at roiban.ro>> wrote:
> Hi,
> 
> Recently we have introduced a hard check of 100% coverage for all changes.
> This is done via coverage + codecov + github protected branches.
> 
> Now, if your patch is not 100% covered github will not let you merge it.
> 
> See for example this change: https://github.com/twisted/twisted/pull/261/files#diff-0fea8a8ca713deb7ea6a10053273319aR2360 <https://github.com/twisted/twisted/pull/261/files#diff-0fea8a8ca713deb7ea6a10053273319aR2360>
> 
> The errback is there to help with test failures ... but the test should never fail, so that errback is never called... and that line is not covered.
> 
> 
> It doesn't always make sense to require 100% execution of all test code.  It's not at all uncommon to only have code in a test suite that runs when a test fails.  Historically, Twisted has never had a requirement of 100% execution of test code.  The only test suite coverage requirements that have commonly been requested or enforced is for coverage of implementation code.
> 
> I'd suggest removing the coverage enforcement for test suite code.

I am inclined to disagree, albeit mildly.

When one is writing a deliberately un-covered path in test code, presumably, one is writing either a test helper - a mock, fake, or utility for setting up a real implementation - or an assertion method.  Historically, I believe that when we've invested more heavily in making these utilities "real" themselves, and not just throwaway stuff inline in a test method or module, the benefits have far outweighed the costs.  In fact the availability of proto_helpers is one of the selling points of Twisted as opposed to other competing engines.

Therefore, I think that asking folks to add independent test coverage to verify their fakes and ensure that the failure-reporting of their assertion messages are helpful in the event a test fails is a generally good idea, and we should keep the requirement for 100% coverage on both test and implementation coverage.

However, if there is contention around this, I'd much rather get a ratchet in place for implementation code that's reliable and everyone is happy with, so I'm OK with disabling coverage reporting for our *.test.* packages as a step towards that.

> How should we proceed with these changes?
> 
> Maybe this is not the best example and that code could be refactored... but I think that the topic of ignoring missing coverage is still valid.
> 
> I suggest to introduce `  # pragma: no cover`
> 
> and update the coverage config with
> 
> [report]
> exclude_lines =
>     pragma: no cover
> 
> 
> This seems like the wrong solution to me.  It forces contributors to do extra work to mark their test code as an exception and provides a mechanism for incorrectly bypassing the check by using a no-cover pragma in implementation code.

In any case I totally agree with this.  If we have a categorical difference in types of code (test vs. non-test) then let's make that distinction, but we should not be adding one-off exceptions as an exercise of non-uniform reviewer judgement on every review.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160630/4e1ad970/attachment-0002.html>

From rodrigc at crodrigues.org  Thu Jun 30 16:55:06 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 30 Jun 2016 15:55:06 -0700
Subject: [Twisted-Python] FreeBSD buildbots down?
Message-ID: <CAG=rPVfaqeNQPbqjKU=nyr6rNoF7BK7977bH0aH7jSZntWRYgg@mail.gmail.com>

Hi,

The FreeBSD buildbots seem to be down since May 26.
https://buildbot.twistedmatrix.com/boxes-all

Any ideas as to what is wrong?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160630/b464d162/attachment-0002.html>

From meejah at meejah.ca  Thu Jun 30 17:22:29 2016
From: meejah at meejah.ca (meejah)
Date: Fri, 01 Jul 2016 03:22:29 +0400
Subject: [Twisted-Python] qt5 and twisted, reactor already installed,
	python 2.x
In-Reply-To: <719CE020-992A-433D-95BA-F030538490F7@twistedmatrix.com> (Glyph
 Lefkowitz's message of "Thu, 30 Jun 2016 15:09:20 -0700")
References: <1467239942.6939.24.camel@yahoo.de>
 <095CAE26-E5A7-4145-A6E8-35659A2AB05B@twistedmatrix.com>
 <1467283740.6939.29.camel@yahoo.de>
 <719CE020-992A-433D-95BA-F030538490F7@twistedmatrix.com>
Message-ID: <86y45m2rey.fsf@atlantis.meejah.ca>

Glyph Lefkowitz <glyph at twistedmatrix.com> writes:

> Yes.  Unfortunately, lots of places do import the reactor directly
> today, but we have long since decided that this is a bad way to do
> things.  This is why e.g. react
> <https://twistedmatrix.com/documents/16.2.0/api/twisted.internet.task.h
> tml#react> passes the reactor to your function as a parameter, so you
> can pass it on down to any other code that needs it.

As a "casual" user of Twisted, I was somewhat skeptical of this "pass
the reactor everywhere" approach -- but I did try to follow this advice
in txtorcon, and was rewarded with easy-to-write tests regarding timing,
which are (usually) a horror-show *and* I was rewarded with having to
think about "do I *really* need the reactor here?".

Now, sometimes you can compromise. For example, see my AddrMap class
which assigns a "self.scheduler" which is usually just gotten by
importing from twisted.internet.reactor -- *but* critically, the tests
can re-assign this:

   https://github.com/meejah/txtorcon/blob/master/test/test_addrmap.py#L109

Ideally, this would have been passed-in via the __init__ but,
*shruggy-face*. The point being, you can incrementally upgrade to "the
better way".

Overall, I'm very sold on accessing "the reactor" via "self dot
something" rather than via imports *even if* the only reason ends up
being "because testing". It's pretty likely that some random user you've
never heard of has a similar use-case to that thing you needed to do in
that one test... (I've read this elsewhere, not my idea)

If nothing else, it will cause you to pause and consider "how will this
thing access the reactor", which will cause you to think about
concurrency issues... (Or, contrary-wise, classes which *don't* have a
self._reactor definitely do *not* need any thinking about concurrency --
which is also a big win).

In any case, my concurrency-hackles raise when I see ".. import
reactor". Best to localize these fears to "self._reactor".

-- 
meejah




From rodrigc at crodrigues.org  Thu Jun 30 18:09:35 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 30 Jun 2016 17:09:35 -0700
Subject: [Twisted-Python] Fwd: More tests running on Python 3
In-Reply-To: <CAG=rPVeu-GS=wEb+RdhvwUC8+q72MZKG+-3=Twb6PE8Qwi_bEw@mail.gmail.com>
References: <CAG=rPVeu-GS=wEb+RdhvwUC8+q72MZKG+-3=Twb6PE8Qwi_bEw@mail.gmail.com>
Message-ID: <CAG=rPVfnCRQae9AvzKJcjHV_CTV3vq6nePbyn0JiP2=+qZ+wAA@mail.gmail.com>

Hi,

I looked at these two Travis builds on Linux

DATE              BUILD
====              =====
June  3, 2016    https://travis-ci.org/twisted/twisted/builds/135219940
June 30, 2016    https://travis-ci.org/twisted/twisted/builds/141426367


I noticed:

DATE             Tests on Python 2.7
====              =====================================
June  3, 2016     11438 (skips=3013, successes=8425)
June 30, 2016    11496 (skips=2063, successes=9433)


DATE             Tests on Python 3.5
====               =====================================
June  3, 2016     6367 (skips=1533, successes=4834)
June 30, 2016    7902 (skips=1693, successes=6209)

So it looks like some progress is being made with getting more
tests to pass on Python 3.  Thanks for everyone helping with my code
reviews!

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160630/b855d4b4/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Jun 30 18:32:35 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 30 Jun 2016 17:32:35 -0700
Subject: [Twisted-Python] Fwd: More tests running on Python 3
In-Reply-To: <CAG=rPVfnCRQae9AvzKJcjHV_CTV3vq6nePbyn0JiP2=+qZ+wAA@mail.gmail.com>
References: <CAG=rPVeu-GS=wEb+RdhvwUC8+q72MZKG+-3=Twb6PE8Qwi_bEw@mail.gmail.com>
 <CAG=rPVfnCRQae9AvzKJcjHV_CTV3vq6nePbyn0JiP2=+qZ+wAA@mail.gmail.com>
Message-ID: <C2FC23B3-0646-479E-A623-7E931179A8C0@twistedmatrix.com>


> On Jun 30, 2016, at 17:09, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Hi,
> 
> I looked at these two Travis builds on Linux
> 
> DATE              BUILD
> ====              =====
> June  3, 2016    https://travis-ci.org/twisted/twisted/builds/135219940 <https://travis-ci.org/twisted/twisted/builds/135219940>
> June 30, 2016    https://travis-ci.org/twisted/twisted/builds/141426367 <https://travis-ci.org/twisted/twisted/builds/141426367>
> 
> 
> I noticed:
> 
> DATE             Tests on Python 2.7
> ====              =====================================
> June  3, 2016     11438 (skips=3013, successes=8425)
> June 30, 2016    11496 (skips=2063, successes=9433)
> 
> 
> DATE             Tests on Python 3.5
> ====               =====================================
> June  3, 2016     6367 (skips=1533, successes=4834)
> June 30, 2016    7902 (skips=1693, successes=6209)
> 
> So it looks like some progress is being made with getting more
> tests to pass on Python 3.  Thanks for everyone helping with my code reviews!

Wow, these are great numbers - thanks for digging them up!

Maybe these should be mentioned in the release notes?

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160630/757be806/attachment-0002.html>

From exarkun at twistedmatrix.com  Thu Jun 30 18:36:37 2016
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Thu, 30 Jun 2016 20:36:37 -0400
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
 <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
 <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>
Message-ID: <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>

On Thu, Jun 30, 2016 at 6:25 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Jun 30, 2016, at 04:13, Jean-Paul Calderone <exarkun at twistedmatrix.com>
> wrote:
>
> On Thu, Jun 30, 2016 at 6:43 AM, Adi Roiban <adi at roiban.ro> wrote:
>
>> Hi,
>>
>> Recently we have introduced a hard check of 100% coverage for all changes.
>> This is done via coverage + codecov + github protected branches.
>>
>> Now, if your patch is not 100% covered github will not let you merge it.
>>
>> See for example this change:
>> https://github.com/twisted/twisted/pull/261/files#diff-0fea8a8ca713deb7ea6a10053273319aR2360
>>
>> The errback is there to help with test failures ... but the test should
>> never fail, so that errback is never called... and that line is not covered.
>>
>>
> It doesn't always make sense to require 100% execution of all test code.
> It's not at all uncommon to only have code in a test suite that runs when a
> test fails.  Historically, Twisted has never had a requirement of 100%
> execution of test code.  The only test suite coverage requirements that
> have commonly been requested or enforced is for coverage of implementation
> code.
>
> I'd suggest removing the coverage enforcement for test suite code.
>
>
> I am inclined to disagree, albeit mildly.
>
> When one is writing a deliberately un-covered path in test code,
> presumably, one is writing either a test helper - a mock, fake, or utility
> for setting up a real implementation - or an assertion method.
> Historically, I believe that when we've invested more heavily in making
> these utilities "real" themselves, and not just throwaway stuff inline in a
> test method or module, the benefits have far outweighed the costs.  In fact
> the availability of proto_helpers is one of the selling points of Twisted
> as opposed to other competing engines.
>

I mostly agree with this.  However, I was thinking of a slightly different
pattern when I wrote my earlier email.  Here's are a couple (fictional)
examples of that pattern one might find in unit tests for application code
(and there's nothing Twisted-specific here):

if foo:
    self.fail("Foo!")

try:
    foo()
except:
    bar
else:
    self.fail("Foo :(")

It's not exactly that this *can't* be code that's executed in a passing run
of the test suite.  It's more a question of what the right balance point
is.  If someone wants to generalize logic like this (and, fortunately,
someone did generalize these *particular* examples - they're assertFalse
and assertRaises, respectively) then that's great and the result is a
higher level of confidence resulting from a successful run of the test
suite.  I'd suggest that if tests like these exercise all of the
implementation code (on a successful run), though, then you've still
achieved a pretty high level of test coverage and maybe further efforts are
more productively directed elsewhere (increasing the coverage level of
other implementation code in Twisted, for example :).

If folks want a higher bar than this, I'm not going to argue (at least not
much, at least not now).  The bar *hasn't* been this high in the past
though (and there are many many such cases to be found in Twisted's test
suite right now and I don't have the impression this has ever been *much*
of a source of problems).


> Therefore, I think that asking folks to add independent test coverage to
> verify their fakes and ensure that the failure-reporting of their assertion
> messages are helpful in the event a test fails is a generally good idea,
> and we should keep the requirement for 100% coverage on both test and
> implementation coverage.
>
> However, if there is contention around this, I'd much rather get a ratchet
> in place for implementation code that's reliable and everyone is happy
> with, so I'm OK with disabling coverage reporting for our *.test.* packages
> as a step towards that.
>
>
I completely agree that fakes should be verified.  So much so that I'm not
even sure I believe in fakes in *general* anymore.  Instead, you should
just have easy to use interfaces and ship inexpensive implementations
alongside whatever other implementations you also need.  And all those
implementations should have great test coverage.  I also completely agree
that when tests fail, they should do so in a meaningful way.  I suspect
slightly the implication that automated test coverage for the failure case
demonstrates the failure is reported meaningfully, though. :)  I think
we're still stuck with relying on humans (authors, reviewers) to verify
that property.

Jean-Paul


> How should we proceed with these changes?
>>
>> Maybe this is not the best example and that code could be refactored...
>> but I think that the topic of ignoring missing coverage is still valid.
>>
>> I suggest to introduce `  # pragma: no cover`
>>
>> and update the coverage config with
>>
>> [report]
>> exclude_lines =
>>     pragma: no cover
>>
>>
> This seems like the wrong solution to me.  It forces contributors to do
> extra work to mark their test code as an exception *and* provides a
> mechanism for incorrectly bypassing the check by using a no-cover pragma in
> implementation code.
>
>
> In any case I totally agree with *this*.  If we have a categorical
> difference in types of code (test vs. non-test) then let's make that
> distinction, but we should not be adding one-off exceptions as an exercise
> of non-uniform reviewer judgement on every review.
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160630/72f32c74/attachment-0002.html>

From rodrigc at crodrigues.org  Thu Jun 30 19:37:41 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 30 Jun 2016 18:37:41 -0700
Subject: [Twisted-Python] Coverage exceptions
In-Reply-To: <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>
References: <CAFycZ9dG0o3kXyi+mHwhAD55EDYh7bsPEpF3JDrFE7OvCeBi_g@mail.gmail.com>
 <CAEeXt4PyX_kavaZ4JG9BHHozA8pBsAY5LYva4dFRprZ98oqS+w@mail.gmail.com>
 <D24D6BA1-0A90-4CE8-AE4B-E0E738F5EB96@twistedmatrix.com>
 <CAEeXt4MqMZRkd3u0DKW4zwfTd5d_a4_yOB=MCwHSHH8yduLt_w@mail.gmail.com>
Message-ID: <CAG=rPVd+HF3LUnb6EX-UYuGDSqLk8-e7XT-AV26RCgt_phfU8g@mail.gmail.com>

Hi,

The conversation about coverage exceptions came up due to this:

https://github.com/twisted/twisted/pull/261

I have that up to 97.87% of patch coverage.  I cannot merge it because the
codecov integration with GitHub
is currently configured to not accept patches which don't have 100% patch
coverage.

Can someone please take a look at that, and make a decision as to how to
move that PR forward?
Thanks.
--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160630/84f9b879/attachment-0002.html>

From rodrigc at crodrigues.org  Thu Jun 30 22:19:29 2016
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 30 Jun 2016 21:19:29 -0700
Subject: [Twisted-Python] Captcha warnings preventing me from submitting
	changes to Trac ticket
Message-ID: <CAG=rPVcD5OFN3jpvqP1H4FC8R5NsJVzE50WSSrd+MNOm4_dg6A@mail.gmail.com>

Hi,

I tried to modify a Trac ticket, but when I tried to submit the changes,
I got a Captcha warning that prevented it.
When I clicked on the checkbox, "I am not a robot" and tried to re-submit,
the Captcha warning re-appeared and blocked the submission.

Can someone please fix this?

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160630/816c5f18/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Jun 30 23:59:05 2016
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 30 Jun 2016 22:59:05 -0700
Subject: [Twisted-Python] Captcha warnings preventing me from submitting
	changes to Trac ticket
In-Reply-To: <CAG=rPVcD5OFN3jpvqP1H4FC8R5NsJVzE50WSSrd+MNOm4_dg6A@mail.gmail.com>
References: <CAG=rPVcD5OFN3jpvqP1H4FC8R5NsJVzE50WSSrd+MNOm4_dg6A@mail.gmail.com>
Message-ID: <B5EFF7B7-1A94-458A-B7CD-29698FC51898@twistedmatrix.com>


> On Jun 30, 2016, at 21:19, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> Hi,
> 
> I tried to modify a Trac ticket, but when I tried to submit the changes,
> I got a Captcha warning that prevented it.
> When I clicked on the checkbox, "I am not a robot" and tried to re-submit,
> the Captcha warning re-appeared and blocked the submission.
> 
> Can someone please fix this?

I've made you a Trac admin.  You can now go into https://twistedmatrix.com/trac/admin/spamfilter/monitor and classify your own posts as ham, which should prevent this from happening to you (or others!) in the future.  The way that this works is that you "delete as ham" any posts that are legit, and "delete as spam" any garbage.  There's quite a backlog since I've been at conferences and on vacation for a while, and I am the only one who looks at it with any regularity :-).

-glyph

P.S.: Subtext: please look at this page occasionally and classify others posts as well...

P.P.S.: OK I guess it's just 'text' now, since I wrote it there.  Or, post-text, at the very least.

P.P.P.S.: Some out there might be thinking "do we really need a spam filter? won't github auth protect us?" and, ICYMI: no, it turns out that it doesn't, github definitely lets spammers in.  They do so at a lower rate than our process used to, but we tried deactivating the spam filter after migrating to github auth, and we definitely got some crap tickets.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20160630/cd3608b9/attachment-0002.html>

