From exarkun at twistedmatrix.com  Sun Jul  1 00:05:02 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 01 Jul 2007 04:05:02 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1183262702.07.1098746416@twistedmatrix.com

Bug summary
______________________
Summary for 2007-06-24 through 2007-07-01
Bugs opened: 14    Bugs closed: 9  Total open bugs: 985 (+5)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +4  |Highest:  -4          |Conch:  +0             
|Enhancement:  +1  |Normal:   +9          |Core:   +9             
|Task:         +1  |Low:      +0          |Pb:     -3             
                   |Lowest:   +1                                  


New / Reopened Bugs
______________________
                    ===== Normal =====
[#2715] SSHFactory shouldn't disable core dumps (opened by exarkun)
    defect          conch      http://twistedmatrix.com/trac/ticket/2715

[#2716] Eliminate relative imports from twisted.conch (opened by exarkun)
    task            core       http://twistedmatrix.com/trac/ticket/2716

[#2718] async howto implies Deferreds solve concurrency issues (opened by itamarst) (CLOSED, duplicate)
    defect          core       http://twistedmatrix.com/trac/ticket/2718

[#2719] async howto implies Deferreds solve concurrency issues (opened by itamarst)
    defect          core       http://twistedmatrix.com/trac/ticket/2719

[#2720] merge all deferreds howtos into one that doesn't suck (opened by itamarst)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2720

[#2721] internet-overview howto is sorta pointless (opened by itamarst)
    defect          core       http://twistedmatrix.com/trac/ticket/2721

[#2722] reactor basics howto is lacking important information (opened by itamarst)
    defect          core       http://twistedmatrix.com/trac/ticket/2722

[#2724] intended audience of Twisted documentation is not clear (opened by glyph)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2724

[#2725] twisted.internet.task.LoopingCall does not document a public API for checking to see if it is currently running. (opened by dreid)
    defect          core       http://twistedmatrix.com/trac/ticket/2725

[#2726] there is no way to kill a group of subprocesses in Twisted (with proposed fix for Windows using Job objects) (opened by deboute)
    defect          core       http://twistedmatrix.com/trac/ticket/2726

[#2727] plugin howto refers to "getPlugin" instead of "getPlugins" (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2727

[#2245] Deferred implementation in C (opened by therve)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2245

                    ===== Low =====
[#2723] Twisted.Quotes does not serve its original intended purpose (opened by glyph)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2723

                    ===== Lowest =====
[#2717] Add a test to verify that Twisted.Quotes complies with fortune format. (opened by jml)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2717



Closed Bugs
______________________
                    ===== Highest =====
[#1843] twisted.spread.util.FilePager keeps all sent chunks in memory (opened by ino, closed by therve, fixed)
    defect          pb         http://twistedmatrix.com/trac/ticket/1843

[#2703] assertWarns has some restrictions (opened by therve, closed by therve, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2703

[#426 ] [PATCH] sending new style classes via perspective broker (opened by titty, closed by therve, fixed)
    enhancement     pb         http://twistedmatrix.com/trac/ticket/426

[#222 ] Missing common overridable/callable method summaries in docs (opened by jknight, closed by exarkun, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/222

                    ===== Normal =====
[#2321] twisted.test.test_pb.NSPTestCase.tearDown calls stopListening but doesn't return the Deferred (opened by exarkun, closed by therve, fixed)
    defect          pb         http://twistedmatrix.com/trac/ticket/2321

[#2718] async howto implies Deferreds solve concurrency issues (opened by itamarst, closed by therve, duplicate)
    defect          core       http://twistedmatrix.com/trac/ticket/2718

[#2711] ConnectionRefusedError doesn't provide any information about the connection that was refused (opened by jml, closed by therve, duplicate)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2711

[#2543] "Noone" isn't a word (opened by indigo, closed by therve, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2543

                    ===== Low =====
[#423 ] Simpler interface to the conch client code (opened by z3p, closed by z3p, duplicate)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/423





From twisted-python at 2xlp.com  Sun Jul  1 00:09:24 2007
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Sun, 1 Jul 2007 00:09:24 -0400
Subject: [Twisted-Python] twisted to the iphone rescue ?
Message-ID: <038A7663-A59A-41BC-BD50-022D02657418@2xlp.com>

I just got an iPhone, and like many other tech people, I'm pissed:

a_ There's no terminal/shell - i think they wanted to lock-down the  
phone
b_ There's no Chat feature - they wanted to push people into an  
overpriced AT&T scheme

Some people have been doing workarounds:
re: http://arstechnica.com/journals/apple.ars/2007/06/25/aim-and-ssh- 
coming-to-an-iphone-near-you-sort-of

	iPhoneChat
		web-based aim proxy
		think twisted-words
		http://www.publictivity.com/iPhoneChat/

	WebShell
		web-based ssh proxy over https
		http://www-personal.umich.edu/~mressl/webshell/

And I heard of a few more in the pipes.

Is anyone working on stuff like this using Twisted though?

For a seasoned Twisted programmer, this should be pretty simple...  
I've done most of the features of both in other apps based on  
twisted , which seems to support both feature sets really really well.

Just wondering/hoping that someone here is planning on releasing some  
standalone stuff that people can download and run on their servers  
( ssh for security , chatting for aim/icq/jabber not throttling any  
one ip - which is happening right now )






From redbaron at hitv.ru  Sun Jul  1 05:45:14 2007
From: redbaron at hitv.ru (Ivanov Maxim)
Date: Sun, 1 Jul 2007 13:45:14 +0400
Subject: [Twisted-Python] Avoid circullair dependencies.
Message-ID: <200707011345.14862.redbaron@hitv.ru>

Some of my logic need protocol to be imoported to be able to send data back.

So when I start app protocol imports my logic (where all data is processed) 
and my logic imports protocol.  Right now I simply pass protocol object as 
argument to constructors, but it seems to be not the best way from my point 
of view. How to solve this problem?



From rampeters at gmail.com  Sun Jul  1 22:18:49 2007
From: rampeters at gmail.com (Ram Peters)
Date: Sun, 1 Jul 2007 22:18:49 -0400
Subject: [Twisted-Python] Open Source Twisted Email Server
In-Reply-To: <20070627121729.4947.52789419.divmod.quotient.4664@ohm>
References: <81b45360706270511v70ee423fj4142585292b81f81@mail.gmail.com>
	<20070627121729.4947.52789419.divmod.quotient.4664@ohm>
Message-ID: <81b45360707011918s2f7408bx99383b5db4dc5b23@mail.gmail.com>

I am looking for something like this:
http://oubiwann.blogspot.com/2006/07/twisted-mail-server.html



On 27/06/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Wed, 27 Jun 2007 08:11:04 -0400, Ram Peters <rampeters at gmail.com> wrote:
> >Is there a Open Source Twisted Email Server that have been implemented?
>
> There are several, including one in Twisted itself.  Whether any of them are
> appropriate for any particular purpose may be up for discussion (a good
> beginning to which might be specifying what particular purpose you have in
> mind ;).
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From markus at bluegap.ch  Mon Jul  2 05:04:56 2007
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Mon, 02 Jul 2007 11:04:56 +0200
Subject: [Twisted-Python] profiling twisted
In-Reply-To: <20070627163212.8429.1578659222.divmod.xquotient.137@joule.divmod.com>
References: <46825C37.7060100@bluegap.ch>
	<468264E0.3030507@vrplumber.com>	<468274E7.4070301@bluegap.ch>
	<20070627163212.8429.1578659222.divmod.xquotient.137@joule.divmod.com>
Message-ID: <4688BFB8.2040205@bluegap.ch>

Hi,

glyph at divmod.com wrote:
> What is 'real load'?  Are you talking about things in process with, but 
> not related to, the web server?

I should have been more specific, but OTOH, it really didn't matter. 
Anyway: what I meant was: 1 concurrent request => very small load, 8 
concurrent requests => real load.

> Maybe your server is slow? :)

;-)  Probably not that slow...

>> Can I somehow get the reactor's state, i.e. how many deferreds are 
>> waiting in the queue, how many threads are running concurrently, etc?
> 
> There is no queue of Deferreds.  They don't actually have anything to do 
> with the reactor.

Hm.. good to know.

>> How good is the idea of deferring File I/O to threads, i.e. 
>> threads.deferToThread(self.filehandle.write, data)?
> 
> If you do indeed discover that you are waiting a long time to write your 
> particular stuff to files, then that might help.  It might also randomly 
> interleave the data and corrupt your files, if 'data' is big enough.

Uh.. I'm taking care, that only one thread writes to a file at any time.

>> Another possibly blocking module might be the database api, but I'm 
>> using twisted's enterprise adbapi, which should be async, AFAICT.
> 
> It does the operations in threads, yes.  However, the threadpool will 
> eventually fill up; the concurrency is fairly limited.  (The default is 
> 10 or so workers, I think).

Yeah, I've enlarged that to 50 threads, which should be enough.

>> Maybe copying data around takes time. I'm sending around chunks of 64k 
>> size (streaming from the database to an external programm). Reducing 
>> chunk size to 1k helps somewhat (i.e. response time is seldom over 
>> 150ms, but can still climb up to > 0.5 seconds).
> 
> That's a possibility that the "--profile" option to twistd which JP 
> suggested might help you with.  You'll see the functions copying data 
> taking a lot of CPU time in that case.

Didn't help me much, this time...

>> Hum... external program.... maybe it's the self.transport.write() call 
>> which blocks several 100ms? Is it safe to write:
>>
>>   d = threads.deferToThread(self.transport.write, dataChunk)
>>
>> (i.e. call transport.write from a thread?)
> 
> No.  _All_ Twisted APIs are not thread safe.  This call does not block 
> though, and it is extremely, vanishingly unlikely that it is causing 
> your problems.  It just sticks some data into the outgoing queue and 
> returns immediately.

Okay, I've removed that deferToThread(). Didn't solve my problem anyway.

> One quick measurement you can do to determine what might be causing this 
> performance loss is to examine the server in 'top' while it is allegedly 
> under load.  Is it taking up 100% CPU?  If not, then it's probably 
> blocked on some kind of I/O in your application, or perhaps writing the 
> log.  If so, then there's some inefficient application code (or Twisted 
> code) that you need to profile and optimize.  The output of "strace -T" 
> on your Twisted server *might* be useful if you discover that you're 
> blocking on some kind of I/O.

Yup, I did that, but it's hard to tell what's wrong from these things.


Anyway, with very simple timing measures within the twisted server 
itself, I've figured out what was causing the delays: 
reactor.spawnProcess() takes more than a second.  I knew that fork() was 
expensive, but that expensive?


What I'm doing now feels very dirty: I'm calling reactor.spawnProcess() 
from a thread. (Yes, I'm taking care that only one thread can spawn a 
process at any time.) At least on my Linux Dev-Box, that seems to work - 
and resolves my issue. But... calling fork() from a thread???


Are there other ways to start and control external processes? Preferably 
even compatible to Windoze?


Thanks to everybody for your help...


Regards

Markus




From markus at bluegap.ch  Mon Jul  2 05:06:09 2007
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Mon, 02 Jul 2007 11:06:09 +0200
Subject: [Twisted-Python] profiling twisted
In-Reply-To: <200706271904.18667.maarten@treewalker.org>
References: <46825C37.7060100@bluegap.ch>
	<200706271904.18667.maarten@treewalker.org>
Message-ID: <4688C001.3090003@bluegap.ch>

Hi,

Maarten ter Huurne wrote:
> Does your server process use a lot of memory?

Thanks, but no, that's certainly not the problem here. 
reactor.spawnProcess() was it. See my other mail.

Regards

Markus




From exarkun at divmod.com  Mon Jul  2 07:14:48 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 2 Jul 2007 07:14:48 -0400
Subject: [Twisted-Python] profiling twisted
In-Reply-To: <4688BFB8.2040205@bluegap.ch>
Message-ID: <20070702111448.4947.1947110928.divmod.quotient.5864@ohm>

On Mon, 02 Jul 2007 11:04:56 +0200, Markus Schiltknecht <markus at bluegap.ch> wrote:
> [snip]
>Anyway, with very simple timing measures within the twisted server itself, 
>I've figured out what was causing the delays: reactor.spawnProcess() takes 
>more than a second.  I knew that fork() was expensive, but that expensive?

This isn't normal.

>
>What I'm doing now feels very dirty: I'm calling reactor.spawnProcess() from 
>a thread. (Yes, I'm taking care that only one thread can spawn a process at 
>any time.) At least on my Linux Dev-Box, that seems to work - and resolves 
>my issue. But... calling fork() from a thread???
>

Er.  That's not supported.  The only Twisted API you can call from a thread
is reactor.callFromThread.

Jean-Paul



From programmer.py at gmail.com  Mon Jul  2 12:49:50 2007
From: programmer.py at gmail.com (Jaime Wyant)
Date: Mon, 2 Jul 2007 11:49:50 -0500
Subject: [Twisted-Python] Avoid circullair dependencies.
In-Reply-To: <200707011345.14862.redbaron@hitv.ru>
References: <200707011345.14862.redbaron@hitv.ru>
Message-ID: <d52c72d20707020949x45bd88eby8d0d92bb157e50d4@mail.gmail.com>

Sounds like you could use a lazy import.  I do something similar to this in
my factory:

# protocol.py
class MyProtocol(XmlStream):
    ....

class MyFactory:
    def buildProtocol(self, addr):
        myProtocol = MyProtocol()

        # heres the lazy import
        from othermodule import SomeKlass
        SomeKlass(myProtocol)

My `othermodule' imports some constants from `protocol' (module defined
above).  So, to kill the circular references, I do a lazy import in
MyFactory.

HTH!
jw

On 7/1/07, Ivanov Maxim <redbaron at hitv.ru> wrote:
>
> Some of my logic need protocol to be imoported to be able to send data
> back.
>
> So when I start app protocol imports my logic (where all data is
> processed)
> and my logic imports protocol.  Right now I simply pass protocol object as
> argument to constructors, but it seems to be not the best way from my
> point
> of view. How to solve this problem?
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
"Government does not solve problems; it subsidizes them."
Ronald Reagan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070702/b8fa36b4/attachment.htm 

From glyph at divmod.com  Mon Jul  2 12:52:44 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 02 Jul 2007 16:52:44 -0000
Subject: [Twisted-Python] profiling twisted
In-Reply-To: <20070702111448.4947.1947110928.divmod.quotient.5864@ohm>
References: <4688BFB8.2040205@bluegap.ch>
	<20070702111448.4947.1947110928.divmod.quotient.5864@ohm>
Message-ID: <20070702165244.8429.620780225.divmod.xquotient.546@joule.divmod.com>

On 11:14 am, exarkun at divmod.com wrote:
>On Mon, 02 Jul 2007 11:04:56 +0200, Markus Schiltknecht 
><markus at bluegap.ch> wrote:
>>[snip]
>>Anyway, with very simple timing measures within the twisted server 
>>itself, I've figured out what was causing the delays: 
>>reactor.spawnProcess() takes more than a second.  I knew that fork() 
>>was expensive, but that expensive?
>
>This isn't normal.

Markus, can you instrument spawnProcess and figure out which *part* of 
it is taking so long?  Like exarkun says: this is not normal.  (I wonder 
if we are unwittingly calling some blocking API in there?  I don't think 
so, but...)
>>What I'm doing now feels very dirty: I'm calling 
>>reactor.spawnProcess() from a thread. (Yes, I'm taking care that only 
>>one thread can spawn a process at any time.) At least on my Linux Dev- 
>>Box, that seems to work - and resolves my issue. But... calling fork() 
>>from a thread???
>
>Er.  That's not supported.  The only Twisted API you can call from a 
>thread
>is reactor.callFromThread.

In other words, this may appear to work, but if you suddenly burst into 
flame unexpectedly, don't blame *us*.  And you probably will, 
eventually, if you keep doing that.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070702/d5062185/attachment.htm 

From corydodt+twisted_spams at gmail.com  Mon Jul  2 19:12:01 2007
From: corydodt+twisted_spams at gmail.com (Cory Dodt)
Date: Mon, 2 Jul 2007 16:12:01 -0700
Subject: [Twisted-Python] Flash AMF and Twisted
In-Reply-To: <BD75E5F9-66F3-4B3F-ADC4-36642E57C692@2xlp.com>
References: <A3F520F1-B083-4DA9-A581-2234752CFE44@collab.nl>
	<20070618022344.4947.170473162.divmod.quotient.2321@ohm>
	<20070618170534.31981.1808740575.divmod.xquotient.17@joule.divmod.com>
	<BD75E5F9-66F3-4B3F-ADC4-36642E57C692@2xlp.com>
Message-ID: <c16a94ff0707021612gfe5c436w79760beb63872a21@mail.gmail.com>

+1 for the logos!

-1 for suggested prefix, especially if it's "Twi" - this renders virtually
any project name unpronounceable. ;-)

Anyway, the Twisted coding guidelines are largely about creative,
unambiguous naming.  I for one find "py-" names obnoxious, especially since
they actually *increase* the chance of a google namespace collision.  (What
would you name your twisted-based IRC bot?  twibot?  Too bad three other
people did that.)

_____________________

*Cory Dodt*
basileus augustus codesaurus

decipher
5250 n palm ave, ste 220
fresno, ca  93704

t: +1 559 256 0463
f: +1 559 436 6944

www.decipherinc.com <http://decipherinc.com/>


On 6/30/07, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:
>
>
> On Jun 18, 2007, at 1:05 PM, glyph at divmod.com wrote:
>
> > Thanks, too, for changing this so readily :).
> >
> > It makes me think, though, that maybe we should have a suggested
> > prefix for things-which-use-Twisted, since "py" is a little
> > confusing there.  Python has PyXXX, maybe Twisted should have
> > TwiXXX or similar?
>
> Personally speaking ,  It would be nice if Twisted
>         a) had a suggested prefix
>         b) had 2 logos put into the public domain
>                 i. a form of the logo for people who want to show support
> on their
> sites that run twisted
>                 ii. a "powerd by" logo for applicaitons built on twisted.
>
> This would be similar to what Mozilla did with the firefox logos.
>
>
>
> // Jonathan Vanasco
>
> | - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> - - - - - - - - - - - - - - - - - - -
> |   CEO/Founder SyndiClick Networks
> | - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> - - - - - - - - - - - - - - - - - - -
> |     Founder/CTO/CVO
> |      FindMeOn.com - The cure for Multiple Web Personality Disorder
> |      Web Identity Management and 3D Social Networking
> | - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> - - - - - - - - - - - - - - - - - - -
> |      RoadSound.com - Tools For Bands, Stuff For Fans
> |      Collaborative Online Management And Syndication Tools
> | - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> - - - - - - - - - - - - - - - - - - -
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070702/e97a16be/attachment.htm 

From marco.giusti at gmail.com  Mon Jul  2 19:40:01 2007
From: marco.giusti at gmail.com (Marco Giusti)
Date: Tue, 3 Jul 2007 01:40:01 +0200
Subject: [Twisted-Python] Flash AMF and Twisted
In-Reply-To: <c16a94ff0707021612gfe5c436w79760beb63872a21@mail.gmail.com>
References: <A3F520F1-B083-4DA9-A581-2234752CFE44@collab.nl>
	<20070618022344.4947.170473162.divmod.quotient.2321@ohm>
	<20070618170534.31981.1808740575.divmod.xquotient.17@joule.divmod.com>
	<BD75E5F9-66F3-4B3F-ADC4-36642E57C692@2xlp.com>
	<c16a94ff0707021612gfe5c436w79760beb63872a21@mail.gmail.com>
Message-ID: <20070702234001.GA13330@localhost>

On Mon, Jul 02, 2007 at 04:12:01PM -0700, Cory Dodt wrote:
>Anyway, the Twisted coding guidelines are largely about creative, unambiguous
>naming.  I for one find "py-" names obnoxious, especially since they actually
>*increase* the chance of a google namespace collision.  (What would you name
>your twisted-based IRC bot?  twibot?  Too bad three other people did that.)

bezalel :)

[ot] i'm going to publish the code, but it's just project for fun and to
learn twisted
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20070703/06950951/attachment.pgp 

From maarten at treewalker.org  Mon Jul  2 20:41:27 2007
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Tue, 3 Jul 2007 02:41:27 +0200
Subject: [Twisted-Python] Flash AMF and Twisted
In-Reply-To: <c16a94ff0707021612gfe5c436w79760beb63872a21@mail.gmail.com>
References: <A3F520F1-B083-4DA9-A581-2234752CFE44@collab.nl>
	<BD75E5F9-66F3-4B3F-ADC4-36642E57C692@2xlp.com>
	<c16a94ff0707021612gfe5c436w79760beb63872a21@mail.gmail.com>
Message-ID: <200707030241.33746.maarten@treewalker.org>

On Tuesday 03 July 2007, Cory Dodt wrote:

> -1 for suggested prefix, especially if it's "Twi" - this renders virtually
> any project name unpronounceable. ;-)

Is there really a need for a prefix?

In case of the "py" prefix, it seems packages can be divided into two 
categories:
1. applications that happen to be implemented in Python
2. things Python developers can use, such as Python bindings for an existing 
C/C++ library

In my opinion, category 1 is just developers who can't think of a good name. 
For the end user the implementation language is mostly irrelevant, so 
the "py" prefix does not really add information, it just turns a word into a 
name. I know it's hard to find a good name for a project, but should they be 
offered an excuse to give up trying?

For category 2, maybe a prefix is useful, for example for wrapping a library 
so it uses Deferreds, or for integrating event loops. Are there many projects 
like this? The only one I know of is sAsync. Projects like Nevow that are not 
a layer around something existing would not really benefit from a prefix, I 
think, since they would still need a name to apply the prefix to.


One possible approach for a package-for-Twisted naming convention would be to 
use "-ed" as a postfix. Most base names will likely be nouns, but those can 
be verbed for extra silliness. For example the IRC bot would be 
named "Botted".

Having a convention like that acts as an extra incentive to a developer to 
come up with an original name that does not use the conventional postfix. ;)

Bye,
		Maarten
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part.
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20070703/52f58bbe/attachment.pgp 

From steven.zdwang at gmail.com  Mon Jul  2 21:40:03 2007
From: steven.zdwang at gmail.com (steven wang)
Date: Tue, 3 Jul 2007 09:40:03 +0800
Subject: [Twisted-Python] How to receive a big stream data?
In-Reply-To: <5c6c8710706270221u4f7571dbq511d9fe1ef746da8@mail.gmail.com>
References: <5c6c8710706261902u347d25e0lc7375d23ef760dd5@mail.gmail.com>
	<28012bc60706270121k2bae8c8ey60f591e003cf8006@mail.gmail.com>
	<5c6c8710706270221u4f7571dbq511d9fe1ef746da8@mail.gmail.com>
Message-ID: <5c6c8710707021840s522c5d10n657335582fd189@mail.gmail.com>

========================================================
from twisted.internet import protocol, reactor, defer, interfaces

class MyProtocol(protocol.Protocol):
    is_big_data = False
    big_data = ''
    big_data_size = 0

    def connectionMade(self):
        self.big_data = ''
        self.big_data_size = 0
        self.is_big_data = False
        pass

    def dataReceived(self, data):
        if check_head_ok(data):
            # To receive the big size data
            if self.is_big_data:
                return

        # The big data will overflow the Twisted receive buffer size, so
loop to receive data
        if self.is_big_size_data:
            self.big_data += data

        if self.big_data_size == len(big_data):
            # To save data to database
            pass

    def connectionLost(self, reason):
        self.big_data = ''
        self.big_data_size = 0
        self.is_big_data = False
        pass

    def check_head_ok(self, data):
        if data.startswith('ABC'):
            values = data.split(',')
            self.big_data_size = int(values[1])
            self.is_big_data = self.big_data_size > 0
            return True
        else:
            return False
================================================================

I rewrite my source about MyProtocol. But I can not receive complete data,
only a part of data. :( Could you help me?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070703/90e7dc25/attachment.htm 

From paul at paulperez.net  Mon Jul  2 22:16:54 2007
From: paul at paulperez.net (Paul Perez)
Date: Mon, 2 Jul 2007 19:16:54 -0700
Subject: [Twisted-Python] twisted.web2 server timeout?
Message-ID: <82767f010707021916y3d07f796v993dd30da9d219f5@mail.gmail.com>

 I have a newbie question. By the way, even though it is a brain-f**k, I
love programming in this software. I just wish there was an easier/faster
way to understand it. I got and read the twisted book, but unfortunately it
does not have twisted web2 examples...

Anyway, I have written a web server using web2 that takes an HTTP request
and sends it off to another server to process it. If the other server were
to crash, how can I make the http request timeout after 30 seconds and
redirect to a timeout page?

Following is my resource code. When the response is available, I take the
response stream, write to it, and call finish().

class HTTPServer(resource.PostableResource):

    def __init__(self, cache):
        resource.Resource.__init__(self)
        self.cache = cache

    def _finished(self, result, httprequest, postdata):
        convq = self.cache['conversations']
        s=stream.ProducerStream()
        self.cache['requests'][id(httprequest)] = (httprequest,postdata,s)
        if httprequest.args.has_key(CONVID):
            conversationid = httprequest.args[CONVID][0]
            try:
                convq[conversationid].put(httprequest)
            except:
                convq[conversationid] = Queue.Queue()
                convq[conversationid].put(httprequest)
        else:
            convq[ANY].put(httprequest)
        if log:
            method       = httprequest.method
            raw_uri      = urllib.unquote(httprequest.uri)
            print "%-4s" % method,
            print "%-6s" % 'CLIENT',
            print "%-4s" % raw_uri

        return http.Response(stream=s)

    def _failed(self, reason, httprequest, postdata):
        result = str(reason)
        result += str(httprequest.uri) + '\n'
        result += '\n'.join(postdata) + '\n'
        return http.Response(500, stream="An internal server error has
occurred.")

    def http_POST(self, httprequest):
        postdata = []
        d = stream.readStream(httprequest.stream, postdata.append)
        d.addCallbacks(
            self._finished,
            self._failed,
            callbackArgs=(httprequest, postdata,),
            errbackArgs=(httprequest, postdata,)
        )

        # Catch any errors that occur in self._finished.
        d.addErrback(self._failed, httprequest, postdata)

        return d

    http_PUT = http_POST
    http_GET = http_POST



~Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070702/207ba243/attachment.htm 

From edgardo.delgado at navy.mil  Tue Jul  3 08:08:03 2007
From: edgardo.delgado at navy.mil (Delgado, Edgardo  CIV NAVAIR 4.1.4.3)
Date: Tue, 3 Jul 2007 08:08:03 -0400
Subject: [Twisted-Python] Forwarding Help
Message-ID: <0C8FBA9C0F70E1479497B4DD7ED59223515FF7@naeapaxrez05.nadsusea.nads.navy.mil>

Greetings,

Sorry to bug with this again!. I have already posted this issue, but I
haven't received any ideas on how to solve this. So, I'm going to try
again.

I need help(ideas) on how to write a "server" that listens on one port
and forward the info to one or more ports. I.e. "server" will listen on
port XXXX and forward that information to ports xxAA, xxBB and xxCC.
Can't use UDP, because it need data integrity.

Thanks for all of your help!,

Edgar



From exarkun at divmod.com  Tue Jul  3 08:57:23 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 3 Jul 2007 08:57:23 -0400
Subject: [Twisted-Python] Forwarding Help
In-Reply-To: <0C8FBA9C0F70E1479497B4DD7ED59223515FF7@naeapaxrez05.nadsusea.nads.navy.mil>
Message-ID: <20070703125723.4947.601918608.divmod.quotient.6396@ohm>

On Tue, 3 Jul 2007 08:08:03 -0400, "Delgado, Edgardo CIV NAVAIR 4.1.4.3" <edgardo.delgado at navy.mil> wrote:
>Greetings,
>
>Sorry to bug with this again!. I have already posted this issue, but I
>haven't received any ideas on how to solve this. So, I'm going to try
>again.
>
>I need help(ideas) on how to write a "server" that listens on one port
>and forward the info to one or more ports. I.e. "server" will listen on
>port XXXX and forward that information to ports xxAA, xxBB and xxCC.
>Can't use UDP, because it need data integrity.
>
>Thanks for all of your help!,

http://twistedmatrix.com/projects/core/documentation/examples/chatserver.py
demonstrates how you might pass data from one connection to multiple other
connections.  It works as a server only, accepting incoming connections,
rather than establishing outgoing connections, but the idea is the same.

Jean-Paul



From conghh at Cybersoft-VN.com  Tue Jul  3 23:25:26 2007
From: conghh at Cybersoft-VN.com (Cong Hoang Huu)
Date: Wed, 4 Jul 2007 10:25:26 +0700
Subject: [Twisted-Python] Develop application by Twisted.
Message-ID: <CEBA5E865263FA4D8848D53D92E6A9AE1EB160@DAKLAK.cybersoft-vn.com>

Hi.

 

If our company develops an application by Twisted and distributes (or
sell) only binary packages to customer (without source code), is that
ok? Do we have to transfer source code to customer also?

 

Thanks,

Cong Hoang

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070704/9ec7ad1a/attachment.htm 

From andrew-twisted at puzzling.org  Wed Jul  4 01:46:09 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 4 Jul 2007 15:46:09 +1000
Subject: [Twisted-Python] Develop application by Twisted.
In-Reply-To: <CEBA5E865263FA4D8848D53D92E6A9AE1EB160@DAKLAK.cybersoft-vn.com>
References: <CEBA5E865263FA4D8848D53D92E6A9AE1EB160@DAKLAK.cybersoft-vn.com>
Message-ID: <20070704054609.GN9243@steerpike.home.puzzling.org>

Cong Hoang Huu wrote:
> Hi.
> 
> If our company develops an application by Twisted and distributes (or sell)
> only binary packages to customer (without source code), is that ok? Do we have
> to transfer source code to customer also?

The current version of Twisted is distributed under what is known as the "MIT
license", as you can see for yourself by looking at the contents of the source
code package you have downloaded (see the LICENSE file, which every source code
file refers to).

The MIT license is short and simple, and I recommend you read it for yourself.
There is no clause in the license that requires you to distribute the Twisted
source code at any time for any reason.  So the answer to your question is "no",
but be sure to read the license so that you abide by the conditions it places on
your right to redistribute the software.

I would explain it in this email, but honestly the license is shorter than the
explanation I would write, so I think you'd be better off just reading that.

http://twistedmatrix.com/trac/browser/trunk/LICENSE

-Andrew.




From waterbug at pangalactic.us  Wed Jul  4 05:29:44 2007
From: waterbug at pangalactic.us (Stephen Waterbury)
Date: Wed, 04 Jul 2007 05:29:44 -0400
Subject: [Twisted-Python] schemas (in Zope and Foolscap)
Message-ID: <468B6888.9090802@pangalactic.us>

Hi Brian,

I am in the process of converting some of my code to use zope.schema
instead of a similar thing that I independently invented.  Since I am
also planning on using Foolscap, and since Foolscap has a schema
module, I compared zope.schema and foolscap.schema, and to me they
seem to have much overlap in design intent.  In particular, in the
zope.schema use cases ...

http://wiki.zope.org/zope3/Zope3SchemasUseCases

... one of the cases cited is:

     Method uses schema for its arguments

     A more general case than above, any method can provide a schema to
     which its arguments should conform. This schema can be used to
     create a form or to validate arguments upon any call.

... which seems almost exactly the foolscap.schema use case.  Moreover,
zope.schema has "constraints" that are similar in concept to the ones
in foolscap.schema.

So I was wondering -- would it make sense to use zope.schema
in Foolscap?  I plan to use them in my code, so from my own selfish
point of view that would be nice because it would unify everything
relating to the schema concept, and I wouldn't have to have separate
usages and imports of zope.schema and foolscap.schema.

Although "There should be one -- and preferably only one -- obvious
way to do it" doesn't necessarily -- or even that often -- apply to
libraries, this might be a good case for applying it, for reasons
somewhat similar those underlying twisted's adoption of
zope.interface.

A nice practical factor is that zope.schema has been packaged as
a separate namespace module, similarly to zope.interface.

I'd be interested to know your thoughts.

Cheers,
Steve




From markus at bluegap.ch  Wed Jul  4 09:56:15 2007
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Wed, 04 Jul 2007 15:56:15 +0200
Subject: [Twisted-Python] profiling twisted
In-Reply-To: <20070702165244.8429.620780225.divmod.xquotient.546@joule.divmod.com>
References: <4688BFB8.2040205@bluegap.ch>	<20070702111448.4947.1947110928.divmod.quotient.5864@ohm>
	<20070702165244.8429.620780225.divmod.xquotient.546@joule.divmod.com>
Message-ID: <468BA6FF.8060807@bluegap.ch>

Hi,

glyph at divmod.com wrote:
> Markus, can you instrument spawnProcess and figure out which *part* of 
> it is taking so long?

I give it a try. Especially, because I need to fiddle with 
process.Process anyway, see the mail I'm going to send in a minute or two...

> Like exarkun says: this is not normal.  (I wonder 
> if we are unwittingly calling some blocking API in there?  I don't think 
> so, but...)

I'll try to do some more benchmarking.

> In other words, this may appear to work, but if you suddenly burst into 
> flame unexpectedly, don't blame *us*.  And you probably will, 
> eventually, if you keep doing that.

Yup, I'm aware of that. It's what I meant when calling it ugly or dirty 
or whatever I said.


Regards

Markus



From markus at bluegap.ch  Wed Jul  4 10:13:14 2007
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Wed, 04 Jul 2007 16:13:14 +0200
Subject: [Twisted-Python] More general process.Process class
Message-ID: <468BAAFA.2090005@bluegap.ch>

Hi,

I'm currently fiddling with spawnProcess() and such, trying to stream 
it's output to somewhere else. In a first attempt, I've tried to cache 
the data in the ProcessProtocol's outReceived() call.

Then, I've realized, that twisted already has quite nice abstractions of 
Producers and Consumers. I would like to use them, as they seem to fit 
nicely.

And in my case, it would even make much sense to *not* read all the data 
from the process, but leave it there, waiting on the file descriptor, 
until I'm ready to process the data.

Unfortunately, AFAICT the producers attached to the process - namely the 
ProcessReader() instances created by process.Process - are hard wired to 
the ProcessProtocol's dataReceived() method. While I would like to use 
these producers directly, instead of providing such a ProcessProtocol.

I'm thinking about ripping out the protocol handling from the 
process.Process class. Instead let process.Process return a list of 
producers and consumers in self.pipes, as requested. Then let another 
wrapper class bridge between those and the ProcessProtocol.

Comments?

Regards

Markus




From exarkun at divmod.com  Wed Jul  4 10:21:28 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 4 Jul 2007 10:21:28 -0400
Subject: [Twisted-Python] More general process.Process class
In-Reply-To: <468BAAFA.2090005@bluegap.ch>
Message-ID: <20070704142128.4947.737947755.divmod.quotient.6885@ohm>

On Wed, 04 Jul 2007 16:13:14 +0200, Markus Schiltknecht <markus at bluegap.ch> wrote:
>Hi,
>
>I'm currently fiddling with spawnProcess() and such, trying to stream it's 
>output to somewhere else. In a first attempt, I've tried to cache the data 
>in the ProcessProtocol's outReceived() call.
>
>Then, I've realized, that twisted already has quite nice abstractions of 
>Producers and Consumers. I would like to use them, as they seem to fit 
>nicely.
>
>And in my case, it would even make much sense to *not* read all the data 
>from the process, but leave it there, waiting on the file descriptor, until 
>I'm ready to process the data.
>
>Unfortunately, AFAICT the producers attached to the process - namely the 
>ProcessReader() instances created by process.Process - are hard wired to the 
>ProcessProtocol's dataReceived() method. While I would like to use these 
>producers directly, instead of providing such a ProcessProtocol.
>
>I'm thinking about ripping out the protocol handling from the 
>process.Process class. Instead let process.Process return a list of 
>producers and consumers in self.pipes, as requested. Then let another 
>wrapper class bridge between those and the ProcessProtocol.
>
>Comments?

Do you need more granularity than Process.pauseProducing/resumeProducing
provide?

Aside from that, purely as a point of procedure, any changes you make to
Process at the moment are likely to conflict with a development branch
which is currently outstanding.  You might want to look at that or help
get it merged before starting on any changes of your own.

Jean-Paul



From markus at bluegap.ch  Wed Jul  4 10:42:50 2007
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Wed, 04 Jul 2007 16:42:50 +0200
Subject: [Twisted-Python] More general process.Process class
In-Reply-To: <20070704142128.4947.737947755.divmod.quotient.6885@ohm>
References: <20070704142128.4947.737947755.divmod.quotient.6885@ohm>
Message-ID: <468BB1EA.8000606@bluegap.ch>

Hi,

Jean-Paul Calderone wrote:
> Do you need more granularity than Process.pauseProducing/resumeProducing
> provide?

Hm.. you're right, those could probably do the trick.

> Aside from that, purely as a point of procedure, any changes you make to
> Process at the moment are likely to conflict with a development branch
> which is currently outstanding.

Uh... there are 153 branches in the repository... which one are you 
talking about?

> You might want to look at that or help
> get it merged before starting on any changes of your own.

Sure, thanks!

Markus



From exarkun at divmod.com  Wed Jul  4 11:40:57 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 4 Jul 2007 11:40:57 -0400
Subject: [Twisted-Python] More general process.Process class
In-Reply-To: <468BB1EA.8000606@bluegap.ch>
Message-ID: <20070704154057.4947.1678717666.divmod.quotient.6915@ohm>

On Wed, 04 Jul 2007 16:42:50 +0200, Markus Schiltknecht <markus at bluegap.ch> wrote:
>Hi,
>
>Jean-Paul Calderone wrote:
>>Do you need more granularity than Process.pauseProducing/resumeProducing
>>provide?
>
>Hm.. you're right, those could probably do the trick.
>>Aside from that, purely as a point of procedure, any changes you make to
>>Process at the moment are likely to conflict with a development branch
>>which is currently outstanding.
>
>Uh... there are 153 branches in the repository... which one are you talking 
>about?

http://twistedmatrix.com/trac/ticket/2341 / /branches/merge-process-and-ptyprocess-2341-2

>>You might want to look at that or help
>>get it merged before starting on any changes of your own.
>
>Sure, thanks!
>
>Markus
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From markus at bluegap.ch  Wed Jul  4 12:13:05 2007
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Wed, 04 Jul 2007 18:13:05 +0200
Subject: [Twisted-Python] producer / consumer question
Message-ID: <468BC711.8060503@bluegap.ch>

Hi,

I have yet another question...  a producer has to learn about it's 
consumer somehow, otherwise it would not know where to write it's data to.

But the proposed interface is exactly vice versa: the IConsumer 
interface has a registerProducer() method. Now, that would be fine, if 
that did all the setup between a producer and a consumer. But AFACIS in 
the twisted code, registerProducer() does not link itself with the 
producer. Instead, the producers I've inspected (i.e. FileSender) 
require an explicit initialization with a given consumer.

Why is that? What's the best way to associate a producer with a 
consumer? Is something like the following okay:


def associateProducerConsumer(prod, cons):
     prod.consumer = cons
     cons.registerProducer(prod, ISeekableProducer.providedBy(prod))


Regards

Markus



From dialtone at divmod.com  Wed Jul  4 13:15:38 2007
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Wed, 4 Jul 2007 19:15:38 +0200
Subject: [Twisted-Python] producer / consumer question
In-Reply-To: <468BC711.8060503@bluegap.ch>
Message-ID: <20070704171538.4947.1939200472.divmod.quotient.6949@ohm>

On Wed, 04 Jul 2007 18:13:05 +0200, Markus Schiltknecht <markus at bluegap.ch> wrote:
>Hi,
>
>I have yet another question...  a producer has to learn about it's consumer 
>somehow, otherwise it would not know where to write it's data to.
>
>But the proposed interface is exactly vice versa: the IConsumer interface 

>def associateProducerConsumer(prod, cons):
>     prod.consumer = cons
>     cons.registerProducer(prod, ISeekableProducer.providedBy(prod))

This question is also part of what I'm asking for here: 

http://twistedmatrix.com/pipermail/twisted-web/2007-July/003434.html

I'd like some discussion and help and guidance too :).



From glyph at divmod.com  Wed Jul  4 15:01:51 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 04 Jul 2007 19:01:51 -0000
Subject: [Twisted-Python] producer / consumer question
In-Reply-To: <468BC711.8060503@bluegap.ch>
References: <468BC711.8060503@bluegap.ch>
Message-ID: <20070704190151.8429.1750810897.divmod.xquotient.764@joule.divmod.com>

On 04:13 pm, markus at bluegap.ch wrote:
>I have yet another question...  a producer has to learn about it's 
>consumer somehow, otherwise it would not know where to write it's data 
>to.

>Why is that? What's the best way to associate a producer with a 
>consumer? Is something like the following okay:

This is a really deep problem, unfortunately, and Valentino has 
correctly identified that it's the same one I was going to talk about 
when responding to his twisted-web posting :).

Your solution doesn't really solve anything, since neither producers nor 
consumers are documented to have the attributes you are assigning, nor 
do anything with them.

Consumers are documented to have a "write" method, but the documentation 
is misleading.  The most common type of producer - tcp.Connection - does 
not put data into its consumer's "write" method, it calls its protocol's 
dataReceived method.  Many other producers are actually written 
specifically to call higher-level methods on something other than their 
consumer (such as callRemote) rather than "write".

The basic use-case here is that the responsibility for producing bytes 
and the responsibility for throttling data production are usually 
separated in an application.  I agree that this is not really the best 
way to separate them.  The API grew up almost by accident, it wasn't 
really designed intentionally, although it has worked surprisingly well 
considering.

In many cases it does seem that we want a high-level API for setting up 
pipelines of producer-to-consumer-to-producer, or (in the case of web2 
streams) end-to-end producer-producer-producer sequences.  While many of 
these use-cases are superficially similar, my own attempts to resolve 
this shows that there is a surprising diversity of requirements which 
are difficult to resolve simultaneously by "simply fixing" the existing 
consumer / producer mess.

Keep in mind, also, that a great deal of code has been written (and will 
be written before everyone has upgraded to the next version of Twisted) 
that uses the current IConsumer/IProducer APIs, and all of that will 
need to keep working for the forseeable future.

You can find some discussion, as well as our attempts to create 
something better, here:

    http://twistedmatrix.com/trac/ticket/1956

If you have new information, feel free to comment there, but please read 
all the comments and try to understand them first: there has been a 
*lot* of back-and-forth over this issue.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070704/2c651125/attachment.htm 

From goofyheadedpunk at gmail.com  Wed Jul  4 20:12:54 2007
From: goofyheadedpunk at gmail.com (Brian L. Troutwine)
Date: Wed, 4 Jul 2007 17:12:54 -0700
Subject: [Twisted-Python] New to twisted,
	need a bit of high-level design help.
Message-ID: <200707041712.54526.goofyheadedpunk@gmail.com>

Hello all,

I'm new to using twisted and am attempting to implement a client and
server for use a distributed computing environment with a centralized
task server. Clients query the task server for a work list, apply a
bunch of transforms to this work list and then return the transformed
work list back to the server. The server, for its part, has to send
out these work lists, keep track of which client is processing what
(for timeout handling) and collate the transformed work lists so that
it can writing the data out to disk in a sorted manner.

I've spent the better part of a week banging out prototypes, reading
the docs and asking questions on IRC (sorry, dear IRC folks, for all
the timeouts), but the things I've built feel clunky. I have primarily
focused my efforts on using t.s.pb and t.p.amp as I control both ends
of the wire. t.p.amp is probably too limited, though, as the values in
packet hashes must be <= 65535 bytes, too small for my purposes unless
I break my loads into peices, which is not an obvious or easy thing to
do given the structure of my computed data.

t.s.pb's documentation seems to concern itself with examples
involiving client requests, server responses and clients working on
the response with no ?communication back to the server and, though
it'd be nicer to work with probably, I can't seem to figure out how to
cleanly implement communication back to the server. My prototype
server is relatively clean, supporting a remote_checkin which clients
call with a valid, unique ID to receive data and a remote_checkout,
which clients call with their computed data to register it with the
server. The clients, however, are a mess, mostly because the client
transforms are not simple and might fail in a multitude of ways. (I
really rather need to keep a reference around to the server so I can
arbitrarily push data toward it).

As my attempts to use twisted for this purpose have been frustrated,
due to my inexperience, I'm sure, would it be possible for someone to
explain how I could use twisted in the construction of a distributed
system with a central data collection and collation server? Any
comments are greatly appreciated, from critiques on the ?bits of
twisted I've attempted to use to suggestions for new areas to explore
to code samples. (I must apologize that I cannot give any of my
prototype code as I do not own the copyright on it.) I've worked myself
into rather a rut and need help climbing out.

Thanks,
Brian



From markus at bluegap.ch  Thu Jul  5 03:01:00 2007
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Thu, 05 Jul 2007 09:01:00 +0200
Subject: [Twisted-Python] producer / consumer question
In-Reply-To: <20070704190151.8429.1750810897.divmod.xquotient.764@joule.divmod.com>
References: <468BC711.8060503@bluegap.ch>
	<20070704190151.8429.1750810897.divmod.xquotient.764@joule.divmod.com>
Message-ID: <468C972C.6000004@bluegap.ch>

Hi,

glyph at divmod.com wrote:
> Keep in mind, also, that a great deal of code has been written (and will 
> be written before everyone has upgraded to the next version of Twisted) 
> that uses the current IConsumer/IProducer APIs, and all of that will 
> need to keep working for the forseeable future.

Sure. I'm currently in the situation, that I need to write a stream 
server capable of handling various sources (database, files, http, 
etc...) and various formats (images, videos, etc..). And as we've 
already learned, it's well worth thinking about a good abstraction for 
such streaming tasks. The IConsumer/IProducer pair seems to be the right 
thing, but if the API isn't stable (AFAIR semi-stable is stated in the 
documentation)...

> You can find some discussion, as well as our attempts to create 
> something better, here:
> 
>    http://twistedmatrix.com/trac/ticket/1956
> 
> If you have new information, feel free to comment there, but please read 
> all the comments and try to understand them first: there has been a 
> *lot* of back-and-forth over this issue.

Okay, thank you very much for the pointers. I'll investigate further ;-)

Regards

Markus




From exarkun at divmod.com  Thu Jul  5 11:01:52 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 5 Jul 2007 11:01:52 -0400
Subject: [Twisted-Python] producer / consumer question
In-Reply-To: <468C972C.6000004@bluegap.ch>
Message-ID: <20070705150152.4947.907275344.divmod.quotient.7440@ohm>

On Thu, 05 Jul 2007 09:01:00 +0200, Markus Schiltknecht <markus at bluegap.ch> wrote:
>Hi,
>
>glyph at divmod.com wrote:
>>Keep in mind, also, that a great deal of code has been written (and will be 
>>written before everyone has upgraded to the next version of Twisted) that 
>>uses the current IConsumer/IProducer APIs, and all of that will need to 
>>keep working for the forseeable future.
>
>Sure. I'm currently in the situation, that I need to write a stream server 
>capable of handling various sources (database, files, http, etc...) and 
>various formats (images, videos, etc..). And as we've already learned, it's 
>well worth thinking about a good abstraction for such streaming tasks. The 
>IConsumer/IProducer pair seems to be the right thing, but if the API isn't 
>stable (AFAIR semi-stable is stated in the documentation)...

It's stable.  There isn't any documentation that indicates otherwise.

Jean-Paul



From glyph at divmod.com  Thu Jul  5 13:05:48 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 05 Jul 2007 17:05:48 -0000
Subject: [Twisted-Python] producer / consumer question
In-Reply-To: <468C972C.6000004@bluegap.ch>
References: <468BC711.8060503@bluegap.ch>
	<20070704190151.8429.1750810897.divmod.xquotient.764@joule.divmod.com>
	<468C972C.6000004@bluegap.ch>
Message-ID: <20070705170548.8429.1291758453.divmod.xquotient.784@joule.divmod.com>

On 07:01 am, markus at bluegap.ch wrote:
>glyph at divmod.com wrote:
>>Keep in mind, also, that a great deal of code has been written (and 
>>will be written before everyone has upgraded to the next version of 
>>Twisted) that uses the current IConsumer/IProducer APIs, and all of 
>>that will need to keep working for the forseeable future.

>Sure. I'm currently in the situation, (...) but if the API isn't stable 
>(AFAIR semi-stable is stated in the documentation)...

The API is stable.  There are plans for a better API that offers more 
functionality, but we don't even know what that looks like yet.  It may 
well be that the old API will live on side-by-side, and the new API will 
just expose new features.  In any event, no deprecation warnings are 
coming in this code for a long time.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070705/6c9011ed/attachment.htm 

From general at eepatents.com  Thu Jul  5 16:03:43 2007
From: general at eepatents.com (Ed Suominen)
Date: Thu, 05 Jul 2007 13:03:43 -0700
Subject: [Twisted-Python] New to twisted, need a bit of high-level design
	help.
In-Reply-To: <200707041712.54526.goofyheadedpunk@gmail.com>
References: <200707041712.54526.goofyheadedpunk@gmail.com>
Message-ID: <468D4E9F.6030101@eepatents.com>

Brian L. Troutwine wrote:
> I'm new to using twisted and am attempting to implement a client and
> server for use a distributed computing environment with a centralized
> task server. Clients query the task server for a work list, apply a
> bunch of transforms to this work list and then return the transformed
> work list back to the server. The server, for its part, has to send
> out these work lists, keep track of which client is processing what
> (for timeout handling) and collate the transformed work lists so that
> it can writing the data out to disk in a sorted manner.

http://foss.eepatents.com/Twisted-Goodies/browser/trunk/twisted_goodies/asyncluster

Best regards,
Ed Suominen



From goofyheadedpunk at gmail.com  Thu Jul  5 20:11:29 2007
From: goofyheadedpunk at gmail.com (Brian L. Troutwine)
Date: Thu, 5 Jul 2007 17:11:29 -0700
Subject: [Twisted-Python] New to twisted,
	need a bit of high-level design help.
In-Reply-To: <468D4E9F.6030101@eepatents.com>
References: <200707041712.54526.goofyheadedpunk@gmail.com>
	<468D4E9F.6030101@eepatents.com>
Message-ID: <200707051711.29092.goofyheadedpunk@gmail.com>

Thanks! That's exactly what I was looking for.

On Thursday 05 July 2007 13:03:43 Ed Suominen wrote:
> Brian L. Troutwine wrote:
> > I'm new to using twisted and am attempting to implement a client and
> > server for use a distributed computing environment with a centralized
> > task server. Clients query the task server for a work list, apply a
> > bunch of transforms to this work list and then return the transformed
> > work list back to the server. The server, for its part, has to send
> > out these work lists, keep track of which client is processing what
> > (for timeout handling) and collate the transformed work lists so that
> > it can writing the data out to disk in a sorted manner.
>
> http://foss.eepatents.com/Twisted-Goodies/browser/trunk/twisted_goodies/asy
>ncluster
>
> Best regards,
> Ed Suominen
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From general at eepatents.com  Thu Jul  5 21:39:08 2007
From: general at eepatents.com (Ed Suominen)
Date: Thu, 05 Jul 2007 21:39:08 -0400
Subject: [Twisted-Python] New to twisted need a bit of high-level design
	help.
In-Reply-To: <200707051711.29092.goofyheadedpunk@gmail.com>
References: <200707041712.54526.goofyheadedpunk@gmail.com>	<468D4E9F.6030101@eepatents.com>
	<200707051711.29092.goofyheadedpunk@gmail.com>
Message-ID: <468D9D3C.60107@eepatents.com>

Brian L. Troutwine wrote:
> Thanks! That's exactly what I was looking for.

You're welcome. Twisted is a great piece of code, and I'm happy to help
people put it to work as I have.

I'm actually going to be working on the AsynCluster package some more in
the next week or two. Feel free to contact me offline with any questions
or problems.

Best regards, Ed



From daniel.cuesta at iavante.es  Fri Jul  6 03:46:38 2007
From: daniel.cuesta at iavante.es (Daniel de la Cuesta)
Date: Fri, 06 Jul 2007 09:46:38 +0200
Subject: [Twisted-Python] XMLRPC Class in HTTP Server.
Message-ID: <468DF35E.2090608@iavante.es>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070706/51971bf2/attachment.htm 

From programmer.py at gmail.com  Fri Jul  6 08:31:18 2007
From: programmer.py at gmail.com (Jaime Wyant)
Date: Fri, 6 Jul 2007 07:31:18 -0500
Subject: [Twisted-Python] XMLRPC Class in HTTP Server.
In-Reply-To: <468DF35E.2090608@iavante.es>
References: <468DF35E.2090608@iavante.es>
Message-ID: <d52c72d20707060531x4b9bade8g3573700a36e93e7b@mail.gmail.com>

I'm not sure how the twisted web server works (I'm a new guy around here!),
but it looks like your dictionary, pages, maps url's to callables.  But
MyConverterXMLRPCClass() is an instance, that is not callable (no __call__
method).  I think what you want to do is something like this ->

'/xmlrpc_converter': MyConverterXMLRPCClass().xmlrpc_mymethod1

^^ Should get you past the __call__ error you're getting.

HTH!
jw

On 7/6/07, Daniel de la Cuesta <daniel.cuesta at iavante.es> wrote:
>
>  Hi,
>
> I have a twisted web server running using "twisted.web.http".
>
> The objective of the server is to convert files to another format.
> Currently I upload the files and the conversion params using an HTTP POST
> from a form.
>
> Now I want to add XML-RPC support to the conversion process. It means the
> user could process the conversion using the http form or calling directly
> the XML-RPC class.
>
> This is my pages dispatch:
>
> class MyRequestHandler(http.Request):
>
>
>     pages = { '/' : loginPage,
>                      '/uploadHandler' : handleUpload,
>                      '/uploadform' : uploadForm,
>                      '/xmlrpc_converter': MyConverterXMLRPCClass() }
>
> What I want to do is offer the user two possibilities to upload the file,
> one of them using HTTP POST (calling to "uploadform") and the other using
> XML-RPC (caling to xmlrpc_converter).
>
> I have tried to implement MyConverterXMLRPCClass() as follows:
>
> MyConverterXMLRPCClass(xmlrpc.XMLRPC):
>
>     def __init(self):
>         """"""
>         pass
>
>     def xmlrpc_mymethod1(self, param)
>         """My process""
>
> But It down't work, when I try http://localhost:8000/xmlrpc_converter I
> get the following error:
>
> "MyConverterXMLRPCClass instance has no __call__ method"
>
> How can I call MyConverterXMLRPCClass from an url in my http server?
>
> Thank you.
>
>
>
> --
>
> *Daniel de la Cuesta Navarrete*
> *T?cnico de Desarrollo de Software*
>
> FUNDACI?N IAVANTE
> daniel.cuesta at iavantefundacion.com
> Tel. 951 015 300
>
> Este correo electr?nico y, en su caso, cualquier fichero anexo, contiene
> informaci?n confidencial exclusivamente dirigida a su(s) destinatario(s).
> Toda copia o divulgaci?n deber? ser autorizada por IAVANTE.
>
> This e-mail and any attachments are confidential and exclusively directed
> to its adressee(s). Any copy or distribution will have to be authorized by
> IAVANTE.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
"Government does not solve problems; it subsidizes them."
Ronald Reagan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070706/330e1cc4/attachment.htm 

From exarkun at twistedmatrix.com  Sun Jul  8 00:05:02 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 08 Jul 2007 04:05:02 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1183867502.14.185486377@twistedmatrix.com

Bug summary
______________________
Summary for 2007-07-01 through 2007-07-08
Bugs opened: 2    Bugs closed: 3  Total open bugs: 984 (-1)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:  -1       |Highest:  -1          |Conch:     -1          
|Task:    +0       |Normal:   +0          |Core:      +0          
                                          |Foolscap:  -1          
                                          |Mail:      +1          


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2728] svn.twistedmatrix.com not resolving (opened by jwilger) (CLOSED, worksforme)
    defect          core       http://twistedmatrix.com/trac/ticket/2728

                    ===== Normal =====
[#2729] remove Deferred.setTimeout usage from twisted.mail (opened by exarkun)
    task            mail       http://twistedmatrix.com/trac/ticket/2729



Closed Bugs
______________________
                    ===== Highest =====
[#2728] svn.twistedmatrix.com not resolving (opened by jwilger, closed by exarkun, worksforme)
    defect          core       http://twistedmatrix.com/trac/ticket/2728

[#2707] twisted.conch.ssh.connection has poor tests (opened by z3p, closed by z3p, fixed)
    defect          conch      http://twistedmatrix.com/trac/ticket/2707

                    ===== Normal =====
[#2647] foolscap needs to move out of the sandbox (opened by warner, closed by warner, fixed)
    task            foolscap   http://twistedmatrix.com/trac/ticket/2647





From jml at mumak.net  Sun Jul  8 02:29:24 2007
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 8 Jul 2007 16:29:24 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r20678 - I hate having
	software with users
In-Reply-To: <E1I5lpp-0005J4-00@wolfwood.twistedmatrix.com>
References: <E1I5lpp-0005J4-00@wolfwood.twistedmatrix.com>
Message-ID: <d06a5cd30707072329s4cd36ebcx9d71166be5635edc@mail.gmail.com>

On 7/4/07, Paul Swartz <z3p at wolfwood.twistedmatrix.com> wrote:
> Author: z3p
> Date: Tue Jul  3 11:06:39 2007
> New Revision: 20678
>
> Removed:
>    branches/session-2710-2/twisted/conch/test/test_userauth.py
>
> Log:
> I hate having software with users
>

Why is this being removed?

jml



From paulswartz at gmail.com  Sun Jul  8 08:47:16 2007
From: paulswartz at gmail.com (Paul Swartz)
Date: Sun, 8 Jul 2007 08:47:16 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r20678 - I hate having
	software with users
In-Reply-To: <d06a5cd30707072329s4cd36ebcx9d71166be5635edc@mail.gmail.com>
References: <E1I5lpp-0005J4-00@wolfwood.twistedmatrix.com>
	<d06a5cd30707072329s4cd36ebcx9d71166be5635edc@mail.gmail.com>
Message-ID: <324cfb540707080547i60736fecgadd8aa31de01de93@mail.gmail.com>

Because it was added mistakenly from the merge forward.  It's from
userauth-2682.

-p

On 7/8/07, Jonathan Lange <jml at mumak.net> wrote:
> On 7/4/07, Paul Swartz <z3p at wolfwood.twistedmatrix.com> wrote:
> > Author: z3p
> > Date: Tue Jul  3 11:06:39 2007
> > New Revision: 20678
> >
> > Removed:
> >    branches/session-2710-2/twisted/conch/test/test_userauth.py
> >
> > Log:
> > I hate having software with users
> >
>
> Why is this being removed?
>
> jml
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin



From mikeal at osafoundation.org  Sun Jul  8 14:27:43 2007
From: mikeal at osafoundation.org (Mikeal Rogers)
Date: Sun, 8 Jul 2007 11:27:43 -0700
Subject: [Twisted-Python] twisted to the iphone rescue ?
In-Reply-To: <038A7663-A59A-41BC-BD50-022D02657418@2xlp.com>
References: <038A7663-A59A-41BC-BD50-022D02657418@2xlp.com>
Message-ID: <22CBDDE0-8F61-4077-9F51-D661FE3415E2@osafoundation.org>

I'm working on a multi-protocol IM web interface for iPhone using  
twisted.

I'm sure it'll be a few months until I'm finished.

-Mikeal

On Jun 30, 2007, at 9:09 PM, Jonathan Vanasco wrote:

> I just got an iPhone, and like many other tech people, I'm pissed:
>
> a_ There's no terminal/shell - i think they wanted to lock-down the  
> phone
> b_ There's no Chat feature - they wanted to push people into an  
> overpriced AT&T scheme
>
> Some people have been doing workarounds:
> re: http://arstechnica.com/journals/apple.ars/2007/06/25/aim-and- 
> ssh-coming-to-an-iphone-near-you-sort-of
>
> 	iPhoneChat
> 		web-based aim proxy
> 		think twisted-words
> 		http://www.publictivity.com/iPhoneChat/
>
> 	WebShell
> 		web-based ssh proxy over https
> 		http://www-personal.umich.edu/~mressl/webshell/
>
> And I heard of a few more in the pipes.
>
> Is anyone working on stuff like this using Twisted though?
>
> For a seasoned Twisted programmer, this should be pretty simple...  
> I've done most of the features of both in other apps based on  
> twisted , which seems to support both feature sets really really well.
>
> Just wondering/hoping that someone here is planning on releasing  
> some standalone stuff that people can download and run on their  
> servers ( ssh for security , chatting for aim/icq/jabber not  
> throttling any one ip - which is happening right now )
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From pbastov at gmail.com  Mon Jul  9 00:44:56 2007
From: pbastov at gmail.com (Pavel Bastov)
Date: Mon, 9 Jul 2007 10:44:56 +0600
Subject: [Twisted-Python] xooChat: Powered by Twisted
Message-ID: <eaf39e680707082144i4437a895hf44c6c28d00bb58@mail.gmail.com>

Greetings all,

on the Twisted Projects page I read a note (at the bottom) that in
order to add a project to this page I have to post to this mailing
list.

Well, I'm developing a live help service. Its backend is powered by
Twisted. Here is the URL:
http://www.xoochat.com/

Description: An Ajax based live help service for online customer support.

If possible, I would like this project to be added to the Twisted site.

TIA

-- 
Best regards, Pavel Bastov



From pbastov at gmail.com  Mon Jul  9 00:49:34 2007
From: pbastov at gmail.com (Pavel Bastov)
Date: Mon, 9 Jul 2007 10:49:34 +0600
Subject: [Twisted-Python] Application Start Up and Tear Down
Message-ID: <eaf39e680707082149w4b948c20r3f0061b079bcb020@mail.gmail.com>

Hi,

so far I've been using only one Factory in my application. So, all the
intialization and deinitialization code was in startFactory() /
stopFactory().

Now I have to add another protocol with another factory. Is there a
similar pair of methods for the application (server) where I can
initialize resources (db pool, for example) upon startup and free them
upon shutdown?

-- 
Best regards, Pavel Bastov



From adam at atlas.st  Mon Jul  9 01:07:01 2007
From: adam at atlas.st (Adam Atlas)
Date: Mon, 09 Jul 2007 01:07:01 -0400
Subject: [Twisted-Python] Application Start Up and Tear Down
In-Reply-To: <eaf39e680707082149w4b948c20r3f0061b079bcb020@mail.gmail.com>
References: <eaf39e680707082149w4b948c20r3f0061b079bcb020@mail.gmail.com>
Message-ID: <02429853-2BDB-4C84-B04E-853E766396F9@atlas.st>


On 9 Jul 2007, at 00.49, Pavel Bastov wrote:
> so far I've been using only one Factory in my application. So, all the
> intialization and deinitialization code was in startFactory() /
> stopFactory().
>
> Now I have to add another protocol with another factory. Is there a
> similar pair of methods for the application (server) where I can
> initialize resources (db pool, for example) upon startup and free them
> upon shutdown?

Wouldn't it work to simply handle your initialization and cleanup  
before and after reactor.run()?



From pbastov at gmail.com  Mon Jul  9 01:18:50 2007
From: pbastov at gmail.com (Pavel Bastov)
Date: Mon, 9 Jul 2007 11:18:50 +0600
Subject: [Twisted-Python] Application Start Up and Tear Down
In-Reply-To: <02429853-2BDB-4C84-B04E-853E766396F9@atlas.st>
References: <eaf39e680707082149w4b948c20r3f0061b079bcb020@mail.gmail.com>
	<02429853-2BDB-4C84-B04E-853E766396F9@atlas.st>
Message-ID: <eaf39e680707082218h75ce4e63p80c679a4fc87b7b@mail.gmail.com>

Hmm,

I don't call reactor.run() explicitly.

Here is how I launch it:

application = service.Application('xoochat', uid = uid, gid = gid)
internet.TCPServer(config.port,
factory).setServiceParent(service.IServiceCollection(application))
internet.TCPServer(3711,
pushFactory).setServiceParent(service.IServiceCollection(application))


On 7/9/07, Adam Atlas <adam at atlas.st> wrote:
>
> On 9 Jul 2007, at 00.49, Pavel Bastov wrote:
> > so far I've been using only one Factory in my application. So, all the
> > intialization and deinitialization code was in startFactory() /
> > stopFactory().
> >
> > Now I have to add another protocol with another factory. Is there a
> > similar pair of methods for the application (server) where I can
> > initialize resources (db pool, for example) upon startup and free them
> > upon shutdown?
>
> Wouldn't it work to simply handle your initialization and cleanup
> before and after reactor.run()?
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


-- 
Best regards, Pavel Bastov



From gabor.bernath at gmail.com  Mon Jul  9 01:30:26 2007
From: gabor.bernath at gmail.com (=?ISO-8859-1?Q?G=E1bor_Bern=E1th?=)
Date: Mon, 9 Jul 2007 06:30:26 +0100
Subject: [Twisted-Python] Application Start Up and Tear Down
In-Reply-To: <eaf39e680707082218h75ce4e63p80c679a4fc87b7b@mail.gmail.com>
References: <eaf39e680707082149w4b948c20r3f0061b079bcb020@mail.gmail.com>
	<02429853-2BDB-4C84-B04E-853E766396F9@atlas.st>
	<eaf39e680707082218h75ce4e63p80c679a4fc87b7b@mail.gmail.com>
Message-ID: <ff49a2640707082230y33256c88q34f0db0facb36218@mail.gmail.com>

try reactor.addSystemEventTrigger()

it calls back on system events such as startup and shutdown which are
fired by the reactor. read the details in the docs:
http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReactorCore.html


On 7/9/07, Pavel Bastov <pbastov at gmail.com> wrote:
> Hmm,
>
> I don't call reactor.run() explicitly.
>
> Here is how I launch it:
>
> application = service.Application('xoochat', uid = uid, gid = gid)
> internet.TCPServer(config.port,
> factory).setServiceParent(service.IServiceCollection(application))
> internet.TCPServer(3711,
> pushFactory).setServiceParent(service.IServiceCollection(application))
>
>
> On 7/9/07, Adam Atlas <adam at atlas.st> wrote:
> >
> > On 9 Jul 2007, at 00.49, Pavel Bastov wrote:
> > > so far I've been using only one Factory in my application. So, all the
> > > intialization and deinitialization code was in startFactory() /
> > > stopFactory().
> > >
> > > Now I have to add another protocol with another factory. Is there a
> > > similar pair of methods for the application (server) where I can
> > > initialize resources (db pool, for example) upon startup and free them
> > > upon shutdown?
> >
> > Wouldn't it work to simply handle your initialization and cleanup
> > before and after reactor.run()?
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
>
>
> --
> Best regards, Pavel Bastov
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From pbastov at gmail.com  Mon Jul  9 01:39:09 2007
From: pbastov at gmail.com (Pavel Bastov)
Date: Mon, 9 Jul 2007 11:39:09 +0600
Subject: [Twisted-Python] How to receive a big stream data?
References: 5c6c8710706270221u4f7571dbq511d9fe1ef746da8@mail.gmail.com
Message-ID: <455687479.20070709113909@gmail.com>

Hello Steven,

I met the similar problem in the project I'm currently developing.

Here is how I solved it: I delimit each message with a special char
(0x1f in my case) which I'm sure will not occur inside any message.

Every time a new chunk arrives (either complete message or a part of
it) I check if it is delimited with this char. If yes, then I process
it, if not, then I add this chunk up to the internal buffer.

This seems to work perfectly for me.

Here is a piece of code illustrating the concept (taken as is from the
working code):

class xooChatProtocol(Protocol):

    def __init__(self):
        self.buf = ''

    def dataReceived(self, data):

        commands = data.split('\x1f')
        if len(commands) > 0:
            i = 1
            num = len(commands)
            for command in commands:
                if i < num:
                    request = self.buf + command
                    self.requestReceived(request)
                    self.buf = ''
                else:
                    self.buf += command
                i += 1


Hope this helps.

-- 

Good luck,

Pavel Bastov
xooChat Team Leader and xooChat Evangelist
http://www.xoochat.com/




From pbastov at gmail.com  Mon Jul  9 01:43:10 2007
From: pbastov at gmail.com (Pavel Bastov)
Date: Mon, 9 Jul 2007 11:43:10 +0600
Subject: [Twisted-Python] Application Start Up and Tear Down
In-Reply-To: <ff49a2640707082230y33256c88q34f0db0facb36218@mail.gmail.com>
References: <eaf39e680707082149w4b948c20r3f0061b079bcb020@mail.gmail.com>
	<02429853-2BDB-4C84-B04E-853E766396F9@atlas.st>
	<eaf39e680707082218h75ce4e63p80c679a4fc87b7b@mail.gmail.com>
	<ff49a2640707082230y33256c88q34f0db0facb36218@mail.gmail.com>
Message-ID: <eaf39e680707082243j11f1e30bsbb6397590a3f40a1@mail.gmail.com>

Thanks G?bor,

this sounds like what I need. Will take a deeper look at it.

On 7/9/07, G?bor Bern?th <gabor.bernath at gmail.com> wrote:
> try reactor.addSystemEventTrigger()
>
> it calls back on system events such as startup and shutdown which are
> fired by the reactor. read the details in the docs:

-- 
Good luck,

Pavel Bastov
xooChat Evangelist and Team Leader
http://www.xoochat.com/



From andrew-twisted at puzzling.org  Mon Jul  9 01:53:15 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 9 Jul 2007 15:53:15 +1000
Subject: [Twisted-Python] Application Start Up and Tear Down
In-Reply-To: <eaf39e680707082149w4b948c20r3f0061b079bcb020@mail.gmail.com>
References: <eaf39e680707082149w4b948c20r3f0061b079bcb020@mail.gmail.com>
Message-ID: <20070709055315.GF9243@steerpike.home.puzzling.org>

Pavel Bastov wrote:
> Hi,
> 
> so far I've been using only one Factory in my application. So, all the
> intialization and deinitialization code was in startFactory() /
> stopFactory().
> 
> Now I have to add another protocol with another factory. Is there a
> similar pair of methods for the application (server) where I can
> initialize resources (db pool, for example) upon startup and free them
> upon shutdown?

Make your own Service subclass, and override startService/stopService.

-Andrew.




From adam at atlas.st  Mon Jul  9 01:58:04 2007
From: adam at atlas.st (Adam Atlas)
Date: Mon, 09 Jul 2007 01:58:04 -0400
Subject: [Twisted-Python] How to receive a big stream data?
In-Reply-To: <5c6c8710707021840s522c5d10n657335582fd189@mail.gmail.com>
References: <5c6c8710706261902u347d25e0lc7375d23ef760dd5@mail.gmail.com>
	<28012bc60706270121k2bae8c8ey60f591e003cf8006@mail.gmail.com>
	<5c6c8710706270221u4f7571dbq511d9fe1ef746da8@mail.gmail.com>
	<5c6c8710707021840s522c5d10n657335582fd189@mail.gmail.com>
Message-ID: <09CD42BF-7332-4234-B5BD-AB7B3C40DBD4@atlas.st>


On 2 Jul 2007, at 21.40, steven wang wrote:
> I rewrite my source about MyProtocol. But I can not receive  
> complete data, only a part of data. :( Could you help me?

Have you taken a look at twisted.protocols.basic? There are some nice  
abstractions in there for building chunked protocols. I'd recommend  
NetstringReceiver if you want to keep your protocol text-based. You  
subclass protocols.basic.NetstringReceiver instead of  
protocol.Protocol, and override stringReceived(data). That gets  
called whenever a complete message is received (unlike dataReceived,  
which just gets a series of bytes that may or may not be a complete  
message).



From steven.zdwang at gmail.com  Mon Jul  9 02:31:27 2007
From: steven.zdwang at gmail.com (steven wang)
Date: Mon, 9 Jul 2007 14:31:27 +0800
Subject: [Twisted-Python] How to receive a big stream data?
In-Reply-To: <09CD42BF-7332-4234-B5BD-AB7B3C40DBD4@atlas.st>
References: <5c6c8710706261902u347d25e0lc7375d23ef760dd5@mail.gmail.com>
	<28012bc60706270121k2bae8c8ey60f591e003cf8006@mail.gmail.com>
	<5c6c8710706270221u4f7571dbq511d9fe1ef746da8@mail.gmail.com>
	<5c6c8710707021840s522c5d10n657335582fd189@mail.gmail.com>
	<09CD42BF-7332-4234-B5BD-AB7B3C40DBD4@atlas.st>
Message-ID: <5c6c8710707082331i31196904na42c81853b734057@mail.gmail.com>

Thanks Adam Atlas ? Arnar Birgisson,

But I want to receive binary data in my protocol.

On 7/9/07, Adam Atlas <adam at atlas.st> wrote:
>
>
> On 2 Jul 2007, at 21.40, steven wang wrote:
> > I rewrite my source about MyProtocol. But I can not receive
> > complete data, only a part of data. :( Could you help me?
>
> Have you taken a look at twisted.protocols.basic? There are some nice
> abstractions in there for building chunked protocols. I'd recommend
> NetstringReceiver if you want to keep your protocol text-based. You
> subclass protocols.basic.NetstringReceiver instead of
> protocol.Protocol, and override stringReceived(data). That gets
> called whenever a complete message is received (unlike dataReceived,
> which just gets a series of bytes that may or may not be a complete
> message).
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070709/2d344c0a/attachment.htm 

From dialtone at divmod.com  Mon Jul  9 03:27:21 2007
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Mon, 9 Jul 2007 09:27:21 +0200
Subject: [Twisted-Python] Application Start Up and Tear Down
In-Reply-To: <eaf39e680707082218h75ce4e63p80c679a4fc87b7b@mail.gmail.com>
Message-ID: <20070709072721.4947.496349772.divmod.quotient.9347@ohm>

On Mon, 9 Jul 2007 11:18:50 +0600, Pavel Bastov <pbastov at gmail.com> wrote:
>Hmm,
>
>I don't call reactor.run() explicitly.
>
>Here is how I launch it:
>
>application = service.Application('xoochat', uid = uid, gid = gid)
>internet.TCPServer(config.port,
>factory).setServiceParent(service.IServiceCollection(application))
>internet.TCPServer(3711,
>pushFactory).setServiceParent(service.IServiceCollection(application))

The right way to do this is defining your own Service like in this way:

import locale

from twisted.internet import defer

from twisted.cred.checkers import AllowAnonymousAccess
from twisted.python.components import registerAdapter
from twisted.cred.credentials import IAnonymous
from twisted.application.service import Service
from twisted.cred.portal import Portal

from nevow import inevow, appserver
#from nevow import guard

from starter.monkeypatches import VhostFakeRoot
from starter import storage, auth, guard, istarter
from starter.web import main

class StarterService(Service):
    def __init__(self, conf):
        self.conf = conf
        
    def privilegedStartService(self):
        locale.setlocale(locale.LC_TIME, self.conf['general']['lc_ctime'])
        
        dbconf = self.conf['db']
        self.db = p = storage.init(dbconf['engine'])
        p.init(dbconf['strategy'],
               dbconf['database'],
               dbconf['host'],
               dbconf['port'],
               dbconf['user'],
               dbconf['password'])
        
        ls = auth.LoginSystem(self.db, self.conf)
        p = Portal(ls)
        p.registerChecker(AllowAnonymousAccess(), IAnonymous)
        p.registerChecker(ls)
        
        registerAdapter(main.Root, istarter.IAvatar, inevow.IResource)

        res = guard.SessionWrapper(p)
        vhost = VhostFakeRoot(res)
        self.site = appserver.NevowSite(vhost, logPath=self.conf['paths']['web'].path)

        from twisted.internet import reactor

        self.port = reactor.listenTCP(self.conf['web']['port'],
                                      self.site,
                                      interface=self.conf['web']['interface'])

    def stopService(self):
        dl = []
        if self.port is not None:
            dl.append(defer.maybeDeferred(self.port.stopListening))
            self.port = None
        if self.db is not None:
            dl.append(defer.maybeDeferred(self.db.close))
            self.db = None
        return defer.DeferredList(dl)

And you define your .tac file like this:

from twisted.application import service
from starter.service import StarterService
from configuration import main

application = service.Application('Starter')
StarterService(main).setServiceParent(application)

Of course Twisted will call Service.privilegedStartService when everything startsup and after
it changed UID (or anyway after Service.startService).

Then when everything stops it will call Service.stopService.

You can of course register other services as children of this parent one by using .setServiceParent().

-- 
Valentino Volonghi aka dialtone
Blog: http://www.twisted.it




From dialtone at divmod.com  Mon Jul  9 03:34:32 2007
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Mon, 9 Jul 2007 09:34:32 +0200
Subject: [Twisted-Python] Application Start Up and Tear Down
In-Reply-To: <20070709072721.4947.496349772.divmod.quotient.9347@ohm>
Message-ID: <20070709073432.4947.1941499577.divmod.quotient.9350@ohm>

On Mon, 9 Jul 2007 09:27:21 +0200, Valentino Volonghi aka Dialtone <dialtone at divmod.com> wrote:

>Of course Twisted will call Service.privilegedStartService when everything 
>startsup and after
>it changed UID (or anyway after Service.startService).

Of course this is wrong.

Service.privilegedStartService()
switchUID and fork
shedPriviledges()
Service.startService()


>Then when everything stops it will call Service.stopService.

-- 
Valentino Volonghi aka dialtone
Blog: http://www.twisted.it



From daniel.cuesta at iavante.es  Mon Jul  9 03:38:44 2007
From: daniel.cuesta at iavante.es (Daniel de la Cuesta)
Date: Mon, 09 Jul 2007 09:38:44 +0200
Subject: [Twisted-Python] XMLRPC Class in HTTP Server.
In-Reply-To: <d52c72d20707060531x4b9bade8g3573700a36e93e7b@mail.gmail.com>
References: <468DF35E.2090608@iavante.es>
	<d52c72d20707060531x4b9bade8g3573700a36e93e7b@mail.gmail.com>
Message-ID: <4691E604.8050701@iavante.es>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070709/de38dfc3/attachment.htm 

From markus at bluegap.ch  Mon Jul  9 04:14:18 2007
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Mon, 09 Jul 2007 10:14:18 +0200
Subject: [Twisted-Python] producer / consumer question
In-Reply-To: <20070705150152.4947.907275344.divmod.quotient.7440@ohm>
References: <20070705150152.4947.907275344.divmod.quotient.7440@ohm>
Message-ID: <4691EE5A.30605@bluegap.ch>

Hi,

Jean-Paul Calderone wrote:
> It's stable.  There isn't any documentation that indicates otherwise.

Yes, there is: the current API docs clearly indicates, that "This 
interface is semi-stable.", for IPullProducer as well as for 
IPushProducer. Not for IProducer, though. See:

http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IPullProducer.html
http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IPushProducer.html

Regards

Markus



From glyph at divmod.com  Mon Jul  9 09:31:57 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 09 Jul 2007 13:31:57 -0000
Subject: [Twisted-Python] Application Start Up and Tear Down
In-Reply-To: <20070709055315.GF9243@steerpike.home.puzzling.org>
References: <eaf39e680707082149w4b948c20r3f0061b079bcb020@mail.gmail.com>
	<20070709055315.GF9243@steerpike.home.puzzling.org>
Message-ID: <20070709133157.26384.240598309.divmod.xquotient.193@joule.divmod.com>


On 05:53 am, andrew-twisted at puzzling.org wrote:
>Pavel Bastov wrote:
>>Hi,
>>
>>so far I've been using only one Factory in my application. So, all the
>>intialization and deinitialization code was in startFactory() /
>>stopFactory().
>>
>>Now I have to add another protocol with another factory. Is there a
>>similar pair of methods for the application (server) where I can
>>initialize resources (db pool, for example) upon startup and free them
>>upon shutdown?
>
>Make your own Service subclass, and override startService/stopService.

I just want to reinforce that this is really the *correct* answer, and 
the other suggestions (custom code before/after run(), manually calling 
addSystemEventTrigger) both tightly bind your application logic to the 
particular way your entire process starts up and shuts down, rather than 
having a discrete unit for your application.  (Think global vs. instance 
variables.)

The service hierarchy has issues (privilegedStartService being the 
biggest one) but it is generally the most flexible, since you can start 
and stop services and groups of services without starting and stopping 
the entire process.



From fritcher at corp.earthlink.net  Mon Jul  9 09:36:59 2007
From: fritcher at corp.earthlink.net (Jason Fritcher)
Date: Mon, 09 Jul 2007 09:36:59 -0400
Subject: [Twisted-Python] XMLRPC Class in HTTP Server.
In-Reply-To: <4691E604.8050701@iavante.es>
References: <468DF35E.2090608@iavante.es>	<d52c72d20707060531x4b9bade8g3573700a36e93e7b@mail.gmail.com>
	<4691E604.8050701@iavante.es>
Message-ID: <469239FB.5030809@corp.earthlink.net>

Daniel de la Cuesta wrote:
> Ok, but this is not exactly what I want.

The xml-rpc server is a web resource node, so to make things work, you
need to call the render() method on your xml-rpc instance, so in your
url map, instead of...

MyConverterXMLRPCClass()

use...

MyConverterXMLRPCClass().render

to store a bound reference to the render method and then all you need to
do is call that and pass it the request object. The render method will
take care of setting up deferreds to write the response or any errors
back to the client.

-- 
Jason Fritcher
Senior Software Engineer
Core Infrastructure Services & Strategy
Earthlink, Inc
fritcher at corp.earthlink.net


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 249 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20070709/243817d8/attachment.pgp 

From exarkun at divmod.com  Mon Jul  9 10:14:07 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 9 Jul 2007 10:14:07 -0400
Subject: [Twisted-Python] XMLRPC Class in HTTP Server.
In-Reply-To: <468DF35E.2090608@iavante.es>
Message-ID: <20070709141407.4947.1888526620.divmod.quotient.9437@ohm>

Wasn't going to reply to this, for reasons which will be obvious momentarily,
but I haven't seen a correct reply yet, so...

On Fri, 06 Jul 2007 09:46:38 +0200, Daniel de la Cuesta <daniel.cuesta at iavante.es> wrote:
><!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
><html>
><head>
>  <meta content="text/html;charset=ISO-8859-1" http-equiv="Content-Type">
></head>
><body bgcolor="#ffffff" text="#000000">
>Hi,<br>
><br>
>I have a twisted web server running using "twisted.web.http".<br>
><br>

You probably want to direct future questions on this topic to the
twisted-web mailing list, where you'll get more attention from
people more actively doing web things.

>The objective of the server is to convert files to another format.
>Currently I upload the files and the conversion params using an HTTP
>POST from a form.<br>
><br>
>Now I want to add XML-RPC support to the conversion process. It means
>the user could process the conversion using the http form or calling
>directly the XML-RPC class.<br>

HTTP POST is probably a better way to upload files, in general.  MIME-ish
encoding is a bit easier and has less overhead than base64 encoding.

><br>
>This is my pages dispatch:<br>
><br>
>class MyRequestHandler(http.Request):<br>
><br>
>&nbsp;&nbsp; <br>
>&nbsp;&nbsp;&nbsp; pages = { '/' : loginPage, <br>
>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '/uploadHandler' : handleUpload,<br>
>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '/uploadform' : uploadForm,<br>
>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '/xmlrpc_converter': MyConverterXMLRPCClass() }<br>

Rarely is it correct to subclass Request.  You can probably just discard
all of the above code.  Aside from that, I don't know what the `pages'
attribute is.  I don't think anything pays any attention to it.

><br>
>What I want to do is offer the user two possibilities to upload the
>file, one of them using HTTP POST (calling to "uploadform") and the
>other using XML-RPC (caling to xmlrpc_converter).<br>
><br>
>I have tried to implement MyConverterXMLRPCClass() as follows:<br>
><br>
>MyConverterXMLRPCClass(xmlrpc.XMLRPC):<br>
>&nbsp;&nbsp; <br>
>&nbsp;&nbsp;&nbsp; def __init(self):<br>
>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; """"""<br>
>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pass<br>
><br>
>&nbsp;&nbsp;&nbsp; def xmlrpc_mymethod1(self, param)<br>
>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; """My process""<br>
><br>

This part looks okay.

>But It down't work, when I try <a class="moz-txt-link-freetext" href="http://localhost:8000/xmlrpc_converter">http://localhost:8000/xmlrpc_converter</a> I
>get the following error:<br>
><br>
>"MyConverterXMLRPCClass instance has no __call__ method"<br>
>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
>How can I call MyConverterXMLRPCClass from an url in my http server?<br>

I don't know how a MyConverterXMLRPCClass got called.  I suppose you have
some more code that you didn't include in this message which looks at the
pages dictionary on the request object and does something with them.
Whatever it is, I guess it isn't correct. ;)

Instead, what you should do is define a root resource which has
MyConverterXMLRPCClass as a child at the "xmlrpc_converter" segment.  You
can do this pretty easily using the basic Resource class in twisted.web:

    from twisted.web.resource import Resource
    from twisted.web.server import Site
    from twisted.internet import reactor

    root = Resource()
    root.putChild('xmlrpc_converter', MyConverterXMLRPCClass())
    site = Site(root)
    reactor.listenTCP(8080, site)

The Resource class is implemented to keep track of child resources added
to it with putChild so that when a request comes in for one of them, it
gives back the appropriate one and URL traversal or page rendering can
continue.

Hope this helps,

Jean-Paul



From tarjei at nu.no  Mon Jul  9 10:54:06 2007
From: tarjei at nu.no (tarjei)
Date: Mon, 09 Jul 2007 16:54:06 +0200
Subject: [Twisted-Python] [usage] FTPClient uploading multiple files
Message-ID: <46924C0E.8020403@nu.no>

Hi, after spending a few hours grooking the FTPClient API (with good
help from Exarkun on IRC) I thought I'd post the fruits of my work.

I hope this may help someone. If the code is usefull enough feel free to
add it to the examples in the docs.

If you see errors or got ideas on how this could be done different, feel
free to answer :-)

regards,
Tarjei


class FtpFileSave(object):

    """
    A class for uploading multiple files to a ftp host.
    Usage:

    ftp = FtpFileSave(ftpFiles=['/etc/passwd', '/etc/magic'],
_pass="something",
    _username = "something", host="localhost")
    ftp.save(somecallback, errorcallback)

    This will upload multiple files to the ftpserver.
    @caveat 1: as it stands the class does not change directory or
anything like that before uploading the files.
    This should be easy to add though.
    """

    _pass = ""
    _username = ""
    port = 21
    host = "localhost"

    def __init__(self, **kwargs):
        """Create a ftpfilesaver using the ftp client fromtwisted
        @param ftpFiles list of paths to the files to upload.
        """
        self.__dict__.update(kwargs)
        self.nextfile = 0

    def save(self, success,error):
        """Uploads a set of tiles to the ftpserver.
        @param success: the callback to be called on success
        @param error:   the callback to be called on error
        """
        self.success = success

        FTPClient.debug = True
        creator = ClientCreator(reactor, FTPClient, self._username,
                    self._pass, passive=True)
        defer = creator.connectTCP(self.host,self.port)
        self.error = error
        defer.addCallback(self.connectionMade).addErrback(self.error)
        return defer

    def connectionMade(self,ftpClient):
        "Checks if there are more files to upload and uploads them.
        The main point with this method is that you have to collect the
defereds of each command
        and wait until they succeed.
        "
        deffereds = []
        "We'll need the client to do a disconnect later"
        self.client = ftpClient
        " Create defereds for each of the different files to be uploaded"
        for upfile in self.ftpFiles:
            if not os.path.exists(upfile):
                raise Exception("File %s not found" % upfile)
            store, finish = ftpClient.storeFile("./%s" %
os.path.basename(upfile))
            finish.addCallback(self.end).addErrback(self.error)
            store.addCallback(self.send_file).addErrback(self.error)
            deffereds.append(store)
            deffereds.append(finish)
        return defer.gatherResults(deffereds)

    def end(self, ftpResult):
        """Close the connection when all files have been uploaded.
            @param ftpResult a list of the protocol info we get. Not
very interesting.
            @todo: check the list for errors.
        """
        if (len(self.ftpFiles) <= self.nextfile):
            self.client.quit()
            self.client.transport.loseConnection()
            return defer.succeed(self.success())
        return

    def send_file(self, sender):
        """Open and send the file
        """
        #print "Storefile %d : %s"  % (self.nextfile,
self.ftpFiles[self.nextfile])
        filename = self.ftpFiles[self.nextfile]
        fp = open(filename,'r')
        sender.transport.write(fp.read())
        sender.finish()
        "increase the nextfile count so end() knows when it's done"
        self.nextfile += 1






From kajirs4 at gmail.com  Mon Jul  9 14:30:37 2007
From: kajirs4 at gmail.com (J)
Date: Mon, 9 Jul 2007 14:30:37 -0400
Subject: [Twisted-Python] file transfers in twisted
Message-ID: <aae7b94f0707091130g43c1ac77ib7c03c6eba6ea948@mail.gmail.com>

Hi all,

  I was wondering how I could do file transfers via twisted? I looked
through the producers/consumers code and am wondering if there are any
examples out there that I can use ?

thanks,
J
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070709/36ceece4/attachment.htm 

From conghh at Cybersoft-VN.com  Tue Jul 10 00:24:09 2007
From: conghh at Cybersoft-VN.com (Cong Hoang Huu)
Date: Tue, 10 Jul 2007 11:24:09 +0700
Subject: [Twisted-Python] Develop application by Twisted.
Message-ID: <CEBA5E865263FA4D8848D53D92E6A9AE25A644@DAKLAK.cybersoft-vn.com>

Thanks a lot.
Cong Hoang
 
> The current version of Twisted is distributed under what is known as
the "MIT
> license", as you can see for yourself by looking at the contents of
the source
> code package you have downloaded (see the LICENSE file, which every
source code
> file refers to).
 
> The MIT license is short and simple, and I recommend you read it for
yourself.
> There is no clause in the license that requires you to distribute the
Twisted
> source code at any time for any reason.  So the answer to your
question is "no",
> but be sure to read the license so that you abide by the conditions it
places on
> your right to redistribute the software.
 
> I would explain it in this email, but honestly the license is shorter
than the
> explanation I would write, so I think you'd be better off just reading
that.
 
> http://twistedmatrix.com/trac/browser/trunk/LICENSE
 
> -Andrew.

 

 

> Hi.
> 
> If our company develops an application by Twisted and distributes (or
sell)
> only binary packages to customer (without source code), is that ok? Do
we have
> to transfer source code to customer also?

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070710/4e1803be/attachment.htm 

From phil at bubblehouse.org  Tue Jul 10 16:00:01 2007
From: phil at bubblehouse.org (Phil Christensen)
Date: Tue, 10 Jul 2007 16:00:01 -0400
Subject: [Twisted-Python] dropin.cache?
Message-ID: <116389FC-C330-43FA-B8CC-D702AE5BD912@bubblehouse.org>

So, I've been making great strides with my plugin system, using  
twisted's plugin support, but there's just one small issue I'm having  
that I can't seem to figure out.

Traceback (most recent call last):
   File "/Users/phil/Workspace/modu/modu/web/wsgi.py", line 16, in  
handler
     application = app.get_application(env)
   File "/Users/phil/Workspace/modu/modu/web/app.py", line 34, in  
get_application
     _load_plugins(env)
   File "/Users/phil/Workspace/modu/modu/web/app.py", line 53, in  
_load_plugins
     for site_plugin in plugin.getPlugins(ISite, modu.plugins):
   File "/Users/phil/Workspace/Twisted/twisted/plugin.py", line 186,  
in getPlugins
     allDropins = getCache(package)
--- <exception caught here> ---
   File "/Users/phil/Workspace/Twisted/twisted/plugin.py", line 165,  
in getCache
     dropinPath.setContent(pickle.dumps(dropinDotCache))
   File "/Users/phil/Workspace/Twisted/twisted/python/filepath.py",  
line 525, in setContent
     sib.open('w').write(content)
   File "/Users/phil/Workspace/Twisted/twisted/python/filepath.py",  
line 369, in open
     return open(self.path, mode+'b')
exceptions.IOError: [Errno 13] Permission denied: '/Users/phil/ 
Workspace/modu/examples/basic/modu/plugins/dropin.cache.new'


The issue is that my app doesn't have write access to the various  
plugin directories by default, as it runs as a restricted user. This  
is basically a configuration detail that my users will have to take  
care of, but I'd like to  be able to catch this error and provide a  
nicer message, or at least not have my logfile filled up with stack  
traces.

The problem is that putting a try/catch around getPlugins doesn't  
work, or doesn't appear to. I've looked at the code in getPlugins,  
and I can't figure out why the exception isn't being caught. Since  
I'm not actually using the reactor, I would assume there's no  
deferred trickery that needs to be done, so I'm at a bit of a loss.

Any help in this matter would be appreciated...

-phil



From exarkun at divmod.com  Tue Jul 10 16:48:48 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 10 Jul 2007 16:48:48 -0400
Subject: [Twisted-Python] dropin.cache?
In-Reply-To: <116389FC-C330-43FA-B8CC-D702AE5BD912@bubblehouse.org>
Message-ID: <20070710204848.4947.630874536.divmod.quotient.10252@ohm>

On Tue, 10 Jul 2007 16:00:01 -0400, Phil Christensen <phil at bubblehouse.org> wrote:
>So, I've been making great strides with my plugin system, using  twisted's 
>plugin support, but there's just one small issue I'm having  that I can't 
>seem to figure out.
>
> [snip traceback]
>
>The issue is that my app doesn't have write access to the various  plugin 
>directories by default, as it runs as a restricted user. This  is basically 
>a configuration detail that my users will have to take  care of, but I'd 
>like to  be able to catch this error and provide a  nicer message, or at 
>least not have my logfile filled up with stack  traces.

It only needs write access to update the cache, and it only needs to update
the cache when a new plugin is installed on the system or an old plugin is
removed.  So, you should be able to completely address this by regenerating
the cache at installation time (you can generate the cache simply by calling
getPlugins and exhausting the iterator it returns).

>
>The problem is that putting a try/catch around getPlugins doesn't  work, or 
>doesn't appear to. I've looked at the code in getPlugins,  and I can't 
>figure out why the exception isn't being caught. Since  I'm not actually 
>using the reactor, I would assume there's no  deferred trickery that needs 
>to be done, so I'm at a bit of a loss.
>
>Any help in this matter would be appreciated...
>

There's an open ticket for changing the reporting of this condition from a
full traceback to a shorter message:

  http://twistedmatrix.com/trac/ticket/2409

(Hmm, although that's not quite what I remembered, maybe there's another one
as well).

Jean-Paul



From wingfields at hotmail.com  Tue Jul 10 20:34:02 2007
From: wingfields at hotmail.com (s. w.)
Date: Wed, 11 Jul 2007 00:34:02 +0000
Subject: [Twisted-Python] Perspective Broker with blocking,
	non-thread-safe C api?
Message-ID: <BAY134-F29CA1934A2BAC15C968407C9040@phx.gbl>


I'd like to use Perspective Broker to serve a set of objects remotely.  
However, these objects wrap a non-thread-safe, blocking C api.  I'm new to 
Twisted, but I believe I understand correctly that the blocking C api needs 
to be accessed via threads in Twisted.

Given this, the only way I can think to use Perspective Broker would be to 
use a special PBServerFactory/Protocol that limited the server to one 
connected client.  For the use I would be putting the server to, this is 
maybe not as horrible as it sounds, but it is probably as ugly as it sounds.

I'm hoping there's something in PB that I haven't come across that can solve 
this problem in a more elegant way.  Any help or pointers would be greatly 
appreciated.

Thanks,
Steve

_________________________________________________________________
http://newlivehotmail.com




From phil at bubblehouse.org  Tue Jul 10 21:56:58 2007
From: phil at bubblehouse.org (Phil Christensen)
Date: Tue, 10 Jul 2007 21:56:58 -0400
Subject: [Twisted-Python] dropin.cache?
In-Reply-To: <20070710204848.4947.630874536.divmod.quotient.10252@ohm>
References: <20070710204848.4947.630874536.divmod.quotient.10252@ohm>
Message-ID: <093CD9A9-7EE5-4957-B7B6-99F7F4B67274@bubblehouse.org>

On Jul 10, 2007, at 4:48 PM, Jean-Paul Calderone wrote:
> On Tue, 10 Jul 2007 16:00:01 -0400, Phil Christensen  
> <phil at bubblehouse.org> wrote:
>> The problem is that putting a try/catch around getPlugins doesn't   
>> work, or doesn't appear to. I've looked at the code in  
>> getPlugins,  and I can't figure out why the exception isn't being  
>> caught. Since  I'm not actually using the reactor, I would assume  
>> there's no  deferred trickery that needs to be done, so I'm at a  
>> bit of a loss.
>>
>> Any help in this matter would be appreciated...
>>
>
> There's an open ticket for changing the reporting of this condition  
> from a
> full traceback to a shorter message:
>
>  http://twistedmatrix.com/trac/ticket/2409
>
> (Hmm, although that's not quite what I remembered, maybe there's  
> another one
> as well).

So, I now understand why I couldn't catch the error -- I just  
happened to be doing my own logging to stderr and thought the log  
messages I saw were an actual traceback.

I have a simple solution for this issue, if anyone would care to  
check out my patch attached to the ticket above.

I know this is a pretty minor issue, but it's tickling my "coder's  
OCD" ;-)...

-phil



From pbastov at gmail.com  Wed Jul 11 00:23:10 2007
From: pbastov at gmail.com (Pavel Bastov)
Date: Wed, 11 Jul 2007 10:23:10 +0600
Subject: [Twisted-Python] Application Start Up and Tear Down
In-Reply-To: <20070709133157.26384.240598309.divmod.xquotient.193@joule.divmod.com>
References: <eaf39e680707082149w4b948c20r3f0061b079bcb020@mail.gmail.com>
	<20070709055315.GF9243@steerpike.home.puzzling.org>
	<20070709133157.26384.240598309.divmod.xquotient.193@joule.divmod.com>
Message-ID: <eaf39e680707102123t6a5b8803nbad82ab7b55c5be3@mail.gmail.com>

Thanks all for your assistance,

the service subclassing way worked perfectly. Now I can handle several
protocols with the service and share common data among them.

On 7/9/07, glyph at divmod.com <glyph at divmod.com> wrote:
>
> On 05:53 am, andrew-twisted at puzzling.org wrote:
> >Pavel Bastov wrote:
> >>Hi,
> >>
> >>so far I've been using only one Factory in my application. So, all the
> >>intialization and deinitialization code was in startFactory() /
> >>stopFactory().
> >>
> >>Now I have to add another protocol with another factory. Is there a
> >>similar pair of methods for the application (server) where I can
> >>initialize resources (db pool, for example) upon startup and free them
> >>upon shutdown?
> >
> >Make your own Service subclass, and override startService/stopService.
>
> I just want to reinforce that this is really the *correct* answer, and
> the other suggestions (custom code before/after run(), manually calling
> addSystemEventTrigger) both tightly bind your application logic to the
> particular way your entire process starts up and shuts down, rather than
> having a discrete unit for your application.  (Think global vs. instance
> variables.)
>
> The service hierarchy has issues (privilegedStartService being the
> biggest one) but it is generally the most flexible, since you can start
> and stop services and groups of services without starting and stopping
> the entire process.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


-- 
Good luck,

Pavel Bastov
xooChat Evangelist and Team Leader
http://www.xoochat.com/



From pbastov at gmail.com  Wed Jul 11 00:26:13 2007
From: pbastov at gmail.com (Pavel Bastov)
Date: Wed, 11 Jul 2007 10:26:13 +0600
Subject: [Twisted-Python] A collection of protocol objects
Message-ID: <eaf39e680707102126r69c20bffo6e7f5fe43ea73a28@mail.gmail.com>

Hi all,

is there any way to iterate through the collection of protocol
objects? I need this to check for idle connections and close them if
necessary.

TIA

-- 
Good luck,

Pavel Bastov
xooChat Evangelist and Team Leader
http://www.xoochat.com/



From daniel.cuesta at iavante.es  Wed Jul 11 03:52:55 2007
From: daniel.cuesta at iavante.es (Daniel de la Cuesta)
Date: Wed, 11 Jul 2007 09:52:55 +0200
Subject: [Twisted-Python] XMLRPC Class in HTTP Server.
In-Reply-To: <20070709141407.4947.1888526620.divmod.quotient.9437@ohm>
References: <20070709141407.4947.1888526620.divmod.quotient.9437@ohm>
Message-ID: <46948C57.3090500@iavante.es>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070711/24efb4b2/attachment.htm 

From p.mayers at imperial.ac.uk  Wed Jul 11 05:43:20 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 11 Jul 2007 10:43:20 +0100
Subject: [Twisted-Python] Perspective Broker with blocking,
	non-thread-safe C api?
In-Reply-To: <BAY134-F29CA1934A2BAC15C968407C9040@phx.gbl>
References: <BAY134-F29CA1934A2BAC15C968407C9040@phx.gbl>
Message-ID: <1184147001.2693.13.camel@localhost.localdomain>

On Wed, 2007-07-11 at 00:34 +0000, s. w. wrote:
> I'd like to use Perspective Broker to serve a set of objects remotely.  
> However, these objects wrap a non-thread-safe, blocking C api.  I'm new to 
> Twisted, but I believe I understand correctly that the blocking C api needs 
> to be accessed via threads in Twisted.
> 
> Given this, the only way I can think to use Perspective Broker would be to 
> use a special PBServerFactory/Protocol that limited the server to one 
> connected client.  For the use I would be putting the server to, this is 
> maybe not as horrible as it sounds, but it is probably as ugly as it sounds.
> 
> I'm hoping there's something in PB that I haven't come across that can solve 
> this problem in a more elegant way.  Any help or pointers would be greatly 
> appreciated.

It's not specific to PB - this applied to all of Twisted, and all of
Twisted has the same solution.

See "deferToThread" for examples of ways to call blocking APIs inside a
thread, and when the call returns the deferred will fire.

> 
> Thanks,
> Steve
> 
> _________________________________________________________________
> http://newlivehotmail.com
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From exarkun at divmod.com  Wed Jul 11 05:48:37 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 11 Jul 2007 05:48:37 -0400
Subject: [Twisted-Python] A collection of protocol objects
In-Reply-To: <eaf39e680707102126r69c20bffo6e7f5fe43ea73a28@mail.gmail.com>
Message-ID: <20070711094837.4947.1073649627.divmod.quotient.10425@ohm>

On Wed, 11 Jul 2007 10:26:13 +0600, Pavel Bastov <pbastov at gmail.com> wrote:
>Hi all,
>
>is there any way to iterate through the collection of protocol
>objects? I need this to check for idle connections and close them if
>necessary.

What collection of protocol objects?  (Hint: there isn't one, unless you
make one).

Jean-Paul



From pbastov at gmail.com  Wed Jul 11 10:20:37 2007
From: pbastov at gmail.com (Pavel Bastov)
Date: Wed, 11 Jul 2007 20:20:37 +0600
Subject: [Twisted-Python] A collection of protocol objects
In-Reply-To: <20070711094837.4947.1073649627.divmod.quotient.10425@ohm>
References: <eaf39e680707102126r69c20bffo6e7f5fe43ea73a28@mail.gmail.com>
	<20070711094837.4947.1073649627.divmod.quotient.10425@ohm>
Message-ID: <eaf39e680707110720h7356df3dt924d243b7a387ac4@mail.gmail.com>

Ah, ok I see. It should be maintained manually. Thanks.

On 7/11/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Wed, 11 Jul 2007 10:26:13 +0600, Pavel Bastov <pbastov at gmail.com> wrote:
> >Hi all,
> >
> >is there any way to iterate through the collection of protocol
> >objects? I need this to check for idle connections and close them if
> >necessary.
>
> What collection of protocol objects?  (Hint: there isn't one, unless you
> make one).
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


-- 
Good luck,

Pavel Bastov
xooChat Evangelist and Team Leader
http://www.xoochat.com/



From ellisonbg.net at gmail.com  Wed Jul 11 11:25:38 2007
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Wed, 11 Jul 2007 09:25:38 -0600
Subject: [Twisted-Python] Perspective Broker with blocking,
	non-thread-safe C api?
In-Reply-To: <1184147001.2693.13.camel@localhost.localdomain>
References: <BAY134-F29CA1934A2BAC15C968407C9040@phx.gbl>
	<1184147001.2693.13.camel@localhost.localdomain>
Message-ID: <6ce0ac130707110825tfd4885fs3c20a2cc0485d192@mail.gmail.com>

Things are a bit more complicated that just calling deferToThread.

The reason is that is you call a blocking C api in the thread, the
Python interpreter will not be able to switch threads until the
blocking C calls....unless the C code releases the Global Interpreter
Lock.  Thus you have two choices:

1)  Make sure that the C code releases the GIL and call it using
deferToThread.  This is probably the best solution.

2) If you can't release the GIL - if for instance the C code makes
calls to the Python C API, then you have to do the following.  You can
simply call the block C code in the main thread.  This will block the
Twisted event loop while the C code runs.  To mask this blocking
behavior, you will need to have a client that takes this into account.
 You basically need a way of making sure that while that code is
running no other client makes a call to the server running the C code.
 You also have to make sure that the client that initiated the call
doesn't make any further calls until the first is done.

The way we usually handle this is to make a separate process that
manages a queue of commands to be executed on the server.  Clients
then connect to this manager, which in turns submits them to the
actual PB server at the appropriate time.  This is a pain, but it
works extremely well.

Hope that helps.

Brian
On 7/11/07, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> On Wed, 2007-07-11 at 00:34 +0000, s. w. wrote:
> > I'd like to use Perspective Broker to serve a set of objects remotely.
> > However, these objects wrap a non-thread-safe, blocking C api.  I'm new to
> > Twisted, but I believe I understand correctly that the blocking C api needs
> > to be accessed via threads in Twisted.
> >
> > Given this, the only way I can think to use Perspective Broker would be to
> > use a special PBServerFactory/Protocol that limited the server to one
> > connected client.  For the use I would be putting the server to, this is
> > maybe not as horrible as it sounds, but it is probably as ugly as it sounds.
> >
> > I'm hoping there's something in PB that I haven't come across that can solve
> > this problem in a more elegant way.  Any help or pointers would be greatly
> > appreciated.
>
> It's not specific to PB - this applied to all of Twisted, and all of
> Twisted has the same solution.
>
> See "deferToThread" for examples of ways to call blocking APIs inside a
> thread, and when the call returns the deferred will fire.
>
> >
> > Thanks,
> > Steve
> >
> > _________________________________________________________________
> > http://newlivehotmail.com
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From glyph at divmod.com  Wed Jul 11 11:38:14 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 11 Jul 2007 15:38:14 -0000
Subject: [Twisted-Python] Perspective Broker with blocking,
	non-thread-safe C api?
In-Reply-To: <6ce0ac130707110825tfd4885fs3c20a2cc0485d192@mail.gmail.com>
References: <BAY134-F29CA1934A2BAC15C968407C9040@phx.gbl>
	<1184147001.2693.13.camel@localhost.localdomain>
	<6ce0ac130707110825tfd4885fs3c20a2cc0485d192@mail.gmail.com>
Message-ID: <20070711153814.26384.1840649714.divmod.xquotient.456@joule.divmod.com>


On 03:25 pm, ellisonbg.net at gmail.com wrote:
>The reason is that is you call a blocking C api in the thread, the
>Python interpreter will not be able to switch threads until the
>blocking C calls....unless the C code releases the Global Interpreter
>Lock.  Thus you have two choices:
(1 and 2 snipped)
>The way we usually handle this is to make a separate process that
>manages a queue of commands to be executed on the server.  Clients
>then connect to this manager, which in turns submits them to the
>actual PB server at the appropriate time.  This is a pain, but it
>works extremely well.

That sounds like a viable "third choice", and I have a fourth ;).

Have the PB server itself spawn a subprocess (or multiple subprocesses!) 
dedicated to this particular API.  Then simply block in that (those) 
subprocess(es), and return Deferreds from your PB methods that wait for 
those requests to complete.

That way the PB server remains self-contained and you don't add the 
administrative overhead of setting up a separate server.



From db3l.net at gmail.com  Wed Jul 11 20:39:12 2007
From: db3l.net at gmail.com (David Bolen)
Date: Wed, 11 Jul 2007 20:39:12 -0400
Subject: [Twisted-Python] Re: How to receive a big stream data?
References: <5c6c8710706261902u347d25e0lc7375d23ef760dd5@mail.gmail.com>
	<28012bc60706270121k2bae8c8ey60f591e003cf8006@mail.gmail.com>
	<5c6c8710706270221u4f7571dbq511d9fe1ef746da8@mail.gmail.com>
	<5c6c8710707021840s522c5d10n657335582fd189@mail.gmail.com>
	<09CD42BF-7332-4234-B5BD-AB7B3C40DBD4@atlas.st>
	<5c6c8710707082331i31196904na42c81853b734057@mail.gmail.com>
Message-ID: <m21wfe5ubz.fsf@valheru.db3l.homeip.net>

"steven wang" <steven.zdwang at gmail.com> writes:

> But I want to receive binary data in my protocol.

Even if you start with a non-binary header, you can switch to
receiving binary information at any time by going using the raw mode
of most of the basic protocols.  And having some sort of ASCII header
prior to the raw data is often a very simple way to handle things
(something in common with a tremendous number of standard TCP-based
protocols).

Your original post had a fairly straight-forward ASCII header that I
think would probably be fine.  What you're probably missing is the
concept of switching to a raw binary receive mode which then switches
your protocol from getting data in its lineReceived method to having
rawDataReceived called.

For example, here's a slightly stripped pair of protocols (server and
client) that I'm currently using as part of a bigger project.  Most of
the communication is over a PB connection which the client uses to
perform operations on the server, one of which is editing job
information.  But jobs contain attached files (often very large
audio/video files), so committing changes to a job also involves
transmitting up any newly added files.  So after the client updates
the server's meta data, it initiates a separate set of file transfers
across a different port.

In my case, the header for a file transfer includes a session key
(which the protocol uses to reference the original PB-based job
session the client was using) along with a file key used for storage
(which uniquely references a specific file in the job).  The final
element is the total file size.  That is, upon connecting, the client
transmits a line such as:

    <session_uuid> <file_uuid> #######

where the two uuids are specific to the transfer underway (and help
with security since a random client isn't going to know the right
ids), and ######## is the overall file length.  After sending that
line (e.g., right after its final newline), the client just blasts up
the raw data.

The protocol is a simple LineReceiver based protocol, that receives
that information information as an ASCII initial line, after which it
switches to raw mode to receive the data.  Although the data length
could technically be inferred from when the client disconnects, having
it up front ensures I can detect a transfer that gets interrupted.

So on the server side you have:

          - - - - - - - - - - - - - - - - - - - - - - - - -

class FileIOProtocol(LineReceiver):

    def __init__(self):
        self.info = None
        self.outfile = None
        self.remain = 0
        self.crc = 0

    def lineReceived(self, line):
        logger.debug('FileIOProtocol:lineReceived:%s', line)
        sess_key, file_key, self.size = line.split()
        file_key = uuid.UUID(file_key)

        try:
            session_uuid = uuid.UUID(sess_key)
        except:
            logger.debug('FileIOProtocol:lineReceived Invalid session')
            self.transport.loseConnection()
            return

        self.job_session = self.factory.sessions.get(session_uuid)
        if not self.job_session:
            logger.debug('FileIOProtocol:lineReceived Invalid session')
            self.transport.loseConnection()
            return

        if not self.job_session.active:
            logger.debug('FileIOProtocol:lineReceived Stale session')
            self.transport.loseConnection()
            return

        # [db3l] The original code validates the individual file uuid here
        # resulting in self.job_file as job file object from the session
        
        if not self.job_file:
            logger.debug('FileIOProtocol:lineReceived Invalid file key')
            self.transport.loseConnection()
            return
            
        # Create the upload directory if not already present
        if not os.path.isdir(self.job_session.upload_dir):
            os.makedirs(self.job_session.upload_dir)

        self.outfilename = os.path.join(self.job_session.upload_dir,
                                        self.job_file['uuid'].hex)

        logger.debug('FileIOProtocol:lineReceived Receiving into %s',
                     self.outfilename)
        try:
            self.outfile = open(self.outfilename,'wb')
        except Exception, value:
            logger.debug('FileIOProtocol:lineReceived Unable to open file %s '
                         '(%s)', self.outfilename, value)
            self.transport.loseConnection()
            return

        self.remain = int(self.size)
        logger.debug('FileIOProtocol:lineReceived Entering raw mode: %s %s',
                     self.outfile, self.remain)
        self.setRawMode()

    def rawDataReceived(self, data):
        self.remain -= len(data)
        self.crc = crc32(data, self.crc)
        self.outfile.write(data)

    def connectionMade(self):
        LineReceiver.connectionMade(self)
        logger.debug('FileIOProtocol:connectionMade')

    def connectionLost(self, reason):
        LineReceiver.connectionLost(self, reason)
        logger.debug('FileIOProtocol:connectionLost')
        if self.outfile:
            self.outfile.close()

            if self.remain != 0:
                # Problem uploading - discard
                logger.debug('FileIOProtocol:connectionLost remain(%d)!=0',
                             self.remain)
                
                os.remove(self.outfilename)
            else:
                # Update job object with upload status
                self.job_file['uploaded'] = datetime.utcnow()
                self.job_file['size'] = self.size
                self.job_file['crc'] = self.crc


class FileIOFactory(ServerFactory):
    protocol = FileIOProtocol

    def __init__(self, db, sessions, options):
        self.db = db
        self.options = options
        self.sessions = sessions

          - - - - - - - - - - - - - - - - - - - - - - - - -

which is bound to an appropriate port on the server however you'd like.
I use code like:

    self.fileio = FileIOFactory(db, self.sessions, options)
    reactor.listenTCP(self.options['file_port'], self.fileio)


On the client side, I have an equivalent protocol that transmits up
the file.  It's run beneath a GUI, so keeps a reference to the GUI
controller object that might indicate it needs to cancel a transfer
mid-stream, as well as updating the controller during the transfer so
it can update a progress bar on screen.

It is also a LineReceiver based protocol, and uses the Twisted
FileSender object to do the raw data transfer (which is implemented as
a straight producer with the TCP socket being the consumer).  The
connectionMade method is where it transmits the ASCII header and then
institutes the raw data transfer.

          - - - - - - - - - - - - - - - - - - - - - - - - -


class TransferCancelled(Exception):
    """Exception for a user cancelling a transfer"""
    pass

class FileIOClient(LineReceiver):

    def __init__(self, path, sess_key, file_key, controller):
        self.path = path
        self.sess_key = sess_key
        self.file_key = file_key
        self.controller = controller

        self.infile = open(self.path, 'rb')
        self.insize = os.stat(self.path).st_size

        self.result = None
        self.completed = False

        self.controller.file_sent = 0
        self.controller.file_size = self.insize

    def _monitor(self, data):
        self.controller.file_sent += len(data)
        self.controller.total_sent += len(data)

        # Check with controller to see if we've been cancelled and abort
        # if so.
        if self.controller.cancel:
            print 'FileIOClient._monitor Cancelling'
            # Need to unregister the producer with the transport or it will
            # wait for it to finish before breaking the connection
            self.transport.unregisterProducer()
            self.transport.loseConnection()
            # Indicate a user cancelled result
            self.result = TransferCancelled('User cancelled transfer')

        return data

    def cbTransferCompleted(self, lastsent):
        self.completed = True
        self.transport.loseConnection()

    def connectionMade(self):
        self.transport.write('%s %s %s\r\n' % (str(self.sess_key),
                                               str(self.file_key),
                                               self.insize))
        sender = FileSender()
        sender.CHUNK_SIZE = 2 ** 16
        d = sender.beginFileTransfer(self.infile, self.transport,
                                     self._monitor)
        d.addCallback(self.cbTransferCompleted)

    def connectionLost(self, reason):
        LineReceiver.connectionLost(self, reason)
        print 'FileIOClient:connectionLost'
        self.infile.close()
        if self.completed:
            self.controller.completed.callback(self.result)
        else:
            self.controller.completed.errback(reason)

class FileIOClientFactory(ClientFactory):

    protocol = FileIOClient

    def __init__(self, path, sess_key, file_key, controller):
        self.path = path
        self.sess_key = sess_key
        self.file_key = file_key
        self.controller = controller
        
    def clientConnectionFailed(self, connector, reason):
        ClientFactory.clientConnectionFailed(self, connector, reason)
        self.controller.completed.errback(reason)

    def buildProtocol(self, addr):
        print 'buildProtocol'
        p = self.protocol(self.path, self.sess_key, self.file_key,
                          self.controller)
        p.factory = self
        return p

          - - - - - - - - - - - - - - - - - - - - - - - - -


Within the presentation layer controller on the client, initiating a
transfer is done with:

    def _transmitOne(self, address, port, path, sess_key, file_key):
        self.completed = defer.Deferred()
        f = FileIOClientFactory(path, sess_key, file_key, self)
        reactor.connectTCP(address, port, f)
        return self.completed

and the result is that self.completed fires (callback or errback) when
the transfer is done (which the controller uses to then initiate the
next transfer when there are a list of files to go up for a job).

While probably not exactly what you're trying to do, perhaps it'll
point you in the right direction.

-- David




From elicriffield at gmail.com  Thu Jul 12 01:52:56 2007
From: elicriffield at gmail.com (Eli Criffield)
Date: Thu, 12 Jul 2007 00:52:56 -0500
Subject: [Twisted-Python] conch command at a time
Message-ID: <18e3f33d0707112252q15fd35i5e177921caeb5f7d@mail.gmail.com>

Does anyone have an example of an conch code that executes one
command, process the results then executes another that maybe
different based on the output of the first. And continues processing
commands like that all in the same session. Almost like "expect".

Thats a bit different then the conch script itself in that it just
executes commands then sends you the output, and doesn't process it at
all.

Thats what I'm trying to accomplish, but i can't even find an example
where i could set a list of commands to run, then kick off a ssh and
execute the commands in order and return the results of all of them to
store off somewhere.

I'm not sure if using SSHSession or SSHUnixChannel would help to do
this because they have no documentation on what they do or how to use
them.

Eli Criffield



From kent.brake at gmail.com  Thu Jul 12 13:47:19 2007
From: kent.brake at gmail.com (kent brake)
Date: Thu, 12 Jul 2007 10:47:19 -0700
Subject: [Twisted-Python] ESMTP Authentication
Message-ID: <89d40a0e0707121047k2063ec7awfbf835890f6d2418@mail.gmail.com>

Hi,

I am trying to implement SMTP Auth using the twisted mail.esmtp class, but I
can't seem to figure out the right methods needed. I've added a challenger
to the ESMTP instance as a class:

self.challengers = {'LOGIN': KPLAINCredentials()}

But I can't seem to figure out what methods I need to implement in the
KPLAINCredentials class. Does anyone have a snippet of code that implements
LOGIN Auth that I could use for a reference or know the methods needed? I am
very confused by this call

  chal = self.challengers.get(parts[0].upper(), lambda: None)()

in esmtp.ext_Auth

Thanks in advance for any advice.

-Kent
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070712/b5d3fa78/attachment.htm 

From challman at gmail.com  Thu Jul 12 15:06:49 2007
From: challman at gmail.com (Chris Hallman)
Date: Thu, 12 Jul 2007 15:06:49 -0400
Subject: [Twisted-Python] SSHv2 client script for Cisco routers
Message-ID: <9f68812f0707121206o245cce61l5098a8b5f6549fe9@mail.gmail.com>

Does anyone have an example of a SSHv2 client script? I need to write a
script that uses SSHv2 to execute multiple commands on hundreds of routers.
I already have a script that does this with the Telnetlib. I need to
transition to SSHv2.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070712/999b9333/attachment.htm 

From elicriffield at gmail.com  Thu Jul 12 16:00:24 2007
From: elicriffield at gmail.com (Eli Criffield)
Date: Thu, 12 Jul 2007 15:00:24 -0500
Subject: [Twisted-Python] SSHv2 client script for Cisco routers
In-Reply-To: <9f68812f0707121206o245cce61l5098a8b5f6549fe9@mail.gmail.com>
References: <9f68812f0707121206o245cce61l5098a8b5f6549fe9@mail.gmail.com>
Message-ID: <18e3f33d0707121300l49850ddft83b7d78676527091@mail.gmail.com>

Thats exactly what I've been working on, a script to automate
connections to cisco switches, where you have to execute multiple
commands per connection (config t, then some commands ect...)

I emailed this list yesterday asking if anyone has some examples of
how to do that and no reply yet.

I'd like to get ssh worked into http://code.google.com/p/exscript/ .
Exscript does what your doing with telnetlib and uses  templates and
concurrent connections.


Eli Criffield

On 7/12/07, Chris Hallman <challman at gmail.com> wrote:
>
> Does anyone have an example of a SSHv2 client script? I need to write a
> script that uses SSHv2 to execute multiple commands on hundreds of routers.
> I already have a script that does this with the Telnetlib. I need to
> transition to SSHv2.
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



From wingfields at hotmail.com  Thu Jul 12 16:22:16 2007
From: wingfields at hotmail.com (s. w.)
Date: Thu, 12 Jul 2007 20:22:16 +0000
Subject: [Twisted-Python] Re: Perspective Broker with blocking,
	non-thread-safe C api?
In-Reply-To: <E1I8ebj-0006w7-Up@cube.twistedmatrix.com>
Message-ID: <BAY134-F226358F2CD99919F5AF793C9FC0@phx.gbl>



>On 03:25 pm, ellisonbg.net at gmail.com wrote:
> >The reason is that is you call a blocking C api in the thread, the
> >Python interpreter will not be able to switch threads until the
> >blocking C calls....unless the C code releases the Global Interpreter
> >Lock.  Thus you have two choices:
>(1 and 2 snipped)
> >The way we usually handle this is to make a separate process that
> >manages a queue of commands to be executed on the server.  Clients
> >then connect to this manager, which in turns submits them to the
> >actual PB server at the appropriate time.  This is a pain, but it
> >works extremely well.
>
>That sounds like a viable "third choice", and I have a fourth ;).
>
>Have the PB server itself spawn a subprocess (or multiple subprocesses!)
>dedicated to this particular API.  Then simply block in that (those)
>subprocess(es), and return Deferreds from your PB methods that wait for
>those requests to complete.
>
>That way the PB server remains self-contained and you don't add the
>administrative overhead of setting up a separate server.
>

Thanks for all the great suggestions.  Because of some restrictions imposed 
by the C api, I think I will try out the spawning of subprocesses.

I don't suppose PB does IPC by any chance? :)

Steve

_________________________________________________________________
Need a brain boost? Recharge with a stimulating game. Play now!? 
http://club.live.com/home.aspx?icid=club_hotmailtextlink1




From challman at gmail.com  Thu Jul 12 16:39:09 2007
From: challman at gmail.com (Chris Hallman)
Date: Thu, 12 Jul 2007 16:39:09 -0400
Subject: [Twisted-Python] SSHv2 client script for Cisco routers
In-Reply-To: <18e3f33d0707121300l49850ddft83b7d78676527091@mail.gmail.com>
References: <9f68812f0707121206o245cce61l5098a8b5f6549fe9@mail.gmail.com>
	<18e3f33d0707121300l49850ddft83b7d78676527091@mail.gmail.com>
Message-ID: <9f68812f0707121339xba9801dya7de435823170008@mail.gmail.com>

Here's one of my favorite programs to date (see attachment). It's a
multi-threaded ISDN testing program. Here's the workflow:

1. Connect to each head-end router and extract all the usernames for
testing.
2. Spawn up to N threads and telnet to each device.
3. Check for a layer-1 connection.
4. Check for an existing DBU connection.
5. Extract all interfaces for testing.
6. Execute a DBU test for each interface verifying a connection takes place
and an EIGRP peer establishes.

(It does some other things specific for our network.) It writes output to a
local log file and SNMP traps on failure and program completion. I really
need to get it working using SSH. I'm looking into Paramiko and Twisted,
however I'm not the best of programmers. I've been able to learn enough to
complete tasks such as this. Here's a simple program using Paramiko:

import paramiko
import time

client = paramiko.SSHClient()

# ignore host keys for the test
client.set_missing_host_key_policy(paramiko.MissingHostKeyPolicy())

client.connect('rtr3926', 22, 'user', 'passw')
(stdin, stdout, stderr) = client.exec_command('sh ver | i IOS')
print stdout.read()
#(stdin, stdout, stderr) = client.exec_command('sh ver | i IOS')
#print stdout.read()

The only problem is it drops the channel after the first "sh ver".


On 7/12/07, Eli Criffield <elicriffield at gmail.com> wrote:
>
> Thats exactly what I've been working on, a script to automate
> connections to cisco switches, where you have to execute multiple
> commands per connection (config t, then some commands ect...)
>
> I emailed this list yesterday asking if anyone has some examples of
> how to do that and no reply yet.
>
> I'd like to get ssh worked into http://code.google.com/p/exscript/ .
> Exscript does what your doing with telnetlib and uses  templates and
> concurrent connections.
>
>
> Eli Criffield
>
> On 7/12/07, Chris Hallman <challman at gmail.com> wrote:
> >
> > Does anyone have an example of a SSHv2 client script? I need to write a
> > script that uses SSHv2 to execute multiple commands on hundreds of
> routers.
> > I already have a script that does this with the Telnetlib. I need to
> > transition to SSHv2.
> >
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> >
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070712/f7f086a2/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: ISDNtest.py
Type: text/x-python
Size: 12872 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20070712/f7f086a2/attachment.py 

From itamar at itamarst.org  Fri Jul 13 10:20:39 2007
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 13 Jul 2007 10:20:39 -0400
Subject: [Twisted-Python] Re: Perspective Broker with blocking,
	non-thread-safe C api?
In-Reply-To: <BAY134-F226358F2CD99919F5AF793C9FC0@phx.gbl>
References: <BAY134-F226358F2CD99919F5AF793C9FC0@phx.gbl>
Message-ID: <1184336439.26707.44.camel@localhost.localdomain>

On Thu, 2007-07-12 at 20:22 +0000, s. w. wrote:

> I don't suppose PB does IPC by any chance? :)

Sure - run it over a Unix socket using reactor.listen/connectUnix.




From pbastov at gmail.com  Fri Jul 13 23:13:36 2007
From: pbastov at gmail.com (Pavel Bastov)
Date: Sat, 14 Jul 2007 09:13:36 +0600
Subject: [Twisted-Python] adbpi + mysql + utf8 codec
Message-ID: <eaf39e680707132013j7bdcda53qce7448c94f43034d@mail.gmail.com>

Hi all,

while checking my server logs I found a lot of messages like this:

[Failure instance: Traceback: <type 'exceptions.UnicodeDecodeError'>:
'utf8' codec can't decode bytes in position 4-6: invalid data

What might be the cause of this and how do I fix it?

Thanks.

-- 
Good luck,

Pavel Bastov
xooChat Evangelist and Team Leader
http://www.xoochat.com/



From manlio_perillo at libero.it  Sat Jul 14 12:14:11 2007
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sat, 14 Jul 2007 18:14:11 +0200
Subject: [Twisted-Python] logging and Unicode strings
Message-ID: <4698F653.2020000@libero.it>

It seems that it is not possibile to pass Unicode strings to the logging 
system.


2007/07/14 18:10 CEST [HTTPChannel,0,127.0.0.1] <unicode instance at 
-1254556832 with str error Traceback (most recent call last):

           File 
"/usr/lib/python2.4/site-packages/twisted/python/reflect.py", line 463, 
in safe_str
             return str(o)

         UnicodeEncodeError: 'ascii' codec can't encode character 
u'\xf2' in position 31: ordinal not in range(128)
         >


Since I do not want to encode every string, I have changed safe_str:
def safe_str(o):
     try:
         return str(o)
     except:
         if isinstance(o, unicode):
             import sys
             encoding = sys.getdefaultencoding()
             return o.encode(encoding, 'backslashreplace')

         strExc = '\n'.join(traceback.format_exception(*sys.exc_info()))
         clsName = _determineClassName(o)
         obId = id(o)
         return '<%s instance at %s with str error %s>' % (
             clsName, obId, strExc)


Is this a feature or a bug?



Thanks and regards  Manlio Perillo



From twisted at claude.nl  Sat Jul 14 17:06:15 2007
From: twisted at claude.nl (Reinoud Elhorst)
Date: Sat, 14 Jul 2007 23:06:15 +0200
Subject: [Twisted-Python] Flash AMF and Twisted
References: 28012bc60706120506t44ef5e0dx4697b5863b2c746a@mail.gmail.com
Message-ID: <46993AC7.2050806@claude.nl>

I only read this message today. About a month ago, I started playing a
little with such a project myself. Actually the project is (the
millionth) media player on the Wii, but since progressive download on
the Wii works only for flv-files smaller than about 100M (it runs out of
memory else), I needed a streaming flv server.

I'm still trying to get a feel for best practices in Python, however it
does get the work done, it can streams flvs to flash player.

http://code.google.com/p/wiidiaplayer/

Just wanted to let you know.


On 2007-06-12 12:06, Arnar Birgisson wrote:
> Hi all,
>
> Re. this message:
> http://twistedmatrix.com/pipermail/twisted-python/2007-May/015373.html
>
> Has any work been done here? I'm facing a project that requires
> two-way communication between a Flex/Apollo app and a Twisted server.
> In my initial tests I used http and comet-like techniques but I'm not
> sure they are the most efficient way.
>
> I'm willing to help with the project - I've already dabbled a little
> in the DjangoAMF stuff.
>
> Arnar
>
>




From exarkun at twistedmatrix.com  Sun Jul 15 00:05:03 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 15 Jul 2007 04:05:03 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1184472303.25.122650238@twistedmatrix.com

Bug summary
______________________
Summary for 2007-07-08 through 2007-07-15
Bugs opened: 7    Bugs closed: 6  Total open bugs: 985 (+1)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +2  |Highest:  -2          |Core:      -1          
|Enhancement:  -1  |Normal:   +6          |Foolscap:  +2          
|Task:         +2  |Low:      -1          |Web2:      +1          
                                          |Website:   +2          
                                          |Words:     -1          


New / Reopened Bugs
______________________
                    ===== Normal =====
[#2730] Documentation for CertificateOptions.__init__'s caCerts param mentions a non-existant caCertFile param. (opened by dreid)
    defect          core       http://twistedmatrix.com/trac/ticket/2730

[#2731] foolscap: trivial fix (remove path separator) for test failing on windows (opened by strank)
    defect          foolscap   http://twistedmatrix.com/trac/ticket/2731

[#2732] foolscap: find actual exception types in CopiedFailure (opened by strank)
    enhancement     foolscap   http://twistedmatrix.com/trac/ticket/2732

[#2733] test the changes I just made to commit_bot et cetera (opened by exarkun) (CLOSED, fixed)
    task            website    http://twistedmatrix.com/trac/ticket/2733

[#2734] Access control mechanism for web2 (opened by Tv)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2734

[#2733] test the changes I just made to commit_bot et cetera (opened by exarkun) (CLOSED, fixed)
    task            website    http://twistedmatrix.com/trac/ticket/2733

[#2733] test the changes I just made to commit_bot et cetera (opened by exarkun) (CLOSED, fixed)
    task            website    http://twistedmatrix.com/trac/ticket/2733



Closed Bugs
______________________
                    ===== Highest =====
[#2502] 'and' and 'or' operator suport for xpath (opened by jack, closed by ralphm, fixed)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2502

[#1840] clearly, unambiguously, and centrally document development procedures (opened by glyph, closed by glyph, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1840

                    ===== Normal =====
[#2733] test the changes I just made to commit_bot et cetera (opened by exarkun, closed by exarkun, fixed)
    task            website    http://twistedmatrix.com/trac/ticket/2733

[#2733] test the changes I just made to commit_bot et cetera (opened by exarkun, closed by exarkun, fixed)
    task            website    http://twistedmatrix.com/trac/ticket/2733

[#2733] test the changes I just made to commit_bot et cetera (opened by exarkun, closed by exarkun, fixed)
    task            website    http://twistedmatrix.com/trac/ticket/2733

                    ===== Low =====
[#2038] Make the pypy builder work (opened by jerub, closed by exarkun, invalid)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2038



Ticket Lifetime Stats
----------------------
Oldest open ticket - [#38] Should be a way to create documentation aliases (since 2003-07-12 16:08:03).
Newest open ticket - [#2734] Access control mechanism for web2 (since 2007-07-11 17:03:21).

Mean open ticket age: 487 days, 15:58:38.699575.
Median: 373 days, 12:38:59.124956.
Standard deviation: 391 days, 0:56:35.878258.
Interquartile range: 477 days, 9:45:08.

Mean time between ticket creation and ticket resolution: 119 days, 20:57:26.629088.
Median: 14 days, 10:59:04.
Standard deviation is 223 days, 11:04:36.097636.
The interquartile range is 125 days, 12:17:18.

Mean time spent in review: 58 days, 19:06:30.186814.
Median: 4 days, 5:45:01.
Standard deviation: 126 days, 6:10:02.052516.
Interquartile range: 25 days, 23:46:15.

Mean number of times a ticket is reviewed: 1.79586563307.
Median: 1
Standard deviation: 1.38175017749.
Interquartile range: 1.




From arnarbi at gmail.com  Sun Jul 15 19:32:41 2007
From: arnarbi at gmail.com (Arnar Birgisson)
Date: Sun, 15 Jul 2007 23:32:41 +0000
Subject: [Twisted-Python] [OT] Flash AMF and Twisted
In-Reply-To: <46993AC7.2050806@claude.nl>
References: <46993AC7.2050806@claude.nl>
Message-ID: <28012bc60707151632w1be1438fi41676c35b182150@mail.gmail.com>

On 7/14/07, Reinoud Elhorst <twisted at claude.nl> wrote:
> I only read this message today. About a month ago, I started playing a
> little with such a project myself. Actually the project is (the
> millionth) media player on the Wii, but since progressive download on
> the Wii works only for flv-files smaller than about 100M (it runs out of
> memory else), I needed a streaming flv server.
>
> I'm still trying to get a feel for best practices in Python, however it
> does get the work done, it can streams flvs to flash player.
>
> http://code.google.com/p/wiidiaplayer/
>
> Just wanted to let you know.

Thanks!

Uhh.. I just took a look at your code and though "he's doing this
stuff exactly as we did" - until I realized it was my code :/ - I
guess that's partly our fault for not including the license disclaimer
in our experimental files. To be clear, you are free to copy the code
as you like - but please include the copyright notice somewhere (our
code is MIT licensed).

On the other hand, your RTMP stuff is something we are planning on
implementing in RTMPy. I would much appreciate it if you were willing
to join our project and help us out, since your input would definitely
be of great value. Our page is at http://dev.collab.com/rtmpy (seems
to be down atm) and our ML is at
http://lists.collab.com/mailman/listinfo/rtmpy.

Arnar



From twisted at claude.nl  Mon Jul 16 04:08:41 2007
From: twisted at claude.nl (Reinoud Elhorst)
Date: Mon, 16 Jul 2007 10:08:41 +0200
Subject: [Twisted-Python] [OT] Flash AMF and Twisted
In-Reply-To: <28012bc60707151632w1be1438fi41676c35b182150@mail.gmail.com>
References: <46993AC7.2050806@claude.nl>
	<28012bc60707151632w1be1438fi41676c35b182150@mail.gmail.com>
Message-ID: <469B2789.3000803@claude.nl>

Arnar Birgisson wrote:
> On 7/14/07, Reinoud Elhorst <twisted at claude.nl> wrote:
>> I only read this message today. About a month ago, I started playing a
>> little with such a project myself. Actually the project is (the
>> millionth) media player on the Wii, but since progressive download on
>> the Wii works only for flv-files smaller than about 100M (it runs out of
>> memory else), I needed a streaming flv server.
>>
>> I'm still trying to get a feel for best practices in Python, however it
>> does get the work done, it can streams flvs to flash player.
>>
>> http://code.google.com/p/wiidiaplayer/
>>
>> Just wanted to let you know.
>
> Thanks!
>
> Uhh.. I just took a look at your code and though "he's doing this
> stuff exactly as we did" - until I realized it was my code :/ - I
> guess that's partly our fault for not including the license disclaimer
> in our experimental files. To be clear, you are free to copy the code
> as you like - but please include the copyright notice somewhere (our
> code is MIT licensed).
>
> On the other hand, your RTMP stuff is something we are planning on
> implementing in RTMPy. I would much appreciate it if you were willing
> to join our project and help us out, since your input would definitely
> be of great value. Our page is at http://dev.collab.com/rtmpy (seems
> to be down atm) and our ML is at
> http://lists.collab.com/mailman/listinfo/rtmpy.
>
> Arnar
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
OK, Sorry about the copyright message. I was using Django's AMF parser, 
but it had a bug (undefined type 6, by now I realise that it should just 
return None), I put in your amf parser yesterday to see how it would go 
(and, too be honest, didn't know the details of the MIT licence...). 
What is the exact wording of the copyright you'd like me to include? 
(Actually I guess I should double check django's code license too.....)

The rest of the rtmpcode is a port from 
http://code.google.com/p/haxevideo/, mixed with a lot of my own to 
server specific file types.

I joined the rtmpy lists, hopefully I can be of some value!

Reinoud





From daedalus at eigenmagic.com  Mon Jul 16 05:01:52 2007
From: daedalus at eigenmagic.com (Justin Warren)
Date: Mon, 16 Jul 2007 19:01:52 +1000
Subject: [Twisted-Python] SSHv2 client script for Cisco routers
In-Reply-To: <18e3f33d0707121300l49850ddft83b7d78676527091@mail.gmail.com>
References: <9f68812f0707121206o245cce61l5098a8b5f6549fe9@mail.gmail.com>
	<18e3f33d0707121300l49850ddft83b7d78676527091@mail.gmail.com>
Message-ID: <1184576512.2419.39.camel@localhost>

On Thu, 2007-07-12 at 15:00 -0500, Eli Criffield wrote:
> Thats exactly what I've been working on, a script to automate
> connections to cisco switches, where you have to execute multiple
> commands per connection (config t, then some commands ect...)

Hmm. I have code I didn't quite manage to publish last weekend does all
this and more. The current version breaks out to commandline via a
Process to run ssh, rather than implementing the SSH protocol itself,
though.

> I'd like to get ssh worked into http://code.google.com/p/exscript/ .
> Exscript does what your doing with telnetlib and uses  templates and
> concurrent connections.

This looks neat. I'll have to check it out to make sure I'm not
duplicating effort, however, I think I'm attacking this problem from a
different direction. If you're interested, read on. If not, stop now.

*ahem*

I want to automate change implementations. I'm sick of poorly controlled
changes being badly implemented in production environments, with no
backout plans. I'm sick of operators cutting and pasting from Notepad to
run commands over a telnet session. I want to be able to take a test lab
from simulation A to simulation B without having to use 9 different
admin tools.

This needs to work with multiple, different pieces of kit: NetApp,
Cisco, *nix boxen, Windows, etc. Each needs to be talked to slightly
differently.

Expect scripts solve part of the problem: templated communication to
perform a specific action. I've taken things one step further. I've
built a change management framework around this idea. There are 3 major
objects:

Devices: Things that need to have their state changed.
Provisioners: Things that communicate with Devices, in order to
implement Changes.
Changes: A series of actions, applied by a Provisioner, to a list of
Devices, to change their state.

A change consists of 6 major steps:

1. Pre-implementation, to check that the change is implementable, based
on the current state of a device.
2. Implementation, actually applying the change.
3. Post-Implementation verification. Make sure the change worked
correctly.

and then, if something goes wrong somewhere

4. Pre-backout, check that the change can be backed out.
5. Backout, actually backing out the change.
6. Post-backout verification, to make sure the backout was successful.

So, you can define a list of Change templates using variable
substitution, and then these changes can be applied to a list of devices
by using a set of Provisioners that know how to communicate to these
Devices.

Changes can have dependencies, so you can chain them together into a
tree of arbitrary complexity. Using the magic of twisted Deferreds, you
can run changes serially, or in parallel, limited only by the dependency
tree.

So, after that rather lengthy blurb, is anyone interested in this? Or am
I reinventing the wheel? I looked around for something similar in the
FOSS world a couple of months back, but everything I saw seemed to be
*nix centered and didn't do Cisco or NetApp.

Email me off list if you want this thing, so I know whether to try
harder to find some spare hours, or if it can wait a few weeks.

-- 
Justin Warren <daedalus at eigenmagic.com>



From osmaker at gmail.com  Mon Jul 16 05:55:07 2007
From: osmaker at gmail.com (Kyle Johnson)
Date: Mon, 16 Jul 2007 02:55:07 -0700
Subject: [Twisted-Python] FTP/VFS -- registerProducer error
Message-ID: <e68bced10707160255t55a610acra08eb3ba732ae97f@mail.gmail.com>

Modeling my code off the FTP server example
(http://twistedmatrix.com/trac/attachment/ticket/1579/ftp_server_example.py),
I coded my own FTPRealm class to use an inmem vfs instead of the local
filesystem.

I can browse and download data from it without issue, but anytime I
attempt to upload a file, I get this error:
File "twisted/protocols/ftp.py", line 421, in registerConsumer
    self._cons.registerProducer(self, True)
exceptions.AttributeError: _FileToConsumerAdapter instance has no
attribute 'registerProducer'


I'm setting up the avatar with the line:
avatar = FileSystemToIFTPShellAdaptor(pathutils.FileSystem(inmem.FakeDirectory()))

Full code is available here: http://rafb.net/p/FgTbiP80.html



Any help would be greatly appreciated.



From therve at free.fr  Mon Jul 16 06:26:39 2007
From: therve at free.fr (Thomas =?iso-8859-1?b?SGVyduk=?=)
Date: Mon, 16 Jul 2007 12:26:39 +0200
Subject: [Twisted-Python] FTP/VFS -- registerProducer error
In-Reply-To: <e68bced10707160255t55a610acra08eb3ba732ae97f@mail.gmail.com>
References: <e68bced10707160255t55a610acra08eb3ba732ae97f@mail.gmail.com>
Message-ID: <20070716122639.ean3kjw0pwsg080c@wasabox.wasabout.net>

Quoting Kyle Johnson <osmaker at gmail.com>:

> Modeling my code off the FTP server example
> (http://twistedmatrix.com/trac/attachment/ticket/1579/ftp_server_example.py),
> I coded my own FTPRealm class to use an inmem vfs instead of the local
> filesystem.
>
> I can browse and download data from it without issue, but anytime I
> attempt to upload a file, I get this error:
> File "twisted/protocols/ftp.py", line 421, in registerConsumer
>    self._cons.registerProducer(self, True)
> exceptions.AttributeError: _FileToConsumerAdapter instance has no
> attribute 'registerProducer'
>
>
> I'm setting up the avatar with the line:
> avatar =
> FileSystemToIFTPShellAdaptor(pathutils.FileSystem(inmem.FakeDirectory()))
>
> Full code is available here: http://rafb.net/p/FgTbiP80.html
>
>
>
> Any help would be greatly appreciated.

I may be wrong, but this looks like a bug, and I fill one here:

http://twistedmatrix.com/trac/ticket/2735

-- 
Thomas




From daedalus at eigenmagic.com  Mon Jul 16 17:36:31 2007
From: daedalus at eigenmagic.com (Justin Warren)
Date: Tue, 17 Jul 2007 07:36:31 +1000
Subject: [Twisted-Python] SSHv2 client script for Cisco routers
In-Reply-To: <9f68812f0707121206o245cce61l5098a8b5f6549fe9@mail.gmail.com>
References: <9f68812f0707121206o245cce61l5098a8b5f6549fe9@mail.gmail.com>
Message-ID: <1184621791.26559.6.camel@fnord.melbourne.eigenmagic.net>

On Thu, 2007-07-12 at 15:06 -0400, Chris Hallman wrote:
> 
> Does anyone have an example of a SSHv2 client script? I need to write
> a script that uses SSHv2 to execute multiple commands on hundreds of
> routers. I already have a script that does this with the Telnetlib. I
> need to transition to SSHv2. 

I had another thought about this: I implemented TLS for BEEPy, so you
could have a look at lib/beepy/transports/tls.py to see how I added TLS
support to the base class. I'm subclassing LineReceiver, so if you
ignore all the custom BEEP stuff, it might help.

You can get the code via http://beepy.sourceforge.net 

-- 
Justin Warren <daedalus at eigenmagic.com>



From aryeh at bigfoot.com  Tue Jul 17 04:41:07 2007
From: aryeh at bigfoot.com (Arye)
Date: Tue, 17 Jul 2007 10:41:07 +0200
Subject: [Twisted-Python] Twisted server / MS .NET client
Message-ID: <6f63a0ad0707170141o378e7594gd92ec6fda937b52b@mail.gmail.com>

Hello all,

This seems more a .NET issue since the server runs fine
and returns a correct SOAP envelope but I am still asking
my question...

We have a basic Twisted SOAP server with an "echo" method
that simply returns it's argument. (Typically a string).
A client written with SOAPpy communicates fine with this
server. However a C# client in .NET seems unable to
read the echoed string.

Any ideas someone might have would be greatly appreciated.
Arye.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070717/60c58716/attachment.htm 

From adelagon at gmail.com  Tue Jul 17 05:41:29 2007
From: adelagon at gmail.com (Alvin Delagon)
Date: Tue, 17 Jul 2007 17:41:29 +0800
Subject: [Twisted-Python] Twisted server / MS .NET client
In-Reply-To: <6f63a0ad0707170141o378e7594gd92ec6fda937b52b@mail.gmail.com>
References: <6f63a0ad0707170141o378e7594gd92ec6fda937b52b@mail.gmail.com>
Message-ID: <7a01f6c00707170241lb4496dmaba5b7b6b46c41be@mail.gmail.com>

I had a similar interoperability issue a long time ago. I was trying to
interface with a SOAP server written in .NET using SOAPpy. The xml is
properly received but it seems SOAPpy doesn't like the format causing my
python SOAP client to die. (Since I don't much time to fix it I opted to use
perl's SOAP::Lite which was quite messy but it worked).

I believe the problem is in your .NET XML parser. What you can do is write a
logic to dump the received XML and examine it.

On 7/17/07, Arye <aryeh at bigfoot.com> wrote:
>
> Hello all,
>
> This seems more a .NET issue since the server runs fine
> and returns a correct SOAP envelope but I am still asking
> my question...
>
> We have a basic Twisted SOAP server with an "echo" method
> that simply returns it's argument. (Typically a string).
> A client written with SOAPpy communicates fine with this
> server. However a C# client in .NET seems unable to
> read the echoed string.
>
> Any ideas someone might have would be greatly appreciated.
> Arye.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070717/699a3699/attachment.htm 

From Paul_S_Johnson at mnb.uscourts.gov  Tue Jul 17 12:10:31 2007
From: Paul_S_Johnson at mnb.uscourts.gov (Paul_S_Johnson at mnb.uscourts.gov)
Date: Tue, 17 Jul 2007 11:10:31 -0500
Subject: [Twisted-Python] Making a persistent SSH connection for a GUI
Message-ID: <OF2194EE6F.A8DDB154-ON8625731B.0057DB6A-8625731B.005934AD@uscmail.uscourts.gov>

I am not new to Python but am to Twisted. I am also no guru when it comes 
to complex OO in Python.

I have a PythonCard app that's a dashboard-like app and have it opening 
child windows that open SSH connections to various servers. I see plenty 
of conch examples of "open, get and close" but I would like to keep the 
connection to the server persistent so avoid the necessary connection 
overhead each time I want to fetch info from a server from the parent 
window.

Does anyone have an example of a persistent conch connection inside 
wxPython or similar GUI? I have scoured the web and come up empty handed 
though I found a few shreds that have part of the answer. I've tried to 
tweak the nonpersistent examples, but making my way through four layers of 
subclasses is a bit daunting.

Any help much appreciated.

Paul.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070717/4bf730fe/attachment.htm 

From paulswartz at gmail.com  Tue Jul 17 12:40:16 2007
From: paulswartz at gmail.com (Paul Swartz)
Date: Tue, 17 Jul 2007 12:40:16 -0400
Subject: [Twisted-Python] Making a persistent SSH connection for a GUI
In-Reply-To: <OF2194EE6F.A8DDB154-ON8625731B.0057DB6A-8625731B.005934AD@uscmail.uscourts.gov>
References: <OF2194EE6F.A8DDB154-ON8625731B.0057DB6A-8625731B.005934AD@uscmail.uscourts.gov>
Message-ID: <324cfb540707170940v6d379620o694ac2746cb34def@mail.gmail.com>

On 7/17/07, Paul_S_Johnson at mnb.uscourts.gov
<Paul_S_Johnson at mnb.uscourts.gov> wrote:
> Does anyone have an example of a persistent conch connection inside wxPython
> or similar GUI? I have scoured the web and come up empty handed though I
> found a few shreds that have part of the answer. I've tried to tweak the
> nonpersistent examples, but making my way through four layers of subclasses
> is a bit daunting.

Yeah, I'm working on that :)  The class that you'll want to hold onto
is SSHConnection, because that's the one that you'll open channels
through.  The others aren't important once you've used them to get an
SSHConnection.

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin



From andy at thecablelounge.com  Tue Jul 17 14:10:49 2007
From: andy at thecablelounge.com (Andy Gayton)
Date: Tue, 17 Jul 2007 11:10:49 -0700
Subject: [Twisted-Python] VFS Status
Message-ID: <469D0629.9010301@thecablelounge.com>

Hey guys,

VFS has languished in a state of neglect for the last 2 years.  What is 
currently in the repo is the output of 2 and a bit sprints - and some 
patches from canonical so it works for their immediate needs for launch pad.

In retrospect - we got a bit excited that first sprint in Hobart, and we 
probably shouldn't have pushed what we had into the main twisted repo 
until I could show the commitment to get it into a more solid form.

VFS trunk, currently defines a synchronous API.  The API isn't complete. 
   The filesystem backend uses its own utils, instead of the established 
twisted.python.filepath. Variable naming is all over the place, and the 
code quality is pretty poor - coming from a sprint were the focus was on 
how much could we get working before the weekend is out.

The branch to rectify these issues is: branches/makeVFSAsync-1223-2

Things done so far in the branch:

  * The API is better defined and is async.  There's still some debate 
over the API, particularly over meta-data.  But I think its a good step 
forward and if merged the interface could be upgraded from obscenely 
unstable to unstable.

  * The memory and filesystem backends have been ported to meet the new API.

  * The filesystem implementation uses twisted.python.filepath for most 
operations.

Things still left to do for the branch to be merged:

  * clean up the adapter tests: http://twistedmatrix.com/trac/ticket/1264
  * port the existing adapters to use the new async backends
  * clean up variable/module naming to be more consistent
  * remove all of the now unused code
  * ensure all patches since branching from canonical are incorporated

cheers,
Andy.







From aryeh at bigfoot.com  Tue Jul 17 15:30:41 2007
From: aryeh at bigfoot.com (Arye)
Date: Tue, 17 Jul 2007 21:30:41 +0200
Subject: [Twisted-Python] Twisted server / MS .NET client
Message-ID: <6f63a0ad0707171230j7ddeb582h3e47c9215da2eded@mail.gmail.com>

Hello and thanks for your input,

In fact it seems that this was a WSDL definition issue.
Newer .NET software prefers to use document/literal style
and it looks like Twisted uses the older rpc/encoded style
at least with soapPy. I will need to swich to ZSI for that.

All the best,
Arye.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070717/f957790b/attachment.htm 

From glyph at divmod.com  Tue Jul 17 15:41:45 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 17 Jul 2007 19:41:45 -0000
Subject: [Twisted-Python] VFS Status
In-Reply-To: <469D0629.9010301@thecablelounge.com>
References: <469D0629.9010301@thecablelounge.com>
Message-ID: <20070717194145.26384.2097379418.divmod.xquotient.862@joule.divmod.com>

On 06:10 pm, andy at thecablelounge.com wrote:
>The branch to rectify these issues is: branches/makeVFSAsync-1223-2

Hi Andy!  Thanks so much for writing up this update so that everyone 
knows what's going on.  Makes me ashamed that I have so many things I 
need to do this for, which I haven't :).
>Things done so far in the branch:

(...)
>Things still left to do for the branch to be merged:
>
>  * clean up the adapter tests: 
>http://twistedmatrix.com/trac/ticket/1264
>  * port the existing adapters to use the new async backends
>  * clean up variable/module naming to be more consistent
>  * remove all of the now unused code
>  * ensure all patches since branching from canonical are incorporated

I would strongly encourage interested members of the community to 
contribute patches against that branch which do these things and attach 
them to the various tickets mentioned here.  Obviously the people who 
are using and working on VFS the most have a severely limited amount of 
time to spend on it, so every little bit helps!



From bernat at luffy.cx  Thu Jul 19 03:15:27 2007
From: bernat at luffy.cx (Vincent Bernat)
Date: Thu, 19 Jul 2007 09:15:27 +0200
Subject: [Twisted-Python] twisted.plugin
Message-ID: <85002d1ae03dc0011994a14ae5a55931@imap.luffy.cx>


Hi !

I am trying to use twisted.plugin with no luck. Here is how I do:

I have a class IServicePlugin that inherits from Interface.
In some package x.y.z (with empty __init__.py), I have a module w
containing a
class c inheriting of object and implementing IPlugin and IServicePlugin.
To
load plugins, here is what I do:

import x.y.z as package
for plugin in getPlugins(IServicePlugin, package):
  print repr(plugin)

But I get nothing.

How can I debug this ? twisted.plugin is filled with black magic for me.
;-)

dropin.cache contains the string x.y.z.w but nothing about class c

Thanks.




From pablo at minimoesfuerzo.org  Thu Jul 19 03:28:37 2007
From: pablo at minimoesfuerzo.org (Pablo =?ISO-8859-1?Q?Mart=ED?=)
Date: Thu, 19 Jul 2007 09:28:37 +0200
Subject: [Twisted-Python] twisted.plugin
In-Reply-To: <85002d1ae03dc0011994a14ae5a55931@imap.luffy.cx>
References: <85002d1ae03dc0011994a14ae5a55931@imap.luffy.cx>
Message-ID: <1184830117.5999.2.camel@localhost>

On Thu, 2007-07-19 at 09:15 +0200, Vincent Bernat wrote:
> Hi !
> 
> I am trying to use twisted.plugin with no luck. Here is how I do:
> 
> I have a class IServicePlugin that inherits from Interface.
> In some package x.y.z (with empty __init__.py), I have a module w
> containing a
> class c inheriting of object and implementing IPlugin and IServicePlugin.
> To
> load plugins, here is what I do:
> 
> import x.y.z as package
> for plugin in getPlugins(IServicePlugin, package):
>   print repr(plugin)
> 
> But I get nothing.

Add an instance of your plugin at the end of your file, that should do.

Pablo




From bernat at luffy.cx  Thu Jul 19 03:54:54 2007
From: bernat at luffy.cx (Vincent Bernat)
Date: Thu, 19 Jul 2007 09:54:54 +0200
Subject: [Twisted-Python] twisted.plugin
In-Reply-To: <1184830117.5999.2.camel@localhost>
References: <1184830117.5999.2.camel@localhost>
Message-ID: <b186ed57e9affa7992a3c54fb3ccf9d0@imap.luffy.cx>


On Thu, 19 Jul 2007 09:28:37 +0200, Pablo Mart? <pablo at minimoesfuerzo.org>
wrote:

> Add an instance of your plugin at the end of your file, that should do.

Thanks, that works. I did not pay enough attention to this point in the
howto.




From warner at lothar.com  Thu Jul 19 15:54:34 2007
From: warner at lothar.com (Brian Warner)
Date: Thu, 19 Jul 2007 12:54:34 -0700
Subject: [Twisted-Python] schemas (in Zope and Foolscap)
In-Reply-To: <468B6888.9090802@pangalactic.us> (Stephen Waterbury's message of
	"Wed\, 04 Jul 2007 05\:29\:44 -0400")
References: <468B6888.9090802@pangalactic.us>
Message-ID: <87hco088zp.fsf@lothar.com>


[my apologies if this gets duplicated, I've been having SMTP problems]

Stephen Waterbury <waterbug at pangalactic.us> writes:

> I am in the process of converting some of my code to use zope.schema
> instead of a similar thing that I independently invented.  Since I am
> also planning on using Foolscap, and since Foolscap has a schema
> module, I compared zope.schema and foolscap.schema, and to me they
> seem to have much overlap in design intent.  In particular, in the
> zope.schema use cases ...

> So I was wondering -- would it make sense to use zope.schema
> in Foolscap?

Yeah, that sounds quite intriguing. The Foolscap schemas serve a number of
similar purposes:

#1: provide a clear place to document a program's remote interfaces. This
    role is aimed at humans, not programs.

#2: make it convenient to enforce those interfaces on the receiving end.. by
    relying upon the guards, the code that actually does stuff is easier to
    read and easier to analyze for other potential problems

#3: enforce those interfaces on the sending end, to bring the discovery of
    programming errors closer to their cause

#4: enforce those interfaces at the receiving *wire*, to mitigate
    resource-exhaustion attacks

#1 is satisfied by pretty much anything, as it's more a set of documentation
#conventions than anything else. The existing zope.interface.Interface class
#does this pretty well.

The rest require that the interfaces be machine-parseable. I enhanced z.i's
Interface (in foolscap.RemoteInterface) to allow the arguments and return
values to have meaning.. if zope.schema does something similar, I'd love to
take a look at it and see if it can capture the same expressiveness.

I'm undecided as to whether #4 is a good idea or not. It seemed like a good
idea when I first started, but I've had some smart people tell me it's not
the best place to attempt to solve DoS problems. Worse yet, the
implementation is so incomplete that I've personally had to disable schema
checking on things that would otherwise be useful (in particular I think a
"PolyConstraint" in which the two branches are both containers fails to match
the tokens on the wire correctly, even though such a thing would be quite
useful just at the post-serialization phase). So I'm tempted to drop #4 as a
design criterion and if z.s can represent enough to make that work, great, if
not, drop the feature.

> A nice practical factor is that zope.schema has been packaged as
> a separate namespace module, similarly to zope.interface.

I have to admit that I'm slightly hesitant to add a new dependency. But maybe
it isn't too big or too unwieldy. There doesn't seem to be a debian package
for it, though..

But I'll definitely check it out. Thanks for the suggestion!

 -Brian



From Paul_S_Johnson at mnb.uscourts.gov  Thu Jul 19 16:08:53 2007
From: Paul_S_Johnson at mnb.uscourts.gov (Paul_S_Johnson at mnb.uscourts.gov)
Date: Thu, 19 Jul 2007 15:08:53 -0500
Subject: [Twisted-Python] Making a persistent SSH connection for a GUI
In-Reply-To: <324cfb540707170940v6d379620o694ac2746cb34def@mail.gmail.com>
Message-ID: <OF69A6B8AC.A75BE7BF-ON8625731D.006E0B56-8625731D.006F07DF@uscmail.uscourts.gov>

twisted-python-bounces at twistedmatrix.com wrote on 07/17/2007 11:40:16 AM:
 
> Yeah, I'm working on that :)  The class that you'll want to hold onto
> is SSHConnection, because that's the one that you'll open channels
> through.  The others aren't important once you've used them to get an
> SSHConnection.

Is it a project you're actively working on? If so, any guess on a 
completion date? 

That piece of code is super important to what we're trying to accomplish, 
so I am trying to figure out my options.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070719/02bc2224/attachment.htm 

From waterbug at pangalactic.us  Thu Jul 19 20:36:36 2007
From: waterbug at pangalactic.us (Stephen Waterbury)
Date: Thu, 19 Jul 2007 20:36:36 -0400
Subject: [Twisted-Python] schemas (in Zope and Foolscap)
In-Reply-To: <87hco088zp.fsf@lothar.com>
References: <468B6888.9090802@pangalactic.us> <87hco088zp.fsf@lothar.com>
Message-ID: <46A00394.3030302@pangalactic.us>

Brian Warner wrote:
> [my apologies if this gets duplicated, I've been having SMTP problems]

It appears that this message was relayed twice, once today and once
yesterday, and both times I only received the cc to me, and not the
copy that was addressed to the twisted-python list.  So I'm quoting
the whole message below in case others haven't seen it.

> Stephen Waterbury <waterbug at pangalactic.us> writes:
> 
>> I am in the process of converting some of my code to use zope.schema
>> instead of a similar thing that I independently invented.  Since I am
>> also planning on using Foolscap, and since Foolscap has a schema
>> module, I compared zope.schema and foolscap.schema, and to me they
>> seem to have much overlap in design intent.  In particular, in the
>> zope.schema use cases ...
> 
>> So I was wondering -- would it make sense to use zope.schema
>> in Foolscap?
> 
> Yeah, that sounds quite intriguing. The Foolscap schemas serve a number of
> similar purposes:
> 
> #1: provide a clear place to document a program's remote interfaces. This
>     role is aimed at humans, not programs.
> 
> #2: make it convenient to enforce those interfaces on the receiving end.. by
>     relying upon the guards, the code that actually does stuff is easier to
>     read and easier to analyze for other potential problems
> 
> #3: enforce those interfaces on the sending end, to bring the discovery of
>     programming errors closer to their cause
> 
> #4: enforce those interfaces at the receiving *wire*, to mitigate
>     resource-exhaustion attacks
> 
> #1 is satisfied by pretty much anything, as it's more a set of documentation
> #conventions than anything else. The existing zope.interface.Interface class
> #does this pretty well.
> 
> The rest require that the interfaces be machine-parseable. I enhanced z.i's
> Interface (in foolscap.RemoteInterface) to allow the arguments and return
> values to have meaning.. if zope.schema does something similar, I'd love to
> take a look at it and see if it can capture the same expressiveness.

Yes, that appears to be one of the things zope.schema does.

> I'm undecided as to whether #4 is a good idea or not. It seemed like a good
> idea when I first started, but I've had some smart people tell me it's not
> the best place to attempt to solve DoS problems. Worse yet, the
> implementation is so incomplete that I've personally had to disable schema
> checking on things that would otherwise be useful (in particular I think a
> "PolyConstraint" in which the two branches are both containers fails to match
> the tokens on the wire correctly, even though such a thing would be quite
> useful just at the post-serialization phase). So I'm tempted to drop #4 as a
> design criterion and if z.s can represent enough to make that work, great, if
> not, drop the feature.
> 
>> A nice practical factor is that zope.schema has been packaged as
>> a separate namespace module, similarly to zope.interface.
> 
> I have to admit that I'm slightly hesitant to add a new dependency. But maybe
> it isn't too big or too unwieldy. There doesn't seem to be a debian package
> for it, though..

Right, and for both of those reasons (extra dependency and the debian
packaging lag) I would like to see zope.schema merged into
zope.interface, since zope.schema depends on zope.interface and I don't
think it would be a big burden on zope.interface to carry along
zope.schema even if zope.interface users don't all use it.  I'll do a
little lobbying for that on interface-dev (which has been extremely
quiet lately ... probably a good sign).

> But I'll definitely check it out. Thanks for the suggestion!
> 
>  -Brian
> 




From steven.zdwang at gmail.com  Fri Jul 20 00:50:19 2007
From: steven.zdwang at gmail.com (steven wang)
Date: Fri, 20 Jul 2007 12:50:19 +0800
Subject: [Twisted-Python] Re: How to receive a big stream data?
In-Reply-To: <m21wfe5ubz.fsf@valheru.db3l.homeip.net>
References: <5c6c8710706261902u347d25e0lc7375d23ef760dd5@mail.gmail.com>
	<28012bc60706270121k2bae8c8ey60f591e003cf8006@mail.gmail.com>
	<5c6c8710706270221u4f7571dbq511d9fe1ef746da8@mail.gmail.com>
	<5c6c8710707021840s522c5d10n657335582fd189@mail.gmail.com>
	<09CD42BF-7332-4234-B5BD-AB7B3C40DBD4@atlas.st>
	<5c6c8710707082331i31196904na42c81853b734057@mail.gmail.com>
	<m21wfe5ubz.fsf@valheru.db3l.homeip.net>
Message-ID: <5c6c8710707192150s4d5bd1b6v7f34d888afee06fe@mail.gmail.com>

Thank you very much! :)

On 7/12/07, David Bolen <db3l.net at gmail.com> wrote:
>
> "steven wang" <steven.zdwang at gmail.com> writes:
>
> > But I want to receive binary data in my protocol.
>
> Even if you start with a non-binary header, you can switch to
> receiving binary information at any time by going using the raw mode
> of most of the basic protocols.  And having some sort of ASCII header
> prior to the raw data is often a very simple way to handle things
> (something in common with a tremendous number of standard TCP-based
> protocols).
>
> Your original post had a fairly straight-forward ASCII header that I
> think would probably be fine.  What you're probably missing is the
> concept of switching to a raw binary receive mode which then switches
> your protocol from getting data in its lineReceived method to having
> rawDataReceived called.
>
> For example, here's a slightly stripped pair of protocols (server and
> client) that I'm currently using as part of a bigger project.  Most of
> the communication is over a PB connection which the client uses to
> perform operations on the server, one of which is editing job
> information.  But jobs contain attached files (often very large
> audio/video files), so committing changes to a job also involves
> transmitting up any newly added files.  So after the client updates
> the server's meta data, it initiates a separate set of file transfers
> across a different port.
>
> In my case, the header for a file transfer includes a session key
> (which the protocol uses to reference the original PB-based job
> session the client was using) along with a file key used for storage
> (which uniquely references a specific file in the job).  The final
> element is the total file size.  That is, upon connecting, the client
> transmits a line such as:
>
>     <session_uuid> <file_uuid> #######
>
> where the two uuids are specific to the transfer underway (and help
> with security since a random client isn't going to know the right
> ids), and ######## is the overall file length.  After sending that
> line (e.g., right after its final newline), the client just blasts up
> the raw data.
>
> The protocol is a simple LineReceiver based protocol, that receives
> that information information as an ASCII initial line, after which it
> switches to raw mode to receive the data.  Although the data length
> could technically be inferred from when the client disconnects, having
> it up front ensures I can detect a transfer that gets interrupted.
>
> So on the server side you have:
>
>           - - - - - - - - - - - - - - - - - - - - - - - - -
>
> class FileIOProtocol(LineReceiver):
>
>     def __init__(self):
>         self.info = None
>         self.outfile = None
>         self.remain = 0
>         self.crc = 0
>
>     def lineReceived(self, line):
>         logger.debug('FileIOProtocol:lineReceived:%s', line)
>         sess_key, file_key, self.size = line.split()
>         file_key = uuid.UUID(file_key)
>
>         try:
>             session_uuid = uuid.UUID(sess_key)
>         except:
>             logger.debug('FileIOProtocol:lineReceived Invalid session')
>             self.transport.loseConnection()
>             return
>
>         self.job_session = self.factory.sessions.get(session_uuid)
>         if not self.job_session:
>             logger.debug('FileIOProtocol:lineReceived Invalid session')
>             self.transport.loseConnection()
>             return
>
>         if not self.job_session.active:
>             logger.debug('FileIOProtocol:lineReceived Stale session')
>             self.transport.loseConnection()
>             return
>
>         # [db3l] The original code validates the individual file uuid here
>         # resulting in self.job_file as job file object from the session
>
>         if not self.job_file:
>             logger.debug('FileIOProtocol:lineReceived Invalid file key')
>             self.transport.loseConnection()
>             return
>
>         # Create the upload directory if not already present
>         if not os.path.isdir(self.job_session.upload_dir):
>             os.makedirs(self.job_session.upload_dir)
>
>         self.outfilename = os.path.join(self.job_session.upload_dir,
>                                         self.job_file['uuid'].hex)
>
>         logger.debug('FileIOProtocol:lineReceived Receiving into %s',
>                      self.outfilename)
>         try:
>             self.outfile = open(self.outfilename,'wb')
>         except Exception, value:
>             logger.debug('FileIOProtocol:lineReceived Unable to open file
> %s '
>                          '(%s)', self.outfilename, value)
>             self.transport.loseConnection()
>             return
>
>         self.remain = int(self.size)
>         logger.debug('FileIOProtocol:lineReceived Entering raw mode: %s
> %s',
>                      self.outfile, self.remain)
>         self.setRawMode()
>
>     def rawDataReceived(self, data):
>         self.remain -= len(data)
>         self.crc = crc32(data, self.crc)
>         self.outfile.write(data)
>
>     def connectionMade(self):
>         LineReceiver.connectionMade(self)
>         logger.debug('FileIOProtocol:connectionMade')
>
>     def connectionLost(self, reason):
>         LineReceiver.connectionLost(self, reason)
>         logger.debug('FileIOProtocol:connectionLost')
>         if self.outfile:
>             self.outfile.close()
>
>             if self.remain != 0:
>                 # Problem uploading - discard
>                 logger.debug('FileIOProtocol:connectionLost
> remain(%d)!=0',
>                              self.remain)
>
>                 os.remove(self.outfilename)
>             else:
>                 # Update job object with upload status
>                 self.job_file['uploaded'] = datetime.utcnow()
>                 self.job_file['size'] = self.size
>                 self.job_file['crc'] = self.crc
>
>
> class FileIOFactory(ServerFactory):
>     protocol = FileIOProtocol
>
>     def __init__(self, db, sessions, options):
>         self.db = db
>         self.options = options
>         self.sessions = sessions
>
>           - - - - - - - - - - - - - - - - - - - - - - - - -
>
> which is bound to an appropriate port on the server however you'd like.
> I use code like:
>
>     self.fileio = FileIOFactory(db, self.sessions, options)
>     reactor.listenTCP(self.options['file_port'], self.fileio)
>
>
> On the client side, I have an equivalent protocol that transmits up
> the file.  It's run beneath a GUI, so keeps a reference to the GUI
> controller object that might indicate it needs to cancel a transfer
> mid-stream, as well as updating the controller during the transfer so
> it can update a progress bar on screen.
>
> It is also a LineReceiver based protocol, and uses the Twisted
> FileSender object to do the raw data transfer (which is implemented as
> a straight producer with the TCP socket being the consumer).  The
> connectionMade method is where it transmits the ASCII header and then
> institutes the raw data transfer.
>
>           - - - - - - - - - - - - - - - - - - - - - - - - -
>
>
> class TransferCancelled(Exception):
>     """Exception for a user cancelling a transfer"""
>     pass
>
> class FileIOClient(LineReceiver):
>
>     def __init__(self, path, sess_key, file_key, controller):
>         self.path = path
>         self.sess_key = sess_key
>         self.file_key = file_key
>         self.controller = controller
>
>         self.infile = open(self.path, 'rb')
>         self.insize = os.stat(self.path).st_size
>
>         self.result = None
>         self.completed = False
>
>         self.controller.file_sent = 0
>         self.controller.file_size = self.insize
>
>     def _monitor(self, data):
>         self.controller.file_sent += len(data)
>         self.controller.total_sent += len(data)
>
>         # Check with controller to see if we've been cancelled and abort
>         # if so.
>         if self.controller.cancel:
>             print 'FileIOClient._monitor Cancelling'
>             # Need to unregister the producer with the transport or it
> will
>             # wait for it to finish before breaking the connection
>             self.transport.unregisterProducer()
>             self.transport.loseConnection()
>             # Indicate a user cancelled result
>             self.result = TransferCancelled('User cancelled transfer')
>
>         return data
>
>     def cbTransferCompleted(self, lastsent):
>         self.completed = True
>         self.transport.loseConnection()
>
>     def connectionMade(self):
>         self.transport.write('%s %s %s\r\n' % (str(self.sess_key),
>                                                str(self.file_key),
>                                                self.insize))
>         sender = FileSender()
>         sender.CHUNK_SIZE = 2 ** 16
>         d = sender.beginFileTransfer(self.infile, self.transport,
>                                      self._monitor)
>         d.addCallback(self.cbTransferCompleted)
>
>     def connectionLost(self, reason):
>         LineReceiver.connectionLost(self, reason)
>         print 'FileIOClient:connectionLost'
>         self.infile.close()
>         if self.completed:
>             self.controller.completed.callback(self.result)
>         else:
>             self.controller.completed.errback(reason)
>
> class FileIOClientFactory(ClientFactory):
>
>     protocol = FileIOClient
>
>     def __init__(self, path, sess_key, file_key, controller):
>         self.path = path
>         self.sess_key = sess_key
>         self.file_key = file_key
>         self.controller = controller
>
>     def clientConnectionFailed(self, connector, reason):
>         ClientFactory.clientConnectionFailed(self, connector, reason)
>         self.controller.completed.errback(reason)
>
>     def buildProtocol(self, addr):
>         print 'buildProtocol'
>         p = self.protocol(self.path, self.sess_key, self.file_key,
>                           self.controller)
>         p.factory = self
>         return p
>
>           - - - - - - - - - - - - - - - - - - - - - - - - -
>
>
> Within the presentation layer controller on the client, initiating a
> transfer is done with:
>
>     def _transmitOne(self, address, port, path, sess_key, file_key):
>         self.completed = defer.Deferred()
>         f = FileIOClientFactory(path, sess_key, file_key, self)
>         reactor.connectTCP(address, port, f)
>         return self.completed
>
> and the result is that self.completed fires (callback or errback) when
> the transfer is done (which the controller uses to then initiate the
> next transfer when there are a list of files to go up for a job).
>
> While probably not exactly what you're trying to do, perhaps it'll
> point you in the right direction.
>
> -- David
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070720/37570bc1/attachment.htm 

From brendoncolby at gmail.com  Fri Jul 20 11:40:45 2007
From: brendoncolby at gmail.com (Brendon Colby)
Date: Fri, 20 Jul 2007 10:40:45 -0500
Subject: [Twisted-Python] Testing with trial, adbapi questions
In-Reply-To: <cd8fa6f90706260727l667f3e72we349e32ac40260cf@mail.gmail.com>
References: <e64b001e0706250817s223f9833med051053bfa355c5@mail.gmail.com>
	<cd8fa6f90706250928n77613dfaq1b6fdbb59d23347c@mail.gmail.com>
	<e64b001e0706251257p22843735y680c8c64b120e1c5@mail.gmail.com>
	<cd8fa6f90706260727l667f3e72we349e32ac40260cf@mail.gmail.com>
Message-ID: <e64b001e0707200840u3e64750w47123c5739ab40cf@mail.gmail.com>

On 6/26/07, Christian Simms <christian.simms at gmail.com> wrote:
>
> Looks like I mis-assumed your problem, sorry.  In the setUp method in your
> tests, you should return a Deferred which fires when all your data is
> loaded.  This can be a pain if you already organized your code into classes
> inheriting from twisted.application.service.Service which have
> startService/stopService calls. It's a pain because trial doesn't create an
> application object like running inside twistd does.  So, in the case of
> writing unit tests for applications, you can abstract out your
> initialization code into a method, and then call that method directly in
> your setUp method.


I've spent some time working on this, and I see the logic in doing so
(firing a deferred when my data is loaded) but I'm stuck at the point of how
to do this. In my factory, I call this method in __init__ to load data:

  def loadDevelopers(self):
    def cb(results):
      for result in results:
        self.addDeveloper(Developer(result['auth_host'],result['auth_url'],
          result['devid'],self,result['key'],result['post_host'],
          result['post_url']))
    return self.dbPool.runQuery("select * from developers where active=1").\
      addCallback(cb).addErrback(printError)

I created a tac file and am using twistd to run this and it works great. But
in my unit tests, what happens is my tests run before my data is loaded (and
fail). I haven't been able to figure out how to tell my tests to run after
this data is loaded. Here's my setUp method:

    def setUp(self):
        self.file = StringIOWithoutClosing()
        self.transport = FileWrapperThatWorks(self.file)
        self.protocol = sserver.SServerProtocol()
        self.protocol.factory = sserver.SServerFactory(self.protocol)
        self.protocol.factory.dbPool.start()
        self.protocol.makeConnection(self.transport)

    def testSendDeveloperID(self):
        print self.protocol.factory.developers # This dictionary prints as
empty - it shouldn't!

I guess I'm not making the connection here. How do I code the deferred in
setUp to fire when my data is loaded? Also, if I abstract out this logic to
an initialization method, how would I have it fire properly when I run under
twistd? Here's my tac file:

factory = SServerFactory(protocol=SServerProtocol)
application = service.Application("SServer")
sserverService = internet.TCPServer(4000,factory)
sserverService.setServiceParent(application)

I appreciate the help!

Brendon
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070720/9fe68afc/attachment.htm 

From daniel at keystonewood.com  Fri Jul 20 11:52:51 2007
From: daniel at keystonewood.com (Daniel Miller)
Date: Fri, 20 Jul 2007 11:52:51 -0400
Subject: [Twisted-Python] Handling PBConnectionLost errors
Message-ID: <99A576C3-FE5E-4AE3-A48F-1720C9ECA16B@keystonewood.com>

Hello,

Twisted PB sometimes loses its connection to the server. In this  
case, a PBConnectionLost exception is raised on the client. It would  
be nice to implement a fail-safe(er) way of calling remote methods  
that would retry when necessary until the remote method has been  
called successfully and the result has been returned. Note that this  
is only necessary when the remote method call should be invoked  
exactly once on the server (i.e. for POST-like calls that change  
server state). In the case of GET-like requests, a simpler retry  
mechanism will do.

The motivation for this is based on my experience of using Twisted in  
an application I am developing. The network communications are all  
happening on a LAN. The good end of the network is connected directly  
to a 100Mbps switch at the server. Failures occur more frequently at  
the other end (my end) of the network, which is connected through a  
10/100 hub that is connected to the main switch. I rigged up a quick  
test with a 1000-request sample size; failures ranged from 28/1000 on  
the good end of the network to 83/1000 on the bad end of the network.  
One request consists of a single remote method call through PB. A  
success was when I got the expected result, a failure was when I got  
a PBConnectionLost error.

The following is pseudo code that I came up with to mitigate the  
problem.

Simple request (GET - repeatedly call method until success or  
RETRY_LIMIT is reached)
    Client flow:
       for x in range(RETRY_LIMIT)
          invoke remote method without unique call identifier
          if result is not PBConnectionLost
             break
       if result is PBConnectionLost
          raise server not responding error
    Server flow:
       (nothing special, just plain PB)

Complex request (POST - server-side method is invoked exactly once)
    Client flow:
       use simple retry method to get a unique call identifier from  
server
          a timeout value is also sent along to tell the server how  
long to hold the results of this request
       for x in range(RETRY_LIMIT)
          invoke remote method with identifier
          if return value is not PBConnectionLost
             break
       if result is PBConnectionLost
          raise server not responding error
       using simple retry method tell server to discard unique call  
identifier
    Server flow:
       receive request for unique call identifier
          create and store identifier with UNCALLED token
          schedule identifier to be discarded with timeout value  
supplied by client
          return identifier to client
       receive remote method invocation with unique call identifier
          branch on value stored with unique call identifier
          if UNCALLED
             update identifier with CALLED token
             invoke method
             while result is deferred
                get defer result
             store COMPLETED token and unique with unique call  
identifier
             if there is another invocation WAITING
                this means the connection was lost
                signal the WAITING request with the result
             else
                return result to client
          if CALLED
             store WAITING token with unique identifier (must not  
overwrite other call tokens)
             defer until COMPLETED
          if COMPLETED
             return result to client
          if unique call identifier does not exist
             raise error
       receive request to discard unique call identifier
          if identifier exists
             discard identifier, tokens, and result
          return True

I realize that implementing this would not eliminate network errors.  
It would simply reduce the likelyhood of failed method calls due to  
dropped connections. If I have my math correct (I always struggle a  
bit with statistics), even a RETRY_LIMIT of 2 would reduce the  
probability of a lost connection to 0.6% at the worst (<0.1% on the  
good end of the network).

I have two questions:

1. Does something like this already exist?
2. Is this a totally stupid idea? (would it be better to improve our  
physical network than to try to band-aid the problem with something  
like this?)

~ Daniel




From exarkun at twistedmatrix.com  Sun Jul 22 00:05:03 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 22 Jul 2007 04:05:03 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1185077103.63.873067156@twistedmatrix.com

Bug summary
______________________
Summary for 2007-07-15 through 2007-07-22
Bugs opened: 12    Bugs closed: 2  Total open bugs: 995 (+10)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +2  |Highest:  +7          |Conch:     +1          
|Enhancement:  +1  |Normal:   +3          |Core:      +5          
|Task:         +7                         |Foolscap:  -1          
                                          |Mail:      +1          
                                          |Trial:     +1          
                                          |Vfs:       +1          
                                          |Web2:      +1          
                                          |Words:     +1          


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2737] Two new features for twisted-dev (opened by washort)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2737

[#2739] explain, document, and test trial's compatibility requirements for other test tools (opened by glyph)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2739

[#2741] twisted/words/test/test_domish.py should use setUp and tearDown instead of setUpClass and tearDownClass (opened by exarkun)
    task            words      http://twistedmatrix.com/trac/ticket/2741

[#2742] twisted/test/test_policies.py should use setUp and tearDown instead of setUpClass and tearDownClass (opened by exarkun)
    task            core       http://twistedmatrix.com/trac/ticket/2742

[#2743] twisted/test/test_ssl.py shouldn't use setUpClass and tearDownClass (opened by exarkun)
    task            core       http://twistedmatrix.com/trac/ticket/2743

[#2744] twisted/test/test_pb.py should use setUp instead of setUpClass and not have any tear down (opened by exarkun)
    task            core       http://twistedmatrix.com/trac/ticket/2744

[#2745] twisted/test/test_newcred.py should use setUp and tearDown instead of setUpClass and tearDownClass (opened by exarkun)
    task            core       http://twistedmatrix.com/trac/ticket/2745

[#2746] twisted/mail/test/test_mail.py should use setUp and tearDown instead of setUpClass and tearDownClass (opened by exarkun)
    task            mail       http://twistedmatrix.com/trac/ticket/2746

                    ===== Normal =====
[#2735] twisted.vfs.adapters.ftp._FileToConsumerAdapter doesn't fully implement IConsumer (opened by therve)
    defect          vfs        http://twistedmatrix.com/trac/ticket/2735

[#2736] StreamProducer defer patch (opened by KyleJ)
    defect          web2       http://twistedmatrix.com/trac/ticket/2736

[#2738] t.i.a.IPv4Address.host containing host name instead of ip address (opened by toidinamai)
    defect          core       http://twistedmatrix.com/trac/ticket/2738

[#2740] twisted/conch/test/test_cftp.py should use setUp instead of setUpClass and should not have a tearDown or tearDownClass (opened by exarkun)
    task            conch      http://twistedmatrix.com/trac/ticket/2740



Closed Bugs
______________________
                    ===== Highest =====
[#2387] Deprecate twisted.enterprise.row (opened by itamarst, closed by therve, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2387

                    ===== Normal =====
[#2731] foolscap: trivial fix (remove path separator) for test failing on windows (opened by strank, closed by warner, fixed)
    defect          foolscap   http://twistedmatrix.com/trac/ticket/2731



Ticket Lifetime Stats
----------------------
Oldest open ticket - [#38] Should be a way to create documentation aliases (since 2003-07-12 16:08:03).
Newest open ticket - [#2746] twisted/mail/test/test_mail.py should use setUp and tearDown instead of setUpClass and tearDownClass (since 2007-07-20 10:43:11).

Mean open ticket age: 489 days, 12:26:57.685024.
Median: 375 days, 14:20:22.503115.
Standard deviation: 392 days, 8:34:42.415196.
Interquartile range: 472 days, 4:16:50.

Mean time between ticket creation and ticket resolution: 119 days, 20:16:45.773628.
Median: 14 days, 10:59:04.
Standard deviation is 223 days, 8:29:32.610222.
The interquartile range is 125 days, 7:42:53.

Mean time spent in review: 58 days, 19:39:04.240986.
Median: 3 days, 20:59:56.
Standard deviation: 127 days, 9:56:33.556086.
Interquartile range: 25 days, 4:28:51.

Mean number of times a ticket is reviewed: 1.8.
Median: 1
Standard deviation: 1.37784670354.
Interquartile range: 1.




From swp5jhu02 at sneakemail.com  Mon Jul 23 02:48:47 2007
From: swp5jhu02 at sneakemail.com (=?ISO-8859-1?Q?Peter_Valdemar_M=F8rch?=)
Date: Mon, 23 Jul 2007 08:48:47 +0200
Subject: [Twisted-Python] How to achieve a reliable "connection" over UDP?
Message-ID: <46A44F4F.1030405@sneakemail.com>

Hi,

I'm looking to implement an application that needs reliable connections,
like one gets with TCP, but only using UDP "on the wire".

The application can only use UDP, as I'd like to rely on UDP hole
punching (p2p). (P2P over TCP is notoriously difficult).

I want to be certain that my packets get delivered, that they are in
order, to transfer data larter than 64K, etc - just like in TCP.

Of course, I could implement the TCP protocol myself for use over UDP,
just as the IP protocol stack does for TCP over IP. Or use TCP over PPP
over UDP. But is there "a better way"?

I'm thinking basically all p2p applications will need this sort of
"reliability" over UDP for e.g. file transfer, so I'm hoping there is
something already written.

How would one go about this?

Peter
-- 
Peter Valdemar M?rch
http://www.morch.com



From p.mayers at imperial.ac.uk  Mon Jul 23 05:23:41 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 23 Jul 2007 10:23:41 +0100
Subject: [Twisted-Python] How to achieve a reliable "connection" over UDP?
In-Reply-To: <46A44F4F.1030405@sneakemail.com>
References: <46A44F4F.1030405@sneakemail.com>
Message-ID: <1185182621.3331.14.camel@localhost.localdomain>


> I'm thinking basically all p2p applications will need this sort of
> "reliability" over UDP for e.g. file transfer, so I'm hoping there is
> something already written.
> 

http://divmod.org/trac/wiki/DivmodVertex

Haven't used it, so can't comment further onit.




From christian.simms at gmail.com  Mon Jul 23 11:00:54 2007
From: christian.simms at gmail.com (Christian Simms)
Date: Mon, 23 Jul 2007 11:00:54 -0400
Subject: [Twisted-Python] Testing with trial, adbapi questions
In-Reply-To: <e64b001e0707200840u3e64750w47123c5739ab40cf@mail.gmail.com>
References: <e64b001e0706250817s223f9833med051053bfa355c5@mail.gmail.com>
	<cd8fa6f90706250928n77613dfaq1b6fdbb59d23347c@mail.gmail.com>
	<e64b001e0706251257p22843735y680c8c64b120e1c5@mail.gmail.com>
	<cd8fa6f90706260727l667f3e72we349e32ac40260cf@mail.gmail.com>
	<e64b001e0707200840u3e64750w47123c5739ab40cf@mail.gmail.com>
Message-ID: <cd8fa6f90707230800h48322f9bn4df086056ef93688@mail.gmail.com>

On 7/20/07, Brendon Colby <brendoncolby at gmail.com> wrote:
>
> On 6/26/07, Christian Simms <christian.simms at gmail.com> wrote:
> >
> > Looks like I mis-assumed your problem, sorry.  In the setUp method in
> > your tests, you should return a Deferred which fires when all your data is
> > loaded.  This can be a pain if you already organized your code into classes
> > inheriting from twisted.application.service.Service which have
> > startService/stopService calls. It's a pain because trial doesn't create an
> > application object like running inside twistd does.  So, in the case of
> > writing unit tests for applications, you can abstract out your
> > initialization code into a method, and then call that method directly in
> > your setUp method.
>
>
> I've spent some time working on this, and I see the logic in doing so
> (firing a deferred when my data is loaded) but I'm stuck at the point of how
> to do this. In my factory, I call this method in __init__ to load data:
>
>   def loadDevelopers(self):
>     def cb(results):
>       for result in results:
>         self.addDeveloper
> (Developer(result['auth_host'],result['auth_url'],
>           result['devid'],self,result['key'],result['post_host'],
>           result['post_url']))
>     return self.dbPool.runQuery("select * from developers where
> active=1").\
>       addCallback(cb).addErrback(printError)
>
> I created a tac file and am using twistd to run this and it works great.
> But in my unit tests, what happens is my tests run before my data is loaded
> (and fail). I haven't been able to figure out how to tell my tests to run
> after this data is loaded. Here's my setUp method:
>
>     def setUp(self):
>         self.file = StringIOWithoutClosing()
>         self.transport = FileWrapperThatWorks(self.file)
>         self.protocol = sserver.SServerProtocol()
>         self.protocol.factory = sserver.SServerFactory(self.protocol)
>         self.protocol.factory.dbPool.start()
>         self.protocol.makeConnection(self.transport)
>
>     def testSendDeveloperID(self):
>         print self.protocol.factory.developers # This dictionary prints as
> empty - it shouldn't!
>
> I guess I'm not making the connection here. How do I code the deferred in
> setUp to fire when my data is loaded? Also, if I abstract out this logic to
> an initialization method, how would I have it fire properly when I run under
> twistd? Here's my tac file:
>
> factory = SServerFactory(protocol=SServerProtocol)
> application = service.Application("SServer")
> sserverService = internet.TCPServer(4000,factory)
> sserverService.setServiceParent(application)
>
> I appreciate the help!
>
> Brendon
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
To fix your unit tests to "wait" until your data is loaded by your
loadDevelopers method, you need to have your setUp method return the
Deferred created by loadDevelopers's. There are a bunch of ways to do this,
the simplest is probably to have your factory's __init__ method store the
Deferred created by loadDevelopers into a member variable (say self.deferred),
and then add a new line to the end of your setUp method above:

           return self.deferred

This way, each unit test will not start until the Deferred from
loadDevelopers fires.

Cheers,
Christian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070723/b919016d/attachment.htm 

From glyph at divmod.com  Mon Jul 23 14:57:57 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 23 Jul 2007 18:57:57 -0000
Subject: [Twisted-Python] How to achieve a reliable "connection" over UDP?
In-Reply-To: <1185182621.3331.14.camel@localhost.localdomain>
References: <46A44F4F.1030405@sneakemail.com>
	<1185182621.3331.14.camel@localhost.localdomain>
Message-ID: <20070723185757.26384.759829748.divmod.xquotient.1317@joule.divmod.com>

On 09:23 am, p.mayers at imperial.ac.uk wrote:
>
>>I'm thinking basically all p2p applications will need this sort of
>>"reliability" over UDP for e.g. file transfer, so I'm hoping there is
>>something already written.
>
>http://divmod.org/trac/wiki/DivmodVertex
>
>Haven't used it, so can't comment further onit.

As it happens, I have, a little, so I can :).

To make a long story short, if you need the features that TCP provides, 
but you want the simplicity (and widespread de-jure "standard" 
implementation in routers) of hole-punching via UDP rather than complex 
dual-connection TCP startup, the easiest thing you can do is just go 
ahead and implement TCP on top of UDP.

We did this for vertex, in the "ptcp" module (pseudo-TCP) which is a 
very literal-minded implementation of the TCP specification on top of 
UDP.

It's a fully-functional proof of concept at this point, but it needs a 
lot of maintenance.  The performance is terrible because we didn't 
implement window sizing yet (the window has a static size), there are a 
few edge-cases on connection tear-down, and the tests aren't quite 
granular enough (for example, rather than testing specific latency 
cases, they just probabilistically test packet loss).  It also used a 
predecessor to the now-standard-in-twisted "AMP" protocol for 
handshaking, and should be upgraded to use the new one.  Plus, my own 
personal bugaboo: it doesn't integrate with cred properly.

However, if you need connection-oriented peer-to-peer traffic, 
contributing to Vertex is going to get you where you need to be faster 
than any ad-hoc solution.  We *have* already implemented the full TCP 
state machine and connection-management logic in Python.  I've 
personally tested that it can transfer an entire 700MB ISO image across 
the real, public internet correctly, even in its current state.

You will find willing assistance from me and probably some other Divmod 
folks & fans, because this is a project that many of us would like to 
see through to completion; we just don't have a lot of spare cycles (or 
business motivation) at the moment.

Depending on what you need, you might want to focus your maintenance 
efforts on improving PTCP's tests and documentation so as to make it an 
independently usable unit from Vertex's connection setup.  Obviously 
we'd like it if you could help us to get the whole thing to work, but I 
have to assume that by the time you're asking this question, you've 
already done some work on an application protocol to set up the 
connection.



From brendoncolby at gmail.com  Mon Jul 23 17:06:59 2007
From: brendoncolby at gmail.com (Brendon Colby)
Date: Mon, 23 Jul 2007 16:06:59 -0500
Subject: [Twisted-Python] Testing with trial, adbapi questions
In-Reply-To: <cd8fa6f90707230800h48322f9bn4df086056ef93688@mail.gmail.com>
References: <e64b001e0706250817s223f9833med051053bfa355c5@mail.gmail.com>
	<cd8fa6f90706250928n77613dfaq1b6fdbb59d23347c@mail.gmail.com>
	<e64b001e0706251257p22843735y680c8c64b120e1c5@mail.gmail.com>
	<cd8fa6f90706260727l667f3e72we349e32ac40260cf@mail.gmail.com>
	<e64b001e0707200840u3e64750w47123c5739ab40cf@mail.gmail.com>
	<cd8fa6f90707230800h48322f9bn4df086056ef93688@mail.gmail.com>
Message-ID: <e64b001e0707231406r4ff4ac72sdd79c7f94708e08e@mail.gmail.com>

On 7/23/07, Christian Simms <christian.simms at gmail.com> wrote:
>
> To fix your unit tests to "wait" until your data is loaded by your
> loadDevelopers method, you need to have your setUp method return the
> Deferred created by loadDevelopers's. There are a bunch of ways to do this,
> the simplest is probably to have your factory's __init__ method store the
> Deferred created by loadDevelopers into a member variable (say
> self.deferred), and then add a new line to the end of your setUp method
> above:
>
>            return self.deferred
>
> This way, each unit test will not start until the Deferred from
> loadDevelopers fires.


That worked! I was so close to this over the weekend too. I'm starting to
feel as though I need an MIT degree to understand this stuff. :)

Brendon
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070723/dca9a5e1/attachment.htm 

From glyph at divmod.com  Mon Jul 23 20:08:35 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 24 Jul 2007 00:08:35 -0000
Subject: [Twisted-Python] Testing with trial, adbapi questions
In-Reply-To: <e64b001e0707231406r4ff4ac72sdd79c7f94708e08e@mail.gmail.com>
References: <e64b001e0706250817s223f9833med051053bfa355c5@mail.gmail.com>
	<cd8fa6f90706250928n77613dfaq1b6fdbb59d23347c@mail.gmail.com>
	<e64b001e0706251257p22843735y680c8c64b120e1c5@mail.gmail.com>
	<cd8fa6f90706260727l667f3e72we349e32ac40260cf@mail.gmail.com>
	<e64b001e0707200840u3e64750w47123c5739ab40cf@mail.gmail.com>
	<cd8fa6f90707230800h48322f9bn4df086056ef93688@mail.gmail.com>
	<e64b001e0707231406r4ff4ac72sdd79c7f94708e08e@mail.gmail.com>
Message-ID: <20070724000835.26384.65377609.divmod.xquotient.1648@joule.divmod.com>


On 09:06 pm, brendoncolby at gmail.com wrote:
>That worked! I was so close to this over the weekend too. I'm starting 
>to
>feel as though I need an MIT degree to understand this stuff. :)

Just as a data point for you: almost everyone who has worked extensively 
on the Twisted core is a college dropout.  (Although some of us 
apparently feel obscurely guilty about that and attend night school at 
Harvard.  Not me though!  Auto-pedagogy for the win!)

Both my fianc?e and my father are programmers with course 6 degrees from 
MIT, though.  It's doubtful that this helps, since Ying responded to me 
telling her about this message by saying she can't remember how Twisted 
works "for more than a day at a time", and to my knowledge, Dad only did 
one thing with it, and that at a sprint which I did not attend - so I 
haven't seen the code :).



From daedalus at eigenmagic.com  Tue Jul 24 01:00:39 2007
From: daedalus at eigenmagic.com (Justin Warren)
Date: Tue, 24 Jul 2007 15:00:39 +1000
Subject: [Twisted-Python] ModiPY: Change execution with twisted [Was: SSHv2
	client script for Cisco routers]
In-Reply-To: <1184576512.2419.39.camel@localhost>
References: <9f68812f0707121206o245cce61l5098a8b5f6549fe9@mail.gmail.com>
	<18e3f33d0707121300l49850ddft83b7d78676527091@mail.gmail.com>
	<1184576512.2419.39.camel@localhost>
Message-ID: <1185253239.6803.29.camel@localhost>

Hi folks,

Following up on my post last week about something to execute commands on
a bunch of cisco routers, and the verbose post on what I've been working
on.

I present: ModiPY. A change management framework, using twisted. I've
only put up a trac site so far, at http://modipy.seafelt.com/ licensed
as LGPL for now.

Super-alpha code, use with caution. May set your datacenter on fire.

-- 
Justin Warren <daedalus at eigenmagic.com>



From jim.mccoy at gmail.com  Tue Jul 24 01:03:25 2007
From: jim.mccoy at gmail.com (Jim McCoy)
Date: Mon, 23 Jul 2007 22:03:25 -0700
Subject: [Twisted-Python] How to achieve a reliable "connection" over UDP?
In-Reply-To: <1185182621.3331.14.camel@localhost.localdomain>
References: <46A44F4F.1030405@sneakemail.com>
	<1185182621.3331.14.camel@localhost.localdomain>
Message-ID: <f01e36880707232203j7c6ab43dsd2b3b400819c6e1e@mail.gmail.com>

This has already been written, just not in Python.  Take a look at
enet, RakNet, or UDT.  The various variables that will be in play here
are your need for congestion control, whether or not you can live with
out-of-order message delivery, and if you have any need for security
on the channel.

jim



From swp5jhu02 at sneakemail.com  Tue Jul 24 08:27:26 2007
From: swp5jhu02 at sneakemail.com (=?UTF-8?B?UGV0ZXIgVmFsZGVtYXIgTcO4cmNo?=)
Date: Tue, 24 Jul 2007 14:27:26 +0200
Subject: [Twisted-Python] How to achieve a reliable "connection" over UDP?
In-Reply-To: <20070723185757.26384.759829748.divmod.xquotient.1317@joule.divmod.com>
References: <46A44F4F.1030405@sneakemail.com>	<1185182621.3331.14.camel@localhost.localdomain>
	<20070723185757.26384.759829748.divmod.xquotient.1317@joule.divmod.com>
Message-ID: <46A5F02E.5000608@sneakemail.com>

Thank you for all your comments!

I think I'll be looking at Vertex because I also need the actual UDP 
hole-punching - the whole Vertex solution.

My dream or idea is to have p2p file sharing with webdav and real 
mounted file systems on *NIX and Windows.

So I can "export" e.g. my /home/peter/projects writable to my other 
machines as "projects", and /home/peter/public_ro as "public" read-only 
to Fred, Sally and Alice.

I import Paul's "jokes" share as /mnt/p2pdav/paulsJokes, and Sandy's 
"pics" share as /mnt/p2pdav/sandy/pics. And then access these files as 
network drives.

Possibly later have /home/peter/projects be automatically synchronized 
between all my machines.

Thats the basic idea anyway.

glyph-at-divmod.com |Lists| wrote:
> You will find willing assistance from me and probably some other Divmod 
> folks & fans, because this is a project that many of us would like to 
> see through to completion; we just don't have a lot of spare cycles (or 
> business motivation) at the moment.
 >
> Depending on what you need, you might want to focus your maintenance 
> efforts on improving PTCP's tests and documentation so as to make it an 
> independently usable unit from Vertex's connection setup.  Obviously 
> we'd like it if you could help us to get the whole thing to work, but I 
> have to assume that by the time you're asking this question, you've 
> already done some work on an application protocol to set up the connection.
> 

Well, this looks like the right fit for me. I realize this project is 
not small, but it is an itch I've had for a long time, and it needs 
scratching!!! But it is a personal-free-time project, so we'll see how 
fast it goes... :-)

Sincerely,

Peter

-- 
Peter Valdemar M?rch
http://www.morch.com



From glyph at divmod.com  Tue Jul 24 14:43:39 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 24 Jul 2007 18:43:39 -0000
Subject: [Twisted-Python] How to achieve a reliable "connection" over UDP?
In-Reply-To: <46A5F02E.5000608@sneakemail.com>
References: <46A44F4F.1030405@sneakemail.com>
	<1185182621.3331.14.camel@localhost.localdomain>
	<20070723185757.26384.759829748.divmod.xquotient.1317@joule.divmod.com>
	<46A5F02E.5000608@sneakemail.com>
Message-ID: <20070724184339.26384.346310489.divmod.xquotient.1990@joule.divmod.com>

On 12:27 pm, swp5jhu02 at sneakemail.com wrote:
>Thank you for all your comments!
>
>I think I'll be looking at Vertex because I also need the actual UDP 
>hole- punching - the whole Vertex solution.

Yaaay!
>My dream or idea is to have p2p file sharing with webdav and real 
>mounted file systems on *NIX and Windows.

Oh man.  This is *exactly* what I wanted to do with Vertex.  Of course, 
you need a good Twisted-integrated version of FUSE first, but that 
shouldn't be too hard ;).
>Possibly later have /home/peter/projects be automatically synchronized 
>between all my machines.

That seems like more of a job for a version control system. 
Synchronization is a tricky, tricky problem.

It might be more appropriate to continue this discussion on the divmod- 
dev mailing list.  I'll be looking forward to it!



From iny+news at iki.fi  Wed Jul 25 01:33:48 2007
From: iny+news at iki.fi (Ilpo =?iso-8859-1?Q?Nyyss=F6nen?=)
Date: Wed, 25 Jul 2007 08:33:48 +0300
Subject: [Twisted-Python] FUSE (Was: Re: How to achieve a reliable
	"connection" over UDP?)
References: <46A44F4F.1030405@sneakemail.com>
	<1185182621.3331.14.camel@localhost.localdomain>
	<20070723185757.26384.759829748.divmod.xquotient.1317@joule.divmod.com>
	<46A5F02E.5000608@sneakemail.com>
	<20070724184339.26384.346310489.divmod.xquotient.1990@joule.divmod.com>
Message-ID: <m3ejixdp37.fsf_-_@iny.iki.fi>

glyph at divmod.com writes:

> Oh man.  This is *exactly* what I wanted to do with Vertex.  Of
> course, you need a good Twisted-integrated version of FUSE first, but
> that shouldn't be too hard ;).

Is there a better way to integrate FUSE and Twisted than use one
thread for FUSE and one for Twisted reactor without signal handlers? 
(Using the FUSE Python bindings of course.)

I have one filesystem for personal use done this way and it does seem
to work. (A simple filesystem for browsing zip contents,)

-- 
Ilpo Nyyss?nen # biny # /* :-) */




From glyph at divmod.com  Wed Jul 25 04:58:51 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 25 Jul 2007 08:58:51 -0000
Subject: [Twisted-Python] FUSE (Was: Re: How to achieve a reliable
	"connection" over UDP?)
In-Reply-To: <m3ejixdp37.fsf_-_@iny.iki.fi>
References: <46A44F4F.1030405@sneakemail.com>
	<1185182621.3331.14.camel@localhost.localdomain>
	<20070723185757.26384.759829748.divmod.xquotient.1317@joule.divmod.com>
	<46A5F02E.5000608@sneakemail.com>
	<20070724184339.26384.346310489.divmod.xquotient.1990@joule.divmod.com>
	<m3ejixdp37.fsf_-_@iny.iki.fi>
Message-ID: <20070725085851.26384.436661937.divmod.xquotient.2002@joule.divmod.com>

On 05:33 am, iny+news at iki.fi wrote:
>glyph at divmod.com writes:
>>Oh man.  This is *exactly* what I wanted to do with Vertex.  Of
>>course, you need a good Twisted-integrated version of FUSE first, but
>>that shouldn't be too hard ;).
>
>Is there a better way to integrate FUSE and Twisted than use one
>thread for FUSE and one for Twisted reactor without signal handlers?
>(Using the FUSE Python bindings of course.)

FUSE just gives a file descriptor to userspace.  A better way to 
integrate with Twisted would simply be to put that file descriptor into 
the reactor and parse it asynchronously, just like any other protocol. 
The Python FUSE bindings obscure the issue because, unlike the C 
libfuse, they assume that your filesystem I/O is blocking, which 
severely limits the performance of python-based filesystems.  (You 
cannot receive more requests for I/O in your filesystem until the 
previous one has been completed with the pyfuse bindings, but you can in 
C.)
>I have one filesystem for personal use done this way and it does seem
>to work. (A simple filesystem for browsing zip contents,)

It certainly works well enough for simple cases.  But it would be more 
robust and higher performance to do it the "normal" Twisted way :).



From daniel at keystonewood.com  Wed Jul 25 10:38:55 2007
From: daniel at keystonewood.com (Daniel Miller)
Date: Wed, 25 Jul 2007 10:38:55 -0400
Subject: [Twisted-Python] Handling PBConnectionLost errors
In-Reply-To: <99A576C3-FE5E-4AE3-A48F-1720C9ECA16B@keystonewood.com>
References: <99A576C3-FE5E-4AE3-A48F-1720C9ECA16B@keystonewood.com>
Message-ID: <E6C8DE88-2B46-42D4-A705-E7D621DD7653@keystonewood.com>

Is this such a stupid question that it doesn't even warrant a response?

~ Daniel


On Jul 20, 2007, at 11:52 AM, Daniel Miller wrote:
> Hello,
>
> Twisted PB sometimes loses its connection to the server. In this  
> case, a PBConnectionLost exception is raised on the client. It  
> would be nice to implement a fail-safe(er) way of calling remote  
> methods that would retry when necessary until the remote method has  
> been called successfully and the result has been returned. Note  
> that this is only necessary when the remote method call should be  
> invoked exactly once on the server (i.e. for POST-like calls that  
> change server state). In the case of GET-like requests, a simpler  
> retry mechanism will do.
>
> The motivation for this is based on my experience of using Twisted  
> in an application I am developing. The network communications are  
> all happening on a LAN. The good end of the network is connected  
> directly to a 100Mbps switch at the server. Failures occur more  
> frequently at the other end (my end) of the network, which is  
> connected through a 10/100 hub that is connected to the main  
> switch. I rigged up a quick test with a 1000-request sample size;  
> failures ranged from 28/1000 on the good end of the network to  
> 83/1000 on the bad end of the network. One request consists of a  
> single remote method call through PB. A success was when I got the  
> expected result, a failure was when I got a PBConnectionLost error.
>
> The following is pseudo code that I came up with to mitigate the  
> problem.
>
> Simple request (GET - repeatedly call method until success or  
> RETRY_LIMIT is reached)
>    Client flow:
>       for x in range(RETRY_LIMIT)
>          invoke remote method without unique call identifier
>          if result is not PBConnectionLost
>             break
>       if result is PBConnectionLost
>          raise server not responding error
>    Server flow:
>       (nothing special, just plain PB)
>
> Complex request (POST - server-side method is invoked exactly once)
>    Client flow:
>       use simple retry method to get a unique call identifier from  
> server
>          a timeout value is also sent along to tell the server how  
> long to hold the results of this request
>       for x in range(RETRY_LIMIT)
>          invoke remote method with identifier
>          if return value is not PBConnectionLost
>             break
>       if result is PBConnectionLost
>          raise server not responding error
>       using simple retry method tell server to discard unique call  
> identifier
>    Server flow:
>       receive request for unique call identifier
>          create and store identifier with UNCALLED token
>          schedule identifier to be discarded with timeout value  
> supplied by client
>          return identifier to client
>       receive remote method invocation with unique call identifier
>          branch on value stored with unique call identifier
>          if UNCALLED
>             update identifier with CALLED token
>             invoke method
>             while result is deferred
>                get defer result
>             store COMPLETED token and unique with unique call  
> identifier
>             if there is another invocation WAITING
>                this means the connection was lost
>                signal the WAITING request with the result
>             else
>                return result to client
>          if CALLED
>             store WAITING token with unique identifier (must not  
> overwrite other call tokens)
>             defer until COMPLETED
>          if COMPLETED
>             return result to client
>          if unique call identifier does not exist
>             raise error
>       receive request to discard unique call identifier
>          if identifier exists
>             discard identifier, tokens, and result
>          return True
>
> I realize that implementing this would not eliminate network  
> errors. It would simply reduce the likelyhood of failed method  
> calls due to dropped connections. If I have my math correct (I  
> always struggle a bit with statistics), even a RETRY_LIMIT of 2  
> would reduce the probability of a lost connection to 0.6% at the  
> worst (<0.1% on the good end of the network).
>
> I have two questions:
>
> 1. Does something like this already exist?
> 2. Is this a totally stupid idea? (would it be better to improve  
> our physical network than to try to band-aid the problem with  
> something like this?)




From nico at tekNico.net  Wed Jul 25 10:59:16 2007
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 25 Jul 2007 16:59:16 +0200
Subject: [Twisted-Python] Re: Handling PBConnectionLost errors
In-Reply-To: <E6C8DE88-2B46-42D4-A705-E7D621DD7653@keystonewood.com>
References: <99A576C3-FE5E-4AE3-A48F-1720C9ECA16B@keystonewood.com>
	<E6C8DE88-2B46-42D4-A705-E7D621DD7653@keystonewood.com>
Message-ID: <46A76544.6080404@tekNico.net>

> Daniel Miller wrote:
>> I have two questions:
>>
>> 1. Does something like this already exist?
>> 2. Is this a totally stupid idea? (would it be better to improve our
>> physical network than to try to band-aid the problem with something
>> like this?)

Daniel Miller wrote:
> Is this such a stupid question that it doesn't even warrant a response?

I was waiting for somebody else to speak up before embarrassing myself, but
anyway, here goes. ;-)

We had similar problems at a previous job of mine, and successfully used a
 similar approach to solve them; therefore you have my blessing, for what
it's worth.


-- 
Nicola Larosa - http://www.tekNico.net/

Our criticisms of WS-* are specific and have to do with issues of process
and stability and technical quality and a demonstrated lack of interoper-
ability. It is badly-engineered technology, using it will increase the
likelihood that your project fails, and it is not suitable for use
by conscientious IT professionals. -- Tim Bray, February 2007





From p.mayers at imperial.ac.uk  Wed Jul 25 11:09:47 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 25 Jul 2007 16:09:47 +0100
Subject: [Twisted-Python] Handling PBConnectionLost errors
In-Reply-To: <E6C8DE88-2B46-42D4-A705-E7D621DD7653@keystonewood.com>
References: <99A576C3-FE5E-4AE3-A48F-1720C9ECA16B@keystonewood.com>
	<E6C8DE88-2B46-42D4-A705-E7D621DD7653@keystonewood.com>
Message-ID: <1185376187.13244.31.camel@doorstop.net.ic.ac.uk>

On Wed, 2007-07-25 at 10:38 -0400, Daniel Miller wrote:
> Is this such a stupid question that it doesn't even warrant a response?

Not really, but it's a more complex question than it first seems, and
you're trying very hard to reproduce things that already exist.

First question: why is your PB server allocating "request IDs" and
storing hashes of them. You could just return a pb.Referenceable to the
client, backed by a normal python object (with a normal object
lifecycle) on the server.

Regarding the retry mechanism: It looks to me like you're treating PB
like an RPC mechanism, and finding that the nature of networks (they
fail, unpredictably) is tripping you up. Try thinking of it in a more
message-oriented way.

I would implement it something like this, using the python2.5 yield and
inlineCallbacks functionality:

class MyResources:
  def render_POST(self, request):
    d = self.doOnlyOnce(request)
    d.addCallbacks(self.done, self.failed, (request,), (request,))
    return server.NOT_DONE_YET

  def done(self, data, request):
    request.write(data)
    request.finish()
  def failed(self, f, request):
    request.write("An error occured")
    request.write(f.getErrorMessage())
    reqeust.finish()

  @inlineCallbacks
  def doOnlyOnce(self, request):
    pbroot = yield self.pbclifactory.getRootObject()
    theobject = yield pbroot.callRemote('makeRequest')
    data = yield theobject.callRemote('someMethod', request.args)
    # some local code here, then...
    # ok, done, tell the remote object to "commit" (finalise, delete)
    yield theobject.callRemote('commit')
    returnValue(data)

Your example is a bit theoretical, so it's difficult to see if this
would work for you.




From pbastov at gmail.com  Thu Jul 26 06:11:11 2007
From: pbastov at gmail.com (Pavel Bastov)
Date: Thu, 26 Jul 2007 16:11:11 +0600
Subject: [Twisted-Python] "MySQL has gone away"
Message-ID: <eaf39e680707260311y4c901d39u875eedec52080fe@mail.gmail.com>

Hi all,

I'm using MySQL database in my server app. Pretty often after some
inactivity I get this message in my logs "MySQL server has gone away".
How can I prevent this?

TIA

-- 
Good luck,

Pavel Bastov
xooChat Evangelist and Team Leader
http://www.xoochat.com/



From aleksey.kishkin at gmail.com  Thu Jul 26 06:53:56 2007
From: aleksey.kishkin at gmail.com (Aleksey Kishkin)
Date: Thu, 26 Jul 2007 14:53:56 +0400
Subject: [Twisted-Python] "MySQL has gone away"
In-Reply-To: <eaf39e680707260311y4c901d39u875eedec52080fe@mail.gmail.com>
References: <eaf39e680707260311y4c901d39u875eedec52080fe@mail.gmail.com>
Message-ID: <615514360707260353x292354am8c5a0b0ab06dda86@mail.gmail.com>

Actually usually it means mysql server died. it's certainly not twisted
question, but first of all you need to check mysql logs.

2007/7/26, Pavel Bastov <pbastov at gmail.com>:
>
> Hi all,
>
> I'm using MySQL database in my server app. Pretty often after some
> inactivity I get this message in my logs "MySQL server has gone away".
> How can I prevent this?
>
> TIA
>
> --
> Good luck,
>
> Pavel Bastov
> xooChat Evangelist and Team Leader
> http://www.xoochat.com/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Aleksey Kishkin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070726/d2338f58/attachment.htm 

From arnarbi at gmail.com  Thu Jul 26 07:54:19 2007
From: arnarbi at gmail.com (Arnar Birgisson)
Date: Thu, 26 Jul 2007 11:54:19 +0000
Subject: [Twisted-Python] "MySQL has gone away"
In-Reply-To: <615514360707260353x292354am8c5a0b0ab06dda86@mail.gmail.com>
References: <eaf39e680707260311y4c901d39u875eedec52080fe@mail.gmail.com>
	<615514360707260353x292354am8c5a0b0ab06dda86@mail.gmail.com>
Message-ID: <28012bc60707260454j2718816cg4df1e32a55d62a20@mail.gmail.com>

On 7/26/07, Aleksey Kishkin <aleksey.kishkin at gmail.com> wrote:
> Actually usually it means mysql server died. it's certainly not twisted
> question, but first of all you need to check mysql logs.

No, it just means Mysql dropped your connection. By default, MySQL is
configured to drop conncetions after a period of inactivity (600
seconds I think). Your client either needs to detect this condition
and reconnect, or you can increase the timeout.

Arnar



From aleksey.kishkin at gmail.com  Thu Jul 26 09:27:05 2007
From: aleksey.kishkin at gmail.com (Aleksey Kishkin)
Date: Thu, 26 Jul 2007 17:27:05 +0400
Subject: [Twisted-Python] "MySQL has gone away"
In-Reply-To: <28012bc60707260454j2718816cg4df1e32a55d62a20@mail.gmail.com>
References: <eaf39e680707260311y4c901d39u875eedec52080fe@mail.gmail.com>
	<615514360707260353x292354am8c5a0b0ab06dda86@mail.gmail.com>
	<28012bc60707260454j2718816cg4df1e32a55d62a20@mail.gmail.com>
Message-ID: <615514360707260627g46dcf2d8t9e526dd3c4c95720@mail.gmail.com>

May be. default wait_timeout 8 hours.

2007/7/26, Arnar Birgisson <arnarbi at gmail.com>:
>
> On 7/26/07, Aleksey Kishkin <aleksey.kishkin at gmail.com> wrote:
> > Actually usually it means mysql server died. it's certainly not twisted
> > question, but first of all you need to check mysql logs.
>
> No, it just means Mysql dropped your connection. By default, MySQL is
> configured to drop conncetions after a period of inactivity (600
> seconds I think). Your client either needs to detect this condition
> and reconnect, or you can increase the timeout.
>
> Arnar
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Aleksey Kishkin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070726/76c2f34f/attachment.htm 

From phil at bubblehouse.org  Thu Jul 26 10:17:55 2007
From: phil at bubblehouse.org (Phil Christensen)
Date: Thu, 26 Jul 2007 10:17:55 -0400
Subject: [Twisted-Python] "MySQL has gone away"
In-Reply-To: <eaf39e680707260311y4c901d39u875eedec52080fe@mail.gmail.com>
References: <eaf39e680707260311y4c901d39u875eedec52080fe@mail.gmail.com>
Message-ID: <A6AE56BA-AF61-4F91-8E30-3F62CC8317AA@bubblehouse.org>

On Jul 26, 2007, at 6:11 AM, Pavel Bastov wrote:

> Hi all,
>
> I'm using MySQL database in my server app. Pretty often after some
> inactivity I get this message in my logs "MySQL server has gone away".
> How can I prevent this?
>
> TIA

I've seen this most frequently when I'm dealing with the MySQLdb  
module directly (i.e., not using twisted.adbapi).

It was happening to me when I was trying to use a single cursor  
throughout my code by passing it around as a property of some object.

I believe it has something to do with the weak references used  
internally in the MySQLdb module (this is just a theory).

My solution was to fetch a new cursor in each scope where I needed  
it, making sure to close it when I was done.

Just my 2/100ths....

-phil



From elicriffield at gmail.com  Thu Jul 26 12:33:01 2007
From: elicriffield at gmail.com (Eli Criffield)
Date: Thu, 26 Jul 2007 11:33:01 -0500
Subject: [Twisted-Python] SSHv2 client script for Cisco routers
In-Reply-To: <1184621791.26559.6.camel@fnord.melbourne.eigenmagic.net>
References: <9f68812f0707121206o245cce61l5098a8b5f6549fe9@mail.gmail.com>
	<1184621791.26559.6.camel@fnord.melbourne.eigenmagic.net>
Message-ID: <18e3f33d0707260933w404aab50i56a2d33a9bde44a1@mail.gmail.com>

In my tradition of answering my own questioins.

I finally got around to making a working ssh script that connects to
cisco routers and runs multiple commands.

It has to launch a real shell to work, then loop though the commands
waiting for the shell prompt to enter the next command. The problem i
was having before was i wasn't launching a real shell, just running a
command (among other problems). With a cisco there's no way to do
certain things except to enter a subshell. The script has to be a bit
"expect" like to accuplish that, but it doesn't make any disitions
based on output, just runs the given commands and returns the output
of all of them.

As a library you can run sshCmds() mulitple times. I work around the
problem having multiple reactors by forking for each sshCmds() call,
so it is its own process.

warning Big Cut&Paste
you can get it at: http://eli.criffield.net/conchClient.py  too

#!/usr/bin/python
# -*- coding: utf-8 -*-
# Eli Criffield < python AT zendo dot net >
#
# TODO: stderr is mixed in with stdout
# TODO: cmd line options should be more standard, and parsed by
#       ConchOptions()


''' This will connect to a host and run a list of commands
Its different from just a normal connection because it launches a shell
and waits for the prompt, then sends the command, waits for prompt sends
command ect.. sshCmds() will return the output of all the commands it was
given together.

You probably want to run this on the command line or use sshCmds()
on the command line run:
conchClient.py host comand1 command2

in your python script use:

from conchClient import sshCmds
(out,err) = sshCmds(host,listOfCmds,user,echo)
print out

host is required
listOfCmds is any iterator that returns the commands
        to be run (uswally a list)
user can be None, then the environment LOGNAME will be used
echo must be True or False
'''

__version__ = 0.1185457318
__author__ = 'Eli Criffield <ecriffield at fnni.com>'


import os
import re
import sys
import struct
import base64
from twisted.conch import error
from twisted.python import log
from twisted.conch.client import default, options
from twisted.conch.ssh import channel, common, connection, keys, session, \
    transport, userauth
from twisted.internet import defer, protocol, reactor, stdio

# Regular expressions
rxPrompt = re.compile('[\\>\\#\\$] $', re.M)
rxMore = re.compile('--More--', re.M)


class SSHClientFactory(protocol.ClientFactory):

    def __init__(self, cmdlist, host, user, outputer):
        self.host = host
        self.user = user
        self.cmdlist = cmdlist
        self.cmdlist.reverse()
        self.outputer = outputer

    def stopFactory(self):
        try:
            reactor.stop()
        except:
            pass

    def buildProtocol(self, addr):
        clientTransport = SSHClientTransport(cmdlist=self.cmdlist,
                outputer=self.outputer)
        clientTransport.user = self.user
        clientTransport.host = self.host
        return clientTransport

    def clientConnectionFailed(self, connector, reason):
        print 'Connection failed: %s' % reason

    def clientConnectionLost(self, connector, reason):
        pass

class ClientOptions(options.ConchOptions):
    identitys = ['~/.ssh/id_rsa', '~/.ssh/id_dsa']
    pass


class SSHClientUserAuth(default.SSHUserAuthClient):

    def __init__(self, user, *args):
        userauth.SSHUserAuthClient.__init__(self, user, *args)
        self.keyAgent = None
        self.options = ClientOptions()
        self.usedFiles = []


class SSHClientConnection(connection.SSHConnection):

    def __init__(self, cmdlist, outputer, *args, **kwargs):
        connection.SSHConnection.__init__(self, *args, **kwargs)
        self.cmdlist = cmdlist
        self.outputer = outputer

    def serviceStarted(self):
        log.msg('Opening command channel')
        self.openChannel(SSHCommandChannel(cmdlist=self.cmdlist,
                         outputer=self.outputer, conn=self))


class SSHClientTransport(transport.SSHClientTransport):

    def __init__(self, cmdlist, outputer):
        self.cmdlist = cmdlist
        self.outputer = outputer

    def receiveError(self, code, desc):
        print 'disconnected error %i: %s' % (code, desc)

    def sendDisconnect(self, code, reason):
        print 'disconnect error %i: %s' % (code, reason)
        transport.SSHClientTransport.sendDisconnect(self, code, reason)

    def verifyHostKey(self, pubKey, fingerprint):
        host = self.host
        goodKey = default.isInKnownHosts(host, pubKey, {'known-hosts': None})
        if goodKey == 1:  # good key
            return defer.succeed(1)
        elif goodKey == 2: # AAHHHHH changed
            return defer.fail(ConchError('changed host key'))
        else:
            (oldout, oldin) = (sys.stdout, sys.stdin)
            sys.stdin = sys.stdout = open('/dev/tty', 'r+')
            if host == self.transport.getPeer().host:
                khHost = host
            else:
                host = '%s (%s)' % (host, self.transport.getPeer().host)
                khHost = '%s,%s' % (host, self.transport.getPeer().host)
            keyType = common.getNS(pubKey)[0]
            print "The authenticity of host '%s' can't be
established.\n    %s key fingerprint is %s." % \
                (host, {'ssh-dss': 'DSA', 'ssh-rsa': 'RSA'}[keyType],
                 fingerprint)
            try:
                ans = raw_input('Are you sure you want to continue
connecting (yes/no)? ')
            except KeyboardInterrupt:
                return defer.fail(ConchError('^C'))
            while ans.lower() not in ('yes', 'no'):
                ans = raw_input("Please type 'yes' or 'no': ")
            (sys.stdout, sys.stdin) = (oldout, oldin)
            if ans == 'no':
                print 'Host key verification failed.'
                return defer.fail(ConchError('bad host key'))
            print "Warning: Permanently added '%s' (%s) to the list of
known hosts." % \
                (khHost, {'ssh-dss': 'DSA', 'ssh-rsa': 'RSA'}[keyType])
            known_hosts = open(os.path.expanduser('~/.ssh/known_hosts'),
                               'r+')
            known_hosts.seek(-1, 2)
            if known_hosts.read(1) != '\n':
                known_hosts.write('\n')
            encodedKey = base64.encodestring(pubKey).replace('\n', '')
            known_hosts.write('%s %s %s\n' % (khHost, keyType,
                              encodedKey))
            known_hosts.close()
            return defer.succeed(1)

    def connectionSecure(self):
        log.msg('Securing connection')
        clientConnection = SSHClientConnection(cmdlist=self.cmdlist,
                outputer=self.outputer)
        self.requestService(SSHClientUserAuth(self.user,
                            clientConnection))


class SSHCommandChannel(channel.SSHChannel):

    name = 'session'

    def __init__(self, cmdlist, outputer, *args, **kwargs):
        channel.SSHChannel.__init__(self, *args, **kwargs)
        self.cmdlist = cmdlist
        self.outputer = outputer

    def openFailed(self, reason):
        print 'channel open failed: %s' % reason

    def channelOpen(self, data):
        log.msg('Channel open')
        term = 'ansi'
        winsz = struct.pack('4H', 80, 25, 80, 25)
        winSize = struct.unpack('4H', winsz)
        ptyReqData = session.packRequest_pty_req(term, winSize, '')
        self.conn.sendRequest(self, 'pty-req', ptyReqData)
        self.conn.sendRequest(self, 'shell', '')
        self.data = ''

    def dataReceived(self, data):
        self.data += data
        self.outputer.moreStdout(data)

        promptMatch = rxPrompt.search(self.data)
        if promptMatch:
            self.data = ''
            if len(self.cmdlist) > 0:
                cmd = self.cmdlist.pop()
                log.msg('execing: %s'%cmd)
                self.write(cmd)
                self.write('\n')
            else:
                self.loseConnection()
        # moreMatch is needed for cisco's
        # Since we have a terminal, it pauses with a more
        # at each screen, hit space and it will continue
        moreMatch = rxMore.search(self.data)
        if moreMatch:
            self.data = ''
            #hit space
            self.write(' ')

    def extReceived(self, t, data):
        if t == connection.EXTENDED_DATA_STDERR:
            sys.stderr.write(data)

    def eofReceived(self):
        log.msg('Received EOF')
        self.loseConnection()

    def closeReceived(self):
        log.msg('Remote side closed')
        self.conn.sendClose(self)

    def closed(self):
        log.msg('Channel closed')
        reactor.stop()
        log.msg('Reactor Stoped')
        return None

    def request_exit_status(self, data):
        global exitStatus
        exitStatus = int(struct.unpack('>L', data)[0])
        log.msg('Exit status: %s' % exitStatus)

    def sendEOF(self):
        self.conn.sendEOF(self)

    def stopWriting(self):
        pass

    def startWriting(self):
        pass


class saveOutput:

    def __init__(self, echo=False):
        self.stdout = ''
        self.stderr = ''
        self.echo = echo

    def moreStdout(self, data):
        if self.echo:
            sys.stdout.write(data)
            sys.stdout.flush()
        self.stdout += data

    def moreStderr(self, data):
        if self.echo:
            sys.stderr.write(data)
            sys.stderr.flush()
        self.stderr += data


def __sshCmds(host, cmds, user=None, echo=False):
    outputer = saveOutput(echo=echo)
    clientFactory = SSHClientFactory(cmdlist=cmds, host=host, user=user,
            outputer=outputer)
    log.msg('Connecting to:%s'%host)
    reactor.connectTCP(host, 22, clientFactory)
    log.msg('Starting reactor')
    reactor.run()
    log.msg('Reactor has ended')
    return (outputer.stdout, outputer.stderr)


def sshCmds(host, cmds, user=None, echo=False):
    '''
    from conchClient import sshCmds
    (out,err) = sshCmds(host,listOfCmds,user,echo)
    print out

    host is required
    listOfCmds is any interator that returns the commands
            to be run (uswally a list)
    user can be None, then the envorment LOGNAME will be used
    echo must be True or False
    '''
    if user == None:
        user = os.environ.get('LOGNAME')

    # We have to fork because running the reactor twice doesn't work well
    (rPipe, wPipe) = os.pipe()  # these are file descriptors, not file objects
    pid = os.fork()
    if pid:
        # I'm the Parent
        os.close(wPipe)
        rfd = os.fdopen(rPipe)
        outpt = rfd.read()
        os.waitpid(pid, 0)  # make sure the child process gets cleaned up
        # FIXME, stderr is mixed in with stdout
        fakeerr = ''
        return (outpt, fakeerr)
    else:

        # I'm the Child
        os.close(rPipe)
        wfd = os.fdopen(wPipe, 'w')
        (stdout, stderr) = __sshCmds(host, cmds, user, echo)
        # FIXME Stderr is mixed with stdout
        wfd.write(stdout)
        wfd.close()
        sys.exit(0)


if __name__ == '__main__':

    if len(sys.argv) < 3:
        print '%s [user@]host cmd1 [cmd2 cmd3]'
        sys.exit(1)
    if (sys.argv)[1].find('@') != -1:
        (user, host) = (sys.argv)[1].split('@', 1)
    else:
        user = None
        host = (sys.argv)[1]
    cmds = (sys.argv)[2:]

    (out, err) = sshCmds(host, cmds, user, True)
    print '\n'



From paulswartz at gmail.com  Thu Jul 26 13:49:05 2007
From: paulswartz at gmail.com (Paul Swartz)
Date: Thu, 26 Jul 2007 13:49:05 -0400
Subject: [Twisted-Python] potential connectSSH workflow
Message-ID: <324cfb540707261049l58b0e10cj50c62b726c528fef@mail.gmail.com>

I've written up a potential workflow for connectSSH, a simplified way
of using Twisted Conch.  It's available at
http://z3p.jot.com/WikiHome/SummerOfCode2007/connectSSH.  If those who
are interested could take a look, I'd love some feedback.

thanks,
-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin



From glyph at divmod.com  Thu Jul 26 16:13:51 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 26 Jul 2007 20:13:51 -0000
Subject: [Twisted-Python] potential connectSSH workflow
In-Reply-To: <324cfb540707261049l58b0e10cj50c62b726c528fef@mail.gmail.com>
References: <324cfb540707261049l58b0e10cj50c62b726c528fef@mail.gmail.com>
Message-ID: <20070726201351.26384.117469790.divmod.xquotient.2267@joule.divmod.com>

On 05:49 pm, paulswartz at gmail.com wrote:
>I've written up a potential workflow for connectSSH, a simplified way
>of using Twisted Conch.  It's available at
>http://z3p.jot.com/WikiHome/SummerOfCode2007/connectSSH.  If those who
>are interested could take a look, I'd love some feedback.

Thanks a lot!  Here are my initial impressions:

The bundle of crud that lives in ~/.ssh should be represented as an 
object.  connectSSH should really be a method on that object, so that 
things like host key verification can happen as normal and expected. 
This is especially true because that object can have references to other 
objects, such as the (Deferred-returning) UI for authorizing or denying 
an unexpected host key.  That object could also be more easily tested 
because the reactor could be an attribute of it rather than a global 
import.  Unfortunately there's a lot of code in Twisted that doesn't do 
this yet, but we should be building better use of that singleton.  See 
http://glyf.livejournal.com/70684.html

(On a tangent, this is similar to the fact that in the next-generation 
HTTP API, there should be a "browser" object for indirecting the 
reactor, but also for persisting cookies, HTTP authorization headers, 
and the like.  A free function for doing a connectSSH is lame for many 
of the same reasons that getPage() is lame.)

This also looks like an excellent use-case for endpoints.  Please see 
this ticket:
    http://twistedmatrix.com/trac/ticket/1442
and see if you have any feedback there.

What do you think?



From paulswartz at gmail.com  Thu Jul 26 17:14:16 2007
From: paulswartz at gmail.com (Paul Swartz)
Date: Thu, 26 Jul 2007 17:14:16 -0400
Subject: [Twisted-Python] potential connectSSH workflow
In-Reply-To: <20070726201351.26384.117469790.divmod.xquotient.2267@joule.divmod.com>
References: <324cfb540707261049l58b0e10cj50c62b726c528fef@mail.gmail.com>
	<20070726201351.26384.117469790.divmod.xquotient.2267@joule.divmod.com>
Message-ID: <324cfb540707261414x5519bc7ob593fe635c955600@mail.gmail.com>

On 7/26/07, glyph at divmod.com <glyph at divmod.com> wrote:
> On 05:49 pm, paulswartz at gmail.com wrote:
> >I've written up a potential workflow for connectSSH, a simplified way
> >of using Twisted Conch.  It's available at
> >http://z3p.jot.com/WikiHome/SummerOfCode2007/connectSSH.  If those who
> >are interested could take a look, I'd love some feedback.
>
> Thanks a lot!  Here are my initial impressions:
>
> The bundle of crud that lives in ~/.ssh should be represented as an
> object.  connectSSH should really be a method on that object, so that
> things like host key verification can happen as normal and expected.
> This is especially true because that object can have references to other
> objects, such as the (Deferred-returning) UI for authorizing or denying
> an unexpected host key.  That object could also be more easily tested
> because the reactor could be an attribute of it rather than a global
> import.  Unfortunately there's a lot of code in Twisted that doesn't do
> this yet, but we should be building better use of that singleton.  See
> http://glyf.livejournal.com/70684.html


That makes sense:  a ConchConnection object which wraps some of the
nonsense that currently lives in t.c.scripts.conch like verifying a
host key and finding keys to use.  I still think that passing
authentication data in connect() is the right idea, but it can default
to using the keys that it finds in ~/.ssh or in a key agent.

> This also looks like an excellent use-case for endpoints.  Please see
> this ticket:
>     http://twistedmatrix.com/trac/ticket/1442
> and see if you have any feedback there.

I think making a ConchClientEndpoint which takes another
ClientEndpoint and some authentication data is a good interface, but
I'm not holding my breath for endpoints-1442 getting merged to trunk.
I'm already depending on at least 1-2 of my branches getting merged :)

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin



From glyph at divmod.com  Thu Jul 26 17:24:15 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 26 Jul 2007 21:24:15 -0000
Subject: [Twisted-Python] potential connectSSH workflow
In-Reply-To: <324cfb540707261414x5519bc7ob593fe635c955600@mail.gmail.com>
References: <324cfb540707261049l58b0e10cj50c62b726c528fef@mail.gmail.com>
	<20070726201351.26384.117469790.divmod.xquotient.2267@joule.divmod.com>
	<324cfb540707261414x5519bc7ob593fe635c955600@mail.gmail.com>
Message-ID: <20070726212415.26384.1222446528.divmod.xquotient.2360@joule.divmod.com>

On 09:14 pm, paulswartz at gmail.com wrote:
>That makes sense: a ConchConnection object which wraps some of the
>nonsense that currently lives in t.c.scripts.conch like verifying a
>host key and finding keys to use.

"Connection" seems like a weird name for that to me, as it applies it is 
attached to a particular ... well, connection.  Connector, maybe? 
Client?  ClientStorage?   I guess those names have some pretty serious 
problems too, but it's worth thinking about a better one.
>I still think that passing
>authentication data in connect() is the right idea, but it can default
>to using the keys that it finds in ~/.ssh or in a key agent.

I agree emphatically, but both the default and non-default cases are 
equally important.  There's a direct analogue in the user interface: 
"ssh foo.com" will use your default key or agent, and your default 
username, and that's 99% of usage.  That, of course, doesn't mean you 
can get rid of "ssh -i mykey.id_rsa foo.com" or "ssh otheruser at foo.com", 
they're both very necessary use-cases.
>>This also looks like an excellent use-case for endpoints.  Please see
>>this ticket:
>>     http://twistedmatrix.com/trac/ticket/1442
>>and see if you have any feedback there.
>
>I think making a ConchClientEndpoint which takes another
>ClientEndpoint and some authentication data is a good interface, but
>I'm not holding my breath for endpoints-1442 getting merged to trunk.
>I'm already depending on at least 1-2 of my branches getting merged :)

Definitely.  This should be a separate ticket.  In fact, far from asking 
you to wait for it to be merged, I was wondering if you had any comments 
on the interface that might come from use-cases that would arise in the 
conch endpoint implementation that might even further delay it :).



From paulswartz at gmail.com  Thu Jul 26 17:47:08 2007
From: paulswartz at gmail.com (Paul Swartz)
Date: Thu, 26 Jul 2007 17:47:08 -0400
Subject: [Twisted-Python] potential connectSSH workflow
In-Reply-To: <20070726212415.26384.1222446528.divmod.xquotient.2360@joule.divmod.com>
References: <324cfb540707261049l58b0e10cj50c62b726c528fef@mail.gmail.com>
	<20070726201351.26384.117469790.divmod.xquotient.2267@joule.divmod.com>
	<324cfb540707261414x5519bc7ob593fe635c955600@mail.gmail.com>
	<20070726212415.26384.1222446528.divmod.xquotient.2360@joule.divmod.com>
Message-ID: <324cfb540707261447q240cc4b0ve340fed2148a3fe8@mail.gmail.com>

On 7/26/07, glyph at divmod.com <glyph at divmod.com> wrote:
> On 09:14 pm, paulswartz at gmail.com wrote:
> >That makes sense: a ConchConnection object which wraps some of the
> >nonsense that currently lives in t.c.scripts.conch like verifying a
> >host key and finding keys to use.
>
> "Connection" seems like a weird name for that to me, as it applies it is
> attached to a particular ... well, connection.  Connector, maybe?
> Client?  ClientStorage?   I guess those names have some pretty serious
> problems too, but it's worth thinking about a better one.

I actually meant Connector :) There's also Creator (in comparison with
t.i.protocol.ClientCreator).

> >I still think that passing
> >authentication data in connect() is the right idea, but it can default
> >to using the keys that it finds in ~/.ssh or in a key agent.
>
> I agree emphatically, but both the default and non-default cases are
> equally important.  There's a direct analogue in the user interface:
> "ssh foo.com" will use your default key or agent, and your default
> username, and that's 99% of usage.  That, of course, doesn't mean you
> can get rid of "ssh -i mykey.id_rsa foo.com" or "ssh otheruser at foo.com",
> they're both very necessary use-cases.

So how about this:

class IConch<C word>(Interface):
    def connect(host, port=22, user=None, knownHosts=None,
authentications=None):

where user defaults to the current username, knownHosts defaults to
the to hosts in known_hosts, and authentications defaults to a key
agent or the keys in .ssh/id_*.

To keep the current use case of verifying a host key with a function,
knownHosts could be a filename string, in which case it would be read
for host keys, or a function in which case it is called with the key
and fingerprint.  authentications would be a list functioning the same
was as in my initial outline.

This would make the default .connect(hostname) work equivalently to
the default 'ssh hostname' but still give options for the other
overrides.

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin



From honeyday.mj at gmail.com  Thu Jul 26 21:48:12 2007
From: honeyday.mj at gmail.com (=?GB2312?B?wu3MpLfJ0eA=?=)
Date: Fri, 27 Jul 2007 09:48:12 +0800
Subject: [Twisted-Python] "MySQL has gone away"
In-Reply-To: <eaf39e680707260311y4c901d39u875eedec52080fe@mail.gmail.com>
References: <eaf39e680707260311y4c901d39u875eedec52080fe@mail.gmail.com>
Message-ID: <767559b0707261848g647a6468p38a78a01bba4d11e@mail.gmail.com>

2007/7/26, Pavel Bastov <pbastov at gmail.com>:
> Hi all,
>
> I'm using MySQL database in my server app. Pretty often after some
> inactivity I get this message in my logs "MySQL server has gone away".
> How can I prevent this?
>
> TIA
>

U can use Mysql::Ping(dbh) to keep the connection alive.

-----------
n = mysql::Ping(dbh)

Checks whether or not the connection to the server is working. If it
has gone down, an automatic reconnection is attempted.

Clients that remain idle for a long while, to check whether or not the
server has closed the connection and reconnect if necessary can use
this function.

Returns true if the server is alive and false if an error occurred.



From glyph at divmod.com  Thu Jul 26 21:50:04 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 27 Jul 2007 01:50:04 -0000
Subject: [Twisted-Python] potential connectSSH workflow
In-Reply-To: <324cfb540707261447q240cc4b0ve340fed2148a3fe8@mail.gmail.com>
References: <324cfb540707261049l58b0e10cj50c62b726c528fef@mail.gmail.com>
	<20070726201351.26384.117469790.divmod.xquotient.2267@joule.divmod.com>
	<324cfb540707261414x5519bc7ob593fe635c955600@mail.gmail.com>
	<20070726212415.26384.1222446528.divmod.xquotient.2360@joule.divmod.com>
	<324cfb540707261447q240cc4b0ve340fed2148a3fe8@mail.gmail.com>
Message-ID: <20070727015004.26384.577094423.divmod.xquotient.2509@joule.divmod.com>

On 26 Jul, 09:47 pm, paulswartz at gmail.com wrote:
>On 7/26/07, glyph at divmod.com <glyph at divmod.com> wrote:
>>On 09:14 pm, paulswartz at gmail.com wrote:

Let me quote this point from the end first, because it is the central 
point of agreement, and basically the specification for this feature:
>This would make the default .connect(hostname) work equivalently to
>the default 'ssh hostname' but still give options for the other
>overrides.

I don't think, however, that the distinction being proposed (function 
arguments vs. defaults) is quite the right way to go about it, though.
>> >That makes sense: a ConchConnection object (snip)

>>"Connection" seems like a weird name for that to me, as it applies it 
>>is
>>attached to a particular ... well, connection.  Connector, maybe?

>I actually meant Connector :) There's also Creator (in comparison with
>t.i.protocol.ClientCreator).

Let's call it ConchEndpoint for the moment.  Hopefully why I say that 
will become clear in a moment.
>> >I still think that passing
>> >authentication data in connect() is the right idea, but it can 
>>default
>> >to using the keys that it finds in ~/.ssh or in a key agent.

>>I agree emphatically, but both the default and non-default cases are
>>equally important.

>class IConch<C word>(Interface):
>    def connect(host, port=22, user=None, knownHosts=None,
>authentications=None):

I think the interface here is probably superfluous.  The interface 
definition, when there is one, should really just be an endpoint.  These 
may make sense as constructor arguments or arguments to a method that 
builds an endpoint though.  (More below...)
>To keep the current use case of verifying a host key with a function,
>knownHosts could be a filename string, in which case it would be read
>for host keys, or a function in which case it is called with the key
>and fingerprint.  authentications would be a list functioning the same
>was as in my initial outline.

OK, let's have a bit more depth.  This interface isn't quite right.

Starting at the bottom, "knownHosts" is the wrong name for this object. 
It should be "hostVerifier" and it should be an object with a method to 
verify the host.  It should definitely _not_ accept a filename string; 
in the filename case, it should look something like this:

    OpenSSHFormatVerifier(FilePath("my-ssh-hosts-file")
                          ui=GuiPasswordDialog())

In general, I think passing filenames around should be deprecated within 
Twisted; FilePath provides lots more flexibility, especially with a real 
interface to unify it with ZipPath.  (A marginal benefit of this is that 
your tests can avoid a whole bunch of file I/O because you can have a 
mock memory-backed FilePath.  This benefit becomes less marginal as more 
and more tests use it and the whole suite speeds up, though.)

As far as object-vs-function, passing functions around is always 
tempting, but it tends to mean "This is an object with only one obvious 
method that I've thought of so far, which I'll call '__call__'".  There 
are lots of places I've used this idiom and found that it falls down and 
gets ugly when it ends up that you actually want _two_ methods instead.

To retain compatibility with the existing use-a-function-to-verify path, 
it would of course be trivial to have a SimpleFunctionVerifier.

This might seem like a lot of typing, so to help with abbreviation, a 
higher-level object could roll them together:

    altdotssh = DotSSH(FilePath("my-dot-ssh-dir"))

And this leads in to my idea for subtly changing the design.  Instead of 
modifying stuff with arguments to the function:

    defaultConnector.connectSSH(
        factory, hostname, hostVerifier=altdotssh.hostVerifier)

Building a different object takes roughly the same amount of work and 
does roughly the same thing, but yields a result which can be passed 
around and used as a connector:

    endpt = defaultConfig.endpointSSH(
        hostname, hostVerifier=altdotssh.hostVerifier)
    endpt.connect(factory)

To push this flexibility even further, you could make the configuration 
object cloneable.

    cfg2 = defaultConfig.copy(hostVerifier=altdotssh.hostVerifier)
    endpt = cfg2.endpointSSH(hostname)
    endpt.connect(factory)

although whether this last additional level of flexibility is worth it 
or not probably depends on all of the things that a "configuration" 
object can contain.

Thoughts?



From paulswartz at gmail.com  Thu Jul 26 22:51:17 2007
From: paulswartz at gmail.com (Paul Swartz)
Date: Thu, 26 Jul 2007 22:51:17 -0400
Subject: [Twisted-Python] potential connectSSH workflow
In-Reply-To: <20070727015004.26384.577094423.divmod.xquotient.2509@joule.divmod.com>
References: <324cfb540707261049l58b0e10cj50c62b726c528fef@mail.gmail.com>
	<20070726201351.26384.117469790.divmod.xquotient.2267@joule.divmod.com>
	<324cfb540707261414x5519bc7ob593fe635c955600@mail.gmail.com>
	<20070726212415.26384.1222446528.divmod.xquotient.2360@joule.divmod.com>
	<324cfb540707261447q240cc4b0ve340fed2148a3fe8@mail.gmail.com>
	<20070727015004.26384.577094423.divmod.xquotient.2509@joule.divmod.com>
Message-ID: <324cfb540707261951r6f78924cw3bedbbb5084dc7e1@mail.gmail.com>

On 7/26/07, glyph at divmod.com <glyph at divmod.com> wrote:
> This might seem like a lot of typing, so to help with abbreviation, a
> higher-level object could roll them together:
>
>     altdotssh = DotSSH(FilePath("my-dot-ssh-dir"))
>
> And this leads in to my idea for subtly changing the design.  Instead of
> modifying stuff with arguments to the function:
>
>     defaultConnector.connectSSH(
>         factory, hostname, hostVerifier=altdotssh.hostVerifier)
>
> Building a different object takes roughly the same amount of work and
> does roughly the same thing, but yields a result which can be passed
> around and used as a connector:
>
>     endpt = defaultConfig.endpointSSH(
>         hostname, hostVerifier=altdotssh.hostVerifier)
>     endpt.connect(factory)

So, is defaultConfig is some other object which can create a
ConchEndpoint?  Is defaultConfig a DotSSH?  I'm not clear on what
these different objects are here.

> To push this flexibility even further, you could make the configuration
> object cloneable.
>
>     cfg2 = defaultConfig.copy(hostVerifier=altdotssh.hostVerifier)
>     endpt = cfg2.endpointSSH(hostname)
>     endpt.connect(factory)
>
> although whether this last additional level of flexibility is worth it
> or not probably depends on all of the things that a "configuration"
> object can contain.
>
> Thoughts?

This seems reasonable, at least for the case of host verification.
I'm not sure where authentication fits into these things, though.  It
feels different from host key verification, but moving it to the
connect() method makes the ConchEndpoint a different interface from
the other Endpoints.  I suppose with a copy method:

defaultConfig.copy(user="new username",
authentications=[KeyAuthentication(key),
PasswordAuthentication('password'), InteractiveAuthentication(['answer
1'])]).endPointSSH(hostname).connect()

 is straightforward enough.  But it seems more confusing than:

defaultConfig.endPointSSH(hostname, user="name").connect()

which seems more in line with my personal expectations.  I think,
however, my expectations might be changed if the above example was
more clear to me.

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin



From phil at bubblehouse.org  Fri Jul 27 11:42:37 2007
From: phil at bubblehouse.org (Phil Christensen)
Date: Fri, 27 Jul 2007 11:42:37 -0400
Subject: [Twisted-Python] wsgi thread synchronization
Message-ID: <B63731D3-8EA1-4C49-B45F-F6CE1805E515@bubblehouse.org>

I'm crossposting because although my use case is in web, this is more  
of a question about dealing with threads in twisted. I have a decent  
academic understanding of threads, but I've never really used them in  
Python or Twisted.

I've just moved from a mod_python WSGI container running on prefork  
apache2 to a container running on twisted.web, and I realized that I  
now have threading considerations I didn't before.

Since my potential synchronization problems are actually quite few,  
I've been getting by just by using threading.BoundedSemaphore to  
manage a couple of thread-sensitive areas of the web app. However, I  
already have a dependency on Twisted core, so it occurs to me that  
there are probably nicer, twistier ways of doing this.

For example, I have a section of code like:


     host_tree = {}
     host_tree_lock = threading.BoundedSemaphore

     def get_application(env):
         global host_tree, host_tree_lock

         host = env.get('HTTP_HOST', env['SERVER_NAME'])

         host_tree_lock.acquire()

         if not(host in host_tree):
             _load_plugins(env)

         host_node = host_tree[host]

         if not(host_node.has_path(env['REQUEST_URI'])):
             _load_plugins(env)

         app = host_node.get_data_at(env['REQUEST_URI'])

         host_tree_lock.release()

         return app


The only variable shared between threads is the `host_tree` global  
(the `env` variable is the WSGI environment, which is unique per  
thread, and the resulting `app` object is immutable). This works for  
me and is sufficient for my needs, but I'd appreciate a sanity check  
from anyone with some thread karma to spare.

Thanks again,

-phil



From radix at twistedmatrix.com  Fri Jul 27 11:49:37 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 27 Jul 2007 11:49:37 -0400
Subject: [Twisted-Python] Re: [Twisted-web] wsgi thread synchronization
In-Reply-To: <B63731D3-8EA1-4C49-B45F-F6CE1805E515@bubblehouse.org>
References: <B63731D3-8EA1-4C49-B45F-F6CE1805E515@bubblehouse.org>
Message-ID: <60ed19d40707270849p531417adxc06ed63b922071a7@mail.gmail.com>

On 7/27/07, Phil Christensen <phil at bubblehouse.org> wrote:

>      host_tree = {}
>      host_tree_lock = threading.BoundedSemaphore
>
>      def get_application(env):
>          global host_tree, host_tree_lock
>
>          host = env.get('HTTP_HOST', env['SERVER_NAME'])
>
>          host_tree_lock.acquire()

[bunch of stuff]

>          host_tree_lock.release()
>
>          return app

> The only variable shared between threads is the `host_tree` global
> (the `env` variable is the WSGI environment, which is unique per
> thread, and the resulting `app` object is immutable). This works for
> me and is sufficient for my needs, but I'd appreciate a sanity check
> from anyone with some thread karma to spare.

The most immediately obvious problem is that you're not protecting
yourself from an error in the code between the acquire and the
release. You'll want to start a try: block immediately after the
acquire and move the release into a finally: block.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From paulswartz at gmail.com  Fri Jul 27 15:07:04 2007
From: paulswartz at gmail.com (Paul Swartz)
Date: Fri, 27 Jul 2007 15:07:04 -0400
Subject: [Twisted-Python] potential connectSSH workflow
In-Reply-To: <20070727015004.26384.577094423.divmod.xquotient.2509@joule.divmod.com>
References: <324cfb540707261049l58b0e10cj50c62b726c528fef@mail.gmail.com>
	<20070726201351.26384.117469790.divmod.xquotient.2267@joule.divmod.com>
	<324cfb540707261414x5519bc7ob593fe635c955600@mail.gmail.com>
	<20070726212415.26384.1222446528.divmod.xquotient.2360@joule.divmod.com>
	<324cfb540707261447q240cc4b0ve340fed2148a3fe8@mail.gmail.com>
	<20070727015004.26384.577094423.divmod.xquotient.2509@joule.divmod.com>
Message-ID: <324cfb540707271207i4fc1deaesab38d0a82158570d@mail.gmail.com>

On 7/26/07, glyph at divmod.com <glyph at divmod.com> wrote:
 > Thoughts?

I've updated the wiki
(http://z3p.jot.com/WikiHome/SummerOfCode2007/connectSSH) with an
interface that is more along the lines of what you presented here.
I'm out for the weekend, but I'd love comments.

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin



From daniel at keystonewood.com  Fri Jul 27 16:53:31 2007
From: daniel at keystonewood.com (Daniel Miller)
Date: Fri, 27 Jul 2007 16:53:31 -0400
Subject: [Twisted-Python] Re: Handling PBConnectionLost errors
In-Reply-To: <46A76544.6080404@tekNico.net>
References: <99A576C3-FE5E-4AE3-A48F-1720C9ECA16B@keystonewood.com>
	<E6C8DE88-2B46-42D4-A705-E7D621DD7653@keystonewood.com>
	<46A76544.6080404@tekNico.net>
Message-ID: <A28123CC-8EBD-437B-835A-A8534B4CCA04@keystonewood.com>


On Jul 25, 2007, at 10:59 AM, Nicola Larosa wrote:
>> Daniel Miller wrote:
>>> I have two questions:
>>>
>>> 1. Does something like this already exist?
>>> 2. Is this a totally stupid idea? (would it be better to improve our
>>> physical network than to try to band-aid the problem with something
>>> like this?)
>
> We had similar problems at a previous job of mine, and successfully  
> used a
>  similar approach to solve them; therefore you have my blessing,  
> for what
> it's worth.

Thanks Nicola.

~ Daniel



From daniel at keystonewood.com  Fri Jul 27 16:57:59 2007
From: daniel at keystonewood.com (Daniel Miller)
Date: Fri, 27 Jul 2007 16:57:59 -0400
Subject: [Twisted-Python] Handling PBConnectionLost errors
In-Reply-To: <1185376187.13244.31.camel@doorstop.net.ic.ac.uk>
References: <99A576C3-FE5E-4AE3-A48F-1720C9ECA16B@keystonewood.com>
	<E6C8DE88-2B46-42D4-A705-E7D621DD7653@keystonewood.com>
	<1185376187.13244.31.camel@doorstop.net.ic.ac.uk>
Message-ID: <3004EF8A-172A-4342-A401-0634F6BF7141@keystonewood.com>

On Jul 25, 2007, at 11:09 AM, Phil Mayers wrote:
> First question: why is your PB server allocating "request IDs" and
> storing hashes of them. You could just return a pb.Referenceable to  
> the
> client, backed by a normal python object (with a normal object
> lifecycle) on the server.

That's something I hadn't thought of. A referenceable might simplify  
my problem a bit.

> Regarding the retry mechanism: It looks to me like you're treating PB
> like an RPC mechanism, and finding that the nature of networks (they
> fail, unpredictably) is tripping you up. Try thinking of it in a more
> message-oriented way.
>
> I would implement it something like this, using the python2.5 yield  
> and
> inlineCallbacks functionality:
>
> <snip>
>
> Your example is a bit theoretical, so it's difficult to see if this
> would work for you.

I'll have to give that a deeper look later, but thanks a lot for the  
ideas and insight.

~ Daniel




From db3l.net at gmail.com  Sat Jul 28 01:07:58 2007
From: db3l.net at gmail.com (David Bolen)
Date: Sat, 28 Jul 2007 01:07:58 -0400
Subject: [Twisted-Python] Re: Handling PBConnectionLost errors
References: <99A576C3-FE5E-4AE3-A48F-1720C9ECA16B@keystonewood.com>
	<E6C8DE88-2B46-42D4-A705-E7D621DD7653@keystonewood.com>
Message-ID: <m2wswl3ykx.fsf@valheru.db3l.homeip.net>

Daniel Miller <daniel at keystonewood.com> writes:

> Is this such a stupid question that it doesn't even warrant a response?
>
> ~ Daniel

I agree with the other comment to the effect that the lack of response
may be more due to the underlying complexity of the question as to
lack of interest.  I know we definitely ran into similar issues in a
large PB-based system I worked on a while ago, and in the end
determined that we were best served by implementing our own system.

For example, your opening point about:

>>                       (...)                                 It
>> would be nice to implement a fail-safe(er) way of calling remote
>> methods that would retry when necessary until the remote method has
>> been called successfully and the result has been returned.  (...)

has an implicit assumption that the remote method will even continue
to exist once the disconnect has occurred - something that is by no
means guaranteed with PB.

That is, what if the method you are trying to call is on a
Referenceable you got back from the server, but it was to an object
instance on the server that was created just for your client
connection?  The connection breaking will destroy that remote object
and/or your ability to reconnect to it without special support on the
server to keep it persistent.  Not to mention however many other
references to that remote object you may have in existence on the
client which will no longer function even after a reconnect.

That's not to say that there aren't plausible ways to achieve what
you're looking for, but in general it becomes application specific,
since you'll need knowledge as to how state management on your server
is taking place, and what remote references are stable across
connections.  So if your use of random IDs and reconnect attempts is a
workable way for you to manage the server state in such a way that it
is reconnectable, then it may be perfectly good in your environment.

Perhaps some earlier messages of mine when we had just finished
putting together the remote wrapping and reconnect support in our
system.  See my responses to the thread at:

http://twistedmatrix.com/pipermail/twisted-python/2005-July/011030.html

and

http://twistedmatrix.com/pipermail/twisted-python/2005-July/011046.html

It hits on topics beyond that of just a reliable method call, but the
second message more specifically talks about the wrapper that
implements reconnections, and how we dealt with updating references
post-reconnect.  You can probably see how the design dovetailed with
our particular server side structure (the registry was persistent as
were the managers, so they provided the concrete point of
reattachment).  And the use of the wrappers around references meant we
could "correct" the wrappers for a new connection without having to
worry about what parts of the client application may have been holding
references.  Perhaps it will give you some other ideas in your own
system.

For your other points:

>> I have two questions:
>>
>> 1. Does something like this already exist?

There used to be a "sturdy" PB module in Twisted (looks like it's gone
in later releases) to attempt to provide a more persistent server
reference.  Also, if I recall correctly there's a
ReconnectingClientFactory class somewhere which, while not PB
specific, was a way to implement reconnections purely at the
factory/protocol level.  Of course, that's never really the complex
part in a PB application - it's figuring out what to do with your
remote references.

Some of the work in the publish.py and refpath.py PB modules are also
attempts to solve some of the issues involved here.

But I'm not aware of any existing approach that is generally suitable
for any application.  I rather doubt any single generic approach would
be possible, since PB provides for many mechanisms of statement
management and referenceability among servers and clients.

>> 2. Is this a totally stupid idea? (would it be better to improve
>> our physical network than to try to band-aid the problem with
>> something like this?)

It's never a stupid idea to engineer for network interruptions, but
like everything else a design must weigh benefits against
cost/development.  With that said, it might not be a bad idea to also
look into your network.  TCP connections are rather hard to break just
due to network transmission problems, and all your PB calls are going
across a single TCP session.  They might be significantly delayed on a
bad network, but the connection itself shouldn't fail unless something
more extreme (and unusual) is happening.  Given the level of problems
you're encountering, I wouldn't be surprised if something else was
awry.

Of course, that level of network troubleshooting can have it's own
cost/benefit analysis, and it might just be simpler to engineer around
the problem at the application level as you are doing.

For example, our system above was used over a WAN, and we actually had
several relays each of which had their own wrappers for the next hop,
so it was very important that while it might be down during an outage,
it properly healed itself as soon as whichever segment had failed was
reconnected.  But we generally expected most outages to represent real
network failures for a period of time (or a server going down), and
less so a constant percentage of failing calls.  Not that the networks
couldn't have packet loss, but network packet loss has to reach
several percent before really impacting TCP to the point where we
would notice).

But another PB-based application I'm working on now is less crucial.
Should I lose the server connection, I basically close down active UI
windows that were working with previous references and notify the user
that a disconnect has occurred.  They can then initiate a new
connection when they want.

-- David




From einar.twisted at norsk-esport.no  Sat Jul 28 18:00:57 2007
From: einar.twisted at norsk-esport.no (=?ISO-8859-1?Q?=22Einar_S=2E_Ids=F8=22?=)
Date: Sun, 29 Jul 2007 00:00:57 +0200
Subject: [Twisted-Python] "MySQL has gone away"
In-Reply-To: <eaf39e680707260311y4c901d39u875eedec52080fe@mail.gmail.com>
References: <eaf39e680707260311y4c901d39u875eedec52080fe@mail.gmail.com>
Message-ID: <46ABBC99.6000301@norsk-esport.no>

Have you tried cp_reconnect? It solved the problem for me.

dbPool = adbapi.ConnectionPool('MySQLdb', db='fee', user='fii',
passwd='foo', host='fum', cp_reconnect=True)

Cheers,
Einar

Pavel Bastov wrote:
> Hi all,
> 
> I'm using MySQL database in my server app. Pretty often after some
> inactivity I get this message in my logs "MySQL server has gone away".
> How can I prevent this?
> 
> TIA
> 



From exarkun at twistedmatrix.com  Sun Jul 29 00:05:03 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 29 Jul 2007 04:05:03 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1185681903.56.1721090154@twistedmatrix.com

Bug summary
______________________
Summary for 2007-07-22 through 2007-07-29
Bugs opened: 11    Bugs closed: 9  Total open bugs: 997 (+2)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +3  |Highest:  -4          |Conch:  +1             
|Enhancement:  +4  |Normal:   +5          |Core:   -4             
|Task:         -5  |Low:      +1          |Lore:   +1             
                                          |Mail:   -1             
                                          |Names:  +0             
                                          |Trial:  +2             
                                          |Web:    +2             
                                          |Words:  +1             


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2749] Add a utility method to trial to check the type of an object (opened by therve)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2749

                    ===== Normal =====
[#2747] Make Lore use filepath (opened by gpaci)
    enhancement     lore       http://twistedmatrix.com/trac/ticket/2747

[#2748] Update development/policy test-standard docs (opened by gpaci)
    defect          trial      http://twistedmatrix.com/trac/ticket/2748

[#2750] HEAD requests support for twisted.web.client (opened by synapsis)
    enhancement     web        http://twistedmatrix.com/trac/ticket/2750

[#2751] "gethostbyname.py www.icq.com" returns "DNS lookup failed" (opened by mc) (CLOSED, invalid)
    defect          names      http://twistedmatrix.com/trac/ticket/2751

[#2752] t.w.http.Request docstrings (opened by rikyu) (CLOSED, fixed)
    enhancement     web        http://twistedmatrix.com/trac/ticket/2752

[#2753] twisted.web WSGI support (opened by rikyu)
    enhancement     web        http://twistedmatrix.com/trac/ticket/2753

[#2754] ssh execCommand: closing the connection throws an error (opened by smurfixx)
    defect          conch      http://twistedmatrix.com/trac/ticket/2754

[#2755] Allow a Deferred to be passed to callback() (opened by smurfixx) (CLOSED, wontfix)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2755

[#2756] digest_uri in sasl_mechanism.py should be encoded (opened by sciasbat)
    defect          words      http://twistedmatrix.com/trac/ticket/2756

                    ===== Low =====
[#2757] give TrafficLoggingFactory a public API to reset its counter (opened by exarkun)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2757



Closed Bugs
______________________
                    ===== Highest =====
[#2743] twisted/test/test_ssl.py shouldn't use setUpClass and tearDownClass (opened by exarkun, closed by exarkun, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/2743

[#2744] twisted/test/test_pb.py should use setUp instead of setUpClass and not have any tear down (opened by exarkun, closed by exarkun, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/2744

[#2745] twisted/test/test_newcred.py should use setUp and tearDown instead of setUpClass and tearDownClass (opened by exarkun, closed by exarkun, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/2745

[#2746] twisted/mail/test/test_mail.py should use setUp and tearDown instead of setUpClass and tearDownClass (opened by exarkun, closed by exarkun, fixed)
    task            mail       http://twistedmatrix.com/trac/ticket/2746

[#2742] twisted/test/test_policies.py should use setUp and tearDown instead of setUpClass and tearDownClass (opened by exarkun, closed by exarkun, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/2742

                    ===== Normal =====
[#2751] "gethostbyname.py www.icq.com" returns "DNS lookup failed" (opened by mc, closed by mc, invalid)
    defect          names      http://twistedmatrix.com/trac/ticket/2751

[#1171] twistd has no way to gracefully stop the initialization of an application instance if some conditions are not met (opened by Biappi, closed by glyph, invalid)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1171

[#2752] t.w.http.Request docstrings (opened by rikyu, closed by therve, fixed)
    enhancement     web        http://twistedmatrix.com/trac/ticket/2752

[#2755] Allow a Deferred to be passed to callback() (opened by smurfixx, closed by therve, wontfix)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2755



Ticket Lifetime Stats
______________________
Oldest open ticket - [#38] Should be a way to create documentation aliases (since 2003-07-12 16:08:03).
Newest open ticket - [#2757] give TrafficLoggingFactory a public API to reset its counter (since 2007-07-28 08:35:32).

Mean open ticket age: 494 days, 19:44:22.394626.
Median: 382 days, 10:25:27.387605.
Standard deviation: 392 days, 21:05:11.606420.
Interquartile range: 473 days, 6:25:54.

Mean time between ticket creation and ticket resolution: 119 days, 15:18:10.661056.
Median: 14 days, 3:38:33.
Standard deviation is 223 days, 7:36:11.456637.
The interquartile range is 123 days, 11:30:35.

Mean time spent in review: 59 days, 23:00:07.364329.
Median: 4 days, 8:59:04.
Standard deviation: 129 days, 11:41:34.595642.
Interquartile range: 27 days, 10:51:04.

Mean number of times a ticket is reviewed: 1.81313131313.
Median: 1
Standard deviation: 1.38914598171.
Interquartile range: 1.


Contributor Stats
______________________
In the last 4 weeks,
    16 unique ticket reporters
    7 unique ticket reviewers
    6 unique ticket resolvers
In the last 24 weeks,
    94 unique ticket reporters
    14 unique ticket reviewers
    18 unique ticket resolvers
In the last 48 weeks,
    162 unique ticket reporters
    20 unique ticket reviewers
    28 unique ticket resolvers




From pbastov at gmail.com  Sun Jul 29 23:28:15 2007
From: pbastov at gmail.com (Pavel Bastov)
Date: Mon, 30 Jul 2007 09:28:15 +0600
Subject: [Twisted-Python] "MySQL has gone away"
In-Reply-To: <46ABBC99.6000301@norsk-esport.no>
References: <eaf39e680707260311y4c901d39u875eedec52080fe@mail.gmail.com>
	<46ABBC99.6000301@norsk-esport.no>
Message-ID: <eaf39e680707292028x59b8e988w8f43e5ce302deb1b@mail.gmail.com>

Hmm,

cp_reconnect seems like the proper solution. Thanks for pointing that out to me.

On 7/29/07, "Einar S. Ids?" <einar.twisted at norsk-esport.no> wrote:
> Have you tried cp_reconnect? It solved the problem for me.
>
> dbPool = adbapi.ConnectionPool('MySQLdb', db='fee', user='fii',
> passwd='foo', host='fum', cp_reconnect=True)
>
> Cheers,
> Einar
>
> Pavel Bastov wrote:
> > Hi all,
> >
> > I'm using MySQL database in my server app. Pretty often after some
> > inactivity I get this message in my logs "MySQL server has gone away".
> > How can I prevent this?
> >
> > TIA
> >
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


-- 
Good luck,

Pavel Bastov
xooChat Evangelist and Team Leader
http://www.xoochat.com/



From daniel at keystonewood.com  Mon Jul 30 10:00:13 2007
From: daniel at keystonewood.com (Daniel Miller)
Date: Mon, 30 Jul 2007 10:00:13 -0400
Subject: [Twisted-Python] Re: Handling PBConnectionLost errors
In-Reply-To: <m2wswl3ykx.fsf@valheru.db3l.homeip.net>
References: <99A576C3-FE5E-4AE3-A48F-1720C9ECA16B@keystonewood.com>
	<E6C8DE88-2B46-42D4-A705-E7D621DD7653@keystonewood.com>
	<m2wswl3ykx.fsf@valheru.db3l.homeip.net>
Message-ID: <6DA04B2A-6D21-44CC-BD8A-07432CAABB99@keystonewood.com>

David,

You have gone above an beyond my expectations to answer my questions.  
Thank you.

On Jul 28, 2007, at 1:07 AM, David Bolen wrote:

> Daniel Miller <daniel at keystonewood.com> writes:
>
>> Is this such a stupid question that it doesn't even warrant a  
>> response?
>>
>> ~ Daniel
>
> I agree with the other comment to the effect that the lack of response
> may be more due to the underlying complexity of the question as to
> lack of interest. ...

It's funny, my question was complex, but it nevertheless contained  
too many assumptions about my application and environment to allow  
you to answer easily. Thanks for taking a stab at it anyway.

> For example, your opening point about:
>
>>>                       (...)                                 It
>>> would be nice to implement a fail-safe(er) way of calling remote
>>> methods that would retry when necessary until the remote method has
>>> been called successfully and the result has been returned.  (...)
>
> has an implicit assumption that the remote method will even continue
> to exist once the disconnect has occurred - something that is by no
> means guaranteed with PB.

I hadn't even thought of that, although now that you point it out  
it's obvious. My (server-side) application is just a singleton facade  
to an accounting system database. I'm posting orders from an order  
entry system to invoices in the accounting system. The server- 
supplied "referenceable" will always be available assuming something  
terrible has not happened to the server (e.g. crashed, hacked or  
physically damaged--none of which are things I'm trying to solve here).

> Perhaps some earlier messages of mine when we had just finished
> putting together the remote wrapping and reconnect support in our
> system.  See my responses to the thread at:
>
> http://twistedmatrix.com/pipermail/twisted-python/2005-July/ 
> 011030.html
>
> and
>
> http://twistedmatrix.com/pipermail/twisted-python/2005-July/ 
> 011046.html

Thanks I'll take a look at them.

> It hits on topics beyond that of just a reliable method call, but the
> second message more specifically talks about the wrapper that
> implements reconnections, and how we dealt with updating references
> post-reconnect.  You can probably see how the design dovetailed with
> our particular server side structure (the registry was persistent as
> were the managers, so they provided the concrete point of
> reattachment).  And the use of the wrappers around references meant we
> could "correct" the wrappers for a new connection without having to
> worry about what parts of the client application may have been holding
> references.  Perhaps it will give you some other ideas in your own
> system.

This sounds good, I think I have a similar enough setup that I will  
be able to at least gain some good ideas.

> For your other points:
>
>>> I have two questions:
>>>
>>> 1. Does something like this already exist?
>
> <snip>
>
> ... I'm not aware of any existing approach that is generally suitable
> for any application.  I rather doubt any single generic approach would
> be possible, since PB provides for many mechanisms of statement
> management and referenceability among servers and clients.

You're probably right, although the problem domain is interesting  
enough to me that I may try to see what I can do if I ever get enough  
time :)

>>> 2. Is this a totally stupid idea? (would it be better to improve
>>> our physical network than to try to band-aid the problem with
>>> something like this?)
>
> It's never a stupid idea to engineer for network interruptions, but
> like everything else a design must weigh benefits against
> cost/development.  With that said, it might not be a bad idea to also
> look into your network.  TCP connections are rather hard to break just
> due to network transmission problems, and all your PB calls are going
> across a single TCP session.  They might be significantly delayed on a
> bad network, but the connection itself shouldn't fail unless something
> more extreme (and unusual) is happening.  Given the level of problems
> you're encountering, I wouldn't be surprised if something else was
> awry.

That's what I thought (the connections shouldn't just be dropping for  
no apparent reason, especially since they are all within the bounds  
of a LAN). I know this is getting off topic, but I thought maybe  
you'd know: collisions on the hub should be handled by TCP, and my  
application should not have to worry about them, correct? Even that  
doesn't answer why there are dropped connections on the switched side  
of the network. Maybe we have some bad wiring? FWIW, I am planning to  
eliminate the hub in lieu of another switch (there are other problems  
as well).

Again, thanks very much for your well-thought-out response.

~ Daniel





From redbaron at hitv.ru  Sun Jul  1 03:45:14 2007
From: redbaron at hitv.ru (Ivanov Maxim)
Date: Sun, 1 Jul 2007 13:45:14 +0400
Subject: [Twisted-Python] Avoid circullair dependencies.
Message-ID: <200707011345.14862.redbaron@hitv.ru>

Some of my logic need protocol to be imoported to be able to send data back.

So when I start app protocol imports my logic (where all data is processed) 
and my logic imports protocol.  Right now I simply pass protocol object as 
argument to constructors, but it seems to be not the best way from my point 
of view. How to solve this problem?



From rampeters at gmail.com  Sun Jul  1 20:18:49 2007
From: rampeters at gmail.com (Ram Peters)
Date: Sun, 1 Jul 2007 22:18:49 -0400
Subject: [Twisted-Python] Open Source Twisted Email Server
In-Reply-To: <20070627121729.4947.52789419.divmod.quotient.4664@ohm>
References: <81b45360706270511v70ee423fj4142585292b81f81@mail.gmail.com>
	<20070627121729.4947.52789419.divmod.quotient.4664@ohm>
Message-ID: <81b45360707011918s2f7408bx99383b5db4dc5b23@mail.gmail.com>

I am looking for something like this:
http://oubiwann.blogspot.com/2006/07/twisted-mail-server.html



On 27/06/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Wed, 27 Jun 2007 08:11:04 -0400, Ram Peters <rampeters at gmail.com> wrote:
> >Is there a Open Source Twisted Email Server that have been implemented?
>
> There are several, including one in Twisted itself.  Whether any of them are
> appropriate for any particular purpose may be up for discussion (a good
> beginning to which might be specifying what particular purpose you have in
> mind ;).
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From markus at bluegap.ch  Mon Jul  2 03:04:56 2007
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Mon, 02 Jul 2007 11:04:56 +0200
Subject: [Twisted-Python] profiling twisted
In-Reply-To: <20070627163212.8429.1578659222.divmod.xquotient.137@joule.divmod.com>
References: <46825C37.7060100@bluegap.ch>
	<468264E0.3030507@vrplumber.com>	<468274E7.4070301@bluegap.ch>
	<20070627163212.8429.1578659222.divmod.xquotient.137@joule.divmod.com>
Message-ID: <4688BFB8.2040205@bluegap.ch>

Hi,

glyph at divmod.com wrote:
> What is 'real load'?  Are you talking about things in process with, but 
> not related to, the web server?

I should have been more specific, but OTOH, it really didn't matter. 
Anyway: what I meant was: 1 concurrent request => very small load, 8 
concurrent requests => real load.

> Maybe your server is slow? :)

;-)  Probably not that slow...

>> Can I somehow get the reactor's state, i.e. how many deferreds are 
>> waiting in the queue, how many threads are running concurrently, etc?
> 
> There is no queue of Deferreds.  They don't actually have anything to do 
> with the reactor.

Hm.. good to know.

>> How good is the idea of deferring File I/O to threads, i.e. 
>> threads.deferToThread(self.filehandle.write, data)?
> 
> If you do indeed discover that you are waiting a long time to write your 
> particular stuff to files, then that might help.  It might also randomly 
> interleave the data and corrupt your files, if 'data' is big enough.

Uh.. I'm taking care, that only one thread writes to a file at any time.

>> Another possibly blocking module might be the database api, but I'm 
>> using twisted's enterprise adbapi, which should be async, AFAICT.
> 
> It does the operations in threads, yes.  However, the threadpool will 
> eventually fill up; the concurrency is fairly limited.  (The default is 
> 10 or so workers, I think).

Yeah, I've enlarged that to 50 threads, which should be enough.

>> Maybe copying data around takes time. I'm sending around chunks of 64k 
>> size (streaming from the database to an external programm). Reducing 
>> chunk size to 1k helps somewhat (i.e. response time is seldom over 
>> 150ms, but can still climb up to > 0.5 seconds).
> 
> That's a possibility that the "--profile" option to twistd which JP 
> suggested might help you with.  You'll see the functions copying data 
> taking a lot of CPU time in that case.

Didn't help me much, this time...

>> Hum... external program.... maybe it's the self.transport.write() call 
>> which blocks several 100ms? Is it safe to write:
>>
>>   d = threads.deferToThread(self.transport.write, dataChunk)
>>
>> (i.e. call transport.write from a thread?)
> 
> No.  _All_ Twisted APIs are not thread safe.  This call does not block 
> though, and it is extremely, vanishingly unlikely that it is causing 
> your problems.  It just sticks some data into the outgoing queue and 
> returns immediately.

Okay, I've removed that deferToThread(). Didn't solve my problem anyway.

> One quick measurement you can do to determine what might be causing this 
> performance loss is to examine the server in 'top' while it is allegedly 
> under load.  Is it taking up 100% CPU?  If not, then it's probably 
> blocked on some kind of I/O in your application, or perhaps writing the 
> log.  If so, then there's some inefficient application code (or Twisted 
> code) that you need to profile and optimize.  The output of "strace -T" 
> on your Twisted server *might* be useful if you discover that you're 
> blocking on some kind of I/O.

Yup, I did that, but it's hard to tell what's wrong from these things.


Anyway, with very simple timing measures within the twisted server 
itself, I've figured out what was causing the delays: 
reactor.spawnProcess() takes more than a second.  I knew that fork() was 
expensive, but that expensive?


What I'm doing now feels very dirty: I'm calling reactor.spawnProcess() 
from a thread. (Yes, I'm taking care that only one thread can spawn a 
process at any time.) At least on my Linux Dev-Box, that seems to work - 
and resolves my issue. But... calling fork() from a thread???


Are there other ways to start and control external processes? Preferably 
even compatible to Windoze?


Thanks to everybody for your help...


Regards

Markus




From markus at bluegap.ch  Mon Jul  2 03:06:09 2007
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Mon, 02 Jul 2007 11:06:09 +0200
Subject: [Twisted-Python] profiling twisted
In-Reply-To: <200706271904.18667.maarten@treewalker.org>
References: <46825C37.7060100@bluegap.ch>
	<200706271904.18667.maarten@treewalker.org>
Message-ID: <4688C001.3090003@bluegap.ch>

Hi,

Maarten ter Huurne wrote:
> Does your server process use a lot of memory?

Thanks, but no, that's certainly not the problem here. 
reactor.spawnProcess() was it. See my other mail.

Regards

Markus




From exarkun at divmod.com  Mon Jul  2 05:14:48 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 2 Jul 2007 07:14:48 -0400
Subject: [Twisted-Python] profiling twisted
In-Reply-To: <4688BFB8.2040205@bluegap.ch>
Message-ID: <20070702111448.4947.1947110928.divmod.quotient.5864@ohm>

On Mon, 02 Jul 2007 11:04:56 +0200, Markus Schiltknecht <markus at bluegap.ch> wrote:
> [snip]
>Anyway, with very simple timing measures within the twisted server itself, 
>I've figured out what was causing the delays: reactor.spawnProcess() takes 
>more than a second.  I knew that fork() was expensive, but that expensive?

This isn't normal.

>
>What I'm doing now feels very dirty: I'm calling reactor.spawnProcess() from 
>a thread. (Yes, I'm taking care that only one thread can spawn a process at 
>any time.) At least on my Linux Dev-Box, that seems to work - and resolves 
>my issue. But... calling fork() from a thread???
>

Er.  That's not supported.  The only Twisted API you can call from a thread
is reactor.callFromThread.

Jean-Paul



From programmer.py at gmail.com  Mon Jul  2 10:49:50 2007
From: programmer.py at gmail.com (Jaime Wyant)
Date: Mon, 2 Jul 2007 11:49:50 -0500
Subject: [Twisted-Python] Avoid circullair dependencies.
In-Reply-To: <200707011345.14862.redbaron@hitv.ru>
References: <200707011345.14862.redbaron@hitv.ru>
Message-ID: <d52c72d20707020949x45bd88eby8d0d92bb157e50d4@mail.gmail.com>

Sounds like you could use a lazy import.  I do something similar to this in
my factory:

# protocol.py
class MyProtocol(XmlStream):
    ....

class MyFactory:
    def buildProtocol(self, addr):
        myProtocol = MyProtocol()

        # heres the lazy import
        from othermodule import SomeKlass
        SomeKlass(myProtocol)

My `othermodule' imports some constants from `protocol' (module defined
above).  So, to kill the circular references, I do a lazy import in
MyFactory.

HTH!
jw

On 7/1/07, Ivanov Maxim <redbaron at hitv.ru> wrote:
>
> Some of my logic need protocol to be imoported to be able to send data
> back.
>
> So when I start app protocol imports my logic (where all data is
> processed)
> and my logic imports protocol.  Right now I simply pass protocol object as
> argument to constructors, but it seems to be not the best way from my
> point
> of view. How to solve this problem?
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
"Government does not solve problems; it subsidizes them."
Ronald Reagan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070702/b8fa36b4/attachment.html>

From glyph at divmod.com  Mon Jul  2 10:52:44 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 02 Jul 2007 16:52:44 -0000
Subject: [Twisted-Python] profiling twisted
In-Reply-To: <20070702111448.4947.1947110928.divmod.quotient.5864@ohm>
References: <4688BFB8.2040205@bluegap.ch>
	<20070702111448.4947.1947110928.divmod.quotient.5864@ohm>
Message-ID: <20070702165244.8429.620780225.divmod.xquotient.546@joule.divmod.com>

On 11:14 am, exarkun at divmod.com wrote:
>On Mon, 02 Jul 2007 11:04:56 +0200, Markus Schiltknecht 
><markus at bluegap.ch> wrote:
>>[snip]
>>Anyway, with very simple timing measures within the twisted server 
>>itself, I've figured out what was causing the delays: 
>>reactor.spawnProcess() takes more than a second.  I knew that fork() 
>>was expensive, but that expensive?
>
>This isn't normal.

Markus, can you instrument spawnProcess and figure out which *part* of 
it is taking so long?  Like exarkun says: this is not normal.  (I wonder 
if we are unwittingly calling some blocking API in there?  I don't think 
so, but...)
>>What I'm doing now feels very dirty: I'm calling 
>>reactor.spawnProcess() from a thread. (Yes, I'm taking care that only 
>>one thread can spawn a process at any time.) At least on my Linux Dev- 
>>Box, that seems to work - and resolves my issue. But... calling fork() 
>>from a thread???
>
>Er.  That's not supported.  The only Twisted API you can call from a 
>thread
>is reactor.callFromThread.

In other words, this may appear to work, but if you suddenly burst into 
flame unexpectedly, don't blame *us*.  And you probably will, 
eventually, if you keep doing that.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070702/d5062185/attachment.html>

From corydodt+twisted_spams at gmail.com  Mon Jul  2 17:12:01 2007
From: corydodt+twisted_spams at gmail.com (Cory Dodt)
Date: Mon, 2 Jul 2007 16:12:01 -0700
Subject: [Twisted-Python] Flash AMF and Twisted
In-Reply-To: <BD75E5F9-66F3-4B3F-ADC4-36642E57C692@2xlp.com>
References: <A3F520F1-B083-4DA9-A581-2234752CFE44@collab.nl>
	<20070618022344.4947.170473162.divmod.quotient.2321@ohm>
	<20070618170534.31981.1808740575.divmod.xquotient.17@joule.divmod.com>
	<BD75E5F9-66F3-4B3F-ADC4-36642E57C692@2xlp.com>
Message-ID: <c16a94ff0707021612gfe5c436w79760beb63872a21@mail.gmail.com>

+1 for the logos!

-1 for suggested prefix, especially if it's "Twi" - this renders virtually
any project name unpronounceable. ;-)

Anyway, the Twisted coding guidelines are largely about creative,
unambiguous naming.  I for one find "py-" names obnoxious, especially since
they actually *increase* the chance of a google namespace collision.  (What
would you name your twisted-based IRC bot?  twibot?  Too bad three other
people did that.)

_____________________

*Cory Dodt*
basileus augustus codesaurus

decipher
5250 n palm ave, ste 220
fresno, ca  93704

t: +1 559 256 0463
f: +1 559 436 6944

www.decipherinc.com <http://decipherinc.com/>


On 6/30/07, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:
>
>
> On Jun 18, 2007, at 1:05 PM, glyph at divmod.com wrote:
>
> > Thanks, too, for changing this so readily :).
> >
> > It makes me think, though, that maybe we should have a suggested
> > prefix for things-which-use-Twisted, since "py" is a little
> > confusing there.  Python has PyXXX, maybe Twisted should have
> > TwiXXX or similar?
>
> Personally speaking ,  It would be nice if Twisted
>         a) had a suggested prefix
>         b) had 2 logos put into the public domain
>                 i. a form of the logo for people who want to show support
> on their
> sites that run twisted
>                 ii. a "powerd by" logo for applicaitons built on twisted.
>
> This would be similar to what Mozilla did with the firefox logos.
>
>
>
> // Jonathan Vanasco
>
> | - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> - - - - - - - - - - - - - - - - - - -
> |   CEO/Founder SyndiClick Networks
> | - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> - - - - - - - - - - - - - - - - - - -
> |     Founder/CTO/CVO
> |      FindMeOn.com - The cure for Multiple Web Personality Disorder
> |      Web Identity Management and 3D Social Networking
> | - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> - - - - - - - - - - - - - - - - - - -
> |      RoadSound.com - Tools For Bands, Stuff For Fans
> |      Collaborative Online Management And Syndication Tools
> | - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> - - - - - - - - - - - - - - - - - - -
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070702/e97a16be/attachment.html>

From marco.giusti at gmail.com  Mon Jul  2 17:40:01 2007
From: marco.giusti at gmail.com (Marco Giusti)
Date: Tue, 3 Jul 2007 01:40:01 +0200
Subject: [Twisted-Python] Flash AMF and Twisted
In-Reply-To: <c16a94ff0707021612gfe5c436w79760beb63872a21@mail.gmail.com>
References: <A3F520F1-B083-4DA9-A581-2234752CFE44@collab.nl>
	<20070618022344.4947.170473162.divmod.quotient.2321@ohm>
	<20070618170534.31981.1808740575.divmod.xquotient.17@joule.divmod.com>
	<BD75E5F9-66F3-4B3F-ADC4-36642E57C692@2xlp.com>
	<c16a94ff0707021612gfe5c436w79760beb63872a21@mail.gmail.com>
Message-ID: <20070702234001.GA13330@localhost>

On Mon, Jul 02, 2007 at 04:12:01PM -0700, Cory Dodt wrote:
>Anyway, the Twisted coding guidelines are largely about creative, unambiguous
>naming.  I for one find "py-" names obnoxious, especially since they actually
>*increase* the chance of a google namespace collision.  (What would you name
>your twisted-based IRC bot?  twibot?  Too bad three other people did that.)

bezalel :)

[ot] i'm going to publish the code, but it's just project for fun and to
learn twisted
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: Digital signature
URL: </pipermail/twisted-python/attachments/20070703/06950951/attachment.sig>

From maarten at treewalker.org  Mon Jul  2 18:41:27 2007
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Tue, 3 Jul 2007 02:41:27 +0200
Subject: [Twisted-Python] Flash AMF and Twisted
In-Reply-To: <c16a94ff0707021612gfe5c436w79760beb63872a21@mail.gmail.com>
References: <A3F520F1-B083-4DA9-A581-2234752CFE44@collab.nl>
	<BD75E5F9-66F3-4B3F-ADC4-36642E57C692@2xlp.com>
	<c16a94ff0707021612gfe5c436w79760beb63872a21@mail.gmail.com>
Message-ID: <200707030241.33746.maarten@treewalker.org>

On Tuesday 03 July 2007, Cory Dodt wrote:

> -1 for suggested prefix, especially if it's "Twi" - this renders virtually
> any project name unpronounceable. ;-)

Is there really a need for a prefix?

In case of the "py" prefix, it seems packages can be divided into two 
categories:
1. applications that happen to be implemented in Python
2. things Python developers can use, such as Python bindings for an existing 
C/C++ library

In my opinion, category 1 is just developers who can't think of a good name. 
For the end user the implementation language is mostly irrelevant, so 
the "py" prefix does not really add information, it just turns a word into a 
name. I know it's hard to find a good name for a project, but should they be 
offered an excuse to give up trying?

For category 2, maybe a prefix is useful, for example for wrapping a library 
so it uses Deferreds, or for integrating event loops. Are there many projects 
like this? The only one I know of is sAsync. Projects like Nevow that are not 
a layer around something existing would not really benefit from a prefix, I 
think, since they would still need a name to apply the prefix to.


One possible approach for a package-for-Twisted naming convention would be to 
use "-ed" as a postfix. Most base names will likely be nouns, but those can 
be verbed for extra silliness. For example the IRC bot would be 
named "Botted".

Having a convention like that acts as an extra incentive to a developer to 
come up with an original name that does not use the conventional postfix. ;)

Bye,
		Maarten
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part.
URL: </pipermail/twisted-python/attachments/20070703/52f58bbe/attachment.sig>

From steven.zdwang at gmail.com  Mon Jul  2 19:40:03 2007
From: steven.zdwang at gmail.com (steven wang)
Date: Tue, 3 Jul 2007 09:40:03 +0800
Subject: [Twisted-Python] How to receive a big stream data?
In-Reply-To: <5c6c8710706270221u4f7571dbq511d9fe1ef746da8@mail.gmail.com>
References: <5c6c8710706261902u347d25e0lc7375d23ef760dd5@mail.gmail.com>
	<28012bc60706270121k2bae8c8ey60f591e003cf8006@mail.gmail.com>
	<5c6c8710706270221u4f7571dbq511d9fe1ef746da8@mail.gmail.com>
Message-ID: <5c6c8710707021840s522c5d10n657335582fd189@mail.gmail.com>

========================================================
from twisted.internet import protocol, reactor, defer, interfaces

class MyProtocol(protocol.Protocol):
    is_big_data = False
    big_data = ''
    big_data_size = 0

    def connectionMade(self):
        self.big_data = ''
        self.big_data_size = 0
        self.is_big_data = False
        pass

    def dataReceived(self, data):
        if check_head_ok(data):
            # To receive the big size data
            if self.is_big_data:
                return

        # The big data will overflow the Twisted receive buffer size, so
loop to receive data
        if self.is_big_size_data:
            self.big_data += data

        if self.big_data_size == len(big_data):
            # To save data to database
            pass

    def connectionLost(self, reason):
        self.big_data = ''
        self.big_data_size = 0
        self.is_big_data = False
        pass

    def check_head_ok(self, data):
        if data.startswith('ABC'):
            values = data.split(',')
            self.big_data_size = int(values[1])
            self.is_big_data = self.big_data_size > 0
            return True
        else:
            return False
================================================================

I rewrite my source about MyProtocol. But I can not receive complete data,
only a part of data. :( Could you help me?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070703/90e7dc25/attachment.html>

From paul at paulperez.net  Mon Jul  2 20:16:54 2007
From: paul at paulperez.net (Paul Perez)
Date: Mon, 2 Jul 2007 19:16:54 -0700
Subject: [Twisted-Python] twisted.web2 server timeout?
Message-ID: <82767f010707021916y3d07f796v993dd30da9d219f5@mail.gmail.com>

 I have a newbie question. By the way, even though it is a brain-f**k, I
love programming in this software. I just wish there was an easier/faster
way to understand it. I got and read the twisted book, but unfortunately it
does not have twisted web2 examples...

Anyway, I have written a web server using web2 that takes an HTTP request
and sends it off to another server to process it. If the other server were
to crash, how can I make the http request timeout after 30 seconds and
redirect to a timeout page?

Following is my resource code. When the response is available, I take the
response stream, write to it, and call finish().

class HTTPServer(resource.PostableResource):

    def __init__(self, cache):
        resource.Resource.__init__(self)
        self.cache = cache

    def _finished(self, result, httprequest, postdata):
        convq = self.cache['conversations']
        s=stream.ProducerStream()
        self.cache['requests'][id(httprequest)] = (httprequest,postdata,s)
        if httprequest.args.has_key(CONVID):
            conversationid = httprequest.args[CONVID][0]
            try:
                convq[conversationid].put(httprequest)
            except:
                convq[conversationid] = Queue.Queue()
                convq[conversationid].put(httprequest)
        else:
            convq[ANY].put(httprequest)
        if log:
            method       = httprequest.method
            raw_uri      = urllib.unquote(httprequest.uri)
            print "%-4s" % method,
            print "%-6s" % 'CLIENT',
            print "%-4s" % raw_uri

        return http.Response(stream=s)

    def _failed(self, reason, httprequest, postdata):
        result = str(reason)
        result += str(httprequest.uri) + '\n'
        result += '\n'.join(postdata) + '\n'
        return http.Response(500, stream="An internal server error has
occurred.")

    def http_POST(self, httprequest):
        postdata = []
        d = stream.readStream(httprequest.stream, postdata.append)
        d.addCallbacks(
            self._finished,
            self._failed,
            callbackArgs=(httprequest, postdata,),
            errbackArgs=(httprequest, postdata,)
        )

        # Catch any errors that occur in self._finished.
        d.addErrback(self._failed, httprequest, postdata)

        return d

    http_PUT = http_POST
    http_GET = http_POST



~Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070702/207ba243/attachment.html>

From edgardo.delgado at navy.mil  Tue Jul  3 06:08:03 2007
From: edgardo.delgado at navy.mil (Delgado, Edgardo  CIV NAVAIR 4.1.4.3)
Date: Tue, 3 Jul 2007 08:08:03 -0400
Subject: [Twisted-Python] Forwarding Help
Message-ID: <0C8FBA9C0F70E1479497B4DD7ED59223515FF7@naeapaxrez05.nadsusea.nads.navy.mil>

Greetings,

Sorry to bug with this again!. I have already posted this issue, but I
haven't received any ideas on how to solve this. So, I'm going to try
again.

I need help(ideas) on how to write a "server" that listens on one port
and forward the info to one or more ports. I.e. "server" will listen on
port XXXX and forward that information to ports xxAA, xxBB and xxCC.
Can't use UDP, because it need data integrity.

Thanks for all of your help!,

Edgar



From exarkun at divmod.com  Tue Jul  3 06:57:23 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 3 Jul 2007 08:57:23 -0400
Subject: [Twisted-Python] Forwarding Help
In-Reply-To: <0C8FBA9C0F70E1479497B4DD7ED59223515FF7@naeapaxrez05.nadsusea.nads.navy.mil>
Message-ID: <20070703125723.4947.601918608.divmod.quotient.6396@ohm>

On Tue, 3 Jul 2007 08:08:03 -0400, "Delgado, Edgardo CIV NAVAIR 4.1.4.3" <edgardo.delgado at navy.mil> wrote:
>Greetings,
>
>Sorry to bug with this again!. I have already posted this issue, but I
>haven't received any ideas on how to solve this. So, I'm going to try
>again.
>
>I need help(ideas) on how to write a "server" that listens on one port
>and forward the info to one or more ports. I.e. "server" will listen on
>port XXXX and forward that information to ports xxAA, xxBB and xxCC.
>Can't use UDP, because it need data integrity.
>
>Thanks for all of your help!,

http://twistedmatrix.com/projects/core/documentation/examples/chatserver.py
demonstrates how you might pass data from one connection to multiple other
connections.  It works as a server only, accepting incoming connections,
rather than establishing outgoing connections, but the idea is the same.

Jean-Paul



From conghh at Cybersoft-VN.com  Tue Jul  3 21:25:26 2007
From: conghh at Cybersoft-VN.com (Cong Hoang Huu)
Date: Wed, 4 Jul 2007 10:25:26 +0700
Subject: [Twisted-Python] Develop application by Twisted.
Message-ID: <CEBA5E865263FA4D8848D53D92E6A9AE1EB160@DAKLAK.cybersoft-vn.com>

Hi.

 

If our company develops an application by Twisted and distributes (or
sell) only binary packages to customer (without source code), is that
ok? Do we have to transfer source code to customer also?

 

Thanks,

Cong Hoang

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070704/9ec7ad1a/attachment.html>

From andrew-twisted at puzzling.org  Tue Jul  3 23:46:09 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 4 Jul 2007 15:46:09 +1000
Subject: [Twisted-Python] Develop application by Twisted.
In-Reply-To: <CEBA5E865263FA4D8848D53D92E6A9AE1EB160@DAKLAK.cybersoft-vn.com>
References: <CEBA5E865263FA4D8848D53D92E6A9AE1EB160@DAKLAK.cybersoft-vn.com>
Message-ID: <20070704054609.GN9243@steerpike.home.puzzling.org>

Cong Hoang Huu wrote:
> Hi.
> 
> If our company develops an application by Twisted and distributes (or sell)
> only binary packages to customer (without source code), is that ok? Do we have
> to transfer source code to customer also?

The current version of Twisted is distributed under what is known as the "MIT
license", as you can see for yourself by looking at the contents of the source
code package you have downloaded (see the LICENSE file, which every source code
file refers to).

The MIT license is short and simple, and I recommend you read it for yourself.
There is no clause in the license that requires you to distribute the Twisted
source code at any time for any reason.  So the answer to your question is "no",
but be sure to read the license so that you abide by the conditions it places on
your right to redistribute the software.

I would explain it in this email, but honestly the license is shorter than the
explanation I would write, so I think you'd be better off just reading that.

http://twistedmatrix.com/trac/browser/trunk/LICENSE

-Andrew.




From waterbug at pangalactic.us  Wed Jul  4 03:29:44 2007
From: waterbug at pangalactic.us (Stephen Waterbury)
Date: Wed, 04 Jul 2007 05:29:44 -0400
Subject: [Twisted-Python] schemas (in Zope and Foolscap)
Message-ID: <468B6888.9090802@pangalactic.us>

Hi Brian,

I am in the process of converting some of my code to use zope.schema
instead of a similar thing that I independently invented.  Since I am
also planning on using Foolscap, and since Foolscap has a schema
module, I compared zope.schema and foolscap.schema, and to me they
seem to have much overlap in design intent.  In particular, in the
zope.schema use cases ...

http://wiki.zope.org/zope3/Zope3SchemasUseCases

... one of the cases cited is:

     Method uses schema for its arguments

     A more general case than above, any method can provide a schema to
     which its arguments should conform. This schema can be used to
     create a form or to validate arguments upon any call.

... which seems almost exactly the foolscap.schema use case.  Moreover,
zope.schema has "constraints" that are similar in concept to the ones
in foolscap.schema.

So I was wondering -- would it make sense to use zope.schema
in Foolscap?  I plan to use them in my code, so from my own selfish
point of view that would be nice because it would unify everything
relating to the schema concept, and I wouldn't have to have separate
usages and imports of zope.schema and foolscap.schema.

Although "There should be one -- and preferably only one -- obvious
way to do it" doesn't necessarily -- or even that often -- apply to
libraries, this might be a good case for applying it, for reasons
somewhat similar those underlying twisted's adoption of
zope.interface.

A nice practical factor is that zope.schema has been packaged as
a separate namespace module, similarly to zope.interface.

I'd be interested to know your thoughts.

Cheers,
Steve




From markus at bluegap.ch  Wed Jul  4 07:56:15 2007
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Wed, 04 Jul 2007 15:56:15 +0200
Subject: [Twisted-Python] profiling twisted
In-Reply-To: <20070702165244.8429.620780225.divmod.xquotient.546@joule.divmod.com>
References: <4688BFB8.2040205@bluegap.ch>	<20070702111448.4947.1947110928.divmod.quotient.5864@ohm>
	<20070702165244.8429.620780225.divmod.xquotient.546@joule.divmod.com>
Message-ID: <468BA6FF.8060807@bluegap.ch>

Hi,

glyph at divmod.com wrote:
> Markus, can you instrument spawnProcess and figure out which *part* of 
> it is taking so long?

I give it a try. Especially, because I need to fiddle with 
process.Process anyway, see the mail I'm going to send in a minute or two...

> Like exarkun says: this is not normal.  (I wonder 
> if we are unwittingly calling some blocking API in there?  I don't think 
> so, but...)

I'll try to do some more benchmarking.

> In other words, this may appear to work, but if you suddenly burst into 
> flame unexpectedly, don't blame *us*.  And you probably will, 
> eventually, if you keep doing that.

Yup, I'm aware of that. It's what I meant when calling it ugly or dirty 
or whatever I said.


Regards

Markus



From markus at bluegap.ch  Wed Jul  4 08:13:14 2007
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Wed, 04 Jul 2007 16:13:14 +0200
Subject: [Twisted-Python] More general process.Process class
Message-ID: <468BAAFA.2090005@bluegap.ch>

Hi,

I'm currently fiddling with spawnProcess() and such, trying to stream 
it's output to somewhere else. In a first attempt, I've tried to cache 
the data in the ProcessProtocol's outReceived() call.

Then, I've realized, that twisted already has quite nice abstractions of 
Producers and Consumers. I would like to use them, as they seem to fit 
nicely.

And in my case, it would even make much sense to *not* read all the data 
from the process, but leave it there, waiting on the file descriptor, 
until I'm ready to process the data.

Unfortunately, AFAICT the producers attached to the process - namely the 
ProcessReader() instances created by process.Process - are hard wired to 
the ProcessProtocol's dataReceived() method. While I would like to use 
these producers directly, instead of providing such a ProcessProtocol.

I'm thinking about ripping out the protocol handling from the 
process.Process class. Instead let process.Process return a list of 
producers and consumers in self.pipes, as requested. Then let another 
wrapper class bridge between those and the ProcessProtocol.

Comments?

Regards

Markus




From exarkun at divmod.com  Wed Jul  4 08:21:28 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 4 Jul 2007 10:21:28 -0400
Subject: [Twisted-Python] More general process.Process class
In-Reply-To: <468BAAFA.2090005@bluegap.ch>
Message-ID: <20070704142128.4947.737947755.divmod.quotient.6885@ohm>

On Wed, 04 Jul 2007 16:13:14 +0200, Markus Schiltknecht <markus at bluegap.ch> wrote:
>Hi,
>
>I'm currently fiddling with spawnProcess() and such, trying to stream it's 
>output to somewhere else. In a first attempt, I've tried to cache the data 
>in the ProcessProtocol's outReceived() call.
>
>Then, I've realized, that twisted already has quite nice abstractions of 
>Producers and Consumers. I would like to use them, as they seem to fit 
>nicely.
>
>And in my case, it would even make much sense to *not* read all the data 
>from the process, but leave it there, waiting on the file descriptor, until 
>I'm ready to process the data.
>
>Unfortunately, AFAICT the producers attached to the process - namely the 
>ProcessReader() instances created by process.Process - are hard wired to the 
>ProcessProtocol's dataReceived() method. While I would like to use these 
>producers directly, instead of providing such a ProcessProtocol.
>
>I'm thinking about ripping out the protocol handling from the 
>process.Process class. Instead let process.Process return a list of 
>producers and consumers in self.pipes, as requested. Then let another 
>wrapper class bridge between those and the ProcessProtocol.
>
>Comments?

Do you need more granularity than Process.pauseProducing/resumeProducing
provide?

Aside from that, purely as a point of procedure, any changes you make to
Process at the moment are likely to conflict with a development branch
which is currently outstanding.  You might want to look at that or help
get it merged before starting on any changes of your own.

Jean-Paul



From markus at bluegap.ch  Wed Jul  4 08:42:50 2007
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Wed, 04 Jul 2007 16:42:50 +0200
Subject: [Twisted-Python] More general process.Process class
In-Reply-To: <20070704142128.4947.737947755.divmod.quotient.6885@ohm>
References: <20070704142128.4947.737947755.divmod.quotient.6885@ohm>
Message-ID: <468BB1EA.8000606@bluegap.ch>

Hi,

Jean-Paul Calderone wrote:
> Do you need more granularity than Process.pauseProducing/resumeProducing
> provide?

Hm.. you're right, those could probably do the trick.

> Aside from that, purely as a point of procedure, any changes you make to
> Process at the moment are likely to conflict with a development branch
> which is currently outstanding.

Uh... there are 153 branches in the repository... which one are you 
talking about?

> You might want to look at that or help
> get it merged before starting on any changes of your own.

Sure, thanks!

Markus



From exarkun at divmod.com  Wed Jul  4 09:40:57 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 4 Jul 2007 11:40:57 -0400
Subject: [Twisted-Python] More general process.Process class
In-Reply-To: <468BB1EA.8000606@bluegap.ch>
Message-ID: <20070704154057.4947.1678717666.divmod.quotient.6915@ohm>

On Wed, 04 Jul 2007 16:42:50 +0200, Markus Schiltknecht <markus at bluegap.ch> wrote:
>Hi,
>
>Jean-Paul Calderone wrote:
>>Do you need more granularity than Process.pauseProducing/resumeProducing
>>provide?
>
>Hm.. you're right, those could probably do the trick.
>>Aside from that, purely as a point of procedure, any changes you make to
>>Process at the moment are likely to conflict with a development branch
>>which is currently outstanding.
>
>Uh... there are 153 branches in the repository... which one are you talking 
>about?

http://twistedmatrix.com/trac/ticket/2341 / /branches/merge-process-and-ptyprocess-2341-2

>>You might want to look at that or help
>>get it merged before starting on any changes of your own.
>
>Sure, thanks!
>
>Markus
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From markus at bluegap.ch  Wed Jul  4 10:13:05 2007
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Wed, 04 Jul 2007 18:13:05 +0200
Subject: [Twisted-Python] producer / consumer question
Message-ID: <468BC711.8060503@bluegap.ch>

Hi,

I have yet another question...  a producer has to learn about it's 
consumer somehow, otherwise it would not know where to write it's data to.

But the proposed interface is exactly vice versa: the IConsumer 
interface has a registerProducer() method. Now, that would be fine, if 
that did all the setup between a producer and a consumer. But AFACIS in 
the twisted code, registerProducer() does not link itself with the 
producer. Instead, the producers I've inspected (i.e. FileSender) 
require an explicit initialization with a given consumer.

Why is that? What's the best way to associate a producer with a 
consumer? Is something like the following okay:


def associateProducerConsumer(prod, cons):
     prod.consumer = cons
     cons.registerProducer(prod, ISeekableProducer.providedBy(prod))


Regards

Markus



From dialtone at divmod.com  Wed Jul  4 11:15:38 2007
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Wed, 4 Jul 2007 19:15:38 +0200
Subject: [Twisted-Python] producer / consumer question
In-Reply-To: <468BC711.8060503@bluegap.ch>
Message-ID: <20070704171538.4947.1939200472.divmod.quotient.6949@ohm>

On Wed, 04 Jul 2007 18:13:05 +0200, Markus Schiltknecht <markus at bluegap.ch> wrote:
>Hi,
>
>I have yet another question...  a producer has to learn about it's consumer 
>somehow, otherwise it would not know where to write it's data to.
>
>But the proposed interface is exactly vice versa: the IConsumer interface 

>def associateProducerConsumer(prod, cons):
>     prod.consumer = cons
>     cons.registerProducer(prod, ISeekableProducer.providedBy(prod))

This question is also part of what I'm asking for here: 

http://twistedmatrix.com/pipermail/twisted-web/2007-July/003434.html

I'd like some discussion and help and guidance too :).



From glyph at divmod.com  Wed Jul  4 13:01:51 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 04 Jul 2007 19:01:51 -0000
Subject: [Twisted-Python] producer / consumer question
In-Reply-To: <468BC711.8060503@bluegap.ch>
References: <468BC711.8060503@bluegap.ch>
Message-ID: <20070704190151.8429.1750810897.divmod.xquotient.764@joule.divmod.com>

On 04:13 pm, markus at bluegap.ch wrote:
>I have yet another question...  a producer has to learn about it's 
>consumer somehow, otherwise it would not know where to write it's data 
>to.

>Why is that? What's the best way to associate a producer with a 
>consumer? Is something like the following okay:

This is a really deep problem, unfortunately, and Valentino has 
correctly identified that it's the same one I was going to talk about 
when responding to his twisted-web posting :).

Your solution doesn't really solve anything, since neither producers nor 
consumers are documented to have the attributes you are assigning, nor 
do anything with them.

Consumers are documented to have a "write" method, but the documentation 
is misleading.  The most common type of producer - tcp.Connection - does 
not put data into its consumer's "write" method, it calls its protocol's 
dataReceived method.  Many other producers are actually written 
specifically to call higher-level methods on something other than their 
consumer (such as callRemote) rather than "write".

The basic use-case here is that the responsibility for producing bytes 
and the responsibility for throttling data production are usually 
separated in an application.  I agree that this is not really the best 
way to separate them.  The API grew up almost by accident, it wasn't 
really designed intentionally, although it has worked surprisingly well 
considering.

In many cases it does seem that we want a high-level API for setting up 
pipelines of producer-to-consumer-to-producer, or (in the case of web2 
streams) end-to-end producer-producer-producer sequences.  While many of 
these use-cases are superficially similar, my own attempts to resolve 
this shows that there is a surprising diversity of requirements which 
are difficult to resolve simultaneously by "simply fixing" the existing 
consumer / producer mess.

Keep in mind, also, that a great deal of code has been written (and will 
be written before everyone has upgraded to the next version of Twisted) 
that uses the current IConsumer/IProducer APIs, and all of that will 
need to keep working for the forseeable future.

You can find some discussion, as well as our attempts to create 
something better, here:

    http://twistedmatrix.com/trac/ticket/1956

If you have new information, feel free to comment there, but please read 
all the comments and try to understand them first: there has been a 
*lot* of back-and-forth over this issue.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070704/2c651125/attachment.html>

From goofyheadedpunk at gmail.com  Wed Jul  4 18:12:54 2007
From: goofyheadedpunk at gmail.com (Brian L. Troutwine)
Date: Wed, 4 Jul 2007 17:12:54 -0700
Subject: [Twisted-Python] New to twisted,
	need a bit of high-level design help.
Message-ID: <200707041712.54526.goofyheadedpunk@gmail.com>

Hello all,

I'm new to using twisted and am attempting to implement a client and
server for use a distributed computing environment with a centralized
task server. Clients query the task server for a work list, apply a
bunch of transforms to this work list and then return the transformed
work list back to the server. The server, for its part, has to send
out these work lists, keep track of which client is processing what
(for timeout handling) and collate the transformed work lists so that
it can writing the data out to disk in a sorted manner.

I've spent the better part of a week banging out prototypes, reading
the docs and asking questions on IRC (sorry, dear IRC folks, for all
the timeouts), but the things I've built feel clunky. I have primarily
focused my efforts on using t.s.pb and t.p.amp as I control both ends
of the wire. t.p.amp is probably too limited, though, as the values in
packet hashes must be <= 65535 bytes, too small for my purposes unless
I break my loads into peices, which is not an obvious or easy thing to
do given the structure of my computed data.

t.s.pb's documentation seems to concern itself with examples
involiving client requests, server responses and clients working on
the response with no  communication back to the server and, though
it'd be nicer to work with probably, I can't seem to figure out how to
cleanly implement communication back to the server. My prototype
server is relatively clean, supporting a remote_checkin which clients
call with a valid, unique ID to receive data and a remote_checkout,
which clients call with their computed data to register it with the
server. The clients, however, are a mess, mostly because the client
transforms are not simple and might fail in a multitude of ways. (I
really rather need to keep a reference around to the server so I can
arbitrarily push data toward it).

As my attempts to use twisted for this purpose have been frustrated,
due to my inexperience, I'm sure, would it be possible for someone to
explain how I could use twisted in the construction of a distributed
system with a central data collection and collation server? Any
comments are greatly appreciated, from critiques on the  bits of
twisted I've attempted to use to suggestions for new areas to explore
to code samples. (I must apologize that I cannot give any of my
prototype code as I do not own the copyright on it.) I've worked myself
into rather a rut and need help climbing out.

Thanks,
Brian



From markus at bluegap.ch  Thu Jul  5 01:01:00 2007
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Thu, 05 Jul 2007 09:01:00 +0200
Subject: [Twisted-Python] producer / consumer question
In-Reply-To: <20070704190151.8429.1750810897.divmod.xquotient.764@joule.divmod.com>
References: <468BC711.8060503@bluegap.ch>
	<20070704190151.8429.1750810897.divmod.xquotient.764@joule.divmod.com>
Message-ID: <468C972C.6000004@bluegap.ch>

Hi,

glyph at divmod.com wrote:
> Keep in mind, also, that a great deal of code has been written (and will 
> be written before everyone has upgraded to the next version of Twisted) 
> that uses the current IConsumer/IProducer APIs, and all of that will 
> need to keep working for the forseeable future.

Sure. I'm currently in the situation, that I need to write a stream 
server capable of handling various sources (database, files, http, 
etc...) and various formats (images, videos, etc..). And as we've 
already learned, it's well worth thinking about a good abstraction for 
such streaming tasks. The IConsumer/IProducer pair seems to be the right 
thing, but if the API isn't stable (AFAIR semi-stable is stated in the 
documentation)...

> You can find some discussion, as well as our attempts to create 
> something better, here:
> 
>    http://twistedmatrix.com/trac/ticket/1956
> 
> If you have new information, feel free to comment there, but please read 
> all the comments and try to understand them first: there has been a 
> *lot* of back-and-forth over this issue.

Okay, thank you very much for the pointers. I'll investigate further ;-)

Regards

Markus




From exarkun at divmod.com  Thu Jul  5 09:01:52 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 5 Jul 2007 11:01:52 -0400
Subject: [Twisted-Python] producer / consumer question
In-Reply-To: <468C972C.6000004@bluegap.ch>
Message-ID: <20070705150152.4947.907275344.divmod.quotient.7440@ohm>

On Thu, 05 Jul 2007 09:01:00 +0200, Markus Schiltknecht <markus at bluegap.ch> wrote:
>Hi,
>
>glyph at divmod.com wrote:
>>Keep in mind, also, that a great deal of code has been written (and will be 
>>written before everyone has upgraded to the next version of Twisted) that 
>>uses the current IConsumer/IProducer APIs, and all of that will need to 
>>keep working for the forseeable future.
>
>Sure. I'm currently in the situation, that I need to write a stream server 
>capable of handling various sources (database, files, http, etc...) and 
>various formats (images, videos, etc..). And as we've already learned, it's 
>well worth thinking about a good abstraction for such streaming tasks. The 
>IConsumer/IProducer pair seems to be the right thing, but if the API isn't 
>stable (AFAIR semi-stable is stated in the documentation)...

It's stable.  There isn't any documentation that indicates otherwise.

Jean-Paul



From glyph at divmod.com  Thu Jul  5 11:05:48 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 05 Jul 2007 17:05:48 -0000
Subject: [Twisted-Python] producer / consumer question
In-Reply-To: <468C972C.6000004@bluegap.ch>
References: <468BC711.8060503@bluegap.ch>
	<20070704190151.8429.1750810897.divmod.xquotient.764@joule.divmod.com>
	<468C972C.6000004@bluegap.ch>
Message-ID: <20070705170548.8429.1291758453.divmod.xquotient.784@joule.divmod.com>

On 07:01 am, markus at bluegap.ch wrote:
>glyph at divmod.com wrote:
>>Keep in mind, also, that a great deal of code has been written (and 
>>will be written before everyone has upgraded to the next version of 
>>Twisted) that uses the current IConsumer/IProducer APIs, and all of 
>>that will need to keep working for the forseeable future.

>Sure. I'm currently in the situation, (...) but if the API isn't stable 
>(AFAIR semi-stable is stated in the documentation)...

The API is stable.  There are plans for a better API that offers more 
functionality, but we don't even know what that looks like yet.  It may 
well be that the old API will live on side-by-side, and the new API will 
just expose new features.  In any event, no deprecation warnings are 
coming in this code for a long time.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070705/6c9011ed/attachment.html>

From general at eepatents.com  Thu Jul  5 14:03:43 2007
From: general at eepatents.com (Ed Suominen)
Date: Thu, 05 Jul 2007 13:03:43 -0700
Subject: [Twisted-Python] New to twisted, need a bit of high-level design
	help.
In-Reply-To: <200707041712.54526.goofyheadedpunk@gmail.com>
References: <200707041712.54526.goofyheadedpunk@gmail.com>
Message-ID: <468D4E9F.6030101@eepatents.com>

Brian L. Troutwine wrote:
> I'm new to using twisted and am attempting to implement a client and
> server for use a distributed computing environment with a centralized
> task server. Clients query the task server for a work list, apply a
> bunch of transforms to this work list and then return the transformed
> work list back to the server. The server, for its part, has to send
> out these work lists, keep track of which client is processing what
> (for timeout handling) and collate the transformed work lists so that
> it can writing the data out to disk in a sorted manner.

http://foss.eepatents.com/Twisted-Goodies/browser/trunk/twisted_goodies/asyncluster

Best regards,
Ed Suominen



From goofyheadedpunk at gmail.com  Thu Jul  5 18:11:29 2007
From: goofyheadedpunk at gmail.com (Brian L. Troutwine)
Date: Thu, 5 Jul 2007 17:11:29 -0700
Subject: [Twisted-Python] New to twisted,
	need a bit of high-level design help.
In-Reply-To: <468D4E9F.6030101@eepatents.com>
References: <200707041712.54526.goofyheadedpunk@gmail.com>
	<468D4E9F.6030101@eepatents.com>
Message-ID: <200707051711.29092.goofyheadedpunk@gmail.com>

Thanks! That's exactly what I was looking for.

On Thursday 05 July 2007 13:03:43 Ed Suominen wrote:
> Brian L. Troutwine wrote:
> > I'm new to using twisted and am attempting to implement a client and
> > server for use a distributed computing environment with a centralized
> > task server. Clients query the task server for a work list, apply a
> > bunch of transforms to this work list and then return the transformed
> > work list back to the server. The server, for its part, has to send
> > out these work lists, keep track of which client is processing what
> > (for timeout handling) and collate the transformed work lists so that
> > it can writing the data out to disk in a sorted manner.
>
> http://foss.eepatents.com/Twisted-Goodies/browser/trunk/twisted_goodies/asy
>ncluster
>
> Best regards,
> Ed Suominen
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From general at eepatents.com  Thu Jul  5 19:39:08 2007
From: general at eepatents.com (Ed Suominen)
Date: Thu, 05 Jul 2007 21:39:08 -0400
Subject: [Twisted-Python] New to twisted need a bit of high-level design
	help.
In-Reply-To: <200707051711.29092.goofyheadedpunk@gmail.com>
References: <200707041712.54526.goofyheadedpunk@gmail.com>	<468D4E9F.6030101@eepatents.com>
	<200707051711.29092.goofyheadedpunk@gmail.com>
Message-ID: <468D9D3C.60107@eepatents.com>

Brian L. Troutwine wrote:
> Thanks! That's exactly what I was looking for.

You're welcome. Twisted is a great piece of code, and I'm happy to help
people put it to work as I have.

I'm actually going to be working on the AsynCluster package some more in
the next week or two. Feel free to contact me offline with any questions
or problems.

Best regards, Ed



From daniel.cuesta at iavante.es  Fri Jul  6 01:46:38 2007
From: daniel.cuesta at iavante.es (Daniel de la Cuesta)
Date: Fri, 06 Jul 2007 09:46:38 +0200
Subject: [Twisted-Python] XMLRPC Class in HTTP Server.
Message-ID: <468DF35E.2090608@iavante.es>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070706/51971bf2/attachment.html>

From programmer.py at gmail.com  Fri Jul  6 06:31:18 2007
From: programmer.py at gmail.com (Jaime Wyant)
Date: Fri, 6 Jul 2007 07:31:18 -0500
Subject: [Twisted-Python] XMLRPC Class in HTTP Server.
In-Reply-To: <468DF35E.2090608@iavante.es>
References: <468DF35E.2090608@iavante.es>
Message-ID: <d52c72d20707060531x4b9bade8g3573700a36e93e7b@mail.gmail.com>

I'm not sure how the twisted web server works (I'm a new guy around here!),
but it looks like your dictionary, pages, maps url's to callables.  But
MyConverterXMLRPCClass() is an instance, that is not callable (no __call__
method).  I think what you want to do is something like this ->

'/xmlrpc_converter': MyConverterXMLRPCClass().xmlrpc_mymethod1

^^ Should get you past the __call__ error you're getting.

HTH!
jw

On 7/6/07, Daniel de la Cuesta <daniel.cuesta at iavante.es> wrote:
>
>  Hi,
>
> I have a twisted web server running using "twisted.web.http".
>
> The objective of the server is to convert files to another format.
> Currently I upload the files and the conversion params using an HTTP POST
> from a form.
>
> Now I want to add XML-RPC support to the conversion process. It means the
> user could process the conversion using the http form or calling directly
> the XML-RPC class.
>
> This is my pages dispatch:
>
> class MyRequestHandler(http.Request):
>
>
>     pages = { '/' : loginPage,
>                      '/uploadHandler' : handleUpload,
>                      '/uploadform' : uploadForm,
>                      '/xmlrpc_converter': MyConverterXMLRPCClass() }
>
> What I want to do is offer the user two possibilities to upload the file,
> one of them using HTTP POST (calling to "uploadform") and the other using
> XML-RPC (caling to xmlrpc_converter).
>
> I have tried to implement MyConverterXMLRPCClass() as follows:
>
> MyConverterXMLRPCClass(xmlrpc.XMLRPC):
>
>     def __init(self):
>         """"""
>         pass
>
>     def xmlrpc_mymethod1(self, param)
>         """My process""
>
> But It down't work, when I try http://localhost:8000/xmlrpc_converter I
> get the following error:
>
> "MyConverterXMLRPCClass instance has no __call__ method"
>
> How can I call MyConverterXMLRPCClass from an url in my http server?
>
> Thank you.
>
>
>
> --
>
> *Daniel de la Cuesta Navarrete*
> *Técnico de Desarrollo de Software*
>
> FUNDACIÓN IAVANTE
> daniel.cuesta at iavantefundacion.com
> Tel. 951 015 300
>
> Este correo electrónico y, en su caso, cualquier fichero anexo, contiene
> información confidencial exclusivamente dirigida a su(s) destinatario(s).
> Toda copia o divulgación deberá ser autorizada por IAVANTE.
>
> This e-mail and any attachments are confidential and exclusively directed
> to its adressee(s). Any copy or distribution will have to be authorized by
> IAVANTE.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
"Government does not solve problems; it subsidizes them."
Ronald Reagan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070706/330e1cc4/attachment.html>

From exarkun at twistedmatrix.com  Sat Jul  7 22:05:02 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 08 Jul 2007 04:05:02 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1183867502.14.185486377@twistedmatrix.com

Bug summary
______________________
Summary for 2007-07-01 through 2007-07-08
Bugs opened: 2    Bugs closed: 3  Total open bugs: 984 (-1)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:  -1       |Highest:  -1          |Conch:     -1          
|Task:    +0       |Normal:   +0          |Core:      +0          
                                          |Foolscap:  -1          
                                          |Mail:      +1          


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2728] svn.twistedmatrix.com not resolving (opened by jwilger) (CLOSED, worksforme)
    defect          core       http://twistedmatrix.com/trac/ticket/2728

                    ===== Normal =====
[#2729] remove Deferred.setTimeout usage from twisted.mail (opened by exarkun)
    task            mail       http://twistedmatrix.com/trac/ticket/2729



Closed Bugs
______________________
                    ===== Highest =====
[#2728] svn.twistedmatrix.com not resolving (opened by jwilger, closed by exarkun, worksforme)
    defect          core       http://twistedmatrix.com/trac/ticket/2728

[#2707] twisted.conch.ssh.connection has poor tests (opened by z3p, closed by z3p, fixed)
    defect          conch      http://twistedmatrix.com/trac/ticket/2707

                    ===== Normal =====
[#2647] foolscap needs to move out of the sandbox (opened by warner, closed by warner, fixed)
    task            foolscap   http://twistedmatrix.com/trac/ticket/2647





From jml at mumak.net  Sun Jul  8 00:29:24 2007
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 8 Jul 2007 16:29:24 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r20678 - I hate having
	software with users
In-Reply-To: <E1I5lpp-0005J4-00@wolfwood.twistedmatrix.com>
References: <E1I5lpp-0005J4-00@wolfwood.twistedmatrix.com>
Message-ID: <d06a5cd30707072329s4cd36ebcx9d71166be5635edc@mail.gmail.com>

On 7/4/07, Paul Swartz <z3p at wolfwood.twistedmatrix.com> wrote:
> Author: z3p
> Date: Tue Jul  3 11:06:39 2007
> New Revision: 20678
>
> Removed:
>    branches/session-2710-2/twisted/conch/test/test_userauth.py
>
> Log:
> I hate having software with users
>

Why is this being removed?

jml



From paulswartz at gmail.com  Sun Jul  8 06:47:16 2007
From: paulswartz at gmail.com (Paul Swartz)
Date: Sun, 8 Jul 2007 08:47:16 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r20678 - I hate having
	software with users
In-Reply-To: <d06a5cd30707072329s4cd36ebcx9d71166be5635edc@mail.gmail.com>
References: <E1I5lpp-0005J4-00@wolfwood.twistedmatrix.com>
	<d06a5cd30707072329s4cd36ebcx9d71166be5635edc@mail.gmail.com>
Message-ID: <324cfb540707080547i60736fecgadd8aa31de01de93@mail.gmail.com>

Because it was added mistakenly from the merge forward.  It's from
userauth-2682.

-p

On 7/8/07, Jonathan Lange <jml at mumak.net> wrote:
> On 7/4/07, Paul Swartz <z3p at wolfwood.twistedmatrix.com> wrote:
> > Author: z3p
> > Date: Tue Jul  3 11:06:39 2007
> > New Revision: 20678
> >
> > Removed:
> >    branches/session-2710-2/twisted/conch/test/test_userauth.py
> >
> > Log:
> > I hate having software with users
> >
>
> Why is this being removed?
>
> jml
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin



From mikeal at osafoundation.org  Sun Jul  8 12:27:43 2007
From: mikeal at osafoundation.org (Mikeal Rogers)
Date: Sun, 8 Jul 2007 11:27:43 -0700
Subject: [Twisted-Python] twisted to the iphone rescue ?
In-Reply-To: <038A7663-A59A-41BC-BD50-022D02657418@2xlp.com>
References: <038A7663-A59A-41BC-BD50-022D02657418@2xlp.com>
Message-ID: <22CBDDE0-8F61-4077-9F51-D661FE3415E2@osafoundation.org>

I'm working on a multi-protocol IM web interface for iPhone using  
twisted.

I'm sure it'll be a few months until I'm finished.

-Mikeal

On Jun 30, 2007, at 9:09 PM, Jonathan Vanasco wrote:

> I just got an iPhone, and like many other tech people, I'm pissed:
>
> a_ There's no terminal/shell - i think they wanted to lock-down the  
> phone
> b_ There's no Chat feature - they wanted to push people into an  
> overpriced AT&T scheme
>
> Some people have been doing workarounds:
> re: http://arstechnica.com/journals/apple.ars/2007/06/25/aim-and- 
> ssh-coming-to-an-iphone-near-you-sort-of
>
> 	iPhoneChat
> 		web-based aim proxy
> 		think twisted-words
> 		http://www.publictivity.com/iPhoneChat/
>
> 	WebShell
> 		web-based ssh proxy over https
> 		http://www-personal.umich.edu/~mressl/webshell/
>
> And I heard of a few more in the pipes.
>
> Is anyone working on stuff like this using Twisted though?
>
> For a seasoned Twisted programmer, this should be pretty simple...  
> I've done most of the features of both in other apps based on  
> twisted , which seems to support both feature sets really really well.
>
> Just wondering/hoping that someone here is planning on releasing  
> some standalone stuff that people can download and run on their  
> servers ( ssh for security , chatting for aim/icq/jabber not  
> throttling any one ip - which is happening right now )
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From pbastov at gmail.com  Sun Jul  8 22:44:56 2007
From: pbastov at gmail.com (Pavel Bastov)
Date: Mon, 9 Jul 2007 10:44:56 +0600
Subject: [Twisted-Python] xooChat: Powered by Twisted
Message-ID: <eaf39e680707082144i4437a895hf44c6c28d00bb58@mail.gmail.com>

Greetings all,

on the Twisted Projects page I read a note (at the bottom) that in
order to add a project to this page I have to post to this mailing
list.

Well, I'm developing a live help service. Its backend is powered by
Twisted. Here is the URL:
http://www.xoochat.com/

Description: An Ajax based live help service for online customer support.

If possible, I would like this project to be added to the Twisted site.

TIA

-- 
Best regards, Pavel Bastov



From pbastov at gmail.com  Sun Jul  8 22:49:34 2007
From: pbastov at gmail.com (Pavel Bastov)
Date: Mon, 9 Jul 2007 10:49:34 +0600
Subject: [Twisted-Python] Application Start Up and Tear Down
Message-ID: <eaf39e680707082149w4b948c20r3f0061b079bcb020@mail.gmail.com>

Hi,

so far I've been using only one Factory in my application. So, all the
intialization and deinitialization code was in startFactory() /
stopFactory().

Now I have to add another protocol with another factory. Is there a
similar pair of methods for the application (server) where I can
initialize resources (db pool, for example) upon startup and free them
upon shutdown?

-- 
Best regards, Pavel Bastov



From adam at atlas.st  Sun Jul  8 23:07:01 2007
From: adam at atlas.st (Adam Atlas)
Date: Mon, 09 Jul 2007 01:07:01 -0400
Subject: [Twisted-Python] Application Start Up and Tear Down
In-Reply-To: <eaf39e680707082149w4b948c20r3f0061b079bcb020@mail.gmail.com>
References: <eaf39e680707082149w4b948c20r3f0061b079bcb020@mail.gmail.com>
Message-ID: <02429853-2BDB-4C84-B04E-853E766396F9@atlas.st>


On 9 Jul 2007, at 00.49, Pavel Bastov wrote:
> so far I've been using only one Factory in my application. So, all the
> intialization and deinitialization code was in startFactory() /
> stopFactory().
>
> Now I have to add another protocol with another factory. Is there a
> similar pair of methods for the application (server) where I can
> initialize resources (db pool, for example) upon startup and free them
> upon shutdown?

Wouldn't it work to simply handle your initialization and cleanup  
before and after reactor.run()?



From pbastov at gmail.com  Sun Jul  8 23:18:50 2007
From: pbastov at gmail.com (Pavel Bastov)
Date: Mon, 9 Jul 2007 11:18:50 +0600
Subject: [Twisted-Python] Application Start Up and Tear Down
In-Reply-To: <02429853-2BDB-4C84-B04E-853E766396F9@atlas.st>
References: <eaf39e680707082149w4b948c20r3f0061b079bcb020@mail.gmail.com>
	<02429853-2BDB-4C84-B04E-853E766396F9@atlas.st>
Message-ID: <eaf39e680707082218h75ce4e63p80c679a4fc87b7b@mail.gmail.com>

Hmm,

I don't call reactor.run() explicitly.

Here is how I launch it:

application = service.Application('xoochat', uid = uid, gid = gid)
internet.TCPServer(config.port,
factory).setServiceParent(service.IServiceCollection(application))
internet.TCPServer(3711,
pushFactory).setServiceParent(service.IServiceCollection(application))


On 7/9/07, Adam Atlas <adam at atlas.st> wrote:
>
> On 9 Jul 2007, at 00.49, Pavel Bastov wrote:
> > so far I've been using only one Factory in my application. So, all the
> > intialization and deinitialization code was in startFactory() /
> > stopFactory().
> >
> > Now I have to add another protocol with another factory. Is there a
> > similar pair of methods for the application (server) where I can
> > initialize resources (db pool, for example) upon startup and free them
> > upon shutdown?
>
> Wouldn't it work to simply handle your initialization and cleanup
> before and after reactor.run()?
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


-- 
Best regards, Pavel Bastov



From gabor.bernath at gmail.com  Sun Jul  8 23:30:26 2007
From: gabor.bernath at gmail.com (=?ISO-8859-1?Q?G=E1bor_Bern=E1th?=)
Date: Mon, 9 Jul 2007 06:30:26 +0100
Subject: [Twisted-Python] Application Start Up and Tear Down
In-Reply-To: <eaf39e680707082218h75ce4e63p80c679a4fc87b7b@mail.gmail.com>
References: <eaf39e680707082149w4b948c20r3f0061b079bcb020@mail.gmail.com>
	<02429853-2BDB-4C84-B04E-853E766396F9@atlas.st>
	<eaf39e680707082218h75ce4e63p80c679a4fc87b7b@mail.gmail.com>
Message-ID: <ff49a2640707082230y33256c88q34f0db0facb36218@mail.gmail.com>

try reactor.addSystemEventTrigger()

it calls back on system events such as startup and shutdown which are
fired by the reactor. read the details in the docs:
http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReactorCore.html


On 7/9/07, Pavel Bastov <pbastov at gmail.com> wrote:
> Hmm,
>
> I don't call reactor.run() explicitly.
>
> Here is how I launch it:
>
> application = service.Application('xoochat', uid = uid, gid = gid)
> internet.TCPServer(config.port,
> factory).setServiceParent(service.IServiceCollection(application))
> internet.TCPServer(3711,
> pushFactory).setServiceParent(service.IServiceCollection(application))
>
>
> On 7/9/07, Adam Atlas <adam at atlas.st> wrote:
> >
> > On 9 Jul 2007, at 00.49, Pavel Bastov wrote:
> > > so far I've been using only one Factory in my application. So, all the
> > > intialization and deinitialization code was in startFactory() /
> > > stopFactory().
> > >
> > > Now I have to add another protocol with another factory. Is there a
> > > similar pair of methods for the application (server) where I can
> > > initialize resources (db pool, for example) upon startup and free them
> > > upon shutdown?
> >
> > Wouldn't it work to simply handle your initialization and cleanup
> > before and after reactor.run()?
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
>
>
> --
> Best regards, Pavel Bastov
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From pbastov at gmail.com  Sun Jul  8 23:39:09 2007
From: pbastov at gmail.com (Pavel Bastov)
Date: Mon, 9 Jul 2007 11:39:09 +0600
Subject: [Twisted-Python] How to receive a big stream data?
References: 5c6c8710706270221u4f7571dbq511d9fe1ef746da8@mail.gmail.com
Message-ID: <455687479.20070709113909@gmail.com>

Hello Steven,

I met the similar problem in the project I'm currently developing.

Here is how I solved it: I delimit each message with a special char
(0x1f in my case) which I'm sure will not occur inside any message.

Every time a new chunk arrives (either complete message or a part of
it) I check if it is delimited with this char. If yes, then I process
it, if not, then I add this chunk up to the internal buffer.

This seems to work perfectly for me.

Here is a piece of code illustrating the concept (taken as is from the
working code):

class xooChatProtocol(Protocol):

    def __init__(self):
        self.buf = ''

    def dataReceived(self, data):

        commands = data.split('\x1f')
        if len(commands) > 0:
            i = 1
            num = len(commands)
            for command in commands:
                if i < num:
                    request = self.buf + command
                    self.requestReceived(request)
                    self.buf = ''
                else:
                    self.buf += command
                i += 1


Hope this helps.

-- 

Good luck,

Pavel Bastov
xooChat Team Leader and xooChat Evangelist
http://www.xoochat.com/




From pbastov at gmail.com  Sun Jul  8 23:43:10 2007
From: pbastov at gmail.com (Pavel Bastov)
Date: Mon, 9 Jul 2007 11:43:10 +0600
Subject: [Twisted-Python] Application Start Up and Tear Down
In-Reply-To: <ff49a2640707082230y33256c88q34f0db0facb36218@mail.gmail.com>
References: <eaf39e680707082149w4b948c20r3f0061b079bcb020@mail.gmail.com>
	<02429853-2BDB-4C84-B04E-853E766396F9@atlas.st>
	<eaf39e680707082218h75ce4e63p80c679a4fc87b7b@mail.gmail.com>
	<ff49a2640707082230y33256c88q34f0db0facb36218@mail.gmail.com>
Message-ID: <eaf39e680707082243j11f1e30bsbb6397590a3f40a1@mail.gmail.com>

Thanks Gábor,

this sounds like what I need. Will take a deeper look at it.

On 7/9/07, Gábor Bernáth <gabor.bernath at gmail.com> wrote:
> try reactor.addSystemEventTrigger()
>
> it calls back on system events such as startup and shutdown which are
> fired by the reactor. read the details in the docs:

-- 
Good luck,

Pavel Bastov
xooChat Evangelist and Team Leader
http://www.xoochat.com/



From andrew-twisted at puzzling.org  Sun Jul  8 23:53:15 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 9 Jul 2007 15:53:15 +1000
Subject: [Twisted-Python] Application Start Up and Tear Down
In-Reply-To: <eaf39e680707082149w4b948c20r3f0061b079bcb020@mail.gmail.com>
References: <eaf39e680707082149w4b948c20r3f0061b079bcb020@mail.gmail.com>
Message-ID: <20070709055315.GF9243@steerpike.home.puzzling.org>

Pavel Bastov wrote:
> Hi,
> 
> so far I've been using only one Factory in my application. So, all the
> intialization and deinitialization code was in startFactory() /
> stopFactory().
> 
> Now I have to add another protocol with another factory. Is there a
> similar pair of methods for the application (server) where I can
> initialize resources (db pool, for example) upon startup and free them
> upon shutdown?

Make your own Service subclass, and override startService/stopService.

-Andrew.




From adam at atlas.st  Sun Jul  8 23:58:04 2007
From: adam at atlas.st (Adam Atlas)
Date: Mon, 09 Jul 2007 01:58:04 -0400
Subject: [Twisted-Python] How to receive a big stream data?
In-Reply-To: <5c6c8710707021840s522c5d10n657335582fd189@mail.gmail.com>
References: <5c6c8710706261902u347d25e0lc7375d23ef760dd5@mail.gmail.com>
	<28012bc60706270121k2bae8c8ey60f591e003cf8006@mail.gmail.com>
	<5c6c8710706270221u4f7571dbq511d9fe1ef746da8@mail.gmail.com>
	<5c6c8710707021840s522c5d10n657335582fd189@mail.gmail.com>
Message-ID: <09CD42BF-7332-4234-B5BD-AB7B3C40DBD4@atlas.st>


On 2 Jul 2007, at 21.40, steven wang wrote:
> I rewrite my source about MyProtocol. But I can not receive  
> complete data, only a part of data. :( Could you help me?

Have you taken a look at twisted.protocols.basic? There are some nice  
abstractions in there for building chunked protocols. I'd recommend  
NetstringReceiver if you want to keep your protocol text-based. You  
subclass protocols.basic.NetstringReceiver instead of  
protocol.Protocol, and override stringReceived(data). That gets  
called whenever a complete message is received (unlike dataReceived,  
which just gets a series of bytes that may or may not be a complete  
message).



From steven.zdwang at gmail.com  Mon Jul  9 00:31:27 2007
From: steven.zdwang at gmail.com (steven wang)
Date: Mon, 9 Jul 2007 14:31:27 +0800
Subject: [Twisted-Python] How to receive a big stream data?
In-Reply-To: <09CD42BF-7332-4234-B5BD-AB7B3C40DBD4@atlas.st>
References: <5c6c8710706261902u347d25e0lc7375d23ef760dd5@mail.gmail.com>
	<28012bc60706270121k2bae8c8ey60f591e003cf8006@mail.gmail.com>
	<5c6c8710706270221u4f7571dbq511d9fe1ef746da8@mail.gmail.com>
	<5c6c8710707021840s522c5d10n657335582fd189@mail.gmail.com>
	<09CD42BF-7332-4234-B5BD-AB7B3C40DBD4@atlas.st>
Message-ID: <5c6c8710707082331i31196904na42c81853b734057@mail.gmail.com>

Thanks Adam Atlas ＆ Arnar Birgisson,

But I want to receive binary data in my protocol.

On 7/9/07, Adam Atlas <adam at atlas.st> wrote:
>
>
> On 2 Jul 2007, at 21.40, steven wang wrote:
> > I rewrite my source about MyProtocol. But I can not receive
> > complete data, only a part of data. :( Could you help me?
>
> Have you taken a look at twisted.protocols.basic? There are some nice
> abstractions in there for building chunked protocols. I'd recommend
> NetstringReceiver if you want to keep your protocol text-based. You
> subclass protocols.basic.NetstringReceiver instead of
> protocol.Protocol, and override stringReceived(data). That gets
> called whenever a complete message is received (unlike dataReceived,
> which just gets a series of bytes that may or may not be a complete
> message).
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070709/2d344c0a/attachment.html>

From dialtone at divmod.com  Mon Jul  9 01:27:21 2007
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Mon, 9 Jul 2007 09:27:21 +0200
Subject: [Twisted-Python] Application Start Up and Tear Down
In-Reply-To: <eaf39e680707082218h75ce4e63p80c679a4fc87b7b@mail.gmail.com>
Message-ID: <20070709072721.4947.496349772.divmod.quotient.9347@ohm>

On Mon, 9 Jul 2007 11:18:50 +0600, Pavel Bastov <pbastov at gmail.com> wrote:
>Hmm,
>
>I don't call reactor.run() explicitly.
>
>Here is how I launch it:
>
>application = service.Application('xoochat', uid = uid, gid = gid)
>internet.TCPServer(config.port,
>factory).setServiceParent(service.IServiceCollection(application))
>internet.TCPServer(3711,
>pushFactory).setServiceParent(service.IServiceCollection(application))

The right way to do this is defining your own Service like in this way:

import locale

from twisted.internet import defer

from twisted.cred.checkers import AllowAnonymousAccess
from twisted.python.components import registerAdapter
from twisted.cred.credentials import IAnonymous
from twisted.application.service import Service
from twisted.cred.portal import Portal

from nevow import inevow, appserver
#from nevow import guard

from starter.monkeypatches import VhostFakeRoot
from starter import storage, auth, guard, istarter
from starter.web import main

class StarterService(Service):
    def __init__(self, conf):
        self.conf = conf
        
    def privilegedStartService(self):
        locale.setlocale(locale.LC_TIME, self.conf['general']['lc_ctime'])
        
        dbconf = self.conf['db']
        self.db = p = storage.init(dbconf['engine'])
        p.init(dbconf['strategy'],
               dbconf['database'],
               dbconf['host'],
               dbconf['port'],
               dbconf['user'],
               dbconf['password'])
        
        ls = auth.LoginSystem(self.db, self.conf)
        p = Portal(ls)
        p.registerChecker(AllowAnonymousAccess(), IAnonymous)
        p.registerChecker(ls)
        
        registerAdapter(main.Root, istarter.IAvatar, inevow.IResource)

        res = guard.SessionWrapper(p)
        vhost = VhostFakeRoot(res)
        self.site = appserver.NevowSite(vhost, logPath=self.conf['paths']['web'].path)

        from twisted.internet import reactor

        self.port = reactor.listenTCP(self.conf['web']['port'],
                                      self.site,
                                      interface=self.conf['web']['interface'])

    def stopService(self):
        dl = []
        if self.port is not None:
            dl.append(defer.maybeDeferred(self.port.stopListening))
            self.port = None
        if self.db is not None:
            dl.append(defer.maybeDeferred(self.db.close))
            self.db = None
        return defer.DeferredList(dl)

And you define your .tac file like this:

from twisted.application import service
from starter.service import StarterService
from configuration import main

application = service.Application('Starter')
StarterService(main).setServiceParent(application)

Of course Twisted will call Service.privilegedStartService when everything startsup and after
it changed UID (or anyway after Service.startService).

Then when everything stops it will call Service.stopService.

You can of course register other services as children of this parent one by using .setServiceParent().

-- 
Valentino Volonghi aka dialtone
Blog: http://www.twisted.it




From dialtone at divmod.com  Mon Jul  9 01:34:32 2007
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Mon, 9 Jul 2007 09:34:32 +0200
Subject: [Twisted-Python] Application Start Up and Tear Down
In-Reply-To: <20070709072721.4947.496349772.divmod.quotient.9347@ohm>
Message-ID: <20070709073432.4947.1941499577.divmod.quotient.9350@ohm>

On Mon, 9 Jul 2007 09:27:21 +0200, Valentino Volonghi aka Dialtone <dialtone at divmod.com> wrote:

>Of course Twisted will call Service.privilegedStartService when everything 
>startsup and after
>it changed UID (or anyway after Service.startService).

Of course this is wrong.

Service.privilegedStartService()
switchUID and fork
shedPriviledges()
Service.startService()


>Then when everything stops it will call Service.stopService.

-- 
Valentino Volonghi aka dialtone
Blog: http://www.twisted.it



From daniel.cuesta at iavante.es  Mon Jul  9 01:38:44 2007
From: daniel.cuesta at iavante.es (Daniel de la Cuesta)
Date: Mon, 09 Jul 2007 09:38:44 +0200
Subject: [Twisted-Python] XMLRPC Class in HTTP Server.
In-Reply-To: <d52c72d20707060531x4b9bade8g3573700a36e93e7b@mail.gmail.com>
References: <468DF35E.2090608@iavante.es>
	<d52c72d20707060531x4b9bade8g3573700a36e93e7b@mail.gmail.com>
Message-ID: <4691E604.8050701@iavante.es>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070709/de38dfc3/attachment.html>

From markus at bluegap.ch  Mon Jul  9 02:14:18 2007
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Mon, 09 Jul 2007 10:14:18 +0200
Subject: [Twisted-Python] producer / consumer question
In-Reply-To: <20070705150152.4947.907275344.divmod.quotient.7440@ohm>
References: <20070705150152.4947.907275344.divmod.quotient.7440@ohm>
Message-ID: <4691EE5A.30605@bluegap.ch>

Hi,

Jean-Paul Calderone wrote:
> It's stable.  There isn't any documentation that indicates otherwise.

Yes, there is: the current API docs clearly indicates, that "This 
interface is semi-stable.", for IPullProducer as well as for 
IPushProducer. Not for IProducer, though. See:

http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IPullProducer.html
http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IPushProducer.html

Regards

Markus



From glyph at divmod.com  Mon Jul  9 07:31:57 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 09 Jul 2007 13:31:57 -0000
Subject: [Twisted-Python] Application Start Up and Tear Down
In-Reply-To: <20070709055315.GF9243@steerpike.home.puzzling.org>
References: <eaf39e680707082149w4b948c20r3f0061b079bcb020@mail.gmail.com>
	<20070709055315.GF9243@steerpike.home.puzzling.org>
Message-ID: <20070709133157.26384.240598309.divmod.xquotient.193@joule.divmod.com>


On 05:53 am, andrew-twisted at puzzling.org wrote:
>Pavel Bastov wrote:
>>Hi,
>>
>>so far I've been using only one Factory in my application. So, all the
>>intialization and deinitialization code was in startFactory() /
>>stopFactory().
>>
>>Now I have to add another protocol with another factory. Is there a
>>similar pair of methods for the application (server) where I can
>>initialize resources (db pool, for example) upon startup and free them
>>upon shutdown?
>
>Make your own Service subclass, and override startService/stopService.

I just want to reinforce that this is really the *correct* answer, and 
the other suggestions (custom code before/after run(), manually calling 
addSystemEventTrigger) both tightly bind your application logic to the 
particular way your entire process starts up and shuts down, rather than 
having a discrete unit for your application.  (Think global vs. instance 
variables.)

The service hierarchy has issues (privilegedStartService being the 
biggest one) but it is generally the most flexible, since you can start 
and stop services and groups of services without starting and stopping 
the entire process.



From fritcher at corp.earthlink.net  Mon Jul  9 07:36:59 2007
From: fritcher at corp.earthlink.net (Jason Fritcher)
Date: Mon, 09 Jul 2007 09:36:59 -0400
Subject: [Twisted-Python] XMLRPC Class in HTTP Server.
In-Reply-To: <4691E604.8050701@iavante.es>
References: <468DF35E.2090608@iavante.es>	<d52c72d20707060531x4b9bade8g3573700a36e93e7b@mail.gmail.com>
	<4691E604.8050701@iavante.es>
Message-ID: <469239FB.5030809@corp.earthlink.net>

Daniel de la Cuesta wrote:
> Ok, but this is not exactly what I want.

The xml-rpc server is a web resource node, so to make things work, you
need to call the render() method on your xml-rpc instance, so in your
url map, instead of...

MyConverterXMLRPCClass()

use...

MyConverterXMLRPCClass().render

to store a bound reference to the render method and then all you need to
do is call that and pass it the request object. The render method will
take care of setting up deferreds to write the response or any errors
back to the client.

-- 
Jason Fritcher
Senior Software Engineer
Core Infrastructure Services & Strategy
Earthlink, Inc
fritcher at corp.earthlink.net


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 249 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20070709/243817d8/attachment.sig>

From exarkun at divmod.com  Mon Jul  9 08:14:07 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 9 Jul 2007 10:14:07 -0400
Subject: [Twisted-Python] XMLRPC Class in HTTP Server.
In-Reply-To: <468DF35E.2090608@iavante.es>
Message-ID: <20070709141407.4947.1888526620.divmod.quotient.9437@ohm>

Wasn't going to reply to this, for reasons which will be obvious momentarily,
but I haven't seen a correct reply yet, so...

On Fri, 06 Jul 2007 09:46:38 +0200, Daniel de la Cuesta <daniel.cuesta at iavante.es> wrote:
><!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
><html>
><head>
>  <meta content="text/html;charset=ISO-8859-1" http-equiv="Content-Type">
></head>
><body bgcolor="#ffffff" text="#000000">
>Hi,<br>
><br>
>I have a twisted web server running using "twisted.web.http".<br>
><br>

You probably want to direct future questions on this topic to the
twisted-web mailing list, where you'll get more attention from
people more actively doing web things.

>The objective of the server is to convert files to another format.
>Currently I upload the files and the conversion params using an HTTP
>POST from a form.<br>
><br>
>Now I want to add XML-RPC support to the conversion process. It means
>the user could process the conversion using the http form or calling
>directly the XML-RPC class.<br>

HTTP POST is probably a better way to upload files, in general.  MIME-ish
encoding is a bit easier and has less overhead than base64 encoding.

><br>
>This is my pages dispatch:<br>
><br>
>class MyRequestHandler(http.Request):<br>
><br>
>&nbsp;&nbsp; <br>
>&nbsp;&nbsp;&nbsp; pages = { '/' : loginPage, <br>
>&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '/uploadHandler' : handleUpload,<br>
>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '/uploadform' : uploadForm,<br>
>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '/xmlrpc_converter': MyConverterXMLRPCClass() }<br>

Rarely is it correct to subclass Request.  You can probably just discard
all of the above code.  Aside from that, I don't know what the `pages'
attribute is.  I don't think anything pays any attention to it.

><br>
>What I want to do is offer the user two possibilities to upload the
>file, one of them using HTTP POST (calling to "uploadform") and the
>other using XML-RPC (caling to xmlrpc_converter).<br>
><br>
>I have tried to implement MyConverterXMLRPCClass() as follows:<br>
><br>
>MyConverterXMLRPCClass(xmlrpc.XMLRPC):<br>
>&nbsp;&nbsp; <br>
>&nbsp;&nbsp;&nbsp; def __init(self):<br>
>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; """"""<br>
>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pass<br>
><br>
>&nbsp;&nbsp;&nbsp; def xmlrpc_mymethod1(self, param)<br>
>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; """My process""<br>
><br>

This part looks okay.

>But It down't work, when I try <a class="moz-txt-link-freetext" href="http://localhost:8000/xmlrpc_converter">http://localhost:8000/xmlrpc_converter</a> I
>get the following error:<br>
><br>
>"MyConverterXMLRPCClass instance has no __call__ method"<br>
>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
>How can I call MyConverterXMLRPCClass from an url in my http server?<br>

I don't know how a MyConverterXMLRPCClass got called.  I suppose you have
some more code that you didn't include in this message which looks at the
pages dictionary on the request object and does something with them.
Whatever it is, I guess it isn't correct. ;)

Instead, what you should do is define a root resource which has
MyConverterXMLRPCClass as a child at the "xmlrpc_converter" segment.  You
can do this pretty easily using the basic Resource class in twisted.web:

    from twisted.web.resource import Resource
    from twisted.web.server import Site
    from twisted.internet import reactor

    root = Resource()
    root.putChild('xmlrpc_converter', MyConverterXMLRPCClass())
    site = Site(root)
    reactor.listenTCP(8080, site)

The Resource class is implemented to keep track of child resources added
to it with putChild so that when a request comes in for one of them, it
gives back the appropriate one and URL traversal or page rendering can
continue.

Hope this helps,

Jean-Paul



From tarjei at nu.no  Mon Jul  9 08:54:06 2007
From: tarjei at nu.no (tarjei)
Date: Mon, 09 Jul 2007 16:54:06 +0200
Subject: [Twisted-Python] [usage] FTPClient uploading multiple files
Message-ID: <46924C0E.8020403@nu.no>

Hi, after spending a few hours grooking the FTPClient API (with good
help from Exarkun on IRC) I thought I'd post the fruits of my work.

I hope this may help someone. If the code is usefull enough feel free to
add it to the examples in the docs.

If you see errors or got ideas on how this could be done different, feel
free to answer :-)

regards,
Tarjei


class FtpFileSave(object):

    """
    A class for uploading multiple files to a ftp host.
    Usage:

    ftp = FtpFileSave(ftpFiles=['/etc/passwd', '/etc/magic'],
_pass="something",
    _username = "something", host="localhost")
    ftp.save(somecallback, errorcallback)

    This will upload multiple files to the ftpserver.
    @caveat 1: as it stands the class does not change directory or
anything like that before uploading the files.
    This should be easy to add though.
    """

    _pass = ""
    _username = ""
    port = 21
    host = "localhost"

    def __init__(self, **kwargs):
        """Create a ftpfilesaver using the ftp client fromtwisted
        @param ftpFiles list of paths to the files to upload.
        """
        self.__dict__.update(kwargs)
        self.nextfile = 0

    def save(self, success,error):
        """Uploads a set of tiles to the ftpserver.
        @param success: the callback to be called on success
        @param error:   the callback to be called on error
        """
        self.success = success

        FTPClient.debug = True
        creator = ClientCreator(reactor, FTPClient, self._username,
                    self._pass, passive=True)
        defer = creator.connectTCP(self.host,self.port)
        self.error = error
        defer.addCallback(self.connectionMade).addErrback(self.error)
        return defer

    def connectionMade(self,ftpClient):
        "Checks if there are more files to upload and uploads them.
        The main point with this method is that you have to collect the
defereds of each command
        and wait until they succeed.
        "
        deffereds = []
        "We'll need the client to do a disconnect later"
        self.client = ftpClient
        " Create defereds for each of the different files to be uploaded"
        for upfile in self.ftpFiles:
            if not os.path.exists(upfile):
                raise Exception("File %s not found" % upfile)
            store, finish = ftpClient.storeFile("./%s" %
os.path.basename(upfile))
            finish.addCallback(self.end).addErrback(self.error)
            store.addCallback(self.send_file).addErrback(self.error)
            deffereds.append(store)
            deffereds.append(finish)
        return defer.gatherResults(deffereds)

    def end(self, ftpResult):
        """Close the connection when all files have been uploaded.
            @param ftpResult a list of the protocol info we get. Not
very interesting.
            @todo: check the list for errors.
        """
        if (len(self.ftpFiles) <= self.nextfile):
            self.client.quit()
            self.client.transport.loseConnection()
            return defer.succeed(self.success())
        return

    def send_file(self, sender):
        """Open and send the file
        """
        #print "Storefile %d : %s"  % (self.nextfile,
self.ftpFiles[self.nextfile])
        filename = self.ftpFiles[self.nextfile]
        fp = open(filename,'r')
        sender.transport.write(fp.read())
        sender.finish()
        "increase the nextfile count so end() knows when it's done"
        self.nextfile += 1






From kajirs4 at gmail.com  Mon Jul  9 12:30:37 2007
From: kajirs4 at gmail.com (J)
Date: Mon, 9 Jul 2007 14:30:37 -0400
Subject: [Twisted-Python] file transfers in twisted
Message-ID: <aae7b94f0707091130g43c1ac77ib7c03c6eba6ea948@mail.gmail.com>

Hi all,

  I was wondering how I could do file transfers via twisted? I looked
through the producers/consumers code and am wondering if there are any
examples out there that I can use ?

thanks,
J
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070709/36ceece4/attachment.html>

From conghh at Cybersoft-VN.com  Mon Jul  9 22:24:09 2007
From: conghh at Cybersoft-VN.com (Cong Hoang Huu)
Date: Tue, 10 Jul 2007 11:24:09 +0700
Subject: [Twisted-Python] Develop application by Twisted.
Message-ID: <CEBA5E865263FA4D8848D53D92E6A9AE25A644@DAKLAK.cybersoft-vn.com>

Thanks a lot.
Cong Hoang
 
> The current version of Twisted is distributed under what is known as
the "MIT
> license", as you can see for yourself by looking at the contents of
the source
> code package you have downloaded (see the LICENSE file, which every
source code
> file refers to).
 
> The MIT license is short and simple, and I recommend you read it for
yourself.
> There is no clause in the license that requires you to distribute the
Twisted
> source code at any time for any reason.  So the answer to your
question is "no",
> but be sure to read the license so that you abide by the conditions it
places on
> your right to redistribute the software.
 
> I would explain it in this email, but honestly the license is shorter
than the
> explanation I would write, so I think you'd be better off just reading
that.
 
> http://twistedmatrix.com/trac/browser/trunk/LICENSE
 
> -Andrew.

 

 

> Hi.
> 
> If our company develops an application by Twisted and distributes (or
sell)
> only binary packages to customer (without source code), is that ok? Do
we have
> to transfer source code to customer also?

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070710/4e1803be/attachment.html>

From phil at bubblehouse.org  Tue Jul 10 14:00:01 2007
From: phil at bubblehouse.org (Phil Christensen)
Date: Tue, 10 Jul 2007 16:00:01 -0400
Subject: [Twisted-Python] dropin.cache?
Message-ID: <116389FC-C330-43FA-B8CC-D702AE5BD912@bubblehouse.org>

So, I've been making great strides with my plugin system, using  
twisted's plugin support, but there's just one small issue I'm having  
that I can't seem to figure out.

Traceback (most recent call last):
   File "/Users/phil/Workspace/modu/modu/web/wsgi.py", line 16, in  
handler
     application = app.get_application(env)
   File "/Users/phil/Workspace/modu/modu/web/app.py", line 34, in  
get_application
     _load_plugins(env)
   File "/Users/phil/Workspace/modu/modu/web/app.py", line 53, in  
_load_plugins
     for site_plugin in plugin.getPlugins(ISite, modu.plugins):
   File "/Users/phil/Workspace/Twisted/twisted/plugin.py", line 186,  
in getPlugins
     allDropins = getCache(package)
--- <exception caught here> ---
   File "/Users/phil/Workspace/Twisted/twisted/plugin.py", line 165,  
in getCache
     dropinPath.setContent(pickle.dumps(dropinDotCache))
   File "/Users/phil/Workspace/Twisted/twisted/python/filepath.py",  
line 525, in setContent
     sib.open('w').write(content)
   File "/Users/phil/Workspace/Twisted/twisted/python/filepath.py",  
line 369, in open
     return open(self.path, mode+'b')
exceptions.IOError: [Errno 13] Permission denied: '/Users/phil/ 
Workspace/modu/examples/basic/modu/plugins/dropin.cache.new'


The issue is that my app doesn't have write access to the various  
plugin directories by default, as it runs as a restricted user. This  
is basically a configuration detail that my users will have to take  
care of, but I'd like to  be able to catch this error and provide a  
nicer message, or at least not have my logfile filled up with stack  
traces.

The problem is that putting a try/catch around getPlugins doesn't  
work, or doesn't appear to. I've looked at the code in getPlugins,  
and I can't figure out why the exception isn't being caught. Since  
I'm not actually using the reactor, I would assume there's no  
deferred trickery that needs to be done, so I'm at a bit of a loss.

Any help in this matter would be appreciated...

-phil



From exarkun at divmod.com  Tue Jul 10 14:48:48 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 10 Jul 2007 16:48:48 -0400
Subject: [Twisted-Python] dropin.cache?
In-Reply-To: <116389FC-C330-43FA-B8CC-D702AE5BD912@bubblehouse.org>
Message-ID: <20070710204848.4947.630874536.divmod.quotient.10252@ohm>

On Tue, 10 Jul 2007 16:00:01 -0400, Phil Christensen <phil at bubblehouse.org> wrote:
>So, I've been making great strides with my plugin system, using  twisted's 
>plugin support, but there's just one small issue I'm having  that I can't 
>seem to figure out.
>
> [snip traceback]
>
>The issue is that my app doesn't have write access to the various  plugin 
>directories by default, as it runs as a restricted user. This  is basically 
>a configuration detail that my users will have to take  care of, but I'd 
>like to  be able to catch this error and provide a  nicer message, or at 
>least not have my logfile filled up with stack  traces.

It only needs write access to update the cache, and it only needs to update
the cache when a new plugin is installed on the system or an old plugin is
removed.  So, you should be able to completely address this by regenerating
the cache at installation time (you can generate the cache simply by calling
getPlugins and exhausting the iterator it returns).

>
>The problem is that putting a try/catch around getPlugins doesn't  work, or 
>doesn't appear to. I've looked at the code in getPlugins,  and I can't 
>figure out why the exception isn't being caught. Since  I'm not actually 
>using the reactor, I would assume there's no  deferred trickery that needs 
>to be done, so I'm at a bit of a loss.
>
>Any help in this matter would be appreciated...
>

There's an open ticket for changing the reporting of this condition from a
full traceback to a shorter message:

  http://twistedmatrix.com/trac/ticket/2409

(Hmm, although that's not quite what I remembered, maybe there's another one
as well).

Jean-Paul



From wingfields at hotmail.com  Tue Jul 10 18:34:02 2007
From: wingfields at hotmail.com (s. w.)
Date: Wed, 11 Jul 2007 00:34:02 +0000
Subject: [Twisted-Python] Perspective Broker with blocking,
	non-thread-safe C api?
Message-ID: <BAY134-F29CA1934A2BAC15C968407C9040@phx.gbl>


I'd like to use Perspective Broker to serve a set of objects remotely.  
However, these objects wrap a non-thread-safe, blocking C api.  I'm new to 
Twisted, but I believe I understand correctly that the blocking C api needs 
to be accessed via threads in Twisted.

Given this, the only way I can think to use Perspective Broker would be to 
use a special PBServerFactory/Protocol that limited the server to one 
connected client.  For the use I would be putting the server to, this is 
maybe not as horrible as it sounds, but it is probably as ugly as it sounds.

I'm hoping there's something in PB that I haven't come across that can solve 
this problem in a more elegant way.  Any help or pointers would be greatly 
appreciated.

Thanks,
Steve

_________________________________________________________________
http://newlivehotmail.com




From phil at bubblehouse.org  Tue Jul 10 19:56:58 2007
From: phil at bubblehouse.org (Phil Christensen)
Date: Tue, 10 Jul 2007 21:56:58 -0400
Subject: [Twisted-Python] dropin.cache?
In-Reply-To: <20070710204848.4947.630874536.divmod.quotient.10252@ohm>
References: <20070710204848.4947.630874536.divmod.quotient.10252@ohm>
Message-ID: <093CD9A9-7EE5-4957-B7B6-99F7F4B67274@bubblehouse.org>

On Jul 10, 2007, at 4:48 PM, Jean-Paul Calderone wrote:
> On Tue, 10 Jul 2007 16:00:01 -0400, Phil Christensen  
> <phil at bubblehouse.org> wrote:
>> The problem is that putting a try/catch around getPlugins doesn't   
>> work, or doesn't appear to. I've looked at the code in  
>> getPlugins,  and I can't figure out why the exception isn't being  
>> caught. Since  I'm not actually using the reactor, I would assume  
>> there's no  deferred trickery that needs to be done, so I'm at a  
>> bit of a loss.
>>
>> Any help in this matter would be appreciated...
>>
>
> There's an open ticket for changing the reporting of this condition  
> from a
> full traceback to a shorter message:
>
>  http://twistedmatrix.com/trac/ticket/2409
>
> (Hmm, although that's not quite what I remembered, maybe there's  
> another one
> as well).

So, I now understand why I couldn't catch the error -- I just  
happened to be doing my own logging to stderr and thought the log  
messages I saw were an actual traceback.

I have a simple solution for this issue, if anyone would care to  
check out my patch attached to the ticket above.

I know this is a pretty minor issue, but it's tickling my "coder's  
OCD" ;-)...

-phil



From pbastov at gmail.com  Tue Jul 10 22:23:10 2007
From: pbastov at gmail.com (Pavel Bastov)
Date: Wed, 11 Jul 2007 10:23:10 +0600
Subject: [Twisted-Python] Application Start Up and Tear Down
In-Reply-To: <20070709133157.26384.240598309.divmod.xquotient.193@joule.divmod.com>
References: <eaf39e680707082149w4b948c20r3f0061b079bcb020@mail.gmail.com>
	<20070709055315.GF9243@steerpike.home.puzzling.org>
	<20070709133157.26384.240598309.divmod.xquotient.193@joule.divmod.com>
Message-ID: <eaf39e680707102123t6a5b8803nbad82ab7b55c5be3@mail.gmail.com>

Thanks all for your assistance,

the service subclassing way worked perfectly. Now I can handle several
protocols with the service and share common data among them.

On 7/9/07, glyph at divmod.com <glyph at divmod.com> wrote:
>
> On 05:53 am, andrew-twisted at puzzling.org wrote:
> >Pavel Bastov wrote:
> >>Hi,
> >>
> >>so far I've been using only one Factory in my application. So, all the
> >>intialization and deinitialization code was in startFactory() /
> >>stopFactory().
> >>
> >>Now I have to add another protocol with another factory. Is there a
> >>similar pair of methods for the application (server) where I can
> >>initialize resources (db pool, for example) upon startup and free them
> >>upon shutdown?
> >
> >Make your own Service subclass, and override startService/stopService.
>
> I just want to reinforce that this is really the *correct* answer, and
> the other suggestions (custom code before/after run(), manually calling
> addSystemEventTrigger) both tightly bind your application logic to the
> particular way your entire process starts up and shuts down, rather than
> having a discrete unit for your application.  (Think global vs. instance
> variables.)
>
> The service hierarchy has issues (privilegedStartService being the
> biggest one) but it is generally the most flexible, since you can start
> and stop services and groups of services without starting and stopping
> the entire process.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


-- 
Good luck,

Pavel Bastov
xooChat Evangelist and Team Leader
http://www.xoochat.com/



From pbastov at gmail.com  Tue Jul 10 22:26:13 2007
From: pbastov at gmail.com (Pavel Bastov)
Date: Wed, 11 Jul 2007 10:26:13 +0600
Subject: [Twisted-Python] A collection of protocol objects
Message-ID: <eaf39e680707102126r69c20bffo6e7f5fe43ea73a28@mail.gmail.com>

Hi all,

is there any way to iterate through the collection of protocol
objects? I need this to check for idle connections and close them if
necessary.

TIA

-- 
Good luck,

Pavel Bastov
xooChat Evangelist and Team Leader
http://www.xoochat.com/



From daniel.cuesta at iavante.es  Wed Jul 11 01:52:55 2007
From: daniel.cuesta at iavante.es (Daniel de la Cuesta)
Date: Wed, 11 Jul 2007 09:52:55 +0200
Subject: [Twisted-Python] XMLRPC Class in HTTP Server.
In-Reply-To: <20070709141407.4947.1888526620.divmod.quotient.9437@ohm>
References: <20070709141407.4947.1888526620.divmod.quotient.9437@ohm>
Message-ID: <46948C57.3090500@iavante.es>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070711/24efb4b2/attachment.html>

From p.mayers at imperial.ac.uk  Wed Jul 11 03:43:20 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 11 Jul 2007 10:43:20 +0100
Subject: [Twisted-Python] Perspective Broker with blocking,
	non-thread-safe C api?
In-Reply-To: <BAY134-F29CA1934A2BAC15C968407C9040@phx.gbl>
References: <BAY134-F29CA1934A2BAC15C968407C9040@phx.gbl>
Message-ID: <1184147001.2693.13.camel@localhost.localdomain>

On Wed, 2007-07-11 at 00:34 +0000, s. w. wrote:
> I'd like to use Perspective Broker to serve a set of objects remotely.  
> However, these objects wrap a non-thread-safe, blocking C api.  I'm new to 
> Twisted, but I believe I understand correctly that the blocking C api needs 
> to be accessed via threads in Twisted.
> 
> Given this, the only way I can think to use Perspective Broker would be to 
> use a special PBServerFactory/Protocol that limited the server to one 
> connected client.  For the use I would be putting the server to, this is 
> maybe not as horrible as it sounds, but it is probably as ugly as it sounds.
> 
> I'm hoping there's something in PB that I haven't come across that can solve 
> this problem in a more elegant way.  Any help or pointers would be greatly 
> appreciated.

It's not specific to PB - this applied to all of Twisted, and all of
Twisted has the same solution.

See "deferToThread" for examples of ways to call blocking APIs inside a
thread, and when the call returns the deferred will fire.

> 
> Thanks,
> Steve
> 
> _________________________________________________________________
> http://newlivehotmail.com
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From exarkun at divmod.com  Wed Jul 11 03:48:37 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 11 Jul 2007 05:48:37 -0400
Subject: [Twisted-Python] A collection of protocol objects
In-Reply-To: <eaf39e680707102126r69c20bffo6e7f5fe43ea73a28@mail.gmail.com>
Message-ID: <20070711094837.4947.1073649627.divmod.quotient.10425@ohm>

On Wed, 11 Jul 2007 10:26:13 +0600, Pavel Bastov <pbastov at gmail.com> wrote:
>Hi all,
>
>is there any way to iterate through the collection of protocol
>objects? I need this to check for idle connections and close them if
>necessary.

What collection of protocol objects?  (Hint: there isn't one, unless you
make one).

Jean-Paul



From pbastov at gmail.com  Wed Jul 11 08:20:37 2007
From: pbastov at gmail.com (Pavel Bastov)
Date: Wed, 11 Jul 2007 20:20:37 +0600
Subject: [Twisted-Python] A collection of protocol objects
In-Reply-To: <20070711094837.4947.1073649627.divmod.quotient.10425@ohm>
References: <eaf39e680707102126r69c20bffo6e7f5fe43ea73a28@mail.gmail.com>
	<20070711094837.4947.1073649627.divmod.quotient.10425@ohm>
Message-ID: <eaf39e680707110720h7356df3dt924d243b7a387ac4@mail.gmail.com>

Ah, ok I see. It should be maintained manually. Thanks.

On 7/11/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Wed, 11 Jul 2007 10:26:13 +0600, Pavel Bastov <pbastov at gmail.com> wrote:
> >Hi all,
> >
> >is there any way to iterate through the collection of protocol
> >objects? I need this to check for idle connections and close them if
> >necessary.
>
> What collection of protocol objects?  (Hint: there isn't one, unless you
> make one).
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


-- 
Good luck,

Pavel Bastov
xooChat Evangelist and Team Leader
http://www.xoochat.com/



From ellisonbg.net at gmail.com  Wed Jul 11 09:25:38 2007
From: ellisonbg.net at gmail.com (Brian Granger)
Date: Wed, 11 Jul 2007 09:25:38 -0600
Subject: [Twisted-Python] Perspective Broker with blocking,
	non-thread-safe C api?
In-Reply-To: <1184147001.2693.13.camel@localhost.localdomain>
References: <BAY134-F29CA1934A2BAC15C968407C9040@phx.gbl>
	<1184147001.2693.13.camel@localhost.localdomain>
Message-ID: <6ce0ac130707110825tfd4885fs3c20a2cc0485d192@mail.gmail.com>

Things are a bit more complicated that just calling deferToThread.

The reason is that is you call a blocking C api in the thread, the
Python interpreter will not be able to switch threads until the
blocking C calls....unless the C code releases the Global Interpreter
Lock.  Thus you have two choices:

1)  Make sure that the C code releases the GIL and call it using
deferToThread.  This is probably the best solution.

2) If you can't release the GIL - if for instance the C code makes
calls to the Python C API, then you have to do the following.  You can
simply call the block C code in the main thread.  This will block the
Twisted event loop while the C code runs.  To mask this blocking
behavior, you will need to have a client that takes this into account.
 You basically need a way of making sure that while that code is
running no other client makes a call to the server running the C code.
 You also have to make sure that the client that initiated the call
doesn't make any further calls until the first is done.

The way we usually handle this is to make a separate process that
manages a queue of commands to be executed on the server.  Clients
then connect to this manager, which in turns submits them to the
actual PB server at the appropriate time.  This is a pain, but it
works extremely well.

Hope that helps.

Brian
On 7/11/07, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> On Wed, 2007-07-11 at 00:34 +0000, s. w. wrote:
> > I'd like to use Perspective Broker to serve a set of objects remotely.
> > However, these objects wrap a non-thread-safe, blocking C api.  I'm new to
> > Twisted, but I believe I understand correctly that the blocking C api needs
> > to be accessed via threads in Twisted.
> >
> > Given this, the only way I can think to use Perspective Broker would be to
> > use a special PBServerFactory/Protocol that limited the server to one
> > connected client.  For the use I would be putting the server to, this is
> > maybe not as horrible as it sounds, but it is probably as ugly as it sounds.
> >
> > I'm hoping there's something in PB that I haven't come across that can solve
> > this problem in a more elegant way.  Any help or pointers would be greatly
> > appreciated.
>
> It's not specific to PB - this applied to all of Twisted, and all of
> Twisted has the same solution.
>
> See "deferToThread" for examples of ways to call blocking APIs inside a
> thread, and when the call returns the deferred will fire.
>
> >
> > Thanks,
> > Steve
> >
> > _________________________________________________________________
> > http://newlivehotmail.com
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From glyph at divmod.com  Wed Jul 11 09:38:14 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 11 Jul 2007 15:38:14 -0000
Subject: [Twisted-Python] Perspective Broker with blocking,
	non-thread-safe C api?
In-Reply-To: <6ce0ac130707110825tfd4885fs3c20a2cc0485d192@mail.gmail.com>
References: <BAY134-F29CA1934A2BAC15C968407C9040@phx.gbl>
	<1184147001.2693.13.camel@localhost.localdomain>
	<6ce0ac130707110825tfd4885fs3c20a2cc0485d192@mail.gmail.com>
Message-ID: <20070711153814.26384.1840649714.divmod.xquotient.456@joule.divmod.com>


On 03:25 pm, ellisonbg.net at gmail.com wrote:
>The reason is that is you call a blocking C api in the thread, the
>Python interpreter will not be able to switch threads until the
>blocking C calls....unless the C code releases the Global Interpreter
>Lock.  Thus you have two choices:
(1 and 2 snipped)
>The way we usually handle this is to make a separate process that
>manages a queue of commands to be executed on the server.  Clients
>then connect to this manager, which in turns submits them to the
>actual PB server at the appropriate time.  This is a pain, but it
>works extremely well.

That sounds like a viable "third choice", and I have a fourth ;).

Have the PB server itself spawn a subprocess (or multiple subprocesses!) 
dedicated to this particular API.  Then simply block in that (those) 
subprocess(es), and return Deferreds from your PB methods that wait for 
those requests to complete.

That way the PB server remains self-contained and you don't add the 
administrative overhead of setting up a separate server.



From db3l.net at gmail.com  Wed Jul 11 18:39:12 2007
From: db3l.net at gmail.com (David Bolen)
Date: Wed, 11 Jul 2007 20:39:12 -0400
Subject: [Twisted-Python] Re: How to receive a big stream data?
References: <5c6c8710706261902u347d25e0lc7375d23ef760dd5@mail.gmail.com>
	<28012bc60706270121k2bae8c8ey60f591e003cf8006@mail.gmail.com>
	<5c6c8710706270221u4f7571dbq511d9fe1ef746da8@mail.gmail.com>
	<5c6c8710707021840s522c5d10n657335582fd189@mail.gmail.com>
	<09CD42BF-7332-4234-B5BD-AB7B3C40DBD4@atlas.st>
	<5c6c8710707082331i31196904na42c81853b734057@mail.gmail.com>
Message-ID: <m21wfe5ubz.fsf@valheru.db3l.homeip.net>

"steven wang" <steven.zdwang at gmail.com> writes:

> But I want to receive binary data in my protocol.

Even if you start with a non-binary header, you can switch to
receiving binary information at any time by going using the raw mode
of most of the basic protocols.  And having some sort of ASCII header
prior to the raw data is often a very simple way to handle things
(something in common with a tremendous number of standard TCP-based
protocols).

Your original post had a fairly straight-forward ASCII header that I
think would probably be fine.  What you're probably missing is the
concept of switching to a raw binary receive mode which then switches
your protocol from getting data in its lineReceived method to having
rawDataReceived called.

For example, here's a slightly stripped pair of protocols (server and
client) that I'm currently using as part of a bigger project.  Most of
the communication is over a PB connection which the client uses to
perform operations on the server, one of which is editing job
information.  But jobs contain attached files (often very large
audio/video files), so committing changes to a job also involves
transmitting up any newly added files.  So after the client updates
the server's meta data, it initiates a separate set of file transfers
across a different port.

In my case, the header for a file transfer includes a session key
(which the protocol uses to reference the original PB-based job
session the client was using) along with a file key used for storage
(which uniquely references a specific file in the job).  The final
element is the total file size.  That is, upon connecting, the client
transmits a line such as:

    <session_uuid> <file_uuid> #######

where the two uuids are specific to the transfer underway (and help
with security since a random client isn't going to know the right
ids), and ######## is the overall file length.  After sending that
line (e.g., right after its final newline), the client just blasts up
the raw data.

The protocol is a simple LineReceiver based protocol, that receives
that information information as an ASCII initial line, after which it
switches to raw mode to receive the data.  Although the data length
could technically be inferred from when the client disconnects, having
it up front ensures I can detect a transfer that gets interrupted.

So on the server side you have:

          - - - - - - - - - - - - - - - - - - - - - - - - -

class FileIOProtocol(LineReceiver):

    def __init__(self):
        self.info = None
        self.outfile = None
        self.remain = 0
        self.crc = 0

    def lineReceived(self, line):
        logger.debug('FileIOProtocol:lineReceived:%s', line)
        sess_key, file_key, self.size = line.split()
        file_key = uuid.UUID(file_key)

        try:
            session_uuid = uuid.UUID(sess_key)
        except:
            logger.debug('FileIOProtocol:lineReceived Invalid session')
            self.transport.loseConnection()
            return

        self.job_session = self.factory.sessions.get(session_uuid)
        if not self.job_session:
            logger.debug('FileIOProtocol:lineReceived Invalid session')
            self.transport.loseConnection()
            return

        if not self.job_session.active:
            logger.debug('FileIOProtocol:lineReceived Stale session')
            self.transport.loseConnection()
            return

        # [db3l] The original code validates the individual file uuid here
        # resulting in self.job_file as job file object from the session
        
        if not self.job_file:
            logger.debug('FileIOProtocol:lineReceived Invalid file key')
            self.transport.loseConnection()
            return
            
        # Create the upload directory if not already present
        if not os.path.isdir(self.job_session.upload_dir):
            os.makedirs(self.job_session.upload_dir)

        self.outfilename = os.path.join(self.job_session.upload_dir,
                                        self.job_file['uuid'].hex)

        logger.debug('FileIOProtocol:lineReceived Receiving into %s',
                     self.outfilename)
        try:
            self.outfile = open(self.outfilename,'wb')
        except Exception, value:
            logger.debug('FileIOProtocol:lineReceived Unable to open file %s '
                         '(%s)', self.outfilename, value)
            self.transport.loseConnection()
            return

        self.remain = int(self.size)
        logger.debug('FileIOProtocol:lineReceived Entering raw mode: %s %s',
                     self.outfile, self.remain)
        self.setRawMode()

    def rawDataReceived(self, data):
        self.remain -= len(data)
        self.crc = crc32(data, self.crc)
        self.outfile.write(data)

    def connectionMade(self):
        LineReceiver.connectionMade(self)
        logger.debug('FileIOProtocol:connectionMade')

    def connectionLost(self, reason):
        LineReceiver.connectionLost(self, reason)
        logger.debug('FileIOProtocol:connectionLost')
        if self.outfile:
            self.outfile.close()

            if self.remain != 0:
                # Problem uploading - discard
                logger.debug('FileIOProtocol:connectionLost remain(%d)!=0',
                             self.remain)
                
                os.remove(self.outfilename)
            else:
                # Update job object with upload status
                self.job_file['uploaded'] = datetime.utcnow()
                self.job_file['size'] = self.size
                self.job_file['crc'] = self.crc


class FileIOFactory(ServerFactory):
    protocol = FileIOProtocol

    def __init__(self, db, sessions, options):
        self.db = db
        self.options = options
        self.sessions = sessions

          - - - - - - - - - - - - - - - - - - - - - - - - -

which is bound to an appropriate port on the server however you'd like.
I use code like:

    self.fileio = FileIOFactory(db, self.sessions, options)
    reactor.listenTCP(self.options['file_port'], self.fileio)


On the client side, I have an equivalent protocol that transmits up
the file.  It's run beneath a GUI, so keeps a reference to the GUI
controller object that might indicate it needs to cancel a transfer
mid-stream, as well as updating the controller during the transfer so
it can update a progress bar on screen.

It is also a LineReceiver based protocol, and uses the Twisted
FileSender object to do the raw data transfer (which is implemented as
a straight producer with the TCP socket being the consumer).  The
connectionMade method is where it transmits the ASCII header and then
institutes the raw data transfer.

          - - - - - - - - - - - - - - - - - - - - - - - - -


class TransferCancelled(Exception):
    """Exception for a user cancelling a transfer"""
    pass

class FileIOClient(LineReceiver):

    def __init__(self, path, sess_key, file_key, controller):
        self.path = path
        self.sess_key = sess_key
        self.file_key = file_key
        self.controller = controller

        self.infile = open(self.path, 'rb')
        self.insize = os.stat(self.path).st_size

        self.result = None
        self.completed = False

        self.controller.file_sent = 0
        self.controller.file_size = self.insize

    def _monitor(self, data):
        self.controller.file_sent += len(data)
        self.controller.total_sent += len(data)

        # Check with controller to see if we've been cancelled and abort
        # if so.
        if self.controller.cancel:
            print 'FileIOClient._monitor Cancelling'
            # Need to unregister the producer with the transport or it will
            # wait for it to finish before breaking the connection
            self.transport.unregisterProducer()
            self.transport.loseConnection()
            # Indicate a user cancelled result
            self.result = TransferCancelled('User cancelled transfer')

        return data

    def cbTransferCompleted(self, lastsent):
        self.completed = True
        self.transport.loseConnection()

    def connectionMade(self):
        self.transport.write('%s %s %s\r\n' % (str(self.sess_key),
                                               str(self.file_key),
                                               self.insize))
        sender = FileSender()
        sender.CHUNK_SIZE = 2 ** 16
        d = sender.beginFileTransfer(self.infile, self.transport,
                                     self._monitor)
        d.addCallback(self.cbTransferCompleted)

    def connectionLost(self, reason):
        LineReceiver.connectionLost(self, reason)
        print 'FileIOClient:connectionLost'
        self.infile.close()
        if self.completed:
            self.controller.completed.callback(self.result)
        else:
            self.controller.completed.errback(reason)

class FileIOClientFactory(ClientFactory):

    protocol = FileIOClient

    def __init__(self, path, sess_key, file_key, controller):
        self.path = path
        self.sess_key = sess_key
        self.file_key = file_key
        self.controller = controller
        
    def clientConnectionFailed(self, connector, reason):
        ClientFactory.clientConnectionFailed(self, connector, reason)
        self.controller.completed.errback(reason)

    def buildProtocol(self, addr):
        print 'buildProtocol'
        p = self.protocol(self.path, self.sess_key, self.file_key,
                          self.controller)
        p.factory = self
        return p

          - - - - - - - - - - - - - - - - - - - - - - - - -


Within the presentation layer controller on the client, initiating a
transfer is done with:

    def _transmitOne(self, address, port, path, sess_key, file_key):
        self.completed = defer.Deferred()
        f = FileIOClientFactory(path, sess_key, file_key, self)
        reactor.connectTCP(address, port, f)
        return self.completed

and the result is that self.completed fires (callback or errback) when
the transfer is done (which the controller uses to then initiate the
next transfer when there are a list of files to go up for a job).

While probably not exactly what you're trying to do, perhaps it'll
point you in the right direction.

-- David




From elicriffield at gmail.com  Wed Jul 11 23:52:56 2007
From: elicriffield at gmail.com (Eli Criffield)
Date: Thu, 12 Jul 2007 00:52:56 -0500
Subject: [Twisted-Python] conch command at a time
Message-ID: <18e3f33d0707112252q15fd35i5e177921caeb5f7d@mail.gmail.com>

Does anyone have an example of an conch code that executes one
command, process the results then executes another that maybe
different based on the output of the first. And continues processing
commands like that all in the same session. Almost like "expect".

Thats a bit different then the conch script itself in that it just
executes commands then sends you the output, and doesn't process it at
all.

Thats what I'm trying to accomplish, but i can't even find an example
where i could set a list of commands to run, then kick off a ssh and
execute the commands in order and return the results of all of them to
store off somewhere.

I'm not sure if using SSHSession or SSHUnixChannel would help to do
this because they have no documentation on what they do or how to use
them.

Eli Criffield



From kent.brake at gmail.com  Thu Jul 12 11:47:19 2007
From: kent.brake at gmail.com (kent brake)
Date: Thu, 12 Jul 2007 10:47:19 -0700
Subject: [Twisted-Python] ESMTP Authentication
Message-ID: <89d40a0e0707121047k2063ec7awfbf835890f6d2418@mail.gmail.com>

Hi,

I am trying to implement SMTP Auth using the twisted mail.esmtp class, but I
can't seem to figure out the right methods needed. I've added a challenger
to the ESMTP instance as a class:

self.challengers = {'LOGIN': KPLAINCredentials()}

But I can't seem to figure out what methods I need to implement in the
KPLAINCredentials class. Does anyone have a snippet of code that implements
LOGIN Auth that I could use for a reference or know the methods needed? I am
very confused by this call

  chal = self.challengers.get(parts[0].upper(), lambda: None)()

in esmtp.ext_Auth

Thanks in advance for any advice.

-Kent
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070712/b5d3fa78/attachment.html>

From challman at gmail.com  Thu Jul 12 13:06:49 2007
From: challman at gmail.com (Chris Hallman)
Date: Thu, 12 Jul 2007 15:06:49 -0400
Subject: [Twisted-Python] SSHv2 client script for Cisco routers
Message-ID: <9f68812f0707121206o245cce61l5098a8b5f6549fe9@mail.gmail.com>

Does anyone have an example of a SSHv2 client script? I need to write a
script that uses SSHv2 to execute multiple commands on hundreds of routers.
I already have a script that does this with the Telnetlib. I need to
transition to SSHv2.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070712/999b9333/attachment.html>

From elicriffield at gmail.com  Thu Jul 12 14:00:24 2007
From: elicriffield at gmail.com (Eli Criffield)
Date: Thu, 12 Jul 2007 15:00:24 -0500
Subject: [Twisted-Python] SSHv2 client script for Cisco routers
In-Reply-To: <9f68812f0707121206o245cce61l5098a8b5f6549fe9@mail.gmail.com>
References: <9f68812f0707121206o245cce61l5098a8b5f6549fe9@mail.gmail.com>
Message-ID: <18e3f33d0707121300l49850ddft83b7d78676527091@mail.gmail.com>

Thats exactly what I've been working on, a script to automate
connections to cisco switches, where you have to execute multiple
commands per connection (config t, then some commands ect...)

I emailed this list yesterday asking if anyone has some examples of
how to do that and no reply yet.

I'd like to get ssh worked into http://code.google.com/p/exscript/ .
Exscript does what your doing with telnetlib and uses  templates and
concurrent connections.


Eli Criffield

On 7/12/07, Chris Hallman <challman at gmail.com> wrote:
>
> Does anyone have an example of a SSHv2 client script? I need to write a
> script that uses SSHv2 to execute multiple commands on hundreds of routers.
> I already have a script that does this with the Telnetlib. I need to
> transition to SSHv2.
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



From wingfields at hotmail.com  Thu Jul 12 14:22:16 2007
From: wingfields at hotmail.com (s. w.)
Date: Thu, 12 Jul 2007 20:22:16 +0000
Subject: [Twisted-Python] Re: Perspective Broker with blocking,
	non-thread-safe C api?
In-Reply-To: <E1I8ebj-0006w7-Up@cube.twistedmatrix.com>
Message-ID: <BAY134-F226358F2CD99919F5AF793C9FC0@phx.gbl>



>On 03:25 pm, ellisonbg.net at gmail.com wrote:
> >The reason is that is you call a blocking C api in the thread, the
> >Python interpreter will not be able to switch threads until the
> >blocking C calls....unless the C code releases the Global Interpreter
> >Lock.  Thus you have two choices:
>(1 and 2 snipped)
> >The way we usually handle this is to make a separate process that
> >manages a queue of commands to be executed on the server.  Clients
> >then connect to this manager, which in turns submits them to the
> >actual PB server at the appropriate time.  This is a pain, but it
> >works extremely well.
>
>That sounds like a viable "third choice", and I have a fourth ;).
>
>Have the PB server itself spawn a subprocess (or multiple subprocesses!)
>dedicated to this particular API.  Then simply block in that (those)
>subprocess(es), and return Deferreds from your PB methods that wait for
>those requests to complete.
>
>That way the PB server remains self-contained and you don't add the
>administrative overhead of setting up a separate server.
>

Thanks for all the great suggestions.  Because of some restrictions imposed 
by the C api, I think I will try out the spawning of subprocesses.

I don't suppose PB does IPC by any chance? :)

Steve

_________________________________________________________________
Need a brain boost? Recharge with a stimulating game. Play now!� 
http://club.live.com/home.aspx?icid=club_hotmailtextlink1




From challman at gmail.com  Thu Jul 12 14:39:09 2007
From: challman at gmail.com (Chris Hallman)
Date: Thu, 12 Jul 2007 16:39:09 -0400
Subject: [Twisted-Python] SSHv2 client script for Cisco routers
In-Reply-To: <18e3f33d0707121300l49850ddft83b7d78676527091@mail.gmail.com>
References: <9f68812f0707121206o245cce61l5098a8b5f6549fe9@mail.gmail.com>
	<18e3f33d0707121300l49850ddft83b7d78676527091@mail.gmail.com>
Message-ID: <9f68812f0707121339xba9801dya7de435823170008@mail.gmail.com>

Here's one of my favorite programs to date (see attachment). It's a
multi-threaded ISDN testing program. Here's the workflow:

1. Connect to each head-end router and extract all the usernames for
testing.
2. Spawn up to N threads and telnet to each device.
3. Check for a layer-1 connection.
4. Check for an existing DBU connection.
5. Extract all interfaces for testing.
6. Execute a DBU test for each interface verifying a connection takes place
and an EIGRP peer establishes.

(It does some other things specific for our network.) It writes output to a
local log file and SNMP traps on failure and program completion. I really
need to get it working using SSH. I'm looking into Paramiko and Twisted,
however I'm not the best of programmers. I've been able to learn enough to
complete tasks such as this. Here's a simple program using Paramiko:

import paramiko
import time

client = paramiko.SSHClient()

# ignore host keys for the test
client.set_missing_host_key_policy(paramiko.MissingHostKeyPolicy())

client.connect('rtr3926', 22, 'user', 'passw')
(stdin, stdout, stderr) = client.exec_command('sh ver | i IOS')
print stdout.read()
#(stdin, stdout, stderr) = client.exec_command('sh ver | i IOS')
#print stdout.read()

The only problem is it drops the channel after the first "sh ver".


On 7/12/07, Eli Criffield <elicriffield at gmail.com> wrote:
>
> Thats exactly what I've been working on, a script to automate
> connections to cisco switches, where you have to execute multiple
> commands per connection (config t, then some commands ect...)
>
> I emailed this list yesterday asking if anyone has some examples of
> how to do that and no reply yet.
>
> I'd like to get ssh worked into http://code.google.com/p/exscript/ .
> Exscript does what your doing with telnetlib and uses  templates and
> concurrent connections.
>
>
> Eli Criffield
>
> On 7/12/07, Chris Hallman <challman at gmail.com> wrote:
> >
> > Does anyone have an example of a SSHv2 client script? I need to write a
> > script that uses SSHv2 to execute multiple commands on hundreds of
> routers.
> > I already have a script that does this with the Telnetlib. I need to
> > transition to SSHv2.
> >
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> >
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070712/f7f086a2/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: ISDNtest.py
Type: text/x-python
Size: 12873 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20070712/f7f086a2/attachment-0002.py>

From itamar at itamarst.org  Fri Jul 13 08:20:39 2007
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 13 Jul 2007 10:20:39 -0400
Subject: [Twisted-Python] Re: Perspective Broker with blocking,
	non-thread-safe C api?
In-Reply-To: <BAY134-F226358F2CD99919F5AF793C9FC0@phx.gbl>
References: <BAY134-F226358F2CD99919F5AF793C9FC0@phx.gbl>
Message-ID: <1184336439.26707.44.camel@localhost.localdomain>

On Thu, 2007-07-12 at 20:22 +0000, s. w. wrote:

> I don't suppose PB does IPC by any chance? :)

Sure - run it over a Unix socket using reactor.listen/connectUnix.




From pbastov at gmail.com  Fri Jul 13 21:13:36 2007
From: pbastov at gmail.com (Pavel Bastov)
Date: Sat, 14 Jul 2007 09:13:36 +0600
Subject: [Twisted-Python] adbpi + mysql + utf8 codec
Message-ID: <eaf39e680707132013j7bdcda53qce7448c94f43034d@mail.gmail.com>

Hi all,

while checking my server logs I found a lot of messages like this:

[Failure instance: Traceback: <type 'exceptions.UnicodeDecodeError'>:
'utf8' codec can't decode bytes in position 4-6: invalid data

What might be the cause of this and how do I fix it?

Thanks.

-- 
Good luck,

Pavel Bastov
xooChat Evangelist and Team Leader
http://www.xoochat.com/



From manlio_perillo at libero.it  Sat Jul 14 10:14:11 2007
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sat, 14 Jul 2007 18:14:11 +0200
Subject: [Twisted-Python] logging and Unicode strings
Message-ID: <4698F653.2020000@libero.it>

It seems that it is not possibile to pass Unicode strings to the logging 
system.


2007/07/14 18:10 CEST [HTTPChannel,0,127.0.0.1] <unicode instance at 
-1254556832 with str error Traceback (most recent call last):

           File 
"/usr/lib/python2.4/site-packages/twisted/python/reflect.py", line 463, 
in safe_str
             return str(o)

         UnicodeEncodeError: 'ascii' codec can't encode character 
u'\xf2' in position 31: ordinal not in range(128)
         >


Since I do not want to encode every string, I have changed safe_str:
def safe_str(o):
     try:
         return str(o)
     except:
         if isinstance(o, unicode):
             import sys
             encoding = sys.getdefaultencoding()
             return o.encode(encoding, 'backslashreplace')

         strExc = '\n'.join(traceback.format_exception(*sys.exc_info()))
         clsName = _determineClassName(o)
         obId = id(o)
         return '<%s instance at %s with str error %s>' % (
             clsName, obId, strExc)


Is this a feature or a bug?



Thanks and regards  Manlio Perillo



From twisted at claude.nl  Sat Jul 14 15:06:15 2007
From: twisted at claude.nl (Reinoud Elhorst)
Date: Sat, 14 Jul 2007 23:06:15 +0200
Subject: [Twisted-Python] Flash AMF and Twisted
References: 28012bc60706120506t44ef5e0dx4697b5863b2c746a@mail.gmail.com
Message-ID: <46993AC7.2050806@claude.nl>

I only read this message today. About a month ago, I started playing a
little with such a project myself. Actually the project is (the
millionth) media player on the Wii, but since progressive download on
the Wii works only for flv-files smaller than about 100M (it runs out of
memory else), I needed a streaming flv server.

I'm still trying to get a feel for best practices in Python, however it
does get the work done, it can streams flvs to flash player.

http://code.google.com/p/wiidiaplayer/

Just wanted to let you know.


On 2007-06-12 12:06, Arnar Birgisson wrote:
> Hi all,
>
> Re. this message:
> http://twistedmatrix.com/pipermail/twisted-python/2007-May/015373.html
>
> Has any work been done here? I'm facing a project that requires
> two-way communication between a Flex/Apollo app and a Twisted server.
> In my initial tests I used http and comet-like techniques but I'm not
> sure they are the most efficient way.
>
> I'm willing to help with the project - I've already dabbled a little
> in the DjangoAMF stuff.
>
> Arnar
>
>




From exarkun at twistedmatrix.com  Sat Jul 14 22:05:03 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 15 Jul 2007 04:05:03 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1184472303.25.122650238@twistedmatrix.com

Bug summary
______________________
Summary for 2007-07-08 through 2007-07-15
Bugs opened: 7    Bugs closed: 6  Total open bugs: 985 (+1)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +2  |Highest:  -2          |Core:      -1          
|Enhancement:  -1  |Normal:   +6          |Foolscap:  +2          
|Task:         +2  |Low:      -1          |Web2:      +1          
                                          |Website:   +2          
                                          |Words:     -1          


New / Reopened Bugs
______________________
                    ===== Normal =====
[#2730] Documentation for CertificateOptions.__init__'s caCerts param mentions a non-existant caCertFile param. (opened by dreid)
    defect          core       http://twistedmatrix.com/trac/ticket/2730

[#2731] foolscap: trivial fix (remove path separator) for test failing on windows (opened by strank)
    defect          foolscap   http://twistedmatrix.com/trac/ticket/2731

[#2732] foolscap: find actual exception types in CopiedFailure (opened by strank)
    enhancement     foolscap   http://twistedmatrix.com/trac/ticket/2732

[#2733] test the changes I just made to commit_bot et cetera (opened by exarkun) (CLOSED, fixed)
    task            website    http://twistedmatrix.com/trac/ticket/2733

[#2734] Access control mechanism for web2 (opened by Tv)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/2734

[#2733] test the changes I just made to commit_bot et cetera (opened by exarkun) (CLOSED, fixed)
    task            website    http://twistedmatrix.com/trac/ticket/2733

[#2733] test the changes I just made to commit_bot et cetera (opened by exarkun) (CLOSED, fixed)
    task            website    http://twistedmatrix.com/trac/ticket/2733



Closed Bugs
______________________
                    ===== Highest =====
[#2502] 'and' and 'or' operator suport for xpath (opened by jack, closed by ralphm, fixed)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2502

[#1840] clearly, unambiguously, and centrally document development procedures (opened by glyph, closed by glyph, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1840

                    ===== Normal =====
[#2733] test the changes I just made to commit_bot et cetera (opened by exarkun, closed by exarkun, fixed)
    task            website    http://twistedmatrix.com/trac/ticket/2733

[#2733] test the changes I just made to commit_bot et cetera (opened by exarkun, closed by exarkun, fixed)
    task            website    http://twistedmatrix.com/trac/ticket/2733

[#2733] test the changes I just made to commit_bot et cetera (opened by exarkun, closed by exarkun, fixed)
    task            website    http://twistedmatrix.com/trac/ticket/2733

                    ===== Low =====
[#2038] Make the pypy builder work (opened by jerub, closed by exarkun, invalid)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2038



Ticket Lifetime Stats
----------------------
Oldest open ticket - [#38] Should be a way to create documentation aliases (since 2003-07-12 16:08:03).
Newest open ticket - [#2734] Access control mechanism for web2 (since 2007-07-11 17:03:21).

Mean open ticket age: 487 days, 15:58:38.699575.
Median: 373 days, 12:38:59.124956.
Standard deviation: 391 days, 0:56:35.878258.
Interquartile range: 477 days, 9:45:08.

Mean time between ticket creation and ticket resolution: 119 days, 20:57:26.629088.
Median: 14 days, 10:59:04.
Standard deviation is 223 days, 11:04:36.097636.
The interquartile range is 125 days, 12:17:18.

Mean time spent in review: 58 days, 19:06:30.186814.
Median: 4 days, 5:45:01.
Standard deviation: 126 days, 6:10:02.052516.
Interquartile range: 25 days, 23:46:15.

Mean number of times a ticket is reviewed: 1.79586563307.
Median: 1
Standard deviation: 1.38175017749.
Interquartile range: 1.




From arnarbi at gmail.com  Sun Jul 15 17:32:41 2007
From: arnarbi at gmail.com (Arnar Birgisson)
Date: Sun, 15 Jul 2007 23:32:41 +0000
Subject: [Twisted-Python] [OT] Flash AMF and Twisted
In-Reply-To: <46993AC7.2050806@claude.nl>
References: <46993AC7.2050806@claude.nl>
Message-ID: <28012bc60707151632w1be1438fi41676c35b182150@mail.gmail.com>

On 7/14/07, Reinoud Elhorst <twisted at claude.nl> wrote:
> I only read this message today. About a month ago, I started playing a
> little with such a project myself. Actually the project is (the
> millionth) media player on the Wii, but since progressive download on
> the Wii works only for flv-files smaller than about 100M (it runs out of
> memory else), I needed a streaming flv server.
>
> I'm still trying to get a feel for best practices in Python, however it
> does get the work done, it can streams flvs to flash player.
>
> http://code.google.com/p/wiidiaplayer/
>
> Just wanted to let you know.

Thanks!

Uhh.. I just took a look at your code and though "he's doing this
stuff exactly as we did" - until I realized it was my code :/ - I
guess that's partly our fault for not including the license disclaimer
in our experimental files. To be clear, you are free to copy the code
as you like - but please include the copyright notice somewhere (our
code is MIT licensed).

On the other hand, your RTMP stuff is something we are planning on
implementing in RTMPy. I would much appreciate it if you were willing
to join our project and help us out, since your input would definitely
be of great value. Our page is at http://dev.collab.com/rtmpy (seems
to be down atm) and our ML is at
http://lists.collab.com/mailman/listinfo/rtmpy.

Arnar



From twisted at claude.nl  Mon Jul 16 02:08:41 2007
From: twisted at claude.nl (Reinoud Elhorst)
Date: Mon, 16 Jul 2007 10:08:41 +0200
Subject: [Twisted-Python] [OT] Flash AMF and Twisted
In-Reply-To: <28012bc60707151632w1be1438fi41676c35b182150@mail.gmail.com>
References: <46993AC7.2050806@claude.nl>
	<28012bc60707151632w1be1438fi41676c35b182150@mail.gmail.com>
Message-ID: <469B2789.3000803@claude.nl>

Arnar Birgisson wrote:
> On 7/14/07, Reinoud Elhorst <twisted at claude.nl> wrote:
>> I only read this message today. About a month ago, I started playing a
>> little with such a project myself. Actually the project is (the
>> millionth) media player on the Wii, but since progressive download on
>> the Wii works only for flv-files smaller than about 100M (it runs out of
>> memory else), I needed a streaming flv server.
>>
>> I'm still trying to get a feel for best practices in Python, however it
>> does get the work done, it can streams flvs to flash player.
>>
>> http://code.google.com/p/wiidiaplayer/
>>
>> Just wanted to let you know.
>
> Thanks!
>
> Uhh.. I just took a look at your code and though "he's doing this
> stuff exactly as we did" - until I realized it was my code :/ - I
> guess that's partly our fault for not including the license disclaimer
> in our experimental files. To be clear, you are free to copy the code
> as you like - but please include the copyright notice somewhere (our
> code is MIT licensed).
>
> On the other hand, your RTMP stuff is something we are planning on
> implementing in RTMPy. I would much appreciate it if you were willing
> to join our project and help us out, since your input would definitely
> be of great value. Our page is at http://dev.collab.com/rtmpy (seems
> to be down atm) and our ML is at
> http://lists.collab.com/mailman/listinfo/rtmpy.
>
> Arnar
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
OK, Sorry about the copyright message. I was using Django's AMF parser, 
but it had a bug (undefined type 6, by now I realise that it should just 
return None), I put in your amf parser yesterday to see how it would go 
(and, too be honest, didn't know the details of the MIT licence...). 
What is the exact wording of the copyright you'd like me to include? 
(Actually I guess I should double check django's code license too.....)

The rest of the rtmpcode is a port from 
http://code.google.com/p/haxevideo/, mixed with a lot of my own to 
server specific file types.

I joined the rtmpy lists, hopefully I can be of some value!

Reinoud





From daedalus at eigenmagic.com  Mon Jul 16 03:01:52 2007
From: daedalus at eigenmagic.com (Justin Warren)
Date: Mon, 16 Jul 2007 19:01:52 +1000
Subject: [Twisted-Python] SSHv2 client script for Cisco routers
In-Reply-To: <18e3f33d0707121300l49850ddft83b7d78676527091@mail.gmail.com>
References: <9f68812f0707121206o245cce61l5098a8b5f6549fe9@mail.gmail.com>
	<18e3f33d0707121300l49850ddft83b7d78676527091@mail.gmail.com>
Message-ID: <1184576512.2419.39.camel@localhost>

On Thu, 2007-07-12 at 15:00 -0500, Eli Criffield wrote:
> Thats exactly what I've been working on, a script to automate
> connections to cisco switches, where you have to execute multiple
> commands per connection (config t, then some commands ect...)

Hmm. I have code I didn't quite manage to publish last weekend does all
this and more. The current version breaks out to commandline via a
Process to run ssh, rather than implementing the SSH protocol itself,
though.

> I'd like to get ssh worked into http://code.google.com/p/exscript/ .
> Exscript does what your doing with telnetlib and uses  templates and
> concurrent connections.

This looks neat. I'll have to check it out to make sure I'm not
duplicating effort, however, I think I'm attacking this problem from a
different direction. If you're interested, read on. If not, stop now.

*ahem*

I want to automate change implementations. I'm sick of poorly controlled
changes being badly implemented in production environments, with no
backout plans. I'm sick of operators cutting and pasting from Notepad to
run commands over a telnet session. I want to be able to take a test lab
from simulation A to simulation B without having to use 9 different
admin tools.

This needs to work with multiple, different pieces of kit: NetApp,
Cisco, *nix boxen, Windows, etc. Each needs to be talked to slightly
differently.

Expect scripts solve part of the problem: templated communication to
perform a specific action. I've taken things one step further. I've
built a change management framework around this idea. There are 3 major
objects:

Devices: Things that need to have their state changed.
Provisioners: Things that communicate with Devices, in order to
implement Changes.
Changes: A series of actions, applied by a Provisioner, to a list of
Devices, to change their state.

A change consists of 6 major steps:

1. Pre-implementation, to check that the change is implementable, based
on the current state of a device.
2. Implementation, actually applying the change.
3. Post-Implementation verification. Make sure the change worked
correctly.

and then, if something goes wrong somewhere

4. Pre-backout, check that the change can be backed out.
5. Backout, actually backing out the change.
6. Post-backout verification, to make sure the backout was successful.

So, you can define a list of Change templates using variable
substitution, and then these changes can be applied to a list of devices
by using a set of Provisioners that know how to communicate to these
Devices.

Changes can have dependencies, so you can chain them together into a
tree of arbitrary complexity. Using the magic of twisted Deferreds, you
can run changes serially, or in parallel, limited only by the dependency
tree.

So, after that rather lengthy blurb, is anyone interested in this? Or am
I reinventing the wheel? I looked around for something similar in the
FOSS world a couple of months back, but everything I saw seemed to be
*nix centered and didn't do Cisco or NetApp.

Email me off list if you want this thing, so I know whether to try
harder to find some spare hours, or if it can wait a few weeks.

-- 
Justin Warren <daedalus at eigenmagic.com>



From osmaker at gmail.com  Mon Jul 16 03:55:07 2007
From: osmaker at gmail.com (Kyle Johnson)
Date: Mon, 16 Jul 2007 02:55:07 -0700
Subject: [Twisted-Python] FTP/VFS -- registerProducer error
Message-ID: <e68bced10707160255t55a610acra08eb3ba732ae97f@mail.gmail.com>

Modeling my code off the FTP server example
(http://twistedmatrix.com/trac/attachment/ticket/1579/ftp_server_example.py),
I coded my own FTPRealm class to use an inmem vfs instead of the local
filesystem.

I can browse and download data from it without issue, but anytime I
attempt to upload a file, I get this error:
File "twisted/protocols/ftp.py", line 421, in registerConsumer
    self._cons.registerProducer(self, True)
exceptions.AttributeError: _FileToConsumerAdapter instance has no
attribute 'registerProducer'


I'm setting up the avatar with the line:
avatar = FileSystemToIFTPShellAdaptor(pathutils.FileSystem(inmem.FakeDirectory()))

Full code is available here: http://rafb.net/p/FgTbiP80.html



Any help would be greatly appreciated.



From therve at free.fr  Mon Jul 16 04:26:39 2007
From: therve at free.fr (Thomas =?iso-8859-1?b?SGVyduk=?=)
Date: Mon, 16 Jul 2007 12:26:39 +0200
Subject: [Twisted-Python] FTP/VFS -- registerProducer error
In-Reply-To: <e68bced10707160255t55a610acra08eb3ba732ae97f@mail.gmail.com>
References: <e68bced10707160255t55a610acra08eb3ba732ae97f@mail.gmail.com>
Message-ID: <20070716122639.ean3kjw0pwsg080c@wasabox.wasabout.net>

Quoting Kyle Johnson <osmaker at gmail.com>:

> Modeling my code off the FTP server example
> (http://twistedmatrix.com/trac/attachment/ticket/1579/ftp_server_example.py),
> I coded my own FTPRealm class to use an inmem vfs instead of the local
> filesystem.
>
> I can browse and download data from it without issue, but anytime I
> attempt to upload a file, I get this error:
> File "twisted/protocols/ftp.py", line 421, in registerConsumer
>    self._cons.registerProducer(self, True)
> exceptions.AttributeError: _FileToConsumerAdapter instance has no
> attribute 'registerProducer'
>
>
> I'm setting up the avatar with the line:
> avatar =
> FileSystemToIFTPShellAdaptor(pathutils.FileSystem(inmem.FakeDirectory()))
>
> Full code is available here: http://rafb.net/p/FgTbiP80.html
>
>
>
> Any help would be greatly appreciated.

I may be wrong, but this looks like a bug, and I fill one here:

http://twistedmatrix.com/trac/ticket/2735

-- 
Thomas




From daedalus at eigenmagic.com  Mon Jul 16 15:36:31 2007
From: daedalus at eigenmagic.com (Justin Warren)
Date: Tue, 17 Jul 2007 07:36:31 +1000
Subject: [Twisted-Python] SSHv2 client script for Cisco routers
In-Reply-To: <9f68812f0707121206o245cce61l5098a8b5f6549fe9@mail.gmail.com>
References: <9f68812f0707121206o245cce61l5098a8b5f6549fe9@mail.gmail.com>
Message-ID: <1184621791.26559.6.camel@fnord.melbourne.eigenmagic.net>

On Thu, 2007-07-12 at 15:06 -0400, Chris Hallman wrote:
> 
> Does anyone have an example of a SSHv2 client script? I need to write
> a script that uses SSHv2 to execute multiple commands on hundreds of
> routers. I already have a script that does this with the Telnetlib. I
> need to transition to SSHv2. 

I had another thought about this: I implemented TLS for BEEPy, so you
could have a look at lib/beepy/transports/tls.py to see how I added TLS
support to the base class. I'm subclassing LineReceiver, so if you
ignore all the custom BEEP stuff, it might help.

You can get the code via http://beepy.sourceforge.net 

-- 
Justin Warren <daedalus at eigenmagic.com>



From aryeh at bigfoot.com  Tue Jul 17 02:41:07 2007
From: aryeh at bigfoot.com (Arye)
Date: Tue, 17 Jul 2007 10:41:07 +0200
Subject: [Twisted-Python] Twisted server / MS .NET client
Message-ID: <6f63a0ad0707170141o378e7594gd92ec6fda937b52b@mail.gmail.com>

Hello all,

This seems more a .NET issue since the server runs fine
and returns a correct SOAP envelope but I am still asking
my question...

We have a basic Twisted SOAP server with an "echo" method
that simply returns it's argument. (Typically a string).
A client written with SOAPpy communicates fine with this
server. However a C# client in .NET seems unable to
read the echoed string.

Any ideas someone might have would be greatly appreciated.
Arye.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070717/60c58716/attachment.html>

From adelagon at gmail.com  Tue Jul 17 03:41:29 2007
From: adelagon at gmail.com (Alvin Delagon)
Date: Tue, 17 Jul 2007 17:41:29 +0800
Subject: [Twisted-Python] Twisted server / MS .NET client
In-Reply-To: <6f63a0ad0707170141o378e7594gd92ec6fda937b52b@mail.gmail.com>
References: <6f63a0ad0707170141o378e7594gd92ec6fda937b52b@mail.gmail.com>
Message-ID: <7a01f6c00707170241lb4496dmaba5b7b6b46c41be@mail.gmail.com>

I had a similar interoperability issue a long time ago. I was trying to
interface with a SOAP server written in .NET using SOAPpy. The xml is
properly received but it seems SOAPpy doesn't like the format causing my
python SOAP client to die. (Since I don't much time to fix it I opted to use
perl's SOAP::Lite which was quite messy but it worked).

I believe the problem is in your .NET XML parser. What you can do is write a
logic to dump the received XML and examine it.

On 7/17/07, Arye <aryeh at bigfoot.com> wrote:
>
> Hello all,
>
> This seems more a .NET issue since the server runs fine
> and returns a correct SOAP envelope but I am still asking
> my question...
>
> We have a basic Twisted SOAP server with an "echo" method
> that simply returns it's argument. (Typically a string).
> A client written with SOAPpy communicates fine with this
> server. However a C# client in .NET seems unable to
> read the echoed string.
>
> Any ideas someone might have would be greatly appreciated.
> Arye.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070717/699a3699/attachment.html>

From Paul_S_Johnson at mnb.uscourts.gov  Tue Jul 17 10:10:31 2007
From: Paul_S_Johnson at mnb.uscourts.gov (Paul_S_Johnson at mnb.uscourts.gov)
Date: Tue, 17 Jul 2007 11:10:31 -0500
Subject: [Twisted-Python] Making a persistent SSH connection for a GUI
Message-ID: <OF2194EE6F.A8DDB154-ON8625731B.0057DB6A-8625731B.005934AD@uscmail.uscourts.gov>

I am not new to Python but am to Twisted. I am also no guru when it comes 
to complex OO in Python.

I have a PythonCard app that's a dashboard-like app and have it opening 
child windows that open SSH connections to various servers. I see plenty 
of conch examples of "open, get and close" but I would like to keep the 
connection to the server persistent so avoid the necessary connection 
overhead each time I want to fetch info from a server from the parent 
window.

Does anyone have an example of a persistent conch connection inside 
wxPython or similar GUI? I have scoured the web and come up empty handed 
though I found a few shreds that have part of the answer. I've tried to 
tweak the nonpersistent examples, but making my way through four layers of 
subclasses is a bit daunting.

Any help much appreciated.

Paul.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070717/4bf730fe/attachment.html>

From paulswartz at gmail.com  Tue Jul 17 10:40:16 2007
From: paulswartz at gmail.com (Paul Swartz)
Date: Tue, 17 Jul 2007 12:40:16 -0400
Subject: [Twisted-Python] Making a persistent SSH connection for a GUI
In-Reply-To: <OF2194EE6F.A8DDB154-ON8625731B.0057DB6A-8625731B.005934AD@uscmail.uscourts.gov>
References: <OF2194EE6F.A8DDB154-ON8625731B.0057DB6A-8625731B.005934AD@uscmail.uscourts.gov>
Message-ID: <324cfb540707170940v6d379620o694ac2746cb34def@mail.gmail.com>

On 7/17/07, Paul_S_Johnson at mnb.uscourts.gov
<Paul_S_Johnson at mnb.uscourts.gov> wrote:
> Does anyone have an example of a persistent conch connection inside wxPython
> or similar GUI? I have scoured the web and come up empty handed though I
> found a few shreds that have part of the answer. I've tried to tweak the
> nonpersistent examples, but making my way through four layers of subclasses
> is a bit daunting.

Yeah, I'm working on that :)  The class that you'll want to hold onto
is SSHConnection, because that's the one that you'll open channels
through.  The others aren't important once you've used them to get an
SSHConnection.

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin



From andy at thecablelounge.com  Tue Jul 17 12:10:49 2007
From: andy at thecablelounge.com (Andy Gayton)
Date: Tue, 17 Jul 2007 11:10:49 -0700
Subject: [Twisted-Python] VFS Status
Message-ID: <469D0629.9010301@thecablelounge.com>

Hey guys,

VFS has languished in a state of neglect for the last 2 years.  What is 
currently in the repo is the output of 2 and a bit sprints - and some 
patches from canonical so it works for their immediate needs for launch pad.

In retrospect - we got a bit excited that first sprint in Hobart, and we 
probably shouldn't have pushed what we had into the main twisted repo 
until I could show the commitment to get it into a more solid form.

VFS trunk, currently defines a synchronous API.  The API isn't complete. 
   The filesystem backend uses its own utils, instead of the established 
twisted.python.filepath. Variable naming is all over the place, and the 
code quality is pretty poor - coming from a sprint were the focus was on 
how much could we get working before the weekend is out.

The branch to rectify these issues is: branches/makeVFSAsync-1223-2

Things done so far in the branch:

  * The API is better defined and is async.  There's still some debate 
over the API, particularly over meta-data.  But I think its a good step 
forward and if merged the interface could be upgraded from obscenely 
unstable to unstable.

  * The memory and filesystem backends have been ported to meet the new API.

  * The filesystem implementation uses twisted.python.filepath for most 
operations.

Things still left to do for the branch to be merged:

  * clean up the adapter tests: http://twistedmatrix.com/trac/ticket/1264
  * port the existing adapters to use the new async backends
  * clean up variable/module naming to be more consistent
  * remove all of the now unused code
  * ensure all patches since branching from canonical are incorporated

cheers,
Andy.







From aryeh at bigfoot.com  Tue Jul 17 13:30:41 2007
From: aryeh at bigfoot.com (Arye)
Date: Tue, 17 Jul 2007 21:30:41 +0200
Subject: [Twisted-Python] Twisted server / MS .NET client
Message-ID: <6f63a0ad0707171230j7ddeb582h3e47c9215da2eded@mail.gmail.com>

Hello and thanks for your input,

In fact it seems that this was a WSDL definition issue.
Newer .NET software prefers to use document/literal style
and it looks like Twisted uses the older rpc/encoded style
at least with soapPy. I will need to swich to ZSI for that.

All the best,
Arye.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070717/f957790b/attachment.html>

From glyph at divmod.com  Tue Jul 17 13:41:45 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 17 Jul 2007 19:41:45 -0000
Subject: [Twisted-Python] VFS Status
In-Reply-To: <469D0629.9010301@thecablelounge.com>
References: <469D0629.9010301@thecablelounge.com>
Message-ID: <20070717194145.26384.2097379418.divmod.xquotient.862@joule.divmod.com>

On 06:10 pm, andy at thecablelounge.com wrote:
>The branch to rectify these issues is: branches/makeVFSAsync-1223-2

Hi Andy!  Thanks so much for writing up this update so that everyone 
knows what's going on.  Makes me ashamed that I have so many things I 
need to do this for, which I haven't :).
>Things done so far in the branch:

(...)
>Things still left to do for the branch to be merged:
>
>  * clean up the adapter tests: 
>http://twistedmatrix.com/trac/ticket/1264
>  * port the existing adapters to use the new async backends
>  * clean up variable/module naming to be more consistent
>  * remove all of the now unused code
>  * ensure all patches since branching from canonical are incorporated

I would strongly encourage interested members of the community to 
contribute patches against that branch which do these things and attach 
them to the various tickets mentioned here.  Obviously the people who 
are using and working on VFS the most have a severely limited amount of 
time to spend on it, so every little bit helps!



From bernat at luffy.cx  Thu Jul 19 01:15:27 2007
From: bernat at luffy.cx (Vincent Bernat)
Date: Thu, 19 Jul 2007 09:15:27 +0200
Subject: [Twisted-Python] twisted.plugin
Message-ID: <85002d1ae03dc0011994a14ae5a55931@imap.luffy.cx>


Hi !

I am trying to use twisted.plugin with no luck. Here is how I do:

I have a class IServicePlugin that inherits from Interface.
In some package x.y.z (with empty __init__.py), I have a module w
containing a
class c inheriting of object and implementing IPlugin and IServicePlugin.
To
load plugins, here is what I do:

import x.y.z as package
for plugin in getPlugins(IServicePlugin, package):
  print repr(plugin)

But I get nothing.

How can I debug this ? twisted.plugin is filled with black magic for me.
;-)

dropin.cache contains the string x.y.z.w but nothing about class c

Thanks.




From pablo at minimoesfuerzo.org  Thu Jul 19 01:28:37 2007
From: pablo at minimoesfuerzo.org (Pablo =?ISO-8859-1?Q?Mart=ED?=)
Date: Thu, 19 Jul 2007 09:28:37 +0200
Subject: [Twisted-Python] twisted.plugin
In-Reply-To: <85002d1ae03dc0011994a14ae5a55931@imap.luffy.cx>
References: <85002d1ae03dc0011994a14ae5a55931@imap.luffy.cx>
Message-ID: <1184830117.5999.2.camel@localhost>

On Thu, 2007-07-19 at 09:15 +0200, Vincent Bernat wrote:
> Hi !
> 
> I am trying to use twisted.plugin with no luck. Here is how I do:
> 
> I have a class IServicePlugin that inherits from Interface.
> In some package x.y.z (with empty __init__.py), I have a module w
> containing a
> class c inheriting of object and implementing IPlugin and IServicePlugin.
> To
> load plugins, here is what I do:
> 
> import x.y.z as package
> for plugin in getPlugins(IServicePlugin, package):
>   print repr(plugin)
> 
> But I get nothing.

Add an instance of your plugin at the end of your file, that should do.

Pablo




From bernat at luffy.cx  Thu Jul 19 01:54:54 2007
From: bernat at luffy.cx (Vincent Bernat)
Date: Thu, 19 Jul 2007 09:54:54 +0200
Subject: [Twisted-Python] twisted.plugin
In-Reply-To: <1184830117.5999.2.camel@localhost>
References: <1184830117.5999.2.camel@localhost>
Message-ID: <b186ed57e9affa7992a3c54fb3ccf9d0@imap.luffy.cx>


On Thu, 19 Jul 2007 09:28:37 +0200, Pablo Martí <pablo at minimoesfuerzo.org>
wrote:

> Add an instance of your plugin at the end of your file, that should do.

Thanks, that works. I did not pay enough attention to this point in the
howto.




From warner at lothar.com  Thu Jul 19 13:54:34 2007
From: warner at lothar.com (Brian Warner)
Date: Thu, 19 Jul 2007 12:54:34 -0700
Subject: [Twisted-Python] schemas (in Zope and Foolscap)
In-Reply-To: <468B6888.9090802@pangalactic.us> (Stephen Waterbury's message of
	"Wed\, 04 Jul 2007 05\:29\:44 -0400")
References: <468B6888.9090802@pangalactic.us>
Message-ID: <87hco088zp.fsf@lothar.com>


[my apologies if this gets duplicated, I've been having SMTP problems]

Stephen Waterbury <waterbug at pangalactic.us> writes:

> I am in the process of converting some of my code to use zope.schema
> instead of a similar thing that I independently invented.  Since I am
> also planning on using Foolscap, and since Foolscap has a schema
> module, I compared zope.schema and foolscap.schema, and to me they
> seem to have much overlap in design intent.  In particular, in the
> zope.schema use cases ...

> So I was wondering -- would it make sense to use zope.schema
> in Foolscap?

Yeah, that sounds quite intriguing. The Foolscap schemas serve a number of
similar purposes:

#1: provide a clear place to document a program's remote interfaces. This
    role is aimed at humans, not programs.

#2: make it convenient to enforce those interfaces on the receiving end.. by
    relying upon the guards, the code that actually does stuff is easier to
    read and easier to analyze for other potential problems

#3: enforce those interfaces on the sending end, to bring the discovery of
    programming errors closer to their cause

#4: enforce those interfaces at the receiving *wire*, to mitigate
    resource-exhaustion attacks

#1 is satisfied by pretty much anything, as it's more a set of documentation
#conventions than anything else. The existing zope.interface.Interface class
#does this pretty well.

The rest require that the interfaces be machine-parseable. I enhanced z.i's
Interface (in foolscap.RemoteInterface) to allow the arguments and return
values to have meaning.. if zope.schema does something similar, I'd love to
take a look at it and see if it can capture the same expressiveness.

I'm undecided as to whether #4 is a good idea or not. It seemed like a good
idea when I first started, but I've had some smart people tell me it's not
the best place to attempt to solve DoS problems. Worse yet, the
implementation is so incomplete that I've personally had to disable schema
checking on things that would otherwise be useful (in particular I think a
"PolyConstraint" in which the two branches are both containers fails to match
the tokens on the wire correctly, even though such a thing would be quite
useful just at the post-serialization phase). So I'm tempted to drop #4 as a
design criterion and if z.s can represent enough to make that work, great, if
not, drop the feature.

> A nice practical factor is that zope.schema has been packaged as
> a separate namespace module, similarly to zope.interface.

I have to admit that I'm slightly hesitant to add a new dependency. But maybe
it isn't too big or too unwieldy. There doesn't seem to be a debian package
for it, though..

But I'll definitely check it out. Thanks for the suggestion!

 -Brian



From Paul_S_Johnson at mnb.uscourts.gov  Thu Jul 19 14:08:53 2007
From: Paul_S_Johnson at mnb.uscourts.gov (Paul_S_Johnson at mnb.uscourts.gov)
Date: Thu, 19 Jul 2007 15:08:53 -0500
Subject: [Twisted-Python] Making a persistent SSH connection for a GUI
In-Reply-To: <324cfb540707170940v6d379620o694ac2746cb34def@mail.gmail.com>
Message-ID: <OF69A6B8AC.A75BE7BF-ON8625731D.006E0B56-8625731D.006F07DF@uscmail.uscourts.gov>

twisted-python-bounces at twistedmatrix.com wrote on 07/17/2007 11:40:16 AM:
 
> Yeah, I'm working on that :)  The class that you'll want to hold onto
> is SSHConnection, because that's the one that you'll open channels
> through.  The others aren't important once you've used them to get an
> SSHConnection.

Is it a project you're actively working on? If so, any guess on a 
completion date? 

That piece of code is super important to what we're trying to accomplish, 
so I am trying to figure out my options.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070719/02bc2224/attachment.html>

From waterbug at pangalactic.us  Thu Jul 19 18:36:36 2007
From: waterbug at pangalactic.us (Stephen Waterbury)
Date: Thu, 19 Jul 2007 20:36:36 -0400
Subject: [Twisted-Python] schemas (in Zope and Foolscap)
In-Reply-To: <87hco088zp.fsf@lothar.com>
References: <468B6888.9090802@pangalactic.us> <87hco088zp.fsf@lothar.com>
Message-ID: <46A00394.3030302@pangalactic.us>

Brian Warner wrote:
> [my apologies if this gets duplicated, I've been having SMTP problems]

It appears that this message was relayed twice, once today and once
yesterday, and both times I only received the cc to me, and not the
copy that was addressed to the twisted-python list.  So I'm quoting
the whole message below in case others haven't seen it.

> Stephen Waterbury <waterbug at pangalactic.us> writes:
> 
>> I am in the process of converting some of my code to use zope.schema
>> instead of a similar thing that I independently invented.  Since I am
>> also planning on using Foolscap, and since Foolscap has a schema
>> module, I compared zope.schema and foolscap.schema, and to me they
>> seem to have much overlap in design intent.  In particular, in the
>> zope.schema use cases ...
> 
>> So I was wondering -- would it make sense to use zope.schema
>> in Foolscap?
> 
> Yeah, that sounds quite intriguing. The Foolscap schemas serve a number of
> similar purposes:
> 
> #1: provide a clear place to document a program's remote interfaces. This
>     role is aimed at humans, not programs.
> 
> #2: make it convenient to enforce those interfaces on the receiving end.. by
>     relying upon the guards, the code that actually does stuff is easier to
>     read and easier to analyze for other potential problems
> 
> #3: enforce those interfaces on the sending end, to bring the discovery of
>     programming errors closer to their cause
> 
> #4: enforce those interfaces at the receiving *wire*, to mitigate
>     resource-exhaustion attacks
> 
> #1 is satisfied by pretty much anything, as it's more a set of documentation
> #conventions than anything else. The existing zope.interface.Interface class
> #does this pretty well.
> 
> The rest require that the interfaces be machine-parseable. I enhanced z.i's
> Interface (in foolscap.RemoteInterface) to allow the arguments and return
> values to have meaning.. if zope.schema does something similar, I'd love to
> take a look at it and see if it can capture the same expressiveness.

Yes, that appears to be one of the things zope.schema does.

> I'm undecided as to whether #4 is a good idea or not. It seemed like a good
> idea when I first started, but I've had some smart people tell me it's not
> the best place to attempt to solve DoS problems. Worse yet, the
> implementation is so incomplete that I've personally had to disable schema
> checking on things that would otherwise be useful (in particular I think a
> "PolyConstraint" in which the two branches are both containers fails to match
> the tokens on the wire correctly, even though such a thing would be quite
> useful just at the post-serialization phase). So I'm tempted to drop #4 as a
> design criterion and if z.s can represent enough to make that work, great, if
> not, drop the feature.
> 
>> A nice practical factor is that zope.schema has been packaged as
>> a separate namespace module, similarly to zope.interface.
> 
> I have to admit that I'm slightly hesitant to add a new dependency. But maybe
> it isn't too big or too unwieldy. There doesn't seem to be a debian package
> for it, though..

Right, and for both of those reasons (extra dependency and the debian
packaging lag) I would like to see zope.schema merged into
zope.interface, since zope.schema depends on zope.interface and I don't
think it would be a big burden on zope.interface to carry along
zope.schema even if zope.interface users don't all use it.  I'll do a
little lobbying for that on interface-dev (which has been extremely
quiet lately ... probably a good sign).

> But I'll definitely check it out. Thanks for the suggestion!
> 
>  -Brian
> 




From steven.zdwang at gmail.com  Thu Jul 19 22:50:19 2007
From: steven.zdwang at gmail.com (steven wang)
Date: Fri, 20 Jul 2007 12:50:19 +0800
Subject: [Twisted-Python] Re: How to receive a big stream data?
In-Reply-To: <m21wfe5ubz.fsf@valheru.db3l.homeip.net>
References: <5c6c8710706261902u347d25e0lc7375d23ef760dd5@mail.gmail.com>
	<28012bc60706270121k2bae8c8ey60f591e003cf8006@mail.gmail.com>
	<5c6c8710706270221u4f7571dbq511d9fe1ef746da8@mail.gmail.com>
	<5c6c8710707021840s522c5d10n657335582fd189@mail.gmail.com>
	<09CD42BF-7332-4234-B5BD-AB7B3C40DBD4@atlas.st>
	<5c6c8710707082331i31196904na42c81853b734057@mail.gmail.com>
	<m21wfe5ubz.fsf@valheru.db3l.homeip.net>
Message-ID: <5c6c8710707192150s4d5bd1b6v7f34d888afee06fe@mail.gmail.com>

Thank you very much! :)

On 7/12/07, David Bolen <db3l.net at gmail.com> wrote:
>
> "steven wang" <steven.zdwang at gmail.com> writes:
>
> > But I want to receive binary data in my protocol.
>
> Even if you start with a non-binary header, you can switch to
> receiving binary information at any time by going using the raw mode
> of most of the basic protocols.  And having some sort of ASCII header
> prior to the raw data is often a very simple way to handle things
> (something in common with a tremendous number of standard TCP-based
> protocols).
>
> Your original post had a fairly straight-forward ASCII header that I
> think would probably be fine.  What you're probably missing is the
> concept of switching to a raw binary receive mode which then switches
> your protocol from getting data in its lineReceived method to having
> rawDataReceived called.
>
> For example, here's a slightly stripped pair of protocols (server and
> client) that I'm currently using as part of a bigger project.  Most of
> the communication is over a PB connection which the client uses to
> perform operations on the server, one of which is editing job
> information.  But jobs contain attached files (often very large
> audio/video files), so committing changes to a job also involves
> transmitting up any newly added files.  So after the client updates
> the server's meta data, it initiates a separate set of file transfers
> across a different port.
>
> In my case, the header for a file transfer includes a session key
> (which the protocol uses to reference the original PB-based job
> session the client was using) along with a file key used for storage
> (which uniquely references a specific file in the job).  The final
> element is the total file size.  That is, upon connecting, the client
> transmits a line such as:
>
>     <session_uuid> <file_uuid> #######
>
> where the two uuids are specific to the transfer underway (and help
> with security since a random client isn't going to know the right
> ids), and ######## is the overall file length.  After sending that
> line (e.g., right after its final newline), the client just blasts up
> the raw data.
>
> The protocol is a simple LineReceiver based protocol, that receives
> that information information as an ASCII initial line, after which it
> switches to raw mode to receive the data.  Although the data length
> could technically be inferred from when the client disconnects, having
> it up front ensures I can detect a transfer that gets interrupted.
>
> So on the server side you have:
>
>           - - - - - - - - - - - - - - - - - - - - - - - - -
>
> class FileIOProtocol(LineReceiver):
>
>     def __init__(self):
>         self.info = None
>         self.outfile = None
>         self.remain = 0
>         self.crc = 0
>
>     def lineReceived(self, line):
>         logger.debug('FileIOProtocol:lineReceived:%s', line)
>         sess_key, file_key, self.size = line.split()
>         file_key = uuid.UUID(file_key)
>
>         try:
>             session_uuid = uuid.UUID(sess_key)
>         except:
>             logger.debug('FileIOProtocol:lineReceived Invalid session')
>             self.transport.loseConnection()
>             return
>
>         self.job_session = self.factory.sessions.get(session_uuid)
>         if not self.job_session:
>             logger.debug('FileIOProtocol:lineReceived Invalid session')
>             self.transport.loseConnection()
>             return
>
>         if not self.job_session.active:
>             logger.debug('FileIOProtocol:lineReceived Stale session')
>             self.transport.loseConnection()
>             return
>
>         # [db3l] The original code validates the individual file uuid here
>         # resulting in self.job_file as job file object from the session
>
>         if not self.job_file:
>             logger.debug('FileIOProtocol:lineReceived Invalid file key')
>             self.transport.loseConnection()
>             return
>
>         # Create the upload directory if not already present
>         if not os.path.isdir(self.job_session.upload_dir):
>             os.makedirs(self.job_session.upload_dir)
>
>         self.outfilename = os.path.join(self.job_session.upload_dir,
>                                         self.job_file['uuid'].hex)
>
>         logger.debug('FileIOProtocol:lineReceived Receiving into %s',
>                      self.outfilename)
>         try:
>             self.outfile = open(self.outfilename,'wb')
>         except Exception, value:
>             logger.debug('FileIOProtocol:lineReceived Unable to open file
> %s '
>                          '(%s)', self.outfilename, value)
>             self.transport.loseConnection()
>             return
>
>         self.remain = int(self.size)
>         logger.debug('FileIOProtocol:lineReceived Entering raw mode: %s
> %s',
>                      self.outfile, self.remain)
>         self.setRawMode()
>
>     def rawDataReceived(self, data):
>         self.remain -= len(data)
>         self.crc = crc32(data, self.crc)
>         self.outfile.write(data)
>
>     def connectionMade(self):
>         LineReceiver.connectionMade(self)
>         logger.debug('FileIOProtocol:connectionMade')
>
>     def connectionLost(self, reason):
>         LineReceiver.connectionLost(self, reason)
>         logger.debug('FileIOProtocol:connectionLost')
>         if self.outfile:
>             self.outfile.close()
>
>             if self.remain != 0:
>                 # Problem uploading - discard
>                 logger.debug('FileIOProtocol:connectionLost
> remain(%d)!=0',
>                              self.remain)
>
>                 os.remove(self.outfilename)
>             else:
>                 # Update job object with upload status
>                 self.job_file['uploaded'] = datetime.utcnow()
>                 self.job_file['size'] = self.size
>                 self.job_file['crc'] = self.crc
>
>
> class FileIOFactory(ServerFactory):
>     protocol = FileIOProtocol
>
>     def __init__(self, db, sessions, options):
>         self.db = db
>         self.options = options
>         self.sessions = sessions
>
>           - - - - - - - - - - - - - - - - - - - - - - - - -
>
> which is bound to an appropriate port on the server however you'd like.
> I use code like:
>
>     self.fileio = FileIOFactory(db, self.sessions, options)
>     reactor.listenTCP(self.options['file_port'], self.fileio)
>
>
> On the client side, I have an equivalent protocol that transmits up
> the file.  It's run beneath a GUI, so keeps a reference to the GUI
> controller object that might indicate it needs to cancel a transfer
> mid-stream, as well as updating the controller during the transfer so
> it can update a progress bar on screen.
>
> It is also a LineReceiver based protocol, and uses the Twisted
> FileSender object to do the raw data transfer (which is implemented as
> a straight producer with the TCP socket being the consumer).  The
> connectionMade method is where it transmits the ASCII header and then
> institutes the raw data transfer.
>
>           - - - - - - - - - - - - - - - - - - - - - - - - -
>
>
> class TransferCancelled(Exception):
>     """Exception for a user cancelling a transfer"""
>     pass
>
> class FileIOClient(LineReceiver):
>
>     def __init__(self, path, sess_key, file_key, controller):
>         self.path = path
>         self.sess_key = sess_key
>         self.file_key = file_key
>         self.controller = controller
>
>         self.infile = open(self.path, 'rb')
>         self.insize = os.stat(self.path).st_size
>
>         self.result = None
>         self.completed = False
>
>         self.controller.file_sent = 0
>         self.controller.file_size = self.insize
>
>     def _monitor(self, data):
>         self.controller.file_sent += len(data)
>         self.controller.total_sent += len(data)
>
>         # Check with controller to see if we've been cancelled and abort
>         # if so.
>         if self.controller.cancel:
>             print 'FileIOClient._monitor Cancelling'
>             # Need to unregister the producer with the transport or it
> will
>             # wait for it to finish before breaking the connection
>             self.transport.unregisterProducer()
>             self.transport.loseConnection()
>             # Indicate a user cancelled result
>             self.result = TransferCancelled('User cancelled transfer')
>
>         return data
>
>     def cbTransferCompleted(self, lastsent):
>         self.completed = True
>         self.transport.loseConnection()
>
>     def connectionMade(self):
>         self.transport.write('%s %s %s\r\n' % (str(self.sess_key),
>                                                str(self.file_key),
>                                                self.insize))
>         sender = FileSender()
>         sender.CHUNK_SIZE = 2 ** 16
>         d = sender.beginFileTransfer(self.infile, self.transport,
>                                      self._monitor)
>         d.addCallback(self.cbTransferCompleted)
>
>     def connectionLost(self, reason):
>         LineReceiver.connectionLost(self, reason)
>         print 'FileIOClient:connectionLost'
>         self.infile.close()
>         if self.completed:
>             self.controller.completed.callback(self.result)
>         else:
>             self.controller.completed.errback(reason)
>
> class FileIOClientFactory(ClientFactory):
>
>     protocol = FileIOClient
>
>     def __init__(self, path, sess_key, file_key, controller):
>         self.path = path
>         self.sess_key = sess_key
>         self.file_key = file_key
>         self.controller = controller
>
>     def clientConnectionFailed(self, connector, reason):
>         ClientFactory.clientConnectionFailed(self, connector, reason)
>         self.controller.completed.errback(reason)
>
>     def buildProtocol(self, addr):
>         print 'buildProtocol'
>         p = self.protocol(self.path, self.sess_key, self.file_key,
>                           self.controller)
>         p.factory = self
>         return p
>
>           - - - - - - - - - - - - - - - - - - - - - - - - -
>
>
> Within the presentation layer controller on the client, initiating a
> transfer is done with:
>
>     def _transmitOne(self, address, port, path, sess_key, file_key):
>         self.completed = defer.Deferred()
>         f = FileIOClientFactory(path, sess_key, file_key, self)
>         reactor.connectTCP(address, port, f)
>         return self.completed
>
> and the result is that self.completed fires (callback or errback) when
> the transfer is done (which the controller uses to then initiate the
> next transfer when there are a list of files to go up for a job).
>
> While probably not exactly what you're trying to do, perhaps it'll
> point you in the right direction.
>
> -- David
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070720/37570bc1/attachment.html>

From brendoncolby at gmail.com  Fri Jul 20 09:40:45 2007
From: brendoncolby at gmail.com (Brendon Colby)
Date: Fri, 20 Jul 2007 10:40:45 -0500
Subject: [Twisted-Python] Testing with trial, adbapi questions
In-Reply-To: <cd8fa6f90706260727l667f3e72we349e32ac40260cf@mail.gmail.com>
References: <e64b001e0706250817s223f9833med051053bfa355c5@mail.gmail.com>
	<cd8fa6f90706250928n77613dfaq1b6fdbb59d23347c@mail.gmail.com>
	<e64b001e0706251257p22843735y680c8c64b120e1c5@mail.gmail.com>
	<cd8fa6f90706260727l667f3e72we349e32ac40260cf@mail.gmail.com>
Message-ID: <e64b001e0707200840u3e64750w47123c5739ab40cf@mail.gmail.com>

On 6/26/07, Christian Simms <christian.simms at gmail.com> wrote:
>
> Looks like I mis-assumed your problem, sorry.  In the setUp method in your
> tests, you should return a Deferred which fires when all your data is
> loaded.  This can be a pain if you already organized your code into classes
> inheriting from twisted.application.service.Service which have
> startService/stopService calls. It's a pain because trial doesn't create an
> application object like running inside twistd does.  So, in the case of
> writing unit tests for applications, you can abstract out your
> initialization code into a method, and then call that method directly in
> your setUp method.


I've spent some time working on this, and I see the logic in doing so
(firing a deferred when my data is loaded) but I'm stuck at the point of how
to do this. In my factory, I call this method in __init__ to load data:

  def loadDevelopers(self):
    def cb(results):
      for result in results:
        self.addDeveloper(Developer(result['auth_host'],result['auth_url'],
          result['devid'],self,result['key'],result['post_host'],
          result['post_url']))
    return self.dbPool.runQuery("select * from developers where active=1").\
      addCallback(cb).addErrback(printError)

I created a tac file and am using twistd to run this and it works great. But
in my unit tests, what happens is my tests run before my data is loaded (and
fail). I haven't been able to figure out how to tell my tests to run after
this data is loaded. Here's my setUp method:

    def setUp(self):
        self.file = StringIOWithoutClosing()
        self.transport = FileWrapperThatWorks(self.file)
        self.protocol = sserver.SServerProtocol()
        self.protocol.factory = sserver.SServerFactory(self.protocol)
        self.protocol.factory.dbPool.start()
        self.protocol.makeConnection(self.transport)

    def testSendDeveloperID(self):
        print self.protocol.factory.developers # This dictionary prints as
empty - it shouldn't!

I guess I'm not making the connection here. How do I code the deferred in
setUp to fire when my data is loaded? Also, if I abstract out this logic to
an initialization method, how would I have it fire properly when I run under
twistd? Here's my tac file:

factory = SServerFactory(protocol=SServerProtocol)
application = service.Application("SServer")
sserverService = internet.TCPServer(4000,factory)
sserverService.setServiceParent(application)

I appreciate the help!

Brendon
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070720/9fe68afc/attachment.html>

From daniel at keystonewood.com  Fri Jul 20 09:52:51 2007
From: daniel at keystonewood.com (Daniel Miller)
Date: Fri, 20 Jul 2007 11:52:51 -0400
Subject: [Twisted-Python] Handling PBConnectionLost errors
Message-ID: <99A576C3-FE5E-4AE3-A48F-1720C9ECA16B@keystonewood.com>

Hello,

Twisted PB sometimes loses its connection to the server. In this  
case, a PBConnectionLost exception is raised on the client. It would  
be nice to implement a fail-safe(er) way of calling remote methods  
that would retry when necessary until the remote method has been  
called successfully and the result has been returned. Note that this  
is only necessary when the remote method call should be invoked  
exactly once on the server (i.e. for POST-like calls that change  
server state). In the case of GET-like requests, a simpler retry  
mechanism will do.

The motivation for this is based on my experience of using Twisted in  
an application I am developing. The network communications are all  
happening on a LAN. The good end of the network is connected directly  
to a 100Mbps switch at the server. Failures occur more frequently at  
the other end (my end) of the network, which is connected through a  
10/100 hub that is connected to the main switch. I rigged up a quick  
test with a 1000-request sample size; failures ranged from 28/1000 on  
the good end of the network to 83/1000 on the bad end of the network.  
One request consists of a single remote method call through PB. A  
success was when I got the expected result, a failure was when I got  
a PBConnectionLost error.

The following is pseudo code that I came up with to mitigate the  
problem.

Simple request (GET - repeatedly call method until success or  
RETRY_LIMIT is reached)
    Client flow:
       for x in range(RETRY_LIMIT)
          invoke remote method without unique call identifier
          if result is not PBConnectionLost
             break
       if result is PBConnectionLost
          raise server not responding error
    Server flow:
       (nothing special, just plain PB)

Complex request (POST - server-side method is invoked exactly once)
    Client flow:
       use simple retry method to get a unique call identifier from  
server
          a timeout value is also sent along to tell the server how  
long to hold the results of this request
       for x in range(RETRY_LIMIT)
          invoke remote method with identifier
          if return value is not PBConnectionLost
             break
       if result is PBConnectionLost
          raise server not responding error
       using simple retry method tell server to discard unique call  
identifier
    Server flow:
       receive request for unique call identifier
          create and store identifier with UNCALLED token
          schedule identifier to be discarded with timeout value  
supplied by client
          return identifier to client
       receive remote method invocation with unique call identifier
          branch on value stored with unique call identifier
          if UNCALLED
             update identifier with CALLED token
             invoke method
             while result is deferred
                get defer result
             store COMPLETED token and unique with unique call  
identifier
             if there is another invocation WAITING
                this means the connection was lost
                signal the WAITING request with the result
             else
                return result to client
          if CALLED
             store WAITING token with unique identifier (must not  
overwrite other call tokens)
             defer until COMPLETED
          if COMPLETED
             return result to client
          if unique call identifier does not exist
             raise error
       receive request to discard unique call identifier
          if identifier exists
             discard identifier, tokens, and result
          return True

I realize that implementing this would not eliminate network errors.  
It would simply reduce the likelyhood of failed method calls due to  
dropped connections. If I have my math correct (I always struggle a  
bit with statistics), even a RETRY_LIMIT of 2 would reduce the  
probability of a lost connection to 0.6% at the worst (<0.1% on the  
good end of the network).

I have two questions:

1. Does something like this already exist?
2. Is this a totally stupid idea? (would it be better to improve our  
physical network than to try to band-aid the problem with something  
like this?)

~ Daniel




From exarkun at twistedmatrix.com  Sat Jul 21 22:05:03 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 22 Jul 2007 04:05:03 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1185077103.63.873067156@twistedmatrix.com

Bug summary
______________________
Summary for 2007-07-15 through 2007-07-22
Bugs opened: 12    Bugs closed: 2  Total open bugs: 995 (+10)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +2  |Highest:  +7          |Conch:     +1          
|Enhancement:  +1  |Normal:   +3          |Core:      +5          
|Task:         +7                         |Foolscap:  -1          
                                          |Mail:      +1          
                                          |Trial:     +1          
                                          |Vfs:       +1          
                                          |Web2:      +1          
                                          |Words:     +1          


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2737] Two new features for twisted-dev (opened by washort)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2737

[#2739] explain, document, and test trial's compatibility requirements for other test tools (opened by glyph)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2739

[#2741] twisted/words/test/test_domish.py should use setUp and tearDown instead of setUpClass and tearDownClass (opened by exarkun)
    task            words      http://twistedmatrix.com/trac/ticket/2741

[#2742] twisted/test/test_policies.py should use setUp and tearDown instead of setUpClass and tearDownClass (opened by exarkun)
    task            core       http://twistedmatrix.com/trac/ticket/2742

[#2743] twisted/test/test_ssl.py shouldn't use setUpClass and tearDownClass (opened by exarkun)
    task            core       http://twistedmatrix.com/trac/ticket/2743

[#2744] twisted/test/test_pb.py should use setUp instead of setUpClass and not have any tear down (opened by exarkun)
    task            core       http://twistedmatrix.com/trac/ticket/2744

[#2745] twisted/test/test_newcred.py should use setUp and tearDown instead of setUpClass and tearDownClass (opened by exarkun)
    task            core       http://twistedmatrix.com/trac/ticket/2745

[#2746] twisted/mail/test/test_mail.py should use setUp and tearDown instead of setUpClass and tearDownClass (opened by exarkun)
    task            mail       http://twistedmatrix.com/trac/ticket/2746

                    ===== Normal =====
[#2735] twisted.vfs.adapters.ftp._FileToConsumerAdapter doesn't fully implement IConsumer (opened by therve)
    defect          vfs        http://twistedmatrix.com/trac/ticket/2735

[#2736] StreamProducer defer patch (opened by KyleJ)
    defect          web2       http://twistedmatrix.com/trac/ticket/2736

[#2738] t.i.a.IPv4Address.host containing host name instead of ip address (opened by toidinamai)
    defect          core       http://twistedmatrix.com/trac/ticket/2738

[#2740] twisted/conch/test/test_cftp.py should use setUp instead of setUpClass and should not have a tearDown or tearDownClass (opened by exarkun)
    task            conch      http://twistedmatrix.com/trac/ticket/2740



Closed Bugs
______________________
                    ===== Highest =====
[#2387] Deprecate twisted.enterprise.row (opened by itamarst, closed by therve, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2387

                    ===== Normal =====
[#2731] foolscap: trivial fix (remove path separator) for test failing on windows (opened by strank, closed by warner, fixed)
    defect          foolscap   http://twistedmatrix.com/trac/ticket/2731



Ticket Lifetime Stats
----------------------
Oldest open ticket - [#38] Should be a way to create documentation aliases (since 2003-07-12 16:08:03).
Newest open ticket - [#2746] twisted/mail/test/test_mail.py should use setUp and tearDown instead of setUpClass and tearDownClass (since 2007-07-20 10:43:11).

Mean open ticket age: 489 days, 12:26:57.685024.
Median: 375 days, 14:20:22.503115.
Standard deviation: 392 days, 8:34:42.415196.
Interquartile range: 472 days, 4:16:50.

Mean time between ticket creation and ticket resolution: 119 days, 20:16:45.773628.
Median: 14 days, 10:59:04.
Standard deviation is 223 days, 8:29:32.610222.
The interquartile range is 125 days, 7:42:53.

Mean time spent in review: 58 days, 19:39:04.240986.
Median: 3 days, 20:59:56.
Standard deviation: 127 days, 9:56:33.556086.
Interquartile range: 25 days, 4:28:51.

Mean number of times a ticket is reviewed: 1.8.
Median: 1
Standard deviation: 1.37784670354.
Interquartile range: 1.




From swp5jhu02 at sneakemail.com  Mon Jul 23 00:48:47 2007
From: swp5jhu02 at sneakemail.com (=?ISO-8859-1?Q?Peter_Valdemar_M=F8rch?=)
Date: Mon, 23 Jul 2007 08:48:47 +0200
Subject: [Twisted-Python] How to achieve a reliable "connection" over UDP?
Message-ID: <46A44F4F.1030405@sneakemail.com>

Hi,

I'm looking to implement an application that needs reliable connections,
like one gets with TCP, but only using UDP "on the wire".

The application can only use UDP, as I'd like to rely on UDP hole
punching (p2p). (P2P over TCP is notoriously difficult).

I want to be certain that my packets get delivered, that they are in
order, to transfer data larter than 64K, etc - just like in TCP.

Of course, I could implement the TCP protocol myself for use over UDP,
just as the IP protocol stack does for TCP over IP. Or use TCP over PPP
over UDP. But is there "a better way"?

I'm thinking basically all p2p applications will need this sort of
"reliability" over UDP for e.g. file transfer, so I'm hoping there is
something already written.

How would one go about this?

Peter
-- 
Peter Valdemar Mørch
http://www.morch.com



From p.mayers at imperial.ac.uk  Mon Jul 23 03:23:41 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 23 Jul 2007 10:23:41 +0100
Subject: [Twisted-Python] How to achieve a reliable "connection" over UDP?
In-Reply-To: <46A44F4F.1030405@sneakemail.com>
References: <46A44F4F.1030405@sneakemail.com>
Message-ID: <1185182621.3331.14.camel@localhost.localdomain>


> I'm thinking basically all p2p applications will need this sort of
> "reliability" over UDP for e.g. file transfer, so I'm hoping there is
> something already written.
> 

http://divmod.org/trac/wiki/DivmodVertex

Haven't used it, so can't comment further onit.




From christian.simms at gmail.com  Mon Jul 23 09:00:54 2007
From: christian.simms at gmail.com (Christian Simms)
Date: Mon, 23 Jul 2007 11:00:54 -0400
Subject: [Twisted-Python] Testing with trial, adbapi questions
In-Reply-To: <e64b001e0707200840u3e64750w47123c5739ab40cf@mail.gmail.com>
References: <e64b001e0706250817s223f9833med051053bfa355c5@mail.gmail.com>
	<cd8fa6f90706250928n77613dfaq1b6fdbb59d23347c@mail.gmail.com>
	<e64b001e0706251257p22843735y680c8c64b120e1c5@mail.gmail.com>
	<cd8fa6f90706260727l667f3e72we349e32ac40260cf@mail.gmail.com>
	<e64b001e0707200840u3e64750w47123c5739ab40cf@mail.gmail.com>
Message-ID: <cd8fa6f90707230800h48322f9bn4df086056ef93688@mail.gmail.com>

On 7/20/07, Brendon Colby <brendoncolby at gmail.com> wrote:
>
> On 6/26/07, Christian Simms <christian.simms at gmail.com> wrote:
> >
> > Looks like I mis-assumed your problem, sorry.  In the setUp method in
> > your tests, you should return a Deferred which fires when all your data is
> > loaded.  This can be a pain if you already organized your code into classes
> > inheriting from twisted.application.service.Service which have
> > startService/stopService calls. It's a pain because trial doesn't create an
> > application object like running inside twistd does.  So, in the case of
> > writing unit tests for applications, you can abstract out your
> > initialization code into a method, and then call that method directly in
> > your setUp method.
>
>
> I've spent some time working on this, and I see the logic in doing so
> (firing a deferred when my data is loaded) but I'm stuck at the point of how
> to do this. In my factory, I call this method in __init__ to load data:
>
>   def loadDevelopers(self):
>     def cb(results):
>       for result in results:
>         self.addDeveloper
> (Developer(result['auth_host'],result['auth_url'],
>           result['devid'],self,result['key'],result['post_host'],
>           result['post_url']))
>     return self.dbPool.runQuery("select * from developers where
> active=1").\
>       addCallback(cb).addErrback(printError)
>
> I created a tac file and am using twistd to run this and it works great.
> But in my unit tests, what happens is my tests run before my data is loaded
> (and fail). I haven't been able to figure out how to tell my tests to run
> after this data is loaded. Here's my setUp method:
>
>     def setUp(self):
>         self.file = StringIOWithoutClosing()
>         self.transport = FileWrapperThatWorks(self.file)
>         self.protocol = sserver.SServerProtocol()
>         self.protocol.factory = sserver.SServerFactory(self.protocol)
>         self.protocol.factory.dbPool.start()
>         self.protocol.makeConnection(self.transport)
>
>     def testSendDeveloperID(self):
>         print self.protocol.factory.developers # This dictionary prints as
> empty - it shouldn't!
>
> I guess I'm not making the connection here. How do I code the deferred in
> setUp to fire when my data is loaded? Also, if I abstract out this logic to
> an initialization method, how would I have it fire properly when I run under
> twistd? Here's my tac file:
>
> factory = SServerFactory(protocol=SServerProtocol)
> application = service.Application("SServer")
> sserverService = internet.TCPServer(4000,factory)
> sserverService.setServiceParent(application)
>
> I appreciate the help!
>
> Brendon
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
To fix your unit tests to "wait" until your data is loaded by your
loadDevelopers method, you need to have your setUp method return the
Deferred created by loadDevelopers's. There are a bunch of ways to do this,
the simplest is probably to have your factory's __init__ method store the
Deferred created by loadDevelopers into a member variable (say self.deferred),
and then add a new line to the end of your setUp method above:

           return self.deferred

This way, each unit test will not start until the Deferred from
loadDevelopers fires.

Cheers,
Christian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070723/b919016d/attachment.html>

From glyph at divmod.com  Mon Jul 23 12:57:57 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 23 Jul 2007 18:57:57 -0000
Subject: [Twisted-Python] How to achieve a reliable "connection" over UDP?
In-Reply-To: <1185182621.3331.14.camel@localhost.localdomain>
References: <46A44F4F.1030405@sneakemail.com>
	<1185182621.3331.14.camel@localhost.localdomain>
Message-ID: <20070723185757.26384.759829748.divmod.xquotient.1317@joule.divmod.com>

On 09:23 am, p.mayers at imperial.ac.uk wrote:
>
>>I'm thinking basically all p2p applications will need this sort of
>>"reliability" over UDP for e.g. file transfer, so I'm hoping there is
>>something already written.
>
>http://divmod.org/trac/wiki/DivmodVertex
>
>Haven't used it, so can't comment further onit.

As it happens, I have, a little, so I can :).

To make a long story short, if you need the features that TCP provides, 
but you want the simplicity (and widespread de-jure "standard" 
implementation in routers) of hole-punching via UDP rather than complex 
dual-connection TCP startup, the easiest thing you can do is just go 
ahead and implement TCP on top of UDP.

We did this for vertex, in the "ptcp" module (pseudo-TCP) which is a 
very literal-minded implementation of the TCP specification on top of 
UDP.

It's a fully-functional proof of concept at this point, but it needs a 
lot of maintenance.  The performance is terrible because we didn't 
implement window sizing yet (the window has a static size), there are a 
few edge-cases on connection tear-down, and the tests aren't quite 
granular enough (for example, rather than testing specific latency 
cases, they just probabilistically test packet loss).  It also used a 
predecessor to the now-standard-in-twisted "AMP" protocol for 
handshaking, and should be upgraded to use the new one.  Plus, my own 
personal bugaboo: it doesn't integrate with cred properly.

However, if you need connection-oriented peer-to-peer traffic, 
contributing to Vertex is going to get you where you need to be faster 
than any ad-hoc solution.  We *have* already implemented the full TCP 
state machine and connection-management logic in Python.  I've 
personally tested that it can transfer an entire 700MB ISO image across 
the real, public internet correctly, even in its current state.

You will find willing assistance from me and probably some other Divmod 
folks & fans, because this is a project that many of us would like to 
see through to completion; we just don't have a lot of spare cycles (or 
business motivation) at the moment.

Depending on what you need, you might want to focus your maintenance 
efforts on improving PTCP's tests and documentation so as to make it an 
independently usable unit from Vertex's connection setup.  Obviously 
we'd like it if you could help us to get the whole thing to work, but I 
have to assume that by the time you're asking this question, you've 
already done some work on an application protocol to set up the 
connection.



From brendoncolby at gmail.com  Mon Jul 23 15:06:59 2007
From: brendoncolby at gmail.com (Brendon Colby)
Date: Mon, 23 Jul 2007 16:06:59 -0500
Subject: [Twisted-Python] Testing with trial, adbapi questions
In-Reply-To: <cd8fa6f90707230800h48322f9bn4df086056ef93688@mail.gmail.com>
References: <e64b001e0706250817s223f9833med051053bfa355c5@mail.gmail.com>
	<cd8fa6f90706250928n77613dfaq1b6fdbb59d23347c@mail.gmail.com>
	<e64b001e0706251257p22843735y680c8c64b120e1c5@mail.gmail.com>
	<cd8fa6f90706260727l667f3e72we349e32ac40260cf@mail.gmail.com>
	<e64b001e0707200840u3e64750w47123c5739ab40cf@mail.gmail.com>
	<cd8fa6f90707230800h48322f9bn4df086056ef93688@mail.gmail.com>
Message-ID: <e64b001e0707231406r4ff4ac72sdd79c7f94708e08e@mail.gmail.com>

On 7/23/07, Christian Simms <christian.simms at gmail.com> wrote:
>
> To fix your unit tests to "wait" until your data is loaded by your
> loadDevelopers method, you need to have your setUp method return the
> Deferred created by loadDevelopers's. There are a bunch of ways to do this,
> the simplest is probably to have your factory's __init__ method store the
> Deferred created by loadDevelopers into a member variable (say
> self.deferred), and then add a new line to the end of your setUp method
> above:
>
>            return self.deferred
>
> This way, each unit test will not start until the Deferred from
> loadDevelopers fires.


That worked! I was so close to this over the weekend too. I'm starting to
feel as though I need an MIT degree to understand this stuff. :)

Brendon
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070723/dca9a5e1/attachment.html>

From glyph at divmod.com  Mon Jul 23 18:08:35 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 24 Jul 2007 00:08:35 -0000
Subject: [Twisted-Python] Testing with trial, adbapi questions
In-Reply-To: <e64b001e0707231406r4ff4ac72sdd79c7f94708e08e@mail.gmail.com>
References: <e64b001e0706250817s223f9833med051053bfa355c5@mail.gmail.com>
	<cd8fa6f90706250928n77613dfaq1b6fdbb59d23347c@mail.gmail.com>
	<e64b001e0706251257p22843735y680c8c64b120e1c5@mail.gmail.com>
	<cd8fa6f90706260727l667f3e72we349e32ac40260cf@mail.gmail.com>
	<e64b001e0707200840u3e64750w47123c5739ab40cf@mail.gmail.com>
	<cd8fa6f90707230800h48322f9bn4df086056ef93688@mail.gmail.com>
	<e64b001e0707231406r4ff4ac72sdd79c7f94708e08e@mail.gmail.com>
Message-ID: <20070724000835.26384.65377609.divmod.xquotient.1648@joule.divmod.com>


On 09:06 pm, brendoncolby at gmail.com wrote:
>That worked! I was so close to this over the weekend too. I'm starting 
>to
>feel as though I need an MIT degree to understand this stuff. :)

Just as a data point for you: almost everyone who has worked extensively 
on the Twisted core is a college dropout.  (Although some of us 
apparently feel obscurely guilty about that and attend night school at 
Harvard.  Not me though!  Auto-pedagogy for the win!)

Both my fianc�e and my father are programmers with course 6 degrees from 
MIT, though.  It's doubtful that this helps, since Ying responded to me 
telling her about this message by saying she can't remember how Twisted 
works "for more than a day at a time", and to my knowledge, Dad only did 
one thing with it, and that at a sprint which I did not attend - so I 
haven't seen the code :).



From daedalus at eigenmagic.com  Mon Jul 23 23:00:39 2007
From: daedalus at eigenmagic.com (Justin Warren)
Date: Tue, 24 Jul 2007 15:00:39 +1000
Subject: [Twisted-Python] ModiPY: Change execution with twisted [Was: SSHv2
	client script for Cisco routers]
In-Reply-To: <1184576512.2419.39.camel@localhost>
References: <9f68812f0707121206o245cce61l5098a8b5f6549fe9@mail.gmail.com>
	<18e3f33d0707121300l49850ddft83b7d78676527091@mail.gmail.com>
	<1184576512.2419.39.camel@localhost>
Message-ID: <1185253239.6803.29.camel@localhost>

Hi folks,

Following up on my post last week about something to execute commands on
a bunch of cisco routers, and the verbose post on what I've been working
on.

I present: ModiPY. A change management framework, using twisted. I've
only put up a trac site so far, at http://modipy.seafelt.com/ licensed
as LGPL for now.

Super-alpha code, use with caution. May set your datacenter on fire.

-- 
Justin Warren <daedalus at eigenmagic.com>



From jim.mccoy at gmail.com  Mon Jul 23 23:03:25 2007
From: jim.mccoy at gmail.com (Jim McCoy)
Date: Mon, 23 Jul 2007 22:03:25 -0700
Subject: [Twisted-Python] How to achieve a reliable "connection" over UDP?
In-Reply-To: <1185182621.3331.14.camel@localhost.localdomain>
References: <46A44F4F.1030405@sneakemail.com>
	<1185182621.3331.14.camel@localhost.localdomain>
Message-ID: <f01e36880707232203j7c6ab43dsd2b3b400819c6e1e@mail.gmail.com>

This has already been written, just not in Python.  Take a look at
enet, RakNet, or UDT.  The various variables that will be in play here
are your need for congestion control, whether or not you can live with
out-of-order message delivery, and if you have any need for security
on the channel.

jim



From swp5jhu02 at sneakemail.com  Tue Jul 24 06:27:26 2007
From: swp5jhu02 at sneakemail.com (=?UTF-8?B?UGV0ZXIgVmFsZGVtYXIgTcO4cmNo?=)
Date: Tue, 24 Jul 2007 14:27:26 +0200
Subject: [Twisted-Python] How to achieve a reliable "connection" over UDP?
In-Reply-To: <20070723185757.26384.759829748.divmod.xquotient.1317@joule.divmod.com>
References: <46A44F4F.1030405@sneakemail.com>	<1185182621.3331.14.camel@localhost.localdomain>
	<20070723185757.26384.759829748.divmod.xquotient.1317@joule.divmod.com>
Message-ID: <46A5F02E.5000608@sneakemail.com>

Thank you for all your comments!

I think I'll be looking at Vertex because I also need the actual UDP 
hole-punching - the whole Vertex solution.

My dream or idea is to have p2p file sharing with webdav and real 
mounted file systems on *NIX and Windows.

So I can "export" e.g. my /home/peter/projects writable to my other 
machines as "projects", and /home/peter/public_ro as "public" read-only 
to Fred, Sally and Alice.

I import Paul's "jokes" share as /mnt/p2pdav/paulsJokes, and Sandy's 
"pics" share as /mnt/p2pdav/sandy/pics. And then access these files as 
network drives.

Possibly later have /home/peter/projects be automatically synchronized 
between all my machines.

Thats the basic idea anyway.

glyph-at-divmod.com |Lists| wrote:
> You will find willing assistance from me and probably some other Divmod 
> folks & fans, because this is a project that many of us would like to 
> see through to completion; we just don't have a lot of spare cycles (or 
> business motivation) at the moment.
 >
> Depending on what you need, you might want to focus your maintenance 
> efforts on improving PTCP's tests and documentation so as to make it an 
> independently usable unit from Vertex's connection setup.  Obviously 
> we'd like it if you could help us to get the whole thing to work, but I 
> have to assume that by the time you're asking this question, you've 
> already done some work on an application protocol to set up the connection.
> 

Well, this looks like the right fit for me. I realize this project is 
not small, but it is an itch I've had for a long time, and it needs 
scratching!!! But it is a personal-free-time project, so we'll see how 
fast it goes... :-)

Sincerely,

Peter

-- 
Peter Valdemar Mørch
http://www.morch.com



From glyph at divmod.com  Tue Jul 24 12:43:39 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 24 Jul 2007 18:43:39 -0000
Subject: [Twisted-Python] How to achieve a reliable "connection" over UDP?
In-Reply-To: <46A5F02E.5000608@sneakemail.com>
References: <46A44F4F.1030405@sneakemail.com>
	<1185182621.3331.14.camel@localhost.localdomain>
	<20070723185757.26384.759829748.divmod.xquotient.1317@joule.divmod.com>
	<46A5F02E.5000608@sneakemail.com>
Message-ID: <20070724184339.26384.346310489.divmod.xquotient.1990@joule.divmod.com>

On 12:27 pm, swp5jhu02 at sneakemail.com wrote:
>Thank you for all your comments!
>
>I think I'll be looking at Vertex because I also need the actual UDP 
>hole- punching - the whole Vertex solution.

Yaaay!
>My dream or idea is to have p2p file sharing with webdav and real 
>mounted file systems on *NIX and Windows.

Oh man.  This is *exactly* what I wanted to do with Vertex.  Of course, 
you need a good Twisted-integrated version of FUSE first, but that 
shouldn't be too hard ;).
>Possibly later have /home/peter/projects be automatically synchronized 
>between all my machines.

That seems like more of a job for a version control system. 
Synchronization is a tricky, tricky problem.

It might be more appropriate to continue this discussion on the divmod- 
dev mailing list.  I'll be looking forward to it!



From iny+news at iki.fi  Tue Jul 24 23:33:48 2007
From: iny+news at iki.fi (Ilpo =?iso-8859-1?Q?Nyyss=F6nen?=)
Date: Wed, 25 Jul 2007 08:33:48 +0300
Subject: [Twisted-Python] FUSE (Was: Re: How to achieve a reliable
	"connection" over UDP?)
References: <46A44F4F.1030405@sneakemail.com>
	<1185182621.3331.14.camel@localhost.localdomain>
	<20070723185757.26384.759829748.divmod.xquotient.1317@joule.divmod.com>
	<46A5F02E.5000608@sneakemail.com>
	<20070724184339.26384.346310489.divmod.xquotient.1990@joule.divmod.com>
Message-ID: <m3ejixdp37.fsf_-_@iny.iki.fi>

glyph at divmod.com writes:

> Oh man.  This is *exactly* what I wanted to do with Vertex.  Of
> course, you need a good Twisted-integrated version of FUSE first, but
> that shouldn't be too hard ;).

Is there a better way to integrate FUSE and Twisted than use one
thread for FUSE and one for Twisted reactor without signal handlers? 
(Using the FUSE Python bindings of course.)

I have one filesystem for personal use done this way and it does seem
to work. (A simple filesystem for browsing zip contents,)

-- 
Ilpo Nyyssönen # biny # /* :-) */




From glyph at divmod.com  Wed Jul 25 02:58:51 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 25 Jul 2007 08:58:51 -0000
Subject: [Twisted-Python] FUSE (Was: Re: How to achieve a reliable
	"connection" over UDP?)
In-Reply-To: <m3ejixdp37.fsf_-_@iny.iki.fi>
References: <46A44F4F.1030405@sneakemail.com>
	<1185182621.3331.14.camel@localhost.localdomain>
	<20070723185757.26384.759829748.divmod.xquotient.1317@joule.divmod.com>
	<46A5F02E.5000608@sneakemail.com>
	<20070724184339.26384.346310489.divmod.xquotient.1990@joule.divmod.com>
	<m3ejixdp37.fsf_-_@iny.iki.fi>
Message-ID: <20070725085851.26384.436661937.divmod.xquotient.2002@joule.divmod.com>

On 05:33 am, iny+news at iki.fi wrote:
>glyph at divmod.com writes:
>>Oh man.  This is *exactly* what I wanted to do with Vertex.  Of
>>course, you need a good Twisted-integrated version of FUSE first, but
>>that shouldn't be too hard ;).
>
>Is there a better way to integrate FUSE and Twisted than use one
>thread for FUSE and one for Twisted reactor without signal handlers?
>(Using the FUSE Python bindings of course.)

FUSE just gives a file descriptor to userspace.  A better way to 
integrate with Twisted would simply be to put that file descriptor into 
the reactor and parse it asynchronously, just like any other protocol. 
The Python FUSE bindings obscure the issue because, unlike the C 
libfuse, they assume that your filesystem I/O is blocking, which 
severely limits the performance of python-based filesystems.  (You 
cannot receive more requests for I/O in your filesystem until the 
previous one has been completed with the pyfuse bindings, but you can in 
C.)
>I have one filesystem for personal use done this way and it does seem
>to work. (A simple filesystem for browsing zip contents,)

It certainly works well enough for simple cases.  But it would be more 
robust and higher performance to do it the "normal" Twisted way :).



From daniel at keystonewood.com  Wed Jul 25 08:38:55 2007
From: daniel at keystonewood.com (Daniel Miller)
Date: Wed, 25 Jul 2007 10:38:55 -0400
Subject: [Twisted-Python] Handling PBConnectionLost errors
In-Reply-To: <99A576C3-FE5E-4AE3-A48F-1720C9ECA16B@keystonewood.com>
References: <99A576C3-FE5E-4AE3-A48F-1720C9ECA16B@keystonewood.com>
Message-ID: <E6C8DE88-2B46-42D4-A705-E7D621DD7653@keystonewood.com>

Is this such a stupid question that it doesn't even warrant a response?

~ Daniel


On Jul 20, 2007, at 11:52 AM, Daniel Miller wrote:
> Hello,
>
> Twisted PB sometimes loses its connection to the server. In this  
> case, a PBConnectionLost exception is raised on the client. It  
> would be nice to implement a fail-safe(er) way of calling remote  
> methods that would retry when necessary until the remote method has  
> been called successfully and the result has been returned. Note  
> that this is only necessary when the remote method call should be  
> invoked exactly once on the server (i.e. for POST-like calls that  
> change server state). In the case of GET-like requests, a simpler  
> retry mechanism will do.
>
> The motivation for this is based on my experience of using Twisted  
> in an application I am developing. The network communications are  
> all happening on a LAN. The good end of the network is connected  
> directly to a 100Mbps switch at the server. Failures occur more  
> frequently at the other end (my end) of the network, which is  
> connected through a 10/100 hub that is connected to the main  
> switch. I rigged up a quick test with a 1000-request sample size;  
> failures ranged from 28/1000 on the good end of the network to  
> 83/1000 on the bad end of the network. One request consists of a  
> single remote method call through PB. A success was when I got the  
> expected result, a failure was when I got a PBConnectionLost error.
>
> The following is pseudo code that I came up with to mitigate the  
> problem.
>
> Simple request (GET - repeatedly call method until success or  
> RETRY_LIMIT is reached)
>    Client flow:
>       for x in range(RETRY_LIMIT)
>          invoke remote method without unique call identifier
>          if result is not PBConnectionLost
>             break
>       if result is PBConnectionLost
>          raise server not responding error
>    Server flow:
>       (nothing special, just plain PB)
>
> Complex request (POST - server-side method is invoked exactly once)
>    Client flow:
>       use simple retry method to get a unique call identifier from  
> server
>          a timeout value is also sent along to tell the server how  
> long to hold the results of this request
>       for x in range(RETRY_LIMIT)
>          invoke remote method with identifier
>          if return value is not PBConnectionLost
>             break
>       if result is PBConnectionLost
>          raise server not responding error
>       using simple retry method tell server to discard unique call  
> identifier
>    Server flow:
>       receive request for unique call identifier
>          create and store identifier with UNCALLED token
>          schedule identifier to be discarded with timeout value  
> supplied by client
>          return identifier to client
>       receive remote method invocation with unique call identifier
>          branch on value stored with unique call identifier
>          if UNCALLED
>             update identifier with CALLED token
>             invoke method
>             while result is deferred
>                get defer result
>             store COMPLETED token and unique with unique call  
> identifier
>             if there is another invocation WAITING
>                this means the connection was lost
>                signal the WAITING request with the result
>             else
>                return result to client
>          if CALLED
>             store WAITING token with unique identifier (must not  
> overwrite other call tokens)
>             defer until COMPLETED
>          if COMPLETED
>             return result to client
>          if unique call identifier does not exist
>             raise error
>       receive request to discard unique call identifier
>          if identifier exists
>             discard identifier, tokens, and result
>          return True
>
> I realize that implementing this would not eliminate network  
> errors. It would simply reduce the likelyhood of failed method  
> calls due to dropped connections. If I have my math correct (I  
> always struggle a bit with statistics), even a RETRY_LIMIT of 2  
> would reduce the probability of a lost connection to 0.6% at the  
> worst (<0.1% on the good end of the network).
>
> I have two questions:
>
> 1. Does something like this already exist?
> 2. Is this a totally stupid idea? (would it be better to improve  
> our physical network than to try to band-aid the problem with  
> something like this?)




From nico at tekNico.net  Wed Jul 25 08:59:16 2007
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 25 Jul 2007 16:59:16 +0200
Subject: [Twisted-Python] Re: Handling PBConnectionLost errors
In-Reply-To: <E6C8DE88-2B46-42D4-A705-E7D621DD7653@keystonewood.com>
References: <99A576C3-FE5E-4AE3-A48F-1720C9ECA16B@keystonewood.com>
	<E6C8DE88-2B46-42D4-A705-E7D621DD7653@keystonewood.com>
Message-ID: <46A76544.6080404@tekNico.net>

> Daniel Miller wrote:
>> I have two questions:
>>
>> 1. Does something like this already exist?
>> 2. Is this a totally stupid idea? (would it be better to improve our
>> physical network than to try to band-aid the problem with something
>> like this?)

Daniel Miller wrote:
> Is this such a stupid question that it doesn't even warrant a response?

I was waiting for somebody else to speak up before embarrassing myself, but
anyway, here goes. ;-)

We had similar problems at a previous job of mine, and successfully used a
 similar approach to solve them; therefore you have my blessing, for what
it's worth.


-- 
Nicola Larosa - http://www.tekNico.net/

Our criticisms of WS-* are specific and have to do with issues of process
and stability and technical quality and a demonstrated lack of interoper-
ability. It is badly-engineered technology, using it will increase the
likelihood that your project fails, and it is not suitable for use
by conscientious IT professionals. -- Tim Bray, February 2007





From p.mayers at imperial.ac.uk  Wed Jul 25 09:09:47 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 25 Jul 2007 16:09:47 +0100
Subject: [Twisted-Python] Handling PBConnectionLost errors
In-Reply-To: <E6C8DE88-2B46-42D4-A705-E7D621DD7653@keystonewood.com>
References: <99A576C3-FE5E-4AE3-A48F-1720C9ECA16B@keystonewood.com>
	<E6C8DE88-2B46-42D4-A705-E7D621DD7653@keystonewood.com>
Message-ID: <1185376187.13244.31.camel@doorstop.net.ic.ac.uk>

On Wed, 2007-07-25 at 10:38 -0400, Daniel Miller wrote:
> Is this such a stupid question that it doesn't even warrant a response?

Not really, but it's a more complex question than it first seems, and
you're trying very hard to reproduce things that already exist.

First question: why is your PB server allocating "request IDs" and
storing hashes of them. You could just return a pb.Referenceable to the
client, backed by a normal python object (with a normal object
lifecycle) on the server.

Regarding the retry mechanism: It looks to me like you're treating PB
like an RPC mechanism, and finding that the nature of networks (they
fail, unpredictably) is tripping you up. Try thinking of it in a more
message-oriented way.

I would implement it something like this, using the python2.5 yield and
inlineCallbacks functionality:

class MyResources:
  def render_POST(self, request):
    d = self.doOnlyOnce(request)
    d.addCallbacks(self.done, self.failed, (request,), (request,))
    return server.NOT_DONE_YET

  def done(self, data, request):
    request.write(data)
    request.finish()
  def failed(self, f, request):
    request.write("An error occured")
    request.write(f.getErrorMessage())
    reqeust.finish()

  @inlineCallbacks
  def doOnlyOnce(self, request):
    pbroot = yield self.pbclifactory.getRootObject()
    theobject = yield pbroot.callRemote('makeRequest')
    data = yield theobject.callRemote('someMethod', request.args)
    # some local code here, then...
    # ok, done, tell the remote object to "commit" (finalise, delete)
    yield theobject.callRemote('commit')
    returnValue(data)

Your example is a bit theoretical, so it's difficult to see if this
would work for you.




From pbastov at gmail.com  Thu Jul 26 04:11:11 2007
From: pbastov at gmail.com (Pavel Bastov)
Date: Thu, 26 Jul 2007 16:11:11 +0600
Subject: [Twisted-Python] "MySQL has gone away"
Message-ID: <eaf39e680707260311y4c901d39u875eedec52080fe@mail.gmail.com>

Hi all,

I'm using MySQL database in my server app. Pretty often after some
inactivity I get this message in my logs "MySQL server has gone away".
How can I prevent this?

TIA

-- 
Good luck,

Pavel Bastov
xooChat Evangelist and Team Leader
http://www.xoochat.com/



From aleksey.kishkin at gmail.com  Thu Jul 26 04:53:56 2007
From: aleksey.kishkin at gmail.com (Aleksey Kishkin)
Date: Thu, 26 Jul 2007 14:53:56 +0400
Subject: [Twisted-Python] "MySQL has gone away"
In-Reply-To: <eaf39e680707260311y4c901d39u875eedec52080fe@mail.gmail.com>
References: <eaf39e680707260311y4c901d39u875eedec52080fe@mail.gmail.com>
Message-ID: <615514360707260353x292354am8c5a0b0ab06dda86@mail.gmail.com>

Actually usually it means mysql server died. it's certainly not twisted
question, but first of all you need to check mysql logs.

2007/7/26, Pavel Bastov <pbastov at gmail.com>:
>
> Hi all,
>
> I'm using MySQL database in my server app. Pretty often after some
> inactivity I get this message in my logs "MySQL server has gone away".
> How can I prevent this?
>
> TIA
>
> --
> Good luck,
>
> Pavel Bastov
> xooChat Evangelist and Team Leader
> http://www.xoochat.com/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Aleksey Kishkin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070726/d2338f58/attachment.html>

From arnarbi at gmail.com  Thu Jul 26 05:54:19 2007
From: arnarbi at gmail.com (Arnar Birgisson)
Date: Thu, 26 Jul 2007 11:54:19 +0000
Subject: [Twisted-Python] "MySQL has gone away"
In-Reply-To: <615514360707260353x292354am8c5a0b0ab06dda86@mail.gmail.com>
References: <eaf39e680707260311y4c901d39u875eedec52080fe@mail.gmail.com>
	<615514360707260353x292354am8c5a0b0ab06dda86@mail.gmail.com>
Message-ID: <28012bc60707260454j2718816cg4df1e32a55d62a20@mail.gmail.com>

On 7/26/07, Aleksey Kishkin <aleksey.kishkin at gmail.com> wrote:
> Actually usually it means mysql server died. it's certainly not twisted
> question, but first of all you need to check mysql logs.

No, it just means Mysql dropped your connection. By default, MySQL is
configured to drop conncetions after a period of inactivity (600
seconds I think). Your client either needs to detect this condition
and reconnect, or you can increase the timeout.

Arnar



From aleksey.kishkin at gmail.com  Thu Jul 26 07:27:05 2007
From: aleksey.kishkin at gmail.com (Aleksey Kishkin)
Date: Thu, 26 Jul 2007 17:27:05 +0400
Subject: [Twisted-Python] "MySQL has gone away"
In-Reply-To: <28012bc60707260454j2718816cg4df1e32a55d62a20@mail.gmail.com>
References: <eaf39e680707260311y4c901d39u875eedec52080fe@mail.gmail.com>
	<615514360707260353x292354am8c5a0b0ab06dda86@mail.gmail.com>
	<28012bc60707260454j2718816cg4df1e32a55d62a20@mail.gmail.com>
Message-ID: <615514360707260627g46dcf2d8t9e526dd3c4c95720@mail.gmail.com>

May be. default wait_timeout 8 hours.

2007/7/26, Arnar Birgisson <arnarbi at gmail.com>:
>
> On 7/26/07, Aleksey Kishkin <aleksey.kishkin at gmail.com> wrote:
> > Actually usually it means mysql server died. it's certainly not twisted
> > question, but first of all you need to check mysql logs.
>
> No, it just means Mysql dropped your connection. By default, MySQL is
> configured to drop conncetions after a period of inactivity (600
> seconds I think). Your client either needs to detect this condition
> and reconnect, or you can increase the timeout.
>
> Arnar
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Aleksey Kishkin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070726/76c2f34f/attachment.html>

From phil at bubblehouse.org  Thu Jul 26 08:17:55 2007
From: phil at bubblehouse.org (Phil Christensen)
Date: Thu, 26 Jul 2007 10:17:55 -0400
Subject: [Twisted-Python] "MySQL has gone away"
In-Reply-To: <eaf39e680707260311y4c901d39u875eedec52080fe@mail.gmail.com>
References: <eaf39e680707260311y4c901d39u875eedec52080fe@mail.gmail.com>
Message-ID: <A6AE56BA-AF61-4F91-8E30-3F62CC8317AA@bubblehouse.org>

On Jul 26, 2007, at 6:11 AM, Pavel Bastov wrote:

> Hi all,
>
> I'm using MySQL database in my server app. Pretty often after some
> inactivity I get this message in my logs "MySQL server has gone away".
> How can I prevent this?
>
> TIA

I've seen this most frequently when I'm dealing with the MySQLdb  
module directly (i.e., not using twisted.adbapi).

It was happening to me when I was trying to use a single cursor  
throughout my code by passing it around as a property of some object.

I believe it has something to do with the weak references used  
internally in the MySQLdb module (this is just a theory).

My solution was to fetch a new cursor in each scope where I needed  
it, making sure to close it when I was done.

Just my 2/100ths....

-phil



From elicriffield at gmail.com  Thu Jul 26 10:33:01 2007
From: elicriffield at gmail.com (Eli Criffield)
Date: Thu, 26 Jul 2007 11:33:01 -0500
Subject: [Twisted-Python] SSHv2 client script for Cisco routers
In-Reply-To: <1184621791.26559.6.camel@fnord.melbourne.eigenmagic.net>
References: <9f68812f0707121206o245cce61l5098a8b5f6549fe9@mail.gmail.com>
	<1184621791.26559.6.camel@fnord.melbourne.eigenmagic.net>
Message-ID: <18e3f33d0707260933w404aab50i56a2d33a9bde44a1@mail.gmail.com>

In my tradition of answering my own questioins.

I finally got around to making a working ssh script that connects to
cisco routers and runs multiple commands.

It has to launch a real shell to work, then loop though the commands
waiting for the shell prompt to enter the next command. The problem i
was having before was i wasn't launching a real shell, just running a
command (among other problems). With a cisco there's no way to do
certain things except to enter a subshell. The script has to be a bit
"expect" like to accuplish that, but it doesn't make any disitions
based on output, just runs the given commands and returns the output
of all of them.

As a library you can run sshCmds() mulitple times. I work around the
problem having multiple reactors by forking for each sshCmds() call,
so it is its own process.

warning Big Cut&Paste
you can get it at: http://eli.criffield.net/conchClient.py  too

#!/usr/bin/python
# -*- coding: utf-8 -*-
# Eli Criffield < python AT zendo dot net >
#
# TODO: stderr is mixed in with stdout
# TODO: cmd line options should be more standard, and parsed by
#       ConchOptions()


''' This will connect to a host and run a list of commands
Its different from just a normal connection because it launches a shell
and waits for the prompt, then sends the command, waits for prompt sends
command ect.. sshCmds() will return the output of all the commands it was
given together.

You probably want to run this on the command line or use sshCmds()
on the command line run:
conchClient.py host comand1 command2

in your python script use:

from conchClient import sshCmds
(out,err) = sshCmds(host,listOfCmds,user,echo)
print out

host is required
listOfCmds is any iterator that returns the commands
        to be run (uswally a list)
user can be None, then the environment LOGNAME will be used
echo must be True or False
'''

__version__ = 0.1185457318
__author__ = 'Eli Criffield <ecriffield at fnni.com>'


import os
import re
import sys
import struct
import base64
from twisted.conch import error
from twisted.python import log
from twisted.conch.client import default, options
from twisted.conch.ssh import channel, common, connection, keys, session, \
    transport, userauth
from twisted.internet import defer, protocol, reactor, stdio

# Regular expressions
rxPrompt = re.compile('[\\>\\#\\$] $', re.M)
rxMore = re.compile('--More--', re.M)


class SSHClientFactory(protocol.ClientFactory):

    def __init__(self, cmdlist, host, user, outputer):
        self.host = host
        self.user = user
        self.cmdlist = cmdlist
        self.cmdlist.reverse()
        self.outputer = outputer

    def stopFactory(self):
        try:
            reactor.stop()
        except:
            pass

    def buildProtocol(self, addr):
        clientTransport = SSHClientTransport(cmdlist=self.cmdlist,
                outputer=self.outputer)
        clientTransport.user = self.user
        clientTransport.host = self.host
        return clientTransport

    def clientConnectionFailed(self, connector, reason):
        print 'Connection failed: %s' % reason

    def clientConnectionLost(self, connector, reason):
        pass

class ClientOptions(options.ConchOptions):
    identitys = ['~/.ssh/id_rsa', '~/.ssh/id_dsa']
    pass


class SSHClientUserAuth(default.SSHUserAuthClient):

    def __init__(self, user, *args):
        userauth.SSHUserAuthClient.__init__(self, user, *args)
        self.keyAgent = None
        self.options = ClientOptions()
        self.usedFiles = []


class SSHClientConnection(connection.SSHConnection):

    def __init__(self, cmdlist, outputer, *args, **kwargs):
        connection.SSHConnection.__init__(self, *args, **kwargs)
        self.cmdlist = cmdlist
        self.outputer = outputer

    def serviceStarted(self):
        log.msg('Opening command channel')
        self.openChannel(SSHCommandChannel(cmdlist=self.cmdlist,
                         outputer=self.outputer, conn=self))


class SSHClientTransport(transport.SSHClientTransport):

    def __init__(self, cmdlist, outputer):
        self.cmdlist = cmdlist
        self.outputer = outputer

    def receiveError(self, code, desc):
        print 'disconnected error %i: %s' % (code, desc)

    def sendDisconnect(self, code, reason):
        print 'disconnect error %i: %s' % (code, reason)
        transport.SSHClientTransport.sendDisconnect(self, code, reason)

    def verifyHostKey(self, pubKey, fingerprint):
        host = self.host
        goodKey = default.isInKnownHosts(host, pubKey, {'known-hosts': None})
        if goodKey == 1:  # good key
            return defer.succeed(1)
        elif goodKey == 2: # AAHHHHH changed
            return defer.fail(ConchError('changed host key'))
        else:
            (oldout, oldin) = (sys.stdout, sys.stdin)
            sys.stdin = sys.stdout = open('/dev/tty', 'r+')
            if host == self.transport.getPeer().host:
                khHost = host
            else:
                host = '%s (%s)' % (host, self.transport.getPeer().host)
                khHost = '%s,%s' % (host, self.transport.getPeer().host)
            keyType = common.getNS(pubKey)[0]
            print "The authenticity of host '%s' can't be
established.\n    %s key fingerprint is %s." % \
                (host, {'ssh-dss': 'DSA', 'ssh-rsa': 'RSA'}[keyType],
                 fingerprint)
            try:
                ans = raw_input('Are you sure you want to continue
connecting (yes/no)? ')
            except KeyboardInterrupt:
                return defer.fail(ConchError('^C'))
            while ans.lower() not in ('yes', 'no'):
                ans = raw_input("Please type 'yes' or 'no': ")
            (sys.stdout, sys.stdin) = (oldout, oldin)
            if ans == 'no':
                print 'Host key verification failed.'
                return defer.fail(ConchError('bad host key'))
            print "Warning: Permanently added '%s' (%s) to the list of
known hosts." % \
                (khHost, {'ssh-dss': 'DSA', 'ssh-rsa': 'RSA'}[keyType])
            known_hosts = open(os.path.expanduser('~/.ssh/known_hosts'),
                               'r+')
            known_hosts.seek(-1, 2)
            if known_hosts.read(1) != '\n':
                known_hosts.write('\n')
            encodedKey = base64.encodestring(pubKey).replace('\n', '')
            known_hosts.write('%s %s %s\n' % (khHost, keyType,
                              encodedKey))
            known_hosts.close()
            return defer.succeed(1)

    def connectionSecure(self):
        log.msg('Securing connection')
        clientConnection = SSHClientConnection(cmdlist=self.cmdlist,
                outputer=self.outputer)
        self.requestService(SSHClientUserAuth(self.user,
                            clientConnection))


class SSHCommandChannel(channel.SSHChannel):

    name = 'session'

    def __init__(self, cmdlist, outputer, *args, **kwargs):
        channel.SSHChannel.__init__(self, *args, **kwargs)
        self.cmdlist = cmdlist
        self.outputer = outputer

    def openFailed(self, reason):
        print 'channel open failed: %s' % reason

    def channelOpen(self, data):
        log.msg('Channel open')
        term = 'ansi'
        winsz = struct.pack('4H', 80, 25, 80, 25)
        winSize = struct.unpack('4H', winsz)
        ptyReqData = session.packRequest_pty_req(term, winSize, '')
        self.conn.sendRequest(self, 'pty-req', ptyReqData)
        self.conn.sendRequest(self, 'shell', '')
        self.data = ''

    def dataReceived(self, data):
        self.data += data
        self.outputer.moreStdout(data)

        promptMatch = rxPrompt.search(self.data)
        if promptMatch:
            self.data = ''
            if len(self.cmdlist) > 0:
                cmd = self.cmdlist.pop()
                log.msg('execing: %s'%cmd)
                self.write(cmd)
                self.write('\n')
            else:
                self.loseConnection()
        # moreMatch is needed for cisco's
        # Since we have a terminal, it pauses with a more
        # at each screen, hit space and it will continue
        moreMatch = rxMore.search(self.data)
        if moreMatch:
            self.data = ''
            #hit space
            self.write(' ')

    def extReceived(self, t, data):
        if t == connection.EXTENDED_DATA_STDERR:
            sys.stderr.write(data)

    def eofReceived(self):
        log.msg('Received EOF')
        self.loseConnection()

    def closeReceived(self):
        log.msg('Remote side closed')
        self.conn.sendClose(self)

    def closed(self):
        log.msg('Channel closed')
        reactor.stop()
        log.msg('Reactor Stoped')
        return None

    def request_exit_status(self, data):
        global exitStatus
        exitStatus = int(struct.unpack('>L', data)[0])
        log.msg('Exit status: %s' % exitStatus)

    def sendEOF(self):
        self.conn.sendEOF(self)

    def stopWriting(self):
        pass

    def startWriting(self):
        pass


class saveOutput:

    def __init__(self, echo=False):
        self.stdout = ''
        self.stderr = ''
        self.echo = echo

    def moreStdout(self, data):
        if self.echo:
            sys.stdout.write(data)
            sys.stdout.flush()
        self.stdout += data

    def moreStderr(self, data):
        if self.echo:
            sys.stderr.write(data)
            sys.stderr.flush()
        self.stderr += data


def __sshCmds(host, cmds, user=None, echo=False):
    outputer = saveOutput(echo=echo)
    clientFactory = SSHClientFactory(cmdlist=cmds, host=host, user=user,
            outputer=outputer)
    log.msg('Connecting to:%s'%host)
    reactor.connectTCP(host, 22, clientFactory)
    log.msg('Starting reactor')
    reactor.run()
    log.msg('Reactor has ended')
    return (outputer.stdout, outputer.stderr)


def sshCmds(host, cmds, user=None, echo=False):
    '''
    from conchClient import sshCmds
    (out,err) = sshCmds(host,listOfCmds,user,echo)
    print out

    host is required
    listOfCmds is any interator that returns the commands
            to be run (uswally a list)
    user can be None, then the envorment LOGNAME will be used
    echo must be True or False
    '''
    if user == None:
        user = os.environ.get('LOGNAME')

    # We have to fork because running the reactor twice doesn't work well
    (rPipe, wPipe) = os.pipe()  # these are file descriptors, not file objects
    pid = os.fork()
    if pid:
        # I'm the Parent
        os.close(wPipe)
        rfd = os.fdopen(rPipe)
        outpt = rfd.read()
        os.waitpid(pid, 0)  # make sure the child process gets cleaned up
        # FIXME, stderr is mixed in with stdout
        fakeerr = ''
        return (outpt, fakeerr)
    else:

        # I'm the Child
        os.close(rPipe)
        wfd = os.fdopen(wPipe, 'w')
        (stdout, stderr) = __sshCmds(host, cmds, user, echo)
        # FIXME Stderr is mixed with stdout
        wfd.write(stdout)
        wfd.close()
        sys.exit(0)


if __name__ == '__main__':

    if len(sys.argv) < 3:
        print '%s [user@]host cmd1 [cmd2 cmd3]'
        sys.exit(1)
    if (sys.argv)[1].find('@') != -1:
        (user, host) = (sys.argv)[1].split('@', 1)
    else:
        user = None
        host = (sys.argv)[1]
    cmds = (sys.argv)[2:]

    (out, err) = sshCmds(host, cmds, user, True)
    print '\n'



From paulswartz at gmail.com  Thu Jul 26 11:49:05 2007
From: paulswartz at gmail.com (Paul Swartz)
Date: Thu, 26 Jul 2007 13:49:05 -0400
Subject: [Twisted-Python] potential connectSSH workflow
Message-ID: <324cfb540707261049l58b0e10cj50c62b726c528fef@mail.gmail.com>

I've written up a potential workflow for connectSSH, a simplified way
of using Twisted Conch.  It's available at
http://z3p.jot.com/WikiHome/SummerOfCode2007/connectSSH.  If those who
are interested could take a look, I'd love some feedback.

thanks,
-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin



From glyph at divmod.com  Thu Jul 26 14:13:51 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 26 Jul 2007 20:13:51 -0000
Subject: [Twisted-Python] potential connectSSH workflow
In-Reply-To: <324cfb540707261049l58b0e10cj50c62b726c528fef@mail.gmail.com>
References: <324cfb540707261049l58b0e10cj50c62b726c528fef@mail.gmail.com>
Message-ID: <20070726201351.26384.117469790.divmod.xquotient.2267@joule.divmod.com>

On 05:49 pm, paulswartz at gmail.com wrote:
>I've written up a potential workflow for connectSSH, a simplified way
>of using Twisted Conch.  It's available at
>http://z3p.jot.com/WikiHome/SummerOfCode2007/connectSSH.  If those who
>are interested could take a look, I'd love some feedback.

Thanks a lot!  Here are my initial impressions:

The bundle of crud that lives in ~/.ssh should be represented as an 
object.  connectSSH should really be a method on that object, so that 
things like host key verification can happen as normal and expected. 
This is especially true because that object can have references to other 
objects, such as the (Deferred-returning) UI for authorizing or denying 
an unexpected host key.  That object could also be more easily tested 
because the reactor could be an attribute of it rather than a global 
import.  Unfortunately there's a lot of code in Twisted that doesn't do 
this yet, but we should be building better use of that singleton.  See 
http://glyf.livejournal.com/70684.html

(On a tangent, this is similar to the fact that in the next-generation 
HTTP API, there should be a "browser" object for indirecting the 
reactor, but also for persisting cookies, HTTP authorization headers, 
and the like.  A free function for doing a connectSSH is lame for many 
of the same reasons that getPage() is lame.)

This also looks like an excellent use-case for endpoints.  Please see 
this ticket:
    http://twistedmatrix.com/trac/ticket/1442
and see if you have any feedback there.

What do you think?



From paulswartz at gmail.com  Thu Jul 26 15:14:16 2007
From: paulswartz at gmail.com (Paul Swartz)
Date: Thu, 26 Jul 2007 17:14:16 -0400
Subject: [Twisted-Python] potential connectSSH workflow
In-Reply-To: <20070726201351.26384.117469790.divmod.xquotient.2267@joule.divmod.com>
References: <324cfb540707261049l58b0e10cj50c62b726c528fef@mail.gmail.com>
	<20070726201351.26384.117469790.divmod.xquotient.2267@joule.divmod.com>
Message-ID: <324cfb540707261414x5519bc7ob593fe635c955600@mail.gmail.com>

On 7/26/07, glyph at divmod.com <glyph at divmod.com> wrote:
> On 05:49 pm, paulswartz at gmail.com wrote:
> >I've written up a potential workflow for connectSSH, a simplified way
> >of using Twisted Conch.  It's available at
> >http://z3p.jot.com/WikiHome/SummerOfCode2007/connectSSH.  If those who
> >are interested could take a look, I'd love some feedback.
>
> Thanks a lot!  Here are my initial impressions:
>
> The bundle of crud that lives in ~/.ssh should be represented as an
> object.  connectSSH should really be a method on that object, so that
> things like host key verification can happen as normal and expected.
> This is especially true because that object can have references to other
> objects, such as the (Deferred-returning) UI for authorizing or denying
> an unexpected host key.  That object could also be more easily tested
> because the reactor could be an attribute of it rather than a global
> import.  Unfortunately there's a lot of code in Twisted that doesn't do
> this yet, but we should be building better use of that singleton.  See
> http://glyf.livejournal.com/70684.html


That makes sense:  a ConchConnection object which wraps some of the
nonsense that currently lives in t.c.scripts.conch like verifying a
host key and finding keys to use.  I still think that passing
authentication data in connect() is the right idea, but it can default
to using the keys that it finds in ~/.ssh or in a key agent.

> This also looks like an excellent use-case for endpoints.  Please see
> this ticket:
>     http://twistedmatrix.com/trac/ticket/1442
> and see if you have any feedback there.

I think making a ConchClientEndpoint which takes another
ClientEndpoint and some authentication data is a good interface, but
I'm not holding my breath for endpoints-1442 getting merged to trunk.
I'm already depending on at least 1-2 of my branches getting merged :)

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin



From glyph at divmod.com  Thu Jul 26 15:24:15 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 26 Jul 2007 21:24:15 -0000
Subject: [Twisted-Python] potential connectSSH workflow
In-Reply-To: <324cfb540707261414x5519bc7ob593fe635c955600@mail.gmail.com>
References: <324cfb540707261049l58b0e10cj50c62b726c528fef@mail.gmail.com>
	<20070726201351.26384.117469790.divmod.xquotient.2267@joule.divmod.com>
	<324cfb540707261414x5519bc7ob593fe635c955600@mail.gmail.com>
Message-ID: <20070726212415.26384.1222446528.divmod.xquotient.2360@joule.divmod.com>

On 09:14 pm, paulswartz at gmail.com wrote:
>That makes sense: a ConchConnection object which wraps some of the
>nonsense that currently lives in t.c.scripts.conch like verifying a
>host key and finding keys to use.

"Connection" seems like a weird name for that to me, as it applies it is 
attached to a particular ... well, connection.  Connector, maybe? 
Client?  ClientStorage?   I guess those names have some pretty serious 
problems too, but it's worth thinking about a better one.
>I still think that passing
>authentication data in connect() is the right idea, but it can default
>to using the keys that it finds in ~/.ssh or in a key agent.

I agree emphatically, but both the default and non-default cases are 
equally important.  There's a direct analogue in the user interface: 
"ssh foo.com" will use your default key or agent, and your default 
username, and that's 99% of usage.  That, of course, doesn't mean you 
can get rid of "ssh -i mykey.id_rsa foo.com" or "ssh otheruser at foo.com", 
they're both very necessary use-cases.
>>This also looks like an excellent use-case for endpoints.  Please see
>>this ticket:
>>     http://twistedmatrix.com/trac/ticket/1442
>>and see if you have any feedback there.
>
>I think making a ConchClientEndpoint which takes another
>ClientEndpoint and some authentication data is a good interface, but
>I'm not holding my breath for endpoints-1442 getting merged to trunk.
>I'm already depending on at least 1-2 of my branches getting merged :)

Definitely.  This should be a separate ticket.  In fact, far from asking 
you to wait for it to be merged, I was wondering if you had any comments 
on the interface that might come from use-cases that would arise in the 
conch endpoint implementation that might even further delay it :).



From paulswartz at gmail.com  Thu Jul 26 15:47:08 2007
From: paulswartz at gmail.com (Paul Swartz)
Date: Thu, 26 Jul 2007 17:47:08 -0400
Subject: [Twisted-Python] potential connectSSH workflow
In-Reply-To: <20070726212415.26384.1222446528.divmod.xquotient.2360@joule.divmod.com>
References: <324cfb540707261049l58b0e10cj50c62b726c528fef@mail.gmail.com>
	<20070726201351.26384.117469790.divmod.xquotient.2267@joule.divmod.com>
	<324cfb540707261414x5519bc7ob593fe635c955600@mail.gmail.com>
	<20070726212415.26384.1222446528.divmod.xquotient.2360@joule.divmod.com>
Message-ID: <324cfb540707261447q240cc4b0ve340fed2148a3fe8@mail.gmail.com>

On 7/26/07, glyph at divmod.com <glyph at divmod.com> wrote:
> On 09:14 pm, paulswartz at gmail.com wrote:
> >That makes sense: a ConchConnection object which wraps some of the
> >nonsense that currently lives in t.c.scripts.conch like verifying a
> >host key and finding keys to use.
>
> "Connection" seems like a weird name for that to me, as it applies it is
> attached to a particular ... well, connection.  Connector, maybe?
> Client?  ClientStorage?   I guess those names have some pretty serious
> problems too, but it's worth thinking about a better one.

I actually meant Connector :) There's also Creator (in comparison with
t.i.protocol.ClientCreator).

> >I still think that passing
> >authentication data in connect() is the right idea, but it can default
> >to using the keys that it finds in ~/.ssh or in a key agent.
>
> I agree emphatically, but both the default and non-default cases are
> equally important.  There's a direct analogue in the user interface:
> "ssh foo.com" will use your default key or agent, and your default
> username, and that's 99% of usage.  That, of course, doesn't mean you
> can get rid of "ssh -i mykey.id_rsa foo.com" or "ssh otheruser at foo.com",
> they're both very necessary use-cases.

So how about this:

class IConch<C word>(Interface):
    def connect(host, port=22, user=None, knownHosts=None,
authentications=None):

where user defaults to the current username, knownHosts defaults to
the to hosts in known_hosts, and authentications defaults to a key
agent or the keys in .ssh/id_*.

To keep the current use case of verifying a host key with a function,
knownHosts could be a filename string, in which case it would be read
for host keys, or a function in which case it is called with the key
and fingerprint.  authentications would be a list functioning the same
was as in my initial outline.

This would make the default .connect(hostname) work equivalently to
the default 'ssh hostname' but still give options for the other
overrides.

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin



From honeyday.mj at gmail.com  Thu Jul 26 19:48:12 2007
From: honeyday.mj at gmail.com (=?GB2312?B?wu3MpLfJ0eA=?=)
Date: Fri, 27 Jul 2007 09:48:12 +0800
Subject: [Twisted-Python] "MySQL has gone away"
In-Reply-To: <eaf39e680707260311y4c901d39u875eedec52080fe@mail.gmail.com>
References: <eaf39e680707260311y4c901d39u875eedec52080fe@mail.gmail.com>
Message-ID: <767559b0707261848g647a6468p38a78a01bba4d11e@mail.gmail.com>

2007/7/26, Pavel Bastov <pbastov at gmail.com>:
> Hi all,
>
> I'm using MySQL database in my server app. Pretty often after some
> inactivity I get this message in my logs "MySQL server has gone away".
> How can I prevent this?
>
> TIA
>

U can use Mysql::Ping(dbh) to keep the connection alive.

-----------
n = mysql::Ping(dbh)

Checks whether or not the connection to the server is working. If it
has gone down, an automatic reconnection is attempted.

Clients that remain idle for a long while, to check whether or not the
server has closed the connection and reconnect if necessary can use
this function.

Returns true if the server is alive and false if an error occurred.



From glyph at divmod.com  Thu Jul 26 19:50:04 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 27 Jul 2007 01:50:04 -0000
Subject: [Twisted-Python] potential connectSSH workflow
In-Reply-To: <324cfb540707261447q240cc4b0ve340fed2148a3fe8@mail.gmail.com>
References: <324cfb540707261049l58b0e10cj50c62b726c528fef@mail.gmail.com>
	<20070726201351.26384.117469790.divmod.xquotient.2267@joule.divmod.com>
	<324cfb540707261414x5519bc7ob593fe635c955600@mail.gmail.com>
	<20070726212415.26384.1222446528.divmod.xquotient.2360@joule.divmod.com>
	<324cfb540707261447q240cc4b0ve340fed2148a3fe8@mail.gmail.com>
Message-ID: <20070727015004.26384.577094423.divmod.xquotient.2509@joule.divmod.com>

On 26 Jul, 09:47 pm, paulswartz at gmail.com wrote:
>On 7/26/07, glyph at divmod.com <glyph at divmod.com> wrote:
>>On 09:14 pm, paulswartz at gmail.com wrote:

Let me quote this point from the end first, because it is the central 
point of agreement, and basically the specification for this feature:
>This would make the default .connect(hostname) work equivalently to
>the default 'ssh hostname' but still give options for the other
>overrides.

I don't think, however, that the distinction being proposed (function 
arguments vs. defaults) is quite the right way to go about it, though.
>> >That makes sense: a ConchConnection object (snip)

>>"Connection" seems like a weird name for that to me, as it applies it 
>>is
>>attached to a particular ... well, connection.  Connector, maybe?

>I actually meant Connector :) There's also Creator (in comparison with
>t.i.protocol.ClientCreator).

Let's call it ConchEndpoint for the moment.  Hopefully why I say that 
will become clear in a moment.
>> >I still think that passing
>> >authentication data in connect() is the right idea, but it can 
>>default
>> >to using the keys that it finds in ~/.ssh or in a key agent.

>>I agree emphatically, but both the default and non-default cases are
>>equally important.

>class IConch<C word>(Interface):
>    def connect(host, port=22, user=None, knownHosts=None,
>authentications=None):

I think the interface here is probably superfluous.  The interface 
definition, when there is one, should really just be an endpoint.  These 
may make sense as constructor arguments or arguments to a method that 
builds an endpoint though.  (More below...)
>To keep the current use case of verifying a host key with a function,
>knownHosts could be a filename string, in which case it would be read
>for host keys, or a function in which case it is called with the key
>and fingerprint.  authentications would be a list functioning the same
>was as in my initial outline.

OK, let's have a bit more depth.  This interface isn't quite right.

Starting at the bottom, "knownHosts" is the wrong name for this object. 
It should be "hostVerifier" and it should be an object with a method to 
verify the host.  It should definitely _not_ accept a filename string; 
in the filename case, it should look something like this:

    OpenSSHFormatVerifier(FilePath("my-ssh-hosts-file")
                          ui=GuiPasswordDialog())

In general, I think passing filenames around should be deprecated within 
Twisted; FilePath provides lots more flexibility, especially with a real 
interface to unify it with ZipPath.  (A marginal benefit of this is that 
your tests can avoid a whole bunch of file I/O because you can have a 
mock memory-backed FilePath.  This benefit becomes less marginal as more 
and more tests use it and the whole suite speeds up, though.)

As far as object-vs-function, passing functions around is always 
tempting, but it tends to mean "This is an object with only one obvious 
method that I've thought of so far, which I'll call '__call__'".  There 
are lots of places I've used this idiom and found that it falls down and 
gets ugly when it ends up that you actually want _two_ methods instead.

To retain compatibility with the existing use-a-function-to-verify path, 
it would of course be trivial to have a SimpleFunctionVerifier.

This might seem like a lot of typing, so to help with abbreviation, a 
higher-level object could roll them together:

    altdotssh = DotSSH(FilePath("my-dot-ssh-dir"))

And this leads in to my idea for subtly changing the design.  Instead of 
modifying stuff with arguments to the function:

    defaultConnector.connectSSH(
        factory, hostname, hostVerifier=altdotssh.hostVerifier)

Building a different object takes roughly the same amount of work and 
does roughly the same thing, but yields a result which can be passed 
around and used as a connector:

    endpt = defaultConfig.endpointSSH(
        hostname, hostVerifier=altdotssh.hostVerifier)
    endpt.connect(factory)

To push this flexibility even further, you could make the configuration 
object cloneable.

    cfg2 = defaultConfig.copy(hostVerifier=altdotssh.hostVerifier)
    endpt = cfg2.endpointSSH(hostname)
    endpt.connect(factory)

although whether this last additional level of flexibility is worth it 
or not probably depends on all of the things that a "configuration" 
object can contain.

Thoughts?



From paulswartz at gmail.com  Thu Jul 26 20:51:17 2007
From: paulswartz at gmail.com (Paul Swartz)
Date: Thu, 26 Jul 2007 22:51:17 -0400
Subject: [Twisted-Python] potential connectSSH workflow
In-Reply-To: <20070727015004.26384.577094423.divmod.xquotient.2509@joule.divmod.com>
References: <324cfb540707261049l58b0e10cj50c62b726c528fef@mail.gmail.com>
	<20070726201351.26384.117469790.divmod.xquotient.2267@joule.divmod.com>
	<324cfb540707261414x5519bc7ob593fe635c955600@mail.gmail.com>
	<20070726212415.26384.1222446528.divmod.xquotient.2360@joule.divmod.com>
	<324cfb540707261447q240cc4b0ve340fed2148a3fe8@mail.gmail.com>
	<20070727015004.26384.577094423.divmod.xquotient.2509@joule.divmod.com>
Message-ID: <324cfb540707261951r6f78924cw3bedbbb5084dc7e1@mail.gmail.com>

On 7/26/07, glyph at divmod.com <glyph at divmod.com> wrote:
> This might seem like a lot of typing, so to help with abbreviation, a
> higher-level object could roll them together:
>
>     altdotssh = DotSSH(FilePath("my-dot-ssh-dir"))
>
> And this leads in to my idea for subtly changing the design.  Instead of
> modifying stuff with arguments to the function:
>
>     defaultConnector.connectSSH(
>         factory, hostname, hostVerifier=altdotssh.hostVerifier)
>
> Building a different object takes roughly the same amount of work and
> does roughly the same thing, but yields a result which can be passed
> around and used as a connector:
>
>     endpt = defaultConfig.endpointSSH(
>         hostname, hostVerifier=altdotssh.hostVerifier)
>     endpt.connect(factory)

So, is defaultConfig is some other object which can create a
ConchEndpoint?  Is defaultConfig a DotSSH?  I'm not clear on what
these different objects are here.

> To push this flexibility even further, you could make the configuration
> object cloneable.
>
>     cfg2 = defaultConfig.copy(hostVerifier=altdotssh.hostVerifier)
>     endpt = cfg2.endpointSSH(hostname)
>     endpt.connect(factory)
>
> although whether this last additional level of flexibility is worth it
> or not probably depends on all of the things that a "configuration"
> object can contain.
>
> Thoughts?

This seems reasonable, at least for the case of host verification.
I'm not sure where authentication fits into these things, though.  It
feels different from host key verification, but moving it to the
connect() method makes the ConchEndpoint a different interface from
the other Endpoints.  I suppose with a copy method:

defaultConfig.copy(user="new username",
authentications=[KeyAuthentication(key),
PasswordAuthentication('password'), InteractiveAuthentication(['answer
1'])]).endPointSSH(hostname).connect()

 is straightforward enough.  But it seems more confusing than:

defaultConfig.endPointSSH(hostname, user="name").connect()

which seems more in line with my personal expectations.  I think,
however, my expectations might be changed if the above example was
more clear to me.

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin



From phil at bubblehouse.org  Fri Jul 27 09:42:37 2007
From: phil at bubblehouse.org (Phil Christensen)
Date: Fri, 27 Jul 2007 11:42:37 -0400
Subject: [Twisted-Python] wsgi thread synchronization
Message-ID: <B63731D3-8EA1-4C49-B45F-F6CE1805E515@bubblehouse.org>

I'm crossposting because although my use case is in web, this is more  
of a question about dealing with threads in twisted. I have a decent  
academic understanding of threads, but I've never really used them in  
Python or Twisted.

I've just moved from a mod_python WSGI container running on prefork  
apache2 to a container running on twisted.web, and I realized that I  
now have threading considerations I didn't before.

Since my potential synchronization problems are actually quite few,  
I've been getting by just by using threading.BoundedSemaphore to  
manage a couple of thread-sensitive areas of the web app. However, I  
already have a dependency on Twisted core, so it occurs to me that  
there are probably nicer, twistier ways of doing this.

For example, I have a section of code like:


     host_tree = {}
     host_tree_lock = threading.BoundedSemaphore

     def get_application(env):
         global host_tree, host_tree_lock

         host = env.get('HTTP_HOST', env['SERVER_NAME'])

         host_tree_lock.acquire()

         if not(host in host_tree):
             _load_plugins(env)

         host_node = host_tree[host]

         if not(host_node.has_path(env['REQUEST_URI'])):
             _load_plugins(env)

         app = host_node.get_data_at(env['REQUEST_URI'])

         host_tree_lock.release()

         return app


The only variable shared between threads is the `host_tree` global  
(the `env` variable is the WSGI environment, which is unique per  
thread, and the resulting `app` object is immutable). This works for  
me and is sufficient for my needs, but I'd appreciate a sanity check  
from anyone with some thread karma to spare.

Thanks again,

-phil



From radix at twistedmatrix.com  Fri Jul 27 09:49:37 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 27 Jul 2007 11:49:37 -0400
Subject: [Twisted-Python] Re: [Twisted-web] wsgi thread synchronization
In-Reply-To: <B63731D3-8EA1-4C49-B45F-F6CE1805E515@bubblehouse.org>
References: <B63731D3-8EA1-4C49-B45F-F6CE1805E515@bubblehouse.org>
Message-ID: <60ed19d40707270849p531417adxc06ed63b922071a7@mail.gmail.com>

On 7/27/07, Phil Christensen <phil at bubblehouse.org> wrote:

>      host_tree = {}
>      host_tree_lock = threading.BoundedSemaphore
>
>      def get_application(env):
>          global host_tree, host_tree_lock
>
>          host = env.get('HTTP_HOST', env['SERVER_NAME'])
>
>          host_tree_lock.acquire()

[bunch of stuff]

>          host_tree_lock.release()
>
>          return app

> The only variable shared between threads is the `host_tree` global
> (the `env` variable is the WSGI environment, which is unique per
> thread, and the resulting `app` object is immutable). This works for
> me and is sufficient for my needs, but I'd appreciate a sanity check
> from anyone with some thread karma to spare.

The most immediately obvious problem is that you're not protecting
yourself from an error in the code between the acquire and the
release. You'll want to start a try: block immediately after the
acquire and move the release into a finally: block.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From paulswartz at gmail.com  Fri Jul 27 13:07:04 2007
From: paulswartz at gmail.com (Paul Swartz)
Date: Fri, 27 Jul 2007 15:07:04 -0400
Subject: [Twisted-Python] potential connectSSH workflow
In-Reply-To: <20070727015004.26384.577094423.divmod.xquotient.2509@joule.divmod.com>
References: <324cfb540707261049l58b0e10cj50c62b726c528fef@mail.gmail.com>
	<20070726201351.26384.117469790.divmod.xquotient.2267@joule.divmod.com>
	<324cfb540707261414x5519bc7ob593fe635c955600@mail.gmail.com>
	<20070726212415.26384.1222446528.divmod.xquotient.2360@joule.divmod.com>
	<324cfb540707261447q240cc4b0ve340fed2148a3fe8@mail.gmail.com>
	<20070727015004.26384.577094423.divmod.xquotient.2509@joule.divmod.com>
Message-ID: <324cfb540707271207i4fc1deaesab38d0a82158570d@mail.gmail.com>

On 7/26/07, glyph at divmod.com <glyph at divmod.com> wrote:
 > Thoughts?

I've updated the wiki
(http://z3p.jot.com/WikiHome/SummerOfCode2007/connectSSH) with an
interface that is more along the lines of what you presented here.
I'm out for the weekend, but I'd love comments.

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin



From daniel at keystonewood.com  Fri Jul 27 14:53:31 2007
From: daniel at keystonewood.com (Daniel Miller)
Date: Fri, 27 Jul 2007 16:53:31 -0400
Subject: [Twisted-Python] Re: Handling PBConnectionLost errors
In-Reply-To: <46A76544.6080404@tekNico.net>
References: <99A576C3-FE5E-4AE3-A48F-1720C9ECA16B@keystonewood.com>
	<E6C8DE88-2B46-42D4-A705-E7D621DD7653@keystonewood.com>
	<46A76544.6080404@tekNico.net>
Message-ID: <A28123CC-8EBD-437B-835A-A8534B4CCA04@keystonewood.com>


On Jul 25, 2007, at 10:59 AM, Nicola Larosa wrote:
>> Daniel Miller wrote:
>>> I have two questions:
>>>
>>> 1. Does something like this already exist?
>>> 2. Is this a totally stupid idea? (would it be better to improve our
>>> physical network than to try to band-aid the problem with something
>>> like this?)
>
> We had similar problems at a previous job of mine, and successfully  
> used a
>  similar approach to solve them; therefore you have my blessing,  
> for what
> it's worth.

Thanks Nicola.

~ Daniel



From daniel at keystonewood.com  Fri Jul 27 14:57:59 2007
From: daniel at keystonewood.com (Daniel Miller)
Date: Fri, 27 Jul 2007 16:57:59 -0400
Subject: [Twisted-Python] Handling PBConnectionLost errors
In-Reply-To: <1185376187.13244.31.camel@doorstop.net.ic.ac.uk>
References: <99A576C3-FE5E-4AE3-A48F-1720C9ECA16B@keystonewood.com>
	<E6C8DE88-2B46-42D4-A705-E7D621DD7653@keystonewood.com>
	<1185376187.13244.31.camel@doorstop.net.ic.ac.uk>
Message-ID: <3004EF8A-172A-4342-A401-0634F6BF7141@keystonewood.com>

On Jul 25, 2007, at 11:09 AM, Phil Mayers wrote:
> First question: why is your PB server allocating "request IDs" and
> storing hashes of them. You could just return a pb.Referenceable to  
> the
> client, backed by a normal python object (with a normal object
> lifecycle) on the server.

That's something I hadn't thought of. A referenceable might simplify  
my problem a bit.

> Regarding the retry mechanism: It looks to me like you're treating PB
> like an RPC mechanism, and finding that the nature of networks (they
> fail, unpredictably) is tripping you up. Try thinking of it in a more
> message-oriented way.
>
> I would implement it something like this, using the python2.5 yield  
> and
> inlineCallbacks functionality:
>
> <snip>
>
> Your example is a bit theoretical, so it's difficult to see if this
> would work for you.

I'll have to give that a deeper look later, but thanks a lot for the  
ideas and insight.

~ Daniel




From db3l.net at gmail.com  Fri Jul 27 23:07:58 2007
From: db3l.net at gmail.com (David Bolen)
Date: Sat, 28 Jul 2007 01:07:58 -0400
Subject: [Twisted-Python] Re: Handling PBConnectionLost errors
References: <99A576C3-FE5E-4AE3-A48F-1720C9ECA16B@keystonewood.com>
	<E6C8DE88-2B46-42D4-A705-E7D621DD7653@keystonewood.com>
Message-ID: <m2wswl3ykx.fsf@valheru.db3l.homeip.net>

Daniel Miller <daniel at keystonewood.com> writes:

> Is this such a stupid question that it doesn't even warrant a response?
>
> ~ Daniel

I agree with the other comment to the effect that the lack of response
may be more due to the underlying complexity of the question as to
lack of interest.  I know we definitely ran into similar issues in a
large PB-based system I worked on a while ago, and in the end
determined that we were best served by implementing our own system.

For example, your opening point about:

>>                       (...)                                 It
>> would be nice to implement a fail-safe(er) way of calling remote
>> methods that would retry when necessary until the remote method has
>> been called successfully and the result has been returned.  (...)

has an implicit assumption that the remote method will even continue
to exist once the disconnect has occurred - something that is by no
means guaranteed with PB.

That is, what if the method you are trying to call is on a
Referenceable you got back from the server, but it was to an object
instance on the server that was created just for your client
connection?  The connection breaking will destroy that remote object
and/or your ability to reconnect to it without special support on the
server to keep it persistent.  Not to mention however many other
references to that remote object you may have in existence on the
client which will no longer function even after a reconnect.

That's not to say that there aren't plausible ways to achieve what
you're looking for, but in general it becomes application specific,
since you'll need knowledge as to how state management on your server
is taking place, and what remote references are stable across
connections.  So if your use of random IDs and reconnect attempts is a
workable way for you to manage the server state in such a way that it
is reconnectable, then it may be perfectly good in your environment.

Perhaps some earlier messages of mine when we had just finished
putting together the remote wrapping and reconnect support in our
system.  See my responses to the thread at:

http://twistedmatrix.com/pipermail/twisted-python/2005-July/011030.html

and

http://twistedmatrix.com/pipermail/twisted-python/2005-July/011046.html

It hits on topics beyond that of just a reliable method call, but the
second message more specifically talks about the wrapper that
implements reconnections, and how we dealt with updating references
post-reconnect.  You can probably see how the design dovetailed with
our particular server side structure (the registry was persistent as
were the managers, so they provided the concrete point of
reattachment).  And the use of the wrappers around references meant we
could "correct" the wrappers for a new connection without having to
worry about what parts of the client application may have been holding
references.  Perhaps it will give you some other ideas in your own
system.

For your other points:

>> I have two questions:
>>
>> 1. Does something like this already exist?

There used to be a "sturdy" PB module in Twisted (looks like it's gone
in later releases) to attempt to provide a more persistent server
reference.  Also, if I recall correctly there's a
ReconnectingClientFactory class somewhere which, while not PB
specific, was a way to implement reconnections purely at the
factory/protocol level.  Of course, that's never really the complex
part in a PB application - it's figuring out what to do with your
remote references.

Some of the work in the publish.py and refpath.py PB modules are also
attempts to solve some of the issues involved here.

But I'm not aware of any existing approach that is generally suitable
for any application.  I rather doubt any single generic approach would
be possible, since PB provides for many mechanisms of statement
management and referenceability among servers and clients.

>> 2. Is this a totally stupid idea? (would it be better to improve
>> our physical network than to try to band-aid the problem with
>> something like this?)

It's never a stupid idea to engineer for network interruptions, but
like everything else a design must weigh benefits against
cost/development.  With that said, it might not be a bad idea to also
look into your network.  TCP connections are rather hard to break just
due to network transmission problems, and all your PB calls are going
across a single TCP session.  They might be significantly delayed on a
bad network, but the connection itself shouldn't fail unless something
more extreme (and unusual) is happening.  Given the level of problems
you're encountering, I wouldn't be surprised if something else was
awry.

Of course, that level of network troubleshooting can have it's own
cost/benefit analysis, and it might just be simpler to engineer around
the problem at the application level as you are doing.

For example, our system above was used over a WAN, and we actually had
several relays each of which had their own wrappers for the next hop,
so it was very important that while it might be down during an outage,
it properly healed itself as soon as whichever segment had failed was
reconnected.  But we generally expected most outages to represent real
network failures for a period of time (or a server going down), and
less so a constant percentage of failing calls.  Not that the networks
couldn't have packet loss, but network packet loss has to reach
several percent before really impacting TCP to the point where we
would notice).

But another PB-based application I'm working on now is less crucial.
Should I lose the server connection, I basically close down active UI
windows that were working with previous references and notify the user
that a disconnect has occurred.  They can then initiate a new
connection when they want.

-- David




From einar.twisted at norsk-esport.no  Sat Jul 28 16:00:57 2007
From: einar.twisted at norsk-esport.no (=?ISO-8859-1?Q?=22Einar_S=2E_Ids=F8=22?=)
Date: Sun, 29 Jul 2007 00:00:57 +0200
Subject: [Twisted-Python] "MySQL has gone away"
In-Reply-To: <eaf39e680707260311y4c901d39u875eedec52080fe@mail.gmail.com>
References: <eaf39e680707260311y4c901d39u875eedec52080fe@mail.gmail.com>
Message-ID: <46ABBC99.6000301@norsk-esport.no>

Have you tried cp_reconnect? It solved the problem for me.

dbPool = adbapi.ConnectionPool('MySQLdb', db='fee', user='fii',
passwd='foo', host='fum', cp_reconnect=True)

Cheers,
Einar

Pavel Bastov wrote:
> Hi all,
> 
> I'm using MySQL database in my server app. Pretty often after some
> inactivity I get this message in my logs "MySQL server has gone away".
> How can I prevent this?
> 
> TIA
> 



From exarkun at twistedmatrix.com  Sat Jul 28 22:05:03 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 29 Jul 2007 04:05:03 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1185681903.56.1721090154@twistedmatrix.com

Bug summary
______________________
Summary for 2007-07-22 through 2007-07-29
Bugs opened: 11    Bugs closed: 9  Total open bugs: 997 (+2)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +3  |Highest:  -4          |Conch:  +1             
|Enhancement:  +4  |Normal:   +5          |Core:   -4             
|Task:         -5  |Low:      +1          |Lore:   +1             
                                          |Mail:   -1             
                                          |Names:  +0             
                                          |Trial:  +2             
                                          |Web:    +2             
                                          |Words:  +1             


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2749] Add a utility method to trial to check the type of an object (opened by therve)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2749

                    ===== Normal =====
[#2747] Make Lore use filepath (opened by gpaci)
    enhancement     lore       http://twistedmatrix.com/trac/ticket/2747

[#2748] Update development/policy test-standard docs (opened by gpaci)
    defect          trial      http://twistedmatrix.com/trac/ticket/2748

[#2750] HEAD requests support for twisted.web.client (opened by synapsis)
    enhancement     web        http://twistedmatrix.com/trac/ticket/2750

[#2751] "gethostbyname.py www.icq.com" returns "DNS lookup failed" (opened by mc) (CLOSED, invalid)
    defect          names      http://twistedmatrix.com/trac/ticket/2751

[#2752] t.w.http.Request docstrings (opened by rikyu) (CLOSED, fixed)
    enhancement     web        http://twistedmatrix.com/trac/ticket/2752

[#2753] twisted.web WSGI support (opened by rikyu)
    enhancement     web        http://twistedmatrix.com/trac/ticket/2753

[#2754] ssh execCommand: closing the connection throws an error (opened by smurfixx)
    defect          conch      http://twistedmatrix.com/trac/ticket/2754

[#2755] Allow a Deferred to be passed to callback() (opened by smurfixx) (CLOSED, wontfix)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2755

[#2756] digest_uri in sasl_mechanism.py should be encoded (opened by sciasbat)
    defect          words      http://twistedmatrix.com/trac/ticket/2756

                    ===== Low =====
[#2757] give TrafficLoggingFactory a public API to reset its counter (opened by exarkun)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2757



Closed Bugs
______________________
                    ===== Highest =====
[#2743] twisted/test/test_ssl.py shouldn't use setUpClass and tearDownClass (opened by exarkun, closed by exarkun, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/2743

[#2744] twisted/test/test_pb.py should use setUp instead of setUpClass and not have any tear down (opened by exarkun, closed by exarkun, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/2744

[#2745] twisted/test/test_newcred.py should use setUp and tearDown instead of setUpClass and tearDownClass (opened by exarkun, closed by exarkun, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/2745

[#2746] twisted/mail/test/test_mail.py should use setUp and tearDown instead of setUpClass and tearDownClass (opened by exarkun, closed by exarkun, fixed)
    task            mail       http://twistedmatrix.com/trac/ticket/2746

[#2742] twisted/test/test_policies.py should use setUp and tearDown instead of setUpClass and tearDownClass (opened by exarkun, closed by exarkun, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/2742

                    ===== Normal =====
[#2751] "gethostbyname.py www.icq.com" returns "DNS lookup failed" (opened by mc, closed by mc, invalid)
    defect          names      http://twistedmatrix.com/trac/ticket/2751

[#1171] twistd has no way to gracefully stop the initialization of an application instance if some conditions are not met (opened by Biappi, closed by glyph, invalid)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1171

[#2752] t.w.http.Request docstrings (opened by rikyu, closed by therve, fixed)
    enhancement     web        http://twistedmatrix.com/trac/ticket/2752

[#2755] Allow a Deferred to be passed to callback() (opened by smurfixx, closed by therve, wontfix)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2755



Ticket Lifetime Stats
______________________
Oldest open ticket - [#38] Should be a way to create documentation aliases (since 2003-07-12 16:08:03).
Newest open ticket - [#2757] give TrafficLoggingFactory a public API to reset its counter (since 2007-07-28 08:35:32).

Mean open ticket age: 494 days, 19:44:22.394626.
Median: 382 days, 10:25:27.387605.
Standard deviation: 392 days, 21:05:11.606420.
Interquartile range: 473 days, 6:25:54.

Mean time between ticket creation and ticket resolution: 119 days, 15:18:10.661056.
Median: 14 days, 3:38:33.
Standard deviation is 223 days, 7:36:11.456637.
The interquartile range is 123 days, 11:30:35.

Mean time spent in review: 59 days, 23:00:07.364329.
Median: 4 days, 8:59:04.
Standard deviation: 129 days, 11:41:34.595642.
Interquartile range: 27 days, 10:51:04.

Mean number of times a ticket is reviewed: 1.81313131313.
Median: 1
Standard deviation: 1.38914598171.
Interquartile range: 1.


Contributor Stats
______________________
In the last 4 weeks,
    16 unique ticket reporters
    7 unique ticket reviewers
    6 unique ticket resolvers
In the last 24 weeks,
    94 unique ticket reporters
    14 unique ticket reviewers
    18 unique ticket resolvers
In the last 48 weeks,
    162 unique ticket reporters
    20 unique ticket reviewers
    28 unique ticket resolvers




From pbastov at gmail.com  Sun Jul 29 21:28:15 2007
From: pbastov at gmail.com (Pavel Bastov)
Date: Mon, 30 Jul 2007 09:28:15 +0600
Subject: [Twisted-Python] "MySQL has gone away"
In-Reply-To: <46ABBC99.6000301@norsk-esport.no>
References: <eaf39e680707260311y4c901d39u875eedec52080fe@mail.gmail.com>
	<46ABBC99.6000301@norsk-esport.no>
Message-ID: <eaf39e680707292028x59b8e988w8f43e5ce302deb1b@mail.gmail.com>

Hmm,

cp_reconnect seems like the proper solution. Thanks for pointing that out to me.

On 7/29/07, "Einar S. Idsø" <einar.twisted at norsk-esport.no> wrote:
> Have you tried cp_reconnect? It solved the problem for me.
>
> dbPool = adbapi.ConnectionPool('MySQLdb', db='fee', user='fii',
> passwd='foo', host='fum', cp_reconnect=True)
>
> Cheers,
> Einar
>
> Pavel Bastov wrote:
> > Hi all,
> >
> > I'm using MySQL database in my server app. Pretty often after some
> > inactivity I get this message in my logs "MySQL server has gone away".
> > How can I prevent this?
> >
> > TIA
> >
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


-- 
Good luck,

Pavel Bastov
xooChat Evangelist and Team Leader
http://www.xoochat.com/



From daniel at keystonewood.com  Mon Jul 30 08:00:13 2007
From: daniel at keystonewood.com (Daniel Miller)
Date: Mon, 30 Jul 2007 10:00:13 -0400
Subject: [Twisted-Python] Re: Handling PBConnectionLost errors
In-Reply-To: <m2wswl3ykx.fsf@valheru.db3l.homeip.net>
References: <99A576C3-FE5E-4AE3-A48F-1720C9ECA16B@keystonewood.com>
	<E6C8DE88-2B46-42D4-A705-E7D621DD7653@keystonewood.com>
	<m2wswl3ykx.fsf@valheru.db3l.homeip.net>
Message-ID: <6DA04B2A-6D21-44CC-BD8A-07432CAABB99@keystonewood.com>

David,

You have gone above an beyond my expectations to answer my questions.  
Thank you.

On Jul 28, 2007, at 1:07 AM, David Bolen wrote:

> Daniel Miller <daniel at keystonewood.com> writes:
>
>> Is this such a stupid question that it doesn't even warrant a  
>> response?
>>
>> ~ Daniel
>
> I agree with the other comment to the effect that the lack of response
> may be more due to the underlying complexity of the question as to
> lack of interest. ...

It's funny, my question was complex, but it nevertheless contained  
too many assumptions about my application and environment to allow  
you to answer easily. Thanks for taking a stab at it anyway.

> For example, your opening point about:
>
>>>                       (...)                                 It
>>> would be nice to implement a fail-safe(er) way of calling remote
>>> methods that would retry when necessary until the remote method has
>>> been called successfully and the result has been returned.  (...)
>
> has an implicit assumption that the remote method will even continue
> to exist once the disconnect has occurred - something that is by no
> means guaranteed with PB.

I hadn't even thought of that, although now that you point it out  
it's obvious. My (server-side) application is just a singleton facade  
to an accounting system database. I'm posting orders from an order  
entry system to invoices in the accounting system. The server- 
supplied "referenceable" will always be available assuming something  
terrible has not happened to the server (e.g. crashed, hacked or  
physically damaged--none of which are things I'm trying to solve here).

> Perhaps some earlier messages of mine when we had just finished
> putting together the remote wrapping and reconnect support in our
> system.  See my responses to the thread at:
>
> http://twistedmatrix.com/pipermail/twisted-python/2005-July/ 
> 011030.html
>
> and
>
> http://twistedmatrix.com/pipermail/twisted-python/2005-July/ 
> 011046.html

Thanks I'll take a look at them.

> It hits on topics beyond that of just a reliable method call, but the
> second message more specifically talks about the wrapper that
> implements reconnections, and how we dealt with updating references
> post-reconnect.  You can probably see how the design dovetailed with
> our particular server side structure (the registry was persistent as
> were the managers, so they provided the concrete point of
> reattachment).  And the use of the wrappers around references meant we
> could "correct" the wrappers for a new connection without having to
> worry about what parts of the client application may have been holding
> references.  Perhaps it will give you some other ideas in your own
> system.

This sounds good, I think I have a similar enough setup that I will  
be able to at least gain some good ideas.

> For your other points:
>
>>> I have two questions:
>>>
>>> 1. Does something like this already exist?
>
> <snip>
>
> ... I'm not aware of any existing approach that is generally suitable
> for any application.  I rather doubt any single generic approach would
> be possible, since PB provides for many mechanisms of statement
> management and referenceability among servers and clients.

You're probably right, although the problem domain is interesting  
enough to me that I may try to see what I can do if I ever get enough  
time :)

>>> 2. Is this a totally stupid idea? (would it be better to improve
>>> our physical network than to try to band-aid the problem with
>>> something like this?)
>
> It's never a stupid idea to engineer for network interruptions, but
> like everything else a design must weigh benefits against
> cost/development.  With that said, it might not be a bad idea to also
> look into your network.  TCP connections are rather hard to break just
> due to network transmission problems, and all your PB calls are going
> across a single TCP session.  They might be significantly delayed on a
> bad network, but the connection itself shouldn't fail unless something
> more extreme (and unusual) is happening.  Given the level of problems
> you're encountering, I wouldn't be surprised if something else was
> awry.

That's what I thought (the connections shouldn't just be dropping for  
no apparent reason, especially since they are all within the bounds  
of a LAN). I know this is getting off topic, but I thought maybe  
you'd know: collisions on the hub should be handled by TCP, and my  
application should not have to worry about them, correct? Even that  
doesn't answer why there are dropped connections on the switched side  
of the network. Maybe we have some bad wiring? FWIW, I am planning to  
eliminate the hub in lieu of another switch (there are other problems  
as well).

Again, thanks very much for your well-thought-out response.

~ Daniel





