From alvinwang at gmail.com  Tue Jun  1 02:57:43 2010
From: alvinwang at gmail.com (Alvin Wang)
Date: Mon, 31 May 2010 23:57:43 -0700
Subject: [Twisted-Python] RDT/RTSP Library for Twisted
In-Reply-To: <AANLkTimXdxpkl5je2xDM6j0HxzArNjrF9STdbwkyeFWK@mail.gmail.com>
References: <AANLkTimXdxpkl5je2xDM6j0HxzArNjrF9STdbwkyeFWK@mail.gmail.com>
Message-ID: <AANLkTinh2xrvIcz_S6twy64faxnxqVRlzM8ez8vKJqau@mail.gmail.com>

That is awesome.  It would be nice if it was the same license as Twisted.

Alvin

7bc0b8c815
7bc0b8c815




On Mon, May 31, 2010 at 8:38 PM, David Bern <odie5533 at gmail.com> wrote:

> I wrote a set of Twisted libraries for RDT and RTSP streaming, along
> with handlers for SDPP, ASMRP, and RMFF. I thought I'd announce it
> here since they are most useful to other developers. I've released
> them under the GNU GPL but I'd be willing to release them under a
> different license if requested.
>
> Link to blog post:
>
> http://odie5533.com/twisted-python-rdt-rtsp-library-and-stream-downloader-346
> Link to library:
>
> http://odie5533.com/programs/RDT-RTSP/Twisted%20RDT-RTSP%20Library%202010-05-31.zip
>
> --
> David Bern
> http://odie5533.com/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100531/f9d14e3d/attachment.htm 

From lvh at laurensvh.be  Tue Jun  1 02:58:36 2010
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Tue, 1 Jun 2010 08:58:36 +0200
Subject: [Twisted-Python] RDT/RTSP Library for Twisted
In-Reply-To: <AANLkTimXdxpkl5je2xDM6j0HxzArNjrF9STdbwkyeFWK@mail.gmail.com>
References: <AANLkTimXdxpkl5je2xDM6j0HxzArNjrF9STdbwkyeFWK@mail.gmail.com>
Message-ID: <AANLkTiktx4Gl8tLEWs-ATy6W5oVk87dHVIW5-GyGfeE0@mail.gmail.com>

Thanks for contributing to Twisted!

A couple of things with regards to your questions and your project in
particular:

About the licensing issue: well, Twisted itself (as you probably
already know) is released under a permissive license, and that's a
conscious decision. The GPL can make it somewhat harder for companies
to use and potentially contribute to your code. Plus, your code is a
library, not a standalone app, which is an argument for a more
permissive license. If you *like* the GPL's copyleft bits, by all
means: please continue using it (just be aware that means quite a few
people will refuse to touch your code). Ideally, there'd be a license
identical to Twisted's.

Something that might be slightly more important: do you have a public
VCS repository somewhere (Launchpad, Github, Bitbucket...)? The people
you would want contributing are probably very scared of hacking on an
existing codebase without the ability to branch/fork and later merge
again :-) An additional problem is that there's no obvious way to
report bugs, which might scare people out of using it.

Somewhat related to the last question: you might want to consider
registering your thing in the Twisted Community Code (tx) group on
Launchpad for free advertising:

https://launchpad.net/tx


Lots of luck with your library and the app that presumably goes with
it (albeit a bit more under the radar ;-)),
Laurens


From glyph at twistedmatrix.com  Tue Jun  1 10:46:31 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 1 Jun 2010 10:46:31 -0400
Subject: [Twisted-Python] RDT/RTSP Library for Twisted
In-Reply-To: <AANLkTinh2xrvIcz_S6twy64faxnxqVRlzM8ez8vKJqau@mail.gmail.com>
References: <AANLkTimXdxpkl5je2xDM6j0HxzArNjrF9STdbwkyeFWK@mail.gmail.com>
	<AANLkTinh2xrvIcz_S6twy64faxnxqVRlzM8ez8vKJqau@mail.gmail.com>
Message-ID: <5D7E5129-2898-40BA-A39B-C2AF1B3E7DD6@twistedmatrix.com>


On Jun 1, 2010, at 2:57 AM, Alvin Wang wrote:

> That is awesome.  It would be nice if it was the same license as Twisted.  

Among other things, if it were available under the MIT license, it could one day be included along with Twisted, if that were something you're interested in.  We would not be able to accept a contribution of GPL'd code, though.



From jrennie at gmail.com  Tue Jun  1 11:53:11 2010
From: jrennie at gmail.com (Jason Rennie)
Date: Tue, 1 Jun 2010 11:53:11 -0400
Subject: [Twisted-Python] t.i.i.IProcessTransport
Message-ID: <AANLkTinE-JRW2HeOrOsAqvxh4ACJ-xSlchGzu94gabpE@mail.gmail.com>

Is it a documentation bug that t.i.Process or t.i._BaseProcess is not listed
as an implementation of IProcessTransport?  Also, it appears that the
signalProcess method should list "TERM" as one of the acceptable
cross-platform signal names.

I'm happy to create a trac ticket.

Cheers,

Jason

-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100601/0996f53d/attachment.htm 

From glyph at twistedmatrix.com  Tue Jun  1 12:10:11 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 1 Jun 2010 12:10:11 -0400
Subject: [Twisted-Python] t.i.i.IProcessTransport
In-Reply-To: <AANLkTinE-JRW2HeOrOsAqvxh4ACJ-xSlchGzu94gabpE@mail.gmail.com>
References: <AANLkTinE-JRW2HeOrOsAqvxh4ACJ-xSlchGzu94gabpE@mail.gmail.com>
Message-ID: <B1AB8E6D-AAE8-4867-935E-C230D6B19295@twistedmatrix.com>


On Jun 1, 2010, at 11:53 AM, Jason Rennie wrote:

> Is it a documentation bug that t.i.Process or t.i._BaseProcess is not listed as an implementation of IProcessTransport?  Also, it appears that the signalProcess method should list "TERM" as one of the acceptable cross-platform signal names.
> 
> I'm happy to create a trac ticket.

This does sound like a bug.

You might also want to be aware of these related bugs:

	<http://twistedmatrix.com/trac/ticket/2838>
	<http://twistedmatrix.com/trac/ticket/1478>

if you are looking stuff up in this area.

So please do create a trac ticket, and thanks for noticing :).

From jrennie at gmail.com  Tue Jun  1 12:35:50 2010
From: jrennie at gmail.com (Jason Rennie)
Date: Tue, 1 Jun 2010 12:35:50 -0400
Subject: [Twisted-Python] t.i.i.IProcessTransport
In-Reply-To: <B1AB8E6D-AAE8-4867-935E-C230D6B19295@twistedmatrix.com>
References: <AANLkTinE-JRW2HeOrOsAqvxh4ACJ-xSlchGzu94gabpE@mail.gmail.com>
	<B1AB8E6D-AAE8-4867-935E-C230D6B19295@twistedmatrix.com>
Message-ID: <AANLkTim6Kkmxdm7HJdLuLTrhDVGquvYmVZMOHgPBUlzI@mail.gmail.com>

I created:

http://twistedmatrix.com/trac/ticket/4479

Thanks for the pointers to the related bugs.  I referenced them in #4479.

Cheers,

Jason

On Tue, Jun 1, 2010 at 12:10 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Jun 1, 2010, at 11:53 AM, Jason Rennie wrote:
>
> > Is it a documentation bug that t.i.Process or t.i._BaseProcess is not
> listed as an implementation of IProcessTransport?  Also, it appears that the
> signalProcess method should list "TERM" as one of the acceptable
> cross-platform signal names.
> >
> > I'm happy to create a trac ticket.
>
> This does sound like a bug.
>
> You might also want to be aware of these related bugs:
>
>        <http://twistedmatrix.com/trac/ticket/2838>
>        <http://twistedmatrix.com/trac/ticket/1478>
>
> if you are looking stuff up in this area.
>
> So please do create a trac ticket, and thanks for noticing :).
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100601/d060748f/attachment.htm 

From exarkun at twistedmatrix.com  Sun Jun  6 00:05:26 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 06 Jun 2010 04:05:26 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1275797126.51.1929728211@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100606/74333b98/attachment.htm 

From lvh at laurensvh.be  Sun Jun  6 15:59:19 2010
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Sun, 6 Jun 2010 21:59:19 +0200
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
Message-ID: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>

Hey,


For the Twisted folks: this thing has been reviewed by the ZeroMQ
folks first because I wanted to be sure I got the technical details
right on the their side of things.

I'd like to open up a discussion from a while back regarding the
integration of ZeroMQ (a messaging system: similar to AMQP but with
the intent to be simpler) into Twisted.

The interested ZeroMQ people and the interested Twisted people (names
withheld to protect the guilty) disagreed on what it should look like.
I think that's mostly because neither party really understood what the
other's software wanted to do. So, I'll try to give everyone a basic
explanation without going too deep into either Twisted or ZeroMQ: my
apologies if I spell out the basics of your thing too much and it gets
boring :)

ZeroMQ aims to be a thin layer above TCP, behaving like TCP but
'better'. That sounds like a vague marketing statement, but it helps
to understand some of the terminology if you keep that in the back of
your head. (What exactly 'better' means is way beyond the current
scope: basically, ZeroMQ wants to help socket programmers to stop
reinventing the wheel by implementing common behavior such as pub/sub,
request/reply...). Essentially AMQP but much simpler, and brokerless
in most cases. This email is already going to go way over the sane
character count, thankfully the ZeroMQ webpage does a great job at
explaining stuff :-)

I think this highlights the main problem people had. There a partial
overlap between Twisted and ZeroMQ. The ZeroMQ implementation does
things Twisted does too: it implements a bunch of low level networking
stuff using eg epoll. It deals with real sockets, and Twisted wants to
do that as well.

ZeroMQ uses things called Sockets. They're similar but not the same
thing as TCP sockets (instead delegating work to TCP eventually), so
you can't use traditional methods like select or epoll with them,
because, for example, they don't have file descriptors. Some
underlying thing probably does have fds; but ZeroMQ worries about that
for you under the hood, just like Twisted does for other TCP traffic.

There are a couple of options for making ZeroMQ work with Twisted:

1) implement everything in Python, using Twisted's TCP stuff. I think
this is mostly a bad idea and the ZeroMQ people seem to agree: _lots_
of work, ZeroMQ libs are stupidly fast already, Python not being the
best tool for binary protocols...
2) write a thin wrapper around the C(++) libs: great, as long as it
never has to go into the Twisted trunk
3) use pyzmq's thin wrapper around the C(++) libs: sounds like the
best idea to me, again with reservations wrt the Twisted trunk

Originally there was a fourth idea, which considered libzmq as a new
mechanism: like epoll, so you'd have a ZMQ-specific reactor. A bunch
of people didn't like this, and I can somewhat see the point: hard to
integrate with other event loops like GUIs, for example.

pyzmq offers something called select, which works just like select
except it works on both file descriptors and ZeroMQ Sockets. It just
delegates all of the work to libzmq. We could use
ThreadedSelectReactor and have it use ZMQ's select. I'm not sure if it
should use "normal" select everywhere else: because zmq's select is in
fact much better than select.select (it just behaves like
select.select in the sense that you give it three sets of fds and an
optional timeout; under the hood it's actually epoll or kqueue or
whatever) and it can handle plain old file descriptors just fine. So,
you'd have a TRS with either 1 zmq.select running on everything or 1
zmq.select running over Sockets and 1 select.select running over your
classic fds. Personally I kind of like the idea of zmq's select taking
over, but I don't know how well that works in practice.

A potential option for Twisted, which some people don't quite like,
would be to have a listenZMQ and connectZMQ, analogous to
listenTCP/listenUDP/listenSSL and the respective connect*s. I think
this makes more sense to the ZeroMQ people (who think of ZeroMQ as a
layer "next to" TCP which happens to be implemented on top of TCP, on
top of which you build your stuff) than the Twisted people (who think
of ZeroMQ's protocol as yet another TCP-using protocol just like HTTP
for example). Having worked with both pieces of software, the more I
play with ZeroMQ the more I think listenZMQ/connectZMQ make sense.
ZeroMQ really tries to be one of those things and it shows. What
ZeroMQ wants to do is semantically much closer to the existing
connects and listens. I'm not just making this up: the ZeroMQ people
have reviewed this and this is really what ZeroMQ wants to be.

Another argument for making ZMQ special is that TCP is just one of the
things ZeroMQ works with. UNIX domain pipes, PGM reliable multicast,
UDP PGM encapsulation, and even inter-thread communication.

I know some Twisted people way smarter than me basically thought the
connectZMQ/listenZMQ thing was a mistake, but I'm not sure to what
extent that is because they were right and to what extent that was
because they didn't really know very much about ZeroMQ and just went
"it works on top of TCP so that's not where it goes". To Twisted folks
that disagree: would you change your opinion of ZMQ was *really*
something that's side-by-side with TCP instead of being implemented on
top of it? Like, say, SCTP is? Does the fact that it can work on top
of a bunch of stuff that isn't TCP change that?

Talking with the ZeroMQ people has been a positive experience: they
were very accessible and cooperative, and really just want a bigger
market for their software (who doesn't?) so I hope something useful
comes out of this :-)



tia
lvh


From radix at twistedmatrix.com  Sun Jun  6 16:18:11 2010
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 6 Jun 2010 15:18:11 -0500
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
In-Reply-To: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
Message-ID: <AANLkTimsWDD-iyjWX6eNUWRZYO8Nzb25A__AytfTUpcs@mail.gmail.com>

On Sun, Jun 6, 2010 at 2:59 PM, Laurens Van Houtven <lvh at laurensvh.be> wrote:
> A potential option for Twisted, which some people don't quite like,
> would be to have a listenZMQ and connectZMQ, analogous to
> listenTCP/listenUDP/listenSSL and the respective connect*s. I think
> this makes more sense to the ZeroMQ people (who think of ZeroMQ as a
> layer "next to" TCP which happens to be implemented on top of TCP, on
> top of which you build your stuff) than the Twisted people (who think
> of ZeroMQ's protocol as yet another TCP-using protocol just like HTTP
> for example). Having worked with both pieces of software, the more I
> play with ZeroMQ the more I think listenZMQ/connectZMQ make sense.
> ZeroMQ really tries to be one of those things and it shows. What
> ZeroMQ wants to do is semantically much closer to the existing
> connects and listens. I'm not just making this up: the ZeroMQ people
> have reviewed this and this is really what ZeroMQ wants to be.

At the moment I only feel compelled to respond to this point in particular.

We don't want to have any more transport-specific methods on the
reactor, and this has nothing to do with ZMQ. We also don't want to
have connectSOCKS, or listenSerialPort. Fortunately, the endpoints
API[1] was very recently merged to Twisted trunk, so any new
transport-specific connectors/listeners can be implemented in terms of
its interfaces. listenTCP and so forth should eventually be deprecated
in preference to the endpoints APIs.

1: Source: http://twistedmatrix.com/trac/browser/trunk/twisted/internet/endpoints.py
    ticket: http://twistedmatrix.com/trac/ticket/1442


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/


From lvh at laurensvh.be  Sun Jun  6 19:19:20 2010
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Mon, 7 Jun 2010 01:19:20 +0200
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
In-Reply-To: <AANLkTimsWDD-iyjWX6eNUWRZYO8Nzb25A__AytfTUpcs@mail.gmail.com>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
	<AANLkTimsWDD-iyjWX6eNUWRZYO8Nzb25A__AytfTUpcs@mail.gmail.com>
Message-ID: <AANLkTilHWiUkIsSAzarmkl4xZHhoZHmbCrkX-HYFuO5j@mail.gmail.com>

On Sun, Jun 6, 2010 at 10:18 PM, Christopher Armstrong
<radix at twistedmatrix.com> wrote:
> On Sun, Jun 6, 2010 at 2:59 PM, Laurens Van Houtven <lvh at laurensvh.be> wrote:
> We don't want to have any more transport-specific methods on the
> reactor, and this has nothing to do with ZMQ. We also don't want to
> have connectSOCKS, or listenSerialPort. Fortunately, the endpoints
> API[1] was very recently merged to Twisted trunk, so any new
> transport-specific connectors/listeners can be implemented in terms of
> its interfaces. listenTCP and so forth should eventually be deprecated
> in preference to the endpoints APIs.
>
> 1: Source: http://twistedmatrix.com/trac/browser/trunk/twisted/internet/endpoints.py
> ? ?ticket: http://twistedmatrix.com/trac/ticket/1442
> --
> Christopher Armstrong
> http://radix.twistedmatrix.com/
> http://planet-if.com/

Yep, that's the thing I was remembering. It just wasn't quite so close
to production use back then. So, I take it that just means
ZMQ4ServerEndpoint and ZMQ4ClientEndpoint instead of
listenZMQ/connectZMQ? Most of the argument (specifically that, to
Twisted, ZeroMQ should not be a thing on top of TCP but instead be its
own thing).

lvh


From lvh at laurensvh.be  Sun Jun  6 19:39:27 2010
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Mon, 7 Jun 2010 01:39:27 +0200
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
In-Reply-To: <AANLkTilHWiUkIsSAzarmkl4xZHhoZHmbCrkX-HYFuO5j@mail.gmail.com>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
	<AANLkTimsWDD-iyjWX6eNUWRZYO8Nzb25A__AytfTUpcs@mail.gmail.com>
	<AANLkTilHWiUkIsSAzarmkl4xZHhoZHmbCrkX-HYFuO5j@mail.gmail.com>
Message-ID: <AANLkTil8Lv9yqGS1GuKoxDdMmVtxxCH59FOvl_wJ6wXC@mail.gmail.com>

Whoops, something ate half my sentence.

My point was that most of the argument still stands, I think: just
listenZMQ and connectZMQ get replaced by ZMQ Endpoints :)


lvh


From itamar at itamarst.org  Sun Jun  6 23:07:20 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 06 Jun 2010 23:07:20 -0400
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
In-Reply-To: <AANLkTil8Lv9yqGS1GuKoxDdMmVtxxCH59FOvl_wJ6wXC@mail.gmail.com>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
	<AANLkTimsWDD-iyjWX6eNUWRZYO8Nzb25A__AytfTUpcs@mail.gmail.com>
	<AANLkTilHWiUkIsSAzarmkl4xZHhoZHmbCrkX-HYFuO5j@mail.gmail.com>
	<AANLkTil8Lv9yqGS1GuKoxDdMmVtxxCH59FOvl_wJ6wXC@mail.gmail.com>
Message-ID: <1275880040.1679.6.camel@blake>

On Mon, 2010-06-07 at 01:39 +0200, Laurens Van Houtven wrote:
> Whoops, something ate half my sentence.
> 
> My point was that most of the argument still stands, I think: just
> listenZMQ and connectZMQ get replaced by ZMQ Endpoints :)

1. SSL runs on top of TCP, yet Twisted has connectSSL/listenSSL and
endpoints for it. So the issue here is not the fact it runs over TCP.

2. I assume ZeroMQ "Sockets" have capabilities TCP doesn't, otherwise
what's the point? :) E.g. you mentioned pub/sub. So, assuming a ZeroMQ
endpoint and/or listen+connect methods, the *protocol* you would pass in
would be different than the standard protocols you'd use with TCP or
SSL, yes?

So, sounds like you want to define:
A) A way to hook up ZeroMQ event loop with Twisted event loop so that
both ZeroMQ and Twisted code can co-exist in same thread.

Then, expose ZeroMQ APIs to Python in a way that gives you:
B) A protocol class or interface.
C) An API for creating and hooking up these protocols to underlying
transports, i.e. ZeroMQ Sockets.

You could then release this as txZeroMQ; I'm not sure there's much
benefit in including this in Twisted, as opposed to standalone project.



From itamar at itamarst.org  Sun Jun  6 23:17:49 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 06 Jun 2010 23:17:49 -0400
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
In-Reply-To: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
Message-ID: <1275880669.1679.9.camel@blake>

On Sun, 2010-06-06 at 21:59 +0200, Laurens Van Houtven wrote:

> pyzmq offers something called select, which works just like select
> except it works on both file descriptors and ZeroMQ Sockets. It just
> delegates all of the work to libzmq. We could use
> ThreadedSelectReactor and have it use ZMQ's select. I'm not sure if it
> should use "normal" select everywhere else: because zmq's select is in
> fact much better than select.select (it just behaves like
> select.select in the sense that you give it three sets of fds and an
> optional timeout; under the hood it's actually epoll or kqueue or
> whatever) and it can handle plain old file descriptors just fine. So,
> you'd have a TRS with either 1 zmq.select running on everything or 1
> zmq.select running over Sockets and 1 select.select running over your
> classic fds. Personally I kind of like the idea of zmq's select taking
> over, but I don't know how well that works in practice.

You should probably just make a ZeroMQ reactor, instead of using TSR,
which (in its current form) is an ugly hack. TSR buys you nothing
because, unfortunately, it doesn't let you hook up to arbitrary
reactors. 

If the API really is select() compatible this presumably would be a
fairly trivial subclass of the reactor in
twisted.internet.selectreactor.




From exarkun at twistedmatrix.com  Mon Jun  7 00:54:14 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 07 Jun 2010 04:54:14 -0000
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
In-Reply-To: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
Message-ID: <20100607045414.1708.293470391.divmod.xquotient.158@localhost.localdomain>

On 6 Jun, 07:59 pm, lvh at laurensvh.be wrote:
>Hey,
>
>
>For the Twisted folks: this thing has been reviewed by the ZeroMQ
>folks first because I wanted to be sure I got the technical details
>right on the their side of things.
>
>I'd like to open up a discussion from a while back regarding the
>integration of ZeroMQ (a messaging system: similar to AMQP but with
>the intent to be simpler) into Twisted.
>
>The interested ZeroMQ people and the interested Twisted people (names
>withheld to protect the guilty) disagreed on what it should look like.
>I think that's mostly because neither party really understood what the
>other's software wanted to do. So, I'll try to give everyone a basic
>explanation without going too deep into either Twisted or ZeroMQ: my
>apologies if I spell out the basics of your thing too much and it gets
>boring :)
>
>ZeroMQ aims to be a thin layer above TCP, behaving like TCP but
>'better'. That sounds like a vague marketing statement, but it helps
>to understand some of the terminology if you keep that in the back of
>your head. (What exactly 'better' means is way beyond the current
>scope: basically, ZeroMQ wants to help socket programmers to stop
>reinventing the wheel by implementing common behavior such as pub/sub,
>request/reply...). Essentially AMQP but much simpler, and brokerless
>in most cases. This email is already going to go way over the sane
>character count, thankfully the ZeroMQ webpage does a great job at
>explaining stuff :-)
>
>I think this highlights the main problem people had. There a partial
>overlap between Twisted and ZeroMQ. The ZeroMQ implementation does
>things Twisted does too: it implements a bunch of low level networking
>stuff using eg epoll. It deals with real sockets, and Twisted wants to
>do that as well.
>
>ZeroMQ uses things called Sockets. They're similar but not the same
>thing as TCP sockets (instead delegating work to TCP eventually), so
>you can't use traditional methods like select or epoll with them,
>because, for example, they don't have file descriptors. Some
>underlying thing probably does have fds; but ZeroMQ worries about that
>for you under the hood, just like Twisted does for other TCP traffic.
>
>There are a couple of options for making ZeroMQ work with Twisted:
>
>1) implement everything in Python, using Twisted's TCP stuff. I think
>this is mostly a bad idea and the ZeroMQ people seem to agree: _lots_
>of work, ZeroMQ libs are stupidly fast already, Python not being the
>best tool for binary protocols...
>2) write a thin wrapper around the C(++) libs: great, as long as it
>never has to go into the Twisted trunk
>3) use pyzmq's thin wrapper around the C(++) libs: sounds like the
>best idea to me, again with reservations wrt the Twisted trunk
>
>Originally there was a fourth idea, which considered libzmq as a new
>mechanism: like epoll, so you'd have a ZMQ-specific reactor. A bunch
>of people didn't like this, and I can somewhat see the point: hard to
>integrate with other event loops like GUIs, for example.
>
>pyzmq offers something called select, which works just like select
>except it works on both file descriptors and ZeroMQ Sockets. It just
>delegates all of the work to libzmq. We could use
>ThreadedSelectReactor and have it use ZMQ's select. I'm not sure if it
>should use "normal" select everywhere else: because zmq's select is in
>fact much better than select.select (it just behaves like
>select.select in the sense that you give it three sets of fds and an
>optional timeout; under the hood it's actually epoll or kqueue or
>whatever) and it can handle plain old file descriptors just fine. So,
>you'd have a TRS with either 1 zmq.select running on everything or 1
>zmq.select running over Sockets and 1 select.select running over your
>classic fds. Personally I kind of like the idea of zmq's select taking
>over, but I don't know how well that works in practice.

A shortcoming of this approach is that much of the inefficiency of 
select(2) comes from its API.  If you have a select(2)-compatible API 
that's implemented in terms of epoll, you're still wasting a ton of 
effort that you could be skipping if you were using an epoll-compatible 
API instead.

But this is only an argument about performance, and likely no one is 
going to care about the poor performance of zmq.select anyway.
>
>A potential option for Twisted, which some people don't quite like,
>would be to have a listenZMQ and connectZMQ, analogous to
>listenTCP/listenUDP/listenSSL and the respective connect*s. I think
>this makes more sense to the ZeroMQ people (who think of ZeroMQ as a
>layer "next to" TCP which happens to be implemented on top of TCP, on
>top of which you build your stuff) than the Twisted people (who think
>of ZeroMQ's protocol as yet another TCP-using protocol just like HTTP
>for example). Having worked with both pieces of software, the more I
>play with ZeroMQ the more I think listenZMQ/connectZMQ make sense.
>ZeroMQ really tries to be one of those things and it shows. What
>ZeroMQ wants to do is semantically much closer to the existing
>connects and listens. I'm not just making this up: the ZeroMQ people
>have reviewed this and this is really what ZeroMQ wants to be.

A shortcoming of this approach is that as a reactor method, you have to 
implement it for each reactor you want to support.  You covered this a 
bit earlier in your email, where you talked about GUI integration.  Do 
you want to maintain an implementation of {listen,connect}ZMQ for 
select(/whatever), Glib2, Gtk2, wxWidgets, Qt, and Windows?  That's a 
lot more work than just maintaining one implementation.
>
>Another argument for making ZMQ special is that TCP is just one of the
>things ZeroMQ works with. UNIX domain pipes, PGM reliable multicast,
>UDP PGM encapsulation, and even inter-thread communication.

You got this one backwards.  This is an argument for not implementing 
ZMQ at the same level as TCP and UNIX sockets.  This is an argument for 
implementing it *on top of* those things.  Of course, the main benefit 
of implementing it on top of them is that you don't have to write a 
bunch of code to support each transport.  And the ZMQ people did that 
already.

Here's how it should work (modulo stupid factoring issues that aren't 
really related to ZMQ issues), given that there's a big C library that 
already implements a bunch of stuff that you don't want to re-implement:

    from twisted.internet.interfaces import IReactorFDSet

    class ZMQTransport(object):
        def __init__(self, reactor, zmqSocket, protocol):
            self._zmqSocket = zmqSocket
            self._transportPieces = []
            # On the next line, I use a method which I made up.  Maybe it
            # corresponds to some actual API ZMQ provides, maybe not, I
            # dunno.
            for fd in zmqSocket.allFileDescriptors():
                desc = _ZMQFileDescriptor(reactor, fd, zmqSocket)
                self._transportPieces.append(desc)

            self._protocol = protocol
            self._protocol.makeConnection(self)


    class _ZMQFileDescriptor(object):
        def __init__(self, reactor, fd, zmqSocket):
            if not IReactorFDSet.providedBy(reactor):
                raise RuntimeError(
                    "This is the IReactorFDSet implementation; "
                    "use another reactor or another zmq transport.")

            self._reactor = reactor
            self._reactor.addReader(self)
            self._fd = fd
            self._zmqSocket = zmqSocket

        def doRead(self):
            # Another made up method
            zmqEvents = self._zmqSocket.nonBlockingReadFrom(self._fd)
            if zmqEvents:
                self._protocol.zmqEventsReceived(zmqEvents)

        def doWrite(self):
            # One more, for luck.
            finished = self._zmqSocket.nonBlockingWriteTo(self._fd)
            if finished:
                self._reactor.removeWriter(self)

        def fileno(self):
            return self._fd

        def sendZMQEvents(self, events):
            # Whatever the API is.
            self._zmqSocket.sendZMQEvents(events)
            self._reactor.addWriter(self)


    class ZMQProtocol(object):
        def makeConnection(self, zmqTransport):
            self.zmqTransport = zmqTransport

        def zmqEventsReceived(self, zmqEvents):
            pass


    def connectZMQ(reactor, addrinfo, factory):
        # Blah blah blah - somehow get to the point where you have a 
# ZMQ Socket.
        d = ...
        def cbConnectionSetup(socket):
            ZMQTransport(
                reactor, socket, factory.buildProtocol(addrinfo))
        d.addCallback(cbConnectionSetup)

    def main():
        from twisted.internet import reactor
        from twisted.internet.protocol import ClientFactory
        f = ClientFactory()
        f.protocol = ZMQProtocol
        connectZMQ(reactor, ('example.com', 1234), f)
        reactor.run()


Okay, so that came out a little longer than I planned, but turn about is 
fair play.  Anyway, this is a bog standard transport implementation. 
The only thing even remotely interesting is that it maps multiple file 
descriptors onto a single transport.  And that seems to be the
So, if the ZMQ library offers APIs like the ones used in this example, 
then you're all set.  With just a little more code, you can have an 
overlapped I/O version of this transport (for the one Twisted reactor 
that doesn't support IReactorFDSet).  And then you've got proper Twisted 
ZMQ support.

If it *doesn't* offer APIs like these, then I'd say it's missing some 
pretty critical APIs.  After all, if you can't drive it this way, your 
chances of being able to write reasonable unit tests for ZMQ-based code 
are somewhat diminished (not out the window, but it'll be annoying).

And I don't understand how you would implement something like ZMQ in a 
way that *didn't* make it easy to do this.  *Particularly* since they 
have support for several different event notification APIs.  So 
hopefully the worst case is that there are no APIs like these, but it's 
a minor oversight because the authors thought no one would want them, 
but they can be added trivially because they map directly onto how the 
underlying implementation works.
>
>I know some Twisted people way smarter than me basically thought the
>connectZMQ/listenZMQ thing was a mistake, but I'm not sure to what
>extent that is because they were right and to what extent that was
>because they didn't really know very much about ZeroMQ and just went
>"it works on top of TCP so that's not where it goes". To Twisted folks
>that disagree: would you change your opinion of ZMQ was *really*
>something that's side-by-side with TCP instead of being implemented on
>top of it? Like, say, SCTP is? Does the fact that it can work on top
>of a bunch of stuff that isn't TCP change that?

If ZMQ were supported in the kernel with new syscalls to interface with 
it, then it would be nonsensical to talk about implementing it on top of 
Twisted's existing TCP support.  You simply couldn't, because all of the 
code would have been pushed into the kernel where it can't be used any 
other way.  This doesn't mean it would be a good idea overall to have 
ZMQ supported at the same level as TCP, though: it just means there 
would be no other alternative (aside from not supporting it - like what 
Twisted for SCTP).

Whether or not it makes any sense to implement ZMQ in the kernel is 
something I have no opinion on, since I don't know nearly enough about 
the particular details of ZMQ.
>
>Talking with the ZeroMQ people has been a positive experience: they
>were very accessible and cooperative, and really just want a bigger
>market for their software (who doesn't?) so I hope something useful
>comes out of this :-)

Great!  Convince them to add the necessary APIs (if they don't exist 
already) from above and everything should be set. :)

Jean-Paul


From exarkun at twistedmatrix.com  Mon Jun  7 01:16:12 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 07 Jun 2010 05:16:12 -0000
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
In-Reply-To: <20100607045414.1708.293470391.divmod.xquotient.158@localhost.localdomain>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
	<20100607045414.1708.293470391.divmod.xquotient.158@localhost.localdomain>
Message-ID: <20100607051612.1708.1347281334.divmod.xquotient.163@localhost.localdomain>

On 04:54 am, exarkun at twistedmatrix.com wrote:
>
>[snip]
>
>    from twisted.internet.interfaces import IReactorFDSet
>
>    class ZMQTransport(object):
>[snip]
>
>
>    class _ZMQFileDescriptor(object):
>[snip]
>        def sendZMQEvents(self, events):
>            # Whatever the API is.
>            self._zmqSocket.sendZMQEvents(events)
>            self._reactor.addWriter(self)

The sendZMQEvents method clearly belongs on ZMQTransport.  This 
complicates the `addWriter` call slightly - but only to the extent of 
either selecting the correct _ZMQFileDescriptor to pass, or more likely 
just looping over all of them and calling addWriter for each.  Hopefully 
the idea was clear despite this mistake.
>[snip]
>
>    def connectZMQ(reactor, addrinfo, factory):
>[snip]

Also, I meant to mention here that it doesn't really matter if this is a 
connectXYZ-style function or something using endpoints.  That's just a 
minor API question and all the other ZMQ-related stuff is the same 
whichever decision you make.

Jean-Paul


From rlotun at gmail.com  Mon Jun  7 05:49:38 2010
From: rlotun at gmail.com (Reza Lotun)
Date: Mon, 7 Jun 2010 10:49:38 +0100
Subject: [Twisted-Python] Job Opening - TweetDeck Backend Engineer - London,
	UK
Message-ID: <AANLkTilf2TECy8RXFp8jdF6PYVcPHGraUmcaF5kiQ_jF@mail.gmail.com>

TweetDeck (http://www.tweetdeck.com) is hiring for a backend software
engineer position in London, UK. We'd also be willing to consider
applicants located in New York, NY, USA, to work out of our New York
office at Betaworks (http://www.betaworks.com).

At TweetDeck we're trying to build the best tools and services to
manage real-time information streams from Twitter, Facebook,
Foursquare, and other sites. We're looking for a backend-oriented
Software Engineer who isn't afraid of investigated new technologies
and building services consumed by our clients and website at scale.
You'll also be working in a team to manage existing systems deployed
over the cloud.

You'll be:
 - Maintaining and improving existing REST API and backend services
 - Implementing core backend systems using the latest and greatest technologies
 - Working with the rest of the team to develop next generation
TweetDeck functionality
 - Working with client teams on feature rollouts

Requirements:
 - Strong Computer Science knowledge and interest in distributed systems
 - At least one previous project with a web MVC system like Django or Rails
 - Experience with Linux (Ubuntu) and some sysadmin skills (or a
strong desire to pick them up)
 - Flexibility and the desire to work with a small team of dedicated
coders in a startup environment

Pluses:
 - Python mastery
 - Knowledge of an asynchronous network framework like Twisted
 - Open source contributions, and a place to find them - e.g. a GitHub
or Bitbucket profile
 - Experience in deploying over cloud providers like AWS (EC2, SimpleDB, etc.)
 - Knowledge of distributed version control - preferably Git or Mercurial
 - Experience with Javascript & HTML/CSS to write great web apps and
internal tools
 - Knowledge of relational databases and SQL (we use those too!)
 - Some knowledge of NoSQL stores like Redis, Neo4j, MongoDB or Cassandra
 - Deep understanding of social networking services and trends

What Twisted is used for: All our backend systems are written in Python -
we use Twisted for our REST API services consumed by our desktop and mobile
clients, and Django for our web site.

Send your CV to Reza Lotun (jobs at tweetdeck.com) with the subject
"Backend Engineer".

Web: http://www.tweetdeck.com/jobs

Thanks,
Reza

-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   reza at tweetdeck.com
twitter: @rlotun


From lvh at laurensvh.be  Mon Jun  7 07:25:22 2010
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Mon, 7 Jun 2010 13:25:22 +0200
Subject: [Twisted-Python] Job Opening - TweetDeck Backend Engineer -
	London, UK
In-Reply-To: <AANLkTilf2TECy8RXFp8jdF6PYVcPHGraUmcaF5kiQ_jF@mail.gmail.com>
References: <AANLkTilf2TECy8RXFp8jdF6PYVcPHGraUmcaF5kiQ_jF@mail.gmail.com>
Message-ID: <AANLkTilwKngtdTYvQfUeaUG8WuV6QUZ3DSHLa1oG_zlx@mail.gmail.com>

Hey!


On a somewhat related note: are you people already using Twisted? Have
your experiences been positive? We're always looking for Success
Stories (http://twistedmatrix.com/trac/wiki/SuccessStories) :-)

thanks in advance
Laurens


From rlotun at gmail.com  Mon Jun  7 07:30:13 2010
From: rlotun at gmail.com (Reza Lotun)
Date: Mon, 7 Jun 2010 12:30:13 +0100
Subject: [Twisted-Python] Job Opening - TweetDeck Backend Engineer -
	London, UK
In-Reply-To: <AANLkTilwKngtdTYvQfUeaUG8WuV6QUZ3DSHLa1oG_zlx@mail.gmail.com>
References: <AANLkTilf2TECy8RXFp8jdF6PYVcPHGraUmcaF5kiQ_jF@mail.gmail.com>
	<AANLkTilwKngtdTYvQfUeaUG8WuV6QUZ3DSHLa1oG_zlx@mail.gmail.com>
Message-ID: <AANLkTinss9gPgv2iPNx-9gtIBNRGlF-2C3yy-lyQTNi5@mail.gmail.com>

On Mon, Jun 7, 2010 at 12:25 PM, Laurens Van Houtven <lvh at laurensvh.be> wrote:
> Hey!
>
>
> On a somewhat related note: are you people already using Twisted? Have
> your experiences been positive? We're always looking for Success
> Stories (http://twistedmatrix.com/trac/wiki/SuccessStories) :-)

Hi Laurens,

You'll notice we're already listed on the Sucess Stories page ;-)

Reza


-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   reza at tweetdeck.com
twitter: @rlotun


From itamar at itamarst.org  Mon Jun  7 08:27:28 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 07 Jun 2010 08:27:28 -0400
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
In-Reply-To: <1275880040.1679.6.camel@blake>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
	<AANLkTimsWDD-iyjWX6eNUWRZYO8Nzb25A__AytfTUpcs@mail.gmail.com>
	<AANLkTilHWiUkIsSAzarmkl4xZHhoZHmbCrkX-HYFuO5j@mail.gmail.com>
	<AANLkTil8Lv9yqGS1GuKoxDdMmVtxxCH59FOvl_wJ6wXC@mail.gmail.com>
	<1275880040.1679.6.camel@blake>
Message-ID: <1275913648.1565.0.camel@blake>

On Sun, 2010-06-06 at 23:07 -0400, Itamar Turner-Trauring wrote:

> So, sounds like you want to define:
> A) A way to hook up ZeroMQ event loop with Twisted event loop so that
> both ZeroMQ and Twisted code can co-exist in same thread.

JP's proposal is superior to this... but may require changes to ZeroMQ.



From konrads at smelkovs.com  Mon Jun  7 08:50:05 2010
From: konrads at smelkovs.com (Konrads Smelkovs)
Date: Mon, 7 Jun 2010 15:50:05 +0300
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
In-Reply-To: <1275913648.1565.0.camel@blake>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com> 
	<AANLkTimsWDD-iyjWX6eNUWRZYO8Nzb25A__AytfTUpcs@mail.gmail.com> 
	<AANLkTilHWiUkIsSAzarmkl4xZHhoZHmbCrkX-HYFuO5j@mail.gmail.com> 
	<AANLkTil8Lv9yqGS1GuKoxDdMmVtxxCH59FOvl_wJ6wXC@mail.gmail.com> 
	<1275880040.1679.6.camel@blake> <1275913648.1565.0.camel@blake>
Message-ID: <AANLkTikfGXEAd1E4W99N0r08mkJECqEziQXIVLLbrBtk@mail.gmail.com>

Indeed, from technical perspective I think this is the only sane way
forward.
--
Konrads Smelkovs
Applied IT sorcery.


On Mon, Jun 7, 2010 at 3:27 PM, Itamar Turner-Trauring
<itamar at itamarst.org>wrote:

> On Sun, 2010-06-06 at 23:07 -0400, Itamar Turner-Trauring wrote:
>
> > So, sounds like you want to define:
> > A) A way to hook up ZeroMQ event loop with Twisted event loop so that
> > both ZeroMQ and Twisted code can co-exist in same thread.
>
> JP's proposal is superior to this... but may require changes to ZeroMQ.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100607/fdc77cbd/attachment.htm 

From glyph at twistedmatrix.com  Mon Jun  7 13:38:12 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 7 Jun 2010 13:38:12 -0400
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
In-Reply-To: <AANLkTimsWDD-iyjWX6eNUWRZYO8Nzb25A__AytfTUpcs@mail.gmail.com>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
	<AANLkTimsWDD-iyjWX6eNUWRZYO8Nzb25A__AytfTUpcs@mail.gmail.com>
Message-ID: <4AB753E9-4D69-431A-8044-12EBF16A35E3@twistedmatrix.com>

On Jun 6, 2010, at 4:18 PM, Christopher Armstrong wrote:

> We don't want to have any more transport-specific methods on the
> reactor, and this has nothing to do with ZMQ. We also don't want to
> have connectSOCKS, or listenSerialPort. Fortunately, the endpoints
> API[1] was very recently merged to Twisted trunk, so any new
> transport-specific connectors/listeners can be implemented in terms of
> its interfaces. listenTCP and so forth should eventually be deprecated
> in preference to the endpoints APIs.

While the endpoints APIs are great and everyone should use them, I think it's putting it a bit strongly to say that listenTCP and friends will be deprecated.  Reactors are still pluggable, and we'll need a mechanism for endpoints and reactors to communicate.  There may be some evolution of those APIs in the long term (in particular, the way that connectTCP interacts with client factories is slightly weird) but I think that there will always be something lower-level than endpoints that is still a public, supported API.

You just won't be encouraged to use that API at the *application* layer, because endpoints are more flexible.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100607/f38cccf1/attachment.htm 

From lvh at laurensvh.be  Mon Jun  7 14:16:18 2010
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Mon, 7 Jun 2010 20:16:18 +0200
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
In-Reply-To: <4AB753E9-4D69-431A-8044-12EBF16A35E3@twistedmatrix.com>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
	<AANLkTimsWDD-iyjWX6eNUWRZYO8Nzb25A__AytfTUpcs@mail.gmail.com>
	<4AB753E9-4D69-431A-8044-12EBF16A35E3@twistedmatrix.com>
Message-ID: <AANLkTikYNvSIeI2yD8rwTGn2R1jX4AdY51RHlYqtqWPr@mail.gmail.com>

With regards to the shortcomings of select: there's also a poll-like,
but I have no idea if that improves matters :)

Anyway, I'll tell the ZMQ folks that people are blocking on their
fancy new API that helps with integrating with other event loops.
Thankfully, they were already aware of this technical issue and the
blueprints are there :)

lvh


From radix at twistedmatrix.com  Mon Jun  7 18:07:00 2010
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 7 Jun 2010 17:07:00 -0500
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
In-Reply-To: <4AB753E9-4D69-431A-8044-12EBF16A35E3@twistedmatrix.com>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
	<AANLkTimsWDD-iyjWX6eNUWRZYO8Nzb25A__AytfTUpcs@mail.gmail.com>
	<4AB753E9-4D69-431A-8044-12EBF16A35E3@twistedmatrix.com>
Message-ID: <AANLkTimC0gFLMd2BdujA8blDahx_9chcL3s48FLHpPSL@mail.gmail.com>

On Mon, Jun 7, 2010 at 12:38 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> While the endpoints APIs are great and everyone should use them, I think
> it's putting it a bit strongly to say that listenTCP and friends will be
> deprecated. ?Reactors are still pluggable, and we'll need a mechanism for
> endpoints and reactors to communicate. ?There may be some evolution of those
> APIs in the long term (in particular, the way that connectTCP interacts with
> client factories is slightly weird) but I think that there will always be
> something lower-level than endpoints that is still a public, supported API.
> You just won't be encouraged to use that API at the *application* layer,
> because endpoints are more flexible.

But will that "lower-level than endpoints" API need to be TCP-specific?

We don't have a listenSerialPort, so why do we need listenTCP (by the
way, we should totally have a SerialPortEndpoint)? I understand your
point that some reactors provide addReader while others provide
addOverlappedIOObject (or whatever the heck it's called), but an
Endpoints implementation can DTRT based on the interfaces that the
supplied reactor provides, so I don't see why TCPServerEndpoint can't
just instantiate a port and call addReader/addWriter or the
IOCPreactor equivalent. And maybe we need a better way to deal with
the differences between those reactors, but I don't see why that
requires us to have public transport-specific methods on the reactor.

However, of course I'm not advocating we jump the gun on deprecating
listenTCP and so forth. We shouldn't deprecate them now, and when we
do, we should make it an *extremely* long period of PendingDeprecation
followed by Deprecation.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/


From glyph at twistedmatrix.com  Tue Jun  8 01:40:21 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 8 Jun 2010 01:40:21 -0400
Subject: [Twisted-Python] Endpoints & Reactors (was Re: Integrating Twisted
	with ZeroMQ)
In-Reply-To: <AANLkTimC0gFLMd2BdujA8blDahx_9chcL3s48FLHpPSL@mail.gmail.com>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
	<AANLkTimsWDD-iyjWX6eNUWRZYO8Nzb25A__AytfTUpcs@mail.gmail.com>
	<4AB753E9-4D69-431A-8044-12EBF16A35E3@twistedmatrix.com>
	<AANLkTimC0gFLMd2BdujA8blDahx_9chcL3s48FLHpPSL@mail.gmail.com>
Message-ID: <8BFFFDD7-0CD3-444A-8302-2BD151C9F1EA@twistedmatrix.com>


On Jun 7, 2010, at 6:07 PM, Christopher Armstrong wrote:

> But will that "lower-level than endpoints" API need to be TCP-specific?
> 
> We don't have a listenSerialPort, so why do we need listenTCP (by the way, we should totally have a SerialPortEndpoint)?

We totally *should* have a SerialPortEndpoint, but I definitely prefer the way that calling 'reactor.listenTCP(...)' implicitly selects a back-end to the platform-detection junk at the bottom of twisted.internet.serialport.  The wonky platform-detection has some practical implications, as shown here: <http://twistedmatrix.com/trac/ticket/3802>.  I would actually prefer a nice 'AttributeError: SelectReactor has no attribute "listenSerialPort"' to the mess that it currently produces.

> I understand your point that some reactors provide addReader while others provide addOverlappedIOObject (or whatever the heck it's called), but an Endpoints implementation can DTRT based on the interfaces that the supplied reactor provides, so I don't see why TCPServerEndpoint can't just instantiate a port and call addReader/addWriter or the IOCPreactor equivalent.

> And maybe we need a better way to deal with the differences between those reactors, but I don't see why that requires us to have public transport-specific methods on the reactor.

Well, we need to deal with the differences *somehow*.  Currently, we just have a listenTCP on the reactor.  This makes the implementation of endpoints dead simple, and it doesn't really vary at all per-platform.  It seems to work okay; the main drawback, as far as I can tell, is that it deepens the inheritance hierarchy of the reactors a bit, because we use inheritance to grab the many similar method implementations that many similar reactors share.

In the current model, we can add new types of socket-ish things - the ones that I can think of which may one day actually matter are Java SelectableChannel objects and maybe System.Net.Socket.Select if we ever support Jython and IronPython, respectively - by adding new reactors, and these things need new reactors anyway in order to invoke the multiplexors that understand these objects.  So that sorta makes sense to me.  You call listenTCP on something somewhat opaque, and the opaque thing knows how to give you back an appropriate IListeningPort, ITransport, etc.  With the reactor plugin API, we can even add these new types of things outside of Twisted, pretty straightforwardly.

This dispatch point *could* be handled internally in each endpoint implementation, and that does seem hypothetically more elegant to me, since it's the endpoint that should care about the TCP-ness and the reactor that should care about the file-descriptor-ness, abstractly.  But at some point, the rubber must meet the road, and IReactorFDSet needs to be mapped to twisted.internet.tcp.Port, and twisted.internet.tcp.Connector, or similar, and IReactorIOCPMumbleMumble (btw, this interface should exist) to twisted.internet.iocpreactor.tcp.Port, etc.

If I want to do that mapping under the current system, I just implement my own reactor plugin and implement listenTCP to do the right thing.  Under a new system where the endpoint was responsible for handling that mapping, can I add a reactor plugin that has a meaningfully different idea of what a multiplexable I/O resource is?  I have some vague ideas... something sort of shaped like an adapter registry, maybe?  A different plugin API, for things to talk specifically to the TCP endpoint code?  I can brainstorm up some vague ideas but none of them really sit right, and certainly none of them are as straightforward as just implementing a bunch of methods specified by interfaces.

Now, I'm pretty sure you know how I feel about this, Chris, but just so nobody else takes away the wrong conclusion from this: I'm not saying that the current internal reactor factoring is perfect, or even particularly good.  That code needs a lot of cleanup, a lot of documentation, and in many places a general sorting-out of what really constitutes the intended public API.  It's far too hard to implement an external reactor, because you can't sensibly inherit any of that code which all reactors practically need to inherit.  It's mostly undocumented and it has even changed incompatibly a few times.   For example, <http://twistedmatrix.com/trac/changeset/24132> incompatibly changed the signature of 'tcp.Port.__init__'.  However, it seems like a more straightforward job to me to figure out a reasonable signature for tcp.Port.__init__, and to do some general de-duplication of code between the IOCP modules and the UNIX-file-descriptor modules, than to come up with a whole new way to correlate endpoint implementations to their respective concrete transport implementations.

This quality problem in the core multiplexing code is actually one of the reasons I want to vocally defend the current architecture.  Until we have a defined path forward, with a clear design that's better in a way that has some positive, practical ramifications, I don't want to put anyone off doing this necessary maintenance work in twisted.internet.  There's not a huge amount of maintenance going on in that area already, but if we adopt the attitude of "Oh, let's forget about that, it's going to get deprecated anyway", I have a feeling the amount of work will drop to zero.

> However, of course I'm not advocating we jump the gun on deprecating listenTCP and so forth. We shouldn't deprecate them now, and when we do, we should make it an *extremely* long period of PendingDeprecation followed by Deprecation.

Well, Python 2.7 isn't going to display DeprecationWarning by default anyway, so I think PendingDeprecation may be pointless.  But I definitely echo the sentiment, regardless.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100608/ab104fb4/attachment.htm 

From glyph at twistedmatrix.com  Tue Jun  8 01:49:36 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 8 Jun 2010 01:49:36 -0400
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
In-Reply-To: <AANLkTimsWDD-iyjWX6eNUWRZYO8Nzb25A__AytfTUpcs@mail.gmail.com>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
	<AANLkTimsWDD-iyjWX6eNUWRZYO8Nzb25A__AytfTUpcs@mail.gmail.com>
Message-ID: <B618C358-5A7B-4BB6-ABBF-D722F44A9689@twistedmatrix.com>


On Jun 6, 2010, at 4:18 PM, Christopher Armstrong wrote:

> ... We also don't want to have connectSOCKS ...

Since I basically said that we *did* possibly want listenSerialPort as an alternative to the half-working platform-detection stuff that twisted.internet.serialport does, I do want to draw a distinction here.  Although we might want to have a SOCKS enpdoint, 'connectSOCKS' is something that there is _no_ reason I can see for any reactor to have in the future.  SOCKS is a protocol that is implemented on top of TCP.  If you want a SOCKS endpoint, it doesn't need extra support from the reactor; it can be formulated entirely in terms of TCP endpoints.  Even if you're doing something weird like wrapping a C SOCKS library, that library would almost certainly have platform limitations, and provide you with an object that exposed a file descriptor anyway, so you could use IReactorFDset.

(But, practically speaking, you probably just want to use something like 'socksify' anyway, for outgoing connections.)

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100608/cba75272/attachment-0001.htm 

From glyph at twistedmatrix.com  Tue Jun  8 01:59:15 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 8 Jun 2010 01:59:15 -0400
Subject: [Twisted-Python] Job Opening - TweetDeck Backend Engineer -
	London, UK
In-Reply-To: <AANLkTinss9gPgv2iPNx-9gtIBNRGlF-2C3yy-lyQTNi5@mail.gmail.com>
References: <AANLkTilf2TECy8RXFp8jdF6PYVcPHGraUmcaF5kiQ_jF@mail.gmail.com>
	<AANLkTilwKngtdTYvQfUeaUG8WuV6QUZ3DSHLa1oG_zlx@mail.gmail.com>
	<AANLkTinss9gPgv2iPNx-9gtIBNRGlF-2C3yy-lyQTNi5@mail.gmail.com>
Message-ID: <781A06F6-F294-4A1A-9747-BD9F088B189B@twistedmatrix.com>


On Jun 7, 2010, at 7:30 AM, Reza Lotun wrote:

> Hi Laurens,
> 
> You'll notice we're already listed on the Sucess Stories page ;-)
> 
> Reza

Reza showed up with a success story before it was cool!  He's got good Twisted indie cred.  ;-)


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100608/63a84a71/attachment.htm 

From glyph at twistedmatrix.com  Tue Jun  8 03:19:53 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 8 Jun 2010 03:19:53 -0400
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
In-Reply-To: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
Message-ID: <4918A429-3AEC-4358-BFB0-66A3719A8D79@twistedmatrix.com>

So, I agree pretty much completely with everything exarkun said, but I do feel like I should add a bit more here about the high-level questions raised here:

On Jun 6, 2010, at 3:59 PM, Laurens Van Houtven wrote:

> A potential option for Twisted, which some people don't quite like, would be to have a listenZMQ and connectZMQ, analogous to listenTCP/listenUDP/listenSSL and the respective connect*s.

So, listenTCP/listenUDP are very different from listenSSL.  JP already made an oblique reference to this when talking about ZMQ possibly being implemented in the kernel.

listenTCP and listenUDP are different kernel-level things.  Not only are they implemented differently, they have different semantics and interact with different interfaces.  UDP is datagram-oriented, TCP is stream-oriented.

listenSSL, on the other hand, is a stream transport, implemented in userspace, by a C library.  It can be (and actually is, in twisted.protocols.tls) implemented as a regular TCP IProtocol along with providing its own stream-oriented ITransport.  There are a couple of reasons that listenSSL and startTLS are implemented as reactor and transport methods, and none of them have to do with the intrinsic specialness of TLS itself:

At the time we wrote them, the APIs to implement twisted.protocols.tls simply weren't available.  So, we used the mechanisms available to us to interface with the available library at the time, and that meant having a reactor method.

The reason that the code remains now that we have a protocol implementation is that the C code in OpenSSL is faster at getting bytes out of a socket than Twisted; it can do less memory copying while parsing the protocol, and efficiency is really important in TLS; you can visibly notice it when a little extra memory copying starts happening at that layer.  Nevertheless, when we encounter a situation which that library doesn't support, such as in the IOCP reactor, we need an implementation that can work with Twisted's native I/O APIs; this becomes a tradeoff between a scalable multiplexor and a slightly faster recv() code-path.  As far as I'm aware, nobody's done any particular benchmarks on that one, but I would guess that you win a little and you lose a little and it tends to balance out.  Still, when it's possible to gain a little efficiency by doing so, it does make some sense for it to be its own transport API.  This may also apply to ZMQ, since they appear to be obsessed with performance.  (Although that does beg the question why they seem to recommend a 'select'-style API, when as JP notes, that form of API is not great for performance.)

> I think this makes more sense to the ZeroMQ people (who think of ZeroMQ as a layer "next to" TCP which happens to be implemented on top of TCP, on top of which you build your stuff)

I still hold that the ZMQ people are somewhat confused, and I believe that this very basic breakdown in their spatial reasoning is a good indication of how ;-).  If you inhabit the same physical reality that I do, you may have noticed that one object cannot, in fact, be both "next to" and "on top of" something else.  These are distinct coordinates.

> than the Twisted people (who think of ZeroMQ's protocol as yet another TCP-using protocol just like HTTP for example). Having worked with both pieces of software, the more I play with ZeroMQ the more I think listenZMQ/connectZMQ make sense. ZeroMQ really tries to be one of those things and it shows. What ZeroMQ wants to do is semantically much closer to the existing connects and listens. I'm not just making this up: the ZeroMQ people have reviewed this and this is really what ZeroMQ wants to be.

More seriously, I don't think you should care what ZeroMQ "wants to be".  The question isn't one of existential confusion, it's a practical question of what exactly the library *does*, and what a sensible way to integrate that with Twisted is.

To avoid confusion about endpoints vs. reactor methods, I think it's safe to say that you have three implementation options: let's call them "ZMQProtocol", "ZMQTransport", and "ZMQReactor".

The thing that you appear to be talking down over and over again, implementing ZeroMQ as a 'regular TCP' IProtocol provider, does not sound like a viable option.  The advantage of this option is that it would allow you to transport ZMQ messages over completely arbitrary Twisted ITransport providers and IReactorTCP providers.  However, you've never talked about wanting to do that.  The disadvantages are that it doesn't sound like it makes sense to you, none of the APIs are exposed, and it generally goes against the grain of the library.  So let's forget about that.  (Again, it doesn't matter if ZMQ "really is" a layer "next to" or "on top of" TCP or whatever: if the library makes this difficult or impossible, then it doesn't matter where its true soul lies.)

JP's option, ZMQTransport, suggests that you should implement it as an IReadDescriptor/IWriteDescriptor. That works if the ZeroMQ library will expose the file descriptors it's using to you.  The advantage of this option is that it will work with an arbitrary IReactorFDSet implementation, which basically all of the reactors which can run on a UNIX-like OS are.  Also, as JP has described, it's probably not too much code.  You can use it with GUI integration, even GUI integration on Windows, and it should work fine.  The disadvantages of this option are that apparently ZMQ is going to need to change, because it doesn't want to expose its file descriptors to Python, and it may be complicated to juggle them, depending on when it opens and closes sockets in response to the inner workings of the library.  For example, can one "send a ZMQ event" open 3 UDP sockets and a TCP socket, do a bunch of stuff with them, and shut some of them down?  Do multiple logical transports, ahem, I mean, "Sockets" (good job naming that, ZMQ guys) ever share their underlying TCP sockets, and thereby require independent management?  I don't know, but I can imagine that it might, and that could be a pain to expose sensibly.

The third option, which you've discussed, is implementing a reactor in terms of pyzmq's existing multiplexing mechanisms.  One advantage of this approach is that it will support ZMQ the most naturally; you can just call the relevant APIs. One advantage which it *may* have - I'm not quite sure - is performance.  It may be possible for the ZMQ library to do a bunch of work inside zmq.select() without talking to Twisted's abstractions at all.  And while Twisted can be pretty fast, especially for Python, I have never even *heard* of anyone trying to run it over InfiniBand, and if they did, I would not expect 8 million messages per second on any hardware I can think of; the mainloop has too much overhead.  Based on some back-of-the-envelope (and probably highly inaccurate) math, Python *bytecode execution* is too much overhead to get that level of performance; I'm kind of skeptical that they even get it in C without benchmark hax of some kind; but nevertheless, they advertise this performance on their home page and they obviously care about it quite a lot.  It's not going to speed up your Twisted code at all, of course, and I have no idea if ZMQ messaging dominates your workload, so it may be a negligible gain.  The disadvantages of this approach, as several people have already pointed out, are that it won't work with GUI integration, or any custom third-party reactors, or... well, pretty much any features except the ones you explicitly build in yourself.  Also, if you want to properly stick to public APIs and build this as an extension to Twisted, you may find yourself rewriting some of the code in twisted.internet, or inheriting some public-but-ugh-we-wish-it-weren't classes.  This option may be somewhat labor intensive on the Twisted side of things, although as you note, it will probably be pretty easy with ZMQ.  It shouldn't be *too* hard though, and if you're willing to resort to heinous unsupported hacks, you could do something like subclass PollReactor and just replace '_poller' with a poller from zmq.poll, which is at least advertised to be compatible (although I suspect that the reality may fall short slightly, as it often does).

Based on this analysis, which is far more thorough than I really wanted to do :(, it sounds to me like ZMQTransport and ZMQReactor are both somewhat feasible, and have overlapping advantages and disadvantages which may make each of them an attractive option in different circumstances.  There are probably situations where even ZMQProtocol would make sense.

However!

In BOTH of these options, you're going to need to define, implicitly or explicitly, IZMQTransport and IZMQProtocol interfaces, stipulating the interaction between the transport layer of your ZMQ API and the protocol layer which applications implement.  Maybe pyzmq already outlines this for you, maybe not; but the point is, you should really be focusing on defining *that* interface in a way that makes sense.  The rest of this stuff is all implementation details.

If you define those interfaces well, then whatever integration option you start with, you should be able to change the internal implementation, or perhaps even use multiple implementations.  For example, you may discover that the performance thing is actually significant, and want to use ZMQReactor on your back-end servers, but eventually write some client-side GUI tools which also want to use ZMQ but aren't quite as performance-sensitive.

I personally have little interest in ZMQ itself, but I think this general pattern stands for any large, existing C protocol library that someone might want to integrate with Twisted.  In most cases the 'reactor' option probably isn't there, but 'is it a protocol or is it a transport' would be a FAQ, if there were more in the way of large, useful C libraries that did async networking stuff :).

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100608/08aeb82e/attachment.htm 

From landreville at deadtreepages.com  Tue Jun  8 10:46:34 2010
From: landreville at deadtreepages.com (Landreville)
Date: Tue, 8 Jun 2010 10:46:34 -0400
Subject: [Twisted-Python] Setting a different logger for Twistd
Message-ID: <AANLkTinWClwF5_X3CVkT4fuHZ28xjhTmOml3c-pTMr2-@mail.gmail.com>

Hello,
I saw a few tickets and some mailing list messages similar to this
question, but never saw a definitive answer.

How do I go about using a different logger when I am using twistd?

I have a file that defines the application object and I tried the
following code in hopes that I could make the logger have max rotated
logs set to a smaller number:

logfile =?LogFile(LOG_FILE, LOG_DIRECTORY, LOG_SIZE, maxRotatedFiles=MAX_LOGS)
application.setComponent(ILogObserver, FileLogObserver(logfile))

but I get an assertion error coming up:
Traceback (most recent call last):
  File "/usr/bin/twistd", line 21, in <module>
    run()
  File "/Library/Python/2.6/site-packages/Twisted-9.0.0-py2.6-macosx-10.6-universal.egg/twisted/scripts/twistd.py",
line 27, in run
    app.run(runApp, ServerOptions)
  File "/Library/Python/2.6/site-packages/Twisted-9.0.0-py2.6-macosx-10.6-universal.egg/twisted/application/app.py",
line 693, in run
    runApp(config)
  File "/Library/Python/2.6/site-packages/Twisted-9.0.0-py2.6-macosx-10.6-universal.egg/twisted/scripts/twistd.py",
line 23, in runApp
    _SomeApplicationRunner(config).run()
  File "/Library/Python/2.6/site-packages/Twisted-9.0.0-py2.6-macosx-10.6-universal.egg/twisted/application/app.py",
line 421, in run
    self.logger.start(self.application)
  File "/Library/Python/2.6/site-packages/Twisted-9.0.0-py2.6-macosx-10.6-universal.egg/twisted/application/app.py",
line 249, in start
    log.startLoggingWithObserver(self._observer)
  File "/Library/Python/2.6/site-packages/Twisted-9.0.0-py2.6-macosx-10.6-universal.egg/twisted/python/log.py",
line 592, in startLoggingWithObserver
    addObserver(observer)
  File "/Library/Python/2.6/site-packages/Twisted-9.0.0-py2.6-macosx-10.6-universal.egg/twisted/python/log.py",
line 253, in addObserver
    assert callable(other)
AssertionError


From landreville at deadtreepages.com  Tue Jun  8 11:06:56 2010
From: landreville at deadtreepages.com (Landreville)
Date: Tue, 8 Jun 2010 11:06:56 -0400
Subject: [Twisted-Python] Setting a different logger for Twistd
In-Reply-To: <AANLkTinWClwF5_X3CVkT4fuHZ28xjhTmOml3c-pTMr2-@mail.gmail.com>
References: <AANLkTinWClwF5_X3CVkT4fuHZ28xjhTmOml3c-pTMr2-@mail.gmail.com>
Message-ID: <AANLkTilGiB5NolRkqY7dmeAGeiU3JolmixRmIXJYquiJ@mail.gmail.com>

On Tue, Jun 8, 2010 at 10:46 AM, Landreville
<landreville at deadtreepages.com> wrote:
> Hello,
> I saw a few tickets and some mailing list messages similar to this
> question, but never saw a definitive answer.
>
> How do I go about using a different logger when I am using twistd?
>
> I have a file that defines the application object and I tried the
> following code in hopes that I could make the logger have max rotated
> logs set to a smaller number:
>
> logfile =?LogFile(LOG_FILE, LOG_DIRECTORY, LOG_SIZE, maxRotatedFiles=MAX_LOGS)
> application.setComponent(ILogObserver, FileLogObserver(logfile))
>
> but I get an assertion error coming up:
> Traceback (most recent call last):
> ?File "/usr/bin/twistd", line 21, in <module>
> ? ?run()
> ?File "/Library/Python/2.6/site-packages/Twisted-9.0.0-py2.6-macosx-10.6-universal.egg/twisted/scripts/twistd.py",
> line 27, in run
> ? ?app.run(runApp, ServerOptions)
> ?File "/Library/Python/2.6/site-packages/Twisted-9.0.0-py2.6-macosx-10.6-universal.egg/twisted/application/app.py",
> line 693, in run
> ? ?runApp(config)
> ?File "/Library/Python/2.6/site-packages/Twisted-9.0.0-py2.6-macosx-10.6-universal.egg/twisted/scripts/twistd.py",
> line 23, in runApp
> ? ?_SomeApplicationRunner(config).run()
> ?File "/Library/Python/2.6/site-packages/Twisted-9.0.0-py2.6-macosx-10.6-universal.egg/twisted/application/app.py",
> line 421, in run
> ? ?self.logger.start(self.application)
> ?File "/Library/Python/2.6/site-packages/Twisted-9.0.0-py2.6-macosx-10.6-universal.egg/twisted/application/app.py",
> line 249, in start
> ? ?log.startLoggingWithObserver(self._observer)
> ?File "/Library/Python/2.6/site-packages/Twisted-9.0.0-py2.6-macosx-10.6-universal.egg/twisted/python/log.py",
> line 592, in startLoggingWithObserver
> ? ?addObserver(observer)
> ?File "/Library/Python/2.6/site-packages/Twisted-9.0.0-py2.6-macosx-10.6-universal.egg/twisted/python/log.py",
> line 253, in addObserver
> ? ?assert callable(other)
> AssertionError
>

ahh.. I missed the .emit in the docs. It should have been:
logfile = LogFile(LOG_FILE, LOG_DIRECTORY, LOG_SIZE, maxRotatedFiles=MAX_LOGS)
logfunc = FileLogObserver(logfile).emit
application.setComponent(ILogObserver, logfunc)


From exarkun at twistedmatrix.com  Tue Jun  8 11:10:10 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 08 Jun 2010 15:10:10 -0000
Subject: [Twisted-Python] Setting a different logger for Twistd
In-Reply-To: <AANLkTinWClwF5_X3CVkT4fuHZ28xjhTmOml3c-pTMr2-@mail.gmail.com>
References: <AANLkTinWClwF5_X3CVkT4fuHZ28xjhTmOml3c-pTMr2-@mail.gmail.com>
Message-ID: <20100608151010.1815.237841622.divmod.xquotient.12@localhost.localdomain>

On 02:46 pm, landreville at deadtreepages.com wrote:
>Hello,
>I saw a few tickets and some mailing list messages similar to this
>question, but never saw a definitive answer.
>
>How do I go about using a different logger when I am using twistd?
>
>I have a file that defines the application object and I tried the
>following code in hopes that I could make the logger have max rotated
>logs set to a smaller number:
>
>logfile =?LogFile(LOG_FILE, LOG_DIRECTORY, LOG_SIZE, 
>maxRotatedFiles=MAX_LOGS)
>application.setComponent(ILogObserver, FileLogObserver(logfile))

The log observer is just a callable that takes a log event.  So, you're 
close.  You just want to pass the `emit` method of that FileLogObserver 
observer instance, instead of the instance itself:

  application.setComponent(ILogObserver, FileLogObserver(logfile).emit)

Jean-Paul


From msoulier at digitaltorque.ca  Tue Jun  8 12:36:27 2010
From: msoulier at digitaltorque.ca (Michael P. Soulier)
Date: Tue, 8 Jun 2010 12:36:27 -0400
Subject: [Twisted-Python] handling SIGCHLD
Message-ID: <20100608163625.GD3402@digitaltorque.ca>

Hi,

I have a twisted service that needs to fork child processes to do tasks, after
which they will exit. I wrote a signal handler for SIGCHLD but it didn't seem
to be called. I read something about twisted installing its own signal
handlers that may conflict. Is this true?

How would you recommend handling a SIGCHLD in twisted?

Many thanks,
Mike
-- 
Michael P. Soulier <msoulier at digitaltorque.ca>
"Any intelligent fool can make things bigger and more complex... It takes a
touch of genius - and a lot of courage to move in the opposite direction."
--Albert Einstein
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20100608/66d5955b/attachment.pgp 

From itamar at itamarst.org  Tue Jun  8 13:12:04 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 8 Jun 2010 13:12:04 -0400 (EDT)
Subject: [Twisted-Python] handling SIGCHLD
In-Reply-To: <20100608163625.GD3402@digitaltorque.ca>
References: <20100608163625.GD3402@digitaltorque.ca>
Message-ID: <54392.63.107.91.99.1276017124.squirrel@webmail.zoteca.com>

> Hi,
>
> I have a twisted service that needs to fork child processes to do tasks,
> after
> which they will exit. I wrote a signal handler for SIGCHLD but it didn't
> seem
> to be called. I read something about twisted installing its own signal
> handlers that may conflict. Is this true?
>
> How would you recommend handling a SIGCHLD in twisted?

You should probably just use reactor.spawnProcess to fork processes: it
implements the process handling for you, and has its own SIGCHLD handler
that does the right thing, so you don't have to maintain your own.

-Itamar



From msoulier at digitaltorque.ca  Tue Jun  8 13:16:30 2010
From: msoulier at digitaltorque.ca (Michael P. Soulier)
Date: Tue, 8 Jun 2010 13:16:30 -0400
Subject: [Twisted-Python] handling SIGCHLD
In-Reply-To: <54392.63.107.91.99.1276017124.squirrel@webmail.zoteca.com>
References: <20100608163625.GD3402@digitaltorque.ca>
	<54392.63.107.91.99.1276017124.squirrel@webmail.zoteca.com>
Message-ID: <20100608171626.GA3729@digitaltorque.ca>

On 08/06/10 Itamar Turner-Trauring said:

> You should probably just use reactor.spawnProcess to fork processes: it
> implements the process handling for you, and has its own SIGCHLD handler
> that does the right thing, so you don't have to maintain your own.

The problem is that I'm using the multiprocessing module right now. 

Mike
-- 
Michael P. Soulier <msoulier at digitaltorque.ca>
"Any intelligent fool can make things bigger and more complex... It takes a
touch of genius - and a lot of courage to move in the opposite direction."
--Albert Einstein
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20100608/1000ca8d/attachment.pgp 

From jrennie at gmail.com  Tue Jun  8 13:25:41 2010
From: jrennie at gmail.com (Jason Rennie)
Date: Tue, 8 Jun 2010 13:25:41 -0400
Subject: [Twisted-Python] handling SIGCHLD
In-Reply-To: <20100608163625.GD3402@digitaltorque.ca>
References: <20100608163625.GD3402@digitaltorque.ca>
Message-ID: <AANLkTikvEPxBeCX3n6L0fsKh0eSDpr92pMyfcmTZdNwz@mail.gmail.com>

Two options:

   1. (as Itamar notes) use spawnProcess for all your process spawning needs
   2. reactor.run(installSignalHandlers = False) and do your own signal
   handling

For option #2, you'll almost certainly want to install SIGTERM and SIGINT
handlers which call reactor.stop().

Jason

On Tue, Jun 8, 2010 at 12:36 PM, Michael P. Soulier <
msoulier at digitaltorque.ca> wrote:

> Hi,
>
> I have a twisted service that needs to fork child processes to do tasks,
> after
> which they will exit. I wrote a signal handler for SIGCHLD but it didn't
> seem
> to be called. I read something about twisted installing its own signal
> handlers that may conflict. Is this true?
>
> How would you recommend handling a SIGCHLD in twisted?
>
> Many thanks,
> Mike
> --
> Michael P. Soulier <msoulier at digitaltorque.ca>
> "Any intelligent fool can make things bigger and more complex... It takes a
> touch of genius - and a lot of courage to move in the opposite direction."
> --Albert Einstein
>
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.9 (GNU/Linux)
>
> iEYEARECAAYFAkwOcYkACgkQKGqCc1vIvggbUACfY8xqgU2LLOrs0cfR7HngUqmc
> LOQAoKkur5+DK8lcZ+q6qWDtjqIpX3Ov
> =XM/4
> -----END PGP SIGNATURE-----
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100608/6571d220/attachment.htm 

From exarkun at twistedmatrix.com  Tue Jun  8 13:48:55 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 08 Jun 2010 17:48:55 -0000
Subject: [Twisted-Python] handling SIGCHLD
In-Reply-To: <20100608171626.GA3729@digitaltorque.ca>
References: <20100608163625.GD3402@digitaltorque.ca>
	<54392.63.107.91.99.1276017124.squirrel@webmail.zoteca.com>
	<20100608171626.GA3729@digitaltorque.ca>
Message-ID: <20100608174855.1815.841783729.divmod.xquotient.17@localhost.localdomain>

On 05:16 pm, msoulier at digitaltorque.ca wrote:
>On 08/06/10 Itamar Turner-Trauring said:
>>You should probably just use reactor.spawnProcess to fork processes: 
>>it
>>implements the process handling for you, and has its own SIGCHLD 
>>handler
>>that does the right thing, so you don't have to maintain your own.
>
>The problem is that I'm using the multiprocessing module right now.

Aside from switching from multiprocessing to spawnProcess (or Ampoule), 
you might want to take a look at

    http://stackoverflow.com/questions/1470850/twisted-network-client- 
with-multiprocessing-workers/1472271#1472271

Jean-Paul


From jml at mumak.net  Tue Jun  8 15:48:55 2010
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 8 Jun 2010 15:48:55 -0400
Subject: [Twisted-Python] The 10.1 release -- what's happening
Message-ID: <AANLkTil7FDzw6MejjTg_kYem6k7543ZEMSEVPVjweVnO@mail.gmail.com>

Hello,

Many of you have been asking, "what happened to the 10.1 release?"

Essentially, glyph and I both had horrible weekends for different
reasons. Instead of releasing, I waited around for glyph and fixed a
bunch of release-related tickets.

I'm going to try to do a pre-release this week. Sorry for the delay.

jml


From exarkun at twistedmatrix.com  Wed Jun  9 00:20:30 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 09 Jun 2010 04:20:30 -0000
Subject: [Twisted-Python] Dropping Python 2.4 support on Windows after 10.1
Message-ID: <20100609042030.1815.659910457.divmod.xquotient.43@localhost.localdomain>

Hey all,

I would like to propose that after Twisted 10.1 is released, we cease to 
claim support for Python 2.4 on any version of Windows.  This seems 
reasonable to me considering that Python 2.5 was first released in 
September of 2006 and that either Windows Python installations can be 
upgraded easily or very likely no upgrades are possible at all 
(specifically, no upgrades of Twisted).

The motivation for this is that we do not have the hardware resources to 
continue to test Twisted on Python 2.4 on Windows, particularly 
considering we will shortly want to begin testing on Python 2.7 on 
Windows.  If Windows/Python 2.4 support is important enough to anyone 
that they can offer to host the build slaves necessary to continue 
testing, then I'll withdraw the suggestion.

Lastly, I am not proposing dropping Python 2.4 support on any other 
platform (ie, Debian and Fedora).

Jean-Paul


From andrewfr_ice at yahoo.com  Wed Jun  9 10:22:45 2010
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Wed, 9 Jun 2010 07:22:45 -0700 (PDT)
Subject: [Twisted-Python] Stackless.py and Twisted
Message-ID: <390902.71894.qm@web120015.mail.ne1.yahoo.com>

Hi Folks:

My talk "Prototyping Go's Select for Stackless with Stackless.py" recently got accepted to EuroPython. In the talk, I modified stackless.py to support the Go language's Select statement. I support Select as a method rather than a Python language feature. Implementing Select turns out to be relatively. However my original interest in stackless.py  was about subclassing the Twisted Reactor and making it stackless's scheduler. As opposed to running Twisted in a separate tasklet so an application does not deadlock under certain edge cases. In part I wanted to experiment with changing the stackless scheduler in such a way as to improve the performance of IO driven applications.  I am wondering if I would see a speed up if compiled into pypy-c (unfortunately right now I don't believe the JIT and Stackless are integrated)? Is this too wild an idea?

Cheers,
Andrew




      


From glyph at twistedmatrix.com  Wed Jun  9 14:35:09 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 9 Jun 2010 14:35:09 -0400
Subject: [Twisted-Python] Dropping Python 2.4 support on Windows after
	10.1
In-Reply-To: <20100609042030.1815.659910457.divmod.xquotient.43@localhost.localdomain>
References: <20100609042030.1815.659910457.divmod.xquotient.43@localhost.localdomain>
Message-ID: <6B39B1B2-F627-4474-8B1B-31E80DF19596@twistedmatrix.com>


On Jun 9, 2010, at 12:20 AM, exarkun at twistedmatrix.com wrote:

> I would like to propose that after Twisted 10.1 is released, we cease to 
> claim support for Python 2.4 on any version of Windows.  This seems 
> reasonable to me considering that Python 2.5 was first released in 
> September of 2006 and that either Windows Python installations can be 
> upgraded easily or very likely no upgrades are possible at all 
> (specifically, no upgrades of Twisted).

Seconded.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100609/32976b75/attachment.htm 

From kevin.horn at gmail.com  Wed Jun  9 15:29:31 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 9 Jun 2010 14:29:31 -0500
Subject: [Twisted-Python] Dropping Python 2.4 support on Windows after
	10.1
In-Reply-To: <20100609042030.1815.659910457.divmod.xquotient.43@localhost.localdomain>
References: <20100609042030.1815.659910457.divmod.xquotient.43@localhost.localdomain>
Message-ID: <AANLkTikjYzGK3jSTwzDE-j30S2UoG6zKFGehXtLg3kC9@mail.gmail.com>

On Tue, Jun 8, 2010 at 11:20 PM, <exarkun at twistedmatrix.com> wrote:

> Hey all,
>
> I would like to propose that after Twisted 10.1 is released, we cease to
> claim support for Python 2.4 on any version of Windows.  This seems
> reasonable to me considering that Python 2.5 was first released in
> September of 2006 and that either Windows Python installations can be
> upgraded easily or very likely no upgrades are possible at all
> (specifically, no upgrades of Twisted).
>
> The motivation for this is that we do not have the hardware resources to
> continue to test Twisted on Python 2.4 on Windows, particularly
> considering we will shortly want to begin testing on Python 2.7 on
> Windows.  If Windows/Python 2.4 support is important enough to anyone
> that they can offer to host the build slaves necessary to continue
> testing, then I'll withdraw the suggestion.
>
> Lastly, I am not proposing dropping Python 2.4 support on any other
> platform (ie, Debian and Fedora).
>
> Jean-Paul
>
>
It would be nice to keep it if possible, but if it's a choice between a
buildslave for 2.4 and one for 2.7, then 2.7 really needs to take priority.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100609/7a23f45e/attachment.htm 

From konrads at smelkovs.com  Wed Jun  9 15:31:50 2010
From: konrads at smelkovs.com (Konrads Smelkovs)
Date: Wed, 9 Jun 2010 22:31:50 +0300
Subject: [Twisted-Python] Dropping Python 2.4 support on Windows after
	10.1
In-Reply-To: <6B39B1B2-F627-4474-8B1B-31E80DF19596@twistedmatrix.com>
References: <20100609042030.1815.659910457.divmod.xquotient.43@localhost.localdomain>
	<6B39B1B2-F627-4474-8B1B-31E80DF19596@twistedmatrix.com>
Message-ID: <AANLkTinSyNg0riQbrekCpPxxRMwnar29bDgq1KGtSb0G@mail.gmail.com>

Me 3. Existing apps wont likely care about new features and if they
need then upgrade to 2.5 is fully backwards compatible

2010/6/9, Glyph Lefkowitz <glyph at twistedmatrix.com>:
>
> On Jun 9, 2010, at 12:20 AM, exarkun at twistedmatrix.com wrote:
>
>> I would like to propose that after Twisted 10.1 is released, we cease to
>> claim support for Python 2.4 on any version of Windows.  This seems
>> reasonable to me considering that Python 2.5 was first released in
>> September of 2006 and that either Windows Python installations can be
>> upgraded easily or very likely no upgrades are possible at all
>> (specifically, no upgrades of Twisted).
>
> Seconded.

-- 
Nos?t?ts no manas mobil?s ier?ces

--
Konrads Smelkovs
Applied IT sorcery.


From dgriff1 at gmail.com  Wed Jun  9 15:42:32 2010
From: dgriff1 at gmail.com (Daniel Griffin)
Date: Wed, 9 Jun 2010 14:42:32 -0500
Subject: [Twisted-Python] Stackless.py and Twisted
In-Reply-To: <390902.71894.qm@web120015.mail.ne1.yahoo.com>
References: <390902.71894.qm@web120015.mail.ne1.yahoo.com>
Message-ID: <AANLkTikVzLs1Y2lgUkVTSC0elX37jHRx2bcq6R0U47ad@mail.gmail.com>

I dont know if twisted can really be counted as a scheduler. Its purpose is
more to do with nonblocking IO. To improve IO performance in stackless you
would need to add multiplexing to its scheduler(if it doesnt already have
it). http://eventlet.net/ seems to to this.

Dan

On Wed, Jun 9, 2010 at 9:22 AM, Andrew Francis <andrewfr_ice at yahoo.com>wrote:

> Hi Folks:
>
> My talk "Prototyping Go's Select for Stackless with Stackless.py" recently
> got accepted to EuroPython. In the talk, I modified stackless.py to support
> the Go language's Select statement. I support Select as a method rather than
> a Python language feature. Implementing Select turns out to be relatively.
> However my original interest in stackless.py  was about subclassing the
> Twisted Reactor and making it stackless's scheduler. As opposed to running
> Twisted in a separate tasklet so an application does not deadlock under
> certain edge cases. In part I wanted to experiment with changing the
> stackless scheduler in such a way as to improve the performance of IO driven
> applications.  I am wondering if I would see a speed up if compiled into
> pypy-c (unfortunately right now I don't believe the JIT and Stackless are
> integrated)? Is this too wild an idea?
>
> Cheers,
> Andrew
>
>
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100609/c5c2c34e/attachment.htm 

From glyph at twistedmatrix.com  Wed Jun  9 17:24:59 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 9 Jun 2010 17:24:59 -0400
Subject: [Twisted-Python] Dropping Python 2.4 support on Windows after
	10.1
In-Reply-To: <AANLkTikjYzGK3jSTwzDE-j30S2UoG6zKFGehXtLg3kC9@mail.gmail.com>
References: <20100609042030.1815.659910457.divmod.xquotient.43@localhost.localdomain>
	<AANLkTikjYzGK3jSTwzDE-j30S2UoG6zKFGehXtLg3kC9@mail.gmail.com>
Message-ID: <E4118647-21EC-41BC-831D-8C5B4DACE4E0@twistedmatrix.com>

On Jun 9, 2010, at 3:29 PM, Kevin Horn wrote:

> It would be nice to keep it if possible, but if it's a choice between a buildslave for 2.4 and one for 2.7, then 2.7 really needs to take priority.

Well, you can make it possible by volunteering the hardware :).  I just don't think we should think about it for very long unless someone is willing to do that.

From rgacote at appropriatesolutions.com  Wed Jun  9 18:04:18 2010
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Wed, 9 Jun 2010 18:04:18 -0400 (EDT)
Subject: [Twisted-Python] Dropping Python 2.4 support on Windows after
 10.1
In-Reply-To: <20100609042030.1815.659910457.divmod.xquotient.43@localhost.localdomain>
Message-ID: <14696810.4491276121055334.JavaMail.rgacote@ip-210.Corp.AppropriateSolutions.com>


We have quite a bit of Twisted/Windows code and it has all been ported over to 2.5 or 2.6. 
I find it easier to upgrade Pythons on Windows since the bulk of our Windows products are shipped as py2exe containing their own interpreter. Cleaner than dealing with CentOS (for example) which has 2.4 in the base install. 

So, one positive vote for removing 2.4 support in Windows. 
I prefer your Windows support be focused  moving forward to 2.7. 

--Ray


----- Original Message -----
From: exarkun at twistedmatrix.com
To: twisted-python at twistedmatrix.com
Sent: Wednesday, June 9, 2010 12:20:30 AM GMT -05:00 US/Canada Eastern
Subject: [Twisted-Python] Dropping Python 2.4 support on Windows after 10.1

Hey all,

I would like to propose that after Twisted 10.1 is released, we cease to 
claim support for Python 2.4 on any version of Windows.  This seems 
reasonable to me considering that Python 2.5 was first released in 
September of 2006 and that either Windows Python installations can be 
upgraded easily or very likely no upgrades are possible at all 
(specifically, no upgrades of Twisted).

The motivation for this is that we do not have the hardware resources to 
continue to test Twisted on Python 2.4 on Windows, particularly 
considering we will shortly want to begin testing on Python 2.7 on 
Windows.  If Windows/Python 2.4 support is important enough to anyone 
that they can offer to host the build slaves necessary to continue 
testing, then I'll withdraw the suggestion.

Lastly, I am not proposing dropping Python 2.4 support on any other 
platform (ie, Debian and Fedora).

Jean-Paul

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
Ray Cote, President
Appropriate Solutions, Inc.
We Build Software
603.924.6079


From glyph at twistedmatrix.com  Wed Jun  9 18:25:05 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 9 Jun 2010 18:25:05 -0400
Subject: [Twisted-Python] making Screwtape (Tim Allen) a committer
Message-ID: <FF6ABFC8-334F-4554-955E-CE4B34F56C2E@twistedmatrix.com>

I think we should give screwtape an SVN account and make him an official reviewer.  He's been doing a lot of work on the distutils code which would be made easier by that, and he's been doing pretty decent reviews.

Thoughts?  (Feel free to voice any comments off-list, too.)

From glyph at twistedmatrix.com  Wed Jun  9 18:25:12 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 9 Jun 2010 18:25:12 -0400
Subject: [Twisted-Python] Dropping Python 2.4 support on Windows after
	10.1
In-Reply-To: <14696810.4491276121055334.JavaMail.rgacote@ip-210.Corp.AppropriateSolutions.com>
References: <14696810.4491276121055334.JavaMail.rgacote@ip-210.Corp.AppropriateSolutions.com>
Message-ID: <64FB205D-DBA2-45A1-ACEF-794249C5234C@twistedmatrix.com>


On Jun 9, 2010, at 6:04 PM, Ray Cote wrote:

> So, one positive vote for removing 2.4 support in Windows. 
> I prefer your Windows support be focused  moving forward to 2.7. 

Since Ray was the first sponsor of 2010, as well as a silver sponsor - see the AppropriateSolutions logo on the front page of twistedmatrix.com - everybody should read this as if it were spoken in a booming, disembodied voice emanating from Mount Olympus.  Goodbye, Windows 2.4 buildslaves! :-)

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100609/e21bf577/attachment-0001.htm 

From kevin.horn at gmail.com  Wed Jun  9 18:49:34 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 9 Jun 2010 17:49:34 -0500
Subject: [Twisted-Python] making Screwtape (Tim Allen) a committer
In-Reply-To: <FF6ABFC8-334F-4554-955E-CE4B34F56C2E@twistedmatrix.com>
References: <FF6ABFC8-334F-4554-955E-CE4B34F56C2E@twistedmatrix.com>
Message-ID: <AANLkTimw4K9thtQ-WDhf32BXILBVGOsOGVD5JJXznWsQ@mail.gmail.com>

+1

On Wed, Jun 9, 2010 at 5:25 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

> I think we should give screwtape an SVN account and make him an official
> reviewer.  He's been doing a lot of work on the distutils code which would
> be made easier by that, and he's been doing pretty decent reviews.
>
> Thoughts?  (Feel free to voice any comments off-list, too.)
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100609/84aa8220/attachment.htm 

From lists at collab.nl  Wed Jun  9 20:10:43 2010
From: lists at collab.nl (Thijs Triemstra | Collab)
Date: Thu, 10 Jun 2010 02:10:43 +0200
Subject: [Twisted-Python] making Screwtape (Tim Allen) a committer
In-Reply-To: <AANLkTimw4K9thtQ-WDhf32BXILBVGOsOGVD5JJXznWsQ@mail.gmail.com>
References: <FF6ABFC8-334F-4554-955E-CE4B34F56C2E@twistedmatrix.com>
	<AANLkTimw4K9thtQ-WDhf32BXILBVGOsOGVD5JJXznWsQ@mail.gmail.com>
Message-ID: <2E827EB3-7F88-4B93-9419-7C501027CAC0@collab.nl>

+2

On 10 Jun 2010, at 00:49, Kevin Horn wrote:

> +1
> 
> On Wed, Jun 9, 2010 at 5:25 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> I think we should give screwtape an SVN account and make him an official reviewer.  He's been doing a lot of work on the distutils code which would be made easier by that, and he's been doing pretty decent reviews.
> 
> Thoughts?  (Feel free to voice any comments off-list, too.)
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100610/58de3302/attachment.htm 

From screwtape at froup.com  Wed Jun  9 20:11:28 2010
From: screwtape at froup.com (Tim Allen)
Date: Thu, 10 Jun 2010 10:11:28 +1000
Subject: [Twisted-Python] making Screwtape (Tim Allen) a committer
In-Reply-To: <FF6ABFC8-334F-4554-955E-CE4B34F56C2E@twistedmatrix.com>
References: <FF6ABFC8-334F-4554-955E-CE4B34F56C2E@twistedmatrix.com>
Message-ID: <20100610001128.GD12934@boombah.thristian.org>

On Wed, Jun 09, 2010 at 06:25:05PM -0400, Glyph Lefkowitz wrote:
> I think we should give screwtape an SVN account and make him an
> official reviewer.  He's been doing a lot of work on the distutils
> code which would be made easier by that, and he's been doing pretty
> decent reviews.

Well, this is a bit of a boost to the ol' ego. :D

The reason I've resisted asking for commit access before this is that
most of my efforts for Twisted have been either (a) things directly
useful for $EMPLOYER's Twisted deployments (such as the distutils
changes you mention), or (b) things indirectly useful for the purposes
of (a), such as cutting down the review queue to make it more likely
that my patches will be reviewed. While my non-work-related
contributions are non-zero, they're a lot less than my work-related
contributions.

That said, I've been following the Twisted project since (checks
mailing-list archive) October 2002, and I fully intend to keep
contributing reviews at the very least no matter who my employer is at
the time.

If you still think I'm a good candidate for committership, I'll happily
accept.


Tim "Screwtape" Allen


From andrew at bemusement.org  Wed Jun  9 20:32:11 2010
From: andrew at bemusement.org (Andrew Bennetts)
Date: Thu, 10 Jun 2010 10:32:11 +1000
Subject: [Twisted-Python] making Screwtape (Tim Allen) a committer
In-Reply-To: <FF6ABFC8-334F-4554-955E-CE4B34F56C2E@twistedmatrix.com>
References: <FF6ABFC8-334F-4554-955E-CE4B34F56C2E@twistedmatrix.com>
Message-ID: <20100610003211.GC5030@steerpike.home.puzzling.org>

Glyph Lefkowitz wrote:
> I think we should give screwtape an SVN account and make him an official
> reviewer.  He's been doing a lot of work on the distutils code which would be
> made easier by that, and he's been doing pretty decent reviews.

+1

I've been thinking (and occasionally saying) this for months!

-Andrew.



From lvh at laurensvh.be  Thu Jun 10 03:53:17 2010
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Thu, 10 Jun 2010 09:53:17 +0200
Subject: [Twisted-Python] making Screwtape (Tim Allen) a committer
In-Reply-To: <20100610003211.GC5030@steerpike.home.puzzling.org>
References: <FF6ABFC8-334F-4554-955E-CE4B34F56C2E@twistedmatrix.com>
	<20100610003211.GC5030@steerpike.home.puzzling.org>
Message-ID: <AANLkTinX39Q_C0IeR_JYn6eBia4YET3L1iJDzdlRuS_u@mail.gmail.com>

Unless there's stuff most of us don't see, I don't see how anyone
could object :-) +1


lvh


From lvh at laurensvh.be  Sat Jun 12 06:02:00 2010
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Sat, 12 Jun 2010 12:02:00 +0200
Subject: [Twisted-Python] trial + test-case-mode
Message-ID: <AANLkTim6flaszwSBn_e8uscLLTTFLtS9dvCdczQxBjFm@mail.gmail.com>

Hey,


Does anyone have some magic Elisp to integrate Since I know a bunch of
you are happy emacs users and TTD afficionados, I'm checking here just
in case someone has already hacked something up to add trial as a
backend for test-case-mode. If nobody has, I'll give it a shot.

test-case-mode: http://www.emacswiki.org/cgi-bin/emacs-en/TestCaseMode
test-case-mode integrated to work with nose's test runner, from Georg
Brandl's excellent dotemacs dir:
http://bitbucket.org/birkenfeld/dotemacs/src (in extensions.el, grep
for test-case-nose-backend and test-case in general)

tia
lvh


From exarkun at twistedmatrix.com  Sun Jun 13 00:05:31 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 13 Jun 2010 04:05:31 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1276401931.96.1089789659@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100613/f8f75b6b/attachment.htm 

From albert.brandl at weiermayer.com  Mon Jun 14 03:35:48 2010
From: albert.brandl at weiermayer.com (Albert Brandl)
Date: Mon, 14 Jun 2010 09:35:48 +0200
Subject: [Twisted-Python] trial + test-case-mode
In-Reply-To: <AANLkTim6flaszwSBn_e8uscLLTTFLtS9dvCdczQxBjFm@mail.gmail.com>
References: <AANLkTim6flaszwSBn_e8uscLLTTFLtS9dvCdczQxBjFm@mail.gmail.com>
Message-ID: <20100614073547.GA4031@weiermayer.com>

Hi,

On Sat, Jun 12, 2010 at 12:02:00PM +0200, Laurens Van Houtven wrote:

> Does anyone have some magic Elisp to integrate

The sources contain an emacs directory; have a look at twisted-dev.el.

Regards, Albert


From abierbaum at gmail.com  Mon Jun 14 09:22:54 2010
From: abierbaum at gmail.com (Allen Bierbaum)
Date: Mon, 14 Jun 2010 08:22:54 -0500
Subject: [Twisted-Python] twisted.web questions
Message-ID: <AANLkTikHnQMzvgyofceyd6OTUPtPpxim47PmgMEg-1qK@mail.gmail.com>

We have a large client-server based application based on twisted.  The
application has grown to the point where we would like to add a REST-based
API to the server side to allow for interfacing with a wider variety of
client applications.  Over the weekend I started looking into twisted.web
and had a couple of basic questions:

1) Is there any method to stream a large request (ex: PUT or POST with file
upload) into the system or does the entire body have to be loaded into
memory as part of the request?

2) Has anyone used an existing URL Routing system (ex: Routes [1], Selector
[2]) and adapted it for use with Twisted?  (I know I could use the twisted
preferred method of parent child hierarchies, but our application has a
better fit with the route-based method used by Pylons, Django, Rails, etc)

3) Is there a document anywhere that describes all the environment variables
the user can get from the request and how to get to them?  (something like
the environ section of the WSGI PEP [3])

4) Are their any wrappers people have developed to make it a bit easier to
use deferreds (in particular inlinecallbacks) in the handlers for
twisted.web?  (I am considering just writing a wrapper myself that provides
an interface similar to google app engine webapp [4] but wanted to check
first so I don't reinvent something)

Thanks,
Allen


[1] http://routes.groovie.org/index.html
[2] http://lukearno.com/projects/selector/
[3] http://www.python.org/dev/peps/pep-0333/#environ-variables
[4] http://code.google.com/appengine/docs/python/tools/webapp/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100614/11ee55c3/attachment.htm 

From itamar at itamarst.org  Mon Jun 14 09:38:27 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 14 Jun 2010 09:38:27 -0400
Subject: [Twisted-Python] twisted.web questions
In-Reply-To: <AANLkTikHnQMzvgyofceyd6OTUPtPpxim47PmgMEg-1qK@mail.gmail.com>
References: <AANLkTikHnQMzvgyofceyd6OTUPtPpxim47PmgMEg-1qK@mail.gmail.com>
Message-ID: <1276522707.1658.17.camel@blake>

On Mon, 2010-06-14 at 08:22 -0500, Allen Bierbaum wrote:

> 1) Is there any method to stream a large request (ex: PUT or POST with
> file upload) into the system or does the entire body have to be loaded
> into memory as part of the request?

Very large requests get written to disk, rather than memory. This is
still not ideal, streaming is obviously better - someone may be able to
suggest how to do it until Twisted gets fixed.

> 2) Has anyone used an existing URL Routing system (ex: Routes [1],
> Selector [2]) and adapted it for use with Twisted?  (I know I could
> use the twisted preferred method of parent child hierarchies, but our
> application has a better fit with the route-based method used by
> Pylons, Django, Rails, etc)

Set isLeaf=True on the Resource, and then render() will get called for
all sub-paths, and at that point you can dispatch using one of those
libraries.

> 3) Is there a document anywhere that describes all the environment
> variables the user can get from the request and how to get to them?
>  (something like the environ section of the WSGI PEP [3])

Request objects do not provide any environment variables (that's an
operating system concept). They provide information about the HTTP
request. This includes the method, path, and HTTP headers sent by the
client. The list of instance variable on Request objects may be what you
want:

http://twistedmatrix.com/documents/current/api/twisted.web.http.Request.html

> 4) Are their any wrappers people have developed to make it a bit
> easier to use deferreds (in particular inlinecallbacks) in the
> handlers for twisted.web?  (I am considering just writing a wrapper
> myself that provides an interface similar to google app engine webapp
> [4] but wanted to check first so I don't reinvent something)

There's a branch of Twisted that implements this, hopefully it will
eventually be merged:
http://twistedmatrix.com/trac/ticket/3711




From itamar at itamarst.org  Mon Jun 14 09:43:31 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 14 Jun 2010 09:43:31 -0400
Subject: [Twisted-Python] twisted.web questions
In-Reply-To: <1276522707.1658.17.camel@blake>
References: <AANLkTikHnQMzvgyofceyd6OTUPtPpxim47PmgMEg-1qK@mail.gmail.com>
	<1276522707.1658.17.camel@blake>
Message-ID: <1276523011.1658.18.camel@blake>

On Mon, 2010-06-14 at 09:38 -0400, Itamar Turner-Trauring wrote:

> > 4) Are their any wrappers people have developed to make it a bit
> > easier to use deferreds (in particular inlinecallbacks) in the
> > handlers for twisted.web?  (I am considering just writing a wrapper
> > myself that provides an interface similar to google app engine webapp
> > [4] but wanted to check first so I don't reinvent something)
> 
> There's a branch of Twisted that implements this, hopefully it will
> eventually be merged:
> http://twistedmatrix.com/trac/ticket/3711

And Nevow also implements support for this, without changing Twisted
itself:

http://divmod.org/trac/wiki/DivmodNevow



From abierbaum at gmail.com  Mon Jun 14 11:28:18 2010
From: abierbaum at gmail.com (Allen Bierbaum)
Date: Mon, 14 Jun 2010 10:28:18 -0500
Subject: [Twisted-Python] twisted.web questions
In-Reply-To: <1276522707.1658.17.camel@blake>
References: <AANLkTikHnQMzvgyofceyd6OTUPtPpxim47PmgMEg-1qK@mail.gmail.com>
	<1276522707.1658.17.camel@blake>
Message-ID: <AANLkTinhEEJatNcZwyfLUrZ3fDj2srTxUDWbj5WQ8E76@mail.gmail.com>

On Mon, Jun 14, 2010 at 8:38 AM, Itamar Turner-Trauring <itamar at itamarst.org
> wrote:

> On Mon, 2010-06-14 at 08:22 -0500, Allen Bierbaum wrote:
>
> > 1) Is there any method to stream a large request (ex: PUT or POST with
> > file upload) into the system or does the entire body have to be loaded
> > into memory as part of the request?
>
> Very large requests get written to disk, rather than memory. This is
> still not ideal, streaming is obviously better - someone may be able to
> suggest how to do it until Twisted gets fixed.
>

That is unfortunate.  Do you know of an example that shows to get access to
that file or does it just show up as a file object in the request?


>
> > 2) Has anyone used an existing URL Routing system (ex: Routes [1],
> > Selector [2]) and adapted it for use with Twisted?  (I know I could
> > use the twisted preferred method of parent child hierarchies, but our
> > application has a better fit with the route-based method used by
> > Pylons, Django, Rails, etc)
>
> Set isLeaf=True on the Resource, and then render() will get called for
> all sub-paths, and at that point you can dispatch using one of those
> libraries.
>

I will have to try that.  I think it may have problems due to those systems
relying upon the WSGI interface and thus the environ dictionary.  I am
guessing I will have to hack them up a bit to make it work.


> > 3) Is there a document anywhere that describes all the environment
> > variables the user can get from the request and how to get to them?
> >  (something like the environ section of the WSGI PEP [3])
>
> Request objects do not provide any environment variables (that's an
> operating system concept). They provide information about the HTTP
> request. This includes the method, path, and HTTP headers sent by the
> client.


I mispoke.  I didn't mean the OS environment variables, I meant the
equivalent of the WSGI environ dictionary (the CGI environment).  The link
below looks like a great starting point to find them.


> The list of instance variable on Request objects may be what you
> want:
>
>
> http://twistedmatrix.com/documents/current/api/twisted.web.http.Request.html
>
> > 4) Are their any wrappers people have developed to make it a bit
> > easier to use deferreds (in particular inlinecallbacks) in the
> > handlers for twisted.web?  (I am considering just writing a wrapper
> > myself that provides an interface similar to google app engine webapp
> > [4] but wanted to check first so I don't reinvent something)
>
> There's a branch of Twisted that implements this, hopefully it will
> eventually be merged:
> http://twistedmatrix.com/trac/ticket/3711
>
>
Is there anything that is currently holding this up?  (ie. is the design on
this branch what will end up in the system or could it change dramatically?)

Thanks for all the answers.

-Allen


>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100614/938a714b/attachment.htm 

From itamar at itamarst.org  Mon Jun 14 11:56:56 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 14 Jun 2010 11:56:56 -0400 (EDT)
Subject: [Twisted-Python] twisted.web questions
In-Reply-To: <AANLkTinhEEJatNcZwyfLUrZ3fDj2srTxUDWbj5WQ8E76@mail.gmail.com>
References: <AANLkTikHnQMzvgyofceyd6OTUPtPpxim47PmgMEg-1qK@mail.gmail.com>
	<1276522707.1658.17.camel@blake>
	<AANLkTinhEEJatNcZwyfLUrZ3fDj2srTxUDWbj5WQ8E76@mail.gmail.com>
Message-ID: <26255.63.107.91.99.1276531016.squirrel@webmail.zoteca.com>

>> Very large requests get written to disk, rather than memory. This is
>> still not ideal, streaming is obviously better - someone may be able to
>> suggest how to do it until Twisted gets fixed.
>>
>
> That is unfortunate.  Do you know of an example that shows to get access
> to
> that file or does it just show up as a file object in the request?

It's transparent to the user, it shows up as file-like object in the Request.

>> There's a branch of Twisted that implements this, hopefully it will
>> eventually be merged:
>> http://twistedmatrix.com/trac/ticket/3711
>>
>>
> Is there anything that is currently holding this up?  (ie. is the design
> on
> this branch what will end up in the system or could it change
> dramatically?)

There are a bunch of review comments in the ticket. You could just write
your own until this is ready, I've done it a number of times and it's a
pretty small piece of code.



From jaroslaw.fedewicz at gmail.com  Mon Jun 14 14:59:39 2010
From: jaroslaw.fedewicz at gmail.com (Yaroslav Fedevych)
Date: Mon, 14 Jun 2010 21:59:39 +0300
Subject: [Twisted-Python] twisted.web questions
In-Reply-To: <26255.63.107.91.99.1276531016.squirrel@webmail.zoteca.com>
References: <AANLkTikHnQMzvgyofceyd6OTUPtPpxim47PmgMEg-1qK@mail.gmail.com>
	<1276522707.1658.17.camel@blake>
	<AANLkTinhEEJatNcZwyfLUrZ3fDj2srTxUDWbj5WQ8E76@mail.gmail.com>
	<26255.63.107.91.99.1276531016.squirrel@webmail.zoteca.com>
Message-ID: <AANLkTinOBCl54RNQLdhguqIYhLtOkocs7FeGl3TJQZtQ@mail.gmail.com>

On Mon, Jun 14, 2010 at 6:56 PM, Itamar Turner-Trauring
<itamar at itamarst.org> wrote:
>>> Very large requests get written to disk, rather than memory. This is
>>> still not ideal, streaming is obviously better - someone may be able to
>>> suggest how to do it until Twisted gets fixed.
>>>
>>
>> That is unfortunate. ?Do you know of an example that shows to get access
>> to
>> that file or does it just show up as a file object in the request?
>
> It's transparent to the user, it shows up as file-like object in the Request.
>

But while receiving, it won't block, will it?


From itamar at itamarst.org  Mon Jun 14 18:46:01 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 14 Jun 2010 18:46:01 -0400
Subject: [Twisted-Python] twisted.web questions
In-Reply-To: <AANLkTinOBCl54RNQLdhguqIYhLtOkocs7FeGl3TJQZtQ@mail.gmail.com>
References: <AANLkTikHnQMzvgyofceyd6OTUPtPpxim47PmgMEg-1qK@mail.gmail.com>
	<1276522707.1658.17.camel@blake>
	<AANLkTinhEEJatNcZwyfLUrZ3fDj2srTxUDWbj5WQ8E76@mail.gmail.com>
	<26255.63.107.91.99.1276531016.squirrel@webmail.zoteca.com>
	<AANLkTinOBCl54RNQLdhguqIYhLtOkocs7FeGl3TJQZtQ@mail.gmail.com>
Message-ID: <1276555561.1658.20.camel@blake>

On Mon, 2010-06-14 at 21:59 +0300, Yaroslav Fedevych wrote:
> On Mon, Jun 14, 2010 at 6:56 PM, Itamar Turner-Trauring
> <itamar at itamarst.org> wrote:
> >>> Very large requests get written to disk, rather than memory. This is
> >>> still not ideal, streaming is obviously better - someone may be able to
> >>> suggest how to do it until Twisted gets fixed.
> >>>
> >>
> >> That is unfortunate.  Do you know of an example that shows to get access
> >> to
> >> that file or does it just show up as a file object in the request?
> >
> > It's transparent to the user, it shows up as file-like object in the Request.
> >
> 
> But while receiving, it won't block, will it?

It will not block (unless your filesystem's storage blocks, which is
rare -- but does happen.)



From jml at mumak.net  Tue Jun 15 13:51:12 2010
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 15 Jun 2010 18:51:12 +0100
Subject: [Twisted-Python] Reminder: Twisted 10.1 scheduled for early June
In-Reply-To: <F02D0944-623D-4FBE-878E-F427131EDC0A@twistedmatrix.com>
References: <AANLkTikg-mJ7p865ALUL_-cTvEC8Spe57N5p7agczzcq@mail.gmail.com>
	<F02D0944-623D-4FBE-878E-F427131EDC0A@twistedmatrix.com>
Message-ID: <AANLkTilEXPUtVtDsrjaTLncMwvQUb9c8BmwiJ8DRWN9d@mail.gmail.com>

On Sun, May 30, 2010 at 10:28 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> On May 26, 2010, at 4:19 AM, Jonathan Lange wrote:
>
>> Hello all,
>>
>> I and my lovely assistant Glyph intend to cut a release of Twisted
>> 10.1 on the 5th and 6th of June. That's in eleven days.
>
> Yes.
>
> Please mark the date, everyone: your fate is sealed. ?Only 5 days remain.

Sigh. It didn't happen.

Nevertheless, Fate and I have arranged to meet this weekend, during
which time we shall dance together. Perhaps Twisted will be released
then.

jml


From jasonjwwilliams at gmail.com  Tue Jun 15 19:33:07 2010
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Tue, 15 Jun 2010 17:33:07 -0600
Subject: [Twisted-Python] Getting at the underlying issue in a
	DNSServerError failure.
Message-ID: <AANLkTil6pfZdQiKaxZF0BdrrzbXUFDtxgN9dlAHzVZQv@mail.gmail.com>

Hi Guys,

What is the best way to get at the underlying issue (i.e.
non-responsive name server, NXDOMAIN, SERVFAIL, etc.) when receiving a
twisted.names.error.DNSServerError?

I'm issuing a resolver.lookupNameservers() BTW.

The failure received by the errback generates this for
failure.getErrorMessage() : <twisted.names.dns.Message instance at
0x101272908>

Traceback prints: twisted.names.error.DNSServerError:
<twisted.names.dns.Message instance at 0x101272908>

So overall, not very specific. Any help is appreciated.

-J


From hatem.oraby at gmail.com  Wed Jun 16 00:56:04 2010
From: hatem.oraby at gmail.com (Hatem Oraby)
Date: Wed, 16 Jun 2010 07:56:04 +0300
Subject: [Twisted-Python] Announcing TwistedSim: A simulator for your
	Twisted application
Message-ID: <AANLkTimiGspKUiIfDf12ht_bJPcW6uQV9Z5aSEVeystR@mail.gmail.com>

Hello,

I'd like to share with you a project that I've been working on: TwistedSim
is a simulator/emulator that loads your Twisted applications and run then
under a simulated network.TwistedSim could save you a lot of developing time
and debugging time, TwistedSim offers you efficient and reproducible testing
environment.
Please check the project at http://code.google.com/p/twistedsim/

Your feedback and comments are highly appreciated. I would like to hear from
you.

Best Regards,
Oraby
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100616/46590e57/attachment.htm 

From jasonjwwilliams at gmail.com  Wed Jun 16 01:50:02 2010
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Tue, 15 Jun 2010 23:50:02 -0600
Subject: [Twisted-Python] Twisted Web, Unicode & request.write()
Message-ID: <AANLkTikdGJd6ffQapZy6V1MfIyF-NBaU8YbJMWyBnBOI@mail.gmail.com>

Hi Y'all,

What's the correct way to write out Unicode data to the client in
Twisted Web? request.write() throws a "Data must not be unicode".
Content-Type header is set with "; charset=utf-8" appended to the
content type.

-J


From radix at twistedmatrix.com  Wed Jun 16 02:13:49 2010
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 16 Jun 2010 01:13:49 -0500
Subject: [Twisted-Python] Twisted Web, Unicode & request.write()
In-Reply-To: <AANLkTikdGJd6ffQapZy6V1MfIyF-NBaU8YbJMWyBnBOI@mail.gmail.com>
References: <AANLkTikdGJd6ffQapZy6V1MfIyF-NBaU8YbJMWyBnBOI@mail.gmail.com>
Message-ID: <AANLkTik_h4xG-uYN01EHmJxgCgDaTKv4xft2WsNp2RSI@mail.gmail.com>

On Wed, Jun 16, 2010 at 12:50 AM, Jason J. W. Williams
<jasonjwwilliams at gmail.com> wrote:
> Hi Y'all,
>
> What's the correct way to write out Unicode data to the client in
> Twisted Web? request.write() throws a "Data must not be unicode".
> Content-Type header is set with "; charset=utf-8" appended to the
> content type.

Encode it to bytes with ustr.encode("utf-8") and then pass it to request.write.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/


From stephen at thorne.id.au  Wed Jun 16 02:16:40 2010
From: stephen at thorne.id.au (Stephen Thorne)
Date: Wed, 16 Jun 2010 16:16:40 +1000
Subject: [Twisted-Python] Twisted Web, Unicode & request.write()
In-Reply-To: <AANLkTikdGJd6ffQapZy6V1MfIyF-NBaU8YbJMWyBnBOI@mail.gmail.com>
References: <AANLkTikdGJd6ffQapZy6V1MfIyF-NBaU8YbJMWyBnBOI@mail.gmail.com>
Message-ID: <20100616061640.GA1910@thorne.id.au>

On 2010-06-15, Jason J. W. Williams wrote:
> Hi Y'all,
> 
> What's the correct way to write out Unicode data to the client in
> Twisted Web? request.write() throws a "Data must not be unicode".
> Content-Type header is set with "; charset=utf-8" appended to the
> content type.

If you say the charset utf-8, you should emit utf-8.

u'foo'.encode('utf-8') converts from a python unicode object to a str
encoded using the utf-8 codec.

-- 
Regards,
Stephen Thorne
Development Engineer
Netbox Blue


From jasonjwwilliams at gmail.com  Wed Jun 16 02:40:41 2010
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Wed, 16 Jun 2010 00:40:41 -0600
Subject: [Twisted-Python] Twisted Web, Unicode & request.write()
In-Reply-To: <20100616061640.GA1910@thorne.id.au>
References: <AANLkTikdGJd6ffQapZy6V1MfIyF-NBaU8YbJMWyBnBOI@mail.gmail.com>
	<20100616061640.GA1910@thorne.id.au>
Message-ID: <AANLkTimt7aOZatmhMm1qaxiEjngUqMYiEYrxD7f4rs4w@mail.gmail.com>

Thanks guys. I actually backed into that myself in the last hour. Was
just about to write back with the discovered correction. Makes sense.

-J

On Wed, Jun 16, 2010 at 12:16 AM, Stephen Thorne <stephen at thorne.id.au> wrote:
> On 2010-06-15, Jason J. W. Williams wrote:
>> Hi Y'all,
>>
>> What's the correct way to write out Unicode data to the client in
>> Twisted Web? request.write() throws a "Data must not be unicode".
>> Content-Type header is set with "; charset=utf-8" appended to the
>> content type.
>
> If you say the charset utf-8, you should emit utf-8.
>
> u'foo'.encode('utf-8') converts from a python unicode object to a str
> encoded using the utf-8 codec.
>
> --
> Regards,
> Stephen Thorne
> Development Engineer
> Netbox Blue
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From tom at t0mb.net  Wed Jun 16 03:02:53 2010
From: tom at t0mb.net (tom)
Date: Wed, 16 Jun 2010 08:02:53 +0100
Subject: [Twisted-Python] Getting at the underlying issue in
 a	DNSServerError failure.
In-Reply-To: <AANLkTil6pfZdQiKaxZF0BdrrzbXUFDtxgN9dlAHzVZQv@mail.gmail.com>
References: <AANLkTil6pfZdQiKaxZF0BdrrzbXUFDtxgN9dlAHzVZQv@mail.gmail.com>
Message-ID: <4C18771D.1070108@t0mb.net>

I would really like to know this too, but for DNSNameError instead (off 
the top of my head).  This is when using the LookupPointer() method.  It 
seems to return an error rather than a reverse DNS record if the forward 
DNS of the reverse DNS hostname doesn't match the original IP address.  
That's really not useful, but it seems to be the same way that GNU adns 
works, in python at least... which is a real pain to me as I've been 
trying to do 50K plus dns lookups tabulated with the IP, reverse DNS 
hostname, and forward DNS IP address of the reverse DNS in three 
columns.  I just seem to be getting lots of 'None's in my results..

In the end, I've had to use perl Net::DNS for reliable results after 
both twisted and python-adns failed to give me results, but I would much 
rather be using twisted if it could be made to work to my specification.

Cheers.  Tom.

Jason J. W. Williams wrote:
> Hi Guys,
>
> What is the best way to get at the underlying issue (i.e.
> non-responsive name server, NXDOMAIN, SERVFAIL, etc.) when receiving a
> twisted.names.error.DNSServerError?
>
> I'm issuing a resolver.lookupNameservers() BTW.
>
> The failure received by the errback generates this for
> failure.getErrorMessage() : <twisted.names.dns.Message instance at
> 0x101272908>
>
> Traceback prints: twisted.names.error.DNSServerError:
> <twisted.names.dns.Message instance at 0x101272908>
>
> So overall, not very specific. Any help is appreciated.
>
> -J
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>   



From jeandaniel.browne at gmail.com  Wed Jun 16 12:50:30 2010
From: jeandaniel.browne at gmail.com (Jean Daniel)
Date: Wed, 16 Jun 2010 18:50:30 +0200
Subject: [Twisted-Python] deferred as a Protocol class attribute,
	Protocol as class attribute 	of a Factory ...
Message-ID: <AANLkTik-a1oqTBp6JMEB9Q0w1pYLOyohiiAyU8Jf8o_A@mail.gmail.com>

Hello,

Reading the SMTP client tutorial[1], I do not see the impact of the
factory having a protocol defined as a class attribute. Especially
when here is a big fat warning [2] that I should actually understand
the inplications. My guess is that in this first case the protocol
methods do not need access to the protocol instance, maybe it is a
clear indication that the protocol is stateless, and there is a gain
ressource-wise since there is no instance created and maintained. But
I am not sure.

What are the implications of the protocol being a class attribute of
the factory?

Almost the same question: in the imapclient example [3], there is a
LineReceiver subclass hooked to stdio. The lineReceived callback willl
fire a callback added to an _class attribute_ deferred filled with a
user function. I think this design prevents two instances of the
LineReceiver subclass which would race on the class attribute
deferred.

What are the advantages of having defined the deferred at the class
level instead of at the instance level?

Thanks for your help,

[1]: http://twistedmatrix.com/documents/current/mail/tutorial/smtpclient/smtpclient.html#auto6

[2]: """Another minor change to note is that the protocol attribute is
now defined in the class definition, rather than tacked onto an
instance after one is created. This means it is a class attribute,
rather than an instance attribute, now, which makes no difference as
far as this example is concerned. There are circumstances in which the
difference is important: be sure you understand the implications of
each approach when creating your own factories. """


[3]: twisted/doc/mail/examples/imapclient.py in the sources and
http://twistedmatrix.com/documents/current/mail/examples/imap4client.py
on the web


From gxti at partiallystapled.com  Wed Jun 16 18:14:28 2010
From: gxti at partiallystapled.com (Michael Tharp)
Date: Wed, 16 Jun 2010 18:14:28 -0400
Subject: [Twisted-Python] deferred as a Protocol class attribute,
 Protocol as class attribute 	of a Factory ...
In-Reply-To: <AANLkTik-a1oqTBp6JMEB9Q0w1pYLOyohiiAyU8Jf8o_A@mail.gmail.com>
References: <AANLkTik-a1oqTBp6JMEB9Q0w1pYLOyohiiAyU8Jf8o_A@mail.gmail.com>
Message-ID: <4C194CC4.90000@partiallystapled.com>

On 06/16/2010 12:50 PM, Jean Daniel wrote:
> Hello,
>
> Reading the SMTP client tutorial[1], I do not see the impact of the
> factory having a protocol defined as a class attribute. Especially
> when here is a big fat warning [2] that I should actually understand
> the inplications. My guess is that in this first case the protocol
> methods do not need access to the protocol instance, maybe it is a
> clear indication that the protocol is stateless, and there is a gain
> ressource-wise since there is no instance created and maintained. But
> I am not sure.

This isn't storing a protocol instance, just the protocol class. It then 
instantiates that class in the buildProtocol() method. This is a common 
pattern that lets you override settings easily by subclassing.

> Almost the same question: in the imapclient example [3], there is a
> LineReceiver subclass hooked to stdio. The lineReceived callback willl
> fire a callback added to an _class attribute_ deferred filled with a
> user function. I think this design prevents two instances of the
> LineReceiver subclass which would race on the class attribute
> deferred.

This is also not storing an instance in a class variable. It simply has 
a 'default' value of None, which is overridden at the instance level in 
SimpleIMAP4ClientFactory.buildProtocol().

Instance variables always override class variables. Additionally, 
declaring a class variable has no effect on subsequent instance 
assignments (unless it's an attribute descriptor, but twisted doesn't 
use those). If all your initial instance values are immutable (like 
None) you can forgo having an __init__ method at all and simply declare 
them at the class level as was done here.


To answer your question in a hypothetical sense, no it would not make 
sense to store either of those things in a class variable.

-- m. tharp


From glyph at twistedmatrix.com  Wed Jun 16 19:08:55 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 16 Jun 2010 16:08:55 -0700
Subject: [Twisted-Python] Announcing TwistedSim: A simulator for your
	Twisted application
In-Reply-To: <AANLkTimiGspKUiIfDf12ht_bJPcW6uQV9Z5aSEVeystR@mail.gmail.com>
References: <AANLkTimiGspKUiIfDf12ht_bJPcW6uQV9Z5aSEVeystR@mail.gmail.com>
Message-ID: <5FA7DC4B-059B-4891-AB7B-2187FBF66A3C@twistedmatrix.com>

On Jun 15, 2010, at 9:56 PM, Hatem Oraby wrote:

> I'd like to share with you a project that I've been working on: TwistedSim is a simulator/emulator that loads your Twisted applications and run then under a simulated network.TwistedSim could save you a lot of developing time and debugging time, TwistedSim offers you efficient and reproducible testing environment.
> Please check the project at http://code.google.com/p/twistedsim/
> 
> Your feedback and comments are highly appreciated. I would like to hear from you.

Hi Oraby,

Thanks for providing a link to this!  I'll be sure to check it out later.

In the past, projects that begin with the name 'twisted <something>' have occasionally confused users, though, as the projects inside Twisted itself are called 'twisted <something>'.  A while ago, we started promoting the prefix 'tx' (see <https://launchpad.net/tx>) to mean "twisted extension", i.e. "this works with twisted, gets along well with Twisted", sort of like "py" is for "python".

I'm not a lawyer, but my vague understanding is that if you honor this request, it will make things easier for the Twisted project to secure trademark rights later on.  So, I hope that you will consider re-naming "twistedsim" to something else (might I suggest "txnetsim"?) so that it's easier for users to keep this straight.

Thanks again,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100616/b0e22f8a/attachment.htm 

From exarkun at twistedmatrix.com  Wed Jun 16 22:06:06 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 17 Jun 2010 02:06:06 -0000
Subject: [Twisted-Python] Getting at the underlying issue in
	a	DNSServerError failure.
In-Reply-To: <AANLkTil6pfZdQiKaxZF0BdrrzbXUFDtxgN9dlAHzVZQv@mail.gmail.com>
References: <AANLkTil6pfZdQiKaxZF0BdrrzbXUFDtxgN9dlAHzVZQv@mail.gmail.com>
Message-ID: <20100617020606.2412.2141663339.divmod.xquotient.36@localhost.localdomain>

On 15 Jun, 11:33 pm, jasonjwwilliams at gmail.com wrote:
>Hi Guys,
>
>What is the best way to get at the underlying issue (i.e.
>non-responsive name server, NXDOMAIN, SERVFAIL, etc.) when receiving a
>twisted.names.error.DNSServerError?

DNSServerError is documented as indicating ESERVER (I think that's what 
"SERVFAIL" means in your list).  So that's the underlying issue.  Are 
you encountering it in other circumstances?

Jean-Paul


From jasonjwwilliams at gmail.com  Wed Jun 16 22:55:51 2010
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Wed, 16 Jun 2010 20:55:51 -0600
Subject: [Twisted-Python] Getting at the underlying issue in a
	DNSServerError failure.
In-Reply-To: <20100617020606.2412.2141663339.divmod.xquotient.36@localhost.localdomain>
References: <AANLkTil6pfZdQiKaxZF0BdrrzbXUFDtxgN9dlAHzVZQv@mail.gmail.com>
	<20100617020606.2412.2141663339.divmod.xquotient.36@localhost.localdomain>
Message-ID: <AANLkTilXHp7_WS5ds_tgTQ1iQib_umoImHJiG9fVs5F7@mail.gmail.com>

Hi Jean-Paul,

You're right DNSServerError = SERVFAIL. DNSNameError = NXDOMAIN

The object reference in the description of the thrown exception left
some uncertainty regarding what the error really was saying.

-J

On Wed, Jun 16, 2010 at 8:06 PM,  <exarkun at twistedmatrix.com> wrote:
> On 15 Jun, 11:33 pm, jasonjwwilliams at gmail.com wrote:
>>Hi Guys,
>>
>>What is the best way to get at the underlying issue (i.e.
>>non-responsive name server, NXDOMAIN, SERVFAIL, etc.) when receiving a
>>twisted.names.error.DNSServerError?
>
> DNSServerError is documented as indicating ESERVER (I think that's what
> "SERVFAIL" means in your list). ?So that's the underlying issue. ?Are
> you encountering it in other circumstances?
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From pairus at gmail.com  Thu Jun 17 10:33:52 2010
From: pairus at gmail.com (Bruno Frare)
Date: Thu, 17 Jun 2010 11:33:52 -0300
Subject: [Twisted-Python] Start with QTReactor
Message-ID: <AANLkTikYToax1RYNBORENvW7VHdxXi3ZQWWn1-KAWfdS@mail.gmail.com>

Hi,

I'm trying to work with QTReactor, but don't have success!

I look on site http://code.tarbox.org/qtreactor, but the link is broken.

Someone have a tutorial to begin to work with it?

thanks,
Bruno

-- 
________________
Bruno Frare
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100617/b9a0de4e/attachment.htm 

From wertiges.produkt at googlemail.com  Thu Jun 17 11:37:17 2010
From: wertiges.produkt at googlemail.com (Stefan Reich)
Date: Thu, 17 Jun 2010 17:37:17 +0200
Subject: [Twisted-Python] Punching a firewall with Twisted?
Message-ID: <4C1A412D.8090307@googlemail.com>

Dear 'Twisted' experts!

I have a quick question that I am sure one of you guys can answer easily:

What I want to do is open an incoming port on the router that connects 
my computer to the Internet. More precisely, I want my Python app do 
that automatically.

In other words, this is about punching a hole into a firewall.

I know that this is possible because there are applications that do 
that. Deluge does this, and Deluge uses Twisted. So I have tried to find 
out how/where Deluge tells Twisted to do this, but the Deluge sources 
are quite sizey, and I haven't found that particular needle in the 
haystack yet.

So, can one of you people enlighten me here? :)

Thanks & have a nice day!
Stefan


From glyph at twistedmatrix.com  Thu Jun 17 12:21:16 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 17 Jun 2010 09:21:16 -0700
Subject: [Twisted-Python] Punching a firewall with Twisted?
In-Reply-To: <4C1A412D.8090307@googlemail.com>
References: <4C1A412D.8090307@googlemail.com>
Message-ID: <F4A994FD-CAA6-4F8D-9F40-E7AC80F58A8A@twistedmatrix.com>


On Jun 17, 2010, at 8:37 AM, Stefan Reich wrote:

> Dear 'Twisted' experts!
> 
> I have a quick question that I am sure one of you guys can answer easily:
> 
> What I want to do is open an incoming port on the router that connects 
> my computer to the Internet. More precisely, I want my Python app do 
> that automatically.
> 
> In other words, this is about punching a hole into a firewall.
> 
> I know that this is possible because there are applications that do 
> that. Deluge does this, and Deluge uses Twisted. So I have tried to find 
> out how/where Deluge tells Twisted to do this, but the Deluge sources 
> are quite sizey, and I haven't found that particular needle in the 
> haystack yet.
> 
> So, can one of you people enlighten me here? :)
> 
> Thanks & have a nice day!
> Stefan

I'm not sure about Deluge, but <http://divmod.org/trac/wiki/DivmodVertex> does some NAT hole-punching.  It does it via sending UDP packets though, not by communicating directly with your router.

Good luck; this is always an interesting problem ;).

-glyph



From wertiges.produkt at googlemail.com  Thu Jun 17 12:37:32 2010
From: wertiges.produkt at googlemail.com (Stefan Reich)
Date: Thu, 17 Jun 2010 18:37:32 +0200
Subject: [Twisted-Python] Punching a firewall with Twisted?
In-Reply-To: <F4A994FD-CAA6-4F8D-9F40-E7AC80F58A8A@twistedmatrix.com>
References: <4C1A412D.8090307@googlemail.com>
	<F4A994FD-CAA6-4F8D-9F40-E7AC80F58A8A@twistedmatrix.com>
Message-ID: <4C1A4F4C.8000706@googlemail.com>

Hi Glyph! (Wait, is that really a first name...? :))
> I'm not sure about Deluge, but <http://divmod.org/trac/wiki/DivmodVertex> does some NAT hole-punching.  It does it via sending UDP packets though, not by communicating directly with your router.
>   
Yeah, I found that too... it looks quite interesting, but as you say, it 
is UDP-based. I know that there is a working TCP-solution. As I said, 
Deluge does it, and for example, the original Bittorrent client does it too.

I actually verified this on my machine: With a trick, I can exploit 
these clients for my purposes.

I open a server socket in my own program on port 15667. Then I start 
Bittorrent. It complains because it can't open the server socket - but 
it does open the firewall, and the firewall stays open as long as the 
application runs. So voila, I can now access my server from outside. It 
is actually open right now, you can try if you like:

    telnet 188.193.214.124 15667

:]
> Good luck; this is always an interesting problem ;).
>   
Yeah... it's actually something that begins to really annoy me. Why are 
we put behind these firewalls? And why is it so complicated to open 
ports on them? It shouldn't be. Let's change that. We have the means!

Every internet user should be able to run a server. This is my credo!

Cheers,
Stefan


From lasizoillo at gmail.com  Thu Jun 17 12:54:35 2010
From: lasizoillo at gmail.com (lasizoillo)
Date: Thu, 17 Jun 2010 18:54:35 +0200
Subject: [Twisted-Python] Punching a firewall with Twisted?
In-Reply-To: <4C1A412D.8090307@googlemail.com>
References: <4C1A412D.8090307@googlemail.com>
Message-ID: <AANLkTikvfPKGXMmnvakNezIbMPYhnpPSErjn-QDJLXN5@mail.gmail.com>

2010/6/17 Stefan Reich <wertiges.produkt at googlemail.com>:
> Dear 'Twisted' experts!
>
> I have a quick question that I am sure one of you guys can answer easily:
>
> What I want to do is open an incoming port on the router that connects
> my computer to the Internet. More precisely, I want my Python app do
> that automatically.
>
> In other words, this is about punching a hole into a firewall.
>
> I know that this is possible because there are applications that do
> that. Deluge does this, and Deluge uses Twisted. So I have tried to find
> out how/where Deluge tells Twisted to do this, but the Deluge sources
> are quite sizey, and I haven't found that particular needle in the
> haystack yet.
>
> So, can one of you people enlighten me here? :)
>


I don't know if this is Deluge's method, but sounds interesting:
http://samy.pl/natpin/?port=80

If you don't want see deluge code, maybe you want use a sniffer.
Wireshark is great for these things ;-)
http://www.wireshark.org/

Regards,
Javi


From maarten at treewalker.org  Thu Jun 17 12:59:16 2010
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Thu, 17 Jun 2010 18:59:16 +0200
Subject: [Twisted-Python] Punching a firewall with Twisted?
In-Reply-To: <4C1A4F4C.8000706@googlemail.com>
References: <4C1A412D.8090307@googlemail.com>
	<F4A994FD-CAA6-4F8D-9F40-E7AC80F58A8A@twistedmatrix.com>
	<4C1A4F4C.8000706@googlemail.com>
Message-ID: <201006171859.16618.maarten@treewalker.org>

On Thursday 17 June 2010, Stefan Reich wrote:

> Yeah, I found that too... it looks quite interesting, but as you say, it
> is UDP-based. I know that there is a working TCP-solution. As I said,
> Deluge does it, and for example, the original Bittorrent client does it
> too.

Maybe it uses UPNP to tell the router which ports to open?

As far as I know, there are no hole-punching techniques for TCP like there 
are for UDP. So the only way to get a port forward is to configure the 
router, manually or through an API like UPNP.

Bye,
		Maarten


From foom at fuhm.net  Thu Jun 17 14:35:08 2010
From: foom at fuhm.net (James Y Knight)
Date: Thu, 17 Jun 2010 14:35:08 -0400
Subject: [Twisted-Python] Punching a firewall with Twisted?
In-Reply-To: <201006171859.16618.maarten@treewalker.org>
References: <4C1A412D.8090307@googlemail.com>
	<F4A994FD-CAA6-4F8D-9F40-E7AC80F58A8A@twistedmatrix.com>
	<4C1A4F4C.8000706@googlemail.com>
	<201006171859.16618.maarten@treewalker.org>
Message-ID: <442E5C25-08A3-4392-9011-C716CD0C8075@fuhm.net>

On Jun 17, 2010, at 12:59 PM, Maarten ter Huurne wrote:
> Maybe it uses UPNP to tell the router which ports to open?
>
> As far as I know, there are no hole-punching techniques for TCP like  
> there
> are for UDP. So the only way to get a port forward is to configure the
> router, manually or through an API like UPNP.

Yes, many bittorrent clients use UPNP and/or NAT-PMP to open a hole in  
the firewall.

This will work for most users of home routers, but not other NAT  
scenarios.

I'm just waiting for the kernel patch which makes socket()/bind()  
automatically send a UPNP/NAT-PMP to the router to open the port. :)

James



From wertiges.produkt at googlemail.com  Thu Jun 17 14:53:00 2010
From: wertiges.produkt at googlemail.com (Stefan Reich)
Date: Thu, 17 Jun 2010 20:53:00 +0200
Subject: [Twisted-Python] Punching a firewall with (or without) Twisted -
	the plot thickens
In-Reply-To: <AANLkTikvfPKGXMmnvakNezIbMPYhnpPSErjn-QDJLXN5@mail.gmail.com>
References: <4C1A412D.8090307@googlemail.com>
	<AANLkTikvfPKGXMmnvakNezIbMPYhnpPSErjn-QDJLXN5@mail.gmail.com>
Message-ID: <4C1A6F0C.4010409@googlemail.com>

lasizoillo wrote:
> I don't know if this is Deluge's method, but sounds interesting:
> http://samy.pl/natpin/?port=80
>   
Hm. That's another kind of hack, and it didn't work for me.
> If you don't want see deluge code, maybe you want use a sniffer.
> Wireshark is great for these things ;-)
> http://www.wireshark.org/
>   
Wireshark! What a nice tool that wasn't on my radar before. Thanks for 
this, it really helped.

Using Wireshark, I found out that both Bittorrent and Deluge talk to the 
gateway via UPNP for opening the port. It all works over HTTP, so it's 
really easy to see what's going on.

These are the steps:

1. Find out the gateway IP (192.168.0.1 or some such)

2. GET http://{gateway}/desc.xml. This makes the gateway print some 
information about itself (make & model and so on). Not sure why this is 
needed. Maybe the protocol is different for different gateways. Or to 
make sure that there is a gateway at all. Or maybe there is some detail 
information in there that is needed for the next steps.

3. Also sent to the gateway: POST /upnp/control3 with some XML/SOAP data 
containing a command called AddPortMapping.

It looks really easy, like you could reprogram this in a few lines, with 
a SOAP library, or even just manual XML. There's also a command called 
DeletePortMapping for proper cleanup.

And it seems like Twisted may actually not even be involved in Deluge's 
port opening code.

Ah. I'm really quite satisfied. I heard that there are tricks to open 
firewalls (Skype's been doing this for ages), but I didn't know that 
there is such an elegant solution.

Cheers and thanks for the hints,
Stefan


From zookog at gmail.com  Thu Jun 17 15:16:23 2010
From: zookog at gmail.com (Zooko O'Whielacronx)
Date: Thu, 17 Jun 2010 13:16:23 -0600
Subject: [Twisted-Python] Punching a firewall with (or without) Twisted
	- the plot thickens
In-Reply-To: <4C1A6F0C.4010409@googlemail.com>
References: <4C1A412D.8090307@googlemail.com>
	<AANLkTikvfPKGXMmnvakNezIbMPYhnpPSErjn-QDJLXN5@mail.gmail.com>
	<4C1A6F0C.4010409@googlemail.com>
Message-ID: <AANLkTikr3Xa_cZJa_3_mtQ31dPV4r17KCrSj6y516LOL@mail.gmail.com>

Coincidentally there's been some talk about this over on
tahoe-dev at tahoe-lafs.org:

http://tahoe-lafs.org/pipermail/tahoe-dev/2010-June/004469.html

Tahoe-LAFS is a distributed storage system which uses Twisted. Some
people think there aren't enough routers that implement UPnP well
enough to make it worthwhile. Shawn Willden posted some code to the
tahoe-dev mailing list showing how to do it using "miniupnp". jrydberg
posted a link to the Tahoe-LAFS trac ticket to his Python NAT-PMP
implementation.

Regards,

Zooko


From foom at fuhm.net  Thu Jun 17 17:04:15 2010
From: foom at fuhm.net (James Y Knight)
Date: Thu, 17 Jun 2010 17:04:15 -0400
Subject: [Twisted-Python] Punching a firewall with (or without) Twisted
	- the plot thickens
In-Reply-To: <AANLkTikr3Xa_cZJa_3_mtQ31dPV4r17KCrSj6y516LOL@mail.gmail.com>
References: <4C1A412D.8090307@googlemail.com>
	<AANLkTikvfPKGXMmnvakNezIbMPYhnpPSErjn-QDJLXN5@mail.gmail.com>
	<4C1A6F0C.4010409@googlemail.com>
	<AANLkTikr3Xa_cZJa_3_mtQ31dPV4r17KCrSj6y516LOL@mail.gmail.com>
Message-ID: <2CA9F448-FB2A-4FE4-B3A2-C0C6E2F4DB45@fuhm.net>


On Jun 17, 2010, at 3:16 PM, Zooko O'Whielacronx wrote:
> Some
> people think there aren't enough routers that implement UPnP well
> enough to make it worthwhile

Doesn't *every* home router purchased in the last 5 years support one  
of UPnP or NAT-PMP? That's been my experience, at least.

James


From stephen at thorne.id.au  Thu Jun 17 20:27:00 2010
From: stephen at thorne.id.au (Stephen Thorne)
Date: Fri, 18 Jun 2010 10:27:00 +1000
Subject: [Twisted-Python] Punching a firewall with (or without) Twisted
 - the plot thickens
In-Reply-To: <2CA9F448-FB2A-4FE4-B3A2-C0C6E2F4DB45@fuhm.net>
References: <4C1A412D.8090307@googlemail.com>
	<AANLkTikvfPKGXMmnvakNezIbMPYhnpPSErjn-QDJLXN5@mail.gmail.com>
	<4C1A6F0C.4010409@googlemail.com>
	<AANLkTikr3Xa_cZJa_3_mtQ31dPV4r17KCrSj6y516LOL@mail.gmail.com>
	<2CA9F448-FB2A-4FE4-B3A2-C0C6E2F4DB45@fuhm.net>
Message-ID: <20100618002700.GB20639@thorne.id.au>

On 2010-06-17, James Y Knight wrote:
> On Jun 17, 2010, at 3:16 PM, Zooko O'Whielacronx wrote:
> > Some
> > people think there aren't enough routers that implement UPnP well
> > enough to make it worthwhile
> 
> Doesn't *every* home router purchased in the last 5 years support one  
> of UPnP or NAT-PMP? That's been my experience, at least.

Not all of them.

More to the point, I'm not aware of any corporate routers that support these
things. It's too much of a security risk to be able to have arbitary machines
on your LAN set up port forwards.

-- 
Regards,
Stephen Thorne
Development Engineer
Netbox Blue


From jasonjwwilliams at gmail.com  Thu Jun 17 20:36:51 2010
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Thu, 17 Jun 2010 18:36:51 -0600
Subject: [Twisted-Python] Twisted Names too many open files...resolv.conf
Message-ID: <AANLkTilqAawa_hCxYcr3HgHaJJ9uApygHnd8dsbgGFQo@mail.gmail.com>

Hi Guys,

Is there anyway to prevent twisted.names.client.createResolver() from
creating a resolvconf resolver, when servers= is passed?

The use here doesn't need the resolv.conf resolvers (and actually
really doesn't want them). What appears to be occurring is that
repeated use of createResolver() exhausts the number of allowed open
files because resolv.conf is never closed:

exceptions.IOError: [Errno 24] Too many open files: '/etc/resolv.conf'

Any advice is greatly appreciated.

-J


From exarkun at twistedmatrix.com  Thu Jun 17 21:41:54 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 18 Jun 2010 01:41:54 -0000
Subject: [Twisted-Python] Twisted Names too many open files...resolv.conf
In-Reply-To: <AANLkTilqAawa_hCxYcr3HgHaJJ9uApygHnd8dsbgGFQo@mail.gmail.com>
References: <AANLkTilqAawa_hCxYcr3HgHaJJ9uApygHnd8dsbgGFQo@mail.gmail.com>
Message-ID: <20100618014154.2412.1216951132.divmod.xquotient.93@localhost.localdomain>

On 12:36 am, jasonjwwilliams at gmail.com wrote:
>Hi Guys,
>
>Is there anyway to prevent twisted.names.client.createResolver() from
>creating a resolvconf resolver, when servers= is passed?
>
>The use here doesn't need the resolv.conf resolvers (and actually
>really doesn't want them). What appears to be occurring is that
>repeated use of createResolver() exhausts the number of allowed open
>files because resolv.conf is never closed:
>
>exceptions.IOError: [Errno 24] Too many open files: '/etc/resolv.conf'

This doesn't mean resolv.conf is never closed.  It just means you've 
already run into your open file limit when something tried to open 
resolv.conf.

You didn't mention which version of Twisted you're using.  Perhaps 
you're running in to #970 (fixed in 10.0).

But if you just want to use a particular server, then maybe you want to 
instantiate twisted.names.client.Resolver directly, rather than calling 
createResolver.

Jean-Paul


From glyph at twistedmatrix.com  Fri Jun 18 00:49:41 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 17 Jun 2010 21:49:41 -0700
Subject: [Twisted-Python] Punching a firewall with Twisted?
In-Reply-To: <4C1A4F4C.8000706@googlemail.com>
References: <4C1A412D.8090307@googlemail.com>
	<F4A994FD-CAA6-4F8D-9F40-E7AC80F58A8A@twistedmatrix.com>
	<4C1A4F4C.8000706@googlemail.com>
Message-ID: <3B6BCA91-CE20-4280-8747-77F4CB759748@twistedmatrix.com>


On Jun 17, 2010, at 9:37 AM, Stefan Reich wrote:

>> I'm not sure about Deluge, but <http://divmod.org/trac/wiki/DivmodVertex> does some NAT hole-punching.  It does it via sending UDP packets though, not by communicating directly with your router.
>> 
> Yeah, I found that too... it looks quite interesting, but as you say, it 
> is UDP-based. I know that there is a working TCP-solution. As I said, 
> Deluge does it, and for example, the original Bittorrent client does it too.

For what it's worth, Vertex includes an *implementation* of TCP, on top of UDP instead of IP.  You can run any Twisted stream-based protocol with Vertex, you don't need to send UDP datagrams around.

(In fact, Vertex _only_ provides a stream-based transport; the UDP part is an implementation detail.  If possible, vertex will try to use TCP first, and could be modified to use a techniques such as the ones described in <http://www.brynosaurus.com/pub/net/p2pnat/> section 4 to speak real TCP instead.)

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100617/ac367c8a/attachment.htm 

From glyph at twistedmatrix.com  Fri Jun 18 01:32:34 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 17 Jun 2010 22:32:34 -0700
Subject: [Twisted-Python] Reminder: Twisted 10.1 scheduled for early June
In-Reply-To: <AANLkTilEXPUtVtDsrjaTLncMwvQUb9c8BmwiJ8DRWN9d@mail.gmail.com>
References: <AANLkTikg-mJ7p865ALUL_-cTvEC8Spe57N5p7agczzcq@mail.gmail.com>
	<F02D0944-623D-4FBE-878E-F427131EDC0A@twistedmatrix.com>
	<AANLkTilEXPUtVtDsrjaTLncMwvQUb9c8BmwiJ8DRWN9d@mail.gmail.com>
Message-ID: <8CA4BC9C-BBB3-4F8B-8744-F965DAE85963@twistedmatrix.com>


On Jun 15, 2010, at 10:51 AM, Jonathan Lange wrote:

> Nevertheless, Fate and I have arranged to meet this weekend, during
> which time we shall dance together. Perhaps Twisted will be released
> then.

Good luck.

Sadly I'm probably going to be on a plane at the time, so please let me know if there's release-related stuff that could be done before or afterwards.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100617/81e742b9/attachment.htm 

From bszabolcs at gmail.com  Fri Jun 18 06:36:25 2010
From: bszabolcs at gmail.com (Balogh Szabolcs)
Date: Fri, 18 Jun 2010 13:36:25 +0300
Subject: [Twisted-Python] Multiple clients
Message-ID: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>

Hy,

Can somebody send me a small example how to use multiple clients at same
time? For example to connect to 3 different IMAP server. I need this because
I'm working on an email client engine. I can connect to POP/IMAP/SMTP server
to download and send messages, but I have created those methods separated,
and each time when I check for new messages or send a message I use
reactor.run() and reactor.stop(). But calling it multiple times is a
problem. So I need something:
 - when I press button1, the application checks for new messages on POP
server.
 - when I press button2, the application checks for new messages on IMAP
server.

I know how to check for messages on IMAP/POP server, but I don't know how to
do it periodically with twisted...


I hope you understand what I'm trying to explain :}}


Thanks in advance
Szabolcs Balogh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100618/0ae92e3e/attachment.htm 

From exarkun at twistedmatrix.com  Fri Jun 18 09:01:02 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 18 Jun 2010 13:01:02 -0000
Subject: [Twisted-Python] Multiple clients
In-Reply-To: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>
References: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>
Message-ID: <20100618130102.2412.1013851242.divmod.xquotient.96@localhost.localdomain>

On 10:36 am, bszabolcs at gmail.com wrote:
>Hy,
>
>Can somebody send me a small example how to use multiple clients at 
>same
>time? For example to connect to 3 different IMAP server. I need this 
>because
>I'm working on an email client engine. I can connect to POP/IMAP/SMTP 
>server
>to download and send messages, but I have created those methods 
>separated,
>and each time when I check for new messages or send a message I use
>reactor.run() and reactor.stop(). But calling it multiple times is a
>problem.

Why?
>So I need something:
>- when I press button1, the application checks for new messages on POP
>server.
>- when I press button2, the application checks for new messages on IMAP
>server.

How about:

  def onbutton1(self):
      checkPOP()

  def onbutton2(self):
      checkIMAP()
>
>I know how to check for messages on IMAP/POP server, but I don't know 
>how to
>do it periodically with twisted...

Periodically as in "once every N seconds"?  Check out reactor.callLater 
or twisted.internet.task.LoopingCall.

Jean-Paul


From bszabolcs at gmail.com  Fri Jun 18 10:34:08 2010
From: bszabolcs at gmail.com (Szabolcs Balogh)
Date: Fri, 18 Jun 2010 17:34:08 +0300
Subject: [Twisted-Python] Multiple clients
In-Reply-To: <20100618130102.2412.1013851242.divmod.xquotient.96@localhost.localdomain>
References: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>
	<20100618130102.2412.1013851242.divmod.xquotient.96@localhost.localdomain>
Message-ID: <201006181734.08757.bszabolcs@gmail.com>

I have used the following code, which is working until I called it multiple 
time:

class ImapProtocol(twisted.mail.imap4.IMAP4Client):

	...
	implementation
	...


class ImapFactory(twisted.internet.protocol.ClientFactory):

    def __init__(self, account):

        self.account = account
        self.deferred = twisted.internet.defer.Deferred()
        
    self.protocol = ImapProtocol

    def clientConnectionFailed(self, connection, reason):
        """
        Called when the client has failed to connect
        """

        self.deferred.errback(reason)


class ImapClient(gobject.GObject):

    def __init__(self, account):

        super(ImapClient, self).__init__()

        self.account = account
        self.host = self.account.get_server_address()
        self.port = self.account.get_server_port()
        self.ssl = self.account.get_use_ssl()

    def got_mailbox_list(self, result):

        twisted.internet.reactor.stop()

    def handle_error(self, error):

        twisted.internet.reactor.stop()

    def get_mailbox_list(self):
        """
        Get the list of existing mailboxes.
        """

        imapfactory = ImapFactory(self.account, self.LIST_MAILBOX)
        imapfactory.deferred.addCallback(self.got_mailbox_list)
        imapfactory.deferred.addErrback(self.handle_error)
        if self.ssl:
            # Using SSL for encrypted connections
            contextfactory = twisted.internet.ssl.ClientContextFactory()
            twisted.internet.reactor.connectSSL(self.host, self.port, 
                                        imapfactory,  contextfactory, 4)
        else:
            # Server doesn't require SSL
            twisted.internet.reactor.connectTCP(self.host, self.port, 
                                                imapfactory, 4)

        twisted.internet.reactor.run()



I call it in the following way:

        imap_client = imapclient.ImapClient(account)
        imap_client.get_mailbox_list()

If I call it only once, it executes successfully, but if I call it twice it 
get blocks and never finishes...

So how can I start the reactor and use the connectSSL/connectTCP methods 
multiple times? How to add new clients to an existing reactor?


On Friday 18 June 2010 16:01:02 exarkun at twistedmatrix.com wrote:
> On 10:36 am, bszabolcs at gmail.com wrote:
> >Hy,
> >
> >Can somebody send me a small example how to use multiple clients at
> >same
> >time? For example to connect to 3 different IMAP server. I need this
> >because
> >I'm working on an email client engine. I can connect to POP/IMAP/SMTP
> >server
> >to download and send messages, but I have created those methods
> >separated,
> >and each time when I check for new messages or send a message I use
> >reactor.run() and reactor.stop(). But calling it multiple times is a
> >problem.
> 
> Why?
> 
> >So I need something:
> >- when I press button1, the application checks for new messages on POP
> >server.
> >- when I press button2, the application checks for new messages on IMAP
> >server.
> 
> How about:
> 
>   def onbutton1(self):
>       checkPOP()
> 
>   def onbutton2(self):
>       checkIMAP()
> 
> >I know how to check for messages on IMAP/POP server, but I don't know
> >how to
> >do it periodically with twisted...
> 
> Periodically as in "once every N seconds"?  Check out reactor.callLater
> or twisted.internet.task.LoopingCall.
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From p.mayers at imperial.ac.uk  Fri Jun 18 10:49:27 2010
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 18 Jun 2010 15:49:27 +0100
Subject: [Twisted-Python] Multiple clients
In-Reply-To: <201006181734.08757.bszabolcs@gmail.com>
References: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>	<20100618130102.2412.1013851242.divmod.xquotient.96@localhost.localdomain>
	<201006181734.08757.bszabolcs@gmail.com>
Message-ID: <4C1B8777.5020405@imperial.ac.uk>

On 18/06/10 15:34, Szabolcs Balogh wrote:
>      def get_mailbox_list(self):
>          twisted.internet.reactor.run()
>

The reactor isn't restartable. You can only start it once.


From bszabolcs at gmail.com  Fri Jun 18 11:25:00 2010
From: bszabolcs at gmail.com (Szabolcs Balogh)
Date: Fri, 18 Jun 2010 18:25:00 +0300
Subject: [Twisted-Python] Multiple clients
In-Reply-To: <4C1B8777.5020405@imperial.ac.uk>
References: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>
	<201006181734.08757.bszabolcs@gmail.com>
	<4C1B8777.5020405@imperial.ac.uk>
Message-ID: <201006181825.01210.bszabolcs@gmail.com>

On Friday 18 June 2010 17:49:27 Phil Mayers wrote:
> On 18/06/10 15:34, Szabolcs Balogh wrote:
> >      def get_mailbox_list(self):
> >          twisted.internet.reactor.run()
> 
> The reactor isn't restartable. You can only start it once.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

Than how can I start checking for messages for different accounts (When I have 
finished checking the messages for the first account to start checking for the 
next account, and so on...)?



From jasonjwwilliams at gmail.com  Fri Jun 18 12:15:32 2010
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Fri, 18 Jun 2010 10:15:32 -0600
Subject: [Twisted-Python] Multiple clients
In-Reply-To: <201006181825.01210.bszabolcs@gmail.com>
References: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>
	<201006181734.08757.bszabolcs@gmail.com>
	<4C1B8777.5020405@imperial.ac.uk>
	<201006181825.01210.bszabolcs@gmail.com>
Message-ID: <AANLkTinuToZDPGtDNSHRpPaK5PKwZToel0kPe9UbF8DE@mail.gmail.com>

Couldn't you use callLater to fire the first account check every N
interval and then just attach the subsequent accounts for that
interval as callbacks to the first check inside your callLater func?

-J

On Fri, Jun 18, 2010 at 9:25 AM, Szabolcs Balogh <bszabolcs at gmail.com> wrote:
> On Friday 18 June 2010 17:49:27 Phil Mayers wrote:
>> On 18/06/10 15:34, Szabolcs Balogh wrote:
>> > ? ? ?def get_mailbox_list(self):
>> > ? ? ? ? ?twisted.internet.reactor.run()
>>
>> The reactor isn't restartable. You can only start it once.
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> Than how can I start checking for messages for different accounts (When I have
> finished checking the messages for the first account to start checking for the
> next account, and so on...)?
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From glyph at twistedmatrix.com  Fri Jun 18 12:24:54 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 18 Jun 2010 09:24:54 -0700
Subject: [Twisted-Python] Multiple clients
In-Reply-To: <201006181825.01210.bszabolcs@gmail.com>
References: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>
	<201006181734.08757.bszabolcs@gmail.com>
	<4C1B8777.5020405@imperial.ac.uk>
	<201006181825.01210.bszabolcs@gmail.com>
Message-ID: <9BDB6D83-D992-441A-9AB7-E82EDE7DDCBF@twistedmatrix.com>


On Jun 18, 2010, at 8:25 AM, Szabolcs Balogh wrote:

> Than how can I start checking for messages for different accounts (When I have 
> finished checking the messages for the first account to start checking for the 
> next account, and so on...)?

The whole *point* of the "reactor" is to allow multiple connections (and timed calls) to be serviced simultaneously.

When you have "finished checking messages" for the first account, presumably there is a callback of some kind; most likely 'connectionLost()'.  In connectionLost, you can just call connectTCP again with a protocol factory pointed at the second account.

This is actually a FAQ:

<http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#HowdoImakeTwistedtalktomultipleclientsconnecttomultipleservers>

Hopefully this helps.

This is a hard question to answer in a way where the next asker will actually find the answer, since the answer is really "just call a method", and the asker needs to understand that they can call any of these methods at any time.  If you have any idea as to how the FAQ could be improved so that you might have found your answer while searching around, please let us know :).  For example: the way you phrased your requirement here, "When I have done X, start doing X", even *sounds* like an event-driven program - 'def iHaveFinishedChecking(self): next.startChecking()' - so you were clearly on the right track.  Why did you think you needed to run the reactor again in order to accomplish this?

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100618/169868d7/attachment.htm 

From p.mayers at imperial.ac.uk  Fri Jun 18 12:46:39 2010
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 18 Jun 2010 17:46:39 +0100
Subject: [Twisted-Python] Multiple clients
In-Reply-To: <201006181825.01210.bszabolcs@gmail.com>
References: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>	<201006181734.08757.bszabolcs@gmail.com>	<4C1B8777.5020405@imperial.ac.uk>
	<201006181825.01210.bszabolcs@gmail.com>
Message-ID: <4C1BA2EF.8070207@imperial.ac.uk>

On 18/06/10 16:25, Szabolcs Balogh wrote:
> On Friday 18 June 2010 17:49:27 Phil Mayers wrote:
>> On 18/06/10 15:34, Szabolcs Balogh wrote:
>>>       def get_mailbox_list(self):
>>>           twisted.internet.reactor.run()
>>
>> The reactor isn't restartable. You can only start it once.
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> Than how can I start checking for messages for different accounts (When I have
> finished checking the messages for the first account to start checking for the
> next account, and so on...)?

Others have already answered this, but one way to explain it:

You don't "call the reactor" like a function. You start the reactor, and 
arrange for *it* to call *your* code in response to events.

One type of events being timer ticks.


From bszabolcs at gmail.com  Fri Jun 18 13:08:21 2010
From: bszabolcs at gmail.com (Szabolcs Balogh)
Date: Fri, 18 Jun 2010 20:08:21 +0300
Subject: [Twisted-Python] Multiple clients
In-Reply-To: <9BDB6D83-D992-441A-9AB7-E82EDE7DDCBF@twistedmatrix.com>
References: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>
	<201006181825.01210.bszabolcs@gmail.com>
	<9BDB6D83-D992-441A-9AB7-E82EDE7DDCBF@twistedmatrix.com>
Message-ID: <201006182008.21775.bszabolcs@gmail.com>

On Friday 18 June 2010 19:24:54 Glyph Lefkowitz wrote:
> On Jun 18, 2010, at 8:25 AM, Szabolcs Balogh wrote:
> > Than how can I start checking for messages for different accounts (When I
> > have finished checking the messages for the first account to start
> > checking for the next account, and so on...)?
> 
> The whole *point* of the "reactor" is to allow multiple connections (and
> timed calls) to be serviced simultaneously.
> 
> When you have "finished checking messages" for the first account,
> presumably there is a callback of some kind; most likely
> 'connectionLost()'.  In connectionLost, you can just call connectTCP again
> with a protocol factory pointed at the second account.
> 
> This is actually a FAQ:
> 
> <http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#HowdoImakeTwis
> tedtalktomultipleclientsconnecttomultipleservers>
> 
> Hopefully this helps.
> 
> This is a hard question to answer in a way where the next asker will
> actually find the answer, since the answer is really "just call a method",
> and the asker needs to understand that they can call any of these methods
> at any time.  If you have any idea as to how the FAQ could be improved so
> that you might have found your answer while searching around, please let
> us know :).  For example: the way you phrased your requirement here, "When
> I have done X, start doing X", even *sounds* like an event-driven program
> - 'def iHaveFinishedChecking(self): next.startChecking()' - so you were
> clearly on the right track.  Why did you think you needed to run the
> reactor again in order to accomplish this?

Using:
            twisted.internet.reactor.connectTCP(host, port, imapfactory, 4)
	    twisted.internet.reactor.run()
it works.

But if I try:
	    twisted.internet.reactor.run()
            twisted.internet.reactor.connectTCP(host, port, imapfactory, 4)
it stops at run() and doesn't executes the connectTCP method.

This is why I thought that first I have to execute connectTCP and then 
reactor.run()


>Couldn't you use callLater to fire the first account check every N
>interval and then just attach the subsequent accounts for that
>interval as callbacks to the first check inside your callLater func?

I can't use the callLater, because I'm working on the engine part of an email 
client. So I need a "get_messages(imap_account)" method, which can be called 
from the GUI synchron or asynchron (pressed the check now button by the user) 
and checks for new messages for the account specified. So it needs to be as 
generally as possible and automatically doesn't do anything.



From bszabolcs at gmail.com  Fri Jun 18 13:16:27 2010
From: bszabolcs at gmail.com (Szabolcs Balogh)
Date: Fri, 18 Jun 2010 20:16:27 +0300
Subject: [Twisted-Python] Multiple clients
In-Reply-To: <9BDB6D83-D992-441A-9AB7-E82EDE7DDCBF@twistedmatrix.com>
References: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>
	<201006181825.01210.bszabolcs@gmail.com>
	<9BDB6D83-D992-441A-9AB7-E82EDE7DDCBF@twistedmatrix.com>
Message-ID: <201006182016.27673.bszabolcs@gmail.com>

On Friday 18 June 2010 19:24:54 Glyph Lefkowitz wrote:
> This is actually a FAQ:
> 
> <http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#HowdoImakeTwis
> tedtalktomultipleclientsconnecttomultipleservers>
> 
"Sometimes people ask this question when they write a function that calls 
connectTCP, then reactor.run(). You don't usually need to call reactor.run() 
yourself; let twistd do it. If you do need to call it yourself, call it just 
once after your initial setup. When reactor.run() exits, your program should 
too."

It sounds good, but if I don't call reactor.run() after connectSSL doesn't 
happens anything... If I call reactor.run() after connectSSL, it works 
properly...


From itamar at itamarst.org  Fri Jun 18 13:25:50 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Fri, 18 Jun 2010 13:25:50 -0400 (EDT)
Subject: [Twisted-Python] Multiple clients
In-Reply-To: <201006182016.27673.bszabolcs@gmail.com>
References: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>
	<201006181825.01210.bszabolcs@gmail.com>
	<9BDB6D83-D992-441A-9AB7-E82EDE7DDCBF@twistedmatrix.com>
	<201006182016.27673.bszabolcs@gmail.com>
Message-ID: <55975.63.107.91.99.1276881950.squirrel@webmail.zoteca.com>

> It sounds good, but if I don't call reactor.run() after connectSSL doesn't
> happens anything... If I call reactor.run() after connectSSL, it works
> properly...

There are two types of client connections:

1. Connections you open when you first run the program. Call these before
reactor.run() is called.

2. Connections that happen as result of events. Events are all dispatched
by the reactor, so e.g. gui click or data received over network connection
will result in functions being called by the reactor.  These functions can
also open new connections.

The key here is to distinguish between the order of the code in the text
file, and the order the code runs in. In the following example, the
connectTCP will happen *after* reactor.run():


# this will get called 10 seconds after reactor.run():
def happensLater():
    reactor.connectTCP(....)

reactor.callLater(10, happensLater)
reactor.run()




From bszabolcs at gmail.com  Fri Jun 18 13:55:49 2010
From: bszabolcs at gmail.com (Szabolcs Balogh)
Date: Fri, 18 Jun 2010 20:55:49 +0300
Subject: [Twisted-Python] Multiple clients
In-Reply-To: <55975.63.107.91.99.1276881950.squirrel@webmail.zoteca.com>
References: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>
	<201006182016.27673.bszabolcs@gmail.com>
	<55975.63.107.91.99.1276881950.squirrel@webmail.zoteca.com>
Message-ID: <201006182055.49458.bszabolcs@gmail.com>

On Friday 18 June 2010 20:25:50 Itamar Turner-Trauring wrote:
> > It sounds good, but if I don't call reactor.run() after connectSSL
> > doesn't happens anything... If I call reactor.run() after connectSSL, it
> > works properly...
> 
> There are two types of client connections:
> 
> 1. Connections you open when you first run the program. Call these before
> reactor.run() is called.
> 
> 2. Connections that happen as result of events. Events are all dispatched
> by the reactor, so e.g. gui click or data received over network connection
> will result in functions being called by the reactor.  These functions can
> also open new connections.
> 
> The key here is to distinguish between the order of the code in the text
> file, and the order the code runs in. In the following example, the
> connectTCP will happen *after* reactor.run():
> 
> 
> # this will get called 10 seconds after reactor.run():
> def happensLater():
>     reactor.connectTCP(....)
> 
> reactor.callLater(10, happensLater)
> reactor.run()
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

It is possible to:
 - start the reactor when I initialize my program (eg. in main)
 - call connectTCP or connectSSL when I want and every time I want?

Something like this:

def check_messages(account):
	# connect to imap server and check for new mailboxes/messages
	reactor.connectSSL(...)


if __name__ == "__main__":
	reactor.run()

	check_message(account1)
	check_message(account2)
	...
	do something else
	...
	check_message(accountn)


Because I can't implement this :}

I have started the implementation based on "Twisted Network Programming 
Essential", but this book doesn't treat multiple connections...


From grickert at coldstorage.com  Fri Jun 18 15:23:50 2010
From: grickert at coldstorage.com (Gerrat Rickert)
Date: Fri, 18 Jun 2010 15:23:50 -0400
Subject: [Twisted-Python] Multiple clients
In-Reply-To: <201006182055.49458.bszabolcs@gmail.com>
References: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com><201006182016.27673.bszabolcs@gmail.com><55975.63.107.91.99.1276881950.squirrel@webmail.zoteca.com>
	<201006182055.49458.bszabolcs@gmail.com>
Message-ID: <BB13E4C4D649234F84A01F6DF64BB87F05CACD03@ccs-ex01.coldstorage.com>

>It is possible to:
> - start the reactor when I initialize my program (eg. in main)
> - call connectTCP or connectSSL when I want and every time I want?
>
>Something like this:
>
>def check_messages(account):
>	# connect to imap server and check for new mailboxes/messages
>	reactor.connectSSL(...)
>
>
>if __name__ == "__main__":
>	reactor.run()
>
>	check_message(account1)
>	check_message(account2)
>	...
>	do something else
>	...
>	check_message(accountn)
>
>
>Because I can't implement this :}


Something like this (obviously won't work verbatim 
& may not be the best example, 
but hopefully will give you the idea):

def check_messages(account):
    # connect to imap server and check for new mailboxes/messages
    reactor.connectSSL(...)
    # should return a deferred!

def do_something_else():
    return defer.succeed(None)  # return a deferred here too

def something_failed(rslt):
  print rslt
  reactor.stop()

def call_my_stuff(accountList):

  # check messages asynchronously
  checks = [check_message(account) for account in accountList]

  dl = defer.DeferredList(checks)
  dl.addCallback(do_something_else) # wait until all messages checked to
run
  dl.addCallback(runner, accountList) # wait till we've done something
else
  dl.addErrback(something_failed) # ALWAYS attach errbacks

def runner(accountList):
  reactor.callLater(0.1, call_my_stuff, accountList)

if __name__ == "__main__":

    accountList = [account1, account2]
    reactor.callWhenRunning(runner, accountList)
    reactor.run()


From jasonjwwilliams at gmail.com  Fri Jun 18 16:58:22 2010
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Fri, 18 Jun 2010 14:58:22 -0600
Subject: [Twisted-Python] Multiple clients
In-Reply-To: <201006182055.49458.bszabolcs@gmail.com>
References: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>
	<201006182016.27673.bszabolcs@gmail.com>
	<55975.63.107.91.99.1276881950.squirrel@webmail.zoteca.com>
	<201006182055.49458.bszabolcs@gmail.com>
Message-ID: <AANLkTiko8RHTeDrhpK4LtcOTTNHcZ7icSgvWEtvic6SK@mail.gmail.com>

If you're not using twistd to launch your app you'll have to run
reactor.run(). Otherwise, the eventloop won't ever start.

In terms of exposing something like get_messages()...couldn't that
issue the callLater with a very tiny value? Or issue the first
connectTCP, which the others chained via addCallback?

-J

On Fri, Jun 18, 2010 at 11:55 AM, Szabolcs Balogh <bszabolcs at gmail.com> wrote:
> On Friday 18 June 2010 20:25:50 Itamar Turner-Trauring wrote:
>> > It sounds good, but if I don't call reactor.run() after connectSSL
>> > doesn't happens anything... If I call reactor.run() after connectSSL, it
>> > works properly...
>>
>> There are two types of client connections:
>>
>> 1. Connections you open when you first run the program. Call these before
>> reactor.run() is called.
>>
>> 2. Connections that happen as result of events. Events are all dispatched
>> by the reactor, so e.g. gui click or data received over network connection
>> will result in functions being called by the reactor. ?These functions can
>> also open new connections.
>>
>> The key here is to distinguish between the order of the code in the text
>> file, and the order the code runs in. In the following example, the
>> connectTCP will happen *after* reactor.run():
>>
>>
>> # this will get called 10 seconds after reactor.run():
>> def happensLater():
>> ? ? reactor.connectTCP(....)
>>
>> reactor.callLater(10, happensLater)
>> reactor.run()
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> It is possible to:
> ?- start the reactor when I initialize my program (eg. in main)
> ?- call connectTCP or connectSSL when I want and every time I want?
>
> Something like this:
>
> def check_messages(account):
> ? ? ? ?# connect to imap server and check for new mailboxes/messages
> ? ? ? ?reactor.connectSSL(...)
>
>
> if __name__ == "__main__":
> ? ? ? ?reactor.run()
>
> ? ? ? ?check_message(account1)
> ? ? ? ?check_message(account2)
> ? ? ? ?...
> ? ? ? ?do something else
> ? ? ? ?...
> ? ? ? ?check_message(accountn)
>
>
> Because I can't implement this :}
>
> I have started the implementation based on "Twisted Network Programming
> Essential", but this book doesn't treat multiple connections...
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From kevin.horn at gmail.com  Fri Jun 18 18:24:10 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 18 Jun 2010 17:24:10 -0500
Subject: [Twisted-Python] Multiple clients
In-Reply-To: <201006182055.49458.bszabolcs@gmail.com>
References: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>
	<201006182016.27673.bszabolcs@gmail.com>
	<55975.63.107.91.99.1276881950.squirrel@webmail.zoteca.com>
	<201006182055.49458.bszabolcs@gmail.com>
Message-ID: <AANLkTinsNetU9TDjghpZ5RtvEccXpZHBEaP-WtQis31P@mail.gmail.com>

On Fri, Jun 18, 2010 at 12:55 PM, Szabolcs Balogh <bszabolcs at gmail.com>wrote:

>
> It is possible to:
>  - start the reactor when I initialize my program (eg. in main)
>  - call connectTCP or connectSSL when I want and every time I want?
>
>
Yes, this is exactly what you are supposed to do.  Call the reactor _once_
and once only.

The call connectTCP or whatever whenever is appropriate for your program.


> Something like this:
>
> def check_messages(account):
>        # connect to imap server and check for new mailboxes/messages
>        reactor.connectSSL(...)
>
>
> if __name__ == "__main__":
>        reactor.run()
>
>        check_message(account1)
>        check_message(account2)
>        ...
>        do something else
>        ...
>        check_message(accountn)
>
>
> Because I can't implement this :}
>
> I have started the implementation based on "Twisted Network Programming
> Essential", but this book doesn't treat multiple connections...
>
>
The above won't work, because run() blocks.  So in your example here,
check_messages() won't be called until after the run() call returns, which
means the reactor won't be running, which means check_messages won't work.

look into callWhenRunning:
http://twistedmatrix.com/documents/10.0.0/api/twisted.internet.interfaces.IReactorCore.html#callWhenRunning

and do something like:

def start_checking():
    (do your check_messages stuff here)

if __name__ == '__main__':
    reactor.callWhenRunning(start_checking)

    reactor.run()

using callWhenRunning isn't necessary, but I find that it clarifies things
for me sometimes

reactor.run() is usually the _last_ thing I call in my Twisted programs,
unless I have some shutdown cleanup to do, and even that is usually better
done in the reactor shutdown hook
(see:
http://twistedmatrix.com/documents/10.0.0/api/twisted.internet.interfaces.IReactorCore.html#addSystemEventTrigger
)

you also need to figure out how to structure your program flow using
deferreds, which is not always easy, and depends greatly on your specific
application.

remember that deferreds are just a way of organizing callback functions

you can "chain" deferreds something like this (assuming your functions
return Deferreds):

d = check_first_one()
d.addCallback(check_second_one, ...)

etc...

which will make check_second_one start after check_first_one completes

You can also use a deferredList, which is often handy when you want to keep
track of several deferred operations which are operating simultaneously
(I haven't used one in a while, so I don't have a simple example off the top
of my head, but there's a simple example in the Twisted book)

Hope this helps,

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100618/f9335a51/attachment.htm 

From jasonjwwilliams at gmail.com  Sat Jun 19 00:23:29 2010
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Fri, 18 Jun 2010 22:23:29 -0600
Subject: [Twisted-Python] Twisted Names too many open files...resolv.conf
In-Reply-To: <20100618014154.2412.1216951132.divmod.xquotient.93@localhost.localdomain>
References: <AANLkTilqAawa_hCxYcr3HgHaJJ9uApygHnd8dsbgGFQo@mail.gmail.com>
	<20100618014154.2412.1216951132.divmod.xquotient.93@localhost.localdomain>
Message-ID: <AANLkTinZYOTjun6IUfkhngRaaypsSu-9xTj1SX3X9Ucj@mail.gmail.com>

Hi Jean-Paul,

As usual you're very right on more than one front:

1.) Using Resolver() directly is exactly the behavior we wanted.
2.) Running out of file descriptors was not because of the resolv.conf.

#2 was because this box had an ancient version of Twisted (2.5.0) that
never stopped the Resolvers we were instantiating. I noticed it
because trying to call resolver.factory.doStop() did nothing.

Upgrading to Twisted 10.0.0 on the box fixed it, and the used FD count
is down from ~1000 to hovering around 50.

Thank you for your help.

-J

On Thu, Jun 17, 2010 at 7:41 PM,  <exarkun at twistedmatrix.com> wrote:
> On 12:36 am, jasonjwwilliams at gmail.com wrote:
>>Hi Guys,
>>
>>Is there anyway to prevent twisted.names.client.createResolver() from
>>creating a resolvconf resolver, when servers= is passed?
>>
>>The use here doesn't need the resolv.conf resolvers (and actually
>>really doesn't want them). What appears to be occurring is that
>>repeated use of createResolver() exhausts the number of allowed open
>>files because resolv.conf is never closed:
>>
>>exceptions.IOError: [Errno 24] Too many open files: '/etc/resolv.conf'
>
> This doesn't mean resolv.conf is never closed. ?It just means you've
> already run into your open file limit when something tried to open
> resolv.conf.
>
> You didn't mention which version of Twisted you're using. ?Perhaps
> you're running in to #970 (fixed in 10.0).
>
> But if you just want to use a particular server, then maybe you want to
> instantiate twisted.names.client.Resolver directly, rather than calling
> createResolver.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From hatem.oraby at gmail.com  Sat Jun 19 07:07:04 2010
From: hatem.oraby at gmail.com (Hatem Oraby)
Date: Sat, 19 Jun 2010 14:07:04 +0300
Subject: [Twisted-Python] Announcing TwistedSim: A simulator for your
	Twisted application
In-Reply-To: <5FA7DC4B-059B-4891-AB7B-2187FBF66A3C@twistedmatrix.com>
References: <AANLkTimiGspKUiIfDf12ht_bJPcW6uQV9Z5aSEVeystR@mail.gmail.com>
	<5FA7DC4B-059B-4891-AB7B-2187FBF66A3C@twistedmatrix.com>
Message-ID: <AANLkTik-dqXiI-alP_x3DWcOo61DP99m1ERio9p4Gpyg@mail.gmail.com>

On Thu, Jun 17, 2010 at 2:08 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

> On Jun 15, 2010, at 9:56 PM, Hatem Oraby wrote:
>
> I'd like to share with you a project that I've been working on: TwistedSim
> is a simulator/emulator that loads your Twisted applications and run then
> under a simulated network.TwistedSim could save you a lot of developing time
> and debugging time, TwistedSim offers you efficient and reproducible testing
> environment.
> Please check the project at http://code.google.com/p/twistedsim/
>
> Your feedback and comments are highly appreciated. I would like to hear
> from you.
>
>
> Hi Oraby,
>
> Thanks for providing a link to this!  I'll be sure to check it out later.
>
> In the past, projects that begin with the name 'twisted <something>' have
> occasionally confused users, though, as the projects inside Twisted itself
> are called 'twisted <something>'.  A while ago, we started promoting the
> prefix 'tx' (see <https://launchpad.net/tx>) to mean "twisted extension",
> i.e. "this works with twisted, gets along well with Twisted", sort of like
> "py" is for "python".
>
> I'm not a lawyer, but my vague understanding is that if you honor this
> request, it will make things easier for the Twisted project to secure
> trademark rights later on.  So, I hope that you will consider re-naming
> "twistedsim" to something else (might I suggest "txnetsim"?) so that it's
> easier for users to keep this straight.
>
> Thanks again,
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
Thank you for advice and suggestion Gylph, The point is that twistedSim in
not restricted only to Twisted Framework (I.e. It can run with any
event-based network application), Its true that TwistedSim give a special
attention to Twisted (and thats where the current name came from), however
renaming it to start with tx would be unfair as this will mean that it
simulates only Twisted Framework.
I respect your intentions about adapting to standards and not to confuse
users, I will change in hopefully in the next major update the name to
something other than TwistedSim but it will probably something new that
doesn't restrict it as a Twisted extension (i.e. won't start with tx).


Regards,
Oraby
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100619/c3b3fd3c/attachment.htm 

From jml at mumak.net  Sat Jun 19 08:35:18 2010
From: jml at mumak.net (Jonathan Lange)
Date: Sat, 19 Jun 2010 13:35:18 +0100
Subject: [Twisted-Python] Twisted 10.1.0pre1 released -- please test!
Message-ID: <AANLkTikyD30DQ3WJ83_bBGcbfkaknLMf3E3DlSjP04Ui@mail.gmail.com>


From exarkun at twistedmatrix.com  Sat Jun 19 09:08:45 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 19 Jun 2010 13:08:45 -0000
Subject: [Twisted-Python] Review process, news fragments
Message-ID: <20100619130845.2412.1686806029.divmod.xquotient.159@localhost.localdomain>

Hello Twisted developers,

Please take a few minutes to refresh your memory of the contents of 
<http://twistedmatrix.com/trac/wiki/ReviewProcess>.

In particular, I'd like to draw everyone's attention to the requirements 
for news fragments.  Since we introduced this part of the workflow, the 
review requirements for these has been a little unclear.  Many reviewers 
haven't required that the news fragment be reviewed (that is, if it was 
missing, they would say "Please add a news fragment and then merge.") or 
haven't kept the guidelines these files in mind when reviewing them.

I'd like for this to change.  Informative, consistently written news 
fragments result better information being available to users when we do 
a release.  This is a very simple part the development process but 
effort here has a disproportionately large effect on the perception of 
Twisted.

If the guidelines for news fragment content on the review process wiki 
page are unclear or insufficient, please complain and we can work on 
improving the weaknesses.

Thanks, and congratulations to everyone on the (now inevitable :) 10.1 
release.
Jean-Paul


From screwtape at froup.com  Sat Jun 19 10:09:24 2010
From: screwtape at froup.com (Tim Allen)
Date: Sun, 20 Jun 2010 00:09:24 +1000
Subject: [Twisted-Python] Twisted 10.1.0pre1 released -- please test!
In-Reply-To: <AANLkTikyD30DQ3WJ83_bBGcbfkaknLMf3E3DlSjP04Ui@mail.gmail.com>
References: <AANLkTikyD30DQ3WJ83_bBGcbfkaknLMf3E3DlSjP04Ui@mail.gmail.com>
Message-ID: <20100619140924.GF16516@boombah.thristian.org>

On Sat, Jun 19, 2010 at 01:35:18PM +0100, Jonathan Lange wrote:
> From the dank and grey depths of a London summer, a thin, reedy voice
> wanders across the waves of the Internet, saying that it's jolly well
> pleased to announce the first 10.1.0 pre-release.

I'm a bit sad my ticket #4138 wasn't reviewed in time for 10.1.0, but oh
well - presumably there'll be another release before 2010 is over. :)

Congratulations, one and all!


From kevin.horn at gmail.com  Sat Jun 19 14:05:25 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Sat, 19 Jun 2010 13:05:25 -0500
Subject: [Twisted-Python] Review process, news fragments
In-Reply-To: <20100619130845.2412.1686806029.divmod.xquotient.159@localhost.localdomain>
References: <20100619130845.2412.1686806029.divmod.xquotient.159@localhost.localdomain>
Message-ID: <AANLkTikmhfQZPWtz8oKS13PQSu5sc-X3n8uow6FG9kli@mail.gmail.com>

+1

On Sat, Jun 19, 2010 at 8:08 AM, <exarkun at twistedmatrix.com> wrote:

> Hello Twisted developers,
>
> Please take a few minutes to refresh your memory of the contents of
> <http://twistedmatrix.com/trac/wiki/ReviewProcess>.
>
> In particular, I'd like to draw everyone's attention to the requirements
> for news fragments.  Since we introduced this part of the workflow, the
> review requirements for these has been a little unclear.  Many reviewers
> haven't required that the news fragment be reviewed (that is, if it was
> missing, they would say "Please add a news fragment and then merge.") or
> haven't kept the guidelines these files in mind when reviewing them.
>
> I'd like for this to change.  Informative, consistently written news
> fragments result better information being available to users when we do
> a release.  This is a very simple part the development process but
> effort here has a disproportionately large effect on the perception of
> Twisted.
>
> If the guidelines for news fragment content on the review process wiki
> page are unclear or insufficient, please complain and we can work on
> improving the weaknesses.
>
> Thanks, and congratulations to everyone on the (now inevitable :) 10.1
> release.
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100619/08d61bc4/attachment.htm 

From glyph at twistedmatrix.com  Sat Jun 19 20:41:26 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 19 Jun 2010 17:41:26 -0700
Subject: [Twisted-Python] Announcing TwistedSim: A simulator for your
	Twisted application
In-Reply-To: <AANLkTik-dqXiI-alP_x3DWcOo61DP99m1ERio9p4Gpyg@mail.gmail.com>
References: <AANLkTimiGspKUiIfDf12ht_bJPcW6uQV9Z5aSEVeystR@mail.gmail.com>
	<5FA7DC4B-059B-4891-AB7B-2187FBF66A3C@twistedmatrix.com>
	<AANLkTik-dqXiI-alP_x3DWcOo61DP99m1ERio9p4Gpyg@mail.gmail.com>
Message-ID: <078C28B9-404D-4270-BA10-7914B35411E0@twistedmatrix.com>


On Jun 19, 2010, at 4:07 AM, Hatem Oraby wrote:

> Thank you for advice and suggestion Gylph, The point is that twistedSim in not restricted only to Twisted Framework (I.e. It can run with any event-based network application), Its true that TwistedSim give a special attention to Twisted (and thats where the current name came from), however renaming it to start with tx would be unfair as this will mean that it simulates only Twisted Framework. 

That sounds good to me.  I believe I saw some chatter about this in the #twisted channel on Freenode.  While I think some of the implementation decisions are ... somewhat questionable, I think it's valuable to have a network simulator for applications that don't use the Twisted APIs too :).

> I respect your intentions about adapting to standards and not to confuse users, I will change in hopefully in the next major update the name to something other than TwistedSim but it will probably something new that doesn't restrict it as a Twisted extension (i.e. won't start with tx). 

Your consideration is much appreciated.  I look forward to hearing the new name.



From cy.li at xemaps.com  Sat Jun 19 21:05:41 2010
From: cy.li at xemaps.com (Ying Li)
Date: Sat, 19 Jun 2010 18:05:41 -0700
Subject: [Twisted-Python] Reassigned tickets
Message-ID: <AANLkTik7WGMMdgpZVYvm8uTmGSGMX888kwBcBnezvM-e@mail.gmail.com>

Hi there,

I notice that several tickets have been reassigned to me in the last
few days, without comment or explanation.  While confused for a bit at
first, I eventually figured that since I've been trying to resolve
some of the easier deprecation tickets, someone has probably decided
to assign some other deprecation tickets to me.

However, I have also gotten a couple of tickets I do not know what to
do with - for instance, http://twistedmatrix.com/trac/ticket/4162,
which has a different author and is awaiting a response to review
feedback.

I also do not know what to do with a ticket such as like
http://twistedmatrix.com/trac/ticket/2661.   It has a simple summary
and description, but also a comment about the nuances of method naming
and possibly API consistency, which I as a new contributor I feel that
I lack the experience and authority to weigh in on.

I do not mind having tickets assigned to me, but an explanation or
simple comment would have been nice, especially if the ticket already
has an author.

I'd also like to have some consensus or documentation about what to do
with tickets (assigned to me or no) with comments I do not know how to
interpret - should I be implementing the change as described in the
comment, if I do not recognize the commenter as a core developer?
What if there are several comments with disagreements as to how best
to resolve the issue?

Perhaps these tickets should be put into a separate queue or have a
keyword assigned to them to signal their limbo state?

Thanks!
-Ying


From itamar at itamarst.org  Sat Jun 19 22:35:47 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sat, 19 Jun 2010 22:35:47 -0400
Subject: [Twisted-Python] Reassigned tickets
In-Reply-To: <AANLkTik7WGMMdgpZVYvm8uTmGSGMX888kwBcBnezvM-e@mail.gmail.com>
References: <AANLkTik7WGMMdgpZVYvm8uTmGSGMX888kwBcBnezvM-e@mail.gmail.com>
Message-ID: <1277001347.1583.12.camel@blake>

On Sat, 2010-06-19 at 18:05 -0700, Ying Li wrote:

> I'd also like to have some consensus or documentation about what to do
> with tickets (assigned to me or no) with comments I do not know how to
> interpret - should I be implementing the change as described in the
> comment, if I do not recognize the commenter as a core developer?

If it's an obvious bug, it's worth fixing - but I guess you're asking
about cases that are matters of judgement, or just confusing (e.g. for
2661 I've no idea offhand what IFinishableConsumer is and who implements
it). In which case, probably not worth doing work - you don't want to
end up wasting time on work that has to be redone.

> What if there are several comments with disagreements as to how best
> to resolve the issue?

If you feel qualified, make a decision. If you don't, pick someone you
think is and ask them to comment.

> Perhaps these tickets should be put into a separate queue or have a
> keyword assigned to them to signal their limbo state?

Or perhaps another state in our workflow process; all tickets would
start in this state. The state machine would be something like:

discussion -> decided -> coding -> awaiting review -> approved -> closed
                            ^             |
                            |_____________|


You could then know not to start coding on anything still in discussion
state that where you feel someone should make decision. "Decided" state
would imply (1) the issue ought to be fixed and (2) the solution has
been decided on.





From itamar at itamarst.org  Sat Jun 19 22:51:14 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sat, 19 Jun 2010 22:51:14 -0400
Subject: [Twisted-Python] Reassigned tickets
In-Reply-To: <1277001347.1583.12.camel@blake>
References: <AANLkTik7WGMMdgpZVYvm8uTmGSGMX888kwBcBnezvM-e@mail.gmail.com>
	<1277001347.1583.12.camel@blake>
Message-ID: <1277002274.1583.17.camel@blake>

On Sat, 2010-06-19 at 22:35 -0400, Itamar Turner-Trauring wrote:

> You could then know not to start coding on anything still in discussion
> state that where you feel someone should make decision.

Or in actual English: You would then know not to start coding on
anything still in discussion state, in those cases where you felt
someone else ought to decide how to resolve the reported issue.




From exarkun at twistedmatrix.com  Sun Jun 20 00:05:21 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 20 Jun 2010 04:05:21 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1277006721.34.1699517513@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100620/20bb90ba/attachment-0001.htm 

From glyph at twistedmatrix.com  Sun Jun 20 06:32:40 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 20 Jun 2010 06:32:40 -0400
Subject: [Twisted-Python] Review process, news fragments
In-Reply-To: <20100619130845.2412.1686806029.divmod.xquotient.159@localhost.localdomain>
References: <20100619130845.2412.1686806029.divmod.xquotient.159@localhost.localdomain>
Message-ID: <7F2D9964-8F4D-4074-A36E-BA00F56D7B07@twistedmatrix.com>

On Jun 19, 2010, at 6:08 AM, exarkun at twistedmatrix.com wrote:

> In particular, I'd like to draw everyone's attention to the requirements 
> for news fragments.  Since we introduced this part of the workflow, the 
> review requirements for these has been a little unclear.  Many reviewers 
> haven't required that the news fragment be reviewed (that is, if it was 
> missing, they would say "Please add a news fragment and then merge.") or 
> haven't kept the guidelines these files in mind when reviewing them.

Can you point to some specific examples in the current release, and note what they should have been?

> I'd like for this to change.  Informative, consistently written news 
> fragments result better information being available to users when we do 
> a release.  This is a very simple part the development process but 
> effort here has a disproportionately large effect on the perception of 
> Twisted.

Generally speaking, I agree.  But I think we need to nail down a very specific proposal if this is to improve.  What should reviewers be looking for in a good news fragment?  What are pitfalls to avoid?  Asking reviewers to look at something that isn't clearly spelled out may just result in more churn in reviews; I'd hate to see an extra round trip on a ticket because of an oxford comma placement in the news fragment.

> If the guidelines for news fragment content on the review process wiki 
> page are unclear or insufficient, please complain and we can work on 
> improving the weaknesses.

There's very little in the way of stylistic guidance on this page.

For one thing, I suspect there were a lot of fixes which could have been a '.misc' but were instead a '.feature' or '.bugfix'.  We need some better guidelines for what exactly constitutes a change that is interesting to users.

It advises that a single sentence be written about a change to an FQPN.  This is hard to do well for new features.  For example, "twisted.internet.endpoints now ... exists" doesn't really scan, and doesn't really emphasize the importance of the feature relative to some of the other small fixes which have been added.  I feel like I probably wrote too much of a dissertation in 1442.feature and not enough of a description in 990.feature, but I don't know what would have been better.  If you know something should be a highlight, how should that be indicated?  Should the highlight text be different from the news fragment text?

For complicated bugfixes it's also sometimes awkward, because it's hard to briefly describe a subtle, but still potentially important change in behavior.

A list of 10 examples of "good" feature descriptions and "good" bugfix descriptions would go a long way towards improving this.

Thanks for raising the issue though.  I would also like to see a more coherent NEWS file for 10.2 :).

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100620/5b89dc61/attachment.htm 

From exarkun at twistedmatrix.com  Sun Jun 20 18:26:37 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 20 Jun 2010 22:26:37 -0000
Subject: [Twisted-Python] Review process, news fragments
In-Reply-To: <7F2D9964-8F4D-4074-A36E-BA00F56D7B07@twistedmatrix.com>
References: <20100619130845.2412.1686806029.divmod.xquotient.159@localhost.localdomain>
	<7F2D9964-8F4D-4074-A36E-BA00F56D7B07@twistedmatrix.com>
Message-ID: <20100620222637.2412.1463970295.divmod.xquotient.310@localhost.localdomain>

On 10:32 am, glyph at twistedmatrix.com wrote:
>On Jun 19, 2010, at 6:08 AM, exarkun at twistedmatrix.com wrote:
>>In particular, I'd like to draw everyone's attention to the 
>>requirements
>>for news fragments.  Since we introduced this part of the workflow, 
>>the
>>review requirements for these has been a little unclear.  Many 
>>reviewers
>>haven't required that the news fragment be reviewed (that is, if it 
>>was
>>missing, they would say "Please add a news fragment and then merge.") 
>>or
>>haven't kept the guidelines these files in mind when reviewing them.
>
>Can you point to some specific examples in the current release, and 
>note what they should have been?

Sure.  Just going in order that they happened to appear in the news 
file...

This one is too long.

- Added new "endpoint" interfaces in twisted.internet.interfaces,
   which abstractly describe stream transport endpoints which can be
   listened on or connected to.  Implementations for TCP and SSL
   clients and servers are present in twisted.internet.endpoints.
   Notably, client endpoints' connect() methods return cancellable
   Deferreds, so code written to use them can bypass the awkward
   "ClientFactory.clientConnectionFailed" and
   "Connector.stopConnecting" methods, and handle errbacks from or
   cancel the returned deferred, respectively. (#1442)

I would have said something like:

  - A high-level client and server setup API, "endpoints", has been
    introduced which provides many benefits over using reactor.connect*
    and reactor.listen* methods directly.

Alternatively, just the first two sentences of the original news 
fragment stand fairly well on their own, and I probably wouldn't have 
complained if the last sentence had been omitted.

Here's one that's complete nonsense.

- Substrings are escaped before being passed to a regular expression
   for searching to ensure that they don't get interpreted as part of
   the expression. (#1893)

The author clearly wasn't expecting this to be read outside the context 
of the specific ticket being resolved, but news fragments must be 
coherent on their own.  This turns out to be a fix for Twisted Web's 
rendering of Failures that include frames including generator 
expressions.

The parenthetical in this one seems to add little.

- Removed twisted.application.app.ApplicationRunner.startLogging,
   which has been deprecated (doesn't say since when), as well as
   support for the legacy
   twisted.application.app.ApplicationRunner.getLogObserver method.
   (#4092)

Omitting it entirely would have conveyed the same amount of information. 
:)

For the deprecations/removals section in particular, we definitely need 
some more guidelines about what information to include and how to 
construct the message.  There are a few styles represented in the 
entries for this release.  Some include information about when the 
removed API was first deprecated, but some do it by version number and 
some do it by date.  Others omit the information entirely.  We also 
switch at random between "was" and "has been".  And some deprecation 
messages point at a replacement API, and some don't.

Obviously this is English prose we're talking about here, and there's a 
lot of room for variation.  I don't want to impose a *strict* style 
guide here.  I do want the fragments to all aim for roughly the same 
level of detail, and they should all at least make sense to a reader who 
hasn't looked at the history of the relevant ticket.  And where it makes 
sense, I'd like the presentation of the information (like the age of the 
deprecation on an API being removed or changed) to be uniform.
>
>>I'd like for this to change.  Informative, consistently written news
>>fragments result better information being available to users when we 
>>do
>>a release.  This is a very simple part the development process but
>>effort here has a disproportionately large effect on the perception of
>>Twisted.
>
>Generally speaking, I agree.  But I think we need to nail down a very 
>specific proposal if this is to improve.  What should reviewers be 
>looking for in a good news fragment?  What are pitfalls to avoid? 
>Asking reviewers to look at something that isn't clearly spelled out 
>may just result in more churn in reviews; I'd hate to see an extra 
>round trip on a ticket because of an oxford comma placement in the news 
>fragment.

True.  Although man, what kind of a jerk would leave out the oxford 
comma (or worse, ask for one to be removed!) in a news fragment? 
Sheesh.  I think we're all a little bit beyond that.
>
>>If the guidelines for news fragment content on the review process wiki
>>page are unclear or insufficient, please complain and we can work on
>>improving the weaknesses.
>
>There's very little in the way of stylistic guidance on this page.
>
>For one thing, I suspect there were a lot of fixes which could have 
>been a '.misc' but were instead a '.feature' or '.bugfix'.  We need 
>some better guidelines for what exactly constitutes a change that is 
>interesting to users.

I have little hope of this.  I think we could update the page to say *at 
all* that only changes interesting to end-users reading the release 
announcement should be summarized.  ReviewProcess#Newsfiles implies 
this, but doesn't explicitly state it.
>
>It advises that a single sentence be written about a change to an FQPN. 
>This is hard to do well for new features.  For example, 
>"twisted.internet.endpoints now ... exists" doesn't really scan, and 
>doesn't really emphasize the importance of the feature relative to some 
>of the other small fixes which have been added.  I feel like I probably 
>wrote too much of a dissertation in 1442.feature and not enough of a 
>description in 990.feature, but I don't know what would have been 
>better.  If you know something should be a highlight, how should that 
>be indicated?  Should the highlight text be different from the news 
>fragment text?

Why did you want to include non-"highlight" text in the news fragment? 
Just leave it out entirely.  The news fragment is the highlight.  Or am 
I missing the point?

For the earlier point, I agree that the guide doesn't fit all types of 
changes well.  We should allow for a few different forms, and present 
more examples.
>
>For complicated bugfixes it's also sometimes awkward, because it's hard 
>to briefly describe a subtle, but still potentially important change in 
>behavior.
>
>A list of 10 examples of "good" feature descriptions and "good" bugfix 
>descriptions would go a long way towards improving this.
>
>Thanks for raising the issue though.  I would also like to see a more 
>coherent NEWS file for 10.2 :).

Jean-Paul


From mike at mv3d.com  Sun Jun 20 22:40:37 2010
From: mike at mv3d.com (Michael Handverger)
Date: Sun, 20 Jun 2010 22:40:37 -0400 (EDT)
Subject: [Twisted-Python] ANN: MV3D version 0.42 released
Message-ID: <6799046.47491277088037190.JavaMail.root@verity.int.mv3d.com>

I?m pleased to announce the release of MV3D version 0.42. In this version, the core systems were made ready for tool building and content creation. This included a redesigned datastore and a cross system GUI layout.

MV3D is an open source virtual world simulation framework written in Python which uses Twisted for networking. It was designed with scalability in mind and aims to be able to distribute a world across as many servers as needed with dynamic load balancing. The simulation framework is not specifically slanted towards any one genre of online game, and can just as easily be used for a space game as a fantasy setting. On the client, Python-Ogre is used for rendering.

More info on MV3D including source code and Windows client binaries is available at http://www.mv3d.com. MV3D is released under the MIT license.

Enjoy,

Mike


From albert.brandl at weiermayer.com  Mon Jun 21 02:50:09 2010
From: albert.brandl at weiermayer.com (Albert Brandl)
Date: Mon, 21 Jun 2010 08:50:09 +0200
Subject: [Twisted-Python] Start with QTReactor
In-Reply-To: <AANLkTikYToax1RYNBORENvW7VHdxXi3ZQWWn1-KAWfdS@mail.gmail.com>
References: <AANLkTikYToax1RYNBORENvW7VHdxXi3ZQWWn1-KAWfdS@mail.gmail.com>
Message-ID: <20100621065009.GA4027@weiermayer.com>

Hi!

On Thu, Jun 17, 2010 at 11:33:52AM -0300, Bruno Frare wrote:
>    Hi,
>    I'm trying to work with QTReactor, but don't have success!
>    I look on site http://code.tarbox.org/qtreactor, but the link is
>    broken.
>    Someone have a tutorial to begin to work with it?

The link on http://code.tarbox.org leads to

https://launchpad.net/qt4reactor

You can find some small example applications in the source under

http://bazaar.launchpad.net/~ghtdak/qt4reactor/trunk/files/head:/ghtTests/

I haven't worked with QTReactor myself, so I don't know how helpful they
are ;-).
-- 

Regards

Albert Brandl

Weiermayer Solutions GmbH
Abteistra?e 12
A-4813 Altm?nster
phone: +43 (0) 720 70 30 14
fax: +43 (0) 7612 20 3 56
web: http://www.weiermayer.com 


From jml at mumak.net  Mon Jun 21 07:15:02 2010
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 21 Jun 2010 12:15:02 +0100
Subject: [Twisted-Python] Twisted 10.1.0pre1 released -- please test!
In-Reply-To: <20100619140924.GF16516@boombah.thristian.org>
References: <AANLkTikyD30DQ3WJ83_bBGcbfkaknLMf3E3DlSjP04Ui@mail.gmail.com>
	<20100619140924.GF16516@boombah.thristian.org>
Message-ID: <AANLkTikZhotIG0_6AHvR3HxU5rD_m7CO9J-MsV0pzBBx@mail.gmail.com>

On Sat, Jun 19, 2010 at 3:09 PM, Tim Allen <screwtape at froup.com> wrote:
> On Sat, Jun 19, 2010 at 01:35:18PM +0100, Jonathan Lange wrote:
>> From the dank and grey depths of a London summer, a thin, reedy voice
>> wanders across the waves of the Internet, saying that it's jolly well
>> pleased to announce the first 10.1.0 pre-release.
>
> I'm a bit sad my ticket #4138 wasn't reviewed in time for 10.1.0, but oh
> well - presumably there'll be another release before 2010 is over. :)
>

Me too. However, being ruthless about time-based releases means that
there'll be another release before you know it.

> Congratulations, one and all!
>

Thanks,
jml


From foom at fuhm.net  Mon Jun 21 10:12:02 2010
From: foom at fuhm.net (James Y Knight)
Date: Mon, 21 Jun 2010 10:12:02 -0400
Subject: [Twisted-Python] Review process, news fragments
In-Reply-To: <20100620222637.2412.1463970295.divmod.xquotient.310@localhost.localdomain>
References: <20100619130845.2412.1686806029.divmod.xquotient.159@localhost.localdomain>
	<7F2D9964-8F4D-4074-A36E-BA00F56D7B07@twistedmatrix.com>
	<20100620222637.2412.1463970295.divmod.xquotient.310@localhost.localdomain>
Message-ID: <5B90F9AD-9FE4-4B88-88BD-BA192F253183@fuhm.net>

On Jun 20, 2010, at 6:26 PM, exarkun at twistedmatrix.com wrote:
> Obviously this is English prose we're talking about here, and  
> there's a
> lot of room for variation.  I don't want to impose a *strict* style
> guide here.  I do want the fragments to all aim for roughly the same
> level of detail, and they should all at least make sense to a reader  
> who
> hasn't looked at the history of the relevant ticket.  And where it  
> makes
> sense, I'd like the presentation of the information (like the age of  
> the
> deprecation on an API being removed or changed) to be uniform.

I think the only real way to ensure this is to have a human edit the  
information after it's concatenated together, before release. Having  
pre-written news fragments from all the authors of the changes makes  
that task a lot easier, but I think you really need to see everything  
together in one file and have a single person apply some editorial  
judgement to the result to have it come out well.

James


From jml at mumak.net  Mon Jun 21 10:44:37 2010
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 21 Jun 2010 15:44:37 +0100
Subject: [Twisted-Python] Review process, news fragments
In-Reply-To: <5B90F9AD-9FE4-4B88-88BD-BA192F253183@fuhm.net>
References: <20100619130845.2412.1686806029.divmod.xquotient.159@localhost.localdomain>
	<7F2D9964-8F4D-4074-A36E-BA00F56D7B07@twistedmatrix.com>
	<20100620222637.2412.1463970295.divmod.xquotient.310@localhost.localdomain>
	<5B90F9AD-9FE4-4B88-88BD-BA192F253183@fuhm.net>
Message-ID: <AANLkTilq62m7LcvHHSN-l0XwD2VGn4cN1NsaYC9SuF2Z@mail.gmail.com>

On Mon, Jun 21, 2010 at 3:12 PM, James Y Knight <foom at fuhm.net> wrote:
...
> I think the only real way to ensure this is to have a human edit the
> information after it's concatenated together, before release. Having
> pre-written news fragments from all the authors of the changes makes
> that task a lot easier, but I think you really need to see everything
> together in one file and have a single person apply some editorial
> judgement to the result to have it come out well.
>

You may be right. We should be very reluctant to add steps to the
release process though.

jml


From zooko at zooko.com  Mon Jun 21 13:45:12 2010
From: zooko at zooko.com (Zooko O'Whielacronx)
Date: Mon, 21 Jun 2010 10:45:12 -0700
Subject: [Twisted-Python] ANNOUNCING Tahoe, the Least-Authority File System,
	v1.7.0
Message-ID: <AANLkTilxV-15WiSOcey_TfevBP7LWGFdCDmOCojlxL7g@mail.gmail.com>

Dear people of twisted-python:

We just released Tahoe-LAFS v1.7. The major new feature is an SFTP
server. This means that (with enough installing software and tinkering
with your operating system configuration) you can have a
normal-looking mount point backed by a Tahoe-LAFS grid.

Regards,

Zooko

ANNOUNCING Tahoe, the Least-Authority File System, v1.7.0

The Tahoe-LAFS team is pleased to announce the immediate
availability of version 1.7.0 of Tahoe-LAFS, an extremely
reliable distributed storage system.

Tahoe-LAFS is the first distributed storage system which offers
"provider-independent security"?meaning that not even the
operator of your storage server can read or alter your data
without your consent. Here is the one-page explanation of its
unique security and fault-tolerance properties:

http://tahoe-lafs.org/source/tahoe/trunk/docs/about.html

Tahoe-LAFS v1.7.0 is the successor to v1.6.1, which was released
February 27, 2010 [1].

v1.7.0 is a major new release with new features and bugfixes. It
adds a fully functional SFTP interface, support for non-ASCII character
encodings, and a new upload algorithm which guarantees that each file
is spread over multiple servers for fault-tolerance. See the NEWS file
[2] for details.


WHAT IS IT GOOD FOR?

With Tahoe-LAFS, you distribute your filesystem across multiple
servers, and even if some of the servers are compromised by
by an attacker, the entire filesystem continues to work
correctly, and continues to preserve your privacy and
security. You can easily share specific files and directories
with other people.

In addition to the core storage system itself, volunteers have
built other projects on top of Tahoe-LAFS and have integrated
Tahoe-LAFS with existing systems.

These include frontends for Windows, Macintosh, JavaScript,
iPhone, and Android, and plugins for Hadoop, bzr, mercurial,
duplicity, TiddlyWiki, and more. See the Related Projects page
on the wiki [3].

We believe that strong cryptography, Free and Open Source
Software, erasure coding, and principled engineering practices
make Tahoe-LAFS safer than RAID, removable drive, tape,
on-line backup or "cloud storage" systems.

This software is developed under test-driven development, and
there are no known bugs or security flaws which would
compromise confidentiality or data integrity under recommended
use. (For all currently known issues please see the
known_issues.txt file [4].)


COMPATIBILITY

This release is fully compatible with the version 1 series of
Tahoe-LAFS. Clients from this release can write files and
directories in the format used by clients of all versions back
to v1.0 (which was released March 25, 2008). Clients from this
release can read files and directories produced by clients of
all versions since v1.0. Servers from this release can serve
clients of all versions back to v1.0 and clients from this
release can use servers of all versions back to v1.0.

This is the ninth release in the version 1 series. This series
of Tahoe-LAFS will be actively supported and maintained for
the forseeable future, and future versions of Tahoe-LAFS will
retain the ability to read and write files compatible with
Tahoe-LAFS v1.


LICENCE

You may use this package under the GNU General Public License,
version 2 or, at your option, any later version. See the file
"COPYING.GPL" [5] for the terms of the GNU General Public
License, version 2.

You may use this package under the Transitive Grace Period
Public Licence, version 1 or, at your option, any later
version. (The Transitive Grace Period Public Licence has
requirements similar to the GPL except that it allows you to
wait for up to twelve months after you redistribute a derived
work before releasing the source code of your derived work.)
See the file "COPYING.TGPPL.html" [6] for the terms of the
Transitive Grace Period Public Licence, version 1.

(You may choose to use this package under the terms of either
licence, at your option.)


INSTALLATION

Tahoe-LAFS works on Linux, Mac OS X, Windows, Cygwin, Solaris,
*BSD, and probably most other systems. Start with
"docs/quickstart.html" [7].


HACKING AND COMMUNITY

Please join us on the mailing list [8]. Patches are gratefully
accepted -- the RoadMap page [9] shows the next improvements
that we plan to make and CREDITS [10] lists the names of people
who've contributed to the project. The Dev page [11] contains
resources for hackers.


SPONSORSHIP

Tahoe-LAFS was originally developed by Allmydata, Inc., a
provider of commercial backup services. After discontinuing
funding of Tahoe-LAFS R&D in early 2009, they have continued
to provide servers, bandwidth, small personal gifts as tokens
of appreciation, and bug reports. Thank you to Allmydata,
Inc. for their generous and public-spirited support.

Google, Inc. is sponsoring Tahoe-LAFS development as part of
the Google Summer of Code 2010. Google suggested that we
should apply for the Summer of Code program, and when we did
they generously awarded four sponsorships to students from
around the world to hack on Tahoe-LAFS this summer. Thank you
to Google, Inc. for their generous and public-spirited
support.


HACK TAHOE-LAFS!

If you can find a security flaw in Tahoe-LAFS which is serious
enough that feel compelled to warn our users and issue a fix,
then we will award you with a customized t-shirts with your
exploit printed on it and add you to the "Hack Tahoe-LAFS Hall
Of Fame" [12].


ACKNOWLEDGEMENTS

This is the fifth release of Tahoe-LAFS to be created solely
as a labor of love by volunteers. Thank you very much to the
team of "hackers in the public interest" who make Tahoe-LAFS
possible. In this release we especially owe thanks to
David-Sarah Hopwood, who has dedicated many late nights to the
project and displayed superb software engineering skills.

Zooko Wilcox-O'Hearn
on behalf of the Tahoe-LAFS team

June 18, 2010
Boulder, Colorado, USA

[1] http://tahoe-lafs.org/trac/tahoe/browser/relnotes.txt?rev=4244
[2] http://tahoe-lafs.org/trac/tahoe/browser/NEWS?rev=4254
[3] http://tahoe-lafs.org/trac/tahoe/wiki/RelatedProjects
[4] http://tahoe-lafs.org/trac/tahoe/browser/docs/known_issues.txt
[5] http://tahoe-lafs.org/trac/tahoe/browser/COPYING.GPL
[6] http://tahoe-lafs.org/source/tahoe/trunk/COPYING.TGPPL.html
[7] http://tahoe-lafs.org/source/tahoe/trunk/docs/quickstart.html
[8] http://tahoe-lafs.org/cgi-bin/mailman/listinfo/tahoe-dev
[9] http://tahoe-lafs.org/trac/tahoe/roadmap
[10] http://tahoe-lafs.org/trac/tahoe/browser/CREDITS?rev=4511
[11] http://tahoe-lafs.org/trac/tahoe/wiki/Dev
[12] http://tahoe-lafs.org/hacktahoelafs/


From exarkun at twistedmatrix.com  Tue Jun 22 10:53:43 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 22 Jun 2010 14:53:43 -0000
Subject: [Twisted-Python] Twisted 10.1.0pre1 released -- please test!
In-Reply-To: <AANLkTikyD30DQ3WJ83_bBGcbfkaknLMf3E3DlSjP04Ui@mail.gmail.com>
References: <AANLkTikyD30DQ3WJ83_bBGcbfkaknLMf3E3DlSjP04Ui@mail.gmail.com>
Message-ID: <20100622145343.1937.207066716.divmod.xquotient.8@localhost.localdomain>

On 19 Jun, 12:35 pm, jml at mumak.net wrote:
>> From the dank and grey depths of a London summer, a thin, reedy voice
>wanders across the waves of the Internet, saying that it's jolly well
>pleased to announce the first 10.1.0 pre-release.

Can we also mention in the future announcements that this will be the 
last Twisted release which supports Python 2.4 on Windows?

Jean-Paul


From jml at mumak.net  Tue Jun 22 11:29:25 2010
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 22 Jun 2010 16:29:25 +0100
Subject: [Twisted-Python] Twisted 10.1.0pre1 released -- please test!
In-Reply-To: <20100622145343.1937.207066716.divmod.xquotient.8@localhost.localdomain>
References: <AANLkTikyD30DQ3WJ83_bBGcbfkaknLMf3E3DlSjP04Ui@mail.gmail.com>
	<20100622145343.1937.207066716.divmod.xquotient.8@localhost.localdomain>
Message-ID: <AANLkTinckqKMNh7HW1Z0kyuum24aWymNqMRFxNcvaoRP@mail.gmail.com>

On Tue, Jun 22, 2010 at 3:53 PM,  <exarkun at twistedmatrix.com> wrote:
> On 19 Jun, 12:35 pm, jml at mumak.net wrote:
>>> From the dank and grey depths of a London summer, a thin, reedy voice
>>wanders across the waves of the Internet, saying that it's jolly well
>>pleased to announce the first 10.1.0 pre-release.
>
> Can we also mention in the future announcements that this will be the
> last Twisted release which supports Python 2.4 on Windows?

Easily done.

jml


From peter.westlake at pobox.com  Tue Jun 22 13:35:42 2010
From: peter.westlake at pobox.com (Peter Westlake)
Date: Tue, 22 Jun 2010 18:35:42 +0100
Subject: [Twisted-Python] ANNOUNCING Tahoe,
 the Least-Authority File System, v1.7.0
In-Reply-To: <AANLkTilxV-15WiSOcey_TfevBP7LWGFdCDmOCojlxL7g@mail.gmail.com>
References: <AANLkTilxV-15WiSOcey_TfevBP7LWGFdCDmOCojlxL7g@mail.gmail.com>
Message-ID: <1277228142.10077.1381370863@webmail.messagingengine.com>

On Mon, 21 Jun 2010 10:45 -0700, "Zooko O'Whielacronx" <zooko at zooko.com>
wrote:
> Dear people of twisted-python:
> 
> We just released Tahoe-LAFS v1.7. The major new feature is an SFTP
> server. This means that (with enough installing software and tinkering
> with your operating system configuration) you can have a
> normal-looking mount point backed by a Tahoe-LAFS grid.

Splendid!

I downloaded it and typed "python setup.py build", and it went off and
started building a copy of Twisted 10.0! Will that be installed on my
system, or will it only affect the Tahoe build? I can't afford to move
to 10.0 until I've had time to track down a certain bug that appeared
between 2.5.0 and version 8.

Peter.


From jeandaniel.browne at gmail.com  Wed Jun 23 12:23:40 2010
From: jeandaniel.browne at gmail.com (Jean Daniel)
Date: Wed, 23 Jun 2010 18:23:40 +0200
Subject: [Twisted-Python] in a factory: assert not self.usedUp
Message-ID: <AANLkTilM5wTVz7m1VIecw5TXK_-LJ29t5n6BBqcT-Lr8@mail.gmail.com>

Hello,

I have three questions on a code examples, and actually I have seen
this pattern in several places in Twisted. The code are copied from
twisted/doc/mail/examples/imap4client.py

1. In the code below, what is the purpose of an assert checking that
the member attribute promptDeferred is empty in the prompt method? Is
this some kind of documentation saying "the attribute is ALWAYS empty
when this function is called"?

2. It seems that there is the protocol's deferred and the protocol are
unlinked before the deferred is fired. What would happen if the
defered was fired while it is still held in an attribute of the
protocol?

class TrivialPrompter(basic.LineReceiver):

    from os import linesep as delimiter

    promptDeferred = None

    def prompt(self, msg):

        assert self.promptDeferred is None    #  1.
        self.display(msg)
        self.promptDeferred = defer.Deferred()
        return self.promptDeferred

    def display(self,msg):
        self.transport.write(msg)

    def lineReceived(self, line):
        if self.promptDeferred is None:
            return
        d, self.promptDeferred = self.promptDeferred, None     # 2.
        d.callback(line)


3. Third question, in the factory below, there is an attribute usedUp
set at False by default and set to True late in the buildprotocol
method. There is an assert making sure the factory is only used once,
checking that usedUp is False at the beginning of buildprotocol(). Why
it is so important that the factory must be used only once? What would
happens otherwise?

class SimpleIMAP4ClientFactory(protocol.ClientFactory):
    usedUp = False

    protocol = SimpleIMAP4Client

    def __init__(self, username, onConn):
        self.ctx = ssl.ClientContextFactory()

        self.username = username
        self.onConn = onConn

    def buildProtocol(self, addr):
        assert not self.usedUp           # 3.
        self.usedUp = True

        p = self.protocol(self.ctx)
        p.factory = self
        p.greetDeferred = self.onConn

        auth = imap4.CramMD5ClientAuthenticator(self.username)
        p.registerAuthenticator(auth)

        return p


Thanks for your help,


From exarkun at twistedmatrix.com  Wed Jun 23 15:06:11 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 23 Jun 2010 19:06:11 -0000
Subject: [Twisted-Python] in a factory: assert not self.usedUp
In-Reply-To: <AANLkTilM5wTVz7m1VIecw5TXK_-LJ29t5n6BBqcT-Lr8@mail.gmail.com>
References: <AANLkTilM5wTVz7m1VIecw5TXK_-LJ29t5n6BBqcT-Lr8@mail.gmail.com>
Message-ID: <20100623190611.1937.387119165.divmod.xquotient.16@localhost.localdomain>

On 04:23 pm, jeandaniel.browne at gmail.com wrote:
>Hello,
>
>I have three questions on a code examples, and actually I have seen
>this pattern in several places in Twisted. The code are copied from
>twisted/doc/mail/examples/imap4client.py
>
>1. In the code below, what is the purpose of an assert checking that
>the member attribute promptDeferred is empty in the prompt method? Is
>this some kind of documentation saying "the attribute is ALWAYS empty
>when this function is called"?

It's a safeguard against the method being called a second time before 
the response to the first call has been received.  Imagine code using 
the function like this if the assert weren't there:

    d1 = prompter.prompt("Answer this")
    d2 = prompter.prompt("Now answer this")
>
>2. It seems that there is the protocol's deferred and the protocol are
>unlinked before the deferred is fired. What would happen if the
>defered was fired while it is still held in an attribute of the
>protocol?

Consider what would happen if there were a callback on `promptDeferred` 
which called the `prompt` method.
>
>class TrivialPrompter(basic.LineReceiver):
>
>    from os import linesep as delimiter
>
>    promptDeferred = None
>
>    def prompt(self, msg):
>
>        assert self.promptDeferred is None    #  1.
>        self.display(msg)
>        self.promptDeferred = defer.Deferred()
>        return self.promptDeferred
>
>    def display(self,msg):
>        self.transport.write(msg)
>
>    def lineReceived(self, line):
>        if self.promptDeferred is None:
>            return
>        d, self.promptDeferred = self.promptDeferred, None     # 2.
>        d.callback(line)
>
>
>3. Third question, in the factory below, there is an attribute usedUp
>set at False by default and set to True late in the buildprotocol
>method. There is an assert making sure the factory is only used once,
>checking that usedUp is False at the beginning of buildprotocol(). Why
>it is so important that the factory must be used only once? What would
>happens otherwise?
>
>class SimpleIMAP4ClientFactory(protocol.ClientFactory):
>    usedUp = False
>
>    protocol = SimpleIMAP4Client
>
>    def __init__(self, username, onConn):
>        self.ctx = ssl.ClientContextFactory()
>
>        self.username = username
>        self.onConn = onConn
>
>    def buildProtocol(self, addr):
>        assert not self.usedUp           # 3.
>        self.usedUp = True
>
>        p = self.protocol(self.ctx)
>        p.factory = self
>        p.greetDeferred = self.onConn
>
>        auth = imap4.CramMD5ClientAuthenticator(self.username)
>        p.registerAuthenticator(auth)
>
>        return p

There's only one Deferred referenced by `self.onConn`.  If you ever got 
to a second connection, the Deferred would have its `callback` method 
invoked a second time which would raise an exception.
>
>Thanks for your help,

You're welcome.

Jean-Paul


From micahel at gmail.com  Thu Jun 24 07:14:27 2010
From: micahel at gmail.com (Michael Hudson-Doyle)
Date: Thu, 24 Jun 2010 12:14:27 +0100
Subject: [Twisted-Python] making Screwtape (Tim Allen) a committer
In-Reply-To: <FF6ABFC8-334F-4554-955E-CE4B34F56C2E@twistedmatrix.com>
References: <FF6ABFC8-334F-4554-955E-CE4B34F56C2E@twistedmatrix.com>
Message-ID: <AANLkTinq_yPQwt26ZXHNlNSTbXiUgeafw4kPN5DfvjMP@mail.gmail.com>

On 9 June 2010 23:25, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> I think we should give screwtape an SVN account and make him an official reviewer. ?He's been doing a lot of work on the distutils code which would be made easier by that, and he's been doing pretty decent reviews.
>
> Thoughts? ?(Feel free to voice any comments off-list, too.)

OK, so this is extreme pedantry but I didn't think Twisted had the
concept of official reviewer :-)

Cheers,
mwh


From rlotun at gmail.com  Thu Jun 24 07:21:54 2010
From: rlotun at gmail.com (Reza Lotun)
Date: Thu, 24 Jun 2010 12:21:54 +0100
Subject: [Twisted-Python] twistedmatrix.com renewal
Message-ID: <AANLkTinRqTceWE-WtfFsuryTvnSQUTgM-NII97FHfi1c@mail.gmail.com>

It appears that the twistedmatrix.com domain has expired!

-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   reza at tweetdeck.com
twitter: @rlotun


From mithrandi at mithrandi.net  Thu Jun 24 13:17:34 2010
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Thu, 24 Jun 2010 19:17:34 +0200
Subject: [Twisted-Python] making Screwtape (Tim Allen) a committer
In-Reply-To: <AANLkTinq_yPQwt26ZXHNlNSTbXiUgeafw4kPN5DfvjMP@mail.gmail.com>
References: <FF6ABFC8-334F-4554-955E-CE4B34F56C2E@twistedmatrix.com>
	<AANLkTinq_yPQwt26ZXHNlNSTbXiUgeafw4kPN5DfvjMP@mail.gmail.com>
Message-ID: <AANLkTilNyHvxLaYsjRLQyRFvJcgzbkCcVYDCgNAcoxsk@mail.gmail.com>

On Thu, Jun 24, 2010 at 1:14 PM, Michael Hudson-Doyle <micahel at gmail.com> wrote:
> On 9 June 2010 23:25, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>> I think we should give screwtape an SVN account and make him an official reviewer. ?He's been doing a lot of work on the distutils code which would be made easier by that, and he's been doing pretty decent reviews.
>>
>> Thoughts? ?(Feel free to voice any comments off-list, too.)
>
> OK, so this is extreme pedantry but I didn't think Twisted had the
> concept of official reviewer :-)

There seems to be a policy, although I'm not sure if this is actually
written down anywhere, that for a branch/patch to be merged to trunk,
either the author should be a committer, or (one of) the reviewer(s)
should be a committer.

So, I guess an "official" reviewer would just be someone with commit access?
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From warner at lothar.com  Thu Jun 24 17:04:52 2010
From: warner at lothar.com (Brian Warner)
Date: Thu, 24 Jun 2010 14:04:52 -0700
Subject: [Twisted-Python] ANNOUNCING Tahoe,
 the Least-Authority File System, v1.7.0
In-Reply-To: <1277228142.10077.1381370863@webmail.messagingengine.com>
References: <AANLkTilxV-15WiSOcey_TfevBP7LWGFdCDmOCojlxL7g@mail.gmail.com>
	<1277228142.10077.1381370863@webmail.messagingengine.com>
Message-ID: <4C23C874.2050404@lothar.com>

On 6/22/10 10:35 AM, Peter Westlake wrote:


> I downloaded it and typed "python setup.py build", and it went off and
> started building a copy of Twisted 10.0! Will that be installed on my
> system, or will it only affect the Tahoe build?

Using "setup.py build" should not affect anything outside of your source 
directory: it should create a Twisted .egg and store/use it in the 
support/lib subdir of your Tahoe source checkout. Tahoe should be the 
only thing that sees the new Twisted.

In contrast, I suspect that "setup.py install" *would* install all the 
dependencies (as well as Tahoe itself) onto your system.

In general, just don't run anything as root, and you should be ok.

cheers,
  -Brian



From jaroslaw.fedewicz at gmail.com  Thu Jun 24 17:24:17 2010
From: jaroslaw.fedewicz at gmail.com (Yaroslav Fedevych)
Date: Fri, 25 Jun 2010 00:24:17 +0300
Subject: [Twisted-Python] ANNOUNCING Tahoe,
	the Least-Authority File 	System, v1.7.0
In-Reply-To: <4C23C874.2050404@lothar.com>
References: <AANLkTilxV-15WiSOcey_TfevBP7LWGFdCDmOCojlxL7g@mail.gmail.com>
	<1277228142.10077.1381370863@webmail.messagingengine.com>
	<4C23C874.2050404@lothar.com>
Message-ID: <AANLkTilhWS2KX9ZoRrtA5BzZlR7O3gSjr5pXPFATDSaV@mail.gmail.com>

On Fri, Jun 25, 2010 at 12:04 AM, Brian Warner <warner at lothar.com> wrote:
> On 6/22/10 10:35 AM, Peter Westlake wrote:
>
>
>> I downloaded it and typed "python setup.py build", and it went off and
>> started building a copy of Twisted 10.0! Will that be installed on my
>> system, or will it only affect the Tahoe build?
>
> Using "setup.py build" should not affect anything outside of your source
> directory: it should create a Twisted .egg and store/use it in the
> support/lib subdir of your Tahoe source checkout. Tahoe should be the
> only thing that sees the new Twisted.
>
> In contrast, I suspect that "setup.py install" *would* install all the
> dependencies (as well as Tahoe itself) onto your system.
>
> In general, just don't run anything as root, and you should be ok.
>

Well there's also virtualenv ? won't it help?


From glyph at twistedmatrix.com  Thu Jun 24 18:39:52 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 24 Jun 2010 18:39:52 -0400
Subject: [Twisted-Python] twistedmatrix.com renewal
In-Reply-To: <AANLkTinRqTceWE-WtfFsuryTvnSQUTgM-NII97FHfi1c@mail.gmail.com>
References: <AANLkTinRqTceWE-WtfFsuryTvnSQUTgM-NII97FHfi1c@mail.gmail.com>
Message-ID: <EB1C0B46-C432-49C2-92F8-3F7FD6FA58F9@twistedmatrix.com>

On Jun 24, 2010, at 7:21 AM, Reza Lotun wrote:

> It appears that the twistedmatrix.com domain has expired!

I think it's pretty funny that you sent this to a twistedmatrix.com address :).

Some DNS caches are still propagating, but the issue was fixed around noon EST.

From glyph at twistedmatrix.com  Thu Jun 24 19:57:28 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 24 Jun 2010 19:57:28 -0400
Subject: [Twisted-Python] Twisted 10.1.0pre1 released -- please test!
In-Reply-To: <AANLkTikyD30DQ3WJ83_bBGcbfkaknLMf3E3DlSjP04Ui@mail.gmail.com>
References: <AANLkTikyD30DQ3WJ83_bBGcbfkaknLMf3E3DlSjP04Ui@mail.gmail.com>
Message-ID: <28A5172F-7F48-43FE-A93B-A8133107133C@twistedmatrix.com>

On Jun 19, 2010, at 8:35 AM, Jonathan Lange wrote:

> From the dank and grey depths of a London summer, a thin, reedy voice
> wanders across the waves of the Internet, saying that it's jolly well
> pleased to announce the first 10.1.0 pre-release.

...

> Please download the tarballs and test them as much as possible.

I'd like to strongly encourage everyone subscribed to this list to respond to this request.

In particular, you should note that if Twisted 10.1.0 pre1 horribly breaks your software, you can pipe up and say "hey!  don't release it yet!", and we may listen to you.  Even if maybe you were calling some private APIs or doing something gross and weird, there will be time to talk about it.  If you discover a legitimate regression, where we've broken something that really should have been considered public, we will fix it before the final release.

On the other hand, if you don't test any prereleases, and you discover that your application is broken by Twisted 10.1 the day after the *final* release, you will be screwed.  We won't roll it back and we might not prioritize your regression particularly highly (unless you decide to become a particularly generous sponsor, of course ;-)).

If you have software that depends on Twisted, it is definitely in your best interest to test the pre-releases and let us know how it worked out.

For my part, I have some things which are broken by the prerelease, but the breakage is entirely the fault of other software, so I need to go fix that before I can offer any proper feedback.

If you have tried the pre-release and it works well, drop us a line and say so!  Positive results are useful too.

Thanks,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100624/35b26239/attachment.htm 

From zooko at zooko.com  Thu Jun 24 21:34:58 2010
From: zooko at zooko.com (Zooko O'Whielacronx)
Date: Thu, 24 Jun 2010 18:34:58 -0700
Subject: [Twisted-Python] ANNOUNCING Tahoe,
	the Least-Authority File 	System, v1.7.0
In-Reply-To: <1277228142.10077.1381370863@webmail.messagingengine.com>
References: <AANLkTilxV-15WiSOcey_TfevBP7LWGFdCDmOCojlxL7g@mail.gmail.com>
	<1277228142.10077.1381370863@webmail.messagingengine.com>
Message-ID: <AANLkTin-VRNMLoBcUlPfgb55tMKigoKdTKCOx1whJHHp@mail.gmail.com>

On Tue, Jun 22, 2010 at 10:35 AM, Peter Westlake
<peter.westlake at pobox.com> wrote:
>
> I downloaded it and typed "python setup.py build", and it went off and
> started building a copy of Twisted 10.0!

That's funny. Could you please run:

python -c "import pkg_resources;print pkg_resources.require('Twisted')"

>  Will that be installed on my system, or will it only affect the Tahoe build?

(Brian Warner answered this.)

>  I can't afford to move
> to 10.0 until I've had time to track down a certain bug that appeared
> between 2.5.0 and version 8.

Do you have a ticket # for that bug?

Regards,

Zooko


From rlotun at gmail.com  Fri Jun 25 02:10:41 2010
From: rlotun at gmail.com (Reza Lotun)
Date: Fri, 25 Jun 2010 07:10:41 +0100
Subject: [Twisted-Python] twistedmatrix.com renewal
In-Reply-To: <EB1C0B46-C432-49C2-92F8-3F7FD6FA58F9@twistedmatrix.com>
References: <AANLkTinRqTceWE-WtfFsuryTvnSQUTgM-NII97FHfi1c@mail.gmail.com>
	<EB1C0B46-C432-49C2-92F8-3F7FD6FA58F9@twistedmatrix.com>
Message-ID: <CAB387B3-FE12-4306-8457-E106BB402C2C@gmail.com>

On 24 Jun 2010, at 23:39, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> On Jun 24, 2010, at 7:21 AM, Reza Lotun wrote:
> 
>> It appears that the twistedmatrix.com domain has expired!
> 
> I think it's pretty funny that you sent this to a twistedmatrix.com address :).

Heh, right. Forgot this wasn't a google group. Anyway happy that this is now resolved.

Cheers,
Reza

From jml at mumak.net  Fri Jun 25 08:59:09 2010
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 25 Jun 2010 13:59:09 +0100
Subject: [Twisted-Python] Twisted 10.1.0pre1 released -- please test!
In-Reply-To: <28A5172F-7F48-43FE-A93B-A8133107133C@twistedmatrix.com>
References: <AANLkTikyD30DQ3WJ83_bBGcbfkaknLMf3E3DlSjP04Ui@mail.gmail.com>
	<28A5172F-7F48-43FE-A93B-A8133107133C@twistedmatrix.com>
Message-ID: <AANLkTilEFUfxkBfJSb6QA88i1AdN4bPhjrNDgfPz6-EC@mail.gmail.com>

On Fri, Jun 25, 2010 at 12:57 AM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> ...
>
> Please download the tarballs and test them as much as possible.
>
...
> In particular, you should note that if Twisted 10.1.0 pre1 horribly breaks
> your software, you can pipe up and say "hey! ?don't release it yet!", and we
> may listen to you.
...
> On the other hand, if you don't test any prereleases, and you discover that
> your application is broken by Twisted 10.1 the day after the *final*
> release, you will be screwed.
...
> If you have software that depends on Twisted, it is definitely in your best
> interest to test the pre-releases and let us know how it worked out.
...

I plan to do the final release this weekend, unless I hear any objections.

jml


From kevin.horn at gmail.com  Fri Jun 25 11:46:59 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 25 Jun 2010 10:46:59 -0500
Subject: [Twisted-Python] Twisted 10.1.0pre1 released -- please test!
In-Reply-To: <AANLkTilEFUfxkBfJSb6QA88i1AdN4bPhjrNDgfPz6-EC@mail.gmail.com>
References: <AANLkTikyD30DQ3WJ83_bBGcbfkaknLMf3E3DlSjP04Ui@mail.gmail.com>
	<28A5172F-7F48-43FE-A93B-A8133107133C@twistedmatrix.com>
	<AANLkTilEFUfxkBfJSb6QA88i1AdN4bPhjrNDgfPz6-EC@mail.gmail.com>
Message-ID: <AANLkTilH079M1daaYDhdr_iYh3qcfw0WKiKgpZSXBxVu@mail.gmail.com>

I pulled down the tarball and installed using 'setup.py install' and ran the
tests on Win XP + Py2.6

A number of tests failed, though I'm not sure how many are really
meaningful.  Mostly seems to be
'reactor unclean' type stuff that doesn't happen on every run.

At any rate, output of test failures attached.  Hope it's useful.

Kevin Horn

On Fri, Jun 25, 2010 at 7:59 AM, Jonathan Lange <jml at mumak.net> wrote:

> On Fri, Jun 25, 2010 at 12:57 AM, Glyph Lefkowitz
> <glyph at twistedmatrix.com> wrote:
> > ...
> >
> > Please download the tarballs and test them as much as possible.
> >
> ...
> > In particular, you should note that if Twisted 10.1.0 pre1 horribly
> breaks
> > your software, you can pipe up and say "hey!  don't release it yet!", and
> we
> > may listen to you.
> ...
> > On the other hand, if you don't test any prereleases, and you discover
> that
> > your application is broken by Twisted 10.1 the day after the *final*
> > release, you will be screwed.
> ...
> > If you have software that depends on Twisted, it is definitely in your
> best
> > interest to test the pre-releases and let us know how it worked out.
> ...
>
> I plan to do the final release this weekend, unless I hear any objections.
>
> jml
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100625/1bd469ac/attachment-0001.htm 
-------------- next part --------------

Reason: 'XPath queries with position are not working.'
Traceback (most recent call last):
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\words\test\test_xpath.py", line 139, in test_position
    self.assertEquals(xp.matches(self.e), 1)
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\words\xish\xpath.py", line 288, in matches
    return self.baseLocation.matches(elem)
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\words\xish\xpath.py", line 149, in matches
    if self.childLocation.matches(c):
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\words\xish\xpath.py", line 144, in matches
    if not self.matchesPredicates(elem):
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\words\xish\xpath.py", line 138, in matchesPredicates
    if not p.value(elem):
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\words\xish\xpath.py", line 29, in value
    return elem.children[self.index]
exceptions.IndexError: list index out of range
===============================================================================
[ERROR]: twisted.test.test_ftp.BasicFTPServerTestCase.testDecodeHostPort

Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
DelayedCalls: (set twisted.internet.base.DelayedCall.debug = True to debug)
<DelayedCall 0x3d9e710 [600.0s] called=0 cancelled=0 FTP.__timedOut()>
===============================================================================
[ERROR]: twisted.test.test_ftp.BasicFTPServerTestCase.testDecodeHostPort

Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
Selectables:
<ProtocolWrapper #0 on 3307>
===============================================================================
[ERROR]: twisted.test.test_ftp.BasicFTPServerTestCase.test_portRange

Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
DelayedCalls: (set twisted.internet.base.DelayedCall.debug = True to debug)
<DelayedCall 0x31ff738 [599.985000134s] called=0 cancelled=0 FTP.__timedOut()>
===============================================================================
[ERROR]: twisted.test.test_ftp.BasicFTPServerTestCase.test_portRange

Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
Selectables:
<ProtocolWrapper #0 on 3332>
===============================================================================
[ERROR]: twisted.test.test_ftp.FTPServerTestCaseAdvancedClient.test_anonymousSTO
R

Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
Selectables:
<DTP #0 on 3502>
===============================================================================
[ERROR]: twisted.test.test_plugin.DeveloperSetupTests.test_developmentPluginAvai
lability

Traceback (most recent call last):
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\test\test_plugin.py", line 385, in setUp
    True, 'plugindummy_builtin')
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\test\test_plugin.py", line 357, in _createPluginDummy
    plugs.child(pluginModule + '.py').setContent(pluginContent)
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 745, in setContent
    f = sib.open('w')
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 495, in open
    return self.create()
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 771, in create
    fdint = os.open(self.path, _CREATE_FLAGS)
exceptions.OSError: [Errno 2] No such file or directory: 'C:\\Documents and Sett
ings\\funsize\\Desktop\\Twisted-10.1.0pre1.tar\\Twisted-10.1.0pre1\\_trial_temp\
\twisted.test.test_plugin\\DeveloperSetupTests\\test_developmentPluginAvailabili
\\lj1jrh\\temp\\system_path\\plugindummy\\plugins\\bL4o_HG2AogVCl08plugindummy_b
uiltin.py.new'
===============================================================================
[ERROR]: twisted.test.test_plugin.DeveloperSetupTests.test_freshPyReplacesStaleP
yc

Traceback (most recent call last):
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\test\test_plugin.py", line 388, in setUp
    True, 'plugindummy_builtin')
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\test\test_plugin.py", line 357, in _createPluginDummy
    plugs.child(pluginModule + '.py').setContent(pluginContent)
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 745, in setContent
    f = sib.open('w')
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 495, in open
    return self.create()
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 771, in create
    fdint = os.open(self.path, _CREATE_FLAGS)
exceptions.OSError: [Errno 2] No such file or directory: 'C:\\Documents and Sett
ings\\funsize\\Desktop\\Twisted-10.1.0pre1.tar\\Twisted-10.1.0pre1\\_trial_temp\
\twisted.test.test_plugin\\DeveloperSetupTests\\test_freshPyReplacesStalePyc\\ei
jvm5\\temp\\development_path\\plugindummy\\plugins\\k1FxO3nGdKTA947pplugindummy_
builtin.py.new'
===============================================================================
[ERROR]: twisted.test.test_plugin.DeveloperSetupTests.test_newPluginsOnReadOnlyP
ath

Traceback (most recent call last):
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\test\test_plugin.py", line 388, in setUp
    True, 'plugindummy_builtin')
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\test\test_plugin.py", line 357, in _createPluginDummy
    plugs.child(pluginModule + '.py').setContent(pluginContent)
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 745, in setContent
    f = sib.open('w')
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 495, in open
    return self.create()
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 771, in create
    fdint = os.open(self.path, _CREATE_FLAGS)
exceptions.OSError: [Errno 2] No such file or directory: 'C:\\Documents and Sett
ings\\funsize\\Desktop\\Twisted-10.1.0pre1.tar\\Twisted-10.1.0pre1\\_trial_temp\
\twisted.test.test_plugin\\DeveloperSetupTests\\test_newPluginsOnReadOnlyPath\\x
nwlp5\\temp\\development_path\\plugindummy\\plugins\\9bQBv0TosqUtpU43plugindummy
_builtin.py.new'
===============================================================================
[ERROR]: twisted.test.test_tcp.CannotBindTestCase.test_clientBind

Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
Selectables:
<AccumulatingProtocol #0 on 3793>
===============================================================================
[ERROR]: twisted.test.test_tcp.HalfCloseBuggyApplicationTests.test_writeNotifica
tionRaises

Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
Selectables:
<MyHCProtocol #0 on 3813>
===============================================================================
[ERROR]: twisted.test.test_tcp.PauseProducingTestCase.test_pauseProducingInConne
ctionMade

Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
Selectables:
<AccumulatingProtocol #0 on 3863>
===============================================================================
[ERROR]: twisted.trial.test.test_runner.TestUntilFailure.test_runUntilFailureDec
orate

Traceback (most recent call last):
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\trial\test\test_runner.py", line 628, in test_runUntilFailureDecorate
    result = self.runner.runUntilFailure(self.test)
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\trial\runner.py", line 920, in runUntilFailure
    result = self._runWithoutDecoration(test)
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\trial\runner.py", line 889, in _runWithoutDecoration
    self._tearDownTestdir(oldDir)
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\trial\runner.py", line 794, in _tearDownTestdir
    self._testDirLock.unlock()
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\lockfile.py", line 188, in unlock
    rmlink(self.name)
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\lockfile.py", line 81, in rmlink
    os.remove(os.path.join(filename, 'symlink'))
exceptions.WindowsError: [Error 5] Access is denied: 'C:\\Documents and Settings
\\funsize\\Desktop\\Twisted-10.1.0pre1.tar\\Twisted-10.1.0pre1\\_trial_temp\\_tr
ial_temp.lock\\symlink'
===============================================================================
[ERROR]: twisted.web.test.test_webclient.WebClientSSLTestCase.test_downloadTimeo
ut

Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
Selectables:
<<class 'twisted.internet.tcp.TLSConnection'> to ('127.0.0.1', 4024) at 29fb290>

<<class 'twisted.internet.tcp.TLSConnection'> to ('127.0.0.1', 4024) at 29fb630>

===============================================================================
[ERROR]: twisted.web.test.test_webclient.WebClientTestCase.test_afterFoundGet

Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
Selectables:
<<class 'twisted.internet.tcp.Client'> to ('127.0.0.1', 4086) at 27b70b0>
===============================================================================
[ERROR]: twisted.web.test.test_xmlrpc.XMLRPCTestIntrospection.test_errors

Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
Selectables:
<<class 'twisted.internet.tcp.Client'> to ('127.0.0.1', 4233) at 5de2e10>
-------------------------------------------------------------------------------
Ran 5946 tests in 480.891s

FAILED (skips=845, expectedFailures=12, errors=15, successes=5083)

C:\Documents and Settings\funsize\Desktop\Twisted-10.1.0pre1.tar\Twisted-10.1.0p
re1>

From kevin.horn at gmail.com  Fri Jun 25 12:28:41 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 25 Jun 2010 11:28:41 -0500
Subject: [Twisted-Python] Twisted 10.1.0pre1 released -- please test!
In-Reply-To: <AANLkTilH079M1daaYDhdr_iYh3qcfw0WKiKgpZSXBxVu@mail.gmail.com>
References: <AANLkTikyD30DQ3WJ83_bBGcbfkaknLMf3E3DlSjP04Ui@mail.gmail.com>
	<28A5172F-7F48-43FE-A93B-A8133107133C@twistedmatrix.com>
	<AANLkTilEFUfxkBfJSb6QA88i1AdN4bPhjrNDgfPz6-EC@mail.gmail.com>
	<AANLkTilH079M1daaYDhdr_iYh3qcfw0WKiKgpZSXBxVu@mail.gmail.com>
Message-ID: <AANLkTimnt49VMggMk_1ydEUEWV3NgJRmXD7EPyMC8wfQ@mail.gmail.com>

Running trial with the --unclean-warnings flag, I get only 3 failures.
Attached.

Kevin Horn

On Fri, Jun 25, 2010 at 10:46 AM, Kevin Horn <kevin.horn at gmail.com> wrote:

> I pulled down the tarball and installed using 'setup.py install' and ran
> the tests on Win XP + Py2.6
>
> A number of tests failed, though I'm not sure how many are really
> meaningful.  Mostly seems to be
> 'reactor unclean' type stuff that doesn't happen on every run.
>
> At any rate, output of test failures attached.  Hope it's useful.
>
> Kevin Horn
>
>
> On Fri, Jun 25, 2010 at 7:59 AM, Jonathan Lange <jml at mumak.net> wrote:
>
>> On Fri, Jun 25, 2010 at 12:57 AM, Glyph Lefkowitz
>> <glyph at twistedmatrix.com> wrote:
>> > ...
>> >
>> > Please download the tarballs and test them as much as possible.
>> >
>> ...
>> > In particular, you should note that if Twisted 10.1.0 pre1 horribly
>> breaks
>> > your software, you can pipe up and say "hey!  don't release it yet!",
>> and we
>> > may listen to you.
>> ...
>> > On the other hand, if you don't test any prereleases, and you discover
>> that
>> > your application is broken by Twisted 10.1 the day after the *final*
>> > release, you will be screwed.
>> ...
>> > If you have software that depends on Twisted, it is definitely in your
>> best
>> > interest to test the pre-releases and let us know how it worked out.
>> ...
>>
>> I plan to do the final release this weekend, unless I hear any objections.
>>
>> jml
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100625/ef052415/attachment.htm 
-------------- next part --------------
===============================================================================
[ERROR]: twisted.test.test_plugin.DeveloperSetupTests.test_developmentPluginAvai
lability

Traceback (most recent call last):
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\test\test_plugin.py", line 385, in setUp
    True, 'plugindummy_builtin')
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\test\test_plugin.py", line 357, in _createPluginDummy
    plugs.child(pluginModule + '.py').setContent(pluginContent)
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 745, in setContent
    f = sib.open('w')
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 495, in open
    return self.create()
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 771, in create
    fdint = os.open(self.path, _CREATE_FLAGS)
exceptions.OSError: [Errno 2] No such file or directory: 'C:\\Documents and Sett
ings\\funsize\\Desktop\\Twisted-10.1.0pre1.tar\\Twisted-10.1.0pre1\\_trial_temp\
\twisted.test.test_plugin\\DeveloperSetupTests\\test_developmentPluginAvailabili
\\43lvnu\\temp\\system_path\\plugindummy\\plugins\\b1J3lmxYhIK04qjOplugindummy_b
uiltin.py.new'
===============================================================================
[ERROR]: twisted.test.test_plugin.DeveloperSetupTests.test_freshPyReplacesStaleP
yc

Traceback (most recent call last):
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\test\test_plugin.py", line 388, in setUp
    True, 'plugindummy_builtin')
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\test\test_plugin.py", line 357, in _createPluginDummy
    plugs.child(pluginModule + '.py').setContent(pluginContent)
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 745, in setContent
    f = sib.open('w')
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 495, in open
    return self.create()
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 771, in create
    fdint = os.open(self.path, _CREATE_FLAGS)
exceptions.OSError: [Errno 2] No such file or directory: 'C:\\Documents and Sett
ings\\funsize\\Desktop\\Twisted-10.1.0pre1.tar\\Twisted-10.1.0pre1\\_trial_temp\
\twisted.test.test_plugin\\DeveloperSetupTests\\test_freshPyReplacesStalePyc\\za
dri7\\temp\\development_path\\plugindummy\\plugins\\CZIjtvOP6Kqa-6npplugindummy_
builtin.py.new'
===============================================================================
[ERROR]: twisted.test.test_plugin.DeveloperSetupTests.test_newPluginsOnReadOnlyP
ath

Traceback (most recent call last):
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\test\test_plugin.py", line 388, in setUp
    True, 'plugindummy_builtin')
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\test\test_plugin.py", line 357, in _createPluginDummy
    plugs.child(pluginModule + '.py').setContent(pluginContent)
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 745, in setContent
    f = sib.open('w')
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 495, in open
    return self.create()
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 771, in create
    fdint = os.open(self.path, _CREATE_FLAGS)
exceptions.OSError: [Errno 2] No such file or directory: 'C:\\Documents and Sett
ings\\funsize\\Desktop\\Twisted-10.1.0pre1.tar\\Twisted-10.1.0pre1\\_trial_temp\
\twisted.test.test_plugin\\DeveloperSetupTests\\test_newPluginsOnReadOnlyPath\\z
r1kya\\temp\\development_path\\plugindummy\\plugins\\_8_51ebohfWmCshuplugindummy
_builtin.py.new'
-------------------------------------------------------------------------------
Ran 5946 tests in 487.687s

FAILED (skips=831, expectedFailures=12, errors=3, successes=5100)

From kevin.horn at gmail.com  Fri Jun 25 14:49:03 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 25 Jun 2010 13:49:03 -0500
Subject: [Twisted-Python] Twisted 10.1.0pre1 released -- please test!
In-Reply-To: <AANLkTimnt49VMggMk_1ydEUEWV3NgJRmXD7EPyMC8wfQ@mail.gmail.com>
References: <AANLkTikyD30DQ3WJ83_bBGcbfkaknLMf3E3DlSjP04Ui@mail.gmail.com>
	<28A5172F-7F48-43FE-A93B-A8133107133C@twistedmatrix.com>
	<AANLkTilEFUfxkBfJSb6QA88i1AdN4bPhjrNDgfPz6-EC@mail.gmail.com>
	<AANLkTilH079M1daaYDhdr_iYh3qcfw0WKiKgpZSXBxVu@mail.gmail.com>
	<AANLkTimnt49VMggMk_1ydEUEWV3NgJRmXD7EPyMC8wfQ@mail.gmail.com>
Message-ID: <AANLkTinhJZoQNwrJ70CmdXt2WQpy8Ytf7dO5GI4tv2IZ@mail.gmail.com>

OK, running the tests in a higher directory (to shorten temp file path
lengths), and with the --unclean-warnings flag, I'm down to 1 failure, which
still looks like it could be some kind of transient issue, but I'm not sure.

Results attached.

Kevin Horn

On Fri, Jun 25, 2010 at 11:28 AM, Kevin Horn <kevin.horn at gmail.com> wrote:

> Running trial with the --unclean-warnings flag, I get only 3 failures.
> Attached.
>
> Kevin Horn
>
>
> On Fri, Jun 25, 2010 at 10:46 AM, Kevin Horn <kevin.horn at gmail.com> wrote:
>
>> I pulled down the tarball and installed using 'setup.py install' and ran
>> the tests on Win XP + Py2.6
>>
>> A number of tests failed, though I'm not sure how many are really
>> meaningful.  Mostly seems to be
>> 'reactor unclean' type stuff that doesn't happen on every run.
>>
>> At any rate, output of test failures attached.  Hope it's useful.
>>
>> Kevin Horn
>>
>>
>> On Fri, Jun 25, 2010 at 7:59 AM, Jonathan Lange <jml at mumak.net> wrote:
>>
>>> On Fri, Jun 25, 2010 at 12:57 AM, Glyph Lefkowitz
>>> <glyph at twistedmatrix.com> wrote:
>>> > ...
>>> >
>>> > Please download the tarballs and test them as much as possible.
>>> >
>>> ...
>>> > In particular, you should note that if Twisted 10.1.0 pre1 horribly
>>> breaks
>>> > your software, you can pipe up and say "hey!  don't release it yet!",
>>> and we
>>> > may listen to you.
>>> ...
>>> > On the other hand, if you don't test any prereleases, and you discover
>>> that
>>> > your application is broken by Twisted 10.1 the day after the *final*
>>> > release, you will be screwed.
>>> ...
>>> > If you have software that depends on Twisted, it is definitely in your
>>> best
>>> > interest to test the pre-releases and let us know how it worked out.
>>> ...
>>>
>>> I plan to do the final release this weekend, unless I hear any
>>> objections.
>>>
>>> jml
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100625/005c40b9/attachment.htm 
-------------- next part --------------
[ERROR]: twisted.web.test.test_cgi.CGI.testReadInput

Traceback (most recent call last):
Failure: twisted.internet.defer.TimeoutError: <twisted.web.test.test_cgi.CGI tes
tMethod=testReadInput> (testReadInput) still running at 5.0 secs
-------------------------------------------------------------------------------
Ran 5946 tests in 443.016s

FAILED (skips=831, expectedFailures=12, errors=1, successes=5100)

From ziga.seilnacht at gmail.com  Fri Jun 25 14:51:32 2010
From: ziga.seilnacht at gmail.com (=?windows-1252?Q?=8Eiga_Seilnacht?=)
Date: Fri, 25 Jun 2010 20:51:32 +0200
Subject: [Twisted-Python] Twisted 10.1.0pre1 released -- please test!
In-Reply-To: <AANLkTimnt49VMggMk_1ydEUEWV3NgJRmXD7EPyMC8wfQ@mail.gmail.com>
References: <AANLkTikyD30DQ3WJ83_bBGcbfkaknLMf3E3DlSjP04Ui@mail.gmail.com>	<28A5172F-7F48-43FE-A93B-A8133107133C@twistedmatrix.com>	<AANLkTilEFUfxkBfJSb6QA88i1AdN4bPhjrNDgfPz6-EC@mail.gmail.com>	<AANLkTilH079M1daaYDhdr_iYh3qcfw0WKiKgpZSXBxVu@mail.gmail.com>
	<AANLkTimnt49VMggMk_1ydEUEWV3NgJRmXD7EPyMC8wfQ@mail.gmail.com>
Message-ID: <4C24FAB4.8070506@gmail.com>

Hello,

Kevin Horn wrote:
> Running trial with the --unclean-warnings flag, I get only 3 failures.
> Attached.
> 
> Kevin Horn
> 

These errors seem to be caused by your deep directory hierarchy, resulting
in trial hitting the MAX_PATH limit. Could you try unpacking the tarball
in the root of your drive and rerunning the tests?

Regards,
Ziga


From sc at puzzlebox.info  Sat Jun 26 14:03:30 2010
From: sc at puzzlebox.info (Steve Castellotti)
Date: Sat, 26 Jun 2010 11:03:30 -0700
Subject: [Twisted-Python] qt4 reactor status
Message-ID: <4C2640F2.70901@puzzlebox.info>

Hello-

     I'm wondering if anyone can fill me in on the current status and 
plans for Qt support under Twisted?

     I've been working with PyGTK for most of my cross-platform 
applications over the past decade or so, but mainly for license reasons 
and to be honest GTK+ still looks pretty much the same visually as it 
did back in the early 2000's (especially on Windows). It feels time to 
move on to something a little less tired and a little better suited to 
mobile deployment (starting with the N900 at least).

     With Qt4 being LGPL'd and PySide offering the same as an 
alternative to PyQT's GPL-or-commercial-only choices, it seems like 
there shouldn't be any barriers to supporting it, save interest and time 
from developers of course.


     The last piece of information I could dig up was this trac ticket:

http://twistedmatrix.com/trac/ticket/3977


     It sounds like Dr. Glenn Tarbox is happy with a potential license 
change on the original qt4reactor code, but that still needs 
confirmation from Itamar Shtull-Trauring and Gabe Rudy (with no further 
comment in the last nine months). Whether the code itself is compatible 
with the current releases of Qt, PyQt, or PySide isn't clear (there is 
certainly no "stable" release suitable for serious re-deployment that I 
can find).


     The source itself is located here:

https://launchpad.net/qt4reactor


     ...but that code is now two years old, with the only update from 
Alan Franzoni a little over a year ago doing some initial cleanup work 
"in order to support better testing."


     I've really only begun getting familiar with Qt development, but as 
of this moment it seems like I should focus on learning the QtNetwork 
component and start porting over my Twisted libraries to that, as at 
least support is present and maintained - plus the licensing is clear.


     In the meantime, can anyone please update me if there has been any 
further work or consideration towards official Qt support for Twisted?


Cheers

Steve Castellotti





From exarkun at twistedmatrix.com  Sun Jun 27 00:05:33 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 27 Jun 2010 04:05:33 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1277611534.0.891421001@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100627/db424b0e/attachment.htm 

From peter.westlake at pobox.com  Sun Jun 27 06:04:24 2010
From: peter.westlake at pobox.com (Peter Westlake)
Date: Sun, 27 Jun 2010 11:04:24 +0100
Subject: [Twisted-Python] ANNOUNCING Tahoe,
 the Least-Authority File  System, v1.7.0
In-Reply-To: <AANLkTin-VRNMLoBcUlPfgb55tMKigoKdTKCOx1whJHHp@mail.gmail.com>
References: <AANLkTilxV-15WiSOcey_TfevBP7LWGFdCDmOCojlxL7g@mail.gmail.com><1277228142.10077.1381370863@webmail.messagingengine.com><AANLkTin-VRNMLoBcUlPfgb55tMKigoKdTKCOx1whJHHp@mail.gmail.com>
Message-ID: <1277633064.14407.1382091413@webmail.messagingengine.com>

[resending after the glitch with the domain]

On Thu, 24 Jun 2010 18:34 -0700, "Zooko O'Whielacronx" <zooko at zooko.com>
wrote:
> On Tue, Jun 22, 2010 at 10:35 AM, Peter Westlake
> <peter.westlake at pobox.com> wrote:
> >
> > I downloaded it and typed "python setup.py build", and it went off and
> > started building a copy of Twisted 10.0!
> 
> That's funny. Could you please run:
> 
> python -c "import pkg_resources;print pkg_resources.require('Twisted')"

It says:

allmydata-tahoe-1.7.0$ python -c "import pkg_resources;print
pkg_resources.require('Twisted')"
[Twisted 10.0.0
(/localhome/packages/allmydata-tahoe-1.7.0/Twisted-10.0.0-py2.5-linux-i686.egg),
zope.interface 3.4.0 (/usr/lib/python2.5/site-packages)]

> >  Will that be installed on my system, or will it only affect the Tahoe build?
> 
> (Brian Warner answered this.)

Yes - thanks to Brian.

> >  I can't afford to move
> > to 10.0 until I've had time to track down a certain bug that appeared
> > between 2.5.0 and version 8.
> 
> Do you have a ticket # for that bug?

No, because I can't provide a simple test case for it. My only hope is
to get the source of Twisted and bisect, then see what changed in that
revision. I fully intend to do that as soon as I can spare the time. In
fact, it's becoming more urgent since 10 fixes some other problems.
Really I should be doing that instead of tryin Tahoe-LAFS, but you know
how it is...

Peter.





From exarkun at twistedmatrix.com  Sun Jun 27 18:28:04 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 27 Jun 2010 22:28:04 -0000
Subject: [Twisted-Python] ANNOUNCING Tahoe,
	the Least-Authority File  System, v1.7.0
In-Reply-To: <1277633064.14407.1382091413@webmail.messagingengine.com>
References: <AANLkTilxV-15WiSOcey_TfevBP7LWGFdCDmOCojlxL7g@mail.gmail.com><1277228142.10077.1381370863@webmail.messagingengine.com><AANLkTin-VRNMLoBcUlPfgb55tMKigoKdTKCOx1whJHHp@mail.gmail.com>
	<1277633064.14407.1382091413@webmail.messagingengine.com>
Message-ID: <20100627222804.1937.878761619.divmod.xquotient.526@localhost.localdomain>

On 10:04 am, peter.westlake at pobox.com wrote:
>
>No, because I can't provide a simple test case for it. My only hope is
>to get the source of Twisted and bisect, then see what changed in that
>revision.

If it helps at all, there's now a Git mirror of Twisted so you can 
actually use "git bisect" for this (although I'd love to hear that 
someone has written a general multi-vcs bisect tool and that git is no 
longer the easiest way to do this sort of thing).

Jean-Paul


From exarkun at twistedmatrix.com  Sun Jun 27 18:37:16 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 27 Jun 2010 22:37:16 -0000
Subject: [Twisted-Python] qt4 reactor status
In-Reply-To: <4C2640F2.70901@puzzlebox.info>
References: <4C2640F2.70901@puzzlebox.info>
Message-ID: <20100627223716.1937.1623596183.divmod.xquotient.544@localhost.localdomain>

On 26 Jun, 06:03 pm, sc at puzzlebox.info wrote:
>Hello-
>
>     I'm wondering if anyone can fill me in on the current status and
>plans for Qt support under Twisted?

I think you nailed the status - it's an externally maintained reactor 
which probably works for some people.  As far as plans for support go, 
there aren't really any.  Most Twisted development happens without many 
specific plans though, so you shouldn't let that discourage you.
>
>     In the meantime, can anyone please update me if there has been any
>further work or consideration towards official Qt support for Twisted?

This isn't really specific to Qt - actually it's about Gtk - but it 
might be useful anyway.  A number of issues with Gtk's network support 
have recently led me to believe that a better way to integrate with it 
would be to only put a single file descriptor into its event loop and 
trigger all other event notification based on that single descriptor. 
This can be done with epoll, where Gtk would watch the epoll descriptor, 
but then Twisted's epoll reactor would deal with actual socket events. 
It might be doable with IOCP reactor too, where a Windows Event is put 
into Gtk and then all of the IOCP operations trigger that one Event. 
It's doable with kqueue in a manner similar to that which applies to 
epoll.  And if all else fails, there's the ThreadedSelectReactor 
approach.

Perhaps Qt's networking support is on par with Twisted's, though, and 
such wouldn't be necessary.  I don't know, as I have very little 
experience with Qt.  I just wanted to mention the idea.

Jean-Paul


From glenn at tarbox.org  Sun Jun 27 19:51:51 2010
From: glenn at tarbox.org (Glenn Tarbox, PhD)
Date: Sun, 27 Jun 2010 16:51:51 -0700
Subject: [Twisted-Python] qt4 reactor status
In-Reply-To: <20100627223716.1937.1623596183.divmod.xquotient.544@localhost.localdomain>
References: <4C2640F2.70901@puzzlebox.info>
	<20100627223716.1937.1623596183.divmod.xquotient.544@localhost.localdomain>
Message-ID: <AANLkTikz4CSorSFRsSqsyCBnvmu1oC9NT6Q8_Tdoo3lm@mail.gmail.com>

On Sun, Jun 27, 2010 at 3:37 PM, <exarkun at twistedmatrix.com> wrote:

> On 26 Jun, 06:03 pm, sc at puzzlebox.info wrote:
> >Hello-
> >
> >     I'm wondering if anyone can fill me in on the current status and
> >plans for Qt support under Twisted?
>
> I think you nailed the status - it's an externally maintained reactor
> which probably works for some people.  As far as plans for support go,
> there aren't really any.  Most Twisted development happens without many
> specific plans though, so you shouldn't let that discourage you.
> >
> >     In the meantime, can anyone please update me if there has been any
> >further work or consideration towards official Qt support for Twisted?
>

One issue with "official" support is PyQt licensing.  If PySide is (or
becomes) an alternative, the licensing issue would disappear and Twisted
"could" include it in the distribution.

AFAIK, there hasn't been any substantial work on the qt4reactor beyond what
exists on launchpad and github.  I have a few patches aging in my inbox
which fix some Mac platform problems etc.

<snip>


> Perhaps Qt's networking support is on par with Twisted's, though, and
> such wouldn't be necessary.  I don't know, as I have very little
> experience with Qt.  I just wanted to mention the idea.
>

The design of the qt4reactor was driven by the need to integrate two event
loops.  Qt has its own asynchronous event handling core which is exposed
through PyQt.  Fortunately, its fairly straightforward to register a
callback for twisted "stuff" (time and file descriptors) and it all works
pretty well... (meaning it passed Twisted's torture tests at the time it was
checked into launchpad).

There is a non-traditional initialization using a non-blocking call to
reactor.runReturn() which nails Twisted to PyQt.  From that point on,
Twisted behaves normally as does Qt / PyQt...  The way god intended.

The more fundamental question, IMHO, is the status and critical mass of
PySide.  Nokia was unable to reach agreement with Riverbank which caused
uncertainty after Qt's move to open source.  I don't know where this stands.

If PySide is solid, and the API is similar to PyQt (which is the intent),
porting qt4reactor to PySide is "probably" straightforward.  I'm guessing
that the qt4reactor remains functional as I've gotten email patches in the
past few months.

I would offer to check this out but I can't promise any timeline.  I'm
willing to field questions on any coding bizarreness to the degree my brain
hardening doesn't interfere.

-glenn


>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Glenn H. Tarbox, PhD ||  206-274-6919 || glenn at tarbox.org - xmpp || ghtdak -
aim,jabber,IRC,yahoo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100627/1ad25795/attachment.htm 

From robert.kern at gmail.com  Sun Jun 27 23:37:45 2010
From: robert.kern at gmail.com (Robert Kern)
Date: Sun, 27 Jun 2010 22:37:45 -0500
Subject: [Twisted-Python] qt4 reactor status
In-Reply-To: <AANLkTikz4CSorSFRsSqsyCBnvmu1oC9NT6Q8_Tdoo3lm@mail.gmail.com>
References: <4C2640F2.70901@puzzlebox.info>	<20100627223716.1937.1623596183.divmod.xquotient.544@localhost.localdomain>
	<AANLkTikz4CSorSFRsSqsyCBnvmu1oC9NT6Q8_Tdoo3lm@mail.gmail.com>
Message-ID: <i095ea$m3u$1@dough.gmane.org>

On 2010-06-27 18:51 , Glenn Tarbox, PhD wrote:

> One issue with "official" support is PyQt licensing.  If PySide is (or
> becomes) an alternative, the licensing issue would disappear and Twisted
> "could" include it in the distribution.

Phil Thompson provides an exception to the GPL license that explicitly states 
that you can write modules using PyQt4 and release them under the MIT license 
(or some other license from an enumerated set of OSI-approved licenses).

> The more fundamental question, IMHO, is the status and critical mass of
> PySide.  Nokia was unable to reach agreement with Riverbank which caused
> uncertainty after Qt's move to open source.  I don't know where this stands.

PySide appears to be making steady, healthy progress. If one is on Linux, it 
would probably be worth an interested person's time installing it and changing 
your imports from "PyQt4" to "PySide" and see if it works. OS X and Windows 
builds are still some time away, but apparently the technical blockers have been 
fixed. It's just a matter of applied effort, probably.

-- 
Robert Kern

"I have come to believe that the whole world is an enigma, a harmless enigma
  that is made terrible by our own mad attempt to interpret it as though it had
  an underlying truth."
   -- Umberto Eco



From superdupont at gmail.com  Mon Jun 28 07:52:01 2010
From: superdupont at gmail.com (Carlos Valiente)
Date: Mon, 28 Jun 2010 12:52:01 +0100
Subject: [Twisted-Python] reactor.spawnProcess() and file descriptors
Message-ID: <AANLkTin5uNNEDJ5NJJWy0wQqyUFLvC9MwIo8ybE8LRoe@mail.gmail.com>

Hi! Is there any way of telling  reactor.spawnProcess() not to close
all open file descriptors? I've tried passing the following as
``childFDs``:

  childFDs = {0: "w", 1: "r", 2: "r"}
  max_fds = resource.getrlimit(resource.RLIMIT_NOFILE)[1] + 1
  for i in xrange(3, max_fds):
    childFDs[i] = i

but of course it doesn't work, because most of those file descriptors
are not open, and then the call to clear the close-on-exec flag fails.

In case there's no way of avoiding the close, I could try writing a
patch for reactor.spawnProcess(): Something like adding an extra
keyword argument to enable or disable the close, for instance. Would
such a patch have any chance of being accepted?

Thanks,

Carlos


From itamar at itamarst.org  Mon Jun 28 08:04:43 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 28 Jun 2010 08:04:43 -0400
Subject: [Twisted-Python] reactor.spawnProcess() and file descriptors
In-Reply-To: <AANLkTin5uNNEDJ5NJJWy0wQqyUFLvC9MwIo8ybE8LRoe@mail.gmail.com>
References: <AANLkTin5uNNEDJ5NJJWy0wQqyUFLvC9MwIo8ybE8LRoe@mail.gmail.com>
Message-ID: <1277726683.1570.0.camel@blake>

On Mon, 2010-06-28 at 12:52 +0100, Carlos Valiente wrote:
> Hi! Is there any way of telling  reactor.spawnProcess() not to close
> all open file descriptors?

My Unix knowledge is weak, but - couldn't you pass in duplicate fds, so
that when they are closed it wouldn't affect the originals?



From superdupont at gmail.com  Mon Jun 28 08:21:09 2010
From: superdupont at gmail.com (Carlos Valiente)
Date: Mon, 28 Jun 2010 13:21:09 +0100
Subject: [Twisted-Python] reactor.spawnProcess() and file descriptors
In-Reply-To: <1277726683.1570.0.camel@blake>
References: <AANLkTin5uNNEDJ5NJJWy0wQqyUFLvC9MwIo8ybE8LRoe@mail.gmail.com>
	<1277726683.1570.0.camel@blake>
Message-ID: <AANLkTikTIHHA_5YN7qp0OhBgfMzrdrEJmbPBCjwfUQ-8@mail.gmail.com>

On Mon, Jun 28, 2010 at 13:04, Itamar Turner-Trauring
<itamar at itamarst.org> wrote:
> On Mon, 2010-06-28 at 12:52 +0100, Carlos Valiente wrote:
>> Hi! Is there any way of telling ?reactor.spawnProcess() not to close
>> all open file descriptors?
>
> My Unix knowledge is weak, but - couldn't you pass in duplicate fds, so
> that when they are closed it wouldn't affect the originals?

Thanks for your reply, Itamar. I wanted to skip the calls to close()
-- 1024 of them, in my case -- because,  according to strace(1),  that
takes about 100 ms (and I'd like to save those milliseconds). From
reading twisted.internet.process.Process._setupChild(), it seems that
passing a dupped file descriptor would trigger at least another call
to dup():

    for child in childlist:
        target = fdmap[child]
            if target == child:
                # fd is already in place
                if debug: print >>errfd, "%d already in place" % target
                fdesc._unsetCloseOnExec(child)
            else:
                if child in fdmap.values():
                    # we can't replace child-fd yet, as some other mapping
                    # still needs the fd it wants to target. We must preserve
                    # that old fd by duping it to a new home.
                    newtarget = os.dup(child) # give it a safe home
                    if debug: print >>errfd, "os.dup(%d) -> %d" % (child,
                                                                   newtarget)
                    os.close(child) # close the original
                    for c, p in fdmap.items():
                        if p == child:
                            fdmap[c] = newtarget # update all pointers
                # now it should be available
                if debug: print >>errfd, "os.dup2(%d,%d)" % (target, child)
                os.dup2(target, child)


From itamar at itamarst.org  Mon Jun 28 09:03:58 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 28 Jun 2010 09:03:58 -0400
Subject: [Twisted-Python] reactor.spawnProcess() and file descriptors
In-Reply-To: <AANLkTikTIHHA_5YN7qp0OhBgfMzrdrEJmbPBCjwfUQ-8@mail.gmail.com>
References: <AANLkTin5uNNEDJ5NJJWy0wQqyUFLvC9MwIo8ybE8LRoe@mail.gmail.com>
	<1277726683.1570.0.camel@blake>
	<AANLkTikTIHHA_5YN7qp0OhBgfMzrdrEJmbPBCjwfUQ-8@mail.gmail.com>
Message-ID: <1277730238.1570.11.camel@blake>

On Mon, 2010-06-28 at 13:21 +0100, Carlos Valiente wrote:
> I wanted to skip the calls to close()
> -- 1024 of them, in my case -- because,  according to strace(1),  that
> takes about 100 ms (and I'd like to save those milliseconds).

Ah, I see. So the issue is performance. If you do file a ticket (and you
probably should), it should be about the speed issue, with suggested
solutions attached, so people know the underlying issue you're trying to
solve.

It's quite likely that closing could be sufficiently sped up by having a
tiny C extension do it -- less Python overhead, and you don't have to
raise and catch 1000 exceptions (which is fairly expensive).



From landreville at deadtreepages.com  Mon Jun 28 10:19:11 2010
From: landreville at deadtreepages.com (Landreville)
Date: Mon, 28 Jun 2010 10:19:11 -0400
Subject: [Twisted-Python] runInteraction function returning a deferred
Message-ID: <AANLkTinKhlHcHZ4ADuarROK6lkegn0AUy7EFfPyajNcu@mail.gmail.com>

I am working with a third-party web-scraping application that also
uses twisted (Scrapy) and would like for it to do its thing in a
transaction along with a database action. This can be done with
runInteraction, but Scrapy uses a non-blocking call when it does its
thing. This actually doesn't even return a deferred, but you pass in
the callback function you would like it to call when finished.

Is there some way for runInteraction to wait for this deferred to be
finished before ending the transaction?

Or could something like this work, where the thread gets paused until
it completes?:
def interaction(txn):

        finished = {'test':False, 'failed': False}

        def _cb(r):
            finished['test'] = True

        def _err(failure):
            finished['failed'] = True

        Spider.crawl(_cb, _err)

        # do database stuff here

        while not finished['test'] and not finished['failed']:
            time.sleep(0.25)

        if finished['failed']:
            raise Exception('Web scraping failed.')

d = dbpool.runInteraction(interaction)




Thanks for a look,

Landreville


From foom at fuhm.net  Mon Jun 28 10:30:37 2010
From: foom at fuhm.net (James Y Knight)
Date: Mon, 28 Jun 2010 10:30:37 -0400
Subject: [Twisted-Python] reactor.spawnProcess() and file descriptors
In-Reply-To: <1277730238.1570.11.camel@blake>
References: <AANLkTin5uNNEDJ5NJJWy0wQqyUFLvC9MwIo8ybE8LRoe@mail.gmail.com>
	<1277726683.1570.0.camel@blake>
	<AANLkTikTIHHA_5YN7qp0OhBgfMzrdrEJmbPBCjwfUQ-8@mail.gmail.com>
	<1277730238.1570.11.camel@blake>
Message-ID: <3C6DB00B-D23E-415D-AC79-E71F56BA6002@fuhm.net>


On Jun 28, 2010, at 9:03 AM, Itamar Turner-Trauring wrote:

> On Mon, 2010-06-28 at 13:21 +0100, Carlos Valiente wrote:
>> I wanted to skip the calls to close()
>> -- 1024 of them, in my case -- because,  according to strace(1),   
>> that
>> takes about 100 ms (and I'd like to save those milliseconds).
>
> Ah, I see. So the issue is performance. If you do file a ticket (and  
> you
> probably should), it should be about the speed issue, with suggested
> solutions attached, so people know the underlying issue you're  
> trying to
> solve.
>
> It's quite likely that closing could be sufficiently sped up by  
> having a
> tiny C extension do it -- less Python overhead, and you don't have to
> raise and catch 1000 exceptions (which is fairly expensive).

Or, if just listdir("/proc/%d/fd/" % getpid()). If that doesn't fail  
(aka /proc/pid/fd actually exists and is mounted on this OS) then only  
close the listed fds. That'll be much much faster.

James


From superdupont at gmail.com  Mon Jun 28 14:29:34 2010
From: superdupont at gmail.com (Carlos Valiente)
Date: Mon, 28 Jun 2010 19:29:34 +0100
Subject: [Twisted-Python] reactor.spawnProcess() and file descriptors
In-Reply-To: <3C6DB00B-D23E-415D-AC79-E71F56BA6002@fuhm.net>
References: <AANLkTin5uNNEDJ5NJJWy0wQqyUFLvC9MwIo8ybE8LRoe@mail.gmail.com>
	<1277726683.1570.0.camel@blake>
	<AANLkTikTIHHA_5YN7qp0OhBgfMzrdrEJmbPBCjwfUQ-8@mail.gmail.com>
	<1277730238.1570.11.camel@blake>
	<3C6DB00B-D23E-415D-AC79-E71F56BA6002@fuhm.net>
Message-ID: <AANLkTimRR8ssz0kgGXtqE37UNvkQ_crkP5HDmkC2X_7k@mail.gmail.com>

On Mon, Jun 28, 2010 at 15:30, James Y Knight <foom at fuhm.net> wrote:
> Or, if just listdir("/proc/%d/fd/" % getpid()). If that doesn't fail
> (aka /proc/pid/fd actually exists and is mounted on this OS) then only
> close the listed fds. That'll be much much faster.

I just did that, James (http://twistedmatrix.com/trac/ticket/4522) --
Thanks for your help!

C


From glyph at twistedmatrix.com  Mon Jun 28 14:59:26 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 28 Jun 2010 14:59:26 -0400
Subject: [Twisted-Python] runInteraction function returning a deferred
In-Reply-To: <AANLkTinKhlHcHZ4ADuarROK6lkegn0AUy7EFfPyajNcu@mail.gmail.com>
References: <AANLkTinKhlHcHZ4ADuarROK6lkegn0AUy7EFfPyajNcu@mail.gmail.com>
Message-ID: <A1F84BED-B55C-4B13-B18E-706ECABC5EDD@twistedmatrix.com>


On Jun 28, 2010, at 10:19 AM, Landreville wrote:

> Is there some way for runInteraction to wait for this deferred to be
> finished before ending the transaction?

blockingCallFromThread:

http://twistedmatrix.com/documents/10.0.0/api/twisted.internet.threads.html#blockingCallFromThread

:)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100628/cc917a08/attachment.htm 

From ddwiggins at advpubtech.com  Mon Jun 28 20:43:14 2010
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Mon, 28 Jun 2010 17:43:14 -0700
Subject: [Twisted-Python] Creating a COM object in a thread
Message-ID: <i0bfj2$iem$1@dough.gmane.org>

I need to create a COM object in a Windows application, and call it. 
Since the call will take some time to execute, I wrap it in a deferToThread.

I've found that, when I create the object inline, it works.  However, 
when I defer it, it hangs up in the win32com.client.Dispatch call.  I've 
tried several things, including digging into the guts of Dispatch -- the 
hangup occurs during the creation of the object.

I've discussed this with Mark Hammond, who suggests one lead:

"The Windows message loop is used by the COM marshalling process.  IIRC, 
the first thread to initialize COM in a process is the thread in which 
single-threaded objects will always end up being called in.  If a 
different thread creates the object, COM uses Windows messages to 
marshall all calls back to that main thread.  IOW, your second thread 
makes a call - even to create the object - which results in that thread 
sending a windows message to the main thread to act on the request.

What this probably means in practice is that twisted needs to use a 
reactor which calls MsgWaitForMultipleObjects() and runs a message loop 
when the function detects a new message is in the queue.  I'm not sure 
if there is an existing reactor which does this."

I'm posting this on the off chance that someone else has wandered into 
this corner of Windows arcana, and has come up with something useful.

I'm about to give up on doing this "inside" the twisted app, and running 
it in a separate app that I'll call from the thread.

TIA,
-- 
Don Dwiggins
Advanced Publishing Technology



From itamar at itamarst.org  Mon Jun 28 21:17:57 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 28 Jun 2010 21:17:57 -0400
Subject: [Twisted-Python] Creating a COM object in a thread
In-Reply-To: <i0bfj2$iem$1@dough.gmane.org>
References: <i0bfj2$iem$1@dough.gmane.org>
Message-ID: <1277774277.1570.13.camel@blake>

On Mon, 2010-06-28 at 17:43 -0700, Don Dwiggins wrote:

> What this probably means in practice is that twisted needs to use a 
> reactor which calls MsgWaitForMultipleObjects() and runs a message loop 
> when the function detects a new message is in the queue.  I'm not sure 
> if there is an existing reactor which does this."

win32eventreactor uses WaitForMultipleObjects, so could probably be
modified quite simply to support this. It's also vaguely possible you
could use the more scalable IOCP reactor, but someone with more win32
knowledge than I should comment on that.





From zooko at zooko.com  Mon Jun 28 23:41:04 2010
From: zooko at zooko.com (Zooko O'Whielacronx)
Date: Mon, 28 Jun 2010 21:41:04 -0600
Subject: [Twisted-Python] ANNOUNCING Tahoe,
	the Least-Authority File 	System, v1.7.0
In-Reply-To: <1277633064.14407.1382091413@webmail.messagingengine.com>
References: <AANLkTilxV-15WiSOcey_TfevBP7LWGFdCDmOCojlxL7g@mail.gmail.com>
	<1277228142.10077.1381370863@webmail.messagingengine.com>
	<AANLkTin-VRNMLoBcUlPfgb55tMKigoKdTKCOx1whJHHp@mail.gmail.com>
	<1277633064.14407.1382091413@webmail.messagingengine.com>
Message-ID: <AANLkTinY5TrCkR4G60sBsHPea73Mb_q-Khuf4D8UklXL@mail.gmail.com>

On Sun, Jun 27, 2010 at 4:04 AM, Peter Westlake
<peter.westlake at pobox.com> wrote:
>
>> python -c "import pkg_resources;print pkg_resources.require('Twisted')"
>
> It says:
>
> allmydata-tahoe-1.7.0$ python -c "import pkg_resources;print
> pkg_resources.require('Twisted')"
> [Twisted 10.0.0
> (/localhome/packages/allmydata-tahoe-1.7.0/Twisted-10.0.0-py2.5-linux-i686.egg),
> zope.interface 3.4.0 (/usr/lib/python2.5/site-packages)]

Well, okay, that says that the one in your current working directory,
in a .egg, would satisfy that requirement. But suppose you cd to a
different directory and run it again. :-) Or rm that .egg and run it
again. Thanks!

The thing is, it should have been satisfied with the Twisted 8 that
was already installed in your system, instead of creating that local
Twisted 10.0.0 egg.

Regards,

Zooko


From sc at puzzlebox.info  Tue Jun 29 03:58:28 2010
From: sc at puzzlebox.info (Steve Castellotti)
Date: Tue, 29 Jun 2010 00:58:28 -0700
Subject: [Twisted-Python] qt4 reactor status
In-Reply-To: <i095ea$m3u$1@dough.gmane.org>
References: <4C2640F2.70901@puzzlebox.info>	<20100627223716.1937.1623596183.divmod.xquotient.544@localhost.localdomain>	<AANLkTikz4CSorSFRsSqsyCBnvmu1oC9NT6Q8_Tdoo3lm@mail.gmail.com>
	<i095ea$m3u$1@dough.gmane.org>
Message-ID: <4C29A7A4.3020004@puzzlebox.info>


     First off, many thanks for the responses everyone, they are 
certainly appreciated!

     Comments below.


On 06/27/2010 08:37 PM, Robert Kern wrote:
>> One issue with "official" support is PyQt licensing.  If PySide is (or
>> becomes) an alternative, the licensing issue would disappear and Twisted
>> "could" include it in the distribution.
>>      
> Phil Thompson provides an exception to the GPL license that explicitly states
> that you can write modules using PyQt4 and release them under the MIT license
> (or some other license from an enumerated set of OSI-approved licenses).
>    

     That's interesting (and good) to know.

     However I think ultimately whether PyQt4 or PySide was used as a 
base library for the qt4reactor, the next step would still have to be 
chasing down the remaining contributors to the reactor code and 
confirming they are willing to re-license their work.

     I might attach a request to the last ticket in the tracker as a 
start, and see if that gets any response. I'm only a user of Twisted and 
don't feel comfortable directly hassling folks who were kind enough to 
donate their time to its development.

>> The more fundamental question, IMHO, is the status and critical mass of
>> PySide.  Nokia was unable to reach agreement with Riverbank which caused
>> uncertainty after Qt's move to open source.  I don't know where this stands.
>>      
> PySide appears to be making steady, healthy progress. If one is on Linux, it
> would probably be worth an interested person's time installing it and changing
> your imports from "PyQt4" to "PySide" and see if it works. OS X and Windows
> builds are still some time away, but apparently the technical blockers have been
> fixed. It's just a matter of applied effort, probably.
>    

     Not to drift too far off topic, but from some initial exploratory 
development I can confirm PySide does seem a pretty complete and 
reliable alternative to PyQt4 (at least under Linux). I've manage to 
produce a basic interface using Qt4Designer and integrate a simple JSON 
client which runs equally well under both library wrapper modules.

     In the short term QtNetwork will probably be sufficient for my 
needs, but I would still advocate and support where/as possible a stable 
qt4reactor running under Twisted.


Cheers

Steve Castellotti




From exarkun at twistedmatrix.com  Tue Jun 29 08:43:44 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 29 Jun 2010 12:43:44 -0000
Subject: [Twisted-Python] qt4 reactor status
In-Reply-To: <4C29A7A4.3020004@puzzlebox.info>
References: <4C2640F2.70901@puzzlebox.info>
	<20100627223716.1937.1623596183.divmod.xquotient.544@localhost.localdomain>
	<AANLkTikz4CSorSFRsSqsyCBnvmu1oC9NT6Q8_Tdoo3lm@mail.gmail.com>
	<i095ea$m3u$1@dough.gmane.org> <4C29A7A4.3020004@puzzlebox.info>
Message-ID: <20100629124344.1937.276903590.divmod.xquotient.547@localhost.localdomain>

On 07:58 am, sc at puzzlebox.info wrote:
>
>     I might attach a request to the last ticket in the tracker as a
>start, and see if that gets any response. I'm only a user of Twisted 
>and
>don't feel comfortable directly hassling folks who were kind enough to
>donate their time to its development.

Any of the code that was developed while the reactor was in Twisted 
itself is MIT licensed.  Perhaps that means you only need to track down 
people who contributed after the code was moved out of Twisted?

Jean-Paul


From markscottwright at gmail.com  Tue Jun 29 10:01:54 2010
From: markscottwright at gmail.com (Mark Wright)
Date: Tue, 29 Jun 2010 09:01:54 -0500
Subject: [Twisted-Python] Creating a COM object in a thread
In-Reply-To: <i0bfj2$iem$1@dough.gmane.org>
References: <i0bfj2$iem$1@dough.gmane.org>
Message-ID: <AANLkTimmN32VcbJG22mAYkmL5drZ-orVEeLdwtk9zIFM@mail.gmail.com>

I'm sure you've already checked the simple things like this, but have
you called CoInitialize() in your thread?  If you're using the win32
extensions, it'll be called for you in the main thread, but any new
thread needs to call it before attempting to do any COM work.

On Mon, Jun 28, 2010 at 7:43 PM, Don Dwiggins <ddwiggins at advpubtech.com> wrote:
> I need to create a COM object in a Windows application, and call it.
> Since the call will take some time to execute, I wrap it in a deferToThread.
>
> I've found that, when I create the object inline, it works. ?However,
> when I defer it, it hangs up in the win32com.client.Dispatch call. ?I've
> tried several things, including digging into the guts of Dispatch -- the
> hangup occurs during the creation of the object.
>
> I've discussed this with Mark Hammond, who suggests one lead:
>
> "The Windows message loop is used by the COM marshalling process. ?IIRC,
> the first thread to initialize COM in a process is the thread in which
> single-threaded objects will always end up being called in. ?If a
> different thread creates the object, COM uses Windows messages to
> marshall all calls back to that main thread. ?IOW, your second thread
> makes a call - even to create the object - which results in that thread
> sending a windows message to the main thread to act on the request.
>
> What this probably means in practice is that twisted needs to use a
> reactor which calls MsgWaitForMultipleObjects() and runs a message loop
> when the function detects a new message is in the queue. ?I'm not sure
> if there is an existing reactor which does this."
>
> I'm posting this on the off chance that someone else has wandered into
> this corner of Windows arcana, and has come up with something useful.
>
> I'm about to give up on doing this "inside" the twisted app, and running
> it in a separate app that I'll call from the thread.
>
> TIA,
> --
> Don Dwiggins
> Advanced Publishing Technology
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Mark Wright
markscottwright at gmail.com


From peter.westlake at pobox.com  Tue Jun 29 10:26:31 2010
From: peter.westlake at pobox.com (Peter Westlake)
Date: Tue, 29 Jun 2010 15:26:31 +0100
Subject: [Twisted-Python] ANNOUNCING Tahoe,
 the Least-Authority File  System, v1.7.0
In-Reply-To: <AANLkTinY5TrCkR4G60sBsHPea73Mb_q-Khuf4D8UklXL@mail.gmail.com>
References: <AANLkTilxV-15WiSOcey_TfevBP7LWGFdCDmOCojlxL7g@mail.gmail.com><1277228142.10077.1381370863@webmail.messagingengine.com><AANLkTin-VRNMLoBcUlPfgb55tMKigoKdTKCOx1whJHHp@mail.gmail.com><1277633064.14407.1382091413@webmail.messagingengine.com>
	<AANLkTinY5TrCkR4G60sBsHPea73Mb_q-Khuf4D8UklXL@mail.gmail.com>
Message-ID: <1277821591.4135.1382450539@webmail.messagingengine.com>


On Mon, 28 Jun 2010 21:41 -0600, "Zooko O'Whielacronx" <zooko at zooko.com>
wrote:
> On Sun, Jun 27, 2010 at 4:04 AM, Peter Westlake
> <peter.westlake at pobox.com> wrote:
> >
> >> python -c "import pkg_resources;print pkg_resources.require('Twisted')"
> >
> > It says:
> >
> > allmydata-tahoe-1.7.0$ python -c "import pkg_resources;print
> > pkg_resources.require('Twisted')"
> > [Twisted 10.0.0
> > (/localhome/packages/allmydata-tahoe-1.7.0/Twisted-10.0.0-py2.5-linux-i686.egg),
> > zope.interface 3.4.0 (/usr/lib/python2.5/site-packages)]
> 
> Well, okay, that says that the one in your current working directory,
> in a .egg, would satisfy that requirement. But suppose you cd to a
> different directory and run it again. :-) Or rm that .egg and run it
> again. Thanks!

Here it is:

allmydata-tahoe-1.7.0$ rm -r Twisted-10.0.0-py2.5-linux-i686.egg
allmydata-tahoe-1.7.0$ python -c "import pkg_resources;print
pkg_resources.require('Twisted')"
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/usr/lib/python2.5/site-packages/pkg_resources.py", line 626, in
  require
    needed = self.resolve(parse_requirements(requirements))
  File "/usr/lib/python2.5/site-packages/pkg_resources.py", line 524, in
  resolve
    raise DistributionNotFound(req)  # XXX put more info here
pkg_resources.DistributionNotFound: Twisted

> The thing is, it should have been satisfied with the Twisted 8 that
> was already installed in your system, instead of creating that local
> Twisted 10.0.0 egg.

Mystery solved! Though not in the way that I expected:
all the individual Twisted packages are installed, like
python-twisted-bin, python-twisted-core and so on, but
the top-level python-twisted itself was not! Installing
that gets the response:

allmydata-tahoe-1.7.0$ python -c "import pkg_resources;print
pkg_resources.require('Twisted')"
[Twisted 8.1.0 (/usr/lib/python2.5/site-packages)]

The python-twisted package is described as "transitional",
which suggests that it might one day go away. Someone here
is bound to know if it will.

The reason this wasn't the explanation I expected, BTW,
is that I expected to have 2.5.0 installed, not 8.1.0;
but the bug only affects production machines, not the
desktop where I'm installed Tahoe-LAFS.

One last thing: this is on Debian Lenny, so I added the
APT repository, but "apt-get update" gives these errors:

Hit http://volatile.debian.org stable/volatile/non-free Packages
Hit http://security.debian.org stable/updates/non-free Sources
Ign http://allmydata.org lenny/main Packages
Ign http://allmydata.org lenny/tahoe Packages
Ign http://allmydata.org lenny/main Sources
Ign http://allmydata.org lenny/tahoe Sources
Ign http://allmydata.org lenny/main Packages
Ign http://allmydata.org lenny/tahoe Packages
Ign http://allmydata.org lenny/main Sources
Ign http://allmydata.org lenny/tahoe Sources
Err http://allmydata.org lenny/main Packages
  404 Not Found
Err http://allmydata.org lenny/tahoe Packages
  404 Not Found
Err http://allmydata.org lenny/main Sources
  404 Not Found
Err http://allmydata.org lenny/tahoe Sources
  404 Not Found
W: Failed to fetch
http://allmydata.org/debian/dists/lenny/main/binary-i386/Packages  404
Not Found

W: Failed to fetch
http://allmydata.org/debian/dists/lenny/tahoe/binary-i386/Packages  404
Not Found

W: Failed to fetch
http://allmydata.org/debian/dists/lenny/main/source/Sources  404 Not
Found

W: Failed to fetch
http://allmydata.org/debian/dists/lenny/tahoe/source/Sources  404 Not
Found

E: Some index files failed to download, they have been ignored, or old
ones used instead.

Thanks for your help, and apologies if this is straying off-topic for
the list.

Peter.





From zooko at zooko.com  Tue Jun 29 11:14:23 2010
From: zooko at zooko.com (Zooko O'Whielacronx)
Date: Tue, 29 Jun 2010 09:14:23 -0600
Subject: [Twisted-Python] ANNOUNCING Tahoe,
	the Least-Authority File 	System, v1.7.0
In-Reply-To: <1277821591.4135.1382450539@webmail.messagingengine.com>
References: <AANLkTilxV-15WiSOcey_TfevBP7LWGFdCDmOCojlxL7g@mail.gmail.com>
	<1277228142.10077.1381370863@webmail.messagingengine.com>
	<AANLkTin-VRNMLoBcUlPfgb55tMKigoKdTKCOx1whJHHp@mail.gmail.com>
	<1277633064.14407.1382091413@webmail.messagingengine.com>
	<AANLkTinY5TrCkR4G60sBsHPea73Mb_q-Khuf4D8UklXL@mail.gmail.com>
	<1277821591.4135.1382450539@webmail.messagingengine.com>
Message-ID: <AANLkTiluJmGKFia32bxP_Sm4LLcygE0kjXqVCa3rinwl@mail.gmail.com>

I'm not sure if we can or should do anything about the Debian
python-twisted-core package not providing the Python "Twisted"
distribution.

I don't know much about the operation of the Tahoe-LAFS apt
repository. Maybe it was temporarily down when you tried to apt-get
update?

Let's take it to the tahoe-dev at tahoe-lafs.org list.

Thanks!

Regards,

Zooko


From peter.westlake at pobox.com  Tue Jun 29 12:14:24 2010
From: peter.westlake at pobox.com (Peter Westlake)
Date: Tue, 29 Jun 2010 17:14:24 +0100
Subject: [Twisted-Python] ANNOUNCING Tahoe,
 the Least-Authority File  System, v1.7.0
In-Reply-To: <AANLkTiluJmGKFia32bxP_Sm4LLcygE0kjXqVCa3rinwl@mail.gmail.com>
References: <AANLkTilxV-15WiSOcey_TfevBP7LWGFdCDmOCojlxL7g@mail.gmail.com><1277228142.10077.1381370863@webmail.messagingengine.com><AANLkTin-VRNMLoBcUlPfgb55tMKigoKdTKCOx1whJHHp@mail.gmail.com><1277633064.14407.1382091413@webmail.messagingengine.com><AANLkTinY5TrCkR4G60sBsHPea73Mb_q-Khuf4D8UklXL@mail.gmail.com><1277821591.4135.1382450539@webmail.messagingengine.com>
	<AANLkTiluJmGKFia32bxP_Sm4LLcygE0kjXqVCa3rinwl@mail.gmail.com>
Message-ID: <1277828064.28318.1382473569@webmail.messagingengine.com>

On Tue, 29 Jun 2010 09:14 -0600, "Zooko O'Whielacronx" <zooko at zooko.com>
wrote:
> I'm not sure if we can or should do anything about the Debian
> python-twisted-core package not providing the Python "Twisted"
> distribution.
> 
> I don't know much about the operation of the Tahoe-LAFS apt
> repository. Maybe it was temporarily down when you tried to apt-get
> update?
> 
> Let's take it to the tahoe-dev at tahoe-lafs.org list.

Okay - see you there!

Thanks,

Peter.


From ddwiggins at advpubtech.com  Tue Jun 29 15:13:32 2010
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Tue, 29 Jun 2010 12:13:32 -0700
Subject: [Twisted-Python] Creating a COM object in a thread
In-Reply-To: <1277774277.1570.13.camel@blake>
References: <i0bfj2$iem$1@dough.gmane.org> <1277774277.1570.13.camel@blake>
Message-ID: <i0dgkt$6d4$1@dough.gmane.org>

Itamar,
Thanks for the suggestions.  The documentation of win32eventreactor 
sounds kind of scary, but still probably the best base to work from.

I did some searching, and found Thomas Heller's win32guireactor at 
http://osdir.com/ml/python.twisted/2003-02/msg00190.html.  I'm still 
naive enough about reactors not to be able to compare it to 
win32eventreactor, except to note that it does run PumpWaitingMessages, 
which is what Mark thinks is needed.  (This was posted in 2003; as far 
as I can tell, nothing further has been done with it.)

Any advice on this?  I'm willing to spend some time to give it a try, 
and to post my experiences, if it'll help advance the "state of the art" 
of win32 reactors.

On 6/28/2010 6:17 PM, Itamar Turner-Trauring wrote:
> On Mon, 2010-06-28 at 17:43 -0700, Don Dwiggins wrote:
>
>> What this probably means in practice is that twisted needs to use a
>> reactor which calls MsgWaitForMultipleObjects() and runs a message loop
>> when the function detects a new message is in the queue.  I'm not sure
>> if there is an existing reactor which does this."
>
> win32eventreactor uses WaitForMultipleObjects, so could probably be
> modified quite simply to support this. It's also vaguely possible you
> could use the more scalable IOCP reactor, but someone with more win32
> knowledge than I should comment on that.

-- 
Don Dwiggins
Advanced Publishing Technology



From landreville at deadtreepages.com  Tue Jun 29 20:45:38 2010
From: landreville at deadtreepages.com (Landreville)
Date: Tue, 29 Jun 2010 20:45:38 -0400
Subject: [Twisted-Python] runInteraction function returning a deferred
In-Reply-To: <A1F84BED-B55C-4B13-B18E-706ECABC5EDD@twistedmatrix.com>
References: <AANLkTinKhlHcHZ4ADuarROK6lkegn0AUy7EFfPyajNcu@mail.gmail.com>
	<A1F84BED-B55C-4B13-B18E-706ECABC5EDD@twistedmatrix.com>
Message-ID: <AANLkTilf3WNMwbOmyLWTcJwA-lO_ZQU40OFK-vKg5ysj@mail.gmail.com>

On Mon, Jun 28, 2010 at 2:59 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
>
> On Jun 28, 2010, at 10:19 AM, Landreville wrote:
>
> Is there some way for runInteraction to wait for this deferred to be
> finished before ending the transaction?
>
> blockingCallFromThread:
> http://twistedmatrix.com/documents/10.0.0/api/twisted.internet.threads.html#blockingCallFromThread
> :)
> _______________________________________________

Coool Thanks, I will try it out.


From sc at puzzlebox.info  Tue Jun 29 22:33:19 2010
From: sc at puzzlebox.info (Steve Castellotti)
Date: Tue, 29 Jun 2010 19:33:19 -0700
Subject: [Twisted-Python] qt4 reactor status
In-Reply-To: <20100629124344.1937.276903590.divmod.xquotient.547@localhost.localdomain>
References: <4C2640F2.70901@puzzlebox.info>
	<20100627223716.1937.1623596183.divmod.xquotient.544@localhost.localdomain>
	<AANLkTikz4CSorSFRsSqsyCBnvmu1oC9NT6Q8_Tdoo3lm@mail.gmail.com>
	<i095ea$m3u$1@dough.gmane.org> <4C29A7A4.3020004@puzzlebox.info>
	<20100629124344.1937.276903590.divmod.xquotient.547@localhost.localdomain>
Message-ID: <1277865199.2328.121.camel@localhost>

On Tue, 2010-06-29 at 12:43 +0000, exarkun at twistedmatrix.com wrote: 

> On 07:58 am, sc at puzzlebox.info wrote:
> >
> >     I might attach a request to the last ticket in the tracker as a
> >start, and see if that gets any response. I'm only a user of Twisted 
> >and
> >don't feel comfortable directly hassling folks who were kind enough to
> >donate their time to its development.
> 
> Any of the code that was developed while the reactor was in Twisted 
> itself is MIT licensed.  Perhaps that means you only need to track down 
> people who contributed after the code was moved out of Twisted?



    According the the Launchpad page, the qt4reactor code is GPLv2, not
MIT:

https://launchpad.net/qt4reactor


    I figured since there were issues which prevented PyQt (which is
available under GPLv2) from being used, but which were address by PySide
being LGPL, then the same issues would exist for the qt4reactor code as
well?


Cheers

Steve
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100629/895dfb8c/attachment.htm 

From glenn at tarbox.org  Tue Jun 29 22:38:35 2010
From: glenn at tarbox.org (Glenn Tarbox, PhD)
Date: Tue, 29 Jun 2010 19:38:35 -0700
Subject: [Twisted-Python] [Twisted] #3977: Reintegrate qt4reactor into
	twisted
In-Reply-To: <058.cc2a02b4a3b3cfb17eb7e4165401a598@twistedmatrix.com>
References: <049.97c61a86b0b8c9e4826582540fe60cd1@twistedmatrix.com>
	<058.cc2a02b4a3b3cfb17eb7e4165401a598@twistedmatrix.com>
Message-ID: <AANLkTimOplozOdQX-IFj55UCFUbHDO9VPPjdj92UrRdk@mail.gmail.com>

On Tue, Jun 29, 2010 at 7:28 PM, Twisted <trac at twistedmatrix.com> wrote:

> #3977: Reintegrate qt4reactor into twisted
>
> -----------------------------+----------------------------------------------
>     Reporter:  jknight      |           Owner:  ghtdak
>         Type:  enhancement  |          Status:  new
>     Priority:  normal       |       Milestone:
>    Component:  core         |        Keywords:
>       Branch:               |   Branch_author:
> Launchpad_bug:               |
>
> -----------------------------+----------------------------------------------
>
> Comment(by sc):
>
>  Replying to [comment:2 ghtdak]:
>  > I'm cool with changing to whatever license makes sense.  IIRC, the other
>  contributers would include Therve, Itmar Shtull-Trauring and Gabe Rudy
>  >
>  > Maintainer: U{Glenn H Tarbox, PhD<mailto:glenn at tarbox.org>}
>  > Previous maintainer: U{Itamar Shtull-
>  Trauring<mailto:twisted at itamarst.org>}
>  > Original port to QT4: U{Gabe Rudy<mailto:rudy at goldenhelix.com>}
>
>  Following up on this mailing list thread as to the status of the
>  qt4reactor and its licensing:
>
>  http://twistedmatrix.com/pipermail/twisted-python/2010-June/022457.html
>
>
>  It would seem PySide has reached the point where it should be a viable
>  alternative to PyQt, without the license complications.
>
>  It is still necessary to attain permission to re-release the qt4reactor
>  code under Twisted's MIT license however.
>

Is there something specific I need do to the code to "make it so" or is this
message intended for the previous maintainer(s)?

-glenn


>
> --
> Ticket URL: <http://twistedmatrix.com/trac/ticket/3977#comment:4>
> Twisted <http://twistedmatrix.com/trac/>
> Engine of your Internet
>



-- 
Glenn H. Tarbox, PhD ||  206-274-6919 || glenn at tarbox.org - xmpp || ghtdak -
aim,jabber,IRC,yahoo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100629/0157f510/attachment.htm 

From glenn at tarbox.org  Wed Jun 30 02:04:52 2010
From: glenn at tarbox.org (Glenn Tarbox, PhD)
Date: Tue, 29 Jun 2010 23:04:52 -0700
Subject: [Twisted-Python] qt4 reactor status
In-Reply-To: <20100629124344.1937.276903590.divmod.xquotient.547@localhost.localdomain>
References: <4C2640F2.70901@puzzlebox.info>
	<20100627223716.1937.1623596183.divmod.xquotient.544@localhost.localdomain>
	<AANLkTikz4CSorSFRsSqsyCBnvmu1oC9NT6Q8_Tdoo3lm@mail.gmail.com>
	<i095ea$m3u$1@dough.gmane.org> <4C29A7A4.3020004@puzzlebox.info>
	<20100629124344.1937.276903590.divmod.xquotient.547@localhost.localdomain>
Message-ID: <AANLkTilAIVxM7DVnxA72SXLD4ZO_LY881ADsGstCK0T_@mail.gmail.com>

On Tue, Jun 29, 2010 at 5:43 AM, <exarkun at twistedmatrix.com> wrote:

> On 07:58 am, sc at puzzlebox.info wrote:
> >
> >     I might attach a request to the last ticket in the tracker as a
> >start, and see if that gets any response. I'm only a user of Twisted
> >and
> >don't feel comfortable directly hassling folks who were kind enough to
> >donate their time to its development.
>
> Any of the code that was developed while the reactor was in Twisted
> itself is MIT licensed.  Perhaps that means you only need to track down
> people who contributed after the code was moved out of Twisted?
>

I believe thats just me.  There were a couple of bugs / upgrades /
suggestions which I incorporated... and are annotated in the git repo on
github with names and email (IIRC).

So, maybe I just need to change the headers to make it MIT instead of GPL v2
and its all cool.

-glenn


> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Glenn H. Tarbox, PhD ||  206-274-6919 || glenn at tarbox.org - xmpp || ghtdak -
aim,jabber,IRC,yahoo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100629/24d2506f/attachment.htm 

From sc at puzzlebox.info  Wed Jun 30 02:31:53 2010
From: sc at puzzlebox.info (Steve Castellotti)
Date: Tue, 29 Jun 2010 23:31:53 -0700
Subject: [Twisted-Python] qt4 reactor status
In-Reply-To: <AANLkTilAIVxM7DVnxA72SXLD4ZO_LY881ADsGstCK0T_@mail.gmail.com>
References: <4C2640F2.70901@puzzlebox.info>
	<20100627223716.1937.1623596183.divmod.xquotient.544@localhost.localdomain>
	<AANLkTikz4CSorSFRsSqsyCBnvmu1oC9NT6Q8_Tdoo3lm@mail.gmail.com>
	<i095ea$m3u$1@dough.gmane.org> <4C29A7A4.3020004@puzzlebox.info>
	<20100629124344.1937.276903590.divmod.xquotient.547@localhost.localdomain>
	<AANLkTilAIVxM7DVnxA72SXLD4ZO_LY881ADsGstCK0T_@mail.gmail.com>
Message-ID: <1277879513.2328.152.camel@localhost>

On Tue, 2010-06-29 at 23:04 -0700, Glenn Tarbox, PhD wrote: 

>         Any of the code that was developed while the reactor was in
>         Twisted
>         itself is MIT licensed.  Perhaps that means you only need to
>         track down
>         people who contributed after the code was moved out of
>         Twisted? 
> 
> 
> 
> I believe thats just me.  There were a couple of bugs / upgrades /
> suggestions which I incorporated... and are annotated in the git repo
> on github with names and email (IIRC).
> 
> 
> So, maybe I just need to change the headers to make it MIT instead of
> GPL v2 and its all cool.



    Actually, I think you're right.

    From the header of the main file in the launchpad trunk:

http://bazaar.launchpad.net/~ghtdak/qt4reactor/trunk/annotate/head:/qt4reactor.py

# Copyright (c) 2001-2008 Twisted Matrix Lboratories.
# See LICENSE for details.


    If Twisted Matrix has the Copyright, the license doesn't matter,
they can dual-license under any second license they want. Any changes,
unless individual Copyright was claimed by the contributor, would fall
under the original Copyright.

    And considering you're the official maintainer, you should have the
ability to do that, even if it hadn't been your code in the first place
(c:


    At least I'm pretty sure that how it all works, I am not a lawyer
and so forth.


    That should safely handle the licensing around the qt4reactor code,
now I suppose its back to the small matter of making sure it works with
the latest Qt4 and PySide codebase (c:



Steve Castellotti
Puzzlebox Limited
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100629/a396bf13/attachment-0001.htm 

From petshmidt at googlemail.com  Wed Jun 30 10:41:38 2010
From: petshmidt at googlemail.com (Pet)
Date: Wed, 30 Jun 2010 16:41:38 +0200
Subject: [Twisted-Python] getting all results from DeferredList
Message-ID: <AANLkTim2EsPEaVtpLj5QI3Fs6UJ6yZ_fAhksDNzv_X73@mail.gmail.com>

Hello,

I'm trying to process results from several Deferreds (d1, d2) with
DeferredList, merging it into one list and sending back to client.
While merging works, the client has no results. What is the way to do
tasks (db queries in my case) in parallel and then merge results?

BTW, are nested runInteraction ok?

Thanks for help!
Pet


class Test:
    def __init__(self, cursor):
        self.cursor = cursor

    def test(db, params):
        if params.get('query'):
            params['q'] = self.someFunc3(db, params)

        def processResults(results, out):
            #merge results into one
            for _, r in results:
                out.extend(r)
            return out

        out = []
        d1 = self.cursor.runInteraction(self.someFunc, params)
        d2 = self.cursor.runInteraction(self.someFunc2, params)
        d = DeferredList([d1,d2])
        d.addCallback(processResults, out)
        d.addErrback(log.err)
        return d

class XMLRPCProtokoll(xmlrpc.XMLRPC):
    def __init__(self):
        self.db = adbapi.ConnectionPool()
        xmlrpc.XMLRPC.__init__(self, True)

    def xmlrpc_test(self, param):
        t = Test(self.db)
        return self.db.runInteraction(t.test, param)


From glenn at tarbox.org  Wed Jun 30 14:41:50 2010
From: glenn at tarbox.org (Glenn Tarbox, PhD)
Date: Wed, 30 Jun 2010 11:41:50 -0700
Subject: [Twisted-Python] qt4 reactor status
In-Reply-To: <1277879513.2328.152.camel@localhost>
References: <4C2640F2.70901@puzzlebox.info>
	<20100627223716.1937.1623596183.divmod.xquotient.544@localhost.localdomain>
	<AANLkTikz4CSorSFRsSqsyCBnvmu1oC9NT6Q8_Tdoo3lm@mail.gmail.com>
	<i095ea$m3u$1@dough.gmane.org> <4C29A7A4.3020004@puzzlebox.info>
	<20100629124344.1937.276903590.divmod.xquotient.547@localhost.localdomain>
	<AANLkTilAIVxM7DVnxA72SXLD4ZO_LY881ADsGstCK0T_@mail.gmail.com>
	<1277879513.2328.152.camel@localhost>
Message-ID: <AANLkTilqSsLrZgtnz0p8IOjqirxgP-xos4RHpwgmbOTu@mail.gmail.com>

On Tue, Jun 29, 2010 at 11:31 PM, Steve Castellotti <sc at puzzlebox.info>wrote:

>  On Tue, 2010-06-29 at 23:04 -0700, Glenn Tarbox, PhD wrote:
>
>  Any of the code that was developed while the reactor was in Twisted
> itself is MIT licensed.  Perhaps that means you only need to track down
> people who contributed after the code was moved out of Twisted?
>
>
>
> I believe thats just me.  There were a couple of bugs / upgrades /
> suggestions which I incorporated... and are annotated in the git repo on
> github with names and email (IIRC).
>
>
> So, maybe I just need to change the headers to make it MIT instead of GPL
> v2 and its all cool.
>
>
>
>     Actually, I think you're right.
>
>     From the header of the main file in the launchpad trunk:
>
>
> http://bazaar.launchpad.net/~ghtdak/qt4reactor/trunk/annotate/head:/qt4reactor.py
>
> # Copyright (c) 2001-2008 Twisted Matrix Lboratories.
> # See LICENSE for details.
>
>
>     If Twisted Matrix has the Copyright, the license doesn't matter, they
> can dual-license under any second license they want. Any changes, unless
> individual Copyright was claimed by the contributor, would fall under the
> original Copyright.
>
>     And considering you're the official maintainer, you should have the
> ability to do that, even if it hadn't been your code in the first place (c:
>
>
>     At least I'm pretty sure that how it all works, I am not a lawyer and
> so forth.
>

There was only one place where GPL was referenced... not sure why I put it
there but it was clearly a bug... which I patched.  I also copied Twisted's
LICENSE file into the tree.

If Twisted indeed holds copyright... then it was probably already their
right to do whatever... This makes it more explicit perhaps.

Since I'm not a bzr person, I fixed the code at github

http://github.com/ghtdak/qtreactor

I'd update launchpad but that might take a bit and somebody is gonna want to
take over maintenance anyways.

-glenn


>
>     That should safely handle the licensing around the qt4reactor code, now
> I suppose its back to the small matter of making sure it works with the
> latest Qt4 and PySide codebase (c:
>
>
>
>   Steve Castellotti
> Puzzlebox Limited
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Glenn H. Tarbox, PhD ||  206-274-6919 || glenn at tarbox.org - xmpp || ghtdak -
aim,jabber,IRC,yahoo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20100630/003666f6/attachment.htm 

From exarkun at twistedmatrix.com  Wed Jun 30 14:42:59 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 30 Jun 2010 18:42:59 -0000
Subject: [Twisted-Python] getting all results from DeferredList
In-Reply-To: <AANLkTim2EsPEaVtpLj5QI3Fs6UJ6yZ_fAhksDNzv_X73@mail.gmail.com>
References: <AANLkTim2EsPEaVtpLj5QI3Fs6UJ6yZ_fAhksDNzv_X73@mail.gmail.com>
Message-ID: <20100630184259.1937.1347394048.divmod.xquotient.567@localhost.localdomain>

On 02:41 pm, petshmidt at googlemail.com wrote:
>Hello,
>
>I'm trying to process results from several Deferreds (d1, d2) with
>DeferredList, merging it into one list and sending back to client.

You might like twisted.internet.defer.gatherResults.
>
>While merging works, the client has no results. What is the way to do
>tasks (db queries in my case) in parallel and then merge results?

I don't think I understand this part of the question.
>BTW, are nested runInteraction ok?

Not really.  Twisted APIs are almost all required to be invoked in the 
reactor thread.  Nested runInteraction calls would mean calling 
runInteraction in some other thread, and that's not allowed.

Jean-Paul
>Thanks for help!
>Pet
>
>
>class Test:
>    def __init__(self, cursor):
>        self.cursor = cursor
>
>    def test(db, params):
>        if params.get('query'):
>            params['q'] = self.someFunc3(db, params)
>
>        def processResults(results, out):
>            #merge results into one
>            for _, r in results:
>                out.extend(r)
>            return out
>
>        out = []
>        d1 = self.cursor.runInteraction(self.someFunc, params)
>        d2 = self.cursor.runInteraction(self.someFunc2, params)
>        d = DeferredList([d1,d2])
>        d.addCallback(processResults, out)
>        d.addErrback(log.err)
>        return d
>
>class XMLRPCProtokoll(xmlrpc.XMLRPC):
>    def __init__(self):
>        self.db = adbapi.ConnectionPool()
>        xmlrpc.XMLRPC.__init__(self, True)
>
>    def xmlrpc_test(self, param):
>        t = Test(self.db)
>        return self.db.runInteraction(t.test, param)
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From petshmidt at googlemail.com  Wed Jun 30 15:00:59 2010
From: petshmidt at googlemail.com (Pet)
Date: Wed, 30 Jun 2010 21:00:59 +0200
Subject: [Twisted-Python] getting all results from DeferredList
In-Reply-To: <20100630184259.1937.1347394048.divmod.xquotient.567@localhost.localdomain>
References: <AANLkTim2EsPEaVtpLj5QI3Fs6UJ6yZ_fAhksDNzv_X73@mail.gmail.com> 
	<20100630184259.1937.1347394048.divmod.xquotient.567@localhost.localdomain>
Message-ID: <AANLkTinlQcn7OsHBCAqpHtKsu-RU8voLo69g35iu_LIq@mail.gmail.com>

On Wed, Jun 30, 2010 at 8:42 PM,  <exarkun at twistedmatrix.com> wrote:
> On 02:41 pm, petshmidt at googlemail.com wrote:
>>Hello,
>>
>>I'm trying to process results from several Deferreds (d1, d2) with
>>DeferredList, merging it into one list and sending back to client.
>
> You might like twisted.internet.defer.gatherResults.
>>
>>While merging works, the client has no results. What is the way to do
>>tasks (db queries in my case) in parallel and then merge results?

I mean, running functions which performs db queries asynchronously and
then merge results

>
> I don't think I understand this part of the question.
>>BTW, are nested runInteraction ok?
>
> Not really. ?Twisted APIs are almost all required to be invoked in the
> reactor thread. ?Nested runInteraction calls would mean calling
> runInteraction in some other thread, and that's not allowed.


That is why it not worked. I should redesign my application.

Thanks!

>
> Jean-Paul
>>Thanks for help!
>>Pet
>>
>>
>>class Test:
>> ? ?def __init__(self, cursor):
>> ? ? ? ?self.cursor = cursor
>>
>> ? ?def test(db, params):
>> ? ? ? ?if params.get('query'):
>> ? ? ? ? ? ?params['q'] = self.someFunc3(db, params)
>>
>> ? ? ? ?def processResults(results, out):
>> ? ? ? ? ? ?#merge results into one
>> ? ? ? ? ? ?for _, r in results:
>> ? ? ? ? ? ? ? ?out.extend(r)
>> ? ? ? ? ? ?return out
>>
>> ? ? ? ?out = []
>> ? ? ? ?d1 = self.cursor.runInteraction(self.someFunc, params)
>> ? ? ? ?d2 = self.cursor.runInteraction(self.someFunc2, params)
>> ? ? ? ?d = DeferredList([d1,d2])
>> ? ? ? ?d.addCallback(processResults, out)
>> ? ? ? ?d.addErrback(log.err)
>> ? ? ? ?return d
>>
>>class XMLRPCProtokoll(xmlrpc.XMLRPC):
>> ? ?def __init__(self):
>> ? ? ? ?self.db = adbapi.ConnectionPool()
>> ? ? ? ?xmlrpc.XMLRPC.__init__(self, True)
>>
>> ? ?def xmlrpc_test(self, param):
>> ? ? ? ?t = Test(self.db)
>> ? ? ? ?return self.db.runInteraction(t.test, param)
>>
>>_______________________________________________
>>Twisted-Python mailing list
>>Twisted-Python at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From hugh.emberson at gmail.com  Wed Jun 30 22:02:22 2010
From: hugh.emberson at gmail.com (Hugh Emberson)
Date: Thu, 1 Jul 2010 12:02:22 +1000
Subject: [Twisted-Python] Creating a COM object in a thread
In-Reply-To: <i0bfj2$iem$1@dough.gmane.org>
References: <i0bfj2$iem$1@dough.gmane.org>
Message-ID: <AANLkTimFQTnhonipDS99jC_hZbwqmKRC0l7G28L4pxvc@mail.gmail.com>

The way I do this is I isolate all the COM stuff in a separate thread
from thread that runs my reactor.

This thread starts by calling:

??? pythoncom.CoInitializeEx(pythoncom.COINIT_APARTMENTTHREADED)

it then creates the COM object and runs an event loop something like this:

??? while keepRunning:
??????? n = MsgWaitForMultipleObjects(handles, False, timeout, QS_ALLINPUT)
??????? if n == WAIT_OBJECT_0 + nHandles:
??????????? # There is a win32 message waiting.
??????????? if pythoncom.PumpWaitingMessages():
??????????????? keepRunning = False

I send messages to the thread by putting them in a queue and setting
an event.? The messages cause methods to be called on the COM object.
I send the results of the COM methods back to the reactor thread using
reactor.callFromThread().

It's a bit of effort to do this, but it works really well.? It's been
in production for several years and I've never had a problem with it.

Hope this helps,
Hugh

On Tue, Jun 29, 2010 at 10:43 AM, Don Dwiggins <ddwiggins at advpubtech.com> wrote:
>
> I need to create a COM object in a Windows application, and call it.
> Since the call will take some time to execute, I wrap it in a deferToThread.
>
> I've found that, when I create the object inline, it works. ?However,
> when I defer it, it hangs up in the win32com.client.Dispatch call. ?I've
> tried several things, including digging into the guts of Dispatch -- the
> hangup occurs during the creation of the object.
>
> I've discussed this with Mark Hammond, who suggests one lead:
>
> "The Windows message loop is used by the COM marshalling process. ?IIRC,
> the first thread to initialize COM in a process is the thread in which
> single-threaded objects will always end up being called in. ?If a
> different thread creates the object, COM uses Windows messages to
> marshall all calls back to that main thread. ?IOW, your second thread
> makes a call - even to create the object - which results in that thread
> sending a windows message to the main thread to act on the request.
>
> What this probably means in practice is that twisted needs to use a
> reactor which calls MsgWaitForMultipleObjects() and runs a message loop
> when the function detects a new message is in the queue. ?I'm not sure
> if there is an existing reactor which does this."
>
> I'm posting this on the off chance that someone else has wandered into
> this corner of Windows arcana, and has come up with something useful.
>
> I'm about to give up on doing this "inside" the twisted app, and running
> it in a separate app that I'll call from the thread.
>
> TIA,
> --
> Don Dwiggins
> Advanced Publishing Technology
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From alvinwang at gmail.com  Tue Jun  1 00:57:43 2010
From: alvinwang at gmail.com (Alvin Wang)
Date: Mon, 31 May 2010 23:57:43 -0700
Subject: [Twisted-Python] RDT/RTSP Library for Twisted
In-Reply-To: <AANLkTimXdxpkl5je2xDM6j0HxzArNjrF9STdbwkyeFWK@mail.gmail.com>
References: <AANLkTimXdxpkl5je2xDM6j0HxzArNjrF9STdbwkyeFWK@mail.gmail.com>
Message-ID: <AANLkTinh2xrvIcz_S6twy64faxnxqVRlzM8ez8vKJqau@mail.gmail.com>

That is awesome.  It would be nice if it was the same license as Twisted.

Alvin

7bc0b8c815
7bc0b8c815




On Mon, May 31, 2010 at 8:38 PM, David Bern <odie5533 at gmail.com> wrote:

> I wrote a set of Twisted libraries for RDT and RTSP streaming, along
> with handlers for SDPP, ASMRP, and RMFF. I thought I'd announce it
> here since they are most useful to other developers. I've released
> them under the GNU GPL but I'd be willing to release them under a
> different license if requested.
>
> Link to blog post:
>
> http://odie5533.com/twisted-python-rdt-rtsp-library-and-stream-downloader-346
> Link to library:
>
> http://odie5533.com/programs/RDT-RTSP/Twisted%20RDT-RTSP%20Library%202010-05-31.zip
>
> --
> David Bern
> http://odie5533.com/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100531/f9d14e3d/attachment.html>

From lvh at laurensvh.be  Tue Jun  1 00:58:36 2010
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Tue, 1 Jun 2010 08:58:36 +0200
Subject: [Twisted-Python] RDT/RTSP Library for Twisted
In-Reply-To: <AANLkTimXdxpkl5je2xDM6j0HxzArNjrF9STdbwkyeFWK@mail.gmail.com>
References: <AANLkTimXdxpkl5je2xDM6j0HxzArNjrF9STdbwkyeFWK@mail.gmail.com>
Message-ID: <AANLkTiktx4Gl8tLEWs-ATy6W5oVk87dHVIW5-GyGfeE0@mail.gmail.com>

Thanks for contributing to Twisted!

A couple of things with regards to your questions and your project in
particular:

About the licensing issue: well, Twisted itself (as you probably
already know) is released under a permissive license, and that's a
conscious decision. The GPL can make it somewhat harder for companies
to use and potentially contribute to your code. Plus, your code is a
library, not a standalone app, which is an argument for a more
permissive license. If you *like* the GPL's copyleft bits, by all
means: please continue using it (just be aware that means quite a few
people will refuse to touch your code). Ideally, there'd be a license
identical to Twisted's.

Something that might be slightly more important: do you have a public
VCS repository somewhere (Launchpad, Github, Bitbucket...)? The people
you would want contributing are probably very scared of hacking on an
existing codebase without the ability to branch/fork and later merge
again :-) An additional problem is that there's no obvious way to
report bugs, which might scare people out of using it.

Somewhat related to the last question: you might want to consider
registering your thing in the Twisted Community Code (tx) group on
Launchpad for free advertising:

https://launchpad.net/tx


Lots of luck with your library and the app that presumably goes with
it (albeit a bit more under the radar ;-)),
Laurens



From glyph at twistedmatrix.com  Tue Jun  1 08:46:31 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 1 Jun 2010 10:46:31 -0400
Subject: [Twisted-Python] RDT/RTSP Library for Twisted
In-Reply-To: <AANLkTinh2xrvIcz_S6twy64faxnxqVRlzM8ez8vKJqau@mail.gmail.com>
References: <AANLkTimXdxpkl5je2xDM6j0HxzArNjrF9STdbwkyeFWK@mail.gmail.com>
	<AANLkTinh2xrvIcz_S6twy64faxnxqVRlzM8ez8vKJqau@mail.gmail.com>
Message-ID: <5D7E5129-2898-40BA-A39B-C2AF1B3E7DD6@twistedmatrix.com>


On Jun 1, 2010, at 2:57 AM, Alvin Wang wrote:

> That is awesome.  It would be nice if it was the same license as Twisted.  

Among other things, if it were available under the MIT license, it could one day be included along with Twisted, if that were something you're interested in.  We would not be able to accept a contribution of GPL'd code, though.




From jrennie at gmail.com  Tue Jun  1 09:53:11 2010
From: jrennie at gmail.com (Jason Rennie)
Date: Tue, 1 Jun 2010 11:53:11 -0400
Subject: [Twisted-Python] t.i.i.IProcessTransport
Message-ID: <AANLkTinE-JRW2HeOrOsAqvxh4ACJ-xSlchGzu94gabpE@mail.gmail.com>

Is it a documentation bug that t.i.Process or t.i._BaseProcess is not listed
as an implementation of IProcessTransport?  Also, it appears that the
signalProcess method should list "TERM" as one of the acceptable
cross-platform signal names.

I'm happy to create a trac ticket.

Cheers,

Jason

-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100601/0996f53d/attachment.html>

From glyph at twistedmatrix.com  Tue Jun  1 10:10:11 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 1 Jun 2010 12:10:11 -0400
Subject: [Twisted-Python] t.i.i.IProcessTransport
In-Reply-To: <AANLkTinE-JRW2HeOrOsAqvxh4ACJ-xSlchGzu94gabpE@mail.gmail.com>
References: <AANLkTinE-JRW2HeOrOsAqvxh4ACJ-xSlchGzu94gabpE@mail.gmail.com>
Message-ID: <B1AB8E6D-AAE8-4867-935E-C230D6B19295@twistedmatrix.com>


On Jun 1, 2010, at 11:53 AM, Jason Rennie wrote:

> Is it a documentation bug that t.i.Process or t.i._BaseProcess is not listed as an implementation of IProcessTransport?  Also, it appears that the signalProcess method should list "TERM" as one of the acceptable cross-platform signal names.
> 
> I'm happy to create a trac ticket.

This does sound like a bug.

You might also want to be aware of these related bugs:

	<http://twistedmatrix.com/trac/ticket/2838>
	<http://twistedmatrix.com/trac/ticket/1478>

if you are looking stuff up in this area.

So please do create a trac ticket, and thanks for noticing :).


From jrennie at gmail.com  Tue Jun  1 10:35:50 2010
From: jrennie at gmail.com (Jason Rennie)
Date: Tue, 1 Jun 2010 12:35:50 -0400
Subject: [Twisted-Python] t.i.i.IProcessTransport
In-Reply-To: <B1AB8E6D-AAE8-4867-935E-C230D6B19295@twistedmatrix.com>
References: <AANLkTinE-JRW2HeOrOsAqvxh4ACJ-xSlchGzu94gabpE@mail.gmail.com>
	<B1AB8E6D-AAE8-4867-935E-C230D6B19295@twistedmatrix.com>
Message-ID: <AANLkTim6Kkmxdm7HJdLuLTrhDVGquvYmVZMOHgPBUlzI@mail.gmail.com>

I created:

http://twistedmatrix.com/trac/ticket/4479

Thanks for the pointers to the related bugs.  I referenced them in #4479.

Cheers,

Jason

On Tue, Jun 1, 2010 at 12:10 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

>
> On Jun 1, 2010, at 11:53 AM, Jason Rennie wrote:
>
> > Is it a documentation bug that t.i.Process or t.i._BaseProcess is not
> listed as an implementation of IProcessTransport?  Also, it appears that the
> signalProcess method should list "TERM" as one of the acceptable
> cross-platform signal names.
> >
> > I'm happy to create a trac ticket.
>
> This does sound like a bug.
>
> You might also want to be aware of these related bugs:
>
>        <http://twistedmatrix.com/trac/ticket/2838>
>        <http://twistedmatrix.com/trac/ticket/1478>
>
> if you are looking stuff up in this area.
>
> So please do create a trac ticket, and thanks for noticing :).
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100601/d060748f/attachment-0001.html>

From exarkun at twistedmatrix.com  Sat Jun  5 22:05:26 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 06 Jun 2010 04:05:26 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1275797126.51.1929728211@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100606/74333b98/attachment-0001.html>

From lvh at laurensvh.be  Sun Jun  6 13:59:19 2010
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Sun, 6 Jun 2010 21:59:19 +0200
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
Message-ID: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>

Hey,


For the Twisted folks: this thing has been reviewed by the ZeroMQ
folks first because I wanted to be sure I got the technical details
right on the their side of things.

I'd like to open up a discussion from a while back regarding the
integration of ZeroMQ (a messaging system: similar to AMQP but with
the intent to be simpler) into Twisted.

The interested ZeroMQ people and the interested Twisted people (names
withheld to protect the guilty) disagreed on what it should look like.
I think that's mostly because neither party really understood what the
other's software wanted to do. So, I'll try to give everyone a basic
explanation without going too deep into either Twisted or ZeroMQ: my
apologies if I spell out the basics of your thing too much and it gets
boring :)

ZeroMQ aims to be a thin layer above TCP, behaving like TCP but
'better'. That sounds like a vague marketing statement, but it helps
to understand some of the terminology if you keep that in the back of
your head. (What exactly 'better' means is way beyond the current
scope: basically, ZeroMQ wants to help socket programmers to stop
reinventing the wheel by implementing common behavior such as pub/sub,
request/reply...). Essentially AMQP but much simpler, and brokerless
in most cases. This email is already going to go way over the sane
character count, thankfully the ZeroMQ webpage does a great job at
explaining stuff :-)

I think this highlights the main problem people had. There a partial
overlap between Twisted and ZeroMQ. The ZeroMQ implementation does
things Twisted does too: it implements a bunch of low level networking
stuff using eg epoll. It deals with real sockets, and Twisted wants to
do that as well.

ZeroMQ uses things called Sockets. They're similar but not the same
thing as TCP sockets (instead delegating work to TCP eventually), so
you can't use traditional methods like select or epoll with them,
because, for example, they don't have file descriptors. Some
underlying thing probably does have fds; but ZeroMQ worries about that
for you under the hood, just like Twisted does for other TCP traffic.

There are a couple of options for making ZeroMQ work with Twisted:

1) implement everything in Python, using Twisted's TCP stuff. I think
this is mostly a bad idea and the ZeroMQ people seem to agree: _lots_
of work, ZeroMQ libs are stupidly fast already, Python not being the
best tool for binary protocols...
2) write a thin wrapper around the C(++) libs: great, as long as it
never has to go into the Twisted trunk
3) use pyzmq's thin wrapper around the C(++) libs: sounds like the
best idea to me, again with reservations wrt the Twisted trunk

Originally there was a fourth idea, which considered libzmq as a new
mechanism: like epoll, so you'd have a ZMQ-specific reactor. A bunch
of people didn't like this, and I can somewhat see the point: hard to
integrate with other event loops like GUIs, for example.

pyzmq offers something called select, which works just like select
except it works on both file descriptors and ZeroMQ Sockets. It just
delegates all of the work to libzmq. We could use
ThreadedSelectReactor and have it use ZMQ's select. I'm not sure if it
should use "normal" select everywhere else: because zmq's select is in
fact much better than select.select (it just behaves like
select.select in the sense that you give it three sets of fds and an
optional timeout; under the hood it's actually epoll or kqueue or
whatever) and it can handle plain old file descriptors just fine. So,
you'd have a TRS with either 1 zmq.select running on everything or 1
zmq.select running over Sockets and 1 select.select running over your
classic fds. Personally I kind of like the idea of zmq's select taking
over, but I don't know how well that works in practice.

A potential option for Twisted, which some people don't quite like,
would be to have a listenZMQ and connectZMQ, analogous to
listenTCP/listenUDP/listenSSL and the respective connect*s. I think
this makes more sense to the ZeroMQ people (who think of ZeroMQ as a
layer "next to" TCP which happens to be implemented on top of TCP, on
top of which you build your stuff) than the Twisted people (who think
of ZeroMQ's protocol as yet another TCP-using protocol just like HTTP
for example). Having worked with both pieces of software, the more I
play with ZeroMQ the more I think listenZMQ/connectZMQ make sense.
ZeroMQ really tries to be one of those things and it shows. What
ZeroMQ wants to do is semantically much closer to the existing
connects and listens. I'm not just making this up: the ZeroMQ people
have reviewed this and this is really what ZeroMQ wants to be.

Another argument for making ZMQ special is that TCP is just one of the
things ZeroMQ works with. UNIX domain pipes, PGM reliable multicast,
UDP PGM encapsulation, and even inter-thread communication.

I know some Twisted people way smarter than me basically thought the
connectZMQ/listenZMQ thing was a mistake, but I'm not sure to what
extent that is because they were right and to what extent that was
because they didn't really know very much about ZeroMQ and just went
"it works on top of TCP so that's not where it goes". To Twisted folks
that disagree: would you change your opinion of ZMQ was *really*
something that's side-by-side with TCP instead of being implemented on
top of it? Like, say, SCTP is? Does the fact that it can work on top
of a bunch of stuff that isn't TCP change that?

Talking with the ZeroMQ people has been a positive experience: they
were very accessible and cooperative, and really just want a bigger
market for their software (who doesn't?) so I hope something useful
comes out of this :-)



tia
lvh



From radix at twistedmatrix.com  Sun Jun  6 14:18:11 2010
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 6 Jun 2010 15:18:11 -0500
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
In-Reply-To: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
Message-ID: <AANLkTimsWDD-iyjWX6eNUWRZYO8Nzb25A__AytfTUpcs@mail.gmail.com>

On Sun, Jun 6, 2010 at 2:59 PM, Laurens Van Houtven <lvh at laurensvh.be> wrote:
> A potential option for Twisted, which some people don't quite like,
> would be to have a listenZMQ and connectZMQ, analogous to
> listenTCP/listenUDP/listenSSL and the respective connect*s. I think
> this makes more sense to the ZeroMQ people (who think of ZeroMQ as a
> layer "next to" TCP which happens to be implemented on top of TCP, on
> top of which you build your stuff) than the Twisted people (who think
> of ZeroMQ's protocol as yet another TCP-using protocol just like HTTP
> for example). Having worked with both pieces of software, the more I
> play with ZeroMQ the more I think listenZMQ/connectZMQ make sense.
> ZeroMQ really tries to be one of those things and it shows. What
> ZeroMQ wants to do is semantically much closer to the existing
> connects and listens. I'm not just making this up: the ZeroMQ people
> have reviewed this and this is really what ZeroMQ wants to be.

At the moment I only feel compelled to respond to this point in particular.

We don't want to have any more transport-specific methods on the
reactor, and this has nothing to do with ZMQ. We also don't want to
have connectSOCKS, or listenSerialPort. Fortunately, the endpoints
API[1] was very recently merged to Twisted trunk, so any new
transport-specific connectors/listeners can be implemented in terms of
its interfaces. listenTCP and so forth should eventually be deprecated
in preference to the endpoints APIs.

1: Source: http://twistedmatrix.com/trac/browser/trunk/twisted/internet/endpoints.py
    ticket: http://twistedmatrix.com/trac/ticket/1442


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/



From lvh at laurensvh.be  Sun Jun  6 17:19:20 2010
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Mon, 7 Jun 2010 01:19:20 +0200
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
In-Reply-To: <AANLkTimsWDD-iyjWX6eNUWRZYO8Nzb25A__AytfTUpcs@mail.gmail.com>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
	<AANLkTimsWDD-iyjWX6eNUWRZYO8Nzb25A__AytfTUpcs@mail.gmail.com>
Message-ID: <AANLkTilHWiUkIsSAzarmkl4xZHhoZHmbCrkX-HYFuO5j@mail.gmail.com>

On Sun, Jun 6, 2010 at 10:18 PM, Christopher Armstrong
<radix at twistedmatrix.com> wrote:
> On Sun, Jun 6, 2010 at 2:59 PM, Laurens Van Houtven <lvh at laurensvh.be> wrote:
> We don't want to have any more transport-specific methods on the
> reactor, and this has nothing to do with ZMQ. We also don't want to
> have connectSOCKS, or listenSerialPort. Fortunately, the endpoints
> API[1] was very recently merged to Twisted trunk, so any new
> transport-specific connectors/listeners can be implemented in terms of
> its interfaces. listenTCP and so forth should eventually be deprecated
> in preference to the endpoints APIs.
>
> 1: Source: http://twistedmatrix.com/trac/browser/trunk/twisted/internet/endpoints.py
>    ticket: http://twistedmatrix.com/trac/ticket/1442
> --
> Christopher Armstrong
> http://radix.twistedmatrix.com/
> http://planet-if.com/

Yep, that's the thing I was remembering. It just wasn't quite so close
to production use back then. So, I take it that just means
ZMQ4ServerEndpoint and ZMQ4ClientEndpoint instead of
listenZMQ/connectZMQ? Most of the argument (specifically that, to
Twisted, ZeroMQ should not be a thing on top of TCP but instead be its
own thing).

lvh



From lvh at laurensvh.be  Sun Jun  6 17:39:27 2010
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Mon, 7 Jun 2010 01:39:27 +0200
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
In-Reply-To: <AANLkTilHWiUkIsSAzarmkl4xZHhoZHmbCrkX-HYFuO5j@mail.gmail.com>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
	<AANLkTimsWDD-iyjWX6eNUWRZYO8Nzb25A__AytfTUpcs@mail.gmail.com>
	<AANLkTilHWiUkIsSAzarmkl4xZHhoZHmbCrkX-HYFuO5j@mail.gmail.com>
Message-ID: <AANLkTil8Lv9yqGS1GuKoxDdMmVtxxCH59FOvl_wJ6wXC@mail.gmail.com>

Whoops, something ate half my sentence.

My point was that most of the argument still stands, I think: just
listenZMQ and connectZMQ get replaced by ZMQ Endpoints :)


lvh



From itamar at itamarst.org  Sun Jun  6 21:07:20 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 06 Jun 2010 23:07:20 -0400
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
In-Reply-To: <AANLkTil8Lv9yqGS1GuKoxDdMmVtxxCH59FOvl_wJ6wXC@mail.gmail.com>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
	<AANLkTimsWDD-iyjWX6eNUWRZYO8Nzb25A__AytfTUpcs@mail.gmail.com>
	<AANLkTilHWiUkIsSAzarmkl4xZHhoZHmbCrkX-HYFuO5j@mail.gmail.com>
	<AANLkTil8Lv9yqGS1GuKoxDdMmVtxxCH59FOvl_wJ6wXC@mail.gmail.com>
Message-ID: <1275880040.1679.6.camel@blake>

On Mon, 2010-06-07 at 01:39 +0200, Laurens Van Houtven wrote:
> Whoops, something ate half my sentence.
> 
> My point was that most of the argument still stands, I think: just
> listenZMQ and connectZMQ get replaced by ZMQ Endpoints :)

1. SSL runs on top of TCP, yet Twisted has connectSSL/listenSSL and
endpoints for it. So the issue here is not the fact it runs over TCP.

2. I assume ZeroMQ "Sockets" have capabilities TCP doesn't, otherwise
what's the point? :) E.g. you mentioned pub/sub. So, assuming a ZeroMQ
endpoint and/or listen+connect methods, the *protocol* you would pass in
would be different than the standard protocols you'd use with TCP or
SSL, yes?

So, sounds like you want to define:
A) A way to hook up ZeroMQ event loop with Twisted event loop so that
both ZeroMQ and Twisted code can co-exist in same thread.

Then, expose ZeroMQ APIs to Python in a way that gives you:
B) A protocol class or interface.
C) An API for creating and hooking up these protocols to underlying
transports, i.e. ZeroMQ Sockets.

You could then release this as txZeroMQ; I'm not sure there's much
benefit in including this in Twisted, as opposed to standalone project.




From itamar at itamarst.org  Sun Jun  6 21:17:49 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 06 Jun 2010 23:17:49 -0400
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
In-Reply-To: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
Message-ID: <1275880669.1679.9.camel@blake>

On Sun, 2010-06-06 at 21:59 +0200, Laurens Van Houtven wrote:

> pyzmq offers something called select, which works just like select
> except it works on both file descriptors and ZeroMQ Sockets. It just
> delegates all of the work to libzmq. We could use
> ThreadedSelectReactor and have it use ZMQ's select. I'm not sure if it
> should use "normal" select everywhere else: because zmq's select is in
> fact much better than select.select (it just behaves like
> select.select in the sense that you give it three sets of fds and an
> optional timeout; under the hood it's actually epoll or kqueue or
> whatever) and it can handle plain old file descriptors just fine. So,
> you'd have a TRS with either 1 zmq.select running on everything or 1
> zmq.select running over Sockets and 1 select.select running over your
> classic fds. Personally I kind of like the idea of zmq's select taking
> over, but I don't know how well that works in practice.

You should probably just make a ZeroMQ reactor, instead of using TSR,
which (in its current form) is an ugly hack. TSR buys you nothing
because, unfortunately, it doesn't let you hook up to arbitrary
reactors. 

If the API really is select() compatible this presumably would be a
fairly trivial subclass of the reactor in
twisted.internet.selectreactor.





From exarkun at twistedmatrix.com  Sun Jun  6 22:54:14 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 07 Jun 2010 04:54:14 -0000
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
In-Reply-To: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
Message-ID: <20100607045414.1708.293470391.divmod.xquotient.158@localhost.localdomain>

On 6 Jun, 07:59 pm, lvh at laurensvh.be wrote:
>Hey,
>
>
>For the Twisted folks: this thing has been reviewed by the ZeroMQ
>folks first because I wanted to be sure I got the technical details
>right on the their side of things.
>
>I'd like to open up a discussion from a while back regarding the
>integration of ZeroMQ (a messaging system: similar to AMQP but with
>the intent to be simpler) into Twisted.
>
>The interested ZeroMQ people and the interested Twisted people (names
>withheld to protect the guilty) disagreed on what it should look like.
>I think that's mostly because neither party really understood what the
>other's software wanted to do. So, I'll try to give everyone a basic
>explanation without going too deep into either Twisted or ZeroMQ: my
>apologies if I spell out the basics of your thing too much and it gets
>boring :)
>
>ZeroMQ aims to be a thin layer above TCP, behaving like TCP but
>'better'. That sounds like a vague marketing statement, but it helps
>to understand some of the terminology if you keep that in the back of
>your head. (What exactly 'better' means is way beyond the current
>scope: basically, ZeroMQ wants to help socket programmers to stop
>reinventing the wheel by implementing common behavior such as pub/sub,
>request/reply...). Essentially AMQP but much simpler, and brokerless
>in most cases. This email is already going to go way over the sane
>character count, thankfully the ZeroMQ webpage does a great job at
>explaining stuff :-)
>
>I think this highlights the main problem people had. There a partial
>overlap between Twisted and ZeroMQ. The ZeroMQ implementation does
>things Twisted does too: it implements a bunch of low level networking
>stuff using eg epoll. It deals with real sockets, and Twisted wants to
>do that as well.
>
>ZeroMQ uses things called Sockets. They're similar but not the same
>thing as TCP sockets (instead delegating work to TCP eventually), so
>you can't use traditional methods like select or epoll with them,
>because, for example, they don't have file descriptors. Some
>underlying thing probably does have fds; but ZeroMQ worries about that
>for you under the hood, just like Twisted does for other TCP traffic.
>
>There are a couple of options for making ZeroMQ work with Twisted:
>
>1) implement everything in Python, using Twisted's TCP stuff. I think
>this is mostly a bad idea and the ZeroMQ people seem to agree: _lots_
>of work, ZeroMQ libs are stupidly fast already, Python not being the
>best tool for binary protocols...
>2) write a thin wrapper around the C(++) libs: great, as long as it
>never has to go into the Twisted trunk
>3) use pyzmq's thin wrapper around the C(++) libs: sounds like the
>best idea to me, again with reservations wrt the Twisted trunk
>
>Originally there was a fourth idea, which considered libzmq as a new
>mechanism: like epoll, so you'd have a ZMQ-specific reactor. A bunch
>of people didn't like this, and I can somewhat see the point: hard to
>integrate with other event loops like GUIs, for example.
>
>pyzmq offers something called select, which works just like select
>except it works on both file descriptors and ZeroMQ Sockets. It just
>delegates all of the work to libzmq. We could use
>ThreadedSelectReactor and have it use ZMQ's select. I'm not sure if it
>should use "normal" select everywhere else: because zmq's select is in
>fact much better than select.select (it just behaves like
>select.select in the sense that you give it three sets of fds and an
>optional timeout; under the hood it's actually epoll or kqueue or
>whatever) and it can handle plain old file descriptors just fine. So,
>you'd have a TRS with either 1 zmq.select running on everything or 1
>zmq.select running over Sockets and 1 select.select running over your
>classic fds. Personally I kind of like the idea of zmq's select taking
>over, but I don't know how well that works in practice.

A shortcoming of this approach is that much of the inefficiency of 
select(2) comes from its API.  If you have a select(2)-compatible API 
that's implemented in terms of epoll, you're still wasting a ton of 
effort that you could be skipping if you were using an epoll-compatible 
API instead.

But this is only an argument about performance, and likely no one is 
going to care about the poor performance of zmq.select anyway.
>
>A potential option for Twisted, which some people don't quite like,
>would be to have a listenZMQ and connectZMQ, analogous to
>listenTCP/listenUDP/listenSSL and the respective connect*s. I think
>this makes more sense to the ZeroMQ people (who think of ZeroMQ as a
>layer "next to" TCP which happens to be implemented on top of TCP, on
>top of which you build your stuff) than the Twisted people (who think
>of ZeroMQ's protocol as yet another TCP-using protocol just like HTTP
>for example). Having worked with both pieces of software, the more I
>play with ZeroMQ the more I think listenZMQ/connectZMQ make sense.
>ZeroMQ really tries to be one of those things and it shows. What
>ZeroMQ wants to do is semantically much closer to the existing
>connects and listens. I'm not just making this up: the ZeroMQ people
>have reviewed this and this is really what ZeroMQ wants to be.

A shortcoming of this approach is that as a reactor method, you have to 
implement it for each reactor you want to support.  You covered this a 
bit earlier in your email, where you talked about GUI integration.  Do 
you want to maintain an implementation of {listen,connect}ZMQ for 
select(/whatever), Glib2, Gtk2, wxWidgets, Qt, and Windows?  That's a 
lot more work than just maintaining one implementation.
>
>Another argument for making ZMQ special is that TCP is just one of the
>things ZeroMQ works with. UNIX domain pipes, PGM reliable multicast,
>UDP PGM encapsulation, and even inter-thread communication.

You got this one backwards.  This is an argument for not implementing 
ZMQ at the same level as TCP and UNIX sockets.  This is an argument for 
implementing it *on top of* those things.  Of course, the main benefit 
of implementing it on top of them is that you don't have to write a 
bunch of code to support each transport.  And the ZMQ people did that 
already.

Here's how it should work (modulo stupid factoring issues that aren't 
really related to ZMQ issues), given that there's a big C library that 
already implements a bunch of stuff that you don't want to re-implement:

    from twisted.internet.interfaces import IReactorFDSet

    class ZMQTransport(object):
        def __init__(self, reactor, zmqSocket, protocol):
            self._zmqSocket = zmqSocket
            self._transportPieces = []
            # On the next line, I use a method which I made up.  Maybe it
            # corresponds to some actual API ZMQ provides, maybe not, I
            # dunno.
            for fd in zmqSocket.allFileDescriptors():
                desc = _ZMQFileDescriptor(reactor, fd, zmqSocket)
                self._transportPieces.append(desc)

            self._protocol = protocol
            self._protocol.makeConnection(self)


    class _ZMQFileDescriptor(object):
        def __init__(self, reactor, fd, zmqSocket):
            if not IReactorFDSet.providedBy(reactor):
                raise RuntimeError(
                    "This is the IReactorFDSet implementation; "
                    "use another reactor or another zmq transport.")

            self._reactor = reactor
            self._reactor.addReader(self)
            self._fd = fd
            self._zmqSocket = zmqSocket

        def doRead(self):
            # Another made up method
            zmqEvents = self._zmqSocket.nonBlockingReadFrom(self._fd)
            if zmqEvents:
                self._protocol.zmqEventsReceived(zmqEvents)

        def doWrite(self):
            # One more, for luck.
            finished = self._zmqSocket.nonBlockingWriteTo(self._fd)
            if finished:
                self._reactor.removeWriter(self)

        def fileno(self):
            return self._fd

        def sendZMQEvents(self, events):
            # Whatever the API is.
            self._zmqSocket.sendZMQEvents(events)
            self._reactor.addWriter(self)


    class ZMQProtocol(object):
        def makeConnection(self, zmqTransport):
            self.zmqTransport = zmqTransport

        def zmqEventsReceived(self, zmqEvents):
            pass


    def connectZMQ(reactor, addrinfo, factory):
        # Blah blah blah - somehow get to the point where you have a 
# ZMQ Socket.
        d = ...
        def cbConnectionSetup(socket):
            ZMQTransport(
                reactor, socket, factory.buildProtocol(addrinfo))
        d.addCallback(cbConnectionSetup)

    def main():
        from twisted.internet import reactor
        from twisted.internet.protocol import ClientFactory
        f = ClientFactory()
        f.protocol = ZMQProtocol
        connectZMQ(reactor, ('example.com', 1234), f)
        reactor.run()


Okay, so that came out a little longer than I planned, but turn about is 
fair play.  Anyway, this is a bog standard transport implementation. 
The only thing even remotely interesting is that it maps multiple file 
descriptors onto a single transport.  And that seems to be the
So, if the ZMQ library offers APIs like the ones used in this example, 
then you're all set.  With just a little more code, you can have an 
overlapped I/O version of this transport (for the one Twisted reactor 
that doesn't support IReactorFDSet).  And then you've got proper Twisted 
ZMQ support.

If it *doesn't* offer APIs like these, then I'd say it's missing some 
pretty critical APIs.  After all, if you can't drive it this way, your 
chances of being able to write reasonable unit tests for ZMQ-based code 
are somewhat diminished (not out the window, but it'll be annoying).

And I don't understand how you would implement something like ZMQ in a 
way that *didn't* make it easy to do this.  *Particularly* since they 
have support for several different event notification APIs.  So 
hopefully the worst case is that there are no APIs like these, but it's 
a minor oversight because the authors thought no one would want them, 
but they can be added trivially because they map directly onto how the 
underlying implementation works.
>
>I know some Twisted people way smarter than me basically thought the
>connectZMQ/listenZMQ thing was a mistake, but I'm not sure to what
>extent that is because they were right and to what extent that was
>because they didn't really know very much about ZeroMQ and just went
>"it works on top of TCP so that's not where it goes". To Twisted folks
>that disagree: would you change your opinion of ZMQ was *really*
>something that's side-by-side with TCP instead of being implemented on
>top of it? Like, say, SCTP is? Does the fact that it can work on top
>of a bunch of stuff that isn't TCP change that?

If ZMQ were supported in the kernel with new syscalls to interface with 
it, then it would be nonsensical to talk about implementing it on top of 
Twisted's existing TCP support.  You simply couldn't, because all of the 
code would have been pushed into the kernel where it can't be used any 
other way.  This doesn't mean it would be a good idea overall to have 
ZMQ supported at the same level as TCP, though: it just means there 
would be no other alternative (aside from not supporting it - like what 
Twisted for SCTP).

Whether or not it makes any sense to implement ZMQ in the kernel is 
something I have no opinion on, since I don't know nearly enough about 
the particular details of ZMQ.
>
>Talking with the ZeroMQ people has been a positive experience: they
>were very accessible and cooperative, and really just want a bigger
>market for their software (who doesn't?) so I hope something useful
>comes out of this :-)

Great!  Convince them to add the necessary APIs (if they don't exist 
already) from above and everything should be set. :)

Jean-Paul



From exarkun at twistedmatrix.com  Sun Jun  6 23:16:12 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 07 Jun 2010 05:16:12 -0000
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
In-Reply-To: <20100607045414.1708.293470391.divmod.xquotient.158@localhost.localdomain>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
	<20100607045414.1708.293470391.divmod.xquotient.158@localhost.localdomain>
Message-ID: <20100607051612.1708.1347281334.divmod.xquotient.163@localhost.localdomain>

On 04:54 am, exarkun at twistedmatrix.com wrote:
>
>[snip]
>
>    from twisted.internet.interfaces import IReactorFDSet
>
>    class ZMQTransport(object):
>[snip]
>
>
>    class _ZMQFileDescriptor(object):
>[snip]
>        def sendZMQEvents(self, events):
>            # Whatever the API is.
>            self._zmqSocket.sendZMQEvents(events)
>            self._reactor.addWriter(self)

The sendZMQEvents method clearly belongs on ZMQTransport.  This 
complicates the `addWriter` call slightly - but only to the extent of 
either selecting the correct _ZMQFileDescriptor to pass, or more likely 
just looping over all of them and calling addWriter for each.  Hopefully 
the idea was clear despite this mistake.
>[snip]
>
>    def connectZMQ(reactor, addrinfo, factory):
>[snip]

Also, I meant to mention here that it doesn't really matter if this is a 
connectXYZ-style function or something using endpoints.  That's just a 
minor API question and all the other ZMQ-related stuff is the same 
whichever decision you make.

Jean-Paul



From rlotun at gmail.com  Mon Jun  7 03:49:38 2010
From: rlotun at gmail.com (Reza Lotun)
Date: Mon, 7 Jun 2010 10:49:38 +0100
Subject: [Twisted-Python] Job Opening - TweetDeck Backend Engineer - London,
	UK
Message-ID: <AANLkTilf2TECy8RXFp8jdF6PYVcPHGraUmcaF5kiQ_jF@mail.gmail.com>

TweetDeck (http://www.tweetdeck.com) is hiring for a backend software
engineer position in London, UK. We'd also be willing to consider
applicants located in New York, NY, USA, to work out of our New York
office at Betaworks (http://www.betaworks.com).

At TweetDeck we're trying to build the best tools and services to
manage real-time information streams from Twitter, Facebook,
Foursquare, and other sites. We're looking for a backend-oriented
Software Engineer who isn't afraid of investigated new technologies
and building services consumed by our clients and website at scale.
You'll also be working in a team to manage existing systems deployed
over the cloud.

You'll be:
 - Maintaining and improving existing REST API and backend services
 - Implementing core backend systems using the latest and greatest technologies
 - Working with the rest of the team to develop next generation
TweetDeck functionality
 - Working with client teams on feature rollouts

Requirements:
 - Strong Computer Science knowledge and interest in distributed systems
 - At least one previous project with a web MVC system like Django or Rails
 - Experience with Linux (Ubuntu) and some sysadmin skills (or a
strong desire to pick them up)
 - Flexibility and the desire to work with a small team of dedicated
coders in a startup environment

Pluses:
 - Python mastery
 - Knowledge of an asynchronous network framework like Twisted
 - Open source contributions, and a place to find them - e.g. a GitHub
or Bitbucket profile
 - Experience in deploying over cloud providers like AWS (EC2, SimpleDB, etc.)
 - Knowledge of distributed version control - preferably Git or Mercurial
 - Experience with Javascript & HTML/CSS to write great web apps and
internal tools
 - Knowledge of relational databases and SQL (we use those too!)
 - Some knowledge of NoSQL stores like Redis, Neo4j, MongoDB or Cassandra
 - Deep understanding of social networking services and trends

What Twisted is used for: All our backend systems are written in Python -
we use Twisted for our REST API services consumed by our desktop and mobile
clients, and Django for our web site.

Send your CV to Reza Lotun (jobs at tweetdeck.com) with the subject
"Backend Engineer".

Web: http://www.tweetdeck.com/jobs

Thanks,
Reza

-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   reza at tweetdeck.com
twitter: @rlotun



From lvh at laurensvh.be  Mon Jun  7 05:25:22 2010
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Mon, 7 Jun 2010 13:25:22 +0200
Subject: [Twisted-Python] Job Opening - TweetDeck Backend Engineer -
	London, UK
In-Reply-To: <AANLkTilf2TECy8RXFp8jdF6PYVcPHGraUmcaF5kiQ_jF@mail.gmail.com>
References: <AANLkTilf2TECy8RXFp8jdF6PYVcPHGraUmcaF5kiQ_jF@mail.gmail.com>
Message-ID: <AANLkTilwKngtdTYvQfUeaUG8WuV6QUZ3DSHLa1oG_zlx@mail.gmail.com>

Hey!


On a somewhat related note: are you people already using Twisted? Have
your experiences been positive? We're always looking for Success
Stories (http://twistedmatrix.com/trac/wiki/SuccessStories) :-)

thanks in advance
Laurens



From rlotun at gmail.com  Mon Jun  7 05:30:13 2010
From: rlotun at gmail.com (Reza Lotun)
Date: Mon, 7 Jun 2010 12:30:13 +0100
Subject: [Twisted-Python] Job Opening - TweetDeck Backend Engineer -
	London, UK
In-Reply-To: <AANLkTilwKngtdTYvQfUeaUG8WuV6QUZ3DSHLa1oG_zlx@mail.gmail.com>
References: <AANLkTilf2TECy8RXFp8jdF6PYVcPHGraUmcaF5kiQ_jF@mail.gmail.com>
	<AANLkTilwKngtdTYvQfUeaUG8WuV6QUZ3DSHLa1oG_zlx@mail.gmail.com>
Message-ID: <AANLkTinss9gPgv2iPNx-9gtIBNRGlF-2C3yy-lyQTNi5@mail.gmail.com>

On Mon, Jun 7, 2010 at 12:25 PM, Laurens Van Houtven <lvh at laurensvh.be> wrote:
> Hey!
>
>
> On a somewhat related note: are you people already using Twisted? Have
> your experiences been positive? We're always looking for Success
> Stories (http://twistedmatrix.com/trac/wiki/SuccessStories) :-)

Hi Laurens,

You'll notice we're already listed on the Sucess Stories page ;-)

Reza


-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   reza at tweetdeck.com
twitter: @rlotun



From itamar at itamarst.org  Mon Jun  7 06:27:28 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 07 Jun 2010 08:27:28 -0400
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
In-Reply-To: <1275880040.1679.6.camel@blake>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
	<AANLkTimsWDD-iyjWX6eNUWRZYO8Nzb25A__AytfTUpcs@mail.gmail.com>
	<AANLkTilHWiUkIsSAzarmkl4xZHhoZHmbCrkX-HYFuO5j@mail.gmail.com>
	<AANLkTil8Lv9yqGS1GuKoxDdMmVtxxCH59FOvl_wJ6wXC@mail.gmail.com>
	<1275880040.1679.6.camel@blake>
Message-ID: <1275913648.1565.0.camel@blake>

On Sun, 2010-06-06 at 23:07 -0400, Itamar Turner-Trauring wrote:

> So, sounds like you want to define:
> A) A way to hook up ZeroMQ event loop with Twisted event loop so that
> both ZeroMQ and Twisted code can co-exist in same thread.

JP's proposal is superior to this... but may require changes to ZeroMQ.




From konrads at smelkovs.com  Mon Jun  7 06:50:05 2010
From: konrads at smelkovs.com (Konrads Smelkovs)
Date: Mon, 7 Jun 2010 15:50:05 +0300
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
In-Reply-To: <1275913648.1565.0.camel@blake>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com> 
	<AANLkTimsWDD-iyjWX6eNUWRZYO8Nzb25A__AytfTUpcs@mail.gmail.com> 
	<AANLkTilHWiUkIsSAzarmkl4xZHhoZHmbCrkX-HYFuO5j@mail.gmail.com> 
	<AANLkTil8Lv9yqGS1GuKoxDdMmVtxxCH59FOvl_wJ6wXC@mail.gmail.com> 
	<1275880040.1679.6.camel@blake> <1275913648.1565.0.camel@blake>
Message-ID: <AANLkTikfGXEAd1E4W99N0r08mkJECqEziQXIVLLbrBtk@mail.gmail.com>

Indeed, from technical perspective I think this is the only sane way
forward.
--
Konrads Smelkovs
Applied IT sorcery.


On Mon, Jun 7, 2010 at 3:27 PM, Itamar Turner-Trauring
<itamar at itamarst.org>wrote:

> On Sun, 2010-06-06 at 23:07 -0400, Itamar Turner-Trauring wrote:
>
> > So, sounds like you want to define:
> > A) A way to hook up ZeroMQ event loop with Twisted event loop so that
> > both ZeroMQ and Twisted code can co-exist in same thread.
>
> JP's proposal is superior to this... but may require changes to ZeroMQ.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100607/fdc77cbd/attachment-0001.html>

From glyph at twistedmatrix.com  Mon Jun  7 11:38:12 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 7 Jun 2010 13:38:12 -0400
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
In-Reply-To: <AANLkTimsWDD-iyjWX6eNUWRZYO8Nzb25A__AytfTUpcs@mail.gmail.com>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
	<AANLkTimsWDD-iyjWX6eNUWRZYO8Nzb25A__AytfTUpcs@mail.gmail.com>
Message-ID: <4AB753E9-4D69-431A-8044-12EBF16A35E3@twistedmatrix.com>

On Jun 6, 2010, at 4:18 PM, Christopher Armstrong wrote:

> We don't want to have any more transport-specific methods on the
> reactor, and this has nothing to do with ZMQ. We also don't want to
> have connectSOCKS, or listenSerialPort. Fortunately, the endpoints
> API[1] was very recently merged to Twisted trunk, so any new
> transport-specific connectors/listeners can be implemented in terms of
> its interfaces. listenTCP and so forth should eventually be deprecated
> in preference to the endpoints APIs.

While the endpoints APIs are great and everyone should use them, I think it's putting it a bit strongly to say that listenTCP and friends will be deprecated.  Reactors are still pluggable, and we'll need a mechanism for endpoints and reactors to communicate.  There may be some evolution of those APIs in the long term (in particular, the way that connectTCP interacts with client factories is slightly weird) but I think that there will always be something lower-level than endpoints that is still a public, supported API.

You just won't be encouraged to use that API at the *application* layer, because endpoints are more flexible.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100607/f38cccf1/attachment.html>

From lvh at laurensvh.be  Mon Jun  7 12:16:18 2010
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Mon, 7 Jun 2010 20:16:18 +0200
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
In-Reply-To: <4AB753E9-4D69-431A-8044-12EBF16A35E3@twistedmatrix.com>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
	<AANLkTimsWDD-iyjWX6eNUWRZYO8Nzb25A__AytfTUpcs@mail.gmail.com>
	<4AB753E9-4D69-431A-8044-12EBF16A35E3@twistedmatrix.com>
Message-ID: <AANLkTikYNvSIeI2yD8rwTGn2R1jX4AdY51RHlYqtqWPr@mail.gmail.com>

With regards to the shortcomings of select: there's also a poll-like,
but I have no idea if that improves matters :)

Anyway, I'll tell the ZMQ folks that people are blocking on their
fancy new API that helps with integrating with other event loops.
Thankfully, they were already aware of this technical issue and the
blueprints are there :)

lvh



From radix at twistedmatrix.com  Mon Jun  7 16:07:00 2010
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 7 Jun 2010 17:07:00 -0500
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
In-Reply-To: <4AB753E9-4D69-431A-8044-12EBF16A35E3@twistedmatrix.com>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
	<AANLkTimsWDD-iyjWX6eNUWRZYO8Nzb25A__AytfTUpcs@mail.gmail.com>
	<4AB753E9-4D69-431A-8044-12EBF16A35E3@twistedmatrix.com>
Message-ID: <AANLkTimC0gFLMd2BdujA8blDahx_9chcL3s48FLHpPSL@mail.gmail.com>

On Mon, Jun 7, 2010 at 12:38 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> While the endpoints APIs are great and everyone should use them, I think
> it's putting it a bit strongly to say that listenTCP and friends will be
> deprecated.  Reactors are still pluggable, and we'll need a mechanism for
> endpoints and reactors to communicate.  There may be some evolution of those
> APIs in the long term (in particular, the way that connectTCP interacts with
> client factories is slightly weird) but I think that there will always be
> something lower-level than endpoints that is still a public, supported API.
> You just won't be encouraged to use that API at the *application* layer,
> because endpoints are more flexible.

But will that "lower-level than endpoints" API need to be TCP-specific?

We don't have a listenSerialPort, so why do we need listenTCP (by the
way, we should totally have a SerialPortEndpoint)? I understand your
point that some reactors provide addReader while others provide
addOverlappedIOObject (or whatever the heck it's called), but an
Endpoints implementation can DTRT based on the interfaces that the
supplied reactor provides, so I don't see why TCPServerEndpoint can't
just instantiate a port and call addReader/addWriter or the
IOCPreactor equivalent. And maybe we need a better way to deal with
the differences between those reactors, but I don't see why that
requires us to have public transport-specific methods on the reactor.

However, of course I'm not advocating we jump the gun on deprecating
listenTCP and so forth. We shouldn't deprecate them now, and when we
do, we should make it an *extremely* long period of PendingDeprecation
followed by Deprecation.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/



From glyph at twistedmatrix.com  Mon Jun  7 23:40:21 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 8 Jun 2010 01:40:21 -0400
Subject: [Twisted-Python] Endpoints & Reactors (was Re: Integrating Twisted
	with ZeroMQ)
In-Reply-To: <AANLkTimC0gFLMd2BdujA8blDahx_9chcL3s48FLHpPSL@mail.gmail.com>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
	<AANLkTimsWDD-iyjWX6eNUWRZYO8Nzb25A__AytfTUpcs@mail.gmail.com>
	<4AB753E9-4D69-431A-8044-12EBF16A35E3@twistedmatrix.com>
	<AANLkTimC0gFLMd2BdujA8blDahx_9chcL3s48FLHpPSL@mail.gmail.com>
Message-ID: <8BFFFDD7-0CD3-444A-8302-2BD151C9F1EA@twistedmatrix.com>


On Jun 7, 2010, at 6:07 PM, Christopher Armstrong wrote:

> But will that "lower-level than endpoints" API need to be TCP-specific?
> 
> We don't have a listenSerialPort, so why do we need listenTCP (by the way, we should totally have a SerialPortEndpoint)?

We totally *should* have a SerialPortEndpoint, but I definitely prefer the way that calling 'reactor.listenTCP(...)' implicitly selects a back-end to the platform-detection junk at the bottom of twisted.internet.serialport.  The wonky platform-detection has some practical implications, as shown here: <http://twistedmatrix.com/trac/ticket/3802>.  I would actually prefer a nice 'AttributeError: SelectReactor has no attribute "listenSerialPort"' to the mess that it currently produces.

> I understand your point that some reactors provide addReader while others provide addOverlappedIOObject (or whatever the heck it's called), but an Endpoints implementation can DTRT based on the interfaces that the supplied reactor provides, so I don't see why TCPServerEndpoint can't just instantiate a port and call addReader/addWriter or the IOCPreactor equivalent.

> And maybe we need a better way to deal with the differences between those reactors, but I don't see why that requires us to have public transport-specific methods on the reactor.

Well, we need to deal with the differences *somehow*.  Currently, we just have a listenTCP on the reactor.  This makes the implementation of endpoints dead simple, and it doesn't really vary at all per-platform.  It seems to work okay; the main drawback, as far as I can tell, is that it deepens the inheritance hierarchy of the reactors a bit, because we use inheritance to grab the many similar method implementations that many similar reactors share.

In the current model, we can add new types of socket-ish things - the ones that I can think of which may one day actually matter are Java SelectableChannel objects and maybe System.Net.Socket.Select if we ever support Jython and IronPython, respectively - by adding new reactors, and these things need new reactors anyway in order to invoke the multiplexors that understand these objects.  So that sorta makes sense to me.  You call listenTCP on something somewhat opaque, and the opaque thing knows how to give you back an appropriate IListeningPort, ITransport, etc.  With the reactor plugin API, we can even add these new types of things outside of Twisted, pretty straightforwardly.

This dispatch point *could* be handled internally in each endpoint implementation, and that does seem hypothetically more elegant to me, since it's the endpoint that should care about the TCP-ness and the reactor that should care about the file-descriptor-ness, abstractly.  But at some point, the rubber must meet the road, and IReactorFDSet needs to be mapped to twisted.internet.tcp.Port, and twisted.internet.tcp.Connector, or similar, and IReactorIOCPMumbleMumble (btw, this interface should exist) to twisted.internet.iocpreactor.tcp.Port, etc.

If I want to do that mapping under the current system, I just implement my own reactor plugin and implement listenTCP to do the right thing.  Under a new system where the endpoint was responsible for handling that mapping, can I add a reactor plugin that has a meaningfully different idea of what a multiplexable I/O resource is?  I have some vague ideas... something sort of shaped like an adapter registry, maybe?  A different plugin API, for things to talk specifically to the TCP endpoint code?  I can brainstorm up some vague ideas but none of them really sit right, and certainly none of them are as straightforward as just implementing a bunch of methods specified by interfaces.

Now, I'm pretty sure you know how I feel about this, Chris, but just so nobody else takes away the wrong conclusion from this: I'm not saying that the current internal reactor factoring is perfect, or even particularly good.  That code needs a lot of cleanup, a lot of documentation, and in many places a general sorting-out of what really constitutes the intended public API.  It's far too hard to implement an external reactor, because you can't sensibly inherit any of that code which all reactors practically need to inherit.  It's mostly undocumented and it has even changed incompatibly a few times.   For example, <http://twistedmatrix.com/trac/changeset/24132> incompatibly changed the signature of 'tcp.Port.__init__'.  However, it seems like a more straightforward job to me to figure out a reasonable signature for tcp.Port.__init__, and to do some general de-duplication of code between the IOCP modules and the UNIX-file-descriptor modules, than to come up with a whole new way to correlate endpoint implementations to their respective concrete transport implementations.

This quality problem in the core multiplexing code is actually one of the reasons I want to vocally defend the current architecture.  Until we have a defined path forward, with a clear design that's better in a way that has some positive, practical ramifications, I don't want to put anyone off doing this necessary maintenance work in twisted.internet.  There's not a huge amount of maintenance going on in that area already, but if we adopt the attitude of "Oh, let's forget about that, it's going to get deprecated anyway", I have a feeling the amount of work will drop to zero.

> However, of course I'm not advocating we jump the gun on deprecating listenTCP and so forth. We shouldn't deprecate them now, and when we do, we should make it an *extremely* long period of PendingDeprecation followed by Deprecation.

Well, Python 2.7 isn't going to display DeprecationWarning by default anyway, so I think PendingDeprecation may be pointless.  But I definitely echo the sentiment, regardless.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100608/ab104fb4/attachment.html>

From glyph at twistedmatrix.com  Mon Jun  7 23:49:36 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 8 Jun 2010 01:49:36 -0400
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
In-Reply-To: <AANLkTimsWDD-iyjWX6eNUWRZYO8Nzb25A__AytfTUpcs@mail.gmail.com>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
	<AANLkTimsWDD-iyjWX6eNUWRZYO8Nzb25A__AytfTUpcs@mail.gmail.com>
Message-ID: <B618C358-5A7B-4BB6-ABBF-D722F44A9689@twistedmatrix.com>


On Jun 6, 2010, at 4:18 PM, Christopher Armstrong wrote:

> ... We also don't want to have connectSOCKS ...

Since I basically said that we *did* possibly want listenSerialPort as an alternative to the half-working platform-detection stuff that twisted.internet.serialport does, I do want to draw a distinction here.  Although we might want to have a SOCKS enpdoint, 'connectSOCKS' is something that there is _no_ reason I can see for any reactor to have in the future.  SOCKS is a protocol that is implemented on top of TCP.  If you want a SOCKS endpoint, it doesn't need extra support from the reactor; it can be formulated entirely in terms of TCP endpoints.  Even if you're doing something weird like wrapping a C SOCKS library, that library would almost certainly have platform limitations, and provide you with an object that exposed a file descriptor anyway, so you could use IReactorFDset.

(But, practically speaking, you probably just want to use something like 'socksify' anyway, for outgoing connections.)

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100608/cba75272/attachment.html>

From glyph at twistedmatrix.com  Mon Jun  7 23:59:15 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 8 Jun 2010 01:59:15 -0400
Subject: [Twisted-Python] Job Opening - TweetDeck Backend Engineer -
	London, UK
In-Reply-To: <AANLkTinss9gPgv2iPNx-9gtIBNRGlF-2C3yy-lyQTNi5@mail.gmail.com>
References: <AANLkTilf2TECy8RXFp8jdF6PYVcPHGraUmcaF5kiQ_jF@mail.gmail.com>
	<AANLkTilwKngtdTYvQfUeaUG8WuV6QUZ3DSHLa1oG_zlx@mail.gmail.com>
	<AANLkTinss9gPgv2iPNx-9gtIBNRGlF-2C3yy-lyQTNi5@mail.gmail.com>
Message-ID: <781A06F6-F294-4A1A-9747-BD9F088B189B@twistedmatrix.com>


On Jun 7, 2010, at 7:30 AM, Reza Lotun wrote:

> Hi Laurens,
> 
> You'll notice we're already listed on the Sucess Stories page ;-)
> 
> Reza

Reza showed up with a success story before it was cool!  He's got good Twisted indie cred.  ;-)


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100608/63a84a71/attachment.html>

From glyph at twistedmatrix.com  Tue Jun  8 01:19:53 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 8 Jun 2010 03:19:53 -0400
Subject: [Twisted-Python] Integrating Twisted with ZeroMQ
In-Reply-To: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
References: <AANLkTil3NsZFp4fKBbspDTN7yPpPTF_jyVwZbo1-W2__@mail.gmail.com>
Message-ID: <4918A429-3AEC-4358-BFB0-66A3719A8D79@twistedmatrix.com>

So, I agree pretty much completely with everything exarkun said, but I do feel like I should add a bit more here about the high-level questions raised here:

On Jun 6, 2010, at 3:59 PM, Laurens Van Houtven wrote:

> A potential option for Twisted, which some people don't quite like, would be to have a listenZMQ and connectZMQ, analogous to listenTCP/listenUDP/listenSSL and the respective connect*s.

So, listenTCP/listenUDP are very different from listenSSL.  JP already made an oblique reference to this when talking about ZMQ possibly being implemented in the kernel.

listenTCP and listenUDP are different kernel-level things.  Not only are they implemented differently, they have different semantics and interact with different interfaces.  UDP is datagram-oriented, TCP is stream-oriented.

listenSSL, on the other hand, is a stream transport, implemented in userspace, by a C library.  It can be (and actually is, in twisted.protocols.tls) implemented as a regular TCP IProtocol along with providing its own stream-oriented ITransport.  There are a couple of reasons that listenSSL and startTLS are implemented as reactor and transport methods, and none of them have to do with the intrinsic specialness of TLS itself:

At the time we wrote them, the APIs to implement twisted.protocols.tls simply weren't available.  So, we used the mechanisms available to us to interface with the available library at the time, and that meant having a reactor method.

The reason that the code remains now that we have a protocol implementation is that the C code in OpenSSL is faster at getting bytes out of a socket than Twisted; it can do less memory copying while parsing the protocol, and efficiency is really important in TLS; you can visibly notice it when a little extra memory copying starts happening at that layer.  Nevertheless, when we encounter a situation which that library doesn't support, such as in the IOCP reactor, we need an implementation that can work with Twisted's native I/O APIs; this becomes a tradeoff between a scalable multiplexor and a slightly faster recv() code-path.  As far as I'm aware, nobody's done any particular benchmarks on that one, but I would guess that you win a little and you lose a little and it tends to balance out.  Still, when it's possible to gain a little efficiency by doing so, it does make some sense for it to be its own transport API.  This may also apply to ZMQ, since they appear to be obsessed with performance.  (Although that does beg the question why they seem to recommend a 'select'-style API, when as JP notes, that form of API is not great for performance.)

> I think this makes more sense to the ZeroMQ people (who think of ZeroMQ as a layer "next to" TCP which happens to be implemented on top of TCP, on top of which you build your stuff)

I still hold that the ZMQ people are somewhat confused, and I believe that this very basic breakdown in their spatial reasoning is a good indication of how ;-).  If you inhabit the same physical reality that I do, you may have noticed that one object cannot, in fact, be both "next to" and "on top of" something else.  These are distinct coordinates.

> than the Twisted people (who think of ZeroMQ's protocol as yet another TCP-using protocol just like HTTP for example). Having worked with both pieces of software, the more I play with ZeroMQ the more I think listenZMQ/connectZMQ make sense. ZeroMQ really tries to be one of those things and it shows. What ZeroMQ wants to do is semantically much closer to the existing connects and listens. I'm not just making this up: the ZeroMQ people have reviewed this and this is really what ZeroMQ wants to be.

More seriously, I don't think you should care what ZeroMQ "wants to be".  The question isn't one of existential confusion, it's a practical question of what exactly the library *does*, and what a sensible way to integrate that with Twisted is.

To avoid confusion about endpoints vs. reactor methods, I think it's safe to say that you have three implementation options: let's call them "ZMQProtocol", "ZMQTransport", and "ZMQReactor".

The thing that you appear to be talking down over and over again, implementing ZeroMQ as a 'regular TCP' IProtocol provider, does not sound like a viable option.  The advantage of this option is that it would allow you to transport ZMQ messages over completely arbitrary Twisted ITransport providers and IReactorTCP providers.  However, you've never talked about wanting to do that.  The disadvantages are that it doesn't sound like it makes sense to you, none of the APIs are exposed, and it generally goes against the grain of the library.  So let's forget about that.  (Again, it doesn't matter if ZMQ "really is" a layer "next to" or "on top of" TCP or whatever: if the library makes this difficult or impossible, then it doesn't matter where its true soul lies.)

JP's option, ZMQTransport, suggests that you should implement it as an IReadDescriptor/IWriteDescriptor. That works if the ZeroMQ library will expose the file descriptors it's using to you.  The advantage of this option is that it will work with an arbitrary IReactorFDSet implementation, which basically all of the reactors which can run on a UNIX-like OS are.  Also, as JP has described, it's probably not too much code.  You can use it with GUI integration, even GUI integration on Windows, and it should work fine.  The disadvantages of this option are that apparently ZMQ is going to need to change, because it doesn't want to expose its file descriptors to Python, and it may be complicated to juggle them, depending on when it opens and closes sockets in response to the inner workings of the library.  For example, can one "send a ZMQ event" open 3 UDP sockets and a TCP socket, do a bunch of stuff with them, and shut some of them down?  Do multiple logical transports, ahem, I mean, "Sockets" (good job naming that, ZMQ guys) ever share their underlying TCP sockets, and thereby require independent management?  I don't know, but I can imagine that it might, and that could be a pain to expose sensibly.

The third option, which you've discussed, is implementing a reactor in terms of pyzmq's existing multiplexing mechanisms.  One advantage of this approach is that it will support ZMQ the most naturally; you can just call the relevant APIs. One advantage which it *may* have - I'm not quite sure - is performance.  It may be possible for the ZMQ library to do a bunch of work inside zmq.select() without talking to Twisted's abstractions at all.  And while Twisted can be pretty fast, especially for Python, I have never even *heard* of anyone trying to run it over InfiniBand, and if they did, I would not expect 8 million messages per second on any hardware I can think of; the mainloop has too much overhead.  Based on some back-of-the-envelope (and probably highly inaccurate) math, Python *bytecode execution* is too much overhead to get that level of performance; I'm kind of skeptical that they even get it in C without benchmark hax of some kind; but nevertheless, they advertise this performance on their home page and they obviously care about it quite a lot.  It's not going to speed up your Twisted code at all, of course, and I have no idea if ZMQ messaging dominates your workload, so it may be a negligible gain.  The disadvantages of this approach, as several people have already pointed out, are that it won't work with GUI integration, or any custom third-party reactors, or... well, pretty much any features except the ones you explicitly build in yourself.  Also, if you want to properly stick to public APIs and build this as an extension to Twisted, you may find yourself rewriting some of the code in twisted.internet, or inheriting some public-but-ugh-we-wish-it-weren't classes.  This option may be somewhat labor intensive on the Twisted side of things, although as you note, it will probably be pretty easy with ZMQ.  It shouldn't be *too* hard though, and if you're willing to resort to heinous unsupported hacks, you could do something like subclass PollReactor and just replace '_poller' with a poller from zmq.poll, which is at least advertised to be compatible (although I suspect that the reality may fall short slightly, as it often does).

Based on this analysis, which is far more thorough than I really wanted to do :(, it sounds to me like ZMQTransport and ZMQReactor are both somewhat feasible, and have overlapping advantages and disadvantages which may make each of them an attractive option in different circumstances.  There are probably situations where even ZMQProtocol would make sense.

However!

In BOTH of these options, you're going to need to define, implicitly or explicitly, IZMQTransport and IZMQProtocol interfaces, stipulating the interaction between the transport layer of your ZMQ API and the protocol layer which applications implement.  Maybe pyzmq already outlines this for you, maybe not; but the point is, you should really be focusing on defining *that* interface in a way that makes sense.  The rest of this stuff is all implementation details.

If you define those interfaces well, then whatever integration option you start with, you should be able to change the internal implementation, or perhaps even use multiple implementations.  For example, you may discover that the performance thing is actually significant, and want to use ZMQReactor on your back-end servers, but eventually write some client-side GUI tools which also want to use ZMQ but aren't quite as performance-sensitive.

I personally have little interest in ZMQ itself, but I think this general pattern stands for any large, existing C protocol library that someone might want to integrate with Twisted.  In most cases the 'reactor' option probably isn't there, but 'is it a protocol or is it a transport' would be a FAQ, if there were more in the way of large, useful C libraries that did async networking stuff :).

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100608/08aeb82e/attachment.html>

From landreville at deadtreepages.com  Tue Jun  8 08:46:34 2010
From: landreville at deadtreepages.com (Landreville)
Date: Tue, 8 Jun 2010 10:46:34 -0400
Subject: [Twisted-Python] Setting a different logger for Twistd
Message-ID: <AANLkTinWClwF5_X3CVkT4fuHZ28xjhTmOml3c-pTMr2-@mail.gmail.com>

Hello,
I saw a few tickets and some mailing list messages similar to this
question, but never saw a definitive answer.

How do I go about using a different logger when I am using twistd?

I have a file that defines the application object and I tried the
following code in hopes that I could make the logger have max rotated
logs set to a smaller number:

logfile = LogFile(LOG_FILE, LOG_DIRECTORY, LOG_SIZE, maxRotatedFiles=MAX_LOGS)
application.setComponent(ILogObserver, FileLogObserver(logfile))

but I get an assertion error coming up:
Traceback (most recent call last):
  File "/usr/bin/twistd", line 21, in <module>
    run()
  File "/Library/Python/2.6/site-packages/Twisted-9.0.0-py2.6-macosx-10.6-universal.egg/twisted/scripts/twistd.py",
line 27, in run
    app.run(runApp, ServerOptions)
  File "/Library/Python/2.6/site-packages/Twisted-9.0.0-py2.6-macosx-10.6-universal.egg/twisted/application/app.py",
line 693, in run
    runApp(config)
  File "/Library/Python/2.6/site-packages/Twisted-9.0.0-py2.6-macosx-10.6-universal.egg/twisted/scripts/twistd.py",
line 23, in runApp
    _SomeApplicationRunner(config).run()
  File "/Library/Python/2.6/site-packages/Twisted-9.0.0-py2.6-macosx-10.6-universal.egg/twisted/application/app.py",
line 421, in run
    self.logger.start(self.application)
  File "/Library/Python/2.6/site-packages/Twisted-9.0.0-py2.6-macosx-10.6-universal.egg/twisted/application/app.py",
line 249, in start
    log.startLoggingWithObserver(self._observer)
  File "/Library/Python/2.6/site-packages/Twisted-9.0.0-py2.6-macosx-10.6-universal.egg/twisted/python/log.py",
line 592, in startLoggingWithObserver
    addObserver(observer)
  File "/Library/Python/2.6/site-packages/Twisted-9.0.0-py2.6-macosx-10.6-universal.egg/twisted/python/log.py",
line 253, in addObserver
    assert callable(other)
AssertionError



From landreville at deadtreepages.com  Tue Jun  8 09:06:56 2010
From: landreville at deadtreepages.com (Landreville)
Date: Tue, 8 Jun 2010 11:06:56 -0400
Subject: [Twisted-Python] Setting a different logger for Twistd
In-Reply-To: <AANLkTinWClwF5_X3CVkT4fuHZ28xjhTmOml3c-pTMr2-@mail.gmail.com>
References: <AANLkTinWClwF5_X3CVkT4fuHZ28xjhTmOml3c-pTMr2-@mail.gmail.com>
Message-ID: <AANLkTilGiB5NolRkqY7dmeAGeiU3JolmixRmIXJYquiJ@mail.gmail.com>

On Tue, Jun 8, 2010 at 10:46 AM, Landreville
<landreville at deadtreepages.com> wrote:
> Hello,
> I saw a few tickets and some mailing list messages similar to this
> question, but never saw a definitive answer.
>
> How do I go about using a different logger when I am using twistd?
>
> I have a file that defines the application object and I tried the
> following code in hopes that I could make the logger have max rotated
> logs set to a smaller number:
>
> logfile = LogFile(LOG_FILE, LOG_DIRECTORY, LOG_SIZE, maxRotatedFiles=MAX_LOGS)
> application.setComponent(ILogObserver, FileLogObserver(logfile))
>
> but I get an assertion error coming up:
> Traceback (most recent call last):
>  File "/usr/bin/twistd", line 21, in <module>
>    run()
>  File "/Library/Python/2.6/site-packages/Twisted-9.0.0-py2.6-macosx-10.6-universal.egg/twisted/scripts/twistd.py",
> line 27, in run
>    app.run(runApp, ServerOptions)
>  File "/Library/Python/2.6/site-packages/Twisted-9.0.0-py2.6-macosx-10.6-universal.egg/twisted/application/app.py",
> line 693, in run
>    runApp(config)
>  File "/Library/Python/2.6/site-packages/Twisted-9.0.0-py2.6-macosx-10.6-universal.egg/twisted/scripts/twistd.py",
> line 23, in runApp
>    _SomeApplicationRunner(config).run()
>  File "/Library/Python/2.6/site-packages/Twisted-9.0.0-py2.6-macosx-10.6-universal.egg/twisted/application/app.py",
> line 421, in run
>    self.logger.start(self.application)
>  File "/Library/Python/2.6/site-packages/Twisted-9.0.0-py2.6-macosx-10.6-universal.egg/twisted/application/app.py",
> line 249, in start
>    log.startLoggingWithObserver(self._observer)
>  File "/Library/Python/2.6/site-packages/Twisted-9.0.0-py2.6-macosx-10.6-universal.egg/twisted/python/log.py",
> line 592, in startLoggingWithObserver
>    addObserver(observer)
>  File "/Library/Python/2.6/site-packages/Twisted-9.0.0-py2.6-macosx-10.6-universal.egg/twisted/python/log.py",
> line 253, in addObserver
>    assert callable(other)
> AssertionError
>

ahh.. I missed the .emit in the docs. It should have been:
logfile = LogFile(LOG_FILE, LOG_DIRECTORY, LOG_SIZE, maxRotatedFiles=MAX_LOGS)
logfunc = FileLogObserver(logfile).emit
application.setComponent(ILogObserver, logfunc)



From exarkun at twistedmatrix.com  Tue Jun  8 09:10:10 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 08 Jun 2010 15:10:10 -0000
Subject: [Twisted-Python] Setting a different logger for Twistd
In-Reply-To: <AANLkTinWClwF5_X3CVkT4fuHZ28xjhTmOml3c-pTMr2-@mail.gmail.com>
References: <AANLkTinWClwF5_X3CVkT4fuHZ28xjhTmOml3c-pTMr2-@mail.gmail.com>
Message-ID: <20100608151010.1815.237841622.divmod.xquotient.12@localhost.localdomain>

On 02:46 pm, landreville at deadtreepages.com wrote:
>Hello,
>I saw a few tickets and some mailing list messages similar to this
>question, but never saw a definitive answer.
>
>How do I go about using a different logger when I am using twistd?
>
>I have a file that defines the application object and I tried the
>following code in hopes that I could make the logger have max rotated
>logs set to a smaller number:
>
>logfile =�LogFile(LOG_FILE, LOG_DIRECTORY, LOG_SIZE, 
>maxRotatedFiles=MAX_LOGS)
>application.setComponent(ILogObserver, FileLogObserver(logfile))

The log observer is just a callable that takes a log event.  So, you're 
close.  You just want to pass the `emit` method of that FileLogObserver 
observer instance, instead of the instance itself:

  application.setComponent(ILogObserver, FileLogObserver(logfile).emit)

Jean-Paul



From msoulier at digitaltorque.ca  Tue Jun  8 10:36:27 2010
From: msoulier at digitaltorque.ca (Michael P. Soulier)
Date: Tue, 8 Jun 2010 12:36:27 -0400
Subject: [Twisted-Python] handling SIGCHLD
Message-ID: <20100608163625.GD3402@digitaltorque.ca>

Hi,

I have a twisted service that needs to fork child processes to do tasks, after
which they will exit. I wrote a signal handler for SIGCHLD but it didn't seem
to be called. I read something about twisted installing its own signal
handlers that may conflict. Is this true?

How would you recommend handling a SIGCHLD in twisted?

Many thanks,
Mike
-- 
Michael P. Soulier <msoulier at digitaltorque.ca>
"Any intelligent fool can make things bigger and more complex... It takes a
touch of genius - and a lot of courage to move in the opposite direction."
--Albert Einstein
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
URL: </pipermail/twisted-python/attachments/20100608/66d5955b/attachment.sig>

From itamar at itamarst.org  Tue Jun  8 11:12:04 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 8 Jun 2010 13:12:04 -0400 (EDT)
Subject: [Twisted-Python] handling SIGCHLD
In-Reply-To: <20100608163625.GD3402@digitaltorque.ca>
References: <20100608163625.GD3402@digitaltorque.ca>
Message-ID: <54392.63.107.91.99.1276017124.squirrel@webmail.zoteca.com>

> Hi,
>
> I have a twisted service that needs to fork child processes to do tasks,
> after
> which they will exit. I wrote a signal handler for SIGCHLD but it didn't
> seem
> to be called. I read something about twisted installing its own signal
> handlers that may conflict. Is this true?
>
> How would you recommend handling a SIGCHLD in twisted?

You should probably just use reactor.spawnProcess to fork processes: it
implements the process handling for you, and has its own SIGCHLD handler
that does the right thing, so you don't have to maintain your own.

-Itamar




From msoulier at digitaltorque.ca  Tue Jun  8 11:16:30 2010
From: msoulier at digitaltorque.ca (Michael P. Soulier)
Date: Tue, 8 Jun 2010 13:16:30 -0400
Subject: [Twisted-Python] handling SIGCHLD
In-Reply-To: <54392.63.107.91.99.1276017124.squirrel@webmail.zoteca.com>
References: <20100608163625.GD3402@digitaltorque.ca>
	<54392.63.107.91.99.1276017124.squirrel@webmail.zoteca.com>
Message-ID: <20100608171626.GA3729@digitaltorque.ca>

On 08/06/10 Itamar Turner-Trauring said:

> You should probably just use reactor.spawnProcess to fork processes: it
> implements the process handling for you, and has its own SIGCHLD handler
> that does the right thing, so you don't have to maintain your own.

The problem is that I'm using the multiprocessing module right now. 

Mike
-- 
Michael P. Soulier <msoulier at digitaltorque.ca>
"Any intelligent fool can make things bigger and more complex... It takes a
touch of genius - and a lot of courage to move in the opposite direction."
--Albert Einstein
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 197 bytes
Desc: Digital signature
URL: </pipermail/twisted-python/attachments/20100608/1000ca8d/attachment.sig>

From jrennie at gmail.com  Tue Jun  8 11:25:41 2010
From: jrennie at gmail.com (Jason Rennie)
Date: Tue, 8 Jun 2010 13:25:41 -0400
Subject: [Twisted-Python] handling SIGCHLD
In-Reply-To: <20100608163625.GD3402@digitaltorque.ca>
References: <20100608163625.GD3402@digitaltorque.ca>
Message-ID: <AANLkTikvEPxBeCX3n6L0fsKh0eSDpr92pMyfcmTZdNwz@mail.gmail.com>

Two options:

   1. (as Itamar notes) use spawnProcess for all your process spawning needs
   2. reactor.run(installSignalHandlers = False) and do your own signal
   handling

For option #2, you'll almost certainly want to install SIGTERM and SIGINT
handlers which call reactor.stop().

Jason

On Tue, Jun 8, 2010 at 12:36 PM, Michael P. Soulier <
msoulier at digitaltorque.ca> wrote:

> Hi,
>
> I have a twisted service that needs to fork child processes to do tasks,
> after
> which they will exit. I wrote a signal handler for SIGCHLD but it didn't
> seem
> to be called. I read something about twisted installing its own signal
> handlers that may conflict. Is this true?
>
> How would you recommend handling a SIGCHLD in twisted?
>
> Many thanks,
> Mike
> --
> Michael P. Soulier <msoulier at digitaltorque.ca>
> "Any intelligent fool can make things bigger and more complex... It takes a
> touch of genius - and a lot of courage to move in the opposite direction."
> --Albert Einstein
>
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.9 (GNU/Linux)
>
> iEYEARECAAYFAkwOcYkACgkQKGqCc1vIvggbUACfY8xqgU2LLOrs0cfR7HngUqmc
> LOQAoKkur5+DK8lcZ+q6qWDtjqIpX3Ov
> =XM/4
> -----END PGP SIGNATURE-----
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Jason Rennie
Research Scientist, ITA Software
617-714-2645
http://www.itasoftware.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100608/6571d220/attachment.html>

From exarkun at twistedmatrix.com  Tue Jun  8 11:48:55 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 08 Jun 2010 17:48:55 -0000
Subject: [Twisted-Python] handling SIGCHLD
In-Reply-To: <20100608171626.GA3729@digitaltorque.ca>
References: <20100608163625.GD3402@digitaltorque.ca>
	<54392.63.107.91.99.1276017124.squirrel@webmail.zoteca.com>
	<20100608171626.GA3729@digitaltorque.ca>
Message-ID: <20100608174855.1815.841783729.divmod.xquotient.17@localhost.localdomain>

On 05:16 pm, msoulier at digitaltorque.ca wrote:
>On 08/06/10 Itamar Turner-Trauring said:
>>You should probably just use reactor.spawnProcess to fork processes: 
>>it
>>implements the process handling for you, and has its own SIGCHLD 
>>handler
>>that does the right thing, so you don't have to maintain your own.
>
>The problem is that I'm using the multiprocessing module right now.

Aside from switching from multiprocessing to spawnProcess (or Ampoule), 
you might want to take a look at

    http://stackoverflow.com/questions/1470850/twisted-network-client- 
with-multiprocessing-workers/1472271#1472271

Jean-Paul



From jml at mumak.net  Tue Jun  8 13:48:55 2010
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 8 Jun 2010 15:48:55 -0400
Subject: [Twisted-Python] The 10.1 release -- what's happening
Message-ID: <AANLkTil7FDzw6MejjTg_kYem6k7543ZEMSEVPVjweVnO@mail.gmail.com>

Hello,

Many of you have been asking, "what happened to the 10.1 release?"

Essentially, glyph and I both had horrible weekends for different
reasons. Instead of releasing, I waited around for glyph and fixed a
bunch of release-related tickets.

I'm going to try to do a pre-release this week. Sorry for the delay.

jml



From exarkun at twistedmatrix.com  Tue Jun  8 22:20:30 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 09 Jun 2010 04:20:30 -0000
Subject: [Twisted-Python] Dropping Python 2.4 support on Windows after 10.1
Message-ID: <20100609042030.1815.659910457.divmod.xquotient.43@localhost.localdomain>

Hey all,

I would like to propose that after Twisted 10.1 is released, we cease to 
claim support for Python 2.4 on any version of Windows.  This seems 
reasonable to me considering that Python 2.5 was first released in 
September of 2006 and that either Windows Python installations can be 
upgraded easily or very likely no upgrades are possible at all 
(specifically, no upgrades of Twisted).

The motivation for this is that we do not have the hardware resources to 
continue to test Twisted on Python 2.4 on Windows, particularly 
considering we will shortly want to begin testing on Python 2.7 on 
Windows.  If Windows/Python 2.4 support is important enough to anyone 
that they can offer to host the build slaves necessary to continue 
testing, then I'll withdraw the suggestion.

Lastly, I am not proposing dropping Python 2.4 support on any other 
platform (ie, Debian and Fedora).

Jean-Paul



From andrewfr_ice at yahoo.com  Wed Jun  9 08:22:45 2010
From: andrewfr_ice at yahoo.com (Andrew Francis)
Date: Wed, 9 Jun 2010 07:22:45 -0700 (PDT)
Subject: [Twisted-Python] Stackless.py and Twisted
Message-ID: <390902.71894.qm@web120015.mail.ne1.yahoo.com>

Hi Folks:

My talk "Prototyping Go's Select for Stackless with Stackless.py" recently got accepted to EuroPython. In the talk, I modified stackless.py to support the Go language's Select statement. I support Select as a method rather than a Python language feature. Implementing Select turns out to be relatively. However my original interest in stackless.py  was about subclassing the Twisted Reactor and making it stackless's scheduler. As opposed to running Twisted in a separate tasklet so an application does not deadlock under certain edge cases. In part I wanted to experiment with changing the stackless scheduler in such a way as to improve the performance of IO driven applications.  I am wondering if I would see a speed up if compiled into pypy-c (unfortunately right now I don't believe the JIT and Stackless are integrated)? Is this too wild an idea?

Cheers,
Andrew




      



From glyph at twistedmatrix.com  Wed Jun  9 12:35:09 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 9 Jun 2010 14:35:09 -0400
Subject: [Twisted-Python] Dropping Python 2.4 support on Windows after
	10.1
In-Reply-To: <20100609042030.1815.659910457.divmod.xquotient.43@localhost.localdomain>
References: <20100609042030.1815.659910457.divmod.xquotient.43@localhost.localdomain>
Message-ID: <6B39B1B2-F627-4474-8B1B-31E80DF19596@twistedmatrix.com>


On Jun 9, 2010, at 12:20 AM, exarkun at twistedmatrix.com wrote:

> I would like to propose that after Twisted 10.1 is released, we cease to 
> claim support for Python 2.4 on any version of Windows.  This seems 
> reasonable to me considering that Python 2.5 was first released in 
> September of 2006 and that either Windows Python installations can be 
> upgraded easily or very likely no upgrades are possible at all 
> (specifically, no upgrades of Twisted).

Seconded.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100609/32976b75/attachment.html>

From kevin.horn at gmail.com  Wed Jun  9 13:29:31 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 9 Jun 2010 14:29:31 -0500
Subject: [Twisted-Python] Dropping Python 2.4 support on Windows after
	10.1
In-Reply-To: <20100609042030.1815.659910457.divmod.xquotient.43@localhost.localdomain>
References: <20100609042030.1815.659910457.divmod.xquotient.43@localhost.localdomain>
Message-ID: <AANLkTikjYzGK3jSTwzDE-j30S2UoG6zKFGehXtLg3kC9@mail.gmail.com>

On Tue, Jun 8, 2010 at 11:20 PM, <exarkun at twistedmatrix.com> wrote:

> Hey all,
>
> I would like to propose that after Twisted 10.1 is released, we cease to
> claim support for Python 2.4 on any version of Windows.  This seems
> reasonable to me considering that Python 2.5 was first released in
> September of 2006 and that either Windows Python installations can be
> upgraded easily or very likely no upgrades are possible at all
> (specifically, no upgrades of Twisted).
>
> The motivation for this is that we do not have the hardware resources to
> continue to test Twisted on Python 2.4 on Windows, particularly
> considering we will shortly want to begin testing on Python 2.7 on
> Windows.  If Windows/Python 2.4 support is important enough to anyone
> that they can offer to host the build slaves necessary to continue
> testing, then I'll withdraw the suggestion.
>
> Lastly, I am not proposing dropping Python 2.4 support on any other
> platform (ie, Debian and Fedora).
>
> Jean-Paul
>
>
It would be nice to keep it if possible, but if it's a choice between a
buildslave for 2.4 and one for 2.7, then 2.7 really needs to take priority.

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100609/7a23f45e/attachment.html>

From konrads at smelkovs.com  Wed Jun  9 13:31:50 2010
From: konrads at smelkovs.com (Konrads Smelkovs)
Date: Wed, 9 Jun 2010 22:31:50 +0300
Subject: [Twisted-Python] Dropping Python 2.4 support on Windows after
	10.1
In-Reply-To: <6B39B1B2-F627-4474-8B1B-31E80DF19596@twistedmatrix.com>
References: <20100609042030.1815.659910457.divmod.xquotient.43@localhost.localdomain>
	<6B39B1B2-F627-4474-8B1B-31E80DF19596@twistedmatrix.com>
Message-ID: <AANLkTinSyNg0riQbrekCpPxxRMwnar29bDgq1KGtSb0G@mail.gmail.com>

Me 3. Existing apps wont likely care about new features and if they
need then upgrade to 2.5 is fully backwards compatible

2010/6/9, Glyph Lefkowitz <glyph at twistedmatrix.com>:
>
> On Jun 9, 2010, at 12:20 AM, exarkun at twistedmatrix.com wrote:
>
>> I would like to propose that after Twisted 10.1 is released, we cease to
>> claim support for Python 2.4 on any version of Windows.  This seems
>> reasonable to me considering that Python 2.5 was first released in
>> September of 2006 and that either Windows Python installations can be
>> upgraded easily or very likely no upgrades are possible at all
>> (specifically, no upgrades of Twisted).
>
> Seconded.

-- 
Nosūtīts no manas mobilās ierīces

--
Konrads Smelkovs
Applied IT sorcery.



From dgriff1 at gmail.com  Wed Jun  9 13:42:32 2010
From: dgriff1 at gmail.com (Daniel Griffin)
Date: Wed, 9 Jun 2010 14:42:32 -0500
Subject: [Twisted-Python] Stackless.py and Twisted
In-Reply-To: <390902.71894.qm@web120015.mail.ne1.yahoo.com>
References: <390902.71894.qm@web120015.mail.ne1.yahoo.com>
Message-ID: <AANLkTikVzLs1Y2lgUkVTSC0elX37jHRx2bcq6R0U47ad@mail.gmail.com>

I dont know if twisted can really be counted as a scheduler. Its purpose is
more to do with nonblocking IO. To improve IO performance in stackless you
would need to add multiplexing to its scheduler(if it doesnt already have
it). http://eventlet.net/ seems to to this.

Dan

On Wed, Jun 9, 2010 at 9:22 AM, Andrew Francis <andrewfr_ice at yahoo.com>wrote:

> Hi Folks:
>
> My talk "Prototyping Go's Select for Stackless with Stackless.py" recently
> got accepted to EuroPython. In the talk, I modified stackless.py to support
> the Go language's Select statement. I support Select as a method rather than
> a Python language feature. Implementing Select turns out to be relatively.
> However my original interest in stackless.py  was about subclassing the
> Twisted Reactor and making it stackless's scheduler. As opposed to running
> Twisted in a separate tasklet so an application does not deadlock under
> certain edge cases. In part I wanted to experiment with changing the
> stackless scheduler in such a way as to improve the performance of IO driven
> applications.  I am wondering if I would see a speed up if compiled into
> pypy-c (unfortunately right now I don't believe the JIT and Stackless are
> integrated)? Is this too wild an idea?
>
> Cheers,
> Andrew
>
>
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100609/c5c2c34e/attachment.html>

From glyph at twistedmatrix.com  Wed Jun  9 15:24:59 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 9 Jun 2010 17:24:59 -0400
Subject: [Twisted-Python] Dropping Python 2.4 support on Windows after
	10.1
In-Reply-To: <AANLkTikjYzGK3jSTwzDE-j30S2UoG6zKFGehXtLg3kC9@mail.gmail.com>
References: <20100609042030.1815.659910457.divmod.xquotient.43@localhost.localdomain>
	<AANLkTikjYzGK3jSTwzDE-j30S2UoG6zKFGehXtLg3kC9@mail.gmail.com>
Message-ID: <E4118647-21EC-41BC-831D-8C5B4DACE4E0@twistedmatrix.com>

On Jun 9, 2010, at 3:29 PM, Kevin Horn wrote:

> It would be nice to keep it if possible, but if it's a choice between a buildslave for 2.4 and one for 2.7, then 2.7 really needs to take priority.

Well, you can make it possible by volunteering the hardware :).  I just don't think we should think about it for very long unless someone is willing to do that.


From rgacote at appropriatesolutions.com  Wed Jun  9 16:04:18 2010
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Wed, 9 Jun 2010 18:04:18 -0400 (EDT)
Subject: [Twisted-Python] Dropping Python 2.4 support on Windows after
 10.1
In-Reply-To: <20100609042030.1815.659910457.divmod.xquotient.43@localhost.localdomain>
Message-ID: <14696810.4491276121055334.JavaMail.rgacote@ip-210.Corp.AppropriateSolutions.com>


We have quite a bit of Twisted/Windows code and it has all been ported over to 2.5 or 2.6. 
I find it easier to upgrade Pythons on Windows since the bulk of our Windows products are shipped as py2exe containing their own interpreter. Cleaner than dealing with CentOS (for example) which has 2.4 in the base install. 

So, one positive vote for removing 2.4 support in Windows. 
I prefer your Windows support be focused  moving forward to 2.7. 

--Ray


----- Original Message -----
From: exarkun at twistedmatrix.com
To: twisted-python at twistedmatrix.com
Sent: Wednesday, June 9, 2010 12:20:30 AM GMT -05:00 US/Canada Eastern
Subject: [Twisted-Python] Dropping Python 2.4 support on Windows after 10.1

Hey all,

I would like to propose that after Twisted 10.1 is released, we cease to 
claim support for Python 2.4 on any version of Windows.  This seems 
reasonable to me considering that Python 2.5 was first released in 
September of 2006 and that either Windows Python installations can be 
upgraded easily or very likely no upgrades are possible at all 
(specifically, no upgrades of Twisted).

The motivation for this is that we do not have the hardware resources to 
continue to test Twisted on Python 2.4 on Windows, particularly 
considering we will shortly want to begin testing on Python 2.7 on 
Windows.  If Windows/Python 2.4 support is important enough to anyone 
that they can offer to host the build slaves necessary to continue 
testing, then I'll withdraw the suggestion.

Lastly, I am not proposing dropping Python 2.4 support on any other 
platform (ie, Debian and Fedora).

Jean-Paul

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
Ray Cote, President
Appropriate Solutions, Inc.
We Build Software
603.924.6079



From glyph at twistedmatrix.com  Wed Jun  9 16:25:05 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 9 Jun 2010 18:25:05 -0400
Subject: [Twisted-Python] making Screwtape (Tim Allen) a committer
Message-ID: <FF6ABFC8-334F-4554-955E-CE4B34F56C2E@twistedmatrix.com>

I think we should give screwtape an SVN account and make him an official reviewer.  He's been doing a lot of work on the distutils code which would be made easier by that, and he's been doing pretty decent reviews.

Thoughts?  (Feel free to voice any comments off-list, too.)


From glyph at twistedmatrix.com  Wed Jun  9 16:25:12 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 9 Jun 2010 18:25:12 -0400
Subject: [Twisted-Python] Dropping Python 2.4 support on Windows after
	10.1
In-Reply-To: <14696810.4491276121055334.JavaMail.rgacote@ip-210.Corp.AppropriateSolutions.com>
References: <14696810.4491276121055334.JavaMail.rgacote@ip-210.Corp.AppropriateSolutions.com>
Message-ID: <64FB205D-DBA2-45A1-ACEF-794249C5234C@twistedmatrix.com>


On Jun 9, 2010, at 6:04 PM, Ray Cote wrote:

> So, one positive vote for removing 2.4 support in Windows. 
> I prefer your Windows support be focused  moving forward to 2.7. 

Since Ray was the first sponsor of 2010, as well as a silver sponsor - see the AppropriateSolutions logo on the front page of twistedmatrix.com - everybody should read this as if it were spoken in a booming, disembodied voice emanating from Mount Olympus.  Goodbye, Windows 2.4 buildslaves! :-)

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100609/e21bf577/attachment.html>

From kevin.horn at gmail.com  Wed Jun  9 16:49:34 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 9 Jun 2010 17:49:34 -0500
Subject: [Twisted-Python] making Screwtape (Tim Allen) a committer
In-Reply-To: <FF6ABFC8-334F-4554-955E-CE4B34F56C2E@twistedmatrix.com>
References: <FF6ABFC8-334F-4554-955E-CE4B34F56C2E@twistedmatrix.com>
Message-ID: <AANLkTimw4K9thtQ-WDhf32BXILBVGOsOGVD5JJXznWsQ@mail.gmail.com>

+1

On Wed, Jun 9, 2010 at 5:25 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

> I think we should give screwtape an SVN account and make him an official
> reviewer.  He's been doing a lot of work on the distutils code which would
> be made easier by that, and he's been doing pretty decent reviews.
>
> Thoughts?  (Feel free to voice any comments off-list, too.)
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100609/84aa8220/attachment-0001.html>

From lists at collab.nl  Wed Jun  9 18:10:43 2010
From: lists at collab.nl (Thijs Triemstra | Collab)
Date: Thu, 10 Jun 2010 02:10:43 +0200
Subject: [Twisted-Python] making Screwtape (Tim Allen) a committer
In-Reply-To: <AANLkTimw4K9thtQ-WDhf32BXILBVGOsOGVD5JJXznWsQ@mail.gmail.com>
References: <FF6ABFC8-334F-4554-955E-CE4B34F56C2E@twistedmatrix.com>
	<AANLkTimw4K9thtQ-WDhf32BXILBVGOsOGVD5JJXznWsQ@mail.gmail.com>
Message-ID: <2E827EB3-7F88-4B93-9419-7C501027CAC0@collab.nl>

+2

On 10 Jun 2010, at 00:49, Kevin Horn wrote:

> +1
> 
> On Wed, Jun 9, 2010 at 5:25 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> I think we should give screwtape an SVN account and make him an official reviewer.  He's been doing a lot of work on the distutils code which would be made easier by that, and he's been doing pretty decent reviews.
> 
> Thoughts?  (Feel free to voice any comments off-list, too.)
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100610/58de3302/attachment.html>

From screwtape at froup.com  Wed Jun  9 18:11:28 2010
From: screwtape at froup.com (Tim Allen)
Date: Thu, 10 Jun 2010 10:11:28 +1000
Subject: [Twisted-Python] making Screwtape (Tim Allen) a committer
In-Reply-To: <FF6ABFC8-334F-4554-955E-CE4B34F56C2E@twistedmatrix.com>
References: <FF6ABFC8-334F-4554-955E-CE4B34F56C2E@twistedmatrix.com>
Message-ID: <20100610001128.GD12934@boombah.thristian.org>

On Wed, Jun 09, 2010 at 06:25:05PM -0400, Glyph Lefkowitz wrote:
> I think we should give screwtape an SVN account and make him an
> official reviewer.  He's been doing a lot of work on the distutils
> code which would be made easier by that, and he's been doing pretty
> decent reviews.

Well, this is a bit of a boost to the ol' ego. :D

The reason I've resisted asking for commit access before this is that
most of my efforts for Twisted have been either (a) things directly
useful for $EMPLOYER's Twisted deployments (such as the distutils
changes you mention), or (b) things indirectly useful for the purposes
of (a), such as cutting down the review queue to make it more likely
that my patches will be reviewed. While my non-work-related
contributions are non-zero, they're a lot less than my work-related
contributions.

That said, I've been following the Twisted project since (checks
mailing-list archive) October 2002, and I fully intend to keep
contributing reviews at the very least no matter who my employer is at
the time.

If you still think I'm a good candidate for committership, I'll happily
accept.


Tim "Screwtape" Allen



From andrew at bemusement.org  Wed Jun  9 18:32:11 2010
From: andrew at bemusement.org (Andrew Bennetts)
Date: Thu, 10 Jun 2010 10:32:11 +1000
Subject: [Twisted-Python] making Screwtape (Tim Allen) a committer
In-Reply-To: <FF6ABFC8-334F-4554-955E-CE4B34F56C2E@twistedmatrix.com>
References: <FF6ABFC8-334F-4554-955E-CE4B34F56C2E@twistedmatrix.com>
Message-ID: <20100610003211.GC5030@steerpike.home.puzzling.org>

Glyph Lefkowitz wrote:
> I think we should give screwtape an SVN account and make him an official
> reviewer.  He's been doing a lot of work on the distutils code which would be
> made easier by that, and he's been doing pretty decent reviews.

+1

I've been thinking (and occasionally saying) this for months!

-Andrew.




From lvh at laurensvh.be  Thu Jun 10 01:53:17 2010
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Thu, 10 Jun 2010 09:53:17 +0200
Subject: [Twisted-Python] making Screwtape (Tim Allen) a committer
In-Reply-To: <20100610003211.GC5030@steerpike.home.puzzling.org>
References: <FF6ABFC8-334F-4554-955E-CE4B34F56C2E@twistedmatrix.com>
	<20100610003211.GC5030@steerpike.home.puzzling.org>
Message-ID: <AANLkTinX39Q_C0IeR_JYn6eBia4YET3L1iJDzdlRuS_u@mail.gmail.com>

Unless there's stuff most of us don't see, I don't see how anyone
could object :-) +1


lvh



From lvh at laurensvh.be  Sat Jun 12 04:02:00 2010
From: lvh at laurensvh.be (Laurens Van Houtven)
Date: Sat, 12 Jun 2010 12:02:00 +0200
Subject: [Twisted-Python] trial + test-case-mode
Message-ID: <AANLkTim6flaszwSBn_e8uscLLTTFLtS9dvCdczQxBjFm@mail.gmail.com>

Hey,


Does anyone have some magic Elisp to integrate Since I know a bunch of
you are happy emacs users and TTD afficionados, I'm checking here just
in case someone has already hacked something up to add trial as a
backend for test-case-mode. If nobody has, I'll give it a shot.

test-case-mode: http://www.emacswiki.org/cgi-bin/emacs-en/TestCaseMode
test-case-mode integrated to work with nose's test runner, from Georg
Brandl's excellent dotemacs dir:
http://bitbucket.org/birkenfeld/dotemacs/src (in extensions.el, grep
for test-case-nose-backend and test-case in general)

tia
lvh



From exarkun at twistedmatrix.com  Sat Jun 12 22:05:31 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 13 Jun 2010 04:05:31 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1276401931.96.1089789659@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100613/f8f75b6b/attachment-0001.html>

From albert.brandl at weiermayer.com  Mon Jun 14 01:35:48 2010
From: albert.brandl at weiermayer.com (Albert Brandl)
Date: Mon, 14 Jun 2010 09:35:48 +0200
Subject: [Twisted-Python] trial + test-case-mode
In-Reply-To: <AANLkTim6flaszwSBn_e8uscLLTTFLtS9dvCdczQxBjFm@mail.gmail.com>
References: <AANLkTim6flaszwSBn_e8uscLLTTFLtS9dvCdczQxBjFm@mail.gmail.com>
Message-ID: <20100614073547.GA4031@weiermayer.com>

Hi,

On Sat, Jun 12, 2010 at 12:02:00PM +0200, Laurens Van Houtven wrote:

> Does anyone have some magic Elisp to integrate

The sources contain an emacs directory; have a look at twisted-dev.el.

Regards, Albert



From abierbaum at gmail.com  Mon Jun 14 07:22:54 2010
From: abierbaum at gmail.com (Allen Bierbaum)
Date: Mon, 14 Jun 2010 08:22:54 -0500
Subject: [Twisted-Python] twisted.web questions
Message-ID: <AANLkTikHnQMzvgyofceyd6OTUPtPpxim47PmgMEg-1qK@mail.gmail.com>

We have a large client-server based application based on twisted.  The
application has grown to the point where we would like to add a REST-based
API to the server side to allow for interfacing with a wider variety of
client applications.  Over the weekend I started looking into twisted.web
and had a couple of basic questions:

1) Is there any method to stream a large request (ex: PUT or POST with file
upload) into the system or does the entire body have to be loaded into
memory as part of the request?

2) Has anyone used an existing URL Routing system (ex: Routes [1], Selector
[2]) and adapted it for use with Twisted?  (I know I could use the twisted
preferred method of parent child hierarchies, but our application has a
better fit with the route-based method used by Pylons, Django, Rails, etc)

3) Is there a document anywhere that describes all the environment variables
the user can get from the request and how to get to them?  (something like
the environ section of the WSGI PEP [3])

4) Are their any wrappers people have developed to make it a bit easier to
use deferreds (in particular inlinecallbacks) in the handlers for
twisted.web?  (I am considering just writing a wrapper myself that provides
an interface similar to google app engine webapp [4] but wanted to check
first so I don't reinvent something)

Thanks,
Allen


[1] http://routes.groovie.org/index.html
[2] http://lukearno.com/projects/selector/
[3] http://www.python.org/dev/peps/pep-0333/#environ-variables
[4] http://code.google.com/appengine/docs/python/tools/webapp/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100614/11ee55c3/attachment-0001.html>

From itamar at itamarst.org  Mon Jun 14 07:38:27 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 14 Jun 2010 09:38:27 -0400
Subject: [Twisted-Python] twisted.web questions
In-Reply-To: <AANLkTikHnQMzvgyofceyd6OTUPtPpxim47PmgMEg-1qK@mail.gmail.com>
References: <AANLkTikHnQMzvgyofceyd6OTUPtPpxim47PmgMEg-1qK@mail.gmail.com>
Message-ID: <1276522707.1658.17.camel@blake>

On Mon, 2010-06-14 at 08:22 -0500, Allen Bierbaum wrote:

> 1) Is there any method to stream a large request (ex: PUT or POST with
> file upload) into the system or does the entire body have to be loaded
> into memory as part of the request?

Very large requests get written to disk, rather than memory. This is
still not ideal, streaming is obviously better - someone may be able to
suggest how to do it until Twisted gets fixed.

> 2) Has anyone used an existing URL Routing system (ex: Routes [1],
> Selector [2]) and adapted it for use with Twisted?  (I know I could
> use the twisted preferred method of parent child hierarchies, but our
> application has a better fit with the route-based method used by
> Pylons, Django, Rails, etc)

Set isLeaf=True on the Resource, and then render() will get called for
all sub-paths, and at that point you can dispatch using one of those
libraries.

> 3) Is there a document anywhere that describes all the environment
> variables the user can get from the request and how to get to them?
>  (something like the environ section of the WSGI PEP [3])

Request objects do not provide any environment variables (that's an
operating system concept). They provide information about the HTTP
request. This includes the method, path, and HTTP headers sent by the
client. The list of instance variable on Request objects may be what you
want:

http://twistedmatrix.com/documents/current/api/twisted.web.http.Request.html

> 4) Are their any wrappers people have developed to make it a bit
> easier to use deferreds (in particular inlinecallbacks) in the
> handlers for twisted.web?  (I am considering just writing a wrapper
> myself that provides an interface similar to google app engine webapp
> [4] but wanted to check first so I don't reinvent something)

There's a branch of Twisted that implements this, hopefully it will
eventually be merged:
http://twistedmatrix.com/trac/ticket/3711





From itamar at itamarst.org  Mon Jun 14 07:43:31 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 14 Jun 2010 09:43:31 -0400
Subject: [Twisted-Python] twisted.web questions
In-Reply-To: <1276522707.1658.17.camel@blake>
References: <AANLkTikHnQMzvgyofceyd6OTUPtPpxim47PmgMEg-1qK@mail.gmail.com>
	<1276522707.1658.17.camel@blake>
Message-ID: <1276523011.1658.18.camel@blake>

On Mon, 2010-06-14 at 09:38 -0400, Itamar Turner-Trauring wrote:

> > 4) Are their any wrappers people have developed to make it a bit
> > easier to use deferreds (in particular inlinecallbacks) in the
> > handlers for twisted.web?  (I am considering just writing a wrapper
> > myself that provides an interface similar to google app engine webapp
> > [4] but wanted to check first so I don't reinvent something)
> 
> There's a branch of Twisted that implements this, hopefully it will
> eventually be merged:
> http://twistedmatrix.com/trac/ticket/3711

And Nevow also implements support for this, without changing Twisted
itself:

http://divmod.org/trac/wiki/DivmodNevow




From abierbaum at gmail.com  Mon Jun 14 09:28:18 2010
From: abierbaum at gmail.com (Allen Bierbaum)
Date: Mon, 14 Jun 2010 10:28:18 -0500
Subject: [Twisted-Python] twisted.web questions
In-Reply-To: <1276522707.1658.17.camel@blake>
References: <AANLkTikHnQMzvgyofceyd6OTUPtPpxim47PmgMEg-1qK@mail.gmail.com>
	<1276522707.1658.17.camel@blake>
Message-ID: <AANLkTinhEEJatNcZwyfLUrZ3fDj2srTxUDWbj5WQ8E76@mail.gmail.com>

On Mon, Jun 14, 2010 at 8:38 AM, Itamar Turner-Trauring <itamar at itamarst.org
> wrote:

> On Mon, 2010-06-14 at 08:22 -0500, Allen Bierbaum wrote:
>
> > 1) Is there any method to stream a large request (ex: PUT or POST with
> > file upload) into the system or does the entire body have to be loaded
> > into memory as part of the request?
>
> Very large requests get written to disk, rather than memory. This is
> still not ideal, streaming is obviously better - someone may be able to
> suggest how to do it until Twisted gets fixed.
>

That is unfortunate.  Do you know of an example that shows to get access to
that file or does it just show up as a file object in the request?


>
> > 2) Has anyone used an existing URL Routing system (ex: Routes [1],
> > Selector [2]) and adapted it for use with Twisted?  (I know I could
> > use the twisted preferred method of parent child hierarchies, but our
> > application has a better fit with the route-based method used by
> > Pylons, Django, Rails, etc)
>
> Set isLeaf=True on the Resource, and then render() will get called for
> all sub-paths, and at that point you can dispatch using one of those
> libraries.
>

I will have to try that.  I think it may have problems due to those systems
relying upon the WSGI interface and thus the environ dictionary.  I am
guessing I will have to hack them up a bit to make it work.


> > 3) Is there a document anywhere that describes all the environment
> > variables the user can get from the request and how to get to them?
> >  (something like the environ section of the WSGI PEP [3])
>
> Request objects do not provide any environment variables (that's an
> operating system concept). They provide information about the HTTP
> request. This includes the method, path, and HTTP headers sent by the
> client.


I mispoke.  I didn't mean the OS environment variables, I meant the
equivalent of the WSGI environ dictionary (the CGI environment).  The link
below looks like a great starting point to find them.


> The list of instance variable on Request objects may be what you
> want:
>
>
> http://twistedmatrix.com/documents/current/api/twisted.web.http.Request.html
>
> > 4) Are their any wrappers people have developed to make it a bit
> > easier to use deferreds (in particular inlinecallbacks) in the
> > handlers for twisted.web?  (I am considering just writing a wrapper
> > myself that provides an interface similar to google app engine webapp
> > [4] but wanted to check first so I don't reinvent something)
>
> There's a branch of Twisted that implements this, hopefully it will
> eventually be merged:
> http://twistedmatrix.com/trac/ticket/3711
>
>
Is there anything that is currently holding this up?  (ie. is the design on
this branch what will end up in the system or could it change dramatically?)

Thanks for all the answers.

-Allen


>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100614/938a714b/attachment.html>

From itamar at itamarst.org  Mon Jun 14 09:56:56 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 14 Jun 2010 11:56:56 -0400 (EDT)
Subject: [Twisted-Python] twisted.web questions
In-Reply-To: <AANLkTinhEEJatNcZwyfLUrZ3fDj2srTxUDWbj5WQ8E76@mail.gmail.com>
References: <AANLkTikHnQMzvgyofceyd6OTUPtPpxim47PmgMEg-1qK@mail.gmail.com>
	<1276522707.1658.17.camel@blake>
	<AANLkTinhEEJatNcZwyfLUrZ3fDj2srTxUDWbj5WQ8E76@mail.gmail.com>
Message-ID: <26255.63.107.91.99.1276531016.squirrel@webmail.zoteca.com>

>> Very large requests get written to disk, rather than memory. This is
>> still not ideal, streaming is obviously better - someone may be able to
>> suggest how to do it until Twisted gets fixed.
>>
>
> That is unfortunate.  Do you know of an example that shows to get access
> to
> that file or does it just show up as a file object in the request?

It's transparent to the user, it shows up as file-like object in the Request.

>> There's a branch of Twisted that implements this, hopefully it will
>> eventually be merged:
>> http://twistedmatrix.com/trac/ticket/3711
>>
>>
> Is there anything that is currently holding this up?  (ie. is the design
> on
> this branch what will end up in the system or could it change
> dramatically?)

There are a bunch of review comments in the ticket. You could just write
your own until this is ready, I've done it a number of times and it's a
pretty small piece of code.




From jaroslaw.fedewicz at gmail.com  Mon Jun 14 12:59:39 2010
From: jaroslaw.fedewicz at gmail.com (Yaroslav Fedevych)
Date: Mon, 14 Jun 2010 21:59:39 +0300
Subject: [Twisted-Python] twisted.web questions
In-Reply-To: <26255.63.107.91.99.1276531016.squirrel@webmail.zoteca.com>
References: <AANLkTikHnQMzvgyofceyd6OTUPtPpxim47PmgMEg-1qK@mail.gmail.com>
	<1276522707.1658.17.camel@blake>
	<AANLkTinhEEJatNcZwyfLUrZ3fDj2srTxUDWbj5WQ8E76@mail.gmail.com>
	<26255.63.107.91.99.1276531016.squirrel@webmail.zoteca.com>
Message-ID: <AANLkTinOBCl54RNQLdhguqIYhLtOkocs7FeGl3TJQZtQ@mail.gmail.com>

On Mon, Jun 14, 2010 at 6:56 PM, Itamar Turner-Trauring
<itamar at itamarst.org> wrote:
>>> Very large requests get written to disk, rather than memory. This is
>>> still not ideal, streaming is obviously better - someone may be able to
>>> suggest how to do it until Twisted gets fixed.
>>>
>>
>> That is unfortunate.  Do you know of an example that shows to get access
>> to
>> that file or does it just show up as a file object in the request?
>
> It's transparent to the user, it shows up as file-like object in the Request.
>

But while receiving, it won't block, will it?



From itamar at itamarst.org  Mon Jun 14 16:46:01 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 14 Jun 2010 18:46:01 -0400
Subject: [Twisted-Python] twisted.web questions
In-Reply-To: <AANLkTinOBCl54RNQLdhguqIYhLtOkocs7FeGl3TJQZtQ@mail.gmail.com>
References: <AANLkTikHnQMzvgyofceyd6OTUPtPpxim47PmgMEg-1qK@mail.gmail.com>
	<1276522707.1658.17.camel@blake>
	<AANLkTinhEEJatNcZwyfLUrZ3fDj2srTxUDWbj5WQ8E76@mail.gmail.com>
	<26255.63.107.91.99.1276531016.squirrel@webmail.zoteca.com>
	<AANLkTinOBCl54RNQLdhguqIYhLtOkocs7FeGl3TJQZtQ@mail.gmail.com>
Message-ID: <1276555561.1658.20.camel@blake>

On Mon, 2010-06-14 at 21:59 +0300, Yaroslav Fedevych wrote:
> On Mon, Jun 14, 2010 at 6:56 PM, Itamar Turner-Trauring
> <itamar at itamarst.org> wrote:
> >>> Very large requests get written to disk, rather than memory. This is
> >>> still not ideal, streaming is obviously better - someone may be able to
> >>> suggest how to do it until Twisted gets fixed.
> >>>
> >>
> >> That is unfortunate.  Do you know of an example that shows to get access
> >> to
> >> that file or does it just show up as a file object in the request?
> >
> > It's transparent to the user, it shows up as file-like object in the Request.
> >
> 
> But while receiving, it won't block, will it?

It will not block (unless your filesystem's storage blocks, which is
rare -- but does happen.)




From jml at mumak.net  Tue Jun 15 11:51:12 2010
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 15 Jun 2010 18:51:12 +0100
Subject: [Twisted-Python] Reminder: Twisted 10.1 scheduled for early June
In-Reply-To: <F02D0944-623D-4FBE-878E-F427131EDC0A@twistedmatrix.com>
References: <AANLkTikg-mJ7p865ALUL_-cTvEC8Spe57N5p7agczzcq@mail.gmail.com>
	<F02D0944-623D-4FBE-878E-F427131EDC0A@twistedmatrix.com>
Message-ID: <AANLkTilEXPUtVtDsrjaTLncMwvQUb9c8BmwiJ8DRWN9d@mail.gmail.com>

On Sun, May 30, 2010 at 10:28 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> On May 26, 2010, at 4:19 AM, Jonathan Lange wrote:
>
>> Hello all,
>>
>> I and my lovely assistant Glyph intend to cut a release of Twisted
>> 10.1 on the 5th and 6th of June. That's in eleven days.
>
> Yes.
>
> Please mark the date, everyone: your fate is sealed.  Only 5 days remain.

Sigh. It didn't happen.

Nevertheless, Fate and I have arranged to meet this weekend, during
which time we shall dance together. Perhaps Twisted will be released
then.

jml



From jasonjwwilliams at gmail.com  Tue Jun 15 17:33:07 2010
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Tue, 15 Jun 2010 17:33:07 -0600
Subject: [Twisted-Python] Getting at the underlying issue in a
	DNSServerError failure.
Message-ID: <AANLkTil6pfZdQiKaxZF0BdrrzbXUFDtxgN9dlAHzVZQv@mail.gmail.com>

Hi Guys,

What is the best way to get at the underlying issue (i.e.
non-responsive name server, NXDOMAIN, SERVFAIL, etc.) when receiving a
twisted.names.error.DNSServerError?

I'm issuing a resolver.lookupNameservers() BTW.

The failure received by the errback generates this for
failure.getErrorMessage() : <twisted.names.dns.Message instance at
0x101272908>

Traceback prints: twisted.names.error.DNSServerError:
<twisted.names.dns.Message instance at 0x101272908>

So overall, not very specific. Any help is appreciated.

-J



From hatem.oraby at gmail.com  Tue Jun 15 22:56:04 2010
From: hatem.oraby at gmail.com (Hatem Oraby)
Date: Wed, 16 Jun 2010 07:56:04 +0300
Subject: [Twisted-Python] Announcing TwistedSim: A simulator for your
	Twisted application
Message-ID: <AANLkTimiGspKUiIfDf12ht_bJPcW6uQV9Z5aSEVeystR@mail.gmail.com>

Hello,

I'd like to share with you a project that I've been working on: TwistedSim
is a simulator/emulator that loads your Twisted applications and run then
under a simulated network.TwistedSim could save you a lot of developing time
and debugging time, TwistedSim offers you efficient and reproducible testing
environment.
Please check the project at http://code.google.com/p/twistedsim/

Your feedback and comments are highly appreciated. I would like to hear from
you.

Best Regards,
Oraby
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100616/46590e57/attachment.html>

From jasonjwwilliams at gmail.com  Tue Jun 15 23:50:02 2010
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Tue, 15 Jun 2010 23:50:02 -0600
Subject: [Twisted-Python] Twisted Web, Unicode & request.write()
Message-ID: <AANLkTikdGJd6ffQapZy6V1MfIyF-NBaU8YbJMWyBnBOI@mail.gmail.com>

Hi Y'all,

What's the correct way to write out Unicode data to the client in
Twisted Web? request.write() throws a "Data must not be unicode".
Content-Type header is set with "; charset=utf-8" appended to the
content type.

-J



From radix at twistedmatrix.com  Wed Jun 16 00:13:49 2010
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 16 Jun 2010 01:13:49 -0500
Subject: [Twisted-Python] Twisted Web, Unicode & request.write()
In-Reply-To: <AANLkTikdGJd6ffQapZy6V1MfIyF-NBaU8YbJMWyBnBOI@mail.gmail.com>
References: <AANLkTikdGJd6ffQapZy6V1MfIyF-NBaU8YbJMWyBnBOI@mail.gmail.com>
Message-ID: <AANLkTik_h4xG-uYN01EHmJxgCgDaTKv4xft2WsNp2RSI@mail.gmail.com>

On Wed, Jun 16, 2010 at 12:50 AM, Jason J. W. Williams
<jasonjwwilliams at gmail.com> wrote:
> Hi Y'all,
>
> What's the correct way to write out Unicode data to the client in
> Twisted Web? request.write() throws a "Data must not be unicode".
> Content-Type header is set with "; charset=utf-8" appended to the
> content type.

Encode it to bytes with ustr.encode("utf-8") and then pass it to request.write.

-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/



From stephen at thorne.id.au  Wed Jun 16 00:16:40 2010
From: stephen at thorne.id.au (Stephen Thorne)
Date: Wed, 16 Jun 2010 16:16:40 +1000
Subject: [Twisted-Python] Twisted Web, Unicode & request.write()
In-Reply-To: <AANLkTikdGJd6ffQapZy6V1MfIyF-NBaU8YbJMWyBnBOI@mail.gmail.com>
References: <AANLkTikdGJd6ffQapZy6V1MfIyF-NBaU8YbJMWyBnBOI@mail.gmail.com>
Message-ID: <20100616061640.GA1910@thorne.id.au>

On 2010-06-15, Jason J. W. Williams wrote:
> Hi Y'all,
> 
> What's the correct way to write out Unicode data to the client in
> Twisted Web? request.write() throws a "Data must not be unicode".
> Content-Type header is set with "; charset=utf-8" appended to the
> content type.

If you say the charset utf-8, you should emit utf-8.

u'foo'.encode('utf-8') converts from a python unicode object to a str
encoded using the utf-8 codec.

-- 
Regards,
Stephen Thorne
Development Engineer
Netbox Blue



From jasonjwwilliams at gmail.com  Wed Jun 16 00:40:41 2010
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Wed, 16 Jun 2010 00:40:41 -0600
Subject: [Twisted-Python] Twisted Web, Unicode & request.write()
In-Reply-To: <20100616061640.GA1910@thorne.id.au>
References: <AANLkTikdGJd6ffQapZy6V1MfIyF-NBaU8YbJMWyBnBOI@mail.gmail.com>
	<20100616061640.GA1910@thorne.id.au>
Message-ID: <AANLkTimt7aOZatmhMm1qaxiEjngUqMYiEYrxD7f4rs4w@mail.gmail.com>

Thanks guys. I actually backed into that myself in the last hour. Was
just about to write back with the discovered correction. Makes sense.

-J

On Wed, Jun 16, 2010 at 12:16 AM, Stephen Thorne <stephen at thorne.id.au> wrote:
> On 2010-06-15, Jason J. W. Williams wrote:
>> Hi Y'all,
>>
>> What's the correct way to write out Unicode data to the client in
>> Twisted Web? request.write() throws a "Data must not be unicode".
>> Content-Type header is set with "; charset=utf-8" appended to the
>> content type.
>
> If you say the charset utf-8, you should emit utf-8.
>
> u'foo'.encode('utf-8') converts from a python unicode object to a str
> encoded using the utf-8 codec.
>
> --
> Regards,
> Stephen Thorne
> Development Engineer
> Netbox Blue
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From tom at t0mb.net  Wed Jun 16 01:02:53 2010
From: tom at t0mb.net (tom)
Date: Wed, 16 Jun 2010 08:02:53 +0100
Subject: [Twisted-Python] Getting at the underlying issue in
 a	DNSServerError failure.
In-Reply-To: <AANLkTil6pfZdQiKaxZF0BdrrzbXUFDtxgN9dlAHzVZQv@mail.gmail.com>
References: <AANLkTil6pfZdQiKaxZF0BdrrzbXUFDtxgN9dlAHzVZQv@mail.gmail.com>
Message-ID: <4C18771D.1070108@t0mb.net>

I would really like to know this too, but for DNSNameError instead (off 
the top of my head).  This is when using the LookupPointer() method.  It 
seems to return an error rather than a reverse DNS record if the forward 
DNS of the reverse DNS hostname doesn't match the original IP address.  
That's really not useful, but it seems to be the same way that GNU adns 
works, in python at least... which is a real pain to me as I've been 
trying to do 50K plus dns lookups tabulated with the IP, reverse DNS 
hostname, and forward DNS IP address of the reverse DNS in three 
columns.  I just seem to be getting lots of 'None's in my results..

In the end, I've had to use perl Net::DNS for reliable results after 
both twisted and python-adns failed to give me results, but I would much 
rather be using twisted if it could be made to work to my specification.

Cheers.  Tom.

Jason J. W. Williams wrote:
> Hi Guys,
>
> What is the best way to get at the underlying issue (i.e.
> non-responsive name server, NXDOMAIN, SERVFAIL, etc.) when receiving a
> twisted.names.error.DNSServerError?
>
> I'm issuing a resolver.lookupNameservers() BTW.
>
> The failure received by the errback generates this for
> failure.getErrorMessage() : <twisted.names.dns.Message instance at
> 0x101272908>
>
> Traceback prints: twisted.names.error.DNSServerError:
> <twisted.names.dns.Message instance at 0x101272908>
>
> So overall, not very specific. Any help is appreciated.
>
> -J
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>   




From jeandaniel.browne at gmail.com  Wed Jun 16 10:50:30 2010
From: jeandaniel.browne at gmail.com (Jean Daniel)
Date: Wed, 16 Jun 2010 18:50:30 +0200
Subject: [Twisted-Python] deferred as a Protocol class attribute,
	Protocol as class attribute 	of a Factory ...
Message-ID: <AANLkTik-a1oqTBp6JMEB9Q0w1pYLOyohiiAyU8Jf8o_A@mail.gmail.com>

Hello,

Reading the SMTP client tutorial[1], I do not see the impact of the
factory having a protocol defined as a class attribute. Especially
when here is a big fat warning [2] that I should actually understand
the inplications. My guess is that in this first case the protocol
methods do not need access to the protocol instance, maybe it is a
clear indication that the protocol is stateless, and there is a gain
ressource-wise since there is no instance created and maintained. But
I am not sure.

What are the implications of the protocol being a class attribute of
the factory?

Almost the same question: in the imapclient example [3], there is a
LineReceiver subclass hooked to stdio. The lineReceived callback willl
fire a callback added to an _class attribute_ deferred filled with a
user function. I think this design prevents two instances of the
LineReceiver subclass which would race on the class attribute
deferred.

What are the advantages of having defined the deferred at the class
level instead of at the instance level?

Thanks for your help,

[1]: http://twistedmatrix.com/documents/current/mail/tutorial/smtpclient/smtpclient.html#auto6

[2]: """Another minor change to note is that the protocol attribute is
now defined in the class definition, rather than tacked onto an
instance after one is created. This means it is a class attribute,
rather than an instance attribute, now, which makes no difference as
far as this example is concerned. There are circumstances in which the
difference is important: be sure you understand the implications of
each approach when creating your own factories. """


[3]: twisted/doc/mail/examples/imapclient.py in the sources and
http://twistedmatrix.com/documents/current/mail/examples/imap4client.py
on the web



From gxti at partiallystapled.com  Wed Jun 16 16:14:28 2010
From: gxti at partiallystapled.com (Michael Tharp)
Date: Wed, 16 Jun 2010 18:14:28 -0400
Subject: [Twisted-Python] deferred as a Protocol class attribute,
 Protocol as class attribute 	of a Factory ...
In-Reply-To: <AANLkTik-a1oqTBp6JMEB9Q0w1pYLOyohiiAyU8Jf8o_A@mail.gmail.com>
References: <AANLkTik-a1oqTBp6JMEB9Q0w1pYLOyohiiAyU8Jf8o_A@mail.gmail.com>
Message-ID: <4C194CC4.90000@partiallystapled.com>

On 06/16/2010 12:50 PM, Jean Daniel wrote:
> Hello,
>
> Reading the SMTP client tutorial[1], I do not see the impact of the
> factory having a protocol defined as a class attribute. Especially
> when here is a big fat warning [2] that I should actually understand
> the inplications. My guess is that in this first case the protocol
> methods do not need access to the protocol instance, maybe it is a
> clear indication that the protocol is stateless, and there is a gain
> ressource-wise since there is no instance created and maintained. But
> I am not sure.

This isn't storing a protocol instance, just the protocol class. It then 
instantiates that class in the buildProtocol() method. This is a common 
pattern that lets you override settings easily by subclassing.

> Almost the same question: in the imapclient example [3], there is a
> LineReceiver subclass hooked to stdio. The lineReceived callback willl
> fire a callback added to an _class attribute_ deferred filled with a
> user function. I think this design prevents two instances of the
> LineReceiver subclass which would race on the class attribute
> deferred.

This is also not storing an instance in a class variable. It simply has 
a 'default' value of None, which is overridden at the instance level in 
SimpleIMAP4ClientFactory.buildProtocol().

Instance variables always override class variables. Additionally, 
declaring a class variable has no effect on subsequent instance 
assignments (unless it's an attribute descriptor, but twisted doesn't 
use those). If all your initial instance values are immutable (like 
None) you can forgo having an __init__ method at all and simply declare 
them at the class level as was done here.


To answer your question in a hypothetical sense, no it would not make 
sense to store either of those things in a class variable.

-- m. tharp



From glyph at twistedmatrix.com  Wed Jun 16 17:08:55 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 16 Jun 2010 16:08:55 -0700
Subject: [Twisted-Python] Announcing TwistedSim: A simulator for your
	Twisted application
In-Reply-To: <AANLkTimiGspKUiIfDf12ht_bJPcW6uQV9Z5aSEVeystR@mail.gmail.com>
References: <AANLkTimiGspKUiIfDf12ht_bJPcW6uQV9Z5aSEVeystR@mail.gmail.com>
Message-ID: <5FA7DC4B-059B-4891-AB7B-2187FBF66A3C@twistedmatrix.com>

On Jun 15, 2010, at 9:56 PM, Hatem Oraby wrote:

> I'd like to share with you a project that I've been working on: TwistedSim is a simulator/emulator that loads your Twisted applications and run then under a simulated network.TwistedSim could save you a lot of developing time and debugging time, TwistedSim offers you efficient and reproducible testing environment.
> Please check the project at http://code.google.com/p/twistedsim/
> 
> Your feedback and comments are highly appreciated. I would like to hear from you.

Hi Oraby,

Thanks for providing a link to this!  I'll be sure to check it out later.

In the past, projects that begin with the name 'twisted <something>' have occasionally confused users, though, as the projects inside Twisted itself are called 'twisted <something>'.  A while ago, we started promoting the prefix 'tx' (see <https://launchpad.net/tx>) to mean "twisted extension", i.e. "this works with twisted, gets along well with Twisted", sort of like "py" is for "python".

I'm not a lawyer, but my vague understanding is that if you honor this request, it will make things easier for the Twisted project to secure trademark rights later on.  So, I hope that you will consider re-naming "twistedsim" to something else (might I suggest "txnetsim"?) so that it's easier for users to keep this straight.

Thanks again,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100616/b0e22f8a/attachment-0001.html>

From exarkun at twistedmatrix.com  Wed Jun 16 20:06:06 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 17 Jun 2010 02:06:06 -0000
Subject: [Twisted-Python] Getting at the underlying issue in
	a	DNSServerError failure.
In-Reply-To: <AANLkTil6pfZdQiKaxZF0BdrrzbXUFDtxgN9dlAHzVZQv@mail.gmail.com>
References: <AANLkTil6pfZdQiKaxZF0BdrrzbXUFDtxgN9dlAHzVZQv@mail.gmail.com>
Message-ID: <20100617020606.2412.2141663339.divmod.xquotient.36@localhost.localdomain>

On 15 Jun, 11:33 pm, jasonjwwilliams at gmail.com wrote:
>Hi Guys,
>
>What is the best way to get at the underlying issue (i.e.
>non-responsive name server, NXDOMAIN, SERVFAIL, etc.) when receiving a
>twisted.names.error.DNSServerError?

DNSServerError is documented as indicating ESERVER (I think that's what 
"SERVFAIL" means in your list).  So that's the underlying issue.  Are 
you encountering it in other circumstances?

Jean-Paul



From jasonjwwilliams at gmail.com  Wed Jun 16 20:55:51 2010
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Wed, 16 Jun 2010 20:55:51 -0600
Subject: [Twisted-Python] Getting at the underlying issue in a
	DNSServerError failure.
In-Reply-To: <20100617020606.2412.2141663339.divmod.xquotient.36@localhost.localdomain>
References: <AANLkTil6pfZdQiKaxZF0BdrrzbXUFDtxgN9dlAHzVZQv@mail.gmail.com>
	<20100617020606.2412.2141663339.divmod.xquotient.36@localhost.localdomain>
Message-ID: <AANLkTilXHp7_WS5ds_tgTQ1iQib_umoImHJiG9fVs5F7@mail.gmail.com>

Hi Jean-Paul,

You're right DNSServerError = SERVFAIL. DNSNameError = NXDOMAIN

The object reference in the description of the thrown exception left
some uncertainty regarding what the error really was saying.

-J

On Wed, Jun 16, 2010 at 8:06 PM,  <exarkun at twistedmatrix.com> wrote:
> On 15 Jun, 11:33 pm, jasonjwwilliams at gmail.com wrote:
>>Hi Guys,
>>
>>What is the best way to get at the underlying issue (i.e.
>>non-responsive name server, NXDOMAIN, SERVFAIL, etc.) when receiving a
>>twisted.names.error.DNSServerError?
>
> DNSServerError is documented as indicating ESERVER (I think that's what
> "SERVFAIL" means in your list).  So that's the underlying issue.  Are
> you encountering it in other circumstances?
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From pairus at gmail.com  Thu Jun 17 08:33:52 2010
From: pairus at gmail.com (Bruno Frare)
Date: Thu, 17 Jun 2010 11:33:52 -0300
Subject: [Twisted-Python] Start with QTReactor
Message-ID: <AANLkTikYToax1RYNBORENvW7VHdxXi3ZQWWn1-KAWfdS@mail.gmail.com>

Hi,

I'm trying to work with QTReactor, but don't have success!

I look on site http://code.tarbox.org/qtreactor, but the link is broken.

Someone have a tutorial to begin to work with it?

thanks,
Bruno

-- 
________________
Bruno Frare
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100617/b9a0de4e/attachment.html>

From wertiges.produkt at googlemail.com  Thu Jun 17 09:37:17 2010
From: wertiges.produkt at googlemail.com (Stefan Reich)
Date: Thu, 17 Jun 2010 17:37:17 +0200
Subject: [Twisted-Python] Punching a firewall with Twisted?
Message-ID: <4C1A412D.8090307@googlemail.com>

Dear 'Twisted' experts!

I have a quick question that I am sure one of you guys can answer easily:

What I want to do is open an incoming port on the router that connects 
my computer to the Internet. More precisely, I want my Python app do 
that automatically.

In other words, this is about punching a hole into a firewall.

I know that this is possible because there are applications that do 
that. Deluge does this, and Deluge uses Twisted. So I have tried to find 
out how/where Deluge tells Twisted to do this, but the Deluge sources 
are quite sizey, and I haven't found that particular needle in the 
haystack yet.

So, can one of you people enlighten me here? :)

Thanks & have a nice day!
Stefan



From glyph at twistedmatrix.com  Thu Jun 17 10:21:16 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 17 Jun 2010 09:21:16 -0700
Subject: [Twisted-Python] Punching a firewall with Twisted?
In-Reply-To: <4C1A412D.8090307@googlemail.com>
References: <4C1A412D.8090307@googlemail.com>
Message-ID: <F4A994FD-CAA6-4F8D-9F40-E7AC80F58A8A@twistedmatrix.com>


On Jun 17, 2010, at 8:37 AM, Stefan Reich wrote:

> Dear 'Twisted' experts!
> 
> I have a quick question that I am sure one of you guys can answer easily:
> 
> What I want to do is open an incoming port on the router that connects 
> my computer to the Internet. More precisely, I want my Python app do 
> that automatically.
> 
> In other words, this is about punching a hole into a firewall.
> 
> I know that this is possible because there are applications that do 
> that. Deluge does this, and Deluge uses Twisted. So I have tried to find 
> out how/where Deluge tells Twisted to do this, but the Deluge sources 
> are quite sizey, and I haven't found that particular needle in the 
> haystack yet.
> 
> So, can one of you people enlighten me here? :)
> 
> Thanks & have a nice day!
> Stefan

I'm not sure about Deluge, but <http://divmod.org/trac/wiki/DivmodVertex> does some NAT hole-punching.  It does it via sending UDP packets though, not by communicating directly with your router.

Good luck; this is always an interesting problem ;).

-glyph




From wertiges.produkt at googlemail.com  Thu Jun 17 10:37:32 2010
From: wertiges.produkt at googlemail.com (Stefan Reich)
Date: Thu, 17 Jun 2010 18:37:32 +0200
Subject: [Twisted-Python] Punching a firewall with Twisted?
In-Reply-To: <F4A994FD-CAA6-4F8D-9F40-E7AC80F58A8A@twistedmatrix.com>
References: <4C1A412D.8090307@googlemail.com>
	<F4A994FD-CAA6-4F8D-9F40-E7AC80F58A8A@twistedmatrix.com>
Message-ID: <4C1A4F4C.8000706@googlemail.com>

Hi Glyph! (Wait, is that really a first name...? :))
> I'm not sure about Deluge, but <http://divmod.org/trac/wiki/DivmodVertex> does some NAT hole-punching.  It does it via sending UDP packets though, not by communicating directly with your router.
>   
Yeah, I found that too... it looks quite interesting, but as you say, it 
is UDP-based. I know that there is a working TCP-solution. As I said, 
Deluge does it, and for example, the original Bittorrent client does it too.

I actually verified this on my machine: With a trick, I can exploit 
these clients for my purposes.

I open a server socket in my own program on port 15667. Then I start 
Bittorrent. It complains because it can't open the server socket - but 
it does open the firewall, and the firewall stays open as long as the 
application runs. So voila, I can now access my server from outside. It 
is actually open right now, you can try if you like:

    telnet 188.193.214.124 15667

:]
> Good luck; this is always an interesting problem ;).
>   
Yeah... it's actually something that begins to really annoy me. Why are 
we put behind these firewalls? And why is it so complicated to open 
ports on them? It shouldn't be. Let's change that. We have the means!

Every internet user should be able to run a server. This is my credo!

Cheers,
Stefan



From lasizoillo at gmail.com  Thu Jun 17 10:54:35 2010
From: lasizoillo at gmail.com (lasizoillo)
Date: Thu, 17 Jun 2010 18:54:35 +0200
Subject: [Twisted-Python] Punching a firewall with Twisted?
In-Reply-To: <4C1A412D.8090307@googlemail.com>
References: <4C1A412D.8090307@googlemail.com>
Message-ID: <AANLkTikvfPKGXMmnvakNezIbMPYhnpPSErjn-QDJLXN5@mail.gmail.com>

2010/6/17 Stefan Reich <wertiges.produkt at googlemail.com>:
> Dear 'Twisted' experts!
>
> I have a quick question that I am sure one of you guys can answer easily:
>
> What I want to do is open an incoming port on the router that connects
> my computer to the Internet. More precisely, I want my Python app do
> that automatically.
>
> In other words, this is about punching a hole into a firewall.
>
> I know that this is possible because there are applications that do
> that. Deluge does this, and Deluge uses Twisted. So I have tried to find
> out how/where Deluge tells Twisted to do this, but the Deluge sources
> are quite sizey, and I haven't found that particular needle in the
> haystack yet.
>
> So, can one of you people enlighten me here? :)
>


I don't know if this is Deluge's method, but sounds interesting:
http://samy.pl/natpin/?port=80

If you don't want see deluge code, maybe you want use a sniffer.
Wireshark is great for these things ;-)
http://www.wireshark.org/

Regards,
Javi



From maarten at treewalker.org  Thu Jun 17 10:59:16 2010
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Thu, 17 Jun 2010 18:59:16 +0200
Subject: [Twisted-Python] Punching a firewall with Twisted?
In-Reply-To: <4C1A4F4C.8000706@googlemail.com>
References: <4C1A412D.8090307@googlemail.com>
	<F4A994FD-CAA6-4F8D-9F40-E7AC80F58A8A@twistedmatrix.com>
	<4C1A4F4C.8000706@googlemail.com>
Message-ID: <201006171859.16618.maarten@treewalker.org>

On Thursday 17 June 2010, Stefan Reich wrote:

> Yeah, I found that too... it looks quite interesting, but as you say, it
> is UDP-based. I know that there is a working TCP-solution. As I said,
> Deluge does it, and for example, the original Bittorrent client does it
> too.

Maybe it uses UPNP to tell the router which ports to open?

As far as I know, there are no hole-punching techniques for TCP like there 
are for UDP. So the only way to get a port forward is to configure the 
router, manually or through an API like UPNP.

Bye,
		Maarten



From foom at fuhm.net  Thu Jun 17 12:35:08 2010
From: foom at fuhm.net (James Y Knight)
Date: Thu, 17 Jun 2010 14:35:08 -0400
Subject: [Twisted-Python] Punching a firewall with Twisted?
In-Reply-To: <201006171859.16618.maarten@treewalker.org>
References: <4C1A412D.8090307@googlemail.com>
	<F4A994FD-CAA6-4F8D-9F40-E7AC80F58A8A@twistedmatrix.com>
	<4C1A4F4C.8000706@googlemail.com>
	<201006171859.16618.maarten@treewalker.org>
Message-ID: <442E5C25-08A3-4392-9011-C716CD0C8075@fuhm.net>

On Jun 17, 2010, at 12:59 PM, Maarten ter Huurne wrote:
> Maybe it uses UPNP to tell the router which ports to open?
>
> As far as I know, there are no hole-punching techniques for TCP like  
> there
> are for UDP. So the only way to get a port forward is to configure the
> router, manually or through an API like UPNP.

Yes, many bittorrent clients use UPNP and/or NAT-PMP to open a hole in  
the firewall.

This will work for most users of home routers, but not other NAT  
scenarios.

I'm just waiting for the kernel patch which makes socket()/bind()  
automatically send a UPNP/NAT-PMP to the router to open the port. :)

James




From wertiges.produkt at googlemail.com  Thu Jun 17 12:53:00 2010
From: wertiges.produkt at googlemail.com (Stefan Reich)
Date: Thu, 17 Jun 2010 20:53:00 +0200
Subject: [Twisted-Python] Punching a firewall with (or without) Twisted -
	the plot thickens
In-Reply-To: <AANLkTikvfPKGXMmnvakNezIbMPYhnpPSErjn-QDJLXN5@mail.gmail.com>
References: <4C1A412D.8090307@googlemail.com>
	<AANLkTikvfPKGXMmnvakNezIbMPYhnpPSErjn-QDJLXN5@mail.gmail.com>
Message-ID: <4C1A6F0C.4010409@googlemail.com>

lasizoillo wrote:
> I don't know if this is Deluge's method, but sounds interesting:
> http://samy.pl/natpin/?port=80
>   
Hm. That's another kind of hack, and it didn't work for me.
> If you don't want see deluge code, maybe you want use a sniffer.
> Wireshark is great for these things ;-)
> http://www.wireshark.org/
>   
Wireshark! What a nice tool that wasn't on my radar before. Thanks for 
this, it really helped.

Using Wireshark, I found out that both Bittorrent and Deluge talk to the 
gateway via UPNP for opening the port. It all works over HTTP, so it's 
really easy to see what's going on.

These are the steps:

1. Find out the gateway IP (192.168.0.1 or some such)

2. GET http://{gateway}/desc.xml. This makes the gateway print some 
information about itself (make & model and so on). Not sure why this is 
needed. Maybe the protocol is different for different gateways. Or to 
make sure that there is a gateway at all. Or maybe there is some detail 
information in there that is needed for the next steps.

3. Also sent to the gateway: POST /upnp/control3 with some XML/SOAP data 
containing a command called AddPortMapping.

It looks really easy, like you could reprogram this in a few lines, with 
a SOAP library, or even just manual XML. There's also a command called 
DeletePortMapping for proper cleanup.

And it seems like Twisted may actually not even be involved in Deluge's 
port opening code.

Ah. I'm really quite satisfied. I heard that there are tricks to open 
firewalls (Skype's been doing this for ages), but I didn't know that 
there is such an elegant solution.

Cheers and thanks for the hints,
Stefan



From zookog at gmail.com  Thu Jun 17 13:16:23 2010
From: zookog at gmail.com (Zooko O'Whielacronx)
Date: Thu, 17 Jun 2010 13:16:23 -0600
Subject: [Twisted-Python] Punching a firewall with (or without) Twisted
	- the plot thickens
In-Reply-To: <4C1A6F0C.4010409@googlemail.com>
References: <4C1A412D.8090307@googlemail.com>
	<AANLkTikvfPKGXMmnvakNezIbMPYhnpPSErjn-QDJLXN5@mail.gmail.com>
	<4C1A6F0C.4010409@googlemail.com>
Message-ID: <AANLkTikr3Xa_cZJa_3_mtQ31dPV4r17KCrSj6y516LOL@mail.gmail.com>

Coincidentally there's been some talk about this over on
tahoe-dev at tahoe-lafs.org:

http://tahoe-lafs.org/pipermail/tahoe-dev/2010-June/004469.html

Tahoe-LAFS is a distributed storage system which uses Twisted. Some
people think there aren't enough routers that implement UPnP well
enough to make it worthwhile. Shawn Willden posted some code to the
tahoe-dev mailing list showing how to do it using "miniupnp". jrydberg
posted a link to the Tahoe-LAFS trac ticket to his Python NAT-PMP
implementation.

Regards,

Zooko



From foom at fuhm.net  Thu Jun 17 15:04:15 2010
From: foom at fuhm.net (James Y Knight)
Date: Thu, 17 Jun 2010 17:04:15 -0400
Subject: [Twisted-Python] Punching a firewall with (or without) Twisted
	- the plot thickens
In-Reply-To: <AANLkTikr3Xa_cZJa_3_mtQ31dPV4r17KCrSj6y516LOL@mail.gmail.com>
References: <4C1A412D.8090307@googlemail.com>
	<AANLkTikvfPKGXMmnvakNezIbMPYhnpPSErjn-QDJLXN5@mail.gmail.com>
	<4C1A6F0C.4010409@googlemail.com>
	<AANLkTikr3Xa_cZJa_3_mtQ31dPV4r17KCrSj6y516LOL@mail.gmail.com>
Message-ID: <2CA9F448-FB2A-4FE4-B3A2-C0C6E2F4DB45@fuhm.net>


On Jun 17, 2010, at 3:16 PM, Zooko O'Whielacronx wrote:
> Some
> people think there aren't enough routers that implement UPnP well
> enough to make it worthwhile

Doesn't *every* home router purchased in the last 5 years support one  
of UPnP or NAT-PMP? That's been my experience, at least.

James



From stephen at thorne.id.au  Thu Jun 17 18:27:00 2010
From: stephen at thorne.id.au (Stephen Thorne)
Date: Fri, 18 Jun 2010 10:27:00 +1000
Subject: [Twisted-Python] Punching a firewall with (or without) Twisted
 - the plot thickens
In-Reply-To: <2CA9F448-FB2A-4FE4-B3A2-C0C6E2F4DB45@fuhm.net>
References: <4C1A412D.8090307@googlemail.com>
	<AANLkTikvfPKGXMmnvakNezIbMPYhnpPSErjn-QDJLXN5@mail.gmail.com>
	<4C1A6F0C.4010409@googlemail.com>
	<AANLkTikr3Xa_cZJa_3_mtQ31dPV4r17KCrSj6y516LOL@mail.gmail.com>
	<2CA9F448-FB2A-4FE4-B3A2-C0C6E2F4DB45@fuhm.net>
Message-ID: <20100618002700.GB20639@thorne.id.au>

On 2010-06-17, James Y Knight wrote:
> On Jun 17, 2010, at 3:16 PM, Zooko O'Whielacronx wrote:
> > Some
> > people think there aren't enough routers that implement UPnP well
> > enough to make it worthwhile
> 
> Doesn't *every* home router purchased in the last 5 years support one  
> of UPnP or NAT-PMP? That's been my experience, at least.

Not all of them.

More to the point, I'm not aware of any corporate routers that support these
things. It's too much of a security risk to be able to have arbitary machines
on your LAN set up port forwards.

-- 
Regards,
Stephen Thorne
Development Engineer
Netbox Blue



From jasonjwwilliams at gmail.com  Thu Jun 17 18:36:51 2010
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Thu, 17 Jun 2010 18:36:51 -0600
Subject: [Twisted-Python] Twisted Names too many open files...resolv.conf
Message-ID: <AANLkTilqAawa_hCxYcr3HgHaJJ9uApygHnd8dsbgGFQo@mail.gmail.com>

Hi Guys,

Is there anyway to prevent twisted.names.client.createResolver() from
creating a resolvconf resolver, when servers= is passed?

The use here doesn't need the resolv.conf resolvers (and actually
really doesn't want them). What appears to be occurring is that
repeated use of createResolver() exhausts the number of allowed open
files because resolv.conf is never closed:

exceptions.IOError: [Errno 24] Too many open files: '/etc/resolv.conf'

Any advice is greatly appreciated.

-J



From exarkun at twistedmatrix.com  Thu Jun 17 19:41:54 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 18 Jun 2010 01:41:54 -0000
Subject: [Twisted-Python] Twisted Names too many open files...resolv.conf
In-Reply-To: <AANLkTilqAawa_hCxYcr3HgHaJJ9uApygHnd8dsbgGFQo@mail.gmail.com>
References: <AANLkTilqAawa_hCxYcr3HgHaJJ9uApygHnd8dsbgGFQo@mail.gmail.com>
Message-ID: <20100618014154.2412.1216951132.divmod.xquotient.93@localhost.localdomain>

On 12:36 am, jasonjwwilliams at gmail.com wrote:
>Hi Guys,
>
>Is there anyway to prevent twisted.names.client.createResolver() from
>creating a resolvconf resolver, when servers= is passed?
>
>The use here doesn't need the resolv.conf resolvers (and actually
>really doesn't want them). What appears to be occurring is that
>repeated use of createResolver() exhausts the number of allowed open
>files because resolv.conf is never closed:
>
>exceptions.IOError: [Errno 24] Too many open files: '/etc/resolv.conf'

This doesn't mean resolv.conf is never closed.  It just means you've 
already run into your open file limit when something tried to open 
resolv.conf.

You didn't mention which version of Twisted you're using.  Perhaps 
you're running in to #970 (fixed in 10.0).

But if you just want to use a particular server, then maybe you want to 
instantiate twisted.names.client.Resolver directly, rather than calling 
createResolver.

Jean-Paul



From glyph at twistedmatrix.com  Thu Jun 17 22:49:41 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 17 Jun 2010 21:49:41 -0700
Subject: [Twisted-Python] Punching a firewall with Twisted?
In-Reply-To: <4C1A4F4C.8000706@googlemail.com>
References: <4C1A412D.8090307@googlemail.com>
	<F4A994FD-CAA6-4F8D-9F40-E7AC80F58A8A@twistedmatrix.com>
	<4C1A4F4C.8000706@googlemail.com>
Message-ID: <3B6BCA91-CE20-4280-8747-77F4CB759748@twistedmatrix.com>


On Jun 17, 2010, at 9:37 AM, Stefan Reich wrote:

>> I'm not sure about Deluge, but <http://divmod.org/trac/wiki/DivmodVertex> does some NAT hole-punching.  It does it via sending UDP packets though, not by communicating directly with your router.
>> 
> Yeah, I found that too... it looks quite interesting, but as you say, it 
> is UDP-based. I know that there is a working TCP-solution. As I said, 
> Deluge does it, and for example, the original Bittorrent client does it too.

For what it's worth, Vertex includes an *implementation* of TCP, on top of UDP instead of IP.  You can run any Twisted stream-based protocol with Vertex, you don't need to send UDP datagrams around.

(In fact, Vertex _only_ provides a stream-based transport; the UDP part is an implementation detail.  If possible, vertex will try to use TCP first, and could be modified to use a techniques such as the ones described in <http://www.brynosaurus.com/pub/net/p2pnat/> section 4 to speak real TCP instead.)

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100617/ac367c8a/attachment.html>

From glyph at twistedmatrix.com  Thu Jun 17 23:32:34 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 17 Jun 2010 22:32:34 -0700
Subject: [Twisted-Python] Reminder: Twisted 10.1 scheduled for early June
In-Reply-To: <AANLkTilEXPUtVtDsrjaTLncMwvQUb9c8BmwiJ8DRWN9d@mail.gmail.com>
References: <AANLkTikg-mJ7p865ALUL_-cTvEC8Spe57N5p7agczzcq@mail.gmail.com>
	<F02D0944-623D-4FBE-878E-F427131EDC0A@twistedmatrix.com>
	<AANLkTilEXPUtVtDsrjaTLncMwvQUb9c8BmwiJ8DRWN9d@mail.gmail.com>
Message-ID: <8CA4BC9C-BBB3-4F8B-8744-F965DAE85963@twistedmatrix.com>


On Jun 15, 2010, at 10:51 AM, Jonathan Lange wrote:

> Nevertheless, Fate and I have arranged to meet this weekend, during
> which time we shall dance together. Perhaps Twisted will be released
> then.

Good luck.

Sadly I'm probably going to be on a plane at the time, so please let me know if there's release-related stuff that could be done before or afterwards.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100617/81e742b9/attachment.html>

From bszabolcs at gmail.com  Fri Jun 18 04:36:25 2010
From: bszabolcs at gmail.com (Balogh Szabolcs)
Date: Fri, 18 Jun 2010 13:36:25 +0300
Subject: [Twisted-Python] Multiple clients
Message-ID: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>

Hy,

Can somebody send me a small example how to use multiple clients at same
time? For example to connect to 3 different IMAP server. I need this because
I'm working on an email client engine. I can connect to POP/IMAP/SMTP server
to download and send messages, but I have created those methods separated,
and each time when I check for new messages or send a message I use
reactor.run() and reactor.stop(). But calling it multiple times is a
problem. So I need something:
 - when I press button1, the application checks for new messages on POP
server.
 - when I press button2, the application checks for new messages on IMAP
server.

I know how to check for messages on IMAP/POP server, but I don't know how to
do it periodically with twisted...


I hope you understand what I'm trying to explain :}}


Thanks in advance
Szabolcs Balogh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100618/0ae92e3e/attachment.html>

From exarkun at twistedmatrix.com  Fri Jun 18 07:01:02 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 18 Jun 2010 13:01:02 -0000
Subject: [Twisted-Python] Multiple clients
In-Reply-To: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>
References: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>
Message-ID: <20100618130102.2412.1013851242.divmod.xquotient.96@localhost.localdomain>

On 10:36 am, bszabolcs at gmail.com wrote:
>Hy,
>
>Can somebody send me a small example how to use multiple clients at 
>same
>time? For example to connect to 3 different IMAP server. I need this 
>because
>I'm working on an email client engine. I can connect to POP/IMAP/SMTP 
>server
>to download and send messages, but I have created those methods 
>separated,
>and each time when I check for new messages or send a message I use
>reactor.run() and reactor.stop(). But calling it multiple times is a
>problem.

Why?
>So I need something:
>- when I press button1, the application checks for new messages on POP
>server.
>- when I press button2, the application checks for new messages on IMAP
>server.

How about:

  def onbutton1(self):
      checkPOP()

  def onbutton2(self):
      checkIMAP()
>
>I know how to check for messages on IMAP/POP server, but I don't know 
>how to
>do it periodically with twisted...

Periodically as in "once every N seconds"?  Check out reactor.callLater 
or twisted.internet.task.LoopingCall.

Jean-Paul



From bszabolcs at gmail.com  Fri Jun 18 08:34:08 2010
From: bszabolcs at gmail.com (Szabolcs Balogh)
Date: Fri, 18 Jun 2010 17:34:08 +0300
Subject: [Twisted-Python] Multiple clients
In-Reply-To: <20100618130102.2412.1013851242.divmod.xquotient.96@localhost.localdomain>
References: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>
	<20100618130102.2412.1013851242.divmod.xquotient.96@localhost.localdomain>
Message-ID: <201006181734.08757.bszabolcs@gmail.com>

I have used the following code, which is working until I called it multiple 
time:

class ImapProtocol(twisted.mail.imap4.IMAP4Client):

	...
	implementation
	...


class ImapFactory(twisted.internet.protocol.ClientFactory):

    def __init__(self, account):

        self.account = account
        self.deferred = twisted.internet.defer.Deferred()
        
    self.protocol = ImapProtocol

    def clientConnectionFailed(self, connection, reason):
        """
        Called when the client has failed to connect
        """

        self.deferred.errback(reason)


class ImapClient(gobject.GObject):

    def __init__(self, account):

        super(ImapClient, self).__init__()

        self.account = account
        self.host = self.account.get_server_address()
        self.port = self.account.get_server_port()
        self.ssl = self.account.get_use_ssl()

    def got_mailbox_list(self, result):

        twisted.internet.reactor.stop()

    def handle_error(self, error):

        twisted.internet.reactor.stop()

    def get_mailbox_list(self):
        """
        Get the list of existing mailboxes.
        """

        imapfactory = ImapFactory(self.account, self.LIST_MAILBOX)
        imapfactory.deferred.addCallback(self.got_mailbox_list)
        imapfactory.deferred.addErrback(self.handle_error)
        if self.ssl:
            # Using SSL for encrypted connections
            contextfactory = twisted.internet.ssl.ClientContextFactory()
            twisted.internet.reactor.connectSSL(self.host, self.port, 
                                        imapfactory,  contextfactory, 4)
        else:
            # Server doesn't require SSL
            twisted.internet.reactor.connectTCP(self.host, self.port, 
                                                imapfactory, 4)

        twisted.internet.reactor.run()



I call it in the following way:

        imap_client = imapclient.ImapClient(account)
        imap_client.get_mailbox_list()

If I call it only once, it executes successfully, but if I call it twice it 
get blocks and never finishes...

So how can I start the reactor and use the connectSSL/connectTCP methods 
multiple times? How to add new clients to an existing reactor?


On Friday 18 June 2010 16:01:02 exarkun at twistedmatrix.com wrote:
> On 10:36 am, bszabolcs at gmail.com wrote:
> >Hy,
> >
> >Can somebody send me a small example how to use multiple clients at
> >same
> >time? For example to connect to 3 different IMAP server. I need this
> >because
> >I'm working on an email client engine. I can connect to POP/IMAP/SMTP
> >server
> >to download and send messages, but I have created those methods
> >separated,
> >and each time when I check for new messages or send a message I use
> >reactor.run() and reactor.stop(). But calling it multiple times is a
> >problem.
> 
> Why?
> 
> >So I need something:
> >- when I press button1, the application checks for new messages on POP
> >server.
> >- when I press button2, the application checks for new messages on IMAP
> >server.
> 
> How about:
> 
>   def onbutton1(self):
>       checkPOP()
> 
>   def onbutton2(self):
>       checkIMAP()
> 
> >I know how to check for messages on IMAP/POP server, but I don't know
> >how to
> >do it periodically with twisted...
> 
> Periodically as in "once every N seconds"?  Check out reactor.callLater
> or twisted.internet.task.LoopingCall.
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From p.mayers at imperial.ac.uk  Fri Jun 18 08:49:27 2010
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 18 Jun 2010 15:49:27 +0100
Subject: [Twisted-Python] Multiple clients
In-Reply-To: <201006181734.08757.bszabolcs@gmail.com>
References: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>	<20100618130102.2412.1013851242.divmod.xquotient.96@localhost.localdomain>
	<201006181734.08757.bszabolcs@gmail.com>
Message-ID: <4C1B8777.5020405@imperial.ac.uk>

On 18/06/10 15:34, Szabolcs Balogh wrote:
>      def get_mailbox_list(self):
>          twisted.internet.reactor.run()
>

The reactor isn't restartable. You can only start it once.



From bszabolcs at gmail.com  Fri Jun 18 09:25:00 2010
From: bszabolcs at gmail.com (Szabolcs Balogh)
Date: Fri, 18 Jun 2010 18:25:00 +0300
Subject: [Twisted-Python] Multiple clients
In-Reply-To: <4C1B8777.5020405@imperial.ac.uk>
References: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>
	<201006181734.08757.bszabolcs@gmail.com>
	<4C1B8777.5020405@imperial.ac.uk>
Message-ID: <201006181825.01210.bszabolcs@gmail.com>

On Friday 18 June 2010 17:49:27 Phil Mayers wrote:
> On 18/06/10 15:34, Szabolcs Balogh wrote:
> >      def get_mailbox_list(self):
> >          twisted.internet.reactor.run()
> 
> The reactor isn't restartable. You can only start it once.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

Than how can I start checking for messages for different accounts (When I have 
finished checking the messages for the first account to start checking for the 
next account, and so on...)?




From jasonjwwilliams at gmail.com  Fri Jun 18 10:15:32 2010
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Fri, 18 Jun 2010 10:15:32 -0600
Subject: [Twisted-Python] Multiple clients
In-Reply-To: <201006181825.01210.bszabolcs@gmail.com>
References: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>
	<201006181734.08757.bszabolcs@gmail.com>
	<4C1B8777.5020405@imperial.ac.uk>
	<201006181825.01210.bszabolcs@gmail.com>
Message-ID: <AANLkTinuToZDPGtDNSHRpPaK5PKwZToel0kPe9UbF8DE@mail.gmail.com>

Couldn't you use callLater to fire the first account check every N
interval and then just attach the subsequent accounts for that
interval as callbacks to the first check inside your callLater func?

-J

On Fri, Jun 18, 2010 at 9:25 AM, Szabolcs Balogh <bszabolcs at gmail.com> wrote:
> On Friday 18 June 2010 17:49:27 Phil Mayers wrote:
>> On 18/06/10 15:34, Szabolcs Balogh wrote:
>> >      def get_mailbox_list(self):
>> >          twisted.internet.reactor.run()
>>
>> The reactor isn't restartable. You can only start it once.
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> Than how can I start checking for messages for different accounts (When I have
> finished checking the messages for the first account to start checking for the
> next account, and so on...)?
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From glyph at twistedmatrix.com  Fri Jun 18 10:24:54 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 18 Jun 2010 09:24:54 -0700
Subject: [Twisted-Python] Multiple clients
In-Reply-To: <201006181825.01210.bszabolcs@gmail.com>
References: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>
	<201006181734.08757.bszabolcs@gmail.com>
	<4C1B8777.5020405@imperial.ac.uk>
	<201006181825.01210.bszabolcs@gmail.com>
Message-ID: <9BDB6D83-D992-441A-9AB7-E82EDE7DDCBF@twistedmatrix.com>


On Jun 18, 2010, at 8:25 AM, Szabolcs Balogh wrote:

> Than how can I start checking for messages for different accounts (When I have 
> finished checking the messages for the first account to start checking for the 
> next account, and so on...)?

The whole *point* of the "reactor" is to allow multiple connections (and timed calls) to be serviced simultaneously.

When you have "finished checking messages" for the first account, presumably there is a callback of some kind; most likely 'connectionLost()'.  In connectionLost, you can just call connectTCP again with a protocol factory pointed at the second account.

This is actually a FAQ:

<http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#HowdoImakeTwistedtalktomultipleclientsconnecttomultipleservers>

Hopefully this helps.

This is a hard question to answer in a way where the next asker will actually find the answer, since the answer is really "just call a method", and the asker needs to understand that they can call any of these methods at any time.  If you have any idea as to how the FAQ could be improved so that you might have found your answer while searching around, please let us know :).  For example: the way you phrased your requirement here, "When I have done X, start doing X", even *sounds* like an event-driven program - 'def iHaveFinishedChecking(self): next.startChecking()' - so you were clearly on the right track.  Why did you think you needed to run the reactor again in order to accomplish this?

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100618/169868d7/attachment.html>

From p.mayers at imperial.ac.uk  Fri Jun 18 10:46:39 2010
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 18 Jun 2010 17:46:39 +0100
Subject: [Twisted-Python] Multiple clients
In-Reply-To: <201006181825.01210.bszabolcs@gmail.com>
References: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>	<201006181734.08757.bszabolcs@gmail.com>	<4C1B8777.5020405@imperial.ac.uk>
	<201006181825.01210.bszabolcs@gmail.com>
Message-ID: <4C1BA2EF.8070207@imperial.ac.uk>

On 18/06/10 16:25, Szabolcs Balogh wrote:
> On Friday 18 June 2010 17:49:27 Phil Mayers wrote:
>> On 18/06/10 15:34, Szabolcs Balogh wrote:
>>>       def get_mailbox_list(self):
>>>           twisted.internet.reactor.run()
>>
>> The reactor isn't restartable. You can only start it once.
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> Than how can I start checking for messages for different accounts (When I have
> finished checking the messages for the first account to start checking for the
> next account, and so on...)?

Others have already answered this, but one way to explain it:

You don't "call the reactor" like a function. You start the reactor, and 
arrange for *it* to call *your* code in response to events.

One type of events being timer ticks.



From bszabolcs at gmail.com  Fri Jun 18 11:08:21 2010
From: bszabolcs at gmail.com (Szabolcs Balogh)
Date: Fri, 18 Jun 2010 20:08:21 +0300
Subject: [Twisted-Python] Multiple clients
In-Reply-To: <9BDB6D83-D992-441A-9AB7-E82EDE7DDCBF@twistedmatrix.com>
References: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>
	<201006181825.01210.bszabolcs@gmail.com>
	<9BDB6D83-D992-441A-9AB7-E82EDE7DDCBF@twistedmatrix.com>
Message-ID: <201006182008.21775.bszabolcs@gmail.com>

On Friday 18 June 2010 19:24:54 Glyph Lefkowitz wrote:
> On Jun 18, 2010, at 8:25 AM, Szabolcs Balogh wrote:
> > Than how can I start checking for messages for different accounts (When I
> > have finished checking the messages for the first account to start
> > checking for the next account, and so on...)?
> 
> The whole *point* of the "reactor" is to allow multiple connections (and
> timed calls) to be serviced simultaneously.
> 
> When you have "finished checking messages" for the first account,
> presumably there is a callback of some kind; most likely
> 'connectionLost()'.  In connectionLost, you can just call connectTCP again
> with a protocol factory pointed at the second account.
> 
> This is actually a FAQ:
> 
> <http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#HowdoImakeTwis
> tedtalktomultipleclientsconnecttomultipleservers>
> 
> Hopefully this helps.
> 
> This is a hard question to answer in a way where the next asker will
> actually find the answer, since the answer is really "just call a method",
> and the asker needs to understand that they can call any of these methods
> at any time.  If you have any idea as to how the FAQ could be improved so
> that you might have found your answer while searching around, please let
> us know :).  For example: the way you phrased your requirement here, "When
> I have done X, start doing X", even *sounds* like an event-driven program
> - 'def iHaveFinishedChecking(self): next.startChecking()' - so you were
> clearly on the right track.  Why did you think you needed to run the
> reactor again in order to accomplish this?

Using:
            twisted.internet.reactor.connectTCP(host, port, imapfactory, 4)
	    twisted.internet.reactor.run()
it works.

But if I try:
	    twisted.internet.reactor.run()
            twisted.internet.reactor.connectTCP(host, port, imapfactory, 4)
it stops at run() and doesn't executes the connectTCP method.

This is why I thought that first I have to execute connectTCP and then 
reactor.run()


>Couldn't you use callLater to fire the first account check every N
>interval and then just attach the subsequent accounts for that
>interval as callbacks to the first check inside your callLater func?

I can't use the callLater, because I'm working on the engine part of an email 
client. So I need a "get_messages(imap_account)" method, which can be called 
from the GUI synchron or asynchron (pressed the check now button by the user) 
and checks for new messages for the account specified. So it needs to be as 
generally as possible and automatically doesn't do anything.




From bszabolcs at gmail.com  Fri Jun 18 11:16:27 2010
From: bszabolcs at gmail.com (Szabolcs Balogh)
Date: Fri, 18 Jun 2010 20:16:27 +0300
Subject: [Twisted-Python] Multiple clients
In-Reply-To: <9BDB6D83-D992-441A-9AB7-E82EDE7DDCBF@twistedmatrix.com>
References: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>
	<201006181825.01210.bszabolcs@gmail.com>
	<9BDB6D83-D992-441A-9AB7-E82EDE7DDCBF@twistedmatrix.com>
Message-ID: <201006182016.27673.bszabolcs@gmail.com>

On Friday 18 June 2010 19:24:54 Glyph Lefkowitz wrote:
> This is actually a FAQ:
> 
> <http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#HowdoImakeTwis
> tedtalktomultipleclientsconnecttomultipleservers>
> 
"Sometimes people ask this question when they write a function that calls 
connectTCP, then reactor.run(). You don't usually need to call reactor.run() 
yourself; let twistd do it. If you do need to call it yourself, call it just 
once after your initial setup. When reactor.run() exits, your program should 
too."

It sounds good, but if I don't call reactor.run() after connectSSL doesn't 
happens anything... If I call reactor.run() after connectSSL, it works 
properly...



From itamar at itamarst.org  Fri Jun 18 11:25:50 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Fri, 18 Jun 2010 13:25:50 -0400 (EDT)
Subject: [Twisted-Python] Multiple clients
In-Reply-To: <201006182016.27673.bszabolcs@gmail.com>
References: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>
	<201006181825.01210.bszabolcs@gmail.com>
	<9BDB6D83-D992-441A-9AB7-E82EDE7DDCBF@twistedmatrix.com>
	<201006182016.27673.bszabolcs@gmail.com>
Message-ID: <55975.63.107.91.99.1276881950.squirrel@webmail.zoteca.com>

> It sounds good, but if I don't call reactor.run() after connectSSL doesn't
> happens anything... If I call reactor.run() after connectSSL, it works
> properly...

There are two types of client connections:

1. Connections you open when you first run the program. Call these before
reactor.run() is called.

2. Connections that happen as result of events. Events are all dispatched
by the reactor, so e.g. gui click or data received over network connection
will result in functions being called by the reactor.  These functions can
also open new connections.

The key here is to distinguish between the order of the code in the text
file, and the order the code runs in. In the following example, the
connectTCP will happen *after* reactor.run():


# this will get called 10 seconds after reactor.run():
def happensLater():
    reactor.connectTCP(....)

reactor.callLater(10, happensLater)
reactor.run()





From bszabolcs at gmail.com  Fri Jun 18 11:55:49 2010
From: bszabolcs at gmail.com (Szabolcs Balogh)
Date: Fri, 18 Jun 2010 20:55:49 +0300
Subject: [Twisted-Python] Multiple clients
In-Reply-To: <55975.63.107.91.99.1276881950.squirrel@webmail.zoteca.com>
References: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>
	<201006182016.27673.bszabolcs@gmail.com>
	<55975.63.107.91.99.1276881950.squirrel@webmail.zoteca.com>
Message-ID: <201006182055.49458.bszabolcs@gmail.com>

On Friday 18 June 2010 20:25:50 Itamar Turner-Trauring wrote:
> > It sounds good, but if I don't call reactor.run() after connectSSL
> > doesn't happens anything... If I call reactor.run() after connectSSL, it
> > works properly...
> 
> There are two types of client connections:
> 
> 1. Connections you open when you first run the program. Call these before
> reactor.run() is called.
> 
> 2. Connections that happen as result of events. Events are all dispatched
> by the reactor, so e.g. gui click or data received over network connection
> will result in functions being called by the reactor.  These functions can
> also open new connections.
> 
> The key here is to distinguish between the order of the code in the text
> file, and the order the code runs in. In the following example, the
> connectTCP will happen *after* reactor.run():
> 
> 
> # this will get called 10 seconds after reactor.run():
> def happensLater():
>     reactor.connectTCP(....)
> 
> reactor.callLater(10, happensLater)
> reactor.run()
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

It is possible to:
 - start the reactor when I initialize my program (eg. in main)
 - call connectTCP or connectSSL when I want and every time I want?

Something like this:

def check_messages(account):
	# connect to imap server and check for new mailboxes/messages
	reactor.connectSSL(...)


if __name__ == "__main__":
	reactor.run()

	check_message(account1)
	check_message(account2)
	...
	do something else
	...
	check_message(accountn)


Because I can't implement this :}

I have started the implementation based on "Twisted Network Programming 
Essential", but this book doesn't treat multiple connections...



From grickert at coldstorage.com  Fri Jun 18 13:23:50 2010
From: grickert at coldstorage.com (Gerrat Rickert)
Date: Fri, 18 Jun 2010 15:23:50 -0400
Subject: [Twisted-Python] Multiple clients
In-Reply-To: <201006182055.49458.bszabolcs@gmail.com>
References: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com><201006182016.27673.bszabolcs@gmail.com><55975.63.107.91.99.1276881950.squirrel@webmail.zoteca.com>
	<201006182055.49458.bszabolcs@gmail.com>
Message-ID: <BB13E4C4D649234F84A01F6DF64BB87F05CACD03@ccs-ex01.coldstorage.com>

>It is possible to:
> - start the reactor when I initialize my program (eg. in main)
> - call connectTCP or connectSSL when I want and every time I want?
>
>Something like this:
>
>def check_messages(account):
>	# connect to imap server and check for new mailboxes/messages
>	reactor.connectSSL(...)
>
>
>if __name__ == "__main__":
>	reactor.run()
>
>	check_message(account1)
>	check_message(account2)
>	...
>	do something else
>	...
>	check_message(accountn)
>
>
>Because I can't implement this :}


Something like this (obviously won't work verbatim 
& may not be the best example, 
but hopefully will give you the idea):

def check_messages(account):
    # connect to imap server and check for new mailboxes/messages
    reactor.connectSSL(...)
    # should return a deferred!

def do_something_else():
    return defer.succeed(None)  # return a deferred here too

def something_failed(rslt):
  print rslt
  reactor.stop()

def call_my_stuff(accountList):

  # check messages asynchronously
  checks = [check_message(account) for account in accountList]

  dl = defer.DeferredList(checks)
  dl.addCallback(do_something_else) # wait until all messages checked to
run
  dl.addCallback(runner, accountList) # wait till we've done something
else
  dl.addErrback(something_failed) # ALWAYS attach errbacks

def runner(accountList):
  reactor.callLater(0.1, call_my_stuff, accountList)

if __name__ == "__main__":

    accountList = [account1, account2]
    reactor.callWhenRunning(runner, accountList)
    reactor.run()



From jasonjwwilliams at gmail.com  Fri Jun 18 14:58:22 2010
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Fri, 18 Jun 2010 14:58:22 -0600
Subject: [Twisted-Python] Multiple clients
In-Reply-To: <201006182055.49458.bszabolcs@gmail.com>
References: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>
	<201006182016.27673.bszabolcs@gmail.com>
	<55975.63.107.91.99.1276881950.squirrel@webmail.zoteca.com>
	<201006182055.49458.bszabolcs@gmail.com>
Message-ID: <AANLkTiko8RHTeDrhpK4LtcOTTNHcZ7icSgvWEtvic6SK@mail.gmail.com>

If you're not using twistd to launch your app you'll have to run
reactor.run(). Otherwise, the eventloop won't ever start.

In terms of exposing something like get_messages()...couldn't that
issue the callLater with a very tiny value? Or issue the first
connectTCP, which the others chained via addCallback?

-J

On Fri, Jun 18, 2010 at 11:55 AM, Szabolcs Balogh <bszabolcs at gmail.com> wrote:
> On Friday 18 June 2010 20:25:50 Itamar Turner-Trauring wrote:
>> > It sounds good, but if I don't call reactor.run() after connectSSL
>> > doesn't happens anything... If I call reactor.run() after connectSSL, it
>> > works properly...
>>
>> There are two types of client connections:
>>
>> 1. Connections you open when you first run the program. Call these before
>> reactor.run() is called.
>>
>> 2. Connections that happen as result of events. Events are all dispatched
>> by the reactor, so e.g. gui click or data received over network connection
>> will result in functions being called by the reactor.  These functions can
>> also open new connections.
>>
>> The key here is to distinguish between the order of the code in the text
>> file, and the order the code runs in. In the following example, the
>> connectTCP will happen *after* reactor.run():
>>
>>
>> # this will get called 10 seconds after reactor.run():
>> def happensLater():
>>     reactor.connectTCP(....)
>>
>> reactor.callLater(10, happensLater)
>> reactor.run()
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> It is possible to:
>  - start the reactor when I initialize my program (eg. in main)
>  - call connectTCP or connectSSL when I want and every time I want?
>
> Something like this:
>
> def check_messages(account):
>        # connect to imap server and check for new mailboxes/messages
>        reactor.connectSSL(...)
>
>
> if __name__ == "__main__":
>        reactor.run()
>
>        check_message(account1)
>        check_message(account2)
>        ...
>        do something else
>        ...
>        check_message(accountn)
>
>
> Because I can't implement this :}
>
> I have started the implementation based on "Twisted Network Programming
> Essential", but this book doesn't treat multiple connections...
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From kevin.horn at gmail.com  Fri Jun 18 16:24:10 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 18 Jun 2010 17:24:10 -0500
Subject: [Twisted-Python] Multiple clients
In-Reply-To: <201006182055.49458.bszabolcs@gmail.com>
References: <AANLkTimLMrQwyamCNpRmnKXMBhEcQApEe8v-ynD-8Zsg@mail.gmail.com>
	<201006182016.27673.bszabolcs@gmail.com>
	<55975.63.107.91.99.1276881950.squirrel@webmail.zoteca.com>
	<201006182055.49458.bszabolcs@gmail.com>
Message-ID: <AANLkTinsNetU9TDjghpZ5RtvEccXpZHBEaP-WtQis31P@mail.gmail.com>

On Fri, Jun 18, 2010 at 12:55 PM, Szabolcs Balogh <bszabolcs at gmail.com>wrote:

>
> It is possible to:
>  - start the reactor when I initialize my program (eg. in main)
>  - call connectTCP or connectSSL when I want and every time I want?
>
>
Yes, this is exactly what you are supposed to do.  Call the reactor _once_
and once only.

The call connectTCP or whatever whenever is appropriate for your program.


> Something like this:
>
> def check_messages(account):
>        # connect to imap server and check for new mailboxes/messages
>        reactor.connectSSL(...)
>
>
> if __name__ == "__main__":
>        reactor.run()
>
>        check_message(account1)
>        check_message(account2)
>        ...
>        do something else
>        ...
>        check_message(accountn)
>
>
> Because I can't implement this :}
>
> I have started the implementation based on "Twisted Network Programming
> Essential", but this book doesn't treat multiple connections...
>
>
The above won't work, because run() blocks.  So in your example here,
check_messages() won't be called until after the run() call returns, which
means the reactor won't be running, which means check_messages won't work.

look into callWhenRunning:
http://twistedmatrix.com/documents/10.0.0/api/twisted.internet.interfaces.IReactorCore.html#callWhenRunning

and do something like:

def start_checking():
    (do your check_messages stuff here)

if __name__ == '__main__':
    reactor.callWhenRunning(start_checking)

    reactor.run()

using callWhenRunning isn't necessary, but I find that it clarifies things
for me sometimes

reactor.run() is usually the _last_ thing I call in my Twisted programs,
unless I have some shutdown cleanup to do, and even that is usually better
done in the reactor shutdown hook
(see:
http://twistedmatrix.com/documents/10.0.0/api/twisted.internet.interfaces.IReactorCore.html#addSystemEventTrigger
)

you also need to figure out how to structure your program flow using
deferreds, which is not always easy, and depends greatly on your specific
application.

remember that deferreds are just a way of organizing callback functions

you can "chain" deferreds something like this (assuming your functions
return Deferreds):

d = check_first_one()
d.addCallback(check_second_one, ...)

etc...

which will make check_second_one start after check_first_one completes

You can also use a deferredList, which is often handy when you want to keep
track of several deferred operations which are operating simultaneously
(I haven't used one in a while, so I don't have a simple example off the top
of my head, but there's a simple example in the Twisted book)

Hope this helps,

Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100618/f9335a51/attachment.html>

From jasonjwwilliams at gmail.com  Fri Jun 18 22:23:29 2010
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Fri, 18 Jun 2010 22:23:29 -0600
Subject: [Twisted-Python] Twisted Names too many open files...resolv.conf
In-Reply-To: <20100618014154.2412.1216951132.divmod.xquotient.93@localhost.localdomain>
References: <AANLkTilqAawa_hCxYcr3HgHaJJ9uApygHnd8dsbgGFQo@mail.gmail.com>
	<20100618014154.2412.1216951132.divmod.xquotient.93@localhost.localdomain>
Message-ID: <AANLkTinZYOTjun6IUfkhngRaaypsSu-9xTj1SX3X9Ucj@mail.gmail.com>

Hi Jean-Paul,

As usual you're very right on more than one front:

1.) Using Resolver() directly is exactly the behavior we wanted.
2.) Running out of file descriptors was not because of the resolv.conf.

#2 was because this box had an ancient version of Twisted (2.5.0) that
never stopped the Resolvers we were instantiating. I noticed it
because trying to call resolver.factory.doStop() did nothing.

Upgrading to Twisted 10.0.0 on the box fixed it, and the used FD count
is down from ~1000 to hovering around 50.

Thank you for your help.

-J

On Thu, Jun 17, 2010 at 7:41 PM,  <exarkun at twistedmatrix.com> wrote:
> On 12:36 am, jasonjwwilliams at gmail.com wrote:
>>Hi Guys,
>>
>>Is there anyway to prevent twisted.names.client.createResolver() from
>>creating a resolvconf resolver, when servers= is passed?
>>
>>The use here doesn't need the resolv.conf resolvers (and actually
>>really doesn't want them). What appears to be occurring is that
>>repeated use of createResolver() exhausts the number of allowed open
>>files because resolv.conf is never closed:
>>
>>exceptions.IOError: [Errno 24] Too many open files: '/etc/resolv.conf'
>
> This doesn't mean resolv.conf is never closed.  It just means you've
> already run into your open file limit when something tried to open
> resolv.conf.
>
> You didn't mention which version of Twisted you're using.  Perhaps
> you're running in to #970 (fixed in 10.0).
>
> But if you just want to use a particular server, then maybe you want to
> instantiate twisted.names.client.Resolver directly, rather than calling
> createResolver.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From hatem.oraby at gmail.com  Sat Jun 19 05:07:04 2010
From: hatem.oraby at gmail.com (Hatem Oraby)
Date: Sat, 19 Jun 2010 14:07:04 +0300
Subject: [Twisted-Python] Announcing TwistedSim: A simulator for your
	Twisted application
In-Reply-To: <5FA7DC4B-059B-4891-AB7B-2187FBF66A3C@twistedmatrix.com>
References: <AANLkTimiGspKUiIfDf12ht_bJPcW6uQV9Z5aSEVeystR@mail.gmail.com>
	<5FA7DC4B-059B-4891-AB7B-2187FBF66A3C@twistedmatrix.com>
Message-ID: <AANLkTik-dqXiI-alP_x3DWcOo61DP99m1ERio9p4Gpyg@mail.gmail.com>

On Thu, Jun 17, 2010 at 2:08 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>wrote:

> On Jun 15, 2010, at 9:56 PM, Hatem Oraby wrote:
>
> I'd like to share with you a project that I've been working on: TwistedSim
> is a simulator/emulator that loads your Twisted applications and run then
> under a simulated network.TwistedSim could save you a lot of developing time
> and debugging time, TwistedSim offers you efficient and reproducible testing
> environment.
> Please check the project at http://code.google.com/p/twistedsim/
>
> Your feedback and comments are highly appreciated. I would like to hear
> from you.
>
>
> Hi Oraby,
>
> Thanks for providing a link to this!  I'll be sure to check it out later.
>
> In the past, projects that begin with the name 'twisted <something>' have
> occasionally confused users, though, as the projects inside Twisted itself
> are called 'twisted <something>'.  A while ago, we started promoting the
> prefix 'tx' (see <https://launchpad.net/tx>) to mean "twisted extension",
> i.e. "this works with twisted, gets along well with Twisted", sort of like
> "py" is for "python".
>
> I'm not a lawyer, but my vague understanding is that if you honor this
> request, it will make things easier for the Twisted project to secure
> trademark rights later on.  So, I hope that you will consider re-naming
> "twistedsim" to something else (might I suggest "txnetsim"?) so that it's
> easier for users to keep this straight.
>
> Thanks again,
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
Thank you for advice and suggestion Gylph, The point is that twistedSim in
not restricted only to Twisted Framework (I.e. It can run with any
event-based network application), Its true that TwistedSim give a special
attention to Twisted (and thats where the current name came from), however
renaming it to start with tx would be unfair as this will mean that it
simulates only Twisted Framework.
I respect your intentions about adapting to standards and not to confuse
users, I will change in hopefully in the next major update the name to
something other than TwistedSim but it will probably something new that
doesn't restrict it as a Twisted extension (i.e. won't start with tx).


Regards,
Oraby
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100619/c3b3fd3c/attachment.html>

From jml at mumak.net  Sat Jun 19 06:35:18 2010
From: jml at mumak.net (Jonathan Lange)
Date: Sat, 19 Jun 2010 13:35:18 +0100
Subject: [Twisted-Python] Twisted 10.1.0pre1 released -- please test!
Message-ID: <AANLkTikyD30DQ3WJ83_bBGcbfkaknLMf3E3DlSjP04Ui@mail.gmail.com>

>From the dank and grey depths of a London summer, a thin, reedy voice
wanders across the waves of the Internet, saying that it's jolly well
pleased to announce the first 10.1.0 pre-release.

Tarballs for Twisted 10.1.0pre1 are now available at:
 http://people.canonical.com/~jml/Twisted/10.1.0pre1/

Highlights include:

 * Deferreds now support cancellation

 * A new "endpoint" interface which can abstractly describe stream
transport endpoints such as TCP and SSL

 * inotify support for Linux, which allows monitoring of file system events.

 * AMP supports transferring timestamps

For more information, see the NEWS file.

Please download the tarballs and test them as much as possible.

Thanks,
jml



From exarkun at twistedmatrix.com  Sat Jun 19 07:08:45 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 19 Jun 2010 13:08:45 -0000
Subject: [Twisted-Python] Review process, news fragments
Message-ID: <20100619130845.2412.1686806029.divmod.xquotient.159@localhost.localdomain>

Hello Twisted developers,

Please take a few minutes to refresh your memory of the contents of 
<http://twistedmatrix.com/trac/wiki/ReviewProcess>.

In particular, I'd like to draw everyone's attention to the requirements 
for news fragments.  Since we introduced this part of the workflow, the 
review requirements for these has been a little unclear.  Many reviewers 
haven't required that the news fragment be reviewed (that is, if it was 
missing, they would say "Please add a news fragment and then merge.") or 
haven't kept the guidelines these files in mind when reviewing them.

I'd like for this to change.  Informative, consistently written news 
fragments result better information being available to users when we do 
a release.  This is a very simple part the development process but 
effort here has a disproportionately large effect on the perception of 
Twisted.

If the guidelines for news fragment content on the review process wiki 
page are unclear or insufficient, please complain and we can work on 
improving the weaknesses.

Thanks, and congratulations to everyone on the (now inevitable :) 10.1 
release.
Jean-Paul



From screwtape at froup.com  Sat Jun 19 08:09:24 2010
From: screwtape at froup.com (Tim Allen)
Date: Sun, 20 Jun 2010 00:09:24 +1000
Subject: [Twisted-Python] Twisted 10.1.0pre1 released -- please test!
In-Reply-To: <AANLkTikyD30DQ3WJ83_bBGcbfkaknLMf3E3DlSjP04Ui@mail.gmail.com>
References: <AANLkTikyD30DQ3WJ83_bBGcbfkaknLMf3E3DlSjP04Ui@mail.gmail.com>
Message-ID: <20100619140924.GF16516@boombah.thristian.org>

On Sat, Jun 19, 2010 at 01:35:18PM +0100, Jonathan Lange wrote:
> From the dank and grey depths of a London summer, a thin, reedy voice
> wanders across the waves of the Internet, saying that it's jolly well
> pleased to announce the first 10.1.0 pre-release.

I'm a bit sad my ticket #4138 wasn't reviewed in time for 10.1.0, but oh
well - presumably there'll be another release before 2010 is over. :)

Congratulations, one and all!



From kevin.horn at gmail.com  Sat Jun 19 12:05:25 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Sat, 19 Jun 2010 13:05:25 -0500
Subject: [Twisted-Python] Review process, news fragments
In-Reply-To: <20100619130845.2412.1686806029.divmod.xquotient.159@localhost.localdomain>
References: <20100619130845.2412.1686806029.divmod.xquotient.159@localhost.localdomain>
Message-ID: <AANLkTikmhfQZPWtz8oKS13PQSu5sc-X3n8uow6FG9kli@mail.gmail.com>

+1

On Sat, Jun 19, 2010 at 8:08 AM, <exarkun at twistedmatrix.com> wrote:

> Hello Twisted developers,
>
> Please take a few minutes to refresh your memory of the contents of
> <http://twistedmatrix.com/trac/wiki/ReviewProcess>.
>
> In particular, I'd like to draw everyone's attention to the requirements
> for news fragments.  Since we introduced this part of the workflow, the
> review requirements for these has been a little unclear.  Many reviewers
> haven't required that the news fragment be reviewed (that is, if it was
> missing, they would say "Please add a news fragment and then merge.") or
> haven't kept the guidelines these files in mind when reviewing them.
>
> I'd like for this to change.  Informative, consistently written news
> fragments result better information being available to users when we do
> a release.  This is a very simple part the development process but
> effort here has a disproportionately large effect on the perception of
> Twisted.
>
> If the guidelines for news fragment content on the review process wiki
> page are unclear or insufficient, please complain and we can work on
> improving the weaknesses.
>
> Thanks, and congratulations to everyone on the (now inevitable :) 10.1
> release.
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100619/08d61bc4/attachment.html>

From glyph at twistedmatrix.com  Sat Jun 19 18:41:26 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 19 Jun 2010 17:41:26 -0700
Subject: [Twisted-Python] Announcing TwistedSim: A simulator for your
	Twisted application
In-Reply-To: <AANLkTik-dqXiI-alP_x3DWcOo61DP99m1ERio9p4Gpyg@mail.gmail.com>
References: <AANLkTimiGspKUiIfDf12ht_bJPcW6uQV9Z5aSEVeystR@mail.gmail.com>
	<5FA7DC4B-059B-4891-AB7B-2187FBF66A3C@twistedmatrix.com>
	<AANLkTik-dqXiI-alP_x3DWcOo61DP99m1ERio9p4Gpyg@mail.gmail.com>
Message-ID: <078C28B9-404D-4270-BA10-7914B35411E0@twistedmatrix.com>


On Jun 19, 2010, at 4:07 AM, Hatem Oraby wrote:

> Thank you for advice and suggestion Gylph, The point is that twistedSim in not restricted only to Twisted Framework (I.e. It can run with any event-based network application), Its true that TwistedSim give a special attention to Twisted (and thats where the current name came from), however renaming it to start with tx would be unfair as this will mean that it simulates only Twisted Framework. 

That sounds good to me.  I believe I saw some chatter about this in the #twisted channel on Freenode.  While I think some of the implementation decisions are ... somewhat questionable, I think it's valuable to have a network simulator for applications that don't use the Twisted APIs too :).

> I respect your intentions about adapting to standards and not to confuse users, I will change in hopefully in the next major update the name to something other than TwistedSim but it will probably something new that doesn't restrict it as a Twisted extension (i.e. won't start with tx). 

Your consideration is much appreciated.  I look forward to hearing the new name.




From cy.li at xemaps.com  Sat Jun 19 19:05:41 2010
From: cy.li at xemaps.com (Ying Li)
Date: Sat, 19 Jun 2010 18:05:41 -0700
Subject: [Twisted-Python] Reassigned tickets
Message-ID: <AANLkTik7WGMMdgpZVYvm8uTmGSGMX888kwBcBnezvM-e@mail.gmail.com>

Hi there,

I notice that several tickets have been reassigned to me in the last
few days, without comment or explanation.  While confused for a bit at
first, I eventually figured that since I've been trying to resolve
some of the easier deprecation tickets, someone has probably decided
to assign some other deprecation tickets to me.

However, I have also gotten a couple of tickets I do not know what to
do with - for instance, http://twistedmatrix.com/trac/ticket/4162,
which has a different author and is awaiting a response to review
feedback.

I also do not know what to do with a ticket such as like
http://twistedmatrix.com/trac/ticket/2661.   It has a simple summary
and description, but also a comment about the nuances of method naming
and possibly API consistency, which I as a new contributor I feel that
I lack the experience and authority to weigh in on.

I do not mind having tickets assigned to me, but an explanation or
simple comment would have been nice, especially if the ticket already
has an author.

I'd also like to have some consensus or documentation about what to do
with tickets (assigned to me or no) with comments I do not know how to
interpret - should I be implementing the change as described in the
comment, if I do not recognize the commenter as a core developer?
What if there are several comments with disagreements as to how best
to resolve the issue?

Perhaps these tickets should be put into a separate queue or have a
keyword assigned to them to signal their limbo state?

Thanks!
-Ying



From itamar at itamarst.org  Sat Jun 19 20:35:47 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sat, 19 Jun 2010 22:35:47 -0400
Subject: [Twisted-Python] Reassigned tickets
In-Reply-To: <AANLkTik7WGMMdgpZVYvm8uTmGSGMX888kwBcBnezvM-e@mail.gmail.com>
References: <AANLkTik7WGMMdgpZVYvm8uTmGSGMX888kwBcBnezvM-e@mail.gmail.com>
Message-ID: <1277001347.1583.12.camel@blake>

On Sat, 2010-06-19 at 18:05 -0700, Ying Li wrote:

> I'd also like to have some consensus or documentation about what to do
> with tickets (assigned to me or no) with comments I do not know how to
> interpret - should I be implementing the change as described in the
> comment, if I do not recognize the commenter as a core developer?

If it's an obvious bug, it's worth fixing - but I guess you're asking
about cases that are matters of judgement, or just confusing (e.g. for
2661 I've no idea offhand what IFinishableConsumer is and who implements
it). In which case, probably not worth doing work - you don't want to
end up wasting time on work that has to be redone.

> What if there are several comments with disagreements as to how best
> to resolve the issue?

If you feel qualified, make a decision. If you don't, pick someone you
think is and ask them to comment.

> Perhaps these tickets should be put into a separate queue or have a
> keyword assigned to them to signal their limbo state?

Or perhaps another state in our workflow process; all tickets would
start in this state. The state machine would be something like:

discussion -> decided -> coding -> awaiting review -> approved -> closed
                            ^             |
                            |_____________|


You could then know not to start coding on anything still in discussion
state that where you feel someone should make decision. "Decided" state
would imply (1) the issue ought to be fixed and (2) the solution has
been decided on.






From itamar at itamarst.org  Sat Jun 19 20:51:14 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sat, 19 Jun 2010 22:51:14 -0400
Subject: [Twisted-Python] Reassigned tickets
In-Reply-To: <1277001347.1583.12.camel@blake>
References: <AANLkTik7WGMMdgpZVYvm8uTmGSGMX888kwBcBnezvM-e@mail.gmail.com>
	<1277001347.1583.12.camel@blake>
Message-ID: <1277002274.1583.17.camel@blake>

On Sat, 2010-06-19 at 22:35 -0400, Itamar Turner-Trauring wrote:

> You could then know not to start coding on anything still in discussion
> state that where you feel someone should make decision.

Or in actual English: You would then know not to start coding on
anything still in discussion state, in those cases where you felt
someone else ought to decide how to resolve the reported issue.





From exarkun at twistedmatrix.com  Sat Jun 19 22:05:21 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 20 Jun 2010 04:05:21 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1277006721.34.1699517513@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100620/20bb90ba/attachment.html>

From glyph at twistedmatrix.com  Sun Jun 20 04:32:40 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 20 Jun 2010 06:32:40 -0400
Subject: [Twisted-Python] Review process, news fragments
In-Reply-To: <20100619130845.2412.1686806029.divmod.xquotient.159@localhost.localdomain>
References: <20100619130845.2412.1686806029.divmod.xquotient.159@localhost.localdomain>
Message-ID: <7F2D9964-8F4D-4074-A36E-BA00F56D7B07@twistedmatrix.com>

On Jun 19, 2010, at 6:08 AM, exarkun at twistedmatrix.com wrote:

> In particular, I'd like to draw everyone's attention to the requirements 
> for news fragments.  Since we introduced this part of the workflow, the 
> review requirements for these has been a little unclear.  Many reviewers 
> haven't required that the news fragment be reviewed (that is, if it was 
> missing, they would say "Please add a news fragment and then merge.") or 
> haven't kept the guidelines these files in mind when reviewing them.

Can you point to some specific examples in the current release, and note what they should have been?

> I'd like for this to change.  Informative, consistently written news 
> fragments result better information being available to users when we do 
> a release.  This is a very simple part the development process but 
> effort here has a disproportionately large effect on the perception of 
> Twisted.

Generally speaking, I agree.  But I think we need to nail down a very specific proposal if this is to improve.  What should reviewers be looking for in a good news fragment?  What are pitfalls to avoid?  Asking reviewers to look at something that isn't clearly spelled out may just result in more churn in reviews; I'd hate to see an extra round trip on a ticket because of an oxford comma placement in the news fragment.

> If the guidelines for news fragment content on the review process wiki 
> page are unclear or insufficient, please complain and we can work on 
> improving the weaknesses.

There's very little in the way of stylistic guidance on this page.

For one thing, I suspect there were a lot of fixes which could have been a '.misc' but were instead a '.feature' or '.bugfix'.  We need some better guidelines for what exactly constitutes a change that is interesting to users.

It advises that a single sentence be written about a change to an FQPN.  This is hard to do well for new features.  For example, "twisted.internet.endpoints now ... exists" doesn't really scan, and doesn't really emphasize the importance of the feature relative to some of the other small fixes which have been added.  I feel like I probably wrote too much of a dissertation in 1442.feature and not enough of a description in 990.feature, but I don't know what would have been better.  If you know something should be a highlight, how should that be indicated?  Should the highlight text be different from the news fragment text?

For complicated bugfixes it's also sometimes awkward, because it's hard to briefly describe a subtle, but still potentially important change in behavior.

A list of 10 examples of "good" feature descriptions and "good" bugfix descriptions would go a long way towards improving this.

Thanks for raising the issue though.  I would also like to see a more coherent NEWS file for 10.2 :).

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100620/5b89dc61/attachment-0001.html>

From exarkun at twistedmatrix.com  Sun Jun 20 16:26:37 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 20 Jun 2010 22:26:37 -0000
Subject: [Twisted-Python] Review process, news fragments
In-Reply-To: <7F2D9964-8F4D-4074-A36E-BA00F56D7B07@twistedmatrix.com>
References: <20100619130845.2412.1686806029.divmod.xquotient.159@localhost.localdomain>
	<7F2D9964-8F4D-4074-A36E-BA00F56D7B07@twistedmatrix.com>
Message-ID: <20100620222637.2412.1463970295.divmod.xquotient.310@localhost.localdomain>

On 10:32 am, glyph at twistedmatrix.com wrote:
>On Jun 19, 2010, at 6:08 AM, exarkun at twistedmatrix.com wrote:
>>In particular, I'd like to draw everyone's attention to the 
>>requirements
>>for news fragments.  Since we introduced this part of the workflow, 
>>the
>>review requirements for these has been a little unclear.  Many 
>>reviewers
>>haven't required that the news fragment be reviewed (that is, if it 
>>was
>>missing, they would say "Please add a news fragment and then merge.") 
>>or
>>haven't kept the guidelines these files in mind when reviewing them.
>
>Can you point to some specific examples in the current release, and 
>note what they should have been?

Sure.  Just going in order that they happened to appear in the news 
file...

This one is too long.

- Added new "endpoint" interfaces in twisted.internet.interfaces,
   which abstractly describe stream transport endpoints which can be
   listened on or connected to.  Implementations for TCP and SSL
   clients and servers are present in twisted.internet.endpoints.
   Notably, client endpoints' connect() methods return cancellable
   Deferreds, so code written to use them can bypass the awkward
   "ClientFactory.clientConnectionFailed" and
   "Connector.stopConnecting" methods, and handle errbacks from or
   cancel the returned deferred, respectively. (#1442)

I would have said something like:

  - A high-level client and server setup API, "endpoints", has been
    introduced which provides many benefits over using reactor.connect*
    and reactor.listen* methods directly.

Alternatively, just the first two sentences of the original news 
fragment stand fairly well on their own, and I probably wouldn't have 
complained if the last sentence had been omitted.

Here's one that's complete nonsense.

- Substrings are escaped before being passed to a regular expression
   for searching to ensure that they don't get interpreted as part of
   the expression. (#1893)

The author clearly wasn't expecting this to be read outside the context 
of the specific ticket being resolved, but news fragments must be 
coherent on their own.  This turns out to be a fix for Twisted Web's 
rendering of Failures that include frames including generator 
expressions.

The parenthetical in this one seems to add little.

- Removed twisted.application.app.ApplicationRunner.startLogging,
   which has been deprecated (doesn't say since when), as well as
   support for the legacy
   twisted.application.app.ApplicationRunner.getLogObserver method.
   (#4092)

Omitting it entirely would have conveyed the same amount of information. 
:)

For the deprecations/removals section in particular, we definitely need 
some more guidelines about what information to include and how to 
construct the message.  There are a few styles represented in the 
entries for this release.  Some include information about when the 
removed API was first deprecated, but some do it by version number and 
some do it by date.  Others omit the information entirely.  We also 
switch at random between "was" and "has been".  And some deprecation 
messages point at a replacement API, and some don't.

Obviously this is English prose we're talking about here, and there's a 
lot of room for variation.  I don't want to impose a *strict* style 
guide here.  I do want the fragments to all aim for roughly the same 
level of detail, and they should all at least make sense to a reader who 
hasn't looked at the history of the relevant ticket.  And where it makes 
sense, I'd like the presentation of the information (like the age of the 
deprecation on an API being removed or changed) to be uniform.
>
>>I'd like for this to change.  Informative, consistently written news
>>fragments result better information being available to users when we 
>>do
>>a release.  This is a very simple part the development process but
>>effort here has a disproportionately large effect on the perception of
>>Twisted.
>
>Generally speaking, I agree.  But I think we need to nail down a very 
>specific proposal if this is to improve.  What should reviewers be 
>looking for in a good news fragment?  What are pitfalls to avoid? 
>Asking reviewers to look at something that isn't clearly spelled out 
>may just result in more churn in reviews; I'd hate to see an extra 
>round trip on a ticket because of an oxford comma placement in the news 
>fragment.

True.  Although man, what kind of a jerk would leave out the oxford 
comma (or worse, ask for one to be removed!) in a news fragment? 
Sheesh.  I think we're all a little bit beyond that.
>
>>If the guidelines for news fragment content on the review process wiki
>>page are unclear or insufficient, please complain and we can work on
>>improving the weaknesses.
>
>There's very little in the way of stylistic guidance on this page.
>
>For one thing, I suspect there were a lot of fixes which could have 
>been a '.misc' but were instead a '.feature' or '.bugfix'.  We need 
>some better guidelines for what exactly constitutes a change that is 
>interesting to users.

I have little hope of this.  I think we could update the page to say *at 
all* that only changes interesting to end-users reading the release 
announcement should be summarized.  ReviewProcess#Newsfiles implies 
this, but doesn't explicitly state it.
>
>It advises that a single sentence be written about a change to an FQPN. 
>This is hard to do well for new features.  For example, 
>"twisted.internet.endpoints now ... exists" doesn't really scan, and 
>doesn't really emphasize the importance of the feature relative to some 
>of the other small fixes which have been added.  I feel like I probably 
>wrote too much of a dissertation in 1442.feature and not enough of a 
>description in 990.feature, but I don't know what would have been 
>better.  If you know something should be a highlight, how should that 
>be indicated?  Should the highlight text be different from the news 
>fragment text?

Why did you want to include non-"highlight" text in the news fragment? 
Just leave it out entirely.  The news fragment is the highlight.  Or am 
I missing the point?

For the earlier point, I agree that the guide doesn't fit all types of 
changes well.  We should allow for a few different forms, and present 
more examples.
>
>For complicated bugfixes it's also sometimes awkward, because it's hard 
>to briefly describe a subtle, but still potentially important change in 
>behavior.
>
>A list of 10 examples of "good" feature descriptions and "good" bugfix 
>descriptions would go a long way towards improving this.
>
>Thanks for raising the issue though.  I would also like to see a more 
>coherent NEWS file for 10.2 :).

Jean-Paul



From mike at mv3d.com  Sun Jun 20 20:40:37 2010
From: mike at mv3d.com (Michael Handverger)
Date: Sun, 20 Jun 2010 22:40:37 -0400 (EDT)
Subject: [Twisted-Python] ANN: MV3D version 0.42 released
Message-ID: <6799046.47491277088037190.JavaMail.root@verity.int.mv3d.com>

I’m pleased to announce the release of MV3D version 0.42. In this version, the core systems were made ready for tool building and content creation. This included a redesigned datastore and a cross system GUI layout.

MV3D is an open source virtual world simulation framework written in Python which uses Twisted for networking. It was designed with scalability in mind and aims to be able to distribute a world across as many servers as needed with dynamic load balancing. The simulation framework is not specifically slanted towards any one genre of online game, and can just as easily be used for a space game as a fantasy setting. On the client, Python-Ogre is used for rendering.

More info on MV3D including source code and Windows client binaries is available at http://www.mv3d.com. MV3D is released under the MIT license.

Enjoy,

Mike



From albert.brandl at weiermayer.com  Mon Jun 21 00:50:09 2010
From: albert.brandl at weiermayer.com (Albert Brandl)
Date: Mon, 21 Jun 2010 08:50:09 +0200
Subject: [Twisted-Python] Start with QTReactor
In-Reply-To: <AANLkTikYToax1RYNBORENvW7VHdxXi3ZQWWn1-KAWfdS@mail.gmail.com>
References: <AANLkTikYToax1RYNBORENvW7VHdxXi3ZQWWn1-KAWfdS@mail.gmail.com>
Message-ID: <20100621065009.GA4027@weiermayer.com>

Hi!

On Thu, Jun 17, 2010 at 11:33:52AM -0300, Bruno Frare wrote:
>    Hi,
>    I'm trying to work with QTReactor, but don't have success!
>    I look on site http://code.tarbox.org/qtreactor, but the link is
>    broken.
>    Someone have a tutorial to begin to work with it?

The link on http://code.tarbox.org leads to

https://launchpad.net/qt4reactor

You can find some small example applications in the source under

http://bazaar.launchpad.net/~ghtdak/qt4reactor/trunk/files/head:/ghtTests/

I haven't worked with QTReactor myself, so I don't know how helpful they
are ;-).
-- 

Regards

Albert Brandl

Weiermayer Solutions GmbH
Abteistraße 12
A-4813 Altmünster
phone: +43 (0) 720 70 30 14
fax: +43 (0) 7612 20 3 56
web: http://www.weiermayer.com 



From jml at mumak.net  Mon Jun 21 05:15:02 2010
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 21 Jun 2010 12:15:02 +0100
Subject: [Twisted-Python] Twisted 10.1.0pre1 released -- please test!
In-Reply-To: <20100619140924.GF16516@boombah.thristian.org>
References: <AANLkTikyD30DQ3WJ83_bBGcbfkaknLMf3E3DlSjP04Ui@mail.gmail.com>
	<20100619140924.GF16516@boombah.thristian.org>
Message-ID: <AANLkTikZhotIG0_6AHvR3HxU5rD_m7CO9J-MsV0pzBBx@mail.gmail.com>

On Sat, Jun 19, 2010 at 3:09 PM, Tim Allen <screwtape at froup.com> wrote:
> On Sat, Jun 19, 2010 at 01:35:18PM +0100, Jonathan Lange wrote:
>> From the dank and grey depths of a London summer, a thin, reedy voice
>> wanders across the waves of the Internet, saying that it's jolly well
>> pleased to announce the first 10.1.0 pre-release.
>
> I'm a bit sad my ticket #4138 wasn't reviewed in time for 10.1.0, but oh
> well - presumably there'll be another release before 2010 is over. :)
>

Me too. However, being ruthless about time-based releases means that
there'll be another release before you know it.

> Congratulations, one and all!
>

Thanks,
jml



From foom at fuhm.net  Mon Jun 21 08:12:02 2010
From: foom at fuhm.net (James Y Knight)
Date: Mon, 21 Jun 2010 10:12:02 -0400
Subject: [Twisted-Python] Review process, news fragments
In-Reply-To: <20100620222637.2412.1463970295.divmod.xquotient.310@localhost.localdomain>
References: <20100619130845.2412.1686806029.divmod.xquotient.159@localhost.localdomain>
	<7F2D9964-8F4D-4074-A36E-BA00F56D7B07@twistedmatrix.com>
	<20100620222637.2412.1463970295.divmod.xquotient.310@localhost.localdomain>
Message-ID: <5B90F9AD-9FE4-4B88-88BD-BA192F253183@fuhm.net>

On Jun 20, 2010, at 6:26 PM, exarkun at twistedmatrix.com wrote:
> Obviously this is English prose we're talking about here, and  
> there's a
> lot of room for variation.  I don't want to impose a *strict* style
> guide here.  I do want the fragments to all aim for roughly the same
> level of detail, and they should all at least make sense to a reader  
> who
> hasn't looked at the history of the relevant ticket.  And where it  
> makes
> sense, I'd like the presentation of the information (like the age of  
> the
> deprecation on an API being removed or changed) to be uniform.

I think the only real way to ensure this is to have a human edit the  
information after it's concatenated together, before release. Having  
pre-written news fragments from all the authors of the changes makes  
that task a lot easier, but I think you really need to see everything  
together in one file and have a single person apply some editorial  
judgement to the result to have it come out well.

James



From jml at mumak.net  Mon Jun 21 08:44:37 2010
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 21 Jun 2010 15:44:37 +0100
Subject: [Twisted-Python] Review process, news fragments
In-Reply-To: <5B90F9AD-9FE4-4B88-88BD-BA192F253183@fuhm.net>
References: <20100619130845.2412.1686806029.divmod.xquotient.159@localhost.localdomain>
	<7F2D9964-8F4D-4074-A36E-BA00F56D7B07@twistedmatrix.com>
	<20100620222637.2412.1463970295.divmod.xquotient.310@localhost.localdomain>
	<5B90F9AD-9FE4-4B88-88BD-BA192F253183@fuhm.net>
Message-ID: <AANLkTilq62m7LcvHHSN-l0XwD2VGn4cN1NsaYC9SuF2Z@mail.gmail.com>

On Mon, Jun 21, 2010 at 3:12 PM, James Y Knight <foom at fuhm.net> wrote:
...
> I think the only real way to ensure this is to have a human edit the
> information after it's concatenated together, before release. Having
> pre-written news fragments from all the authors of the changes makes
> that task a lot easier, but I think you really need to see everything
> together in one file and have a single person apply some editorial
> judgement to the result to have it come out well.
>

You may be right. We should be very reluctant to add steps to the
release process though.

jml



From zooko at zooko.com  Mon Jun 21 11:45:12 2010
From: zooko at zooko.com (Zooko O'Whielacronx)
Date: Mon, 21 Jun 2010 10:45:12 -0700
Subject: [Twisted-Python] ANNOUNCING Tahoe, the Least-Authority File System,
	v1.7.0
Message-ID: <AANLkTilxV-15WiSOcey_TfevBP7LWGFdCDmOCojlxL7g@mail.gmail.com>

Dear people of twisted-python:

We just released Tahoe-LAFS v1.7. The major new feature is an SFTP
server. This means that (with enough installing software and tinkering
with your operating system configuration) you can have a
normal-looking mount point backed by a Tahoe-LAFS grid.

Regards,

Zooko

ANNOUNCING Tahoe, the Least-Authority File System, v1.7.0

The Tahoe-LAFS team is pleased to announce the immediate
availability of version 1.7.0 of Tahoe-LAFS, an extremely
reliable distributed storage system.

Tahoe-LAFS is the first distributed storage system which offers
"provider-independent security"—meaning that not even the
operator of your storage server can read or alter your data
without your consent. Here is the one-page explanation of its
unique security and fault-tolerance properties:

http://tahoe-lafs.org/source/tahoe/trunk/docs/about.html

Tahoe-LAFS v1.7.0 is the successor to v1.6.1, which was released
February 27, 2010 [1].

v1.7.0 is a major new release with new features and bugfixes. It
adds a fully functional SFTP interface, support for non-ASCII character
encodings, and a new upload algorithm which guarantees that each file
is spread over multiple servers for fault-tolerance. See the NEWS file
[2] for details.


WHAT IS IT GOOD FOR?

With Tahoe-LAFS, you distribute your filesystem across multiple
servers, and even if some of the servers are compromised by
by an attacker, the entire filesystem continues to work
correctly, and continues to preserve your privacy and
security. You can easily share specific files and directories
with other people.

In addition to the core storage system itself, volunteers have
built other projects on top of Tahoe-LAFS and have integrated
Tahoe-LAFS with existing systems.

These include frontends for Windows, Macintosh, JavaScript,
iPhone, and Android, and plugins for Hadoop, bzr, mercurial,
duplicity, TiddlyWiki, and more. See the Related Projects page
on the wiki [3].

We believe that strong cryptography, Free and Open Source
Software, erasure coding, and principled engineering practices
make Tahoe-LAFS safer than RAID, removable drive, tape,
on-line backup or "cloud storage" systems.

This software is developed under test-driven development, and
there are no known bugs or security flaws which would
compromise confidentiality or data integrity under recommended
use. (For all currently known issues please see the
known_issues.txt file [4].)


COMPATIBILITY

This release is fully compatible with the version 1 series of
Tahoe-LAFS. Clients from this release can write files and
directories in the format used by clients of all versions back
to v1.0 (which was released March 25, 2008). Clients from this
release can read files and directories produced by clients of
all versions since v1.0. Servers from this release can serve
clients of all versions back to v1.0 and clients from this
release can use servers of all versions back to v1.0.

This is the ninth release in the version 1 series. This series
of Tahoe-LAFS will be actively supported and maintained for
the forseeable future, and future versions of Tahoe-LAFS will
retain the ability to read and write files compatible with
Tahoe-LAFS v1.


LICENCE

You may use this package under the GNU General Public License,
version 2 or, at your option, any later version. See the file
"COPYING.GPL" [5] for the terms of the GNU General Public
License, version 2.

You may use this package under the Transitive Grace Period
Public Licence, version 1 or, at your option, any later
version. (The Transitive Grace Period Public Licence has
requirements similar to the GPL except that it allows you to
wait for up to twelve months after you redistribute a derived
work before releasing the source code of your derived work.)
See the file "COPYING.TGPPL.html" [6] for the terms of the
Transitive Grace Period Public Licence, version 1.

(You may choose to use this package under the terms of either
licence, at your option.)


INSTALLATION

Tahoe-LAFS works on Linux, Mac OS X, Windows, Cygwin, Solaris,
*BSD, and probably most other systems. Start with
"docs/quickstart.html" [7].


HACKING AND COMMUNITY

Please join us on the mailing list [8]. Patches are gratefully
accepted -- the RoadMap page [9] shows the next improvements
that we plan to make and CREDITS [10] lists the names of people
who've contributed to the project. The Dev page [11] contains
resources for hackers.


SPONSORSHIP

Tahoe-LAFS was originally developed by Allmydata, Inc., a
provider of commercial backup services. After discontinuing
funding of Tahoe-LAFS R&D in early 2009, they have continued
to provide servers, bandwidth, small personal gifts as tokens
of appreciation, and bug reports. Thank you to Allmydata,
Inc. for their generous and public-spirited support.

Google, Inc. is sponsoring Tahoe-LAFS development as part of
the Google Summer of Code 2010. Google suggested that we
should apply for the Summer of Code program, and when we did
they generously awarded four sponsorships to students from
around the world to hack on Tahoe-LAFS this summer. Thank you
to Google, Inc. for their generous and public-spirited
support.


HACK TAHOE-LAFS!

If you can find a security flaw in Tahoe-LAFS which is serious
enough that feel compelled to warn our users and issue a fix,
then we will award you with a customized t-shirts with your
exploit printed on it and add you to the "Hack Tahoe-LAFS Hall
Of Fame" [12].


ACKNOWLEDGEMENTS

This is the fifth release of Tahoe-LAFS to be created solely
as a labor of love by volunteers. Thank you very much to the
team of "hackers in the public interest" who make Tahoe-LAFS
possible. In this release we especially owe thanks to
David-Sarah Hopwood, who has dedicated many late nights to the
project and displayed superb software engineering skills.

Zooko Wilcox-O'Hearn
on behalf of the Tahoe-LAFS team

June 18, 2010
Boulder, Colorado, USA

[1] http://tahoe-lafs.org/trac/tahoe/browser/relnotes.txt?rev=4244
[2] http://tahoe-lafs.org/trac/tahoe/browser/NEWS?rev=4254
[3] http://tahoe-lafs.org/trac/tahoe/wiki/RelatedProjects
[4] http://tahoe-lafs.org/trac/tahoe/browser/docs/known_issues.txt
[5] http://tahoe-lafs.org/trac/tahoe/browser/COPYING.GPL
[6] http://tahoe-lafs.org/source/tahoe/trunk/COPYING.TGPPL.html
[7] http://tahoe-lafs.org/source/tahoe/trunk/docs/quickstart.html
[8] http://tahoe-lafs.org/cgi-bin/mailman/listinfo/tahoe-dev
[9] http://tahoe-lafs.org/trac/tahoe/roadmap
[10] http://tahoe-lafs.org/trac/tahoe/browser/CREDITS?rev=4511
[11] http://tahoe-lafs.org/trac/tahoe/wiki/Dev
[12] http://tahoe-lafs.org/hacktahoelafs/



From exarkun at twistedmatrix.com  Tue Jun 22 08:53:43 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 22 Jun 2010 14:53:43 -0000
Subject: [Twisted-Python] Twisted 10.1.0pre1 released -- please test!
In-Reply-To: <AANLkTikyD30DQ3WJ83_bBGcbfkaknLMf3E3DlSjP04Ui@mail.gmail.com>
References: <AANLkTikyD30DQ3WJ83_bBGcbfkaknLMf3E3DlSjP04Ui@mail.gmail.com>
Message-ID: <20100622145343.1937.207066716.divmod.xquotient.8@localhost.localdomain>

On 19 Jun, 12:35 pm, jml at mumak.net wrote:
>> From the dank and grey depths of a London summer, a thin, reedy voice
>wanders across the waves of the Internet, saying that it's jolly well
>pleased to announce the first 10.1.0 pre-release.

Can we also mention in the future announcements that this will be the 
last Twisted release which supports Python 2.4 on Windows?

Jean-Paul



From jml at mumak.net  Tue Jun 22 09:29:25 2010
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 22 Jun 2010 16:29:25 +0100
Subject: [Twisted-Python] Twisted 10.1.0pre1 released -- please test!
In-Reply-To: <20100622145343.1937.207066716.divmod.xquotient.8@localhost.localdomain>
References: <AANLkTikyD30DQ3WJ83_bBGcbfkaknLMf3E3DlSjP04Ui@mail.gmail.com>
	<20100622145343.1937.207066716.divmod.xquotient.8@localhost.localdomain>
Message-ID: <AANLkTinckqKMNh7HW1Z0kyuum24aWymNqMRFxNcvaoRP@mail.gmail.com>

On Tue, Jun 22, 2010 at 3:53 PM,  <exarkun at twistedmatrix.com> wrote:
> On 19 Jun, 12:35 pm, jml at mumak.net wrote:
>>> From the dank and grey depths of a London summer, a thin, reedy voice
>>wanders across the waves of the Internet, saying that it's jolly well
>>pleased to announce the first 10.1.0 pre-release.
>
> Can we also mention in the future announcements that this will be the
> last Twisted release which supports Python 2.4 on Windows?

Easily done.

jml



From peter.westlake at pobox.com  Tue Jun 22 11:35:42 2010
From: peter.westlake at pobox.com (Peter Westlake)
Date: Tue, 22 Jun 2010 18:35:42 +0100
Subject: [Twisted-Python] ANNOUNCING Tahoe,
 the Least-Authority File System, v1.7.0
In-Reply-To: <AANLkTilxV-15WiSOcey_TfevBP7LWGFdCDmOCojlxL7g@mail.gmail.com>
References: <AANLkTilxV-15WiSOcey_TfevBP7LWGFdCDmOCojlxL7g@mail.gmail.com>
Message-ID: <1277228142.10077.1381370863@webmail.messagingengine.com>

On Mon, 21 Jun 2010 10:45 -0700, "Zooko O'Whielacronx" <zooko at zooko.com>
wrote:
> Dear people of twisted-python:
> 
> We just released Tahoe-LAFS v1.7. The major new feature is an SFTP
> server. This means that (with enough installing software and tinkering
> with your operating system configuration) you can have a
> normal-looking mount point backed by a Tahoe-LAFS grid.

Splendid!

I downloaded it and typed "python setup.py build", and it went off and
started building a copy of Twisted 10.0! Will that be installed on my
system, or will it only affect the Tahoe build? I can't afford to move
to 10.0 until I've had time to track down a certain bug that appeared
between 2.5.0 and version 8.

Peter.



From jeandaniel.browne at gmail.com  Wed Jun 23 10:23:40 2010
From: jeandaniel.browne at gmail.com (Jean Daniel)
Date: Wed, 23 Jun 2010 18:23:40 +0200
Subject: [Twisted-Python] in a factory: assert not self.usedUp
Message-ID: <AANLkTilM5wTVz7m1VIecw5TXK_-LJ29t5n6BBqcT-Lr8@mail.gmail.com>

Hello,

I have three questions on a code examples, and actually I have seen
this pattern in several places in Twisted. The code are copied from
twisted/doc/mail/examples/imap4client.py

1. In the code below, what is the purpose of an assert checking that
the member attribute promptDeferred is empty in the prompt method? Is
this some kind of documentation saying "the attribute is ALWAYS empty
when this function is called"?

2. It seems that there is the protocol's deferred and the protocol are
unlinked before the deferred is fired. What would happen if the
defered was fired while it is still held in an attribute of the
protocol?

class TrivialPrompter(basic.LineReceiver):

    from os import linesep as delimiter

    promptDeferred = None

    def prompt(self, msg):

        assert self.promptDeferred is None    #  1.
        self.display(msg)
        self.promptDeferred = defer.Deferred()
        return self.promptDeferred

    def display(self,msg):
        self.transport.write(msg)

    def lineReceived(self, line):
        if self.promptDeferred is None:
            return
        d, self.promptDeferred = self.promptDeferred, None     # 2.
        d.callback(line)


3. Third question, in the factory below, there is an attribute usedUp
set at False by default and set to True late in the buildprotocol
method. There is an assert making sure the factory is only used once,
checking that usedUp is False at the beginning of buildprotocol(). Why
it is so important that the factory must be used only once? What would
happens otherwise?

class SimpleIMAP4ClientFactory(protocol.ClientFactory):
    usedUp = False

    protocol = SimpleIMAP4Client

    def __init__(self, username, onConn):
        self.ctx = ssl.ClientContextFactory()

        self.username = username
        self.onConn = onConn

    def buildProtocol(self, addr):
        assert not self.usedUp           # 3.
        self.usedUp = True

        p = self.protocol(self.ctx)
        p.factory = self
        p.greetDeferred = self.onConn

        auth = imap4.CramMD5ClientAuthenticator(self.username)
        p.registerAuthenticator(auth)

        return p


Thanks for your help,



From exarkun at twistedmatrix.com  Wed Jun 23 13:06:11 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 23 Jun 2010 19:06:11 -0000
Subject: [Twisted-Python] in a factory: assert not self.usedUp
In-Reply-To: <AANLkTilM5wTVz7m1VIecw5TXK_-LJ29t5n6BBqcT-Lr8@mail.gmail.com>
References: <AANLkTilM5wTVz7m1VIecw5TXK_-LJ29t5n6BBqcT-Lr8@mail.gmail.com>
Message-ID: <20100623190611.1937.387119165.divmod.xquotient.16@localhost.localdomain>

On 04:23 pm, jeandaniel.browne at gmail.com wrote:
>Hello,
>
>I have three questions on a code examples, and actually I have seen
>this pattern in several places in Twisted. The code are copied from
>twisted/doc/mail/examples/imap4client.py
>
>1. In the code below, what is the purpose of an assert checking that
>the member attribute promptDeferred is empty in the prompt method? Is
>this some kind of documentation saying "the attribute is ALWAYS empty
>when this function is called"?

It's a safeguard against the method being called a second time before 
the response to the first call has been received.  Imagine code using 
the function like this if the assert weren't there:

    d1 = prompter.prompt("Answer this")
    d2 = prompter.prompt("Now answer this")
>
>2. It seems that there is the protocol's deferred and the protocol are
>unlinked before the deferred is fired. What would happen if the
>defered was fired while it is still held in an attribute of the
>protocol?

Consider what would happen if there were a callback on `promptDeferred` 
which called the `prompt` method.
>
>class TrivialPrompter(basic.LineReceiver):
>
>    from os import linesep as delimiter
>
>    promptDeferred = None
>
>    def prompt(self, msg):
>
>        assert self.promptDeferred is None    #  1.
>        self.display(msg)
>        self.promptDeferred = defer.Deferred()
>        return self.promptDeferred
>
>    def display(self,msg):
>        self.transport.write(msg)
>
>    def lineReceived(self, line):
>        if self.promptDeferred is None:
>            return
>        d, self.promptDeferred = self.promptDeferred, None     # 2.
>        d.callback(line)
>
>
>3. Third question, in the factory below, there is an attribute usedUp
>set at False by default and set to True late in the buildprotocol
>method. There is an assert making sure the factory is only used once,
>checking that usedUp is False at the beginning of buildprotocol(). Why
>it is so important that the factory must be used only once? What would
>happens otherwise?
>
>class SimpleIMAP4ClientFactory(protocol.ClientFactory):
>    usedUp = False
>
>    protocol = SimpleIMAP4Client
>
>    def __init__(self, username, onConn):
>        self.ctx = ssl.ClientContextFactory()
>
>        self.username = username
>        self.onConn = onConn
>
>    def buildProtocol(self, addr):
>        assert not self.usedUp           # 3.
>        self.usedUp = True
>
>        p = self.protocol(self.ctx)
>        p.factory = self
>        p.greetDeferred = self.onConn
>
>        auth = imap4.CramMD5ClientAuthenticator(self.username)
>        p.registerAuthenticator(auth)
>
>        return p

There's only one Deferred referenced by `self.onConn`.  If you ever got 
to a second connection, the Deferred would have its `callback` method 
invoked a second time which would raise an exception.
>
>Thanks for your help,

You're welcome.

Jean-Paul



From micahel at gmail.com  Thu Jun 24 05:14:27 2010
From: micahel at gmail.com (Michael Hudson-Doyle)
Date: Thu, 24 Jun 2010 12:14:27 +0100
Subject: [Twisted-Python] making Screwtape (Tim Allen) a committer
In-Reply-To: <FF6ABFC8-334F-4554-955E-CE4B34F56C2E@twistedmatrix.com>
References: <FF6ABFC8-334F-4554-955E-CE4B34F56C2E@twistedmatrix.com>
Message-ID: <AANLkTinq_yPQwt26ZXHNlNSTbXiUgeafw4kPN5DfvjMP@mail.gmail.com>

On 9 June 2010 23:25, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> I think we should give screwtape an SVN account and make him an official reviewer.  He's been doing a lot of work on the distutils code which would be made easier by that, and he's been doing pretty decent reviews.
>
> Thoughts?  (Feel free to voice any comments off-list, too.)

OK, so this is extreme pedantry but I didn't think Twisted had the
concept of official reviewer :-)

Cheers,
mwh



From rlotun at gmail.com  Thu Jun 24 05:21:54 2010
From: rlotun at gmail.com (Reza Lotun)
Date: Thu, 24 Jun 2010 12:21:54 +0100
Subject: [Twisted-Python] twistedmatrix.com renewal
Message-ID: <AANLkTinRqTceWE-WtfFsuryTvnSQUTgM-NII97FHfi1c@mail.gmail.com>

It appears that the twistedmatrix.com domain has expired!

-- 
Reza Lotun
mobile: +44 (0)7521 310 763
email:  rlotun at gmail.com
work:   reza at tweetdeck.com
twitter: @rlotun



From mithrandi at mithrandi.net  Thu Jun 24 11:17:34 2010
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Thu, 24 Jun 2010 19:17:34 +0200
Subject: [Twisted-Python] making Screwtape (Tim Allen) a committer
In-Reply-To: <AANLkTinq_yPQwt26ZXHNlNSTbXiUgeafw4kPN5DfvjMP@mail.gmail.com>
References: <FF6ABFC8-334F-4554-955E-CE4B34F56C2E@twistedmatrix.com>
	<AANLkTinq_yPQwt26ZXHNlNSTbXiUgeafw4kPN5DfvjMP@mail.gmail.com>
Message-ID: <AANLkTilNyHvxLaYsjRLQyRFvJcgzbkCcVYDCgNAcoxsk@mail.gmail.com>

On Thu, Jun 24, 2010 at 1:14 PM, Michael Hudson-Doyle <micahel at gmail.com> wrote:
> On 9 June 2010 23:25, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>> I think we should give screwtape an SVN account and make him an official reviewer.  He's been doing a lot of work on the distutils code which would be made easier by that, and he's been doing pretty decent reviews.
>>
>> Thoughts?  (Feel free to voice any comments off-list, too.)
>
> OK, so this is extreme pedantry but I didn't think Twisted had the
> concept of official reviewer :-)

There seems to be a policy, although I'm not sure if this is actually
written down anywhere, that for a branch/patch to be merged to trunk,
either the author should be a committer, or (one of) the reviewer(s)
should be a committer.

So, I guess an "official" reviewer would just be someone with commit access?
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From warner at lothar.com  Thu Jun 24 15:04:52 2010
From: warner at lothar.com (Brian Warner)
Date: Thu, 24 Jun 2010 14:04:52 -0700
Subject: [Twisted-Python] ANNOUNCING Tahoe,
 the Least-Authority File System, v1.7.0
In-Reply-To: <1277228142.10077.1381370863@webmail.messagingengine.com>
References: <AANLkTilxV-15WiSOcey_TfevBP7LWGFdCDmOCojlxL7g@mail.gmail.com>
	<1277228142.10077.1381370863@webmail.messagingengine.com>
Message-ID: <4C23C874.2050404@lothar.com>

On 6/22/10 10:35 AM, Peter Westlake wrote:


> I downloaded it and typed "python setup.py build", and it went off and
> started building a copy of Twisted 10.0! Will that be installed on my
> system, or will it only affect the Tahoe build?

Using "setup.py build" should not affect anything outside of your source 
directory: it should create a Twisted .egg and store/use it in the 
support/lib subdir of your Tahoe source checkout. Tahoe should be the 
only thing that sees the new Twisted.

In contrast, I suspect that "setup.py install" *would* install all the 
dependencies (as well as Tahoe itself) onto your system.

In general, just don't run anything as root, and you should be ok.

cheers,
  -Brian




From jaroslaw.fedewicz at gmail.com  Thu Jun 24 15:24:17 2010
From: jaroslaw.fedewicz at gmail.com (Yaroslav Fedevych)
Date: Fri, 25 Jun 2010 00:24:17 +0300
Subject: [Twisted-Python] ANNOUNCING Tahoe,
	the Least-Authority File 	System, v1.7.0
In-Reply-To: <4C23C874.2050404@lothar.com>
References: <AANLkTilxV-15WiSOcey_TfevBP7LWGFdCDmOCojlxL7g@mail.gmail.com>
	<1277228142.10077.1381370863@webmail.messagingengine.com>
	<4C23C874.2050404@lothar.com>
Message-ID: <AANLkTilhWS2KX9ZoRrtA5BzZlR7O3gSjr5pXPFATDSaV@mail.gmail.com>

On Fri, Jun 25, 2010 at 12:04 AM, Brian Warner <warner at lothar.com> wrote:
> On 6/22/10 10:35 AM, Peter Westlake wrote:
>
>
>> I downloaded it and typed "python setup.py build", and it went off and
>> started building a copy of Twisted 10.0! Will that be installed on my
>> system, or will it only affect the Tahoe build?
>
> Using "setup.py build" should not affect anything outside of your source
> directory: it should create a Twisted .egg and store/use it in the
> support/lib subdir of your Tahoe source checkout. Tahoe should be the
> only thing that sees the new Twisted.
>
> In contrast, I suspect that "setup.py install" *would* install all the
> dependencies (as well as Tahoe itself) onto your system.
>
> In general, just don't run anything as root, and you should be ok.
>

Well there's also virtualenv — won't it help?



From glyph at twistedmatrix.com  Thu Jun 24 16:39:52 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 24 Jun 2010 18:39:52 -0400
Subject: [Twisted-Python] twistedmatrix.com renewal
In-Reply-To: <AANLkTinRqTceWE-WtfFsuryTvnSQUTgM-NII97FHfi1c@mail.gmail.com>
References: <AANLkTinRqTceWE-WtfFsuryTvnSQUTgM-NII97FHfi1c@mail.gmail.com>
Message-ID: <EB1C0B46-C432-49C2-92F8-3F7FD6FA58F9@twistedmatrix.com>

On Jun 24, 2010, at 7:21 AM, Reza Lotun wrote:

> It appears that the twistedmatrix.com domain has expired!

I think it's pretty funny that you sent this to a twistedmatrix.com address :).

Some DNS caches are still propagating, but the issue was fixed around noon EST.


From glyph at twistedmatrix.com  Thu Jun 24 17:57:28 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 24 Jun 2010 19:57:28 -0400
Subject: [Twisted-Python] Twisted 10.1.0pre1 released -- please test!
In-Reply-To: <AANLkTikyD30DQ3WJ83_bBGcbfkaknLMf3E3DlSjP04Ui@mail.gmail.com>
References: <AANLkTikyD30DQ3WJ83_bBGcbfkaknLMf3E3DlSjP04Ui@mail.gmail.com>
Message-ID: <28A5172F-7F48-43FE-A93B-A8133107133C@twistedmatrix.com>

On Jun 19, 2010, at 8:35 AM, Jonathan Lange wrote:

> From the dank and grey depths of a London summer, a thin, reedy voice
> wanders across the waves of the Internet, saying that it's jolly well
> pleased to announce the first 10.1.0 pre-release.

...

> Please download the tarballs and test them as much as possible.

I'd like to strongly encourage everyone subscribed to this list to respond to this request.

In particular, you should note that if Twisted 10.1.0 pre1 horribly breaks your software, you can pipe up and say "hey!  don't release it yet!", and we may listen to you.  Even if maybe you were calling some private APIs or doing something gross and weird, there will be time to talk about it.  If you discover a legitimate regression, where we've broken something that really should have been considered public, we will fix it before the final release.

On the other hand, if you don't test any prereleases, and you discover that your application is broken by Twisted 10.1 the day after the *final* release, you will be screwed.  We won't roll it back and we might not prioritize your regression particularly highly (unless you decide to become a particularly generous sponsor, of course ;-)).

If you have software that depends on Twisted, it is definitely in your best interest to test the pre-releases and let us know how it worked out.

For my part, I have some things which are broken by the prerelease, but the breakage is entirely the fault of other software, so I need to go fix that before I can offer any proper feedback.

If you have tried the pre-release and it works well, drop us a line and say so!  Positive results are useful too.

Thanks,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100624/35b26239/attachment.html>

From zooko at zooko.com  Thu Jun 24 19:34:58 2010
From: zooko at zooko.com (Zooko O'Whielacronx)
Date: Thu, 24 Jun 2010 18:34:58 -0700
Subject: [Twisted-Python] ANNOUNCING Tahoe,
	the Least-Authority File 	System, v1.7.0
In-Reply-To: <1277228142.10077.1381370863@webmail.messagingengine.com>
References: <AANLkTilxV-15WiSOcey_TfevBP7LWGFdCDmOCojlxL7g@mail.gmail.com>
	<1277228142.10077.1381370863@webmail.messagingengine.com>
Message-ID: <AANLkTin-VRNMLoBcUlPfgb55tMKigoKdTKCOx1whJHHp@mail.gmail.com>

On Tue, Jun 22, 2010 at 10:35 AM, Peter Westlake
<peter.westlake at pobox.com> wrote:
>
> I downloaded it and typed "python setup.py build", and it went off and
> started building a copy of Twisted 10.0!

That's funny. Could you please run:

python -c "import pkg_resources;print pkg_resources.require('Twisted')"

>  Will that be installed on my system, or will it only affect the Tahoe build?

(Brian Warner answered this.)

>  I can't afford to move
> to 10.0 until I've had time to track down a certain bug that appeared
> between 2.5.0 and version 8.

Do you have a ticket # for that bug?

Regards,

Zooko



From rlotun at gmail.com  Fri Jun 25 00:10:41 2010
From: rlotun at gmail.com (Reza Lotun)
Date: Fri, 25 Jun 2010 07:10:41 +0100
Subject: [Twisted-Python] twistedmatrix.com renewal
In-Reply-To: <EB1C0B46-C432-49C2-92F8-3F7FD6FA58F9@twistedmatrix.com>
References: <AANLkTinRqTceWE-WtfFsuryTvnSQUTgM-NII97FHfi1c@mail.gmail.com>
	<EB1C0B46-C432-49C2-92F8-3F7FD6FA58F9@twistedmatrix.com>
Message-ID: <CAB387B3-FE12-4306-8457-E106BB402C2C@gmail.com>

On 24 Jun 2010, at 23:39, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> On Jun 24, 2010, at 7:21 AM, Reza Lotun wrote:
> 
>> It appears that the twistedmatrix.com domain has expired!
> 
> I think it's pretty funny that you sent this to a twistedmatrix.com address :).

Heh, right. Forgot this wasn't a google group. Anyway happy that this is now resolved.

Cheers,
Reza


From jml at mumak.net  Fri Jun 25 06:59:09 2010
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 25 Jun 2010 13:59:09 +0100
Subject: [Twisted-Python] Twisted 10.1.0pre1 released -- please test!
In-Reply-To: <28A5172F-7F48-43FE-A93B-A8133107133C@twistedmatrix.com>
References: <AANLkTikyD30DQ3WJ83_bBGcbfkaknLMf3E3DlSjP04Ui@mail.gmail.com>
	<28A5172F-7F48-43FE-A93B-A8133107133C@twistedmatrix.com>
Message-ID: <AANLkTilEFUfxkBfJSb6QA88i1AdN4bPhjrNDgfPz6-EC@mail.gmail.com>

On Fri, Jun 25, 2010 at 12:57 AM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> ...
>
> Please download the tarballs and test them as much as possible.
>
...
> In particular, you should note that if Twisted 10.1.0 pre1 horribly breaks
> your software, you can pipe up and say "hey!  don't release it yet!", and we
> may listen to you.
...
> On the other hand, if you don't test any prereleases, and you discover that
> your application is broken by Twisted 10.1 the day after the *final*
> release, you will be screwed.
...
> If you have software that depends on Twisted, it is definitely in your best
> interest to test the pre-releases and let us know how it worked out.
...

I plan to do the final release this weekend, unless I hear any objections.

jml



From kevin.horn at gmail.com  Fri Jun 25 09:46:59 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 25 Jun 2010 10:46:59 -0500
Subject: [Twisted-Python] Twisted 10.1.0pre1 released -- please test!
In-Reply-To: <AANLkTilEFUfxkBfJSb6QA88i1AdN4bPhjrNDgfPz6-EC@mail.gmail.com>
References: <AANLkTikyD30DQ3WJ83_bBGcbfkaknLMf3E3DlSjP04Ui@mail.gmail.com>
	<28A5172F-7F48-43FE-A93B-A8133107133C@twistedmatrix.com>
	<AANLkTilEFUfxkBfJSb6QA88i1AdN4bPhjrNDgfPz6-EC@mail.gmail.com>
Message-ID: <AANLkTilH079M1daaYDhdr_iYh3qcfw0WKiKgpZSXBxVu@mail.gmail.com>

I pulled down the tarball and installed using 'setup.py install' and ran the
tests on Win XP + Py2.6

A number of tests failed, though I'm not sure how many are really
meaningful.  Mostly seems to be
'reactor unclean' type stuff that doesn't happen on every run.

At any rate, output of test failures attached.  Hope it's useful.

Kevin Horn

On Fri, Jun 25, 2010 at 7:59 AM, Jonathan Lange <jml at mumak.net> wrote:

> On Fri, Jun 25, 2010 at 12:57 AM, Glyph Lefkowitz
> <glyph at twistedmatrix.com> wrote:
> > ...
> >
> > Please download the tarballs and test them as much as possible.
> >
> ...
> > In particular, you should note that if Twisted 10.1.0 pre1 horribly
> breaks
> > your software, you can pipe up and say "hey!  don't release it yet!", and
> we
> > may listen to you.
> ...
> > On the other hand, if you don't test any prereleases, and you discover
> that
> > your application is broken by Twisted 10.1 the day after the *final*
> > release, you will be screwed.
> ...
> > If you have software that depends on Twisted, it is definitely in your
> best
> > interest to test the pre-releases and let us know how it worked out.
> ...
>
> I plan to do the final release this weekend, unless I hear any objections.
>
> jml
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100625/1bd469ac/attachment.html>
-------------- next part --------------

Reason: 'XPath queries with position are not working.'
Traceback (most recent call last):
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\words\test\test_xpath.py", line 139, in test_position
    self.assertEquals(xp.matches(self.e), 1)
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\words\xish\xpath.py", line 288, in matches
    return self.baseLocation.matches(elem)
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\words\xish\xpath.py", line 149, in matches
    if self.childLocation.matches(c):
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\words\xish\xpath.py", line 144, in matches
    if not self.matchesPredicates(elem):
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\words\xish\xpath.py", line 138, in matchesPredicates
    if not p.value(elem):
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\words\xish\xpath.py", line 29, in value
    return elem.children[self.index]
exceptions.IndexError: list index out of range
===============================================================================
[ERROR]: twisted.test.test_ftp.BasicFTPServerTestCase.testDecodeHostPort

Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
DelayedCalls: (set twisted.internet.base.DelayedCall.debug = True to debug)
<DelayedCall 0x3d9e710 [600.0s] called=0 cancelled=0 FTP.__timedOut()>
===============================================================================
[ERROR]: twisted.test.test_ftp.BasicFTPServerTestCase.testDecodeHostPort

Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
Selectables:
<ProtocolWrapper #0 on 3307>
===============================================================================
[ERROR]: twisted.test.test_ftp.BasicFTPServerTestCase.test_portRange

Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
DelayedCalls: (set twisted.internet.base.DelayedCall.debug = True to debug)
<DelayedCall 0x31ff738 [599.985000134s] called=0 cancelled=0 FTP.__timedOut()>
===============================================================================
[ERROR]: twisted.test.test_ftp.BasicFTPServerTestCase.test_portRange

Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
Selectables:
<ProtocolWrapper #0 on 3332>
===============================================================================
[ERROR]: twisted.test.test_ftp.FTPServerTestCaseAdvancedClient.test_anonymousSTO
R

Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
Selectables:
<DTP #0 on 3502>
===============================================================================
[ERROR]: twisted.test.test_plugin.DeveloperSetupTests.test_developmentPluginAvai
lability

Traceback (most recent call last):
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\test\test_plugin.py", line 385, in setUp
    True, 'plugindummy_builtin')
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\test\test_plugin.py", line 357, in _createPluginDummy
    plugs.child(pluginModule + '.py').setContent(pluginContent)
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 745, in setContent
    f = sib.open('w')
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 495, in open
    return self.create()
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 771, in create
    fdint = os.open(self.path, _CREATE_FLAGS)
exceptions.OSError: [Errno 2] No such file or directory: 'C:\\Documents and Sett
ings\\funsize\\Desktop\\Twisted-10.1.0pre1.tar\\Twisted-10.1.0pre1\\_trial_temp\
\twisted.test.test_plugin\\DeveloperSetupTests\\test_developmentPluginAvailabili
\\lj1jrh\\temp\\system_path\\plugindummy\\plugins\\bL4o_HG2AogVCl08plugindummy_b
uiltin.py.new'
===============================================================================
[ERROR]: twisted.test.test_plugin.DeveloperSetupTests.test_freshPyReplacesStaleP
yc

Traceback (most recent call last):
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\test\test_plugin.py", line 388, in setUp
    True, 'plugindummy_builtin')
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\test\test_plugin.py", line 357, in _createPluginDummy
    plugs.child(pluginModule + '.py').setContent(pluginContent)
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 745, in setContent
    f = sib.open('w')
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 495, in open
    return self.create()
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 771, in create
    fdint = os.open(self.path, _CREATE_FLAGS)
exceptions.OSError: [Errno 2] No such file or directory: 'C:\\Documents and Sett
ings\\funsize\\Desktop\\Twisted-10.1.0pre1.tar\\Twisted-10.1.0pre1\\_trial_temp\
\twisted.test.test_plugin\\DeveloperSetupTests\\test_freshPyReplacesStalePyc\\ei
jvm5\\temp\\development_path\\plugindummy\\plugins\\k1FxO3nGdKTA947pplugindummy_
builtin.py.new'
===============================================================================
[ERROR]: twisted.test.test_plugin.DeveloperSetupTests.test_newPluginsOnReadOnlyP
ath

Traceback (most recent call last):
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\test\test_plugin.py", line 388, in setUp
    True, 'plugindummy_builtin')
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\test\test_plugin.py", line 357, in _createPluginDummy
    plugs.child(pluginModule + '.py').setContent(pluginContent)
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 745, in setContent
    f = sib.open('w')
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 495, in open
    return self.create()
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 771, in create
    fdint = os.open(self.path, _CREATE_FLAGS)
exceptions.OSError: [Errno 2] No such file or directory: 'C:\\Documents and Sett
ings\\funsize\\Desktop\\Twisted-10.1.0pre1.tar\\Twisted-10.1.0pre1\\_trial_temp\
\twisted.test.test_plugin\\DeveloperSetupTests\\test_newPluginsOnReadOnlyPath\\x
nwlp5\\temp\\development_path\\plugindummy\\plugins\\9bQBv0TosqUtpU43plugindummy
_builtin.py.new'
===============================================================================
[ERROR]: twisted.test.test_tcp.CannotBindTestCase.test_clientBind

Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
Selectables:
<AccumulatingProtocol #0 on 3793>
===============================================================================
[ERROR]: twisted.test.test_tcp.HalfCloseBuggyApplicationTests.test_writeNotifica
tionRaises

Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
Selectables:
<MyHCProtocol #0 on 3813>
===============================================================================
[ERROR]: twisted.test.test_tcp.PauseProducingTestCase.test_pauseProducingInConne
ctionMade

Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
Selectables:
<AccumulatingProtocol #0 on 3863>
===============================================================================
[ERROR]: twisted.trial.test.test_runner.TestUntilFailure.test_runUntilFailureDec
orate

Traceback (most recent call last):
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\trial\test\test_runner.py", line 628, in test_runUntilFailureDecorate
    result = self.runner.runUntilFailure(self.test)
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\trial\runner.py", line 920, in runUntilFailure
    result = self._runWithoutDecoration(test)
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\trial\runner.py", line 889, in _runWithoutDecoration
    self._tearDownTestdir(oldDir)
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\trial\runner.py", line 794, in _tearDownTestdir
    self._testDirLock.unlock()
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\lockfile.py", line 188, in unlock
    rmlink(self.name)
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\lockfile.py", line 81, in rmlink
    os.remove(os.path.join(filename, 'symlink'))
exceptions.WindowsError: [Error 5] Access is denied: 'C:\\Documents and Settings
\\funsize\\Desktop\\Twisted-10.1.0pre1.tar\\Twisted-10.1.0pre1\\_trial_temp\\_tr
ial_temp.lock\\symlink'
===============================================================================
[ERROR]: twisted.web.test.test_webclient.WebClientSSLTestCase.test_downloadTimeo
ut

Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
Selectables:
<<class 'twisted.internet.tcp.TLSConnection'> to ('127.0.0.1', 4024) at 29fb290>

<<class 'twisted.internet.tcp.TLSConnection'> to ('127.0.0.1', 4024) at 29fb630>

===============================================================================
[ERROR]: twisted.web.test.test_webclient.WebClientTestCase.test_afterFoundGet

Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
Selectables:
<<class 'twisted.internet.tcp.Client'> to ('127.0.0.1', 4086) at 27b70b0>
===============================================================================
[ERROR]: twisted.web.test.test_xmlrpc.XMLRPCTestIntrospection.test_errors

Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
Selectables:
<<class 'twisted.internet.tcp.Client'> to ('127.0.0.1', 4233) at 5de2e10>
-------------------------------------------------------------------------------
Ran 5946 tests in 480.891s

FAILED (skips=845, expectedFailures=12, errors=15, successes=5083)

C:\Documents and Settings\funsize\Desktop\Twisted-10.1.0pre1.tar\Twisted-10.1.0p
re1>

From kevin.horn at gmail.com  Fri Jun 25 10:28:41 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 25 Jun 2010 11:28:41 -0500
Subject: [Twisted-Python] Twisted 10.1.0pre1 released -- please test!
In-Reply-To: <AANLkTilH079M1daaYDhdr_iYh3qcfw0WKiKgpZSXBxVu@mail.gmail.com>
References: <AANLkTikyD30DQ3WJ83_bBGcbfkaknLMf3E3DlSjP04Ui@mail.gmail.com>
	<28A5172F-7F48-43FE-A93B-A8133107133C@twistedmatrix.com>
	<AANLkTilEFUfxkBfJSb6QA88i1AdN4bPhjrNDgfPz6-EC@mail.gmail.com>
	<AANLkTilH079M1daaYDhdr_iYh3qcfw0WKiKgpZSXBxVu@mail.gmail.com>
Message-ID: <AANLkTimnt49VMggMk_1ydEUEWV3NgJRmXD7EPyMC8wfQ@mail.gmail.com>

Running trial with the --unclean-warnings flag, I get only 3 failures.
Attached.

Kevin Horn

On Fri, Jun 25, 2010 at 10:46 AM, Kevin Horn <kevin.horn at gmail.com> wrote:

> I pulled down the tarball and installed using 'setup.py install' and ran
> the tests on Win XP + Py2.6
>
> A number of tests failed, though I'm not sure how many are really
> meaningful.  Mostly seems to be
> 'reactor unclean' type stuff that doesn't happen on every run.
>
> At any rate, output of test failures attached.  Hope it's useful.
>
> Kevin Horn
>
>
> On Fri, Jun 25, 2010 at 7:59 AM, Jonathan Lange <jml at mumak.net> wrote:
>
>> On Fri, Jun 25, 2010 at 12:57 AM, Glyph Lefkowitz
>> <glyph at twistedmatrix.com> wrote:
>> > ...
>> >
>> > Please download the tarballs and test them as much as possible.
>> >
>> ...
>> > In particular, you should note that if Twisted 10.1.0 pre1 horribly
>> breaks
>> > your software, you can pipe up and say "hey!  don't release it yet!",
>> and we
>> > may listen to you.
>> ...
>> > On the other hand, if you don't test any prereleases, and you discover
>> that
>> > your application is broken by Twisted 10.1 the day after the *final*
>> > release, you will be screwed.
>> ...
>> > If you have software that depends on Twisted, it is definitely in your
>> best
>> > interest to test the pre-releases and let us know how it worked out.
>> ...
>>
>> I plan to do the final release this weekend, unless I hear any objections.
>>
>> jml
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100625/ef052415/attachment-0001.html>
-------------- next part --------------
===============================================================================
[ERROR]: twisted.test.test_plugin.DeveloperSetupTests.test_developmentPluginAvai
lability

Traceback (most recent call last):
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\test\test_plugin.py", line 385, in setUp
    True, 'plugindummy_builtin')
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\test\test_plugin.py", line 357, in _createPluginDummy
    plugs.child(pluginModule + '.py').setContent(pluginContent)
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 745, in setContent
    f = sib.open('w')
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 495, in open
    return self.create()
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 771, in create
    fdint = os.open(self.path, _CREATE_FLAGS)
exceptions.OSError: [Errno 2] No such file or directory: 'C:\\Documents and Sett
ings\\funsize\\Desktop\\Twisted-10.1.0pre1.tar\\Twisted-10.1.0pre1\\_trial_temp\
\twisted.test.test_plugin\\DeveloperSetupTests\\test_developmentPluginAvailabili
\\43lvnu\\temp\\system_path\\plugindummy\\plugins\\b1J3lmxYhIK04qjOplugindummy_b
uiltin.py.new'
===============================================================================
[ERROR]: twisted.test.test_plugin.DeveloperSetupTests.test_freshPyReplacesStaleP
yc

Traceback (most recent call last):
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\test\test_plugin.py", line 388, in setUp
    True, 'plugindummy_builtin')
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\test\test_plugin.py", line 357, in _createPluginDummy
    plugs.child(pluginModule + '.py').setContent(pluginContent)
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 745, in setContent
    f = sib.open('w')
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 495, in open
    return self.create()
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 771, in create
    fdint = os.open(self.path, _CREATE_FLAGS)
exceptions.OSError: [Errno 2] No such file or directory: 'C:\\Documents and Sett
ings\\funsize\\Desktop\\Twisted-10.1.0pre1.tar\\Twisted-10.1.0pre1\\_trial_temp\
\twisted.test.test_plugin\\DeveloperSetupTests\\test_freshPyReplacesStalePyc\\za
dri7\\temp\\development_path\\plugindummy\\plugins\\CZIjtvOP6Kqa-6npplugindummy_
builtin.py.new'
===============================================================================
[ERROR]: twisted.test.test_plugin.DeveloperSetupTests.test_newPluginsOnReadOnlyP
ath

Traceback (most recent call last):
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\test\test_plugin.py", line 388, in setUp
    True, 'plugindummy_builtin')
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\test\test_plugin.py", line 357, in _createPluginDummy
    plugs.child(pluginModule + '.py').setContent(pluginContent)
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 745, in setContent
    f = sib.open('w')
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 495, in open
    return self.create()
  File "C:\Python26\lib\site-packages\twisted-10.1.0pre1-py2.6-win32.egg\twisted
\python\filepath.py", line 771, in create
    fdint = os.open(self.path, _CREATE_FLAGS)
exceptions.OSError: [Errno 2] No such file or directory: 'C:\\Documents and Sett
ings\\funsize\\Desktop\\Twisted-10.1.0pre1.tar\\Twisted-10.1.0pre1\\_trial_temp\
\twisted.test.test_plugin\\DeveloperSetupTests\\test_newPluginsOnReadOnlyPath\\z
r1kya\\temp\\development_path\\plugindummy\\plugins\\_8_51ebohfWmCshuplugindummy
_builtin.py.new'
-------------------------------------------------------------------------------
Ran 5946 tests in 487.687s

FAILED (skips=831, expectedFailures=12, errors=3, successes=5100)

From kevin.horn at gmail.com  Fri Jun 25 12:49:03 2010
From: kevin.horn at gmail.com (Kevin Horn)
Date: Fri, 25 Jun 2010 13:49:03 -0500
Subject: [Twisted-Python] Twisted 10.1.0pre1 released -- please test!
In-Reply-To: <AANLkTimnt49VMggMk_1ydEUEWV3NgJRmXD7EPyMC8wfQ@mail.gmail.com>
References: <AANLkTikyD30DQ3WJ83_bBGcbfkaknLMf3E3DlSjP04Ui@mail.gmail.com>
	<28A5172F-7F48-43FE-A93B-A8133107133C@twistedmatrix.com>
	<AANLkTilEFUfxkBfJSb6QA88i1AdN4bPhjrNDgfPz6-EC@mail.gmail.com>
	<AANLkTilH079M1daaYDhdr_iYh3qcfw0WKiKgpZSXBxVu@mail.gmail.com>
	<AANLkTimnt49VMggMk_1ydEUEWV3NgJRmXD7EPyMC8wfQ@mail.gmail.com>
Message-ID: <AANLkTinhJZoQNwrJ70CmdXt2WQpy8Ytf7dO5GI4tv2IZ@mail.gmail.com>

OK, running the tests in a higher directory (to shorten temp file path
lengths), and with the --unclean-warnings flag, I'm down to 1 failure, which
still looks like it could be some kind of transient issue, but I'm not sure.

Results attached.

Kevin Horn

On Fri, Jun 25, 2010 at 11:28 AM, Kevin Horn <kevin.horn at gmail.com> wrote:

> Running trial with the --unclean-warnings flag, I get only 3 failures.
> Attached.
>
> Kevin Horn
>
>
> On Fri, Jun 25, 2010 at 10:46 AM, Kevin Horn <kevin.horn at gmail.com> wrote:
>
>> I pulled down the tarball and installed using 'setup.py install' and ran
>> the tests on Win XP + Py2.6
>>
>> A number of tests failed, though I'm not sure how many are really
>> meaningful.  Mostly seems to be
>> 'reactor unclean' type stuff that doesn't happen on every run.
>>
>> At any rate, output of test failures attached.  Hope it's useful.
>>
>> Kevin Horn
>>
>>
>> On Fri, Jun 25, 2010 at 7:59 AM, Jonathan Lange <jml at mumak.net> wrote:
>>
>>> On Fri, Jun 25, 2010 at 12:57 AM, Glyph Lefkowitz
>>> <glyph at twistedmatrix.com> wrote:
>>> > ...
>>> >
>>> > Please download the tarballs and test them as much as possible.
>>> >
>>> ...
>>> > In particular, you should note that if Twisted 10.1.0 pre1 horribly
>>> breaks
>>> > your software, you can pipe up and say "hey!  don't release it yet!",
>>> and we
>>> > may listen to you.
>>> ...
>>> > On the other hand, if you don't test any prereleases, and you discover
>>> that
>>> > your application is broken by Twisted 10.1 the day after the *final*
>>> > release, you will be screwed.
>>> ...
>>> > If you have software that depends on Twisted, it is definitely in your
>>> best
>>> > interest to test the pre-releases and let us know how it worked out.
>>> ...
>>>
>>> I plan to do the final release this weekend, unless I hear any
>>> objections.
>>>
>>> jml
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100625/005c40b9/attachment.html>
-------------- next part --------------
[ERROR]: twisted.web.test.test_cgi.CGI.testReadInput

Traceback (most recent call last):
Failure: twisted.internet.defer.TimeoutError: <twisted.web.test.test_cgi.CGI tes
tMethod=testReadInput> (testReadInput) still running at 5.0 secs
-------------------------------------------------------------------------------
Ran 5946 tests in 443.016s

FAILED (skips=831, expectedFailures=12, errors=1, successes=5100)

From ziga.seilnacht at gmail.com  Fri Jun 25 12:51:32 2010
From: ziga.seilnacht at gmail.com (=?windows-1252?Q?=8Eiga_Seilnacht?=)
Date: Fri, 25 Jun 2010 20:51:32 +0200
Subject: [Twisted-Python] Twisted 10.1.0pre1 released -- please test!
In-Reply-To: <AANLkTimnt49VMggMk_1ydEUEWV3NgJRmXD7EPyMC8wfQ@mail.gmail.com>
References: <AANLkTikyD30DQ3WJ83_bBGcbfkaknLMf3E3DlSjP04Ui@mail.gmail.com>	<28A5172F-7F48-43FE-A93B-A8133107133C@twistedmatrix.com>	<AANLkTilEFUfxkBfJSb6QA88i1AdN4bPhjrNDgfPz6-EC@mail.gmail.com>	<AANLkTilH079M1daaYDhdr_iYh3qcfw0WKiKgpZSXBxVu@mail.gmail.com>
	<AANLkTimnt49VMggMk_1ydEUEWV3NgJRmXD7EPyMC8wfQ@mail.gmail.com>
Message-ID: <4C24FAB4.8070506@gmail.com>

Hello,

Kevin Horn wrote:
> Running trial with the --unclean-warnings flag, I get only 3 failures.
> Attached.
> 
> Kevin Horn
> 

These errors seem to be caused by your deep directory hierarchy, resulting
in trial hitting the MAX_PATH limit. Could you try unpacking the tarball
in the root of your drive and rerunning the tests?

Regards,
Ziga



From sc at puzzlebox.info  Sat Jun 26 12:03:30 2010
From: sc at puzzlebox.info (Steve Castellotti)
Date: Sat, 26 Jun 2010 11:03:30 -0700
Subject: [Twisted-Python] qt4 reactor status
Message-ID: <4C2640F2.70901@puzzlebox.info>

Hello-

     I'm wondering if anyone can fill me in on the current status and 
plans for Qt support under Twisted?

     I've been working with PyGTK for most of my cross-platform 
applications over the past decade or so, but mainly for license reasons 
and to be honest GTK+ still looks pretty much the same visually as it 
did back in the early 2000's (especially on Windows). It feels time to 
move on to something a little less tired and a little better suited to 
mobile deployment (starting with the N900 at least).

     With Qt4 being LGPL'd and PySide offering the same as an 
alternative to PyQT's GPL-or-commercial-only choices, it seems like 
there shouldn't be any barriers to supporting it, save interest and time 
from developers of course.


     The last piece of information I could dig up was this trac ticket:

http://twistedmatrix.com/trac/ticket/3977


     It sounds like Dr. Glenn Tarbox is happy with a potential license 
change on the original qt4reactor code, but that still needs 
confirmation from Itamar Shtull-Trauring and Gabe Rudy (with no further 
comment in the last nine months). Whether the code itself is compatible 
with the current releases of Qt, PyQt, or PySide isn't clear (there is 
certainly no "stable" release suitable for serious re-deployment that I 
can find).


     The source itself is located here:

https://launchpad.net/qt4reactor


     ...but that code is now two years old, with the only update from 
Alan Franzoni a little over a year ago doing some initial cleanup work 
"in order to support better testing."


     I've really only begun getting familiar with Qt development, but as 
of this moment it seems like I should focus on learning the QtNetwork 
component and start porting over my Twisted libraries to that, as at 
least support is present and maintained - plus the licensing is clear.


     In the meantime, can anyone please update me if there has been any 
further work or consideration towards official Qt support for Twisted?


Cheers

Steve Castellotti






From exarkun at twistedmatrix.com  Sat Jun 26 22:05:33 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 27 Jun 2010 04:05:33 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1277611534.0.891421001@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100627/db424b0e/attachment-0001.html>

From peter.westlake at pobox.com  Sun Jun 27 04:04:24 2010
From: peter.westlake at pobox.com (Peter Westlake)
Date: Sun, 27 Jun 2010 11:04:24 +0100
Subject: [Twisted-Python] ANNOUNCING Tahoe,
 the Least-Authority File  System, v1.7.0
In-Reply-To: <AANLkTin-VRNMLoBcUlPfgb55tMKigoKdTKCOx1whJHHp@mail.gmail.com>
References: <AANLkTilxV-15WiSOcey_TfevBP7LWGFdCDmOCojlxL7g@mail.gmail.com><1277228142.10077.1381370863@webmail.messagingengine.com><AANLkTin-VRNMLoBcUlPfgb55tMKigoKdTKCOx1whJHHp@mail.gmail.com>
Message-ID: <1277633064.14407.1382091413@webmail.messagingengine.com>

[resending after the glitch with the domain]

On Thu, 24 Jun 2010 18:34 -0700, "Zooko O'Whielacronx" <zooko at zooko.com>
wrote:
> On Tue, Jun 22, 2010 at 10:35 AM, Peter Westlake
> <peter.westlake at pobox.com> wrote:
> >
> > I downloaded it and typed "python setup.py build", and it went off and
> > started building a copy of Twisted 10.0!
> 
> That's funny. Could you please run:
> 
> python -c "import pkg_resources;print pkg_resources.require('Twisted')"

It says:

allmydata-tahoe-1.7.0$ python -c "import pkg_resources;print
pkg_resources.require('Twisted')"
[Twisted 10.0.0
(/localhome/packages/allmydata-tahoe-1.7.0/Twisted-10.0.0-py2.5-linux-i686.egg),
zope.interface 3.4.0 (/usr/lib/python2.5/site-packages)]

> >  Will that be installed on my system, or will it only affect the Tahoe build?
> 
> (Brian Warner answered this.)

Yes - thanks to Brian.

> >  I can't afford to move
> > to 10.0 until I've had time to track down a certain bug that appeared
> > between 2.5.0 and version 8.
> 
> Do you have a ticket # for that bug?

No, because I can't provide a simple test case for it. My only hope is
to get the source of Twisted and bisect, then see what changed in that
revision. I fully intend to do that as soon as I can spare the time. In
fact, it's becoming more urgent since 10 fixes some other problems.
Really I should be doing that instead of tryin Tahoe-LAFS, but you know
how it is...

Peter.






From exarkun at twistedmatrix.com  Sun Jun 27 16:28:04 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 27 Jun 2010 22:28:04 -0000
Subject: [Twisted-Python] ANNOUNCING Tahoe,
	the Least-Authority File  System, v1.7.0
In-Reply-To: <1277633064.14407.1382091413@webmail.messagingengine.com>
References: <AANLkTilxV-15WiSOcey_TfevBP7LWGFdCDmOCojlxL7g@mail.gmail.com><1277228142.10077.1381370863@webmail.messagingengine.com><AANLkTin-VRNMLoBcUlPfgb55tMKigoKdTKCOx1whJHHp@mail.gmail.com>
	<1277633064.14407.1382091413@webmail.messagingengine.com>
Message-ID: <20100627222804.1937.878761619.divmod.xquotient.526@localhost.localdomain>

On 10:04 am, peter.westlake at pobox.com wrote:
>
>No, because I can't provide a simple test case for it. My only hope is
>to get the source of Twisted and bisect, then see what changed in that
>revision.

If it helps at all, there's now a Git mirror of Twisted so you can 
actually use "git bisect" for this (although I'd love to hear that 
someone has written a general multi-vcs bisect tool and that git is no 
longer the easiest way to do this sort of thing).

Jean-Paul



From exarkun at twistedmatrix.com  Sun Jun 27 16:37:16 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 27 Jun 2010 22:37:16 -0000
Subject: [Twisted-Python] qt4 reactor status
In-Reply-To: <4C2640F2.70901@puzzlebox.info>
References: <4C2640F2.70901@puzzlebox.info>
Message-ID: <20100627223716.1937.1623596183.divmod.xquotient.544@localhost.localdomain>

On 26 Jun, 06:03 pm, sc at puzzlebox.info wrote:
>Hello-
>
>     I'm wondering if anyone can fill me in on the current status and
>plans for Qt support under Twisted?

I think you nailed the status - it's an externally maintained reactor 
which probably works for some people.  As far as plans for support go, 
there aren't really any.  Most Twisted development happens without many 
specific plans though, so you shouldn't let that discourage you.
>
>     In the meantime, can anyone please update me if there has been any
>further work or consideration towards official Qt support for Twisted?

This isn't really specific to Qt - actually it's about Gtk - but it 
might be useful anyway.  A number of issues with Gtk's network support 
have recently led me to believe that a better way to integrate with it 
would be to only put a single file descriptor into its event loop and 
trigger all other event notification based on that single descriptor. 
This can be done with epoll, where Gtk would watch the epoll descriptor, 
but then Twisted's epoll reactor would deal with actual socket events. 
It might be doable with IOCP reactor too, where a Windows Event is put 
into Gtk and then all of the IOCP operations trigger that one Event. 
It's doable with kqueue in a manner similar to that which applies to 
epoll.  And if all else fails, there's the ThreadedSelectReactor 
approach.

Perhaps Qt's networking support is on par with Twisted's, though, and 
such wouldn't be necessary.  I don't know, as I have very little 
experience with Qt.  I just wanted to mention the idea.

Jean-Paul



From glenn at tarbox.org  Sun Jun 27 17:51:51 2010
From: glenn at tarbox.org (Glenn Tarbox, PhD)
Date: Sun, 27 Jun 2010 16:51:51 -0700
Subject: [Twisted-Python] qt4 reactor status
In-Reply-To: <20100627223716.1937.1623596183.divmod.xquotient.544@localhost.localdomain>
References: <4C2640F2.70901@puzzlebox.info>
	<20100627223716.1937.1623596183.divmod.xquotient.544@localhost.localdomain>
Message-ID: <AANLkTikz4CSorSFRsSqsyCBnvmu1oC9NT6Q8_Tdoo3lm@mail.gmail.com>

On Sun, Jun 27, 2010 at 3:37 PM, <exarkun at twistedmatrix.com> wrote:

> On 26 Jun, 06:03 pm, sc at puzzlebox.info wrote:
> >Hello-
> >
> >     I'm wondering if anyone can fill me in on the current status and
> >plans for Qt support under Twisted?
>
> I think you nailed the status - it's an externally maintained reactor
> which probably works for some people.  As far as plans for support go,
> there aren't really any.  Most Twisted development happens without many
> specific plans though, so you shouldn't let that discourage you.
> >
> >     In the meantime, can anyone please update me if there has been any
> >further work or consideration towards official Qt support for Twisted?
>

One issue with "official" support is PyQt licensing.  If PySide is (or
becomes) an alternative, the licensing issue would disappear and Twisted
"could" include it in the distribution.

AFAIK, there hasn't been any substantial work on the qt4reactor beyond what
exists on launchpad and github.  I have a few patches aging in my inbox
which fix some Mac platform problems etc.

<snip>


> Perhaps Qt's networking support is on par with Twisted's, though, and
> such wouldn't be necessary.  I don't know, as I have very little
> experience with Qt.  I just wanted to mention the idea.
>

The design of the qt4reactor was driven by the need to integrate two event
loops.  Qt has its own asynchronous event handling core which is exposed
through PyQt.  Fortunately, its fairly straightforward to register a
callback for twisted "stuff" (time and file descriptors) and it all works
pretty well... (meaning it passed Twisted's torture tests at the time it was
checked into launchpad).

There is a non-traditional initialization using a non-blocking call to
reactor.runReturn() which nails Twisted to PyQt.  From that point on,
Twisted behaves normally as does Qt / PyQt...  The way god intended.

The more fundamental question, IMHO, is the status and critical mass of
PySide.  Nokia was unable to reach agreement with Riverbank which caused
uncertainty after Qt's move to open source.  I don't know where this stands.

If PySide is solid, and the API is similar to PyQt (which is the intent),
porting qt4reactor to PySide is "probably" straightforward.  I'm guessing
that the qt4reactor remains functional as I've gotten email patches in the
past few months.

I would offer to check this out but I can't promise any timeline.  I'm
willing to field questions on any coding bizarreness to the degree my brain
hardening doesn't interfere.

-glenn


>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Glenn H. Tarbox, PhD ||  206-274-6919 || glenn at tarbox.org - xmpp || ghtdak -
aim,jabber,IRC,yahoo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100627/1ad25795/attachment.html>

From robert.kern at gmail.com  Sun Jun 27 21:37:45 2010
From: robert.kern at gmail.com (Robert Kern)
Date: Sun, 27 Jun 2010 22:37:45 -0500
Subject: [Twisted-Python] qt4 reactor status
In-Reply-To: <AANLkTikz4CSorSFRsSqsyCBnvmu1oC9NT6Q8_Tdoo3lm@mail.gmail.com>
References: <4C2640F2.70901@puzzlebox.info>	<20100627223716.1937.1623596183.divmod.xquotient.544@localhost.localdomain>
	<AANLkTikz4CSorSFRsSqsyCBnvmu1oC9NT6Q8_Tdoo3lm@mail.gmail.com>
Message-ID: <i095ea$m3u$1@dough.gmane.org>

On 2010-06-27 18:51 , Glenn Tarbox, PhD wrote:

> One issue with "official" support is PyQt licensing.  If PySide is (or
> becomes) an alternative, the licensing issue would disappear and Twisted
> "could" include it in the distribution.

Phil Thompson provides an exception to the GPL license that explicitly states 
that you can write modules using PyQt4 and release them under the MIT license 
(or some other license from an enumerated set of OSI-approved licenses).

> The more fundamental question, IMHO, is the status and critical mass of
> PySide.  Nokia was unable to reach agreement with Riverbank which caused
> uncertainty after Qt's move to open source.  I don't know where this stands.

PySide appears to be making steady, healthy progress. If one is on Linux, it 
would probably be worth an interested person's time installing it and changing 
your imports from "PyQt4" to "PySide" and see if it works. OS X and Windows 
builds are still some time away, but apparently the technical blockers have been 
fixed. It's just a matter of applied effort, probably.

-- 
Robert Kern

"I have come to believe that the whole world is an enigma, a harmless enigma
  that is made terrible by our own mad attempt to interpret it as though it had
  an underlying truth."
   -- Umberto Eco




From superdupont at gmail.com  Mon Jun 28 05:52:01 2010
From: superdupont at gmail.com (Carlos Valiente)
Date: Mon, 28 Jun 2010 12:52:01 +0100
Subject: [Twisted-Python] reactor.spawnProcess() and file descriptors
Message-ID: <AANLkTin5uNNEDJ5NJJWy0wQqyUFLvC9MwIo8ybE8LRoe@mail.gmail.com>

Hi! Is there any way of telling  reactor.spawnProcess() not to close
all open file descriptors? I've tried passing the following as
``childFDs``:

  childFDs = {0: "w", 1: "r", 2: "r"}
  max_fds = resource.getrlimit(resource.RLIMIT_NOFILE)[1] + 1
  for i in xrange(3, max_fds):
    childFDs[i] = i

but of course it doesn't work, because most of those file descriptors
are not open, and then the call to clear the close-on-exec flag fails.

In case there's no way of avoiding the close, I could try writing a
patch for reactor.spawnProcess(): Something like adding an extra
keyword argument to enable or disable the close, for instance. Would
such a patch have any chance of being accepted?

Thanks,

Carlos



From itamar at itamarst.org  Mon Jun 28 06:04:43 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 28 Jun 2010 08:04:43 -0400
Subject: [Twisted-Python] reactor.spawnProcess() and file descriptors
In-Reply-To: <AANLkTin5uNNEDJ5NJJWy0wQqyUFLvC9MwIo8ybE8LRoe@mail.gmail.com>
References: <AANLkTin5uNNEDJ5NJJWy0wQqyUFLvC9MwIo8ybE8LRoe@mail.gmail.com>
Message-ID: <1277726683.1570.0.camel@blake>

On Mon, 2010-06-28 at 12:52 +0100, Carlos Valiente wrote:
> Hi! Is there any way of telling  reactor.spawnProcess() not to close
> all open file descriptors?

My Unix knowledge is weak, but - couldn't you pass in duplicate fds, so
that when they are closed it wouldn't affect the originals?




From superdupont at gmail.com  Mon Jun 28 06:21:09 2010
From: superdupont at gmail.com (Carlos Valiente)
Date: Mon, 28 Jun 2010 13:21:09 +0100
Subject: [Twisted-Python] reactor.spawnProcess() and file descriptors
In-Reply-To: <1277726683.1570.0.camel@blake>
References: <AANLkTin5uNNEDJ5NJJWy0wQqyUFLvC9MwIo8ybE8LRoe@mail.gmail.com>
	<1277726683.1570.0.camel@blake>
Message-ID: <AANLkTikTIHHA_5YN7qp0OhBgfMzrdrEJmbPBCjwfUQ-8@mail.gmail.com>

On Mon, Jun 28, 2010 at 13:04, Itamar Turner-Trauring
<itamar at itamarst.org> wrote:
> On Mon, 2010-06-28 at 12:52 +0100, Carlos Valiente wrote:
>> Hi! Is there any way of telling  reactor.spawnProcess() not to close
>> all open file descriptors?
>
> My Unix knowledge is weak, but - couldn't you pass in duplicate fds, so
> that when they are closed it wouldn't affect the originals?

Thanks for your reply, Itamar. I wanted to skip the calls to close()
-- 1024 of them, in my case -- because,  according to strace(1),  that
takes about 100 ms (and I'd like to save those milliseconds). From
reading twisted.internet.process.Process._setupChild(), it seems that
passing a dupped file descriptor would trigger at least another call
to dup():

    for child in childlist:
        target = fdmap[child]
            if target == child:
                # fd is already in place
                if debug: print >>errfd, "%d already in place" % target
                fdesc._unsetCloseOnExec(child)
            else:
                if child in fdmap.values():
                    # we can't replace child-fd yet, as some other mapping
                    # still needs the fd it wants to target. We must preserve
                    # that old fd by duping it to a new home.
                    newtarget = os.dup(child) # give it a safe home
                    if debug: print >>errfd, "os.dup(%d) -> %d" % (child,
                                                                   newtarget)
                    os.close(child) # close the original
                    for c, p in fdmap.items():
                        if p == child:
                            fdmap[c] = newtarget # update all pointers
                # now it should be available
                if debug: print >>errfd, "os.dup2(%d,%d)" % (target, child)
                os.dup2(target, child)



From itamar at itamarst.org  Mon Jun 28 07:03:58 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 28 Jun 2010 09:03:58 -0400
Subject: [Twisted-Python] reactor.spawnProcess() and file descriptors
In-Reply-To: <AANLkTikTIHHA_5YN7qp0OhBgfMzrdrEJmbPBCjwfUQ-8@mail.gmail.com>
References: <AANLkTin5uNNEDJ5NJJWy0wQqyUFLvC9MwIo8ybE8LRoe@mail.gmail.com>
	<1277726683.1570.0.camel@blake>
	<AANLkTikTIHHA_5YN7qp0OhBgfMzrdrEJmbPBCjwfUQ-8@mail.gmail.com>
Message-ID: <1277730238.1570.11.camel@blake>

On Mon, 2010-06-28 at 13:21 +0100, Carlos Valiente wrote:
> I wanted to skip the calls to close()
> -- 1024 of them, in my case -- because,  according to strace(1),  that
> takes about 100 ms (and I'd like to save those milliseconds).

Ah, I see. So the issue is performance. If you do file a ticket (and you
probably should), it should be about the speed issue, with suggested
solutions attached, so people know the underlying issue you're trying to
solve.

It's quite likely that closing could be sufficiently sped up by having a
tiny C extension do it -- less Python overhead, and you don't have to
raise and catch 1000 exceptions (which is fairly expensive).




From landreville at deadtreepages.com  Mon Jun 28 08:19:11 2010
From: landreville at deadtreepages.com (Landreville)
Date: Mon, 28 Jun 2010 10:19:11 -0400
Subject: [Twisted-Python] runInteraction function returning a deferred
Message-ID: <AANLkTinKhlHcHZ4ADuarROK6lkegn0AUy7EFfPyajNcu@mail.gmail.com>

I am working with a third-party web-scraping application that also
uses twisted (Scrapy) and would like for it to do its thing in a
transaction along with a database action. This can be done with
runInteraction, but Scrapy uses a non-blocking call when it does its
thing. This actually doesn't even return a deferred, but you pass in
the callback function you would like it to call when finished.

Is there some way for runInteraction to wait for this deferred to be
finished before ending the transaction?

Or could something like this work, where the thread gets paused until
it completes?:
def interaction(txn):

        finished = {'test':False, 'failed': False}

        def _cb(r):
            finished['test'] = True

        def _err(failure):
            finished['failed'] = True

        Spider.crawl(_cb, _err)

        # do database stuff here

        while not finished['test'] and not finished['failed']:
            time.sleep(0.25)

        if finished['failed']:
            raise Exception('Web scraping failed.')

d = dbpool.runInteraction(interaction)




Thanks for a look,

Landreville



From foom at fuhm.net  Mon Jun 28 08:30:37 2010
From: foom at fuhm.net (James Y Knight)
Date: Mon, 28 Jun 2010 10:30:37 -0400
Subject: [Twisted-Python] reactor.spawnProcess() and file descriptors
In-Reply-To: <1277730238.1570.11.camel@blake>
References: <AANLkTin5uNNEDJ5NJJWy0wQqyUFLvC9MwIo8ybE8LRoe@mail.gmail.com>
	<1277726683.1570.0.camel@blake>
	<AANLkTikTIHHA_5YN7qp0OhBgfMzrdrEJmbPBCjwfUQ-8@mail.gmail.com>
	<1277730238.1570.11.camel@blake>
Message-ID: <3C6DB00B-D23E-415D-AC79-E71F56BA6002@fuhm.net>


On Jun 28, 2010, at 9:03 AM, Itamar Turner-Trauring wrote:

> On Mon, 2010-06-28 at 13:21 +0100, Carlos Valiente wrote:
>> I wanted to skip the calls to close()
>> -- 1024 of them, in my case -- because,  according to strace(1),   
>> that
>> takes about 100 ms (and I'd like to save those milliseconds).
>
> Ah, I see. So the issue is performance. If you do file a ticket (and  
> you
> probably should), it should be about the speed issue, with suggested
> solutions attached, so people know the underlying issue you're  
> trying to
> solve.
>
> It's quite likely that closing could be sufficiently sped up by  
> having a
> tiny C extension do it -- less Python overhead, and you don't have to
> raise and catch 1000 exceptions (which is fairly expensive).

Or, if just listdir("/proc/%d/fd/" % getpid()). If that doesn't fail  
(aka /proc/pid/fd actually exists and is mounted on this OS) then only  
close the listed fds. That'll be much much faster.

James



From superdupont at gmail.com  Mon Jun 28 12:29:34 2010
From: superdupont at gmail.com (Carlos Valiente)
Date: Mon, 28 Jun 2010 19:29:34 +0100
Subject: [Twisted-Python] reactor.spawnProcess() and file descriptors
In-Reply-To: <3C6DB00B-D23E-415D-AC79-E71F56BA6002@fuhm.net>
References: <AANLkTin5uNNEDJ5NJJWy0wQqyUFLvC9MwIo8ybE8LRoe@mail.gmail.com>
	<1277726683.1570.0.camel@blake>
	<AANLkTikTIHHA_5YN7qp0OhBgfMzrdrEJmbPBCjwfUQ-8@mail.gmail.com>
	<1277730238.1570.11.camel@blake>
	<3C6DB00B-D23E-415D-AC79-E71F56BA6002@fuhm.net>
Message-ID: <AANLkTimRR8ssz0kgGXtqE37UNvkQ_crkP5HDmkC2X_7k@mail.gmail.com>

On Mon, Jun 28, 2010 at 15:30, James Y Knight <foom at fuhm.net> wrote:
> Or, if just listdir("/proc/%d/fd/" % getpid()). If that doesn't fail
> (aka /proc/pid/fd actually exists and is mounted on this OS) then only
> close the listed fds. That'll be much much faster.

I just did that, James (http://twistedmatrix.com/trac/ticket/4522) --
Thanks for your help!

C



From glyph at twistedmatrix.com  Mon Jun 28 12:59:26 2010
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 28 Jun 2010 14:59:26 -0400
Subject: [Twisted-Python] runInteraction function returning a deferred
In-Reply-To: <AANLkTinKhlHcHZ4ADuarROK6lkegn0AUy7EFfPyajNcu@mail.gmail.com>
References: <AANLkTinKhlHcHZ4ADuarROK6lkegn0AUy7EFfPyajNcu@mail.gmail.com>
Message-ID: <A1F84BED-B55C-4B13-B18E-706ECABC5EDD@twistedmatrix.com>


On Jun 28, 2010, at 10:19 AM, Landreville wrote:

> Is there some way for runInteraction to wait for this deferred to be
> finished before ending the transaction?

blockingCallFromThread:

http://twistedmatrix.com/documents/10.0.0/api/twisted.internet.threads.html#blockingCallFromThread

:)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100628/cc917a08/attachment.html>

From ddwiggins at advpubtech.com  Mon Jun 28 18:43:14 2010
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Mon, 28 Jun 2010 17:43:14 -0700
Subject: [Twisted-Python] Creating a COM object in a thread
Message-ID: <i0bfj2$iem$1@dough.gmane.org>

I need to create a COM object in a Windows application, and call it. 
Since the call will take some time to execute, I wrap it in a deferToThread.

I've found that, when I create the object inline, it works.  However, 
when I defer it, it hangs up in the win32com.client.Dispatch call.  I've 
tried several things, including digging into the guts of Dispatch -- the 
hangup occurs during the creation of the object.

I've discussed this with Mark Hammond, who suggests one lead:

"The Windows message loop is used by the COM marshalling process.  IIRC, 
the first thread to initialize COM in a process is the thread in which 
single-threaded objects will always end up being called in.  If a 
different thread creates the object, COM uses Windows messages to 
marshall all calls back to that main thread.  IOW, your second thread 
makes a call - even to create the object - which results in that thread 
sending a windows message to the main thread to act on the request.

What this probably means in practice is that twisted needs to use a 
reactor which calls MsgWaitForMultipleObjects() and runs a message loop 
when the function detects a new message is in the queue.  I'm not sure 
if there is an existing reactor which does this."

I'm posting this on the off chance that someone else has wandered into 
this corner of Windows arcana, and has come up with something useful.

I'm about to give up on doing this "inside" the twisted app, and running 
it in a separate app that I'll call from the thread.

TIA,
-- 
Don Dwiggins
Advanced Publishing Technology




From itamar at itamarst.org  Mon Jun 28 19:17:57 2010
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 28 Jun 2010 21:17:57 -0400
Subject: [Twisted-Python] Creating a COM object in a thread
In-Reply-To: <i0bfj2$iem$1@dough.gmane.org>
References: <i0bfj2$iem$1@dough.gmane.org>
Message-ID: <1277774277.1570.13.camel@blake>

On Mon, 2010-06-28 at 17:43 -0700, Don Dwiggins wrote:

> What this probably means in practice is that twisted needs to use a 
> reactor which calls MsgWaitForMultipleObjects() and runs a message loop 
> when the function detects a new message is in the queue.  I'm not sure 
> if there is an existing reactor which does this."

win32eventreactor uses WaitForMultipleObjects, so could probably be
modified quite simply to support this. It's also vaguely possible you
could use the more scalable IOCP reactor, but someone with more win32
knowledge than I should comment on that.






From zooko at zooko.com  Mon Jun 28 21:41:04 2010
From: zooko at zooko.com (Zooko O'Whielacronx)
Date: Mon, 28 Jun 2010 21:41:04 -0600
Subject: [Twisted-Python] ANNOUNCING Tahoe,
	the Least-Authority File 	System, v1.7.0
In-Reply-To: <1277633064.14407.1382091413@webmail.messagingengine.com>
References: <AANLkTilxV-15WiSOcey_TfevBP7LWGFdCDmOCojlxL7g@mail.gmail.com>
	<1277228142.10077.1381370863@webmail.messagingengine.com>
	<AANLkTin-VRNMLoBcUlPfgb55tMKigoKdTKCOx1whJHHp@mail.gmail.com>
	<1277633064.14407.1382091413@webmail.messagingengine.com>
Message-ID: <AANLkTinY5TrCkR4G60sBsHPea73Mb_q-Khuf4D8UklXL@mail.gmail.com>

On Sun, Jun 27, 2010 at 4:04 AM, Peter Westlake
<peter.westlake at pobox.com> wrote:
>
>> python -c "import pkg_resources;print pkg_resources.require('Twisted')"
>
> It says:
>
> allmydata-tahoe-1.7.0$ python -c "import pkg_resources;print
> pkg_resources.require('Twisted')"
> [Twisted 10.0.0
> (/localhome/packages/allmydata-tahoe-1.7.0/Twisted-10.0.0-py2.5-linux-i686.egg),
> zope.interface 3.4.0 (/usr/lib/python2.5/site-packages)]

Well, okay, that says that the one in your current working directory,
in a .egg, would satisfy that requirement. But suppose you cd to a
different directory and run it again. :-) Or rm that .egg and run it
again. Thanks!

The thing is, it should have been satisfied with the Twisted 8 that
was already installed in your system, instead of creating that local
Twisted 10.0.0 egg.

Regards,

Zooko



From sc at puzzlebox.info  Tue Jun 29 01:58:28 2010
From: sc at puzzlebox.info (Steve Castellotti)
Date: Tue, 29 Jun 2010 00:58:28 -0700
Subject: [Twisted-Python] qt4 reactor status
In-Reply-To: <i095ea$m3u$1@dough.gmane.org>
References: <4C2640F2.70901@puzzlebox.info>	<20100627223716.1937.1623596183.divmod.xquotient.544@localhost.localdomain>	<AANLkTikz4CSorSFRsSqsyCBnvmu1oC9NT6Q8_Tdoo3lm@mail.gmail.com>
	<i095ea$m3u$1@dough.gmane.org>
Message-ID: <4C29A7A4.3020004@puzzlebox.info>


     First off, many thanks for the responses everyone, they are 
certainly appreciated!

     Comments below.


On 06/27/2010 08:37 PM, Robert Kern wrote:
>> One issue with "official" support is PyQt licensing.  If PySide is (or
>> becomes) an alternative, the licensing issue would disappear and Twisted
>> "could" include it in the distribution.
>>      
> Phil Thompson provides an exception to the GPL license that explicitly states
> that you can write modules using PyQt4 and release them under the MIT license
> (or some other license from an enumerated set of OSI-approved licenses).
>    

     That's interesting (and good) to know.

     However I think ultimately whether PyQt4 or PySide was used as a 
base library for the qt4reactor, the next step would still have to be 
chasing down the remaining contributors to the reactor code and 
confirming they are willing to re-license their work.

     I might attach a request to the last ticket in the tracker as a 
start, and see if that gets any response. I'm only a user of Twisted and 
don't feel comfortable directly hassling folks who were kind enough to 
donate their time to its development.

>> The more fundamental question, IMHO, is the status and critical mass of
>> PySide.  Nokia was unable to reach agreement with Riverbank which caused
>> uncertainty after Qt's move to open source.  I don't know where this stands.
>>      
> PySide appears to be making steady, healthy progress. If one is on Linux, it
> would probably be worth an interested person's time installing it and changing
> your imports from "PyQt4" to "PySide" and see if it works. OS X and Windows
> builds are still some time away, but apparently the technical blockers have been
> fixed. It's just a matter of applied effort, probably.
>    

     Not to drift too far off topic, but from some initial exploratory 
development I can confirm PySide does seem a pretty complete and 
reliable alternative to PyQt4 (at least under Linux). I've manage to 
produce a basic interface using Qt4Designer and integrate a simple JSON 
client which runs equally well under both library wrapper modules.

     In the short term QtNetwork will probably be sufficient for my 
needs, but I would still advocate and support where/as possible a stable 
qt4reactor running under Twisted.


Cheers

Steve Castellotti





From exarkun at twistedmatrix.com  Tue Jun 29 06:43:44 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 29 Jun 2010 12:43:44 -0000
Subject: [Twisted-Python] qt4 reactor status
In-Reply-To: <4C29A7A4.3020004@puzzlebox.info>
References: <4C2640F2.70901@puzzlebox.info>
	<20100627223716.1937.1623596183.divmod.xquotient.544@localhost.localdomain>
	<AANLkTikz4CSorSFRsSqsyCBnvmu1oC9NT6Q8_Tdoo3lm@mail.gmail.com>
	<i095ea$m3u$1@dough.gmane.org> <4C29A7A4.3020004@puzzlebox.info>
Message-ID: <20100629124344.1937.276903590.divmod.xquotient.547@localhost.localdomain>

On 07:58 am, sc at puzzlebox.info wrote:
>
>     I might attach a request to the last ticket in the tracker as a
>start, and see if that gets any response. I'm only a user of Twisted 
>and
>don't feel comfortable directly hassling folks who were kind enough to
>donate their time to its development.

Any of the code that was developed while the reactor was in Twisted 
itself is MIT licensed.  Perhaps that means you only need to track down 
people who contributed after the code was moved out of Twisted?

Jean-Paul



From markscottwright at gmail.com  Tue Jun 29 08:01:54 2010
From: markscottwright at gmail.com (Mark Wright)
Date: Tue, 29 Jun 2010 09:01:54 -0500
Subject: [Twisted-Python] Creating a COM object in a thread
In-Reply-To: <i0bfj2$iem$1@dough.gmane.org>
References: <i0bfj2$iem$1@dough.gmane.org>
Message-ID: <AANLkTimmN32VcbJG22mAYkmL5drZ-orVEeLdwtk9zIFM@mail.gmail.com>

I'm sure you've already checked the simple things like this, but have
you called CoInitialize() in your thread?  If you're using the win32
extensions, it'll be called for you in the main thread, but any new
thread needs to call it before attempting to do any COM work.

On Mon, Jun 28, 2010 at 7:43 PM, Don Dwiggins <ddwiggins at advpubtech.com> wrote:
> I need to create a COM object in a Windows application, and call it.
> Since the call will take some time to execute, I wrap it in a deferToThread.
>
> I've found that, when I create the object inline, it works.  However,
> when I defer it, it hangs up in the win32com.client.Dispatch call.  I've
> tried several things, including digging into the guts of Dispatch -- the
> hangup occurs during the creation of the object.
>
> I've discussed this with Mark Hammond, who suggests one lead:
>
> "The Windows message loop is used by the COM marshalling process.  IIRC,
> the first thread to initialize COM in a process is the thread in which
> single-threaded objects will always end up being called in.  If a
> different thread creates the object, COM uses Windows messages to
> marshall all calls back to that main thread.  IOW, your second thread
> makes a call - even to create the object - which results in that thread
> sending a windows message to the main thread to act on the request.
>
> What this probably means in practice is that twisted needs to use a
> reactor which calls MsgWaitForMultipleObjects() and runs a message loop
> when the function detects a new message is in the queue.  I'm not sure
> if there is an existing reactor which does this."
>
> I'm posting this on the off chance that someone else has wandered into
> this corner of Windows arcana, and has come up with something useful.
>
> I'm about to give up on doing this "inside" the twisted app, and running
> it in a separate app that I'll call from the thread.
>
> TIA,
> --
> Don Dwiggins
> Advanced Publishing Technology
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Mark Wright
markscottwright at gmail.com



From peter.westlake at pobox.com  Tue Jun 29 08:26:31 2010
From: peter.westlake at pobox.com (Peter Westlake)
Date: Tue, 29 Jun 2010 15:26:31 +0100
Subject: [Twisted-Python] ANNOUNCING Tahoe,
 the Least-Authority File  System, v1.7.0
In-Reply-To: <AANLkTinY5TrCkR4G60sBsHPea73Mb_q-Khuf4D8UklXL@mail.gmail.com>
References: <AANLkTilxV-15WiSOcey_TfevBP7LWGFdCDmOCojlxL7g@mail.gmail.com><1277228142.10077.1381370863@webmail.messagingengine.com><AANLkTin-VRNMLoBcUlPfgb55tMKigoKdTKCOx1whJHHp@mail.gmail.com><1277633064.14407.1382091413@webmail.messagingengine.com>
	<AANLkTinY5TrCkR4G60sBsHPea73Mb_q-Khuf4D8UklXL@mail.gmail.com>
Message-ID: <1277821591.4135.1382450539@webmail.messagingengine.com>


On Mon, 28 Jun 2010 21:41 -0600, "Zooko O'Whielacronx" <zooko at zooko.com>
wrote:
> On Sun, Jun 27, 2010 at 4:04 AM, Peter Westlake
> <peter.westlake at pobox.com> wrote:
> >
> >> python -c "import pkg_resources;print pkg_resources.require('Twisted')"
> >
> > It says:
> >
> > allmydata-tahoe-1.7.0$ python -c "import pkg_resources;print
> > pkg_resources.require('Twisted')"
> > [Twisted 10.0.0
> > (/localhome/packages/allmydata-tahoe-1.7.0/Twisted-10.0.0-py2.5-linux-i686.egg),
> > zope.interface 3.4.0 (/usr/lib/python2.5/site-packages)]
> 
> Well, okay, that says that the one in your current working directory,
> in a .egg, would satisfy that requirement. But suppose you cd to a
> different directory and run it again. :-) Or rm that .egg and run it
> again. Thanks!

Here it is:

allmydata-tahoe-1.7.0$ rm -r Twisted-10.0.0-py2.5-linux-i686.egg
allmydata-tahoe-1.7.0$ python -c "import pkg_resources;print
pkg_resources.require('Twisted')"
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/usr/lib/python2.5/site-packages/pkg_resources.py", line 626, in
  require
    needed = self.resolve(parse_requirements(requirements))
  File "/usr/lib/python2.5/site-packages/pkg_resources.py", line 524, in
  resolve
    raise DistributionNotFound(req)  # XXX put more info here
pkg_resources.DistributionNotFound: Twisted

> The thing is, it should have been satisfied with the Twisted 8 that
> was already installed in your system, instead of creating that local
> Twisted 10.0.0 egg.

Mystery solved! Though not in the way that I expected:
all the individual Twisted packages are installed, like
python-twisted-bin, python-twisted-core and so on, but
the top-level python-twisted itself was not! Installing
that gets the response:

allmydata-tahoe-1.7.0$ python -c "import pkg_resources;print
pkg_resources.require('Twisted')"
[Twisted 8.1.0 (/usr/lib/python2.5/site-packages)]

The python-twisted package is described as "transitional",
which suggests that it might one day go away. Someone here
is bound to know if it will.

The reason this wasn't the explanation I expected, BTW,
is that I expected to have 2.5.0 installed, not 8.1.0;
but the bug only affects production machines, not the
desktop where I'm installed Tahoe-LAFS.

One last thing: this is on Debian Lenny, so I added the
APT repository, but "apt-get update" gives these errors:

Hit http://volatile.debian.org stable/volatile/non-free Packages
Hit http://security.debian.org stable/updates/non-free Sources
Ign http://allmydata.org lenny/main Packages
Ign http://allmydata.org lenny/tahoe Packages
Ign http://allmydata.org lenny/main Sources
Ign http://allmydata.org lenny/tahoe Sources
Ign http://allmydata.org lenny/main Packages
Ign http://allmydata.org lenny/tahoe Packages
Ign http://allmydata.org lenny/main Sources
Ign http://allmydata.org lenny/tahoe Sources
Err http://allmydata.org lenny/main Packages
  404 Not Found
Err http://allmydata.org lenny/tahoe Packages
  404 Not Found
Err http://allmydata.org lenny/main Sources
  404 Not Found
Err http://allmydata.org lenny/tahoe Sources
  404 Not Found
W: Failed to fetch
http://allmydata.org/debian/dists/lenny/main/binary-i386/Packages  404
Not Found

W: Failed to fetch
http://allmydata.org/debian/dists/lenny/tahoe/binary-i386/Packages  404
Not Found

W: Failed to fetch
http://allmydata.org/debian/dists/lenny/main/source/Sources  404 Not
Found

W: Failed to fetch
http://allmydata.org/debian/dists/lenny/tahoe/source/Sources  404 Not
Found

E: Some index files failed to download, they have been ignored, or old
ones used instead.

Thanks for your help, and apologies if this is straying off-topic for
the list.

Peter.






From zooko at zooko.com  Tue Jun 29 09:14:23 2010
From: zooko at zooko.com (Zooko O'Whielacronx)
Date: Tue, 29 Jun 2010 09:14:23 -0600
Subject: [Twisted-Python] ANNOUNCING Tahoe,
	the Least-Authority File 	System, v1.7.0
In-Reply-To: <1277821591.4135.1382450539@webmail.messagingengine.com>
References: <AANLkTilxV-15WiSOcey_TfevBP7LWGFdCDmOCojlxL7g@mail.gmail.com>
	<1277228142.10077.1381370863@webmail.messagingengine.com>
	<AANLkTin-VRNMLoBcUlPfgb55tMKigoKdTKCOx1whJHHp@mail.gmail.com>
	<1277633064.14407.1382091413@webmail.messagingengine.com>
	<AANLkTinY5TrCkR4G60sBsHPea73Mb_q-Khuf4D8UklXL@mail.gmail.com>
	<1277821591.4135.1382450539@webmail.messagingengine.com>
Message-ID: <AANLkTiluJmGKFia32bxP_Sm4LLcygE0kjXqVCa3rinwl@mail.gmail.com>

I'm not sure if we can or should do anything about the Debian
python-twisted-core package not providing the Python "Twisted"
distribution.

I don't know much about the operation of the Tahoe-LAFS apt
repository. Maybe it was temporarily down when you tried to apt-get
update?

Let's take it to the tahoe-dev at tahoe-lafs.org list.

Thanks!

Regards,

Zooko



From peter.westlake at pobox.com  Tue Jun 29 10:14:24 2010
From: peter.westlake at pobox.com (Peter Westlake)
Date: Tue, 29 Jun 2010 17:14:24 +0100
Subject: [Twisted-Python] ANNOUNCING Tahoe,
 the Least-Authority File  System, v1.7.0
In-Reply-To: <AANLkTiluJmGKFia32bxP_Sm4LLcygE0kjXqVCa3rinwl@mail.gmail.com>
References: <AANLkTilxV-15WiSOcey_TfevBP7LWGFdCDmOCojlxL7g@mail.gmail.com><1277228142.10077.1381370863@webmail.messagingengine.com><AANLkTin-VRNMLoBcUlPfgb55tMKigoKdTKCOx1whJHHp@mail.gmail.com><1277633064.14407.1382091413@webmail.messagingengine.com><AANLkTinY5TrCkR4G60sBsHPea73Mb_q-Khuf4D8UklXL@mail.gmail.com><1277821591.4135.1382450539@webmail.messagingengine.com>
	<AANLkTiluJmGKFia32bxP_Sm4LLcygE0kjXqVCa3rinwl@mail.gmail.com>
Message-ID: <1277828064.28318.1382473569@webmail.messagingengine.com>

On Tue, 29 Jun 2010 09:14 -0600, "Zooko O'Whielacronx" <zooko at zooko.com>
wrote:
> I'm not sure if we can or should do anything about the Debian
> python-twisted-core package not providing the Python "Twisted"
> distribution.
> 
> I don't know much about the operation of the Tahoe-LAFS apt
> repository. Maybe it was temporarily down when you tried to apt-get
> update?
> 
> Let's take it to the tahoe-dev at tahoe-lafs.org list.

Okay - see you there!

Thanks,

Peter.



From ddwiggins at advpubtech.com  Tue Jun 29 13:13:32 2010
From: ddwiggins at advpubtech.com (Don Dwiggins)
Date: Tue, 29 Jun 2010 12:13:32 -0700
Subject: [Twisted-Python] Creating a COM object in a thread
In-Reply-To: <1277774277.1570.13.camel@blake>
References: <i0bfj2$iem$1@dough.gmane.org> <1277774277.1570.13.camel@blake>
Message-ID: <i0dgkt$6d4$1@dough.gmane.org>

Itamar,
Thanks for the suggestions.  The documentation of win32eventreactor 
sounds kind of scary, but still probably the best base to work from.

I did some searching, and found Thomas Heller's win32guireactor at 
http://osdir.com/ml/python.twisted/2003-02/msg00190.html.  I'm still 
naive enough about reactors not to be able to compare it to 
win32eventreactor, except to note that it does run PumpWaitingMessages, 
which is what Mark thinks is needed.  (This was posted in 2003; as far 
as I can tell, nothing further has been done with it.)

Any advice on this?  I'm willing to spend some time to give it a try, 
and to post my experiences, if it'll help advance the "state of the art" 
of win32 reactors.

On 6/28/2010 6:17 PM, Itamar Turner-Trauring wrote:
> On Mon, 2010-06-28 at 17:43 -0700, Don Dwiggins wrote:
>
>> What this probably means in practice is that twisted needs to use a
>> reactor which calls MsgWaitForMultipleObjects() and runs a message loop
>> when the function detects a new message is in the queue.  I'm not sure
>> if there is an existing reactor which does this."
>
> win32eventreactor uses WaitForMultipleObjects, so could probably be
> modified quite simply to support this. It's also vaguely possible you
> could use the more scalable IOCP reactor, but someone with more win32
> knowledge than I should comment on that.

-- 
Don Dwiggins
Advanced Publishing Technology




From landreville at deadtreepages.com  Tue Jun 29 18:45:38 2010
From: landreville at deadtreepages.com (Landreville)
Date: Tue, 29 Jun 2010 20:45:38 -0400
Subject: [Twisted-Python] runInteraction function returning a deferred
In-Reply-To: <A1F84BED-B55C-4B13-B18E-706ECABC5EDD@twistedmatrix.com>
References: <AANLkTinKhlHcHZ4ADuarROK6lkegn0AUy7EFfPyajNcu@mail.gmail.com>
	<A1F84BED-B55C-4B13-B18E-706ECABC5EDD@twistedmatrix.com>
Message-ID: <AANLkTilf3WNMwbOmyLWTcJwA-lO_ZQU40OFK-vKg5ysj@mail.gmail.com>

On Mon, Jun 28, 2010 at 2:59 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
>
> On Jun 28, 2010, at 10:19 AM, Landreville wrote:
>
> Is there some way for runInteraction to wait for this deferred to be
> finished before ending the transaction?
>
> blockingCallFromThread:
> http://twistedmatrix.com/documents/10.0.0/api/twisted.internet.threads.html#blockingCallFromThread
> :)
> _______________________________________________

Coool Thanks, I will try it out.



From sc at puzzlebox.info  Tue Jun 29 20:33:19 2010
From: sc at puzzlebox.info (Steve Castellotti)
Date: Tue, 29 Jun 2010 19:33:19 -0700
Subject: [Twisted-Python] qt4 reactor status
In-Reply-To: <20100629124344.1937.276903590.divmod.xquotient.547@localhost.localdomain>
References: <4C2640F2.70901@puzzlebox.info>
	<20100627223716.1937.1623596183.divmod.xquotient.544@localhost.localdomain>
	<AANLkTikz4CSorSFRsSqsyCBnvmu1oC9NT6Q8_Tdoo3lm@mail.gmail.com>
	<i095ea$m3u$1@dough.gmane.org> <4C29A7A4.3020004@puzzlebox.info>
	<20100629124344.1937.276903590.divmod.xquotient.547@localhost.localdomain>
Message-ID: <1277865199.2328.121.camel@localhost>

On Tue, 2010-06-29 at 12:43 +0000, exarkun at twistedmatrix.com wrote: 

> On 07:58 am, sc at puzzlebox.info wrote:
> >
> >     I might attach a request to the last ticket in the tracker as a
> >start, and see if that gets any response. I'm only a user of Twisted 
> >and
> >don't feel comfortable directly hassling folks who were kind enough to
> >donate their time to its development.
> 
> Any of the code that was developed while the reactor was in Twisted 
> itself is MIT licensed.  Perhaps that means you only need to track down 
> people who contributed after the code was moved out of Twisted?



    According the the Launchpad page, the qt4reactor code is GPLv2, not
MIT:

https://launchpad.net/qt4reactor


    I figured since there were issues which prevented PyQt (which is
available under GPLv2) from being used, but which were address by PySide
being LGPL, then the same issues would exist for the qt4reactor code as
well?


Cheers

Steve
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100629/895dfb8c/attachment.html>

From glenn at tarbox.org  Tue Jun 29 20:38:35 2010
From: glenn at tarbox.org (Glenn Tarbox, PhD)
Date: Tue, 29 Jun 2010 19:38:35 -0700
Subject: [Twisted-Python] [Twisted] #3977: Reintegrate qt4reactor into
	twisted
In-Reply-To: <058.cc2a02b4a3b3cfb17eb7e4165401a598@twistedmatrix.com>
References: <049.97c61a86b0b8c9e4826582540fe60cd1@twistedmatrix.com>
	<058.cc2a02b4a3b3cfb17eb7e4165401a598@twistedmatrix.com>
Message-ID: <AANLkTimOplozOdQX-IFj55UCFUbHDO9VPPjdj92UrRdk@mail.gmail.com>

On Tue, Jun 29, 2010 at 7:28 PM, Twisted <trac at twistedmatrix.com> wrote:

> #3977: Reintegrate qt4reactor into twisted
>
> -----------------------------+----------------------------------------------
>     Reporter:  jknight      |           Owner:  ghtdak
>         Type:  enhancement  |          Status:  new
>     Priority:  normal       |       Milestone:
>    Component:  core         |        Keywords:
>       Branch:               |   Branch_author:
> Launchpad_bug:               |
>
> -----------------------------+----------------------------------------------
>
> Comment(by sc):
>
>  Replying to [comment:2 ghtdak]:
>  > I'm cool with changing to whatever license makes sense.  IIRC, the other
>  contributers would include Therve, Itmar Shtull-Trauring and Gabe Rudy
>  >
>  > Maintainer: U{Glenn H Tarbox, PhD<mailto:glenn at tarbox.org>}
>  > Previous maintainer: U{Itamar Shtull-
>  Trauring<mailto:twisted at itamarst.org>}
>  > Original port to QT4: U{Gabe Rudy<mailto:rudy at goldenhelix.com>}
>
>  Following up on this mailing list thread as to the status of the
>  qt4reactor and its licensing:
>
>  http://twistedmatrix.com/pipermail/twisted-python/2010-June/022457.html
>
>
>  It would seem PySide has reached the point where it should be a viable
>  alternative to PyQt, without the license complications.
>
>  It is still necessary to attain permission to re-release the qt4reactor
>  code under Twisted's MIT license however.
>

Is there something specific I need do to the code to "make it so" or is this
message intended for the previous maintainer(s)?

-glenn


>
> --
> Ticket URL: <http://twistedmatrix.com/trac/ticket/3977#comment:4>
> Twisted <http://twistedmatrix.com/trac/>
> Engine of your Internet
>



-- 
Glenn H. Tarbox, PhD ||  206-274-6919 || glenn at tarbox.org - xmpp || ghtdak -
aim,jabber,IRC,yahoo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100629/0157f510/attachment.html>

From glenn at tarbox.org  Wed Jun 30 00:04:52 2010
From: glenn at tarbox.org (Glenn Tarbox, PhD)
Date: Tue, 29 Jun 2010 23:04:52 -0700
Subject: [Twisted-Python] qt4 reactor status
In-Reply-To: <20100629124344.1937.276903590.divmod.xquotient.547@localhost.localdomain>
References: <4C2640F2.70901@puzzlebox.info>
	<20100627223716.1937.1623596183.divmod.xquotient.544@localhost.localdomain>
	<AANLkTikz4CSorSFRsSqsyCBnvmu1oC9NT6Q8_Tdoo3lm@mail.gmail.com>
	<i095ea$m3u$1@dough.gmane.org> <4C29A7A4.3020004@puzzlebox.info>
	<20100629124344.1937.276903590.divmod.xquotient.547@localhost.localdomain>
Message-ID: <AANLkTilAIVxM7DVnxA72SXLD4ZO_LY881ADsGstCK0T_@mail.gmail.com>

On Tue, Jun 29, 2010 at 5:43 AM, <exarkun at twistedmatrix.com> wrote:

> On 07:58 am, sc at puzzlebox.info wrote:
> >
> >     I might attach a request to the last ticket in the tracker as a
> >start, and see if that gets any response. I'm only a user of Twisted
> >and
> >don't feel comfortable directly hassling folks who were kind enough to
> >donate their time to its development.
>
> Any of the code that was developed while the reactor was in Twisted
> itself is MIT licensed.  Perhaps that means you only need to track down
> people who contributed after the code was moved out of Twisted?
>

I believe thats just me.  There were a couple of bugs / upgrades /
suggestions which I incorporated... and are annotated in the git repo on
github with names and email (IIRC).

So, maybe I just need to change the headers to make it MIT instead of GPL v2
and its all cool.

-glenn


> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Glenn H. Tarbox, PhD ||  206-274-6919 || glenn at tarbox.org - xmpp || ghtdak -
aim,jabber,IRC,yahoo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100629/24d2506f/attachment.html>

From sc at puzzlebox.info  Wed Jun 30 00:31:53 2010
From: sc at puzzlebox.info (Steve Castellotti)
Date: Tue, 29 Jun 2010 23:31:53 -0700
Subject: [Twisted-Python] qt4 reactor status
In-Reply-To: <AANLkTilAIVxM7DVnxA72SXLD4ZO_LY881ADsGstCK0T_@mail.gmail.com>
References: <4C2640F2.70901@puzzlebox.info>
	<20100627223716.1937.1623596183.divmod.xquotient.544@localhost.localdomain>
	<AANLkTikz4CSorSFRsSqsyCBnvmu1oC9NT6Q8_Tdoo3lm@mail.gmail.com>
	<i095ea$m3u$1@dough.gmane.org> <4C29A7A4.3020004@puzzlebox.info>
	<20100629124344.1937.276903590.divmod.xquotient.547@localhost.localdomain>
	<AANLkTilAIVxM7DVnxA72SXLD4ZO_LY881ADsGstCK0T_@mail.gmail.com>
Message-ID: <1277879513.2328.152.camel@localhost>

On Tue, 2010-06-29 at 23:04 -0700, Glenn Tarbox, PhD wrote: 

>         Any of the code that was developed while the reactor was in
>         Twisted
>         itself is MIT licensed.  Perhaps that means you only need to
>         track down
>         people who contributed after the code was moved out of
>         Twisted? 
> 
> 
> 
> I believe thats just me.  There were a couple of bugs / upgrades /
> suggestions which I incorporated... and are annotated in the git repo
> on github with names and email (IIRC).
> 
> 
> So, maybe I just need to change the headers to make it MIT instead of
> GPL v2 and its all cool.



    Actually, I think you're right.

    From the header of the main file in the launchpad trunk:

http://bazaar.launchpad.net/~ghtdak/qt4reactor/trunk/annotate/head:/qt4reactor.py

# Copyright (c) 2001-2008 Twisted Matrix Lboratories.
# See LICENSE for details.


    If Twisted Matrix has the Copyright, the license doesn't matter,
they can dual-license under any second license they want. Any changes,
unless individual Copyright was claimed by the contributor, would fall
under the original Copyright.

    And considering you're the official maintainer, you should have the
ability to do that, even if it hadn't been your code in the first place
(c:


    At least I'm pretty sure that how it all works, I am not a lawyer
and so forth.


    That should safely handle the licensing around the qt4reactor code,
now I suppose its back to the small matter of making sure it works with
the latest Qt4 and PySide codebase (c:



Steve Castellotti
Puzzlebox Limited
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100629/a396bf13/attachment.html>

From petshmidt at googlemail.com  Wed Jun 30 08:41:38 2010
From: petshmidt at googlemail.com (Pet)
Date: Wed, 30 Jun 2010 16:41:38 +0200
Subject: [Twisted-Python] getting all results from DeferredList
Message-ID: <AANLkTim2EsPEaVtpLj5QI3Fs6UJ6yZ_fAhksDNzv_X73@mail.gmail.com>

Hello,

I'm trying to process results from several Deferreds (d1, d2) with
DeferredList, merging it into one list and sending back to client.
While merging works, the client has no results. What is the way to do
tasks (db queries in my case) in parallel and then merge results?

BTW, are nested runInteraction ok?

Thanks for help!
Pet


class Test:
    def __init__(self, cursor):
        self.cursor = cursor

    def test(db, params):
        if params.get('query'):
            params['q'] = self.someFunc3(db, params)

        def processResults(results, out):
            #merge results into one
            for _, r in results:
                out.extend(r)
            return out

        out = []
        d1 = self.cursor.runInteraction(self.someFunc, params)
        d2 = self.cursor.runInteraction(self.someFunc2, params)
        d = DeferredList([d1,d2])
        d.addCallback(processResults, out)
        d.addErrback(log.err)
        return d

class XMLRPCProtokoll(xmlrpc.XMLRPC):
    def __init__(self):
        self.db = adbapi.ConnectionPool()
        xmlrpc.XMLRPC.__init__(self, True)

    def xmlrpc_test(self, param):
        t = Test(self.db)
        return self.db.runInteraction(t.test, param)



From glenn at tarbox.org  Wed Jun 30 12:41:50 2010
From: glenn at tarbox.org (Glenn Tarbox, PhD)
Date: Wed, 30 Jun 2010 11:41:50 -0700
Subject: [Twisted-Python] qt4 reactor status
In-Reply-To: <1277879513.2328.152.camel@localhost>
References: <4C2640F2.70901@puzzlebox.info>
	<20100627223716.1937.1623596183.divmod.xquotient.544@localhost.localdomain>
	<AANLkTikz4CSorSFRsSqsyCBnvmu1oC9NT6Q8_Tdoo3lm@mail.gmail.com>
	<i095ea$m3u$1@dough.gmane.org> <4C29A7A4.3020004@puzzlebox.info>
	<20100629124344.1937.276903590.divmod.xquotient.547@localhost.localdomain>
	<AANLkTilAIVxM7DVnxA72SXLD4ZO_LY881ADsGstCK0T_@mail.gmail.com>
	<1277879513.2328.152.camel@localhost>
Message-ID: <AANLkTilqSsLrZgtnz0p8IOjqirxgP-xos4RHpwgmbOTu@mail.gmail.com>

On Tue, Jun 29, 2010 at 11:31 PM, Steve Castellotti <sc at puzzlebox.info>wrote:

>  On Tue, 2010-06-29 at 23:04 -0700, Glenn Tarbox, PhD wrote:
>
>  Any of the code that was developed while the reactor was in Twisted
> itself is MIT licensed.  Perhaps that means you only need to track down
> people who contributed after the code was moved out of Twisted?
>
>
>
> I believe thats just me.  There were a couple of bugs / upgrades /
> suggestions which I incorporated... and are annotated in the git repo on
> github with names and email (IIRC).
>
>
> So, maybe I just need to change the headers to make it MIT instead of GPL
> v2 and its all cool.
>
>
>
>     Actually, I think you're right.
>
>     From the header of the main file in the launchpad trunk:
>
>
> http://bazaar.launchpad.net/~ghtdak/qt4reactor/trunk/annotate/head:/qt4reactor.py
>
> # Copyright (c) 2001-2008 Twisted Matrix Lboratories.
> # See LICENSE for details.
>
>
>     If Twisted Matrix has the Copyright, the license doesn't matter, they
> can dual-license under any second license they want. Any changes, unless
> individual Copyright was claimed by the contributor, would fall under the
> original Copyright.
>
>     And considering you're the official maintainer, you should have the
> ability to do that, even if it hadn't been your code in the first place (c:
>
>
>     At least I'm pretty sure that how it all works, I am not a lawyer and
> so forth.
>

There was only one place where GPL was referenced... not sure why I put it
there but it was clearly a bug... which I patched.  I also copied Twisted's
LICENSE file into the tree.

If Twisted indeed holds copyright... then it was probably already their
right to do whatever... This makes it more explicit perhaps.

Since I'm not a bzr person, I fixed the code at github

http://github.com/ghtdak/qtreactor

I'd update launchpad but that might take a bit and somebody is gonna want to
take over maintenance anyways.

-glenn


>
>     That should safely handle the licensing around the qt4reactor code, now
> I suppose its back to the small matter of making sure it works with the
> latest Qt4 and PySide codebase (c:
>
>
>
>   Steve Castellotti
> Puzzlebox Limited
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Glenn H. Tarbox, PhD ||  206-274-6919 || glenn at tarbox.org - xmpp || ghtdak -
aim,jabber,IRC,yahoo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20100630/003666f6/attachment-0001.html>

From exarkun at twistedmatrix.com  Wed Jun 30 12:42:59 2010
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 30 Jun 2010 18:42:59 -0000
Subject: [Twisted-Python] getting all results from DeferredList
In-Reply-To: <AANLkTim2EsPEaVtpLj5QI3Fs6UJ6yZ_fAhksDNzv_X73@mail.gmail.com>
References: <AANLkTim2EsPEaVtpLj5QI3Fs6UJ6yZ_fAhksDNzv_X73@mail.gmail.com>
Message-ID: <20100630184259.1937.1347394048.divmod.xquotient.567@localhost.localdomain>

On 02:41 pm, petshmidt at googlemail.com wrote:
>Hello,
>
>I'm trying to process results from several Deferreds (d1, d2) with
>DeferredList, merging it into one list and sending back to client.

You might like twisted.internet.defer.gatherResults.
>
>While merging works, the client has no results. What is the way to do
>tasks (db queries in my case) in parallel and then merge results?

I don't think I understand this part of the question.
>BTW, are nested runInteraction ok?

Not really.  Twisted APIs are almost all required to be invoked in the 
reactor thread.  Nested runInteraction calls would mean calling 
runInteraction in some other thread, and that's not allowed.

Jean-Paul
>Thanks for help!
>Pet
>
>
>class Test:
>    def __init__(self, cursor):
>        self.cursor = cursor
>
>    def test(db, params):
>        if params.get('query'):
>            params['q'] = self.someFunc3(db, params)
>
>        def processResults(results, out):
>            #merge results into one
>            for _, r in results:
>                out.extend(r)
>            return out
>
>        out = []
>        d1 = self.cursor.runInteraction(self.someFunc, params)
>        d2 = self.cursor.runInteraction(self.someFunc2, params)
>        d = DeferredList([d1,d2])
>        d.addCallback(processResults, out)
>        d.addErrback(log.err)
>        return d
>
>class XMLRPCProtokoll(xmlrpc.XMLRPC):
>    def __init__(self):
>        self.db = adbapi.ConnectionPool()
>        xmlrpc.XMLRPC.__init__(self, True)
>
>    def xmlrpc_test(self, param):
>        t = Test(self.db)
>        return self.db.runInteraction(t.test, param)
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From petshmidt at googlemail.com  Wed Jun 30 13:00:59 2010
From: petshmidt at googlemail.com (Pet)
Date: Wed, 30 Jun 2010 21:00:59 +0200
Subject: [Twisted-Python] getting all results from DeferredList
In-Reply-To: <20100630184259.1937.1347394048.divmod.xquotient.567@localhost.localdomain>
References: <AANLkTim2EsPEaVtpLj5QI3Fs6UJ6yZ_fAhksDNzv_X73@mail.gmail.com> 
	<20100630184259.1937.1347394048.divmod.xquotient.567@localhost.localdomain>
Message-ID: <AANLkTinlQcn7OsHBCAqpHtKsu-RU8voLo69g35iu_LIq@mail.gmail.com>

On Wed, Jun 30, 2010 at 8:42 PM,  <exarkun at twistedmatrix.com> wrote:
> On 02:41 pm, petshmidt at googlemail.com wrote:
>>Hello,
>>
>>I'm trying to process results from several Deferreds (d1, d2) with
>>DeferredList, merging it into one list and sending back to client.
>
> You might like twisted.internet.defer.gatherResults.
>>
>>While merging works, the client has no results. What is the way to do
>>tasks (db queries in my case) in parallel and then merge results?

I mean, running functions which performs db queries asynchronously and
then merge results

>
> I don't think I understand this part of the question.
>>BTW, are nested runInteraction ok?
>
> Not really.  Twisted APIs are almost all required to be invoked in the
> reactor thread.  Nested runInteraction calls would mean calling
> runInteraction in some other thread, and that's not allowed.


That is why it not worked. I should redesign my application.

Thanks!

>
> Jean-Paul
>>Thanks for help!
>>Pet
>>
>>
>>class Test:
>>    def __init__(self, cursor):
>>        self.cursor = cursor
>>
>>    def test(db, params):
>>        if params.get('query'):
>>            params['q'] = self.someFunc3(db, params)
>>
>>        def processResults(results, out):
>>            #merge results into one
>>            for _, r in results:
>>                out.extend(r)
>>            return out
>>
>>        out = []
>>        d1 = self.cursor.runInteraction(self.someFunc, params)
>>        d2 = self.cursor.runInteraction(self.someFunc2, params)
>>        d = DeferredList([d1,d2])
>>        d.addCallback(processResults, out)
>>        d.addErrback(log.err)
>>        return d
>>
>>class XMLRPCProtokoll(xmlrpc.XMLRPC):
>>    def __init__(self):
>>        self.db = adbapi.ConnectionPool()
>>        xmlrpc.XMLRPC.__init__(self, True)
>>
>>    def xmlrpc_test(self, param):
>>        t = Test(self.db)
>>        return self.db.runInteraction(t.test, param)
>>
>>_______________________________________________
>>Twisted-Python mailing list
>>Twisted-Python at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From hugh.emberson at gmail.com  Wed Jun 30 20:02:22 2010
From: hugh.emberson at gmail.com (Hugh Emberson)
Date: Thu, 1 Jul 2010 12:02:22 +1000
Subject: [Twisted-Python] Creating a COM object in a thread
In-Reply-To: <i0bfj2$iem$1@dough.gmane.org>
References: <i0bfj2$iem$1@dough.gmane.org>
Message-ID: <AANLkTimFQTnhonipDS99jC_hZbwqmKRC0l7G28L4pxvc@mail.gmail.com>

The way I do this is I isolate all the COM stuff in a separate thread
from thread that runs my reactor.

This thread starts by calling:

    pythoncom.CoInitializeEx(pythoncom.COINIT_APARTMENTTHREADED)

it then creates the COM object and runs an event loop something like this:

    while keepRunning:
        n = MsgWaitForMultipleObjects(handles, False, timeout, QS_ALLINPUT)
        if n == WAIT_OBJECT_0 + nHandles:
            # There is a win32 message waiting.
            if pythoncom.PumpWaitingMessages():
                keepRunning = False

I send messages to the thread by putting them in a queue and setting
an event.  The messages cause methods to be called on the COM object.
I send the results of the COM methods back to the reactor thread using
reactor.callFromThread().

It's a bit of effort to do this, but it works really well.  It's been
in production for several years and I've never had a problem with it.

Hope this helps,
Hugh

On Tue, Jun 29, 2010 at 10:43 AM, Don Dwiggins <ddwiggins at advpubtech.com> wrote:
>
> I need to create a COM object in a Windows application, and call it.
> Since the call will take some time to execute, I wrap it in a deferToThread.
>
> I've found that, when I create the object inline, it works.  However,
> when I defer it, it hangs up in the win32com.client.Dispatch call.  I've
> tried several things, including digging into the guts of Dispatch -- the
> hangup occurs during the creation of the object.
>
> I've discussed this with Mark Hammond, who suggests one lead:
>
> "The Windows message loop is used by the COM marshalling process.  IIRC,
> the first thread to initialize COM in a process is the thread in which
> single-threaded objects will always end up being called in.  If a
> different thread creates the object, COM uses Windows messages to
> marshall all calls back to that main thread.  IOW, your second thread
> makes a call - even to create the object - which results in that thread
> sending a windows message to the main thread to act on the request.
>
> What this probably means in practice is that twisted needs to use a
> reactor which calls MsgWaitForMultipleObjects() and runs a message loop
> when the function detects a new message is in the queue.  I'm not sure
> if there is an existing reactor which does this."
>
> I'm posting this on the off chance that someone else has wandered into
> this corner of Windows arcana, and has come up with something useful.
>
> I'm about to give up on doing this "inside" the twisted app, and running
> it in a separate app that I'll call from the thread.
>
> TIA,
> --
> Don Dwiggins
> Advanced Publishing Technology
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



