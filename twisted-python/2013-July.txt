From ashapattani at gmail.com  Mon Jul  1 14:35:59 2013
From: ashapattani at gmail.com (Asha Joseph)
Date: Mon, 1 Jul 2013 22:35:59 +0200
Subject: [Twisted-Python] Help requested for twisted
Message-ID: <CAPSLr+LOSVGFORTOc7EX8VjF18RO-7GsR2uKyU7ou28QEeAAcg@mail.gmail.com>

Hi,

  I am having a requirement on to send async some 300,000 or more rest api
url calls..

When I work with the code for 150,000 it works fine .It takes around 8
minutes.Is it possible to improve the performance

When the count increased to some 200,000  ,I am getting the error.



-------------------------------------------------------------------------------------------------

Traceback (most recent call last):
Failure: twisted.internet.error.TimeoutError: User timeout caused
connection failure.
Unhandled error in Deferred:
Unhandled Error
Traceback (most recent call last):

-----------------------------------------------------------------------------------------------

As my server is 8 CPU quadcore box, 2.40 Ghz, with 96G of RAM


*Can you please suggest me how can I overcome this error *
*
*
*Make the performance better*

This is my piece of code where I have implemented twisted
------------------------------------------------------------------------------------------------
from twisted.internet import defer, reactor, task
from twisted.web.client import getPage
import sys, argparse, csv, collections, time, datetime

maxRun =32
urls = ""

def pageCallback(result):
  print len(result)
  return result

def doWork():
  for url in urls.split(','):
    d = getPage(url)
    d.addCallback(pageCallback)
    yield d

def finish(ign):
  reactor.stop()

def test():
  deferreds = []
  coop = task.Cooperator()
  work = doWork()
  for i in xrange(maxRun):
    d = coop.coiterate(work)
    deferreds.append(d)
  dl = defer.DeferredList(deferreds)
  dl.addCallback(finish)


if __name__ == '__main__':

   filename = sys.argv[1]
   #I open the file ,read the files and create the url's


      test()
      reactor.run()
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130701/3d5de807/attachment.html>

From exarkun at twistedmatrix.com  Mon Jul  1 15:42:40 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 01 Jul 2013 21:42:40 -0000
Subject: [Twisted-Python] Help requested for twisted
In-Reply-To: <CAPSLr+LOSVGFORTOc7EX8VjF18RO-7GsR2uKyU7ou28QEeAAcg@mail.gmail.com>
References: <CAPSLr+LOSVGFORTOc7EX8VjF18RO-7GsR2uKyU7ou28QEeAAcg@mail.gmail.com>
Message-ID: <20130701214240.28793.1719367211.divmod.xquotient.539@top>

On 08:35 pm, ashapattani at gmail.com wrote:
>Hi,
>
>  I am having a requirement on to send async some 300,000 or more rest 
>api
>url calls..

Are your HTTP requests all the same server?  Or are at least some of the 
calls to the same server?  If so, if you use persistent connections 
(`twisted.web.client.Agent` supports these) you'll remove a bunch of the 
latency and overhead of those requests.

Jean-Paul
>When I work with the code for 150,000 it works fine .It takes around 8
>minutes.Is it possible to improve the performance
>
>When the count increased to some 200,000  ,I am getting the error.
>
>
>
>-------------------------------------------------------------------------------------------------
>
>Traceback (most recent call last):
>Failure: twisted.internet.error.TimeoutError: User timeout caused
>connection failure.
>Unhandled error in Deferred:
>Unhandled Error
>Traceback (most recent call last):
>
>-----------------------------------------------------------------------------------------------
>
>As my server is 8 CPU quadcore box, 2.40 Ghz, with 96G of RAM
>
>
>*Can you please suggest me how can I overcome this error *
>*
>*
>*Make the performance better*
>
>This is my piece of code where I have implemented twisted
>------------------------------------------------------------------------------------------------
>from twisted.internet import defer, reactor, task
>from twisted.web.client import getPage
>import sys, argparse, csv, collections, time, datetime
>
>maxRun =32
>urls = ""
>
>def pageCallback(result):
>  print len(result)
>  return result
>
>def doWork():
>  for url in urls.split(','):
>    d = getPage(url)
>    d.addCallback(pageCallback)
>    yield d
>
>def finish(ign):
>  reactor.stop()
>
>def test():
>  deferreds = []
>  coop = task.Cooperator()
>  work = doWork()
>  for i in xrange(maxRun):
>    d = coop.coiterate(work)
>    deferreds.append(d)
>  dl = defer.DeferredList(deferreds)
>  dl.addCallback(finish)
>
>
>if __name__ == '__main__':
>
>   filename = sys.argv[1]
>   #I open the file ,read the files and create the url's
>
>
>      test()
>      reactor.run()


From ashapattani at gmail.com  Tue Jul  2 00:59:51 2013
From: ashapattani at gmail.com (Asha Joseph)
Date: Tue, 2 Jul 2013 08:59:51 +0200
Subject: [Twisted-Python] Help requested for twisted
In-Reply-To: <20130701214240.28793.1719367211.divmod.xquotient.539@top>
References: <CAPSLr+LOSVGFORTOc7EX8VjF18RO-7GsR2uKyU7ou28QEeAAcg@mail.gmail.com>
 <20130701214240.28793.1719367211.divmod.xquotient.539@top>
Message-ID: <CAPSLr+L3-d+zAjgu1RqAdeFy5=P9x=gO7YrApZdHDybQeUAzXw@mail.gmail.com>

Hi Jean,
   Thanks a lot for the quick response.

All my requests are on the same server. or to the same domain.

In that case do you suggest to use `twisted.web.client.Agent`

I really don't require any responses from url that I send, it is fire and
forget.

thanks and regards,
Asha


On Mon, Jul 1, 2013 at 11:42 PM, <exarkun at twistedmatrix.com> wrote:

> On 08:35 pm, ashapattani at gmail.com wrote:
>
>> Hi,
>>
>>  I am having a requirement on to send async some 300,000 or more rest api
>> url calls..
>>
>
> Are your HTTP requests all the same server?  Or are at least some of the
> calls to the same server?  If so, if you use persistent connections
> (`twisted.web.client.Agent` supports these) you'll remove a bunch of the
> latency and overhead of those requests.
>
> Jean-Paul
>
>> When I work with the code for 150,000 it works fine .It takes around 8
>> minutes.Is it possible to improve the performance
>>
>> When the count increased to some 200,000  ,I am getting the error.
>>
>>
>>
>> ------------------------------**------------------------------**
>> ------------------------------**-------
>>
>> Traceback (most recent call last):
>> Failure: twisted.internet.error.**TimeoutError: User timeout caused
>> connection failure.
>> Unhandled error in Deferred:
>> Unhandled Error
>> Traceback (most recent call last):
>>
>> ------------------------------**------------------------------**
>> ------------------------------**-----
>>
>> As my server is 8 CPU quadcore box, 2.40 Ghz, with 96G of RAM
>>
>>
>> *Can you please suggest me how can I overcome this error *
>> *
>> *
>> *Make the performance better*
>>
>>
>> This is my piece of code where I have implemented twisted
>> ------------------------------**------------------------------**
>> ------------------------------**------
>> from twisted.internet import defer, reactor, task
>> from twisted.web.client import getPage
>> import sys, argparse, csv, collections, time, datetime
>>
>> maxRun =32
>> urls = ""
>>
>> def pageCallback(result):
>>  print len(result)
>>  return result
>>
>> def doWork():
>>  for url in urls.split(','):
>>    d = getPage(url)
>>    d.addCallback(pageCallback)
>>    yield d
>>
>> def finish(ign):
>>  reactor.stop()
>>
>> def test():
>>  deferreds = []
>>  coop = task.Cooperator()
>>  work = doWork()
>>  for i in xrange(maxRun):
>>    d = coop.coiterate(work)
>>    deferreds.append(d)
>>  dl = defer.DeferredList(deferreds)
>>  dl.addCallback(finish)
>>
>>
>> if __name__ == '__main__':
>>
>>   filename = sys.argv[1]
>>   #I open the file ,read the files and create the url's
>>
>>
>>      test()
>>      reactor.run()
>>
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130702/14385e12/attachment.html>

From ashapattani at gmail.com  Tue Jul  2 05:29:52 2013
From: ashapattani at gmail.com (Asha Joseph)
Date: Tue, 2 Jul 2013 13:29:52 +0200
Subject: [Twisted-Python] Help requested for twisted
In-Reply-To: <CAPSLr+L3-d+zAjgu1RqAdeFy5=P9x=gO7YrApZdHDybQeUAzXw@mail.gmail.com>
References: <CAPSLr+LOSVGFORTOc7EX8VjF18RO-7GsR2uKyU7ou28QEeAAcg@mail.gmail.com>
 <20130701214240.28793.1719367211.divmod.xquotient.539@top>
 <CAPSLr+L3-d+zAjgu1RqAdeFy5=P9x=gO7YrApZdHDybQeUAzXw@mail.gmail.com>
Message-ID: <CAPSLr++rcepEH+pb8Qf==Ve8RWEiF_totzEBDaCcM7Vp6zgiSg@mail.gmail.com>

Hi ,

       In my case the rest api url calls looks like this

http://example.com/event/user_id=12345

  So here how to I implement the agent

for me every url has different different user_id's to be passes

Thanks and regards,
Asha







On Tue, Jul 2, 2013 at 8:59 AM, Asha Joseph <ashapattani at gmail.com> wrote:

> Hi Jean,
>    Thanks a lot for the quick response.
>
> All my requests are on the same server. or to the same domain.
>
> In that case do you suggest to use `twisted.web.client.Agent`
>
> I really don't require any responses from url that I send, it is fire and
> forget.
>
> thanks and regards,
> Asha
>
>
> On Mon, Jul 1, 2013 at 11:42 PM, <exarkun at twistedmatrix.com> wrote:
>
>> On 08:35 pm, ashapattani at gmail.com wrote:
>>
>>> Hi,
>>>
>>>  I am having a requirement on to send async some 300,000 or more rest api
>>> url calls..
>>>
>>
>> Are your HTTP requests all the same server?  Or are at least some of the
>> calls to the same server?  If so, if you use persistent connections
>> (`twisted.web.client.Agent` supports these) you'll remove a bunch of the
>> latency and overhead of those requests.
>>
>> Jean-Paul
>>
>>> When I work with the code for 150,000 it works fine .It takes around 8
>>> minutes.Is it possible to improve the performance
>>>
>>> When the count increased to some 200,000  ,I am getting the error.
>>>
>>>
>>>
>>> ------------------------------**------------------------------**
>>> ------------------------------**-------
>>>
>>> Traceback (most recent call last):
>>> Failure: twisted.internet.error.**TimeoutError: User timeout caused
>>> connection failure.
>>> Unhandled error in Deferred:
>>> Unhandled Error
>>> Traceback (most recent call last):
>>>
>>> ------------------------------**------------------------------**
>>> ------------------------------**-----
>>>
>>> As my server is 8 CPU quadcore box, 2.40 Ghz, with 96G of RAM
>>>
>>>
>>> *Can you please suggest me how can I overcome this error *
>>> *
>>> *
>>> *Make the performance better*
>>>
>>>
>>> This is my piece of code where I have implemented twisted
>>> ------------------------------**------------------------------**
>>> ------------------------------**------
>>> from twisted.internet import defer, reactor, task
>>> from twisted.web.client import getPage
>>> import sys, argparse, csv, collections, time, datetime
>>>
>>> maxRun =32
>>> urls = ""
>>>
>>> def pageCallback(result):
>>>  print len(result)
>>>  return result
>>>
>>> def doWork():
>>>  for url in urls.split(','):
>>>    d = getPage(url)
>>>    d.addCallback(pageCallback)
>>>    yield d
>>>
>>> def finish(ign):
>>>  reactor.stop()
>>>
>>> def test():
>>>  deferreds = []
>>>  coop = task.Cooperator()
>>>  work = doWork()
>>>  for i in xrange(maxRun):
>>>    d = coop.coiterate(work)
>>>    deferreds.append(d)
>>>  dl = defer.DeferredList(deferreds)
>>>  dl.addCallback(finish)
>>>
>>>
>>> if __name__ == '__main__':
>>>
>>>   filename = sys.argv[1]
>>>   #I open the file ,read the files and create the url's
>>>
>>>
>>>      test()
>>>      reactor.run()
>>>
>>
>> ______________________________**_________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
>> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130702/b71d00f6/attachment-0001.html>

From ashapattani at gmail.com  Tue Jul  2 12:55:25 2013
From: ashapattani at gmail.com (Asha Joseph)
Date: Tue, 2 Jul 2013 20:55:25 +0200
Subject: [Twisted-Python] Help requested for twisted
In-Reply-To: <20130701214240.28793.1719367211.divmod.xquotient.539@top>
References: <CAPSLr+LOSVGFORTOc7EX8VjF18RO-7GsR2uKyU7ou28QEeAAcg@mail.gmail.com>
 <20130701214240.28793.1719367211.divmod.xquotient.539@top>
Message-ID: <CAPSLr+JKxYYnJSU6HJf8cmUXyK+_oGY7SrYPaVAFQsFVenP+sQ@mail.gmail.com>

Hi ,

       In my case the rest api url calls looks like this

http://example.com/event/user_id=12345

  So here how to I implement the agent

for me every url has different different user_id's to be passes

Thanks and regards,
Asha



On Mon, Jul 1, 2013 at 11:42 PM, <exarkun at twistedmatrix.com> wrote:

> On 08:35 pm, ashapattani at gmail.com wrote:
>
>> Hi,
>>
>>  I am having a requirement on to send async some 300,000 or more rest api
>> url calls..
>>
>
> Are your HTTP requests all the same server?  Or are at least some of the
> calls to the same server?  If so, if you use persistent connections
> (`twisted.web.client.Agent` supports these) you'll remove a bunch of the
> latency and overhead of those requests.
>
> Jean-Paul
>
>> When I work with the code for 150,000 it works fine .It takes around 8
>> minutes.Is it possible to improve the performance
>>
>> When the count increased to some 200,000  ,I am getting the error.
>>
>>
>>
>> ------------------------------**------------------------------**
>> ------------------------------**-------
>>
>> Traceback (most recent call last):
>> Failure: twisted.internet.error.**TimeoutError: User timeout caused
>> connection failure.
>> Unhandled error in Deferred:
>> Unhandled Error
>> Traceback (most recent call last):
>>
>> ------------------------------**------------------------------**
>> ------------------------------**-----
>>
>> As my server is 8 CPU quadcore box, 2.40 Ghz, with 96G of RAM
>>
>>
>> *Can you please suggest me how can I overcome this error *
>> *
>> *
>> *Make the performance better*
>>
>>
>> This is my piece of code where I have implemented twisted
>> ------------------------------**------------------------------**
>> ------------------------------**------
>> from twisted.internet import defer, reactor, task
>> from twisted.web.client import getPage
>> import sys, argparse, csv, collections, time, datetime
>>
>> maxRun =32
>> urls = ""
>>
>> def pageCallback(result):
>>  print len(result)
>>  return result
>>
>> def doWork():
>>  for url in urls.split(','):
>>    d = getPage(url)
>>    d.addCallback(pageCallback)
>>    yield d
>>
>> def finish(ign):
>>  reactor.stop()
>>
>> def test():
>>  deferreds = []
>>  coop = task.Cooperator()
>>  work = doWork()
>>  for i in xrange(maxRun):
>>    d = coop.coiterate(work)
>>    deferreds.append(d)
>>  dl = defer.DeferredList(deferreds)
>>  dl.addCallback(finish)
>>
>>
>> if __name__ == '__main__':
>>
>>   filename = sys.argv[1]
>>   #I open the file ,read the files and create the url's
>>
>>
>>      test()
>>      reactor.run()
>>
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130702/c1b27842/attachment.html>

From beth.null at gmail.com  Tue Jul  2 13:02:03 2013
From: beth.null at gmail.com (Beth)
Date: Tue, 2 Jul 2013 21:02:03 +0200
Subject: [Twisted-Python] Daemonizing app (two udp servers + flask)
Message-ID: <CAEq9sJuuNdNtsP4-Byoaq3+YNPKQk0xSjP6SDR_AauuPQ0o8eg@mail.gmail.com>

Hi there!

Can someone give me a hand in how to daemonize one application?

My application has two udp servers that subclass from DatagramProtocol and
are launched via reactor.listenUDP.

I think that the way to go is twistd, however some doubts come to me as
flask is involved and even I don't know if this is the proper place to ask
(maybe the flask support list?)

My current implementation goes like this:

class Server(DatagramProtocol):

def datagramReceived(self, data, (host, port)):

....

sever = Server()

reactor.listenUDP(port, server)

....

To deploy the app, in the application framework doc is said that you can
create a .tac file for using with twistd. In this tac file I think that I
need to wrap my "DatagramProtocol" into a Factory, then within a Service
and link that service to the application. No problem on that (I think)

However, I'm also using flask for exposing a basic restful api. And I have
no idea in how I can wrap it into a factory/service/application.

In my code flask is tied to the reactor in the following way:

flask_app = Flask(__name__, static_folder="www", static_url_path="")

flask_resource = WSGIResource(reactor, reactor.getThreadPool(), flask_app)

flask_site = Site(flask_resource)

reactor.listenTCP(8080, flask_site)

--------

In the flask website it's said that you can run a flask application using a
standalone wsgi container like the default twisted one with:

twistd web --wsgi myproject.app

However I think that it has nothing to do with my problem.

I'm not a twisted expert however I've been using it from the past six
months, but running it under Eclipse and directly under the console,
however now is time to deploy and I'm really confused with all this
Application, Service, MultiService, Factory, Protocol and such stuff.
listenTCP and listenUDP seemed so easy!!! ;)

At this point I'm in a dead end trying to run the app at startup, any
suggestion?, other alternative to twistd?

Thanks in advance, best regards, Beth.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130702/f3fe08f4/attachment.html>

From glyph at twistedmatrix.com  Tue Jul  2 13:29:54 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 2 Jul 2013 12:29:54 -0700
Subject: [Twisted-Python] Daemonizing app (two udp servers + flask)
In-Reply-To: <CAEq9sJuuNdNtsP4-Byoaq3+YNPKQk0xSjP6SDR_AauuPQ0o8eg@mail.gmail.com>
References: <CAEq9sJuuNdNtsP4-Byoaq3+YNPKQk0xSjP6SDR_AauuPQ0o8eg@mail.gmail.com>
Message-ID: <8F3FE344-1E9D-41AB-8E9F-72EB40E20972@twistedmatrix.com>


On Jul 2, 2013, at 12:02 PM, Beth <beth.null at gmail.com> wrote:

> Can someone give me a hand in how to daemonize one application?

> I think that the way to go is twistd (...)

That's correct.

After reading the rest of your message, I don't see any *problems* that you've had with using it.  All the code looks basically right, and you don't mention any tracebacks.

If "just use twistd" doesn't help you, can you explain what exactly doesn't work when you try to use it?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130702/b86eeaa2/attachment.html>

From exarkun at twistedmatrix.com  Tue Jul  2 14:01:52 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 02 Jul 2013 20:01:52 -0000
Subject: [Twisted-Python] Help requested for twisted
In-Reply-To: <CAPSLr+JKxYYnJSU6HJf8cmUXyK+_oGY7SrYPaVAFQsFVenP+sQ@mail.gmail.com>
References: <CAPSLr+LOSVGFORTOc7EX8VjF18RO-7GsR2uKyU7ou28QEeAAcg@mail.gmail.com>
 <20130701214240.28793.1719367211.divmod.xquotient.539@top>
 <CAPSLr+JKxYYnJSU6HJf8cmUXyK+_oGY7SrYPaVAFQsFVenP+sQ@mail.gmail.com>
Message-ID: <20130702200152.28793.1169867863.divmod.xquotient.603@top>

On 06:55 pm, ashapattani at gmail.com wrote:
>Hi ,
>
>       In my case the rest api url calls looks like this
>
>http://example.com/event/user_id=12345
>
>  So here how to I implement the agent
>
>for me every url has different different user_id's to be passes

Please don't post repeatedly.  Your first message arrived at the list. 
You might need to wait a while before anyone volunteers to help.

If enough time passes with no replies, consider posting again with more 
information - not just the same email.  Chances are if no one has tried 
to help after a day or two, it's because the question wasn't clear.

Jean-Paul


From beth.null at gmail.com  Tue Jul  2 16:03:08 2013
From: beth.null at gmail.com (Beth)
Date: Wed, 3 Jul 2013 00:03:08 +0200
Subject: [Twisted-Python] Daemonizing app (two udp servers + flask)
In-Reply-To: <8F3FE344-1E9D-41AB-8E9F-72EB40E20972@twistedmatrix.com>
References: <CAEq9sJuuNdNtsP4-Byoaq3+YNPKQk0xSjP6SDR_AauuPQ0o8eg@mail.gmail.com>
 <8F3FE344-1E9D-41AB-8E9F-72EB40E20972@twistedmatrix.com>
Message-ID: <CAEq9sJu3Ge4z1FaLC1RdvCzrvnL0jLvy_1Ud2Z1yrgzRPw12jg@mail.gmail.com>

Hi!

After some code rework, I got it working.

The trick is that factories aren't supported in UPD, and they work directly
in the service creation.

Flask seems to work in the same way, not needing to be wrapped into any
factory or so. However in order not to have a .tac file loaded with the
routes and this stuff I've used flask-classy. Half an hour later everything
seems to work.

Here is my current tac file:
-----------------------------------------

from twisted.internet import reactor

from twisted.application import service, internet

from twisted.web.server import Site

from twisted.web.wsgi import WSGIResource

from flask import Flask

from server import Server

from bootloader import BootLoaderServer

from restful_api import RestFulApi


flask_app = Flask("restfulapi", static_folder="www", static_url_path="")

flask_app.debug = True

flask_resource = WSGIResource(reactor, reactor.getThreadPool(), flask_app)

flask_site = Site(flask_resource)

RestFulApi.register(flask_app)

server = Server()

server.load_cfg("default.cfg")

bootloader_server = BootLoaderServer()

application = service.Application("unidosys")

multi_service = service.MultiService()

flask_service = internet.TCPServer(8080, flask_site)

main_service = internet.UDPServer(Server.port, server)

bootloader_service = internet.UDPServer(BootLoaderServer.multicast_port,
bootloader_server)


flask_service.setServiceParent(multi_service)

main_service.setServiceParent(multi_service)

bootloader_service.setServiceParent(multi_service)

unidosys_service.setServiceParent(application)


-----------------------------------------

So far so good ;).

Thanks for your kind help and for this fantastic framework.

All the best, Beth.

On 2 July 2013 21:29, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Jul 2, 2013, at 12:02 PM, Beth <beth.null at gmail.com> wrote:
>
> Can someone give me a hand in how to daemonize one application?
>
>
> I think that the way to go is twistd (...)
>
>
> That's correct.
>
> After reading the rest of your message, I don't see any *problems* that
> you've had with using it.  All the code looks basically right, and you
> don't mention any tracebacks.
>
> If "just use twistd" doesn't help you, can you explain what exactly
> doesn't work when you try to use it?
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130703/d5cd1374/attachment-0001.html>

From exarkun at twistedmatrix.com  Sat Jul  6 06:36:48 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 06 Jul 2013 12:36:48 -0000
Subject: [Twisted-Python] BuildBot problems
Message-ID: <20130706123648.28793.754015608.divmod.xquotient.625@top>

Hello all,

Unfortunately, baelnorn seems to be having network problems again, 
leaving a large number of builders currently unable to complete builds

Also, the easy_install builders seem to be having problems completing 
the correct builds.  For example, a recent trunk build failed with a 
websocket error - but the websocket branch has not been merged.  Maybe 
this is related to the recent changes to make it use git instead of bzr?

Additionally, the "Built packages" link on 
http://buildbot.twistedmatrix.com/builds goes to the wrong place (still? 
again?), so build artifacts seem to be mostly unavailable right now.

Jean-Paul


From radix at twistedmatrix.com  Sat Jul  6 11:20:45 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 6 Jul 2013 12:20:45 -0500
Subject: [Twisted-Python] BuildBot problems
In-Reply-To: <20130706123648.28793.754015608.divmod.xquotient.625@top>
References: <20130706123648.28793.754015608.divmod.xquotient.625@top>
Message-ID: <CAPkRfUS70RdeYKiiUPvo7aBuRPtphtNcqYNF3iwNbZ3_-g1qtw@mail.gmail.com>

On Sat, Jul 6, 2013 at 7:36 AM, <exarkun at twistedmatrix.com> wrote:

> Hello all,
>
> Unfortunately, baelnorn seems to be having network problems again, leaving
> a large number of builders currently unable to complete builds
>
>
This is becoming a pretty major hassle. :-(




> Also, the easy_install builders seem to be having problems completing the
> correct builds.  For example, a recent trunk build failed with a websocket
> error - but the websocket branch has not been merged.  Maybe this is
> related to the recent changes to make it use git instead of bzr?
>
>
This seems to be fixed now. The git-based builders weren't cleaning up old
.pyc files, as I understand it, but now they are. Thanks to Tom Prince.

I believe that branch-builds will now also merge to trunk before running
the tests, so the git-based builders should now show a much more accurate
view of the mergability of a branch (again, thanks to Tom Prince). I'm not
totally certain if that's been deployed yet, though.



> Additionally, the "Built packages" link on http://buildbot.twistedmatrix.*
> *com/builds <http://buildbot.twistedmatrix.com/builds> goes to the wrong
> place (still? again?), so build artifacts seem to be mostly unavailable
> right now.
>


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130706/1444baf4/attachment.html>

From JOHN at egh.com  Sat Jul  6 12:54:43 2013
From: JOHN at egh.com (John Santos)
Date: Sat, 6 Jul 2013 14:54:43 -0400
Subject: [Twisted-Python] BuildBot problems
In-Reply-To: <20130706123648.28793.754015608.divmod.xquotient.625@top>
Message-ID: <1130706144714.58343D-100000@Ives.egh.com>


Is baelnorn the PC we are hosting for Glyph?  If so, no one ever told us
its name, so we are unlikely to do anything when we hear complaints.

Last night, Tom Prince said he was having difficulty accessing the PC (it
wasn't clear when.)

We are having router problems (some kind of memory leak that forces us to
reboot it about once a week.)  We rebooted it early yesterday evening.
After receiving Tom's complaint several hours later, I replied asking if
the problems were earlier (before the reboot), or were still occuring.
I never received an answer.






On Sat, 6 Jul 2013 exarkun at twistedmatrix.com wrote:

> Hello all,
> 
> Unfortunately, baelnorn seems to be having network problems again, 
> leaving a large number of builders currently unable to complete builds
> 
> Also, the easy_install builders seem to be having problems completing 
> the correct builds.  For example, a recent trunk build failed with a 
> websocket error - but the websocket branch has not been merged.  Maybe 
> this is related to the recent changes to make it use git instead of bzr?
> 
> Additionally, the "Built packages" link on 
> http://buildbot.twistedmatrix.com/builds goes to the wrong place (still? 
> again?), so build artifacts seem to be mostly unavailable right now.
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 

-- 
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539



From tom.prince at ualberta.net  Sat Jul  6 13:28:54 2013
From: tom.prince at ualberta.net (Tom Prince)
Date: Sat, 06 Jul 2013 13:28:54 -0600
Subject: [Twisted-Python] BuildBot problems
In-Reply-To: <1130706144714.58343D-100000@Ives.egh.com>
References: <1130706144714.58343D-100000@Ives.egh.com>
Message-ID: <877gh3lc7d.fsf@hermes.hocat.ca>

John Santos <JOHN at egh.com> writes:

> Is baelnorn the PC we are hosting for Glyph?

Yes. It is also known as bot-glyph-1 (and bot-glyph-6 is a VM on it).
https://buildbot.twistedmatrix.com/buildslaves/bot-glyph-1?numbuilds=20
https://buildbot.twistedmatrix.com/buildslaves/bot-glyph-6?numbuilds=20

> Last night, Tom Prince said he was having difficulty accessing the PC (it
> wasn't clear when.)
>
> We are having router problems (some kind of memory leak that forces us to
> reboot it about once a week.)  We rebooted it early yesterday evening.
> After receiving Tom's complaint several hours later, I replied asking if
> the problems were earlier (before the reboot), or were still occuring.
> I never received an answer.

I didn't receive your reply until this morning, and didn't get a chance
to check the status until now.

It does appear that there are still issuess with it.

  Tom


From somaye.it at gmail.com  Sun Jul  7 07:27:21 2013
From: somaye.it at gmail.com (s b)
Date: Sun, 7 Jul 2013 17:57:21 +0430
Subject: [Twisted-Python] canceling membership
Message-ID: <CAKceyvcOnVETQsYp9ss1wZajzqUWYcyf3uiOnCtD6LHpwdQSWA@mail.gmail.com>

i dont want to be a part of tjis group anymore
would you plead cancel my membership?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130707/706f3c8e/attachment.html>

From c.justin88 at gmail.com  Mon Jul  8 14:31:49 2013
From: c.justin88 at gmail.com (Justin Chiu)
Date: Mon, 08 Jul 2013 13:31:49 -0700
Subject: [Twisted-Python] AMQP listening and user-facing daemon
Message-ID: <51DB21B5.5050901@gmail.com>

Hi all,

*I posted this to python-list and tutor-list and received no replies. 
Any advice would be much appreciated. Thank you.*

What is the best approach to writing a concurrent daemon that can 
execute callbacks for different types of events (AMQP messages, parsed 
output of a subprocess, HTTP requests)?

I am considering [twisted][1], the built-in [threading][2] module, and 
[greenlet][3]. I must admit that I am very unfamiliar with concurrent 
programming and Python programming in general (formerly a data analysis 
driven procedural programmer). Any resources on threaded/concurrent 
programming (specifically daemons...not just multi-threading a single 
task) would be much appreciated.

Thank you.

Details:

1) Listens into AMQP messaging queues and executes callbacks when 
messages arrive.
Example: Immediately after startup, the daemon continuously listens to 
the [Openstack Notifications messaging queue][4]. When a virtual machine 
is launched, a notification is generated by Openstack with the hostname, 
IP address, etc. The daemon should read this message and write some info 
to a log (or POST the info to a server, or notify the user...something 
simple).

2) Parse the output of a subprocess and execute callbacks based on the 
output.
Example: Every 30 seconds, a system command "[qstat][5]" is run to query 
a job resource manager (e.g. TORQUE). Similar callbacks to 1).

3) Receive requests from a user and process them. I think this will be 
via WSGI HTTP.
Example: User submits an XML template with virtual machine templates. 
The daemon does some simple XML parsing and writes a job script for the 
job resource manager. The job is submitted to the resource manager and 
the daemon continually checks for the status of the job with "qstat" and 
for messages from AMQP. It should return "live" feedback to the user and 
write to a log.

   [1]: https://twistedmatrix.com/trac/wiki/Documentation
   [2]: http://docs.python.org/2/library/threading.html
   [3]: http://greenlet.readthedocs.org/en/latest/
   [4]: 
https://wiki.openstack.org/wiki/NotificationEventExamples#Immediate_Notifications:
   [5]: http://www.clusterresources.com/torquedocs21/commands/qstat.shtml

Justin Chiu            TRIUMF


From rmeijer at xs4all.nl  Tue Jul  9 02:04:01 2013
From: rmeijer at xs4all.nl (Rob Meijer)
Date: Tue, 9 Jul 2013 10:04:01 +0200
Subject: [Twisted-Python] Twisted web,
	giant-file POST forwarding and early bail-out.
Message-ID: <df3d67b21ad5440e2731e2057a61ae19.squirrel@webmail.xs4all.nl>

Hi everyone,

I'm working on what is just my second project using Twisted-Web, so I'm
still a relative newbee on the subject.

I'm working on a project that uses Twisted Web as a simple authorization
proxy. All requests to my proxy contain an authorization-token and are
either handled by the proxy, or are relayed to an other server. For all
GET stuff and small POST stuff this is not a problem. When I want to
process large POST requests however, I run into my limits of understanding
how Twisted Web actually works.

1) I figured out that next to the 'process' in my request handler, I need
to also overload handleContentChunk, parse the form body-parts in the
first chunk myself and open a proxy connection (self.agent.request) if the
authorization token checks out.

2) When it comes to appending the data received in handleContentChunk, and
if needed throttling the client if the server couldn't keep up,  I can't
figure out how to connect handleContentChunk and my self.agent.request
instance.

3) When the token does not check out, or the connection to the server
fails, it remains a mystery to me how I should throw an error in such a
way that it allows me to send a proper error message to the client, while
not having to first accept the whole large file. That is, it seems rather
silly that I would know things failed after the first POST body chunk, but
would have to wait for and accept hundreds of megabytes or maybe even a
few gigabytes of post data before I can notify the client that something
went wrong.


It seems I am either missing something blindingly obvious or Twisted Web
simply isn't meant to be used this way. I hope someone can give me some
directions how to make this giant-file-post forwarding and early-bail-out
scenario working with Twisted Web.

T.I.A.

Rob Meijer



From p.mayers at imperial.ac.uk  Tue Jul  9 02:41:11 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 09 Jul 2013 09:41:11 +0100
Subject: [Twisted-Python] Twisted web,
 giant-file POST forwarding and early bail-out.
In-Reply-To: <df3d67b21ad5440e2731e2057a61ae19.squirrel@webmail.xs4all.nl>
References: <df3d67b21ad5440e2731e2057a61ae19.squirrel@webmail.xs4all.nl>
Message-ID: <51DBCCA7.10303@imperial.ac.uk>

On 07/09/2013 09:04 AM, Rob Meijer wrote:
> Hi everyone,
>
> I'm working on what is just my second project using Twisted-Web, so I'm
> still a relative newbee on the subject.
>
> I'm working on a project that uses Twisted Web as a simple authorization
> proxy. All requests to my proxy contain an authorization-token and are
> either handled by the proxy, or are relayed to an other server. For all
> GET stuff and small POST stuff this is not a problem. When I want to
> process large POST requests however, I run into my limits of understanding
> how Twisted Web actually works.
>
> 1) I figured out that next to the 'process' in my request handler, I need
> to also overload handleContentChunk, parse the form body-parts in the
> first chunk myself and open a proxy connection (self.agent.request) if the
> authorization token checks out.
>
> 2) When it comes to appending the data received in handleContentChunk, and
> if needed throttling the client if the server couldn't keep up,  I can't
> figure out how to connect handleContentChunk and my self.agent.request
> instance.

You probably want to read up on the producer/consumer stuff in Twisted. 
In particular if you're using t.w.client.Agent, bodies in requests are 
supplied by an IBodyProducer.

http://twistedmatrix.com/documents/current/web/howto/client.html

Essentially, you need an IBodyProducer that maps to the incoming 
transport via request, which I guess would look something like this:

class RequestProducer(object):
     implements(IBodyProducer)

     def __init__(self, request):
         self.req = request

     def startProducing(self, consumer):
         self.d = defer.Deferred()
         self.consumer = consumer
         return d

     def pauseProducing(self):
         self.req.transport.pauseProducing()

     def stopProducing(self):
         # FIXME: what to do here...
         self.req.transport.loseConnection()

     def finish():
         self.d.callback(None)

...and you'll have code like this on the request object:

     def gotLength(self, length):
         self.bodyprod = RequestProducer(self)
         if length:
             self.bodyprod.length = length
         else:
             self.bodyprod.length = twisted.web.iweb.UNKNOWN_LENGTH
         self.out_req = self.agent.request(
             'GET', url, headers, bodyprod
         )

     def handleContentChunk(self, data):
         ...
         if data_to_be_forwarded:
             self.bodyprod.consumer.write(data)
         if some_done_condition:
             self.bodyprod.finish()
>
> 3) When the token does not check out, or the connection to the server
> fails, it remains a mystery to me how I should throw an error in such a
> way that it allows me to send a proper error message to the client, while

This is sort of a problem with HTTP. The client will probably keep 
sending the data.

The best you can do is write an HTTP error to the transport then throw 
the connection away, or blackhole all future content chunks.


From mithrandi at mithrandi.net  Tue Jul  9 05:25:42 2013
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Tue, 9 Jul 2013 13:25:42 +0200
Subject: [Twisted-Python] Twisted web,
 giant-file POST forwarding and early bail-out.
In-Reply-To: <51DBCCA7.10303@imperial.ac.uk>
References: <df3d67b21ad5440e2731e2057a61ae19.squirrel@webmail.xs4all.nl>
 <51DBCCA7.10303@imperial.ac.uk>
Message-ID: <CAMcKhMRQGoXhU67nGD6R+uRn66Ha8o-zO55Zqw2PsXDUuCSx8g@mail.gmail.com>

On Tue, Jul 9, 2013 at 10:41 AM, Phil Mayers <p.mayers at imperial.ac.uk>wrote:

> This is sort of a problem with HTTP. The client will probably keep sending
> the data.
>

Yes, the only way you can interrupt the client while it is sending a
request is to close the connection, which means that the client will not
read any error response you sent.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130709/ebfc9e63/attachment.html>

From itamar at itamarst.org  Tue Jul  9 05:30:06 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 09 Jul 2013 07:30:06 -0400
Subject: [Twisted-Python] Twisted web,
 giant-file POST forwarding and early bail-out.
In-Reply-To: <df3d67b21ad5440e2731e2057a61ae19.squirrel@webmail.xs4all.nl>
References: <df3d67b21ad5440e2731e2057a61ae19.squirrel@webmail.xs4all.nl>
Message-ID: <51DBF43E.6040205@itamarst.org>

On 07/09/2013 04:04 AM, Rob Meijer wrote:
> 3) When the token does not check out, or the connection to the server
> fails, it remains a mystery to me how I should throw an error in such a
> way that it allows me to send a proper error message to the client, while
> not having to first accept the whole large file. That is, it seems rather
> silly that I would know things failed after the first POST body chunk, but
> would have to wait for and accept hundreds of megabytes or maybe even a
> few gigabytes of post data before I can notify the client that something
> went wrong.
>
HTTP clients can send a "Expects: 100-continue" header (or something 
like that), which tells the server it should give an early rejection or 
acceptance before the client sends the data, in *addition* to the final 
response. You would still need to write some code to support this, but 
it is possible.


From itamar at itamarst.org  Tue Jul  9 05:40:27 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 09 Jul 2013 07:40:27 -0400
Subject: [Twisted-Python] Twisted web,
 giant-file POST forwarding and early bail-out.
In-Reply-To: <51DBF43E.6040205@itamarst.org>
References: <df3d67b21ad5440e2731e2057a61ae19.squirrel@webmail.xs4all.nl>
 <51DBF43E.6040205@itamarst.org>
Message-ID: <51DBF6AB.2080902@itamarst.org>

On 07/09/2013 07:30 AM, Itamar Turner-Trauring wrote:
> HTTP clients can send a "Expects: 100-continue" header (or something 
> like that), which tells the server it should give an early rejection 
> or acceptance before the client sends the data, in *addition* to the 
> final response. You would still need to write some code to support 
> this, but it is possible.
Although this only lets you reject based on headers, not body.


From david.serafini at oracle.com  Tue Jul  9 12:13:18 2013
From: david.serafini at oracle.com (David Serafini)
Date: Tue, 09 Jul 2013 11:13:18 -0700
Subject: [Twisted-Python] AMQP listening and user-facing daemon
In-Reply-To: <mailman.1.1373392801.27271.twisted-python@twistedmatrix.com>
References: <mailman.1.1373392801.27271.twisted-python@twistedmatrix.com>
Message-ID: <51DC52BE.8050508@oracle.com>

> Date: Mon, 08 Jul 2013 13:31:49 -0700
> From: Justin Chiu <c.justin88 at gmail.com>
>
> Hi all,
>
> *I posted this to python-list and tutor-list and received no replies.
> Any advice would be much appreciated. Thank you.*
>
> What is the best approach to writing a concurrent daemon that can
> execute callbacks for different types of events (AMQP messages, parsed
> output of a subprocess, HTTP requests)?

There's the txamqp package, available on launchpad.
It's not very actively developed, but seems
usable in its current state.  There's also the txamqp-helpers package
that integrates with twistd.

HTH,
<dbs>

> ...
>
> Justin Chiu            TRIUMF

-- 
David Serafini | ConsultingMTS | Oracle | david.serafini at oracle.com | 
408-276-0486


From kevin.horn at gmail.com  Tue Jul  9 12:33:41 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 9 Jul 2013 13:33:41 -0500
Subject: [Twisted-Python] AMQP listening and user-facing daemon
In-Reply-To: <51DC52BE.8050508@oracle.com>
References: <mailman.1.1373392801.27271.twisted-python@twistedmatrix.com>
 <51DC52BE.8050508@oracle.com>
Message-ID: <CA+U=zK0YnvuLbYp4n8gr39uOgPa-+5USmPnM604ViR--2tvy2A@mail.gmail.com>

See also Pika: https://github.com/pika/pika/


On Tue, Jul 9, 2013 at 1:13 PM, David Serafini <david.serafini at oracle.com>wrote:

> Date: Mon, 08 Jul 2013 13:31:49 -0700
>> From: Justin Chiu <c.justin88 at gmail.com>
>>
>>
>> Hi all,
>>
>> *I posted this to python-list and tutor-list and received no replies.
>> Any advice would be much appreciated. Thank you.*
>>
>> What is the best approach to writing a concurrent daemon that can
>> execute callbacks for different types of events (AMQP messages, parsed
>> output of a subprocess, HTTP requests)?
>>
>
> There's the txamqp package, available on launchpad.
> It's not very actively developed, but seems
> usable in its current state.  There's also the txamqp-helpers package
> that integrates with twistd.
>
> HTH,
> <dbs>
>
>  ...
>>
>> Justin Chiu            TRIUMF
>>
>
> --
> David Serafini | ConsultingMTS | Oracle | david.serafini at oracle.com |
> 408-276-0486
>
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>



-- 
--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130709/49452202/attachment.html>

From ltaylor.volks at gmail.com  Wed Jul 10 14:42:52 2013
From: ltaylor.volks at gmail.com (Lucas Taylor)
Date: Wed, 10 Jul 2013 15:42:52 -0500
Subject: [Twisted-Python] AMQP listening and user-facing daemon
In-Reply-To: <51DB21B5.5050901@gmail.com>
References: <51DB21B5.5050901@gmail.com>
Message-ID: <C0073FB6-2DFA-427A-AFE1-83BD8945BAA5@gmail.com>


On Jul 8, 2013, at 3:31 PM, Justin Chiu wrote:

> Hi all,
> 
> *I posted this to python-list and tutor-list and received no replies. Any advice would be much appreciated. Thank you.*
> 
> What is the best approach to writing a concurrent daemon that can execute callbacks for different types of events (AMQP messages, parsed output of a subprocess, HTTP requests)?
> 
> I am considering [twisted][1], the built-in [threading][2] module, and [greenlet][3]. I must admit that I am very unfamiliar with concurrent programming and Python programming in general (formerly a data analysis driven procedural programmer). Any resources on threaded/concurrent programming (specifically daemons...not just multi-threading a single task) would be much appreciated.
> 

From the details below, it would appear that Twisted would be a great fit for this application.

The asynchronous nature of the framework may cause some head scratching if you're in a procedural mindset, but on the other hand, attempting to facilitate all of the different service interactions you are proposing in a coherent manner can be challenging regardless. One of Twisted's strengths is that it provides that coherence...once you grok the paradigm, you'll be able to look at this type of application and quickly come up with a reasonable sketch of how all of the pieces will fit together, with confidence. 

I highly recommend Dave Peticolas' tutorial:  http://krondo.com/?page_id=1327
You'll get a great introduction to asynchronous programming and dive into Twisted.

And of course the Twisted documentation, esp. the Getting Started section of http://twistedmatrix.com/documents/current/core/howto/.

Finally, I'd stress that you don't need to know *all* of Twisted to benefit from using it. There is a great deal of functionality in the framework and I'm discovering new uses for it all of the time.


> Details:
> 
> 1) Listens into AMQP messaging queues and executes callbacks when messages arrive.
> Example: Immediately after startup, the daemon continuously listens to the [Openstack Notifications messaging queue][4]. When a virtual machine is launched, a notification is generated by Openstack with the hostname, IP address, etc. The daemon should read this message and write some info to a log (or POST the info to a server, or notify the user...something simple).
> 

Others have mentioned txAMQP.  It should be fairly straightforward to consume messages from the queue and hook it up to your user interface.  There are numerous asynchronous APIs in the framework, so you'll have options for doing things just as you propose, without blocking other parts of your application.  Twisted has its own logging system and twisted.web.client.Agent can be used to POST to a web server, etc. 

> 2) Parse the output of a subprocess and execute callbacks based on the output.
> Example: Every 30 seconds, a system command "[qstat][5]" is run to query a job resource manager (e.g. TORQUE). Similar callbacks to 1).

Twisted can help you with scheduled tasks and there is a ProcessProtocol that, combined, will do exactly what you propose.
http://twistedmatrix.com/documents/current/core/howto/time.html
http://twistedmatrix.com/documents/current/core/howto/process.html


> 3) Receive requests from a user and process them. I think this will be via WSGI HTTP.
> Example: User submits an XML template with virtual machine templates. The daemon does some simple XML parsing and writes a job script for the job resource manager. The job is submitted to the resource manager and the daemon continually checks for the status of the job with "qstat" and for messages from AMQP. It should return "live" feedback to the user and write to a log.
> 

Twisted has a built-in programmable web server, and a WSGI container is available. http://twistedmatrix.com/documents/current/web/howto/web-in-60/index.html is a good starter for web programming with Twisted, as is the general web howto: http://twistedmatrix.com/documents/current/web/howto/using-twistedweb.html

There are many ways to construct what you describe, so it's probably not appropriate to give specific recommendations other than to say what you want is absolutely feasible. It appears you've already got a good handle on what you want to achieve, which should make it easier when it comes to seeking more specific help, etc. from the mailing list once you get your feet wet.


Lucas




-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130710/6b46df54/attachment.html>

From glyph at twistedmatrix.com  Wed Jul 10 14:49:56 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 10 Jul 2013 13:49:56 -0700
Subject: [Twisted-Python] Twisted web,
	giant-file POST forwarding and early bail-out.
In-Reply-To: <51DBF43E.6040205@itamarst.org>
References: <df3d67b21ad5440e2731e2057a61ae19.squirrel@webmail.xs4all.nl>
 <51DBF43E.6040205@itamarst.org>
Message-ID: <AF0281AE-1A41-48D2-B592-E1431B12C55C@twistedmatrix.com>


On Jul 9, 2013, at 4:30 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:

> On 07/09/2013 04:04 AM, Rob Meijer wrote:
>> 3) When the token does not check out, or the connection to the server
>> fails, it remains a mystery to me how I should throw an error in such a
>> way that it allows me to send a proper error message to the client, while
>> not having to first accept the whole large file. That is, it seems rather
>> silly that I would know things failed after the first POST body chunk, but
>> would have to wait for and accept hundreds of megabytes or maybe even a
>> few gigabytes of post data before I can notify the client that something
>> went wrong.
>> 
> HTTP clients can send a "Expects: 100-continue" header (or something like that), which tells the server it should give an early rejection or acceptance before the client sends the data, in *addition* to the final response. You would still need to write some code to support this, but it is possible.

FYI, it's "Expect: 100-continue" ;-). <http://www.w3.org/Protocols/rfc2616/rfc2616-sec8>.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130710/fab272ca/attachment.html>

From msc at contact.de  Fri Jul 12 04:19:35 2013
From: msc at contact.de (Michael Schlenker)
Date: Fri, 12 Jul 2013 12:19:35 +0200
Subject: [Twisted-Python] Twisted web,
 giant-file POST forwarding and early bail-out.
In-Reply-To: <51DBF6AB.2080902@itamarst.org>
References: <df3d67b21ad5440e2731e2057a61ae19.squirrel@webmail.xs4all.nl>
 <51DBF43E.6040205@itamarst.org> <51DBF6AB.2080902@itamarst.org>
Message-ID: <51DFD837.2090308@contact.de>

Am 09.07.2013 13:40, schrieb Itamar Turner-Trauring:
> On 07/09/2013 07:30 AM, Itamar Turner-Trauring wrote:
>> HTTP clients can send a "Expects: 100-continue" header (or something
>> like that), which tells the server it should give an early rejection
>> or acceptance before the client sends the data, in *addition* to the
>> final response. You would still need to write some code to support
>> this, but it is possible.
> Although this only lets you reject based on headers, not body.

If you have a Content Size header, it works, for chunked encoding not so
much.

But client side support for 100-continue is spotty, at least the python
stdlib httplib client mishandles 100-continue requests in an attempt to
work around Microsoft IIS strangeness.

Michael

-- 
Michael Schlenker
Software Architect

CONTACT Software GmbH           Tel.:   +49 (421) 20153-80
Wiener Stra?e 1-3               Fax:    +49 (421) 20153-41
28359 Bremen
http://www.contact.de/          E-Mail: msc at contact.de

Sitz der Gesellschaft: Bremen
Gesch?ftsf?hrer: Karl Heinz Zachries, Ralf Holtgrefe
Eingetragen im Handelsregister des Amtsgerichts Bremen unter HRB 13215


From p.mayers at imperial.ac.uk  Fri Jul 12 04:25:51 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 12 Jul 2013 11:25:51 +0100
Subject: [Twisted-Python] Setting socket options before connect
Message-ID: <51DFD9AF.70609@imperial.ac.uk>

I have a use case (namely setting the Linux-specific SO_MARK socket 
option) where I need to set the socket option after the socket object is 
created but before Twisted starts to try and connect.

Is there a clean way to do this? Ideally there would be some sort of 
pre-connect function, similar to the preexec_fn for child processes, but 
any reasonably clean solution will do.

(By clean I mean "doesn't have me duplicating hundreds of lines of 
Twisted code into my own Connector/Port/etc. classes" ;o)


From itamar at futurefoundries.com  Fri Jul 12 04:34:45 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Fri, 12 Jul 2013 06:34:45 -0400
Subject: [Twisted-Python] Setting socket options before connect
In-Reply-To: <51DFD9AF.70609@imperial.ac.uk>
References: <51DFD9AF.70609@imperial.ac.uk>
Message-ID: <CAOp9P3p7UYhddDbb91zFav8Hw_E17Zp443KykGhQgQyq8nH+xw@mail.gmail.com>

Subclass twisted.internet.tcp.Client, override createInternetSocket() so it
calls setsockopt() on the socket after you've called base implementation to
create it. This breaks some abstraction boundaries, so it isn't great, but
very little code duplication is involved.

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ ? Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130712/5f90f522/attachment.html>

From p.mayers at imperial.ac.uk  Fri Jul 12 04:42:19 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 12 Jul 2013 11:42:19 +0100
Subject: [Twisted-Python] Setting socket options before connect
In-Reply-To: <CAOp9P3p7UYhddDbb91zFav8Hw_E17Zp443KykGhQgQyq8nH+xw@mail.gmail.com>
References: <51DFD9AF.70609@imperial.ac.uk>
 <CAOp9P3p7UYhddDbb91zFav8Hw_E17Zp443KykGhQgQyq8nH+xw@mail.gmail.com>
Message-ID: <51DFDD8B.6030707@imperial.ac.uk>

On 12/07/13 11:34, Itamar Turner-Trauring wrote:
> Subclass twisted.internet.tcp.Client, override createInternetSocket() so
> it calls setsockopt() on the socket after you've called base
> implementation to create it. This breaks some abstraction boundaries, so
> it isn't great, but very little code duplication is involved.

Ah, ok. Presumably I also need to subclass Connector and override 
_makeTransport to use MyClient, then call MyConnector() directly (or 
subclass the reactor... shudder)

Should there be something built in to Twisted for this? Should I open a 
ticket?


From exarkun at twistedmatrix.com  Fri Jul 12 06:09:43 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 12 Jul 2013 12:09:43 -0000
Subject: [Twisted-Python] Setting socket options before connect
In-Reply-To: <51DFDD8B.6030707@imperial.ac.uk>
References: <51DFD9AF.70609@imperial.ac.uk>
 <CAOp9P3p7UYhddDbb91zFav8Hw_E17Zp443KykGhQgQyq8nH+xw@mail.gmail.com>
 <51DFDD8B.6030707@imperial.ac.uk>
Message-ID: <20130712120943.28793.1298272201.divmod.xquotient.641@top>

On 10:42 am, p.mayers at imperial.ac.uk wrote:
>On 12/07/13 11:34, Itamar Turner-Trauring wrote:
>>Subclass twisted.internet.tcp.Client, override createInternetSocket() 
>>so
>>it calls setsockopt() on the socket after you've called base
>>implementation to create it. This breaks some abstraction boundaries, 
>>so
>>it isn't great, but very little code duplication is involved.
>
>Ah, ok. Presumably I also need to subclass Connector and override 
>_makeTransport to use MyClient, then call MyConnector() directly (or 
>subclass the reactor... shudder)
>
>Should there be something built in to Twisted for this? Should I open a 
>ticket?

If you want your code to keep working, or to work with alternate reactor 
implementations, then you'd *really* rather use a documented, tested 
interface rather than the hack outlined above.

Jean-Paul


From bock.harryw at gmail.com  Sat Jul 13 20:00:09 2013
From: bock.harryw at gmail.com (Harry Bock)
Date: Sat, 13 Jul 2013 22:00:09 -0400
Subject: [Twisted-Python] Python 3: bytes vs. str in twisted.python.filepath
Message-ID: <CABjbJ3z22c68k=ziaDkPHBMwqc7=3LdqF0TPH8mR7ZGCpZoLaw@mail.gmail.com>

Hi all,

My name is Harry Bock.  I'm interested in helping out porting Twisted to
Python 3, and I've popped in IRC a few times to introduce myself and ask a
few questions. A few developers agreed that working on trial dependencies
would be a big help.

In doing some porting work on trial, I stumbled upon a previous porting
effort (possibly by Itamar?) for twisted.python.filepath and related
modules.  It seemed like the porting effort included forcing all pathname
inputs to be byte strings instead of native strings. After some
investigation, I believe this is the wrong approach, but I wanted to start
a discussion here first.  Some thoughts:

(a) As of Python 3.3, use of the ANSI API in Windows is deprecated[1], so
many functions in os and os.path raise DeprecationWarning when given byte
strings as input.  Although win32 is not an initial target of the porting
effort, we'll have to support it eventually and the API should be supported
before then.

(b) Misunderstandings at the application level about the underlying
filesystem's path encoding is not the problem of the Twisted API.  Correct
me if I'm wrong, but that's the responsibility of the system administrator
or individual user (at least on UNIX) to set the LANG environment variable,
or for the application to call setlocale(3) to explicitly override it.

(c) If we do not allow unicode strings, we will be forcing the application
developer to decide how to encode paths when using the FilePath API.  Per
(b) above, the user will have to call sys.getfilesystemencoding()[2] to
divine what encoding to use before using the API at all, which to me is
terribly annoying and would just add str.encode calls everywhere.

Thus, my vote is that on Python 2.x, Twisted should accept either the
native str or unicode types for path names, and on Python 3.x, only accept
the str type to prevent deprecation issues with system calls.  I have a
patch set that will make this happen including unittest modifications; if
there's a consensus I'm happy to open a ticket and submit the patches.

Thanks!

[1] http://bugs.python.org/issue13374
[2] http://docs.python.org/3/library/sys.html#sys.getfilesystemencoding
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130713/e4a9a989/attachment.html>

From mithrandi at mithrandi.net  Sun Jul 14 04:27:47 2013
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sun, 14 Jul 2013 12:27:47 +0200
Subject: [Twisted-Python] Python 3: bytes vs. str in
	twisted.python.filepath
In-Reply-To: <CABjbJ3z22c68k=ziaDkPHBMwqc7=3LdqF0TPH8mR7ZGCpZoLaw@mail.gmail.com>
References: <CABjbJ3z22c68k=ziaDkPHBMwqc7=3LdqF0TPH8mR7ZGCpZoLaw@mail.gmail.com>
Message-ID: <CAMcKhMT5wP5pcv93Ae1uHZwnr5rYE9k1te5uu_UCURW5z8JR+g@mail.gmail.com>

On Sun, Jul 14, 2013 at 4:00 AM, Harry Bock <bock.harryw at gmail.com> wrote:

> (b) Misunderstandings at the application level about the underlying
> filesystem's path encoding is not the problem of the Twisted API.  Correct
> me if I'm wrong, but that's the responsibility of the system administrator
> or individual user (at least on UNIX) to set the LANG environment variable,
> or for the application to call setlocale(3) to explicitly override it.
>

There is no way to enforce a particular setting of the LANG environment
variable globally; multiple users could use filenames encoded in different
encodings (in fact even a single user could do this), and files could be
transferred from other systems using different encodings. While a
reasonable person might insist on the use of UTF-8 everywhere, there is no
way to guarantee that UNIX filenames are all in the same encoding, or are
even in any particular encoding at all (they might be binary non-text
garbage), and the inability to deal with filenames like this would be
somewhat of a serious defect.

On Windows, the reverse situation obtains, of course.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130714/47d13d66/attachment.html>

From itamar at itamarst.org  Sun Jul 14 06:16:12 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 14 Jul 2013 08:16:12 -0400
Subject: [Twisted-Python] Python 3: bytes vs. str in
	twisted.python.filepath
In-Reply-To: <CABjbJ3z22c68k=ziaDkPHBMwqc7=3LdqF0TPH8mR7ZGCpZoLaw@mail.gmail.com>
References: <CABjbJ3z22c68k=ziaDkPHBMwqc7=3LdqF0TPH8mR7ZGCpZoLaw@mail.gmail.com>
Message-ID: <51E2968C.9040001@itamarst.org>

On 07/13/2013 10:00 PM, Harry Bock wrote:
> Hi all,
>
> My name is Harry Bock.  I'm interested in helping out porting Twisted 
> to Python 3, and I've popped in IRC a few times to introduce myself 
> and ask a few questions. A few developers agreed that working on trial 
> dependencies would be a big help.
>
> In doing some porting work on trial, I stumbled upon a previous 
> porting effort (possibly by Itamar?) for twisted.python.filepath and 
> related modules.  It seemed like the porting effort included forcing 
> all pathname inputs to be byte strings instead of native strings.

You imply that this was a change, somehow, but it wasn't. The API was 
*always* bytes and it continues to be bytes on Python 3.

It's a common Python 3 porting mistake to change everything from bytes 
to unicode just because. E.g. Python standard library does this in many 
places for no good reason, resulting in bugs that are still being fixed 
(http://bugs.python.org/issue12411) or APIs that are less useful 
(zipfile docs explicitly state that there is no standard encoding in zip 
files, but Python 3 zipfile module only supports one specific encoding 
because they switched to Unicode and didn't bother reading the module's 
own docs). Our goal in porting was backwards compatibility with Python 2 
code, so porters don't have to change everything, and correctness. And, 
in this particular case, to get something working in the minimal amount 
of time - *adding* Unicode support is useful and should be done.

> After some investigation, I believe this is the wrong approach, but I 
> wanted to start a discussion here first.  Some thoughts:
>
> (a) As of Python 3.3, use of the ANSI API in Windows is deprecated[1], 
> so many functions in os and os.path raise DeprecationWarning when 
> given byte strings as input.  Although win32 is not an initial target 
> of the porting effort, we'll have to support it eventually and the API 
> should be supported before then.
>
> (b) Misunderstandings at the application level about the underlying 
> filesystem's path encoding is not the problem of the Twisted API.  
> Correct me if I'm wrong, but that's the responsibility of the system 
> administrator or individual user (at least on UNIX) to set the LANG 
> environment variable, or for the application to call setlocale(3) to 
> explicitly override it.
Given operating systems that don't really know about encodings on the 
filesystem level, forcing everything to be unicode doesn't make sense. 
I'm pretty sure you can end up with files in multiple different Unicode 
encodings on same filesystem on Linux, for example.

> (c) If we do not allow unicode strings, we will be forcing the 
> application developer to decide how to encode paths when using the 
> FilePath API.  Per (b) above, the user will have to call 
> sys.getfilesystemencoding()[2] to divine what encoding to use before 
> using the API at all, which to me is terribly annoying and would just 
> add str.encode calls everywhere.
>
It is indeed a problem that we only support bytes in FilePath on Python 
3. As I mentioned above, Unicode support is missing only due to lack of 
time in the initial port.

> Thus, my vote is that on Python 2.x, Twisted should accept either the 
> native str or unicode types for path names, and on Python 3.x, only 
> accept the str type to prevent deprecation issues with system calls.  
> I have a patch set that will make this happen including unittest 
> modifications; if there's a consensus I'm happy to open a ticket and 
> submit the patches.

The ideal situation would be to support bytes and Unicode on Python 2 
*and* Python 3, for maximum compatibility. Even if deprecated on 
Windows, filesystem operations on Python 3 still do accept bytes (and 
they're not deprecated elsewhere). Given existing code that already 
takes bytes, switching to only doing Unicode on Python 3 would not be 
backwards compatible, so we can't really do that without a bunch of 
deprecation warnings and a few releases. Instead we should just do what 
Python does: if you start with bytes path you always get back bytes, if 
you start with Unicode path you always get back Unicode.



From bock.harryw at gmail.com  Sun Jul 14 08:18:20 2013
From: bock.harryw at gmail.com (Harry Bock)
Date: Sun, 14 Jul 2013 10:18:20 -0400
Subject: [Twisted-Python] Python 3: bytes vs. str in
	twisted.python.filepath
In-Reply-To: <51E2968C.9040001@itamarst.org>
References: <CABjbJ3z22c68k=ziaDkPHBMwqc7=3LdqF0TPH8mR7ZGCpZoLaw@mail.gmail.com>
 <51E2968C.9040001@itamarst.org>
Message-ID: <CABjbJ3y0gHUD3Qz8FCQHHK7_eRhWnd6rfxFHQn8OvqYDH2y_ZA@mail.gmail.com>

On Sun, Jul 14, 2013 at 8:16 AM, Itamar Turner-Trauring <itamar at itamarst.org
> wrote:

> On 07/13/2013 10:00 PM, Harry Bock wrote:
>
>> Hi all,
>>
>> My name is Harry Bock.  I'm interested in helping out porting Twisted to
>> Python 3, and I've popped in IRC a few times to introduce myself and ask a
>> few questions. A few developers agreed that working on trial dependencies
>> would be a big help.
>>
>> In doing some porting work on trial, I stumbled upon a previous porting
>> effort (possibly by Itamar?) for twisted.python.filepath and related
>> modules.  It seemed like the porting effort included forcing all pathname
>> inputs to be byte strings instead of native strings.
>>
>
> You imply that this was a change, somehow, but it wasn't. The API was
> *always* bytes and it continues to be bytes on Python 3.
>

Ah, I understand now.  Since the native string type was used in Python 2,
it follows that in Python 3 the API should be bytes.


>
> It's a common Python 3 porting mistake to change everything from bytes to
> unicode just because. E.g. Python standard library does this in many places
> for no good reason, resulting in bugs that are still being fixed (
> http://bugs.python.org/**issue12411 <http://bugs.python.org/issue12411>)
> or APIs that are less useful (zipfile docs explicitly state that there is
> no standard encoding in zip files, but Python 3 zipfile module only
> supports one specific encoding because they switched to Unicode and didn't
> bother reading the module's own docs). Our goal in porting was backwards
> compatibility with Python 2 code, so porters don't have to change
> everything, and correctness. And, in this particular case, to get something
> working in the minimal amount of time - *adding* Unicode support is useful
> and should be done.
>
>
>  After some investigation, I believe this is the wrong approach, but I
>> wanted to start a discussion here first.  Some thoughts:
>>
>> (a) As of Python 3.3, use of the ANSI API in Windows is deprecated[1], so
>> many functions in os and os.path raise DeprecationWarning when given byte
>> strings as input.  Although win32 is not an initial target of the porting
>> effort, we'll have to support it eventually and the API should be supported
>> before then.
>>
>> (b) Misunderstandings at the application level about the underlying
>> filesystem's path encoding is not the problem of the Twisted API.  Correct
>> me if I'm wrong, but that's the responsibility of the system administrator
>> or individual user (at least on UNIX) to set the LANG environment variable,
>> or for the application to call setlocale(3) to explicitly override it.
>>
> Given operating systems that don't really know about encodings on the
> filesystem level, forcing everything to be unicode doesn't make sense. I'm
> pretty sure you can end up with files in multiple different Unicode
> encodings on same filesystem on Linux, for example.


This is very true and I didn't consider it in my initial investigation.
While I think it would be uncommon to have files in multiple encodings on
the same filesystem, it certainly would not be rare - to Tristan's point,
copying names from filesystem to filesystem could easily result in multiple
encodings.  The operating system may not need to understand the encodings,
but applications do to display them correctly,  Which leads to your last
point...

>
>  Thus, my vote is that on Python 2.x, Twisted should accept either the
>> native str or unicode types for path names, and on Python 3.x, only accept
>> the str type to prevent deprecation issues with system calls.  I have a
>> patch set that will make this happen including unittest modifications; if
>> there's a consensus I'm happy to open a ticket and submit the patches.
>>
>
> The ideal situation would be to support bytes and Unicode on Python 2
> *and* Python 3, for maximum compatibility. Even if deprecated on Windows,
> filesystem operations on Python 3 still do accept bytes (and they're not
> deprecated elsewhere). Given existing code that already takes bytes,
> switching to only doing Unicode on Python 3 would not be backwards
> compatible, so we can't really do that without a bunch of deprecation
> warnings and a few releases. Instead we should just do what Python does: if
> you start with bytes path you always get back bytes, if you start with
> Unicode path you always get back Unicode.
>
>
Yes, you're right, that's probably the best solution.  It would not be
terribly hard to do so - then application developers can choose whether to
defer to the local user's interpretation of the setting, or explicitly use
byte paths.  Thanks so much for your input!

Is this something I can open a ticket for?



>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130714/a1b87813/attachment-0001.html>

From itamar at itamarst.org  Sun Jul 14 09:35:20 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 14 Jul 2013 11:35:20 -0400
Subject: [Twisted-Python] Python 3: bytes vs. str in
	twisted.python.filepath
In-Reply-To: <CABjbJ3y0gHUD3Qz8FCQHHK7_eRhWnd6rfxFHQn8OvqYDH2y_ZA@mail.gmail.com>
References: <CABjbJ3z22c68k=ziaDkPHBMwqc7=3LdqF0TPH8mR7ZGCpZoLaw@mail.gmail.com>
 <51E2968C.9040001@itamarst.org>
 <CABjbJ3y0gHUD3Qz8FCQHHK7_eRhWnd6rfxFHQn8OvqYDH2y_ZA@mail.gmail.com>
Message-ID: <51E2C538.3060807@itamarst.org>

On 07/14/2013 10:18 AM, Harry Bock wrote:
>
> Is this something I can open a ticket for?
>
I believe there's already a ticket of sorts, with an old defunct branch 
starting working on this - https://twistedmatrix.com/trac/ticket/2366 - 
it would be really great if you could revive it and add support for this 
feature. Using FilePath is definitely annoying on Python 3, and in 
general Unicode makes more sense in many (most?) situations.

-Itamar


From glyph at twistedmatrix.com  Sun Jul 14 19:01:42 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 14 Jul 2013 18:01:42 -0700
Subject: [Twisted-Python] Setting socket options before connect
In-Reply-To: <20130712120943.28793.1298272201.divmod.xquotient.641@top>
References: <51DFD9AF.70609@imperial.ac.uk>
 <CAOp9P3p7UYhddDbb91zFav8Hw_E17Zp443KykGhQgQyq8nH+xw@mail.gmail.com>
 <51DFDD8B.6030707@imperial.ac.uk>
 <20130712120943.28793.1298272201.divmod.xquotient.641@top>
Message-ID: <C529325F-6517-436B-9E19-677A85FB4BBB@twistedmatrix.com>


On Jul 12, 2013, at 5:09 AM, exarkun at twistedmatrix.com wrote:

> On 10:42 am, p.mayers at imperial.ac.uk wrote:
>> On 12/07/13 11:34, Itamar Turner-Trauring wrote:
>>> Subclass twisted.internet.tcp.Client, override createInternetSocket() so
>>> it calls setsockopt() on the socket after you've called base
>>> implementation to create it. This breaks some abstraction boundaries, so
>>> it isn't great, but very little code duplication is involved.
>> 
>> Ah, ok. Presumably I also need to subclass Connector and override _makeTransport to use MyClient, then call MyConnector() directly (or subclass the reactor... shudder)
>> 
>> Should there be something built in to Twisted for this? Should I open a ticket?
> 
> If you want your code to keep working, or to work with alternate reactor implementations, then you'd *really* rather use a documented, tested interface rather than the hack outlined above.

Does such an API exist today, or should a ticket be filed for one?

For everyone's information, in case it's not entirely clear from the documentation resources available: we hope to eventually deprecate the whole 'tcp' module so that people (myself included ;-)) stop subclassing stuff in it, so writing new code that depends on this, even the nominally "public" parts of the API (the bits without underscores) would be really unfortunate.  If we can figure out something that uses totally public APIs without subclassing tcp.Client that would be best; if not, we should really have a ticket open to fix the API so that it is possible.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130714/d9ad7323/attachment.html>

From glyph at twistedmatrix.com  Sun Jul 14 19:57:27 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 14 Jul 2013 18:57:27 -0700
Subject: [Twisted-Python] Python 3: bytes vs. str in
	twisted.python.filepath
In-Reply-To: <CABjbJ3y0gHUD3Qz8FCQHHK7_eRhWnd6rfxFHQn8OvqYDH2y_ZA@mail.gmail.com>
References: <CABjbJ3z22c68k=ziaDkPHBMwqc7=3LdqF0TPH8mR7ZGCpZoLaw@mail.gmail.com>
 <51E2968C.9040001@itamarst.org>
 <CABjbJ3y0gHUD3Qz8FCQHHK7_eRhWnd6rfxFHQn8OvqYDH2y_ZA@mail.gmail.com>
Message-ID: <3552258B-A1F1-4969-A504-3E61DC8B8DF8@twistedmatrix.com>

First off, hi Harry!  I am super glad that someone has taken an interest in this.  Please let me know if I can be helpful in your effort to fix this.  FilePath totally has the right sort of shape to handle all these problems very gracefully, but its current implementation is (as you have noticed!) a disaster, regardless of python 2/3 issues, it doesn't handle text/bytes correctly on python 2.

Also, sorry for being a bit late to the party, been on vacation for a week :-).

On Jul 14, 2013, at 7:18 AM, Harry Bock <bock.harryw at gmail.com> wrote:

> On Sun, Jul 14, 2013 at 8:16 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> On 07/13/2013 10:00 PM, Harry Bock wrote:
> Hi all,
> 
> My name is Harry Bock.  I'm interested in helping out porting Twisted to Python 3, and I've popped in IRC a few times to introduce myself and ask a few questions. A few developers agreed that working on trial dependencies would be a big help.
> 
> In doing some porting work on trial, I stumbled upon a previous porting effort (possibly by Itamar?) for twisted.python.filepath and related modules.  It seemed like the porting effort included forcing all pathname inputs to be byte strings instead of native strings.
> 
> You imply that this was a change, somehow, but it wasn't. The API was *always* bytes and it continues to be bytes on Python 3.
> 
> Ah, I understand now.  Since the native string type was used in Python 2, it follows that in Python 3 the API should be bytes.

It doesn't really make sense to talk about "native strings" unless you're talking about Python code objects; __doc__ and func_name are "native strings"; the inputs to FilePath are bytes, pure and simple.  This is mostly just because FilePath was designed way back when I only really knew about the way path names worked on Linux.

Among several of the design errors in Python 3's allegedly superior unicode support was to call the text type "str", when this was a confusing name in the first place, and is now ambiguous, confusing, and arguably wrong all at once; at the cost of one additional letter, it could have been "text", which is both a whole word and a more accurate description of what it does.  I generally use "text" rather than "string" to describe the text type anyway, because it's a lot less ambiguous and requires less backtracking ("oh I was talking about python 2 there, let me rephrase").

> It's a common Python 3 porting mistake to change everything from bytes to unicode just because. E.g. Python standard library does this in many places for no good reason, resulting in bugs that are still being fixed (http://bugs.python.org/issue12411) or APIs that are less useful (zipfile docs explicitly state that there is no standard encoding in zip files, but Python 3 zipfile module only supports one specific encoding because they switched to Unicode and didn't bother reading the module's own docs). Our goal in porting was backwards compatibility with Python 2 code, so porters don't have to change everything, and correctness. And, in this particular case, to get something working in the minimal amount of time - *adding* Unicode support is useful and should be done.
> 
> 
> After some investigation, I believe this is the wrong approach, but I wanted to start a discussion here first.  Some thoughts:
> 
> (a) As of Python 3.3, use of the ANSI API in Windows is deprecated[1], so many functions in os and os.path raise DeprecationWarning when given byte strings as input.  Although win32 is not an initial target of the porting effort, we'll have to support it eventually and the API should be supported before then.
> 
> (b) Misunderstandings at the application level about the underlying filesystem's path encoding is not the problem of the Twisted API.  Correct me if I'm wrong, but that's the responsibility of the system administrator or individual user (at least on UNIX) to set the LANG environment variable, or for the application to call setlocale(3) to explicitly override it.
> Given operating systems that don't really know about encodings on the filesystem level, forcing everything to be unicode doesn't make sense. I'm pretty sure you can end up with files in multiple different Unicode encodings on same filesystem on Linux, for example.
> 
> This is very true and I didn't consider it in my initial investigation.  While I think it would be uncommon to have files in multiple encodings on the same filesystem, it certainly would not be rare - to Tristan's point, copying names from filesystem to filesystem could easily result in multiple encodings.  The operating system may not need to understand the encodings, but applications do to display them correctly,  Which leads to your last point...

This is not really true.  This is how Linux and BSD handle file names; it is not how OS X handle file names.  (Nor is it how Windows works, as you've mentioned above.)

On OS X, file names are normalized (I forget the normalization at the moment, but you can look it up) UTF-8.  They _must_ be normalized UTF-8; it doesn't matter what $LANG is.  If you try to deal with filenames that are invalid UTF-8 byte sequences, the OS will URL-encode portions of the filename for you and _force_ its name (as returned by listdir() at least) to be a valid UTF-8 sequence.  If you give it something non-normalized, it will normalize it for you.

> Thus, my vote is that on Python 2.x, Twisted should accept either the native str or unicode types for path names, and on Python 3.x, only accept the str type to prevent deprecation issues with system calls.  I have a patch set that will make this happen including unittest modifications; if there's a consensus I'm happy to open a ticket and submit the patches.
> 
> The ideal situation would be to support bytes and Unicode on Python 2 *and* Python 3, for maximum compatibility. Even if deprecated on Windows, filesystem operations on Python 3 still do accept bytes (and they're not deprecated elsewhere). Given existing code that already takes bytes, switching to only doing Unicode on Python 3 would not be backwards compatible, so we can't really do that without a bunch of deprecation warnings and a few releases. Instead we should just do what Python does: if you start with bytes path you always get back bytes, if you start with Unicode path you always get back Unicode.
> 
> Yes, you're right, that's probably the best solution.  It would not be terribly hard to do so - then application developers can choose whether to defer to the local user's interpretation of the setting, or explicitly use byte paths.  Thanks so much for your input!

The design should not be as naive as "support bytes" or "support unicode", or even "support both".  In order to deal with some of these nastier edge-cases, you need a method that can give you a name to display to a user that's "human readable", a weird-Python-broken-surrogates-trick unicode object, and some bytes.  Then there's possibly some extra methods that could be added which are only sometimes available, like "driveLetter()" or somesuch.  (Maybe we could do better and have some kind of general mount-point object, but I digress.)

In other words, we need to give the developer an expressive enough API to clearly indicate their intent, and then have clear enough API documentation for them to figure out what their intent is :).

At the implementation level, these potential methods are both platform-specific and subtly distinctive.  For example, the "human readable name" implementation of a broken FilePath should include replacement characters rather than broken-surrogate hacks.  Replacement characters have a defined method for displaying them; since broken surrogates are just invalid garbage, some software might elect not to display the string at all, or throw an error.  It might also be sensible (as a future enhancement, this is not something we should try to do as a basic part of proper unicode support) to do some encoding-guessing and mojibake detection when trying to compute the human-readable name, since this name is just for display and it makes sense to work as hard as possible to display something sensible, since it does NOT need to be able to be fed back in to FilePath.  But of course on OS X, the thing to do would just be to convert to the percent-escaped version, since that's what the platform presents.  And on Windows, it might be sensible for the thing that gives you bytes to give you a faithful UTF-8 version of the filename rather than some platform-dependent ANSI junk, since as far as I can tell there's no need to ever get a byte sequence you could pass back to some other ANSI API.  If it were, that could be an explicitly separate API.

Finally, the fact that FilePath exposes the internal representation of the path (as ".path") is sort of a design error, and we should eventually deprecate that attribute, since there are multiple use-cases you might want that string for and we should return the appropriate version depending on which one you want.  I wouldn't worry about getting that attribute to do anything useful beyond a very rudimentary level of compatibility; in fact it would be great if the internal storage of the path were always unicode on Windows and always bytes on UNIX-ish platforms, and ".path" were just a proxy that always gave you bytes.  (Although possibly the internal representation should just be unicode too on OS X, I keep finding myself on the fence about that.)

> Is this something I can open a ticket for?

Hopefully the existing ticket is sufficient, but, open as many as you need :).  There might be a bunch of methods that need modification here, and at least e.g. the ZipPath work could be done separately.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130714/3f842716/attachment-0001.html>

From exarkun at twistedmatrix.com  Mon Jul 15 05:44:08 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 15 Jul 2013 11:44:08 -0000
Subject: [Twisted-Python] Setting socket options before connect
In-Reply-To: <C529325F-6517-436B-9E19-677A85FB4BBB@twistedmatrix.com>
References: <51DFD9AF.70609@imperial.ac.uk>
 <CAOp9P3p7UYhddDbb91zFav8Hw_E17Zp443KykGhQgQyq8nH+xw@mail.gmail.com>
 <51DFDD8B.6030707@imperial.ac.uk>
 <20130712120943.28793.1298272201.divmod.xquotient.641@top>
 <C529325F-6517-436B-9E19-677A85FB4BBB@twistedmatrix.com>
Message-ID: <20130715114408.28793.1484770856.divmod.xquotient.663@top>

On 01:01 am, glyph at twistedmatrix.com wrote:
>
>On Jul 12, 2013, at 5:09 AM, exarkun at twistedmatrix.com wrote:
>>On 10:42 am, p.mayers at imperial.ac.uk wrote:
>>>On 12/07/13 11:34, Itamar Turner-Trauring wrote:
>>>>Subclass twisted.internet.tcp.Client, override 
>>>>createInternetSocket() so
>>>>it calls setsockopt() on the socket after you've called base
>>>>implementation to create it. This breaks some abstraction 
>>>>boundaries, so
>>>>it isn't great, but very little code duplication is involved.
>>>
>>>Ah, ok. Presumably I also need to subclass Connector and override 
>>>_makeTransport to use MyClient, then call MyConnector() directly (or 
>>>subclass the reactor... shudder)
>>>
>>>Should there be something built in to Twisted for this? Should I open 
>>>a ticket?
>>
>>If you want your code to keep working, or to work with alternate 
>>reactor implementations, then you'd *really* rather use a documented, 
>>tested interface rather than the hack outlined above.
>
>Does such an API exist today, or should a ticket be filed for one?

Hm, I'm not *totally* sure what you mean.

There's the approach Itamar outlined, using APIs such as 
`twisted.internet.tcp.{Client,Server}`.  I don't think we should codify 
this as the public, stable, encouraged API to use - for precisely the 
reasons you give below.

There's various other APIs that are clearly related but definitely don't 
currently allow you to wedge this functionality in:

  1) reactor.connectTCP - nowhere to pass extra socket options now, but 
we could add more arguments to it I suppose.  Doesn't sound very nice to 
me.

  2) endpoints?  Again, no current support, but it's a place you could 
add new parameters.  Of course, this isn't a complete solution, since 
endpoints mostly just use reactor methods to set things up - but if we 
had a nice endpoints-based API then we could have a gross lower-level 
API that no one actually has to use.  Still, is 
"tcp:host=A:port=B:sockopt=TCP_CORK|TCP_QUICKACK" the road we want to go 
down?

  3) More transport methods - but this is an incomplete solution, as 
certain sockopts only make sense before a connection, so once you have a 
transport it's too late.

Maybe someone else has some suggestions from a totally different 
ballpark that solve the problem more pleasantly?

Anyhow, I think this certainly means a ticket should be filed for 
introducing some API - but it seems that a little more discussion about 
what the API should be will still be necessary.

Jean-Paul
>For everyone's information, in case it's not entirely clear from the 
>documentation resources available: we hope to eventually deprecate the 
>whole 'tcp' module so that people (myself included ;-)) stop 
>subclassing stuff in it, so writing new code that depends on this, even 
>the nominally "public" parts of the API (the bits without underscores) 
>would be really unfortunate.  If we can figure out something that uses 
>totally public APIs without subclassing tcp.Client that would be best; 
>if not, we should really have a ticket open to fix the API so that it 
>is possible.
>
>-glyph


From _ at lvh.io  Mon Jul 15 06:59:39 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Mon, 15 Jul 2013 14:59:39 +0200
Subject: [Twisted-Python] Twisted and new-style classes
Message-ID: <CAE_Hg6b1uoh+pamcVPSQcNU3WB_1SwwBopVRHo-oDfzg7zuy5w@mail.gmail.com>

Hi!

Maciej from the PyPy team has graciously offered to upgrade all of
Twisted's existing old-style classes to new-style. The reason this is now
also a mailing list thread is because it may, potentially, break some
things, and we want people to have a heads up. Of course, Twisted will
never break your stuff without warning (at least not intentionally) and the
normal compatibility policy is in effect as always :)

The catch is that Maciej wants some kind of guarantee that at some point,
this will be on by default. At least two committers (myself and Glyph) want
this, so I'm confident this is the case: unless someone highlights a huge
flaw in my reasoning that shows that we can't actually do this :)

Benefits:

- We get to use everything that requires new-style classes, e.g. the
descriptor protocol, and by extension classmethods, staticmethods,
properties...
- Performance benefit on PyPy
- Consistency of behavior between 2.x and 3.x

Counterarguments:

- It's a lot of work. That's true, but shouldn't concern you: we have
someone who says they're willing to actually do that work.
- It will break things. That is probably true, but Twisted never promises
not to break anything ever. It has a compatibility policy, the guiding line
for which is "the first one is always free". As long as we have a full,
real release where we *warn* people that something is going to happen and
they should test it now, we're satisfying that policy. The problem is that
AFAICT there's no obvious way to identify where problems will occur (since
it's a consequence of how people use current old-style things). The
suggested approach to this is that we have a release where all classes that
are going to be new-style are old-style by default, but, given e.g. an
environment variable, all of them *can* be new-style. The warning could
then be that you should turn on that environment variable (requiring
conscious action and being easy enough to undo if your code breaks).

I would suggest doing the transition in small steps, and adding the
environment variable as a priority. That way, people who know about this
can at least already run their tests before the entire process is complete.
Also, just because it has to be complete (but off by default) for at least
one release, doesn't mean it has be exactly one release :)

For new development, IIUC, new-style classes are already a requirement, so
this doesn't affect it.

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130715/2eb009ca/attachment.html>

From marchael at ya.ru  Tue Jul 16 13:13:53 2013
From: marchael at ya.ru (MichaelMayorov)
Date: Tue, 16 Jul 2013 19:13:53 +0000 (UTC)
Subject: [Twisted-Python] Testing AMP-based code
References: <87zjv4pe0x.fsf@x200s.i-did-not-set--mail-host-address--so-tickle-me>
 <20130612231612.5484.1361672252.divmod.xquotient.46@top>
Message-ID: <loom.20130716T204922-790@post.gmane.org>

 <exarkun <at> twistedmatrix.com> writes:
> I think this is thinking in the right direction.  Twisted generally 
> tries to be responsible for testing its own code, and the serialization 
> from commands to bytes (and the reverse) that AMP does is part of 
> Twisted, so you should really be free from the burden of testing that 
> that stuff works.
> 
> ....
> 
> Some pieces are probably still missing from the public API - for 
> example, you do want to test that your objects all get properly 
> serialized and deserialized through AMP, particularly if you're 
> implementing custom Argument types.  There are some private APIs, 
> _objectsToStrings and _stringsToObjects mostly, that really help with 
> testing this, and we should think about how to expose this functionality 
> publically.  Also, we should document this whole pile of stuff.  Maybe 
> you'd be interested in writing something up after you've had a chance to 
> play with these ideas?
> 
> Jean-Paul
> 


Greetings!

Perhaps I should create a new thread, but I think that my problem could be 
related with this question.

I want to implement master/slave protocol based on AMP, here is a slave side 
code https://github.com/MichaelMayorov/buildbot/compare/fake-master-slave-
amp

The problem is that I want to pass few arguments to Bot 
https://github.com/MichaelMayorov/buildbot/compare/fake-master-slave-
amp#L0R38 from this place 
https://github.com/MichaelMayorov/buildbot/compare/fake-master-slave-
amp#L0R124
but current implementation not allow me to do this. I've read twisted API 
docs and discussed my idea on #buildbot where finally take advice to post my 
question here.

Thanks!



From girish946 at gmail.com  Wed Jul 17 00:09:25 2013
From: girish946 at gmail.com (Girish Joshi)
Date: Wed, 17 Jul 2013 11:39:25 +0530
Subject: [Twisted-Python] enable ssl in python application.
Message-ID: <CALkY8p-7eFuAa1MMFVdu1BPeBcsvPGFJhuSafG0tzEz6CYEYbg@mail.gmail.com>

I want to enable ssl on port 7081 for my python application I'm using this
port for xmlrpc. I have twisted library installed but I'm not getting
exactly how to use it's functions to enable ssl. here is my code.

class server:
         reactor.listenTCP(7081, server.Site(myapp))
         reactor.run()

and at client side:

server_proxy = xmlrpclib.Server("http://localhost:7081",allow_none=True)

and what code should be there at the client side please suggest solution
for that. I also want to do the same thing for java client for the same
application(python server).

please suggest solution for that.

girish.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130717/0d7c9e32/attachment.html>

From exarkun at twistedmatrix.com  Wed Jul 17 05:10:08 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 17 Jul 2013 11:10:08 -0000
Subject: [Twisted-Python] enable ssl in python application.
In-Reply-To: <CALkY8p-7eFuAa1MMFVdu1BPeBcsvPGFJhuSafG0tzEz6CYEYbg@mail.gmail.com>
References: <CALkY8p-7eFuAa1MMFVdu1BPeBcsvPGFJhuSafG0tzEz6CYEYbg@mail.gmail.com>
Message-ID: <20130717111008.28793.143052471.divmod.xquotient.668@top>

On 06:09 am, girish946 at gmail.com wrote:
>I want to enable ssl on port 7081 for my python application I'm using 
>this
>port for xmlrpc. I have twisted library installed but I'm not getting
>exactly how to use it's functions to enable ssl. here is my code.

Have you read the SSL documentation?

See http://twistedmatrix.com/documents/current/core/howto/ssl.html

Jean-Paul


From exarkun at twistedmatrix.com  Wed Jul 17 05:14:55 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 17 Jul 2013 11:14:55 -0000
Subject: [Twisted-Python] Passing arguments to protocol instances (was Re:
 Testing AMP-based code)
In-Reply-To: <loom.20130716T204922-790@post.gmane.org>
References: <87zjv4pe0x.fsf@x200s.i-did-not-set--mail-host-address--so-tickle-me>
 <20130612231612.5484.1361672252.divmod.xquotient.46@top>
 <loom.20130716T204922-790@post.gmane.org>
Message-ID: <20130717111455.28793.1180420774.divmod.xquotient.675@top>

On 16 Jul, 07:13 pm, marchael at ya.ru wrote:
><exarkun <at> twistedmatrix.com> writes:
>>I think this is thinking in the right direction.  Twisted generally
>>tries to be responsible for testing its own code, and the 
>>serialization
>>from commands to bytes (and the reverse) that AMP does is part of
>>Twisted, so you should really be free from the burden of testing that
>>that stuff works.
>>
>>....
>>
>>Some pieces are probably still missing from the public API - for
>>example, you do want to test that your objects all get properly
>>serialized and deserialized through AMP, particularly if you're
>>implementing custom Argument types.  There are some private APIs,
>>_objectsToStrings and _stringsToObjects mostly, that really help with
>>testing this, and we should think about how to expose this 
>>functionality
>>publically.  Also, we should document this whole pile of stuff.  Maybe
>>you'd be interested in writing something up after you've had a chance 
>>to
>>play with these ideas?
>>
>>Jean-Paul
>
>
>Greetings!
>
>Perhaps I should create a new thread, but I think that my problem could 
>be
>related with this question.
>
>I want to implement master/slave protocol based on AMP, here is a slave 
>side
>code https://github.com/MichaelMayorov/buildbot/compare/fake-master- 
>slave-
>amp
>
>The problem is that I want to pass few arguments to Bot
>https://github.com/MichaelMayorov/buildbot/compare/fake-master-slave-
>amp#L0R38 from this place
>https://github.com/MichaelMayorov/buildbot/compare/fake-master-slave-
>amp#L0R124
>but current implementation not allow me to do this. I've read twisted 
>API
>docs and discussed my idea on #buildbot where finally take advice to 
>post my
>question here.

There are a lot of ways to go about this.  The smallest change required 
to pass an argument to the `Bot` protocol in your code is to use a 
lambda:

    factory = Factory()
    factory.protocol = lambda: Bot(arg1, arg2, ...)

This isn't necessarily the best solution.  Some other options include:

  - use the newly introduced Factory.forProtocol(Bot, arg1, arg2, ...)
  - use connectProtocol(endpoint, Bot(arg1, arg2, ...)) (only slightly 
less new)

Jean-Paul


From glyph at twistedmatrix.com  Wed Jul 17 11:44:05 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 17 Jul 2013 10:44:05 -0700
Subject: [Twisted-Python] Setting socket options before connect
In-Reply-To: <20130715114408.28793.1484770856.divmod.xquotient.663@top>
References: <51DFD9AF.70609@imperial.ac.uk>
 <CAOp9P3p7UYhddDbb91zFav8Hw_E17Zp443KykGhQgQyq8nH+xw@mail.gmail.com>
 <51DFDD8B.6030707@imperial.ac.uk>
 <20130712120943.28793.1298272201.divmod.xquotient.641@top>
 <C529325F-6517-436B-9E19-677A85FB4BBB@twistedmatrix.com>
 <20130715114408.28793.1484770856.divmod.xquotient.663@top>
Message-ID: <90F2544A-F578-4278-AF35-3D8932194A9F@twistedmatrix.com>


On Jul 15, 2013, at 4:44 AM, exarkun at twistedmatrix.com wrote:

> On 01:01 am, glyph at twistedmatrix.com wrote:
>> 
>> On Jul 12, 2013, at 5:09 AM, exarkun at twistedmatrix.com wrote:
>>> On 10:42 am, p.mayers at imperial.ac.uk wrote:
>>>> On 12/07/13 11:34, Itamar Turner-Trauring wrote:
>>>>> Subclass twisted.internet.tcp.Client, override createInternetSocket() so
>>>>> it calls setsockopt() on the socket after you've called base
>>>>> implementation to create it. This breaks some abstraction boundaries, so
>>>>> it isn't great, but very little code duplication is involved.
>>>> 
>>>> Ah, ok. Presumably I also need to subclass Connector and override _makeTransport to use MyClient, then call MyConnector() directly (or subclass the reactor... shudder)
>>>> 
>>>> Should there be something built in to Twisted for this? Should I open a ticket?
>>> 
>>> If you want your code to keep working, or to work with alternate reactor implementations, then you'd *really* rather use a documented, tested interface rather than the hack outlined above.
>> 
>> Does such an API exist today, or should a ticket be filed for one?
> 
> Hm, I'm not *totally* sure what you mean.

Mostly just socratic method: you said "don't do this, do something else", I am just curious what "do something else" is :-).  Given that no documented, tested interfaces actually exist, "use a documented, tested interface" is not presently an option - "create a documented, tested interface" seems to be what you (well, we, really) are suggesting, which means somebody needs to come up with a specification and file a ticket to make the change to Twisted.

> There's the approach Itamar outlined, using APIs such as `twisted.internet.tcp.{Client,Server}`.  I don't think we should codify this as the public, stable, encouraged API to use - for precisely the reasons you give below.

Yup.

> There's various other APIs that are clearly related but definitely don't currently allow you to wedge this functionality in:
> 
> 1) reactor.connectTCP - nowhere to pass extra socket options now, but we could add more arguments to it I suppose.  Doesn't sound very nice to me.

There are two general approaches I can think of here:

 1. pass a callable object to be invoked on the ... socket? transport? ... before connect().  This seems problematic because it could violate lots of assumptions Twisted makes about the socket and create arbitrary I/O problems in the main loop, which won't be reported well.
 2. pass a static description of things to do pre-connect.

To me, 1. analogizes to 'preexec_fn' in subprocess vs. 2. posix_spawn static description of process-state options, which means I like 2. a lot better.  So the question is: is there anything other than setting socket options might want to do pre-connect?  If we can conclusively say not, then I think adding an argument to pass extra socket options seems fine.  If so, then if we can enumerate the other things you might want to do, we could just add arguments for each of them.

> 2) endpoints?  Again, no current support, but it's a place you could add new parameters.  Of course, this isn't a complete solution, since endpoints mostly just use reactor methods to set things up - but if we had a nice endpoints-based API then we could have a gross lower-level API that no one actually has to use.  Still, is "tcp:host=A:port=B:sockopt=TCP_CORK|TCP_QUICKACK" the road we want to go down?

This would still require support from connectTCP anyway, no?  The sockopt:... key is just the, uh, "user interface" (for lack of a better word) for some structured functionality exposed at a lower level.  So... that suggests that it just reverts to case 1.

> 3) More transport methods

That is already supported, in a sense, you can call '.getHandle()' and set socket options on it if you want to be just a little bit platform-specific.  And we have things like setTcpNoDelay already, too, to avoid depending on python socket objects.

> - but this is an incomplete solution, as certain sockopts only make sense before a connection, so once you have a transport it's too late.

Right, it's the timing that seems to be the issue.

> Maybe someone else has some suggestions from a totally different ballpark that solve the problem more pleasantly?

Passing socket options to connectTCP is growing on me, but it sure would be nice to have something nicer.

> Anyhow, I think this certainly means a ticket should be filed for introducing some API - but it seems that a little more discussion about what the API should be will still be necessary.

Agreed.  But then, it's been a couple days and nobody else has contributed to this thread :-).

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130717/80694f8c/attachment-0001.html>

From marchael at ya.ru  Wed Jul 17 14:20:04 2013
From: marchael at ya.ru (MichaelMayorov)
Date: Wed, 17 Jul 2013 20:20:04 +0000 (UTC)
Subject: [Twisted-Python] Passing arguments to protocol instances (was
	Re: Testing AMP-based code)
References: <87zjv4pe0x.fsf@x200s.i-did-not-set--mail-host-address--so-tickle-me>
 <20130612231612.5484.1361672252.divmod.xquotient.46@top>
 <loom.20130716T204922-790@post.gmane.org>
 <20130717111455.28793.1180420774.divmod.xquotient.675@top>
Message-ID: <loom.20130717T221745-46@post.gmane.org>

Great thanks! That helps me a lot!




From jeff at ocjtech.us  Wed Jul 17 18:04:28 2013
From: jeff at ocjtech.us (Jeffrey Ollie)
Date: Wed, 17 Jul 2013 19:04:28 -0500
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
Message-ID: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>

I know that this has been asked before, but it's been a while and I'm
hoping for some good news.  Is there a SQL ORM that works well with
Twisted and PostgreSQL?  In particular I'm hoping to find something
that works with txpostgres as that's the library I prefer to access
the database with.

--
Jeff Ollie


From p.mayers at imperial.ac.uk  Thu Jul 18 04:27:06 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 18 Jul 2013 11:27:06 +0100
Subject: [Twisted-Python] Setting socket options before connect
In-Reply-To: <90F2544A-F578-4278-AF35-3D8932194A9F@twistedmatrix.com>
References: <51DFD9AF.70609@imperial.ac.uk>
 <CAOp9P3p7UYhddDbb91zFav8Hw_E17Zp443KykGhQgQyq8nH+xw@mail.gmail.com>
 <51DFDD8B.6030707@imperial.ac.uk>
 <20130712120943.28793.1298272201.divmod.xquotient.641@top>
 <C529325F-6517-436B-9E19-677A85FB4BBB@twistedmatrix.com>
 <20130715114408.28793.1484770856.divmod.xquotient.663@top>
 <90F2544A-F578-4278-AF35-3D8932194A9F@twistedmatrix.com>
Message-ID: <51E7C2FA.3000408@imperial.ac.uk>

On 17/07/13 18:44, Glyph wrote:

>> Anyhow, I think this certainly means a ticket should be filed for
>> introducing some API - but it seems that a little more discussion
>> about what the API should be will still be necessary.
>
> Agreed.  But then, it's been a couple days and nobody else has
> contributed to this thread :-).

Well, since I started it...

Some kind of endpoint argument might be problematic for some use-cases. 
In particular, Twisted would have to know how to convert the argument 
into the value to pass into setsockopt() and possibly in a 
platform-specific way.

The API as presented also omits the SOL.

I guess it might be ok if there was a way to reliably inject unknown 
options with arbitrary payloads, but I'm struggling to see a clean way 
to do this with a "parse a string"-style API.

So, vote me +0.5 for a "pre-connect" function.

But but but...

It might be possible to sidestep this entire issue by providing a clean 
way for an app to inject itself "above" the socket. I can think of a few 
use-cases for this, most notably things like cmsg/IP_HDRINCL which 
Twisted doesn't know about, and thus can't handle.

So maybe the correct way to handle this is "implement your own FD object"?


From exarkun at twistedmatrix.com  Thu Jul 18 06:10:30 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 18 Jul 2013 12:10:30 -0000
Subject: [Twisted-Python] Setting socket options before connect
In-Reply-To: <51E7C2FA.3000408@imperial.ac.uk>
References: <51DFD9AF.70609@imperial.ac.uk>
 <CAOp9P3p7UYhddDbb91zFav8Hw_E17Zp443KykGhQgQyq8nH+xw@mail.gmail.com>
 <51DFDD8B.6030707@imperial.ac.uk>
 <20130712120943.28793.1298272201.divmod.xquotient.641@top>
 <C529325F-6517-436B-9E19-677A85FB4BBB@twistedmatrix.com>
 <20130715114408.28793.1484770856.divmod.xquotient.663@top>
 <90F2544A-F578-4278-AF35-3D8932194A9F@twistedmatrix.com>
 <51E7C2FA.3000408@imperial.ac.uk>
Message-ID: <20130718121030.28793.406822642.divmod.xquotient.681@top>

On 10:27 am, p.mayers at imperial.ac.uk wrote:
>On 17/07/13 18:44, Glyph wrote:
>>>Anyhow, I think this certainly means a ticket should be filed for
>>>introducing some API - but it seems that a little more discussion
>>>about what the API should be will still be necessary.
>>
>>Agreed.  But then, it's been a couple days and nobody else has
>>contributed to this thread :-).
>
>Well, since I started it...
>
>Some kind of endpoint argument might be problematic for some use-cases. 
>In particular, Twisted would have to know how to convert the argument 
>into the value to pass into setsockopt() and possibly in a platform- 
>specific way.
>
>The API as presented also omits the SOL.

It wasn't so much an API as a "Hey, I have an idea... endpoints... here 
is an example I can think of in 10 seconds." :)
>I guess it might be ok if there was a way to reliably inject unknown 
>options with arbitrary payloads, but I'm struggling to see a clean way 
>to do this with a "parse a string"-style API.

I think you're talking about the fact that "sockopts" are random 
integers associated with other big piles of random integers.  Some of 
them are flags you turn on, but some come with random payloads of 
basically no possible known shape.

It sounds like you're trying to think of an API that will support any 
and all socket options without understanding them.  This API exists 
already.  It is `setsockopt`.  There's no reason to re-invent it.

I prefer the approach taken elsewhere in Twisted, where a particular 
option is given some consideration and an API that understands the 
option is introduced.  This approach certainly has its shortcomings - 
for example, it doesn't support arbitrary options. :)  Do people really 
like using `setsockopt` though?
>
>So, vote me +0.5 for a "pre-connect" function.
>
>But but but...
>
>It might be possible to sidestep this entire issue by providing a clean 
>way for an app to inject itself "above" the socket. I can think of a 
>few use- cases for this, most notably things like cmsg/IP_HDRINCL which 
>Twisted doesn't know about, and thus can't handle.
>
>So maybe the correct way to handle this is "implement your own FD 
>object"?

Nothing stops anyone from doing this already, today.  Except that it's a 
lot of work and no one seems to want any of these features badly enough 
to do it.

Jean-Paul


From p.mayers at imperial.ac.uk  Thu Jul 18 07:09:38 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 18 Jul 2013 14:09:38 +0100
Subject: [Twisted-Python] Setting socket options before connect
In-Reply-To: <20130718121030.28793.406822642.divmod.xquotient.681@top>
References: <51DFD9AF.70609@imperial.ac.uk>
 <CAOp9P3p7UYhddDbb91zFav8Hw_E17Zp443KykGhQgQyq8nH+xw@mail.gmail.com>
 <51DFDD8B.6030707@imperial.ac.uk>
 <20130712120943.28793.1298272201.divmod.xquotient.641@top>
 <C529325F-6517-436B-9E19-677A85FB4BBB@twistedmatrix.com>
 <20130715114408.28793.1484770856.divmod.xquotient.663@top>
 <90F2544A-F578-4278-AF35-3D8932194A9F@twistedmatrix.com>
 <51E7C2FA.3000408@imperial.ac.uk>
 <20130718121030.28793.406822642.divmod.xquotient.681@top>
Message-ID: <51E7E912.7060009@imperial.ac.uk>

On 18/07/13 13:10, exarkun at twistedmatrix.com wrote:

> It wasn't so much an API as a "Hey, I have an idea... endpoints... here
> is an example I can think of in 10 seconds." :)

Understood!

>> I guess it might be ok if there was a way to reliably inject unknown
>> options with arbitrary payloads, but I'm struggling to see a clean way
>> to do this with a "parse a string"-style API.
>
> I think you're talking about the fact that "sockopts" are random
> integers associated with other big piles of random integers.  Some of
> them are flags you turn on, but some come with random payloads of
> basically no possible known shape.

Yep.

> It sounds like you're trying to think of an API that will support any
> and all socket options without understanding them.  This API exists
> already.  It is `setsockopt`.  There's no reason to re-invent it.

Sure.

> I prefer the approach taken elsewhere in Twisted, where a particular
> option is given some consideration and an API that understands the
> option is introduced.  This approach certainly has its shortcomings -
> for example, it doesn't support arbitrary options. :)  Do people really
> like using `setsockopt` though?

No-one "likes" it, but if you need to set a socket option, you don't 
really have much choice (absent a higher-layer API).

>> So maybe the correct way to handle this is "implement your own FD
>> object"?
>
> Nothing stops anyone from doing this already, today.  Except that it's a
> lot of work and no one seems to want any of these features badly enough
> to do it.

Well, exactly. It's currently easier for me to sub-class a Twisted 
internal/private class. But if that goes away, that option is 
unavailable and a replacement would be nice - even if it's a convenience 
API like:

connectExistingSocket(...)

Isn't there code to do this as part of the systemd activation?


From Nick.Johnson at ed.ac.uk  Thu Jul 18 10:59:37 2013
From: Nick.Johnson at ed.ac.uk (Nick Johnson)
Date: Thu, 18 Jul 2013 17:59:37 +0100
Subject: [Twisted-Python] Best way to trigger a future connection with data
Message-ID: <51E81EF9.70405@ed.ac.uk>

Hi,

I'm porting some code to twisted and got a little stuck. The current
(non-twisted) code connects to a server, gives it some data (a job to
do), gets a job-id and then terminates the connection. Sometime later,
it reconnects and gets the output using the job-id.

I've a factory and protocol set up, with buildProtocol over-riden in the
Factory class to supply some extra data to each Protocol instance when
it's created. This is fine when I submit a job as I can call a factory
function to generate the required data (ie the job to do). My problem is
how to initiate a connection at some point in the future AND pass it
some specific info (ie the job-id) for it to pass to the server.

I start the connections using task.callingLoop and reactor.connectTCP so
my first guess was to add: task.callLater(time, reactor.connectTCP, ...)
to the connectionLost method of my Protocol. However, I cannot see how
to pass in any extra information (ie the job-id) this way? I know I can
store state in the Factory, so I guess I just need to know how to pass
this to a scheduled invocation of the Protocol.

Is anyone able to point me in the right direction here?

Cheers,
-Nick.
-- 
Nick Johnson, Applications Developer, EPCC
2407 JCMB, King's Buildings, Mayfield Road, Edinburgh, EH9 3JF
e: Nick.Johnson at ed.ac.uk t: 0131 651 3388

The University of Edinburgh is a charitable body, registered in
Scotland, with registration number SC005336.



From _ at lvh.io  Thu Jul 18 11:07:26 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Thu, 18 Jul 2013 19:07:26 +0200
Subject: [Twisted-Python] Best way to trigger a future connection with
	data
In-Reply-To: <51E81EF9.70405@ed.ac.uk>
References: <51E81EF9.70405@ed.ac.uk>
Message-ID: <CAE_Hg6ZQ62XMbkuxdV0VWALdFUqHT_T9XJyFhGuc2aY0kDKT0A@mail.gmail.com>

Hi Nick,

You're pretty much there already. Instantiate a ClientFactory that holds
all the necessary state. By default, your protocol will have access to that
state through its factory attribute (unless you override the Factory's
buildProtocol method).

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130718/fca838dc/attachment.html>

From exarkun at twistedmatrix.com  Thu Jul 18 11:09:12 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 18 Jul 2013 17:09:12 -0000
Subject: [Twisted-Python] Setting socket options before connect
In-Reply-To: <51E7E912.7060009@imperial.ac.uk>
References: <51DFD9AF.70609@imperial.ac.uk>
 <CAOp9P3p7UYhddDbb91zFav8Hw_E17Zp443KykGhQgQyq8nH+xw@mail.gmail.com>
 <51DFDD8B.6030707@imperial.ac.uk>
 <20130712120943.28793.1298272201.divmod.xquotient.641@top>
 <C529325F-6517-436B-9E19-677A85FB4BBB@twistedmatrix.com>
 <20130715114408.28793.1484770856.divmod.xquotient.663@top>
 <90F2544A-F578-4278-AF35-3D8932194A9F@twistedmatrix.com>
 <51E7C2FA.3000408@imperial.ac.uk>
 <20130718121030.28793.406822642.divmod.xquotient.681@top>
 <51E7E912.7060009@imperial.ac.uk>
Message-ID: <20130718170912.28793.1063604422.divmod.xquotient.688@top>

On 01:09 pm, p.mayers at imperial.ac.uk wrote:
>On 18/07/13 13:10, exarkun at twistedmatrix.com wrote:
>>I prefer the approach taken elsewhere in Twisted, where a particular
>>option is given some consideration and an API that understands the
>>option is introduced.  This approach certainly has its shortcomings -
>>for example, it doesn't support arbitrary options. :)  Do people 
>>really
>>like using `setsockopt` though?
>
>No-one "likes" it, but if you need to set a socket option, you don't 
>really have much choice (absent a higher-layer API).

Glad to hear it is universally reviled. ;)

To be a bit more explicit, I think it's worth considering particular 
socket options individually and introducing high-level APIs for dealing 
with them.  They don't get requested too often, so even though it's kind 
of labor intensive it still might not be overwhelming.
>>>So maybe the correct way to handle this is "implement your own FD
>>>object"?
>>
>>Nothing stops anyone from doing this already, today.  Except that it's 
>>a
>>lot of work and no one seems to want any of these features badly 
>>enough
>>to do it.
>
>Well, exactly. It's currently easier for me to sub-class a Twisted 
>internal/private class. But if that goes away, that option is 
>unavailable and a replacement would be nice - even if it's a 
>convenience API like:
>
>connectExistingSocket(...)
>
>Isn't there code to do this as part of the systemd activation?

I really wanted to suggest something along those lines.  The current 
code has the limitation that it will only accept an *already* connected 
socket.  There isn't something that will accept a socket and then do the 
connection part for you.

Maybe `connectExistingSocket` could still leverage this code somehow to 
simplify its implementation, though.

Jean-Paul


From glyph at twistedmatrix.com  Thu Jul 18 11:08:07 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 18 Jul 2013 10:08:07 -0700
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
Message-ID: <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>


On Jul 17, 2013, at 5:04 PM, Jeffrey Ollie <jeff at ocjtech.us> wrote:

> I know that this has been asked before, but it's been a while and I'm
> hoping for some good news.  Is there a SQL ORM that works well with
> Twisted and PostgreSQL?  In particular I'm hoping to find something
> that works with txpostgres as that's the library I prefer to access
> the database with.

There's bits of one in Calendar Server: <http://trac.calendarserver.org/browser/CalendarServer/trunk/twext/enterprise/dal/record.py>  It doesn't use txpostgres, but that's because it relies on adbapi2 (also in calendar server, hopefully to be moved into Twisted at some point).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130718/cd2033dc/attachment-0001.html>

From haggardii at gmail.com  Thu Jul 18 15:20:46 2013
From: haggardii at gmail.com (Matt Haggard)
Date: Thu, 18 Jul 2013 15:20:46 -0600
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL
Message-ID: <CAL+xXwN4jRWAX1DLJDna-1fbWE58P006M4gRNu6yUVha6nR_0A@mail.gmail.com>

> On Jul 17, 2013, at 5:04 PM, Jeffrey Ollie <jeff at ocjtech.us> wrote:

>
> > I know that this has been asked before, but it's been a while and I'm
> > hoping for some good news.  Is there a SQL ORM that works well with
> > Twisted and PostgreSQL?  In particular I'm hoping to find something
> > that works with txpostgres as that's the library I prefer to access
> > the database with.
>
> There's bits of one in Calendar Server: <http://trac.calendarserver.org/browser/CalendarServer/trunk/twext/enterprise/dal/record.py>  It doesn't use txpostgres, but that's because it relies on adbapi2 (also in calendar server, hopefully to be moved into Twisted at some point).
>
> -glyph

I've made a thing that has a similar API to txpostgres and will use
txpostgres underneath if it's installed:

https://github.com/iffy/norm

I welcome feedback/patches.

- Matt Haggard

(I wasn't on the mailing list when the original message was sent, so
this "reply" may not appear quite correctly)


From hs at ox.cx  Fri Jul 19 01:06:23 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Fri, 19 Jul 2013 09:06:23 +0200
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
Message-ID: <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>

Hi,

>> I know that this has been asked before, but it's been a while and I'm
>> hoping for some good news.  Is there a SQL ORM that works well with
>> Twisted and PostgreSQL?  In particular I'm hoping to find something
>> that works with txpostgres as that's the library I prefer to access
>> the database with.
> 
> There's bits of one in Calendar Server: <http://trac.calendarserver.org/browser/CalendarServer/trunk/twext/enterprise/dal/record.py>  It doesn't use txpostgres, but that's because it relies on adbapi2 (also in calendar server, hopefully to be moved into Twisted at some point).

How would you feel about packaging it up on PyPI so people can try it out effortlessly? What do Apple?s licenses say about that? Yes, I?m volunteering.

Cheers,
Hynek

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130719/8205e6d7/attachment.html>

From Nick.Johnson at ed.ac.uk  Fri Jul 19 02:19:26 2013
From: Nick.Johnson at ed.ac.uk (Nick Johnson)
Date: Fri, 19 Jul 2013 09:19:26 +0100
Subject: [Twisted-Python] Best way to trigger a future connection with
 data
In-Reply-To: <CAE_Hg6ZQ62XMbkuxdV0VWALdFUqHT_T9XJyFhGuc2aY0kDKT0A@mail.gmail.com>
References: <51E81EF9.70405@ed.ac.uk>
 <CAE_Hg6ZQ62XMbkuxdV0VWALdFUqHT_T9XJyFhGuc2aY0kDKT0A@mail.gmail.com>
Message-ID: <51E8F68E.2030700@ed.ac.uk>

Thanks lvh,

I did have to override the buildProtocol method in the Factory but I
then set Protocol.factory to be equal to the Factory (ie,
myprotocol.factory=self).

I'm still stuck however with what to do when I get more complex than
this simple case. For example, I use a callingLoop to call multiple
connections with a 0.1 second interval to launch jobs and each of those
connections does as mentioned by setting up a future connection to
retrieve the output, say 10 seconds later. There is going to be some
overlap, ie I might have launched 100 new jobs before the first one
fires it's task.callLater.

Storing state in the factory class doesn't work in this case because
each new connection wont know whether to initiate a job or retrieve
output as I cannot pass it this extra information.

Cheers,
-Nick.


On 18/07/13 18:07, Laurens Van Houtven wrote:
> Hi Nick,
> 
> You're pretty much there already. Instantiate a ClientFactory that holds
> all the necessary state. By default, your protocol will have access to
> that state through its factory attribute (unless you override the
> Factory's buildProtocol method).
> 
> cheers
> lvh

-- 
The University of Edinburgh is a charitable body, registered in
Scotland, with registration number SC005336.



From _ at lvh.io  Fri Jul 19 02:21:01 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Fri, 19 Jul 2013 10:21:01 +0200
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
 <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
Message-ID: <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>

On Fri, Jul 19, 2013 at 9:06 AM, Hynek Schlawack <hs at ox.cx> wrote:
>
> How would you feel about packaging it up on PyPI so people can try it out
> effortlessly? What do Apple?s licenses say about that? Yes, I?m
> volunteering.
>

It seems it's released under the ASL2. I don't know if Apple prevents *its*
employees from doing anything in particular, but it seems like third party
contributors are free to do with it as they please (within the limits of
the license, of course).

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130719/c361d752/attachment.html>

From _ at lvh.io  Fri Jul 19 02:25:15 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Fri, 19 Jul 2013 10:25:15 +0200
Subject: [Twisted-Python] Best way to trigger a future connection with
	data
In-Reply-To: <51E8F68E.2030700@ed.ac.uk>
References: <51E81EF9.70405@ed.ac.uk>
 <CAE_Hg6ZQ62XMbkuxdV0VWALdFUqHT_T9XJyFhGuc2aY0kDKT0A@mail.gmail.com>
 <51E8F68E.2030700@ed.ac.uk>
Message-ID: <CAE_Hg6b+NXWEaE1cQoh_9ag4R9_EjJEfFRaogYzK=RpHR=+GUA@mail.gmail.com>

On Fri, Jul 19, 2013 at 10:19 AM, Nick Johnson <Nick.Johnson at ed.ac.uk>wrote:

> Thanks lvh,
>
> I did have to override the buildProtocol method in the Factory but I
> then set Protocol.factory to be equal to the Factory (ie,
> myprotocol.factory=self).
>

You could (perhaps should) do this by calling
ClientFactory.buildProtocol(self, addr).


> I'm still stuck however with what to do when I get more complex than
> this simple case. For example, I use a callingLoop to call multiple
> connections with a 0.1 second interval to launch jobs and each of those
> connections does as mentioned by setting up a future connection to
> retrieve the output, say 10 seconds later. There is going to be some
> overlap, ie I might have launched 100 new jobs before the first one
> fires it's task.callLater.
>
> Storing state in the factory class doesn't work in this case because
> each new connection wont know whether to initiate a job or retrieve
> output as I cannot pass it this extra information.
>

I don't understand why not. Could you elaborate?

Either way, it seems to me that the API should be:

d = scheduleJob()
d.addCallback(getJob)

That is: only get the job once it has been scheduled. getJob would probably
have to be split up into something that delays (consider delayLater), and
something that actually gets the job.

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130719/2d1407a6/attachment.html>

From Nick.Johnson at ed.ac.uk  Fri Jul 19 03:03:20 2013
From: Nick.Johnson at ed.ac.uk (Nick Johnson)
Date: Fri, 19 Jul 2013 10:03:20 +0100
Subject: [Twisted-Python] Best way to trigger a future connection with
 data
In-Reply-To: <CAE_Hg6b+NXWEaE1cQoh_9ag4R9_EjJEfFRaogYzK=RpHR=+GUA@mail.gmail.com>
References: <51E81EF9.70405@ed.ac.uk>
 <CAE_Hg6ZQ62XMbkuxdV0VWALdFUqHT_T9XJyFhGuc2aY0kDKT0A@mail.gmail.com>
 <51E8F68E.2030700@ed.ac.uk>
 <CAE_Hg6b+NXWEaE1cQoh_9ag4R9_EjJEfFRaogYzK=RpHR=+GUA@mail.gmail.com>
Message-ID: <51E900D8.2070205@ed.ac.uk>

Here's a cut-down version of the code which might be more illustrative:


class MyProtocol(Protocol):
    def __init__(self, s, d):
	<some init>

    def dataReceived(self, data):
	<do stuff with data>

    def connectionLost(self, reason):
        reactor.callLater(10, ...)

    def connectionMade(self):
        self.transport.write(...)
        self.transport.loseWriteConnection()

class MyFactory(ClientFactory):
    def __init__(self, src, dst, interval, type_req):
        self.s = src
        self.d = dst

    def buildProtocol(self, addr):
        p = MyProtocol(self.s, self.d)
        p.factory = self
        return p

if __name__ == '__main__':
    f = MyFactory("10", "20", 1, 1)
    l = task.LoopingCall(reactor.connectTCP ... f)
    l.start(.1)
    task.callLater(20, reactor.stop())
    reactor.run()

So, each call from task.LoopingCall sets up a new connection which then
starts a job. When that connection has finished, the protocol instance
disappears. I can store the data it received in a structure in the
Factory, no problems there.

I have to call transport.loseWriteConnection() in order to get data from
the server (I've no control over this).

The problem comes when the delayed connection is started. This will (in
my mind) create a new instance of MyProtocol by calling the
buildProtocol method of the Factory. Without any additional input, it
wont know what to do, start a new job or retrieve one from the server.
I've tried thinking about callbacks and deferreds but still get stuck
with the same problem of how to instruct a particular instance of
MyProtocol to either launch or retrieve a job.


Cheers,
-Nick.


On 19/07/13 09:25, Laurens Van Houtven wrote:
> On Fri, Jul 19, 2013 at 10:19 AM, Nick Johnson
> <Nick.Johnson at ed.ac.uk <mailto:Nick.Johnson at ed.ac.uk>> wrote:
> 
> Thanks lvh,
> 
> I did have to override the buildProtocol method in the Factory but I 
> then set Protocol.factory to be equal to the Factory (ie, 
> myprotocol.factory=self).
> 
> 
> You could (perhaps should) do this by calling 
> ClientFactory.buildProtocol(self, addr).
> 
> 
> I'm still stuck however with what to do when I get more complex than 
> this simple case. For example, I use a callingLoop to call multiple 
> connections with a 0.1 second interval to launch jobs and each of
> those connections does as mentioned by setting up a future connection
> to retrieve the output, say 10 seconds later. There is going to be
> some overlap, ie I might have launched 100 new jobs before the first
> one fires it's task.callLater.
> 
> Storing state in the factory class doesn't work in this case because 
> each new connection wont know whether to initiate a job or retrieve 
> output as I cannot pass it this extra information.
> 
> 
> I don't understand why not. Could you elaborate?
> 
> Either way, it seems to me that the API should be:
> 
> d = scheduleJob() d.addCallback(getJob)
> 
> That is: only get the job once it has been scheduled. getJob would 
> probably have to be split up into something that delays (consider 
> delayLater), and something that actually gets the job.
> 
> cheers lvh

-- 
The University of Edinburgh is a charitable body, registered in
Scotland, with registration number SC005336.



From _ at lvh.io  Fri Jul 19 07:52:14 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Fri, 19 Jul 2013 15:52:14 +0200
Subject: [Twisted-Python] Best way to trigger a future connection with
	data
In-Reply-To: <51E900D8.2070205@ed.ac.uk>
References: <51E81EF9.70405@ed.ac.uk>
 <CAE_Hg6ZQ62XMbkuxdV0VWALdFUqHT_T9XJyFhGuc2aY0kDKT0A@mail.gmail.com>
 <51E8F68E.2030700@ed.ac.uk>
 <CAE_Hg6b+NXWEaE1cQoh_9ag4R9_EjJEfFRaogYzK=RpHR=+GUA@mail.gmail.com>
 <51E900D8.2070205@ed.ac.uk>
Message-ID: <CAE_Hg6bxRf0wJ8zacJNTWgFb3UkDix2Pe2PNis+2Vjqnb7Z19g@mail.gmail.com>

Hi Nick,


Okay, question and code review time. Why are source and destination
arguments to the protocol? Can't they just access it on the factory?

It seems that the factory initiates many connections with the same
parameters. Is that true? Does it only ever make sense to use the factory
to fire many requests?

Anyway, the biggest issue seems to be that you're stuck on trying to do
everything with one protocol; it might make total sense for you to have a
job-queueing and a job-getting protocol :)

Can you explain what the interval and type_req arguments are, and why
they're passed to the factory?

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130719/8a9cff5c/attachment-0001.html>

From _ at lvh.io  Fri Jul 19 08:02:33 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Fri, 19 Jul 2013 16:02:33 +0200
Subject: [Twisted-Python] Best way to trigger a future connection with
	data
In-Reply-To: <CAE_Hg6bxRf0wJ8zacJNTWgFb3UkDix2Pe2PNis+2Vjqnb7Z19g@mail.gmail.com>
References: <51E81EF9.70405@ed.ac.uk>
 <CAE_Hg6ZQ62XMbkuxdV0VWALdFUqHT_T9XJyFhGuc2aY0kDKT0A@mail.gmail.com>
 <51E8F68E.2030700@ed.ac.uk>
 <CAE_Hg6b+NXWEaE1cQoh_9ag4R9_EjJEfFRaogYzK=RpHR=+GUA@mail.gmail.com>
 <51E900D8.2070205@ed.ac.uk>
 <CAE_Hg6bxRf0wJ8zacJNTWgFb3UkDix2Pe2PNis+2Vjqnb7Z19g@mail.gmail.com>
Message-ID: <CAE_Hg6Z+50df=94Sd5mcubG_rc74oa_w04D_Xh0_T5dKCYc=YQ@mail.gmail.com>

Hi Nick,


I was thinking something along these lines:
https://gist.github.com/lvh/67c64042a2be06b7bf7a

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130719/b44b9ce2/attachment.html>

From tom.prince at ualberta.net  Fri Jul 19 11:41:00 2013
From: tom.prince at ualberta.net (Tom Prince)
Date: Fri, 19 Jul 2013 11:41:00 -0600
Subject: [Twisted-Python] July Report
Message-ID: <87ob9ysb0z.fsf@loki.hocat.ca>

http://labs.twistedmatrix.com/2013/07/july-report.html

This will be my last report, until the beginning of September. I have,
for many years, been a volunteer at the Edmonton Folk Music
Festival[1]. For the next month, I will be busy setting it up (and then
taking it down, and so will not have time to devote to twisted.

This month, 23 tickets got some attention that they would not have
received without the sponsored development.  The result was 5 closed
tickets and 11 other tickets unblocked for other developers to resume
work on.

This month, I made a number of improvements to the buildobt:
 - Switched most of the buildslaves to use git to checkout the source.
 - All the git-using builders merge to trunk, before running tests, so
   the tests results reflect the code as it would be merged. In
   particular, all the lint steps should now accurately report only
   the regressions relative to current trunk of the merged result.
 - I added a bunch of new builders on VMs provided by Rackspace[1]
   (thanks to Jesse Noller[3]) and the Fedora Project[4] (thanks to
   Seth Vidal[5]). These cover all recent versions of Debian, Fedora,
   Ubuntu and RHEL. As part of this, I automated the deployment of
   buildslaves, (currently only Debian and Fedora derivatives are
   supported).

This work is made possible by the sponsorship of individuals and
organizations which have donated to the Twisted project, part of the
Software Freedom Conservancy, a not-for-profit organization that helps
promote, improve, and develop open source software.  Thanks!

The tickets I reviewed, that have now been closed:
- #5574: Add support for SOCK_DGRAM to IReactorSocket
- #6221: Replace Deprecated Test Case Assertion Methods in twisted.internet
- #6393: Utility function to pretty-format list of things
- #6475: FileAuthority._lookup incorrectly returns AuthoritativeDomainError for non-subdomain names which happen to share the same suffix as the zone (eg the-example.com and example.com)
- #6572: twisted.mail.smtp.sendmail should return a cancellable Deferred

Other tickets I have reviewed:
- #2699: UDP DatagramProtocol reconnecting
- #3926: twisted.positioning -- a better positioning framework
- #4173: WebSocket server support
- #4735: Implement something like ReconnectingClientFactory for endpoints
- #5001: replace call to functions from the string module in twisted.scripts.tap2deb
- #5004: replace call to functions from the string module in web
- #5685: SMTP Client Tutorial should be self-contained
- #6556: LineReceiver rejects lines of length MAX_LENGTH sometimes
- #6557: LineOnlyReceiver doesn't disconnect the transport when it detects an overlarge line
- #6558: LineOnlyReceiver doesn't pass the entire contents of its buffer to lineLengthExceeded()
- #6580: twisted.names.server.DNSServerFactory should query child zones before parent zones

Tickets I have worked on:
- #5513: Detailed documentation on Proxy by adding docstrings to many of the methods.
- #6537: Update coding-standard to reflect that documentation should be sentence per line.
- #6620: Document conventions for writting test assertions.
- #6626: Remove all uses of deferredGenerator.


[1]: http://www.edmontonfolkfest.org/
[2]: https://www.rackspace.com/
[3]: https://twitter.com/jessenoller/status/355453772803211264
[4]: https://fedoraproject.org/
[5]: https://www.redhat.com/about/news/archive/2013/7/thank-you-seth-vidal


From termim at gmail.com  Fri Jul 19 19:35:05 2013
From: termim at gmail.com (Mikhail Terekhov)
Date: Fri, 19 Jul 2013 21:35:05 -0400
Subject: [Twisted-Python] Setting socket options before connect
In-Reply-To: <20130718170912.28793.1063604422.divmod.xquotient.688@top>
References: <51DFD9AF.70609@imperial.ac.uk>
 <CAOp9P3p7UYhddDbb91zFav8Hw_E17Zp443KykGhQgQyq8nH+xw@mail.gmail.com>
 <51DFDD8B.6030707@imperial.ac.uk>
 <20130712120943.28793.1298272201.divmod.xquotient.641@top>
 <C529325F-6517-436B-9E19-677A85FB4BBB@twistedmatrix.com>
 <20130715114408.28793.1484770856.divmod.xquotient.663@top>
 <90F2544A-F578-4278-AF35-3D8932194A9F@twistedmatrix.com>
 <51E7C2FA.3000408@imperial.ac.uk>
 <20130718121030.28793.406822642.divmod.xquotient.681@top>
 <51E7E912.7060009@imperial.ac.uk>
 <20130718170912.28793.1063604422.divmod.xquotient.688@top>
Message-ID: <CALCsMPQokDOVDSurKz+4-_eUVBpPxQ1hV9FpSW9s0Wh3dOpQkA@mail.gmail.com>

On Thu, Jul 18, 2013 at 1:09 PM, <exarkun at twistedmatrix.com> wrote:

> On 01:09 pm, p.mayers at imperial.ac.uk wrote:
>
...

> Well, exactly. It's currently easier for me to sub-class a Twisted
>> internal/private class. But if that goes away, that option is unavailable
>> and a replacement would be nice - even if it's a convenience API like:
>>
>
>> connectExistingSocket(...)
>>
>> Isn't there code to do this as part of the systemd activation?
>>
>
> I really wanted to suggest something along those lines.  The current code
> has the limitation that it will only accept an *already* connected socket.
>  There isn't something that will accept a socket and then do the connection
> part for you.


Sorry it is not exactly about the subject, but what is the current API that
accepts already connected socket?
Some time ago I was looking for such an API without success (probably not
very hard though).
-- 
Mikhail Terekhov
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130719/37d7137a/attachment.html>

From burak at nehbit.net  Sat Jul 20 06:04:38 2013
From: burak at nehbit.net (Burak Nehbit)
Date: Sat, 20 Jul 2013 15:04:38 +0300
Subject: [Twisted-Python] Twisted and Qt5
Message-ID: <56C3E30F-2268-4788-A1F3-10EB2AFDA1BA@nehbit.net>

Hi,

I have a question and a general guidance request on handling Qt and Twisted together. This is nearly as much a Qt question as it is a Twisted one, so I apologise in advance if this is off?topic.

To give a little bit of a background, I am building a desktop GUI application which I am coding using Python and Javascript. The back?end is Python, which makes use of SQLAlchemy, Twisted and several other Python frameworks. The GUI is in Qt, currently linked to Python with PyQt, but I will probably replace it with PySide before release. I am using Qt to draw a QtWebkit frame, in which I run Angular JS to serve up my visual interface, plus a host of other data presentation logic. 

Which is, it turns out, quite an impasse, because if I use Qt4, the GUI of my application renders in ? 12 seconds. Qt5 and its version of QtWebkit loads the same thing in 300 milliseconds. I am therefore forced to use Qt5. This is how I end up with an application where both Twisted and Qt5 are essential requirements. Now, my questions are these:

1) I know there is a Qt4 reactor (which I managed to get to work and pass the twisted test suite) for Twisted. Is there such a thing for Qt5? Is it planned? 

2) In the case it's not, are there any alternatives to having a Qt5 reactor? My Twisted knowledge is still woefully inexact (I'm still reading the Twisted book), so I am not very well versed on alternative ways to accomplish this. The one way I can see is to modify the Twisted Qt4 reactor to work with Qt5, but I have almost no knowledge of C++, so this seems far?fetched.

This is my only unsolved question about my application? a project of love and learning rather than a commercial one?so if I can figure this out, I'll be well on my way. In case there is nothing to be done about this and a Qt5 reactor is an imperative, I would be willing to finance this to the best of my ability; I'm a student, but I can try to pay whatever is needed to have this reactor done, open sourced?and added to Twisted core, if desired. If there is such a project on its way, I can be a tester. If nobody is interested I would be very happy if you could give me a lead on how to make my own reactor; if I succeed I can release it as open source. Likely I am not a programmer good enough to make that happen, though! 

Qt is pretty much the only decent GUI framework in existence and almost the only way to have a Python application with a web?stack GUI, which is one of the most popular ways desktop applications are designed these days. If you know of another way to run Webkit as a Python GUI, I'd love to hear that too, but to the extent of my research this looks impossible without Qt. 

Thanks!

Best,
Burak


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130720/72fd3e6c/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4343 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130720/72fd3e6c/attachment.bin>

From itamar at itamarst.org  Sat Jul 20 06:44:19 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sat, 20 Jul 2013 08:44:19 -0400
Subject: [Twisted-Python] Twisted and Qt5
In-Reply-To: <56C3E30F-2268-4788-A1F3-10EB2AFDA1BA@nehbit.net>
References: <56C3E30F-2268-4788-A1F3-10EB2AFDA1BA@nehbit.net>
Message-ID: <51EA8623.4010307@itamarst.org>

On 07/20/2013 08:04 AM, Burak Nehbit wrote:
>
> 1) I know there is a Qt4 reactor 
> <https://github.com/ghtdak/qtreactor> (which I managed to get to work 
> and pass the twisted test suite) for Twisted. Is there such a thing 
> for Qt5? Is it planned?
Have the Qt APIs changed enough that you can't just use the qt4 reactor 
with qt5?


From burak at nehbit.net  Sat Jul 20 06:50:05 2013
From: burak at nehbit.net (Burak Nehbit)
Date: Sat, 20 Jul 2013 05:50:05 -0700 (PDT)
Subject: [Twisted-Python] Twisted and Qt5
In-Reply-To: <51EA8623.4010307@itamarst.org>
References: <51EA8623.4010307@itamarst.org>
Message-ID: <1374324604160.1dab1bad@Nodemailer>

There are significant changes in the signalling mechanisms in Qt5, but I have not tried yet. I'll try quite soon and return with my findings, but with the little knowledge I have, I would say it might be unlikely that it works without modification.
?
Sent from my phone

On Sat, Jul 20, 2013 at 3:46 PM, Itamar Turner-Trauring
<itamar at itamarst.org> wrote:

> On 07/20/2013 08:04 AM, Burak Nehbit wrote:
>>
>> 1) I know there is a Qt4 reactor 
>> <https://github.com/ghtdak/qtreactor> (which I managed to get to work 
>> and pass the twisted test suite) for Twisted. Is there such a thing 
>> for Qt5? Is it planned?
> Have the Qt APIs changed enough that you can't just use the qt4 reactor 
> with qt5?
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130720/35275279/attachment.html>

From exarkun at twistedmatrix.com  Sat Jul 20 13:03:24 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 20 Jul 2013 19:03:24 -0000
Subject: [Twisted-Python] adoptStreamConnection (was Re: Setting socket
 options before connect)
In-Reply-To: <CALCsMPQokDOVDSurKz+4-_eUVBpPxQ1hV9FpSW9s0Wh3dOpQkA@mail.gmail.com>
References: <51DFD9AF.70609@imperial.ac.uk>
 <CAOp9P3p7UYhddDbb91zFav8Hw_E17Zp443KykGhQgQyq8nH+xw@mail.gmail.com>
 <51DFDD8B.6030707@imperial.ac.uk>
 <20130712120943.28793.1298272201.divmod.xquotient.641@top>
 <C529325F-6517-436B-9E19-677A85FB4BBB@twistedmatrix.com>
 <20130715114408.28793.1484770856.divmod.xquotient.663@top>
 <90F2544A-F578-4278-AF35-3D8932194A9F@twistedmatrix.com>
 <51E7C2FA.3000408@imperial.ac.uk>
 <20130718121030.28793.406822642.divmod.xquotient.681@top>
 <51E7E912.7060009@imperial.ac.uk>
 <20130718170912.28793.1063604422.divmod.xquotient.688@top>
 <CALCsMPQokDOVDSurKz+4-_eUVBpPxQ1hV9FpSW9s0Wh3dOpQkA@mail.gmail.com>
Message-ID: <20130720190324.28793.1050658495.divmod.xquotient.695@top>

On 01:35 am, termim at gmail.com wrote:
>
>Sorry it is not exactly about the subject, but what is the current API 
>that
>accepts already connected socket?
>Some time ago I was looking for such an API without success (probably 
>not
>very hard though).

IReactorSocket.adoptStreamConnection was recently added:

http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReactorSocket.html

Jean-Paul


From Nick.Johnson at ed.ac.uk  Mon Jul 22 02:40:14 2013
From: Nick.Johnson at ed.ac.uk (Nick Johnson)
Date: Mon, 22 Jul 2013 09:40:14 +0100
Subject: [Twisted-Python] Best way to trigger a future connection with
 data
In-Reply-To: <CAE_Hg6bxRf0wJ8zacJNTWgFb3UkDix2Pe2PNis+2Vjqnb7Z19g@mail.gmail.com>
References: <51E81EF9.70405@ed.ac.uk>
 <CAE_Hg6ZQ62XMbkuxdV0VWALdFUqHT_T9XJyFhGuc2aY0kDKT0A@mail.gmail.com>
 <51E8F68E.2030700@ed.ac.uk>
 <CAE_Hg6b+NXWEaE1cQoh_9ag4R9_EjJEfFRaogYzK=RpHR=+GUA@mail.gmail.com>
 <51E900D8.2070205@ed.ac.uk>
 <CAE_Hg6bxRf0wJ8zacJNTWgFb3UkDix2Pe2PNis+2Vjqnb7Z19g@mail.gmail.com>
Message-ID: <51ECEFEE.105@ed.ac.uk>

Hi,

Firstly, thanks for this gist, I had done a few experiments using
endpoints and I think this is definitely the way to go for this code.

As to the questions: source and destination are parameters for the job
and might change between runs (a function I didn't include for brevity
handles computation of these). Interval was to be the time passed to
LoopingCall and type_req was another job parameter.

I agree that, having looked at the gist, trying to pack everything into
one Protocol was not the best way to go and using a separate protocol
for each type of communication (ie, getjob, retrievejob) is more sensible.

Thanks for helping me out with this, Twisted is slowly starting to make
sense now.

Cheers,
-Nick.


On 19/07/13 14:52, Laurens Van Houtven wrote:
> Hi Nick,
> 
> 
> Okay, question and code review time. Why are source and destination
> arguments to the protocol? Can't they just access it on the factory?
> 
> It seems that the factory initiates many connections with the same
> parameters. Is that true? Does it only ever make sense to use the
> factory to fire many requests?
> 
> Anyway, the biggest issue seems to be that you're stuck on trying to do
> everything with one protocol; it might make total sense for you to have
> a job-queueing and a job-getting protocol :)
> 
> Can you explain what the interval and type_req arguments are, and why
> they're passed to the factory?
> 
> cheers
> lvh
> 

-- 
The University of Edinburgh is a charitable body, registered in
Scotland, with registration number SC005336.



From _ at lvh.io  Mon Jul 22 04:07:15 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Mon, 22 Jul 2013 12:07:15 +0200
Subject: [Twisted-Python] Best way to trigger a future connection with
	data
In-Reply-To: <51ECEFEE.105@ed.ac.uk>
References: <51E81EF9.70405@ed.ac.uk>
 <CAE_Hg6ZQ62XMbkuxdV0VWALdFUqHT_T9XJyFhGuc2aY0kDKT0A@mail.gmail.com>
 <51E8F68E.2030700@ed.ac.uk>
 <CAE_Hg6b+NXWEaE1cQoh_9ag4R9_EjJEfFRaogYzK=RpHR=+GUA@mail.gmail.com>
 <51E900D8.2070205@ed.ac.uk>
 <CAE_Hg6bxRf0wJ8zacJNTWgFb3UkDix2Pe2PNis+2Vjqnb7Z19g@mail.gmail.com>
 <51ECEFEE.105@ed.ac.uk>
Message-ID: <CAE_Hg6Y+-5zaF-SnTTRLdREDWNdB1-Y6PJasz5Ap1s9E3UJ3Hw@mail.gmail.com>

Hi Nick

On Mon, Jul 22, 2013 at 10:40 AM, Nick Johnson <Nick.Johnson at ed.ac.uk>wrote:

> Hi,
>
> Firstly, thanks for this gist, I had done a few experiments using
> endpoints and I think this is definitely the way to go for this code.
>

Welcome :)


> As to the questions: source and destination are parameters for the job
> and might change between runs (a function I didn't include for brevity
> handles computation of these). Interval was to be the time passed to
> LoopingCall and type_req was another job parameter.
>
> I agree that, having looked at the gist, trying to pack everything into
> one Protocol was not the best way to go and using a separate protocol
> for each type of communication (ie, getjob, retrievejob) is more sensible.
>

For what it's worth: a protocol implementing all of these might make even
more sense if you have some functions as the high level API (like the ones
I wrote in the gist): the functions could call high level methods on the
protocol that cause it to do certain things.

As an example, consider the IRCClient protocol:
https://twistedmatrix.com/documents/current/api/twisted.words.protocols.irc.IRCClient.html

... which has methods like "join", "leave", "say", "message"...


> Thanks for helping me out with this, Twisted is slowly starting to make
> sense now.
>
> Cheers,
> -Nick.
>
>
> On 19/07/13 14:52, Laurens Van Houtven wrote:
> > Hi Nick,
> >
> >
> > Okay, question and code review time. Why are source and destination
> > arguments to the protocol? Can't they just access it on the factory?
> >
> > It seems that the factory initiates many connections with the same
> > parameters. Is that true? Does it only ever make sense to use the
> > factory to fire many requests?
> >
> > Anyway, the biggest issue seems to be that you're stuck on trying to do
> > everything with one protocol; it might make total sense for you to have
> > a job-queueing and a job-getting protocol :)
> >
> > Can you explain what the interval and type_req arguments are, and why
> > they're passed to the factory?
> >
> > cheers
> > lvh
> >
>
> --
> The University of Edinburgh is a charitable body, registered in
> Scotland, with registration number SC005336.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130722/a43e8f6d/attachment.html>

From glyph at twistedmatrix.com  Mon Jul 22 15:37:16 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 22 Jul 2013 14:37:16 -0700
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
 <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
 <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>
Message-ID: <5AF6C57C-90F9-4132-97CE-5E9D407320E8@twistedmatrix.com>


On Jul 19, 2013, at 1:21 AM, Laurens Van Houtven <_ at lvh.io> wrote:

> On Fri, Jul 19, 2013 at 9:06 AM, Hynek Schlawack <hs at ox.cx> wrote:
> How would you feel about packaging it up on PyPI so people can try it out effortlessly? What do Apple?s licenses say about that? Yes, I?m volunteering.
>  
> It seems it's released under the ASL2. I don't know if Apple prevents *its* employees from doing anything in particular, but it seems like third party contributors are free to do with it as they please (within the limits of the license, of course). 

There are actually bits of this that I've been meaning to contribute back for a long time.  If somebody would like to help me out with it then maybe I can eke out a little bit of time to do it - I've just been pretty busy :-).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130722/604958b5/attachment.html>

From glyph at twistedmatrix.com  Mon Jul 22 15:43:54 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 22 Jul 2013 14:43:54 -0700
Subject: [Twisted-Python] Twisted and Qt5
In-Reply-To: <56C3E30F-2268-4788-A1F3-10EB2AFDA1BA@nehbit.net>
References: <56C3E30F-2268-4788-A1F3-10EB2AFDA1BA@nehbit.net>
Message-ID: <3F8D63C2-81B5-4240-AB43-B30F5F75668E@twistedmatrix.com>


On Jul 20, 2013, at 5:04 AM, Burak Nehbit <burak at nehbit.net> wrote:

> Is there such a thing for Qt5? Is it planned?

Well, it sounds like you're planning it, so, I guess so :).

I doubt that anyone on this list has plans to do it (or there would already be work qt5 work done in the qt reactor repository) but there are plenty of people (myself included) who would be very happy to help you learn enough about Twisted to do it yourself.  And, honestly, if you're motivated to do it it's probably *not* a huge amount of effort to update the implementation.  Feel free to ask any questions you have on this list.

In the meanwhile though, maybe you could report a bug to Nokia or Trolltech or whoever runs Qt development right now that they should stop gratuitously breaking interfaces between versions?  We've had (at least one) major rewrite of the Qt reactor for every version of Qt, which seem to come out relatively frequently.  Nothing about the nature of event loops or sockets has changed sufficiently in the meanwhile to justify the constant re-work that Qt seems to require from us.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130722/14516e7b/attachment.html>

From thomas.hommers at ebalu.com  Mon Jul 22 20:15:32 2013
From: thomas.hommers at ebalu.com (Thomas Hommers)
Date: Tue, 23 Jul 2013 02:15:32 +0000
Subject: [Twisted-Python] Don't Finalize Connection
Message-ID: <cab3b0ebfea74d139bbcb74eee273bf2@S05-MBX01-03.S05.local>

Hi,

i am fairly new to twisted and try to work my way trough the documentation.
There is a problem I can't find a solution for. Maybe somebody can give me a hint or point me into the right direction.

I am trying to create a TCP server. The client connects to the server, then the server will send multiple commands and binary data to the client. After the data has been send, the connection should stay open.

I subclass "Protocol" to create my protocol.
It seems that after i send data with self.transport.write(data) the last packet will be send with the "FP." flag, what seems to "Finalize" the connection from this end.

Is there a way to force twisted to just "Push" my data, but not to "Finalize" the connection?

Thanks.

Thomas

From hs at ox.cx  Tue Jul 23 01:12:48 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Tue, 23 Jul 2013 09:12:48 +0200
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <5AF6C57C-90F9-4132-97CE-5E9D407320E8@twistedmatrix.com>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
 <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
 <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>
 <5AF6C57C-90F9-4132-97CE-5E9D407320E8@twistedmatrix.com>
Message-ID: <2EEB7BA2-7ED9-45DF-A60F-176D548718B2@ox.cx>

Am 22.07.2013 um 23:37 schrieb Glyph <glyph at twistedmatrix.com>:

>> How would you feel about packaging it up on PyPI so people can try it out effortlessly? What do Apple?s licenses say about that? Yes, I?m volunteering.
>>  
>> It seems it's released under the ASL2. I don't know if Apple prevents *its* employees from doing anything in particular, but it seems like third party contributors are free to do with it as they please (within the limits of the license, of course). 
> 
> There are actually bits of this that I've been meaning to contribute back for a long time.  If somebody would like to help me out with it then maybe I can eke out a little bit of time to do it - I've just been pretty busy :-).

What exactly do you mean? Sounds like you?d like it to got straight into Twisted? Wouldn?t it make more sense to release it separately first? You know, kind of http://www.codinghorror.com/blog/2013/07/rule-of-three.html 

We could move it into the twisted namespace though.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130723/5975074a/attachment.html>

From _ at lvh.io  Tue Jul 23 03:42:33 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 23 Jul 2013 11:42:33 +0200
Subject: [Twisted-Python] Don't Finalize Connection
In-Reply-To: <cab3b0ebfea74d139bbcb74eee273bf2@S05-MBX01-03.S05.local>
References: <cab3b0ebfea74d139bbcb74eee273bf2@S05-MBX01-03.S05.local>
Message-ID: <CAE_Hg6aQ3orBnBjf+KGsDWPHO80fMzv-6UF4K_njimH3Q27hug@mail.gmail.com>

Hi Thomas,

On Tue, Jul 23, 2013 at 4:15 AM, Thomas Hommers <thomas.hommers at ebalu.com>wrote:

> It seems that after i send data with self.transport.write(data) the last
> packet will be send with the "FP." flag, what seems to "Finalize" the
> connection from this end.
>

I can't find any information on the "FP" flag in either IP or TCP.

Either way, if you just call self.transport.write, nothing is finalized.
Only when you call loseConnection is the connection lost :)

Are you observing any behavior that suggests that the connection is lost or
"finalized"? (I must admit I'm unfamiliar with the latter term, and have no
idea what you're referring to.)

Thanks.
> Thomas
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130723/34e80da5/attachment.html>

From p.mayers at imperial.ac.uk  Tue Jul 23 05:16:08 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 23 Jul 2013 12:16:08 +0100
Subject: [Twisted-Python] Don't Finalize Connection
In-Reply-To: <CAE_Hg6aQ3orBnBjf+KGsDWPHO80fMzv-6UF4K_njimH3Q27hug@mail.gmail.com>
References: <cab3b0ebfea74d139bbcb74eee273bf2@S05-MBX01-03.S05.local>
 <CAE_Hg6aQ3orBnBjf+KGsDWPHO80fMzv-6UF4K_njimH3Q27hug@mail.gmail.com>
Message-ID: <51EE65F8.8010204@imperial.ac.uk>

On 23/07/13 10:42, Laurens Van Houtven wrote:
> Hi Thomas,
>
> On Tue, Jul 23, 2013 at 4:15 AM, Thomas Hommers
> <thomas.hommers at ebalu.com <mailto:thomas.hommers at ebalu.com>> wrote:
>
>     It seems that after i send data with self.transport.write(data) the
>     last packet will be send with the "FP." flag, what seems to
>     "Finalize" the connection from this end.
>
>
> I can't find any information on the "FP" flag in either IP or TCP.

He means "FIN+PSH" in the TCP flags field.

Without knowing more details, it's impossible to know if the far end or 
his code initiated the close, and if the latter, whether something was 
directly or indirectly calling loseConnection.


From _ at lvh.io  Tue Jul 23 05:24:07 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 23 Jul 2013 13:24:07 +0200
Subject: [Twisted-Python] Don't Finalize Connection
In-Reply-To: <51EE65F8.8010204@imperial.ac.uk>
References: <cab3b0ebfea74d139bbcb74eee273bf2@S05-MBX01-03.S05.local>
 <CAE_Hg6aQ3orBnBjf+KGsDWPHO80fMzv-6UF4K_njimH3Q27hug@mail.gmail.com>
 <51EE65F8.8010204@imperial.ac.uk>
Message-ID: <CAE_Hg6ZjX6cBs7xgTd=EQ03B60d_G+Lh28wFd6BiCcQw8YkTEg@mail.gmail.com>

Hi,

On Tue, Jul 23, 2013 at 1:16 PM, Phil Mayers <p.mayers at imperial.ac.uk>wrote:

> He means "FIN+PSH" in the TCP flags field.
>

Ah! That makes a lot more sense :)


> Without knowing more details, it's impossible to know if the far end or
> his code initiated the close, and if the latter, whether something was
> directly or indirectly calling loseConnection.
>

Right. The only thing we can say for sure is that just calling
self.transport.write a couple of times won't cause that to happen.

Thomas, could you produce a SSCCE (http://sscce.org/) for this behavior?
Does it persist with a Twisted client and server?

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130723/46dafd68/attachment-0001.html>

From glyph at twistedmatrix.com  Wed Jul 24 11:43:57 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 24 Jul 2013 10:43:57 -0700
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <2EEB7BA2-7ED9-45DF-A60F-176D548718B2@ox.cx>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
 <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
 <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>
 <5AF6C57C-90F9-4132-97CE-5E9D407320E8@twistedmatrix.com>
 <2EEB7BA2-7ED9-45DF-A60F-176D548718B2@ox.cx>
Message-ID: <F5DDB964-4DA8-4807-8C62-25A2073E5BE8@twistedmatrix.com>


On Jul 23, 2013, at 12:12 AM, Hynek Schlawack <hs at ox.cx> wrote:

> Am 22.07.2013 um 23:37 schrieb Glyph <glyph at twistedmatrix.com>:
> 
>>> How would you feel about packaging it up on PyPI so people can try it out effortlessly? What do Apple?s licenses say about that? Yes, I?m volunteering.
>>>  
>>> It seems it's released under the ASL2. I don't know if Apple prevents *its* employees from doing anything in particular, but it seems like third party contributors are free to do with it as they please (within the limits of the license, of course). 
>> 
>> There are actually bits of this that I've been meaning to contribute back for a long time.  If somebody would like to help me out with it then maybe I can eke out a little bit of time to do it - I've just been pretty busy :-).
> 
> What exactly do you mean? Sounds like you?d like it to got straight into Twisted? Wouldn?t it make more sense to release it separately first? You know, kind of http://www.codinghorror.com/blog/2013/07/rule-of-three.html 

That's also a possibility, but following that rule makes the assumption that Calendar Server is just one application, when it's at least two (calendar & contacts) ;-).

> We could move it into the twisted namespace though.

The main motivation to do this, especially with adbapi2, is because Twisted already has an implementation of this exact thing with some deficiencies.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130724/45d4f54a/attachment.html>

From exarkun at twistedmatrix.com  Wed Jul 24 12:05:31 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 24 Jul 2013 18:05:31 -0000
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <F5DDB964-4DA8-4807-8C62-25A2073E5BE8@twistedmatrix.com>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
 <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
 <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>
 <5AF6C57C-90F9-4132-97CE-5E9D407320E8@twistedmatrix.com>
 <2EEB7BA2-7ED9-45DF-A60F-176D548718B2@ox.cx>
 <F5DDB964-4DA8-4807-8C62-25A2073E5BE8@twistedmatrix.com>
Message-ID: <20130724180531.28793.341867463.divmod.xquotient.736@top>

On 05:43 pm, glyph at twistedmatrix.com wrote:
>On Jul 23, 2013, at 12:12 AM, Hynek Schlawack <hs at ox.cx> wrote:
>>What exactly do you mean? Sounds like you?d like it to got straight 
>>into Twisted? Wouldn?t it make more sense to release it separately 
>>first? You know, kind of http://www.codinghorror.com/blog/2013/07 
>>/rule-of-three.html
>
>That's also a possibility, but following that rule makes the assumption 
>that Calendar Server is just one application, when it's at least two 
>(calendar & contacts) ;-).
>>We could move it into the twisted namespace though.
>
>The main motivation to do this, especially with adbapi2, is because 
>Twisted already has an implementation of this exact thing with some 
>deficiencies.

As far as I can tell, there's nothing stopping Hynek from grabbing all 
the code and releasing it as a separate project.

It seems like this would get the ball rolling more quickly and I don't 
see the downside.  If anything, having it as an independent project is 
more likely to get more people interested in it more quickly and so 
increase the pool of people who might be interested in addressing 
whatever concerns need to be addressed for its inclusion in Twisted.

So, why block that work in favor of inclusion directly in Twisted?

Jean-Paul


From hs at ox.cx  Wed Jul 24 16:01:30 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Thu, 25 Jul 2013 00:01:30 +0200
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <20130724180531.28793.341867463.divmod.xquotient.736@top>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
 <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
 <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>
 <5AF6C57C-90F9-4132-97CE-5E9D407320E8@twistedmatrix.com>
 <2EEB7BA2-7ED9-45DF-A60F-176D548718B2@ox.cx>
 <F5DDB964-4DA8-4807-8C62-25A2073E5BE8@twistedmatrix.com>
 <20130724180531.28793.341867463.divmod.xquotient.736@top>
Message-ID: <CC60714F-E3FA-4034-A0DE-115AF4881A80@ox.cx>


Am 24.07.2013 um 20:05 schrieb exarkun at twistedmatrix.com:

> It seems like this would get the ball rolling more quickly and I don't see the downside.  If anything, having it as an independent project is more likely to get more people interested in it more quickly and so increase the pool of people who might be interested in addressing whatever concerns need to be addressed for its inclusion in Twisted.

That?s exactly my line of thought here.  adbapi2 has been pointed out several times now on this list but I doubt people really use it since it?s rather cumbersome to get.

I?m not fighting/delaying its inclusion in Twisted, I just don?t see that happen effectively anytime soon even if the integration work started immediately.  I would just add a smaller step in between that may provide additional insights about potential usage + add some momentum.

Cheers,
?h

From glyph at twistedmatrix.com  Wed Jul 24 16:43:31 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 24 Jul 2013 15:43:31 -0700
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <20130724180531.28793.341867463.divmod.xquotient.736@top>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
 <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
 <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>
 <5AF6C57C-90F9-4132-97CE-5E9D407320E8@twistedmatrix.com>
 <2EEB7BA2-7ED9-45DF-A60F-176D548718B2@ox.cx>
 <F5DDB964-4DA8-4807-8C62-25A2073E5BE8@twistedmatrix.com>
 <20130724180531.28793.341867463.divmod.xquotient.736@top>
Message-ID: <7DE271A4-856B-4E1F-99C5-05A04C67DEB0@twistedmatrix.com>


On Jul 24, 2013, at 11:05 AM, exarkun at twistedmatrix.com wrote:

> On 05:43 pm, glyph at twistedmatrix.com wrote:
>> On Jul 23, 2013, at 12:12 AM, Hynek Schlawack <hs at ox.cx> wrote:
>>> What exactly do you mean? Sounds like you?d like it to got straight into Twisted? Wouldn?t it make more sense to release it separately first? You know, kind of http://www.codinghorror.com/blog/2013/07 /rule-of-three.html
>> 
>> That's also a possibility, but following that rule makes the assumption that Calendar Server is just one application, when it's at least two (calendar & contacts) ;-).
>>> We could move it into the twisted namespace though.
>> 
>> The main motivation to do this, especially with adbapi2, is because Twisted already has an implementation of this exact thing with some deficiencies.
> 
> As far as I can tell, there's nothing stopping Hynek from grabbing all the code and releasing it as a separate project.
> 
> It seems like this would get the ball rolling more quickly and I don't see the downside.  If anything, having it as an independent project is more likely to get more people interested in it more quickly and so increase the pool of people who might be interested in addressing whatever concerns need to be addressed for its inclusion in Twisted.
> 
> So, why block that work in favor of inclusion directly in Twisted?
> 
> Jean-Paul

In principle I can see the appeal of spinning out small, lightweight projects to test enhancements to Twisted, but my enthusiasm for this idea has been tempered over time by the fact that it has never actually worked (that I can recall).  How many projects on <https://launchpad.net/tx> have ever made it to be features within Twisted?  Remember how we weren't going to work on our own process pooling implementation because <https://launchpad.net/ampoule> was going to solve that problem, and we'd just include it when it was done?  As far as I know we haven't even managed to pull in small things like <https://github.com/dreid/treq/blob/master/treq/client.py#L57>.

First of all, there's change-tracking overhead.  People interested in ADBAPI would now have 3 places to potentially put code: Hynek's hypothetical project, calendarserver.org, and Twisted.  Twisted code-reviewers are probably not going to look at Hynek's project (they hardly look at Twisted at it is), and that means that it might have a laxer approach to cool new features, which in turn means that "more interest" just means that it's going to be a bigger ball of code that is harder to get re-integrated.  Calendar Server developers are going to keep maintaining the version in the Calendar Server repository, so it's going to diverge.  Everybody's using a different source tree, so merging will all have to be done manually.

Then there's the fact that provenance tracking is a pain.  Let's say Hynek makes a new project on Github.  The license clearly gives him the right to do that.  Now, when people contribute to that repository, who are they contributing to?  Hynek, or Twisted, or Calendar Server (or Github?)?  What license are they providing those modifications under, Apache2 or MIT?

This is all totally possible to keep track of and deal with, and indeed, if I don't have the time to be responsive to Hynek I'd recommend that he go ahead and do so; I'm sure we can work it out later if we need to.  But preparing it for contribution to Twisted is just an engineering headache under a simple, established licensing and contribution process, and given the option between an engineering headache and a licensing headache PLUS an engineering headache PLUS a process headache, I'll take the engineering headache every time. ;-)

If you just want to see broader testing first, a better solution would be for Hynek to just contribute to the Calendar Server project directly so that there are effectively 2 parties involved rather than 3; for starters, we could have a setup.py in the calendarserver.org repository that just submits twext.enterprise.* to PyPI as an independent source distribution, while remaining part of the same project.  It can *appear* to be a separate project as long as it's developed in the same place. :-)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130724/afa5fc11/attachment.html>

From c.justin88 at gmail.com  Wed Jul 24 17:19:20 2013
From: c.justin88 at gmail.com (Justin Chiu)
Date: Wed, 24 Jul 2013 16:19:20 -0700
Subject: [Twisted-Python] Multi-service, multi-protocol examples
Message-ID: <51F060F8.2060303@gmail.com>

Hi all,

A couple weeks ago I posted a question to this list titled "AMQP 
listening and user-facing daemon". The responses were very helpful; 
thank you.

Does anyone have any examples/tutorials on writing with multiple 
protocols doing totally different things? I found a thread on 
Stackoverflow [1] and the Twisted Finger tutorial [2].

Anything along these lines -- possibly more in-depth? I have also been 
working thorugh the recommended Krondo tutorial [3] which has been 
helpful in learning the mechanisms of Twisted.

     [1] 
http://stackoverflow.com/questions/4084090/multiple-reactors-main-loops-in-one-application-through-threading-or-alternat
     [2] 
https://twistedmatrix.com/documents/current/core/howto/tutorial/index.html
     [3] http://krondo.com/blog/?p=1247

Thanks,
Justin


From hs at ox.cx  Thu Jul 25 02:08:58 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Thu, 25 Jul 2013 10:08:58 +0200
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <7DE271A4-856B-4E1F-99C5-05A04C67DEB0@twistedmatrix.com>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
 <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
 <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>
 <5AF6C57C-90F9-4132-97CE-5E9D407320E8@twistedmatrix.com>
 <2EEB7BA2-7ED9-45DF-A60F-176D548718B2@ox.cx>
 <F5DDB964-4DA8-4807-8C62-25A2073E5BE8@twistedmatrix.com>
 <20130724180531.28793.341867463.divmod.xquotient.736@top>
 <7DE271A4-856B-4E1F-99C5-05A04C67DEB0@twistedmatrix.com>
Message-ID: <EA3F9997-0D15-4E01-8FDC-D077C429E2C6@ox.cx>


Am 25.07.2013 um 00:43 schrieb Glyph <glyph at twistedmatrix.com>:

> If you just want to see broader testing first, a better solution would be for Hynek to just contribute to the Calendar Server project directly so that there are effectively 2 parties involved rather than 3; for starters, we could have a setup.py in the calendarserver.org repository that just submits twext.enterprise.* to PyPI as an independent source distribution, while remaining part of the same project.  It can *appear* to be a separate project as long as it's developed in the same place. :-)

I don?t really care *how* it gets to PyPI ? all I was suggesting to get it there *somehow* so people can get excited about it.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130725/af9262eb/attachment-0001.html>

From exarkun at twistedmatrix.com  Thu Jul 25 04:15:12 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 25 Jul 2013 10:15:12 -0000
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <7DE271A4-856B-4E1F-99C5-05A04C67DEB0@twistedmatrix.com>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
 <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
 <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>
 <5AF6C57C-90F9-4132-97CE-5E9D407320E8@twistedmatrix.com>
 <2EEB7BA2-7ED9-45DF-A60F-176D548718B2@ox.cx>
 <F5DDB964-4DA8-4807-8C62-25A2073E5BE8@twistedmatrix.com>
 <20130724180531.28793.341867463.divmod.xquotient.736@top>
 <7DE271A4-856B-4E1F-99C5-05A04C67DEB0@twistedmatrix.com>
Message-ID: <20130725101512.28793.1557014858.divmod.xquotient.739@top>

On 24 Jul, 10:43 pm, glyph at twistedmatrix.com wrote:
>
>
>If you just want to see broader testing first, a better solution would 
>be for Hynek to just contribute to the Calendar Server project directly 
>so that there are effectively 2 parties involved rather than 3; for 
>starters, we could have a setup.py in the calendarserver.org repository 
>that just submits twext.enterprise.* to PyPI as an independent source 
>distribution, while remaining part of the same project.  It can 
>*appear* to be a separate project as long as it's developed in the same 
>place. :-)

That sounds good to me.

Jean-Paul
>-glyph


From jamesbroadhead at gmail.com  Thu Jul 25 08:25:37 2013
From: jamesbroadhead at gmail.com (James Broadhead)
Date: Thu, 25 Jul 2013 15:25:37 +0100
Subject: [Twisted-Python] Trial & the mock library
Message-ID: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>

Hey all -

I've recently started working with the 'mock' library in our trial tests,
and am looking for some best-practice advice.  I'm really just starting to
get used to the library, so it might well have functionality that I'm
unaware of or am misusing.

I very quickly ran into a problem where I mistakenly returned a Mock() in
the place of a deferred, causing the asserts in callbacks to not be called,
and for the test to spuriously pass.

A basic example:

def test_foo():
  d = Mock()
  def check_result(res):
    self.assertEqual(res.code, expected)  # never called
  d.addCallback(check_result)
  return d # Mock is truthy, test passes

This occurred where I was mocking some internals of the class under test;
something like the below

A slightly more believable example:
== myclass.py ==
def some_function(...):
  d = self.authenticate()
  d.addCallback(foo) # foo never called
  d.addErrback(bar) # bar never called
  return d

== test_myclass.py ==
def setUp(self):
  self.resource.authenticate = Mock(return_value=Mock())

def test_foo():
  d = self.resource.some_function
  def check_result(res):  # never called
    self.assertEqual(res.code, expected)
  d.addCallback(check_result)
  return d # test passes

Currently, I'm experimenting with wrapping Mock instantiations by defining
common deferred methods on them in advance; this approach would eventually
lead to extending Mock itself with this functionality.

def nonDeferredMock():
    m = Mock()
    def notimpl(*args, **kwargs):
        raise NotImplementedError('You treated a Mock like a Deferred!')
    m.addCallback = notimpl
    m.addErrback = notimpl
    m.addBoth = notimpl
    m.addCallbacks = notimpl
    return m

Another approach might be extending TestCase to check that return values
are always not Mock objects.

Does anyone on the list have experience with this? Obviously, this only
happens when mistakes are made when writing tests, but I'd rather have
confidence that when my tests pass, that they've passed for the right
reasons.

Another antipattern that I've come across has been:

resource.mymethod = Mock(return_value=defer.succeed(None))

which works fine for tests in which mymethod() is called once, but always
returns the same deferred object if multiple calls are made. What would be
a better approach?

Cheers-

James
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130725/6aa228d3/attachment.html>

From jml at mumak.net  Thu Jul 25 08:40:13 2013
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 25 Jul 2013 15:40:13 +0100
Subject: [Twisted-Python] Trial & the mock library
In-Reply-To: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
References: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
Message-ID: <CAHZ8tnZNj9uKMZwkrYvxjMOWXexkUqMaAsDBSg7Aij-BKk41DA@mail.gmail.com>

On Thu, Jul 25, 2013 at 3:25 PM, James Broadhead
<jamesbroadhead at gmail.com>wrote:

> I very quickly ran into a problem where I mistakenly returned a Mock() in
> the place of a deferred, causing the asserts in callbacks to not be called,
> and for the test to spuriously pass.
>
> A slightly more believable example:
> == myclass.py ==
> def some_function(...):
>   d = self.authenticate()
>   d.addCallback(foo) # foo never called
>   d.addErrback(bar) # bar never called
>   return d
>
> == test_myclass.py ==
> def setUp(self):
>   self.resource.authenticate = Mock(return_value=Mock())
>
>
Why not use patch and replace it with lambda: defer.succeed(None)?

jml
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130725/0b5e771e/attachment.html>

From _ at lvh.io  Thu Jul 25 09:14:25 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Thu, 25 Jul 2013 17:14:25 +0200
Subject: [Twisted-Python] Trial & the mock library
In-Reply-To: <CAHZ8tnZNj9uKMZwkrYvxjMOWXexkUqMaAsDBSg7Aij-BKk41DA@mail.gmail.com>
References: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
 <CAHZ8tnZNj9uKMZwkrYvxjMOWXexkUqMaAsDBSg7Aij-BKk41DA@mail.gmail.com>
Message-ID: <CAE_Hg6b+Wae73Zq5++iVwge5xwv+LCuQq6cAVtrrv6Ut5eEZdQ@mail.gmail.com>

In addition to what jml said, I wonder if it makes sense for TestCase to
raise when the return value of a test method is something other than None
or a Deferred...

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130725/a7e7ec64/attachment.html>

From jml at mumak.net  Thu Jul 25 09:40:39 2013
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 25 Jul 2013 16:40:39 +0100
Subject: [Twisted-Python] Trial & the mock library
In-Reply-To: <CAE_Hg6b+Wae73Zq5++iVwge5xwv+LCuQq6cAVtrrv6Ut5eEZdQ@mail.gmail.com>
References: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
 <CAHZ8tnZNj9uKMZwkrYvxjMOWXexkUqMaAsDBSg7Aij-BKk41DA@mail.gmail.com>
 <CAE_Hg6b+Wae73Zq5++iVwge5xwv+LCuQq6cAVtrrv6Ut5eEZdQ@mail.gmail.com>
Message-ID: <CAHZ8tna0bTNSW2m_aBLetFnmTp3DgCNDhJOpB9J4e-7HRhV2-A@mail.gmail.com>

On Thu, Jul 25, 2013 at 4:14 PM, Laurens Van Houtven <_ at lvh.io> wrote:

> In addition to what jml said, I wonder if it makes sense for TestCase to
> raise when the return value of a test method is something other than None
> or a Deferred...
>
>
Why stop there? Why not have a generic system to allow specifying valid
return types for any function?

jml
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130725/a8c1d200/attachment.html>

From glyph at twistedmatrix.com  Thu Jul 25 14:32:05 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 25 Jul 2013 13:32:05 -0700
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <EA3F9997-0D15-4E01-8FDC-D077C429E2C6@ox.cx>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
 <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
 <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>
 <5AF6C57C-90F9-4132-97CE-5E9D407320E8@twistedmatrix.com>
 <2EEB7BA2-7ED9-45DF-A60F-176D548718B2@ox.cx>
 <F5DDB964-4DA8-4807-8C62-25A2073E5BE8@twistedmatrix.com>
 <20130724180531.28793.341867463.divmod.xquotient.736@top>
 <7DE271A4-856B-4E1F-99C5-05A04C67DEB0@twistedmatrix.com>
 <EA3F9997-0D15-4E01-8FDC-D077C429E2C6@ox.cx>
Message-ID: <67B68634-F078-4100-AC5C-A049A4F25BF0@twistedmatrix.com>

On Jul 25, 2013, at 1:08 AM, Hynek Schlawack <hs at ox.cx> wrote:

> Am 25.07.2013 um 00:43 schrieb Glyph <glyph at twistedmatrix.com>:
> 
>> If you just want to see broader testing first, a better solution would be for Hynek to just contribute to the Calendar Server project directly so that there are effectively 2 parties involved rather than 3; for starters, we could have a setup.py in the calendarserver.org repository that just submits twext.enterprise.* to PyPI as an independent source distribution, while remaining part of the same project.  It can *appear* to be a separate project as long as it's developed in the same place. :-)
> 
> I don?t really care *how* it gets to PyPI ? all I was suggesting to get it there *somehow* so people can get excited about it.

Maybe I just read too much into "grab all the source files", then :-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130725/91d20225/attachment.html>

From glyph at twistedmatrix.com  Thu Jul 25 14:33:55 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 25 Jul 2013 13:33:55 -0700
Subject: [Twisted-Python] Trial & the mock library
In-Reply-To: <CAHZ8tna0bTNSW2m_aBLetFnmTp3DgCNDhJOpB9J4e-7HRhV2-A@mail.gmail.com>
References: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
 <CAHZ8tnZNj9uKMZwkrYvxjMOWXexkUqMaAsDBSg7Aij-BKk41DA@mail.gmail.com>
 <CAE_Hg6b+Wae73Zq5++iVwge5xwv+LCuQq6cAVtrrv6Ut5eEZdQ@mail.gmail.com>
 <CAHZ8tna0bTNSW2m_aBLetFnmTp3DgCNDhJOpB9J4e-7HRhV2-A@mail.gmail.com>
Message-ID: <9D971A96-9588-45D4-8D2C-9C273E70E3D7@twistedmatrix.com>


On Jul 25, 2013, at 8:40 AM, Jonathan Lange <jml at mumak.net> wrote:

> On Thu, Jul 25, 2013 at 4:14 PM, Laurens Van Houtven <_ at lvh.io> wrote:
> In addition to what jml said, I wonder if it makes sense for TestCase to raise when the return value of a test method is something other than None or a Deferred...
> 
> 
> Why stop there? Why not have a generic system to allow specifying valid return types for any function?

That sounds like a great idea, I wonder if anyone's thought of it before.

We already encode the information in epytext.  Should we make it a dependency, so it can be parsed at runtime to aid with enforcement?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130725/2548585f/attachment.html>

From glyph at twistedmatrix.com  Thu Jul 25 14:40:36 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 25 Jul 2013 13:40:36 -0700
Subject: [Twisted-Python] Multi-service, multi-protocol examples
In-Reply-To: <51F060F8.2060303@gmail.com>
References: <51F060F8.2060303@gmail.com>
Message-ID: <7C3CD35C-70CC-48EC-B536-0CE4BAB1A5BB@twistedmatrix.com>


On Jul 24, 2013, at 4:19 PM, Justin Chiu <c.justin88 at gmail.com> wrote:

> Hi all,
> 
> A couple weeks ago I posted a question to this list titled "AMQP listening and user-facing daemon". The responses were very helpful; thank you.
> 
> Does anyone have any examples/tutorials on writing with multiple protocols doing totally different things? I found a thread on Stackoverflow [1] and the Twisted Finger tutorial [2].

The unifying element of many multi-protocol services is authentication; specifically, as authentication is provided via Cred: <http://twistedmatrix.com/documents/current/core/howto/cred.html>.  There ought to be more documentation on this, but once you've read through it, have a stroll through the API documentation and the examples and you should get a pretty good idea :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130725/38a7186d/attachment.html>

From exarkun at twistedmatrix.com  Thu Jul 25 16:51:22 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 25 Jul 2013 22:51:22 -0000
Subject: [Twisted-Python] Trial & the mock library
In-Reply-To: <9D971A96-9588-45D4-8D2C-9C273E70E3D7@twistedmatrix.com>
References: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
 <CAHZ8tnZNj9uKMZwkrYvxjMOWXexkUqMaAsDBSg7Aij-BKk41DA@mail.gmail.com>
 <CAE_Hg6b+Wae73Zq5++iVwge5xwv+LCuQq6cAVtrrv6Ut5eEZdQ@mail.gmail.com>
 <CAHZ8tna0bTNSW2m_aBLetFnmTp3DgCNDhJOpB9J4e-7HRhV2-A@mail.gmail.com>
 <9D971A96-9588-45D4-8D2C-9C273E70E3D7@twistedmatrix.com>
Message-ID: <20130725225122.28793.1420267455.divmod.xquotient.744@top>

On 08:33 pm, glyph at twistedmatrix.com wrote:
>
>On Jul 25, 2013, at 8:40 AM, Jonathan Lange <jml at mumak.net> wrote:
>>On Thu, Jul 25, 2013 at 4:14 PM, Laurens Van Houtven <_ at lvh.io> wrote:
>>In addition to what jml said, I wonder if it makes sense for TestCase 
>>to raise when the return value of a test method is something other 
>>than None or a Deferred...
>>
>>
>>Why stop there? Why not have a generic system to allow specifying 
>>valid return types for any function?
>
>That sounds like a great idea, I wonder if anyone's thought of it 
>before.
>
>We already encode the information in epytext.  Should we make it a 
>dependency, so it can be parsed at runtime to aid with enforcement?

Please finish the Lore -> Sphinx transition first so that we can begin 
investigating whether reStructuredText for API documentation is 
sensible.  We don't want to drag in an epytext parsing dependency if 
we're just going to switch to docutils in eight or nine years.

Jean-Paul


From glyph at twistedmatrix.com  Thu Jul 25 17:12:21 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 25 Jul 2013 16:12:21 -0700
Subject: [Twisted-Python] Trial & the mock library
In-Reply-To: <20130725225122.28793.1420267455.divmod.xquotient.744@top>
References: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
 <CAHZ8tnZNj9uKMZwkrYvxjMOWXexkUqMaAsDBSg7Aij-BKk41DA@mail.gmail.com>
 <CAE_Hg6b+Wae73Zq5++iVwge5xwv+LCuQq6cAVtrrv6Ut5eEZdQ@mail.gmail.com>
 <CAHZ8tna0bTNSW2m_aBLetFnmTp3DgCNDhJOpB9J4e-7HRhV2-A@mail.gmail.com>
 <9D971A96-9588-45D4-8D2C-9C273E70E3D7@twistedmatrix.com>
 <20130725225122.28793.1420267455.divmod.xquotient.744@top>
Message-ID: <C7652634-7E82-4439-8D37-F21B28A7B242@twistedmatrix.com>


On Jul 25, 2013, at 3:51 PM, exarkun at twistedmatrix.com wrote:

> On 08:33 pm, glyph at twistedmatrix.com wrote:
>> 
>> On Jul 25, 2013, at 8:40 AM, Jonathan Lange <jml at mumak.net> wrote:
>>> On Thu, Jul 25, 2013 at 4:14 PM, Laurens Van Houtven <_ at lvh.io> wrote:
>>> In addition to what jml said, I wonder if it makes sense for TestCase to raise when the return value of a test method is something other than None or a Deferred...
>>> 
>>> 
>>> Why stop there? Why not have a generic system to allow specifying valid return types for any function?
>> 
>> That sounds like a great idea, I wonder if anyone's thought of it before.
>> 
>> We already encode the information in epytext.  Should we make it a dependency, so it can be parsed at runtime to aid with enforcement?
> 
> Please finish the Lore -> Sphinx transition first so that we can begin investigating whether reStructuredText for API documentation is sensible.  We don't want to drag in an epytext parsing dependency if we're just going to switch to docutils in eight or nine years.

That's a good point, but I wouldn't want to block on it.  We could easily implement a simple abstraction layer for type identification that layers and translates between epydoc and ReST; we'd probably need this during the transitional period anyway, since lore->sphinx isn't pydoctor->sphinx.

Plus, of course, we'd need that abstraction layer to support multiple different styles of py3k function annotations, if we're talking about things that people might use in eight or nine years.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130725/d6aa6c9a/attachment.html>

From haggardii at gmail.com  Thu Jul 25 19:51:41 2013
From: haggardii at gmail.com (Matt Haggard)
Date: Thu, 25 Jul 2013 19:51:41 -0600
Subject: [Twisted-Python] Trial & the mock library
In-Reply-To: <C7652634-7E82-4439-8D37-F21B28A7B242@twistedmatrix.com>
References: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
 <CAHZ8tnZNj9uKMZwkrYvxjMOWXexkUqMaAsDBSg7Aij-BKk41DA@mail.gmail.com>
 <CAE_Hg6b+Wae73Zq5++iVwge5xwv+LCuQq6cAVtrrv6Ut5eEZdQ@mail.gmail.com>
 <CAHZ8tna0bTNSW2m_aBLetFnmTp3DgCNDhJOpB9J4e-7HRhV2-A@mail.gmail.com>
 <9D971A96-9588-45D4-8D2C-9C273E70E3D7@twistedmatrix.com>
 <20130725225122.28793.1420267455.divmod.xquotient.744@top>
 <C7652634-7E82-4439-8D37-F21B28A7B242@twistedmatrix.com>
Message-ID: <CAL+xXwMuLHXOHFufq79tmVJ7x5+P9=EtheODsVu+7GcuMy5sNQ@mail.gmail.com>

I have a few thoughts:

First, how does this hypothetical system for specifying return types solve
the original problem (that user-written methods on TestCase pass
unexpectedly when a non-Deferred is returned)?  If I'm the one writing
test_whatever, with the proposed doc string method for specifying return
type, then wouldn't I need to write a docstring that specifies the return
type as Deferred?

Second, I don't love the idea of the docstring changing how a function
behaves... I like that it's a free form blob of text.  I think I'd rather
see decorators used for this purpose.

I understand that one benefit of putting the info in the docstring is that
it ensures the docstring will always be accurate.

But you could just as easily extract the return type from the decorator for
generating HTML docs, and people reading the source could see the
decorators.

Also, we can still leverage the existing info recorded in the docstring by
doing a one time pass off the code to turn the docstring info into
decorators.

My two cents
On Jul 25, 2013 5:13 PM, "Glyph" <glyph at twistedmatrix.com> wrote:

>
> On Jul 25, 2013, at 3:51 PM, exarkun at twistedmatrix.com wrote:
>
> On 08:33 pm, glyph at twistedmatrix.com wrote:
>
>
> On Jul 25, 2013, at 8:40 AM, Jonathan Lange <jml at mumak.net> wrote:
>
> On Thu, Jul 25, 2013 at 4:14 PM, Laurens Van Houtven <_ at lvh.io> wrote:
> In addition to what jml said, I wonder if it makes sense for TestCase to
> raise when the return value of a test method is something other than None
> or a Deferred...
>
>
> Why stop there? Why not have a generic system to allow specifying valid
> return types for any function?
>
>
> That sounds like a great idea, I wonder if anyone's thought of it before.
>
> We already encode the information in epytext.  Should we make it a
> dependency, so it can be parsed at runtime to aid with enforcement?
>
>
> Please finish the Lore -> Sphinx transition first so that we can begin
> investigating whether reStructuredText for API documentation is sensible.
>  We don't want to drag in an epytext parsing dependency if we're just going
> to switch to docutils in eight or nine years.
>
>
> That's a good point, but I wouldn't want to block on it.  We could easily
> implement a simple abstraction layer for type identification that layers
> and translates between epydoc and ReST; we'd probably need this during the
> transitional period anyway, since lore->sphinx isn't pydoctor->sphinx.
>
> Plus, of course, we'd need that abstraction layer to support multiple
> different styles of py3k function annotations, if we're talking about
> things that people might use in eight or nine years.
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130725/f8d12f30/attachment-0001.html>

From jml at mumak.net  Fri Jul 26 01:23:53 2013
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 26 Jul 2013 08:23:53 +0100
Subject: [Twisted-Python] Trial & the mock library
In-Reply-To: <C7652634-7E82-4439-8D37-F21B28A7B242@twistedmatrix.com>
References: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
 <CAHZ8tnZNj9uKMZwkrYvxjMOWXexkUqMaAsDBSg7Aij-BKk41DA@mail.gmail.com>
 <CAE_Hg6b+Wae73Zq5++iVwge5xwv+LCuQq6cAVtrrv6Ut5eEZdQ@mail.gmail.com>
 <CAHZ8tna0bTNSW2m_aBLetFnmTp3DgCNDhJOpB9J4e-7HRhV2-A@mail.gmail.com>
 <9D971A96-9588-45D4-8D2C-9C273E70E3D7@twistedmatrix.com>
 <20130725225122.28793.1420267455.divmod.xquotient.744@top>
 <C7652634-7E82-4439-8D37-F21B28A7B242@twistedmatrix.com>
Message-ID: <CAHZ8tnZb+Er9uGn3ereX_PH+YxsFuOWuvtAhj0h9vtyz3+ciyg@mail.gmail.com>

On Fri, Jul 26, 2013 at 12:12 AM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Jul 25, 2013, at 3:51 PM, exarkun at twistedmatrix.com wrote:
>
> On 08:33 pm, glyph at twistedmatrix.com wrote:
>
>
> On Jul 25, 2013, at 8:40 AM, Jonathan Lange <jml at mumak.net> wrote:
>
> On Thu, Jul 25, 2013 at 4:14 PM, Laurens Van Houtven <_ at lvh.io> wrote:
> In addition to what jml said, I wonder if it makes sense for TestCase to
> raise when the return value of a test method is something other than None
> or a Deferred...
>
>
> Why stop there? Why not have a generic system to allow specifying valid
> return types for any function?
>
>
> That sounds like a great idea, I wonder if anyone's thought of it before.
>
> We already encode the information in epytext.  Should we make it a
> dependency, so it can be parsed at runtime to aid with enforcement?
>
>
> Please finish the Lore -> Sphinx transition first so that we can begin
> investigating whether reStructuredText for API documentation is sensible.
>  We don't want to drag in an epytext parsing dependency if we're just going
> to switch to docutils in eight or nine years.
>
>
> That's a good point, but I wouldn't want to block on it.  We could easily
> implement a simple abstraction layer for type identification that layers
> and translates between epydoc and ReST; we'd probably need this during the
> transitional period anyway, since lore->sphinx isn't pydoctor->sphinx.
>
> Plus, of course, we'd need that abstraction layer to support multiple
> different styles of py3k function annotations, if we're talking about
> things that people might use in eight or nine years.
>
>

No need. If we implement it with Zope 3 components (I think it's called
pyramid or grok now or something?), then we can rely on their py3k support.

I am somewhat troubled by the security implications of this feature,
especially when used in conjunction with manhole.

jml
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130726/a719a0a3/attachment.html>

From glyph at twistedmatrix.com  Fri Jul 26 02:03:43 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 26 Jul 2013 01:03:43 -0700
Subject: [Twisted-Python] Trial & the mock library
In-Reply-To: <CAL+xXwMuLHXOHFufq79tmVJ7x5+P9=EtheODsVu+7GcuMy5sNQ@mail.gmail.com>
References: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
 <CAHZ8tnZNj9uKMZwkrYvxjMOWXexkUqMaAsDBSg7Aij-BKk41DA@mail.gmail.com>
 <CAE_Hg6b+Wae73Zq5++iVwge5xwv+LCuQq6cAVtrrv6Ut5eEZdQ@mail.gmail.com>
 <CAHZ8tna0bTNSW2m_aBLetFnmTp3DgCNDhJOpB9J4e-7HRhV2-A@mail.gmail.com>
 <9D971A96-9588-45D4-8D2C-9C273E70E3D7@twistedmatrix.com>
 <20130725225122.28793.1420267455.divmod.xquotient.744@top>
 <C7652634-7E82-4439-8D37-F21B28A7B242@twistedmatrix.com>
 <CAL+xXwMuLHXOHFufq79tmVJ7x5+P9=EtheODsVu+7GcuMy5sNQ@mail.gmail.com>
Message-ID: <34C43B07-DC89-46C7-A5D2-E7D651E02503@twistedmatrix.com>


On Jul 25, 2013, at 6:51 PM, Matt Haggard <haggardii at gmail.com> wrote:

> I have a few thoughts:
> 
> First, how does this hypothetical system for specifying return types solve the original problem (that user-written methods on TestCase pass unexpectedly when a non-Deferred is returned)?  If I'm the one writing test_whatever, with the proposed doc string method for specifying return type, then wouldn't I need to write a docstring that specifies the return type as Deferred?
> 
All of this follows quite obviously if you just consider that a functional specification document (in other words, the generalization of the docstring) is simply a partial bijective homomorphism over the orbifold of possible runtime states (into the Hilbert space with a boundary defined by the NxM coordinate matrix of all possible intersections of sets of bugs and non-bugs of course).
> Second, I don't love the idea of the docstring changing how a function behaves... I like that it's a free form blob of text.  I think I'd rather see decorators used for this purpose.
> 
It's not so much changing how the function behaves but rather what its behavior is.

In any case, there's a great paper which offers an excellent theoretical background that should explain what I mean by that distinction, and should really elucidate some of the other threads in this conversation as well: <http://isotropic.org/papers/chicken.pdf>

Hope that clears things up,

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130726/5e412c44/attachment.html>

From terry at jon.es  Fri Jul 26 08:03:33 2013
From: terry at jon.es (Terry Jones)
Date: Fri, 26 Jul 2013 15:03:33 +0100
Subject: [Twisted-Python] Trial & the mock library
In-Reply-To: <9D971A96-9588-45D4-8D2C-9C273E70E3D7@twistedmatrix.com>
References: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
 <CAHZ8tnZNj9uKMZwkrYvxjMOWXexkUqMaAsDBSg7Aij-BKk41DA@mail.gmail.com>
 <CAE_Hg6b+Wae73Zq5++iVwge5xwv+LCuQq6cAVtrrv6Ut5eEZdQ@mail.gmail.com>
 <CAHZ8tna0bTNSW2m_aBLetFnmTp3DgCNDhJOpB9J4e-7HRhV2-A@mail.gmail.com>
 <9D971A96-9588-45D4-8D2C-9C273E70E3D7@twistedmatrix.com>
Message-ID: <CACqnu4XfTejtjd81L1V5iekQxmQBv8GmKM9rc7KHFMmEZzML7Q@mail.gmail.com>

> That sounds like a great idea, I wonder if anyone's thought of it before.

I suggested this in #twisted a few years back and was immediately told it
was a bad idea (names withheld!).

Another case in which this pops up is if you accidentally yield some
deferreds in a test but don't decorate with @inlineCallbacks. Trial runs
the test function, gets back a generator object, and thinks "yep, ok,
that's not an error". I've hit that multiple times and know several
experienced Twisted users who have too.

T



On Thu, Jul 25, 2013 at 9:33 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Jul 25, 2013, at 8:40 AM, Jonathan Lange <jml at mumak.net> wrote:
>
> On Thu, Jul 25, 2013 at 4:14 PM, Laurens Van Houtven <_ at lvh.io> wrote:
>
>> In addition to what jml said, I wonder if it makes sense for TestCase to
>> raise when the return value of a test method is something other than None
>> or a Deferred...
>>
>>
> Why stop there? Why not have a generic system to allow specifying valid
> return types for any function?
>
>
> That sounds like a great idea, I wonder if anyone's thought of it before.
>
> We already encode the information in epytext.  Should we make it a
> dependency, so it can be parsed at runtime to aid with enforcement?
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130726/b0641e52/attachment.html>

From exarkun at twistedmatrix.com  Fri Jul 26 08:12:03 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 26 Jul 2013 14:12:03 -0000
Subject: [Twisted-Python] Trial & the mock library
In-Reply-To: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
References: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
Message-ID: <20130726141203.28793.1763275835.divmod.xquotient.749@top>

On 25 Jul, 02:25 pm, jamesbroadhead at gmail.com wrote:
>Hey all -
>
>I've recently started working with the 'mock' library in our trial 
>tests,
>and am looking for some best-practice advice.  I'm really just starting 
>to
>get used to the library, so it might well have functionality that I'm
>unaware of or am misusing.
>
>I very quickly ran into a problem where I mistakenly returned a Mock() 
>in
>the place of a deferred, causing the asserts in callbacks to not be 
>called,
>and for the test to spuriously pass.

To address this problem, I suggest you get into the habit of watching 
your unit tests fail in the expected way before you make the necessary 
implementation changes to make them pass.

This is only one of an unlimited number of ways your unit tests can be 
buggy.  It might be tempting to try to fix the test runner to prevent 
you from ever falling into this trap again - and who knows, it might 
even be a good idea.
However, if you run your tests and see them fail in the way you expected 
them to fail before you write the code that makes them pass, then you 
will be sure to avoid the many, many, many *other* pitfalls that have 
nothing to do with accidentally returning the wrong object.

This is just one of the attractions of test-driven development for me.

Jean-Paul
>A basic example:
>
>def test_foo():
>  d = Mock()
>  def check_result(res):
>    self.assertEqual(res.code, expected)  # never called
>  d.addCallback(check_result)
>  return d # Mock is truthy, test passes
>
>This occurred where I was mocking some internals of the class under 
>test;
>something like the below
>
>A slightly more believable example:
>== myclass.py ==
>def some_function(...):
>  d = self.authenticate()
>  d.addCallback(foo) # foo never called
>  d.addErrback(bar) # bar never called
>  return d
>
>== test_myclass.py ==
>def setUp(self):
>  self.resource.authenticate = Mock(return_value=Mock())
>
>def test_foo():
>  d = self.resource.some_function
>  def check_result(res):  # never called
>    self.assertEqual(res.code, expected)
>  d.addCallback(check_result)
>  return d # test passes
>
>Currently, I'm experimenting with wrapping Mock instantiations by 
>defining
>common deferred methods on them in advance; this approach would 
>eventually
>lead to extending Mock itself with this functionality.
>
>def nonDeferredMock():
>    m = Mock()
>    def notimpl(*args, **kwargs):
>        raise NotImplementedError('You treated a Mock like a Deferred!')
>    m.addCallback = notimpl
>    m.addErrback = notimpl
>    m.addBoth = notimpl
>    m.addCallbacks = notimpl
>    return m
>
>Another approach might be extending TestCase to check that return 
>values
>are always not Mock objects.
>
>Does anyone on the list have experience with this? Obviously, this only
>happens when mistakes are made when writing tests, but I'd rather have
>confidence that when my tests pass, that they've passed for the right
>reasons.
>
>Another antipattern that I've come across has been:
>
>resource.mymethod = Mock(return_value=defer.succeed(None))
>
>which works fine for tests in which mymethod() is called once, but 
>always
>returns the same deferred object if multiple calls are made. What would 
>be
>a better approach?
>
>Cheers-
>
>James


From glyph at twistedmatrix.com  Fri Jul 26 22:26:24 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 26 Jul 2013 21:26:24 -0700
Subject: [Twisted-Python] Trial & the mock library
In-Reply-To: <20130726141203.28793.1763275835.divmod.xquotient.749@top>
References: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
 <20130726141203.28793.1763275835.divmod.xquotient.749@top>
Message-ID: <E5207BFC-CD93-4F35-9C84-1EA7144D782A@twistedmatrix.com>


On Jul 26, 2013, at 7:12 AM, exarkun at twistedmatrix.com wrote:

> To address this problem, I suggest you get into the habit of watching your unit tests fail in the expected way before you make the necessary implementation changes to make them pass.
> 
> This is only one of an unlimited number of ways your unit tests can be buggy.  It might be tempting to try to fix the test runner to prevent you from ever falling into this trap again - and who knows, it might even be a good idea.
> However, if you run your tests and see them fail in the way you expected them to fail before you write the code that makes them pass, then you will be sure to avoid the many, many, many *other* pitfalls that have nothing to do with accidentally returning the wrong object.
> 
> This is just one of the attractions of test-driven development for me.

On a more serious note than our previous digression, perhaps *this* is the thing we should be modifying Trial to support.

The vast majority of Twisted committers do development this way - or at least aspire to, most of the time - but to someone new to automated testing, it's not entirely clear how you're supposed to use something like Trial, or how important it is that you see the tests fail first.

Perhaps if trial had a bit more of a memory of things that happened between test runs it would be useful.  For example, a mode where you could tell it what you're working on, and you could just re-run the same thing and you'd only get a 'success' when you went back and forth between red and green.

Here's a silly little narrative about how one might use such a thing:

$ tribulation begin myproject
Beginning a time of turmoil for python package 'myproject', in './myproject/'.
myproject.test_1
  Case1
    test_1 ...                                                             [OK]

-------------------------------------------------------------------------------
Ran 2 tests in 0.033s

PROCEED (successes=1) - All tests passing, an auspicious beginning. Now write a failing test.
$ tribulation continue
myproject.test_1
  Case1
    test_1 ...                                                             [OK]
myproject.test_2
  Case2
    test_2 ...                                                             [OK]

-------------------------------------------------------------------------------
Ran 2 tests in 0.033s

AGAIN (successes=2) - a test should have failed.
# oops, 'test_2' was just 'pass'... let me fix that
$ tribulation continue
$ tribulation begin myproject
Beginning a time of turmoil for python package 'myproject', in './myproject/'.
myproject.test_1
  Case1
    test_1 ...                                                             [OK]
myproject.test_2
  Case2
    test_2 ...                                                           [FAIL]

-------------------------------------------------------------------------------
Ran 2 tests in 0.450s

PROCEED (successes=2) - we are working on myproject.Case2.test_2 now.
$ tribulation continue
myproject.test_2
  Case2
    test_2 ...                                                           [FAIL]

-------------------------------------------------------------------------------
Ran 1 tests in 0.020s
AGAIN (successes=2) - you should have made the test pass.
$ tribulation continue
myproject.test_2
  Case2
    test_2 ...                                                             [OK]

-------------------------------------------------------------------------------
Ran 1 tests in 0.01s
PROCEED (successes=1) - myproject.Case2.test_2 works now, let's make sure nothing else broke.
$ tribulation continue
myproject.test_1
  Case1
    test_1 ...                                                             [OK]
myproject.test_2
  Case2
    test_2 ...                                                             [OK]

-------------------------------------------------------------------------------
Ran 2 tests in 0.033s
PROCEED (successes=2) - no regressions, find the next thing to work on
$ tribulation conclude
You have received one billion points, congratulations you have defeated software.

Does this seem like it might be a useful feature for someone to work on?  Not shown here is the part that when you do introduce a regression, it runs just the tests that failed until you fix all of them, then goes back up the suite until it reaches the top and you move on to the next thing...

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130726/cdee24d2/attachment.html>

From jml at mumak.net  Sat Jul 27 03:08:26 2013
From: jml at mumak.net (Jonathan Lange)
Date: Sat, 27 Jul 2013 10:08:26 +0100
Subject: [Twisted-Python] Trial & the mock library
In-Reply-To: <E5207BFC-CD93-4F35-9C84-1EA7144D782A@twistedmatrix.com>
References: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
 <20130726141203.28793.1763275835.divmod.xquotient.749@top>
 <E5207BFC-CD93-4F35-9C84-1EA7144D782A@twistedmatrix.com>
Message-ID: <CAHZ8tnaU_Pyo7k1Tew8YtMaE2GwGFHw8E1xOpRSucTx0UzZFMw@mail.gmail.com>

On Sat, Jul 27, 2013 at 5:26 AM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Jul 26, 2013, at 7:12 AM, exarkun at twistedmatrix.com wrote:
>
> To address this problem, I suggest you get into the habit of watching your
> unit tests fail in the expected way before you make the necessary
> implementation changes to make them pass.
>
> This is only one of an unlimited number of ways your unit tests can be
> buggy.  It might be tempting to try to fix the test runner to prevent you
> from ever falling into this trap again - and who knows, it might even be a
> good idea.
> However, if you run your tests and see them fail in the way you expected
> them to fail before you write the code that makes them pass, then you will
> be sure to avoid the many, many, many *other* pitfalls that have nothing to
> do with accidentally returning the wrong object.
>
> This is just one of the attractions of test-driven development for me.
>
>
> On a more serious note than our previous digression, perhaps *this* is the
> thing we should be modifying Trial to support.
>
> The vast majority of Twisted committers do development this way - or at
> least aspire to, most of the time - but to someone new to automated
> testing, it's not entirely clear *how* you're supposed to use something
> like Trial, or how important it is that you see the tests fail first.
>
> Perhaps if trial had a bit more of a memory of things that happened
> between test runs it would be useful.  For example, a mode where you could
> tell it what you're working on, and you could just re-run the same thing
> and you'd only get a 'success' when you went back and forth between red and
> green.
>
> Here's a silly little narrative about how one might use such a thing:
>
> $ tribulation begin myproject
> Beginning a time of turmoil for python package 'myproject', in
> './myproject/'.
> myproject.test_1
>   Case1
>     test_1 ...
>   [OK]
>
>
> -------------------------------------------------------------------------------
> Ran 2 tests in 0.033s
>
> PROCEED (successes=1) - All tests passing, an auspicious beginning. Now
> write a failing test.
> $ tribulation continue
> myproject.test_1
>   Case1
>     test_1 ...
>   [OK]
> myproject.test_2
>   Case2
>     test_2 ...
>   [OK]
>
>
> -------------------------------------------------------------------------------
> Ran 2 tests in 0.033s
>
> *AGAIN* (successes=2) - a test should have failed.
> # oops, 'test_2' was just 'pass'... let me fix that
> $ tribulation continue
> $ tribulation begin myproject
> Beginning a time of turmoil for python package 'myproject', in
> './myproject/'.
> myproject.test_1
>   Case1
>     test_1 ...
>   [OK]
> myproject.test_2
>   Case2
>     test_2 ...
> [FAIL]
>
>
> -------------------------------------------------------------------------------
> Ran 2 tests in 0.450s
>
> PROCEED (successes=2) - we are working on myproject.Case2.test_2 now.
> $ tribulation continue
> myproject.test_2
>   Case2
>     test_2 ...
> [FAIL]
>
>
> -------------------------------------------------------------------------------
> Ran 1 tests in 0.020s
> *AGAIN* (successes=2) - you should have made the test pass.
> $ tribulation continue
> myproject.test_2
>   Case2
>     test_2 ...
>   [OK]
>
>
> -------------------------------------------------------------------------------
> Ran 1 tests in 0.01s
> PROCEED (successes=1) - myproject.Case2.test_2 works now, let's make sure
> nothing else broke.
> $ tribulation continue
> myproject.test_1
>   Case1
>     test_1 ...
>   [OK]
> myproject.test_2
>   Case2
>     test_2 ...
>   [OK]
>
>
> -------------------------------------------------------------------------------
> Ran 2 tests in 0.033s
> PROCEED (successes=2) - no regressions, find the next thing to work on
> $ tribulation conclude
> You have received one billion points, congratulations you have defeated
> software.
>
>
> Does this seem like it might be a useful feature for someone to work on?
>  Not shown here is the part that when you do introduce a regression, it
> runs just the tests that failed until you fix all of them, then goes back
> up the suite until it reaches the top and you move on to the next thing...
>
>
I like the idea.

testrepository <http://testrepository.readthedocs.org/en/latest/> stores
tests results in a database and already has support for running just the
tests that failed, etc.  It just runs whatever executable you give it,
provided that executable outputs subunit.

Not on a computer with it installed (and can't find a good webpage), but
here's the basic gist:

$ testr init  # initialize the database
$ testr run  # runs everything
... # test output goes here
$ testr run  # runs everything, shows delta of tests failed & time taken
$ testr run --failing  # just run what failed

It doesn't have the TDD straightjacket you describe, but that would be a
fun thing to make.

jml
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130727/f0cbdd25/attachment-0001.html>

From burslem2001 at yahoo.com  Sat Jul 27 10:08:32 2013
From: burslem2001 at yahoo.com (gary clark)
Date: Sat, 27 Jul 2013 09:08:32 -0700 (PDT)
Subject: [Twisted-Python] ugh open-ssl and twisted python
Message-ID: <1374941312.60664.YahooMailNeo@web120906.mail.ne1.yahoo.com>

Hello,
?
This problem?has been driving me crazy for a couple of days. I'm hoping someone can shed some light
on this. I have a twisted server its using open-ssl (using certificates) and runs on linux and communicates great with a windows client thats send messages every second.
?
However when I send data back to the client "sometimes" it doesnt receive the packet and there is no indication of failure at the client whats more I dont see any failure on the twisted server end. Is there any way I?can tell what could cause this failure? It just look like the transport.write(data) fails just dont know why it would when receiving works like a charm.
?
Any help on this would relieve the pain I'm feeling right now.
?
Much Appreciated,
Gazza
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130727/41029812/attachment.html>

From _ at lvh.io  Sat Jul 27 10:51:09 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Sat, 27 Jul 2013 18:51:09 +0200
Subject: [Twisted-Python] ugh open-ssl and twisted python
In-Reply-To: <1374941312.60664.YahooMailNeo@web120906.mail.ne1.yahoo.com>
References: <1374941312.60664.YahooMailNeo@web120906.mail.ne1.yahoo.com>
Message-ID: <CAE_Hg6aDsnyY7y3BDNBBaYQ7WY0s1Yg1qXr3hu5R+xiD0_P9ZA@mail.gmail.com>

Hi Gary,

On Sat, Jul 27, 2013 at 6:08 PM, gary clark <burslem2001 at yahoo.com> wrote:

> Hello,
>
> This problem has been driving me crazy for a couple of days. I'm hoping
> someone can shed some light
> on this. I have a twisted server its using open-ssl (using certificates)
> and runs on linux and communicates great with a windows client thats send
> messages every second.
>
> However when I send data back to the client "sometimes" it doesnt receive
> the packet and there is no indication of failure at the client whats more I
> dont see any failure on the twisted server end.
>

When you say "packet", does that mean "actual IP packet that you observed
leaving the server", or do you mean "the thing I passed to transport.write"?


> Is there any way I can tell what could cause this failure? It just look
> like the transport.write(data) fails just dont know why it would when
> receiving works like a charm.
>

So, it fails silently? Keep in mind that transport.write working doesn't
necessarily mean that anything on the other end has successfully read it:
that's why good RPC mechanisms like AMP have positive acknowedgement :)


> Any help on this would relieve the pain I'm feeling right now.
>

How are these two servers connected? Can you reliably reproduce the
problem? Does it persist with other transports? Could you shed some more
light on what you mean by "sometimes"?

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130727/f3ee15af/attachment.html>

From exarkun at twistedmatrix.com  Sat Jul 27 11:27:03 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 27 Jul 2013 17:27:03 -0000
Subject: [Twisted-Python] ugh open-ssl and twisted python
In-Reply-To: <1374941312.60664.YahooMailNeo@web120906.mail.ne1.yahoo.com>
References: <1374941312.60664.YahooMailNeo@web120906.mail.ne1.yahoo.com>
Message-ID: <20130727172703.28793.2147346251.divmod.xquotient.754@top>

On 04:08 pm, burslem2001 at yahoo.com wrote:
>Hello,
>
>This problem?has been driving me crazy for a couple of days. I'm hoping 
>someone can shed some light
>on this. I have a twisted server its using open-ssl (using 
>certificates) and runs on linux and communicates great with a windows 
>client thats send messages every second.
>
>However when I send data back to the client "sometimes" it doesnt 
>receive the packet and there is no indication of failure at the client 
>whats more I dont see any failure on the twisted server end. Is there 
>any way I?can tell what could cause this failure? It just look like the 
>transport.write(data) fails just dont know why it would when receiving 
>works like a charm.
>
>Any help on this would relieve the pain I'm feeling right now.

Please see http://sscce.org/

Jean-Paul


From burslem2001 at yahoo.com  Sat Jul 27 11:36:29 2013
From: burslem2001 at yahoo.com (gary clark)
Date: Sat, 27 Jul 2013 10:36:29 -0700 (PDT)
Subject: [Twisted-Python] ugh open-ssl and twisted python
In-Reply-To: <20130727172703.28793.2147346251.divmod.xquotient.754@top>
References: <1374941312.60664.YahooMailNeo@web120906.mail.ne1.yahoo.com>
 <20130727172703.28793.2147346251.divmod.xquotient.754@top>
Message-ID: <1374946589.75618.YahooMailNeo@web120905.mail.ne1.yahoo.com>

Guys,
?
Its the MTU size. Anything bigger than 1500 bytes is getting fragmented.
Using wireshark I'm seeing TCP Previous segment lost anything bigger than 1500. However once that
happens things go south and remain there.
?
Oh boy one day I will learn but not today.
?
Cheers,
Gazza
?
From: "exarkun at twistedmatrix.com" <exarkun at twistedmatrix.com>
To: Twisted general discussion <twisted-python at twistedmatrix.com> 
Sent: Saturday, July 27, 2013 12:27 PM
Subject: Re: [Twisted-Python] ugh open-ssl and twisted python


On 04:08 pm, burslem2001 at yahoo.com wrote:
> Hello,
> 
> This problem?has been driving me crazy for a couple of days. I'm hoping someone can shed some light
> on this. I have a twisted server its using open-ssl (using certificates) and runs on linux and communicates great with a windows client thats send messages every second.
> 
> However when I send data back to the client "sometimes" it doesnt receive the packet and there is no indication of failure at the client whats more I dont see any failure on the twisted server end. Is there any way I?can tell what could cause this failure? It just look like the transport.write(data) fails just dont know why it would when receiving works like a charm.
> 
> Any help on this would relieve the pain I'm feeling right now.

Please see http://sscce.org/

Jean-Paul

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130727/2eef79b7/attachment.html>

From burslem2001 at yahoo.com  Sat Jul 27 13:38:11 2013
From: burslem2001 at yahoo.com (gary clark)
Date: Sat, 27 Jul 2013 12:38:11 -0700 (PDT)
Subject: [Twisted-Python] ugh open-ssl and twisted python
In-Reply-To: <1374946589.75618.YahooMailNeo@web120905.mail.ne1.yahoo.com>
References: <1374941312.60664.YahooMailNeo@web120906.mail.ne1.yahoo.com>
 <20130727172703.28793.2147346251.divmod.xquotient.754@top>
 <1374946589.75618.YahooMailNeo@web120905.mail.ne1.yahoo.com>
Message-ID: <1374953891.9376.YahooMailNeo@web120905.mail.ne1.yahoo.com>

Ok split my data up into smaller fragments. It still look like its reassembing the whole payload
before sending it to the client. I'm calling transport.write(partdata) multiple times with a 0.5 second delay running in a twisted thread. How can I force the write to happen straight away in twisted.
?
Sorry for all the questions.
?
Thanks,
Gazza

From: gary clark <burslem2001 at yahoo.com>
To: Twisted general discussion <twisted-python at twistedmatrix.com> 
Sent: Saturday, July 27, 2013 12:36 PM
Subject: Re: [Twisted-Python] ugh open-ssl and twisted python



Guys,

Its the MTU size. Anything bigger than 1500 bytes is getting fragmented.
Using wireshark I'm seeing TCP Previous segment lost anything bigger than 1500. However once that
happens things go south and remain there.

Oh boy one day I will learn but not today.

Cheers,
Gazza

From: "exarkun at twistedmatrix.com" <exarkun at twistedmatrix.com>
To: Twisted general discussion <twisted-python at twistedmatrix.com> 
Sent: Saturday, July 27, 2013 12:27 PM
Subject: Re: [Twisted-Python] ugh open-ssl and twisted python


On 04:08 pm, burslem2001 at yahoo.com wrote:
> Hello,
> 
> This problem?has been driving me crazy for a couple of days. I'm hoping someone can shed some light
> on this. I have a twisted server its using open-ssl (using certificates) and runs on linux and communicates great with a windows client thats send messages every second.
> 
> However when I send data back to the client "sometimes" it doesnt receive the packet and there is no indication of failure at the client whats more I dont see any failure on the twisted server end. Is there any way I?can tell what could cause this failure? It just look like the transport.write(data) fails just dont know why it would when receiving works like a charm.
> 
> Any help on this would relieve the pain I'm feeling right now.

Please see http://sscce.org/

Jean-Paul

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130727/ae7a4b79/attachment.html>

From burslem2001 at yahoo.com  Sat Jul 27 13:38:11 2013
From: burslem2001 at yahoo.com (gary clark)
Date: Sat, 27 Jul 2013 12:38:11 -0700 (PDT)
Subject: [Twisted-Python] ugh open-ssl and twisted python
In-Reply-To: <1374946589.75618.YahooMailNeo@web120905.mail.ne1.yahoo.com>
References: <1374941312.60664.YahooMailNeo@web120906.mail.ne1.yahoo.com>
 <20130727172703.28793.2147346251.divmod.xquotient.754@top>
 <1374946589.75618.YahooMailNeo@web120905.mail.ne1.yahoo.com>
Message-ID: <1374953891.9376.YahooMailNeo@web120905.mail.ne1.yahoo.com>

Ok split my data up into smaller fragments. It still look like its reassembing the whole payload
before sending it to the client. I'm calling transport.write(partdata) multiple times with a 0.5 second delay running in a twisted thread. How can I force the write to happen straight away in twisted.
?
Sorry for all the questions.
?
Thanks,
Gazza

From: gary clark <burslem2001 at yahoo.com>
To: Twisted general discussion <twisted-python at twistedmatrix.com> 
Sent: Saturday, July 27, 2013 12:36 PM
Subject: Re: [Twisted-Python] ugh open-ssl and twisted python



Guys,

Its the MTU size. Anything bigger than 1500 bytes is getting fragmented.
Using wireshark I'm seeing TCP Previous segment lost anything bigger than 1500. However once that
happens things go south and remain there.

Oh boy one day I will learn but not today.

Cheers,
Gazza

From: "exarkun at twistedmatrix.com" <exarkun at twistedmatrix.com>
To: Twisted general discussion <twisted-python at twistedmatrix.com> 
Sent: Saturday, July 27, 2013 12:27 PM
Subject: Re: [Twisted-Python] ugh open-ssl and twisted python


On 04:08 pm, burslem2001 at yahoo.com wrote:
> Hello,
> 
> This problem?has been driving me crazy for a couple of days. I'm hoping someone can shed some light
> on this. I have a twisted server its using open-ssl (using certificates) and runs on linux and communicates great with a windows client thats send messages every second.
> 
> However when I send data back to the client "sometimes" it doesnt receive the packet and there is no indication of failure at the client whats more I dont see any failure on the twisted server end. Is there any way I?can tell what could cause this failure? It just look like the transport.write(data) fails just dont know why it would when receiving works like a charm.
> 
> Any help on this would relieve the pain I'm feeling right now.

Please see http://sscce.org/

Jean-Paul

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130727/ae7a4b79/attachment-0001.html>

From burslem2001 at yahoo.com  Sat Jul 27 16:12:49 2013
From: burslem2001 at yahoo.com (gary clark)
Date: Sat, 27 Jul 2013 15:12:49 -0700 (PDT)
Subject: [Twisted-Python] ugh open-ssl and twisted python
In-Reply-To: <1374953891.9376.YahooMailNeo@web120905.mail.ne1.yahoo.com>
References: <1374941312.60664.YahooMailNeo@web120906.mail.ne1.yahoo.com>
 <20130727172703.28793.2147346251.divmod.xquotient.754@top>
 <1374946589.75618.YahooMailNeo@web120905.mail.ne1.yahoo.com>
 <1374953891.9376.YahooMailNeo@web120905.mail.ne1.yahoo.com>
Message-ID: <1374963169.9787.YahooMailNeo@web120906.mail.ne1.yahoo.com>

Ok finally fixed the damn thing. I made the packets smaller and created a task in the .tac file to call a? routine that send the message parts piece by piece.
?
Thanks,
Gazza

From: gary clark <burslem2001 at yahoo.com>
To: gary clark <burslem2001 at yahoo.com>; Twisted general discussion <twisted-python at twistedmatrix.com>; Twisted general discussion <twisted-python at twistedmatrix.com> 
Sent: Saturday, July 27, 2013 2:38 PM
Subject: Re: [Twisted-Python] ugh open-ssl and twisted python



Ok split my data up into smaller fragments. It still look like its reassembing the whole payload
before sending it to the client. I'm calling transport.write(partdata) multiple times with a 0.5 second delay running in a twisted thread. How can I force the write to happen straight away in twisted.
?
Sorry for all the questions.
?
Thanks,
Gazza

From: gary clark <burslem2001 at yahoo.com>
To: Twisted general discussion <twisted-python at twistedmatrix.com> 
Sent: Saturday, July 27, 2013 12:36 PM
Subject: Re: [Twisted-Python] ugh open-ssl and twisted python



Guys,

Its the MTU size. Anything bigger than 1500 bytes is getting fragmented.
Using wireshark I'm seeing TCP Previous segment lost anything bigger than 1500. However once that
happens things go south and remain there.

Oh boy one day I will learn but not today.

Cheers,
Gazza

From: "exarkun at twistedmatrix.com" <exarkun at twistedmatrix.com>
To: Twisted general discussion <twisted-python at twistedmatrix.com> 
Sent: Saturday, July 27, 2013 12:27 PM
Subject: Re: [Twisted-Python] ugh open-ssl and twisted python


On 04:08 pm, burslem2001 at yahoo.com wrote:
> Hello,
> 
> This problem?has been driving me crazy for a couple of days. I'm hoping someone can shed some light
> on this. I have a twisted server its using open-ssl (using certificates) and runs on linux and communicates great with a windows client thats send messages every second.
> 
> However when I send data back to the client "sometimes" it doesnt receive the packet and there is no indication of failure at the client whats more I dont see any failure on the twisted server end. Is there any way I?can tell what could cause this failure? It just look like the transport.write(data) fails just dont know why it would when receiving works like a charm.
> 
> Any help on this would relieve the pain I'm feeling right now.

Please see http://sscce.org/

Jean-Paul

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130727/1481f220/attachment-0001.html>

From glyph at twistedmatrix.com  Sat Jul 27 16:30:15 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 27 Jul 2013 15:30:15 -0700
Subject: [Twisted-Python] ugh open-ssl and twisted python
In-Reply-To: <1374963169.9787.YahooMailNeo@web120906.mail.ne1.yahoo.com>
References: <1374941312.60664.YahooMailNeo@web120906.mail.ne1.yahoo.com>
 <20130727172703.28793.2147346251.divmod.xquotient.754@top>
 <1374946589.75618.YahooMailNeo@web120905.mail.ne1.yahoo.com>
 <1374953891.9376.YahooMailNeo@web120905.mail.ne1.yahoo.com>
 <1374963169.9787.YahooMailNeo@web120906.mail.ne1.yahoo.com>
Message-ID: <5B8C09DA-6D4C-41EB-91AA-19F2261AB6E1@twistedmatrix.com>


On Jul 27, 2013, at 3:12 PM, gary clark <burslem2001 at yahoo.com> wrote:

> Ok finally fixed the damn thing. I made the packets smaller and created a task in the .tac file to call a  routine that send the message parts piece by piece.
>  
> Thanks,
> Gazza
> 

That's the wrong way to implement that.  You can't rely on any particular MTU over the internet, or even over one particular stream; it can change over time.  TCP connections are streams of bytes.  Please see the following FAQ:

<http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#Whyisprotocol.dataReceivedcalledwithonlypartofthedataIcalledtransport.writewith>

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130727/6fc4c0e4/attachment.html>

From gjorge at google.com  Mon Jul 29 14:29:18 2013
From: gjorge at google.com (Jorge Gonzalez)
Date: Mon, 29 Jul 2013 13:29:18 -0700
Subject: [Twisted-Python] defer.gatherResults & Deferreds chaining
Message-ID: <CAN9+jDbNvJi9X2bsUswPWKf7jrzUT_b9kKo4YD6K-k-g4YuXEg@mail.gmail.com>

I'm trying to understand why a chain of Deferreds I'm dealing with hangs
and why return values from some callbacks are not always making it to other
callbacks down the chain of Deferreds.

Is it possible that there could be a race condition between Deferred
chaining and Deferred result
gathering<http://twistedmatrix.com/documents/current/core/howto/defer.html>
?
I.e., Chaining Deferreds<http://twistedmatrix.com/documents/current/core/howto/defer.html#auto13>
says
that "*If you need one Deferred to wait on another, all you need to do is
return a Deferred from a method added to addCallbacks. Specifically, if you
return Deferred B from a method added to Deferred A using A.addCallbacks,
Deferred A's processing chain will stop until Deferred B's .callback()
method is called; at that point, the next callback in A will be passed the
result of the last callback in Deferred B's processing chain at the time*."

Now at the same time,
DeferredList<http://twistedmatrix.com/documents/current/core/howto/defer.html#auto8>
 (on top of which gatherResults is built) warns that "*If you want to apply
callbacks to the individual Deferreds that go into the DeferredList, you
should be careful about when those callbacks are added. The act of adding a
Deferred to a DeferredList inserts a callback into that Deferred ... The
important thing to remember is that it is this callback which records the
value that goes into the result list handed to the DeferredList's callback.*
*Therefore, if you add a callback to the Deferred after adding the Deferred
to the DeferredList, the value returned by that callback will not be given
to the DeferredList's callback. To avoid confusion, we recommend not adding
callbacks to a Deferred once it has been used in a DeferredList*"

Given these two explanations, say I have something like this:
---------------------------------------------------------------------------
def slowFuncReturningDeferred_A():
  ...

def slowFuncReturningDeferred_B():
  ...

d = defer.Deferred()
d.addCallback(labmda _: slowFuncReturningDeferred_A())
d.addCallback(labmda _: slowFuncReturningDeferred_B())

defer.gatherResults([d])
---------------------------------------------------------------------------

Wouldn't it be possible that defer.gatherResults inserts its callback
into d before
say slowFuncReturningDeferred_B gets to run and return its own Deferred
(and therefore chain it to what gatherRestults is ultimately waiting for?).
If so, wouldn't the results returned by slowFuncReturningDeferred_B never
make it to the results gathered by defer.gatherResults?

Thanks,
Jorge
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130729/63d8b800/attachment.html>

From glyph at twistedmatrix.com  Mon Jul 29 17:04:26 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 29 Jul 2013 16:04:26 -0700
Subject: [Twisted-Python] defer.gatherResults & Deferreds chaining
In-Reply-To: <CAN9+jDbNvJi9X2bsUswPWKf7jrzUT_b9kKo4YD6K-k-g4YuXEg@mail.gmail.com>
References: <CAN9+jDbNvJi9X2bsUswPWKf7jrzUT_b9kKo4YD6K-k-g4YuXEg@mail.gmail.com>
Message-ID: <F7B75DBA-0EBD-405C-8E62-6EB4CCAA9E74@twistedmatrix.com>


On Jul 29, 2013, at 1:29 PM, Jorge Gonzalez <gjorge at google.com> wrote:

> Wouldn't it be possible that defer.gatherResults inserts its callback into d before say slowFuncReturningDeferred_B gets to run and return its own Deferred (and therefore chain it to what gatherRestults is ultimately waiting for?). If so, wouldn't the results returned by slowFuncReturningDeferred_B never make it to the results gathered by defer.gatherResults?

No, that's not what happens.  You call addCallback(lambda _: slowFunc...A()), then you call gatherResults.  That means gatherResult's callback is after slowFuncReturningA() in d's callback chain.

Can you attach an actual runnable code example with some behavior that you didn't expect, so we can actually run it and explain what's happening?  No need for you to spin the reactor or anything, just instantiate a Deferred and then fire it.

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130729/6679d3b0/attachment.html>

From zipxing at hotmail.com  Tue Jul 30 02:54:10 2013
From: zipxing at hotmail.com (zipxing)
Date: Tue, 30 Jul 2013 16:54:10 +0800
Subject: [Twisted-Python] transport.write performance.
Message-ID: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>

A simple TCP echo server using epoll reactor:this server process take 60% cpu on 4000 request/s.
If use self.transport.getHandle().send instead of self.transport.write,it take 30% cpu on 4000 request/s.
Why transport.write take more user cpu?Why twisted performance so poor?(echosvr.c using libevent only take 12% cpu on 4000 request/s)
tsvr.py-----------------------------------------------------------import sys, time, random, socket, tracebackfrom twisted.internet import epollreactorepollreactor.install()from twisted.internet import defer, reactor, taskfrom twisted.internet.protocol import Protocol, Factoryfrom protocol import TCPServerProtocol
def main():        tcpprotocol = TCPServerProtocol        factory = Factory()        factory.protocol = tcpprotocol        reactor.listenTCP(9976, factory)        reactor.run()
if __name__ == '__main__':        main()
protocol.py--------------------------------------------------------- import socketimport datetimeimport tracebackfrom twisted.protocols.basic import LineReceiverfrom twisted.internet import protocol
class TCPServerProtocol(LineReceiver):        req_count = 0        req_time = datetime.datetime.now()
        def lineReceived(self, data):                TCPServerProtocol.req_count+=1                if TCPServerProtocol.req_count%10000==0:                        ct = datetime.datetime.now()                        dt = ct-TCPServerProtocol.req_time                        pps = 10000/(dt.seconds+dt.microseconds/1000000.0)                        TCPServerProtocol.req_time=ct                        print('RPS='+str(pps))                try:                        #self.transport.write(data)                        self.transport.getHandle().send(data)                except:                        traceback.print_exc()
tcli.py -----------------------------------------------------------------import sysimport socketimport tracebackimport timeimport datetime
host = 'localhost'port = 9976loopcount = 300sockcount = 5000RPS = 4000
ss=[]for x in xrange(sockcount):        ss.append(socket.socket(socket.AF_INET, socket.SOCK_STREAM))        ss[x].connect((host, port))        ss[x].settimeout(120)
for x in xrange(10000000):        st = datetime.datetime.now()        for y in xrange(loopcount):                try:                        if ss[x%sockcount]!=None:                                ss[x%sockcount].sendall('1234567890\r\n')                                ss[x%sockcount].recv(1024)                except:                        print y                        sys.exit()        time.sleep(0.1)        dt = (datetime.datetime.now()-st)        plc = loopcount/(dt.seconds+dt.microseconds/1000000.0)        print loopcount/(dt.seconds+dt.microseconds/1000000.0)        #auto adjust RPS        if plc<RPS:                if RPS-plc>50:                        loopcount+=10        else:                if plc-RPS>50:                        loopcount-=10
echosvr.c ----------------------------------------------------------------------#include <stdio.h>#include <stdlib.h>#include <errno.h>#include <assert.h>
#include <event2/event.h>#include <event2/bufferevent.h>
#define LISTEN_PORT 9976#define LISTEN_BACKLOG 32
#ifdef FD_SETSIZE#undef FD_SETSIZE#endif#define FD_SETSIZE 65536
void do_accept(evutil_socket_t listener, short event, void *arg);void read_cb(struct bufferevent *bev, void *arg);void error_cb(struct bufferevent *bev, short event, void *arg);void write_cb(struct bufferevent *bev, void *arg);
int main(int argc, char *argv[]){    int ret;    evutil_socket_t listener;    listener = socket(AF_INET, SOCK_STREAM, 0);    assert(listener > 0);    evutil_make_listen_socket_reuseable(listener);
    struct sockaddr_in sin;    sin.sin_family = AF_INET;    sin.sin_addr.s_addr = 0;    sin.sin_port = htons(LISTEN_PORT);
    if (bind(listener, (struct sockaddr *)&sin, sizeof(sin)) < 0) {        perror("bind");        return 1;    }
    if (listen(listener, LISTEN_BACKLOG) < 0) {        perror("listen");        return 1;    }
    printf ("Listening...\n");
    evutil_make_socket_nonblocking(listener);
    struct event_base *base = event_base_new();    assert(base != NULL);    struct event *listen_event;    listen_event = event_new(base, listener, EV_READ|EV_PERSIST, do_accept, (void*)base);    event_add(listen_event, NULL);    event_base_dispatch(base);
    printf("The End.");    return 0;}
void do_accept(evutil_socket_t listener, short event, void *arg){    struct event_base *base = (struct event_base *)arg;    evutil_socket_t fd;    struct sockaddr_in sin;    socklen_t slen;    fd = accept(listener, (struct sockaddr *)&sin, &slen);    if (fd < 0) {        perror("accept");        return;    }    if (fd > FD_SETSIZE) {        perror("fd > FD_SETSIZE\n");        return;    }
    printf("ACCEPT: fd = %u\n", fd);
    struct bufferevent *bev = bufferevent_socket_new(base, fd, BEV_OPT_CLOSE_ON_FREE);    bufferevent_setcb(bev, read_cb, NULL, error_cb, arg);    bufferevent_enable(bev, EV_READ|EV_WRITE|EV_PERSIST);}
void read_cb(struct bufferevent *bev, void *arg){#define MAX_LINE    256    char line[MAX_LINE+1];    int n;    evutil_socket_t fd = bufferevent_getfd(bev);
    while (n = bufferevent_read(bev, line, MAX_LINE), n > 0) {        line[n] = '\0';        //printf("fd=%u, read line: %s\n", fd, line);
        bufferevent_write(bev, line, n);    }}
void write_cb(struct bufferevent *bev, void *arg) {}
void error_cb(struct bufferevent *bev, short event, void *arg){    evutil_socket_t fd = bufferevent_getfd(bev);    printf("fd = %u, ", fd);    if (event & BEV_EVENT_TIMEOUT) {        printf("Timed out\n"); //if bufferevent_set_timeouts() called    }    else if (event & BEV_EVENT_EOF) {        printf("connection closed\n");    }    else if (event & BEV_EVENT_ERROR) {        printf("some other error\n");    }    bufferevent_free(bev);} 		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130730/70353e04/attachment-0001.html>

From zipxing at hotmail.com  Tue Jul 30 02:58:17 2013
From: zipxing at hotmail.com (zipxing)
Date: Tue, 30 Jul 2013 16:58:17 +0800
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
Message-ID: <SNT131-W42743A6AF69DF292E83ABFB4560@phx.gbl>

tsvr.py
-----------------------------------------------------------
import sys, time, random, socket, traceback
from twisted.internet import epollreactor
epollreactor.install()
from twisted.internet import defer, reactor, task
from twisted.internet.protocol import Protocol, Factory
from protocol import TCPServerProtocol

def main():
? ? ? ? tcpprotocol = TCPServerProtocol
? ? ? ? factory = Factory()
? ? ? ? factory.protocol = tcpprotocol
? ? ? ? reactor.listenTCP(9976, factory)
? ? ? ? reactor.run()

if __name__ == '__main__':
? ? ? ? main()

protocol.py
---------------------------------------------------------?
import socket
import datetime
import traceback
from twisted.protocols.basic import LineReceiver
from twisted.internet import protocol

class TCPServerProtocol(LineReceiver):
? ? ? ? req_count = 0
? ? ? ? req_time = datetime.datetime.now()

? ? ? ? def lineReceived(self, data):
? ? ? ? ? ? ? ? TCPServerProtocol.req_count+=1
? ? ? ? ? ? ? ? if TCPServerProtocol.req_count%10000==0:
? ? ? ? ? ? ? ? ? ? ? ? ct = datetime.datetime.now()
? ? ? ? ? ? ? ? ? ? ? ? dt = ct-TCPServerProtocol.req_time
? ? ? ? ? ? ? ? ? ? ? ? pps = 10000/(dt.seconds+dt.microseconds/1000000.0)
? ? ? ? ? ? ? ? ? ? ? ? TCPServerProtocol.req_time=ct
? ? ? ? ? ? ? ? ? ? ? ? print('RPS='+str(pps))
? ? ? ? ? ? ? ? try:
? ? ? ? ? ? ? ? ? ? ? ? #self.transport.write(data)
? ? ? ? ? ? ? ? ? ? ? ? self.transport.getHandle().send(data)
? ? ? ? ? ? ? ? except:
? ? ? ? ? ? ? ? ? ? ? ? traceback.print_exc()

tcli.py?
-----------------------------------------------------------------
import sys
import socket
import traceback
import time
import datetime

host = 'localhost'
port = 9976
loopcount = 300
sockcount = 5000
RPS = 4000

ss=[]
for x in xrange(sockcount):
? ? ? ? ss.append(socket.socket(socket.AF_INET, socket.SOCK_STREAM))
? ? ? ? ss[x].connect((host, port))
? ? ? ? ss[x].settimeout(120)

for x in xrange(10000000):
? ? ? ? st = datetime.datetime.now()
? ? ? ? for y in xrange(loopcount):
? ? ? ? ? ? ? ? try:
? ? ? ? ? ? ? ? ? ? ? ? if ss[x%sockcount]!=None:
? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ss[x%sockcount].sendall('1234567890\r\n')
? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ss[x%sockcount].recv(1024)
? ? ? ? ? ? ? ? except:
? ? ? ? ? ? ? ? ? ? ? ? print y
? ? ? ? ? ? ? ? ? ? ? ? sys.exit()
? ? ? ? time.sleep(0.1)
? ? ? ? dt = (datetime.datetime.now()-st)
? ? ? ? plc = loopcount/(dt.seconds+dt.microseconds/1000000.0)
? ? ? ? print loopcount/(dt.seconds+dt.microseconds/1000000.0)
? ? ? ? #auto adjust RPS
? ? ? ? if plc<RPS:
? ? ? ? ? ? ? ? if RPS-plc>50:
? ? ? ? ? ? ? ? ? ? ? ? loopcount+=10
? ? ? ? else:
? ? ? ? ? ? ? ? if plc-RPS>50:
? ? ? ? ? ? ? ? ? ? ? ? loopcount-=10

echosvr.c?
----------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <assert.h>

#include <event2/event.h>
#include <event2/bufferevent.h>

#define LISTEN_PORT 9976
#define LISTEN_BACKLOG 32

#ifdef FD_SETSIZE
#undef FD_SETSIZE
#endif
#define FD_SETSIZE 65536

void do_accept(evutil_socket_t listener, short event, void *arg);
void read_cb(struct bufferevent *bev, void *arg);
void error_cb(struct bufferevent *bev, short event, void *arg);
void write_cb(struct bufferevent *bev, void *arg);

int main(int argc, char *argv[])
{
? ? int ret;
? ? evutil_socket_t listener;
? ? listener = socket(AF_INET, SOCK_STREAM, 0);
? ? assert(listener> 0);
? ? evutil_make_listen_socket_reuseable(listener);

? ? struct sockaddr_in sin;
? ? sin.sin_family = AF_INET;
? ? sin.sin_addr.s_addr = 0;
? ? sin.sin_port = htons(LISTEN_PORT);

? ? if (bind(listener, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
? ? ? ? perror("bind");
? ? ? ? return 1;
? ? }

? ? if (listen(listener, LISTEN_BACKLOG) < 0) {
? ? ? ? perror("listen");
? ? ? ? return 1;
? ? }

? ? printf ("Listening...\n");

? ? evutil_make_socket_nonblocking(listener);

? ? struct event_base *base = event_base_new();
? ? assert(base != NULL);
? ? struct event *listen_event;
? ? listen_event = event_new(base, listener, EV_READ|EV_PERSIST, do_accept, (void*)base);
? ? event_add(listen_event, NULL);
? ? event_base_dispatch(base);

? ? printf("The End.");
? ? return 0;
}

void do_accept(evutil_socket_t listener, short event, void *arg)
{
? ? struct event_base *base = (struct event_base *)arg;
? ? evutil_socket_t fd;
? ? struct sockaddr_in sin;
? ? socklen_t slen;
? ? fd = accept(listener, (struct sockaddr *)&sin, &slen);
? ? if (fd < 0) {
? ? ? ? perror("accept");
? ? ? ? return;
? ? }
? ? if (fd> FD_SETSIZE) {
? ? ? ? perror("fd> FD_SETSIZE\n");
? ? ? ? return;
? ? }

? ? printf("ACCEPT: fd = %u\n", fd);

? ? struct bufferevent *bev = bufferevent_socket_new(base, fd, BEV_OPT_CLOSE_ON_FREE);
? ? bufferevent_setcb(bev, read_cb, NULL, error_cb, arg);
? ? bufferevent_enable(bev, EV_READ|EV_WRITE|EV_PERSIST);
}

void read_cb(struct bufferevent *bev, void *arg)
{
#define MAX_LINE ? ?256
? ? char line[MAX_LINE+1];
? ? int n;
? ? evutil_socket_t fd = bufferevent_getfd(bev);

? ? while (n = bufferevent_read(bev, line, MAX_LINE), n> 0) {
? ? ? ? line[n] = '\0';
? ? ? ? //printf("fd=%u, read line: %s\n", fd, line);

? ? ? ? bufferevent_write(bev, line, n);
? ? }
}

void write_cb(struct bufferevent *bev, void *arg) {}

void error_cb(struct bufferevent *bev, short event, void *arg)
{
? ? evutil_socket_t fd = bufferevent_getfd(bev);
? ? printf("fd = %u, ", fd);
? ? if (event & BEV_EVENT_TIMEOUT) {
? ? ? ? printf("Timed out\n"); //if bufferevent_set_timeouts() called
? ? }
? ? else if (event & BEV_EVENT_EOF) {
? ? ? ? printf("connection closed\n");
? ? }
? ? else if (event & BEV_EVENT_ERROR) {
? ? ? ? printf("some other error\n");
? ? }
? ? bufferevent_free(bev);
} 		 	   		  

From exarkun at twistedmatrix.com  Tue Jul 30 03:31:39 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 30 Jul 2013 09:31:39 -0000
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
Message-ID: <20130730093139.26068.1052162497.divmod.xquotient.2@top>

On 08:54 am, zipxing at hotmail.com wrote:
>A simple TCP echo server using epoll reactor:this server process take 
>60% cpu on 4000 request/s.
>If use self.transport.getHandle().send instead of 
>self.transport.write,it take 30% cpu on 4000 request/s.
>Why transport.write take more user cpu?Why twisted performance so poor?

`transport.write` will actually try to deliver your data.  `send` will 
as likely drop it on the floor as deliver it.  Correctness sometimes 
costs a little more CPU time.

Jean-Paul


From _ at lvh.io  Tue Jul 30 05:09:33 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 30 Jul 2013 13:09:33 +0200
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
Message-ID: <CAE_Hg6ZCScAj_RkcZVJ3L3SKiKQ3tNL6DFG0Hzhj7RnfMJ44Yg@mail.gmail.com>

Hi zipxing,

You don't mention the interpreter. Is it CPython? What kind of results do
you get trying it on PyPy?

Also, you don't need to specify epollreactor. Recent versions of twisted
will automagically choose the appropriate backend. I fixed this and some
other cleanups and got:

----
from time import clock
from twisted.internet import protocol, reactor
from twisted.protocols import basic

class MeasuringEchoProtocol(basic.LineReceiver):
    MEASUREMENT_INTERVAL = 1000

    def lineReceived(self, data):
        self.factory.requests += 1
        if self.factory.requests % self.MEASUREMENT_INTERVAL == 0:
            print "RPS: {0}".format(self.factory.requests / clock())

        self.transport.write(data)



class ServerFactory(protocol.ServerFactory):
    protocol = MeasuringEchoProtocol

    def __init__(self):
        self.requests = 0



def main():
    reactor.listenTCP(9976, ServerFactory())
    clock()
    reactor.run()

if __name__ == '__main__':
    main()
----

Keep in mind that due to setup time few requests get handled right when it
starts, so the server RPS will take some time to balance out. On my wimpy
laptop on battery power, that was around 420.274404782.

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130730/92a407f0/attachment.html>

From p.mayers at imperial.ac.uk  Tue Jul 30 06:44:21 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 30 Jul 2013 13:44:21 +0100
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <20130730093139.26068.1052162497.divmod.xquotient.2@top>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
 <20130730093139.26068.1052162497.divmod.xquotient.2@top>
Message-ID: <51F7B525.8070206@imperial.ac.uk>

On 30/07/13 10:31, exarkun at twistedmatrix.com wrote:

> `transport.write` will actually try to deliver your data.  `send` will
> as likely drop it on the floor as deliver it.

For TCP?


From _ at lvh.io  Tue Jul 30 06:55:10 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 30 Jul 2013 14:55:10 +0200
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <51F7B525.8070206@imperial.ac.uk>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
 <20130730093139.26068.1052162497.divmod.xquotient.2@top>
 <51F7B525.8070206@imperial.ac.uk>
Message-ID: <CAE_Hg6bd2EHmWUwx=eOwOyJK2UKkCtdLpmaBrpdBgV06+QoLOA@mail.gmail.com>

On Tue, Jul 30, 2013 at 2:44 PM, Phil Mayers <p.mayers at imperial.ac.uk>wrote:

> For TCP?
>

Yes. See also the difference between socket.send and socket.sendall :)

socket.send returns a number of bytes that it actually sent.

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130730/5842187a/attachment.html>

From p.mayers at imperial.ac.uk  Tue Jul 30 07:31:56 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 30 Jul 2013 14:31:56 +0100
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <CAE_Hg6bd2EHmWUwx=eOwOyJK2UKkCtdLpmaBrpdBgV06+QoLOA@mail.gmail.com>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
 <20130730093139.26068.1052162497.divmod.xquotient.2@top>
 <51F7B525.8070206@imperial.ac.uk>
 <CAE_Hg6bd2EHmWUwx=eOwOyJK2UKkCtdLpmaBrpdBgV06+QoLOA@mail.gmail.com>
Message-ID: <51F7C04C.4010506@imperial.ac.uk>

On 30/07/13 13:55, Laurens Van Houtven wrote:
> On Tue, Jul 30, 2013 at 2:44 PM, Phil Mayers <p.mayers at imperial.ac.uk
> <mailto:p.mayers at imperial.ac.uk>> wrote:
>
>     For TCP?
>
>
> Yes. See also the difference between socket.send and socket.sendall :)
>
> socket.send returns a number of bytes that it actually sent.

Sure - FD writes don't, in general, have to take your entire buffer (or 
any of it). But once accepted, the data is no more or less likely to be 
dropped than data sent transport.write

Obviously if the OP using "send" without checking the return value, 
they're doing it wrong!


From _ at lvh.io  Tue Jul 30 07:43:32 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 30 Jul 2013 15:43:32 +0200
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <51F7C04C.4010506@imperial.ac.uk>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
 <20130730093139.26068.1052162497.divmod.xquotient.2@top>
 <51F7B525.8070206@imperial.ac.uk>
 <CAE_Hg6bd2EHmWUwx=eOwOyJK2UKkCtdLpmaBrpdBgV06+QoLOA@mail.gmail.com>
 <51F7C04C.4010506@imperial.ac.uk>
Message-ID: <CAE_Hg6ZUqULepwSok1Xnwp3apCeU11kVVUSV7UkKziJKL0Youg@mail.gmail.com>

On Tue, Jul 30, 2013 at 3:31 PM, Phil Mayers <p.mayers at imperial.ac.uk>wrote:

> Obviously if the OP using "send" without checking the return value,
> they're doing it wrong!
>

Right, but that's what the OP's example does :)

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130730/6ac9714c/attachment.html>

From gjorge at google.com  Tue Jul 30 16:40:54 2013
From: gjorge at google.com (Jorge Gonzalez)
Date: Tue, 30 Jul 2013 15:40:54 -0700
Subject: [Twisted-Python] defer.gatherResults & Deferreds chaining
In-Reply-To: <F7B75DBA-0EBD-405C-8E62-6EB4CCAA9E74@twistedmatrix.com>
References: <CAN9+jDbNvJi9X2bsUswPWKf7jrzUT_b9kKo4YD6K-k-g4YuXEg@mail.gmail.com>
 <F7B75DBA-0EBD-405C-8E62-6EB4CCAA9E74@twistedmatrix.com>
Message-ID: <CAN9+jDaRMydmvkmtJeW54DorkGrXvCZAKP30QXxa4dwea5mk0g@mail.gmail.com>

Thanks Glyph.
I actually am not able to reduce the behavior to a simpler runnable example
yet, and that's why I tried running my theory first through this list.
I did try a simple example just instantiating some Deferreds, firing them
and gathering their results into a DeferredList (no reactor involved) and
what you're saying holds true. So I'm working on getting a simpler version
of my code that exposes the behavior I'm seeing and will post it once I
have it.

Jorge


On Mon, Jul 29, 2013 at 4:04 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Jul 29, 2013, at 1:29 PM, Jorge Gonzalez <gjorge at google.com> wrote:
>
>  Wouldn't it be possible that defer.gatherResults inserts its callback
> into d before say slowFuncReturningDeferred_B gets to run and return its
> own Deferred (and therefore chain it to what gatherRestults is ultimately
> waiting for?). If so, wouldn't the results returned by
> slowFuncReturningDeferred_B never make it to the results gathered by
> defer.gatherResults?
>
>
> No, that's not what happens.  You call addCallback(lambda _:
> slowFunc...A()), then you call gatherResults.  That means gatherResult's
> callback is after slowFuncReturningA() in d's callback chain.
>
> Can you attach an actual runnable code example with some behavior that you
> didn't expect, so we can actually run it and explain what's happening?  No
> need for you to spin the reactor or anything, just instantiate a Deferred
> and then fire it.
>
> -glyph
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130730/008fefca/attachment.html>

From zipxing at hotmail.com  Tue Jul 30 20:15:26 2013
From: zipxing at hotmail.com (zipxing)
Date: Wed, 31 Jul 2013 10:15:26 +0800
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <CAE_Hg6ZCScAj_RkcZVJ3L3SKiKQ3tNL6DFG0Hzhj7RnfMJ44Yg@mail.gmail.com>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>,
 <CAE_Hg6ZCScAj_RkcZVJ3L3SKiKQ3tNL6DFG0Hzhj7RnfMJ44Yg@mail.gmail.com>
Message-ID: <SNT147-W42CE88370905CE07E658C2B4570@phx.gbl>

Great! pypy take 20% cpu, 3x fast than cpython!
Thanks!

A little problem: cjson and ujson can't install to pypy...

ZipXing

________________________________
> From: _ at lvh.io 
> Date: Tue, 30 Jul 2013 13:09:33 +0200 
> To: twisted-python at twistedmatrix.com 
> Subject: Re: [Twisted-Python] transport.write performance. 
> 
> Hi zipxing, 
> 
> You don't mention the interpreter. Is it CPython? What kind of results 
> do you get trying it on PyPy? 
> 
> Also, you don't need to specify epollreactor. Recent versions of 
> twisted will automagically choose the appropriate backend. I fixed this 
> and some other cleanups and got: 
> 
> ---- 
> from time import clock 
> from twisted.internet import protocol, reactor 
> from twisted.protocols import basic 
> 
> class MeasuringEchoProtocol(basic.LineReceiver): 
> MEASUREMENT_INTERVAL = 1000 
> 
> def lineReceived(self, data): 
> self.factory.requests += 1 
> if self.factory.requests % self.MEASUREMENT_INTERVAL == 0: 
> print "RPS: {0}".format(self.factory.requests / clock()) 
> 
> self.transport.write(data) 
> 
> 
> 
> class ServerFactory(protocol.ServerFactory): 
> protocol = MeasuringEchoProtocol 
> 
> def __init__(self): 
> self.requests = 0 
> 
> 
> 
> def main(): 
> reactor.listenTCP(9976, ServerFactory()) 
> clock() 
> reactor.run() 
> 
> if __name__ == '__main__': 
> main() 
> ---- 
> 
> Keep in mind that due to setup time few requests get handled right when 
> it starts, so the server RPS will take some time to balance out. On my 
> wimpy laptop on battery power, that was around 420.274404782. 
> 
> cheers 
> lvh 
> 
> _______________________________________________ Twisted-Python mailing 
> list Twisted-Python at twistedmatrix.com 
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python 		 	   		  

From _ at lvh.io  Wed Jul 31 01:22:53 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 31 Jul 2013 09:22:53 +0200
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <SNT147-W42CE88370905CE07E658C2B4570@phx.gbl>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
 <CAE_Hg6ZCScAj_RkcZVJ3L3SKiKQ3tNL6DFG0Hzhj7RnfMJ44Yg@mail.gmail.com>
 <SNT147-W42CE88370905CE07E658C2B4570@phx.gbl>
Message-ID: <CAE_Hg6bYUeHAqd7SjdRkPg8s_UXv9Qn5drxY6CbWanCBoLYdhA@mail.gmail.com>

On Jul 31, 2013 4:19 AM, "zipxing" <zipxing at hotmail.com> wrote:
>
> Great! pypy take 20% cpu, 3x fast than cpython!
> Thanks!
>
> A little problem: cjson and ujson can't install to pypy...

What's wrong with the builtin json module?

> ZipXing
>
> ________________________________
> > From: _ at lvh.io
> > Date: Tue, 30 Jul 2013 13:09:33 +0200
> > To: twisted-python at twistedmatrix.com
> > Subject: Re: [Twisted-Python] transport.write performance.
> >
> > Hi zipxing,
> >
> > You don't mention the interpreter. Is it CPython? What kind of results
> > do you get trying it on PyPy?
> >
> > Also, you don't need to specify epollreactor. Recent versions of
> > twisted will automagically choose the appropriate backend. I fixed this
> > and some other cleanups and got:
> >
> > ----
> > from time import clock
> > from twisted.internet import protocol, reactor
> > from twisted.protocols import basic
> >
> > class MeasuringEchoProtocol(basic.LineReceiver):
> > MEASUREMENT_INTERVAL = 1000
> >
> > def lineReceived(self, data):
> > self.factory.requests += 1
> > if self.factory.requests % self.MEASUREMENT_INTERVAL == 0:
> > print "RPS: {0}".format(self.factory.requests / clock())
> >
> > self.transport.write(data)
> >
> >
> >
> > class ServerFactory(protocol.ServerFactory):
> > protocol = MeasuringEchoProtocol
> >
> > def __init__(self):
> > self.requests = 0
> >
> >
> >
> > def main():
> > reactor.listenTCP(9976, ServerFactory())
> > clock()
> > reactor.run()
> >
> > if __name__ == '__main__':
> > main()
> > ----
> >
> > Keep in mind that due to setup time few requests get handled right when
> > it starts, so the server RPS will take some time to balance out. On my
> > wimpy laptop on battery power, that was around 420.274404782.
> >
> > cheers
> > lvh
> >
> > _______________________________________________ Twisted-Python mailing
> > list Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130731/122b8e71/attachment.html>

From gjorge at google.com  Wed Jul 31 11:08:01 2013
From: gjorge at google.com (Jorge Gonzalez)
Date: Wed, 31 Jul 2013 10:08:01 -0700
Subject: [Twisted-Python] defer.gatherResults & Deferreds chaining
In-Reply-To: <CAN9+jDaRMydmvkmtJeW54DorkGrXvCZAKP30QXxa4dwea5mk0g@mail.gmail.com>
References: <CAN9+jDbNvJi9X2bsUswPWKf7jrzUT_b9kKo4YD6K-k-g4YuXEg@mail.gmail.com>
 <F7B75DBA-0EBD-405C-8E62-6EB4CCAA9E74@twistedmatrix.com>
 <CAN9+jDaRMydmvkmtJeW54DorkGrXvCZAKP30QXxa4dwea5mk0g@mail.gmail.com>
Message-ID: <CAN9+jDaRkgR4MeJ+4VbACKJBsgYiK3jJxQrCZrqVnP=CQQnw0Q@mail.gmail.com>

I found the root cause, and it has nothing to do with Deferreds nor
DeferredLists. It was something else in my code unrelated to twisted.

Thanks!
Jorge


On Tue, Jul 30, 2013 at 3:40 PM, Jorge Gonzalez <gjorge at google.com> wrote:

> Thanks Glyph.
> I actually am not able to reduce the behavior to a simpler runnable
> example yet, and that's why I tried running my theory first through this
> list.
> I did try a simple example just instantiating some Deferreds, firing them
> and gathering their results into a DeferredList (no reactor involved) and
> what you're saying holds true. So I'm working on getting a simpler version
> of my code that exposes the behavior I'm seeing and will post it once I
> have it.
>
> Jorge
>
>
> On Mon, Jul 29, 2013 at 4:04 PM, Glyph <glyph at twistedmatrix.com> wrote:
>
>>
>> On Jul 29, 2013, at 1:29 PM, Jorge Gonzalez <gjorge at google.com> wrote:
>>
>>  Wouldn't it be possible that defer.gatherResults inserts its callback
>> into d before say slowFuncReturningDeferred_B gets to run and return its
>> own Deferred (and therefore chain it to what gatherRestults is ultimately
>> waiting for?). If so, wouldn't the results returned by
>> slowFuncReturningDeferred_B never make it to the results gathered by
>> defer.gatherResults?
>>
>>
>> No, that's not what happens.  You call addCallback(lambda _:
>> slowFunc...A()), then you call gatherResults.  That means gatherResult's
>> callback is after slowFuncReturningA() in d's callback chain.
>>
>> Can you attach an actual runnable code example with some behavior that
>> you didn't expect, so we can actually run it and explain what's happening?
>>  No need for you to spin the reactor or anything, just instantiate a
>> Deferred and then fire it.
>>
>> -glyph
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130731/b3523e29/attachment-0001.html>

From glyph at twistedmatrix.com  Wed Jul 31 17:39:17 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 31 Jul 2013 16:39:17 -0700
Subject: [Twisted-Python] defer.gatherResults & Deferreds chaining
In-Reply-To: <CAN9+jDaRkgR4MeJ+4VbACKJBsgYiK3jJxQrCZrqVnP=CQQnw0Q@mail.gmail.com>
References: <CAN9+jDbNvJi9X2bsUswPWKf7jrzUT_b9kKo4YD6K-k-g4YuXEg@mail.gmail.com>
 <F7B75DBA-0EBD-405C-8E62-6EB4CCAA9E74@twistedmatrix.com>
 <CAN9+jDaRMydmvkmtJeW54DorkGrXvCZAKP30QXxa4dwea5mk0g@mail.gmail.com>
 <CAN9+jDaRkgR4MeJ+4VbACKJBsgYiK3jJxQrCZrqVnP=CQQnw0Q@mail.gmail.com>
Message-ID: <92062EA0-5E65-4449-B12F-D01A89CE774A@twistedmatrix.com>


On Jul 31, 2013, at 10:08 AM, Jorge Gonzalez <gjorge at google.com> wrote:

> I found the root cause, and it has nothing to do with Deferreds nor DeferredLists. It was something else in my code unrelated to twisted.

As is often the case :).

This is why we ask for complete examples.  Just because you see Twisted frames in your traceback does not mean Twisted is the cause of the bug :).

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130731/a0bb9e56/attachment.html>

From kylerzhang11 at gmail.com  Wed Jul 31 23:46:17 2013
From: kylerzhang11 at gmail.com (zhang kai)
Date: Thu, 1 Aug 2013 13:46:17 +0800
Subject: [Twisted-Python]  TestInternet2.testPickledTimer Failed
Message-ID: <CAK_130QFSBeg54ovf6aWG8gJjd2hdjV5s15iDXi=37aWQH+g1Q@mail.gmail.com>

Hi,

I'm a Google Summer of Code intern working on "Deferred Cancellation"
project. I'm recently working on adding cancellation support to
twisted.internet.task.LoopingCall.

However, after I added the canceller to LoopingCall.deferred,
the twisted.test.test_application.TestInternet2.testPickledTimer failed due
to a PicklingError.

My branch is loopingcall-deferred-cancellation-6656. Here is the diff of my
code: http://twistedmatrix.com/~diffresource.twistd/6656

Here is the error message:

===============================================================================
[ERROR]
Traceback (most recent call last):
  File
"/home/kai/Projects/GSoC/DeferredCancellation/Twisted/branches/loopingcall-deferred-cancellation-6656/twisted/test/test_application.py",
line 487, in testPickledTimer
    s = pickle.dumps(t0)
  File "/usr/lib/python2.7/pickle.py", line 1374, in dumps
    Pickler(file, protocol).dump(obj)
  File "/usr/lib/python2.7/pickle.py", line 224, in dump
    self.save(obj)
  File "/usr/lib/python2.7/pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "/usr/lib/python2.7/pickle.py", line 725, in save_inst
    save(stuff)
  File "/usr/lib/python2.7/pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "/usr/lib/python2.7/pickle.py", line 649, in save_dict
    self._batch_setitems(obj.iteritems())
  File "/usr/lib/python2.7/pickle.py", line 663, in _batch_setitems
    save(v)
  File "/usr/lib/python2.7/pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "/usr/lib/python2.7/pickle.py", line 725, in save_inst
    save(stuff)
  File "/usr/lib/python2.7/pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "/usr/lib/python2.7/pickle.py", line 649, in save_dict
    self._batch_setitems(obj.iteritems())
  File "/usr/lib/python2.7/pickle.py", line 663, in _batch_setitems
    save(v)
  File "/usr/lib/python2.7/pickle.py", line 331, in save
    self.save_reduce(obj=obj, *rv)
  File "/usr/lib/python2.7/pickle.py", line 401, in save_reduce
    save(args)
  File "/usr/lib/python2.7/pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "/usr/lib/python2.7/pickle.py", line 562, in save_tuple
    save(element)
  File "/usr/lib/python2.7/pickle.py", line 331, in save
    self.save_reduce(obj=obj, *rv)
  File "/usr/lib/python2.7/pickle.py", line 419, in save_reduce
    save(state)
  File "/usr/lib/python2.7/pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "/usr/lib/python2.7/pickle.py", line 649, in save_dict
    self._batch_setitems(obj.iteritems())
  File "/usr/lib/python2.7/pickle.py", line 663, in _batch_setitems
    save(v)
  File "/usr/lib/python2.7/pickle.py", line 331, in save
    self.save_reduce(obj=obj, *rv)
  File "/usr/lib/python2.7/pickle.py", line 419, in save_reduce
    save(state)
  File "/usr/lib/python2.7/pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "/usr/lib/python2.7/pickle.py", line 649, in save_dict
    self._batch_setitems(obj.iteritems())
  File "/usr/lib/python2.7/pickle.py", line 663, in _batch_setitems
    save(v)
  File "/usr/lib/python2.7/pickle.py", line 331, in save
    self.save_reduce(obj=obj, *rv)
  File "/usr/lib/python2.7/pickle.py", line 419, in save_reduce
    save(state)
  File "/usr/lib/python2.7/pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "/usr/lib/python2.7/pickle.py", line 649, in save_dict
    self._batch_setitems(obj.iteritems())
  File "/usr/lib/python2.7/pickle.py", line 663, in _batch_setitems
    save(v)
  File "/usr/lib/python2.7/pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "/usr/lib/python2.7/pickle.py", line 748, in save_global
    (obj, module, name))
pickle.PicklingError: Can't pickle <function <lambda> at 0x8f1fb8c>: it's
not found as twisted.internet.posixbase.<lambda>

twisted.test.test_application.TestInternet2.testPickledTimer
===============================================================================

I thought the reason was the circular references. However I searched about
it and found that pickle could handle the circular reference cases. But the
only significant change is that after I added the canceller, there is a
circular reference between LoopingCall and LoopingCall.deferred. So I don't
know what's the problem. How can I fix this?

Thanks,
-Kai
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130801/59955434/attachment.html>

From ashapattani at gmail.com  Mon Jul  1 14:35:59 2013
From: ashapattani at gmail.com (Asha Joseph)
Date: Mon, 1 Jul 2013 22:35:59 +0200
Subject: [Twisted-Python] Help requested for twisted
Message-ID: <CAPSLr+LOSVGFORTOc7EX8VjF18RO-7GsR2uKyU7ou28QEeAAcg@mail.gmail.com>

Hi,

  I am having a requirement on to send async some 300,000 or more rest api
url calls..

When I work with the code for 150,000 it works fine .It takes around 8
minutes.Is it possible to improve the performance

When the count increased to some 200,000  ,I am getting the error.



-------------------------------------------------------------------------------------------------

Traceback (most recent call last):
Failure: twisted.internet.error.TimeoutError: User timeout caused
connection failure.
Unhandled error in Deferred:
Unhandled Error
Traceback (most recent call last):

-----------------------------------------------------------------------------------------------

As my server is 8 CPU quadcore box, 2.40 Ghz, with 96G of RAM


*Can you please suggest me how can I overcome this error *
*
*
*Make the performance better*

This is my piece of code where I have implemented twisted
------------------------------------------------------------------------------------------------
from twisted.internet import defer, reactor, task
from twisted.web.client import getPage
import sys, argparse, csv, collections, time, datetime

maxRun =32
urls = ""

def pageCallback(result):
  print len(result)
  return result

def doWork():
  for url in urls.split(','):
    d = getPage(url)
    d.addCallback(pageCallback)
    yield d

def finish(ign):
  reactor.stop()

def test():
  deferreds = []
  coop = task.Cooperator()
  work = doWork()
  for i in xrange(maxRun):
    d = coop.coiterate(work)
    deferreds.append(d)
  dl = defer.DeferredList(deferreds)
  dl.addCallback(finish)


if __name__ == '__main__':

   filename = sys.argv[1]
   #I open the file ,read the files and create the url's


      test()
      reactor.run()
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130701/3d5de807/attachment-0002.html>

From exarkun at twistedmatrix.com  Mon Jul  1 15:42:40 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 01 Jul 2013 21:42:40 -0000
Subject: [Twisted-Python] Help requested for twisted
In-Reply-To: <CAPSLr+LOSVGFORTOc7EX8VjF18RO-7GsR2uKyU7ou28QEeAAcg@mail.gmail.com>
References: <CAPSLr+LOSVGFORTOc7EX8VjF18RO-7GsR2uKyU7ou28QEeAAcg@mail.gmail.com>
Message-ID: <20130701214240.28793.1719367211.divmod.xquotient.539@top>

On 08:35 pm, ashapattani at gmail.com wrote:
>Hi,
>
>  I am having a requirement on to send async some 300,000 or more rest 
>api
>url calls..

Are your HTTP requests all the same server?  Or are at least some of the 
calls to the same server?  If so, if you use persistent connections 
(`twisted.web.client.Agent` supports these) you'll remove a bunch of the 
latency and overhead of those requests.

Jean-Paul
>When I work with the code for 150,000 it works fine .It takes around 8
>minutes.Is it possible to improve the performance
>
>When the count increased to some 200,000  ,I am getting the error.
>
>
>
>-------------------------------------------------------------------------------------------------
>
>Traceback (most recent call last):
>Failure: twisted.internet.error.TimeoutError: User timeout caused
>connection failure.
>Unhandled error in Deferred:
>Unhandled Error
>Traceback (most recent call last):
>
>-----------------------------------------------------------------------------------------------
>
>As my server is 8 CPU quadcore box, 2.40 Ghz, with 96G of RAM
>
>
>*Can you please suggest me how can I overcome this error *
>*
>*
>*Make the performance better*
>
>This is my piece of code where I have implemented twisted
>------------------------------------------------------------------------------------------------
>from twisted.internet import defer, reactor, task
>from twisted.web.client import getPage
>import sys, argparse, csv, collections, time, datetime
>
>maxRun =32
>urls = ""
>
>def pageCallback(result):
>  print len(result)
>  return result
>
>def doWork():
>  for url in urls.split(','):
>    d = getPage(url)
>    d.addCallback(pageCallback)
>    yield d
>
>def finish(ign):
>  reactor.stop()
>
>def test():
>  deferreds = []
>  coop = task.Cooperator()
>  work = doWork()
>  for i in xrange(maxRun):
>    d = coop.coiterate(work)
>    deferreds.append(d)
>  dl = defer.DeferredList(deferreds)
>  dl.addCallback(finish)
>
>
>if __name__ == '__main__':
>
>   filename = sys.argv[1]
>   #I open the file ,read the files and create the url's
>
>
>      test()
>      reactor.run()



From ashapattani at gmail.com  Tue Jul  2 00:59:51 2013
From: ashapattani at gmail.com (Asha Joseph)
Date: Tue, 2 Jul 2013 08:59:51 +0200
Subject: [Twisted-Python] Help requested for twisted
In-Reply-To: <20130701214240.28793.1719367211.divmod.xquotient.539@top>
References: <CAPSLr+LOSVGFORTOc7EX8VjF18RO-7GsR2uKyU7ou28QEeAAcg@mail.gmail.com>
 <20130701214240.28793.1719367211.divmod.xquotient.539@top>
Message-ID: <CAPSLr+L3-d+zAjgu1RqAdeFy5=P9x=gO7YrApZdHDybQeUAzXw@mail.gmail.com>

Hi Jean,
   Thanks a lot for the quick response.

All my requests are on the same server. or to the same domain.

In that case do you suggest to use `twisted.web.client.Agent`

I really don't require any responses from url that I send, it is fire and
forget.

thanks and regards,
Asha


On Mon, Jul 1, 2013 at 11:42 PM, <exarkun at twistedmatrix.com> wrote:

> On 08:35 pm, ashapattani at gmail.com wrote:
>
>> Hi,
>>
>>  I am having a requirement on to send async some 300,000 or more rest api
>> url calls..
>>
>
> Are your HTTP requests all the same server?  Or are at least some of the
> calls to the same server?  If so, if you use persistent connections
> (`twisted.web.client.Agent` supports these) you'll remove a bunch of the
> latency and overhead of those requests.
>
> Jean-Paul
>
>> When I work with the code for 150,000 it works fine .It takes around 8
>> minutes.Is it possible to improve the performance
>>
>> When the count increased to some 200,000  ,I am getting the error.
>>
>>
>>
>> ------------------------------**------------------------------**
>> ------------------------------**-------
>>
>> Traceback (most recent call last):
>> Failure: twisted.internet.error.**TimeoutError: User timeout caused
>> connection failure.
>> Unhandled error in Deferred:
>> Unhandled Error
>> Traceback (most recent call last):
>>
>> ------------------------------**------------------------------**
>> ------------------------------**-----
>>
>> As my server is 8 CPU quadcore box, 2.40 Ghz, with 96G of RAM
>>
>>
>> *Can you please suggest me how can I overcome this error *
>> *
>> *
>> *Make the performance better*
>>
>>
>> This is my piece of code where I have implemented twisted
>> ------------------------------**------------------------------**
>> ------------------------------**------
>> from twisted.internet import defer, reactor, task
>> from twisted.web.client import getPage
>> import sys, argparse, csv, collections, time, datetime
>>
>> maxRun =32
>> urls = ""
>>
>> def pageCallback(result):
>>  print len(result)
>>  return result
>>
>> def doWork():
>>  for url in urls.split(','):
>>    d = getPage(url)
>>    d.addCallback(pageCallback)
>>    yield d
>>
>> def finish(ign):
>>  reactor.stop()
>>
>> def test():
>>  deferreds = []
>>  coop = task.Cooperator()
>>  work = doWork()
>>  for i in xrange(maxRun):
>>    d = coop.coiterate(work)
>>    deferreds.append(d)
>>  dl = defer.DeferredList(deferreds)
>>  dl.addCallback(finish)
>>
>>
>> if __name__ == '__main__':
>>
>>   filename = sys.argv[1]
>>   #I open the file ,read the files and create the url's
>>
>>
>>      test()
>>      reactor.run()
>>
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130702/14385e12/attachment-0002.html>

From ashapattani at gmail.com  Tue Jul  2 05:29:52 2013
From: ashapattani at gmail.com (Asha Joseph)
Date: Tue, 2 Jul 2013 13:29:52 +0200
Subject: [Twisted-Python] Help requested for twisted
In-Reply-To: <CAPSLr+L3-d+zAjgu1RqAdeFy5=P9x=gO7YrApZdHDybQeUAzXw@mail.gmail.com>
References: <CAPSLr+LOSVGFORTOc7EX8VjF18RO-7GsR2uKyU7ou28QEeAAcg@mail.gmail.com>
 <20130701214240.28793.1719367211.divmod.xquotient.539@top>
 <CAPSLr+L3-d+zAjgu1RqAdeFy5=P9x=gO7YrApZdHDybQeUAzXw@mail.gmail.com>
Message-ID: <CAPSLr++rcepEH+pb8Qf==Ve8RWEiF_totzEBDaCcM7Vp6zgiSg@mail.gmail.com>

Hi ,

       In my case the rest api url calls looks like this

http://example.com/event/user_id=12345

  So here how to I implement the agent

for me every url has different different user_id's to be passes

Thanks and regards,
Asha







On Tue, Jul 2, 2013 at 8:59 AM, Asha Joseph <ashapattani at gmail.com> wrote:

> Hi Jean,
>    Thanks a lot for the quick response.
>
> All my requests are on the same server. or to the same domain.
>
> In that case do you suggest to use `twisted.web.client.Agent`
>
> I really don't require any responses from url that I send, it is fire and
> forget.
>
> thanks and regards,
> Asha
>
>
> On Mon, Jul 1, 2013 at 11:42 PM, <exarkun at twistedmatrix.com> wrote:
>
>> On 08:35 pm, ashapattani at gmail.com wrote:
>>
>>> Hi,
>>>
>>>  I am having a requirement on to send async some 300,000 or more rest api
>>> url calls..
>>>
>>
>> Are your HTTP requests all the same server?  Or are at least some of the
>> calls to the same server?  If so, if you use persistent connections
>> (`twisted.web.client.Agent` supports these) you'll remove a bunch of the
>> latency and overhead of those requests.
>>
>> Jean-Paul
>>
>>> When I work with the code for 150,000 it works fine .It takes around 8
>>> minutes.Is it possible to improve the performance
>>>
>>> When the count increased to some 200,000  ,I am getting the error.
>>>
>>>
>>>
>>> ------------------------------**------------------------------**
>>> ------------------------------**-------
>>>
>>> Traceback (most recent call last):
>>> Failure: twisted.internet.error.**TimeoutError: User timeout caused
>>> connection failure.
>>> Unhandled error in Deferred:
>>> Unhandled Error
>>> Traceback (most recent call last):
>>>
>>> ------------------------------**------------------------------**
>>> ------------------------------**-----
>>>
>>> As my server is 8 CPU quadcore box, 2.40 Ghz, with 96G of RAM
>>>
>>>
>>> *Can you please suggest me how can I overcome this error *
>>> *
>>> *
>>> *Make the performance better*
>>>
>>>
>>> This is my piece of code where I have implemented twisted
>>> ------------------------------**------------------------------**
>>> ------------------------------**------
>>> from twisted.internet import defer, reactor, task
>>> from twisted.web.client import getPage
>>> import sys, argparse, csv, collections, time, datetime
>>>
>>> maxRun =32
>>> urls = ""
>>>
>>> def pageCallback(result):
>>>  print len(result)
>>>  return result
>>>
>>> def doWork():
>>>  for url in urls.split(','):
>>>    d = getPage(url)
>>>    d.addCallback(pageCallback)
>>>    yield d
>>>
>>> def finish(ign):
>>>  reactor.stop()
>>>
>>> def test():
>>>  deferreds = []
>>>  coop = task.Cooperator()
>>>  work = doWork()
>>>  for i in xrange(maxRun):
>>>    d = coop.coiterate(work)
>>>    deferreds.append(d)
>>>  dl = defer.DeferredList(deferreds)
>>>  dl.addCallback(finish)
>>>
>>>
>>> if __name__ == '__main__':
>>>
>>>   filename = sys.argv[1]
>>>   #I open the file ,read the files and create the url's
>>>
>>>
>>>      test()
>>>      reactor.run()
>>>
>>
>> ______________________________**_________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
>> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130702/b71d00f6/attachment-0002.html>

From ashapattani at gmail.com  Tue Jul  2 12:55:25 2013
From: ashapattani at gmail.com (Asha Joseph)
Date: Tue, 2 Jul 2013 20:55:25 +0200
Subject: [Twisted-Python] Help requested for twisted
In-Reply-To: <20130701214240.28793.1719367211.divmod.xquotient.539@top>
References: <CAPSLr+LOSVGFORTOc7EX8VjF18RO-7GsR2uKyU7ou28QEeAAcg@mail.gmail.com>
 <20130701214240.28793.1719367211.divmod.xquotient.539@top>
Message-ID: <CAPSLr+JKxYYnJSU6HJf8cmUXyK+_oGY7SrYPaVAFQsFVenP+sQ@mail.gmail.com>

Hi ,

       In my case the rest api url calls looks like this

http://example.com/event/user_id=12345

  So here how to I implement the agent

for me every url has different different user_id's to be passes

Thanks and regards,
Asha



On Mon, Jul 1, 2013 at 11:42 PM, <exarkun at twistedmatrix.com> wrote:

> On 08:35 pm, ashapattani at gmail.com wrote:
>
>> Hi,
>>
>>  I am having a requirement on to send async some 300,000 or more rest api
>> url calls..
>>
>
> Are your HTTP requests all the same server?  Or are at least some of the
> calls to the same server?  If so, if you use persistent connections
> (`twisted.web.client.Agent` supports these) you'll remove a bunch of the
> latency and overhead of those requests.
>
> Jean-Paul
>
>> When I work with the code for 150,000 it works fine .It takes around 8
>> minutes.Is it possible to improve the performance
>>
>> When the count increased to some 200,000  ,I am getting the error.
>>
>>
>>
>> ------------------------------**------------------------------**
>> ------------------------------**-------
>>
>> Traceback (most recent call last):
>> Failure: twisted.internet.error.**TimeoutError: User timeout caused
>> connection failure.
>> Unhandled error in Deferred:
>> Unhandled Error
>> Traceback (most recent call last):
>>
>> ------------------------------**------------------------------**
>> ------------------------------**-----
>>
>> As my server is 8 CPU quadcore box, 2.40 Ghz, with 96G of RAM
>>
>>
>> *Can you please suggest me how can I overcome this error *
>> *
>> *
>> *Make the performance better*
>>
>>
>> This is my piece of code where I have implemented twisted
>> ------------------------------**------------------------------**
>> ------------------------------**------
>> from twisted.internet import defer, reactor, task
>> from twisted.web.client import getPage
>> import sys, argparse, csv, collections, time, datetime
>>
>> maxRun =32
>> urls = ""
>>
>> def pageCallback(result):
>>  print len(result)
>>  return result
>>
>> def doWork():
>>  for url in urls.split(','):
>>    d = getPage(url)
>>    d.addCallback(pageCallback)
>>    yield d
>>
>> def finish(ign):
>>  reactor.stop()
>>
>> def test():
>>  deferreds = []
>>  coop = task.Cooperator()
>>  work = doWork()
>>  for i in xrange(maxRun):
>>    d = coop.coiterate(work)
>>    deferreds.append(d)
>>  dl = defer.DeferredList(deferreds)
>>  dl.addCallback(finish)
>>
>>
>> if __name__ == '__main__':
>>
>>   filename = sys.argv[1]
>>   #I open the file ,read the files and create the url's
>>
>>
>>      test()
>>      reactor.run()
>>
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130702/c1b27842/attachment-0002.html>

From beth.null at gmail.com  Tue Jul  2 13:02:03 2013
From: beth.null at gmail.com (Beth)
Date: Tue, 2 Jul 2013 21:02:03 +0200
Subject: [Twisted-Python] Daemonizing app (two udp servers + flask)
Message-ID: <CAEq9sJuuNdNtsP4-Byoaq3+YNPKQk0xSjP6SDR_AauuPQ0o8eg@mail.gmail.com>

Hi there!

Can someone give me a hand in how to daemonize one application?

My application has two udp servers that subclass from DatagramProtocol and
are launched via reactor.listenUDP.

I think that the way to go is twistd, however some doubts come to me as
flask is involved and even I don't know if this is the proper place to ask
(maybe the flask support list?)

My current implementation goes like this:

class Server(DatagramProtocol):

def datagramReceived(self, data, (host, port)):

....

sever = Server()

reactor.listenUDP(port, server)

....

To deploy the app, in the application framework doc is said that you can
create a .tac file for using with twistd. In this tac file I think that I
need to wrap my "DatagramProtocol" into a Factory, then within a Service
and link that service to the application. No problem on that (I think)

However, I'm also using flask for exposing a basic restful api. And I have
no idea in how I can wrap it into a factory/service/application.

In my code flask is tied to the reactor in the following way:

flask_app = Flask(__name__, static_folder="www", static_url_path="")

flask_resource = WSGIResource(reactor, reactor.getThreadPool(), flask_app)

flask_site = Site(flask_resource)

reactor.listenTCP(8080, flask_site)

--------

In the flask website it's said that you can run a flask application using a
standalone wsgi container like the default twisted one with:

twistd web --wsgi myproject.app

However I think that it has nothing to do with my problem.

I'm not a twisted expert however I've been using it from the past six
months, but running it under Eclipse and directly under the console,
however now is time to deploy and I'm really confused with all this
Application, Service, MultiService, Factory, Protocol and such stuff.
listenTCP and listenUDP seemed so easy!!! ;)

At this point I'm in a dead end trying to run the app at startup, any
suggestion?, other alternative to twistd?

Thanks in advance, best regards, Beth.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130702/f3fe08f4/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Jul  2 13:29:54 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 2 Jul 2013 12:29:54 -0700
Subject: [Twisted-Python] Daemonizing app (two udp servers + flask)
In-Reply-To: <CAEq9sJuuNdNtsP4-Byoaq3+YNPKQk0xSjP6SDR_AauuPQ0o8eg@mail.gmail.com>
References: <CAEq9sJuuNdNtsP4-Byoaq3+YNPKQk0xSjP6SDR_AauuPQ0o8eg@mail.gmail.com>
Message-ID: <8F3FE344-1E9D-41AB-8E9F-72EB40E20972@twistedmatrix.com>


On Jul 2, 2013, at 12:02 PM, Beth <beth.null at gmail.com> wrote:

> Can someone give me a hand in how to daemonize one application?

> I think that the way to go is twistd (...)

That's correct.

After reading the rest of your message, I don't see any *problems* that you've had with using it.  All the code looks basically right, and you don't mention any tracebacks.

If "just use twistd" doesn't help you, can you explain what exactly doesn't work when you try to use it?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130702/b86eeaa2/attachment-0002.html>

From exarkun at twistedmatrix.com  Tue Jul  2 14:01:52 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 02 Jul 2013 20:01:52 -0000
Subject: [Twisted-Python] Help requested for twisted
In-Reply-To: <CAPSLr+JKxYYnJSU6HJf8cmUXyK+_oGY7SrYPaVAFQsFVenP+sQ@mail.gmail.com>
References: <CAPSLr+LOSVGFORTOc7EX8VjF18RO-7GsR2uKyU7ou28QEeAAcg@mail.gmail.com>
 <20130701214240.28793.1719367211.divmod.xquotient.539@top>
 <CAPSLr+JKxYYnJSU6HJf8cmUXyK+_oGY7SrYPaVAFQsFVenP+sQ@mail.gmail.com>
Message-ID: <20130702200152.28793.1169867863.divmod.xquotient.603@top>

On 06:55 pm, ashapattani at gmail.com wrote:
>Hi ,
>
>       In my case the rest api url calls looks like this
>
>http://example.com/event/user_id=12345
>
>  So here how to I implement the agent
>
>for me every url has different different user_id's to be passes

Please don't post repeatedly.  Your first message arrived at the list. 
You might need to wait a while before anyone volunteers to help.

If enough time passes with no replies, consider posting again with more 
information - not just the same email.  Chances are if no one has tried 
to help after a day or two, it's because the question wasn't clear.

Jean-Paul



From beth.null at gmail.com  Tue Jul  2 16:03:08 2013
From: beth.null at gmail.com (Beth)
Date: Wed, 3 Jul 2013 00:03:08 +0200
Subject: [Twisted-Python] Daemonizing app (two udp servers + flask)
In-Reply-To: <8F3FE344-1E9D-41AB-8E9F-72EB40E20972@twistedmatrix.com>
References: <CAEq9sJuuNdNtsP4-Byoaq3+YNPKQk0xSjP6SDR_AauuPQ0o8eg@mail.gmail.com>
 <8F3FE344-1E9D-41AB-8E9F-72EB40E20972@twistedmatrix.com>
Message-ID: <CAEq9sJu3Ge4z1FaLC1RdvCzrvnL0jLvy_1Ud2Z1yrgzRPw12jg@mail.gmail.com>

Hi!

After some code rework, I got it working.

The trick is that factories aren't supported in UPD, and they work directly
in the service creation.

Flask seems to work in the same way, not needing to be wrapped into any
factory or so. However in order not to have a .tac file loaded with the
routes and this stuff I've used flask-classy. Half an hour later everything
seems to work.

Here is my current tac file:
-----------------------------------------

from twisted.internet import reactor

from twisted.application import service, internet

from twisted.web.server import Site

from twisted.web.wsgi import WSGIResource

from flask import Flask

from server import Server

from bootloader import BootLoaderServer

from restful_api import RestFulApi


flask_app = Flask("restfulapi", static_folder="www", static_url_path="")

flask_app.debug = True

flask_resource = WSGIResource(reactor, reactor.getThreadPool(), flask_app)

flask_site = Site(flask_resource)

RestFulApi.register(flask_app)

server = Server()

server.load_cfg("default.cfg")

bootloader_server = BootLoaderServer()

application = service.Application("unidosys")

multi_service = service.MultiService()

flask_service = internet.TCPServer(8080, flask_site)

main_service = internet.UDPServer(Server.port, server)

bootloader_service = internet.UDPServer(BootLoaderServer.multicast_port,
bootloader_server)


flask_service.setServiceParent(multi_service)

main_service.setServiceParent(multi_service)

bootloader_service.setServiceParent(multi_service)

unidosys_service.setServiceParent(application)


-----------------------------------------

So far so good ;).

Thanks for your kind help and for this fantastic framework.

All the best, Beth.

On 2 July 2013 21:29, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Jul 2, 2013, at 12:02 PM, Beth <beth.null at gmail.com> wrote:
>
> Can someone give me a hand in how to daemonize one application?
>
>
> I think that the way to go is twistd (...)
>
>
> That's correct.
>
> After reading the rest of your message, I don't see any *problems* that
> you've had with using it.  All the code looks basically right, and you
> don't mention any tracebacks.
>
> If "just use twistd" doesn't help you, can you explain what exactly
> doesn't work when you try to use it?
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130703/d5cd1374/attachment-0002.html>

From exarkun at twistedmatrix.com  Sat Jul  6 06:36:48 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 06 Jul 2013 12:36:48 -0000
Subject: [Twisted-Python] BuildBot problems
Message-ID: <20130706123648.28793.754015608.divmod.xquotient.625@top>

Hello all,

Unfortunately, baelnorn seems to be having network problems again, 
leaving a large number of builders currently unable to complete builds

Also, the easy_install builders seem to be having problems completing 
the correct builds.  For example, a recent trunk build failed with a 
websocket error - but the websocket branch has not been merged.  Maybe 
this is related to the recent changes to make it use git instead of bzr?

Additionally, the "Built packages" link on 
http://buildbot.twistedmatrix.com/builds goes to the wrong place (still? 
again?), so build artifacts seem to be mostly unavailable right now.

Jean-Paul



From radix at twistedmatrix.com  Sat Jul  6 11:20:45 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 6 Jul 2013 12:20:45 -0500
Subject: [Twisted-Python] BuildBot problems
In-Reply-To: <20130706123648.28793.754015608.divmod.xquotient.625@top>
References: <20130706123648.28793.754015608.divmod.xquotient.625@top>
Message-ID: <CAPkRfUS70RdeYKiiUPvo7aBuRPtphtNcqYNF3iwNbZ3_-g1qtw@mail.gmail.com>

On Sat, Jul 6, 2013 at 7:36 AM, <exarkun at twistedmatrix.com> wrote:

> Hello all,
>
> Unfortunately, baelnorn seems to be having network problems again, leaving
> a large number of builders currently unable to complete builds
>
>
This is becoming a pretty major hassle. :-(




> Also, the easy_install builders seem to be having problems completing the
> correct builds.  For example, a recent trunk build failed with a websocket
> error - but the websocket branch has not been merged.  Maybe this is
> related to the recent changes to make it use git instead of bzr?
>
>
This seems to be fixed now. The git-based builders weren't cleaning up old
.pyc files, as I understand it, but now they are. Thanks to Tom Prince.

I believe that branch-builds will now also merge to trunk before running
the tests, so the git-based builders should now show a much more accurate
view of the mergability of a branch (again, thanks to Tom Prince). I'm not
totally certain if that's been deployed yet, though.



> Additionally, the "Built packages" link on http://buildbot.twistedmatrix.*
> *com/builds <http://buildbot.twistedmatrix.com/builds> goes to the wrong
> place (still? again?), so build artifacts seem to be mostly unavailable
> right now.
>


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130706/1444baf4/attachment-0002.html>

From JOHN at egh.com  Sat Jul  6 12:54:43 2013
From: JOHN at egh.com (John Santos)
Date: Sat, 6 Jul 2013 14:54:43 -0400
Subject: [Twisted-Python] BuildBot problems
In-Reply-To: <20130706123648.28793.754015608.divmod.xquotient.625@top>
Message-ID: <1130706144714.58343D-100000@Ives.egh.com>


Is baelnorn the PC we are hosting for Glyph?  If so, no one ever told us
its name, so we are unlikely to do anything when we hear complaints.

Last night, Tom Prince said he was having difficulty accessing the PC (it
wasn't clear when.)

We are having router problems (some kind of memory leak that forces us to
reboot it about once a week.)  We rebooted it early yesterday evening.
After receiving Tom's complaint several hours later, I replied asking if
the problems were earlier (before the reboot), or were still occuring.
I never received an answer.






On Sat, 6 Jul 2013 exarkun at twistedmatrix.com wrote:

> Hello all,
> 
> Unfortunately, baelnorn seems to be having network problems again, 
> leaving a large number of builders currently unable to complete builds
> 
> Also, the easy_install builders seem to be having problems completing 
> the correct builds.  For example, a recent trunk build failed with a 
> websocket error - but the websocket branch has not been merged.  Maybe 
> this is related to the recent changes to make it use git instead of bzr?
> 
> Additionally, the "Built packages" link on 
> http://buildbot.twistedmatrix.com/builds goes to the wrong place (still? 
> again?), so build artifacts seem to be mostly unavailable right now.
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 

-- 
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539




From tom.prince at ualberta.net  Sat Jul  6 13:28:54 2013
From: tom.prince at ualberta.net (Tom Prince)
Date: Sat, 06 Jul 2013 13:28:54 -0600
Subject: [Twisted-Python] BuildBot problems
In-Reply-To: <1130706144714.58343D-100000@Ives.egh.com>
References: <1130706144714.58343D-100000@Ives.egh.com>
Message-ID: <877gh3lc7d.fsf@hermes.hocat.ca>

John Santos <JOHN at egh.com> writes:

> Is baelnorn the PC we are hosting for Glyph?

Yes. It is also known as bot-glyph-1 (and bot-glyph-6 is a VM on it).
https://buildbot.twistedmatrix.com/buildslaves/bot-glyph-1?numbuilds=20
https://buildbot.twistedmatrix.com/buildslaves/bot-glyph-6?numbuilds=20

> Last night, Tom Prince said he was having difficulty accessing the PC (it
> wasn't clear when.)
>
> We are having router problems (some kind of memory leak that forces us to
> reboot it about once a week.)  We rebooted it early yesterday evening.
> After receiving Tom's complaint several hours later, I replied asking if
> the problems were earlier (before the reboot), or were still occuring.
> I never received an answer.

I didn't receive your reply until this morning, and didn't get a chance
to check the status until now.

It does appear that there are still issuess with it.

  Tom



From somaye.it at gmail.com  Sun Jul  7 07:27:21 2013
From: somaye.it at gmail.com (s b)
Date: Sun, 7 Jul 2013 17:57:21 +0430
Subject: [Twisted-Python] canceling membership
Message-ID: <CAKceyvcOnVETQsYp9ss1wZajzqUWYcyf3uiOnCtD6LHpwdQSWA@mail.gmail.com>

i dont want to be a part of tjis group anymore
would you plead cancel my membership?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130707/706f3c8e/attachment-0002.html>

From c.justin88 at gmail.com  Mon Jul  8 14:31:49 2013
From: c.justin88 at gmail.com (Justin Chiu)
Date: Mon, 08 Jul 2013 13:31:49 -0700
Subject: [Twisted-Python] AMQP listening and user-facing daemon
Message-ID: <51DB21B5.5050901@gmail.com>

Hi all,

*I posted this to python-list and tutor-list and received no replies. 
Any advice would be much appreciated. Thank you.*

What is the best approach to writing a concurrent daemon that can 
execute callbacks for different types of events (AMQP messages, parsed 
output of a subprocess, HTTP requests)?

I am considering [twisted][1], the built-in [threading][2] module, and 
[greenlet][3]. I must admit that I am very unfamiliar with concurrent 
programming and Python programming in general (formerly a data analysis 
driven procedural programmer). Any resources on threaded/concurrent 
programming (specifically daemons...not just multi-threading a single 
task) would be much appreciated.

Thank you.

Details:

1) Listens into AMQP messaging queues and executes callbacks when 
messages arrive.
Example: Immediately after startup, the daemon continuously listens to 
the [Openstack Notifications messaging queue][4]. When a virtual machine 
is launched, a notification is generated by Openstack with the hostname, 
IP address, etc. The daemon should read this message and write some info 
to a log (or POST the info to a server, or notify the user...something 
simple).

2) Parse the output of a subprocess and execute callbacks based on the 
output.
Example: Every 30 seconds, a system command "[qstat][5]" is run to query 
a job resource manager (e.g. TORQUE). Similar callbacks to 1).

3) Receive requests from a user and process them. I think this will be 
via WSGI HTTP.
Example: User submits an XML template with virtual machine templates. 
The daemon does some simple XML parsing and writes a job script for the 
job resource manager. The job is submitted to the resource manager and 
the daemon continually checks for the status of the job with "qstat" and 
for messages from AMQP. It should return "live" feedback to the user and 
write to a log.

   [1]: https://twistedmatrix.com/trac/wiki/Documentation
   [2]: http://docs.python.org/2/library/threading.html
   [3]: http://greenlet.readthedocs.org/en/latest/
   [4]: 
https://wiki.openstack.org/wiki/NotificationEventExamples#Immediate_Notifications:
   [5]: http://www.clusterresources.com/torquedocs21/commands/qstat.shtml

Justin Chiu            TRIUMF



From rmeijer at xs4all.nl  Tue Jul  9 02:04:01 2013
From: rmeijer at xs4all.nl (Rob Meijer)
Date: Tue, 9 Jul 2013 10:04:01 +0200
Subject: [Twisted-Python] Twisted web,
	giant-file POST forwarding and early bail-out.
Message-ID: <df3d67b21ad5440e2731e2057a61ae19.squirrel@webmail.xs4all.nl>

Hi everyone,

I'm working on what is just my second project using Twisted-Web, so I'm
still a relative newbee on the subject.

I'm working on a project that uses Twisted Web as a simple authorization
proxy. All requests to my proxy contain an authorization-token and are
either handled by the proxy, or are relayed to an other server. For all
GET stuff and small POST stuff this is not a problem. When I want to
process large POST requests however, I run into my limits of understanding
how Twisted Web actually works.

1) I figured out that next to the 'process' in my request handler, I need
to also overload handleContentChunk, parse the form body-parts in the
first chunk myself and open a proxy connection (self.agent.request) if the
authorization token checks out.

2) When it comes to appending the data received in handleContentChunk, and
if needed throttling the client if the server couldn't keep up,  I can't
figure out how to connect handleContentChunk and my self.agent.request
instance.

3) When the token does not check out, or the connection to the server
fails, it remains a mystery to me how I should throw an error in such a
way that it allows me to send a proper error message to the client, while
not having to first accept the whole large file. That is, it seems rather
silly that I would know things failed after the first POST body chunk, but
would have to wait for and accept hundreds of megabytes or maybe even a
few gigabytes of post data before I can notify the client that something
went wrong.


It seems I am either missing something blindingly obvious or Twisted Web
simply isn't meant to be used this way. I hope someone can give me some
directions how to make this giant-file-post forwarding and early-bail-out
scenario working with Twisted Web.

T.I.A.

Rob Meijer




From p.mayers at imperial.ac.uk  Tue Jul  9 02:41:11 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 09 Jul 2013 09:41:11 +0100
Subject: [Twisted-Python] Twisted web,
 giant-file POST forwarding and early bail-out.
In-Reply-To: <df3d67b21ad5440e2731e2057a61ae19.squirrel@webmail.xs4all.nl>
References: <df3d67b21ad5440e2731e2057a61ae19.squirrel@webmail.xs4all.nl>
Message-ID: <51DBCCA7.10303@imperial.ac.uk>

On 07/09/2013 09:04 AM, Rob Meijer wrote:
> Hi everyone,
>
> I'm working on what is just my second project using Twisted-Web, so I'm
> still a relative newbee on the subject.
>
> I'm working on a project that uses Twisted Web as a simple authorization
> proxy. All requests to my proxy contain an authorization-token and are
> either handled by the proxy, or are relayed to an other server. For all
> GET stuff and small POST stuff this is not a problem. When I want to
> process large POST requests however, I run into my limits of understanding
> how Twisted Web actually works.
>
> 1) I figured out that next to the 'process' in my request handler, I need
> to also overload handleContentChunk, parse the form body-parts in the
> first chunk myself and open a proxy connection (self.agent.request) if the
> authorization token checks out.
>
> 2) When it comes to appending the data received in handleContentChunk, and
> if needed throttling the client if the server couldn't keep up,  I can't
> figure out how to connect handleContentChunk and my self.agent.request
> instance.

You probably want to read up on the producer/consumer stuff in Twisted. 
In particular if you're using t.w.client.Agent, bodies in requests are 
supplied by an IBodyProducer.

http://twistedmatrix.com/documents/current/web/howto/client.html

Essentially, you need an IBodyProducer that maps to the incoming 
transport via request, which I guess would look something like this:

class RequestProducer(object):
     implements(IBodyProducer)

     def __init__(self, request):
         self.req = request

     def startProducing(self, consumer):
         self.d = defer.Deferred()
         self.consumer = consumer
         return d

     def pauseProducing(self):
         self.req.transport.pauseProducing()

     def stopProducing(self):
         # FIXME: what to do here...
         self.req.transport.loseConnection()

     def finish():
         self.d.callback(None)

...and you'll have code like this on the request object:

     def gotLength(self, length):
         self.bodyprod = RequestProducer(self)
         if length:
             self.bodyprod.length = length
         else:
             self.bodyprod.length = twisted.web.iweb.UNKNOWN_LENGTH
         self.out_req = self.agent.request(
             'GET', url, headers, bodyprod
         )

     def handleContentChunk(self, data):
         ...
         if data_to_be_forwarded:
             self.bodyprod.consumer.write(data)
         if some_done_condition:
             self.bodyprod.finish()
>
> 3) When the token does not check out, or the connection to the server
> fails, it remains a mystery to me how I should throw an error in such a
> way that it allows me to send a proper error message to the client, while

This is sort of a problem with HTTP. The client will probably keep 
sending the data.

The best you can do is write an HTTP error to the transport then throw 
the connection away, or blackhole all future content chunks.



From mithrandi at mithrandi.net  Tue Jul  9 05:25:42 2013
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Tue, 9 Jul 2013 13:25:42 +0200
Subject: [Twisted-Python] Twisted web,
 giant-file POST forwarding and early bail-out.
In-Reply-To: <51DBCCA7.10303@imperial.ac.uk>
References: <df3d67b21ad5440e2731e2057a61ae19.squirrel@webmail.xs4all.nl>
 <51DBCCA7.10303@imperial.ac.uk>
Message-ID: <CAMcKhMRQGoXhU67nGD6R+uRn66Ha8o-zO55Zqw2PsXDUuCSx8g@mail.gmail.com>

On Tue, Jul 9, 2013 at 10:41 AM, Phil Mayers <p.mayers at imperial.ac.uk>wrote:

> This is sort of a problem with HTTP. The client will probably keep sending
> the data.
>

Yes, the only way you can interrupt the client while it is sending a
request is to close the connection, which means that the client will not
read any error response you sent.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130709/ebfc9e63/attachment-0002.html>

From itamar at itamarst.org  Tue Jul  9 05:30:06 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 09 Jul 2013 07:30:06 -0400
Subject: [Twisted-Python] Twisted web,
 giant-file POST forwarding and early bail-out.
In-Reply-To: <df3d67b21ad5440e2731e2057a61ae19.squirrel@webmail.xs4all.nl>
References: <df3d67b21ad5440e2731e2057a61ae19.squirrel@webmail.xs4all.nl>
Message-ID: <51DBF43E.6040205@itamarst.org>

On 07/09/2013 04:04 AM, Rob Meijer wrote:
> 3) When the token does not check out, or the connection to the server
> fails, it remains a mystery to me how I should throw an error in such a
> way that it allows me to send a proper error message to the client, while
> not having to first accept the whole large file. That is, it seems rather
> silly that I would know things failed after the first POST body chunk, but
> would have to wait for and accept hundreds of megabytes or maybe even a
> few gigabytes of post data before I can notify the client that something
> went wrong.
>
HTTP clients can send a "Expects: 100-continue" header (or something 
like that), which tells the server it should give an early rejection or 
acceptance before the client sends the data, in *addition* to the final 
response. You would still need to write some code to support this, but 
it is possible.



From itamar at itamarst.org  Tue Jul  9 05:40:27 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 09 Jul 2013 07:40:27 -0400
Subject: [Twisted-Python] Twisted web,
 giant-file POST forwarding and early bail-out.
In-Reply-To: <51DBF43E.6040205@itamarst.org>
References: <df3d67b21ad5440e2731e2057a61ae19.squirrel@webmail.xs4all.nl>
 <51DBF43E.6040205@itamarst.org>
Message-ID: <51DBF6AB.2080902@itamarst.org>

On 07/09/2013 07:30 AM, Itamar Turner-Trauring wrote:
> HTTP clients can send a "Expects: 100-continue" header (or something 
> like that), which tells the server it should give an early rejection 
> or acceptance before the client sends the data, in *addition* to the 
> final response. You would still need to write some code to support 
> this, but it is possible.
Although this only lets you reject based on headers, not body.



From david.serafini at oracle.com  Tue Jul  9 12:13:18 2013
From: david.serafini at oracle.com (David Serafini)
Date: Tue, 09 Jul 2013 11:13:18 -0700
Subject: [Twisted-Python] AMQP listening and user-facing daemon
In-Reply-To: <mailman.1.1373392801.27271.twisted-python@twistedmatrix.com>
References: <mailman.1.1373392801.27271.twisted-python@twistedmatrix.com>
Message-ID: <51DC52BE.8050508@oracle.com>

> Date: Mon, 08 Jul 2013 13:31:49 -0700
> From: Justin Chiu <c.justin88 at gmail.com>
>
> Hi all,
>
> *I posted this to python-list and tutor-list and received no replies.
> Any advice would be much appreciated. Thank you.*
>
> What is the best approach to writing a concurrent daemon that can
> execute callbacks for different types of events (AMQP messages, parsed
> output of a subprocess, HTTP requests)?

There's the txamqp package, available on launchpad.
It's not very actively developed, but seems
usable in its current state.  There's also the txamqp-helpers package
that integrates with twistd.

HTH,
<dbs>

> ...
>
> Justin Chiu            TRIUMF

-- 
David Serafini | ConsultingMTS | Oracle | david.serafini at oracle.com | 
408-276-0486



From kevin.horn at gmail.com  Tue Jul  9 12:33:41 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 9 Jul 2013 13:33:41 -0500
Subject: [Twisted-Python] AMQP listening and user-facing daemon
In-Reply-To: <51DC52BE.8050508@oracle.com>
References: <mailman.1.1373392801.27271.twisted-python@twistedmatrix.com>
 <51DC52BE.8050508@oracle.com>
Message-ID: <CA+U=zK0YnvuLbYp4n8gr39uOgPa-+5USmPnM604ViR--2tvy2A@mail.gmail.com>

See also Pika: https://github.com/pika/pika/


On Tue, Jul 9, 2013 at 1:13 PM, David Serafini <david.serafini at oracle.com>wrote:

> Date: Mon, 08 Jul 2013 13:31:49 -0700
>> From: Justin Chiu <c.justin88 at gmail.com>
>>
>>
>> Hi all,
>>
>> *I posted this to python-list and tutor-list and received no replies.
>> Any advice would be much appreciated. Thank you.*
>>
>> What is the best approach to writing a concurrent daemon that can
>> execute callbacks for different types of events (AMQP messages, parsed
>> output of a subprocess, HTTP requests)?
>>
>
> There's the txamqp package, available on launchpad.
> It's not very actively developed, but seems
> usable in its current state.  There's also the txamqp-helpers package
> that integrates with twistd.
>
> HTH,
> <dbs>
>
>  ...
>>
>> Justin Chiu            TRIUMF
>>
>
> --
> David Serafini | ConsultingMTS | Oracle | david.serafini at oracle.com |
> 408-276-0486
>
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>



-- 
--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130709/49452202/attachment-0002.html>

From ltaylor.volks at gmail.com  Wed Jul 10 14:42:52 2013
From: ltaylor.volks at gmail.com (Lucas Taylor)
Date: Wed, 10 Jul 2013 15:42:52 -0500
Subject: [Twisted-Python] AMQP listening and user-facing daemon
In-Reply-To: <51DB21B5.5050901@gmail.com>
References: <51DB21B5.5050901@gmail.com>
Message-ID: <C0073FB6-2DFA-427A-AFE1-83BD8945BAA5@gmail.com>


On Jul 8, 2013, at 3:31 PM, Justin Chiu wrote:

> Hi all,
> 
> *I posted this to python-list and tutor-list and received no replies. Any advice would be much appreciated. Thank you.*
> 
> What is the best approach to writing a concurrent daemon that can execute callbacks for different types of events (AMQP messages, parsed output of a subprocess, HTTP requests)?
> 
> I am considering [twisted][1], the built-in [threading][2] module, and [greenlet][3]. I must admit that I am very unfamiliar with concurrent programming and Python programming in general (formerly a data analysis driven procedural programmer). Any resources on threaded/concurrent programming (specifically daemons...not just multi-threading a single task) would be much appreciated.
> 

From the details below, it would appear that Twisted would be a great fit for this application.

The asynchronous nature of the framework may cause some head scratching if you're in a procedural mindset, but on the other hand, attempting to facilitate all of the different service interactions you are proposing in a coherent manner can be challenging regardless. One of Twisted's strengths is that it provides that coherence...once you grok the paradigm, you'll be able to look at this type of application and quickly come up with a reasonable sketch of how all of the pieces will fit together, with confidence. 

I highly recommend Dave Peticolas' tutorial:  http://krondo.com/?page_id=1327
You'll get a great introduction to asynchronous programming and dive into Twisted.

And of course the Twisted documentation, esp. the Getting Started section of http://twistedmatrix.com/documents/current/core/howto/.

Finally, I'd stress that you don't need to know *all* of Twisted to benefit from using it. There is a great deal of functionality in the framework and I'm discovering new uses for it all of the time.


> Details:
> 
> 1) Listens into AMQP messaging queues and executes callbacks when messages arrive.
> Example: Immediately after startup, the daemon continuously listens to the [Openstack Notifications messaging queue][4]. When a virtual machine is launched, a notification is generated by Openstack with the hostname, IP address, etc. The daemon should read this message and write some info to a log (or POST the info to a server, or notify the user...something simple).
> 

Others have mentioned txAMQP.  It should be fairly straightforward to consume messages from the queue and hook it up to your user interface.  There are numerous asynchronous APIs in the framework, so you'll have options for doing things just as you propose, without blocking other parts of your application.  Twisted has its own logging system and twisted.web.client.Agent can be used to POST to a web server, etc. 

> 2) Parse the output of a subprocess and execute callbacks based on the output.
> Example: Every 30 seconds, a system command "[qstat][5]" is run to query a job resource manager (e.g. TORQUE). Similar callbacks to 1).

Twisted can help you with scheduled tasks and there is a ProcessProtocol that, combined, will do exactly what you propose.
http://twistedmatrix.com/documents/current/core/howto/time.html
http://twistedmatrix.com/documents/current/core/howto/process.html


> 3) Receive requests from a user and process them. I think this will be via WSGI HTTP.
> Example: User submits an XML template with virtual machine templates. The daemon does some simple XML parsing and writes a job script for the job resource manager. The job is submitted to the resource manager and the daemon continually checks for the status of the job with "qstat" and for messages from AMQP. It should return "live" feedback to the user and write to a log.
> 

Twisted has a built-in programmable web server, and a WSGI container is available. http://twistedmatrix.com/documents/current/web/howto/web-in-60/index.html is a good starter for web programming with Twisted, as is the general web howto: http://twistedmatrix.com/documents/current/web/howto/using-twistedweb.html

There are many ways to construct what you describe, so it's probably not appropriate to give specific recommendations other than to say what you want is absolutely feasible. It appears you've already got a good handle on what you want to achieve, which should make it easier when it comes to seeking more specific help, etc. from the mailing list once you get your feet wet.


Lucas




-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130710/6b46df54/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Jul 10 14:49:56 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 10 Jul 2013 13:49:56 -0700
Subject: [Twisted-Python] Twisted web,
	giant-file POST forwarding and early bail-out.
In-Reply-To: <51DBF43E.6040205@itamarst.org>
References: <df3d67b21ad5440e2731e2057a61ae19.squirrel@webmail.xs4all.nl>
 <51DBF43E.6040205@itamarst.org>
Message-ID: <AF0281AE-1A41-48D2-B592-E1431B12C55C@twistedmatrix.com>


On Jul 9, 2013, at 4:30 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:

> On 07/09/2013 04:04 AM, Rob Meijer wrote:
>> 3) When the token does not check out, or the connection to the server
>> fails, it remains a mystery to me how I should throw an error in such a
>> way that it allows me to send a proper error message to the client, while
>> not having to first accept the whole large file. That is, it seems rather
>> silly that I would know things failed after the first POST body chunk, but
>> would have to wait for and accept hundreds of megabytes or maybe even a
>> few gigabytes of post data before I can notify the client that something
>> went wrong.
>> 
> HTTP clients can send a "Expects: 100-continue" header (or something like that), which tells the server it should give an early rejection or acceptance before the client sends the data, in *addition* to the final response. You would still need to write some code to support this, but it is possible.

FYI, it's "Expect: 100-continue" ;-). <http://www.w3.org/Protocols/rfc2616/rfc2616-sec8>.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130710/fab272ca/attachment-0002.html>

From msc at contact.de  Fri Jul 12 04:19:35 2013
From: msc at contact.de (Michael Schlenker)
Date: Fri, 12 Jul 2013 12:19:35 +0200
Subject: [Twisted-Python] Twisted web,
 giant-file POST forwarding and early bail-out.
In-Reply-To: <51DBF6AB.2080902@itamarst.org>
References: <df3d67b21ad5440e2731e2057a61ae19.squirrel@webmail.xs4all.nl>
 <51DBF43E.6040205@itamarst.org> <51DBF6AB.2080902@itamarst.org>
Message-ID: <51DFD837.2090308@contact.de>

Am 09.07.2013 13:40, schrieb Itamar Turner-Trauring:
> On 07/09/2013 07:30 AM, Itamar Turner-Trauring wrote:
>> HTTP clients can send a "Expects: 100-continue" header (or something
>> like that), which tells the server it should give an early rejection
>> or acceptance before the client sends the data, in *addition* to the
>> final response. You would still need to write some code to support
>> this, but it is possible.
> Although this only lets you reject based on headers, not body.

If you have a Content Size header, it works, for chunked encoding not so
much.

But client side support for 100-continue is spotty, at least the python
stdlib httplib client mishandles 100-continue requests in an attempt to
work around Microsoft IIS strangeness.

Michael

-- 
Michael Schlenker
Software Architect

CONTACT Software GmbH           Tel.:   +49 (421) 20153-80
Wiener Straße 1-3               Fax:    +49 (421) 20153-41
28359 Bremen
http://www.contact.de/          E-Mail: msc at contact.de

Sitz der Gesellschaft: Bremen
Geschäftsführer: Karl Heinz Zachries, Ralf Holtgrefe
Eingetragen im Handelsregister des Amtsgerichts Bremen unter HRB 13215



From p.mayers at imperial.ac.uk  Fri Jul 12 04:25:51 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 12 Jul 2013 11:25:51 +0100
Subject: [Twisted-Python] Setting socket options before connect
Message-ID: <51DFD9AF.70609@imperial.ac.uk>

I have a use case (namely setting the Linux-specific SO_MARK socket 
option) where I need to set the socket option after the socket object is 
created but before Twisted starts to try and connect.

Is there a clean way to do this? Ideally there would be some sort of 
pre-connect function, similar to the preexec_fn for child processes, but 
any reasonably clean solution will do.

(By clean I mean "doesn't have me duplicating hundreds of lines of 
Twisted code into my own Connector/Port/etc. classes" ;o)



From itamar at futurefoundries.com  Fri Jul 12 04:34:45 2013
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Fri, 12 Jul 2013 06:34:45 -0400
Subject: [Twisted-Python] Setting socket options before connect
In-Reply-To: <51DFD9AF.70609@imperial.ac.uk>
References: <51DFD9AF.70609@imperial.ac.uk>
Message-ID: <CAOp9P3p7UYhddDbb91zFav8Hw_E17Zp443KykGhQgQyq8nH+xw@mail.gmail.com>

Subclass twisted.internet.tcp.Client, override createInternetSocket() so it
calls setsockopt() on the socket after you've called base implementation to
create it. This breaks some abstraction boundaries, so it isn't great, but
very little code duplication is involved.

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ — Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130712/5f90f522/attachment-0002.html>

From p.mayers at imperial.ac.uk  Fri Jul 12 04:42:19 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 12 Jul 2013 11:42:19 +0100
Subject: [Twisted-Python] Setting socket options before connect
In-Reply-To: <CAOp9P3p7UYhddDbb91zFav8Hw_E17Zp443KykGhQgQyq8nH+xw@mail.gmail.com>
References: <51DFD9AF.70609@imperial.ac.uk>
 <CAOp9P3p7UYhddDbb91zFav8Hw_E17Zp443KykGhQgQyq8nH+xw@mail.gmail.com>
Message-ID: <51DFDD8B.6030707@imperial.ac.uk>

On 12/07/13 11:34, Itamar Turner-Trauring wrote:
> Subclass twisted.internet.tcp.Client, override createInternetSocket() so
> it calls setsockopt() on the socket after you've called base
> implementation to create it. This breaks some abstraction boundaries, so
> it isn't great, but very little code duplication is involved.

Ah, ok. Presumably I also need to subclass Connector and override 
_makeTransport to use MyClient, then call MyConnector() directly (or 
subclass the reactor... shudder)

Should there be something built in to Twisted for this? Should I open a 
ticket?



From exarkun at twistedmatrix.com  Fri Jul 12 06:09:43 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 12 Jul 2013 12:09:43 -0000
Subject: [Twisted-Python] Setting socket options before connect
In-Reply-To: <51DFDD8B.6030707@imperial.ac.uk>
References: <51DFD9AF.70609@imperial.ac.uk>
 <CAOp9P3p7UYhddDbb91zFav8Hw_E17Zp443KykGhQgQyq8nH+xw@mail.gmail.com>
 <51DFDD8B.6030707@imperial.ac.uk>
Message-ID: <20130712120943.28793.1298272201.divmod.xquotient.641@top>

On 10:42 am, p.mayers at imperial.ac.uk wrote:
>On 12/07/13 11:34, Itamar Turner-Trauring wrote:
>>Subclass twisted.internet.tcp.Client, override createInternetSocket() 
>>so
>>it calls setsockopt() on the socket after you've called base
>>implementation to create it. This breaks some abstraction boundaries, 
>>so
>>it isn't great, but very little code duplication is involved.
>
>Ah, ok. Presumably I also need to subclass Connector and override 
>_makeTransport to use MyClient, then call MyConnector() directly (or 
>subclass the reactor... shudder)
>
>Should there be something built in to Twisted for this? Should I open a 
>ticket?

If you want your code to keep working, or to work with alternate reactor 
implementations, then you'd *really* rather use a documented, tested 
interface rather than the hack outlined above.

Jean-Paul



From bock.harryw at gmail.com  Sat Jul 13 20:00:09 2013
From: bock.harryw at gmail.com (Harry Bock)
Date: Sat, 13 Jul 2013 22:00:09 -0400
Subject: [Twisted-Python] Python 3: bytes vs. str in twisted.python.filepath
Message-ID: <CABjbJ3z22c68k=ziaDkPHBMwqc7=3LdqF0TPH8mR7ZGCpZoLaw@mail.gmail.com>

Hi all,

My name is Harry Bock.  I'm interested in helping out porting Twisted to
Python 3, and I've popped in IRC a few times to introduce myself and ask a
few questions. A few developers agreed that working on trial dependencies
would be a big help.

In doing some porting work on trial, I stumbled upon a previous porting
effort (possibly by Itamar?) for twisted.python.filepath and related
modules.  It seemed like the porting effort included forcing all pathname
inputs to be byte strings instead of native strings. After some
investigation, I believe this is the wrong approach, but I wanted to start
a discussion here first.  Some thoughts:

(a) As of Python 3.3, use of the ANSI API in Windows is deprecated[1], so
many functions in os and os.path raise DeprecationWarning when given byte
strings as input.  Although win32 is not an initial target of the porting
effort, we'll have to support it eventually and the API should be supported
before then.

(b) Misunderstandings at the application level about the underlying
filesystem's path encoding is not the problem of the Twisted API.  Correct
me if I'm wrong, but that's the responsibility of the system administrator
or individual user (at least on UNIX) to set the LANG environment variable,
or for the application to call setlocale(3) to explicitly override it.

(c) If we do not allow unicode strings, we will be forcing the application
developer to decide how to encode paths when using the FilePath API.  Per
(b) above, the user will have to call sys.getfilesystemencoding()[2] to
divine what encoding to use before using the API at all, which to me is
terribly annoying and would just add str.encode calls everywhere.

Thus, my vote is that on Python 2.x, Twisted should accept either the
native str or unicode types for path names, and on Python 3.x, only accept
the str type to prevent deprecation issues with system calls.  I have a
patch set that will make this happen including unittest modifications; if
there's a consensus I'm happy to open a ticket and submit the patches.

Thanks!

[1] http://bugs.python.org/issue13374
[2] http://docs.python.org/3/library/sys.html#sys.getfilesystemencoding
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130713/e4a9a989/attachment-0002.html>

From mithrandi at mithrandi.net  Sun Jul 14 04:27:47 2013
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sun, 14 Jul 2013 12:27:47 +0200
Subject: [Twisted-Python] Python 3: bytes vs. str in
	twisted.python.filepath
In-Reply-To: <CABjbJ3z22c68k=ziaDkPHBMwqc7=3LdqF0TPH8mR7ZGCpZoLaw@mail.gmail.com>
References: <CABjbJ3z22c68k=ziaDkPHBMwqc7=3LdqF0TPH8mR7ZGCpZoLaw@mail.gmail.com>
Message-ID: <CAMcKhMT5wP5pcv93Ae1uHZwnr5rYE9k1te5uu_UCURW5z8JR+g@mail.gmail.com>

On Sun, Jul 14, 2013 at 4:00 AM, Harry Bock <bock.harryw at gmail.com> wrote:

> (b) Misunderstandings at the application level about the underlying
> filesystem's path encoding is not the problem of the Twisted API.  Correct
> me if I'm wrong, but that's the responsibility of the system administrator
> or individual user (at least on UNIX) to set the LANG environment variable,
> or for the application to call setlocale(3) to explicitly override it.
>

There is no way to enforce a particular setting of the LANG environment
variable globally; multiple users could use filenames encoded in different
encodings (in fact even a single user could do this), and files could be
transferred from other systems using different encodings. While a
reasonable person might insist on the use of UTF-8 everywhere, there is no
way to guarantee that UNIX filenames are all in the same encoding, or are
even in any particular encoding at all (they might be binary non-text
garbage), and the inability to deal with filenames like this would be
somewhat of a serious defect.

On Windows, the reverse situation obtains, of course.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130714/47d13d66/attachment-0002.html>

From itamar at itamarst.org  Sun Jul 14 06:16:12 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 14 Jul 2013 08:16:12 -0400
Subject: [Twisted-Python] Python 3: bytes vs. str in
	twisted.python.filepath
In-Reply-To: <CABjbJ3z22c68k=ziaDkPHBMwqc7=3LdqF0TPH8mR7ZGCpZoLaw@mail.gmail.com>
References: <CABjbJ3z22c68k=ziaDkPHBMwqc7=3LdqF0TPH8mR7ZGCpZoLaw@mail.gmail.com>
Message-ID: <51E2968C.9040001@itamarst.org>

On 07/13/2013 10:00 PM, Harry Bock wrote:
> Hi all,
>
> My name is Harry Bock.  I'm interested in helping out porting Twisted 
> to Python 3, and I've popped in IRC a few times to introduce myself 
> and ask a few questions. A few developers agreed that working on trial 
> dependencies would be a big help.
>
> In doing some porting work on trial, I stumbled upon a previous 
> porting effort (possibly by Itamar?) for twisted.python.filepath and 
> related modules.  It seemed like the porting effort included forcing 
> all pathname inputs to be byte strings instead of native strings.

You imply that this was a change, somehow, but it wasn't. The API was 
*always* bytes and it continues to be bytes on Python 3.

It's a common Python 3 porting mistake to change everything from bytes 
to unicode just because. E.g. Python standard library does this in many 
places for no good reason, resulting in bugs that are still being fixed 
(http://bugs.python.org/issue12411) or APIs that are less useful 
(zipfile docs explicitly state that there is no standard encoding in zip 
files, but Python 3 zipfile module only supports one specific encoding 
because they switched to Unicode and didn't bother reading the module's 
own docs). Our goal in porting was backwards compatibility with Python 2 
code, so porters don't have to change everything, and correctness. And, 
in this particular case, to get something working in the minimal amount 
of time - *adding* Unicode support is useful and should be done.

> After some investigation, I believe this is the wrong approach, but I 
> wanted to start a discussion here first.  Some thoughts:
>
> (a) As of Python 3.3, use of the ANSI API in Windows is deprecated[1], 
> so many functions in os and os.path raise DeprecationWarning when 
> given byte strings as input.  Although win32 is not an initial target 
> of the porting effort, we'll have to support it eventually and the API 
> should be supported before then.
>
> (b) Misunderstandings at the application level about the underlying 
> filesystem's path encoding is not the problem of the Twisted API.  
> Correct me if I'm wrong, but that's the responsibility of the system 
> administrator or individual user (at least on UNIX) to set the LANG 
> environment variable, or for the application to call setlocale(3) to 
> explicitly override it.
Given operating systems that don't really know about encodings on the 
filesystem level, forcing everything to be unicode doesn't make sense. 
I'm pretty sure you can end up with files in multiple different Unicode 
encodings on same filesystem on Linux, for example.

> (c) If we do not allow unicode strings, we will be forcing the 
> application developer to decide how to encode paths when using the 
> FilePath API.  Per (b) above, the user will have to call 
> sys.getfilesystemencoding()[2] to divine what encoding to use before 
> using the API at all, which to me is terribly annoying and would just 
> add str.encode calls everywhere.
>
It is indeed a problem that we only support bytes in FilePath on Python 
3. As I mentioned above, Unicode support is missing only due to lack of 
time in the initial port.

> Thus, my vote is that on Python 2.x, Twisted should accept either the 
> native str or unicode types for path names, and on Python 3.x, only 
> accept the str type to prevent deprecation issues with system calls.  
> I have a patch set that will make this happen including unittest 
> modifications; if there's a consensus I'm happy to open a ticket and 
> submit the patches.

The ideal situation would be to support bytes and Unicode on Python 2 
*and* Python 3, for maximum compatibility. Even if deprecated on 
Windows, filesystem operations on Python 3 still do accept bytes (and 
they're not deprecated elsewhere). Given existing code that already 
takes bytes, switching to only doing Unicode on Python 3 would not be 
backwards compatible, so we can't really do that without a bunch of 
deprecation warnings and a few releases. Instead we should just do what 
Python does: if you start with bytes path you always get back bytes, if 
you start with Unicode path you always get back Unicode.




From bock.harryw at gmail.com  Sun Jul 14 08:18:20 2013
From: bock.harryw at gmail.com (Harry Bock)
Date: Sun, 14 Jul 2013 10:18:20 -0400
Subject: [Twisted-Python] Python 3: bytes vs. str in
	twisted.python.filepath
In-Reply-To: <51E2968C.9040001@itamarst.org>
References: <CABjbJ3z22c68k=ziaDkPHBMwqc7=3LdqF0TPH8mR7ZGCpZoLaw@mail.gmail.com>
 <51E2968C.9040001@itamarst.org>
Message-ID: <CABjbJ3y0gHUD3Qz8FCQHHK7_eRhWnd6rfxFHQn8OvqYDH2y_ZA@mail.gmail.com>

On Sun, Jul 14, 2013 at 8:16 AM, Itamar Turner-Trauring <itamar at itamarst.org
> wrote:

> On 07/13/2013 10:00 PM, Harry Bock wrote:
>
>> Hi all,
>>
>> My name is Harry Bock.  I'm interested in helping out porting Twisted to
>> Python 3, and I've popped in IRC a few times to introduce myself and ask a
>> few questions. A few developers agreed that working on trial dependencies
>> would be a big help.
>>
>> In doing some porting work on trial, I stumbled upon a previous porting
>> effort (possibly by Itamar?) for twisted.python.filepath and related
>> modules.  It seemed like the porting effort included forcing all pathname
>> inputs to be byte strings instead of native strings.
>>
>
> You imply that this was a change, somehow, but it wasn't. The API was
> *always* bytes and it continues to be bytes on Python 3.
>

Ah, I understand now.  Since the native string type was used in Python 2,
it follows that in Python 3 the API should be bytes.


>
> It's a common Python 3 porting mistake to change everything from bytes to
> unicode just because. E.g. Python standard library does this in many places
> for no good reason, resulting in bugs that are still being fixed (
> http://bugs.python.org/**issue12411 <http://bugs.python.org/issue12411>)
> or APIs that are less useful (zipfile docs explicitly state that there is
> no standard encoding in zip files, but Python 3 zipfile module only
> supports one specific encoding because they switched to Unicode and didn't
> bother reading the module's own docs). Our goal in porting was backwards
> compatibility with Python 2 code, so porters don't have to change
> everything, and correctness. And, in this particular case, to get something
> working in the minimal amount of time - *adding* Unicode support is useful
> and should be done.
>
>
>  After some investigation, I believe this is the wrong approach, but I
>> wanted to start a discussion here first.  Some thoughts:
>>
>> (a) As of Python 3.3, use of the ANSI API in Windows is deprecated[1], so
>> many functions in os and os.path raise DeprecationWarning when given byte
>> strings as input.  Although win32 is not an initial target of the porting
>> effort, we'll have to support it eventually and the API should be supported
>> before then.
>>
>> (b) Misunderstandings at the application level about the underlying
>> filesystem's path encoding is not the problem of the Twisted API.  Correct
>> me if I'm wrong, but that's the responsibility of the system administrator
>> or individual user (at least on UNIX) to set the LANG environment variable,
>> or for the application to call setlocale(3) to explicitly override it.
>>
> Given operating systems that don't really know about encodings on the
> filesystem level, forcing everything to be unicode doesn't make sense. I'm
> pretty sure you can end up with files in multiple different Unicode
> encodings on same filesystem on Linux, for example.


This is very true and I didn't consider it in my initial investigation.
While I think it would be uncommon to have files in multiple encodings on
the same filesystem, it certainly would not be rare - to Tristan's point,
copying names from filesystem to filesystem could easily result in multiple
encodings.  The operating system may not need to understand the encodings,
but applications do to display them correctly,  Which leads to your last
point...

>
>  Thus, my vote is that on Python 2.x, Twisted should accept either the
>> native str or unicode types for path names, and on Python 3.x, only accept
>> the str type to prevent deprecation issues with system calls.  I have a
>> patch set that will make this happen including unittest modifications; if
>> there's a consensus I'm happy to open a ticket and submit the patches.
>>
>
> The ideal situation would be to support bytes and Unicode on Python 2
> *and* Python 3, for maximum compatibility. Even if deprecated on Windows,
> filesystem operations on Python 3 still do accept bytes (and they're not
> deprecated elsewhere). Given existing code that already takes bytes,
> switching to only doing Unicode on Python 3 would not be backwards
> compatible, so we can't really do that without a bunch of deprecation
> warnings and a few releases. Instead we should just do what Python does: if
> you start with bytes path you always get back bytes, if you start with
> Unicode path you always get back Unicode.
>
>
Yes, you're right, that's probably the best solution.  It would not be
terribly hard to do so - then application developers can choose whether to
defer to the local user's interpretation of the setting, or explicitly use
byte paths.  Thanks so much for your input!

Is this something I can open a ticket for?



>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130714/a1b87813/attachment-0002.html>

From itamar at itamarst.org  Sun Jul 14 09:35:20 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 14 Jul 2013 11:35:20 -0400
Subject: [Twisted-Python] Python 3: bytes vs. str in
	twisted.python.filepath
In-Reply-To: <CABjbJ3y0gHUD3Qz8FCQHHK7_eRhWnd6rfxFHQn8OvqYDH2y_ZA@mail.gmail.com>
References: <CABjbJ3z22c68k=ziaDkPHBMwqc7=3LdqF0TPH8mR7ZGCpZoLaw@mail.gmail.com>
 <51E2968C.9040001@itamarst.org>
 <CABjbJ3y0gHUD3Qz8FCQHHK7_eRhWnd6rfxFHQn8OvqYDH2y_ZA@mail.gmail.com>
Message-ID: <51E2C538.3060807@itamarst.org>

On 07/14/2013 10:18 AM, Harry Bock wrote:
>
> Is this something I can open a ticket for?
>
I believe there's already a ticket of sorts, with an old defunct branch 
starting working on this - https://twistedmatrix.com/trac/ticket/2366 - 
it would be really great if you could revive it and add support for this 
feature. Using FilePath is definitely annoying on Python 3, and in 
general Unicode makes more sense in many (most?) situations.

-Itamar



From glyph at twistedmatrix.com  Sun Jul 14 19:01:42 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 14 Jul 2013 18:01:42 -0700
Subject: [Twisted-Python] Setting socket options before connect
In-Reply-To: <20130712120943.28793.1298272201.divmod.xquotient.641@top>
References: <51DFD9AF.70609@imperial.ac.uk>
 <CAOp9P3p7UYhddDbb91zFav8Hw_E17Zp443KykGhQgQyq8nH+xw@mail.gmail.com>
 <51DFDD8B.6030707@imperial.ac.uk>
 <20130712120943.28793.1298272201.divmod.xquotient.641@top>
Message-ID: <C529325F-6517-436B-9E19-677A85FB4BBB@twistedmatrix.com>


On Jul 12, 2013, at 5:09 AM, exarkun at twistedmatrix.com wrote:

> On 10:42 am, p.mayers at imperial.ac.uk wrote:
>> On 12/07/13 11:34, Itamar Turner-Trauring wrote:
>>> Subclass twisted.internet.tcp.Client, override createInternetSocket() so
>>> it calls setsockopt() on the socket after you've called base
>>> implementation to create it. This breaks some abstraction boundaries, so
>>> it isn't great, but very little code duplication is involved.
>> 
>> Ah, ok. Presumably I also need to subclass Connector and override _makeTransport to use MyClient, then call MyConnector() directly (or subclass the reactor... shudder)
>> 
>> Should there be something built in to Twisted for this? Should I open a ticket?
> 
> If you want your code to keep working, or to work with alternate reactor implementations, then you'd *really* rather use a documented, tested interface rather than the hack outlined above.

Does such an API exist today, or should a ticket be filed for one?

For everyone's information, in case it's not entirely clear from the documentation resources available: we hope to eventually deprecate the whole 'tcp' module so that people (myself included ;-)) stop subclassing stuff in it, so writing new code that depends on this, even the nominally "public" parts of the API (the bits without underscores) would be really unfortunate.  If we can figure out something that uses totally public APIs without subclassing tcp.Client that would be best; if not, we should really have a ticket open to fix the API so that it is possible.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130714/d9ad7323/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Jul 14 19:57:27 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 14 Jul 2013 18:57:27 -0700
Subject: [Twisted-Python] Python 3: bytes vs. str in
	twisted.python.filepath
In-Reply-To: <CABjbJ3y0gHUD3Qz8FCQHHK7_eRhWnd6rfxFHQn8OvqYDH2y_ZA@mail.gmail.com>
References: <CABjbJ3z22c68k=ziaDkPHBMwqc7=3LdqF0TPH8mR7ZGCpZoLaw@mail.gmail.com>
 <51E2968C.9040001@itamarst.org>
 <CABjbJ3y0gHUD3Qz8FCQHHK7_eRhWnd6rfxFHQn8OvqYDH2y_ZA@mail.gmail.com>
Message-ID: <3552258B-A1F1-4969-A504-3E61DC8B8DF8@twistedmatrix.com>

First off, hi Harry!  I am super glad that someone has taken an interest in this.  Please let me know if I can be helpful in your effort to fix this.  FilePath totally has the right sort of shape to handle all these problems very gracefully, but its current implementation is (as you have noticed!) a disaster, regardless of python 2/3 issues, it doesn't handle text/bytes correctly on python 2.

Also, sorry for being a bit late to the party, been on vacation for a week :-).

On Jul 14, 2013, at 7:18 AM, Harry Bock <bock.harryw at gmail.com> wrote:

> On Sun, Jul 14, 2013 at 8:16 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> On 07/13/2013 10:00 PM, Harry Bock wrote:
> Hi all,
> 
> My name is Harry Bock.  I'm interested in helping out porting Twisted to Python 3, and I've popped in IRC a few times to introduce myself and ask a few questions. A few developers agreed that working on trial dependencies would be a big help.
> 
> In doing some porting work on trial, I stumbled upon a previous porting effort (possibly by Itamar?) for twisted.python.filepath and related modules.  It seemed like the porting effort included forcing all pathname inputs to be byte strings instead of native strings.
> 
> You imply that this was a change, somehow, but it wasn't. The API was *always* bytes and it continues to be bytes on Python 3.
> 
> Ah, I understand now.  Since the native string type was used in Python 2, it follows that in Python 3 the API should be bytes.

It doesn't really make sense to talk about "native strings" unless you're talking about Python code objects; __doc__ and func_name are "native strings"; the inputs to FilePath are bytes, pure and simple.  This is mostly just because FilePath was designed way back when I only really knew about the way path names worked on Linux.

Among several of the design errors in Python 3's allegedly superior unicode support was to call the text type "str", when this was a confusing name in the first place, and is now ambiguous, confusing, and arguably wrong all at once; at the cost of one additional letter, it could have been "text", which is both a whole word and a more accurate description of what it does.  I generally use "text" rather than "string" to describe the text type anyway, because it's a lot less ambiguous and requires less backtracking ("oh I was talking about python 2 there, let me rephrase").

> It's a common Python 3 porting mistake to change everything from bytes to unicode just because. E.g. Python standard library does this in many places for no good reason, resulting in bugs that are still being fixed (http://bugs.python.org/issue12411) or APIs that are less useful (zipfile docs explicitly state that there is no standard encoding in zip files, but Python 3 zipfile module only supports one specific encoding because they switched to Unicode and didn't bother reading the module's own docs). Our goal in porting was backwards compatibility with Python 2 code, so porters don't have to change everything, and correctness. And, in this particular case, to get something working in the minimal amount of time - *adding* Unicode support is useful and should be done.
> 
> 
> After some investigation, I believe this is the wrong approach, but I wanted to start a discussion here first.  Some thoughts:
> 
> (a) As of Python 3.3, use of the ANSI API in Windows is deprecated[1], so many functions in os and os.path raise DeprecationWarning when given byte strings as input.  Although win32 is not an initial target of the porting effort, we'll have to support it eventually and the API should be supported before then.
> 
> (b) Misunderstandings at the application level about the underlying filesystem's path encoding is not the problem of the Twisted API.  Correct me if I'm wrong, but that's the responsibility of the system administrator or individual user (at least on UNIX) to set the LANG environment variable, or for the application to call setlocale(3) to explicitly override it.
> Given operating systems that don't really know about encodings on the filesystem level, forcing everything to be unicode doesn't make sense. I'm pretty sure you can end up with files in multiple different Unicode encodings on same filesystem on Linux, for example.
> 
> This is very true and I didn't consider it in my initial investigation.  While I think it would be uncommon to have files in multiple encodings on the same filesystem, it certainly would not be rare - to Tristan's point, copying names from filesystem to filesystem could easily result in multiple encodings.  The operating system may not need to understand the encodings, but applications do to display them correctly,  Which leads to your last point...

This is not really true.  This is how Linux and BSD handle file names; it is not how OS X handle file names.  (Nor is it how Windows works, as you've mentioned above.)

On OS X, file names are normalized (I forget the normalization at the moment, but you can look it up) UTF-8.  They _must_ be normalized UTF-8; it doesn't matter what $LANG is.  If you try to deal with filenames that are invalid UTF-8 byte sequences, the OS will URL-encode portions of the filename for you and _force_ its name (as returned by listdir() at least) to be a valid UTF-8 sequence.  If you give it something non-normalized, it will normalize it for you.

> Thus, my vote is that on Python 2.x, Twisted should accept either the native str or unicode types for path names, and on Python 3.x, only accept the str type to prevent deprecation issues with system calls.  I have a patch set that will make this happen including unittest modifications; if there's a consensus I'm happy to open a ticket and submit the patches.
> 
> The ideal situation would be to support bytes and Unicode on Python 2 *and* Python 3, for maximum compatibility. Even if deprecated on Windows, filesystem operations on Python 3 still do accept bytes (and they're not deprecated elsewhere). Given existing code that already takes bytes, switching to only doing Unicode on Python 3 would not be backwards compatible, so we can't really do that without a bunch of deprecation warnings and a few releases. Instead we should just do what Python does: if you start with bytes path you always get back bytes, if you start with Unicode path you always get back Unicode.
> 
> Yes, you're right, that's probably the best solution.  It would not be terribly hard to do so - then application developers can choose whether to defer to the local user's interpretation of the setting, or explicitly use byte paths.  Thanks so much for your input!

The design should not be as naive as "support bytes" or "support unicode", or even "support both".  In order to deal with some of these nastier edge-cases, you need a method that can give you a name to display to a user that's "human readable", a weird-Python-broken-surrogates-trick unicode object, and some bytes.  Then there's possibly some extra methods that could be added which are only sometimes available, like "driveLetter()" or somesuch.  (Maybe we could do better and have some kind of general mount-point object, but I digress.)

In other words, we need to give the developer an expressive enough API to clearly indicate their intent, and then have clear enough API documentation for them to figure out what their intent is :).

At the implementation level, these potential methods are both platform-specific and subtly distinctive.  For example, the "human readable name" implementation of a broken FilePath should include replacement characters rather than broken-surrogate hacks.  Replacement characters have a defined method for displaying them; since broken surrogates are just invalid garbage, some software might elect not to display the string at all, or throw an error.  It might also be sensible (as a future enhancement, this is not something we should try to do as a basic part of proper unicode support) to do some encoding-guessing and mojibake detection when trying to compute the human-readable name, since this name is just for display and it makes sense to work as hard as possible to display something sensible, since it does NOT need to be able to be fed back in to FilePath.  But of course on OS X, the thing to do would just be to convert to the percent-escaped version, since that's what the platform presents.  And on Windows, it might be sensible for the thing that gives you bytes to give you a faithful UTF-8 version of the filename rather than some platform-dependent ANSI junk, since as far as I can tell there's no need to ever get a byte sequence you could pass back to some other ANSI API.  If it were, that could be an explicitly separate API.

Finally, the fact that FilePath exposes the internal representation of the path (as ".path") is sort of a design error, and we should eventually deprecate that attribute, since there are multiple use-cases you might want that string for and we should return the appropriate version depending on which one you want.  I wouldn't worry about getting that attribute to do anything useful beyond a very rudimentary level of compatibility; in fact it would be great if the internal storage of the path were always unicode on Windows and always bytes on UNIX-ish platforms, and ".path" were just a proxy that always gave you bytes.  (Although possibly the internal representation should just be unicode too on OS X, I keep finding myself on the fence about that.)

> Is this something I can open a ticket for?

Hopefully the existing ticket is sufficient, but, open as many as you need :).  There might be a bunch of methods that need modification here, and at least e.g. the ZipPath work could be done separately.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130714/3f842716/attachment-0002.html>

From exarkun at twistedmatrix.com  Mon Jul 15 05:44:08 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 15 Jul 2013 11:44:08 -0000
Subject: [Twisted-Python] Setting socket options before connect
In-Reply-To: <C529325F-6517-436B-9E19-677A85FB4BBB@twistedmatrix.com>
References: <51DFD9AF.70609@imperial.ac.uk>
 <CAOp9P3p7UYhddDbb91zFav8Hw_E17Zp443KykGhQgQyq8nH+xw@mail.gmail.com>
 <51DFDD8B.6030707@imperial.ac.uk>
 <20130712120943.28793.1298272201.divmod.xquotient.641@top>
 <C529325F-6517-436B-9E19-677A85FB4BBB@twistedmatrix.com>
Message-ID: <20130715114408.28793.1484770856.divmod.xquotient.663@top>

On 01:01 am, glyph at twistedmatrix.com wrote:
>
>On Jul 12, 2013, at 5:09 AM, exarkun at twistedmatrix.com wrote:
>>On 10:42 am, p.mayers at imperial.ac.uk wrote:
>>>On 12/07/13 11:34, Itamar Turner-Trauring wrote:
>>>>Subclass twisted.internet.tcp.Client, override 
>>>>createInternetSocket() so
>>>>it calls setsockopt() on the socket after you've called base
>>>>implementation to create it. This breaks some abstraction 
>>>>boundaries, so
>>>>it isn't great, but very little code duplication is involved.
>>>
>>>Ah, ok. Presumably I also need to subclass Connector and override 
>>>_makeTransport to use MyClient, then call MyConnector() directly (or 
>>>subclass the reactor... shudder)
>>>
>>>Should there be something built in to Twisted for this? Should I open 
>>>a ticket?
>>
>>If you want your code to keep working, or to work with alternate 
>>reactor implementations, then you'd *really* rather use a documented, 
>>tested interface rather than the hack outlined above.
>
>Does such an API exist today, or should a ticket be filed for one?

Hm, I'm not *totally* sure what you mean.

There's the approach Itamar outlined, using APIs such as 
`twisted.internet.tcp.{Client,Server}`.  I don't think we should codify 
this as the public, stable, encouraged API to use - for precisely the 
reasons you give below.

There's various other APIs that are clearly related but definitely don't 
currently allow you to wedge this functionality in:

  1) reactor.connectTCP - nowhere to pass extra socket options now, but 
we could add more arguments to it I suppose.  Doesn't sound very nice to 
me.

  2) endpoints?  Again, no current support, but it's a place you could 
add new parameters.  Of course, this isn't a complete solution, since 
endpoints mostly just use reactor methods to set things up - but if we 
had a nice endpoints-based API then we could have a gross lower-level 
API that no one actually has to use.  Still, is 
"tcp:host=A:port=B:sockopt=TCP_CORK|TCP_QUICKACK" the road we want to go 
down?

  3) More transport methods - but this is an incomplete solution, as 
certain sockopts only make sense before a connection, so once you have a 
transport it's too late.

Maybe someone else has some suggestions from a totally different 
ballpark that solve the problem more pleasantly?

Anyhow, I think this certainly means a ticket should be filed for 
introducing some API - but it seems that a little more discussion about 
what the API should be will still be necessary.

Jean-Paul
>For everyone's information, in case it's not entirely clear from the 
>documentation resources available: we hope to eventually deprecate the 
>whole 'tcp' module so that people (myself included ;-)) stop 
>subclassing stuff in it, so writing new code that depends on this, even 
>the nominally "public" parts of the API (the bits without underscores) 
>would be really unfortunate.  If we can figure out something that uses 
>totally public APIs without subclassing tcp.Client that would be best; 
>if not, we should really have a ticket open to fix the API so that it 
>is possible.
>
>-glyph



From _ at lvh.io  Mon Jul 15 06:59:39 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Mon, 15 Jul 2013 14:59:39 +0200
Subject: [Twisted-Python] Twisted and new-style classes
Message-ID: <CAE_Hg6b1uoh+pamcVPSQcNU3WB_1SwwBopVRHo-oDfzg7zuy5w@mail.gmail.com>

Hi!

Maciej from the PyPy team has graciously offered to upgrade all of
Twisted's existing old-style classes to new-style. The reason this is now
also a mailing list thread is because it may, potentially, break some
things, and we want people to have a heads up. Of course, Twisted will
never break your stuff without warning (at least not intentionally) and the
normal compatibility policy is in effect as always :)

The catch is that Maciej wants some kind of guarantee that at some point,
this will be on by default. At least two committers (myself and Glyph) want
this, so I'm confident this is the case: unless someone highlights a huge
flaw in my reasoning that shows that we can't actually do this :)

Benefits:

- We get to use everything that requires new-style classes, e.g. the
descriptor protocol, and by extension classmethods, staticmethods,
properties...
- Performance benefit on PyPy
- Consistency of behavior between 2.x and 3.x

Counterarguments:

- It's a lot of work. That's true, but shouldn't concern you: we have
someone who says they're willing to actually do that work.
- It will break things. That is probably true, but Twisted never promises
not to break anything ever. It has a compatibility policy, the guiding line
for which is "the first one is always free". As long as we have a full,
real release where we *warn* people that something is going to happen and
they should test it now, we're satisfying that policy. The problem is that
AFAICT there's no obvious way to identify where problems will occur (since
it's a consequence of how people use current old-style things). The
suggested approach to this is that we have a release where all classes that
are going to be new-style are old-style by default, but, given e.g. an
environment variable, all of them *can* be new-style. The warning could
then be that you should turn on that environment variable (requiring
conscious action and being easy enough to undo if your code breaks).

I would suggest doing the transition in small steps, and adding the
environment variable as a priority. That way, people who know about this
can at least already run their tests before the entire process is complete.
Also, just because it has to be complete (but off by default) for at least
one release, doesn't mean it has be exactly one release :)

For new development, IIUC, new-style classes are already a requirement, so
this doesn't affect it.

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130715/2eb009ca/attachment-0002.html>

From marchael at ya.ru  Tue Jul 16 13:13:53 2013
From: marchael at ya.ru (MichaelMayorov)
Date: Tue, 16 Jul 2013 19:13:53 +0000 (UTC)
Subject: [Twisted-Python] Testing AMP-based code
References: <87zjv4pe0x.fsf@x200s.i-did-not-set--mail-host-address--so-tickle-me>
 <20130612231612.5484.1361672252.divmod.xquotient.46@top>
Message-ID: <loom.20130716T204922-790@post.gmane.org>

 <exarkun <at> twistedmatrix.com> writes:
> I think this is thinking in the right direction.  Twisted generally 
> tries to be responsible for testing its own code, and the serialization 
> from commands to bytes (and the reverse) that AMP does is part of 
> Twisted, so you should really be free from the burden of testing that 
> that stuff works.
> 
> ....
> 
> Some pieces are probably still missing from the public API - for 
> example, you do want to test that your objects all get properly 
> serialized and deserialized through AMP, particularly if you're 
> implementing custom Argument types.  There are some private APIs, 
> _objectsToStrings and _stringsToObjects mostly, that really help with 
> testing this, and we should think about how to expose this functionality 
> publically.  Also, we should document this whole pile of stuff.  Maybe 
> you'd be interested in writing something up after you've had a chance to 
> play with these ideas?
> 
> Jean-Paul
> 


Greetings!

Perhaps I should create a new thread, but I think that my problem could be 
related with this question.

I want to implement master/slave protocol based on AMP, here is a slave side 
code https://github.com/MichaelMayorov/buildbot/compare/fake-master-slave-
amp

The problem is that I want to pass few arguments to Bot 
https://github.com/MichaelMayorov/buildbot/compare/fake-master-slave-
amp#L0R38 from this place 
https://github.com/MichaelMayorov/buildbot/compare/fake-master-slave-
amp#L0R124
but current implementation not allow me to do this. I've read twisted API 
docs and discussed my idea on #buildbot where finally take advice to post my 
question here.

Thanks!




From girish946 at gmail.com  Wed Jul 17 00:09:25 2013
From: girish946 at gmail.com (Girish Joshi)
Date: Wed, 17 Jul 2013 11:39:25 +0530
Subject: [Twisted-Python] enable ssl in python application.
Message-ID: <CALkY8p-7eFuAa1MMFVdu1BPeBcsvPGFJhuSafG0tzEz6CYEYbg@mail.gmail.com>

I want to enable ssl on port 7081 for my python application I'm using this
port for xmlrpc. I have twisted library installed but I'm not getting
exactly how to use it's functions to enable ssl. here is my code.

class server:
         reactor.listenTCP(7081, server.Site(myapp))
         reactor.run()

and at client side:

server_proxy = xmlrpclib.Server("http://localhost:7081",allow_none=True)

and what code should be there at the client side please suggest solution
for that. I also want to do the same thing for java client for the same
application(python server).

please suggest solution for that.

girish.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130717/0d7c9e32/attachment-0002.html>

From exarkun at twistedmatrix.com  Wed Jul 17 05:10:08 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 17 Jul 2013 11:10:08 -0000
Subject: [Twisted-Python] enable ssl in python application.
In-Reply-To: <CALkY8p-7eFuAa1MMFVdu1BPeBcsvPGFJhuSafG0tzEz6CYEYbg@mail.gmail.com>
References: <CALkY8p-7eFuAa1MMFVdu1BPeBcsvPGFJhuSafG0tzEz6CYEYbg@mail.gmail.com>
Message-ID: <20130717111008.28793.143052471.divmod.xquotient.668@top>

On 06:09 am, girish946 at gmail.com wrote:
>I want to enable ssl on port 7081 for my python application I'm using 
>this
>port for xmlrpc. I have twisted library installed but I'm not getting
>exactly how to use it's functions to enable ssl. here is my code.

Have you read the SSL documentation?

See http://twistedmatrix.com/documents/current/core/howto/ssl.html

Jean-Paul



From exarkun at twistedmatrix.com  Wed Jul 17 05:14:55 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 17 Jul 2013 11:14:55 -0000
Subject: [Twisted-Python] Passing arguments to protocol instances (was Re:
 Testing AMP-based code)
In-Reply-To: <loom.20130716T204922-790@post.gmane.org>
References: <87zjv4pe0x.fsf@x200s.i-did-not-set--mail-host-address--so-tickle-me>
 <20130612231612.5484.1361672252.divmod.xquotient.46@top>
 <loom.20130716T204922-790@post.gmane.org>
Message-ID: <20130717111455.28793.1180420774.divmod.xquotient.675@top>

On 16 Jul, 07:13 pm, marchael at ya.ru wrote:
><exarkun <at> twistedmatrix.com> writes:
>>I think this is thinking in the right direction.  Twisted generally
>>tries to be responsible for testing its own code, and the 
>>serialization
>>from commands to bytes (and the reverse) that AMP does is part of
>>Twisted, so you should really be free from the burden of testing that
>>that stuff works.
>>
>>....
>>
>>Some pieces are probably still missing from the public API - for
>>example, you do want to test that your objects all get properly
>>serialized and deserialized through AMP, particularly if you're
>>implementing custom Argument types.  There are some private APIs,
>>_objectsToStrings and _stringsToObjects mostly, that really help with
>>testing this, and we should think about how to expose this 
>>functionality
>>publically.  Also, we should document this whole pile of stuff.  Maybe
>>you'd be interested in writing something up after you've had a chance 
>>to
>>play with these ideas?
>>
>>Jean-Paul
>
>
>Greetings!
>
>Perhaps I should create a new thread, but I think that my problem could 
>be
>related with this question.
>
>I want to implement master/slave protocol based on AMP, here is a slave 
>side
>code https://github.com/MichaelMayorov/buildbot/compare/fake-master- 
>slave-
>amp
>
>The problem is that I want to pass few arguments to Bot
>https://github.com/MichaelMayorov/buildbot/compare/fake-master-slave-
>amp#L0R38 from this place
>https://github.com/MichaelMayorov/buildbot/compare/fake-master-slave-
>amp#L0R124
>but current implementation not allow me to do this. I've read twisted 
>API
>docs and discussed my idea on #buildbot where finally take advice to 
>post my
>question here.

There are a lot of ways to go about this.  The smallest change required 
to pass an argument to the `Bot` protocol in your code is to use a 
lambda:

    factory = Factory()
    factory.protocol = lambda: Bot(arg1, arg2, ...)

This isn't necessarily the best solution.  Some other options include:

  - use the newly introduced Factory.forProtocol(Bot, arg1, arg2, ...)
  - use connectProtocol(endpoint, Bot(arg1, arg2, ...)) (only slightly 
less new)

Jean-Paul



From glyph at twistedmatrix.com  Wed Jul 17 11:44:05 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 17 Jul 2013 10:44:05 -0700
Subject: [Twisted-Python] Setting socket options before connect
In-Reply-To: <20130715114408.28793.1484770856.divmod.xquotient.663@top>
References: <51DFD9AF.70609@imperial.ac.uk>
 <CAOp9P3p7UYhddDbb91zFav8Hw_E17Zp443KykGhQgQyq8nH+xw@mail.gmail.com>
 <51DFDD8B.6030707@imperial.ac.uk>
 <20130712120943.28793.1298272201.divmod.xquotient.641@top>
 <C529325F-6517-436B-9E19-677A85FB4BBB@twistedmatrix.com>
 <20130715114408.28793.1484770856.divmod.xquotient.663@top>
Message-ID: <90F2544A-F578-4278-AF35-3D8932194A9F@twistedmatrix.com>


On Jul 15, 2013, at 4:44 AM, exarkun at twistedmatrix.com wrote:

> On 01:01 am, glyph at twistedmatrix.com wrote:
>> 
>> On Jul 12, 2013, at 5:09 AM, exarkun at twistedmatrix.com wrote:
>>> On 10:42 am, p.mayers at imperial.ac.uk wrote:
>>>> On 12/07/13 11:34, Itamar Turner-Trauring wrote:
>>>>> Subclass twisted.internet.tcp.Client, override createInternetSocket() so
>>>>> it calls setsockopt() on the socket after you've called base
>>>>> implementation to create it. This breaks some abstraction boundaries, so
>>>>> it isn't great, but very little code duplication is involved.
>>>> 
>>>> Ah, ok. Presumably I also need to subclass Connector and override _makeTransport to use MyClient, then call MyConnector() directly (or subclass the reactor... shudder)
>>>> 
>>>> Should there be something built in to Twisted for this? Should I open a ticket?
>>> 
>>> If you want your code to keep working, or to work with alternate reactor implementations, then you'd *really* rather use a documented, tested interface rather than the hack outlined above.
>> 
>> Does such an API exist today, or should a ticket be filed for one?
> 
> Hm, I'm not *totally* sure what you mean.

Mostly just socratic method: you said "don't do this, do something else", I am just curious what "do something else" is :-).  Given that no documented, tested interfaces actually exist, "use a documented, tested interface" is not presently an option - "create a documented, tested interface" seems to be what you (well, we, really) are suggesting, which means somebody needs to come up with a specification and file a ticket to make the change to Twisted.

> There's the approach Itamar outlined, using APIs such as `twisted.internet.tcp.{Client,Server}`.  I don't think we should codify this as the public, stable, encouraged API to use - for precisely the reasons you give below.

Yup.

> There's various other APIs that are clearly related but definitely don't currently allow you to wedge this functionality in:
> 
> 1) reactor.connectTCP - nowhere to pass extra socket options now, but we could add more arguments to it I suppose.  Doesn't sound very nice to me.

There are two general approaches I can think of here:

 1. pass a callable object to be invoked on the ... socket? transport? ... before connect().  This seems problematic because it could violate lots of assumptions Twisted makes about the socket and create arbitrary I/O problems in the main loop, which won't be reported well.
 2. pass a static description of things to do pre-connect.

To me, 1. analogizes to 'preexec_fn' in subprocess vs. 2. posix_spawn static description of process-state options, which means I like 2. a lot better.  So the question is: is there anything other than setting socket options might want to do pre-connect?  If we can conclusively say not, then I think adding an argument to pass extra socket options seems fine.  If so, then if we can enumerate the other things you might want to do, we could just add arguments for each of them.

> 2) endpoints?  Again, no current support, but it's a place you could add new parameters.  Of course, this isn't a complete solution, since endpoints mostly just use reactor methods to set things up - but if we had a nice endpoints-based API then we could have a gross lower-level API that no one actually has to use.  Still, is "tcp:host=A:port=B:sockopt=TCP_CORK|TCP_QUICKACK" the road we want to go down?

This would still require support from connectTCP anyway, no?  The sockopt:... key is just the, uh, "user interface" (for lack of a better word) for some structured functionality exposed at a lower level.  So... that suggests that it just reverts to case 1.

> 3) More transport methods

That is already supported, in a sense, you can call '.getHandle()' and set socket options on it if you want to be just a little bit platform-specific.  And we have things like setTcpNoDelay already, too, to avoid depending on python socket objects.

> - but this is an incomplete solution, as certain sockopts only make sense before a connection, so once you have a transport it's too late.

Right, it's the timing that seems to be the issue.

> Maybe someone else has some suggestions from a totally different ballpark that solve the problem more pleasantly?

Passing socket options to connectTCP is growing on me, but it sure would be nice to have something nicer.

> Anyhow, I think this certainly means a ticket should be filed for introducing some API - but it seems that a little more discussion about what the API should be will still be necessary.

Agreed.  But then, it's been a couple days and nobody else has contributed to this thread :-).

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130717/80694f8c/attachment-0002.html>

From marchael at ya.ru  Wed Jul 17 14:20:04 2013
From: marchael at ya.ru (MichaelMayorov)
Date: Wed, 17 Jul 2013 20:20:04 +0000 (UTC)
Subject: [Twisted-Python] Passing arguments to protocol instances (was
	Re: Testing AMP-based code)
References: <87zjv4pe0x.fsf@x200s.i-did-not-set--mail-host-address--so-tickle-me>
 <20130612231612.5484.1361672252.divmod.xquotient.46@top>
 <loom.20130716T204922-790@post.gmane.org>
 <20130717111455.28793.1180420774.divmod.xquotient.675@top>
Message-ID: <loom.20130717T221745-46@post.gmane.org>

Great thanks! That helps me a lot!





From jeff at ocjtech.us  Wed Jul 17 18:04:28 2013
From: jeff at ocjtech.us (Jeffrey Ollie)
Date: Wed, 17 Jul 2013 19:04:28 -0500
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
Message-ID: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>

I know that this has been asked before, but it's been a while and I'm
hoping for some good news.  Is there a SQL ORM that works well with
Twisted and PostgreSQL?  In particular I'm hoping to find something
that works with txpostgres as that's the library I prefer to access
the database with.

--
Jeff Ollie



From p.mayers at imperial.ac.uk  Thu Jul 18 04:27:06 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 18 Jul 2013 11:27:06 +0100
Subject: [Twisted-Python] Setting socket options before connect
In-Reply-To: <90F2544A-F578-4278-AF35-3D8932194A9F@twistedmatrix.com>
References: <51DFD9AF.70609@imperial.ac.uk>
 <CAOp9P3p7UYhddDbb91zFav8Hw_E17Zp443KykGhQgQyq8nH+xw@mail.gmail.com>
 <51DFDD8B.6030707@imperial.ac.uk>
 <20130712120943.28793.1298272201.divmod.xquotient.641@top>
 <C529325F-6517-436B-9E19-677A85FB4BBB@twistedmatrix.com>
 <20130715114408.28793.1484770856.divmod.xquotient.663@top>
 <90F2544A-F578-4278-AF35-3D8932194A9F@twistedmatrix.com>
Message-ID: <51E7C2FA.3000408@imperial.ac.uk>

On 17/07/13 18:44, Glyph wrote:

>> Anyhow, I think this certainly means a ticket should be filed for
>> introducing some API - but it seems that a little more discussion
>> about what the API should be will still be necessary.
>
> Agreed.  But then, it's been a couple days and nobody else has
> contributed to this thread :-).

Well, since I started it...

Some kind of endpoint argument might be problematic for some use-cases. 
In particular, Twisted would have to know how to convert the argument 
into the value to pass into setsockopt() and possibly in a 
platform-specific way.

The API as presented also omits the SOL.

I guess it might be ok if there was a way to reliably inject unknown 
options with arbitrary payloads, but I'm struggling to see a clean way 
to do this with a "parse a string"-style API.

So, vote me +0.5 for a "pre-connect" function.

But but but...

It might be possible to sidestep this entire issue by providing a clean 
way for an app to inject itself "above" the socket. I can think of a few 
use-cases for this, most notably things like cmsg/IP_HDRINCL which 
Twisted doesn't know about, and thus can't handle.

So maybe the correct way to handle this is "implement your own FD object"?



From exarkun at twistedmatrix.com  Thu Jul 18 06:10:30 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 18 Jul 2013 12:10:30 -0000
Subject: [Twisted-Python] Setting socket options before connect
In-Reply-To: <51E7C2FA.3000408@imperial.ac.uk>
References: <51DFD9AF.70609@imperial.ac.uk>
 <CAOp9P3p7UYhddDbb91zFav8Hw_E17Zp443KykGhQgQyq8nH+xw@mail.gmail.com>
 <51DFDD8B.6030707@imperial.ac.uk>
 <20130712120943.28793.1298272201.divmod.xquotient.641@top>
 <C529325F-6517-436B-9E19-677A85FB4BBB@twistedmatrix.com>
 <20130715114408.28793.1484770856.divmod.xquotient.663@top>
 <90F2544A-F578-4278-AF35-3D8932194A9F@twistedmatrix.com>
 <51E7C2FA.3000408@imperial.ac.uk>
Message-ID: <20130718121030.28793.406822642.divmod.xquotient.681@top>

On 10:27 am, p.mayers at imperial.ac.uk wrote:
>On 17/07/13 18:44, Glyph wrote:
>>>Anyhow, I think this certainly means a ticket should be filed for
>>>introducing some API - but it seems that a little more discussion
>>>about what the API should be will still be necessary.
>>
>>Agreed.  But then, it's been a couple days and nobody else has
>>contributed to this thread :-).
>
>Well, since I started it...
>
>Some kind of endpoint argument might be problematic for some use-cases. 
>In particular, Twisted would have to know how to convert the argument 
>into the value to pass into setsockopt() and possibly in a platform- 
>specific way.
>
>The API as presented also omits the SOL.

It wasn't so much an API as a "Hey, I have an idea... endpoints... here 
is an example I can think of in 10 seconds." :)
>I guess it might be ok if there was a way to reliably inject unknown 
>options with arbitrary payloads, but I'm struggling to see a clean way 
>to do this with a "parse a string"-style API.

I think you're talking about the fact that "sockopts" are random 
integers associated with other big piles of random integers.  Some of 
them are flags you turn on, but some come with random payloads of 
basically no possible known shape.

It sounds like you're trying to think of an API that will support any 
and all socket options without understanding them.  This API exists 
already.  It is `setsockopt`.  There's no reason to re-invent it.

I prefer the approach taken elsewhere in Twisted, where a particular 
option is given some consideration and an API that understands the 
option is introduced.  This approach certainly has its shortcomings - 
for example, it doesn't support arbitrary options. :)  Do people really 
like using `setsockopt` though?
>
>So, vote me +0.5 for a "pre-connect" function.
>
>But but but...
>
>It might be possible to sidestep this entire issue by providing a clean 
>way for an app to inject itself "above" the socket. I can think of a 
>few use- cases for this, most notably things like cmsg/IP_HDRINCL which 
>Twisted doesn't know about, and thus can't handle.
>
>So maybe the correct way to handle this is "implement your own FD 
>object"?

Nothing stops anyone from doing this already, today.  Except that it's a 
lot of work and no one seems to want any of these features badly enough 
to do it.

Jean-Paul



From p.mayers at imperial.ac.uk  Thu Jul 18 07:09:38 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 18 Jul 2013 14:09:38 +0100
Subject: [Twisted-Python] Setting socket options before connect
In-Reply-To: <20130718121030.28793.406822642.divmod.xquotient.681@top>
References: <51DFD9AF.70609@imperial.ac.uk>
 <CAOp9P3p7UYhddDbb91zFav8Hw_E17Zp443KykGhQgQyq8nH+xw@mail.gmail.com>
 <51DFDD8B.6030707@imperial.ac.uk>
 <20130712120943.28793.1298272201.divmod.xquotient.641@top>
 <C529325F-6517-436B-9E19-677A85FB4BBB@twistedmatrix.com>
 <20130715114408.28793.1484770856.divmod.xquotient.663@top>
 <90F2544A-F578-4278-AF35-3D8932194A9F@twistedmatrix.com>
 <51E7C2FA.3000408@imperial.ac.uk>
 <20130718121030.28793.406822642.divmod.xquotient.681@top>
Message-ID: <51E7E912.7060009@imperial.ac.uk>

On 18/07/13 13:10, exarkun at twistedmatrix.com wrote:

> It wasn't so much an API as a "Hey, I have an idea... endpoints... here
> is an example I can think of in 10 seconds." :)

Understood!

>> I guess it might be ok if there was a way to reliably inject unknown
>> options with arbitrary payloads, but I'm struggling to see a clean way
>> to do this with a "parse a string"-style API.
>
> I think you're talking about the fact that "sockopts" are random
> integers associated with other big piles of random integers.  Some of
> them are flags you turn on, but some come with random payloads of
> basically no possible known shape.

Yep.

> It sounds like you're trying to think of an API that will support any
> and all socket options without understanding them.  This API exists
> already.  It is `setsockopt`.  There's no reason to re-invent it.

Sure.

> I prefer the approach taken elsewhere in Twisted, where a particular
> option is given some consideration and an API that understands the
> option is introduced.  This approach certainly has its shortcomings -
> for example, it doesn't support arbitrary options. :)  Do people really
> like using `setsockopt` though?

No-one "likes" it, but if you need to set a socket option, you don't 
really have much choice (absent a higher-layer API).

>> So maybe the correct way to handle this is "implement your own FD
>> object"?
>
> Nothing stops anyone from doing this already, today.  Except that it's a
> lot of work and no one seems to want any of these features badly enough
> to do it.

Well, exactly. It's currently easier for me to sub-class a Twisted 
internal/private class. But if that goes away, that option is 
unavailable and a replacement would be nice - even if it's a convenience 
API like:

connectExistingSocket(...)

Isn't there code to do this as part of the systemd activation?



From Nick.Johnson at ed.ac.uk  Thu Jul 18 10:59:37 2013
From: Nick.Johnson at ed.ac.uk (Nick Johnson)
Date: Thu, 18 Jul 2013 17:59:37 +0100
Subject: [Twisted-Python] Best way to trigger a future connection with data
Message-ID: <51E81EF9.70405@ed.ac.uk>

Hi,

I'm porting some code to twisted and got a little stuck. The current
(non-twisted) code connects to a server, gives it some data (a job to
do), gets a job-id and then terminates the connection. Sometime later,
it reconnects and gets the output using the job-id.

I've a factory and protocol set up, with buildProtocol over-riden in the
Factory class to supply some extra data to each Protocol instance when
it's created. This is fine when I submit a job as I can call a factory
function to generate the required data (ie the job to do). My problem is
how to initiate a connection at some point in the future AND pass it
some specific info (ie the job-id) for it to pass to the server.

I start the connections using task.callingLoop and reactor.connectTCP so
my first guess was to add: task.callLater(time, reactor.connectTCP, ...)
to the connectionLost method of my Protocol. However, I cannot see how
to pass in any extra information (ie the job-id) this way? I know I can
store state in the Factory, so I guess I just need to know how to pass
this to a scheduled invocation of the Protocol.

Is anyone able to point me in the right direction here?

Cheers,
-Nick.
-- 
Nick Johnson, Applications Developer, EPCC
2407 JCMB, King's Buildings, Mayfield Road, Edinburgh, EH9 3JF
e: Nick.Johnson at ed.ac.uk t: 0131 651 3388

The University of Edinburgh is a charitable body, registered in
Scotland, with registration number SC005336.




From _ at lvh.io  Thu Jul 18 11:07:26 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Thu, 18 Jul 2013 19:07:26 +0200
Subject: [Twisted-Python] Best way to trigger a future connection with
	data
In-Reply-To: <51E81EF9.70405@ed.ac.uk>
References: <51E81EF9.70405@ed.ac.uk>
Message-ID: <CAE_Hg6ZQ62XMbkuxdV0VWALdFUqHT_T9XJyFhGuc2aY0kDKT0A@mail.gmail.com>

Hi Nick,

You're pretty much there already. Instantiate a ClientFactory that holds
all the necessary state. By default, your protocol will have access to that
state through its factory attribute (unless you override the Factory's
buildProtocol method).

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130718/fca838dc/attachment-0002.html>

From exarkun at twistedmatrix.com  Thu Jul 18 11:09:12 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 18 Jul 2013 17:09:12 -0000
Subject: [Twisted-Python] Setting socket options before connect
In-Reply-To: <51E7E912.7060009@imperial.ac.uk>
References: <51DFD9AF.70609@imperial.ac.uk>
 <CAOp9P3p7UYhddDbb91zFav8Hw_E17Zp443KykGhQgQyq8nH+xw@mail.gmail.com>
 <51DFDD8B.6030707@imperial.ac.uk>
 <20130712120943.28793.1298272201.divmod.xquotient.641@top>
 <C529325F-6517-436B-9E19-677A85FB4BBB@twistedmatrix.com>
 <20130715114408.28793.1484770856.divmod.xquotient.663@top>
 <90F2544A-F578-4278-AF35-3D8932194A9F@twistedmatrix.com>
 <51E7C2FA.3000408@imperial.ac.uk>
 <20130718121030.28793.406822642.divmod.xquotient.681@top>
 <51E7E912.7060009@imperial.ac.uk>
Message-ID: <20130718170912.28793.1063604422.divmod.xquotient.688@top>

On 01:09 pm, p.mayers at imperial.ac.uk wrote:
>On 18/07/13 13:10, exarkun at twistedmatrix.com wrote:
>>I prefer the approach taken elsewhere in Twisted, where a particular
>>option is given some consideration and an API that understands the
>>option is introduced.  This approach certainly has its shortcomings -
>>for example, it doesn't support arbitrary options. :)  Do people 
>>really
>>like using `setsockopt` though?
>
>No-one "likes" it, but if you need to set a socket option, you don't 
>really have much choice (absent a higher-layer API).

Glad to hear it is universally reviled. ;)

To be a bit more explicit, I think it's worth considering particular 
socket options individually and introducing high-level APIs for dealing 
with them.  They don't get requested too often, so even though it's kind 
of labor intensive it still might not be overwhelming.
>>>So maybe the correct way to handle this is "implement your own FD
>>>object"?
>>
>>Nothing stops anyone from doing this already, today.  Except that it's 
>>a
>>lot of work and no one seems to want any of these features badly 
>>enough
>>to do it.
>
>Well, exactly. It's currently easier for me to sub-class a Twisted 
>internal/private class. But if that goes away, that option is 
>unavailable and a replacement would be nice - even if it's a 
>convenience API like:
>
>connectExistingSocket(...)
>
>Isn't there code to do this as part of the systemd activation?

I really wanted to suggest something along those lines.  The current 
code has the limitation that it will only accept an *already* connected 
socket.  There isn't something that will accept a socket and then do the 
connection part for you.

Maybe `connectExistingSocket` could still leverage this code somehow to 
simplify its implementation, though.

Jean-Paul



From glyph at twistedmatrix.com  Thu Jul 18 11:08:07 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 18 Jul 2013 10:08:07 -0700
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
Message-ID: <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>


On Jul 17, 2013, at 5:04 PM, Jeffrey Ollie <jeff at ocjtech.us> wrote:

> I know that this has been asked before, but it's been a while and I'm
> hoping for some good news.  Is there a SQL ORM that works well with
> Twisted and PostgreSQL?  In particular I'm hoping to find something
> that works with txpostgres as that's the library I prefer to access
> the database with.

There's bits of one in Calendar Server: <http://trac.calendarserver.org/browser/CalendarServer/trunk/twext/enterprise/dal/record.py>  It doesn't use txpostgres, but that's because it relies on adbapi2 (also in calendar server, hopefully to be moved into Twisted at some point).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130718/cd2033dc/attachment-0002.html>

From haggardii at gmail.com  Thu Jul 18 15:20:46 2013
From: haggardii at gmail.com (Matt Haggard)
Date: Thu, 18 Jul 2013 15:20:46 -0600
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL
Message-ID: <CAL+xXwN4jRWAX1DLJDna-1fbWE58P006M4gRNu6yUVha6nR_0A@mail.gmail.com>

> On Jul 17, 2013, at 5:04 PM, Jeffrey Ollie <jeff at ocjtech.us> wrote:

>
> > I know that this has been asked before, but it's been a while and I'm
> > hoping for some good news.  Is there a SQL ORM that works well with
> > Twisted and PostgreSQL?  In particular I'm hoping to find something
> > that works with txpostgres as that's the library I prefer to access
> > the database with.
>
> There's bits of one in Calendar Server: <http://trac.calendarserver.org/browser/CalendarServer/trunk/twext/enterprise/dal/record.py>  It doesn't use txpostgres, but that's because it relies on adbapi2 (also in calendar server, hopefully to be moved into Twisted at some point).
>
> -glyph

I've made a thing that has a similar API to txpostgres and will use
txpostgres underneath if it's installed:

https://github.com/iffy/norm

I welcome feedback/patches.

- Matt Haggard

(I wasn't on the mailing list when the original message was sent, so
this "reply" may not appear quite correctly)



From hs at ox.cx  Fri Jul 19 01:06:23 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Fri, 19 Jul 2013 09:06:23 +0200
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
Message-ID: <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>

Hi,

>> I know that this has been asked before, but it's been a while and I'm
>> hoping for some good news.  Is there a SQL ORM that works well with
>> Twisted and PostgreSQL?  In particular I'm hoping to find something
>> that works with txpostgres as that's the library I prefer to access
>> the database with.
> 
> There's bits of one in Calendar Server: <http://trac.calendarserver.org/browser/CalendarServer/trunk/twext/enterprise/dal/record.py>  It doesn't use txpostgres, but that's because it relies on adbapi2 (also in calendar server, hopefully to be moved into Twisted at some point).

How would you feel about packaging it up on PyPI so people can try it out effortlessly? What do Apple’s licenses say about that? Yes, I’m volunteering.

Cheers,
Hynek

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130719/8205e6d7/attachment-0002.html>

From Nick.Johnson at ed.ac.uk  Fri Jul 19 02:19:26 2013
From: Nick.Johnson at ed.ac.uk (Nick Johnson)
Date: Fri, 19 Jul 2013 09:19:26 +0100
Subject: [Twisted-Python] Best way to trigger a future connection with
 data
In-Reply-To: <CAE_Hg6ZQ62XMbkuxdV0VWALdFUqHT_T9XJyFhGuc2aY0kDKT0A@mail.gmail.com>
References: <51E81EF9.70405@ed.ac.uk>
 <CAE_Hg6ZQ62XMbkuxdV0VWALdFUqHT_T9XJyFhGuc2aY0kDKT0A@mail.gmail.com>
Message-ID: <51E8F68E.2030700@ed.ac.uk>

Thanks lvh,

I did have to override the buildProtocol method in the Factory but I
then set Protocol.factory to be equal to the Factory (ie,
myprotocol.factory=self).

I'm still stuck however with what to do when I get more complex than
this simple case. For example, I use a callingLoop to call multiple
connections with a 0.1 second interval to launch jobs and each of those
connections does as mentioned by setting up a future connection to
retrieve the output, say 10 seconds later. There is going to be some
overlap, ie I might have launched 100 new jobs before the first one
fires it's task.callLater.

Storing state in the factory class doesn't work in this case because
each new connection wont know whether to initiate a job or retrieve
output as I cannot pass it this extra information.

Cheers,
-Nick.


On 18/07/13 18:07, Laurens Van Houtven wrote:
> Hi Nick,
> 
> You're pretty much there already. Instantiate a ClientFactory that holds
> all the necessary state. By default, your protocol will have access to
> that state through its factory attribute (unless you override the
> Factory's buildProtocol method).
> 
> cheers
> lvh

-- 
The University of Edinburgh is a charitable body, registered in
Scotland, with registration number SC005336.




From _ at lvh.io  Fri Jul 19 02:21:01 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Fri, 19 Jul 2013 10:21:01 +0200
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
 <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
Message-ID: <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>

On Fri, Jul 19, 2013 at 9:06 AM, Hynek Schlawack <hs at ox.cx> wrote:
>
> How would you feel about packaging it up on PyPI so people can try it out
> effortlessly? What do Apple’s licenses say about that? Yes, I’m
> volunteering.
>

It seems it's released under the ASL2. I don't know if Apple prevents *its*
employees from doing anything in particular, but it seems like third party
contributors are free to do with it as they please (within the limits of
the license, of course).

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130719/c361d752/attachment-0002.html>

From _ at lvh.io  Fri Jul 19 02:25:15 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Fri, 19 Jul 2013 10:25:15 +0200
Subject: [Twisted-Python] Best way to trigger a future connection with
	data
In-Reply-To: <51E8F68E.2030700@ed.ac.uk>
References: <51E81EF9.70405@ed.ac.uk>
 <CAE_Hg6ZQ62XMbkuxdV0VWALdFUqHT_T9XJyFhGuc2aY0kDKT0A@mail.gmail.com>
 <51E8F68E.2030700@ed.ac.uk>
Message-ID: <CAE_Hg6b+NXWEaE1cQoh_9ag4R9_EjJEfFRaogYzK=RpHR=+GUA@mail.gmail.com>

On Fri, Jul 19, 2013 at 10:19 AM, Nick Johnson <Nick.Johnson at ed.ac.uk>wrote:

> Thanks lvh,
>
> I did have to override the buildProtocol method in the Factory but I
> then set Protocol.factory to be equal to the Factory (ie,
> myprotocol.factory=self).
>

You could (perhaps should) do this by calling
ClientFactory.buildProtocol(self, addr).


> I'm still stuck however with what to do when I get more complex than
> this simple case. For example, I use a callingLoop to call multiple
> connections with a 0.1 second interval to launch jobs and each of those
> connections does as mentioned by setting up a future connection to
> retrieve the output, say 10 seconds later. There is going to be some
> overlap, ie I might have launched 100 new jobs before the first one
> fires it's task.callLater.
>
> Storing state in the factory class doesn't work in this case because
> each new connection wont know whether to initiate a job or retrieve
> output as I cannot pass it this extra information.
>

I don't understand why not. Could you elaborate?

Either way, it seems to me that the API should be:

d = scheduleJob()
d.addCallback(getJob)

That is: only get the job once it has been scheduled. getJob would probably
have to be split up into something that delays (consider delayLater), and
something that actually gets the job.

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130719/2d1407a6/attachment-0002.html>

From Nick.Johnson at ed.ac.uk  Fri Jul 19 03:03:20 2013
From: Nick.Johnson at ed.ac.uk (Nick Johnson)
Date: Fri, 19 Jul 2013 10:03:20 +0100
Subject: [Twisted-Python] Best way to trigger a future connection with
 data
In-Reply-To: <CAE_Hg6b+NXWEaE1cQoh_9ag4R9_EjJEfFRaogYzK=RpHR=+GUA@mail.gmail.com>
References: <51E81EF9.70405@ed.ac.uk>
 <CAE_Hg6ZQ62XMbkuxdV0VWALdFUqHT_T9XJyFhGuc2aY0kDKT0A@mail.gmail.com>
 <51E8F68E.2030700@ed.ac.uk>
 <CAE_Hg6b+NXWEaE1cQoh_9ag4R9_EjJEfFRaogYzK=RpHR=+GUA@mail.gmail.com>
Message-ID: <51E900D8.2070205@ed.ac.uk>

Here's a cut-down version of the code which might be more illustrative:


class MyProtocol(Protocol):
    def __init__(self, s, d):
	<some init>

    def dataReceived(self, data):
	<do stuff with data>

    def connectionLost(self, reason):
        reactor.callLater(10, ...)

    def connectionMade(self):
        self.transport.write(...)
        self.transport.loseWriteConnection()

class MyFactory(ClientFactory):
    def __init__(self, src, dst, interval, type_req):
        self.s = src
        self.d = dst

    def buildProtocol(self, addr):
        p = MyProtocol(self.s, self.d)
        p.factory = self
        return p

if __name__ == '__main__':
    f = MyFactory("10", "20", 1, 1)
    l = task.LoopingCall(reactor.connectTCP ... f)
    l.start(.1)
    task.callLater(20, reactor.stop())
    reactor.run()

So, each call from task.LoopingCall sets up a new connection which then
starts a job. When that connection has finished, the protocol instance
disappears. I can store the data it received in a structure in the
Factory, no problems there.

I have to call transport.loseWriteConnection() in order to get data from
the server (I've no control over this).

The problem comes when the delayed connection is started. This will (in
my mind) create a new instance of MyProtocol by calling the
buildProtocol method of the Factory. Without any additional input, it
wont know what to do, start a new job or retrieve one from the server.
I've tried thinking about callbacks and deferreds but still get stuck
with the same problem of how to instruct a particular instance of
MyProtocol to either launch or retrieve a job.


Cheers,
-Nick.


On 19/07/13 09:25, Laurens Van Houtven wrote:
> On Fri, Jul 19, 2013 at 10:19 AM, Nick Johnson
> <Nick.Johnson at ed.ac.uk <mailto:Nick.Johnson at ed.ac.uk>> wrote:
> 
> Thanks lvh,
> 
> I did have to override the buildProtocol method in the Factory but I 
> then set Protocol.factory to be equal to the Factory (ie, 
> myprotocol.factory=self).
> 
> 
> You could (perhaps should) do this by calling 
> ClientFactory.buildProtocol(self, addr).
> 
> 
> I'm still stuck however with what to do when I get more complex than 
> this simple case. For example, I use a callingLoop to call multiple 
> connections with a 0.1 second interval to launch jobs and each of
> those connections does as mentioned by setting up a future connection
> to retrieve the output, say 10 seconds later. There is going to be
> some overlap, ie I might have launched 100 new jobs before the first
> one fires it's task.callLater.
> 
> Storing state in the factory class doesn't work in this case because 
> each new connection wont know whether to initiate a job or retrieve 
> output as I cannot pass it this extra information.
> 
> 
> I don't understand why not. Could you elaborate?
> 
> Either way, it seems to me that the API should be:
> 
> d = scheduleJob() d.addCallback(getJob)
> 
> That is: only get the job once it has been scheduled. getJob would 
> probably have to be split up into something that delays (consider 
> delayLater), and something that actually gets the job.
> 
> cheers lvh

-- 
The University of Edinburgh is a charitable body, registered in
Scotland, with registration number SC005336.




From _ at lvh.io  Fri Jul 19 07:52:14 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Fri, 19 Jul 2013 15:52:14 +0200
Subject: [Twisted-Python] Best way to trigger a future connection with
	data
In-Reply-To: <51E900D8.2070205@ed.ac.uk>
References: <51E81EF9.70405@ed.ac.uk>
 <CAE_Hg6ZQ62XMbkuxdV0VWALdFUqHT_T9XJyFhGuc2aY0kDKT0A@mail.gmail.com>
 <51E8F68E.2030700@ed.ac.uk>
 <CAE_Hg6b+NXWEaE1cQoh_9ag4R9_EjJEfFRaogYzK=RpHR=+GUA@mail.gmail.com>
 <51E900D8.2070205@ed.ac.uk>
Message-ID: <CAE_Hg6bxRf0wJ8zacJNTWgFb3UkDix2Pe2PNis+2Vjqnb7Z19g@mail.gmail.com>

Hi Nick,


Okay, question and code review time. Why are source and destination
arguments to the protocol? Can't they just access it on the factory?

It seems that the factory initiates many connections with the same
parameters. Is that true? Does it only ever make sense to use the factory
to fire many requests?

Anyway, the biggest issue seems to be that you're stuck on trying to do
everything with one protocol; it might make total sense for you to have a
job-queueing and a job-getting protocol :)

Can you explain what the interval and type_req arguments are, and why
they're passed to the factory?

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130719/8a9cff5c/attachment-0002.html>

From _ at lvh.io  Fri Jul 19 08:02:33 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Fri, 19 Jul 2013 16:02:33 +0200
Subject: [Twisted-Python] Best way to trigger a future connection with
	data
In-Reply-To: <CAE_Hg6bxRf0wJ8zacJNTWgFb3UkDix2Pe2PNis+2Vjqnb7Z19g@mail.gmail.com>
References: <51E81EF9.70405@ed.ac.uk>
 <CAE_Hg6ZQ62XMbkuxdV0VWALdFUqHT_T9XJyFhGuc2aY0kDKT0A@mail.gmail.com>
 <51E8F68E.2030700@ed.ac.uk>
 <CAE_Hg6b+NXWEaE1cQoh_9ag4R9_EjJEfFRaogYzK=RpHR=+GUA@mail.gmail.com>
 <51E900D8.2070205@ed.ac.uk>
 <CAE_Hg6bxRf0wJ8zacJNTWgFb3UkDix2Pe2PNis+2Vjqnb7Z19g@mail.gmail.com>
Message-ID: <CAE_Hg6Z+50df=94Sd5mcubG_rc74oa_w04D_Xh0_T5dKCYc=YQ@mail.gmail.com>

Hi Nick,


I was thinking something along these lines:
https://gist.github.com/lvh/67c64042a2be06b7bf7a

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130719/b44b9ce2/attachment-0002.html>

From tom.prince at ualberta.net  Fri Jul 19 11:41:00 2013
From: tom.prince at ualberta.net (Tom Prince)
Date: Fri, 19 Jul 2013 11:41:00 -0600
Subject: [Twisted-Python] July Report
Message-ID: <87ob9ysb0z.fsf@loki.hocat.ca>

http://labs.twistedmatrix.com/2013/07/july-report.html

This will be my last report, until the beginning of September. I have,
for many years, been a volunteer at the Edmonton Folk Music
Festival[1]. For the next month, I will be busy setting it up (and then
taking it down, and so will not have time to devote to twisted.

This month, 23 tickets got some attention that they would not have
received without the sponsored development.  The result was 5 closed
tickets and 11 other tickets unblocked for other developers to resume
work on.

This month, I made a number of improvements to the buildobt:
 - Switched most of the buildslaves to use git to checkout the source.
 - All the git-using builders merge to trunk, before running tests, so
   the tests results reflect the code as it would be merged. In
   particular, all the lint steps should now accurately report only
   the regressions relative to current trunk of the merged result.
 - I added a bunch of new builders on VMs provided by Rackspace[1]
   (thanks to Jesse Noller[3]) and the Fedora Project[4] (thanks to
   Seth Vidal[5]). These cover all recent versions of Debian, Fedora,
   Ubuntu and RHEL. As part of this, I automated the deployment of
   buildslaves, (currently only Debian and Fedora derivatives are
   supported).

This work is made possible by the sponsorship of individuals and
organizations which have donated to the Twisted project, part of the
Software Freedom Conservancy, a not-for-profit organization that helps
promote, improve, and develop open source software.  Thanks!

The tickets I reviewed, that have now been closed:
- #5574: Add support for SOCK_DGRAM to IReactorSocket
- #6221: Replace Deprecated Test Case Assertion Methods in twisted.internet
- #6393: Utility function to pretty-format list of things
- #6475: FileAuthority._lookup incorrectly returns AuthoritativeDomainError for non-subdomain names which happen to share the same suffix as the zone (eg the-example.com and example.com)
- #6572: twisted.mail.smtp.sendmail should return a cancellable Deferred

Other tickets I have reviewed:
- #2699: UDP DatagramProtocol reconnecting
- #3926: twisted.positioning -- a better positioning framework
- #4173: WebSocket server support
- #4735: Implement something like ReconnectingClientFactory for endpoints
- #5001: replace call to functions from the string module in twisted.scripts.tap2deb
- #5004: replace call to functions from the string module in web
- #5685: SMTP Client Tutorial should be self-contained
- #6556: LineReceiver rejects lines of length MAX_LENGTH sometimes
- #6557: LineOnlyReceiver doesn't disconnect the transport when it detects an overlarge line
- #6558: LineOnlyReceiver doesn't pass the entire contents of its buffer to lineLengthExceeded()
- #6580: twisted.names.server.DNSServerFactory should query child zones before parent zones

Tickets I have worked on:
- #5513: Detailed documentation on Proxy by adding docstrings to many of the methods.
- #6537: Update coding-standard to reflect that documentation should be sentence per line.
- #6620: Document conventions for writting test assertions.
- #6626: Remove all uses of deferredGenerator.


[1]: http://www.edmontonfolkfest.org/
[2]: https://www.rackspace.com/
[3]: https://twitter.com/jessenoller/status/355453772803211264
[4]: https://fedoraproject.org/
[5]: https://www.redhat.com/about/news/archive/2013/7/thank-you-seth-vidal



From termim at gmail.com  Fri Jul 19 19:35:05 2013
From: termim at gmail.com (Mikhail Terekhov)
Date: Fri, 19 Jul 2013 21:35:05 -0400
Subject: [Twisted-Python] Setting socket options before connect
In-Reply-To: <20130718170912.28793.1063604422.divmod.xquotient.688@top>
References: <51DFD9AF.70609@imperial.ac.uk>
 <CAOp9P3p7UYhddDbb91zFav8Hw_E17Zp443KykGhQgQyq8nH+xw@mail.gmail.com>
 <51DFDD8B.6030707@imperial.ac.uk>
 <20130712120943.28793.1298272201.divmod.xquotient.641@top>
 <C529325F-6517-436B-9E19-677A85FB4BBB@twistedmatrix.com>
 <20130715114408.28793.1484770856.divmod.xquotient.663@top>
 <90F2544A-F578-4278-AF35-3D8932194A9F@twistedmatrix.com>
 <51E7C2FA.3000408@imperial.ac.uk>
 <20130718121030.28793.406822642.divmod.xquotient.681@top>
 <51E7E912.7060009@imperial.ac.uk>
 <20130718170912.28793.1063604422.divmod.xquotient.688@top>
Message-ID: <CALCsMPQokDOVDSurKz+4-_eUVBpPxQ1hV9FpSW9s0Wh3dOpQkA@mail.gmail.com>

On Thu, Jul 18, 2013 at 1:09 PM, <exarkun at twistedmatrix.com> wrote:

> On 01:09 pm, p.mayers at imperial.ac.uk wrote:
>
...

> Well, exactly. It's currently easier for me to sub-class a Twisted
>> internal/private class. But if that goes away, that option is unavailable
>> and a replacement would be nice - even if it's a convenience API like:
>>
>
>> connectExistingSocket(...)
>>
>> Isn't there code to do this as part of the systemd activation?
>>
>
> I really wanted to suggest something along those lines.  The current code
> has the limitation that it will only accept an *already* connected socket.
>  There isn't something that will accept a socket and then do the connection
> part for you.


Sorry it is not exactly about the subject, but what is the current API that
accepts already connected socket?
Some time ago I was looking for such an API without success (probably not
very hard though).
-- 
Mikhail Terekhov
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130719/37d7137a/attachment-0002.html>

From burak at nehbit.net  Sat Jul 20 06:04:38 2013
From: burak at nehbit.net (Burak Nehbit)
Date: Sat, 20 Jul 2013 15:04:38 +0300
Subject: [Twisted-Python] Twisted and Qt5
Message-ID: <56C3E30F-2268-4788-A1F3-10EB2AFDA1BA@nehbit.net>

Hi,

I have a question and a general guidance request on handling Qt and Twisted together. This is nearly as much a Qt question as it is a Twisted one, so I apologise in advance if this is off–topic.

To give a little bit of a background, I am building a desktop GUI application which I am coding using Python and Javascript. The back–end is Python, which makes use of SQLAlchemy, Twisted and several other Python frameworks. The GUI is in Qt, currently linked to Python with PyQt, but I will probably replace it with PySide before release. I am using Qt to draw a QtWebkit frame, in which I run Angular JS to serve up my visual interface, plus a host of other data presentation logic. 

Which is, it turns out, quite an impasse, because if I use Qt4, the GUI of my application renders in … 12 seconds. Qt5 and its version of QtWebkit loads the same thing in 300 milliseconds. I am therefore forced to use Qt5. This is how I end up with an application where both Twisted and Qt5 are essential requirements. Now, my questions are these:

1) I know there is a Qt4 reactor (which I managed to get to work and pass the twisted test suite) for Twisted. Is there such a thing for Qt5? Is it planned? 

2) In the case it's not, are there any alternatives to having a Qt5 reactor? My Twisted knowledge is still woefully inexact (I'm still reading the Twisted book), so I am not very well versed on alternative ways to accomplish this. The one way I can see is to modify the Twisted Qt4 reactor to work with Qt5, but I have almost no knowledge of C++, so this seems far–fetched.

This is my only unsolved question about my application— a project of love and learning rather than a commercial one—so if I can figure this out, I'll be well on my way. In case there is nothing to be done about this and a Qt5 reactor is an imperative, I would be willing to finance this to the best of my ability; I'm a student, but I can try to pay whatever is needed to have this reactor done, open sourced—and added to Twisted core, if desired. If there is such a project on its way, I can be a tester. If nobody is interested I would be very happy if you could give me a lead on how to make my own reactor; if I succeed I can release it as open source. Likely I am not a programmer good enough to make that happen, though! 

Qt is pretty much the only decent GUI framework in existence and almost the only way to have a Python application with a web–stack GUI, which is one of the most popular ways desktop applications are designed these days. If you know of another way to run Webkit as a Python GUI, I'd love to hear that too, but to the extent of my research this looks impossible without Qt. 

Thanks!

Best,
Burak


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130720/72fd3e6c/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4343 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20130720/72fd3e6c/attachment-0002.bin>

From itamar at itamarst.org  Sat Jul 20 06:44:19 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sat, 20 Jul 2013 08:44:19 -0400
Subject: [Twisted-Python] Twisted and Qt5
In-Reply-To: <56C3E30F-2268-4788-A1F3-10EB2AFDA1BA@nehbit.net>
References: <56C3E30F-2268-4788-A1F3-10EB2AFDA1BA@nehbit.net>
Message-ID: <51EA8623.4010307@itamarst.org>

On 07/20/2013 08:04 AM, Burak Nehbit wrote:
>
> 1) I know there is a Qt4 reactor 
> <https://github.com/ghtdak/qtreactor> (which I managed to get to work 
> and pass the twisted test suite) for Twisted. Is there such a thing 
> for Qt5? Is it planned?
Have the Qt APIs changed enough that you can't just use the qt4 reactor 
with qt5?



From burak at nehbit.net  Sat Jul 20 06:50:05 2013
From: burak at nehbit.net (Burak Nehbit)
Date: Sat, 20 Jul 2013 05:50:05 -0700 (PDT)
Subject: [Twisted-Python] Twisted and Qt5
In-Reply-To: <51EA8623.4010307@itamarst.org>
References: <51EA8623.4010307@itamarst.org>
Message-ID: <1374324604160.1dab1bad@Nodemailer>

There are significant changes in the signalling mechanisms in Qt5, but I have not tried yet. I'll try quite soon and return with my findings, but with the little knowledge I have, I would say it might be unlikely that it works without modification.
—
Sent from my phone

On Sat, Jul 20, 2013 at 3:46 PM, Itamar Turner-Trauring
<itamar at itamarst.org> wrote:

> On 07/20/2013 08:04 AM, Burak Nehbit wrote:
>>
>> 1) I know there is a Qt4 reactor 
>> <https://github.com/ghtdak/qtreactor> (which I managed to get to work 
>> and pass the twisted test suite) for Twisted. Is there such a thing 
>> for Qt5? Is it planned?
> Have the Qt APIs changed enough that you can't just use the qt4 reactor 
> with qt5?
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130720/35275279/attachment-0002.html>

From exarkun at twistedmatrix.com  Sat Jul 20 13:03:24 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 20 Jul 2013 19:03:24 -0000
Subject: [Twisted-Python] adoptStreamConnection (was Re: Setting socket
 options before connect)
In-Reply-To: <CALCsMPQokDOVDSurKz+4-_eUVBpPxQ1hV9FpSW9s0Wh3dOpQkA@mail.gmail.com>
References: <51DFD9AF.70609@imperial.ac.uk>
 <CAOp9P3p7UYhddDbb91zFav8Hw_E17Zp443KykGhQgQyq8nH+xw@mail.gmail.com>
 <51DFDD8B.6030707@imperial.ac.uk>
 <20130712120943.28793.1298272201.divmod.xquotient.641@top>
 <C529325F-6517-436B-9E19-677A85FB4BBB@twistedmatrix.com>
 <20130715114408.28793.1484770856.divmod.xquotient.663@top>
 <90F2544A-F578-4278-AF35-3D8932194A9F@twistedmatrix.com>
 <51E7C2FA.3000408@imperial.ac.uk>
 <20130718121030.28793.406822642.divmod.xquotient.681@top>
 <51E7E912.7060009@imperial.ac.uk>
 <20130718170912.28793.1063604422.divmod.xquotient.688@top>
 <CALCsMPQokDOVDSurKz+4-_eUVBpPxQ1hV9FpSW9s0Wh3dOpQkA@mail.gmail.com>
Message-ID: <20130720190324.28793.1050658495.divmod.xquotient.695@top>

On 01:35 am, termim at gmail.com wrote:
>
>Sorry it is not exactly about the subject, but what is the current API 
>that
>accepts already connected socket?
>Some time ago I was looking for such an API without success (probably 
>not
>very hard though).

IReactorSocket.adoptStreamConnection was recently added:

http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReactorSocket.html

Jean-Paul



From Nick.Johnson at ed.ac.uk  Mon Jul 22 02:40:14 2013
From: Nick.Johnson at ed.ac.uk (Nick Johnson)
Date: Mon, 22 Jul 2013 09:40:14 +0100
Subject: [Twisted-Python] Best way to trigger a future connection with
 data
In-Reply-To: <CAE_Hg6bxRf0wJ8zacJNTWgFb3UkDix2Pe2PNis+2Vjqnb7Z19g@mail.gmail.com>
References: <51E81EF9.70405@ed.ac.uk>
 <CAE_Hg6ZQ62XMbkuxdV0VWALdFUqHT_T9XJyFhGuc2aY0kDKT0A@mail.gmail.com>
 <51E8F68E.2030700@ed.ac.uk>
 <CAE_Hg6b+NXWEaE1cQoh_9ag4R9_EjJEfFRaogYzK=RpHR=+GUA@mail.gmail.com>
 <51E900D8.2070205@ed.ac.uk>
 <CAE_Hg6bxRf0wJ8zacJNTWgFb3UkDix2Pe2PNis+2Vjqnb7Z19g@mail.gmail.com>
Message-ID: <51ECEFEE.105@ed.ac.uk>

Hi,

Firstly, thanks for this gist, I had done a few experiments using
endpoints and I think this is definitely the way to go for this code.

As to the questions: source and destination are parameters for the job
and might change between runs (a function I didn't include for brevity
handles computation of these). Interval was to be the time passed to
LoopingCall and type_req was another job parameter.

I agree that, having looked at the gist, trying to pack everything into
one Protocol was not the best way to go and using a separate protocol
for each type of communication (ie, getjob, retrievejob) is more sensible.

Thanks for helping me out with this, Twisted is slowly starting to make
sense now.

Cheers,
-Nick.


On 19/07/13 14:52, Laurens Van Houtven wrote:
> Hi Nick,
> 
> 
> Okay, question and code review time. Why are source and destination
> arguments to the protocol? Can't they just access it on the factory?
> 
> It seems that the factory initiates many connections with the same
> parameters. Is that true? Does it only ever make sense to use the
> factory to fire many requests?
> 
> Anyway, the biggest issue seems to be that you're stuck on trying to do
> everything with one protocol; it might make total sense for you to have
> a job-queueing and a job-getting protocol :)
> 
> Can you explain what the interval and type_req arguments are, and why
> they're passed to the factory?
> 
> cheers
> lvh
> 

-- 
The University of Edinburgh is a charitable body, registered in
Scotland, with registration number SC005336.




From _ at lvh.io  Mon Jul 22 04:07:15 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Mon, 22 Jul 2013 12:07:15 +0200
Subject: [Twisted-Python] Best way to trigger a future connection with
	data
In-Reply-To: <51ECEFEE.105@ed.ac.uk>
References: <51E81EF9.70405@ed.ac.uk>
 <CAE_Hg6ZQ62XMbkuxdV0VWALdFUqHT_T9XJyFhGuc2aY0kDKT0A@mail.gmail.com>
 <51E8F68E.2030700@ed.ac.uk>
 <CAE_Hg6b+NXWEaE1cQoh_9ag4R9_EjJEfFRaogYzK=RpHR=+GUA@mail.gmail.com>
 <51E900D8.2070205@ed.ac.uk>
 <CAE_Hg6bxRf0wJ8zacJNTWgFb3UkDix2Pe2PNis+2Vjqnb7Z19g@mail.gmail.com>
 <51ECEFEE.105@ed.ac.uk>
Message-ID: <CAE_Hg6Y+-5zaF-SnTTRLdREDWNdB1-Y6PJasz5Ap1s9E3UJ3Hw@mail.gmail.com>

Hi Nick

On Mon, Jul 22, 2013 at 10:40 AM, Nick Johnson <Nick.Johnson at ed.ac.uk>wrote:

> Hi,
>
> Firstly, thanks for this gist, I had done a few experiments using
> endpoints and I think this is definitely the way to go for this code.
>

Welcome :)


> As to the questions: source and destination are parameters for the job
> and might change between runs (a function I didn't include for brevity
> handles computation of these). Interval was to be the time passed to
> LoopingCall and type_req was another job parameter.
>
> I agree that, having looked at the gist, trying to pack everything into
> one Protocol was not the best way to go and using a separate protocol
> for each type of communication (ie, getjob, retrievejob) is more sensible.
>

For what it's worth: a protocol implementing all of these might make even
more sense if you have some functions as the high level API (like the ones
I wrote in the gist): the functions could call high level methods on the
protocol that cause it to do certain things.

As an example, consider the IRCClient protocol:
https://twistedmatrix.com/documents/current/api/twisted.words.protocols.irc.IRCClient.html

... which has methods like "join", "leave", "say", "message"...


> Thanks for helping me out with this, Twisted is slowly starting to make
> sense now.
>
> Cheers,
> -Nick.
>
>
> On 19/07/13 14:52, Laurens Van Houtven wrote:
> > Hi Nick,
> >
> >
> > Okay, question and code review time. Why are source and destination
> > arguments to the protocol? Can't they just access it on the factory?
> >
> > It seems that the factory initiates many connections with the same
> > parameters. Is that true? Does it only ever make sense to use the
> > factory to fire many requests?
> >
> > Anyway, the biggest issue seems to be that you're stuck on trying to do
> > everything with one protocol; it might make total sense for you to have
> > a job-queueing and a job-getting protocol :)
> >
> > Can you explain what the interval and type_req arguments are, and why
> > they're passed to the factory?
> >
> > cheers
> > lvh
> >
>
> --
> The University of Edinburgh is a charitable body, registered in
> Scotland, with registration number SC005336.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130722/a43e8f6d/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Jul 22 15:37:16 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 22 Jul 2013 14:37:16 -0700
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
 <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
 <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>
Message-ID: <5AF6C57C-90F9-4132-97CE-5E9D407320E8@twistedmatrix.com>


On Jul 19, 2013, at 1:21 AM, Laurens Van Houtven <_ at lvh.io> wrote:

> On Fri, Jul 19, 2013 at 9:06 AM, Hynek Schlawack <hs at ox.cx> wrote:
> How would you feel about packaging it up on PyPI so people can try it out effortlessly? What do Apple’s licenses say about that? Yes, I’m volunteering.
>  
> It seems it's released under the ASL2. I don't know if Apple prevents *its* employees from doing anything in particular, but it seems like third party contributors are free to do with it as they please (within the limits of the license, of course). 

There are actually bits of this that I've been meaning to contribute back for a long time.  If somebody would like to help me out with it then maybe I can eke out a little bit of time to do it - I've just been pretty busy :-).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130722/604958b5/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Jul 22 15:43:54 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 22 Jul 2013 14:43:54 -0700
Subject: [Twisted-Python] Twisted and Qt5
In-Reply-To: <56C3E30F-2268-4788-A1F3-10EB2AFDA1BA@nehbit.net>
References: <56C3E30F-2268-4788-A1F3-10EB2AFDA1BA@nehbit.net>
Message-ID: <3F8D63C2-81B5-4240-AB43-B30F5F75668E@twistedmatrix.com>


On Jul 20, 2013, at 5:04 AM, Burak Nehbit <burak at nehbit.net> wrote:

> Is there such a thing for Qt5? Is it planned?

Well, it sounds like you're planning it, so, I guess so :).

I doubt that anyone on this list has plans to do it (or there would already be work qt5 work done in the qt reactor repository) but there are plenty of people (myself included) who would be very happy to help you learn enough about Twisted to do it yourself.  And, honestly, if you're motivated to do it it's probably *not* a huge amount of effort to update the implementation.  Feel free to ask any questions you have on this list.

In the meanwhile though, maybe you could report a bug to Nokia or Trolltech or whoever runs Qt development right now that they should stop gratuitously breaking interfaces between versions?  We've had (at least one) major rewrite of the Qt reactor for every version of Qt, which seem to come out relatively frequently.  Nothing about the nature of event loops or sockets has changed sufficiently in the meanwhile to justify the constant re-work that Qt seems to require from us.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130722/14516e7b/attachment-0002.html>

From thomas.hommers at ebalu.com  Mon Jul 22 20:15:32 2013
From: thomas.hommers at ebalu.com (Thomas Hommers)
Date: Tue, 23 Jul 2013 02:15:32 +0000
Subject: [Twisted-Python] Don't Finalize Connection
Message-ID: <cab3b0ebfea74d139bbcb74eee273bf2@S05-MBX01-03.S05.local>

Hi,

i am fairly new to twisted and try to work my way trough the documentation.
There is a problem I can't find a solution for. Maybe somebody can give me a hint or point me into the right direction.

I am trying to create a TCP server. The client connects to the server, then the server will send multiple commands and binary data to the client. After the data has been send, the connection should stay open.

I subclass "Protocol" to create my protocol.
It seems that after i send data with self.transport.write(data) the last packet will be send with the "FP." flag, what seems to "Finalize" the connection from this end.

Is there a way to force twisted to just "Push" my data, but not to "Finalize" the connection?

Thanks.

Thomas


From hs at ox.cx  Tue Jul 23 01:12:48 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Tue, 23 Jul 2013 09:12:48 +0200
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <5AF6C57C-90F9-4132-97CE-5E9D407320E8@twistedmatrix.com>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
 <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
 <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>
 <5AF6C57C-90F9-4132-97CE-5E9D407320E8@twistedmatrix.com>
Message-ID: <2EEB7BA2-7ED9-45DF-A60F-176D548718B2@ox.cx>

Am 22.07.2013 um 23:37 schrieb Glyph <glyph at twistedmatrix.com>:

>> How would you feel about packaging it up on PyPI so people can try it out effortlessly? What do Apple’s licenses say about that? Yes, I’m volunteering.
>>  
>> It seems it's released under the ASL2. I don't know if Apple prevents *its* employees from doing anything in particular, but it seems like third party contributors are free to do with it as they please (within the limits of the license, of course). 
> 
> There are actually bits of this that I've been meaning to contribute back for a long time.  If somebody would like to help me out with it then maybe I can eke out a little bit of time to do it - I've just been pretty busy :-).

What exactly do you mean? Sounds like you’d like it to got straight into Twisted? Wouldn’t it make more sense to release it separately first? You know, kind of http://www.codinghorror.com/blog/2013/07/rule-of-three.html 

We could move it into the twisted namespace though.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130723/5975074a/attachment-0002.html>

From _ at lvh.io  Tue Jul 23 03:42:33 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 23 Jul 2013 11:42:33 +0200
Subject: [Twisted-Python] Don't Finalize Connection
In-Reply-To: <cab3b0ebfea74d139bbcb74eee273bf2@S05-MBX01-03.S05.local>
References: <cab3b0ebfea74d139bbcb74eee273bf2@S05-MBX01-03.S05.local>
Message-ID: <CAE_Hg6aQ3orBnBjf+KGsDWPHO80fMzv-6UF4K_njimH3Q27hug@mail.gmail.com>

Hi Thomas,

On Tue, Jul 23, 2013 at 4:15 AM, Thomas Hommers <thomas.hommers at ebalu.com>wrote:

> It seems that after i send data with self.transport.write(data) the last
> packet will be send with the "FP." flag, what seems to "Finalize" the
> connection from this end.
>

I can't find any information on the "FP" flag in either IP or TCP.

Either way, if you just call self.transport.write, nothing is finalized.
Only when you call loseConnection is the connection lost :)

Are you observing any behavior that suggests that the connection is lost or
"finalized"? (I must admit I'm unfamiliar with the latter term, and have no
idea what you're referring to.)

Thanks.
> Thomas
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130723/34e80da5/attachment-0002.html>

From p.mayers at imperial.ac.uk  Tue Jul 23 05:16:08 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 23 Jul 2013 12:16:08 +0100
Subject: [Twisted-Python] Don't Finalize Connection
In-Reply-To: <CAE_Hg6aQ3orBnBjf+KGsDWPHO80fMzv-6UF4K_njimH3Q27hug@mail.gmail.com>
References: <cab3b0ebfea74d139bbcb74eee273bf2@S05-MBX01-03.S05.local>
 <CAE_Hg6aQ3orBnBjf+KGsDWPHO80fMzv-6UF4K_njimH3Q27hug@mail.gmail.com>
Message-ID: <51EE65F8.8010204@imperial.ac.uk>

On 23/07/13 10:42, Laurens Van Houtven wrote:
> Hi Thomas,
>
> On Tue, Jul 23, 2013 at 4:15 AM, Thomas Hommers
> <thomas.hommers at ebalu.com <mailto:thomas.hommers at ebalu.com>> wrote:
>
>     It seems that after i send data with self.transport.write(data) the
>     last packet will be send with the "FP." flag, what seems to
>     "Finalize" the connection from this end.
>
>
> I can't find any information on the "FP" flag in either IP or TCP.

He means "FIN+PSH" in the TCP flags field.

Without knowing more details, it's impossible to know if the far end or 
his code initiated the close, and if the latter, whether something was 
directly or indirectly calling loseConnection.



From _ at lvh.io  Tue Jul 23 05:24:07 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 23 Jul 2013 13:24:07 +0200
Subject: [Twisted-Python] Don't Finalize Connection
In-Reply-To: <51EE65F8.8010204@imperial.ac.uk>
References: <cab3b0ebfea74d139bbcb74eee273bf2@S05-MBX01-03.S05.local>
 <CAE_Hg6aQ3orBnBjf+KGsDWPHO80fMzv-6UF4K_njimH3Q27hug@mail.gmail.com>
 <51EE65F8.8010204@imperial.ac.uk>
Message-ID: <CAE_Hg6ZjX6cBs7xgTd=EQ03B60d_G+Lh28wFd6BiCcQw8YkTEg@mail.gmail.com>

Hi,

On Tue, Jul 23, 2013 at 1:16 PM, Phil Mayers <p.mayers at imperial.ac.uk>wrote:

> He means "FIN+PSH" in the TCP flags field.
>

Ah! That makes a lot more sense :)


> Without knowing more details, it's impossible to know if the far end or
> his code initiated the close, and if the latter, whether something was
> directly or indirectly calling loseConnection.
>

Right. The only thing we can say for sure is that just calling
self.transport.write a couple of times won't cause that to happen.

Thomas, could you produce a SSCCE (http://sscce.org/) for this behavior?
Does it persist with a Twisted client and server?

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130723/46dafd68/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Jul 24 11:43:57 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 24 Jul 2013 10:43:57 -0700
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <2EEB7BA2-7ED9-45DF-A60F-176D548718B2@ox.cx>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
 <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
 <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>
 <5AF6C57C-90F9-4132-97CE-5E9D407320E8@twistedmatrix.com>
 <2EEB7BA2-7ED9-45DF-A60F-176D548718B2@ox.cx>
Message-ID: <F5DDB964-4DA8-4807-8C62-25A2073E5BE8@twistedmatrix.com>


On Jul 23, 2013, at 12:12 AM, Hynek Schlawack <hs at ox.cx> wrote:

> Am 22.07.2013 um 23:37 schrieb Glyph <glyph at twistedmatrix.com>:
> 
>>> How would you feel about packaging it up on PyPI so people can try it out effortlessly? What do Apple’s licenses say about that? Yes, I’m volunteering.
>>>  
>>> It seems it's released under the ASL2. I don't know if Apple prevents *its* employees from doing anything in particular, but it seems like third party contributors are free to do with it as they please (within the limits of the license, of course). 
>> 
>> There are actually bits of this that I've been meaning to contribute back for a long time.  If somebody would like to help me out with it then maybe I can eke out a little bit of time to do it - I've just been pretty busy :-).
> 
> What exactly do you mean? Sounds like you’d like it to got straight into Twisted? Wouldn’t it make more sense to release it separately first? You know, kind of http://www.codinghorror.com/blog/2013/07/rule-of-three.html 

That's also a possibility, but following that rule makes the assumption that Calendar Server is just one application, when it's at least two (calendar & contacts) ;-).

> We could move it into the twisted namespace though.

The main motivation to do this, especially with adbapi2, is because Twisted already has an implementation of this exact thing with some deficiencies.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130724/45d4f54a/attachment-0002.html>

From exarkun at twistedmatrix.com  Wed Jul 24 12:05:31 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 24 Jul 2013 18:05:31 -0000
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <F5DDB964-4DA8-4807-8C62-25A2073E5BE8@twistedmatrix.com>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
 <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
 <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>
 <5AF6C57C-90F9-4132-97CE-5E9D407320E8@twistedmatrix.com>
 <2EEB7BA2-7ED9-45DF-A60F-176D548718B2@ox.cx>
 <F5DDB964-4DA8-4807-8C62-25A2073E5BE8@twistedmatrix.com>
Message-ID: <20130724180531.28793.341867463.divmod.xquotient.736@top>

On 05:43 pm, glyph at twistedmatrix.com wrote:
>On Jul 23, 2013, at 12:12 AM, Hynek Schlawack <hs at ox.cx> wrote:
>>What exactly do you mean? Sounds like you’d like it to got straight 
>>into Twisted? Wouldn’t it make more sense to release it separately 
>>first? You know, kind of http://www.codinghorror.com/blog/2013/07 
>>/rule-of-three.html
>
>That's also a possibility, but following that rule makes the assumption 
>that Calendar Server is just one application, when it's at least two 
>(calendar & contacts) ;-).
>>We could move it into the twisted namespace though.
>
>The main motivation to do this, especially with adbapi2, is because 
>Twisted already has an implementation of this exact thing with some 
>deficiencies.

As far as I can tell, there's nothing stopping Hynek from grabbing all 
the code and releasing it as a separate project.

It seems like this would get the ball rolling more quickly and I don't 
see the downside.  If anything, having it as an independent project is 
more likely to get more people interested in it more quickly and so 
increase the pool of people who might be interested in addressing 
whatever concerns need to be addressed for its inclusion in Twisted.

So, why block that work in favor of inclusion directly in Twisted?

Jean-Paul



From hs at ox.cx  Wed Jul 24 16:01:30 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Thu, 25 Jul 2013 00:01:30 +0200
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <20130724180531.28793.341867463.divmod.xquotient.736@top>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
 <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
 <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>
 <5AF6C57C-90F9-4132-97CE-5E9D407320E8@twistedmatrix.com>
 <2EEB7BA2-7ED9-45DF-A60F-176D548718B2@ox.cx>
 <F5DDB964-4DA8-4807-8C62-25A2073E5BE8@twistedmatrix.com>
 <20130724180531.28793.341867463.divmod.xquotient.736@top>
Message-ID: <CC60714F-E3FA-4034-A0DE-115AF4881A80@ox.cx>


Am 24.07.2013 um 20:05 schrieb exarkun at twistedmatrix.com:

> It seems like this would get the ball rolling more quickly and I don't see the downside.  If anything, having it as an independent project is more likely to get more people interested in it more quickly and so increase the pool of people who might be interested in addressing whatever concerns need to be addressed for its inclusion in Twisted.

That’s exactly my line of thought here.  adbapi2 has been pointed out several times now on this list but I doubt people really use it since it’s rather cumbersome to get.

I’m not fighting/delaying its inclusion in Twisted, I just don’t see that happen effectively anytime soon even if the integration work started immediately.  I would just add a smaller step in between that may provide additional insights about potential usage + add some momentum.

Cheers,
—h


From glyph at twistedmatrix.com  Wed Jul 24 16:43:31 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 24 Jul 2013 15:43:31 -0700
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <20130724180531.28793.341867463.divmod.xquotient.736@top>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
 <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
 <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>
 <5AF6C57C-90F9-4132-97CE-5E9D407320E8@twistedmatrix.com>
 <2EEB7BA2-7ED9-45DF-A60F-176D548718B2@ox.cx>
 <F5DDB964-4DA8-4807-8C62-25A2073E5BE8@twistedmatrix.com>
 <20130724180531.28793.341867463.divmod.xquotient.736@top>
Message-ID: <7DE271A4-856B-4E1F-99C5-05A04C67DEB0@twistedmatrix.com>


On Jul 24, 2013, at 11:05 AM, exarkun at twistedmatrix.com wrote:

> On 05:43 pm, glyph at twistedmatrix.com wrote:
>> On Jul 23, 2013, at 12:12 AM, Hynek Schlawack <hs at ox.cx> wrote:
>>> What exactly do you mean? Sounds like you’d like it to got straight into Twisted? Wouldn’t it make more sense to release it separately first? You know, kind of http://www.codinghorror.com/blog/2013/07 /rule-of-three.html
>> 
>> That's also a possibility, but following that rule makes the assumption that Calendar Server is just one application, when it's at least two (calendar & contacts) ;-).
>>> We could move it into the twisted namespace though.
>> 
>> The main motivation to do this, especially with adbapi2, is because Twisted already has an implementation of this exact thing with some deficiencies.
> 
> As far as I can tell, there's nothing stopping Hynek from grabbing all the code and releasing it as a separate project.
> 
> It seems like this would get the ball rolling more quickly and I don't see the downside.  If anything, having it as an independent project is more likely to get more people interested in it more quickly and so increase the pool of people who might be interested in addressing whatever concerns need to be addressed for its inclusion in Twisted.
> 
> So, why block that work in favor of inclusion directly in Twisted?
> 
> Jean-Paul

In principle I can see the appeal of spinning out small, lightweight projects to test enhancements to Twisted, but my enthusiasm for this idea has been tempered over time by the fact that it has never actually worked (that I can recall).  How many projects on <https://launchpad.net/tx> have ever made it to be features within Twisted?  Remember how we weren't going to work on our own process pooling implementation because <https://launchpad.net/ampoule> was going to solve that problem, and we'd just include it when it was done?  As far as I know we haven't even managed to pull in small things like <https://github.com/dreid/treq/blob/master/treq/client.py#L57>.

First of all, there's change-tracking overhead.  People interested in ADBAPI would now have 3 places to potentially put code: Hynek's hypothetical project, calendarserver.org, and Twisted.  Twisted code-reviewers are probably not going to look at Hynek's project (they hardly look at Twisted at it is), and that means that it might have a laxer approach to cool new features, which in turn means that "more interest" just means that it's going to be a bigger ball of code that is harder to get re-integrated.  Calendar Server developers are going to keep maintaining the version in the Calendar Server repository, so it's going to diverge.  Everybody's using a different source tree, so merging will all have to be done manually.

Then there's the fact that provenance tracking is a pain.  Let's say Hynek makes a new project on Github.  The license clearly gives him the right to do that.  Now, when people contribute to that repository, who are they contributing to?  Hynek, or Twisted, or Calendar Server (or Github?)?  What license are they providing those modifications under, Apache2 or MIT?

This is all totally possible to keep track of and deal with, and indeed, if I don't have the time to be responsive to Hynek I'd recommend that he go ahead and do so; I'm sure we can work it out later if we need to.  But preparing it for contribution to Twisted is just an engineering headache under a simple, established licensing and contribution process, and given the option between an engineering headache and a licensing headache PLUS an engineering headache PLUS a process headache, I'll take the engineering headache every time. ;-)

If you just want to see broader testing first, a better solution would be for Hynek to just contribute to the Calendar Server project directly so that there are effectively 2 parties involved rather than 3; for starters, we could have a setup.py in the calendarserver.org repository that just submits twext.enterprise.* to PyPI as an independent source distribution, while remaining part of the same project.  It can *appear* to be a separate project as long as it's developed in the same place. :-)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130724/afa5fc11/attachment-0002.html>

From c.justin88 at gmail.com  Wed Jul 24 17:19:20 2013
From: c.justin88 at gmail.com (Justin Chiu)
Date: Wed, 24 Jul 2013 16:19:20 -0700
Subject: [Twisted-Python] Multi-service, multi-protocol examples
Message-ID: <51F060F8.2060303@gmail.com>

Hi all,

A couple weeks ago I posted a question to this list titled "AMQP 
listening and user-facing daemon". The responses were very helpful; 
thank you.

Does anyone have any examples/tutorials on writing with multiple 
protocols doing totally different things? I found a thread on 
Stackoverflow [1] and the Twisted Finger tutorial [2].

Anything along these lines -- possibly more in-depth? I have also been 
working thorugh the recommended Krondo tutorial [3] which has been 
helpful in learning the mechanisms of Twisted.

     [1] 
http://stackoverflow.com/questions/4084090/multiple-reactors-main-loops-in-one-application-through-threading-or-alternat
     [2] 
https://twistedmatrix.com/documents/current/core/howto/tutorial/index.html
     [3] http://krondo.com/blog/?p=1247

Thanks,
Justin



From hs at ox.cx  Thu Jul 25 02:08:58 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Thu, 25 Jul 2013 10:08:58 +0200
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <7DE271A4-856B-4E1F-99C5-05A04C67DEB0@twistedmatrix.com>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
 <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
 <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>
 <5AF6C57C-90F9-4132-97CE-5E9D407320E8@twistedmatrix.com>
 <2EEB7BA2-7ED9-45DF-A60F-176D548718B2@ox.cx>
 <F5DDB964-4DA8-4807-8C62-25A2073E5BE8@twistedmatrix.com>
 <20130724180531.28793.341867463.divmod.xquotient.736@top>
 <7DE271A4-856B-4E1F-99C5-05A04C67DEB0@twistedmatrix.com>
Message-ID: <EA3F9997-0D15-4E01-8FDC-D077C429E2C6@ox.cx>


Am 25.07.2013 um 00:43 schrieb Glyph <glyph at twistedmatrix.com>:

> If you just want to see broader testing first, a better solution would be for Hynek to just contribute to the Calendar Server project directly so that there are effectively 2 parties involved rather than 3; for starters, we could have a setup.py in the calendarserver.org repository that just submits twext.enterprise.* to PyPI as an independent source distribution, while remaining part of the same project.  It can *appear* to be a separate project as long as it's developed in the same place. :-)

I don’t really care *how* it gets to PyPI – all I was suggesting to get it there *somehow* so people can get excited about it.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130725/af9262eb/attachment-0002.html>

From exarkun at twistedmatrix.com  Thu Jul 25 04:15:12 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 25 Jul 2013 10:15:12 -0000
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <7DE271A4-856B-4E1F-99C5-05A04C67DEB0@twistedmatrix.com>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
 <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
 <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>
 <5AF6C57C-90F9-4132-97CE-5E9D407320E8@twistedmatrix.com>
 <2EEB7BA2-7ED9-45DF-A60F-176D548718B2@ox.cx>
 <F5DDB964-4DA8-4807-8C62-25A2073E5BE8@twistedmatrix.com>
 <20130724180531.28793.341867463.divmod.xquotient.736@top>
 <7DE271A4-856B-4E1F-99C5-05A04C67DEB0@twistedmatrix.com>
Message-ID: <20130725101512.28793.1557014858.divmod.xquotient.739@top>

On 24 Jul, 10:43 pm, glyph at twistedmatrix.com wrote:
>
>
>If you just want to see broader testing first, a better solution would 
>be for Hynek to just contribute to the Calendar Server project directly 
>so that there are effectively 2 parties involved rather than 3; for 
>starters, we could have a setup.py in the calendarserver.org repository 
>that just submits twext.enterprise.* to PyPI as an independent source 
>distribution, while remaining part of the same project.  It can 
>*appear* to be a separate project as long as it's developed in the same 
>place. :-)

That sounds good to me.

Jean-Paul
>-glyph



From jamesbroadhead at gmail.com  Thu Jul 25 08:25:37 2013
From: jamesbroadhead at gmail.com (James Broadhead)
Date: Thu, 25 Jul 2013 15:25:37 +0100
Subject: [Twisted-Python] Trial & the mock library
Message-ID: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>

Hey all -

I've recently started working with the 'mock' library in our trial tests,
and am looking for some best-practice advice.  I'm really just starting to
get used to the library, so it might well have functionality that I'm
unaware of or am misusing.

I very quickly ran into a problem where I mistakenly returned a Mock() in
the place of a deferred, causing the asserts in callbacks to not be called,
and for the test to spuriously pass.

A basic example:

def test_foo():
  d = Mock()
  def check_result(res):
    self.assertEqual(res.code, expected)  # never called
  d.addCallback(check_result)
  return d # Mock is truthy, test passes

This occurred where I was mocking some internals of the class under test;
something like the below

A slightly more believable example:
== myclass.py ==
def some_function(...):
  d = self.authenticate()
  d.addCallback(foo) # foo never called
  d.addErrback(bar) # bar never called
  return d

== test_myclass.py ==
def setUp(self):
  self.resource.authenticate = Mock(return_value=Mock())

def test_foo():
  d = self.resource.some_function
  def check_result(res):  # never called
    self.assertEqual(res.code, expected)
  d.addCallback(check_result)
  return d # test passes

Currently, I'm experimenting with wrapping Mock instantiations by defining
common deferred methods on them in advance; this approach would eventually
lead to extending Mock itself with this functionality.

def nonDeferredMock():
    m = Mock()
    def notimpl(*args, **kwargs):
        raise NotImplementedError('You treated a Mock like a Deferred!')
    m.addCallback = notimpl
    m.addErrback = notimpl
    m.addBoth = notimpl
    m.addCallbacks = notimpl
    return m

Another approach might be extending TestCase to check that return values
are always not Mock objects.

Does anyone on the list have experience with this? Obviously, this only
happens when mistakes are made when writing tests, but I'd rather have
confidence that when my tests pass, that they've passed for the right
reasons.

Another antipattern that I've come across has been:

resource.mymethod = Mock(return_value=defer.succeed(None))

which works fine for tests in which mymethod() is called once, but always
returns the same deferred object if multiple calls are made. What would be
a better approach?

Cheers-

James
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130725/6aa228d3/attachment-0002.html>

From jml at mumak.net  Thu Jul 25 08:40:13 2013
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 25 Jul 2013 15:40:13 +0100
Subject: [Twisted-Python] Trial & the mock library
In-Reply-To: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
References: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
Message-ID: <CAHZ8tnZNj9uKMZwkrYvxjMOWXexkUqMaAsDBSg7Aij-BKk41DA@mail.gmail.com>

On Thu, Jul 25, 2013 at 3:25 PM, James Broadhead
<jamesbroadhead at gmail.com>wrote:

> I very quickly ran into a problem where I mistakenly returned a Mock() in
> the place of a deferred, causing the asserts in callbacks to not be called,
> and for the test to spuriously pass.
>
> A slightly more believable example:
> == myclass.py ==
> def some_function(...):
>   d = self.authenticate()
>   d.addCallback(foo) # foo never called
>   d.addErrback(bar) # bar never called
>   return d
>
> == test_myclass.py ==
> def setUp(self):
>   self.resource.authenticate = Mock(return_value=Mock())
>
>
Why not use patch and replace it with lambda: defer.succeed(None)?

jml
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130725/0b5e771e/attachment-0002.html>

From _ at lvh.io  Thu Jul 25 09:14:25 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Thu, 25 Jul 2013 17:14:25 +0200
Subject: [Twisted-Python] Trial & the mock library
In-Reply-To: <CAHZ8tnZNj9uKMZwkrYvxjMOWXexkUqMaAsDBSg7Aij-BKk41DA@mail.gmail.com>
References: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
 <CAHZ8tnZNj9uKMZwkrYvxjMOWXexkUqMaAsDBSg7Aij-BKk41DA@mail.gmail.com>
Message-ID: <CAE_Hg6b+Wae73Zq5++iVwge5xwv+LCuQq6cAVtrrv6Ut5eEZdQ@mail.gmail.com>

In addition to what jml said, I wonder if it makes sense for TestCase to
raise when the return value of a test method is something other than None
or a Deferred...

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130725/a7e7ec64/attachment-0002.html>

From jml at mumak.net  Thu Jul 25 09:40:39 2013
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 25 Jul 2013 16:40:39 +0100
Subject: [Twisted-Python] Trial & the mock library
In-Reply-To: <CAE_Hg6b+Wae73Zq5++iVwge5xwv+LCuQq6cAVtrrv6Ut5eEZdQ@mail.gmail.com>
References: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
 <CAHZ8tnZNj9uKMZwkrYvxjMOWXexkUqMaAsDBSg7Aij-BKk41DA@mail.gmail.com>
 <CAE_Hg6b+Wae73Zq5++iVwge5xwv+LCuQq6cAVtrrv6Ut5eEZdQ@mail.gmail.com>
Message-ID: <CAHZ8tna0bTNSW2m_aBLetFnmTp3DgCNDhJOpB9J4e-7HRhV2-A@mail.gmail.com>

On Thu, Jul 25, 2013 at 4:14 PM, Laurens Van Houtven <_ at lvh.io> wrote:

> In addition to what jml said, I wonder if it makes sense for TestCase to
> raise when the return value of a test method is something other than None
> or a Deferred...
>
>
Why stop there? Why not have a generic system to allow specifying valid
return types for any function?

jml
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130725/a8c1d200/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Jul 25 14:32:05 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 25 Jul 2013 13:32:05 -0700
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <EA3F9997-0D15-4E01-8FDC-D077C429E2C6@ox.cx>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
 <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
 <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>
 <5AF6C57C-90F9-4132-97CE-5E9D407320E8@twistedmatrix.com>
 <2EEB7BA2-7ED9-45DF-A60F-176D548718B2@ox.cx>
 <F5DDB964-4DA8-4807-8C62-25A2073E5BE8@twistedmatrix.com>
 <20130724180531.28793.341867463.divmod.xquotient.736@top>
 <7DE271A4-856B-4E1F-99C5-05A04C67DEB0@twistedmatrix.com>
 <EA3F9997-0D15-4E01-8FDC-D077C429E2C6@ox.cx>
Message-ID: <67B68634-F078-4100-AC5C-A049A4F25BF0@twistedmatrix.com>

On Jul 25, 2013, at 1:08 AM, Hynek Schlawack <hs at ox.cx> wrote:

> Am 25.07.2013 um 00:43 schrieb Glyph <glyph at twistedmatrix.com>:
> 
>> If you just want to see broader testing first, a better solution would be for Hynek to just contribute to the Calendar Server project directly so that there are effectively 2 parties involved rather than 3; for starters, we could have a setup.py in the calendarserver.org repository that just submits twext.enterprise.* to PyPI as an independent source distribution, while remaining part of the same project.  It can *appear* to be a separate project as long as it's developed in the same place. :-)
> 
> I don’t really care *how* it gets to PyPI – all I was suggesting to get it there *somehow* so people can get excited about it.

Maybe I just read too much into "grab all the source files", then :-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130725/91d20225/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Jul 25 14:33:55 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 25 Jul 2013 13:33:55 -0700
Subject: [Twisted-Python] Trial & the mock library
In-Reply-To: <CAHZ8tna0bTNSW2m_aBLetFnmTp3DgCNDhJOpB9J4e-7HRhV2-A@mail.gmail.com>
References: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
 <CAHZ8tnZNj9uKMZwkrYvxjMOWXexkUqMaAsDBSg7Aij-BKk41DA@mail.gmail.com>
 <CAE_Hg6b+Wae73Zq5++iVwge5xwv+LCuQq6cAVtrrv6Ut5eEZdQ@mail.gmail.com>
 <CAHZ8tna0bTNSW2m_aBLetFnmTp3DgCNDhJOpB9J4e-7HRhV2-A@mail.gmail.com>
Message-ID: <9D971A96-9588-45D4-8D2C-9C273E70E3D7@twistedmatrix.com>


On Jul 25, 2013, at 8:40 AM, Jonathan Lange <jml at mumak.net> wrote:

> On Thu, Jul 25, 2013 at 4:14 PM, Laurens Van Houtven <_ at lvh.io> wrote:
> In addition to what jml said, I wonder if it makes sense for TestCase to raise when the return value of a test method is something other than None or a Deferred...
> 
> 
> Why stop there? Why not have a generic system to allow specifying valid return types for any function?

That sounds like a great idea, I wonder if anyone's thought of it before.

We already encode the information in epytext.  Should we make it a dependency, so it can be parsed at runtime to aid with enforcement?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130725/2548585f/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Jul 25 14:40:36 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 25 Jul 2013 13:40:36 -0700
Subject: [Twisted-Python] Multi-service, multi-protocol examples
In-Reply-To: <51F060F8.2060303@gmail.com>
References: <51F060F8.2060303@gmail.com>
Message-ID: <7C3CD35C-70CC-48EC-B536-0CE4BAB1A5BB@twistedmatrix.com>


On Jul 24, 2013, at 4:19 PM, Justin Chiu <c.justin88 at gmail.com> wrote:

> Hi all,
> 
> A couple weeks ago I posted a question to this list titled "AMQP listening and user-facing daemon". The responses were very helpful; thank you.
> 
> Does anyone have any examples/tutorials on writing with multiple protocols doing totally different things? I found a thread on Stackoverflow [1] and the Twisted Finger tutorial [2].

The unifying element of many multi-protocol services is authentication; specifically, as authentication is provided via Cred: <http://twistedmatrix.com/documents/current/core/howto/cred.html>.  There ought to be more documentation on this, but once you've read through it, have a stroll through the API documentation and the examples and you should get a pretty good idea :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130725/38a7186d/attachment-0002.html>

From exarkun at twistedmatrix.com  Thu Jul 25 16:51:22 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 25 Jul 2013 22:51:22 -0000
Subject: [Twisted-Python] Trial & the mock library
In-Reply-To: <9D971A96-9588-45D4-8D2C-9C273E70E3D7@twistedmatrix.com>
References: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
 <CAHZ8tnZNj9uKMZwkrYvxjMOWXexkUqMaAsDBSg7Aij-BKk41DA@mail.gmail.com>
 <CAE_Hg6b+Wae73Zq5++iVwge5xwv+LCuQq6cAVtrrv6Ut5eEZdQ@mail.gmail.com>
 <CAHZ8tna0bTNSW2m_aBLetFnmTp3DgCNDhJOpB9J4e-7HRhV2-A@mail.gmail.com>
 <9D971A96-9588-45D4-8D2C-9C273E70E3D7@twistedmatrix.com>
Message-ID: <20130725225122.28793.1420267455.divmod.xquotient.744@top>

On 08:33 pm, glyph at twistedmatrix.com wrote:
>
>On Jul 25, 2013, at 8:40 AM, Jonathan Lange <jml at mumak.net> wrote:
>>On Thu, Jul 25, 2013 at 4:14 PM, Laurens Van Houtven <_ at lvh.io> wrote:
>>In addition to what jml said, I wonder if it makes sense for TestCase 
>>to raise when the return value of a test method is something other 
>>than None or a Deferred...
>>
>>
>>Why stop there? Why not have a generic system to allow specifying 
>>valid return types for any function?
>
>That sounds like a great idea, I wonder if anyone's thought of it 
>before.
>
>We already encode the information in epytext.  Should we make it a 
>dependency, so it can be parsed at runtime to aid with enforcement?

Please finish the Lore -> Sphinx transition first so that we can begin 
investigating whether reStructuredText for API documentation is 
sensible.  We don't want to drag in an epytext parsing dependency if 
we're just going to switch to docutils in eight or nine years.

Jean-Paul



From glyph at twistedmatrix.com  Thu Jul 25 17:12:21 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 25 Jul 2013 16:12:21 -0700
Subject: [Twisted-Python] Trial & the mock library
In-Reply-To: <20130725225122.28793.1420267455.divmod.xquotient.744@top>
References: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
 <CAHZ8tnZNj9uKMZwkrYvxjMOWXexkUqMaAsDBSg7Aij-BKk41DA@mail.gmail.com>
 <CAE_Hg6b+Wae73Zq5++iVwge5xwv+LCuQq6cAVtrrv6Ut5eEZdQ@mail.gmail.com>
 <CAHZ8tna0bTNSW2m_aBLetFnmTp3DgCNDhJOpB9J4e-7HRhV2-A@mail.gmail.com>
 <9D971A96-9588-45D4-8D2C-9C273E70E3D7@twistedmatrix.com>
 <20130725225122.28793.1420267455.divmod.xquotient.744@top>
Message-ID: <C7652634-7E82-4439-8D37-F21B28A7B242@twistedmatrix.com>


On Jul 25, 2013, at 3:51 PM, exarkun at twistedmatrix.com wrote:

> On 08:33 pm, glyph at twistedmatrix.com wrote:
>> 
>> On Jul 25, 2013, at 8:40 AM, Jonathan Lange <jml at mumak.net> wrote:
>>> On Thu, Jul 25, 2013 at 4:14 PM, Laurens Van Houtven <_ at lvh.io> wrote:
>>> In addition to what jml said, I wonder if it makes sense for TestCase to raise when the return value of a test method is something other than None or a Deferred...
>>> 
>>> 
>>> Why stop there? Why not have a generic system to allow specifying valid return types for any function?
>> 
>> That sounds like a great idea, I wonder if anyone's thought of it before.
>> 
>> We already encode the information in epytext.  Should we make it a dependency, so it can be parsed at runtime to aid with enforcement?
> 
> Please finish the Lore -> Sphinx transition first so that we can begin investigating whether reStructuredText for API documentation is sensible.  We don't want to drag in an epytext parsing dependency if we're just going to switch to docutils in eight or nine years.

That's a good point, but I wouldn't want to block on it.  We could easily implement a simple abstraction layer for type identification that layers and translates between epydoc and ReST; we'd probably need this during the transitional period anyway, since lore->sphinx isn't pydoctor->sphinx.

Plus, of course, we'd need that abstraction layer to support multiple different styles of py3k function annotations, if we're talking about things that people might use in eight or nine years.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130725/d6aa6c9a/attachment-0002.html>

From haggardii at gmail.com  Thu Jul 25 19:51:41 2013
From: haggardii at gmail.com (Matt Haggard)
Date: Thu, 25 Jul 2013 19:51:41 -0600
Subject: [Twisted-Python] Trial & the mock library
In-Reply-To: <C7652634-7E82-4439-8D37-F21B28A7B242@twistedmatrix.com>
References: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
 <CAHZ8tnZNj9uKMZwkrYvxjMOWXexkUqMaAsDBSg7Aij-BKk41DA@mail.gmail.com>
 <CAE_Hg6b+Wae73Zq5++iVwge5xwv+LCuQq6cAVtrrv6Ut5eEZdQ@mail.gmail.com>
 <CAHZ8tna0bTNSW2m_aBLetFnmTp3DgCNDhJOpB9J4e-7HRhV2-A@mail.gmail.com>
 <9D971A96-9588-45D4-8D2C-9C273E70E3D7@twistedmatrix.com>
 <20130725225122.28793.1420267455.divmod.xquotient.744@top>
 <C7652634-7E82-4439-8D37-F21B28A7B242@twistedmatrix.com>
Message-ID: <CAL+xXwMuLHXOHFufq79tmVJ7x5+P9=EtheODsVu+7GcuMy5sNQ@mail.gmail.com>

I have a few thoughts:

First, how does this hypothetical system for specifying return types solve
the original problem (that user-written methods on TestCase pass
unexpectedly when a non-Deferred is returned)?  If I'm the one writing
test_whatever, with the proposed doc string method for specifying return
type, then wouldn't I need to write a docstring that specifies the return
type as Deferred?

Second, I don't love the idea of the docstring changing how a function
behaves... I like that it's a free form blob of text.  I think I'd rather
see decorators used for this purpose.

I understand that one benefit of putting the info in the docstring is that
it ensures the docstring will always be accurate.

But you could just as easily extract the return type from the decorator for
generating HTML docs, and people reading the source could see the
decorators.

Also, we can still leverage the existing info recorded in the docstring by
doing a one time pass off the code to turn the docstring info into
decorators.

My two cents
On Jul 25, 2013 5:13 PM, "Glyph" <glyph at twistedmatrix.com> wrote:

>
> On Jul 25, 2013, at 3:51 PM, exarkun at twistedmatrix.com wrote:
>
> On 08:33 pm, glyph at twistedmatrix.com wrote:
>
>
> On Jul 25, 2013, at 8:40 AM, Jonathan Lange <jml at mumak.net> wrote:
>
> On Thu, Jul 25, 2013 at 4:14 PM, Laurens Van Houtven <_ at lvh.io> wrote:
> In addition to what jml said, I wonder if it makes sense for TestCase to
> raise when the return value of a test method is something other than None
> or a Deferred...
>
>
> Why stop there? Why not have a generic system to allow specifying valid
> return types for any function?
>
>
> That sounds like a great idea, I wonder if anyone's thought of it before.
>
> We already encode the information in epytext.  Should we make it a
> dependency, so it can be parsed at runtime to aid with enforcement?
>
>
> Please finish the Lore -> Sphinx transition first so that we can begin
> investigating whether reStructuredText for API documentation is sensible.
>  We don't want to drag in an epytext parsing dependency if we're just going
> to switch to docutils in eight or nine years.
>
>
> That's a good point, but I wouldn't want to block on it.  We could easily
> implement a simple abstraction layer for type identification that layers
> and translates between epydoc and ReST; we'd probably need this during the
> transitional period anyway, since lore->sphinx isn't pydoctor->sphinx.
>
> Plus, of course, we'd need that abstraction layer to support multiple
> different styles of py3k function annotations, if we're talking about
> things that people might use in eight or nine years.
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130725/f8d12f30/attachment-0002.html>

From jml at mumak.net  Fri Jul 26 01:23:53 2013
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 26 Jul 2013 08:23:53 +0100
Subject: [Twisted-Python] Trial & the mock library
In-Reply-To: <C7652634-7E82-4439-8D37-F21B28A7B242@twistedmatrix.com>
References: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
 <CAHZ8tnZNj9uKMZwkrYvxjMOWXexkUqMaAsDBSg7Aij-BKk41DA@mail.gmail.com>
 <CAE_Hg6b+Wae73Zq5++iVwge5xwv+LCuQq6cAVtrrv6Ut5eEZdQ@mail.gmail.com>
 <CAHZ8tna0bTNSW2m_aBLetFnmTp3DgCNDhJOpB9J4e-7HRhV2-A@mail.gmail.com>
 <9D971A96-9588-45D4-8D2C-9C273E70E3D7@twistedmatrix.com>
 <20130725225122.28793.1420267455.divmod.xquotient.744@top>
 <C7652634-7E82-4439-8D37-F21B28A7B242@twistedmatrix.com>
Message-ID: <CAHZ8tnZb+Er9uGn3ereX_PH+YxsFuOWuvtAhj0h9vtyz3+ciyg@mail.gmail.com>

On Fri, Jul 26, 2013 at 12:12 AM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Jul 25, 2013, at 3:51 PM, exarkun at twistedmatrix.com wrote:
>
> On 08:33 pm, glyph at twistedmatrix.com wrote:
>
>
> On Jul 25, 2013, at 8:40 AM, Jonathan Lange <jml at mumak.net> wrote:
>
> On Thu, Jul 25, 2013 at 4:14 PM, Laurens Van Houtven <_ at lvh.io> wrote:
> In addition to what jml said, I wonder if it makes sense for TestCase to
> raise when the return value of a test method is something other than None
> or a Deferred...
>
>
> Why stop there? Why not have a generic system to allow specifying valid
> return types for any function?
>
>
> That sounds like a great idea, I wonder if anyone's thought of it before.
>
> We already encode the information in epytext.  Should we make it a
> dependency, so it can be parsed at runtime to aid with enforcement?
>
>
> Please finish the Lore -> Sphinx transition first so that we can begin
> investigating whether reStructuredText for API documentation is sensible.
>  We don't want to drag in an epytext parsing dependency if we're just going
> to switch to docutils in eight or nine years.
>
>
> That's a good point, but I wouldn't want to block on it.  We could easily
> implement a simple abstraction layer for type identification that layers
> and translates between epydoc and ReST; we'd probably need this during the
> transitional period anyway, since lore->sphinx isn't pydoctor->sphinx.
>
> Plus, of course, we'd need that abstraction layer to support multiple
> different styles of py3k function annotations, if we're talking about
> things that people might use in eight or nine years.
>
>

No need. If we implement it with Zope 3 components (I think it's called
pyramid or grok now or something?), then we can rely on their py3k support.

I am somewhat troubled by the security implications of this feature,
especially when used in conjunction with manhole.

jml
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130726/a719a0a3/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Jul 26 02:03:43 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 26 Jul 2013 01:03:43 -0700
Subject: [Twisted-Python] Trial & the mock library
In-Reply-To: <CAL+xXwMuLHXOHFufq79tmVJ7x5+P9=EtheODsVu+7GcuMy5sNQ@mail.gmail.com>
References: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
 <CAHZ8tnZNj9uKMZwkrYvxjMOWXexkUqMaAsDBSg7Aij-BKk41DA@mail.gmail.com>
 <CAE_Hg6b+Wae73Zq5++iVwge5xwv+LCuQq6cAVtrrv6Ut5eEZdQ@mail.gmail.com>
 <CAHZ8tna0bTNSW2m_aBLetFnmTp3DgCNDhJOpB9J4e-7HRhV2-A@mail.gmail.com>
 <9D971A96-9588-45D4-8D2C-9C273E70E3D7@twistedmatrix.com>
 <20130725225122.28793.1420267455.divmod.xquotient.744@top>
 <C7652634-7E82-4439-8D37-F21B28A7B242@twistedmatrix.com>
 <CAL+xXwMuLHXOHFufq79tmVJ7x5+P9=EtheODsVu+7GcuMy5sNQ@mail.gmail.com>
Message-ID: <34C43B07-DC89-46C7-A5D2-E7D651E02503@twistedmatrix.com>


On Jul 25, 2013, at 6:51 PM, Matt Haggard <haggardii at gmail.com> wrote:

> I have a few thoughts:
> 
> First, how does this hypothetical system for specifying return types solve the original problem (that user-written methods on TestCase pass unexpectedly when a non-Deferred is returned)?  If I'm the one writing test_whatever, with the proposed doc string method for specifying return type, then wouldn't I need to write a docstring that specifies the return type as Deferred?
> 
All of this follows quite obviously if you just consider that a functional specification document (in other words, the generalization of the docstring) is simply a partial bijective homomorphism over the orbifold of possible runtime states (into the Hilbert space with a boundary defined by the NxM coordinate matrix of all possible intersections of sets of bugs and non-bugs of course).
> Second, I don't love the idea of the docstring changing how a function behaves... I like that it's a free form blob of text.  I think I'd rather see decorators used for this purpose.
> 
It's not so much changing how the function behaves but rather what its behavior is.

In any case, there's a great paper which offers an excellent theoretical background that should explain what I mean by that distinction, and should really elucidate some of the other threads in this conversation as well: <http://isotropic.org/papers/chicken.pdf>

Hope that clears things up,

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130726/5e412c44/attachment-0002.html>

From terry at jon.es  Fri Jul 26 08:03:33 2013
From: terry at jon.es (Terry Jones)
Date: Fri, 26 Jul 2013 15:03:33 +0100
Subject: [Twisted-Python] Trial & the mock library
In-Reply-To: <9D971A96-9588-45D4-8D2C-9C273E70E3D7@twistedmatrix.com>
References: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
 <CAHZ8tnZNj9uKMZwkrYvxjMOWXexkUqMaAsDBSg7Aij-BKk41DA@mail.gmail.com>
 <CAE_Hg6b+Wae73Zq5++iVwge5xwv+LCuQq6cAVtrrv6Ut5eEZdQ@mail.gmail.com>
 <CAHZ8tna0bTNSW2m_aBLetFnmTp3DgCNDhJOpB9J4e-7HRhV2-A@mail.gmail.com>
 <9D971A96-9588-45D4-8D2C-9C273E70E3D7@twistedmatrix.com>
Message-ID: <CACqnu4XfTejtjd81L1V5iekQxmQBv8GmKM9rc7KHFMmEZzML7Q@mail.gmail.com>

> That sounds like a great idea, I wonder if anyone's thought of it before.

I suggested this in #twisted a few years back and was immediately told it
was a bad idea (names withheld!).

Another case in which this pops up is if you accidentally yield some
deferreds in a test but don't decorate with @inlineCallbacks. Trial runs
the test function, gets back a generator object, and thinks "yep, ok,
that's not an error". I've hit that multiple times and know several
experienced Twisted users who have too.

T



On Thu, Jul 25, 2013 at 9:33 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Jul 25, 2013, at 8:40 AM, Jonathan Lange <jml at mumak.net> wrote:
>
> On Thu, Jul 25, 2013 at 4:14 PM, Laurens Van Houtven <_ at lvh.io> wrote:
>
>> In addition to what jml said, I wonder if it makes sense for TestCase to
>> raise when the return value of a test method is something other than None
>> or a Deferred...
>>
>>
> Why stop there? Why not have a generic system to allow specifying valid
> return types for any function?
>
>
> That sounds like a great idea, I wonder if anyone's thought of it before.
>
> We already encode the information in epytext.  Should we make it a
> dependency, so it can be parsed at runtime to aid with enforcement?
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130726/b0641e52/attachment-0002.html>

From exarkun at twistedmatrix.com  Fri Jul 26 08:12:03 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 26 Jul 2013 14:12:03 -0000
Subject: [Twisted-Python] Trial & the mock library
In-Reply-To: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
References: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
Message-ID: <20130726141203.28793.1763275835.divmod.xquotient.749@top>

On 25 Jul, 02:25 pm, jamesbroadhead at gmail.com wrote:
>Hey all -
>
>I've recently started working with the 'mock' library in our trial 
>tests,
>and am looking for some best-practice advice.  I'm really just starting 
>to
>get used to the library, so it might well have functionality that I'm
>unaware of or am misusing.
>
>I very quickly ran into a problem where I mistakenly returned a Mock() 
>in
>the place of a deferred, causing the asserts in callbacks to not be 
>called,
>and for the test to spuriously pass.

To address this problem, I suggest you get into the habit of watching 
your unit tests fail in the expected way before you make the necessary 
implementation changes to make them pass.

This is only one of an unlimited number of ways your unit tests can be 
buggy.  It might be tempting to try to fix the test runner to prevent 
you from ever falling into this trap again - and who knows, it might 
even be a good idea.
However, if you run your tests and see them fail in the way you expected 
them to fail before you write the code that makes them pass, then you 
will be sure to avoid the many, many, many *other* pitfalls that have 
nothing to do with accidentally returning the wrong object.

This is just one of the attractions of test-driven development for me.

Jean-Paul
>A basic example:
>
>def test_foo():
>  d = Mock()
>  def check_result(res):
>    self.assertEqual(res.code, expected)  # never called
>  d.addCallback(check_result)
>  return d # Mock is truthy, test passes
>
>This occurred where I was mocking some internals of the class under 
>test;
>something like the below
>
>A slightly more believable example:
>== myclass.py ==
>def some_function(...):
>  d = self.authenticate()
>  d.addCallback(foo) # foo never called
>  d.addErrback(bar) # bar never called
>  return d
>
>== test_myclass.py ==
>def setUp(self):
>  self.resource.authenticate = Mock(return_value=Mock())
>
>def test_foo():
>  d = self.resource.some_function
>  def check_result(res):  # never called
>    self.assertEqual(res.code, expected)
>  d.addCallback(check_result)
>  return d # test passes
>
>Currently, I'm experimenting with wrapping Mock instantiations by 
>defining
>common deferred methods on them in advance; this approach would 
>eventually
>lead to extending Mock itself with this functionality.
>
>def nonDeferredMock():
>    m = Mock()
>    def notimpl(*args, **kwargs):
>        raise NotImplementedError('You treated a Mock like a Deferred!')
>    m.addCallback = notimpl
>    m.addErrback = notimpl
>    m.addBoth = notimpl
>    m.addCallbacks = notimpl
>    return m
>
>Another approach might be extending TestCase to check that return 
>values
>are always not Mock objects.
>
>Does anyone on the list have experience with this? Obviously, this only
>happens when mistakes are made when writing tests, but I'd rather have
>confidence that when my tests pass, that they've passed for the right
>reasons.
>
>Another antipattern that I've come across has been:
>
>resource.mymethod = Mock(return_value=defer.succeed(None))
>
>which works fine for tests in which mymethod() is called once, but 
>always
>returns the same deferred object if multiple calls are made. What would 
>be
>a better approach?
>
>Cheers-
>
>James



From glyph at twistedmatrix.com  Fri Jul 26 22:26:24 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 26 Jul 2013 21:26:24 -0700
Subject: [Twisted-Python] Trial & the mock library
In-Reply-To: <20130726141203.28793.1763275835.divmod.xquotient.749@top>
References: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
 <20130726141203.28793.1763275835.divmod.xquotient.749@top>
Message-ID: <E5207BFC-CD93-4F35-9C84-1EA7144D782A@twistedmatrix.com>


On Jul 26, 2013, at 7:12 AM, exarkun at twistedmatrix.com wrote:

> To address this problem, I suggest you get into the habit of watching your unit tests fail in the expected way before you make the necessary implementation changes to make them pass.
> 
> This is only one of an unlimited number of ways your unit tests can be buggy.  It might be tempting to try to fix the test runner to prevent you from ever falling into this trap again - and who knows, it might even be a good idea.
> However, if you run your tests and see them fail in the way you expected them to fail before you write the code that makes them pass, then you will be sure to avoid the many, many, many *other* pitfalls that have nothing to do with accidentally returning the wrong object.
> 
> This is just one of the attractions of test-driven development for me.

On a more serious note than our previous digression, perhaps *this* is the thing we should be modifying Trial to support.

The vast majority of Twisted committers do development this way - or at least aspire to, most of the time - but to someone new to automated testing, it's not entirely clear how you're supposed to use something like Trial, or how important it is that you see the tests fail first.

Perhaps if trial had a bit more of a memory of things that happened between test runs it would be useful.  For example, a mode where you could tell it what you're working on, and you could just re-run the same thing and you'd only get a 'success' when you went back and forth between red and green.

Here's a silly little narrative about how one might use such a thing:

$ tribulation begin myproject
Beginning a time of turmoil for python package 'myproject', in './myproject/'.
myproject.test_1
  Case1
    test_1 ...                                                             [OK]

-------------------------------------------------------------------------------
Ran 2 tests in 0.033s

PROCEED (successes=1) - All tests passing, an auspicious beginning. Now write a failing test.
$ tribulation continue
myproject.test_1
  Case1
    test_1 ...                                                             [OK]
myproject.test_2
  Case2
    test_2 ...                                                             [OK]

-------------------------------------------------------------------------------
Ran 2 tests in 0.033s

AGAIN (successes=2) - a test should have failed.
# oops, 'test_2' was just 'pass'... let me fix that
$ tribulation continue
$ tribulation begin myproject
Beginning a time of turmoil for python package 'myproject', in './myproject/'.
myproject.test_1
  Case1
    test_1 ...                                                             [OK]
myproject.test_2
  Case2
    test_2 ...                                                           [FAIL]

-------------------------------------------------------------------------------
Ran 2 tests in 0.450s

PROCEED (successes=2) - we are working on myproject.Case2.test_2 now.
$ tribulation continue
myproject.test_2
  Case2
    test_2 ...                                                           [FAIL]

-------------------------------------------------------------------------------
Ran 1 tests in 0.020s
AGAIN (successes=2) - you should have made the test pass.
$ tribulation continue
myproject.test_2
  Case2
    test_2 ...                                                             [OK]

-------------------------------------------------------------------------------
Ran 1 tests in 0.01s
PROCEED (successes=1) - myproject.Case2.test_2 works now, let's make sure nothing else broke.
$ tribulation continue
myproject.test_1
  Case1
    test_1 ...                                                             [OK]
myproject.test_2
  Case2
    test_2 ...                                                             [OK]

-------------------------------------------------------------------------------
Ran 2 tests in 0.033s
PROCEED (successes=2) - no regressions, find the next thing to work on
$ tribulation conclude
You have received one billion points, congratulations you have defeated software.

Does this seem like it might be a useful feature for someone to work on?  Not shown here is the part that when you do introduce a regression, it runs just the tests that failed until you fix all of them, then goes back up the suite until it reaches the top and you move on to the next thing...

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130726/cdee24d2/attachment-0002.html>

From jml at mumak.net  Sat Jul 27 03:08:26 2013
From: jml at mumak.net (Jonathan Lange)
Date: Sat, 27 Jul 2013 10:08:26 +0100
Subject: [Twisted-Python] Trial & the mock library
In-Reply-To: <E5207BFC-CD93-4F35-9C84-1EA7144D782A@twistedmatrix.com>
References: <CA+hid6EaQLz4QHkizNgJoYori3UFjeU6ikFC2wNF1v9mo0gc9g@mail.gmail.com>
 <20130726141203.28793.1763275835.divmod.xquotient.749@top>
 <E5207BFC-CD93-4F35-9C84-1EA7144D782A@twistedmatrix.com>
Message-ID: <CAHZ8tnaU_Pyo7k1Tew8YtMaE2GwGFHw8E1xOpRSucTx0UzZFMw@mail.gmail.com>

On Sat, Jul 27, 2013 at 5:26 AM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Jul 26, 2013, at 7:12 AM, exarkun at twistedmatrix.com wrote:
>
> To address this problem, I suggest you get into the habit of watching your
> unit tests fail in the expected way before you make the necessary
> implementation changes to make them pass.
>
> This is only one of an unlimited number of ways your unit tests can be
> buggy.  It might be tempting to try to fix the test runner to prevent you
> from ever falling into this trap again - and who knows, it might even be a
> good idea.
> However, if you run your tests and see them fail in the way you expected
> them to fail before you write the code that makes them pass, then you will
> be sure to avoid the many, many, many *other* pitfalls that have nothing to
> do with accidentally returning the wrong object.
>
> This is just one of the attractions of test-driven development for me.
>
>
> On a more serious note than our previous digression, perhaps *this* is the
> thing we should be modifying Trial to support.
>
> The vast majority of Twisted committers do development this way - or at
> least aspire to, most of the time - but to someone new to automated
> testing, it's not entirely clear *how* you're supposed to use something
> like Trial, or how important it is that you see the tests fail first.
>
> Perhaps if trial had a bit more of a memory of things that happened
> between test runs it would be useful.  For example, a mode where you could
> tell it what you're working on, and you could just re-run the same thing
> and you'd only get a 'success' when you went back and forth between red and
> green.
>
> Here's a silly little narrative about how one might use such a thing:
>
> $ tribulation begin myproject
> Beginning a time of turmoil for python package 'myproject', in
> './myproject/'.
> myproject.test_1
>   Case1
>     test_1 ...
>   [OK]
>
>
> -------------------------------------------------------------------------------
> Ran 2 tests in 0.033s
>
> PROCEED (successes=1) - All tests passing, an auspicious beginning. Now
> write a failing test.
> $ tribulation continue
> myproject.test_1
>   Case1
>     test_1 ...
>   [OK]
> myproject.test_2
>   Case2
>     test_2 ...
>   [OK]
>
>
> -------------------------------------------------------------------------------
> Ran 2 tests in 0.033s
>
> *AGAIN* (successes=2) - a test should have failed.
> # oops, 'test_2' was just 'pass'... let me fix that
> $ tribulation continue
> $ tribulation begin myproject
> Beginning a time of turmoil for python package 'myproject', in
> './myproject/'.
> myproject.test_1
>   Case1
>     test_1 ...
>   [OK]
> myproject.test_2
>   Case2
>     test_2 ...
> [FAIL]
>
>
> -------------------------------------------------------------------------------
> Ran 2 tests in 0.450s
>
> PROCEED (successes=2) - we are working on myproject.Case2.test_2 now.
> $ tribulation continue
> myproject.test_2
>   Case2
>     test_2 ...
> [FAIL]
>
>
> -------------------------------------------------------------------------------
> Ran 1 tests in 0.020s
> *AGAIN* (successes=2) - you should have made the test pass.
> $ tribulation continue
> myproject.test_2
>   Case2
>     test_2 ...
>   [OK]
>
>
> -------------------------------------------------------------------------------
> Ran 1 tests in 0.01s
> PROCEED (successes=1) - myproject.Case2.test_2 works now, let's make sure
> nothing else broke.
> $ tribulation continue
> myproject.test_1
>   Case1
>     test_1 ...
>   [OK]
> myproject.test_2
>   Case2
>     test_2 ...
>   [OK]
>
>
> -------------------------------------------------------------------------------
> Ran 2 tests in 0.033s
> PROCEED (successes=2) - no regressions, find the next thing to work on
> $ tribulation conclude
> You have received one billion points, congratulations you have defeated
> software.
>
>
> Does this seem like it might be a useful feature for someone to work on?
>  Not shown here is the part that when you do introduce a regression, it
> runs just the tests that failed until you fix all of them, then goes back
> up the suite until it reaches the top and you move on to the next thing...
>
>
I like the idea.

testrepository <http://testrepository.readthedocs.org/en/latest/> stores
tests results in a database and already has support for running just the
tests that failed, etc.  It just runs whatever executable you give it,
provided that executable outputs subunit.

Not on a computer with it installed (and can't find a good webpage), but
here's the basic gist:

$ testr init  # initialize the database
$ testr run  # runs everything
... # test output goes here
$ testr run  # runs everything, shows delta of tests failed & time taken
$ testr run --failing  # just run what failed

It doesn't have the TDD straightjacket you describe, but that would be a
fun thing to make.

jml
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130727/f0cbdd25/attachment-0002.html>

From burslem2001 at yahoo.com  Sat Jul 27 10:08:32 2013
From: burslem2001 at yahoo.com (gary clark)
Date: Sat, 27 Jul 2013 09:08:32 -0700 (PDT)
Subject: [Twisted-Python] ugh open-ssl and twisted python
Message-ID: <1374941312.60664.YahooMailNeo@web120906.mail.ne1.yahoo.com>

Hello,
 
This problem has been driving me crazy for a couple of days. I'm hoping someone can shed some light
on this. I have a twisted server its using open-ssl (using certificates) and runs on linux and communicates great with a windows client thats send messages every second.
 
However when I send data back to the client "sometimes" it doesnt receive the packet and there is no indication of failure at the client whats more I dont see any failure on the twisted server end. Is there any way I can tell what could cause this failure? It just look like the transport.write(data) fails just dont know why it would when receiving works like a charm.
 
Any help on this would relieve the pain I'm feeling right now.
 
Much Appreciated,
Gazza
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130727/41029812/attachment-0002.html>

From _ at lvh.io  Sat Jul 27 10:51:09 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Sat, 27 Jul 2013 18:51:09 +0200
Subject: [Twisted-Python] ugh open-ssl and twisted python
In-Reply-To: <1374941312.60664.YahooMailNeo@web120906.mail.ne1.yahoo.com>
References: <1374941312.60664.YahooMailNeo@web120906.mail.ne1.yahoo.com>
Message-ID: <CAE_Hg6aDsnyY7y3BDNBBaYQ7WY0s1Yg1qXr3hu5R+xiD0_P9ZA@mail.gmail.com>

Hi Gary,

On Sat, Jul 27, 2013 at 6:08 PM, gary clark <burslem2001 at yahoo.com> wrote:

> Hello,
>
> This problem has been driving me crazy for a couple of days. I'm hoping
> someone can shed some light
> on this. I have a twisted server its using open-ssl (using certificates)
> and runs on linux and communicates great with a windows client thats send
> messages every second.
>
> However when I send data back to the client "sometimes" it doesnt receive
> the packet and there is no indication of failure at the client whats more I
> dont see any failure on the twisted server end.
>

When you say "packet", does that mean "actual IP packet that you observed
leaving the server", or do you mean "the thing I passed to transport.write"?


> Is there any way I can tell what could cause this failure? It just look
> like the transport.write(data) fails just dont know why it would when
> receiving works like a charm.
>

So, it fails silently? Keep in mind that transport.write working doesn't
necessarily mean that anything on the other end has successfully read it:
that's why good RPC mechanisms like AMP have positive acknowedgement :)


> Any help on this would relieve the pain I'm feeling right now.
>

How are these two servers connected? Can you reliably reproduce the
problem? Does it persist with other transports? Could you shed some more
light on what you mean by "sometimes"?

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130727/f3ee15af/attachment-0002.html>

From exarkun at twistedmatrix.com  Sat Jul 27 11:27:03 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 27 Jul 2013 17:27:03 -0000
Subject: [Twisted-Python] ugh open-ssl and twisted python
In-Reply-To: <1374941312.60664.YahooMailNeo@web120906.mail.ne1.yahoo.com>
References: <1374941312.60664.YahooMailNeo@web120906.mail.ne1.yahoo.com>
Message-ID: <20130727172703.28793.2147346251.divmod.xquotient.754@top>

On 04:08 pm, burslem2001 at yahoo.com wrote:
>Hello,
>
>This problem has been driving me crazy for a couple of days. I'm hoping 
>someone can shed some light
>on this. I have a twisted server its using open-ssl (using 
>certificates) and runs on linux and communicates great with a windows 
>client thats send messages every second.
>
>However when I send data back to the client "sometimes" it doesnt 
>receive the packet and there is no indication of failure at the client 
>whats more I dont see any failure on the twisted server end. Is there 
>any way I can tell what could cause this failure? It just look like the 
>transport.write(data) fails just dont know why it would when receiving 
>works like a charm.
>
>Any help on this would relieve the pain I'm feeling right now.

Please see http://sscce.org/

Jean-Paul



From burslem2001 at yahoo.com  Sat Jul 27 11:36:29 2013
From: burslem2001 at yahoo.com (gary clark)
Date: Sat, 27 Jul 2013 10:36:29 -0700 (PDT)
Subject: [Twisted-Python] ugh open-ssl and twisted python
In-Reply-To: <20130727172703.28793.2147346251.divmod.xquotient.754@top>
References: <1374941312.60664.YahooMailNeo@web120906.mail.ne1.yahoo.com>
 <20130727172703.28793.2147346251.divmod.xquotient.754@top>
Message-ID: <1374946589.75618.YahooMailNeo@web120905.mail.ne1.yahoo.com>

Guys,
 
Its the MTU size. Anything bigger than 1500 bytes is getting fragmented.
Using wireshark I'm seeing TCP Previous segment lost anything bigger than 1500. However once that
happens things go south and remain there.
 
Oh boy one day I will learn but not today.
 
Cheers,
Gazza
 
From: "exarkun at twistedmatrix.com" <exarkun at twistedmatrix.com>
To: Twisted general discussion <twisted-python at twistedmatrix.com> 
Sent: Saturday, July 27, 2013 12:27 PM
Subject: Re: [Twisted-Python] ugh open-ssl and twisted python


On 04:08 pm, burslem2001 at yahoo.com wrote:
> Hello,
> 
> This problem has been driving me crazy for a couple of days. I'm hoping someone can shed some light
> on this. I have a twisted server its using open-ssl (using certificates) and runs on linux and communicates great with a windows client thats send messages every second.
> 
> However when I send data back to the client "sometimes" it doesnt receive the packet and there is no indication of failure at the client whats more I dont see any failure on the twisted server end. Is there any way I can tell what could cause this failure? It just look like the transport.write(data) fails just dont know why it would when receiving works like a charm.
> 
> Any help on this would relieve the pain I'm feeling right now.

Please see http://sscce.org/

Jean-Paul

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130727/2eef79b7/attachment-0002.html>

From burslem2001 at yahoo.com  Sat Jul 27 13:38:11 2013
From: burslem2001 at yahoo.com (gary clark)
Date: Sat, 27 Jul 2013 12:38:11 -0700 (PDT)
Subject: [Twisted-Python] ugh open-ssl and twisted python
In-Reply-To: <1374946589.75618.YahooMailNeo@web120905.mail.ne1.yahoo.com>
References: <1374941312.60664.YahooMailNeo@web120906.mail.ne1.yahoo.com>
 <20130727172703.28793.2147346251.divmod.xquotient.754@top>
 <1374946589.75618.YahooMailNeo@web120905.mail.ne1.yahoo.com>
Message-ID: <1374953891.9376.YahooMailNeo@web120905.mail.ne1.yahoo.com>

Ok split my data up into smaller fragments. It still look like its reassembing the whole payload
before sending it to the client. I'm calling transport.write(partdata) multiple times with a 0.5 second delay running in a twisted thread. How can I force the write to happen straight away in twisted.
 
Sorry for all the questions.
 
Thanks,
Gazza

From: gary clark <burslem2001 at yahoo.com>
To: Twisted general discussion <twisted-python at twistedmatrix.com> 
Sent: Saturday, July 27, 2013 12:36 PM
Subject: Re: [Twisted-Python] ugh open-ssl and twisted python



Guys,

Its the MTU size. Anything bigger than 1500 bytes is getting fragmented.
Using wireshark I'm seeing TCP Previous segment lost anything bigger than 1500. However once that
happens things go south and remain there.

Oh boy one day I will learn but not today.

Cheers,
Gazza

From: "exarkun at twistedmatrix.com" <exarkun at twistedmatrix.com>
To: Twisted general discussion <twisted-python at twistedmatrix.com> 
Sent: Saturday, July 27, 2013 12:27 PM
Subject: Re: [Twisted-Python] ugh open-ssl and twisted python


On 04:08 pm, burslem2001 at yahoo.com wrote:
> Hello,
> 
> This problem has been driving me crazy for a couple of days. I'm hoping someone can shed some light
> on this. I have a twisted server its using open-ssl (using certificates) and runs on linux and communicates great with a windows client thats send messages every second.
> 
> However when I send data back to the client "sometimes" it doesnt receive the packet and there is no indication of failure at the client whats more I dont see any failure on the twisted server end. Is there any way I can tell what could cause this failure? It just look like the transport.write(data) fails just dont know why it would when receiving works like a charm.
> 
> Any help on this would relieve the pain I'm feeling right now.

Please see http://sscce.org/

Jean-Paul

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130727/ae7a4b79/attachment-0004.html>

From burslem2001 at yahoo.com  Sat Jul 27 13:38:11 2013
From: burslem2001 at yahoo.com (gary clark)
Date: Sat, 27 Jul 2013 12:38:11 -0700 (PDT)
Subject: [Twisted-Python] ugh open-ssl and twisted python
In-Reply-To: <1374946589.75618.YahooMailNeo@web120905.mail.ne1.yahoo.com>
References: <1374941312.60664.YahooMailNeo@web120906.mail.ne1.yahoo.com>
 <20130727172703.28793.2147346251.divmod.xquotient.754@top>
 <1374946589.75618.YahooMailNeo@web120905.mail.ne1.yahoo.com>
Message-ID: <1374953891.9376.YahooMailNeo@web120905.mail.ne1.yahoo.com>

Ok split my data up into smaller fragments. It still look like its reassembing the whole payload
before sending it to the client. I'm calling transport.write(partdata) multiple times with a 0.5 second delay running in a twisted thread. How can I force the write to happen straight away in twisted.
 
Sorry for all the questions.
 
Thanks,
Gazza

From: gary clark <burslem2001 at yahoo.com>
To: Twisted general discussion <twisted-python at twistedmatrix.com> 
Sent: Saturday, July 27, 2013 12:36 PM
Subject: Re: [Twisted-Python] ugh open-ssl and twisted python



Guys,

Its the MTU size. Anything bigger than 1500 bytes is getting fragmented.
Using wireshark I'm seeing TCP Previous segment lost anything bigger than 1500. However once that
happens things go south and remain there.

Oh boy one day I will learn but not today.

Cheers,
Gazza

From: "exarkun at twistedmatrix.com" <exarkun at twistedmatrix.com>
To: Twisted general discussion <twisted-python at twistedmatrix.com> 
Sent: Saturday, July 27, 2013 12:27 PM
Subject: Re: [Twisted-Python] ugh open-ssl and twisted python


On 04:08 pm, burslem2001 at yahoo.com wrote:
> Hello,
> 
> This problem has been driving me crazy for a couple of days. I'm hoping someone can shed some light
> on this. I have a twisted server its using open-ssl (using certificates) and runs on linux and communicates great with a windows client thats send messages every second.
> 
> However when I send data back to the client "sometimes" it doesnt receive the packet and there is no indication of failure at the client whats more I dont see any failure on the twisted server end. Is there any way I can tell what could cause this failure? It just look like the transport.write(data) fails just dont know why it would when receiving works like a charm.
> 
> Any help on this would relieve the pain I'm feeling right now.

Please see http://sscce.org/

Jean-Paul

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130727/ae7a4b79/attachment-0005.html>

From burslem2001 at yahoo.com  Sat Jul 27 16:12:49 2013
From: burslem2001 at yahoo.com (gary clark)
Date: Sat, 27 Jul 2013 15:12:49 -0700 (PDT)
Subject: [Twisted-Python] ugh open-ssl and twisted python
In-Reply-To: <1374953891.9376.YahooMailNeo@web120905.mail.ne1.yahoo.com>
References: <1374941312.60664.YahooMailNeo@web120906.mail.ne1.yahoo.com>
 <20130727172703.28793.2147346251.divmod.xquotient.754@top>
 <1374946589.75618.YahooMailNeo@web120905.mail.ne1.yahoo.com>
 <1374953891.9376.YahooMailNeo@web120905.mail.ne1.yahoo.com>
Message-ID: <1374963169.9787.YahooMailNeo@web120906.mail.ne1.yahoo.com>

Ok finally fixed the damn thing. I made the packets smaller and created a task in the .tac file to call a  routine that send the message parts piece by piece.
 
Thanks,
Gazza

From: gary clark <burslem2001 at yahoo.com>
To: gary clark <burslem2001 at yahoo.com>; Twisted general discussion <twisted-python at twistedmatrix.com>; Twisted general discussion <twisted-python at twistedmatrix.com> 
Sent: Saturday, July 27, 2013 2:38 PM
Subject: Re: [Twisted-Python] ugh open-ssl and twisted python



Ok split my data up into smaller fragments. It still look like its reassembing the whole payload
before sending it to the client. I'm calling transport.write(partdata) multiple times with a 0.5 second delay running in a twisted thread. How can I force the write to happen straight away in twisted.
 
Sorry for all the questions.
 
Thanks,
Gazza

From: gary clark <burslem2001 at yahoo.com>
To: Twisted general discussion <twisted-python at twistedmatrix.com> 
Sent: Saturday, July 27, 2013 12:36 PM
Subject: Re: [Twisted-Python] ugh open-ssl and twisted python



Guys,

Its the MTU size. Anything bigger than 1500 bytes is getting fragmented.
Using wireshark I'm seeing TCP Previous segment lost anything bigger than 1500. However once that
happens things go south and remain there.

Oh boy one day I will learn but not today.

Cheers,
Gazza

From: "exarkun at twistedmatrix.com" <exarkun at twistedmatrix.com>
To: Twisted general discussion <twisted-python at twistedmatrix.com> 
Sent: Saturday, July 27, 2013 12:27 PM
Subject: Re: [Twisted-Python] ugh open-ssl and twisted python


On 04:08 pm, burslem2001 at yahoo.com wrote:
> Hello,
> 
> This problem has been driving me crazy for a couple of days. I'm hoping someone can shed some light
> on this. I have a twisted server its using open-ssl (using certificates) and runs on linux and communicates great with a windows client thats send messages every second.
> 
> However when I send data back to the client "sometimes" it doesnt receive the packet and there is no indication of failure at the client whats more I dont see any failure on the twisted server end. Is there any way I can tell what could cause this failure? It just look like the transport.write(data) fails just dont know why it would when receiving works like a charm.
> 
> Any help on this would relieve the pain I'm feeling right now.

Please see http://sscce.org/

Jean-Paul

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130727/1481f220/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Jul 27 16:30:15 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 27 Jul 2013 15:30:15 -0700
Subject: [Twisted-Python] ugh open-ssl and twisted python
In-Reply-To: <1374963169.9787.YahooMailNeo@web120906.mail.ne1.yahoo.com>
References: <1374941312.60664.YahooMailNeo@web120906.mail.ne1.yahoo.com>
 <20130727172703.28793.2147346251.divmod.xquotient.754@top>
 <1374946589.75618.YahooMailNeo@web120905.mail.ne1.yahoo.com>
 <1374953891.9376.YahooMailNeo@web120905.mail.ne1.yahoo.com>
 <1374963169.9787.YahooMailNeo@web120906.mail.ne1.yahoo.com>
Message-ID: <5B8C09DA-6D4C-41EB-91AA-19F2261AB6E1@twistedmatrix.com>


On Jul 27, 2013, at 3:12 PM, gary clark <burslem2001 at yahoo.com> wrote:

> Ok finally fixed the damn thing. I made the packets smaller and created a task in the .tac file to call a  routine that send the message parts piece by piece.
>  
> Thanks,
> Gazza
> 

That's the wrong way to implement that.  You can't rely on any particular MTU over the internet, or even over one particular stream; it can change over time.  TCP connections are streams of bytes.  Please see the following FAQ:

<http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#Whyisprotocol.dataReceivedcalledwithonlypartofthedataIcalledtransport.writewith>

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130727/6fc4c0e4/attachment-0002.html>

From gjorge at google.com  Mon Jul 29 14:29:18 2013
From: gjorge at google.com (Jorge Gonzalez)
Date: Mon, 29 Jul 2013 13:29:18 -0700
Subject: [Twisted-Python] defer.gatherResults & Deferreds chaining
Message-ID: <CAN9+jDbNvJi9X2bsUswPWKf7jrzUT_b9kKo4YD6K-k-g4YuXEg@mail.gmail.com>

I'm trying to understand why a chain of Deferreds I'm dealing with hangs
and why return values from some callbacks are not always making it to other
callbacks down the chain of Deferreds.

Is it possible that there could be a race condition between Deferred
chaining and Deferred result
gathering<http://twistedmatrix.com/documents/current/core/howto/defer.html>
?
I.e., Chaining Deferreds<http://twistedmatrix.com/documents/current/core/howto/defer.html#auto13>
says
that "*If you need one Deferred to wait on another, all you need to do is
return a Deferred from a method added to addCallbacks. Specifically, if you
return Deferred B from a method added to Deferred A using A.addCallbacks,
Deferred A's processing chain will stop until Deferred B's .callback()
method is called; at that point, the next callback in A will be passed the
result of the last callback in Deferred B's processing chain at the time*."

Now at the same time,
DeferredList<http://twistedmatrix.com/documents/current/core/howto/defer.html#auto8>
 (on top of which gatherResults is built) warns that "*If you want to apply
callbacks to the individual Deferreds that go into the DeferredList, you
should be careful about when those callbacks are added. The act of adding a
Deferred to a DeferredList inserts a callback into that Deferred ... The
important thing to remember is that it is this callback which records the
value that goes into the result list handed to the DeferredList's callback.*
*Therefore, if you add a callback to the Deferred after adding the Deferred
to the DeferredList, the value returned by that callback will not be given
to the DeferredList's callback. To avoid confusion, we recommend not adding
callbacks to a Deferred once it has been used in a DeferredList*"

Given these two explanations, say I have something like this:
---------------------------------------------------------------------------
def slowFuncReturningDeferred_A():
  ...

def slowFuncReturningDeferred_B():
  ...

d = defer.Deferred()
d.addCallback(labmda _: slowFuncReturningDeferred_A())
d.addCallback(labmda _: slowFuncReturningDeferred_B())

defer.gatherResults([d])
---------------------------------------------------------------------------

Wouldn't it be possible that defer.gatherResults inserts its callback
into d before
say slowFuncReturningDeferred_B gets to run and return its own Deferred
(and therefore chain it to what gatherRestults is ultimately waiting for?).
If so, wouldn't the results returned by slowFuncReturningDeferred_B never
make it to the results gathered by defer.gatherResults?

Thanks,
Jorge
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130729/63d8b800/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Jul 29 17:04:26 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 29 Jul 2013 16:04:26 -0700
Subject: [Twisted-Python] defer.gatherResults & Deferreds chaining
In-Reply-To: <CAN9+jDbNvJi9X2bsUswPWKf7jrzUT_b9kKo4YD6K-k-g4YuXEg@mail.gmail.com>
References: <CAN9+jDbNvJi9X2bsUswPWKf7jrzUT_b9kKo4YD6K-k-g4YuXEg@mail.gmail.com>
Message-ID: <F7B75DBA-0EBD-405C-8E62-6EB4CCAA9E74@twistedmatrix.com>


On Jul 29, 2013, at 1:29 PM, Jorge Gonzalez <gjorge at google.com> wrote:

> Wouldn't it be possible that defer.gatherResults inserts its callback into d before say slowFuncReturningDeferred_B gets to run and return its own Deferred (and therefore chain it to what gatherRestults is ultimately waiting for?). If so, wouldn't the results returned by slowFuncReturningDeferred_B never make it to the results gathered by defer.gatherResults?

No, that's not what happens.  You call addCallback(lambda _: slowFunc...A()), then you call gatherResults.  That means gatherResult's callback is after slowFuncReturningA() in d's callback chain.

Can you attach an actual runnable code example with some behavior that you didn't expect, so we can actually run it and explain what's happening?  No need for you to spin the reactor or anything, just instantiate a Deferred and then fire it.

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130729/6679d3b0/attachment-0002.html>

From zipxing at hotmail.com  Tue Jul 30 02:54:10 2013
From: zipxing at hotmail.com (zipxing)
Date: Tue, 30 Jul 2013 16:54:10 +0800
Subject: [Twisted-Python] transport.write performance.
Message-ID: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>

A simple TCP echo server using epoll reactor:this server process take 60% cpu on 4000 request/s.
If use self.transport.getHandle().send instead of self.transport.write,it take 30% cpu on 4000 request/s.
Why transport.write take more user cpu?Why twisted performance so poor?(echosvr.c using libevent only take 12% cpu on 4000 request/s)
tsvr.py-----------------------------------------------------------import sys, time, random, socket, tracebackfrom twisted.internet import epollreactorepollreactor.install()from twisted.internet import defer, reactor, taskfrom twisted.internet.protocol import Protocol, Factoryfrom protocol import TCPServerProtocol
def main():        tcpprotocol = TCPServerProtocol        factory = Factory()        factory.protocol = tcpprotocol        reactor.listenTCP(9976, factory)        reactor.run()
if __name__ == '__main__':        main()
protocol.py--------------------------------------------------------- import socketimport datetimeimport tracebackfrom twisted.protocols.basic import LineReceiverfrom twisted.internet import protocol
class TCPServerProtocol(LineReceiver):        req_count = 0        req_time = datetime.datetime.now()
        def lineReceived(self, data):                TCPServerProtocol.req_count+=1                if TCPServerProtocol.req_count%10000==0:                        ct = datetime.datetime.now()                        dt = ct-TCPServerProtocol.req_time                        pps = 10000/(dt.seconds+dt.microseconds/1000000.0)                        TCPServerProtocol.req_time=ct                        print('RPS='+str(pps))                try:                        #self.transport.write(data)                        self.transport.getHandle().send(data)                except:                        traceback.print_exc()
tcli.py -----------------------------------------------------------------import sysimport socketimport tracebackimport timeimport datetime
host = 'localhost'port = 9976loopcount = 300sockcount = 5000RPS = 4000
ss=[]for x in xrange(sockcount):        ss.append(socket.socket(socket.AF_INET, socket.SOCK_STREAM))        ss[x].connect((host, port))        ss[x].settimeout(120)
for x in xrange(10000000):        st = datetime.datetime.now()        for y in xrange(loopcount):                try:                        if ss[x%sockcount]!=None:                                ss[x%sockcount].sendall('1234567890\r\n')                                ss[x%sockcount].recv(1024)                except:                        print y                        sys.exit()        time.sleep(0.1)        dt = (datetime.datetime.now()-st)        plc = loopcount/(dt.seconds+dt.microseconds/1000000.0)        print loopcount/(dt.seconds+dt.microseconds/1000000.0)        #auto adjust RPS        if plc<RPS:                if RPS-plc>50:                        loopcount+=10        else:                if plc-RPS>50:                        loopcount-=10
echosvr.c ----------------------------------------------------------------------#include <stdio.h>#include <stdlib.h>#include <errno.h>#include <assert.h>
#include <event2/event.h>#include <event2/bufferevent.h>
#define LISTEN_PORT 9976#define LISTEN_BACKLOG 32
#ifdef FD_SETSIZE#undef FD_SETSIZE#endif#define FD_SETSIZE 65536
void do_accept(evutil_socket_t listener, short event, void *arg);void read_cb(struct bufferevent *bev, void *arg);void error_cb(struct bufferevent *bev, short event, void *arg);void write_cb(struct bufferevent *bev, void *arg);
int main(int argc, char *argv[]){    int ret;    evutil_socket_t listener;    listener = socket(AF_INET, SOCK_STREAM, 0);    assert(listener > 0);    evutil_make_listen_socket_reuseable(listener);
    struct sockaddr_in sin;    sin.sin_family = AF_INET;    sin.sin_addr.s_addr = 0;    sin.sin_port = htons(LISTEN_PORT);
    if (bind(listener, (struct sockaddr *)&sin, sizeof(sin)) < 0) {        perror("bind");        return 1;    }
    if (listen(listener, LISTEN_BACKLOG) < 0) {        perror("listen");        return 1;    }
    printf ("Listening...\n");
    evutil_make_socket_nonblocking(listener);
    struct event_base *base = event_base_new();    assert(base != NULL);    struct event *listen_event;    listen_event = event_new(base, listener, EV_READ|EV_PERSIST, do_accept, (void*)base);    event_add(listen_event, NULL);    event_base_dispatch(base);
    printf("The End.");    return 0;}
void do_accept(evutil_socket_t listener, short event, void *arg){    struct event_base *base = (struct event_base *)arg;    evutil_socket_t fd;    struct sockaddr_in sin;    socklen_t slen;    fd = accept(listener, (struct sockaddr *)&sin, &slen);    if (fd < 0) {        perror("accept");        return;    }    if (fd > FD_SETSIZE) {        perror("fd > FD_SETSIZE\n");        return;    }
    printf("ACCEPT: fd = %u\n", fd);
    struct bufferevent *bev = bufferevent_socket_new(base, fd, BEV_OPT_CLOSE_ON_FREE);    bufferevent_setcb(bev, read_cb, NULL, error_cb, arg);    bufferevent_enable(bev, EV_READ|EV_WRITE|EV_PERSIST);}
void read_cb(struct bufferevent *bev, void *arg){#define MAX_LINE    256    char line[MAX_LINE+1];    int n;    evutil_socket_t fd = bufferevent_getfd(bev);
    while (n = bufferevent_read(bev, line, MAX_LINE), n > 0) {        line[n] = '\0';        //printf("fd=%u, read line: %s\n", fd, line);
        bufferevent_write(bev, line, n);    }}
void write_cb(struct bufferevent *bev, void *arg) {}
void error_cb(struct bufferevent *bev, short event, void *arg){    evutil_socket_t fd = bufferevent_getfd(bev);    printf("fd = %u, ", fd);    if (event & BEV_EVENT_TIMEOUT) {        printf("Timed out\n"); //if bufferevent_set_timeouts() called    }    else if (event & BEV_EVENT_EOF) {        printf("connection closed\n");    }    else if (event & BEV_EVENT_ERROR) {        printf("some other error\n");    }    bufferevent_free(bev);} 		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130730/70353e04/attachment-0002.html>

From zipxing at hotmail.com  Tue Jul 30 02:58:17 2013
From: zipxing at hotmail.com (zipxing)
Date: Tue, 30 Jul 2013 16:58:17 +0800
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
Message-ID: <SNT131-W42743A6AF69DF292E83ABFB4560@phx.gbl>

tsvr.py
-----------------------------------------------------------
import sys, time, random, socket, traceback
from twisted.internet import epollreactor
epollreactor.install()
from twisted.internet import defer, reactor, task
from twisted.internet.protocol import Protocol, Factory
from protocol import TCPServerProtocol

def main():
        tcpprotocol = TCPServerProtocol
        factory = Factory()
        factory.protocol = tcpprotocol
        reactor.listenTCP(9976, factory)
        reactor.run()

if __name__ == '__main__':
        main()

protocol.py
--------------------------------------------------------- 
import socket
import datetime
import traceback
from twisted.protocols.basic import LineReceiver
from twisted.internet import protocol

class TCPServerProtocol(LineReceiver):
        req_count = 0
        req_time = datetime.datetime.now()

        def lineReceived(self, data):
                TCPServerProtocol.req_count+=1
                if TCPServerProtocol.req_count%10000==0:
                        ct = datetime.datetime.now()
                        dt = ct-TCPServerProtocol.req_time
                        pps = 10000/(dt.seconds+dt.microseconds/1000000.0)
                        TCPServerProtocol.req_time=ct
                        print('RPS='+str(pps))
                try:
                        #self.transport.write(data)
                        self.transport.getHandle().send(data)
                except:
                        traceback.print_exc()

tcli.py 
-----------------------------------------------------------------
import sys
import socket
import traceback
import time
import datetime

host = 'localhost'
port = 9976
loopcount = 300
sockcount = 5000
RPS = 4000

ss=[]
for x in xrange(sockcount):
        ss.append(socket.socket(socket.AF_INET, socket.SOCK_STREAM))
        ss[x].connect((host, port))
        ss[x].settimeout(120)

for x in xrange(10000000):
        st = datetime.datetime.now()
        for y in xrange(loopcount):
                try:
                        if ss[x%sockcount]!=None:
                                ss[x%sockcount].sendall('1234567890\r\n')
                                ss[x%sockcount].recv(1024)
                except:
                        print y
                        sys.exit()
        time.sleep(0.1)
        dt = (datetime.datetime.now()-st)
        plc = loopcount/(dt.seconds+dt.microseconds/1000000.0)
        print loopcount/(dt.seconds+dt.microseconds/1000000.0)
        #auto adjust RPS
        if plc<RPS:
                if RPS-plc>50:
                        loopcount+=10
        else:
                if plc-RPS>50:
                        loopcount-=10

echosvr.c 
----------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <assert.h>

#include <event2/event.h>
#include <event2/bufferevent.h>

#define LISTEN_PORT 9976
#define LISTEN_BACKLOG 32

#ifdef FD_SETSIZE
#undef FD_SETSIZE
#endif
#define FD_SETSIZE 65536

void do_accept(evutil_socket_t listener, short event, void *arg);
void read_cb(struct bufferevent *bev, void *arg);
void error_cb(struct bufferevent *bev, short event, void *arg);
void write_cb(struct bufferevent *bev, void *arg);

int main(int argc, char *argv[])
{
    int ret;
    evutil_socket_t listener;
    listener = socket(AF_INET, SOCK_STREAM, 0);
    assert(listener> 0);
    evutil_make_listen_socket_reuseable(listener);

    struct sockaddr_in sin;
    sin.sin_family = AF_INET;
    sin.sin_addr.s_addr = 0;
    sin.sin_port = htons(LISTEN_PORT);

    if (bind(listener, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
        perror("bind");
        return 1;
    }

    if (listen(listener, LISTEN_BACKLOG) < 0) {
        perror("listen");
        return 1;
    }

    printf ("Listening...\n");

    evutil_make_socket_nonblocking(listener);

    struct event_base *base = event_base_new();
    assert(base != NULL);
    struct event *listen_event;
    listen_event = event_new(base, listener, EV_READ|EV_PERSIST, do_accept, (void*)base);
    event_add(listen_event, NULL);
    event_base_dispatch(base);

    printf("The End.");
    return 0;
}

void do_accept(evutil_socket_t listener, short event, void *arg)
{
    struct event_base *base = (struct event_base *)arg;
    evutil_socket_t fd;
    struct sockaddr_in sin;
    socklen_t slen;
    fd = accept(listener, (struct sockaddr *)&sin, &slen);
    if (fd < 0) {
        perror("accept");
        return;
    }
    if (fd> FD_SETSIZE) {
        perror("fd> FD_SETSIZE\n");
        return;
    }

    printf("ACCEPT: fd = %u\n", fd);

    struct bufferevent *bev = bufferevent_socket_new(base, fd, BEV_OPT_CLOSE_ON_FREE);
    bufferevent_setcb(bev, read_cb, NULL, error_cb, arg);
    bufferevent_enable(bev, EV_READ|EV_WRITE|EV_PERSIST);
}

void read_cb(struct bufferevent *bev, void *arg)
{
#define MAX_LINE    256
    char line[MAX_LINE+1];
    int n;
    evutil_socket_t fd = bufferevent_getfd(bev);

    while (n = bufferevent_read(bev, line, MAX_LINE), n> 0) {
        line[n] = '\0';
        //printf("fd=%u, read line: %s\n", fd, line);

        bufferevent_write(bev, line, n);
    }
}

void write_cb(struct bufferevent *bev, void *arg) {}

void error_cb(struct bufferevent *bev, short event, void *arg)
{
    evutil_socket_t fd = bufferevent_getfd(bev);
    printf("fd = %u, ", fd);
    if (event & BEV_EVENT_TIMEOUT) {
        printf("Timed out\n"); //if bufferevent_set_timeouts() called
    }
    else if (event & BEV_EVENT_EOF) {
        printf("connection closed\n");
    }
    else if (event & BEV_EVENT_ERROR) {
        printf("some other error\n");
    }
    bufferevent_free(bev);
} 		 	   		  


From exarkun at twistedmatrix.com  Tue Jul 30 03:31:39 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 30 Jul 2013 09:31:39 -0000
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
Message-ID: <20130730093139.26068.1052162497.divmod.xquotient.2@top>

On 08:54 am, zipxing at hotmail.com wrote:
>A simple TCP echo server using epoll reactor:this server process take 
>60% cpu on 4000 request/s.
>If use self.transport.getHandle().send instead of 
>self.transport.write,it take 30% cpu on 4000 request/s.
>Why transport.write take more user cpu?Why twisted performance so poor?

`transport.write` will actually try to deliver your data.  `send` will 
as likely drop it on the floor as deliver it.  Correctness sometimes 
costs a little more CPU time.

Jean-Paul



From _ at lvh.io  Tue Jul 30 05:09:33 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 30 Jul 2013 13:09:33 +0200
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
Message-ID: <CAE_Hg6ZCScAj_RkcZVJ3L3SKiKQ3tNL6DFG0Hzhj7RnfMJ44Yg@mail.gmail.com>

Hi zipxing,

You don't mention the interpreter. Is it CPython? What kind of results do
you get trying it on PyPy?

Also, you don't need to specify epollreactor. Recent versions of twisted
will automagically choose the appropriate backend. I fixed this and some
other cleanups and got:

----
from time import clock
from twisted.internet import protocol, reactor
from twisted.protocols import basic

class MeasuringEchoProtocol(basic.LineReceiver):
    MEASUREMENT_INTERVAL = 1000

    def lineReceived(self, data):
        self.factory.requests += 1
        if self.factory.requests % self.MEASUREMENT_INTERVAL == 0:
            print "RPS: {0}".format(self.factory.requests / clock())

        self.transport.write(data)



class ServerFactory(protocol.ServerFactory):
    protocol = MeasuringEchoProtocol

    def __init__(self):
        self.requests = 0



def main():
    reactor.listenTCP(9976, ServerFactory())
    clock()
    reactor.run()

if __name__ == '__main__':
    main()
----

Keep in mind that due to setup time few requests get handled right when it
starts, so the server RPS will take some time to balance out. On my wimpy
laptop on battery power, that was around 420.274404782.

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130730/92a407f0/attachment-0002.html>

From p.mayers at imperial.ac.uk  Tue Jul 30 06:44:21 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 30 Jul 2013 13:44:21 +0100
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <20130730093139.26068.1052162497.divmod.xquotient.2@top>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
 <20130730093139.26068.1052162497.divmod.xquotient.2@top>
Message-ID: <51F7B525.8070206@imperial.ac.uk>

On 30/07/13 10:31, exarkun at twistedmatrix.com wrote:

> `transport.write` will actually try to deliver your data.  `send` will
> as likely drop it on the floor as deliver it.

For TCP?



From _ at lvh.io  Tue Jul 30 06:55:10 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 30 Jul 2013 14:55:10 +0200
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <51F7B525.8070206@imperial.ac.uk>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
 <20130730093139.26068.1052162497.divmod.xquotient.2@top>
 <51F7B525.8070206@imperial.ac.uk>
Message-ID: <CAE_Hg6bd2EHmWUwx=eOwOyJK2UKkCtdLpmaBrpdBgV06+QoLOA@mail.gmail.com>

On Tue, Jul 30, 2013 at 2:44 PM, Phil Mayers <p.mayers at imperial.ac.uk>wrote:

> For TCP?
>

Yes. See also the difference between socket.send and socket.sendall :)

socket.send returns a number of bytes that it actually sent.

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130730/5842187a/attachment-0002.html>

From p.mayers at imperial.ac.uk  Tue Jul 30 07:31:56 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 30 Jul 2013 14:31:56 +0100
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <CAE_Hg6bd2EHmWUwx=eOwOyJK2UKkCtdLpmaBrpdBgV06+QoLOA@mail.gmail.com>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
 <20130730093139.26068.1052162497.divmod.xquotient.2@top>
 <51F7B525.8070206@imperial.ac.uk>
 <CAE_Hg6bd2EHmWUwx=eOwOyJK2UKkCtdLpmaBrpdBgV06+QoLOA@mail.gmail.com>
Message-ID: <51F7C04C.4010506@imperial.ac.uk>

On 30/07/13 13:55, Laurens Van Houtven wrote:
> On Tue, Jul 30, 2013 at 2:44 PM, Phil Mayers <p.mayers at imperial.ac.uk
> <mailto:p.mayers at imperial.ac.uk>> wrote:
>
>     For TCP?
>
>
> Yes. See also the difference between socket.send and socket.sendall :)
>
> socket.send returns a number of bytes that it actually sent.

Sure - FD writes don't, in general, have to take your entire buffer (or 
any of it). But once accepted, the data is no more or less likely to be 
dropped than data sent transport.write

Obviously if the OP using "send" without checking the return value, 
they're doing it wrong!



From _ at lvh.io  Tue Jul 30 07:43:32 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 30 Jul 2013 15:43:32 +0200
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <51F7C04C.4010506@imperial.ac.uk>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
 <20130730093139.26068.1052162497.divmod.xquotient.2@top>
 <51F7B525.8070206@imperial.ac.uk>
 <CAE_Hg6bd2EHmWUwx=eOwOyJK2UKkCtdLpmaBrpdBgV06+QoLOA@mail.gmail.com>
 <51F7C04C.4010506@imperial.ac.uk>
Message-ID: <CAE_Hg6ZUqULepwSok1Xnwp3apCeU11kVVUSV7UkKziJKL0Youg@mail.gmail.com>

On Tue, Jul 30, 2013 at 3:31 PM, Phil Mayers <p.mayers at imperial.ac.uk>wrote:

> Obviously if the OP using "send" without checking the return value,
> they're doing it wrong!
>

Right, but that's what the OP's example does :)

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130730/6ac9714c/attachment-0002.html>

From gjorge at google.com  Tue Jul 30 16:40:54 2013
From: gjorge at google.com (Jorge Gonzalez)
Date: Tue, 30 Jul 2013 15:40:54 -0700
Subject: [Twisted-Python] defer.gatherResults & Deferreds chaining
In-Reply-To: <F7B75DBA-0EBD-405C-8E62-6EB4CCAA9E74@twistedmatrix.com>
References: <CAN9+jDbNvJi9X2bsUswPWKf7jrzUT_b9kKo4YD6K-k-g4YuXEg@mail.gmail.com>
 <F7B75DBA-0EBD-405C-8E62-6EB4CCAA9E74@twistedmatrix.com>
Message-ID: <CAN9+jDaRMydmvkmtJeW54DorkGrXvCZAKP30QXxa4dwea5mk0g@mail.gmail.com>

Thanks Glyph.
I actually am not able to reduce the behavior to a simpler runnable example
yet, and that's why I tried running my theory first through this list.
I did try a simple example just instantiating some Deferreds, firing them
and gathering their results into a DeferredList (no reactor involved) and
what you're saying holds true. So I'm working on getting a simpler version
of my code that exposes the behavior I'm seeing and will post it once I
have it.

Jorge


On Mon, Jul 29, 2013 at 4:04 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Jul 29, 2013, at 1:29 PM, Jorge Gonzalez <gjorge at google.com> wrote:
>
>  Wouldn't it be possible that defer.gatherResults inserts its callback
> into d before say slowFuncReturningDeferred_B gets to run and return its
> own Deferred (and therefore chain it to what gatherRestults is ultimately
> waiting for?). If so, wouldn't the results returned by
> slowFuncReturningDeferred_B never make it to the results gathered by
> defer.gatherResults?
>
>
> No, that's not what happens.  You call addCallback(lambda _:
> slowFunc...A()), then you call gatherResults.  That means gatherResult's
> callback is after slowFuncReturningA() in d's callback chain.
>
> Can you attach an actual runnable code example with some behavior that you
> didn't expect, so we can actually run it and explain what's happening?  No
> need for you to spin the reactor or anything, just instantiate a Deferred
> and then fire it.
>
> -glyph
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130730/008fefca/attachment-0002.html>

From zipxing at hotmail.com  Tue Jul 30 20:15:26 2013
From: zipxing at hotmail.com (zipxing)
Date: Wed, 31 Jul 2013 10:15:26 +0800
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <CAE_Hg6ZCScAj_RkcZVJ3L3SKiKQ3tNL6DFG0Hzhj7RnfMJ44Yg@mail.gmail.com>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>,
 <CAE_Hg6ZCScAj_RkcZVJ3L3SKiKQ3tNL6DFG0Hzhj7RnfMJ44Yg@mail.gmail.com>
Message-ID: <SNT147-W42CE88370905CE07E658C2B4570@phx.gbl>

Great! pypy take 20% cpu, 3x fast than cpython!
Thanks!

A little problem: cjson and ujson can't install to pypy...

ZipXing

________________________________
> From: _ at lvh.io 
> Date: Tue, 30 Jul 2013 13:09:33 +0200 
> To: twisted-python at twistedmatrix.com 
> Subject: Re: [Twisted-Python] transport.write performance. 
> 
> Hi zipxing, 
> 
> You don't mention the interpreter. Is it CPython? What kind of results 
> do you get trying it on PyPy? 
> 
> Also, you don't need to specify epollreactor. Recent versions of 
> twisted will automagically choose the appropriate backend. I fixed this 
> and some other cleanups and got: 
> 
> ---- 
> from time import clock 
> from twisted.internet import protocol, reactor 
> from twisted.protocols import basic 
> 
> class MeasuringEchoProtocol(basic.LineReceiver): 
> MEASUREMENT_INTERVAL = 1000 
> 
> def lineReceived(self, data): 
> self.factory.requests += 1 
> if self.factory.requests % self.MEASUREMENT_INTERVAL == 0: 
> print "RPS: {0}".format(self.factory.requests / clock()) 
> 
> self.transport.write(data) 
> 
> 
> 
> class ServerFactory(protocol.ServerFactory): 
> protocol = MeasuringEchoProtocol 
> 
> def __init__(self): 
> self.requests = 0 
> 
> 
> 
> def main(): 
> reactor.listenTCP(9976, ServerFactory()) 
> clock() 
> reactor.run() 
> 
> if __name__ == '__main__': 
> main() 
> ---- 
> 
> Keep in mind that due to setup time few requests get handled right when 
> it starts, so the server RPS will take some time to balance out. On my 
> wimpy laptop on battery power, that was around 420.274404782. 
> 
> cheers 
> lvh 
> 
> _______________________________________________ Twisted-Python mailing 
> list Twisted-Python at twistedmatrix.com 
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python 		 	   		  

From _ at lvh.io  Wed Jul 31 01:22:53 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 31 Jul 2013 09:22:53 +0200
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <SNT147-W42CE88370905CE07E658C2B4570@phx.gbl>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
 <CAE_Hg6ZCScAj_RkcZVJ3L3SKiKQ3tNL6DFG0Hzhj7RnfMJ44Yg@mail.gmail.com>
 <SNT147-W42CE88370905CE07E658C2B4570@phx.gbl>
Message-ID: <CAE_Hg6bYUeHAqd7SjdRkPg8s_UXv9Qn5drxY6CbWanCBoLYdhA@mail.gmail.com>

On Jul 31, 2013 4:19 AM, "zipxing" <zipxing at hotmail.com> wrote:
>
> Great! pypy take 20% cpu, 3x fast than cpython!
> Thanks!
>
> A little problem: cjson and ujson can't install to pypy...

What's wrong with the builtin json module?

> ZipXing
>
> ________________________________
> > From: _ at lvh.io
> > Date: Tue, 30 Jul 2013 13:09:33 +0200
> > To: twisted-python at twistedmatrix.com
> > Subject: Re: [Twisted-Python] transport.write performance.
> >
> > Hi zipxing,
> >
> > You don't mention the interpreter. Is it CPython? What kind of results
> > do you get trying it on PyPy?
> >
> > Also, you don't need to specify epollreactor. Recent versions of
> > twisted will automagically choose the appropriate backend. I fixed this
> > and some other cleanups and got:
> >
> > ----
> > from time import clock
> > from twisted.internet import protocol, reactor
> > from twisted.protocols import basic
> >
> > class MeasuringEchoProtocol(basic.LineReceiver):
> > MEASUREMENT_INTERVAL = 1000
> >
> > def lineReceived(self, data):
> > self.factory.requests += 1
> > if self.factory.requests % self.MEASUREMENT_INTERVAL == 0:
> > print "RPS: {0}".format(self.factory.requests / clock())
> >
> > self.transport.write(data)
> >
> >
> >
> > class ServerFactory(protocol.ServerFactory):
> > protocol = MeasuringEchoProtocol
> >
> > def __init__(self):
> > self.requests = 0
> >
> >
> >
> > def main():
> > reactor.listenTCP(9976, ServerFactory())
> > clock()
> > reactor.run()
> >
> > if __name__ == '__main__':
> > main()
> > ----
> >
> > Keep in mind that due to setup time few requests get handled right when
> > it starts, so the server RPS will take some time to balance out. On my
> > wimpy laptop on battery power, that was around 420.274404782.
> >
> > cheers
> > lvh
> >
> > _______________________________________________ Twisted-Python mailing
> > list Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130731/122b8e71/attachment-0002.html>

From gjorge at google.com  Wed Jul 31 11:08:01 2013
From: gjorge at google.com (Jorge Gonzalez)
Date: Wed, 31 Jul 2013 10:08:01 -0700
Subject: [Twisted-Python] defer.gatherResults & Deferreds chaining
In-Reply-To: <CAN9+jDaRMydmvkmtJeW54DorkGrXvCZAKP30QXxa4dwea5mk0g@mail.gmail.com>
References: <CAN9+jDbNvJi9X2bsUswPWKf7jrzUT_b9kKo4YD6K-k-g4YuXEg@mail.gmail.com>
 <F7B75DBA-0EBD-405C-8E62-6EB4CCAA9E74@twistedmatrix.com>
 <CAN9+jDaRMydmvkmtJeW54DorkGrXvCZAKP30QXxa4dwea5mk0g@mail.gmail.com>
Message-ID: <CAN9+jDaRkgR4MeJ+4VbACKJBsgYiK3jJxQrCZrqVnP=CQQnw0Q@mail.gmail.com>

I found the root cause, and it has nothing to do with Deferreds nor
DeferredLists. It was something else in my code unrelated to twisted.

Thanks!
Jorge


On Tue, Jul 30, 2013 at 3:40 PM, Jorge Gonzalez <gjorge at google.com> wrote:

> Thanks Glyph.
> I actually am not able to reduce the behavior to a simpler runnable
> example yet, and that's why I tried running my theory first through this
> list.
> I did try a simple example just instantiating some Deferreds, firing them
> and gathering their results into a DeferredList (no reactor involved) and
> what you're saying holds true. So I'm working on getting a simpler version
> of my code that exposes the behavior I'm seeing and will post it once I
> have it.
>
> Jorge
>
>
> On Mon, Jul 29, 2013 at 4:04 PM, Glyph <glyph at twistedmatrix.com> wrote:
>
>>
>> On Jul 29, 2013, at 1:29 PM, Jorge Gonzalez <gjorge at google.com> wrote:
>>
>>  Wouldn't it be possible that defer.gatherResults inserts its callback
>> into d before say slowFuncReturningDeferred_B gets to run and return its
>> own Deferred (and therefore chain it to what gatherRestults is ultimately
>> waiting for?). If so, wouldn't the results returned by
>> slowFuncReturningDeferred_B never make it to the results gathered by
>> defer.gatherResults?
>>
>>
>> No, that's not what happens.  You call addCallback(lambda _:
>> slowFunc...A()), then you call gatherResults.  That means gatherResult's
>> callback is after slowFuncReturningA() in d's callback chain.
>>
>> Can you attach an actual runnable code example with some behavior that
>> you didn't expect, so we can actually run it and explain what's happening?
>>  No need for you to spin the reactor or anything, just instantiate a
>> Deferred and then fire it.
>>
>> -glyph
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130731/b3523e29/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Jul 31 17:39:17 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 31 Jul 2013 16:39:17 -0700
Subject: [Twisted-Python] defer.gatherResults & Deferreds chaining
In-Reply-To: <CAN9+jDaRkgR4MeJ+4VbACKJBsgYiK3jJxQrCZrqVnP=CQQnw0Q@mail.gmail.com>
References: <CAN9+jDbNvJi9X2bsUswPWKf7jrzUT_b9kKo4YD6K-k-g4YuXEg@mail.gmail.com>
 <F7B75DBA-0EBD-405C-8E62-6EB4CCAA9E74@twistedmatrix.com>
 <CAN9+jDaRMydmvkmtJeW54DorkGrXvCZAKP30QXxa4dwea5mk0g@mail.gmail.com>
 <CAN9+jDaRkgR4MeJ+4VbACKJBsgYiK3jJxQrCZrqVnP=CQQnw0Q@mail.gmail.com>
Message-ID: <92062EA0-5E65-4449-B12F-D01A89CE774A@twistedmatrix.com>


On Jul 31, 2013, at 10:08 AM, Jorge Gonzalez <gjorge at google.com> wrote:

> I found the root cause, and it has nothing to do with Deferreds nor DeferredLists. It was something else in my code unrelated to twisted.

As is often the case :).

This is why we ask for complete examples.  Just because you see Twisted frames in your traceback does not mean Twisted is the cause of the bug :).

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130731/a0bb9e56/attachment-0002.html>

From kylerzhang11 at gmail.com  Wed Jul 31 23:46:17 2013
From: kylerzhang11 at gmail.com (zhang kai)
Date: Thu, 1 Aug 2013 13:46:17 +0800
Subject: [Twisted-Python]  TestInternet2.testPickledTimer Failed
Message-ID: <CAK_130QFSBeg54ovf6aWG8gJjd2hdjV5s15iDXi=37aWQH+g1Q@mail.gmail.com>

Hi,

I'm a Google Summer of Code intern working on "Deferred Cancellation"
project. I'm recently working on adding cancellation support to
twisted.internet.task.LoopingCall.

However, after I added the canceller to LoopingCall.deferred,
the twisted.test.test_application.TestInternet2.testPickledTimer failed due
to a PicklingError.

My branch is loopingcall-deferred-cancellation-6656. Here is the diff of my
code: http://twistedmatrix.com/~diffresource.twistd/6656

Here is the error message:

===============================================================================
[ERROR]
Traceback (most recent call last):
  File
"/home/kai/Projects/GSoC/DeferredCancellation/Twisted/branches/loopingcall-deferred-cancellation-6656/twisted/test/test_application.py",
line 487, in testPickledTimer
    s = pickle.dumps(t0)
  File "/usr/lib/python2.7/pickle.py", line 1374, in dumps
    Pickler(file, protocol).dump(obj)
  File "/usr/lib/python2.7/pickle.py", line 224, in dump
    self.save(obj)
  File "/usr/lib/python2.7/pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "/usr/lib/python2.7/pickle.py", line 725, in save_inst
    save(stuff)
  File "/usr/lib/python2.7/pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "/usr/lib/python2.7/pickle.py", line 649, in save_dict
    self._batch_setitems(obj.iteritems())
  File "/usr/lib/python2.7/pickle.py", line 663, in _batch_setitems
    save(v)
  File "/usr/lib/python2.7/pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "/usr/lib/python2.7/pickle.py", line 725, in save_inst
    save(stuff)
  File "/usr/lib/python2.7/pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "/usr/lib/python2.7/pickle.py", line 649, in save_dict
    self._batch_setitems(obj.iteritems())
  File "/usr/lib/python2.7/pickle.py", line 663, in _batch_setitems
    save(v)
  File "/usr/lib/python2.7/pickle.py", line 331, in save
    self.save_reduce(obj=obj, *rv)
  File "/usr/lib/python2.7/pickle.py", line 401, in save_reduce
    save(args)
  File "/usr/lib/python2.7/pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "/usr/lib/python2.7/pickle.py", line 562, in save_tuple
    save(element)
  File "/usr/lib/python2.7/pickle.py", line 331, in save
    self.save_reduce(obj=obj, *rv)
  File "/usr/lib/python2.7/pickle.py", line 419, in save_reduce
    save(state)
  File "/usr/lib/python2.7/pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "/usr/lib/python2.7/pickle.py", line 649, in save_dict
    self._batch_setitems(obj.iteritems())
  File "/usr/lib/python2.7/pickle.py", line 663, in _batch_setitems
    save(v)
  File "/usr/lib/python2.7/pickle.py", line 331, in save
    self.save_reduce(obj=obj, *rv)
  File "/usr/lib/python2.7/pickle.py", line 419, in save_reduce
    save(state)
  File "/usr/lib/python2.7/pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "/usr/lib/python2.7/pickle.py", line 649, in save_dict
    self._batch_setitems(obj.iteritems())
  File "/usr/lib/python2.7/pickle.py", line 663, in _batch_setitems
    save(v)
  File "/usr/lib/python2.7/pickle.py", line 331, in save
    self.save_reduce(obj=obj, *rv)
  File "/usr/lib/python2.7/pickle.py", line 419, in save_reduce
    save(state)
  File "/usr/lib/python2.7/pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "/usr/lib/python2.7/pickle.py", line 649, in save_dict
    self._batch_setitems(obj.iteritems())
  File "/usr/lib/python2.7/pickle.py", line 663, in _batch_setitems
    save(v)
  File "/usr/lib/python2.7/pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "/usr/lib/python2.7/pickle.py", line 748, in save_global
    (obj, module, name))
pickle.PicklingError: Can't pickle <function <lambda> at 0x8f1fb8c>: it's
not found as twisted.internet.posixbase.<lambda>

twisted.test.test_application.TestInternet2.testPickledTimer
===============================================================================

I thought the reason was the circular references. However I searched about
it and found that pickle could handle the circular reference cases. But the
only significant change is that after I added the canceller, there is a
circular reference between LoopingCall and LoopingCall.deferred. So I don't
know what's the problem. How can I fix this?

Thanks,
-Kai
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130801/59955434/attachment-0002.html>

