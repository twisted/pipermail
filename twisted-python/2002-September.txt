From glyph at twistedmatrix.com  Sun Sep  1 05:45:08 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 01 Sep 2002 04:45:08 -0500 (CDT)
Subject: [Twisted-Python] random security thoughts
Message-ID: <20020901.044508.74753285.glyph@twistedmatrix.com>


Hi Twistedistanians,

Here is some internal rambling I've been doing about fixing up PB to be more
bulletproof.  Apologies if it's not coherent to anyone else but I figured I'd
better mention the idea on the list and see of someone smarter than me can fill
in a gap or two :).

So, I think I understand what the potential security problem is with PB --
specifically, it's in Jelly, because the way that types are registered with the
serializer is a very primitive ACL.

This violates POLA for all PB method calls in a subtle (and usually harmless)
way -- the Broker object, which deserializes Jelly types, can effectively
receive arbitrary messages from any object on the other end of the connection.
pb.Broker is the deputy which can become confused.

The trouble is that this is so damn *handy*.  If we want to enforce correct
authority boundaries here, some form of IDL is necessary, since a method can
only (return values, pass arguments) of appropriately declared types, because
those types are methods sent to the serializer.

Is there some middle ground?  Currently there's quite a bit of room for
malicious confusion of networked code, since arbitrary types may be passed to
arbitrary methods, and there is only one serialization/deserialization
registry.  However, full IDL would make publishing remote methods and new
copyable types rather tedious (and more fragile across different versions of
network interface for a given program).  You'd also need a full replication of
the server-side class hierarchy on the client in order to allow any kind of
polymorphism at all.  So I would view IDL as correct and complete for POLA
purposes, but too tedious to be practical.  I figure there's got to be some
equivalent here that would be more like UNIX's half-hearted ACLs and less like
a superuser bit for various serializeable types.

This wouldn't be perfect, but given how little deserialization methods
typically do it's probably OK.  Unfortunately I can't think of what form such a
compromise would take.  Easy enough to understand, but still possible to ensure
against obvious abuses.  Any suggestions?

-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020901/a6ef99f7/attachment.pgp 

From andrew-twisted at puzzling.org  Sun Sep  1 22:46:49 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 2 Sep 2002 12:46:49 +1000
Subject: [Twisted-Python] ReconnectingClientFactory & stopFactory
Message-ID: <20020902024649.GC2955@ritsuko.xware.cx>

I think there might be a slight issue with the current client API.  If
the API is fine, the docs need improving! :)

Say you've subclasses ReconnectingClientFactory to connect to a database
in startFactory, disconnect in stopFactory.  If takes several connection
attempts, then multiple connections to the database will be opened and
closed (assuming this factory is only constructing one client, which is
the usual case, I suspect).

The problem appears to be that BaseConnector (in
twisted.internet.default) will always call stopFactory from
connectionLost/connectionFailed if it's state is 'disconnected', even if
it is between retries, because the connector knows nothing of the retry
logic in the Factory.

Does this sound like a geniune flaw, or am I misunderstanding something?
:)

I'm wondering if perhaps the solution would be to add a method (or
methods) to IConnector that let clientConnectionLost and
clientConnectionFailed signal to the connector that it isn't done using
that connector yet.

-Andrew.




From twisted at itamarst.org  Mon Sep  2 00:00:17 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 02 Sep 2002 00:00:17 -0400
Subject: [Twisted-Python] ReconnectingClientFactory & stopFactory
References: <20020902024649.GC2955@ritsuko.xware.cx>
Message-ID: <3D72E251.7020608@itamarst.org>

Andrew Bennetts wrote:

> The problem appears to be that BaseConnector (in
> twisted.internet.default) will always call stopFactory from
> connectionLost/connectionFailed if it's state is 'disconnected', even if
> it is between retries, because the connector knows nothing of the retry
> logic in the Factory.

It calls *doStop*, not stopFactory. So if you want to change when 
stopFactory is called, just override the factory's doStop wuith your own 
behaviour.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
Available for Python, Twisted, Zope and Java consulting




From glyph at twistedmatrix.com  Mon Sep  2 00:18:04 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 01 Sep 2002 23:18:04 -0500 (CDT)
Subject: [Twisted-Python] ReconnectingClientFactory & stopFactory
In-Reply-To: <3D72E251.7020608@itamarst.org>
References: <20020902024649.GC2955@ritsuko.xware.cx>
	<3D72E251.7020608@itamarst.org>
Message-ID: <20020901.231804.126576262.glyph@twistedmatrix.com>


On Mon, 02 Sep 2002 00:00:17 -0400, Itamar Shtull-Trauring <twisted at itamarst.org> wrote:
> It calls *doStop*, not stopFactory. So if you want to change when 
> stopFactory is called, just override the factory's doStop wuith your own 
> behaviour.

This is probably a pretty bad name for that method.  How about we call it
"doStopFactory" instead?  I don't remember why I made the name so ambiguous in
the first place.

-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020901/e618bc82/attachment.pgp 

From twisted at itamarst.org  Mon Sep  2 00:43:20 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 02 Sep 2002 00:43:20 -0400
Subject: [Twisted-Python] ReconnectingClientFactory & stopFactory
References: <20020902024649.GC2955@ritsuko.xware.cx>	<3D72E251.7020608@itamarst.org> <20020901.231804.126576262.glyph@twistedmatrix.com>
Message-ID: <3D72EC68.9070408@itamarst.org>

Glyph Lefkowitz wrote:

> This is probably a pretty bad name for that method.  How about we call it
> "doStopFactory" instead?  I don't remember why I made the name so ambiguous in
> the first place.

*shrug*

Just do it ASAP so it's in before 1.0.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
Available for Python, Twisted, Zope and Java consulting




From andrew-twisted at puzzling.org  Mon Sep  2 00:52:18 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 2 Sep 2002 14:52:18 +1000
Subject: [Twisted-Python] ReconnectingClientFactory & stopFactory
In-Reply-To: <3D72E251.7020608@itamarst.org>
References: <20020902024649.GC2955@ritsuko.xware.cx> <3D72E251.7020608@itamarst.org>
Message-ID: <20020902045218.GE2955@ritsuko.xware.cx>

On Mon, Sep 02, 2002 at 12:00:17AM -0400, Itamar Shtull-Trauring wrote:
> 
> It calls *doStop*, not stopFactory. So if you want to change when 
> stopFactory is called, just override the factory's doStop wuith your own 
> behaviour.

Oh duh, of course.  Thanks.

-Andrew.




From glyph at twistedmatrix.com  Mon Sep  2 05:07:45 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 02 Sep 2002 04:07:45 -0500 (CDT)
Subject: [Twisted-Python] Can anyone recommend a sensible XML parser for Python?
Message-ID: <20020902.040745.78701595.glyph@twistedmatrix.com>


So, I'm really pretty discouraged and disgusted with the state of XML tools
that ship with Python today.  Mainly, they do surprising and insecure things
when I try to parse XML, and I don't understand how to tell what will and won't
work between various versions of them.

I think my requirements of an XML parser are pretty simple.  Here are the
basics of what I want it to do:


    * adhere to a subset of both DOM and SAX APIs for both event-based and
      synchronous processing of XML data

    * allow creation of DOM trees from fragments of an XML stream so that
      discrete "packets" can be processed, a-la jabber "xml streams"

    * perform relatively well (optional)

More importantly, here are the things I *don't* want an XML parser to do:

    * validate in any way, ever, at all

    * fetch DTDs or otherwise do helpful things like eval()ing python code
      found in random attributes in the node tree

    * break necessary extensions to SAX/DOM and subtleties of API compatibility
      between versions, making my code do lots of checks

    * look for Unicode flag characters

    * pay attention to !DOCTYPE and ?xml directives

    * split Text nodes into multiple pieces on newlines or whitespace

    * pay attention specially to any attribute, like "xmlns"

    * dump core

Does anybody know of an XML parser that meets these requirements or am I going
to have to write my own?

-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020902/3b6dd8b1/attachment.pgp 

From twisted at itamarst.org  Mon Sep  2 11:00:16 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 02 Sep 2002 11:00:16 -0400
Subject: [Twisted-Python] [Fwd: Re: Twisted docs (was Re: Python IPC options)]
Message-ID: <3D737D00.8060707@itamarst.org>


-------- Original Message --------
Subject: Re: Twisted docs (was Re: Python IPC options)
Date: 2 Sep 2002 02:51:06 -0700
From: hwlgw at hotmail.com (Will Stuyvesant)
Organization: http://groups.google.com/
Newsgroups: comp.lang.python
References: <1030829572.943495 at irys.nyx.net> 
<3D715160.2020109 at itamarst.org_NOSPAM> 
<cb035744.0209011308.7b4b3ae2 at posting.google.com> 
<3D728386.2060908 at itamarst.org_NOSPAM>

Itamar Shtull-Trauring <itamar at itamarst.org_NOSPAM> wrote:

 > I take it you're going to volunteer some time to write
 > docs? We'd really appreciate it! ;)

Okay I will try, but my TODO list is already very long.  So it will be
a weekend thingy and could take a while to produce something useful,
besides I will have to learn Twisted first!

What I propose is to show how to develop a medium sized application in
the Twisted framework that uses a lot of Twisted's capabilities.  It
should have asynchronous *and* synchronous communication, *mobile*
components and because of that a dynamic network.  It should also show
how to exchange data with a server / database via its URL on the
internet.  Also to be fun it needs a GUI so I will use Tkinter, I
believe there are examples already how to combine Twisted with
Tkinter.  Tkinter seems to be the best choice since it is one of
Python's included batteries and it is portable and I have some
experience with it.

Now what kind of application would that be?  My idea for the
application is a trader agent and its environment.  It could be
something like a simulation or a game where you have to program an
automated trader agent that buys and sells stocks for you.  The client
should also have an interactive mode so you can do things manually
too.  There is a central market / database / server online all the
time.
First I need to set up a website that simulates a stock market, or
maybe I can just use an existing one, have to see how stable the data
are they produce.  www.nyse.com?

Does this kind of application show enough of Twisted's features?  You
have more ideas?   Do you think some things are too hard or
impossible?


Demonstrated features
---------------------

* Asynchronous communication:    Updates from the market to the client
                                  (if it is online) in a
                                  send_and_forget fashion.

* Synchronous communication:     Buying and selling transactions

* Mobility:                      The clients should be able to connect
                                  from anywhere and it should maybe be
                                  possible to relocate the market.

* Dynamicity:                    See mobility.  Also there will be an
                                  unknown number of clients at any
                                  time.

* RPC:                           client <-> market, but maybe also
                                  perhaps client <-> client for forming
                                  trade groups?

* GUI integration                To show what a client does and to be
                                  able to do manual trading.

* Remote debugging?  Remote market profiling?  Market logging?

Have to go back to my real work now.  What surprises me is that the
Twisted people did not come up with a demo apllication like this
already, the more I think about it the more fun it seems.  I did see a
MUD-something-application mentioned on the Twisted site, but could not
find it.  The trader application looks a bit more ``serious'' perhaps,
better for public relations?  Also make absolutely sure people using
Windows can install everything they need with just doubleclicking an
.exe or whatever.  You can do it, Twisted already has that for the
modules.

Writing software for installing things and writing documentation is
generally considered *boring* and uncool work among programmers.  I
know.  Hope this helps inspiring you to do it and to look at it in
another way?

For now good luck with writing good docs about things I do not know
about yet: Twisted deserves it.  So one day it can become one of
Python's included batteries too!

::

A child of five could understand this!  Fetch me a child of five.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
Available for Python, Twisted, Zope and Java consulting




From glyph at twistedmatrix.com  Thu Sep  5 16:47:40 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 05 Sep 2002 15:47:40 -0500 (CDT)
Subject: [Twisted-Python] Re: [Twisted-commits] allow for the possibility that a bot's
 perspective already exists
In-Reply-To: <E17n2cj-0003KI-00@pyramid.twistedmatrix.com>
References: <E17n2cj-0003KI-00@pyramid.twistedmatrix.com>
Message-ID: <20020905.154740.21617840.glyph@twistedmatrix.com>


On Thu, 05 Sep 2002 14:49:05 -0500, acapnotic CVS <acapnotic at twistedmatrix.com> wrote:
> Modified files:
> Twisted/twisted/words/service.py 1.63 1.64
> 
> Log message:
> allow for the possibility that a bot's perspective already exists

I think this *should* fail if the perspective already exists; otherwise you'd
kick a user off if you tried to create a bot with their nick.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020905/39ee401c/attachment.pgp 

From kevin.m.turner at pobox.com  Thu Sep  5 16:56:59 2002
From: kevin.m.turner at pobox.com (Kevin Turner)
Date: 05 Sep 2002 13:56:59 -0700
Subject: [Twisted-Python] Re: [Twisted-commits] allow for the
	possibility that a bot's perspective already exists
In-Reply-To: <20020905.154740.21617840.glyph@twistedmatrix.com>
References: <E17n2cj-0003KI-00@pyramid.twistedmatrix.com> 
	<20020905.154740.21617840.glyph@twistedmatrix.com>
Message-ID: <1031259419.32317.4.camel@troglodyte.funhouse>

On Thu, 2002-09-05 at 13:47, Glyph Lefkowitz wrote:
> > allow for the possibility that a bot's perspective already exists
> 
> I think this *should* fail if the perspective already exists; otherwise you'd
> kick a user off if you tried to create a bot with their nick.

But what if, as just happened to me, it's the bot's perspective, not a
user's?



From elloyd at lancaster.lib.pa.us  Thu Sep  5 17:53:09 2002
From: elloyd at lancaster.lib.pa.us (Eron Lloyd)
Date: 05 Sep 2002 17:53:09 -0400
Subject: [Twisted-Python] Can anyone recommend a sensible XML parser for
	Python?
In-Reply-To: <20020902.040745.78701595.glyph@twistedmatrix.com>
References: <20020902.040745.78701595.glyph@twistedmatrix.com>
Message-ID: <1031262790.1111.3.camel@phobos>

Are you referring to PyXML? I know xml.* in the Standard Library is 
pretty weak by far (but getting better!). PyXML, on the other hand, 
supports currently at least two pretty powerful parsers: Expat ("the" 
parser for many projects, including mozilla), and xmlproc (a robust 
pure-python parser that does validation). In fact, I believe Fred Drake 
of PythonLabs is the maintainer of Expat, so Python will always have 
strong Expat support. Also, I know Daniel Veillard is very interested in
"guaranteeing" Python wrappers for the GNOME libxml/libxslt C library 
(http://www.xmlsoft.org/python.html). There are many more options I just
can't think of right now. All in all, there *is* a wealth of parsers 
available to you, you just have decide what you need. Check PyXML 
(http://pyxml.sf.net) and contact the Python XML-SIG for help. Have 
faith, Python is quickly shaping up to be a powerful XML platform. 

Cheers, 

Eron 

On Mon, 2002-09-02 at 05:07, Glyph Lefkowitz wrote: 
> 
> So, I'm really pretty discouraged and disgusted with the state of XML tools
> that ship with Python today.  Mainly, they do surprising and insecure things
> when I try to parse XML, and I don't understand how to tell what will and won't
> work between various versions of them.
> 
> I think my requirements of an XML parser are pretty simple.  Here are the
> basics of what I want it to do:
> 
> 
>     * adhere to a subset of both DOM and SAX APIs for both event-based and
>       synchronous processing of XML data
> 
>     * allow creation of DOM trees from fragments of an XML stream so that
>       discrete "packets" can be processed, a-la jabber "xml streams"
> 
>     * perform relatively well (optional)
> 
> More importantly, here are the things I *don't* want an XML parser to do:
> 
>     * validate in any way, ever, at all
> 
>     * fetch DTDs or otherwise do helpful things like eval()ing python code
>       found in random attributes in the node tree
> 
>     * break necessary extensions to SAX/DOM and subtleties of API compatibility
>       between versions, making my code do lots of checks
> 
>     * look for Unicode flag characters
> 
>     * pay attention to !DOCTYPE and ?xml directives
> 
>     * split Text nodes into multiple pieces on newlines or whitespace
> 
>     * pay attention specially to any attribute, like "xmlns"
> 
>     * dump core
> 
> Does anybody know of an XML parser that meets these requirements or am I going
> to have to write my own?
> 
> -- 
>  |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
>  |   < _/ >   |  Lead Developer,  the Twisted project  |
>  |  < ___/ >  |      http://www.twistedmatrix.com      |
-- 
Eron Lloyd
Technology Coordinator
Lancaster County Library
elloyd at lancaster.lib.pa.us
Phone: 717-239-2116
Fax: 717-394-3083

---
[This E-mail scanned for viruses by Declude Virus]




From glyph at twistedmatrix.com  Fri Sep  6 02:23:19 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 06 Sep 2002 01:23:19 -0500 (CDT)
Subject: [Twisted-Python] Re: Helps if I could type ... there is no reportlacb.com of course.
In-Reply-To: <PGECLPOBGNBNKHNAGIJHKEDGDMAA.andy@reportlab.com>
References: <200209021215.g82CFno9014980@ratthing-b246.strakt.com>
	<PGECLPOBGNBNKHNAGIJHKEDGDMAA.andy@reportlab.com>
Message-ID: <20020906.012319.38298011.glyph@twistedmatrix.com>


Hi, Laura, Andy, &c :),

On Tue, 3 Sep 2002 13:09:28 +0100, "Andy Robinson" <andy at reportlab.com> wrote:
> Hello Glyph,
> 
> You might be interested to know of our pyRXP
> parser:
> 
> http://www.reportlab.com/xml/pyrxp.html

Thanks for the reference.  I think pyRXP looks pretty neat -- using existing
language data structures rather than inventing an API (like DOM) certainly has
its advantages.  Personally I would have preferred something mutable, but I
could see reasons to go either way.

The one thing I don't see PyRXP doing is this:

>     * adhere to a subset of both DOM and SAX APIs for both event-based and
>     synchronous processing of XML data

I shouldn't have phrased this as API adherence but more as a semantic
requirement.  I want to do parsing and routing of XML such as jabber's "XML
streams", as a network protocol and not as a document parser.  Of course I also
want a document parser, for other purposes.  at least passing DOM adherence
means that I can rewrite much less of the existing Twisted/XML code :-)

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020906/611e990a/attachment.pgp 

From glyph at twistedmatrix.com  Fri Sep  6 02:39:22 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 06 Sep 2002 01:39:22 -0500 (CDT)
Subject: [Twisted-Python] Can anyone recommend a sensible XML parser
 for Python?
In-Reply-To: <1031262790.1111.3.camel@phobos>
References: <20020902.040745.78701595.glyph@twistedmatrix.com>
	<1031262790.1111.3.camel@phobos>
Message-ID: <20020906.013922.15248657.glyph@twistedmatrix.com>


On 05 Sep 2002 17:53:09 -0400, Eron Lloyd <elloyd at lancaster.lib.pa.us> wrote:
> Are you referring to PyXML? I know xml.* in the Standard Library is 
> pretty weak by far (but getting better!).

Yes.  In fact, PyXML is a big part of the problem.  Its "minidom" module, for
example, is *far* buggier than the one found in the standard library.  (As an
example of that, try to figure out how to make cloneNode work on a Document
object.)

I could deal with one set of potential problems and pitfalls using XML in
Python and work around then, but I have to work around every combination of
versions to make a useful app that doesn't have very stringent installation
requirements: in pracitice this means 4 environments: python2.1 with pyxml,
python2.1 standalone, python2.2 with pyxml, python2.2 standalone.

I don't want a plethora of XML parsers with rich features, all of which are
broken.  I want *one* XML parser that can *reliably* transform a stream of
bytes into a stream of nodes, and a text file into a tree of nodes.  You
mentioned validatation in your post and I explicitly said that validation is
worse than useless to me; in most cases I want to parse XHTML, which means
dealing with lots of potentially DTD-violating stuff which is still "valid" as
far as I'm concerned.

Eventually I'll clean up the problem cases I'm having and submit them as bug
reports, but right now it's not worth my time, because I really don't want to
deal with the fragility of the PyXML or python-standard-library xml.* stuff.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020906/a0b9473c/attachment.pgp 

From elloyd at lancaster.lib.pa.us  Fri Sep  6 12:36:12 2002
From: elloyd at lancaster.lib.pa.us (Eron Lloyd)
Date: 06 Sep 2002 12:36:12 -0400
Subject: [Twisted-Python] Can anyone recommend a sensible XML parser for
	Python?
In-Reply-To: <20020906.013922.15248657.glyph@twistedmatrix.com>
References: <20020902.040745.78701595.glyph@twistedmatrix.com>
	<1031262790.1111.3.camel@phobos> 
	<20020906.013922.15248657.glyph@twistedmatrix.com>
Message-ID: <1031330172.1094.9.camel@phobos>

Hmm, I know that minidom has had some problems recently, but it has also
seen some good improvements. It sounds like you need more robust DOM
support--have you tried 4DOM? It's not as fast, but it does adhere to
the spec the best. Maybe (when you have time) if you let us know what
you expect to accomplish we can help out--the people in XML-SIG are some
of the sharpest in the community. Perhaps TREX or RELAX-NG would be more
suitable. I guess the only comforting thing I can say is that every
development community is experiencing growing pains when it comes to an
XML strategy.

Good luck,

Eron

On Fri, 2002-09-06 at 02:39, Glyph Lefkowitz wrote:
> 
> On 05 Sep 2002 17:53:09 -0400, Eron Lloyd <elloyd at lancaster.lib.pa.us> wrote:
> > Are you referring to PyXML? I know xml.* in the Standard Library is 
> > pretty weak by far (but getting better!).
> 
> Yes.  In fact, PyXML is a big part of the problem.  Its "minidom" module, for
> example, is *far* buggier than the one found in the standard library.  (As an
> example of that, try to figure out how to make cloneNode work on a Document
> object.)
> 
> I could deal with one set of potential problems and pitfalls using XML in
> Python and work around then, but I have to work around every combination of
> versions to make a useful app that doesn't have very stringent installation
> requirements: in pracitice this means 4 environments: python2.1 with pyxml,
> python2.1 standalone, python2.2 with pyxml, python2.2 standalone.
> 
> I don't want a plethora of XML parsers with rich features, all of which are
> broken.  I want *one* XML parser that can *reliably* transform a stream of
> bytes into a stream of nodes, and a text file into a tree of nodes.  You
> mentioned validatation in your post and I explicitly said that validation is
> worse than useless to me; in most cases I want to parse XHTML, which means
> dealing with lots of potentially DTD-violating stuff which is still "valid" as
> far as I'm concerned.
> 
> Eventually I'll clean up the problem cases I'm having and submit them as bug
> reports, but right now it's not worth my time, because I really don't want to
> deal with the fragility of the PyXML or python-standard-library xml.* stuff.
> 
> -- 
>  |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
>  |   < _/ >   |  Lead Developer,  the Twisted project  |
>  |  < ___/ >  |      http://www.twistedmatrix.com      |
-- 
Eron Lloyd
Technology Coordinator
Lancaster County Library
elloyd at lancaster.lib.pa.us
Phone: 717-239-2116
Fax: 717-394-3083

---
[This E-mail scanned for viruses by Declude Virus]




From andy at reportlab.com  Fri Sep  6 18:51:14 2002
From: andy at reportlab.com (Andy Robinson)
Date: Fri, 6 Sep 2002 23:51:14 +0100
Subject: [Twisted-Python] RE: Helps if I could type ... there is no reportlacb.com of course.
In-Reply-To: <20020906.012319.38298011.glyph@twistedmatrix.com>
Message-ID: <LKENLBBMDHMKBECHIAIACELJCKAA.andy@reportlab.com>

> The one thing I don't see PyRXP doing is this:
> 
> >     * adhere to a subset of both DOM and SAX APIs for both 
> event-based and
> >     synchronous processing of XML data

Absolutely true.  Our own need was to read in complete
XML documents.  We generate reports where the data is usually an XML 
document and we will never want a partial document.  In addition,
we would always validate if the performance hit was minimal. So
we went for a 'tree structure' as output.  It would be trivial to 
layer something else on top which generated events as an alternative API,
but AFAICT pyexpat does that pretty well for anyone who does not
want validation.  Or am I missing something?

Our own feelings are to aim for simple Pythonic APIs rather
than full SAX and DOM, which "feel like Java" to me and
tend to be verbose.  
> 
> I shouldn't have phrased this as API adherence but more as a semantic
> requirement.  I want to do parsing and routing of XML such as 
> jabber's "XML
> streams", as a network protocol and not as a document parser.  Of 
> course I also
> want a document parser, for other purposes.  
> at least passing DOM 
> adherence
> means that I can rewrite much less of the existing Twisted/XML code :-)

Our take on that was to make a small 'lazy cursor' using getattr
to step into the tuple tree, so I can do expressions like
"xml.invoice.customerDetails.addressLine1" and let it drill
down for me.  We did not worry about DOM compatibility as DOM syntax
is less readable than Python syntax.  Far from perfect but only about 
50 lines long.  One could easily make DOM and SAX wrappers for
the pyRXP tuple tree, although under the hood the SAX one would
be working on a ully parsed tree structure.

We would love to do more on pyRXP but are very short of time
and have already met all our own requirements.  Is this a
candidate to become part of Twisted's XML toolkit, or specifically
for Jabber?  Is anyone else prepared to do a little on the pyRXP
code with us and share some work?

Thanks,

Andy




From glyph at twistedmatrix.com  Fri Sep  6 19:06:11 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 06 Sep 2002 18:06:11 -0500 (CDT)
Subject: [Twisted-Python] Re: Helps if I could type ... there is no reportlacb.com of course.
In-Reply-To: <LKENLBBMDHMKBECHIAIACELJCKAA.andy@reportlab.com>
References: <20020906.012319.38298011.glyph@twistedmatrix.com>
	<LKENLBBMDHMKBECHIAIACELJCKAA.andy@reportlab.com>
Message-ID: <20020906.180611.99480137.glyph@twistedmatrix.com>


Slimming the recipient list here, since anyone interested in continuing
discussion should be on the twisted list anyway :)

On Fri, 6 Sep 2002 23:51:14 +0100, "Andy Robinson" <andy at reportlab.com> wrote:
> > The one thing I don't see PyRXP doing is this:

> > >     * adhere to a subset of both DOM and SAX APIs for both event-based
> > >     and synchronous processing of XML data

> Absolutely true.  Our own need was to read in complete XML documents.
> ... AFAICT pyexpat does that pretty well for anyone who does not want
> validation.  Or am I missing something?

I don't have a repeatable test case yet, but expat (at least pyexpat) seems to
segfault in some situations.  I want to use XML as a data-transfer technique in
part as a stopgap measure because Python does not support robust parsing and
secure execution of Python code.  If you can segfault the XML parser then it's
not much help :).

Also, turning off some of the features in pyexpat would sometimes hang or crash
the parser.  Again, haven't hunted these down; but they were different in every
release of pyxml, and some are hard to repeat.  Not worth the effort
considering how easy writing a new parser is.

> Our own feelings are to aim for simple Pythonic APIs rather than full SAX and
> DOM, which "feel like Java" to me and tend to be verbose.

Interesting idea.  I may take this advice in my own XML-related endeavors.
I'll make sure to look at the idioms that pyRXP provides and see if I can
maintain some compatibility with them.

> > I want to do parsing and routing of XML such as jabber's "XML
> > streams", as a network protocol and not as a document parser.

> Our take on that was to make a small 'lazy cursor' using getattr to step into
> the tuple tree, so I can do expressions like
> "xml.invoice.customerDetails.addressLine1" and let it drill down for me.

That looks very cool!  Taking this approach may solve some of the concerns I
had about XML-based persistence in Python. Thanks for the example :-).  It does
look like you'd need validation in order to use a trick like that, though.

> ...  under the hood the SAX one would be working on a ully parsed tree
> structure.

Yeah, that's a real problem for me, unfortunately.

> We would love to do more on pyRXP but are very short of time and have already
> met all our own requirements.  Is this a candidate to become part of
> Twisted's XML toolkit, or specifically for Jabber?  Is anyone else prepared
> to do a little on the pyRXP code with us and share some work?

I actually took an afternoon and wrote a Python XML parser that will probably
be included in the next Twisted release (I'm currently slapping on some ad-hoc
minidom-esque data structures to get existing twisted/xml utilities working).
The main interest I have is network protocols that speak XML (and determining
completeness of full XML documents received over a network connection), so it
looks like pyRXP is just not suitable for my requirements.

Again, considering how easy it is to write a new XML parser, and the end-user
unpleasantness associated with garnering new dependencies (pyRXP does not
appear to be packaged in even the latest Debian, for instance) I don't think
using pyRXP is worthwhile at the moment.  Originally, I was hoping to avoid
writing my own parser.  Now, I don't think that there's enough of a consensus
in the community about what's "good" for an XML parser to do that I can avoid
it :).  Also, having done it, I'm much less interested in avoiding it.

When I am looking into more seriously high-performance applications involving
XML I think having RXP available as a backend would be really useful for some
operations, though, so I will eventually read about the tuple representation it
uses and try to provide compatibility at some layer.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020906/e1feaa7b/attachment.pgp 

From glyph at twistedmatrix.com  Fri Sep  6 23:44:42 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 06 Sep 2002 22:44:42 -0500 (CDT)
Subject: [XML-SIG] Re: [Twisted-Python] Can anyone recommend a sensible
 XML parser for Python?
In-Reply-To: <E17nSaC-0000Lk-00@malatesta.local>
References: <elloyd@lancaster.lib.pa.us>
	<E17nSaC-0000Lk-00@malatesta.local>
Message-ID: <20020906.224442.74757833.glyph@twistedmatrix.com>


On Fri, 06 Sep 2002 17:31:51 -0600, Uche Ogbuji <uche.ogbuji at fourthought.com> wrote:

> BTW, from what you're describing above, you are *not* parsing XHTML.  If it 
> violates the DTD, it is not XHTML.  Period.

> Just say you're parsing "HTML" and don't mention a version.  That's the only 
> way to say it correctly  ;-)

OK, "XML which browsers will render".  I am not parsing HTML, in that I won't
accept XML that is not well-formed.  I suppose I could try to wrap HtmlParser
with minidom... yuck.  Gross, but probably a good idea, come to think of it :)

> Well, no one can tell you what to do with your time, but such general comments 
> are not very useful.  It's not as if you posted 10 bug reports, then threw up 
> your hands and said "I'm blowing this joint".  You made one vague mention of a 
> cloneNode bug, without even a bare test case.

The reason I mentioned the cloneNode bug is because it is the most reliable and
the most trivial to demonstrate.  Like I said; at some point, I will clean up
my complaints and submit some bug reports.  Here's a "bare test case" of that
particular spurious accusation:

    glyph at zelda:~% python
    Python 2.2.1 (#1, Aug 30 2002, 09:36:47) 
    [GCC 2.95.4 20011002 (Debian prerelease)] on linux2
    Type "help", "copyright", "credits" or "license" for more information.
    >>> from xml.dom.minidom import parseString
    >>> parseString("<hello_world/>").cloneNode(1)
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
      File "/usr/lib/python2.2/site-packages/_xmlplus/dom/minidom.py", line 186, in cloneNode
        clone = _clone_node(self, deep, self.ownerDocument or self)
      File "/usr/lib/python2.2/site-packages/_xmlplus/dom/minidom.py", line 1248, in _clone_node
        elif node.nodeType == PROCESSING_INSTRUCTION_NODE:
    NameError: global name 'PROCESSING_INSTRUCTION_NODE' is not defined

In order to do the work I want to do, though, those bug reports aren't going to
help.  Even if you resolved every bug report that I submitted within a week, I
would be stuck in the same place I am now: I have to work around the bugs in a
bunch of old versions of PyXML or produce what amounts to my own
`implementation' of an XML parser.  Granted, if I packaged a newer, fixed-up
version of PyXML with Twisted, I wouldn't have to be mucking about with bits
and bytes -- but I *would* have to understand the entire ontology of confusion
associated with cross-language XML APIs.

My main frustration is with packaging.  If all the world were running Debian
unstable, I'd be fine: I'd just say Depends: python2.2-xml >= 0.9.  However,
with lots of users in Windows, and many more on other linux platforms with less
pleasant package management, every new package that Twisted requires is another
fifteen minutes that the software takes to get running.  It's already confusing
enough to understand it when it *works*; I want the process of getting it
running to be as seamless as possible :).

For the applications that I'm intending to write, just doing my own parser and
API is both more appealing and more rewarding.  Neither DOM nor SAX will
present an API which allows me to get network XML events in quite the way I
want, so I'm going to have to do some wrapping.  (I do wish pyRXP were
event-based... it's very close, in spirit, to what I want.)  If the general
quality of XML parsers in Python were really high, I would regard this impulse
as contrary and counterproductive -- why write my own library for doing this
when perfectly good ones already exist and and are deployed all over the place?

So maybe I'm just rationalizing what I would have done anyway.  Nevertheless,
it is easier to write my own XML parser than to even properly report the bugs
that I have thus far discovered.

> No one gets paid to develop PyXML, but if you come our way a bit, we're quite 
> willing to help.

I appreciate that.  At some point I hope to have the time to run down every
last bug I've found and help PyXML to become very robust.  (I know that my
requirements are at least a little esoteric; I don't plan for Twisted to be a
general-purpose XML processing toolkit!)  Despite my various problems with it,
PyXML *is* what got me to see why XML might be worthwhile and kind of cool in
some circumstances.

For more information my perception of XML, and why my requirements are as
stripped-down as they are, look at the presentation here:

    http://xmlsucks.org/but_you_have_to_use_it_anyway/

(Yes, it's a real URL, and it's not mine.)

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020906/744f9cc4/attachment.pgp 

From uche.ogbuji at fourthought.com  Fri Sep  6 19:31:51 2002
From: uche.ogbuji at fourthought.com (Uche Ogbuji)
Date: Fri, 06 Sep 2002 17:31:51 -0600
Subject: [XML-SIG] Re: [Twisted-Python] Can anyone recommend a sensible 
 XML parser for Python?
In-Reply-To: Message from Eron Lloyd <elloyd@lancaster.lib.pa.us> 
   of "06 Sep 2002 12:36:12 EDT." <1031330172.1094.9.camel@phobos> 
Message-ID: <E17nSaC-0000Lk-00@malatesta.local>

> Hmm, I know that minidom has had some problems recently, but it has also
> seen some good improvements. It sounds like you need more robust DOM
> support--have you tried 4DOM? It's not as fast, but it does adhere to
> the spec the best.

cDomlette's cloneNode does work.  If minidom's doesn't, a bug report would be 
nice.

> Maybe (when you have time) if you let us know what
> you expect to accomplish we can help out--the people in XML-SIG are some
> of the sharpest in the community. Perhaps TREX or RELAX-NG would be more
> suitable. I guess the only comforting thing I can say is that every
> development community is experiencing growing pains when it comes to an
> XML strategy.
> 
> Good luck,
> 
> Eron
> 
> On Fri, 2002-09-06 at 02:39, Glyph Lefkowitz wrote:
> > 
> > On 05 Sep 2002 17:53:09 -0400, Eron Lloyd <elloyd at lancaster.lib.pa.us> wrote:
> > > Are you referring to PyXML? I know xml.* in the Standard Library is 
> > > pretty weak by far (but getting better!).
> > 
> > Yes.  In fact, PyXML is a big part of the problem.  Its "minidom" module, for
> > example, is *far* buggier than the one found in the standard library.  (As an
> > example of that, try to figure out how to make cloneNode work on a Document
> > object.)

What version of PyXML?


> > I could deal with one set of potential problems and pitfalls using XML in
> > Python and work around then, but I have to work around every combination of
> > versions to make a useful app that doesn't have very stringent installation
> > requirements: in pracitice this means 4 environments: python2.1 with pyxml,
> > python2.1 standalone, python2.2 with pyxml, python2.2 standalone.
> > 
> > I don't want a plethora of XML parsers with rich features, all of which are
> > broken.  I want *one* XML parser that can *reliably* transform a stream of
> > bytes into a stream of nodes, and a text file into a tree of nodes. 

You haven't given any evidence to the effect that PyXML does not have this.  A 
bug in cloneNode has nothing to do with parsing.


> > You
> > mentioned validatation in your post and I explicitly said that validation is
> > worse than useless to me; in most cases I want to parse XHTML, which means
> > dealing with lots of potentially DTD-violating stuff which is still "valid" as
> > far as I'm concerned.

Doesn't HtmlParser do the trick?  If not, you could try 
dom.ext.readers.HtmlReader with a minidom implementation used to override the 
default.

BTW, from what you're describing above, you are *not* parsing XHTML.  If it 
violates the DTD, it is not XHTML.  Period.

Just say you're parsing "HTML" and don't mention a version.  That's the only 
way to say it correctly  ;-)


> > Eventually I'll clean up the problem cases I'm having and submit them as bug
> > reports, but right now it's not worth my time, because I really don't want to
> > deal with the fragility of the PyXML or python-standard-library xml.* stuff.

Well, no one can tell you what to do with your time, but such general comments 
are not very useful.  It's not as if you posted 10 bug reports, then threw up 
your hands and said "I'm blowing this joint".  You made one vague mention of a 
cloneNode bug, without even a bare test case.

No one gets paid to develop PyXML, but if you come our way a bit, we're quite 
willing to help.


-- 
Uche Ogbuji                                    Fourthought, Inc.
http://uche.ogbuji.net    http://4Suite.org    http://fourthought.com
Track chair, XML/Web Services One Boston: http://www.xmlconference.com/
Basic XML and RDF techniques for knowledge management, Part 7 - 
http://www-106.ibm.com/developerworks/xml/library/x-think12.html
Keeping pace with James Clark - http://www-106.ibm.com/developerworks/xml/libra
ry/x-jclark.html
Python and XML development using 4Suite, Part 3: 4RDF - 
http://www-105.ibm.com/developerworks/education.nsf/xml-onlinecourse-bytitle/8A
1EA5A2CF4621C386256BBB006F4CEC





From fdrake at acm.org  Fri Sep  6 19:49:45 2002
From: fdrake at acm.org (Fred L. Drake, Jr.)
Date: Fri, 6 Sep 2002 19:49:45 -0400
Subject: [XML-SIG] Re: [Twisted-Python] Can anyone recommend a sensible XML
 parser for Python?
In-Reply-To: <E17nSaC-0000Lk-00@malatesta.local>
References: <elloyd@lancaster.lib.pa.us>
	<1031330172.1094.9.camel@phobos>
	<E17nSaC-0000Lk-00@malatesta.local>
Message-ID: <15737.16153.431188.210149@grendel.zope.com>

Uche Ogbuji writes:
 > cDomlette's cloneNode does work.  If minidom's doesn't, a bug
 > report would be nice.

There were some bugs checked into the minidom implementation at the
last minute before the PyXML 0.8 release; all the ones that I know of
are fixed in CVS.  If there are still bugs in that version of the
code, I'd really like to see a bug report filed on SourceForge.


  -Fred

-- 
Fred L. Drake, Jr.  <fdrake at acm.org>
PythonLabs at Zope Corporation



From acapnotic at twistedmatrix.com  Sat Sep  7 00:27:32 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 06 Sep 2002 21:27:32 -0700
Subject: [Twisted-Python] typed mktap usage.Options parameters
Message-ID: <1031372854.14038.28.camel@troglodyte.funhouse>

just jotting down this note so it gets saved someplace:

There are some very common types of parameters mktap uses -- remote host
or IP, port number, local interface to bind to, password.  We should
have some sort of typed optParameters for this, so that any tap
constructor that takes a port can just say "wordsPort isa port" and get
back a number instead of having to int() the string and/or look it up in
/etc/services, etc.  Another idea being that password-type options
should be prompted for rather than specified on the command line, as
command line parameters are all too visible in the system process table
on many systems.




From glyph at twistedmatrix.com  Sat Sep  7 00:40:51 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 06 Sep 2002 23:40:51 -0500 (CDT)
Subject: [Twisted-Python] typed mktap usage.Options parameters
In-Reply-To: <1031372854.14038.28.camel@troglodyte.funhouse>
References: <1031372854.14038.28.camel@troglodyte.funhouse>
Message-ID: <20020906.234051.55512897.glyph@twistedmatrix.com>


On 06 Sep 2002 21:27:32 -0700, Kevin Turner <acapnotic at twistedmatrix.com> wrote:
> just jotting down this note so it gets saved someplace:
> 
> There are some very common types of parameters mktap uses -- remote host
> or IP, port number, local interface to bind to, password.  We should
> have some sort of typed optParameters for this, so that any tap
> constructor that takes a port can just say "wordsPort isa port" and get
> back a number instead of having to int() the string and/or look it up in
> /etc/services, etc.  Another idea being that password-type options
> should be prompted for rather than specified on the command line, as
> command line parameters are all too visible in the system process table
> on many systems.

My thought on this is that Reactor and Application should both have
"listenString" and "connectString" methods which take a host/port/transport in
some sort of string syntax which we can specify on command lines.  So you could
say... connectString("tcp:8080:localhost") or listenString("ssl:8080").  I
haven't fully thought it out and I didn't want to try to rush it in before 1.0
and then change it around lots later, but I think this approach in general is a
necessary one (otherwise we'll end up implementing this mktap functionality you
describe everywhere that you want to open a socket).

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020906/85d51444/attachment.pgp 

From waterbug at beeblebrox.gsfc.nasa.gov  Sat Sep  7 01:10:37 2002
From: waterbug at beeblebrox.gsfc.nasa.gov (Steve Waterbury)
Date: Sat, 07 Sep 2002 01:10:37 -0400
Subject: [Twisted-Python] typed mktap usage.Options parameters
References: <1031372854.14038.28.camel@troglodyte.funhouse> <20020906.234051.55512897.glyph@twistedmatrix.com>
Message-ID: <3D798A4D.82096601@beeblebrox.gsfc.nasa.gov>

Glyph Lefkowitz wrote:
> My thought on this is that Reactor and Application should both have
> "listenString" and "connectString" methods which take a host/port/transport in
> some sort of string syntax which we can specify on command lines.  So you could
> say... connectString("tcp:8080:localhost") or listenString("ssl:8080").  ...

... or connectString("unix:/foo"), right?  :^)

Steve.



From fdrake at acm.org  Sat Sep  7 00:07:28 2002
From: fdrake at acm.org (Fred L. Drake, Jr.)
Date: Sat, 7 Sep 2002 00:07:28 -0400
Subject: [XML-SIG] Re: [Twisted-Python] Can anyone recommend a sensible XML
 parser for Python?
In-Reply-To: <20020906.224442.74757833.glyph@twistedmatrix.com>
References: <elloyd@lancaster.lib.pa.us>
	<E17nSaC-0000Lk-00@malatesta.local>
	<20020906.224442.74757833.glyph@twistedmatrix.com>
Message-ID: <15737.31616.908090.505123@pcp745479pcs.reston01.va.comcast.net>

Glyph Lefkowitz writes:
 > The reason I mentioned the cloneNode bug is because it is the most
 > reliable and the most trivial to demonstrate.  Like I said; at some
 > point, I will clean up my complaints and submit some bug reports.
 > Here's a "bare test case" of that particular spurious accusation:

This particular bug has already been fixed in CVS.

 > In order to do the work I want to do, though, those bug reports
 > aren't going to help.  Even if you resolved every bug report that I
 > submitted within a week, I would be stuck in the same place I am
 > now: I have to work around the bugs in a bunch of old versions of
 > PyXML or produce what amounts to my own `implementation' of an XML

If you're shipping commercial applications, ship the versions of
relevant libraries and Python needed for the application.  Eating up
disk space may be annoying, but it's cheap enough not to be a real
problem.  Bugs are a real problem, no matter how unfortunate, even if
they're not your own.

If the issue is that you're shipping a framework that needs to work
with as many other packages as possible, then document which versions
it's known to work with, which versions its known not to work with,
and keep moving.

Please understand, I'm really sorry PyXML 0.8 had bugs, but we're not
getting paid for this, so I don't feel it's my job to double-check
every checkin that every PyXML develop makes before a release; I try
to make my checkins work as well as I can, and I do test with 4
different major versions of Python.  If you need PyXML to become
increasingly bug free over time, I'd like to suggest two things:

1. Keep track of the CVS version regularly, and test it out with your
   components.  Sometimes this can be tedious, but good automated
   tests can make this substantially easier.  Report bugs quickly
   using the SourceForge tracker.

2. Contribute regression tests to the project.  We know our tests are
   not complete, and are improving them with each release, but some
   assistance with this, especially when you report bugs, can make
   more of a difference even than contributing fixes (which are also
   welcome).

 > parser.  Granted, if I packaged a newer, fixed-up version of PyXML
 > with Twisted, I wouldn't have to be mucking about with bits and
 > bytes -- but I *would* have to understand the entire ontology of
 > confusion associated with cross-language XML APIs.

I must be missing something.  Doesn't it just mean that you need to
provide a sufficiently updated PyXML distribution?

 > My main frustration is with packaging.  If all the world were
 > running Debian unstable, I'd be fine: I'd just say Depends:
 > python2.2-xml >= 0.9.  However, with lots of users in Windows, and

Yeah, the packaging sucks.  It's not any worse than for any other bit
of library code though, as far as I can tell.  (I'll admit the horizon
for my sight is substantially limited to open source software,
however.)

 > For the applications that I'm intending to write, just doing my own
 > parser and API is both more appealing and more rewarding.  Neither
 > DOM nor SAX will present an API which allows me to get network XML
 > events in quite the way I want, so I'm going to have to do some

If you don't think the interfaces match you application space very
well, please describe your requirements and explain how the current
APIs don't meet your requirements, and what sort of APIs you're
looking for.

 > If the general quality of XML parsers in Python were really high, I
 > would regard this impulse as contrary and counterproductive -- why

You talk about parser, but I don't think that's what you mean.  The
bug you referred to in minidom had nothing to do with the underlying
parser; it would have manifested itself with any parser you picked
that reported processing instructions.  ("All of them.")

 > So maybe I'm just rationalizing what I would have done anyway.
 > Nevertheless, it is easier to write my own XML parser than to even
 > properly report the bugs that I have thus far discovered.

As an Expat maintainer, I wish you luck.  ;-)

 > I appreciate that.  At some point I hope to have the time to run
 > down every last bug I've found and help PyXML to become very
 > robust.

Yes, bug reports are definately necessary to develop a solid piece of
software.  I do hope we can encourage you to produce a few.


  -Fred

-- 
Fred L. Drake, Jr.  <fdrake at acm.org>
PythonLabs at Zope Corporation



From uche.ogbuji at fourthought.com  Sat Sep  7 02:10:51 2002
From: uche.ogbuji at fourthought.com (Uche Ogbuji)
Date: Sat, 07 Sep 2002 00:10:51 -0600
Subject: [XML-SIG] Re: [Twisted-Python] Can anyone recommend a sensible 
 XML parser for Python?
In-Reply-To: Message from Glyph Lefkowitz <glyph@twistedmatrix.com> 
   of "Fri, 06 Sep 2002 22:44:42 CDT." <20020906.224442.74757833.glyph@twistedmatrix.com> 
Message-ID: <E17nYor-0000u0-00@malatesta.local>

> ----Security_Multipart(Fri_Sep__6_22:44:42_2002_475)--
> Content-Type: Text/Plain; charset=us-ascii
> Content-Transfer-Encoding: 7bit
> 
> 
> On Fri, 06 Sep 2002 17:31:51 -0600, Uche Ogbuji <uche.ogbuji at fourthought.com> wrote:
> 
> > BTW, from what you're describing above, you are *not* parsing XHTML.  If it 
> > violates the DTD, it is not XHTML.  Period.
> 
> > Just say you're parsing "HTML" and don't mention a version.  That's the only 
> > way to say it correctly  ;-)
> 
> OK, "XML which browsers will render".  I am not parsing HTML, in that I won't
> accept XML that is not well-formed.  I suppose I could try to wrap HtmlParser
> with minidom... yuck.  Gross, but probably a good idea, come to think of it :)

I can't imagine why this would be gross.  IMO, it's illustrates very admirable 
technique, and one of the strengths of Python/XML.  The parsing mechanism and 
the generated representation are independent of each other, so you can mix 
them and match them in order to take advantage of the most needed features of 
either.

We put a lot of work into making this possible, and I find it very elegant.  
C++ folks took ages before they cottonned on to such an approach (in the STL), 
and now it has them in raptures (generic programming is all the rage).  Of 
course, old strait-jacket Java can't touch this.  Too bad for them.


> The reason I mentioned the cloneNode bug is because it is the most reliable and
> the most trivial to demonstrate.  Like I said; at some point, I will clean up
> my complaints and submit some bug reports.  Here's a "bare test case" of that
> particular spurious accusation:
> 
>     glyph at zelda:~% python
>     Python 2.2.1 (#1, Aug 30 2002, 09:36:47) 
>     [GCC 2.95.4 20011002 (Debian prerelease)] on linux2
>     Type "help", "copyright", "credits" or "license" for more information.
>     >>> from xml.dom.minidom import parseString
>     >>> parseString("<hello_world/>").cloneNode(1)
>     Traceback (most recent call last):
>       File "<stdin>", line 1, in ?
>       File "/usr/lib/python2.2/site-packages/_xmlplus/dom/minidom.py", line 186, in cloneNode
>         clone = _clone_node(self, deep, self.ownerDocument or self)
>       File "/usr/lib/python2.2/site-packages/_xmlplus/dom/minidom.py", line 1248, in _clone_node
>         elif node.nodeType == PROCESSING_INSTRUCTION_NODE:
>     NameError: global name 'PROCESSING_INSTRUCTION_NODE' is not defined


You see, this is why reporting such "bugs" early is helpful.  I could have 
told you ages ago that it is a *bad* idea to call cloneNode on a Document 
object.

Accordin to the DOM Level 2 spec:

"And, cloning Document, DocumentType, Entity, and Notation nodes is 
implementation dependent."

IOW, yer gets what yer gets and can't really complain  :-)

Can you expand a bit more on the actual use case that makes you think you want 
to clone a document node?

I do agree that the confused error message is a glitch.  Current PyXML CVS 
gives a more straightforward "sod off"  :-)

>>> from xml.dom.minidom import parseString
>>> parseString("<hello_world/>").cloneNode(1)
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
  File "/home/uogbuji/lib/python2.2/site-packages/_xmlplus/dom/minidom.py", 
line 198, in cloneNode
    clone = _clone_node(self, deep, self.ownerDocument or self)
  File "/home/uogbuji/lib/python2.2/site-packages/_xmlplus/dom/minidom.py", 
line 1454, in _clone_node
    raise Exception("Cannot clone node %s" % repr(node))
Exception: Cannot clone node <xml.dom.minidom.Document instance at 0x82e9cbc>


We choose not to allow it.  Perfectly legal, and I think this is the right 
choice.


> In order to do the work I want to do, though, those bug reports aren't going to
> help.  Even if you resolved every bug report that I submitted within a week, I
> would be stuck in the same place I am now: I have to work around the bugs in a
> bunch of old versions of PyXML

You mean you can't require, say PyXML 0.8.1?  Tough crowd you develop for?  :-)


> or produce what amounts to my own `implementation' of an XML parser. 

If you try going this route, I guarantee you'll still be trying to get the 
most basic things right six months from now.


> Granted, if I packaged a newer, fixed-up
> version of PyXML with Twisted, I wouldn't have to be mucking about with bits
> and bytes -- but I *would* have to understand the entire ontology of confusion
> associated with cross-language XML APIs.
> 
> My main frustration is with packaging.  If all the world were running Debian
> unstable, I'd be fine: I'd just say Depends: python2.2-xml >= 0.9.  However,
> with lots of users in Windows, and many more on other linux platforms with less
> pleasant package management, every new package that Twisted requires is another
> fifteen minutes that the software takes to get running.  It's already confusing
> enough to understand it when it *works*; I want the process of getting it
> running to be as seamless as possible :).

Here you have a point.  Python, PyXML, and a lot of the related packages move 
very quickly,. and so quickly that they cause all manner of packaging problems.

There is no easy solution to this.  Python is much more of a volunteer 
community than, say JAva.  People work on Python and PyXML mostly to scratch 
their itches, which means they have less incentive to worry about the 
packaging mess they leave behind.

This is the impetus for the Python-in-a-tie effort for Python proper.  I do 
think we'd make a lot more friends if there were a matching PyXML-in-a-tie.  
It would mean companies would have to commit scarce resources to freezing 
interfaces and then testing and packaging to oblivion.

I have had it in mind to suggest a PyXML-in-a-tie type effort in the Python 
Business Forum once the effort on Python itself starts to gain legs.  I guess 
I can count on you to at least help cheerlead?  :-)


> For the applications that I'm intending to write, just doing my own parser and
> API is both more appealing and more rewarding.

Really?  Color me deep skeptical.  I have not seen an application on earth 
where implementing one's own parser is a good idea, and precious few where 
implementing one's own API is a good idea.  I have a lot of colleagues who 
have tried.

By all means, if you'd like to try, go ahead.


> Neither DOM nor SAX will
> present an API which allows me to get network XML events in quite the way I
> want, so I'm going to have to do some wrapping.

I have learned through my own bitter experience that you do not want network 
interfaces to have *anything* to do with the lexical XML layer (or even 
Infoset).  It is best to design network interactions around *application* 
level semantics.  Basically sending around chunks of XML text is far less 
hazardous than what I think you mean.


> (I do wish pyRXP were
> event-based... it's very close, in spirit, to what I want.)  If the general
> quality of XML parsers in Python were really high, I would regard this impulse
> as contrary and counterproductive -- why write my own library for doing this
> when perfectly good ones already exist and and are deployed all over the place?

Well, as I said, I don't see any evidence that the quality of XML parsers in 
Python is not high.  You pointed out one problem in cloneNode which, from what 
I gather, was mostly because you're abusing DOM.  This had nothing to do with 
parsing.  Are you speaking generically?


> So maybe I'm just rationalizing what I would have done anyway.  Nevertheless,
> it is easier to write my own XML parser than to even properly report the bugs
> that I have thus far discovered.

I find this claim ludicrous on its face.  Writing an XML parser with the 
compliance level and quality of any of the ones in PyXML takes years.  Yes.  
Years.

Feel free to re-learn this fact the hard way, if you wish.


> For more information my perception of XML, and why my requirements are as
> stripped-down as they are, look at the presentation here:
> 
>     http://xmlsucks.org/but_you_have_to_use_it_anyway/
> 
> (Yes, it's a real URL, and it's not mine.)

Yes.  I'd guess we've all seen that link.  <shrug>  So what useful technology 
doesn't suck?  XML works for me.  Your mileage may vary.


-- 
Uche Ogbuji                                    Fourthought, Inc.
http://uche.ogbuji.net    http://4Suite.org    http://fourthought.com
Track chair, XML/Web Services One Boston: http://www.xmlconference.com/
Basic XML and RDF techniques for knowledge management, Part 7 - 
http://www-106.ibm.com/developerworks/xml/library/x-think12.html
Keeping pace with James Clark - http://www-106.ibm.com/developerworks/xml/libra
ry/x-jclark.html
Python and XML development using 4Suite, Part 3: 4RDF - 
http://www-105.ibm.com/developerworks/education.nsf/xml-onlinecourse-bytitle/8A
1EA5A2CF4621C386256BBB006F4CEC





From fdrake at acm.org  Sat Sep  7 03:14:40 2002
From: fdrake at acm.org (Fred L. Drake, Jr.)
Date: Sat, 7 Sep 2002 03:14:40 -0400
Subject: [XML-SIG] Re: [Twisted-Python] Can anyone recommend a sensible XML
 parser for Python?
In-Reply-To: <E17nYor-0000u0-00@malatesta.local>
References: <glyph@twistedmatrix.com>
	<20020906.224442.74757833.glyph@twistedmatrix.com>
	<E17nYor-0000u0-00@malatesta.local>
Message-ID: <15737.42848.170464.688796@pcp745479pcs.reston01.va.comcast.net>

Uche Ogbuji writes:
 > You see, this is why reporting such "bugs" early is helpful.  I could have 
 > told you ages ago that it is a *bad* idea to call cloneNode on a Document 
 > object.
 > 
 > Accordin to the DOM Level 2 spec:
 > 
 > "And, cloning Document, DocumentType, Entity, and Notation nodes is 
 > implementation dependent."

That's no reason to think its a bad idea to implement it or need it,
just that you can't rely on it being supported by an arbitrary DOM
implementation.

 > I do agree that the confused error message is a glitch.  Current PyXML CVS 
 > gives a more straightforward "sod off"  :-)

Not quite; the previous message would have been raised calling
cloneNode() on a processing instruction as well.  Or calling it with
deep=1 on a portion of the tree that contained a processing
instruction.  That was a real bug, and not an arbitrary limitation.

 > We choose not to allow it.  Perfectly legal, and I think this is the right 
 > choice.

Honestly, I think we should implement cloneNode() for Document, simply
because not doing so seems an unnecessary limitation.  It is not for
the library to decide what is right for the application.

I agree that not supporting it is legal.  The exception that is raised
is wrong: it should be xml.dom.NotSupportedErr.

 > If you try going this route, I guarantee you'll still be trying to get the 
 > most basic things right six months from now.

Heck, we're still trying to get Expat right, and it isn't exactly the
freshest software around!

 > This is the impetus for the Python-in-a-tie effort for Python
 > proper.  I do think we'd make a lot more friends if there were a
 > matching PyXML-in-a-tie.  It would mean companies would have to

That would be nice to have.  First task:  improve & integrate all the
random piles of tests out there!  They should all be run when I type
"make check" at the top level, not just a handful.

 > You pointed out one problem in cloneNode which, from what I gather,
 > was mostly because you're abusing DOM.  This had nothing to do with

It is not at all clear that this is an abuse of the DOM, as I
explained above.


  -Fred

-- 
Fred L. Drake, Jr.  <fdrake at acm.org>
PythonLabs at Zope Corporation



From jml at mumak.net  Wed Sep  4 00:12:39 2002
From: jml at mumak.net (Jonathan Lange)
Date: 04 Sep 2002 14:12:39 +1000
Subject: [Twisted-Python] Web MVC hello world difficulties
Message-ID: <1031112760.4365.42.camel@sting>

Hello,

I am trying to use Web MVC to create a simple page that has a form with
a single text field. When something is entered into the text field,
'Hello World!' should be displayed in the greeting section.

I cannot get it to work, the greeting field remains unchanged, and the
value in the text field keeps being reset.

Below is a pretty simple example that demonstrates my problem.

Thanks,
jml

<!-- index.xhtml -->
<html>
<head>
    <title class="title">Title will go here</title>
</head>
<body>
    <h1 class="title">
        Title will go here
    </h1>
    <p class="greeting">greeting</p>
    <form action="">
        <input type="TEXT" id="name"/>
    </form>
</body>
</html>



# hello.rpy
import helloresource

model = helloresource.MHello()
resource = helloresource.CHello(model)



# helloresource.py
from twisted.web import wmvc
from twisted.web import domwidgets
from twisted.web import domhandlers
from twisted.web import domtemplate
from twisted.python import domhelpers
        
class MHello(wmvc.WModel):
    def __init__(self):
        wmvc.WModel.__init__(self)
        self.title = "Mezzanine"
        self.name = "World"
        self.greeting = ""
        
    def updateGreeting(self):
        self.greeting = 'Hello, %s!' % self.name
        
class VHello(wmvc.WView):
    templateFile = 'index.xhtml'
    def setUp(self, request, document):
        self.model.updateGreeting()
    
    def factory_title(self, request, node):
        domhelpers.clearNode(node)
        return domwidgets.Text(self.model)
        
    def factory_greeting(self, request, node):
        domhelpers.clearNode(node)
        return domwidgets.Text(self.model)
        
    def factory_name(self, request, node):
        domhelpers.clearNode(node)
        return domwidgets.InputText(self.model)
    
class NameHandler(domhandlers.SingleValue):
    def check(self, request, data):
        if data:
            return 1

    def commit(self, request, node, data):
        domhandlers.SingleValue.commit(self, request, node, data)
        print "data: %s" % data

class CHello(wmvc.WController):
    def factory_name(self, model):
        return NameHandler(model)

wmvc.registerViewForModel(VHello, MHello)
wmvc.registerControllerForModel(CHello, MHello)







From twisted at moshez.org  Sat Sep  7 12:36:29 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 7 Sep 2002 16:36:29 -0000
Subject: [Twisted-Python] 2.3 and an unstable chroot
Message-ID: <20020907163629.22738.qmail@green.zadka.com>

Dear root at pyramid,

Python2.3's problems with distutils are fixed, so I would like to turn
Python2.3 support on for Twisted 0.99.1. We have two options:

1. I can build in the unstable chroot on moshez.org: that will mean wasted
   upload and download time.
2. We can create an ssh-able unstable chroot on pyramid.

Here are the steps to do so:
1. Pick a directory
2. Run debootstrap *woody*
3. Enter the chroot, change apt/sources.list to point to sid and dist-upgrade
4. Install ssh, and configure it to be a server
5. Copy /etc/passwd from outside to the chroot
6. Run a script to make home directories and chown them
7. Copy the $CHROOT/etc/init.d/ssh to /etc/init.d/ssh-chroot
8. Modify /etc/init.d/ssh-chroot so that all commands look at files in the
   chroot, and such that start-stop-server runs the command "chroot" with
   the argument "sshd" (man start-stop-server for that)

Thanks.





From sean at twistedmatrix.com  Sat Sep  7 14:21:40 2002
From: sean at twistedmatrix.com (Sean Riley)
Date: Sat, 7 Sep 2002 13:21:40 -0500
Subject: [Twisted-Python] serial datatype in t.e.row
Message-ID: <HOEEKPCOKELHCNIJNMAGCEKHCGAA.sean@twistedmatrix.com>

I have been looking at adding support for "serial" columns into
twisted.enterprise.row and it appears to be harder than i originally
thought.

Serial columns auto-increment when a row is inserted so that the application
doesnt have to manage the value of the index manually. So:

	CREATE TABLE mytable
	(
	  column1  serial,
	  column2  int
	);

	INSERT INTO mytable (column2) VALUES (33);

will actually auto-increment the sequence for "column1" and use the next
value.

But.. using twisted enterprise:

	newRow = MyRow()
	reflector.insertRow(newRow)

does effectively the same thing, but the newRow object doesn't know the
value of the index column (column1 in this case) that was just inserted, so
it doesn't know how to update or delete itself!

One solution may be to manually run a

	SELECT nextval('sequencename')

to get the next value and use that for the insert, but this requires an
extra step for each insert, and requires that the we know which tables have
serial columns (suprisingly hard to figure out..) and makes the behavior for
tables with serial columns and no serial columns very different.

Also, the behavior of auto-incrementing key columns is different for every
database implementation...



----------------
"If he's so smart, then how come he's dead?", Homer Simspon
Sean Riley
sean at ninjaneering.com




From acapnotic at twistedmatrix.com  Sat Sep  7 16:24:25 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 07 Sep 2002 13:24:25 -0700
Subject: [Twisted-Python] container elements in domtemplate
Message-ID: <1031430268.24317.7.camel@troglodyte.funhouse>

webquotes.html in the domtemplate howto doesn't cover this case.

template:
{{{
<foo>
  stuff

  <bar>
    things
  </bar>
</foo>
}}}

How do I replace "stuff" in the template without clearing the entire foo
node, thus destroyng bar and depriving me of the opportunity to insert
"things"?






From glyph at twistedmatrix.com  Sat Sep  7 16:30:56 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 07 Sep 2002 15:30:56 -0500 (CDT)
Subject: [Twisted-Python] container elements in domtemplate
In-Reply-To: <1031430268.24317.7.camel@troglodyte.funhouse>
References: <1031430268.24317.7.camel@troglodyte.funhouse>
Message-ID: <20020907.153056.125902168.glyph@twistedmatrix.com>

On 07 Sep 2002 13:24:25 -0700, Kevin Turner <acapnotic at twistedmatrix.com> wrote:
> <foo>stuff<bar>things</bar></foo>

> How do I replace "stuff" in the template without clearing the entire foo
> node, thus destroyng bar and depriving me of the opportunity to insert
> "things"?

That depends.

What about this case:

<foo>stuff<bar>things</bar>spam</foo>

Do you want to replace stuff *and* spam?  Or only stuff, or only spam, or both?
It sounds like you want to be reading some DOM documentation; this isn't really
specific to webmvc.


-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020907/e911cb6b/attachment.pgp 

From glyph at twistedmatrix.com  Sat Sep  7 17:27:27 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 07 Sep 2002 16:27:27 -0500 (CDT)
Subject: [Twisted-Python] serial datatype in t.e.row
In-Reply-To: <HOEEKPCOKELHCNIJNMAGCEKHCGAA.sean@twistedmatrix.com>
References: <HOEEKPCOKELHCNIJNMAGCEKHCGAA.sean@twistedmatrix.com>
Message-ID: <20020907.162727.88468489.glyph@twistedmatrix.com>

On Sat, 7 Sep 2002 13:21:40 -0500, "Sean Riley" <sean at twistedmatrix.com> wrote:
> One solution may be to manually run a
> 
> 	SELECT nextval('sequencename')
> 
> to get the next value and use that for the insert, but this requires an
> extra step for each insert, and requires that the we know which tables have
> serial columns (suprisingly hard to figure out..) and makes the behavior for
> tables with serial columns and no serial columns very different.

It seems like it's reasonable for the "save" operation to return a Deferred,
since it's running in a thread anyway.  The behavior may be different, but the
interface would be the same.  Could the difference in behavior from the
interface standpoint be fixed by adding a "serial" hint to the "dbKeyColumns"
attribute?

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020907/93f8b007/attachment.pgp 

From sean at twistedmatrix.com  Sat Sep  7 17:35:12 2002
From: sean at twistedmatrix.com (Sean Riley)
Date: Sat, 7 Sep 2002 16:35:12 -0500
Subject: [Twisted-Python] relationships in t.e.row
Message-ID: <HOEEKPCOKELHCNIJNMAGMEKICGAA.sean@twistedmatrix.com>

a natural extension of twisted.enterprise.row is to add support for
relationships between tables.

anyone got any good examples of tools or apps that do this well?

Some initial thoughts..

Currently, the reflector is initialized with the "stubs" structure that
consists of:

	stubClass, tablename, keycolumns

for each (database table / row class). This information could be extended to
include some relationship data in the form of foreign keys. This foreign key
data would allow relationships between tables in the database to be mirrored
into the reflector.

For example, in the existing row example code the stubs structure is:

stubs = [ (RoomRow, "testrooms", [("roomId","int4")]) ]

If there was another table "furniture" and a foreign key in that table that
connects it to the room table, then that could be specified when
initializing the reflector:

stubs = [
  (RoomRow,      "testrooms", [("roomId","int4")]), [] ),
  (FurnitureRow, "furniture", [("furnId","int4")]), [("roomId", "int4",
"rooms", "roomId")] )]

where the forth element in each entry is a foreign key of :
	(local_column_name,
	 column_type,
	 foreign_table_name,
	 foreign_column_name)

(could specify the foreign class also, but the reflector should already know
which class corresponds to the foreign table.)

This foreign key data would then be used when loading row objects from the
database. Any time a "RoomRow" object is loaded, it would load all of the
FurnitureRows for that room.  Although the foreign key data is specified for
the child table (furniture) it is when objects of the parent table
(testrooms) are loaded that the significant work happens.

Allowing an option for child rows to be loaded when loading a row is
probably a good idea.

This probably requires some changes to t.e.row to work. Currently the
optional "factoryMethod" is passed into Reflector::loadObjectsFrom. The
factoryMethod will need to be available for children classes also, so it
probably should be added to the stubs structure.

The "data" passed to loadObjectsFrom is also an issue, maybe the data passed
into the highest level loadObjectsFrom is passed down to children, or the
parent Row instance that the rows are being loaded for is passed as the
data...? Maybe loadObjectsFrom takes a parent object every time it is
called - this may even be required.

The relationship between rows once they are loaded is another issue. Where
are children row objects put once they are loaded? In the above example,
maybe the RoomRow object has a list member variable called "furniture" or
"children" added to it and the FurnitureRow objects are put in that list?
This becomes a type of containment system with a heirarchy of containers...

So, loading row objects is doable. I'm not sure of all the implications for
other SQL operations. Assuming that all changes to the database are going
through the row interface makes things easier, but it requires more
thought... A good goal is to be able to operate on these row objects in
memory and have the changes propagate into the database in  controllable
way.



----------------
"If he's so smart, then how come he's dead?", Homer Simspon
Sean Riley
sean at ninjaneering.com




From uche.ogbuji at fourthought.com  Sat Sep  7 14:54:46 2002
From: uche.ogbuji at fourthought.com (Uche Ogbuji)
Date: Sat, 07 Sep 2002 12:54:46 -0600
Subject: [XML-SIG] Re: [Twisted-Python] Can anyone recommend a sensible 
 XML parser for Python?
In-Reply-To: Message from "Fred L. Drake, Jr." <fdrake@acm.org> 
   of "Sat, 07 Sep 2002 03:14:40 EDT." <15737.42848.170464.688796@pcp745479pcs.reston01.va.comcast.net> 
Message-ID: <E17nkja-0002ue-00@malatesta.local>

> 
> Uche Ogbuji writes:
>  > You see, this is why reporting such "bugs" early is helpful.  I could have 
>  > told you ages ago that it is a *bad* idea to call cloneNode on a Document 
>  > object.
>  > 
>  > Accordin to the DOM Level 2 spec:
>  > 
>  > "And, cloning Document, DocumentType, Entity, and Notation nodes is 
>  > implementation dependent."
> 
> That's no reason to think its a bad idea to implement it or need it,
> just that you can't rely on it being supported by an arbitrary DOM
> implementation.

OK.  So what should it mean to clone any of these node types?  I can't hardly 
imagine anything that doesn't run into circular madness.  I think the DOM WG 
refused to specify this for good reason.


>  > I do agree that the confused error message is a glitch.  Current PyXML CVS 
>  > gives a more straightforward "sod off"  :-)
> 
> Not quite; the previous message would have been raised calling
> cloneNode() on a processing instruction as well.  Or calling it with
> deep=1 on a portion of the tree that contained a processing
> instruction.  That was a real bug, and not an arbitrary limitation.

OK.  Glad it's fixed, then.


>  > We choose not to allow it.  Perfectly legal, and I think this is the right 
>  > choice.
> 
> Honestly, I think we should implement cloneNode() for Document, simply
> because not doing so seems an unnecessary limitation.  It is not for
> the library to decide what is right for the application.

It's not arbitrary at all.  cloneNode is not supposed to alter the 
ownerDocument: that is for importNode to do.  So if you clone a document node, 
what happens?

Do you Create a new document (and thus docType) node and then effectively call 
importNode on the childNodes?  That's the only approach that makes sense to 
me.  Yet it's quite arbitrary and magical.  I would rather force people to be 
clear about what they're doing by manually creating another document and then 
calling importNode on all the childNodes of the original.

So I do not agree that we should support cloneNode for the 4 unspecified node 
types.


> I agree that not supporting it is legal.  The exception that is raised
> is wrong: it should be xml.dom.NotSupportedErr.

There is no stipulation that such an exception should be thrown.  The behavior 
is impl dependent, and I don't see why that doesn't mean the implementation 
can choose to throw whatever exception it wishes.  However, I certainly do not 
object to a change to throwing xml.dom.NotSupportedErr.  I just don't think 
it's a bug that right now it doesn't.


>  > This is the impetus for the Python-in-a-tie effort for Python
>  > proper.  I do think we'd make a lot more friends if there were a
>  > matching PyXML-in-a-tie.  It would mean companies would have to
> 
> That would be nice to have.  First task:  improve & integrate all the
> random piles of tests out there!  They should all be run when I type
> "make check" at the top level, not just a handful.

Yes.  Build and test farms would be the main engine of such an effort.


-- 
Uche Ogbuji                                    Fourthought, Inc.
http://uche.ogbuji.net    http://4Suite.org    http://fourthought.com
Track chair, XML/Web Services One Boston: http://www.xmlconference.com/
Basic XML and RDF techniques for knowledge management, Part 7 - 
http://www-106.ibm.com/developerworks/xml/library/x-think12.html
Keeping pace with James Clark - http://www-106.ibm.com/developerworks/xml/libra
ry/x-jclark.html
Python and XML development using 4Suite, Part 3: 4RDF - 
http://www-105.ibm.com/developerworks/education.nsf/xml-onlinecourse-bytitle/8A
1EA5A2CF4621C386256BBB006F4CEC





From sean at twistedmatrix.com  Sun Sep  8 16:48:58 2002
From: sean at twistedmatrix.com (Sean Riley)
Date: Sun, 8 Sep 2002 15:48:58 -0500
Subject: [Twisted-Python] relationships in t.e.row
In-Reply-To: <HOEEKPCOKELHCNIJNMAGMEKICGAA.sean@twistedmatrix.com>
Message-ID: <HOEEKPCOKELHCNIJNMAGEEKMCGAA.sean@twistedmatrix.com>

i now have a working version of relationships in t.e.row that also includes
simplifying the interface a little. It is however incompatible with the
existing version of the code...

Is anyone using t.w.row and if so, do they object to changes to add this
functionality even if it breaks existing code?


The new interface uses class attributes instead of the "stubs" stucture and
removes all of the class mutation that was being done.  Now, to define a
class for a database table looks like:

class FurnitureRow(row.RowObject):
    rowColumns    = ["furnId", "roomId", "name", "posx", "posy"]
    dbKeyColumns  = [("furnId","int4")]
    tableName     = "furniture"
    foreignKeys   = [("testrooms", [("roomId","int4")],
[("roomId","int4")]) ]

full code and docs to follow if no-one objects.


-----Original Message-----
From: twisted-python-admin at twistedmatrix.com
[mailto:twisted-python-admin at twistedmatrix.com]On Behalf Of Sean Riley
Sent: Saturday, September 07, 2002 4:35 PM
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] relationships in t.e.row


a natural extension of twisted.enterprise.row is to add support for
relationships between tables.

anyone got any good examples of tools or apps that do this well?

Some initial thoughts..

Currently, the reflector is initialized with the "stubs" structure that
consists of:

	stubClass, tablename, keycolumns

for each (database table / row class). This information could be extended to
include some relationship data in the form of foreign keys. This foreign key
data would allow relationships between tables in the database to be mirrored
into the reflector.

For example, in the existing row example code the stubs structure is:

stubs = [ (RoomRow, "testrooms", [("roomId","int4")]) ]

If there was another table "furniture" and a foreign key in that table that
connects it to the room table, then that could be specified when
initializing the reflector:

stubs = [
  (RoomRow,      "testrooms", [("roomId","int4")]), [] ),
  (FurnitureRow, "furniture", [("furnId","int4")]), [("roomId", "int4",
"rooms", "roomId")] )]

where the forth element in each entry is a foreign key of :
	(local_column_name,
	 column_type,
	 foreign_table_name,
	 foreign_column_name)

(could specify the foreign class also, but the reflector should already know
which class corresponds to the foreign table.)

This foreign key data would then be used when loading row objects from the
database. Any time a "RoomRow" object is loaded, it would load all of the
FurnitureRows for that room.  Although the foreign key data is specified for
the child table (furniture) it is when objects of the parent table
(testrooms) are loaded that the significant work happens.

Allowing an option for child rows to be loaded when loading a row is
probably a good idea.

This probably requires some changes to t.e.row to work. Currently the
optional "factoryMethod" is passed into Reflector::loadObjectsFrom. The
factoryMethod will need to be available for children classes also, so it
probably should be added to the stubs structure.

The "data" passed to loadObjectsFrom is also an issue, maybe the data passed
into the highest level loadObjectsFrom is passed down to children, or the
parent Row instance that the rows are being loaded for is passed as the
data...? Maybe loadObjectsFrom takes a parent object every time it is
called - this may even be required.

The relationship between rows once they are loaded is another issue. Where
are children row objects put once they are loaded? In the above example,
maybe the RoomRow object has a list member variable called "furniture" or
"children" added to it and the FurnitureRow objects are put in that list?
This becomes a type of containment system with a heirarchy of containers...

So, loading row objects is doable. I'm not sure of all the implications for
other SQL operations. Assuming that all changes to the database are going
through the row interface makes things easier, but it requires more
thought... A good goal is to be able to operate on these row objects in
memory and have the changes propagate into the database in  controllable
way.



----------------
"If he's so smart, then how come he's dead?", Homer Simspon
Sean Riley
sean at ninjaneering.com


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From sean at twistedmatrix.com  Sun Sep  8 17:17:50 2002
From: sean at twistedmatrix.com (Sean Riley)
Date: Sun, 8 Sep 2002 16:17:50 -0500
Subject: [Twisted-Python] caching of row objects
Message-ID: <HOEEKPCOKELHCNIJNMAGOEKMCGAA.sean@twistedmatrix.com>

Currently, if an application loads a RowObject for a particular row twice,
it gets two instances that correspond to the same database row. this has the
potential to cause data errors as these instances don't know about each
other.

One solution is make the reflector know about all the rowObjects loaded
(they all have unique key identifiers from the db) and act as a factory -
passing out either new objects or already loaded objects instead of
duplicates.

This is pretty easy to do, but I'm not sure of the implications for cleaning
up RowObjects. Maybe refcounting of rowobjects to remove them from this
cache? Maybe an explicit "unload" or "unCache" object method on the
reflector?  any ideas?

----------------
"If he's so smart, then how come he's dead?", Homer Simspon
Sean Riley
sean at ninjaneering.com




From glyph at twistedmatrix.com  Sun Sep  8 18:31:31 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 08 Sep 2002 17:31:31 -0500 (CDT)
Subject: [Twisted-Python] relationships in t.e.row
In-Reply-To: <HOEEKPCOKELHCNIJNMAGEEKMCGAA.sean@twistedmatrix.com>
References: <HOEEKPCOKELHCNIJNMAGMEKICGAA.sean@twistedmatrix.com>
	<HOEEKPCOKELHCNIJNMAGEEKMCGAA.sean@twistedmatrix.com>
Message-ID: <20020908.173131.45869269.glyph@twistedmatrix.com>

On Sun, 8 Sep 2002 15:48:58 -0500, "Sean Riley" <sean at twistedmatrix.com> wrote:
> i now have a working version of relationships in t.e.row that also includes
> simplifying the interface a little. It is however incompatible with the
> existing version of the code...

I don't think anyone else was using the existing code; it needed some of the
changes you've just mentioned first :-)

> Is anyone using t.w.row and if so, do they object to changes to add this
> functionality even if it breaks existing code?

> class FurnitureRow(row.RowObject):
>     rowColumns    = ["furnId", "roomId", "name", "posx", "posy"]
>     dbKeyColumns  = [("furnId","int4")]
>     tableName     = "furniture"
>     foreignKeys   = [("testrooms", [("roomId","int4")],
> [("roomId","int4")]) ]

The names of these attributes look a little sloppy.  Could they have a
consistent prefix to give readers of the code a hint at what they're looking
at?  I would propose "rowColumns, rowKeyColumns, rowTableName, rowForeignKeys",
as long as we're breaking compatibility.

This looks like a good evolution of the ROW interface.  How stable do you feel
this new iteration will be?

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020908/4686a90e/attachment.pgp 

From glyph at twistedmatrix.com  Sun Sep  8 18:32:57 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 08 Sep 2002 17:32:57 -0500 (CDT)
Subject: [Twisted-Python] caching of row objects
In-Reply-To: <HOEEKPCOKELHCNIJNMAGOEKMCGAA.sean@twistedmatrix.com>
References: <HOEEKPCOKELHCNIJNMAGOEKMCGAA.sean@twistedmatrix.com>
Message-ID: <20020908.173257.69059563.glyph@twistedmatrix.com>

On Sun, 8 Sep 2002 16:17:50 -0500, "Sean Riley" <sean at twistedmatrix.com> wrote:

> This is pretty easy to do, but I'm not sure of the implications for cleaning
> up RowObjects. Maybe refcounting of rowobjects to remove them from this
> cache? Maybe an explicit "unload" or "unCache" object method on the
> reflector?  any ideas?

It sounds like this is a job for weak references.  We can use those, now that
we require Python 2.1 at minimum :).  Take a look at the docs for the "weakref"
module.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020908/6ae22514/attachment.pgp 

From glyph at twistedmatrix.com  Sun Sep  8 21:06:53 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 08 Sep 2002 20:06:53 -0500 (CDT)
Subject: [Twisted-Python] Re: Can anyone recommend a sensible XML parser for Python?
In-Reply-To: <E17nYor-0000u0-00@malatesta.local>
References: <glyph@twistedmatrix.com>
	<E17nYor-0000u0-00@malatesta.local>
Message-ID: <20020908.200653.27439528.glyph@twistedmatrix.com>

On Sat, 07 Sep 2002 00:10:51 -0600, Uche Ogbuji <uche.ogbuji at fourthought.com> wrote:
> > On Fri, 06 Sep 2002 17:31:51 -0600, Uche Ogbuji <uche.ogbuji at fourthought.com> wrote:

> > I suppose I could try to wrap HtmlParser with minidom... yuck.  Gross, but
> > probably a good idea, come to think of it :)

> I can't imagine why this would be gross.

Sorry, I was saying that making sense of non-XHTML HTML is kind of gross.  I
did say that it was a good idea, and it's definitely a neat trick.

> Accordin to the DOM Level 2 spec: "And, cloning Document, DocumentType,
> Entity, and Notation nodes is implementation dependent."

This is why standards compliance is not terribly important to me.  I would
rather have a useful XML API than a standardized one.

> Can you expand a bit more on the actual use case that makes you think you want 
> to clone a document node?

I have a template "frame" document.  I want to clone the document, populate it
with information lifted from other XML files, and then write the resultant
(cloned) document out.  This is the very first use-case I ever had working with
XML and it is still the most common.

> We choose not to allow it.  Perfectly legal, and I think this is the right 
> choice.

Yes, but the point remains that this *used* to work, and now it *doesn't*.
This is functionality I found useful.  While I can't comment on the intrinsic
sense or nonsense of cloning document nodes in DOM, I do know that it's
difficult to keep track of when features like this appear and disappear in the
various different XML solutions for Python.

Maybe this is the only feature that has done this; I don't know.  It just
happens that it's a very commonly-used one for me.

This is just another instance of my general complaint that tracking versioning
dependencies is not worth the effort for my degenerately simple use-cases for
XML.

> You mean you can't require, say PyXML 0.8.1?  Tough crowd you develop for?
> :-)

There are still some parties interested in Twisted who are upset that it
requires Python 2.1; in fact, I felt guilty doing 2.1 support because I am
likely going to have to backport portions of it to 1.5.2 for some people.  We
can all thank Red Hat for this inane persistence of ancient python versions,
but it is sadly the world I live in.

> > My main frustration is with packaging.

> Here you have a point.  Python, PyXML, and a lot of the related packages move
> very quickly,. and so quickly that they cause all manner of packaging
> problems.

This is my main point, and this is the one that the PyXML community can do the
least to address.  Buggy and idiosyncratic implementations are already in the
wild, and some apps will depend on those particular bugs and idiosyncrasies.
If twisted depends on a new or different set of bugs and quirks, I make it
incompatible with whatever other XML-using applications are out there today.

Given that XML is an integration technology this is certainly less than
desirable.

> There is no easy solution to this.

Having a project that is precipitously approaching 1.0 myself, I can
sympathize.  As much as this sort of dependency and compatibility problem has
bothered me, I *know* there will be people that write apps for Twisted and will
curse my name when I enhance some functionality later on :-).

> I have had it in mind to suggest a PyXML-in-a-tie type effort in the Python
> Business Forum once the effort on Python itself starts to gain legs.  I guess
> I can count on you to at least help cheerlead?  :-)

Cheerleading, certainly :-).  Although I'm less interested in seeing PyXML
prepared for "business" clients and more interested in just seeing the level of
QA on the volunteer work go up.  If I *had* any spare "scarce resources" to
commit beyond my own projects, I would certainly help getting the unit tests
unified and automated.

> > or produce what amounts to my own `implementation' of an XML parser.
> 
> If you try going this route, I guarantee you'll still be trying to get the 
> most basic things right six months from now.

...

> > For the applications that I'm intending to write, just doing my own parser and
> > API is both more appealing and more rewarding.
> 
> Really?  Color me deep skeptical.  I have not seen an application on earth 
> where implementing one's own parser is a good idea, and precious few where 
> implementing one's own API is a good idea.  I have a lot of colleagues who 
> have tried.

While it is *possible* that I'm smarter than you think I am, it is certain that
I'm more stubborn.  My sophomoric attempt at an XML parser is now in Twisted
CVS.

I've had this objection raised over writing yet another a web server, yet
another remote procedure call protocol, yet another asynchronous socket server
and yet another database interface.  It seems like at least some of these ideas
were good ones, so I went ahead and wrote an XML parser and representation
anyway :-).

A fellow I know from IRC once said "it's easier to write an s-expression parser
for a particular platform by hand than to learn to use any of the XML tools for
that platform".  I think that if you're interested in keeping your focus narrow
in terms of what you do with XML, the same is true of writing an XML parser.

As a data point for this hypothesis, writing the parser and the node tree took
me less than half as much time as writing these posts to various mailing lists
about XML tools (not counting this post, which has been the most
time-consuming): it took less than a quarter as much time as attempting (and
failing) to track down bugs in PyXML, not counting the time I spent trying to
figure out how to turn off undesired features in a way that would work on more
than one version.  My two main existing PyXML-using applications are already
ported to this, changing barely any of their code.

Even so, this is almost not a fair comparison because I have several months of
experience with those tools on Python 2.1, and I've read a few books on XML
already.

> > Neither DOM nor SAX will present an API which allows me to get network XML
> > events in quite the way I want, so I'm going to have to do some wrapping.

> I have learned through my own bitter experience that you do not want network
> interfaces to have *anything* to do with the lexical XML layer (or even
> Infoset).  It is best to design network interactions around *application*
> level semantics.  Basically sending around chunks of XML text is far less
> hazardous than what I think you mean.

I'm not sure what you think I mean, really, but specifically, I'm thinking
particularly of parsing and routing Jabber XML streams.  If they are designed
in a "hazardous" way then it's not my issue...  I don't think much of their
protocol design as it is, especially with regard to routing.  (As you might
guess, I think the whole idea of using XML as a network protocol is rather
strange; but Jabber in particular could have been much better done.  BEEP, for
example, I consider odd, but not broken.)

> > (I do wish pyRXP were event-based... it's very close, in spirit, to what I
> > want.)  If the general quality of XML parsers in Python were really high, I
> > would regard this impulse as contrary and counterproductive -- why write my
> > own library for doing this when perfectly good ones already exist and and
> > are deployed all over the place?

> Well, as I said, I don't see any evidence that the quality of XML parsers in 
> Python is not high.  You pointed out one problem in cloneNode which, from what 
> I gather, was mostly because you're abusing DOM.  This had nothing to do with 
> parsing.  Are you speaking generically?

When I run my particular XML-munging tool, sometimes I get:

    NameError: global name 'PROCESSING_INSTRUCTION_NODE' is not defined

which we have discussed the reasons for here.  Slightly less often, but still with
a significant frequency (same python, same PyXML, same input), I get:

    zsh: segmentation fault       ] (doc/howto/basics)

I can't present hard evidence for this, I'm sorry, because I'm not familiar
with the internals of PyXML or expat and I can't get the bug to happen
reliably.  If I can ever boil it down to something predictable (i.e. less than
1500 lines of code and half a meg of XML to trigger it) be assured I will make
the most complete bug report I can.

> > Nevertheless, it is easier to write my own XML parser than to even properly
> > report the bugs that I have thus far discovered.

> I find this claim ludicrous on its face.  Writing an XML parser with the 
> compliance level and quality of any of the ones in PyXML takes years.  Yes.  
> Years.

I never claimed to need a parser with PyXML's level of compliance; in fact,
I've said several times that compliance at that level is annoying to me because
it's too strict.

I think we're going to have to agree to disagree on "quality", but at least for
my use cases I don't get occasional coredumps from my parser.  I cannot
substantiate this with real bug reports, so please feel free to dismiss this as
FUD if you disagree.  From my discussions with other developers near my
interest area, however, QA on the PyXML project is notoriously poor, and the
quality is wildly variant from release to release.  As you yourself have said,
this is likely to remain so until someone funds improvements.

I do not feel as though I am owed anything in particular by the PyXML project
or by any subscriber to any of these lists.  In fact, I'm quite grateful for it
having provided a nice, simple introduction to the world of XML; I probably
would not be using XML today at all if it weren't for the PyXML project.
Unfortunately, due to my larger-than-average concerns about dependencies and
ease of automating testing for my own project, I don't think that PyXML is a
good solution.  I need a *very* small XML library, with no strings attached.
PyXML is huge, and featureful, and I'm sure in the most recent incarnations
it's very robust.  It does come with a lot of strings attached though.

I have decided it's not worth my time at this point to invest a lot of effort
in helping out, until a few versions go by and the general impressions I get
from XML developers I work with are becoming more positive.  This doesn't mean
I won't lend a helping hand when I can, but the communication overhead to
working in the PyXML community is not currently worth the gain I would get from
it.

I wish you the best of luck in making me look foolish for saying that :-).

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020908/7b56fd46/attachment.pgp 

From boyd at strakt.com  Mon Sep  9 05:45:21 2002
From: boyd at strakt.com (Boyd Roberts)
Date: Mon, 09 Sep 2002 11:45:21 +0200
Subject: [Twisted-Python] typed mktap usage.Options parameters
References: <1031372854.14038.28.camel@troglodyte.funhouse> <20020906.234051.55512897.glyph@twistedmatrix.com>
Message-ID: <3D7C6DB1.80509@strakt.com>

Glyph Lefkowitz wrote:

> So you could say... connectString("tcp:8080:localhost")
> or listenString("ssl:8080").

Plan 9 does exactly that:

    http://plan9.bell-labs.com/magic/man2html/2/dial

In the above example I'd change it to:

    connectString("protocol:host:port")

Although each protocol should interpret what comes
after the first : separator.  Obviously this should
be generalised so that the 'LHS' is handed the 'RHS'
to process.

* [LR]HS - Left/Right Hand Side






From fredrik at pythonware.com  Mon Sep  9 07:12:45 2002
From: fredrik at pythonware.com (Fredrik Lundh)
Date: Mon, 9 Sep 2002 13:12:45 +0200
Subject: [XML-SIG] Re: [Twisted-Python] Can anyone recommend a sensible  XML parser for Python?
References: <E17nYor-0000u0-00@malatesta.local>
Message-ID: <00fa01c257f1$d3f48ef0$0900a8c0@spiff>

uche wrote:

> > For the applications that I'm intending to write, just doing my own parser and
> > API is both more appealing and more rewarding.
> 
> Really?  Color me deep skeptical.  I have not seen an application on earth 
> where implementing one's own parser is a good idea, and precious few where 
> implementing one's own API is a good idea.

on the other hand, virtually every commercial XML python user
I know of use their own non-pydom parser/sax-style api/dom-
style api (with 4thought being the obvious exception, of course).

if I couldn't use ElementTree-like apis, I'd probably give up XML
programming...

(using element trees, Glyph's use case would look something like:

    tree = deepcopy.deepcopy(template_tree)
    for node in tree.find(pattern):
        expand(context, node)
    tree.write(stream)

)

</F>




From uche.ogbuji at fourthought.com  Mon Sep  9 15:39:01 2002
From: uche.ogbuji at fourthought.com (Uche Ogbuji)
Date: Mon, 09 Sep 2002 13:39:01 -0600
Subject: [Twisted-Python] Re: [XML-SIG] Re: Can anyone recommend a sensible XML parser for
 Python?
In-Reply-To: Message from Glyph Lefkowitz <glyph@twistedmatrix.com> 
   of "Sun, 08 Sep 2002 20:06:53 CDT." <20020908.200653.27439528.glyph@twistedmatrix.com> 
Message-ID: <E17oUNW-0006ov-00@malatesta.local>

> > Accordin to the DOM Level 2 spec: "And, cloning Document, DocumentType,
> > Entity, and Notation nodes is implementation dependent."
> 
> This is why standards compliance is not terribly important to me.  I would
> rather have a useful XML API than a standardized one.

Well, what do you think is the most useful behavior of cloning a document?  Is 
it the one I posted in response to thread?  If so, don't you think the element 
of surprise is too great (I'd be surprised myself at that behavior)?

Wouldn't it be better for Python/XML to offer a *separate*, specialized 
function for cloning nodes, rather than doing weird things with cloneNode?


> > Can you expand a bit more on the actual use case that makes you think you want 
> > to clone a document node?
> 
> I have a template "frame" document.  I want to clone the document, populate it
> with information lifted from other XML files, and then write the resultant
> (cloned) document out.  This is the very first use-case I ever had working with
> XML and it is still the most common.

I see.  It sounds as if a general document duplication function would be of 
use to you.  I agree that this would be useful.  I'm willing to write one and 
add it to xml.dom.ext.

But I don't think this is a use case for node.cloneNode.


> > We choose not to allow it.  Perfectly legal, and I think this is the right 
> > choice.
> 
> Yes, but the point remains that this *used* to work, and now it *doesn't*.

I don't remember.  What did it do when it "worked"?


> This is functionality I found useful.  While I can't comment on the intrinsic
> sense or nonsense of cloning document nodes in DOM, I do know that it's
> difficult to keep track of when features like this appear and disappear in the
> various different XML solutions for Python.

Was it ever documented?  Every software module has undocumented "features" 
that you use at your peril.  I don't think it's fair to complain when these 
appear and disappear.

Then again, the poor state of PyXML documentation in general weakens that 
point of mine, doesn't it?  Ah well.


> Maybe this is the only feature that has done this; I don't know.  It just
> happens that it's a very commonly-used one for me.
> 
> This is just another instance of my general complaint that tracking versioning
> dependencies is not worth the effort for my degenerately simple use-cases for
> XML.
> 
> > You mean you can't require, say PyXML 0.8.1?  Tough crowd you develop for?
> > :-)
> 
> There are still some parties interested in Twisted who are upset that it
> requires Python 2.1; in fact, I felt guilty doing 2.1 support because I am
> likely going to have to backport portions of it to 1.5.2 for some people.  We
> can all thank Red Hat for this inane persistence of ancient python versions,
> but it is sadly the world I live in.

I sympethize.  It's largely because of Red Hat that it took us so long to drop 
1.5 support in 4Suite.  But a couple of months ago we decided it is not worth 
the developemtn and support overhead and ditched support for all versions 
before 2.1.  I sleep better since then  :-)


> > > My main frustration is with packaging.
> 
> > Here you have a point.  Python, PyXML, and a lot of the related packages move
> > very quickly,. and so quickly that they cause all manner of packaging
> > problems.
> 
> This is my main point, and this is the one that the PyXML community can do the
> least to address.  Buggy and idiosyncratic implementations are already in the
> wild, and some apps will depend on those particular bugs and idiosyncrasies.
> If twisted depends on a new or different set of bugs and quirks, I make it
> incompatible with whatever other XML-using applications are out there today.
> 
> Given that XML is an integration technology this is certainly less than
> desirable.
> 
> > There is no easy solution to this.
> 
> Having a project that is precipitously approaching 1.0 myself, I can
> sympathize.  As much as this sort of dependency and compatibility problem has
> bothered me, I *know* there will be people that write apps for Twisted and will
> curse my name when I enhance some functionality later on :-).
> 
> > I have had it in mind to suggest a PyXML-in-a-tie type effort in the Python
> > Business Forum once the effort on Python itself starts to gain legs.  I guess
> > I can count on you to at least help cheerlead?  :-)
> 
> Cheerleading, certainly :-).  Although I'm less interested in seeing PyXML
> prepared for "business" clients and more interested in just seeing the level of
> QA on the volunteer work go up.  If I *had* any spare "scarce resources" to
> commit beyond my own projects, I would certainly help getting the unit tests
> unified and automated.
> 
> > > or produce what amounts to my own `implementation' of an XML parser.
> > 
> > If you try going this route, I guarantee you'll still be trying to get the 
> > most basic things right six months from now.
> 
> ...
> 
> > > For the applications that I'm intending to write, just doing my own parser and
> > > API is both more appealing and more rewarding.
> > 
> > Really?  Color me deep skeptical.  I have not seen an application on earth 
> > where implementing one's own parser is a good idea, and precious few where 
> > implementing one's own API is a good idea.  I have a lot of colleagues who 
> > have tried.
> 
> While it is *possible* that I'm smarter than you think I am, it is certain that
> I'm more stubborn.

I think you take the wrong gloss on my words.  I think Linus Torvalds himself 
would take years to write a complete and correct XML parser.  It's the nature 
of the beast (XML), not the programmer.

I certainly do not consider myself smart enough to take on that dragon.  I'm 
just glad to lean on folk like Clark (and Drake, Evans and co), Garshol and 
Viellard.


> My sophomoric attempt at an XML parser is now in Twisted
> CVS.

Interesting.  So how did you test it?


> I've had this objection raised over writing yet another a web server, yet
> another remote procedure call protocol, yet another asynchronous socket server
> and yet another database interface.  It seems like at least some of these ideas
> were good ones, so I went ahead and wrote an XML parser and representation
> anyway :-).

I would rather write a Web server, another RPC, another async socket server 
*and* another DBMS interface all in a row than just take on the single task of 
writing an XML parser.  And I think I can speak authoritatively, because I 
*have* implemented all four of those things.

 
> As a data point for this hypothesis, writing the parser and the node tree took
> me less than half as much time as writing these posts to various mailing lists
> about XML tools (not counting this post, which has been the most
> time-consuming): it took less than a quarter as much time as attempting (and
> failing) to track down bugs in PyXML, not counting the time I spent trying to
> figure out how to turn off undesired features in a way that would work on more
> than one version.  My two main existing PyXML-using applications are already
> ported to this, changing barely any of their code.

As I said, I am very skeptical of the result.  I'll be impressed when you tell 
me your home-brew XML parser passes the OASIS conformance suite.

Anyway, this is all moot argument.  It looks as if you've satisfied yourself 
for now.

Good luck.


-- 
Uche Ogbuji                                    Fourthought, Inc.
http://uche.ogbuji.net    http://4Suite.org    http://fourthought.com
Track chair, XML/Web Services One Boston: http://www.xmlconference.com/
Basic XML and RDF techniques for knowledge management, Part 7 - 
http://www-106.ibm.com/developerworks/xml/library/x-think12.html
Keeping pace with James Clark - http://www-106.ibm.com/developerworks/xml/libra
ry/x-jclark.html
Python and XML development using 4Suite, Part 3: 4RDF - 
http://www-105.ibm.com/developerworks/education.nsf/xml-onlinecourse-bytitle/8A
1EA5A2CF4621C386256BBB006F4CEC





From uche.ogbuji at fourthought.com  Mon Sep  9 15:42:44 2002
From: uche.ogbuji at fourthought.com (Uche Ogbuji)
Date: Mon, 09 Sep 2002 13:42:44 -0600
Subject: [XML-SIG] Re: [Twisted-Python] Can anyone recommend a sensible 
 XML parser for Python?
In-Reply-To: Message from "Fredrik Lundh" <fredrik@pythonware.com> 
   of "Mon, 09 Sep 2002 13:12:45 +0200." <00fa01c257f1$d3f48ef0$0900a8c0@spiff>
Message-ID: <E17oUR6-0006pL-00@malatesta.local>

> uche wrote:
> 
> > > For the applications that I'm intending to write, just doing my own parser and
> > > API is both more appealing and more rewarding.
> > 
> > Really?  Color me deep skeptical.  I have not seen an application on earth 
> > where implementing one's own parser is a good idea, and precious few where 
> > implementing one's own API is a good idea.
> 
> on the other hand, virtually every commercial XML python user
> I know of use their own non-pydom parser/sax-style api/dom-
> style api (with 4thought being the obvious exception, of course).

Really?  I am surprised.  I suspect the reasons for this would not be as 
straightforward as truly unique requirements.


> if I couldn't use ElementTree-like apis, I'd probably give up XML
> programming...
> 
> (using element trees, Glyph's use case would look something like:
> 
>     tree = deepcopy.deepcopy(template_tree)
>     for node in tree.find(pattern):
>         expand(context, node)
>     tree.write(stream)
> 
> )

I'm not familiar with ElementTrees.  At any rate, I don't see this use case as 
very daunting, especially if you have DOM and generators.


-- 
Uche Ogbuji                                    Fourthought, Inc.
http://uche.ogbuji.net    http://4Suite.org    http://fourthought.com
Track chair, XML/Web Services One Boston: http://www.xmlconference.com/
Basic XML and RDF techniques for knowledge management, Part 7 - 
http://www-106.ibm.com/developerworks/xml/library/x-think12.html
Keeping pace with James Clark - http://www-106.ibm.com/developerworks/xml/libra
ry/x-jclark.html
Python and XML development using 4Suite, Part 3: 4RDF - 
http://www-105.ibm.com/developerworks/education.nsf/xml-onlinecourse-bytitle/8A
1EA5A2CF4621C386256BBB006F4CEC





From waterbug at beeblebrox.gsfc.nasa.gov  Mon Sep  9 17:36:04 2002
From: waterbug at beeblebrox.gsfc.nasa.gov (Steve Waterbury)
Date: Mon, 09 Sep 2002 17:36:04 -0400
Subject: [Twisted-Python] Re: [XML-SIG] Re: Can anyone recommend a sensible 
 XML parser forPython?
References: <E17oUNW-0006ov-00@malatesta.local>
Message-ID: <3D7D1444.820908D7@beeblebrox.gsfc.nasa.gov>

Uche Ogbuji wrote:

> I would rather write a Web server, another RPC, another async socket server
> *and* another DBMS interface all in a row than just take on the single task of
> writing an XML parser.  And I think I can speak authoritatively, because I
> *have* implemented all four of those things.

Gee, kind of speaks volumes about XML, doesn't it?  
(I know -- cheap, but I couldn't resist ... ;^)  

Steve.



From sean at twistedmatrix.com  Mon Sep  9 23:22:19 2002
From: sean at twistedmatrix.com (Sean Riley)
Date: Mon, 9 Sep 2002 22:22:19 -0500
Subject: [Twisted-Python] Twisted Enterprise ROW
Message-ID: <HOEEKPCOKELHCNIJNMAGMELDCGAA.sean@twistedmatrix.com>

A major update to Twisted Enterprise Row is in!

The new features include:

- support for relationships between database tables. rows from child tables
can be loaded automatically when a row from a parent table is loaded.

- improved interface for intializing reflectors

- refactoring of the DBReflector into Reflector and SQLReflector to allow
easier implementation of new types of reflectors

- an XML Reflector that uses twisted.persisted.marmalade.

- added a ReflectorAuthorizer to dbcred to do authentication against any
reflector

For examples, take a look at twisted.doc.examples row_example.py and
row_xml.py

----------------
"If he's so smart, then how come he's dead?", Homer Simspon
Sean Riley
sean at ninjaneering.com




From fdrake at acm.org  Tue Sep 10 00:40:55 2002
From: fdrake at acm.org (Fred L. Drake, Jr.)
Date: Tue, 10 Sep 2002 00:40:55 -0400
Subject: [Twisted-Python] Re: [XML-SIG] Can anyone recommend a sensible XML parser for Python?
In-Reply-To: <E17oUNW-0006ov-00@malatesta.local>
References: <glyph@twistedmatrix.com>
	<20020908.200653.27439528.glyph@twistedmatrix.com>
	<E17oUNW-0006ov-00@malatesta.local>
Message-ID: <15741.30679.845057.285100@grendel.zope.com>

Uche Ogbuji writes:
 > Wouldn't it be better for Python/XML to offer a *separate*, specialized 
 > function for cloning nodes, rather than doing weird things with cloneNode?

Why?  I'd rather make cloneNode() do the right thing, and it seems
rather clear what that should be.  Certainly more clear than for
DocumentType nodes.  ;-)

 > I see.  It sounds as if a general document duplication function
 > would be of use to you.  I agree that this would be useful.  I'm
 > willing to write one and add it to xml.dom.ext.
 > 
 > But I don't think this is a use case for node.cloneNode.

I think it's a perfectly valid use case for Document.cloneNode().

 > Then again, the poor state of PyXML documentation in general weakens that 
 > point of mine, doesn't it?  Ah well.

There is that.  ;-)  Perhaps before making something stop working (for
some definition of "work"), the documentation should be checked for
contracts and updated if some under-specified behavior should be
consider beyond the contract.  Removing features tends to be frowned
upon in the Python world, especially if the documentation for what
something should do is just plain missing -- it becomes really hard to
say what isn't in the contract, because nobody said what *is* in the
contract.

Glyph:
 > There are still some parties interested in Twisted who are upset
 > that it requires Python 2.1; in fact, I felt guilty doing 2.1
 > support because I am likely going to have to backport portions of
 > it to 1.5.2 for some people.

Hey, at least PyXML makes that part easy, since Python 2.0 support is
still in it's contract!  ;-)  On the other hand, it's painful because
we end up with cruft like xml.dom.minicompat to make things work
reasonably with newer Pythons and still work for older versions.  I'm
waiting for the day we can assume there are new-style objects, and
everything works.

 > I think you take the wrong gloss on my words.  I think Linus
 > Torvalds himself would take years to write a complete and correct
 > XML parser.  It's the nature of the beast (XML), not the
 > programmer.

Hear ye, hear ye!

 > As I said, I am very skeptical of the result.  I'll be impressed
 > when you tell me your home-brew XML parser passes the OASIS
 > conformance suite.

Heck, even Expat doesn't pass that yet!  (We are making progress,
though.)


  -Fred

-- 
Fred L. Drake, Jr.  <fdrake at acm.org>
PythonLabs at Zope Corporation



From uche.ogbuji at fourthought.com  Tue Sep 10 01:08:13 2002
From: uche.ogbuji at fourthought.com (Uche Ogbuji)
Date: Mon, 09 Sep 2002 23:08:13 -0600
Subject: [Twisted-Python] Re: [XML-SIG] Can anyone recommend a sensible XML parser for Python?
In-Reply-To: Message from "Fred L. Drake, Jr." <fdrake@acm.org> 
   of "Tue, 10 Sep 2002 00:40:55 EDT." <15741.30679.845057.285100@grendel.zope.com> 
Message-ID: <E17odGL-0007fB-00@malatesta.local>

> 
> Uche Ogbuji writes:
>  > Wouldn't it be better for Python/XML to offer a *separate*, specialized 
>  > function for cloning nodes, rather than doing weird things with cloneNode?
> 
> Why?  I'd rather make cloneNode() do the right thing, and it seems
> rather clear what that should be.  Certainly more clear than for
> DocumentType nodes.  ;-)

So you think it should do what I mentioned before?

1) Create a new documenType and document node
2) clone all child nodes
3) set the ownerDocument of each of the new nodes to the new document?

If we have it do that, then let us please

1) Document it properly
2) Point out that it is not standard DOM behavior

I am not at all clear that this is the "right thing".  I still think the right 
thing is to throw an exception.  I know the above behavior would throw me as I 
expect the ownerDocument of cloned nodes to be the same as the ones from which 
they were cloned.

But I certainly don't care enough about it to oppose such an addition.  I'd 
just like to make sure we call it out properly.  Least surprise and all that.


-- 
Uche Ogbuji                                    Fourthought, Inc.
http://uche.ogbuji.net    http://4Suite.org    http://fourthought.com
Track chair, XML/Web Services One Boston: http://www.xmlconference.com/
Basic XML and RDF techniques for knowledge management, Part 7 - 
http://www-106.ibm.com/developerworks/xml/library/x-think12.html
Keeping pace with James Clark - http://www-106.ibm.com/developerworks/xml/libra
ry/x-jclark.html
Python and XML development using 4Suite, Part 3: 4RDF - 
http://www-105.ibm.com/developerworks/education.nsf/xml-onlinecourse-bytitle/8A
1EA5A2CF4621C386256BBB006F4CEC





From jml at mumak.net  Fri Sep  6 19:03:32 2002
From: jml at mumak.net (Jonathan Lange)
Date: 07 Sep 2002 09:03:32 +1000
Subject: [Twisted-Python] Web MVC hello world difficulties
In-Reply-To: <1031112760.4365.42.camel@sting>
References: <1031112760.4365.42.camel@sting>
Message-ID: <1031353425.5326.2.camel@sting>

On Wed, 2002-09-04 at 14:12, Jonathan Lange wrote:
> I am trying to use Web MVC to create a simple page that has a form with
> a single text field. When something is entered into the text field,
> 'Hello World!' should be displayed in the greeting section.
> 
> I cannot get it to work, the greeting field remains unchanged, and the
> value in the text field keeps being reset.

I have resolved this.

The above behaviour is entirely consistent with the model object not
being stored between requests. When the relevant fields are kept in a
persistent store (viz. a text file), the problem magically goes away.

regards,
jml




From typo at soniq.net  Tue Sep 10 09:19:15 2002
From: typo at soniq.net (Paul Boehm)
Date: Tue, 10 Sep 2002 15:19:15 +0200
Subject: [Twisted-Python] Anchor
Message-ID: <20020910131914.GA20882@soniq.net>

web/domwidgets.py:246:         self['href'] = href or self.getData() + '/'
the "+ '/'" part makes Anchor unuseable for my application because i don't
want '/' appended to every link. am i misusing Anchor or can you fix this
in cvs ?

  paul




From fdrake at acm.org  Tue Sep 10 14:11:40 2002
From: fdrake at acm.org (Fred L. Drake, Jr.)
Date: Tue, 10 Sep 2002 14:11:40 -0400
Subject: [Twisted-Python] Re: [XML-SIG] Can anyone recommend a sensible XML parser for Python?
In-Reply-To: <E17odGL-0007fB-00@malatesta.local>
References: <fdrake@acm.org>
	<15741.30679.845057.285100@grendel.zope.com>
	<E17odGL-0007fB-00@malatesta.local>
Message-ID: <15742.13788.298950.751589@grendel.zope.com>

Uche Ogbuji writes:
 > So you think it should do what I mentioned before?
 > 
 > 1) Create a new documenType and document node
 > 2) clone all child nodes
 > 3) set the ownerDocument of each of the new nodes to the new document?

If deep==True, yes.  See table below for deep==False.

 > If we have it do that, then let us please
 > 
 > 1) Document it properly
 > 2) Point out that it is not standard DOM behavior

I'm glad to document it carefully; that's entirely reasonable.  It
certainly falls within the space of "implementation dependent", which
the DOM spec says this is.

I think this is the right set of behaviors:

        \   cloneNode(0) | cloneNode(1) | importNode(n,0) | importNode(n,1)
nodeType \               |              |                 |
          +--------------|--------------|-----------------|-----------------
document  | return None  | new document | NotSupportedErr | NotSupportedErr
          +--------------|--------------|-----------------|-----------------
doctype   | new doctype, | new doctype, | new doctype if  | new doctype if
          | no entities  | w/ entities  | new parent has  | new parent has
          | or notations | and notations| doctype==None,  | doctype==None,
          |              |              | else NotSuppErr,| w/ entities
          |              |              | no entities or  | and notations
          |              |              | notations       |

Document.cloneNode(0) returns None since it's not allowed to raise an
exception according to the DOM spec.



  -Fred

-- 
Fred L. Drake, Jr.  <fdrake at acm.org>
PythonLabs at Zope Corporation



From m at moshez.org  Wed Sep 11 16:10:37 2002
From: m at moshez.org (Moshe Zadka)
Date: 11 Sep 2002 20:10:37 -0000
Subject: [Twisted-Python] man pages
Message-ID: <20020911201037.20050.qmail@green.zadka.com>

All utilities in bin/ should be accompanied by man pages.
Violators will be eaten.




From acapnotic at twistedmatrix.com  Wed Sep 11 17:55:13 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 11 Sep 2002 14:55:13 -0700
Subject: [Twisted-Python] version control, QA, branching ...
Message-ID: <1031781315.19657.15.camel@troglodyte.funhouse>

I caught some bits of a discussion on #twisted on my way to bed last
night, and thought "Hey, I should read that."  So I plundered the logs
and did a lot of pruning and here you are, a discussion involving
quality maintance practices with version controlled branches and unit
tests and things.  [attached]

Keep in mind that this log HAS been trimmed by me, and while I have made
an effort to maintain context, it's quite possible that you aren't
seeing the full context for every remark made.

Random notes from me:

        * Michael Schwem was telling me about
          [http://aegis.sourceforge.net/ Aegis], which sounds like it's
          *much* better at branches than CVS is, and pays much stricter
          attention to the entire QA process.
        * In my recent romp through CVS resources, I found
          [http://codestriker.sourceforge.net/ CodeStriker].  I haven't
          talked to anyone who's used this, but it has some ideas in it.




-------------- next part --------------
[05:26] <glyph> radix and I had some discussions about release procedure today, btw :)
[05:26] <glyph> we came to some pretty radical conclusions
[05:27] <itamar> glyph: and they were?
[05:27] <glyph> itamar: release candidates should always be made from HEAD
[05:27] <glyph> itamar: Twisted developers need to learn how to use branches for developing experimental features; HEAD should *always* be releaseable
[05:27] <itamar> branches, here we come
[05:28] <glyph> itamar: the better tests we have, the less craziness with branches is necessary.
[05:36] <fzZzy_> glyph: shall I check in highly untested domtemplate=>microdom code? or wait, and test it some more? 
[05:36] <fzZzy_> I guess this goes back to the cvs branch issue 
[05:37] <dash> fzZzy_: well, isn't testing it easy? =D
[05:38] <fzZzy_> dash: not at 2:30 am 
[05:38] <fzZzy_> and no, I never wrote any domtemplate tests 
[05:39] <dash> fzZzy_: no domtemplate tests?! gasp
[05:39] <dash> fzZzy_: you sound like me
[05:39] <fzZzy_> ok I'm going to bed instead since glyph didn't respond instantaneously ;-) 
[05:39] <fzZzy_> I'll be banging on it tomorrow 
[05:40] *** glyph has changed topic to "Welcome to the Twisted project: sleazeware produced in a drunken fury by college dropouts!"
[05:40] <dash> glyph: !!!
[05:40] <dash> glyph: I GRADUATED
[05:40] <glyph> dash: you didn't write most of twisted :)
[05:40] *** dash waves diploma madly
[06:15] <glyph> jml: much like linux; even very stable kernels with frozen APIs contain "experimental" drivers and such 
[06:15] <jml> glyph: so the trick is to mark them as such?
[06:15] <glyph> itamar: I don't think that's the case; in Twisted's history we've had releases that were pretty stable and didn't require a lot of after-the-fact tweaking
[06:16] <jml> glyph: for many commercial packages, it's not that long after release that you get SP1.. no one really thinks it a bad thing.
[06:16] <jml> just as long as code-breaking changes aren't slipped under the door.
[06:17] <glyph> jml: I am increasingly confident in our test suites lately
[06:17] <glyph> jml: we seem to have had relatively few problems with code-breaking stuff slipping in without anyone noticing :)
[06:17] <jml> glyph: btw, how's the test-first design going? I've found it hard in the past to keep disciplined about it.
[06:18] <glyph> jml: it's hard to keep disciplined about it for me too
:-(.  When I can do it, it's *definitely* better than the other way.

[...a big discussion on one-point-oh philosophy intervenes here.  Only
a few tangentially related bits are included in this log excerpt...]

[06:22] <glyph> itamar: in "policy": we don't have a policy for continuing development of Twisted after 1.0, in terms of legacy support of APIs that may need to change for some reason.  (Yes, some large portion of twisted.internet is stable, but what is our support policy for the *other* portions of twisted that you *need* to use for a useful app?  Are they just unsupported continuing forward?).  We don't have a policy for releases which is sustaina
[06:23] <glyph> this includes things like "when should developers use a branch?" and "how should the release manager interact with users in order to decide whether we mihgt be breaking something important?"
[...]
[06:27] <glyph> itamar: but then, a developer has some feature they want to play around with, which they believe to be potentially unstable, but doesn't break any tests
[06:27] <glyph> what are the guidelines for them to work with that?  
[...]

[06:52] <moshez> glyph: which reminds me.
[06:52] <glyph> moshez: hmm?
[06:52] <moshez> glyph: tell radix to fix ReleaseProcedure
[06:52] <glyph> moshez: we've talked about changes to ReleaseProcedure
[06:52] <moshez> glyph: I left a note there what he should fix
[06:52] <glyph> moshez: OK
[06:53] <moshez> glyph: I'm not talking about changes to the procedure, just bring the document up todate on reality.
[06:53] <glyph> moshez: I don't see the note :)
[06:54] <moshez>    ---- This part is sorely out of date -- document the new Debian way --
[06:54] <itamar> oh
[06:54] <itamar> new policy is to do all major devel on brances?
[06:55] <itamar> better mail the list then
[06:55] <glyph> itamar: that's a proposa, still need to hash it out, and to make sure that it is SUPER EASY for developers to do this
[06:55] <itamar> it sounds painful
[06:55] <moshez> glyph: it isn't.
[06:55] <itamar> but it probably is easy
[06:55] <moshez> glyph: it isn't even mildly easy
[06:55] <moshez> glyph: I'm not sure I like that propsal actually.
[06:56] <glyph> moshez: I figured you wouldn't :)
[06:56] <itamar> here we go again
[06:56] <glyph> but I'm not really sure what you wouldn't like
[06:56] <itamar> it may make more sense to branch on each release
[06:56] <moshez> glyph: merging is hell on earth
[06:57] <glyph> moshez: that gives the developer incentive to integrate early, as well as provide backwards compatibility hooks and good tests so that he doesn't have to hang out in a branch for too long :)
[06:58] <warner> my exp: each branch doubles the total effort. don't branch unless you know you won't do much work on one of the paths
[06:58] <glyph> moshez: when radix and I discussed the policy, we were also debating the need for coverage tools in order to qualify particular changes for branches
[06:58] <moshez> glyph: how do you decide which changes go on a branch and which go on HEAD?
[06:58] <glyph> like if the module you are planning to restructure has 95% unit test coverage, chances are you can get away with not having a branch at all, provided you don't change tests
[06:59] <moshez> glyph: and woulnd't it just make sense to say "never break unittests"?
[06:59] <glyph> moshez: yes, that makes sense
[06:59] <itamar> possibly the effort should go into more tests
[06:59] <itamar> instead of branches
[06:59] <glyph> itamar: that would be optimal
[06:59] <itamar> ugh
[06:59] <itamar> this is too distracting
[06:59] *** itamar has quit IRC ("must work") (~itamar at line102-187.adsl.actcom.co.il)
[07:00] <glyph> i win!
[07:00] <moshez> "Finish Him"
[07:00] *** glyph isn't clear what that would entail, since itamar's already disappeared
[07:01] <glyph> moshez: So yes, "never break unittests" is good, but if you're doing work on, for example, cReactor, there just isn't good enough coverage to be sure that you're OK to check in to a branch which should be always-releaseable (HEAD), even if unittests are A-OK
[07:02] <moshez> glyphy: and when would the merge from the branch to HEAD happen?
[07:02] <glyph> moshez: after our army of simean warriors bashes on the code for several weeks
[07:03] <moshez> glyph: in other words "after several weeks pass"
[07:03] <glyph> moshez: i need to read up on the exact mechanics of branches in order to understand your concerns, I think
[07:03] <moshez> glyph: ok. do so.
[07:03] <glyph> is it not possible for a developer to continuously re-integrate patches to HEAD into their branch?
[07:03] <moshez> glyph: wait.
[07:05] <moshez> glyph: http://www.lerner.co.il/~moshez/cvs/cvstut34.html
[07:05] <warner> glyph: in my experience, yes
[07:05] <warner> glyph: however the question of "should I or not" takes up as much time as doing the commit separately to both branches
[07:06] <glyph> warner: hmm
[07:06] <glyph> warner: what was your experience working with branches?
[07:07] <moshez> http://cvsbook.red-bean.com/cvsbook.html#Going_Out_On_A_Limb__How_To_Work_With_Branches_And_Survive_
[07:08] <glyph> moshez: ugghh
[07:08] <glyph> moshez: the 'spurious conflicts' bit is ... interesting
[07:09] <warner> well, the workfolk kept alternating between the "current on HEAD" and "current on branch" schemes
[07:09] <warner> the biggest problem was that people expected the merge features to mean they could do less work
[07:09] <warner> but the real issue was who decided which bugs/features should get done in which releases
[07:10] <moshez> glyph: I am evil
[07:11] <glyph> warner: hmm
[07:11] <warner> basically foisting developer work off to the config mgmt people, who didn't know the code well enough to say yes or no
[07:11] <glyph> okay, I worked with branches in perforce
[07:11] <glyph> they made *waaaay* more sense than this
[07:11] <glyph> I think cvs's semantics are broken
[07:12] <warner> yup, P4's scheme is easier to work with
[07:12] <glyph> at the very least, they're not what I want ;)
[07:12] <warner> the workfolk took the other path out: ClearCase
[07:12] <warner> That was two years ago and they're still trying to figure out how it works.
[07:12] <moshez> glyph: well, if we moved to SVN, we'd have easier branching
[07:13] <warner> But at least it's expensive. They get good use out of their big NetApp boxes too.
[07:13] <jml> I suppose subversion is out of the question?
[07:13] <warner> I tend to see CVS's painful branching as similar to the 8-char tabstops in the linux kernel..
[07:14] <warner> .. a bug that makes you aware of just how bad it is to overuse that thing..
[07:14] <warner> .. if you were to fix it (or find a tool that did it better), you'd be tempted to use it more, and that would be bad.
[07:16] <glyph> jml: Well, I originally really didn't want to consider it, because I thought that there would be funding for a Twisted-based version control system in the near future
[07:17] <jml> understandable. I disagree though.
[07:18] <glyph> jml: Well, the funding didn't appear as expected (though it still will at some point, most likely about a year from now), and this is the first time I've really wanted a feature which svn potentially implements better
[07:18] <glyph> svn's infrastructure strategy frankly scares me though
[07:19] <warner> twisted.revisions? my brain hurts
[07:20] <jml> glyph: yeah, fair enough. I'm quite happy to have at least one or two network apps that aren't twisted, but that's me.
[07:20] <warner> or maybe that's just the lack of sleep
[07:20] <glyph> warner: your brain hurts?  *your* brain hurts?
[07:20] <glyph> warner: YOU HAVE NOT YET COME TO KNOW PAIN, MORTAL
[07:20] *** warner laughs
[07:23] <phed__> twisted.revision features: every client is also a server. you create a branch every time you edit a file. versioning is measured in minutes. realtime versioning. integrated QA
[07:25] <warner> "integrated QA": my current learn-as-I-go Twisted project is a tinderbox-like distributed build network, including various forms of 'make test' stages
[07:25] <glyph> warner: awesome!
[07:25] <glyph> warner: is this going to be publicly available?
[07:26] <warner> I'm basing it off CVS commit messages, but direct-from-VC would be better
[07:26] <warner> glyph: yup. I did a similar thing for work (before I found twisted), now I'm rewriting it without the shackles of employment
[07:27] <glyph> warner: are you using CVSToys?
[07:27] <warner> glyph: nope. whazzat?
[07:27] <glyph> warner: ooooohhhh
[07:27] <glyph> http://twistedmatrix.com/users/acapnotic/cvs.png
[07:27] <moshez> http://www.freebsd.org/doc/en_US.ISO8859-1/books/faq/misc.html#BIKESHED-PAINTING
[07:27] <glyph> warner: talk to acapnotic :)
[07:29] <warner> glyph: will do. if I guess correctly about what it does, it would get rid of yet another piece of code I need to write. Just like twisted did for the entire serialization and transport layer.
[07:30] <warner> (if I wait long enough, the rest of the necessary code will disappear too. love it.)
[07:31] <glyph> warner: cool :)
[07:31] <glyph> warner: hey wait
[07:31] <glyph> warner: you know, we could really use something like that
[07:31] <glyph> warner: I keep meaning to write an automated unit-test runner with e-mail notification
[07:33] <glyph> I'm going to go to sleep for about 16 hours right now
[07:33] <glyph> talk to you crazy cats later
[07:33] <warner> glyph: that'd be part of it. Of course with twisted you'd get an IRC bot too. The motivation back at work was to punish folks who broke the build. The status output was a web page they'd refresh every once in a while until they saw their changes were built successfully. But I'm planning on Gtk clients too.
[07:34] <warner> catch you later glyph. I'll let you know what I code up.


From twisted at itamarst.org  Thu Sep 12 05:41:28 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 12 Sep 2002 05:41:28 -0400
Subject: [Twisted-Python] Job posting on dice
Message-ID: <3D806148.2080705@itamarst.org>

3 month contract in Portland, $65K.

http://www.dice.com/DandL/s/sofor001.E-010.html




From twisted at itamarst.org  Thu Sep 12 06:59:34 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 12 Sep 2002 06:59:34 -0400
Subject: [Twisted-Python] Twisted: the comics
Message-ID: <3D807396.5000602@itamarst.org>

isometric, one of the coolest web comics in existence, had write-ins for 
plots. So I submitted one.

The result:
http://isometric.spaceninja.com/_/twisted_plutonium/




From zooko at zooko.com  Thu Sep 12 08:06:24 2002
From: zooko at zooko.com (Zooko)
Date: Thu, 12 Sep 2002 08:06:24 -0400
Subject: [Twisted-Python] version control, QA, branching ... 
In-Reply-To: Message from Kevin Turner <acapnotic@twistedmatrix.com> 
   of "11 Sep 2002 14:55:13 PDT." <1031781315.19657.15.camel@troglodyte.funhouse> 
References: <1031781315.19657.15.camel@troglodyte.funhouse> 
Message-ID: <E17pSjo-0001HS-00@localhost>

There are four new version control systems that sound interesting to me:

 * BitKeeper
http://www.bitkeeper.com/

The most mature of the four (?).  Not fully free software, although I think it 
is freely usable for open source projects.

 * Subversion
http://subversion.tigris.org/

Also relatively mature.

 * Arch
http://www.regexps.com/arch.html

There is a nice comparison between arch and subversion somewhere on that site.

 * OpenCM
http://www.opencm.org/

The least mature of the four, but the one with the most impressive 
intellectual provenance.


I don't really know what the tradeoffs are among these four.  Personally, I'm 
continuing to use CVS for everything for now.

Regards,

Zooko
http://mnet.sf.net/




From lac at strakt.com  Thu Sep 12 08:44:04 2002
From: lac at strakt.com (Laura Creighton)
Date: Thu, 12 Sep 2002 14:44:04 +0200
Subject: [Twisted-Python] version control, QA, branching ... 
In-Reply-To: Message from Zooko <zooko@zooko.com> 
   of "Thu, 12 Sep 2002 08:06:24 EDT." <E17pSjo-0001HS-00@localhost> 
References: <1031781315.19657.15.camel@troglodyte.funhouse>  <E17pSjo-0001HS-00@localhost> 
Message-ID: <200209121244.g8CCi4o9028058@ratthing-b246.strakt.com>

> 
> There are four new version control systems that sound interesting to me:
> 
>  * BitKeeper
> http://www.bitkeeper.com/
> 
> The most mature of the four (?).  Not fully free software, although I think i
> t 
> is freely usable for open source projects.
> 
>  * Subversion
> http://subversion.tigris.org/
> 
> Also relatively mature.
> 
>  * Arch
> http://www.regexps.com/arch.html
> 
> There is a nice comparison between arch and subversion somewhere on that site
> .
> 
>  * OpenCM
> http://www.opencm.org/
> 
> The least mature of the four, but the one with the most impressive 
> intellectual provenance.
> 
> 
> I don't really know what the tradeoffs are among these four.  Personally, I'm
>  
> continuing to use CVS for everything for now.
> 
> Regards,
> 
> Zooko
> http://mnet.sf.net/

Anders Qvist, quest at lysator.liu.se (the Project Lead for the Python-In-a-Tie
Snake Farm was looking at Arch, and still is.)  I think he actually started 
chaning all the perl scripts to use python, but I don't know how far along 
that project got. People whose opinions on elegance, beauty, and
usuability I trust have embarked on a campaign to convince me that
Arch is the way to go and we should store all our code that way.  Right
now I am too busy to listen, so I personally have no experience or
opinions, beyond 'sure sounds nice'.

Laura Creighton



From abo at minkirri.apana.org.au  Thu Sep 12 09:31:32 2002
From: abo at minkirri.apana.org.au (Donovan Baarda)
Date: Thu, 12 Sep 2002 23:31:32 +1000
Subject: [Twisted-Python] version control, QA, branching ...
In-Reply-To: <E17pSjo-0001HS-00@localhost>
References: <1031781315.19657.15.camel@troglodyte.funhouse> <E17pSjo-0001HS-00@localhost>
Message-ID: <20020912133131.GC5298@minkirri.apana.org.au>

On Thu, Sep 12, 2002 at 08:06:24AM -0400, Zooko wrote:
> 
> There are four new version control systems that sound interesting to me:
[...]

The one I find myself using the most is PRCS. It has heaps of limitations
(no network support, RCS backend so poor binary deltas) _but_, it does
merges painlessly. I'm not sure exactly of all the voodoo it does for this,
but I find that it gets merges right nearly every time, and prompts and
allows me to overide it on the few occasions when it gets them wrong. It
handles renamed/deleted/added files painlessly, and seems to remember
previous merge preferences as defaults for subsequent merges.

http://prcs.xdelta.org/

Because it doesn't support a network repository, I use it to run my own
personal repository, and check in "cvs" branch(es) from cvs upstream. I then
run as many personal branches as I wish, merging and branching at will with
PRCS. When I'm happy or feel inclined, I checkin the results to cvs
upstream. I basicly use PRCS as a merge tool for CVS.

The guy who wrote PRCS has grand plans for a PRCS2 using xdelta as its
backend with network repository support, but I dunno when/if it will ever
happen. Going by PRCS, and xdelta2 so far, it will be good if it ever gets
finished.

I think something like Aegis would probably suit Twisted to a 'T'... it's
not so much a revision control tool as a software development/test/release
management tool. I dunno what it's like now, but last time I looked you
could actually configure it to use any revision-control backend you liked.

-- 
----------------------------------------------------------------------
ABO: finger abo at minkirri.apana.org.au for more info, including pgp key
----------------------------------------------------------------------



From twisted at itamarst.org  Thu Sep 12 09:48:02 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 12 Sep 2002 09:48:02 -0400
Subject: [Twisted-Python] version control, QA, branching ...
References: <1031781315.19657.15.camel@troglodyte.funhouse>  <E17pSjo-0001HS-00@localhost> <200209121244.g8CCi4o9028058@ratthing-b246.strakt.com>
Message-ID: <3D809B12.9090108@itamarst.org>

Laura Creighton wrote:

> Anders Qvist, quest at lysator.liu.se (the Project Lead for the Python-In-a-Tie
> Snake Farm was looking at Arch, and still is.)  I think he actually started 
> chaning all the perl scripts to use python, but I don't know how far along 
> that project got.

He should use Twisted ;)

Seriously, the built-in ssh and FTP server and client support is exactly 
what you need, and someday we'll have WebDAV too. And it lets you make the 
code cross-platform, and without dependency on Unix user-accounts.

Plus you can integrate IRC bot and emailing of commit notifications straight 
into the server. And web based browsing ala viewcvs. And so on and so forth.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
Available for Python, Twisted, Zope and Java consulting




From twisted at itamarst.org  Thu Sep 12 11:43:28 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 12 Sep 2002 11:43:28 -0400
Subject: [Twisted-Python] Another proposal for new look for website
Message-ID: <3D80B620.6030509@itamarst.org>

http://itamarst.org/twisted_homepage.png

Courtesy of MAXIMA Multimedia (http://www.maximam.com).

-- 
Itamar Shtull-Trauring    http://itamarst.org/
Available for Python, Twisted, Zope and Java consulting




From bruce at cubik.org  Thu Sep 12 11:54:03 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Thu, 12 Sep 2002 09:54:03 -0600
Subject: [Twisted-Python] domtemplate examples
Message-ID: <3D80B89B.4080701@cubik.org>

Hey all,

Does anyone have more involved examples (even ones they can only share 
privately for now) of using DOMTemplate than the one in doc/howto?

Examples of form integration and DB integration like outputting lists of 
things from a result set of a query would all be welcome.

  - Bruce




From lac at strakt.com  Thu Sep 12 12:00:12 2002
From: lac at strakt.com (Laura Creighton)
Date: Thu, 12 Sep 2002 18:00:12 +0200
Subject: [Twisted-Python] Another proposal for new look for website 
In-Reply-To: Message from Itamar Shtull-Trauring <twisted@itamarst.org> 
   of "Thu, 12 Sep 2002 11:43:28 EDT." <3D80B620.6030509@itamarst.org> 
References: <3D80B620.6030509@itamarst.org> 
Message-ID: <200209121600.g8CG0Co9028599@ratthing-b246.strakt.com>

> http://itamarst.org/twisted_homepage.png
> 
> Courtesy of MAXIMA Multimedia (http://www.maximam.com).
> 
> -- 
> Itamar Shtull-Trauring    http://itamarst.org/
> Available for Python, Twisted, Zope and Java consulting
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

Itamar Shtull-Trauring, you are a very silly man.  Thank you.

Laura Creighton



From twisted at itamarst.org  Thu Sep 12 12:14:52 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 12 Sep 2002 12:14:52 -0400
Subject: [Twisted-Python] Another proposal for new look for website
References: <3D80B620.6030509@itamarst.org> <200209121600.g8CG0Co9028599@ratthing-b246.strakt.com>
Message-ID: <3D80BD7C.4000603@itamarst.org>

> Itamar Shtull-Trauring, you are a very silly man.  Thank you.

If you mean the text - it wasn't me, I'm not usually that creative. It was 
taken from http://www.twistedmatrix.com/labs.

I assume Glyph wrote it, given the content.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
Available for Python, Twisted, Zope and Java consulting




From andrew-twisted at puzzling.org  Thu Sep 12 22:25:35 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 13 Sep 2002 12:25:35 +1000
Subject: [Twisted-Python] Mailing list archives -- ideal for Twisted?
Message-ID: <20020913022535.GE15521@ritsuko.xware.cx>

Random IRC snippet:

<jdub> what would be really cool
<jdub> is to get rid of mhonarc and static http archives
<jdub> and have, perhaps, an nntp-based archive system
<jdub> with a web front end
<spiv> Hmm.
<spiv> That would suit Twisted nicely.
<jdub> there are a few of these around
<spiv> Hmmm....
<jdub> but it would be cool for twisted

Basically, a unified web/nntp mail archive, that uses a common backend,
but has a twisted.web and twisted.news front-ends could make for a
really cool Twisted app.

Any thoughts?  ("Yes!  I will write this!" particularly welcome ;)

-Andrew.




From naesten at myrealbox.com  Fri Sep 13 00:50:04 2002
From: naesten at myrealbox.com (Samuel Bronson)
Date: Fri, 13 Sep 2002 00:50:04 -0400
Subject: [Twisted-Python] Patch for tapconvert manpage
Message-ID: <3D816E7C.8080607@myrealbox.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: RIPEMD160

RCS file: /cvs/Twisted/doc/man/tapconvert.1,v
retrieving revision 1.1
diff -u -2 -r1.1 tapconvert.1
- --- doc/man/tapconvert.1    11 Sep 2002 20:07:00 -0000    1.1
+++ doc/man/tapconvert.1    13 Sep 2002 04:44:30 -0000
@@ -3,5 +3,5 @@
~ tapconvert \- convert Twisted configurations from one format to another
~ .SH SYNOPSIS
- -.B tapconvert -i \fIinput\fR -o \fIoutput\rR  [-f \fIinput-type\fR] 
[-t \fIoutput-type\fR] [-d] [-e]
+.B tapconvert -i \fIinput\fR -o \fIoutput\fR  [-f \fIinput-type\fR] [-t 
\fIoutput-type\fR] [-d] [-e]
~ .B tapconvert --help \fIapptype\fR
~ .SH DESCRIPTION
@@ -26,4 +26,8 @@
~ \fB\--encrypt\fR, \fB\-e\fR
~ Encrypt output.
+.SH EXAMPLE
+Convert web.tap into a web.tas, so we can understand it:
+
+    tapconvert -i web.tap
~ .SH AUTHOR
~ Written by Moshe Zadka, based on tapconvert's help messages
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.4 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iQEXAwUBPYFue1veIDzBO6cgFAPvoQP/dt1QDyiLk3tdqQ9FJo/nPsyno4lXjuWI
VzmVu2BWM/gho+elUdnFmfQ4rGO1Evjf8AQammpD26TyxjeEeLRG4Bp1l4PqKRpk
hGD13vZK8eLj0qLj8xOgxGBNuxWv5+6Y6iXo505mrJX7tQNNS7bpY9zNnp6qq8uZ
z+Ozmcjz9scD/1AcOtsZ+8vnxX+hAAZx/mW3sSO+dX8RXHm3vbS4qILKT2JQOAaE
eF176LQe3DwMSKFCH0W5xW+XeojcnJEsd5roC8DWTNi7EbIhNdPHnnltnGiJymI9
jyNSuwI6VTX2fHKq5JifNw6OPQEyo93vTD7IhPzXQTJuPdgZKYd9V66B
=0FGR
-----END PGP SIGNATURE-----





From andrew-twisted at puzzling.org  Fri Sep 13 02:11:26 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 13 Sep 2002 16:11:26 +1000
Subject: [Twisted-Python] Minor buglet in spread.sturdy?
Message-ID: <20020913061126.GF15521@ritsuko.xware.cx>

If you do:

  foo = sturdy.PerspectiveConnector(...)
  foo.startConnecting()
  foo.callRemote('echo', ...)
  ...

You'll actually connect to the remote server *twice*.

Which of these is the real bug:
  - callRemote sets self.connecting = True instead of startConnecting
  - startConnecting isn't for external use, and should be renamed
    "_startConnecting"?

-Andrew.




From twisted at moshez.org  Fri Sep 13 02:11:18 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 13 Sep 2002 06:11:18 -0000
Subject: [Twisted-Python] version control, QA, branching ...
In-Reply-To: <E17pSjo-0001HS-00@localhost>
References: <E17pSjo-0001HS-00@localhost>, <1031781315.19657.15.camel@troglodyte.funhouse>
Message-ID: <20020913061118.9479.qmail@green.zadka.com>

On Thu, 12 Sep 2002, Zooko <zooko at zooko.com> wrote:

> There are four new version control systems that sound interesting to me:
> 
>  * BitKeeper
> http://www.bitkeeper.com/

Not free software. This means the Twisted team would bet its fate on the fate
of a single company.

>  * Subversion
> http://subversion.tigris.org/
> 
> Also relatively mature.

It's alpha.

>  * Arch
> http://www.regexps.com/arch.html

It's a mess of shell scripts and ftp crap.



From twisted at moshez.org  Fri Sep 13 02:11:18 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 13 Sep 2002 06:11:18 -0000
Subject: [Twisted-Python] version control, QA, branching ...
In-Reply-To: <E17pSjo-0001HS-00@localhost>
References: <E17pSjo-0001HS-00@localhost>, <1031781315.19657.15.camel@troglodyte.funhouse>
Message-ID: <20020913061118.9479.qmail@green.zadka.com>

On Thu, 12 Sep 2002, Zooko <zooko at zooko.com> wrote:

> There are four new version control systems that sound interesting to me:
> 
>  * BitKeeper
> http://www.bitkeeper.com/

Not free software. This means the Twisted team would bet its fate on the fate
of a single company.

>  * Subversion
> http://subversion.tigris.org/
> 
> Also relatively mature.

It's alpha.

>  * Arch
> http://www.regexps.com/arch.html

It's a mess of shell scripts and ftp crap.



From twisted at itamarst.org  Fri Sep 13 05:10:29 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 13 Sep 2002 05:10:29 -0400
Subject: [Twisted-Python] Another proposal for new look for website
References: <3D80B620.6030509@itamarst.org>
Message-ID: <3D81AB85.6080207@itamarst.org>

Itamar Shtull-Trauring wrote:

> http://itamarst.org/twisted_homepage.png

Since everyone keeps asking - yes, I know it looks like there will be 
Javascri[t dropdown menus, and no, we *won't* be using JS, the look just 
needs to be changed slightly.




From grolgh at online.no  Fri Sep 13 06:08:41 2002
From: grolgh at online.no (Benjamin Bruheim)
Date: Fri, 13 Sep 2002 12:08:41 +0200
Subject: [Twisted-Python] serial datatype in t.e.row
References: <HOEEKPCOKELHCNIJNMAGCEKHCGAA.sean@twistedmatrix.com>
Message-ID: <3D81B929.8080702@online.no>

> One solution may be to manually run a
> 
> 	SELECT nextval('sequencename')
> 
> to get the next value and use that for the insert, but this requires an
> extra step for each insert, and requires that the we know which tables have
> serial columns (suprisingly hard to figure out..) and makes the behavior for
> tables with serial columns and no serial columns very different.

Wouldn't it be sufficient to add a "reload hint", or something? its only 
INSERT that will be affected. A reloadoninsert-hint would be 
database-implementationindependent as well. The difference between 
getting the whole table or just the ID is neglible in most cases; or 
maybe even a question on wheter serials on anything but the dbKeyColumns 
should be allowed to contain serials.
At least on postgresql there can be stuff happening on the server that 
client would never be able to know about. Letting it reload could also 
be passed as an option to every databaseinteractionmethod.
The reloading itself could be done through the deferred, just as glyph 
mentioned.

2cents.

\\ benjamin




From warner at lothar.com  Fri Sep 13 01:15:40 2002
From: warner at lothar.com (Brian Warner)
Date: Thu, 12 Sep 2002 22:15:40 -0700
Subject: [Twisted-Python] docs typo [PATCH]
Message-ID: <E17pins-0006OV-00@localhost>

Small typo in the PB howto, but it just so happened to be in the one place
where it could do the most damage. Here's a patch.

cheers,
 -Brian

Index: pb.html
===================================================================
RCS file: /cvs/Twisted/doc/howto/pb.html,v
retrieving revision 1.1
diff -u -r1.1 pb.html
--- pb.html	6 Aug 2002 03:31:04 -0000	1.1
+++ pb.html	13 Sep 2002 05:14:04 -0000
@@ -169,12 +169,13 @@
   
   <p>This is the first class we dealt with.  Perspectives are slightly special
   because they are the root object that a given user can access from a service.
-  A user should only receive a reference to their Perspective PB works hard to
-  verify, as best it can, that any method that can be called on a perspective
-  directly is being called on behalf of the user who is represented by that
-  perspective.  (Services with unusual requirements for <q>on behalf of</q>,
-  such as simulations with the ability to posess another player's avatar, are
-  accomplished by providing indirected access to another user's Perspective.)
+  A user should only receive a reference to their <em>own</em>
+  Perspective.  PB works hard to verify, as best it can, that any method that
+  can be called on a perspective directly is being called on behalf of the
+  user who is represented by that perspective.  (Services with unusual
+  requirements for <q>on behalf of</q>, such as simulations with the ability
+  to posess another player's avatar, are accomplished by providing indirected
+  access to another user's Perspective.)
   </p>
 
   <p>Perspectives are not usually serialized as remote references, so do not



From lac at strakt.com  Fri Sep 13 08:51:05 2002
From: lac at strakt.com (Laura Creighton)
Date: Fri, 13 Sep 2002 14:51:05 +0200
Subject: [Twisted-Python] version control, QA, branching ... 
In-Reply-To: Message from Itamar Shtull-Trauring <twisted@itamarst.org> 
   of "Thu, 12 Sep 2002 09:48:02 EDT." <3D809B12.9090108@itamarst.org> 
References: <1031781315.19657.15.camel@troglodyte.funhouse> <E17pSjo-0001HS-00@localhost> <200209121244.g8CCi4o9028058@ratthing-b246.strakt.com>  <3D809B12.9090108@itamarst.org> 
Message-ID: <200209131251.g8DCp5o9032399@ratthing-b246.strakt.com>

> Laura Creighton wrote:
> 
> > Anders Qvist, quest at lysator.liu.se (the Project Lead for the Python-In-a-Tie
> > Snake Farm was looking at Arch, and still is.)  I think he actually started 
> > chaning all the perl scripts to use python, but I don't know how far along 
> > that project got.
> 
> He should use Twisted ;)
> 
> Seriously, the built-in ssh and FTP server and client support is exactly 
> what you need, and someday we'll have WebDAV too. And it lets you make the 
> code cross-platform, and without dependency on Unix user-accounts.
> 
> Plus you can integrate IRC bot and emailing of commit notifications straight 
> into the server. And web based browsing ala viewcvs. And so on and so forth.
> 
> -- 
> Itamar Shtull-Trauring    http://itamarst.org/
> Available for Python, Twisted, Zope and Java consulting
-----------

Heh heh -- one of the reasons Anders' attempt to convince me that Arch
is what we all should be using in the way of version control once we
converted it to Python got derailed is that Jacob and I started using
up most of the bandwidth of the conversation pushing Twisted the other
direction...

Laura



From lac at strakt.com  Fri Sep 13 08:56:08 2002
From: lac at strakt.com (Laura Creighton)
Date: Fri, 13 Sep 2002 14:56:08 +0200
Subject: [Twisted-Python] Another proposal for new look for website 
In-Reply-To: Message from Itamar Shtull-Trauring <twisted@itamarst.org> 
   of "Thu, 12 Sep 2002 12:14:52 EDT." <3D80BD7C.4000603@itamarst.org> 
References: <3D80B620.6030509@itamarst.org> <200209121600.g8CG0Co9028599@ratthing-b246.strakt.com>  <3D80BD7C.4000603@itamarst.org> 
Message-ID: <200209131256.g8DCu8o9032448@ratthing-b246.strakt.com>

> > Itamar Shtull-Trauring, you are a very silly man.  Thank you.
> 
> If you mean the text - it wasn't me, I'm not usually that creative. It was 
> taken from http://www.twistedmatrix.com/labs.
> 
> I assume Glyph wrote it, given the content.
> 
> -- 
> Itamar Shtull-Trauring    http://itamarst.org/
> Available for Python, Twisted, Zope and Java consulting

Ok then, thank you whoever you are.

Laura



From twisted at itamarst.org  Fri Sep 13 09:11:40 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 13 Sep 2002 09:11:40 -0400
Subject: [Twisted-Python] Documentation and bug patches
Message-ID: <3D81E40C.4090100@itamarst.org>

Please submit all patches and bug reports to our bug tracker at 
http://sourceforge.net/tracker/?group_id=49387&atid=456015 so that they 
don't get lost.




From waterbug at beeblebrox.gsfc.nasa.gov  Fri Sep 13 10:13:28 2002
From: waterbug at beeblebrox.gsfc.nasa.gov (Steve Waterbury)
Date: Fri, 13 Sep 2002 10:13:28 -0400
Subject: [Twisted-Python] docs typo [PATCH]
References: <E17pins-0006OV-00@localhost>
Message-ID: <3D81F288.B9457611@beeblebrox.gsfc.nasa.gov>

Brian Warner wrote:
> 
> Small typo in the PB howto, but it just so happened to be in the one place
> where it could do the most damage. Here's a patch.

Since Perspectives are defined in cred, and so are more general than 
Perspective Broker -- i.e., could be used by any service via any protocol --  
shouldn't documentation of perspectives be (at least in theory) part of 
a more general doc on authentication, rather than specifically the PB howto?  

(But don't get me wrong -- I appreciate *any* documentation and patches 
thereof, including this one!  Not meaning to sound ungrateful ... ;^)

Cheers,
-- Steve.



From glyph at twistedmatrix.com  Fri Sep 13 10:52:19 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 13 Sep 2002 09:52:19 -0500 (CDT)
Subject: [Twisted-Python] docs typo [PATCH]
In-Reply-To: <3D81F288.B9457611@beeblebrox.gsfc.nasa.gov>
References: <E17pins-0006OV-00@localhost>
	<3D81F288.B9457611@beeblebrox.gsfc.nasa.gov>
Message-ID: <20020913.095219.23011554.glyph@twistedmatrix.com>


On Fri, 13 Sep 2002 10:13:28 -0400, Steve Waterbury <waterbug at beeblebrox.gsfc.nasa.gov> wrote:

> Since Perspectives are defined in cred, and so are more general than
> Perspective Broker -- i.e., could be used by any service via any protocol --
> shouldn't documentation of perspectives be (at least in theory) part of a
> more general doc on authentication, rather than specifically the PB howto?

Yes.  There is nascent doc on this: doc/howto/cred.html.

I'll add to it when schedule permits..

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020913/50712434/attachment.pgp 

From bruce at cubik.org  Fri Sep 13 14:25:34 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Fri, 13 Sep 2002 12:25:34 -0600
Subject: [Twisted-Python] domtemplate examples
References: <3D80B89B.4080701@cubik.org>
Message-ID: <3D822D9E.9040801@cubik.org>

I got around to solving this today for doing DB integration with webMVC:

Bruce Mitchener wrote:
> Does anyone have more involved examples (even ones they can only share 
> privately for now) of using DOMTemplate than the one in doc/howto?
> 
> Examples of form integration and DB integration like outputting lists of 
> things from a result set of a query would all be welcome.

The patch below makes the standard domwidgets.List friendly for 
Deferreds.  Similar things need to be done to the other widgets as well 
if that's the path that should be taken.

This code sucks for various reasons, but actually works:

class MIdentityList(wmvc.WModel):
     def __init__(self):
         self.dbpool = adbapi.ConnectionPool('pyPgSQL.PgSQL',
                                             'localhost',
                                             'bruce', 'XXXXXXXXX',
                                             database='XXXXXXXXX')
         self.dbauth = authorizer.Authorizer(self.dbpool)
         self.identityList = self.getIdentities()

     def setIdentities(self, result):
         self.identityList = result
     def getIdentities(self):
         return self.dbauth.getIdentities().addCallback(self.setIdentities)

class IdentityListWidget(domwidgets.Widget):
     def generateDOM(self, request, node):
         """
         Generate DOM to represent a list of identities.
         """
         if isinstance(self.model.identityList, defer.Deferred):
             return self.identityList
         self.add(domwidgets.List())
         return domwidgets.Widget.generateDOM(self, request, node)

class VIdentityList(wmvc.WView):
     templateFile = "identity_list.xhtml"
     def factory_identityList(self, request, node):
         return IdentityListWidget(self.model)

class CIdentityList(wmvc.WController):
     pass

wmvc.registerViewForModel(VIdentityList, MIdentityList)

Am I doing anything that is horribly wrong (apart from obvious things, 
like not grabbing a service and starting up the authorizer inside of the 
model), and that isn't likely to work beyond a simple test case like this?

I do like how the Deferreds integrate in with the DOMTemplate and webMVC 
stuff.  Pretty nice work, once I figured it out. :)

  - Bruce

Index: domwidgets.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/domwidgets.py,v
retrieving revision 1.19
diff -u -r1.19 domwidgets.py
--- domwidgets.py       19 Aug 2002 03:22:01 -0000      1.19
+++ domwidgets.py       13 Sep 2002 18:13:59 -0000
@@ -3,6 +3,7 @@
  import urllib
  from xml.dom.minidom import parseString

+from twisted.internet import defer
  from twisted.python.mvc import View, Model
  from twisted.python import domhelpers, log

@@ -262,11 +263,14 @@
      """
      tagName = None
      def generateDOM(self, request, node):
+        data = self.getData()
+        if isinstance(data, defer.Deferred):
+            return data.addCallback(self._cbGenerateDOM, request, node)
          node = Widget.generateDOM(self, request, node)
          # xxx with this implementation all elements of the list must 
use the same view widget
          listItem = domhelpers.get(node, 'listItem')
          domhelpers.clearNode(node)
-        for itemNum in range(len(self.getData())):
+        for itemNum in range(len(data)):
              # theory: by appending copies of the li node
              # each node will be handled once we exit from
              # here because handleNode will then recurse into
@@ -277,6 +281,10 @@
              domhelpers.superPrependAttribute(newNode, 'model', 
self.submodel + '[' + str(itemNum) + ']')
              node.appendChild(newNode)
          return node
+
+    def _cbGenerateDOM(self, result, request, node):
+        return self.generateDOM(request, node)
+

  class ColumnList(List):
      def __init__(self, model, columns=1, start=0, end=0):




From jjn at kriln.com  Fri Sep 13 11:02:51 2002
From: jjn at kriln.com (Jeremy Noetzelman)
Date: Fri, 13 Sep 2002 15:02:51 +0000 (GMT)
Subject: [Twisted-Python] timer granularity
Message-ID: <20020913150202.A91401-100000@nosferatu.kriln.com>

What is the timer granularity in twisted?  Is it possible to have
subsecond event timers in Delayed or am I limited to integer seconds?

J




From abo at minkirri.apana.org.au  Fri Sep 13 20:10:30 2002
From: abo at minkirri.apana.org.au (Donovan Baarda)
Date: Sat, 14 Sep 2002 10:10:30 +1000
Subject: [Twisted-Python] version control, QA, branching ...
In-Reply-To: <20020913061118.9479.qmail@green.zadka.com>
References: <1031781315.19657.15.camel@troglodyte.funhouse> <20020913061118.9479.qmail@green.zadka.com>
Message-ID: <20020914001030.GA23914@minkirri.apana.org.au>

On Fri, Sep 13, 2002 at 06:11:18AM -0000, Moshe Zadka wrote:
> On Thu, 12 Sep 2002, Zooko <zooko at zooko.com> wrote:
> 
> > There are four new version control systems that sound interesting to me:
> > 
> >  * BitKeeper
> > http://www.bitkeeper.com/
> 
> Not free software. This means the Twisted team would bet its fate on the fate
> of a single company.
> 
> >  * Subversion
> > http://subversion.tigris.org/
> > 
> > Also relatively mature.
> 
> It's alpha.
> 
> >  * Arch
> > http://www.regexps.com/arch.html
> 
> It's a mess of shell scripts and ftp crap.

That was my concern when I first looked at it. A few people spent a fair bit
of time trying to convince me "it's not that bad". The mess of scripts still
makes me uneasy, but the design is probably sound. I suspect a conversion to
Python would give Arch some deserved credibility.

The "ftp crap" is a bit harsh... they happen to have chosen ftp as the
network transport protocol, which IMHO is a better idea than inventing a new
one. FTP as a protocol sucks, but it it widely supported.

Subversion have chosen http (DAV?) and specificaly Apache as the network
transport protocol. Http is probably better than ftp, but the DAV part is
still a little grey.

xdelta2 has an interesting contributed hack that uses NFS as the network
transport protocol, using some "secure public NFS" framework.


-- 
----------------------------------------------------------------------
ABO: finger abo at minkirri.apana.org.au for more info, including pgp key
----------------------------------------------------------------------



From andrew-twisted at puzzling.org  Fri Sep 13 21:57:42 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 14 Sep 2002 11:57:42 +1000
Subject: [Twisted-Python] timer granularity
In-Reply-To: <20020913150202.A91401-100000@nosferatu.kriln.com>
References: <20020913150202.A91401-100000@nosferatu.kriln.com>
Message-ID: <20020914015742.GD516@frobozz.local>

On Fri, Sep 13, 2002 at 03:02:51PM +0000, Jeremy Noetzelman wrote:
> What is the timer granularity in twisted?  Is it possible to have
> subsecond event timers in Delayed or am I limited to integer seconds?

Firstly, Delayed is deprecated.  See
    http://twistedmatrix.com/documents/howto/time
for documentation on the correct way to schedule tasks in current Twisted.

Secondly, yes Twisted supports sub-second event timers.  The timing is done
using the OS's select(2) call (or poll(2), or kqueue, etc, depending on
which reactor you're using).  select(2)'s man page *claims* it supports
microsecond resolution, but my suspicion is that you probably can't rely on
more than about millisecond resolution.

As far as using sub-second precision, simply pass a float rather than an
integer to reactor.callLater, and it will "just work".

-Andrew.




From washort at twistedmatrix.com  Sat Sep 14 00:13:20 2002
From: washort at twistedmatrix.com (Allen Short)
Date: Fri, 13 Sep 2002 23:13:20 -0500 (CDT)
Subject: [Twisted-Python] version control, QA, branching ...
In-Reply-To: <20020914001030.GA23914@minkirri.apana.org.au>
References: <1031781315.19657.15.camel@troglodyte.funhouse>
	<20020913061118.9479.qmail@green.zadka.com>
	<20020914001030.GA23914@minkirri.apana.org.au>
Message-ID: <20020913.231320.596523693.washort@twistedmatrix.com>

>>>>> "Donovan" == Donovan Baarda <abo at minkirri.apana.org.au> writes:

    >> > * Arch > http://www.regexps.com/arch.html
    >> 
    >> It's a mess of shell scripts and ftp crap.

    > That was my concern when I first looked at it. A few people
    > spent a fair bit of time trying to convince me "it's not that
    > bad". The mess of scripts still makes me uneasy, but the design
    > is probably sound. I suspect a conversion to Python would give
    > Arch some deserved credibility.

    > The "ftp crap" is a bit harsh... they happen to have chosen ftp
    > as the network transport protocol, which IMHO is a better idea
    > than inventing a new one. FTP as a protocol sucks, but it it
    > widely supported.


yeah -- my original take on arch was that its implementation made it
unacceptable. but as i think about it, i'm not sure that's such a big
deal; the design seems sound from the docs, and since it's written in
a "software tools" style, incremental conversion to Python should be
feasible if that's ever desired. So... it's tempting to try for some
less-important repositories, i think. (TRDemo, perhaps?) The "FTP" and
"shell" aspects of it are pretty nonessential to its operation, so far
as i can tell.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020913/46cd9979/attachment.pgp 

From glyph at twistedmatrix.com  Sat Sep 14 00:48:40 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 13 Sep 2002 23:48:40 -0500 (CDT)
Subject: [Twisted-Python] version control, QA, branching ...
In-Reply-To: <20020913.231320.596523693.washort@twistedmatrix.com>
References: <20020913061118.9479.qmail@green.zadka.com>
	<20020914001030.GA23914@minkirri.apana.org.au>
	<20020913.231320.596523693.washort@twistedmatrix.com>
Message-ID: <20020913.234840.02307384.glyph@twistedmatrix.com>


On Fri, 13 Sep 2002 23:13:20 -0500 (CDT), Allen Short <washort at twistedmatrix.com> wrote:

> my original take on arch was that its implementation made it
> unacceptable. but as i think about it, i'm not sure that's such a big deal;
> the design seems sound from the docs, and since it's written in a "software
> tools" style, incremental conversion to Python should be feasible if that's
> ever desired. So... it's tempting to try for some less-important
> repositories, i think. (TRDemo, perhaps?) The "FTP" and "shell" aspects of it
> are pretty nonessential to its operation, so far as i can tell.

I think this would be a huge distraction and not really worthwhile...

Arch is a good design for verison control.  The implementation really does make
it unacceptable though.  Stipulations like "POSIX /bin/sh" and "FTP" cause
problems with firewalls and portability.

By my informal estimate, half of the people interested in anonymous up-to-date
access to Twisted are using some version of Microsoft Windows XP behind a
firewall which ether breaks or doesn't allow FTP.

The "FTP" and "shell" aspects of it aren't essential to its operation, but they
are essential to its implementation.  I wouldn't want to use arch any more than
I'd want to use aegis.

There's also the issue of tools.  How long until we get viewcvs-like behavior
out of arch?  Do these tools already exist?  Where can I find them?  Is the
author committed to doing GUI implementations of the frontend?  I'd answer
these research questions myself, except regexps.com's web access is down now :)

It would be nice to be able to create branches more easily.  However, "more
easily" is a lot more than just "better low-level design".  It's emacs
integration, GUI tools, windows support, scriptability, and so on and so forth.
I don't forsee any of my projects moving to an alternative version control
system any time soon.

As always, if somebody comes along and implements something in Twisted, I would
be more inclined to consider it seriously; I could think of a lot of cool tasks
we could automate if the VC server itself had Python hooks.  (Also, I imagine
that PB or HTTP would be more firewall-friendly and easily secured than
pserver.)  Still, before migrating any actual code to it I'd want to see that
it had all the features mentioned above.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020913/46d0cc7e/attachment.pgp 

From warner at lothar.com  Sat Sep 14 04:34:48 2002
From: warner at lothar.com (Brian Warner)
Date: Sat, 14 Sep 2002 01:34:48 -0700
Subject: [Twisted-Python] Perspective vs. Identity question
Message-ID: <E17q8O8-00017r-00@localhost>

So I'm trying to figure out the whole PB thing; I smell a lot of potential
there but haven't figured out enough to actually use it yet. I figured a
question here might start to clear up my confusion. I'll start with what I
think I know so that if I'm wrong someone can correct my understanding. I
intend to turn this into some kind of documentation so that my ignorance can
be used towards some greater good :).

I think I get the PB remote-method scheme up to the level demonstrated in
docs/examples/pbsimple.py (using pb.connect and remote_* methods). In trying
to figure out the Perspective/Identity layer (as in pbecho.py), what I've
figured out so far is:

 Application instances hold an Authorizer, usually a DefaultAuthorizer.

 A DefaultAuthorizer has a collection of Identity objects, each with a
 unique identityName. That collection doesn't have to be a static list:
 .getIdentityRequest() could be overridden to do some kind of asynchronous
 lookup (LDAP comes to mind).

 Each Identity has a username and a password. It also has a list of "keys"
 (.keyring), each of which is a (perspectivename, servicename) tuple.

 If the remote client knows both username and password for a given Identity,
 then they are allowed to ask that Identity for any perspective on its
 keyring by supplying a (servicename/perspectivename) pair. The
 identity.requestPerspectiveForKey() method is supposed to find the named
 Perspective (asynchronously), run .attach() on it, then give a reference to
 the client.

 Once the client has that remote reference, they can do any perspective_*
 method they like.


So my understanding breaks down in how this is all supposed to work in
practice. I keep thinking of it in terms of a login shell or game, where you
have a bunch of user accounts, and a user is using their client program to
connect in. Let's say there are two Services: Shell and Game, and that the
same users are allowed to connect to both. Then:

 Each user has one Identity object, with a username and password. These
 Identities could be created ahead of time (say, from /etc/passwd) and
 stored in the DefaultAuthorizer's list. Or, they might be created on the
 fly by a custom Authorizer class. The important thing is that
 .getIdentityRequest returns a valid Identity object when asked.

 Each user might talk to two potential Perpective objects. When user 'bob'
 is attached in to do shell stuff, he could use a Perspective called
 'bob_shell', which is part of the Shell service. (I think the
 perspectivename is scoped to the Service, so this could just be named
 'bob', but that would make this description confusing). When he is doing
 game stuff, he could use a Perspective called 'bob_game', part of the Game
 service. Presumably bob_shell and bob_game are instances of different
 subclasses of pb.Perspective, one which offers shell-like remote methods
 and the other offering game-like methods. The cross-user shared state that
 represents the communal game world could be stored up in the Game Service
 object, anything that needs to be shared between both the game and the
 shell could go in the overall Application object.


Now, how are those Perspectives supposed to be created? Do they get built
ahead of time (at the same time the Identities are made)? Are they supposed
to outlast the client connection?

In all the doc/example/ programs, a single Perspective is created ahead of
time, and then a single Identity is created from that Perspective, using the
.makeIdentity() utility method. The largest example I've been able to find
is twisted.words, but as far as I can tell it does the same thing.. I think
the words.Participant (subclassed from pb.Perspective) hangs around all the
time whether or not the client is attached (it has a .status flag that
starts as OFFLINE), and the perspectives are always created ahead of time
(tap/words.py does svc.createPerspective(n).makeIdentity(pw)) based upon who
is allowed to connect.

I can see that the Perspective is kind of an in-server proxy for the remote
user: the client can make it do anything they want (well, any perspective_*
methods at least), and the perspective can outlast the client's connection
(its .attached/.detached are called to let it know when the client comes and
goes). But if it isn't supposed to (or doesn't need to) outlive the
connection, then must it still be created ahead of time? Is
identity.requestPerspectiveForKey() allowed to create new perspective
objects on the fly?


Sorry for the length. Tell me if I'm on the right track here.. if so, I'll
try to put together some kind of multi-Perspective example program (maybe
the telnet/game thing I just described) with a big how-it-works writeup,
something that explains the concepts I just went over. An example+writeup
like that would have helped / will help me figure out this part of Twisted..
maybe it could help others too.

thanks much,
 -Brian, twisting a little bit more each day




From twisted at moshez.org  Sat Sep 14 10:34:24 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 14 Sep 2002 14:34:24 -0000
Subject: [Twisted-Python] Copyright problems -- kill 'em while they are small
Message-ID: <20020914143424.29600.qmail@green.zadka.com>

admin/PyFontify.py does not have a license. Under copyright law,
that means it is illegal to distribute it. While I would think
that this presents a problem to the Twisted Release Team, I am
in no position to make decisions here. However, for Debian, I distribute
the source package along with the binary, and I'm responsible for its
contents. Currently, that would mean I cannot upload .2, until it is
either resolved or I resort to hacks (that is, repackaging with PyFontify
removed).

Please resolve this problem.
Since this file is in the Python CVS, it might be wise to ask the PYthon
Debian maintainer for help.

Thanks.



From lac at strakt.com  Sat Sep 14 10:45:45 2002
From: lac at strakt.com (Laura Creighton)
Date: Sat, 14 Sep 2002 16:45:45 +0200
Subject: [Twisted-Python] version control, QA, branching ... 
In-Reply-To: Message from Allen Short <washort@twistedmatrix.com> 
   of "Fri, 13 Sep 2002 23:13:20 CDT." <20020913.231320.596523693.washort@twistedmatrix.com> 
References: <1031781315.19657.15.camel@troglodyte.funhouse> <20020913061118.9479.qmail@green.zadka.com> <20020914001030.GA23914@minkirri.apana.org.au>  <20020913.231320.596523693.washort@twistedmatrix.com> 
Message-ID: <200209141445.g8EEjko9004518@ratthing-b246.strakt.com>

> >>>>> "Donovan" == Donovan Baarda <abo at minkirri.apana.org.au> writes:
> 
> yeah -- my original take on arch was that its implementation made it
> unacceptable. but as i think about it, i'm not sure that's such a big
> deal; the design seems sound from the docs, and since it's written in
> a "software tools" style, incremental conversion to Python should be
> feasible if that's ever desired. So... it's tempting to try for some
> less-important repositories, i think. (TRDemo, perhaps?) The "FTP" and
> "shell" aspects of it are pretty nonessential to its operation, so far
> as i can tell.

Anders, you're already started with this, correct?  How far along 
did you get?

Laura



From tv at twistedmatrix.com  Sat Sep 14 11:33:30 2002
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sat, 14 Sep 2002 18:33:30 +0300
Subject: [Twisted-Python] version control, QA, branching ...
In-Reply-To: <20020913061118.9479.qmail@green.zadka.com>
References: <1031781315.19657.15.camel@troglodyte.funhouse> <20020913061118.9479.qmail@green.zadka.com>
Message-ID: <20020914153330.GC28271@ki.yok.utu.fi>

On Fri, Sep 13, 2002 at 06:11:18AM -0000, Moshe Zadka wrote:
> >  * BitKeeper
> > http://www.bitkeeper.com/
> Not free software. This means the Twisted team would bet its fate on the fate
> of a single company.

	Their license does contain that bit that if the OpenLogging servers
	go down for half a year, all the code becomes GPL.

	I dislike non-free software, but had to learn BitKeeper, and started
	to use it for some of my projects. Now, I can honestly say
	that with the exception of one single thing they are looking
	at changing, it is _the_ best version control system ever.

> >  * Arch
> > http://www.regexps.com/arch.html
> It's a mess of shell scripts and ftp crap.

	You could actually replace the ftp usage reasonable easily;
	I almost started work on that. You just need to implement
	a few utilities to move files, ls dirs, etc. non-interactively
	with e.g. ssh.

-- 
:(){ :|:&};:



From tv at twistedmatrix.com  Sat Sep 14 10:57:40 2002
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sat, 14 Sep 2002 17:57:40 +0300
Subject: [Twisted-Python] timer granularity
In-Reply-To: <20020914015742.GD516@frobozz.local>
References: <20020913150202.A91401-100000@nosferatu.kriln.com> <20020914015742.GD516@frobozz.local>
Message-ID: <20020914145740.GB28271@ki.yok.utu.fi>

On Sat, Sep 14, 2002 at 11:57:42AM +1000, Andrew Bennetts wrote:
> Secondly, yes Twisted supports sub-second event timers.  The timing
> is done using the OS's select(2) call (or poll(2), or kqueue, etc,
> depending on which reactor you're using).  select(2)'s man page
> *claims* it supports microsecond resolution, but my suspicion is
> that you probably can't rely on more than about millisecond
> resolution.

	The kernel only makes claims that that it will
	delay _atleast_ that long. Number of runnable
	processes, current process priority, disk IO
	load (including swap) etc. all affect it..

	On i386, the kernel ticks along at 100 Hz, so
	AFAIK that's about the range you will get at best.

-- 
:(){ :|:&};:



From tv at twistedmatrix.com  Sat Sep 14 10:53:50 2002
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sat, 14 Sep 2002 17:53:50 +0300
Subject: [Twisted-Python] Async generators
Message-ID: <20020914145350.GA28271@ki.yok.utu.fi>

	Thought this might interest some of you:

http://effbot.org/zone/asyncore-generators.htm

"""Instead of passing events to callbacks, pass information to a
single handle function (a generator) via instance attributes. When the
handler needs more data from the network, use yield to pass control
back to the asyncore dispatcher."""

-- 
:(){ :|:&};:



From sean at twistedmatrix.com  Sat Sep 14 14:52:21 2002
From: sean at twistedmatrix.com (Sean Riley)
Date: Sat, 14 Sep 2002 13:52:21 -0500
Subject: [Twisted-Python] Perspective vs. Identity question
In-Reply-To: <E17q8O8-00017r-00@localhost>
Message-ID: <HOEEKPCOKELHCNIJNMAGCEMJCGAA.sean@twistedmatrix.com>

sounds like you are on the right track. For another example, take a look at
twisted.enterprise.dbcred. It has two authorizers that create perspective
and identities from a relational database and a "reflector" which is another
type of data source.

In my application, perspectives and identities live in a relational
database, and pb.perspective objects are created when a user logs in and
removed when the user logs out.

my identities objects are created inside of Authorizer.getIdentityRequest()
and my perspectives created inside of service.getPerspectiveRequest().


-----Original Message-----
From: twisted-python-admin at twistedmatrix.com
[mailto:twisted-python-admin at twistedmatrix.com]On Behalf Of Brian Warner
Sent: Saturday, September 14, 2002 3:35 AM
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] Perspective vs. Identity question


So I'm trying to figure out the whole PB thing; I smell a lot of potential
there but haven't figured out enough to actually use it yet. I figured a
question here might start to clear up my confusion. I'll start with what I
think I know so that if I'm wrong someone can correct my understanding. I
intend to turn this into some kind of documentation so that my ignorance can
be used towards some greater good :).

I think I get the PB remote-method scheme up to the level demonstrated in
docs/examples/pbsimple.py (using pb.connect and remote_* methods). In trying
to figure out the Perspective/Identity layer (as in pbecho.py), what I've
figured out so far is:

 Application instances hold an Authorizer, usually a DefaultAuthorizer.

 A DefaultAuthorizer has a collection of Identity objects, each with a
 unique identityName. That collection doesn't have to be a static list:
 .getIdentityRequest() could be overridden to do some kind of asynchronous
 lookup (LDAP comes to mind).

 Each Identity has a username and a password. It also has a list of "keys"
 (.keyring), each of which is a (perspectivename, servicename) tuple.

 If the remote client knows both username and password for a given Identity,
 then they are allowed to ask that Identity for any perspective on its
 keyring by supplying a (servicename/perspectivename) pair. The
 identity.requestPerspectiveForKey() method is supposed to find the named
 Perspective (asynchronously), run .attach() on it, then give a reference to
 the client.

 Once the client has that remote reference, they can do any perspective_*
 method they like.


So my understanding breaks down in how this is all supposed to work in
practice. I keep thinking of it in terms of a login shell or game, where you
have a bunch of user accounts, and a user is using their client program to
connect in. Let's say there are two Services: Shell and Game, and that the
same users are allowed to connect to both. Then:

 Each user has one Identity object, with a username and password. These
 Identities could be created ahead of time (say, from /etc/passwd) and
 stored in the DefaultAuthorizer's list. Or, they might be created on the
 fly by a custom Authorizer class. The important thing is that
 .getIdentityRequest returns a valid Identity object when asked.

 Each user might talk to two potential Perpective objects. When user 'bob'
 is attached in to do shell stuff, he could use a Perspective called
 'bob_shell', which is part of the Shell service. (I think the
 perspectivename is scoped to the Service, so this could just be named
 'bob', but that would make this description confusing). When he is doing
 game stuff, he could use a Perspective called 'bob_game', part of the Game
 service. Presumably bob_shell and bob_game are instances of different
 subclasses of pb.Perspective, one which offers shell-like remote methods
 and the other offering game-like methods. The cross-user shared state that
 represents the communal game world could be stored up in the Game Service
 object, anything that needs to be shared between both the game and the
 shell could go in the overall Application object.


Now, how are those Perspectives supposed to be created? Do they get built
ahead of time (at the same time the Identities are made)? Are they supposed
to outlast the client connection?

In all the doc/example/ programs, a single Perspective is created ahead of
time, and then a single Identity is created from that Perspective, using the
.makeIdentity() utility method. The largest example I've been able to find
is twisted.words, but as far as I can tell it does the same thing.. I think
the words.Participant (subclassed from pb.Perspective) hangs around all the
time whether or not the client is attached (it has a .status flag that
starts as OFFLINE), and the perspectives are always created ahead of time
(tap/words.py does svc.createPerspective(n).makeIdentity(pw)) based upon who
is allowed to connect.

I can see that the Perspective is kind of an in-server proxy for the remote
user: the client can make it do anything they want (well, any perspective_*
methods at least), and the perspective can outlast the client's connection
(its .attached/.detached are called to let it know when the client comes and
goes). But if it isn't supposed to (or doesn't need to) outlive the
connection, then must it still be created ahead of time? Is
identity.requestPerspectiveForKey() allowed to create new perspective
objects on the fly?


Sorry for the length. Tell me if I'm on the right track here.. if so, I'll
try to put together some kind of multi-Perspective example program (maybe
the telnet/game thing I just described) with a big how-it-works writeup,
something that explains the concepts I just went over. An example+writeup
like that would have helped / will help me figure out this part of Twisted..
maybe it could help others too.

thanks much,
 -Brian, twisting a little bit more each day


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From dp at twistedmatrix.com  Sat Sep 14 15:52:39 2002
From: dp at twistedmatrix.com (Donovan Preston)
Date: Sat, 14 Sep 2002 12:52:39 -0700
Subject: [Twisted-Python] domtemplate examples
In-Reply-To: <3D822D9E.9040801@cubik.org>
Message-ID: <86715D88-C81B-11D6-BB6C-00039376B1AE@twistedmatrix.com>

Bruce,

Your code totally rocks, and I liked it so much I abstracted it to 
apply to all Widgets, automatically. Basically, here's how it works;

I added a new method to Widget, setUp(self, request, node, data), which 
gets called before generateDOM. The common case of overriding 
generateDOM, doing some setup work, and then calling Widget.generateDOM 
can now be implemented by overriding setUp. As an added bonus, the 
Model data that the widget is meant to be operating on is passed in to 
the fourth parameter, data.

Then, I changed the way Widgets are rendered so that if a Widget is 
operating on a subModel which happens to be a Deferred instance, both 
setUp and generateDOM will be deferred until after the Deferred 
instance fires. So, you can make a database call in Model.__init__, 
save the deferred in a subModel, apply a Widget to the subModel, and 
you don't have to do anything to have your Widget operate correctly. 
Attached is an example.

Thanks for the clarity and inspiration, bruce!

-------------- next part --------------
A non-text attachment was scrubbed...
Name: deferredList.rpy
Type: application/applefile
Size: 470 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020914/f635b09a/attachment.bin 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: deferredList.rpy
Type: application/text
Size: 80 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020914/f635b09a/attachment-0001.bin 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: deferredList.py
Type: application/applefile
Size: 469 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020914/f635b09a/attachment-0002.bin 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: deferredList.py
Type: application/text
Size: 1200 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020914/f635b09a/attachment-0003.bin 

From dp at twistedmatrix.com  Sat Sep 14 17:17:02 2002
From: dp at twistedmatrix.com (Donovan Preston)
Date: Sat, 14 Sep 2002 14:17:02 -0700
Subject: [Twisted-Python] More DOMTemplate/WebMVC examples
Message-ID: <4FD34822-C827-11D6-BB6C-00039376B1AE@twistedmatrix.com>

I recently gave a talk about Twisted, DOMTemplate, and WebMVC at the 
BayPIGgies Python Interest Group meeting in Palo Alto. For the meeting, 
I created some simple examples that are hopefully self-explanatory. I 
thought I would post them for anyone who is interested to look at. I 
also fixed a few bugs while creating these examples (related to error 
handling) so they will probably work best with CVS head of Twisted.

Donovan

-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo1.py
Type: application/applefile
Size: 462 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020914/f49147e3/attachment.bin 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo1.py
Type: application/text
Size: 855 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0001.bin 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo2.py
Type: application/applefile
Size: 462 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0002.bin 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo2.py
Type: application/text
Size: 1466 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0003.bin 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo3.py
Type: application/applefile
Size: 462 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0004.bin 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo3.py
Type: application/text
Size: 2234 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0005.bin 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo1.html
Type: application/applefile
Size: 464 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0006.bin 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20020914/f49147e3/attachment.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo1.rpy
Type: application/applefile
Size: 463 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0007.bin 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo1.rpy
Type: application/text
Size: 51 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0008.bin 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo2.html
Type: application/applefile
Size: 464 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0009.bin 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0001.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo2.rpy
Type: application/applefile
Size: 463 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0010.bin 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo2.rpy
Type: application/text
Size: 52 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0011.bin 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo3.html
Type: application/applefile
Size: 464 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0012.bin 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0002.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo3.rpy
Type: application/applefile
Size: 463 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0013.bin 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo3.rpy
Type: application/text
Size: 52 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0014.bin 

From quest at lysator.liu.se  Sat Sep 14 12:24:41 2002
From: quest at lysator.liu.se (Anders Qvist)
Date: Sat, 14 Sep 2002 18:24:41 +0200
Subject: [Twisted-Python] version control, QA, branching ...
In-Reply-To: <200209141445.g8EEjko9004518@ratthing-b246.strakt.com>
References: <1031781315.19657.15.camel@troglodyte.funhouse> <20020913061118.9479.qmail@green.zadka.com> <20020914001030.GA23914@minkirri.apana.org.au> <20020913.231320.596523693.washort@twistedmatrix.com> <200209141445.g8EEjko9004518@ratthing-b246.strakt.com>
Message-ID: <20020914162441.GJ19308@lysator.liu.se>

On Sat, Sep 14, 2002 at 04:45:45PM +0200, Laura Creighton wrote:
> > >>>>> "Donovan" == Donovan Baarda <abo at minkirri.apana.org.au> writes:
> > 
> > yeah -- my original take on arch was that its implementation made it
> > unacceptable. but as i think about it, i'm not sure that's such a big
> > deal; the design seems sound from the docs, and since it's written in
> > a "software tools" style, incremental conversion to Python should be
> > feasible if that's ever desired. So... it's tempting to try for some
> > less-important repositories, i think. (TRDemo, perhaps?) The "FTP" and
> > "shell" aspects of it are pretty nonessential to its operation, so far
> > as i can tell.
> 
> Anders, you're already started with this, correct?  How far along 
> did you get?

No, I tried to port it to various architectures.

Arch has two fundamental flaws in its implementation. Any conversion
of arch should address those flaws.

1) Output even more difficult to parse than cvs.
2) There is no server part. Since each user runs the software that
   modifies the repository, there is a significant risk that different
   versions will misunderstand some other version's actions. In other
   words: every version of arch must be tested together with all
   others. Upgrading arch means that you must force _all_ users to
   upgrade.

I think the best thing would be to create a central python module
which exports functions. When you want to drop one of arch's shell
scripts, you change larch to call a function in that module.

In that module, you abstract all interaction with the repository, so
that when the time comes, you can easily create an arch server simply
by converting the abstraction into <insert favourite RPC mechanism
here> and forward the calls to the machine holding the repository.

Along the same lines, you make the various functions in the arch
module return its results as relevant Python data types and have larch
do the translation into human readable data. If larch is called with
--machine-readable, it just outputs string representations of the
return data types, which should be easy enough to parse (esp if you
are a python program!).

-- 
Anders "Quest" Qvist

"We've all heard that a million monkeys banging on a million typewriters
will eventually reproduce the entire works of Shakespeare. Now, thanks 
to the Internet, we know this is not true." -- Robert Wilensky 



From warner at lothar.com  Sun Sep 15 08:42:31 2002
From: warner at lothar.com (Brian Warner)
Date: Sun, 15 Sep 2002 05:42:31 -0700 (PDT)
Subject: [Twisted-Python] Perspective vs. Identity question
Message-ID: <20020915.054231.33478252.warner@lothar.com>

> sounds like you are on the right track. For another example, take a look at
> twisted.enterprise.dbcred. It has two authorizers that create perspective
> and identities from a relational database and a "reflector" which is another
> type of data source.

Thanks for the confirmation. This stuff is finally starting to make sense.
You're right, dbcred is a good example. SQL is still pretty foreign to me,
but somehow seeing the SQL tables and the way dbcred is accessing them helps
me grok the identity/perspective stuff better. The fact that it's a different
style (building Identities on the fly rather than having them pre-built)
helps a lot.

So.. the Identity doesn't really have to exist before the call to
.getIdentityRequest().. it might be pre-made, or pulled out of a database by
name (or other persistent structure), or created with data retrieved from a
third party, or just faked altogether (like a chat service that lets anybody
log in, .getIdentityRequest() could just make a new Identity for every
caller, maybe enforcing unique names).

And the same is true for the Perspectives? .getPerspectiveRequest() could
retrieve an existing Perspective or create a new one on demand? I guess if
the perspective is supposed to hang around (like, um, say a chat service that
remembers user state between logins) then it shouldn't get deleted from the
service when the .detach() method is called. Ah, but it could get saved to
disk and then dropped from memory. And then reloaded when they log in again.
Hence .cachePerspective() and friend. Enlightenment dawns.

I keep coming up with more questions, but the process of phrasing the
question in a concrete manner is letting me figure out the answer without
asking it. Interesting. I think that means I'm past some inflection point.

Last rhetorical question (which I ask so that someone can tell me if I'm
wrong). There should be a roughly one-to-one correspondence between
perspective subclasses and service subclasses, right? Each service's
.getPerspectiveNamed method will create arbitrarily many Perspective objects,
with different names, for different Identities, but (generally) always of the
same class? MyFooService will have a bunch of instances of MyFooPerspective,
etc? The hierarchy looks something like:

 Application
  Authorizer
   Identity[0]
    username, password
    servicenameA,perspectivenameA
    servicenameB,perspectivenameB
    ...
   Identity[1]...
  ServiceA
   servicename="A"
   PerspectiveA[0]
    name
    otherdata
   PerspectiveA[1]..
  ServiceB
   servicename="B"
   PerspectiveB[0]
   PerspectiveB[1]..

If that were a graph, there'd also be arrows from Identity[0] to both
PerspectiveA[0] and PerspectiveB[0].

Ok, that's as much enlightenment as I can take for one day. Somebody tell me
if I got it confused. I'll try to write this up somehow so it might help
someone else.

thanks,
 -Brian




From sean at twistedmatrix.com  Sun Sep 15 13:43:23 2002
From: sean at twistedmatrix.com (Sean Riley)
Date: Sun, 15 Sep 2002 12:43:23 -0500
Subject: [Twisted-Python] serial datatype in t.e.row
In-Reply-To: <3D81B929.8080702@online.no>
Message-ID: <HOEEKPCOKELHCNIJNMAGKEMLCGAA.sean@twistedmatrix.com>

how about:

reflector.insertRow(row, reload=0)

where the reload arg specifies if the key value should be "reloaded" from
the database. this would be specified by the user if they are going to
perform more operations on the row object that was just inserted.



-----Original Message-----
From: twisted-python-admin at twistedmatrix.com
[mailto:twisted-python-admin at twistedmatrix.com]On Behalf Of Benjamin
Bruheim
Sent: Friday, September 13, 2002 5:09 AM
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] serial datatype in t.e.row


> One solution may be to manually run a
>
> 	SELECT nextval('sequencename')
>
> to get the next value and use that for the insert, but this requires an
> extra step for each insert, and requires that the we know which tables
have
> serial columns (suprisingly hard to figure out..) and makes the behavior
for
> tables with serial columns and no serial columns very different.

Wouldn't it be sufficient to add a "reload hint", or something? its only
INSERT that will be affected. A reloadoninsert-hint would be
database-implementationindependent as well. The difference between
getting the whole table or just the ID is neglible in most cases; or
maybe even a question on wheter serials on anything but the dbKeyColumns
should be allowed to contain serials.
At least on postgresql there can be stuff happening on the server that
client would never be able to know about. Letting it reload could also
be passed as an option to every databaseinteractionmethod.
The reloading itself could be done through the deferred, just as glyph
mentioned.

2cents.

\\ benjamin


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From sean at twistedmatrix.com  Sun Sep 15 13:59:08 2002
From: sean at twistedmatrix.com (Sean Riley)
Date: Sun, 15 Sep 2002 12:59:08 -0500
Subject: [Twisted-Python] persistence interface
Message-ID: <HOEEKPCOKELHCNIJNMAGEEMMCGAA.sean@twistedmatrix.com>

Glyph and I talked about persistence interface for use in twisted.enterprise
initially but with possibly broader implications:

class IPersistence(Interface):

	"""I can generate data to persist my current
	state. The persistent data must be composed of
	basic types that can be handled by common data
	storage systems (relational data bases, XML, etc).
	The data returned shouldn't contain other complex
	python objects, lists or dictionaries.
	"""

	def getStateToPersist(self):
		"""Return a dictionary of my persistent data
		"""

This could just return self.__dict__ or use a simple implementation like:

class RowObject(IPersistence):
    def getStateToPersist(self):
        kw = {}
        for columnName in self.rowColumns:
            kw[columnName] = getattr(self, columnName)
	  return kw

interesting that this looks a little like "getStateToCopy" in
twisted.spread.pb... Maybe there is some crossover between state persisted
to databases in enterprise and across networks with pb... maybe they could
use the same persistence interface?


----------------
"If he's so smart, then how come he's dead?", Homer Simspon
Sean Riley
sean at ninjaneering.com




From itamar at itamarst.org  Sun Sep 15 14:15:29 2002
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 15 Sep 2002 14:15:29 -0400
Subject: [Twisted-Python] persistence interface
References: <HOEEKPCOKELHCNIJNMAGEEMMCGAA.sean@twistedmatrix.com>
Message-ID: <3D84CE41.8050100@itamarst.org>

So now we have the following persistence APIs:

1. getStateToPersist
2. getStateToCopy
3. __getstate__
4. Whatever it is marmalade is using

I don't see any difference between (1) and (3), since they both return 
dictionary that is used in persistence. Just make the requirements for 
__getstate__ to be more strict when implementing IPersistence.

How many persistence APIs do we need?!

-- 
Itamar Shtull-Trauring    http://itamarst.org/
Available for Python, Twisted, Zope and Java consulting




From bruce at cubik.org  Sun Sep 15 19:04:25 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Sun, 15 Sep 2002 17:04:25 -0600
Subject: [Twisted-Python] persistence interface
References: <HOEEKPCOKELHCNIJNMAGEEMMCGAA.sean@twistedmatrix.com>
Message-ID: <3D8511F9.7000601@cubik.org>

Hi Sean,

Sean Riley wrote:
> Glyph and I talked about persistence interface for use in twisted.enterprise
> initially but with possibly broader implications:

If this is going to potentially have broader implications, and with an 
interface as simple as this, it could easily do so, then I think you 
should at least consider taking versions into account and record them.

> interesting that this looks a little like "getStateToCopy" in
> twisted.spread.pb... Maybe there is some crossover between state persisted
> to databases in enterprise and across networks with pb... maybe they could
> use the same persistence interface?

Something that I'd like to see in time is PB over UDP, with the ability 
to specify not just what state should be copied, but some additional QoS 
information about that information as well.  That'd likely lead to a 
divergence in this similarity, no?

  - Bruce




From bruce at cubik.org  Sun Sep 15 19:09:01 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Sun, 15 Sep 2002 17:09:01 -0600
Subject: [Twisted-Python] serial datatype in t.e.row
References: <HOEEKPCOKELHCNIJNMAGCEKHCGAA.sean@twistedmatrix.com>
Message-ID: <3D85130D.4030506@cubik.org>

Sean Riley wrote:
> I have been looking at adding support for "serial" columns into
> twisted.enterprise.row and it appears to be harder than i originally
> thought.
> 
> ... snipped ...
> 
> But.. using twisted enterprise:
> 
> 	newRow = MyRow()
> 	reflector.insertRow(newRow)
> 
> does effectively the same thing, but the newRow object doesn't know the
> value of the index column (column1 in this case) that was just inserted, so
> it doesn't know how to update or delete itself!
> 
> One solution may be to manually run a
> 
> 	SELECT nextval('sequencename')
> 
> to get the next value and use that for the insert, but this requires an
> extra step for each insert, and requires that the we know which tables have
> serial columns (suprisingly hard to figure out..) and makes the behavior for
> tables with serial columns and no serial columns very different.

Ignoring the various problems that you're needing to solve, if you're 
using pyPgSQL, after an insert operation, the oid of the new row is 
available on the underlying pyPgSQL cursor object.  You can use that 
along with a select to get back the serial column value inserted rather 
than necessarily having to select off of the sequence.

  - Bruce




From glyph at twistedmatrix.com  Sun Sep 15 19:23:43 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 15 Sep 2002 18:23:43 -0500 (CDT)
Subject: [Twisted-Python] persistence interface
In-Reply-To: <3D84CE41.8050100@itamarst.org>
References: <HOEEKPCOKELHCNIJNMAGEEMMCGAA.sean@twistedmatrix.com>
	<3D84CE41.8050100@itamarst.org>
Message-ID: <20020915.182343.78715437.glyph@twistedmatrix.com>


Let me give some exposition of the ideas that lead to this, since the
persistence-adaptor style that Sean is proposing was at my suggestion, inspired
by what he's done so far on the Row API.

On Sun, 15 Sep 2002 14:15:29 -0400, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
> So now we have the following persistence APIs:

> 1. getStateToPersist

The idea here is that it's specifically for relational, or "essential"
persistence, not complete persistence.  In order for this kind of persistence
to work, your objects need to have a fixed list of fixed and some semantic
meaning associated with any object references: containership, ownership, or
weak reference.

So you can't return a dictionary of arbitrary data; you return a dictionary of
the attributes that the persistence layer expects to see.

This also doesn't handle object versioning, since it expects your persistence
layer to impose some sort of structure on your data.  (You can't upgrade a
relational database without some serious effort and forethought in any event.)

> 2. getStateToCopy

This is for remote mirroring.  Now, I am tempted to suggest this be used for
persistence adapters as well, since the full name of this method is
getStateToCopy*For*, and it takes the serializer object (which could quite well
be a database reflector).

However, I think the differences are more subtle than that, since as I
mentioned, information about containership will probably need to be part of the
persistence-adapter API.

Not only is it meant to have semntic parity with relational databases (at least
for its first incarnation), it's only supposed to be persisting state that an
object absolutely "needs"; any duplicated data such as cached references,
backreferences to "parent" objects, or, in the relational case, lists that
point to child objects, need not be saved.  This means that rather than the
traditional way of handling class updating in Twisted, input one state, output
a new, fixed state for new versions of the class, is unworkable.  You can
change the internal representation of the object as much as you want, as long
as you can still re-build it from the info you got from the database.

We will be able to avoid the 'for' argument in getStateToPersist because we
will have different, specialized adapter interfaces for different kinds of
persistence.  FramerD needs very different information about an object's state
than a database would, but it's likely that none of the existing state methods
will suffice.

> 3. __getstate__

This is for full, faithful replication of objects to trusted sources, such as
.tap files.  There should be as little perturbation as possible in an object's
__getstate__ method; really, the only thing this should do it provide
versioning and remove attributes which are simply not persistable.

Consider using __getstate__ for a schema migration tool: dumping a database to
a large pickle with one version of a codebase, then loading it with a new
version and undumping it back into another database with a new schema.

> 4. Whatever it is marmalade is using

Ugh.

This one is the one I'd think of eliminating, if we're going to think of
eliminating one.  It's rather overcomplex to produce a sensible-looking object
hierarchy with DOM, and very hard to get it right.  That's why I eventually
gave up on sensibility and just settled for correctness in Application ;).

> I don't see any difference between (1) and (3), since they both return
> dictionary that is used in persistence. Just make the requirements for
> __getstate__ to be more strict when implementing IPersistence.

That would be rather difficult, since IPersistence may want to expect things
like indexing in order to reverse properly.

> How many persistence APIs do we need?!

As many as there are persistence mechanisms that people want to use with
Twisted :-).

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020915/f7713295/attachment.pgp 

From lac at strakt.com  Mon Sep 16 02:55:56 2002
From: lac at strakt.com (Laura Creighton)
Date: Mon, 16 Sep 2002 08:55:56 +0200
Subject: [Twisted-Python] persistence interface 
In-Reply-To: Message from Glyph Lefkowitz <glyph@twistedmatrix.com> 
   of "Sun, 15 Sep 2002 18:23:43 CDT." <20020915.182343.78715437.glyph@twistedmatrix.com> 
References: <HOEEKPCOKELHCNIJNMAGEEMMCGAA.sean@twistedmatrix.com> <3D84CE41.8050100@itamarst.org>  <20020915.182343.78715437.glyph@twistedmatrix.com> 
Message-ID: <200209160655.g8G6tuo9012915@ratthing-b246.strakt.com>

There is a new persistence-SIG mailing list on python.org discussing
things like this, er, not right now but last month (things have become
fairly quiet).  If you've ever thought -- Persistence would be so much
easier if only Python had capability XYZ -- now is the time to mention
it, when GvR wants to make changes to support persistence.

Laura



From grolgh at online.no  Mon Sep 16 08:52:22 2002
From: grolgh at online.no (Benjamin Bruheim)
Date: Mon, 16 Sep 2002 14:52:22 +0200
Subject: [Twisted-Python] serial datatype in t.e.row
References: <HOEEKPCOKELHCNIJNMAGKEMLCGAA.sean@twistedmatrix.com>
Message-ID: <3D85D406.20703@online.no>

Sean Riley wrote:
> how about:
> 
> reflector.insertRow(row, reload=0)
> 
> where the reload arg specifies if the key value should be "reloaded" from
> the database. this would be specified by the user if they are going to
> perform more operations on the row object that was just inserted.

Hm, as Bruce mentioned, this could be done without a select, so I guess 
this is good. If there aren't any better alternatives than _this_, I 
will opt for this.

Benjamin Bruheim
Technical Manager, In/Out Bergen (http://www.inout.no)




From dennis at illusions.com  Tue Sep 17 11:30:04 2002
From: dennis at illusions.com (dennis at illusions.com)
Date: Tue, 17 Sep 2002 08:30:04 -0700 (MST)
Subject: [Twisted-Python] newbie widget question
Message-ID: <Pine.LNX.4.44.0209170822590.16147-100000@illusions.com>

Hi,

I've just started playing with Twisted 0.99.0. Bear with me please.

I'd like to use widgets, but I do not understand how to 'hook' a widget
into twisted web.

The Example uses config.tac to specify main.Gadget() and 'twistd -g
Example' to start the server. If I've got a web.tap, how do I use a
widget? I see I can add a 'new web test widget' when using coil, but I
don't know what this means.

Any help would be greatly appreciated.

-- 
---
Dennis Sacks
dennis at illusions.com





From Sergio.Lobo at Just-In-Time-Software.com  Tue Sep 17 12:51:26 2002
From: Sergio.Lobo at Just-In-Time-Software.com (Sergio Lobo)
Date: Tue, 17 Sep 2002 18:51:26 +0200
Subject: [Twisted-Python] Is X.25 supported?
Message-ID: <200209171851.26505.Sergio.Lobo@Just-In-Time-Software.com>

Hello,

I just found the article below on the web. Would anybody please let me know if 
Twisted-Python provides any support for the X.25 protocol?

Kind regards
Sergio Lobo


[Twisted-Python] adding a new connection type
Eric C. Newton twisted-python at twistedmatrix.com
Sun, 26 May 2002 22:30:45 -0400

    * Previous message: [Twisted-Python] adding a new connection type
    * Next message: [Twisted-Python] adding a new connection type
    * Messages sorted by: [ date ] [ thread ] [ subject ] [ author ]

Itamar Shtull-Trauring <twisted at itamarst.org> writes:
> Well, first of all, what does it run over?  

X.25.  Be afraid.

> And in what languages is it written?  

It runs in Python of course.

> And, what is it good for?

X.25 is an international standard for wide area communications widely
adopted by companies in the 1970's and early 80's using
packet-oriented, synchronous serial communications devices.

I'm using Linux, and playing with 2-year-old patches for version 2.4
of the kernel which enables me to play with the API over a loopback
device.

Sometimes it even works.




From ecn at metaslash.com  Tue Sep 17 14:20:42 2002
From: ecn at metaslash.com (Eric C. Newton)
Date: Tue, 17 Sep 2002 14:20:42 -0400
Subject: [Twisted-Python] Is X.25 supported?
In-Reply-To: <"from Sergio.Lobo"@Just-In-Time-Software.com>
References: <200209171851.26505.Sergio.Lobo@Just-In-Time-Software.com>
Message-ID: <20020917142042.A11359@pcp01758393pcs.gambrl01.md.comcast.net>

Twisted does prevent it, but there is no built-in support.  This is
not suprising since X.25 APIs are different on nearly every platform.

I tried re-patching my changes back in recently and had little
success.  I may come back to this in a couple of months.

-Eric

On Tue, Sep 17, 2002 at 06:51:26PM +0200, Sergio Lobo wrote:
> Hello,
> 
> I just found the article below on the web. Would anybody please let me know if 
> Twisted-Python provides any support for the X.25 protocol?
> 
> Kind regards
> Sergio Lobo
> 
> 
> [Twisted-Python] adding a new connection type
> Eric C. Newton twisted-python at twistedmatrix.com
> Sun, 26 May 2002 22:30:45 -0400
> 
>     * Previous message: [Twisted-Python] adding a new connection type
>     * Next message: [Twisted-Python] adding a new connection type
>     * Messages sorted by: [ date ] [ thread ] [ subject ] [ author ]
> 
> Itamar Shtull-Trauring <twisted at itamarst.org> writes:
> > Well, first of all, what does it run over?  
> 
> X.25.  Be afraid.
> 
> > And in what languages is it written?  
> 
> It runs in Python of course.
> 
> > And, what is it good for?
> 
> X.25 is an international standard for wide area communications widely
> adopted by companies in the 1970's and early 80's using
> packet-oriented, synchronous serial communications devices.
> 
> I'm using Linux, and playing with 2-year-old patches for version 2.4
> of the kernel which enables me to play with the API over a loopback
> device.
> 
> Sometimes it even works.
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From Sergio.Lobo at CoachingOffice.com  Tue Sep 17 11:29:10 2002
From: Sergio.Lobo at CoachingOffice.com (Sergio Lobo)
Date: Tue, 17 Sep 2002 17:29:10 +0200
Subject: [Twisted-Python] X.25 for Python
Message-ID: <200209171729.10960.Sergio.Lobo@CoachingOffice.com>

Hello Eric,

I just found the article below on the web. Would you please let me know if 
Twisted-Python provides support for X.25?

Kind regards
Sergio Lobo


[Twisted-Python] adding a new connection type
Eric C. Newton twisted-python at twistedmatrix.com
Sun, 26 May 2002 22:30:45 -0400

    * Previous message: [Twisted-Python] adding a new connection type
    * Next message: [Twisted-Python] adding a new connection type
    * Messages sorted by: [ date ] [ thread ] [ subject ] [ author ]

Itamar Shtull-Trauring <twisted at itamarst.org> writes:
> Well, first of all, what does it run over?  

X.25.  Be afraid.

> And in what languages is it written?  

It runs in Python of course.

> And, what is it good for?

X.25 is an international standard for wide area communications widely
adopted by companies in the 1970's and early 80's using
packet-oriented, synchronous serial communications devices.

I'm using Linux, and playing with 2-year-old patches for version 2.4
of the kernel which enables me to play with the API over a loopback
device.

Sometimes it even works.



From m at moshez.org  Tue Sep 17 13:06:29 2002
From: m at moshez.org (Moshe Zadka)
Date: 17 Sep 2002 17:06:29 -0000
Subject: [Twisted-Python] newbie widget question
In-Reply-To: <Pine.LNX.4.44.0209170822590.16147-100000@illusions.com>
References: <Pine.LNX.4.44.0209170822590.16147-100000@illusions.com>
Message-ID: <20020917170629.22161.qmail@green.zadka.com>

On Tue, 17 Sep 2002, dennis at illusions.com wrote:

> The Example uses config.tac to specify main.Gadget() and 'twistd -g
> Example' to start the server.

If you don't want to use a module, you can just put similar code in
a Python source file and then use "twistd -y". Or you can just put
"app.save()" at the end of it to manually create a tap. "mktap"
is a way of programmatically record common configuration, not to
create wonderful and unique condifurations.



From itamar at itamarst.org  Tue Sep 17 13:51:43 2002
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 17 Sep 2002 13:51:43 -0400
Subject: [Twisted-Python] Is X.25 supported?
References: <200209171851.26505.Sergio.Lobo@Just-In-Time-Software.com>
Message-ID: <3D876BAF.4040403@itamarst.org>

Sergio Lobo wrote:

> I just found the article below on the web. Would anybody please let me know if 
> Twisted-Python provides any support for the X.25 protocol?

If you can access it from Python, then probably, yes. Try emailing whoever 
wrote that email in the first place.

Alternate plan of action:
1. Get your Linux box or whatever OS it is setup with X.25.
2. Play with socket module in Python, see if it can do X.25 stuff.
3. Get back to us.




From dennis at illusions.com  Tue Sep 17 18:35:26 2002
From: dennis at illusions.com (dennis at illusions.com)
Date: Tue, 17 Sep 2002 15:35:26 -0700 (MST)
Subject: [Twisted-Python] newbie widget question
In-Reply-To: <20020917170629.22161.qmail@green.zadka.com>
Message-ID: <Pine.LNX.4.44.0209171522040.6946-100000@illusions.com>

On 17 Sep 2002, Moshe Zadka wrote:

> If you don't want to use a module, you can just put similar code in
> a Python source file and then use "twistd -y". Or you can just put
> "app.save()" at the end of it to manually create a tap. "mktap"
> is a way of programmatically record common configuration, not to
> create wonderful and unique condifurations.

Thanks,

Ok, so I'll take Example as my base to build on. How do I specify a 'doc 
root' and a logfile? Is there more example code I can look at?

The twisted docs are very very brief...they probably contain all the info, 
but not spelled out enough for me to grasp at this point.

---
Dennis Sacks
dennis at illusions.com







From ecn at metaslash.com  Tue Sep 17 20:00:48 2002
From: ecn at metaslash.com (Eric C. Newton)
Date: Tue, 17 Sep 2002 20:00:48 -0400
Subject: [Twisted-Python] Is X.25 supported?
In-Reply-To: <"from ecn"@metaslash.com>
References: <200209171851.26505.Sergio.Lobo@Just-In-Time-Software.com>
 <"from Sergio.Lobo"@Just-In-Time-Software.com>
 <20020917142042.A11359@pcp01758393pcs.gambrl01.md.comcast.net>
Message-ID: <20020917200048.A12954@pcp01758393pcs.gambrl01.md.comcast.net>

Oops ... that should read:

    "Twisted does _not_ prevent it..."

Twisted is great.  Eric is an idiot.

Some more details for the internet to record for posterity:

The X.25 interface under Linux is socket based.  You can use your
friends listen/connect/accept/send/recv with the underlying X.25
drivers.  The X.25 API on Sun and IBM AIX is SysV Streams 
based, and you interact with the X.25 device with different system
calls.

As you know, twisted works great for sockets, and it _seems_ like
it would be simple enough to do.  But Python does not quite support
the interface necessary to create real X.25 connections.  With 
some simple C extensions you can expose the API.  The main problem 
is that the format of a X.25 address is quite different from a 
TCP/IP address.

Once you get a file descriptor, it can be integrated with the Reactor.
My only problems with Twisted were trying to make the X.25 API
as full-featured as a TCP/IP connection.  With some effort, I'm
sure it can be done.

I've successfully used X.25 against the Linux loopback device,
and on the real hardware under Solaris and AIX.  I've done all three
with Python.  If you want any other help with this, please contact
me off list.

-Eric
ecn at metaslash.com

On Tue, Sep 17, 2002 at 02:20:42PM -0400, Eric C. Newton wrote:
> Twisted does prevent it, but there is no built-in support.  This is
> not suprising since X.25 APIs are different on nearly every platform.
> 
> I tried re-patching my changes back in recently and had little
> success.  I may come back to this in a couple of months.
> 
> -Eric
> 
> On Tue, Sep 17, 2002 at 06:51:26PM +0200, Sergio Lobo wrote:
> > Hello,
> > 
> > I just found the article below on the web. Would anybody please let me know if 
> > Twisted-Python provides any support for the X.25 protocol?
> > 
> > Kind regards
> > Sergio Lobo
> > 
> > 
> > [Twisted-Python] adding a new connection type
> > Eric C. Newton twisted-python at twistedmatrix.com
> > Sun, 26 May 2002 22:30:45 -0400
> > 
> >     * Previous message: [Twisted-Python] adding a new connection type
> >     * Next message: [Twisted-Python] adding a new connection type
> >     * Messages sorted by: [ date ] [ thread ] [ subject ] [ author ]
> > 
> > Itamar Shtull-Trauring <twisted at itamarst.org> writes:
> > > Well, first of all, what does it run over?  
> > 
> > X.25.  Be afraid.
> > 
> > > And in what languages is it written?  
> > 
> > It runs in Python of course.
> > 
> > > And, what is it good for?
> > 
> > X.25 is an international standard for wide area communications widely
> > adopted by companies in the 1970's and early 80's using
> > packet-oriented, synchronous serial communications devices.
> > 
> > I'm using Linux, and playing with 2-year-old patches for version 2.4
> > of the kernel which enables me to play with the API over a loopback
> > device.
> > 
> > Sometimes it even works.
> > 
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From carball at hush.com  Wed Sep 18 23:43:52 2002
From: carball at hush.com (carball at hush.com)
Date: Wed, 18 Sep 2002 20:43:52 -0700
Subject: [Twisted-Python] DBReflector.loadObjectFrom question
Message-ID: <200209190343.g8J3hrR59424@mailserver2.hushmail.com>

greetings,

using loadObjectsFrom, it seems the RowClass i am passing in
should have dbColumns with data in it in order to build a
correct sql query. .

where does said data come from?
my dbColumns is just an empty list

also, i dont understand why i have to tell an instantiated
DBReflector what tablename, keys, and RowClass to use again in
loadObjectsFrom?

i apologize if i'm missing something obvious
i've read 'some' T.enterprise code, not enough to
understand it all. .

thanks in advance,
cary

--------------code-----------------------------
#!/usr/bin/env python
from twisted.enterprise import adbapi, row
from twisted.internet import app

class AcctRow( row.RowObject ):
rowColumns = [
'id',
't_id',
'name',
'label'
]
dbKeyColumns = [( 'id', 'int4' )]
def __repr__( self ):
return '%d %s' % ( self.id, self.name )

def refInit( result ):
print 'refInit', result

dbpool = adbapi.ConnectionPool( 'pyPgSQL.PgSQL' )
reflector = row.DBReflector( dbpool,
[( AcctRow,
'acct',
AcctRow.dbKeyColumns )],
refInit )

reflector.loadObjectsFrom( 'acct',
AcctRow.dbKeyColumns,
None,
AcctRow )

application = app.Application('rowTest')
application.run(save=0)

---------------------------
this fails in DBReflector._objectLoader, dbColumns is []??????
i'm using twisted 0.99.0

-----------output------------------
car at platypus car $ ./rowTest.py
Installing SelectReactor, since unspecified.
Connecting to database: pyPgSQL.PgSQL ('',) {}
Enabling Multithreading.
adbapi connecting: pyPgSQL.PgSQL ('',)
Exception in SQL interaction! rolling back...
Traceback (most recent call last):
File '/usr/lib/python2.2/site-packages/twisted/enterprise/adbapi.py', line 154
, in _runInteraction
result = apply(interaction, (trans,)+args, kw)
File '/usr/lib/python2.2/site-packages/twisted/enterprise/row.py', line 245, i
n _objectLoader
transaction.execute(sql)
File '/usr/lib/python2.2/site-packages/pyPgSQL/PgSQL.py', line 2393, in execut
e
adbapi connecting: pyPgSQL.PgSQL ('',)
raise OperationalError, msg
libpq.OperationalError: ERROR: parser: parse error at or near 'FROM'

Traceback (most recent call last):
File '/usr/lib/python2.2/site-packages/twisted/internet/threads.py', line 33,
in _putResultInDeferred
result = apply(f, args, kwargs)
File '/usr/lib/python2.2/site-packages/twisted/enterprise/adbapi.py', line 154
, in _runInteraction
result = apply(interaction, (trans,)+args, kw)
File '/usr/lib/python2.2/site-packages/twisted/enterprise/row.py', line 245, i
n _objectLoader
transaction.execute(sql)
File '/usr/lib/python2.2/site-packages/pyPgSQL/PgSQL.py', line 2393, in execut
e
raise OperationalError, msg
libpq.OperationalError: ERROR: parser: parse error at or near 'FROM'

refInit None
Main loop terminated.





Get your free encrypted email at https://www.hushmail.com



From sean at twistedmatrix.com  Thu Sep 19 14:25:32 2002
From: sean at twistedmatrix.com (Sean Riley)
Date: Thu, 19 Sep 2002 13:25:32 -0500
Subject: [Twisted-Python] DBReflector.loadObjectFrom question
In-Reply-To: <200209190343.g8J3hrR59424@mailserver2.hushmail.com>
Message-ID: <HOEEKPCOKELHCNIJNMAGEENICGAA.sean@twistedmatrix.com>

there have been changes to improve the Row interface recently. Here is your
code modified to use the new interface:

from twisted.enterprise import adbapi, row, dbreflector
from twisted.internet import app

class AcctRow( row.RowObject ):
    rowColumns = [
        'id',
        't_id',
        'name',
        'label'
        ]
    rowKeyColumns = [( 'id', 'int4' )]
    rowTableName = "acct"

    def __repr__( self ):
        return 'Acct: <%d %s>' % ( self.id, self.name )


def gotData( data ):
    print "got Data:", data

def refInit( result ):
    print 'refInit', result
    reflector.loadObjectsFrom( 'acct' ).addCallback( gotData)

dbpool = adbapi.ConnectionPool("pyPgSQL.PgSQL", database="sean",
host="localhost", port=5432)
reflector = dbreflector.SQLReflector( dbpool,[ AcctRow], refInit)

application = app.Application('rowTest')
application.run(save=0)

BTW, loadObjects must be run _after_ the reflector has been initialized
(after refInit) has been invoked because the initialization may be
asynchronous.

here is the above code running:

$ python e.py
Connecting to database: pyPgSQL.PgSQL () {'host': 'localhost'}
Enabling Multithreading.
starting waker
adbapi connecting: pyPgSQL.PgSQL {'host': 'localhost', 'port': 5432,
'database': 'sean'}
refInit None
got Data: [Acct: <1 afd>, Acct: <2 afd>, Acct: <3 afd>, Acct: <4 afd>, Acct:
<5 afd>]


-----Original Message-----
From: twisted-python-admin at twistedmatrix.com
[mailto:twisted-python-admin at twistedmatrix.com]On Behalf Of
carball at hush.com
Sent: Wednesday, September 18, 2002 10:44 PM
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] DBReflector.loadObjectFrom question



greetings,

using loadObjectsFrom, it seems the RowClass i am passing in
should have dbColumns with data in it in order to build a
correct sql query. .

where does said data come from?
my dbColumns is just an empty list

also, i dont understand why i have to tell an instantiated
DBReflector what tablename, keys, and RowClass to use again in
loadObjectsFrom?

i apologize if i'm missing something obvious
i've read 'some' T.enterprise code, not enough to
understand it all. .

thanks in advance,
cary

--------------code-----------------------------
#!/usr/bin/env python
from twisted.enterprise import adbapi, row
from twisted.internet import app

class AcctRow( row.RowObject ):
rowColumns = [
'id',
't_id',
'name',
'label'
]
dbKeyColumns = [( 'id', 'int4' )]
def __repr__( self ):
return '%d %s' % ( self.id, self.name )

def refInit( result ):
print 'refInit', result

dbpool = adbapi.ConnectionPool( 'pyPgSQL.PgSQL' )
reflector = row.DBReflector( dbpool,
[( AcctRow,
'acct',
AcctRow.dbKeyColumns )],
refInit )

reflector.loadObjectsFrom( 'acct',
AcctRow.dbKeyColumns,
None,
AcctRow )

application = app.Application('rowTest')
application.run(save=0)

---------------------------
this fails in DBReflector._objectLoader, dbColumns is []??????
i'm using twisted 0.99.0

-----------output------------------
car at platypus car $ ./rowTest.py
Installing SelectReactor, since unspecified.
Connecting to database: pyPgSQL.PgSQL ('',) {}
Enabling Multithreading.
adbapi connecting: pyPgSQL.PgSQL ('',)
Exception in SQL interaction! rolling back...
Traceback (most recent call last):
File '/usr/lib/python2.2/site-packages/twisted/enterprise/adbapi.py', line
154
, in _runInteraction
result = apply(interaction, (trans,)+args, kw)
File '/usr/lib/python2.2/site-packages/twisted/enterprise/row.py', line 245,
i
n _objectLoader
transaction.execute(sql)
File '/usr/lib/python2.2/site-packages/pyPgSQL/PgSQL.py', line 2393, in
execut
e
adbapi connecting: pyPgSQL.PgSQL ('',)
raise OperationalError, msg
libpq.OperationalError: ERROR: parser: parse error at or near 'FROM'

Traceback (most recent call last):
File '/usr/lib/python2.2/site-packages/twisted/internet/threads.py', line
33,
in _putResultInDeferred
result = apply(f, args, kwargs)
File '/usr/lib/python2.2/site-packages/twisted/enterprise/adbapi.py', line
154
, in _runInteraction
result = apply(interaction, (trans,)+args, kw)
File '/usr/lib/python2.2/site-packages/twisted/enterprise/row.py', line 245,
i
n _objectLoader
transaction.execute(sql)
File '/usr/lib/python2.2/site-packages/pyPgSQL/PgSQL.py', line 2393, in
execut
e
raise OperationalError, msg
libpq.OperationalError: ERROR: parser: parse error at or near 'FROM'

refInit None
Main loop terminated.





Get your free encrypted email at https://www.hushmail.com

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From andrew-twisted at puzzling.org  Fri Sep 20 00:08:15 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 20 Sep 2002 14:08:15 +1000
Subject: [Twisted-Python] jelly, marmalade, aot, and wacky types
Message-ID: <20020920040815.GB2501@ritsuko.xware.cx>

Quick question:

Even if an object is of an unknown wacky type (say Zope's extension
class), shouldn't jelly (and friends) check for 
callable(getattr(obj, '__getstate__, None)) anyway (i.e. treat it like
an InstanceType and see what happens)?  It looks like this is what
pickle does.

-Andrew.




From twisted at moshez.org  Fri Sep 20 10:42:44 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 20 Sep 2002 14:42:44 -0000
Subject: [Twisted-Python] epyrun failing
Message-ID: <20020920144244.2362.qmail@green.zadka.com>

epyrun fails for me with:

Traceback (most recent call last):
  File "./admin/epyrun", line 54, in ?
    cli()
  File "/usr/lib/python2.1/site-packages/epydoc/cli.py", line 202, in cli
    modules = _find_modules(param['modules'], param['verbosity'])
  File "/usr/lib/python2.1/site-packages/epydoc/cli.py", line 187, in _find_modules
    exec('module = %s' % name)
  File "<string>", line 1, in ?
AttributeError: 'twisted.im' module has no attribute 'jychat'

I want to thank the error for causing me to notice that epydoc
has an unadorned exec (which is hardly necessary). This would,
not, however, cause the error to go away -- AFAICS it is caused
by jychat failing to import. A fix deep in the bowels of epydoc
would be needed so AttributeError would merely cause a module to be
skipped rather than the whole thing to come crumbling down.





From typo at soniq.net  Fri Sep 20 11:00:38 2002
From: typo at soniq.net (Paul Boehm)
Date: Fri, 20 Sep 2002 17:00:38 +0200
Subject: [Twisted-Python] example for integrating generators with twisted
In-Reply-To: <20020920144244.2362.qmail@green.zadka.com>
References: <20020920144244.2362.qmail@green.zadka.com>
Message-ID: <20020920150038.GA14474@soniq.net>

see example
-------------- next part --------------
#!/usr/bin/python

from __future__ import generators

from twisted.internet import reactor, defer

class DeferredGenerator:
    def __init__(self, arg = None):
        self.next = self._Code().next
        self.callback(arg)
    def callback(self, data):
        self._newdata = data
        try:
            ret = self.next()
            if isinstance(ret, defer.Deferred):
                ret.addCallback(self.callback)
        except StopIteration:
            pass
    def newdata(self):
        return self._newdata
    def _Code(self): # template method, subclass me!
        yield "OK" # Yield non-deferred to indicate end of initialization.

class TestGen(DeferredGenerator):
    def _Code(self):
        yield "OK"

        x = self.newdata()

        defr = defer.Deferred()
        defr.callback(9)
        yield defr

        y = self.newdata()
        print x + y

if __name__ == "__main__":
    gen = TestGen()
    gen.callback(5)
    reactor.run()

From glyph at twistedmatrix.com  Fri Sep 20 12:27:39 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 20 Sep 2002 11:27:39 -0500 (CDT)
Subject: [Twisted-Python] jelly, marmalade, aot, and wacky types
In-Reply-To: <20020920040815.GB2501@ritsuko.xware.cx>
References: <20020920040815.GB2501@ritsuko.xware.cx>
Message-ID: <20020920.112739.101496376.glyph@twistedmatrix.com>


On Fri, 20 Sep 2002 14:08:15 +1000, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> Quick question:
> 
> Even if an object is of an unknown wacky type (say Zope's extension
> class), shouldn't jelly (and friends) check for 
> callable(getattr(obj, '__getstate__, None)) anyway (i.e. treat it like
> an InstanceType and see what happens)?  It looks like this is what
> pickle does.
> 
> -Andrew.

I'm working on support for new-style classes right now.  It's a little trickier
than it sounds, because Pickle is willing to invoke functions from just about
anywhere and I've tried to make the various Twisted serializers, especially
Jelly, not do that.

(Notwithstanding the `eval' currently in marmalade...)

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020920/7a22f73a/attachment.pgp 

From alexander.levy at tufts.edu  Fri Sep 20 05:20:41 2002
From: alexander.levy at tufts.edu (Alex Levy)
Date: Fri, 20 Sep 2002 05:20:41 -0400
Subject: [Twisted-Python] Strange DOMTemplate error
Message-ID: <5.1.1.6.0.20020920051645.00b20cd0@coral.tufts.edu>

I have been toying around with DOM Templates, practically using the example 
code off the web page (with a few minor changes), and I found something 
very strange.

I received xml.sax._exceptions.SAXParseException whenever I placed the 
string '&copy;'
inside my template HTML.  This, as it turns out, applied to just about any 
HTML special character.  I tested it with &copy; &nbsp; &foo; and a range 
of others.  It also broke (although with a different error) whenever I 
tried using numeric character codes, like &#153;.

Is this a 'feature', or some strange bug?  Figured I'd mention it here.

--
Alex Levy
WWW: http://mesozoic.geecs.org
Tel: 617.835.0778

"Never let your sense of morals prevent you from doing what is right."
-- Salvor Hardin, Isaac Asimov's _Foundation_





From glyph at twistedmatrix.com  Fri Sep 20 12:38:24 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 20 Sep 2002 11:38:24 -0500 (CDT)
Subject: [Twisted-Python] Re: [Twisted-commits] Element should have hasChildNodes
In-Reply-To: <E17sPpn-0000JX-00@pyramid.twistedmatrix.com>
References: <E17sPpn-0000JX-00@pyramid.twistedmatrix.com>
Message-ID: <20020920.113824.57266300.glyph@twistedmatrix.com>


On Fri, 20 Sep 2002 10:36:47 -0500, moshez CVS <moshez at twistedmatrix.com> wrote:
> Log message:
> Element should have hasChildNodes

Node already had hasChildNodes, which Element was inheriting, and it had a more
correct return value.  Why was this necessary?

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020920/3fb088e1/attachment.pgp 

From glyph at twistedmatrix.com  Fri Sep 20 13:51:07 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 20 Sep 2002 12:51:07 -0500 (CDT)
Subject: [Twisted-Python] Strange DOMTemplate error
In-Reply-To: <5.1.1.6.0.20020920051645.00b20cd0@coral.tufts.edu>
References: <5.1.1.6.0.20020920051645.00b20cd0@coral.tufts.edu>
Message-ID: <20020920.125107.75782699.glyph@twistedmatrix.com>


On Fri, 20 Sep 2002 05:20:41 -0400, Alex Levy <alexander.levy at tufts.edu> wrote:
> I have been toying around with DOM Templates, practically using the example 
> code off the web page (with a few minor changes), and I found something 
> very strange.

This should be fixed in the next release of Twisted, as DOMTemplate now uses
Twisted's internal representation of DOM trees, which is considerably more
relaxed about this kind of input.

> I received xml.sax._exceptions.SAXParseException whenever I placed the string
> '&copy;' inside my template HTML.  This, as it turns out, applied to just
> about any HTML special character.  I tested it with &copy; &nbsp; &foo; and a
> range of others.  It also broke (although with a different error) whenever I
> tried using numeric character codes, like &#153;.

"Special characters" in "HTML" are known in XML lingo as "entity references",
and they are hewn cold from the bones of the stillborn deep within the bowels
of satan's lair by the three arch demons.  You may have seen them featured in
the popular video-game adaption of the W3C's standardization process, "Diablo
II".

Moral: try to avoid using them if you want your HTML to be processed by any
"real" XML tools.  As I said, Twisted will handle these more gently in the
future because there's not really any good reason to reject them, but be aware
that you're breaking the standard.

> Is this a 'feature', or some strange bug?  Figured I'd mention it here.

That depends on your personal opinion of "web standards".  Me, I'd say it's a
bug. :-)

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020920/8b134a4f/attachment.pgp 

From dp at twistedmatrix.com  Fri Sep 20 14:36:06 2002
From: dp at twistedmatrix.com (Donovan Preston)
Date: Fri, 20 Sep 2002 11:36:06 -0700
Subject: [Twisted-Python] Another example of using generators in Twisted
In-Reply-To: <20020920150038.GA14474@soniq.net>
Message-ID: <D2D73DF2-CCC7-11D6-A32C-000393B3EC2C@twistedmatrix.com>

Here's an example of using generators to make long chains of deferreds 
easier to deal with. Using the function unwrapDeferredGenerator on a 
generator object will cause the generator to be run until it yields 
None. Each time the generator yields a deferred, the function is halted 
and resumed when the Deferred fires. The result of the Deferred is 
available in deferred.result.

What used to be a long chain of callback functions can now be written 
as one generator function, (hopefully) making things easier to read.

Donovan
-------------- next part --------------
A non-text attachment was scrubbed...
Name: yielddeferreds.py
Type: application/applefile
Size: 471 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020920/329e2472/attachment.bin 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: yielddeferreds.py
Type: application/text
Size: 1043 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020920/329e2472/attachment-0001.bin 

From m at moshez.org  Fri Sep 20 15:05:39 2002
From: m at moshez.org (Moshe Zadka)
Date: 20 Sep 2002 19:05:39 -0000
Subject: [Twisted-Python] Re: [Twisted-commits] Element should have hasChildNodes
In-Reply-To: <20020920.113824.57266300.glyph@twistedmatrix.com>
References: <20020920.113824.57266300.glyph@twistedmatrix.com>, <E17sPpn-0000JX-00@pyramid.twistedmatrix.com>
Message-ID: <20020920190539.5206.qmail@green.zadka.com>

On Fri, 20 Sep 2002, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> Node already had hasChildNodes, which Element was inheriting, and it had a more
> correct return value.  Why was this necessary?

Dunno, but it caused epyrun to actually work.
 




From dennis at illusions.com  Sat Sep 21 03:58:52 2002
From: dennis at illusions.com (dennis at illusions.com)
Date: Sat, 21 Sep 2002 00:58:52 -0700 (MST)
Subject: [Twisted-Python] real code examples
Message-ID: <Pine.LNX.4.44.0209210058020.22177-100000@illusions.com>

Anyone,

is there a repository of widget code examples? I have so many questions 
and so little answers...

-- 
---
Dennis Sacks
dennis at illusions.com





From bob at redivi.com  Sat Sep 21 16:59:33 2002
From: bob at redivi.com (Bob Ippolito)
Date: Sat, 21 Sep 2002 16:59:33 -0400
Subject: [Twisted-Python] OS X build issues..
Message-ID: <0780B779-CDA5-11D6-B3A7-0003938210D6@redivi.com>

Just FYI, the C modules don't build on OS X.  Shouldn't be a difficult 
fix, perhaps I'll do a patch later..  not sure if I'll have the time.

-bob

checking for sys/poll.h ...
conftest.c:1: header file 'sys/poll.h' not found
cpp-precomp: warning: errors during smart preprocessing, retrying in 
basic mode
The C reactor is unavailable on this system.
checking for rpc/pmap_clnt.h ...
/usr/include/rpc/pmap_clnt.h:91: undefined type, found `bool_t'
/usr/include/rpc/pmap_clnt.h:91: syntax error, found `int'
/usr/include/rpc/pmap_clnt.h:91: illegal function definition, found `)'
/usr/include/rpc/pmap_clnt.h:92: undefined type, found `bool_t'
/usr/include/rpc/pmap_clnt.h:94: syntax error, found `u_long'
/usr/include/rpc/pmap_clnt.h:94: illegal function definition, found `)'
/usr/include/rpc/pmap_clnt.h:99: syntax error, found `char'
/usr/include/rpc/pmap_clnt.h:99: illegal function definition, found `)'
/usr/include/rpc/pmap_clnt.h:103: undefined type, found `u_short'
/usr/include/rpc/pmap_clnt.h:103: syntax error, found `u_long'
/usr/include/rpc/pmap_clnt.h:103: illegal function definition, found `)'
cpp-precomp: warning: errors during smart preprocessing, retrying in 
basic mode
In file included from conftest.c:2:
/usr/include/rpc/pmap_clnt.h:91: parse error before "pmap_set"
/usr/include/rpc/pmap_clnt.h:91: parse error before "int"
/usr/include/rpc/pmap_clnt.h:92: parse error before "pmap_unset"
/usr/include/rpc/pmap_clnt.h:94: parse error before "u_long"
/usr/include/rpc/pmap_clnt.h:99: parse error before "char"
/usr/include/rpc/pmap_clnt.h:99: parse error before ')' token
/usr/include/rpc/pmap_clnt.h:103: parse error before "pmap_getport"
/usr/include/rpc/pmap_clnt.h:103: parse error before "u_long"
The C reactor is unavailable on this system.
building 'twisted.spread.cBanana' extension
creating build/temp.darwin-6.1-Power Macintosh-2.2
gcc -DNDEBUG -g -O3 -Wall -Wstrict-prototypes -no-cpp-precomp 
-I/usr/include/python2.2 -c twisted/spread/cBanana.c -o 
build/temp.darwin-6.1-Power Macintosh-2.2/cBanana.o
gcc -arch i386 -arch ppc -bundle -flat_namespace -undefined suppress 
build/temp.darwin-6.1-Power Macintosh-2.2/cBanana.o -o 
build/lib.darwin-6.1-Power Macintosh-2.2/twisted/spread/cBanana.so
ld: for architecture i386
ld: warning /usr/lib/bundle1.o cputype (18, architecture ppc) does not 
match cputype (7) for specified -arch flag: i386 (file not loaded)
ld: warning build/temp.darwin-6.1-Power Macintosh-2.2/cBanana.o cputype 
(18, architecture ppc) does not match cputype (7) for specified -arch 
flag: i386 (file not loaded)
ld: warning /usr/lib/gcc/darwin/3.1/libgcc.a archive's cputype (18, 
architecture ppc) does not match cputype (7) for specified -arch flag: 
i386 (can't load from it)
ld: warning /usr/lib/libSystem.dylib cputype (18, architecture ppc) 
does not match cputype (7) for specified -arch flag: i386 (file not 
loaded)
building 'twisted.internet.cReactor' extension
gcc -DNDEBUG -g -O3 -Wall -Wstrict-prototypes -no-cpp-precomp 
-I/usr/include/python2.2 -c twisted/internet/cReactor/cReactor.c -o 
build/temp.darwin-6.1-Power Macintosh-2.2/cReactor.o
In file included from twisted/internet/cReactor/cReactor.c:22:
twisted/internet/cReactor/cReactor.h:23:22: sys/poll.h: No such file or 
directory
twisted/internet/cReactor/cReactor.c: In function 
`iterate_rebuild_pollfd_arrray':
twisted/internet/cReactor/cReactor.c:508: sizeof applied to an 
incomplete type
twisted/internet/cReactor/cReactor.c:541: dereferencing pointer to 
incomplete type
twisted/internet/cReactor/cReactor.c:542: dereferencing pointer to 
incomplete type
twisted/internet/cReactor/cReactor.c:549: dereferencing pointer to 
incomplete type
twisted/internet/cReactor/cReactor.c:549: `POLLIN' undeclared (first 
use in this function)
twisted/internet/cReactor/cReactor.c:549: (Each undeclared identifier 
is reported only once
twisted/internet/cReactor/cReactor.c:549: for each function it appears 
in.)
twisted/internet/cReactor/cReactor.c:558: dereferencing pointer to 
incomplete type
twisted/internet/cReactor/cReactor.c:558: `POLLOUT' undeclared (first 
use in this function)
twisted/internet/cReactor/cReactor.c:562: dereferencing pointer to 
incomplete type
twisted/internet/cReactor/cReactor.c:564: increment of pointer to 
unknown structure
twisted/internet/cReactor/cReactor.c:564: arithmetic on pointer to an 
incomplete type
twisted/internet/cReactor/cReactor.c: In function 
`iterate_process_pollfd_array':
twisted/internet/cReactor/cReactor.c:588: increment of pointer to 
unknown structure
twisted/internet/cReactor/cReactor.c:588: arithmetic on pointer to an 
incomplete type
twisted/internet/cReactor/cReactor.c:591: dereferencing pointer to 
incomplete type
twisted/internet/cReactor/cReactor.c:597: dereferencing pointer to 
incomplete type
twisted/internet/cReactor/cReactor.c:602: dereferencing pointer to 
incomplete type
twisted/internet/cReactor/cReactor.c:602: `POLLIN' undeclared (first 
use in this function)
twisted/internet/cReactor/cReactor.c:607: dereferencing pointer to 
incomplete type
twisted/internet/cReactor/cReactor.c:607: `POLLOUT' undeclared (first 
use in this function)
twisted/internet/cReactor/cReactor.c:612: dereferencing pointer to 
incomplete type
twisted/internet/cReactor/cReactor.c: In function `iterate_internal':
twisted/internet/cReactor/cReactor.c:777: warning: implicit declaration 
of function `poll'
error: command 'gcc' failed with exit status 1




From sean at twistedmatrix.com  Sat Sep 21 17:09:11 2002
From: sean at twistedmatrix.com (Sean Riley)
Date: Sat, 21 Sep 2002 16:09:11 -0500
Subject: [Twisted-Python] Relationship Manager pattern and t.e.row
Message-ID: <HOEEKPCOKELHCNIJNMAGKEOCCGAA.sean@twistedmatrix.com>

Interesting description of a design pattern that seems very similar to
t.e.row: http://www.atug.com/andypatterns/RM.htm. Could be useful as
inspiration for the continuing evolution of t.e.row.

Also, http://skunkweb.sourceforge.net/PyDO/ is python Object-relation
database interface that is similar to t.e.row! Their documentation  could
almost be used by us!



----------------
"If he's so smart, then how come he's dead?", Homer Simspon
Sean Riley
sean at ninjaneering.com




From mattam at netcourrier.com  Sat Sep 21 19:23:43 2002
From: mattam at netcourrier.com (mattam at netcourrier.com)
Date: Sun, 22 Sep 2002 01:23:43 +0200
Subject: [Twisted-Python] [PATCH] Accept and accept-language parsing
Message-ID: <20020921232343.GF493@Mat.Home>

Hi twisters,

	here's a patch for parsing accept and accept-language HTTP headers.
	They are contained in a priority queue which can also be
	retrieved as a list. Perhaps some other methods could be
	convenient, but as it's late I let you advise which. I added a
	parseHeaders() method for Request which is called just after 
	parseCookies() in HTTPChannel.allHeadersReceived.


Bye!

M at t


-------------- next part --------------
--- twisted/python/priorityqueue.py.orig	2002-09-22 00:39:08.000000000 +0200
+++ twisted/python/priorityqueue.py	2002-09-22 00:35:38.000000000 +0200
@@ -0,0 +1,70 @@
+
+# Twisted, the Framework of Your Internet
+# Copyright (C) 2001 Matthew W. Lefkowitz
+#
+# This library is free software; you can redistribute it and/or
+# modify it under the terms of version 2.1 of the GNU Lesser General Public
+# License as published by the Free Software Foundation.
+#
+# This library is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this library; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+
+""" A priority queue. """
+
+class PriorityQueue:
+
+    """
+    Elements are ordered using the comparison function f,
+    which return value is negative if x < y, 0 if x == y
+    and positive if x > y.
+
+    """     
+    
+    def __init__(self, comparison):
+        self.list = []
+        self.cmpf = comparison
+
+    def add_elements(self, priority, elements):
+        """ Add a sequenct of elements at the given priority """
+
+        length = len(self.list)        
+        if length == 0:
+            self.list = [(priority, list(elements))]
+        else:
+            res = self.cmpf(priority, self.list[0][0])
+            if res > 0:
+                self.list = [(priority, list(elements))] + self.list
+            elif res == 0:
+                self.list[0] = (priority, self.list[0][1] + list(elements))
+            else:
+                i = 1
+                while i < length and self.cmpf(priority, self.list[i][0]) < 0:
+                    i += 1
+                if i == length:
+                    self.list.append((priority, list(elements)))
+                elif self.cmpf(self.list[i][0], priority) == 0:
+                    self.list[i] = (priority, self.list[i][1] + list(elements))
+                else: 
+                    # self.list[i][0] < priority
+                    tmp = self.list[i:]
+                    
+                    self.list = self.list[:i] + [(priority, list(elements))]
+                    
+                    if tmp is not None:
+                        self.list = self.list + tmp
+    
+    def add(self, priority, element):
+        self.add_elements(priority, [element])
+        
+    def getlist(self):
+        """ I return the list of elements in decreasing order """
+        res = []
+        for prio, elems in self.list:
+            res += elems
+        return res
--- twisted/protocols/http.py.orig	2002-09-22 00:01:53.000000000 +0200
+++ twisted/protocols/http.py	2002-09-22 00:42:16.000000000 +0200
@@ -36,7 +36,7 @@
 
 # twisted imports
 from twisted.internet import interfaces, reactor, protocol
-from twisted.python import log
+from twisted.python import log, priorityqueue
 
 
 protocol_version = "HTTP/1.1"
@@ -226,7 +226,15 @@
     return rest[:length], rest[length+2:]
 
 
-
+def qualityComparison(x, y):
+    """ Compares quality values (as in accept-language) """
+    if x == y:
+        return 0
+    if float(x) > float(y):
+        return 1
+    else:
+        return -1
+        
 class StringTransport:
     """
     I am a StringIO wrapper that conforms for the transport API. I support
@@ -383,7 +391,31 @@
                     self.received_cookies[k] = v
                 except ValueError:
                     pass
-    
+
+    def _parse_priorities(line):
+        priorities = priorityqueue.PriorityQueue(qualityComparison)
+        i = line.find(';q=0.')
+        if i != -1:
+            while i != -1:
+                j = line.find(',', i)
+                if j == -1:
+                    prio = line[i+3:]
+                else:
+                    prio = line[i+3:j]
+                priorities.add_elements(prio, line[1:i].split(','))
+                line = line[j:]
+                i = line.find(';q=0.')
+        else:
+            priorities.add_elements("1.0", line.split(','))
+        return priorities
+
+    def parseHeaders(self):
+        for header in ["accept, accept-language"]:
+            data = self.getHeader("accept")
+            if data:
+                self.setHeader(header, self._parse_priorities(accept))
+
+        
     def handleContentChunk(self, data):
         """Write a chunk of data."""
         self.content.write(data)
@@ -746,9 +778,10 @@
     def allHeadersReceived(self):
         req = self.requests[-1]
         req.parseCookies()
+        req.parseHeaders()
         self.persistent = self.checkPersistence(req, self.__version)
         req.gotLength(self.length)
-    
+
     def checkPersistence(self, request, version):
         """Check if the channel should close or not."""
         connection = request.getHeader('connection')

From acapnotic at twistedmatrix.com  Sat Sep 21 19:03:26 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 21 Sep 2002 16:03:26 -0700
Subject: [Twisted-Python] CVSToys 0.9.0
Message-ID: <1032649410.14648.185.camel@troglodyte.funhouse>

Ok, due to popular demand, I'm making a release of CVSToys.  Download
the tarball at 

http://twistedmatrix.com/users/acapnotic/wares/code/CVSToys/CVSToys-0.9.0.tar.bz2

homepage is at

http://twistedmatrix.com/users/acapnotic/wares/code/CVSToys/

I'm not making a widespread announcement at this time for several
reasons.

1) There are bugs that need to be fixed before the masses get their
hands on this, or they may kill me.

2) I'd like to see Twisted 1.0 released first, for the sanity of both
myself and the users.  I need to know stuff like "is internet..Process
going to keep changing?" as well as what I should expect from the PB
interface in the 1.0 series.

Share and enjoy,

 - Kevin

-------------- next part --------------
Metadata-Version: 1.0
Name: CVSToys
Version: 0.9.0
Summary: Commit notification and other CVS companions.
Home-page: http://twistedmatrix.com/users/acapnotic/wares/code/CVSToys/
Author: Kevin Turner
Author-email: acapnotic at twistedmatrix.com
License: BSD
Description: CVSToys is a collection of companion tools for the Concurrent Versions
        System, better known as CVS.  The biggest best and only toy we've got
        is Fresh CVS, a commit monitoring daemon which can keep a mirror of
        the repository or checked-out working copy up to date, and send out
        notifications by e-mail, on the web as HTML or RSS, or to a
        twisted.words chat service (bridgeable to IRC).
        
Platform: Linux
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020921/2ec58c12/attachment.pgp 

From radix at twistedmatrix.com  Sun Sep 22 03:34:40 2002
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 22 Sep 2002 03:34:40 -0400
Subject: [Twisted-Python] Twisted 0.99.1rc1 and release-twisted
Message-ID: <20020922073440.GA30662@radii>

Hi all, Twisted 0.99.1rc1 is now available on the website. But this
message is mostly about the release process. :)

Here's the process I went through to make the latest 0.99.2rc1
release.  At the end I have some notes on new features I plan on
implementing, eventually.

cd ~/Projects/Twisted
cvs up
cd ~/tmp
rm -rf *
~/Projects/Twisted/admin/release-twisted --oldver 0.99.2alpha3 -v 0.99.2rc1 --release=/twisted/Releases --checkout --upver --tag --exp --dist --docs --balls --rel --deb --debi
#fix a couple of bugs in r-t, re-run a couple of times
sudo vim /etc/apt/sources.list #and uncomment moshez' snapshot line
sudo apt-get update
sudo apt-get upgrade
cd /var/www
sudo 'sh -c kill `cat twistd.pid`'
sudo ./start-twisted.sh web-shutdown.tap
sudo tail twistd.log

edit WebSite/twistedmatrix.com/index: s/0.99.2alpha3/0.99.2rc1/
edit products/download.html, change from "alpha" to "RC", and change all 
     alpha2s to rc1s
edit news.html, add release announcement.
cvs commit 'dat shit

on pyr: cd /var/www/WebSite/twistedmatrix.com

#note, I didn't have to `cvs update' here, some kind soul made that
#automatically happen on commit

~/Projects/Twisted/admin/generate-domdocs --docsdir . --template template.tpl -e None 

#oops! missed an `alpha2' in download.html. :P fixed that and re-ran 
#generate-domdocs

Test that the domtemplate document still works and that documentation
API-ref links still work

That seems to be it. Mind you this didn't include the stuff about
actually updating the API refs and whatnot on the website, that only
happens in Final releases.

So, now for the ideas, in ascending order of ease-of-implementation

1) have r-t update the QOTR, add a ChangeLog entry for releasing, and
add a news entry on the website

2) make the website a web-app, so I (or even r-t) don't have to do
anything at all to "deploy" a new release; it'll just detect
it. (extra cookie if generate-domdocs is made into a generic "static
DOMTemplate Processor" to accomplish this; then our website can still
be static files)

3) give release-twisted a web interface.

4) Make a PB application for running unit tests, and have various
developers run this on their workstations, hopefully across many
various platforms, and have r-t check and make sure that they all run
smoothly before releasing.

-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/radix.twistd/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020922/64778367/attachment.pgp 

From twisted at moshez.org  Sun Sep 22 04:28:18 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 22 Sep 2002 08:28:18 -0000
Subject: [Twisted-Python] Twisted 0.99.1rc1 and release-twisted
In-Reply-To: <20020922073440.GA30662@radii>
References: <20020922073440.GA30662@radii>
Message-ID: <20020922082818.28807.qmail@green.zadka.com>

On Sun, 22 Sep 2002, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> 1) have r-t update the QOTR

That's needed for final releases only anyway...

5) have r-t auto-upload to sf.net and set up us the release




From mattam at netcourrier.com  Sun Sep 22 08:46:45 2002
From: mattam at netcourrier.com (mattam at netcourrier.com)
Date: Sun, 22 Sep 2002 14:46:45 +0200
Subject: [Twisted-Python] [PATCH] Accept and accept-language parsing
In-Reply-To: <20020921232343.GF493@Mat.Home>
References: <20020921232343.GF493@Mat.Home>
Message-ID: <20020922124645.GH493@Mat.Home>

On Sun, Sep 22, 2002 at 01:23:43AM +0200, mattam at netcourrier.com wrote: 
> Hi twisters,
> 
> 	here's a patch for parsing accept and accept-language HTTP headers.
> 	They are contained in a priority queue which can also be
> 	retrieved as a list. Perhaps some other methods could be
> 	convenient, but as it's late I let you advise which. I added a
> 	parseHeaders() method for Request which is called just after 
> 	parseCookies() in HTTPChannel.allHeadersReceived.
> 
> 
> Bye!
> 

Here's a corriged patch, ready for inclusion (diff with http.py v1.41,
-p0).

--
M at t 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: accept.patch.gz
Type: application/x-gunzip
Size: 1970 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020922/c7bcff7c/attachment.bin 

From glyph at twistedmatrix.com  Sun Sep 22 08:38:31 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 22 Sep 2002 07:38:31 -0500 (CDT)
Subject: [Twisted-Python] [PATCH] Accept and accept-language parsing
In-Reply-To: <20020922124645.GH493@Mat.Home>
References: <20020921232343.GF493@Mat.Home>
	<20020922124645.GH493@Mat.Home>
Message-ID: <20020922.073831.133432554.glyph@twistedmatrix.com>

On Sun, 22 Sep 2002 14:46:45 +0200, <mattam at netcourrier.com> wrote:
> On Sun, Sep 22, 2002 at 01:23:43AM +0200, mattam at netcourrier.com wrote: 

> > 	here's a patch for parsing accept and accept-language HTTP headers.

> Here's a corriged patch, ready for inclusion (diff with http.py v1.41,
> -p0).

Could you please provide some unit tests in this patch, both for the parsing of
accept-language and the priority queue itself?  That would provide some basic
documentation of the API as well.  Thanks!

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020922/5c841bdf/attachment.pgp 

From twisted at moshez.org  Sun Sep 22 11:48:38 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 22 Sep 2002 15:48:38 -0000
Subject: [Twisted-Python] twisted/internet/app.py
Message-ID: <20020922154838.32763.qmail@green.zadka.com>

I recommend to keep using 1.61 for 0.99.2final rather than 1.62.
The change does not solve any bugs, as far as I can see, and this would
let us avoid an rc2





From acapnotic at twistedmatrix.com  Sun Sep 22 15:41:46 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 22 Sep 2002 12:41:46 -0700
Subject: [Twisted-Python] web.server.Request.process except cred.util.Unauthorized
Message-ID: <1032723708.14633.199.camel@troglodyte.funhouse>

A quick grep through the Twisted source doesn't show any web-related
places this is likely to get raised. It does reveal the fact that there
are two cred Unauthorized exception classes, one defined in cred.util
and the other in cred.error.  Commenting out the whole 'except
util.Unauthorized' block in server.Request.process doesn't cause any
tests to fail.

So I'd like to know:

When are we expecting util.Unauthorized to get raised?  From the
site.getResourceFor(req) call, or the resrc.render(), both, or neither? 

Can we get rid of one of the two cred Unauthorized exceptions?

Regards,

 - Kevin




From exarkun at meson.dyndns.org  Sun Sep 22 19:58:06 2002
From: exarkun at meson.dyndns.org (Jp Calderone)
Date: Sun, 22 Sep 2002 19:58:06 -0400
Subject: [Twisted-Python] twisted/internet/app.py
In-Reply-To: <20020922154838.32763.qmail@green.zadka.com>
References: <20020922154838.32763.qmail@green.zadka.com>
Message-ID: <20020922235806.GA18429@meson.dyndns.org>

On Sun, Sep 22, 2002 at 03:48:38PM -0000, Moshe Zadka wrote:
> I recommend to keep using 1.61 for 0.99.2final rather than 1.62.
> The change does not solve any bugs, as far as I can see, and this would
> let us avoid an rc2
> 

  AES.block_size is 16 (RC5 (the original cipher the code used) used a
block_size of 8), so the change solves the bug of encrypt() not working 7
times out of 8.  I don't think anyone other than myself is actually using
encryption support, but it'd probably be bad to release it broken anyway ;)

  Jp

--
 7:00pm up 124 days, 19:54, 3 users, load average: 0.25, 0.24, 0.19
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 237 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020922/9eda49ec/attachment.pgp 

From jml at mumak.net  Tue Sep 17 19:24:34 2002
From: jml at mumak.net (Jonathan Lange)
Date: 18 Sep 2002 09:24:34 +1000
Subject: [Twisted-Python] row.html howto XHTML compliance [PATCH]
Message-ID: <1032305079.5371.3.camel@sting>

G'day all,

I noticed that admin/generate-domdocs failed on row.html, so I patched
it to be a well-formed XHTML document (and to have lowercase tags ;)

Patch below!

Cheers,
jml

Index: doc/howto/row.html
===================================================================
RCS file: /cvs/Twisted/doc/howto/row.html,v
retrieving revision 1.9
diff -r1.9 row.html
1,5c1,9
< <HTML>
< <HEAD>
<   <TITLE>Twisted Enterprise Row Objects</TITLE>
< </HEAD>
< <BODY>
---
> <?xml version="1.0"?>
> <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
>     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
> 
> <html xmlns="http://www.w3.org/1999/xhtml">
> <head>
>   <title>Twisted Enterprise Row Objects</title>
> </head>
> <body>
7c11
< <H1>Twisted Enterprise Row Objects</H1>
---
> <h1>Twisted Enterprise Row Objects</h1>
9c13
< <P>The <CODE>twisted.enterprise.row</CODE> module is a method
---
> <p>The <code>twisted.enterprise.row</code> module is a method
11c15
< tables. It has two components: the <CODE>RowObject</CODE> class
---
> tables. It has two components: the <code>RowObject</code> class
13c17
< code interacts with, and the <CODE>DBReflector</CODE> which generates
---
> code interacts with, and the <code>DBReflector</code> which generates
15c19
< deletes against the database.</P>
---
> deletes against the database.</p>
17c21
< <P>The row module is intended for applications such as on-line
---
> <p>The row module is intended for applications such as on-line
24c28
< to an existing python application.</P>
---
> to an existing python application.</p>
26c30
< <P>Currently, the row module requires the use of PostgreSQL.</P>
---
> <p>Currently, the row module requires the use of PostgreSQL.</p>
28c32
< <H2>Class Definitions</H2>
---
> <h2>Class Definitions</h2>
30,31c34,35
< <P>To interface to relational database tables, the developer must
< create a class derived from the
<CODE>twisted.enterprise.row.RowObject</CODE>
---
> <p>To interface to relational database tables, the developer must
> create a class derived from the
<code>twisted.enterprise.row.RowObject</code>
35c39
< are:</P>
---
> are:</p>
37,42c41,46
< <UL>
<   <LI>rowColumns - list of the columns in the table with the correct
<   case
<   <LI>rowKeyColumns - list of key columns in form: [(columnName,
<   typeName)]
<   <LI>rowTableName - the name of the database table
---
> <ul>
>   <li>rowColumns - list of the columns in the table with the correct
>   case</li>
>   <li>rowKeyColumns - list of key columns in form: [(columnName,
>   typeName)]</li>
>   <li>rowTableName - the name of the database table</li>
45c49
< <P>There are also two optional class attributes that can be
specified:</P>
---
> <p>There are also two optional class attributes that can be
specified:</p>
47,48c51,52
< <UL>
<   <LI>rowForeignKeys - list of foreign keys to other database tables
---
> <ul>
>   <li>rowForeignKeys - list of foreign keys to other database tables
50,53c54,57
<   autoLoad]
<   <LI>rowFactoryMethod - a method that creates instances of this
<   class
< </UL>
---
>   autoLoad]</li>
>   <li>rowFactoryMethod - a method that creates instances of this
>   class</li>
> </ul>
55c59
< <P>For example:</P>
---
> <p>For example:</p>
57c61
< <PRE>
---
> <pre class="python">
62c66,67
<     rowFactoryMethod = [myRowFactory]</PRE>
---
>     rowFactoryMethod = [myRowFactory]
> </pre>
64,65c69,70
< <P>The items in the rowColumns list will become data members of
< classes of this type when they are created by the DBReflector.</P>
---
> <p>The items in the rowColumns list will become data members of
> classes of this type when they are created by the DBReflector.</p>
67c72
< <H2>Initialization</H2>
---
> <h2>Initialization</h2>
69c74
< <P>The initialization phase builds the SQL for the database
interactions.
---
> <p>The initialization phase builds the SQL for the database
interactions.
73c78
< are passed to the DBReflector when it is created.</P>
---
> are passed to the DBReflector when it is created.</p>
75c80
< <P>An example class list for the RoomRow class we specified above:</P>
---
> <p>An example class list for the RoomRow class we specified above:</p>
77c82
< <PRE>
---
> <pre class="python">
82c87,88
< reflector = row.DBReflector( dbpool, [RoomRow], runTests )</PRE>
---
> reflector = row.DBReflector( dbpool, [RoomRow], runTests )
> </pre>
84c90
< <H2>Creating Row Objects</H2>
---
> <h2>Creating Row Objects</h2>
86,87c92,93
< <P>There are two methods of creating RowObjects - loading from
< the database, and creating a new instance ready to be inserted.</P>
---
> <p>There are two methods of creating RowObjects - loading from
> the database, and creating a new instance ready to be inserted.</p>
89c95
< <P>To load rows from the database and create RowObject instances
---
> <p>To load rows from the database and create RowObject instances
94c100
< example:</P>
---
> example:</p>
96c102
< <PRE>
---
> <pre class="python">
101c107,108
< refector.loadObjectsFrom(&quot;testrooms&quot;,
whereClause=[(&quot;id&quot;, reflector.EQUAL,
5)]).addCallback(gotRooms)</PRE>
---
> refector.loadObjectsFrom(&quot;testrooms&quot;,
whereClause=[(&quot;id&quot;, reflector.EQUAL,
5)]).addCallback(gotRooms)
> </pre>
103c110
< <P>For more advanced RowObject construction, loadObjectsFrom may
---
> <p>For more advanced RowObject construction, loadObjectsFrom may
110c117
< before exposing the data to user code. An example factory method:</P>
---
> before exposing the data to user code. An example factory method:</p>
112c119
< <PRE>
---
> <pre class="python">
116c123
<     return newRoom</PRE>
---
>     return newRoom</pre>
118c125
< <P>The last method of creating a row object is for new instances
---
> <p>The last method of creating a row object is for new instances
122c129
< method of the DBReflector. For example:</P>
---
> method of the DBReflector. For example:</p>
124c131
< <PRE>
---
> <pre class="python">
134c141,142
<     reflector.insertRow(newRoom).addCallback(onInsert)</PRE>
---
>     reflector.insertRow(newRoom).addCallback(onInsert)
> </pre>
136c144
< <P>This will insert a new row into the database table for this
---
> <p>This will insert a new row into the database table for this
141c149
< from being changed by mistake.</P>
---
> from being changed by mistake.</p>
143d150
< <P>&nbsp;</P>
145c152
< <H2>Relationships Between Tables</H2>
---
> <h2>Relationships Between Tables</h2>
147,154c154,162
< <P>Specifying a foreign key for a RowClass creates a relationship
< between database tables. When <I>loadObjectsFrom</I> is called for a
< table, it will automatically load all the children rows for the rows
< from the specified table. The child rows will be put into a list
< member variable of the rowObject instance with the name "childRows" or
< if a <i>containerMethod</i> is specified for the foreign key
< relationship, that method will be called on the parent row object for
< each row that is being added to it as a child.</P>
---
> <p>Specifying a foreign key for a RowClass creates a relationship
> between database tables. When <code
> class="python">loadObjectsFrom</code> is called for a table, it will
> automatically load all the children rows for the rows from the
specified
> table. The child rows will be put into a list member variable of the
> rowObject instance with the name "childRows" or if a
> <i>containerMethod</i> is specified for the foreign key relationship,
> that method will be called on the parent row object for each row that
is
> being added to it as a child.</p>
156c164
< <P>The <i>autoLoad</i> member of the foreign key definition is a flag
---
> <p>The <i>autoLoad</i> member of the foreign key definition is a flag
158c166
< relationship when a parent row is loaded.
---
> relationship when a parent row is loaded.</p>
160c168
< <H2>Duplicate Row Objects</H2>
---
> <h2>Duplicate Row Objects</h2>
162c170
< <P>If a reflector tries to load an instance of a rowObject that
---
> <p>If a reflector tries to load an instance of a rowObject that
166c174
< unique keys for this purpose.</P>
---
> unique keys for this purpose.</p>
168c176
< <H2>Updating Row Objects</H2>
---
> <h2>Updating Row Objects</h2>
170c178
< <P>RowObjects have a &quot;dirty&quot; member attribute that is
---
> <p>RowObjects have a &quot;dirty&quot; member attribute that is
176c184
< (be sure to call the base class setDirty though!).</P>
---
> (be sure to call the base class setDirty though!).</p>
178c186
< <P>When it is determined that a RowObject instance is dirty and
---
> <p>When it is determined that a RowObject instance is dirty and
180c188
< to the &quot;updateRow&quot; method of the DBReflector. For
example:</P>
---
> to the &quot;updateRow&quot; method of the DBReflector. For
example:</p>
182,183c190,192
< <PRE>
<     reflector.updateRow(room).addCallback(onUpdated)</PRE>
---
> <pre class="python">
> reflector.updateRow(room).addCallback(onUpdated)\
> </pre>
185c194
< <P>For more complex behavior, the reflector can generate the SQL
---
> <p>For more complex behavior, the reflector can generate the SQL
187c196
< for batching up multiple updates into single requests. For
example:</P>
---
> for batching up multiple updates into single requests. For
example:</p>
189,190c198,200
< <PRE>
<     updateSQL = reflector.updateRowSQL(room)</PRE>
---
> <pre class="python">
> updateSQL = reflector.updateRowSQL(room)\
> </pre>
192c202
< <H2>Deleting Row Objects</H2>
---
> <h2>Deleting Row Objects</h2>
194c204
< <P>To delete a row from a database pass the RowObject instance
---
> <p>To delete a row from a database pass the RowObject instance
196,197c206,207
< Deleting the python Rowobject instance does <EM>not</EM> automatically
< delete the row from the database. For example:</P>
---
> Deleting the python Rowobject instance does <em>not</em> automatically
> delete the row from the database. For example:</p>
199,200c209,211
< <PRE>
<     reflector.deleteRow(room)</PRE>
---
> <pre class="python">
> reflector.deleteRow(room)
> </pre>
202,203c213,214
< </BODY>
< </HTML>
---
> </body>
> </html>






From jml at mumak.net  Tue Sep 17 19:37:17 2002
From: jml at mumak.net (Jonathan Lange)
Date: 18 Sep 2002 09:37:17 +1000
Subject: [Twisted-Python] row.html howto XHTML compliance [PATCH]
In-Reply-To: <1032305079.5371.3.camel@sting>
References: <1032305079.5371.3.camel@sting>
Message-ID: <1032305839.5642.5.camel@sting>

On Wed, 2002-09-18 at 09:24, Jonathan Lange wrote:
> G'day all,
> 
> I noticed that admin/generate-domdocs failed on row.html, so I patched
> it to be a well-formed XHTML document (and to have lowercase tags ;)
> 
> Patch below!
> 

Was asked by spiv to resend this as a unidiff.
Here it is:

Index: doc/howto/row.html
===================================================================
RCS file: /cvs/Twisted/doc/howto/row.html,v
retrieving revision 1.9
diff -u -r1.9 row.html
--- doc/howto/row.html	23 Sep 2002 00:21:53 -0000	1.9
+++ doc/howto/row.html	23 Sep 2002 11:26:03 -0000
@@ -1,127 +1,134 @@
-<HTML>
-<HEAD>
-  <TITLE>Twisted Enterprise Row Objects</TITLE>
-</HEAD>
-<BODY>
+<?xml version="1.0"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
+    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head>
+  <title>Twisted Enterprise Row Objects</title>
+</head>
+<body>
 
-<H1>Twisted Enterprise Row Objects</H1>
+<h1>Twisted Enterprise Row Objects</h1>
 
-<P>The <CODE>twisted.enterprise.row</CODE> module is a method
+<p>The <code>twisted.enterprise.row</code> module is a method
 of interfacing simple python objects with rows in relational database
-tables. It has two components: the <CODE>RowObject</CODE> class
+tables. It has two components: the <code>RowObject</code> class
 which developers sub-class for each relational table that their
-code interacts with, and the <CODE>DBReflector</CODE> which generates
+code interacts with, and the <code>DBReflector</code> which generates
 and contains the SQL to perform updates, inserts, queries and
-deletes against the database.</P>
+deletes against the database.</p>
 
-<P>The row module is intended for applications such as on-line
+<p>The row module is intended for applications such as on-line
 games, and web-site that require a back-end database interface.
 It is not a full functioned object-relational mapper for python
 - it deals best with simple data types structured in ways that
 can be easily represented in a relational database. It is well
 suited to building a python interface to an existing relational
 database, and slightly less suited to added database persistance
-to an existing python application.</P>
+to an existing python application.</p>
 
-<P>Currently, the row module requires the use of PostgreSQL.</P>
+<p>Currently, the row module requires the use of PostgreSQL.</p>
 
-<H2>Class Definitions</H2>
+<h2>Class Definitions</h2>
 
-<P>To interface to relational database tables, the developer must
-create a class derived from the
<CODE>twisted.enterprise.row.RowObject</CODE>
+<p>To interface to relational database tables, the developer must
+create a class derived from the
<code>twisted.enterprise.row.RowObject</code>
 class for each table. These derived classes must define a number
 of class attributes which contains information about the database
 table that class corresponds to. The required class attributes
-are:</P>
+are:</p>
 
-<UL>
-  <LI>rowColumns - list of the columns in the table with the correct
-  case
-  <LI>rowKeyColumns - list of key columns in form: [(columnName,
-  typeName)]
-  <LI>rowTableName - the name of the database table
+<ul>
+  <li>rowColumns - list of the columns in the table with the correct
+  case</li>
+  <li>rowKeyColumns - list of key columns in form: [(columnName,
+  typeName)]</li>
+  <li>rowTableName - the name of the database table</li>
 </UL>
 
-<P>There are also two optional class attributes that can be
specified:</P>
+<p>There are also two optional class attributes that can be
specified:</p>
 
-<UL>
-  <LI>rowForeignKeys - list of foreign keys to other database tables
+<ul>
+  <li>rowForeignKeys - list of foreign keys to other database tables
   in the form: [(tableName, [(columnName, columnType)],
containerMethodName,
-  autoLoad]
-  <LI>rowFactoryMethod - a method that creates instances of this
-  class
-</UL>
+  autoLoad]</li>
+  <li>rowFactoryMethod - a method that creates instances of this
+  class</li>
+</ul>
 
-<P>For example:</P>
+<p>For example:</p>
 
-<PRE>
+<pre class="python">
 class RoomRow(row.RowObject):
     rowColumns       =
[&quot;roomId&quot;,&quot;town_id&quot;,&quot;name&quot;,&quot;owner&quot;,&quot;posx&quot;,&quot;posy&quot;,&quot;width&quot;,&quot;height&quot;]
     rowKeyColumns    = [(&quot;id&quot;, &quot;int4&quot;)]
     rowTableName     = &quot;testrooms&quot;
-    rowFactoryMethod = [myRowFactory]</PRE>
+    rowFactoryMethod = [myRowFactory]
+</pre>
 
-<P>The items in the rowColumns list will become data members of
-classes of this type when they are created by the DBReflector.</P>
+<p>The items in the rowColumns list will become data members of
+classes of this type when they are created by the DBReflector.</p>
 
-<H2>Initialization</H2>
+<h2>Initialization</h2>
 
-<P>The initialization phase builds the SQL for the database
interactions.
+<p>The initialization phase builds the SQL for the database
interactions.
 It uses the system catalogs of the database to do this, but requires
 some basic information to get started. The class attributes of
 the classes derived from RowClass are used for this. Those clases
-are passed to the DBReflector when it is created.</P>
+are passed to the DBReflector when it is created.</p>
 
-<P>An example class list for the RoomRow class we specified above:</P>
+<p>An example class list for the RoomRow class we specified above:</p>
 
-<PRE>
+<pre class="python">
 def runTests(result):
     print &quot;Done initializing&quot;
 
 dbpool = adbapi.ConnectionPool(&quot;pyPgSQL.PgSQL&quot;)
-reflector = row.DBReflector( dbpool, [RoomRow], runTests )</PRE>
+reflector = row.DBReflector( dbpool, [RoomRow], runTests )
+</pre>
 
-<H2>Creating Row Objects</H2>
+<h2>Creating Row Objects</h2>
 
-<P>There are two methods of creating RowObjects - loading from
-the database, and creating a new instance ready to be inserted.</P>
+<p>There are two methods of creating RowObjects - loading from
+the database, and creating a new instance ready to be inserted.</p>
 
-<P>To load rows from the database and create RowObject instances
+<p>To load rows from the database and create RowObject instances
 for each of the rows, use the loadObjectsFrom method of the Reflector.
 This takes a tableName, an optional &quot;user data&quot; parameter,
 and an optional &quot;where clause&quot;. The where clause may
 be omitted which will retrieve all the rows from the table. For
-example:</P>
+example:</p>
 
-<PRE>
+<pre class="python">
 def gotRooms(rooms):
     for room in rooms:
         print &quot;Got room:&quot;, room.id
 
-refector.loadObjectsFrom(&quot;testrooms&quot;,
whereClause=[(&quot;id&quot;, reflector.EQUAL,
5)]).addCallback(gotRooms)</PRE>
+refector.loadObjectsFrom(&quot;testrooms&quot;,
whereClause=[(&quot;id&quot;, reflector.EQUAL,
5)]).addCallback(gotRooms)
+</pre>
 
-<P>For more advanced RowObject construction, loadObjectsFrom may
+<p>For more advanced RowObject construction, loadObjectsFrom may
 use a factoryMethod that was specified as a class attribute for
 the RowClass derived class. This method will be called for each
 of the rows with the class object, the userData parameter, and
 a dictionary of data from the database keyed by column name. This
 factory method should return a fully populated RowObject instance
 and may be used to do pre-processing, lookups, and data transformations
-before exposing the data to user code. An example factory method:</P>
+before exposing the data to user code. An example factory method:</p>
 
-<PRE>
+<pre class="python">
 def testRoomFactory(roomClass, userData, kw):
     newRoom = roomClass(userData)
     newRoom.__dict__.update(kw)
-    return newRoom</PRE>
+    return newRoom</pre>
 
-<P>The last method of creating a row object is for new instances
+<p>The last method of creating a row object is for new instances
 that do not already exist in the database table. In this case,
 create a new instance and assign its primary key attributes and
 all of its member data attributes, then pass it to the
&quot;insertRow&quot;
-method of the DBReflector. For example:</P>
+method of the DBReflector. For example:</p>
 
-<PRE>
+<pre class="python">
     newRoom = RoomRow()
     newRoom.assignKeyAttr(&quot;roomId&quot;, 11)
     newRoom.town_id = 20
@@ -131,73 +138,77 @@
     newRoom.posy = 100
     newRoom.width = 15
     newRoom.height = 20
-    reflector.insertRow(newRoom).addCallback(onInsert)</PRE>
+    reflector.insertRow(newRoom).addCallback(onInsert)
+</pre>
 
-<P>This will insert a new row into the database table for this
+<p>This will insert a new row into the database table for this
 new RowObject instance. Note that the &quot;assignKeyAttr&quot;
 method must be used to set primary key attributes - regular attribute
 assignment of a primary key attribute of a rowObject will raise
 an exception. This prevents the database identity of RowObject
-from being changed by mistake.</P>
+from being changed by mistake.</p>
 
-<P>&nbsp;</P>
 
-<H2>Relationships Between Tables</H2>
+<h2>Relationships Between Tables</h2>
 
-<P>Specifying a foreign key for a RowClass creates a relationship
-between database tables. When <I>loadObjectsFrom</I> is called for a
-table, it will automatically load all the children rows for the rows
-from the specified table. The child rows will be put into a list
-member variable of the rowObject instance with the name "childRows" or
-if a <i>containerMethod</i> is specified for the foreign key
-relationship, that method will be called on the parent row object for
-each row that is being added to it as a child.</P>
+<p>Specifying a foreign key for a RowClass creates a relationship
+between database tables. When <code
+class="python">loadObjectsFrom</code> is called for a table, it will
+automatically load all the children rows for the rows from the
specified
+table. The child rows will be put into a list member variable of the
+rowObject instance with the name "childRows" or if a
+<i>containerMethod</i> is specified for the foreign key relationship,
+that method will be called on the parent row object for each row that
is
+being added to it as a child.</p>
 
-<P>The <i>autoLoad</i> member of the foreign key definition is a flag
+<p>The <i>autoLoad</i> member of the foreign key definition is a flag
 that specifies whether child rows should be auto-loaded for that
-relationship when a parent row is loaded.
+relationship when a parent row is loaded.</p>
 
-<H2>Duplicate Row Objects</H2>
+<h2>Duplicate Row Objects</h2>
 
-<P>If a reflector tries to load an instance of a rowObject that
+<p>If a reflector tries to load an instance of a rowObject that
 is already loaded, it will return a reference to the existing
 rowObject rather than creating a new instance. The reflector maintains
 a cache of weak references to all loaded row objects by their
-unique keys for this purpose.</P>
+unique keys for this purpose.</p>
 
-<H2>Updating Row Objects</H2>
+<h2>Updating Row Objects</h2>
 
-<P>RowObjects have a &quot;dirty&quot; member attribute that is
+<p>RowObjects have a &quot;dirty&quot; member attribute that is
 set to 1 when any of the member attributes of the instance that
 map to database columns are changed. This dirty flag can be used
 to tell when RowObjects need to be updated back to the database.
 In addition, the &quot;setDirty&quot; method can be overridden
 to provide more complex automated handling such as dirty lists
-(be sure to call the base class setDirty though!).</P>
+(be sure to call the base class setDirty though!).</p>
 
-<P>When it is determined that a RowObject instance is dirty and
+<p>When it is determined that a RowObject instance is dirty and
 need to have its state updated into the database, pass that object
-to the &quot;updateRow&quot; method of the DBReflector. For
example:</P>
+to the &quot;updateRow&quot; method of the DBReflector. For
example:</p>
 
-<PRE>
-    reflector.updateRow(room).addCallback(onUpdated)</PRE>
+<pre class="python">
+reflector.updateRow(room).addCallback(onUpdated)\
+</pre>
 
-<P>For more complex behavior, the reflector can generate the SQL
+<p>For more complex behavior, the reflector can generate the SQL
 for the update but not perform the update. This can be useful
-for batching up multiple updates into single requests. For example:</P>
+for batching up multiple updates into single requests. For example:</p>
 
-<PRE>
-    updateSQL = reflector.updateRowSQL(room)</PRE>
+<pre class="python">
+updateSQL = reflector.updateRowSQL(room)\
+</pre>
 
-<H2>Deleting Row Objects</H2>
+<h2>Deleting Row Objects</h2>
 
-<P>To delete a row from a database pass the RowObject instance
+<p>To delete a row from a database pass the RowObject instance
 for that row to the DBReflector &quot;deleteRow&quot; method.
-Deleting the python Rowobject instance does <EM>not</EM> automatically
-delete the row from the database. For example:</P>
+Deleting the python Rowobject instance does <em>not</em> automatically
+delete the row from the database. For example:</p>
 
-<PRE>
-    reflector.deleteRow(room)</PRE>
+<pre class="python">
+reflector.deleteRow(room)
+</pre>
 
-</BODY>
-</HTML>
+</body>
+</html>








From bruce at cubik.org  Mon Sep 23 11:52:53 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Mon, 23 Sep 2002 09:52:53 -0600
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley consequence of non running
 of unit tests
References: <E17tVMn-00026x-00@pyramid.twistedmatrix.com>
Message-ID: <3D8F38D5.2060202@cubik.org>

Why don't we do similar for not even putting in basic doc comments when 
new API is added?

  - Bruce

moshez CVS wrote:
> Modified files:
> Twisted/doc/howto/coding-standard.html 1.10 1.11
> 
> Log message:
> Document the likley consequence of non running of unit tests
> 
> 
> ViewCVS links:
> http://twistedmatrix.com/users/jh.twistd/viewcvs/cgi/viewcvs.cgi/doc/howto/coding-standard.html.diff?r1=text&tr1=1.10&r2=text&tr2=1.11&cvsroot=Twisted
> 
> Index: Twisted/doc/howto/coding-standard.html
> diff -u Twisted/doc/howto/coding-standard.html:1.10 Twisted/doc/howto/coding-standard.html:1.11
> --- Twisted/doc/howto/coding-standard.html:1.10	Sat Sep 21 03:04:30 2002
> +++ Twisted/doc/howto/coding-standard.html	Mon Sep 23 08:43:17 2002
> @@ -45,8 +45,8 @@
>  unfortunate and unavoidable.  The acceptance tests are highly nonportable and
>  sometimes a pain to run, so this is pardonable.  Code which breaks the unit
>  tests in a way that you could have prevented by running them yourself, however,
> -may be grounds for anything from merciless taunting to revocation of cvs commit
> -privileges.</p>
> +may be grounds for anything from merciless taunting through revertion of
> +the breakage to revocation of cvs commit privileges.</p>




From boyd at strakt.com  Mon Sep 23 11:57:04 2002
From: boyd at strakt.com (Boyd Roberts)
Date: Mon, 23 Sep 2002 17:57:04 +0200
Subject: [Twisted-Python] Exceptions across connections
Message-ID: <3D8F39D0.3040105@strakt.com>

I'm not sure where to start looking for this (or if it's even a good idea)
but I was wondering about passing exceptions from servers to clients,
say in the case of an error, the error is returned as an exception.

Has anyone considered this?





From joeh at dai.ed.ac.uk  Mon Sep 23 12:24:29 2002
From: joeh at dai.ed.ac.uk (Joe Halliwell)
Date: Mon, 23 Sep 2002 17:24:29 +0100
Subject: [Twisted-Python] t.p.usage patch
In-Reply-To: <3D8F39D0.3040105@strakt.com>
References: <3D8F39D0.3040105@strakt.com>
Message-ID: <200209231724.30126.joeh@dai.ed.ac.uk>

Hi,

Quick patch for t.p.usage to (self-)document the builtin "--help" flag.

Cheers,
Joe

*** usage.py    Mon Sep 23 17:12:53 2002
--- usage.py.patched    Mon Sep 23 17:20:35 2002
*************** class Options(UserDict.UserDict):
*** 149,154 ****
--- 149,155 ----
              raise AttributeError("%s instance has no attribute '%s'" % 
(self.__class__, attr))

      def opt_help(self):
+         """Display this help and exit."""
          print self.__str__()
          sys.exit(0)





From twisted at itamarst.org  Mon Sep 23 12:57:58 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 23 Sep 2002 12:57:58 -0400
Subject: [Twisted-Python] Exceptions across connections
References: <3D8F39D0.3040105@strakt.com>
Message-ID: <3D8F4816.5070600@itamarst.org>

Boyd Roberts wrote:

> I'm not sure where to start looking for this (or if it's even a good idea)
> but I was wondering about passing exceptions from servers to clients,
> say in the case of an error, the error is returned as an exception.

Persective Broker's Failure support does exactly that. Should even work 
cross-language, though I have yet to implement Failures for PB Java.

See twisted.python.failure - a wrapper for exceptions that makes them usable 
in a callback-oriented context (e.g. Deferreds), and the examples in 
twisted.test.test_pbfailure.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
Available for Python, Twisted, Zope and Java consulting




From twisted at moshez.org  Mon Sep 23 13:07:51 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 23 Sep 2002 17:07:51 -0000
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley consequence of non running
 of unit tests
In-Reply-To: <3D8F38D5.2060202@cubik.org>
References: <3D8F38D5.2060202@cubik.org>, <E17tVMn-00026x-00@pyramid.twistedmatrix.com>
Message-ID: <20020923170751.21252.qmail@green.zadka.com>

On Mon, 23 Sep 2002, Bruce Mitchener <bruce at cubik.org> wrote:

> Why don't we do similar for not even putting in basic doc comments when 
> new API is added?

Because it would be stupid.




From twisted at moshez.org  Mon Sep 23 13:08:53 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 23 Sep 2002 17:08:53 -0000
Subject: [Twisted-Python] Exceptions across connections
In-Reply-To: <3D8F39D0.3040105@strakt.com>
References: <3D8F39D0.3040105@strakt.com>
Message-ID: <20020923170853.21274.qmail@green.zadka.com>

On Mon, 23 Sep 2002, Boyd Roberts <boyd at strakt.com> wrote:

> I'm not sure where to start looking for this (or if it's even a good idea)
> but I was wondering about passing exceptions from servers to clients,
> say in the case of an error, the error is returned as an exception.

Exceptions are inherently synchrnous things, so it would not make sense
for Twisted.




From twisted at moshez.org  Mon Sep 23 13:26:29 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 23 Sep 2002 17:26:29 -0000
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley consequence of non running of unit tests
In-Reply-To: <3D8F38D5.2060202@cubik.org>
References: <3D8F38D5.2060202@cubik.org>, <E17tVMn-00026x-00@pyramid.twistedmatrix.com>
Message-ID: <20020923172629.21705.qmail@green.zadka.com>

On Mon, 23 Sep 2002 09:52:53 -0600, Bruce Mitchener <bruce at cubik.org> wrote:

> Why don't we do similar for not even putting in basic doc comments when 
> new API is added?

Starting with the password widget?

+class PasswordText(Input):
+    def initialize(self):
+        self['type'] = 'password'

I'm not seeing any API doc there.




From twisted at moshez.org  Mon Sep 23 13:29:31 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 23 Sep 2002 17:29:31 -0000
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley consequence of non running
 of unit tests
In-Reply-To: <3D8F38D5.2060202@cubik.org>
References: <3D8F38D5.2060202@cubik.org>, <E17tVMn-00026x-00@pyramid.twistedmatrix.com>
Message-ID: <20020923172931.21734.qmail@green.zadka.com>

On Mon, 23 Sep 2002, Bruce Mitchener <bruce at cubik.org> wrote:

> Why don't we do similar for not even putting in basic doc comments when 
> new API is added?

And continuing with 

+def getIfExists(node, nodeId):
+    return _get(node, nodeId)




From bruce at cubik.org  Mon Sep 23 13:38:26 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Mon, 23 Sep 2002 11:38:26 -0600
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley consequence
 of non running of unit tests
References: <3D8F38D5.2060202@cubik.org>, <E17tVMn-00026x-00@pyramid.twistedmatrix.com> <20020923170751.21252.qmail@green.zadka.com>
Message-ID: <3D8F5192.4090006@cubik.org>

Moshe Zadka wrote:
> On Mon, 23 Sep 2002, Bruce Mitchener <bruce at cubik.org> wrote:
> 
>>Why don't we do similar for not even putting in basic doc comments when 
>>new API is added?
> 
> Because it would be stupid.

Thanks for your well thought out feedback.  As (if) 1.0 approaches, it 
is more and more important that the state of the documentation improves, 
rather than continue in the current state or worsen.

Why should any new features be permissible without doc comments?

  - Bruce




From bruce at cubik.org  Mon Sep 23 13:38:33 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Mon, 23 Sep 2002 11:38:33 -0600
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley consequence
 of non running of unit tests
References: <3D8F38D5.2060202@cubik.org>, <E17tVMn-00026x-00@pyramid.twistedmatrix.com> <20020923172629.21705.qmail@green.zadka.com>
Message-ID: <3D8F5199.40108@cubik.org>

Moshe Zadka wrote:
> On Mon, 23 Sep 2002 09:52:53 -0600, Bruce Mitchener <bruce at cubik.org> wrote:
> 
>>Why don't we do similar for not even putting in basic doc comments when 
>>new API is added?
> 
> Starting with the password widget?
> 
> +class PasswordText(Input):
> +    def initialize(self):
> +        self['type'] = 'password'
> 
> I'm not seeing any API doc there.

Because I have patches in my tree that aren't checked in yet that add 
that documentation, along with docs for other parts of Woven, but 
Donovan and I have been discussing various changes to the widgets and 
how things work in that area.

  - Bruce




From twisted at moshez.org  Mon Sep 23 13:38:42 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 23 Sep 2002 17:38:42 -0000
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley consequence
 of non running of unit tests
In-Reply-To: <3D8F5199.40108@cubik.org>
References: <3D8F5199.40108@cubik.org>, <3D8F38D5.2060202@cubik.org>, <E17tVMn-00026x-00@pyramid.twistedmatrix.com> <20020923172629.21705.qmail@green.zadka.com>
Message-ID: <20020923173842.21836.qmail@green.zadka.com>

On Mon, 23 Sep 2002, Bruce Mitchener <bruce at cubik.org> wrote:

> Because I have patches in my tree that aren't checked in yet that add 
> that documentation, along with docs for other parts of Woven, but 
> Donovan and I have been discussing various changes to the widgets and 
> how things work in that area.

So you'd be fine with me reverting that until you have time to
check in a properly documented version?




From twisted at itamarst.org  Mon Sep 23 13:45:39 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 23 Sep 2002 13:45:39 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley consequence
 of non running of unit tests
References: <3D8F38D5.2060202@cubik.org>, <E17tVMn-00026x-00@pyramid.twistedmatrix.com> <20020923172629.21705.qmail@green.zadka.com> <3D8F5199.40108@cubik.org>
Message-ID: <3D8F5343.2080501@itamarst.org>

Bruce Mitchener wrote:

> Because I have patches in my tree that aren't checked in yet that add 
> that documentation, along with docs for other parts of Woven, but 
> Donovan and I have been discussing various changes to the widgets and 
> how things work in that area.

I rather tend towards your other opinion, that everything should have docs,
even if it will change. But this does show the problem with requiring docs 
for everything leading to reverting code - everyone always has a reason why 
they didn't need to in *this* case. Or they didn't have time or whatever.

Merciless taunting should be sufficient in most cases in solving this. 
Although I'm tending towards outright violence against whoever is 
responsible for twisted.python.reflect.refrump.




From bruce at cubik.org  Mon Sep 23 14:12:51 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Mon, 23 Sep 2002 12:12:51 -0600
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley consequence
 of non running of unit tests
References: <3D8F38D5.2060202@cubik.org>, <E17tVMn-00026x-00@pyramid.twistedmatrix.com> <20020923172629.21705.qmail@green.zadka.com> <3D8F5199.40108@cubik.org> <3D8F5343.2080501@itamarst.org>
Message-ID: <3D8F59A3.5080805@cubik.org>

Itamar,

Itamar Shtull-Trauring wrote:
> Bruce Mitchener wrote:
> 
>> Because I have patches in my tree that aren't checked in yet that add 
>> that documentation, along with docs for other parts of Woven, but 
>> Donovan and I have been discussing various changes to the widgets and 
>> how things work in that area.
> 
> I rather tend towards your other opinion, that everything should have docs,
> even if it will change. But this does show the problem with requiring 
> docs for everything leading to reverting code - everyone always has a 
> reason why they didn't need to in *this* case. Or they didn't have time 
> or whatever.

I'd meant to suggest that we at least have some sort of policy on 
documentation that is as clearly stated as that for running tests.  I 
don't really care what the policy is, as long as the situation improves 
past the state that Twisted is currently in.

> Merciless taunting should be sufficient in most cases in solving this. 
> Although I'm tending towards outright violence against whoever is 
> responsible for twisted.python.reflect.refrump.

Agreed. And you could argue that Moshez's rudeness encouraged me to 
finally check in a tiny subset of the docs that I have in my tree and 
that's a good thing.

It'd be nice to see some further constructive discussion of this.  We'll 
also need to update the coding standard to reflect the usage of epydoc 
rather than HappyDoc as well.  There are probably other updates that 
could and should be made as well.

For anyone who's missed it, the Epydoc site (http://epydoc.sf.net/) has 
been updated with some docs.  It should be seeing a 1.0 release as well 
fairly soon, so now's a good time to contribute patches for features 
that we'd like to see in corporated.

  - Bruce




From bruce at cubik.org  Mon Sep 23 14:54:22 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Mon, 23 Sep 2002 12:54:22 -0600
Subject: [Twisted-Python] thoughts on a reactor feature
Message-ID: <3D8F635E.6090506@cubik.org>

Hey all,

When working with Twisted, an important thing is to make sure that the 
reactor is running often enough and that tasks are not starving the 
reactor.  (This is obvious.)

I think it'd be nice if the reactor supported some interface for 
discovering, diagnosing and debugging long running tasks.  This could be 
done in a few different ways.

One would be have an interface to POSIX clocks and track the amount of 
time spent between calls out of reactor.run() and report anything that 
takes over a specified threshold of time to execute.

Another is to implement some sort of stack trace sampling where you 
periodically take a stack trace when a utility program is running and 
you've noted periods of long latency.

I know how to do that sort of thing in C or C++, but not in Python.  Is 
it possible? Efficient enough to actually do?  Would it need some native 
code for high enough resolution clocks?

Much of this would also provide the support needed for something like a 
top-for-reactor as well or to be able to print out all currently queued 
activities.

Information about what each thread in the thread pools are doing would 
be useful as well.  This would match the sort of functionality that DBs 
provide to diagnose their behaviors and what they're currently doing 
with each thread.

For some information on POSIX clocks, see this:

http://www.opengroup.org/onlinepubs/007904975/functions/clock_settime.html

The _POSIX_CPUTIME and _POSIX_THREAD_CPUTIME extensions are particularly 
useful for this sort of thing.  This would (obviously) have to have 
platform dependencies.  The information on the Linux glibc compliance 
with the various POSIX options can be found at:

http://people.redhat.com/drepper/posix-option-groups.html

So, for Linux people, this should all work.  Other platforms would 
either need to have similar support for the specifications, an alternate 
API with an interested implementor, or would need to just not offer the 
additional capability.

Thoughts? Better or simpler ways to do this?

  - Bruce




From glyph at twistedmatrix.com  Mon Sep 23 21:00:57 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 23 Sep 2002 20:00:57 -0500 (CDT)
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley
 consequence of non running of unit tests
In-Reply-To: <3D8F5343.2080501@itamarst.org>
References: <20020923172629.21705.qmail@green.zadka.com>
	<3D8F5199.40108@cubik.org>
	<3D8F5343.2080501@itamarst.org>
Message-ID: <20020923.200057.73383282.glyph@twistedmatrix.com>


On Mon, 23 Sep 2002 13:45:39 -0400, Itamar Shtull-Trauring <twisted at itamarst.org> wrote:
> Bruce Mitchener wrote:

> > Because I have patches in my tree that aren't checked in yet that add 
> > that documentation, along with docs for other parts of Woven, but 
> > Donovan and I have been discussing various changes to the widgets and 
> > how things work in that area.

This can be a valid excuse for code which doesn't have documentation.  In fact,
I prefer that upon its initial checkin, code be undocumented until a few of the
dev. team members can poke at it, see if it makes sense, and criticize any
serious flaws it has.

Twisted needs a lot more documentation, but in a platform where some parts are
stable and robust and others are growing and changing, lack of documentation of
some portions will keep people from using experimental code that really
shouldn't be supported in future versions.  (We can yell and scream all we like
about instability of some APIs, but if there is a complete, documented, but
buggy and poorly designed bit of code in the system, people will use it and
clamor when it is removed or the interface is fixed.)

> I rather tend towards your other opinion, that everything should have docs,
> even if it will change. But this does show the problem with requiring docs
> for everything leading to reverting code - everyone always has a reason why
> they didn't need to in *this* case. Or they didn't have time or whatever.

This is not entirely undesirable.  There are many, many bits of Twisted which I
am glad did not have documentation and died unceremonious deaths before they
had widespread exposure.  (Does anyone remember GLOOP?  No?  Good!)  I wish
twisted.web.widgets had stayed undocumented until Donovan had come along ;-).

Finally, even if a feature is complete and correct and will expect no changes,
keeping it out of the tree on the basis that there is no documentation is
counterproductive.  Such a feature could be documented after the fact, and
others using and learning it will often lead to better documentation than the
original author's specification would.  Code that breaks unit tests is in a
wholly different category.  Code that breaks unit tests means that the
functionality that someone else was already using is likely broken now.

In other words, code without docs moves us forward less than it might have.
Code without examples tests moves us backwards.

> Merciless taunting should be sufficient in most cases in solving this. 
> Although I'm tending towards outright violence against whoever is 
> responsible for twisted.python.reflect.refrump.

Man, you guys have _no_ sense of humor :-P.  Yes, that was just a leftover
function from an earlier attempt at rebuild(), intended for interactive use.
It was my fault, and it's gone now.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020923/6863cdbb/attachment.pgp 

From glyph at twistedmatrix.com  Mon Sep 23 21:07:47 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 23 Sep 2002 20:07:47 -0500 (CDT)
Subject: [Twisted-Python] thoughts on a reactor feature
In-Reply-To: <3D8F635E.6090506@cubik.org>
References: <3D8F635E.6090506@cubik.org>
Message-ID: <20020923.200747.121185519.glyph@twistedmatrix.com>

On Mon, 23 Sep 2002 12:54:22 -0600, Bruce Mitchener <bruce at cubik.org> wrote:

> One would be have an interface to POSIX clocks and track the amount of 
> time spent between calls out of reactor.run() and report anything that 
> takes over a specified threshold of time to execute.

If I understand your proposal correctly, I think this could be implemented
quite simply by writing a Python wrapper around the reactor, that would wrap
each protocol and protocol factory being passed to it in something that would
catch events and time their execution.  This should work for just about any
reactor.  With a few extra features, it might even be good for measuring their
differences.  Would you need a wrapper around POSIX clocks more robust than
time.clock()?

(I think this could also compare time.clock() to time.time() to see if
potentially blocking calls were being made.)

> Another is to implement some sort of stack trace sampling where you
> periodically take a stack trace when a utility program is running and you've
> noted periods of long latency.

This I don't know how to do; possibly it's doable with Python's
debugger/profiler hooks?  I'm not quite clear on how you do the "noting" -- is
this a message that the user sends to Twisted or is it something that the
profiler performs some heuristic to get?

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020923/8604d943/attachment.pgp 

From glyph at twistedmatrix.com  Mon Sep 23 21:12:09 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 23 Sep 2002 20:12:09 -0500 (CDT)
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley
 consequence of non running of unit tests
In-Reply-To: <3D8F59A3.5080805@cubik.org>
References: <3D8F5199.40108@cubik.org>
	<3D8F5343.2080501@itamarst.org>
	<3D8F59A3.5080805@cubik.org>
Message-ID: <20020923.201209.67506062.glyph@twistedmatrix.com>


On Mon, 23 Sep 2002 12:12:51 -0600, Bruce Mitchener <bruce at cubik.org> wrote:
> It'd be nice to see some further constructive discussion of this.  We'll 
> also need to update the coding standard to reflect the usage of epydoc 
> rather than HappyDoc as well.  There are probably other updates that 
> could and should be made as well.

I agree.  Where is epydoc's pseudo-structured-text format documented?  Does the
existing pipe-prefix convention for inline code samples still work?

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020923/829d79ba/attachment.pgp 

From glyph at twistedmatrix.com  Mon Sep 23 21:16:09 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 23 Sep 2002 20:16:09 -0500 (CDT)
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley
 consequence of non running of unit tests
In-Reply-To: <20020923.201209.67506062.glyph@twistedmatrix.com>
References: <3D8F5343.2080501@itamarst.org>
	<3D8F59A3.5080805@cubik.org>
	<20020923.201209.67506062.glyph@twistedmatrix.com>
Message-ID: <20020923.201609.51303125.glyph@twistedmatrix.com>

On Mon, 23 Sep 2002 20:12:09 -0500 (CDT), Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> On Mon, 23 Sep 2002 12:12:51 -0600, Bruce Mitchener <bruce at cubik.org> wrote:
> > It'd be nice to see some further constructive discussion of this.  We'll 
> > also need to update the coding standard to reflect the usage of epydoc 
> > rather than HappyDoc as well.  There are probably other updates that 
> > could and should be made as well.
> 
> I agree.  Where is epydoc's pseudo-structured-text format documented?  Does the
> existing pipe-prefix convention for inline code samples still work?

Answering my own (stupid) question: I just checked in a small change to the
coding standard to specify epytext and point at its online docs.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020923/123a3e51/attachment.pgp 

From bruce at cubik.org  Mon Sep 23 21:28:29 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Mon, 23 Sep 2002 19:28:29 -0600
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley consequence
 of non running of unit tests
References: <3D8F5199.40108@cubik.org>	<3D8F5343.2080501@itamarst.org>	<3D8F59A3.5080805@cubik.org> <20020923.201209.67506062.glyph@twistedmatrix.com>
Message-ID: <3D8FBFBD.3060305@cubik.org>

Glyph Lefkowitz wrote:
 > On Mon, 23 Sep 2002 12:12:51 -0600, Bruce Mitchener <bruce at cubik.org>
 > wrote:
 >>It'd be nice to see some further constructive discussion of this.
 >>We'll also need to update the coding standard to reflect the usage
 >>of epydoc rather than HappyDoc as well.  There are probably other
 >>updates that could and should be made as well.

I thought that I answered that in that same email or one of the others 
today. :)  http://epydoc.sf.net/

 > I agree.  Where is epydoc's pseudo-structured-text format documented?
 > Does the existing pipe-prefix convention for inline code samples still
 > work?

I _think_ that right now it just triggers a literal block which gets 
rendered to HTML as a <pre class="literalblock">...</pre>

It'd be nice if that supported pretty-printing the source and all that, 
but right now, there's no guarantee that it is Python source. (Like when 
I got and put a quick HTML snippet in there, or SQL, or ...)

Patches for improving this are likely appreciated.

  - Bruce




From glyph at twistedmatrix.com  Mon Sep 23 21:33:17 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 23 Sep 2002 20:33:17 -0500 (CDT)
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley
 consequence of non running of unit tests
In-Reply-To: <3D8F59A3.5080805@cubik.org>
References: <3D8F5199.40108@cubik.org>
	<3D8F5343.2080501@itamarst.org>
	<3D8F59A3.5080805@cubik.org>
Message-ID: <20020923.203317.45081075.glyph@twistedmatrix.com>


On Mon, 23 Sep 2002 12:12:51 -0600, Bruce Mitchener <bruce at cubik.org> wrote:
> I'd meant to suggest that we at least have some sort of policy on 
> documentation that is as clearly stated as that for running tests.  I 
> don't really care what the policy is, as long as the situation improves 
> past the state that Twisted is currently in.

Hm, I don't really disagree with this.  I think it's vastly different than unit
tests though.  Mainly, I'd like to use _positive_ reinforcement for people who
write docs... I can't think off the top of my head what would be a good reward,
though.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020923/055820eb/attachment.pgp 

From andrew-twisted at puzzling.org  Mon Sep 23 21:35:47 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 24 Sep 2002 11:35:47 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley consequence of non running of unit tests
In-Reply-To: <20020923.203317.45081075.glyph@twistedmatrix.com>
References: <3D8F5199.40108@cubik.org> <3D8F5343.2080501@itamarst.org> <3D8F59A3.5080805@cubik.org> <20020923.203317.45081075.glyph@twistedmatrix.com>
Message-ID: <20020924013547.GA17036@ritsuko.xware.cx>

On Mon, Sep 23, 2002 at 08:33:17PM -0500, Glyph Lefkowitz wrote:
> 
> Hm, I don't really disagree with this.  I think it's vastly different
> than unit tests though.  Mainly, I'd like to use _positive_
> reinforcement for people who write docs... I can't think off the top
> of my head what would be a good reward, though.

How about "merciless praising" to match the "merciless taunting"? :)

-Andrew.




From itamar at itamarst.org  Mon Sep 23 12:58:45 2002
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 23 Sep 2002 12:58:45 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley consequence
 of non running of unit tests
References: <E17tVMn-00026x-00@pyramid.twistedmatrix.com> <3D8F38D5.2060202@cubik.org>
Message-ID: <3D8F4845.2050301@itamarst.org>

Bruce Mitchener wrote:

> Why don't we do similar for not even putting in basic doc comments when 
> new API is added?

Lack of docstrings on commited code is most irritating, yes.




From sean at twistedmatrix.com  Mon Sep 23 23:57:02 2002
From: sean at twistedmatrix.com (Sean Riley)
Date: Mon, 23 Sep 2002 22:57:02 -0500
Subject: [Twisted-Python] Enterprise Row Objects
Message-ID: <HOEEKPCOKELHCNIJNMAGKEPCCGAA.sean@twistedmatrix.com>

I found that if I can remove all of the database implementation specific
code and the database initialization phase for reflectors if the class
attribute "rowColumns" is extended to include the type of the column in
addition to its name.

so when users define a new row class,

rowColumns = ["col1", "col2", "col3"]

becomes:

rowColumns = [("col1", "int"), ("col2", "varchar"), ("col3", "int")]

Itamar pointed me at PySQLite ( http://www.hwaci.com/sw/sqlite/ and
http://pysqlite.sourceforge.net/ ) and i couldnt implement a reflector for
it because there is no way to determine the type of a column as SQLite lacks
detailed system catalogs. Adding the type information to rowColumns was the
obvious solution and happily it has additional benefits:
 - no longer require a database catalog lookup to populate rowClasses
 - no defered initialization phase for reflectors
 - databases without full schema information available (XML and SQLite) can
be supported.

So, the SQL Reflector now works purely on the python DBAPI spec - it should
work with any supported  python DBAPI module. I've run it with PostgreSQL
and SQLite. I'd like to hear if anyone can run it on another database or
platform??

In Twisted.doc.examples there is now:

	row_util.py  - classes for row examples
	row_schema.sql - sample database schema
	row_example.py - example code using a postgresql or sqlite database
	row_xml.py  - example code that uses an XML "database"

Additional functionality would be the ability to generate stubbed rowObject
classes from a relational database schema.

...and I wont update the documentation with PageMill.

----------------
"If he's so smart, then how come he's dead?", Homer Simspon
Sean Riley
sean at ninjaneering.com




From sean at twistedmatrix.com  Tue Sep 24 02:13:48 2002
From: sean at twistedmatrix.com (Sean Riley)
Date: Tue, 24 Sep 2002 01:13:48 -0500
Subject: [Twisted-Python] Enterprise Row Objects
In-Reply-To: <HOEEKPCOKELHCNIJNMAGKEPCCGAA.sean@twistedmatrix.com>
Message-ID: <HOEEKPCOKELHCNIJNMAGIEPDCGAA.sean@twistedmatrix.com>

also successfully ran the row_example.py test against Interbase/Firebird
using kinterbasdb python DBAPI driver and MySQL using the MySQLdb driver :)


-----Original Message-----
From: twisted-python-admin at twistedmatrix.com
[mailto:twisted-python-admin at twistedmatrix.com]On Behalf Of Sean Riley
Sent: Monday, September 23, 2002 10:57 PM
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] Enterprise Row Objects


I found that if I can remove all of the database implementation specific
code and the database initialization phase for reflectors if the class
attribute "rowColumns" is extended to include the type of the column in
addition to its name.

so when users define a new row class,

rowColumns = ["col1", "col2", "col3"]

becomes:

rowColumns = [("col1", "int"), ("col2", "varchar"), ("col3", "int")]

Itamar pointed me at PySQLite ( http://www.hwaci.com/sw/sqlite/ and
http://pysqlite.sourceforge.net/ ) and i couldnt implement a reflector for
it because there is no way to determine the type of a column as SQLite lacks
detailed system catalogs. Adding the type information to rowColumns was the
obvious solution and happily it has additional benefits:
 - no longer require a database catalog lookup to populate rowClasses
 - no defered initialization phase for reflectors
 - databases without full schema information available (XML and SQLite) can
be supported.

So, the SQL Reflector now works purely on the python DBAPI spec - it should
work with any supported  python DBAPI module. I've run it with PostgreSQL
and SQLite. I'd like to hear if anyone can run it on another database or
platform??

In Twisted.doc.examples there is now:

	row_util.py  - classes for row examples
	row_schema.sql - sample database schema
	row_example.py - example code using a postgresql or sqlite database
	row_xml.py  - example code that uses an XML "database"

Additional functionality would be the ability to generate stubbed rowObject
classes from a relational database schema.

...and I wont update the documentation with PageMill.

----------------
"If he's so smart, then how come he's dead?", Homer Simspon
Sean Riley
sean at ninjaneering.com


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From bruce at cubik.org  Tue Sep 24 02:25:31 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Tue, 24 Sep 2002 00:25:31 -0600
Subject: [Twisted-Python] thoughts on a reactor feature
References: <3D8F635E.6090506@cubik.org> <20020923.200747.121185519.glyph@twistedmatrix.com>
Message-ID: <3D90055B.8040905@cubik.org>

Glyph,

Glyph Lefkowitz wrote:
> On Mon, 23 Sep 2002 12:54:22 -0600, Bruce Mitchener <bruce at cubik.org> wrote:
> 
>>One would be have an interface to POSIX clocks and track the amount of 
>>time spent between calls out of reactor.run() and report anything that 
>>takes over a specified threshold of time to execute.
> 
> If I understand your proposal correctly, I think this could be implemented
> quite simply by writing a Python wrapper around the reactor, that would wrap
> each protocol and protocol factory being passed to it in something that would
> catch events and time their execution.  This should work for just about any
> reactor.  With a few extra features, it might even be good for measuring their
> differences.  Would you need a wrapper around POSIX clocks more robust than
> time.clock()?

time.clock() looks like it'd work well enough so long as the accuracy is 
good enough.  (clock_gettime() deals in nanoseconds.)

Wrapping the reactor in Python seems harder.  This could also be a usage 
of the metrics gathering interfaces that I'd mentioned yesterday. 
That'd be far simpler than wrapping the reactor, intercepting 
everything, and providing a new iteration function to catch all of the 
calls out of the reactor while it processed the queued calls.

And .. this should be something that is easy to use, easy to turn on, 
and readily available.  We have primitive facilities for this sort of 
thing in the server tech that I use at work and the only reason that 
they're not more advanced is that I didn't want to spend the time (and 
add the risk) on refactoring our interpreter.  They greatly simplified 
diagnosing server performance issues that popped up.

That would still leave printing out an identifier that indicates what it 
was that just ran for more than the allowed amount of time.  I'll have 
to experiment a bit inside the reactor in the time day or so if I have 
time for Twisted and see what types of things we can reasonably print 
from there.

> (I think this could also compare time.clock() to time.time() to see if
> potentially blocking calls were being made.)

That might be interesting, but not sure that time.time() is of similar 
resolution as the values that I want.  But if I do end up wrapping 
clock_gettime() in a C module, then I could also wrap the function for 
getting wall time in addition to CPU time and per-thread CPU time.  Not 
a problem at all. :)

>>Another is to implement some sort of stack trace sampling where you
>>periodically take a stack trace when a utility program is running and you've
>>noted periods of long latency.
> 
> This I don't know how to do; possibly it's doable with Python's
> debugger/profiler hooks?  I'm not quite clear on how you do the "noting" -- is
> this a message that the user sends to Twisted or is it something that the
> profiler performs some heuristic to get?

Well, the bit above with the time.clock() is probably enough for now.

It'd be nice to be able to do more introspection on thread pools, but 
that can probably wait a bit.

  - Bruce




From bruce at cubik.org  Tue Sep 24 02:26:34 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Tue, 24 Sep 2002 00:26:34 -0600
Subject: [Twisted-Python] Enterprise Row Objects
References: <HOEEKPCOKELHCNIJNMAGIEPDCGAA.sean@twistedmatrix.com>
Message-ID: <3D90059A.70100@cubik.org>

Sean,

Sean Riley wrote:
 > also successfully ran the row_example.py test against
 > Interbase/Firebird using kinterbasdb python DBAPI driver
 > and MySQL using the MySQLdb driver :)

Nice work!

Did you end up working out how to handle serials/autoincrementing index 
values of some sort?

I'm thinking of basing some code at work on t.e.row, but have some 
concerns along those lines.

  - Bruce





From m at moshez.org  Tue Sep 24 07:59:47 2002
From: m at moshez.org (Moshe Zadka)
Date: 24 Sep 2002 11:59:47 -0000
Subject: [Twisted-Python] Release Process
Message-ID: <20020924115947.1479.qmail@green.zadka.com>

As documented with an IRC log:

<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 09:56:56 2002 UTC.  ^G.
<_moshez> >---- started releasing -----<
<tla> <cvs> Commit from moshez (changed 1) in Twisted: "Prerelease" ChangeLog
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:00:50 2002 UTC.  ^G.
<_moshez> checking out
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:01:52 2002 UTC.  ^G.
<tla> <cvs> Commit from moshez (changed 3) in 3 subdirs of Twisted: "Preparing for 0.99.2rc2" README, installing-twisted.html, copyright.py
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:02:36 2002 UTC.  ^G.
<_moshez> tagging ended, running doc generation
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:03:43 2002 UTC.  ^G.
<_moshez> fuck, first problem
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:04:35 2002 UTC.  ^G.
<glyph> _moshez: problem?
<_moshez> glyph: fixing.
<_moshez> hmmm....epyrun is refusing to run.
<_moshez> glyph: epyrun seems to have some kind of a problem :(
<glyph> _moshez: can you give me any more diagnostic info than that?
<_moshez> glyph: try to run it and see..
<_moshez> glyph: it gets killed for some reason.
<glyph> for "this function".  christ, the error messages in this program are worse than nothing
<glyph> _moshez: you're getting this error?
...trouble shooting...
<_moshez> add swap?
<glyph> Sep 24 05:22:29 pyramid kernel: Out of Memory: Killed process 12109 (python).
<_moshez> glyph: it worked!
<_moshez> glyph: praise the lord
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:32:45 2002 UTC.  ^G.
<_moshez> restarted export and onwards
<_moshez> glyph: epyrun finished successfully for real.
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:35:53 2002 UTC.  ^G.
<_moshez> creating balls
<_moshez> created Twisted balls
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:37:42 2002 UTC.  ^G.
<_moshez> created TwistedDocs balls
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:38:53 2002 UTC.  ^G.
<_moshez> creating debs...
<_moshez> copied stuff over to the chroot
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:39:46 2002 UTC.  ^G.
<_moshez> I'm creating the diff
<_moshez> built 2.1 support
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:41:55 2002 UTC.  ^G.
<_moshez> built 2.2 support
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:42:20 2002 UTC.  ^G.
<_moshez> built 2.3 support
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:43:40 2002 UTC.  ^G.
<_moshez> packaging up the debs
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:46:09 2002 UTC.  ^G.
<_moshez> finished building -1
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:52:45 2002 UTC.  ^G.
<_moshez> glyph: building -1woody
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:58:59 2002 UTC.  ^G.
<_moshez> glyph: building the woody packages
<_moshez> last stages of that.
<_moshez> finished building debs
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 11:20:35 2002 UTC.  ^G.
<_moshez> finished r-t
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 11:21:31 2002 UTC.  ^G.
<_moshez> one snag: InstallDebs didn't work
<_moshez> glyph: installation finished
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 11:34:42 2002 UTC.  ^G.
<tla> <cvs> Commit from moshez (changed 3) in 2 subdirs of WebSite/twistedmatrix.com: "Rc2" index, news.html, download.html
<_moshez> now I'm finihsed 
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 11:48:13 2002 UTC.  ^G.




From twisted at moshez.org  Tue Sep 24 08:26:14 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 24 Sep 2002 12:26:14 -0000
Subject: [Twisted-Python] Release Process
In-Reply-To: <20020924115947.1479.qmail@green.zadka.com>
References: <20020924115947.1479.qmail@green.zadka.com>
Message-ID: <20020924122614.1972.qmail@green.zadka.com>

Summarising:

> <pynfo> The time at the tone will be: Tue Sep 24 09:56:56 2002 UTC.  ^G.
> <_moshez> tagging ended, running doc generation
> <pynfo> The time at the tone will be: Tue Sep 24 10:03:43 2002 UTC.  ^G.

So, 7 minutes here. Remember this.

> <_moshez> fuck, first problem
> <pynfo> The time at the tone will be: Tue Sep 24 10:04:35 2002 UTC.  ^G.
......
> <pynfo> The time at the tone will be: Tue Sep 24 10:32:45 2002 UTC.  ^G.

28 minutes to fix problem.

> <_moshez> restarted export and onwards
[So it just saved me 7 minutes]
> <_moshez> finished r-t
> <pynfo> The time at the tone will be: Tue Sep 24 11:21:31 2002 UTC.  ^G.

50 minutes for the r-t run.

Total r-t time: 55 minutes.

> <_moshez> one snag: InstallDebs didn't work
> <_moshez> glyph: installation finished
> <_moshez> pynfo: time
> <pynfo> The time at the tone will be: Tue Sep 24 11:34:42 2002 UTC.  ^G.

15 minutes to put the deb in the archive and install them.

> <_moshez> now I'm finihsed 
> <pynfo> The time at the tone will be: Tue Sep 24 11:48:13 2002 UTC.  ^G.

15 more minutes to get the web site up to date




From bruce at cubik.org  Tue Sep 24 10:22:55 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Tue, 24 Sep 2002 08:22:55 -0600
Subject: [Twisted-Python] Release Process
References: <20020924115947.1479.qmail@green.zadka.com>
Message-ID: <3D90753F.3090509@cubik.org>

Moshe Zadka wrote:
 > <_moshez> hmmm....epyrun is refusing to run.
 > <_moshez> glyph: epyrun seems to have some kind of a problem :(
 > <glyph> _moshez: can you give me any more diagnostic info than that?
 > <_moshez> glyph: try to run it and see..
 > <_moshez> glyph: it gets killed for some reason.
 > <glyph> for "this function".  christ, the error messages in this
 >   program are worse than nothing

Bug reports, to Ed or to myself would be welcome.  We can't fix what we 
don't hear about.

  - Bruce




From glyph at twistedmatrix.com  Tue Sep 24 11:26:04 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 24 Sep 2002 10:26:04 -0500 (CDT)
Subject: [Twisted-Python] Release Process
In-Reply-To: <3D90753F.3090509@cubik.org>
References: <20020924115947.1479.qmail@green.zadka.com>
	<3D90753F.3090509@cubik.org>
Message-ID: <20020924.102604.94840660.glyph@twistedmatrix.com>


On Tue, 24 Sep 2002 08:22:55 -0600, Bruce Mitchener <bruce at cubik.org> wrote:
> Moshe Zadka wrote:
[snip]
>  > <glyph> for "this function".  christ, the error messages in this program
>  >         are worse than nothing

[ ... but also: ]
>  > ...trouble shooting...
>  > <_moshez> add swap?
>  > <glyph> Sep 24 05:22:29 pyramid kernel: Out of Memory: Killed process 12109
>  >         (python).
>  > <_moshez> glyph: it worked!

> Bug reports, to Ed or to myself would be welcome.  We can't fix what we don't
> hear about.

Sorry that it wasn't clear from the log: this particular problem was
frustrating to debug because it was the linux kernel OOM killer.  Pyramid was a
very busy machine for a while and it would consistently kill epydoc if we
attempted to run it.  Adding swap fixed the problem.  Errors were "worse than
nothing" because they did not point at the problem.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020924/596e3ae8/attachment.pgp 

From bruce at cubik.org  Tue Sep 24 15:34:05 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Tue, 24 Sep 2002 13:34:05 -0600
Subject: [Twisted-Python] Release Process
References: <20020924115947.1479.qmail@green.zadka.com>	<3D90753F.3090509@cubik.org> <20020924.102604.94840660.glyph@twistedmatrix.com>
Message-ID: <3D90BE2D.9060209@cubik.org>

Glyph Lefkowitz wrote:
 > Sorry that it wasn't clear from the log: this particular problem was
 > frustrating to debug because it was the linux kernel OOM killer.
 > Pyramid was a very busy machine for a while and it would consistently
 > kill epydoc if we attempted to run it.  Adding swap fixed the 
problem.  > Errors were "worse than nothing" because they did not point 
at the
 > problem.

Ahh, okay. I thought that this was another complaint about epydoc that 
lacked enough detail for me to work on a fix. :)

Happy to hear that it wasn't!  (But I'd still like to get any bug 
reports or patches with new features...)

  - Bruce





From acapnotic at twistedmatrix.com  Tue Sep 24 18:11:41 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 24 Sep 2002 15:11:41 -0700
Subject: [Twisted-Python] breaking distrib.ResourceSubscription
In-Reply-To: <20020924.085756.127664254.glyph@twistedmatrix.com>
References: <20020924.085756.127664254.glyph@twistedmatrix.com>
Message-ID: <1032905503.14645.294.camel@troglodyte.funhouse>

On Tue, 2002-09-24 at 06:57, Glyph Lefkowitz wrote:
[...]
> ResourcePublisher instance has no attribute 'remote_wasModifiedSince'

I'm surprised that this is in the logs much, since it should only happen
for distributed servers that set a Last-Modified header.  Are personal
servers serving that many static files?  I would have thought that would
be handled by ~/public_html.

[...]
> I thought that I'd mentioned this over IRC before, but let me stress it: I
> think that twisted.web.server is implementing *WAAAAY* too much of HTTP right
> now. 

Interesting position.  I know you're not a fan of complete support for a
protocol when you believe the protocol itself is broken, and I'll admit
that nobody actually uses ETags, but I would hardly say that
Last-Modified and HEAD are obscure or unnecessary.

> First of all, this is killing performance -- you have a minimum of 4 or 5
> PB server/client interactions now for each conditional request instead of 2.
> Those method calls are not cheap.

Recognized.  Although I thought I only increased the count by one, not
two or three?

Also take into consideration that these calls only happen for the
*conditional* requests.  Resources that don't supply ETag or
Last-Modified cache validation headers will probably never be bothered
with them.  And if the condition fails, callRemote("request") never
happens, nor does all the work that goes with it.  So overall,
estimating its impact on performance isn't as simple as grep --count
callRemote.


> Second, this is exploding the complexity of
> the webserver: its goal should be to get to the endpoint resource *as simply as
> possible* and then invoke endpoint behavior on that resource.  If clever
> header-parsing things need to happen, then we need to make a lower-level
> 'request' method and make *it* clever, not do request processing before the
> request is dispatched.

This I agree with.  I knew something was wrong when I had three remote
methods in ResourcePublisher all independently doing getResourceFor.  It
would be more symmetric if Request.process was invoked on the distri --

ggrngh.  What is Request.process anyway.  Is it just supposed to do
site.getResourceFor and pass itself off?  Yes.  All the rest of the junk
in there is stuff I added (though the HEAD/supportedMethods stuff was
quite some time ago) with the possible exception of the
util.Unauthorized block.  And it's probably all logic that belongs in
web..Resource rather than Request.

(which is just re-iterating what you've been telling me.)

So how do we fix it?  You're suggesting that Request.process call
Resource.request, which contains most of the stuff currently in
Request.process, and Resource.request calls Resource.render if it's not
a conditional request?

> Third, and not least, this has broken backwards compatibility (albeit in a
> mostly-harmless way) at a time when we should be focusing the most on backwards
> compatibility. 

Sounds like we need an inter-version test harness.  Runs peer1 under
version X and peer2 on Y, or starts server on version X, pickles it, and
re-starts under Y, etc.

> I'm sending this to you directly instead of the list because I've had enough
> political headaches recently and I didn't want you to think that I'm publicly
> lambasting you :).  I appreciate the effort that went into this feature
> implementation, even if it was misguided.

God help us if we can't critique the codebase in the developer's forum.
I appreciate the feedback; I *told* you that I didn't think my changes
had been tested "a lot".

> If you think some of this
> information is useful or that my views on twisted.web's architecture are not
> very clear (or require public discussion), feel free to edit and re-post.

Cheers,

 - Acap

-- 
The moon is waning gibbous, 91.9% illuminated, 17.5 days old.


-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020924/2ed35414/attachment.pgp 

From glyph at twistedmatrix.com  Tue Sep 24 20:28:33 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 24 Sep 2002 19:28:33 -0500 (CDT)
Subject: [Twisted-Python] breaking distrib.ResourceSubscription
In-Reply-To: <1032905503.14645.294.camel@troglodyte.funhouse>
References: <20020924.085756.127664254.glyph@twistedmatrix.com>
	<1032905503.14645.294.camel@troglodyte.funhouse>
Message-ID: <20020924.192833.105432764.glyph@twistedmatrix.com>

On 24 Sep 2002 15:11:41 -0700, Kevin Turner <acapnotic at twistedmatrix.com> wrote:
> On Tue, 2002-09-24 at 06:57, Glyph Lefkowitz wrote:
> [...]
> > ResourcePublisher instance has no attribute 'remote_wasModifiedSince'
> 
> I'm surprised that this is in the logs much, since it should only happen
> for distributed servers that set a Last-Modified header.  Are personal
> servers serving that many static files?  I would have thought that would
> be handled by ~/public_html.

The tracebacks I was seeing were for wikis and viewcvs; either moin is setting
those headers or it's serving the images / static data from a personal server
directory.

> > I thought that I'd mentioned this over IRC before, but let me stress it: I
> > think that twisted.web.server is implementing *WAAAAY* too much of HTTP right
> > now. 
> 
> Interesting position.  I know you're not a fan of complete support for a
> protocol when you believe the protocol itself is broken, and I'll admit
> that nobody actually uses ETags, but I would hardly say that
> Last-Modified and HEAD are obscure or unnecessary.

Nor would I.  After much discussion with itamar I conceded that HEAD ought to
cause the body of the request to be eaten there before being sent to the
client.

What I mean here is that the actual module, twisted.web.server, is being too
smart about stuff like Last-Modified and ETags.  HTTP should be fully
implemented, but parts of the responsibility lie elsewhere.
twisted.web.Resource subclasses can implement those themselves if they want to,
because the 99.9% cases should be handled: static.File will handle filesystem
content and woven.* will handle dynamic content.  We can also provide a helper
for mix-in that does conditional-rendering stuff.

> > First of all, this is killing performance -- you have a minimum of 4 or 5
> > PB server/client interactions now for each conditional request instead of 2.
> > Those method calls are not cheap.
> 
> Recognized.  Although I thought I only increased the count by one, not
> two or three?

Looking at it now, I guess ETags and last-modified support are exclusive.  (Is
this correct, protocol-wise?)  However, each call that requires an answer is
minimum of 2 interactions (request/response).  Plus most resources will want to
do a .write().

> Also take into consideration that these calls only happen for the
> *conditional* requests.

The only heuristic I have for how often these happen are the once-per-minute
tracebacks I was seeing while bots were crawling the website yesterday.  So it
looked quite often. :)

> > Second, this is exploding the complexity of the webserver: its goal should
> > be to get to the endpoint resource *as simply as possible* and then invoke
> > endpoint behavior on that resource.  If clever header-parsing things need
> > to happen, then we need to make a lower-level 'request' method and make
> > *it* clever, not do request processing before the request is dispatched.

> This I agree with.  I knew something was wrong when I had three remote
> methods in ResourcePublisher all independently doing getResourceFor.  It
> would be more symmetric if Request.process was invoked on the distri --

Right. :-)

> ggrngh.  What is Request.process anyway.  Is it just supposed to do
> site.getResourceFor and pass itself off?  Yes.  All the rest of the junk
> in there is stuff I added (though the HEAD/supportedMethods stuff was
> quite some time ago) with the possible exception of the
> util.Unauthorized block.  And it's probably all logic that belongs in
> web..Resource rather than Request.

HEAD definitely ought to still have a little bit of logic in Request, since it
should discard any body that the resource attempts to return.  However, the
rest of what you're saying is definitely...

> ([...] just re-iterating what you've been telling me.)

> So how do we fix it?  You're suggesting that Request.process call
> Resource.request, which contains most of the stuff currently in
> Request.process, and Resource.request calls Resource.render if it's not
> a conditional request?

See above for my suggestion.  I think that Resource is too low-level for this
sort of thing (since the default implementation of wasModifiedSince is going to
be 'return 1', why invoke it at all by default?).  I don't feel strongly that
my suggestion is better than this one though, if you think that dynamic
resource implementors are going to want to use this functionality a lot.
(Thoughts, Donovan?)

> Sounds like we need an inter-version test harness.  Runs peer1 under
> version X and peer2 on Y, or starts server on version X, pickles it, and
> re-starts under Y, etc.

Yes.  This is something that I think radix hacked up manually a little while
back, but it needs to be added to accepttests.

Sounds like we're in general agreement, then...

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020924/879e7dc8/attachment.pgp 

From kevin.m.turner at pobox.com  Tue Sep 24 23:50:18 2002
From: kevin.m.turner at pobox.com (Kevin Turner)
Date: 24 Sep 2002 20:50:18 -0700
Subject: [Twisted-Python] interface for Last-Modified
In-Reply-To: <20020924.192833.105432764.glyph@twistedmatrix.com>
References: <20020924.085756.127664254.glyph@twistedmatrix.com>
	<1032905503.14645.294.camel@troglodyte.funhouse> 
	<20020924.192833.105432764.glyph@twistedmatrix.com>
Message-ID: <1032925819.14657.338.camel@troglodyte.funhouse>

itamar has led me to what looks to be a much more elegant solution. 
Since the only resources that worry about receiving conditional requests
are those that set cache validation headers (such as "Last-Modified"),
the check to see if you're dealing with a conditional request can go in
the L{http.Request.setLastModified} method.  setLastModified's return
value can then let the caller know if they date they gave was older than
the one in the conditional request, so they don't have to render the
body of the request.  And this works, because Last-Modified being a
header and all, you're having to set it before you write the request
body anyway.

So this works pretty well::

    class SimpleResource(resource.Resource):
        def render(self, request):
            if http.CACHED in (request.setLastModified(10),
                               request.setETag('MatchingTag')):
                return ''
            else:
                return "correct"

and I was all ready to check it in, until I tried to apply it in my
actual use-case, using it in a superclass::

    class AbstractCommitList(widgets.Widget, mvc.View):
        def display(self, request):
            if request.setLastModified(self.lastModified) is http.CACHED:
                # Body should be empty.
                return ''
            else:
                # Body is rendered by subclass.
                return ''
            # That wasn't a very effective conditional.

    class RssChannel(AbstractCommitList):
        def display(self, request):
            s = AbstractCommitList.display(self, request)
            # Now how do I know if I'm supposed to render the body or not?


I guess I could add Request.wantsABody() and have all display subclasses
call that.  Or maybe we've succeeded in moving the problem up above the
Resource.render level to higher-level things like widgets, so it's
something to be solved there.

Any thoughts?

-- 
The moon is waning gibbous, 90.6% illuminated, 17.7 days old.




From andrew-twisaed at puzzling.org  Wed Sep 25 00:19:21 2002
From: andrew-twisaed at puzzling.org (Andrew Bennetts)
Date: Wed, 25 Sep 2002 14:19:21 +1000
Subject: [Twisted-Python] FAILED (failures=1, errors=1164)
Message-ID: <20020925041921.GD3657@ritsuko.xware.cx>

Running:
  PYTHONPATH=. python admin/runtests -t poll

I get a crapload of errors.  Specifically:
  FAILED (failures=1, errors=1164)

Now, considering that we don't have that many tests, something is
*really* screwy.

The vast bulk are:
======================================================================
ERROR: testPBFailures (twisted.test.test_pbfailure.PBFailureTest)
----------------------------------------------------------------------

(yes, with no traceback)

But there are many others too... some end with:
  File "./twisted/internet/abstract.py", line 258, in fileno
    raise NotImplementedError(reflect.qual(self.__class__)+' has no fileno method')
NotImplementedError: twisted.internet.udp.Port has no fileno method


The testPBFailures test in test.log looks like:
---- Running Test: twisted.test.test_pbfailure.PBFailureTest.testPBFailures ----- 
twisted.spread.pb.BrokerFactory starting on 54321
Starting factory <twisted.spread.pb.BrokerFactory instance at 0x86cf40c>
Traceback (most recent call last):
  File "./twisted/internet/main.py", line 101, in run
    _getReactor().run()
  File "./twisted/internet/default.py", line 221, in run
    self.mainLoop()
  File "./twisted/internet/default.py", line 232, in mainLoop
    self.doIteration(t)
  File "./twisted/internet/pollreactor.py", line 139, in doPoll
    why = selectable.doRead()
--- <exception caught here> ---
  File "./twisted/internet/udp.py", line 200, in doRead
    data, addr = self.socket.recvfrom(self.maxPacketSize)
exceptions.AttributeError: Port instance has no attribute 'socket'
Traceback (most recent call last):
  File "./twisted/internet/app.py", line 573, in run
    main.run(installSignalHandlers=installSignalHandlers)
  File "./twisted/internet/main.py", line 101, in run
    _getReactor().run()
  File "./twisted/internet/default.py", line 221, in run
    self.mainLoop()
  File "./twisted/internet/default.py", line 232, in mainLoop
    self.doIteration(t)
--- <exception caught here> ---
  File "./twisted/internet/pollreactor.py", line 142, in doPoll
    if not selectable.fileno() == fd:
  File "./twisted/internet/abstract.py", line 258, in fileno
    raise NotImplementedError(reflect.qual(self.__class__)+' has no fileno method')
exceptions.NotImplementedError: twisted.internet.udp.Port has no fileno method
Unexpected error in main loop.
[...etc...]


Anyone know what's going on here?  I'm running debian testing/unstable.

-Andrew.




From glyph at twistedmatrix.com  Wed Sep 25 02:07:00 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 25 Sep 2002 01:07:00 -0500 (CDT)
Subject: [Twisted-Python] interface for Last-Modified
In-Reply-To: <1032925819.14657.338.camel@troglodyte.funhouse>
References: <1032905503.14645.294.camel@troglodyte.funhouse>
	<20020924.192833.105432764.glyph@twistedmatrix.com>
	<1032925819.14657.338.camel@troglodyte.funhouse>
Message-ID: <20020925.010700.10575456.glyph@twistedmatrix.com>


On 24 Sep 2002 20:50:18 -0700, Kevin Turner <kevin.m.turner at pobox.com> wrote:
> itamar has led me to what looks to be a much more elegant solution. 
> Since the only resources that worry about receiving conditional requests
> are those that set cache validation headers (such as "Last-Modified"),
> the check to see if you're dealing with a conditional request can go in
> the L{http.Request.setLastModified} method.  setLastModified's return
> value can then let the caller know if they date they gave was older than
> the one in the conditional request, so they don't have to render the
> body of the request.  And this works, because Last-Modified being a
> header and all, you're having to set it before you write the request
> body anyway.

Wow!  This is not a solution I would have thought of, but I agree that it's
very clean.  If you've got this implemented, you're probably 99% of the way
there.

> and I was all ready to check it in, until I tried to apply it in my
> actual use-case, using it in a superclass::

Your use-case is pretty much complete except for one thing:
(widgets.Widget, mvc.View):
>         def display(self, request):
>             if request.setLastModified(self.lastModified) is http.CACHED:
>                 # Body should be empty.
>                 return ''
>             else:
>                 # Body is rendered by subclass.
>                 return ''
                  ^^^^^^^^^

Since this is a new superclass, we can redefine the interface of its subclasses
and change them not to be regular widgets.  Since .display() is rather
higher-level than .render() it might even make sense to do this at the
top-level render() rather than in a subclass...  Though twisted.web.widgets is
hopefully going away once woven is well-documented and provides replacements
for everything...  For an initial release, though, something like this:

                  return self.displayBody(request)

Worst case, if in the future this API is later supported at a lower level in
Widget itself, setLastModified will be called twice with the same argument.

>     class RssChannel(AbstractCommitList):
>         def display(self, request):
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
and this would, of course, be

          def displayBody(self, request):
>             s = AbstractCommitList.display(self, request)
>             # Now how do I know if I'm supposed to render the body or not?

Probably for the initial implementation, the only class to support this in the
base should be static.File.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020925/938f8aec/attachment.pgp 

From glyph at twistedmatrix.com  Wed Sep 25 03:46:52 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 25 Sep 2002 02:46:52 -0500 (CDT)
Subject: [Twisted-Python] FAILED (failures=1, errors=1164)
In-Reply-To: <20020925041921.GD3657@ritsuko.xware.cx>
References: <20020925041921.GD3657@ritsuko.xware.cx>
Message-ID: <20020925.024652.87901059.glyph@twistedmatrix.com>

On Wed, 25 Sep 2002 14:19:21 +1000, Andrew Bennetts <andrew-twisaed at puzzling.org> wrote:
> Running:
>   PYTHONPATH=. python admin/runtests -t poll

Woah.  We should have different-reactor unit test running in the coding
standard too, apparently :-(.

>   FAILED (failures=1, errors=1164)

> Now, considering that we don't have that many tests, something is *really*
> screwy.

There are some hacks in the pyunit shipped with Twisted to make it interpret
each failed deferred as a separate error.  This means some tests can produce
quite a few more errors than you might expect :-).

> The vast bulk are:
> ======================================================================
> ERROR: testPBFailures (twisted.test.test_pbfailure.PBFailureTest)
> ----------------------------------------------------------------------
> 
> (yes, with no traceback)

Yeah, this happens with Failures that are instantiated rather than raised.  I
guess there should be a debug mode where _all_ failures save their stack, that
the unit tests use...

> Anyone know what's going on here?  I'm running debian testing/unstable.

This is fixed now.  There is still one error in the pollreactor unit tests,
but that has something to do with UDP, and seems tricky enough that I'm keeping
my nose out of it for now.

What was happening was that the poll reactor was assuming that obj.fileno()
would always return a valid descriptor.  Since this has never been the case,
and one of the failure cases that causes the remove-descriptor code to get run
(and fileno() to get called) is that fileno() raises an exception, things
didn't work.  Obviously there was some circularity there, and you'd get a
double-traceback and a corrupted reactor, leaving sockets in it which would
raise these same exceptions every time .iterate() was run.  Hence the very
large number of errors.

The code that's in there now is a bit slow in the failure case I described, but
it works.  At some point we should probably have a cleaner solution to this
problem in general.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020925/03107eaa/attachment.pgp 

From twisted at moshez.org  Wed Sep 25 06:22:57 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 25 Sep 2002 10:22:57 -0000
Subject: [Twisted-Python] 0.99.2rc3
Message-ID: <20020925102257.14144.qmail@green.zadka.com>

I'm happy to announce rc3 is released.
This release has been out in 30 minutes.
Good work, everybody!





From twisted at moshez.org  Wed Sep 25 06:28:10 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 25 Sep 2002 10:28:10 -0000
Subject: [Twisted-Python] Bits from the ARM
Message-ID: <20020925102810.14357.qmail@green.zadka.com>

Here are the commands I wrote for the release

 1848  ~/Twisted/admin/release-twisted --oldver 0.99.2rc2 -v 0.99.2rc3 --release=/twisted/Releases --checkout --upver --tag --exp --dist --docs --balls --rel --deb --debi

InstallDebs still had a problem. Here is the fixin':

 1849  cd /twisted/Releases/
 1851  cd debian-0.99.2rc3/
 1853  cp * ~/public_html/snapshot/
 1854  cp woody/* ~/public_html/snapshot/woody/
 1856  rm -rf Twisted-0.99.2rc3/

Great, now upgrade:
 1857  sudo apt-get update
 1858  sudo apt-get upgrade
 1859  sudo apt-get upgrade
 1860  cd /var/www/
 1861  sudo bash

As root:
  495  mv web-shutdown.tap web-`date +%Y-%M-%d`.tap
  499  ./start-twisted.sh web-2002-09-24.tap
 
Upgrade web site:
 1865  cd ~/WebSite/
 1866  cd twistedmatrix.com/
 1867  vi news.html index products/download.html
 1868  cvs commit news.html index products/download.html
 1869  sudo su - pb
 
As pb:
  497  cd /var/www/WebSite/
  498  cd twistedmatrix.com/




From m at moshez.org  Wed Sep 25 06:56:56 2002
From: m at moshez.org (Moshe Zadka)
Date: 25 Sep 2002 10:56:56 -0000
Subject: [Twisted-Python] Bits from the ARM
In-Reply-To: <20020925102810.14357.qmail@green.zadka.com>
References: <20020925102810.14357.qmail@green.zadka.com>
Message-ID: <20020925105656.14628.qmail@green.zadka.com>

Woops, one addition:

> As pb:
>   497  cd /var/www/WebSite/
>   498  cd twistedmatrix.com/

  499  ~moshez/Twisted/admin/generate-domdocs --docsdir . --template template.tpl -e None




From jml at mumak.net  Thu Sep 19 18:33:08 2002
From: jml at mumak.net (Jonathan Lange)
Date: 20 Sep 2002 08:33:08 +1000
Subject: [Twisted-Python] twisted.web.woven.controller -- minor bugfix [PATCH]
Message-ID: <1032474792.5353.2.camel@sting>

G'day,

A couple of minor bugs in controller, fixed in this patch.

cheers,
jml


Index: controller.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/woven/controller.py,v
retrieving revision 1.2
diff -u -r1.2 controller.py
--- controller.py	23 Sep 2002 20:41:48 -0000	1.2
+++ controller.py	25 Sep 2002 11:00:51 -0000
@@ -19,8 +19,8 @@
 from twisted.python import components
 from twisted.python import mvc
 from twisted.web import resource
-from twisted.web.woven import view
-
+from twisted.web.woven import template
+from twisted.python import log
 
 class WController(mvc.Controller, resource.Resource):
     """
@@ -45,7 +45,7 @@
 
     def process(self, request, **kwargs):
         log.msg("Processing results: ", kwargs)
-        return view.RESTART_RENDERING
+        return template.RESTART_RENDERING
 

 def registerControllerForModel(controller, model):




From warner at lothar.com  Wed Sep 25 08:07:48 2002
From: warner at lothar.com (Brian Warner)
Date: Wed, 25 Sep 2002 05:07:48 -0700 (PDT)
Subject: [Twisted-Python] [PATCH] manhole example, docs update
Message-ID: <20020925.050748.78720481.warner@lothar.com>

Based upon a suggestion by Acapnotic, I wrote up a small example of how to
get started with the 'manhole' service (both a server and a transcript of
accessing the Application and changing the type of server). It's attached
here, in the form of a patch to docs/howto/manhole.html, and a sample server
to put in docs/examples/manhole.py . Hope you find it useful.

cheers,
 -Brian
-------------- next part --------------
#! /usr/bin/python

# demonstrate use of manhole to modify a running server

from twisted.internet.app import Application
from twisted.internet.protocol import Factory
from twisted.protocols.wire import QOTD
from twisted.tap.manhole import Options, updateApplication

app = Application("manhole-demo")

# add QOTD server
f = Factory()
f.protocol = QOTD
app.listenTCP(8123, f)

# add manhole with username and password
o = Options()
o.parseOptions(["--user", "username", "--password", "sekrit"])
updateApplication(app, o)

app.run()
-------------- next part --------------
Index: doc/howto/manhole.html
===================================================================
RCS file: /cvs/Twisted/doc/howto/manhole.html,v
retrieving revision 1.6
diff -u -r1.6 manhole.html
--- doc/howto/manhole.html	20 Jun 2002 09:37:48 -0000	1.6
+++ doc/howto/manhole.html	25 Sep 2002 11:55:09 -0000
@@ -39,6 +39,24 @@
     can type arbitrary python code into the input area and get the
     results in the output area.</p>
 
+    <p>At this point, you can get access to the main <code class="API"
+    base="twisted.internet.app">Application</code> object. You can use that
+    to obtain the <code class="API" base="twisted.spread.pb">Service</code>
+    objects inside it, or references to the <code class="API"
+    base="twisted.internet.protocol">Factory</code> objects that are
+    listening on TCP or UDP ports, by doing:</p>
+
+<pre class="python-interpreter">
+from twisted.internet import app
+a = app.theApplication
+service = a.getServiceNamed("manhole")
+(port, factory, backlog, interface) = a.tcpPorts[0]
+</pre>
+
+    <p>After that, you can do anything you want with those objects. A more
+    detailed example is at the bottom of this document.</p>
+
+
     <h2>Special Commands</h2>
 
     <p>There are a few special commands so far that make debugging
@@ -130,6 +148,71 @@
     brought to you by the <code
     class="API">twisted.python.explorer</code> module, which was
     written largely by Kevin Turner.</p>
+
+    <h2>Example</h2>
+
+    <p>Here's an example of using the manhole service to examine and modify
+    a running server. The sample code starts a Quote Of The Day (<code
+    class="API" base="twisted.protocols.wire">QOTD</code>) server on port
+    8123, as well as a manhole service on the usual port 8787.</p>
+
+    <a href="../examples/manhole.py" class="py-listing">manhole.py</a>
+
+    <p>Start this running, and test it out with <code class="shell">nc
+    localhost 8123</code> (or <code class="shell">telnet localhost
+    8123</code> if you don't have netcat installed).</p>
+
+<pre class="shell">
+% nc localhost 8123
+An apple a day keeps the doctor away.
+</pre>
+
+    <p>Then start the <tt>manhole</tt> client and point it at the
+    application: username is <tt>username</tt>, password is <tt>sekrit</tt>.
+    The following is a transcript of the manhole session, and looks just
+    like the normal python interpreter, with lines you type prefixed with
+    <tt>&gt;&gt;&gt;</tt>.</p>
+
+<pre class="python-interpreter">
+Hello username, welcome to twisted.manhole in manhole-demo on some computer somewhere.
+Twisted 0.99.2rc2.
+
+&gt;&gt;&gt; from twisted.internet import app
+&gt;&gt;&gt; a = app.theApplication
+&gt;&gt;&gt; a
+&lt;'manhole-demo' app&gt;
+&gt;&gt;&gt; a.getServiceNamed("twisted.manhole")
+&lt;twisted.manhole.service.Service instance at 0x82d63dc&gt;
+&gt;&gt;&gt; a.tcpPorts
+[(8123, &lt;twisted.internet.protocol.Factory instance at 0x82da454&gt;, 5, ''), (8787, &lt;twisted.spread.pb.BrokerFactory instance at 0x82dac7c&gt;, 5, '')]
+&gt;&gt;&gt; f = a.tcpPorts[0][1]
+&gt;&gt;&gt; f
+&lt;twisted.internet.protocol.Factory instance at 0x82da454&gt;
+&gt;&gt;&gt; dir(f)
+['__doc__', '__implements__', '__module__', 'buildProtocol', 'doStart', 'doStop', 'noisy', 'numPorts', 'protocol', 'startFactory', 'stopFactory']
+&gt;&gt;&gt; from twisted.protocols.wire import Daytime
+&gt;&gt;&gt; a.tcpPorts[0][1].protocol = Daytime
+</pre>
+
+    <p>Congratulations, you've just changed the Factory to use the <code
+    class="API" base="twisted.protocols.wire">Daytime</code> protocol
+    instead of the <code class="API"
+    base="twisted.protocols.wire">QOTD</code> protocol. Connect to port 8123
+    now and see the difference: you get a timestamp instead of a quote:</p>
+
+<pre class="shell">
+% nc localhost 8123
+Wed Sep 25 11:14:58 2002
+</pre>
+
+    <p>From here, you can do anything you want to your application. It is a
+    good idea to check the source for the <code class="API"
+    base="twisted.internet.app">Application</code> and <code class="API"
+    base="twisted.cred.service">Service</code> classes to see what else you
+    can extract from them.</p>
+
+    <p>Have fun!</p>
+
     <hr />
 
     <address>

From bruce at cubik.org  Wed Sep 25 14:26:54 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Wed, 25 Sep 2002 12:26:54 -0600
Subject: [Twisted-Python] little bits of woven joy
Message-ID: <3D91FFEE.9030702@cubik.org>

Currently, if you have multiple deferreds in flight and one of them 
fails, future failures aren't handled  nicely at all.  This patch works 
on improving that, but isn't perfect yet.

It also handles a few other things ... callbacks that were having an 
exception raised didn't display that in the web interface ... and if we 
do that, we should just return the Failure back to 
Deferred._runCallbacks as well to swap over to the errback chain.

If someone has a good (better) idea on handling the multiple-deferreds 
in flight that error out, I'd love to hear it.  This is actually causing 
other problems as well that this problem doesn't fix .. where sometimes, 
parts of the page will be rendered and parts will be formatFailure 
output ... and sometimes the web connection never closes down and so the 
browser just spins on it. :)

There are a couple of other problems as well, but I don't (yet) have a 
good enough handle on them to discuss them, much less play with fixes.

The only other thing in here is a bit more data showing where it tried 
to look for the view method when it raises the error.

  - Bruce

cvs server: Diffing .
Index: template.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/woven/template.py,v
retrieving revision 1.3
diff -u -r1.3 template.py
--- template.py 25 Sep 2002 18:14:27 -0000      1.3
+++ template.py 25 Sep 2002 18:15:20 -0000
@@ -118,7 +118,8 @@
  def renderFailure(ignored, request):
      f = failure.Failure()
      request.write(widgets.formatFailure(f))
-    request.finish()
+    ###request.finish()
+    return f


  class DOMTemplate(Resource, View):
@@ -240,6 +241,7 @@
                  return self.sendPage(request)
          except:
              renderFailure(None, request)
+            request.finish()

      def dispatchResult(self, request, node, result):
          """
@@ -276,11 +278,19 @@
          Deal with a callback from a deferred, dispatching the result
          and recursing children.
          """
-        self.outstandingCallbacks -= 1
-        node = self.dispatchResult(request, node, result)
-        self.recurseChildren(request, node)
-        if not self.outstandingCallbacks:
-            return self.sendPage(request)
+        try:
+            self.outstandingCallbacks -= 1
+            node = self.dispatchResult(request, node, result)
+            self.recurseChildren(request, node)
+            if not self.outstandingCallbacks:
+                return self.sendPage(request)
+        except:
+            f = renderFailure(None, request)
+            if self.outstandingCallbacks == 0:
+                request.finish()
+            else:
+                log.msg("Not finishing yet ... still %s remaining" % 
self.outstandingCallbacks)
+            return f

      def processWidget(self, request, widget, node):
          """
@@ -339,6 +349,7 @@

          # Look up either a widget factory, or a dom-mutating method
          defaultViewMethod = None
+        sources = [self, domwidgets]
          view = DefaultWidget(self.model)
          viewMethod = self.templateMethods.getMethodForNode(node)
          if viewMethod:
@@ -356,6 +367,7 @@
                  else:
                      # Check to see if the viewMethod returns a widget. 
(Use IWidget instead?)
                      maybeWidget = viewMethod(request, node)
+                    sources = (maybeWidget)
                      if isinstance(maybeWidget, domwidgets.Widget):
                          view = maybeWidget
                          viewMethod = view.generate
@@ -369,7 +381,7 @@
              del view
              del result
              nodeText = node.toxml()
-            raise NotImplementedError, "You specified view name %s on a 
node, but no factory_%s method was found." % (viewName, viewName)
+            raise NotImplementedError, "You specified view name %s on a 
node, but no factory_%s method was found. Tried looking on %s" % 
(viewName, viewName, sources)
          return view, viewMethod, result

      def handleNode(self, request, node):
Index: widgets.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/woven/widgets.py,v
retrieving revision 1.6
diff -u -r1.6 widgets.py
--- widgets.py  25 Sep 2002 18:14:27 -0000      1.6
+++ widgets.py  25 Sep 2002 18:15:20 -0000
@@ -168,13 +168,16 @@
          return self.generateDOM(request, node)

      def callback(self, result, request, node):
-        self.setData(result)
-        data = self.getData()
-        if isinstance(data, defer.Deferred):
-            data.addCallbacks(self.callback, renderFailure, 
callbackArgs=(request, node), errbackArgs=(request,))
-            return data
-        self.setUp(request, node, data)
-        return self.generateDOM(request, node)
+        try:
+            self.setData(result)
+            data = self.getData()
+            if isinstance(data, defer.Deferred):
+                data.addCallbacks(self.callback, renderFailure, 
callbackArgs=(request, node), errbackArgs=(request,))
+                return data
+            self.setUp(request, node, data)
+            return self.generateDOM(request, node)
+        except:
+            return renderFailure(None, request)

      def setUp(self, request, node, data):
          """Override this setUp method to do any work your widget




From dp at twistedmatrix.com  Wed Sep 25 16:29:44 2002
From: dp at twistedmatrix.com (Donovan Preston)
Date: Wed, 25 Sep 2002 13:29:44 -0700
Subject: [Twisted-Python] Anchor
In-Reply-To: <20020910131914.GA20882@soniq.net>
Message-ID: <86DA0212-D0C5-11D6-9EE8-000393B3EC2C@twistedmatrix.com>

On Tuesday, September 10, 2002, at 06:19 AM, Paul Boehm wrote:

> web/domwidgets.py:246:         self['href'] = href or self.getData() + 
> '/'
> the "+ '/'" part makes Anchor unuseable for my application because i 
> don't
> want '/' appended to every link. am i misusing Anchor or can you fix 
> this
> in cvs ?
>
>   paul

I'm just getting back to catching up from a huge volume of work and 
email. I'm sorry I didn't reply to this earlier. The addition of a '/' 
was something I did for an app that we use internally that needs 
slashes at the end of every url to ensure that relative links work 
properly. There's no reason I can't take the slash off, and maybe 
provide a SlashAnchor which does add it.

Donovan




From twisted at moshez.org  Wed Sep 25 17:39:25 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 25 Sep 2002 21:39:25 -0000
Subject: [Twisted-Python] Heads Up: RC4
Message-ID: <20020925213925.21498.qmail@green.zadka.com>

I will package RC4 on the inside of 12 hours, unless you convince
me there a problem and that the patch won't we available by the
deadline. If you feel so, *now* is the time to mail me.

Thanks
Your Friendly Neighbourhood ARM





From acapnotic at twistedmatrix.com  Wed Sep 25 18:05:29 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 25 Sep 2002 15:05:29 -0700
Subject: [Twisted-Python] [PATCH] manhole example, docs update
In-Reply-To: <20020925.050748.78720481.warner@lothar.com>
References: <20020925.050748.78720481.warner@lothar.com>
Message-ID: <1032991536.14645.371.camel@troglodyte.funhouse>

Thanks for the docs, Brain.  I applied your patch...  but not without
breaking it a little first.  Instead of including your example code
which imported twisted.tap.manhole, I used the more canonical "mktap -a
qotd.tap manhole" command for the example.

Problem is, while there is a plug-in to make qotd.tap in
doc/howto/listings/TwistedQuotes, that isn't usually a place that the
plug-in registry searches...


-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020925/87bcf63b/attachment.pgp 

From dmarko at digi-trade.cz  Wed Sep 25 07:26:42 2002
From: dmarko at digi-trade.cz (David Marko)
Date: Wed, 25 Sep 2002 13:26:42 +0200
Subject: [Twisted-Python] 0.99.2rc3
Message-ID: <OF7803A64A.BEF2654A-ONC1256C3F.003ECFB5-C1256C3F.003EDEAF@LocalDomain>

Whert is this release available? The link on www.twistedmatrix.com doesnt 
work.

David Marko
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20020925/4add9863/attachment.htm 

From m at moshez.org  Wed Sep 25 09:26:36 2002
From: m at moshez.org (Moshe Zadka)
Date: 25 Sep 2002 13:26:36 -0000
Subject: [Twisted-Python] [PATCH] manhole example, docs update
In-Reply-To: <20020925.050748.78720481.warner@lothar.com>
References: <20020925.050748.78720481.warner@lothar.com>
Message-ID: <20020925132636.16480.qmail@green.zadka.com>

On Wed, 25 Sep 2002, Brian Warner <warner at lothar.com> wrote:

> app.run()

Why? just leave that line out, and "twistd -y " can run it.




From dp at twistedmatrix.com  Wed Sep 25 18:25:09 2002
From: dp at twistedmatrix.com (Donovan Preston)
Date: Wed, 25 Sep 2002 15:25:09 -0700
Subject: [Twisted-Python] 0.99.2rc3
In-Reply-To: <OF7803A64A.BEF2654A-ONC1256C3F.003ECFB5-C1256C3F.003EDEAF@LocalDomain>
Message-ID: <A662BF3C-D0D5-11D6-9EE8-000393B3EC2C@twistedmatrix.com>

http://prdownloads.sourceforge.net/twisted/

On Wednesday, September 25, 2002, at 04:26 AM, David Marko wrote:

>
> Whert is this release available? The link on www.twistedmatrix.com 
> doesnt work.
>
> David Marko
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: text/enriched
Size: 247 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020925/a457cb55/attachment.bin 

From bruce at cubik.org  Wed Sep 25 18:54:20 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Wed, 25 Sep 2002 16:54:20 -0600
Subject: [Twisted-Python] little bits of woven joy
References: <3D91FFEE.9030702@cubik.org>
Message-ID: <3D923E9C.1010607@cubik.org>

Bruce Mitchener wrote:
> Currently, if you have multiple deferreds in flight and one of them 
> fails, future failures aren't handled  nicely at all.  This patch works 
> on improving that, but isn't perfect yet.
> 
> It also handles a few other things ... callbacks that were having an 
> exception raised didn't display that in the web interface ... and if we 
> do that, we should just return the Failure back to 
> Deferred._runCallbacks as well to swap over to the errback chain.
> 
> If someone has a good (better) idea on handling the multiple-deferreds 
> in flight that error out, I'd love to hear it.  This is actually causing 
> other problems as well that this problem doesn't fix .. where sometimes, 
> parts of the page will be rendered and parts will be formatFailure 
> output ... and sometimes the web connection never closes down and so the 
> browser just spins on it. :)
> 
> There are a couple of other problems as well, but I don't (yet) have a 
> good enough handle on them to discuss them, much less play with fixes.

Well, those problems ended up being a major part of the larger set of 
problems.  They're fixed now in CVS after some debugging and then a good 
idea for the fix from Donovan.

I'm going to leave the existing bugs as documented above around still. 
I'm not entirely happy with my fix or sure that it doesn't occasionally 
do the wrong thing.

  - Bruce




From bruce at cubik.org  Wed Sep 25 20:11:56 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Wed, 25 Sep 2002 18:11:56 -0600
Subject: [Twisted-Python] feature request for microdom
Message-ID: <3D9250CC.8070306@cubik.org>

Hey DOMmies,

Well, since we're using MicroDOM .. we might as well make it kick some 
more ass. :)

In working with the Woven stuff, one thing that would help a lot in the 
formatted failure pages is if the __repr__ of the objects wasn't just this:

   <twisted.web.microdom.Element instance at 0x83a76dc>

but maybe included other information about the element.  The best would 
be to include the name of the file, the line number, the tag name and 
any attributes. :)  But that might be asking for too much.

Is there some happy middle ground?

Still learning Python and Twisted or I'd do this myself.

Cheers,

  - Bruce




From andrew-twisted at puzzling.org  Wed Sep 25 21:03:57 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 26 Sep 2002 11:03:57 +1000
Subject: [Twisted-Python] 0.99.2rc3 .src.rpm
Message-ID: <20020926010357.GB28669@ritsuko.xware.cx>

tigrux on #twisted has kindly provided a .src.rpm.  I've got a copy in
~spiv/twisted-0.99.2rc3-1mdk.src.rpm on pyramid.  Someone should make
this accessible from the website.

It's built for Mandrake I believe, but with some luck RH users will find
it useful too.  Now if only RH had a modern version of Python ;)

And thanks to tigrux for volunteering this!  :)

-Andrew.




From bob at redivi.com  Wed Sep 25 21:28:16 2002
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 25 Sep 2002 21:28:16 -0400
Subject: [Twisted-Python] feature request for microdom
In-Reply-To: <3D9250CC.8070306@cubik.org>
Message-ID: <3B57AA6F-D0EF-11D6-AA8B-0003938210D6@redivi.com>

Not all xml comes from files, or has more than one line.. often with 
over-network or mostly-human-unreadable-anyways xml you'll strip all 
the whitespace, because you can always parse it and "toprettyxml()" it 
if you need later on.

You only really want line numbers and stuff if it doesn't parse when 
you throw the exception

-bob

On Wednesday, September 25, 2002, at 08:11 PM, Bruce Mitchener wrote:

> Hey DOMmies,
>
> Well, since we're using MicroDOM .. we might as well make it kick some 
> more ass. :)
>
> In working with the Woven stuff, one thing that would help a lot in 
> the formatted failure pages is if the __repr__ of the objects wasn't 
> just this:
>
>   <twisted.web.microdom.Element instance at 0x83a76dc>
>
> but maybe included other information about the element.  The best 
> would be to include the name of the file, the line number, the tag 
> name and any attributes. :)  But that might be asking for too much.
>
> Is there some happy middle ground?
>
> Still learning Python and Twisted or I'd do this myself.
>
> Cheers,
>
>  - Bruce




From glyph at twistedmatrix.com  Wed Sep 25 22:15:55 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 25 Sep 2002 21:15:55 -0500 (CDT)
Subject: [Twisted-Python] feature request for microdom
In-Reply-To: <3B57AA6F-D0EF-11D6-AA8B-0003938210D6@redivi.com>
References: <3D9250CC.8070306@cubik.org>
	<3B57AA6F-D0EF-11D6-AA8B-0003938210D6@redivi.com>
Message-ID: <20020925.211555.33798471.glyph@twistedmatrix.com>

On Wed, 25 Sep 2002 21:28:16 -0400, Bob Ippolito <bob at redivi.com> wrote:
> Not all xml comes from files, or has more than one line.. often with 
> over-network or mostly-human-unreadable-anyways xml you'll strip all 
> the whitespace, because you can always parse it and "toprettyxml()" it 
> if you need later on.

It may be useful, then, to say that the Element either (A) has a file/line #,
(B) came from a network stream at a particular point, or (C) was created
dynamically and has no file/line position yet.

> You only really want line numbers and stuff if it doesn't parse when 
> you throw the exception

Eh... Debugging info is always helpful, especially in DOMstuff where you're
post-processing templated nodes and you want to know which are which.

> -bob
> 
> On Wednesday, September 25, 2002, at 08:11 PM, Bruce Mitchener wrote:
> 
> > Hey DOMmies,
> >
> > Well, since we're using MicroDOM .. we might as well make it kick some 
> > more ass. :)

Indeed!  I want it to have really good error reporting, since that's the one
thing that minidom most sorely lacked when I was playing with it.

> > In working with the Woven stuff, one thing that would help a lot in 
> > the formatted failure pages is if the __repr__ of the objects wasn't 
> > just this:
> >
> >   <twisted.web.microdom.Element instance at 0x83a76dc>

> > but maybe included other information about the element.  The best 
> > would be to include the name of the file, the line number, the tag 
> > name and any attributes. :)  But that might be asking for too much.

Hmm.  It might be overkill to include all that stuff, but I'll write a __repr__
that does.  If, in practice, it turns out to be an overbearing amount of
information, we'll scale it back.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020925/2bf4466e/attachment.pgp 

From m at moshez.org  Thu Sep 26 00:58:35 2002
From: m at moshez.org (Moshe Zadka)
Date: 26 Sep 2002 04:58:35 -0000
Subject: [Twisted-Python] 0.99.2rc3
In-Reply-To: <OF7803A64A.BEF2654A-ONC1256C3F.003ECFB5-C1256C3F.003EDEAF@LocalDomain>
References: <OF7803A64A.BEF2654A-ONC1256C3F.003ECFB5-C1256C3F.003EDEAF@LocalDomain>
Message-ID: <20020926045835.25607.qmail@green.zadka.com>

On Wed, 25 Sep 2002, "David Marko" <dmarko at digi-trade.cz> wrote:

> Whert is this release available? The link on www.twistedmatrix.com doesnt 

http://www.twistedmatrix.com/downloads/




From m at moshez.org  Thu Sep 26 01:00:08 2002
From: m at moshez.org (Moshe Zadka)
Date: 26 Sep 2002 05:00:08 -0000
Subject: [Twisted-Python] 0.99.2rc3 .src.rpm
In-Reply-To: <20020926010357.GB28669@ritsuko.xware.cx>
References: <20020926010357.GB28669@ritsuko.xware.cx>
Message-ID: <20020926050008.25649.qmail@green.zadka.com>

On Thu, 26 Sep 2002, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:

> tigrux on #twisted has kindly provided a .src.rpm.  I've got a copy in
> ~spiv/twisted-0.99.2rc3-1mdk.src.rpm on pyramid.  Someone should make
> this accessible from the website.

Can tigrux contribute the .spec file, and someone put it in
admin/?
I can then change the release procedure to create RPMs




From mattam at netcourrier.com  Thu Sep 26 05:44:12 2002
From: mattam at netcourrier.com (mattam at netcourrier.com)
Date: Thu, 26 Sep 2002 11:44:12 +0200
Subject: [Twisted-Python] [PATCH] Accept and accept-language parsing
In-Reply-To: <20020922.073831.133432554.glyph@twistedmatrix.com>
References: <20020921232343.GF493@Mat.Home> <20020922124645.GH493@Mat.Home> <20020922.073831.133432554.glyph@twistedmatrix.com>
Message-ID: <20020926094412.GA30953@Mat.Home>

On Sun, Sep 22, 2002 at 07:38:31AM -0500, Glyph Lefkowitz wrote: 
> On Sun, 22 Sep 2002 14:46:45 +0200, <mattam at netcourrier.com> wrote:
> > On Sun, Sep 22, 2002 at 01:23:43AM +0200, mattam at netcourrier.com wrote: 
> 
> > > 	here's a patch for parsing accept and accept-language HTTP headers.
> 
> > Here's a corriged patch, ready for inclusion (diff with http.py v1.41,
> > -p0).
> 
> Could you please provide some unit tests in this patch, both for the parsing of
> accept-language and the priority queue itself?  That would provide some basic
> documentation of the API as well.  Thanks!
> 
> -- 

I added lowerThan and higherThan methods to PriorityQueue and tests for
all the new things. As it is my first TestCase, please tell me if
anything could be done in a better manner or if my tests are incomplete.

Bye!

-- 
"Life is pleasant. Death is peaceful. It's the transition that's 
troublesome."- Isaac Asimov
-------------- next part --------------
A non-text attachment was scrubbed...
Name: accept.patch.2.gz
Type: application/x-gunzip
Size: 3348 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020926/c1d6f970/attachment.bin 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020926/c1d6f970/attachment.pgp 

From twisted at moshez.org  Thu Sep 26 06:44:36 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 26 Sep 2002 10:44:36 -0000
Subject: [Twisted-Python] Twisted 0.99.2rc5
Message-ID: <20020926104436.28676.qmail@green.zadka.com>

Dear Twisted Developers and Users,

Due to some glitches, 0.99.2rc4 was missed, but we are more than
proud to present the new and improved, 0.99.2rc5, the release candidate.

Please use it and let us know of any problems. As usual, if you
or any of your IMF team be....I mean, as usual, if we do not have
any significant problem reports within 24 hours, this will be the
release.

Your Friendly Neighbourhood Acting Release Manager,
Moshe Zadka





From kevin.m.turner at pobox.com  Thu Sep 26 19:02:03 2002
From: kevin.m.turner at pobox.com (Kevin Turner)
Date: 26 Sep 2002 16:02:03 -0700
Subject: [Twisted-Python] Re: [Twisted-commits] This forces a last modified header [...]
In-Reply-To: <E17ugVq-0006yM-00@pyramid.twistedmatrix.com>
References: <E17ugVq-0006yM-00@pyramid.twistedmatrix.com>
Message-ID: <1033081324.28581.28.camel@troglodyte.funhouse>

> +            # Set the last modified date to ask the browser to
> +            # not use a cached version.
> +            request.setLastModified(time.time())

Setting Last-Modified does not ask the browser not to use a cached
version.  Setting Last-Modified *allows* the browser to use a cached
version.  Setting it to now() is not the best way to say "don't use a
cache", particularly if it had no Last-Modified header on it before. 
Default behaviour is to always send the full page anyway, nothing will
ever change that to NOT_MODIFIED if you never do setLastModified.

If you don't want a page to be cached, you must set the conditions under
which a cache may be used for that page the *first time* you send it.

I'm not sure exactly what your situation is, so I won't try to go into
detail, but I suggest browsing over
http://www.mnot.net/cache_docs/#CONTROL

Cheers,

 - Kevin




From bruce at cubik.org  Thu Sep 26 19:45:23 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Thu, 26 Sep 2002 17:45:23 -0600
Subject: [Twisted-Python] Re: [Twisted-commits] This forces a last modified
 header [...]
References: <E17ugVq-0006yM-00@pyramid.twistedmatrix.com> <1033081324.28581.28.camel@troglodyte.funhouse>
Message-ID: <3D939C13.4000702@cubik.org>

Kevin,

Thanks for the constructive feedback!

Kevin Turner wrote:
>>+            # Set the last modified date to ask the browser to
>>+            # not use a cached version.
>>+            request.setLastModified(time.time())
> 
> Setting Last-Modified does not ask the browser not to use a cached
> version.  Setting Last-Modified *allows* the browser to use a cached
> version.  Setting it to now() is not the best way to say "don't use a
> cache", particularly if it had no Last-Modified header on it before. 
> Default behaviour is to always send the full page anyway, nothing will
> ever change that to NOT_MODIFIED if you never do setLastModified.
> 
> If you don't want a page to be cached, you must set the conditions under
> which a cache may be used for that page the *first time* you send it.

This sort of thing had worked on a previous project, but I suspect that, 
as you said, we were sending the Last-Modified header all the time 
rather than only occasionally like my change made.

The reason that things looked like it was not working correctly was due 
to some asynch handling of page rendering, which was somewhat amusing.

On a page with 2 widgets that did DB queries and that was the target of 
a form submission, this sort of thing could happen:

    * Form submission happens on page 1
    * Woven stuff runs, runs the form code on the server.
    * Commit method fires off asynch DB operation.
    * Browser redirect is issued.
    * Browser requests target page 2.
    * Woven starts to render page 2.
    * Widget 1 gets rendered with DB data.
    * The asynch DB operation finally runs and commits.
    * Widget 2 gets rendered with updated DB data.
    * User views page 2.

Due to the nature of widget 2 on page 2, it wasn't obvious that this was 
happening originally.  Donovan and I are working on making the form 
processing parts of Woven asynch friendly now and one of us will 
hopefully check something in tonight. Either way, I'll remove the buggy 
LastModified code this evening.

> I'm not sure exactly what your situation is, so I won't try to go into
> detail, but I suggest browsing over
> http://www.mnot.net/cache_docs/#CONTROL

Thanks for the pointer.  I'll definitely read through that.

  - Bruce




From andrew-twisted at puzzling.org  Thu Sep 26 20:12:29 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 27 Sep 2002 10:12:29 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] Make the previous patch a little lazier by only getting the model if it's really needed
In-Reply-To: <E17uda8-0005Ya-00@pyramid.twistedmatrix.com>
References: <E17uda8-0005Ya-00@pyramid.twistedmatrix.com>
Message-ID: <20020927001229.GA12939@ritsuko.xware.cx>

On Thu, Sep 26, 2002 at 01:41:48PM -0500, dp CVS wrote:
> Modified files:
> Twisted/twisted/web/woven/view.py 1.5 1.6
> 
> Log message:
> Make the previous patch a little lazier by only getting the model if it's really needed

[..snip..]

> +    def getNodeModel(self, submodel):
> +        if submodel:
> +            modelGetter = DefaultWidget(self.model)
> +            modelGetter.setSubmodel(submodel)
> +            model = modelGetter.getData()
> +        else:
> +            model = None
> +        return model

[..snip..]

>          else:
>              # If no "controller" attribute was specified on the node, see if 
>              # there is a IController adapter registerred for the model.
> +            model = self.getNodeModel(submodel)
>              controllerFactory = components.getAdapterClassWithInheritance(
>                                  model.__class__, 
>                                  mvc.IController, 
>                                  controllerFactory)

Isn't this going to barf when someone passes None (or other false
values) for submodel to getNodeController in Python 2.1?  You can't do
None.__class__ in 2.1.  

I've never used woven (or any of its previous incarnations) so I'm quite
willing to accept that I might be wrong about this :)

-Andrew.




From andrew-twisted at puzzling.org  Thu Sep 26 20:26:50 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 27 Sep 2002 10:26:50 +1000
Subject: [Twisted-Python] Twisted 0.99.2rc5
In-Reply-To: <20020926104436.28676.qmail@green.zadka.com>
References: <20020926104436.28676.qmail@green.zadka.com>
Message-ID: <20020927002650.GB12939@ritsuko.xware.cx>

On Thu, Sep 26, 2002 at 10:44:36AM -0000, Moshe Zadka wrote:
> Dear Twisted Developers and Users,
> 
> Due to some glitches, 0.99.2rc4 was missed, but we are more than
> proud to present the new and improved, 0.99.2rc5, the release candidate.

The links on the download page don't work.

Also, someone should change "currently available only from us" (with its
lack of punctuation or capitalisation) to "Release candidates are not
mirrored, so they are only available from twistedmatrix.com."  Or even
better, just delete that sentence entirely and make the links just work,
even if they do have to point to tm.com rather than sourceforge.

-Andrew.




From dwayne at swankymode.com  Thu Sep 26 22:01:00 2002
From: dwayne at swankymode.com (Bob Dog)
Date: Thu, 26 Sep 2002 19:01:00 -0700
Subject: [Twisted-Python] OS X build issues..
In-Reply-To: <0780B779-CDA5-11D6-B3A7-0003938210D6@redivi.com>
Message-ID: <B9B909EC.CB9%dwayne@swankymode.com>

Bob,
I just wanted to let you know that I'd be interested in trying twisted if
you get a patch for OS X. I just wanted to let you know there was an
interest out there.

Dwayne

P.S. I installed your mod_pyton a while back, works great


On 9/21/02 1:59 PM, "Bob Ippolito" <bob at redivi.com> wrote:

> Just FYI, the C modules don't build on OS X.  Shouldn't be a difficult
> fix, perhaps I'll do a patch later..  not sure if I'll have the time.
> 
> -bob
> 
> checking for sys/poll.h ...
> conftest.c:1: header file 'sys/poll.h' not found
> cpp-precomp: warning: errors during smart preprocessing, retrying in
> basic mode
> The C reactor is unavailable on this system.
> checking for rpc/pmap_clnt.h ...
> /usr/include/rpc/pmap_clnt.h:91: undefined type, found `bool_t'
> /usr/include/rpc/pmap_clnt.h:91: syntax error, found `int'
> /usr/include/rpc/pmap_clnt.h:91: illegal function definition, found `)'
> /usr/include/rpc/pmap_clnt.h:92: undefined type, found `bool_t'
> /usr/include/rpc/pmap_clnt.h:94: syntax error, found `u_long'
> /usr/include/rpc/pmap_clnt.h:94: illegal function definition, found `)'
> /usr/include/rpc/pmap_clnt.h:99: syntax error, found `char'
> /usr/include/rpc/pmap_clnt.h:99: illegal function definition, found `)'
> /usr/include/rpc/pmap_clnt.h:103: undefined type, found `u_short'
> /usr/include/rpc/pmap_clnt.h:103: syntax error, found `u_long'
> /usr/include/rpc/pmap_clnt.h:103: illegal function definition, found `)'
> cpp-precomp: warning: errors during smart preprocessing, retrying in
> basic mode
> In file included from conftest.c:2:
> /usr/include/rpc/pmap_clnt.h:91: parse error before "pmap_set"
> /usr/include/rpc/pmap_clnt.h:91: parse error before "int"
> /usr/include/rpc/pmap_clnt.h:92: parse error before "pmap_unset"
> /usr/include/rpc/pmap_clnt.h:94: parse error before "u_long"
> /usr/include/rpc/pmap_clnt.h:99: parse error before "char"
> /usr/include/rpc/pmap_clnt.h:99: parse error before ')' token
> /usr/include/rpc/pmap_clnt.h:103: parse error before "pmap_getport"
> /usr/include/rpc/pmap_clnt.h:103: parse error before "u_long"
> The C reactor is unavailable on this system.
> building 'twisted.spread.cBanana' extension
> creating build/temp.darwin-6.1-Power Macintosh-2.2
> gcc -DNDEBUG -g -O3 -Wall -Wstrict-prototypes -no-cpp-precomp
> -I/usr/include/python2.2 -c twisted/spread/cBanana.c -o
> build/temp.darwin-6.1-Power Macintosh-2.2/cBanana.o
> gcc -arch i386 -arch ppc -bundle -flat_namespace -undefined suppress
> build/temp.darwin-6.1-Power Macintosh-2.2/cBanana.o -o
> build/lib.darwin-6.1-Power Macintosh-2.2/twisted/spread/cBanana.so
> ld: for architecture i386
> ld: warning /usr/lib/bundle1.o cputype (18, architecture ppc) does not
> match cputype (7) for specified -arch flag: i386 (file not loaded)
> ld: warning build/temp.darwin-6.1-Power Macintosh-2.2/cBanana.o cputype
> (18, architecture ppc) does not match cputype (7) for specified -arch
> flag: i386 (file not loaded)
> ld: warning /usr/lib/gcc/darwin/3.1/libgcc.a archive's cputype (18,
> architecture ppc) does not match cputype (7) for specified -arch flag:
> i386 (can't load from it)
> ld: warning /usr/lib/libSystem.dylib cputype (18, architecture ppc)
> does not match cputype (7) for specified -arch flag: i386 (file not
> loaded)
> building 'twisted.internet.cReactor' extension
> gcc -DNDEBUG -g -O3 -Wall -Wstrict-prototypes -no-cpp-precomp
> -I/usr/include/python2.2 -c twisted/internet/cReactor/cReactor.c -o
> build/temp.darwin-6.1-Power Macintosh-2.2/cReactor.o
> In file included from twisted/internet/cReactor/cReactor.c:22:
> twisted/internet/cReactor/cReactor.h:23:22: sys/poll.h: No such file or
> directory
> twisted/internet/cReactor/cReactor.c: In function
> `iterate_rebuild_pollfd_arrray':
> twisted/internet/cReactor/cReactor.c:508: sizeof applied to an
> incomplete type
> twisted/internet/cReactor/cReactor.c:541: dereferencing pointer to
> incomplete type
> twisted/internet/cReactor/cReactor.c:542: dereferencing pointer to
> incomplete type
> twisted/internet/cReactor/cReactor.c:549: dereferencing pointer to
> incomplete type
> twisted/internet/cReactor/cReactor.c:549: `POLLIN' undeclared (first
> use in this function)
> twisted/internet/cReactor/cReactor.c:549: (Each undeclared identifier
> is reported only once
> twisted/internet/cReactor/cReactor.c:549: for each function it appears
> in.)
> twisted/internet/cReactor/cReactor.c:558: dereferencing pointer to
> incomplete type
> twisted/internet/cReactor/cReactor.c:558: `POLLOUT' undeclared (first
> use in this function)
> twisted/internet/cReactor/cReactor.c:562: dereferencing pointer to
> incomplete type
> twisted/internet/cReactor/cReactor.c:564: increment of pointer to
> unknown structure
> twisted/internet/cReactor/cReactor.c:564: arithmetic on pointer to an
> incomplete type
> twisted/internet/cReactor/cReactor.c: In function
> `iterate_process_pollfd_array':
> twisted/internet/cReactor/cReactor.c:588: increment of pointer to
> unknown structure
> twisted/internet/cReactor/cReactor.c:588: arithmetic on pointer to an
> incomplete type
> twisted/internet/cReactor/cReactor.c:591: dereferencing pointer to
> incomplete type
> twisted/internet/cReactor/cReactor.c:597: dereferencing pointer to
> incomplete type
> twisted/internet/cReactor/cReactor.c:602: dereferencing pointer to
> incomplete type
> twisted/internet/cReactor/cReactor.c:602: `POLLIN' undeclared (first
> use in this function)
> twisted/internet/cReactor/cReactor.c:607: dereferencing pointer to
> incomplete type
> twisted/internet/cReactor/cReactor.c:607: `POLLOUT' undeclared (first
> use in this function)
> twisted/internet/cReactor/cReactor.c:612: dereferencing pointer to
> incomplete type
> twisted/internet/cReactor/cReactor.c: In function `iterate_internal':
> twisted/internet/cReactor/cReactor.c:777: warning: implicit declaration
> of function `poll'
> error: command 'gcc' failed with exit status 1
> 
> 
> 




From radix at twistedmatrix.com  Fri Sep 27 05:03:55 2002
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 27 Sep 2002 11:03:55 +0200
Subject: [Twisted-Python] OS X build issues..
In-Reply-To: <B9B909EC.CB9134537664wayne@swankymode.com>
References: <0780B779-CDA5-11D6-B3A7-0003938210D6@redivi.com> <B9B909EC.CB9134537664wayne@swankymode.com>
Message-ID: <20020927090355.GA3239@toshi>

On Thu, Sep 26, 2002 at 07:01:00PM -0700, Bob Dog wrote:
> Bob,
> I just wanted to let you know that I'd be interested in trying twisted if
> you get a patch for OS X. I just wanted to let you know there was an
> interest out there.
> 
> Dwayne
> 
> P.S. I installed your mod_pyton a while back, works great
> 

Twisted, afaik, works fine on OS X -- the C modules are optional and are
only for speed; they offer you no extra functionality.




From bob at redivi.com  Fri Sep 27 08:03:15 2002
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 27 Sep 2002 08:03:15 -0400
Subject: [Twisted-Python] OS X build issues..
In-Reply-To: <20020927090355.GA3239@toshi>
Message-ID: <1AA55E5D-D211-11D6-9962-0003938210D6@redivi.com>

On Friday, September 27, 2002, at 05:03 AM, Christopher Armstrong wrote:

> On Thu, Sep 26, 2002 at 07:01:00PM -0700, Bob Dog wrote:
>> Bob,
>> I just wanted to let you know that I'd be interested in trying  
>> twisted if
>> you get a patch for OS X. I just wanted to let you know there was an
>> interest out there.
>>
>> Dwayne
>>
>> P.S. I installed your mod_pyton a while back, works great
>>
>
> Twisted, afaik, works fine on OS X -- the C modules are optional and  
> are
> only for speed; they offer you no extra functionality.
>

Yeah, what he said, I've been using twisted for OS X as long as I've  
been using python on OS X.  "python setup.py install" doesn't fail  
gracefully, however.. you basically just have to "sudo mv  
Twisted-0.99.2rc5/twisted /usr/lib/python2.2/site-packages/twisted" (if  
you're using jaguar unix python).. or if you're using a framework  
python then you need to mv it into  
/Library/Frameworks/Python/Versions/Current/lib/python2.X/site- 
packages/ where python2.X is the version (likely 2.2 or 2.3)

-bob




From jn at who.net  Fri Sep 27 10:15:37 2002
From: jn at who.net (john nielsen)
Date: Fri, 27 Sep 2002 09:15:37 -0500
Subject: [Twisted-Python] TwistedQuotes example help
Message-ID: <20020927141537.15793.qmail@iname.com>

I am trying to use the TwistedQuotes 
talked about in Twisted-0.99.2\doc\howto\plugin.html
and located at Twisted-0.99.2\doc\howto\listings

I want to make sure I understand this right:

To get the example to work, I should do the following steps:
1)put the TwistedQuotes dir in my path

I made a .pth file w/
   C:/Python22/Lib/site-packages/twisted/TwistedQuotes
   C:/Python22/lib/site-packages/twisted
and sys.path shows them

2)put plugins.tml in site-packages\twisted\plugins.tml
 modifiying it to point to: "twisted.TwistedQuotes.quotetap"

3)execute site-packages\twisted\scripts\mktap qotd
4)run twistd -f qotd

Everything looks to work w/out error  but then to test the server:
pbquoteclient.py returns w/Failed to obtain quote

or 

nc -v localhost 8007
which returns w/connection refused


Am I missing a step?
Thanks for any help,

john

-- 
__________________________________________________________
Sign-up for your own FREE Personalized E-mail at Mail.com
http://www.mail.com/?sr=signup




From dp at twistedmatrix.com  Fri Sep 27 12:47:08 2002
From: dp at twistedmatrix.com (Donovan Preston)
Date: Fri, 27 Sep 2002 09:47:08 -0700
Subject: [Twisted-Python] OS X build issues..
In-Reply-To: <B9B909EC.CB9%dwayne@swankymode.com>
Message-ID: <C30AB8D8-D238-11D6-A92F-000393B3EC2C@twistedmatrix.com>

On Thursday, September 26, 2002, at 07:01 PM, Bob Dog wrote:

> Bob,
> I just wanted to let you know that I'd be interested in trying twisted 
> if
> you get a patch for OS X. I just wanted to let you know there was an
> interest out there.
>
> Dwayne

Just to let you know, Twisted runs with no issues on OS X already -- 
it's just the C extension modules (which accelerate certain parts of 
Twisted) that don't. The pure python equivalents work fine, however.

Donovan




From acapnotic at twistedmatrix.com  Fri Sep 27 18:14:45 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 27 Sep 2002 15:14:45 -0700
Subject: [Twisted-Python] async returns from DefaultAuthorizer.addIdentity
Message-ID: <1033164908.32420.7.camel@troglodyte.funhouse>

Authorizer.addCallback's documentation says "Create an identity and make
a callback when it has been created."  So I figured that meant I should
have DefaultAuthorizer return a defer.succeed/fail instead of
None/raise.  But returning a defer.fail makes
test_cred.AuthorizerTestCase.test_addIdent fail, as it has an
assertRaises in there.

So who is wrong?  The documentation, my interpretation of the
documentation, or the unit test?

"Unit-tests-never-lie"ly yours,

 - Acap

-- 
The moon is waning gibbous, 70.1% illuminated, 20.2 days old.




From typo at soniq.net  Fri Sep 27 18:18:12 2002
From: typo at soniq.net (Paul Boehm)
Date: Sat, 28 Sep 2002 00:18:12 +0200
Subject: [Twisted-Python] jfi: twisted pygame :)
Message-ID: <20020927221812.GA12049@soniq.net>

took me longer to write this mail, than to convert a simple pygame
based scrolling game to twisted + pygame. 

works great: 
without fps limits i lose about 3-5 fps compared to the Clock.tick(n)
based loop.

if the game engine takes care of events and updates with a single
call per frame, all you need to do is get rid of pygame.time.Clock
calls, and do scheduled updates with reactor.callLater.

  paul



From acapnotic at twistedmatrix.com  Fri Sep 27 19:04:05 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 27 Sep 2002 16:04:05 -0700
Subject: [Twisted-Python] Invalidating a perspective.
Message-ID: <1033167991.32425.20.camel@troglodyte.funhouse>

I'm trying to figure out how to shut down a Service.  Assuming you're
keeping a list of perspectives signed on (presumably with the
perspective.attached and detached methods), how do you kick them off? 
You can just nuke the transport, but with pb.IdentityConnector enabling
the use of multiple services over a single transport, that probably
isn't a good idea anymore.  

Is there a way to tell the broker to mark the perspective as stale or
something?  Seems like this isn't the only time when you'd want to
invalidate all RemoteReferences to an object.

-- 
The moon is waning gibbous, 69.8% illuminated, 20.2 days old.




From acapnotic at twistedmatrix.com  Fri Sep 27 20:06:47 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 27 Sep 2002 17:06:47 -0700
Subject: [Twisted-Python] async returns from
	DefaultAuthorizer.addIdentity
In-Reply-To: <1033164908.32420.7.camel@troglodyte.funhouse>
References: <1033164908.32420.7.camel@troglodyte.funhouse>
Message-ID: <1033171610.32420.41.camel@troglodyte.funhouse>

On Fri, 2002-09-27 at 15:14, Kevin Turner wrote:
> Authorizer.addCallback's 
Authorizer.addIdentity, I mean.

> But returning a defer.fail makes
> test_cred.AuthorizerTestCase.test_addIdent fail, as it has an
> assertRaises in there.

and code depends on this synchronous behaviour, including
perspective.makeIdentity, which is used in in many .tap-builders'
updateApplication, also handled synchronously.

-- 
The moon is waning gibbous, 69.5% illuminated, 20.3 days old.




From twisted at itamarst.org  Fri Sep 27 21:23:04 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 27 Sep 2002 21:23:04 -0400
Subject: [Twisted-Python] ANN: Twisted 0.99.2 - now with stable internet
Message-ID: <20020927212304.5e46d110.twisted@itamarst.org>

(this is short version of what I sent to comp.lang.python)

The Twisted team is proud to announce Twisted 0.99.2, which includes a API-stable version of twisted.internet, Twisted's event-driven networking core (like asyncore, but more so).

[...]

With the twisted.internet APIs now stable, we feel Twisted provides the best networking platform available today for Python. This also gives us a solid basis for working on stable APIs for the rest of Twisted's packages.

[... more marketing stuff cut ...]


What's new in 0.99.2
====================

- Improved HTTP support - bug fixes, caching APIs

- WOVEN, a web templating system (formerly known as DOMTemplate)

- microdom, a very small DOM implementation

- An inetd server written with Twisted (coming soon to a Debian mirror near you)

- Switched to epydoc for API docs (http://epydoc.sf.net - it rocks!)

- RDBMS storage for the NNTP server, and improved NNTP protocol support

- Finalized process-running API

- Huge numbers of bug fixes and feature improvements, and better docs



From acapnotic at twistedmatrix.com  Fri Sep 27 21:44:19 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 27 Sep 2002 18:44:19 -0700
Subject: [Twisted-Python] CVSToys 0.9.2.
Message-ID: <1033177462.32415.52.camel@troglodyte.funhouse>

CVSToys, the beast behind that cute little <cvs> bot you all know and
love, v0.9.2 is available for download.  At this point, having taken
care of the nasty business that happened when you reconfigured a server
that was running a PBService, I'm running low on known bugs.  So check
it out, help write tests, find more bugs!  Let me know if you see
anything which looks like it needs straightening out before 1.0.

http://twistedmatrix.com/users/acapnotic/wares/code/CVSToys/

Share and enjoy,

 - Kevin 
(Acapnotic)

-- 
The moon is waning gibbous, 68.8% illuminated, 20.3 days old.





From jml at mumak.net  Sat Sep 28 01:14:38 2002
From: jml at mumak.net (Jonathan Lange)
Date: 28 Sep 2002 15:14:38 +1000
Subject: [Twisted-Python] InputImage, ImageHandler -- Woven [PATCH]
Message-ID: <1033190080.15766.85.camel@sting>

A widget and an InputHandler to better support <input type="image" ../>
in Woven. I'm not too happy with the Widget, as it requires the src=""
to be set in the template. 

But, FWIW, here's the patch.

pax et amor,
jml


Index: twisted/web/woven/input.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/woven/input.py,v
retrieving revision 1.4
diff -u -r1.4 input.py
--- twisted/web/woven/input.py  28 Sep 2002 03:45:45 -0000      1.4
+++ twisted/web/woven/input.py  28 Sep 2002 06:00:05 -0000
@@ -174,6 +174,30 @@

 ListHandler = List

+class ImageHandler(InputHandler):
+    def getInput(self, request):
+        x, y = (request.args.get(self.submodel + '.x', None),
+                request.args.get(self.submodel + '.y', None))
+        if(x != None and y != None):
+            return x[0], y[0]
+        else:
+            return None
+
+    def check(self, request, data):
+        if data is None: return None
+        if len(data) != 2: return ()
+        try:
+            int(data[0])
+            int(data[1])
+            return 1
+        except (TypeError, ValueError):
+            return 0
+
+    def handleInvalid(self, request, data):
+        if data is not None:
+            self.view.setError(request, "%s is not a valid coordinate." % str(data))
+
+
 class NewObject(SingleValue):
     """
     Check to see if the name the user entered is valid.
Index: twisted/web/woven/widgets.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/woven/widgets.py,v
retrieving revision 1.15
diff -u -r1.15 widgets.py
--- twisted/web/woven/widgets.py        28 Sep 2002 03:45:45 -0000      1.15
+++ twisted/web/woven/widgets.py        28 Sep 2002 06:00:07 -0000
@@ -369,6 +369,12 @@
         self.add(Text(self.getData()))
         return Input.generateDOM(self, request, node)

+class InputImage(Input):
+    def initialize(self):
+        self['type'] = 'image'
+    def generateDOM(self, request, node):
+        return Widget.generateDOM(self, request, node)
+
 class Anchor(Widget):
     tagName = 'a'
     def initialize(self):





From glyph at twistedmatrix.com  Sat Sep 28 04:29:07 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 28 Sep 2002 03:29:07 -0500 (CDT)
Subject: [Twisted-Python] async returns from
 DefaultAuthorizer.addIdentity
In-Reply-To: <1033171610.32420.41.camel@troglodyte.funhouse>
References: <1033164908.32420.7.camel@troglodyte.funhouse>
	<1033171610.32420.41.camel@troglodyte.funhouse>
Message-ID: <20020928.032907.55499654.glyph@twistedmatrix.com>

On 27 Sep 2002 17:06:47 -0700, Kevin Turner <acapnotic at twistedmatrix.com> wrote:
> On Fri, 2002-09-27 at 15:14, Kevin Turner wrote:
> > Authorizer.addCallback's 
> Authorizer.addIdentity, I mean.
> 
> > But returning a defer.fail makes
> > test_cred.AuthorizerTestCase.test_addIdent fail, as it has an
> > assertRaises in there.
> 
> and code depends on this synchronous behaviour, including
> perspective.makeIdentity, which is used in in many .tap-builders'
> updateApplication, also handled synchronously.

Not that this isn't an error, but... from what I can see, makeIdentity's
results are thrown away by the caller everywhere it's being called.  I don't
think it would break too terribly much to change it.  (The unit tests may just
be overzealous.)

dbcred seems to return the documented value from this, so in order to get the
unit tests to work for a DatabaseAuthorizer we're going to have to fix it
anyway.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020928/6402a808/attachment.pgp 

From nick at zork.net  Sat Sep 28 01:55:29 2002
From: nick at zork.net (Nick Moffitt)
Date: Fri, 27 Sep 2002 22:55:29 -0700
Subject: [Twisted-Python] CVSToys 0.9.2.
In-Reply-To: <1033177462.32415.52.camel@troglodyte.funhouse>
References: <1033177462.32415.52.camel@troglodyte.funhouse>
Message-ID: <20020928055529.GE25377@zork.net>

begin  Kevin Turner  quotation:
> CVSToys, the beast behind that cute little <cvs> bot you all know
> and love, v0.9.2 is available for download.  At this point, having
> taken care of the nasty business that happened when you reconfigured
> a server that was running a PBService, I'm running low on known
> bugs.  So check it out, help write tests, find more bugs!  Let me
> know if you see anything which looks like it needs straightening out
> before 1.0.

I only just installed twisted, so I may be doing bad horrible things,
but I get the following when trying to do a "./setup.py build":

    running build_scripts
    creating build/scripts
    error: file 'bin/loginfo' does not exist

Is that something that's meant to be in the distribution tarball?

-- 
A: No.
Q: Should I include quotations after my reply?



From acapnotic at twistedmatrix.com  Sat Sep 28 23:41:40 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 28 Sep 2002 20:41:40 -0700
Subject: [Twisted-Python] CVSToys 0.9.2.
In-Reply-To: <20020928055529.GE25377@zork.net>
References: <1033177462.32415.52.camel@troglodyte.funhouse> 
	<20020928055529.GE25377@zork.net>
Message-ID: <1033270904.21880.8.camel@troglodyte.funhouse>

On Fri, 2002-09-27 at 22:55, Nick Moffitt wrote:
> I only just installed twisted, so I may be doing bad horrible things,
> but I get the following when trying to do a "./setup.py build":

Oops.  That wasn't you or Twisted, that was me being ignorant of how
distutils works.  My bad.

A new release is out, and I checked to make sure 'setup.py build' works
this time.

http://twistedmatrix.com/users/acapnotic/wares/code/CVSToys/CVSToys-0.9.3.tar.bz2

Thanks for the feedback,

 - Kevin

-- 
The moon is last quarter, 58.5% illuminated, 21.3 days old.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020928/6bdd8ff1/attachment.pgp 

From twisted at moshez.org  Mon Sep 30 04:09:04 2002
From: twisted at moshez.org (Moshe Zadka)
Date: Mon, 30 Sep 2002 03:09:04 -0500
Subject: [Twisted-Python] Using Generate Domdocs outside Twisted
Message-ID: <E17vvc0-0006V6-00@pyramid.twistedmatrix.com>

The following patch gives g-d graceful recovery fromt he lack
of the non-standard py2html

Index: admin/generate-domdocs
===================================================================
RCS file: /cvs/Twisted/admin/generate-domdocs,v
retrieving revision 1.23
diff -u -r1.23 generate-domdocs
--- admin/generate-domdocs	30 Sep 2002 07:58:03 -0000	1.23
+++ admin/generate-domdocs	30 Sep 2002 08:01:24 -0000
@@ -32,7 +32,6 @@
 import cStringIO
 import time
 # syntax highlighting for Python source
-import py2html, PyFontify
 from twisted import copyright
 from twisted.python import usage
 
@@ -100,6 +99,16 @@
                 return v
 
 def fontifyFiles(infile, outfile):
+    try:
+        import py2html, PyFontify
+    except ImportError:
+        s = infile.read().replace('&', '&amp;').replace('<', '&lt;').\
+                          replace('>', '&gt;')
+        outfile.write('''\
+<pre>
+%s
+</pre>''' % s)
+        return
     py2html.PrettyPrint(PyFontify.fontify,
                         "rawhtml", "color").file_filter(infile, outfile)
     





From twisted at moshez.org  Mon Sep 30 05:18:15 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 30 Sep 2002 09:18:15 -0000
Subject: [Twisted-Python] Zip Death?
Message-ID: <20020930091815.22760.qmail@green.zadka.com>

Dear Twisted Developers,

Zip is the least efficient (by far) archiver, and is stealing huge
amounts of bandwidth from everybody. Unless there are objections,
I will change r-t to stop creating Zip archives.

Thanks,
M

PS
Will the guy who created RPMs please send the .spec here? Thanks. 





From elloyd at lancaster.lib.pa.us  Mon Sep 30 09:33:22 2002
From: elloyd at lancaster.lib.pa.us (Eron Lloyd)
Date: Mon, 30 Sep 2002 09:33:22 -0400
Subject: [Twisted-Python] Zip Death?
In-Reply-To: <20020930091815.22760.qmail@green.zadka.com>
References: <20020930091815.22760.qmail@green.zadka.com>
Message-ID: <200209300933.22622.elloyd@lancaster.lib.pa.us>

But isn't zip one of the most widely used cross-platform compression formats? 
I'd much rather use something like bzip2 as well, but I don't know if there 
is support for it on all other target platforms. Another big argument I'd put 
out there is that with the recently added support for Zip files in the 
Standard Library, that's a sign of broad support for zip as a python 
compression standard (maybe that's not the best word). I believe there is a 
proposal to modify the basic python import facilities to be able to handle 
zip files as modules or packages, too. How much performance gain are we 
losing?

Regards,

Eron

On Monday 30 September 2002 5:18 am, Moshe Zadka wrote:
> Dear Twisted Developers,
>
> Zip is the least efficient (by far) archiver, and is stealing huge
> amounts of bandwidth from everybody. Unless there are objections,
> I will change r-t to stop creating Zip archives.
>
> Thanks,
> M
>
> PS
> Will the guy who created RPMs please send the .spec here? Thanks.
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> ---
> [This E-mail scanned for viruses by Declude Virus]

---
[This E-mail scanned for viruses by Declude Virus]




From twisted at itamarst.org  Mon Sep 30 09:49:25 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 30 Sep 2002 09:49:25 -0400
Subject: [Twisted-Python] Zip Death?
In-Reply-To: <200209300933.22622.elloyd@lancaster.lib.pa.us>
References: <20020930091815.22760.qmail@green.zadka.com>
	<200209300933.22622.elloyd@lancaster.lib.pa.us>
Message-ID: <20020930094925.7efeaead.twisted@itamarst.org>

On Mon, 30 Sep 2002 09:33:22 -0400
Eron Lloyd <elloyd at lancaster.lib.pa.us> wrote:

> But isn't zip one of the most widely used cross-platform compression formats? 

WinZip supports tar.gz.

> out there is that with the recently added support for Zip files in the 
> Standard Library, that's a sign of broad support for zip as a python 
> compression standard (maybe that's not the best word). I believe there is a 
> proposal to modify the basic python import facilities to be able to handle 
> zip files as modules or packages, too.

Which is not what we're distributing anyway, so that's irrelevant - you won't be able to import the Twisted ZIP after these patches go in.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
Available for Python, Twisted, Zope and Java consulting



From twisted at itamarst.org  Mon Sep 30 09:56:28 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 30 Sep 2002 09:56:28 -0400
Subject: [Twisted-Python] Fw: patch for policy stuff/test and example
Message-ID: <20020930095628.0d84a0ed.twisted@itamarst.org>

Attached is sjj's suggestion for factory policies. Glyph wants to do something
different, namely:

http://zelda.twistedmatrix.com/connlimit.py.txt

-------------------------------------------------------------------------------
Begin forwarded message:

Date: Mon, 30 Sep 2002 16:00:48 +1000 (EST)
From: Sam Jordan <sam at twistedmatrix.com>
To: twisted at itamarst.org
Subject: patch for policy stuff/test and example


Hi,

Here is the patch (created via cvs diff -u > policy.patch).
I just noticed that the comment for 'verify' notes the tuple for addr is 
(type, host, port) but it may just be (host, port) i'll fix this comment after 
commit.

Feel free to discuss any problems you have with it.

Cheers,

Sam.

-- 
#python quote of the century:
<glyph> h3x: so... you're a professional extortionist?
<h3x> pretty much
<glyph> h3x: do you offer professional apprenticeships?
<h3x> i should
<dash> glyph: gah, you beat me to it

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: policy.patch
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20020930/0e95b314/attachment.txt 
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: policy_example.py
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20020930/0e95b314/attachment-0001.txt 

From glyph at twistedmatrix.com  Mon Sep 30 10:04:48 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 30 Sep 2002 09:04:48 -0500 (CDT)
Subject: [Twisted-Python] Zip Death?
In-Reply-To: <20020930094925.7efeaead.twisted@itamarst.org>
References: <20020930091815.22760.qmail@green.zadka.com>
	<200209300933.22622.elloyd@lancaster.lib.pa.us>
	<20020930094925.7efeaead.twisted@itamarst.org>
Message-ID: <20020930.090448.93018550.glyph@twistedmatrix.com>


On Mon, 30 Sep 2002 09:49:25 -0400, Itamar Shtull-Trauring <twisted at itamarst.org> wrote:

> Which is not what we're distributing anyway, so that's irrelevant - you won't
> be able to import the Twisted ZIP after these patches go in.

Ideally, what I'd really like is to create one "upstream" (in the debian sense)
release and then have packagers go to work on that one archive directly.
Regardless of whether we're releasing archives in .tgz or .zip or .sit or .arj
or whatever, Twisted isn't really "packaged" for anything but unix on a regular
basis.  The user-experience is almost entirely unix-centric.

As a Linux user myself it is unlikely that I will soon have motivation to
correct this deficiency :).  Is anyone out there in Twisted land willing to
take up the mantle and make a Windows- or Mac-friendly installation of Twisted,
at least for major releases?

If we are going to support importable ZIP archives, we should be viewing it
like this: it shouldn't be a full copy of everything that comes in the tarball,
just the installation relevant to that "platform".

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020930/321afe79/attachment.pgp 

From elloyd at lancaster.lib.pa.us  Mon Sep 30 11:12:01 2002
From: elloyd at lancaster.lib.pa.us (Eron Lloyd)
Date: Mon, 30 Sep 2002 11:12:01 -0400
Subject: [Twisted-Python] Zip Death?
In-Reply-To: <20020930.090448.93018550.glyph@twistedmatrix.com>
References: <20020930091815.22760.qmail@green.zadka.com> <20020930094925.7efeaead.twisted@itamarst.org> <20020930.090448.93018550.glyph@twistedmatrix.com>
Message-ID: <200209301112.01793.elloyd@lancaster.lib.pa.us>

Good points. Is there anything in distutils that could aid in this?

Eron

On Monday 30 September 2002 10:04 am, Glyph Lefkowitz wrote:
> On Mon, 30 Sep 2002 09:49:25 -0400, Itamar Shtull-Trauring 
<twisted at itamarst.org> wrote:
> > Which is not what we're distributing anyway, so that's irrelevant - you
> > won't be able to import the Twisted ZIP after these patches go in.
>
> Ideally, what I'd really like is to create one "upstream" (in the debian
> sense) release and then have packagers go to work on that one archive
> directly. Regardless of whether we're releasing archives in .tgz or .zip or
> .sit or .arj or whatever, Twisted isn't really "packaged" for anything but
> unix on a regular basis.  The user-experience is almost entirely
> unix-centric.
>
> As a Linux user myself it is unlikely that I will soon have motivation to
> correct this deficiency :).  Is anyone out there in Twisted land willing to
> take up the mantle and make a Windows- or Mac-friendly installation of
> Twisted, at least for major releases?
>
> If we are going to support importable ZIP archives, we should be viewing it
> like this: it shouldn't be a full copy of everything that comes in the
> tarball, just the installation relevant to that "platform".

---
[This E-mail scanned for viruses by Declude Virus]




From iko at strakt.com  Mon Sep 30 11:01:36 2002
From: iko at strakt.com (Anders Hammarquist)
Date: Mon, 30 Sep 2002 17:01:36 +0200
Subject: [Twisted-Python] Improvements to twisted.protocols.smtp
Message-ID: <200209301501.g8UF1a9u001275@fido.strakt.com>

Hi!

We have a need for an SMTP server, and found the current implementation
a bit fragile. This patch should robustify it, and also improve RFC 2821
compliance (no guarantees though).

I didn't touch the SMTP client (apart from adding the double-dot protocol),
but I suspect I'll look over it as well.

Comments, etc are welcome. The patch is relative to twisted CVS as of a 
few minutes ago.

Regards,
/Anders

-- 
 -- Of course I'm crazy, but that doesn't mean I'm wrong.
Anders Hammarquist                                  | iko at strakt.com
AB Strakt                                           | Tel: +46 31 711 08 70
G|teborg, Sweden.           RADIO: SM6XMM and N2JGL | Fax: +46 31 711 08 80

-------------- next part --------------
Index: twisted/protocols/basic.py
===================================================================
RCS file: /cvs/Twisted/twisted/protocols/basic.py,v
retrieving revision 1.23
diff -u -u -r1.23 basic.py
--- twisted/protocols/basic.py	23 Sep 2002 08:51:29 -0000	1.23
+++ twisted/protocols/basic.py	30 Sep 2002 14:49:24 -0000
@@ -150,12 +150,14 @@
                 line, self.__buffer = self.__buffer.split(self.delimiter, 1)
             except ValueError:
                 if len(self.__buffer) > self.MAX_LENGTH:
-                    self.transport.loseConnection()
+                    line, self.__buffer = self.__buffer, ''
+                    self.lineLengthExceeded(line)
                     return
                 break
             else:
                 if len(line) > self.MAX_LENGTH:
-                    self.transport.loseConnection()
+                    line, self.__buffer = self.__buffer, ''
+                    self.lineLengthExceeded(line)
                     return
                 self.lineReceived(line)
                 if self.transport.disconnecting:
@@ -197,6 +199,12 @@
         """Sends a line to the other end of the connection.
         """
         self.transport.write(line + self.delimiter)
+
+    def lineLengthExceeded(self, line):
+        """Called when the maximum line length has been reached.
+        Override if it needs to be dealt with in some special way.
+        """
+        self.transport.loseConnection()
 
 
 class Int32StringReceiver(protocol.Protocol):
Index: twisted/protocols/smtp.py
===================================================================
RCS file: /cvs/Twisted/twisted/protocols/smtp.py,v
retrieving revision 1.23
diff -u -u -r1.23 smtp.py
--- twisted/protocols/smtp.py	19 Aug 2002 03:21:58 -0000	1.23
+++ twisted/protocols/smtp.py	30 Sep 2002 14:49:24 -0000
@@ -18,10 +18,10 @@
 """
 
 from twisted.protocols import basic
-from twisted.internet import protocol, defer
+from twisted.internet import protocol, defer, reactor
 from twisted.python import log
 
-import os, time, string, operator
+import os, time, string, operator, re
 
 class SMTPError(Exception):
     pass
@@ -49,15 +49,93 @@
         self.deferred.errback(arg)
         self.done = 1
 
+class AddressError(SMTPError):
+    "Parse error in address"
+    pass
+
+# Character classes for parsing addresses
+atom = r"-A-Za-z0-9!#$%&'*+/=?^_`{|}~"
+
+class Address:
+    """Parse and hold an RFC 2821 address.
+
+    Source routes are stipped and ignored, UUCP-style bang-paths
+    and %-style routing are not parsed.
+    """
+
+    qstring = re.compile(r'((?:"[^"]*"|\\.|[' + atom + r'])+|.)')
+
+    def __init__(self, addr):
+        self.local = ''
+        self.domain = ''
+        self.addrstr = addr
+
+        # Tokenize
+        atl = filter(None,self.qstring.split(addr))
+
+        local = []
+        domain = []
+
+        while atl:
+            if atl[0] == '<':
+                if atl[-1] != '>':
+                    raise AddressError, "Unbalanced <>"
+                atl = atl[1:-1]
+            elif atl[0] == '@':
+                atl = atl[1:]
+                if not local:
+                    # Source route
+                    while atl and atl[0] != ':':
+                        # remove it
+                        atl = atl[1:]
+                    if not atl:
+                        raise AddressError, "Malformed source route"
+                    atl = atl[1:] # remove :
+                elif domain:
+                    raise AddressError, "Too many @"
+                else:
+                    # Now in domain
+                    domain = ['']
+            elif len(atl[0]) == 1 and atl[0] not in atom + '.':
+                raise AddressError, "Parse error at " + atl[0]
+            else:
+                if not domain:
+                    local.append(atl[0])
+                else:
+                    domain.append(atl[0])
+                atl = atl[1:]
+               
+        self.local = ''.join(local)
+        self.domain = ''.join(domain)
+
+    dequotebs = re.compile(r'\\(.)')
+    def dequote(self, addr):
+        "Remove RFC-2821 quotes from address"
+        res = []
+
+        atl = filter(None,self.qstring.split(addr))
+
+        for t in atl:
+            if t[0] == '"' and t[-1] == '"':
+                res.append(t[1:-1])
+            elif '\\' in t:
+                res.append(self.dequotebs.sub(r'\1',t))
+            else:
+                res.append(t)
+
+        return ''.join(res)
+
+    def __str__(self):
+        return '%s%s' % (self.local, self.domain and ("@" + self.domain) or "")
+
+    def __repr__(self):
+        return "%s.%s(%s)" % (self.__module__, self.__class__.__name__,
+                              repr(str(self)))
 
-class User:
+class User(Address):
 
     def __init__(self, destination, helo, protocol, orig):
-        try:
-            self.name, self.domain = string.split(destination, '@', 1)
-        except ValueError:
-            self.name = destination
-            self.domain = ''
+        Address.__init__(self,destination)
         self.helo = helo
         self.protocol = protocol
         self.orig = orig
@@ -83,23 +161,41 @@
 
 class SMTP(basic.LineReceiver):
 
-    def __init__(self):
+    def __init__(self, domain=None, timeout=600):
         self.mode = COMMAND
         self.__from = None
         self.__helo = None
-        self.__to = ()
+        self.__to = []
+        self.timeout = timeout
+        if not domain:
+            import socket
+            domain = socket.getfqdn()
+        self.host = domain
+
+    def timedout(self):
+        self.sendCode(421, '%s Timeout. Try talking faster next time!' %
+                      self.host)
+        self.transport.loseConnection()
 
     def connectionMade(self):
-        self.sendCode(220, 'Spammers beware, your ass is on fire')
+        self.sendCode(220, '%s Spammers beware, your ass is on fire' %
+                      self.host)
+        self.timeoutID = reactor.callLater(self.timeout, self.timedout)
 
     def sendCode(self, code, message=''):
         "Send an SMTP code with a message."
         self.transport.write('%d %s\r\n' % (code, message))
 
     def lineReceived(self, line):
+        self.timeoutID.cancel()
+        self.timeoutID = reactor.callLater(self.timeout, self.timedout)
+
         if self.mode is DATA:
             return self.dataLineReceived(line)
-        command = string.split(line, None, 1)[0]
+        if line:
+            command = string.split(line, None, 1)[0]
+        else:
+            command = ''
         method = getattr(self, 'do_'+string.upper(command), None)
         if method is None:
             method = self.do_UNKNOWN
@@ -107,21 +203,59 @@
             line = line[len(command):]
         return method(string.strip(line))
 
+    def lineLengthExceeded(self, line):
+        if self.mode is DATA:
+            for message in self.__messages:
+                message.connectionLost()
+            self.mode = COMMAND
+            del self.__messages
+        self.sendCode(500, 'Line too long')
+
     def do_UNKNOWN(self, rest):
-        self.sendCode(502, 'Command not implemented')
+        self.sendCode(500, 'Command not implemented')
 
     def do_HELO(self, rest):
-        self.__helo = rest
-        self.sendCode(250, 'Nice to meet you')
+        peer = self.transport.getPeer()[1]
+        self.__helo = (rest, peer)
+        self.sendCode(250, '%s Hello %s, nice to meet you' % (self.host, peer))
 
     def do_QUIT(self, rest):
         self.sendCode(221, 'See you later')
         self.transport.loseConnection()
 
+    qstring = r'("[^"]*"|\\.|[' + atom + r'@.])+'
+
+    path_re = re.compile(r"(<(?=.*>))?(?P<addr><>|(?<=<)" + qstring + r"(?=(?<!\\)>)|" + qstring + r")((?<![\\<])>)?$")
+    mail_re = re.compile(r'\s*FROM:\s*(?P<path><>|<' + qstring + r'>|' +
+                         qstring + r')\s*(?P<opts>.*)$',re.I)
+    rcpt_re = re.compile(r'\s*TO:\s*(?P<path><' + qstring + r'>|' +
+                         qstring + r')\s*(?P<opts>.*)$',re.I)
+
     def do_MAIL(self, rest):
-        from_ = rest[len("MAIL:<"):-len(">")]
-        self.validateFrom(self.__helo, from_, self._fromValid,
-                                              self._fromInvalid)
+        if not self.__helo:
+            self.sendCode(503,"Who are you? Say HELO first");
+        if self.__from:
+            self.sendCode(503,"Only one sender per message, please")
+            return
+        # Clear old recipient list
+        self.__to = []
+        m = self.mail_re.match(rest)
+        if not m:
+            self.sendCode(501, "Syntax error")
+            return
+        m = self.path_re.match(m.group('path'))
+        if not m:
+            self.sendCode(553, "Unparseable address")
+            return
+
+        try:
+            addr = Address(m.group('addr'))
+        except AddressError, e:
+            self.sendCode(553, str(e))
+            return
+            
+        self.validateFrom(self.__helo, addr, self._fromValid,
+                          self._fromInvalid)
 
     def _fromValid(self, from_):
         self.__from = from_
@@ -131,12 +265,28 @@
         self.sendCode(550, 'No mail for you!')
 
     def do_RCPT(self, rest):
-        to = rest[len("TO:<"):-len(">")]
-        user = User(to, self.__helo, self, self.__from)
+        if not self.__from:
+            self.sendCode(503, "Must have sender before recpient")
+            return
+        m = self.rcpt_re.match(rest)
+        if not m:
+            self.sendCode(501, "Syntax error")
+            return
+        m = self.path_re.match(m.group('path'))
+        if not m:
+            self.sendCode(553, "Unparseable address")
+            return
+
+        try:
+            user = User(m.group('addr'), self.__helo, self, self.__from)
+        except AddressError, e:
+            self.sendCode(553, str(e))
+            return
+            
         self.validateTo(user, self._toValid, self._toInvalid)
 
     def _toValid(self, to):
-        self.__to = self.__to + (to,)
+        self.__to.append(to)
         self.sendCode(250, 'Address recognized')
 
     def _toInvalid(self, to):
@@ -144,22 +294,29 @@
 
     def do_DATA(self, rest):
         if self.__from is None or not self.__to:  
-            self.sendCode(550, 'Must have valid receiver and originator')
+            self.sendCode(503, 'Must have valid receiver and originator')
             return
         self.mode = DATA
         helo, origin, recipients = self.__helo, self.__from, self.__to
         self.__from = None
-        self.__to = ()
+        self.__to = []
         self.__messages = self.startMessage(recipients)
+        for message in self.__messages:
+            message.lineReceived(self.receivedHeader(helo, origin, recipients))
         self.sendCode(354, 'Continue')
 
     def connectionLost(self, reason):
+        # self.sendCode(421, 'Loosing connection.') # This does nothing...
+        # Ideally, if we (rather than the other side) lose the connection,
+        # we should be able to tell the other side that we are going away.
+        # RFC-2821 requires that we try.
         if self.mode is DATA:
             for message in self.__messages:
                 message.connectionLost()
 
     def do_RSET(self, rest):
-        self.__init__()
+        self.__from = None
+        self.__to = []
         self.sendCode(250, 'I remember nothing.')
 
     def dataLineReceived(self, line):
@@ -177,6 +334,7 @@
                     deferred = message.eomReceived()
                     deferred.addCallback(ndeferred.callback)
                     deferred.addErrback(ndeferred.errback)
+                del self.__messages
                 return
             line = line[1:]
         for message in self.__messages:
@@ -189,6 +347,11 @@
         self.sendCode(550, 'Could not send e-mail')
 
     # overridable methods:
+    def receivedHeader(self, helo, origin, recipents):
+        return "Received: From %s ([%s]) by %s; %s" % (
+            helo[0], helo[1], self.host,
+            time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.gmtime()))
+    
     def validateFrom(self, helo, origin, success, failure):
         success(origin)
 
@@ -281,6 +444,7 @@
             self.state = 'afterData'
 
         chunk = string.replace(chunk, "\n", "\r\n")
+        chunk = string.replace(chunk, "\r\n.", "\r\n..")
         self.transport.write(chunk)
 
     def pauseProducing(self):

From glyph at twistedmatrix.com  Mon Sep 30 11:14:50 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 30 Sep 2002 10:14:50 -0500 (CDT)
Subject: [Twisted-Python] Zip Death?
In-Reply-To: <200209301112.01793.elloyd@lancaster.lib.pa.us>
References: <20020930094925.7efeaead.twisted@itamarst.org>
	<20020930.090448.93018550.glyph@twistedmatrix.com>
	<200209301112.01793.elloyd@lancaster.lib.pa.us>
Message-ID: <20020930.101450.78703643.glyph@twistedmatrix.com>


On Mon, 30 Sep 2002 11:12:01 -0400, Eron Lloyd <elloyd at lancaster.lib.pa.us> wrote:
> Is there anything in distutils that could aid in this?

I believe that 'python setup.py bdist_wininst' will create a win32 installer,
but it will only do so on Windows.  It also has some limitations (there's no
facility for putting anything into your Start menu, for example) but it does at
least get all the files in the right place.

The trouble is that it requires MSVC++, and so has to run actually on a windows
box, and can't be automated on our unix release server.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020930/90c30d06/attachment.pgp 

From bruce at cubik.org  Mon Sep 30 11:40:17 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Mon, 30 Sep 2002 09:40:17 -0600
Subject: [Twisted-Python] Zip Death?
References: <20020930094925.7efeaead.twisted@itamarst.org>	<20020930.090448.93018550.glyph@twistedmatrix.com>	<200209301112.01793.elloyd@lancaster.lib.pa.us> <20020930.101450.78703643.glyph@twistedmatrix.com>
Message-ID: <3D987061.8080801@cubik.org>

Glyph Lefkowitz wrote:
> On Mon, 30 Sep 2002 11:12:01 -0400, Eron Lloyd <elloyd at lancaster.lib.pa.us> wrote:
>>Is there anything in distutils that could aid in this?
> 
> I believe that 'python setup.py bdist_wininst' will create a win32 installer,
> but it will only do so on Windows.  It also has some limitations (there's no
> facility for putting anything into your Start menu, for example) but it does at
> least get all the files in the right place.
> 
> The trouble is that it requires MSVC++, and so has to run actually on a windows
> box, and can't be automated on our unix release server.

I've run this for a release or two in the past.  It is pretty easy and 
painless when no one breaks it and only takes a few minutes.

  - Bruce




From twisted at itamarst.org  Mon Sep 30 12:46:03 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 30 Sep 2002 12:46:03 -0400
Subject: [Twisted-Python] Improvements to twisted.protocols.smtp
In-Reply-To: <200209301501.g8UF1a9u001275@fido.strakt.com>
References: <200209301501.g8UF1a9u001275@fido.strakt.com>
Message-ID: <20020930124603.22a1a9cc.twisted@itamarst.org>

On Mon, 30 Sep 2002 17:01:36 +0200
Anders Hammarquist <iko at strakt.com> wrote:

> We have a need for an SMTP server, and found the current
> implementation a bit fragile. This patch should robustify it, and also
> improve RFC 2821 compliance (no guarantees though).

Thanks Anders! One of us will try to look it over soon. And a few test cases
to go along would be even more appreciated ;)

-- 
Itamar Shtull-Trauring    http://itamarst.org/
Available for Python, Twisted, Zope and Java consulting



From bob at mastersofbranding.com  Mon Sep 30 12:46:26 2002
From: bob at mastersofbranding.com (Bob Ippolito)
Date: Mon, 30 Sep 2002 12:46:26 -0400
Subject: [Twisted-Python] Zip Death?
In-Reply-To: <3D987061.8080801@cubik.org>
Message-ID: <29714798-D494-11D6-8FFD-0003938210D6@mastersofbranding.com>

Nullsoft's NSIS is a nice open source scriptable installer system for 
windows that let's you do just about anything.. maybe think about 
making a distutils module for that instead?

http://www.nullsoft.com/free/nsis/

On Monday, September 30, 2002, at 11:40 AM, Bruce Mitchener wrote:

> Glyph Lefkowitz wrote:
>> On Mon, 30 Sep 2002 11:12:01 -0400, Eron Lloyd 
>> <elloyd at lancaster.lib.pa.us> wrote:
>>> Is there anything in distutils that could aid in this?
>> I believe that 'python setup.py bdist_wininst' will create a win32 
>> installer,
>> but it will only do so on Windows.  It also has some limitations 
>> (there's no
>> facility for putting anything into your Start menu, for example) but 
>> it does at
>> least get all the files in the right place.
>> The trouble is that it requires MSVC++, and so has to run actually on 
>> a windows
>> box, and can't be automated on our unix release server.
>
> I've run this for a release or two in the past.  It is pretty easy and 
> painless when no one breaks it and only takes a few minutes.
>
>  - Bruce
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From glyph at twistedmatrix.com  Mon Sep 30 17:05:18 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 30 Sep 2002 16:05:18 -0500 (CDT)
Subject: [Twisted-Python] Re: [Twisted-commits] How do I serve PHP-files with twisted.web?
 Answered.
In-Reply-To: <E17w47M-00052h-00@pyramid.twistedmatrix.com>
References: <E17w47M-00052h-00@pyramid.twistedmatrix.com>
Message-ID: <20020930.160518.59650770.glyph@twistedmatrix.com>


On Mon, 30 Sep 2002 12:14:00 -0500, phed CVS <phed at twistedmatrix.com> wrote:
> How do I serve PHP-files with twisted.web? Answered.

This answer appears to be unnecessarily complex and confusing, when the user
could just do "mktap web --path . --allow-ignore-ext" and get the same effect.
(You probably want --index index.php too.) Is there any particular reason you
answered that way? :)

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020930/e08a9152/attachment.pgp 

From m at moshez.org  Mon Sep 30 19:14:11 2002
From: m at moshez.org (Moshe Zadka)
Date: 30 Sep 2002 23:14:11 -0000
Subject: [Twisted-Python] Improvements to twisted.protocols.smtp
In-Reply-To: <200209301501.g8UF1a9u001275@fido.strakt.com>
References: <200209301501.g8UF1a9u001275@fido.strakt.com>
Message-ID: <20020930231411.30455.qmail@green.zadka.com>

On Mon, 30 Sep 2002, Anders Hammarquist <iko at strakt.com> wrote:

> Comments, etc are welcome. The patch is relative to twisted CVS as of a 
> few minutes ago.

Hi!
I have some issues with the code, but I'm currently a bit under the
weather so I find it hard to master the concentration to detail them.
I'll send another e-mail when I will feel better, just wanted
to let you know you're not ignored.




From glyph at twistedmatrix.com  Sun Sep  1 03:45:08 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 01 Sep 2002 04:45:08 -0500 (CDT)
Subject: [Twisted-Python] random security thoughts
Message-ID: <20020901.044508.74753285.glyph@twistedmatrix.com>


Hi Twistedistanians,

Here is some internal rambling I've been doing about fixing up PB to be more
bulletproof.  Apologies if it's not coherent to anyone else but I figured I'd
better mention the idea on the list and see of someone smarter than me can fill
in a gap or two :).

So, I think I understand what the potential security problem is with PB --
specifically, it's in Jelly, because the way that types are registered with the
serializer is a very primitive ACL.

This violates POLA for all PB method calls in a subtle (and usually harmless)
way -- the Broker object, which deserializes Jelly types, can effectively
receive arbitrary messages from any object on the other end of the connection.
pb.Broker is the deputy which can become confused.

The trouble is that this is so damn *handy*.  If we want to enforce correct
authority boundaries here, some form of IDL is necessary, since a method can
only (return values, pass arguments) of appropriately declared types, because
those types are methods sent to the serializer.

Is there some middle ground?  Currently there's quite a bit of room for
malicious confusion of networked code, since arbitrary types may be passed to
arbitrary methods, and there is only one serialization/deserialization
registry.  However, full IDL would make publishing remote methods and new
copyable types rather tedious (and more fragile across different versions of
network interface for a given program).  You'd also need a full replication of
the server-side class hierarchy on the client in order to allow any kind of
polymorphism at all.  So I would view IDL as correct and complete for POLA
purposes, but too tedious to be practical.  I figure there's got to be some
equivalent here that would be more like UNIX's half-hearted ACLs and less like
a superuser bit for various serializeable types.

This wouldn't be perfect, but given how little deserialization methods
typically do it's probably OK.  Unfortunately I can't think of what form such a
compromise would take.  Easy enough to understand, but still possible to ensure
against obvious abuses.  Any suggestions?

-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020901/a6ef99f7/attachment.sig>

From andrew-twisted at puzzling.org  Sun Sep  1 20:46:49 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 2 Sep 2002 12:46:49 +1000
Subject: [Twisted-Python] ReconnectingClientFactory & stopFactory
Message-ID: <20020902024649.GC2955@ritsuko.xware.cx>

I think there might be a slight issue with the current client API.  If
the API is fine, the docs need improving! :)

Say you've subclasses ReconnectingClientFactory to connect to a database
in startFactory, disconnect in stopFactory.  If takes several connection
attempts, then multiple connections to the database will be opened and
closed (assuming this factory is only constructing one client, which is
the usual case, I suspect).

The problem appears to be that BaseConnector (in
twisted.internet.default) will always call stopFactory from
connectionLost/connectionFailed if it's state is 'disconnected', even if
it is between retries, because the connector knows nothing of the retry
logic in the Factory.

Does this sound like a geniune flaw, or am I misunderstanding something?
:)

I'm wondering if perhaps the solution would be to add a method (or
methods) to IConnector that let clientConnectionLost and
clientConnectionFailed signal to the connector that it isn't done using
that connector yet.

-Andrew.




From twisted at itamarst.org  Sun Sep  1 22:00:17 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 02 Sep 2002 00:00:17 -0400
Subject: [Twisted-Python] ReconnectingClientFactory & stopFactory
References: <20020902024649.GC2955@ritsuko.xware.cx>
Message-ID: <3D72E251.7020608@itamarst.org>

Andrew Bennetts wrote:

> The problem appears to be that BaseConnector (in
> twisted.internet.default) will always call stopFactory from
> connectionLost/connectionFailed if it's state is 'disconnected', even if
> it is between retries, because the connector knows nothing of the retry
> logic in the Factory.

It calls *doStop*, not stopFactory. So if you want to change when 
stopFactory is called, just override the factory's doStop wuith your own 
behaviour.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
Available for Python, Twisted, Zope and Java consulting




From glyph at twistedmatrix.com  Sun Sep  1 22:18:04 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 01 Sep 2002 23:18:04 -0500 (CDT)
Subject: [Twisted-Python] ReconnectingClientFactory & stopFactory
In-Reply-To: <3D72E251.7020608@itamarst.org>
References: <20020902024649.GC2955@ritsuko.xware.cx>
	<3D72E251.7020608@itamarst.org>
Message-ID: <20020901.231804.126576262.glyph@twistedmatrix.com>


On Mon, 02 Sep 2002 00:00:17 -0400, Itamar Shtull-Trauring <twisted at itamarst.org> wrote:
> It calls *doStop*, not stopFactory. So if you want to change when 
> stopFactory is called, just override the factory's doStop wuith your own 
> behaviour.

This is probably a pretty bad name for that method.  How about we call it
"doStopFactory" instead?  I don't remember why I made the name so ambiguous in
the first place.

-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020901/e618bc82/attachment.sig>

From twisted at itamarst.org  Sun Sep  1 22:43:20 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 02 Sep 2002 00:43:20 -0400
Subject: [Twisted-Python] ReconnectingClientFactory & stopFactory
References: <20020902024649.GC2955@ritsuko.xware.cx>	<3D72E251.7020608@itamarst.org> <20020901.231804.126576262.glyph@twistedmatrix.com>
Message-ID: <3D72EC68.9070408@itamarst.org>

Glyph Lefkowitz wrote:

> This is probably a pretty bad name for that method.  How about we call it
> "doStopFactory" instead?  I don't remember why I made the name so ambiguous in
> the first place.

*shrug*

Just do it ASAP so it's in before 1.0.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
Available for Python, Twisted, Zope and Java consulting




From andrew-twisted at puzzling.org  Sun Sep  1 22:52:18 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 2 Sep 2002 14:52:18 +1000
Subject: [Twisted-Python] ReconnectingClientFactory & stopFactory
In-Reply-To: <3D72E251.7020608@itamarst.org>
References: <20020902024649.GC2955@ritsuko.xware.cx> <3D72E251.7020608@itamarst.org>
Message-ID: <20020902045218.GE2955@ritsuko.xware.cx>

On Mon, Sep 02, 2002 at 12:00:17AM -0400, Itamar Shtull-Trauring wrote:
> 
> It calls *doStop*, not stopFactory. So if you want to change when 
> stopFactory is called, just override the factory's doStop wuith your own 
> behaviour.

Oh duh, of course.  Thanks.

-Andrew.




From glyph at twistedmatrix.com  Mon Sep  2 03:07:45 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 02 Sep 2002 04:07:45 -0500 (CDT)
Subject: [Twisted-Python] Can anyone recommend a sensible XML parser for Python?
Message-ID: <20020902.040745.78701595.glyph@twistedmatrix.com>


So, I'm really pretty discouraged and disgusted with the state of XML tools
that ship with Python today.  Mainly, they do surprising and insecure things
when I try to parse XML, and I don't understand how to tell what will and won't
work between various versions of them.

I think my requirements of an XML parser are pretty simple.  Here are the
basics of what I want it to do:


    * adhere to a subset of both DOM and SAX APIs for both event-based and
      synchronous processing of XML data

    * allow creation of DOM trees from fragments of an XML stream so that
      discrete "packets" can be processed, a-la jabber "xml streams"

    * perform relatively well (optional)

More importantly, here are the things I *don't* want an XML parser to do:

    * validate in any way, ever, at all

    * fetch DTDs or otherwise do helpful things like eval()ing python code
      found in random attributes in the node tree

    * break necessary extensions to SAX/DOM and subtleties of API compatibility
      between versions, making my code do lots of checks

    * look for Unicode flag characters

    * pay attention to !DOCTYPE and ?xml directives

    * split Text nodes into multiple pieces on newlines or whitespace

    * pay attention specially to any attribute, like "xmlns"

    * dump core

Does anybody know of an XML parser that meets these requirements or am I going
to have to write my own?

-- 
 |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020902/3b6dd8b1/attachment.sig>

From twisted at itamarst.org  Mon Sep  2 09:00:16 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 02 Sep 2002 11:00:16 -0400
Subject: [Twisted-Python] [Fwd: Re: Twisted docs (was Re: Python IPC options)]
Message-ID: <3D737D00.8060707@itamarst.org>


-------- Original Message --------
Subject: Re: Twisted docs (was Re: Python IPC options)
Date: 2 Sep 2002 02:51:06 -0700
From: hwlgw at hotmail.com (Will Stuyvesant)
Organization: http://groups.google.com/
Newsgroups: comp.lang.python
References: <1030829572.943495 at irys.nyx.net> 
<3D715160.2020109 at itamarst.org_NOSPAM> 
<cb035744.0209011308.7b4b3ae2 at posting.google.com> 
<3D728386.2060908 at itamarst.org_NOSPAM>

Itamar Shtull-Trauring <itamar at itamarst.org_NOSPAM> wrote:

 > I take it you're going to volunteer some time to write
 > docs? We'd really appreciate it! ;)

Okay I will try, but my TODO list is already very long.  So it will be
a weekend thingy and could take a while to produce something useful,
besides I will have to learn Twisted first!

What I propose is to show how to develop a medium sized application in
the Twisted framework that uses a lot of Twisted's capabilities.  It
should have asynchronous *and* synchronous communication, *mobile*
components and because of that a dynamic network.  It should also show
how to exchange data with a server / database via its URL on the
internet.  Also to be fun it needs a GUI so I will use Tkinter, I
believe there are examples already how to combine Twisted with
Tkinter.  Tkinter seems to be the best choice since it is one of
Python's included batteries and it is portable and I have some
experience with it.

Now what kind of application would that be?  My idea for the
application is a trader agent and its environment.  It could be
something like a simulation or a game where you have to program an
automated trader agent that buys and sells stocks for you.  The client
should also have an interactive mode so you can do things manually
too.  There is a central market / database / server online all the
time.
First I need to set up a website that simulates a stock market, or
maybe I can just use an existing one, have to see how stable the data
are they produce.  www.nyse.com?

Does this kind of application show enough of Twisted's features?  You
have more ideas?   Do you think some things are too hard or
impossible?


Demonstrated features
---------------------

* Asynchronous communication:    Updates from the market to the client
                                  (if it is online) in a
                                  send_and_forget fashion.

* Synchronous communication:     Buying and selling transactions

* Mobility:                      The clients should be able to connect
                                  from anywhere and it should maybe be
                                  possible to relocate the market.

* Dynamicity:                    See mobility.  Also there will be an
                                  unknown number of clients at any
                                  time.

* RPC:                           client <-> market, but maybe also
                                  perhaps client <-> client for forming
                                  trade groups?

* GUI integration                To show what a client does and to be
                                  able to do manual trading.

* Remote debugging?  Remote market profiling?  Market logging?

Have to go back to my real work now.  What surprises me is that the
Twisted people did not come up with a demo apllication like this
already, the more I think about it the more fun it seems.  I did see a
MUD-something-application mentioned on the Twisted site, but could not
find it.  The trader application looks a bit more ``serious'' perhaps,
better for public relations?  Also make absolutely sure people using
Windows can install everything they need with just doubleclicking an
.exe or whatever.  You can do it, Twisted already has that for the
modules.

Writing software for installing things and writing documentation is
generally considered *boring* and uncool work among programmers.  I
know.  Hope this helps inspiring you to do it and to look at it in
another way?

For now good luck with writing good docs about things I do not know
about yet: Twisted deserves it.  So one day it can become one of
Python's included batteries too!

::

A child of five could understand this!  Fetch me a child of five.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
Available for Python, Twisted, Zope and Java consulting




From glyph at twistedmatrix.com  Thu Sep  5 14:47:40 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 05 Sep 2002 15:47:40 -0500 (CDT)
Subject: [Twisted-Python] Re: [Twisted-commits] allow for the possibility that a bot's
 perspective already exists
In-Reply-To: <E17n2cj-0003KI-00@pyramid.twistedmatrix.com>
References: <E17n2cj-0003KI-00@pyramid.twistedmatrix.com>
Message-ID: <20020905.154740.21617840.glyph@twistedmatrix.com>


On Thu, 05 Sep 2002 14:49:05 -0500, acapnotic CVS <acapnotic at twistedmatrix.com> wrote:
> Modified files:
> Twisted/twisted/words/service.py 1.63 1.64
> 
> Log message:
> allow for the possibility that a bot's perspective already exists

I think this *should* fail if the perspective already exists; otherwise you'd
kick a user off if you tried to create a bot with their nick.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020905/39ee401c/attachment.sig>

From kevin.m.turner at pobox.com  Thu Sep  5 14:56:59 2002
From: kevin.m.turner at pobox.com (Kevin Turner)
Date: 05 Sep 2002 13:56:59 -0700
Subject: [Twisted-Python] Re: [Twisted-commits] allow for the
	possibility that a bot's perspective already exists
In-Reply-To: <20020905.154740.21617840.glyph@twistedmatrix.com>
References: <E17n2cj-0003KI-00@pyramid.twistedmatrix.com> 
	<20020905.154740.21617840.glyph@twistedmatrix.com>
Message-ID: <1031259419.32317.4.camel@troglodyte.funhouse>

On Thu, 2002-09-05 at 13:47, Glyph Lefkowitz wrote:
> > allow for the possibility that a bot's perspective already exists
> 
> I think this *should* fail if the perspective already exists; otherwise you'd
> kick a user off if you tried to create a bot with their nick.

But what if, as just happened to me, it's the bot's perspective, not a
user's?



From elloyd at lancaster.lib.pa.us  Thu Sep  5 15:53:09 2002
From: elloyd at lancaster.lib.pa.us (Eron Lloyd)
Date: 05 Sep 2002 17:53:09 -0400
Subject: [Twisted-Python] Can anyone recommend a sensible XML parser for
	Python?
In-Reply-To: <20020902.040745.78701595.glyph@twistedmatrix.com>
References: <20020902.040745.78701595.glyph@twistedmatrix.com>
Message-ID: <1031262790.1111.3.camel@phobos>

Are you referring to PyXML? I know xml.* in the Standard Library is 
pretty weak by far (but getting better!). PyXML, on the other hand, 
supports currently at least two pretty powerful parsers: Expat ("the" 
parser for many projects, including mozilla), and xmlproc (a robust 
pure-python parser that does validation). In fact, I believe Fred Drake 
of PythonLabs is the maintainer of Expat, so Python will always have 
strong Expat support. Also, I know Daniel Veillard is very interested in
"guaranteeing" Python wrappers for the GNOME libxml/libxslt C library 
(http://www.xmlsoft.org/python.html). There are many more options I just
can't think of right now. All in all, there *is* a wealth of parsers 
available to you, you just have decide what you need. Check PyXML 
(http://pyxml.sf.net) and contact the Python XML-SIG for help. Have 
faith, Python is quickly shaping up to be a powerful XML platform. 

Cheers, 

Eron 

On Mon, 2002-09-02 at 05:07, Glyph Lefkowitz wrote: 
> 
> So, I'm really pretty discouraged and disgusted with the state of XML tools
> that ship with Python today.  Mainly, they do surprising and insecure things
> when I try to parse XML, and I don't understand how to tell what will and won't
> work between various versions of them.
> 
> I think my requirements of an XML parser are pretty simple.  Here are the
> basics of what I want it to do:
> 
> 
>     * adhere to a subset of both DOM and SAX APIs for both event-based and
>       synchronous processing of XML data
> 
>     * allow creation of DOM trees from fragments of an XML stream so that
>       discrete "packets" can be processed, a-la jabber "xml streams"
> 
>     * perform relatively well (optional)
> 
> More importantly, here are the things I *don't* want an XML parser to do:
> 
>     * validate in any way, ever, at all
> 
>     * fetch DTDs or otherwise do helpful things like eval()ing python code
>       found in random attributes in the node tree
> 
>     * break necessary extensions to SAX/DOM and subtleties of API compatibility
>       between versions, making my code do lots of checks
> 
>     * look for Unicode flag characters
> 
>     * pay attention to !DOCTYPE and ?xml directives
> 
>     * split Text nodes into multiple pieces on newlines or whitespace
> 
>     * pay attention specially to any attribute, like "xmlns"
> 
>     * dump core
> 
> Does anybody know of an XML parser that meets these requirements or am I going
> to have to write my own?
> 
> -- 
>  |    <`'>    |  Glyph Lefkowitz: Travelling Sorcerer  |
>  |   < _/ >   |  Lead Developer,  the Twisted project  |
>  |  < ___/ >  |      http://www.twistedmatrix.com      |
-- 
Eron Lloyd
Technology Coordinator
Lancaster County Library
elloyd at lancaster.lib.pa.us
Phone: 717-239-2116
Fax: 717-394-3083

---
[This E-mail scanned for viruses by Declude Virus]




From glyph at twistedmatrix.com  Fri Sep  6 00:23:19 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 06 Sep 2002 01:23:19 -0500 (CDT)
Subject: [Twisted-Python] Re: Helps if I could type ... there is no reportlacb.com of course.
In-Reply-To: <PGECLPOBGNBNKHNAGIJHKEDGDMAA.andy@reportlab.com>
References: <200209021215.g82CFno9014980@ratthing-b246.strakt.com>
	<PGECLPOBGNBNKHNAGIJHKEDGDMAA.andy@reportlab.com>
Message-ID: <20020906.012319.38298011.glyph@twistedmatrix.com>


Hi, Laura, Andy, &c :),

On Tue, 3 Sep 2002 13:09:28 +0100, "Andy Robinson" <andy at reportlab.com> wrote:
> Hello Glyph,
> 
> You might be interested to know of our pyRXP
> parser:
> 
> http://www.reportlab.com/xml/pyrxp.html

Thanks for the reference.  I think pyRXP looks pretty neat -- using existing
language data structures rather than inventing an API (like DOM) certainly has
its advantages.  Personally I would have preferred something mutable, but I
could see reasons to go either way.

The one thing I don't see PyRXP doing is this:

>     * adhere to a subset of both DOM and SAX APIs for both event-based and
>     synchronous processing of XML data

I shouldn't have phrased this as API adherence but more as a semantic
requirement.  I want to do parsing and routing of XML such as jabber's "XML
streams", as a network protocol and not as a document parser.  Of course I also
want a document parser, for other purposes.  at least passing DOM adherence
means that I can rewrite much less of the existing Twisted/XML code :-)

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020906/611e990a/attachment.sig>

From glyph at twistedmatrix.com  Fri Sep  6 00:39:22 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 06 Sep 2002 01:39:22 -0500 (CDT)
Subject: [Twisted-Python] Can anyone recommend a sensible XML parser
 for Python?
In-Reply-To: <1031262790.1111.3.camel@phobos>
References: <20020902.040745.78701595.glyph@twistedmatrix.com>
	<1031262790.1111.3.camel@phobos>
Message-ID: <20020906.013922.15248657.glyph@twistedmatrix.com>


On 05 Sep 2002 17:53:09 -0400, Eron Lloyd <elloyd at lancaster.lib.pa.us> wrote:
> Are you referring to PyXML? I know xml.* in the Standard Library is 
> pretty weak by far (but getting better!).

Yes.  In fact, PyXML is a big part of the problem.  Its "minidom" module, for
example, is *far* buggier than the one found in the standard library.  (As an
example of that, try to figure out how to make cloneNode work on a Document
object.)

I could deal with one set of potential problems and pitfalls using XML in
Python and work around then, but I have to work around every combination of
versions to make a useful app that doesn't have very stringent installation
requirements: in pracitice this means 4 environments: python2.1 with pyxml,
python2.1 standalone, python2.2 with pyxml, python2.2 standalone.

I don't want a plethora of XML parsers with rich features, all of which are
broken.  I want *one* XML parser that can *reliably* transform a stream of
bytes into a stream of nodes, and a text file into a tree of nodes.  You
mentioned validatation in your post and I explicitly said that validation is
worse than useless to me; in most cases I want to parse XHTML, which means
dealing with lots of potentially DTD-violating stuff which is still "valid" as
far as I'm concerned.

Eventually I'll clean up the problem cases I'm having and submit them as bug
reports, but right now it's not worth my time, because I really don't want to
deal with the fragility of the PyXML or python-standard-library xml.* stuff.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020906/a0b9473c/attachment.sig>

From elloyd at lancaster.lib.pa.us  Fri Sep  6 10:36:12 2002
From: elloyd at lancaster.lib.pa.us (Eron Lloyd)
Date: 06 Sep 2002 12:36:12 -0400
Subject: [Twisted-Python] Can anyone recommend a sensible XML parser for
	Python?
In-Reply-To: <20020906.013922.15248657.glyph@twistedmatrix.com>
References: <20020902.040745.78701595.glyph@twistedmatrix.com>
	<1031262790.1111.3.camel@phobos> 
	<20020906.013922.15248657.glyph@twistedmatrix.com>
Message-ID: <1031330172.1094.9.camel@phobos>

Hmm, I know that minidom has had some problems recently, but it has also
seen some good improvements. It sounds like you need more robust DOM
support--have you tried 4DOM? It's not as fast, but it does adhere to
the spec the best. Maybe (when you have time) if you let us know what
you expect to accomplish we can help out--the people in XML-SIG are some
of the sharpest in the community. Perhaps TREX or RELAX-NG would be more
suitable. I guess the only comforting thing I can say is that every
development community is experiencing growing pains when it comes to an
XML strategy.

Good luck,

Eron

On Fri, 2002-09-06 at 02:39, Glyph Lefkowitz wrote:
> 
> On 05 Sep 2002 17:53:09 -0400, Eron Lloyd <elloyd at lancaster.lib.pa.us> wrote:
> > Are you referring to PyXML? I know xml.* in the Standard Library is 
> > pretty weak by far (but getting better!).
> 
> Yes.  In fact, PyXML is a big part of the problem.  Its "minidom" module, for
> example, is *far* buggier than the one found in the standard library.  (As an
> example of that, try to figure out how to make cloneNode work on a Document
> object.)
> 
> I could deal with one set of potential problems and pitfalls using XML in
> Python and work around then, but I have to work around every combination of
> versions to make a useful app that doesn't have very stringent installation
> requirements: in pracitice this means 4 environments: python2.1 with pyxml,
> python2.1 standalone, python2.2 with pyxml, python2.2 standalone.
> 
> I don't want a plethora of XML parsers with rich features, all of which are
> broken.  I want *one* XML parser that can *reliably* transform a stream of
> bytes into a stream of nodes, and a text file into a tree of nodes.  You
> mentioned validatation in your post and I explicitly said that validation is
> worse than useless to me; in most cases I want to parse XHTML, which means
> dealing with lots of potentially DTD-violating stuff which is still "valid" as
> far as I'm concerned.
> 
> Eventually I'll clean up the problem cases I'm having and submit them as bug
> reports, but right now it's not worth my time, because I really don't want to
> deal with the fragility of the PyXML or python-standard-library xml.* stuff.
> 
> -- 
>  |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
>  |   < _/ >   |  Lead Developer,  the Twisted project  |
>  |  < ___/ >  |      http://www.twistedmatrix.com      |
-- 
Eron Lloyd
Technology Coordinator
Lancaster County Library
elloyd at lancaster.lib.pa.us
Phone: 717-239-2116
Fax: 717-394-3083

---
[This E-mail scanned for viruses by Declude Virus]




From andy at reportlab.com  Fri Sep  6 16:51:14 2002
From: andy at reportlab.com (Andy Robinson)
Date: Fri, 6 Sep 2002 23:51:14 +0100
Subject: [Twisted-Python] RE: Helps if I could type ... there is no reportlacb.com of course.
In-Reply-To: <20020906.012319.38298011.glyph@twistedmatrix.com>
Message-ID: <LKENLBBMDHMKBECHIAIACELJCKAA.andy@reportlab.com>

> The one thing I don't see PyRXP doing is this:
> 
> >     * adhere to a subset of both DOM and SAX APIs for both 
> event-based and
> >     synchronous processing of XML data

Absolutely true.  Our own need was to read in complete
XML documents.  We generate reports where the data is usually an XML 
document and we will never want a partial document.  In addition,
we would always validate if the performance hit was minimal. So
we went for a 'tree structure' as output.  It would be trivial to 
layer something else on top which generated events as an alternative API,
but AFAICT pyexpat does that pretty well for anyone who does not
want validation.  Or am I missing something?

Our own feelings are to aim for simple Pythonic APIs rather
than full SAX and DOM, which "feel like Java" to me and
tend to be verbose.  
> 
> I shouldn't have phrased this as API adherence but more as a semantic
> requirement.  I want to do parsing and routing of XML such as 
> jabber's "XML
> streams", as a network protocol and not as a document parser.  Of 
> course I also
> want a document parser, for other purposes.  
> at least passing DOM 
> adherence
> means that I can rewrite much less of the existing Twisted/XML code :-)

Our take on that was to make a small 'lazy cursor' using getattr
to step into the tuple tree, so I can do expressions like
"xml.invoice.customerDetails.addressLine1" and let it drill
down for me.  We did not worry about DOM compatibility as DOM syntax
is less readable than Python syntax.  Far from perfect but only about 
50 lines long.  One could easily make DOM and SAX wrappers for
the pyRXP tuple tree, although under the hood the SAX one would
be working on a ully parsed tree structure.

We would love to do more on pyRXP but are very short of time
and have already met all our own requirements.  Is this a
candidate to become part of Twisted's XML toolkit, or specifically
for Jabber?  Is anyone else prepared to do a little on the pyRXP
code with us and share some work?

Thanks,

Andy




From glyph at twistedmatrix.com  Fri Sep  6 17:06:11 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 06 Sep 2002 18:06:11 -0500 (CDT)
Subject: [Twisted-Python] Re: Helps if I could type ... there is no reportlacb.com of course.
In-Reply-To: <LKENLBBMDHMKBECHIAIACELJCKAA.andy@reportlab.com>
References: <20020906.012319.38298011.glyph@twistedmatrix.com>
	<LKENLBBMDHMKBECHIAIACELJCKAA.andy@reportlab.com>
Message-ID: <20020906.180611.99480137.glyph@twistedmatrix.com>


Slimming the recipient list here, since anyone interested in continuing
discussion should be on the twisted list anyway :)

On Fri, 6 Sep 2002 23:51:14 +0100, "Andy Robinson" <andy at reportlab.com> wrote:
> > The one thing I don't see PyRXP doing is this:

> > >     * adhere to a subset of both DOM and SAX APIs for both event-based
> > >     and synchronous processing of XML data

> Absolutely true.  Our own need was to read in complete XML documents.
> ... AFAICT pyexpat does that pretty well for anyone who does not want
> validation.  Or am I missing something?

I don't have a repeatable test case yet, but expat (at least pyexpat) seems to
segfault in some situations.  I want to use XML as a data-transfer technique in
part as a stopgap measure because Python does not support robust parsing and
secure execution of Python code.  If you can segfault the XML parser then it's
not much help :).

Also, turning off some of the features in pyexpat would sometimes hang or crash
the parser.  Again, haven't hunted these down; but they were different in every
release of pyxml, and some are hard to repeat.  Not worth the effort
considering how easy writing a new parser is.

> Our own feelings are to aim for simple Pythonic APIs rather than full SAX and
> DOM, which "feel like Java" to me and tend to be verbose.

Interesting idea.  I may take this advice in my own XML-related endeavors.
I'll make sure to look at the idioms that pyRXP provides and see if I can
maintain some compatibility with them.

> > I want to do parsing and routing of XML such as jabber's "XML
> > streams", as a network protocol and not as a document parser.

> Our take on that was to make a small 'lazy cursor' using getattr to step into
> the tuple tree, so I can do expressions like
> "xml.invoice.customerDetails.addressLine1" and let it drill down for me.

That looks very cool!  Taking this approach may solve some of the concerns I
had about XML-based persistence in Python. Thanks for the example :-).  It does
look like you'd need validation in order to use a trick like that, though.

> ...  under the hood the SAX one would be working on a ully parsed tree
> structure.

Yeah, that's a real problem for me, unfortunately.

> We would love to do more on pyRXP but are very short of time and have already
> met all our own requirements.  Is this a candidate to become part of
> Twisted's XML toolkit, or specifically for Jabber?  Is anyone else prepared
> to do a little on the pyRXP code with us and share some work?

I actually took an afternoon and wrote a Python XML parser that will probably
be included in the next Twisted release (I'm currently slapping on some ad-hoc
minidom-esque data structures to get existing twisted/xml utilities working).
The main interest I have is network protocols that speak XML (and determining
completeness of full XML documents received over a network connection), so it
looks like pyRXP is just not suitable for my requirements.

Again, considering how easy it is to write a new XML parser, and the end-user
unpleasantness associated with garnering new dependencies (pyRXP does not
appear to be packaged in even the latest Debian, for instance) I don't think
using pyRXP is worthwhile at the moment.  Originally, I was hoping to avoid
writing my own parser.  Now, I don't think that there's enough of a consensus
in the community about what's "good" for an XML parser to do that I can avoid
it :).  Also, having done it, I'm much less interested in avoiding it.

When I am looking into more seriously high-performance applications involving
XML I think having RXP available as a backend would be really useful for some
operations, though, so I will eventually read about the tuple representation it
uses and try to provide compatibility at some layer.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020906/e1feaa7b/attachment.sig>

From glyph at twistedmatrix.com  Fri Sep  6 21:44:42 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 06 Sep 2002 22:44:42 -0500 (CDT)
Subject: [XML-SIG] Re: [Twisted-Python] Can anyone recommend a sensible
 XML parser for Python?
In-Reply-To: <E17nSaC-0000Lk-00@malatesta.local>
References: <elloyd@lancaster.lib.pa.us>
	<E17nSaC-0000Lk-00@malatesta.local>
Message-ID: <20020906.224442.74757833.glyph@twistedmatrix.com>


On Fri, 06 Sep 2002 17:31:51 -0600, Uche Ogbuji <uche.ogbuji at fourthought.com> wrote:

> BTW, from what you're describing above, you are *not* parsing XHTML.  If it 
> violates the DTD, it is not XHTML.  Period.

> Just say you're parsing "HTML" and don't mention a version.  That's the only 
> way to say it correctly  ;-)

OK, "XML which browsers will render".  I am not parsing HTML, in that I won't
accept XML that is not well-formed.  I suppose I could try to wrap HtmlParser
with minidom... yuck.  Gross, but probably a good idea, come to think of it :)

> Well, no one can tell you what to do with your time, but such general comments 
> are not very useful.  It's not as if you posted 10 bug reports, then threw up 
> your hands and said "I'm blowing this joint".  You made one vague mention of a 
> cloneNode bug, without even a bare test case.

The reason I mentioned the cloneNode bug is because it is the most reliable and
the most trivial to demonstrate.  Like I said; at some point, I will clean up
my complaints and submit some bug reports.  Here's a "bare test case" of that
particular spurious accusation:

    glyph at zelda:~% python
    Python 2.2.1 (#1, Aug 30 2002, 09:36:47) 
    [GCC 2.95.4 20011002 (Debian prerelease)] on linux2
    Type "help", "copyright", "credits" or "license" for more information.
    >>> from xml.dom.minidom import parseString
    >>> parseString("<hello_world/>").cloneNode(1)
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
      File "/usr/lib/python2.2/site-packages/_xmlplus/dom/minidom.py", line 186, in cloneNode
        clone = _clone_node(self, deep, self.ownerDocument or self)
      File "/usr/lib/python2.2/site-packages/_xmlplus/dom/minidom.py", line 1248, in _clone_node
        elif node.nodeType == PROCESSING_INSTRUCTION_NODE:
    NameError: global name 'PROCESSING_INSTRUCTION_NODE' is not defined

In order to do the work I want to do, though, those bug reports aren't going to
help.  Even if you resolved every bug report that I submitted within a week, I
would be stuck in the same place I am now: I have to work around the bugs in a
bunch of old versions of PyXML or produce what amounts to my own
`implementation' of an XML parser.  Granted, if I packaged a newer, fixed-up
version of PyXML with Twisted, I wouldn't have to be mucking about with bits
and bytes -- but I *would* have to understand the entire ontology of confusion
associated with cross-language XML APIs.

My main frustration is with packaging.  If all the world were running Debian
unstable, I'd be fine: I'd just say Depends: python2.2-xml >= 0.9.  However,
with lots of users in Windows, and many more on other linux platforms with less
pleasant package management, every new package that Twisted requires is another
fifteen minutes that the software takes to get running.  It's already confusing
enough to understand it when it *works*; I want the process of getting it
running to be as seamless as possible :).

For the applications that I'm intending to write, just doing my own parser and
API is both more appealing and more rewarding.  Neither DOM nor SAX will
present an API which allows me to get network XML events in quite the way I
want, so I'm going to have to do some wrapping.  (I do wish pyRXP were
event-based... it's very close, in spirit, to what I want.)  If the general
quality of XML parsers in Python were really high, I would regard this impulse
as contrary and counterproductive -- why write my own library for doing this
when perfectly good ones already exist and and are deployed all over the place?

So maybe I'm just rationalizing what I would have done anyway.  Nevertheless,
it is easier to write my own XML parser than to even properly report the bugs
that I have thus far discovered.

> No one gets paid to develop PyXML, but if you come our way a bit, we're quite 
> willing to help.

I appreciate that.  At some point I hope to have the time to run down every
last bug I've found and help PyXML to become very robust.  (I know that my
requirements are at least a little esoteric; I don't plan for Twisted to be a
general-purpose XML processing toolkit!)  Despite my various problems with it,
PyXML *is* what got me to see why XML might be worthwhile and kind of cool in
some circumstances.

For more information my perception of XML, and why my requirements are as
stripped-down as they are, look at the presentation here:

    http://xmlsucks.org/but_you_have_to_use_it_anyway/

(Yes, it's a real URL, and it's not mine.)

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020906/744f9cc4/attachment.sig>

From uche.ogbuji at fourthought.com  Fri Sep  6 17:31:51 2002
From: uche.ogbuji at fourthought.com (Uche Ogbuji)
Date: Fri, 06 Sep 2002 17:31:51 -0600
Subject: [XML-SIG] Re: [Twisted-Python] Can anyone recommend a sensible 
 XML parser for Python?
In-Reply-To: Message from Eron Lloyd <elloyd@lancaster.lib.pa.us> 
   of "06 Sep 2002 12:36:12 EDT." <1031330172.1094.9.camel@phobos> 
Message-ID: <E17nSaC-0000Lk-00@malatesta.local>

> Hmm, I know that minidom has had some problems recently, but it has also
> seen some good improvements. It sounds like you need more robust DOM
> support--have you tried 4DOM? It's not as fast, but it does adhere to
> the spec the best.

cDomlette's cloneNode does work.  If minidom's doesn't, a bug report would be 
nice.

> Maybe (when you have time) if you let us know what
> you expect to accomplish we can help out--the people in XML-SIG are some
> of the sharpest in the community. Perhaps TREX or RELAX-NG would be more
> suitable. I guess the only comforting thing I can say is that every
> development community is experiencing growing pains when it comes to an
> XML strategy.
> 
> Good luck,
> 
> Eron
> 
> On Fri, 2002-09-06 at 02:39, Glyph Lefkowitz wrote:
> > 
> > On 05 Sep 2002 17:53:09 -0400, Eron Lloyd <elloyd at lancaster.lib.pa.us> wrote:
> > > Are you referring to PyXML? I know xml.* in the Standard Library is 
> > > pretty weak by far (but getting better!).
> > 
> > Yes.  In fact, PyXML is a big part of the problem.  Its "minidom" module, for
> > example, is *far* buggier than the one found in the standard library.  (As an
> > example of that, try to figure out how to make cloneNode work on a Document
> > object.)

What version of PyXML?


> > I could deal with one set of potential problems and pitfalls using XML in
> > Python and work around then, but I have to work around every combination of
> > versions to make a useful app that doesn't have very stringent installation
> > requirements: in pracitice this means 4 environments: python2.1 with pyxml,
> > python2.1 standalone, python2.2 with pyxml, python2.2 standalone.
> > 
> > I don't want a plethora of XML parsers with rich features, all of which are
> > broken.  I want *one* XML parser that can *reliably* transform a stream of
> > bytes into a stream of nodes, and a text file into a tree of nodes. 

You haven't given any evidence to the effect that PyXML does not have this.  A 
bug in cloneNode has nothing to do with parsing.


> > You
> > mentioned validatation in your post and I explicitly said that validation is
> > worse than useless to me; in most cases I want to parse XHTML, which means
> > dealing with lots of potentially DTD-violating stuff which is still "valid" as
> > far as I'm concerned.

Doesn't HtmlParser do the trick?  If not, you could try 
dom.ext.readers.HtmlReader with a minidom implementation used to override the 
default.

BTW, from what you're describing above, you are *not* parsing XHTML.  If it 
violates the DTD, it is not XHTML.  Period.

Just say you're parsing "HTML" and don't mention a version.  That's the only 
way to say it correctly  ;-)


> > Eventually I'll clean up the problem cases I'm having and submit them as bug
> > reports, but right now it's not worth my time, because I really don't want to
> > deal with the fragility of the PyXML or python-standard-library xml.* stuff.

Well, no one can tell you what to do with your time, but such general comments 
are not very useful.  It's not as if you posted 10 bug reports, then threw up 
your hands and said "I'm blowing this joint".  You made one vague mention of a 
cloneNode bug, without even a bare test case.

No one gets paid to develop PyXML, but if you come our way a bit, we're quite 
willing to help.


-- 
Uche Ogbuji                                    Fourthought, Inc.
http://uche.ogbuji.net    http://4Suite.org    http://fourthought.com
Track chair, XML/Web Services One Boston: http://www.xmlconference.com/
Basic XML and RDF techniques for knowledge management, Part 7 - 
http://www-106.ibm.com/developerworks/xml/library/x-think12.html
Keeping pace with James Clark - http://www-106.ibm.com/developerworks/xml/libra
ry/x-jclark.html
Python and XML development using 4Suite, Part 3: 4RDF - 
http://www-105.ibm.com/developerworks/education.nsf/xml-onlinecourse-bytitle/8A
1EA5A2CF4621C386256BBB006F4CEC





From fdrake at acm.org  Fri Sep  6 17:49:45 2002
From: fdrake at acm.org (Fred L. Drake, Jr.)
Date: Fri, 6 Sep 2002 19:49:45 -0400
Subject: [XML-SIG] Re: [Twisted-Python] Can anyone recommend a sensible XML
 parser for Python?
In-Reply-To: <E17nSaC-0000Lk-00@malatesta.local>
References: <elloyd@lancaster.lib.pa.us>
	<1031330172.1094.9.camel@phobos>
	<E17nSaC-0000Lk-00@malatesta.local>
Message-ID: <15737.16153.431188.210149@grendel.zope.com>

Uche Ogbuji writes:
 > cDomlette's cloneNode does work.  If minidom's doesn't, a bug
 > report would be nice.

There were some bugs checked into the minidom implementation at the
last minute before the PyXML 0.8 release; all the ones that I know of
are fixed in CVS.  If there are still bugs in that version of the
code, I'd really like to see a bug report filed on SourceForge.


  -Fred

-- 
Fred L. Drake, Jr.  <fdrake at acm.org>
PythonLabs at Zope Corporation



From acapnotic at twistedmatrix.com  Fri Sep  6 22:27:32 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 06 Sep 2002 21:27:32 -0700
Subject: [Twisted-Python] typed mktap usage.Options parameters
Message-ID: <1031372854.14038.28.camel@troglodyte.funhouse>

just jotting down this note so it gets saved someplace:

There are some very common types of parameters mktap uses -- remote host
or IP, port number, local interface to bind to, password.  We should
have some sort of typed optParameters for this, so that any tap
constructor that takes a port can just say "wordsPort isa port" and get
back a number instead of having to int() the string and/or look it up in
/etc/services, etc.  Another idea being that password-type options
should be prompted for rather than specified on the command line, as
command line parameters are all too visible in the system process table
on many systems.




From glyph at twistedmatrix.com  Fri Sep  6 22:40:51 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 06 Sep 2002 23:40:51 -0500 (CDT)
Subject: [Twisted-Python] typed mktap usage.Options parameters
In-Reply-To: <1031372854.14038.28.camel@troglodyte.funhouse>
References: <1031372854.14038.28.camel@troglodyte.funhouse>
Message-ID: <20020906.234051.55512897.glyph@twistedmatrix.com>


On 06 Sep 2002 21:27:32 -0700, Kevin Turner <acapnotic at twistedmatrix.com> wrote:
> just jotting down this note so it gets saved someplace:
> 
> There are some very common types of parameters mktap uses -- remote host
> or IP, port number, local interface to bind to, password.  We should
> have some sort of typed optParameters for this, so that any tap
> constructor that takes a port can just say "wordsPort isa port" and get
> back a number instead of having to int() the string and/or look it up in
> /etc/services, etc.  Another idea being that password-type options
> should be prompted for rather than specified on the command line, as
> command line parameters are all too visible in the system process table
> on many systems.

My thought on this is that Reactor and Application should both have
"listenString" and "connectString" methods which take a host/port/transport in
some sort of string syntax which we can specify on command lines.  So you could
say... connectString("tcp:8080:localhost") or listenString("ssl:8080").  I
haven't fully thought it out and I didn't want to try to rush it in before 1.0
and then change it around lots later, but I think this approach in general is a
necessary one (otherwise we'll end up implementing this mktap functionality you
describe everywhere that you want to open a socket).

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020906/85d51444/attachment.sig>

From waterbug at beeblebrox.gsfc.nasa.gov  Fri Sep  6 23:10:37 2002
From: waterbug at beeblebrox.gsfc.nasa.gov (Steve Waterbury)
Date: Sat, 07 Sep 2002 01:10:37 -0400
Subject: [Twisted-Python] typed mktap usage.Options parameters
References: <1031372854.14038.28.camel@troglodyte.funhouse> <20020906.234051.55512897.glyph@twistedmatrix.com>
Message-ID: <3D798A4D.82096601@beeblebrox.gsfc.nasa.gov>

Glyph Lefkowitz wrote:
> My thought on this is that Reactor and Application should both have
> "listenString" and "connectString" methods which take a host/port/transport in
> some sort of string syntax which we can specify on command lines.  So you could
> say... connectString("tcp:8080:localhost") or listenString("ssl:8080").  ...

... or connectString("unix:/foo"), right?  :^)

Steve.



From fdrake at acm.org  Fri Sep  6 22:07:28 2002
From: fdrake at acm.org (Fred L. Drake, Jr.)
Date: Sat, 7 Sep 2002 00:07:28 -0400
Subject: [XML-SIG] Re: [Twisted-Python] Can anyone recommend a sensible XML
 parser for Python?
In-Reply-To: <20020906.224442.74757833.glyph@twistedmatrix.com>
References: <elloyd@lancaster.lib.pa.us>
	<E17nSaC-0000Lk-00@malatesta.local>
	<20020906.224442.74757833.glyph@twistedmatrix.com>
Message-ID: <15737.31616.908090.505123@pcp745479pcs.reston01.va.comcast.net>

Glyph Lefkowitz writes:
 > The reason I mentioned the cloneNode bug is because it is the most
 > reliable and the most trivial to demonstrate.  Like I said; at some
 > point, I will clean up my complaints and submit some bug reports.
 > Here's a "bare test case" of that particular spurious accusation:

This particular bug has already been fixed in CVS.

 > In order to do the work I want to do, though, those bug reports
 > aren't going to help.  Even if you resolved every bug report that I
 > submitted within a week, I would be stuck in the same place I am
 > now: I have to work around the bugs in a bunch of old versions of
 > PyXML or produce what amounts to my own `implementation' of an XML

If you're shipping commercial applications, ship the versions of
relevant libraries and Python needed for the application.  Eating up
disk space may be annoying, but it's cheap enough not to be a real
problem.  Bugs are a real problem, no matter how unfortunate, even if
they're not your own.

If the issue is that you're shipping a framework that needs to work
with as many other packages as possible, then document which versions
it's known to work with, which versions its known not to work with,
and keep moving.

Please understand, I'm really sorry PyXML 0.8 had bugs, but we're not
getting paid for this, so I don't feel it's my job to double-check
every checkin that every PyXML develop makes before a release; I try
to make my checkins work as well as I can, and I do test with 4
different major versions of Python.  If you need PyXML to become
increasingly bug free over time, I'd like to suggest two things:

1. Keep track of the CVS version regularly, and test it out with your
   components.  Sometimes this can be tedious, but good automated
   tests can make this substantially easier.  Report bugs quickly
   using the SourceForge tracker.

2. Contribute regression tests to the project.  We know our tests are
   not complete, and are improving them with each release, but some
   assistance with this, especially when you report bugs, can make
   more of a difference even than contributing fixes (which are also
   welcome).

 > parser.  Granted, if I packaged a newer, fixed-up version of PyXML
 > with Twisted, I wouldn't have to be mucking about with bits and
 > bytes -- but I *would* have to understand the entire ontology of
 > confusion associated with cross-language XML APIs.

I must be missing something.  Doesn't it just mean that you need to
provide a sufficiently updated PyXML distribution?

 > My main frustration is with packaging.  If all the world were
 > running Debian unstable, I'd be fine: I'd just say Depends:
 > python2.2-xml >= 0.9.  However, with lots of users in Windows, and

Yeah, the packaging sucks.  It's not any worse than for any other bit
of library code though, as far as I can tell.  (I'll admit the horizon
for my sight is substantially limited to open source software,
however.)

 > For the applications that I'm intending to write, just doing my own
 > parser and API is both more appealing and more rewarding.  Neither
 > DOM nor SAX will present an API which allows me to get network XML
 > events in quite the way I want, so I'm going to have to do some

If you don't think the interfaces match you application space very
well, please describe your requirements and explain how the current
APIs don't meet your requirements, and what sort of APIs you're
looking for.

 > If the general quality of XML parsers in Python were really high, I
 > would regard this impulse as contrary and counterproductive -- why

You talk about parser, but I don't think that's what you mean.  The
bug you referred to in minidom had nothing to do with the underlying
parser; it would have manifested itself with any parser you picked
that reported processing instructions.  ("All of them.")

 > So maybe I'm just rationalizing what I would have done anyway.
 > Nevertheless, it is easier to write my own XML parser than to even
 > properly report the bugs that I have thus far discovered.

As an Expat maintainer, I wish you luck.  ;-)

 > I appreciate that.  At some point I hope to have the time to run
 > down every last bug I've found and help PyXML to become very
 > robust.

Yes, bug reports are definately necessary to develop a solid piece of
software.  I do hope we can encourage you to produce a few.


  -Fred

-- 
Fred L. Drake, Jr.  <fdrake at acm.org>
PythonLabs at Zope Corporation



From uche.ogbuji at fourthought.com  Sat Sep  7 00:10:51 2002
From: uche.ogbuji at fourthought.com (Uche Ogbuji)
Date: Sat, 07 Sep 2002 00:10:51 -0600
Subject: [XML-SIG] Re: [Twisted-Python] Can anyone recommend a sensible 
 XML parser for Python?
In-Reply-To: Message from Glyph Lefkowitz <glyph@twistedmatrix.com> 
   of "Fri, 06 Sep 2002 22:44:42 CDT." <20020906.224442.74757833.glyph@twistedmatrix.com> 
Message-ID: <E17nYor-0000u0-00@malatesta.local>

> ----Security_Multipart(Fri_Sep__6_22:44:42_2002_475)--
> Content-Type: Text/Plain; charset=us-ascii
> Content-Transfer-Encoding: 7bit
> 
> 
> On Fri, 06 Sep 2002 17:31:51 -0600, Uche Ogbuji <uche.ogbuji at fourthought.com> wrote:
> 
> > BTW, from what you're describing above, you are *not* parsing XHTML.  If it 
> > violates the DTD, it is not XHTML.  Period.
> 
> > Just say you're parsing "HTML" and don't mention a version.  That's the only 
> > way to say it correctly  ;-)
> 
> OK, "XML which browsers will render".  I am not parsing HTML, in that I won't
> accept XML that is not well-formed.  I suppose I could try to wrap HtmlParser
> with minidom... yuck.  Gross, but probably a good idea, come to think of it :)

I can't imagine why this would be gross.  IMO, it's illustrates very admirable 
technique, and one of the strengths of Python/XML.  The parsing mechanism and 
the generated representation are independent of each other, so you can mix 
them and match them in order to take advantage of the most needed features of 
either.

We put a lot of work into making this possible, and I find it very elegant.  
C++ folks took ages before they cottonned on to such an approach (in the STL), 
and now it has them in raptures (generic programming is all the rage).  Of 
course, old strait-jacket Java can't touch this.  Too bad for them.


> The reason I mentioned the cloneNode bug is because it is the most reliable and
> the most trivial to demonstrate.  Like I said; at some point, I will clean up
> my complaints and submit some bug reports.  Here's a "bare test case" of that
> particular spurious accusation:
> 
>     glyph at zelda:~% python
>     Python 2.2.1 (#1, Aug 30 2002, 09:36:47) 
>     [GCC 2.95.4 20011002 (Debian prerelease)] on linux2
>     Type "help", "copyright", "credits" or "license" for more information.
>     >>> from xml.dom.minidom import parseString
>     >>> parseString("<hello_world/>").cloneNode(1)
>     Traceback (most recent call last):
>       File "<stdin>", line 1, in ?
>       File "/usr/lib/python2.2/site-packages/_xmlplus/dom/minidom.py", line 186, in cloneNode
>         clone = _clone_node(self, deep, self.ownerDocument or self)
>       File "/usr/lib/python2.2/site-packages/_xmlplus/dom/minidom.py", line 1248, in _clone_node
>         elif node.nodeType == PROCESSING_INSTRUCTION_NODE:
>     NameError: global name 'PROCESSING_INSTRUCTION_NODE' is not defined


You see, this is why reporting such "bugs" early is helpful.  I could have 
told you ages ago that it is a *bad* idea to call cloneNode on a Document 
object.

Accordin to the DOM Level 2 spec:

"And, cloning Document, DocumentType, Entity, and Notation nodes is 
implementation dependent."

IOW, yer gets what yer gets and can't really complain  :-)

Can you expand a bit more on the actual use case that makes you think you want 
to clone a document node?

I do agree that the confused error message is a glitch.  Current PyXML CVS 
gives a more straightforward "sod off"  :-)

>>> from xml.dom.minidom import parseString
>>> parseString("<hello_world/>").cloneNode(1)
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
  File "/home/uogbuji/lib/python2.2/site-packages/_xmlplus/dom/minidom.py", 
line 198, in cloneNode
    clone = _clone_node(self, deep, self.ownerDocument or self)
  File "/home/uogbuji/lib/python2.2/site-packages/_xmlplus/dom/minidom.py", 
line 1454, in _clone_node
    raise Exception("Cannot clone node %s" % repr(node))
Exception: Cannot clone node <xml.dom.minidom.Document instance at 0x82e9cbc>


We choose not to allow it.  Perfectly legal, and I think this is the right 
choice.


> In order to do the work I want to do, though, those bug reports aren't going to
> help.  Even if you resolved every bug report that I submitted within a week, I
> would be stuck in the same place I am now: I have to work around the bugs in a
> bunch of old versions of PyXML

You mean you can't require, say PyXML 0.8.1?  Tough crowd you develop for?  :-)


> or produce what amounts to my own `implementation' of an XML parser. 

If you try going this route, I guarantee you'll still be trying to get the 
most basic things right six months from now.


> Granted, if I packaged a newer, fixed-up
> version of PyXML with Twisted, I wouldn't have to be mucking about with bits
> and bytes -- but I *would* have to understand the entire ontology of confusion
> associated with cross-language XML APIs.
> 
> My main frustration is with packaging.  If all the world were running Debian
> unstable, I'd be fine: I'd just say Depends: python2.2-xml >= 0.9.  However,
> with lots of users in Windows, and many more on other linux platforms with less
> pleasant package management, every new package that Twisted requires is another
> fifteen minutes that the software takes to get running.  It's already confusing
> enough to understand it when it *works*; I want the process of getting it
> running to be as seamless as possible :).

Here you have a point.  Python, PyXML, and a lot of the related packages move 
very quickly,. and so quickly that they cause all manner of packaging problems.

There is no easy solution to this.  Python is much more of a volunteer 
community than, say JAva.  People work on Python and PyXML mostly to scratch 
their itches, which means they have less incentive to worry about the 
packaging mess they leave behind.

This is the impetus for the Python-in-a-tie effort for Python proper.  I do 
think we'd make a lot more friends if there were a matching PyXML-in-a-tie.  
It would mean companies would have to commit scarce resources to freezing 
interfaces and then testing and packaging to oblivion.

I have had it in mind to suggest a PyXML-in-a-tie type effort in the Python 
Business Forum once the effort on Python itself starts to gain legs.  I guess 
I can count on you to at least help cheerlead?  :-)


> For the applications that I'm intending to write, just doing my own parser and
> API is both more appealing and more rewarding.

Really?  Color me deep skeptical.  I have not seen an application on earth 
where implementing one's own parser is a good idea, and precious few where 
implementing one's own API is a good idea.  I have a lot of colleagues who 
have tried.

By all means, if you'd like to try, go ahead.


> Neither DOM nor SAX will
> present an API which allows me to get network XML events in quite the way I
> want, so I'm going to have to do some wrapping.

I have learned through my own bitter experience that you do not want network 
interfaces to have *anything* to do with the lexical XML layer (or even 
Infoset).  It is best to design network interactions around *application* 
level semantics.  Basically sending around chunks of XML text is far less 
hazardous than what I think you mean.


> (I do wish pyRXP were
> event-based... it's very close, in spirit, to what I want.)  If the general
> quality of XML parsers in Python were really high, I would regard this impulse
> as contrary and counterproductive -- why write my own library for doing this
> when perfectly good ones already exist and and are deployed all over the place?

Well, as I said, I don't see any evidence that the quality of XML parsers in 
Python is not high.  You pointed out one problem in cloneNode which, from what 
I gather, was mostly because you're abusing DOM.  This had nothing to do with 
parsing.  Are you speaking generically?


> So maybe I'm just rationalizing what I would have done anyway.  Nevertheless,
> it is easier to write my own XML parser than to even properly report the bugs
> that I have thus far discovered.

I find this claim ludicrous on its face.  Writing an XML parser with the 
compliance level and quality of any of the ones in PyXML takes years.  Yes.  
Years.

Feel free to re-learn this fact the hard way, if you wish.


> For more information my perception of XML, and why my requirements are as
> stripped-down as they are, look at the presentation here:
> 
>     http://xmlsucks.org/but_you_have_to_use_it_anyway/
> 
> (Yes, it's a real URL, and it's not mine.)

Yes.  I'd guess we've all seen that link.  <shrug>  So what useful technology 
doesn't suck?  XML works for me.  Your mileage may vary.


-- 
Uche Ogbuji                                    Fourthought, Inc.
http://uche.ogbuji.net    http://4Suite.org    http://fourthought.com
Track chair, XML/Web Services One Boston: http://www.xmlconference.com/
Basic XML and RDF techniques for knowledge management, Part 7 - 
http://www-106.ibm.com/developerworks/xml/library/x-think12.html
Keeping pace with James Clark - http://www-106.ibm.com/developerworks/xml/libra
ry/x-jclark.html
Python and XML development using 4Suite, Part 3: 4RDF - 
http://www-105.ibm.com/developerworks/education.nsf/xml-onlinecourse-bytitle/8A
1EA5A2CF4621C386256BBB006F4CEC





From fdrake at acm.org  Sat Sep  7 01:14:40 2002
From: fdrake at acm.org (Fred L. Drake, Jr.)
Date: Sat, 7 Sep 2002 03:14:40 -0400
Subject: [XML-SIG] Re: [Twisted-Python] Can anyone recommend a sensible XML
 parser for Python?
In-Reply-To: <E17nYor-0000u0-00@malatesta.local>
References: <glyph@twistedmatrix.com>
	<20020906.224442.74757833.glyph@twistedmatrix.com>
	<E17nYor-0000u0-00@malatesta.local>
Message-ID: <15737.42848.170464.688796@pcp745479pcs.reston01.va.comcast.net>

Uche Ogbuji writes:
 > You see, this is why reporting such "bugs" early is helpful.  I could have 
 > told you ages ago that it is a *bad* idea to call cloneNode on a Document 
 > object.
 > 
 > Accordin to the DOM Level 2 spec:
 > 
 > "And, cloning Document, DocumentType, Entity, and Notation nodes is 
 > implementation dependent."

That's no reason to think its a bad idea to implement it or need it,
just that you can't rely on it being supported by an arbitrary DOM
implementation.

 > I do agree that the confused error message is a glitch.  Current PyXML CVS 
 > gives a more straightforward "sod off"  :-)

Not quite; the previous message would have been raised calling
cloneNode() on a processing instruction as well.  Or calling it with
deep=1 on a portion of the tree that contained a processing
instruction.  That was a real bug, and not an arbitrary limitation.

 > We choose not to allow it.  Perfectly legal, and I think this is the right 
 > choice.

Honestly, I think we should implement cloneNode() for Document, simply
because not doing so seems an unnecessary limitation.  It is not for
the library to decide what is right for the application.

I agree that not supporting it is legal.  The exception that is raised
is wrong: it should be xml.dom.NotSupportedErr.

 > If you try going this route, I guarantee you'll still be trying to get the 
 > most basic things right six months from now.

Heck, we're still trying to get Expat right, and it isn't exactly the
freshest software around!

 > This is the impetus for the Python-in-a-tie effort for Python
 > proper.  I do think we'd make a lot more friends if there were a
 > matching PyXML-in-a-tie.  It would mean companies would have to

That would be nice to have.  First task:  improve & integrate all the
random piles of tests out there!  They should all be run when I type
"make check" at the top level, not just a handful.

 > You pointed out one problem in cloneNode which, from what I gather,
 > was mostly because you're abusing DOM.  This had nothing to do with

It is not at all clear that this is an abuse of the DOM, as I
explained above.


  -Fred

-- 
Fred L. Drake, Jr.  <fdrake at acm.org>
PythonLabs at Zope Corporation



From jml at mumak.net  Tue Sep  3 22:12:39 2002
From: jml at mumak.net (Jonathan Lange)
Date: 04 Sep 2002 14:12:39 +1000
Subject: [Twisted-Python] Web MVC hello world difficulties
Message-ID: <1031112760.4365.42.camel@sting>

Hello,

I am trying to use Web MVC to create a simple page that has a form with
a single text field. When something is entered into the text field,
'Hello World!' should be displayed in the greeting section.

I cannot get it to work, the greeting field remains unchanged, and the
value in the text field keeps being reset.

Below is a pretty simple example that demonstrates my problem.

Thanks,
jml

<!-- index.xhtml -->
<html>
<head>
    <title class="title">Title will go here</title>
</head>
<body>
    <h1 class="title">
        Title will go here
    </h1>
    <p class="greeting">greeting</p>
    <form action="">
        <input type="TEXT" id="name"/>
    </form>
</body>
</html>



# hello.rpy
import helloresource

model = helloresource.MHello()
resource = helloresource.CHello(model)



# helloresource.py
from twisted.web import wmvc
from twisted.web import domwidgets
from twisted.web import domhandlers
from twisted.web import domtemplate
from twisted.python import domhelpers
        
class MHello(wmvc.WModel):
    def __init__(self):
        wmvc.WModel.__init__(self)
        self.title = "Mezzanine"
        self.name = "World"
        self.greeting = ""
        
    def updateGreeting(self):
        self.greeting = 'Hello, %s!' % self.name
        
class VHello(wmvc.WView):
    templateFile = 'index.xhtml'
    def setUp(self, request, document):
        self.model.updateGreeting()
    
    def factory_title(self, request, node):
        domhelpers.clearNode(node)
        return domwidgets.Text(self.model)
        
    def factory_greeting(self, request, node):
        domhelpers.clearNode(node)
        return domwidgets.Text(self.model)
        
    def factory_name(self, request, node):
        domhelpers.clearNode(node)
        return domwidgets.InputText(self.model)
    
class NameHandler(domhandlers.SingleValue):
    def check(self, request, data):
        if data:
            return 1

    def commit(self, request, node, data):
        domhandlers.SingleValue.commit(self, request, node, data)
        print "data: %s" % data

class CHello(wmvc.WController):
    def factory_name(self, model):
        return NameHandler(model)

wmvc.registerViewForModel(VHello, MHello)
wmvc.registerControllerForModel(CHello, MHello)







From twisted at moshez.org  Sat Sep  7 10:36:29 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 7 Sep 2002 16:36:29 -0000
Subject: [Twisted-Python] 2.3 and an unstable chroot
Message-ID: <20020907163629.22738.qmail@green.zadka.com>

Dear root at pyramid,

Python2.3's problems with distutils are fixed, so I would like to turn
Python2.3 support on for Twisted 0.99.1. We have two options:

1. I can build in the unstable chroot on moshez.org: that will mean wasted
   upload and download time.
2. We can create an ssh-able unstable chroot on pyramid.

Here are the steps to do so:
1. Pick a directory
2. Run debootstrap *woody*
3. Enter the chroot, change apt/sources.list to point to sid and dist-upgrade
4. Install ssh, and configure it to be a server
5. Copy /etc/passwd from outside to the chroot
6. Run a script to make home directories and chown them
7. Copy the $CHROOT/etc/init.d/ssh to /etc/init.d/ssh-chroot
8. Modify /etc/init.d/ssh-chroot so that all commands look at files in the
   chroot, and such that start-stop-server runs the command "chroot" with
   the argument "sshd" (man start-stop-server for that)

Thanks.





From sean at twistedmatrix.com  Sat Sep  7 12:21:40 2002
From: sean at twistedmatrix.com (Sean Riley)
Date: Sat, 7 Sep 2002 13:21:40 -0500
Subject: [Twisted-Python] serial datatype in t.e.row
Message-ID: <HOEEKPCOKELHCNIJNMAGCEKHCGAA.sean@twistedmatrix.com>

I have been looking at adding support for "serial" columns into
twisted.enterprise.row and it appears to be harder than i originally
thought.

Serial columns auto-increment when a row is inserted so that the application
doesnt have to manage the value of the index manually. So:

	CREATE TABLE mytable
	(
	  column1  serial,
	  column2  int
	);

	INSERT INTO mytable (column2) VALUES (33);

will actually auto-increment the sequence for "column1" and use the next
value.

But.. using twisted enterprise:

	newRow = MyRow()
	reflector.insertRow(newRow)

does effectively the same thing, but the newRow object doesn't know the
value of the index column (column1 in this case) that was just inserted, so
it doesn't know how to update or delete itself!

One solution may be to manually run a

	SELECT nextval('sequencename')

to get the next value and use that for the insert, but this requires an
extra step for each insert, and requires that the we know which tables have
serial columns (suprisingly hard to figure out..) and makes the behavior for
tables with serial columns and no serial columns very different.

Also, the behavior of auto-incrementing key columns is different for every
database implementation...



----------------
"If he's so smart, then how come he's dead?", Homer Simspon
Sean Riley
sean at ninjaneering.com




From acapnotic at twistedmatrix.com  Sat Sep  7 14:24:25 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 07 Sep 2002 13:24:25 -0700
Subject: [Twisted-Python] container elements in domtemplate
Message-ID: <1031430268.24317.7.camel@troglodyte.funhouse>

webquotes.html in the domtemplate howto doesn't cover this case.

template:
{{{
<foo>
  stuff

  <bar>
    things
  </bar>
</foo>
}}}

How do I replace "stuff" in the template without clearing the entire foo
node, thus destroyng bar and depriving me of the opportunity to insert
"things"?






From glyph at twistedmatrix.com  Sat Sep  7 14:30:56 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 07 Sep 2002 15:30:56 -0500 (CDT)
Subject: [Twisted-Python] container elements in domtemplate
In-Reply-To: <1031430268.24317.7.camel@troglodyte.funhouse>
References: <1031430268.24317.7.camel@troglodyte.funhouse>
Message-ID: <20020907.153056.125902168.glyph@twistedmatrix.com>

On 07 Sep 2002 13:24:25 -0700, Kevin Turner <acapnotic at twistedmatrix.com> wrote:
> <foo>stuff<bar>things</bar></foo>

> How do I replace "stuff" in the template without clearing the entire foo
> node, thus destroyng bar and depriving me of the opportunity to insert
> "things"?

That depends.

What about this case:

<foo>stuff<bar>things</bar>spam</foo>

Do you want to replace stuff *and* spam?  Or only stuff, or only spam, or both?
It sounds like you want to be reading some DOM documentation; this isn't really
specific to webmvc.


-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020907/e911cb6b/attachment.sig>

From glyph at twistedmatrix.com  Sat Sep  7 15:27:27 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 07 Sep 2002 16:27:27 -0500 (CDT)
Subject: [Twisted-Python] serial datatype in t.e.row
In-Reply-To: <HOEEKPCOKELHCNIJNMAGCEKHCGAA.sean@twistedmatrix.com>
References: <HOEEKPCOKELHCNIJNMAGCEKHCGAA.sean@twistedmatrix.com>
Message-ID: <20020907.162727.88468489.glyph@twistedmatrix.com>

On Sat, 7 Sep 2002 13:21:40 -0500, "Sean Riley" <sean at twistedmatrix.com> wrote:
> One solution may be to manually run a
> 
> 	SELECT nextval('sequencename')
> 
> to get the next value and use that for the insert, but this requires an
> extra step for each insert, and requires that the we know which tables have
> serial columns (suprisingly hard to figure out..) and makes the behavior for
> tables with serial columns and no serial columns very different.

It seems like it's reasonable for the "save" operation to return a Deferred,
since it's running in a thread anyway.  The behavior may be different, but the
interface would be the same.  Could the difference in behavior from the
interface standpoint be fixed by adding a "serial" hint to the "dbKeyColumns"
attribute?

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020907/93f8b007/attachment.sig>

From sean at twistedmatrix.com  Sat Sep  7 15:35:12 2002
From: sean at twistedmatrix.com (Sean Riley)
Date: Sat, 7 Sep 2002 16:35:12 -0500
Subject: [Twisted-Python] relationships in t.e.row
Message-ID: <HOEEKPCOKELHCNIJNMAGMEKICGAA.sean@twistedmatrix.com>

a natural extension of twisted.enterprise.row is to add support for
relationships between tables.

anyone got any good examples of tools or apps that do this well?

Some initial thoughts..

Currently, the reflector is initialized with the "stubs" structure that
consists of:

	stubClass, tablename, keycolumns

for each (database table / row class). This information could be extended to
include some relationship data in the form of foreign keys. This foreign key
data would allow relationships between tables in the database to be mirrored
into the reflector.

For example, in the existing row example code the stubs structure is:

stubs = [ (RoomRow, "testrooms", [("roomId","int4")]) ]

If there was another table "furniture" and a foreign key in that table that
connects it to the room table, then that could be specified when
initializing the reflector:

stubs = [
  (RoomRow,      "testrooms", [("roomId","int4")]), [] ),
  (FurnitureRow, "furniture", [("furnId","int4")]), [("roomId", "int4",
"rooms", "roomId")] )]

where the forth element in each entry is a foreign key of :
	(local_column_name,
	 column_type,
	 foreign_table_name,
	 foreign_column_name)

(could specify the foreign class also, but the reflector should already know
which class corresponds to the foreign table.)

This foreign key data would then be used when loading row objects from the
database. Any time a "RoomRow" object is loaded, it would load all of the
FurnitureRows for that room.  Although the foreign key data is specified for
the child table (furniture) it is when objects of the parent table
(testrooms) are loaded that the significant work happens.

Allowing an option for child rows to be loaded when loading a row is
probably a good idea.

This probably requires some changes to t.e.row to work. Currently the
optional "factoryMethod" is passed into Reflector::loadObjectsFrom. The
factoryMethod will need to be available for children classes also, so it
probably should be added to the stubs structure.

The "data" passed to loadObjectsFrom is also an issue, maybe the data passed
into the highest level loadObjectsFrom is passed down to children, or the
parent Row instance that the rows are being loaded for is passed as the
data...? Maybe loadObjectsFrom takes a parent object every time it is
called - this may even be required.

The relationship between rows once they are loaded is another issue. Where
are children row objects put once they are loaded? In the above example,
maybe the RoomRow object has a list member variable called "furniture" or
"children" added to it and the FurnitureRow objects are put in that list?
This becomes a type of containment system with a heirarchy of containers...

So, loading row objects is doable. I'm not sure of all the implications for
other SQL operations. Assuming that all changes to the database are going
through the row interface makes things easier, but it requires more
thought... A good goal is to be able to operate on these row objects in
memory and have the changes propagate into the database in  controllable
way.



----------------
"If he's so smart, then how come he's dead?", Homer Simspon
Sean Riley
sean at ninjaneering.com




From uche.ogbuji at fourthought.com  Sat Sep  7 12:54:46 2002
From: uche.ogbuji at fourthought.com (Uche Ogbuji)
Date: Sat, 07 Sep 2002 12:54:46 -0600
Subject: [XML-SIG] Re: [Twisted-Python] Can anyone recommend a sensible 
 XML parser for Python?
In-Reply-To: Message from "Fred L. Drake, Jr." <fdrake@acm.org> 
   of "Sat, 07 Sep 2002 03:14:40 EDT." <15737.42848.170464.688796@pcp745479pcs.reston01.va.comcast.net> 
Message-ID: <E17nkja-0002ue-00@malatesta.local>

> 
> Uche Ogbuji writes:
>  > You see, this is why reporting such "bugs" early is helpful.  I could have 
>  > told you ages ago that it is a *bad* idea to call cloneNode on a Document 
>  > object.
>  > 
>  > Accordin to the DOM Level 2 spec:
>  > 
>  > "And, cloning Document, DocumentType, Entity, and Notation nodes is 
>  > implementation dependent."
> 
> That's no reason to think its a bad idea to implement it or need it,
> just that you can't rely on it being supported by an arbitrary DOM
> implementation.

OK.  So what should it mean to clone any of these node types?  I can't hardly 
imagine anything that doesn't run into circular madness.  I think the DOM WG 
refused to specify this for good reason.


>  > I do agree that the confused error message is a glitch.  Current PyXML CVS 
>  > gives a more straightforward "sod off"  :-)
> 
> Not quite; the previous message would have been raised calling
> cloneNode() on a processing instruction as well.  Or calling it with
> deep=1 on a portion of the tree that contained a processing
> instruction.  That was a real bug, and not an arbitrary limitation.

OK.  Glad it's fixed, then.


>  > We choose not to allow it.  Perfectly legal, and I think this is the right 
>  > choice.
> 
> Honestly, I think we should implement cloneNode() for Document, simply
> because not doing so seems an unnecessary limitation.  It is not for
> the library to decide what is right for the application.

It's not arbitrary at all.  cloneNode is not supposed to alter the 
ownerDocument: that is for importNode to do.  So if you clone a document node, 
what happens?

Do you Create a new document (and thus docType) node and then effectively call 
importNode on the childNodes?  That's the only approach that makes sense to 
me.  Yet it's quite arbitrary and magical.  I would rather force people to be 
clear about what they're doing by manually creating another document and then 
calling importNode on all the childNodes of the original.

So I do not agree that we should support cloneNode for the 4 unspecified node 
types.


> I agree that not supporting it is legal.  The exception that is raised
> is wrong: it should be xml.dom.NotSupportedErr.

There is no stipulation that such an exception should be thrown.  The behavior 
is impl dependent, and I don't see why that doesn't mean the implementation 
can choose to throw whatever exception it wishes.  However, I certainly do not 
object to a change to throwing xml.dom.NotSupportedErr.  I just don't think 
it's a bug that right now it doesn't.


>  > This is the impetus for the Python-in-a-tie effort for Python
>  > proper.  I do think we'd make a lot more friends if there were a
>  > matching PyXML-in-a-tie.  It would mean companies would have to
> 
> That would be nice to have.  First task:  improve & integrate all the
> random piles of tests out there!  They should all be run when I type
> "make check" at the top level, not just a handful.

Yes.  Build and test farms would be the main engine of such an effort.


-- 
Uche Ogbuji                                    Fourthought, Inc.
http://uche.ogbuji.net    http://4Suite.org    http://fourthought.com
Track chair, XML/Web Services One Boston: http://www.xmlconference.com/
Basic XML and RDF techniques for knowledge management, Part 7 - 
http://www-106.ibm.com/developerworks/xml/library/x-think12.html
Keeping pace with James Clark - http://www-106.ibm.com/developerworks/xml/libra
ry/x-jclark.html
Python and XML development using 4Suite, Part 3: 4RDF - 
http://www-105.ibm.com/developerworks/education.nsf/xml-onlinecourse-bytitle/8A
1EA5A2CF4621C386256BBB006F4CEC





From sean at twistedmatrix.com  Sun Sep  8 14:48:58 2002
From: sean at twistedmatrix.com (Sean Riley)
Date: Sun, 8 Sep 2002 15:48:58 -0500
Subject: [Twisted-Python] relationships in t.e.row
In-Reply-To: <HOEEKPCOKELHCNIJNMAGMEKICGAA.sean@twistedmatrix.com>
Message-ID: <HOEEKPCOKELHCNIJNMAGEEKMCGAA.sean@twistedmatrix.com>

i now have a working version of relationships in t.e.row that also includes
simplifying the interface a little. It is however incompatible with the
existing version of the code...

Is anyone using t.w.row and if so, do they object to changes to add this
functionality even if it breaks existing code?


The new interface uses class attributes instead of the "stubs" stucture and
removes all of the class mutation that was being done.  Now, to define a
class for a database table looks like:

class FurnitureRow(row.RowObject):
    rowColumns    = ["furnId", "roomId", "name", "posx", "posy"]
    dbKeyColumns  = [("furnId","int4")]
    tableName     = "furniture"
    foreignKeys   = [("testrooms", [("roomId","int4")],
[("roomId","int4")]) ]

full code and docs to follow if no-one objects.


-----Original Message-----
From: twisted-python-admin at twistedmatrix.com
[mailto:twisted-python-admin at twistedmatrix.com]On Behalf Of Sean Riley
Sent: Saturday, September 07, 2002 4:35 PM
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] relationships in t.e.row


a natural extension of twisted.enterprise.row is to add support for
relationships between tables.

anyone got any good examples of tools or apps that do this well?

Some initial thoughts..

Currently, the reflector is initialized with the "stubs" structure that
consists of:

	stubClass, tablename, keycolumns

for each (database table / row class). This information could be extended to
include some relationship data in the form of foreign keys. This foreign key
data would allow relationships between tables in the database to be mirrored
into the reflector.

For example, in the existing row example code the stubs structure is:

stubs = [ (RoomRow, "testrooms", [("roomId","int4")]) ]

If there was another table "furniture" and a foreign key in that table that
connects it to the room table, then that could be specified when
initializing the reflector:

stubs = [
  (RoomRow,      "testrooms", [("roomId","int4")]), [] ),
  (FurnitureRow, "furniture", [("furnId","int4")]), [("roomId", "int4",
"rooms", "roomId")] )]

where the forth element in each entry is a foreign key of :
	(local_column_name,
	 column_type,
	 foreign_table_name,
	 foreign_column_name)

(could specify the foreign class also, but the reflector should already know
which class corresponds to the foreign table.)

This foreign key data would then be used when loading row objects from the
database. Any time a "RoomRow" object is loaded, it would load all of the
FurnitureRows for that room.  Although the foreign key data is specified for
the child table (furniture) it is when objects of the parent table
(testrooms) are loaded that the significant work happens.

Allowing an option for child rows to be loaded when loading a row is
probably a good idea.

This probably requires some changes to t.e.row to work. Currently the
optional "factoryMethod" is passed into Reflector::loadObjectsFrom. The
factoryMethod will need to be available for children classes also, so it
probably should be added to the stubs structure.

The "data" passed to loadObjectsFrom is also an issue, maybe the data passed
into the highest level loadObjectsFrom is passed down to children, or the
parent Row instance that the rows are being loaded for is passed as the
data...? Maybe loadObjectsFrom takes a parent object every time it is
called - this may even be required.

The relationship between rows once they are loaded is another issue. Where
are children row objects put once they are loaded? In the above example,
maybe the RoomRow object has a list member variable called "furniture" or
"children" added to it and the FurnitureRow objects are put in that list?
This becomes a type of containment system with a heirarchy of containers...

So, loading row objects is doable. I'm not sure of all the implications for
other SQL operations. Assuming that all changes to the database are going
through the row interface makes things easier, but it requires more
thought... A good goal is to be able to operate on these row objects in
memory and have the changes propagate into the database in  controllable
way.



----------------
"If he's so smart, then how come he's dead?", Homer Simspon
Sean Riley
sean at ninjaneering.com


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From sean at twistedmatrix.com  Sun Sep  8 15:17:50 2002
From: sean at twistedmatrix.com (Sean Riley)
Date: Sun, 8 Sep 2002 16:17:50 -0500
Subject: [Twisted-Python] caching of row objects
Message-ID: <HOEEKPCOKELHCNIJNMAGOEKMCGAA.sean@twistedmatrix.com>

Currently, if an application loads a RowObject for a particular row twice,
it gets two instances that correspond to the same database row. this has the
potential to cause data errors as these instances don't know about each
other.

One solution is make the reflector know about all the rowObjects loaded
(they all have unique key identifiers from the db) and act as a factory -
passing out either new objects or already loaded objects instead of
duplicates.

This is pretty easy to do, but I'm not sure of the implications for cleaning
up RowObjects. Maybe refcounting of rowobjects to remove them from this
cache? Maybe an explicit "unload" or "unCache" object method on the
reflector?  any ideas?

----------------
"If he's so smart, then how come he's dead?", Homer Simspon
Sean Riley
sean at ninjaneering.com




From glyph at twistedmatrix.com  Sun Sep  8 16:31:31 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 08 Sep 2002 17:31:31 -0500 (CDT)
Subject: [Twisted-Python] relationships in t.e.row
In-Reply-To: <HOEEKPCOKELHCNIJNMAGEEKMCGAA.sean@twistedmatrix.com>
References: <HOEEKPCOKELHCNIJNMAGMEKICGAA.sean@twistedmatrix.com>
	<HOEEKPCOKELHCNIJNMAGEEKMCGAA.sean@twistedmatrix.com>
Message-ID: <20020908.173131.45869269.glyph@twistedmatrix.com>

On Sun, 8 Sep 2002 15:48:58 -0500, "Sean Riley" <sean at twistedmatrix.com> wrote:
> i now have a working version of relationships in t.e.row that also includes
> simplifying the interface a little. It is however incompatible with the
> existing version of the code...

I don't think anyone else was using the existing code; it needed some of the
changes you've just mentioned first :-)

> Is anyone using t.w.row and if so, do they object to changes to add this
> functionality even if it breaks existing code?

> class FurnitureRow(row.RowObject):
>     rowColumns    = ["furnId", "roomId", "name", "posx", "posy"]
>     dbKeyColumns  = [("furnId","int4")]
>     tableName     = "furniture"
>     foreignKeys   = [("testrooms", [("roomId","int4")],
> [("roomId","int4")]) ]

The names of these attributes look a little sloppy.  Could they have a
consistent prefix to give readers of the code a hint at what they're looking
at?  I would propose "rowColumns, rowKeyColumns, rowTableName, rowForeignKeys",
as long as we're breaking compatibility.

This looks like a good evolution of the ROW interface.  How stable do you feel
this new iteration will be?

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020908/4686a90e/attachment.sig>

From glyph at twistedmatrix.com  Sun Sep  8 16:32:57 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 08 Sep 2002 17:32:57 -0500 (CDT)
Subject: [Twisted-Python] caching of row objects
In-Reply-To: <HOEEKPCOKELHCNIJNMAGOEKMCGAA.sean@twistedmatrix.com>
References: <HOEEKPCOKELHCNIJNMAGOEKMCGAA.sean@twistedmatrix.com>
Message-ID: <20020908.173257.69059563.glyph@twistedmatrix.com>

On Sun, 8 Sep 2002 16:17:50 -0500, "Sean Riley" <sean at twistedmatrix.com> wrote:

> This is pretty easy to do, but I'm not sure of the implications for cleaning
> up RowObjects. Maybe refcounting of rowobjects to remove them from this
> cache? Maybe an explicit "unload" or "unCache" object method on the
> reflector?  any ideas?

It sounds like this is a job for weak references.  We can use those, now that
we require Python 2.1 at minimum :).  Take a look at the docs for the "weakref"
module.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020908/6ae22514/attachment.sig>

From glyph at twistedmatrix.com  Sun Sep  8 19:06:53 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 08 Sep 2002 20:06:53 -0500 (CDT)
Subject: [Twisted-Python] Re: Can anyone recommend a sensible XML parser for Python?
In-Reply-To: <E17nYor-0000u0-00@malatesta.local>
References: <glyph@twistedmatrix.com>
	<E17nYor-0000u0-00@malatesta.local>
Message-ID: <20020908.200653.27439528.glyph@twistedmatrix.com>

On Sat, 07 Sep 2002 00:10:51 -0600, Uche Ogbuji <uche.ogbuji at fourthought.com> wrote:
> > On Fri, 06 Sep 2002 17:31:51 -0600, Uche Ogbuji <uche.ogbuji at fourthought.com> wrote:

> > I suppose I could try to wrap HtmlParser with minidom... yuck.  Gross, but
> > probably a good idea, come to think of it :)

> I can't imagine why this would be gross.

Sorry, I was saying that making sense of non-XHTML HTML is kind of gross.  I
did say that it was a good idea, and it's definitely a neat trick.

> Accordin to the DOM Level 2 spec: "And, cloning Document, DocumentType,
> Entity, and Notation nodes is implementation dependent."

This is why standards compliance is not terribly important to me.  I would
rather have a useful XML API than a standardized one.

> Can you expand a bit more on the actual use case that makes you think you want 
> to clone a document node?

I have a template "frame" document.  I want to clone the document, populate it
with information lifted from other XML files, and then write the resultant
(cloned) document out.  This is the very first use-case I ever had working with
XML and it is still the most common.

> We choose not to allow it.  Perfectly legal, and I think this is the right 
> choice.

Yes, but the point remains that this *used* to work, and now it *doesn't*.
This is functionality I found useful.  While I can't comment on the intrinsic
sense or nonsense of cloning document nodes in DOM, I do know that it's
difficult to keep track of when features like this appear and disappear in the
various different XML solutions for Python.

Maybe this is the only feature that has done this; I don't know.  It just
happens that it's a very commonly-used one for me.

This is just another instance of my general complaint that tracking versioning
dependencies is not worth the effort for my degenerately simple use-cases for
XML.

> You mean you can't require, say PyXML 0.8.1?  Tough crowd you develop for?
> :-)

There are still some parties interested in Twisted who are upset that it
requires Python 2.1; in fact, I felt guilty doing 2.1 support because I am
likely going to have to backport portions of it to 1.5.2 for some people.  We
can all thank Red Hat for this inane persistence of ancient python versions,
but it is sadly the world I live in.

> > My main frustration is with packaging.

> Here you have a point.  Python, PyXML, and a lot of the related packages move
> very quickly,. and so quickly that they cause all manner of packaging
> problems.

This is my main point, and this is the one that the PyXML community can do the
least to address.  Buggy and idiosyncratic implementations are already in the
wild, and some apps will depend on those particular bugs and idiosyncrasies.
If twisted depends on a new or different set of bugs and quirks, I make it
incompatible with whatever other XML-using applications are out there today.

Given that XML is an integration technology this is certainly less than
desirable.

> There is no easy solution to this.

Having a project that is precipitously approaching 1.0 myself, I can
sympathize.  As much as this sort of dependency and compatibility problem has
bothered me, I *know* there will be people that write apps for Twisted and will
curse my name when I enhance some functionality later on :-).

> I have had it in mind to suggest a PyXML-in-a-tie type effort in the Python
> Business Forum once the effort on Python itself starts to gain legs.  I guess
> I can count on you to at least help cheerlead?  :-)

Cheerleading, certainly :-).  Although I'm less interested in seeing PyXML
prepared for "business" clients and more interested in just seeing the level of
QA on the volunteer work go up.  If I *had* any spare "scarce resources" to
commit beyond my own projects, I would certainly help getting the unit tests
unified and automated.

> > or produce what amounts to my own `implementation' of an XML parser.
> 
> If you try going this route, I guarantee you'll still be trying to get the 
> most basic things right six months from now.

...

> > For the applications that I'm intending to write, just doing my own parser and
> > API is both more appealing and more rewarding.
> 
> Really?  Color me deep skeptical.  I have not seen an application on earth 
> where implementing one's own parser is a good idea, and precious few where 
> implementing one's own API is a good idea.  I have a lot of colleagues who 
> have tried.

While it is *possible* that I'm smarter than you think I am, it is certain that
I'm more stubborn.  My sophomoric attempt at an XML parser is now in Twisted
CVS.

I've had this objection raised over writing yet another a web server, yet
another remote procedure call protocol, yet another asynchronous socket server
and yet another database interface.  It seems like at least some of these ideas
were good ones, so I went ahead and wrote an XML parser and representation
anyway :-).

A fellow I know from IRC once said "it's easier to write an s-expression parser
for a particular platform by hand than to learn to use any of the XML tools for
that platform".  I think that if you're interested in keeping your focus narrow
in terms of what you do with XML, the same is true of writing an XML parser.

As a data point for this hypothesis, writing the parser and the node tree took
me less than half as much time as writing these posts to various mailing lists
about XML tools (not counting this post, which has been the most
time-consuming): it took less than a quarter as much time as attempting (and
failing) to track down bugs in PyXML, not counting the time I spent trying to
figure out how to turn off undesired features in a way that would work on more
than one version.  My two main existing PyXML-using applications are already
ported to this, changing barely any of their code.

Even so, this is almost not a fair comparison because I have several months of
experience with those tools on Python 2.1, and I've read a few books on XML
already.

> > Neither DOM nor SAX will present an API which allows me to get network XML
> > events in quite the way I want, so I'm going to have to do some wrapping.

> I have learned through my own bitter experience that you do not want network
> interfaces to have *anything* to do with the lexical XML layer (or even
> Infoset).  It is best to design network interactions around *application*
> level semantics.  Basically sending around chunks of XML text is far less
> hazardous than what I think you mean.

I'm not sure what you think I mean, really, but specifically, I'm thinking
particularly of parsing and routing Jabber XML streams.  If they are designed
in a "hazardous" way then it's not my issue...  I don't think much of their
protocol design as it is, especially with regard to routing.  (As you might
guess, I think the whole idea of using XML as a network protocol is rather
strange; but Jabber in particular could have been much better done.  BEEP, for
example, I consider odd, but not broken.)

> > (I do wish pyRXP were event-based... it's very close, in spirit, to what I
> > want.)  If the general quality of XML parsers in Python were really high, I
> > would regard this impulse as contrary and counterproductive -- why write my
> > own library for doing this when perfectly good ones already exist and and
> > are deployed all over the place?

> Well, as I said, I don't see any evidence that the quality of XML parsers in 
> Python is not high.  You pointed out one problem in cloneNode which, from what 
> I gather, was mostly because you're abusing DOM.  This had nothing to do with 
> parsing.  Are you speaking generically?

When I run my particular XML-munging tool, sometimes I get:

    NameError: global name 'PROCESSING_INSTRUCTION_NODE' is not defined

which we have discussed the reasons for here.  Slightly less often, but still with
a significant frequency (same python, same PyXML, same input), I get:

    zsh: segmentation fault       ] (doc/howto/basics)

I can't present hard evidence for this, I'm sorry, because I'm not familiar
with the internals of PyXML or expat and I can't get the bug to happen
reliably.  If I can ever boil it down to something predictable (i.e. less than
1500 lines of code and half a meg of XML to trigger it) be assured I will make
the most complete bug report I can.

> > Nevertheless, it is easier to write my own XML parser than to even properly
> > report the bugs that I have thus far discovered.

> I find this claim ludicrous on its face.  Writing an XML parser with the 
> compliance level and quality of any of the ones in PyXML takes years.  Yes.  
> Years.

I never claimed to need a parser with PyXML's level of compliance; in fact,
I've said several times that compliance at that level is annoying to me because
it's too strict.

I think we're going to have to agree to disagree on "quality", but at least for
my use cases I don't get occasional coredumps from my parser.  I cannot
substantiate this with real bug reports, so please feel free to dismiss this as
FUD if you disagree.  From my discussions with other developers near my
interest area, however, QA on the PyXML project is notoriously poor, and the
quality is wildly variant from release to release.  As you yourself have said,
this is likely to remain so until someone funds improvements.

I do not feel as though I am owed anything in particular by the PyXML project
or by any subscriber to any of these lists.  In fact, I'm quite grateful for it
having provided a nice, simple introduction to the world of XML; I probably
would not be using XML today at all if it weren't for the PyXML project.
Unfortunately, due to my larger-than-average concerns about dependencies and
ease of automating testing for my own project, I don't think that PyXML is a
good solution.  I need a *very* small XML library, with no strings attached.
PyXML is huge, and featureful, and I'm sure in the most recent incarnations
it's very robust.  It does come with a lot of strings attached though.

I have decided it's not worth my time at this point to invest a lot of effort
in helping out, until a few versions go by and the general impressions I get
from XML developers I work with are becoming more positive.  This doesn't mean
I won't lend a helping hand when I can, but the communication overhead to
working in the PyXML community is not currently worth the gain I would get from
it.

I wish you the best of luck in making me look foolish for saying that :-).

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020908/7b56fd46/attachment.sig>

From boyd at strakt.com  Mon Sep  9 03:45:21 2002
From: boyd at strakt.com (Boyd Roberts)
Date: Mon, 09 Sep 2002 11:45:21 +0200
Subject: [Twisted-Python] typed mktap usage.Options parameters
References: <1031372854.14038.28.camel@troglodyte.funhouse> <20020906.234051.55512897.glyph@twistedmatrix.com>
Message-ID: <3D7C6DB1.80509@strakt.com>

Glyph Lefkowitz wrote:

> So you could say... connectString("tcp:8080:localhost")
> or listenString("ssl:8080").

Plan 9 does exactly that:

    http://plan9.bell-labs.com/magic/man2html/2/dial

In the above example I'd change it to:

    connectString("protocol:host:port")

Although each protocol should interpret what comes
after the first : separator.  Obviously this should
be generalised so that the 'LHS' is handed the 'RHS'
to process.

* [LR]HS - Left/Right Hand Side






From fredrik at pythonware.com  Mon Sep  9 05:12:45 2002
From: fredrik at pythonware.com (Fredrik Lundh)
Date: Mon, 9 Sep 2002 13:12:45 +0200
Subject: [XML-SIG] Re: [Twisted-Python] Can anyone recommend a sensible  XML parser for Python?
References: <E17nYor-0000u0-00@malatesta.local>
Message-ID: <00fa01c257f1$d3f48ef0$0900a8c0@spiff>

uche wrote:

> > For the applications that I'm intending to write, just doing my own parser and
> > API is both more appealing and more rewarding.
> 
> Really?  Color me deep skeptical.  I have not seen an application on earth 
> where implementing one's own parser is a good idea, and precious few where 
> implementing one's own API is a good idea.

on the other hand, virtually every commercial XML python user
I know of use their own non-pydom parser/sax-style api/dom-
style api (with 4thought being the obvious exception, of course).

if I couldn't use ElementTree-like apis, I'd probably give up XML
programming...

(using element trees, Glyph's use case would look something like:

    tree = deepcopy.deepcopy(template_tree)
    for node in tree.find(pattern):
        expand(context, node)
    tree.write(stream)

)

</F>




From uche.ogbuji at fourthought.com  Mon Sep  9 13:39:01 2002
From: uche.ogbuji at fourthought.com (Uche Ogbuji)
Date: Mon, 09 Sep 2002 13:39:01 -0600
Subject: [Twisted-Python] Re: [XML-SIG] Re: Can anyone recommend a sensible XML parser for
 Python?
In-Reply-To: Message from Glyph Lefkowitz <glyph@twistedmatrix.com> 
   of "Sun, 08 Sep 2002 20:06:53 CDT." <20020908.200653.27439528.glyph@twistedmatrix.com> 
Message-ID: <E17oUNW-0006ov-00@malatesta.local>

> > Accordin to the DOM Level 2 spec: "And, cloning Document, DocumentType,
> > Entity, and Notation nodes is implementation dependent."
> 
> This is why standards compliance is not terribly important to me.  I would
> rather have a useful XML API than a standardized one.

Well, what do you think is the most useful behavior of cloning a document?  Is 
it the one I posted in response to thread?  If so, don't you think the element 
of surprise is too great (I'd be surprised myself at that behavior)?

Wouldn't it be better for Python/XML to offer a *separate*, specialized 
function for cloning nodes, rather than doing weird things with cloneNode?


> > Can you expand a bit more on the actual use case that makes you think you want 
> > to clone a document node?
> 
> I have a template "frame" document.  I want to clone the document, populate it
> with information lifted from other XML files, and then write the resultant
> (cloned) document out.  This is the very first use-case I ever had working with
> XML and it is still the most common.

I see.  It sounds as if a general document duplication function would be of 
use to you.  I agree that this would be useful.  I'm willing to write one and 
add it to xml.dom.ext.

But I don't think this is a use case for node.cloneNode.


> > We choose not to allow it.  Perfectly legal, and I think this is the right 
> > choice.
> 
> Yes, but the point remains that this *used* to work, and now it *doesn't*.

I don't remember.  What did it do when it "worked"?


> This is functionality I found useful.  While I can't comment on the intrinsic
> sense or nonsense of cloning document nodes in DOM, I do know that it's
> difficult to keep track of when features like this appear and disappear in the
> various different XML solutions for Python.

Was it ever documented?  Every software module has undocumented "features" 
that you use at your peril.  I don't think it's fair to complain when these 
appear and disappear.

Then again, the poor state of PyXML documentation in general weakens that 
point of mine, doesn't it?  Ah well.


> Maybe this is the only feature that has done this; I don't know.  It just
> happens that it's a very commonly-used one for me.
> 
> This is just another instance of my general complaint that tracking versioning
> dependencies is not worth the effort for my degenerately simple use-cases for
> XML.
> 
> > You mean you can't require, say PyXML 0.8.1?  Tough crowd you develop for?
> > :-)
> 
> There are still some parties interested in Twisted who are upset that it
> requires Python 2.1; in fact, I felt guilty doing 2.1 support because I am
> likely going to have to backport portions of it to 1.5.2 for some people.  We
> can all thank Red Hat for this inane persistence of ancient python versions,
> but it is sadly the world I live in.

I sympethize.  It's largely because of Red Hat that it took us so long to drop 
1.5 support in 4Suite.  But a couple of months ago we decided it is not worth 
the developemtn and support overhead and ditched support for all versions 
before 2.1.  I sleep better since then  :-)


> > > My main frustration is with packaging.
> 
> > Here you have a point.  Python, PyXML, and a lot of the related packages move
> > very quickly,. and so quickly that they cause all manner of packaging
> > problems.
> 
> This is my main point, and this is the one that the PyXML community can do the
> least to address.  Buggy and idiosyncratic implementations are already in the
> wild, and some apps will depend on those particular bugs and idiosyncrasies.
> If twisted depends on a new or different set of bugs and quirks, I make it
> incompatible with whatever other XML-using applications are out there today.
> 
> Given that XML is an integration technology this is certainly less than
> desirable.
> 
> > There is no easy solution to this.
> 
> Having a project that is precipitously approaching 1.0 myself, I can
> sympathize.  As much as this sort of dependency and compatibility problem has
> bothered me, I *know* there will be people that write apps for Twisted and will
> curse my name when I enhance some functionality later on :-).
> 
> > I have had it in mind to suggest a PyXML-in-a-tie type effort in the Python
> > Business Forum once the effort on Python itself starts to gain legs.  I guess
> > I can count on you to at least help cheerlead?  :-)
> 
> Cheerleading, certainly :-).  Although I'm less interested in seeing PyXML
> prepared for "business" clients and more interested in just seeing the level of
> QA on the volunteer work go up.  If I *had* any spare "scarce resources" to
> commit beyond my own projects, I would certainly help getting the unit tests
> unified and automated.
> 
> > > or produce what amounts to my own `implementation' of an XML parser.
> > 
> > If you try going this route, I guarantee you'll still be trying to get the 
> > most basic things right six months from now.
> 
> ...
> 
> > > For the applications that I'm intending to write, just doing my own parser and
> > > API is both more appealing and more rewarding.
> > 
> > Really?  Color me deep skeptical.  I have not seen an application on earth 
> > where implementing one's own parser is a good idea, and precious few where 
> > implementing one's own API is a good idea.  I have a lot of colleagues who 
> > have tried.
> 
> While it is *possible* that I'm smarter than you think I am, it is certain that
> I'm more stubborn.

I think you take the wrong gloss on my words.  I think Linus Torvalds himself 
would take years to write a complete and correct XML parser.  It's the nature 
of the beast (XML), not the programmer.

I certainly do not consider myself smart enough to take on that dragon.  I'm 
just glad to lean on folk like Clark (and Drake, Evans and co), Garshol and 
Viellard.


> My sophomoric attempt at an XML parser is now in Twisted
> CVS.

Interesting.  So how did you test it?


> I've had this objection raised over writing yet another a web server, yet
> another remote procedure call protocol, yet another asynchronous socket server
> and yet another database interface.  It seems like at least some of these ideas
> were good ones, so I went ahead and wrote an XML parser and representation
> anyway :-).

I would rather write a Web server, another RPC, another async socket server 
*and* another DBMS interface all in a row than just take on the single task of 
writing an XML parser.  And I think I can speak authoritatively, because I 
*have* implemented all four of those things.

 
> As a data point for this hypothesis, writing the parser and the node tree took
> me less than half as much time as writing these posts to various mailing lists
> about XML tools (not counting this post, which has been the most
> time-consuming): it took less than a quarter as much time as attempting (and
> failing) to track down bugs in PyXML, not counting the time I spent trying to
> figure out how to turn off undesired features in a way that would work on more
> than one version.  My two main existing PyXML-using applications are already
> ported to this, changing barely any of their code.

As I said, I am very skeptical of the result.  I'll be impressed when you tell 
me your home-brew XML parser passes the OASIS conformance suite.

Anyway, this is all moot argument.  It looks as if you've satisfied yourself 
for now.

Good luck.


-- 
Uche Ogbuji                                    Fourthought, Inc.
http://uche.ogbuji.net    http://4Suite.org    http://fourthought.com
Track chair, XML/Web Services One Boston: http://www.xmlconference.com/
Basic XML and RDF techniques for knowledge management, Part 7 - 
http://www-106.ibm.com/developerworks/xml/library/x-think12.html
Keeping pace with James Clark - http://www-106.ibm.com/developerworks/xml/libra
ry/x-jclark.html
Python and XML development using 4Suite, Part 3: 4RDF - 
http://www-105.ibm.com/developerworks/education.nsf/xml-onlinecourse-bytitle/8A
1EA5A2CF4621C386256BBB006F4CEC





From uche.ogbuji at fourthought.com  Mon Sep  9 13:42:44 2002
From: uche.ogbuji at fourthought.com (Uche Ogbuji)
Date: Mon, 09 Sep 2002 13:42:44 -0600
Subject: [XML-SIG] Re: [Twisted-Python] Can anyone recommend a sensible 
 XML parser for Python?
In-Reply-To: Message from "Fredrik Lundh" <fredrik@pythonware.com> 
   of "Mon, 09 Sep 2002 13:12:45 +0200." <00fa01c257f1$d3f48ef0$0900a8c0@spiff>
Message-ID: <E17oUR6-0006pL-00@malatesta.local>

> uche wrote:
> 
> > > For the applications that I'm intending to write, just doing my own parser and
> > > API is both more appealing and more rewarding.
> > 
> > Really?  Color me deep skeptical.  I have not seen an application on earth 
> > where implementing one's own parser is a good idea, and precious few where 
> > implementing one's own API is a good idea.
> 
> on the other hand, virtually every commercial XML python user
> I know of use their own non-pydom parser/sax-style api/dom-
> style api (with 4thought being the obvious exception, of course).

Really?  I am surprised.  I suspect the reasons for this would not be as 
straightforward as truly unique requirements.


> if I couldn't use ElementTree-like apis, I'd probably give up XML
> programming...
> 
> (using element trees, Glyph's use case would look something like:
> 
>     tree = deepcopy.deepcopy(template_tree)
>     for node in tree.find(pattern):
>         expand(context, node)
>     tree.write(stream)
> 
> )

I'm not familiar with ElementTrees.  At any rate, I don't see this use case as 
very daunting, especially if you have DOM and generators.


-- 
Uche Ogbuji                                    Fourthought, Inc.
http://uche.ogbuji.net    http://4Suite.org    http://fourthought.com
Track chair, XML/Web Services One Boston: http://www.xmlconference.com/
Basic XML and RDF techniques for knowledge management, Part 7 - 
http://www-106.ibm.com/developerworks/xml/library/x-think12.html
Keeping pace with James Clark - http://www-106.ibm.com/developerworks/xml/libra
ry/x-jclark.html
Python and XML development using 4Suite, Part 3: 4RDF - 
http://www-105.ibm.com/developerworks/education.nsf/xml-onlinecourse-bytitle/8A
1EA5A2CF4621C386256BBB006F4CEC





From waterbug at beeblebrox.gsfc.nasa.gov  Mon Sep  9 15:36:04 2002
From: waterbug at beeblebrox.gsfc.nasa.gov (Steve Waterbury)
Date: Mon, 09 Sep 2002 17:36:04 -0400
Subject: [Twisted-Python] Re: [XML-SIG] Re: Can anyone recommend a sensible 
 XML parser forPython?
References: <E17oUNW-0006ov-00@malatesta.local>
Message-ID: <3D7D1444.820908D7@beeblebrox.gsfc.nasa.gov>

Uche Ogbuji wrote:

> I would rather write a Web server, another RPC, another async socket server
> *and* another DBMS interface all in a row than just take on the single task of
> writing an XML parser.  And I think I can speak authoritatively, because I
> *have* implemented all four of those things.

Gee, kind of speaks volumes about XML, doesn't it?  
(I know -- cheap, but I couldn't resist ... ;^)  

Steve.



From sean at twistedmatrix.com  Mon Sep  9 21:22:19 2002
From: sean at twistedmatrix.com (Sean Riley)
Date: Mon, 9 Sep 2002 22:22:19 -0500
Subject: [Twisted-Python] Twisted Enterprise ROW
Message-ID: <HOEEKPCOKELHCNIJNMAGMELDCGAA.sean@twistedmatrix.com>

A major update to Twisted Enterprise Row is in!

The new features include:

- support for relationships between database tables. rows from child tables
can be loaded automatically when a row from a parent table is loaded.

- improved interface for intializing reflectors

- refactoring of the DBReflector into Reflector and SQLReflector to allow
easier implementation of new types of reflectors

- an XML Reflector that uses twisted.persisted.marmalade.

- added a ReflectorAuthorizer to dbcred to do authentication against any
reflector

For examples, take a look at twisted.doc.examples row_example.py and
row_xml.py

----------------
"If he's so smart, then how come he's dead?", Homer Simspon
Sean Riley
sean at ninjaneering.com




From fdrake at acm.org  Mon Sep  9 22:40:55 2002
From: fdrake at acm.org (Fred L. Drake, Jr.)
Date: Tue, 10 Sep 2002 00:40:55 -0400
Subject: [Twisted-Python] Re: [XML-SIG] Can anyone recommend a sensible XML parser for Python?
In-Reply-To: <E17oUNW-0006ov-00@malatesta.local>
References: <glyph@twistedmatrix.com>
	<20020908.200653.27439528.glyph@twistedmatrix.com>
	<E17oUNW-0006ov-00@malatesta.local>
Message-ID: <15741.30679.845057.285100@grendel.zope.com>

Uche Ogbuji writes:
 > Wouldn't it be better for Python/XML to offer a *separate*, specialized 
 > function for cloning nodes, rather than doing weird things with cloneNode?

Why?  I'd rather make cloneNode() do the right thing, and it seems
rather clear what that should be.  Certainly more clear than for
DocumentType nodes.  ;-)

 > I see.  It sounds as if a general document duplication function
 > would be of use to you.  I agree that this would be useful.  I'm
 > willing to write one and add it to xml.dom.ext.
 > 
 > But I don't think this is a use case for node.cloneNode.

I think it's a perfectly valid use case for Document.cloneNode().

 > Then again, the poor state of PyXML documentation in general weakens that 
 > point of mine, doesn't it?  Ah well.

There is that.  ;-)  Perhaps before making something stop working (for
some definition of "work"), the documentation should be checked for
contracts and updated if some under-specified behavior should be
consider beyond the contract.  Removing features tends to be frowned
upon in the Python world, especially if the documentation for what
something should do is just plain missing -- it becomes really hard to
say what isn't in the contract, because nobody said what *is* in the
contract.

Glyph:
 > There are still some parties interested in Twisted who are upset
 > that it requires Python 2.1; in fact, I felt guilty doing 2.1
 > support because I am likely going to have to backport portions of
 > it to 1.5.2 for some people.

Hey, at least PyXML makes that part easy, since Python 2.0 support is
still in it's contract!  ;-)  On the other hand, it's painful because
we end up with cruft like xml.dom.minicompat to make things work
reasonably with newer Pythons and still work for older versions.  I'm
waiting for the day we can assume there are new-style objects, and
everything works.

 > I think you take the wrong gloss on my words.  I think Linus
 > Torvalds himself would take years to write a complete and correct
 > XML parser.  It's the nature of the beast (XML), not the
 > programmer.

Hear ye, hear ye!

 > As I said, I am very skeptical of the result.  I'll be impressed
 > when you tell me your home-brew XML parser passes the OASIS
 > conformance suite.

Heck, even Expat doesn't pass that yet!  (We are making progress,
though.)


  -Fred

-- 
Fred L. Drake, Jr.  <fdrake at acm.org>
PythonLabs at Zope Corporation



From uche.ogbuji at fourthought.com  Mon Sep  9 23:08:13 2002
From: uche.ogbuji at fourthought.com (Uche Ogbuji)
Date: Mon, 09 Sep 2002 23:08:13 -0600
Subject: [Twisted-Python] Re: [XML-SIG] Can anyone recommend a sensible XML parser for Python?
In-Reply-To: Message from "Fred L. Drake, Jr." <fdrake@acm.org> 
   of "Tue, 10 Sep 2002 00:40:55 EDT." <15741.30679.845057.285100@grendel.zope.com> 
Message-ID: <E17odGL-0007fB-00@malatesta.local>

> 
> Uche Ogbuji writes:
>  > Wouldn't it be better for Python/XML to offer a *separate*, specialized 
>  > function for cloning nodes, rather than doing weird things with cloneNode?
> 
> Why?  I'd rather make cloneNode() do the right thing, and it seems
> rather clear what that should be.  Certainly more clear than for
> DocumentType nodes.  ;-)

So you think it should do what I mentioned before?

1) Create a new documenType and document node
2) clone all child nodes
3) set the ownerDocument of each of the new nodes to the new document?

If we have it do that, then let us please

1) Document it properly
2) Point out that it is not standard DOM behavior

I am not at all clear that this is the "right thing".  I still think the right 
thing is to throw an exception.  I know the above behavior would throw me as I 
expect the ownerDocument of cloned nodes to be the same as the ones from which 
they were cloned.

But I certainly don't care enough about it to oppose such an addition.  I'd 
just like to make sure we call it out properly.  Least surprise and all that.


-- 
Uche Ogbuji                                    Fourthought, Inc.
http://uche.ogbuji.net    http://4Suite.org    http://fourthought.com
Track chair, XML/Web Services One Boston: http://www.xmlconference.com/
Basic XML and RDF techniques for knowledge management, Part 7 - 
http://www-106.ibm.com/developerworks/xml/library/x-think12.html
Keeping pace with James Clark - http://www-106.ibm.com/developerworks/xml/libra
ry/x-jclark.html
Python and XML development using 4Suite, Part 3: 4RDF - 
http://www-105.ibm.com/developerworks/education.nsf/xml-onlinecourse-bytitle/8A
1EA5A2CF4621C386256BBB006F4CEC





From jml at mumak.net  Fri Sep  6 17:03:32 2002
From: jml at mumak.net (Jonathan Lange)
Date: 07 Sep 2002 09:03:32 +1000
Subject: [Twisted-Python] Web MVC hello world difficulties
In-Reply-To: <1031112760.4365.42.camel@sting>
References: <1031112760.4365.42.camel@sting>
Message-ID: <1031353425.5326.2.camel@sting>

On Wed, 2002-09-04 at 14:12, Jonathan Lange wrote:
> I am trying to use Web MVC to create a simple page that has a form with
> a single text field. When something is entered into the text field,
> 'Hello World!' should be displayed in the greeting section.
> 
> I cannot get it to work, the greeting field remains unchanged, and the
> value in the text field keeps being reset.

I have resolved this.

The above behaviour is entirely consistent with the model object not
being stored between requests. When the relevant fields are kept in a
persistent store (viz. a text file), the problem magically goes away.

regards,
jml




From typo at soniq.net  Tue Sep 10 07:19:15 2002
From: typo at soniq.net (Paul Boehm)
Date: Tue, 10 Sep 2002 15:19:15 +0200
Subject: [Twisted-Python] Anchor
Message-ID: <20020910131914.GA20882@soniq.net>

web/domwidgets.py:246:         self['href'] = href or self.getData() + '/'
the "+ '/'" part makes Anchor unuseable for my application because i don't
want '/' appended to every link. am i misusing Anchor or can you fix this
in cvs ?

  paul




From fdrake at acm.org  Tue Sep 10 12:11:40 2002
From: fdrake at acm.org (Fred L. Drake, Jr.)
Date: Tue, 10 Sep 2002 14:11:40 -0400
Subject: [Twisted-Python] Re: [XML-SIG] Can anyone recommend a sensible XML parser for Python?
In-Reply-To: <E17odGL-0007fB-00@malatesta.local>
References: <fdrake@acm.org>
	<15741.30679.845057.285100@grendel.zope.com>
	<E17odGL-0007fB-00@malatesta.local>
Message-ID: <15742.13788.298950.751589@grendel.zope.com>

Uche Ogbuji writes:
 > So you think it should do what I mentioned before?
 > 
 > 1) Create a new documenType and document node
 > 2) clone all child nodes
 > 3) set the ownerDocument of each of the new nodes to the new document?

If deep==True, yes.  See table below for deep==False.

 > If we have it do that, then let us please
 > 
 > 1) Document it properly
 > 2) Point out that it is not standard DOM behavior

I'm glad to document it carefully; that's entirely reasonable.  It
certainly falls within the space of "implementation dependent", which
the DOM spec says this is.

I think this is the right set of behaviors:

        \   cloneNode(0) | cloneNode(1) | importNode(n,0) | importNode(n,1)
nodeType \               |              |                 |
          +--------------|--------------|-----------------|-----------------
document  | return None  | new document | NotSupportedErr | NotSupportedErr
          +--------------|--------------|-----------------|-----------------
doctype   | new doctype, | new doctype, | new doctype if  | new doctype if
          | no entities  | w/ entities  | new parent has  | new parent has
          | or notations | and notations| doctype==None,  | doctype==None,
          |              |              | else NotSuppErr,| w/ entities
          |              |              | no entities or  | and notations
          |              |              | notations       |

Document.cloneNode(0) returns None since it's not allowed to raise an
exception according to the DOM spec.



  -Fred

-- 
Fred L. Drake, Jr.  <fdrake at acm.org>
PythonLabs at Zope Corporation



From m at moshez.org  Wed Sep 11 14:10:37 2002
From: m at moshez.org (Moshe Zadka)
Date: 11 Sep 2002 20:10:37 -0000
Subject: [Twisted-Python] man pages
Message-ID: <20020911201037.20050.qmail@green.zadka.com>

All utilities in bin/ should be accompanied by man pages.
Violators will be eaten.




From acapnotic at twistedmatrix.com  Wed Sep 11 15:55:13 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 11 Sep 2002 14:55:13 -0700
Subject: [Twisted-Python] version control, QA, branching ...
Message-ID: <1031781315.19657.15.camel@troglodyte.funhouse>

I caught some bits of a discussion on #twisted on my way to bed last
night, and thought "Hey, I should read that."  So I plundered the logs
and did a lot of pruning and here you are, a discussion involving
quality maintance practices with version controlled branches and unit
tests and things.  [attached]

Keep in mind that this log HAS been trimmed by me, and while I have made
an effort to maintain context, it's quite possible that you aren't
seeing the full context for every remark made.

Random notes from me:

        * Michael Schwem was telling me about
          [http://aegis.sourceforge.net/ Aegis], which sounds like it's
          *much* better at branches than CVS is, and pays much stricter
          attention to the entire QA process.
        * In my recent romp through CVS resources, I found
          [http://codestriker.sourceforge.net/ CodeStriker].  I haven't
          talked to anyone who's used this, but it has some ideas in it.




-------------- next part --------------
[05:26] <glyph> radix and I had some discussions about release procedure today, btw :)
[05:26] <glyph> we came to some pretty radical conclusions
[05:27] <itamar> glyph: and they were?
[05:27] <glyph> itamar: release candidates should always be made from HEAD
[05:27] <glyph> itamar: Twisted developers need to learn how to use branches for developing experimental features; HEAD should *always* be releaseable
[05:27] <itamar> branches, here we come
[05:28] <glyph> itamar: the better tests we have, the less craziness with branches is necessary.
[05:36] <fzZzy_> glyph: shall I check in highly untested domtemplate=>microdom code? or wait, and test it some more? 
[05:36] <fzZzy_> I guess this goes back to the cvs branch issue 
[05:37] <dash> fzZzy_: well, isn't testing it easy? =D
[05:38] <fzZzy_> dash: not at 2:30 am 
[05:38] <fzZzy_> and no, I never wrote any domtemplate tests 
[05:39] <dash> fzZzy_: no domtemplate tests?! gasp
[05:39] <dash> fzZzy_: you sound like me
[05:39] <fzZzy_> ok I'm going to bed instead since glyph didn't respond instantaneously ;-) 
[05:39] <fzZzy_> I'll be banging on it tomorrow 
[05:40] *** glyph has changed topic to "Welcome to the Twisted project: sleazeware produced in a drunken fury by college dropouts!"
[05:40] <dash> glyph: !!!
[05:40] <dash> glyph: I GRADUATED
[05:40] <glyph> dash: you didn't write most of twisted :)
[05:40] *** dash waves diploma madly
[06:15] <glyph> jml: much like linux; even very stable kernels with frozen APIs contain "experimental" drivers and such 
[06:15] <jml> glyph: so the trick is to mark them as such?
[06:15] <glyph> itamar: I don't think that's the case; in Twisted's history we've had releases that were pretty stable and didn't require a lot of after-the-fact tweaking
[06:16] <jml> glyph: for many commercial packages, it's not that long after release that you get SP1.. no one really thinks it a bad thing.
[06:16] <jml> just as long as code-breaking changes aren't slipped under the door.
[06:17] <glyph> jml: I am increasingly confident in our test suites lately
[06:17] <glyph> jml: we seem to have had relatively few problems with code-breaking stuff slipping in without anyone noticing :)
[06:17] <jml> glyph: btw, how's the test-first design going? I've found it hard in the past to keep disciplined about it.
[06:18] <glyph> jml: it's hard to keep disciplined about it for me too
:-(.  When I can do it, it's *definitely* better than the other way.

[...a big discussion on one-point-oh philosophy intervenes here.  Only
a few tangentially related bits are included in this log excerpt...]

[06:22] <glyph> itamar: in "policy": we don't have a policy for continuing development of Twisted after 1.0, in terms of legacy support of APIs that may need to change for some reason.  (Yes, some large portion of twisted.internet is stable, but what is our support policy for the *other* portions of twisted that you *need* to use for a useful app?  Are they just unsupported continuing forward?).  We don't have a policy for releases which is sustaina
[06:23] <glyph> this includes things like "when should developers use a branch?" and "how should the release manager interact with users in order to decide whether we mihgt be breaking something important?"
[...]
[06:27] <glyph> itamar: but then, a developer has some feature they want to play around with, which they believe to be potentially unstable, but doesn't break any tests
[06:27] <glyph> what are the guidelines for them to work with that?  
[...]

[06:52] <moshez> glyph: which reminds me.
[06:52] <glyph> moshez: hmm?
[06:52] <moshez> glyph: tell radix to fix ReleaseProcedure
[06:52] <glyph> moshez: we've talked about changes to ReleaseProcedure
[06:52] <moshez> glyph: I left a note there what he should fix
[06:52] <glyph> moshez: OK
[06:53] <moshez> glyph: I'm not talking about changes to the procedure, just bring the document up todate on reality.
[06:53] <glyph> moshez: I don't see the note :)
[06:54] <moshez>    ---- This part is sorely out of date -- document the new Debian way --
[06:54] <itamar> oh
[06:54] <itamar> new policy is to do all major devel on brances?
[06:55] <itamar> better mail the list then
[06:55] <glyph> itamar: that's a proposa, still need to hash it out, and to make sure that it is SUPER EASY for developers to do this
[06:55] <itamar> it sounds painful
[06:55] <moshez> glyph: it isn't.
[06:55] <itamar> but it probably is easy
[06:55] <moshez> glyph: it isn't even mildly easy
[06:55] <moshez> glyph: I'm not sure I like that propsal actually.
[06:56] <glyph> moshez: I figured you wouldn't :)
[06:56] <itamar> here we go again
[06:56] <glyph> but I'm not really sure what you wouldn't like
[06:56] <itamar> it may make more sense to branch on each release
[06:56] <moshez> glyph: merging is hell on earth
[06:57] <glyph> moshez: that gives the developer incentive to integrate early, as well as provide backwards compatibility hooks and good tests so that he doesn't have to hang out in a branch for too long :)
[06:58] <warner> my exp: each branch doubles the total effort. don't branch unless you know you won't do much work on one of the paths
[06:58] <glyph> moshez: when radix and I discussed the policy, we were also debating the need for coverage tools in order to qualify particular changes for branches
[06:58] <moshez> glyph: how do you decide which changes go on a branch and which go on HEAD?
[06:58] <glyph> like if the module you are planning to restructure has 95% unit test coverage, chances are you can get away with not having a branch at all, provided you don't change tests
[06:59] <moshez> glyph: and woulnd't it just make sense to say "never break unittests"?
[06:59] <glyph> moshez: yes, that makes sense
[06:59] <itamar> possibly the effort should go into more tests
[06:59] <itamar> instead of branches
[06:59] <glyph> itamar: that would be optimal
[06:59] <itamar> ugh
[06:59] <itamar> this is too distracting
[06:59] *** itamar has quit IRC ("must work") (~itamar at line102-187.adsl.actcom.co.il)
[07:00] <glyph> i win!
[07:00] <moshez> "Finish Him"
[07:00] *** glyph isn't clear what that would entail, since itamar's already disappeared
[07:01] <glyph> moshez: So yes, "never break unittests" is good, but if you're doing work on, for example, cReactor, there just isn't good enough coverage to be sure that you're OK to check in to a branch which should be always-releaseable (HEAD), even if unittests are A-OK
[07:02] <moshez> glyphy: and when would the merge from the branch to HEAD happen?
[07:02] <glyph> moshez: after our army of simean warriors bashes on the code for several weeks
[07:03] <moshez> glyph: in other words "after several weeks pass"
[07:03] <glyph> moshez: i need to read up on the exact mechanics of branches in order to understand your concerns, I think
[07:03] <moshez> glyph: ok. do so.
[07:03] <glyph> is it not possible for a developer to continuously re-integrate patches to HEAD into their branch?
[07:03] <moshez> glyph: wait.
[07:05] <moshez> glyph: http://www.lerner.co.il/~moshez/cvs/cvstut34.html
[07:05] <warner> glyph: in my experience, yes
[07:05] <warner> glyph: however the question of "should I or not" takes up as much time as doing the commit separately to both branches
[07:06] <glyph> warner: hmm
[07:06] <glyph> warner: what was your experience working with branches?
[07:07] <moshez> http://cvsbook.red-bean.com/cvsbook.html#Going_Out_On_A_Limb__How_To_Work_With_Branches_And_Survive_
[07:08] <glyph> moshez: ugghh
[07:08] <glyph> moshez: the 'spurious conflicts' bit is ... interesting
[07:09] <warner> well, the workfolk kept alternating between the "current on HEAD" and "current on branch" schemes
[07:09] <warner> the biggest problem was that people expected the merge features to mean they could do less work
[07:09] <warner> but the real issue was who decided which bugs/features should get done in which releases
[07:10] <moshez> glyph: I am evil
[07:11] <glyph> warner: hmm
[07:11] <warner> basically foisting developer work off to the config mgmt people, who didn't know the code well enough to say yes or no
[07:11] <glyph> okay, I worked with branches in perforce
[07:11] <glyph> they made *waaaay* more sense than this
[07:11] <glyph> I think cvs's semantics are broken
[07:12] <warner> yup, P4's scheme is easier to work with
[07:12] <glyph> at the very least, they're not what I want ;)
[07:12] <warner> the workfolk took the other path out: ClearCase
[07:12] <warner> That was two years ago and they're still trying to figure out how it works.
[07:12] <moshez> glyph: well, if we moved to SVN, we'd have easier branching
[07:13] <warner> But at least it's expensive. They get good use out of their big NetApp boxes too.
[07:13] <jml> I suppose subversion is out of the question?
[07:13] <warner> I tend to see CVS's painful branching as similar to the 8-char tabstops in the linux kernel..
[07:14] <warner> .. a bug that makes you aware of just how bad it is to overuse that thing..
[07:14] <warner> .. if you were to fix it (or find a tool that did it better), you'd be tempted to use it more, and that would be bad.
[07:16] <glyph> jml: Well, I originally really didn't want to consider it, because I thought that there would be funding for a Twisted-based version control system in the near future
[07:17] <jml> understandable. I disagree though.
[07:18] <glyph> jml: Well, the funding didn't appear as expected (though it still will at some point, most likely about a year from now), and this is the first time I've really wanted a feature which svn potentially implements better
[07:18] <glyph> svn's infrastructure strategy frankly scares me though
[07:19] <warner> twisted.revisions? my brain hurts
[07:20] <jml> glyph: yeah, fair enough. I'm quite happy to have at least one or two network apps that aren't twisted, but that's me.
[07:20] <warner> or maybe that's just the lack of sleep
[07:20] <glyph> warner: your brain hurts?  *your* brain hurts?
[07:20] <glyph> warner: YOU HAVE NOT YET COME TO KNOW PAIN, MORTAL
[07:20] *** warner laughs
[07:23] <phed__> twisted.revision features: every client is also a server. you create a branch every time you edit a file. versioning is measured in minutes. realtime versioning. integrated QA
[07:25] <warner> "integrated QA": my current learn-as-I-go Twisted project is a tinderbox-like distributed build network, including various forms of 'make test' stages
[07:25] <glyph> warner: awesome!
[07:25] <glyph> warner: is this going to be publicly available?
[07:26] <warner> I'm basing it off CVS commit messages, but direct-from-VC would be better
[07:26] <warner> glyph: yup. I did a similar thing for work (before I found twisted), now I'm rewriting it without the shackles of employment
[07:27] <glyph> warner: are you using CVSToys?
[07:27] <warner> glyph: nope. whazzat?
[07:27] <glyph> warner: ooooohhhh
[07:27] <glyph> http://twistedmatrix.com/users/acapnotic/cvs.png
[07:27] <moshez> http://www.freebsd.org/doc/en_US.ISO8859-1/books/faq/misc.html#BIKESHED-PAINTING
[07:27] <glyph> warner: talk to acapnotic :)
[07:29] <warner> glyph: will do. if I guess correctly about what it does, it would get rid of yet another piece of code I need to write. Just like twisted did for the entire serialization and transport layer.
[07:30] <warner> (if I wait long enough, the rest of the necessary code will disappear too. love it.)
[07:31] <glyph> warner: cool :)
[07:31] <glyph> warner: hey wait
[07:31] <glyph> warner: you know, we could really use something like that
[07:31] <glyph> warner: I keep meaning to write an automated unit-test runner with e-mail notification
[07:33] <glyph> I'm going to go to sleep for about 16 hours right now
[07:33] <glyph> talk to you crazy cats later
[07:33] <warner> glyph: that'd be part of it. Of course with twisted you'd get an IRC bot too. The motivation back at work was to punish folks who broke the build. The status output was a web page they'd refresh every once in a while until they saw their changes were built successfully. But I'm planning on Gtk clients too.
[07:34] <warner> catch you later glyph. I'll let you know what I code up.


From twisted at itamarst.org  Thu Sep 12 03:41:28 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 12 Sep 2002 05:41:28 -0400
Subject: [Twisted-Python] Job posting on dice
Message-ID: <3D806148.2080705@itamarst.org>

3 month contract in Portland, $65K.

http://www.dice.com/DandL/s/sofor001.E-010.html




From twisted at itamarst.org  Thu Sep 12 04:59:34 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 12 Sep 2002 06:59:34 -0400
Subject: [Twisted-Python] Twisted: the comics
Message-ID: <3D807396.5000602@itamarst.org>

isometric, one of the coolest web comics in existence, had write-ins for 
plots. So I submitted one.

The result:
http://isometric.spaceninja.com/_/twisted_plutonium/




From zooko at zooko.com  Thu Sep 12 06:06:24 2002
From: zooko at zooko.com (Zooko)
Date: Thu, 12 Sep 2002 08:06:24 -0400
Subject: [Twisted-Python] version control, QA, branching ... 
In-Reply-To: Message from Kevin Turner <acapnotic@twistedmatrix.com> 
   of "11 Sep 2002 14:55:13 PDT." <1031781315.19657.15.camel@troglodyte.funhouse> 
References: <1031781315.19657.15.camel@troglodyte.funhouse> 
Message-ID: <E17pSjo-0001HS-00@localhost>

There are four new version control systems that sound interesting to me:

 * BitKeeper
http://www.bitkeeper.com/

The most mature of the four (?).  Not fully free software, although I think it 
is freely usable for open source projects.

 * Subversion
http://subversion.tigris.org/

Also relatively mature.

 * Arch
http://www.regexps.com/arch.html

There is a nice comparison between arch and subversion somewhere on that site.

 * OpenCM
http://www.opencm.org/

The least mature of the four, but the one with the most impressive 
intellectual provenance.


I don't really know what the tradeoffs are among these four.  Personally, I'm 
continuing to use CVS for everything for now.

Regards,

Zooko
http://mnet.sf.net/




From lac at strakt.com  Thu Sep 12 06:44:04 2002
From: lac at strakt.com (Laura Creighton)
Date: Thu, 12 Sep 2002 14:44:04 +0200
Subject: [Twisted-Python] version control, QA, branching ... 
In-Reply-To: Message from Zooko <zooko@zooko.com> 
   of "Thu, 12 Sep 2002 08:06:24 EDT." <E17pSjo-0001HS-00@localhost> 
References: <1031781315.19657.15.camel@troglodyte.funhouse>  <E17pSjo-0001HS-00@localhost> 
Message-ID: <200209121244.g8CCi4o9028058@ratthing-b246.strakt.com>

> 
> There are four new version control systems that sound interesting to me:
> 
>  * BitKeeper
> http://www.bitkeeper.com/
> 
> The most mature of the four (?).  Not fully free software, although I think i
> t 
> is freely usable for open source projects.
> 
>  * Subversion
> http://subversion.tigris.org/
> 
> Also relatively mature.
> 
>  * Arch
> http://www.regexps.com/arch.html
> 
> There is a nice comparison between arch and subversion somewhere on that site
> .
> 
>  * OpenCM
> http://www.opencm.org/
> 
> The least mature of the four, but the one with the most impressive 
> intellectual provenance.
> 
> 
> I don't really know what the tradeoffs are among these four.  Personally, I'm
>  
> continuing to use CVS for everything for now.
> 
> Regards,
> 
> Zooko
> http://mnet.sf.net/

Anders Qvist, quest at lysator.liu.se (the Project Lead for the Python-In-a-Tie
Snake Farm was looking at Arch, and still is.)  I think he actually started 
chaning all the perl scripts to use python, but I don't know how far along 
that project got. People whose opinions on elegance, beauty, and
usuability I trust have embarked on a campaign to convince me that
Arch is the way to go and we should store all our code that way.  Right
now I am too busy to listen, so I personally have no experience or
opinions, beyond 'sure sounds nice'.

Laura Creighton



From abo at minkirri.apana.org.au  Thu Sep 12 07:31:32 2002
From: abo at minkirri.apana.org.au (Donovan Baarda)
Date: Thu, 12 Sep 2002 23:31:32 +1000
Subject: [Twisted-Python] version control, QA, branching ...
In-Reply-To: <E17pSjo-0001HS-00@localhost>
References: <1031781315.19657.15.camel@troglodyte.funhouse> <E17pSjo-0001HS-00@localhost>
Message-ID: <20020912133131.GC5298@minkirri.apana.org.au>

On Thu, Sep 12, 2002 at 08:06:24AM -0400, Zooko wrote:
> 
> There are four new version control systems that sound interesting to me:
[...]

The one I find myself using the most is PRCS. It has heaps of limitations
(no network support, RCS backend so poor binary deltas) _but_, it does
merges painlessly. I'm not sure exactly of all the voodoo it does for this,
but I find that it gets merges right nearly every time, and prompts and
allows me to overide it on the few occasions when it gets them wrong. It
handles renamed/deleted/added files painlessly, and seems to remember
previous merge preferences as defaults for subsequent merges.

http://prcs.xdelta.org/

Because it doesn't support a network repository, I use it to run my own
personal repository, and check in "cvs" branch(es) from cvs upstream. I then
run as many personal branches as I wish, merging and branching at will with
PRCS. When I'm happy or feel inclined, I checkin the results to cvs
upstream. I basicly use PRCS as a merge tool for CVS.

The guy who wrote PRCS has grand plans for a PRCS2 using xdelta as its
backend with network repository support, but I dunno when/if it will ever
happen. Going by PRCS, and xdelta2 so far, it will be good if it ever gets
finished.

I think something like Aegis would probably suit Twisted to a 'T'... it's
not so much a revision control tool as a software development/test/release
management tool. I dunno what it's like now, but last time I looked you
could actually configure it to use any revision-control backend you liked.

-- 
----------------------------------------------------------------------
ABO: finger abo at minkirri.apana.org.au for more info, including pgp key
----------------------------------------------------------------------



From twisted at itamarst.org  Thu Sep 12 07:48:02 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 12 Sep 2002 09:48:02 -0400
Subject: [Twisted-Python] version control, QA, branching ...
References: <1031781315.19657.15.camel@troglodyte.funhouse>  <E17pSjo-0001HS-00@localhost> <200209121244.g8CCi4o9028058@ratthing-b246.strakt.com>
Message-ID: <3D809B12.9090108@itamarst.org>

Laura Creighton wrote:

> Anders Qvist, quest at lysator.liu.se (the Project Lead for the Python-In-a-Tie
> Snake Farm was looking at Arch, and still is.)  I think he actually started 
> chaning all the perl scripts to use python, but I don't know how far along 
> that project got.

He should use Twisted ;)

Seriously, the built-in ssh and FTP server and client support is exactly 
what you need, and someday we'll have WebDAV too. And it lets you make the 
code cross-platform, and without dependency on Unix user-accounts.

Plus you can integrate IRC bot and emailing of commit notifications straight 
into the server. And web based browsing ala viewcvs. And so on and so forth.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
Available for Python, Twisted, Zope and Java consulting




From twisted at itamarst.org  Thu Sep 12 09:43:28 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 12 Sep 2002 11:43:28 -0400
Subject: [Twisted-Python] Another proposal for new look for website
Message-ID: <3D80B620.6030509@itamarst.org>

http://itamarst.org/twisted_homepage.png

Courtesy of MAXIMA Multimedia (http://www.maximam.com).

-- 
Itamar Shtull-Trauring    http://itamarst.org/
Available for Python, Twisted, Zope and Java consulting




From bruce at cubik.org  Thu Sep 12 09:54:03 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Thu, 12 Sep 2002 09:54:03 -0600
Subject: [Twisted-Python] domtemplate examples
Message-ID: <3D80B89B.4080701@cubik.org>

Hey all,

Does anyone have more involved examples (even ones they can only share 
privately for now) of using DOMTemplate than the one in doc/howto?

Examples of form integration and DB integration like outputting lists of 
things from a result set of a query would all be welcome.

  - Bruce




From lac at strakt.com  Thu Sep 12 10:00:12 2002
From: lac at strakt.com (Laura Creighton)
Date: Thu, 12 Sep 2002 18:00:12 +0200
Subject: [Twisted-Python] Another proposal for new look for website 
In-Reply-To: Message from Itamar Shtull-Trauring <twisted@itamarst.org> 
   of "Thu, 12 Sep 2002 11:43:28 EDT." <3D80B620.6030509@itamarst.org> 
References: <3D80B620.6030509@itamarst.org> 
Message-ID: <200209121600.g8CG0Co9028599@ratthing-b246.strakt.com>

> http://itamarst.org/twisted_homepage.png
> 
> Courtesy of MAXIMA Multimedia (http://www.maximam.com).
> 
> -- 
> Itamar Shtull-Trauring    http://itamarst.org/
> Available for Python, Twisted, Zope and Java consulting
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

Itamar Shtull-Trauring, you are a very silly man.  Thank you.

Laura Creighton



From twisted at itamarst.org  Thu Sep 12 10:14:52 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 12 Sep 2002 12:14:52 -0400
Subject: [Twisted-Python] Another proposal for new look for website
References: <3D80B620.6030509@itamarst.org> <200209121600.g8CG0Co9028599@ratthing-b246.strakt.com>
Message-ID: <3D80BD7C.4000603@itamarst.org>

> Itamar Shtull-Trauring, you are a very silly man.  Thank you.

If you mean the text - it wasn't me, I'm not usually that creative. It was 
taken from http://www.twistedmatrix.com/labs.

I assume Glyph wrote it, given the content.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
Available for Python, Twisted, Zope and Java consulting




From andrew-twisted at puzzling.org  Thu Sep 12 20:25:35 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 13 Sep 2002 12:25:35 +1000
Subject: [Twisted-Python] Mailing list archives -- ideal for Twisted?
Message-ID: <20020913022535.GE15521@ritsuko.xware.cx>

Random IRC snippet:

<jdub> what would be really cool
<jdub> is to get rid of mhonarc and static http archives
<jdub> and have, perhaps, an nntp-based archive system
<jdub> with a web front end
<spiv> Hmm.
<spiv> That would suit Twisted nicely.
<jdub> there are a few of these around
<spiv> Hmmm....
<jdub> but it would be cool for twisted

Basically, a unified web/nntp mail archive, that uses a common backend,
but has a twisted.web and twisted.news front-ends could make for a
really cool Twisted app.

Any thoughts?  ("Yes!  I will write this!" particularly welcome ;)

-Andrew.




From naesten at myrealbox.com  Thu Sep 12 22:50:04 2002
From: naesten at myrealbox.com (Samuel Bronson)
Date: Fri, 13 Sep 2002 00:50:04 -0400
Subject: [Twisted-Python] Patch for tapconvert manpage
Message-ID: <3D816E7C.8080607@myrealbox.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: RIPEMD160

RCS file: /cvs/Twisted/doc/man/tapconvert.1,v
retrieving revision 1.1
diff -u -2 -r1.1 tapconvert.1
- --- doc/man/tapconvert.1    11 Sep 2002 20:07:00 -0000    1.1
+++ doc/man/tapconvert.1    13 Sep 2002 04:44:30 -0000
@@ -3,5 +3,5 @@
~ tapconvert \- convert Twisted configurations from one format to another
~ .SH SYNOPSIS
- -.B tapconvert -i \fIinput\fR -o \fIoutput\rR  [-f \fIinput-type\fR] 
[-t \fIoutput-type\fR] [-d] [-e]
+.B tapconvert -i \fIinput\fR -o \fIoutput\fR  [-f \fIinput-type\fR] [-t 
\fIoutput-type\fR] [-d] [-e]
~ .B tapconvert --help \fIapptype\fR
~ .SH DESCRIPTION
@@ -26,4 +26,8 @@
~ \fB\--encrypt\fR, \fB\-e\fR
~ Encrypt output.
+.SH EXAMPLE
+Convert web.tap into a web.tas, so we can understand it:
+
+    tapconvert -i web.tap
~ .SH AUTHOR
~ Written by Moshe Zadka, based on tapconvert's help messages
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.4 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iQEXAwUBPYFue1veIDzBO6cgFAPvoQP/dt1QDyiLk3tdqQ9FJo/nPsyno4lXjuWI
VzmVu2BWM/gho+elUdnFmfQ4rGO1Evjf8AQammpD26TyxjeEeLRG4Bp1l4PqKRpk
hGD13vZK8eLj0qLj8xOgxGBNuxWv5+6Y6iXo505mrJX7tQNNS7bpY9zNnp6qq8uZ
z+Ozmcjz9scD/1AcOtsZ+8vnxX+hAAZx/mW3sSO+dX8RXHm3vbS4qILKT2JQOAaE
eF176LQe3DwMSKFCH0W5xW+XeojcnJEsd5roC8DWTNi7EbIhNdPHnnltnGiJymI9
jyNSuwI6VTX2fHKq5JifNw6OPQEyo93vTD7IhPzXQTJuPdgZKYd9V66B
=0FGR
-----END PGP SIGNATURE-----





From andrew-twisted at puzzling.org  Fri Sep 13 00:11:26 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 13 Sep 2002 16:11:26 +1000
Subject: [Twisted-Python] Minor buglet in spread.sturdy?
Message-ID: <20020913061126.GF15521@ritsuko.xware.cx>

If you do:

  foo = sturdy.PerspectiveConnector(...)
  foo.startConnecting()
  foo.callRemote('echo', ...)
  ...

You'll actually connect to the remote server *twice*.

Which of these is the real bug:
  - callRemote sets self.connecting = True instead of startConnecting
  - startConnecting isn't for external use, and should be renamed
    "_startConnecting"?

-Andrew.




From twisted at moshez.org  Fri Sep 13 00:11:18 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 13 Sep 2002 06:11:18 -0000
Subject: [Twisted-Python] version control, QA, branching ...
In-Reply-To: <E17pSjo-0001HS-00@localhost>
References: <E17pSjo-0001HS-00@localhost>, <1031781315.19657.15.camel@troglodyte.funhouse>
Message-ID: <20020913061118.9479.qmail@green.zadka.com>

On Thu, 12 Sep 2002, Zooko <zooko at zooko.com> wrote:

> There are four new version control systems that sound interesting to me:
> 
>  * BitKeeper
> http://www.bitkeeper.com/

Not free software. This means the Twisted team would bet its fate on the fate
of a single company.

>  * Subversion
> http://subversion.tigris.org/
> 
> Also relatively mature.

It's alpha.

>  * Arch
> http://www.regexps.com/arch.html

It's a mess of shell scripts and ftp crap.



From twisted at moshez.org  Fri Sep 13 00:11:18 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 13 Sep 2002 06:11:18 -0000
Subject: [Twisted-Python] version control, QA, branching ...
In-Reply-To: <E17pSjo-0001HS-00@localhost>
References: <E17pSjo-0001HS-00@localhost>, <1031781315.19657.15.camel@troglodyte.funhouse>
Message-ID: <20020913061118.9479.qmail@green.zadka.com>

On Thu, 12 Sep 2002, Zooko <zooko at zooko.com> wrote:

> There are four new version control systems that sound interesting to me:
> 
>  * BitKeeper
> http://www.bitkeeper.com/

Not free software. This means the Twisted team would bet its fate on the fate
of a single company.

>  * Subversion
> http://subversion.tigris.org/
> 
> Also relatively mature.

It's alpha.

>  * Arch
> http://www.regexps.com/arch.html

It's a mess of shell scripts and ftp crap.



From twisted at itamarst.org  Fri Sep 13 03:10:29 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 13 Sep 2002 05:10:29 -0400
Subject: [Twisted-Python] Another proposal for new look for website
References: <3D80B620.6030509@itamarst.org>
Message-ID: <3D81AB85.6080207@itamarst.org>

Itamar Shtull-Trauring wrote:

> http://itamarst.org/twisted_homepage.png

Since everyone keeps asking - yes, I know it looks like there will be 
Javascri[t dropdown menus, and no, we *won't* be using JS, the look just 
needs to be changed slightly.




From grolgh at online.no  Fri Sep 13 04:08:41 2002
From: grolgh at online.no (Benjamin Bruheim)
Date: Fri, 13 Sep 2002 12:08:41 +0200
Subject: [Twisted-Python] serial datatype in t.e.row
References: <HOEEKPCOKELHCNIJNMAGCEKHCGAA.sean@twistedmatrix.com>
Message-ID: <3D81B929.8080702@online.no>

> One solution may be to manually run a
> 
> 	SELECT nextval('sequencename')
> 
> to get the next value and use that for the insert, but this requires an
> extra step for each insert, and requires that the we know which tables have
> serial columns (suprisingly hard to figure out..) and makes the behavior for
> tables with serial columns and no serial columns very different.

Wouldn't it be sufficient to add a "reload hint", or something? its only 
INSERT that will be affected. A reloadoninsert-hint would be 
database-implementationindependent as well. The difference between 
getting the whole table or just the ID is neglible in most cases; or 
maybe even a question on wheter serials on anything but the dbKeyColumns 
should be allowed to contain serials.
At least on postgresql there can be stuff happening on the server that 
client would never be able to know about. Letting it reload could also 
be passed as an option to every databaseinteractionmethod.
The reloading itself could be done through the deferred, just as glyph 
mentioned.

2cents.

\\ benjamin




From warner at lothar.com  Thu Sep 12 23:15:40 2002
From: warner at lothar.com (Brian Warner)
Date: Thu, 12 Sep 2002 22:15:40 -0700
Subject: [Twisted-Python] docs typo [PATCH]
Message-ID: <E17pins-0006OV-00@localhost>

Small typo in the PB howto, but it just so happened to be in the one place
where it could do the most damage. Here's a patch.

cheers,
 -Brian

Index: pb.html
===================================================================
RCS file: /cvs/Twisted/doc/howto/pb.html,v
retrieving revision 1.1
diff -u -r1.1 pb.html
--- pb.html	6 Aug 2002 03:31:04 -0000	1.1
+++ pb.html	13 Sep 2002 05:14:04 -0000
@@ -169,12 +169,13 @@
   
   <p>This is the first class we dealt with.  Perspectives are slightly special
   because they are the root object that a given user can access from a service.
-  A user should only receive a reference to their Perspective PB works hard to
-  verify, as best it can, that any method that can be called on a perspective
-  directly is being called on behalf of the user who is represented by that
-  perspective.  (Services with unusual requirements for <q>on behalf of</q>,
-  such as simulations with the ability to posess another player's avatar, are
-  accomplished by providing indirected access to another user's Perspective.)
+  A user should only receive a reference to their <em>own</em>
+  Perspective.  PB works hard to verify, as best it can, that any method that
+  can be called on a perspective directly is being called on behalf of the
+  user who is represented by that perspective.  (Services with unusual
+  requirements for <q>on behalf of</q>, such as simulations with the ability
+  to posess another player's avatar, are accomplished by providing indirected
+  access to another user's Perspective.)
   </p>
 
   <p>Perspectives are not usually serialized as remote references, so do not



From lac at strakt.com  Fri Sep 13 06:51:05 2002
From: lac at strakt.com (Laura Creighton)
Date: Fri, 13 Sep 2002 14:51:05 +0200
Subject: [Twisted-Python] version control, QA, branching ... 
In-Reply-To: Message from Itamar Shtull-Trauring <twisted@itamarst.org> 
   of "Thu, 12 Sep 2002 09:48:02 EDT." <3D809B12.9090108@itamarst.org> 
References: <1031781315.19657.15.camel@troglodyte.funhouse> <E17pSjo-0001HS-00@localhost> <200209121244.g8CCi4o9028058@ratthing-b246.strakt.com>  <3D809B12.9090108@itamarst.org> 
Message-ID: <200209131251.g8DCp5o9032399@ratthing-b246.strakt.com>

> Laura Creighton wrote:
> 
> > Anders Qvist, quest at lysator.liu.se (the Project Lead for the Python-In-a-Tie
> > Snake Farm was looking at Arch, and still is.)  I think he actually started 
> > chaning all the perl scripts to use python, but I don't know how far along 
> > that project got.
> 
> He should use Twisted ;)
> 
> Seriously, the built-in ssh and FTP server and client support is exactly 
> what you need, and someday we'll have WebDAV too. And it lets you make the 
> code cross-platform, and without dependency on Unix user-accounts.
> 
> Plus you can integrate IRC bot and emailing of commit notifications straight 
> into the server. And web based browsing ala viewcvs. And so on and so forth.
> 
> -- 
> Itamar Shtull-Trauring    http://itamarst.org/
> Available for Python, Twisted, Zope and Java consulting
-----------

Heh heh -- one of the reasons Anders' attempt to convince me that Arch
is what we all should be using in the way of version control once we
converted it to Python got derailed is that Jacob and I started using
up most of the bandwidth of the conversation pushing Twisted the other
direction...

Laura



From lac at strakt.com  Fri Sep 13 06:56:08 2002
From: lac at strakt.com (Laura Creighton)
Date: Fri, 13 Sep 2002 14:56:08 +0200
Subject: [Twisted-Python] Another proposal for new look for website 
In-Reply-To: Message from Itamar Shtull-Trauring <twisted@itamarst.org> 
   of "Thu, 12 Sep 2002 12:14:52 EDT." <3D80BD7C.4000603@itamarst.org> 
References: <3D80B620.6030509@itamarst.org> <200209121600.g8CG0Co9028599@ratthing-b246.strakt.com>  <3D80BD7C.4000603@itamarst.org> 
Message-ID: <200209131256.g8DCu8o9032448@ratthing-b246.strakt.com>

> > Itamar Shtull-Trauring, you are a very silly man.  Thank you.
> 
> If you mean the text - it wasn't me, I'm not usually that creative. It was 
> taken from http://www.twistedmatrix.com/labs.
> 
> I assume Glyph wrote it, given the content.
> 
> -- 
> Itamar Shtull-Trauring    http://itamarst.org/
> Available for Python, Twisted, Zope and Java consulting

Ok then, thank you whoever you are.

Laura



From twisted at itamarst.org  Fri Sep 13 07:11:40 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 13 Sep 2002 09:11:40 -0400
Subject: [Twisted-Python] Documentation and bug patches
Message-ID: <3D81E40C.4090100@itamarst.org>

Please submit all patches and bug reports to our bug tracker at 
http://sourceforge.net/tracker/?group_id=49387&atid=456015 so that they 
don't get lost.




From waterbug at beeblebrox.gsfc.nasa.gov  Fri Sep 13 08:13:28 2002
From: waterbug at beeblebrox.gsfc.nasa.gov (Steve Waterbury)
Date: Fri, 13 Sep 2002 10:13:28 -0400
Subject: [Twisted-Python] docs typo [PATCH]
References: <E17pins-0006OV-00@localhost>
Message-ID: <3D81F288.B9457611@beeblebrox.gsfc.nasa.gov>

Brian Warner wrote:
> 
> Small typo in the PB howto, but it just so happened to be in the one place
> where it could do the most damage. Here's a patch.

Since Perspectives are defined in cred, and so are more general than 
Perspective Broker -- i.e., could be used by any service via any protocol --  
shouldn't documentation of perspectives be (at least in theory) part of 
a more general doc on authentication, rather than specifically the PB howto?  

(But don't get me wrong -- I appreciate *any* documentation and patches 
thereof, including this one!  Not meaning to sound ungrateful ... ;^)

Cheers,
-- Steve.



From glyph at twistedmatrix.com  Fri Sep 13 08:52:19 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 13 Sep 2002 09:52:19 -0500 (CDT)
Subject: [Twisted-Python] docs typo [PATCH]
In-Reply-To: <3D81F288.B9457611@beeblebrox.gsfc.nasa.gov>
References: <E17pins-0006OV-00@localhost>
	<3D81F288.B9457611@beeblebrox.gsfc.nasa.gov>
Message-ID: <20020913.095219.23011554.glyph@twistedmatrix.com>


On Fri, 13 Sep 2002 10:13:28 -0400, Steve Waterbury <waterbug at beeblebrox.gsfc.nasa.gov> wrote:

> Since Perspectives are defined in cred, and so are more general than
> Perspective Broker -- i.e., could be used by any service via any protocol --
> shouldn't documentation of perspectives be (at least in theory) part of a
> more general doc on authentication, rather than specifically the PB howto?

Yes.  There is nascent doc on this: doc/howto/cred.html.

I'll add to it when schedule permits..

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020913/50712434/attachment.sig>

From bruce at cubik.org  Fri Sep 13 12:25:34 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Fri, 13 Sep 2002 12:25:34 -0600
Subject: [Twisted-Python] domtemplate examples
References: <3D80B89B.4080701@cubik.org>
Message-ID: <3D822D9E.9040801@cubik.org>

I got around to solving this today for doing DB integration with webMVC:

Bruce Mitchener wrote:
> Does anyone have more involved examples (even ones they can only share 
> privately for now) of using DOMTemplate than the one in doc/howto?
> 
> Examples of form integration and DB integration like outputting lists of 
> things from a result set of a query would all be welcome.

The patch below makes the standard domwidgets.List friendly for 
Deferreds.  Similar things need to be done to the other widgets as well 
if that's the path that should be taken.

This code sucks for various reasons, but actually works:

class MIdentityList(wmvc.WModel):
     def __init__(self):
         self.dbpool = adbapi.ConnectionPool('pyPgSQL.PgSQL',
                                             'localhost',
                                             'bruce', 'XXXXXXXXX',
                                             database='XXXXXXXXX')
         self.dbauth = authorizer.Authorizer(self.dbpool)
         self.identityList = self.getIdentities()

     def setIdentities(self, result):
         self.identityList = result
     def getIdentities(self):
         return self.dbauth.getIdentities().addCallback(self.setIdentities)

class IdentityListWidget(domwidgets.Widget):
     def generateDOM(self, request, node):
         """
         Generate DOM to represent a list of identities.
         """
         if isinstance(self.model.identityList, defer.Deferred):
             return self.identityList
         self.add(domwidgets.List())
         return domwidgets.Widget.generateDOM(self, request, node)

class VIdentityList(wmvc.WView):
     templateFile = "identity_list.xhtml"
     def factory_identityList(self, request, node):
         return IdentityListWidget(self.model)

class CIdentityList(wmvc.WController):
     pass

wmvc.registerViewForModel(VIdentityList, MIdentityList)

Am I doing anything that is horribly wrong (apart from obvious things, 
like not grabbing a service and starting up the authorizer inside of the 
model), and that isn't likely to work beyond a simple test case like this?

I do like how the Deferreds integrate in with the DOMTemplate and webMVC 
stuff.  Pretty nice work, once I figured it out. :)

  - Bruce

Index: domwidgets.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/domwidgets.py,v
retrieving revision 1.19
diff -u -r1.19 domwidgets.py
--- domwidgets.py       19 Aug 2002 03:22:01 -0000      1.19
+++ domwidgets.py       13 Sep 2002 18:13:59 -0000
@@ -3,6 +3,7 @@
  import urllib
  from xml.dom.minidom import parseString

+from twisted.internet import defer
  from twisted.python.mvc import View, Model
  from twisted.python import domhelpers, log

@@ -262,11 +263,14 @@
      """
      tagName = None
      def generateDOM(self, request, node):
+        data = self.getData()
+        if isinstance(data, defer.Deferred):
+            return data.addCallback(self._cbGenerateDOM, request, node)
          node = Widget.generateDOM(self, request, node)
          # xxx with this implementation all elements of the list must 
use the same view widget
          listItem = domhelpers.get(node, 'listItem')
          domhelpers.clearNode(node)
-        for itemNum in range(len(self.getData())):
+        for itemNum in range(len(data)):
              # theory: by appending copies of the li node
              # each node will be handled once we exit from
              # here because handleNode will then recurse into
@@ -277,6 +281,10 @@
              domhelpers.superPrependAttribute(newNode, 'model', 
self.submodel + '[' + str(itemNum) + ']')
              node.appendChild(newNode)
          return node
+
+    def _cbGenerateDOM(self, result, request, node):
+        return self.generateDOM(request, node)
+

  class ColumnList(List):
      def __init__(self, model, columns=1, start=0, end=0):




From jjn at kriln.com  Fri Sep 13 09:02:51 2002
From: jjn at kriln.com (Jeremy Noetzelman)
Date: Fri, 13 Sep 2002 15:02:51 +0000 (GMT)
Subject: [Twisted-Python] timer granularity
Message-ID: <20020913150202.A91401-100000@nosferatu.kriln.com>

What is the timer granularity in twisted?  Is it possible to have
subsecond event timers in Delayed or am I limited to integer seconds?

J




From abo at minkirri.apana.org.au  Fri Sep 13 18:10:30 2002
From: abo at minkirri.apana.org.au (Donovan Baarda)
Date: Sat, 14 Sep 2002 10:10:30 +1000
Subject: [Twisted-Python] version control, QA, branching ...
In-Reply-To: <20020913061118.9479.qmail@green.zadka.com>
References: <1031781315.19657.15.camel@troglodyte.funhouse> <20020913061118.9479.qmail@green.zadka.com>
Message-ID: <20020914001030.GA23914@minkirri.apana.org.au>

On Fri, Sep 13, 2002 at 06:11:18AM -0000, Moshe Zadka wrote:
> On Thu, 12 Sep 2002, Zooko <zooko at zooko.com> wrote:
> 
> > There are four new version control systems that sound interesting to me:
> > 
> >  * BitKeeper
> > http://www.bitkeeper.com/
> 
> Not free software. This means the Twisted team would bet its fate on the fate
> of a single company.
> 
> >  * Subversion
> > http://subversion.tigris.org/
> > 
> > Also relatively mature.
> 
> It's alpha.
> 
> >  * Arch
> > http://www.regexps.com/arch.html
> 
> It's a mess of shell scripts and ftp crap.

That was my concern when I first looked at it. A few people spent a fair bit
of time trying to convince me "it's not that bad". The mess of scripts still
makes me uneasy, but the design is probably sound. I suspect a conversion to
Python would give Arch some deserved credibility.

The "ftp crap" is a bit harsh... they happen to have chosen ftp as the
network transport protocol, which IMHO is a better idea than inventing a new
one. FTP as a protocol sucks, but it it widely supported.

Subversion have chosen http (DAV?) and specificaly Apache as the network
transport protocol. Http is probably better than ftp, but the DAV part is
still a little grey.

xdelta2 has an interesting contributed hack that uses NFS as the network
transport protocol, using some "secure public NFS" framework.


-- 
----------------------------------------------------------------------
ABO: finger abo at minkirri.apana.org.au for more info, including pgp key
----------------------------------------------------------------------



From andrew-twisted at puzzling.org  Fri Sep 13 19:57:42 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 14 Sep 2002 11:57:42 +1000
Subject: [Twisted-Python] timer granularity
In-Reply-To: <20020913150202.A91401-100000@nosferatu.kriln.com>
References: <20020913150202.A91401-100000@nosferatu.kriln.com>
Message-ID: <20020914015742.GD516@frobozz.local>

On Fri, Sep 13, 2002 at 03:02:51PM +0000, Jeremy Noetzelman wrote:
> What is the timer granularity in twisted?  Is it possible to have
> subsecond event timers in Delayed or am I limited to integer seconds?

Firstly, Delayed is deprecated.  See
    http://twistedmatrix.com/documents/howto/time
for documentation on the correct way to schedule tasks in current Twisted.

Secondly, yes Twisted supports sub-second event timers.  The timing is done
using the OS's select(2) call (or poll(2), or kqueue, etc, depending on
which reactor you're using).  select(2)'s man page *claims* it supports
microsecond resolution, but my suspicion is that you probably can't rely on
more than about millisecond resolution.

As far as using sub-second precision, simply pass a float rather than an
integer to reactor.callLater, and it will "just work".

-Andrew.




From washort at twistedmatrix.com  Fri Sep 13 22:13:20 2002
From: washort at twistedmatrix.com (Allen Short)
Date: Fri, 13 Sep 2002 23:13:20 -0500 (CDT)
Subject: [Twisted-Python] version control, QA, branching ...
In-Reply-To: <20020914001030.GA23914@minkirri.apana.org.au>
References: <1031781315.19657.15.camel@troglodyte.funhouse>
	<20020913061118.9479.qmail@green.zadka.com>
	<20020914001030.GA23914@minkirri.apana.org.au>
Message-ID: <20020913.231320.596523693.washort@twistedmatrix.com>

>>>>> "Donovan" == Donovan Baarda <abo at minkirri.apana.org.au> writes:

    >> > * Arch > http://www.regexps.com/arch.html
    >> 
    >> It's a mess of shell scripts and ftp crap.

    > That was my concern when I first looked at it. A few people
    > spent a fair bit of time trying to convince me "it's not that
    > bad". The mess of scripts still makes me uneasy, but the design
    > is probably sound. I suspect a conversion to Python would give
    > Arch some deserved credibility.

    > The "ftp crap" is a bit harsh... they happen to have chosen ftp
    > as the network transport protocol, which IMHO is a better idea
    > than inventing a new one. FTP as a protocol sucks, but it it
    > widely supported.


yeah -- my original take on arch was that its implementation made it
unacceptable. but as i think about it, i'm not sure that's such a big
deal; the design seems sound from the docs, and since it's written in
a "software tools" style, incremental conversion to Python should be
feasible if that's ever desired. So... it's tempting to try for some
less-important repositories, i think. (TRDemo, perhaps?) The "FTP" and
"shell" aspects of it are pretty nonessential to its operation, so far
as i can tell.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020913/46cd9979/attachment.sig>

From glyph at twistedmatrix.com  Fri Sep 13 22:48:40 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 13 Sep 2002 23:48:40 -0500 (CDT)
Subject: [Twisted-Python] version control, QA, branching ...
In-Reply-To: <20020913.231320.596523693.washort@twistedmatrix.com>
References: <20020913061118.9479.qmail@green.zadka.com>
	<20020914001030.GA23914@minkirri.apana.org.au>
	<20020913.231320.596523693.washort@twistedmatrix.com>
Message-ID: <20020913.234840.02307384.glyph@twistedmatrix.com>


On Fri, 13 Sep 2002 23:13:20 -0500 (CDT), Allen Short <washort at twistedmatrix.com> wrote:

> my original take on arch was that its implementation made it
> unacceptable. but as i think about it, i'm not sure that's such a big deal;
> the design seems sound from the docs, and since it's written in a "software
> tools" style, incremental conversion to Python should be feasible if that's
> ever desired. So... it's tempting to try for some less-important
> repositories, i think. (TRDemo, perhaps?) The "FTP" and "shell" aspects of it
> are pretty nonessential to its operation, so far as i can tell.

I think this would be a huge distraction and not really worthwhile...

Arch is a good design for verison control.  The implementation really does make
it unacceptable though.  Stipulations like "POSIX /bin/sh" and "FTP" cause
problems with firewalls and portability.

By my informal estimate, half of the people interested in anonymous up-to-date
access to Twisted are using some version of Microsoft Windows XP behind a
firewall which ether breaks or doesn't allow FTP.

The "FTP" and "shell" aspects of it aren't essential to its operation, but they
are essential to its implementation.  I wouldn't want to use arch any more than
I'd want to use aegis.

There's also the issue of tools.  How long until we get viewcvs-like behavior
out of arch?  Do these tools already exist?  Where can I find them?  Is the
author committed to doing GUI implementations of the frontend?  I'd answer
these research questions myself, except regexps.com's web access is down now :)

It would be nice to be able to create branches more easily.  However, "more
easily" is a lot more than just "better low-level design".  It's emacs
integration, GUI tools, windows support, scriptability, and so on and so forth.
I don't forsee any of my projects moving to an alternative version control
system any time soon.

As always, if somebody comes along and implements something in Twisted, I would
be more inclined to consider it seriously; I could think of a lot of cool tasks
we could automate if the VC server itself had Python hooks.  (Also, I imagine
that PB or HTTP would be more firewall-friendly and easily secured than
pserver.)  Still, before migrating any actual code to it I'd want to see that
it had all the features mentioned above.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020913/46d0cc7e/attachment.sig>

From warner at lothar.com  Sat Sep 14 02:34:48 2002
From: warner at lothar.com (Brian Warner)
Date: Sat, 14 Sep 2002 01:34:48 -0700
Subject: [Twisted-Python] Perspective vs. Identity question
Message-ID: <E17q8O8-00017r-00@localhost>

So I'm trying to figure out the whole PB thing; I smell a lot of potential
there but haven't figured out enough to actually use it yet. I figured a
question here might start to clear up my confusion. I'll start with what I
think I know so that if I'm wrong someone can correct my understanding. I
intend to turn this into some kind of documentation so that my ignorance can
be used towards some greater good :).

I think I get the PB remote-method scheme up to the level demonstrated in
docs/examples/pbsimple.py (using pb.connect and remote_* methods). In trying
to figure out the Perspective/Identity layer (as in pbecho.py), what I've
figured out so far is:

 Application instances hold an Authorizer, usually a DefaultAuthorizer.

 A DefaultAuthorizer has a collection of Identity objects, each with a
 unique identityName. That collection doesn't have to be a static list:
 .getIdentityRequest() could be overridden to do some kind of asynchronous
 lookup (LDAP comes to mind).

 Each Identity has a username and a password. It also has a list of "keys"
 (.keyring), each of which is a (perspectivename, servicename) tuple.

 If the remote client knows both username and password for a given Identity,
 then they are allowed to ask that Identity for any perspective on its
 keyring by supplying a (servicename/perspectivename) pair. The
 identity.requestPerspectiveForKey() method is supposed to find the named
 Perspective (asynchronously), run .attach() on it, then give a reference to
 the client.

 Once the client has that remote reference, they can do any perspective_*
 method they like.


So my understanding breaks down in how this is all supposed to work in
practice. I keep thinking of it in terms of a login shell or game, where you
have a bunch of user accounts, and a user is using their client program to
connect in. Let's say there are two Services: Shell and Game, and that the
same users are allowed to connect to both. Then:

 Each user has one Identity object, with a username and password. These
 Identities could be created ahead of time (say, from /etc/passwd) and
 stored in the DefaultAuthorizer's list. Or, they might be created on the
 fly by a custom Authorizer class. The important thing is that
 .getIdentityRequest returns a valid Identity object when asked.

 Each user might talk to two potential Perpective objects. When user 'bob'
 is attached in to do shell stuff, he could use a Perspective called
 'bob_shell', which is part of the Shell service. (I think the
 perspectivename is scoped to the Service, so this could just be named
 'bob', but that would make this description confusing). When he is doing
 game stuff, he could use a Perspective called 'bob_game', part of the Game
 service. Presumably bob_shell and bob_game are instances of different
 subclasses of pb.Perspective, one which offers shell-like remote methods
 and the other offering game-like methods. The cross-user shared state that
 represents the communal game world could be stored up in the Game Service
 object, anything that needs to be shared between both the game and the
 shell could go in the overall Application object.


Now, how are those Perspectives supposed to be created? Do they get built
ahead of time (at the same time the Identities are made)? Are they supposed
to outlast the client connection?

In all the doc/example/ programs, a single Perspective is created ahead of
time, and then a single Identity is created from that Perspective, using the
.makeIdentity() utility method. The largest example I've been able to find
is twisted.words, but as far as I can tell it does the same thing.. I think
the words.Participant (subclassed from pb.Perspective) hangs around all the
time whether or not the client is attached (it has a .status flag that
starts as OFFLINE), and the perspectives are always created ahead of time
(tap/words.py does svc.createPerspective(n).makeIdentity(pw)) based upon who
is allowed to connect.

I can see that the Perspective is kind of an in-server proxy for the remote
user: the client can make it do anything they want (well, any perspective_*
methods at least), and the perspective can outlast the client's connection
(its .attached/.detached are called to let it know when the client comes and
goes). But if it isn't supposed to (or doesn't need to) outlive the
connection, then must it still be created ahead of time? Is
identity.requestPerspectiveForKey() allowed to create new perspective
objects on the fly?


Sorry for the length. Tell me if I'm on the right track here.. if so, I'll
try to put together some kind of multi-Perspective example program (maybe
the telnet/game thing I just described) with a big how-it-works writeup,
something that explains the concepts I just went over. An example+writeup
like that would have helped / will help me figure out this part of Twisted..
maybe it could help others too.

thanks much,
 -Brian, twisting a little bit more each day




From twisted at moshez.org  Sat Sep 14 08:34:24 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 14 Sep 2002 14:34:24 -0000
Subject: [Twisted-Python] Copyright problems -- kill 'em while they are small
Message-ID: <20020914143424.29600.qmail@green.zadka.com>

admin/PyFontify.py does not have a license. Under copyright law,
that means it is illegal to distribute it. While I would think
that this presents a problem to the Twisted Release Team, I am
in no position to make decisions here. However, for Debian, I distribute
the source package along with the binary, and I'm responsible for its
contents. Currently, that would mean I cannot upload .2, until it is
either resolved or I resort to hacks (that is, repackaging with PyFontify
removed).

Please resolve this problem.
Since this file is in the Python CVS, it might be wise to ask the PYthon
Debian maintainer for help.

Thanks.



From lac at strakt.com  Sat Sep 14 08:45:45 2002
From: lac at strakt.com (Laura Creighton)
Date: Sat, 14 Sep 2002 16:45:45 +0200
Subject: [Twisted-Python] version control, QA, branching ... 
In-Reply-To: Message from Allen Short <washort@twistedmatrix.com> 
   of "Fri, 13 Sep 2002 23:13:20 CDT." <20020913.231320.596523693.washort@twistedmatrix.com> 
References: <1031781315.19657.15.camel@troglodyte.funhouse> <20020913061118.9479.qmail@green.zadka.com> <20020914001030.GA23914@minkirri.apana.org.au>  <20020913.231320.596523693.washort@twistedmatrix.com> 
Message-ID: <200209141445.g8EEjko9004518@ratthing-b246.strakt.com>

> >>>>> "Donovan" == Donovan Baarda <abo at minkirri.apana.org.au> writes:
> 
> yeah -- my original take on arch was that its implementation made it
> unacceptable. but as i think about it, i'm not sure that's such a big
> deal; the design seems sound from the docs, and since it's written in
> a "software tools" style, incremental conversion to Python should be
> feasible if that's ever desired. So... it's tempting to try for some
> less-important repositories, i think. (TRDemo, perhaps?) The "FTP" and
> "shell" aspects of it are pretty nonessential to its operation, so far
> as i can tell.

Anders, you're already started with this, correct?  How far along 
did you get?

Laura



From tv at twistedmatrix.com  Sat Sep 14 09:33:30 2002
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sat, 14 Sep 2002 18:33:30 +0300
Subject: [Twisted-Python] version control, QA, branching ...
In-Reply-To: <20020913061118.9479.qmail@green.zadka.com>
References: <1031781315.19657.15.camel@troglodyte.funhouse> <20020913061118.9479.qmail@green.zadka.com>
Message-ID: <20020914153330.GC28271@ki.yok.utu.fi>

On Fri, Sep 13, 2002 at 06:11:18AM -0000, Moshe Zadka wrote:
> >  * BitKeeper
> > http://www.bitkeeper.com/
> Not free software. This means the Twisted team would bet its fate on the fate
> of a single company.

	Their license does contain that bit that if the OpenLogging servers
	go down for half a year, all the code becomes GPL.

	I dislike non-free software, but had to learn BitKeeper, and started
	to use it for some of my projects. Now, I can honestly say
	that with the exception of one single thing they are looking
	at changing, it is _the_ best version control system ever.

> >  * Arch
> > http://www.regexps.com/arch.html
> It's a mess of shell scripts and ftp crap.

	You could actually replace the ftp usage reasonable easily;
	I almost started work on that. You just need to implement
	a few utilities to move files, ls dirs, etc. non-interactively
	with e.g. ssh.

-- 
:(){ :|:&};:



From tv at twistedmatrix.com  Sat Sep 14 08:57:40 2002
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sat, 14 Sep 2002 17:57:40 +0300
Subject: [Twisted-Python] timer granularity
In-Reply-To: <20020914015742.GD516@frobozz.local>
References: <20020913150202.A91401-100000@nosferatu.kriln.com> <20020914015742.GD516@frobozz.local>
Message-ID: <20020914145740.GB28271@ki.yok.utu.fi>

On Sat, Sep 14, 2002 at 11:57:42AM +1000, Andrew Bennetts wrote:
> Secondly, yes Twisted supports sub-second event timers.  The timing
> is done using the OS's select(2) call (or poll(2), or kqueue, etc,
> depending on which reactor you're using).  select(2)'s man page
> *claims* it supports microsecond resolution, but my suspicion is
> that you probably can't rely on more than about millisecond
> resolution.

	The kernel only makes claims that that it will
	delay _atleast_ that long. Number of runnable
	processes, current process priority, disk IO
	load (including swap) etc. all affect it..

	On i386, the kernel ticks along at 100 Hz, so
	AFAIK that's about the range you will get at best.

-- 
:(){ :|:&};:



From tv at twistedmatrix.com  Sat Sep 14 08:53:50 2002
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sat, 14 Sep 2002 17:53:50 +0300
Subject: [Twisted-Python] Async generators
Message-ID: <20020914145350.GA28271@ki.yok.utu.fi>

	Thought this might interest some of you:

http://effbot.org/zone/asyncore-generators.htm

"""Instead of passing events to callbacks, pass information to a
single handle function (a generator) via instance attributes. When the
handler needs more data from the network, use yield to pass control
back to the asyncore dispatcher."""

-- 
:(){ :|:&};:



From sean at twistedmatrix.com  Sat Sep 14 12:52:21 2002
From: sean at twistedmatrix.com (Sean Riley)
Date: Sat, 14 Sep 2002 13:52:21 -0500
Subject: [Twisted-Python] Perspective vs. Identity question
In-Reply-To: <E17q8O8-00017r-00@localhost>
Message-ID: <HOEEKPCOKELHCNIJNMAGCEMJCGAA.sean@twistedmatrix.com>

sounds like you are on the right track. For another example, take a look at
twisted.enterprise.dbcred. It has two authorizers that create perspective
and identities from a relational database and a "reflector" which is another
type of data source.

In my application, perspectives and identities live in a relational
database, and pb.perspective objects are created when a user logs in and
removed when the user logs out.

my identities objects are created inside of Authorizer.getIdentityRequest()
and my perspectives created inside of service.getPerspectiveRequest().


-----Original Message-----
From: twisted-python-admin at twistedmatrix.com
[mailto:twisted-python-admin at twistedmatrix.com]On Behalf Of Brian Warner
Sent: Saturday, September 14, 2002 3:35 AM
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] Perspective vs. Identity question


So I'm trying to figure out the whole PB thing; I smell a lot of potential
there but haven't figured out enough to actually use it yet. I figured a
question here might start to clear up my confusion. I'll start with what I
think I know so that if I'm wrong someone can correct my understanding. I
intend to turn this into some kind of documentation so that my ignorance can
be used towards some greater good :).

I think I get the PB remote-method scheme up to the level demonstrated in
docs/examples/pbsimple.py (using pb.connect and remote_* methods). In trying
to figure out the Perspective/Identity layer (as in pbecho.py), what I've
figured out so far is:

 Application instances hold an Authorizer, usually a DefaultAuthorizer.

 A DefaultAuthorizer has a collection of Identity objects, each with a
 unique identityName. That collection doesn't have to be a static list:
 .getIdentityRequest() could be overridden to do some kind of asynchronous
 lookup (LDAP comes to mind).

 Each Identity has a username and a password. It also has a list of "keys"
 (.keyring), each of which is a (perspectivename, servicename) tuple.

 If the remote client knows both username and password for a given Identity,
 then they are allowed to ask that Identity for any perspective on its
 keyring by supplying a (servicename/perspectivename) pair. The
 identity.requestPerspectiveForKey() method is supposed to find the named
 Perspective (asynchronously), run .attach() on it, then give a reference to
 the client.

 Once the client has that remote reference, they can do any perspective_*
 method they like.


So my understanding breaks down in how this is all supposed to work in
practice. I keep thinking of it in terms of a login shell or game, where you
have a bunch of user accounts, and a user is using their client program to
connect in. Let's say there are two Services: Shell and Game, and that the
same users are allowed to connect to both. Then:

 Each user has one Identity object, with a username and password. These
 Identities could be created ahead of time (say, from /etc/passwd) and
 stored in the DefaultAuthorizer's list. Or, they might be created on the
 fly by a custom Authorizer class. The important thing is that
 .getIdentityRequest returns a valid Identity object when asked.

 Each user might talk to two potential Perpective objects. When user 'bob'
 is attached in to do shell stuff, he could use a Perspective called
 'bob_shell', which is part of the Shell service. (I think the
 perspectivename is scoped to the Service, so this could just be named
 'bob', but that would make this description confusing). When he is doing
 game stuff, he could use a Perspective called 'bob_game', part of the Game
 service. Presumably bob_shell and bob_game are instances of different
 subclasses of pb.Perspective, one which offers shell-like remote methods
 and the other offering game-like methods. The cross-user shared state that
 represents the communal game world could be stored up in the Game Service
 object, anything that needs to be shared between both the game and the
 shell could go in the overall Application object.


Now, how are those Perspectives supposed to be created? Do they get built
ahead of time (at the same time the Identities are made)? Are they supposed
to outlast the client connection?

In all the doc/example/ programs, a single Perspective is created ahead of
time, and then a single Identity is created from that Perspective, using the
.makeIdentity() utility method. The largest example I've been able to find
is twisted.words, but as far as I can tell it does the same thing.. I think
the words.Participant (subclassed from pb.Perspective) hangs around all the
time whether or not the client is attached (it has a .status flag that
starts as OFFLINE), and the perspectives are always created ahead of time
(tap/words.py does svc.createPerspective(n).makeIdentity(pw)) based upon who
is allowed to connect.

I can see that the Perspective is kind of an in-server proxy for the remote
user: the client can make it do anything they want (well, any perspective_*
methods at least), and the perspective can outlast the client's connection
(its .attached/.detached are called to let it know when the client comes and
goes). But if it isn't supposed to (or doesn't need to) outlive the
connection, then must it still be created ahead of time? Is
identity.requestPerspectiveForKey() allowed to create new perspective
objects on the fly?


Sorry for the length. Tell me if I'm on the right track here.. if so, I'll
try to put together some kind of multi-Perspective example program (maybe
the telnet/game thing I just described) with a big how-it-works writeup,
something that explains the concepts I just went over. An example+writeup
like that would have helped / will help me figure out this part of Twisted..
maybe it could help others too.

thanks much,
 -Brian, twisting a little bit more each day


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From dp at twistedmatrix.com  Sat Sep 14 13:52:39 2002
From: dp at twistedmatrix.com (Donovan Preston)
Date: Sat, 14 Sep 2002 12:52:39 -0700
Subject: [Twisted-Python] domtemplate examples
In-Reply-To: <3D822D9E.9040801@cubik.org>
Message-ID: <86715D88-C81B-11D6-BB6C-00039376B1AE@twistedmatrix.com>

Bruce,

Your code totally rocks, and I liked it so much I abstracted it to 
apply to all Widgets, automatically. Basically, here's how it works;

I added a new method to Widget, setUp(self, request, node, data), which 
gets called before generateDOM. The common case of overriding 
generateDOM, doing some setup work, and then calling Widget.generateDOM 
can now be implemented by overriding setUp. As an added bonus, the 
Model data that the widget is meant to be operating on is passed in to 
the fourth parameter, data.

Then, I changed the way Widgets are rendered so that if a Widget is 
operating on a subModel which happens to be a Deferred instance, both 
setUp and generateDOM will be deferred until after the Deferred 
instance fires. So, you can make a database call in Model.__init__, 
save the deferred in a subModel, apply a Widget to the subModel, and 
you don't have to do anything to have your Widget operate correctly. 
Attached is an example.

Thanks for the clarity and inspiration, bruce!

-------------- next part --------------
A non-text attachment was scrubbed...
Name: deferredList.rpy
Type: application/applefile
Size: 470 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020914/f635b09a/attachment-0008.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: deferredList.rpy
Type: application/text
Size: 80 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020914/f635b09a/attachment-0009.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: deferredList.py
Type: application/applefile
Size: 469 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020914/f635b09a/attachment-0010.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: deferredList.py
Type: application/text
Size: 1200 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020914/f635b09a/attachment-0011.bin>

From dp at twistedmatrix.com  Sat Sep 14 15:17:02 2002
From: dp at twistedmatrix.com (Donovan Preston)
Date: Sat, 14 Sep 2002 14:17:02 -0700
Subject: [Twisted-Python] More DOMTemplate/WebMVC examples
Message-ID: <4FD34822-C827-11D6-BB6C-00039376B1AE@twistedmatrix.com>

I recently gave a talk about Twisted, DOMTemplate, and WebMVC at the 
BayPIGgies Python Interest Group meeting in Palo Alto. For the meeting, 
I created some simple examples that are hopefully self-explanatory. I 
thought I would post them for anyone who is interested to look at. I 
also fixed a few bugs while creating these examples (related to error 
handling) so they will probably work best with CVS head of Twisted.

Donovan

-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo1.py
Type: application/applefile
Size: 462 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0030.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo1.py
Type: application/text
Size: 855 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0031.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo2.py
Type: application/applefile
Size: 462 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0032.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo2.py
Type: application/text
Size: 1466 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0033.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo3.py
Type: application/applefile
Size: 462 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0034.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo3.py
Type: application/text
Size: 2234 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0035.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo1.html
Type: application/applefile
Size: 464 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0036.bin>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0006.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo1.rpy
Type: application/applefile
Size: 463 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0037.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo1.rpy
Type: application/text
Size: 51 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0038.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo2.html
Type: application/applefile
Size: 464 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0039.bin>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0007.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo2.rpy
Type: application/applefile
Size: 463 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0040.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo2.rpy
Type: application/text
Size: 52 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0041.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo3.html
Type: application/applefile
Size: 464 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0042.bin>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0008.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo3.rpy
Type: application/applefile
Size: 463 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0043.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: demo3.rpy
Type: application/text
Size: 52 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020914/f49147e3/attachment-0044.bin>

From quest at lysator.liu.se  Sat Sep 14 10:24:41 2002
From: quest at lysator.liu.se (Anders Qvist)
Date: Sat, 14 Sep 2002 18:24:41 +0200
Subject: [Twisted-Python] version control, QA, branching ...
In-Reply-To: <200209141445.g8EEjko9004518@ratthing-b246.strakt.com>
References: <1031781315.19657.15.camel@troglodyte.funhouse> <20020913061118.9479.qmail@green.zadka.com> <20020914001030.GA23914@minkirri.apana.org.au> <20020913.231320.596523693.washort@twistedmatrix.com> <200209141445.g8EEjko9004518@ratthing-b246.strakt.com>
Message-ID: <20020914162441.GJ19308@lysator.liu.se>

On Sat, Sep 14, 2002 at 04:45:45PM +0200, Laura Creighton wrote:
> > >>>>> "Donovan" == Donovan Baarda <abo at minkirri.apana.org.au> writes:
> > 
> > yeah -- my original take on arch was that its implementation made it
> > unacceptable. but as i think about it, i'm not sure that's such a big
> > deal; the design seems sound from the docs, and since it's written in
> > a "software tools" style, incremental conversion to Python should be
> > feasible if that's ever desired. So... it's tempting to try for some
> > less-important repositories, i think. (TRDemo, perhaps?) The "FTP" and
> > "shell" aspects of it are pretty nonessential to its operation, so far
> > as i can tell.
> 
> Anders, you're already started with this, correct?  How far along 
> did you get?

No, I tried to port it to various architectures.

Arch has two fundamental flaws in its implementation. Any conversion
of arch should address those flaws.

1) Output even more difficult to parse than cvs.
2) There is no server part. Since each user runs the software that
   modifies the repository, there is a significant risk that different
   versions will misunderstand some other version's actions. In other
   words: every version of arch must be tested together with all
   others. Upgrading arch means that you must force _all_ users to
   upgrade.

I think the best thing would be to create a central python module
which exports functions. When you want to drop one of arch's shell
scripts, you change larch to call a function in that module.

In that module, you abstract all interaction with the repository, so
that when the time comes, you can easily create an arch server simply
by converting the abstraction into <insert favourite RPC mechanism
here> and forward the calls to the machine holding the repository.

Along the same lines, you make the various functions in the arch
module return its results as relevant Python data types and have larch
do the translation into human readable data. If larch is called with
--machine-readable, it just outputs string representations of the
return data types, which should be easy enough to parse (esp if you
are a python program!).

-- 
Anders "Quest" Qvist

"We've all heard that a million monkeys banging on a million typewriters
will eventually reproduce the entire works of Shakespeare. Now, thanks 
to the Internet, we know this is not true." -- Robert Wilensky 



From warner at lothar.com  Sun Sep 15 06:42:31 2002
From: warner at lothar.com (Brian Warner)
Date: Sun, 15 Sep 2002 05:42:31 -0700 (PDT)
Subject: [Twisted-Python] Perspective vs. Identity question
Message-ID: <20020915.054231.33478252.warner@lothar.com>

> sounds like you are on the right track. For another example, take a look at
> twisted.enterprise.dbcred. It has two authorizers that create perspective
> and identities from a relational database and a "reflector" which is another
> type of data source.

Thanks for the confirmation. This stuff is finally starting to make sense.
You're right, dbcred is a good example. SQL is still pretty foreign to me,
but somehow seeing the SQL tables and the way dbcred is accessing them helps
me grok the identity/perspective stuff better. The fact that it's a different
style (building Identities on the fly rather than having them pre-built)
helps a lot.

So.. the Identity doesn't really have to exist before the call to
.getIdentityRequest().. it might be pre-made, or pulled out of a database by
name (or other persistent structure), or created with data retrieved from a
third party, or just faked altogether (like a chat service that lets anybody
log in, .getIdentityRequest() could just make a new Identity for every
caller, maybe enforcing unique names).

And the same is true for the Perspectives? .getPerspectiveRequest() could
retrieve an existing Perspective or create a new one on demand? I guess if
the perspective is supposed to hang around (like, um, say a chat service that
remembers user state between logins) then it shouldn't get deleted from the
service when the .detach() method is called. Ah, but it could get saved to
disk and then dropped from memory. And then reloaded when they log in again.
Hence .cachePerspective() and friend. Enlightenment dawns.

I keep coming up with more questions, but the process of phrasing the
question in a concrete manner is letting me figure out the answer without
asking it. Interesting. I think that means I'm past some inflection point.

Last rhetorical question (which I ask so that someone can tell me if I'm
wrong). There should be a roughly one-to-one correspondence between
perspective subclasses and service subclasses, right? Each service's
.getPerspectiveNamed method will create arbitrarily many Perspective objects,
with different names, for different Identities, but (generally) always of the
same class? MyFooService will have a bunch of instances of MyFooPerspective,
etc? The hierarchy looks something like:

 Application
  Authorizer
   Identity[0]
    username, password
    servicenameA,perspectivenameA
    servicenameB,perspectivenameB
    ...
   Identity[1]...
  ServiceA
   servicename="A"
   PerspectiveA[0]
    name
    otherdata
   PerspectiveA[1]..
  ServiceB
   servicename="B"
   PerspectiveB[0]
   PerspectiveB[1]..

If that were a graph, there'd also be arrows from Identity[0] to both
PerspectiveA[0] and PerspectiveB[0].

Ok, that's as much enlightenment as I can take for one day. Somebody tell me
if I got it confused. I'll try to write this up somehow so it might help
someone else.

thanks,
 -Brian




From sean at twistedmatrix.com  Sun Sep 15 11:43:23 2002
From: sean at twistedmatrix.com (Sean Riley)
Date: Sun, 15 Sep 2002 12:43:23 -0500
Subject: [Twisted-Python] serial datatype in t.e.row
In-Reply-To: <3D81B929.8080702@online.no>
Message-ID: <HOEEKPCOKELHCNIJNMAGKEMLCGAA.sean@twistedmatrix.com>

how about:

reflector.insertRow(row, reload=0)

where the reload arg specifies if the key value should be "reloaded" from
the database. this would be specified by the user if they are going to
perform more operations on the row object that was just inserted.



-----Original Message-----
From: twisted-python-admin at twistedmatrix.com
[mailto:twisted-python-admin at twistedmatrix.com]On Behalf Of Benjamin
Bruheim
Sent: Friday, September 13, 2002 5:09 AM
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] serial datatype in t.e.row


> One solution may be to manually run a
>
> 	SELECT nextval('sequencename')
>
> to get the next value and use that for the insert, but this requires an
> extra step for each insert, and requires that the we know which tables
have
> serial columns (suprisingly hard to figure out..) and makes the behavior
for
> tables with serial columns and no serial columns very different.

Wouldn't it be sufficient to add a "reload hint", or something? its only
INSERT that will be affected. A reloadoninsert-hint would be
database-implementationindependent as well. The difference between
getting the whole table or just the ID is neglible in most cases; or
maybe even a question on wheter serials on anything but the dbKeyColumns
should be allowed to contain serials.
At least on postgresql there can be stuff happening on the server that
client would never be able to know about. Letting it reload could also
be passed as an option to every databaseinteractionmethod.
The reloading itself could be done through the deferred, just as glyph
mentioned.

2cents.

\\ benjamin


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From sean at twistedmatrix.com  Sun Sep 15 11:59:08 2002
From: sean at twistedmatrix.com (Sean Riley)
Date: Sun, 15 Sep 2002 12:59:08 -0500
Subject: [Twisted-Python] persistence interface
Message-ID: <HOEEKPCOKELHCNIJNMAGEEMMCGAA.sean@twistedmatrix.com>

Glyph and I talked about persistence interface for use in twisted.enterprise
initially but with possibly broader implications:

class IPersistence(Interface):

	"""I can generate data to persist my current
	state. The persistent data must be composed of
	basic types that can be handled by common data
	storage systems (relational data bases, XML, etc).
	The data returned shouldn't contain other complex
	python objects, lists or dictionaries.
	"""

	def getStateToPersist(self):
		"""Return a dictionary of my persistent data
		"""

This could just return self.__dict__ or use a simple implementation like:

class RowObject(IPersistence):
    def getStateToPersist(self):
        kw = {}
        for columnName in self.rowColumns:
            kw[columnName] = getattr(self, columnName)
	  return kw

interesting that this looks a little like "getStateToCopy" in
twisted.spread.pb... Maybe there is some crossover between state persisted
to databases in enterprise and across networks with pb... maybe they could
use the same persistence interface?


----------------
"If he's so smart, then how come he's dead?", Homer Simspon
Sean Riley
sean at ninjaneering.com




From itamar at itamarst.org  Sun Sep 15 12:15:29 2002
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 15 Sep 2002 14:15:29 -0400
Subject: [Twisted-Python] persistence interface
References: <HOEEKPCOKELHCNIJNMAGEEMMCGAA.sean@twistedmatrix.com>
Message-ID: <3D84CE41.8050100@itamarst.org>

So now we have the following persistence APIs:

1. getStateToPersist
2. getStateToCopy
3. __getstate__
4. Whatever it is marmalade is using

I don't see any difference between (1) and (3), since they both return 
dictionary that is used in persistence. Just make the requirements for 
__getstate__ to be more strict when implementing IPersistence.

How many persistence APIs do we need?!

-- 
Itamar Shtull-Trauring    http://itamarst.org/
Available for Python, Twisted, Zope and Java consulting




From bruce at cubik.org  Sun Sep 15 17:04:25 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Sun, 15 Sep 2002 17:04:25 -0600
Subject: [Twisted-Python] persistence interface
References: <HOEEKPCOKELHCNIJNMAGEEMMCGAA.sean@twistedmatrix.com>
Message-ID: <3D8511F9.7000601@cubik.org>

Hi Sean,

Sean Riley wrote:
> Glyph and I talked about persistence interface for use in twisted.enterprise
> initially but with possibly broader implications:

If this is going to potentially have broader implications, and with an 
interface as simple as this, it could easily do so, then I think you 
should at least consider taking versions into account and record them.

> interesting that this looks a little like "getStateToCopy" in
> twisted.spread.pb... Maybe there is some crossover between state persisted
> to databases in enterprise and across networks with pb... maybe they could
> use the same persistence interface?

Something that I'd like to see in time is PB over UDP, with the ability 
to specify not just what state should be copied, but some additional QoS 
information about that information as well.  That'd likely lead to a 
divergence in this similarity, no?

  - Bruce




From bruce at cubik.org  Sun Sep 15 17:09:01 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Sun, 15 Sep 2002 17:09:01 -0600
Subject: [Twisted-Python] serial datatype in t.e.row
References: <HOEEKPCOKELHCNIJNMAGCEKHCGAA.sean@twistedmatrix.com>
Message-ID: <3D85130D.4030506@cubik.org>

Sean Riley wrote:
> I have been looking at adding support for "serial" columns into
> twisted.enterprise.row and it appears to be harder than i originally
> thought.
> 
> ... snipped ...
> 
> But.. using twisted enterprise:
> 
> 	newRow = MyRow()
> 	reflector.insertRow(newRow)
> 
> does effectively the same thing, but the newRow object doesn't know the
> value of the index column (column1 in this case) that was just inserted, so
> it doesn't know how to update or delete itself!
> 
> One solution may be to manually run a
> 
> 	SELECT nextval('sequencename')
> 
> to get the next value and use that for the insert, but this requires an
> extra step for each insert, and requires that the we know which tables have
> serial columns (suprisingly hard to figure out..) and makes the behavior for
> tables with serial columns and no serial columns very different.

Ignoring the various problems that you're needing to solve, if you're 
using pyPgSQL, after an insert operation, the oid of the new row is 
available on the underlying pyPgSQL cursor object.  You can use that 
along with a select to get back the serial column value inserted rather 
than necessarily having to select off of the sequence.

  - Bruce




From glyph at twistedmatrix.com  Sun Sep 15 17:23:43 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 15 Sep 2002 18:23:43 -0500 (CDT)
Subject: [Twisted-Python] persistence interface
In-Reply-To: <3D84CE41.8050100@itamarst.org>
References: <HOEEKPCOKELHCNIJNMAGEEMMCGAA.sean@twistedmatrix.com>
	<3D84CE41.8050100@itamarst.org>
Message-ID: <20020915.182343.78715437.glyph@twistedmatrix.com>


Let me give some exposition of the ideas that lead to this, since the
persistence-adaptor style that Sean is proposing was at my suggestion, inspired
by what he's done so far on the Row API.

On Sun, 15 Sep 2002 14:15:29 -0400, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
> So now we have the following persistence APIs:

> 1. getStateToPersist

The idea here is that it's specifically for relational, or "essential"
persistence, not complete persistence.  In order for this kind of persistence
to work, your objects need to have a fixed list of fixed and some semantic
meaning associated with any object references: containership, ownership, or
weak reference.

So you can't return a dictionary of arbitrary data; you return a dictionary of
the attributes that the persistence layer expects to see.

This also doesn't handle object versioning, since it expects your persistence
layer to impose some sort of structure on your data.  (You can't upgrade a
relational database without some serious effort and forethought in any event.)

> 2. getStateToCopy

This is for remote mirroring.  Now, I am tempted to suggest this be used for
persistence adapters as well, since the full name of this method is
getStateToCopy*For*, and it takes the serializer object (which could quite well
be a database reflector).

However, I think the differences are more subtle than that, since as I
mentioned, information about containership will probably need to be part of the
persistence-adapter API.

Not only is it meant to have semntic parity with relational databases (at least
for its first incarnation), it's only supposed to be persisting state that an
object absolutely "needs"; any duplicated data such as cached references,
backreferences to "parent" objects, or, in the relational case, lists that
point to child objects, need not be saved.  This means that rather than the
traditional way of handling class updating in Twisted, input one state, output
a new, fixed state for new versions of the class, is unworkable.  You can
change the internal representation of the object as much as you want, as long
as you can still re-build it from the info you got from the database.

We will be able to avoid the 'for' argument in getStateToPersist because we
will have different, specialized adapter interfaces for different kinds of
persistence.  FramerD needs very different information about an object's state
than a database would, but it's likely that none of the existing state methods
will suffice.

> 3. __getstate__

This is for full, faithful replication of objects to trusted sources, such as
.tap files.  There should be as little perturbation as possible in an object's
__getstate__ method; really, the only thing this should do it provide
versioning and remove attributes which are simply not persistable.

Consider using __getstate__ for a schema migration tool: dumping a database to
a large pickle with one version of a codebase, then loading it with a new
version and undumping it back into another database with a new schema.

> 4. Whatever it is marmalade is using

Ugh.

This one is the one I'd think of eliminating, if we're going to think of
eliminating one.  It's rather overcomplex to produce a sensible-looking object
hierarchy with DOM, and very hard to get it right.  That's why I eventually
gave up on sensibility and just settled for correctness in Application ;).

> I don't see any difference between (1) and (3), since they both return
> dictionary that is used in persistence. Just make the requirements for
> __getstate__ to be more strict when implementing IPersistence.

That would be rather difficult, since IPersistence may want to expect things
like indexing in order to reverse properly.

> How many persistence APIs do we need?!

As many as there are persistence mechanisms that people want to use with
Twisted :-).

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020915/f7713295/attachment.sig>

From lac at strakt.com  Mon Sep 16 00:55:56 2002
From: lac at strakt.com (Laura Creighton)
Date: Mon, 16 Sep 2002 08:55:56 +0200
Subject: [Twisted-Python] persistence interface 
In-Reply-To: Message from Glyph Lefkowitz <glyph@twistedmatrix.com> 
   of "Sun, 15 Sep 2002 18:23:43 CDT." <20020915.182343.78715437.glyph@twistedmatrix.com> 
References: <HOEEKPCOKELHCNIJNMAGEEMMCGAA.sean@twistedmatrix.com> <3D84CE41.8050100@itamarst.org>  <20020915.182343.78715437.glyph@twistedmatrix.com> 
Message-ID: <200209160655.g8G6tuo9012915@ratthing-b246.strakt.com>

There is a new persistence-SIG mailing list on python.org discussing
things like this, er, not right now but last month (things have become
fairly quiet).  If you've ever thought -- Persistence would be so much
easier if only Python had capability XYZ -- now is the time to mention
it, when GvR wants to make changes to support persistence.

Laura



From grolgh at online.no  Mon Sep 16 06:52:22 2002
From: grolgh at online.no (Benjamin Bruheim)
Date: Mon, 16 Sep 2002 14:52:22 +0200
Subject: [Twisted-Python] serial datatype in t.e.row
References: <HOEEKPCOKELHCNIJNMAGKEMLCGAA.sean@twistedmatrix.com>
Message-ID: <3D85D406.20703@online.no>

Sean Riley wrote:
> how about:
> 
> reflector.insertRow(row, reload=0)
> 
> where the reload arg specifies if the key value should be "reloaded" from
> the database. this would be specified by the user if they are going to
> perform more operations on the row object that was just inserted.

Hm, as Bruce mentioned, this could be done without a select, so I guess 
this is good. If there aren't any better alternatives than _this_, I 
will opt for this.

Benjamin Bruheim
Technical Manager, In/Out Bergen (http://www.inout.no)




From dennis at illusions.com  Tue Sep 17 09:30:04 2002
From: dennis at illusions.com (dennis at illusions.com)
Date: Tue, 17 Sep 2002 08:30:04 -0700 (MST)
Subject: [Twisted-Python] newbie widget question
Message-ID: <Pine.LNX.4.44.0209170822590.16147-100000@illusions.com>

Hi,

I've just started playing with Twisted 0.99.0. Bear with me please.

I'd like to use widgets, but I do not understand how to 'hook' a widget
into twisted web.

The Example uses config.tac to specify main.Gadget() and 'twistd -g
Example' to start the server. If I've got a web.tap, how do I use a
widget? I see I can add a 'new web test widget' when using coil, but I
don't know what this means.

Any help would be greatly appreciated.

-- 
---
Dennis Sacks
dennis at illusions.com





From Sergio.Lobo at Just-In-Time-Software.com  Tue Sep 17 10:51:26 2002
From: Sergio.Lobo at Just-In-Time-Software.com (Sergio Lobo)
Date: Tue, 17 Sep 2002 18:51:26 +0200
Subject: [Twisted-Python] Is X.25 supported?
Message-ID: <200209171851.26505.Sergio.Lobo@Just-In-Time-Software.com>

Hello,

I just found the article below on the web. Would anybody please let me know if 
Twisted-Python provides any support for the X.25 protocol?

Kind regards
Sergio Lobo


[Twisted-Python] adding a new connection type
Eric C. Newton twisted-python at twistedmatrix.com
Sun, 26 May 2002 22:30:45 -0400

    * Previous message: [Twisted-Python] adding a new connection type
    * Next message: [Twisted-Python] adding a new connection type
    * Messages sorted by: [ date ] [ thread ] [ subject ] [ author ]

Itamar Shtull-Trauring <twisted at itamarst.org> writes:
> Well, first of all, what does it run over?  

X.25.  Be afraid.

> And in what languages is it written?  

It runs in Python of course.

> And, what is it good for?

X.25 is an international standard for wide area communications widely
adopted by companies in the 1970's and early 80's using
packet-oriented, synchronous serial communications devices.

I'm using Linux, and playing with 2-year-old patches for version 2.4
of the kernel which enables me to play with the API over a loopback
device.

Sometimes it even works.




From ecn at metaslash.com  Tue Sep 17 12:20:42 2002
From: ecn at metaslash.com (Eric C. Newton)
Date: Tue, 17 Sep 2002 14:20:42 -0400
Subject: [Twisted-Python] Is X.25 supported?
In-Reply-To: <"from Sergio.Lobo"@Just-In-Time-Software.com>
References: <200209171851.26505.Sergio.Lobo@Just-In-Time-Software.com>
Message-ID: <20020917142042.A11359@pcp01758393pcs.gambrl01.md.comcast.net>

Twisted does prevent it, but there is no built-in support.  This is
not suprising since X.25 APIs are different on nearly every platform.

I tried re-patching my changes back in recently and had little
success.  I may come back to this in a couple of months.

-Eric

On Tue, Sep 17, 2002 at 06:51:26PM +0200, Sergio Lobo wrote:
> Hello,
> 
> I just found the article below on the web. Would anybody please let me know if 
> Twisted-Python provides any support for the X.25 protocol?
> 
> Kind regards
> Sergio Lobo
> 
> 
> [Twisted-Python] adding a new connection type
> Eric C. Newton twisted-python at twistedmatrix.com
> Sun, 26 May 2002 22:30:45 -0400
> 
>     * Previous message: [Twisted-Python] adding a new connection type
>     * Next message: [Twisted-Python] adding a new connection type
>     * Messages sorted by: [ date ] [ thread ] [ subject ] [ author ]
> 
> Itamar Shtull-Trauring <twisted at itamarst.org> writes:
> > Well, first of all, what does it run over?  
> 
> X.25.  Be afraid.
> 
> > And in what languages is it written?  
> 
> It runs in Python of course.
> 
> > And, what is it good for?
> 
> X.25 is an international standard for wide area communications widely
> adopted by companies in the 1970's and early 80's using
> packet-oriented, synchronous serial communications devices.
> 
> I'm using Linux, and playing with 2-year-old patches for version 2.4
> of the kernel which enables me to play with the API over a loopback
> device.
> 
> Sometimes it even works.
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From Sergio.Lobo at CoachingOffice.com  Tue Sep 17 09:29:10 2002
From: Sergio.Lobo at CoachingOffice.com (Sergio Lobo)
Date: Tue, 17 Sep 2002 17:29:10 +0200
Subject: [Twisted-Python] X.25 for Python
Message-ID: <200209171729.10960.Sergio.Lobo@CoachingOffice.com>

Hello Eric,

I just found the article below on the web. Would you please let me know if 
Twisted-Python provides support for X.25?

Kind regards
Sergio Lobo


[Twisted-Python] adding a new connection type
Eric C. Newton twisted-python at twistedmatrix.com
Sun, 26 May 2002 22:30:45 -0400

    * Previous message: [Twisted-Python] adding a new connection type
    * Next message: [Twisted-Python] adding a new connection type
    * Messages sorted by: [ date ] [ thread ] [ subject ] [ author ]

Itamar Shtull-Trauring <twisted at itamarst.org> writes:
> Well, first of all, what does it run over?  

X.25.  Be afraid.

> And in what languages is it written?  

It runs in Python of course.

> And, what is it good for?

X.25 is an international standard for wide area communications widely
adopted by companies in the 1970's and early 80's using
packet-oriented, synchronous serial communications devices.

I'm using Linux, and playing with 2-year-old patches for version 2.4
of the kernel which enables me to play with the API over a loopback
device.

Sometimes it even works.



From m at moshez.org  Tue Sep 17 11:06:29 2002
From: m at moshez.org (Moshe Zadka)
Date: 17 Sep 2002 17:06:29 -0000
Subject: [Twisted-Python] newbie widget question
In-Reply-To: <Pine.LNX.4.44.0209170822590.16147-100000@illusions.com>
References: <Pine.LNX.4.44.0209170822590.16147-100000@illusions.com>
Message-ID: <20020917170629.22161.qmail@green.zadka.com>

On Tue, 17 Sep 2002, dennis at illusions.com wrote:

> The Example uses config.tac to specify main.Gadget() and 'twistd -g
> Example' to start the server.

If you don't want to use a module, you can just put similar code in
a Python source file and then use "twistd -y". Or you can just put
"app.save()" at the end of it to manually create a tap. "mktap"
is a way of programmatically record common configuration, not to
create wonderful and unique condifurations.



From itamar at itamarst.org  Tue Sep 17 11:51:43 2002
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 17 Sep 2002 13:51:43 -0400
Subject: [Twisted-Python] Is X.25 supported?
References: <200209171851.26505.Sergio.Lobo@Just-In-Time-Software.com>
Message-ID: <3D876BAF.4040403@itamarst.org>

Sergio Lobo wrote:

> I just found the article below on the web. Would anybody please let me know if 
> Twisted-Python provides any support for the X.25 protocol?

If you can access it from Python, then probably, yes. Try emailing whoever 
wrote that email in the first place.

Alternate plan of action:
1. Get your Linux box or whatever OS it is setup with X.25.
2. Play with socket module in Python, see if it can do X.25 stuff.
3. Get back to us.




From dennis at illusions.com  Tue Sep 17 16:35:26 2002
From: dennis at illusions.com (dennis at illusions.com)
Date: Tue, 17 Sep 2002 15:35:26 -0700 (MST)
Subject: [Twisted-Python] newbie widget question
In-Reply-To: <20020917170629.22161.qmail@green.zadka.com>
Message-ID: <Pine.LNX.4.44.0209171522040.6946-100000@illusions.com>

On 17 Sep 2002, Moshe Zadka wrote:

> If you don't want to use a module, you can just put similar code in
> a Python source file and then use "twistd -y". Or you can just put
> "app.save()" at the end of it to manually create a tap. "mktap"
> is a way of programmatically record common configuration, not to
> create wonderful and unique condifurations.

Thanks,

Ok, so I'll take Example as my base to build on. How do I specify a 'doc 
root' and a logfile? Is there more example code I can look at?

The twisted docs are very very brief...they probably contain all the info, 
but not spelled out enough for me to grasp at this point.

---
Dennis Sacks
dennis at illusions.com







From ecn at metaslash.com  Tue Sep 17 18:00:48 2002
From: ecn at metaslash.com (Eric C. Newton)
Date: Tue, 17 Sep 2002 20:00:48 -0400
Subject: [Twisted-Python] Is X.25 supported?
In-Reply-To: <"from ecn"@metaslash.com>
References: <200209171851.26505.Sergio.Lobo@Just-In-Time-Software.com>
 <"from Sergio.Lobo"@Just-In-Time-Software.com>
 <20020917142042.A11359@pcp01758393pcs.gambrl01.md.comcast.net>
Message-ID: <20020917200048.A12954@pcp01758393pcs.gambrl01.md.comcast.net>

Oops ... that should read:

    "Twisted does _not_ prevent it..."

Twisted is great.  Eric is an idiot.

Some more details for the internet to record for posterity:

The X.25 interface under Linux is socket based.  You can use your
friends listen/connect/accept/send/recv with the underlying X.25
drivers.  The X.25 API on Sun and IBM AIX is SysV Streams 
based, and you interact with the X.25 device with different system
calls.

As you know, twisted works great for sockets, and it _seems_ like
it would be simple enough to do.  But Python does not quite support
the interface necessary to create real X.25 connections.  With 
some simple C extensions you can expose the API.  The main problem 
is that the format of a X.25 address is quite different from a 
TCP/IP address.

Once you get a file descriptor, it can be integrated with the Reactor.
My only problems with Twisted were trying to make the X.25 API
as full-featured as a TCP/IP connection.  With some effort, I'm
sure it can be done.

I've successfully used X.25 against the Linux loopback device,
and on the real hardware under Solaris and AIX.  I've done all three
with Python.  If you want any other help with this, please contact
me off list.

-Eric
ecn at metaslash.com

On Tue, Sep 17, 2002 at 02:20:42PM -0400, Eric C. Newton wrote:
> Twisted does prevent it, but there is no built-in support.  This is
> not suprising since X.25 APIs are different on nearly every platform.
> 
> I tried re-patching my changes back in recently and had little
> success.  I may come back to this in a couple of months.
> 
> -Eric
> 
> On Tue, Sep 17, 2002 at 06:51:26PM +0200, Sergio Lobo wrote:
> > Hello,
> > 
> > I just found the article below on the web. Would anybody please let me know if 
> > Twisted-Python provides any support for the X.25 protocol?
> > 
> > Kind regards
> > Sergio Lobo
> > 
> > 
> > [Twisted-Python] adding a new connection type
> > Eric C. Newton twisted-python at twistedmatrix.com
> > Sun, 26 May 2002 22:30:45 -0400
> > 
> >     * Previous message: [Twisted-Python] adding a new connection type
> >     * Next message: [Twisted-Python] adding a new connection type
> >     * Messages sorted by: [ date ] [ thread ] [ subject ] [ author ]
> > 
> > Itamar Shtull-Trauring <twisted at itamarst.org> writes:
> > > Well, first of all, what does it run over?  
> > 
> > X.25.  Be afraid.
> > 
> > > And in what languages is it written?  
> > 
> > It runs in Python of course.
> > 
> > > And, what is it good for?
> > 
> > X.25 is an international standard for wide area communications widely
> > adopted by companies in the 1970's and early 80's using
> > packet-oriented, synchronous serial communications devices.
> > 
> > I'm using Linux, and playing with 2-year-old patches for version 2.4
> > of the kernel which enables me to play with the API over a loopback
> > device.
> > 
> > Sometimes it even works.
> > 
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From carball at hush.com  Wed Sep 18 21:43:52 2002
From: carball at hush.com (carball at hush.com)
Date: Wed, 18 Sep 2002 20:43:52 -0700
Subject: [Twisted-Python] DBReflector.loadObjectFrom question
Message-ID: <200209190343.g8J3hrR59424@mailserver2.hushmail.com>

greetings,

using loadObjectsFrom, it seems the RowClass i am passing in
should have dbColumns with data in it in order to build a
correct sql query. .

where does said data come from?
my dbColumns is just an empty list

also, i dont understand why i have to tell an instantiated
DBReflector what tablename, keys, and RowClass to use again in
loadObjectsFrom?

i apologize if i'm missing something obvious
i've read 'some' T.enterprise code, not enough to
understand it all. .

thanks in advance,
cary

--------------code-----------------------------
#!/usr/bin/env python
from twisted.enterprise import adbapi, row
from twisted.internet import app

class AcctRow( row.RowObject ):
rowColumns = [
'id',
't_id',
'name',
'label'
]
dbKeyColumns = [( 'id', 'int4' )]
def __repr__( self ):
return '%d %s' % ( self.id, self.name )

def refInit( result ):
print 'refInit', result

dbpool = adbapi.ConnectionPool( 'pyPgSQL.PgSQL' )
reflector = row.DBReflector( dbpool,
[( AcctRow,
'acct',
AcctRow.dbKeyColumns )],
refInit )

reflector.loadObjectsFrom( 'acct',
AcctRow.dbKeyColumns,
None,
AcctRow )

application = app.Application('rowTest')
application.run(save=0)

---------------------------
this fails in DBReflector._objectLoader, dbColumns is []??????
i'm using twisted 0.99.0

-----------output------------------
car at platypus car $ ./rowTest.py
Installing SelectReactor, since unspecified.
Connecting to database: pyPgSQL.PgSQL ('',) {}
Enabling Multithreading.
adbapi connecting: pyPgSQL.PgSQL ('',)
Exception in SQL interaction! rolling back...
Traceback (most recent call last):
File '/usr/lib/python2.2/site-packages/twisted/enterprise/adbapi.py', line 154
, in _runInteraction
result = apply(interaction, (trans,)+args, kw)
File '/usr/lib/python2.2/site-packages/twisted/enterprise/row.py', line 245, i
n _objectLoader
transaction.execute(sql)
File '/usr/lib/python2.2/site-packages/pyPgSQL/PgSQL.py', line 2393, in execut
e
adbapi connecting: pyPgSQL.PgSQL ('',)
raise OperationalError, msg
libpq.OperationalError: ERROR: parser: parse error at or near 'FROM'

Traceback (most recent call last):
File '/usr/lib/python2.2/site-packages/twisted/internet/threads.py', line 33,
in _putResultInDeferred
result = apply(f, args, kwargs)
File '/usr/lib/python2.2/site-packages/twisted/enterprise/adbapi.py', line 154
, in _runInteraction
result = apply(interaction, (trans,)+args, kw)
File '/usr/lib/python2.2/site-packages/twisted/enterprise/row.py', line 245, i
n _objectLoader
transaction.execute(sql)
File '/usr/lib/python2.2/site-packages/pyPgSQL/PgSQL.py', line 2393, in execut
e
raise OperationalError, msg
libpq.OperationalError: ERROR: parser: parse error at or near 'FROM'

refInit None
Main loop terminated.





Get your free encrypted email at https://www.hushmail.com



From sean at twistedmatrix.com  Thu Sep 19 12:25:32 2002
From: sean at twistedmatrix.com (Sean Riley)
Date: Thu, 19 Sep 2002 13:25:32 -0500
Subject: [Twisted-Python] DBReflector.loadObjectFrom question
In-Reply-To: <200209190343.g8J3hrR59424@mailserver2.hushmail.com>
Message-ID: <HOEEKPCOKELHCNIJNMAGEENICGAA.sean@twistedmatrix.com>

there have been changes to improve the Row interface recently. Here is your
code modified to use the new interface:

from twisted.enterprise import adbapi, row, dbreflector
from twisted.internet import app

class AcctRow( row.RowObject ):
    rowColumns = [
        'id',
        't_id',
        'name',
        'label'
        ]
    rowKeyColumns = [( 'id', 'int4' )]
    rowTableName = "acct"

    def __repr__( self ):
        return 'Acct: <%d %s>' % ( self.id, self.name )


def gotData( data ):
    print "got Data:", data

def refInit( result ):
    print 'refInit', result
    reflector.loadObjectsFrom( 'acct' ).addCallback( gotData)

dbpool = adbapi.ConnectionPool("pyPgSQL.PgSQL", database="sean",
host="localhost", port=5432)
reflector = dbreflector.SQLReflector( dbpool,[ AcctRow], refInit)

application = app.Application('rowTest')
application.run(save=0)

BTW, loadObjects must be run _after_ the reflector has been initialized
(after refInit) has been invoked because the initialization may be
asynchronous.

here is the above code running:

$ python e.py
Connecting to database: pyPgSQL.PgSQL () {'host': 'localhost'}
Enabling Multithreading.
starting waker
adbapi connecting: pyPgSQL.PgSQL {'host': 'localhost', 'port': 5432,
'database': 'sean'}
refInit None
got Data: [Acct: <1 afd>, Acct: <2 afd>, Acct: <3 afd>, Acct: <4 afd>, Acct:
<5 afd>]


-----Original Message-----
From: twisted-python-admin at twistedmatrix.com
[mailto:twisted-python-admin at twistedmatrix.com]On Behalf Of
carball at hush.com
Sent: Wednesday, September 18, 2002 10:44 PM
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] DBReflector.loadObjectFrom question



greetings,

using loadObjectsFrom, it seems the RowClass i am passing in
should have dbColumns with data in it in order to build a
correct sql query. .

where does said data come from?
my dbColumns is just an empty list

also, i dont understand why i have to tell an instantiated
DBReflector what tablename, keys, and RowClass to use again in
loadObjectsFrom?

i apologize if i'm missing something obvious
i've read 'some' T.enterprise code, not enough to
understand it all. .

thanks in advance,
cary

--------------code-----------------------------
#!/usr/bin/env python
from twisted.enterprise import adbapi, row
from twisted.internet import app

class AcctRow( row.RowObject ):
rowColumns = [
'id',
't_id',
'name',
'label'
]
dbKeyColumns = [( 'id', 'int4' )]
def __repr__( self ):
return '%d %s' % ( self.id, self.name )

def refInit( result ):
print 'refInit', result

dbpool = adbapi.ConnectionPool( 'pyPgSQL.PgSQL' )
reflector = row.DBReflector( dbpool,
[( AcctRow,
'acct',
AcctRow.dbKeyColumns )],
refInit )

reflector.loadObjectsFrom( 'acct',
AcctRow.dbKeyColumns,
None,
AcctRow )

application = app.Application('rowTest')
application.run(save=0)

---------------------------
this fails in DBReflector._objectLoader, dbColumns is []??????
i'm using twisted 0.99.0

-----------output------------------
car at platypus car $ ./rowTest.py
Installing SelectReactor, since unspecified.
Connecting to database: pyPgSQL.PgSQL ('',) {}
Enabling Multithreading.
adbapi connecting: pyPgSQL.PgSQL ('',)
Exception in SQL interaction! rolling back...
Traceback (most recent call last):
File '/usr/lib/python2.2/site-packages/twisted/enterprise/adbapi.py', line
154
, in _runInteraction
result = apply(interaction, (trans,)+args, kw)
File '/usr/lib/python2.2/site-packages/twisted/enterprise/row.py', line 245,
i
n _objectLoader
transaction.execute(sql)
File '/usr/lib/python2.2/site-packages/pyPgSQL/PgSQL.py', line 2393, in
execut
e
adbapi connecting: pyPgSQL.PgSQL ('',)
raise OperationalError, msg
libpq.OperationalError: ERROR: parser: parse error at or near 'FROM'

Traceback (most recent call last):
File '/usr/lib/python2.2/site-packages/twisted/internet/threads.py', line
33,
in _putResultInDeferred
result = apply(f, args, kwargs)
File '/usr/lib/python2.2/site-packages/twisted/enterprise/adbapi.py', line
154
, in _runInteraction
result = apply(interaction, (trans,)+args, kw)
File '/usr/lib/python2.2/site-packages/twisted/enterprise/row.py', line 245,
i
n _objectLoader
transaction.execute(sql)
File '/usr/lib/python2.2/site-packages/pyPgSQL/PgSQL.py', line 2393, in
execut
e
raise OperationalError, msg
libpq.OperationalError: ERROR: parser: parse error at or near 'FROM'

refInit None
Main loop terminated.





Get your free encrypted email at https://www.hushmail.com

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From andrew-twisted at puzzling.org  Thu Sep 19 22:08:15 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 20 Sep 2002 14:08:15 +1000
Subject: [Twisted-Python] jelly, marmalade, aot, and wacky types
Message-ID: <20020920040815.GB2501@ritsuko.xware.cx>

Quick question:

Even if an object is of an unknown wacky type (say Zope's extension
class), shouldn't jelly (and friends) check for 
callable(getattr(obj, '__getstate__, None)) anyway (i.e. treat it like
an InstanceType and see what happens)?  It looks like this is what
pickle does.

-Andrew.




From twisted at moshez.org  Fri Sep 20 08:42:44 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 20 Sep 2002 14:42:44 -0000
Subject: [Twisted-Python] epyrun failing
Message-ID: <20020920144244.2362.qmail@green.zadka.com>

epyrun fails for me with:

Traceback (most recent call last):
  File "./admin/epyrun", line 54, in ?
    cli()
  File "/usr/lib/python2.1/site-packages/epydoc/cli.py", line 202, in cli
    modules = _find_modules(param['modules'], param['verbosity'])
  File "/usr/lib/python2.1/site-packages/epydoc/cli.py", line 187, in _find_modules
    exec('module = %s' % name)
  File "<string>", line 1, in ?
AttributeError: 'twisted.im' module has no attribute 'jychat'

I want to thank the error for causing me to notice that epydoc
has an unadorned exec (which is hardly necessary). This would,
not, however, cause the error to go away -- AFAICS it is caused
by jychat failing to import. A fix deep in the bowels of epydoc
would be needed so AttributeError would merely cause a module to be
skipped rather than the whole thing to come crumbling down.





From typo at soniq.net  Fri Sep 20 09:00:38 2002
From: typo at soniq.net (Paul Boehm)
Date: Fri, 20 Sep 2002 17:00:38 +0200
Subject: [Twisted-Python] example for integrating generators with twisted
In-Reply-To: <20020920144244.2362.qmail@green.zadka.com>
References: <20020920144244.2362.qmail@green.zadka.com>
Message-ID: <20020920150038.GA14474@soniq.net>

see example
-------------- next part --------------
#!/usr/bin/python

from __future__ import generators

from twisted.internet import reactor, defer

class DeferredGenerator:
    def __init__(self, arg = None):
        self.next = self._Code().next
        self.callback(arg)
    def callback(self, data):
        self._newdata = data
        try:
            ret = self.next()
            if isinstance(ret, defer.Deferred):
                ret.addCallback(self.callback)
        except StopIteration:
            pass
    def newdata(self):
        return self._newdata
    def _Code(self): # template method, subclass me!
        yield "OK" # Yield non-deferred to indicate end of initialization.

class TestGen(DeferredGenerator):
    def _Code(self):
        yield "OK"

        x = self.newdata()

        defr = defer.Deferred()
        defr.callback(9)
        yield defr

        y = self.newdata()
        print x + y

if __name__ == "__main__":
    gen = TestGen()
    gen.callback(5)
    reactor.run()

From glyph at twistedmatrix.com  Fri Sep 20 10:27:39 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 20 Sep 2002 11:27:39 -0500 (CDT)
Subject: [Twisted-Python] jelly, marmalade, aot, and wacky types
In-Reply-To: <20020920040815.GB2501@ritsuko.xware.cx>
References: <20020920040815.GB2501@ritsuko.xware.cx>
Message-ID: <20020920.112739.101496376.glyph@twistedmatrix.com>


On Fri, 20 Sep 2002 14:08:15 +1000, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> Quick question:
> 
> Even if an object is of an unknown wacky type (say Zope's extension
> class), shouldn't jelly (and friends) check for 
> callable(getattr(obj, '__getstate__, None)) anyway (i.e. treat it like
> an InstanceType and see what happens)?  It looks like this is what
> pickle does.
> 
> -Andrew.

I'm working on support for new-style classes right now.  It's a little trickier
than it sounds, because Pickle is willing to invoke functions from just about
anywhere and I've tried to make the various Twisted serializers, especially
Jelly, not do that.

(Notwithstanding the `eval' currently in marmalade...)

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020920/7a22f73a/attachment.sig>

From alexander.levy at tufts.edu  Fri Sep 20 03:20:41 2002
From: alexander.levy at tufts.edu (Alex Levy)
Date: Fri, 20 Sep 2002 05:20:41 -0400
Subject: [Twisted-Python] Strange DOMTemplate error
Message-ID: <5.1.1.6.0.20020920051645.00b20cd0@coral.tufts.edu>

I have been toying around with DOM Templates, practically using the example 
code off the web page (with a few minor changes), and I found something 
very strange.

I received xml.sax._exceptions.SAXParseException whenever I placed the 
string '&copy;'
inside my template HTML.  This, as it turns out, applied to just about any 
HTML special character.  I tested it with &copy; &nbsp; &foo; and a range 
of others.  It also broke (although with a different error) whenever I 
tried using numeric character codes, like &#153;.

Is this a 'feature', or some strange bug?  Figured I'd mention it here.

--
Alex Levy
WWW: http://mesozoic.geecs.org
Tel: 617.835.0778

"Never let your sense of morals prevent you from doing what is right."
-- Salvor Hardin, Isaac Asimov's _Foundation_





From glyph at twistedmatrix.com  Fri Sep 20 10:38:24 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 20 Sep 2002 11:38:24 -0500 (CDT)
Subject: [Twisted-Python] Re: [Twisted-commits] Element should have hasChildNodes
In-Reply-To: <E17sPpn-0000JX-00@pyramid.twistedmatrix.com>
References: <E17sPpn-0000JX-00@pyramid.twistedmatrix.com>
Message-ID: <20020920.113824.57266300.glyph@twistedmatrix.com>


On Fri, 20 Sep 2002 10:36:47 -0500, moshez CVS <moshez at twistedmatrix.com> wrote:
> Log message:
> Element should have hasChildNodes

Node already had hasChildNodes, which Element was inheriting, and it had a more
correct return value.  Why was this necessary?

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020920/3fb088e1/attachment.sig>

From glyph at twistedmatrix.com  Fri Sep 20 11:51:07 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 20 Sep 2002 12:51:07 -0500 (CDT)
Subject: [Twisted-Python] Strange DOMTemplate error
In-Reply-To: <5.1.1.6.0.20020920051645.00b20cd0@coral.tufts.edu>
References: <5.1.1.6.0.20020920051645.00b20cd0@coral.tufts.edu>
Message-ID: <20020920.125107.75782699.glyph@twistedmatrix.com>


On Fri, 20 Sep 2002 05:20:41 -0400, Alex Levy <alexander.levy at tufts.edu> wrote:
> I have been toying around with DOM Templates, practically using the example 
> code off the web page (with a few minor changes), and I found something 
> very strange.

This should be fixed in the next release of Twisted, as DOMTemplate now uses
Twisted's internal representation of DOM trees, which is considerably more
relaxed about this kind of input.

> I received xml.sax._exceptions.SAXParseException whenever I placed the string
> '&copy;' inside my template HTML.  This, as it turns out, applied to just
> about any HTML special character.  I tested it with &copy; &nbsp; &foo; and a
> range of others.  It also broke (although with a different error) whenever I
> tried using numeric character codes, like &#153;.

"Special characters" in "HTML" are known in XML lingo as "entity references",
and they are hewn cold from the bones of the stillborn deep within the bowels
of satan's lair by the three arch demons.  You may have seen them featured in
the popular video-game adaption of the W3C's standardization process, "Diablo
II".

Moral: try to avoid using them if you want your HTML to be processed by any
"real" XML tools.  As I said, Twisted will handle these more gently in the
future because there's not really any good reason to reject them, but be aware
that you're breaking the standard.

> Is this a 'feature', or some strange bug?  Figured I'd mention it here.

That depends on your personal opinion of "web standards".  Me, I'd say it's a
bug. :-)

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020920/8b134a4f/attachment.sig>

From dp at twistedmatrix.com  Fri Sep 20 12:36:06 2002
From: dp at twistedmatrix.com (Donovan Preston)
Date: Fri, 20 Sep 2002 11:36:06 -0700
Subject: [Twisted-Python] Another example of using generators in Twisted
In-Reply-To: <20020920150038.GA14474@soniq.net>
Message-ID: <D2D73DF2-CCC7-11D6-A32C-000393B3EC2C@twistedmatrix.com>

Here's an example of using generators to make long chains of deferreds 
easier to deal with. Using the function unwrapDeferredGenerator on a 
generator object will cause the generator to be run until it yields 
None. Each time the generator yields a deferred, the function is halted 
and resumed when the Deferred fires. The result of the Deferred is 
available in deferred.result.

What used to be a long chain of callback functions can now be written 
as one generator function, (hopefully) making things easier to read.

Donovan
-------------- next part --------------
A non-text attachment was scrubbed...
Name: yielddeferreds.py
Type: application/applefile
Size: 471 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020920/329e2472/attachment-0004.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: yielddeferreds.py
Type: application/text
Size: 1043 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020920/329e2472/attachment-0005.bin>

From m at moshez.org  Fri Sep 20 13:05:39 2002
From: m at moshez.org (Moshe Zadka)
Date: 20 Sep 2002 19:05:39 -0000
Subject: [Twisted-Python] Re: [Twisted-commits] Element should have hasChildNodes
In-Reply-To: <20020920.113824.57266300.glyph@twistedmatrix.com>
References: <20020920.113824.57266300.glyph@twistedmatrix.com>, <E17sPpn-0000JX-00@pyramid.twistedmatrix.com>
Message-ID: <20020920190539.5206.qmail@green.zadka.com>

On Fri, 20 Sep 2002, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> Node already had hasChildNodes, which Element was inheriting, and it had a more
> correct return value.  Why was this necessary?

Dunno, but it caused epyrun to actually work.
 




From dennis at illusions.com  Sat Sep 21 01:58:52 2002
From: dennis at illusions.com (dennis at illusions.com)
Date: Sat, 21 Sep 2002 00:58:52 -0700 (MST)
Subject: [Twisted-Python] real code examples
Message-ID: <Pine.LNX.4.44.0209210058020.22177-100000@illusions.com>

Anyone,

is there a repository of widget code examples? I have so many questions 
and so little answers...

-- 
---
Dennis Sacks
dennis at illusions.com





From bob at redivi.com  Sat Sep 21 14:59:33 2002
From: bob at redivi.com (Bob Ippolito)
Date: Sat, 21 Sep 2002 16:59:33 -0400
Subject: [Twisted-Python] OS X build issues..
Message-ID: <0780B779-CDA5-11D6-B3A7-0003938210D6@redivi.com>

Just FYI, the C modules don't build on OS X.  Shouldn't be a difficult 
fix, perhaps I'll do a patch later..  not sure if I'll have the time.

-bob

checking for sys/poll.h ...
conftest.c:1: header file 'sys/poll.h' not found
cpp-precomp: warning: errors during smart preprocessing, retrying in 
basic mode
The C reactor is unavailable on this system.
checking for rpc/pmap_clnt.h ...
/usr/include/rpc/pmap_clnt.h:91: undefined type, found `bool_t'
/usr/include/rpc/pmap_clnt.h:91: syntax error, found `int'
/usr/include/rpc/pmap_clnt.h:91: illegal function definition, found `)'
/usr/include/rpc/pmap_clnt.h:92: undefined type, found `bool_t'
/usr/include/rpc/pmap_clnt.h:94: syntax error, found `u_long'
/usr/include/rpc/pmap_clnt.h:94: illegal function definition, found `)'
/usr/include/rpc/pmap_clnt.h:99: syntax error, found `char'
/usr/include/rpc/pmap_clnt.h:99: illegal function definition, found `)'
/usr/include/rpc/pmap_clnt.h:103: undefined type, found `u_short'
/usr/include/rpc/pmap_clnt.h:103: syntax error, found `u_long'
/usr/include/rpc/pmap_clnt.h:103: illegal function definition, found `)'
cpp-precomp: warning: errors during smart preprocessing, retrying in 
basic mode
In file included from conftest.c:2:
/usr/include/rpc/pmap_clnt.h:91: parse error before "pmap_set"
/usr/include/rpc/pmap_clnt.h:91: parse error before "int"
/usr/include/rpc/pmap_clnt.h:92: parse error before "pmap_unset"
/usr/include/rpc/pmap_clnt.h:94: parse error before "u_long"
/usr/include/rpc/pmap_clnt.h:99: parse error before "char"
/usr/include/rpc/pmap_clnt.h:99: parse error before ')' token
/usr/include/rpc/pmap_clnt.h:103: parse error before "pmap_getport"
/usr/include/rpc/pmap_clnt.h:103: parse error before "u_long"
The C reactor is unavailable on this system.
building 'twisted.spread.cBanana' extension
creating build/temp.darwin-6.1-Power Macintosh-2.2
gcc -DNDEBUG -g -O3 -Wall -Wstrict-prototypes -no-cpp-precomp 
-I/usr/include/python2.2 -c twisted/spread/cBanana.c -o 
build/temp.darwin-6.1-Power Macintosh-2.2/cBanana.o
gcc -arch i386 -arch ppc -bundle -flat_namespace -undefined suppress 
build/temp.darwin-6.1-Power Macintosh-2.2/cBanana.o -o 
build/lib.darwin-6.1-Power Macintosh-2.2/twisted/spread/cBanana.so
ld: for architecture i386
ld: warning /usr/lib/bundle1.o cputype (18, architecture ppc) does not 
match cputype (7) for specified -arch flag: i386 (file not loaded)
ld: warning build/temp.darwin-6.1-Power Macintosh-2.2/cBanana.o cputype 
(18, architecture ppc) does not match cputype (7) for specified -arch 
flag: i386 (file not loaded)
ld: warning /usr/lib/gcc/darwin/3.1/libgcc.a archive's cputype (18, 
architecture ppc) does not match cputype (7) for specified -arch flag: 
i386 (can't load from it)
ld: warning /usr/lib/libSystem.dylib cputype (18, architecture ppc) 
does not match cputype (7) for specified -arch flag: i386 (file not 
loaded)
building 'twisted.internet.cReactor' extension
gcc -DNDEBUG -g -O3 -Wall -Wstrict-prototypes -no-cpp-precomp 
-I/usr/include/python2.2 -c twisted/internet/cReactor/cReactor.c -o 
build/temp.darwin-6.1-Power Macintosh-2.2/cReactor.o
In file included from twisted/internet/cReactor/cReactor.c:22:
twisted/internet/cReactor/cReactor.h:23:22: sys/poll.h: No such file or 
directory
twisted/internet/cReactor/cReactor.c: In function 
`iterate_rebuild_pollfd_arrray':
twisted/internet/cReactor/cReactor.c:508: sizeof applied to an 
incomplete type
twisted/internet/cReactor/cReactor.c:541: dereferencing pointer to 
incomplete type
twisted/internet/cReactor/cReactor.c:542: dereferencing pointer to 
incomplete type
twisted/internet/cReactor/cReactor.c:549: dereferencing pointer to 
incomplete type
twisted/internet/cReactor/cReactor.c:549: `POLLIN' undeclared (first 
use in this function)
twisted/internet/cReactor/cReactor.c:549: (Each undeclared identifier 
is reported only once
twisted/internet/cReactor/cReactor.c:549: for each function it appears 
in.)
twisted/internet/cReactor/cReactor.c:558: dereferencing pointer to 
incomplete type
twisted/internet/cReactor/cReactor.c:558: `POLLOUT' undeclared (first 
use in this function)
twisted/internet/cReactor/cReactor.c:562: dereferencing pointer to 
incomplete type
twisted/internet/cReactor/cReactor.c:564: increment of pointer to 
unknown structure
twisted/internet/cReactor/cReactor.c:564: arithmetic on pointer to an 
incomplete type
twisted/internet/cReactor/cReactor.c: In function 
`iterate_process_pollfd_array':
twisted/internet/cReactor/cReactor.c:588: increment of pointer to 
unknown structure
twisted/internet/cReactor/cReactor.c:588: arithmetic on pointer to an 
incomplete type
twisted/internet/cReactor/cReactor.c:591: dereferencing pointer to 
incomplete type
twisted/internet/cReactor/cReactor.c:597: dereferencing pointer to 
incomplete type
twisted/internet/cReactor/cReactor.c:602: dereferencing pointer to 
incomplete type
twisted/internet/cReactor/cReactor.c:602: `POLLIN' undeclared (first 
use in this function)
twisted/internet/cReactor/cReactor.c:607: dereferencing pointer to 
incomplete type
twisted/internet/cReactor/cReactor.c:607: `POLLOUT' undeclared (first 
use in this function)
twisted/internet/cReactor/cReactor.c:612: dereferencing pointer to 
incomplete type
twisted/internet/cReactor/cReactor.c: In function `iterate_internal':
twisted/internet/cReactor/cReactor.c:777: warning: implicit declaration 
of function `poll'
error: command 'gcc' failed with exit status 1




From sean at twistedmatrix.com  Sat Sep 21 15:09:11 2002
From: sean at twistedmatrix.com (Sean Riley)
Date: Sat, 21 Sep 2002 16:09:11 -0500
Subject: [Twisted-Python] Relationship Manager pattern and t.e.row
Message-ID: <HOEEKPCOKELHCNIJNMAGKEOCCGAA.sean@twistedmatrix.com>

Interesting description of a design pattern that seems very similar to
t.e.row: http://www.atug.com/andypatterns/RM.htm. Could be useful as
inspiration for the continuing evolution of t.e.row.

Also, http://skunkweb.sourceforge.net/PyDO/ is python Object-relation
database interface that is similar to t.e.row! Their documentation  could
almost be used by us!



----------------
"If he's so smart, then how come he's dead?", Homer Simspon
Sean Riley
sean at ninjaneering.com




From mattam at netcourrier.com  Sat Sep 21 17:23:43 2002
From: mattam at netcourrier.com (mattam at netcourrier.com)
Date: Sun, 22 Sep 2002 01:23:43 +0200
Subject: [Twisted-Python] [PATCH] Accept and accept-language parsing
Message-ID: <20020921232343.GF493@Mat.Home>

Hi twisters,

	here's a patch for parsing accept and accept-language HTTP headers.
	They are contained in a priority queue which can also be
	retrieved as a list. Perhaps some other methods could be
	convenient, but as it's late I let you advise which. I added a
	parseHeaders() method for Request which is called just after 
	parseCookies() in HTTPChannel.allHeadersReceived.


Bye!

M at t


-------------- next part --------------
--- twisted/python/priorityqueue.py.orig	2002-09-22 00:39:08.000000000 +0200
+++ twisted/python/priorityqueue.py	2002-09-22 00:35:38.000000000 +0200
@@ -0,0 +1,70 @@
+
+# Twisted, the Framework of Your Internet
+# Copyright (C) 2001 Matthew W. Lefkowitz
+#
+# This library is free software; you can redistribute it and/or
+# modify it under the terms of version 2.1 of the GNU Lesser General Public
+# License as published by the Free Software Foundation.
+#
+# This library is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this library; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+
+""" A priority queue. """
+
+class PriorityQueue:
+
+    """
+    Elements are ordered using the comparison function f,
+    which return value is negative if x < y, 0 if x == y
+    and positive if x > y.
+
+    """     
+    
+    def __init__(self, comparison):
+        self.list = []
+        self.cmpf = comparison
+
+    def add_elements(self, priority, elements):
+        """ Add a sequenct of elements at the given priority """
+
+        length = len(self.list)        
+        if length == 0:
+            self.list = [(priority, list(elements))]
+        else:
+            res = self.cmpf(priority, self.list[0][0])
+            if res > 0:
+                self.list = [(priority, list(elements))] + self.list
+            elif res == 0:
+                self.list[0] = (priority, self.list[0][1] + list(elements))
+            else:
+                i = 1
+                while i < length and self.cmpf(priority, self.list[i][0]) < 0:
+                    i += 1
+                if i == length:
+                    self.list.append((priority, list(elements)))
+                elif self.cmpf(self.list[i][0], priority) == 0:
+                    self.list[i] = (priority, self.list[i][1] + list(elements))
+                else: 
+                    # self.list[i][0] < priority
+                    tmp = self.list[i:]
+                    
+                    self.list = self.list[:i] + [(priority, list(elements))]
+                    
+                    if tmp is not None:
+                        self.list = self.list + tmp
+    
+    def add(self, priority, element):
+        self.add_elements(priority, [element])
+        
+    def getlist(self):
+        """ I return the list of elements in decreasing order """
+        res = []
+        for prio, elems in self.list:
+            res += elems
+        return res
--- twisted/protocols/http.py.orig	2002-09-22 00:01:53.000000000 +0200
+++ twisted/protocols/http.py	2002-09-22 00:42:16.000000000 +0200
@@ -36,7 +36,7 @@
 
 # twisted imports
 from twisted.internet import interfaces, reactor, protocol
-from twisted.python import log
+from twisted.python import log, priorityqueue
 
 
 protocol_version = "HTTP/1.1"
@@ -226,7 +226,15 @@
     return rest[:length], rest[length+2:]
 
 
-
+def qualityComparison(x, y):
+    """ Compares quality values (as in accept-language) """
+    if x == y:
+        return 0
+    if float(x) > float(y):
+        return 1
+    else:
+        return -1
+        
 class StringTransport:
     """
     I am a StringIO wrapper that conforms for the transport API. I support
@@ -383,7 +391,31 @@
                     self.received_cookies[k] = v
                 except ValueError:
                     pass
-    
+
+    def _parse_priorities(line):
+        priorities = priorityqueue.PriorityQueue(qualityComparison)
+        i = line.find(';q=0.')
+        if i != -1:
+            while i != -1:
+                j = line.find(',', i)
+                if j == -1:
+                    prio = line[i+3:]
+                else:
+                    prio = line[i+3:j]
+                priorities.add_elements(prio, line[1:i].split(','))
+                line = line[j:]
+                i = line.find(';q=0.')
+        else:
+            priorities.add_elements("1.0", line.split(','))
+        return priorities
+
+    def parseHeaders(self):
+        for header in ["accept, accept-language"]:
+            data = self.getHeader("accept")
+            if data:
+                self.setHeader(header, self._parse_priorities(accept))
+
+        
     def handleContentChunk(self, data):
         """Write a chunk of data."""
         self.content.write(data)
@@ -746,9 +778,10 @@
     def allHeadersReceived(self):
         req = self.requests[-1]
         req.parseCookies()
+        req.parseHeaders()
         self.persistent = self.checkPersistence(req, self.__version)
         req.gotLength(self.length)
-    
+
     def checkPersistence(self, request, version):
         """Check if the channel should close or not."""
         connection = request.getHeader('connection')

From acapnotic at twistedmatrix.com  Sat Sep 21 17:03:26 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 21 Sep 2002 16:03:26 -0700
Subject: [Twisted-Python] CVSToys 0.9.0
Message-ID: <1032649410.14648.185.camel@troglodyte.funhouse>

Ok, due to popular demand, I'm making a release of CVSToys.  Download
the tarball at 

http://twistedmatrix.com/users/acapnotic/wares/code/CVSToys/CVSToys-0.9.0.tar.bz2

homepage is at

http://twistedmatrix.com/users/acapnotic/wares/code/CVSToys/

I'm not making a widespread announcement at this time for several
reasons.

1) There are bugs that need to be fixed before the masses get their
hands on this, or they may kill me.

2) I'd like to see Twisted 1.0 released first, for the sanity of both
myself and the users.  I need to know stuff like "is internet..Process
going to keep changing?" as well as what I should expect from the PB
interface in the 1.0 series.

Share and enjoy,

 - Kevin

-------------- next part --------------
Metadata-Version: 1.0
Name: CVSToys
Version: 0.9.0
Summary: Commit notification and other CVS companions.
Home-page: http://twistedmatrix.com/users/acapnotic/wares/code/CVSToys/
Author: Kevin Turner
Author-email: acapnotic at twistedmatrix.com
License: BSD
Description: CVSToys is a collection of companion tools for the Concurrent Versions
        System, better known as CVS.  The biggest best and only toy we've got
        is Fresh CVS, a commit monitoring daemon which can keep a mirror of
        the repository or checked-out working copy up to date, and send out
        notifications by e-mail, on the web as HTML or RSS, or to a
        twisted.words chat service (bridgeable to IRC).
        
Platform: Linux
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20020921/2ec58c12/attachment.sig>

From radix at twistedmatrix.com  Sun Sep 22 01:34:40 2002
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 22 Sep 2002 03:34:40 -0400
Subject: [Twisted-Python] Twisted 0.99.1rc1 and release-twisted
Message-ID: <20020922073440.GA30662@radii>

Hi all, Twisted 0.99.1rc1 is now available on the website. But this
message is mostly about the release process. :)

Here's the process I went through to make the latest 0.99.2rc1
release.  At the end I have some notes on new features I plan on
implementing, eventually.

cd ~/Projects/Twisted
cvs up
cd ~/tmp
rm -rf *
~/Projects/Twisted/admin/release-twisted --oldver 0.99.2alpha3 -v 0.99.2rc1 --release=/twisted/Releases --checkout --upver --tag --exp --dist --docs --balls --rel --deb --debi
#fix a couple of bugs in r-t, re-run a couple of times
sudo vim /etc/apt/sources.list #and uncomment moshez' snapshot line
sudo apt-get update
sudo apt-get upgrade
cd /var/www
sudo 'sh -c kill `cat twistd.pid`'
sudo ./start-twisted.sh web-shutdown.tap
sudo tail twistd.log

edit WebSite/twistedmatrix.com/index: s/0.99.2alpha3/0.99.2rc1/
edit products/download.html, change from "alpha" to "RC", and change all 
     alpha2s to rc1s
edit news.html, add release announcement.
cvs commit 'dat shit

on pyr: cd /var/www/WebSite/twistedmatrix.com

#note, I didn't have to `cvs update' here, some kind soul made that
#automatically happen on commit

~/Projects/Twisted/admin/generate-domdocs --docsdir . --template template.tpl -e None 

#oops! missed an `alpha2' in download.html. :P fixed that and re-ran 
#generate-domdocs

Test that the domtemplate document still works and that documentation
API-ref links still work

That seems to be it. Mind you this didn't include the stuff about
actually updating the API refs and whatnot on the website, that only
happens in Final releases.

So, now for the ideas, in ascending order of ease-of-implementation

1) have r-t update the QOTR, add a ChangeLog entry for releasing, and
add a news entry on the website

2) make the website a web-app, so I (or even r-t) don't have to do
anything at all to "deploy" a new release; it'll just detect
it. (extra cookie if generate-domdocs is made into a generic "static
DOMTemplate Processor" to accomplish this; then our website can still
be static files)

3) give release-twisted a web interface.

4) Make a PB application for running unit tests, and have various
developers run this on their workstations, hopefully across many
various platforms, and have r-t check and make sure that they all run
smoothly before releasing.

-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/radix.twistd/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020922/64778367/attachment.sig>

From twisted at moshez.org  Sun Sep 22 02:28:18 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 22 Sep 2002 08:28:18 -0000
Subject: [Twisted-Python] Twisted 0.99.1rc1 and release-twisted
In-Reply-To: <20020922073440.GA30662@radii>
References: <20020922073440.GA30662@radii>
Message-ID: <20020922082818.28807.qmail@green.zadka.com>

On Sun, 22 Sep 2002, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> 1) have r-t update the QOTR

That's needed for final releases only anyway...

5) have r-t auto-upload to sf.net and set up us the release




From mattam at netcourrier.com  Sun Sep 22 06:46:45 2002
From: mattam at netcourrier.com (mattam at netcourrier.com)
Date: Sun, 22 Sep 2002 14:46:45 +0200
Subject: [Twisted-Python] [PATCH] Accept and accept-language parsing
In-Reply-To: <20020921232343.GF493@Mat.Home>
References: <20020921232343.GF493@Mat.Home>
Message-ID: <20020922124645.GH493@Mat.Home>

On Sun, Sep 22, 2002 at 01:23:43AM +0200, mattam at netcourrier.com wrote: 
> Hi twisters,
> 
> 	here's a patch for parsing accept and accept-language HTTP headers.
> 	They are contained in a priority queue which can also be
> 	retrieved as a list. Perhaps some other methods could be
> 	convenient, but as it's late I let you advise which. I added a
> 	parseHeaders() method for Request which is called just after 
> 	parseCookies() in HTTPChannel.allHeadersReceived.
> 
> 
> Bye!
> 

Here's a corriged patch, ready for inclusion (diff with http.py v1.41,
-p0).

--
M at t 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: accept.patch.gz
Type: application/x-gunzip
Size: 1970 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020922/c7bcff7c/attachment-0002.bin>

From glyph at twistedmatrix.com  Sun Sep 22 06:38:31 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 22 Sep 2002 07:38:31 -0500 (CDT)
Subject: [Twisted-Python] [PATCH] Accept and accept-language parsing
In-Reply-To: <20020922124645.GH493@Mat.Home>
References: <20020921232343.GF493@Mat.Home>
	<20020922124645.GH493@Mat.Home>
Message-ID: <20020922.073831.133432554.glyph@twistedmatrix.com>

On Sun, 22 Sep 2002 14:46:45 +0200, <mattam at netcourrier.com> wrote:
> On Sun, Sep 22, 2002 at 01:23:43AM +0200, mattam at netcourrier.com wrote: 

> > 	here's a patch for parsing accept and accept-language HTTP headers.

> Here's a corriged patch, ready for inclusion (diff with http.py v1.41,
> -p0).

Could you please provide some unit tests in this patch, both for the parsing of
accept-language and the priority queue itself?  That would provide some basic
documentation of the API as well.  Thanks!

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020922/5c841bdf/attachment.sig>

From twisted at moshez.org  Sun Sep 22 09:48:38 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 22 Sep 2002 15:48:38 -0000
Subject: [Twisted-Python] twisted/internet/app.py
Message-ID: <20020922154838.32763.qmail@green.zadka.com>

I recommend to keep using 1.61 for 0.99.2final rather than 1.62.
The change does not solve any bugs, as far as I can see, and this would
let us avoid an rc2





From acapnotic at twistedmatrix.com  Sun Sep 22 13:41:46 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 22 Sep 2002 12:41:46 -0700
Subject: [Twisted-Python] web.server.Request.process except cred.util.Unauthorized
Message-ID: <1032723708.14633.199.camel@troglodyte.funhouse>

A quick grep through the Twisted source doesn't show any web-related
places this is likely to get raised. It does reveal the fact that there
are two cred Unauthorized exception classes, one defined in cred.util
and the other in cred.error.  Commenting out the whole 'except
util.Unauthorized' block in server.Request.process doesn't cause any
tests to fail.

So I'd like to know:

When are we expecting util.Unauthorized to get raised?  From the
site.getResourceFor(req) call, or the resrc.render(), both, or neither? 

Can we get rid of one of the two cred Unauthorized exceptions?

Regards,

 - Kevin




From exarkun at meson.dyndns.org  Sun Sep 22 17:58:06 2002
From: exarkun at meson.dyndns.org (Jp Calderone)
Date: Sun, 22 Sep 2002 19:58:06 -0400
Subject: [Twisted-Python] twisted/internet/app.py
In-Reply-To: <20020922154838.32763.qmail@green.zadka.com>
References: <20020922154838.32763.qmail@green.zadka.com>
Message-ID: <20020922235806.GA18429@meson.dyndns.org>

On Sun, Sep 22, 2002 at 03:48:38PM -0000, Moshe Zadka wrote:
> I recommend to keep using 1.61 for 0.99.2final rather than 1.62.
> The change does not solve any bugs, as far as I can see, and this would
> let us avoid an rc2
> 

  AES.block_size is 16 (RC5 (the original cipher the code used) used a
block_size of 8), so the change solves the bug of encrypt() not working 7
times out of 8.  I don't think anyone other than myself is actually using
encryption support, but it'd probably be bad to release it broken anyway ;)

  Jp

--
 7:00pm up 124 days, 19:54, 3 users, load average: 0.25, 0.24, 0.19
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 237 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020922/9eda49ec/attachment.sig>

From jml at mumak.net  Tue Sep 17 17:24:34 2002
From: jml at mumak.net (Jonathan Lange)
Date: 18 Sep 2002 09:24:34 +1000
Subject: [Twisted-Python] row.html howto XHTML compliance [PATCH]
Message-ID: <1032305079.5371.3.camel@sting>

G'day all,

I noticed that admin/generate-domdocs failed on row.html, so I patched
it to be a well-formed XHTML document (and to have lowercase tags ;)

Patch below!

Cheers,
jml

Index: doc/howto/row.html
===================================================================
RCS file: /cvs/Twisted/doc/howto/row.html,v
retrieving revision 1.9
diff -r1.9 row.html
1,5c1,9
< <HTML>
< <HEAD>
<   <TITLE>Twisted Enterprise Row Objects</TITLE>
< </HEAD>
< <BODY>
---
> <?xml version="1.0"?>
> <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
>     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
> 
> <html xmlns="http://www.w3.org/1999/xhtml">
> <head>
>   <title>Twisted Enterprise Row Objects</title>
> </head>
> <body>
7c11
< <H1>Twisted Enterprise Row Objects</H1>
---
> <h1>Twisted Enterprise Row Objects</h1>
9c13
< <P>The <CODE>twisted.enterprise.row</CODE> module is a method
---
> <p>The <code>twisted.enterprise.row</code> module is a method
11c15
< tables. It has two components: the <CODE>RowObject</CODE> class
---
> tables. It has two components: the <code>RowObject</code> class
13c17
< code interacts with, and the <CODE>DBReflector</CODE> which generates
---
> code interacts with, and the <code>DBReflector</code> which generates
15c19
< deletes against the database.</P>
---
> deletes against the database.</p>
17c21
< <P>The row module is intended for applications such as on-line
---
> <p>The row module is intended for applications such as on-line
24c28
< to an existing python application.</P>
---
> to an existing python application.</p>
26c30
< <P>Currently, the row module requires the use of PostgreSQL.</P>
---
> <p>Currently, the row module requires the use of PostgreSQL.</p>
28c32
< <H2>Class Definitions</H2>
---
> <h2>Class Definitions</h2>
30,31c34,35
< <P>To interface to relational database tables, the developer must
< create a class derived from the
<CODE>twisted.enterprise.row.RowObject</CODE>
---
> <p>To interface to relational database tables, the developer must
> create a class derived from the
<code>twisted.enterprise.row.RowObject</code>
35c39
< are:</P>
---
> are:</p>
37,42c41,46
< <UL>
<   <LI>rowColumns - list of the columns in the table with the correct
<   case
<   <LI>rowKeyColumns - list of key columns in form: [(columnName,
<   typeName)]
<   <LI>rowTableName - the name of the database table
---
> <ul>
>   <li>rowColumns - list of the columns in the table with the correct
>   case</li>
>   <li>rowKeyColumns - list of key columns in form: [(columnName,
>   typeName)]</li>
>   <li>rowTableName - the name of the database table</li>
45c49
< <P>There are also two optional class attributes that can be
specified:</P>
---
> <p>There are also two optional class attributes that can be
specified:</p>
47,48c51,52
< <UL>
<   <LI>rowForeignKeys - list of foreign keys to other database tables
---
> <ul>
>   <li>rowForeignKeys - list of foreign keys to other database tables
50,53c54,57
<   autoLoad]
<   <LI>rowFactoryMethod - a method that creates instances of this
<   class
< </UL>
---
>   autoLoad]</li>
>   <li>rowFactoryMethod - a method that creates instances of this
>   class</li>
> </ul>
55c59
< <P>For example:</P>
---
> <p>For example:</p>
57c61
< <PRE>
---
> <pre class="python">
62c66,67
<     rowFactoryMethod = [myRowFactory]</PRE>
---
>     rowFactoryMethod = [myRowFactory]
> </pre>
64,65c69,70
< <P>The items in the rowColumns list will become data members of
< classes of this type when they are created by the DBReflector.</P>
---
> <p>The items in the rowColumns list will become data members of
> classes of this type when they are created by the DBReflector.</p>
67c72
< <H2>Initialization</H2>
---
> <h2>Initialization</h2>
69c74
< <P>The initialization phase builds the SQL for the database
interactions.
---
> <p>The initialization phase builds the SQL for the database
interactions.
73c78
< are passed to the DBReflector when it is created.</P>
---
> are passed to the DBReflector when it is created.</p>
75c80
< <P>An example class list for the RoomRow class we specified above:</P>
---
> <p>An example class list for the RoomRow class we specified above:</p>
77c82
< <PRE>
---
> <pre class="python">
82c87,88
< reflector = row.DBReflector( dbpool, [RoomRow], runTests )</PRE>
---
> reflector = row.DBReflector( dbpool, [RoomRow], runTests )
> </pre>
84c90
< <H2>Creating Row Objects</H2>
---
> <h2>Creating Row Objects</h2>
86,87c92,93
< <P>There are two methods of creating RowObjects - loading from
< the database, and creating a new instance ready to be inserted.</P>
---
> <p>There are two methods of creating RowObjects - loading from
> the database, and creating a new instance ready to be inserted.</p>
89c95
< <P>To load rows from the database and create RowObject instances
---
> <p>To load rows from the database and create RowObject instances
94c100
< example:</P>
---
> example:</p>
96c102
< <PRE>
---
> <pre class="python">
101c107,108
< refector.loadObjectsFrom(&quot;testrooms&quot;,
whereClause=[(&quot;id&quot;, reflector.EQUAL,
5)]).addCallback(gotRooms)</PRE>
---
> refector.loadObjectsFrom(&quot;testrooms&quot;,
whereClause=[(&quot;id&quot;, reflector.EQUAL,
5)]).addCallback(gotRooms)
> </pre>
103c110
< <P>For more advanced RowObject construction, loadObjectsFrom may
---
> <p>For more advanced RowObject construction, loadObjectsFrom may
110c117
< before exposing the data to user code. An example factory method:</P>
---
> before exposing the data to user code. An example factory method:</p>
112c119
< <PRE>
---
> <pre class="python">
116c123
<     return newRoom</PRE>
---
>     return newRoom</pre>
118c125
< <P>The last method of creating a row object is for new instances
---
> <p>The last method of creating a row object is for new instances
122c129
< method of the DBReflector. For example:</P>
---
> method of the DBReflector. For example:</p>
124c131
< <PRE>
---
> <pre class="python">
134c141,142
<     reflector.insertRow(newRoom).addCallback(onInsert)</PRE>
---
>     reflector.insertRow(newRoom).addCallback(onInsert)
> </pre>
136c144
< <P>This will insert a new row into the database table for this
---
> <p>This will insert a new row into the database table for this
141c149
< from being changed by mistake.</P>
---
> from being changed by mistake.</p>
143d150
< <P>&nbsp;</P>
145c152
< <H2>Relationships Between Tables</H2>
---
> <h2>Relationships Between Tables</h2>
147,154c154,162
< <P>Specifying a foreign key for a RowClass creates a relationship
< between database tables. When <I>loadObjectsFrom</I> is called for a
< table, it will automatically load all the children rows for the rows
< from the specified table. The child rows will be put into a list
< member variable of the rowObject instance with the name "childRows" or
< if a <i>containerMethod</i> is specified for the foreign key
< relationship, that method will be called on the parent row object for
< each row that is being added to it as a child.</P>
---
> <p>Specifying a foreign key for a RowClass creates a relationship
> between database tables. When <code
> class="python">loadObjectsFrom</code> is called for a table, it will
> automatically load all the children rows for the rows from the
specified
> table. The child rows will be put into a list member variable of the
> rowObject instance with the name "childRows" or if a
> <i>containerMethod</i> is specified for the foreign key relationship,
> that method will be called on the parent row object for each row that
is
> being added to it as a child.</p>
156c164
< <P>The <i>autoLoad</i> member of the foreign key definition is a flag
---
> <p>The <i>autoLoad</i> member of the foreign key definition is a flag
158c166
< relationship when a parent row is loaded.
---
> relationship when a parent row is loaded.</p>
160c168
< <H2>Duplicate Row Objects</H2>
---
> <h2>Duplicate Row Objects</h2>
162c170
< <P>If a reflector tries to load an instance of a rowObject that
---
> <p>If a reflector tries to load an instance of a rowObject that
166c174
< unique keys for this purpose.</P>
---
> unique keys for this purpose.</p>
168c176
< <H2>Updating Row Objects</H2>
---
> <h2>Updating Row Objects</h2>
170c178
< <P>RowObjects have a &quot;dirty&quot; member attribute that is
---
> <p>RowObjects have a &quot;dirty&quot; member attribute that is
176c184
< (be sure to call the base class setDirty though!).</P>
---
> (be sure to call the base class setDirty though!).</p>
178c186
< <P>When it is determined that a RowObject instance is dirty and
---
> <p>When it is determined that a RowObject instance is dirty and
180c188
< to the &quot;updateRow&quot; method of the DBReflector. For
example:</P>
---
> to the &quot;updateRow&quot; method of the DBReflector. For
example:</p>
182,183c190,192
< <PRE>
<     reflector.updateRow(room).addCallback(onUpdated)</PRE>
---
> <pre class="python">
> reflector.updateRow(room).addCallback(onUpdated)\
> </pre>
185c194
< <P>For more complex behavior, the reflector can generate the SQL
---
> <p>For more complex behavior, the reflector can generate the SQL
187c196
< for batching up multiple updates into single requests. For
example:</P>
---
> for batching up multiple updates into single requests. For
example:</p>
189,190c198,200
< <PRE>
<     updateSQL = reflector.updateRowSQL(room)</PRE>
---
> <pre class="python">
> updateSQL = reflector.updateRowSQL(room)\
> </pre>
192c202
< <H2>Deleting Row Objects</H2>
---
> <h2>Deleting Row Objects</h2>
194c204
< <P>To delete a row from a database pass the RowObject instance
---
> <p>To delete a row from a database pass the RowObject instance
196,197c206,207
< Deleting the python Rowobject instance does <EM>not</EM> automatically
< delete the row from the database. For example:</P>
---
> Deleting the python Rowobject instance does <em>not</em> automatically
> delete the row from the database. For example:</p>
199,200c209,211
< <PRE>
<     reflector.deleteRow(room)</PRE>
---
> <pre class="python">
> reflector.deleteRow(room)
> </pre>
202,203c213,214
< </BODY>
< </HTML>
---
> </body>
> </html>






From jml at mumak.net  Tue Sep 17 17:37:17 2002
From: jml at mumak.net (Jonathan Lange)
Date: 18 Sep 2002 09:37:17 +1000
Subject: [Twisted-Python] row.html howto XHTML compliance [PATCH]
In-Reply-To: <1032305079.5371.3.camel@sting>
References: <1032305079.5371.3.camel@sting>
Message-ID: <1032305839.5642.5.camel@sting>

On Wed, 2002-09-18 at 09:24, Jonathan Lange wrote:
> G'day all,
> 
> I noticed that admin/generate-domdocs failed on row.html, so I patched
> it to be a well-formed XHTML document (and to have lowercase tags ;)
> 
> Patch below!
> 

Was asked by spiv to resend this as a unidiff.
Here it is:

Index: doc/howto/row.html
===================================================================
RCS file: /cvs/Twisted/doc/howto/row.html,v
retrieving revision 1.9
diff -u -r1.9 row.html
--- doc/howto/row.html	23 Sep 2002 00:21:53 -0000	1.9
+++ doc/howto/row.html	23 Sep 2002 11:26:03 -0000
@@ -1,127 +1,134 @@
-<HTML>
-<HEAD>
-  <TITLE>Twisted Enterprise Row Objects</TITLE>
-</HEAD>
-<BODY>
+<?xml version="1.0"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
+    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head>
+  <title>Twisted Enterprise Row Objects</title>
+</head>
+<body>
 
-<H1>Twisted Enterprise Row Objects</H1>
+<h1>Twisted Enterprise Row Objects</h1>
 
-<P>The <CODE>twisted.enterprise.row</CODE> module is a method
+<p>The <code>twisted.enterprise.row</code> module is a method
 of interfacing simple python objects with rows in relational database
-tables. It has two components: the <CODE>RowObject</CODE> class
+tables. It has two components: the <code>RowObject</code> class
 which developers sub-class for each relational table that their
-code interacts with, and the <CODE>DBReflector</CODE> which generates
+code interacts with, and the <code>DBReflector</code> which generates
 and contains the SQL to perform updates, inserts, queries and
-deletes against the database.</P>
+deletes against the database.</p>
 
-<P>The row module is intended for applications such as on-line
+<p>The row module is intended for applications such as on-line
 games, and web-site that require a back-end database interface.
 It is not a full functioned object-relational mapper for python
 - it deals best with simple data types structured in ways that
 can be easily represented in a relational database. It is well
 suited to building a python interface to an existing relational
 database, and slightly less suited to added database persistance
-to an existing python application.</P>
+to an existing python application.</p>
 
-<P>Currently, the row module requires the use of PostgreSQL.</P>
+<p>Currently, the row module requires the use of PostgreSQL.</p>
 
-<H2>Class Definitions</H2>
+<h2>Class Definitions</h2>
 
-<P>To interface to relational database tables, the developer must
-create a class derived from the
<CODE>twisted.enterprise.row.RowObject</CODE>
+<p>To interface to relational database tables, the developer must
+create a class derived from the
<code>twisted.enterprise.row.RowObject</code>
 class for each table. These derived classes must define a number
 of class attributes which contains information about the database
 table that class corresponds to. The required class attributes
-are:</P>
+are:</p>
 
-<UL>
-  <LI>rowColumns - list of the columns in the table with the correct
-  case
-  <LI>rowKeyColumns - list of key columns in form: [(columnName,
-  typeName)]
-  <LI>rowTableName - the name of the database table
+<ul>
+  <li>rowColumns - list of the columns in the table with the correct
+  case</li>
+  <li>rowKeyColumns - list of key columns in form: [(columnName,
+  typeName)]</li>
+  <li>rowTableName - the name of the database table</li>
 </UL>
 
-<P>There are also two optional class attributes that can be
specified:</P>
+<p>There are also two optional class attributes that can be
specified:</p>
 
-<UL>
-  <LI>rowForeignKeys - list of foreign keys to other database tables
+<ul>
+  <li>rowForeignKeys - list of foreign keys to other database tables
   in the form: [(tableName, [(columnName, columnType)],
containerMethodName,
-  autoLoad]
-  <LI>rowFactoryMethod - a method that creates instances of this
-  class
-</UL>
+  autoLoad]</li>
+  <li>rowFactoryMethod - a method that creates instances of this
+  class</li>
+</ul>
 
-<P>For example:</P>
+<p>For example:</p>
 
-<PRE>
+<pre class="python">
 class RoomRow(row.RowObject):
     rowColumns       =
[&quot;roomId&quot;,&quot;town_id&quot;,&quot;name&quot;,&quot;owner&quot;,&quot;posx&quot;,&quot;posy&quot;,&quot;width&quot;,&quot;height&quot;]
     rowKeyColumns    = [(&quot;id&quot;, &quot;int4&quot;)]
     rowTableName     = &quot;testrooms&quot;
-    rowFactoryMethod = [myRowFactory]</PRE>
+    rowFactoryMethod = [myRowFactory]
+</pre>
 
-<P>The items in the rowColumns list will become data members of
-classes of this type when they are created by the DBReflector.</P>
+<p>The items in the rowColumns list will become data members of
+classes of this type when they are created by the DBReflector.</p>
 
-<H2>Initialization</H2>
+<h2>Initialization</h2>
 
-<P>The initialization phase builds the SQL for the database
interactions.
+<p>The initialization phase builds the SQL for the database
interactions.
 It uses the system catalogs of the database to do this, but requires
 some basic information to get started. The class attributes of
 the classes derived from RowClass are used for this. Those clases
-are passed to the DBReflector when it is created.</P>
+are passed to the DBReflector when it is created.</p>
 
-<P>An example class list for the RoomRow class we specified above:</P>
+<p>An example class list for the RoomRow class we specified above:</p>
 
-<PRE>
+<pre class="python">
 def runTests(result):
     print &quot;Done initializing&quot;
 
 dbpool = adbapi.ConnectionPool(&quot;pyPgSQL.PgSQL&quot;)
-reflector = row.DBReflector( dbpool, [RoomRow], runTests )</PRE>
+reflector = row.DBReflector( dbpool, [RoomRow], runTests )
+</pre>
 
-<H2>Creating Row Objects</H2>
+<h2>Creating Row Objects</h2>
 
-<P>There are two methods of creating RowObjects - loading from
-the database, and creating a new instance ready to be inserted.</P>
+<p>There are two methods of creating RowObjects - loading from
+the database, and creating a new instance ready to be inserted.</p>
 
-<P>To load rows from the database and create RowObject instances
+<p>To load rows from the database and create RowObject instances
 for each of the rows, use the loadObjectsFrom method of the Reflector.
 This takes a tableName, an optional &quot;user data&quot; parameter,
 and an optional &quot;where clause&quot;. The where clause may
 be omitted which will retrieve all the rows from the table. For
-example:</P>
+example:</p>
 
-<PRE>
+<pre class="python">
 def gotRooms(rooms):
     for room in rooms:
         print &quot;Got room:&quot;, room.id
 
-refector.loadObjectsFrom(&quot;testrooms&quot;,
whereClause=[(&quot;id&quot;, reflector.EQUAL,
5)]).addCallback(gotRooms)</PRE>
+refector.loadObjectsFrom(&quot;testrooms&quot;,
whereClause=[(&quot;id&quot;, reflector.EQUAL,
5)]).addCallback(gotRooms)
+</pre>
 
-<P>For more advanced RowObject construction, loadObjectsFrom may
+<p>For more advanced RowObject construction, loadObjectsFrom may
 use a factoryMethod that was specified as a class attribute for
 the RowClass derived class. This method will be called for each
 of the rows with the class object, the userData parameter, and
 a dictionary of data from the database keyed by column name. This
 factory method should return a fully populated RowObject instance
 and may be used to do pre-processing, lookups, and data transformations
-before exposing the data to user code. An example factory method:</P>
+before exposing the data to user code. An example factory method:</p>
 
-<PRE>
+<pre class="python">
 def testRoomFactory(roomClass, userData, kw):
     newRoom = roomClass(userData)
     newRoom.__dict__.update(kw)
-    return newRoom</PRE>
+    return newRoom</pre>
 
-<P>The last method of creating a row object is for new instances
+<p>The last method of creating a row object is for new instances
 that do not already exist in the database table. In this case,
 create a new instance and assign its primary key attributes and
 all of its member data attributes, then pass it to the
&quot;insertRow&quot;
-method of the DBReflector. For example:</P>
+method of the DBReflector. For example:</p>
 
-<PRE>
+<pre class="python">
     newRoom = RoomRow()
     newRoom.assignKeyAttr(&quot;roomId&quot;, 11)
     newRoom.town_id = 20
@@ -131,73 +138,77 @@
     newRoom.posy = 100
     newRoom.width = 15
     newRoom.height = 20
-    reflector.insertRow(newRoom).addCallback(onInsert)</PRE>
+    reflector.insertRow(newRoom).addCallback(onInsert)
+</pre>
 
-<P>This will insert a new row into the database table for this
+<p>This will insert a new row into the database table for this
 new RowObject instance. Note that the &quot;assignKeyAttr&quot;
 method must be used to set primary key attributes - regular attribute
 assignment of a primary key attribute of a rowObject will raise
 an exception. This prevents the database identity of RowObject
-from being changed by mistake.</P>
+from being changed by mistake.</p>
 
-<P>&nbsp;</P>
 
-<H2>Relationships Between Tables</H2>
+<h2>Relationships Between Tables</h2>
 
-<P>Specifying a foreign key for a RowClass creates a relationship
-between database tables. When <I>loadObjectsFrom</I> is called for a
-table, it will automatically load all the children rows for the rows
-from the specified table. The child rows will be put into a list
-member variable of the rowObject instance with the name "childRows" or
-if a <i>containerMethod</i> is specified for the foreign key
-relationship, that method will be called on the parent row object for
-each row that is being added to it as a child.</P>
+<p>Specifying a foreign key for a RowClass creates a relationship
+between database tables. When <code
+class="python">loadObjectsFrom</code> is called for a table, it will
+automatically load all the children rows for the rows from the
specified
+table. The child rows will be put into a list member variable of the
+rowObject instance with the name "childRows" or if a
+<i>containerMethod</i> is specified for the foreign key relationship,
+that method will be called on the parent row object for each row that
is
+being added to it as a child.</p>
 
-<P>The <i>autoLoad</i> member of the foreign key definition is a flag
+<p>The <i>autoLoad</i> member of the foreign key definition is a flag
 that specifies whether child rows should be auto-loaded for that
-relationship when a parent row is loaded.
+relationship when a parent row is loaded.</p>
 
-<H2>Duplicate Row Objects</H2>
+<h2>Duplicate Row Objects</h2>
 
-<P>If a reflector tries to load an instance of a rowObject that
+<p>If a reflector tries to load an instance of a rowObject that
 is already loaded, it will return a reference to the existing
 rowObject rather than creating a new instance. The reflector maintains
 a cache of weak references to all loaded row objects by their
-unique keys for this purpose.</P>
+unique keys for this purpose.</p>
 
-<H2>Updating Row Objects</H2>
+<h2>Updating Row Objects</h2>
 
-<P>RowObjects have a &quot;dirty&quot; member attribute that is
+<p>RowObjects have a &quot;dirty&quot; member attribute that is
 set to 1 when any of the member attributes of the instance that
 map to database columns are changed. This dirty flag can be used
 to tell when RowObjects need to be updated back to the database.
 In addition, the &quot;setDirty&quot; method can be overridden
 to provide more complex automated handling such as dirty lists
-(be sure to call the base class setDirty though!).</P>
+(be sure to call the base class setDirty though!).</p>
 
-<P>When it is determined that a RowObject instance is dirty and
+<p>When it is determined that a RowObject instance is dirty and
 need to have its state updated into the database, pass that object
-to the &quot;updateRow&quot; method of the DBReflector. For
example:</P>
+to the &quot;updateRow&quot; method of the DBReflector. For
example:</p>
 
-<PRE>
-    reflector.updateRow(room).addCallback(onUpdated)</PRE>
+<pre class="python">
+reflector.updateRow(room).addCallback(onUpdated)\
+</pre>
 
-<P>For more complex behavior, the reflector can generate the SQL
+<p>For more complex behavior, the reflector can generate the SQL
 for the update but not perform the update. This can be useful
-for batching up multiple updates into single requests. For example:</P>
+for batching up multiple updates into single requests. For example:</p>
 
-<PRE>
-    updateSQL = reflector.updateRowSQL(room)</PRE>
+<pre class="python">
+updateSQL = reflector.updateRowSQL(room)\
+</pre>
 
-<H2>Deleting Row Objects</H2>
+<h2>Deleting Row Objects</h2>
 
-<P>To delete a row from a database pass the RowObject instance
+<p>To delete a row from a database pass the RowObject instance
 for that row to the DBReflector &quot;deleteRow&quot; method.
-Deleting the python Rowobject instance does <EM>not</EM> automatically
-delete the row from the database. For example:</P>
+Deleting the python Rowobject instance does <em>not</em> automatically
+delete the row from the database. For example:</p>
 
-<PRE>
-    reflector.deleteRow(room)</PRE>
+<pre class="python">
+reflector.deleteRow(room)
+</pre>
 
-</BODY>
-</HTML>
+</body>
+</html>








From bruce at cubik.org  Mon Sep 23 09:52:53 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Mon, 23 Sep 2002 09:52:53 -0600
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley consequence of non running
 of unit tests
References: <E17tVMn-00026x-00@pyramid.twistedmatrix.com>
Message-ID: <3D8F38D5.2060202@cubik.org>

Why don't we do similar for not even putting in basic doc comments when 
new API is added?

  - Bruce

moshez CVS wrote:
> Modified files:
> Twisted/doc/howto/coding-standard.html 1.10 1.11
> 
> Log message:
> Document the likley consequence of non running of unit tests
> 
> 
> ViewCVS links:
> http://twistedmatrix.com/users/jh.twistd/viewcvs/cgi/viewcvs.cgi/doc/howto/coding-standard.html.diff?r1=text&tr1=1.10&r2=text&tr2=1.11&cvsroot=Twisted
> 
> Index: Twisted/doc/howto/coding-standard.html
> diff -u Twisted/doc/howto/coding-standard.html:1.10 Twisted/doc/howto/coding-standard.html:1.11
> --- Twisted/doc/howto/coding-standard.html:1.10	Sat Sep 21 03:04:30 2002
> +++ Twisted/doc/howto/coding-standard.html	Mon Sep 23 08:43:17 2002
> @@ -45,8 +45,8 @@
>  unfortunate and unavoidable.  The acceptance tests are highly nonportable and
>  sometimes a pain to run, so this is pardonable.  Code which breaks the unit
>  tests in a way that you could have prevented by running them yourself, however,
> -may be grounds for anything from merciless taunting to revocation of cvs commit
> -privileges.</p>
> +may be grounds for anything from merciless taunting through revertion of
> +the breakage to revocation of cvs commit privileges.</p>




From boyd at strakt.com  Mon Sep 23 09:57:04 2002
From: boyd at strakt.com (Boyd Roberts)
Date: Mon, 23 Sep 2002 17:57:04 +0200
Subject: [Twisted-Python] Exceptions across connections
Message-ID: <3D8F39D0.3040105@strakt.com>

I'm not sure where to start looking for this (or if it's even a good idea)
but I was wondering about passing exceptions from servers to clients,
say in the case of an error, the error is returned as an exception.

Has anyone considered this?





From joeh at dai.ed.ac.uk  Mon Sep 23 10:24:29 2002
From: joeh at dai.ed.ac.uk (Joe Halliwell)
Date: Mon, 23 Sep 2002 17:24:29 +0100
Subject: [Twisted-Python] t.p.usage patch
In-Reply-To: <3D8F39D0.3040105@strakt.com>
References: <3D8F39D0.3040105@strakt.com>
Message-ID: <200209231724.30126.joeh@dai.ed.ac.uk>

Hi,

Quick patch for t.p.usage to (self-)document the builtin "--help" flag.

Cheers,
Joe

*** usage.py    Mon Sep 23 17:12:53 2002
--- usage.py.patched    Mon Sep 23 17:20:35 2002
*************** class Options(UserDict.UserDict):
*** 149,154 ****
--- 149,155 ----
              raise AttributeError("%s instance has no attribute '%s'" % 
(self.__class__, attr))

      def opt_help(self):
+         """Display this help and exit."""
          print self.__str__()
          sys.exit(0)





From twisted at itamarst.org  Mon Sep 23 10:57:58 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 23 Sep 2002 12:57:58 -0400
Subject: [Twisted-Python] Exceptions across connections
References: <3D8F39D0.3040105@strakt.com>
Message-ID: <3D8F4816.5070600@itamarst.org>

Boyd Roberts wrote:

> I'm not sure where to start looking for this (or if it's even a good idea)
> but I was wondering about passing exceptions from servers to clients,
> say in the case of an error, the error is returned as an exception.

Persective Broker's Failure support does exactly that. Should even work 
cross-language, though I have yet to implement Failures for PB Java.

See twisted.python.failure - a wrapper for exceptions that makes them usable 
in a callback-oriented context (e.g. Deferreds), and the examples in 
twisted.test.test_pbfailure.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
Available for Python, Twisted, Zope and Java consulting




From twisted at moshez.org  Mon Sep 23 11:07:51 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 23 Sep 2002 17:07:51 -0000
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley consequence of non running
 of unit tests
In-Reply-To: <3D8F38D5.2060202@cubik.org>
References: <3D8F38D5.2060202@cubik.org>, <E17tVMn-00026x-00@pyramid.twistedmatrix.com>
Message-ID: <20020923170751.21252.qmail@green.zadka.com>

On Mon, 23 Sep 2002, Bruce Mitchener <bruce at cubik.org> wrote:

> Why don't we do similar for not even putting in basic doc comments when 
> new API is added?

Because it would be stupid.




From twisted at moshez.org  Mon Sep 23 11:08:53 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 23 Sep 2002 17:08:53 -0000
Subject: [Twisted-Python] Exceptions across connections
In-Reply-To: <3D8F39D0.3040105@strakt.com>
References: <3D8F39D0.3040105@strakt.com>
Message-ID: <20020923170853.21274.qmail@green.zadka.com>

On Mon, 23 Sep 2002, Boyd Roberts <boyd at strakt.com> wrote:

> I'm not sure where to start looking for this (or if it's even a good idea)
> but I was wondering about passing exceptions from servers to clients,
> say in the case of an error, the error is returned as an exception.

Exceptions are inherently synchrnous things, so it would not make sense
for Twisted.




From twisted at moshez.org  Mon Sep 23 11:26:29 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 23 Sep 2002 17:26:29 -0000
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley consequence of non running of unit tests
In-Reply-To: <3D8F38D5.2060202@cubik.org>
References: <3D8F38D5.2060202@cubik.org>, <E17tVMn-00026x-00@pyramid.twistedmatrix.com>
Message-ID: <20020923172629.21705.qmail@green.zadka.com>

On Mon, 23 Sep 2002 09:52:53 -0600, Bruce Mitchener <bruce at cubik.org> wrote:

> Why don't we do similar for not even putting in basic doc comments when 
> new API is added?

Starting with the password widget?

+class PasswordText(Input):
+    def initialize(self):
+        self['type'] = 'password'

I'm not seeing any API doc there.




From twisted at moshez.org  Mon Sep 23 11:29:31 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 23 Sep 2002 17:29:31 -0000
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley consequence of non running
 of unit tests
In-Reply-To: <3D8F38D5.2060202@cubik.org>
References: <3D8F38D5.2060202@cubik.org>, <E17tVMn-00026x-00@pyramid.twistedmatrix.com>
Message-ID: <20020923172931.21734.qmail@green.zadka.com>

On Mon, 23 Sep 2002, Bruce Mitchener <bruce at cubik.org> wrote:

> Why don't we do similar for not even putting in basic doc comments when 
> new API is added?

And continuing with 

+def getIfExists(node, nodeId):
+    return _get(node, nodeId)




From bruce at cubik.org  Mon Sep 23 11:38:26 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Mon, 23 Sep 2002 11:38:26 -0600
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley consequence
 of non running of unit tests
References: <3D8F38D5.2060202@cubik.org>, <E17tVMn-00026x-00@pyramid.twistedmatrix.com> <20020923170751.21252.qmail@green.zadka.com>
Message-ID: <3D8F5192.4090006@cubik.org>

Moshe Zadka wrote:
> On Mon, 23 Sep 2002, Bruce Mitchener <bruce at cubik.org> wrote:
> 
>>Why don't we do similar for not even putting in basic doc comments when 
>>new API is added?
> 
> Because it would be stupid.

Thanks for your well thought out feedback.  As (if) 1.0 approaches, it 
is more and more important that the state of the documentation improves, 
rather than continue in the current state or worsen.

Why should any new features be permissible without doc comments?

  - Bruce




From bruce at cubik.org  Mon Sep 23 11:38:33 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Mon, 23 Sep 2002 11:38:33 -0600
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley consequence
 of non running of unit tests
References: <3D8F38D5.2060202@cubik.org>, <E17tVMn-00026x-00@pyramid.twistedmatrix.com> <20020923172629.21705.qmail@green.zadka.com>
Message-ID: <3D8F5199.40108@cubik.org>

Moshe Zadka wrote:
> On Mon, 23 Sep 2002 09:52:53 -0600, Bruce Mitchener <bruce at cubik.org> wrote:
> 
>>Why don't we do similar for not even putting in basic doc comments when 
>>new API is added?
> 
> Starting with the password widget?
> 
> +class PasswordText(Input):
> +    def initialize(self):
> +        self['type'] = 'password'
> 
> I'm not seeing any API doc there.

Because I have patches in my tree that aren't checked in yet that add 
that documentation, along with docs for other parts of Woven, but 
Donovan and I have been discussing various changes to the widgets and 
how things work in that area.

  - Bruce




From twisted at moshez.org  Mon Sep 23 11:38:42 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 23 Sep 2002 17:38:42 -0000
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley consequence
 of non running of unit tests
In-Reply-To: <3D8F5199.40108@cubik.org>
References: <3D8F5199.40108@cubik.org>, <3D8F38D5.2060202@cubik.org>, <E17tVMn-00026x-00@pyramid.twistedmatrix.com> <20020923172629.21705.qmail@green.zadka.com>
Message-ID: <20020923173842.21836.qmail@green.zadka.com>

On Mon, 23 Sep 2002, Bruce Mitchener <bruce at cubik.org> wrote:

> Because I have patches in my tree that aren't checked in yet that add 
> that documentation, along with docs for other parts of Woven, but 
> Donovan and I have been discussing various changes to the widgets and 
> how things work in that area.

So you'd be fine with me reverting that until you have time to
check in a properly documented version?




From twisted at itamarst.org  Mon Sep 23 11:45:39 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 23 Sep 2002 13:45:39 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley consequence
 of non running of unit tests
References: <3D8F38D5.2060202@cubik.org>, <E17tVMn-00026x-00@pyramid.twistedmatrix.com> <20020923172629.21705.qmail@green.zadka.com> <3D8F5199.40108@cubik.org>
Message-ID: <3D8F5343.2080501@itamarst.org>

Bruce Mitchener wrote:

> Because I have patches in my tree that aren't checked in yet that add 
> that documentation, along with docs for other parts of Woven, but 
> Donovan and I have been discussing various changes to the widgets and 
> how things work in that area.

I rather tend towards your other opinion, that everything should have docs,
even if it will change. But this does show the problem with requiring docs 
for everything leading to reverting code - everyone always has a reason why 
they didn't need to in *this* case. Or they didn't have time or whatever.

Merciless taunting should be sufficient in most cases in solving this. 
Although I'm tending towards outright violence against whoever is 
responsible for twisted.python.reflect.refrump.




From bruce at cubik.org  Mon Sep 23 12:12:51 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Mon, 23 Sep 2002 12:12:51 -0600
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley consequence
 of non running of unit tests
References: <3D8F38D5.2060202@cubik.org>, <E17tVMn-00026x-00@pyramid.twistedmatrix.com> <20020923172629.21705.qmail@green.zadka.com> <3D8F5199.40108@cubik.org> <3D8F5343.2080501@itamarst.org>
Message-ID: <3D8F59A3.5080805@cubik.org>

Itamar,

Itamar Shtull-Trauring wrote:
> Bruce Mitchener wrote:
> 
>> Because I have patches in my tree that aren't checked in yet that add 
>> that documentation, along with docs for other parts of Woven, but 
>> Donovan and I have been discussing various changes to the widgets and 
>> how things work in that area.
> 
> I rather tend towards your other opinion, that everything should have docs,
> even if it will change. But this does show the problem with requiring 
> docs for everything leading to reverting code - everyone always has a 
> reason why they didn't need to in *this* case. Or they didn't have time 
> or whatever.

I'd meant to suggest that we at least have some sort of policy on 
documentation that is as clearly stated as that for running tests.  I 
don't really care what the policy is, as long as the situation improves 
past the state that Twisted is currently in.

> Merciless taunting should be sufficient in most cases in solving this. 
> Although I'm tending towards outright violence against whoever is 
> responsible for twisted.python.reflect.refrump.

Agreed. And you could argue that Moshez's rudeness encouraged me to 
finally check in a tiny subset of the docs that I have in my tree and 
that's a good thing.

It'd be nice to see some further constructive discussion of this.  We'll 
also need to update the coding standard to reflect the usage of epydoc 
rather than HappyDoc as well.  There are probably other updates that 
could and should be made as well.

For anyone who's missed it, the Epydoc site (http://epydoc.sf.net/) has 
been updated with some docs.  It should be seeing a 1.0 release as well 
fairly soon, so now's a good time to contribute patches for features 
that we'd like to see in corporated.

  - Bruce




From bruce at cubik.org  Mon Sep 23 12:54:22 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Mon, 23 Sep 2002 12:54:22 -0600
Subject: [Twisted-Python] thoughts on a reactor feature
Message-ID: <3D8F635E.6090506@cubik.org>

Hey all,

When working with Twisted, an important thing is to make sure that the 
reactor is running often enough and that tasks are not starving the 
reactor.  (This is obvious.)

I think it'd be nice if the reactor supported some interface for 
discovering, diagnosing and debugging long running tasks.  This could be 
done in a few different ways.

One would be have an interface to POSIX clocks and track the amount of 
time spent between calls out of reactor.run() and report anything that 
takes over a specified threshold of time to execute.

Another is to implement some sort of stack trace sampling where you 
periodically take a stack trace when a utility program is running and 
you've noted periods of long latency.

I know how to do that sort of thing in C or C++, but not in Python.  Is 
it possible? Efficient enough to actually do?  Would it need some native 
code for high enough resolution clocks?

Much of this would also provide the support needed for something like a 
top-for-reactor as well or to be able to print out all currently queued 
activities.

Information about what each thread in the thread pools are doing would 
be useful as well.  This would match the sort of functionality that DBs 
provide to diagnose their behaviors and what they're currently doing 
with each thread.

For some information on POSIX clocks, see this:

http://www.opengroup.org/onlinepubs/007904975/functions/clock_settime.html

The _POSIX_CPUTIME and _POSIX_THREAD_CPUTIME extensions are particularly 
useful for this sort of thing.  This would (obviously) have to have 
platform dependencies.  The information on the Linux glibc compliance 
with the various POSIX options can be found at:

http://people.redhat.com/drepper/posix-option-groups.html

So, for Linux people, this should all work.  Other platforms would 
either need to have similar support for the specifications, an alternate 
API with an interested implementor, or would need to just not offer the 
additional capability.

Thoughts? Better or simpler ways to do this?

  - Bruce




From glyph at twistedmatrix.com  Mon Sep 23 19:00:57 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 23 Sep 2002 20:00:57 -0500 (CDT)
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley
 consequence of non running of unit tests
In-Reply-To: <3D8F5343.2080501@itamarst.org>
References: <20020923172629.21705.qmail@green.zadka.com>
	<3D8F5199.40108@cubik.org>
	<3D8F5343.2080501@itamarst.org>
Message-ID: <20020923.200057.73383282.glyph@twistedmatrix.com>


On Mon, 23 Sep 2002 13:45:39 -0400, Itamar Shtull-Trauring <twisted at itamarst.org> wrote:
> Bruce Mitchener wrote:

> > Because I have patches in my tree that aren't checked in yet that add 
> > that documentation, along with docs for other parts of Woven, but 
> > Donovan and I have been discussing various changes to the widgets and 
> > how things work in that area.

This can be a valid excuse for code which doesn't have documentation.  In fact,
I prefer that upon its initial checkin, code be undocumented until a few of the
dev. team members can poke at it, see if it makes sense, and criticize any
serious flaws it has.

Twisted needs a lot more documentation, but in a platform where some parts are
stable and robust and others are growing and changing, lack of documentation of
some portions will keep people from using experimental code that really
shouldn't be supported in future versions.  (We can yell and scream all we like
about instability of some APIs, but if there is a complete, documented, but
buggy and poorly designed bit of code in the system, people will use it and
clamor when it is removed or the interface is fixed.)

> I rather tend towards your other opinion, that everything should have docs,
> even if it will change. But this does show the problem with requiring docs
> for everything leading to reverting code - everyone always has a reason why
> they didn't need to in *this* case. Or they didn't have time or whatever.

This is not entirely undesirable.  There are many, many bits of Twisted which I
am glad did not have documentation and died unceremonious deaths before they
had widespread exposure.  (Does anyone remember GLOOP?  No?  Good!)  I wish
twisted.web.widgets had stayed undocumented until Donovan had come along ;-).

Finally, even if a feature is complete and correct and will expect no changes,
keeping it out of the tree on the basis that there is no documentation is
counterproductive.  Such a feature could be documented after the fact, and
others using and learning it will often lead to better documentation than the
original author's specification would.  Code that breaks unit tests is in a
wholly different category.  Code that breaks unit tests means that the
functionality that someone else was already using is likely broken now.

In other words, code without docs moves us forward less than it might have.
Code without examples tests moves us backwards.

> Merciless taunting should be sufficient in most cases in solving this. 
> Although I'm tending towards outright violence against whoever is 
> responsible for twisted.python.reflect.refrump.

Man, you guys have _no_ sense of humor :-P.  Yes, that was just a leftover
function from an earlier attempt at rebuild(), intended for interactive use.
It was my fault, and it's gone now.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020923/6863cdbb/attachment.sig>

From glyph at twistedmatrix.com  Mon Sep 23 19:07:47 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 23 Sep 2002 20:07:47 -0500 (CDT)
Subject: [Twisted-Python] thoughts on a reactor feature
In-Reply-To: <3D8F635E.6090506@cubik.org>
References: <3D8F635E.6090506@cubik.org>
Message-ID: <20020923.200747.121185519.glyph@twistedmatrix.com>

On Mon, 23 Sep 2002 12:54:22 -0600, Bruce Mitchener <bruce at cubik.org> wrote:

> One would be have an interface to POSIX clocks and track the amount of 
> time spent between calls out of reactor.run() and report anything that 
> takes over a specified threshold of time to execute.

If I understand your proposal correctly, I think this could be implemented
quite simply by writing a Python wrapper around the reactor, that would wrap
each protocol and protocol factory being passed to it in something that would
catch events and time their execution.  This should work for just about any
reactor.  With a few extra features, it might even be good for measuring their
differences.  Would you need a wrapper around POSIX clocks more robust than
time.clock()?

(I think this could also compare time.clock() to time.time() to see if
potentially blocking calls were being made.)

> Another is to implement some sort of stack trace sampling where you
> periodically take a stack trace when a utility program is running and you've
> noted periods of long latency.

This I don't know how to do; possibly it's doable with Python's
debugger/profiler hooks?  I'm not quite clear on how you do the "noting" -- is
this a message that the user sends to Twisted or is it something that the
profiler performs some heuristic to get?

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020923/8604d943/attachment.sig>

From glyph at twistedmatrix.com  Mon Sep 23 19:12:09 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 23 Sep 2002 20:12:09 -0500 (CDT)
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley
 consequence of non running of unit tests
In-Reply-To: <3D8F59A3.5080805@cubik.org>
References: <3D8F5199.40108@cubik.org>
	<3D8F5343.2080501@itamarst.org>
	<3D8F59A3.5080805@cubik.org>
Message-ID: <20020923.201209.67506062.glyph@twistedmatrix.com>


On Mon, 23 Sep 2002 12:12:51 -0600, Bruce Mitchener <bruce at cubik.org> wrote:
> It'd be nice to see some further constructive discussion of this.  We'll 
> also need to update the coding standard to reflect the usage of epydoc 
> rather than HappyDoc as well.  There are probably other updates that 
> could and should be made as well.

I agree.  Where is epydoc's pseudo-structured-text format documented?  Does the
existing pipe-prefix convention for inline code samples still work?

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020923/829d79ba/attachment.sig>

From glyph at twistedmatrix.com  Mon Sep 23 19:16:09 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 23 Sep 2002 20:16:09 -0500 (CDT)
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley
 consequence of non running of unit tests
In-Reply-To: <20020923.201209.67506062.glyph@twistedmatrix.com>
References: <3D8F5343.2080501@itamarst.org>
	<3D8F59A3.5080805@cubik.org>
	<20020923.201209.67506062.glyph@twistedmatrix.com>
Message-ID: <20020923.201609.51303125.glyph@twistedmatrix.com>

On Mon, 23 Sep 2002 20:12:09 -0500 (CDT), Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> On Mon, 23 Sep 2002 12:12:51 -0600, Bruce Mitchener <bruce at cubik.org> wrote:
> > It'd be nice to see some further constructive discussion of this.  We'll 
> > also need to update the coding standard to reflect the usage of epydoc 
> > rather than HappyDoc as well.  There are probably other updates that 
> > could and should be made as well.
> 
> I agree.  Where is epydoc's pseudo-structured-text format documented?  Does the
> existing pipe-prefix convention for inline code samples still work?

Answering my own (stupid) question: I just checked in a small change to the
coding standard to specify epytext and point at its online docs.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020923/123a3e51/attachment.sig>

From bruce at cubik.org  Mon Sep 23 19:28:29 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Mon, 23 Sep 2002 19:28:29 -0600
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley consequence
 of non running of unit tests
References: <3D8F5199.40108@cubik.org>	<3D8F5343.2080501@itamarst.org>	<3D8F59A3.5080805@cubik.org> <20020923.201209.67506062.glyph@twistedmatrix.com>
Message-ID: <3D8FBFBD.3060305@cubik.org>

Glyph Lefkowitz wrote:
 > On Mon, 23 Sep 2002 12:12:51 -0600, Bruce Mitchener <bruce at cubik.org>
 > wrote:
 >>It'd be nice to see some further constructive discussion of this.
 >>We'll also need to update the coding standard to reflect the usage
 >>of epydoc rather than HappyDoc as well.  There are probably other
 >>updates that could and should be made as well.

I thought that I answered that in that same email or one of the others 
today. :)  http://epydoc.sf.net/

 > I agree.  Where is epydoc's pseudo-structured-text format documented?
 > Does the existing pipe-prefix convention for inline code samples still
 > work?

I _think_ that right now it just triggers a literal block which gets 
rendered to HTML as a <pre class="literalblock">...</pre>

It'd be nice if that supported pretty-printing the source and all that, 
but right now, there's no guarantee that it is Python source. (Like when 
I got and put a quick HTML snippet in there, or SQL, or ...)

Patches for improving this are likely appreciated.

  - Bruce




From glyph at twistedmatrix.com  Mon Sep 23 19:33:17 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 23 Sep 2002 20:33:17 -0500 (CDT)
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley
 consequence of non running of unit tests
In-Reply-To: <3D8F59A3.5080805@cubik.org>
References: <3D8F5199.40108@cubik.org>
	<3D8F5343.2080501@itamarst.org>
	<3D8F59A3.5080805@cubik.org>
Message-ID: <20020923.203317.45081075.glyph@twistedmatrix.com>


On Mon, 23 Sep 2002 12:12:51 -0600, Bruce Mitchener <bruce at cubik.org> wrote:
> I'd meant to suggest that we at least have some sort of policy on 
> documentation that is as clearly stated as that for running tests.  I 
> don't really care what the policy is, as long as the situation improves 
> past the state that Twisted is currently in.

Hm, I don't really disagree with this.  I think it's vastly different than unit
tests though.  Mainly, I'd like to use _positive_ reinforcement for people who
write docs... I can't think off the top of my head what would be a good reward,
though.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020923/055820eb/attachment.sig>

From andrew-twisted at puzzling.org  Mon Sep 23 19:35:47 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 24 Sep 2002 11:35:47 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley consequence of non running of unit tests
In-Reply-To: <20020923.203317.45081075.glyph@twistedmatrix.com>
References: <3D8F5199.40108@cubik.org> <3D8F5343.2080501@itamarst.org> <3D8F59A3.5080805@cubik.org> <20020923.203317.45081075.glyph@twistedmatrix.com>
Message-ID: <20020924013547.GA17036@ritsuko.xware.cx>

On Mon, Sep 23, 2002 at 08:33:17PM -0500, Glyph Lefkowitz wrote:
> 
> Hm, I don't really disagree with this.  I think it's vastly different
> than unit tests though.  Mainly, I'd like to use _positive_
> reinforcement for people who write docs... I can't think off the top
> of my head what would be a good reward, though.

How about "merciless praising" to match the "merciless taunting"? :)

-Andrew.




From itamar at itamarst.org  Mon Sep 23 10:58:45 2002
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 23 Sep 2002 12:58:45 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] Document the likley consequence
 of non running of unit tests
References: <E17tVMn-00026x-00@pyramid.twistedmatrix.com> <3D8F38D5.2060202@cubik.org>
Message-ID: <3D8F4845.2050301@itamarst.org>

Bruce Mitchener wrote:

> Why don't we do similar for not even putting in basic doc comments when 
> new API is added?

Lack of docstrings on commited code is most irritating, yes.




From sean at twistedmatrix.com  Mon Sep 23 21:57:02 2002
From: sean at twistedmatrix.com (Sean Riley)
Date: Mon, 23 Sep 2002 22:57:02 -0500
Subject: [Twisted-Python] Enterprise Row Objects
Message-ID: <HOEEKPCOKELHCNIJNMAGKEPCCGAA.sean@twistedmatrix.com>

I found that if I can remove all of the database implementation specific
code and the database initialization phase for reflectors if the class
attribute "rowColumns" is extended to include the type of the column in
addition to its name.

so when users define a new row class,

rowColumns = ["col1", "col2", "col3"]

becomes:

rowColumns = [("col1", "int"), ("col2", "varchar"), ("col3", "int")]

Itamar pointed me at PySQLite ( http://www.hwaci.com/sw/sqlite/ and
http://pysqlite.sourceforge.net/ ) and i couldnt implement a reflector for
it because there is no way to determine the type of a column as SQLite lacks
detailed system catalogs. Adding the type information to rowColumns was the
obvious solution and happily it has additional benefits:
 - no longer require a database catalog lookup to populate rowClasses
 - no defered initialization phase for reflectors
 - databases without full schema information available (XML and SQLite) can
be supported.

So, the SQL Reflector now works purely on the python DBAPI spec - it should
work with any supported  python DBAPI module. I've run it with PostgreSQL
and SQLite. I'd like to hear if anyone can run it on another database or
platform??

In Twisted.doc.examples there is now:

	row_util.py  - classes for row examples
	row_schema.sql - sample database schema
	row_example.py - example code using a postgresql or sqlite database
	row_xml.py  - example code that uses an XML "database"

Additional functionality would be the ability to generate stubbed rowObject
classes from a relational database schema.

...and I wont update the documentation with PageMill.

----------------
"If he's so smart, then how come he's dead?", Homer Simspon
Sean Riley
sean at ninjaneering.com




From sean at twistedmatrix.com  Tue Sep 24 00:13:48 2002
From: sean at twistedmatrix.com (Sean Riley)
Date: Tue, 24 Sep 2002 01:13:48 -0500
Subject: [Twisted-Python] Enterprise Row Objects
In-Reply-To: <HOEEKPCOKELHCNIJNMAGKEPCCGAA.sean@twistedmatrix.com>
Message-ID: <HOEEKPCOKELHCNIJNMAGIEPDCGAA.sean@twistedmatrix.com>

also successfully ran the row_example.py test against Interbase/Firebird
using kinterbasdb python DBAPI driver and MySQL using the MySQLdb driver :)


-----Original Message-----
From: twisted-python-admin at twistedmatrix.com
[mailto:twisted-python-admin at twistedmatrix.com]On Behalf Of Sean Riley
Sent: Monday, September 23, 2002 10:57 PM
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] Enterprise Row Objects


I found that if I can remove all of the database implementation specific
code and the database initialization phase for reflectors if the class
attribute "rowColumns" is extended to include the type of the column in
addition to its name.

so when users define a new row class,

rowColumns = ["col1", "col2", "col3"]

becomes:

rowColumns = [("col1", "int"), ("col2", "varchar"), ("col3", "int")]

Itamar pointed me at PySQLite ( http://www.hwaci.com/sw/sqlite/ and
http://pysqlite.sourceforge.net/ ) and i couldnt implement a reflector for
it because there is no way to determine the type of a column as SQLite lacks
detailed system catalogs. Adding the type information to rowColumns was the
obvious solution and happily it has additional benefits:
 - no longer require a database catalog lookup to populate rowClasses
 - no defered initialization phase for reflectors
 - databases without full schema information available (XML and SQLite) can
be supported.

So, the SQL Reflector now works purely on the python DBAPI spec - it should
work with any supported  python DBAPI module. I've run it with PostgreSQL
and SQLite. I'd like to hear if anyone can run it on another database or
platform??

In Twisted.doc.examples there is now:

	row_util.py  - classes for row examples
	row_schema.sql - sample database schema
	row_example.py - example code using a postgresql or sqlite database
	row_xml.py  - example code that uses an XML "database"

Additional functionality would be the ability to generate stubbed rowObject
classes from a relational database schema.

...and I wont update the documentation with PageMill.

----------------
"If he's so smart, then how come he's dead?", Homer Simspon
Sean Riley
sean at ninjaneering.com


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From bruce at cubik.org  Tue Sep 24 00:25:31 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Tue, 24 Sep 2002 00:25:31 -0600
Subject: [Twisted-Python] thoughts on a reactor feature
References: <3D8F635E.6090506@cubik.org> <20020923.200747.121185519.glyph@twistedmatrix.com>
Message-ID: <3D90055B.8040905@cubik.org>

Glyph,

Glyph Lefkowitz wrote:
> On Mon, 23 Sep 2002 12:54:22 -0600, Bruce Mitchener <bruce at cubik.org> wrote:
> 
>>One would be have an interface to POSIX clocks and track the amount of 
>>time spent between calls out of reactor.run() and report anything that 
>>takes over a specified threshold of time to execute.
> 
> If I understand your proposal correctly, I think this could be implemented
> quite simply by writing a Python wrapper around the reactor, that would wrap
> each protocol and protocol factory being passed to it in something that would
> catch events and time their execution.  This should work for just about any
> reactor.  With a few extra features, it might even be good for measuring their
> differences.  Would you need a wrapper around POSIX clocks more robust than
> time.clock()?

time.clock() looks like it'd work well enough so long as the accuracy is 
good enough.  (clock_gettime() deals in nanoseconds.)

Wrapping the reactor in Python seems harder.  This could also be a usage 
of the metrics gathering interfaces that I'd mentioned yesterday. 
That'd be far simpler than wrapping the reactor, intercepting 
everything, and providing a new iteration function to catch all of the 
calls out of the reactor while it processed the queued calls.

And .. this should be something that is easy to use, easy to turn on, 
and readily available.  We have primitive facilities for this sort of 
thing in the server tech that I use at work and the only reason that 
they're not more advanced is that I didn't want to spend the time (and 
add the risk) on refactoring our interpreter.  They greatly simplified 
diagnosing server performance issues that popped up.

That would still leave printing out an identifier that indicates what it 
was that just ran for more than the allowed amount of time.  I'll have 
to experiment a bit inside the reactor in the time day or so if I have 
time for Twisted and see what types of things we can reasonably print 
from there.

> (I think this could also compare time.clock() to time.time() to see if
> potentially blocking calls were being made.)

That might be interesting, but not sure that time.time() is of similar 
resolution as the values that I want.  But if I do end up wrapping 
clock_gettime() in a C module, then I could also wrap the function for 
getting wall time in addition to CPU time and per-thread CPU time.  Not 
a problem at all. :)

>>Another is to implement some sort of stack trace sampling where you
>>periodically take a stack trace when a utility program is running and you've
>>noted periods of long latency.
> 
> This I don't know how to do; possibly it's doable with Python's
> debugger/profiler hooks?  I'm not quite clear on how you do the "noting" -- is
> this a message that the user sends to Twisted or is it something that the
> profiler performs some heuristic to get?

Well, the bit above with the time.clock() is probably enough for now.

It'd be nice to be able to do more introspection on thread pools, but 
that can probably wait a bit.

  - Bruce




From bruce at cubik.org  Tue Sep 24 00:26:34 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Tue, 24 Sep 2002 00:26:34 -0600
Subject: [Twisted-Python] Enterprise Row Objects
References: <HOEEKPCOKELHCNIJNMAGIEPDCGAA.sean@twistedmatrix.com>
Message-ID: <3D90059A.70100@cubik.org>

Sean,

Sean Riley wrote:
 > also successfully ran the row_example.py test against
 > Interbase/Firebird using kinterbasdb python DBAPI driver
 > and MySQL using the MySQLdb driver :)

Nice work!

Did you end up working out how to handle serials/autoincrementing index 
values of some sort?

I'm thinking of basing some code at work on t.e.row, but have some 
concerns along those lines.

  - Bruce





From m at moshez.org  Tue Sep 24 05:59:47 2002
From: m at moshez.org (Moshe Zadka)
Date: 24 Sep 2002 11:59:47 -0000
Subject: [Twisted-Python] Release Process
Message-ID: <20020924115947.1479.qmail@green.zadka.com>

As documented with an IRC log:

<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 09:56:56 2002 UTC.  ^G.
<_moshez> >---- started releasing -----<
<tla> <cvs> Commit from moshez (changed 1) in Twisted: "Prerelease" ChangeLog
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:00:50 2002 UTC.  ^G.
<_moshez> checking out
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:01:52 2002 UTC.  ^G.
<tla> <cvs> Commit from moshez (changed 3) in 3 subdirs of Twisted: "Preparing for 0.99.2rc2" README, installing-twisted.html, copyright.py
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:02:36 2002 UTC.  ^G.
<_moshez> tagging ended, running doc generation
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:03:43 2002 UTC.  ^G.
<_moshez> fuck, first problem
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:04:35 2002 UTC.  ^G.
<glyph> _moshez: problem?
<_moshez> glyph: fixing.
<_moshez> hmmm....epyrun is refusing to run.
<_moshez> glyph: epyrun seems to have some kind of a problem :(
<glyph> _moshez: can you give me any more diagnostic info than that?
<_moshez> glyph: try to run it and see..
<_moshez> glyph: it gets killed for some reason.
<glyph> for "this function".  christ, the error messages in this program are worse than nothing
<glyph> _moshez: you're getting this error?
...trouble shooting...
<_moshez> add swap?
<glyph> Sep 24 05:22:29 pyramid kernel: Out of Memory: Killed process 12109 (python).
<_moshez> glyph: it worked!
<_moshez> glyph: praise the lord
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:32:45 2002 UTC.  ^G.
<_moshez> restarted export and onwards
<_moshez> glyph: epyrun finished successfully for real.
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:35:53 2002 UTC.  ^G.
<_moshez> creating balls
<_moshez> created Twisted balls
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:37:42 2002 UTC.  ^G.
<_moshez> created TwistedDocs balls
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:38:53 2002 UTC.  ^G.
<_moshez> creating debs...
<_moshez> copied stuff over to the chroot
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:39:46 2002 UTC.  ^G.
<_moshez> I'm creating the diff
<_moshez> built 2.1 support
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:41:55 2002 UTC.  ^G.
<_moshez> built 2.2 support
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:42:20 2002 UTC.  ^G.
<_moshez> built 2.3 support
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:43:40 2002 UTC.  ^G.
<_moshez> packaging up the debs
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:46:09 2002 UTC.  ^G.
<_moshez> finished building -1
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:52:45 2002 UTC.  ^G.
<_moshez> glyph: building -1woody
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 10:58:59 2002 UTC.  ^G.
<_moshez> glyph: building the woody packages
<_moshez> last stages of that.
<_moshez> finished building debs
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 11:20:35 2002 UTC.  ^G.
<_moshez> finished r-t
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 11:21:31 2002 UTC.  ^G.
<_moshez> one snag: InstallDebs didn't work
<_moshez> glyph: installation finished
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 11:34:42 2002 UTC.  ^G.
<tla> <cvs> Commit from moshez (changed 3) in 2 subdirs of WebSite/twistedmatrix.com: "Rc2" index, news.html, download.html
<_moshez> now I'm finihsed 
<_moshez> pynfo: time
<pynfo> The time at the tone will be: Tue Sep 24 11:48:13 2002 UTC.  ^G.




From twisted at moshez.org  Tue Sep 24 06:26:14 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 24 Sep 2002 12:26:14 -0000
Subject: [Twisted-Python] Release Process
In-Reply-To: <20020924115947.1479.qmail@green.zadka.com>
References: <20020924115947.1479.qmail@green.zadka.com>
Message-ID: <20020924122614.1972.qmail@green.zadka.com>

Summarising:

> <pynfo> The time at the tone will be: Tue Sep 24 09:56:56 2002 UTC.  ^G.
> <_moshez> tagging ended, running doc generation
> <pynfo> The time at the tone will be: Tue Sep 24 10:03:43 2002 UTC.  ^G.

So, 7 minutes here. Remember this.

> <_moshez> fuck, first problem
> <pynfo> The time at the tone will be: Tue Sep 24 10:04:35 2002 UTC.  ^G.
......
> <pynfo> The time at the tone will be: Tue Sep 24 10:32:45 2002 UTC.  ^G.

28 minutes to fix problem.

> <_moshez> restarted export and onwards
[So it just saved me 7 minutes]
> <_moshez> finished r-t
> <pynfo> The time at the tone will be: Tue Sep 24 11:21:31 2002 UTC.  ^G.

50 minutes for the r-t run.

Total r-t time: 55 minutes.

> <_moshez> one snag: InstallDebs didn't work
> <_moshez> glyph: installation finished
> <_moshez> pynfo: time
> <pynfo> The time at the tone will be: Tue Sep 24 11:34:42 2002 UTC.  ^G.

15 minutes to put the deb in the archive and install them.

> <_moshez> now I'm finihsed 
> <pynfo> The time at the tone will be: Tue Sep 24 11:48:13 2002 UTC.  ^G.

15 more minutes to get the web site up to date




From bruce at cubik.org  Tue Sep 24 08:22:55 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Tue, 24 Sep 2002 08:22:55 -0600
Subject: [Twisted-Python] Release Process
References: <20020924115947.1479.qmail@green.zadka.com>
Message-ID: <3D90753F.3090509@cubik.org>

Moshe Zadka wrote:
 > <_moshez> hmmm....epyrun is refusing to run.
 > <_moshez> glyph: epyrun seems to have some kind of a problem :(
 > <glyph> _moshez: can you give me any more diagnostic info than that?
 > <_moshez> glyph: try to run it and see..
 > <_moshez> glyph: it gets killed for some reason.
 > <glyph> for "this function".  christ, the error messages in this
 >   program are worse than nothing

Bug reports, to Ed or to myself would be welcome.  We can't fix what we 
don't hear about.

  - Bruce




From glyph at twistedmatrix.com  Tue Sep 24 09:26:04 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 24 Sep 2002 10:26:04 -0500 (CDT)
Subject: [Twisted-Python] Release Process
In-Reply-To: <3D90753F.3090509@cubik.org>
References: <20020924115947.1479.qmail@green.zadka.com>
	<3D90753F.3090509@cubik.org>
Message-ID: <20020924.102604.94840660.glyph@twistedmatrix.com>


On Tue, 24 Sep 2002 08:22:55 -0600, Bruce Mitchener <bruce at cubik.org> wrote:
> Moshe Zadka wrote:
[snip]
>  > <glyph> for "this function".  christ, the error messages in this program
>  >         are worse than nothing

[ ... but also: ]
>  > ...trouble shooting...
>  > <_moshez> add swap?
>  > <glyph> Sep 24 05:22:29 pyramid kernel: Out of Memory: Killed process 12109
>  >         (python).
>  > <_moshez> glyph: it worked!

> Bug reports, to Ed or to myself would be welcome.  We can't fix what we don't
> hear about.

Sorry that it wasn't clear from the log: this particular problem was
frustrating to debug because it was the linux kernel OOM killer.  Pyramid was a
very busy machine for a while and it would consistently kill epydoc if we
attempted to run it.  Adding swap fixed the problem.  Errors were "worse than
nothing" because they did not point at the problem.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020924/596e3ae8/attachment.sig>

From bruce at cubik.org  Tue Sep 24 13:34:05 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Tue, 24 Sep 2002 13:34:05 -0600
Subject: [Twisted-Python] Release Process
References: <20020924115947.1479.qmail@green.zadka.com>	<3D90753F.3090509@cubik.org> <20020924.102604.94840660.glyph@twistedmatrix.com>
Message-ID: <3D90BE2D.9060209@cubik.org>

Glyph Lefkowitz wrote:
 > Sorry that it wasn't clear from the log: this particular problem was
 > frustrating to debug because it was the linux kernel OOM killer.
 > Pyramid was a very busy machine for a while and it would consistently
 > kill epydoc if we attempted to run it.  Adding swap fixed the 
problem.  > Errors were "worse than nothing" because they did not point 
at the
 > problem.

Ahh, okay. I thought that this was another complaint about epydoc that 
lacked enough detail for me to work on a fix. :)

Happy to hear that it wasn't!  (But I'd still like to get any bug 
reports or patches with new features...)

  - Bruce





From acapnotic at twistedmatrix.com  Tue Sep 24 16:11:41 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 24 Sep 2002 15:11:41 -0700
Subject: [Twisted-Python] breaking distrib.ResourceSubscription
In-Reply-To: <20020924.085756.127664254.glyph@twistedmatrix.com>
References: <20020924.085756.127664254.glyph@twistedmatrix.com>
Message-ID: <1032905503.14645.294.camel@troglodyte.funhouse>

On Tue, 2002-09-24 at 06:57, Glyph Lefkowitz wrote:
[...]
> ResourcePublisher instance has no attribute 'remote_wasModifiedSince'

I'm surprised that this is in the logs much, since it should only happen
for distributed servers that set a Last-Modified header.  Are personal
servers serving that many static files?  I would have thought that would
be handled by ~/public_html.

[...]
> I thought that I'd mentioned this over IRC before, but let me stress it: I
> think that twisted.web.server is implementing *WAAAAY* too much of HTTP right
> now. 

Interesting position.  I know you're not a fan of complete support for a
protocol when you believe the protocol itself is broken, and I'll admit
that nobody actually uses ETags, but I would hardly say that
Last-Modified and HEAD are obscure or unnecessary.

> First of all, this is killing performance -- you have a minimum of 4 or 5
> PB server/client interactions now for each conditional request instead of 2.
> Those method calls are not cheap.

Recognized.  Although I thought I only increased the count by one, not
two or three?

Also take into consideration that these calls only happen for the
*conditional* requests.  Resources that don't supply ETag or
Last-Modified cache validation headers will probably never be bothered
with them.  And if the condition fails, callRemote("request") never
happens, nor does all the work that goes with it.  So overall,
estimating its impact on performance isn't as simple as grep --count
callRemote.


> Second, this is exploding the complexity of
> the webserver: its goal should be to get to the endpoint resource *as simply as
> possible* and then invoke endpoint behavior on that resource.  If clever
> header-parsing things need to happen, then we need to make a lower-level
> 'request' method and make *it* clever, not do request processing before the
> request is dispatched.

This I agree with.  I knew something was wrong when I had three remote
methods in ResourcePublisher all independently doing getResourceFor.  It
would be more symmetric if Request.process was invoked on the distri --

ggrngh.  What is Request.process anyway.  Is it just supposed to do
site.getResourceFor and pass itself off?  Yes.  All the rest of the junk
in there is stuff I added (though the HEAD/supportedMethods stuff was
quite some time ago) with the possible exception of the
util.Unauthorized block.  And it's probably all logic that belongs in
web..Resource rather than Request.

(which is just re-iterating what you've been telling me.)

So how do we fix it?  You're suggesting that Request.process call
Resource.request, which contains most of the stuff currently in
Request.process, and Resource.request calls Resource.render if it's not
a conditional request?

> Third, and not least, this has broken backwards compatibility (albeit in a
> mostly-harmless way) at a time when we should be focusing the most on backwards
> compatibility. 

Sounds like we need an inter-version test harness.  Runs peer1 under
version X and peer2 on Y, or starts server on version X, pickles it, and
re-starts under Y, etc.

> I'm sending this to you directly instead of the list because I've had enough
> political headaches recently and I didn't want you to think that I'm publicly
> lambasting you :).  I appreciate the effort that went into this feature
> implementation, even if it was misguided.

God help us if we can't critique the codebase in the developer's forum.
I appreciate the feedback; I *told* you that I didn't think my changes
had been tested "a lot".

> If you think some of this
> information is useful or that my views on twisted.web's architecture are not
> very clear (or require public discussion), feel free to edit and re-post.

Cheers,

 - Acap

-- 
The moon is waning gibbous, 91.9% illuminated, 17.5 days old.


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20020924/2ed35414/attachment.sig>

From glyph at twistedmatrix.com  Tue Sep 24 18:28:33 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 24 Sep 2002 19:28:33 -0500 (CDT)
Subject: [Twisted-Python] breaking distrib.ResourceSubscription
In-Reply-To: <1032905503.14645.294.camel@troglodyte.funhouse>
References: <20020924.085756.127664254.glyph@twistedmatrix.com>
	<1032905503.14645.294.camel@troglodyte.funhouse>
Message-ID: <20020924.192833.105432764.glyph@twistedmatrix.com>

On 24 Sep 2002 15:11:41 -0700, Kevin Turner <acapnotic at twistedmatrix.com> wrote:
> On Tue, 2002-09-24 at 06:57, Glyph Lefkowitz wrote:
> [...]
> > ResourcePublisher instance has no attribute 'remote_wasModifiedSince'
> 
> I'm surprised that this is in the logs much, since it should only happen
> for distributed servers that set a Last-Modified header.  Are personal
> servers serving that many static files?  I would have thought that would
> be handled by ~/public_html.

The tracebacks I was seeing were for wikis and viewcvs; either moin is setting
those headers or it's serving the images / static data from a personal server
directory.

> > I thought that I'd mentioned this over IRC before, but let me stress it: I
> > think that twisted.web.server is implementing *WAAAAY* too much of HTTP right
> > now. 
> 
> Interesting position.  I know you're not a fan of complete support for a
> protocol when you believe the protocol itself is broken, and I'll admit
> that nobody actually uses ETags, but I would hardly say that
> Last-Modified and HEAD are obscure or unnecessary.

Nor would I.  After much discussion with itamar I conceded that HEAD ought to
cause the body of the request to be eaten there before being sent to the
client.

What I mean here is that the actual module, twisted.web.server, is being too
smart about stuff like Last-Modified and ETags.  HTTP should be fully
implemented, but parts of the responsibility lie elsewhere.
twisted.web.Resource subclasses can implement those themselves if they want to,
because the 99.9% cases should be handled: static.File will handle filesystem
content and woven.* will handle dynamic content.  We can also provide a helper
for mix-in that does conditional-rendering stuff.

> > First of all, this is killing performance -- you have a minimum of 4 or 5
> > PB server/client interactions now for each conditional request instead of 2.
> > Those method calls are not cheap.
> 
> Recognized.  Although I thought I only increased the count by one, not
> two or three?

Looking at it now, I guess ETags and last-modified support are exclusive.  (Is
this correct, protocol-wise?)  However, each call that requires an answer is
minimum of 2 interactions (request/response).  Plus most resources will want to
do a .write().

> Also take into consideration that these calls only happen for the
> *conditional* requests.

The only heuristic I have for how often these happen are the once-per-minute
tracebacks I was seeing while bots were crawling the website yesterday.  So it
looked quite often. :)

> > Second, this is exploding the complexity of the webserver: its goal should
> > be to get to the endpoint resource *as simply as possible* and then invoke
> > endpoint behavior on that resource.  If clever header-parsing things need
> > to happen, then we need to make a lower-level 'request' method and make
> > *it* clever, not do request processing before the request is dispatched.

> This I agree with.  I knew something was wrong when I had three remote
> methods in ResourcePublisher all independently doing getResourceFor.  It
> would be more symmetric if Request.process was invoked on the distri --

Right. :-)

> ggrngh.  What is Request.process anyway.  Is it just supposed to do
> site.getResourceFor and pass itself off?  Yes.  All the rest of the junk
> in there is stuff I added (though the HEAD/supportedMethods stuff was
> quite some time ago) with the possible exception of the
> util.Unauthorized block.  And it's probably all logic that belongs in
> web..Resource rather than Request.

HEAD definitely ought to still have a little bit of logic in Request, since it
should discard any body that the resource attempts to return.  However, the
rest of what you're saying is definitely...

> ([...] just re-iterating what you've been telling me.)

> So how do we fix it?  You're suggesting that Request.process call
> Resource.request, which contains most of the stuff currently in
> Request.process, and Resource.request calls Resource.render if it's not
> a conditional request?

See above for my suggestion.  I think that Resource is too low-level for this
sort of thing (since the default implementation of wasModifiedSince is going to
be 'return 1', why invoke it at all by default?).  I don't feel strongly that
my suggestion is better than this one though, if you think that dynamic
resource implementors are going to want to use this functionality a lot.
(Thoughts, Donovan?)

> Sounds like we need an inter-version test harness.  Runs peer1 under
> version X and peer2 on Y, or starts server on version X, pickles it, and
> re-starts under Y, etc.

Yes.  This is something that I think radix hacked up manually a little while
back, but it needs to be added to accepttests.

Sounds like we're in general agreement, then...

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020924/879e7dc8/attachment.sig>

From kevin.m.turner at pobox.com  Tue Sep 24 21:50:18 2002
From: kevin.m.turner at pobox.com (Kevin Turner)
Date: 24 Sep 2002 20:50:18 -0700
Subject: [Twisted-Python] interface for Last-Modified
In-Reply-To: <20020924.192833.105432764.glyph@twistedmatrix.com>
References: <20020924.085756.127664254.glyph@twistedmatrix.com>
	<1032905503.14645.294.camel@troglodyte.funhouse> 
	<20020924.192833.105432764.glyph@twistedmatrix.com>
Message-ID: <1032925819.14657.338.camel@troglodyte.funhouse>

itamar has led me to what looks to be a much more elegant solution. 
Since the only resources that worry about receiving conditional requests
are those that set cache validation headers (such as "Last-Modified"),
the check to see if you're dealing with a conditional request can go in
the L{http.Request.setLastModified} method.  setLastModified's return
value can then let the caller know if they date they gave was older than
the one in the conditional request, so they don't have to render the
body of the request.  And this works, because Last-Modified being a
header and all, you're having to set it before you write the request
body anyway.

So this works pretty well::

    class SimpleResource(resource.Resource):
        def render(self, request):
            if http.CACHED in (request.setLastModified(10),
                               request.setETag('MatchingTag')):
                return ''
            else:
                return "correct"

and I was all ready to check it in, until I tried to apply it in my
actual use-case, using it in a superclass::

    class AbstractCommitList(widgets.Widget, mvc.View):
        def display(self, request):
            if request.setLastModified(self.lastModified) is http.CACHED:
                # Body should be empty.
                return ''
            else:
                # Body is rendered by subclass.
                return ''
            # That wasn't a very effective conditional.

    class RssChannel(AbstractCommitList):
        def display(self, request):
            s = AbstractCommitList.display(self, request)
            # Now how do I know if I'm supposed to render the body or not?


I guess I could add Request.wantsABody() and have all display subclasses
call that.  Or maybe we've succeeded in moving the problem up above the
Resource.render level to higher-level things like widgets, so it's
something to be solved there.

Any thoughts?

-- 
The moon is waning gibbous, 90.6% illuminated, 17.7 days old.




From andrew-twisaed at puzzling.org  Tue Sep 24 22:19:21 2002
From: andrew-twisaed at puzzling.org (Andrew Bennetts)
Date: Wed, 25 Sep 2002 14:19:21 +1000
Subject: [Twisted-Python] FAILED (failures=1, errors=1164)
Message-ID: <20020925041921.GD3657@ritsuko.xware.cx>

Running:
  PYTHONPATH=. python admin/runtests -t poll

I get a crapload of errors.  Specifically:
  FAILED (failures=1, errors=1164)

Now, considering that we don't have that many tests, something is
*really* screwy.

The vast bulk are:
======================================================================
ERROR: testPBFailures (twisted.test.test_pbfailure.PBFailureTest)
----------------------------------------------------------------------

(yes, with no traceback)

But there are many others too... some end with:
  File "./twisted/internet/abstract.py", line 258, in fileno
    raise NotImplementedError(reflect.qual(self.__class__)+' has no fileno method')
NotImplementedError: twisted.internet.udp.Port has no fileno method


The testPBFailures test in test.log looks like:
---- Running Test: twisted.test.test_pbfailure.PBFailureTest.testPBFailures ----- 
twisted.spread.pb.BrokerFactory starting on 54321
Starting factory <twisted.spread.pb.BrokerFactory instance at 0x86cf40c>
Traceback (most recent call last):
  File "./twisted/internet/main.py", line 101, in run
    _getReactor().run()
  File "./twisted/internet/default.py", line 221, in run
    self.mainLoop()
  File "./twisted/internet/default.py", line 232, in mainLoop
    self.doIteration(t)
  File "./twisted/internet/pollreactor.py", line 139, in doPoll
    why = selectable.doRead()
--- <exception caught here> ---
  File "./twisted/internet/udp.py", line 200, in doRead
    data, addr = self.socket.recvfrom(self.maxPacketSize)
exceptions.AttributeError: Port instance has no attribute 'socket'
Traceback (most recent call last):
  File "./twisted/internet/app.py", line 573, in run
    main.run(installSignalHandlers=installSignalHandlers)
  File "./twisted/internet/main.py", line 101, in run
    _getReactor().run()
  File "./twisted/internet/default.py", line 221, in run
    self.mainLoop()
  File "./twisted/internet/default.py", line 232, in mainLoop
    self.doIteration(t)
--- <exception caught here> ---
  File "./twisted/internet/pollreactor.py", line 142, in doPoll
    if not selectable.fileno() == fd:
  File "./twisted/internet/abstract.py", line 258, in fileno
    raise NotImplementedError(reflect.qual(self.__class__)+' has no fileno method')
exceptions.NotImplementedError: twisted.internet.udp.Port has no fileno method
Unexpected error in main loop.
[...etc...]


Anyone know what's going on here?  I'm running debian testing/unstable.

-Andrew.




From glyph at twistedmatrix.com  Wed Sep 25 00:07:00 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 25 Sep 2002 01:07:00 -0500 (CDT)
Subject: [Twisted-Python] interface for Last-Modified
In-Reply-To: <1032925819.14657.338.camel@troglodyte.funhouse>
References: <1032905503.14645.294.camel@troglodyte.funhouse>
	<20020924.192833.105432764.glyph@twistedmatrix.com>
	<1032925819.14657.338.camel@troglodyte.funhouse>
Message-ID: <20020925.010700.10575456.glyph@twistedmatrix.com>


On 24 Sep 2002 20:50:18 -0700, Kevin Turner <kevin.m.turner at pobox.com> wrote:
> itamar has led me to what looks to be a much more elegant solution. 
> Since the only resources that worry about receiving conditional requests
> are those that set cache validation headers (such as "Last-Modified"),
> the check to see if you're dealing with a conditional request can go in
> the L{http.Request.setLastModified} method.  setLastModified's return
> value can then let the caller know if they date they gave was older than
> the one in the conditional request, so they don't have to render the
> body of the request.  And this works, because Last-Modified being a
> header and all, you're having to set it before you write the request
> body anyway.

Wow!  This is not a solution I would have thought of, but I agree that it's
very clean.  If you've got this implemented, you're probably 99% of the way
there.

> and I was all ready to check it in, until I tried to apply it in my
> actual use-case, using it in a superclass::

Your use-case is pretty much complete except for one thing:
(widgets.Widget, mvc.View):
>         def display(self, request):
>             if request.setLastModified(self.lastModified) is http.CACHED:
>                 # Body should be empty.
>                 return ''
>             else:
>                 # Body is rendered by subclass.
>                 return ''
                  ^^^^^^^^^

Since this is a new superclass, we can redefine the interface of its subclasses
and change them not to be regular widgets.  Since .display() is rather
higher-level than .render() it might even make sense to do this at the
top-level render() rather than in a subclass...  Though twisted.web.widgets is
hopefully going away once woven is well-documented and provides replacements
for everything...  For an initial release, though, something like this:

                  return self.displayBody(request)

Worst case, if in the future this API is later supported at a lower level in
Widget itself, setLastModified will be called twice with the same argument.

>     class RssChannel(AbstractCommitList):
>         def display(self, request):
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
and this would, of course, be

          def displayBody(self, request):
>             s = AbstractCommitList.display(self, request)
>             # Now how do I know if I'm supposed to render the body or not?

Probably for the initial implementation, the only class to support this in the
base should be static.File.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020925/938f8aec/attachment.sig>

From glyph at twistedmatrix.com  Wed Sep 25 01:46:52 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 25 Sep 2002 02:46:52 -0500 (CDT)
Subject: [Twisted-Python] FAILED (failures=1, errors=1164)
In-Reply-To: <20020925041921.GD3657@ritsuko.xware.cx>
References: <20020925041921.GD3657@ritsuko.xware.cx>
Message-ID: <20020925.024652.87901059.glyph@twistedmatrix.com>

On Wed, 25 Sep 2002 14:19:21 +1000, Andrew Bennetts <andrew-twisaed at puzzling.org> wrote:
> Running:
>   PYTHONPATH=. python admin/runtests -t poll

Woah.  We should have different-reactor unit test running in the coding
standard too, apparently :-(.

>   FAILED (failures=1, errors=1164)

> Now, considering that we don't have that many tests, something is *really*
> screwy.

There are some hacks in the pyunit shipped with Twisted to make it interpret
each failed deferred as a separate error.  This means some tests can produce
quite a few more errors than you might expect :-).

> The vast bulk are:
> ======================================================================
> ERROR: testPBFailures (twisted.test.test_pbfailure.PBFailureTest)
> ----------------------------------------------------------------------
> 
> (yes, with no traceback)

Yeah, this happens with Failures that are instantiated rather than raised.  I
guess there should be a debug mode where _all_ failures save their stack, that
the unit tests use...

> Anyone know what's going on here?  I'm running debian testing/unstable.

This is fixed now.  There is still one error in the pollreactor unit tests,
but that has something to do with UDP, and seems tricky enough that I'm keeping
my nose out of it for now.

What was happening was that the poll reactor was assuming that obj.fileno()
would always return a valid descriptor.  Since this has never been the case,
and one of the failure cases that causes the remove-descriptor code to get run
(and fileno() to get called) is that fileno() raises an exception, things
didn't work.  Obviously there was some circularity there, and you'd get a
double-traceback and a corrupted reactor, leaving sockets in it which would
raise these same exceptions every time .iterate() was run.  Hence the very
large number of errors.

The code that's in there now is a bit slow in the failure case I described, but
it works.  At some point we should probably have a cleaner solution to this
problem in general.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020925/03107eaa/attachment.sig>

From twisted at moshez.org  Wed Sep 25 04:22:57 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 25 Sep 2002 10:22:57 -0000
Subject: [Twisted-Python] 0.99.2rc3
Message-ID: <20020925102257.14144.qmail@green.zadka.com>

I'm happy to announce rc3 is released.
This release has been out in 30 minutes.
Good work, everybody!





From twisted at moshez.org  Wed Sep 25 04:28:10 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 25 Sep 2002 10:28:10 -0000
Subject: [Twisted-Python] Bits from the ARM
Message-ID: <20020925102810.14357.qmail@green.zadka.com>

Here are the commands I wrote for the release

 1848  ~/Twisted/admin/release-twisted --oldver 0.99.2rc2 -v 0.99.2rc3 --release=/twisted/Releases --checkout --upver --tag --exp --dist --docs --balls --rel --deb --debi

InstallDebs still had a problem. Here is the fixin':

 1849  cd /twisted/Releases/
 1851  cd debian-0.99.2rc3/
 1853  cp * ~/public_html/snapshot/
 1854  cp woody/* ~/public_html/snapshot/woody/
 1856  rm -rf Twisted-0.99.2rc3/

Great, now upgrade:
 1857  sudo apt-get update
 1858  sudo apt-get upgrade
 1859  sudo apt-get upgrade
 1860  cd /var/www/
 1861  sudo bash

As root:
  495  mv web-shutdown.tap web-`date +%Y-%M-%d`.tap
  499  ./start-twisted.sh web-2002-09-24.tap
 
Upgrade web site:
 1865  cd ~/WebSite/
 1866  cd twistedmatrix.com/
 1867  vi news.html index products/download.html
 1868  cvs commit news.html index products/download.html
 1869  sudo su - pb
 
As pb:
  497  cd /var/www/WebSite/
  498  cd twistedmatrix.com/




From m at moshez.org  Wed Sep 25 04:56:56 2002
From: m at moshez.org (Moshe Zadka)
Date: 25 Sep 2002 10:56:56 -0000
Subject: [Twisted-Python] Bits from the ARM
In-Reply-To: <20020925102810.14357.qmail@green.zadka.com>
References: <20020925102810.14357.qmail@green.zadka.com>
Message-ID: <20020925105656.14628.qmail@green.zadka.com>

Woops, one addition:

> As pb:
>   497  cd /var/www/WebSite/
>   498  cd twistedmatrix.com/

  499  ~moshez/Twisted/admin/generate-domdocs --docsdir . --template template.tpl -e None




From jml at mumak.net  Thu Sep 19 16:33:08 2002
From: jml at mumak.net (Jonathan Lange)
Date: 20 Sep 2002 08:33:08 +1000
Subject: [Twisted-Python] twisted.web.woven.controller -- minor bugfix [PATCH]
Message-ID: <1032474792.5353.2.camel@sting>

G'day,

A couple of minor bugs in controller, fixed in this patch.

cheers,
jml


Index: controller.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/woven/controller.py,v
retrieving revision 1.2
diff -u -r1.2 controller.py
--- controller.py	23 Sep 2002 20:41:48 -0000	1.2
+++ controller.py	25 Sep 2002 11:00:51 -0000
@@ -19,8 +19,8 @@
 from twisted.python import components
 from twisted.python import mvc
 from twisted.web import resource
-from twisted.web.woven import view
-
+from twisted.web.woven import template
+from twisted.python import log
 
 class WController(mvc.Controller, resource.Resource):
     """
@@ -45,7 +45,7 @@
 
     def process(self, request, **kwargs):
         log.msg("Processing results: ", kwargs)
-        return view.RESTART_RENDERING
+        return template.RESTART_RENDERING
 

 def registerControllerForModel(controller, model):




From warner at lothar.com  Wed Sep 25 06:07:48 2002
From: warner at lothar.com (Brian Warner)
Date: Wed, 25 Sep 2002 05:07:48 -0700 (PDT)
Subject: [Twisted-Python] [PATCH] manhole example, docs update
Message-ID: <20020925.050748.78720481.warner@lothar.com>

Based upon a suggestion by Acapnotic, I wrote up a small example of how to
get started with the 'manhole' service (both a server and a transcript of
accessing the Application and changing the type of server). It's attached
here, in the form of a patch to docs/howto/manhole.html, and a sample server
to put in docs/examples/manhole.py . Hope you find it useful.

cheers,
 -Brian
-------------- next part --------------
#! /usr/bin/python

# demonstrate use of manhole to modify a running server

from twisted.internet.app import Application
from twisted.internet.protocol import Factory
from twisted.protocols.wire import QOTD
from twisted.tap.manhole import Options, updateApplication

app = Application("manhole-demo")

# add QOTD server
f = Factory()
f.protocol = QOTD
app.listenTCP(8123, f)

# add manhole with username and password
o = Options()
o.parseOptions(["--user", "username", "--password", "sekrit"])
updateApplication(app, o)

app.run()
-------------- next part --------------
Index: doc/howto/manhole.html
===================================================================
RCS file: /cvs/Twisted/doc/howto/manhole.html,v
retrieving revision 1.6
diff -u -r1.6 manhole.html
--- doc/howto/manhole.html	20 Jun 2002 09:37:48 -0000	1.6
+++ doc/howto/manhole.html	25 Sep 2002 11:55:09 -0000
@@ -39,6 +39,24 @@
     can type arbitrary python code into the input area and get the
     results in the output area.</p>
 
+    <p>At this point, you can get access to the main <code class="API"
+    base="twisted.internet.app">Application</code> object. You can use that
+    to obtain the <code class="API" base="twisted.spread.pb">Service</code>
+    objects inside it, or references to the <code class="API"
+    base="twisted.internet.protocol">Factory</code> objects that are
+    listening on TCP or UDP ports, by doing:</p>
+
+<pre class="python-interpreter">
+from twisted.internet import app
+a = app.theApplication
+service = a.getServiceNamed("manhole")
+(port, factory, backlog, interface) = a.tcpPorts[0]
+</pre>
+
+    <p>After that, you can do anything you want with those objects. A more
+    detailed example is at the bottom of this document.</p>
+
+
     <h2>Special Commands</h2>
 
     <p>There are a few special commands so far that make debugging
@@ -130,6 +148,71 @@
     brought to you by the <code
     class="API">twisted.python.explorer</code> module, which was
     written largely by Kevin Turner.</p>
+
+    <h2>Example</h2>
+
+    <p>Here's an example of using the manhole service to examine and modify
+    a running server. The sample code starts a Quote Of The Day (<code
+    class="API" base="twisted.protocols.wire">QOTD</code>) server on port
+    8123, as well as a manhole service on the usual port 8787.</p>
+
+    <a href="../examples/manhole.py" class="py-listing">manhole.py</a>
+
+    <p>Start this running, and test it out with <code class="shell">nc
+    localhost 8123</code> (or <code class="shell">telnet localhost
+    8123</code> if you don't have netcat installed).</p>
+
+<pre class="shell">
+% nc localhost 8123
+An apple a day keeps the doctor away.
+</pre>
+
+    <p>Then start the <tt>manhole</tt> client and point it at the
+    application: username is <tt>username</tt>, password is <tt>sekrit</tt>.
+    The following is a transcript of the manhole session, and looks just
+    like the normal python interpreter, with lines you type prefixed with
+    <tt>&gt;&gt;&gt;</tt>.</p>
+
+<pre class="python-interpreter">
+Hello username, welcome to twisted.manhole in manhole-demo on some computer somewhere.
+Twisted 0.99.2rc2.
+
+&gt;&gt;&gt; from twisted.internet import app
+&gt;&gt;&gt; a = app.theApplication
+&gt;&gt;&gt; a
+&lt;'manhole-demo' app&gt;
+&gt;&gt;&gt; a.getServiceNamed("twisted.manhole")
+&lt;twisted.manhole.service.Service instance at 0x82d63dc&gt;
+&gt;&gt;&gt; a.tcpPorts
+[(8123, &lt;twisted.internet.protocol.Factory instance at 0x82da454&gt;, 5, ''), (8787, &lt;twisted.spread.pb.BrokerFactory instance at 0x82dac7c&gt;, 5, '')]
+&gt;&gt;&gt; f = a.tcpPorts[0][1]
+&gt;&gt;&gt; f
+&lt;twisted.internet.protocol.Factory instance at 0x82da454&gt;
+&gt;&gt;&gt; dir(f)
+['__doc__', '__implements__', '__module__', 'buildProtocol', 'doStart', 'doStop', 'noisy', 'numPorts', 'protocol', 'startFactory', 'stopFactory']
+&gt;&gt;&gt; from twisted.protocols.wire import Daytime
+&gt;&gt;&gt; a.tcpPorts[0][1].protocol = Daytime
+</pre>
+
+    <p>Congratulations, you've just changed the Factory to use the <code
+    class="API" base="twisted.protocols.wire">Daytime</code> protocol
+    instead of the <code class="API"
+    base="twisted.protocols.wire">QOTD</code> protocol. Connect to port 8123
+    now and see the difference: you get a timestamp instead of a quote:</p>
+
+<pre class="shell">
+% nc localhost 8123
+Wed Sep 25 11:14:58 2002
+</pre>
+
+    <p>From here, you can do anything you want to your application. It is a
+    good idea to check the source for the <code class="API"
+    base="twisted.internet.app">Application</code> and <code class="API"
+    base="twisted.cred.service">Service</code> classes to see what else you
+    can extract from them.</p>
+
+    <p>Have fun!</p>
+
     <hr />
 
     <address>

From bruce at cubik.org  Wed Sep 25 12:26:54 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Wed, 25 Sep 2002 12:26:54 -0600
Subject: [Twisted-Python] little bits of woven joy
Message-ID: <3D91FFEE.9030702@cubik.org>

Currently, if you have multiple deferreds in flight and one of them 
fails, future failures aren't handled  nicely at all.  This patch works 
on improving that, but isn't perfect yet.

It also handles a few other things ... callbacks that were having an 
exception raised didn't display that in the web interface ... and if we 
do that, we should just return the Failure back to 
Deferred._runCallbacks as well to swap over to the errback chain.

If someone has a good (better) idea on handling the multiple-deferreds 
in flight that error out, I'd love to hear it.  This is actually causing 
other problems as well that this problem doesn't fix .. where sometimes, 
parts of the page will be rendered and parts will be formatFailure 
output ... and sometimes the web connection never closes down and so the 
browser just spins on it. :)

There are a couple of other problems as well, but I don't (yet) have a 
good enough handle on them to discuss them, much less play with fixes.

The only other thing in here is a bit more data showing where it tried 
to look for the view method when it raises the error.

  - Bruce

cvs server: Diffing .
Index: template.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/woven/template.py,v
retrieving revision 1.3
diff -u -r1.3 template.py
--- template.py 25 Sep 2002 18:14:27 -0000      1.3
+++ template.py 25 Sep 2002 18:15:20 -0000
@@ -118,7 +118,8 @@
  def renderFailure(ignored, request):
      f = failure.Failure()
      request.write(widgets.formatFailure(f))
-    request.finish()
+    ###request.finish()
+    return f


  class DOMTemplate(Resource, View):
@@ -240,6 +241,7 @@
                  return self.sendPage(request)
          except:
              renderFailure(None, request)
+            request.finish()

      def dispatchResult(self, request, node, result):
          """
@@ -276,11 +278,19 @@
          Deal with a callback from a deferred, dispatching the result
          and recursing children.
          """
-        self.outstandingCallbacks -= 1
-        node = self.dispatchResult(request, node, result)
-        self.recurseChildren(request, node)
-        if not self.outstandingCallbacks:
-            return self.sendPage(request)
+        try:
+            self.outstandingCallbacks -= 1
+            node = self.dispatchResult(request, node, result)
+            self.recurseChildren(request, node)
+            if not self.outstandingCallbacks:
+                return self.sendPage(request)
+        except:
+            f = renderFailure(None, request)
+            if self.outstandingCallbacks == 0:
+                request.finish()
+            else:
+                log.msg("Not finishing yet ... still %s remaining" % 
self.outstandingCallbacks)
+            return f

      def processWidget(self, request, widget, node):
          """
@@ -339,6 +349,7 @@

          # Look up either a widget factory, or a dom-mutating method
          defaultViewMethod = None
+        sources = [self, domwidgets]
          view = DefaultWidget(self.model)
          viewMethod = self.templateMethods.getMethodForNode(node)
          if viewMethod:
@@ -356,6 +367,7 @@
                  else:
                      # Check to see if the viewMethod returns a widget. 
(Use IWidget instead?)
                      maybeWidget = viewMethod(request, node)
+                    sources = (maybeWidget)
                      if isinstance(maybeWidget, domwidgets.Widget):
                          view = maybeWidget
                          viewMethod = view.generate
@@ -369,7 +381,7 @@
              del view
              del result
              nodeText = node.toxml()
-            raise NotImplementedError, "You specified view name %s on a 
node, but no factory_%s method was found." % (viewName, viewName)
+            raise NotImplementedError, "You specified view name %s on a 
node, but no factory_%s method was found. Tried looking on %s" % 
(viewName, viewName, sources)
          return view, viewMethod, result

      def handleNode(self, request, node):
Index: widgets.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/woven/widgets.py,v
retrieving revision 1.6
diff -u -r1.6 widgets.py
--- widgets.py  25 Sep 2002 18:14:27 -0000      1.6
+++ widgets.py  25 Sep 2002 18:15:20 -0000
@@ -168,13 +168,16 @@
          return self.generateDOM(request, node)

      def callback(self, result, request, node):
-        self.setData(result)
-        data = self.getData()
-        if isinstance(data, defer.Deferred):
-            data.addCallbacks(self.callback, renderFailure, 
callbackArgs=(request, node), errbackArgs=(request,))
-            return data
-        self.setUp(request, node, data)
-        return self.generateDOM(request, node)
+        try:
+            self.setData(result)
+            data = self.getData()
+            if isinstance(data, defer.Deferred):
+                data.addCallbacks(self.callback, renderFailure, 
callbackArgs=(request, node), errbackArgs=(request,))
+                return data
+            self.setUp(request, node, data)
+            return self.generateDOM(request, node)
+        except:
+            return renderFailure(None, request)

      def setUp(self, request, node, data):
          """Override this setUp method to do any work your widget




From dp at twistedmatrix.com  Wed Sep 25 14:29:44 2002
From: dp at twistedmatrix.com (Donovan Preston)
Date: Wed, 25 Sep 2002 13:29:44 -0700
Subject: [Twisted-Python] Anchor
In-Reply-To: <20020910131914.GA20882@soniq.net>
Message-ID: <86DA0212-D0C5-11D6-9EE8-000393B3EC2C@twistedmatrix.com>

On Tuesday, September 10, 2002, at 06:19 AM, Paul Boehm wrote:

> web/domwidgets.py:246:         self['href'] = href or self.getData() + 
> '/'
> the "+ '/'" part makes Anchor unuseable for my application because i 
> don't
> want '/' appended to every link. am i misusing Anchor or can you fix 
> this
> in cvs ?
>
>   paul

I'm just getting back to catching up from a huge volume of work and 
email. I'm sorry I didn't reply to this earlier. The addition of a '/' 
was something I did for an app that we use internally that needs 
slashes at the end of every url to ensure that relative links work 
properly. There's no reason I can't take the slash off, and maybe 
provide a SlashAnchor which does add it.

Donovan




From twisted at moshez.org  Wed Sep 25 15:39:25 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 25 Sep 2002 21:39:25 -0000
Subject: [Twisted-Python] Heads Up: RC4
Message-ID: <20020925213925.21498.qmail@green.zadka.com>

I will package RC4 on the inside of 12 hours, unless you convince
me there a problem and that the patch won't we available by the
deadline. If you feel so, *now* is the time to mail me.

Thanks
Your Friendly Neighbourhood ARM





From acapnotic at twistedmatrix.com  Wed Sep 25 16:05:29 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 25 Sep 2002 15:05:29 -0700
Subject: [Twisted-Python] [PATCH] manhole example, docs update
In-Reply-To: <20020925.050748.78720481.warner@lothar.com>
References: <20020925.050748.78720481.warner@lothar.com>
Message-ID: <1032991536.14645.371.camel@troglodyte.funhouse>

Thanks for the docs, Brain.  I applied your patch...  but not without
breaking it a little first.  Instead of including your example code
which imported twisted.tap.manhole, I used the more canonical "mktap -a
qotd.tap manhole" command for the example.

Problem is, while there is a plug-in to make qotd.tap in
doc/howto/listings/TwistedQuotes, that isn't usually a place that the
plug-in registry searches...


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20020925/87bcf63b/attachment.sig>

From dmarko at digi-trade.cz  Wed Sep 25 05:26:42 2002
From: dmarko at digi-trade.cz (David Marko)
Date: Wed, 25 Sep 2002 13:26:42 +0200
Subject: [Twisted-Python] 0.99.2rc3
Message-ID: <OF7803A64A.BEF2654A-ONC1256C3F.003ECFB5-C1256C3F.003EDEAF@LocalDomain>

Whert is this release available? The link on www.twistedmatrix.com doesnt 
work.

David Marko
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20020925/4add9863/attachment.html>

From m at moshez.org  Wed Sep 25 07:26:36 2002
From: m at moshez.org (Moshe Zadka)
Date: 25 Sep 2002 13:26:36 -0000
Subject: [Twisted-Python] [PATCH] manhole example, docs update
In-Reply-To: <20020925.050748.78720481.warner@lothar.com>
References: <20020925.050748.78720481.warner@lothar.com>
Message-ID: <20020925132636.16480.qmail@green.zadka.com>

On Wed, 25 Sep 2002, Brian Warner <warner at lothar.com> wrote:

> app.run()

Why? just leave that line out, and "twistd -y " can run it.




From dp at twistedmatrix.com  Wed Sep 25 16:25:09 2002
From: dp at twistedmatrix.com (Donovan Preston)
Date: Wed, 25 Sep 2002 15:25:09 -0700
Subject: [Twisted-Python] 0.99.2rc3
In-Reply-To: <OF7803A64A.BEF2654A-ONC1256C3F.003ECFB5-C1256C3F.003EDEAF@LocalDomain>
Message-ID: <A662BF3C-D0D5-11D6-9EE8-000393B3EC2C@twistedmatrix.com>

http://prdownloads.sourceforge.net/twisted/

On Wednesday, September 25, 2002, at 04:26 AM, David Marko wrote:

>
> Whert is this release available? The link on www.twistedmatrix.com 
> doesnt work.
>
> David Marko
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: text/enriched
Size: 247 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020925/a457cb55/attachment-0002.bin>

From bruce at cubik.org  Wed Sep 25 16:54:20 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Wed, 25 Sep 2002 16:54:20 -0600
Subject: [Twisted-Python] little bits of woven joy
References: <3D91FFEE.9030702@cubik.org>
Message-ID: <3D923E9C.1010607@cubik.org>

Bruce Mitchener wrote:
> Currently, if you have multiple deferreds in flight and one of them 
> fails, future failures aren't handled  nicely at all.  This patch works 
> on improving that, but isn't perfect yet.
> 
> It also handles a few other things ... callbacks that were having an 
> exception raised didn't display that in the web interface ... and if we 
> do that, we should just return the Failure back to 
> Deferred._runCallbacks as well to swap over to the errback chain.
> 
> If someone has a good (better) idea on handling the multiple-deferreds 
> in flight that error out, I'd love to hear it.  This is actually causing 
> other problems as well that this problem doesn't fix .. where sometimes, 
> parts of the page will be rendered and parts will be formatFailure 
> output ... and sometimes the web connection never closes down and so the 
> browser just spins on it. :)
> 
> There are a couple of other problems as well, but I don't (yet) have a 
> good enough handle on them to discuss them, much less play with fixes.

Well, those problems ended up being a major part of the larger set of 
problems.  They're fixed now in CVS after some debugging and then a good 
idea for the fix from Donovan.

I'm going to leave the existing bugs as documented above around still. 
I'm not entirely happy with my fix or sure that it doesn't occasionally 
do the wrong thing.

  - Bruce




From bruce at cubik.org  Wed Sep 25 18:11:56 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Wed, 25 Sep 2002 18:11:56 -0600
Subject: [Twisted-Python] feature request for microdom
Message-ID: <3D9250CC.8070306@cubik.org>

Hey DOMmies,

Well, since we're using MicroDOM .. we might as well make it kick some 
more ass. :)

In working with the Woven stuff, one thing that would help a lot in the 
formatted failure pages is if the __repr__ of the objects wasn't just this:

   <twisted.web.microdom.Element instance at 0x83a76dc>

but maybe included other information about the element.  The best would 
be to include the name of the file, the line number, the tag name and 
any attributes. :)  But that might be asking for too much.

Is there some happy middle ground?

Still learning Python and Twisted or I'd do this myself.

Cheers,

  - Bruce




From andrew-twisted at puzzling.org  Wed Sep 25 19:03:57 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 26 Sep 2002 11:03:57 +1000
Subject: [Twisted-Python] 0.99.2rc3 .src.rpm
Message-ID: <20020926010357.GB28669@ritsuko.xware.cx>

tigrux on #twisted has kindly provided a .src.rpm.  I've got a copy in
~spiv/twisted-0.99.2rc3-1mdk.src.rpm on pyramid.  Someone should make
this accessible from the website.

It's built for Mandrake I believe, but with some luck RH users will find
it useful too.  Now if only RH had a modern version of Python ;)

And thanks to tigrux for volunteering this!  :)

-Andrew.




From bob at redivi.com  Wed Sep 25 19:28:16 2002
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 25 Sep 2002 21:28:16 -0400
Subject: [Twisted-Python] feature request for microdom
In-Reply-To: <3D9250CC.8070306@cubik.org>
Message-ID: <3B57AA6F-D0EF-11D6-AA8B-0003938210D6@redivi.com>

Not all xml comes from files, or has more than one line.. often with 
over-network or mostly-human-unreadable-anyways xml you'll strip all 
the whitespace, because you can always parse it and "toprettyxml()" it 
if you need later on.

You only really want line numbers and stuff if it doesn't parse when 
you throw the exception

-bob

On Wednesday, September 25, 2002, at 08:11 PM, Bruce Mitchener wrote:

> Hey DOMmies,
>
> Well, since we're using MicroDOM .. we might as well make it kick some 
> more ass. :)
>
> In working with the Woven stuff, one thing that would help a lot in 
> the formatted failure pages is if the __repr__ of the objects wasn't 
> just this:
>
>   <twisted.web.microdom.Element instance at 0x83a76dc>
>
> but maybe included other information about the element.  The best 
> would be to include the name of the file, the line number, the tag 
> name and any attributes. :)  But that might be asking for too much.
>
> Is there some happy middle ground?
>
> Still learning Python and Twisted or I'd do this myself.
>
> Cheers,
>
>  - Bruce




From glyph at twistedmatrix.com  Wed Sep 25 20:15:55 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 25 Sep 2002 21:15:55 -0500 (CDT)
Subject: [Twisted-Python] feature request for microdom
In-Reply-To: <3B57AA6F-D0EF-11D6-AA8B-0003938210D6@redivi.com>
References: <3D9250CC.8070306@cubik.org>
	<3B57AA6F-D0EF-11D6-AA8B-0003938210D6@redivi.com>
Message-ID: <20020925.211555.33798471.glyph@twistedmatrix.com>

On Wed, 25 Sep 2002 21:28:16 -0400, Bob Ippolito <bob at redivi.com> wrote:
> Not all xml comes from files, or has more than one line.. often with 
> over-network or mostly-human-unreadable-anyways xml you'll strip all 
> the whitespace, because you can always parse it and "toprettyxml()" it 
> if you need later on.

It may be useful, then, to say that the Element either (A) has a file/line #,
(B) came from a network stream at a particular point, or (C) was created
dynamically and has no file/line position yet.

> You only really want line numbers and stuff if it doesn't parse when 
> you throw the exception

Eh... Debugging info is always helpful, especially in DOMstuff where you're
post-processing templated nodes and you want to know which are which.

> -bob
> 
> On Wednesday, September 25, 2002, at 08:11 PM, Bruce Mitchener wrote:
> 
> > Hey DOMmies,
> >
> > Well, since we're using MicroDOM .. we might as well make it kick some 
> > more ass. :)

Indeed!  I want it to have really good error reporting, since that's the one
thing that minidom most sorely lacked when I was playing with it.

> > In working with the Woven stuff, one thing that would help a lot in 
> > the formatted failure pages is if the __repr__ of the objects wasn't 
> > just this:
> >
> >   <twisted.web.microdom.Element instance at 0x83a76dc>

> > but maybe included other information about the element.  The best 
> > would be to include the name of the file, the line number, the tag 
> > name and any attributes. :)  But that might be asking for too much.

Hmm.  It might be overkill to include all that stuff, but I'll write a __repr__
that does.  If, in practice, it turns out to be an overbearing amount of
information, we'll scale it back.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020925/2bf4466e/attachment.sig>

From m at moshez.org  Wed Sep 25 22:58:35 2002
From: m at moshez.org (Moshe Zadka)
Date: 26 Sep 2002 04:58:35 -0000
Subject: [Twisted-Python] 0.99.2rc3
In-Reply-To: <OF7803A64A.BEF2654A-ONC1256C3F.003ECFB5-C1256C3F.003EDEAF@LocalDomain>
References: <OF7803A64A.BEF2654A-ONC1256C3F.003ECFB5-C1256C3F.003EDEAF@LocalDomain>
Message-ID: <20020926045835.25607.qmail@green.zadka.com>

On Wed, 25 Sep 2002, "David Marko" <dmarko at digi-trade.cz> wrote:

> Whert is this release available? The link on www.twistedmatrix.com doesnt 

http://www.twistedmatrix.com/downloads/




From m at moshez.org  Wed Sep 25 23:00:08 2002
From: m at moshez.org (Moshe Zadka)
Date: 26 Sep 2002 05:00:08 -0000
Subject: [Twisted-Python] 0.99.2rc3 .src.rpm
In-Reply-To: <20020926010357.GB28669@ritsuko.xware.cx>
References: <20020926010357.GB28669@ritsuko.xware.cx>
Message-ID: <20020926050008.25649.qmail@green.zadka.com>

On Thu, 26 Sep 2002, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:

> tigrux on #twisted has kindly provided a .src.rpm.  I've got a copy in
> ~spiv/twisted-0.99.2rc3-1mdk.src.rpm on pyramid.  Someone should make
> this accessible from the website.

Can tigrux contribute the .spec file, and someone put it in
admin/?
I can then change the release procedure to create RPMs




From mattam at netcourrier.com  Thu Sep 26 03:44:12 2002
From: mattam at netcourrier.com (mattam at netcourrier.com)
Date: Thu, 26 Sep 2002 11:44:12 +0200
Subject: [Twisted-Python] [PATCH] Accept and accept-language parsing
In-Reply-To: <20020922.073831.133432554.glyph@twistedmatrix.com>
References: <20020921232343.GF493@Mat.Home> <20020922124645.GH493@Mat.Home> <20020922.073831.133432554.glyph@twistedmatrix.com>
Message-ID: <20020926094412.GA30953@Mat.Home>

On Sun, Sep 22, 2002 at 07:38:31AM -0500, Glyph Lefkowitz wrote: 
> On Sun, 22 Sep 2002 14:46:45 +0200, <mattam at netcourrier.com> wrote:
> > On Sun, Sep 22, 2002 at 01:23:43AM +0200, mattam at netcourrier.com wrote: 
> 
> > > 	here's a patch for parsing accept and accept-language HTTP headers.
> 
> > Here's a corriged patch, ready for inclusion (diff with http.py v1.41,
> > -p0).
> 
> Could you please provide some unit tests in this patch, both for the parsing of
> accept-language and the priority queue itself?  That would provide some basic
> documentation of the API as well.  Thanks!
> 
> -- 

I added lowerThan and higherThan methods to PriorityQueue and tests for
all the new things. As it is my first TestCase, please tell me if
anything could be done in a better manner or if my tests are incomplete.

Bye!

-- 
"Life is pleasant. Death is peaceful. It's the transition that's 
troublesome."- Isaac Asimov
-------------- next part --------------
A non-text attachment was scrubbed...
Name: accept.patch.2.gz
Type: application/x-gunzip
Size: 3348 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020926/c1d6f970/attachment-0002.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020926/c1d6f970/attachment.sig>

From twisted at moshez.org  Thu Sep 26 04:44:36 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 26 Sep 2002 10:44:36 -0000
Subject: [Twisted-Python] Twisted 0.99.2rc5
Message-ID: <20020926104436.28676.qmail@green.zadka.com>

Dear Twisted Developers and Users,

Due to some glitches, 0.99.2rc4 was missed, but we are more than
proud to present the new and improved, 0.99.2rc5, the release candidate.

Please use it and let us know of any problems. As usual, if you
or any of your IMF team be....I mean, as usual, if we do not have
any significant problem reports within 24 hours, this will be the
release.

Your Friendly Neighbourhood Acting Release Manager,
Moshe Zadka





From kevin.m.turner at pobox.com  Thu Sep 26 17:02:03 2002
From: kevin.m.turner at pobox.com (Kevin Turner)
Date: 26 Sep 2002 16:02:03 -0700
Subject: [Twisted-Python] Re: [Twisted-commits] This forces a last modified header [...]
In-Reply-To: <E17ugVq-0006yM-00@pyramid.twistedmatrix.com>
References: <E17ugVq-0006yM-00@pyramid.twistedmatrix.com>
Message-ID: <1033081324.28581.28.camel@troglodyte.funhouse>

> +            # Set the last modified date to ask the browser to
> +            # not use a cached version.
> +            request.setLastModified(time.time())

Setting Last-Modified does not ask the browser not to use a cached
version.  Setting Last-Modified *allows* the browser to use a cached
version.  Setting it to now() is not the best way to say "don't use a
cache", particularly if it had no Last-Modified header on it before. 
Default behaviour is to always send the full page anyway, nothing will
ever change that to NOT_MODIFIED if you never do setLastModified.

If you don't want a page to be cached, you must set the conditions under
which a cache may be used for that page the *first time* you send it.

I'm not sure exactly what your situation is, so I won't try to go into
detail, but I suggest browsing over
http://www.mnot.net/cache_docs/#CONTROL

Cheers,

 - Kevin




From bruce at cubik.org  Thu Sep 26 17:45:23 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Thu, 26 Sep 2002 17:45:23 -0600
Subject: [Twisted-Python] Re: [Twisted-commits] This forces a last modified
 header [...]
References: <E17ugVq-0006yM-00@pyramid.twistedmatrix.com> <1033081324.28581.28.camel@troglodyte.funhouse>
Message-ID: <3D939C13.4000702@cubik.org>

Kevin,

Thanks for the constructive feedback!

Kevin Turner wrote:
>>+            # Set the last modified date to ask the browser to
>>+            # not use a cached version.
>>+            request.setLastModified(time.time())
> 
> Setting Last-Modified does not ask the browser not to use a cached
> version.  Setting Last-Modified *allows* the browser to use a cached
> version.  Setting it to now() is not the best way to say "don't use a
> cache", particularly if it had no Last-Modified header on it before. 
> Default behaviour is to always send the full page anyway, nothing will
> ever change that to NOT_MODIFIED if you never do setLastModified.
> 
> If you don't want a page to be cached, you must set the conditions under
> which a cache may be used for that page the *first time* you send it.

This sort of thing had worked on a previous project, but I suspect that, 
as you said, we were sending the Last-Modified header all the time 
rather than only occasionally like my change made.

The reason that things looked like it was not working correctly was due 
to some asynch handling of page rendering, which was somewhat amusing.

On a page with 2 widgets that did DB queries and that was the target of 
a form submission, this sort of thing could happen:

    * Form submission happens on page 1
    * Woven stuff runs, runs the form code on the server.
    * Commit method fires off asynch DB operation.
    * Browser redirect is issued.
    * Browser requests target page 2.
    * Woven starts to render page 2.
    * Widget 1 gets rendered with DB data.
    * The asynch DB operation finally runs and commits.
    * Widget 2 gets rendered with updated DB data.
    * User views page 2.

Due to the nature of widget 2 on page 2, it wasn't obvious that this was 
happening originally.  Donovan and I are working on making the form 
processing parts of Woven asynch friendly now and one of us will 
hopefully check something in tonight. Either way, I'll remove the buggy 
LastModified code this evening.

> I'm not sure exactly what your situation is, so I won't try to go into
> detail, but I suggest browsing over
> http://www.mnot.net/cache_docs/#CONTROL

Thanks for the pointer.  I'll definitely read through that.

  - Bruce




From andrew-twisted at puzzling.org  Thu Sep 26 18:12:29 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 27 Sep 2002 10:12:29 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] Make the previous patch a little lazier by only getting the model if it's really needed
In-Reply-To: <E17uda8-0005Ya-00@pyramid.twistedmatrix.com>
References: <E17uda8-0005Ya-00@pyramid.twistedmatrix.com>
Message-ID: <20020927001229.GA12939@ritsuko.xware.cx>

On Thu, Sep 26, 2002 at 01:41:48PM -0500, dp CVS wrote:
> Modified files:
> Twisted/twisted/web/woven/view.py 1.5 1.6
> 
> Log message:
> Make the previous patch a little lazier by only getting the model if it's really needed

[..snip..]

> +    def getNodeModel(self, submodel):
> +        if submodel:
> +            modelGetter = DefaultWidget(self.model)
> +            modelGetter.setSubmodel(submodel)
> +            model = modelGetter.getData()
> +        else:
> +            model = None
> +        return model

[..snip..]

>          else:
>              # If no "controller" attribute was specified on the node, see if 
>              # there is a IController adapter registerred for the model.
> +            model = self.getNodeModel(submodel)
>              controllerFactory = components.getAdapterClassWithInheritance(
>                                  model.__class__, 
>                                  mvc.IController, 
>                                  controllerFactory)

Isn't this going to barf when someone passes None (or other false
values) for submodel to getNodeController in Python 2.1?  You can't do
None.__class__ in 2.1.  

I've never used woven (or any of its previous incarnations) so I'm quite
willing to accept that I might be wrong about this :)

-Andrew.




From andrew-twisted at puzzling.org  Thu Sep 26 18:26:50 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 27 Sep 2002 10:26:50 +1000
Subject: [Twisted-Python] Twisted 0.99.2rc5
In-Reply-To: <20020926104436.28676.qmail@green.zadka.com>
References: <20020926104436.28676.qmail@green.zadka.com>
Message-ID: <20020927002650.GB12939@ritsuko.xware.cx>

On Thu, Sep 26, 2002 at 10:44:36AM -0000, Moshe Zadka wrote:
> Dear Twisted Developers and Users,
> 
> Due to some glitches, 0.99.2rc4 was missed, but we are more than
> proud to present the new and improved, 0.99.2rc5, the release candidate.

The links on the download page don't work.

Also, someone should change "currently available only from us" (with its
lack of punctuation or capitalisation) to "Release candidates are not
mirrored, so they are only available from twistedmatrix.com."  Or even
better, just delete that sentence entirely and make the links just work,
even if they do have to point to tm.com rather than sourceforge.

-Andrew.




From dwayne at swankymode.com  Thu Sep 26 20:01:00 2002
From: dwayne at swankymode.com (Bob Dog)
Date: Thu, 26 Sep 2002 19:01:00 -0700
Subject: [Twisted-Python] OS X build issues..
In-Reply-To: <0780B779-CDA5-11D6-B3A7-0003938210D6@redivi.com>
Message-ID: <B9B909EC.CB9%dwayne@swankymode.com>

Bob,
I just wanted to let you know that I'd be interested in trying twisted if
you get a patch for OS X. I just wanted to let you know there was an
interest out there.

Dwayne

P.S. I installed your mod_pyton a while back, works great


On 9/21/02 1:59 PM, "Bob Ippolito" <bob at redivi.com> wrote:

> Just FYI, the C modules don't build on OS X.  Shouldn't be a difficult
> fix, perhaps I'll do a patch later..  not sure if I'll have the time.
> 
> -bob
> 
> checking for sys/poll.h ...
> conftest.c:1: header file 'sys/poll.h' not found
> cpp-precomp: warning: errors during smart preprocessing, retrying in
> basic mode
> The C reactor is unavailable on this system.
> checking for rpc/pmap_clnt.h ...
> /usr/include/rpc/pmap_clnt.h:91: undefined type, found `bool_t'
> /usr/include/rpc/pmap_clnt.h:91: syntax error, found `int'
> /usr/include/rpc/pmap_clnt.h:91: illegal function definition, found `)'
> /usr/include/rpc/pmap_clnt.h:92: undefined type, found `bool_t'
> /usr/include/rpc/pmap_clnt.h:94: syntax error, found `u_long'
> /usr/include/rpc/pmap_clnt.h:94: illegal function definition, found `)'
> /usr/include/rpc/pmap_clnt.h:99: syntax error, found `char'
> /usr/include/rpc/pmap_clnt.h:99: illegal function definition, found `)'
> /usr/include/rpc/pmap_clnt.h:103: undefined type, found `u_short'
> /usr/include/rpc/pmap_clnt.h:103: syntax error, found `u_long'
> /usr/include/rpc/pmap_clnt.h:103: illegal function definition, found `)'
> cpp-precomp: warning: errors during smart preprocessing, retrying in
> basic mode
> In file included from conftest.c:2:
> /usr/include/rpc/pmap_clnt.h:91: parse error before "pmap_set"
> /usr/include/rpc/pmap_clnt.h:91: parse error before "int"
> /usr/include/rpc/pmap_clnt.h:92: parse error before "pmap_unset"
> /usr/include/rpc/pmap_clnt.h:94: parse error before "u_long"
> /usr/include/rpc/pmap_clnt.h:99: parse error before "char"
> /usr/include/rpc/pmap_clnt.h:99: parse error before ')' token
> /usr/include/rpc/pmap_clnt.h:103: parse error before "pmap_getport"
> /usr/include/rpc/pmap_clnt.h:103: parse error before "u_long"
> The C reactor is unavailable on this system.
> building 'twisted.spread.cBanana' extension
> creating build/temp.darwin-6.1-Power Macintosh-2.2
> gcc -DNDEBUG -g -O3 -Wall -Wstrict-prototypes -no-cpp-precomp
> -I/usr/include/python2.2 -c twisted/spread/cBanana.c -o
> build/temp.darwin-6.1-Power Macintosh-2.2/cBanana.o
> gcc -arch i386 -arch ppc -bundle -flat_namespace -undefined suppress
> build/temp.darwin-6.1-Power Macintosh-2.2/cBanana.o -o
> build/lib.darwin-6.1-Power Macintosh-2.2/twisted/spread/cBanana.so
> ld: for architecture i386
> ld: warning /usr/lib/bundle1.o cputype (18, architecture ppc) does not
> match cputype (7) for specified -arch flag: i386 (file not loaded)
> ld: warning build/temp.darwin-6.1-Power Macintosh-2.2/cBanana.o cputype
> (18, architecture ppc) does not match cputype (7) for specified -arch
> flag: i386 (file not loaded)
> ld: warning /usr/lib/gcc/darwin/3.1/libgcc.a archive's cputype (18,
> architecture ppc) does not match cputype (7) for specified -arch flag:
> i386 (can't load from it)
> ld: warning /usr/lib/libSystem.dylib cputype (18, architecture ppc)
> does not match cputype (7) for specified -arch flag: i386 (file not
> loaded)
> building 'twisted.internet.cReactor' extension
> gcc -DNDEBUG -g -O3 -Wall -Wstrict-prototypes -no-cpp-precomp
> -I/usr/include/python2.2 -c twisted/internet/cReactor/cReactor.c -o
> build/temp.darwin-6.1-Power Macintosh-2.2/cReactor.o
> In file included from twisted/internet/cReactor/cReactor.c:22:
> twisted/internet/cReactor/cReactor.h:23:22: sys/poll.h: No such file or
> directory
> twisted/internet/cReactor/cReactor.c: In function
> `iterate_rebuild_pollfd_arrray':
> twisted/internet/cReactor/cReactor.c:508: sizeof applied to an
> incomplete type
> twisted/internet/cReactor/cReactor.c:541: dereferencing pointer to
> incomplete type
> twisted/internet/cReactor/cReactor.c:542: dereferencing pointer to
> incomplete type
> twisted/internet/cReactor/cReactor.c:549: dereferencing pointer to
> incomplete type
> twisted/internet/cReactor/cReactor.c:549: `POLLIN' undeclared (first
> use in this function)
> twisted/internet/cReactor/cReactor.c:549: (Each undeclared identifier
> is reported only once
> twisted/internet/cReactor/cReactor.c:549: for each function it appears
> in.)
> twisted/internet/cReactor/cReactor.c:558: dereferencing pointer to
> incomplete type
> twisted/internet/cReactor/cReactor.c:558: `POLLOUT' undeclared (first
> use in this function)
> twisted/internet/cReactor/cReactor.c:562: dereferencing pointer to
> incomplete type
> twisted/internet/cReactor/cReactor.c:564: increment of pointer to
> unknown structure
> twisted/internet/cReactor/cReactor.c:564: arithmetic on pointer to an
> incomplete type
> twisted/internet/cReactor/cReactor.c: In function
> `iterate_process_pollfd_array':
> twisted/internet/cReactor/cReactor.c:588: increment of pointer to
> unknown structure
> twisted/internet/cReactor/cReactor.c:588: arithmetic on pointer to an
> incomplete type
> twisted/internet/cReactor/cReactor.c:591: dereferencing pointer to
> incomplete type
> twisted/internet/cReactor/cReactor.c:597: dereferencing pointer to
> incomplete type
> twisted/internet/cReactor/cReactor.c:602: dereferencing pointer to
> incomplete type
> twisted/internet/cReactor/cReactor.c:602: `POLLIN' undeclared (first
> use in this function)
> twisted/internet/cReactor/cReactor.c:607: dereferencing pointer to
> incomplete type
> twisted/internet/cReactor/cReactor.c:607: `POLLOUT' undeclared (first
> use in this function)
> twisted/internet/cReactor/cReactor.c:612: dereferencing pointer to
> incomplete type
> twisted/internet/cReactor/cReactor.c: In function `iterate_internal':
> twisted/internet/cReactor/cReactor.c:777: warning: implicit declaration
> of function `poll'
> error: command 'gcc' failed with exit status 1
> 
> 
> 




From radix at twistedmatrix.com  Fri Sep 27 03:03:55 2002
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 27 Sep 2002 11:03:55 +0200
Subject: [Twisted-Python] OS X build issues..
In-Reply-To: <B9B909EC.CB9134537664wayne@swankymode.com>
References: <0780B779-CDA5-11D6-B3A7-0003938210D6@redivi.com> <B9B909EC.CB9134537664wayne@swankymode.com>
Message-ID: <20020927090355.GA3239@toshi>

On Thu, Sep 26, 2002 at 07:01:00PM -0700, Bob Dog wrote:
> Bob,
> I just wanted to let you know that I'd be interested in trying twisted if
> you get a patch for OS X. I just wanted to let you know there was an
> interest out there.
> 
> Dwayne
> 
> P.S. I installed your mod_pyton a while back, works great
> 

Twisted, afaik, works fine on OS X -- the C modules are optional and are
only for speed; they offer you no extra functionality.




From bob at redivi.com  Fri Sep 27 06:03:15 2002
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 27 Sep 2002 08:03:15 -0400
Subject: [Twisted-Python] OS X build issues..
In-Reply-To: <20020927090355.GA3239@toshi>
Message-ID: <1AA55E5D-D211-11D6-9962-0003938210D6@redivi.com>

On Friday, September 27, 2002, at 05:03 AM, Christopher Armstrong wrote:

> On Thu, Sep 26, 2002 at 07:01:00PM -0700, Bob Dog wrote:
>> Bob,
>> I just wanted to let you know that I'd be interested in trying  
>> twisted if
>> you get a patch for OS X. I just wanted to let you know there was an
>> interest out there.
>>
>> Dwayne
>>
>> P.S. I installed your mod_pyton a while back, works great
>>
>
> Twisted, afaik, works fine on OS X -- the C modules are optional and  
> are
> only for speed; they offer you no extra functionality.
>

Yeah, what he said, I've been using twisted for OS X as long as I've  
been using python on OS X.  "python setup.py install" doesn't fail  
gracefully, however.. you basically just have to "sudo mv  
Twisted-0.99.2rc5/twisted /usr/lib/python2.2/site-packages/twisted" (if  
you're using jaguar unix python).. or if you're using a framework  
python then you need to mv it into  
/Library/Frameworks/Python/Versions/Current/lib/python2.X/site- 
packages/ where python2.X is the version (likely 2.2 or 2.3)

-bob




From jn at who.net  Fri Sep 27 08:15:37 2002
From: jn at who.net (john nielsen)
Date: Fri, 27 Sep 2002 09:15:37 -0500
Subject: [Twisted-Python] TwistedQuotes example help
Message-ID: <20020927141537.15793.qmail@iname.com>

I am trying to use the TwistedQuotes 
talked about in Twisted-0.99.2\doc\howto\plugin.html
and located at Twisted-0.99.2\doc\howto\listings

I want to make sure I understand this right:

To get the example to work, I should do the following steps:
1)put the TwistedQuotes dir in my path

I made a .pth file w/
   C:/Python22/Lib/site-packages/twisted/TwistedQuotes
   C:/Python22/lib/site-packages/twisted
and sys.path shows them

2)put plugins.tml in site-packages\twisted\plugins.tml
 modifiying it to point to: "twisted.TwistedQuotes.quotetap"

3)execute site-packages\twisted\scripts\mktap qotd
4)run twistd -f qotd

Everything looks to work w/out error  but then to test the server:
pbquoteclient.py returns w/Failed to obtain quote

or 

nc -v localhost 8007
which returns w/connection refused


Am I missing a step?
Thanks for any help,

john

-- 
__________________________________________________________
Sign-up for your own FREE Personalized E-mail at Mail.com
http://www.mail.com/?sr=signup




From dp at twistedmatrix.com  Fri Sep 27 10:47:08 2002
From: dp at twistedmatrix.com (Donovan Preston)
Date: Fri, 27 Sep 2002 09:47:08 -0700
Subject: [Twisted-Python] OS X build issues..
In-Reply-To: <B9B909EC.CB9%dwayne@swankymode.com>
Message-ID: <C30AB8D8-D238-11D6-A92F-000393B3EC2C@twistedmatrix.com>

On Thursday, September 26, 2002, at 07:01 PM, Bob Dog wrote:

> Bob,
> I just wanted to let you know that I'd be interested in trying twisted 
> if
> you get a patch for OS X. I just wanted to let you know there was an
> interest out there.
>
> Dwayne

Just to let you know, Twisted runs with no issues on OS X already -- 
it's just the C extension modules (which accelerate certain parts of 
Twisted) that don't. The pure python equivalents work fine, however.

Donovan




From acapnotic at twistedmatrix.com  Fri Sep 27 16:14:45 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 27 Sep 2002 15:14:45 -0700
Subject: [Twisted-Python] async returns from DefaultAuthorizer.addIdentity
Message-ID: <1033164908.32420.7.camel@troglodyte.funhouse>

Authorizer.addCallback's documentation says "Create an identity and make
a callback when it has been created."  So I figured that meant I should
have DefaultAuthorizer return a defer.succeed/fail instead of
None/raise.  But returning a defer.fail makes
test_cred.AuthorizerTestCase.test_addIdent fail, as it has an
assertRaises in there.

So who is wrong?  The documentation, my interpretation of the
documentation, or the unit test?

"Unit-tests-never-lie"ly yours,

 - Acap

-- 
The moon is waning gibbous, 70.1% illuminated, 20.2 days old.




From typo at soniq.net  Fri Sep 27 16:18:12 2002
From: typo at soniq.net (Paul Boehm)
Date: Sat, 28 Sep 2002 00:18:12 +0200
Subject: [Twisted-Python] jfi: twisted pygame :)
Message-ID: <20020927221812.GA12049@soniq.net>

took me longer to write this mail, than to convert a simple pygame
based scrolling game to twisted + pygame. 

works great: 
without fps limits i lose about 3-5 fps compared to the Clock.tick(n)
based loop.

if the game engine takes care of events and updates with a single
call per frame, all you need to do is get rid of pygame.time.Clock
calls, and do scheduled updates with reactor.callLater.

  paul



From acapnotic at twistedmatrix.com  Fri Sep 27 17:04:05 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 27 Sep 2002 16:04:05 -0700
Subject: [Twisted-Python] Invalidating a perspective.
Message-ID: <1033167991.32425.20.camel@troglodyte.funhouse>

I'm trying to figure out how to shut down a Service.  Assuming you're
keeping a list of perspectives signed on (presumably with the
perspective.attached and detached methods), how do you kick them off? 
You can just nuke the transport, but with pb.IdentityConnector enabling
the use of multiple services over a single transport, that probably
isn't a good idea anymore.  

Is there a way to tell the broker to mark the perspective as stale or
something?  Seems like this isn't the only time when you'd want to
invalidate all RemoteReferences to an object.

-- 
The moon is waning gibbous, 69.8% illuminated, 20.2 days old.




From acapnotic at twistedmatrix.com  Fri Sep 27 18:06:47 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 27 Sep 2002 17:06:47 -0700
Subject: [Twisted-Python] async returns from
	DefaultAuthorizer.addIdentity
In-Reply-To: <1033164908.32420.7.camel@troglodyte.funhouse>
References: <1033164908.32420.7.camel@troglodyte.funhouse>
Message-ID: <1033171610.32420.41.camel@troglodyte.funhouse>

On Fri, 2002-09-27 at 15:14, Kevin Turner wrote:
> Authorizer.addCallback's 
Authorizer.addIdentity, I mean.

> But returning a defer.fail makes
> test_cred.AuthorizerTestCase.test_addIdent fail, as it has an
> assertRaises in there.

and code depends on this synchronous behaviour, including
perspective.makeIdentity, which is used in in many .tap-builders'
updateApplication, also handled synchronously.

-- 
The moon is waning gibbous, 69.5% illuminated, 20.3 days old.




From twisted at itamarst.org  Fri Sep 27 19:23:04 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 27 Sep 2002 21:23:04 -0400
Subject: [Twisted-Python] ANN: Twisted 0.99.2 - now with stable internet
Message-ID: <20020927212304.5e46d110.twisted@itamarst.org>

(this is short version of what I sent to comp.lang.python)

The Twisted team is proud to announce Twisted 0.99.2, which includes a API-stable version of twisted.internet, Twisted's event-driven networking core (like asyncore, but more so).

[...]

With the twisted.internet APIs now stable, we feel Twisted provides the best networking platform available today for Python. This also gives us a solid basis for working on stable APIs for the rest of Twisted's packages.

[... more marketing stuff cut ...]


What's new in 0.99.2
====================

- Improved HTTP support - bug fixes, caching APIs

- WOVEN, a web templating system (formerly known as DOMTemplate)

- microdom, a very small DOM implementation

- An inetd server written with Twisted (coming soon to a Debian mirror near you)

- Switched to epydoc for API docs (http://epydoc.sf.net - it rocks!)

- RDBMS storage for the NNTP server, and improved NNTP protocol support

- Finalized process-running API

- Huge numbers of bug fixes and feature improvements, and better docs



From acapnotic at twistedmatrix.com  Fri Sep 27 19:44:19 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 27 Sep 2002 18:44:19 -0700
Subject: [Twisted-Python] CVSToys 0.9.2.
Message-ID: <1033177462.32415.52.camel@troglodyte.funhouse>

CVSToys, the beast behind that cute little <cvs> bot you all know and
love, v0.9.2 is available for download.  At this point, having taken
care of the nasty business that happened when you reconfigured a server
that was running a PBService, I'm running low on known bugs.  So check
it out, help write tests, find more bugs!  Let me know if you see
anything which looks like it needs straightening out before 1.0.

http://twistedmatrix.com/users/acapnotic/wares/code/CVSToys/

Share and enjoy,

 - Kevin 
(Acapnotic)

-- 
The moon is waning gibbous, 68.8% illuminated, 20.3 days old.





From jml at mumak.net  Fri Sep 27 23:14:38 2002
From: jml at mumak.net (Jonathan Lange)
Date: 28 Sep 2002 15:14:38 +1000
Subject: [Twisted-Python] InputImage, ImageHandler -- Woven [PATCH]
Message-ID: <1033190080.15766.85.camel@sting>

A widget and an InputHandler to better support <input type="image" ../>
in Woven. I'm not too happy with the Widget, as it requires the src=""
to be set in the template. 

But, FWIW, here's the patch.

pax et amor,
jml


Index: twisted/web/woven/input.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/woven/input.py,v
retrieving revision 1.4
diff -u -r1.4 input.py
--- twisted/web/woven/input.py  28 Sep 2002 03:45:45 -0000      1.4
+++ twisted/web/woven/input.py  28 Sep 2002 06:00:05 -0000
@@ -174,6 +174,30 @@

 ListHandler = List

+class ImageHandler(InputHandler):
+    def getInput(self, request):
+        x, y = (request.args.get(self.submodel + '.x', None),
+                request.args.get(self.submodel + '.y', None))
+        if(x != None and y != None):
+            return x[0], y[0]
+        else:
+            return None
+
+    def check(self, request, data):
+        if data is None: return None
+        if len(data) != 2: return ()
+        try:
+            int(data[0])
+            int(data[1])
+            return 1
+        except (TypeError, ValueError):
+            return 0
+
+    def handleInvalid(self, request, data):
+        if data is not None:
+            self.view.setError(request, "%s is not a valid coordinate." % str(data))
+
+
 class NewObject(SingleValue):
     """
     Check to see if the name the user entered is valid.
Index: twisted/web/woven/widgets.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/woven/widgets.py,v
retrieving revision 1.15
diff -u -r1.15 widgets.py
--- twisted/web/woven/widgets.py        28 Sep 2002 03:45:45 -0000      1.15
+++ twisted/web/woven/widgets.py        28 Sep 2002 06:00:07 -0000
@@ -369,6 +369,12 @@
         self.add(Text(self.getData()))
         return Input.generateDOM(self, request, node)

+class InputImage(Input):
+    def initialize(self):
+        self['type'] = 'image'
+    def generateDOM(self, request, node):
+        return Widget.generateDOM(self, request, node)
+
 class Anchor(Widget):
     tagName = 'a'
     def initialize(self):





From glyph at twistedmatrix.com  Sat Sep 28 02:29:07 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 28 Sep 2002 03:29:07 -0500 (CDT)
Subject: [Twisted-Python] async returns from
 DefaultAuthorizer.addIdentity
In-Reply-To: <1033171610.32420.41.camel@troglodyte.funhouse>
References: <1033164908.32420.7.camel@troglodyte.funhouse>
	<1033171610.32420.41.camel@troglodyte.funhouse>
Message-ID: <20020928.032907.55499654.glyph@twistedmatrix.com>

On 27 Sep 2002 17:06:47 -0700, Kevin Turner <acapnotic at twistedmatrix.com> wrote:
> On Fri, 2002-09-27 at 15:14, Kevin Turner wrote:
> > Authorizer.addCallback's 
> Authorizer.addIdentity, I mean.
> 
> > But returning a defer.fail makes
> > test_cred.AuthorizerTestCase.test_addIdent fail, as it has an
> > assertRaises in there.
> 
> and code depends on this synchronous behaviour, including
> perspective.makeIdentity, which is used in in many .tap-builders'
> updateApplication, also handled synchronously.

Not that this isn't an error, but... from what I can see, makeIdentity's
results are thrown away by the caller everywhere it's being called.  I don't
think it would break too terribly much to change it.  (The unit tests may just
be overzealous.)

dbcred seems to return the documented value from this, so in order to get the
unit tests to work for a DatabaseAuthorizer we're going to have to fix it
anyway.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020928/6402a808/attachment.sig>

From nick at zork.net  Fri Sep 27 23:55:29 2002
From: nick at zork.net (Nick Moffitt)
Date: Fri, 27 Sep 2002 22:55:29 -0700
Subject: [Twisted-Python] CVSToys 0.9.2.
In-Reply-To: <1033177462.32415.52.camel@troglodyte.funhouse>
References: <1033177462.32415.52.camel@troglodyte.funhouse>
Message-ID: <20020928055529.GE25377@zork.net>

begin  Kevin Turner  quotation:
> CVSToys, the beast behind that cute little <cvs> bot you all know
> and love, v0.9.2 is available for download.  At this point, having
> taken care of the nasty business that happened when you reconfigured
> a server that was running a PBService, I'm running low on known
> bugs.  So check it out, help write tests, find more bugs!  Let me
> know if you see anything which looks like it needs straightening out
> before 1.0.

I only just installed twisted, so I may be doing bad horrible things,
but I get the following when trying to do a "./setup.py build":

    running build_scripts
    creating build/scripts
    error: file 'bin/loginfo' does not exist

Is that something that's meant to be in the distribution tarball?

-- 
A: No.
Q: Should I include quotations after my reply?



From acapnotic at twistedmatrix.com  Sat Sep 28 21:41:40 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 28 Sep 2002 20:41:40 -0700
Subject: [Twisted-Python] CVSToys 0.9.2.
In-Reply-To: <20020928055529.GE25377@zork.net>
References: <1033177462.32415.52.camel@troglodyte.funhouse> 
	<20020928055529.GE25377@zork.net>
Message-ID: <1033270904.21880.8.camel@troglodyte.funhouse>

On Fri, 2002-09-27 at 22:55, Nick Moffitt wrote:
> I only just installed twisted, so I may be doing bad horrible things,
> but I get the following when trying to do a "./setup.py build":

Oops.  That wasn't you or Twisted, that was me being ignorant of how
distutils works.  My bad.

A new release is out, and I checked to make sure 'setup.py build' works
this time.

http://twistedmatrix.com/users/acapnotic/wares/code/CVSToys/CVSToys-0.9.3.tar.bz2

Thanks for the feedback,

 - Kevin

-- 
The moon is last quarter, 58.5% illuminated, 21.3 days old.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20020928/6bdd8ff1/attachment.sig>

From twisted at moshez.org  Mon Sep 30 02:09:04 2002
From: twisted at moshez.org (Moshe Zadka)
Date: Mon, 30 Sep 2002 03:09:04 -0500
Subject: [Twisted-Python] Using Generate Domdocs outside Twisted
Message-ID: <E17vvc0-0006V6-00@pyramid.twistedmatrix.com>

The following patch gives g-d graceful recovery fromt he lack
of the non-standard py2html

Index: admin/generate-domdocs
===================================================================
RCS file: /cvs/Twisted/admin/generate-domdocs,v
retrieving revision 1.23
diff -u -r1.23 generate-domdocs
--- admin/generate-domdocs	30 Sep 2002 07:58:03 -0000	1.23
+++ admin/generate-domdocs	30 Sep 2002 08:01:24 -0000
@@ -32,7 +32,6 @@
 import cStringIO
 import time
 # syntax highlighting for Python source
-import py2html, PyFontify
 from twisted import copyright
 from twisted.python import usage
 
@@ -100,6 +99,16 @@
                 return v
 
 def fontifyFiles(infile, outfile):
+    try:
+        import py2html, PyFontify
+    except ImportError:
+        s = infile.read().replace('&', '&amp;').replace('<', '&lt;').\
+                          replace('>', '&gt;')
+        outfile.write('''\
+<pre>
+%s
+</pre>''' % s)
+        return
     py2html.PrettyPrint(PyFontify.fontify,
                         "rawhtml", "color").file_filter(infile, outfile)
     





From twisted at moshez.org  Mon Sep 30 03:18:15 2002
From: twisted at moshez.org (Moshe Zadka)
Date: 30 Sep 2002 09:18:15 -0000
Subject: [Twisted-Python] Zip Death?
Message-ID: <20020930091815.22760.qmail@green.zadka.com>

Dear Twisted Developers,

Zip is the least efficient (by far) archiver, and is stealing huge
amounts of bandwidth from everybody. Unless there are objections,
I will change r-t to stop creating Zip archives.

Thanks,
M

PS
Will the guy who created RPMs please send the .spec here? Thanks. 





From elloyd at lancaster.lib.pa.us  Mon Sep 30 07:33:22 2002
From: elloyd at lancaster.lib.pa.us (Eron Lloyd)
Date: Mon, 30 Sep 2002 09:33:22 -0400
Subject: [Twisted-Python] Zip Death?
In-Reply-To: <20020930091815.22760.qmail@green.zadka.com>
References: <20020930091815.22760.qmail@green.zadka.com>
Message-ID: <200209300933.22622.elloyd@lancaster.lib.pa.us>

But isn't zip one of the most widely used cross-platform compression formats? 
I'd much rather use something like bzip2 as well, but I don't know if there 
is support for it on all other target platforms. Another big argument I'd put 
out there is that with the recently added support for Zip files in the 
Standard Library, that's a sign of broad support for zip as a python 
compression standard (maybe that's not the best word). I believe there is a 
proposal to modify the basic python import facilities to be able to handle 
zip files as modules or packages, too. How much performance gain are we 
losing?

Regards,

Eron

On Monday 30 September 2002 5:18 am, Moshe Zadka wrote:
> Dear Twisted Developers,
>
> Zip is the least efficient (by far) archiver, and is stealing huge
> amounts of bandwidth from everybody. Unless there are objections,
> I will change r-t to stop creating Zip archives.
>
> Thanks,
> M
>
> PS
> Will the guy who created RPMs please send the .spec here? Thanks.
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> ---
> [This E-mail scanned for viruses by Declude Virus]

---
[This E-mail scanned for viruses by Declude Virus]




From twisted at itamarst.org  Mon Sep 30 07:49:25 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 30 Sep 2002 09:49:25 -0400
Subject: [Twisted-Python] Zip Death?
In-Reply-To: <200209300933.22622.elloyd@lancaster.lib.pa.us>
References: <20020930091815.22760.qmail@green.zadka.com>
	<200209300933.22622.elloyd@lancaster.lib.pa.us>
Message-ID: <20020930094925.7efeaead.twisted@itamarst.org>

On Mon, 30 Sep 2002 09:33:22 -0400
Eron Lloyd <elloyd at lancaster.lib.pa.us> wrote:

> But isn't zip one of the most widely used cross-platform compression formats? 

WinZip supports tar.gz.

> out there is that with the recently added support for Zip files in the 
> Standard Library, that's a sign of broad support for zip as a python 
> compression standard (maybe that's not the best word). I believe there is a 
> proposal to modify the basic python import facilities to be able to handle 
> zip files as modules or packages, too.

Which is not what we're distributing anyway, so that's irrelevant - you won't be able to import the Twisted ZIP after these patches go in.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
Available for Python, Twisted, Zope and Java consulting



From twisted at itamarst.org  Mon Sep 30 07:56:28 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 30 Sep 2002 09:56:28 -0400
Subject: [Twisted-Python] Fw: patch for policy stuff/test and example
Message-ID: <20020930095628.0d84a0ed.twisted@itamarst.org>

Attached is sjj's suggestion for factory policies. Glyph wants to do something
different, namely:

http://zelda.twistedmatrix.com/connlimit.py.txt

-------------------------------------------------------------------------------
Begin forwarded message:

Date: Mon, 30 Sep 2002 16:00:48 +1000 (EST)
From: Sam Jordan <sam at twistedmatrix.com>
To: twisted at itamarst.org
Subject: patch for policy stuff/test and example


Hi,

Here is the patch (created via cvs diff -u > policy.patch).
I just noticed that the comment for 'verify' notes the tuple for addr is 
(type, host, port) but it may just be (host, port) i'll fix this comment after 
commit.

Feel free to discuss any problems you have with it.

Cheers,

Sam.

-- 
#python quote of the century:
<glyph> h3x: so... you're a professional extortionist?
<h3x> pretty much
<glyph> h3x: do you offer professional apprenticeships?
<h3x> i should
<dash> glyph: gah, you beat me to it

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: policy.patch
URL: </pipermail/twisted-python/attachments/20020930/0e95b314/attachment.ksh>
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: policy_example.py
URL: </pipermail/twisted-python/attachments/20020930/0e95b314/attachment-0001.ksh>

From glyph at twistedmatrix.com  Mon Sep 30 08:04:48 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 30 Sep 2002 09:04:48 -0500 (CDT)
Subject: [Twisted-Python] Zip Death?
In-Reply-To: <20020930094925.7efeaead.twisted@itamarst.org>
References: <20020930091815.22760.qmail@green.zadka.com>
	<200209300933.22622.elloyd@lancaster.lib.pa.us>
	<20020930094925.7efeaead.twisted@itamarst.org>
Message-ID: <20020930.090448.93018550.glyph@twistedmatrix.com>


On Mon, 30 Sep 2002 09:49:25 -0400, Itamar Shtull-Trauring <twisted at itamarst.org> wrote:

> Which is not what we're distributing anyway, so that's irrelevant - you won't
> be able to import the Twisted ZIP after these patches go in.

Ideally, what I'd really like is to create one "upstream" (in the debian sense)
release and then have packagers go to work on that one archive directly.
Regardless of whether we're releasing archives in .tgz or .zip or .sit or .arj
or whatever, Twisted isn't really "packaged" for anything but unix on a regular
basis.  The user-experience is almost entirely unix-centric.

As a Linux user myself it is unlikely that I will soon have motivation to
correct this deficiency :).  Is anyone out there in Twisted land willing to
take up the mantle and make a Windows- or Mac-friendly installation of Twisted,
at least for major releases?

If we are going to support importable ZIP archives, we should be viewing it
like this: it shouldn't be a full copy of everything that comes in the tarball,
just the installation relevant to that "platform".

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020930/321afe79/attachment.sig>

From elloyd at lancaster.lib.pa.us  Mon Sep 30 09:12:01 2002
From: elloyd at lancaster.lib.pa.us (Eron Lloyd)
Date: Mon, 30 Sep 2002 11:12:01 -0400
Subject: [Twisted-Python] Zip Death?
In-Reply-To: <20020930.090448.93018550.glyph@twistedmatrix.com>
References: <20020930091815.22760.qmail@green.zadka.com> <20020930094925.7efeaead.twisted@itamarst.org> <20020930.090448.93018550.glyph@twistedmatrix.com>
Message-ID: <200209301112.01793.elloyd@lancaster.lib.pa.us>

Good points. Is there anything in distutils that could aid in this?

Eron

On Monday 30 September 2002 10:04 am, Glyph Lefkowitz wrote:
> On Mon, 30 Sep 2002 09:49:25 -0400, Itamar Shtull-Trauring 
<twisted at itamarst.org> wrote:
> > Which is not what we're distributing anyway, so that's irrelevant - you
> > won't be able to import the Twisted ZIP after these patches go in.
>
> Ideally, what I'd really like is to create one "upstream" (in the debian
> sense) release and then have packagers go to work on that one archive
> directly. Regardless of whether we're releasing archives in .tgz or .zip or
> .sit or .arj or whatever, Twisted isn't really "packaged" for anything but
> unix on a regular basis.  The user-experience is almost entirely
> unix-centric.
>
> As a Linux user myself it is unlikely that I will soon have motivation to
> correct this deficiency :).  Is anyone out there in Twisted land willing to
> take up the mantle and make a Windows- or Mac-friendly installation of
> Twisted, at least for major releases?
>
> If we are going to support importable ZIP archives, we should be viewing it
> like this: it shouldn't be a full copy of everything that comes in the
> tarball, just the installation relevant to that "platform".

---
[This E-mail scanned for viruses by Declude Virus]




From iko at strakt.com  Mon Sep 30 09:01:36 2002
From: iko at strakt.com (Anders Hammarquist)
Date: Mon, 30 Sep 2002 17:01:36 +0200
Subject: [Twisted-Python] Improvements to twisted.protocols.smtp
Message-ID: <200209301501.g8UF1a9u001275@fido.strakt.com>

Hi!

We have a need for an SMTP server, and found the current implementation
a bit fragile. This patch should robustify it, and also improve RFC 2821
compliance (no guarantees though).

I didn't touch the SMTP client (apart from adding the double-dot protocol),
but I suspect I'll look over it as well.

Comments, etc are welcome. The patch is relative to twisted CVS as of a 
few minutes ago.

Regards,
/Anders

-- 
 -- Of course I'm crazy, but that doesn't mean I'm wrong.
Anders Hammarquist                                  | iko at strakt.com
AB Strakt                                           | Tel: +46 31 711 08 70
G|teborg, Sweden.           RADIO: SM6XMM and N2JGL | Fax: +46 31 711 08 80

-------------- next part --------------
Index: twisted/protocols/basic.py
===================================================================
RCS file: /cvs/Twisted/twisted/protocols/basic.py,v
retrieving revision 1.23
diff -u -u -r1.23 basic.py
--- twisted/protocols/basic.py	23 Sep 2002 08:51:29 -0000	1.23
+++ twisted/protocols/basic.py	30 Sep 2002 14:49:24 -0000
@@ -150,12 +150,14 @@
                 line, self.__buffer = self.__buffer.split(self.delimiter, 1)
             except ValueError:
                 if len(self.__buffer) > self.MAX_LENGTH:
-                    self.transport.loseConnection()
+                    line, self.__buffer = self.__buffer, ''
+                    self.lineLengthExceeded(line)
                     return
                 break
             else:
                 if len(line) > self.MAX_LENGTH:
-                    self.transport.loseConnection()
+                    line, self.__buffer = self.__buffer, ''
+                    self.lineLengthExceeded(line)
                     return
                 self.lineReceived(line)
                 if self.transport.disconnecting:
@@ -197,6 +199,12 @@
         """Sends a line to the other end of the connection.
         """
         self.transport.write(line + self.delimiter)
+
+    def lineLengthExceeded(self, line):
+        """Called when the maximum line length has been reached.
+        Override if it needs to be dealt with in some special way.
+        """
+        self.transport.loseConnection()
 
 
 class Int32StringReceiver(protocol.Protocol):
Index: twisted/protocols/smtp.py
===================================================================
RCS file: /cvs/Twisted/twisted/protocols/smtp.py,v
retrieving revision 1.23
diff -u -u -r1.23 smtp.py
--- twisted/protocols/smtp.py	19 Aug 2002 03:21:58 -0000	1.23
+++ twisted/protocols/smtp.py	30 Sep 2002 14:49:24 -0000
@@ -18,10 +18,10 @@
 """
 
 from twisted.protocols import basic
-from twisted.internet import protocol, defer
+from twisted.internet import protocol, defer, reactor
 from twisted.python import log
 
-import os, time, string, operator
+import os, time, string, operator, re
 
 class SMTPError(Exception):
     pass
@@ -49,15 +49,93 @@
         self.deferred.errback(arg)
         self.done = 1
 
+class AddressError(SMTPError):
+    "Parse error in address"
+    pass
+
+# Character classes for parsing addresses
+atom = r"-A-Za-z0-9!#$%&'*+/=?^_`{|}~"
+
+class Address:
+    """Parse and hold an RFC 2821 address.
+
+    Source routes are stipped and ignored, UUCP-style bang-paths
+    and %-style routing are not parsed.
+    """
+
+    qstring = re.compile(r'((?:"[^"]*"|\\.|[' + atom + r'])+|.)')
+
+    def __init__(self, addr):
+        self.local = ''
+        self.domain = ''
+        self.addrstr = addr
+
+        # Tokenize
+        atl = filter(None,self.qstring.split(addr))
+
+        local = []
+        domain = []
+
+        while atl:
+            if atl[0] == '<':
+                if atl[-1] != '>':
+                    raise AddressError, "Unbalanced <>"
+                atl = atl[1:-1]
+            elif atl[0] == '@':
+                atl = atl[1:]
+                if not local:
+                    # Source route
+                    while atl and atl[0] != ':':
+                        # remove it
+                        atl = atl[1:]
+                    if not atl:
+                        raise AddressError, "Malformed source route"
+                    atl = atl[1:] # remove :
+                elif domain:
+                    raise AddressError, "Too many @"
+                else:
+                    # Now in domain
+                    domain = ['']
+            elif len(atl[0]) == 1 and atl[0] not in atom + '.':
+                raise AddressError, "Parse error at " + atl[0]
+            else:
+                if not domain:
+                    local.append(atl[0])
+                else:
+                    domain.append(atl[0])
+                atl = atl[1:]
+               
+        self.local = ''.join(local)
+        self.domain = ''.join(domain)
+
+    dequotebs = re.compile(r'\\(.)')
+    def dequote(self, addr):
+        "Remove RFC-2821 quotes from address"
+        res = []
+
+        atl = filter(None,self.qstring.split(addr))
+
+        for t in atl:
+            if t[0] == '"' and t[-1] == '"':
+                res.append(t[1:-1])
+            elif '\\' in t:
+                res.append(self.dequotebs.sub(r'\1',t))
+            else:
+                res.append(t)
+
+        return ''.join(res)
+
+    def __str__(self):
+        return '%s%s' % (self.local, self.domain and ("@" + self.domain) or "")
+
+    def __repr__(self):
+        return "%s.%s(%s)" % (self.__module__, self.__class__.__name__,
+                              repr(str(self)))
 
-class User:
+class User(Address):
 
     def __init__(self, destination, helo, protocol, orig):
-        try:
-            self.name, self.domain = string.split(destination, '@', 1)
-        except ValueError:
-            self.name = destination
-            self.domain = ''
+        Address.__init__(self,destination)
         self.helo = helo
         self.protocol = protocol
         self.orig = orig
@@ -83,23 +161,41 @@
 
 class SMTP(basic.LineReceiver):
 
-    def __init__(self):
+    def __init__(self, domain=None, timeout=600):
         self.mode = COMMAND
         self.__from = None
         self.__helo = None
-        self.__to = ()
+        self.__to = []
+        self.timeout = timeout
+        if not domain:
+            import socket
+            domain = socket.getfqdn()
+        self.host = domain
+
+    def timedout(self):
+        self.sendCode(421, '%s Timeout. Try talking faster next time!' %
+                      self.host)
+        self.transport.loseConnection()
 
     def connectionMade(self):
-        self.sendCode(220, 'Spammers beware, your ass is on fire')
+        self.sendCode(220, '%s Spammers beware, your ass is on fire' %
+                      self.host)
+        self.timeoutID = reactor.callLater(self.timeout, self.timedout)
 
     def sendCode(self, code, message=''):
         "Send an SMTP code with a message."
         self.transport.write('%d %s\r\n' % (code, message))
 
     def lineReceived(self, line):
+        self.timeoutID.cancel()
+        self.timeoutID = reactor.callLater(self.timeout, self.timedout)
+
         if self.mode is DATA:
             return self.dataLineReceived(line)
-        command = string.split(line, None, 1)[0]
+        if line:
+            command = string.split(line, None, 1)[0]
+        else:
+            command = ''
         method = getattr(self, 'do_'+string.upper(command), None)
         if method is None:
             method = self.do_UNKNOWN
@@ -107,21 +203,59 @@
             line = line[len(command):]
         return method(string.strip(line))
 
+    def lineLengthExceeded(self, line):
+        if self.mode is DATA:
+            for message in self.__messages:
+                message.connectionLost()
+            self.mode = COMMAND
+            del self.__messages
+        self.sendCode(500, 'Line too long')
+
     def do_UNKNOWN(self, rest):
-        self.sendCode(502, 'Command not implemented')
+        self.sendCode(500, 'Command not implemented')
 
     def do_HELO(self, rest):
-        self.__helo = rest
-        self.sendCode(250, 'Nice to meet you')
+        peer = self.transport.getPeer()[1]
+        self.__helo = (rest, peer)
+        self.sendCode(250, '%s Hello %s, nice to meet you' % (self.host, peer))
 
     def do_QUIT(self, rest):
         self.sendCode(221, 'See you later')
         self.transport.loseConnection()
 
+    qstring = r'("[^"]*"|\\.|[' + atom + r'@.])+'
+
+    path_re = re.compile(r"(<(?=.*>))?(?P<addr><>|(?<=<)" + qstring + r"(?=(?<!\\)>)|" + qstring + r")((?<![\\<])>)?$")
+    mail_re = re.compile(r'\s*FROM:\s*(?P<path><>|<' + qstring + r'>|' +
+                         qstring + r')\s*(?P<opts>.*)$',re.I)
+    rcpt_re = re.compile(r'\s*TO:\s*(?P<path><' + qstring + r'>|' +
+                         qstring + r')\s*(?P<opts>.*)$',re.I)
+
     def do_MAIL(self, rest):
-        from_ = rest[len("MAIL:<"):-len(">")]
-        self.validateFrom(self.__helo, from_, self._fromValid,
-                                              self._fromInvalid)
+        if not self.__helo:
+            self.sendCode(503,"Who are you? Say HELO first");
+        if self.__from:
+            self.sendCode(503,"Only one sender per message, please")
+            return
+        # Clear old recipient list
+        self.__to = []
+        m = self.mail_re.match(rest)
+        if not m:
+            self.sendCode(501, "Syntax error")
+            return
+        m = self.path_re.match(m.group('path'))
+        if not m:
+            self.sendCode(553, "Unparseable address")
+            return
+
+        try:
+            addr = Address(m.group('addr'))
+        except AddressError, e:
+            self.sendCode(553, str(e))
+            return
+            
+        self.validateFrom(self.__helo, addr, self._fromValid,
+                          self._fromInvalid)
 
     def _fromValid(self, from_):
         self.__from = from_
@@ -131,12 +265,28 @@
         self.sendCode(550, 'No mail for you!')
 
     def do_RCPT(self, rest):
-        to = rest[len("TO:<"):-len(">")]
-        user = User(to, self.__helo, self, self.__from)
+        if not self.__from:
+            self.sendCode(503, "Must have sender before recpient")
+            return
+        m = self.rcpt_re.match(rest)
+        if not m:
+            self.sendCode(501, "Syntax error")
+            return
+        m = self.path_re.match(m.group('path'))
+        if not m:
+            self.sendCode(553, "Unparseable address")
+            return
+
+        try:
+            user = User(m.group('addr'), self.__helo, self, self.__from)
+        except AddressError, e:
+            self.sendCode(553, str(e))
+            return
+            
         self.validateTo(user, self._toValid, self._toInvalid)
 
     def _toValid(self, to):
-        self.__to = self.__to + (to,)
+        self.__to.append(to)
         self.sendCode(250, 'Address recognized')
 
     def _toInvalid(self, to):
@@ -144,22 +294,29 @@
 
     def do_DATA(self, rest):
         if self.__from is None or not self.__to:  
-            self.sendCode(550, 'Must have valid receiver and originator')
+            self.sendCode(503, 'Must have valid receiver and originator')
             return
         self.mode = DATA
         helo, origin, recipients = self.__helo, self.__from, self.__to
         self.__from = None
-        self.__to = ()
+        self.__to = []
         self.__messages = self.startMessage(recipients)
+        for message in self.__messages:
+            message.lineReceived(self.receivedHeader(helo, origin, recipients))
         self.sendCode(354, 'Continue')
 
     def connectionLost(self, reason):
+        # self.sendCode(421, 'Loosing connection.') # This does nothing...
+        # Ideally, if we (rather than the other side) lose the connection,
+        # we should be able to tell the other side that we are going away.
+        # RFC-2821 requires that we try.
         if self.mode is DATA:
             for message in self.__messages:
                 message.connectionLost()
 
     def do_RSET(self, rest):
-        self.__init__()
+        self.__from = None
+        self.__to = []
         self.sendCode(250, 'I remember nothing.')
 
     def dataLineReceived(self, line):
@@ -177,6 +334,7 @@
                     deferred = message.eomReceived()
                     deferred.addCallback(ndeferred.callback)
                     deferred.addErrback(ndeferred.errback)
+                del self.__messages
                 return
             line = line[1:]
         for message in self.__messages:
@@ -189,6 +347,11 @@
         self.sendCode(550, 'Could not send e-mail')
 
     # overridable methods:
+    def receivedHeader(self, helo, origin, recipents):
+        return "Received: From %s ([%s]) by %s; %s" % (
+            helo[0], helo[1], self.host,
+            time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.gmtime()))
+    
     def validateFrom(self, helo, origin, success, failure):
         success(origin)
 
@@ -281,6 +444,7 @@
             self.state = 'afterData'
 
         chunk = string.replace(chunk, "\n", "\r\n")
+        chunk = string.replace(chunk, "\r\n.", "\r\n..")
         self.transport.write(chunk)
 
     def pauseProducing(self):

From glyph at twistedmatrix.com  Mon Sep 30 09:14:50 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 30 Sep 2002 10:14:50 -0500 (CDT)
Subject: [Twisted-Python] Zip Death?
In-Reply-To: <200209301112.01793.elloyd@lancaster.lib.pa.us>
References: <20020930094925.7efeaead.twisted@itamarst.org>
	<20020930.090448.93018550.glyph@twistedmatrix.com>
	<200209301112.01793.elloyd@lancaster.lib.pa.us>
Message-ID: <20020930.101450.78703643.glyph@twistedmatrix.com>


On Mon, 30 Sep 2002 11:12:01 -0400, Eron Lloyd <elloyd at lancaster.lib.pa.us> wrote:
> Is there anything in distutils that could aid in this?

I believe that 'python setup.py bdist_wininst' will create a win32 installer,
but it will only do so on Windows.  It also has some limitations (there's no
facility for putting anything into your Start menu, for example) but it does at
least get all the files in the right place.

The trouble is that it requires MSVC++, and so has to run actually on a windows
box, and can't be automated on our unix release server.

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020930/90c30d06/attachment.sig>

From bruce at cubik.org  Mon Sep 30 09:40:17 2002
From: bruce at cubik.org (Bruce Mitchener)
Date: Mon, 30 Sep 2002 09:40:17 -0600
Subject: [Twisted-Python] Zip Death?
References: <20020930094925.7efeaead.twisted@itamarst.org>	<20020930.090448.93018550.glyph@twistedmatrix.com>	<200209301112.01793.elloyd@lancaster.lib.pa.us> <20020930.101450.78703643.glyph@twistedmatrix.com>
Message-ID: <3D987061.8080801@cubik.org>

Glyph Lefkowitz wrote:
> On Mon, 30 Sep 2002 11:12:01 -0400, Eron Lloyd <elloyd at lancaster.lib.pa.us> wrote:
>>Is there anything in distutils that could aid in this?
> 
> I believe that 'python setup.py bdist_wininst' will create a win32 installer,
> but it will only do so on Windows.  It also has some limitations (there's no
> facility for putting anything into your Start menu, for example) but it does at
> least get all the files in the right place.
> 
> The trouble is that it requires MSVC++, and so has to run actually on a windows
> box, and can't be automated on our unix release server.

I've run this for a release or two in the past.  It is pretty easy and 
painless when no one breaks it and only takes a few minutes.

  - Bruce




From twisted at itamarst.org  Mon Sep 30 10:46:03 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 30 Sep 2002 12:46:03 -0400
Subject: [Twisted-Python] Improvements to twisted.protocols.smtp
In-Reply-To: <200209301501.g8UF1a9u001275@fido.strakt.com>
References: <200209301501.g8UF1a9u001275@fido.strakt.com>
Message-ID: <20020930124603.22a1a9cc.twisted@itamarst.org>

On Mon, 30 Sep 2002 17:01:36 +0200
Anders Hammarquist <iko at strakt.com> wrote:

> We have a need for an SMTP server, and found the current
> implementation a bit fragile. This patch should robustify it, and also
> improve RFC 2821 compliance (no guarantees though).

Thanks Anders! One of us will try to look it over soon. And a few test cases
to go along would be even more appreciated ;)

-- 
Itamar Shtull-Trauring    http://itamarst.org/
Available for Python, Twisted, Zope and Java consulting



From bob at mastersofbranding.com  Mon Sep 30 10:46:26 2002
From: bob at mastersofbranding.com (Bob Ippolito)
Date: Mon, 30 Sep 2002 12:46:26 -0400
Subject: [Twisted-Python] Zip Death?
In-Reply-To: <3D987061.8080801@cubik.org>
Message-ID: <29714798-D494-11D6-8FFD-0003938210D6@mastersofbranding.com>

Nullsoft's NSIS is a nice open source scriptable installer system for 
windows that let's you do just about anything.. maybe think about 
making a distutils module for that instead?

http://www.nullsoft.com/free/nsis/

On Monday, September 30, 2002, at 11:40 AM, Bruce Mitchener wrote:

> Glyph Lefkowitz wrote:
>> On Mon, 30 Sep 2002 11:12:01 -0400, Eron Lloyd 
>> <elloyd at lancaster.lib.pa.us> wrote:
>>> Is there anything in distutils that could aid in this?
>> I believe that 'python setup.py bdist_wininst' will create a win32 
>> installer,
>> but it will only do so on Windows.  It also has some limitations 
>> (there's no
>> facility for putting anything into your Start menu, for example) but 
>> it does at
>> least get all the files in the right place.
>> The trouble is that it requires MSVC++, and so has to run actually on 
>> a windows
>> box, and can't be automated on our unix release server.
>
> I've run this for a release or two in the past.  It is pretty easy and 
> painless when no one breaks it and only takes a few minutes.
>
>  - Bruce
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From glyph at twistedmatrix.com  Mon Sep 30 15:05:18 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 30 Sep 2002 16:05:18 -0500 (CDT)
Subject: [Twisted-Python] Re: [Twisted-commits] How do I serve PHP-files with twisted.web?
 Answered.
In-Reply-To: <E17w47M-00052h-00@pyramid.twistedmatrix.com>
References: <E17w47M-00052h-00@pyramid.twistedmatrix.com>
Message-ID: <20020930.160518.59650770.glyph@twistedmatrix.com>


On Mon, 30 Sep 2002 12:14:00 -0500, phed CVS <phed at twistedmatrix.com> wrote:
> How do I serve PHP-files with twisted.web? Answered.

This answer appears to be unnecessarily complex and confusing, when the user
could just do "mktap web --path . --allow-ignore-ext" and get the same effect.
(You probably want --index index.php too.) Is there any particular reason you
answered that way? :)

-- 
 |    <`'>    |  Glyph Lefkowitz: Traveling Sorcerer   |
 |   < _/ >   |  Lead Developer,  the Twisted project  |
 |  < ___/ >  |      http://www.twistedmatrix.com      |
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020930/e08a9152/attachment.sig>

From andrew-twisted at puzzling.org  Mon Sep 30 23:41:07 2002
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 1 Oct 2002 15:41:07 +1000
Subject: [Twisted-Python] Bugs in epydoc API docs.
Message-ID: <20021001054107.GC24410@ritsuko.xware.cx>

E.g.
http://twistedmatrix.com/documents/TwistedDocs/Twisted-0.99.2/twisted.internet.protocol.Protocol.html

Note the bug starting at connectionLost's description; the HTML source
looks like this:

<a NAME="connectionLost"/>
<h3>connectionLost</h3>
<code><b>connectionLost(self, reason=<twisted.python.failure.Failure twisted.internet.error.Co...)</B></code><p>

Which is obviously not quite right... it leads to the rest of the page being bolded.

Also, in 0.99.2alpha3's docs (sorry, no link for you, just looking in the docs
in moshez's debian package), in twisted.internet.protocol.html, this line is
rendered without a hyperlink:

   Maintainer: U{Itamar Shtull-Trauring<mailto:twisted at itamarst.org>}

Is this a bug in epydoc, or Twisted's use of epydoc?

-Andrew.




From m at moshez.org  Mon Sep 30 17:14:11 2002
From: m at moshez.org (Moshe Zadka)
Date: 30 Sep 2002 23:14:11 -0000
Subject: [Twisted-Python] Improvements to twisted.protocols.smtp
In-Reply-To: <200209301501.g8UF1a9u001275@fido.strakt.com>
References: <200209301501.g8UF1a9u001275@fido.strakt.com>
Message-ID: <20020930231411.30455.qmail@green.zadka.com>

On Mon, 30 Sep 2002, Anders Hammarquist <iko at strakt.com> wrote:

> Comments, etc are welcome. The patch is relative to twisted CVS as of a 
> few minutes ago.

Hi!
I have some issues with the code, but I'm currently a bit under the
weather so I find it hard to master the concentration to detail them.
I'll send another e-mail when I will feel better, just wanted
to let you know you're not ignored.




