From hs at ox.cx  Mon Mar  1 03:37:58 2021
From: hs at ox.cx (Hynek Schlawack)
Date: Mon, 1 Mar 2021 11:37:58 +0100
Subject: [Twisted-Python] Post Release updates
In-Reply-To: <CAFycZ9fkRXTdf-6yQQLD_Lnsspy0Zmts5xRLJNPZRqO8ksONaQ@mail.gmail.com>
References: <CAFycZ9fkRXTdf-6yQQLD_Lnsspy0Zmts5xRLJNPZRqO8ksONaQ@mail.gmail.com>
Message-ID: <7FBF59E2-EBF2-4278-A5F2-38047C5FE4C1@ox.cx>



> On 28. Feb 2021, at 21:42, Adi Roiban <adi at roiban.ro> wrote:
> 
> And we have not yet decided if the trunk should be using `.dev` or .post` :(
> 
> https://twistedmatrix.com/trac/ticket/9542
> 
> I am +1 for .post1  ... as it has the semantic of a post release version.
> while .dev0 is a pre-release.

FWIW, I think it’s common (aka _I_ do it that way) that .post are indeed post-releases like a documentation update that doesn’t warrant a proper update. PEP 440 specifies it and RTD has good support for that. E.g. https://www.attrs.org/en/17.3.0.post2/

IIRC Twisted doesn’t bump before the release, which makes this whole workflow unfeasible? But it’s something to keep in mind when deciding.

From adi at roiban.ro  Mon Mar  1 06:30:49 2021
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 1 Mar 2021 13:30:49 +0000
Subject: [Twisted-Python] Developer docs should be updated on wiki when
 steps changed in code?
In-Reply-To: <782E2EA5-E44D-4AC7-ADE5-794C3D9AD9D9@twistedmatrix.com>
References: <CAG=rPVdperfmna51N7_bdtPOtKdKRrZyu3crDFCpCoUrkgSimg@mail.gmail.com>
 <782E2EA5-E44D-4AC7-ADE5-794C3D9AD9D9@twistedmatrix.com>
Message-ID: <CAFycZ9dntjCAxAwTPiYo-xVRy3aNpmmk5iYBgD1BXabVPFG1Qg@mail.gmail.com>

On Wed, 3 Feb 2021 at 18:09, Glyph <glyph at twistedmatrix.com> wrote:

>
> [snip]
>
> I can't quickly find the place where we agreed to this, but I think
> several years ago at this point we had a discussion about moving *all* these
> docs into the source tree.  (If they're on the wiki, there's no review
> process or even a place where updates can be staged for commentary before
> going live and becoming "official".)
>
> Until this is fully completed, what is the correct thing to do when there
> is a mismatch between docs on the wiki, and docs in the tree?
>
>
> Docs in the tree always win.
>
> I still refer to a lot of docs on the wiki, especially for process related
> things,
> so I think it would be nice if the wiki docs were kept up to date, until
> the day that
> they are fully deleted.
>
>
> Let's start deleting them now, and replacing them with links to the
> in-tree docs, rather than updating them.  They've been skewing out of date
> for a long time.  When I was looking for information about how to do a
> revert, I found wiki docs about linking to revisions in Subversion which
> didn't mention Github, which gives a flavor for how outdated some of this
> stuff is.
>
> Thomas, would you mind doing the honors for this document?  Links for
> process docs should probably be to
> https://docs.twistedmatrix.com/en/latest/ since, for process information
> (unlike API information), trunk should be authoritative, not the latest
> release.
>
>
> I don't know what wiki page we are talking about here. Any link would help.

I see this wiki page and it already has a redirection:
https://twistedmatrix.com/trac/wiki/ReleaseProcess

My suggestion is that next time a dev needs to update a wiki page,
she/he/they should consider moving that page to twisted/twisted repo
narrative docs and create a PR for that change.

>From this wiki page https://twistedmatrix.com/trac/wiki/TwistedDevelopment

I see that Security and Review Process are not yet migrated to
narrativedocs.

And I think that "Contributor Advancement Path" can be removed as we now
have an informal processes for giving write access to the repo.

Cheers
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210301/a0da3bb2/attachment.htm>

From rodrigc at crodrigues.org  Mon Mar  1 09:57:56 2021
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 1 Mar 2021 08:57:56 -0800
Subject: [Twisted-Python] Post Release updates
In-Reply-To: <7FBF59E2-EBF2-4278-A5F2-38047C5FE4C1@ox.cx>
References: <CAFycZ9fkRXTdf-6yQQLD_Lnsspy0Zmts5xRLJNPZRqO8ksONaQ@mail.gmail.com>
 <7FBF59E2-EBF2-4278-A5F2-38047C5FE4C1@ox.cx>
Message-ID: <CAG=rPVd=bBPFffAnbwsnqnXC_d8vpPjNUvE+UQOLhr=g8_n8iw@mail.gmail.com>

On Mon, Mar 1, 2021 at 2:38 AM Hynek Schlawack <hs at ox.cx> wrote:

>
> FWIW, I think it’s common (aka _I_ do it that way) that .post are indeed
> post-releases like a documentation update that doesn’t warrant a proper
> update. PEP 440 specifies it and RTD has good support for that. E.g.
> https://www.attrs.org/en/17.3.0.post2/
>
> IIRC Twisted doesn’t bump before the release, which makes this whole
> workflow unfeasible? But it’s something to keep in mind when deciding.
>
>
I had some questions about PEP440, so I asked for feedback from Łukasz
Langa who provided it here:

https://github.com/twisted/twisted/pull/1514#issuecomment-788059407

Basically  Łukasz's feedback was that doing this:

21.2.0.rc1
21.2.0     (this is the release)
21.2.0.post0

is OK.   So in PR 1514, I went with that.


Unfortunately, I ran into a bug in Twisted incremental:

    File "/tmp/pip-req-build-zvf8johl/src/twisted/__init__.py", line 11, in
<module>
      from twisted._version import __version__ as version
    File "/tmp/pip-req-build-zvf8johl/src/twisted/_version.py", line 10, in
<module>
      __version__ = Version("Twisted", 21, 2, 0, post=0)
  TypeError: __init__() got an unexpected keyword argument 'post'

I might need some help to get a fix into incremental and push that out
later today,
so I can complete PR 1514.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210301/9e2e7291/attachment.htm>

From cjwatson at debian.org  Mon Mar  1 10:12:16 2021
From: cjwatson at debian.org (Colin Watson)
Date: Mon, 1 Mar 2021 17:12:16 +0000
Subject: [Twisted-Python] Post Release updates
In-Reply-To: <CAG=rPVd=bBPFffAnbwsnqnXC_d8vpPjNUvE+UQOLhr=g8_n8iw@mail.gmail.com>
References: <CAFycZ9fkRXTdf-6yQQLD_Lnsspy0Zmts5xRLJNPZRqO8ksONaQ@mail.gmail.com>
 <7FBF59E2-EBF2-4278-A5F2-38047C5FE4C1@ox.cx>
 <CAG=rPVd=bBPFffAnbwsnqnXC_d8vpPjNUvE+UQOLhr=g8_n8iw@mail.gmail.com>
Message-ID: <20210301171216.GH13361@riva.ucam.org>

On Mon, Mar 01, 2021 at 08:57:56AM -0800, Craig Rodrigues wrote:
> Unfortunately, I ran into a bug in Twisted incremental:
> 
>     File "/tmp/pip-req-build-zvf8johl/src/twisted/__init__.py", line 11, in
> <module>
>       from twisted._version import __version__ as version
>     File "/tmp/pip-req-build-zvf8johl/src/twisted/_version.py", line 10, in
> <module>
>       __version__ = Version("Twisted", 21, 2, 0, post=0)
>   TypeError: __init__() got an unexpected keyword argument 'post'
> 
> I might need some help to get a fix into incremental and push that out
> later today,
> so I can complete PR 1514.

Isn't this just because incremental hasn't had a release since 17.5.0?
I added post= support way back in
https://github.com/twisted/incremental/pull/37, but that was after
17.5.0.

-- 
Colin Watson (he/him)                              [cjwatson at debian.org]


From twm at freecog.net  Mon Mar  1 11:47:11 2021
From: twm at freecog.net (Tom Most)
Date: Mon, 01 Mar 2021 10:47:11 -0800
Subject: [Twisted-Python] Twisted 21.2.0 Release Announcement
In-Reply-To: <CAG=rPVd9XCmAziMZS7NOKffL1NJQ3tsqGf3hy1=pQ2S-FF7oYg@mail.gmail.com>
References: <CAG=rPVd9XCmAziMZS7NOKffL1NJQ3tsqGf3hy1=pQ2S-FF7oYg@mail.gmail.com>
Message-ID: <d083bb4b-9c89-479c-8aa1-d20328a87726@www.fastmail.com>

Hurrah! Thanks to everyone who contributed!

On Sun, Feb 28, 2021, at 2:27 AM, Craig Rodrigues wrote:
> On behalf of Twisted Matrix Laboratories, I am honored to announce the
> release of Twisted 21.2.0!
> 
> There are two major announcements for this release:
> 
> - *Python 2.7 support has been dropped*.  Twisted 21.2.0 supports Python 3.5.3 and higher only
> - *This will be the last Twisted release to support Python 3.5*.
> 
> Twisted 21.2.0 brings the following:
> - twist dns --pyzone now works on Python 3
> - twisted.web.twcgi now works on Python 3
> - all tests pass on all platforms on Python 3.8, including asyncio tests on Windows
> - tests pass on Python 3.9 (thanks to Michał Górny)
> - type hints, as specified in PEP 484, are now used in functions throughout the codebase
> - mypy (static type checker) is now run over the codebase during CI to help detect problems, and help improve the use of types
> - code in is now formatted with Black (thanks to Tom Most)
> - many CI and automation improvements (thanks to Adi Roiban and Thomas Grainger)
> - many more fixes (225 tickets closed!)
> 
> You can install by running this command:
> 
>       python -m pip install Twisted==21.2.0
> 
> The full tarball is available at:
>     https://pypi.org/project/Twisted/21.2.0/#files
> The full NEWS file with all changes is at:
>     https://github.com/twisted/twisted/blob/twisted-21.2.0/NEWS.rst
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210301/bc9d5088/attachment-0001.htm>

From rodrigc at crodrigues.org  Mon Mar  1 12:13:15 2021
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 1 Mar 2021 11:13:15 -0800
Subject: [Twisted-Python] Need help releasing new version of Twisted
 incremental
In-Reply-To: <20210301171216.GH13361@riva.ucam.org>
References: <CAFycZ9fkRXTdf-6yQQLD_Lnsspy0Zmts5xRLJNPZRqO8ksONaQ@mail.gmail.com>
 <7FBF59E2-EBF2-4278-A5F2-38047C5FE4C1@ox.cx>
 <CAG=rPVd=bBPFffAnbwsnqnXC_d8vpPjNUvE+UQOLhr=g8_n8iw@mail.gmail.com>
 <20210301171216.GH13361@riva.ucam.org>
Message-ID: <CAG=rPVcbxpDRpvOeYye=fNPpKyhd6D2b7vJFcc2mMpJn8XVQ7w@mail.gmail.com>

On Mon, Mar 1, 2021 at 9:13 AM Colin Watson <cjwatson at debian.org> wrote:

>
> Isn't this just because incremental hasn't had a release since 17.5.0?
> I added post= support way back in
> https://github.com/twisted/incremental/pull/37, but that was after
> 17.5.0.
>
>
Oh wow!  You are right.

Can someone help me release a new version of Twisted incremental?
I don't know how to do it.

According to https://pypi.org/project/incremental/ , the latest release was
done in 2017, which does not have Colin's fix.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210301/b8f0d62e/attachment.htm>

From robert.difalco at gmail.com  Mon Mar  1 13:51:21 2021
From: robert.difalco at gmail.com (Robert DiFalco)
Date: Mon, 1 Mar 2021 12:51:21 -0800
Subject: [Twisted-Python] Klein?
Message-ID: <CAAXGW-y0-oUPz3po_OdDH0WUZMmDgMK7JzvoTq9sNV0SnY1rCA@mail.gmail.com>

Is this the right place to ask klein questions? I'm writing a metrics
plugin for Klein and I can't figure out how to inject a metrics handler so
that I can get route, path, duration, and status code. What I'm doing now
sucks because Klein and twisted interact in complex ways on Failure and
status codes.

# Replace the klein _call with the metrics generating call
_app._call = _callWithMetrics

Rather than replace _call with my version of _call I was hoping there was a
cleaner way to get the start and stop with the result code of a route
invocation. Thoughts?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210301/20ade368/attachment.htm>

From sda at fstab.net  Mon Mar  1 16:27:14 2021
From: sda at fstab.net (Kyle Altendorf)
Date: Mon, 01 Mar 2021 18:27:14 -0500
Subject: [Twisted-Python] Need help releasing new version of Twisted
 incremental
In-Reply-To: <CAG=rPVcbxpDRpvOeYye=fNPpKyhd6D2b7vJFcc2mMpJn8XVQ7w@mail.gmail.com>
References: <CAFycZ9fkRXTdf-6yQQLD_Lnsspy0Zmts5xRLJNPZRqO8ksONaQ@mail.gmail.com>
 <7FBF59E2-EBF2-4278-A5F2-38047C5FE4C1@ox.cx>
 <CAG=rPVd=bBPFffAnbwsnqnXC_d8vpPjNUvE+UQOLhr=g8_n8iw@mail.gmail.com>
 <20210301171216.GH13361@riva.ucam.org>
 <CAG=rPVcbxpDRpvOeYye=fNPpKyhd6D2b7vJFcc2mMpJn8XVQ7w@mail.gmail.com>
Message-ID: <2c5bb7c5e99efd9327166e118a54ec57@fstab.net>

On 2021-03-01 14:13, Craig Rodrigues wrote:

> On Mon, Mar 1, 2021 at 9:13 AM Colin Watson <cjwatson at debian.org> 
> wrote:
> 
>> Isn't this just because incremental hasn't had a release since 17.5.0?
>> I added post= support way back in
>> https://github.com/twisted/incremental/pull/37, but that was after
>> 17.5.0.
> 
> Oh wow!  You are right.
> 
> Can someone help me release a new version of Twisted incremental?
> I don't know how to do it.

I would have expected the existing PRs could be handled and that the 
release would have a release branch with a towncrier run and review.

https://github.com/twisted/incremental/pull/67

Cheers,
-kyle


From rodrigc at crodrigues.org  Mon Mar  1 17:25:27 2021
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 1 Mar 2021 16:25:27 -0800
Subject: [Twisted-Python] Need help releasing new version of Twisted
 incremental
In-Reply-To: <2c5bb7c5e99efd9327166e118a54ec57@fstab.net>
References: <CAFycZ9fkRXTdf-6yQQLD_Lnsspy0Zmts5xRLJNPZRqO8ksONaQ@mail.gmail.com>
 <7FBF59E2-EBF2-4278-A5F2-38047C5FE4C1@ox.cx>
 <CAG=rPVd=bBPFffAnbwsnqnXC_d8vpPjNUvE+UQOLhr=g8_n8iw@mail.gmail.com>
 <20210301171216.GH13361@riva.ucam.org>
 <CAG=rPVcbxpDRpvOeYye=fNPpKyhd6D2b7vJFcc2mMpJn8XVQ7w@mail.gmail.com>
 <2c5bb7c5e99efd9327166e118a54ec57@fstab.net>
Message-ID: <CAG=rPVcQGq2wEL7cTUhU+Hocn9qx6Rd5E_rPtFMiYfDeq8epDQ@mail.gmail.com>

On Mon, Mar 1, 2021 at 3:27 PM Kyle Altendorf <sda at fstab.net> wrote:

> On 2021-03-01 14:13, Craig Rodrigues wrote:
>
> > On Mon, Mar 1, 2021 at 9:13 AM Colin Watson <cjwatson at debian.org>
> > wrote:
> >
> >> Isn't this just because incremental hasn't had a release since 17.5.0?
> >> I added post= support way back in
> >> https://github.com/twisted/incremental/pull/37, but that was after
> >> 17.5.0.
> >
> > Oh wow!  You are right.
> >
> > Can someone help me release a new version of Twisted incremental?
> > I don't know how to do it.
>
> I would have expected the existing PRs could be handled and that the
> release would have a release branch with a towncrier run and review.
>
> https://github.com/twisted/incremental/pull/67
>
>
Kyle,

Yes, I did PR 67 in incremental just now.  I have write access to the
twisted/incremental Git repo.
The thing I don't know is how to publish to
https://pypi.org/project/incremental/ and who has access to do that.
Do you see how we can do this?  I'm not so familiar with Pypi.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210301/d40c8e81/attachment.htm>

From glyph at twistedmatrix.com  Mon Mar  1 17:35:46 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 1 Mar 2021 16:35:46 -0800
Subject: [Twisted-Python] Need help releasing new version of Twisted
 incremental
In-Reply-To: <CAG=rPVcbxpDRpvOeYye=fNPpKyhd6D2b7vJFcc2mMpJn8XVQ7w@mail.gmail.com>
References: <CAFycZ9fkRXTdf-6yQQLD_Lnsspy0Zmts5xRLJNPZRqO8ksONaQ@mail.gmail.com>
 <7FBF59E2-EBF2-4278-A5F2-38047C5FE4C1@ox.cx>
 <CAG=rPVd=bBPFffAnbwsnqnXC_d8vpPjNUvE+UQOLhr=g8_n8iw@mail.gmail.com>
 <20210301171216.GH13361@riva.ucam.org>
 <CAG=rPVcbxpDRpvOeYye=fNPpKyhd6D2b7vJFcc2mMpJn8XVQ7w@mail.gmail.com>
Message-ID: <BF9F8707-632D-4302-BE6F-C5429F425139@twistedmatrix.com>


> On Mar 1, 2021, at 11:13 AM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> 
> 
> On Mon, Mar 1, 2021 at 9:13 AM Colin Watson <cjwatson at debian.org <mailto:cjwatson at debian.org>> wrote:
> 
> Isn't this just because incremental hasn't had a release since 17.5.0?
> I added post= support way back in
> https://github.com/twisted/incremental/pull/37 <https://github.com/twisted/incremental/pull/37>, but that was after
> 17.5.0.
> 
> 
> Oh wow!  You are right.
> 
> Can someone help me release a new version of Twisted incremental?
> I don't know how to do it.
> 
> According to https://pypi.org/project/incremental/ <https://pypi.org/project/incremental/> , the latest release was
> done in 2017, which does not have Colin's fix.

Incremental doesn't have any maintainers except Hawkowl, unfortunately, and her responsiveness since COVID has been even lower than mine.  If I see her active online anywhere I'll mention that this is a problem.

-g


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210301/a1b387e4/attachment.htm>

From hawkowl at atleastfornow.net  Mon Mar  1 17:43:48 2021
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Tue, 02 Mar 2021 11:43:48 +1100
Subject: [Twisted-Python] 
 =?utf-8?q?Need_help_releasing_new_version_of_Tw?=
 =?utf-8?q?isted_incremental?=
In-Reply-To: <BF9F8707-632D-4302-BE6F-C5429F425139@twistedmatrix.com>
References: <CAFycZ9fkRXTdf-6yQQLD_Lnsspy0Zmts5xRLJNPZRqO8ksONaQ@mail.gmail.com>
 <7FBF59E2-EBF2-4278-A5F2-38047C5FE4C1@ox.cx>
 <CAG=rPVd=bBPFffAnbwsnqnXC_d8vpPjNUvE+UQOLhr=g8_n8iw@mail.gmail.com>
 <20210301171216.GH13361@riva.ucam.org>
 <CAG=rPVcbxpDRpvOeYye=fNPpKyhd6D2b7vJFcc2mMpJn8XVQ7w@mail.gmail.com>
 <BF9F8707-632D-4302-BE6F-C5429F425139@twistedmatrix.com>
Message-ID: <3919f018-cf35-4047-889c-9fa50f1ec0a1@www.fastmail.com>



On Tue, 2 Mar 2021, at 11:35, Glyph wrote:
> 
> > On Mar 1, 2021, at 11:13 AM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> > 
> > 
> > 
> > On Mon, Mar 1, 2021 at 9:13 AM Colin Watson <cjwatson at debian.org> wrote:
> >> 
> >> Isn't this just because incremental hasn't had a release since 17.5.0?
> >> I added post= support way back in
> >> https://github.com/twisted/incremental/pull/37, but that was after
> >> 17.5.0.
> >> 
> > 
> > Oh wow!  You are right.
> > 
> > Can someone help me release a new version of Twisted incremental?
> > I don't know how to do it.
> > 
> > According to https://pypi.org/project/incremental/ , the latest release was
> > done in 2017, which does not have Colin's fix.
> 
> Incremental doesn't have any maintainers except Hawkowl, unfortunately, 
> and her responsiveness since COVID has been even lower than mine.  If I 
> see her active online anywhere I'll mention that this is a problem.
> 
> -g

The ghost of ADHD present has smiled upon you this day!

I added glyph, JP, and rodrigc as collaborators on the incremental project.

- Amber


From sda at fstab.net  Mon Mar  1 17:47:07 2021
From: sda at fstab.net (Kyle Altendorf)
Date: Mon, 01 Mar 2021 19:47:07 -0500
Subject: [Twisted-Python] Need help releasing new version of Twisted
 incremental
In-Reply-To: <CAG=rPVcQGq2wEL7cTUhU+Hocn9qx6Rd5E_rPtFMiYfDeq8epDQ@mail.gmail.com>
References: <CAFycZ9fkRXTdf-6yQQLD_Lnsspy0Zmts5xRLJNPZRqO8ksONaQ@mail.gmail.com>
 <7FBF59E2-EBF2-4278-A5F2-38047C5FE4C1@ox.cx>
 <CAG=rPVd=bBPFffAnbwsnqnXC_d8vpPjNUvE+UQOLhr=g8_n8iw@mail.gmail.com>
 <20210301171216.GH13361@riva.ucam.org>
 <CAG=rPVcbxpDRpvOeYye=fNPpKyhd6D2b7vJFcc2mMpJn8XVQ7w@mail.gmail.com>
 <2c5bb7c5e99efd9327166e118a54ec57@fstab.net>
 <CAG=rPVcQGq2wEL7cTUhU+Hocn9qx6Rd5E_rPtFMiYfDeq8epDQ@mail.gmail.com>
Message-ID: <b807134ceb4f92c2fe48a5a630fed935@fstab.net>

On 2021-03-01 19:25, Craig Rodrigues wrote:

> On Mon, Mar 1, 2021 at 3:27 PM Kyle Altendorf <sda at fstab.net> wrote:
> 
>> On 2021-03-01 14:13, Craig Rodrigues wrote:
>> 
>>> On Mon, Mar 1, 2021 at 9:13 AM Colin Watson <cjwatson at debian.org>
>>> wrote:
>>> 
>>>> Isn't this just because incremental hasn't had a release since 
>>>> 17.5.0?
>>>> I added post= support way back in
>>>> https://github.com/twisted/incremental/pull/37, but that was after
>>>> 17.5.0.
>>> 
>>> Oh wow!  You are right.
>>> 
>>> Can someone help me release a new version of Twisted incremental?
>>> I don't know how to do it.
>> 
>> I would have expected the existing PRs could be handled and that the
>> release would have a release branch with a towncrier run and review.
>> 
>> https://github.com/twisted/incremental/pull/67
> 
> Kyle,
> 
> Yes, I did PR 67 in incremental just now.  I have write access to the 
> twisted/incremental Git repo.

My point was that you missed a review and you missed running towncrier 
and depending what release process you are following you missed a tag in 
the branch and a post-release-version-change.  You asked about how to 
release but gave no time for response.

Cheers,
-kyle


From rodrigc at crodrigues.org  Mon Mar  1 19:05:16 2021
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 1 Mar 2021 18:05:16 -0800
Subject: [Twisted-Python] Need help releasing new version of Twisted
 incremental
In-Reply-To: <3919f018-cf35-4047-889c-9fa50f1ec0a1@www.fastmail.com>
References: <CAFycZ9fkRXTdf-6yQQLD_Lnsspy0Zmts5xRLJNPZRqO8ksONaQ@mail.gmail.com>
 <7FBF59E2-EBF2-4278-A5F2-38047C5FE4C1@ox.cx>
 <CAG=rPVd=bBPFffAnbwsnqnXC_d8vpPjNUvE+UQOLhr=g8_n8iw@mail.gmail.com>
 <20210301171216.GH13361@riva.ucam.org>
 <CAG=rPVcbxpDRpvOeYye=fNPpKyhd6D2b7vJFcc2mMpJn8XVQ7w@mail.gmail.com>
 <BF9F8707-632D-4302-BE6F-C5429F425139@twistedmatrix.com>
 <3919f018-cf35-4047-889c-9fa50f1ec0a1@www.fastmail.com>
Message-ID: <CAG=rPVcvoPGxQEff0N8m6nJB9=z9gSVA8MLcku7wMwPTeJqc1Q@mail.gmail.com>

On Mon, Mar 1, 2021 at 4:44 PM Amber Brown <hawkowl at atleastfornow.net>
wrote:

>
> The ghost of ADHD present has smiled upon you this day!
>
> I added glyph, JP, and rodrigc as collaborators on the incremental project.
>
>
Wow, thanks!  Nice to see you!

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210301/20a396dd/attachment.htm>

From rodrigc at crodrigues.org  Mon Mar  1 19:07:31 2021
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 1 Mar 2021 18:07:31 -0800
Subject: [Twisted-Python] Need help releasing new version of Twisted
 incremental
In-Reply-To: <b807134ceb4f92c2fe48a5a630fed935@fstab.net>
References: <CAFycZ9fkRXTdf-6yQQLD_Lnsspy0Zmts5xRLJNPZRqO8ksONaQ@mail.gmail.com>
 <7FBF59E2-EBF2-4278-A5F2-38047C5FE4C1@ox.cx>
 <CAG=rPVd=bBPFffAnbwsnqnXC_d8vpPjNUvE+UQOLhr=g8_n8iw@mail.gmail.com>
 <20210301171216.GH13361@riva.ucam.org>
 <CAG=rPVcbxpDRpvOeYye=fNPpKyhd6D2b7vJFcc2mMpJn8XVQ7w@mail.gmail.com>
 <2c5bb7c5e99efd9327166e118a54ec57@fstab.net>
 <CAG=rPVcQGq2wEL7cTUhU+Hocn9qx6Rd5E_rPtFMiYfDeq8epDQ@mail.gmail.com>
 <b807134ceb4f92c2fe48a5a630fed935@fstab.net>
Message-ID: <CAG=rPVc65ALJSidwUXGwtn0nRcX+XBSntEmiKxK7g2xAip-_rQ@mail.gmail.com>

On Mon, Mar 1, 2021 at 4:47 PM Kyle Altendorf <sda at fstab.net> wrote:

>
> My point was that you missed a review and you missed running towncrier
> and depending what release process you are following you missed a tag in
> the branch and a post-release-version-change.  You asked about how to
> release but gave no time for response.
>
>
Ah OK, I see what you are saying.  That makes sense.

hawkowl gave me access to the Twisted incremental pypi,
so I just pushed a release of Twisted Incremental 21.3.0 with all the latest
fixes for post release support.
--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210301/0514ae9c/attachment.htm>

From rodrigc at crodrigues.org  Mon Mar  1 19:46:34 2021
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 1 Mar 2021 18:46:34 -0800
Subject: [Twisted-Python] Post Release updates
In-Reply-To: <20210301171216.GH13361@riva.ucam.org>
References: <CAFycZ9fkRXTdf-6yQQLD_Lnsspy0Zmts5xRLJNPZRqO8ksONaQ@mail.gmail.com>
 <7FBF59E2-EBF2-4278-A5F2-38047C5FE4C1@ox.cx>
 <CAG=rPVd=bBPFffAnbwsnqnXC_d8vpPjNUvE+UQOLhr=g8_n8iw@mail.gmail.com>
 <20210301171216.GH13361@riva.ucam.org>
Message-ID: <CAG=rPVe0MWmZ5Dj7-hk39zQ-at1C+sc2gyV4xrxMLTtmODoB6g@mail.gmail.com>

On Mon, Mar 1, 2021 at 9:13 AM Colin Watson <cjwatson at debian.org> wrote:

>
> Isn't this just because incremental hasn't had a release since 17.5.0?
> I added post= support way back in
> https://github.com/twisted/incremental/pull/37, but that was after
> 17.5.0.
>
> --
> Colin Watson (he/him)                              [cjwatson at debian.org]
>
>
Colin,

You are right.  I have released Twisted incremental 21.3.0 which has your
fixes for PEP 440
compliant post release support.

https://pypi.org/project/incremental/

Thanks for submitting those fixes, and sorry it took so long for it to be
released.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210301/ae08e258/attachment.htm>

From notorious.no at gmail.com  Mon Mar  1 21:15:35 2021
From: notorious.no at gmail.com (Noman Sarker)
Date: Mon, 1 Mar 2021 23:15:35 -0500
Subject: [Twisted-Python] Klein?
In-Reply-To: <CAAXGW-y0-oUPz3po_OdDH0WUZMmDgMK7JzvoTq9sNV0SnY1rCA@mail.gmail.com>
References: <CAAXGW-y0-oUPz3po_OdDH0WUZMmDgMK7JzvoTq9sNV0SnY1rCA@mail.gmail.com>
Message-ID: <CABDBxiRD9cwemP1_SD2XcUyQT60VSdZgf47BOKwir8i6exgsjw@mail.gmail.com>

I've used decorators that execute the route function and then fire a call
back at the end. Here's a quick example of "metrics at the start of a
request and at the end.

```
from functools import wraps
from random import randint
import time

from klein import Klein
from twisted.internet import defer, reactor

def startMetric(f):
    @wraps(f)
    def deco(*args, **kw):
        req = args[1]
        print(f"[x] start:{time.time()} path:{req.path.decode('utf8')}")
        result = defer.maybeDeferred(f, *args, **kw)
        result.addBoth(endMetric, req)
        return result
    return deco

def endMetric(result, req):
    print(f"[x] end:{time.time()} path:{req.path.decode('utf8')}
status:{req.code}")
    return result

class MyApp:

    rtr = Klein()

    @rtr.route("/hello")
    @startMetric
    def hello(self, req):
        d = defer.Deferred()
        delay = randint(1, 5)
        reactor.callLater(delay, d.callback, f"delay:{delay}")
        req.setResponseCode(403, b"whoopsie")
        return d

def main():
    app = MyApp()
    app.rtr.run("localhost", 9999)

main()
```






On Mon, Mar 1, 2021, 15:52 Robert DiFalco <robert.difalco at gmail.com> wrote:

> Is this the right place to ask klein questions? I'm writing a metrics
> plugin for Klein and I can't figure out how to inject a metrics handler so
> that I can get route, path, duration, and status code. What I'm doing now
> sucks because Klein and twisted interact in complex ways on Failure and
> status codes.
>
> # Replace the klein _call with the metrics generating call
> _app._call = _callWithMetrics
>
> Rather than replace _call with my version of _call I was hoping there was
> a cleaner way to get the start and stop with the result code of a route
> invocation. Thoughts?
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210301/eb372820/attachment-0001.htm>

From rodrigc at crodrigues.org  Mon Mar  1 21:35:46 2021
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 1 Mar 2021 20:35:46 -0800
Subject: [Twisted-Python] Twisted 21.2.0 Release Announcement
In-Reply-To: <d083bb4b-9c89-479c-8aa1-d20328a87726@www.fastmail.com>
References: <CAG=rPVd9XCmAziMZS7NOKffL1NJQ3tsqGf3hy1=pQ2S-FF7oYg@mail.gmail.com>
 <d083bb4b-9c89-479c-8aa1-d20328a87726@www.fastmail.com>
Message-ID: <CAG=rPVf8JK29WUTbjBnkUSSeVHJeYbdfc8j5A+s4Vqh7K=Rr8g@mail.gmail.com>

Glyph,

The 21.2.0 release branch is ready for review so that it can be merged back
to trunk:

https://github.com/twisted/twisted/pull/1514

Thanks.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210301/ea45d9fe/attachment.htm>

From tobias.oberstein at gmail.com  Tue Mar  2 13:09:06 2021
From: tobias.oberstein at gmail.com (Tobias Oberstein)
Date: Tue, 2 Mar 2021 21:09:06 +0100
Subject: [Twisted-Python] Twisted v21.2.0 breaks Crossbar.io
Message-ID: <c90c7a48-dc76-f338-bf99-dc60f7514be1@gmail.com>

Hi all,

rgd Twisted v21.2.0, thanks a lot to all involved in this release! the 
release, mypy, more py3, .. +1! really appreciated.

now, fwiw, just wanted to let you know (sorry, too late) about a 
regression with

https://github.com/crossbario/crossbar

that actually originates from

https://github.com/crossbario/autobahn-python/issues/1470

=>

with Twisted v20.3.0 calling 
twisted.internet.protocol.ProcessProtocol.getPeer raises an AttributeError

with Twisted v21.2.0 calling the same method raises an
NotImplementedError

=>

this fix broke our workaround for the bug now fixed;)

https://github.com/crossbario/autobahn-python/pull/1469/files

and released in:

https://pypi.org/project/autobahn/21.3.1/
https://pypi.org/project/crossbar/21.3.1/

Cheers,
/Tobias


From werner at thieprojects.ch  Tue Mar  2 14:09:17 2021
From: werner at thieprojects.ch (Werner Thie)
Date: Tue, 2 Mar 2021 11:09:17 -1000
Subject: [Twisted-Python] Twisted 21.2.0 Release Announcement
In-Reply-To: <CAG=rPVf8JK29WUTbjBnkUSSeVHJeYbdfc8j5A+s4Vqh7K=Rr8g@mail.gmail.com>
References: <CAG=rPVd9XCmAziMZS7NOKffL1NJQ3tsqGf3hy1=pQ2S-FF7oYg@mail.gmail.com>
 <d083bb4b-9c89-479c-8aa1-d20328a87726@www.fastmail.com>
 <CAG=rPVf8JK29WUTbjBnkUSSeVHJeYbdfc8j5A+s4Vqh7K=Rr8g@mail.gmail.com>
Message-ID: <f0355e89-a2ba-3691-77b4-76cfe60d5d75@thieprojects.ch>

On 3/1/21 18:35, Craig Rodrigues wrote:

> Glyph,
>
> The 21.2.0 release branch is ready for review so that it can be merged
> back to trunk:
>
> https://github.com/twisted/twisted/pull/1514
> <https://github.com/twisted/twisted/pull/1514>
>
> Thanks.
>
> --
> Craig
>
Mahalo nui loa for the latest and greatest! I can report that all my
software is now running on Python3 with nevow/athena too, which might
give me some time to dig into the work on chunking the changes in nevow
and feeding them back into the standard twisted development process.

Werner


From rodrigc at crodrigues.org  Tue Mar  2 18:58:44 2021
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 2 Mar 2021 17:58:44 -0800
Subject: [Twisted-Python] Twisted v21.2.0 breaks Crossbar.io
In-Reply-To: <c90c7a48-dc76-f338-bf99-dc60f7514be1@gmail.com>
References: <c90c7a48-dc76-f338-bf99-dc60f7514be1@gmail.com>
Message-ID: <CAG=rPVftug2rfQM+u8vTLnU3yzKMRBuSYkO_wxqgZc+8-daJkw@mail.gmail.com>

On Tue, Mar 2, 2021 at 12:12 PM Tobias Oberstein <tobias.oberstein at gmail.com>
wrote:

>
> this fix broke our workaround for the bug now fixed;)
>
>
I had to read that sentence a few times before I fully understood it, and
my mind did a backflip. :)

Is there a quick and dirty way to run Crossbar's CI against a pre-release
version of Twisted?

For Buildbot (a project that I work with a lot), I just tweaked their CI
like this to run against a branch of Twisted:
https://github.com/buildbot/buildbot/pull/5739
When those tests failed, that helped give some info, and helped me isolate
one thing to fix in Twisted before doing the release.
Povilas Kanapickas and Pierre Tardy from the Buildbot project were very
helpful with this.

I did not run the test suite for Matrix Synapse, but Richard van der Hoff
was very helpful in terms of giving feedback.

Twisted's internal test suite is quite good and comprehensive, but it
doesn't catch everything.
I find it useful to do quick tests against existing projects where possible.

Twisted has been around for around 20 years, and is used *all over the
place*!
--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210302/e65dcff8/attachment.htm>

From exarkun at twistedmatrix.com  Tue Mar  2 19:10:43 2021
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Tue, 2 Mar 2021 21:10:43 -0500
Subject: [Twisted-Python] Twisted v21.2.0 breaks Crossbar.io
In-Reply-To: <c90c7a48-dc76-f338-bf99-dc60f7514be1@gmail.com>
References: <c90c7a48-dc76-f338-bf99-dc60f7514be1@gmail.com>
Message-ID: <CAEeXt4NZKMN1h5avNaPpdGLDnKFw6ZJXN_H1s0kiXWpNgmJ4Qg@mail.gmail.com>

On Tue, Mar 2, 2021 at 3:09 PM Tobias Oberstein <tobias.oberstein at gmail.com>
wrote:

> Hi all,
>
> rgd Twisted v21.2.0, thanks a lot to all involved in this release! the
> release, mypy, more py3, .. +1! really appreciated.
>
> now, fwiw, just wanted to let you know (sorry, too late) about a
> regression with
>
> https://github.com/crossbario/crossbar
>
> that actually originates from
>
> https://github.com/crossbario/autobahn-python/issues/1470
>
> =>
>
> with Twisted v20.3.0 calling
> twisted.internet.protocol.ProcessProtocol.getPeer raises an AttributeError
>
> with Twisted v21.2.0 calling the same method raises an
> NotImplementedError
>
> =>
>
> this fix broke our workaround for the bug now fixed;)
>
> https://github.com/crossbario/autobahn-python/pull/1469/files
>
> and released in:
>
> https://pypi.org/project/autobahn/21.3.1/
> https://pypi.org/project/crossbar/21.3.1/
>
> Cheers,
> /Tobias
>
>
It seems like this change does not actually violate Twisted's compatibility
policy.  This is not to say introducing such regressions is desirable, but
when constructing such work-arounds it might be worth paying
closer-than-average attention to what the policy actually is.

The policy is currently documented at
https://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html#new-attributes
(and that anchor takes you to the section that I think allows the change).

Policy aside, this change doesn't seem like much of an improvement to me.
If I were to guess, I would guess the change was made to satisfy some check
Mypy is now being asked to make about Twisted.  If that's the case, it
seems unfortunate that real-world software is suffering so that a synthetic
goal can be achieved.  I do recognize there is a perception that practical
value can come from attending to the errors Mypy reports.  It would
probably benefit everyone if more care were taken to consider the
real-world consequences of changes that are made to satisfy the
non-real-world goalposts set by tools like Mypy.

Jean-Paul



> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210302/9243e6b6/attachment.htm>

From tobias.oberstein at crossbario.com  Tue Mar  2 19:29:41 2021
From: tobias.oberstein at crossbario.com (Tobias Oberstein)
Date: Wed, 3 Mar 2021 03:29:41 +0100
Subject: [Twisted-Python] Twisted v21.2.0 breaks Crossbar.io
In-Reply-To: <CAG=rPVftug2rfQM+u8vTLnU3yzKMRBuSYkO_wxqgZc+8-daJkw@mail.gmail.com>
References: <c90c7a48-dc76-f338-bf99-dc60f7514be1@gmail.com>
 <CAG=rPVftug2rfQM+u8vTLnU3yzKMRBuSYkO_wxqgZc+8-daJkw@mail.gmail.com>
Message-ID: <abb163a8-9b76-6bd6-722b-0b99fa35cbe1@crossbario.com>

Hi Craig,

thanks for your answer, tips and questions! much appreciated

Am 03.03.21 um 02:58 schrieb Craig Rodrigues:
> 
> On Tue, Mar 2, 2021 at 12:12 PM Tobias Oberstein 
> <tobias.oberstein at gmail.com <mailto:tobias.oberstein at gmail.com>> wrote:
> 
> 
>     this fix broke our workaround for the bug now fixed;)
> 
> 
> I had to read that sentence a few times before I fully understood it, 
> and my mind did a backflip. :)

I hope the grammar is fine (not a native speaker), but it seems to 
express what I wanted to say .. and that has some recursive, mind 
stretching aspect to it, yeah ;)

there are a couple of layers .. eg the specific problem is for sth where 
Twisted itself defines an interface (zope-interface), but then fails to 
implement it.

However, declaring a zope.interface without CI testing it is just 
"documentation". best effort.

But that isn't the last layer: without declaring exactly all interfaces 
formally in the first place, there will always be a gray area, where 
users accidently rely on behavior-as-is, even when that behavior is a 
bug. Then how to reconceile fixing the bug vs stability?

IOW: how can one declare "stability" if the object of that (the API) 
isn't exhaustively and formally defined?

it took me 10min to figure out and fix the bug, but I am still thinking 
about the "why" and the "should" .. and about Rust ;)

> 
> Is there a quick and dirty way to run Crossbar's CI against a 
> pre-release version of Twisted?

Actually, there was a time when we ran Twisted trunk as part of the CI.

Due to complexity managing our deps (~130), and CI run-time, we stopped 
that .. well, not so good. I think this would have warned us early on.

https://github.com/crossbario/crossbar/blob/master/tox.ini

> 
> For Buildbot (a project that I work with a lot), I just tweaked their CI 
> like this to run against a branch of Twisted: 
> https://github.com/buildbot/buildbot/pull/5739
> When those tests failed, that helped give some info, and helped me 
> isolate one thing to fix in Twisted before doing the release.
> Povilas Kanapickas and Pierre Tardy from the Buildbot project were very 
> helpful with this.

That sounds pretty good! congrats.

> 
> I did not run the test suite for Matrix Synapse, but Richard van der 
> Hoff was very helpful in terms of giving feedback.
> 
> Twisted's internal test suite is quite good and comprehensive, but it 
> doesn't catch everything.
> I find it useful to do quick tests against existing projects where possible.
> 
> Twisted has been around for around 20 years, and is used *all over the 
> place*!
> --
> Craig

-- 

Tobias Oberstein - phone +49 176 2375 2055 - tobias.oberstein at crossbario.com
Crossbar.io GmbH - Waldstrasse 18 - 91054 Erlangen
HRB 15870 - Amtsgericht Fuerth - Geschäftsfuehrer/CEO - Tobias Oberstein

https://crossbar.io
https://crossbario.com


From tobias.oberstein at crossbario.com  Tue Mar  2 19:48:24 2021
From: tobias.oberstein at crossbario.com (Tobias Oberstein)
Date: Wed, 3 Mar 2021 03:48:24 +0100
Subject: [Twisted-Python] Twisted v21.2.0 breaks Crossbar.io
In-Reply-To: <CAEeXt4NZKMN1h5avNaPpdGLDnKFw6ZJXN_H1s0kiXWpNgmJ4Qg@mail.gmail.com>
References: <c90c7a48-dc76-f338-bf99-dc60f7514be1@gmail.com>
 <CAEeXt4NZKMN1h5avNaPpdGLDnKFw6ZJXN_H1s0kiXWpNgmJ4Qg@mail.gmail.com>
Message-ID: <2d318533-b552-c62b-cc33-c97791df7a92@crossbario.com>

Hi Jean-Paul,

> It seems like this change does not actually violate Twisted's 
> compatibility policy.  This is not to say introducing such regressions 
> is desirable, but when constructing such work-arounds it might be worth 
> paying closer-than-average attention to what the policy actually is.
> 
> The policy is currently documented at 
> https://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html#new-attributes 

Thanks! I wasn't aware (well, I was, but I never read all the docs;)

That indeed quite precisely hints at sth we did in our workaround: 
relying on the output of dir()

IOW, we should have done

except (AttributeError, NotImplementedError):

in the first place, because that catches both.

on an different angle, I wonder about the relation between both 
exceptions independent of Twisted.

eg "attribute not defined" certainly is an "attribute error"? and in any 
case, a missing attribute means it cannot be implemented?

so it cannot be implemented without making attribute access succeed, right?

but even if that would all be defined, it could not be expressed in 
python. or even statically checked. because that would require some 
machine readable language / decorators / whatever to exhaustively state 
what exceptions can be raised in the first place.

and then, an app developer (crossbar in this case) can make sure and 
test that it does actually have code to treat _all_ exceptions that can 
ever be raised.

anyways, just some ramblings .. python won't give me that, yes.


> (and that anchor takes you to the section that I think allows the change).
> 
> Policy aside, this change doesn't seem like much of an improvement to 
> me.  If I were to guess, I would guess the change was made to satisfy 
> some check Mypy is now being asked to make about Twisted.  If that's the 
> case, it seems unfortunate that real-world software is suffering so that 
> a synthetic goal can be achieved.  I do recognize there is a perception 
> that practical value can come from attending to the errors Mypy 
> reports.  It would probably benefit everyone if more care were taken to 
> consider the real-world consequences of changes that are made to satisfy 
> the non-real-world goalposts set by tools like Mypy.

fwiw, I highly welcome the use of mypy! even with some fallout;) we use 
it too (in crossbarfx).

but ^ might indeed be what happened practically. np, I can deal with it. 
Twisted has been a very reliable, and central piece of our stack - and 
is here to stay! happy user=) and, I guess, all workarounds (mine) 
eventually come back and bite. that's life;)

Cheers,
/Tobias


> 
> Jean-Paul
> 
>     _______________________________________________
>     Twisted-Python mailing list
>     Twisted-Python at twistedmatrix.com
>     <mailto:Twisted-Python at twistedmatrix.com>
>     https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

-- 

Tobias Oberstein - phone +49 176 2375 2055 - tobias.oberstein at crossbario.com
Crossbar.io GmbH - Waldstrasse 18 - 91054 Erlangen
HRB 15870 - Amtsgericht Fuerth - Geschäftsfuehrer/CEO - Tobias Oberstein

https://crossbar.io
https://crossbario.com


From glyph at twistedmatrix.com  Wed Mar  3 01:07:44 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 3 Mar 2021 00:07:44 -0800
Subject: [Twisted-Python] Twisted v21.2.0 breaks Crossbar.io
In-Reply-To: <CAEeXt4NZKMN1h5avNaPpdGLDnKFw6ZJXN_H1s0kiXWpNgmJ4Qg@mail.gmail.com>
References: <c90c7a48-dc76-f338-bf99-dc60f7514be1@gmail.com>
 <CAEeXt4NZKMN1h5avNaPpdGLDnKFw6ZJXN_H1s0kiXWpNgmJ4Qg@mail.gmail.com>
Message-ID: <10F361D4-F098-4C11-B979-ED0076779F58@twistedmatrix.com>


> On Mar 2, 2021, at 6:10 PM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> Policy aside, this change doesn't seem like much of an improvement to me.  If I were to guess, I would guess the change was made to satisfy some check Mypy is now being asked to make about Twisted.  If that's the case, it seems unfortunate that real-world software is suffering so that a synthetic goal can be achieved.  I do recognize there is a perception that practical value can come from attending to the errors Mypy reports.  It would probably benefit everyone if more care were taken to consider the real-world consequences of changes that are made to satisfy the non-real-world goalposts set by tools like Mypy.

I do think that Mypy was likely highlighting a real issue here, and it should have been fixed.  We had documented interfaces already, and we were failing to adhere to them properly, and Mypy was complaining about that.

For easy reference, the change that made these fixes is here https://github.com/twisted/twisted/pull/1298 <https://github.com/twisted/twisted/pull/1298>

This genre of fix is definitely something we should unwind over time, although it does make it easier to start mypy-clean rather than have hundreds of exclusion lines that need to be manually adjusted, so on balance I agree with this tradeoff at the point it was made.

Specifically what I mean by "this genre of fix" is that you can always make mypy happy by transforming code like this:

class Thing:
    pass

Thing().stuff()

into code like this:

class Thing:
    @property
    def stuff(self):
        raise AttributeError("no such thing as `stuff`")

Thing().stuff()

The runtime behavior is the same, but now Mypy can't tell you about this class of bug any more.

So, at some point, we should slowly unwind all `NotImplementedError` methods and find ways to either implement them for real or make their required use raise at import time.

Finally: let's not develop an aversion to new tooling and change because it might create problems; experience over the last few years has shown me that Mypy can catch tons of real bugs and it's well worth getting the codebase to type check.  If we want to prevent breakages like this in the future, the answer is not to stop trying to get linters and typecheckers to run cleanly with arbitrary changes, but to figure out some kind of continuous integration solution that's actually continuous with our downstream dependencies

If dependencies could start testing against Twisted trunk in some capacity, we could get notified close to when unintentionally breaking changes occur, and dependencies can let us know well before the release happens, and we can either revert or they can fix things if the error is on their end.  If initially, say, crossbar and matrix would like to work with us to set up some kind of repeatable pattern we can suggest to others, that would be great.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210303/238728f0/attachment.htm>

From exarkun at twistedmatrix.com  Wed Mar  3 05:58:23 2021
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Wed, 3 Mar 2021 07:58:23 -0500
Subject: [Twisted-Python] Twisted v21.2.0 breaks Crossbar.io
In-Reply-To: <10F361D4-F098-4C11-B979-ED0076779F58@twistedmatrix.com>
References: <c90c7a48-dc76-f338-bf99-dc60f7514be1@gmail.com>
 <CAEeXt4NZKMN1h5avNaPpdGLDnKFw6ZJXN_H1s0kiXWpNgmJ4Qg@mail.gmail.com>
 <10F361D4-F098-4C11-B979-ED0076779F58@twistedmatrix.com>
Message-ID: <CAEeXt4MPb7dESfXLo=VFc6G6yu+5rd9ENSD3Oe0OJMC_DyPHLA@mail.gmail.com>

On Wed, Mar 3, 2021 at 3:08 AM Glyph <glyph at twistedmatrix.com> wrote:

>
> On Mar 2, 2021, at 6:10 PM, Jean-Paul Calderone <exarkun at twistedmatrix.com>
> wrote:
>
> Policy aside, this change doesn't seem like much of an improvement to me.
> If I were to guess, I would guess the change was made to satisfy some check
> Mypy is now being asked to make about Twisted.  If that's the case, it
> seems unfortunate that real-world software is suffering so that a synthetic
> goal can be achieved.  I do recognize there is a perception that practical
> value can come from attending to the errors Mypy reports.  It would
> probably benefit everyone if more care were taken to consider the
> real-world consequences of changes that are made to satisfy the
> non-real-world goalposts set by tools like Mypy.
>
>
> I do think that Mypy was likely highlighting a real issue here, and it
> should have been fixed.  We had documented interfaces already, and we were
> failing to adhere to them properly, and Mypy was complaining about that.
>
> For easy reference, the change that made these fixes is here
> https://github.com/twisted/twisted/pull/1298
>
> This genre of fix is definitely something we should unwind over time,
> although it does make it easier to start mypy-clean rather than have
> hundreds of exclusion lines that need to be manually adjusted, so on
> balance I agree with this tradeoff at the point it was made.
>

Broadly, I agree.  But not with this part.  It seems like there is clearly
a trade-off that is better for everyone.  The trade-off represented by
#1298:

   - Breaks application code without providing any new functionality or
   fixing any bugs
   - Captures a long list of TODOs as an arbitrarily complex collection of
   sources spread across the entire codebase
   - All the work of addressing the problems still remains to be done

 Contrast this with any basic ratchet-style approach (for example, capture
the list of mypy errors, then allow any PR that either removes some or
doesn't add any new ones):

   - At the outset, no application code breaks because nothing has actually
   changed
   - As work towards *fixing* the TODOs progresses, if it *does* break
   application code then at least applications have a chance at some benefit
   - As the work towards fixing the TODOs progresses, maintainers can
   easily look up what issues remain by consulting the list of errors that
   feeds the ratchet-style job.

The exact mechanism for the ratchet isn't the point here.  Maybe Mypy plays
more nicely with inline comments telling it to ignore something, I don't
know.  The point is:

   - A centralized list of stuff left to do is better than a mess smeared
   across the whole codebase
   - If we're going to risk breaking applications we should at least try to
   offer some value to them
   - We shouldn't make applications deal with every change twice when we
   could just disturb them once

Jean-Paul


> Specifically what I mean by "this genre of fix" is that you can always
> make mypy happy by transforming code like this:
>
> class Thing:
>     pass
>
> Thing().stuff()
>
>
> into code like this:
>
> class Thing:
>     @property
>     def stuff(self):
>         raise AttributeError("no such thing as `stuff`")
>
> Thing().stuff()
>
>
> The runtime behavior is the same, but now Mypy can't tell you about this
> class of bug any more.
>
> So, at some point, we should slowly unwind all `NotImplementedError`
> methods and find ways to either implement them for real or make their
> required use raise at import time.
>
> Finally: let's not develop an aversion to new tooling and change because
> it might create problems; experience over the last few years has shown me
> that Mypy can catch *tons* of real bugs and it's well worth getting the
> codebase to type check.  If we want to prevent breakages like this in the
> future, the answer is not to stop trying to get linters and typecheckers to
> run cleanly with arbitrary changes, but to figure out some kind of *continuous
> integration *solution that's actually continuous with our downstream
> dependencies
>
> If dependencies could start testing against Twisted trunk in some
> capacity, we could get notified close to when unintentionally breaking
> changes occur, and dependencies can let us know well before the release
> happens, and we can either revert or they can fix things if the error is on
> their end.  If initially, say, crossbar and matrix would like to work with
> us to set up some kind of repeatable pattern we can suggest to others, that
> would be great.
>
> -g
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210303/54796472/attachment-0001.htm>

From maarten at treewalker.org  Wed Mar  3 08:18:30 2021
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Wed, 03 Mar 2021 16:18:30 +0100
Subject: [Twisted-Python] Release blocker: Use latest pydoctor release ?
In-Reply-To: <CAG=rPVfVz-qR5JRh5KY2h_iFdMht_wLbCgzf4xWxAjSf+gnkFQ@mail.gmail.com>
References: <CAG=rPVfvN-ffDeB8F8FeKk+oQ5wOpwMFiZaXHb=FvVcPcnvcMg@mail.gmail.com>
 <3800548.6F0kUd2T4m@hyperion>
 <CAG=rPVfVz-qR5JRh5KY2h_iFdMht_wLbCgzf4xWxAjSf+gnkFQ@mail.gmail.com>
Message-ID: <2733604.mVcuyOLoWQ@hyperion>

On Sunday, 28 February 2021 23:04:49 CET Craig Rodrigues wrote:

> With respect to API docs, I am not as familiar with the whole process,
> with how they are generated
> and what are doing with readthedocs vs. docs on twistedmatrix.com.
> API docs are generated and don't live in the source tree.
> 
> For example:
> https://twistedmatrix.com/documents/current/api/twisted.html
> 
> Is the long term direction to get rid of that, and point everything at
> readthedocs?

Yes, as far as I know the intention is to reduce the amount of 
infrastructure that has to be maintained by Twisted developers.

Adi is doing the actual work for the migration; I only contribute 
indirectly by reviewing PRs that make pydoctor integrate better with 
Sphinx.

> Since you have done a lot of work in this area, can you shed some
> light on what you think the future direction of all this stuff should
> be with respect to the API docs?

There are efforts to make the output of pydoctor more user friendly. 
This is mainly done by Tristan, but I occasionally work on it as well. 
In the next major release we should have a clearer presentation of 
parameter types, more navigation links and, if it's ready in time, a 
side bar containing a page outline.


The main thing I'm working on is improving accuracy. Currently pydoctor 
can draw conclusions based on incomplete information if import cycles 
are present and with type annotations being added, there are more import 
cycles than before. To solve this, I want to separate the parsing and 
local analysis from the analysis that involves multiple documented 
objects, and run the latter only after all of the former is finished.

On Twisted's side of improving accuracy, we currently have a lot of 
'@type' fields in the docstrings which aren't correct. In particular, 
there is still a lot of fallout from the Python 2 to 3 migration, where 
a documented type of 'str' can either mean 'bytes' or 'str'. I think 
that most '@type' fields should be replaced by type annotations, in 
which case mypy will verify that the documented type matches the type 
that the code is actually using.

Something that might help here is to generate type stubs from the 
information found in docstrings and then automatically apply those stubs 
to Twisted's code. A possible implementation would be for pydoctor to 
export the result of docstring parsing as JSON and then a separate tool 
could generate type stubs from that data.


Twisted's customizations to pydoctor are a bit of a pain, since changes 
in pydoctor break Twisted's API docs quite often. The customizations 
exist in two parts: code and templates.

For the code customizations, these are done using subclassing, so the 
tight coupling makes it hard to change pydoctor's design without 
breaking the customizations. If possible, I'd prefer to remove the need 
for these customizations. If that isn't possible, we'd have to design a 
new plugin interface that is a lot more shielded from pydoctor's 
internals.

For anyone interested, the details are discussed here:
https://github.com/twisted/pydoctor/issues/315

For the template customizations, we're splitting up the templates into 
smaller chunks. This will eliminate or at least greatly reduce the 
amount of copy-pasted template content, which should allow Twisted to 
switch to new major pydoctor reeleases without having to sync the 
template content changes almost every time.

The PR for the template rework is here:
https://github.com/twisted/pydoctor/issues/299

Bye,
		Maarten




From richard at matrix.org  Wed Mar  3 09:25:20 2021
From: richard at matrix.org (Richard van der Hoff)
Date: Wed, 3 Mar 2021 16:25:20 +0000
Subject: [Twisted-Python] Twisted v21.2.0 breaks Crossbar.io
In-Reply-To: <10F361D4-F098-4C11-B979-ED0076779F58@twistedmatrix.com>
References: <c90c7a48-dc76-f338-bf99-dc60f7514be1@gmail.com>
 <CAEeXt4NZKMN1h5avNaPpdGLDnKFw6ZJXN_H1s0kiXWpNgmJ4Qg@mail.gmail.com>
 <10F361D4-F098-4C11-B979-ED0076779F58@twistedmatrix.com>
Message-ID: <bfcc5c1c-2306-67d9-0c21-faef717549ee@matrix.org>


On 03/03/2021 08:07, Glyph wrote:
>
> If dependencies could start testing against Twisted trunk in some 
> capacity, we could get notified close to when unintentionally breaking 
> changes occur, and dependencies can let us know well before the 
> release happens, and we can either revert or they can fix things if 
> the error is on their end.  If initially, say, crossbar and matrix 
> would like to work with us to set up some kind of repeatable pattern 
> we can suggest to others, that would be great.

I'll take this to the Synapse team to discuss further, but we could 
probably easily arrange for one of our CI runs to install Twisted trunk 
from git instead of pypi, which might be a good start.



From glyph at twistedmatrix.com  Wed Mar  3 11:47:06 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 3 Mar 2021 10:47:06 -0800
Subject: [Twisted-Python] Twisted v21.2.0 breaks Crossbar.io
In-Reply-To: <bfcc5c1c-2306-67d9-0c21-faef717549ee@matrix.org>
References: <c90c7a48-dc76-f338-bf99-dc60f7514be1@gmail.com>
 <CAEeXt4NZKMN1h5avNaPpdGLDnKFw6ZJXN_H1s0kiXWpNgmJ4Qg@mail.gmail.com>
 <10F361D4-F098-4C11-B979-ED0076779F58@twistedmatrix.com>
 <bfcc5c1c-2306-67d9-0c21-faef717549ee@matrix.org>
Message-ID: <EF4B7F23-1BDF-407B-863B-507CBA1C29BF@twistedmatrix.com>



> On Mar 3, 2021, at 8:25 AM, Richard van der Hoff <richard at matrix.org> wrote:
> 
> 
> On 03/03/2021 08:07, Glyph wrote:
>> 
>> If dependencies could start testing against Twisted trunk in some capacity, we could get notified close to when unintentionally breaking changes occur, and dependencies can let us know well before the release happens, and we can either revert or they can fix things if the error is on their end.  If initially, say, crossbar and matrix would like to work with us to set up some kind of repeatable pattern we can suggest to others, that would be great.
> 
> I'll take this to the Synapse team to discuss further, but we could probably easily arrange for one of our CI runs to install Twisted trunk from git instead of pypi, which might be a good start.

This is specifically the approach I'd really rather not take :) and here's why:

You want to provide stability for you contributors so that if a problem is introduced, you don't halt development on that unrelated feature to diagnose the upstream issue.

You want to ensure that when users install your software, it works with everything that's currently released.

Ideally your CI configuration would be a timed job which builds against trunk and PR builds that build against a release, and then some process in place for reacting to regressions and filing a ticket upstream with us so we can work out what to do.

Easier said than done though, I know!  I wish we had something like this on Twisted for all of our dependencies, but we have had enough difficulty keeping our CI configuration current based on what cloud provider is falling over this month ;-).

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210303/52fa7f84/attachment.htm>

From glyph at twistedmatrix.com  Wed Mar  3 11:59:12 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 3 Mar 2021 10:59:12 -0800
Subject: [Twisted-Python] Twisted v21.2.0 breaks Crossbar.io
In-Reply-To: <CAEeXt4MPb7dESfXLo=VFc6G6yu+5rd9ENSD3Oe0OJMC_DyPHLA@mail.gmail.com>
References: <c90c7a48-dc76-f338-bf99-dc60f7514be1@gmail.com>
 <CAEeXt4NZKMN1h5avNaPpdGLDnKFw6ZJXN_H1s0kiXWpNgmJ4Qg@mail.gmail.com>
 <10F361D4-F098-4C11-B979-ED0076779F58@twistedmatrix.com>
 <CAEeXt4MPb7dESfXLo=VFc6G6yu+5rd9ENSD3Oe0OJMC_DyPHLA@mail.gmail.com>
Message-ID: <EE4254F1-6892-45AF-9D47-00F048BED3FE@twistedmatrix.com>


> On Mar 3, 2021, at 4:58 AM, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> Broadly, I agree.  But not with this part.  It seems like there is clearly a trade-off that is better for everyone.  The trade-off represented by #1298:
> Breaks application code without providing any new functionality or fixing any bugs
> Captures a long list of TODOs as an arbitrarily complex collection of sources spread across the entire codebase
> All the work of addressing the problems still remains to be done 
> Contrast this with any basic ratchet-style approach (for example, capture the list of mypy errors, then allow any PR that either removes some or doesn't add any new ones):

In principle, I agree.  And some coarse-grained ratchets are absolutely worth doing, when they're supported by the tools - for example, we have one of these with the way we're handling `disallow_untyped_defs` right now.  I wish tools like Mypy would build in ratcheting infrastructure that was easy to use and convenient to deploy.

But in practice this type of ratchet involves a "# type: ignore" at every single call site, as well as delaying shipping stubs or maintaining separate stubs.  As well as building the maladaptive habit that #type:ignore or cast()ing your way out of type errors is the right way to address them in individual features and getting every code reviewer used to that.
> At the outset, no application code breaks because nothing has actually changed
> As work towards fixing the TODOs progresses, if it does break application code then at least applications have a chance at some benefit
> As the work towards fixing the TODOs progresses, maintainers can easily look up what issues remain by consulting the list of errors that feeds the ratchet-style job.
> The exact mechanism for the ratchet isn't the point here.  Maybe Mypy plays more nicely with inline comments telling it to ignore something, I don't know.  The point is:

The "exact mechanism for the ratchet" introduces enough hard problems that it inevitably delays tooling adoption for months or years, reduces the benefits of the tooling adoption (what Twisted users really want are comprehensive stubs, less than Twisted to type-check internally, I think, and this lets us ship them sooner in at least a mostly-usable state).
> A centralized list of stuff left to do is better than a mess smeared across the whole codebase
> If we're going to risk breaking applications we should at least try to offer some value to them
> We shouldn't make applications deal with every change twice when we could just disturb them once

Overall I very much appreciate your criticism and I wish that I could provide clear and concrete steps towards a functioning ratchet for all of these types of tools, but in practice the minor issues caused by the boil-the-ocean approach are an order of magnitude easier to address (and cheaper to leave un-addressed) than the effort required to build ratchets for our contributors that aren't a total nightmare to maintain and interact with.

Case in point: running `black` was a giant earthquake in the codebase but the pain associated with that was a drop in the bucket compared to the lingering, years-long nightmare of our attempt to build a style ratchet with twistedchecker.  In principle what we were trying to do with twistedchecker was very simple, but the practicalities ate us alive.

You could of course quite rightly argue that there were multiple conflated issues at play there!  But that's also the point: there's always a lot of complexity that comes along with trying to do codemod migrations "the right way" when that's going against the grain of the rest of the ecosystem.

I don't love that we've foisted this off onto our users, but I suspect Tobias spent a lot less time fixing the bug here than we've spent writing emails about it at this point ;-).

I look forward to the day where I'm wrong about all of this and every new code quality tool comes with a super easy-to-deploy ratchet, though.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210303/3c71ecab/attachment-0001.htm>

From richard at matrix.org  Wed Mar  3 12:09:43 2021
From: richard at matrix.org (Richard van der Hoff)
Date: Wed, 3 Mar 2021 19:09:43 +0000
Subject: [Twisted-Python] Twisted v21.2.0 breaks Crossbar.io
In-Reply-To: <EF4B7F23-1BDF-407B-863B-507CBA1C29BF@twistedmatrix.com>
References: <c90c7a48-dc76-f338-bf99-dc60f7514be1@gmail.com>
 <CAEeXt4NZKMN1h5avNaPpdGLDnKFw6ZJXN_H1s0kiXWpNgmJ4Qg@mail.gmail.com>
 <10F361D4-F098-4C11-B979-ED0076779F58@twistedmatrix.com>
 <bfcc5c1c-2306-67d9-0c21-faef717549ee@matrix.org>
 <EF4B7F23-1BDF-407B-863B-507CBA1C29BF@twistedmatrix.com>
Message-ID: <2fbedb79-cdbf-092e-b229-2a1878f98997@matrix.org>

On 03/03/2021 18:47, Glyph wrote:
>
>> I'll take this to the Synapse team to discuss further, but we could 
>> probably easily arrange for one of our CI runs to install Twisted 
>> trunk from git instead of pypi, which might be a good start.
>
> This is specifically the approach I'd really rather /not/ take :) and 
> here's why:
>
>  1. You want to provide stability for you contributors so that if a
>     problem is introduced, you don't halt development on that
>     unrelated feature to diagnose the upstream issue.
>
>  2. You want to ensure that when /users/ install your software, it
>     works with everything that's currently released.
>
I'm not sure I follow this. We'd still have CI runs that test against 
*release* Twisted; I'm just proposing that we would *also* test against 
development Twisted.

Your point about not stopping development when there's a problem is well 
noted though. A CI pipeline that runs on a timer might work fine. I'll 
discuss with the team.


> but we have had enough difficulty keeping our CI configuration current 
> based on what cloud provider is falling over this month ;-).

Yes, CI seems to be universally one of those things that is conceptually 
simple but somehow takes hours and hours to maintain.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210303/967ae629/attachment.htm>

From tobias.oberstein at gmail.com  Wed Mar  3 13:45:29 2021
From: tobias.oberstein at gmail.com (Tobias Oberstein)
Date: Wed, 3 Mar 2021 21:45:29 +0100
Subject: [Twisted-Python] Twisted v21.2.0 breaks Crossbar.io
In-Reply-To: <10F361D4-F098-4C11-B979-ED0076779F58@twistedmatrix.com>
References: <c90c7a48-dc76-f338-bf99-dc60f7514be1@gmail.com>
 <CAEeXt4NZKMN1h5avNaPpdGLDnKFw6ZJXN_H1s0kiXWpNgmJ4Qg@mail.gmail.com>
 <10F361D4-F098-4C11-B979-ED0076779F58@twistedmatrix.com>
Message-ID: <a36069be-11b6-32ff-2f5e-0105707b258f@gmail.com>

> on their end.  If initially, say, crossbar and matrix would like to work 
> with us to set up some kind of repeatable pattern we can suggest to 
> others, that would be great.

ok, I'll take that to the team:

https://github.com/crossbario/crossbar/issues/1867

tldr: we could run our CI in 2 sets, one using pinned deps, and one with 
open-ended deps, our latest own master branches _and_ latest Twisted 
(trunk).


From tobias.oberstein at crossbario.com  Wed Mar  3 14:35:31 2021
From: tobias.oberstein at crossbario.com (Tobias Oberstein)
Date: Wed, 3 Mar 2021 22:35:31 +0100
Subject: [Twisted-Python] Twisted v21.2.0 breaks Crossbar.io
In-Reply-To: <2fbedb79-cdbf-092e-b229-2a1878f98997@matrix.org>
References: <c90c7a48-dc76-f338-bf99-dc60f7514be1@gmail.com>
 <CAEeXt4NZKMN1h5avNaPpdGLDnKFw6ZJXN_H1s0kiXWpNgmJ4Qg@mail.gmail.com>
 <10F361D4-F098-4C11-B979-ED0076779F58@twistedmatrix.com>
 <bfcc5c1c-2306-67d9-0c21-faef717549ee@matrix.org>
 <EF4B7F23-1BDF-407B-863B-507CBA1C29BF@twistedmatrix.com>
 <2fbedb79-cdbf-092e-b229-2a1878f98997@matrix.org>
Message-ID: <6cc62d20-8918-1ce4-1c8f-0edf411d3067@crossbario.com>

>> but we have had enough difficulty keeping our CI configuration current 
>> based on what cloud provider is falling over this month ;-).
> 
> Yes, CI seems to be universally one of those things that is conceptually 
> simple but somehow takes hours and hours to maintain.

Absolutely agreed, glad that it's not only me feeling like that=)

If I'd sum up the time I just recently spent on pip, tox, docker, github 
actions, terraform, .. the list goes on, and compare to time actually 
spent on coding, it's depressing.

for our cloud stuff with Crossbar.io, from code-to-live looks like:

GitHub branch (code change) ->
   GitHub actions (CI main) ->
     GitHub master (code merge) ->
        Python wheel (CD "deploy") ->
          Docker image (CD "docker") ->

downstream repo:

            AMI (via Packer) ->
              Terraform (live)


for devices, it looks like:

GitHub branch (code change) ->
   GitHub actions (CI main) ->
     GitHub master (code merge) ->
        Python wheel (CD "deploy") ->
          snap (CD "snap") ->

downstream repo:

            Yocto ->
              S3 -> CDN -> RAUC (live)

----

obviously, a lot of things can go wrong.

one decision we made: all CI/CD pipelines run through a common set of 
Python wheels we build.


From rodrigc at crodrigues.org  Wed Mar  3 21:12:34 2021
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Wed, 3 Mar 2021 20:12:34 -0800
Subject: [Twisted-Python] Release blocker: Use latest pydoctor release ?
In-Reply-To: <2733604.mVcuyOLoWQ@hyperion>
References: <CAG=rPVfvN-ffDeB8F8FeKk+oQ5wOpwMFiZaXHb=FvVcPcnvcMg@mail.gmail.com>
 <3800548.6F0kUd2T4m@hyperion>
 <CAG=rPVfVz-qR5JRh5KY2h_iFdMht_wLbCgzf4xWxAjSf+gnkFQ@mail.gmail.com>
 <2733604.mVcuyOLoWQ@hyperion>
Message-ID: <CAG=rPVe5thddz+DvXM5=aSCb5RtbOr2dePzv3m+vXTZ78EpaJw@mail.gmail.com>

On Wed, Mar 3, 2021 at 7:18 AM Maarten ter Huurne <maarten at treewalker.org>
wrote:

>
> Yes, as far as I know the intention is to reduce the amount of
> infrastructure that has to be maintained by Twisted developers.
>
> Adi is doing the actual work for the migration; I only contribute
> indirectly by reviewing PRs that make pydoctor integrate better with
> Sphinx.
>
> There are efforts to make the output of pydoctor more user friendly.
> This is mainly done by Tristan, but I occasionally work on it as well.
> In the next major release we should have a clearer presentation of
> parameter types, more navigation links and, if it's ready in time, a
> side bar containing a page outline.
>

Maarten,

Thanks for the detailed explanation of what you, Adi, and Tristan
are working towards.  That is a lot of hard work!

I think that using the type annotations in the code for documentation,
rather than the Epydoc @type markup tag is WAY better than what we have now.

>From what you have described, there are only a few more tasks to go before
this goal is fully completed, and the docs are published with the new
pydoctor.

I'm looking forward to the end result!

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210303/71ef6f0e/attachment.htm>

From glyph at twistedmatrix.com  Thu Mar  4 00:11:32 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 3 Mar 2021 23:11:32 -0800
Subject: [Twisted-Python] [Twisted-web] Twisted 21.2.0 Release
 Announcement
In-Reply-To: <CAG=rPVd9XCmAziMZS7NOKffL1NJQ3tsqGf3hy1=pQ2S-FF7oYg@mail.gmail.com>
References: <CAG=rPVd9XCmAziMZS7NOKffL1NJQ3tsqGf3hy1=pQ2S-FF7oYg@mail.gmail.com>
Message-ID: <F54969CC-3E9F-4564-8844-D7D3C6D19855@twistedmatrix.com>


> On Feb 28, 2021, at 2:27 AM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> On behalf of Twisted Matrix Laboratories, I am honored to announce the
> release of Twisted 21.2.0!

Thank you so much for shepherding this release to completion, Craig.  It's so good to have a recent release out in the world again!  Looking forward to the many process improvements that have landed as well, and having more frequent releases produced by automation!

-g




From glyph at twistedmatrix.com  Thu Mar  4 00:12:57 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 3 Mar 2021 23:12:57 -0800
Subject: [Twisted-Python] Klein?
In-Reply-To: <CAAXGW-y0-oUPz3po_OdDH0WUZMmDgMK7JzvoTq9sNV0SnY1rCA@mail.gmail.com>
References: <CAAXGW-y0-oUPz3po_OdDH0WUZMmDgMK7JzvoTq9sNV0SnY1rCA@mail.gmail.com>
Message-ID: <2E5135C8-7B0F-4462-B377-1B88F8BB0E06@twistedmatrix.com>



> On Mar 1, 2021, at 12:51 PM, Robert DiFalco <robert.difalco at gmail.com> wrote:
> 
> Is this the right place to ask klein questions?

Absolutely, it's a Twisted org project.

> I'm writing a metrics plugin for Klein and I can't figure out how to inject a metrics handler so that I can get route, path, duration, and status code. What I'm doing now sucks because Klein and twisted interact in complex ways on Failure and status codes. 
> # Replace the klein _call with the metrics generating call
> _app._call = _callWithMetrics
> Rather than replace _call with my version of _call I was hoping there was a cleaner way to get the start and stop with the result code of a route invocation. Thoughts?


It sounds like you should contribute a patch that makes this an explicitly-supported pluggable entrypoint, rather than relying on a hack.  No need to figure out a way to make it work with existing versions, the magic of open source is that you can change it :).

Feel free to ping here when it's done to remind folks to do a review.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210303/9cdaed1d/attachment-0001.htm>

From glyph at twistedmatrix.com  Thu Mar  4 00:16:27 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 3 Mar 2021 23:16:27 -0800
Subject: [Twisted-Python] Developer docs should be updated on wiki when
 steps changed in code?
In-Reply-To: <CAFycZ9dntjCAxAwTPiYo-xVRy3aNpmmk5iYBgD1BXabVPFG1Qg@mail.gmail.com>
References: <CAG=rPVdperfmna51N7_bdtPOtKdKRrZyu3crDFCpCoUrkgSimg@mail.gmail.com>
 <782E2EA5-E44D-4AC7-ADE5-794C3D9AD9D9@twistedmatrix.com>
 <CAFycZ9dntjCAxAwTPiYo-xVRy3aNpmmk5iYBgD1BXabVPFG1Qg@mail.gmail.com>
Message-ID: <54CCB006-1FCD-4814-80A2-FED8CA61D104@twistedmatrix.com>



> On Mar 1, 2021, at 5:30 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> 
> 
> On Wed, 3 Feb 2021 at 18:09, Glyph <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> [snip]
> 
> I can't quickly find the place where we agreed to this, but I think several years ago at this point we had a discussion about moving all these docs into the source tree.  (If they're on the wiki, there's no review process or even a place where updates can be staged for commentary before going live and becoming "official".)
> 
>> Until this is fully completed, what is the correct thing to do when there is a mismatch between docs on the wiki, and docs in the tree?
> 
> Docs in the tree always win.
> 
>> I still refer to a lot of docs on the wiki, especially for process related things,
>> so I think it would be nice if the wiki docs were kept up to date, until the day that
>> they are fully deleted.
> 
> Let's start deleting them now, and replacing them with links to the in-tree docs, rather than updating them.  They've been skewing out of date for a long time.  When I was looking for information about how to do a revert, I found wiki docs about linking to revisions in Subversion which didn't mention Github, which gives a flavor for how outdated some of this stuff is.
> 
> Thomas, would you mind doing the honors for this document?  Links for process docs should probably be to https://docs.twistedmatrix.com/en/latest/ <https://docs.twistedmatrix.com/en/latest/> since, for process information (unlike API information), trunk should be authoritative, not the latest release.
> 
> 
> I don't know what wiki page we are talking about here. Any link would help.

Upthread (in the [snip]'d part), Craig referenced https://twistedmatrix.com/trac/wiki/TwistedDevelopment <https://twistedmatrix.com/trac/wiki/TwistedDevelopment>, and I thought we'd migrated some stuff from there.  If not, never mind.

> I see this wiki page and it already has a redirection: https://twistedmatrix.com/trac/wiki/ReleaseProcess <https://twistedmatrix.com/trac/wiki/ReleaseProcess>
> 
> My suggestion is that next time a dev needs to update a wiki page, she/he/they should consider moving that page to twisted/twisted repo
> narrative docs and create a PR for that change.

Sounds good to me.

> From this wiki page https://twistedmatrix.com/trac/wiki/TwistedDevelopment <https://twistedmatrix.com/trac/wiki/TwistedDevelopment>
> 
> I see that Security and Review Process are not yet migrated to narrativedocs.

Does someone want to go file tickets for those?

> And I think that "Contributor Advancement Path" can be removed as we now have an informal processes for giving write access to the repo.

Perhaps this proposal has been rejected but I think we should leave a stub in there saying that we could really use some help with a formal process.  The informal process is sort of necessary at the moment, but implicit processes tend to overlook quieter people, and people who are less sure of themselves in the open source social context.  However, improving this process is going to be some work, and we'll have to find someone willing to do it.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210303/63b63926/attachment.htm>

From werner at thieprojects.ch  Thu Mar  4 11:24:22 2021
From: werner at thieprojects.ch (Werner Thie)
Date: Thu, 4 Mar 2021 08:24:22 -1000
Subject: [Twisted-Python] conch bytes/str traceback when /etc/ssh/moduli is
 not present
Message-ID: <1ac9787d-c583-abba-de9b-7c4edf8d88ec@thieprojects.ch>

Aloha

should the case of a missing moduli file be handled more gracefully than
with a traceback or is this a bug?

I was running into this problem when installing on different OSs with
OSX and FreeBSD not having an /etc/ssh/moduli file by default.

Mahalo, Werner

2021-03-04T15:04:51+0100 [builtins.ConchSSHFactory#info] disabling
non-fixed-group key exchange algorithms because we cannot find moduli file
2021-03-04T15:04:51+0100 [builtins.ConchSSHFactory] Unhandled Error
    Traceback (most recent call last):
      File
"/Users/anon/.pyenv/versions/3.7.10/lib/python3.7/site-packages/twisted/python/log.py",
line 85, in callWithContext
        return context.call({ILogContext: newCtx}, func, *args, **kw)
      File
"/Users/anon/.pyenv/versions/3.7.10/lib/python3.7/site-packages/twisted/python/context.py",
line 118, in callWithContext
        return self.currentContext().callWithContext(ctx, func, *args,
**kw)
      File
"/Users/anon/.pyenv/versions/3.7.10/lib/python3.7/site-packages/twisted/python/context.py",
line 83, in callWithContext
        return func(*args, **kw)
      File
"/Users/anon/.pyenv/versions/3.7.10/lib/python3.7/site-packages/twisted/internet/selectreactor.py",
line 149, in _doReadOrWrite
        why = getattr(selectable, method)()
    --- <exception caught here> ---
      File
"/Users/anon/.pyenv/versions/3.7.10/lib/python3.7/site-packages/twisted/internet/tcp.py",
line 1403, in doRead
        protocol.makeConnection(transport)
      File
"/Users/anon/.pyenv/versions/3.7.10/lib/python3.7/site-packages/twisted/internet/protocol.py",
line 508, in makeConnection
        self.connectionMade()
      File
"/Users/anon/.pyenv/versions/3.7.10/lib/python3.7/site-packages/twisted/conch/ssh/transport.py",
line 512, in connectionMade
        self.sendKexInit()
      File
"/Users/anon/.pyenv/versions/3.7.10/lib/python3.7/site-packages/twisted/conch/ssh/transport.py",
line 535, in sendKexInit
        NS(b",".join(self.supportedPublicKeys)),
    builtins.TypeError: sequence item 0: expected a bytes-like object,
str found

2021-03-04T15:04:51+0100
[twisted.conch.ssh.transport.SSHServerTransport#info] Disconnecting with
error, code 3
    reason: b"couldn't match all kex parts"
2021-03-04T15:04:51+0100
[twisted.conch.ssh.transport.SSHServerTransport#info] connection lost


From glyph at twistedmatrix.com  Thu Mar  4 11:51:31 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 4 Mar 2021 10:51:31 -0800
Subject: [Twisted-Python] conch bytes/str traceback when /etc/ssh/moduli
 is not present
In-Reply-To: <1ac9787d-c583-abba-de9b-7c4edf8d88ec@thieprojects.ch>
References: <1ac9787d-c583-abba-de9b-7c4edf8d88ec@thieprojects.ch>
Message-ID: <42C6CD80-1085-415F-A2AA-FD097448FA6D@twistedmatrix.com>

Even if we want a traceback, a TypeError on str/bytes seems like the wrong kind to have.  Please file a bug (and open a PR, if you can :-)).

-g

> On Mar 4, 2021, at 10:24 AM, Werner Thie <werner at thieprojects.ch> wrote:
> 
> Aloha
> 
> should the case of a missing moduli file be handled more gracefully than
> with a traceback or is this a bug?
> 
> I was running into this problem when installing on different OSs with
> OSX and FreeBSD not having an /etc/ssh/moduli file by default.
> 
> Mahalo, Werner
> 
> 2021-03-04T15:04:51+0100 [builtins.ConchSSHFactory#info] disabling
> non-fixed-group key exchange algorithms because we cannot find moduli file
> 2021-03-04T15:04:51+0100 [builtins.ConchSSHFactory] Unhandled Error
>     Traceback (most recent call last):
>       File
> "/Users/anon/.pyenv/versions/3.7.10/lib/python3.7/site-packages/twisted/python/log.py",
> line 85, in callWithContext
>         return context.call({ILogContext: newCtx}, func, *args, **kw)
>       File
> "/Users/anon/.pyenv/versions/3.7.10/lib/python3.7/site-packages/twisted/python/context.py",
> line 118, in callWithContext
>         return self.currentContext().callWithContext(ctx, func, *args,
> **kw)
>       File
> "/Users/anon/.pyenv/versions/3.7.10/lib/python3.7/site-packages/twisted/python/context.py",
> line 83, in callWithContext
>         return func(*args, **kw)
>       File
> "/Users/anon/.pyenv/versions/3.7.10/lib/python3.7/site-packages/twisted/internet/selectreactor.py",
> line 149, in _doReadOrWrite
>         why = getattr(selectable, method)()
>     --- <exception caught here> ---
>       File
> "/Users/anon/.pyenv/versions/3.7.10/lib/python3.7/site-packages/twisted/internet/tcp.py",
> line 1403, in doRead
>         protocol.makeConnection(transport)
>       File
> "/Users/anon/.pyenv/versions/3.7.10/lib/python3.7/site-packages/twisted/internet/protocol.py",
> line 508, in makeConnection
>         self.connectionMade()
>       File
> "/Users/anon/.pyenv/versions/3.7.10/lib/python3.7/site-packages/twisted/conch/ssh/transport.py",
> line 512, in connectionMade
>         self.sendKexInit()
>       File
> "/Users/anon/.pyenv/versions/3.7.10/lib/python3.7/site-packages/twisted/conch/ssh/transport.py",
> line 535, in sendKexInit
>         NS(b",".join(self.supportedPublicKeys)),
>     builtins.TypeError: sequence item 0: expected a bytes-like object,
> str found
> 
> 2021-03-04T15:04:51+0100
> [twisted.conch.ssh.transport.SSHServerTransport#info] Disconnecting with
> error, code 3
>     reason: b"couldn't match all kex parts"
> 2021-03-04T15:04:51+0100
> [twisted.conch.ssh.transport.SSHServerTransport#info] connection lost
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From werner at thieprojects.ch  Thu Mar  4 16:02:10 2021
From: werner at thieprojects.ch (Werner Thie)
Date: Thu, 4 Mar 2021 13:02:10 -1000
Subject: [Twisted-Python] conch bytes/str traceback when /etc/ssh/moduli
 is not present
In-Reply-To: <42C6CD80-1085-415F-A2AA-FD097448FA6D@twistedmatrix.com>
References: <1ac9787d-c583-abba-de9b-7c4edf8d88ec@thieprojects.ch>
 <42C6CD80-1085-415F-A2AA-FD097448FA6D@twistedmatrix.com>
Message-ID: <63a53229-7044-981e-aef7-2d77f5e1e679@thieprojects.ch>

On 3/4/21 08:51, Glyph wrote:

> Even if we want a traceback, a TypeError on str/bytes seems like the wrong kind to have.  Please file a bug (and open a PR, if you can :-)).
>
> -g

Investigating I would say that with all the possibilities to configure
for the moduli file to be found it is my fault to not have configured it
properly for all the platforms I wanted to deploy to. On the other hand
the basic assumption that moduli lives on BSDs in the /usr/local/etc/ssh
directory seems now to become outdated, so the only change would be
changing the default search location for the moduli file which again
seems not to be warranted.

Mahalo, Werner


From glyph at twistedmatrix.com  Thu Mar  4 17:16:59 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 4 Mar 2021 16:16:59 -0800
Subject: [Twisted-Python] conch bytes/str traceback when /etc/ssh/moduli
 is not present
In-Reply-To: <63a53229-7044-981e-aef7-2d77f5e1e679@thieprojects.ch>
References: <1ac9787d-c583-abba-de9b-7c4edf8d88ec@thieprojects.ch>
 <42C6CD80-1085-415F-A2AA-FD097448FA6D@twistedmatrix.com>
 <63a53229-7044-981e-aef7-2d77f5e1e679@thieprojects.ch>
Message-ID: <55A230E3-45DD-4557-BF52-D2F8483CFD23@twistedmatrix.com>



> On Mar 4, 2021, at 3:02 PM, Werner Thie <werner at thieprojects.ch> wrote:
> 
> On 3/4/21 08:51, Glyph wrote:
> 
>> Even if we want a traceback, a TypeError on str/bytes seems like the wrong kind to have.  Please file a bug (and open a PR, if you can :-)).
>> 
>> -g
> 
> Investigating I would say that with all the possibilities to configure
> for the moduli file to be found it is my fault to not have configured it
> properly for all the platforms I wanted to deploy to. On the other hand
> the basic assumption that moduli lives on BSDs in the /usr/local/etc/ssh
> directory seems now to become outdated, so the only change would be
> changing the default search location for the moduli file which again
> seems not to be warranted.
> 
> Mahalo, Werner

There are a bunch of tickets you could file here:

Fixing the search path to comport with modern standards
Automatically generating a new one in a writable location if none exists
Better handle the case where it really truly doesn't exist and can't be generated (read-only filesystem or no readily discoverable, secure read/write locations)

and in fact probably all of these are valid :)

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210304/d2b1d6c9/attachment.htm>

From robert.difalco at gmail.com  Thu Mar  4 22:01:35 2021
From: robert.difalco at gmail.com (Robert DiFalco)
Date: Thu, 4 Mar 2021 21:01:35 -0800
Subject: [Twisted-Python] Klein?
In-Reply-To: <2E5135C8-7B0F-4462-B377-1B88F8BB0E06@twistedmatrix.com>
References: <CAAXGW-y0-oUPz3po_OdDH0WUZMmDgMK7JzvoTq9sNV0SnY1rCA@mail.gmail.com>
 <2E5135C8-7B0F-4462-B377-1B88F8BB0E06@twistedmatrix.com>
Message-ID: <CAAXGW-xzdJyEjZZXtXAP9v_gXh4sp4waXfmp7NepzyWrzHt7wg@mail.gmail.com>

Thanks! The trick will be figuring out how to handle Python exception
vs werkzeug exception, and the branched, error handling routes etc.
Currently this is the sort of data structure I'm posting to Data Dog. But I
can make it a pluggable observer-type idiom so anything can receive these
metrics.

tags=[
    "path:{}.{}.{}".format(module, className, method),
    "blocking:{}".format(isBlocking),
    "module:{}".format(module),
    "class:{}".format(className),
    "method:{}".format(method),
    "status_code:{}".format(request_code),
    "status_code_class:{}xx".format(status_code_class),
]
metrics.timing("my.rest.endpoint", elapsed, tags=tags)

I don't have it quite right yet. It's hard to get the status code, deal
with unhandled exceptions, etc. But I'll post questions here when I'm
closer.

On Wed, Mar 3, 2021 at 11:13 PM Glyph <glyph at twistedmatrix.com> wrote:

>
>
> On Mar 1, 2021, at 12:51 PM, Robert DiFalco <robert.difalco at gmail.com>
> wrote:
>
> Is this the right place to ask klein questions?
>
>
> Absolutely, it's a Twisted org project.
>
> I'm writing a metrics plugin for Klein and I can't figure out how to
> inject a metrics handler so that I can get route, path, duration, and
> status code. What I'm doing now sucks because Klein and twisted interact in
> complex ways on Failure and status codes.
>
> # Replace the klein _call with the metrics generating call
> _app._call = _callWithMetrics
>
> Rather than replace _call with my version of _call I was hoping there was
> a cleaner way to get the start and stop with the result code of a route
> invocation. Thoughts?
>
>
> It sounds like you should contribute a patch that makes this an
> explicitly-supported pluggable entrypoint, rather than relying on a hack.
> No need to figure out a way to make it work with existing versions, the
> magic of open source is that you can change it :).
>
> Feel free to ping here when it's done to remind folks to do a review.
>
> -g
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210304/82a7d84c/attachment.htm>

From glyph at twistedmatrix.com  Thu Mar  4 23:42:18 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 4 Mar 2021 22:42:18 -0800
Subject: [Twisted-Python] Klein?
In-Reply-To: <CAAXGW-xzdJyEjZZXtXAP9v_gXh4sp4waXfmp7NepzyWrzHt7wg@mail.gmail.com>
References: <CAAXGW-y0-oUPz3po_OdDH0WUZMmDgMK7JzvoTq9sNV0SnY1rCA@mail.gmail.com>
 <2E5135C8-7B0F-4462-B377-1B88F8BB0E06@twistedmatrix.com>
 <CAAXGW-xzdJyEjZZXtXAP9v_gXh4sp4waXfmp7NepzyWrzHt7wg@mail.gmail.com>
Message-ID: <23B820D9-A337-4BF0-9F8A-8F64D39271A0@twistedmatrix.com>



> On Mar 4, 2021, at 9:01 PM, Robert DiFalco <robert.difalco at gmail.com> wrote:
> 
> Thanks! The trick will be figuring out how to handle Python exception vs werkzeug exception, and the branched, error handling routes etc. Currently this is the sort of data structure I'm posting to Data Dog. But I can make it a pluggable observer-type idiom so anything can receive these metrics. 
> 
> tags=[
>     "path:{}.{}.{}".format(module, className, method),
>     "blocking:{}".format(isBlocking),
>     "module:{}".format(module),
>     "class:{}".format(className),
>     "method:{}".format(method),
>     "status_code:{}".format(request_code),
>     "status_code_class:{}xx".format(status_code_class),
> ]
> metrics.timing("my.rest.endpoint", elapsed, tags=tags)
> I don't have it quite right yet. It's hard to get the status code, deal with unhandled exceptions, etc. But I'll post questions here when I'm closer. 
> 

Nifty. Thanks for working on this.  I look forward to your PR!

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210304/37bb23ac/attachment-0001.htm>

From cjwatson at debian.org  Fri Mar  5 04:24:06 2021
From: cjwatson at debian.org (Colin Watson)
Date: Fri, 5 Mar 2021 11:24:06 +0000
Subject: [Twisted-Python] conch bytes/str traceback when /etc/ssh/moduli
 is not present
In-Reply-To: <55A230E3-45DD-4557-BF52-D2F8483CFD23@twistedmatrix.com>
References: <1ac9787d-c583-abba-de9b-7c4edf8d88ec@thieprojects.ch>
 <42C6CD80-1085-415F-A2AA-FD097448FA6D@twistedmatrix.com>
 <63a53229-7044-981e-aef7-2d77f5e1e679@thieprojects.ch>
 <55A230E3-45DD-4557-BF52-D2F8483CFD23@twistedmatrix.com>
Message-ID: <20210305112406.GD26923@riva.ucam.org>

On Thu, Mar 04, 2021 at 04:16:59PM -0800, Glyph wrote:
> There are a bunch of tickets you could file here:
> 
> Fixing the search path to comport with modern standards
> Automatically generating a new one in a writable location if none exists
> Better handle the case where it really truly doesn't exist and can't be generated (read-only filesystem or no readily discoverable, secure read/write locations)
> 
> and in fact probably all of these are valid :)

Probably not the second.  Generating a new set of suitable DH moduli
takes a while (IIRC hours) - it's not something you'd want to do as part
of any kind of interactive process.

-- 
Colin Watson (he/him)                              [cjwatson at debian.org]


From glyph at twistedmatrix.com  Fri Mar  5 16:54:28 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 5 Mar 2021 15:54:28 -0800
Subject: [Twisted-Python] conch bytes/str traceback when /etc/ssh/moduli
 is not present
In-Reply-To: <20210305112406.GD26923@riva.ucam.org>
References: <1ac9787d-c583-abba-de9b-7c4edf8d88ec@thieprojects.ch>
 <42C6CD80-1085-415F-A2AA-FD097448FA6D@twistedmatrix.com>
 <63a53229-7044-981e-aef7-2d77f5e1e679@thieprojects.ch>
 <55A230E3-45DD-4557-BF52-D2F8483CFD23@twistedmatrix.com>
 <20210305112406.GD26923@riva.ucam.org>
Message-ID: <800F1A9C-6CC0-4314-B122-527FD200144B@twistedmatrix.com>



> On Mar 5, 2021, at 3:24 AM, Colin Watson <cjwatson at debian.org> wrote:
> 
> On Thu, Mar 04, 2021 at 04:16:59PM -0800, Glyph wrote:
>> There are a bunch of tickets you could file here:
>> 
>> Fixing the search path to comport with modern standards
>> Automatically generating a new one in a writable location if none exists
>> Better handle the case where it really truly doesn't exist and can't be generated (read-only filesystem or no readily discoverable, secure read/write locations)
>> 
>> and in fact probably all of these are valid :)
> 
> Probably not the second.  Generating a new set of suitable DH moduli
> takes a while (IIRC hours) - it's not something you'd want to do as part
> of any kind of interactive process.

For what it's worth, `ssh-keygen -G` on my laptop took 2 and a half minutes, `ssh-keygen -T` took 5.  It's slow, maybe even too slow for interactive use, but not quite "hours".

-g

From werner at thieprojects.ch  Fri Mar  5 17:57:02 2021
From: werner at thieprojects.ch (Werner Thie)
Date: Fri, 5 Mar 2021 14:57:02 -1000
Subject: [Twisted-Python] conch bytes/str traceback when /etc/ssh/moduli
 is not present
In-Reply-To: <800F1A9C-6CC0-4314-B122-527FD200144B@twistedmatrix.com>
References: <1ac9787d-c583-abba-de9b-7c4edf8d88ec@thieprojects.ch>
 <42C6CD80-1085-415F-A2AA-FD097448FA6D@twistedmatrix.com>
 <63a53229-7044-981e-aef7-2d77f5e1e679@thieprojects.ch>
 <55A230E3-45DD-4557-BF52-D2F8483CFD23@twistedmatrix.com>
 <20210305112406.GD26923@riva.ucam.org>
 <800F1A9C-6CC0-4314-B122-527FD200144B@twistedmatrix.com>
Message-ID: <baa4c5f0-ed32-50bb-7351-05afe71e1c7f@thieprojects.ch>

On 3/5/21 13:54, Glyph wrote:

>
>> On Mar 5, 2021, at 3:24 AM, Colin Watson <cjwatson at debian.org> wrote:
>>
>> On Thu, Mar 04, 2021 at 04:16:59PM -0800, Glyph wrote:
>>> There are a bunch of tickets you could file here:
>>>
>>> Fixing the search path to comport with modern standards
>>> Automatically generating a new one in a writable location if none exists
>>> Better handle the case where it really truly doesn't exist and can't be generated (read-only filesystem or no readily discoverable, secure read/write locations)
>>>
>>> and in fact probably all of these are valid :)
>> Probably not the second.  Generating a new set of suitable DH moduli
>> takes a while (IIRC hours) - it's not something you'd want to do as part
>> of any kind of interactive process.
> For what it's worth, `ssh-keygen -G` on my laptop took 2 and a half minutes, `ssh-keygen -T` took 5.  It's slow, maybe even too slow for interactive use, but not quite "hours".

Just reporting back that conch is now working for me, it was entirely my
fault configuring the server. There is quite a mixture of bytes and
strings to configure, now the mix is right and sessions come up ok no
problem.

Mahalo, Werner


From trac at twistedmatrix.com  Sun Mar  7 00:05:19 2021
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 07 Mar 2021 07:05:19 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1615100719.33.4309465340263934596@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210307/a8867b07/attachment.htm>

From adi at roiban.ro  Sun Mar  7 10:40:31 2021
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 7 Mar 2021 17:40:31 +0000
Subject: [Twisted-Python] Post Release updates
In-Reply-To: <CAFycZ9fkRXTdf-6yQQLD_Lnsspy0Zmts5xRLJNPZRqO8ksONaQ@mail.gmail.com>
References: <CAFycZ9fkRXTdf-6yQQLD_Lnsspy0Zmts5xRLJNPZRqO8ksONaQ@mail.gmail.com>
Message-ID: <CAFycZ9dp2HBc0oNeyYwiFzt6Jt3b8NsMfkU21sH-i-K7XVkC6g@mail.gmail.com>

On Sun, 28 Feb 2021 at 20:42, Adi Roiban <adi at roiban.ro> wrote:

> Hi,
>
> [snip]
>


> ----------
>
> The https://twistedmatrix.com/documents/current/ documentation was not
> updated.
> But that can be solved after the release.
> I will see if I can update it tonight... and I will check over IRC to see
> if someone else has fixed it.
> First, I am looking at the Read the docs release issues... it looks like
> things are not as automated as we though :D
>
> -------------
>
> I have no idea why the latest tag is not visible on Read the docs
> https://readthedocs.org/projects/twisted/versions/
>
> I have manually activated it based on the f1daeeee tag.
> I went to
> https://readthedocs.org/projects/twisted/versions/?version_filter=twisted-21.2.0
> and then clicked "Activate"
>
> Then I went to https://readthedocs.org/dashboard/twisted/advanced/ and
> select it as "Default" version
> and then click "Save"
>
> Then I went to https://readthedocs.org/projects/twisted/builds/ to check
> the status of the new build.
>
> I see that we now have - https://docs.twistedmatrix.com/en/twisted-21.2.0/
>
> But https://docs.twistedmatrix.com/en/stable/ is still an older build :(
>
> I have no idea why... looks like stable is not active and what is
> origin/8690
>
> [image: image.png]
>
> Maybe Read The Docs is confused by `twisted-21.2.0` as it doesn't look
> like a semantic version .
>
> ----------
>
> Stable was building for
>
> https://github.com/twisted/twisted/commit/99137f53a8a6bd1d8bffa5202373236162daf94e
>
> See RTD stable build
> https://readthedocs.org/projects/twisted/builds/13125823/
>
> So I have wiped the stable version and now it gets 404.
>
> I (or someone else from the team) will have check with Read The Docs team
> to see why we have this issue with the stable version.
>
> [snip]

FYI I have created this ticket to track the documentation migration
progress to Read The Docs.
https://twistedmatrix.com/trac/ticket/10117

We are close, but not there yet.

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210307/33e8e969/attachment.htm>

From chris at withers.org  Sun Mar  7 12:12:52 2021
From: chris at withers.org (Chris Withers)
Date: Sun, 7 Mar 2021 19:12:52 +0000
Subject: [Twisted-Python] automat question
Message-ID: <9fd8f31a-53fc-9afa-89c5-da3f4d418bf2@withers.org>

Hi,

Apologies if there's a better list for this, please let me know where...

I've grown to like Glyph's automat package a lot, but in a current 
project, I have observers that need to know when a machine changes state.

What's the best way to let those observers know?

cheers,

Chris


From glyph at twistedmatrix.com  Sun Mar  7 15:34:13 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 7 Mar 2021 14:34:13 -0800
Subject: [Twisted-Python] automat question
In-Reply-To: <9fd8f31a-53fc-9afa-89c5-da3f4d418bf2@withers.org>
References: <9fd8f31a-53fc-9afa-89c5-da3f4d418bf2@withers.org>
Message-ID: <etPan.604557d0.238e1f29.9eb@fastmail.com>

Automat is designed to make this sort of thing intentionally annoying, as you have discovered:).  

The idea is that if you want to know this sort of internal state, it’s for a specific reason. That's not a blanket "No" — see for example how automat deals with serialization — but each such interface should be minimal and thoughtfully designed. Otherwise a state machine library just becomes a bunch of complex infrastructure around making an arbitrary series of function calls, and loses all of its helpful formalisms.  

So probably we do need to make a change to automat if you really need to do this, but first it's important to know what your use-case is. In a lot of cases the answer is "just make an output. Stop trying to make the application see into the guts of the framework." But without knowing it’s impossible to say!  

-g
> Hi,
>  
> Apologies if there's a better list for this, please let me know where...
>  
> I've grown to like Glyph's automat package a lot, but in a current
> project, I have observers that need to know when a machine changes state.
>  
> What's the best way to let those observers know?
>  
> cheers,
>  
> Chris
>  
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210307/6555c3db/attachment.htm>

From chris at withers.org  Tue Mar  9 04:18:15 2021
From: chris at withers.org (Chris Withers)
Date: Tue, 9 Mar 2021 11:18:15 +0000
Subject: [Twisted-Python] automat question
In-Reply-To: <etPan.604557d0.238e1f29.9eb@fastmail.com>
References: <9fd8f31a-53fc-9afa-89c5-da3f4d418bf2@withers.org>
 <etPan.604557d0.238e1f29.9eb@fastmail.com>
Message-ID: <a716ef02-44ae-953c-4be5-2b830e1f070c@withers.org>

I'm not sure we're quite on the same page: I'm not looking to inspect 
the state, but more be notified when certain edges are traversed.

That said: what's the best practice when you want to visualize the 
current state of a machine? In this case, the machine is for a unit of 
work in a scheduling app, and the UI has a list of these units where 
it'd make sense to show the current state.

The unit of work also forms the boundary API between the from end object 
model and the pool/scheduling back end. As such, each side can naturally 
call inputs methods on the machine, as I believe automat intends, but 
it's how to get notified by an output?

So, the front end may want to say "I no longer need this UoW done, 
please kill it", the back end then needs to run the code to kill 
whatever's running the UoW.
Likewise, when the backend finishes a UoW, it wants to call either 
machine.result(...) or machine.error(...) to say what happened, but how 
do I wire in the front end bit that needs to get called when this happens?

cheers,

Chris

On 07/03/2021 22:34, Glyph wrote:
> Automat is designed to make this sort of thing intentionally annoying, 
> as you have discovered:).
>
> The idea is that if you want to know this sort of internal state, it’s 
> for a specific reason. That's not a blanket "No" — see for example how 
> automat deals with serialization — but each such interface should be 
> minimal and thoughtfully designed. Otherwise a state machine library 
> just becomes a bunch of complex infrastructure around making an 
> arbitrary series of function calls, and loses all of its helpful 
> formalisms.
>
> So probably we do need to make a change to automat if you really need 
> to do this, but first it's important to know what your use-case is. In 
> a lot of cases the answer is "just make an output. Stop trying to make 
> the application see into the guts of the framework." But without 
> knowing it’s impossible to say!
>
> -g
>> Hi,
>>
>> Apologies if there's a better list for this, please let me know where...
>>
>> I've grown to like Glyph's automat package a lot, but in a current
>> project, I have observers that need to know when a machine changes state.
>>
>> What's the best way to let those observers know?
>>
>> cheers,
>>
>> Chris
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210309/eeb57377/attachment.htm>

From peter.westlake at pobox.com  Tue Mar  9 05:54:46 2021
From: peter.westlake at pobox.com (Peter Westlake)
Date: Tue, 09 Mar 2021 12:54:46 +0000
Subject: [Twisted-Python] Strange recursion error with twisted.web
Message-ID: <c714688a-1b7e-4194-812c-88658a2713d2@www.fastmail.com>

I'm getting a "maximum recursion depth exceeded" error that appears to be coming from flatten(). The odd thing is that it only happens sometimes. The HTML that's being flattened does have a few Deferreds in it. Those come from function calls, which cache the results, which might explain why I only see the error on the first visit to the page (as far as I can tell). 

The system recursion limit is the standard 1000. My HTML is only nested a few tags deep, two orders of magnitude short of that. Is there anything about the way flatten() works that might cause this behaviour?

Peter.


From glyph at twistedmatrix.com  Tue Mar  9 11:53:03 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 9 Mar 2021 10:53:03 -0800
Subject: [Twisted-Python] automat question
In-Reply-To: <a716ef02-44ae-953c-4be5-2b830e1f070c@withers.org>
References: <9fd8f31a-53fc-9afa-89c5-da3f4d418bf2@withers.org>
 <etPan.604557d0.238e1f29.9eb@fastmail.com>
 <a716ef02-44ae-953c-4be5-2b830e1f070c@withers.org>
Message-ID: <73E6642F-31B5-4D12-976F-A56A309C13F5@twistedmatrix.com>


> On Mar 9, 2021, at 3:18 AM, Chris Withers <chris at withers.org> wrote:
> 
> I'm not sure we're quite on the same page: I'm not looking to inspect the state, but more be notified when certain edges are traversed.

The way you get notified when an edge is traversed is you add an output to that edge :).

When I was talking about "internal state", what I meant was not the literal current state atom of the machine, but the presence and names of states and edges themselves.  Within the abstraction of the state machine, the way you find out that an edge was traversed by having an output run.

> That said: what's the best practice when you want to visualize the current state of a machine? In this case, the machine is for a unit of work in a scheduling app, and the UI has a list of these units where it'd make sense to show the current state.

This is definitely a gap.  I think today the best way to do this would be to have an event emitted by an output that invokes the serialization code to discover the state and have the UI show that.

> The unit of work also forms the boundary API between the from end object model and the pool/scheduling back end. As such, each side can naturally call inputs methods on the machine, as I believe automat intends, but it's how to get notified by an output?

The output can just... call a UI observer?

> So, the front end may want to say "I no longer need this UoW done, please kill it", the back end then needs to run the code to kill whatever's running the UoW.
> Likewise, when the backend finishes a UoW, it wants to call either machine.result(...) or machine.error(...) to say what happened, but how do I wire in the front end bit that needs to get called when this happens?

Again... have outputs.  I think there's something you're leaving out about how you want to have some generalized output, but without knowing a bit more it's hard to say how it could help more :).

-g

> 
> cheers,
> 
> Chris
> 
> On 07/03/2021 22:34, Glyph wrote:
>> Automat is designed to make this sort of thing intentionally annoying, as you have discovered:).
>> 
>> The idea is that if you want to know this sort of internal state, it’s for a specific reason. That's not a blanket "No" — see for example how automat deals with serialization — but each such interface should be minimal and thoughtfully designed. Otherwise a state machine library just becomes a bunch of complex infrastructure around making an arbitrary series of function calls, and loses all of its helpful formalisms.
>> 
>> So probably we do need to make a change to automat if you really need to do this, but first it's important to know what your use-case is. In a lot of cases the answer is "just make an output. Stop trying to make the application see into the guts of the framework." But without knowing it’s impossible to say!
>> 
>> -g
>>> Hi,
>>> 
>>> Apologies if there's a better list for this, please let me know where...
>>> 
>>> I've grown to like Glyph's automat package a lot, but in a current 
>>> project, I have observers that need to know when a machine changes state.
>>> 
>>> What's the best way to let those observers know?
>>> 
>>> cheers,
>>> 
>>> Chris
>>> 
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>> 
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210309/2c01069e/attachment-0001.htm>

From glyph at twistedmatrix.com  Tue Mar  9 12:28:05 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 9 Mar 2021 11:28:05 -0800
Subject: [Twisted-Python] Strange recursion error with twisted.web
In-Reply-To: <c714688a-1b7e-4194-812c-88658a2713d2@www.fastmail.com>
References: <c714688a-1b7e-4194-812c-88658a2713d2@www.fastmail.com>
Message-ID: <E96ABD6E-25EC-4F88-857D-EBC9E59ACA02@twistedmatrix.com>



> On Mar 9, 2021, at 4:54 AM, Peter Westlake <peter.westlake at pobox.com> wrote:
> 
> I'm getting a "maximum recursion depth exceeded" error that appears to be coming from flatten(). The odd thing is that it only happens sometimes. The HTML that's being flattened does have a few Deferreds in it. Those come from function calls, which cache the results, which might explain why I only see the error on the first visit to the page (as far as I can tell). 
> 
> The system recursion limit is the standard 1000. My HTML is only nested a few tags deep, two orders of magnitude short of that. Is there anything about the way flatten() works that might cause this behaviour?

flatten() can definitely result in some deep recursive stacks, particularly in combination with synchronous Deferreds which have their own accumulating stack costs. I'd be interested to see a minimal reproducer for this though, I'm sure we could do a lot better.

-g



From peter.westlake at pobox.com  Tue Mar  9 17:27:44 2021
From: peter.westlake at pobox.com (Peter Westlake)
Date: Wed, 10 Mar 2021 00:27:44 +0000
Subject: [Twisted-Python] Strange recursion error with twisted.web
In-Reply-To: <E96ABD6E-25EC-4F88-857D-EBC9E59ACA02@twistedmatrix.com>
References: <c714688a-1b7e-4194-812c-88658a2713d2@www.fastmail.com>
 <E96ABD6E-25EC-4F88-857D-EBC9E59ACA02@twistedmatrix.com>
Message-ID: <8c43cb8a-6ed1-4a59-86ae-fb27785053e3@www.fastmail.com>



On Tue, 9 Mar 2021, at 19:28, Glyph wrote:
> 
> 
> > On Mar 9, 2021, at 4:54 AM, Peter Westlake <peter.westlake at pobox.com> wrote:
> > 
> > I'm getting a "maximum recursion depth exceeded" error that appears to be coming from flatten(). The odd thing is that it only happens sometimes.
> 
> flatten() can definitely result in some deep recursive stacks, 
> particularly in combination with synchronous Deferreds which have their 
> own accumulating stack costs. I'd be interested to see a minimal 
> reproducer for this though, I'm sure we could do a lot better.

It’s good to know that this isn’t completely unexpected. I’ll try to reproduce it, thanks.

Peter.


From peter.westlake at pobox.com  Wed Mar 10 04:09:36 2021
From: peter.westlake at pobox.com (Peter Westlake)
Date: Wed, 10 Mar 2021 11:09:36 +0000
Subject: [Twisted-Python] Strange recursion error with twisted.web
In-Reply-To: <E96ABD6E-25EC-4F88-857D-EBC9E59ACA02@twistedmatrix.com>
References: <c714688a-1b7e-4194-812c-88658a2713d2@www.fastmail.com>
 <E96ABD6E-25EC-4F88-857D-EBC9E59ACA02@twistedmatrix.com>
Message-ID: <c0363752-27cf-4bec-97c4-101531eea766@www.fastmail.com>

On Tue, 9 Mar 2021, at 19:28, Glyph wrote:
> 
> 
> > On Mar 9, 2021, at 4:54 AM, Peter Westlake <peter.westlake at pobox.com> wrote:
> > 
> > I'm getting a "maximum recursion depth exceeded" error that appears to be coming from flatten(). The odd thing is that it only happens sometimes. The HTML that's being flattened does have a few Deferreds in it. Those come from function calls, which cache the results, which might explain why I only see the error on the first visit to the page (as far as I can tell). 
> > 
> > The system recursion limit is the standard 1000. My HTML is only nested a few tags deep, two orders of magnitude short of that. Is there anything about the way flatten() works that might cause this behaviour?
> 
> flatten() can definitely result in some deep recursive stacks, 
> particularly in combination with synchronous Deferreds which have their 
> own accumulating stack costs. I'd be interested to see a minimal 
> reproducer for this though, I'm sure we could do a lot better.

Here it is:

import sys
from twisted.internet import reactor, defer, task
from twisted.web.template import flatten

def output(stuff):
    sys.stdout.write(stuff.decode())

def sync(reactor):
    return flatten(None, [defer.succeed(str(i)+'\n') for i in range(1000)], output)

task.react(sync)


It fails after printing 197 lines. The same sort of thing using deferLater instead of defer.succeed printed 1000 without error.

Peter.







From borepstein at gmail.com  Wed Mar 10 11:23:05 2021
From: borepstein at gmail.com (Boris Epstein)
Date: Wed, 10 Mar 2021 13:23:05 -0500
Subject: [Twisted-Python] code contribution/participation policy
In-Reply-To: <070269B8-7931-41B1-8FF6-97EE54E5EE0D@twistedmatrix.com>
References: <CADeF1XGfzb8WYUkCN9pJ20_7fkf=jDehyJkxO92oSO6OFQCrJw@mail.gmail.com>
 <CAMTx_3BEGy=d8PZ_euzaT1YJgm01Dzgxr1pQAxvFnDSNym4TbQ@mail.gmail.com>
 <92EC7A79-EB92-4517-B0DE-3F3C8DD3237C@twistedmatrix.com>
 <CADeF1XGAWAgrf43G4_8NfvN97mHWcHjWNcT7gGCMLfCC2HrsTQ@mail.gmail.com>
 <CADeF1XGqUFmZcAgnpHT=0Tc54uM8Lbqj_JhUHEJzR8hU23WBNQ@mail.gmail.com>
 <CAG=rPVdFb5HuS=w-1rNya7wCiqcJ=JNLwQ80JzpJa1Y9v-6_QA@mail.gmail.com>
 <CADeF1XGKhJRQGh=4ckfQaKXoiefDnRahggQP9afefHH7QghHUQ@mail.gmail.com>
 <070269B8-7931-41B1-8FF6-97EE54E5EE0D@twistedmatrix.com>
Message-ID: <CADeF1XGY52y3Wb7qKTUsUA=X8Poq9BcCcHWTrMrO+-azXOdcZQ@mail.gmail.com>

Hello all,

Thank you.

Just submitted my first PR into the Twisted repo. Hopefully it is all good.

Here's the relevant ticket:
https://twistedmatrix.com/trac/ticket/9951

Cheers,

Boris.

On Mon, Sep 14, 2020 at 1:49 PM Glyph <glyph at twistedmatrix.com> wrote:

>
>
> On Sep 14, 2020, at 10:11 AM, Boris Epstein <borepstein at gmail.com> wrote:
>
> Hello Craig,
>
> Thanks. So basically you just work on the main Git repo, not on a clone -
> and you do the pull directly, not submit a pull request?
>
> Boris.
>
>
> Hi Boris,
>
> No, not at all.  Work on your clone, and submit a PR as normal.  The PR
> template should walk you through the rest.
>
> -g
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210310/9c6f8858/attachment.htm>

From glyph at twistedmatrix.com  Wed Mar 10 16:11:06 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 10 Mar 2021 15:11:06 -0800
Subject: [Twisted-Python] Strange recursion error with twisted.web
In-Reply-To: <c0363752-27cf-4bec-97c4-101531eea766@www.fastmail.com>
References: <c714688a-1b7e-4194-812c-88658a2713d2@www.fastmail.com>
 <E96ABD6E-25EC-4F88-857D-EBC9E59ACA02@twistedmatrix.com>
 <c0363752-27cf-4bec-97c4-101531eea766@www.fastmail.com>
Message-ID: <DA2AE2F5-D800-4DC5-975A-1BC6B0110EC7@twistedmatrix.com>



> On Mar 10, 2021, at 3:09 AM, Peter Westlake <peter.westlake at pobox.com> wrote:
> 
> On Tue, 9 Mar 2021, at 19:28, Glyph wrote:
>> 
>> 
>>> On Mar 9, 2021, at 4:54 AM, Peter Westlake <peter.westlake at pobox.com> wrote:
>>> 
>>> I'm getting a "maximum recursion depth exceeded" error that appears to be coming from flatten(). The odd thing is that it only happens sometimes. The HTML that's being flattened does have a few Deferreds in it. Those come from function calls, which cache the results, which might explain why I only see the error on the first visit to the page (as far as I can tell). 
>>> 
>>> The system recursion limit is the standard 1000. My HTML is only nested a few tags deep, two orders of magnitude short of that. Is there anything about the way flatten() works that might cause this behaviour?
>> 
>> flatten() can definitely result in some deep recursive stacks, 
>> particularly in combination with synchronous Deferreds which have their 
>> own accumulating stack costs. I'd be interested to see a minimal 
>> reproducer for this though, I'm sure we could do a lot better.
> 
> Here it is:
> 
> import sys
> from twisted.internet import reactor, defer, task
> from twisted.web.template import flatten
> 
> def output(stuff):
>    sys.stdout.write(stuff.decode())
> 
> def sync(reactor):
>    return flatten(None, [defer.succeed(str(i)+'\n') for i in range(1000)], output)
> 
> task.react(sync)
> 
> 
> It fails after printing 197 lines. The same sort of thing using deferLater instead of defer.succeed printed 1000 without error.
> 
> Peter.

Would you mind filing a ticket in trac, or digging one up if you can find it? This problem rings a bell, and I think I might actually have some code for this lying around somewhere already.

-g

From peter.westlake at pobox.com  Thu Mar 11 05:12:50 2021
From: peter.westlake at pobox.com (Peter Westlake)
Date: Thu, 11 Mar 2021 12:12:50 +0000
Subject: [Twisted-Python] Strange recursion error with twisted.web
In-Reply-To: <DA2AE2F5-D800-4DC5-975A-1BC6B0110EC7@twistedmatrix.com>
References: <c714688a-1b7e-4194-812c-88658a2713d2@www.fastmail.com>
 <E96ABD6E-25EC-4F88-857D-EBC9E59ACA02@twistedmatrix.com>
 <c0363752-27cf-4bec-97c4-101531eea766@www.fastmail.com>
 <DA2AE2F5-D800-4DC5-975A-1BC6B0110EC7@twistedmatrix.com>
Message-ID: <e01d6fad-985a-411a-a9c6-2c29e281b8d6@www.fastmail.com>

On Wed, 10 Mar 2021, at 23:11, Glyph wrote:
>
> Would you mind filing a ticket in trac, or digging one up if you can 
> find it? This problem rings a bell, and I think I might actually have 
> some code for this lying around somewhere already.

Here is it: https://twistedmatrix.com/trac/ticket/10125#ticket

thanks,

Peter.


From ian at haywood.id.au  Thu Mar 11 21:42:09 2021
From: ian at haywood.id.au (Ian Haywood)
Date: Fri, 12 Mar 2021 15:42:09 +1100
Subject: [Twisted-Python] reactor for Linux io_uring
In-Reply-To: <F741CA12-4B49-4FD2-A87E-142B4B964B10@twistedmatrix.com>
References: <4a472ae0-4961-7b32-07cf-5fb5cf0fa7e2@haywood.id.au>
 <9820060.nUPlyArG6x@fpbarry>
 <CAEeXt4Od1SDTWSB9ryeDUzc2b6ewOOJB7waLwfdDEBa4XAqyAg@mail.gmail.com>
 <CAFycZ9cHLW9QTLeMfDVP61Y+o2Ji93pW4Av_qBTYSGuDL9GYOQ@mail.gmail.com>
 <c918c7ba-5ec3-84c7-51e9-07505bca784e@haywood.id.au>
 <66870E3A-6FA9-466B-B1FB-E263A882EFC2@twistedmatrix.com>
 <c86de384-e48f-9567-260d-438440fd2634@haywood.id.au>
 <F741CA12-4B49-4FD2-A87E-142B4B964B10@twistedmatrix.com>
Message-ID: <e8f04d74-77c4-62ca-66e9-a159e9b77af3@haywood.id.au>

On 11/01/2021 8:26 pm, Glyph wrote:
> seems somewhat irrelevant to the "asynchronous filesystem" part of 
> this PR - do you think you could do a smaller version of this which 
> decouples it from smb and ctypes?
>> but yes both can be spun out easily, so it's just the interface and a 
>> plain portable threads-based implementation. Where in the twisted 
>> tree should the interface and implementation go?
>>> (It would also be nice to have an interface that acts as an 
>>> IProducer to integrate more natively with Twisted's support for 
>>> backpressure rather than only having a custom readChunk method.  I 
>>> think readChunk is still necessary for completeness since you need 
>>> to be able to seek and offset, though.)
>>
>> certainly will look at this. It fits well with FTP's filesystem 
>> interaction.
>>
OK this is done. I have changed the name to "asyncfs" in the hope this 
is more informative.

https://twistedmatrix.com/trac/ticket/10079

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210312/ab38de72/attachment.htm>

From tobias.oberstein at gmail.com  Fri Mar 12 01:21:40 2021
From: tobias.oberstein at gmail.com (Tobias Oberstein)
Date: Fri, 12 Mar 2021 09:21:40 +0100
Subject: [Twisted-Python] reactor for Linux io_uring
In-Reply-To: <e8f04d74-77c4-62ca-66e9-a159e9b77af3@haywood.id.au>
References: <4a472ae0-4961-7b32-07cf-5fb5cf0fa7e2@haywood.id.au>
 <9820060.nUPlyArG6x@fpbarry>
 <CAEeXt4Od1SDTWSB9ryeDUzc2b6ewOOJB7waLwfdDEBa4XAqyAg@mail.gmail.com>
 <CAFycZ9cHLW9QTLeMfDVP61Y+o2Ji93pW4Av_qBTYSGuDL9GYOQ@mail.gmail.com>
 <c918c7ba-5ec3-84c7-51e9-07505bca784e@haywood.id.au>
 <66870E3A-6FA9-466B-B1FB-E263A882EFC2@twistedmatrix.com>
 <c86de384-e48f-9567-260d-438440fd2634@haywood.id.au>
 <F741CA12-4B49-4FD2-A87E-142B4B964B10@twistedmatrix.com>
 <e8f04d74-77c4-62ca-66e9-a159e9b77af3@haywood.id.au>
Message-ID: <c5cf2281-272a-2be8-901d-db594652cea3@gmail.com>

sorry, I missed the beginning of the thread / discussion: are you 
working on a new, full Twisted reactor on top of io_uring?

and async filesystem is "just" one part / additional effort in that?

Am 12.03.21 um 05:42 schrieb Ian Haywood:
> On 11/01/2021 8:26 pm, Glyph wrote:
>> seems somewhat irrelevant to the "asynchronous filesystem" part of 
>> this PR - do you think you could do a smaller version of this which 
>> decouples it from smb and ctypes?
>>> but yes both can be spun out easily, so it's just the interface and a 
>>> plain portable threads-based implementation. Where in the twisted 
>>> tree should the interface and implementation go?
>>>> (It would also be nice to have an interface that acts as an 
>>>> IProducer to integrate more natively with Twisted's support for 
>>>> backpressure rather than only having a custom readChunk method.  I 
>>>> think readChunk is still necessary for completeness since you need 
>>>> to be able to seek and offset, though.)
>>>
>>> certainly will look at this. It fits well with FTP's filesystem 
>>> interaction.
>>>
> OK this is done. I have changed the name to "asyncfs" in the hope this 
> is more informative.
> 
> https://twistedmatrix.com/trac/ticket/10079
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 


From ian at haywood.id.au  Fri Mar 12 01:59:55 2021
From: ian at haywood.id.au (Ian Haywood)
Date: Fri, 12 Mar 2021 19:59:55 +1100
Subject: [Twisted-Python] reactor for Linux io_uring
In-Reply-To: <c5cf2281-272a-2be8-901d-db594652cea3@gmail.com>
References: <4a472ae0-4961-7b32-07cf-5fb5cf0fa7e2@haywood.id.au>
 <9820060.nUPlyArG6x@fpbarry>
 <CAEeXt4Od1SDTWSB9ryeDUzc2b6ewOOJB7waLwfdDEBa4XAqyAg@mail.gmail.com>
 <CAFycZ9cHLW9QTLeMfDVP61Y+o2Ji93pW4Av_qBTYSGuDL9GYOQ@mail.gmail.com>
 <c918c7ba-5ec3-84c7-51e9-07505bca784e@haywood.id.au>
 <66870E3A-6FA9-466B-B1FB-E263A882EFC2@twistedmatrix.com>
 <c86de384-e48f-9567-260d-438440fd2634@haywood.id.au>
 <F741CA12-4B49-4FD2-A87E-142B4B964B10@twistedmatrix.com>
 <e8f04d74-77c4-62ca-66e9-a159e9b77af3@haywood.id.au>
 <c5cf2281-272a-2be8-901d-db594652cea3@gmail.com>
Message-ID: <d4f13d33-af1d-f027-aee2-8536288744c6@haywood.id.au>

On 12/03/2021 7:21 pm, Tobias Oberstein wrote:
> sorry, I missed the beginning of the thread / discussion: are you 
> working on a new, full Twisted reactor on top of io_uring?
>
> and async filesystem is "just" one part / additional effort in that? 
the advantage of io_uring is being able to combine file and network I/O, 
so this PR is a precondition to working on the reactor.


From tobias.oberstein at crossbario.com  Fri Mar 12 02:29:25 2021
From: tobias.oberstein at crossbario.com (Tobias Oberstein)
Date: Fri, 12 Mar 2021 10:29:25 +0100
Subject: [Twisted-Python] reactor for Linux io_uring
In-Reply-To: <d4f13d33-af1d-f027-aee2-8536288744c6@haywood.id.au>
References: <4a472ae0-4961-7b32-07cf-5fb5cf0fa7e2@haywood.id.au>
 <9820060.nUPlyArG6x@fpbarry>
 <CAEeXt4Od1SDTWSB9ryeDUzc2b6ewOOJB7waLwfdDEBa4XAqyAg@mail.gmail.com>
 <CAFycZ9cHLW9QTLeMfDVP61Y+o2Ji93pW4Av_qBTYSGuDL9GYOQ@mail.gmail.com>
 <c918c7ba-5ec3-84c7-51e9-07505bca784e@haywood.id.au>
 <66870E3A-6FA9-466B-B1FB-E263A882EFC2@twistedmatrix.com>
 <c86de384-e48f-9567-260d-438440fd2634@haywood.id.au>
 <F741CA12-4B49-4FD2-A87E-142B4B964B10@twistedmatrix.com>
 <e8f04d74-77c4-62ca-66e9-a159e9b77af3@haywood.id.au>
 <c5cf2281-272a-2be8-901d-db594652cea3@gmail.com>
 <d4f13d33-af1d-f027-aee2-8536288744c6@haywood.id.au>
Message-ID: <c58735d2-307d-7752-574f-8070be65e05e@crossbario.com>

interesting. thanks!

Am 12.03.21 um 09:59 schrieb Ian Haywood:
> On 12/03/2021 7:21 pm, Tobias Oberstein wrote:
>> sorry, I missed the beginning of the thread / discussion: are you 
>> working on a new, full Twisted reactor on top of io_uring?
>>
>> and async filesystem is "just" one part / additional effort in that? 
> the advantage of io_uring is being able to combine file and network I/O, 
> so this PR is a precondition to working on the reactor.

yeah, the advantages of io_uring are obvious, combining disk and network 
IO is one. even a network IO only twisted reactor for io_uring would be 
awesome! disk IO, for me, would be nice to have, but depends, eg LMDB 
mmaps the DB file, so it wouldn't go through io_uring anyways.

one more aspect: io_uring is also about zero-copy (besides reducing 
context switch overhead / reduce syscalls)

twisted protocol base classes always first buffer outgoing bytes in 
userspace. in a list that is later flattened, before pushing to kernel 
in the actual socket write. the latter only happens once the FD being 
written becomes writable of course.

since with io_uring the queue/ring to append to never blocks for writes, 
that buffering in twisted would lead to double buffering (as the ring 
already buffers)

then, io_uring follows a completion IO model (as IOCP). quite different 
from the "ready to write/read" model (as in epoll etc).

I am wondering, do you already have a design for these aspects of 
io_uring / twisted?

> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 

Tobias Oberstein - phone +49 176 2375 2055 - tobias.oberstein at crossbario.com
Crossbar.io GmbH - Waldstrasse 18 - 91054 Erlangen
HRB 15870 - Amtsgericht Fuerth - Geschäftsfuehrer/CEO - Tobias Oberstein

https://crossbar.io
https://crossbario.com


From ian at haywood.id.au  Fri Mar 12 17:01:46 2021
From: ian at haywood.id.au (Ian Haywood)
Date: Sat, 13 Mar 2021 11:01:46 +1100
Subject: [Twisted-Python] reactor for Linux io_uring
In-Reply-To: <c58735d2-307d-7752-574f-8070be65e05e@crossbario.com>
References: <4a472ae0-4961-7b32-07cf-5fb5cf0fa7e2@haywood.id.au>
 <9820060.nUPlyArG6x@fpbarry>
 <CAEeXt4Od1SDTWSB9ryeDUzc2b6ewOOJB7waLwfdDEBa4XAqyAg@mail.gmail.com>
 <CAFycZ9cHLW9QTLeMfDVP61Y+o2Ji93pW4Av_qBTYSGuDL9GYOQ@mail.gmail.com>
 <c918c7ba-5ec3-84c7-51e9-07505bca784e@haywood.id.au>
 <66870E3A-6FA9-466B-B1FB-E263A882EFC2@twistedmatrix.com>
 <c86de384-e48f-9567-260d-438440fd2634@haywood.id.au>
 <F741CA12-4B49-4FD2-A87E-142B4B964B10@twistedmatrix.com>
 <e8f04d74-77c4-62ca-66e9-a159e9b77af3@haywood.id.au>
 <c5cf2281-272a-2be8-901d-db594652cea3@gmail.com>
 <d4f13d33-af1d-f027-aee2-8536288744c6@haywood.id.au>
 <c58735d2-307d-7752-574f-8070be65e05e@crossbario.com>
Message-ID: <77e12d29-b326-0825-1c0e-31b7be59ac23@haywood.id.au>

On 12/03/2021 8:29 pm, Tobias Oberstein wrote:
> since with io_uring the queue/ring to append to never blocks for 
> writes, that buffering in twisted would lead to double buffering (as 
> the ring already buffers)
>
> then, io_uring follows a completion IO model (as IOCP). quite 
> different from the "ready to write/read" model (as in epoll etc).
>
> I am wondering, do you already have a design for these aspects of 
> io_uring / twisted?
I haven't thought about it in detail, but python presents mmap as 
bytearray, so I would have thought it fairly easy to write directly to 
the ring from Protocol.write


From tobias.oberstein at gmail.com  Sat Mar 13 06:07:37 2021
From: tobias.oberstein at gmail.com (Tobias Oberstein)
Date: Sat, 13 Mar 2021 14:07:37 +0100
Subject: [Twisted-Python] reactor for Linux io_uring
In-Reply-To: <77e12d29-b326-0825-1c0e-31b7be59ac23@haywood.id.au>
References: <4a472ae0-4961-7b32-07cf-5fb5cf0fa7e2@haywood.id.au>
 <9820060.nUPlyArG6x@fpbarry>
 <CAEeXt4Od1SDTWSB9ryeDUzc2b6ewOOJB7waLwfdDEBa4XAqyAg@mail.gmail.com>
 <CAFycZ9cHLW9QTLeMfDVP61Y+o2Ji93pW4Av_qBTYSGuDL9GYOQ@mail.gmail.com>
 <c918c7ba-5ec3-84c7-51e9-07505bca784e@haywood.id.au>
 <66870E3A-6FA9-466B-B1FB-E263A882EFC2@twistedmatrix.com>
 <c86de384-e48f-9567-260d-438440fd2634@haywood.id.au>
 <F741CA12-4B49-4FD2-A87E-142B4B964B10@twistedmatrix.com>
 <e8f04d74-77c4-62ca-66e9-a159e9b77af3@haywood.id.au>
 <c5cf2281-272a-2be8-901d-db594652cea3@gmail.com>
 <d4f13d33-af1d-f027-aee2-8536288744c6@haywood.id.au>
 <c58735d2-307d-7752-574f-8070be65e05e@crossbario.com>
 <77e12d29-b326-0825-1c0e-31b7be59ac23@haywood.id.au>
Message-ID: <cd1064f8-2a50-1de8-09f5-737d3eacee63@gmail.com>

Am 13.03.21 um 01:01 schrieb Ian Haywood:
> On 12/03/2021 8:29 pm, Tobias Oberstein wrote:
>> since with io_uring the queue/ring to append to never blocks for 
>> writes, that buffering in twisted would lead to double buffering (as 
>> the ring already buffers)
>>
>> then, io_uring follows a completion IO model (as IOCP). quite 
>> different from the "ready to write/read" model (as in epoll etc).
>>
>> I am wondering, do you already have a design for these aspects of 
>> io_uring / twisted?
> I haven't thought about it in detail, but python presents mmap as 
> bytearray, so I would have thought it fairly easy to write directly to 
> the ring from Protocol.write

fwiw, couple of thoughts:

to make it "zero copy" right up into python, a couple of things would be 
needed (there might be other ways of course ..):

the memory to write into on the producer side must be allocated and 
managed via liburing

that memory might for example actually reside inside a NIC and be DMA'ed 
into main memory ("zero CPU copy") or even directly mapped into the user 
level address space ("true zero copy")

even when taking the very basic case of just transmitting an unstructed 
bunch of bytes, to make it truly zero copy up into python, sth like

https://zero-buffer.readthedocs.io

might be needed rather than standard python str/bytes.

then, for structured data, if zero-buffer would be used in python lib of 
flatbuffers for str/bytes

https://google.github.io/flatbuffers/

this would result in a truly zero-copy transfer _and_ serialization for 
native structured objects.

all of that with zero/minimal syscalls.

in a way, the holy grail;)

cheers,
/Tobias

alternatives for flatbuffers:
https://capnproto.org/news/2014-06-17-capnproto-flatbuffers-sbe.html


From adi at roiban.ro  Sat Mar 13 06:22:46 2021
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 13 Mar 2021 13:22:46 +0000
Subject: [Twisted-Python] Probot app to automatically delete merged branches
Message-ID: <CAFycZ9c8hDvOQ-FKMsBtZsxK04EKqiFo4uNHEzEqr8mc3+nu-A@mail.gmail.com>

Hi,

Do you see anything bad in enabling the delete-merged-branch app for
twisted/twisted ?

https://probot.github.io/apps/delete-merged-branch/

Right now Twisted has 1877 branches.

My hope is that in this way we can keep the main repo clean and there will
be less noise in autocompletion.

Now, this will only handle future branches/merges ...but at least is a
start.

We can see later what to do with existing branches.

Cheers
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210313/0aedd5d8/attachment.htm>

From sda at fstab.net  Sat Mar 13 07:29:17 2021
From: sda at fstab.net (Kyle Altendorf)
Date: Sat, 13 Mar 2021 09:29:17 -0500
Subject: [Twisted-Python] Probot app to automatically delete merged
 branches
In-Reply-To: <CAFycZ9c8hDvOQ-FKMsBtZsxK04EKqiFo4uNHEzEqr8mc3+nu-A@mail.gmail.com>
References: <CAFycZ9c8hDvOQ-FKMsBtZsxK04EKqiFo4uNHEzEqr8mc3+nu-A@mail.gmail.com>
Message-ID: <2c288603006f1349b42e6cc80e725142@fstab.net>

On 2021-03-13 08:22, Adi Roiban wrote:

> Hi, 
> 
> Do you see anything bad in enabling the delete-merged-branch app for twisted/twisted ? 
> 
> https://probot.github.io/apps/delete-merged-branch/

There's a checkbox for this.  Unless I'm missing something? 

https://docs.github.com/en/github/administering-a-repository/managing-the-automatic-deletion-of-branches


Cheers, 
-kyle
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210313/ab6457ce/attachment.htm>

From adi at roiban.ro  Sat Mar 13 08:40:48 2021
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 13 Mar 2021 15:40:48 +0000
Subject: [Twisted-Python] Probot app to automatically delete merged
 branches
In-Reply-To: <2c288603006f1349b42e6cc80e725142@fstab.net>
References: <CAFycZ9c8hDvOQ-FKMsBtZsxK04EKqiFo4uNHEzEqr8mc3+nu-A@mail.gmail.com>
 <2c288603006f1349b42e6cc80e725142@fstab.net>
Message-ID: <CAFycZ9f8c3Fd3_O3ONM3acSRSfwMQ5J+GUhu4_65vHK8HpuU7w@mail.gmail.com>

On Sat, 13 Mar 2021 at 14:29, Kyle Altendorf <sda at fstab.net> wrote:

>
> On 2021-03-13 08:22, Adi Roiban wrote:
>
> Hi,
>
> Do you see anything bad in enabling the delete-merged-branch app for
> twisted/twisted ?
>
> https://probot.github.io/apps/delete-merged-branch/
>
>
>
> There's a checkbox for this.  Unless I'm missing something?
>
>
> https://docs.github.com/en/github/administering-a-repository/managing-the-automatic-deletion-of-branches
>
>

Great. Thank for the info.

So, new question: Should we enable the automatic deletion for
twisted/twisted?

Regards


-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210313/bd4cb2ba/attachment.htm>

From sda at fstab.net  Sat Mar 13 11:41:13 2021
From: sda at fstab.net (Kyle Altendorf)
Date: Sat, 13 Mar 2021 13:41:13 -0500
Subject: [Twisted-Python] Probot app to automatically delete merged
 branches
In-Reply-To: <CAFycZ9f8c3Fd3_O3ONM3acSRSfwMQ5J+GUhu4_65vHK8HpuU7w@mail.gmail.com>
References: <CAFycZ9c8hDvOQ-FKMsBtZsxK04EKqiFo4uNHEzEqr8mc3+nu-A@mail.gmail.com>
 <2c288603006f1349b42e6cc80e725142@fstab.net>
 <CAFycZ9f8c3Fd3_O3ONM3acSRSfwMQ5J+GUhu4_65vHK8HpuU7w@mail.gmail.com>
Message-ID: <813547f4b385506e70b61067abc1f9fb@fstab.net>

On 2021-03-13 10:40, Adi Roiban wrote:

> On Sat, 13 Mar 2021 at 14:29, Kyle Altendorf <sda at fstab.net> wrote: 
> 
> On 2021-03-13 08:22, Adi Roiban wrote: 
> 
> Hi, 
> Do you see anything bad in enabling the delete-merged-branch app for twisted/twisted ? 
> https://probot.github.io/apps/delete-merged-branch/ 
> 
> There's a checkbox for this.  Unless I'm missing something? 
> https://docs.github.com/en/github/administering-a-repository/managing-the-automatic-deletion-of-branches

Great. Thank for the info. 

So, new question: Should we enable the automatic deletion for
twisted/twisted? 

I suppose I could have responded to the underlying question as well... 
I do have deletion enabled in my repos.  I don't really like that you
lose the references in git though.  As long as you stick with GitHub you
do have the PR's as a record and from them you can recover the
associated branch. 

I do it but don't super care.  Hopefully someone else does. 

Cheers, 
-kyle
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210313/d2509bc7/attachment-0001.htm>

From glyph at twistedmatrix.com  Sat Mar 13 19:08:05 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 13 Mar 2021 18:08:05 -0800
Subject: [Twisted-Python] Strange recursion error with twisted.web
In-Reply-To: <e01d6fad-985a-411a-a9c6-2c29e281b8d6@www.fastmail.com>
References: <c714688a-1b7e-4194-812c-88658a2713d2@www.fastmail.com>
 <E96ABD6E-25EC-4F88-857D-EBC9E59ACA02@twistedmatrix.com>
 <c0363752-27cf-4bec-97c4-101531eea766@www.fastmail.com>
 <DA2AE2F5-D800-4DC5-975A-1BC6B0110EC7@twistedmatrix.com>
 <e01d6fad-985a-411a-a9c6-2c29e281b8d6@www.fastmail.com>
Message-ID: <8F0149FA-BCC3-4E15-A42D-BB5EEDCBCB66@twistedmatrix.com>



> On Mar 11, 2021, at 4:12 AM, Peter Westlake <peter.westlake at pobox.com> wrote:
> 
> On Wed, 10 Mar 2021, at 23:11, Glyph wrote:
>> 
>> Would you mind filing a ticket in trac, or digging one up if you can 
>> find it? This problem rings a bell, and I think I might actually have 
>> some code for this lying around somewhere already.
> 
> Here is it: https://twistedmatrix.com/trac/ticket/10125#ticket
> 
> thanks,
> 
> Peter.

I did indeed have a half-finished experiment to fix this.  The fix is now finished and in review here: https://twistedmatrix.com/trac/ticket/10125#comment:1 <https://twistedmatrix.com/trac/ticket/10125#comment:1> .

If you could review it thoroughly enough, I could land it.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210313/646d193d/attachment.htm>

From trac at twistedmatrix.com  Sun Mar 14 00:05:20 2021
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 14 Mar 2021 07:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1615705520.43.7138123159678586752@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210314/36cd1201/attachment.htm>

From chris at withers.org  Mon Mar 15 02:18:54 2021
From: chris at withers.org (Chris Withers)
Date: Mon, 15 Mar 2021 08:18:54 +0000
Subject: [Twisted-Python] automat question
In-Reply-To: <73E6642F-31B5-4D12-976F-A56A309C13F5@twistedmatrix.com>
References: <9fd8f31a-53fc-9afa-89c5-da3f4d418bf2@withers.org>
 <etPan.604557d0.238e1f29.9eb@fastmail.com>
 <a716ef02-44ae-953c-4be5-2b830e1f070c@withers.org>
 <73E6642F-31B5-4D12-976F-A56A309C13F5@twistedmatrix.com>
Message-ID: <fd9ac84c-d7fe-f7a5-6259-13e37046ae5a@withers.org>

On 09/03/2021 18:53, Glyph wrote:
> 
>> On Mar 9, 2021, at 3:18 AM, Chris Withers <chris at withers.org 
>> <mailto:chris at withers.org>> wrote:
>>
>> I'm not sure we're quite on the same page: I'm not looking to inspect 
>> the state, but more be notified when certain edges are traversed.
> 
> The way you get notified when an edge is traversed is you add an output 
> to that edge :).

Right, but as best I can tell, outputs in automat have to be defined as 
part of the state machine class, I need targets only available after 
class instantiation to be notified.

> Again... have outputs.  I think there's something you're leaving out 
> about how you want to have some /generalized/ output, but without 
> knowing a bit more it's hard to say how it could help more :).

I think it's what I said above. TBH, I'm probably going to end up 
writing "yet another state machine class" that does just what I need, 
but I think that's okay - not everything has to work for every situation :-)

cheers,

Chris


From glyph at twistedmatrix.com  Mon Mar 15 03:34:23 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 15 Mar 2021 02:34:23 -0700
Subject: [Twisted-Python] automat question
In-Reply-To: <fd9ac84c-d7fe-f7a5-6259-13e37046ae5a@withers.org>
References: <9fd8f31a-53fc-9afa-89c5-da3f4d418bf2@withers.org>
 <etPan.604557d0.238e1f29.9eb@fastmail.com>
 <a716ef02-44ae-953c-4be5-2b830e1f070c@withers.org>
 <73E6642F-31B5-4D12-976F-A56A309C13F5@twistedmatrix.com>
 <fd9ac84c-d7fe-f7a5-6259-13e37046ae5a@withers.org>
Message-ID: <9B92867B-66DA-411C-8130-A24B2E42BEE5@twistedmatrix.com>



> On Mar 15, 2021, at 1:18 AM, Chris Withers <chris at withers.org> wrote:
> 
> On 09/03/2021 18:53, Glyph wrote:
>>> On Mar 9, 2021, at 3:18 AM, Chris Withers <chris at withers.org <mailto:chris at withers.org>> wrote:
>>> 
>>> I'm not sure we're quite on the same page: I'm not looking to inspect the state, but more be notified when certain edges are traversed.
>> The way you get notified when an edge is traversed is you add an output to that edge :).
> 
> Right, but as best I can tell, outputs in automat have to be defined as part of the state machine class, I need targets only available after class instantiation to be notified.

Outputs are just methods, so it sort of depends what you mean by "after class instantiation".  You can call whatever you want in an output.

>> Again... have outputs.  I think there's something you're leaving out about how you want to have some /generalized/ output, but without knowing a bit more it's hard to say how it could help more :).
> 
> I think it's what I said above. TBH, I'm probably going to end up writing "yet another state machine class" that does just what I need, but I think that's okay - not everything has to work for every situation :-)

It sounds like what you might want here is soemthing for constructing arbitrary machines at runtime, and automat is all about enforcing that your machine is static so that (for example) it can be visualized statically.  So yeah in that case, different library.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210315/2369f594/attachment.htm>

From chris at withers.org  Tue Mar 16 02:09:09 2021
From: chris at withers.org (Chris Withers)
Date: Tue, 16 Mar 2021 08:09:09 +0000
Subject: [Twisted-Python] automat question
In-Reply-To: <9B92867B-66DA-411C-8130-A24B2E42BEE5@twistedmatrix.com>
References: <9fd8f31a-53fc-9afa-89c5-da3f4d418bf2@withers.org>
 <etPan.604557d0.238e1f29.9eb@fastmail.com>
 <a716ef02-44ae-953c-4be5-2b830e1f070c@withers.org>
 <73E6642F-31B5-4D12-976F-A56A309C13F5@twistedmatrix.com>
 <fd9ac84c-d7fe-f7a5-6259-13e37046ae5a@withers.org>
 <9B92867B-66DA-411C-8130-A24B2E42BEE5@twistedmatrix.com>
Message-ID: <4c63d9c6-30f0-08e2-0762-7329989a6233@withers.org>


On 15/03/2021 09:34, Glyph wrote:
> 
> 
>> Right, but as best I can tell, outputs in automat have to be defined 
>> as part of the state machine class, I need targets only available 
>> after class instantiation to be notified.
> 
> Outputs are just methods, so it sort of depends what you mean by "after 
> class instantiation".  You can call whatever you want /in/ an output.

Right, but then I'd have to maintain my own list of subscribers and 
figure out a way to duplicate in that logic in each of the output 
methods defined on the machine.

>>> Again... have outputs.  I think there's something you're leaving out 
>>> about how you want to have some /generalized/ output, but without 
>>> knowing a bit more it's hard to say how it could help more :).
>>
>> I think it's what I said above. TBH, I'm probably going to end up 
>> writing "yet another state machine class" that does just what I need, 
>> but I think that's okay - not everything has to work for every 
>> situation :-)
> 
> It sounds like what you /might/ want here is soemthing for constructing 
> arbitrary machines at runtime, 

The states and transitions are very rigid.

> and automat is all about enforcing that 
> your machine is static so that (for example) it can be visualized 
> statically.  So yeah in that case, different library.

Take this example:

class LightSwitch(object):
     _machine = MethodicalMachine()

     @_machine.state(serialized="on")
     def on_state(self):
         "the switch is on"

     @_machine.state(serialized="off", initial=True)
     def off_state(self):
         "the switch is off"

     @_machine.input()
     def flip(self):
         "flip the switch"

     on_state.upon(flip, enter=off_state, outputs=[])
     off_state.upon(flip, enter=on_state, outputs=[])


What I'm looking to do is something along the lines of:

aSwitch = LightSwitch()
aSwitch.flip.addListener(myCallable)

myCallable might well be a deferred that something else is waiting on...

Chris


From peter.westlake at pobox.com  Tue Mar 16 05:20:36 2021
From: peter.westlake at pobox.com (Peter Westlake)
Date: Tue, 16 Mar 2021 11:20:36 +0000
Subject: [Twisted-Python] Strange recursion error with twisted.web
In-Reply-To: <8F0149FA-BCC3-4E15-A42D-BB5EEDCBCB66@twistedmatrix.com>
References: <c714688a-1b7e-4194-812c-88658a2713d2@www.fastmail.com>
 <E96ABD6E-25EC-4F88-857D-EBC9E59ACA02@twistedmatrix.com>
 <c0363752-27cf-4bec-97c4-101531eea766@www.fastmail.com>
 <DA2AE2F5-D800-4DC5-975A-1BC6B0110EC7@twistedmatrix.com>
 <e01d6fad-985a-411a-a9c6-2c29e281b8d6@www.fastmail.com>
 <8F0149FA-BCC3-4E15-A42D-BB5EEDCBCB66@twistedmatrix.com>
Message-ID: <d2f43380-e96a-4632-a490-b47c77841b4c@www.fastmail.com>

On Sun, 14 Mar 2021, at 02:08, Glyph wrote:
> 
> I did indeed have a half-finished experiment to fix this.  The fix is now finished and in review here: https://twistedmatrix.com/trac/ticket/10125#comment:1 .
> 
> If you could review it thoroughly enough, I could land it.

Excellent, thank you!

I think I understand how it works, but one thing puzzles me: how does the queue in the jump() function ever get longer than one element? Is it because it might contain a recursive call, which is activated by the unpause()?

Peter.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210316/fc6b76e9/attachment.htm>

From glyph at twistedmatrix.com  Tue Mar 16 15:28:07 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 16 Mar 2021 14:28:07 -0700
Subject: [Twisted-Python] automat question
In-Reply-To: <4c63d9c6-30f0-08e2-0762-7329989a6233@withers.org>
References: <9fd8f31a-53fc-9afa-89c5-da3f4d418bf2@withers.org>
 <etPan.604557d0.238e1f29.9eb@fastmail.com>
 <a716ef02-44ae-953c-4be5-2b830e1f070c@withers.org>
 <73E6642F-31B5-4D12-976F-A56A309C13F5@twistedmatrix.com>
 <fd9ac84c-d7fe-f7a5-6259-13e37046ae5a@withers.org>
 <9B92867B-66DA-411C-8130-A24B2E42BEE5@twistedmatrix.com>
 <4c63d9c6-30f0-08e2-0762-7329989a6233@withers.org>
Message-ID: <0BC099BC-DFC3-4588-8A03-A2A14C904F9B@twistedmatrix.com>



> On Mar 16, 2021, at 1:09 AM, Chris Withers <chris at withers.org> wrote:
> 
> 
> On 15/03/2021 09:34, Glyph wrote:
>>> Right, but as best I can tell, outputs in automat have to be defined as part of the state machine class, I need targets only available after class instantiation to be notified.
>> Outputs are just methods, so it sort of depends what you mean by "after class instantiation".  You can call whatever you want /in/ an output.
> 
> Right, but then I'd have to maintain my own list of subscribers and figure out a way to duplicate in that logic in each of the output methods defined on the machine.
> 
>>>> Again... have outputs.  I think there's something you're leaving out about how you want to have some /generalized/ output, but without knowing a bit more it's hard to say how it could help more :).
>>> 
>>> I think it's what I said above. TBH, I'm probably going to end up writing "yet another state machine class" that does just what I need, but I think that's okay - not everything has to work for every situation :-)
>> It sounds like what you /might/ want here is soemthing for constructing arbitrary machines at runtime, 
> 
> The states and transitions are very rigid.
> 
>> and automat is all about enforcing that your machine is static so that (for example) it can be visualized statically.  So yeah in that case, different library.
> 
> Take this example:
> 
> class LightSwitch(object):
>    _machine = MethodicalMachine()
> 
>    @_machine.state(serialized="on")
>    def on_state(self):
>        "the switch is on"
> 
>    @_machine.state(serialized="off", initial=True)
>    def off_state(self):
>        "the switch is off"
> 
>    @_machine.input()
>    def flip(self):
>        "flip the switch"
> 
>    on_state.upon(flip, enter=off_state, outputs=[])
>    off_state.upon(flip, enter=on_state, outputs=[])
> 
> 
> What I'm looking to do is something along the lines of:
> 
> aSwitch = LightSwitch()
> aSwitch.flip.addListener(myCallable)
> 
> myCallable might well be a deferred that something else is waiting on...

Thanks for the example.

My opinion is definitely that this should be an output produced by both edges here, and that output should manage an observer which does this extra functionality.  By modeling it as an output, you can see in your visual DFA where observers will be notified; and managing the list of observers is something that might have its own state-controlled lifecycle.

You can disagree of course but I think that's a very different design idiom than automat :)

-g



From glyph at twistedmatrix.com  Tue Mar 16 20:50:30 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 16 Mar 2021 19:50:30 -0700
Subject: [Twisted-Python] Strange recursion error with twisted.web
In-Reply-To: <d2f43380-e96a-4632-a490-b47c77841b4c@www.fastmail.com>
References: <c714688a-1b7e-4194-812c-88658a2713d2@www.fastmail.com>
 <E96ABD6E-25EC-4F88-857D-EBC9E59ACA02@twistedmatrix.com>
 <c0363752-27cf-4bec-97c4-101531eea766@www.fastmail.com>
 <DA2AE2F5-D800-4DC5-975A-1BC6B0110EC7@twistedmatrix.com>
 <e01d6fad-985a-411a-a9c6-2c29e281b8d6@www.fastmail.com>
 <8F0149FA-BCC3-4E15-A42D-BB5EEDCBCB66@twistedmatrix.com>
 <d2f43380-e96a-4632-a490-b47c77841b4c@www.fastmail.com>
Message-ID: <574896BA-CC09-4D1C-8136-CEFB22CCD65A@twistedmatrix.com>


> On Mar 16, 2021, at 4:20 AM, Peter Westlake <peter.westlake at pobox.com> wrote:
> 
> On Sun, 14 Mar 2021, at 02:08, Glyph wrote:
>> 
>> I did indeed have a half-finished experiment to fix this.  The fix is now finished and in review here: https://twistedmatrix.com/trac/ticket/10125#comment:1 <https://twistedmatrix.com/trac/ticket/10125#comment:1> .
>> 
>> If you could review it thoroughly enough, I could land it.
> 
> Excellent, thank you!
> 
> I think I understand how it works, but one thing puzzles me: how does the queue in the jump() function ever get longer than one element? Is it because it might contain a recursive call, which is activated by the unpause()?

This was actually a really insightful review - after thinking about it for a moment, I realized that the actual trampoline was already in twisted.internet.defer._inlineCallbacks, and this function was totally useless complexity!  Thank you!

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210316/997d6a7b/attachment.htm>

From peter.westlake at pobox.com  Wed Mar 17 08:08:54 2021
From: peter.westlake at pobox.com (Peter Westlake)
Date: Wed, 17 Mar 2021 14:08:54 +0000
Subject: [Twisted-Python] Strange recursion error with twisted.web
In-Reply-To: <574896BA-CC09-4D1C-8136-CEFB22CCD65A@twistedmatrix.com>
References: <c714688a-1b7e-4194-812c-88658a2713d2@www.fastmail.com>
 <E96ABD6E-25EC-4F88-857D-EBC9E59ACA02@twistedmatrix.com>
 <c0363752-27cf-4bec-97c4-101531eea766@www.fastmail.com>
 <DA2AE2F5-D800-4DC5-975A-1BC6B0110EC7@twistedmatrix.com>
 <e01d6fad-985a-411a-a9c6-2c29e281b8d6@www.fastmail.com>
 <8F0149FA-BCC3-4E15-A42D-BB5EEDCBCB66@twistedmatrix.com>
 <d2f43380-e96a-4632-a490-b47c77841b4c@www.fastmail.com>
 <574896BA-CC09-4D1C-8136-CEFB22CCD65A@twistedmatrix.com>
Message-ID: <96e57448-cd96-4ca4-91e4-d6e18956de94@www.fastmail.com>

On Wed, 17 Mar 2021, at 02:50, Glyph wrote:
> 
>> Excellent, thank you!
>> 
>> I think I understand how it works, but one thing puzzles me: how does the queue in the jump() function ever get longer than one element? Is it because it might contain a recursive call, which is activated by the unpause()?
> 
> This was actually a really insightful review - after thinking about it for a moment, I realized that the *actual* trampoline was already in twisted.internet.defer._inlineCallbacks, and this function was totally useless complexity!  Thank you!

Glad to be of service :-)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210317/0b9c9c96/attachment.htm>

From glyph at twistedmatrix.com  Sat Mar 20 22:43:11 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 20 Mar 2021 21:43:11 -0700
Subject: [Twisted-Python] Small amount of feedback for a contributor to
 address?
Message-ID: <etPan.6056cf82.327b23c6.5a75@fastmail.com>

I just reviewed https://twistedmatrix.com/trac/ticket/10052#comment:5 and it’s almost landable, it just needs a small amount of feedback addressed to land. Given that the submitter had to wait months for this review I don’t know if they’re tracking it closely, so I figured I’d raise it here to see if anyone else had a moment to nudge a good bugfix here over the line.

Thanks in advance to whoever picks it up,  

-g 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210320/0e81c286/attachment.htm>

From trac at twistedmatrix.com  Sun Mar 21 00:05:15 2021
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 21 Mar 2021 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1616306715.56.82289133818807222@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210321/80709611/attachment.htm>

From sda at fstab.net  Fri Mar 26 07:18:37 2021
From: sda at fstab.net (Kyle Altendorf)
Date: Fri, 26 Mar 2021 09:18:37 -0400
Subject: [Twisted-Python] towncrier releases 19.9.0 and 21.3.0rc1
Message-ID: <500ec2314346f3e7ea89b0f1dab36587@fstab.net>

Hi everyone,

I am announcing 2 twisted releases.

This is a bit more complicated than normal since 19.9.0rc1 was never 
followed by a non-RC release.

You can see a detailed checklist and discussion of this in #313 [0].

Relative to 19.9.0rc1, 19.9.0 contains a few readme fixes and the news 
fragments processed into the news file.

19.9.0 artifacts have been created [1] and 19.9.0 publishing is being 
held until after 21.3.0 to avoid a somewhat pointless intermediate step 
for developers that are using 'the latest non-pre release on PyPI' 
(presently 19.2.0).
  No real need for someone to get 19.9.0 now just to see 21.3.0 available 
next week.  The news for 21.3.0 is available for review [2].

21.3.0rc1 has been published and is open for a week for feedback before 
21.3.0 is planned to be released.

There are remaining bugs and important features.  But, it took long 
enough to get to this point that I consider it important to get 
something out.  Several people are waiting patiently [3].  As we find 
time to design and address the remaining issues, hopefully we can manage 
more frequent releases.

Please do let me know of any issues you find that are not already 
documented.  Or, if any of the documented ones should really be release 
blockers.  I sure hope we can get this out though.  :]

Cheers,
-kyle


[0]: https://github.com/twisted/towncrier/issues/313
[1]: 
https://github.com/twisted/towncrier/pull/331#issuecomment-803491163
[2]: https://github.com/twisted/towncrier/blob/21.3.0.rc1/NEWS.rst
[3]: https://github.com/twisted/towncrier/issues/269


From trac at twistedmatrix.com  Sun Mar 28 00:05:22 2021
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 28 Mar 2021 06:05:22 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1616911522.93.4049070377915720034@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210328/cc766645/attachment.htm>

From adi at roiban.ro  Mon Mar 29 08:27:31 2021
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 29 Mar 2021 14:27:31 +0000
Subject: [Twisted-Python] Enable and use GitHub Discussions for
 twisted/twisted
Message-ID: <CAFycZ9cwbgH6V1yk7Bcpqr4VQYPDh48Pb8GZ4+_hxz9A6PBs+g@mail.gmail.com>

Hi,

Should I enable GitHub discussions for twisted/twisted repo?

Advantages:

* it's like email but I think that it's easier to include/exclude people
interested in the discussion
* If an external person / one time contributor wants to participate in a
discussion, subscribing to the whole maillinglist is no longer required
* Should be easier to find the "right answer" inside a discussion.
* You can search the twisted/twisted repo from one place (GitHub top left
search bar) and also find discussion for that topic.
* Might help with keeping the comments inside the PR focused on the code
review as it should be easier to start a discussion

Disadvantages

* Depend even more on GitHub / MS.. but I hope that even if
* Yet another communication channel for the Twisted community. We already
have
  * this mailinglist
  * the web mailinglist
  * IRC
  * stack overflow
  * GitHub PRs

We already depende a lot on Github for git hosting, code review, automated
tests, deployment, pypy publishing.
I don't know if the discussion feature will make much of a difference.

There is an API [0] that ctwisted-pythontwisted-pythonan be used to export
the data if needed or import mailman data.

--------

What do you think?

Yes... no... maybe...stupid idea :)

Thanks
---

We have an archive for this  list [1]  but there is no search.

[0]
https://docs.github.com/en/graphql/guides/using-the-graphql-api-for-discussions
[1] https://twistedmatrix.com/pipermail/twisted-python/
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210329/21f57a73/attachment.htm>

From barry.scott at forcepoint.com  Mon Mar 29 10:44:27 2021
From: barry.scott at forcepoint.com (Barry Scott)
Date: Mon, 29 Mar 2021 17:44:27 +0100
Subject: [Twisted-Python] Enable and use GitHub Discussions for
 twisted/twisted
In-Reply-To: <CAFycZ9cwbgH6V1yk7Bcpqr4VQYPDh48Pb8GZ4+_hxz9A6PBs+g@mail.gmail.com>
References: <CAFycZ9cwbgH6V1yk7Bcpqr4VQYPDh48Pb8GZ4+_hxz9A6PBs+g@mail.gmail.com>
Message-ID: <2578700.mvXUDI8C0e@fpbarry>

On Monday, 29 March 2021 15:27:31 BST Adi Roiban wrote:
> Hi,
> 
> Should I enable GitHub discussions for twisted/twisted repo?

I can keep up with the email, but you will lose me if I have to
browse to github to see what is going on.

Barry


> 
> Advantages:
> 
> * it's like email but I think that it's easier to include/exclude people
> interested in the discussion
> * If an external person / one time contributor wants to participate in a
> discussion, subscribing to the whole maillinglist is no longer required
> * Should be easier to find the "right answer" inside a discussion.
> * You can search the twisted/twisted repo from one place (GitHub top left
> search bar) and also find discussion for that topic.
> * Might help with keeping the comments inside the PR focused on the code
> review as it should be easier to start a discussion
> 
> Disadvantages
> 
> * Depend even more on GitHub / MS.. but I hope that even if
> * Yet another communication channel for the Twisted community. We already
> have
>   * this mailinglist
>   * the web mailinglist
>   * IRC
>   * stack overflow
>   * GitHub PRs
> 
> We already depende a lot on Github for git hosting, code review, automated
> tests, deployment, pypy publishing.
> I don't know if the discussion feature will make much of a difference.
> 
> There is an API [0] that ctwisted-pythontwisted-pythonan be used to export
> the data if needed or import mailman data.
> 
> --------
> 
> What do you think?
> 
> Yes... no... maybe...stupid idea :)
> 
> Thanks
> ---
> 
> We have an archive for this  list [1]  but there is no search.
> 
> [0]
> https://docs.github.com/en/graphql/guides/using-the-graphql-api-for-discussions
> [1] https://twistedmatrix.com/pipermail/twisted-python/
> 





From glyph at twistedmatrix.com  Mon Mar 29 16:05:38 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 29 Mar 2021 15:05:38 -0700
Subject: [Twisted-Python] Enable and use GitHub Discussions for
 twisted/twisted
In-Reply-To: <CAFycZ9cwbgH6V1yk7Bcpqr4VQYPDh48Pb8GZ4+_hxz9A6PBs+g@mail.gmail.com>
References: <CAFycZ9cwbgH6V1yk7Bcpqr4VQYPDh48Pb8GZ4+_hxz9A6PBs+g@mail.gmail.com>
Message-ID: <9066FB3B-9BE1-40C1-9E2C-57722DEAD810@twistedmatrix.com>



> On Mar 29, 2021, at 7:27 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> Should I enable GitHub discussions for twisted/twisted repo?

Rather than phrasing this in terms of advantages & disadvantages, I think it might be more fruitful to talk about what problem we would ostensibly be trying to solve by using it.  Right now I don't think the list is high-traffic enough that the big advantage (you can have a discussion without blasting out a message to too many people) would really solve any issues we're currently having.

Personally I am -0 because I don't think that Github's structure for notifications are particularly conducive to an Inbox Zero style approach, i.e. one where everyone involved with he project knows where to go check for things that they might want to pay attention to.  The mailing list makes this very straightforward; you just check your email, which you're probably doing anyway.

Github does have some notion of "inboxes", i.e. https://github.com/twisted/twisted/pulls/review-requested/@me <https://github.com/twisted/twisted/pulls/review-requested/@me> could probably replace https://twisted.reviews <https://twisted.reviews/>, but even though I am a person who thinks way too much about inboxes <https://glyph.twistedmatrix.com/2016/04/email-isnt-the-problem.html>, I find https://github.com/notifications <https://github.com/notifications> difficult to approach.  If we were going to turn it on we should probably have a recommended way to check in on messages for contributors.

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210329/cc20be00/attachment.htm>

From sda at fstab.net  Tue Mar 30 08:57:06 2021
From: sda at fstab.net (Kyle Altendorf)
Date: Tue, 30 Mar 2021 10:57:06 -0400
Subject: [Twisted-Python] GitHub Actions parallelism limit increase
Message-ID: <261876fc38524a4c6f1bd18bfed7779d@fstab.net>

Hi All,

Has anyone contacted GitHub to see if they would be willing to increase 
the parallelism limit in Actions?  My understanding is that we maintain 
two CI systems (GitHub Actions and Azure Pipelines) for the sake of more 
parallelism.  While perhaps worthwhile, this doesn't seem fun.  Maybe 
GitHub would be willing to help out.

Cheers,
-kyle


From glyph at twistedmatrix.com  Tue Mar 30 13:24:17 2021
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 30 Mar 2021 12:24:17 -0700
Subject: [Twisted-Python] GitHub Actions parallelism limit increase
In-Reply-To: <261876fc38524a4c6f1bd18bfed7779d@fstab.net>
References: <261876fc38524a4c6f1bd18bfed7779d@fstab.net>
Message-ID: <9F520E09-60F1-4302-8421-3C32DEE50DDC@twistedmatrix.com>


> On Mar 30, 2021, at 7:57 AM, Kyle Altendorf <sda at fstab.net> wrote:
> 
> Hi All,
> 
> Has anyone contacted GitHub to see if they would be willing to increase the parallelism limit in Actions?  My understanding is that we maintain two CI systems (GitHub Actions and Azure Pipelines) for the sake of more parallelism.  While perhaps worthwhile, this doesn't seem fun.  Maybe GitHub would be willing to help out.

Not as far as I know. Do you want to give it a shot?

-g

From sda at fstab.net  Tue Mar 30 15:14:00 2021
From: sda at fstab.net (Kyle Altendorf)
Date: Tue, 30 Mar 2021 17:14:00 -0400
Subject: [Twisted-Python] GitHub Actions parallelism limit increase
In-Reply-To: <9F520E09-60F1-4302-8421-3C32DEE50DDC@twistedmatrix.com>
References: <261876fc38524a4c6f1bd18bfed7779d@fstab.net>
 <9F520E09-60F1-4302-8421-3C32DEE50DDC@twistedmatrix.com>
Message-ID: <dd42953b7fca3b24bcde585cc6d4cb8c@fstab.net>



On 2021-03-30 15:24, Glyph wrote:
>> On Mar 30, 2021, at 7:57 AM, Kyle Altendorf <sda at fstab.net> wrote:
>> 
>> Hi All,
>> 
>> Has anyone contacted GitHub to see if they would be willing to 
>> increase the parallelism limit in Actions?  My understanding is that 
>> we maintain two CI systems (GitHub Actions and Azure Pipelines) for 
>> the sake of more parallelism.  While perhaps worthwhile, this doesn't 
>> seem fun.  Maybe GitHub would be willing to help out.
> 
> Not as far as I know. Do you want to give it a shot?

That was the plan.  Submitted.  I'll let you all know.

Cheers,
-kyle


From adi at roiban.ro  Wed Mar 31 03:45:07 2021
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 31 Mar 2021 10:45:07 +0100
Subject: [Twisted-Python] GitHub Actions parallelism limit increase
In-Reply-To: <dd42953b7fca3b24bcde585cc6d4cb8c@fstab.net>
References: <261876fc38524a4c6f1bd18bfed7779d@fstab.net>
 <9F520E09-60F1-4302-8421-3C32DEE50DDC@twistedmatrix.com>
 <dd42953b7fca3b24bcde585cc6d4cb8c@fstab.net>
Message-ID: <CAFycZ9d=2g4ou81OkPV2f-_i7NFZ2=mSdCq9GPA0q0iAQBz4jg@mail.gmail.com>

On Tue, 30 Mar 2021, 22:23 Kyle Altendorf, <sda at fstab.net> wrote:

>
>
> On 2021-03-30 15:24, Glyph wrote:
> >> On Mar 30, 2021, at 7:57 AM, Kyle Altendorf <sda at fstab.net> wrote:
> >>
> >> Hi All,
> >>
> >> Has anyone contacted GitHub to see if they would be willing to
> >> increase the parallelism limit in Actions?  My understanding is that
> >> we maintain two CI systems (GitHub Actions and Azure Pipelines) for
> >> the sake of more parallelism.  While perhaps worthwhile, this doesn't
> >> seem fun.  Maybe GitHub would be willing to help out.
> >
> > Not as far as I know. Do you want to give it a shot?
>
> That was the plan.  Submitted.  I'll let you all know.
>

Thanks.

On a related note I am working to reduce the general duration of Twisted CI
jobs.

This should result in keeping the jobs slot busy for less time and allowing
more total jobs per day.

The first step was to enable parallel trial tests. Use both CPUs available
to the CI VMs.
This was already done for Linux and MacOS.

Distributed trial is not yet supported on Windows, but I am working on it.
I already have a working distributed trial for Windows on my system.
It needs various fixed and I have submitted smaller PR for review.

Just getting distrial to work on Windows is not all...as we need to update
and clean the  Twsited test to reduce the side effects.
Linux and macOS are more relaxed in terms of file access and for example
you can delete a file, even if its opened by another process or by the same
process.
Windows is not happy about that.

And then there are the 2 pypy jobs taking 30 minutes each - working to fix
it here https://github.com/twisted/twisted/pull/1543/

And then there are also general CI jobs improvements.

For example we can save about 40 seconds  if we decide to stop sending
coverage to coveralls and only use codecov.io
Another example is save another 1 minute by stop using `tox --notests` and
replace it with something like https://github.com/twisted/python-info-action
to show the dependencies.
With `tox --notest` we now create the wheels and install the dependencies
twice for each job.

There is an extra 1 minute required for each job to generate the coverage
XML file. We can download all the coverage artifacts and generate the XML
only once.

-------------

Now the actual job duration will differ... I see the pip cache download
taking 2 seconds or 2 minutes.

But on Linux it takes about 4 minutes to run the tests (inside tox with
wheel creation)... and then from 2minutes and above is the extra overhead

Cheers

>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210331/a52ef5cc/attachment.htm>

From adi at roiban.ro  Wed Mar 31 06:07:04 2021
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 31 Mar 2021 13:07:04 +0100
Subject: [Twisted-Python] Enable and use GitHub Discussions for
 twisted/twisted
In-Reply-To: <9066FB3B-9BE1-40C1-9E2C-57722DEAD810@twistedmatrix.com>
References: <CAFycZ9cwbgH6V1yk7Bcpqr4VQYPDh48Pb8GZ4+_hxz9A6PBs+g@mail.gmail.com>
 <9066FB3B-9BE1-40C1-9E2C-57722DEAD810@twistedmatrix.com>
Message-ID: <CAFycZ9czGBQGC2tztF8K2cWoL3NippfhgBTzHbZgQVoPytqTjA@mail.gmail.com>

On Mon, 29 Mar 2021 at 23:06, Glyph <glyph at twistedmatrix.com> wrote:

>
>
> On Mar 29, 2021, at 7:27 AM, Adi Roiban <adi at roiban.ro> wrote:
>
> Hi,
>
> Should I enable GitHub discussions for twisted/twisted repo?
>
>
> Rather than phrasing this in terms of advantages & disadvantages, I think
> it might be more fruitful to talk about what *problem* we would
> ostensibly be trying to solve by using it.  Right now I don't think the
> list is high-traffic enough that the big advantage (you can have a
> discussion without blasting out a message to too many people) would really
> solve any issues we're currently having.
>
> Personally I am -0 because I don't think that Github's structure for
> notifications are particularly conducive to an Inbox Zero style approach,
> i.e. one where everyone involved with he project knows where to go check
> for things that they might want to pay attention to.  The mailing list
> makes this very straightforward; you just check your email, which you're
> probably doing anyway.
>
> Github does have *some* notion of "inboxes", i.e.
> https://github.com/twisted/twisted/pulls/review-requested/@me could
> probably replace https://twisted.reviews, but even though I am a person
> who thinks *way too much* about inboxes
> <https://glyph.twistedmatrix.com/2016/04/email-isnt-the-problem.html>, I
> find https://github.com/notifications difficult to approach.  If we were
> going to turn it on we should probably have a recommended way to check in
> on messages for contributors.
>
>
Thanks for the feedback. That is ok. There is no need to use GitHub
Discussions.

Thanks for the nice read about inboxes :)

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20210331/cb260f62/attachment.htm>

