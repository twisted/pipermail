From johnaherne at rocs.co.uk  Thu Oct  1 04:34:33 2015
From: johnaherne at rocs.co.uk (John Aherne)
Date: Thu, 1 Oct 2015 11:34:33 +0100
Subject: [Twisted-Python] Call for volunteers: fundraising
Message-ID: <CAKmUHjZbr+GDbmU47jrX5QeKJJ=GPCwFZU4qN4XcWQx4tWWeBg@mail.gmail.com>

I don't suppose I will be crushed in the stampede to reply to this email.

But it strikes me as fairly important that we do something about this.

At the moment I'm none to sure what would be involved so if someone could
enlighten me as to the requirements, I'll have a better idea of what I
might have to do.


-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151001/671b10ac/attachment.html>

From mashiat.sarker at gmail.com  Thu Oct  1 14:40:22 2015
From: mashiat.sarker at gmail.com (Mashiat Sarker Shakkhar)
Date: Thu, 1 Oct 2015 16:40:22 -0400
Subject: [Twisted-Python] Testing function with delayed calls
Message-ID: <CAOfeCWUKQeHsDFFDkwMoxg4VLRrtezbuyd2CosXjzcLwuBCiuA@mail.gmail.com>

Hi

I have a function that uses callLater extensively to schedule a number of
different tasks. I don't want to get into the rationale behind such a
design, but here is a contrived example which will help me explain my
problem:


    def b():

        '''Do some work'''


    def c():

        '''Do some more work'''


    def a(flag):

        if flag:

            return Reactor.callLater(300, b)

        else:

            return Reactor. callLater(100, c)


Now I want to test this function. Of course I can't wait for 5 minutes to
ensure that `b` or `c` will indeed be called. What I need is some sort of
mock clock which lets me fast forward time. Does any such thing exist in
Twisted / Trial? Or is there any other approach to test such code?


Regards

Shakkhar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151001/9bc00592/attachment.html>

From ashfall at twistedmatrix.com  Thu Oct  1 15:46:11 2015
From: ashfall at twistedmatrix.com (Ashwini Oruganti)
Date: Thu, 1 Oct 2015 14:46:11 -0700
Subject: [Twisted-Python] Testing function with delayed calls
In-Reply-To: <CAOfeCWUKQeHsDFFDkwMoxg4VLRrtezbuyd2CosXjzcLwuBCiuA@mail.gmail.com>
References: <CAOfeCWUKQeHsDFFDkwMoxg4VLRrtezbuyd2CosXjzcLwuBCiuA@mail.gmail.com>
Message-ID: <CAMFCZ-375u0WH+KFRr7=3Btzbms3o4+osCoLB-EgcybWD7cZcQ@mail.gmail.com>

On Thu, Oct 1, 2015 at 1:40 PM, Mashiat Sarker Shakkhar <
mashiat.sarker at gmail.com> wrote:

> Hi
>
> I have a function that uses callLater extensively to schedule a number of
> different tasks. I don't want to get into the rationale behind such a
> design, but here is a contrived example which will help me explain my
> problem:
>
>
>     def b():
>
>         '''Do some work'''
>
>
>     def c():
>
>         '''Do some more work'''
>
>
>     def a(flag):
>
>         if flag:
>
>             return Reactor.callLater(300, b)
>
>         else:
>
>             return Reactor. callLater(100, c)
>
>
> Now I want to test this function. Of course I can't wait for 5 minutes to
> ensure that `b` or `c` will indeed be called. What I need is some sort of
> mock clock which lets me fast forward time. Does any such thing exist in
> Twisted / Trial?
>

Yes there is! `MemoryReactorClock.advance`
https://twistedmatrix.com/documents/current/api/twisted.test.proto_helpers.MemoryReactorClock.html
does this for you.

An example usage can be seen in the tests for `HostnameEndpoint`
https://github.com/twisted/twisted/blob/trunk/twisted/internet/test/test_endpoints.py#L2064

-Ashwini




> Or is there any other approach to test such code?
>







>
> Regards
>
> Shakkhar
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151001/19bc4706/attachment.html>

From mashiat.sarker at gmail.com  Fri Oct  2 08:33:53 2015
From: mashiat.sarker at gmail.com (Mashiat Sarker Shakkhar)
Date: Fri, 2 Oct 2015 10:33:53 -0400
Subject: [Twisted-Python] Testing function with delayed calls
In-Reply-To: <CAMFCZ-375u0WH+KFRr7=3Btzbms3o4+osCoLB-EgcybWD7cZcQ@mail.gmail.com>
References: <CAOfeCWUKQeHsDFFDkwMoxg4VLRrtezbuyd2CosXjzcLwuBCiuA@mail.gmail.com>
 <CAMFCZ-375u0WH+KFRr7=3Btzbms3o4+osCoLB-EgcybWD7cZcQ@mail.gmail.com>
Message-ID: <CAOfeCWWTn=NRhw0OsC9Fs=L8vpyu7rH-qJ0f0fORsSs4QYJgqA@mail.gmail.com>

On Thu, Oct 1, 2015 at 5:46 PM, Ashwini Oruganti <ashfall at twistedmatrix.com>
wrote:

>
>
> On Thu, Oct 1, 2015 at 1:40 PM, Mashiat Sarker Shakkhar <
> mashiat.sarker at gmail.com> wrote:
>
>> Hi
>>
>> I have a function that uses callLater extensively to schedule a number of
>> different tasks. I don't want to get into the rationale behind such a
>> design, but here is a contrived example which will help me explain my
>> problem:
>>
>>
>>     def b():
>>
>>         '''Do some work'''
>>
>>
>>     def c():
>>
>>         '''Do some more work'''
>>
>>
>>     def a(flag):
>>
>>         if flag:
>>
>>             return Reactor.callLater(300, b)
>>
>>         else:
>>
>>             return Reactor. callLater(100, c)
>>
>>
>> Now I want to test this function. Of course I can't wait for 5 minutes to
>> ensure that `b` or `c` will indeed be called. What I need is some sort of
>> mock clock which lets me fast forward time. Does any such thing exist in
>> Twisted / Trial?
>>
>
> Yes there is! `MemoryReactorClock.advance`
> https://twistedmatrix.com/documents/current/api/twisted.test.proto_helpers.MemoryReactorClock.html
> does this for you.
>
>
HI Ashwini

 Thanks a lot for your response. I did come across MemoryReactorClock
before, but I could not figure out how to use it to test my code. I am
using trial as the test runner, which allows me to pass the name of the
reactor to be used in command line. But MemoryReactorClock is not
available, because it is not in twisted.internet.

The code that I am testing imports reactor from twisted.internet in the
global scope. Do I have to change that and pass a reactor explicitly (say,
as a function parameter) where it is needed? Is there any other way to
change the default reactor to MemoryReactorClock just for running tests?

Going with my previous example, do I have to rewrite the code like
following or is there a better way?

    def b():

        '''Do some work'''


    def c():

        '''Do some more work'''


    def a(myreactor, flag):

        if flag:

            return myreactor.callLater(300, b)

        else:

            return myeactor. callLater(100, c)


I do see this in the documentation:

> New application code should prefer to pass and accept the reactor as a
parameter where it is needed, rather than relying on being able to import
this module to get a reference. This simplifies unit testing ...


But I'd prefer not to change the signature of existing functions.


Regards

Shakkhar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151002/9fcd1849/attachment-0001.html>

From glyph at twistedmatrix.com  Sat Oct  3 04:49:16 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 3 Oct 2015 03:49:16 -0700
Subject: [Twisted-Python] Testing function with delayed calls
In-Reply-To: <CAOfeCWWTn=NRhw0OsC9Fs=L8vpyu7rH-qJ0f0fORsSs4QYJgqA@mail.gmail.com>
References: <CAOfeCWUKQeHsDFFDkwMoxg4VLRrtezbuyd2CosXjzcLwuBCiuA@mail.gmail.com>
 <CAMFCZ-375u0WH+KFRr7=3Btzbms3o4+osCoLB-EgcybWD7cZcQ@mail.gmail.com>
 <CAOfeCWWTn=NRhw0OsC9Fs=L8vpyu7rH-qJ0f0fORsSs4QYJgqA@mail.gmail.com>
Message-ID: <0519CC59-72D9-4613-9300-33839335E3C1@twistedmatrix.com>


> On Oct 2, 2015, at 7:33 AM, Mashiat Sarker Shakkhar <mashiat.sarker at gmail.com> wrote:
> 
> On Thu, Oct 1, 2015 at 5:46 PM, Ashwini Oruganti <ashfall at twistedmatrix.com <mailto:ashfall at twistedmatrix.com>> wrote:
> 
> 
> On Thu, Oct 1, 2015 at 1:40 PM, Mashiat Sarker Shakkhar <mashiat.sarker at gmail.com <mailto:mashiat.sarker at gmail.com>>wrote:
> Hi
> 
> I have a function that uses callLater extensively to schedule a number of different tasks. I don't want to get into the rationale behind such a design, but here is a contrived example which will help me explain my problem: 
> 
>     def b():
>         '''Do some work'''
> 
>     def c():
>         '''Do some more work'''
> 
>     def a(flag):
>         if flag:
>             return Reactor.callLater(300, b)
>         else:
>             return Reactor. callLater(100, c)
> 
> Now I want to test this function. Of course I can't wait for 5 minutes to ensure that `b` or `c` will indeed be called. What I need is some sort of mock clock which lets me fast forward time. Does any such thing exist in Twisted / Trial? 
> 
> Yes there is! `MemoryReactorClock.advance` https://twistedmatrix.com/documents/current/api/twisted.test.proto_helpers.MemoryReactorClock.html <https://twistedmatrix.com/documents/current/api/twisted.test.proto_helpers.MemoryReactorClock.html> does this for you.
> 
> 
> HI Ashwini
> 
>  Thanks a lot for your response. I did come across MemoryReactorClock before, but I could not figure out how to use it to test my code. I am using trial as the test runner, which allows me to pass the name of the reactor to be used in command line. But MemoryReactorClock is not available, because it is not in twisted.internet.

Indeed, the MemoryReactorClock reactor is not suitable for installation in a global reactor.

> The code that I am testing imports reactor from twisted.internet in the global scope. Do I have to change that and pass a reactor explicitly (say, as a function parameter) where it is needed?

Yes.

> Is there any other way to change the default reactor to MemoryReactorClock just for running tests?

You can hack it using patch <http://twistedmatrix.com/documents/15.2.0/api/twisted.trial.unittest.SynchronousTestCase.html#patch <http://twistedmatrix.com/documents/15.2.0/api/twisted.trial.unittest.SynchronousTestCase.html#patch>>, by replacing the "reactor" attribute on your module.  But this is much worse than passing a parameter, and should only be used if you _really_ can't change the signature of your code for some reason.

> Going with my previous example, do I have to rewrite the code like following or is there a better way?

You should rewrite code like the following, it would be better :).  But hey, this is Python, nobody can stop you from doing anything you want :).

>     def b():
>         '''Do some work'''
> 
>     def c():
>         '''Do some more work'''
> 
>     def a(myreactor, flag):
>         if flag:
>             return myreactor.callLater(300, b)
>         else:
>             return myeactor. callLater(100, c)
> 
> I do see this in the documentation:
> > New application code should prefer to pass and accept the reactor as a parameter where it is needed, rather than relying on being able to import this module to get a reference. This simplifies unit testing ...
> 
> But I'd prefer not to change the signature of existing functions.

Passing parameters to functions that need them is not a bad thing.  You should generally prefer that.  It seems a lot of Python programmers are very resistant to passing arguments, and would instead prefer that everything be a global variable.  I am honestly somewhat confused as to why :-).  But it's a bad habit and you should try to shake it.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151003/a47517d8/attachment.html>

From glyph at twistedmatrix.com  Sat Oct  3 05:07:03 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 3 Oct 2015 04:07:03 -0700
Subject: [Twisted-Python] twisted compatibility with multiprocessing
	module in fork+execv mode
In-Reply-To: <58908503.20626.1443608736676.JavaMail.zimbra@voismart.it>
References: <58908503.20626.1443608736676.JavaMail.zimbra@voismart.it>
Message-ID: <F65BE466-9174-4670-A343-95498CF7E9AD@twistedmatrix.com>


> On Sep 30, 2015, at 03:25, Flavio Grossi <fgrossi at voismart.it> wrote:
> 
> I know the multiprocessing module is not properly supported by twisted apps because of the interactions among duplicated file descriptors and signal handling, as discussed other times.

To be fair, the multiprocessing module has most of these issues by itself :-).  The main reason Twisted didn't work with things like multiprocessing in the past was the fact that we didn't pass SA_RESTART to the SIGCHLD handler, and that has long since been resolved; you can now fork, os.system, popen, and multiprocess more or less like you can in any other Python program.

> But python 3.4 introduces a new mode to use that module by spawning (i.e. fork() followed by execv()) the new processes instead of simply forking it.

That is a definite improvement and will be far more reliable.

> So my question is how supported this is by twisted, and in general how safe it is to use subprocesses created by duplicating the parent immediately followed by the execv of a fresh interpreter.

This is what Twisted would do if it were spawning a subprocess, so... safe enough.

> What i'm thinking is something like this, to asynchronously process requests and delegate the cpu-bound work to some processes:

This will probably work, but it still has the drawbacks of multiprocessing:

1. you will be serializing 'work' via pickle, which is fraught with problems,
2. you will have no way to tell when 'work' has completed, so you will easily overload all of your worker processes under heavy load.

Instead, using something like ampoule <https://pypi.python.org/pypi/ampoule <https://pypi.python.org/pypi/ampoule>> would allow you to use twisted's spawnProcess facility to send and receive data via a more reliable serialization mechanism than pickle, and get straightforward feedback (Deferreds firing with results) when work is complete.

In fairness, even doing this with ampoule is altogether too much boilerplate, and we should probably have something for quick-and-dirty multiprocessing like a 'deferToProcess' that just uses pickle and presents a similarly convenient API, spawning python interpreters as necessary behind the scenes.  So I can understand why you're looking at multiprocessing; all I can tell you for now is that it is probably worth setting up all the necessary infrastructure to do this the "right way" because it will be more reliable and you will rapidly need to expand to do bi-directional communication.

Thanks for using Twisted,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151003/a60853f4/attachment-0001.html>

From glyph at twistedmatrix.com  Sat Oct  3 05:11:04 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 3 Oct 2015 04:11:04 -0700
Subject: [Twisted-Python] Call for volunteers: fundraising
In-Reply-To: <CAKmUHjZbr+GDbmU47jrX5QeKJJ=GPCwFZU4qN4XcWQx4tWWeBg@mail.gmail.com>
References: <CAKmUHjZbr+GDbmU47jrX5QeKJJ=GPCwFZU4qN4XcWQx4tWWeBg@mail.gmail.com>
Message-ID: <F3AC9E09-FAAA-4EF7-B680-4D0E89B1D668@twistedmatrix.com>


> On Oct 1, 2015, at 03:34, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> I don't suppose I will be crushed in the stampede to reply to this email.

Thanks so much for replying, John :).

> But it strikes me as fairly important that we do something about this.

Yes, I agree.

> At the moment I'm none to sure what would be involved so if someone could enlighten me as to the requirements, I'll have a better idea of what I might have to do.

Basically, it's "whatever you can do".  More specifically, we need someone to do the work of discovering interested sponsors - however you can discover them - figuring out who to contact at those sponsors, following up with them if they have questions, and ultimately getting them to sign on the line which is dotted.  Given that our current effort is almost nothing - the SFC follows up with existing sponsors, or new sponsors who contact them, but doesn't have the bandwidth to pursue new ones - any effort in this direction would be very useful.

Does that make sense?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151003/8c9aa9cc/attachment.html>

From johnaherne at rocs.co.uk  Sun Oct  4 09:04:52 2015
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sun, 4 Oct 2015 16:04:52 +0100
Subject: [Twisted-Python] Call for volunteers: fundraising
Message-ID: <CAKmUHjYsQARnxwPDN2HYyBzP3DCVeB6Um4_BNAG=jboufkTrHw@mail.gmail.com>

OK.

That makes sense.

Do we have a list of current sponsors and what they have contributed stored
anywhere.

Do we have a list of email addresses of people using twisted in a serious
application that might be contacted.

Then a list of people that have contributed to twisted so are making a
contribution that is not strictly financial.

If not, then we have to try and find out who are using twisted for a
business application.

Any pointers to where I can find this information will be helpful.

Thanks

-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151004/c5d504dd/attachment.html>

From commercials24 at yahoo.de  Mon Oct  5 03:33:09 2015
From: commercials24 at yahoo.de (peter)
Date: Mon, 05 Oct 2015 11:33:09 +0200
Subject: [Twisted-Python] irc bot,
 reacting to: irc_ERR_NOSUCHNICK. after the code where the reactor
 was started
Message-ID: <561243D5.6000300@yahoo.de>

my bot inherits from irc.IRCClient, when it sends a message to another 
user who isnt online irc_ERR_NOSUCHNICK(self, prefix, command) is called.
how can i react to that message, my code is called with:


class mybot(irc.IRCClient):
...
if __name__ == "__main__":

     factory = XdccBotFactory( channel, nickname, xdccbot, xdccrequests )
     reactor.connectTCP( server, 6667, factory )



in irc_ERR_NOSUCHNICK... i got:
     error_message = "%s bot is not connected to server" % 
now.strftime("%Y-%m-%d %H:%M:%S")
     log.warning(error_message)


which works.
but what i really would like to have is:


if __name__ == "__main__":

     factory = XdccBotFactory( channel, nickname, xdccbot, xdccrequests )
     reactor.connectTCP( server, 6667, factory )

     if "bot not online":
         "send message to antoher user"


so basically i need the information that irc_ERR_... was called after 
the reactor was started.
how do you do that?



From commercials24 at yahoo.de  Mon Oct  5 05:42:31 2015
From: commercials24 at yahoo.de (peter)
Date: Mon, 05 Oct 2015 13:42:31 +0200
Subject: [Twisted-Python] irc bot,
 reacting to: irc_ERR_NOSUCHNICK. after the code where the reactor
 was started
Message-ID: <56126227.3030209@yahoo.de>

my bot inherits from irc.IRCClient, when it sends a message to another 
user who isnt online irc_ERR_NOSUCHNICK(self, prefix, command) is called.
how can i react to that message, my code is called with:


class mybot(irc.IRCClient):
...
if __name__ == "__main__":

     factory = XdccBotFactory( channel, nickname, xdccbot, xdccrequests )
     reactor.connectTCP( server, 6667, factory )



in irc_ERR_NOSUCHNICK... i got:
     error_message = "%s bot is not connected to server" % 
now.strftime("%Y-%m-%d %H:%M:%S")
     log.warning(error_message)


which works.
but what i really would like to have is:


if __name__ == "__main__":

     factory = XdccBotFactory( channel, nickname, xdccbot, xdccrequests )
     reactor.connectTCP( server, 6667, factory )

     if "bot not online":
         "send message to antoher user"


so basically i need the information that irc_ERR_... was called after 
the reactor was started.
how do you do that?



From glyph at twistedmatrix.com  Mon Oct  5 13:52:14 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 5 Oct 2015 12:52:14 -0700
Subject: [Twisted-Python] Call for volunteers: fundraising
In-Reply-To: <CAKmUHjYsQARnxwPDN2HYyBzP3DCVeB6Um4_BNAG=jboufkTrHw@mail.gmail.com>
References: <CAKmUHjYsQARnxwPDN2HYyBzP3DCVeB6Um4_BNAG=jboufkTrHw@mail.gmail.com>
Message-ID: <D9F59155-EEFC-4720-8CCE-4344E38B6131@twistedmatrix.com>


> On Oct 4, 2015, at 8:04 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> OK.
> 
> That makes sense.
> 
> Do we have a list of current sponsors and what they have contributed stored anywhere.
> 
> Do we have a list of email addresses of people using twisted in a serious application that might be contacted.
> 
> Then a list of people that have contributed to twisted so are making a contribution that is not strictly financial.
> 
> If not, then we have to try and find out who are using twisted for a business application.
> 
> Any pointers to where I can find this information will be helpful.

We do have all of those things; I can put you in touch with our contact at the SFC if you want to get started :-).  Shall I do so?

-glyph




From glyph at twistedmatrix.com  Mon Oct  5 15:12:09 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 5 Oct 2015 14:12:09 -0700
Subject: [Twisted-Python] irc bot,
	reacting to: irc_ERR_NOSUCHNICK. after the code where the reactor
	was started
In-Reply-To: <561243D5.6000300@yahoo.de>
References: <561243D5.6000300@yahoo.de>
Message-ID: <8092AEB6-7AFD-4A0D-972B-4B3530A0E48C@twistedmatrix.com>


> On Oct 5, 2015, at 2:33 AM, peter <commercials24 at yahoo.de> wrote:
> 
> my bot inherits from irc.IRCClient, when it sends a message to another user who isnt online irc_ERR_NOSUCHNICK(self, prefix, command) is called.
> how can i react to that message, my code is called with:
> 
> 
> class mybot(irc.IRCClient):
> ...
> if __name__ == "__main__":
> 
>    factory = XdccBotFactory( channel, nickname, xdccbot, xdccrequests )
>    reactor.connectTCP( server, 6667, factory )
> 
> 
> 
> in irc_ERR_NOSUCHNICK... i got:
>    error_message = "%s bot is not connected to server" % now.strftime("%Y-%m-%d %H:%M:%S")
>    log.warning(error_message)
> 
> 
> which works.
> but what i really would like to have is:
> 
> 
> if __name__ == "__main__":
> 
>    factory = XdccBotFactory( channel, nickname, xdccbot, xdccrequests )
>    reactor.connectTCP( server, 6667, factory )
> 
>    if "bot not online":
>        "send message to antoher user"
> 
> 
> so basically i need the information that irc_ERR_... was called after the reactor was started.
> how do you do that?

Use Endpoints <https://twistedmatrix.com/documents/15.4.0/core/howto/endpoints.html> so you get a nice `Deferred? back from connectTCP.
Add a callback to that Deferred.
Add a method to `XdccBotFactory? that returns a `Deferred? that fires when its message is successfully sent and acknowledged, and then add a callback to that `Deferred?.

If you were to use inlineCallbacks to inline the callbacks you're adding into one function, it might look something like this:

> @inlineCallbacks
> def main(reactor):
>     factory = XdccBotFactory(channel, nickname, xdccbot, xdccrequests)
>     endpoint = clientFromString(reactor, "...")
>     bot = yield endpoint.connect(factory)
>     online = yield bot.isBotOnline()
>     if online:
>         "send message to another user"
>     else:
>         "ok"


Does this make sense?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151005/f6666613/attachment.html>

From glyph at twistedmatrix.com  Mon Oct  5 15:28:25 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 5 Oct 2015 14:28:25 -0700
Subject: [Twisted-Python] twisted.mail.imap4.IMAP4Client.fetchMessage
	always throws exception
In-Reply-To: <1c9557cc.9170.14f93b4527b.Coremail.snailcoder@163.com>
References: <1c9557cc.9170.14f93b4527b.Coremail.snailcoder@163.com>
Message-ID: <81D21A89-A4CA-4942-A75F-9C07284293F2@twistedmatrix.com>


> On Sep 3, 2015, at 7:55 AM, Wang Yan <snailcoder at 163.com> wrote:
> 
> Hi,
> 
> I've installed Twisted 15.3.0 on Ubuntu 14.04LTS. Excellent work but there's one problem bothering me for a long time: twisted.mail.imap4.IMAP4Client.fetchMessage always throws exception and the exception occured at random, e.g. somtimes the exception occured when the program read the 120th mail, sometimes it occured at the 150th or 200th mail. The traceback of the exception is as follows:
> 
> Unhandled Error
> Traceback (most recent call last):
>   File "/usr/local/lib/python2.7/dist-packages/Twisted-15.3.0-py2.7-linux-i686.egg/twisted/python/log.py", line 101, in callWithLogger
>     return callWithContext({"system": lp}, func, *args, **kw)
>   File "/usr/local/lib/python2.7/dist-packages/Twisted-15.3.0-py2.7-linux-i686.egg/twisted/python/log.py", line 84, in callWithContext
>     return context.call({ILogContext: newCtx}, func, *args, **kw)
>   File "/usr/local/lib/python2.7/dist-packages/Twisted-15.3.0-py2.7-linux-i686.egg/twisted/python/context.py", line 118, in callWithContext
>     return self.currentContext().callWithContext(ctx, func, *args, **kw)
>   File "/usr/local/lib/python2.7/dist-packages/Twisted-15.3.0-py2.7-linux-i686.egg/twisted/python/context.py", line 81, in callWithContext
>     return func(*args,**kw)
> --- <exception caught here> ---
>   File "/usr/local/lib/python2.7/dist-packages/Twisted-15.3.0-py2.7-linux-i686.egg/twisted/internet/posixbase.py", line 597, in _doReadOrWrite
>     why = selectable.doRead()
>   File "/usr/local/lib/python2.7/dist-packages/Twisted-15.3.0-py2.7-linux-i686.egg/twisted/internet/tcp.py", line 209, in doRead
>     return self._dataReceived(data)
>   File "/usr/local/lib/python2.7/dist-packages/Twisted-15.3.0-py2.7-linux-i686.egg/twisted/internet/tcp.py", line 215, in _dataReceived
>     rval = self.protocol.dataReceived(data)
>   File "/usr/local/lib/python2.7/dist-packages/Twisted-15.3.0-py2.7-linux-i686.egg/twisted/protocols/basic.py", line 571, in dataReceived
>     why = self.lineReceived(line)
>   File "/usr/local/lib/python2.7/dist-packages/Twisted-15.3.0-py2.7-linux-i686.egg/twisted/mail/imap4.py", line 2356, in lineReceived
>     self._regularDispatch(line)
>   File "/usr/local/lib/python2.7/dist-packages/Twisted-15.3.0-py2.7-linux-i686.egg/twisted/mail/imap4.py", line 2383, in _regularDispatch
>     tag, rest = parts
> exceptions.ValueError: need more than 1 value to unpack
> 
> My code is as simple as possible and the exception is thrown by the following codes:
> 
> dlist = []
> for msg in messages:    # use message number, not UID
>     d = self.fetchMessage(msg, uid=False)
>     d.addCallback(cbGetAttachment)
>     dlist.append(d)
> dl = defer.DeferredList(dlist)
> return dl.addCallback(cbLogout)
> 
> Is there anybody know about this issue?


Hi Wang,

Sorry it took some time to get back to you.  What kind of mail server are you talking to?  This looks like a protocol error - perhaps a bug in the server you're talking to, perhaps a bug in Twisted's handling of a valid response - but it's hard to say more without looking at the traffic and the intended behavior.  (I am no longer well-versed enough in the IMAP protocol to guess what is going on at a glance).  Is there any chance you have ever managed to reproduce this on a small set of data?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151005/e347350e/attachment.html>

From johnaherne at rocs.co.uk  Tue Oct  6 00:09:24 2015
From: johnaherne at rocs.co.uk (John Aherne)
Date: Tue, 6 Oct 2015 07:09:24 +0100
Subject: [Twisted-Python] Call for volunteers: fundraising
In-Reply-To: <D9F59155-EEFC-4720-8CCE-4344E38B6131@twistedmatrix.com>
References: <CAKmUHjYsQARnxwPDN2HYyBzP3DCVeB6Um4_BNAG=jboufkTrHw@mail.gmail.com>
 <D9F59155-EEFC-4720-8CCE-4344E38B6131@twistedmatrix.com>
Message-ID: <CAKmUHjYe6D7DotXqLM+rGT58hhBOj7+jLZxV1U+=FX7pPYQJ1Q@mail.gmail.com>

OK. If you feed that info to me that should be fine.



On Mon, Oct 5, 2015 at 8:52 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> > On Oct 4, 2015, at 8:04 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> >
> > OK.
> >
> > That makes sense.
> >
> > Do we have a list of current sponsors and what they have contributed
> stored anywhere.
> >
> > Do we have a list of email addresses of people using twisted in a
> serious application that might be contacted.
> >
> > Then a list of people that have contributed to twisted so are making a
> contribution that is not strictly financial.
> >
> > If not, then we have to try and find out who are using twisted for a
> business application.
> >
> > Any pointers to where I can find this information will be helpful.
>
> We do have all of those things; I can put you in touch with our contact at
> the SFC if you want to get started :-).  Shall I do so?
>
> -glyph
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151006/80da39e7/attachment-0001.html>

From psi29a at gmail.com  Tue Oct  6 11:51:16 2015
From: psi29a at gmail.com (bret curtis)
Date: Tue, 6 Oct 2015 19:51:16 +0200
Subject: [Twisted-Python] Call for volunteers: fundraising
In-Reply-To: <D9F59155-EEFC-4720-8CCE-4344E38B6131@twistedmatrix.com>
References: <CAKmUHjYsQARnxwPDN2HYyBzP3DCVeB6Um4_BNAG=jboufkTrHw@mail.gmail.com>
 <D9F59155-EEFC-4720-8CCE-4344E38B6131@twistedmatrix.com>
Message-ID: <CA+LhZ98Z2iKFNxM4bzNcvj9RxdEmxswSu7CzvZ3XC0MchDau6A@mail.gmail.com>

For me as well please. :)

Cheers,
Bret

On Mon, Oct 5, 2015 at 9:52 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> > On Oct 4, 2015, at 8:04 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> >
> > OK.
> >
> > That makes sense.
> >
> > Do we have a list of current sponsors and what they have contributed
> stored anywhere.
> >
> > Do we have a list of email addresses of people using twisted in a
> serious application that might be contacted.
> >
> > Then a list of people that have contributed to twisted so are making a
> contribution that is not strictly financial.
> >
> > If not, then we have to try and find out who are using twisted for a
> business application.
> >
> > Any pointers to where I can find this information will be helpful.
>
> We do have all of those things; I can put you in touch with our contact at
> the SFC if you want to get started :-).  Shall I do so?
>
> -glyph
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151006/d6a9133c/attachment.html>

From glyph at twistedmatrix.com  Tue Oct  6 12:54:38 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 6 Oct 2015 11:54:38 -0700
Subject: [Twisted-Python] Call for volunteers: fundraising
In-Reply-To: <CA+LhZ98Z2iKFNxM4bzNcvj9RxdEmxswSu7CzvZ3XC0MchDau6A@mail.gmail.com>
References: <CAKmUHjYsQARnxwPDN2HYyBzP3DCVeB6Um4_BNAG=jboufkTrHw@mail.gmail.com>
 <D9F59155-EEFC-4720-8CCE-4344E38B6131@twistedmatrix.com>
 <CA+LhZ98Z2iKFNxM4bzNcvj9RxdEmxswSu7CzvZ3XC0MchDau6A@mail.gmail.com>
Message-ID: <0160CD21-03F0-4389-A790-2C6E8049BE13@twistedmatrix.com>

Thanks, it's great to get some volunteers! :-D

I've contacted both of you directly, so you should receive those emails soon...

-glyph

> On Oct 6, 2015, at 10:51 AM, bret curtis <psi29a at gmail.com> wrote:
> 
> For me as well please. :)
> 
> Cheers,
> Bret
> 
> On Mon, Oct 5, 2015 at 9:52 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> > On Oct 4, 2015, at 8:04 AM, John Aherne <johnaherne at rocs.co.uk <mailto:johnaherne at rocs.co.uk>> wrote:
> >
> > OK.
> >
> > That makes sense.
> >
> > Do we have a list of current sponsors and what they have contributed stored anywhere.
> >
> > Do we have a list of email addresses of people using twisted in a serious application that might be contacted.
> >
> > Then a list of people that have contributed to twisted so are making a contribution that is not strictly financial.
> >
> > If not, then we have to try and find out who are using twisted for a business application.
> >
> > Any pointers to where I can find this information will be helpful.
> 
> We do have all of those things; I can put you in touch with our contact at the SFC if you want to get started :-).  Shall I do so?
> 
> -glyph
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151006/18884256/attachment.html>

From commercials24 at yahoo.de  Wed Oct  7 00:38:45 2015
From: commercials24 at yahoo.de (peter)
Date: Wed, 07 Oct 2015 08:38:45 +0200
Subject: [Twisted-Python] irc bot,
 reacting to: irc_ERR_NOSUCHNICK. after the code where the reactor
 was started
In-Reply-To: <8092AEB6-7AFD-4A0D-972B-4B3530A0E48C@twistedmatrix.com>
References: <561243D5.6000300@yahoo.de>
 <8092AEB6-7AFD-4A0D-972B-4B3530A0E48C@twistedmatrix.com>
Message-ID: <5614BDF5.9070001@yahoo.de>

On 10/05/2015 11:12 PM, Glyph Lefkowitz wrote:
>
>> On Oct 5, 2015, at 2:33 AM, peter <commercials24 at yahoo.de 
>> <mailto:commercials24 at yahoo.de>> wrote:
>>
>> my bot inherits from irc.IRCClient, when it sends a message to 
>> another user who isnt online irc_ERR_NOSUCHNICK(self, prefix, 
>> command) is called.
>> how can i react to that message, my code is called with:
>>
>>
>> class mybot(irc.IRCClient):
>> ...
>> if __name__ == "__main__":
>>
>>    factory = XdccBotFactory( channel, nickname, xdccbot, xdccrequests )
>>    reactor.connectTCP( server, 6667, factory )
>>
>>
>>
>> in irc_ERR_NOSUCHNICK... i got:
>>    error_message = "%s bot is not connected to server" % 
>> now.strftime("%Y-%m-%d %H:%M:%S")
>>    log.warning(error_message)
>>
>>
>> which works.
>> but what i really would like to have is:
>>
>>
>> if __name__ == "__main__":
>>
>>    factory = XdccBotFactory( channel, nickname, xdccbot, xdccrequests )
>>    reactor.connectTCP( server, 6667, factory )
>>
>>    if "bot not online":
>>        "send message to antoher user"
>>
>>
>> so basically i need the information that irc_ERR_... was called after 
>> the reactor was started.
>> how do you do that?
>
>  1. Use Endpoints
>     <https://twistedmatrix.com/documents/15.4.0/core/howto/endpoints.html>
>     so you get a nice `Deferred? back from connectTCP.
>  2. Add a callback to that Deferred.
>  3. Add a method to `XdccBotFactory? that returns a `Deferred? that
>     fires when its message is successfully sent and acknowledged, and
>     then add a callback to /that/ `Deferred?.
>
>
> If you were to use inlineCallbacks to inline the callbacks you're 
> adding into one function, it might look something like this:
>
>> @inlineCallbacks
>> *def* main(reactor):
>>     factory = XdccBotFactory(channel, nickname, xdccbot, xdccrequests)
>>     endpoint = clientFromString(reactor, "...")
>>     bot = *yield* endpoint.connect(factory)
>>     online = *yield* bot.isBotOnline()
>> *if* online:
>>         "send message to another user"
>> *else*:
>> "ok"
>
> Does this make sense?
>
> -glyph
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

im sure youre solution is just fine, could you show me how you would 
contruct isBotOnline?
im assuming that code would go into the class "mybot", next to 
irc_ERR_NOSUCKNICK?


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151007/9f7f436e/attachment.html>

From glyph at twistedmatrix.com  Wed Oct  7 01:49:45 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 7 Oct 2015 00:49:45 -0700
Subject: [Twisted-Python] irc bot,
	reacting to: irc_ERR_NOSUCHNICK. after the code where the reactor
	was started
In-Reply-To: <5614BDF5.9070001@yahoo.de>
References: <561243D5.6000300@yahoo.de>
 <8092AEB6-7AFD-4A0D-972B-4B3530A0E48C@twistedmatrix.com>
 <5614BDF5.9070001@yahoo.de>
Message-ID: <F7A9083A-A312-4962-9232-D278A37C4640@twistedmatrix.com>


> On Oct 6, 2015, at 11:38 PM, peter <commercials24 at yahoo.de> wrote:
> 
> im sure youre solution is just fine, could you show me how you would contruct isBotOnline?
> im assuming that code would go into the class "mybot", next to irc_ERR_NOSUCKNICK?


The problem with just doing that is that there is no affirmative response that a message was sent, so there's no way to fire the deferred successfully if that's all you're doing.  Instead, you can use the ISON command to determine if the bot is online (and of course, the bot might go offline between the check and sending the message, so you will need to handle that case somehow too).

Since doing this is somewhat obscure, here's a working script that just checks if a nick specified on the command line is online on freenode:

from __future__ import print_function
from twisted.internet.defer import Deferred, inlineCallbacks
from twisted.words.protocols.irc import IRCClient
from twisted.internet.endpoints import clientFromString
from twisted.internet.protocol import Factory

class mybot(IRCClient, object):
    def __init__(self):
        self._isonQueue = []
        self.motdReceived = Deferred()

    def irc_RPL_ISON(self, prefix, params):
        username, d = self._isonQueue.pop(0)
        d.callback((username in params[1]))

    def isOnline(self, username):
        d = Deferred()
        self.sendLine("ISON " + username)
        self._isonQueue.append((username, d))
        return d

    def irc_RPL_ENDOFMOTD(self, prefix, params):
        self.motdReceived.callback(None)

@inlineCallbacks
def main(reactor, nick):
    endpoint = clientFromString(reactor, "tcp:chat.freenode.net:6667")
    proto = yield endpoint.connect(Factory.forProtocol(mybot))
    print("Waiting for MOTD...")
    yield proto.motdReceived
    print("Querying...")
    isOnline = yield proto.isOnline(nick)
    if isOnline:
        print(nick, "is online!")
    else:
        print(nick, "is *NOT* online!")

from twisted.internet.task import react
from sys import argv
react(main, argv[1:])


-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151007/80a41b80/attachment-0001.html>

From commercials24 at yahoo.de  Wed Oct  7 02:35:23 2015
From: commercials24 at yahoo.de (peter)
Date: Wed, 07 Oct 2015 10:35:23 +0200
Subject: [Twisted-Python] irc bot,
 reacting to: irc_ERR_NOSUCHNICK. after the code where the reactor
 was started
In-Reply-To: <F7A9083A-A312-4962-9232-D278A37C4640@twistedmatrix.com>
References: <561243D5.6000300@yahoo.de>
 <8092AEB6-7AFD-4A0D-972B-4B3530A0E48C@twistedmatrix.com>
 <5614BDF5.9070001@yahoo.de>
 <F7A9083A-A312-4962-9232-D278A37C4640@twistedmatrix.com>
Message-ID: <5614D94B.9050400@yahoo.de>

On 10/07/2015 09:49 AM, Glyph Lefkowitz wrote:
>
>> On Oct 6, 2015, at 11:38 PM, peter <commercials24 at yahoo.de 
>> <mailto:commercials24 at yahoo.de>> wrote:
>>
>> im sure youre solution is just fine, could you show me how you would 
>> contruct isBotOnline?
>> im assuming that code would go into the class "mybot", next to 
>> irc_ERR_NOSUCKNICK?
>
> The problem with just doing that is that there is no affirmative 
> response that a message was sent, so there's no way to fire the 
> deferred successfully if that's all you're doing.  Instead, you can 
> use the ISON command to determine if the bot is online (and of course, 
> the bot might go offline between the check and sending the message, so 
> you will need to handle that case somehow too).
>
> Since doing this is somewhat obscure, here's a working script that 
> just checks if a nick specified on the command line is online on freenode:
>
>     *from* *__future__* *import* print_function
>     *from* *twisted.internet.defer* *import* Deferred, inlineCallbacks
>     *from**twisted.words.protocols.irc**import*IRCClient
>     *from**twisted.internet.endpoints**import*clientFromString
>     *from**twisted.internet.protocol**import*Factory
>
>     *class* *mybot*(IRCClient, object):
>     *def* __init__(self):
>     self._isonQueue = []
>     self.motdReceived = Deferred()
>
>     *def* irc_RPL_ISON(self, prefix, params):
>             username, d = self._isonQueue.pop(0)
>             d.callback((username *in* params[1]))
>
>     *def* isOnline(self, username):
>             d = Deferred()
>     self.sendLine("ISON " + username)
>     self._isonQueue.append((username, d))
>     *return* d
>
>     *def* irc_RPL_ENDOFMOTD(self, prefix, params):
>     self.motdReceived.callback(None)
>
>     @inlineCallbacks
>     *def* main(reactor, nick):
>         endpoint = clientFromString(reactor, "tcp:chat.freenode.net:6667")
>         proto = *yield* endpoint.connect(Factory.forProtocol(mybot))
>     *print*("Waiting for MOTD...")
>     *yield* proto.motdReceived
>     *print*("Querying...")
>         isOnline = *yield* proto.isOnline(nick)
>     *if* isOnline:
>     *print*(nick, "is online!")
>     *else*:
>     *print*(nick, "is *NOT* online!")
>
>     *from**twisted.internet.task**import*react
>     *from**sys**import*argv
>     react(main, argv[1:])
>
>
>
> -glyph
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
thank you very much, i will try to adapt that solution to my code.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151007/e70f5054/attachment.html>

From johnaherne at rocs.co.uk  Wed Oct  7 02:40:02 2015
From: johnaherne at rocs.co.uk (John Aherne)
Date: Wed, 7 Oct 2015 09:40:02 +0100
Subject: [Twisted-Python] Call for volunteers: fundraising
Message-ID: <CAKmUHjZzdJnBm3DBw-OfbpsjJRSa6CdT3snpzWB5dLVtec+osA@mail.gmail.com>

Looking at the twisted web site, it might be useful to make changes to
encourage more people in - a never ending source of discussion no doubt :)

Also we could display the sponsor logos higher up and offer more visibility.

This raises the question as to whether anyone has overall responsibility
for maintaining the web site.

Obviously you can't just go arbitrarily changing the web site without
reference to anyone..



-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151007/04f1f56d/attachment.html>

From glyph at twistedmatrix.com  Wed Oct  7 02:41:53 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 7 Oct 2015 01:41:53 -0700
Subject: [Twisted-Python] Call for volunteers: fundraising
In-Reply-To: <CAKmUHjZzdJnBm3DBw-OfbpsjJRSa6CdT3snpzWB5dLVtec+osA@mail.gmail.com>
References: <CAKmUHjZzdJnBm3DBw-OfbpsjJRSa6CdT3snpzWB5dLVtec+osA@mail.gmail.com>
Message-ID: <C0297900-E176-4AF5-B268-4F377CA63AAC@twistedmatrix.com>


> On Oct 7, 2015, at 1:40 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> Looking at the twisted web site, it might be useful to make changes to encourage more people in - a never ending source of discussion no doubt :)
> 
> Also we could display the sponsor logos higher up and offer more visibility.
> 
> This raises the question as to whether anyone has overall responsibility for maintaining the web site.
> 
> Obviously you can't just go arbitrarily changing the web site without reference to anyone..

I can give you wiki edit permissions if you would you like, and you can make a new front page at a different location. What's your username?

-glyph




From twisted-python at 2xlp.com  Wed Oct  7 12:18:37 2015
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 7 Oct 2015 14:18:37 -0400
Subject: [Twisted-Python] txmongo vs. pymongo + callInThread
In-Reply-To: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>
References: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>
Message-ID: <99FF47AC-3082-4270-A3F0-4910AD0A348E@2xlp.com>


On Dec 21, 2014, at 4:05 PM, Clayton Daley wrote:

> Are there any major disadvantages of using pymongo with callInThread instead of txmongo?  I'd like to take advantage of some newer features in pymongo (unfortunately not available in txmongo) and it's certainly easier to maintain feature parity using callInThread.

I know thread is a bit old, but I'm wondering if the OP ended up using callInThread or not , and if there were any issues.

I started working on a txmongo solution to offload some storage, but then realized I was already in a deferred thread (to handle blocking operations) and i probably should be using pymongo.



From johnaherne at rocs.co.uk  Thu Oct  8 00:02:42 2015
From: johnaherne at rocs.co.uk (John Aherne)
Date: Thu, 8 Oct 2015 07:02:42 +0100
Subject: [Twisted-Python] Call for volunteers: fundraising
In-Reply-To: <C0297900-E176-4AF5-B268-4F377CA63AAC@twistedmatrix.com>
References: <CAKmUHjZzdJnBm3DBw-OfbpsjJRSa6CdT3snpzWB5dLVtec+osA@mail.gmail.com>
 <C0297900-E176-4AF5-B268-4F377CA63AAC@twistedmatrix.com>
Message-ID: <CAKmUHjYuVd282_4j9Mcz=6uwof4dyUn-ppFsW1c0eXrSURErhQ@mail.gmail.com>

OK.

username johnrocs

I'll wait and see what Bret wants to do and see where we go from there.

John

On Wed, Oct 7, 2015 at 9:41 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> > On Oct 7, 2015, at 1:40 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> >
> > Looking at the twisted web site, it might be useful to make changes to
> encourage more people in - a never ending source of discussion no doubt :)
> >
> > Also we could display the sponsor logos higher up and offer more
> visibility.
> >
> > This raises the question as to whether anyone has overall responsibility
> for maintaining the web site.
> >
> > Obviously you can't just go arbitrarily changing the web site without
> reference to anyone..
>
> I can give you wiki edit permissions if you would you like, and you can
> make a new front page at a different location. What's your username?
>
> -glyph
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151008/c19a1dff/attachment.html>

From psi29a at gmail.com  Thu Oct  8 04:19:54 2015
From: psi29a at gmail.com (bret curtis)
Date: Thu, 8 Oct 2015 12:19:54 +0200
Subject: [Twisted-Python] txmongo vs. pymongo + callInThread
In-Reply-To: <99FF47AC-3082-4270-A3F0-4910AD0A348E@2xlp.com>
References: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>
 <99FF47AC-3082-4270-A3F0-4910AD0A348E@2xlp.com>
Message-ID: <CA+LhZ9--xO9QowjWxxGEyhD2kNpoC4Hm=Ys5gtr7Qa-COS=-sA@mail.gmail.com>

We're not sure about what OP has done, but if there is ever anything
lacking in TxMongo... please open an issue/ticket with us over at:
https://github.com/twisted/txmongo

Cheers,
Bret

On Wed, Oct 7, 2015 at 8:18 PM, Jonathan Vanasco <twisted-python at 2xlp.com>
wrote:

>
> On Dec 21, 2014, at 4:05 PM, Clayton Daley wrote:
>
> > Are there any major disadvantages of using pymongo with callInThread
> instead of txmongo?  I'd like to take advantage of some newer features in
> pymongo (unfortunately not available in txmongo) and it's certainly easier
> to maintain feature parity using callInThread.
>
> I know thread is a bit old, but I'm wondering if the OP ended up using
> callInThread or not , and if there were any issues.
>
> I started working on a txmongo solution to offload some storage, but then
> realized I was already in a deferred thread (to handle blocking operations)
> and i probably should be using pymongo.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151008/0be585a0/attachment.html>

From itamar at itamarst.org  Thu Oct  8 07:04:38 2015
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 08 Oct 2015 09:04:38 -0400
Subject: [Twisted-Python] ANN: Eliot 0.9,
 the logging system with causality - now with journald support
Message-ID: <438cc689e6888b889e14319ebb3a2f0d@itamarst.org>

 
Eliot 0.9 is out, with a new utility for pretty-printing log messages
and native journald support [1]. You can now route Eliot logs to
journald and when an error occurs easily find all logged actions that
led up to that particular error, as opposed to most logging systems
where this would involve reading all the logs and figuring out which
ones apply and which to ignore. 

Most logging systems can tell you what happened; Eliot tells you _why_
it happened:

$ python linkcheck.py | eliot-tree
4c42a789-76f5-4f0b-b154-3dd0e3041445
+-- check_links at 1/started
    `-- urls: [u'http://google.com', u'http://nosuchurl']
    +-- download at 2,1/started
        `-- url: http://google.com
        +-- download at 2,2/succeeded
    +-- download at 3,1/started
        `-- url: http://nosuchurl
        +-- download at 3,2/failed
            |-- exception: requests.exceptions.ConnectionError
            |-- reason: ('Conn aborted', gaierror(-2, 'Name unknown'))
    +-- check_links at 4/failed
        |-- exception: exceptions.ValueError
        |-- reason: ('Conn aborted.', gaierror(-2, 'Name unknown'))

And here's the code that generated these logs (eliot-tree [2] was used
to render the output):

import sys
from eliot import start_action, to_file
import requests
to_file(sys.stdout)

def check_links(urls):
    with start_action(action_type="check_links", urls=urls):
        for url in urls:
            try:
                with start_action(action_type="download", url=url):
                    response = requests.get(url)
                    response.raise_for_status()
            except Exception as e:
                raise ValueError(str(e))

check_links(["http://google.com"], ["http://nosuchurl"])

Interested? Read more at https://eliot.readthedocs.org/.

Eliot is released under the Apache License 2 by ClusterHQ [3], the
Container Data People. We're hiring! [4]
 

Links:
------
[1] http://eliot.readthedocs.org/en/0.9.0/journald.html
[2] https://warehouse.python.org/project/eliot-tree/
[3] https://clusterhq.com
[4] https://clusterhq.com/careers/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151008/4807c099/attachment.html>

From twisted-python at 2xlp.com  Thu Oct  8 11:23:41 2015
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Thu, 8 Oct 2015 13:23:41 -0400
Subject: [Twisted-Python] txmongo vs. pymongo + callInThread
In-Reply-To: <CA+LhZ9--xO9QowjWxxGEyhD2kNpoC4Hm=Ys5gtr7Qa-COS=-sA@mail.gmail.com>
References: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>
 <99FF47AC-3082-4270-A3F0-4910AD0A348E@2xlp.com>
 <CA+LhZ9--xO9QowjWxxGEyhD2kNpoC4Hm=Ys5gtr7Qa-COS=-sA@mail.gmail.com>
Message-ID: <0B8EB5B2-7C53-457B-8631-046F715452D0@2xlp.com>


On Oct 8, 2015, at 6:19 AM, bret curtis wrote:

> We're not sure about what OP has done, but if there is ever anything lacking in TxMongo... please open an issue/ticket with us over at:
> https://github.com/twisted/txmongo

Thanks for the reply!   I actually did open a few lowball tickets on TxMongo yesterday -- the package doesn't specify the minimum required versions for mongo or twisted.  

I did some tests yesterday on PyMongo, and it seems like using it in deferToThread is safe.  I also ran some simulations on staging under a heavy load; no exceptions, everything passes, data is stored correctly.   The current pymongo "client" appears to be a threadsafe connection pool, and I can just grab a connection from it when needed in a thread.  Woo Hoo!

If the next version of this tool stays in Python, we'll definitely need to use TxMongo.  In the current design, we're already deferred to a thread and would have to restructure too much to use TxMongo.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151008/70ae2ee0/attachment.html>

From glyph at twistedmatrix.com  Thu Oct  8 17:38:23 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 8 Oct 2015 16:38:23 -0700
Subject: [Twisted-Python] ANN: Eliot 0.9,
	the logging system with causality - now with journald support
In-Reply-To: <438cc689e6888b889e14319ebb3a2f0d@itamarst.org>
References: <438cc689e6888b889e14319ebb3a2f0d@itamarst.org>
Message-ID: <2A292169-E357-452D-AFD6-6715425414F8@twistedmatrix.com>

> On Oct 8, 2015, at 6:04 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> 
> Eliot 0.9 is out, with a new utility for pretty-printing log messages and native journald support <http://eliot.readthedocs.org/en/0.9.0/journald.html>. You can now route Eliot logs to journald and when an error occurs easily find all logged actions that led up to that particular error, as opposed to most logging systems where this would involve reading all the logs and figuring out which ones apply and which to ignore.
>  
> Most logging systems can tell you what happened; Eliot tells you why it happened:

Cool, this looks awesome Itamar, thanks for letting us know!

Does Eliot make use of the new logging system at all?  If not, is there anything that might make Eliot's Twisted backend easier to maintain if we added it?  Just kind of curious about adoption of those new APIs in the world of logging...

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151008/fbb4a2a1/attachment.html>

From exarkun at twistedmatrix.com  Thu Oct  8 18:47:30 2015
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 09 Oct 2015 00:47:30 -0000
Subject: [Twisted-Python] ANN: Eliot 0.9,
 the logging system with causality - now with journald support
In-Reply-To: <2A292169-E357-452D-AFD6-6715425414F8@twistedmatrix.com>
References: <438cc689e6888b889e14319ebb3a2f0d@itamarst.org>
 <2A292169-E357-452D-AFD6-6715425414F8@twistedmatrix.com>
Message-ID: <20151009004730.7344.965043492.divmod.xquotient.10@top>

On 8 Oct, 11:38 pm, glyph at twistedmatrix.com wrote:
>>On Oct 8, 2015, at 6:04 AM, Itamar Turner-Trauring 
>><itamar at itamarst.org> wrote:
>>
>>Eliot 0.9 is out, with a new utility for pretty-printing log messages 
>>and native journald support 
>><http://eliot.readthedocs.org/en/0.9.0/journald.html>. You can now 
>>route Eliot logs to journald and when an error occurs easily find all 
>>logged actions that led up to that particular error, as opposed to 
>>most logging systems where this would involve reading all the logs and 
>>figuring out which ones apply and which to ignore.
>>
>>Most logging systems can tell you what happened; Eliot tells you why 
>>it happened:
>
>Cool, this looks awesome Itamar, thanks for letting us know!
>
>Does Eliot make use of the new logging system at all?  If not, is there 
>anything that might make Eliot's Twisted backend easier to maintain if 
>we added it?  Just kind of curious about adoption of those new APIs in 
>the world of logging...

As a user of Eliot and Twisted, an unpleasantness I commonly encounter 
is that the logs written by trial when running tests for code that uses 
Eliot for logging are a mish-mash of text messages and mangled Eliot 
logs.  The Eliot bits often get in the way of me reading the text part 
and the text parts and mangling ensure I can't use any Eliot tools to 
interpret the Eliot bits.

My understanding is that there aren't any existing hooks in Twisted to 
customize trial's logging which would allow this to be improved.

There is some related discussion (maybe more oriented towards a 
particular solution than a full description of the problem, though) on a 
ticket soon to be a couple years old:

  https://twistedmatrix.com/trac/ticket/6939

Jean-Paul


From glyph at twistedmatrix.com  Thu Oct  8 19:14:15 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 8 Oct 2015 18:14:15 -0700
Subject: [Twisted-Python] ANN: Eliot 0.9,
	the logging system with causality - now with journald support
In-Reply-To: <20151009004730.7344.965043492.divmod.xquotient.10@top>
References: <438cc689e6888b889e14319ebb3a2f0d@itamarst.org>
 <2A292169-E357-452D-AFD6-6715425414F8@twistedmatrix.com>
 <20151009004730.7344.965043492.divmod.xquotient.10@top>
Message-ID: <1AD54E8A-F9F0-4F8E-A93C-705808D4A8BE@twistedmatrix.com>


> On Oct 8, 2015, at 5:47 PM, exarkun at twistedmatrix.com wrote:
> 
> On 8 Oct, 11:38 pm, glyph at twistedmatrix.com wrote:
>>> On Oct 8, 2015, at 6:04 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
>>> 
>>> Eliot 0.9 is out, with a new utility for pretty-printing log messages and native journald support <http://eliot.readthedocs.org/en/0.9.0/journald.html>. You can now route Eliot logs to journald and when an error occurs easily find all logged actions that led up to that particular error, as opposed to most logging systems where this would involve reading all the logs and figuring out which ones apply and which to ignore.
>>> 
>>> Most logging systems can tell you what happened; Eliot tells you why it happened:
>> 
>> Cool, this looks awesome Itamar, thanks for letting us know!
>> 
>> Does Eliot make use of the new logging system at all?  If not, is there anything that might make Eliot's Twisted backend easier to maintain if we added it?  Just kind of curious about adoption of those new APIs in the world of logging...
> 
> As a user of Eliot and Twisted, an unpleasantness I commonly encounter is that the logs written by trial when running tests for code that uses Eliot for logging are a mish-mash of text messages and mangled Eliot logs.  The Eliot bits often get in the way of me reading the text part and the text parts and mangling ensure I can't use any Eliot tools to interpret the Eliot bits.
> 
> My understanding is that there aren't any existing hooks in Twisted to customize trial's logging which would allow this to be improved.
> 
> There is some related discussion (maybe more oriented towards a particular solution than a full description of the problem, though) on a ticket soon to be a couple years old:
> 
> https://twistedmatrix.com/trac/ticket/6939 <https://twistedmatrix.com/trac/ticket/6939>

I actually ran into a variant of this exact same issue recently; thank you for directing my attention to this ticket.

I agree that the log output should be customizable, but I'm curious: if the logs were just serialized as JSON by default everywhere, would that make it easier to make the Eliot tooling work well?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151008/47e5d688/attachment.html>

From clayton.daley at gmail.com  Fri Oct  9 11:06:48 2015
From: clayton.daley at gmail.com (Clayton Daley)
Date: Fri, 9 Oct 2015 12:06:48 -0500
Subject: [Twisted-Python] txmongo vs. pymongo + callInThread
In-Reply-To: <0B8EB5B2-7C53-457B-8631-046F715452D0@2xlp.com>
References: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>
 <99FF47AC-3082-4270-A3F0-4910AD0A348E@2xlp.com>
 <CA+LhZ9--xO9QowjWxxGEyhD2kNpoC4Hm=Ys5gtr7Qa-COS=-sA@mail.gmail.com>
 <0B8EB5B2-7C53-457B-8631-046F715452D0@2xlp.com>
Message-ID: <CACKEAnWSxp6ScJqmVwnqd_cbfU7SZMG0AxAD0tCjPJiuOFfGRg@mail.gmail.com>

I (OP) was looking into these libraries/options as part of a side project
that's been delayed by real work.  I'm also relegating Mongo to a caching
layer after stumbling upon Sarah Mei's "Why You Should Never Use MongoDB"
and realizing I was going to have the exact same problems.

Clayton Daley

On Thu, Oct 8, 2015 at 12:23 PM, Jonathan Vanasco <twisted-python at 2xlp.com>
wrote:

>
> On Oct 8, 2015, at 6:19 AM, bret curtis wrote:
>
> We're not sure about what OP has done, but if there is ever anything
> lacking in TxMongo... please open an issue/ticket with us over at:
> https://github.com/twisted/txmongo
>
>
> Thanks for the reply!   I actually did open a few lowball tickets on
> TxMongo yesterday -- the package doesn't specify the minimum required
> versions for mongo or twisted.
>
> I did some tests yesterday on PyMongo, and it seems like using it in
> deferToThread is safe.  I also ran some simulations on staging under a
> heavy load; no exceptions, everything passes, data is stored correctly.
> The current pymongo "client" appears to be a threadsafe connection pool,
> and I can just grab a connection from it when needed in a thread.  Woo Hoo!
>
> If the next version of this tool stays in Python, we'll definitely need to
> use TxMongo.  In the current design, we're already deferred to a thread and
> would have to restructure too much to use TxMongo.
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151009/66e4122a/attachment.html>

From twisted-python at 2xlp.com  Fri Oct  9 11:52:49 2015
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Fri, 9 Oct 2015 13:52:49 -0400
Subject: [Twisted-Python] txmongo vs. pymongo + callInThread
In-Reply-To: <CACKEAnWSxp6ScJqmVwnqd_cbfU7SZMG0AxAD0tCjPJiuOFfGRg@mail.gmail.com>
References: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>
 <99FF47AC-3082-4270-A3F0-4910AD0A348E@2xlp.com>
 <CA+LhZ9--xO9QowjWxxGEyhD2kNpoC4Hm=Ys5gtr7Qa-COS=-sA@mail.gmail.com>
 <0B8EB5B2-7C53-457B-8631-046F715452D0@2xlp.com>
 <CACKEAnWSxp6ScJqmVwnqd_cbfU7SZMG0AxAD0tCjPJiuOFfGRg@mail.gmail.com>
Message-ID: <4B4A9AB1-1C10-4585-A46B-3CA4853B5951@2xlp.com>


On Oct 9, 2015, at 1:06 PM, Clayton Daley wrote:
> I (OP) was looking into these libraries/options as part of a side project that's been delayed by real work.  I'm also relegating Mongo to a caching layer after stumbling upon Sarah Mei's "Why You Should Never Use MongoDB" and realizing I was going to have the exact same problems
> 
Thanks for the update!  

FWIW, (sorry, non-twisted!)  if you want to avoid mongodb:

	1. We use redis for KV caching, and its really, really, really fast.
	2. Riak can use LevelDB as a backing store -- leveldb supports snappy compression on documents
	3. If you need the document search, i really like Elastic

I don't really like/trust mongodb from past experience myself.  I would normally not use it for anything other than a read-through cache... except for my current need.  We have a web spider and need to archive the snapshots.  WireTiger, which was bought by mongodb and integrated into the 3.x branch, is the only storage backend I've found that will do "bucket level compression".  I forget if it's applied on pages or blocks, but it will basically apply zlib or snappy compression onto sets of documents.  I looked for weeks on something that could do that, it was the only option.  We did a lot of storage tests on our typical data, and bucketed compression saves way more space than document compression or document compression using a seed.  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151009/b82757ba/attachment-0001.html>

From glyph at twistedmatrix.com  Fri Oct  9 16:27:59 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 9 Oct 2015 15:27:59 -0700
Subject: [Twisted-Python] process changes causing buildbot failures on win7?
Message-ID: <3F1F9E57-76D8-4DE3-80AF-136403FFF7EF@twistedmatrix.com>

These failures:

===============================================================================
[FAIL]
Traceback (most recent call last):
  File "C:\Users\Build Slave\bot-glyph-6\windows7-64-py2.7-select\Twisted\twisted\internet\test\test_process.py", line 361, in test_systemCallUninterruptedByChildExit
    self.assertEqual(result, ["Foo\n"])
  File "C:\Users\Build Slave\bot-glyph-6\windows7-64-py2.7-select\Twisted\twisted\trial\_synctest.py", line 437, in assertEqual
    super(_Assertions, self).assertEqual(first, second, msg)
  File "C:\Python27\Lib\unittest\case.py", line 513, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Python27\Lib\unittest\case.py", line 742, in assertListEqual
    self.assertSequenceEqual(list1, list2, msg, seq_type=list)
  File "C:\Python27\Lib\unittest\case.py", line 724, in assertSequenceEqual
    self.fail(msg)
twisted.trial.unittest.FailTest: Lists differ: [''] != ['Foo\n']

First differing element 0:

Foo


- ['']
+ ['Foo\n']

twisted.internet.test.test_process.ProcessTestsBuilder_IOCPReactorTests.test_systemCallUninterruptedByChildExit
twisted.internet.test.test_process.ProcessTestsBuilder_SelectReactorTests.test_systemCallUninterruptedByChildExit
twisted.internet.test.test_process.ProcessTestsBuilder_Win32ReactorTests.test_systemCallUninterruptedByChildExit

have started happening on the buildbot on trunk: https://buildbot.twistedmatrix.com/builders/windows7-64-py2.7/builds/5215/steps/select/logs/problems

soon after this change: http://twistedmatrix.com/trac/changeset/45725

Unfortunately the buildbot was in a kind of unrelated bad state when it landed, and the configuration is a bit different now, so I'm not sure if this is a regression or a configuration error.  But given that the change was about processes, and the failure is in the process test, I thought it might bear some investigation...

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151009/ff1ad4bd/attachment.html>

From hawkowl at atleastfornow.net  Fri Oct  9 21:36:21 2015
From: hawkowl at atleastfornow.net (Hawkie)
Date: Sat, 10 Oct 2015 11:36:21 +0800
Subject: [Twisted-Python] process changes causing buildbot failures on
 win7?
In-Reply-To: <3F1F9E57-76D8-4DE3-80AF-136403FFF7EF@twistedmatrix.com>
Message-ID: <2d3ae655-f60c-42df-b42e-bd86a4988b36@email.android.com>

It's because the Windows tests (that one) can't cope with spaces in the exe name, and now it's in a virtual env, that's popped up. 

The Python 3.5 branch has a fix for this, as the Windows 3.5 builder was the first to show this problem. 

-hawkie

On 10 Oct 2015 06:27, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
> These failures:
>
>> ===============================================================================
>>
>> [FAIL]
>>
>> Traceback (most recent call last):
>>
>>   File "C:\Users\Build Slave\bot-glyph-6\windows7-64-py2.7-select\Twisted\twisted\internet\test\test_process.py", line 361, in test_systemCallUninterruptedByChildExit
>>
>>     self.assertEqual(result, ["Foo\n"])
>>
>>   File "C:\Users\Build Slave\bot-glyph-6\windows7-64-py2.7-select\Twisted\twisted\trial\_synctest.py", line 437, in assertEqual
>>
>>     super(_Assertions, self).assertEqual(first, second, msg)
>>
>>   File "C:\Python27\Lib\unittest\case.py", line 513, in assertEqual
>>
>>     assertion_func(first, second, msg=msg)
>>
>>   File "C:\Python27\Lib\unittest\case.py", line 742, in assertListEqual
>>
>>     self.assertSequenceEqual(list1, list2, msg, seq_type=list)
>>
>>   File "C:\Python27\Lib\unittest\case.py", line 724, in assertSequenceEqual
>>
>>     self.fail(msg)
>>
>> twisted.trial.unittest.FailTest: Lists differ: [''] != ['Foo\n']
>>
>>
>>
>> First differing element 0:
>>
>>
>>
>> Foo
>>
>>
>>
>>
>>
>> - ['']
>>
>> + ['Foo\n']
>>
>>
>>
>> twisted.internet.test.test_process.ProcessTestsBuilder_IOCPReactorTests.test_systemCallUninterruptedByChildExit
>>
>> twisted.internet.test.test_process.ProcessTestsBuilder_SelectReactorTests.test_systemCallUninterruptedByChildExit
>>
>> twisted.internet.test.test_process.ProcessTestsBuilder_Win32ReactorTests.test_systemCallUninterruptedByChildExit
>>
>>
> have started happening on the buildbot on trunk:?https://buildbot.twistedmatrix.com/builders/windows7-64-py2.7/builds/5215/steps/select/logs/problems
>
> soon after this change:?http://twistedmatrix.com/trac/changeset/45725
>
> Unfortunately the buildbot was in a kind of unrelated bad state when it landed, and the configuration is a bit different now, so I'm not sure if this is a regression or a configuration error. ?But given that the change was about processes, and the failure is in the process test, I thought it might bear some investigation...
>
> -glyph

From glyph at twistedmatrix.com  Sat Oct 10 02:44:49 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 10 Oct 2015 01:44:49 -0700
Subject: [Twisted-Python] process changes causing buildbot failures on
	win7?
In-Reply-To: <2d3ae655-f60c-42df-b42e-bd86a4988b36@email.android.com>
References: <2d3ae655-f60c-42df-b42e-bd86a4988b36@email.android.com>
Message-ID: <251ED241-209B-4D90-815A-E04EABFE4675@twistedmatrix.com>

Aaaaand, it's fixed :)

https://twistedmatrix.com/trac/ticket/8046#comment:4

Thanks!

-glyph

> On Oct 9, 2015, at 8:36 PM, Hawkie <hawkowl at atleastfornow.net> wrote:
> 
> It's because the Windows tests (that one) can't cope with spaces in the exe name, and now it's in a virtual env, that's popped up. 
> 
> The Python 3.5 branch has a fix for this, as the Windows 3.5 builder was the first to show this problem. 
> 
> -hawkie
> 
> On 10 Oct 2015 06:27, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>> 
>> These failures:
>> 
>>> ===============================================================================
>>> 
>>> [FAIL]
>>> 
>>> Traceback (most recent call last):
>>> 
>>>  File "C:\Users\Build Slave\bot-glyph-6\windows7-64-py2.7-select\Twisted\twisted\internet\test\test_process.py", line 361, in test_systemCallUninterruptedByChildExit
>>> 
>>>    self.assertEqual(result, ["Foo\n"])
>>> 
>>>  File "C:\Users\Build Slave\bot-glyph-6\windows7-64-py2.7-select\Twisted\twisted\trial\_synctest.py", line 437, in assertEqual
>>> 
>>>    super(_Assertions, self).assertEqual(first, second, msg)
>>> 
>>>  File "C:\Python27\Lib\unittest\case.py", line 513, in assertEqual
>>> 
>>>    assertion_func(first, second, msg=msg)
>>> 
>>>  File "C:\Python27\Lib\unittest\case.py", line 742, in assertListEqual
>>> 
>>>    self.assertSequenceEqual(list1, list2, msg, seq_type=list)
>>> 
>>>  File "C:\Python27\Lib\unittest\case.py", line 724, in assertSequenceEqual
>>> 
>>>    self.fail(msg)
>>> 
>>> twisted.trial.unittest.FailTest: Lists differ: [''] != ['Foo\n']
>>> 
>>> 
>>> 
>>> First differing element 0:
>>> 
>>> 
>>> 
>>> Foo
>>> 
>>> 
>>> 
>>> 
>>> 
>>> - ['']
>>> 
>>> + ['Foo\n']
>>> 
>>> 
>>> 
>>> twisted.internet.test.test_process.ProcessTestsBuilder_IOCPReactorTests.test_systemCallUninterruptedByChildExit
>>> 
>>> twisted.internet.test.test_process.ProcessTestsBuilder_SelectReactorTests.test_systemCallUninterruptedByChildExit
>>> 
>>> twisted.internet.test.test_process.ProcessTestsBuilder_Win32ReactorTests.test_systemCallUninterruptedByChildExit
>>> 
>>> 
>> have started happening on the buildbot on trunk: https://buildbot.twistedmatrix.com/builders/windows7-64-py2.7/builds/5215/steps/select/logs/problems
>> 
>> soon after this change: http://twistedmatrix.com/trac/changeset/45725
>> 
>> Unfortunately the buildbot was in a kind of unrelated bad state when it landed, and the configuration is a bit different now, so I'm not sure if this is a regression or a configuration error.  But given that the change was about processes, and the failure is in the process test, I thought it might bear some investigation...
>> 
>> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From itamar at itamarst.org  Sat Oct 10 07:44:12 2015
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sat, 10 Oct 2015 09:44:12 -0400
Subject: [Twisted-Python] ANN: Eliot 0.9,
 the logging system with causality - now with journald support
In-Reply-To: <2A292169-E357-452D-AFD6-6715425414F8@twistedmatrix.com>
References: <438cc689e6888b889e14319ebb3a2f0d@itamarst.org>
 <2A292169-E357-452D-AFD6-6715425414F8@twistedmatrix.com>
Message-ID: <4887f7df73c1111a8cbb21a78cd30bd1@itamarst.org>

 

On 2015-10-08 19:38, Glyph Lefkowitz wrote: 

> Does Eliot make use of the new logging system at all?  If not, is there anything that might make Eliot's Twisted backend easier to maintain if we added it?  Just kind of curious about adoption of those new APIs in the world of logging...

For Flocker we have a Twisted->Eliot gateway based on the old logging
API. Eventually that'll get moved into Eliot and I guess at that point
it'd make sense to switch to new API but haven't really looked at it.
Might be able to get structured info at that point which'd be nice. 

I should steal some ideas from the new system, but at this point I
consider anything that doesn't log actions as legacy logging so I don't
personally write anything that *emits* logs with the new Twisted API. 
  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151010/7b840327/attachment.html>

From psi29a at gmail.com  Mon Oct 12 01:51:36 2015
From: psi29a at gmail.com (bret curtis)
Date: Mon, 12 Oct 2015 09:51:36 +0200
Subject: [Twisted-Python] txmongo vs. pymongo + callInThread
In-Reply-To: <4B4A9AB1-1C10-4585-A46B-3CA4853B5951@2xlp.com>
References: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>
 <99FF47AC-3082-4270-A3F0-4910AD0A348E@2xlp.com>
 <CA+LhZ9--xO9QowjWxxGEyhD2kNpoC4Hm=Ys5gtr7Qa-COS=-sA@mail.gmail.com>
 <0B8EB5B2-7C53-457B-8631-046F715452D0@2xlp.com>
 <CACKEAnWSxp6ScJqmVwnqd_cbfU7SZMG0AxAD0tCjPJiuOFfGRg@mail.gmail.com>
 <4B4A9AB1-1C10-4585-A46B-3CA4853B5951@2xlp.com>
Message-ID: <CA+LhZ9-k-PtusKhQJ40+pGDD7m-GUU6xOqsUzt-6otnO13rRzA@mail.gmail.com>

There is one thing that TxMongo does that PyMongo, Motor and the rest don't
do: handle deadlines and timeouts.

We're (HGST/WesternDigital) using MongoDB (with WiredTiger) in real-time
applications and one of our requirements was to honour application set
deadlines (or timeouts) on a per-call basis.

So if you are interested in that, we have it. :)

For those just tuning in...
Timeout: how many seconds the call is allowed run before raising an error.
Deadline: a time (unix timestamp) in the future that the call is allowed to
run before raising an error.

We take advantage of Twisted's native deferred cancellation mechanism in
addition to validation checks that no modifications happen to MongoDB when
a TimeExceeded is raised.

We've been very satisfied with how MongoDB has performed (post 3.0/WT)
along with TxMongo and Twisted.

Cheers,
Bret


On Fri, Oct 9, 2015 at 7:52 PM, Jonathan Vanasco <twisted-python at 2xlp.com>
wrote:

>
> On Oct 9, 2015, at 1:06 PM, Clayton Daley wrote:
>
> I (OP) was looking into these libraries/options as part of a side project
> that's been delayed by real work.  I'm also relegating Mongo to a caching
> layer after stumbling upon Sarah Mei's "Why You Should Never Use MongoDB"
> and realizing I was going to have the exact same problems
>
> Thanks for the update!
>
> FWIW, (sorry, non-twisted!)  if you want to avoid mongodb:
>
> 1. We use redis for KV caching, and its really, really, really fast.
> 2. Riak can use LevelDB as a backing store -- leveldb supports snappy
> compression on documents
> 3. If you need the document search, i really like Elastic
>
> I don't really like/trust mongodb from past experience myself.  I would
> normally not use it for anything other than a read-through cache... except
> for my current need.  We have a web spider and need to archive the
> snapshots.  WireTiger, which was bought by mongodb and integrated into the
> 3.x branch, is the only storage backend I've found that will do "bucket
> level compression".  I forget if it's applied on pages or blocks, but it
> will basically apply zlib or snappy compression onto sets of documents.  I
> looked for weeks on something that could do that, it was the only option.
> We did a lot of storage tests on our typical data, and bucketed compression
> saves way more space than document compression or document compression
> using a seed.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151012/3ca9db9e/attachment.html>

From dynamicgl at gmail.com  Mon Oct 12 02:23:02 2015
From: dynamicgl at gmail.com (Gelin Yan)
Date: Mon, 12 Oct 2015 16:23:02 +0800
Subject: [Twisted-Python] txmongo vs. pymongo + callInThread
In-Reply-To: <CA+LhZ9-k-PtusKhQJ40+pGDD7m-GUU6xOqsUzt-6otnO13rRzA@mail.gmail.com>
References: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>
 <99FF47AC-3082-4270-A3F0-4910AD0A348E@2xlp.com>
 <CA+LhZ9--xO9QowjWxxGEyhD2kNpoC4Hm=Ys5gtr7Qa-COS=-sA@mail.gmail.com>
 <0B8EB5B2-7C53-457B-8631-046F715452D0@2xlp.com>
 <CACKEAnWSxp6ScJqmVwnqd_cbfU7SZMG0AxAD0tCjPJiuOFfGRg@mail.gmail.com>
 <4B4A9AB1-1C10-4585-A46B-3CA4853B5951@2xlp.com>
 <CA+LhZ9-k-PtusKhQJ40+pGDD7m-GUU6xOqsUzt-6otnO13rRzA@mail.gmail.com>
Message-ID: <CABkOF6SumBNdm4A_5mrpt0NnE+zprZKF67ciRtjapze5ym9gtA@mail.gmail.com>

On Mon, Oct 12, 2015 at 3:51 PM, bret curtis <psi29a at gmail.com> wrote:

> There is one thing that TxMongo does that PyMongo, Motor and the rest
> don't do: handle deadlines and timeouts.
>
> We're (HGST/WesternDigital) using MongoDB (with WiredTiger) in real-time
> applications and one of our requirements was to honour application set
> deadlines (or timeouts) on a per-call basis.
>
> So if you are interested in that, we have it. :)
>
> For those just tuning in...
> Timeout: how many seconds the call is allowed run before raising an error.
> Deadline: a time (unix timestamp) in the future that the call is allowed
> to run before raising an error.
>
> We take advantage of Twisted's native deferred cancellation mechanism in
> addition to validation checks that no modifications happen to MongoDB when
> a TimeExceeded is raised.
>
> We've been very satisfied with how MongoDB has performed (post 3.0/WT)
> along with TxMongo and Twisted.
>
> Cheers,
> Bret
>
>
  I have switched from pymongo to txmongo for about two months. I got at
least 2x faster on query. Despite of some minor issues which have been
fixed recently, I am very happy with it.

Regards

gelin yan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151012/adaae06a/attachment.html>

From commercials24 at yahoo.de  Mon Oct 12 12:01:00 2015
From: commercials24 at yahoo.de (peter)
Date: Mon, 12 Oct 2015 20:01:00 +0200
Subject: [Twisted-Python] dcc, idea for file resume
Message-ID: <561BF55C.6060900@yahoo.de>

hi,


the way file resume is implemented in DccFileReceive requires to user to 
determine the file size manually and set _resumeOffset.
wouldnt it make sene to just kill the last few bytes of the file and 
resume it?

below is the current connectionMade method from:
http://twistedmatrix.com/trac/browser/tags/releases/twisted-15.4.0/twisted/words/protocols/irc.py#L3013


replace this line:
self.file.seek(self._resumeOffset)

with:
self.file.seek(-3,2)


which removes the last 3 bytes from the file end, 3 is just a guess.


def connectionMade(self):
         dst = path.abspath(path.join(self.destDir,self.filename))
         exists = path.exists(dst)
         if self.resume and exists:
             print "yes i want to resume and the file is there"
             # I have been told I want to resume, and a file already
             # exists - Here we go
             self.file = open(dst, 'rb+')
             self.file.seek(-3,2)
             self.file.truncate()
             log.msg("Attempting to resume %s - starting from %d bytes" %
                     (self.file, self.file.tell()))
         elif self.resume and not exists:
             raise OSError(errno.ENOENT,
                           "You cannot resume writing to a file "
                           "that does not exist!",
                           dst)
         elif self.overwrite or not exists:
             self.file = open(dst, 'wb')
         else:
             raise OSError(errno.EEXIST,
                           "There's a file in the way.  "
                           "Perhaps that's why you cannot open it.",
                           dst)



From glyph at twistedmatrix.com  Mon Oct 12 17:49:39 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 12 Oct 2015 16:49:39 -0700
Subject: [Twisted-Python] txmongo vs. pymongo + callInThread
In-Reply-To: <CABkOF6SumBNdm4A_5mrpt0NnE+zprZKF67ciRtjapze5ym9gtA@mail.gmail.com>
References: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>
 <99FF47AC-3082-4270-A3F0-4910AD0A348E@2xlp.com>
 <CA+LhZ9--xO9QowjWxxGEyhD2kNpoC4Hm=Ys5gtr7Qa-COS=-sA@mail.gmail.com>
 <0B8EB5B2-7C53-457B-8631-046F715452D0@2xlp.com>
 <CACKEAnWSxp6ScJqmVwnqd_cbfU7SZMG0AxAD0tCjPJiuOFfGRg@mail.gmail.com>
 <4B4A9AB1-1C10-4585-A46B-3CA4853B5951@2xlp.com>
 <CA+LhZ9-k-PtusKhQJ40+pGDD7m-GUU6xOqsUzt-6otnO13rRzA@mail.gmail.com>
 <CABkOF6SumBNdm4A_5mrpt0NnE+zprZKF67ciRtjapze5ym9gtA@mail.gmail.com>
Message-ID: <30A553DF-0F72-4BBB-B3C8-F0BD4A0B2F22@twistedmatrix.com>


> On Oct 12, 2015, at 1:23 AM, Gelin Yan <dynamicgl at gmail.com> wrote:
> 
>   I have switched from pymongo to txmongo for about two months. I got at least 2x faster on query. Despite of some minor issues which have been fixed recently, I am very happy with it. 

This is really cool to hear.  I try not to say "twisted will make everything faster" because speed is a complex question and a component like Twisted is rarely ever the one answer you need... but it's so nice when it just does :-D.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151012/c66b088b/attachment.html>

From glyph at twistedmatrix.com  Mon Oct 12 18:51:49 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 12 Oct 2015 17:51:49 -0700
Subject: [Twisted-Python] dcc, idea for file resume
In-Reply-To: <561BF55C.6060900@yahoo.de>
References: <561BF55C.6060900@yahoo.de>
Message-ID: <6EF32735-4EDC-4865-95BD-4635563BD05C@twistedmatrix.com>


> On Oct 12, 2015, at 11:01 AM, peter <commercials24 at yahoo.de> wrote:
> 
> hi,
> 
> 
> the way file resume is implemented in DccFileReceive requires to user to determine the file size manually and set _resumeOffset.
> wouldnt it make sene to just kill the last few bytes of the file and resume it?
> 
> below is the current connectionMade method from:
> http://twistedmatrix.com/trac/browser/tags/releases/twisted-15.4.0/twisted/words/protocols/irc.py#L3013 <http://twistedmatrix.com/trac/browser/tags/releases/twisted-15.4.0/twisted/words/protocols/irc.py#L3013>
> 
> 
> replace this line:
> self.file.seek(self._resumeOffset)
> 
> with:
> self.file.seek(-3,2)
> 
> 
> which removes the last 3 bytes from the file end, 3 is just a guess.

Why remove the last 3 bytes?  It seems like either the file's contents are valid or not; if they are, just trust everything that's there, if not, don't try to resume...

Generally though this does sound like a good change!  Don't make the user guess if we can just do the right thing for them.  Can you open a ticket?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151012/2eb29530/attachment.html>

From hawkowl at atleastfornow.net  Mon Oct 12 19:33:42 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Tue, 13 Oct 2015 09:33:42 +0800
Subject: [Twisted-Python] Changes to Twisted's binary distribution
Message-ID: <4DF8DEC8-6EA9-4EE6-9808-D98C11088DE2@atleastfornow.net>

Hi everyone,

Just letting everyone know, the next release (Twisted 15.5) will not include MSI or EXE installers for Windows, only binary wheels, and installation through pip or from source dist will be the only supported method of installation. The exe/msi installers didn't work well (or at all?) for virtualenvs, and when we (eventually) start shipping binary wheels for OS X, it'll make everything more consistent.

Regards,

Amber "Hawkie" Brown
Twisted Release manager
GPG: https://keybase.io/hawkowl
hawkowl at atleastfornow.net


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151013/7c54c937/attachment.pgp>

From rgacote at appropriatesolutions.com  Tue Oct 13 14:38:38 2015
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Tue, 13 Oct 2015 16:38:38 -0400
Subject: [Twisted-Python] [Twisted-web] Changes to Twisted's binary
	distribution
In-Reply-To: <4DF8DEC8-6EA9-4EE6-9808-D98C11088DE2@atleastfornow.net>
References: <4DF8DEC8-6EA9-4EE6-9808-D98C11088DE2@atleastfornow.net>
Message-ID: <CAG5tnzofDsbXEOAxmBd7-4iWK=N7emXYcha29PAUMOWSF4APhA@mail.gmail.com>

On Mon, Oct 12, 2015 at 9:33 PM, Amber "Hawkie" Brown <
hawkowl at atleastfornow.net> wrote:

> Just letting everyone know, the next release (Twisted 15.5) will not
> include MSI or EXE installers for Windows, only binary wheels, and
> installation through pip or from source dist will be the only supported
> method of installation. The exe/msi installers didn't work well (or at
> all?) for virtualenvs, and when we (eventually) start shipping binary
> wheels for OS X, it'll make everything more consistent.
>

This is tremendously welcome news. Congrats!


-- 
Raymond Cote, President
voice: +1.603.924.6079 email: rgacote at AppropriateSolutions.com skype:
ray.cote
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151013/1c41a690/attachment.html>

From adi at roiban.ro  Fri Oct 16 05:07:58 2015
From: adi at roiban.ro (Adi Roiban)
Date: Fri, 16 Oct 2015 14:07:58 +0300
Subject: [Twisted-Python] Handling upstream patches
Message-ID: <CAFycZ9ckHHUnn+Rxd610+L-+qnvgekRgOgBsFjJWM=gSZ2oZSg@mail.gmail.com>

Hi,

I have received notification for the following LP/Ubuntu issues

https://bugs.launchpad.net/ubuntu/+source/twisted/+bug/1505748

https://bugs.launchpad.net/maas/+bug/1504971

------

I think that they are related to http://twistedmatrix.com/trac/ticket/7650

-------

As a Twisted committer do I need to care about LP / Ubuntu upstream patches?

Does Twisted has a follow-up process so that upstream patches are
applied in trunk?

Thanks!

-- 
Adi Roiban


From gavin at gromper.net  Fri Oct 16 07:23:01 2015
From: gavin at gromper.net (Gavin Panella)
Date: Fri, 16 Oct 2015 14:23:01 +0100
Subject: [Twisted-Python] Handling upstream patches
In-Reply-To: <CAFycZ9ckHHUnn+Rxd610+L-+qnvgekRgOgBsFjJWM=gSZ2oZSg@mail.gmail.com>
References: <CAFycZ9ckHHUnn+Rxd610+L-+qnvgekRgOgBsFjJWM=gSZ2oZSg@mail.gmail.com>
Message-ID: <CALL7chnumFgVRk00qKO7EAPv5jBmLLwXgqpqqhxtD4T5Y2gXww@mail.gmail.com>

On 16 October 2015 at 12:07, Adi Roiban <adi at roiban.ro> wrote:
> As a Twisted committer do I need to care about LP / Ubuntu upstream patches?
>
> Does Twisted has a follow-up process so that upstream patches are
> applied in trunk?

I think we (the MAAS team) should propose our patch for inclusion into Twisted.

https://code.launchpad.net/~jtv/maas/bug-1372767/+merge/235616 is the
original fix within MAAS, which monkey-patches
twisted.web.client.URI/_URI. This has the benefit of having tests
which the patch that made it into Ubuntu lacks.

I'll put together a patch that can be applied to Twisted proper (i.e.
the patch that has gone into Ubuntu, plus tests) and propose it.

Gavin.


From glyph at twistedmatrix.com  Fri Oct 16 10:50:37 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 16 Oct 2015 09:50:37 -0700
Subject: [Twisted-Python] Handling upstream patches
In-Reply-To: <CALL7chnumFgVRk00qKO7EAPv5jBmLLwXgqpqqhxtD4T5Y2gXww@mail.gmail.com>
References: <CAFycZ9ckHHUnn+Rxd610+L-+qnvgekRgOgBsFjJWM=gSZ2oZSg@mail.gmail.com>
 <CALL7chnumFgVRk00qKO7EAPv5jBmLLwXgqpqqhxtD4T5Y2gXww@mail.gmail.com>
Message-ID: <7F37A173-831E-4830-A044-BEAEC6BD0405@twistedmatrix.com>


> On Oct 16, 2015, at 6:23 AM, Gavin Panella <gavin at gromper.net> wrote:
> 
> On 16 October 2015 at 12:07, Adi Roiban <adi at roiban.ro> wrote:
>> As a Twisted committer do I need to care about LP / Ubuntu upstream patches?
>> 
>> Does Twisted has a follow-up process so that upstream patches are
>> applied in trunk?
> 
> I think we (the MAAS team) should propose our patch for inclusion into Twisted.
> 
> https://code.launchpad.net/~jtv/maas/bug-1372767/+merge/235616 is the
> original fix within MAAS, which monkey-patches
> twisted.web.client.URI/_URI. This has the benefit of having tests
> which the patch that made it into Ubuntu lacks.
> 
> I'll put together a patch that can be applied to Twisted proper (i.e.
> the patch that has gone into Ubuntu, plus tests) and propose it.

Generally speaking, we should wait for contributors to submit their patches to Twisted through the normal process and not go grabbing stuff from downstream.  Canonical's IP policy is weird, and it is not clear to me that a patch necessarily has to be MIT licensed to be accepted into Ubuntu's Twisted, since Ubuntu itself is a commercial work.

-glyph

From glyph at twistedmatrix.com  Sat Oct 17 14:52:11 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 17 Oct 2015 13:52:11 -0700
Subject: [Twisted-Python] too many spams
Message-ID: <FAC12A64-7920-40DB-99B8-C46C9722FEDF@twistedmatrix.com>

It seems like a lot of people have recently been having trouble with getting their comments rejected as spam.  Going through trac, I selected some random tickets and tried to re-train our bayesian filter.  In the course of doing so, I noticed that every single Conch-related ticket had a starting score of nearly 100% spam.  After repeatedly training 30 or 40 messages, it became clear that the training database was insistent upon Conch-related tokens being extremely spammy.  As a result, I've re-set the training database, which means we're starting from scratch.

Trac admins: when doing spam monitoring, remember that "delete as spam" means "selected messages are spam" and "delete as ham" means "selected messages are NOT spam".  It seems like someone (possibly me!) accidentally flagged a whole bunch of Conch-related messages as spam, and this was causing a lot of problems.

Thanks,

-glyph

From gavin at gromper.net  Sun Oct 18 07:10:34 2015
From: gavin at gromper.net (Gavin Panella)
Date: Sun, 18 Oct 2015 14:10:34 +0100
Subject: [Twisted-Python] Handling upstream patches
In-Reply-To: <7F37A173-831E-4830-A044-BEAEC6BD0405@twistedmatrix.com>
References: <CAFycZ9ckHHUnn+Rxd610+L-+qnvgekRgOgBsFjJWM=gSZ2oZSg@mail.gmail.com>
 <CALL7chnumFgVRk00qKO7EAPv5jBmLLwXgqpqqhxtD4T5Y2gXww@mail.gmail.com>
 <7F37A173-831E-4830-A044-BEAEC6BD0405@twistedmatrix.com>
Message-ID: <CALL7chmjS6GV+c0H=OcwZWKfnB8jdYOL1oNzscH-jNC3Rx1Sxw@mail.gmail.com>

On 16 October 2015 at 17:50, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
[...]
> Canonical's IP policy is weird, and it is not clear to me that a patch
> necessarily has to be MIT licensed to be accepted into Ubuntu's
> Twisted, since Ubuntu itself is a commercial work.

Instinctively I would assume that Ubuntu would reject patches that would
also be rejected by upstream on licensing grounds. It's in Ubuntu's and
Canonical's interest to contribute upstream, and meddling with licenses
would hamper that. The "weird" IP policy thing might be about things for
which Canonical is the upstream, but I honestly don't know much about
that and definitely cannot speak authoritatively.

To confirm, LaMont -- who submitted the patch under question into Ubuntu
-- did ask our team's management, and the answer was that Canonical has
no interest in keeping that patch from going upstream, under whatever
license applies to Twisted.

Gavin.


From adi at roiban.ro  Sun Oct 18 15:38:25 2015
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 19 Oct 2015 00:38:25 +0300
Subject: [Twisted-Python] osuosl-osx10.6 slave
Message-ID: <CAFycZ9d=Ckma6CacL+pNhKZPHppFSqf13btFk3dkqaxvcws6MQ@mail.gmail.com>

Hi,

I saw that the osuosl-osx10.6 slave no longer has attached builders.

Is that OK?

If yes, then do we still need this slave?

If we no longer need it maybe we should announce the guy from OSUOSL
to free up this system and remove it from our buildmaster.

Cheers,
-- 
Adi Roiban


From glyph at twistedmatrix.com  Sun Oct 18 15:47:25 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 18 Oct 2015 14:47:25 -0700
Subject: [Twisted-Python] Handling upstream patches
In-Reply-To: <CALL7chmjS6GV+c0H=OcwZWKfnB8jdYOL1oNzscH-jNC3Rx1Sxw@mail.gmail.com>
References: <CAFycZ9ckHHUnn+Rxd610+L-+qnvgekRgOgBsFjJWM=gSZ2oZSg@mail.gmail.com>
 <CALL7chnumFgVRk00qKO7EAPv5jBmLLwXgqpqqhxtD4T5Y2gXww@mail.gmail.com>
 <7F37A173-831E-4830-A044-BEAEC6BD0405@twistedmatrix.com>
 <CALL7chmjS6GV+c0H=OcwZWKfnB8jdYOL1oNzscH-jNC3Rx1Sxw@mail.gmail.com>
Message-ID: <92158287-D2DE-42AE-8D52-6D24FF0CB6EB@twistedmatrix.com>


> On Oct 18, 2015, at 6:10 AM, Gavin Panella <gavin at gromper.net> wrote:
> 
> On 16 October 2015 at 17:50, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> [...]
>> Canonical's IP policy is weird, and it is not clear to me that a patch
>> necessarily has to be MIT licensed to be accepted into Ubuntu's
>> Twisted, since Ubuntu itself is a commercial work.
> 
> Instinctively I would assume that Ubuntu would reject patches that would
> also be rejected by upstream on licensing grounds. It's in Ubuntu's and
> Canonical's interest to contribute upstream, and meddling with licenses
> would hamper that. The "weird" IP policy thing might be about things for
> which Canonical is the upstream, but I honestly don't know much about
> that and definitely cannot speak authoritatively.

It is not because I believe that Canonical would deliberately do something bizarre like making their version of Twisted actually be GPL3, but rather, that they make no guarantees to this effect (nor should they have to, the patches are in their system, not ours!).

> To confirm, LaMont -- who submitted the patch under question into Ubuntu
> -- did ask our team's management, and the answer was that Canonical has
> no interest in keeping that patch from going upstream, under whatever
> license applies to Twisted.


I'd still prefer that we just accept patches consistently through one mechanism.  Forgetting about the license question for a second, although today the review queue happens to be empty (!!!), a patch needs a champion willing to respond to review feedback almost as much as it needs to be written in the first place.  If the author doesn't have time to submit it, then it's unlikely they'll have time to respond to feedback and complete the process, which just makes more detritus in our issue tracker.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151018/2c22c983/attachment.html>

From gavin at gromper.net  Mon Oct 19 04:22:31 2015
From: gavin at gromper.net (Gavin Panella)
Date: Mon, 19 Oct 2015 11:22:31 +0100
Subject: [Twisted-Python] Handling upstream patches
In-Reply-To: <92158287-D2DE-42AE-8D52-6D24FF0CB6EB@twistedmatrix.com>
References: <CAFycZ9ckHHUnn+Rxd610+L-+qnvgekRgOgBsFjJWM=gSZ2oZSg@mail.gmail.com>
 <CALL7chnumFgVRk00qKO7EAPv5jBmLLwXgqpqqhxtD4T5Y2gXww@mail.gmail.com>
 <7F37A173-831E-4830-A044-BEAEC6BD0405@twistedmatrix.com>
 <CALL7chmjS6GV+c0H=OcwZWKfnB8jdYOL1oNzscH-jNC3Rx1Sxw@mail.gmail.com>
 <92158287-D2DE-42AE-8D52-6D24FF0CB6EB@twistedmatrix.com>
Message-ID: <CALL7ch=BJBQGn-kP+pxqyuaE7ViT=hhvM6Emk9Jy_rZ0vXoVZA@mail.gmail.com>

On 18 October 2015 at 22:47, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
[...]
> I'd still prefer that we just accept patches consistently through one
> mechanism. Forgetting about the license question for a second,
> although today the review queue happens to be empty (!!!), a patch
> needs a champion willing to respond to review feedback almost as much
> as it needs to be written in the first place. If the author doesn't
> have time to submit it, then it's unlikely they'll have time to
> respond to feedback and complete the process, which just makes more
> detritus in our issue tracker.

I fully agree. We should have pushed this fix into Twisted a long time
ago. In the release-date-imminent maelstrom we unfortunately forgot
about it at the time, and only noticed it again while porting MAAS to
Python 3.

I have a patch for ticket #7650 ready which I'll put up for review when
Trac decides that it's not full of spam.

Gavin.


From glyph at twistedmatrix.com  Mon Oct 19 17:20:17 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 19 Oct 2015 16:20:17 -0700
Subject: [Twisted-Python] Handling upstream patches
In-Reply-To: <CALL7ch=BJBQGn-kP+pxqyuaE7ViT=hhvM6Emk9Jy_rZ0vXoVZA@mail.gmail.com>
References: <CAFycZ9ckHHUnn+Rxd610+L-+qnvgekRgOgBsFjJWM=gSZ2oZSg@mail.gmail.com>
 <CALL7chnumFgVRk00qKO7EAPv5jBmLLwXgqpqqhxtD4T5Y2gXww@mail.gmail.com>
 <7F37A173-831E-4830-A044-BEAEC6BD0405@twistedmatrix.com>
 <CALL7chmjS6GV+c0H=OcwZWKfnB8jdYOL1oNzscH-jNC3Rx1Sxw@mail.gmail.com>
 <92158287-D2DE-42AE-8D52-6D24FF0CB6EB@twistedmatrix.com>
 <CALL7ch=BJBQGn-kP+pxqyuaE7ViT=hhvM6Emk9Jy_rZ0vXoVZA@mail.gmail.com>
Message-ID: <FF0326FA-5E08-47C3-B355-A13652B6DFF1@twistedmatrix.com>


> On Oct 19, 2015, at 3:22 AM, Gavin Panella <gavin at gromper.net> wrote:
> 
> On 18 October 2015 at 22:47, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> [...]
>> I'd still prefer that we just accept patches consistently through one
>> mechanism. Forgetting about the license question for a second,
>> although today the review queue happens to be empty (!!!), a patch
>> needs a champion willing to respond to review feedback almost as much
>> as it needs to be written in the first place. If the author doesn't
>> have time to submit it, then it's unlikely they'll have time to
>> respond to feedback and complete the process, which just makes more
>> detritus in our issue tracker.
> 
> I fully agree. We should have pushed this fix into Twisted a long time
> ago. In the release-date-imminent maelstrom we unfortunately forgot
> about it at the time, and only noticed it again while porting MAAS to
> Python 3.
> 
> I have a patch for ticket #7650 ready which I'll put up for review when
> Trac decides that it's not full of spam.

The spam filter has been re-set, and I don't see any items in the monitoring queue.  Did you try to re-submit it recently and get denied?

-glyph




From gavin at gromper.net  Tue Oct 20 02:47:29 2015
From: gavin at gromper.net (Gavin Panella)
Date: Tue, 20 Oct 2015 09:47:29 +0100
Subject: [Twisted-Python] Handling upstream patches
In-Reply-To: <FF0326FA-5E08-47C3-B355-A13652B6DFF1@twistedmatrix.com>
References: <CAFycZ9ckHHUnn+Rxd610+L-+qnvgekRgOgBsFjJWM=gSZ2oZSg@mail.gmail.com>
 <CALL7chnumFgVRk00qKO7EAPv5jBmLLwXgqpqqhxtD4T5Y2gXww@mail.gmail.com>
 <7F37A173-831E-4830-A044-BEAEC6BD0405@twistedmatrix.com>
 <CALL7chmjS6GV+c0H=OcwZWKfnB8jdYOL1oNzscH-jNC3Rx1Sxw@mail.gmail.com>
 <92158287-D2DE-42AE-8D52-6D24FF0CB6EB@twistedmatrix.com>
 <CALL7ch=BJBQGn-kP+pxqyuaE7ViT=hhvM6Emk9Jy_rZ0vXoVZA@mail.gmail.com>
 <FF0326FA-5E08-47C3-B355-A13652B6DFF1@twistedmatrix.com>
Message-ID: <CALL7chkgOad=XfygYgHMWYKbK3tDW0Cef+K5XfjjEvz0SY2bgQ@mail.gmail.com>

On 20 October 2015 at 00:20, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> The spam filter has been re-set, and I don't see any items in the
> monitoring queue. Did you try to re-submit it recently and get denied?

I was denied the once and I didn't immediately retry. I resubmitted the
patch later in the day and it was accepted. I assumed that a kind person
had trained the filter in the meantime.

Gavin.


From vikas.c.kumar at oracle.com  Wed Oct 21 07:37:39 2015
From: vikas.c.kumar at oracle.com (Vikas)
Date: Wed, 21 Oct 2015 19:07:39 +0530
Subject: [Twisted-Python] Decorator @inlinecallbacks prohibiting memory
	profiling
Message-ID: <56279523.4080706@oracle.com>

Hi,

I am trying to instrument method: run() for memory profiling(I am using 
memory_profiler & guppy tools for this). All I need to do is decorate 
the run() with "profile" decorator and mention *start* and *end* of 
memory profiling.

@profile
def run():
     d = {}
     l = []
     hp = hpy()
     before = hp.heap()            => *start* memory profiling from here

     d["k1"] = 'val1'
     d["k2"] = 10
     count = 0
     while (count < 9):
         l.append(count)
         print 'The count is:', count
         count = count + 1
     print "Good bye!"
     after = hp.heap()         => *end* memory profiling here
     leftover = after - before

     print leftover
     del hp


So far works fine. But moment I introduce @inlineCallbacks before 
@profile(see below), I don't see memory getting profiled. Am I doing 
something wrong here?
@inlinecallbacks
@profile
def run():
     ....

Regards
Vikas


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151021/51d75f05/attachment.html>

From commercials24 at yahoo.de  Wed Oct 21 10:31:08 2015
From: commercials24 at yahoo.de (peter)
Date: Wed, 21 Oct 2015 18:31:08 +0200
Subject: [Twisted-Python] dcc, idea for file resume
In-Reply-To: <6EF32735-4EDC-4865-95BD-4635563BD05C@twistedmatrix.com>
References: <561BF55C.6060900@yahoo.de>
 <6EF32735-4EDC-4865-95BD-4635563BD05C@twistedmatrix.com>
Message-ID: <5627BDCC.5070905@yahoo.de>

On 10/13/2015 02:51 AM, Glyph Lefkowitz wrote:
>
>> On Oct 12, 2015, at 11:01 AM, peter <commercials24 at yahoo.de 
>> <mailto:commercials24 at yahoo.de>> wrote:
>>
>> hi,
>>
>>
>> the way file resume is implemented in DccFileReceive requires to user 
>> to determine the file size manually and set _resumeOffset.
>> wouldnt it make sene to just kill the last few bytes of the file and 
>> resume it?
>>
>> below is the current connectionMade method from:
>> http://twistedmatrix.com/trac/browser/tags/releases/twisted-15.4.0/twisted/words/protocols/irc.py#L3013
>>
>>
>> replace this line:
>> self.file.seek(self._resumeOffset)
>>
>> with:
>> self.file.seek(-3,2)
>>
>>
>> which removes the last 3 bytes from the file end, 3 is just a guess.
>
> Why remove the last 3 bytes?  It seems like either the file's contents 
> are valid or not; if they are, just trust everything that's there, if 
> not, don't try to resume...
>
> Generally though this does sound like a good change!  Don't make the 
> user guess if we can just do the right thing for them.  Can you open a 
> ticket?
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



sorry for the late reply, missed the message.
sure i will.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151021/dcc447c0/attachment.html>

From vikas.c.kumar at oracle.com  Wed Oct 21 23:34:59 2015
From: vikas.c.kumar at oracle.com (Vikas)
Date: Thu, 22 Oct 2015 11:04:59 +0530
Subject: [Twisted-Python] Decorator @inlinecallbacks prohibiting memory
 profiling
In-Reply-To: <56279523.4080706@oracle.com>
References: <56279523.4080706@oracle.com>
Message-ID: <56287583.5040204@oracle.com>

Ok this experiment works fine because it doesn't have any decorator & 
generator.
Here is the actual method (with @inlineCallback and generator) where I 
see method(my_daemon_fun) being profiled with @profile decorator is not 
being profiled.
I am doubting that *generator* or *inlineCallback* decorator is 
prohibiting the correct code from getting profiled.

To profile the code all I need to do is:
  STEP#1 ->  decorate the _monitor_daemons() with "profile" decorator #1
  STEP#2 ->  start memory profiling  
  STEP#3 ->*  *end  memory profiling

Something like this:

@profile                                               => STEP#1
@inlineCallbacks
def my_daemon_fun(self):
     """
     Monitor my daemons
     """
     if self.running == True:
         try:
hp = hpy() => STEP#2
before = hp.heap()
             yield self._lock.acquire()
             .....
             if ((x_running == False) or (b_running == False)):
                 log.error('Daemons are not running, restarting...')
                 yield self._restart_daemons()
         except:
             log.exception('Exception restarting daemons')
         finally:
             yield self._lock.release()
             reactor.callLater(MY_DAEMON_MONITOR_INTERVAL, 
self.my_daemon_fun)
after = hp.heap() => STEP#3
leftover = after - before


Now we run the script to call method: my_daemon_fun(). After running the 
script though we see memory profiling happening but the function being 
profiled is *not* the one we decorated with @profile:

Line #    Mem usage    Increment      Line Contents
1176     42.3 MiB      0.0 MiB       def unwindGenerator(*args, **kwargs):
1177     42.3 MiB      0.0 MiB           try:
1178     42.3 MiB      0.0 MiB               gen = f(*args, **kwargs)
1183     42.3 MiB      0.0 MiB           if not isinstance(gen, 
types.GeneratorType):
1187     42.3 MiB      0.0 MiB           return _inlineCallbacks(None, 
gen, Deferred())


I am investigating why the actual function(i.e. my_daemon_fun()) was not 
profiled? Meanwhile if you can help us here that would be great.

Regards
Vikas

On 21/10/15 7:07 pm, Vikas wrote:
> Hi,
>
> I am trying to instrument method: run() for memory profiling(I am 
> using memory_profiler & guppy tools for this). All I need to do is 
> decorate the run() with "profile" decorator and mention *start* and 
> *end* of memory profiling.
>
> @profile
> def run():
>     d = {}
>     l = []
>     hp = hpy()
>     before = hp.heap()            => *start* memory profiling from here
>
>     d["k1"] = 'val1'
>     d["k2"] = 10
>     count = 0
>     while (count < 9):
>         l.append(count)
>         print 'The count is:', count
>         count = count + 1
>     print "Good bye!"
>     after = hp.heap()         => *end* memory profiling here
>     leftover = after - before
>
>     print leftover
>     del hp
>
>
> So far works fine. But moment I introduce @inlineCallbacks before 
> @profile(see below), I don't see memory getting profiled. Am I doing 
> something wrong here?
> @inlinecallbacks
> @profile
> def run():
>     ....
>
> Regards
> Vikas
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151022/e9dbbcf6/attachment.html>

From commercials24 at yahoo.de  Thu Oct 22 02:38:58 2015
From: commercials24 at yahoo.de (peter)
Date: Thu, 22 Oct 2015 10:38:58 +0200
Subject: [Twisted-Python] questions about deferreds and code structure
Message-ID: <5628A0A2.9070109@yahoo.de>

hi,


i would like todo a few operations for a bunch of irc servers, basically 
all thats done in main for a list of ips.
heres what i came up with (this does not contain the actual class that 
inherits from  irc.IRCClient code)


questions (i will refer to the pb.codehash.net for line numbers)
1) when not adding printError at the end of the code (line 101) i dont 
see error messages for operations in main.
why is that?

printError is also added on line 33 and 36. why wont they produce errors 
from main?



2) does this overall structure look like a good idea?
intention: connect to a bunch of servers and do stuff. but not in parrallel.


heres the code nicely formatted
https://pb.codehash.net/760c30b217964139be82930899ba4b49



def printResult(result):
     print result


def printError(failure):
     print "\tprintError()"
     print str(failure)



downloadFinished = False

def startNewDownload(unused):

     global downloadFinished

     new_data = get_some_bot()

     server = new_data["server"]
     xdccbot = new_data["xdccbot"]
     pack = new_data["pack"]
     channel = new_data["channel"]


     if not downloadFinished:
         point = TCP4ClientEndpoint(reactor, server, 6667)
         d = connectProtocol(point, XdccBot())
         d.addCallback(main, server, xdccbot, pack, channel)
         d.addErrback(printError)

         #if this succeeds, or if it fails. do the same: remove old bot 
from data and start with the next one
         d.addCallback(lambda r: maybeDeferred(remove_bot_from_data, 
xdccbot, server, new_data["filename"]))
         d.addErrback(printError, "inside main")

         d.addCallback(startNewDownload)
         d.addErrback(printError)


     else:

         print "we are done!"
     return d






@inlineCallbacks
def main(proto, server, xdccbot, pack, channel):
     print "main()"
     print "server, bot, pack", server, xdccbot, pack


     #this can backfire:
     #irc_unknwon: prefix, command, params Helheim.SceneP2P.net 
ERR_NOMOTD ['lalala12324', 'MOTD File is missing']
     print("Waiting for MOTD...")
     yield proto.motdReceived

     print("Querying...")
     isOnline = yield proto.isOnline(xdccbot)
     if isOnline:
         print(xdccbot, "is online!")
     else:
         print(xdccbot, "is *NOT* online!")


     joinChannel = yield proto.join_channel(channel)
     if joinChannel:
         print "we joined some creepy channel"
     else:
         print "joining didnt work out"



     print "sending message"
     try:
         lala = yield proto.msg_CTCP(xdccbot, pack)
         print("lala:", lala)
     except lazyBotException as e:
         print(e)
         #reactor.stop()


     #wait for download finish
     try:
         result = yield proto.downloadFinished
         print("result:", result)
     except Exception as e:
         print("finish:", e)


     print("end of code")





d = startNewDownload("lalalal")
d.addCallback(printResult)
d.addErrback(printError)

reactor.run()








From adi at roiban.ro  Sun Oct 25 02:34:15 2015
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 25 Oct 2015 10:34:15 +0200
Subject: [Twisted-Python] How to handle arguments with undocumented types
	and argument deprecation
Message-ID: <CAFycZ9e9VP05JUN8o3F7032-W8of_e5-2eQ00UMM0JFpSJevRg@mail.gmail.com>

Hi,

This message is based on https://twistedmatrix.com/trac/ticket/5911#comment:14

In twisted/web/http.py we have the addCookie method which has the
'max_age' argument.

In the current code, the max_age is used as just anything which can be
converted into a text.

cookie = cookie +"; Max-Age=%s" % max_age

The latest patch documents max_age as requiring an int and adds tests
for the addCookie method... so to handly Py3 support the code looks
like this:

cookie = cookie + b"; Max-Age=" + intToBytes(max_age)

-----------

Should this code continue to handle str/int/long ?

---------

Is there a way to deprecate a single argument from a method/function?

Since max_age does not comply with the coding convention, can we
deprecated max_age with support for str/int/log and create a new
maxAge argument which only supports bytes.


Thanks!

-- 
Adi Roiban


From snailcoder at 163.com  Sun Oct 25 05:04:52 2015
From: snailcoder at 163.com (Wang Yan)
Date: Sun, 25 Oct 2015 19:04:52 +0800 (CST)
Subject: [Twisted-Python] How to design REST API with Twisted?
Message-ID: <675af318.a4b6.1509eac2325.Coremail.snailcoder@163.com>

Hi,


I'm confused about how to design REST APIs with Twisted, especially when my app have to interact with MySQL. 


Is there any basic design patterns for this kind of situation?


Thanks!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151025/8325da70/attachment.html>

From jonathan at stoppani.name  Sun Oct 25 05:54:14 2015
From: jonathan at stoppani.name (Jonathan Stoppani)
Date: Sun, 25 Oct 2015 12:54:14 +0100
Subject: [Twisted-Python] SNI callback with support for deferreds
Message-ID: <CAFzCN1sdwwLQ_yDsKTA+3ZPB_Cb0uMdTo-Za7Ot=qGcVg2ZZ2w@mail.gmail.com>

Hello,

A couple of days ago I asked on Stack Overflow about returning a deferred
from an SNI callback and have pyOpenSSL wait for it to fire before
continuing handling the request.

Thanks to some pointers by Gyph I've found a solution ("workaround") for my
problem, involving a fake TLSMemoryBIOProtocol to handle the client hello
until the SNI is received, firing the SNI callback, waiting for it to
callback and then re-feeding the resulting context to the real
TLSMemoryBIOProtocol.

The implementation of this solution is available at
https://gist.github.com/GaretJax/124c523a62ba48c9eec1, and I'd like to
contribute it back to Twisted, however, it has no unit tests and needs some
design decisions/validation.

I've opened a ticket to track it at
https://twistedmatrix.com/trac/ticket/8065. Real-life impediments
permitting, I'm willing to work on it and get the feature supported in
Twisted core.

Anyone willing to help me getting a proper patch?

Best,
Jonathan

P.S.: A big shout-out to Twisted for its excellent TLS support out of the
box. We got a straight A rating out of the box on ssl labs!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151025/335b7da7/attachment.html>

From burak.arslan at arskom.com.tr  Sun Oct 25 06:13:58 2015
From: burak.arslan at arskom.com.tr (Burak Arslan)
Date: Sun, 25 Oct 2015 14:13:58 +0200
Subject: [Twisted-Python] How to design REST API with Twisted?
In-Reply-To: <675af318.a4b6.1509eac2325.Coremail.snailcoder@163.com>
References: <675af318.a4b6.1509eac2325.Coremail.snailcoder@163.com>
Message-ID: <562CC786.9080004@arskom.com.tr>

Hey!

On 10/25/15 13:04, Wang Yan wrote:
> Hi,
>
> I'm confused about how to design REST APIs with Twisted, especially
> when my app have to interact with MySQL. 
>
> Is there any basic design patterns for this kind of situation?

I do Spyne, and I think it's _fa-bu-lous_ for building any web API on
top of twisted.

It's a bit different from what you to with stock Twisted though. More
specifically, there's no NOT_DONE_YET. The client hangs as long as you
keep returning `Deferred`s. Once you return a non-deferred (and
hopefully something that's compatible with your designated return type)
that object is serialized using the `out_protocol` you pass to your
`Application` and the resulting byte stream is written to the outgoing
stream of your transport of choice. In case of a HTTP-based api, it's
passed to the `transport.write()` function of a `twisted.web.Resource`
instance, along with the outgoing headers that you set.

As for the MySQL part, I use SQLAlchemy exclusively from inside a
function called by deferToThread. Spyne integrates with SQLAlchemy as
well, so you can return directly what SQLA returns, be it objects or rows.

Here's a simple example:
https://github.com/arskom/spyne/blob/master/examples/twisted/resource.py

There's a boilerplate generator here: http://spyne.io/

I hope you find it useful. Any questions, people at spyne.io is also at
your service.

Best,
Burak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151025/384ca18c/attachment.html>

From meejah at meejah.ca  Sun Oct 25 15:05:06 2015
From: meejah at meejah.ca (meejah)
Date: Mon, 26 Oct 2015 01:05:06 +0400
Subject: [Twisted-Python] txtorcon 0.14.0
In-Reply-To: <86wpvcbcon.fsf@atlantis.meejah.ca> (meejah@meejah.ca's message
 of "Sun, 27 Sep 2015 10:26:16 +0400")
References: <86wpvcbcon.fsf@atlantis.meejah.ca>
Message-ID: <86y4eq64n1.fsf@atlantis.meejah.ca>

meejah <meejah at meejah.ca> writes:

>  * add .is_built Deferred to txtorcon.Circuit that gets callback()'d
>  when the circuit becomes BUILT

This had a bug in it. I give you 0.14.1:

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

There was a subtle bug with the Circuit.is_built API introduced in
0.14.0, necessitating this release.

I've also changed the API (with backwards-compatibility for now) to a
method-call that returns a Deferred: Circuit.when_built()

You can download the release from PyPI or GitHub (or of course "pip
install txtorcon"):

   https://pypi.python.org/pypi/txtorcon/0.14.1
   https://github.com/meejah/txtorcon/releases/tag/v0.14.1

Releases are also available from the hidden service:

   http://timaq4ygg2iegci7.onion/txtorcon-0.14.1.tar.gz
   http://timaq4ygg2iegci7.onion/txtorcon-0.14.1.tar.gz.asc
   http://timaq4ygg2iegci7.onion/txtorcon-0.14.1-py2-none-any.whl
   http://timaq4ygg2iegci7.onion/txtorcon-0.14.1-py2-none-any.whl.asc

You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat <<EOF | sha256sum --check
073d303a2905b70a9434beb18a5d657ddcf9933422393f36e4b3a670d8d59619  txtorcon-0.14.1-py2-none-any.whl
446ceeb73ba775d990cafb9340b2f9475dc795914e515b574433f8e5b00b0e15  txtorcon-0.14.1.tar.gz
EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.12 (GNU/Linux)

iQEcBAEBAgAGBQJWLRH4AAoJEMJgKAMSgGmn4t0H/27gO87Hw7v+pgibgT78CjT4
5JSkVvcZzLRyKyarzKGrvtGHPvfrup76lJZG+f+jk9TDwcdhx4/r7LXQdRTPSNd4
q0+fLUE81skI9va8n7K1susRjwrIpoCVDElVY3C0t8D6ZoOTe3mMn1TcPxro3YO/
nl2H+jZojfSmDl75i1+Q3nTjCI8L0Rj/kGxLsu8e1z+tmXbxnh+/7N3K4BaDSWB5
9LsnjCSEhhsgR8hzcFrlbdEhZagBb4vXc9MarvKoC2dpmMO5hG/pCoWZWcby4sBB
z7OjNaCLOX6KhlqlHsABmK9UCyTpN2fnH29P1Klsyn7PmdSF09OagSaLNYnuLrA=
=Z8Jp
-----END PGP SIGNATURE-----



From hawkowl at atleastfornow.net  Sun Oct 25 18:48:07 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Mon, 26 Oct 2015 08:48:07 +0800
Subject: [Twisted-Python] Changing the Twisted Compatibility Policy
Message-ID: <F014B67C-1A19-445F-9723-6F862FF74849@atleastfornow.net>

Hi everyone,

As many know, one of the things that makes the Twisted project so unique is our conformance to our Compatibility Policy. This policy means that users of Twisted can freely upgrade between versions with all incompatibilities being warned about before causing code to break. However, for a while, one part of the compatibility policy has caused issues - what we do with code that has been deprecated for a long time, and at least the release +  2 & 1 year after.

The existing policy states:

"Removal should happen once the deprecated API becomes an additional maintenance burden. For example, if it makes implementation of a new feature more difficult, if it makes documentation of non-deprecated APIs more confusing, or if its unit tests become an undue burden on the continuous integration system. Removal should not be undertaken just to follow a timeline."

This makes the only reasonable cause for any code being removed from Twisted is if it is a maintenance burden, but does not take into account the effect that keeping large amounts of deprecated code has on new, existing, and future Twisted users. It does specify that it should be removed if it makes documentation of non-deprecated APIs confusing, but by its very existence, it makes what should be "best practice" more confusing -- especially if the deprecated API is "simpler" at first glance, but was deprecated because of vast underlying issues,

Discussions have come to the conclusion that the exact reverse of this policy should be instated:

"Removal of code should occur as soon as the deprecation grace period has ended."

The reason for this is that a leaner Twisted is a better Twisted -- we should strive to not break existing applications, but we have the deprecation policy in place to ensure that breakage is, if all goes to plan, never out of the blue. Less code surface means that Twisted is easier to learn for new users and Twisted-using projects onboarding new people, easier to use for established users with a clear best practice, and easier to maintain because the codebase is not a web of things we deprecated and then never removed. We believe this change benefits everyone.

This is also similar to the deprecation policy of another time-based releasing project, Django (https://docs.djangoproject.com/en/1.8/internals/release-process/#internal-release-deprecation-policy), where releases are every 9 months and code is *always* removed in Release where deprecated + 2, giving them a deprecation grace period of up to 1 and a half years.

If you have any opinions on this change, please let me know, and we'll take it all into account before changing the policy.

Twisted Regards,
Amber "Hawkie" Brown
Twisted Release Manager
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151026/1d106076/attachment.pgp>

From rgacote at appropriatesolutions.com  Sun Oct 25 19:23:53 2015
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Sun, 25 Oct 2015 21:23:53 -0400
Subject: [Twisted-Python] [Twisted-web] Changing the Twisted
	Compatibility Policy
In-Reply-To: <F014B67C-1A19-445F-9723-6F862FF74849@atleastfornow.net>
References: <F014B67C-1A19-445F-9723-6F862FF74849@atleastfornow.net>
Message-ID: <CAG5tnzqAw98xQwCJ_rHJZA3Mzgo_9rE=cfgYWS398TukLWZWtw@mail.gmail.com>

This is a reasonable change.

I say that as someone who rarely tracks individual Twisted releases. We
typically upgrade client-deployed applications every three to five years
(at the moment, I?m working on upgrading several projects from 12.1 to
15.4).

For us, being able to easily track back through release notes to understand
why specific methods are no longer available is extremely important as our
upgrade cycle frequently exceeds the deprecation/removal timeframe. These
long update times work for us because our typical Twisted deploy is
embedded deep inside an environment and not exposed directly to public
hazards. As such, we?re not quite as sensitive to public attack vectors ?
and our clients typically prefer long-term stable environments.
?Ray

On Sun, Oct 25, 2015 at 8:48 PM, Amber "Hawkie" Brown <
hawkowl at atleastfornow.net> wrote:

> Hi everyone,
>
> As many know, one of the things that makes the Twisted project so unique
> is our conformance to our Compatibility Policy. This policy means that
> users of Twisted can freely upgrade between versions with all
> incompatibilities being warned about before causing code to break. However,
> for a while, one part of the compatibility policy has caused issues - what
> we do with code that has been deprecated for a long time, and at least the
> release +  2 & 1 year after.
>
> The existing policy states:
>
> "Removal should happen once the deprecated API becomes an additional
> maintenance burden. For example, if it makes implementation of a new
> feature more difficult, if it makes documentation of non-deprecated APIs
> more confusing, or if its unit tests become an undue burden on the
> continuous integration system. Removal should not be undertaken just to
> follow a timeline."
>
> This makes the only reasonable cause for any code being removed from
> Twisted is if it is a maintenance burden, but does not take into account
> the effect that keeping large amounts of deprecated code has on new,
> existing, and future Twisted users. It does specify that it should be
> removed if it makes documentation of non-deprecated APIs confusing, but by
> its very existence, it makes what should be "best practice" more confusing
> -- especially if the deprecated API is "simpler" at first glance, but was
> deprecated because of vast underlying issues,
>
> Discussions have come to the conclusion that the exact reverse of this
> policy should be instated:
>
> "Removal of code should occur as soon as the deprecation grace period has
> ended."
>
> The reason for this is that a leaner Twisted is a better Twisted -- we
> should strive to not break existing applications, but we have the
> deprecation policy in place to ensure that breakage is, if all goes to
> plan, never out of the blue. Less code surface means that Twisted is easier
> to learn for new users and Twisted-using projects onboarding new people,
> easier to use for established users with a clear best practice, and easier
> to maintain because the codebase is not a web of things we deprecated and
> then never removed. We believe this change benefits everyone.
>
> This is also similar to the deprecation policy of another time-based
> releasing project, Django (
> https://docs.djangoproject.com/en/1.8/internals/release-process/#internal-release-deprecation-policy),
> where releases are every 9 months and code is *always* removed in Release
> where deprecated + 2, giving them a deprecation grace period of up to 1 and
> a half years.
>
> If you have any opinions on this change, please let me know, and we'll
> take it all into account before changing the policy.
>
> Twisted Regards,
> Amber "Hawkie" Brown
> Twisted Release Manager
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
>


-- 
Raymond Cote, President
voice: +1.603.924.6079 email: rgacote at AppropriateSolutions.com skype:
ray.cote
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151025/09c559b9/attachment.html>

From glyph at twistedmatrix.com  Sun Oct 25 19:55:06 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 25 Oct 2015 18:55:06 -0700
Subject: [Twisted-Python] How to design REST API with Twisted?
In-Reply-To: <562CC786.9080004@arskom.com.tr>
References: <675af318.a4b6.1509eac2325.Coremail.snailcoder@163.com>
 <562CC786.9080004@arskom.com.tr>
Message-ID: <E91A3B87-2AB9-4DCB-B0AA-51152DABA22F@twistedmatrix.com>


> On Oct 25, 2015, at 5:13 AM, Burak Arslan <burak.arslan at arskom.com.tr> wrote:
> 
> It's a bit different from what you to with stock Twisted though. More specifically, there's no NOT_DONE_YET.

I should just mention that NOT_DONE_YET actually _predates_ Deferreds, and one glorious day, we will get rid of it :).  See for example https://tm.tl/288 <https://tm.tl/288>.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151025/7c04999b/attachment.html>

From glyph at twistedmatrix.com  Sun Oct 25 20:30:57 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 25 Oct 2015 19:30:57 -0700
Subject: [Twisted-Python] How to handle arguments with undocumented
	types and argument deprecation
In-Reply-To: <CAFycZ9e9VP05JUN8o3F7032-W8of_e5-2eQ00UMM0JFpSJevRg@mail.gmail.com>
References: <CAFycZ9e9VP05JUN8o3F7032-W8of_e5-2eQ00UMM0JFpSJevRg@mail.gmail.com>
Message-ID: <4A1135ED-F4B1-458A-98A6-E908BE95EC4C@twistedmatrix.com>


> On Oct 25, 2015, at 1:34 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> Is there a way to deprecate a single argument from a method/function?


Sometimes.

The idea with a deprecation is that you can remove something, emit a warning if it's used, then eventually remove it entirely, and get an error if it's used.  The trick with deprecating parameters is what happens when you get to "remove it entirely".

One of the features I'm looking forward to in Py3 is "keyword-only parameters".  If we had those then deprecating a parameter (as long as it's not part of a formal interface) would be easier.  As it is, there's a problem where you can have a function like this:

def foo(a, broken=None, c=None):
    ...

If you want to deprecate "broken", you have to ensure that callers who call 'foo' will get a deprecation warning if they pass 'broken' at all, to ensure that callers who do, for example:

foo(a, None, "something valid")

get a deprecation warning during the deprecation period.  Further, after the deprecation period, you need to get an error if you "pass broken", which doesn't exist any more.  Of course if you've removed it from the function signature, it will give you an error to pass it by keyword, but if you pass it positionally:

foo(a, "something valid for broken")

if you've skipped the deprecation period, the spirit of the policy is that you should get an exception here.  Normally this happens as a natural effect of the removal.  But in this case, if you've changed the signature of 'foo' to be

def foo(a, c=None):
    ...

then you have a problem where code that skips the deprecation period might appear to work and break in unpredictable ways later.  So when deprecating a parameter you have to be more careful than when deprecating a whole method or class.

Except, oops: addCookie() is part of a formal interface, IRequest.  Which means that if external users of Twisted are implementing IRequest, then they may keep accepting / requiring max_age in its old format.

So specifically in the case of max_age, I think we should just retrofit the code to handle str/int/long on py3, to reduce breakage.  At some point, we know we need a new, better IRequest, and we should ensure maxAge is better-specified on that interface.

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151025/b14c0ca8/attachment-0001.html>

From glyph at twistedmatrix.com  Sun Oct 25 20:37:12 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 25 Oct 2015 19:37:12 -0700
Subject: [Twisted-Python] SNI callback with support for deferreds
In-Reply-To: <CAFzCN1sdwwLQ_yDsKTA+3ZPB_Cb0uMdTo-Za7Ot=qGcVg2ZZ2w@mail.gmail.com>
References: <CAFzCN1sdwwLQ_yDsKTA+3ZPB_Cb0uMdTo-Za7Ot=qGcVg2ZZ2w@mail.gmail.com>
Message-ID: <77ABF1F6-3A6E-4518-BD57-0D2021828209@twistedmatrix.com>


> On Oct 25, 2015, at 4:54 AM, Jonathan Stoppani <jonathan at stoppani.name> wrote:
> 
> Hello,
> 
> A couple of days ago I asked on Stack Overflow about returning a deferred from an SNI callback and have pyOpenSSL wait for it to fire before continuing handling the request.
> 
> Thanks to some pointers by Gyph I've found a solution ("workaround") for my problem, involving a fake TLSMemoryBIOProtocol to handle the client hello until the SNI is received, firing the SNI callback, waiting for it to callback and then re-feeding the resulting context to the real TLSMemoryBIOProtocol.

Really glad to hear that this worked.

> The implementation of this solution is available at https://gist.github.com/GaretJax/124c523a62ba48c9eec1 <https://gist.github.com/GaretJax/124c523a62ba48c9eec1>, and I'd like to contribute it back to Twisted, however, it has no unit tests and needs some design decisions/validation.

It also needs a serious overhaul on its indentation - something messed up happened to that code :).

> I've opened a ticket to track it at https://twistedmatrix.com/trac/ticket/8065 <https://twistedmatrix.com/trac/ticket/8065>. Real-life impediments permitting, I'm willing to work on it and get the feature supported in Twisted core.

Thanks!  We don't really support an SNI callback at all (that's purely in the pyOpenSSL layer) so this will be very good to have.

> Anyone willing to help me getting a proper patch?

What help do you need?  I will be happy to do reviews when it's readye. :)

> P.S.: A big shout-out to Twisted for its excellent TLS support out of the box. We got a straight A rating out of the box on ssl labs!

really glad to hear this!  I do plan to quote you on that :)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151025/9c2fac05/attachment.html>

From glyph at twistedmatrix.com  Sun Oct 25 21:34:44 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 25 Oct 2015 20:34:44 -0700
Subject: [Twisted-Python] [Twisted-web] Changing the Twisted
	Compatibility Policy
In-Reply-To: <F014B67C-1A19-445F-9723-6F862FF74849@atleastfornow.net>
References: <F014B67C-1A19-445F-9723-6F862FF74849@atleastfornow.net>
Message-ID: <167E1C3A-BB30-41B3-A1F9-D5C316BD6290@twistedmatrix.com>


> On Oct 25, 2015, at 5:48 PM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> Hi everyone,
> 
> As many know, one of the things that makes the Twisted project so unique is our conformance to our Compatibility Policy. This policy means that users of Twisted can freely upgrade between versions with all incompatibilities being warned about before causing code to break. However, for a while, one part of the compatibility policy has caused issues - what we do with code that has been deprecated for a long time, and at least the release +  2 & 1 year after.
> 
> The existing policy states:
> 
> "Removal should happen once the deprecated API becomes an additional maintenance burden. For example, if it makes implementation of a new feature more difficult, if it makes documentation of non-deprecated APIs more confusing, or if its unit tests become an undue burden on the continuous integration system. Removal should not be undertaken just to follow a timeline."
> 
> This makes the only reasonable cause for any code being removed from Twisted is if it is a maintenance burden, but does not take into account the effect that keeping large amounts of deprecated code has on new, existing, and future Twisted users. It does specify that it should be removed if it makes documentation of non-deprecated APIs confusing, but by its very existence, it makes what should be "best practice" more confusing -- especially if the deprecated API is "simpler" at first glance, but was deprecated because of vast underlying issues,
> 
> Discussions have come to the conclusion that the exact reverse of this policy should be instated:
> 
> "Removal of code should occur as soon as the deprecation grace period has ended."
> 
> The reason for this is that a leaner Twisted is a better Twisted -- we should strive to not break existing applications, but we have the deprecation policy in place to ensure that breakage is, if all goes to plan, never out of the blue. Less code surface means that Twisted is easier to learn for new users and Twisted-using projects onboarding new people, easier to use for established users with a clear best practice, and easier to maintain because the codebase is not a web of things we deprecated and then never removed. We believe this change benefits everyone.
> 
> This is also similar to the deprecation policy of another time-based releasing project, Django (https://docs.djangoproject.com/en/1.8/internals/release-process/#internal-release-deprecation-policy), where releases are every 9 months and code is *always* removed in Release where deprecated + 2, giving them a deprecation grace period of up to 1 and a half years.
> 
> If you have any opinions on this change, please let me know, and we'll take it all into account before changing the policy.

I am generally in favor, for the reasons that the other participants already said: removing things faster results in a cleaner codebase that's easier to figure out.

However, I feel like making "get rid of deprecated code faster" be the first thing we do to mitigate these costs might be putting the cart before the horse.  The costs of maintaining large piles of legacy API surface are definitely not trivial.  A few are:

Maintainers have to read and understand more code when maintaining a feature, regardless of whether that code ultimately impacts the code being modified.
Testing more code means longer test runs for everyone.  Older, deprecated code is more likely to have test cases that require the reactor to run, so in many cases it can also mean less reliable test runs.
Example code, in Twisted, in Twisted's documentation, and on other sites, may continue to refer to deprecated APIs.  Given that this appears to work, the transition takes longer because new users start using old APIs.
Twisted's users, both new and old, have to refer to API documentation that describes numerous different ways to do something, and deprecations are not clear.

For problems 1 and 2, there's nothing much we can do but delete the code itself.  However, for problems 3 and 4, there are two other solutions which I think that we should explore as well, and we should possibly try to get in place before more aggressively deleting the actual code.

For one thing, we currently do not fail our tests on, or even ratchet on, warnings.  If I turn on warnings (meaning "export PYTHONWARNINGS='all::DeprecationWarning'"), purely at test _startup_ I see these:

/Users/glyph/Projects/Twisted/twisted/internet/endpoints.py:29: DeprecationWarning: twisted.internet.interfaces.IStreamClientEndpointStringParser was deprecated in Twisted 14.0.0: This interface has been superseded by IStreamClientEndpointStringParserWithReactor.
  from twisted.internet.interfaces import (
/Users/glyph/Projects/Twisted/twisted/spread/jelly.py:92: DeprecationWarning: the sets module is deprecated
  import sets as _sets
/Users/glyph/Projects/Twisted/twisted/scripts/test/test_tap2deb.py:8: DeprecationWarning: tap2deb is deprecated since Twisted 15.2.
  from twisted.scripts import tap2deb
/Users/glyph/Projects/Twisted/twisted/scripts/test/test_tap2rpm.py:15: DeprecationWarning: tap2rpm is deprecated since Twisted 15.2.
  from twisted.scripts import tap2rpm
/Users/glyph/Projects/Twisted/twisted/words/test/test_msn.py:28: DeprecationWarning: twisted.words.protocols.msn was deprecated in Twisted 15.1.0: MSN has shutdown.
  from twisted.words.protocols import msn

not to mention the scads of additional warnings that our test suite spits out over the course of its run.  We really need to get rid of these warnings to be sure that it's even possible to actually remove the deprecated APIs, and to ensure that there's not something internal that they're really necessary for.

For another, we have no way to hide deprecated APIs in the API documentation.  If a new user is trying to figure out how to do something, if they're doing it during the deprecation period, they should not start out by using a deprecated API; yet, sometimes, if you look at the docs, that's what you'll find first.

Also, we haven't done a serious overhaul of our documentation in far too long, and we have no automated tooling to tell us if it's producing warnings or even tracebacks.

So, while I think we should start removing more deprecated APIs, I think it's important to address these deficiencies first, so that when we perform those removals we have a higher degree of confidence that we're not breaking our own documentation and breaking programs that users wrote last week and thought were working fine because they didn't notice the fine-print "deprecated" at the end of a docstring.  If we can't figure out how to get our own house in order in terms of keeping up with deprecations, it seems like we are likely to create unforseen problems for our users.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151025/1888d8bf/attachment.html>

From jonathan at stoppani.name  Mon Oct 26 06:37:42 2015
From: jonathan at stoppani.name (Jonathan Stoppani)
Date: Mon, 26 Oct 2015 13:37:42 +0100
Subject: [Twisted-Python] SNI callback with support for deferreds
In-Reply-To: <77ABF1F6-3A6E-4518-BD57-0D2021828209@twistedmatrix.com>
References: <CAFzCN1sdwwLQ_yDsKTA+3ZPB_Cb0uMdTo-Za7Ot=qGcVg2ZZ2w@mail.gmail.com>
 <77ABF1F6-3A6E-4518-BD57-0D2021828209@twistedmatrix.com>
Message-ID: <CAFzCN1vkHRKM_JfKV5ivcr8E3BA8N-9CBiBVjgB0KdampaHihA@mail.gmail.com>

On Mon, Oct 26, 2015 at 3:37 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:
>
> The implementation of this solution is available at
> https://gist.github.com/GaretJax/124c523a62ba48c9eec1, and I'd like to
> contribute it back to Twisted, however, it has no unit tests and needs some
> design decisions/validation.
>
>
> It also needs a serious overhaul on its indentation - something messed up
> happened to that code :).
>

I don't get it, I see it all as PEP8 compliant (will need to adapt spacing
to Twisted's code standards, but that should be all).


> Anyone willing to help me getting a proper patch?
>
>
> What help do you need?  I will be happy to do reviews when it's readye. :)
>

Definitely a review. Even before that I would like to know if the approach
 as I implemented is ok design wise or if I it needs adaptations. Also, in
which module should the code live?
And then there is this:
https://gist.github.com/GaretJax/124c523a62ba48c9eec1#file-usage-py-L13-L19
(maybe testing will help finding out the exact cause of those symptoms).

P.S.: A big shout-out to Twisted for its excellent TLS support out of the
> box. We got a straight A rating out of the box on ssl labs!
>
>
> really glad to hear this!  I do plan to quote you on that :)
>

Feel free to! Maybe remove the "out of the box" repetition. :D
We will use it as edge load balancer and SSL terminator for
http://www.aldryn.com/. Currently we're using Hipache, but it does not
support SNI at all and is written in JS. :-(
We should deploy the new Twisted based implementation during the course of
this week.

Best,
Jonathan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151026/709da7a6/attachment-0001.html>

From twisted-python at 2xlp.com  Mon Oct 26 12:57:59 2015
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Mon, 26 Oct 2015 14:57:59 -0400
Subject: [Twisted-Python] [Twisted-web] Changing the Twisted
	Compatibility Policy
In-Reply-To: <167E1C3A-BB30-41B3-A1F9-D5C316BD6290@twistedmatrix.com>
References: <F014B67C-1A19-445F-9723-6F862FF74849@atleastfornow.net>
 <167E1C3A-BB30-41B3-A1F9-D5C316BD6290@twistedmatrix.com>
Message-ID: <3FE8FE6A-5DBA-4C0B-9BD4-47D03DF083B1@2xlp.com>


On Oct 25, 2015, at 11:34 PM, Glyph Lefkowitz wrote:

> For another, we have no way to hide deprecated APIs in the API documentation.  If a new user is trying to figure out how to do something, if they're doing it during the deprecation period, they should not start out by using a deprecated API; yet, sometimes, if you look at the docs, that's what you'll find first.

I've been bitten by this before.  I've also had issue with developers implementing a django-style upgrade/deprecation system **improperly** and creating a lot of nightmares for developers.   By "Improperly" I mean that some developers will arbitrarily pin dependencies to certain versions or narrow ranges, which ends up creating version conflicts or preventing installs.   

From a "non-core user" of twisted point of view, and someone likely to run into issues from this change... things that I have liked from other projects are:

1. Narrative & API docs that note when something is going to be deprecated **in the first line**.  

2. API docs that allow a reader to flip between versions.  (a la ReadTheDocs style)  If I end up on a link to /current docs and something is missing, I'd like to be able to flip back a few versions and read the deprecation info.  

3. Logged deprecation warnings.  IIRC, by default SqlAlchemy will log a deprecation warning the first 3 or 4x you call a function that is on it's way out.  Twisted can be very "fast" in logging, so these messages might be lost.  It might be nice to be able to pipe deprecation warnings into their own logger / output.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151026/fa5d5df9/attachment.html>

From chriswwolfe at gmail.com  Mon Oct 26 14:52:58 2015
From: chriswwolfe at gmail.com (Chris Wolfe)
Date: Mon, 26 Oct 2015 15:52:58 -0500
Subject: [Twisted-Python] revisiting onboarding
In-Reply-To: <D37E57F4-B14F-4E15-8B24-0B53CA4EF716@twistedmatrix.com>
References: <00A8D2CB-A1A3-496F-8670-E9888990F3E6@twistedmatrix.com>
 <8761bcxxak.fsf@hermes.hocat.ca>
 <CAEKSqkuP5xjOy5Vdo4Giuj1HG5Xo6hvEAvBE88ZFCzniXvp1Uw@mail.gmail.com>
 <9DC27720-4877-466C-8148-2D5E5E1EA532@twistedmatrix.com>
 <CAEKSqksRBDowvEjUYZ6C7Y4QZsrzs_AsAT7+DvKieYyQ5b3vaw@mail.gmail.com>
 <64374D0B-3396-4B61-8DEC-82C9EDFB3EA3@twistedmatrix.com>
 <CAEKSqkuBomAwHxKBZV9NH__tjnVP5fGssuUyovkq5gE5okMJBw@mail.gmail.com>
 <D37E57F4-B14F-4E15-8B24-0B53CA4EF716@twistedmatrix.com>
Message-ID: <CAEKSqkuM10=7fN0FGyx-jRtUA+pEg=-3dHUBbs50xaa60bKrmA@mail.gmail.com>

On 2 February 2015 at 19:18, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:
[snip]
> Not all committers are actively involved in the project at all times, so
we should form a "committer committee"
> of people who are interested in evaluating candidates.  If you would like
to do that and you're already a committer,
> please contact me and I'll add you to the list.

It looks like this new process has stalled on the formation of the
committee to review new contributor requests. As of right now, the
committee has no members. :-)

This email is a call for volunteers. If you would like to serve on the
committee, please reply to this thread and state that you are interested in
serving on the committee. Once enough volunteers have signed up, new
contributor requests will be sent to the committee's mailing list.

Thanks!
-- 
Chris Wolfe / herrwolfe
chriswwolfe at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151026/e9fa31e5/attachment.html>

From glyph at twistedmatrix.com  Mon Oct 26 15:43:09 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 26 Oct 2015 14:43:09 -0700
Subject: [Twisted-Python] revisiting onboarding
In-Reply-To: <CAEKSqkuM10=7fN0FGyx-jRtUA+pEg=-3dHUBbs50xaa60bKrmA@mail.gmail.com>
References: <00A8D2CB-A1A3-496F-8670-E9888990F3E6@twistedmatrix.com>
 <8761bcxxak.fsf@hermes.hocat.ca>
 <CAEKSqkuP5xjOy5Vdo4Giuj1HG5Xo6hvEAvBE88ZFCzniXvp1Uw@mail.gmail.com>
 <9DC27720-4877-466C-8148-2D5E5E1EA532@twistedmatrix.com>
 <CAEKSqksRBDowvEjUYZ6C7Y4QZsrzs_AsAT7+DvKieYyQ5b3vaw@mail.gmail.com>
 <64374D0B-3396-4B61-8DEC-82C9EDFB3EA3@twistedmatrix.com>
 <CAEKSqkuBomAwHxKBZV9NH__tjnVP5fGssuUyovkq5gE5okMJBw@mail.gmail.com>
 <D37E57F4-B14F-4E15-8B24-0B53CA4EF716@twistedmatrix.com>
 <CAEKSqkuM10=7fN0FGyx-jRtUA+pEg=-3dHUBbs50xaa60bKrmA@mail.gmail.com>
Message-ID: <47FC2072-2B20-4318-B1EB-5473EE3B5F18@twistedmatrix.com>


> On Oct 26, 2015, at 1:52 PM, Chris Wolfe <chriswwolfe at gmail.com> wrote:
> 
> On 2 February 2015 at 19:18, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> [snip]
> > Not all committers are actively involved in the project at all times, so we should form a "committer committee" 
> > of people who are interested in evaluating candidates.  If you would like to do that and you're already a committer, 
> > please contact me and I'll add you to the list. 
> 
> It looks like this new process has stalled on the formation of the committee to review new contributor requests. As of right now, the committee has no members. :-)
> 
> This email is a call for volunteers. If you would like to serve on the committee, please reply to this thread and state that you are interested in serving on the committee. Once enough volunteers have signed up, new contributor requests will be sent to the committee's mailing list.

I'm going to go a step further and say that you do not need to be a committer yourself to be on this mailing list. Being a committer is a technical qualification; this is a people process.  If you want to become a committer you will of course have to recuse yourself from a decision about yourself :), but otherwise I'm happy to have people who haven't cleared this process themselves participate in it, as long as they follow the process and evaluate folks fairly.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151026/d9f1a3e4/attachment.html>

From hawkowl at atleastfornow.net  Mon Oct 26 17:56:46 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Tue, 27 Oct 2015 07:56:46 +0800
Subject: [Twisted-Python] revisiting onboarding
In-Reply-To: <CAEKSqkuM10=7fN0FGyx-jRtUA+pEg=-3dHUBbs50xaa60bKrmA@mail.gmail.com>
References: <00A8D2CB-A1A3-496F-8670-E9888990F3E6@twistedmatrix.com>
 <8761bcxxak.fsf@hermes.hocat.ca>
 <CAEKSqkuP5xjOy5Vdo4Giuj1HG5Xo6hvEAvBE88ZFCzniXvp1Uw@mail.gmail.com>
 <9DC27720-4877-466C-8148-2D5E5E1EA532@twistedmatrix.com>
 <CAEKSqksRBDowvEjUYZ6C7Y4QZsrzs_AsAT7+DvKieYyQ5b3vaw@mail.gmail.com>
 <64374D0B-3396-4B61-8DEC-82C9EDFB3EA3@twistedmatrix.com>
 <CAEKSqkuBomAwHxKBZV9NH__tjnVP5fGssuUyovkq5gE5okMJBw@mail.gmail.com>
 <D37E57F4-B14F-4E15-8B24-0B53CA4EF716@twistedmatrix.com>
 <CAEKSqkuM10=7fN0FGyx-jRtUA+pEg=-3dHUBbs50xaa60bKrmA@mail.gmail.com>
Message-ID: <9C211CCA-3860-444A-8BA0-255E75B13BA7@atleastfornow.net>


> On 27 Oct 2015, at 04:52, Chris Wolfe <chriswwolfe at gmail.com> wrote:
> 
> On 2 February 2015 at 19:18, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> [snip]
> > Not all committers are actively involved in the project at all times, so we should form a "committer committee"
> > of people who are interested in evaluating candidates.  If you would like to do that and you're already a committer,
> > please contact me and I'll add you to the list.
> 
> It looks like this new process has stalled on the formation of the committee to review new contributor requests. As of right now, the committee has no members. :-)
> 
> This email is a call for volunteers. If you would like to serve on the committee, please reply to this thread and state that you are interested in serving on the committee. Once enough volunteers have signed up, new contributor requests will be sent to the committee's mailing list.

I'm happy to be on this.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151027/723da2d9/attachment.pgp>

From glyph at twistedmatrix.com  Mon Oct 26 18:10:57 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 26 Oct 2015 17:10:57 -0700
Subject: [Twisted-Python] SNI callback with support for deferreds
In-Reply-To: <CAFzCN1vkHRKM_JfKV5ivcr8E3BA8N-9CBiBVjgB0KdampaHihA@mail.gmail.com>
References: <CAFzCN1sdwwLQ_yDsKTA+3ZPB_Cb0uMdTo-Za7Ot=qGcVg2ZZ2w@mail.gmail.com>
 <77ABF1F6-3A6E-4518-BD57-0D2021828209@twistedmatrix.com>
 <CAFzCN1vkHRKM_JfKV5ivcr8E3BA8N-9CBiBVjgB0KdampaHihA@mail.gmail.com>
Message-ID: <478F67C6-DA7F-4850-B1CD-8D81A44B4FA7@twistedmatrix.com>


> On Oct 26, 2015, at 5:37 AM, Jonathan Stoppani <jonathan at stoppani.name> wrote:
> 
> It also needs a serious overhaul on its indentation - something messed up happened to that code :).
> 
> I don't get it, I see it all as PEP8 compliant (will need to adapt spacing to Twisted's code standards, but that should be all).
> 

Uh... nevermind.  Must have been some Github stylesheet failing to load for me or something; the code looks fine now.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151026/472c4be3/attachment-0001.html>

From glyph at twistedmatrix.com  Mon Oct 26 18:12:26 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 26 Oct 2015 17:12:26 -0700
Subject: [Twisted-Python] [Twisted-web] Changing the Twisted
	Compatibility Policy
In-Reply-To: <3FE8FE6A-5DBA-4C0B-9BD4-47D03DF083B1@2xlp.com>
References: <F014B67C-1A19-445F-9723-6F862FF74849@atleastfornow.net>
 <167E1C3A-BB30-41B3-A1F9-D5C316BD6290@twistedmatrix.com>
 <3FE8FE6A-5DBA-4C0B-9BD4-47D03DF083B1@2xlp.com>
Message-ID: <99CE5A72-615F-4F90-B4B5-F342870A555C@twistedmatrix.com>


> On Oct 26, 2015, at 11:57 AM, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:
> 
> From a "non-core user" of twisted point of view, and someone likely to run into issues from this change... things that I have liked from other projects are:


Thanks very much (and thanks to everyone else as well) for sharing your perspective.  One of the sometimes frustrating things about Twisted maintenance is that we don't hear from users until it's too late; getting this kind of perspective from actual users with experience both with Twisted and other projects before we make process decisions is invaluable.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151026/77f61eb9/attachment.html>

From ngoonee.talk at gmail.com  Wed Oct 28 00:24:24 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Wed, 28 Oct 2015 14:24:24 +0800
Subject: [Twisted-Python] AMP with a long-lived connection - results and
	deferred?
Message-ID: <CAGQ70es93-+NWpFTZEiD0KHS8QTeTnCX5WJbskybQz90L=pQag@mail.gmail.com>

Working off the example ampserver.py and ampclient.py examples, I
wanted to build a client which maintains a single connection while
allowing the passing of messages back and forth. However I'm stuck at
one of the most basic steps, getting back the result (without
'completing' the connection).

The ampclient.py example simply connects, does a callRemote on the
resulting protocol, and adds callbacks to extract the result from a
dictionary and print it. The deferred being used in this case is
produced by connectProtocol.

I'm trying to write a client (inheriting from amp.AMP) which is
embedded in a kivy GUI, something which is quite possible using the
_threadedselect reactor.

On connection, I use the connectionMade method to save the 'self' (in
this case, the client inheriting from amp.AMP) in my kivy app. I can
then call a function which does a callRemote on this saved client,
which indeed triggers the server appropriately.

The callRemote returns a deferred (from reading docs online, a remote
reference). I can't figure out what to do with it, specifically in
terms of getting the result ('total', when calling Sum from
ampserver.py).

Assistance much appreciated.


From ngoonee.talk at gmail.com  Wed Oct 28 00:33:58 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Wed, 28 Oct 2015 14:33:58 +0800
Subject: [Twisted-Python] AMP with a long-lived connection - results and
	deferred?
In-Reply-To: <CAGQ70es93-+NWpFTZEiD0KHS8QTeTnCX5WJbskybQz90L=pQag@mail.gmail.com>
References: <CAGQ70es93-+NWpFTZEiD0KHS8QTeTnCX5WJbskybQz90L=pQag@mail.gmail.com>
Message-ID: <CAGQ70etgQne=WV5gK646U1mMA_hbwGSFr57aLOeTEBN905HxfQ@mail.gmail.com>

One 'answer' that I've gotten so far is in this link -
http://stackoverflow.com/questions/15640393/how-to-create-bi-directional-messaging-using-amp-in-twisted-python
- but that doesn't seem to achieve what I want, at least not in the
way I want it. It does a callRemote from the server in the function
called by the client (using callRemote). As I understand things,
that's what deferred is meant to solve, and anyway this seems to
invalidate the reason for using amp.Command inheritence anyway (as the
response is required).

To be clear, that way does 'work', but it doesn't seem to be doing the
sort of bidirectional messaging AMP should be doing.

In summary:- how do I see the response from client side without making
a new connection every time I have something to send (as done in the
ampclient.py example)?

On Wed, Oct 28, 2015 at 2:24 PM, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
> Working off the example ampserver.py and ampclient.py examples, I
> wanted to build a client which maintains a single connection while
> allowing the passing of messages back and forth. However I'm stuck at
> one of the most basic steps, getting back the result (without
> 'completing' the connection).
>
> The ampclient.py example simply connects, does a callRemote on the
> resulting protocol, and adds callbacks to extract the result from a
> dictionary and print it. The deferred being used in this case is
> produced by connectProtocol.
>
> I'm trying to write a client (inheriting from amp.AMP) which is
> embedded in a kivy GUI, something which is quite possible using the
> _threadedselect reactor.
>
> On connection, I use the connectionMade method to save the 'self' (in
> this case, the client inheriting from amp.AMP) in my kivy app. I can
> then call a function which does a callRemote on this saved client,
> which indeed triggers the server appropriately.
>
> The callRemote returns a deferred (from reading docs online, a remote
> reference). I can't figure out what to do with it, specifically in
> terms of getting the result ('total', when calling Sum from
> ampserver.py).
>
> Assistance much appreciated.


From markus at bluegap.ch  Wed Oct 28 05:10:10 2015
From: markus at bluegap.ch (Markus Wanner)
Date: Wed, 28 Oct 2015 12:10:10 +0100
Subject: [Twisted-Python] log config depending on nodaemon option
Message-ID: <5630AD12.80009@bluegap.ch>

Hi,

I'm trying to configure logging of my application depending on whether
or not the -y (--nodaemon) option of twistd is given. Actually very
similar to the default behavior, I would just like to switch to daily
log files. But it seems the application created has no access to the
config (used by underlying twistd and the ApplicationRunner).

What's the best way to switch to daily log files using twistd?

Kind Regards

Markus Wanner


From glyph at twistedmatrix.com  Wed Oct 28 22:45:12 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 28 Oct 2015 21:45:12 -0700
Subject: [Twisted-Python] log config depending on nodaemon option
In-Reply-To: <5630AD12.80009@bluegap.ch>
References: <5630AD12.80009@bluegap.ch>
Message-ID: <7FCD7B2A-AF5C-4CA9-B4A7-CF37E3C3058D@twistedmatrix.com>


> On Oct 28, 2015, at 4:10 AM, Markus Wanner <markus at bluegap.ch> wrote:
> 
> Hi,
> 
> I'm trying to configure logging of my application depending on whether
> or not the -y (--nodaemon) option of twistd is given. Actually very
> similar to the default behavior, I would just like to switch to daily
> log files. But it seems the application created has no access to the
> config (used by underlying twistd and the ApplicationRunner).
> 
> What's the best way to switch to daily log files using twistd?


You have 3 options, pretty much:

Submit a patch to Twisted that adds this option to twistd itself.  This is probably the most reasonable option, since you're asking for twistd to have a feature that it doesn't currently.  This is a great time to be submitting patches, too - we have two recipients of the Twisted fellowship right now available to do review work for the SFC, I have work time allotted to Twisted reviewing, and the review queue <https://twistedmatrix.com/trac/report/25> is consistently shorter than it's been in a long time.  So you are likely to get a quick response.
Use the `-n? option and run `twistd? under a supervisor like systemd, consuming, writing, and rotating its logs without daemonizing, and handle log management outside of `twistd?.  This is probably the long-term direction that operations with Twisted will ultimately take, as you can see in some of the pontificating on <https://twistedmatrix.com/trac/ticket/5705 <https://twistedmatrix.com/trac/ticket/5705>>.
Grovel around in unsupported global state like `sys.argv? in your twistd plugin, and use private attributes to just change the structure of the objects internally.  I don't think this is a great idea and I probably won't help you with it ;).

The reason that state like this is not readily accessible to a twistd plugin is intentional, although we have long been paying the cost of making it difficult to configure without really realizing the benefit from this architecture, which is service composability.  For example, something like, "twistd -n web --path http + words --irc-port=6667 + mail --maildirdbmdomain=example.com=/tmp/example.com + auth ldap://corporate-active-directory" to give you IRC and web and mail all backed by the same authentication database.  If this is the case then no one plugin can really assert control over how logging is configured, so we have been trying to avoid doing a whole lot in the area of making it possible for your plugin to control the twistd environment it's started in.

If you really want to control every aspect of your deployment from your own code, you can always just import `twisted.scripts.twistd? and build your own ServerOptions object that contains exactly what deployment options you want to use.

I hope this is helpful.  Thanks for using Twisted!

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151028/36a2d99c/attachment.html>

From dripton at ripton.net  Wed Oct 28 23:15:24 2015
From: dripton at ripton.net (David Ripton)
Date: Thu, 29 Oct 2015 01:15:24 -0400
Subject: [Twisted-Python] AMP with a long-lived connection - results and
 deferred?
In-Reply-To: <CAGQ70es93-+NWpFTZEiD0KHS8QTeTnCX5WJbskybQz90L=pQag@mail.gmail.com>
References: <CAGQ70es93-+NWpFTZEiD0KHS8QTeTnCX5WJbskybQz90L=pQag@mail.gmail.com>
Message-ID: <5631AB6C.3010002@ripton.net>

On 10/28/2015 02:24 AM, Oon-Ee Ng wrote:
> Working off the example ampserver.py and ampclient.py examples, I
> wanted to build a client which maintains a single connection while
> allowing the passing of messages back and forth. However I'm stuck at
> one of the most basic steps, getting back the result (without
> 'completing' the connection).
> 
> The ampclient.py example simply connects, does a callRemote on the
> resulting protocol, and adds callbacks to extract the result from a
> dictionary and print it. The deferred being used in this case is
> produced by connectProtocol.
> 
> I'm trying to write a client (inheriting from amp.AMP) which is
> embedded in a kivy GUI, something which is quite possible using the
> _threadedselect reactor.
> 
> On connection, I use the connectionMade method to save the 'self' (in
> this case, the client inheriting from amp.AMP) in my kivy app. I can
> then call a function which does a callRemote on this saved client,
> which indeed triggers the server appropriately.
> 
> The callRemote returns a deferred (from reading docs online, a remote
> reference). I can't figure out what to do with it, specifically in
> terms of getting the result ('total', when calling Sum from
> ampserver.py).
> 
> Assistance much appreciated.

Basically, callRemote returns a deferred, that you can add callbacks and
errbacks to, which will be called when the remote call succeeds or
fails.  On success, the callback will receive an argument equal to the
return value of the remote callable that you called.  On failure, the
errback will receive an error argument.

I have an old GUI (PyGTK, not Kivy) chat over AMP example at
https://github.com/dripton/ampchat that might help you.  (Though I think
all of my commands return boring responses.)

-- 
David Ripton    dripton at ripton.net


From ngoonee.talk at gmail.com  Thu Oct 29 01:37:20 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Thu, 29 Oct 2015 15:37:20 +0800
Subject: [Twisted-Python] AMP with a long-lived connection - results and
	deferred?
In-Reply-To: <5631AB6C.3010002@ripton.net>
References: <CAGQ70es93-+NWpFTZEiD0KHS8QTeTnCX5WJbskybQz90L=pQag@mail.gmail.com>
 <5631AB6C.3010002@ripton.net>
Message-ID: <CAGQ70etwiPgGF1c5gZMe99Mz4j8cHGH9sNjro8QfDmwuWWwWwQ@mail.gmail.com>

Thanks David, but when I do something along the lines of:-

def mycall(in):
    print(in)
d = self.connection.boxReceiver.callRemote(Command, a='test')
d.addCallBack(mycall)

The print never actually happens. I'm not really sure why, it was one
of the first things I tried. I tried the most basic thing, modifying
the doMath() example, and mycall only triggers when the reactor stops
(even if I run doMath multiple times with delays).

On Thu, Oct 29, 2015 at 1:15 PM, David Ripton <dripton at ripton.net> wrote:
> On 10/28/2015 02:24 AM, Oon-Ee Ng wrote:
>> Working off the example ampserver.py and ampclient.py examples, I
>> wanted to build a client which maintains a single connection while
>> allowing the passing of messages back and forth. However I'm stuck at
>> one of the most basic steps, getting back the result (without
>> 'completing' the connection).
>>
>> The ampclient.py example simply connects, does a callRemote on the
>> resulting protocol, and adds callbacks to extract the result from a
>> dictionary and print it. The deferred being used in this case is
>> produced by connectProtocol.
>>
>> I'm trying to write a client (inheriting from amp.AMP) which is
>> embedded in a kivy GUI, something which is quite possible using the
>> _threadedselect reactor.
>>
>> On connection, I use the connectionMade method to save the 'self' (in
>> this case, the client inheriting from amp.AMP) in my kivy app. I can
>> then call a function which does a callRemote on this saved client,
>> which indeed triggers the server appropriately.
>>
>> The callRemote returns a deferred (from reading docs online, a remote
>> reference). I can't figure out what to do with it, specifically in
>> terms of getting the result ('total', when calling Sum from
>> ampserver.py).
>>
>> Assistance much appreciated.
>
> Basically, callRemote returns a deferred, that you can add callbacks and
> errbacks to, which will be called when the remote call succeeds or
> fails.  On success, the callback will receive an argument equal to the
> return value of the remote callable that you called.  On failure, the
> errback will receive an error argument.
>
> I have an old GUI (PyGTK, not Kivy) chat over AMP example at
> https://github.com/dripton/ampchat that might help you.  (Though I think
> all of my commands return boring responses.)
>
> --
> David Ripton    dripton at ripton.net
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From ngoonee.talk at gmail.com  Thu Oct 29 02:03:50 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Thu, 29 Oct 2015 16:03:50 +0800
Subject: [Twisted-Python] AMP with a long-lived connection - results and
	deferred?
In-Reply-To: <CAGQ70etwiPgGF1c5gZMe99Mz4j8cHGH9sNjro8QfDmwuWWwWwQ@mail.gmail.com>
References: <CAGQ70es93-+NWpFTZEiD0KHS8QTeTnCX5WJbskybQz90L=pQag@mail.gmail.com>
 <5631AB6C.3010002@ripton.net>
 <CAGQ70etwiPgGF1c5gZMe99Mz4j8cHGH9sNjro8QfDmwuWWwWwQ@mail.gmail.com>
Message-ID: <CAGQ70esioxyAq_EP0v4GRBszCMNrna05d2c_uRH-rR9owtAYww@mail.gmail.com>

Hmm, I'm wondering whether this could be specific to the reactor I'm
using (a _threadedselect reactor embedded in Kivy). I wrote up a
minimal example of what I'm doing to demonstrate the issue, but this
example works! Doesn't in my (admittedly quite a bit more complex)
kivy example though. Let me try for a minimal example there and see if
I can figure it out.

from twisted.internet import reactor, protocol
from twisted.internet.task import deferLater
from twisted.protocols import amp
from ampserver import Sum, Divide


connection = None

class MathClient(amp.AMP):
    def connectionMade(self):
        global connection
        connection = self


class MathFactory(protocol.ReconnectingClientFactory):
    protocol = MathClient


if __name__ == '__main__':
    reactor.connectTCP('127.0.0.1', 1234, MathFactory())
    def simpleSum():
        global connection
        d = connection.callRemote(Sum, a=1, b=5)
        def prin(result):
            print(result)
        d.addCallback(prin)
        return d
    deferLater(reactor, 1, simpleSum)
    deferLater(reactor, 3, simpleSum)
    deferLater(reactor, 6, simpleSum)
    deferLater(reactor, 9, simpleSum)
    deferLater(reactor, 12, simpleSum)
    deferLater(reactor, 15, simpleSum)
    deferLater(reactor, 18, simpleSum).addCallback(lambda _: reactor.stop())
    reactor.run()

On Thu, Oct 29, 2015 at 3:37 PM, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
> Thanks David, but when I do something along the lines of:-
>
> def mycall(in):
>     print(in)
> d = self.connection.boxReceiver.callRemote(Command, a='test')
> d.addCallBack(mycall)
>
> The print never actually happens. I'm not really sure why, it was one
> of the first things I tried. I tried the most basic thing, modifying
> the doMath() example, and mycall only triggers when the reactor stops
> (even if I run doMath multiple times with delays).
>
> On Thu, Oct 29, 2015 at 1:15 PM, David Ripton <dripton at ripton.net> wrote:
>> On 10/28/2015 02:24 AM, Oon-Ee Ng wrote:
>>> Working off the example ampserver.py and ampclient.py examples, I
>>> wanted to build a client which maintains a single connection while
>>> allowing the passing of messages back and forth. However I'm stuck at
>>> one of the most basic steps, getting back the result (without
>>> 'completing' the connection).
>>>
>>> The ampclient.py example simply connects, does a callRemote on the
>>> resulting protocol, and adds callbacks to extract the result from a
>>> dictionary and print it. The deferred being used in this case is
>>> produced by connectProtocol.
>>>
>>> I'm trying to write a client (inheriting from amp.AMP) which is
>>> embedded in a kivy GUI, something which is quite possible using the
>>> _threadedselect reactor.
>>>
>>> On connection, I use the connectionMade method to save the 'self' (in
>>> this case, the client inheriting from amp.AMP) in my kivy app. I can
>>> then call a function which does a callRemote on this saved client,
>>> which indeed triggers the server appropriately.
>>>
>>> The callRemote returns a deferred (from reading docs online, a remote
>>> reference). I can't figure out what to do with it, specifically in
>>> terms of getting the result ('total', when calling Sum from
>>> ampserver.py).
>>>
>>> Assistance much appreciated.
>>
>> Basically, callRemote returns a deferred, that you can add callbacks and
>> errbacks to, which will be called when the remote call succeeds or
>> fails.  On success, the callback will receive an argument equal to the
>> return value of the remote callable that you called.  On failure, the
>> errback will receive an error argument.
>>
>> I have an old GUI (PyGTK, not Kivy) chat over AMP example at
>> https://github.com/dripton/ampchat that might help you.  (Though I think
>> all of my commands return boring responses.)
>>
>> --
>> David Ripton    dripton at ripton.net
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From ngoonee.talk at gmail.com  Thu Oct 29 02:16:38 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Thu, 29 Oct 2015 16:16:38 +0800
Subject: [Twisted-Python] AMP with a long-lived connection - results and
	deferred?
In-Reply-To: <CAGQ70esioxyAq_EP0v4GRBszCMNrna05d2c_uRH-rR9owtAYww@mail.gmail.com>
References: <CAGQ70es93-+NWpFTZEiD0KHS8QTeTnCX5WJbskybQz90L=pQag@mail.gmail.com>
 <5631AB6C.3010002@ripton.net>
 <CAGQ70etwiPgGF1c5gZMe99Mz4j8cHGH9sNjro8QfDmwuWWwWwQ@mail.gmail.com>
 <CAGQ70esioxyAq_EP0v4GRBszCMNrna05d2c_uRH-rR9owtAYww@mail.gmail.com>
Message-ID: <CAGQ70eujC5+VZuVGM9+Ud_sSFEQAa1aCt8JiPiaRHDB510JSOQ@mail.gmail.com>

And lo and behold it seems to work now even with Kivy. Strange. For
posterity, here's the simple client code I was using for a minimal
example. I'll expand upwards from here and see how far I can get.

#install_twisted_rector must be called before importing the reactor
from kivy.support import install_twisted_reactor
install_twisted_reactor()

from twisted.internet import reactor, protocol
from twisted.internet.task import deferLater
from ampserver import Sum, Divide
from twisted.protocols import amp

class EchoClient(amp.AMP):
    def connectionMade(self):
        self.factory.resetDelay()
        self.factory.app.on_connection(self)


class EchoFactory(protocol.ReconnectingClientFactory):
    protocol = EchoClient

    def __init__(self, app):
        self.app = app


from kivy.app import App
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.uix.boxlayout import BoxLayout


# A simple kivy App, with a textbox to enter messages, and
# a large label to display all the messages received from
# the server
class TwistedClientApp(App):
    connection = None

    def build(self):
        root = self.setup_gui()
        self.connect_to_server()
        return root

    def setup_gui(self):
        self.textbox = TextInput(size_hint_y=.1, multiline=False)
        self.textbox.bind(on_text_validate=self.send_message)
        self.label = Label(text='connecting...\n')
        self.layout = BoxLayout(orientation='vertical')
        self.layout.add_widget(self.label)
        self.layout.add_widget(self.textbox)
        return self.layout

    def connect_to_server(self):
        reactor.connectTCP('127.0.0.1', 1234, EchoFactory(self))

    def on_connection(self, connection):
        self.print_message("connected succesfully!")
        self.connection = connection

    def send_message(self, *args):
        msg = self.textbox.text.encode('ascii')
        if self.connection:
            d = self.connection.boxReceiver.callRemote(Sum, a=3, b=8)
            def prin(result):
                print(result)
            d.addCallback(prin)

    def print_message(self, msg):
        self.label.text += str(msg) + "\n"

if __name__ == '__main__':
    TwistedClientApp().run()


From markus at bluegap.ch  Thu Oct 29 08:28:29 2015
From: markus at bluegap.ch (Markus Wanner)
Date: Thu, 29 Oct 2015 15:28:29 +0100
Subject: [Twisted-Python] log config depending on nodaemon option
In-Reply-To: <7FCD7B2A-AF5C-4CA9-B4A7-CF37E3C3058D@twistedmatrix.com>
References: <5630AD12.80009@bluegap.ch>
 <7FCD7B2A-AF5C-4CA9-B4A7-CF37E3C3058D@twistedmatrix.com>
Message-ID: <56322D0D.9050809@bluegap.ch>

Glyyh,

thanks a lot for your detailed answer. Not quite what I was hoping for,
but I now understand the reasoning behind and will figure a wait to deal
with it.

Thanks for a great piece of software.

Kind Regards

Markus Wanner


From chris.norman2 at googlemail.com  Sat Oct 31 00:41:38 2015
From: chris.norman2 at googlemail.com (Chris Norman)
Date: Sat, 31 Oct 2015 06:41:38 +0000
Subject: [Twisted-Python] Possible bug
Message-ID: <563462A2.7000309@googlemail.com>

Hi all,
Using windows 10 with Python 3.5, importing pretty much anything gives 
me the following error. Not sure if there's something wrong with my 
configuration or if it's a bug... I seem to remember something a while 
back, should I file a ticket?


Traceback (most recent call last):
   File "<string>", line 1, in <module>
   File "C:\python35\lib\site-packages\twisted\internet\reactor.py", 
line 38, in <module>
     from twisted.internet import default
   File "C:\python35\lib\site-packages\twisted\internet\default.py", 
line 56, in <module>
     install = _getInstallFunction(platform)
   File "C:\python35\lib\site-packages\twisted\internet\default.py", 
line 50, in _getInstallFunction
     from twisted.internet.selectreactor import install
   File 
"C:\python35\lib\site-packages\twisted\internet\selectreactor.py", line 
18, in <module>
     from twisted.internet import posixbase
   File "C:\python35\lib\site-packages\twisted\internet\posixbase.py", 
line 18, in <module>
     from twisted.internet import error, udp, tcp
   File "C:\python35\lib\site-packages\twisted\internet\udp.py", line 
53, in <module>
     from twisted.internet import base, defer, address
   File "C:\python35\lib\site-packages\twisted\internet\base.py", line 
23, in <module>
     from twisted.internet import fdesc, main, error, abstract, defer, 
threads
   File "C:\python35\lib\site-packages\twisted\internet\defer.py", line 
29, in <module>
     from twisted.python import lockfile, failure
   File "C:\python35\lib\site-packages\twisted\python\lockfile.py", line 
52, in <module>
     _open = file
NameError: name 'file' is not defined

Cheers,



From hawkowl at atleastfornow.net  Sat Oct 31 00:45:29 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sat, 31 Oct 2015 14:45:29 +0800
Subject: [Twisted-Python] Possible bug
In-Reply-To: <563462A2.7000309@googlemail.com>
References: <563462A2.7000309@googlemail.com>
Message-ID: <344F2B0F-7787-451F-9075-52283232F70A@atleastfornow.net>

Hi Chris,

Twisted does not yet support Python 3 on Windows.

There's a ticket at https://twistedmatrix.com/trac/ticket/8025#ticket which makes all the tests pass on the platform; I just need to work on it some more. I expect Twisted 16.0 to have base support for Python 3 on Windows.

- Amber

> On 31 Oct 2015, at 14:41, Chris Norman <chris.norman2 at googlemail.com> wrote:
> 
> Hi all,
> Using windows 10 with Python 3.5, importing pretty much anything gives me the following error. Not sure if there's something wrong with my configuration or if it's a bug... I seem to remember something a while back, should I file a ticket?
> 
> 
> Traceback (most recent call last):
>  File "<string>", line 1, in <module>
>  File "C:\python35\lib\site-packages\twisted\internet\reactor.py", line 38, in <module>
>    from twisted.internet import default
>  File "C:\python35\lib\site-packages\twisted\internet\default.py", line 56, in <module>
>    install = _getInstallFunction(platform)
>  File "C:\python35\lib\site-packages\twisted\internet\default.py", line 50, in _getInstallFunction
>    from twisted.internet.selectreactor import install
>  File "C:\python35\lib\site-packages\twisted\internet\selectreactor.py", line 18, in <module>
>    from twisted.internet import posixbase
>  File "C:\python35\lib\site-packages\twisted\internet\posixbase.py", line 18, in <module>
>    from twisted.internet import error, udp, tcp
>  File "C:\python35\lib\site-packages\twisted\internet\udp.py", line 53, in <module>
>    from twisted.internet import base, defer, address
>  File "C:\python35\lib\site-packages\twisted\internet\base.py", line 23, in <module>
>    from twisted.internet import fdesc, main, error, abstract, defer, threads
>  File "C:\python35\lib\site-packages\twisted\internet\defer.py", line 29, in <module>
>    from twisted.python import lockfile, failure
>  File "C:\python35\lib\site-packages\twisted\python\lockfile.py", line 52, in <module>
>    _open = file
> NameError: name 'file' is not defined
> 
> Cheers,
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151031/740d9208/attachment.pgp>

From chris.norman2 at googlemail.com  Sat Oct 31 00:49:42 2015
From: chris.norman2 at googlemail.com (Chris Norman)
Date: Sat, 31 Oct 2015 06:49:42 +0000
Subject: [Twisted-Python] Possible bug
In-Reply-To: <344F2B0F-7787-451F-9075-52283232F70A@atleastfornow.net>
References: <563462A2.7000309@googlemail.com>
 <344F2B0F-7787-451F-9075-52283232F70A@atleastfornow.net>
Message-ID: <56346486.8040700@googlemail.com>

Hi Amber

On 31/10/2015 06:45, Amber "Hawkie" Brown wrote:
> Hi Chris,
>
> Twisted does not yet support Python 3 on Windows.

That's a shame. I've never contributed to an open source project before, 
but I'd be glad to try and help out. I feel I __may__ know enough Python 
now to certainly have a shot at it.
>
> There's a ticket at https://twistedmatrix.com/trac/ticket/8025#ticket which makes all the tests pass on the platform; I just need to work on it some more. I expect Twisted 16.0 to have base support for Python 3 on Windows.

As above, if I can help, please tell me how!

Cheers,
>
> - Amber
>
>> On 31 Oct 2015, at 14:41, Chris Norman <chris.norman2 at googlemail.com> wrote:
>>
>> Hi all,
>> Using windows 10 with Python 3.5, importing pretty much anything gives me the following error. Not sure if there's something wrong with my configuration or if it's a bug... I seem to remember something a while back, should I file a ticket?
>>
>>
>> Traceback (most recent call last):
>>   File "<string>", line 1, in <module>
>>   File "C:\python35\lib\site-packages\twisted\internet\reactor.py", line 38, in <module>
>>     from twisted.internet import default
>>   File "C:\python35\lib\site-packages\twisted\internet\default.py", line 56, in <module>
>>     install = _getInstallFunction(platform)
>>   File "C:\python35\lib\site-packages\twisted\internet\default.py", line 50, in _getInstallFunction
>>     from twisted.internet.selectreactor import install
>>   File "C:\python35\lib\site-packages\twisted\internet\selectreactor.py", line 18, in <module>
>>     from twisted.internet import posixbase
>>   File "C:\python35\lib\site-packages\twisted\internet\posixbase.py", line 18, in <module>
>>     from twisted.internet import error, udp, tcp
>>   File "C:\python35\lib\site-packages\twisted\internet\udp.py", line 53, in <module>
>>     from twisted.internet import base, defer, address
>>   File "C:\python35\lib\site-packages\twisted\internet\base.py", line 23, in <module>
>>     from twisted.internet import fdesc, main, error, abstract, defer, threads
>>   File "C:\python35\lib\site-packages\twisted\internet\defer.py", line 29, in <module>
>>     from twisted.python import lockfile, failure
>>   File "C:\python35\lib\site-packages\twisted\python\lockfile.py", line 52, in <module>
>>     _open = file
>> NameError: name 'file' is not defined
>>
>> Cheers,
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151031/88385bce/attachment.html>

From glyph at twistedmatrix.com  Sat Oct 31 01:39:58 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 31 Oct 2015 00:39:58 -0700
Subject: [Twisted-Python] Possible bug
In-Reply-To: <56346486.8040700@googlemail.com>
References: <563462A2.7000309@googlemail.com>
 <344F2B0F-7787-451F-9075-52283232F70A@atleastfornow.net>
 <56346486.8040700@googlemail.com>
Message-ID: <95F488D7-8C1C-462E-938A-9952C053B7D1@twistedmatrix.com>


> On Oct 30, 2015, at 11:49 PM, Chris Norman <chris.norman2 at googlemail.com> wrote:
> 
> Hi Amber
> 
> On 31/10/2015 06:45, Amber "Hawkie" Brown wrote:
>> Hi Chris,
>> 
>> Twisted does not yet support Python 3 on Windows.
> 
> That's a shame. I've never contributed to an open source project before, but I'd be glad to try and help out. I feel I __may__ know enough Python now to certainly have a shot at it.

If you feel like you might, you definitely do :-).  Often people feel like they need to be advanced rocket surgeons to work on Twisted, but in fact, our robust code-review process means that you don't have to worry about making mistakes at all.  Just submit your best effort, and you'll get a code review telling you how to improve it so that it can be integrated (and you _will_ get at least one round of review: I created Twisted, and even _I_ can't usually land a patch without one or two rounds of review ;-)).

Thanks for offering to help out!  If everybody who wanted Python 3 support just signed on to work on a ticket like this, the port would have been finished a year ago ;-).
>> There's a ticket at https://twistedmatrix.com/trac/ticket/8025#ticket <https://twistedmatrix.com/trac/ticket/8025#ticket> which makes all the tests pass on the platform; I just need to work on it some more. I expect Twisted 16.0 to have base support for Python 3 on Windows.
> As above, if I can help, please tell me how!

Our toolchain is a little clunky (sorry about that) for hysterical raisins.

Before I launch into an explanation though, are you already familiar with Git and/or how to contribute on GitHub?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151031/c60d5830/attachment-0001.html>

From chris.norman2 at googlemail.com  Sat Oct 31 02:03:51 2015
From: chris.norman2 at googlemail.com (Chris Norman)
Date: Sat, 31 Oct 2015 08:03:51 +0000
Subject: [Twisted-Python] Possible bug
In-Reply-To: <95F488D7-8C1C-462E-938A-9952C053B7D1@twistedmatrix.com>
References: <563462A2.7000309@googlemail.com>
 <344F2B0F-7787-451F-9075-52283232F70A@atleastfornow.net>
 <56346486.8040700@googlemail.com>
 <95F488D7-8C1C-462E-938A-9952C053B7D1@twistedmatrix.com>
Message-ID: <563475E7.20901@googlemail.com>

Hi,
I've used git extensively, and I can soon read up on how to contribute 
on git. So what's the next step? Is there a howto somewhere on the 
Twisted site?

Cheers,


On 31/10/2015 07:39, Glyph Lefkowitz wrote:
>
>> On Oct 30, 2015, at 11:49 PM, Chris Norman 
>> <chris.norman2 at googlemail.com <mailto:chris.norman2 at googlemail.com>> 
>> wrote:
>>
>> Hi Amber
>>
>> On 31/10/2015 06:45, Amber "Hawkie" Brown wrote:
>>> Hi Chris,
>>>
>>> Twisted does not yet support Python 3 on Windows.
>>
>> That's a shame. I've never contributed to an open source project 
>> before, but I'd be glad to try and help out. I feel I __may__ know 
>> enough Python now to certainly have a shot at it.
>
> If you feel like you might, you definitely do :-).  Often people feel 
> like they need to be advanced rocket surgeons to work on Twisted, but 
> in fact, our robust code-review process means that you don't have to 
> worry about making mistakes at all.  Just submit your best effort, and 
> you'll get a code review telling you how to improve it so that it can 
> be integrated (and you _will_ get at least one round of review: I 
> created Twisted, and even _I_ can't usually land a patch without one 
> or two rounds of review ;-)).
>
> Thanks for offering to help out!  If everybody who wanted Python 3 
> support just signed on to work on a ticket like this, the port would 
> have been finished a year ago ;-).
>>> There's a ticket athttps://twistedmatrix.com/trac/ticket/8025#ticket  which makes all the tests pass on the platform; I just need to work on it some more. I expect Twisted 16.0 to have base support for Python 3 on Windows.
>> As above, if I can help, please tell me how!
>
> Our toolchain is a little clunky (sorry about that) for hysterical 
> raisins.
>
> Before I launch into an explanation though, are you already familiar 
> with Git and/or how to contribute on GitHub?
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151031/3549e35a/attachment.html>

From chris.norman2 at googlemail.com  Sat Oct 31 02:31:28 2015
From: chris.norman2 at googlemail.com (Chris Norman)
Date: Sat, 31 Oct 2015 08:31:28 +0000
Subject: [Twisted-Python] Running Trial [wav]: Re:  Possible bug
In-Reply-To: <95F488D7-8C1C-462E-938A-9952C053B7D1@twistedmatrix.com>
References: <563462A2.7000309@googlemail.com>
 <344F2B0F-7787-451F-9075-52283232F70A@atleastfornow.net>
 <56346486.8040700@googlemail.com>
 <95F488D7-8C1C-462E-938A-9952C053B7D1@twistedmatrix.com>
Message-ID: <56347C60.5080108@googlemail.com>

Hi,
So I went on the net on the off chance that the info I was looking for 
was easy to obtain, and I found out about trial.

I cloned the git and did:
python bin/trial twisted

I got the following:

Unhandled Error
Traceback (most recent call last):
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\scripts\trial.py", 
line 473, in postOptions
     _BasicOptions.postOptions(self)
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\scripts\trial.py", 
line 383, in postOptions
     self['reporter'] = self._loadReporterByName(self['reporter'])
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\scripts\trial.py", 
line 370, in _loadReporterByName
     for p in plugin.getPlugins(itrial.IReporter):
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\plugin.py", line 
213, in getPlugins
     allDropins = getCache(package)
--- <exception caught here> ---
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\plugin.py", line 
171, in getCache
     provider = pluginModule.load()
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\python\modules.py", 
line 389, in load
     return self.pathEntry.pythonPath.moduleLoader(self.name)
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\python\reflect.py", 
line 303, in namedAny
     topLevelPackage = _importAndCheckStack(trialname)
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\python\reflect.py", 
line 242, in _importAndCheckStack
     return __import__(importName)
   File 
"C:\Users\chris\Dropbox\SRC\twisted\twisted\plugins\twisted_core.py", 
line 5, in <module>
     from twisted.internet.endpoints import _SystemdParser, 
_TCP6ServerParser, _StandardIOParser
   File 
"C:\Users\chris\Dropbox\SRC\twisted\twisted\internet\endpoints.py", line 
34, in <module>
     from twisted.internet.stdio import StandardIO, PipeAddress
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\internet\stdio.py", 
line 30, in <module>
     from twisted.internet import _win32stdio
   File 
"C:\Users\chris\Dropbox\SRC\twisted\twisted\internet\_win32stdio.py", 
line 15, in <module>
     from twisted.internet import _pollingfile, main
   File 
"C:\Users\chris\Dropbox\SRC\twisted\twisted\internet\_pollingfile.py", 
line 106, in <module>
     class _PollableReadPipe(_PollableResource):
   File 
"C:\Users\chris\Dropbox\SRC\twisted\twisted\internet\_pollingfile.py", 
line 108, in _PollableReadPipe
     implements(IPushProducer)
   File "C:\python35\lib\site-packages\zope\interface\declarations.py", 
line 412, in implements
     raise TypeError(_ADVICE_ERROR % 'implementer')
builtins.TypeError: Class advice impossible in Python3.  Use the 
@implementer class decorator instead.

Unexpected error while writing cache file
Traceback (most recent call last):
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\scripts\trial.py", 
line 473, in postOptions
     _BasicOptions.postOptions(self)
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\scripts\trial.py", 
line 383, in postOptions
     self['reporter'] = self._loadReporterByName(self['reporter'])
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\scripts\trial.py", 
line 370, in _loadReporterByName
     for p in plugin.getPlugins(itrial.IReporter):
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\plugin.py", line 
213, in getPlugins
     allDropins = getCache(package)
--- <exception caught here> ---
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\plugin.py", line 
185, in getCache
     dropinPath.setContent(pickle.dumps(dropinDotCache))
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\python\filepath.py", 
line 1532, in setContent
     os.rename(sib.path, self.path)
builtins.ValueError: rename: src and dst must be the same type

Traceback (most recent call last):
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\python\lockfile.py", 
line 91, in symlink
     rename(newlinkname, filename)
FileExistsError: [WinError 183] Cannot create a file when that file 
already exists: 
'C:\\Users\\chris\\Dropbox\\SRC\\twisted\\_trial_temp.lock.1446280185217.newlink' 
-> 'C:\\Users\\chris\\Dropbox\\SRC\\twisted\\_trial_temp.lock'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
   File "bin/trial", line 22, in <module>
     run()
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\scripts\trial.py", 
line 616, in run
     test_result = trialRunner.run(suite)
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\trial\runner.py", 
line 959, in run
     return self._runWithoutDecoration(test, self._forceGarbageCollection)
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\trial\runner.py", 
line 983, in _runWithoutDecoration
     oldDir = self._setUpTestdir()
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\trial\runner.py", 
line 886, in _setUpTestdir
     testdir, self._testDirLock = util._unusedTestDirectory(base)
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\trial\util.py", line 
356, in _unusedTestDirectory
     if testDirLock.lock():
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\python\lockfile.py", 
line 160, in lock
     symlink(str(os.getpid()), self.name)
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\python\lockfile.py", 
line 94, in symlink
     os.rmdir(newlinkname)
OSError: [WinError 145] The directory is not empty: 
'C:\\Users\\chris\\Dropbox\\SRC\\twisted\\_trial_temp.lock.1446280185217.newlink'

Is that a trial error or a Twisted test failing?

Sorry if this is a stupid question, but (terrible, I know) I've never 
used tests before.

Another quick google told me that Trial was ported to Python3, so I'm 
not sure... If it's a test failing, it's not really telling me where the 
failure is.

Cheers.


On 31/10/2015 07:39, Glyph Lefkowitz wrote:
>
>> On Oct 30, 2015, at 11:49 PM, Chris Norman 
>> <chris.norman2 at googlemail.com <mailto:chris.norman2 at googlemail.com>> 
>> wrote:
>>
>> Hi Amber
>>
>> On 31/10/2015 06:45, Amber "Hawkie" Brown wrote:
>>> Hi Chris,
>>>
>>> Twisted does not yet support Python 3 on Windows.
>>
>> That's a shame. I've never contributed to an open source project 
>> before, but I'd be glad to try and help out. I feel I __may__ know 
>> enough Python now to certainly have a shot at it.
>
> If you feel like you might, you definitely do :-).  Often people feel 
> like they need to be advanced rocket surgeons to work on Twisted, but 
> in fact, our robust code-review process means that you don't have to 
> worry about making mistakes at all.  Just submit your best effort, and 
> you'll get a code review telling you how to improve it so that it can 
> be integrated (and you _will_ get at least one round of review: I 
> created Twisted, and even _I_ can't usually land a patch without one 
> or two rounds of review ;-)).
>
> Thanks for offering to help out!  If everybody who wanted Python 3 
> support just signed on to work on a ticket like this, the port would 
> have been finished a year ago ;-).
>>> There's a ticket athttps://twistedmatrix.com/trac/ticket/8025#ticket  which makes all the tests pass on the platform; I just need to work on it some more. I expect Twisted 16.0 to have base support for Python 3 on Windows.
>> As above, if I can help, please tell me how!
>
> Our toolchain is a little clunky (sorry about that) for hysterical 
> raisins.
>
> Before I launch into an explanation though, are you already familiar 
> with Git and/or how to contribute on GitHub?
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151031/a101c338/attachment-0001.html>

From adi at roiban.ro  Sat Oct 31 02:31:21 2015
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 31 Oct 2015 10:31:21 +0200
Subject: [Twisted-Python] Possible bug
In-Reply-To: <563475E7.20901@googlemail.com>
References: <563462A2.7000309@googlemail.com>
 <344F2B0F-7787-451F-9075-52283232F70A@atleastfornow.net>
 <56346486.8040700@googlemail.com>
 <95F488D7-8C1C-462E-938A-9952C053B7D1@twistedmatrix.com>
 <563475E7.20901@googlemail.com>
Message-ID: <CAFycZ9dhbat3Af=sGuNwxSDLz=NTvFOhqonkb+y38qFoKFDA4w@mail.gmail.com>

On 31 October 2015 at 10:03, Chris Norman <chris.norman2 at googlemail.com> wrote:
> Hi,
> I've used git extensively, and I can soon read up on how to contribute on
> git. So what's the next step? Is there a howto somewhere on the Twisted
> site?

This is some info about contributing

http://twistedmatrix.com/trac/wiki/TwistedDevelopment

For git you should check http://twistedmatrix.com/trac/wiki/GitMirror

Join the #twisted-dev channel and maybe get in touch with Amber to see
if you can continue her great porting work :)

Regards,
Adi

> Cheers,
>
>
>
> On 31/10/2015 07:39, Glyph Lefkowitz wrote:
>
>
> On Oct 30, 2015, at 11:49 PM, Chris Norman <chris.norman2 at googlemail.com>
> wrote:
>
> Hi Amber
>
> On 31/10/2015 06:45, Amber "Hawkie" Brown wrote:
>
> Hi Chris,
>
> Twisted does not yet support Python 3 on Windows.
>
>
> That's a shame. I've never contributed to an open source project before, but
> I'd be glad to try and help out. I feel I __may__ know enough Python now to
> certainly have a shot at it.
>
>
> If you feel like you might, you definitely do :-).  Often people feel like
> they need to be advanced rocket surgeons to work on Twisted, but in fact,
> our robust code-review process means that you don't have to worry about
> making mistakes at all.  Just submit your best effort, and you'll get a code
> review telling you how to improve it so that it can be integrated (and you
> _will_ get at least one round of review: I created Twisted, and even _I_
> can't usually land a patch without one or two rounds of review ;-)).
>
> Thanks for offering to help out!  If everybody who wanted Python 3 support
> just signed on to work on a ticket like this, the port would have been
> finished a year ago ;-).
>
> There's a ticket at https://twistedmatrix.com/trac/ticket/8025#ticket which
> makes all the tests pass on the platform; I just need to work on it some
> more. I expect Twisted 16.0 to have base support for Python 3 on Windows.
>
> As above, if I can help, please tell me how!
>
>
> Our toolchain is a little clunky (sorry about that) for hysterical raisins.
>
> Before I launch into an explanation though, are you already familiar with
> Git and/or how to contribute on GitHub?
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Adi Roiban


From johnaherne at rocs.co.uk  Thu Oct  1 04:34:33 2015
From: johnaherne at rocs.co.uk (John Aherne)
Date: Thu, 1 Oct 2015 11:34:33 +0100
Subject: [Twisted-Python] Call for volunteers: fundraising
Message-ID: <CAKmUHjZbr+GDbmU47jrX5QeKJJ=GPCwFZU4qN4XcWQx4tWWeBg@mail.gmail.com>

I don't suppose I will be crushed in the stampede to reply to this email.

But it strikes me as fairly important that we do something about this.

At the moment I'm none to sure what would be involved so if someone could
enlighten me as to the requirements, I'll have a better idea of what I
might have to do.


-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151001/671b10ac/attachment-0002.html>

From mashiat.sarker at gmail.com  Thu Oct  1 14:40:22 2015
From: mashiat.sarker at gmail.com (Mashiat Sarker Shakkhar)
Date: Thu, 1 Oct 2015 16:40:22 -0400
Subject: [Twisted-Python] Testing function with delayed calls
Message-ID: <CAOfeCWUKQeHsDFFDkwMoxg4VLRrtezbuyd2CosXjzcLwuBCiuA@mail.gmail.com>

Hi

I have a function that uses callLater extensively to schedule a number of
different tasks. I don't want to get into the rationale behind such a
design, but here is a contrived example which will help me explain my
problem:


    def b():

        '''Do some work'''


    def c():

        '''Do some more work'''


    def a(flag):

        if flag:

            return Reactor.callLater(300, b)

        else:

            return Reactor. callLater(100, c)


Now I want to test this function. Of course I can't wait for 5 minutes to
ensure that `b` or `c` will indeed be called. What I need is some sort of
mock clock which lets me fast forward time. Does any such thing exist in
Twisted / Trial? Or is there any other approach to test such code?


Regards

Shakkhar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151001/9bc00592/attachment-0002.html>

From ashfall at twistedmatrix.com  Thu Oct  1 15:46:11 2015
From: ashfall at twistedmatrix.com (Ashwini Oruganti)
Date: Thu, 1 Oct 2015 14:46:11 -0700
Subject: [Twisted-Python] Testing function with delayed calls
In-Reply-To: <CAOfeCWUKQeHsDFFDkwMoxg4VLRrtezbuyd2CosXjzcLwuBCiuA@mail.gmail.com>
References: <CAOfeCWUKQeHsDFFDkwMoxg4VLRrtezbuyd2CosXjzcLwuBCiuA@mail.gmail.com>
Message-ID: <CAMFCZ-375u0WH+KFRr7=3Btzbms3o4+osCoLB-EgcybWD7cZcQ@mail.gmail.com>

On Thu, Oct 1, 2015 at 1:40 PM, Mashiat Sarker Shakkhar <
mashiat.sarker at gmail.com> wrote:

> Hi
>
> I have a function that uses callLater extensively to schedule a number of
> different tasks. I don't want to get into the rationale behind such a
> design, but here is a contrived example which will help me explain my
> problem:
>
>
>     def b():
>
>         '''Do some work'''
>
>
>     def c():
>
>         '''Do some more work'''
>
>
>     def a(flag):
>
>         if flag:
>
>             return Reactor.callLater(300, b)
>
>         else:
>
>             return Reactor. callLater(100, c)
>
>
> Now I want to test this function. Of course I can't wait for 5 minutes to
> ensure that `b` or `c` will indeed be called. What I need is some sort of
> mock clock which lets me fast forward time. Does any such thing exist in
> Twisted / Trial?
>

Yes there is! `MemoryReactorClock.advance`
https://twistedmatrix.com/documents/current/api/twisted.test.proto_helpers.MemoryReactorClock.html
does this for you.

An example usage can be seen in the tests for `HostnameEndpoint`
https://github.com/twisted/twisted/blob/trunk/twisted/internet/test/test_endpoints.py#L2064

-Ashwini




> Or is there any other approach to test such code?
>







>
> Regards
>
> Shakkhar
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151001/19bc4706/attachment-0002.html>

From mashiat.sarker at gmail.com  Fri Oct  2 08:33:53 2015
From: mashiat.sarker at gmail.com (Mashiat Sarker Shakkhar)
Date: Fri, 2 Oct 2015 10:33:53 -0400
Subject: [Twisted-Python] Testing function with delayed calls
In-Reply-To: <CAMFCZ-375u0WH+KFRr7=3Btzbms3o4+osCoLB-EgcybWD7cZcQ@mail.gmail.com>
References: <CAOfeCWUKQeHsDFFDkwMoxg4VLRrtezbuyd2CosXjzcLwuBCiuA@mail.gmail.com>
 <CAMFCZ-375u0WH+KFRr7=3Btzbms3o4+osCoLB-EgcybWD7cZcQ@mail.gmail.com>
Message-ID: <CAOfeCWWTn=NRhw0OsC9Fs=L8vpyu7rH-qJ0f0fORsSs4QYJgqA@mail.gmail.com>

On Thu, Oct 1, 2015 at 5:46 PM, Ashwini Oruganti <ashfall at twistedmatrix.com>
wrote:

>
>
> On Thu, Oct 1, 2015 at 1:40 PM, Mashiat Sarker Shakkhar <
> mashiat.sarker at gmail.com> wrote:
>
>> Hi
>>
>> I have a function that uses callLater extensively to schedule a number of
>> different tasks. I don't want to get into the rationale behind such a
>> design, but here is a contrived example which will help me explain my
>> problem:
>>
>>
>>     def b():
>>
>>         '''Do some work'''
>>
>>
>>     def c():
>>
>>         '''Do some more work'''
>>
>>
>>     def a(flag):
>>
>>         if flag:
>>
>>             return Reactor.callLater(300, b)
>>
>>         else:
>>
>>             return Reactor. callLater(100, c)
>>
>>
>> Now I want to test this function. Of course I can't wait for 5 minutes to
>> ensure that `b` or `c` will indeed be called. What I need is some sort of
>> mock clock which lets me fast forward time. Does any such thing exist in
>> Twisted / Trial?
>>
>
> Yes there is! `MemoryReactorClock.advance`
> https://twistedmatrix.com/documents/current/api/twisted.test.proto_helpers.MemoryReactorClock.html
> does this for you.
>
>
HI Ashwini

 Thanks a lot for your response. I did come across MemoryReactorClock
before, but I could not figure out how to use it to test my code. I am
using trial as the test runner, which allows me to pass the name of the
reactor to be used in command line. But MemoryReactorClock is not
available, because it is not in twisted.internet.

The code that I am testing imports reactor from twisted.internet in the
global scope. Do I have to change that and pass a reactor explicitly (say,
as a function parameter) where it is needed? Is there any other way to
change the default reactor to MemoryReactorClock just for running tests?

Going with my previous example, do I have to rewrite the code like
following or is there a better way?

    def b():

        '''Do some work'''


    def c():

        '''Do some more work'''


    def a(myreactor, flag):

        if flag:

            return myreactor.callLater(300, b)

        else:

            return myeactor. callLater(100, c)


I do see this in the documentation:

> New application code should prefer to pass and accept the reactor as a
parameter where it is needed, rather than relying on being able to import
this module to get a reference. This simplifies unit testing ...


But I'd prefer not to change the signature of existing functions.


Regards

Shakkhar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151002/9fcd1849/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Oct  3 04:49:16 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 3 Oct 2015 03:49:16 -0700
Subject: [Twisted-Python] Testing function with delayed calls
In-Reply-To: <CAOfeCWWTn=NRhw0OsC9Fs=L8vpyu7rH-qJ0f0fORsSs4QYJgqA@mail.gmail.com>
References: <CAOfeCWUKQeHsDFFDkwMoxg4VLRrtezbuyd2CosXjzcLwuBCiuA@mail.gmail.com>
 <CAMFCZ-375u0WH+KFRr7=3Btzbms3o4+osCoLB-EgcybWD7cZcQ@mail.gmail.com>
 <CAOfeCWWTn=NRhw0OsC9Fs=L8vpyu7rH-qJ0f0fORsSs4QYJgqA@mail.gmail.com>
Message-ID: <0519CC59-72D9-4613-9300-33839335E3C1@twistedmatrix.com>


> On Oct 2, 2015, at 7:33 AM, Mashiat Sarker Shakkhar <mashiat.sarker at gmail.com> wrote:
> 
> On Thu, Oct 1, 2015 at 5:46 PM, Ashwini Oruganti <ashfall at twistedmatrix.com <mailto:ashfall at twistedmatrix.com>> wrote:
> 
> 
> On Thu, Oct 1, 2015 at 1:40 PM, Mashiat Sarker Shakkhar <mashiat.sarker at gmail.com <mailto:mashiat.sarker at gmail.com>>wrote:
> Hi
> 
> I have a function that uses callLater extensively to schedule a number of different tasks. I don't want to get into the rationale behind such a design, but here is a contrived example which will help me explain my problem: 
> 
>     def b():
>         '''Do some work'''
> 
>     def c():
>         '''Do some more work'''
> 
>     def a(flag):
>         if flag:
>             return Reactor.callLater(300, b)
>         else:
>             return Reactor. callLater(100, c)
> 
> Now I want to test this function. Of course I can't wait for 5 minutes to ensure that `b` or `c` will indeed be called. What I need is some sort of mock clock which lets me fast forward time. Does any such thing exist in Twisted / Trial? 
> 
> Yes there is! `MemoryReactorClock.advance` https://twistedmatrix.com/documents/current/api/twisted.test.proto_helpers.MemoryReactorClock.html <https://twistedmatrix.com/documents/current/api/twisted.test.proto_helpers.MemoryReactorClock.html> does this for you.
> 
> 
> HI Ashwini
> 
>  Thanks a lot for your response. I did come across MemoryReactorClock before, but I could not figure out how to use it to test my code. I am using trial as the test runner, which allows me to pass the name of the reactor to be used in command line. But MemoryReactorClock is not available, because it is not in twisted.internet.

Indeed, the MemoryReactorClock reactor is not suitable for installation in a global reactor.

> The code that I am testing imports reactor from twisted.internet in the global scope. Do I have to change that and pass a reactor explicitly (say, as a function parameter) where it is needed?

Yes.

> Is there any other way to change the default reactor to MemoryReactorClock just for running tests?

You can hack it using patch <http://twistedmatrix.com/documents/15.2.0/api/twisted.trial.unittest.SynchronousTestCase.html#patch <http://twistedmatrix.com/documents/15.2.0/api/twisted.trial.unittest.SynchronousTestCase.html#patch>>, by replacing the "reactor" attribute on your module.  But this is much worse than passing a parameter, and should only be used if you _really_ can't change the signature of your code for some reason.

> Going with my previous example, do I have to rewrite the code like following or is there a better way?

You should rewrite code like the following, it would be better :).  But hey, this is Python, nobody can stop you from doing anything you want :).

>     def b():
>         '''Do some work'''
> 
>     def c():
>         '''Do some more work'''
> 
>     def a(myreactor, flag):
>         if flag:
>             return myreactor.callLater(300, b)
>         else:
>             return myeactor. callLater(100, c)
> 
> I do see this in the documentation:
> > New application code should prefer to pass and accept the reactor as a parameter where it is needed, rather than relying on being able to import this module to get a reference. This simplifies unit testing ...
> 
> But I'd prefer not to change the signature of existing functions.

Passing parameters to functions that need them is not a bad thing.  You should generally prefer that.  It seems a lot of Python programmers are very resistant to passing arguments, and would instead prefer that everything be a global variable.  I am honestly somewhat confused as to why :-).  But it's a bad habit and you should try to shake it.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151003/a47517d8/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Oct  3 05:07:03 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 3 Oct 2015 04:07:03 -0700
Subject: [Twisted-Python] twisted compatibility with multiprocessing
	module in fork+execv mode
In-Reply-To: <58908503.20626.1443608736676.JavaMail.zimbra@voismart.it>
References: <58908503.20626.1443608736676.JavaMail.zimbra@voismart.it>
Message-ID: <F65BE466-9174-4670-A343-95498CF7E9AD@twistedmatrix.com>


> On Sep 30, 2015, at 03:25, Flavio Grossi <fgrossi at voismart.it> wrote:
> 
> I know the multiprocessing module is not properly supported by twisted apps because of the interactions among duplicated file descriptors and signal handling, as discussed other times.

To be fair, the multiprocessing module has most of these issues by itself :-).  The main reason Twisted didn't work with things like multiprocessing in the past was the fact that we didn't pass SA_RESTART to the SIGCHLD handler, and that has long since been resolved; you can now fork, os.system, popen, and multiprocess more or less like you can in any other Python program.

> But python 3.4 introduces a new mode to use that module by spawning (i.e. fork() followed by execv()) the new processes instead of simply forking it.

That is a definite improvement and will be far more reliable.

> So my question is how supported this is by twisted, and in general how safe it is to use subprocesses created by duplicating the parent immediately followed by the execv of a fresh interpreter.

This is what Twisted would do if it were spawning a subprocess, so... safe enough.

> What i'm thinking is something like this, to asynchronously process requests and delegate the cpu-bound work to some processes:

This will probably work, but it still has the drawbacks of multiprocessing:

1. you will be serializing 'work' via pickle, which is fraught with problems,
2. you will have no way to tell when 'work' has completed, so you will easily overload all of your worker processes under heavy load.

Instead, using something like ampoule <https://pypi.python.org/pypi/ampoule <https://pypi.python.org/pypi/ampoule>> would allow you to use twisted's spawnProcess facility to send and receive data via a more reliable serialization mechanism than pickle, and get straightforward feedback (Deferreds firing with results) when work is complete.

In fairness, even doing this with ampoule is altogether too much boilerplate, and we should probably have something for quick-and-dirty multiprocessing like a 'deferToProcess' that just uses pickle and presents a similarly convenient API, spawning python interpreters as necessary behind the scenes.  So I can understand why you're looking at multiprocessing; all I can tell you for now is that it is probably worth setting up all the necessary infrastructure to do this the "right way" because it will be more reliable and you will rapidly need to expand to do bi-directional communication.

Thanks for using Twisted,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151003/a60853f4/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Oct  3 05:11:04 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 3 Oct 2015 04:11:04 -0700
Subject: [Twisted-Python] Call for volunteers: fundraising
In-Reply-To: <CAKmUHjZbr+GDbmU47jrX5QeKJJ=GPCwFZU4qN4XcWQx4tWWeBg@mail.gmail.com>
References: <CAKmUHjZbr+GDbmU47jrX5QeKJJ=GPCwFZU4qN4XcWQx4tWWeBg@mail.gmail.com>
Message-ID: <F3AC9E09-FAAA-4EF7-B680-4D0E89B1D668@twistedmatrix.com>


> On Oct 1, 2015, at 03:34, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> I don't suppose I will be crushed in the stampede to reply to this email.

Thanks so much for replying, John :).

> But it strikes me as fairly important that we do something about this.

Yes, I agree.

> At the moment I'm none to sure what would be involved so if someone could enlighten me as to the requirements, I'll have a better idea of what I might have to do.

Basically, it's "whatever you can do".  More specifically, we need someone to do the work of discovering interested sponsors - however you can discover them - figuring out who to contact at those sponsors, following up with them if they have questions, and ultimately getting them to sign on the line which is dotted.  Given that our current effort is almost nothing - the SFC follows up with existing sponsors, or new sponsors who contact them, but doesn't have the bandwidth to pursue new ones - any effort in this direction would be very useful.

Does that make sense?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151003/8c9aa9cc/attachment-0002.html>

From johnaherne at rocs.co.uk  Sun Oct  4 09:04:52 2015
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sun, 4 Oct 2015 16:04:52 +0100
Subject: [Twisted-Python] Call for volunteers: fundraising
Message-ID: <CAKmUHjYsQARnxwPDN2HYyBzP3DCVeB6Um4_BNAG=jboufkTrHw@mail.gmail.com>

OK.

That makes sense.

Do we have a list of current sponsors and what they have contributed stored
anywhere.

Do we have a list of email addresses of people using twisted in a serious
application that might be contacted.

Then a list of people that have contributed to twisted so are making a
contribution that is not strictly financial.

If not, then we have to try and find out who are using twisted for a
business application.

Any pointers to where I can find this information will be helpful.

Thanks

-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151004/c5d504dd/attachment-0002.html>

From commercials24 at yahoo.de  Mon Oct  5 03:33:09 2015
From: commercials24 at yahoo.de (peter)
Date: Mon, 05 Oct 2015 11:33:09 +0200
Subject: [Twisted-Python] irc bot,
 reacting to: irc_ERR_NOSUCHNICK. after the code where the reactor
 was started
Message-ID: <561243D5.6000300@yahoo.de>

my bot inherits from irc.IRCClient, when it sends a message to another 
user who isnt online irc_ERR_NOSUCHNICK(self, prefix, command) is called.
how can i react to that message, my code is called with:


class mybot(irc.IRCClient):
...
if __name__ == "__main__":

     factory = XdccBotFactory( channel, nickname, xdccbot, xdccrequests )
     reactor.connectTCP( server, 6667, factory )



in irc_ERR_NOSUCHNICK... i got:
     error_message = "%s bot is not connected to server" % 
now.strftime("%Y-%m-%d %H:%M:%S")
     log.warning(error_message)


which works.
but what i really would like to have is:


if __name__ == "__main__":

     factory = XdccBotFactory( channel, nickname, xdccbot, xdccrequests )
     reactor.connectTCP( server, 6667, factory )

     if "bot not online":
         "send message to antoher user"


so basically i need the information that irc_ERR_... was called after 
the reactor was started.
how do you do that?




From commercials24 at yahoo.de  Mon Oct  5 05:42:31 2015
From: commercials24 at yahoo.de (peter)
Date: Mon, 05 Oct 2015 13:42:31 +0200
Subject: [Twisted-Python] irc bot,
 reacting to: irc_ERR_NOSUCHNICK. after the code where the reactor
 was started
Message-ID: <56126227.3030209@yahoo.de>

my bot inherits from irc.IRCClient, when it sends a message to another 
user who isnt online irc_ERR_NOSUCHNICK(self, prefix, command) is called.
how can i react to that message, my code is called with:


class mybot(irc.IRCClient):
...
if __name__ == "__main__":

     factory = XdccBotFactory( channel, nickname, xdccbot, xdccrequests )
     reactor.connectTCP( server, 6667, factory )



in irc_ERR_NOSUCHNICK... i got:
     error_message = "%s bot is not connected to server" % 
now.strftime("%Y-%m-%d %H:%M:%S")
     log.warning(error_message)


which works.
but what i really would like to have is:


if __name__ == "__main__":

     factory = XdccBotFactory( channel, nickname, xdccbot, xdccrequests )
     reactor.connectTCP( server, 6667, factory )

     if "bot not online":
         "send message to antoher user"


so basically i need the information that irc_ERR_... was called after 
the reactor was started.
how do you do that?




From glyph at twistedmatrix.com  Mon Oct  5 13:52:14 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 5 Oct 2015 12:52:14 -0700
Subject: [Twisted-Python] Call for volunteers: fundraising
In-Reply-To: <CAKmUHjYsQARnxwPDN2HYyBzP3DCVeB6Um4_BNAG=jboufkTrHw@mail.gmail.com>
References: <CAKmUHjYsQARnxwPDN2HYyBzP3DCVeB6Um4_BNAG=jboufkTrHw@mail.gmail.com>
Message-ID: <D9F59155-EEFC-4720-8CCE-4344E38B6131@twistedmatrix.com>


> On Oct 4, 2015, at 8:04 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> OK.
> 
> That makes sense.
> 
> Do we have a list of current sponsors and what they have contributed stored anywhere.
> 
> Do we have a list of email addresses of people using twisted in a serious application that might be contacted.
> 
> Then a list of people that have contributed to twisted so are making a contribution that is not strictly financial.
> 
> If not, then we have to try and find out who are using twisted for a business application.
> 
> Any pointers to where I can find this information will be helpful.

We do have all of those things; I can put you in touch with our contact at the SFC if you want to get started :-).  Shall I do so?

-glyph





From glyph at twistedmatrix.com  Mon Oct  5 15:12:09 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 5 Oct 2015 14:12:09 -0700
Subject: [Twisted-Python] irc bot,
	reacting to: irc_ERR_NOSUCHNICK. after the code where the reactor
	was started
In-Reply-To: <561243D5.6000300@yahoo.de>
References: <561243D5.6000300@yahoo.de>
Message-ID: <8092AEB6-7AFD-4A0D-972B-4B3530A0E48C@twistedmatrix.com>


> On Oct 5, 2015, at 2:33 AM, peter <commercials24 at yahoo.de> wrote:
> 
> my bot inherits from irc.IRCClient, when it sends a message to another user who isnt online irc_ERR_NOSUCHNICK(self, prefix, command) is called.
> how can i react to that message, my code is called with:
> 
> 
> class mybot(irc.IRCClient):
> ...
> if __name__ == "__main__":
> 
>    factory = XdccBotFactory( channel, nickname, xdccbot, xdccrequests )
>    reactor.connectTCP( server, 6667, factory )
> 
> 
> 
> in irc_ERR_NOSUCHNICK... i got:
>    error_message = "%s bot is not connected to server" % now.strftime("%Y-%m-%d %H:%M:%S")
>    log.warning(error_message)
> 
> 
> which works.
> but what i really would like to have is:
> 
> 
> if __name__ == "__main__":
> 
>    factory = XdccBotFactory( channel, nickname, xdccbot, xdccrequests )
>    reactor.connectTCP( server, 6667, factory )
> 
>    if "bot not online":
>        "send message to antoher user"
> 
> 
> so basically i need the information that irc_ERR_... was called after the reactor was started.
> how do you do that?

Use Endpoints <https://twistedmatrix.com/documents/15.4.0/core/howto/endpoints.html> so you get a nice `Deferred´ back from connectTCP.
Add a callback to that Deferred.
Add a method to `XdccBotFactory´ that returns a `Deferred´ that fires when its message is successfully sent and acknowledged, and then add a callback to that `Deferred´.

If you were to use inlineCallbacks to inline the callbacks you're adding into one function, it might look something like this:

> @inlineCallbacks
> def main(reactor):
>     factory = XdccBotFactory(channel, nickname, xdccbot, xdccrequests)
>     endpoint = clientFromString(reactor, "...")
>     bot = yield endpoint.connect(factory)
>     online = yield bot.isBotOnline()
>     if online:
>         "send message to another user"
>     else:
>         "ok"


Does this make sense?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151005/f6666613/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Oct  5 15:28:25 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 5 Oct 2015 14:28:25 -0700
Subject: [Twisted-Python] twisted.mail.imap4.IMAP4Client.fetchMessage
	always throws exception
In-Reply-To: <1c9557cc.9170.14f93b4527b.Coremail.snailcoder@163.com>
References: <1c9557cc.9170.14f93b4527b.Coremail.snailcoder@163.com>
Message-ID: <81D21A89-A4CA-4942-A75F-9C07284293F2@twistedmatrix.com>


> On Sep 3, 2015, at 7:55 AM, Wang Yan <snailcoder at 163.com> wrote:
> 
> Hi,
> 
> I've installed Twisted 15.3.0 on Ubuntu 14.04LTS. Excellent work but there's one problem bothering me for a long time: twisted.mail.imap4.IMAP4Client.fetchMessage always throws exception and the exception occured at random, e.g. somtimes the exception occured when the program read the 120th mail, sometimes it occured at the 150th or 200th mail. The traceback of the exception is as follows:
> 
> Unhandled Error
> Traceback (most recent call last):
>   File "/usr/local/lib/python2.7/dist-packages/Twisted-15.3.0-py2.7-linux-i686.egg/twisted/python/log.py", line 101, in callWithLogger
>     return callWithContext({"system": lp}, func, *args, **kw)
>   File "/usr/local/lib/python2.7/dist-packages/Twisted-15.3.0-py2.7-linux-i686.egg/twisted/python/log.py", line 84, in callWithContext
>     return context.call({ILogContext: newCtx}, func, *args, **kw)
>   File "/usr/local/lib/python2.7/dist-packages/Twisted-15.3.0-py2.7-linux-i686.egg/twisted/python/context.py", line 118, in callWithContext
>     return self.currentContext().callWithContext(ctx, func, *args, **kw)
>   File "/usr/local/lib/python2.7/dist-packages/Twisted-15.3.0-py2.7-linux-i686.egg/twisted/python/context.py", line 81, in callWithContext
>     return func(*args,**kw)
> --- <exception caught here> ---
>   File "/usr/local/lib/python2.7/dist-packages/Twisted-15.3.0-py2.7-linux-i686.egg/twisted/internet/posixbase.py", line 597, in _doReadOrWrite
>     why = selectable.doRead()
>   File "/usr/local/lib/python2.7/dist-packages/Twisted-15.3.0-py2.7-linux-i686.egg/twisted/internet/tcp.py", line 209, in doRead
>     return self._dataReceived(data)
>   File "/usr/local/lib/python2.7/dist-packages/Twisted-15.3.0-py2.7-linux-i686.egg/twisted/internet/tcp.py", line 215, in _dataReceived
>     rval = self.protocol.dataReceived(data)
>   File "/usr/local/lib/python2.7/dist-packages/Twisted-15.3.0-py2.7-linux-i686.egg/twisted/protocols/basic.py", line 571, in dataReceived
>     why = self.lineReceived(line)
>   File "/usr/local/lib/python2.7/dist-packages/Twisted-15.3.0-py2.7-linux-i686.egg/twisted/mail/imap4.py", line 2356, in lineReceived
>     self._regularDispatch(line)
>   File "/usr/local/lib/python2.7/dist-packages/Twisted-15.3.0-py2.7-linux-i686.egg/twisted/mail/imap4.py", line 2383, in _regularDispatch
>     tag, rest = parts
> exceptions.ValueError: need more than 1 value to unpack
> 
> My code is as simple as possible and the exception is thrown by the following codes:
> 
> dlist = []
> for msg in messages:    # use message number, not UID
>     d = self.fetchMessage(msg, uid=False)
>     d.addCallback(cbGetAttachment)
>     dlist.append(d)
> dl = defer.DeferredList(dlist)
> return dl.addCallback(cbLogout)
> 
> Is there anybody know about this issue?


Hi Wang,

Sorry it took some time to get back to you.  What kind of mail server are you talking to?  This looks like a protocol error - perhaps a bug in the server you're talking to, perhaps a bug in Twisted's handling of a valid response - but it's hard to say more without looking at the traffic and the intended behavior.  (I am no longer well-versed enough in the IMAP protocol to guess what is going on at a glance).  Is there any chance you have ever managed to reproduce this on a small set of data?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151005/e347350e/attachment-0002.html>

From johnaherne at rocs.co.uk  Tue Oct  6 00:09:24 2015
From: johnaherne at rocs.co.uk (John Aherne)
Date: Tue, 6 Oct 2015 07:09:24 +0100
Subject: [Twisted-Python] Call for volunteers: fundraising
In-Reply-To: <D9F59155-EEFC-4720-8CCE-4344E38B6131@twistedmatrix.com>
References: <CAKmUHjYsQARnxwPDN2HYyBzP3DCVeB6Um4_BNAG=jboufkTrHw@mail.gmail.com>
 <D9F59155-EEFC-4720-8CCE-4344E38B6131@twistedmatrix.com>
Message-ID: <CAKmUHjYe6D7DotXqLM+rGT58hhBOj7+jLZxV1U+=FX7pPYQJ1Q@mail.gmail.com>

OK. If you feed that info to me that should be fine.



On Mon, Oct 5, 2015 at 8:52 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> > On Oct 4, 2015, at 8:04 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> >
> > OK.
> >
> > That makes sense.
> >
> > Do we have a list of current sponsors and what they have contributed
> stored anywhere.
> >
> > Do we have a list of email addresses of people using twisted in a
> serious application that might be contacted.
> >
> > Then a list of people that have contributed to twisted so are making a
> contribution that is not strictly financial.
> >
> > If not, then we have to try and find out who are using twisted for a
> business application.
> >
> > Any pointers to where I can find this information will be helpful.
>
> We do have all of those things; I can put you in touch with our contact at
> the SFC if you want to get started :-).  Shall I do so?
>
> -glyph
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151006/80da39e7/attachment-0002.html>

From psi29a at gmail.com  Tue Oct  6 11:51:16 2015
From: psi29a at gmail.com (bret curtis)
Date: Tue, 6 Oct 2015 19:51:16 +0200
Subject: [Twisted-Python] Call for volunteers: fundraising
In-Reply-To: <D9F59155-EEFC-4720-8CCE-4344E38B6131@twistedmatrix.com>
References: <CAKmUHjYsQARnxwPDN2HYyBzP3DCVeB6Um4_BNAG=jboufkTrHw@mail.gmail.com>
 <D9F59155-EEFC-4720-8CCE-4344E38B6131@twistedmatrix.com>
Message-ID: <CA+LhZ98Z2iKFNxM4bzNcvj9RxdEmxswSu7CzvZ3XC0MchDau6A@mail.gmail.com>

For me as well please. :)

Cheers,
Bret

On Mon, Oct 5, 2015 at 9:52 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> > On Oct 4, 2015, at 8:04 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> >
> > OK.
> >
> > That makes sense.
> >
> > Do we have a list of current sponsors and what they have contributed
> stored anywhere.
> >
> > Do we have a list of email addresses of people using twisted in a
> serious application that might be contacted.
> >
> > Then a list of people that have contributed to twisted so are making a
> contribution that is not strictly financial.
> >
> > If not, then we have to try and find out who are using twisted for a
> business application.
> >
> > Any pointers to where I can find this information will be helpful.
>
> We do have all of those things; I can put you in touch with our contact at
> the SFC if you want to get started :-).  Shall I do so?
>
> -glyph
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151006/d6a9133c/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Oct  6 12:54:38 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 6 Oct 2015 11:54:38 -0700
Subject: [Twisted-Python] Call for volunteers: fundraising
In-Reply-To: <CA+LhZ98Z2iKFNxM4bzNcvj9RxdEmxswSu7CzvZ3XC0MchDau6A@mail.gmail.com>
References: <CAKmUHjYsQARnxwPDN2HYyBzP3DCVeB6Um4_BNAG=jboufkTrHw@mail.gmail.com>
 <D9F59155-EEFC-4720-8CCE-4344E38B6131@twistedmatrix.com>
 <CA+LhZ98Z2iKFNxM4bzNcvj9RxdEmxswSu7CzvZ3XC0MchDau6A@mail.gmail.com>
Message-ID: <0160CD21-03F0-4389-A790-2C6E8049BE13@twistedmatrix.com>

Thanks, it's great to get some volunteers! :-D

I've contacted both of you directly, so you should receive those emails soon...

-glyph

> On Oct 6, 2015, at 10:51 AM, bret curtis <psi29a at gmail.com> wrote:
> 
> For me as well please. :)
> 
> Cheers,
> Bret
> 
> On Mon, Oct 5, 2015 at 9:52 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> > On Oct 4, 2015, at 8:04 AM, John Aherne <johnaherne at rocs.co.uk <mailto:johnaherne at rocs.co.uk>> wrote:
> >
> > OK.
> >
> > That makes sense.
> >
> > Do we have a list of current sponsors and what they have contributed stored anywhere.
> >
> > Do we have a list of email addresses of people using twisted in a serious application that might be contacted.
> >
> > Then a list of people that have contributed to twisted so are making a contribution that is not strictly financial.
> >
> > If not, then we have to try and find out who are using twisted for a business application.
> >
> > Any pointers to where I can find this information will be helpful.
> 
> We do have all of those things; I can put you in touch with our contact at the SFC if you want to get started :-).  Shall I do so?
> 
> -glyph
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com <mailto:Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python <http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151006/18884256/attachment-0002.html>

From commercials24 at yahoo.de  Wed Oct  7 00:38:45 2015
From: commercials24 at yahoo.de (peter)
Date: Wed, 07 Oct 2015 08:38:45 +0200
Subject: [Twisted-Python] irc bot,
 reacting to: irc_ERR_NOSUCHNICK. after the code where the reactor
 was started
In-Reply-To: <8092AEB6-7AFD-4A0D-972B-4B3530A0E48C@twistedmatrix.com>
References: <561243D5.6000300@yahoo.de>
 <8092AEB6-7AFD-4A0D-972B-4B3530A0E48C@twistedmatrix.com>
Message-ID: <5614BDF5.9070001@yahoo.de>

On 10/05/2015 11:12 PM, Glyph Lefkowitz wrote:
>
>> On Oct 5, 2015, at 2:33 AM, peter <commercials24 at yahoo.de 
>> <mailto:commercials24 at yahoo.de>> wrote:
>>
>> my bot inherits from irc.IRCClient, when it sends a message to 
>> another user who isnt online irc_ERR_NOSUCHNICK(self, prefix, 
>> command) is called.
>> how can i react to that message, my code is called with:
>>
>>
>> class mybot(irc.IRCClient):
>> ...
>> if __name__ == "__main__":
>>
>>    factory = XdccBotFactory( channel, nickname, xdccbot, xdccrequests )
>>    reactor.connectTCP( server, 6667, factory )
>>
>>
>>
>> in irc_ERR_NOSUCHNICK... i got:
>>    error_message = "%s bot is not connected to server" % 
>> now.strftime("%Y-%m-%d %H:%M:%S")
>>    log.warning(error_message)
>>
>>
>> which works.
>> but what i really would like to have is:
>>
>>
>> if __name__ == "__main__":
>>
>>    factory = XdccBotFactory( channel, nickname, xdccbot, xdccrequests )
>>    reactor.connectTCP( server, 6667, factory )
>>
>>    if "bot not online":
>>        "send message to antoher user"
>>
>>
>> so basically i need the information that irc_ERR_... was called after 
>> the reactor was started.
>> how do you do that?
>
>  1. Use Endpoints
>     <https://twistedmatrix.com/documents/15.4.0/core/howto/endpoints.html>
>     so you get a nice `Deferred´ back from connectTCP.
>  2. Add a callback to that Deferred.
>  3. Add a method to `XdccBotFactory´ that returns a `Deferred´ that
>     fires when its message is successfully sent and acknowledged, and
>     then add a callback to /that/ `Deferred´.
>
>
> If you were to use inlineCallbacks to inline the callbacks you're 
> adding into one function, it might look something like this:
>
>> @inlineCallbacks
>> *def* main(reactor):
>>     factory = XdccBotFactory(channel, nickname, xdccbot, xdccrequests)
>>     endpoint = clientFromString(reactor, "...")
>>     bot = *yield* endpoint.connect(factory)
>>     online = *yield* bot.isBotOnline()
>> *if* online:
>>         "send message to another user"
>> *else*:
>> "ok"
>
> Does this make sense?
>
> -glyph
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

im sure youre solution is just fine, could you show me how you would 
contruct isBotOnline?
im assuming that code would go into the class "mybot", next to 
irc_ERR_NOSUCKNICK?


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151007/9f7f436e/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Oct  7 01:49:45 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 7 Oct 2015 00:49:45 -0700
Subject: [Twisted-Python] irc bot,
	reacting to: irc_ERR_NOSUCHNICK. after the code where the reactor
	was started
In-Reply-To: <5614BDF5.9070001@yahoo.de>
References: <561243D5.6000300@yahoo.de>
 <8092AEB6-7AFD-4A0D-972B-4B3530A0E48C@twistedmatrix.com>
 <5614BDF5.9070001@yahoo.de>
Message-ID: <F7A9083A-A312-4962-9232-D278A37C4640@twistedmatrix.com>


> On Oct 6, 2015, at 11:38 PM, peter <commercials24 at yahoo.de> wrote:
> 
> im sure youre solution is just fine, could you show me how you would contruct isBotOnline?
> im assuming that code would go into the class "mybot", next to irc_ERR_NOSUCKNICK?


The problem with just doing that is that there is no affirmative response that a message was sent, so there's no way to fire the deferred successfully if that's all you're doing.  Instead, you can use the ISON command to determine if the bot is online (and of course, the bot might go offline between the check and sending the message, so you will need to handle that case somehow too).

Since doing this is somewhat obscure, here's a working script that just checks if a nick specified on the command line is online on freenode:

from __future__ import print_function
from twisted.internet.defer import Deferred, inlineCallbacks
from twisted.words.protocols.irc import IRCClient
from twisted.internet.endpoints import clientFromString
from twisted.internet.protocol import Factory

class mybot(IRCClient, object):
    def __init__(self):
        self._isonQueue = []
        self.motdReceived = Deferred()

    def irc_RPL_ISON(self, prefix, params):
        username, d = self._isonQueue.pop(0)
        d.callback((username in params[1]))

    def isOnline(self, username):
        d = Deferred()
        self.sendLine("ISON " + username)
        self._isonQueue.append((username, d))
        return d

    def irc_RPL_ENDOFMOTD(self, prefix, params):
        self.motdReceived.callback(None)

@inlineCallbacks
def main(reactor, nick):
    endpoint = clientFromString(reactor, "tcp:chat.freenode.net:6667")
    proto = yield endpoint.connect(Factory.forProtocol(mybot))
    print("Waiting for MOTD...")
    yield proto.motdReceived
    print("Querying...")
    isOnline = yield proto.isOnline(nick)
    if isOnline:
        print(nick, "is online!")
    else:
        print(nick, "is *NOT* online!")

from twisted.internet.task import react
from sys import argv
react(main, argv[1:])


-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151007/80a41b80/attachment-0002.html>

From commercials24 at yahoo.de  Wed Oct  7 02:35:23 2015
From: commercials24 at yahoo.de (peter)
Date: Wed, 07 Oct 2015 10:35:23 +0200
Subject: [Twisted-Python] irc bot,
 reacting to: irc_ERR_NOSUCHNICK. after the code where the reactor
 was started
In-Reply-To: <F7A9083A-A312-4962-9232-D278A37C4640@twistedmatrix.com>
References: <561243D5.6000300@yahoo.de>
 <8092AEB6-7AFD-4A0D-972B-4B3530A0E48C@twistedmatrix.com>
 <5614BDF5.9070001@yahoo.de>
 <F7A9083A-A312-4962-9232-D278A37C4640@twistedmatrix.com>
Message-ID: <5614D94B.9050400@yahoo.de>

On 10/07/2015 09:49 AM, Glyph Lefkowitz wrote:
>
>> On Oct 6, 2015, at 11:38 PM, peter <commercials24 at yahoo.de 
>> <mailto:commercials24 at yahoo.de>> wrote:
>>
>> im sure youre solution is just fine, could you show me how you would 
>> contruct isBotOnline?
>> im assuming that code would go into the class "mybot", next to 
>> irc_ERR_NOSUCKNICK?
>
> The problem with just doing that is that there is no affirmative 
> response that a message was sent, so there's no way to fire the 
> deferred successfully if that's all you're doing.  Instead, you can 
> use the ISON command to determine if the bot is online (and of course, 
> the bot might go offline between the check and sending the message, so 
> you will need to handle that case somehow too).
>
> Since doing this is somewhat obscure, here's a working script that 
> just checks if a nick specified on the command line is online on freenode:
>
>     *from* *__future__* *import* print_function
>     *from* *twisted.internet.defer* *import* Deferred, inlineCallbacks
>     *from**twisted.words.protocols.irc**import*IRCClient
>     *from**twisted.internet.endpoints**import*clientFromString
>     *from**twisted.internet.protocol**import*Factory
>
>     *class* *mybot*(IRCClient, object):
>     *def* __init__(self):
>     self._isonQueue = []
>     self.motdReceived = Deferred()
>
>     *def* irc_RPL_ISON(self, prefix, params):
>             username, d = self._isonQueue.pop(0)
>             d.callback((username *in* params[1]))
>
>     *def* isOnline(self, username):
>             d = Deferred()
>     self.sendLine("ISON " + username)
>     self._isonQueue.append((username, d))
>     *return* d
>
>     *def* irc_RPL_ENDOFMOTD(self, prefix, params):
>     self.motdReceived.callback(None)
>
>     @inlineCallbacks
>     *def* main(reactor, nick):
>         endpoint = clientFromString(reactor, "tcp:chat.freenode.net:6667")
>         proto = *yield* endpoint.connect(Factory.forProtocol(mybot))
>     *print*("Waiting for MOTD...")
>     *yield* proto.motdReceived
>     *print*("Querying...")
>         isOnline = *yield* proto.isOnline(nick)
>     *if* isOnline:
>     *print*(nick, "is online!")
>     *else*:
>     *print*(nick, "is *NOT* online!")
>
>     *from**twisted.internet.task**import*react
>     *from**sys**import*argv
>     react(main, argv[1:])
>
>
>
> -glyph
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
thank you very much, i will try to adapt that solution to my code.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151007/e70f5054/attachment-0002.html>

From johnaherne at rocs.co.uk  Wed Oct  7 02:40:02 2015
From: johnaherne at rocs.co.uk (John Aherne)
Date: Wed, 7 Oct 2015 09:40:02 +0100
Subject: [Twisted-Python] Call for volunteers: fundraising
Message-ID: <CAKmUHjZzdJnBm3DBw-OfbpsjJRSa6CdT3snpzWB5dLVtec+osA@mail.gmail.com>

Looking at the twisted web site, it might be useful to make changes to
encourage more people in - a never ending source of discussion no doubt :)

Also we could display the sponsor logos higher up and offer more visibility.

This raises the question as to whether anyone has overall responsibility
for maintaining the web site.

Obviously you can't just go arbitrarily changing the web site without
reference to anyone..



-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151007/04f1f56d/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Oct  7 02:41:53 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 7 Oct 2015 01:41:53 -0700
Subject: [Twisted-Python] Call for volunteers: fundraising
In-Reply-To: <CAKmUHjZzdJnBm3DBw-OfbpsjJRSa6CdT3snpzWB5dLVtec+osA@mail.gmail.com>
References: <CAKmUHjZzdJnBm3DBw-OfbpsjJRSa6CdT3snpzWB5dLVtec+osA@mail.gmail.com>
Message-ID: <C0297900-E176-4AF5-B268-4F377CA63AAC@twistedmatrix.com>


> On Oct 7, 2015, at 1:40 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> Looking at the twisted web site, it might be useful to make changes to encourage more people in - a never ending source of discussion no doubt :)
> 
> Also we could display the sponsor logos higher up and offer more visibility.
> 
> This raises the question as to whether anyone has overall responsibility for maintaining the web site.
> 
> Obviously you can't just go arbitrarily changing the web site without reference to anyone..

I can give you wiki edit permissions if you would you like, and you can make a new front page at a different location. What's your username?

-glyph





From twisted-python at 2xlp.com  Wed Oct  7 12:18:37 2015
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 7 Oct 2015 14:18:37 -0400
Subject: [Twisted-Python] txmongo vs. pymongo + callInThread
In-Reply-To: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>
References: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>
Message-ID: <99FF47AC-3082-4270-A3F0-4910AD0A348E@2xlp.com>


On Dec 21, 2014, at 4:05 PM, Clayton Daley wrote:

> Are there any major disadvantages of using pymongo with callInThread instead of txmongo?  I'd like to take advantage of some newer features in pymongo (unfortunately not available in txmongo) and it's certainly easier to maintain feature parity using callInThread.

I know thread is a bit old, but I'm wondering if the OP ended up using callInThread or not , and if there were any issues.

I started working on a txmongo solution to offload some storage, but then realized I was already in a deferred thread (to handle blocking operations) and i probably should be using pymongo.




From johnaherne at rocs.co.uk  Thu Oct  8 00:02:42 2015
From: johnaherne at rocs.co.uk (John Aherne)
Date: Thu, 8 Oct 2015 07:02:42 +0100
Subject: [Twisted-Python] Call for volunteers: fundraising
In-Reply-To: <C0297900-E176-4AF5-B268-4F377CA63AAC@twistedmatrix.com>
References: <CAKmUHjZzdJnBm3DBw-OfbpsjJRSa6CdT3snpzWB5dLVtec+osA@mail.gmail.com>
 <C0297900-E176-4AF5-B268-4F377CA63AAC@twistedmatrix.com>
Message-ID: <CAKmUHjYuVd282_4j9Mcz=6uwof4dyUn-ppFsW1c0eXrSURErhQ@mail.gmail.com>

OK.

username johnrocs

I'll wait and see what Bret wants to do and see where we go from there.

John

On Wed, Oct 7, 2015 at 9:41 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> > On Oct 7, 2015, at 1:40 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> >
> > Looking at the twisted web site, it might be useful to make changes to
> encourage more people in - a never ending source of discussion no doubt :)
> >
> > Also we could display the sponsor logos higher up and offer more
> visibility.
> >
> > This raises the question as to whether anyone has overall responsibility
> for maintaining the web site.
> >
> > Obviously you can't just go arbitrarily changing the web site without
> reference to anyone..
>
> I can give you wiki edit permissions if you would you like, and you can
> make a new front page at a different location. What's your username?
>
> -glyph
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151008/c19a1dff/attachment-0002.html>

From psi29a at gmail.com  Thu Oct  8 04:19:54 2015
From: psi29a at gmail.com (bret curtis)
Date: Thu, 8 Oct 2015 12:19:54 +0200
Subject: [Twisted-Python] txmongo vs. pymongo + callInThread
In-Reply-To: <99FF47AC-3082-4270-A3F0-4910AD0A348E@2xlp.com>
References: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>
 <99FF47AC-3082-4270-A3F0-4910AD0A348E@2xlp.com>
Message-ID: <CA+LhZ9--xO9QowjWxxGEyhD2kNpoC4Hm=Ys5gtr7Qa-COS=-sA@mail.gmail.com>

We're not sure about what OP has done, but if there is ever anything
lacking in TxMongo... please open an issue/ticket with us over at:
https://github.com/twisted/txmongo

Cheers,
Bret

On Wed, Oct 7, 2015 at 8:18 PM, Jonathan Vanasco <twisted-python at 2xlp.com>
wrote:

>
> On Dec 21, 2014, at 4:05 PM, Clayton Daley wrote:
>
> > Are there any major disadvantages of using pymongo with callInThread
> instead of txmongo?  I'd like to take advantage of some newer features in
> pymongo (unfortunately not available in txmongo) and it's certainly easier
> to maintain feature parity using callInThread.
>
> I know thread is a bit old, but I'm wondering if the OP ended up using
> callInThread or not , and if there were any issues.
>
> I started working on a txmongo solution to offload some storage, but then
> realized I was already in a deferred thread (to handle blocking operations)
> and i probably should be using pymongo.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151008/0be585a0/attachment-0002.html>

From itamar at itamarst.org  Thu Oct  8 07:04:38 2015
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 08 Oct 2015 09:04:38 -0400
Subject: [Twisted-Python] ANN: Eliot 0.9,
 the logging system with causality - now with journald support
Message-ID: <438cc689e6888b889e14319ebb3a2f0d@itamarst.org>

 
Eliot 0.9 is out, with a new utility for pretty-printing log messages
and native journald support [1]. You can now route Eliot logs to
journald and when an error occurs easily find all logged actions that
led up to that particular error, as opposed to most logging systems
where this would involve reading all the logs and figuring out which
ones apply and which to ignore. 

Most logging systems can tell you what happened; Eliot tells you _why_
it happened:

$ python linkcheck.py | eliot-tree
4c42a789-76f5-4f0b-b154-3dd0e3041445
+-- check_links at 1/started
    `-- urls: [u'http://google.com', u'http://nosuchurl']
    +-- download at 2,1/started
        `-- url: http://google.com
        +-- download at 2,2/succeeded
    +-- download at 3,1/started
        `-- url: http://nosuchurl
        +-- download at 3,2/failed
            |-- exception: requests.exceptions.ConnectionError
            |-- reason: ('Conn aborted', gaierror(-2, 'Name unknown'))
    +-- check_links at 4/failed
        |-- exception: exceptions.ValueError
        |-- reason: ('Conn aborted.', gaierror(-2, 'Name unknown'))

And here's the code that generated these logs (eliot-tree [2] was used
to render the output):

import sys
from eliot import start_action, to_file
import requests
to_file(sys.stdout)

def check_links(urls):
    with start_action(action_type="check_links", urls=urls):
        for url in urls:
            try:
                with start_action(action_type="download", url=url):
                    response = requests.get(url)
                    response.raise_for_status()
            except Exception as e:
                raise ValueError(str(e))

check_links(["http://google.com"], ["http://nosuchurl"])

Interested? Read more at https://eliot.readthedocs.org/.

Eliot is released under the Apache License 2 by ClusterHQ [3], the
Container Data People. We're hiring! [4]
 

Links:
------
[1] http://eliot.readthedocs.org/en/0.9.0/journald.html
[2] https://warehouse.python.org/project/eliot-tree/
[3] https://clusterhq.com
[4] https://clusterhq.com/careers/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151008/4807c099/attachment-0002.html>

From twisted-python at 2xlp.com  Thu Oct  8 11:23:41 2015
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Thu, 8 Oct 2015 13:23:41 -0400
Subject: [Twisted-Python] txmongo vs. pymongo + callInThread
In-Reply-To: <CA+LhZ9--xO9QowjWxxGEyhD2kNpoC4Hm=Ys5gtr7Qa-COS=-sA@mail.gmail.com>
References: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>
 <99FF47AC-3082-4270-A3F0-4910AD0A348E@2xlp.com>
 <CA+LhZ9--xO9QowjWxxGEyhD2kNpoC4Hm=Ys5gtr7Qa-COS=-sA@mail.gmail.com>
Message-ID: <0B8EB5B2-7C53-457B-8631-046F715452D0@2xlp.com>


On Oct 8, 2015, at 6:19 AM, bret curtis wrote:

> We're not sure about what OP has done, but if there is ever anything lacking in TxMongo... please open an issue/ticket with us over at:
> https://github.com/twisted/txmongo

Thanks for the reply!   I actually did open a few lowball tickets on TxMongo yesterday -- the package doesn't specify the minimum required versions for mongo or twisted.  

I did some tests yesterday on PyMongo, and it seems like using it in deferToThread is safe.  I also ran some simulations on staging under a heavy load; no exceptions, everything passes, data is stored correctly.   The current pymongo "client" appears to be a threadsafe connection pool, and I can just grab a connection from it when needed in a thread.  Woo Hoo!

If the next version of this tool stays in Python, we'll definitely need to use TxMongo.  In the current design, we're already deferred to a thread and would have to restructure too much to use TxMongo.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151008/70ae2ee0/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Oct  8 17:38:23 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 8 Oct 2015 16:38:23 -0700
Subject: [Twisted-Python] ANN: Eliot 0.9,
	the logging system with causality - now with journald support
In-Reply-To: <438cc689e6888b889e14319ebb3a2f0d@itamarst.org>
References: <438cc689e6888b889e14319ebb3a2f0d@itamarst.org>
Message-ID: <2A292169-E357-452D-AFD6-6715425414F8@twistedmatrix.com>

> On Oct 8, 2015, at 6:04 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> 
> Eliot 0.9 is out, with a new utility for pretty-printing log messages and native journald support <http://eliot.readthedocs.org/en/0.9.0/journald.html>. You can now route Eliot logs to journald and when an error occurs easily find all logged actions that led up to that particular error, as opposed to most logging systems where this would involve reading all the logs and figuring out which ones apply and which to ignore.
>  
> Most logging systems can tell you what happened; Eliot tells you why it happened:

Cool, this looks awesome Itamar, thanks for letting us know!

Does Eliot make use of the new logging system at all?  If not, is there anything that might make Eliot's Twisted backend easier to maintain if we added it?  Just kind of curious about adoption of those new APIs in the world of logging...

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151008/fbb4a2a1/attachment-0002.html>

From exarkun at twistedmatrix.com  Thu Oct  8 18:47:30 2015
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 09 Oct 2015 00:47:30 -0000
Subject: [Twisted-Python] ANN: Eliot 0.9,
 the logging system with causality - now with journald support
In-Reply-To: <2A292169-E357-452D-AFD6-6715425414F8@twistedmatrix.com>
References: <438cc689e6888b889e14319ebb3a2f0d@itamarst.org>
 <2A292169-E357-452D-AFD6-6715425414F8@twistedmatrix.com>
Message-ID: <20151009004730.7344.965043492.divmod.xquotient.10@top>

On 8 Oct, 11:38 pm, glyph at twistedmatrix.com wrote:
>>On Oct 8, 2015, at 6:04 AM, Itamar Turner-Trauring 
>><itamar at itamarst.org> wrote:
>>
>>Eliot 0.9 is out, with a new utility for pretty-printing log messages 
>>and native journald support 
>><http://eliot.readthedocs.org/en/0.9.0/journald.html>. You can now 
>>route Eliot logs to journald and when an error occurs easily find all 
>>logged actions that led up to that particular error, as opposed to 
>>most logging systems where this would involve reading all the logs and 
>>figuring out which ones apply and which to ignore.
>>
>>Most logging systems can tell you what happened; Eliot tells you why 
>>it happened:
>
>Cool, this looks awesome Itamar, thanks for letting us know!
>
>Does Eliot make use of the new logging system at all?  If not, is there 
>anything that might make Eliot's Twisted backend easier to maintain if 
>we added it?  Just kind of curious about adoption of those new APIs in 
>the world of logging...

As a user of Eliot and Twisted, an unpleasantness I commonly encounter 
is that the logs written by trial when running tests for code that uses 
Eliot for logging are a mish-mash of text messages and mangled Eliot 
logs.  The Eliot bits often get in the way of me reading the text part 
and the text parts and mangling ensure I can't use any Eliot tools to 
interpret the Eliot bits.

My understanding is that there aren't any existing hooks in Twisted to 
customize trial's logging which would allow this to be improved.

There is some related discussion (maybe more oriented towards a 
particular solution than a full description of the problem, though) on a 
ticket soon to be a couple years old:

  https://twistedmatrix.com/trac/ticket/6939

Jean-Paul



From glyph at twistedmatrix.com  Thu Oct  8 19:14:15 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 8 Oct 2015 18:14:15 -0700
Subject: [Twisted-Python] ANN: Eliot 0.9,
	the logging system with causality - now with journald support
In-Reply-To: <20151009004730.7344.965043492.divmod.xquotient.10@top>
References: <438cc689e6888b889e14319ebb3a2f0d@itamarst.org>
 <2A292169-E357-452D-AFD6-6715425414F8@twistedmatrix.com>
 <20151009004730.7344.965043492.divmod.xquotient.10@top>
Message-ID: <1AD54E8A-F9F0-4F8E-A93C-705808D4A8BE@twistedmatrix.com>


> On Oct 8, 2015, at 5:47 PM, exarkun at twistedmatrix.com wrote:
> 
> On 8 Oct, 11:38 pm, glyph at twistedmatrix.com wrote:
>>> On Oct 8, 2015, at 6:04 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
>>> 
>>> Eliot 0.9 is out, with a new utility for pretty-printing log messages and native journald support <http://eliot.readthedocs.org/en/0.9.0/journald.html>. You can now route Eliot logs to journald and when an error occurs easily find all logged actions that led up to that particular error, as opposed to most logging systems where this would involve reading all the logs and figuring out which ones apply and which to ignore.
>>> 
>>> Most logging systems can tell you what happened; Eliot tells you why it happened:
>> 
>> Cool, this looks awesome Itamar, thanks for letting us know!
>> 
>> Does Eliot make use of the new logging system at all?  If not, is there anything that might make Eliot's Twisted backend easier to maintain if we added it?  Just kind of curious about adoption of those new APIs in the world of logging...
> 
> As a user of Eliot and Twisted, an unpleasantness I commonly encounter is that the logs written by trial when running tests for code that uses Eliot for logging are a mish-mash of text messages and mangled Eliot logs.  The Eliot bits often get in the way of me reading the text part and the text parts and mangling ensure I can't use any Eliot tools to interpret the Eliot bits.
> 
> My understanding is that there aren't any existing hooks in Twisted to customize trial's logging which would allow this to be improved.
> 
> There is some related discussion (maybe more oriented towards a particular solution than a full description of the problem, though) on a ticket soon to be a couple years old:
> 
> https://twistedmatrix.com/trac/ticket/6939 <https://twistedmatrix.com/trac/ticket/6939>

I actually ran into a variant of this exact same issue recently; thank you for directing my attention to this ticket.

I agree that the log output should be customizable, but I'm curious: if the logs were just serialized as JSON by default everywhere, would that make it easier to make the Eliot tooling work well?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151008/47e5d688/attachment-0002.html>

From clayton.daley at gmail.com  Fri Oct  9 11:06:48 2015
From: clayton.daley at gmail.com (Clayton Daley)
Date: Fri, 9 Oct 2015 12:06:48 -0500
Subject: [Twisted-Python] txmongo vs. pymongo + callInThread
In-Reply-To: <0B8EB5B2-7C53-457B-8631-046F715452D0@2xlp.com>
References: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>
 <99FF47AC-3082-4270-A3F0-4910AD0A348E@2xlp.com>
 <CA+LhZ9--xO9QowjWxxGEyhD2kNpoC4Hm=Ys5gtr7Qa-COS=-sA@mail.gmail.com>
 <0B8EB5B2-7C53-457B-8631-046F715452D0@2xlp.com>
Message-ID: <CACKEAnWSxp6ScJqmVwnqd_cbfU7SZMG0AxAD0tCjPJiuOFfGRg@mail.gmail.com>

I (OP) was looking into these libraries/options as part of a side project
that's been delayed by real work.  I'm also relegating Mongo to a caching
layer after stumbling upon Sarah Mei's "Why You Should Never Use MongoDB"
and realizing I was going to have the exact same problems.

Clayton Daley

On Thu, Oct 8, 2015 at 12:23 PM, Jonathan Vanasco <twisted-python at 2xlp.com>
wrote:

>
> On Oct 8, 2015, at 6:19 AM, bret curtis wrote:
>
> We're not sure about what OP has done, but if there is ever anything
> lacking in TxMongo... please open an issue/ticket with us over at:
> https://github.com/twisted/txmongo
>
>
> Thanks for the reply!   I actually did open a few lowball tickets on
> TxMongo yesterday -- the package doesn't specify the minimum required
> versions for mongo or twisted.
>
> I did some tests yesterday on PyMongo, and it seems like using it in
> deferToThread is safe.  I also ran some simulations on staging under a
> heavy load; no exceptions, everything passes, data is stored correctly.
> The current pymongo "client" appears to be a threadsafe connection pool,
> and I can just grab a connection from it when needed in a thread.  Woo Hoo!
>
> If the next version of this tool stays in Python, we'll definitely need to
> use TxMongo.  In the current design, we're already deferred to a thread and
> would have to restructure too much to use TxMongo.
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151009/66e4122a/attachment-0002.html>

From twisted-python at 2xlp.com  Fri Oct  9 11:52:49 2015
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Fri, 9 Oct 2015 13:52:49 -0400
Subject: [Twisted-Python] txmongo vs. pymongo + callInThread
In-Reply-To: <CACKEAnWSxp6ScJqmVwnqd_cbfU7SZMG0AxAD0tCjPJiuOFfGRg@mail.gmail.com>
References: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>
 <99FF47AC-3082-4270-A3F0-4910AD0A348E@2xlp.com>
 <CA+LhZ9--xO9QowjWxxGEyhD2kNpoC4Hm=Ys5gtr7Qa-COS=-sA@mail.gmail.com>
 <0B8EB5B2-7C53-457B-8631-046F715452D0@2xlp.com>
 <CACKEAnWSxp6ScJqmVwnqd_cbfU7SZMG0AxAD0tCjPJiuOFfGRg@mail.gmail.com>
Message-ID: <4B4A9AB1-1C10-4585-A46B-3CA4853B5951@2xlp.com>


On Oct 9, 2015, at 1:06 PM, Clayton Daley wrote:
> I (OP) was looking into these libraries/options as part of a side project that's been delayed by real work.  I'm also relegating Mongo to a caching layer after stumbling upon Sarah Mei's "Why You Should Never Use MongoDB" and realizing I was going to have the exact same problems
> 
Thanks for the update!  

FWIW, (sorry, non-twisted!)  if you want to avoid mongodb:

	1. We use redis for KV caching, and its really, really, really fast.
	2. Riak can use LevelDB as a backing store -- leveldb supports snappy compression on documents
	3. If you need the document search, i really like Elastic

I don't really like/trust mongodb from past experience myself.  I would normally not use it for anything other than a read-through cache... except for my current need.  We have a web spider and need to archive the snapshots.  WireTiger, which was bought by mongodb and integrated into the 3.x branch, is the only storage backend I've found that will do "bucket level compression".  I forget if it's applied on pages or blocks, but it will basically apply zlib or snappy compression onto sets of documents.  I looked for weeks on something that could do that, it was the only option.  We did a lot of storage tests on our typical data, and bucketed compression saves way more space than document compression or document compression using a seed.  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151009/b82757ba/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Oct  9 16:27:59 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 9 Oct 2015 15:27:59 -0700
Subject: [Twisted-Python] process changes causing buildbot failures on win7?
Message-ID: <3F1F9E57-76D8-4DE3-80AF-136403FFF7EF@twistedmatrix.com>

These failures:

===============================================================================
[FAIL]
Traceback (most recent call last):
  File "C:\Users\Build Slave\bot-glyph-6\windows7-64-py2.7-select\Twisted\twisted\internet\test\test_process.py", line 361, in test_systemCallUninterruptedByChildExit
    self.assertEqual(result, ["Foo\n"])
  File "C:\Users\Build Slave\bot-glyph-6\windows7-64-py2.7-select\Twisted\twisted\trial\_synctest.py", line 437, in assertEqual
    super(_Assertions, self).assertEqual(first, second, msg)
  File "C:\Python27\Lib\unittest\case.py", line 513, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Python27\Lib\unittest\case.py", line 742, in assertListEqual
    self.assertSequenceEqual(list1, list2, msg, seq_type=list)
  File "C:\Python27\Lib\unittest\case.py", line 724, in assertSequenceEqual
    self.fail(msg)
twisted.trial.unittest.FailTest: Lists differ: [''] != ['Foo\n']

First differing element 0:

Foo


- ['']
+ ['Foo\n']

twisted.internet.test.test_process.ProcessTestsBuilder_IOCPReactorTests.test_systemCallUninterruptedByChildExit
twisted.internet.test.test_process.ProcessTestsBuilder_SelectReactorTests.test_systemCallUninterruptedByChildExit
twisted.internet.test.test_process.ProcessTestsBuilder_Win32ReactorTests.test_systemCallUninterruptedByChildExit

have started happening on the buildbot on trunk: https://buildbot.twistedmatrix.com/builders/windows7-64-py2.7/builds/5215/steps/select/logs/problems

soon after this change: http://twistedmatrix.com/trac/changeset/45725

Unfortunately the buildbot was in a kind of unrelated bad state when it landed, and the configuration is a bit different now, so I'm not sure if this is a regression or a configuration error.  But given that the change was about processes, and the failure is in the process test, I thought it might bear some investigation...

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151009/ff1ad4bd/attachment-0002.html>

From hawkowl at atleastfornow.net  Fri Oct  9 21:36:21 2015
From: hawkowl at atleastfornow.net (Hawkie)
Date: Sat, 10 Oct 2015 11:36:21 +0800
Subject: [Twisted-Python] process changes causing buildbot failures on
 win7?
In-Reply-To: <3F1F9E57-76D8-4DE3-80AF-136403FFF7EF@twistedmatrix.com>
Message-ID: <2d3ae655-f60c-42df-b42e-bd86a4988b36@email.android.com>

It's because the Windows tests (that one) can't cope with spaces in the exe name, and now it's in a virtual env, that's popped up. 

The Python 3.5 branch has a fix for this, as the Windows 3.5 builder was the first to show this problem. 

-hawkie

On 10 Oct 2015 06:27, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
> These failures:
>
>> ===============================================================================
>>
>> [FAIL]
>>
>> Traceback (most recent call last):
>>
>>   File "C:\Users\Build Slave\bot-glyph-6\windows7-64-py2.7-select\Twisted\twisted\internet\test\test_process.py", line 361, in test_systemCallUninterruptedByChildExit
>>
>>     self.assertEqual(result, ["Foo\n"])
>>
>>   File "C:\Users\Build Slave\bot-glyph-6\windows7-64-py2.7-select\Twisted\twisted\trial\_synctest.py", line 437, in assertEqual
>>
>>     super(_Assertions, self).assertEqual(first, second, msg)
>>
>>   File "C:\Python27\Lib\unittest\case.py", line 513, in assertEqual
>>
>>     assertion_func(first, second, msg=msg)
>>
>>   File "C:\Python27\Lib\unittest\case.py", line 742, in assertListEqual
>>
>>     self.assertSequenceEqual(list1, list2, msg, seq_type=list)
>>
>>   File "C:\Python27\Lib\unittest\case.py", line 724, in assertSequenceEqual
>>
>>     self.fail(msg)
>>
>> twisted.trial.unittest.FailTest: Lists differ: [''] != ['Foo\n']
>>
>>
>>
>> First differing element 0:
>>
>>
>>
>> Foo
>>
>>
>>
>>
>>
>> - ['']
>>
>> + ['Foo\n']
>>
>>
>>
>> twisted.internet.test.test_process.ProcessTestsBuilder_IOCPReactorTests.test_systemCallUninterruptedByChildExit
>>
>> twisted.internet.test.test_process.ProcessTestsBuilder_SelectReactorTests.test_systemCallUninterruptedByChildExit
>>
>> twisted.internet.test.test_process.ProcessTestsBuilder_Win32ReactorTests.test_systemCallUninterruptedByChildExit
>>
>>
> have started happening on the buildbot on trunk: https://buildbot.twistedmatrix.com/builders/windows7-64-py2.7/builds/5215/steps/select/logs/problems
>
> soon after this change: http://twistedmatrix.com/trac/changeset/45725
>
> Unfortunately the buildbot was in a kind of unrelated bad state when it landed, and the configuration is a bit different now, so I'm not sure if this is a regression or a configuration error.  But given that the change was about processes, and the failure is in the process test, I thought it might bear some investigation...
>
> -glyph

From glyph at twistedmatrix.com  Sat Oct 10 02:44:49 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 10 Oct 2015 01:44:49 -0700
Subject: [Twisted-Python] process changes causing buildbot failures on
	win7?
In-Reply-To: <2d3ae655-f60c-42df-b42e-bd86a4988b36@email.android.com>
References: <2d3ae655-f60c-42df-b42e-bd86a4988b36@email.android.com>
Message-ID: <251ED241-209B-4D90-815A-E04EABFE4675@twistedmatrix.com>

Aaaaand, it's fixed :)

https://twistedmatrix.com/trac/ticket/8046#comment:4

Thanks!

-glyph

> On Oct 9, 2015, at 8:36 PM, Hawkie <hawkowl at atleastfornow.net> wrote:
> 
> It's because the Windows tests (that one) can't cope with spaces in the exe name, and now it's in a virtual env, that's popped up. 
> 
> The Python 3.5 branch has a fix for this, as the Windows 3.5 builder was the first to show this problem. 
> 
> -hawkie
> 
> On 10 Oct 2015 06:27, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>> 
>> These failures:
>> 
>>> ===============================================================================
>>> 
>>> [FAIL]
>>> 
>>> Traceback (most recent call last):
>>> 
>>>  File "C:\Users\Build Slave\bot-glyph-6\windows7-64-py2.7-select\Twisted\twisted\internet\test\test_process.py", line 361, in test_systemCallUninterruptedByChildExit
>>> 
>>>    self.assertEqual(result, ["Foo\n"])
>>> 
>>>  File "C:\Users\Build Slave\bot-glyph-6\windows7-64-py2.7-select\Twisted\twisted\trial\_synctest.py", line 437, in assertEqual
>>> 
>>>    super(_Assertions, self).assertEqual(first, second, msg)
>>> 
>>>  File "C:\Python27\Lib\unittest\case.py", line 513, in assertEqual
>>> 
>>>    assertion_func(first, second, msg=msg)
>>> 
>>>  File "C:\Python27\Lib\unittest\case.py", line 742, in assertListEqual
>>> 
>>>    self.assertSequenceEqual(list1, list2, msg, seq_type=list)
>>> 
>>>  File "C:\Python27\Lib\unittest\case.py", line 724, in assertSequenceEqual
>>> 
>>>    self.fail(msg)
>>> 
>>> twisted.trial.unittest.FailTest: Lists differ: [''] != ['Foo\n']
>>> 
>>> 
>>> 
>>> First differing element 0:
>>> 
>>> 
>>> 
>>> Foo
>>> 
>>> 
>>> 
>>> 
>>> 
>>> - ['']
>>> 
>>> + ['Foo\n']
>>> 
>>> 
>>> 
>>> twisted.internet.test.test_process.ProcessTestsBuilder_IOCPReactorTests.test_systemCallUninterruptedByChildExit
>>> 
>>> twisted.internet.test.test_process.ProcessTestsBuilder_SelectReactorTests.test_systemCallUninterruptedByChildExit
>>> 
>>> twisted.internet.test.test_process.ProcessTestsBuilder_Win32ReactorTests.test_systemCallUninterruptedByChildExit
>>> 
>>> 
>> have started happening on the buildbot on trunk: https://buildbot.twistedmatrix.com/builders/windows7-64-py2.7/builds/5215/steps/select/logs/problems
>> 
>> soon after this change: http://twistedmatrix.com/trac/changeset/45725
>> 
>> Unfortunately the buildbot was in a kind of unrelated bad state when it landed, and the configuration is a bit different now, so I'm not sure if this is a regression or a configuration error.  But given that the change was about processes, and the failure is in the process test, I thought it might bear some investigation...
>> 
>> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From itamar at itamarst.org  Sat Oct 10 07:44:12 2015
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sat, 10 Oct 2015 09:44:12 -0400
Subject: [Twisted-Python] ANN: Eliot 0.9,
 the logging system with causality - now with journald support
In-Reply-To: <2A292169-E357-452D-AFD6-6715425414F8@twistedmatrix.com>
References: <438cc689e6888b889e14319ebb3a2f0d@itamarst.org>
 <2A292169-E357-452D-AFD6-6715425414F8@twistedmatrix.com>
Message-ID: <4887f7df73c1111a8cbb21a78cd30bd1@itamarst.org>

 

On 2015-10-08 19:38, Glyph Lefkowitz wrote: 

> Does Eliot make use of the new logging system at all?  If not, is there anything that might make Eliot's Twisted backend easier to maintain if we added it?  Just kind of curious about adoption of those new APIs in the world of logging...

For Flocker we have a Twisted->Eliot gateway based on the old logging
API. Eventually that'll get moved into Eliot and I guess at that point
it'd make sense to switch to new API but haven't really looked at it.
Might be able to get structured info at that point which'd be nice. 

I should steal some ideas from the new system, but at this point I
consider anything that doesn't log actions as legacy logging so I don't
personally write anything that *emits* logs with the new Twisted API. 
  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151010/7b840327/attachment-0002.html>

From psi29a at gmail.com  Mon Oct 12 01:51:36 2015
From: psi29a at gmail.com (bret curtis)
Date: Mon, 12 Oct 2015 09:51:36 +0200
Subject: [Twisted-Python] txmongo vs. pymongo + callInThread
In-Reply-To: <4B4A9AB1-1C10-4585-A46B-3CA4853B5951@2xlp.com>
References: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>
 <99FF47AC-3082-4270-A3F0-4910AD0A348E@2xlp.com>
 <CA+LhZ9--xO9QowjWxxGEyhD2kNpoC4Hm=Ys5gtr7Qa-COS=-sA@mail.gmail.com>
 <0B8EB5B2-7C53-457B-8631-046F715452D0@2xlp.com>
 <CACKEAnWSxp6ScJqmVwnqd_cbfU7SZMG0AxAD0tCjPJiuOFfGRg@mail.gmail.com>
 <4B4A9AB1-1C10-4585-A46B-3CA4853B5951@2xlp.com>
Message-ID: <CA+LhZ9-k-PtusKhQJ40+pGDD7m-GUU6xOqsUzt-6otnO13rRzA@mail.gmail.com>

There is one thing that TxMongo does that PyMongo, Motor and the rest don't
do: handle deadlines and timeouts.

We're (HGST/WesternDigital) using MongoDB (with WiredTiger) in real-time
applications and one of our requirements was to honour application set
deadlines (or timeouts) on a per-call basis.

So if you are interested in that, we have it. :)

For those just tuning in...
Timeout: how many seconds the call is allowed run before raising an error.
Deadline: a time (unix timestamp) in the future that the call is allowed to
run before raising an error.

We take advantage of Twisted's native deferred cancellation mechanism in
addition to validation checks that no modifications happen to MongoDB when
a TimeExceeded is raised.

We've been very satisfied with how MongoDB has performed (post 3.0/WT)
along with TxMongo and Twisted.

Cheers,
Bret


On Fri, Oct 9, 2015 at 7:52 PM, Jonathan Vanasco <twisted-python at 2xlp.com>
wrote:

>
> On Oct 9, 2015, at 1:06 PM, Clayton Daley wrote:
>
> I (OP) was looking into these libraries/options as part of a side project
> that's been delayed by real work.  I'm also relegating Mongo to a caching
> layer after stumbling upon Sarah Mei's "Why You Should Never Use MongoDB"
> and realizing I was going to have the exact same problems
>
> Thanks for the update!
>
> FWIW, (sorry, non-twisted!)  if you want to avoid mongodb:
>
> 1. We use redis for KV caching, and its really, really, really fast.
> 2. Riak can use LevelDB as a backing store -- leveldb supports snappy
> compression on documents
> 3. If you need the document search, i really like Elastic
>
> I don't really like/trust mongodb from past experience myself.  I would
> normally not use it for anything other than a read-through cache... except
> for my current need.  We have a web spider and need to archive the
> snapshots.  WireTiger, which was bought by mongodb and integrated into the
> 3.x branch, is the only storage backend I've found that will do "bucket
> level compression".  I forget if it's applied on pages or blocks, but it
> will basically apply zlib or snappy compression onto sets of documents.  I
> looked for weeks on something that could do that, it was the only option.
> We did a lot of storage tests on our typical data, and bucketed compression
> saves way more space than document compression or document compression
> using a seed.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151012/3ca9db9e/attachment-0002.html>

From dynamicgl at gmail.com  Mon Oct 12 02:23:02 2015
From: dynamicgl at gmail.com (Gelin Yan)
Date: Mon, 12 Oct 2015 16:23:02 +0800
Subject: [Twisted-Python] txmongo vs. pymongo + callInThread
In-Reply-To: <CA+LhZ9-k-PtusKhQJ40+pGDD7m-GUU6xOqsUzt-6otnO13rRzA@mail.gmail.com>
References: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>
 <99FF47AC-3082-4270-A3F0-4910AD0A348E@2xlp.com>
 <CA+LhZ9--xO9QowjWxxGEyhD2kNpoC4Hm=Ys5gtr7Qa-COS=-sA@mail.gmail.com>
 <0B8EB5B2-7C53-457B-8631-046F715452D0@2xlp.com>
 <CACKEAnWSxp6ScJqmVwnqd_cbfU7SZMG0AxAD0tCjPJiuOFfGRg@mail.gmail.com>
 <4B4A9AB1-1C10-4585-A46B-3CA4853B5951@2xlp.com>
 <CA+LhZ9-k-PtusKhQJ40+pGDD7m-GUU6xOqsUzt-6otnO13rRzA@mail.gmail.com>
Message-ID: <CABkOF6SumBNdm4A_5mrpt0NnE+zprZKF67ciRtjapze5ym9gtA@mail.gmail.com>

On Mon, Oct 12, 2015 at 3:51 PM, bret curtis <psi29a at gmail.com> wrote:

> There is one thing that TxMongo does that PyMongo, Motor and the rest
> don't do: handle deadlines and timeouts.
>
> We're (HGST/WesternDigital) using MongoDB (with WiredTiger) in real-time
> applications and one of our requirements was to honour application set
> deadlines (or timeouts) on a per-call basis.
>
> So if you are interested in that, we have it. :)
>
> For those just tuning in...
> Timeout: how many seconds the call is allowed run before raising an error.
> Deadline: a time (unix timestamp) in the future that the call is allowed
> to run before raising an error.
>
> We take advantage of Twisted's native deferred cancellation mechanism in
> addition to validation checks that no modifications happen to MongoDB when
> a TimeExceeded is raised.
>
> We've been very satisfied with how MongoDB has performed (post 3.0/WT)
> along with TxMongo and Twisted.
>
> Cheers,
> Bret
>
>
  I have switched from pymongo to txmongo for about two months. I got at
least 2x faster on query. Despite of some minor issues which have been
fixed recently, I am very happy with it.

Regards

gelin yan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151012/adaae06a/attachment-0002.html>

From commercials24 at yahoo.de  Mon Oct 12 12:01:00 2015
From: commercials24 at yahoo.de (peter)
Date: Mon, 12 Oct 2015 20:01:00 +0200
Subject: [Twisted-Python] dcc, idea for file resume
Message-ID: <561BF55C.6060900@yahoo.de>

hi,


the way file resume is implemented in DccFileReceive requires to user to 
determine the file size manually and set _resumeOffset.
wouldnt it make sene to just kill the last few bytes of the file and 
resume it?

below is the current connectionMade method from:
http://twistedmatrix.com/trac/browser/tags/releases/twisted-15.4.0/twisted/words/protocols/irc.py#L3013


replace this line:
self.file.seek(self._resumeOffset)

with:
self.file.seek(-3,2)


which removes the last 3 bytes from the file end, 3 is just a guess.


def connectionMade(self):
         dst = path.abspath(path.join(self.destDir,self.filename))
         exists = path.exists(dst)
         if self.resume and exists:
             print "yes i want to resume and the file is there"
             # I have been told I want to resume, and a file already
             # exists - Here we go
             self.file = open(dst, 'rb+')
             self.file.seek(-3,2)
             self.file.truncate()
             log.msg("Attempting to resume %s - starting from %d bytes" %
                     (self.file, self.file.tell()))
         elif self.resume and not exists:
             raise OSError(errno.ENOENT,
                           "You cannot resume writing to a file "
                           "that does not exist!",
                           dst)
         elif self.overwrite or not exists:
             self.file = open(dst, 'wb')
         else:
             raise OSError(errno.EEXIST,
                           "There's a file in the way.  "
                           "Perhaps that's why you cannot open it.",
                           dst)




From glyph at twistedmatrix.com  Mon Oct 12 17:49:39 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 12 Oct 2015 16:49:39 -0700
Subject: [Twisted-Python] txmongo vs. pymongo + callInThread
In-Reply-To: <CABkOF6SumBNdm4A_5mrpt0NnE+zprZKF67ciRtjapze5ym9gtA@mail.gmail.com>
References: <CACKEAnUqS8B6zkPRBMYG4+_NVcig1qkXZPt-xRpDXBEm1HyhcA@mail.gmail.com>
 <99FF47AC-3082-4270-A3F0-4910AD0A348E@2xlp.com>
 <CA+LhZ9--xO9QowjWxxGEyhD2kNpoC4Hm=Ys5gtr7Qa-COS=-sA@mail.gmail.com>
 <0B8EB5B2-7C53-457B-8631-046F715452D0@2xlp.com>
 <CACKEAnWSxp6ScJqmVwnqd_cbfU7SZMG0AxAD0tCjPJiuOFfGRg@mail.gmail.com>
 <4B4A9AB1-1C10-4585-A46B-3CA4853B5951@2xlp.com>
 <CA+LhZ9-k-PtusKhQJ40+pGDD7m-GUU6xOqsUzt-6otnO13rRzA@mail.gmail.com>
 <CABkOF6SumBNdm4A_5mrpt0NnE+zprZKF67ciRtjapze5ym9gtA@mail.gmail.com>
Message-ID: <30A553DF-0F72-4BBB-B3C8-F0BD4A0B2F22@twistedmatrix.com>


> On Oct 12, 2015, at 1:23 AM, Gelin Yan <dynamicgl at gmail.com> wrote:
> 
>   I have switched from pymongo to txmongo for about two months. I got at least 2x faster on query. Despite of some minor issues which have been fixed recently, I am very happy with it. 

This is really cool to hear.  I try not to say "twisted will make everything faster" because speed is a complex question and a component like Twisted is rarely ever the one answer you need... but it's so nice when it just does :-D.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151012/c66b088b/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Oct 12 18:51:49 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 12 Oct 2015 17:51:49 -0700
Subject: [Twisted-Python] dcc, idea for file resume
In-Reply-To: <561BF55C.6060900@yahoo.de>
References: <561BF55C.6060900@yahoo.de>
Message-ID: <6EF32735-4EDC-4865-95BD-4635563BD05C@twistedmatrix.com>


> On Oct 12, 2015, at 11:01 AM, peter <commercials24 at yahoo.de> wrote:
> 
> hi,
> 
> 
> the way file resume is implemented in DccFileReceive requires to user to determine the file size manually and set _resumeOffset.
> wouldnt it make sene to just kill the last few bytes of the file and resume it?
> 
> below is the current connectionMade method from:
> http://twistedmatrix.com/trac/browser/tags/releases/twisted-15.4.0/twisted/words/protocols/irc.py#L3013 <http://twistedmatrix.com/trac/browser/tags/releases/twisted-15.4.0/twisted/words/protocols/irc.py#L3013>
> 
> 
> replace this line:
> self.file.seek(self._resumeOffset)
> 
> with:
> self.file.seek(-3,2)
> 
> 
> which removes the last 3 bytes from the file end, 3 is just a guess.

Why remove the last 3 bytes?  It seems like either the file's contents are valid or not; if they are, just trust everything that's there, if not, don't try to resume...

Generally though this does sound like a good change!  Don't make the user guess if we can just do the right thing for them.  Can you open a ticket?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151012/2eb29530/attachment-0002.html>

From hawkowl at atleastfornow.net  Mon Oct 12 19:33:42 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Tue, 13 Oct 2015 09:33:42 +0800
Subject: [Twisted-Python] Changes to Twisted's binary distribution
Message-ID: <4DF8DEC8-6EA9-4EE6-9808-D98C11088DE2@atleastfornow.net>

Hi everyone,

Just letting everyone know, the next release (Twisted 15.5) will not include MSI or EXE installers for Windows, only binary wheels, and installation through pip or from source dist will be the only supported method of installation. The exe/msi installers didn't work well (or at all?) for virtualenvs, and when we (eventually) start shipping binary wheels for OS X, it'll make everything more consistent.

Regards,

Amber "Hawkie" Brown
Twisted Release manager
GPG: https://keybase.io/hawkowl
hawkowl at atleastfornow.net


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151013/7c54c937/attachment.sig>

From rgacote at appropriatesolutions.com  Tue Oct 13 14:38:38 2015
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Tue, 13 Oct 2015 16:38:38 -0400
Subject: [Twisted-Python] [Twisted-web] Changes to Twisted's binary
	distribution
In-Reply-To: <4DF8DEC8-6EA9-4EE6-9808-D98C11088DE2@atleastfornow.net>
References: <4DF8DEC8-6EA9-4EE6-9808-D98C11088DE2@atleastfornow.net>
Message-ID: <CAG5tnzofDsbXEOAxmBd7-4iWK=N7emXYcha29PAUMOWSF4APhA@mail.gmail.com>

On Mon, Oct 12, 2015 at 9:33 PM, Amber "Hawkie" Brown <
hawkowl at atleastfornow.net> wrote:

> Just letting everyone know, the next release (Twisted 15.5) will not
> include MSI or EXE installers for Windows, only binary wheels, and
> installation through pip or from source dist will be the only supported
> method of installation. The exe/msi installers didn't work well (or at
> all?) for virtualenvs, and when we (eventually) start shipping binary
> wheels for OS X, it'll make everything more consistent.
>

This is tremendously welcome news. Congrats!


-- 
Raymond Cote, President
voice: +1.603.924.6079 email: rgacote at AppropriateSolutions.com skype:
ray.cote
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151013/1c41a690/attachment-0002.html>

From adi at roiban.ro  Fri Oct 16 05:07:58 2015
From: adi at roiban.ro (Adi Roiban)
Date: Fri, 16 Oct 2015 14:07:58 +0300
Subject: [Twisted-Python] Handling upstream patches
Message-ID: <CAFycZ9ckHHUnn+Rxd610+L-+qnvgekRgOgBsFjJWM=gSZ2oZSg@mail.gmail.com>

Hi,

I have received notification for the following LP/Ubuntu issues

https://bugs.launchpad.net/ubuntu/+source/twisted/+bug/1505748

https://bugs.launchpad.net/maas/+bug/1504971

------

I think that they are related to http://twistedmatrix.com/trac/ticket/7650

-------

As a Twisted committer do I need to care about LP / Ubuntu upstream patches?

Does Twisted has a follow-up process so that upstream patches are
applied in trunk?

Thanks!

-- 
Adi Roiban



From gavin at gromper.net  Fri Oct 16 07:23:01 2015
From: gavin at gromper.net (Gavin Panella)
Date: Fri, 16 Oct 2015 14:23:01 +0100
Subject: [Twisted-Python] Handling upstream patches
In-Reply-To: <CAFycZ9ckHHUnn+Rxd610+L-+qnvgekRgOgBsFjJWM=gSZ2oZSg@mail.gmail.com>
References: <CAFycZ9ckHHUnn+Rxd610+L-+qnvgekRgOgBsFjJWM=gSZ2oZSg@mail.gmail.com>
Message-ID: <CALL7chnumFgVRk00qKO7EAPv5jBmLLwXgqpqqhxtD4T5Y2gXww@mail.gmail.com>

On 16 October 2015 at 12:07, Adi Roiban <adi at roiban.ro> wrote:
> As a Twisted committer do I need to care about LP / Ubuntu upstream patches?
>
> Does Twisted has a follow-up process so that upstream patches are
> applied in trunk?

I think we (the MAAS team) should propose our patch for inclusion into Twisted.

https://code.launchpad.net/~jtv/maas/bug-1372767/+merge/235616 is the
original fix within MAAS, which monkey-patches
twisted.web.client.URI/_URI. This has the benefit of having tests
which the patch that made it into Ubuntu lacks.

I'll put together a patch that can be applied to Twisted proper (i.e.
the patch that has gone into Ubuntu, plus tests) and propose it.

Gavin.



From glyph at twistedmatrix.com  Fri Oct 16 10:50:37 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 16 Oct 2015 09:50:37 -0700
Subject: [Twisted-Python] Handling upstream patches
In-Reply-To: <CALL7chnumFgVRk00qKO7EAPv5jBmLLwXgqpqqhxtD4T5Y2gXww@mail.gmail.com>
References: <CAFycZ9ckHHUnn+Rxd610+L-+qnvgekRgOgBsFjJWM=gSZ2oZSg@mail.gmail.com>
 <CALL7chnumFgVRk00qKO7EAPv5jBmLLwXgqpqqhxtD4T5Y2gXww@mail.gmail.com>
Message-ID: <7F37A173-831E-4830-A044-BEAEC6BD0405@twistedmatrix.com>


> On Oct 16, 2015, at 6:23 AM, Gavin Panella <gavin at gromper.net> wrote:
> 
> On 16 October 2015 at 12:07, Adi Roiban <adi at roiban.ro> wrote:
>> As a Twisted committer do I need to care about LP / Ubuntu upstream patches?
>> 
>> Does Twisted has a follow-up process so that upstream patches are
>> applied in trunk?
> 
> I think we (the MAAS team) should propose our patch for inclusion into Twisted.
> 
> https://code.launchpad.net/~jtv/maas/bug-1372767/+merge/235616 is the
> original fix within MAAS, which monkey-patches
> twisted.web.client.URI/_URI. This has the benefit of having tests
> which the patch that made it into Ubuntu lacks.
> 
> I'll put together a patch that can be applied to Twisted proper (i.e.
> the patch that has gone into Ubuntu, plus tests) and propose it.

Generally speaking, we should wait for contributors to submit their patches to Twisted through the normal process and not go grabbing stuff from downstream.  Canonical's IP policy is weird, and it is not clear to me that a patch necessarily has to be MIT licensed to be accepted into Ubuntu's Twisted, since Ubuntu itself is a commercial work.

-glyph


From glyph at twistedmatrix.com  Sat Oct 17 14:52:11 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 17 Oct 2015 13:52:11 -0700
Subject: [Twisted-Python] too many spams
Message-ID: <FAC12A64-7920-40DB-99B8-C46C9722FEDF@twistedmatrix.com>

It seems like a lot of people have recently been having trouble with getting their comments rejected as spam.  Going through trac, I selected some random tickets and tried to re-train our bayesian filter.  In the course of doing so, I noticed that every single Conch-related ticket had a starting score of nearly 100% spam.  After repeatedly training 30 or 40 messages, it became clear that the training database was insistent upon Conch-related tokens being extremely spammy.  As a result, I've re-set the training database, which means we're starting from scratch.

Trac admins: when doing spam monitoring, remember that "delete as spam" means "selected messages are spam" and "delete as ham" means "selected messages are NOT spam".  It seems like someone (possibly me!) accidentally flagged a whole bunch of Conch-related messages as spam, and this was causing a lot of problems.

Thanks,

-glyph


From gavin at gromper.net  Sun Oct 18 07:10:34 2015
From: gavin at gromper.net (Gavin Panella)
Date: Sun, 18 Oct 2015 14:10:34 +0100
Subject: [Twisted-Python] Handling upstream patches
In-Reply-To: <7F37A173-831E-4830-A044-BEAEC6BD0405@twistedmatrix.com>
References: <CAFycZ9ckHHUnn+Rxd610+L-+qnvgekRgOgBsFjJWM=gSZ2oZSg@mail.gmail.com>
 <CALL7chnumFgVRk00qKO7EAPv5jBmLLwXgqpqqhxtD4T5Y2gXww@mail.gmail.com>
 <7F37A173-831E-4830-A044-BEAEC6BD0405@twistedmatrix.com>
Message-ID: <CALL7chmjS6GV+c0H=OcwZWKfnB8jdYOL1oNzscH-jNC3Rx1Sxw@mail.gmail.com>

On 16 October 2015 at 17:50, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
[...]
> Canonical's IP policy is weird, and it is not clear to me that a patch
> necessarily has to be MIT licensed to be accepted into Ubuntu's
> Twisted, since Ubuntu itself is a commercial work.

Instinctively I would assume that Ubuntu would reject patches that would
also be rejected by upstream on licensing grounds. It's in Ubuntu's and
Canonical's interest to contribute upstream, and meddling with licenses
would hamper that. The "weird" IP policy thing might be about things for
which Canonical is the upstream, but I honestly don't know much about
that and definitely cannot speak authoritatively.

To confirm, LaMont -- who submitted the patch under question into Ubuntu
-- did ask our team's management, and the answer was that Canonical has
no interest in keeping that patch from going upstream, under whatever
license applies to Twisted.

Gavin.



From adi at roiban.ro  Sun Oct 18 15:38:25 2015
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 19 Oct 2015 00:38:25 +0300
Subject: [Twisted-Python] osuosl-osx10.6 slave
Message-ID: <CAFycZ9d=Ckma6CacL+pNhKZPHppFSqf13btFk3dkqaxvcws6MQ@mail.gmail.com>

Hi,

I saw that the osuosl-osx10.6 slave no longer has attached builders.

Is that OK?

If yes, then do we still need this slave?

If we no longer need it maybe we should announce the guy from OSUOSL
to free up this system and remove it from our buildmaster.

Cheers,
-- 
Adi Roiban



From glyph at twistedmatrix.com  Sun Oct 18 15:47:25 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 18 Oct 2015 14:47:25 -0700
Subject: [Twisted-Python] Handling upstream patches
In-Reply-To: <CALL7chmjS6GV+c0H=OcwZWKfnB8jdYOL1oNzscH-jNC3Rx1Sxw@mail.gmail.com>
References: <CAFycZ9ckHHUnn+Rxd610+L-+qnvgekRgOgBsFjJWM=gSZ2oZSg@mail.gmail.com>
 <CALL7chnumFgVRk00qKO7EAPv5jBmLLwXgqpqqhxtD4T5Y2gXww@mail.gmail.com>
 <7F37A173-831E-4830-A044-BEAEC6BD0405@twistedmatrix.com>
 <CALL7chmjS6GV+c0H=OcwZWKfnB8jdYOL1oNzscH-jNC3Rx1Sxw@mail.gmail.com>
Message-ID: <92158287-D2DE-42AE-8D52-6D24FF0CB6EB@twistedmatrix.com>


> On Oct 18, 2015, at 6:10 AM, Gavin Panella <gavin at gromper.net> wrote:
> 
> On 16 October 2015 at 17:50, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> [...]
>> Canonical's IP policy is weird, and it is not clear to me that a patch
>> necessarily has to be MIT licensed to be accepted into Ubuntu's
>> Twisted, since Ubuntu itself is a commercial work.
> 
> Instinctively I would assume that Ubuntu would reject patches that would
> also be rejected by upstream on licensing grounds. It's in Ubuntu's and
> Canonical's interest to contribute upstream, and meddling with licenses
> would hamper that. The "weird" IP policy thing might be about things for
> which Canonical is the upstream, but I honestly don't know much about
> that and definitely cannot speak authoritatively.

It is not because I believe that Canonical would deliberately do something bizarre like making their version of Twisted actually be GPL3, but rather, that they make no guarantees to this effect (nor should they have to, the patches are in their system, not ours!).

> To confirm, LaMont -- who submitted the patch under question into Ubuntu
> -- did ask our team's management, and the answer was that Canonical has
> no interest in keeping that patch from going upstream, under whatever
> license applies to Twisted.


I'd still prefer that we just accept patches consistently through one mechanism.  Forgetting about the license question for a second, although today the review queue happens to be empty (!!!), a patch needs a champion willing to respond to review feedback almost as much as it needs to be written in the first place.  If the author doesn't have time to submit it, then it's unlikely they'll have time to respond to feedback and complete the process, which just makes more detritus in our issue tracker.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151018/2c22c983/attachment-0002.html>

From gavin at gromper.net  Mon Oct 19 04:22:31 2015
From: gavin at gromper.net (Gavin Panella)
Date: Mon, 19 Oct 2015 11:22:31 +0100
Subject: [Twisted-Python] Handling upstream patches
In-Reply-To: <92158287-D2DE-42AE-8D52-6D24FF0CB6EB@twistedmatrix.com>
References: <CAFycZ9ckHHUnn+Rxd610+L-+qnvgekRgOgBsFjJWM=gSZ2oZSg@mail.gmail.com>
 <CALL7chnumFgVRk00qKO7EAPv5jBmLLwXgqpqqhxtD4T5Y2gXww@mail.gmail.com>
 <7F37A173-831E-4830-A044-BEAEC6BD0405@twistedmatrix.com>
 <CALL7chmjS6GV+c0H=OcwZWKfnB8jdYOL1oNzscH-jNC3Rx1Sxw@mail.gmail.com>
 <92158287-D2DE-42AE-8D52-6D24FF0CB6EB@twistedmatrix.com>
Message-ID: <CALL7ch=BJBQGn-kP+pxqyuaE7ViT=hhvM6Emk9Jy_rZ0vXoVZA@mail.gmail.com>

On 18 October 2015 at 22:47, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
[...]
> I'd still prefer that we just accept patches consistently through one
> mechanism. Forgetting about the license question for a second,
> although today the review queue happens to be empty (!!!), a patch
> needs a champion willing to respond to review feedback almost as much
> as it needs to be written in the first place. If the author doesn't
> have time to submit it, then it's unlikely they'll have time to
> respond to feedback and complete the process, which just makes more
> detritus in our issue tracker.

I fully agree. We should have pushed this fix into Twisted a long time
ago. In the release-date-imminent maelstrom we unfortunately forgot
about it at the time, and only noticed it again while porting MAAS to
Python 3.

I have a patch for ticket #7650 ready which I'll put up for review when
Trac decides that it's not full of spam.

Gavin.



From glyph at twistedmatrix.com  Mon Oct 19 17:20:17 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 19 Oct 2015 16:20:17 -0700
Subject: [Twisted-Python] Handling upstream patches
In-Reply-To: <CALL7ch=BJBQGn-kP+pxqyuaE7ViT=hhvM6Emk9Jy_rZ0vXoVZA@mail.gmail.com>
References: <CAFycZ9ckHHUnn+Rxd610+L-+qnvgekRgOgBsFjJWM=gSZ2oZSg@mail.gmail.com>
 <CALL7chnumFgVRk00qKO7EAPv5jBmLLwXgqpqqhxtD4T5Y2gXww@mail.gmail.com>
 <7F37A173-831E-4830-A044-BEAEC6BD0405@twistedmatrix.com>
 <CALL7chmjS6GV+c0H=OcwZWKfnB8jdYOL1oNzscH-jNC3Rx1Sxw@mail.gmail.com>
 <92158287-D2DE-42AE-8D52-6D24FF0CB6EB@twistedmatrix.com>
 <CALL7ch=BJBQGn-kP+pxqyuaE7ViT=hhvM6Emk9Jy_rZ0vXoVZA@mail.gmail.com>
Message-ID: <FF0326FA-5E08-47C3-B355-A13652B6DFF1@twistedmatrix.com>


> On Oct 19, 2015, at 3:22 AM, Gavin Panella <gavin at gromper.net> wrote:
> 
> On 18 October 2015 at 22:47, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> [...]
>> I'd still prefer that we just accept patches consistently through one
>> mechanism. Forgetting about the license question for a second,
>> although today the review queue happens to be empty (!!!), a patch
>> needs a champion willing to respond to review feedback almost as much
>> as it needs to be written in the first place. If the author doesn't
>> have time to submit it, then it's unlikely they'll have time to
>> respond to feedback and complete the process, which just makes more
>> detritus in our issue tracker.
> 
> I fully agree. We should have pushed this fix into Twisted a long time
> ago. In the release-date-imminent maelstrom we unfortunately forgot
> about it at the time, and only noticed it again while porting MAAS to
> Python 3.
> 
> I have a patch for ticket #7650 ready which I'll put up for review when
> Trac decides that it's not full of spam.

The spam filter has been re-set, and I don't see any items in the monitoring queue.  Did you try to re-submit it recently and get denied?

-glyph





From gavin at gromper.net  Tue Oct 20 02:47:29 2015
From: gavin at gromper.net (Gavin Panella)
Date: Tue, 20 Oct 2015 09:47:29 +0100
Subject: [Twisted-Python] Handling upstream patches
In-Reply-To: <FF0326FA-5E08-47C3-B355-A13652B6DFF1@twistedmatrix.com>
References: <CAFycZ9ckHHUnn+Rxd610+L-+qnvgekRgOgBsFjJWM=gSZ2oZSg@mail.gmail.com>
 <CALL7chnumFgVRk00qKO7EAPv5jBmLLwXgqpqqhxtD4T5Y2gXww@mail.gmail.com>
 <7F37A173-831E-4830-A044-BEAEC6BD0405@twistedmatrix.com>
 <CALL7chmjS6GV+c0H=OcwZWKfnB8jdYOL1oNzscH-jNC3Rx1Sxw@mail.gmail.com>
 <92158287-D2DE-42AE-8D52-6D24FF0CB6EB@twistedmatrix.com>
 <CALL7ch=BJBQGn-kP+pxqyuaE7ViT=hhvM6Emk9Jy_rZ0vXoVZA@mail.gmail.com>
 <FF0326FA-5E08-47C3-B355-A13652B6DFF1@twistedmatrix.com>
Message-ID: <CALL7chkgOad=XfygYgHMWYKbK3tDW0Cef+K5XfjjEvz0SY2bgQ@mail.gmail.com>

On 20 October 2015 at 00:20, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> The spam filter has been re-set, and I don't see any items in the
> monitoring queue. Did you try to re-submit it recently and get denied?

I was denied the once and I didn't immediately retry. I resubmitted the
patch later in the day and it was accepted. I assumed that a kind person
had trained the filter in the meantime.

Gavin.



From vikas.c.kumar at oracle.com  Wed Oct 21 07:37:39 2015
From: vikas.c.kumar at oracle.com (Vikas)
Date: Wed, 21 Oct 2015 19:07:39 +0530
Subject: [Twisted-Python] Decorator @inlinecallbacks prohibiting memory
	profiling
Message-ID: <56279523.4080706@oracle.com>

Hi,

I am trying to instrument method: run() for memory profiling(I am using 
memory_profiler & guppy tools for this). All I need to do is decorate 
the run() with "profile" decorator and mention *start* and *end* of 
memory profiling.

@profile
def run():
     d = {}
     l = []
     hp = hpy()
     before = hp.heap()            => *start* memory profiling from here

     d["k1"] = 'val1'
     d["k2"] = 10
     count = 0
     while (count < 9):
         l.append(count)
         print 'The count is:', count
         count = count + 1
     print "Good bye!"
     after = hp.heap()         => *end* memory profiling here
     leftover = after - before

     print leftover
     del hp


So far works fine. But moment I introduce @inlineCallbacks before 
@profile(see below), I don't see memory getting profiled. Am I doing 
something wrong here?
@inlinecallbacks
@profile
def run():
     ....

Regards
Vikas


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151021/51d75f05/attachment-0002.html>

From commercials24 at yahoo.de  Wed Oct 21 10:31:08 2015
From: commercials24 at yahoo.de (peter)
Date: Wed, 21 Oct 2015 18:31:08 +0200
Subject: [Twisted-Python] dcc, idea for file resume
In-Reply-To: <6EF32735-4EDC-4865-95BD-4635563BD05C@twistedmatrix.com>
References: <561BF55C.6060900@yahoo.de>
 <6EF32735-4EDC-4865-95BD-4635563BD05C@twistedmatrix.com>
Message-ID: <5627BDCC.5070905@yahoo.de>

On 10/13/2015 02:51 AM, Glyph Lefkowitz wrote:
>
>> On Oct 12, 2015, at 11:01 AM, peter <commercials24 at yahoo.de 
>> <mailto:commercials24 at yahoo.de>> wrote:
>>
>> hi,
>>
>>
>> the way file resume is implemented in DccFileReceive requires to user 
>> to determine the file size manually and set _resumeOffset.
>> wouldnt it make sene to just kill the last few bytes of the file and 
>> resume it?
>>
>> below is the current connectionMade method from:
>> http://twistedmatrix.com/trac/browser/tags/releases/twisted-15.4.0/twisted/words/protocols/irc.py#L3013
>>
>>
>> replace this line:
>> self.file.seek(self._resumeOffset)
>>
>> with:
>> self.file.seek(-3,2)
>>
>>
>> which removes the last 3 bytes from the file end, 3 is just a guess.
>
> Why remove the last 3 bytes?  It seems like either the file's contents 
> are valid or not; if they are, just trust everything that's there, if 
> not, don't try to resume...
>
> Generally though this does sound like a good change!  Don't make the 
> user guess if we can just do the right thing for them.  Can you open a 
> ticket?
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



sorry for the late reply, missed the message.
sure i will.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151021/dcc447c0/attachment-0002.html>

From vikas.c.kumar at oracle.com  Wed Oct 21 23:34:59 2015
From: vikas.c.kumar at oracle.com (Vikas)
Date: Thu, 22 Oct 2015 11:04:59 +0530
Subject: [Twisted-Python] Decorator @inlinecallbacks prohibiting memory
 profiling
In-Reply-To: <56279523.4080706@oracle.com>
References: <56279523.4080706@oracle.com>
Message-ID: <56287583.5040204@oracle.com>

Ok this experiment works fine because it doesn't have any decorator & 
generator.
Here is the actual method (with @inlineCallback and generator) where I 
see method(my_daemon_fun) being profiled with @profile decorator is not 
being profiled.
I am doubting that *generator* or *inlineCallback* decorator is 
prohibiting the correct code from getting profiled.

To profile the code all I need to do is:
  STEP#1 ->  decorate the _monitor_daemons() with "profile" decorator #1
  STEP#2 ->  start memory profiling  
  STEP#3 ->*  *end  memory profiling

Something like this:

@profile                                               => STEP#1
@inlineCallbacks
def my_daemon_fun(self):
     """
     Monitor my daemons
     """
     if self.running == True:
         try:
hp = hpy() => STEP#2
before = hp.heap()
             yield self._lock.acquire()
             .....
             if ((x_running == False) or (b_running == False)):
                 log.error('Daemons are not running, restarting...')
                 yield self._restart_daemons()
         except:
             log.exception('Exception restarting daemons')
         finally:
             yield self._lock.release()
             reactor.callLater(MY_DAEMON_MONITOR_INTERVAL, 
self.my_daemon_fun)
after = hp.heap() => STEP#3
leftover = after - before


Now we run the script to call method: my_daemon_fun(). After running the 
script though we see memory profiling happening but the function being 
profiled is *not* the one we decorated with @profile:

Line #    Mem usage    Increment      Line Contents
1176     42.3 MiB      0.0 MiB       def unwindGenerator(*args, **kwargs):
1177     42.3 MiB      0.0 MiB           try:
1178     42.3 MiB      0.0 MiB               gen = f(*args, **kwargs)
1183     42.3 MiB      0.0 MiB           if not isinstance(gen, 
types.GeneratorType):
1187     42.3 MiB      0.0 MiB           return _inlineCallbacks(None, 
gen, Deferred())


I am investigating why the actual function(i.e. my_daemon_fun()) was not 
profiled? Meanwhile if you can help us here that would be great.

Regards
Vikas

On 21/10/15 7:07 pm, Vikas wrote:
> Hi,
>
> I am trying to instrument method: run() for memory profiling(I am 
> using memory_profiler & guppy tools for this). All I need to do is 
> decorate the run() with "profile" decorator and mention *start* and 
> *end* of memory profiling.
>
> @profile
> def run():
>     d = {}
>     l = []
>     hp = hpy()
>     before = hp.heap()            => *start* memory profiling from here
>
>     d["k1"] = 'val1'
>     d["k2"] = 10
>     count = 0
>     while (count < 9):
>         l.append(count)
>         print 'The count is:', count
>         count = count + 1
>     print "Good bye!"
>     after = hp.heap()         => *end* memory profiling here
>     leftover = after - before
>
>     print leftover
>     del hp
>
>
> So far works fine. But moment I introduce @inlineCallbacks before 
> @profile(see below), I don't see memory getting profiled. Am I doing 
> something wrong here?
> @inlinecallbacks
> @profile
> def run():
>     ....
>
> Regards
> Vikas
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151022/e9dbbcf6/attachment-0002.html>

From commercials24 at yahoo.de  Thu Oct 22 02:38:58 2015
From: commercials24 at yahoo.de (peter)
Date: Thu, 22 Oct 2015 10:38:58 +0200
Subject: [Twisted-Python] questions about deferreds and code structure
Message-ID: <5628A0A2.9070109@yahoo.de>

hi,


i would like todo a few operations for a bunch of irc servers, basically 
all thats done in main for a list of ips.
heres what i came up with (this does not contain the actual class that 
inherits from  irc.IRCClient code)


questions (i will refer to the pb.codehash.net for line numbers)
1) when not adding printError at the end of the code (line 101) i dont 
see error messages for operations in main.
why is that?

printError is also added on line 33 and 36. why wont they produce errors 
from main?



2) does this overall structure look like a good idea?
intention: connect to a bunch of servers and do stuff. but not in parrallel.


heres the code nicely formatted
https://pb.codehash.net/760c30b217964139be82930899ba4b49



def printResult(result):
     print result


def printError(failure):
     print "\tprintError()"
     print str(failure)



downloadFinished = False

def startNewDownload(unused):

     global downloadFinished

     new_data = get_some_bot()

     server = new_data["server"]
     xdccbot = new_data["xdccbot"]
     pack = new_data["pack"]
     channel = new_data["channel"]


     if not downloadFinished:
         point = TCP4ClientEndpoint(reactor, server, 6667)
         d = connectProtocol(point, XdccBot())
         d.addCallback(main, server, xdccbot, pack, channel)
         d.addErrback(printError)

         #if this succeeds, or if it fails. do the same: remove old bot 
from data and start with the next one
         d.addCallback(lambda r: maybeDeferred(remove_bot_from_data, 
xdccbot, server, new_data["filename"]))
         d.addErrback(printError, "inside main")

         d.addCallback(startNewDownload)
         d.addErrback(printError)


     else:

         print "we are done!"
     return d






@inlineCallbacks
def main(proto, server, xdccbot, pack, channel):
     print "main()"
     print "server, bot, pack", server, xdccbot, pack


     #this can backfire:
     #irc_unknwon: prefix, command, params Helheim.SceneP2P.net 
ERR_NOMOTD ['lalala12324', 'MOTD File is missing']
     print("Waiting for MOTD...")
     yield proto.motdReceived

     print("Querying...")
     isOnline = yield proto.isOnline(xdccbot)
     if isOnline:
         print(xdccbot, "is online!")
     else:
         print(xdccbot, "is *NOT* online!")


     joinChannel = yield proto.join_channel(channel)
     if joinChannel:
         print "we joined some creepy channel"
     else:
         print "joining didnt work out"



     print "sending message"
     try:
         lala = yield proto.msg_CTCP(xdccbot, pack)
         print("lala:", lala)
     except lazyBotException as e:
         print(e)
         #reactor.stop()


     #wait for download finish
     try:
         result = yield proto.downloadFinished
         print("result:", result)
     except Exception as e:
         print("finish:", e)


     print("end of code")





d = startNewDownload("lalalal")
d.addCallback(printResult)
d.addErrback(printError)

reactor.run()









From adi at roiban.ro  Sun Oct 25 02:34:15 2015
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 25 Oct 2015 10:34:15 +0200
Subject: [Twisted-Python] How to handle arguments with undocumented types
	and argument deprecation
Message-ID: <CAFycZ9e9VP05JUN8o3F7032-W8of_e5-2eQ00UMM0JFpSJevRg@mail.gmail.com>

Hi,

This message is based on https://twistedmatrix.com/trac/ticket/5911#comment:14

In twisted/web/http.py we have the addCookie method which has the
'max_age' argument.

In the current code, the max_age is used as just anything which can be
converted into a text.

cookie = cookie +"; Max-Age=%s" % max_age

The latest patch documents max_age as requiring an int and adds tests
for the addCookie method... so to handly Py3 support the code looks
like this:

cookie = cookie + b"; Max-Age=" + intToBytes(max_age)

-----------

Should this code continue to handle str/int/long ?

---------

Is there a way to deprecate a single argument from a method/function?

Since max_age does not comply with the coding convention, can we
deprecated max_age with support for str/int/log and create a new
maxAge argument which only supports bytes.


Thanks!

-- 
Adi Roiban



From snailcoder at 163.com  Sun Oct 25 05:04:52 2015
From: snailcoder at 163.com (Wang Yan)
Date: Sun, 25 Oct 2015 19:04:52 +0800 (CST)
Subject: [Twisted-Python] How to design REST API with Twisted?
Message-ID: <675af318.a4b6.1509eac2325.Coremail.snailcoder@163.com>

Hi,


I'm confused about how to design REST APIs with Twisted, especially when my app have to interact with MySQL. 


Is there any basic design patterns for this kind of situation?


Thanks!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151025/8325da70/attachment-0002.html>

From jonathan at stoppani.name  Sun Oct 25 05:54:14 2015
From: jonathan at stoppani.name (Jonathan Stoppani)
Date: Sun, 25 Oct 2015 12:54:14 +0100
Subject: [Twisted-Python] SNI callback with support for deferreds
Message-ID: <CAFzCN1sdwwLQ_yDsKTA+3ZPB_Cb0uMdTo-Za7Ot=qGcVg2ZZ2w@mail.gmail.com>

Hello,

A couple of days ago I asked on Stack Overflow about returning a deferred
from an SNI callback and have pyOpenSSL wait for it to fire before
continuing handling the request.

Thanks to some pointers by Gyph I've found a solution ("workaround") for my
problem, involving a fake TLSMemoryBIOProtocol to handle the client hello
until the SNI is received, firing the SNI callback, waiting for it to
callback and then re-feeding the resulting context to the real
TLSMemoryBIOProtocol.

The implementation of this solution is available at
https://gist.github.com/GaretJax/124c523a62ba48c9eec1, and I'd like to
contribute it back to Twisted, however, it has no unit tests and needs some
design decisions/validation.

I've opened a ticket to track it at
https://twistedmatrix.com/trac/ticket/8065. Real-life impediments
permitting, I'm willing to work on it and get the feature supported in
Twisted core.

Anyone willing to help me getting a proper patch?

Best,
Jonathan

P.S.: A big shout-out to Twisted for its excellent TLS support out of the
box. We got a straight A rating out of the box on ssl labs!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151025/335b7da7/attachment-0002.html>

From burak.arslan at arskom.com.tr  Sun Oct 25 06:13:58 2015
From: burak.arslan at arskom.com.tr (Burak Arslan)
Date: Sun, 25 Oct 2015 14:13:58 +0200
Subject: [Twisted-Python] How to design REST API with Twisted?
In-Reply-To: <675af318.a4b6.1509eac2325.Coremail.snailcoder@163.com>
References: <675af318.a4b6.1509eac2325.Coremail.snailcoder@163.com>
Message-ID: <562CC786.9080004@arskom.com.tr>

Hey!

On 10/25/15 13:04, Wang Yan wrote:
> Hi,
>
> I'm confused about how to design REST APIs with Twisted, especially
> when my app have to interact with MySQL. 
>
> Is there any basic design patterns for this kind of situation?

I do Spyne, and I think it's _fa-bu-lous_ for building any web API on
top of twisted.

It's a bit different from what you to with stock Twisted though. More
specifically, there's no NOT_DONE_YET. The client hangs as long as you
keep returning `Deferred`s. Once you return a non-deferred (and
hopefully something that's compatible with your designated return type)
that object is serialized using the `out_protocol` you pass to your
`Application` and the resulting byte stream is written to the outgoing
stream of your transport of choice. In case of a HTTP-based api, it's
passed to the `transport.write()` function of a `twisted.web.Resource`
instance, along with the outgoing headers that you set.

As for the MySQL part, I use SQLAlchemy exclusively from inside a
function called by deferToThread. Spyne integrates with SQLAlchemy as
well, so you can return directly what SQLA returns, be it objects or rows.

Here's a simple example:
https://github.com/arskom/spyne/blob/master/examples/twisted/resource.py

There's a boilerplate generator here: http://spyne.io/

I hope you find it useful. Any questions, people at spyne.io is also at
your service.

Best,
Burak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151025/384ca18c/attachment-0002.html>

From meejah at meejah.ca  Sun Oct 25 15:05:06 2015
From: meejah at meejah.ca (meejah)
Date: Mon, 26 Oct 2015 01:05:06 +0400
Subject: [Twisted-Python] txtorcon 0.14.0
In-Reply-To: <86wpvcbcon.fsf@atlantis.meejah.ca> (meejah@meejah.ca's message
 of "Sun, 27 Sep 2015 10:26:16 +0400")
References: <86wpvcbcon.fsf@atlantis.meejah.ca>
Message-ID: <86y4eq64n1.fsf@atlantis.meejah.ca>

meejah <meejah at meejah.ca> writes:

>  * add .is_built Deferred to txtorcon.Circuit that gets callback()'d
>  when the circuit becomes BUILT

This had a bug in it. I give you 0.14.1:

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

There was a subtle bug with the Circuit.is_built API introduced in
0.14.0, necessitating this release.

I've also changed the API (with backwards-compatibility for now) to a
method-call that returns a Deferred: Circuit.when_built()

You can download the release from PyPI or GitHub (or of course "pip
install txtorcon"):

   https://pypi.python.org/pypi/txtorcon/0.14.1
   https://github.com/meejah/txtorcon/releases/tag/v0.14.1

Releases are also available from the hidden service:

   http://timaq4ygg2iegci7.onion/txtorcon-0.14.1.tar.gz
   http://timaq4ygg2iegci7.onion/txtorcon-0.14.1.tar.gz.asc
   http://timaq4ygg2iegci7.onion/txtorcon-0.14.1-py2-none-any.whl
   http://timaq4ygg2iegci7.onion/txtorcon-0.14.1-py2-none-any.whl.asc

You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat <<EOF | sha256sum --check
073d303a2905b70a9434beb18a5d657ddcf9933422393f36e4b3a670d8d59619  txtorcon-0.14.1-py2-none-any.whl
446ceeb73ba775d990cafb9340b2f9475dc795914e515b574433f8e5b00b0e15  txtorcon-0.14.1.tar.gz
EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.12 (GNU/Linux)

iQEcBAEBAgAGBQJWLRH4AAoJEMJgKAMSgGmn4t0H/27gO87Hw7v+pgibgT78CjT4
5JSkVvcZzLRyKyarzKGrvtGHPvfrup76lJZG+f+jk9TDwcdhx4/r7LXQdRTPSNd4
q0+fLUE81skI9va8n7K1susRjwrIpoCVDElVY3C0t8D6ZoOTe3mMn1TcPxro3YO/
nl2H+jZojfSmDl75i1+Q3nTjCI8L0Rj/kGxLsu8e1z+tmXbxnh+/7N3K4BaDSWB5
9LsnjCSEhhsgR8hzcFrlbdEhZagBb4vXc9MarvKoC2dpmMO5hG/pCoWZWcby4sBB
z7OjNaCLOX6KhlqlHsABmK9UCyTpN2fnH29P1Klsyn7PmdSF09OagSaLNYnuLrA=
=Z8Jp
-----END PGP SIGNATURE-----




From hawkowl at atleastfornow.net  Sun Oct 25 18:48:07 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Mon, 26 Oct 2015 08:48:07 +0800
Subject: [Twisted-Python] Changing the Twisted Compatibility Policy
Message-ID: <F014B67C-1A19-445F-9723-6F862FF74849@atleastfornow.net>

Hi everyone,

As many know, one of the things that makes the Twisted project so unique is our conformance to our Compatibility Policy. This policy means that users of Twisted can freely upgrade between versions with all incompatibilities being warned about before causing code to break. However, for a while, one part of the compatibility policy has caused issues - what we do with code that has been deprecated for a long time, and at least the release +  2 & 1 year after.

The existing policy states:

"Removal should happen once the deprecated API becomes an additional maintenance burden. For example, if it makes implementation of a new feature more difficult, if it makes documentation of non-deprecated APIs more confusing, or if its unit tests become an undue burden on the continuous integration system. Removal should not be undertaken just to follow a timeline."

This makes the only reasonable cause for any code being removed from Twisted is if it is a maintenance burden, but does not take into account the effect that keeping large amounts of deprecated code has on new, existing, and future Twisted users. It does specify that it should be removed if it makes documentation of non-deprecated APIs confusing, but by its very existence, it makes what should be "best practice" more confusing -- especially if the deprecated API is "simpler" at first glance, but was deprecated because of vast underlying issues,

Discussions have come to the conclusion that the exact reverse of this policy should be instated:

"Removal of code should occur as soon as the deprecation grace period has ended."

The reason for this is that a leaner Twisted is a better Twisted -- we should strive to not break existing applications, but we have the deprecation policy in place to ensure that breakage is, if all goes to plan, never out of the blue. Less code surface means that Twisted is easier to learn for new users and Twisted-using projects onboarding new people, easier to use for established users with a clear best practice, and easier to maintain because the codebase is not a web of things we deprecated and then never removed. We believe this change benefits everyone.

This is also similar to the deprecation policy of another time-based releasing project, Django (https://docs.djangoproject.com/en/1.8/internals/release-process/#internal-release-deprecation-policy), where releases are every 9 months and code is *always* removed in Release where deprecated + 2, giving them a deprecation grace period of up to 1 and a half years.

If you have any opinions on this change, please let me know, and we'll take it all into account before changing the policy.

Twisted Regards,
Amber "Hawkie" Brown
Twisted Release Manager
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151026/1d106076/attachment.sig>

From rgacote at appropriatesolutions.com  Sun Oct 25 19:23:53 2015
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Sun, 25 Oct 2015 21:23:53 -0400
Subject: [Twisted-Python] [Twisted-web] Changing the Twisted
	Compatibility Policy
In-Reply-To: <F014B67C-1A19-445F-9723-6F862FF74849@atleastfornow.net>
References: <F014B67C-1A19-445F-9723-6F862FF74849@atleastfornow.net>
Message-ID: <CAG5tnzqAw98xQwCJ_rHJZA3Mzgo_9rE=cfgYWS398TukLWZWtw@mail.gmail.com>

This is a reasonable change.

I say that as someone who rarely tracks individual Twisted releases. We
typically upgrade client-deployed applications every three to five years
(at the moment, I’m working on upgrading several projects from 12.1 to
15.4).

For us, being able to easily track back through release notes to understand
why specific methods are no longer available is extremely important as our
upgrade cycle frequently exceeds the deprecation/removal timeframe. These
long update times work for us because our typical Twisted deploy is
embedded deep inside an environment and not exposed directly to public
hazards. As such, we’re not quite as sensitive to public attack vectors —
and our clients typically prefer long-term stable environments.
—Ray

On Sun, Oct 25, 2015 at 8:48 PM, Amber "Hawkie" Brown <
hawkowl at atleastfornow.net> wrote:

> Hi everyone,
>
> As many know, one of the things that makes the Twisted project so unique
> is our conformance to our Compatibility Policy. This policy means that
> users of Twisted can freely upgrade between versions with all
> incompatibilities being warned about before causing code to break. However,
> for a while, one part of the compatibility policy has caused issues - what
> we do with code that has been deprecated for a long time, and at least the
> release +  2 & 1 year after.
>
> The existing policy states:
>
> "Removal should happen once the deprecated API becomes an additional
> maintenance burden. For example, if it makes implementation of a new
> feature more difficult, if it makes documentation of non-deprecated APIs
> more confusing, or if its unit tests become an undue burden on the
> continuous integration system. Removal should not be undertaken just to
> follow a timeline."
>
> This makes the only reasonable cause for any code being removed from
> Twisted is if it is a maintenance burden, but does not take into account
> the effect that keeping large amounts of deprecated code has on new,
> existing, and future Twisted users. It does specify that it should be
> removed if it makes documentation of non-deprecated APIs confusing, but by
> its very existence, it makes what should be "best practice" more confusing
> -- especially if the deprecated API is "simpler" at first glance, but was
> deprecated because of vast underlying issues,
>
> Discussions have come to the conclusion that the exact reverse of this
> policy should be instated:
>
> "Removal of code should occur as soon as the deprecation grace period has
> ended."
>
> The reason for this is that a leaner Twisted is a better Twisted -- we
> should strive to not break existing applications, but we have the
> deprecation policy in place to ensure that breakage is, if all goes to
> plan, never out of the blue. Less code surface means that Twisted is easier
> to learn for new users and Twisted-using projects onboarding new people,
> easier to use for established users with a clear best practice, and easier
> to maintain because the codebase is not a web of things we deprecated and
> then never removed. We believe this change benefits everyone.
>
> This is also similar to the deprecation policy of another time-based
> releasing project, Django (
> https://docs.djangoproject.com/en/1.8/internals/release-process/#internal-release-deprecation-policy),
> where releases are every 9 months and code is *always* removed in Release
> where deprecated + 2, giving them a deprecation grace period of up to 1 and
> a half years.
>
> If you have any opinions on this change, please let me know, and we'll
> take it all into account before changing the policy.
>
> Twisted Regards,
> Amber "Hawkie" Brown
> Twisted Release Manager
>
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web
>
>


-- 
Raymond Cote, President
voice: +1.603.924.6079 email: rgacote at AppropriateSolutions.com skype:
ray.cote
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151025/09c559b9/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Oct 25 19:55:06 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 25 Oct 2015 18:55:06 -0700
Subject: [Twisted-Python] How to design REST API with Twisted?
In-Reply-To: <562CC786.9080004@arskom.com.tr>
References: <675af318.a4b6.1509eac2325.Coremail.snailcoder@163.com>
 <562CC786.9080004@arskom.com.tr>
Message-ID: <E91A3B87-2AB9-4DCB-B0AA-51152DABA22F@twistedmatrix.com>


> On Oct 25, 2015, at 5:13 AM, Burak Arslan <burak.arslan at arskom.com.tr> wrote:
> 
> It's a bit different from what you to with stock Twisted though. More specifically, there's no NOT_DONE_YET.

I should just mention that NOT_DONE_YET actually _predates_ Deferreds, and one glorious day, we will get rid of it :).  See for example https://tm.tl/288 <https://tm.tl/288>.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151025/7c04999b/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Oct 25 20:30:57 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 25 Oct 2015 19:30:57 -0700
Subject: [Twisted-Python] How to handle arguments with undocumented
	types and argument deprecation
In-Reply-To: <CAFycZ9e9VP05JUN8o3F7032-W8of_e5-2eQ00UMM0JFpSJevRg@mail.gmail.com>
References: <CAFycZ9e9VP05JUN8o3F7032-W8of_e5-2eQ00UMM0JFpSJevRg@mail.gmail.com>
Message-ID: <4A1135ED-F4B1-458A-98A6-E908BE95EC4C@twistedmatrix.com>


> On Oct 25, 2015, at 1:34 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> Is there a way to deprecate a single argument from a method/function?


Sometimes.

The idea with a deprecation is that you can remove something, emit a warning if it's used, then eventually remove it entirely, and get an error if it's used.  The trick with deprecating parameters is what happens when you get to "remove it entirely".

One of the features I'm looking forward to in Py3 is "keyword-only parameters".  If we had those then deprecating a parameter (as long as it's not part of a formal interface) would be easier.  As it is, there's a problem where you can have a function like this:

def foo(a, broken=None, c=None):
    ...

If you want to deprecate "broken", you have to ensure that callers who call 'foo' will get a deprecation warning if they pass 'broken' at all, to ensure that callers who do, for example:

foo(a, None, "something valid")

get a deprecation warning during the deprecation period.  Further, after the deprecation period, you need to get an error if you "pass broken", which doesn't exist any more.  Of course if you've removed it from the function signature, it will give you an error to pass it by keyword, but if you pass it positionally:

foo(a, "something valid for broken")

if you've skipped the deprecation period, the spirit of the policy is that you should get an exception here.  Normally this happens as a natural effect of the removal.  But in this case, if you've changed the signature of 'foo' to be

def foo(a, c=None):
    ...

then you have a problem where code that skips the deprecation period might appear to work and break in unpredictable ways later.  So when deprecating a parameter you have to be more careful than when deprecating a whole method or class.

Except, oops: addCookie() is part of a formal interface, IRequest.  Which means that if external users of Twisted are implementing IRequest, then they may keep accepting / requiring max_age in its old format.

So specifically in the case of max_age, I think we should just retrofit the code to handle str/int/long on py3, to reduce breakage.  At some point, we know we need a new, better IRequest, and we should ensure maxAge is better-specified on that interface.

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151025/b14c0ca8/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Oct 25 20:37:12 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 25 Oct 2015 19:37:12 -0700
Subject: [Twisted-Python] SNI callback with support for deferreds
In-Reply-To: <CAFzCN1sdwwLQ_yDsKTA+3ZPB_Cb0uMdTo-Za7Ot=qGcVg2ZZ2w@mail.gmail.com>
References: <CAFzCN1sdwwLQ_yDsKTA+3ZPB_Cb0uMdTo-Za7Ot=qGcVg2ZZ2w@mail.gmail.com>
Message-ID: <77ABF1F6-3A6E-4518-BD57-0D2021828209@twistedmatrix.com>


> On Oct 25, 2015, at 4:54 AM, Jonathan Stoppani <jonathan at stoppani.name> wrote:
> 
> Hello,
> 
> A couple of days ago I asked on Stack Overflow about returning a deferred from an SNI callback and have pyOpenSSL wait for it to fire before continuing handling the request.
> 
> Thanks to some pointers by Gyph I've found a solution ("workaround") for my problem, involving a fake TLSMemoryBIOProtocol to handle the client hello until the SNI is received, firing the SNI callback, waiting for it to callback and then re-feeding the resulting context to the real TLSMemoryBIOProtocol.

Really glad to hear that this worked.

> The implementation of this solution is available at https://gist.github.com/GaretJax/124c523a62ba48c9eec1 <https://gist.github.com/GaretJax/124c523a62ba48c9eec1>, and I'd like to contribute it back to Twisted, however, it has no unit tests and needs some design decisions/validation.

It also needs a serious overhaul on its indentation - something messed up happened to that code :).

> I've opened a ticket to track it at https://twistedmatrix.com/trac/ticket/8065 <https://twistedmatrix.com/trac/ticket/8065>. Real-life impediments permitting, I'm willing to work on it and get the feature supported in Twisted core.

Thanks!  We don't really support an SNI callback at all (that's purely in the pyOpenSSL layer) so this will be very good to have.

> Anyone willing to help me getting a proper patch?

What help do you need?  I will be happy to do reviews when it's readye. :)

> P.S.: A big shout-out to Twisted for its excellent TLS support out of the box. We got a straight A rating out of the box on ssl labs!

really glad to hear this!  I do plan to quote you on that :)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151025/9c2fac05/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Oct 25 21:34:44 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 25 Oct 2015 20:34:44 -0700
Subject: [Twisted-Python] [Twisted-web] Changing the Twisted
	Compatibility Policy
In-Reply-To: <F014B67C-1A19-445F-9723-6F862FF74849@atleastfornow.net>
References: <F014B67C-1A19-445F-9723-6F862FF74849@atleastfornow.net>
Message-ID: <167E1C3A-BB30-41B3-A1F9-D5C316BD6290@twistedmatrix.com>


> On Oct 25, 2015, at 5:48 PM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> Hi everyone,
> 
> As many know, one of the things that makes the Twisted project so unique is our conformance to our Compatibility Policy. This policy means that users of Twisted can freely upgrade between versions with all incompatibilities being warned about before causing code to break. However, for a while, one part of the compatibility policy has caused issues - what we do with code that has been deprecated for a long time, and at least the release +  2 & 1 year after.
> 
> The existing policy states:
> 
> "Removal should happen once the deprecated API becomes an additional maintenance burden. For example, if it makes implementation of a new feature more difficult, if it makes documentation of non-deprecated APIs more confusing, or if its unit tests become an undue burden on the continuous integration system. Removal should not be undertaken just to follow a timeline."
> 
> This makes the only reasonable cause for any code being removed from Twisted is if it is a maintenance burden, but does not take into account the effect that keeping large amounts of deprecated code has on new, existing, and future Twisted users. It does specify that it should be removed if it makes documentation of non-deprecated APIs confusing, but by its very existence, it makes what should be "best practice" more confusing -- especially if the deprecated API is "simpler" at first glance, but was deprecated because of vast underlying issues,
> 
> Discussions have come to the conclusion that the exact reverse of this policy should be instated:
> 
> "Removal of code should occur as soon as the deprecation grace period has ended."
> 
> The reason for this is that a leaner Twisted is a better Twisted -- we should strive to not break existing applications, but we have the deprecation policy in place to ensure that breakage is, if all goes to plan, never out of the blue. Less code surface means that Twisted is easier to learn for new users and Twisted-using projects onboarding new people, easier to use for established users with a clear best practice, and easier to maintain because the codebase is not a web of things we deprecated and then never removed. We believe this change benefits everyone.
> 
> This is also similar to the deprecation policy of another time-based releasing project, Django (https://docs.djangoproject.com/en/1.8/internals/release-process/#internal-release-deprecation-policy), where releases are every 9 months and code is *always* removed in Release where deprecated + 2, giving them a deprecation grace period of up to 1 and a half years.
> 
> If you have any opinions on this change, please let me know, and we'll take it all into account before changing the policy.

I am generally in favor, for the reasons that the other participants already said: removing things faster results in a cleaner codebase that's easier to figure out.

However, I feel like making "get rid of deprecated code faster" be the first thing we do to mitigate these costs might be putting the cart before the horse.  The costs of maintaining large piles of legacy API surface are definitely not trivial.  A few are:

Maintainers have to read and understand more code when maintaining a feature, regardless of whether that code ultimately impacts the code being modified.
Testing more code means longer test runs for everyone.  Older, deprecated code is more likely to have test cases that require the reactor to run, so in many cases it can also mean less reliable test runs.
Example code, in Twisted, in Twisted's documentation, and on other sites, may continue to refer to deprecated APIs.  Given that this appears to work, the transition takes longer because new users start using old APIs.
Twisted's users, both new and old, have to refer to API documentation that describes numerous different ways to do something, and deprecations are not clear.

For problems 1 and 2, there's nothing much we can do but delete the code itself.  However, for problems 3 and 4, there are two other solutions which I think that we should explore as well, and we should possibly try to get in place before more aggressively deleting the actual code.

For one thing, we currently do not fail our tests on, or even ratchet on, warnings.  If I turn on warnings (meaning "export PYTHONWARNINGS='all::DeprecationWarning'"), purely at test _startup_ I see these:

/Users/glyph/Projects/Twisted/twisted/internet/endpoints.py:29: DeprecationWarning: twisted.internet.interfaces.IStreamClientEndpointStringParser was deprecated in Twisted 14.0.0: This interface has been superseded by IStreamClientEndpointStringParserWithReactor.
  from twisted.internet.interfaces import (
/Users/glyph/Projects/Twisted/twisted/spread/jelly.py:92: DeprecationWarning: the sets module is deprecated
  import sets as _sets
/Users/glyph/Projects/Twisted/twisted/scripts/test/test_tap2deb.py:8: DeprecationWarning: tap2deb is deprecated since Twisted 15.2.
  from twisted.scripts import tap2deb
/Users/glyph/Projects/Twisted/twisted/scripts/test/test_tap2rpm.py:15: DeprecationWarning: tap2rpm is deprecated since Twisted 15.2.
  from twisted.scripts import tap2rpm
/Users/glyph/Projects/Twisted/twisted/words/test/test_msn.py:28: DeprecationWarning: twisted.words.protocols.msn was deprecated in Twisted 15.1.0: MSN has shutdown.
  from twisted.words.protocols import msn

not to mention the scads of additional warnings that our test suite spits out over the course of its run.  We really need to get rid of these warnings to be sure that it's even possible to actually remove the deprecated APIs, and to ensure that there's not something internal that they're really necessary for.

For another, we have no way to hide deprecated APIs in the API documentation.  If a new user is trying to figure out how to do something, if they're doing it during the deprecation period, they should not start out by using a deprecated API; yet, sometimes, if you look at the docs, that's what you'll find first.

Also, we haven't done a serious overhaul of our documentation in far too long, and we have no automated tooling to tell us if it's producing warnings or even tracebacks.

So, while I think we should start removing more deprecated APIs, I think it's important to address these deficiencies first, so that when we perform those removals we have a higher degree of confidence that we're not breaking our own documentation and breaking programs that users wrote last week and thought were working fine because they didn't notice the fine-print "deprecated" at the end of a docstring.  If we can't figure out how to get our own house in order in terms of keeping up with deprecations, it seems like we are likely to create unforseen problems for our users.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151025/1888d8bf/attachment-0002.html>

From jonathan at stoppani.name  Mon Oct 26 06:37:42 2015
From: jonathan at stoppani.name (Jonathan Stoppani)
Date: Mon, 26 Oct 2015 13:37:42 +0100
Subject: [Twisted-Python] SNI callback with support for deferreds
In-Reply-To: <77ABF1F6-3A6E-4518-BD57-0D2021828209@twistedmatrix.com>
References: <CAFzCN1sdwwLQ_yDsKTA+3ZPB_Cb0uMdTo-Za7Ot=qGcVg2ZZ2w@mail.gmail.com>
 <77ABF1F6-3A6E-4518-BD57-0D2021828209@twistedmatrix.com>
Message-ID: <CAFzCN1vkHRKM_JfKV5ivcr8E3BA8N-9CBiBVjgB0KdampaHihA@mail.gmail.com>

On Mon, Oct 26, 2015 at 3:37 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:
>
> The implementation of this solution is available at
> https://gist.github.com/GaretJax/124c523a62ba48c9eec1, and I'd like to
> contribute it back to Twisted, however, it has no unit tests and needs some
> design decisions/validation.
>
>
> It also needs a serious overhaul on its indentation - something messed up
> happened to that code :).
>

I don't get it, I see it all as PEP8 compliant (will need to adapt spacing
to Twisted's code standards, but that should be all).


> Anyone willing to help me getting a proper patch?
>
>
> What help do you need?  I will be happy to do reviews when it's readye. :)
>

Definitely a review. Even before that I would like to know if the approach
 as I implemented is ok design wise or if I it needs adaptations. Also, in
which module should the code live?
And then there is this:
https://gist.github.com/GaretJax/124c523a62ba48c9eec1#file-usage-py-L13-L19
(maybe testing will help finding out the exact cause of those symptoms).

P.S.: A big shout-out to Twisted for its excellent TLS support out of the
> box. We got a straight A rating out of the box on ssl labs!
>
>
> really glad to hear this!  I do plan to quote you on that :)
>

Feel free to! Maybe remove the "out of the box" repetition. :D
We will use it as edge load balancer and SSL terminator for
http://www.aldryn.com/. Currently we're using Hipache, but it does not
support SNI at all and is written in JS. :-(
We should deploy the new Twisted based implementation during the course of
this week.

Best,
Jonathan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151026/709da7a6/attachment-0002.html>

From twisted-python at 2xlp.com  Mon Oct 26 12:57:59 2015
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Mon, 26 Oct 2015 14:57:59 -0400
Subject: [Twisted-Python] [Twisted-web] Changing the Twisted
	Compatibility Policy
In-Reply-To: <167E1C3A-BB30-41B3-A1F9-D5C316BD6290@twistedmatrix.com>
References: <F014B67C-1A19-445F-9723-6F862FF74849@atleastfornow.net>
 <167E1C3A-BB30-41B3-A1F9-D5C316BD6290@twistedmatrix.com>
Message-ID: <3FE8FE6A-5DBA-4C0B-9BD4-47D03DF083B1@2xlp.com>


On Oct 25, 2015, at 11:34 PM, Glyph Lefkowitz wrote:

> For another, we have no way to hide deprecated APIs in the API documentation.  If a new user is trying to figure out how to do something, if they're doing it during the deprecation period, they should not start out by using a deprecated API; yet, sometimes, if you look at the docs, that's what you'll find first.

I've been bitten by this before.  I've also had issue with developers implementing a django-style upgrade/deprecation system **improperly** and creating a lot of nightmares for developers.   By "Improperly" I mean that some developers will arbitrarily pin dependencies to certain versions or narrow ranges, which ends up creating version conflicts or preventing installs.   

From a "non-core user" of twisted point of view, and someone likely to run into issues from this change... things that I have liked from other projects are:

1. Narrative & API docs that note when something is going to be deprecated **in the first line**.  

2. API docs that allow a reader to flip between versions.  (a la ReadTheDocs style)  If I end up on a link to /current docs and something is missing, I'd like to be able to flip back a few versions and read the deprecation info.  

3. Logged deprecation warnings.  IIRC, by default SqlAlchemy will log a deprecation warning the first 3 or 4x you call a function that is on it's way out.  Twisted can be very "fast" in logging, so these messages might be lost.  It might be nice to be able to pipe deprecation warnings into their own logger / output.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151026/fa5d5df9/attachment-0002.html>

From chriswwolfe at gmail.com  Mon Oct 26 14:52:58 2015
From: chriswwolfe at gmail.com (Chris Wolfe)
Date: Mon, 26 Oct 2015 15:52:58 -0500
Subject: [Twisted-Python] revisiting onboarding
In-Reply-To: <D37E57F4-B14F-4E15-8B24-0B53CA4EF716@twistedmatrix.com>
References: <00A8D2CB-A1A3-496F-8670-E9888990F3E6@twistedmatrix.com>
 <8761bcxxak.fsf@hermes.hocat.ca>
 <CAEKSqkuP5xjOy5Vdo4Giuj1HG5Xo6hvEAvBE88ZFCzniXvp1Uw@mail.gmail.com>
 <9DC27720-4877-466C-8148-2D5E5E1EA532@twistedmatrix.com>
 <CAEKSqksRBDowvEjUYZ6C7Y4QZsrzs_AsAT7+DvKieYyQ5b3vaw@mail.gmail.com>
 <64374D0B-3396-4B61-8DEC-82C9EDFB3EA3@twistedmatrix.com>
 <CAEKSqkuBomAwHxKBZV9NH__tjnVP5fGssuUyovkq5gE5okMJBw@mail.gmail.com>
 <D37E57F4-B14F-4E15-8B24-0B53CA4EF716@twistedmatrix.com>
Message-ID: <CAEKSqkuM10=7fN0FGyx-jRtUA+pEg=-3dHUBbs50xaa60bKrmA@mail.gmail.com>

On 2 February 2015 at 19:18, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:
[snip]
> Not all committers are actively involved in the project at all times, so
we should form a "committer committee"
> of people who are interested in evaluating candidates.  If you would like
to do that and you're already a committer,
> please contact me and I'll add you to the list.

It looks like this new process has stalled on the formation of the
committee to review new contributor requests. As of right now, the
committee has no members. :-)

This email is a call for volunteers. If you would like to serve on the
committee, please reply to this thread and state that you are interested in
serving on the committee. Once enough volunteers have signed up, new
contributor requests will be sent to the committee's mailing list.

Thanks!
-- 
Chris Wolfe / herrwolfe
chriswwolfe at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151026/e9fa31e5/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Oct 26 15:43:09 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 26 Oct 2015 14:43:09 -0700
Subject: [Twisted-Python] revisiting onboarding
In-Reply-To: <CAEKSqkuM10=7fN0FGyx-jRtUA+pEg=-3dHUBbs50xaa60bKrmA@mail.gmail.com>
References: <00A8D2CB-A1A3-496F-8670-E9888990F3E6@twistedmatrix.com>
 <8761bcxxak.fsf@hermes.hocat.ca>
 <CAEKSqkuP5xjOy5Vdo4Giuj1HG5Xo6hvEAvBE88ZFCzniXvp1Uw@mail.gmail.com>
 <9DC27720-4877-466C-8148-2D5E5E1EA532@twistedmatrix.com>
 <CAEKSqksRBDowvEjUYZ6C7Y4QZsrzs_AsAT7+DvKieYyQ5b3vaw@mail.gmail.com>
 <64374D0B-3396-4B61-8DEC-82C9EDFB3EA3@twistedmatrix.com>
 <CAEKSqkuBomAwHxKBZV9NH__tjnVP5fGssuUyovkq5gE5okMJBw@mail.gmail.com>
 <D37E57F4-B14F-4E15-8B24-0B53CA4EF716@twistedmatrix.com>
 <CAEKSqkuM10=7fN0FGyx-jRtUA+pEg=-3dHUBbs50xaa60bKrmA@mail.gmail.com>
Message-ID: <47FC2072-2B20-4318-B1EB-5473EE3B5F18@twistedmatrix.com>


> On Oct 26, 2015, at 1:52 PM, Chris Wolfe <chriswwolfe at gmail.com> wrote:
> 
> On 2 February 2015 at 19:18, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> [snip]
> > Not all committers are actively involved in the project at all times, so we should form a "committer committee" 
> > of people who are interested in evaluating candidates.  If you would like to do that and you're already a committer, 
> > please contact me and I'll add you to the list. 
> 
> It looks like this new process has stalled on the formation of the committee to review new contributor requests. As of right now, the committee has no members. :-)
> 
> This email is a call for volunteers. If you would like to serve on the committee, please reply to this thread and state that you are interested in serving on the committee. Once enough volunteers have signed up, new contributor requests will be sent to the committee's mailing list.

I'm going to go a step further and say that you do not need to be a committer yourself to be on this mailing list. Being a committer is a technical qualification; this is a people process.  If you want to become a committer you will of course have to recuse yourself from a decision about yourself :), but otherwise I'm happy to have people who haven't cleared this process themselves participate in it, as long as they follow the process and evaluate folks fairly.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151026/d9f1a3e4/attachment-0002.html>

From hawkowl at atleastfornow.net  Mon Oct 26 17:56:46 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Tue, 27 Oct 2015 07:56:46 +0800
Subject: [Twisted-Python] revisiting onboarding
In-Reply-To: <CAEKSqkuM10=7fN0FGyx-jRtUA+pEg=-3dHUBbs50xaa60bKrmA@mail.gmail.com>
References: <00A8D2CB-A1A3-496F-8670-E9888990F3E6@twistedmatrix.com>
 <8761bcxxak.fsf@hermes.hocat.ca>
 <CAEKSqkuP5xjOy5Vdo4Giuj1HG5Xo6hvEAvBE88ZFCzniXvp1Uw@mail.gmail.com>
 <9DC27720-4877-466C-8148-2D5E5E1EA532@twistedmatrix.com>
 <CAEKSqksRBDowvEjUYZ6C7Y4QZsrzs_AsAT7+DvKieYyQ5b3vaw@mail.gmail.com>
 <64374D0B-3396-4B61-8DEC-82C9EDFB3EA3@twistedmatrix.com>
 <CAEKSqkuBomAwHxKBZV9NH__tjnVP5fGssuUyovkq5gE5okMJBw@mail.gmail.com>
 <D37E57F4-B14F-4E15-8B24-0B53CA4EF716@twistedmatrix.com>
 <CAEKSqkuM10=7fN0FGyx-jRtUA+pEg=-3dHUBbs50xaa60bKrmA@mail.gmail.com>
Message-ID: <9C211CCA-3860-444A-8BA0-255E75B13BA7@atleastfornow.net>


> On 27 Oct 2015, at 04:52, Chris Wolfe <chriswwolfe at gmail.com> wrote:
> 
> On 2 February 2015 at 19:18, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> [snip]
> > Not all committers are actively involved in the project at all times, so we should form a "committer committee"
> > of people who are interested in evaluating candidates.  If you would like to do that and you're already a committer,
> > please contact me and I'll add you to the list.
> 
> It looks like this new process has stalled on the formation of the committee to review new contributor requests. As of right now, the committee has no members. :-)
> 
> This email is a call for volunteers. If you would like to serve on the committee, please reply to this thread and state that you are interested in serving on the committee. Once enough volunteers have signed up, new contributor requests will be sent to the committee's mailing list.

I'm happy to be on this.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151027/723da2d9/attachment.sig>

From glyph at twistedmatrix.com  Mon Oct 26 18:10:57 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 26 Oct 2015 17:10:57 -0700
Subject: [Twisted-Python] SNI callback with support for deferreds
In-Reply-To: <CAFzCN1vkHRKM_JfKV5ivcr8E3BA8N-9CBiBVjgB0KdampaHihA@mail.gmail.com>
References: <CAFzCN1sdwwLQ_yDsKTA+3ZPB_Cb0uMdTo-Za7Ot=qGcVg2ZZ2w@mail.gmail.com>
 <77ABF1F6-3A6E-4518-BD57-0D2021828209@twistedmatrix.com>
 <CAFzCN1vkHRKM_JfKV5ivcr8E3BA8N-9CBiBVjgB0KdampaHihA@mail.gmail.com>
Message-ID: <478F67C6-DA7F-4850-B1CD-8D81A44B4FA7@twistedmatrix.com>


> On Oct 26, 2015, at 5:37 AM, Jonathan Stoppani <jonathan at stoppani.name> wrote:
> 
> It also needs a serious overhaul on its indentation - something messed up happened to that code :).
> 
> I don't get it, I see it all as PEP8 compliant (will need to adapt spacing to Twisted's code standards, but that should be all).
> 

Uh... nevermind.  Must have been some Github stylesheet failing to load for me or something; the code looks fine now.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151026/472c4be3/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Oct 26 18:12:26 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 26 Oct 2015 17:12:26 -0700
Subject: [Twisted-Python] [Twisted-web] Changing the Twisted
	Compatibility Policy
In-Reply-To: <3FE8FE6A-5DBA-4C0B-9BD4-47D03DF083B1@2xlp.com>
References: <F014B67C-1A19-445F-9723-6F862FF74849@atleastfornow.net>
 <167E1C3A-BB30-41B3-A1F9-D5C316BD6290@twistedmatrix.com>
 <3FE8FE6A-5DBA-4C0B-9BD4-47D03DF083B1@2xlp.com>
Message-ID: <99CE5A72-615F-4F90-B4B5-F342870A555C@twistedmatrix.com>


> On Oct 26, 2015, at 11:57 AM, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:
> 
> From a "non-core user" of twisted point of view, and someone likely to run into issues from this change... things that I have liked from other projects are:


Thanks very much (and thanks to everyone else as well) for sharing your perspective.  One of the sometimes frustrating things about Twisted maintenance is that we don't hear from users until it's too late; getting this kind of perspective from actual users with experience both with Twisted and other projects before we make process decisions is invaluable.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151026/77f61eb9/attachment-0002.html>

From ngoonee.talk at gmail.com  Wed Oct 28 00:24:24 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Wed, 28 Oct 2015 14:24:24 +0800
Subject: [Twisted-Python] AMP with a long-lived connection - results and
	deferred?
Message-ID: <CAGQ70es93-+NWpFTZEiD0KHS8QTeTnCX5WJbskybQz90L=pQag@mail.gmail.com>

Working off the example ampserver.py and ampclient.py examples, I
wanted to build a client which maintains a single connection while
allowing the passing of messages back and forth. However I'm stuck at
one of the most basic steps, getting back the result (without
'completing' the connection).

The ampclient.py example simply connects, does a callRemote on the
resulting protocol, and adds callbacks to extract the result from a
dictionary and print it. The deferred being used in this case is
produced by connectProtocol.

I'm trying to write a client (inheriting from amp.AMP) which is
embedded in a kivy GUI, something which is quite possible using the
_threadedselect reactor.

On connection, I use the connectionMade method to save the 'self' (in
this case, the client inheriting from amp.AMP) in my kivy app. I can
then call a function which does a callRemote on this saved client,
which indeed triggers the server appropriately.

The callRemote returns a deferred (from reading docs online, a remote
reference). I can't figure out what to do with it, specifically in
terms of getting the result ('total', when calling Sum from
ampserver.py).

Assistance much appreciated.



From ngoonee.talk at gmail.com  Wed Oct 28 00:33:58 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Wed, 28 Oct 2015 14:33:58 +0800
Subject: [Twisted-Python] AMP with a long-lived connection - results and
	deferred?
In-Reply-To: <CAGQ70es93-+NWpFTZEiD0KHS8QTeTnCX5WJbskybQz90L=pQag@mail.gmail.com>
References: <CAGQ70es93-+NWpFTZEiD0KHS8QTeTnCX5WJbskybQz90L=pQag@mail.gmail.com>
Message-ID: <CAGQ70etgQne=WV5gK646U1mMA_hbwGSFr57aLOeTEBN905HxfQ@mail.gmail.com>

One 'answer' that I've gotten so far is in this link -
http://stackoverflow.com/questions/15640393/how-to-create-bi-directional-messaging-using-amp-in-twisted-python
- but that doesn't seem to achieve what I want, at least not in the
way I want it. It does a callRemote from the server in the function
called by the client (using callRemote). As I understand things,
that's what deferred is meant to solve, and anyway this seems to
invalidate the reason for using amp.Command inheritence anyway (as the
response is required).

To be clear, that way does 'work', but it doesn't seem to be doing the
sort of bidirectional messaging AMP should be doing.

In summary:- how do I see the response from client side without making
a new connection every time I have something to send (as done in the
ampclient.py example)?

On Wed, Oct 28, 2015 at 2:24 PM, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
> Working off the example ampserver.py and ampclient.py examples, I
> wanted to build a client which maintains a single connection while
> allowing the passing of messages back and forth. However I'm stuck at
> one of the most basic steps, getting back the result (without
> 'completing' the connection).
>
> The ampclient.py example simply connects, does a callRemote on the
> resulting protocol, and adds callbacks to extract the result from a
> dictionary and print it. The deferred being used in this case is
> produced by connectProtocol.
>
> I'm trying to write a client (inheriting from amp.AMP) which is
> embedded in a kivy GUI, something which is quite possible using the
> _threadedselect reactor.
>
> On connection, I use the connectionMade method to save the 'self' (in
> this case, the client inheriting from amp.AMP) in my kivy app. I can
> then call a function which does a callRemote on this saved client,
> which indeed triggers the server appropriately.
>
> The callRemote returns a deferred (from reading docs online, a remote
> reference). I can't figure out what to do with it, specifically in
> terms of getting the result ('total', when calling Sum from
> ampserver.py).
>
> Assistance much appreciated.



From markus at bluegap.ch  Wed Oct 28 05:10:10 2015
From: markus at bluegap.ch (Markus Wanner)
Date: Wed, 28 Oct 2015 12:10:10 +0100
Subject: [Twisted-Python] log config depending on nodaemon option
Message-ID: <5630AD12.80009@bluegap.ch>

Hi,

I'm trying to configure logging of my application depending on whether
or not the -y (--nodaemon) option of twistd is given. Actually very
similar to the default behavior, I would just like to switch to daily
log files. But it seems the application created has no access to the
config (used by underlying twistd and the ApplicationRunner).

What's the best way to switch to daily log files using twistd?

Kind Regards

Markus Wanner



From glyph at twistedmatrix.com  Wed Oct 28 22:45:12 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 28 Oct 2015 21:45:12 -0700
Subject: [Twisted-Python] log config depending on nodaemon option
In-Reply-To: <5630AD12.80009@bluegap.ch>
References: <5630AD12.80009@bluegap.ch>
Message-ID: <7FCD7B2A-AF5C-4CA9-B4A7-CF37E3C3058D@twistedmatrix.com>


> On Oct 28, 2015, at 4:10 AM, Markus Wanner <markus at bluegap.ch> wrote:
> 
> Hi,
> 
> I'm trying to configure logging of my application depending on whether
> or not the -y (--nodaemon) option of twistd is given. Actually very
> similar to the default behavior, I would just like to switch to daily
> log files. But it seems the application created has no access to the
> config (used by underlying twistd and the ApplicationRunner).
> 
> What's the best way to switch to daily log files using twistd?


You have 3 options, pretty much:

Submit a patch to Twisted that adds this option to twistd itself.  This is probably the most reasonable option, since you're asking for twistd to have a feature that it doesn't currently.  This is a great time to be submitting patches, too - we have two recipients of the Twisted fellowship right now available to do review work for the SFC, I have work time allotted to Twisted reviewing, and the review queue <https://twistedmatrix.com/trac/report/25> is consistently shorter than it's been in a long time.  So you are likely to get a quick response.
Use the `-n´ option and run `twistd´ under a supervisor like systemd, consuming, writing, and rotating its logs without daemonizing, and handle log management outside of `twistd´.  This is probably the long-term direction that operations with Twisted will ultimately take, as you can see in some of the pontificating on <https://twistedmatrix.com/trac/ticket/5705 <https://twistedmatrix.com/trac/ticket/5705>>.
Grovel around in unsupported global state like `sys.argv´ in your twistd plugin, and use private attributes to just change the structure of the objects internally.  I don't think this is a great idea and I probably won't help you with it ;).

The reason that state like this is not readily accessible to a twistd plugin is intentional, although we have long been paying the cost of making it difficult to configure without really realizing the benefit from this architecture, which is service composability.  For example, something like, "twistd -n web --path http + words --irc-port=6667 + mail --maildirdbmdomain=example.com=/tmp/example.com + auth ldap://corporate-active-directory" to give you IRC and web and mail all backed by the same authentication database.  If this is the case then no one plugin can really assert control over how logging is configured, so we have been trying to avoid doing a whole lot in the area of making it possible for your plugin to control the twistd environment it's started in.

If you really want to control every aspect of your deployment from your own code, you can always just import `twisted.scripts.twistd´ and build your own ServerOptions object that contains exactly what deployment options you want to use.

I hope this is helpful.  Thanks for using Twisted!

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151028/36a2d99c/attachment-0002.html>

From dripton at ripton.net  Wed Oct 28 23:15:24 2015
From: dripton at ripton.net (David Ripton)
Date: Thu, 29 Oct 2015 01:15:24 -0400
Subject: [Twisted-Python] AMP with a long-lived connection - results and
 deferred?
In-Reply-To: <CAGQ70es93-+NWpFTZEiD0KHS8QTeTnCX5WJbskybQz90L=pQag@mail.gmail.com>
References: <CAGQ70es93-+NWpFTZEiD0KHS8QTeTnCX5WJbskybQz90L=pQag@mail.gmail.com>
Message-ID: <5631AB6C.3010002@ripton.net>

On 10/28/2015 02:24 AM, Oon-Ee Ng wrote:
> Working off the example ampserver.py and ampclient.py examples, I
> wanted to build a client which maintains a single connection while
> allowing the passing of messages back and forth. However I'm stuck at
> one of the most basic steps, getting back the result (without
> 'completing' the connection).
> 
> The ampclient.py example simply connects, does a callRemote on the
> resulting protocol, and adds callbacks to extract the result from a
> dictionary and print it. The deferred being used in this case is
> produced by connectProtocol.
> 
> I'm trying to write a client (inheriting from amp.AMP) which is
> embedded in a kivy GUI, something which is quite possible using the
> _threadedselect reactor.
> 
> On connection, I use the connectionMade method to save the 'self' (in
> this case, the client inheriting from amp.AMP) in my kivy app. I can
> then call a function which does a callRemote on this saved client,
> which indeed triggers the server appropriately.
> 
> The callRemote returns a deferred (from reading docs online, a remote
> reference). I can't figure out what to do with it, specifically in
> terms of getting the result ('total', when calling Sum from
> ampserver.py).
> 
> Assistance much appreciated.

Basically, callRemote returns a deferred, that you can add callbacks and
errbacks to, which will be called when the remote call succeeds or
fails.  On success, the callback will receive an argument equal to the
return value of the remote callable that you called.  On failure, the
errback will receive an error argument.

I have an old GUI (PyGTK, not Kivy) chat over AMP example at
https://github.com/dripton/ampchat that might help you.  (Though I think
all of my commands return boring responses.)

-- 
David Ripton    dripton at ripton.net



From ngoonee.talk at gmail.com  Thu Oct 29 01:37:20 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Thu, 29 Oct 2015 15:37:20 +0800
Subject: [Twisted-Python] AMP with a long-lived connection - results and
	deferred?
In-Reply-To: <5631AB6C.3010002@ripton.net>
References: <CAGQ70es93-+NWpFTZEiD0KHS8QTeTnCX5WJbskybQz90L=pQag@mail.gmail.com>
 <5631AB6C.3010002@ripton.net>
Message-ID: <CAGQ70etwiPgGF1c5gZMe99Mz4j8cHGH9sNjro8QfDmwuWWwWwQ@mail.gmail.com>

Thanks David, but when I do something along the lines of:-

def mycall(in):
    print(in)
d = self.connection.boxReceiver.callRemote(Command, a='test')
d.addCallBack(mycall)

The print never actually happens. I'm not really sure why, it was one
of the first things I tried. I tried the most basic thing, modifying
the doMath() example, and mycall only triggers when the reactor stops
(even if I run doMath multiple times with delays).

On Thu, Oct 29, 2015 at 1:15 PM, David Ripton <dripton at ripton.net> wrote:
> On 10/28/2015 02:24 AM, Oon-Ee Ng wrote:
>> Working off the example ampserver.py and ampclient.py examples, I
>> wanted to build a client which maintains a single connection while
>> allowing the passing of messages back and forth. However I'm stuck at
>> one of the most basic steps, getting back the result (without
>> 'completing' the connection).
>>
>> The ampclient.py example simply connects, does a callRemote on the
>> resulting protocol, and adds callbacks to extract the result from a
>> dictionary and print it. The deferred being used in this case is
>> produced by connectProtocol.
>>
>> I'm trying to write a client (inheriting from amp.AMP) which is
>> embedded in a kivy GUI, something which is quite possible using the
>> _threadedselect reactor.
>>
>> On connection, I use the connectionMade method to save the 'self' (in
>> this case, the client inheriting from amp.AMP) in my kivy app. I can
>> then call a function which does a callRemote on this saved client,
>> which indeed triggers the server appropriately.
>>
>> The callRemote returns a deferred (from reading docs online, a remote
>> reference). I can't figure out what to do with it, specifically in
>> terms of getting the result ('total', when calling Sum from
>> ampserver.py).
>>
>> Assistance much appreciated.
>
> Basically, callRemote returns a deferred, that you can add callbacks and
> errbacks to, which will be called when the remote call succeeds or
> fails.  On success, the callback will receive an argument equal to the
> return value of the remote callable that you called.  On failure, the
> errback will receive an error argument.
>
> I have an old GUI (PyGTK, not Kivy) chat over AMP example at
> https://github.com/dripton/ampchat that might help you.  (Though I think
> all of my commands return boring responses.)
>
> --
> David Ripton    dripton at ripton.net
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From ngoonee.talk at gmail.com  Thu Oct 29 02:03:50 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Thu, 29 Oct 2015 16:03:50 +0800
Subject: [Twisted-Python] AMP with a long-lived connection - results and
	deferred?
In-Reply-To: <CAGQ70etwiPgGF1c5gZMe99Mz4j8cHGH9sNjro8QfDmwuWWwWwQ@mail.gmail.com>
References: <CAGQ70es93-+NWpFTZEiD0KHS8QTeTnCX5WJbskybQz90L=pQag@mail.gmail.com>
 <5631AB6C.3010002@ripton.net>
 <CAGQ70etwiPgGF1c5gZMe99Mz4j8cHGH9sNjro8QfDmwuWWwWwQ@mail.gmail.com>
Message-ID: <CAGQ70esioxyAq_EP0v4GRBszCMNrna05d2c_uRH-rR9owtAYww@mail.gmail.com>

Hmm, I'm wondering whether this could be specific to the reactor I'm
using (a _threadedselect reactor embedded in Kivy). I wrote up a
minimal example of what I'm doing to demonstrate the issue, but this
example works! Doesn't in my (admittedly quite a bit more complex)
kivy example though. Let me try for a minimal example there and see if
I can figure it out.

from twisted.internet import reactor, protocol
from twisted.internet.task import deferLater
from twisted.protocols import amp
from ampserver import Sum, Divide


connection = None

class MathClient(amp.AMP):
    def connectionMade(self):
        global connection
        connection = self


class MathFactory(protocol.ReconnectingClientFactory):
    protocol = MathClient


if __name__ == '__main__':
    reactor.connectTCP('127.0.0.1', 1234, MathFactory())
    def simpleSum():
        global connection
        d = connection.callRemote(Sum, a=1, b=5)
        def prin(result):
            print(result)
        d.addCallback(prin)
        return d
    deferLater(reactor, 1, simpleSum)
    deferLater(reactor, 3, simpleSum)
    deferLater(reactor, 6, simpleSum)
    deferLater(reactor, 9, simpleSum)
    deferLater(reactor, 12, simpleSum)
    deferLater(reactor, 15, simpleSum)
    deferLater(reactor, 18, simpleSum).addCallback(lambda _: reactor.stop())
    reactor.run()

On Thu, Oct 29, 2015 at 3:37 PM, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
> Thanks David, but when I do something along the lines of:-
>
> def mycall(in):
>     print(in)
> d = self.connection.boxReceiver.callRemote(Command, a='test')
> d.addCallBack(mycall)
>
> The print never actually happens. I'm not really sure why, it was one
> of the first things I tried. I tried the most basic thing, modifying
> the doMath() example, and mycall only triggers when the reactor stops
> (even if I run doMath multiple times with delays).
>
> On Thu, Oct 29, 2015 at 1:15 PM, David Ripton <dripton at ripton.net> wrote:
>> On 10/28/2015 02:24 AM, Oon-Ee Ng wrote:
>>> Working off the example ampserver.py and ampclient.py examples, I
>>> wanted to build a client which maintains a single connection while
>>> allowing the passing of messages back and forth. However I'm stuck at
>>> one of the most basic steps, getting back the result (without
>>> 'completing' the connection).
>>>
>>> The ampclient.py example simply connects, does a callRemote on the
>>> resulting protocol, and adds callbacks to extract the result from a
>>> dictionary and print it. The deferred being used in this case is
>>> produced by connectProtocol.
>>>
>>> I'm trying to write a client (inheriting from amp.AMP) which is
>>> embedded in a kivy GUI, something which is quite possible using the
>>> _threadedselect reactor.
>>>
>>> On connection, I use the connectionMade method to save the 'self' (in
>>> this case, the client inheriting from amp.AMP) in my kivy app. I can
>>> then call a function which does a callRemote on this saved client,
>>> which indeed triggers the server appropriately.
>>>
>>> The callRemote returns a deferred (from reading docs online, a remote
>>> reference). I can't figure out what to do with it, specifically in
>>> terms of getting the result ('total', when calling Sum from
>>> ampserver.py).
>>>
>>> Assistance much appreciated.
>>
>> Basically, callRemote returns a deferred, that you can add callbacks and
>> errbacks to, which will be called when the remote call succeeds or
>> fails.  On success, the callback will receive an argument equal to the
>> return value of the remote callable that you called.  On failure, the
>> errback will receive an error argument.
>>
>> I have an old GUI (PyGTK, not Kivy) chat over AMP example at
>> https://github.com/dripton/ampchat that might help you.  (Though I think
>> all of my commands return boring responses.)
>>
>> --
>> David Ripton    dripton at ripton.net
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From ngoonee.talk at gmail.com  Thu Oct 29 02:16:38 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Thu, 29 Oct 2015 16:16:38 +0800
Subject: [Twisted-Python] AMP with a long-lived connection - results and
	deferred?
In-Reply-To: <CAGQ70esioxyAq_EP0v4GRBszCMNrna05d2c_uRH-rR9owtAYww@mail.gmail.com>
References: <CAGQ70es93-+NWpFTZEiD0KHS8QTeTnCX5WJbskybQz90L=pQag@mail.gmail.com>
 <5631AB6C.3010002@ripton.net>
 <CAGQ70etwiPgGF1c5gZMe99Mz4j8cHGH9sNjro8QfDmwuWWwWwQ@mail.gmail.com>
 <CAGQ70esioxyAq_EP0v4GRBszCMNrna05d2c_uRH-rR9owtAYww@mail.gmail.com>
Message-ID: <CAGQ70eujC5+VZuVGM9+Ud_sSFEQAa1aCt8JiPiaRHDB510JSOQ@mail.gmail.com>

And lo and behold it seems to work now even with Kivy. Strange. For
posterity, here's the simple client code I was using for a minimal
example. I'll expand upwards from here and see how far I can get.

#install_twisted_rector must be called before importing the reactor
from kivy.support import install_twisted_reactor
install_twisted_reactor()

from twisted.internet import reactor, protocol
from twisted.internet.task import deferLater
from ampserver import Sum, Divide
from twisted.protocols import amp

class EchoClient(amp.AMP):
    def connectionMade(self):
        self.factory.resetDelay()
        self.factory.app.on_connection(self)


class EchoFactory(protocol.ReconnectingClientFactory):
    protocol = EchoClient

    def __init__(self, app):
        self.app = app


from kivy.app import App
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.uix.boxlayout import BoxLayout


# A simple kivy App, with a textbox to enter messages, and
# a large label to display all the messages received from
# the server
class TwistedClientApp(App):
    connection = None

    def build(self):
        root = self.setup_gui()
        self.connect_to_server()
        return root

    def setup_gui(self):
        self.textbox = TextInput(size_hint_y=.1, multiline=False)
        self.textbox.bind(on_text_validate=self.send_message)
        self.label = Label(text='connecting...\n')
        self.layout = BoxLayout(orientation='vertical')
        self.layout.add_widget(self.label)
        self.layout.add_widget(self.textbox)
        return self.layout

    def connect_to_server(self):
        reactor.connectTCP('127.0.0.1', 1234, EchoFactory(self))

    def on_connection(self, connection):
        self.print_message("connected succesfully!")
        self.connection = connection

    def send_message(self, *args):
        msg = self.textbox.text.encode('ascii')
        if self.connection:
            d = self.connection.boxReceiver.callRemote(Sum, a=3, b=8)
            def prin(result):
                print(result)
            d.addCallback(prin)

    def print_message(self, msg):
        self.label.text += str(msg) + "\n"

if __name__ == '__main__':
    TwistedClientApp().run()



From markus at bluegap.ch  Thu Oct 29 08:28:29 2015
From: markus at bluegap.ch (Markus Wanner)
Date: Thu, 29 Oct 2015 15:28:29 +0100
Subject: [Twisted-Python] log config depending on nodaemon option
In-Reply-To: <7FCD7B2A-AF5C-4CA9-B4A7-CF37E3C3058D@twistedmatrix.com>
References: <5630AD12.80009@bluegap.ch>
 <7FCD7B2A-AF5C-4CA9-B4A7-CF37E3C3058D@twistedmatrix.com>
Message-ID: <56322D0D.9050809@bluegap.ch>

Glyyh,

thanks a lot for your detailed answer. Not quite what I was hoping for,
but I now understand the reasoning behind and will figure a wait to deal
with it.

Thanks for a great piece of software.

Kind Regards

Markus Wanner



From chris.norman2 at googlemail.com  Sat Oct 31 00:41:38 2015
From: chris.norman2 at googlemail.com (Chris Norman)
Date: Sat, 31 Oct 2015 06:41:38 +0000
Subject: [Twisted-Python] Possible bug
Message-ID: <563462A2.7000309@googlemail.com>

Hi all,
Using windows 10 with Python 3.5, importing pretty much anything gives 
me the following error. Not sure if there's something wrong with my 
configuration or if it's a bug... I seem to remember something a while 
back, should I file a ticket?


Traceback (most recent call last):
   File "<string>", line 1, in <module>
   File "C:\python35\lib\site-packages\twisted\internet\reactor.py", 
line 38, in <module>
     from twisted.internet import default
   File "C:\python35\lib\site-packages\twisted\internet\default.py", 
line 56, in <module>
     install = _getInstallFunction(platform)
   File "C:\python35\lib\site-packages\twisted\internet\default.py", 
line 50, in _getInstallFunction
     from twisted.internet.selectreactor import install
   File 
"C:\python35\lib\site-packages\twisted\internet\selectreactor.py", line 
18, in <module>
     from twisted.internet import posixbase
   File "C:\python35\lib\site-packages\twisted\internet\posixbase.py", 
line 18, in <module>
     from twisted.internet import error, udp, tcp
   File "C:\python35\lib\site-packages\twisted\internet\udp.py", line 
53, in <module>
     from twisted.internet import base, defer, address
   File "C:\python35\lib\site-packages\twisted\internet\base.py", line 
23, in <module>
     from twisted.internet import fdesc, main, error, abstract, defer, 
threads
   File "C:\python35\lib\site-packages\twisted\internet\defer.py", line 
29, in <module>
     from twisted.python import lockfile, failure
   File "C:\python35\lib\site-packages\twisted\python\lockfile.py", line 
52, in <module>
     _open = file
NameError: name 'file' is not defined

Cheers,




From hawkowl at atleastfornow.net  Sat Oct 31 00:45:29 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sat, 31 Oct 2015 14:45:29 +0800
Subject: [Twisted-Python] Possible bug
In-Reply-To: <563462A2.7000309@googlemail.com>
References: <563462A2.7000309@googlemail.com>
Message-ID: <344F2B0F-7787-451F-9075-52283232F70A@atleastfornow.net>

Hi Chris,

Twisted does not yet support Python 3 on Windows.

There's a ticket at https://twistedmatrix.com/trac/ticket/8025#ticket which makes all the tests pass on the platform; I just need to work on it some more. I expect Twisted 16.0 to have base support for Python 3 on Windows.

- Amber

> On 31 Oct 2015, at 14:41, Chris Norman <chris.norman2 at googlemail.com> wrote:
> 
> Hi all,
> Using windows 10 with Python 3.5, importing pretty much anything gives me the following error. Not sure if there's something wrong with my configuration or if it's a bug... I seem to remember something a while back, should I file a ticket?
> 
> 
> Traceback (most recent call last):
>  File "<string>", line 1, in <module>
>  File "C:\python35\lib\site-packages\twisted\internet\reactor.py", line 38, in <module>
>    from twisted.internet import default
>  File "C:\python35\lib\site-packages\twisted\internet\default.py", line 56, in <module>
>    install = _getInstallFunction(platform)
>  File "C:\python35\lib\site-packages\twisted\internet\default.py", line 50, in _getInstallFunction
>    from twisted.internet.selectreactor import install
>  File "C:\python35\lib\site-packages\twisted\internet\selectreactor.py", line 18, in <module>
>    from twisted.internet import posixbase
>  File "C:\python35\lib\site-packages\twisted\internet\posixbase.py", line 18, in <module>
>    from twisted.internet import error, udp, tcp
>  File "C:\python35\lib\site-packages\twisted\internet\udp.py", line 53, in <module>
>    from twisted.internet import base, defer, address
>  File "C:\python35\lib\site-packages\twisted\internet\base.py", line 23, in <module>
>    from twisted.internet import fdesc, main, error, abstract, defer, threads
>  File "C:\python35\lib\site-packages\twisted\internet\defer.py", line 29, in <module>
>    from twisted.python import lockfile, failure
>  File "C:\python35\lib\site-packages\twisted\python\lockfile.py", line 52, in <module>
>    _open = file
> NameError: name 'file' is not defined
> 
> Cheers,
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151031/740d9208/attachment.sig>

From chris.norman2 at googlemail.com  Sat Oct 31 00:49:42 2015
From: chris.norman2 at googlemail.com (Chris Norman)
Date: Sat, 31 Oct 2015 06:49:42 +0000
Subject: [Twisted-Python] Possible bug
In-Reply-To: <344F2B0F-7787-451F-9075-52283232F70A@atleastfornow.net>
References: <563462A2.7000309@googlemail.com>
 <344F2B0F-7787-451F-9075-52283232F70A@atleastfornow.net>
Message-ID: <56346486.8040700@googlemail.com>

Hi Amber

On 31/10/2015 06:45, Amber "Hawkie" Brown wrote:
> Hi Chris,
>
> Twisted does not yet support Python 3 on Windows.

That's a shame. I've never contributed to an open source project before, 
but I'd be glad to try and help out. I feel I __may__ know enough Python 
now to certainly have a shot at it.
>
> There's a ticket at https://twistedmatrix.com/trac/ticket/8025#ticket which makes all the tests pass on the platform; I just need to work on it some more. I expect Twisted 16.0 to have base support for Python 3 on Windows.

As above, if I can help, please tell me how!

Cheers,
>
> - Amber
>
>> On 31 Oct 2015, at 14:41, Chris Norman <chris.norman2 at googlemail.com> wrote:
>>
>> Hi all,
>> Using windows 10 with Python 3.5, importing pretty much anything gives me the following error. Not sure if there's something wrong with my configuration or if it's a bug... I seem to remember something a while back, should I file a ticket?
>>
>>
>> Traceback (most recent call last):
>>   File "<string>", line 1, in <module>
>>   File "C:\python35\lib\site-packages\twisted\internet\reactor.py", line 38, in <module>
>>     from twisted.internet import default
>>   File "C:\python35\lib\site-packages\twisted\internet\default.py", line 56, in <module>
>>     install = _getInstallFunction(platform)
>>   File "C:\python35\lib\site-packages\twisted\internet\default.py", line 50, in _getInstallFunction
>>     from twisted.internet.selectreactor import install
>>   File "C:\python35\lib\site-packages\twisted\internet\selectreactor.py", line 18, in <module>
>>     from twisted.internet import posixbase
>>   File "C:\python35\lib\site-packages\twisted\internet\posixbase.py", line 18, in <module>
>>     from twisted.internet import error, udp, tcp
>>   File "C:\python35\lib\site-packages\twisted\internet\udp.py", line 53, in <module>
>>     from twisted.internet import base, defer, address
>>   File "C:\python35\lib\site-packages\twisted\internet\base.py", line 23, in <module>
>>     from twisted.internet import fdesc, main, error, abstract, defer, threads
>>   File "C:\python35\lib\site-packages\twisted\internet\defer.py", line 29, in <module>
>>     from twisted.python import lockfile, failure
>>   File "C:\python35\lib\site-packages\twisted\python\lockfile.py", line 52, in <module>
>>     _open = file
>> NameError: name 'file' is not defined
>>
>> Cheers,
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151031/88385bce/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Oct 31 01:39:58 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 31 Oct 2015 00:39:58 -0700
Subject: [Twisted-Python] Possible bug
In-Reply-To: <56346486.8040700@googlemail.com>
References: <563462A2.7000309@googlemail.com>
 <344F2B0F-7787-451F-9075-52283232F70A@atleastfornow.net>
 <56346486.8040700@googlemail.com>
Message-ID: <95F488D7-8C1C-462E-938A-9952C053B7D1@twistedmatrix.com>


> On Oct 30, 2015, at 11:49 PM, Chris Norman <chris.norman2 at googlemail.com> wrote:
> 
> Hi Amber
> 
> On 31/10/2015 06:45, Amber "Hawkie" Brown wrote:
>> Hi Chris,
>> 
>> Twisted does not yet support Python 3 on Windows.
> 
> That's a shame. I've never contributed to an open source project before, but I'd be glad to try and help out. I feel I __may__ know enough Python now to certainly have a shot at it.

If you feel like you might, you definitely do :-).  Often people feel like they need to be advanced rocket surgeons to work on Twisted, but in fact, our robust code-review process means that you don't have to worry about making mistakes at all.  Just submit your best effort, and you'll get a code review telling you how to improve it so that it can be integrated (and you _will_ get at least one round of review: I created Twisted, and even _I_ can't usually land a patch without one or two rounds of review ;-)).

Thanks for offering to help out!  If everybody who wanted Python 3 support just signed on to work on a ticket like this, the port would have been finished a year ago ;-).
>> There's a ticket at https://twistedmatrix.com/trac/ticket/8025#ticket <https://twistedmatrix.com/trac/ticket/8025#ticket> which makes all the tests pass on the platform; I just need to work on it some more. I expect Twisted 16.0 to have base support for Python 3 on Windows.
> As above, if I can help, please tell me how!

Our toolchain is a little clunky (sorry about that) for hysterical raisins.

Before I launch into an explanation though, are you already familiar with Git and/or how to contribute on GitHub?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151031/c60d5830/attachment-0002.html>

From chris.norman2 at googlemail.com  Sat Oct 31 02:03:51 2015
From: chris.norman2 at googlemail.com (Chris Norman)
Date: Sat, 31 Oct 2015 08:03:51 +0000
Subject: [Twisted-Python] Possible bug
In-Reply-To: <95F488D7-8C1C-462E-938A-9952C053B7D1@twistedmatrix.com>
References: <563462A2.7000309@googlemail.com>
 <344F2B0F-7787-451F-9075-52283232F70A@atleastfornow.net>
 <56346486.8040700@googlemail.com>
 <95F488D7-8C1C-462E-938A-9952C053B7D1@twistedmatrix.com>
Message-ID: <563475E7.20901@googlemail.com>

Hi,
I've used git extensively, and I can soon read up on how to contribute 
on git. So what's the next step? Is there a howto somewhere on the 
Twisted site?

Cheers,


On 31/10/2015 07:39, Glyph Lefkowitz wrote:
>
>> On Oct 30, 2015, at 11:49 PM, Chris Norman 
>> <chris.norman2 at googlemail.com <mailto:chris.norman2 at googlemail.com>> 
>> wrote:
>>
>> Hi Amber
>>
>> On 31/10/2015 06:45, Amber "Hawkie" Brown wrote:
>>> Hi Chris,
>>>
>>> Twisted does not yet support Python 3 on Windows.
>>
>> That's a shame. I've never contributed to an open source project 
>> before, but I'd be glad to try and help out. I feel I __may__ know 
>> enough Python now to certainly have a shot at it.
>
> If you feel like you might, you definitely do :-).  Often people feel 
> like they need to be advanced rocket surgeons to work on Twisted, but 
> in fact, our robust code-review process means that you don't have to 
> worry about making mistakes at all.  Just submit your best effort, and 
> you'll get a code review telling you how to improve it so that it can 
> be integrated (and you _will_ get at least one round of review: I 
> created Twisted, and even _I_ can't usually land a patch without one 
> or two rounds of review ;-)).
>
> Thanks for offering to help out!  If everybody who wanted Python 3 
> support just signed on to work on a ticket like this, the port would 
> have been finished a year ago ;-).
>>> There's a ticket athttps://twistedmatrix.com/trac/ticket/8025#ticket  which makes all the tests pass on the platform; I just need to work on it some more. I expect Twisted 16.0 to have base support for Python 3 on Windows.
>> As above, if I can help, please tell me how!
>
> Our toolchain is a little clunky (sorry about that) for hysterical 
> raisins.
>
> Before I launch into an explanation though, are you already familiar 
> with Git and/or how to contribute on GitHub?
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151031/3549e35a/attachment-0002.html>

From chris.norman2 at googlemail.com  Sat Oct 31 02:31:28 2015
From: chris.norman2 at googlemail.com (Chris Norman)
Date: Sat, 31 Oct 2015 08:31:28 +0000
Subject: [Twisted-Python] Running Trial [wav]: Re:  Possible bug
In-Reply-To: <95F488D7-8C1C-462E-938A-9952C053B7D1@twistedmatrix.com>
References: <563462A2.7000309@googlemail.com>
 <344F2B0F-7787-451F-9075-52283232F70A@atleastfornow.net>
 <56346486.8040700@googlemail.com>
 <95F488D7-8C1C-462E-938A-9952C053B7D1@twistedmatrix.com>
Message-ID: <56347C60.5080108@googlemail.com>

Hi,
So I went on the net on the off chance that the info I was looking for 
was easy to obtain, and I found out about trial.

I cloned the git and did:
python bin/trial twisted

I got the following:

Unhandled Error
Traceback (most recent call last):
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\scripts\trial.py", 
line 473, in postOptions
     _BasicOptions.postOptions(self)
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\scripts\trial.py", 
line 383, in postOptions
     self['reporter'] = self._loadReporterByName(self['reporter'])
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\scripts\trial.py", 
line 370, in _loadReporterByName
     for p in plugin.getPlugins(itrial.IReporter):
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\plugin.py", line 
213, in getPlugins
     allDropins = getCache(package)
--- <exception caught here> ---
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\plugin.py", line 
171, in getCache
     provider = pluginModule.load()
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\python\modules.py", 
line 389, in load
     return self.pathEntry.pythonPath.moduleLoader(self.name)
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\python\reflect.py", 
line 303, in namedAny
     topLevelPackage = _importAndCheckStack(trialname)
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\python\reflect.py", 
line 242, in _importAndCheckStack
     return __import__(importName)
   File 
"C:\Users\chris\Dropbox\SRC\twisted\twisted\plugins\twisted_core.py", 
line 5, in <module>
     from twisted.internet.endpoints import _SystemdParser, 
_TCP6ServerParser, _StandardIOParser
   File 
"C:\Users\chris\Dropbox\SRC\twisted\twisted\internet\endpoints.py", line 
34, in <module>
     from twisted.internet.stdio import StandardIO, PipeAddress
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\internet\stdio.py", 
line 30, in <module>
     from twisted.internet import _win32stdio
   File 
"C:\Users\chris\Dropbox\SRC\twisted\twisted\internet\_win32stdio.py", 
line 15, in <module>
     from twisted.internet import _pollingfile, main
   File 
"C:\Users\chris\Dropbox\SRC\twisted\twisted\internet\_pollingfile.py", 
line 106, in <module>
     class _PollableReadPipe(_PollableResource):
   File 
"C:\Users\chris\Dropbox\SRC\twisted\twisted\internet\_pollingfile.py", 
line 108, in _PollableReadPipe
     implements(IPushProducer)
   File "C:\python35\lib\site-packages\zope\interface\declarations.py", 
line 412, in implements
     raise TypeError(_ADVICE_ERROR % 'implementer')
builtins.TypeError: Class advice impossible in Python3.  Use the 
@implementer class decorator instead.

Unexpected error while writing cache file
Traceback (most recent call last):
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\scripts\trial.py", 
line 473, in postOptions
     _BasicOptions.postOptions(self)
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\scripts\trial.py", 
line 383, in postOptions
     self['reporter'] = self._loadReporterByName(self['reporter'])
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\scripts\trial.py", 
line 370, in _loadReporterByName
     for p in plugin.getPlugins(itrial.IReporter):
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\plugin.py", line 
213, in getPlugins
     allDropins = getCache(package)
--- <exception caught here> ---
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\plugin.py", line 
185, in getCache
     dropinPath.setContent(pickle.dumps(dropinDotCache))
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\python\filepath.py", 
line 1532, in setContent
     os.rename(sib.path, self.path)
builtins.ValueError: rename: src and dst must be the same type

Traceback (most recent call last):
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\python\lockfile.py", 
line 91, in symlink
     rename(newlinkname, filename)
FileExistsError: [WinError 183] Cannot create a file when that file 
already exists: 
'C:\\Users\\chris\\Dropbox\\SRC\\twisted\\_trial_temp.lock.1446280185217.newlink' 
-> 'C:\\Users\\chris\\Dropbox\\SRC\\twisted\\_trial_temp.lock'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
   File "bin/trial", line 22, in <module>
     run()
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\scripts\trial.py", 
line 616, in run
     test_result = trialRunner.run(suite)
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\trial\runner.py", 
line 959, in run
     return self._runWithoutDecoration(test, self._forceGarbageCollection)
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\trial\runner.py", 
line 983, in _runWithoutDecoration
     oldDir = self._setUpTestdir()
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\trial\runner.py", 
line 886, in _setUpTestdir
     testdir, self._testDirLock = util._unusedTestDirectory(base)
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\trial\util.py", line 
356, in _unusedTestDirectory
     if testDirLock.lock():
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\python\lockfile.py", 
line 160, in lock
     symlink(str(os.getpid()), self.name)
   File "C:\Users\chris\Dropbox\SRC\twisted\twisted\python\lockfile.py", 
line 94, in symlink
     os.rmdir(newlinkname)
OSError: [WinError 145] The directory is not empty: 
'C:\\Users\\chris\\Dropbox\\SRC\\twisted\\_trial_temp.lock.1446280185217.newlink'

Is that a trial error or a Twisted test failing?

Sorry if this is a stupid question, but (terrible, I know) I've never 
used tests before.

Another quick google told me that Trial was ported to Python3, so I'm 
not sure... If it's a test failing, it's not really telling me where the 
failure is.

Cheers.


On 31/10/2015 07:39, Glyph Lefkowitz wrote:
>
>> On Oct 30, 2015, at 11:49 PM, Chris Norman 
>> <chris.norman2 at googlemail.com <mailto:chris.norman2 at googlemail.com>> 
>> wrote:
>>
>> Hi Amber
>>
>> On 31/10/2015 06:45, Amber "Hawkie" Brown wrote:
>>> Hi Chris,
>>>
>>> Twisted does not yet support Python 3 on Windows.
>>
>> That's a shame. I've never contributed to an open source project 
>> before, but I'd be glad to try and help out. I feel I __may__ know 
>> enough Python now to certainly have a shot at it.
>
> If you feel like you might, you definitely do :-).  Often people feel 
> like they need to be advanced rocket surgeons to work on Twisted, but 
> in fact, our robust code-review process means that you don't have to 
> worry about making mistakes at all.  Just submit your best effort, and 
> you'll get a code review telling you how to improve it so that it can 
> be integrated (and you _will_ get at least one round of review: I 
> created Twisted, and even _I_ can't usually land a patch without one 
> or two rounds of review ;-)).
>
> Thanks for offering to help out!  If everybody who wanted Python 3 
> support just signed on to work on a ticket like this, the port would 
> have been finished a year ago ;-).
>>> There's a ticket athttps://twistedmatrix.com/trac/ticket/8025#ticket  which makes all the tests pass on the platform; I just need to work on it some more. I expect Twisted 16.0 to have base support for Python 3 on Windows.
>> As above, if I can help, please tell me how!
>
> Our toolchain is a little clunky (sorry about that) for hysterical 
> raisins.
>
> Before I launch into an explanation though, are you already familiar 
> with Git and/or how to contribute on GitHub?
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151031/a101c338/attachment-0002.html>

From adi at roiban.ro  Sat Oct 31 02:31:21 2015
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 31 Oct 2015 10:31:21 +0200
Subject: [Twisted-Python] Possible bug
In-Reply-To: <563475E7.20901@googlemail.com>
References: <563462A2.7000309@googlemail.com>
 <344F2B0F-7787-451F-9075-52283232F70A@atleastfornow.net>
 <56346486.8040700@googlemail.com>
 <95F488D7-8C1C-462E-938A-9952C053B7D1@twistedmatrix.com>
 <563475E7.20901@googlemail.com>
Message-ID: <CAFycZ9dhbat3Af=sGuNwxSDLz=NTvFOhqonkb+y38qFoKFDA4w@mail.gmail.com>

On 31 October 2015 at 10:03, Chris Norman <chris.norman2 at googlemail.com> wrote:
> Hi,
> I've used git extensively, and I can soon read up on how to contribute on
> git. So what's the next step? Is there a howto somewhere on the Twisted
> site?

This is some info about contributing

http://twistedmatrix.com/trac/wiki/TwistedDevelopment

For git you should check http://twistedmatrix.com/trac/wiki/GitMirror

Join the #twisted-dev channel and maybe get in touch with Amber to see
if you can continue her great porting work :)

Regards,
Adi

> Cheers,
>
>
>
> On 31/10/2015 07:39, Glyph Lefkowitz wrote:
>
>
> On Oct 30, 2015, at 11:49 PM, Chris Norman <chris.norman2 at googlemail.com>
> wrote:
>
> Hi Amber
>
> On 31/10/2015 06:45, Amber "Hawkie" Brown wrote:
>
> Hi Chris,
>
> Twisted does not yet support Python 3 on Windows.
>
>
> That's a shame. I've never contributed to an open source project before, but
> I'd be glad to try and help out. I feel I __may__ know enough Python now to
> certainly have a shot at it.
>
>
> If you feel like you might, you definitely do :-).  Often people feel like
> they need to be advanced rocket surgeons to work on Twisted, but in fact,
> our robust code-review process means that you don't have to worry about
> making mistakes at all.  Just submit your best effort, and you'll get a code
> review telling you how to improve it so that it can be integrated (and you
> _will_ get at least one round of review: I created Twisted, and even _I_
> can't usually land a patch without one or two rounds of review ;-)).
>
> Thanks for offering to help out!  If everybody who wanted Python 3 support
> just signed on to work on a ticket like this, the port would have been
> finished a year ago ;-).
>
> There's a ticket at https://twistedmatrix.com/trac/ticket/8025#ticket which
> makes all the tests pass on the platform; I just need to work on it some
> more. I expect Twisted 16.0 to have base support for Python 3 on Windows.
>
> As above, if I can help, please tell me how!
>
>
> Our toolchain is a little clunky (sorry about that) for hysterical raisins.
>
> Before I launch into an explanation though, are you already familiar with
> Git and/or how to contribute on GitHub?
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Adi Roiban



