From glyph at twistedmatrix.com  Fri May  1 00:11:05 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 30 Apr 2015 23:11:05 -0700
Subject: [Twisted-Python] sorry about the win7 builder
Message-ID: <F08830B5-BFEF-4852-9E0A-3C815A86A7D6@twistedmatrix.com>

Looks like the win7 builder went offline while I wasn't paying attention.

I've gotten it security-updated and launched again, and it is presently chewing through the backlog on https://buildbot.twistedmatrix.com/builders/windows7-64-py2.7 <https://buildbot.twistedmatrix.com/builders/windows7-64-py2.7> - it should be current in a couple of hours.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150430/1abe10eb/attachment.html>

From the2nd at otpme.org  Fri May  1 11:08:23 2015
From: the2nd at otpme.org (the2nd at otpme.org)
Date: Fri, 01 May 2015 19:08:23 +0200
Subject: [Twisted-Python] twisted ldaptor
Message-ID: <c812495f17c1111a9c3fb0ea408e089a@otpme.org>

Hi all,

i just want to ask if this is the correct list to ask questions about 
https://github.com/twisted/ldaptor.

regards
the2nd


From glyph at twistedmatrix.com  Fri May  1 19:19:29 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 1 May 2015 18:19:29 -0700
Subject: [Twisted-Python] twisted ldaptor
In-Reply-To: <c812495f17c1111a9c3fb0ea408e089a@otpme.org>
References: <c812495f17c1111a9c3fb0ea408e089a@otpme.org>
Message-ID: <6591E609-B659-4CF0-ABA7-85FDA647EAD0@twistedmatrix.com>


> On May 1, 2015, at 10:08 AM, the2nd at otpme.org wrote:
> 
> Hi all,
> 
> i just want to ask if this is the correct list to ask questions about https://github.com/twisted/ldaptor.
> 
> regards
> the2nd

Sure, this list works!

-glyph



From the2nd at otpme.org  Sat May  2 04:37:16 2015
From: the2nd at otpme.org (the2nd at otpme.org)
Date: Sat, 02 May 2015 12:37:16 +0200
Subject: [Twisted-Python] twisted ldaptor
In-Reply-To: <6591E609-B659-4CF0-ABA7-85FDA647EAD0@twistedmatrix.com>
References: <c812495f17c1111a9c3fb0ea408e089a@otpme.org>
 <6591E609-B659-4CF0-ABA7-85FDA647EAD0@twistedmatrix.com>
Message-ID: <1da4146a7fb5b0c50ef7fbe49b69e3d0@otpme.org>


Ok :)

i'm currently investigating how to add ldap server support to OTPme 
(https://www.otpme.org) as i want to extend it to be a complete 
authentication/authorization system including some kind of directory 
service. so i started working on integration with ldaptor. my first 
problem, adding search support, is partly solved now. i've checked 
ldifftree.py and after some debugging i got a search() method that is 
able to do an indexed search of OTPme's directory (which is not in svn 
yet) which allows fast search results for a directory with more than 
2048 users.

but as this is just a start there will be more problems to solve i 
guess.

one issue i have is that an ldapsearch against ldaptor which requests 
just some attributes instead of all always returns all object 
attributes.

for example the ldapsearch below returns the complete ldif of each found 
user in ldaptor (tested also with ldiftree.py):

ldapsearch -H ldap://localhost:8080 -b "ou=users,dc=domain,dc=intern" -w 
abcd -x '(uid=*)' givenName

Running the same search against my openldap server it returns just the 
dn and givenName attributes of each found user.

Is this a missing feature or do i just miss something in my db class?

another important part i haven't looked at yet is how to implement 
authentication. as OTPme focus on OTPs i dont want to add any user 
passwords to the ldap tree. the smoothest solution would be to get 
username+OTP from ldaptor to do authentication. maybe you can give me 
some hints in the right direction? :)

and the last question for now is related the licensing. OTPme is 
licensed under GPLv2. do i run into any licensing issues when using 
ldaptor with OTPme?

regards
the2nd



On 2015-05-02 03:19, Glyph Lefkowitz wrote:
>> On May 1, 2015, at 10:08 AM, the2nd at otpme.org wrote:
>> 
>> Hi all,
>> 
>> i just want to ask if this is the correct list to ask questions about 
>> https://github.com/twisted/ldaptor.
>> 
>> regards
>> the2nd
> 
> Sure, this list works!
> 
> -glyph
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From jesadjust at gmail.com  Sat May  2 09:54:05 2015
From: jesadjust at gmail.com (Jessica Tsui)
Date: Sat, 2 May 2015 23:54:05 +0800
Subject: [Twisted-Python] Urgent - reactor is not working out of a sudden
Message-ID: <CALgu0tjTzb-TDw0opvnrKOKTaMaeq+P++2GA=P4MVghdv0fD0g@mail.gmail.com>

I was working on my program and everything was fine, out of the blue the
python editor just told me that connectTCP and listenTCP cannot be
referenced in reactor.py. I tried to reinstall twisted but that didn't help
at all. How could I solve this?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150502/d0498bb4/attachment.html>

From pierre at jaury.eu  Sat May  2 10:25:21 2015
From: pierre at jaury.eu (Pierre Jaury)
Date: Sat, 02 May 2015 18:25:21 +0200
Subject: [Twisted-Python] Urgent - reactor is not working out of a sudden
In-Reply-To: <CALgu0tjTzb-TDw0opvnrKOKTaMaeq+P++2GA=P4MVghdv0fD0g@mail.gmail.com>
References: <CALgu0tjTzb-TDw0opvnrKOKTaMaeq+P++2GA=P4MVghdv0fD0g@mail.gmail.com>
Message-ID: <5544FA71.9030504@jaury.eu>

Try looking for alternate reactor.py or reactor.pyc in your Python path
maybe?

kaiyou

Le 02/05/2015 17:54, Jessica Tsui a ?crit :
> I was working on my program and everything was fine, out of the blue the
> python editor just told me that connectTCP and listenTCP cannot be
> referenced in reactor.py. I tried to reinstall twisted but that didn't
> help at all. How could I solve this?

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 473 bytes
Desc: OpenPGP digital signature
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150502/449b4edd/attachment.pgp>

From itamar at itamarst.org  Sat May  2 10:31:33 2015
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sat, 02 May 2015 12:31:33 -0400
Subject: [Twisted-Python] Urgent - reactor is not working out of a sudden
In-Reply-To: <CALgu0tjTzb-TDw0opvnrKOKTaMaeq+P++2GA=P4MVghdv0fD0g@mail.gmail.com>
References: <CALgu0tjTzb-TDw0opvnrKOKTaMaeq+P++2GA=P4MVghdv0fD0g@mail.gmail.com>
Message-ID: <5544FBE5.5050901@itamarst.org>

On 05/02/2015 11:54 AM, Jessica Tsui wrote:
>
> I was working on my program and everything was fine, out of the blue 
> the python editor just told me that connectTCP and listenTCP cannot be 
> referenced in reactor.py. I tried to reinstall twisted but that didn't 
> help at all. How could I solve this?
>
>
reactor.py doesn't have those, yes - that's expected. Twisted does this 
terrible thing where it replaces "twisted.internet.reactor", which 
starts out as reactor.py, with a new object at import time. So your code 
should work even though the file itself is missing those functions. This 
is where it does that:

https://github.com/twisted/twisted/blob/trunk/twisted/internet/reactor.py#L36


From jesadjust at gmail.com  Sat May  2 10:44:30 2015
From: jesadjust at gmail.com (Jessica Tsui)
Date: Sun, 3 May 2015 00:44:30 +0800
Subject: [Twisted-Python] Urgent - reactor is not working out of a sudden
In-Reply-To: <5544FBE5.5050901@itamarst.org>
References: <CALgu0tjTzb-TDw0opvnrKOKTaMaeq+P++2GA=P4MVghdv0fD0g@mail.gmail.com>
 <5544FBE5.5050901@itamarst.org>
Message-ID: <CALgu0thmVzvGxeeNNifWWD9c4k=8zTHhK_f-gSnAmgw=tysdmw@mail.gmail.com>

Hi Itamar,
  I do understand that, however the case is that my code is not working all
of a sudden. It was fine a minute ago, server clients are connecting well
through listenTCP and connectTCP...however suddenly the program returns
failure in connection and when I look through the code the editor just says
that it cannot reference to connectTCP or listenTCP in reactor...which did
not happen before. I had no idea why.
On 3 May, 2015 12:32 am, "Itamar Turner-Trauring" <itamar at itamarst.org>
wrote:

> On 05/02/2015 11:54 AM, Jessica Tsui wrote:
>
>>
>> I was working on my program and everything was fine, out of the blue the
>> python editor just told me that connectTCP and listenTCP cannot be
>> referenced in reactor.py. I tried to reinstall twisted but that didn't help
>> at all. How could I solve this?
>>
>>
>>  reactor.py doesn't have those, yes - that's expected. Twisted does this
> terrible thing where it replaces "twisted.internet.reactor", which starts
> out as reactor.py, with a new object at import time. So your code should
> work even though the file itself is missing those functions. This is where
> it does that:
>
>
> https://github.com/twisted/twisted/blob/trunk/twisted/internet/reactor.py#L36
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150503/8342e55d/attachment.html>

From itamar at itamarst.org  Sat May  2 12:22:30 2015
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sat, 02 May 2015 14:22:30 -0400
Subject: [Twisted-Python] Urgent - reactor is not working out of a sudden
In-Reply-To: <CALgu0thmVzvGxeeNNifWWD9c4k=8zTHhK_f-gSnAmgw=tysdmw@mail.gmail.com>
References: <CALgu0tjTzb-TDw0opvnrKOKTaMaeq+P++2GA=P4MVghdv0fD0g@mail.gmail.com>
 <5544FBE5.5050901@itamarst.org>
 <CALgu0thmVzvGxeeNNifWWD9c4k=8zTHhK_f-gSnAmgw=tysdmw@mail.gmail.com>
Message-ID: <554515E6.1050305@itamarst.org>

On 05/02/2015 12:44 PM, Jessica Tsui wrote:
>
> Hi Itamar,
>   I do understand that, however the case is that my code is not 
> working all of a sudden. It was fine a minute ago, server clients are 
> connecting well through listenTCP and connectTCP...however suddenly 
> the program returns failure in connection and when I look through the 
> code the editor just says that it cannot reference to connectTCP or 
> listenTCP in reactor...which did not happen before. I had no idea why.
>
>

Can you post a minimal reproducing example?


From jesadjust at gmail.com  Sat May  2 12:24:34 2015
From: jesadjust at gmail.com (Jess Tsui)
Date: Sun, 3 May 2015 02:24:34 +0800
Subject: [Twisted-Python] Urgent - reactor is not working out of a sudden
In-Reply-To: <554515E6.1050305@itamarst.org>
References: <CALgu0tjTzb-TDw0opvnrKOKTaMaeq+P++2GA=P4MVghdv0fD0g@mail.gmail.com>
 <5544FBE5.5050901@itamarst.org>
 <CALgu0thmVzvGxeeNNifWWD9c4k=8zTHhK_f-gSnAmgw=tysdmw@mail.gmail.com>
 <554515E6.1050305@itamarst.org>
Message-ID: <A7572C1A-214A-4EAA-9165-B67281342549@gmail.com>

Just fixed the issue by downgrading twisted to 15.0.0 and restarted the computer?.thanks anyway :)

> On 3 May, 2015, at 2:22 am, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> 
> On 05/02/2015 12:44 PM, Jessica Tsui wrote:
>> 
>> Hi Itamar,
>>  I do understand that, however the case is that my code is not working all of a sudden. It was fine a minute ago, server clients are connecting well through listenTCP and connectTCP...however suddenly the program returns failure in connection and when I look through the code the editor just says that it cannot reference to connectTCP or listenTCP in reactor...which did not happen before. I had no idea why.
>> 
>> 
> 
> Can you post a minimal reproducing example?
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From trac at twistedmatrix.com  Sun May  3 00:05:17 2015
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 03 May 2015 06:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1430633117.85.8028048212725313492@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150503/c776b70c/attachment.html>

From glyph at twistedmatrix.com  Sun May  3 01:11:26 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 3 May 2015 00:11:26 -0700
Subject: [Twisted-Python] Urgent - reactor is not working out of a sudden
In-Reply-To: <A7572C1A-214A-4EAA-9165-B67281342549@gmail.com>
References: <CALgu0tjTzb-TDw0opvnrKOKTaMaeq+P++2GA=P4MVghdv0fD0g@mail.gmail.com>
 <5544FBE5.5050901@itamarst.org>
 <CALgu0thmVzvGxeeNNifWWD9c4k=8zTHhK_f-gSnAmgw=tysdmw@mail.gmail.com>
 <554515E6.1050305@itamarst.org>
 <A7572C1A-214A-4EAA-9165-B67281342549@gmail.com>
Message-ID: <186AB490-0737-4F8F-8A88-CC47448310C4@twistedmatrix.com>


> On May 2, 2015, at 11:24 AM, Jess Tsui <jesadjust at gmail.com> wrote:
> 
> Just fixed the issue by downgrading twisted to 15.0.0 and restarted the computer?.thanks anyway :)

It would be very helpful if you would help us diagnose this issue by re-upgrading to 15.1 and seeing if you can reproduce it.  How did you install Twisted?  How did you downgrade?

Sticking with older versions of Twisted means you won't get new features or security updates.  Having to downgrade like this indicates you won't be able to upgrade in the future, which will potentially mean you will miss out on lots of useful stuff.  Worse, if there's some bug in Twisted which caused this behavior, lots of _other_ people will miss out on the new stuff as well.  So please help us figure out how to get you re-upgraded to the current version :).

-glyph

From psi29a at gmail.com  Sun May  3 06:03:20 2015
From: psi29a at gmail.com (bret curtis)
Date: Sun, 3 May 2015 14:03:20 +0200
Subject: [Twisted-Python] twisted ldaptor
In-Reply-To: <1da4146a7fb5b0c50ef7fbe49b69e3d0@otpme.org>
References: <c812495f17c1111a9c3fb0ea408e089a@otpme.org>
 <6591E609-B659-4CF0-ABA7-85FDA647EAD0@twistedmatrix.com>
 <1da4146a7fb5b0c50ef7fbe49b69e3d0@otpme.org>
Message-ID: <CA+LhZ99=TRs-yXy5CNNMxDWanc+iUJ=Xb4eThsR1CYgyUp2WTA@mail.gmail.com>

Hello there,

if you wish to make a pull request, file a bug report or ask Ldaptor
specific questions, you can contact the developer directly here:
https://github.com/twisted/ldaptor/issues

Not everyone who works on Ldaptor is a member of this mailing list.

I'll try to answer inline:

On Sat, May 2, 2015 at 12:37 PM, <the2nd at otpme.org> wrote:

>
> i'm currently investigating how to add ldap server support to OTPme (
> https://www.otpme.org) as i want to extend it to be a complete
> authentication/authorization system including some kind of directory
> service. so i started working on integration with ldaptor. my first
> problem, adding search support, is partly solved now. i've checked
> ldifftree.py and after some debugging i got a search() method that is able
> to do an indexed search of OTPme's directory (which is not in svn yet)
> which allows fast search results for a directory with more than 2048 users.
>
>
Congratulations! :) How are you going about this? Are these additions
backwards compatible with OpenLDAP? Are you also writing test-cases to
cover these?


> but as this is just a start there will be more problems to solve i guess.
>

There always are, when I first started using Ldaptor, startTLS was broken
which was a requirement for me to do any work with it.


> one issue i have is that an ldapsearch against ldaptor which requests just
> some attributes instead of all always returns all object attributes.
> for example the ldapsearch below returns the complete ldif of each found
> user in ldaptor (tested also with ldiftree.py):
> ldapsearch -H ldap://localhost:8080 -b "ou=users,dc=domain,dc=intern" -w
> abcd -x '(uid=*)' givenName
> Running the same search against my openldap server it returns just the dn
> and givenName attributes of each found user.
> Is this a missing feature or do i just miss something in my db class?
>

Please file an issue on github with an example (ldif entries in a txt file
would work) that can be used to test with a real OpenLDAP server. Then the
ldapsearch like you provided above and a snippit of your ldaptor code so we
can try to reproduce it.


> another important part i haven't looked at yet is how to implement
> authentication. as OTPme focus on OTPs i dont want to add any user
> passwords to the ldap tree. the smoothest solution would be to get
> username+OTP from ldaptor to do authentication. maybe you can give me some
> hints in the right direction? :)


Another issue/question for github, there are others that have spent more
time in this area of the codebase.


> and the last question for now is related the licensing. OTPme is licensed
> under GPLv2. do i run into any licensing issues when using ldaptor with
> OTPme?
>
>
Ldaptor is MIT/Expat license, if you would like to commit code then that
too must be MIT/Expat otherwise it won't be accepted. As for using Ldaptor
to talk with OTPme, there shouldn't be a license problem as they are two
separate applications/services. What exactly is your concern there?



> regards
> the2nd
>
>
Cheers,
Bret
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150503/d9c6f0f3/attachment-0001.html>

From the2nd at otpme.org  Tue May  5 13:18:06 2015
From: the2nd at otpme.org (the2nd)
Date: Tue, 05 May 2015 21:18:06 +0200
Subject: [Twisted-Python] twisted ldaptor
In-Reply-To: <CA+LhZ99=TRs-yXy5CNNMxDWanc+iUJ=Xb4eThsR1CYgyUp2WTA@mail.gmail.com>
References: <c812495f17c1111a9c3fb0ea408e089a@otpme.org>
 <6591E609-B659-4CF0-ABA7-85FDA647EAD0@twistedmatrix.com>
 <1da4146a7fb5b0c50ef7fbe49b69e3d0@otpme.org>
 <CA+LhZ99=TRs-yXy5CNNMxDWanc+iUJ=Xb4eThsR1CYgyUp2WTA@mail.gmail.com>
Message-ID: <5549176E.10000@otpme.org>

Am 03.05.2015 um 14:03 schrieb bret curtis:
> Hello there,
>
> if you wish to make a pull request, file a bug report or ask Ldaptor 
> specific questions, you can contact the developer directly here:
> https://github.com/twisted/ldaptor/issues
>
> Not everyone who works on Ldaptor is a member of this mailing list.

Okay. I was not sure if it's okay to ask questions via the issue tracker. :)

>
> I'll try to answer inline:
>
> On Sat, May 2, 2015 at 12:37 PM, <the2nd at otpme.org 
> <mailto:the2nd at otpme.org>> wrote:
>
>
>     i'm currently investigating how to add ldap server support to
>     OTPme (https://www.otpme.org) as i want to extend it to be a
>     complete authentication/authorization system including some kind
>     of directory service. so i started working on integration with
>     ldaptor. my first problem, adding search support, is partly solved
>     now. i've checked ldifftree.py and after some debugging i got a
>     search() method that is able to do an indexed search of OTPme's
>     directory (which is not in svn yet) which allows fast search
>     results for a directory with more than 2048 users.
>
>
> Congratulations! :) How are you going about this? Are these additions 
> backwards compatible with OpenLDAP? Are you also writing test-cases to 
> cover these?

Thanks. :) But its still in an early stage.

Currently the ldap support is implemented on top of OTPme's users, 
groups, units etc. and will be read-only.

I've decided to implement it as OTPme extensions e.g. a "base" extension 
that handles object classes like "dcObject", "organizationalUnit", 
"inetOrgPerson" etc. and an "posix" extension for "posixAccount", 
"posixGroup" and so on. the extensions will also do things like 
uidNumber/gidNumber allocation etc.

An extension also automatically adds the needed objectClass if the 
attribute the admin adds to a user needs it. if the admin disables an 
extension (e.g. posix or maybe samba later) for a user the corresponding 
ldap attributes are no longer visible via ldap(tor) but not removed from 
the user so they can be re-enabled if needed. To resolve the attribute 
<> objectClass dependencies i've written a simple (and maybe incomplete 
;)) parser that can read openldap's schema files using 
http://www.python-ldap.org/doc/html/ldap-schema.html#module-ldap.schema

The OTPme specific attributes (tokens, timeout values etc.) are not 
implemented as ldap objects/attributes. The main reason for this is that 
i didn't had any plan about the features that OTPme will have as i 
started writing it a few months ago. I decided to learn python as my 
first language in december last year and just wanted write anything 
useful. it all started with the goal to implement 
http://motp.sourceforge.net/ in python. :)

So atm i haven't done anything more than writing a class (staring at the 
magic of ldiftree.py and friends ;)) that gets all needed objects, 
attributes etc. from the OTPme backend as ldif and that can do an 
indexed search using an OTPme function. This class basically works with 
ldaptor. The OTPme backend is implemented using flat files with some 
in-memory caching feature. It also supports AES encryption and i started 
writing an master/slave synchronization for it that should be later used 
to add some kind of cluster support to OTPme.

Maybe i'll implement all OTPme objects (tokens etc.) as ldap 
objects/attributes some day because this would make it possible to also 
get them from an external ldap server like openldap. But this also means 
that i need to create a OTPme schema that can be used with an ldap 
server like openldap. so i'm not sure if i'll go this road because not 
everyone can/wants to add a schema extension. Another idea would be to 
synchronize users from e.g. openldap and add them to OTPme/ldaptor. But 
all of this is not on my current todo.

Continuous integration is on my todo but as there are so many things to 
learn when one wants to learn wrinting software i haven't found the time 
yet.

>     but as this is just a start there will be more problems to solve i
>     guess.
>
>
> There always are, when I first started using Ldaptor, startTLS was 
> broken which was a requirement for me to do any work with it.
>
>     one issue i have is that an ldapsearch against ldaptor which
>     requests just some attributes instead of all always returns all
>     object attributes.
>     for example the ldapsearch below returns the complete ldif of each
>     found user in ldaptor (tested also with ldiftree.py):
>     ldapsearch -H ldap://localhost:8080 -b
>     "ou=users,dc=domain,dc=intern" -w abcd -x '(uid=*)' givenName
>     Running the same search against my openldap server it returns just
>     the dn and givenName attributes of each found user.
>     Is this a missing feature or do i just miss something in my db class?
>
>
> Please file an issue on github with an example (ldif entries in a txt 
> file would work) that can be used to test with a real OpenLDAP server. 
> Then the ldapsearch like you provided above and a snippit of your 
> ldaptor code so we can try to reproduce it.

Done: https://github.com/twisted/ldaptor/issues/38

>     another important part i haven't looked at yet is how to implement
>     authentication. as OTPme focus on OTPs i dont want to add any user
>     passwords to the ldap tree. the smoothest solution would be to get
>     username+OTP from ldaptor to do authentication. maybe you can give
>     me some hints in the right direction? :)
>
> Another issue/question for github, there are others that have spent 
> more time in this area of the codebase.
>

Done: https://github.com/twisted/ldaptor/issues/39

>
>     and the last question for now is related the licensing. OTPme is
>     licensed under GPLv2. do i run into any licensing issues when
>     using ldaptor with OTPme?
>
>
> Ldaptor is MIT/Expat license, if you would like to commit code then 
> that too must be MIT/Expat otherwise it won't be accepted. As for 
> using Ldaptor to talk with OTPme, there shouldn't be a license problem 
> as they are two separate applications/services. What exactly is your 
> concern there?

I dont have any special concern. I'm just new to all of this and wanted 
to make sure it's okay to use ldaptor it with an GPL'ed software.

And if i ever will (be able to ;)) commit any code to ldaptor i'm fine 
with the MIT/Expat license. :)

>
>     regards
>     the2nd
>
>
> Cheers,
> Bret
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150505/24eed37e/attachment.html>

From timothy.gallagher at nuspire.com  Tue May  5 16:17:18 2015
From: timothy.gallagher at nuspire.com (Timothy Gallagher)
Date: Tue, 5 May 2015 22:17:18 +0000
Subject: [Twisted-Python] Twisted-Python Digest, Vol 132, Issue 23
In-Reply-To: <mailman.4757.1426829119.2222.twisted-python@twistedmatrix.com>
References: <mailman.4757.1426829119.2222.twisted-python@twistedmatrix.com>
Message-ID: <2E0A0B508EE01A488C1CC7275D3706B9D09C4B51@DC1EXCHANGE.nuspire.net>

Glyph I just saw this response in my junk mail.  Thank you for the help, I can work with this.

Tj

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of twisted-python-request at twistedmatrix.com
Sent: Friday, March 20, 2015 1:26 AM
To: twisted-python at twistedmatrix.com
Subject: Twisted-Python Digest, Vol 132, Issue 23

Send Twisted-Python mailing list submissions to
	twisted-python at twistedmatrix.com

To subscribe or unsubscribe via the World Wide Web, visit
	http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
or, via email, send a message with subject or body 'help' to
	twisted-python-request at twistedmatrix.com

You can reach the person managing the list at
	twisted-python-owner at twistedmatrix.com

When replying, please edit your Subject line so it is more specific than "Re: Contents of Twisted-Python digest..."


Today's Topics:

   1. custom FTP server is blocking (Paul Wiseman)
   2. Re: custom FTP server is blocking (Louis D. Burr)
   3. Re: __nonzero__ for Deferred (Glyph Lefkowitz)
   4. Re: Removing Python 2.6 Support after Twisted 15.1 (David Ripton)
   5. Re: twistechecker and twisted-dev-tools as part of	twisted
      main repo (Glyph)
   6. Re: twisted echo ssl client with .p12 (Glyph)


----------------------------------------------------------------------

Message: 1
Date: Thu, 19 Mar 2015 18:18:27 +0000
From: Paul Wiseman <poalman at gmail.com>
To: Twisted general discussion <twisted-python at twistedmatrix.com>
Subject: [Twisted-Python] custom FTP server is blocking
Message-ID:
	<CACgdh2i4n5CgwiOQ124YeM-Cyqp+3rMwHGFN7cnq5dt=C_Ne0A at mail.gmail.com>
Content-Type: text/plain; charset=UTF-8

I have some blocking going on in a custom twisted ftp server and I'm trying to pin point what exactly is doing it.

I think this line in openForReading on my FTPShell object could be the culprit:

_FileReader(urllib2.urlopen(result.link,timeout=settings.GLOBAL_TIMEOUT))

(_FileReader is twisted.protocols.ftp._FileReader and result.link a url string)

I'm guessing urllib2.urlopen blocks resolving the domain and connecting? What would be the twisted equivalent way of providing a file like object of the download stream to the FileReader that wouldn't block?

Regards,

Paul



------------------------------

Message: 2
Date: Thu, 19 Mar 2015 15:38:30 -0500
From: "Louis D. Burr" <ldanielburr at me.com>
To: Twisted general discussion <twisted-python at twistedmatrix.com>
Subject: Re: [Twisted-Python] custom FTP server is blocking
Message-ID: <3E9E76E8-E3D3-4905-86B1-0003192C2834 at me.com>
Content-Type: text/plain; charset=us-ascii

Hi Paul,

> On Mar 19, 2015, at 1:18 PM, Paul Wiseman <poalman at gmail.com> wrote:
> 
> I have some blocking going on in a custom twisted ftp server and I'm 
> trying to pin point what exactly is doing it.
> 
> I think this line in openForReading on my FTPShell object could be the culprit:
> 
> _FileReader(urllib2.urlopen(result.link,timeout=settings.GLOBAL_TIMEOU
> T))
> 

Yeah, urllib2.urlopen() blocks, so this is at least one place in your code that will cause you a problem.

> (_FileReader is twisted.protocols.ftp._FileReader and result.link a 
> url string)
> 
> I'm guessing urllib2.urlopen blocks resolving the domain and 
> connecting? What would be the twisted equivalent way of providing a 
> file like object of the download stream to the FileReader that 
> wouldn't block?
> 

You probably want to use twisted.web.client.Agent for this, as it allows you to perform non-blocking http requests.  If you can live with buffering the http response body into, say, a tempfile or an io.BytesIO instance, then you can just pass that to _FileReader as the fObj argument and call it a day.


Hope this helps,

--
L. Daniel Burr




------------------------------

Message: 3
Date: Thu, 19 Mar 2015 14:13:48 -0700
From: Glyph Lefkowitz <glyph at twistedmatrix.com>
To: Twisted general discussion <twisted-python at twistedmatrix.com>
Subject: Re: [Twisted-Python] __nonzero__ for Deferred
Message-ID: <18084B73-66AE-4F0A-857C-507D27537533 at twistedmatrix.com>
Content-Type: text/plain; charset=us-ascii


> On Mar 18, 2015, at 5:50 PM, exarkun at twistedmatrix.com wrote:
> 
> On 18 Mar, 10:03 pm, glyph at twistedmatrix.com wrote:
>> I'd like to deprecate and remove __nonzero__ on Deferreds. Occasionally I see code where someone (maybe even me) does "if d:" where they should have been doing "@d.addCallback def cb(result): if result: ...".
>> 
>> Anybody else have this issue?  Objections?
> 
> Er.  What?  It's a little early for april fools' day, isn't it?

> Seriously, this is weird.  Am I missing something?

Apparently?

> Can expand on what it would mean to deprecated a special method of a 
> class that doesn't even define it

Add such a method and cause it to emit a warning, then raise an exception.

> and what makes Deferred unique among all user-defined classes in this regard.

As I stated in my original message, there's a class of bug where someone does "if somethingThatReturnsDeferred()".  Particularly, "if checkPassword()" is a dangerous manifestation of this class of bug.  I'd like this to fail noisily instead of appearing to work.

In my opinion, having all user-defined classes implement true truthiness by default is a design error in the language.  It's a usually-harmless one except in a few cases, and this is one of those cases, which is why Deferred is not the same as the average user-defined class.

-glyph




------------------------------

Message: 4
Date: Thu, 19 Mar 2015 20:23:35 -0400
From: David Ripton <dripton at ripton.net>
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] Removing Python 2.6 Support after
	Twisted 15.1
Message-ID: <550B6887.4020703 at ripton.net>
Content-Type: text/plain; charset=utf-8

On 03/19/2015 08:05 AM, Phil Mayers wrote:
> On 18/03/15 23:57, Glyph Lefkowitz wrote:
> 
>> Rather than just suggest we preserve the status quo and stay on 2.6 
>> forever to do indefinite free work to support Red Hat's obsolescence
> 
> You *definitely* shouldn't do that. Push back on RedHat, and tell 
> customers to push back on RedHat. I say this to other projects.

Red Hat supports old versions of RHEL forever because they have customers that want that (because they have legacy apps that they want to keep working with minimal maintenance, but who still want security patches), and are willing to pay for it.  It's a good thing that someone provides that option, even if we don't all need it.

That doesn't mean Twisted needs to support old versions of RHEL forever.
 RHEL 7 has been out for a while, and comes with Python 2.7 as the default.  So even if Twisted drops support for Python 2.6, it'll still work on RHEL.  (Just not on old versions of RHEL.)

Furthermore, SCL makes Python 2.7 available (in /opt) on RHEL 5 and 6 and CentOS 6, without users needing to build it themselves.  So even those who are stuck with old versions can install SCL, then use pip to install new Twisted.

IOW, I wouldn't worry about it.  Drop support for Python 2.6 when it makes sense for Twisted.

-- 
David Ripton    dripton at ripton.net



------------------------------

Message: 5
Date: Thu, 19 Mar 2015 20:25:04 -0700
From: Glyph <glyph at twistedmatrix.com>
To: Twisted general discussion <twisted-python at twistedmatrix.com>
Subject: Re: [Twisted-Python] twistechecker and twisted-dev-tools as
	part of	twisted main repo
Message-ID: <790710C6-7461-4E4C-A796-381BD3ED2679 at twistedmatrix.com>
Content-Type: text/plain; charset=utf-8


> On Mar 19, 2015, at 8:41 AM, Christopher Armstrong <radix at twistedmatrix.com> wrote:
> 
> 
>> On Mar 19, 2015, at 4:45 AM, Adi Roiban <adi at roiban.ro> wrote:
>> 
>>> OK, cool.  I didn't realize that was ready for review.  I am liking 
>>> the process we have for Mimic for flagging PRs with keywords - 
>>> https://github.com/rackerlabs/mimic/pulls - but this needs 
>>> automation so as not to be unfriendly to non-committer contributors.
>>> 
>>> I'll try to get to it by the end of the week.
>> 
>> For twistedchecker I start using tags ... but I don't have 
>> permissions for twisted-infra repos.
>> 
>> Yes. GitHub PR are nice but horrible for implementing anything formal 
>> on top of it.
>> 
>> I was preparing to suggest someting similar also for Trac as 
>> sometimes I am not sure if a comment is 'do minor changes and merge' 
>> or 'do minor change and send them for review'
>> 
>> My suggestion is this:
>> 
>> when a PR is ready for review the author should leave a comment 
>> containing the `needs-review` marker. This will send a hook and a 
>> custom hook server will update the tags of the ticket.
>> 
> 
> 
> I suggest making the default, tagless state of a PR mean ?in review?, for a couple of reasons:
> 
> - having labels for both `needs-changes` and `in-review` means you can 
> enter an invalid state where both labels are applied
> - if the automation loses track of a PR, we don?t want people 
> filtering only for PRs with `label:in-review` and missing out on the 
> forgotten PR
> 
> so I propose tagless PRs be considered ?in review?, and a label only for `needs-changes`.

I like seeing the big green "ready for review" on Mimic PRs; it's more eye-catching.  We can have 2 labels though, so that if the automation breaks, we can have a periodic check that adds "in-review" to everything un-labeled.

-g


------------------------------

Message: 6
Date: Thu, 19 Mar 2015 22:25:10 -0700
From: Glyph <glyph at twistedmatrix.com>
To: Twisted general discussion <twisted-python at twistedmatrix.com>
Subject: Re: [Twisted-Python] twisted echo ssl client with .p12
Message-ID: <1AE7D177-6F83-4204-B088-3706F7E1B05F at twistedmatrix.com>
Content-Type: text/plain; charset="us-ascii"


> On Mar 19, 2015, at 8:36 AM, Louis D. Burr <ldanielburr at me.com> wrote:
> 
> Hi Timothy,
> 
>> On Mar 19, 2015, at 9:56 AM, Timothy Gallagher <timothy.gallagher at nuspire.com <mailto:timothy.gallagher at nuspire.com>> wrote:
>> 
>> Hello all,
>> I have a project that requires client server with ssl/tls including client certificate authentication.  Also the a requirement is that the client needs to use a .p12 file to house its keys.  I have the server part and client part down except I cannot find any code examples using a .p12 file to get the certificates.  Can this be done without having to hack into the ssl.ClientConextFactory?
> 
> Maybe http://stackoverflow.com/questions/6345786/python-reading-a-pkcs12-certificate-with-pyopenssl-crypto <http://stackoverflow.com/questions/6345786/python-reading-a-pkcs12-certificate-with-pyopenssl-crypto> will be useful to you.  Twisted uses pyopenssl under the covers, so the solution exarkun posted to StackOverflow should be applicable.
> 
> Hope this helps,
> 
> - L. Daniel Burr

You definitely shouldn't use ssl.ClientContextFactory.  It doesn't verify certificates, or provide any authentication of the server.  We should really remove and deprecate it :-\.

You should use ssl.optionsForClientTLS, and you should build it like this:

import getpass

from OpenSSL.crypto import load_pkcs12
from twisted.internet.ssl import (
    PrivateCertificate, KeyPair, Certificate, optionsForClientTLS
)

from twisted.internet.protocol import Factory, Protocol from twisted.internet.endpoints import SSL4ClientEndpoint from twisted.internet.defer import inlineCallbacks, Deferred from twisted.internet.task import react

@inlineCallbacks
def main(reactor, p12file, host, port=443):
    host = host.decode("utf-8")
    port = int(port)
    with open(p12file) as f:
        pkcs12 = load_pkcs12(f.read(), getpass.getpass())
        publicCertificate = Certificate(pkcs12.get_certificate())
        privateKey = KeyPair(pkcs12.get_privatekey())
        privateCertificate = PrivateCertificate.fromCertificateAndKeyPair(
            publicCertificate, privateKey
        )
    contextFactory = optionsForClientTLS(host,
                                         clientCertificate=privateCertificate)
    endpoint = SSL4ClientEndpoint(reactor, host, port, contextFactory)
    x = Deferred()
    class it(Protocol, object):
        def connectionMade(self):
            self.transport.write(b"GET / HTTP/1.1\r\n\r\n")
        def dataReceived(self, data):
            x.callback(Certificate.peerFromTransport(self.transport))
            self.transport.abortConnection()
    yield endpoint.connect(Factory.forProtocol(it))
    cert = yield x
    print(cert)

from sys import argv
react(main, argv[1:])

Hopefully that's a pretty complete answer :-).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150319/5d5edec5/attachment.html>

------------------------------

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


End of Twisted-Python Digest, Vol 132, Issue 23
***********************************************



From glyph at twistedmatrix.com  Tue May  5 18:26:02 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 5 May 2015 17:26:02 -0700
Subject: [Twisted-Python] buildbot celebration!
Message-ID: <CE93F831-61A0-4F69-A10F-55CDEBE84858@twistedmatrix.com>

Thanks to the efforts of Adi Roiban and HawkOwl, we now have our first 100% supported green trunk run in a while:

https://buildbot.twistedmatrix.com/boxes-supported?branch=trunk&num_builds=10

Care and feeding for the build farm is an often thankless and invisible job; things can often start failing for irrelevant reasons outside of changes to Twisted and it requires work to get it back on track and keep our quality where it should be, so I just wanted to call it out specifically and say THANK YOU for fixing the builder configuration and getting us back to where we should be :).

Hooray!

-glyph

From rgacote at appropriatesolutions.com  Tue May  5 18:53:03 2015
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Tue, 5 May 2015 20:53:03 -0400
Subject: [Twisted-Python] buildbot celebration!
In-Reply-To: <CE93F831-61A0-4F69-A10F-55CDEBE84858@twistedmatrix.com>
References: <CE93F831-61A0-4F69-A10F-55CDEBE84858@twistedmatrix.com>
Message-ID: <CAG5tnzq0+qmsoaK6+yYAf4jwfB87KAdT20FgJ5nT72Qc=Oy72Q@mail.gmail.com>

So pretty to see all those green Windows builds...

On Tue, May 5, 2015 at 8:26 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

> Thanks to the efforts of Adi Roiban and HawkOwl, we now have our first
> 100% supported green trunk run in a while:
>
>
> https://buildbot.twistedmatrix.com/boxes-supported?branch=trunk&num_builds=10
>
> Care and feeding for the build farm is an often thankless and invisible
> job; things can often start failing for irrelevant reasons outside of
> changes to Twisted and it requires work to get it back on track and keep
> our quality where it should be, so I just wanted to call it out
> specifically and say THANK YOU for fixing the builder configuration and
> getting us back to where we should be :).
>
> Hooray!
>
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Raymond Cote, President
voice: +1.603.924.6079 email: rgacote at AppropriateSolutions.com skype:
ray.cote
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150505/55fb8805/attachment.html>

From saoili at gmail.com  Wed May  6 02:26:25 2015
From: saoili at gmail.com (Saoili)
Date: Wed, 6 May 2015 09:26:25 +0100
Subject: [Twisted-Python] Fwd: Adding callbacks using loop variables
In-Reply-To: <CAMWNtQppK_1i_8vxOGkfo4r0zMWrnrK0sBywaR1OjzYn8L9bzA@mail.gmail.com>
References: <CAMWNtQppK_1i_8vxOGkfo4r0zMWrnrK0sBywaR1OjzYn8L9bzA@mail.gmail.com>
Message-ID: <CAMWNtQrMKDVj+UuXKphj7W1TvvkMPJOwRxsw3CuGK8V9B0DJyA@mail.gmail.com>

Hi folks,

I was going to ask a question, but a colleague resolved it for me. I
thought I'd share the result!

We often end up using lambda to add callbacks, especially where we want to
pass the response to a deferred into a function and it's not the first
parameter. However, if you do that inside a loop and one of the variables
you're passing is a loop variable, you're going to get the same value for
that loop variable in all of your callbacks (the last one). The solution is
to avoid calling lambda, either by reordering the expected params in
function you're calling, or by creating a small function that just reorders
what's passed to it and sends them to that function in the right order.

Hopefully that's useful to someone.
Sorcha


Eg. code BEFORE
            for loop_var in a_dict['loop_vars']:
                d = self.returns_a_deferred(loop_var["x"])
                d.addCallback(
                    lambda ret_val: self.do_another_thing(
                        other_param, loop_var.copy(), ret_val
                    )
                )
                _dlist.append(d)
            return defer.DeferredList(_dlist)

Eg. code AFTER
            def other_func(ret_val, other_param, loop_var):
                return self.do_other_thing(
                    other_param, loop_var, ret_val
                )

            for loop_var in a_dict['loop_vars']:
                d = self.returns_a_deferred(loop_var["x"])
                d.addCallback(other_func, other_param, loop_var)
                _dlist.append(d)
            return defer.DeferredList(_dlist)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150506/9c3bbf3b/attachment.html>

From mithrandi at mithrandi.net  Wed May  6 04:15:44 2015
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Wed, 6 May 2015 12:15:44 +0200
Subject: [Twisted-Python] Fwd: Adding callbacks using loop variables
In-Reply-To: <CAMWNtQrMKDVj+UuXKphj7W1TvvkMPJOwRxsw3CuGK8V9B0DJyA@mail.gmail.com>
References: <CAMWNtQppK_1i_8vxOGkfo4r0zMWrnrK0sBywaR1OjzYn8L9bzA@mail.gmail.com>
 <CAMWNtQrMKDVj+UuXKphj7W1TvvkMPJOwRxsw3CuGK8V9B0DJyA@mail.gmail.com>
Message-ID: <CAMcKhMSL7f=ZbadgyZx=qQv2SCzAw4u81WQcseoUviN37g+B9w@mail.gmail.com>

On 6 May 2015 at 10:26, Saoili <saoili at gmail.com> wrote:
> Eg. code BEFORE
>             for loop_var in a_dict['loop_vars']:
>                 d = self.returns_a_deferred(loop_var["x"])
>                 d.addCallback(
>                     lambda ret_val: self.do_another_thing(
>                         other_param, loop_var.copy(), ret_val
>                     )
>                 )
>                 _dlist.append(d)
>             return defer.DeferredList(_dlist)
>
> Eg. code AFTER
>             def other_func(ret_val, other_param, loop_var):
>                 return self.do_other_thing(
>                     other_param, loop_var, ret_val
>                 )
>
>             for loop_var in a_dict['loop_vars']:
>                 d = self.returns_a_deferred(loop_var["x"])
>                 d.addCallback(other_func, other_param, loop_var)
>                 _dlist.append(d)
>             return defer.DeferredList(_dlist)

There's another common trick for dealing with this, that relies on the
fact that default argument values are evaluated when the lambda
expression itself (not the body of the lambda!) is initially
evaluated; basically, just add an extra parameter with a default value
of the loop variable. For example:

             for loop_var in a_dict['loop_vars']:
                 d = self.returns_a_deferred(loop_var["x"])
                 d.addCallback(
                     lambda ret_val, loop_var=loop_var: self.do_another_thing(
                         other_param, loop_var.copy(), ret_val
                     )
                 )
                 _dlist.append(d)
             return defer.DeferredList(_dlist)

However, separating the code out into a separate function may serve to
make the code clearer.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From tom.prince at ualberta.net  Wed May  6 05:21:26 2015
From: tom.prince at ualberta.net (Tom Prince)
Date: Wed, 06 May 2015 05:21:26 -0600
Subject: [Twisted-Python] Fwd: Adding callbacks using loop variables
In-Reply-To: <CAMWNtQrMKDVj+UuXKphj7W1TvvkMPJOwRxsw3CuGK8V9B0DJyA@mail.gmail.com>
References: <CAMWNtQppK_1i_8vxOGkfo4r0zMWrnrK0sBywaR1OjzYn8L9bzA@mail.gmail.com>
 <CAMWNtQrMKDVj+UuXKphj7W1TvvkMPJOwRxsw3CuGK8V9B0DJyA@mail.gmail.com>
Message-ID: <874mnqne89.fsf@hermes.hocat.ca>


Another option is

   for loop_var in a_dict['loop_vars']:
       d = self.returns_a_deferred(loop_var["x"])
       d.addCallback(
           lambda ret_val, loop_var=lopp_var:
               self.do_another_thing(
                  other_param, loop_var, ret_val)
           )
       )
       _dlist.append(d)
   return defer.DeferredList(_dlist)


This works because default values are evaluated at the point of definition.


From kebin70 at gmail.com  Wed May  6 12:04:45 2015
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Wed, 6 May 2015 11:04:45 -0700
Subject: [Twisted-Python] can QtWebKit fire a twisted deferred?
Message-ID: <CAA-sNEYn2ezkPAvj=w8Rmux++ZVBESx0VnUYynd6A_+r3n0B1g@mail.gmail.com>

'''

I know this is meant for pyqt but I've had little luck this that board.


The short answer is yes, but it's a total hack...and I'm wondering if
anybody has a more elegant solution.


Specifically I would like to be able to fire a defer from the javascript
instead of having to call alert.


Below is an example of how I currently gain access...not necessarily a
working version.

'''


url = 'http://www.google.com'


mo = """

    var observer = new MutationObserver(function(mutations) {

        for (var x = 0; x < mutations.length; x++) {

            if (mutations[x].addedNodes.length > 0) {

                alert('add nodes')

            }

        }

    });

    var config = { attributes: true, childList: true, characterData: false }

    var nti = document.querySelector('document.body')

    observer.observe(nti, config);

"""


page = QWebPage()

def alarmAction(qframe, msg):

    print 'deferred action', qframe, msg

def mutationHook():

    d = defer.Deferred()

    d.addCallback(alarmAction)

    page.javaScriptAlert = d.callback

    page.mainFrame().documentElement().evaluateJavaScript(mo)



page.loadFinished(mutationHook)

page.mainFrame().setUrl(url)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150506/df2789a0/attachment.html>

From glyph at twistedmatrix.com  Wed May  6 16:35:31 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 6 May 2015 15:35:31 -0700
Subject: [Twisted-Python] can QtWebKit fire a twisted deferred?
In-Reply-To: <CAA-sNEYn2ezkPAvj=w8Rmux++ZVBESx0VnUYynd6A_+r3n0B1g@mail.gmail.com>
References: <CAA-sNEYn2ezkPAvj=w8Rmux++ZVBESx0VnUYynd6A_+r3n0B1g@mail.gmail.com>
Message-ID: <8DC2DF48-5B49-4937-BF02-A5F567B7E0F1@twistedmatrix.com>


> On May 6, 2015, at 11:04 AM, Kevin Mcintyre <kebin70 at gmail.com> wrote:
> 
> '''
> I know this is meant for pyqt but I've had little luck this that board.
> 
> The short answer is yes, but it's a total hack...and I'm wondering if anybody has a more elegant solution.  
> 
> Specifically I would like to be able to fire a defer from the javascript instead of having to call alert.
> 
> Below is an example of how I currently gain access...not necessarily a working version.
> '''  

I don't see any import of qt4reactor or Twisted (other than the implied import of Deferred) in this code.  Firing a Deferred in this way should be totally fine though; you don't actually need the reactor for Deferreds to work (it's just important that if it's going to interact with any other Twisted code it needs to run on the main thread).

Sorry I don't have a better suggestion, but I don't see much wrong with what you're doing here :).

-g

> url = 'http://www.google.com <http://www.google.com/>'
> 
> mo = """
>     var observer = new MutationObserver(function(mutations) {
>         for (var x = 0; x < mutations.length; x++) {
>             if (mutations[x].addedNodes.length > 0) {
>                 alert('add nodes')                
>             }
>         }
>     });
>     var config = { attributes: true, childList: true, characterData: false }
>     var nti = document.querySelector('document.body')
>     observer.observe(nti, config);            
> """
> 
> page = QWebPage()
> def alarmAction(qframe, msg):
>     print 'deferred action', qframe, msg
> def mutationHook():
>     d = defer.Deferred()
>     d.addCallback(alarmAction)
>     page.javaScriptAlert = d.callback
>     page.mainFrame().documentElement().evaluateJavaScript(mo)
>     
> page.loadFinished(mutationHook)
> page.mainFrame().setUrl(url)
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150506/6f0d0f47/attachment.html>

From itamar at itamarst.org  Wed May  6 19:03:11 2015
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 06 May 2015 21:03:11 -0400
Subject: [Twisted-Python] Crochet 1.4.0: use Twisted anywhere!
Message-ID: <554AB9CF.7080709@itamarst.org>

Crochet is an MIT-licensed library that makes it easier to use Twisted 
from regular blocking code:

from __future__ import print_function
from twisted.names import client
from crochet import setup, wait_for
setup()

@wait_for(timeout=5.0)
def gethostbyname(name):
     """Use the Twisted DNS library."""
     d = client.lookupAddress(name)
     d.addCallback(lambda result: result[0][0].payload.dottedQuad())
     return d

if __name__ == '__main__':
     # Application code using the public API - notice it works in a normal
     # blocking manner, with no event loop visible:
     import sys
     name = sys.argv[1]
     ip = gethostbyname(name)
     print(name, "->", ip)


New in 1.4.0 is Python 3.4 support as well as support for using Crochet 
with uWSGI, and additional documentation on workarounds for various 
limitations of Crochet.

https://pypi.python.org/pypi/crochet for downloads.
https://crochet.readthedocs.org/ for documentation.


--Itamar Turner-Trauring



From kebin70 at gmail.com  Wed May  6 19:24:01 2015
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Wed, 6 May 2015 18:24:01 -0700
Subject: [Twisted-Python] can QtWebKit fire a twisted deferred?
In-Reply-To: <8DC2DF48-5B49-4937-BF02-A5F567B7E0F1@twistedmatrix.com>
References: <CAA-sNEYn2ezkPAvj=w8Rmux++ZVBESx0VnUYynd6A_+r3n0B1g@mail.gmail.com>
 <8DC2DF48-5B49-4937-BF02-A5F567B7E0F1@twistedmatrix.com>
Message-ID: <CAA-sNEacu0jywtUbE6Y=TRKLWLnfQW0-0m63SDum6KzzhiKvmA@mail.gmail.com>

That was pseudo code, I've been using qt5reactor to happy results.  All the
same good to know on deferreds working in non-twisted code...

My challenge is having only 2 hooks into the DOM - javaScriptAlert and
javaScriptConfirm that ultimately with QtWebEngine aren't available.

thank for the feedback.

On Wed, May 6, 2015 at 3:35 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On May 6, 2015, at 11:04 AM, Kevin Mcintyre <kebin70 at gmail.com> wrote:
>
> '''
> I know this is meant for pyqt but I've had little luck this that board.
>
> The short answer is yes, but it's a total hack...and I'm wondering if
> anybody has a more elegant solution.
>
> Specifically I would like to be able to fire a defer from the javascript
> instead of having to call alert.
>
> Below is an example of how I currently gain access...not necessarily a
> working version.
> '''
>
>
> I don't see any import of qt4reactor or Twisted (other than the implied
> import of Deferred) in this code.  Firing a Deferred in this way should be
> totally fine though; you don't actually need the reactor for Deferreds to
> work (it's just important that if it's going to interact with any *other* Twisted
> code it needs to run on the main thread).
>
> Sorry I don't have a better suggestion, but I don't see much wrong with
> what you're doing here :).
>
> -g
>
> url = 'http://www.google.com'
>
> mo = """
>     var observer = new MutationObserver(function(mutations) {
>         for (var x = 0; x < mutations.length; x++) {
>             if (mutations[x].addedNodes.length > 0) {
>                 alert('add nodes')
>             }
>         }
>     });
>     var config = { attributes: true, childList: true, characterData:
> false }
>     var nti = document.querySelector('document.body')
>     observer.observe(nti, config);
> """
>
> page = QWebPage()
> def alarmAction(qframe, msg):
>     print 'deferred action', qframe, msg
> def mutationHook():
>     d = defer.Deferred()
>     d.addCallback(alarmAction)
>     page.javaScriptAlert = d.callback
>     page.mainFrame().documentElement().evaluateJavaScript(mo)
>
>
> page.loadFinished(mutationHook)
> page.mainFrame().setUrl(url)
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150506/1c91139c/attachment-0001.html>

From glyph at twistedmatrix.com  Wed May  6 20:22:41 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 6 May 2015 19:22:41 -0700
Subject: [Twisted-Python] can QtWebKit fire a twisted deferred?
In-Reply-To: <CAA-sNEacu0jywtUbE6Y=TRKLWLnfQW0-0m63SDum6KzzhiKvmA@mail.gmail.com>
References: <CAA-sNEYn2ezkPAvj=w8Rmux++ZVBESx0VnUYynd6A_+r3n0B1g@mail.gmail.com>
 <8DC2DF48-5B49-4937-BF02-A5F567B7E0F1@twistedmatrix.com>
 <CAA-sNEacu0jywtUbE6Y=TRKLWLnfQW0-0m63SDum6KzzhiKvmA@mail.gmail.com>
Message-ID: <63B37B6C-35B9-4D0F-9E32-08DCCF23F83D@twistedmatrix.com>

> On May 6, 2015, at 6:24 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:
> 
> That was pseudo code, I've been using qt5reactor to happy results.  All the same good to know on deferreds working in non-twisted code...

pseudo-code can sometimes illustrate a point, but when working with a real, large, complex API like Qt, it's often useful to have a http://sscce.org <http://sscce.org/> available to make sure the point you are demonstrating is the same as the point you think you're demonstrating :).

> My challenge is having only 2 hooks into the DOM - javaScriptAlert and javaScriptConfirm that ultimately with QtWebEngine aren't available.

When working with JS containers like this myself in the past, and needing to communicate with them from the container, I generally use eval as input:

http://doc.qt.io/qt-5/qwebenginepage.html#runJavaScript-2 <http://doc.qt.io/qt-5/qwebenginepage.html#runJavaScript-2>

and then console messages as output:

http://doc.qt.io/qt-5/qwebenginepage.html#javaScriptConsoleMessage <http://doc.qt.io/qt-5/qwebenginepage.html#javaScriptConsoleMessage>

You should be able to speak to the JS running inside your container by emitting specially-formatted console messages, and firing Deferreds in response to those.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150506/e542e32c/attachment.html>

From glyph at twistedmatrix.com  Wed May  6 20:23:35 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 6 May 2015 19:23:35 -0700
Subject: [Twisted-Python] Crochet 1.4.0: use Twisted anywhere!
In-Reply-To: <554AB9CF.7080709@itamarst.org>
References: <554AB9CF.7080709@itamarst.org>
Message-ID: <361F33AE-6964-491D-AACA-F4784F633EE2@twistedmatrix.com>


> On May 6, 2015, at 6:03 PM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> 
> New in 1.4.0 is Python 3.4 support as well as support for using Crochet with uWSGI, and additional documentation on workarounds for various limitations of Crochet.

Woohoo!  Exciting stuff!  Every new release of Crochet squashes another bogus excuse for not using Twisted ;-).

Thanks, Itamar!

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150506/63a17155/attachment.html>

From hawkowl at atleastfornow.net  Thu May  7 00:13:46 2015
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Thu, 7 May 2015 14:13:46 +0800
Subject: [Twisted-Python] New Supported Platforms - Python 3.3 and Python
	3.4 on Debian 7
Message-ID: <75D0D6A4-A4CC-414A-91D7-552C630B226B@atleastfornow.net>

Hi everyone!

I'm pleased to announce that Twisted will have one more new supported Python version (3.4) as of Twisted 15.2. The debian7-py33 and debian7-py34 builders will shortly be moving from 'unsupported' to 'supported'.

- Hawkie


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150507/bb6d8e69/attachment.pgp>

From dynamicgl at gmail.com  Thu May  7 10:31:00 2015
From: dynamicgl at gmail.com (Gelin Yan)
Date: Fri, 8 May 2015 00:31:00 +0800
Subject: [Twisted-Python] New Supported Platforms - Python 3.3 and
 Python 3.4 on Debian 7
In-Reply-To: <75D0D6A4-A4CC-414A-91D7-552C630B226B@atleastfornow.net>
References: <75D0D6A4-A4CC-414A-91D7-552C630B226B@atleastfornow.net>
Message-ID: <CABkOF6THzY-4y1TtpwJ17qF02T7NtL9t7F1tXQf76kNtAWgVKw@mail.gmail.com>

On Thu, May 7, 2015 at 2:13 PM, HawkOwl <hawkowl at atleastfornow.net> wrote:

> Hi everyone!
>
> I'm pleased to announce that Twisted will have one more new supported
> Python version (3.4) as of Twisted 15.2. The debian7-py33 and debian7-py34
> builders will shortly be moving from 'unsupported' to 'supported'.
>
> - Hawkie
>
>
>
>
>
Hi HawkOwl

    May I know what level does twisted support for python 3? I am
interested in porting my system to python 3. To be frank, Twisted is the
main reason I am staying with python 2.x.

Regards

gelin yan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150508/c66725f4/attachment.html>

From hawkowl at atleastfornow.net  Thu May  7 22:36:30 2015
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Fri, 8 May 2015 12:36:30 +0800
Subject: [Twisted-Python] New Supported Platforms - Python 3.3 and
	Python 3.4 on Debian 7
In-Reply-To: <CABkOF6THzY-4y1TtpwJ17qF02T7NtL9t7F1tXQf76kNtAWgVKw@mail.gmail.com>
References: <75D0D6A4-A4CC-414A-91D7-552C630B226B@atleastfornow.net>
 <CABkOF6THzY-4y1TtpwJ17qF02T7NtL9t7F1tXQf76kNtAWgVKw@mail.gmail.com>
Message-ID: <3669E840-667D-48DD-B6AA-016FC2B45C94@atleastfornow.net>


> On 8 May 2015, at 00:31, Gelin Yan <dynamicgl at gmail.com> wrote:
> 
> Hi HawkOwl
> 
>     May I know what level does twisted support for python 3? I am interested in porting my system to python 3. To be frank, Twisted is the main reason I am staying with python 2.x.
> 
> Regards
> 
> gelin yan
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

Hi,

Many parts are ported, but many parts are also equally unported :)

The best way to find out what may or may not work is to run your test suite against a trunk version of Twisted under Python 3, making sure that your code compiles (and fixing anything to operate on 2/3, which is rather easy for most things), and seeing what your tests say. :)

- Hawkie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150508/eb2b08bb/attachment.pgp>

From itamar at itamarst.org  Fri May  8 07:24:31 2015
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Fri, 08 May 2015 09:24:31 -0400
Subject: [Twisted-Python] New Supported Platforms - Python 3.3 and
 Python 3.4 on Debian 7
In-Reply-To: <3669E840-667D-48DD-B6AA-016FC2B45C94@atleastfornow.net>
References: <75D0D6A4-A4CC-414A-91D7-552C630B226B@atleastfornow.net>
 <CABkOF6THzY-4y1TtpwJ17qF02T7NtL9t7F1tXQf76kNtAWgVKw@mail.gmail.com>
 <3669E840-667D-48DD-B6AA-016FC2B45C94@atleastfornow.net>
Message-ID: <d95287b53e1352bb0c8cc2c4ebb99460@itamarst.org>

 

On 2015-05-08 00:36, HawkOwl wrote: 

> The best way to find out what may or may not work is to run your test suite against a trunk version of Twisted under Python 3, making sure that your code compiles (and fixing anything to operate on 2/3, which is rather easy for most things), and seeing what your tests say. :)

And specifically an *installed* version of Twisted. A checkout will
include unported modules. 

 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150508/407d5c39/attachment.html>

From tobias.oberstein at tavendo.de  Fri May  8 12:27:36 2015
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Fri, 8 May 2015 11:27:36 -0700
Subject: [Twisted-Python] New Supported Platforms - Python 3.3 and
 Python	3.4 on Debian 7
In-Reply-To: <75D0D6A4-A4CC-414A-91D7-552C630B226B@atleastfornow.net>
References: <75D0D6A4-A4CC-414A-91D7-552C630B226B@atleastfornow.net>
Message-ID: <634914A010D0B943A035D226786325D44B576BBB8E@EXVMBX020-12.exch020.serverdata.net>

Awesome work, Hawkie!

Thanks for going through all nitty gritty details and - for getting everything reviewed/merged;)

Cheers,
/Tobias

> -----Urspr?ngliche Nachricht-----
> Von: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] Im Auftrag von HawkOwl
> Gesendet: Donnerstag, 7. Mai 2015 08:14
> An: Twisted-Python
> Betreff: [Twisted-Python] New Supported Platforms - Python 3.3 and Python
> 3.4 on Debian 7
> 
> Hi everyone!
> 
> I'm pleased to announce that Twisted will have one more new supported
> Python version (3.4) as of Twisted 15.2. The debian7-py33 and debian7-py34
> builders will shortly be moving from 'unsupported' to 'supported'.
> 
> - Hawkie
> 



From glyph at twistedmatrix.com  Sat May  9 14:04:00 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 9 May 2015 13:04:00 -0700
Subject: [Twisted-Python] LoopingCall.withCount countCallable called
	with 0
In-Reply-To: <CALTAbWn8LqUnkpLcMVb50jo5Nv0XweOWkrdfDaK4HQxDSXOn+A@mail.gmail.com>
References: <CALTAbW=PEr3sn5E8bcCF13w-injhC9ojCJVrNb1biFRN7QNMOw@mail.gmail.com>
 <7F261C23-3DCA-4CA9-BF01-37C767E59988@twistedmatrix.com>
 <CALTAbWn8LqUnkpLcMVb50jo5Nv0XweOWkrdfDaK4HQxDSXOn+A@mail.gmail.com>
Message-ID: <721A24FE-3A86-416B-B0D9-C382B4067185@twistedmatrix.com>


> On Mar 26, 2015, at 2:06 AM, Dario Vinella <d.vinella at gmail.com> wrote:
> 
> Here it is a log where I print a dot when the calls arg is 1, the value if not 1, each dot is separated by 0.02s
> 
> https://gist.github.com/dvinella/73e5e45a04c428f037bf <https://gist.github.com/dvinella/73e5e45a04c428f037bf>
>  
> Thanks for reporting!  Can you open a ticket?
> 
> Sure, I'll open it!

I just wanted to follow up with this - https://twistedmatrix.com/trac/ticket/7836 <https://twistedmatrix.com/trac/ticket/7836> is the ticket in question and it is now fixed on trunk, pending the next release.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150509/425df47b/attachment.html>

From trac at twistedmatrix.com  Sun May 10 00:05:21 2015
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 10 May 2015 06:05:21 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1431237921.2.932785446261603745@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150510/3758e0d2/attachment.html>

From d.vinella at gmail.com  Sun May 10 01:38:59 2015
From: d.vinella at gmail.com (Dario Vinella)
Date: Sun, 10 May 2015 09:38:59 +0200
Subject: [Twisted-Python] LoopingCall.withCount countCallable called
	with 0
In-Reply-To: <721A24FE-3A86-416B-B0D9-C382B4067185@twistedmatrix.com>
References: <CALTAbW=PEr3sn5E8bcCF13w-injhC9ojCJVrNb1biFRN7QNMOw@mail.gmail.com>
 <7F261C23-3DCA-4CA9-BF01-37C767E59988@twistedmatrix.com>
 <CALTAbWn8LqUnkpLcMVb50jo5Nv0XweOWkrdfDaK4HQxDSXOn+A@mail.gmail.com>
 <721A24FE-3A86-416B-B0D9-C382B4067185@twistedmatrix.com>
Message-ID: <CALTAbWnpOa9jQ7oX3TRS52A1+p1qGcd6P6Tq3HNboX8m_A7Lfg@mail.gmail.com>

Thank you glyph and moshez for working on this!

2015-05-09 22:04 GMT+02:00 Glyph <glyph at twistedmatrix.com>:

>
> On Mar 26, 2015, at 2:06 AM, Dario Vinella <d.vinella at gmail.com> wrote:
>
> Here it is a log where I print a dot when the calls arg is 1, the value if
> not 1, each dot is separated by 0.02s
>
> https://gist.github.com/dvinella/73e5e45a04c428f037bf
>
>
>> Thanks for reporting!  Can you open a ticket?
>>
>
> Sure, I'll open it!
>
>
> I just wanted to follow up with this -
> https://twistedmatrix.com/trac/ticket/7836 is the ticket in question and
> it is now fixed on trunk, pending the next release.
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150510/b98e7839/attachment.html>

From hawkowl at atleastfornow.net  Sun May 10 21:57:53 2015
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Mon, 11 May 2015 11:57:53 +0800
Subject: [Twisted-Python] INCOMPATIBLE CHANGE: Removing PAM support from
	Twisted
Message-ID: <5A610604-4AFA-43DE-A04F-D71DEF4B8CD7@atleastfornow.net>

As per https://twistedmatrix.com/trac/wiki/CompatibilityPolicy#ProcedureforExceptionstothisPolicy:

Twisted's PAM support is reliant on a library which a) doesn't materially exist anymore, b) is blocking, c) is uninstalled on all our buildbots if I'm correct and so therefore hasn't been tested for ages, and d) requires us to do insecure things (like setting euid as root). Since it's basically uninstallable (I can't even find a source tarball newer than 1999) and almost certainly doesn't work on any Python versions we support, I propose outright removal, rather than emitting deprecation warnings that literally nobody will see.

I have prepared a patch at https://github.com/twisted/twisted/compare/trunk...remove-pamauth-3728-2 . Under the deprecation policy's exclusions rule, this branch is given for people to make sure that their code does not break. Three other committers will need to also pitch support for this (although I don't think that'll be an issue ;) ). This patch not only removes PAM, but all of its (unusedness) in Conch.

The ticket is available at https://twistedmatrix.com/trac/ticket/3728 and will be put in review shortly. The buildbot results can be seen at https://buildbot.twistedmatrix.com/boxes-supported?branch=/branches/remove-pamauth-3728-2 .

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150511/ed239d60/attachment.pgp>

From glyph at twistedmatrix.com  Sun May 10 22:35:54 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 10 May 2015 21:35:54 -0700
Subject: [Twisted-Python] INCOMPATIBLE CHANGE: Removing PAM support from
	Twisted
In-Reply-To: <5A610604-4AFA-43DE-A04F-D71DEF4B8CD7@atleastfornow.net>
References: <5A610604-4AFA-43DE-A04F-D71DEF4B8CD7@atleastfornow.net>
Message-ID: <64880D45-B75D-45DD-B316-498008281DC1@twistedmatrix.com>


> On May 10, 2015, at 8:57 PM, HawkOwl <hawkowl at atleastfornow.net> wrote:
> 
> As per https://twistedmatrix.com/trac/wiki/CompatibilityPolicy#ProcedureforExceptionstothisPolicy:
> 
> Twisted's PAM support is reliant on a library which a) doesn't materially exist anymore, b) is blocking, c) is uninstalled on all our buildbots if I'm correct and so therefore hasn't been tested for ages, and d) requires us to do insecure things (like setting euid as root). Since it's basically uninstallable (I can't even find a source tarball newer than 1999) and almost certainly doesn't work on any Python versions we support, I propose outright removal, rather than emitting deprecation warnings that literally nobody will see.
> 
> I have prepared a patch at https://github.com/twisted/twisted/compare/trunk...remove-pamauth-3728-2 . Under the deprecation policy's exclusions rule, this branch is given for people to make sure that their code does not break. Three other committers will need to also pitch support for this (although I don't think that'll be an issue ;) ). This patch not only removes PAM, but all of its (unusedness) in Conch.
> 
> The ticket is available at https://twistedmatrix.com/trac/ticket/3728 and will be put in review shortly. The buildbot results can be seen at https://buildbot.twistedmatrix.com/boxes-supported?branch=/branches/remove-pamauth-3728-2 .


I'm very much in favor of an outright removal in this case, so consider me signed off.  Given the gnarly security implications of this thing I would take the unusual step of continuing to approve of removal even if we have a real-life user who might be impacted.

That said, lack of actual PAM support (and more generally, platform-integrated user authentication mechanisms) is a sore spot and we should add something less terrible when we can.

-glyph



From mithrandi at mithrandi.net  Sun May 10 23:52:36 2015
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Mon, 11 May 2015 07:52:36 +0200
Subject: [Twisted-Python] INCOMPATIBLE CHANGE: Removing PAM support from
	Twisted
In-Reply-To: <64880D45-B75D-45DD-B316-498008281DC1@twistedmatrix.com>
References: <5A610604-4AFA-43DE-A04F-D71DEF4B8CD7@atleastfornow.net>
 <64880D45-B75D-45DD-B316-498008281DC1@twistedmatrix.com>
Message-ID: <CAMcKhMTF90etXJkiXMAEnsJeXHeymVi5TrkSHsDiPEUgiLs2TA@mail.gmail.com>

On 11 May 2015 at 06:35, Glyph <glyph at twistedmatrix.com> wrote:
> I'm very much in favor of an outright removal in this case, so consider me signed off.  Given the gnarly security implications of this thing I would take the unusual step of continuing to approve of removal even if we have a real-life user who might be impacted.
>
> That said, lack of actual PAM support (and more generally, platform-integrated user authentication mechanisms) is a sore spot and we should add something less terrible when we can.

What glyph said :)
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From hawkowl at atleastfornow.net  Mon May 11 06:54:32 2015
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Mon, 11 May 2015 20:54:32 +0800
Subject: [Twisted-Python] Twisted 15.2 Prerelease Announcement
Message-ID: <FF06AE8A-9FE3-4C8A-86E3-81C4FA65C63F@atleastfornow.net>

Hello everyone! It's about time that the owl-themed release management simulation kicked into high-gear, and as such, I delivereth to you all the first prerelease of Twisted 15.2.

Bringing not only headlining features but also a lot of incremental improvements, this release has got plenty to like:

- twisted.logger has landed! This is a brand-new, feature-rich logging framework.
- Python 3.4 is now a supported platform for all the Py3 ported modules.
- twisted.trial.unittest.TestCase's assertEqual, assertTrue, and assertFalse methods now pass through the standard library's more informative failure messages.
- twisted.python.filepath.FilePath now supports Unicode (text) paths properly, and includes as{Bytes,Text}Mode methods for interacting with APIs that require a text/bytes-only FilePath.
- twisted.mail.smtp.sendmail now supports ESMTP and provides a high-level interface for sending mail.
- The following parts of Twisted are now ported to Python 3:
    - twisted.internet.process
    - twisted.cred.credentials
    - twisted.python.modules
    - twisted.internet.kqreactor
    - twisted.internet.endpoints.ProcessEndpoint
    - twisted.web.static

As usual, tarballs can be found at http://twistedmatrix.com/Releases/pre/15.2.0pre1/ , and the full NEWS file can be found at http://twistedmatrix.com/Releases/pre/15.2.0pre1/NEWS.txt .

On a personal note, I'd like to thank Tavendo for sponsoring a majority of my Py3 porting work, and everyone who reviewed tickets for getting it landed.

Please test out the new prerelease :)

Twisted regards,
Amber "Hawkie" Brown
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150511/b64b001f/attachment.pgp>

From glyph at twistedmatrix.com  Mon May 11 22:10:48 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 11 May 2015 21:10:48 -0700
Subject: [Twisted-Python] [Twisted-web] Twisted 15.2 Prerelease
	Announcement
In-Reply-To: <FF06AE8A-9FE3-4C8A-86E3-81C4FA65C63F@atleastfornow.net>
References: <FF06AE8A-9FE3-4C8A-86E3-81C4FA65C63F@atleastfornow.net>
Message-ID: <14CF8F3E-A3F7-4F93-9892-E3486C01B31B@twistedmatrix.com>


> On May 11, 2015, at 5:54 AM, HawkOwl <hawkowl at atleastfornow.net> wrote:
> 
> Hello everyone! It's about time that the owl-themed release management simulation kicked into high-gear, and as such, I delivereth to you all the first prerelease of Twisted 15.2.
> 
> Bringing not only headlining features but also a lot of incremental improvements, this release has got plenty to like:
> 
> - twisted.logger has landed! This is a brand-new, feature-rich logging framework.
> - Python 3.4 is now a supported platform for all the Py3 ported modules.
> - twisted.trial.unittest.TestCase's assertEqual, assertTrue, and assertFalse methods now pass through the standard library's more informative failure messages.
> - twisted.python.filepath.FilePath now supports Unicode (text) paths properly, and includes as{Bytes,Text}Mode methods for interacting with APIs that require a text/bytes-only FilePath.
> - twisted.mail.smtp.sendmail now supports ESMTP and provides a high-level interface for sending mail.
> - The following parts of Twisted are now ported to Python 3:
>    - twisted.internet.process
>    - twisted.cred.credentials
>    - twisted.python.modules
>    - twisted.internet.kqreactor
>    - twisted.internet.endpoints.ProcessEndpoint
>    - twisted.web.static
> 
> As usual, tarballs can be found at http://twistedmatrix.com/Releases/pre/15.2.0pre1/ , and the full NEWS file can be found at http://twistedmatrix.com/Releases/pre/15.2.0pre1/NEWS.txt .
> 
> On a personal note, I'd like to thank Tavendo for sponsoring a majority of my Py3 porting work, and everyone who reviewed tickets for getting it landed.
> 
> Please test out the new prerelease :)

Hooray!!!!  This release is a pretty big deal.  This new logging system has been in development for a long time, and the availability of twisted.internet.process on py3 is a pretty big new chunk of twisted.core to be available.

Thank you very much, Amber, for helping us get out timely releases on such a consistent basis.

Reminder, everyone, that you have a week from this announcement to test your software against the pre-release and test any regressions!

(Thanks also to my employer, Rackspace, for giving me the time to review many of these tickets.)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150511/ba5cdd2b/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 630 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150511/ba5cdd2b/attachment.pgp>

From mashiat.sarker at gmail.com  Tue May 12 08:53:33 2015
From: mashiat.sarker at gmail.com (Mashiat Sarker Shakkhar)
Date: Tue, 12 May 2015 10:53:33 -0400
Subject: [Twisted-Python] Trapping exceptions in Deferred
Message-ID: <CAOfeCWWJqV02iGwWTbg17iE6XR4+KL2hTtu5kqgbtH8MOX5_ww@mail.gmail.com>

Hi

If I want to trap a certain type of exception in a deferred call, how do I
specify it? For example, I see a failure like this:

    [HTTP11ClientProtocol (TLSMemoryBIOProtocol),client]
[<twisted.python.failure.Failure <class 'OpenSSL.SSL.Error'>>]

    [HTTP11ClientProtocol (TLSMemoryBIOProtocol),client] Traceback
(most recent call last):
    [HTTP11ClientProtocol (TLSMemoryBIOProtocol),client] Failure:
twisted.web._newclient.ResponseNeverReceived: [<twisted.python.
failure.Failure <class 'OpenSSL.SSL.Error'>>]

I want to trap all such failures. I tried
`failure.trap(twisted.web._newclient.ResponseNeverReceived)` but looks
like that did not work. My deferred callback looks like this:

Hi

If I want to trap a certain type of exception in a deferred call, how
do I specify it? For example, I see a failure like this:

    [HTTP11ClientProtocol (TLSMemoryBIOProtocol),client]
[<twisted.python.failure.Failure <class 'OpenSSL.SSL.Error'>>]

    [HTTP11ClientProtocol (TLSMemoryBIOProtocol),client] Traceback
(most recent call last):
    [HTTP11ClientProtocol (TLSMemoryBIOProtocol),client] Failure:
twisted.web._newclient.ResponseNeverReceived: [<twisted.python.
failure.Failure <class 'OpenSSL.SSL.Error'>>]

I want to trap all such failures. I tried
`failure.trap(twisted.web._newclient.ResponseNeverReceived)` but looks
like that did not work. My deferred callback looks like this:

    from twisted.internet.error import TimeoutError
    from twisted.web._newclient import ResponseNeverReceived
    def log_ignore_network_errors(failure):
        print failure.getErrorMessage()
        failure.printTraceback()
        failure.trap(TimeoutError, ResponseNeverReceived)

Apparently this does not catch all such errors. What am I doing wrong here?

Regards
Shakkhar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150512/7c4e1a36/attachment.html>

From ldanielburr at me.com  Tue May 12 09:33:06 2015
From: ldanielburr at me.com (Louis D. Burr)
Date: Tue, 12 May 2015 10:33:06 -0500
Subject: [Twisted-Python] Trapping exceptions in Deferred
In-Reply-To: <CAOfeCWWJqV02iGwWTbg17iE6XR4+KL2hTtu5kqgbtH8MOX5_ww@mail.gmail.com>
References: <CAOfeCWWJqV02iGwWTbg17iE6XR4+KL2hTtu5kqgbtH8MOX5_ww@mail.gmail.com>
Message-ID: <672BD626-F6F9-4E5C-800D-80F168E3407D@me.com>

Hi Mashiat,

> On May 12, 2015, at 9:53 AM, Mashiat Sarker Shakkhar <mashiat.sarker at gmail.com> wrote:
> 
> Hi
> 
> If I want to trap a certain type of exception in a deferred call, how do I specify it? For example, I see a failure like this:
> 
>     [HTTP11ClientProtocol (TLSMemoryBIOProtocol),client] [<twisted.python.failure.Failure <class 'OpenSSL.SSL.Error'>>]
>     [HTTP11ClientProtocol (TLSMemoryBIOProtocol),client] Traceback (most recent call last):
>     [HTTP11ClientProtocol (TLSMemoryBIOProtocol),client] Failure: twisted.web._newclient.ResponseNeverReceived: [<twisted.python.
> failure.Failure <class 'OpenSSL.SSL.Error'>>]
> 
> I want to trap all such failures. I tried `failure.trap(twisted.web._newclient.ResponseNeverReceived)` but looks like that did not work. My deferred callback looks like this:
> 
>     from twisted.internet.error import TimeoutError
>     from twisted.web._newclient import ResponseNeverReceived
>     def log_ignore_network_errors(failure):
>         print failure.getErrorMessage()
>         failure.printTraceback()
>         failure.trap(TimeoutError, ResponseNeverReceived)
> 
> Apparently this does not catch all such errors. What am I doing wrong here?
> 
This code sample does not indicate that you have actually assigned log_ignore_network_errors as an errback on a Deferred anywhere.  If you can provide a working code example that demonstrates your issue, it will be easier to help you :)

L. Daniel Burr

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150512/2d5cb109/attachment-0001.html>

From mashiat.sarker at gmail.com  Tue May 12 10:48:00 2015
From: mashiat.sarker at gmail.com (Mashiat Sarker Shakkhar)
Date: Tue, 12 May 2015 12:48:00 -0400
Subject: [Twisted-Python] Trapping exceptions in Deferred
In-Reply-To: <672BD626-F6F9-4E5C-800D-80F168E3407D@me.com>
References: <CAOfeCWWJqV02iGwWTbg17iE6XR4+KL2hTtu5kqgbtH8MOX5_ww@mail.gmail.com>
 <672BD626-F6F9-4E5C-800D-80F168E3407D@me.com>
Message-ID: <CAOfeCWUwwkWzRLi7v3S0DS1ybptN71uUxfpkqzMAXQ-Cg5L-Fw@mail.gmail.com>

On Tue, May 12, 2015 at 11:33 AM, Louis D. Burr <ldanielburr at me.com> wrote:
>
> Hi Mashiat,

[...]

> This code sample does not indicate that you have actually assigned
log_ignore_network_errors as an errback on a Deferred anywhere.  If you can
provide a working code example that demonstrates your issue, it will be
easier to help you :)

Alright. Below you can find a code snippet that is similar to my actual
code. But my question is a little more generic - how do I catch exceptions
that are encapsulated in a failure? If the actual exception is
OpenSSL.SSL.Error,
and it is wrapped in twisted.web._newclient.ResponseNeverReceived, how
should my trap call look like?

```
imort json
import StringIO
from twisted.internet import reactor
from twisted.internet.error import TimeoutError
from twisted.web._newclient import ResponseNeverReceived
from twisted.web.client import Agent, HTTPConnectionPool
from twisted.web.client import FileBodyProducer

def some_callback(response):
    pass

def log_ignore_network_errors(failure):
    print failure.getErrorMessage()
    failure.printTraceback()
    failure.trap(TimeoutError, ResponseNeverReceived)

agent = Agent(reactor)
body = FileBodyProducer(StringIO(json.dumps({'key': 'value'})))
d = agent.request('POST', 'https://example.com', Headers({'Content-Type':
['application/json']}), body)
d.addCallback(some_callback)
d.addErrback(log_ignore_network_errors)
```

[...]
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150512/0cb62105/attachment.html>

From ldanielburr at me.com  Tue May 12 11:38:51 2015
From: ldanielburr at me.com (Louis D. Burr)
Date: Tue, 12 May 2015 12:38:51 -0500
Subject: [Twisted-Python] Trapping exceptions in Deferred
In-Reply-To: <CAOfeCWUwwkWzRLi7v3S0DS1ybptN71uUxfpkqzMAXQ-Cg5L-Fw@mail.gmail.com>
References: <CAOfeCWWJqV02iGwWTbg17iE6XR4+KL2hTtu5kqgbtH8MOX5_ww@mail.gmail.com>
 <672BD626-F6F9-4E5C-800D-80F168E3407D@me.com>
 <CAOfeCWUwwkWzRLi7v3S0DS1ybptN71uUxfpkqzMAXQ-Cg5L-Fw@mail.gmail.com>
Message-ID: <FD55BD40-CDBA-41F8-90A4-AFBDCCF36EFC@me.com>

Hi Mashiat,

> On May 12, 2015, at 11:48 AM, Mashiat Sarker Shakkhar <mashiat.sarker at gmail.com> wrote:
> 
[...]
> Alright. Below you can find a code snippet that is similar to my actual code. But my question is a little more generic - how do I catch exceptions that are encapsulated in a failure? If the actual exception is OpenSSL.SSL.Error, and it is wrapped in twisted.web._newclient.ResponseNeverReceived, how should my trap call look like?
> 
> ```
> imort json
> import StringIO
> from twisted.internet import reactor
> from twisted.internet.error import TimeoutError
> from twisted.web._newclient import ResponseNeverReceived
> from twisted.web.client import Agent, HTTPConnectionPool
> from twisted.web.client import FileBodyProducer
> 
> def some_callback(response):
>     pass
> 
> def log_ignore_network_errors(failure):
>     print failure.getErrorMessage()
>     failure.printTraceback()
>     failure.trap(TimeoutError, ResponseNeverReceived)
> 
> agent = Agent(reactor)
> body = FileBodyProducer(StringIO(json.dumps({'key': 'value'})))
> d = agent.request('POST', 'https://example.com <https://example.com/>', Headers({'Content-Type': ['application/json']}), body)
> d.addCallback(some_callback)
> d.addErrback(log_ignore_network_errors)
> ```

Thanks for providing the example.  Your code as presented here catches both TimeoutError and ResponseNeverReceived, so I am not sure why you think it isn?t working.  What are you seeing that indicates that the ResponseNeverReceived error is not being trapped?

As far as identifying/catching exceptions wrapped by ResponseNeverReceived, you can iterate over the ?reasons? attribute (https://twistedmatrix.com/documents/current/api/twisted.web._newclient.ResponseNeverReceived.html <https://twistedmatrix.com/documents/current/api/twisted.web._newclient.ResponseNeverReceived.html>) and call either ?trap? or ?check? on each failure instance contained therein.

For any instance of twisted.python.failure, you can look at the ?value? attribute to obtain the exception instance.

Hope this helps,

L. Daniel Burr

    
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150512/92e8dbad/attachment.html>

From mashiat.sarker at gmail.com  Tue May 12 12:25:56 2015
From: mashiat.sarker at gmail.com (Mashiat Sarker Shakkhar)
Date: Tue, 12 May 2015 14:25:56 -0400
Subject: [Twisted-Python] Trapping exceptions in Deferred
In-Reply-To: <FD55BD40-CDBA-41F8-90A4-AFBDCCF36EFC@me.com>
References: <CAOfeCWWJqV02iGwWTbg17iE6XR4+KL2hTtu5kqgbtH8MOX5_ww@mail.gmail.com>
 <672BD626-F6F9-4E5C-800D-80F168E3407D@me.com>
 <CAOfeCWUwwkWzRLi7v3S0DS1ybptN71uUxfpkqzMAXQ-Cg5L-Fw@mail.gmail.com>
 <FD55BD40-CDBA-41F8-90A4-AFBDCCF36EFC@me.com>
Message-ID: <CAOfeCWUmH3_fGhVLhVODuDJs9LENXtLNpABG+m3Xq14pJAkZGA@mail.gmail.com>

On Tue, May 12, 2015 at 1:38 PM, Louis D. Burr <ldanielburr at me.com> wrote:

> Hi Mashiat,
>

[...]


> Thanks for providing the example.  Your code as presented here catches
> both TimeoutError and ResponseNeverReceived, so I am not sure why you think
> it isn?t working.  What are you seeing that indicates that the
> ResponseNeverReceived error is not being trapped?
>

Because I still see the exception in my logs. I could not find any way to
reproduce the error - so I am playing a bit of a cat-and-mouse game here.
For one thing, the log message is not very helpful. OpenSSL.SSL.Error is
just a base class and I can't get Twisted to print stack trace for
unhandled exceptions.


>
> As far as identifying/catching exceptions wrapped by
> ResponseNeverReceived, you can iterate over the ?reasons? attribute (
> https://twistedmatrix.com/documents/current/api/twisted.web._newclient.ResponseNeverReceived.html)
> and call either ?trap? or ?check? on each failure instance contained
> therein.
>
> For any instance of twisted.python.failure, you can look at the ?value?
> attribute to obtain the exception instance.
>

Thanks a lot for the explanation. Let me see if I can obtain some more
information about the issue.

Regards
Shakkhar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150512/03133ab1/attachment.html>

From rgacote at appropriatesolutions.com  Tue May 12 12:31:45 2015
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Tue, 12 May 2015 14:31:45 -0400
Subject: [Twisted-Python] Twisted 15.2 Prerelease Announcement
In-Reply-To: <FF06AE8A-9FE3-4C8A-86E3-81C4FA65C63F@atleastfornow.net>
References: <FF06AE8A-9FE3-4C8A-86E3-81C4FA65C63F@atleastfornow.net>
Message-ID: <CAG5tnzoWV9F2L6+2zeqc1khqzBr70VF-HQ-PVKcTV3hLQcUcTw@mail.gmail.com>

Great news on the release and the ever forward march to more Python 3
compatibility.
I'm finally starting to move over a lot of projects to Python 3.4 and plan
to try moving my first small Twisted project in about three months.
Looking forward to digging in.
--Ray


On Mon, May 11, 2015 at 8:54 AM, HawkOwl <hawkowl at atleastfornow.net> wrote:

> Hello everyone! It's about time that the owl-themed release management
> simulation kicked into high-gear, and as such, I delivereth to you all the
> first prerelease of Twisted 15.2.
>
> Bringing not only headlining features but also a lot of incremental
> improvements, this release has got plenty to like:
>
> - twisted.logger has landed! This is a brand-new, feature-rich logging
> framework.
> - Python 3.4 is now a supported platform for all the Py3 ported modules.
> - twisted.trial.unittest.TestCase's assertEqual, assertTrue, and
> assertFalse methods now pass through the standard library's more
> informative failure messages.
> - twisted.python.filepath.FilePath now supports Unicode (text) paths
> properly, and includes as{Bytes,Text}Mode methods for interacting with APIs
> that require a text/bytes-only FilePath.
> - twisted.mail.smtp.sendmail now supports ESMTP and provides a high-level
> interface for sending mail.
> - The following parts of Twisted are now ported to Python 3:
>     - twisted.internet.process
>     - twisted.cred.credentials
>     - twisted.python.modules
>     - twisted.internet.kqreactor
>     - twisted.internet.endpoints.ProcessEndpoint
>     - twisted.web.static
>
> As usual, tarballs can be found at
> http://twistedmatrix.com/Releases/pre/15.2.0pre1/ , and the full NEWS
> file can be found at
> http://twistedmatrix.com/Releases/pre/15.2.0pre1/NEWS.txt .
>
> On a personal note, I'd like to thank Tavendo for sponsoring a majority of
> my Py3 porting work, and everyone who reviewed tickets for getting it
> landed.
>
> Please test out the new prerelease :)
>
> Twisted regards,
> Amber "Hawkie" Brown
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Raymond Cote, President
voice: +1.603.924.6079 email: rgacote at AppropriateSolutions.com skype:
ray.cote
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150512/f02e8b81/attachment.html>

From radix at twistedmatrix.com  Tue May 12 13:31:49 2015
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 12 May 2015 14:31:49 -0500
Subject: [Twisted-Python] Trapping exceptions in Deferred
In-Reply-To: <CAOfeCWUmH3_fGhVLhVODuDJs9LENXtLNpABG+m3Xq14pJAkZGA@mail.gmail.com>
References: <CAOfeCWWJqV02iGwWTbg17iE6XR4+KL2hTtu5kqgbtH8MOX5_ww@mail.gmail.com>
 <672BD626-F6F9-4E5C-800D-80F168E3407D@me.com>
 <CAOfeCWUwwkWzRLi7v3S0DS1ybptN71uUxfpkqzMAXQ-Cg5L-Fw@mail.gmail.com>
 <FD55BD40-CDBA-41F8-90A4-AFBDCCF36EFC@me.com>
 <CAOfeCWUmH3_fGhVLhVODuDJs9LENXtLNpABG+m3Xq14pJAkZGA@mail.gmail.com>
Message-ID: <72142586-56A5-4FE1-BD26-696437AE58D4@twistedmatrix.com>


> On May 12, 2015, at 1:25 PM, Mashiat Sarker Shakkhar <mashiat.sarker at gmail.com> wrote:
> 
> On Tue, May 12, 2015 at 1:38 PM, Louis D. Burr <ldanielburr at me.com <mailto:ldanielburr at me.com>> wrote:
> Hi Mashiat,
>  
> [...]
>  
> Thanks for providing the example.  Your code as presented here catches both TimeoutError and ResponseNeverReceived, so I am not sure why you think it isn?t working.  What are you seeing that indicates that the ResponseNeverReceived error is not being trapped?
> 
> Because I still see the exception in my logs. I could not find any way to reproduce the error - so I am playing a bit of a cat-and-mouse game here. For one thing, the log message is not very helpful. OpenSSL.SSL.Error is just a base class and I can't get Twisted to print stack trace for unhandled exceptions.

Your code example is printing the error message and traceback _before_ you trap the failure. Are those print statements going to your logs? Could that be causing confusion?

-Chris
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150512/bcc0cb67/attachment.html>

From jerryguitarist at gmail.com  Wed May 13 01:07:32 2015
From: jerryguitarist at gmail.com (Eeshan Garg)
Date: Wed, 13 May 2015 12:37:32 +0530
Subject: [Twisted-Python] Need advice on how to move to the new logging
	system
Message-ID: <CA+2gYipBKp8OK4XaThw-51T3-nQ3RBFX+m3H5DfLu22NLCaejw@mail.gmail.com>

Hello everyone!

I am aware that I have sent an email with a similar subject line before,
but this time this involves a particular ticket (<
https://twistedmatrix.com/trac/ticket/7897>) that I have submitted for
review. The ticket is about logging the log events in
twisted.internet.protocol.Factory using the new logging system, and it is
one of the first tickets about modifying existing logging statements in the
Twisted code base to use the new system.

While working on this ticket, I ran into some issues that I have summarized
in a comment on the same ticket <
https://twistedmatrix.com/trac/ticket/7897#comment:2> and it would mean a
lot to me if someone could take a look.

I recall that HawkOwl had some concerns regarding moving to the new logging
system. And so I thought that it would be better if I share my thoughts on
the mailing list as well and not just on the particular ticket, so that
anybody who is interested in sharing their concerns can do so.

Regards,
Eeshan Garg
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150513/a476076e/attachment.html>

From trac at twistedmatrix.com  Sun May 17 00:05:17 2015
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 17 May 2015 06:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1431842717.5.5295728595295334096@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150517/09faa7cf/attachment.html>

From christianzlong2 at gmail.com  Mon May 18 11:19:15 2015
From: christianzlong2 at gmail.com (Christian Long)
Date: Mon, 18 May 2015 12:19:15 -0500
Subject: [Twisted-Python] Twisted on Windows, parts 2 and 3
Message-ID: <CAP3KJdjtrNxwq88NY_ehVMi+2c6sWJmwtYY=RY1z_yEVSwuxDg@mail.gmail.com>

I added to my series of posts about running Twisted on Windows.

Part 2 is about virtual service accounts

http://www.christianlong.com/blog/twisted-on-windows-2015-edition-part-2.html


Part 3 is about permissions

http://www.christianlong.com/blog/twisted-on-windows-2015-edition-part-3.html


Let me know if you have any corrections or improvements.

Christian


From rgacote at appropriatesolutions.com  Mon May 18 11:46:41 2015
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Mon, 18 May 2015 13:46:41 -0400
Subject: [Twisted-Python] Twisted on Windows, parts 2 and 3
In-Reply-To: <CAP3KJdjtrNxwq88NY_ehVMi+2c6sWJmwtYY=RY1z_yEVSwuxDg@mail.gmail.com>
References: <CAP3KJdjtrNxwq88NY_ehVMi+2c6sWJmwtYY=RY1z_yEVSwuxDg@mail.gmail.com>
Message-ID: <CAG5tnzqP1NkoPJpvkC44CmQbbsLg2819iyC_xBOLrKUOGdsUnA@mail.gmail.com>

Hi Christian:

Thanks for the three great articles (turned into my lunch-time reading).
I've been running Twisted on Windows with the built-in service module for
some time now -- but it has been a pain to build both a service and
non-service version of the app. Had bookmarked NSSM for research, but I'd
not yet had time to dig into the details.

Appreciate the detailed walk-through of installation and permissions
(always a trick on modern Windows).
Looking forward to reading the three articles several more times and
working through the details as an exercise.

Regards
--Ray

On Mon, May 18, 2015 at 1:19 PM, Christian Long <christianzlong2 at gmail.com>
wrote:

> I added to my series of posts about running Twisted on Windows.
>
> Part 2 is about virtual service accounts
>
>
> http://www.christianlong.com/blog/twisted-on-windows-2015-edition-part-2.html
>
>
> Part 3 is about permissions
>
>
> http://www.christianlong.com/blog/twisted-on-windows-2015-edition-part-3.html
>
>
> Let me know if you have any corrections or improvements.
>
> Christian
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Raymond Cote, President
voice: +1.603.924.6079 email: rgacote at AppropriateSolutions.com skype:
ray.cote
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150518/92a85bb6/attachment.html>

From christianzlong2 at gmail.com  Mon May 18 12:26:49 2015
From: christianzlong2 at gmail.com (Christian Long)
Date: Mon, 18 May 2015 13:26:49 -0500
Subject: [Twisted-Python] Twisted on Windows, parts 2 and 3
In-Reply-To: <CAG5tnzqP1NkoPJpvkC44CmQbbsLg2819iyC_xBOLrKUOGdsUnA@mail.gmail.com>
References: <CAP3KJdjtrNxwq88NY_ehVMi+2c6sWJmwtYY=RY1z_yEVSwuxDg@mail.gmail.com>
 <CAG5tnzqP1NkoPJpvkC44CmQbbsLg2819iyC_xBOLrKUOGdsUnA@mail.gmail.com>
Message-ID: <CAP3KJdjQ4ektG4XKF5AxXKRQZea5fAWgBASj2X2tPUfXtAfeMg@mail.gmail.com>

Thanks for the kind words, and please send any corrections or improvements.

Christian

On Mon, May 18, 2015 at 12:46 PM, Ray Cote
<rgacote at appropriatesolutions.com> wrote:
> Hi Christian:
>
> Thanks for the three great articles (turned into my lunch-time reading).
> I've been running Twisted on Windows with the built-in service module for
> some time now -- but it has been a pain to build both a service and
> non-service version of the app. Had bookmarked NSSM for research, but I'd
> not yet had time to dig into the details.
>
> Appreciate the detailed walk-through of installation and permissions (always
> a trick on modern Windows).
> Looking forward to reading the three articles several more times and working
> through the details as an exercise.
>
> Regards
> --Ray
>
> On Mon, May 18, 2015 at 1:19 PM, Christian Long <christianzlong2 at gmail.com>
> wrote:
>>
>> I added to my series of posts about running Twisted on Windows.
>>
>> Part 2 is about virtual service accounts
>>
>>
>> http://www.christianlong.com/blog/twisted-on-windows-2015-edition-part-2.html
>>
>>
>> Part 3 is about permissions
>>
>>
>> http://www.christianlong.com/blog/twisted-on-windows-2015-edition-part-3.html
>>
>>
>> Let me know if you have any corrections or improvements.
>>
>> Christian
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
>
> --
> Raymond Cote, President
> voice: +1.603.924.6079 email: rgacote at AppropriateSolutions.com skype:
> ray.cote
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From werner at thieprojects.ch  Mon May 18 15:33:18 2015
From: werner at thieprojects.ch (Werner Thie)
Date: Mon, 18 May 2015 11:33:18 -1000
Subject: [Twisted-Python] Twisted on Windows, parts 2 and 3
In-Reply-To: <CAP3KJdjtrNxwq88NY_ehVMi+2c6sWJmwtYY=RY1z_yEVSwuxDg@mail.gmail.com>
References: <CAP3KJdjtrNxwq88NY_ehVMi+2c6sWJmwtYY=RY1z_yEVSwuxDg@mail.gmail.com>
Message-ID: <555A5A9E.90705@thieprojects.ch>

On 18/05/15 07:19, Christian Long wrote:
> I added to my series of posts about running Twisted on Windows.
>
> Part 2 is about virtual service accounts
>
> http://www.christianlong.com/blog/twisted-on-windows-2015-edition-part-2.html
>
>
> Part 3 is about permissions
>
> http://www.christianlong.com/blog/twisted-on-windows-2015-edition-part-3.html
>
>
> Let me know if you have any corrections or improvements.
>
> Christian
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

Hi Christian

thanks for your great articles, all the services I had to deploy on MSW 
I did with the help of NSSM, but didn't find the time to write it up so 
neatly.

Maholo nui, Werner


From hawkowl at atleastfornow.net  Tue May 19 00:14:45 2015
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Tue, 19 May 2015 14:14:45 +0800
Subject: [Twisted-Python] Twisted 15.2 Release Announcement
Message-ID: <EE0847B2-0F6E-4B21-A582-BE754B824A90@atleastfornow.net>

On behalf of Twisted Matrix Labs, I'm honoured to announce the release of Twisted 15.2.

Bringing not only headlining features but also a lot of incremental improvements, this release has got plenty to like:

- twisted.logger has landed! This is a brand-new, feature-rich logging framework.
- Python 3.4 is now a supported platform for all the Py3 ported modules.
- twisted.trial.unittest.TestCase's assertEqual, assertTrue, and assertFalse methods now pass through the standard library's more informative failure messages.
- twisted.python.filepath.FilePath now supports Unicode (text) paths properly, and includes as{Bytes,Text}Mode methods for interacting with APIs that require a text/bytes-only FilePath.
- twisted.mail.smtp.sendmail now supports ESMTP and provides a high-level interface for sending mail.
- The following parts of Twisted are now ported to Python 3:
   - twisted.internet.process
   - twisted.cred.credentials
   - twisted.python.modules
   - twisted.internet.kqreactor
   - twisted.internet.endpoints.ProcessEndpoint
   - twisted.web.static
- Over 50 tickets closed since 15.1.

You can find the downloads at https://pypi.python.org/pypi/Twisted (or alternatively http://twistedmatrix.com/trac/wiki/Downloads).

Many thanks to everyone who had a part in this release - the supporters of the Twisted Software Foundation, the developers who contributed code as well as documentation, and all the people building great things with Twisted!

Twisted Regards,
HawkOwl
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150519/0f8c395b/attachment.pgp>

From glyph at twistedmatrix.com  Tue May 19 02:43:06 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 19 May 2015 01:43:06 -0700
Subject: [Twisted-Python] Twisted on Windows, parts 2 and 3
In-Reply-To: <CAP3KJdjtrNxwq88NY_ehVMi+2c6sWJmwtYY=RY1z_yEVSwuxDg@mail.gmail.com>
References: <CAP3KJdjtrNxwq88NY_ehVMi+2c6sWJmwtYY=RY1z_yEVSwuxDg@mail.gmail.com>
Message-ID: <CDF23BC7-36E6-4CA8-8D59-5612151CAE94@twistedmatrix.com>

> On May 18, 2015, at 10:19, Christian Long <christianzlong2 at gmail.com> wrote:
> 
> I added to my series of posts about running Twisted on Windows.

Thanks again for writing these up, Christian!

-g

From wsanchez at wsanchez.net  Tue May 19 04:50:06 2015
From: wsanchez at wsanchez.net (=?utf-8?Q?Wilfredo_S=C3=A1nchez_Vega?=)
Date: Tue, 19 May 2015 13:50:06 +0300
Subject: [Twisted-Python] trial internals help?
Message-ID: <1F61BB80-9982-4648-91B4-E1B5784A1A6C@wsanchez.net>

  I took a stab at porting trial to use twisted.logger (http://tm.tl/7863) but I have a test failing:

	twisted.trial.test.test_reporter.TestErrorReporting.test_hiddenException

  I don?t quite know what that test is doing.  I added some additional output on my branch (branches/log-trial-7863) but that didn?t make me any smarter.

  Is anyone familiar with this code able to explain how I may have broken it?

	-wsv



From exarkun at twistedmatrix.com  Tue May 19 05:31:13 2015
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 19 May 2015 11:31:13 -0000
Subject: [Twisted-Python] trial internals help?
In-Reply-To: <1F61BB80-9982-4648-91B4-E1B5784A1A6C@wsanchez.net>
References: <1F61BB80-9982-4648-91B4-E1B5784A1A6C@wsanchez.net>
Message-ID: <20150519113113.21155.1818683239.divmod.xquotient.21@top>

On 10:50 am, wsanchez at wsanchez.net wrote:
>  I took a stab at porting trial to use twisted.logger 
>(http://tm.tl/7863) but I have a test failing:
>
>twisted.trial.test.test_reporter.TestErrorReporting.test_hiddenException
>
>  I don?t quite know what that test is doing.  I added some additional 
>output on my branch (branches/log-trial-7863) but that didn?t make me 
>any smarter.
>
>  Is anyone familiar with this code able to explain how I may have 
>broken it?
>
>         -wsv

Hi Wilfredo,

This looks like a test for the logging done in the implementation of 
`IReactorTime`.

The test runs another test, `testHiddenException`. 
`testHiddenException` uses `reactor.callLater` to run a function that 
raises an exception.  Then `testHiddenException` does a horrible thing 
to the reactor to make the delayed call run (and thus raise the 
exception which it then expects to be attributed to the running test as 
an error).  Then it *also* fails the test - I suppose because at some 
point there was a bug where "failure" results interfered with "error" 
results somehow.

I don't see how this test is particularly different from one like:

    def test_hiddenException(self):
        try:
            raise SomeException()
        except:
            log.deferr()
        self.fail("something else")

Does your branch need to port the `IReactorTime` exception handling to 
the new logging API?  Or maybe it needs to port the way Trial itself 
integrates with the logging system so that it can observe failures like 
this one?

Jean-Paul


From zadka.moshe at gmail.com  Tue May 19 06:07:23 2015
From: zadka.moshe at gmail.com (Moshe Zadka)
Date: Tue, 19 May 2015 12:07:23 +0000
Subject: [Twisted-Python] Multiple plugins in "twistd"
Message-ID: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>

Background

Currently, "twistd" assumes one-run-one-plugin. It would be nice to load up
multiple plug-ins in Twisted, for many reasons. These include: serving the
same in-memory content via separate protocols, adding manhole to other
plug-ins (so the end-deployer can add it to other things, as opposed to the
original implementor, and a catch-all category of "auxiliary services".

Auxiliary services are those which are not useful in and of themselves, but
add value to a service which does something else of use.

Examples of auxiliary services -- a logging service (that connects to some
logging protocol on start-up), a metrics service (that sends statistics to
a collector like statsd or riemann) or an error-sending service (to
something like Sentry).

Proposal

tl;dr: four new tickets (codenamed SUBCOMMANDS, SERVICES, MANHOLE and
PROVIDERS) and one old ticket (3538)

SUBCOMMANDS: Add '+' as a special character in t.p.usage.Options. This
behavior will be off by default, and controlled by an attribute on the
Options instance "allowMultipleSubcommands".

The attribute will only be checked when the first sub-command starts, to
allow setting it based on global flags. When the option is on, '-+' will be
passed as '+' to the Options instance, to allow sending plain '+' to
sub-commands.

Glyph thinks there's a ticket for it. I couldn't find it in "search for
tickets in 'core' whose description mentionds 'command'". Unless anyone can
find it, I'll open a new ticket.

SERVICES (depends on SUBCOMMANDS): In twistd, set the flag aMS if
'--allow-multiple-services' is given. Add to the application all services.

3538 (depends on SERVICES): If '--allow-multiple-services' is given, and
'--python <.tac file>' is given, process subcommands as usual.

PROVIDERS: Add a function,
       "providersInHierarchy(IService, IInterface) -> List[IInterface]"
that returns all services in the hierarchy which provide the interface.
This ticket does not depend on any other tickets.

MANHOLE (depends on PROVIDERS, SERVICES): Add a built-in twistd plugin
named "manhole". The plugin will expose manhole as PB/telnet with a
namespace that includes
  {'services': providersInHierarchy(manholeService, IService)}
This ticket technically could only depend on PROVIDERS, but to be useful,
it also depends on SERVICES
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150519/267e6213/attachment.html>

From exarkun at twistedmatrix.com  Tue May 19 06:59:21 2015
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 19 May 2015 12:59:21 -0000
Subject: [Twisted-Python] Multiple plugins in "twistd"
In-Reply-To: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
References: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
Message-ID: <20150519125921.21155.2042175335.divmod.xquotient.100@top>

On 12:07 pm, zadka.moshe at gmail.com wrote:
>Background
>
>Currently, "twistd" assumes one-run-one-plugin. It would be nice to 
>load up
>multiple plug-ins in Twisted, for many reasons. These include: serving 
>the
>same in-memory content via separate protocols, adding manhole to other
>plug-ins (so the end-deployer can add it to other things, as opposed to 
>the
>original implementor, and a catch-all category of "auxiliary services".
>
>Auxiliary services are those which are not useful in and of themselves, 
>but
>add value to a service which does something else of use.
>
>Examples of auxiliary services -- a logging service (that connects to 
>some
>logging protocol on start-up), a metrics service (that sends statistics 
>to
>a collector like statsd or riemann) or an error-sending service (to
>something like Sentry).
>
>Proposal
>
>tl;dr: four new tickets (codenamed SUBCOMMANDS, SERVICES, MANHOLE and
>PROVIDERS) and one old ticket (3538)
>
>SUBCOMMANDS: Add '+' as a special character in t.p.usage.Options. This
>behavior will be off by default, and controlled by an attribute on the
>Options instance "allowMultipleSubcommands".
>
>The attribute will only be checked when the first sub-command starts, 
>to
>allow setting it based on global flags. When the option is on, '-+' 
>will be
>passed as '+' to the Options instance, to allow sending plain '+' to
>sub-commands.

Having a new, weird, fragile syntax is probably the least interesting 
part of this.  I suggest not doing this part - or at the very least, not 
doing it first and not making it a general part of `Options`.

There are lots of other ways to get the service object from more than 
one service plugin.  For example, read lines from a file.  Or have a 
variation of `--python` or something else similar using the existing 
option syntax `Options` supports.

The more interesting part to get right is the underlying model which you 
discuss elsewhere.
>
>Glyph thinks there's a ticket for it. I couldn't find it in "search for
>tickets in 'core' whose description mentionds 'command'". Unless anyone 
>can
>find it, I'll open a new ticket.

I think there is a ticket for being able to use multiple twistd plugins. 
I don't think there's a ticket for a general change to `Options`.
>
>SERVICES (depends on SUBCOMMANDS): In twistd, set the flag aMS if
>'--allow-multiple-services' is given. Add to the application all 
>services.

If you skip the `SUBCOMMANDS` ticket described above, then you can skip 
this too.
>3538 (depends on SERVICES): If '--allow-multiple-services' is given, 
>and
>'--python <.tac file>' is given, process subcommands as usual.

Or just process the tac file and the subcommand if they're both given - 
without requiring an extra option?  The current behavior, "silently 
ignore one of the arguments", doesn't seem particularly worth keeping to 
me.
>PROVIDERS: Add a function,
>       "providersInHierarchy(IService, IInterface) -> List[IInterface]"
>that returns all services in the hierarchy which provide the interface.
>This ticket does not depend on any other tickets.

The first argument needs to be `IServiceCollection` instead of 
`IService`.
>MANHOLE (depends on PROVIDERS, SERVICES): Add a built-in twistd plugin
>named "manhole". The plugin will expose manhole as PB/telnet with a
>namespace that includes
>  {'services': providersInHierarchy(manholeService, IService)}
>This ticket technically could only depend on PROVIDERS, but to be 
>useful,
>it also depends on SERVICES

Manhole is part of Conch now and the telnet manhole is deprecated (and 
the PB manhole really should be deprecated - using a structured protocol 
for manhole isn't a bad idea but the existing implementation is half 
broken, mostly untested, exposes tons of implementation details as part 
of the public interface, etc.  If this were a piece of widely used 
software it would probably be worth gradually renovating - but it's 
basically used by no one so starting fresh makes more sense).

So it's part of Conch.  And ... it exists already.  I'm pretty sure no 
one will object if you add a new name to the default namespace.

Thanks for taking this on.

Jean-Paul


From jerryguitarist at gmail.com  Tue May 19 10:38:18 2015
From: jerryguitarist at gmail.com (Eeshan Garg)
Date: Tue, 19 May 2015 22:08:18 +0530
Subject: [Twisted-Python] Need advice on how to move further with ticket 7897
Message-ID: <CA+2gYioDgfddT-NTrvk_yw4Z4V37mSPTpY0ck1vNwEAV+OhnjQ@mail.gmail.com>

Hi!

I filed a ticket (Log the log events in twisted.internet.protocol.Factory
using the new logging system <https://twistedmatrix.com/trac/ticket/7897>)
and I have also submitted a patch for it. However, while working on the
patch, I had some concerns that I have already summarized in a ticket
comment. I would really appreciate it if someone could please take a look
and give me some advice as to how to move further with this ticket so that
I can start working on other patches for porting to twisted.logger. :-)

About a week ago, I sent a similar email to the mailing list (quoted
below), but did not get a reply, so I thought I would send another one.

On Wed, May 13, 2015 at 12:37 PM, Eeshan Garg <jerryguitarist at gmail.com>
wrote:

> Hello everyone!
>
> I am aware that I have sent an email with a similar subject line before,
> but this time this involves a particular ticket (<
> https://twistedmatrix.com/trac/ticket/7897>) that I have submitted for
> review. The ticket is about logging the log events in
> twisted.internet.protocol.Factory using the new logging system, and it is
> one of the first tickets about modifying existing logging statements in the
> Twisted code base to use the new system.
>
> While working on this ticket, I ran into some issues that I have
> summarized in a comment on the same ticket <
> https://twistedmatrix.com/trac/ticket/7897#comment:2> and it would mean a
> lot to me if someone could take a look.
>
> I recall that HawkOwl had some concerns regarding moving to the new
> logging system. And so I thought that it would be better if I share my
> thoughts on the mailing list as well and not just on the particular ticket,
> so that anybody who is interested in sharing their concerns can do so.
>
> Regards,
> Eeshan Garg
>

Let me know what you think!

Thanks & regards,
Eeshan Garg
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150519/9222e734/attachment.html>

From glyph at twistedmatrix.com  Tue May 19 13:02:20 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 19 May 2015 12:02:20 -0700
Subject: [Twisted-Python] Multiple plugins in "twistd"
In-Reply-To: <20150519125921.21155.2042175335.divmod.xquotient.100@top>
References: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
 <20150519125921.21155.2042175335.divmod.xquotient.100@top>
Message-ID: <1DBE6BD3-AA90-405E-8A67-E6DC0DA8D9D4@twistedmatrix.com>


> On May 19, 2015, at 05:59, exarkun at twistedmatrix.com wrote:
> 
> On 12:07 pm, zadka.moshe at gmail.com wrote:
>> Background
>> 
>> Currently, "twistd" assumes one-run-one-plugin. It would be nice to load up
>> multiple plug-ins in Twisted, for many reasons. These include: serving the
>> same in-memory content via separate protocols, adding manhole to other
>> plug-ins (so the end-deployer can add it to other things, as opposed to the
>> original implementor, and a catch-all category of "auxiliary services".
>> 
>> Auxiliary services are those which are not useful in and of themselves, but
>> add value to a service which does something else of use.
>> 
>> Examples of auxiliary services -- a logging service (that connects to some
>> logging protocol on start-up), a metrics service (that sends statistics to
>> a collector like statsd or riemann) or an error-sending service (to
>> something like Sentry).
>> 
>> Proposal
>> 
>> tl;dr: four new tickets (codenamed SUBCOMMANDS, SERVICES, MANHOLE and
>> PROVIDERS) and one old ticket (3538)
>> 
>> SUBCOMMANDS: Add '+' as a special character in t.p.usage.Options. This
>> behavior will be off by default, and controlled by an attribute on the
>> Options instance "allowMultipleSubcommands".
>> 
>> The attribute will only be checked when the first sub-command starts, to
>> allow setting it based on global flags. When the option is on, '-+' will be
>> passed as '+' to the Options instance, to allow sending plain '+' to
>> sub-commands.
> 
> Having a new, weird, fragile syntax is probably the least interesting part of this.  I suggest not doing this part - or at the very least, not doing it first and not making it a general part of `Options`.
> 
> There are lots of other ways to get the service object from more than one service plugin.  For example, read lines from a file.  Or have a variation of `--python` or something else similar using the existing option syntax `Options` supports.
> 
> The more interesting part to get right is the underlying model which you discuss elsewhere.

I love new, weird syntaxes, but I have to agree here.  Let's do it with a boring syntax with no compatibility implications first.  The boring syntax would actually be quite similar to the exciting one; a "compose" plugin.  Consider: "twistd compose web --path . + words --irc-port=6789".  There's no need to make this a general feature of Options to do it this way; just have the "compose" plugin take its argument list and pass it to two discrete other Options instances as lists of strings, looking for a "+" simply as the place to split the argument list.  You could also find some other way to split the argument list but "+" doesn't seem particularly obscure in this context to me.  (If there's really a need to pass a literal "+" to a plugin we could add an escaping syntax as well.)

>> Glyph thinks there's a ticket for it. I couldn't find it in "search for
>> tickets in 'core' whose description mentionds 'command'". Unless anyone can
>> find it, I'll open a new ticket.
> 
> I think there is a ticket for being able to use multiple twistd plugins. I don't think there's a ticket for a general change to `Options`.

I was referring to the multiple-twistd-plugin ticket.

>> SERVICES (depends on SUBCOMMANDS): In twistd, set the flag aMS if
>> '--allow-multiple-services' is given. Add to the application all services.
> 
> If you skip the `SUBCOMMANDS` ticket described above, then you can skip this too.
>> 3538 (depends on SERVICES): If '--allow-multiple-services' is given, and
>> '--python <.tac file>' is given, process subcommands as usual.
> 
> Or just process the tac file and the subcommand if they're both given - without requiring an extra option?  The current behavior, "silently ignore one of the arguments", doesn't seem particularly worth keeping to me.

It seems halfway plausible to me that someone could have some automation that chooses a plugin and/or a python file and expects that one or the other will be ignored.  So we should do the usual incompatibility-notification dance but I don't anticipate any objections.

>> PROVIDERS: Add a function,
>>      "providersInHierarchy(IService, IInterface) -> List[IInterface]"
>> that returns all services in the hierarchy which provide the interface.
>> This ticket does not depend on any other tickets.
> 
> The first argument needs to be `IServiceCollection` instead of `IService`.
>> MANHOLE (depends on PROVIDERS, SERVICES): Add a built-in twistd plugin
>> named "manhole". The plugin will expose manhole as PB/telnet with a
>> namespace that includes
>> {'services': providersInHierarchy(manholeService, IService)}
>> This ticket technically could only depend on PROVIDERS, but to be useful,
>> it also depends on SERVICES
> 
> Manhole is part of Conch now and the telnet manhole is deprecated (and the PB manhole really should be deprecated - using a structured protocol for manhole isn't a bad idea but the existing implementation is half broken, mostly untested, exposes tons of implementation details as part of the public interface, etc.  If this were a piece of widely used software it would probably be worth gradually renovating - but it's basically used by no one so starting fresh makes more sense).
> 
> So it's part of Conch.  And ... it exists already.  I'm pretty sure no one will object if you add a new name to the default namespace.
> 
> Thanks for taking this on.

Yeah.  It's great to have you around again, Moshe :).

-glyph



From tom.prince at ualberta.net  Tue May 19 15:01:54 2015
From: tom.prince at ualberta.net (Tom Prince)
Date: Tue, 19 May 2015 15:01:54 -0600
Subject: [Twisted-Python] Multiple plugins in "twistd"
In-Reply-To: <1DBE6BD3-AA90-405E-8A67-E6DC0DA8D9D4@twistedmatrix.com>
References: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
 <20150519125921.21155.2042175335.divmod.xquotient.100@top>
 <1DBE6BD3-AA90-405E-8A67-E6DC0DA8D9D4@twistedmatrix.com>
Message-ID: <87wq04mgcd.fsf@hermes.hocat.ca>

Glyph <glyph at twistedmatrix.com> writes:

> You could also find some other way to split the argument list but "+" doesn't seem particularly obscure in this context to me.  (If there's really a need to pass a literal "+" to a plugin we could add an escaping syntax as well.)

I think if we are adding syntax, then we should also add escaping at the
same time.

On a related note, when designing this kind of syntax, I think it is
often valuable to explictly leave some of the space as an explict error,
to leave freedom to extend the syntax in the future.

I wonder if there is any value in having a syntax that is nestable. I
don't see any specific use case, but I can imagine wanting ot pass
options to `compose` that are scoped to an individual plugin that it is
loading. And then, maybe you want to nest things so that those options
apply to a subset of plugins, which might naturally be implemented as
compos of a compose.

The suggestions in the last paragraph are perhaps somewhat contrived,
and certainly not something that should be *implemnted* in a first (or
even second pass). But considering the possiblity, and then picking a
syntax that might allow those kinds of extension (and then explictly
making the extension syntax an error) gives us the ability to add those
features without breaking backwards compatibility.

  Tom


From glyph at twistedmatrix.com  Tue May 19 15:35:44 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 19 May 2015 14:35:44 -0700
Subject: [Twisted-Python] Multiple plugins in "twistd"
In-Reply-To: <87wq04mgcd.fsf@hermes.hocat.ca>
References: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
 <20150519125921.21155.2042175335.divmod.xquotient.100@top>
 <1DBE6BD3-AA90-405E-8A67-E6DC0DA8D9D4@twistedmatrix.com>
 <87wq04mgcd.fsf@hermes.hocat.ca>
Message-ID: <56F1BE0D-0862-4C21-A873-7EDAB7EEAD5B@twistedmatrix.com>


> On May 19, 2015, at 14:01, Tom Prince <tom.prince at ualberta.net> wrote:
> 
> Glyph <glyph at twistedmatrix.com> writes:
> 
>> You could also find some other way to split the argument list but "+" doesn't seem particularly obscure in this context to me.  (If there's really a need to pass a literal "+" to a plugin we could add an escaping syntax as well.)
> 
> I think if we are adding syntax, then we should also add escaping at the
> same time.
> 
> On a related note, when designing this kind of syntax, I think it is
> often valuable to explictly leave some of the space as an explict error,
> to leave freedom to extend the syntax in the future.
> 
> I wonder if there is any value in having a syntax that is nestable. I
> don't see any specific use case, but I can imagine wanting ot pass
> options to `compose` that are scoped to an individual plugin that it is
> loading. And then, maybe you want to nest things so that those options
> apply to a subset of plugins, which might naturally be implemented as
> compos of a compose.
> 
> The suggestions in the last paragraph are perhaps somewhat contrived,
> and certainly not something that should be *implemnted* in a first (or
> even second pass). But considering the possiblity, and then picking a
> syntax that might allow those kinds of extension (and then explictly
> making the extension syntax an error) gives us the ability to add those
> features without breaking backwards compatibility.

We can un-escape '\+' as a token just fine, and if we do that, all of the weird use-cases you just described are possible.  I can't think of any options I'd want to pass to 'compose' myself, but it would be easy enough to add some flags to its parser.

-g



From farhan-twistedlistserv at offmail.us  Tue May 19 16:46:29 2015
From: farhan-twistedlistserv at offmail.us (Farhan Khan)
Date: Tue, 19 May 2015 18:46:29 -0400
Subject: [Twisted-Python] HTTP and SSH over SOCKS5
Message-ID: <7f22b23969c23ed13d434e3845e6c449@mail.offmail.us>

Hi,

I am working on a project that will require running several HTTP 
connections over a list of SOCKS5 proxies. I have found a lot of sample 
code that runs HTTP over a regular TCP socket, but none that demonstrate 
the functionality over SOCKS5. Is this possible in Twisted or would it 
have to be a protocol I would independently develop?

I plan on doing something similar to SSH, so it would be nice if the 
SOCKS5 module simply replaced the TCP socket's send/recv functions so 
that I could easily port the code over to SSH.

If I have to figure out SSH separately, that's okay. For starters just 
HTTP would be nice.

Thanks!
- Farhan



From zadka.moshe at gmail.com  Tue May 19 20:41:21 2015
From: zadka.moshe at gmail.com (Moshe Zadka)
Date: Wed, 20 May 2015 02:41:21 +0000
Subject: [Twisted-Python] Multiple plugins in "twistd"
In-Reply-To: <56F1BE0D-0862-4C21-A873-7EDAB7EEAD5B@twistedmatrix.com>
References: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
 <20150519125921.21155.2042175335.divmod.xquotient.100@top>
 <1DBE6BD3-AA90-405E-8A67-E6DC0DA8D9D4@twistedmatrix.com>
 <87wq04mgcd.fsf@hermes.hocat.ca>
 <56F1BE0D-0862-4C21-A873-7EDAB7EEAD5B@twistedmatrix.com>
Message-ID: <CAOA_4jAy8Lu1=y=ehrQc+ab4vQjgNifJM02ZEGvnzvo7WQHfMw@mail.gmail.com>

OK, so let me once again enumerate the tickets I'm going to open, because
it seems like we're reaching consensus:

[1] PROVIDES (pretty much as written: exarkun -- the idea is to walk up the
hierarchy and then back down, so I did mean IService -- go up until you
find a root, then go down and get all descendents)
[2] 3538 -- will do it with a flag to turn on .tac + plugin
[2.1] I'm assuming the deprecation dance is "flag to turn on" -> "flag to
turn on + warn if .tac+plugin and no flag" -> "make flag no-op" -> "warn on
flag" -> "remove flag". If someone doesn't want this dance, please let me
know preferred alternatives.
[3] MAKE -- API for "createServiceFromNameAndOptions" (basically,
compose-as-a-library)
[4] COMPOSE (implements twistd_compose plugin)

I think there's at least rough consensus that these four pieces are useful,
even if there's still some disagreement on the details, so maybe the next
step is to open the three to-be-opened tickets, and then to discuss the
details on the tickets. I'm going to do the ticket opening tomorrow, and
maybe even work on them during the SF Python Meetup (anyone in SF -- you
should [a] go and [b] say hi also [c] optionally, help me with that).

If anyone has serious objections to this plan, let me know!

Thanks,
Moshe Z.

On Tue, May 19, 2015 at 2:35 PM Glyph <glyph at twistedmatrix.com> wrote:

>
> > On May 19, 2015, at 14:01, Tom Prince <tom.prince at ualberta.net> wrote:
> >
> > Glyph <glyph at twistedmatrix.com> writes:
> >
> >> You could also find some other way to split the argument list but "+"
> doesn't seem particularly obscure in this context to me.  (If there's
> really a need to pass a literal "+" to a plugin we could add an escaping
> syntax as well.)
> >
> > I think if we are adding syntax, then we should also add escaping at the
> > same time.
> >
> > On a related note, when designing this kind of syntax, I think it is
> > often valuable to explictly leave some of the space as an explict error,
> > to leave freedom to extend the syntax in the future.
> >
> > I wonder if there is any value in having a syntax that is nestable. I
> > don't see any specific use case, but I can imagine wanting ot pass
> > options to `compose` that are scoped to an individual plugin that it is
> > loading. And then, maybe you want to nest things so that those options
> > apply to a subset of plugins, which might naturally be implemented as
> > compos of a compose.
> >
> > The suggestions in the last paragraph are perhaps somewhat contrived,
> > and certainly not something that should be *implemnted* in a first (or
> > even second pass). But considering the possiblity, and then picking a
> > syntax that might allow those kinds of extension (and then explictly
> > making the extension syntax an error) gives us the ability to add those
> > features without breaking backwards compatibility.
>
> We can un-escape '\+' as a token just fine, and if we do that, all of the
> weird use-cases you just described are possible.  I can't think of any
> options I'd want to pass to 'compose' myself, but it would be easy enough
> to add some flags to its parser.
>
> -g
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150520/dcd432b5/attachment.html>

From glyph at twistedmatrix.com  Tue May 19 22:21:54 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 19 May 2015 21:21:54 -0700
Subject: [Twisted-Python] HTTP and SSH over SOCKS5
In-Reply-To: <7f22b23969c23ed13d434e3845e6c449@mail.offmail.us>
References: <7f22b23969c23ed13d434e3845e6c449@mail.offmail.us>
Message-ID: <2440AF91-B415-49F2-947A-F4C67A00E001@twistedmatrix.com>


> On May 19, 2015, at 15:46, Farhan Khan <farhan-twistedlistserv at offmail.us> wrote:
> 
> Hi,
> 
> I am working on a project that will require running several HTTP connections over a list of SOCKS5 proxies. I have found a lot of sample code that runs HTTP over a regular TCP socket, but none that demonstrate the functionality over SOCKS5. Is this possible in Twisted or would it have to be a protocol I would independently develop?
> 
> I plan on doing something similar to SSH, so it would be nice if the SOCKS5 module simply replaced the TCP socket's send/recv functions so that I could easily port the code over to SSH.
> 
> If I have to figure out SSH separately, that's okay. For starters just HTTP would be nice.

Have you investigated and read the docs for https://github.com/habnabit/txsocksx <https://github.com/habnabit/txsocksx> ?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150519/d70241fa/attachment-0001.html>

From psi29a at gmail.com  Wed May 20 01:01:23 2015
From: psi29a at gmail.com (bret curtis)
Date: Wed, 20 May 2015 09:01:23 +0200
Subject: [Twisted-Python] Twisted 15.2 Release Announcement
In-Reply-To: <EE0847B2-0F6E-4B21-A582-BE754B824A90@atleastfornow.net>
References: <EE0847B2-0F6E-4B21-A582-BE754B824A90@atleastfornow.net>
Message-ID: <CA+LhZ98gA-GOYEqAzXw9EJrta=B_=K+tjTxjb+njjWfZdoeTjg@mail.gmail.com>

Great job! :)

Cheers,
Bret

On Tue, May 19, 2015 at 8:14 AM, HawkOwl <hawkowl at atleastfornow.net> wrote:

> On behalf of Twisted Matrix Labs, I'm honoured to announce the release of
> Twisted 15.2.
>
> Bringing not only headlining features but also a lot of incremental
> improvements, this release has got plenty to like:
>
> - twisted.logger has landed! This is a brand-new, feature-rich logging
> framework.
> - Python 3.4 is now a supported platform for all the Py3 ported modules.
> - twisted.trial.unittest.TestCase's assertEqual, assertTrue, and
> assertFalse methods now pass through the standard library's more
> informative failure messages.
> - twisted.python.filepath.FilePath now supports Unicode (text) paths
> properly, and includes as{Bytes,Text}Mode methods for interacting with APIs
> that require a text/bytes-only FilePath.
> - twisted.mail.smtp.sendmail now supports ESMTP and provides a high-level
> interface for sending mail.
> - The following parts of Twisted are now ported to Python 3:
>    - twisted.internet.process
>    - twisted.cred.credentials
>    - twisted.python.modules
>    - twisted.internet.kqreactor
>    - twisted.internet.endpoints.ProcessEndpoint
>    - twisted.web.static
> - Over 50 tickets closed since 15.1.
>
> You can find the downloads at https://pypi.python.org/pypi/Twisted (or
> alternatively http://twistedmatrix.com/trac/wiki/Downloads).
>
> Many thanks to everyone who had a part in this release - the supporters of
> the Twisted Software Foundation, the developers who contributed code as
> well as documentation, and all the people building great things with
> Twisted!
>
> Twisted Regards,
> HawkOwl
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150520/dd19eae2/attachment.html>

From techtonik at gmail.com  Wed May 20 01:16:54 2015
From: techtonik at gmail.com (anatoly techtonik)
Date: Wed, 20 May 2015 10:16:54 +0300
Subject: [Twisted-Python] Twisted 15.2 Release Announcement
In-Reply-To: <EE0847B2-0F6E-4B21-A582-BE754B824A90@atleastfornow.net>
References: <EE0847B2-0F6E-4B21-A582-BE754B824A90@atleastfornow.net>
Message-ID: <CAPkN8x+2oNXENN4NBDhz8oGoakZciBnGLYsuCRg8rbbNZFq7_w@mail.gmail.com>

On Tue, May 19, 2015 at 9:14 AM, HawkOwl <hawkowl at atleastfornow.net> wrote:
> - twisted.logger has landed! This is a brand-new, feature-rich logging framework.

https://twisted.readthedocs.org/en/latest/core/howto/logger.html?highlight=logger

Good stuff.


From hawkowl at atleastfornow.net  Wed May 20 02:22:14 2015
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Wed, 20 May 2015 16:22:14 +0800
Subject: [Twisted-Python] Twisted 15.2.1 Prerelease Announcement
Message-ID: <357F8FD4-5E08-4E8A-8DD8-1126DA398FF7@atleastfornow.net>

Hi everyone!

Twisted 15.2 has some minor regressions in the logging framework. These issues are fixed in 15.2.1, of which this is the prerelease of.

You can get the tarballs and the changelog from http://twistedmatrix.com/Releases/pre/15.2.1pre1/.

Please test it out, and if there's no issues, 15.2.1 will be released before the week's end.

- Hawkie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150520/68cfe646/attachment.pgp>

From exarkun at twistedmatrix.com  Wed May 20 05:08:32 2015
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 20 May 2015 11:08:32 -0000
Subject: [Twisted-Python] Multiple plugins in "twistd"
In-Reply-To: <CAOA_4jAy8Lu1=y=ehrQc+ab4vQjgNifJM02ZEGvnzvo7WQHfMw@mail.gmail.com>
References: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
 <20150519125921.21155.2042175335.divmod.xquotient.100@top>
 <1DBE6BD3-AA90-405E-8A67-E6DC0DA8D9D4@twistedmatrix.com>
 <87wq04mgcd.fsf@hermes.hocat.ca>
 <56F1BE0D-0862-4C21-A873-7EDAB7EEAD5B@twistedmatrix.com>
 <CAOA_4jAy8Lu1=y=ehrQc+ab4vQjgNifJM02ZEGvnzvo7WQHfMw@mail.gmail.com>
Message-ID: <20150520110832.21155.74837950.divmod.xquotient.107@top>

On 02:41 am, zadka.moshe at gmail.com wrote:
>OK, so let me once again enumerate the tickets I'm going to open, 
>because
>it seems like we're reaching consensus:
>
>[1] PROVIDES (pretty much as written: exarkun -- the idea is to walk up 
>the
>hierarchy and then back down, so I did mean IService -- go up until you
>find a root, then go down and get all descendents)

Oops.  You can't get children *or* a parent from IService.  But you can 
at least get children from IServiceCollection.

Jean-Paul
>[2] 3538 -- will do it with a flag to turn on .tac + plugin
>[2.1] I'm assuming the deprecation dance is "flag to turn on" -> "flag 
>to
>turn on + warn if .tac+plugin and no flag" -> "make flag no-op" -> 
>"warn on
>flag" -> "remove flag". If someone doesn't want this dance, please let 
>me
>know preferred alternatives.

Glyph referred to the alternative.  Here it is fully spelled out:

https://twistedmatrix.com/trac/wiki/CompatibilityPolicy#ProcedureforExceptionstothisPolicy

Alternatively, do it the nice way but not *quite* as you described:

  * Make a new flag like --python but that combines with plugins.
  * Deprecate --python
  * Remove --python

Three steps instead of five and only bother the user once instead of 
twice.

Thanks!

Jean-Paul
>[3] MAKE -- API for "createServiceFromNameAndOptions" (basically,
>compose-as-a-library)
>[4] COMPOSE (implements twistd_compose plugin)
>
>I think there's at least rough consensus that these four pieces are 
>useful,
>even if there's still some disagreement on the details, so maybe the 
>next
>step is to open the three to-be-opened tickets, and then to discuss the
>details on the tickets. I'm going to do the ticket opening tomorrow, 
>and
>maybe even work on them during the SF Python Meetup (anyone in SF -- 
>you
>should [a] go and [b] say hi also [c] optionally, help me with that).
>
>If anyone has serious objections to this plan, let me know!
>
>Thanks,
>Moshe Z.
>
>On Tue, May 19, 2015 at 2:35 PM Glyph <glyph at twistedmatrix.com> wrote:
>>
>> > On May 19, 2015, at 14:01, Tom Prince <tom.prince at ualberta.net> 
>>wrote:
>> >
>> > Glyph <glyph at twistedmatrix.com> writes:
>> >
>> >> You could also find some other way to split the argument list but 
>>"+"
>>doesn't seem particularly obscure in this context to me.  (If there's
>>really a need to pass a literal "+" to a plugin we could add an 
>>escaping
>>syntax as well.)
>> >
>> > I think if we are adding syntax, then we should also add escaping at 
>>the
>> > same time.
>> >
>> > On a related note, when designing this kind of syntax, I think it is
>> > often valuable to explictly leave some of the space as an explict 
>>error,
>> > to leave freedom to extend the syntax in the future.
>> >
>> > I wonder if there is any value in having a syntax that is nestable. 
>>I
>> > don't see any specific use case, but I can imagine wanting ot pass
>> > options to `compose` that are scoped to an individual plugin that it 
>>is
>> > loading. And then, maybe you want to nest things so that those 
>>options
>> > apply to a subset of plugins, which might naturally be implemented 
>>as
>> > compos of a compose.
>> >
>> > The suggestions in the last paragraph are perhaps somewhat 
>>contrived,
>> > and certainly not something that should be *implemnted* in a first 
>>(or
>> > even second pass). But considering the possiblity, and then picking 
>>a
>> > syntax that might allow those kinds of extension (and then explictly
>> > making the extension syntax an error) gives us the ability to add 
>>those
>> > features without breaking backwards compatibility.
>>
>>We can un-escape '\+' as a token just fine, and if we do that, all of 
>>the
>>weird use-cases you just described are possible.  I can't think of any
>>options I'd want to pass to 'compose' myself, but it would be easy 
>>enough
>>to add some flags to its parser.
>>
>>-g
>


From exarkun at twistedmatrix.com  Wed May 20 05:10:44 2015
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 20 May 2015 11:10:44 -0000
Subject: [Twisted-Python] Need advice on how to move further with ticket
 7897
In-Reply-To: <CA+2gYioDgfddT-NTrvk_yw4Z4V37mSPTpY0ck1vNwEAV+OhnjQ@mail.gmail.com>
References: <CA+2gYioDgfddT-NTrvk_yw4Z4V37mSPTpY0ck1vNwEAV+OhnjQ@mail.gmail.com>
Message-ID: <20150520111044.21155.1787997368.divmod.xquotient.109@top>

On 19 May, 04:38 pm, jerryguitarist at gmail.com wrote:
>Hi!
>
>I filed a ticket (Log the log events in 
>twisted.internet.protocol.Factory
>using the new logging system 
><https://twistedmatrix.com/trac/ticket/7897>)
>and I have also submitted a patch for it. However, while working on the
>patch, I had some concerns that I have already summarized in a ticket
>comment. I would really appreciate it if someone could please take a 
>look
>and give me some advice as to how to move further with this ticket so 
>that
>I can start working on other patches for porting to twisted.logger. :-)

I think this question may indicate a certain section of documentation 
that is missing for twisted.logger.

Perhaps some folks who have ideas about how this new logging library 
should be used could look at that ticket and then clarify some existing 
twisted.logger docs or add something to them.

Jean-Paul


From exarkun at twistedmatrix.com  Wed May 20 05:13:25 2015
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 20 May 2015 11:13:25 -0000
Subject: [Twisted-Python] Multiple plugins in "twistd"
In-Reply-To: <87wq04mgcd.fsf@hermes.hocat.ca>
References: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
 <20150519125921.21155.2042175335.divmod.xquotient.100@top>
 <1DBE6BD3-AA90-405E-8A67-E6DC0DA8D9D4@twistedmatrix.com>
 <87wq04mgcd.fsf@hermes.hocat.ca>
Message-ID: <20150520111325.21155.473218630.divmod.xquotient.114@top>

On 19 May, 09:01 pm, tom.prince at ualberta.net wrote:
>Glyph <glyph at twistedmatrix.com> writes:
>>You could also find some other way to split the argument list but "+" 
>>doesn't seem particularly obscure in this context to me.  (If there's 
>>really a need to pass a literal "+" to a plugin we could add an 
>>escaping syntax as well.)
>
>I think if we are adding syntax, then we should also add escaping at 
>the
>same time.
>
>On a related note, when designing this kind of syntax, I think it is
>often valuable to explictly leave some of the space as an explict 
>error,
>to leave freedom to extend the syntax in the future.

I think this is 100% correct.  This is part of why I don't want the 
syntax added to `Options`.  If it's a feature of, say, a "compose" 
twistd plugin then you can always throw the whole "compose" twistd 
plugin in the trash and start again.  That gives you quite a lot of 
space for syntax changes. :)

(And of course, not introducing a syntax at all leaves you even more 
room... but talking this crowd out of inventing weird syntaxes is 
probably an exercise in futility.)

Jean-Paul


From glyph at twistedmatrix.com  Wed May 20 13:29:16 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 20 May 2015 12:29:16 -0700
Subject: [Twisted-Python] Multiple plugins in "twistd"
In-Reply-To: <20150520111325.21155.473218630.divmod.xquotient.114@top>
References: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
 <20150519125921.21155.2042175335.divmod.xquotient.100@top>
 <1DBE6BD3-AA90-405E-8A67-E6DC0DA8D9D4@twistedmatrix.com>
 <87wq04mgcd.fsf@hermes.hocat.ca>
 <20150520111325.21155.473218630.divmod.xquotient.114@top>
Message-ID: <D7346F9E-7BBE-4964-8C76-3F7AF48C047C@twistedmatrix.com>


> On May 20, 2015, at 04:13, exarkun at twistedmatrix.com wrote:
> 
> On 19 May, 09:01 pm, tom.prince at ualberta.net wrote:
>> Glyph <glyph at twistedmatrix.com> writes:
>>> You could also find some other way to split the argument list but "+" doesn't seem particularly obscure in this context to me.  (If there's really a need to pass a literal "+" to a plugin we could add an escaping syntax as well.)
>> 
>> I think if we are adding syntax, then we should also add escaping at the
>> same time.
>> 
>> On a related note, when designing this kind of syntax, I think it is
>> often valuable to explictly leave some of the space as an explict error,
>> to leave freedom to extend the syntax in the future.
> 
> I think this is 100% correct.  This is part of why I don't want the syntax added to `Options`.  If it's a feature of, say, a "compose" twistd plugin then you can always throw the whole "compose" twistd plugin in the trash and start again.  That gives you quite a lot of space for syntax changes. :)
> 
> (And of course, not introducing a syntax at all leaves you even more room... but talking this crowd out of inventing weird syntaxes is probably an exercise in futility.)

Much as I love weird syntaxes, using "+" as a separator for a 'compose' plugin seems about as straightforward as I could imagine such a thing working.  Do you have an alternate proposal that is less 'weird'?  I wouldn't promise to accept it but I wouldn't want to go with something unnecessarily weird just due to a failure of my imagination.

-glyph

From glyph at twistedmatrix.com  Wed May 20 14:37:26 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 20 May 2015 13:37:26 -0700
Subject: [Twisted-Python] Multiple plugins in "twistd"
In-Reply-To: <20150520110832.21155.74837950.divmod.xquotient.107@top>
References: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
 <20150519125921.21155.2042175335.divmod.xquotient.100@top>
 <1DBE6BD3-AA90-405E-8A67-E6DC0DA8D9D4@twistedmatrix.com>
 <87wq04mgcd.fsf@hermes.hocat.ca>
 <56F1BE0D-0862-4C21-A873-7EDAB7EEAD5B@twistedmatrix.com>
 <CAOA_4jAy8Lu1=y=ehrQc+ab4vQjgNifJM02ZEGvnzvo7WQHfMw@mail.gmail.com>
 <20150520110832.21155.74837950.divmod.xquotient.107@top>
Message-ID: <A87DC643-9B9D-414C-831A-1CB4422EB06C@twistedmatrix.com>


> On May 20, 2015, at 04:08, exarkun at twistedmatrix.com wrote:
> 
> On 02:41 am, zadka.moshe at gmail.com wrote:
>> OK, so let me once again enumerate the tickets I'm going to open, because
>> it seems like we're reaching consensus:
>> 
>> [1] PROVIDES (pretty much as written: exarkun -- the idea is to walk up the
>> hierarchy and then back down, so I did mean IService -- go up until you
>> find a root, then go down and get all descendents)
> 
> Oops.  You can't get children *or* a parent from IService.  But you can at least get children from IServiceCollection.

I went to go check on this, and not only are you right, but the docstrings in the reference documentation for Service, IService, and IServiceCollection seem to be full of errors and missing copy/pasted stuff.  Moshe, if you could have a look at maybe cleaning this area up (in a separate ticket, of course) as you're working on service stuff?

-glyph

From exarkun at twistedmatrix.com  Wed May 20 18:17:13 2015
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 21 May 2015 00:17:13 -0000
Subject: [Twisted-Python] Multiple plugins in "twistd"
In-Reply-To: <D7346F9E-7BBE-4964-8C76-3F7AF48C047C@twistedmatrix.com>
References: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
 <20150519125921.21155.2042175335.divmod.xquotient.100@top>
 <1DBE6BD3-AA90-405E-8A67-E6DC0DA8D9D4@twistedmatrix.com>
 <87wq04mgcd.fsf@hermes.hocat.ca>
 <20150520111325.21155.473218630.divmod.xquotient.114@top>
 <D7346F9E-7BBE-4964-8C76-3F7AF48C047C@twistedmatrix.com>
Message-ID: <20150521001713.21155.270918325.divmod.xquotient.157@top>

On 07:29 pm, glyph at twistedmatrix.com wrote:
>
>>On May 20, 2015, at 04:13, exarkun at twistedmatrix.com wrote:
>>
>>On 19 May, 09:01 pm, tom.prince at ualberta.net wrote:
>>>Glyph <glyph at twistedmatrix.com> writes:
>>>>You could also find some other way to split the argument list but 
>>>>"+" doesn't seem particularly obscure in this context to me.  (If 
>>>>there's really a need to pass a literal "+" to a plugin we could add 
>>>>an escaping syntax as well.)
>>>
>>>I think if we are adding syntax, then we should also add escaping at 
>>>the
>>>same time.
>>>
>>>On a related note, when designing this kind of syntax, I think it is
>>>often valuable to explictly leave some of the space as an explict 
>>>error,
>>>to leave freedom to extend the syntax in the future.
>>
>>I think this is 100% correct.  This is part of why I don't want the 
>>syntax added to `Options`.  If it's a feature of, say, a "compose" 
>>twistd plugin then you can always throw the whole "compose" twistd 
>>plugin in the trash and start again.  That gives you quite a lot of 
>>space for syntax changes. :)
>>
>>(And of course, not introducing a syntax at all leaves you even more 
>>room... but talking this crowd out of inventing weird syntaxes is 
>>probably an exercise in futility.)
>
>Much as I love weird syntaxes, using "+" as a separator for a 'compose' 
>plugin seems about as straightforward as I could imagine such a thing 
>working.  Do you have an alternate proposal that is less 'weird'?  I 
>wouldn't promise to accept it but I wouldn't want to go with something 
>unnecessarily weird just due to a failure of my imagination.

It's possible this is a case of necessary weirdness - at least, if 
you're dead-set on some kind of option-based CLI interface to this 
functionality.

Think about other CLI tools that try to offer this kind of composition. 
Only two really come to mind for me and one of those is not exactly well 
regarded for its novel syntax (hint - it rhymes with "schmestreamer).

This is not to say that this kind of composition is a bad thing - or 
even that no other widely-used software supports the kind of invoke- 
several-things-of-stuff behavior that we're talking about providing 
access to here.

However, I do think it is the case that most of the world tries to solve 
this problem without trying to force everything into a world-view framed 
by GNU getopt().

With that in mind, here are some alternatives:

  (0) The null proposal

    $ twistd compose \
        web --port 80 +
        manhole --auth foo + \
        logging --path /var/run

  (1) Borrow `--` which already means "stop parsing options here".  It 
makes sense if you think about sub-commands as existing on a stack and 
`--` meaning "pop the stack".  Possibly not actually feasible since I 
think `Options` already knows what `--` means (by virtue of actually 
*using* getopt()) and uses it to separate options from positional 
arguments (and therefore it's not an unambiguous separator - but I 
haven't double-checked this).

    $ twistd compose \
        web --port 80 -- \
        manhole --auth foo -- \
        logging --path /var/run

  (2) Put things into strings which already have well-defined escape 
syntax:

    $ twistd compose \
        'web --port 80' \
        'manhole --auth foo' \
        'logging --path /var/run'

  (3) Load things from a file (really just a variation on (2)):

    $ cat myapp.compose
    web --port 80
    manhole --auth foo
    logging --path /var/run
    $ twistd compose myapp.compose

Note these aren't really syntax ideas.  Apart from (1), they're ideas 
for not needing a new syntax.  As soon as you actually invent a new 
syntax you invite comments like "Well, maybe you should use `;` instead 
of `+` because `;` is already kind of ingrained as a separator and 
people are used to having to escape it" (which, see, I put in quotes, 
because I'm totally not saying that, even if it is totally true) to 
which you can only really reply that your gut agrees or your gut 
disagrees and it's always a bummer when the best support you have for 
some programming decision is some gut feeling you had.

I might actually be somewhat attracted to (3) because:

  * I don't really want to build up giant piles of configuration on my 
command line and then rely on my shell history for being able to find it 
again.  myapp.compose is something I could even put in my version 
control system.

  * Despite shell quoting and escaping rules being perfectly well 
defined, I'd really much rather not have to deal with an automatic extra 
layer of quotes.

And a last point to consider about new syntaxes - what are the security 
considerations of a command like:

    $ twistd compose \
        web --port ${WEB_PORT} +
        manhole --auth foo + \
        logging --path /var/run

I'll grant there's a bug there (the shell variable should be quoted - 
but I only know one person who consistently gets that right).

Regardless, I think any proposal would greatly benefit from a much 
greater consideration of use-cases and examples than I've yet seen 
discussed in this thread.

Jean-Paul


From zadka.moshe at gmail.com  Wed May 20 20:31:41 2015
From: zadka.moshe at gmail.com (Moshe Zadka)
Date: Thu, 21 May 2015 02:31:41 +0000
Subject: [Twisted-Python] Multiple plugins in "twistd"
In-Reply-To: <20150521001713.21155.270918325.divmod.xquotient.157@top>
References: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
 <20150519125921.21155.2042175335.divmod.xquotient.100@top>
 <1DBE6BD3-AA90-405E-8A67-E6DC0DA8D9D4@twistedmatrix.com>
 <87wq04mgcd.fsf@hermes.hocat.ca>
 <20150520111325.21155.473218630.divmod.xquotient.114@top>
 <D7346F9E-7BBE-4964-8C76-3F7AF48C047C@twistedmatrix.com>
 <20150521001713.21155.270918325.divmod.xquotient.157@top>
Message-ID: <CAOA_4jB+Z_Akc5OBjQ5z4viXpn6BtwyekKz5eBHvrtxASEkwLw@mail.gmail.com>

Hi glyph and exarkun,

[1] The compose syntax is the least interesting part for me here, and seems
to cause the most bike-shedding, so I think I will punt on that. Instead, I
will write a function called "compose()" which can be used from .tac files
or possibly other plug-ins, leaving the issue of the syntax for a different
day.
[2] It seems like the biggest inconsistency in the docstrings is that they
mention the parent without having an attribute for it. (E.g., the docstring
for setServiceParent *says* "parent attribute is set", but there's no
"parent attribute" in the interface. Glyph, if you want to open a ticket
with the issues you found, please assign it to me -- otherwise, more
specificity is useful!
[2a] Since the docstrings do refer to the parent attribute, and since I
would be surprised if services just implemented the interface without
inheriting from "Service", I wonder if people object *too* much if I "fix"
it by documenting the parent attribute as part of the interface?
[3] I think that with the compose() function available in .tac files, maybe
needing .tac *with* subcommands is not quite as important? Maybe I'll leave
that off of the initial sprint.

So bottom line, current plans:
[4] Implement compose() as a function that takes an iterable-of-iterables,
treats them as command-line arguments for services, and builds a
MultiService() with them all.
[5] Document the parent attribute in IService (and possibly other issues,
depending on Glyph opening a bug for [2]
[6] Implement provides() the way I wanted to (now that parent is documented)

Since it seems like compose-as-a-function is the least controversial bit
here, I'll start with that while the other issues settle down.

Moshe Z.


On Wed, May 20, 2015 at 5:18 PM <exarkun at twistedmatrix.com> wrote:

> On 07:29 pm, glyph at twistedmatrix.com wrote:
> >
> >>On May 20, 2015, at 04:13, exarkun at twistedmatrix.com wrote:
> >>
> >>On 19 May, 09:01 pm, tom.prince at ualberta.net wrote:
> >>>Glyph <glyph at twistedmatrix.com> writes:
> >>>>You could also find some other way to split the argument list but
> >>>>"+" doesn't seem particularly obscure in this context to me.  (If
> >>>>there's really a need to pass a literal "+" to a plugin we could add
> >>>>an escaping syntax as well.)
> >>>
> >>>I think if we are adding syntax, then we should also add escaping at
> >>>the
> >>>same time.
> >>>
> >>>On a related note, when designing this kind of syntax, I think it is
> >>>often valuable to explictly leave some of the space as an explict
> >>>error,
> >>>to leave freedom to extend the syntax in the future.
> >>
> >>I think this is 100% correct.  This is part of why I don't want the
> >>syntax added to `Options`.  If it's a feature of, say, a "compose"
> >>twistd plugin then you can always throw the whole "compose" twistd
> >>plugin in the trash and start again.  That gives you quite a lot of
> >>space for syntax changes. :)
> >>
> >>(And of course, not introducing a syntax at all leaves you even more
> >>room... but talking this crowd out of inventing weird syntaxes is
> >>probably an exercise in futility.)
> >
> >Much as I love weird syntaxes, using "+" as a separator for a 'compose'
> >plugin seems about as straightforward as I could imagine such a thing
> >working.  Do you have an alternate proposal that is less 'weird'?  I
> >wouldn't promise to accept it but I wouldn't want to go with something
> >unnecessarily weird just due to a failure of my imagination.
>
> It's possible this is a case of necessary weirdness - at least, if
> you're dead-set on some kind of option-based CLI interface to this
> functionality.
>
> Think about other CLI tools that try to offer this kind of composition.
> Only two really come to mind for me and one of those is not exactly well
> regarded for its novel syntax (hint - it rhymes with "schmestreamer).
>
> This is not to say that this kind of composition is a bad thing - or
> even that no other widely-used software supports the kind of invoke-
> several-things-of-stuff behavior that we're talking about providing
> access to here.
>
> However, I do think it is the case that most of the world tries to solve
> this problem without trying to force everything into a world-view framed
> by GNU getopt().
>
> With that in mind, here are some alternatives:
>
>   (0) The null proposal
>
>     $ twistd compose \
>         web --port 80 +
>         manhole --auth foo + \
>         logging --path /var/run
>
>   (1) Borrow `--` which already means "stop parsing options here".  It
> makes sense if you think about sub-commands as existing on a stack and
> `--` meaning "pop the stack".  Possibly not actually feasible since I
> think `Options` already knows what `--` means (by virtue of actually
> *using* getopt()) and uses it to separate options from positional
> arguments (and therefore it's not an unambiguous separator - but I
> haven't double-checked this).
>
>     $ twistd compose \
>         web --port 80 -- \
>         manhole --auth foo -- \
>         logging --path /var/run
>
>   (2) Put things into strings which already have well-defined escape
> syntax:
>
>     $ twistd compose \
>         'web --port 80' \
>         'manhole --auth foo' \
>         'logging --path /var/run'
>
>   (3) Load things from a file (really just a variation on (2)):
>
>     $ cat myapp.compose
>     web --port 80
>     manhole --auth foo
>     logging --path /var/run
>     $ twistd compose myapp.compose
>
> Note these aren't really syntax ideas.  Apart from (1), they're ideas
> for not needing a new syntax.  As soon as you actually invent a new
> syntax you invite comments like "Well, maybe you should use `;` instead
> of `+` because `;` is already kind of ingrained as a separator and
> people are used to having to escape it" (which, see, I put in quotes,
> because I'm totally not saying that, even if it is totally true) to
> which you can only really reply that your gut agrees or your gut
> disagrees and it's always a bummer when the best support you have for
> some programming decision is some gut feeling you had.
>
> I might actually be somewhat attracted to (3) because:
>
>   * I don't really want to build up giant piles of configuration on my
> command line and then rely on my shell history for being able to find it
> again.  myapp.compose is something I could even put in my version
> control system.
>
>   * Despite shell quoting and escaping rules being perfectly well
> defined, I'd really much rather not have to deal with an automatic extra
> layer of quotes.
>
> And a last point to consider about new syntaxes - what are the security
> considerations of a command like:
>
>     $ twistd compose \
>         web --port ${WEB_PORT} +
>         manhole --auth foo + \
>         logging --path /var/run
>
> I'll grant there's a bug there (the shell variable should be quoted -
> but I only know one person who consistently gets that right).
>
> Regardless, I think any proposal would greatly benefit from a much
> greater consideration of use-cases and examples than I've yet seen
> discussed in this thread.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150521/cc7436b3/attachment-0001.html>

From zadka.moshe at gmail.com  Wed May 20 20:40:10 2015
From: zadka.moshe at gmail.com (Moshe Zadka)
Date: Thu, 21 May 2015 02:40:10 +0000
Subject: [Twisted-Python] Multiple plugins in "twistd"
In-Reply-To: <CAOA_4jB+Z_Akc5OBjQ5z4viXpn6BtwyekKz5eBHvrtxASEkwLw@mail.gmail.com>
References: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
 <20150519125921.21155.2042175335.divmod.xquotient.100@top>
 <1DBE6BD3-AA90-405E-8A67-E6DC0DA8D9D4@twistedmatrix.com>
 <87wq04mgcd.fsf@hermes.hocat.ca>
 <20150520111325.21155.473218630.divmod.xquotient.114@top>
 <D7346F9E-7BBE-4964-8C76-3F7AF48C047C@twistedmatrix.com>
 <20150521001713.21155.270918325.divmod.xquotient.157@top>
 <CAOA_4jB+Z_Akc5OBjQ5z4viXpn6BtwyekKz5eBHvrtxASEkwLw@mail.gmail.com>
Message-ID: <CAOA_4jDaJg50+5wfqy+ymRxqbovqjmYf142z5N2Z9Vq=NmHB+Q@mail.gmail.com>

FYI, https://twistedmatrix.com/trac/ticket/7907#ticket created.

On Wed, May 20, 2015 at 7:31 PM Moshe Zadka <zadka.moshe at gmail.com> wrote:

> Hi glyph and exarkun,
>
> [1] The compose syntax is the least interesting part for me here, and
> seems to cause the most bike-shedding, so I think I will punt on that.
> Instead, I will write a function called "compose()" which can be used from
> .tac files or possibly other plug-ins, leaving the issue of the syntax for
> a different day.
> [2] It seems like the biggest inconsistency in the docstrings is that they
> mention the parent without having an attribute for it. (E.g., the docstring
> for setServiceParent *says* "parent attribute is set", but there's no
> "parent attribute" in the interface. Glyph, if you want to open a ticket
> with the issues you found, please assign it to me -- otherwise, more
> specificity is useful!
> [2a] Since the docstrings do refer to the parent attribute, and since I
> would be surprised if services just implemented the interface without
> inheriting from "Service", I wonder if people object *too* much if I "fix"
> it by documenting the parent attribute as part of the interface?
> [3] I think that with the compose() function available in .tac files,
> maybe needing .tac *with* subcommands is not quite as important? Maybe I'll
> leave that off of the initial sprint.
>
> So bottom line, current plans:
> [4] Implement compose() as a function that takes an iterable-of-iterables,
> treats them as command-line arguments for services, and builds a
> MultiService() with them all.
> [5] Document the parent attribute in IService (and possibly other issues,
> depending on Glyph opening a bug for [2]
> [6] Implement provides() the way I wanted to (now that parent is
> documented)
>
> Since it seems like compose-as-a-function is the least controversial bit
> here, I'll start with that while the other issues settle down.
>
> Moshe Z.
>
>
> On Wed, May 20, 2015 at 5:18 PM <exarkun at twistedmatrix.com> wrote:
>
>> On 07:29 pm, glyph at twistedmatrix.com wrote:
>> >
>> >>On May 20, 2015, at 04:13, exarkun at twistedmatrix.com wrote:
>> >>
>> >>On 19 May, 09:01 pm, tom.prince at ualberta.net wrote:
>> >>>Glyph <glyph at twistedmatrix.com> writes:
>> >>>>You could also find some other way to split the argument list but
>> >>>>"+" doesn't seem particularly obscure in this context to me.  (If
>> >>>>there's really a need to pass a literal "+" to a plugin we could add
>> >>>>an escaping syntax as well.)
>> >>>
>> >>>I think if we are adding syntax, then we should also add escaping at
>> >>>the
>> >>>same time.
>> >>>
>> >>>On a related note, when designing this kind of syntax, I think it is
>> >>>often valuable to explictly leave some of the space as an explict
>> >>>error,
>> >>>to leave freedom to extend the syntax in the future.
>> >>
>> >>I think this is 100% correct.  This is part of why I don't want the
>> >>syntax added to `Options`.  If it's a feature of, say, a "compose"
>> >>twistd plugin then you can always throw the whole "compose" twistd
>> >>plugin in the trash and start again.  That gives you quite a lot of
>> >>space for syntax changes. :)
>> >>
>> >>(And of course, not introducing a syntax at all leaves you even more
>> >>room... but talking this crowd out of inventing weird syntaxes is
>> >>probably an exercise in futility.)
>> >
>> >Much as I love weird syntaxes, using "+" as a separator for a 'compose'
>> >plugin seems about as straightforward as I could imagine such a thing
>> >working.  Do you have an alternate proposal that is less 'weird'?  I
>> >wouldn't promise to accept it but I wouldn't want to go with something
>> >unnecessarily weird just due to a failure of my imagination.
>>
>> It's possible this is a case of necessary weirdness - at least, if
>> you're dead-set on some kind of option-based CLI interface to this
>> functionality.
>>
>> Think about other CLI tools that try to offer this kind of composition.
>> Only two really come to mind for me and one of those is not exactly well
>> regarded for its novel syntax (hint - it rhymes with "schmestreamer).
>>
>> This is not to say that this kind of composition is a bad thing - or
>> even that no other widely-used software supports the kind of invoke-
>> several-things-of-stuff behavior that we're talking about providing
>> access to here.
>>
>> However, I do think it is the case that most of the world tries to solve
>> this problem without trying to force everything into a world-view framed
>> by GNU getopt().
>>
>> With that in mind, here are some alternatives:
>>
>>   (0) The null proposal
>>
>>     $ twistd compose \
>>         web --port 80 +
>>         manhole --auth foo + \
>>         logging --path /var/run
>>
>>   (1) Borrow `--` which already means "stop parsing options here".  It
>> makes sense if you think about sub-commands as existing on a stack and
>> `--` meaning "pop the stack".  Possibly not actually feasible since I
>> think `Options` already knows what `--` means (by virtue of actually
>> *using* getopt()) and uses it to separate options from positional
>> arguments (and therefore it's not an unambiguous separator - but I
>> haven't double-checked this).
>>
>>     $ twistd compose \
>>         web --port 80 -- \
>>         manhole --auth foo -- \
>>         logging --path /var/run
>>
>>   (2) Put things into strings which already have well-defined escape
>> syntax:
>>
>>     $ twistd compose \
>>         'web --port 80' \
>>         'manhole --auth foo' \
>>         'logging --path /var/run'
>>
>>   (3) Load things from a file (really just a variation on (2)):
>>
>>     $ cat myapp.compose
>>     web --port 80
>>     manhole --auth foo
>>     logging --path /var/run
>>     $ twistd compose myapp.compose
>>
>> Note these aren't really syntax ideas.  Apart from (1), they're ideas
>> for not needing a new syntax.  As soon as you actually invent a new
>> syntax you invite comments like "Well, maybe you should use `;` instead
>> of `+` because `;` is already kind of ingrained as a separator and
>> people are used to having to escape it" (which, see, I put in quotes,
>> because I'm totally not saying that, even if it is totally true) to
>> which you can only really reply that your gut agrees or your gut
>> disagrees and it's always a bummer when the best support you have for
>> some programming decision is some gut feeling you had.
>>
>> I might actually be somewhat attracted to (3) because:
>>
>>   * I don't really want to build up giant piles of configuration on my
>> command line and then rely on my shell history for being able to find it
>> again.  myapp.compose is something I could even put in my version
>> control system.
>>
>>   * Despite shell quoting and escaping rules being perfectly well
>> defined, I'd really much rather not have to deal with an automatic extra
>> layer of quotes.
>>
>> And a last point to consider about new syntaxes - what are the security
>> considerations of a command like:
>>
>>     $ twistd compose \
>>         web --port ${WEB_PORT} +
>>         manhole --auth foo + \
>>         logging --path /var/run
>>
>> I'll grant there's a bug there (the shell variable should be quoted -
>> but I only know one person who consistently gets that right).
>>
>> Regardless, I think any proposal would greatly benefit from a much
>> greater consideration of use-cases and examples than I've yet seen
>> discussed in this thread.
>>
>> Jean-Paul
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150521/1828ba01/attachment.html>

From zadka.moshe at gmail.com  Wed May 20 21:39:51 2015
From: zadka.moshe at gmail.com (Moshe Zadka)
Date: Thu, 21 May 2015 03:39:51 +0000
Subject: [Twisted-Python] Multiple plugins in "twistd"
In-Reply-To: <CAOA_4jDaJg50+5wfqy+ymRxqbovqjmYf142z5N2Z9Vq=NmHB+Q@mail.gmail.com>
References: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
 <20150519125921.21155.2042175335.divmod.xquotient.100@top>
 <1DBE6BD3-AA90-405E-8A67-E6DC0DA8D9D4@twistedmatrix.com>
 <87wq04mgcd.fsf@hermes.hocat.ca>
 <20150520111325.21155.473218630.divmod.xquotient.114@top>
 <D7346F9E-7BBE-4964-8C76-3F7AF48C047C@twistedmatrix.com>
 <20150521001713.21155.270918325.divmod.xquotient.157@top>
 <CAOA_4jB+Z_Akc5OBjQ5z4viXpn6BtwyekKz5eBHvrtxASEkwLw@mail.gmail.com>
 <CAOA_4jDaJg50+5wfqy+ymRxqbovqjmYf142z5N2Z9Vq=NmHB+Q@mail.gmail.com>
Message-ID: <CAOA_4jC7XSKaJ_Zwv41tGMzoJKOjMPzUhJLTS2B6po47tt1CvA@mail.gmail.com>

FYIFYI --  Patch attached. Docs are missing, but I'm sure JP/Glyph will be
happy to tell me what I've done wrong otherwise :-P

On Wed, May 20, 2015 at 7:40 PM Moshe Zadka <zadka.moshe at gmail.com> wrote:

> FYI, https://twistedmatrix.com/trac/ticket/7907#ticket created.
>
> On Wed, May 20, 2015 at 7:31 PM Moshe Zadka <zadka.moshe at gmail.com> wrote:
>
>> Hi glyph and exarkun,
>>
>> [1] The compose syntax is the least interesting part for me here, and
>> seems to cause the most bike-shedding, so I think I will punt on that.
>> Instead, I will write a function called "compose()" which can be used from
>> .tac files or possibly other plug-ins, leaving the issue of the syntax for
>> a different day.
>> [2] It seems like the biggest inconsistency in the docstrings is that
>> they mention the parent without having an attribute for it. (E.g., the
>> docstring for setServiceParent *says* "parent attribute is set", but
>> there's no "parent attribute" in the interface. Glyph, if you want to open
>> a ticket with the issues you found, please assign it to me -- otherwise,
>> more specificity is useful!
>> [2a] Since the docstrings do refer to the parent attribute, and since I
>> would be surprised if services just implemented the interface without
>> inheriting from "Service", I wonder if people object *too* much if I "fix"
>> it by documenting the parent attribute as part of the interface?
>> [3] I think that with the compose() function available in .tac files,
>> maybe needing .tac *with* subcommands is not quite as important? Maybe I'll
>> leave that off of the initial sprint.
>>
>> So bottom line, current plans:
>> [4] Implement compose() as a function that takes an
>> iterable-of-iterables, treats them as command-line arguments for services,
>> and builds a MultiService() with them all.
>> [5] Document the parent attribute in IService (and possibly other issues,
>> depending on Glyph opening a bug for [2]
>> [6] Implement provides() the way I wanted to (now that parent is
>> documented)
>>
>> Since it seems like compose-as-a-function is the least controversial bit
>> here, I'll start with that while the other issues settle down.
>>
>> Moshe Z.
>>
>>
>> On Wed, May 20, 2015 at 5:18 PM <exarkun at twistedmatrix.com> wrote:
>>
>>> On 07:29 pm, glyph at twistedmatrix.com wrote:
>>> >
>>> >>On May 20, 2015, at 04:13, exarkun at twistedmatrix.com wrote:
>>> >>
>>> >>On 19 May, 09:01 pm, tom.prince at ualberta.net wrote:
>>> >>>Glyph <glyph at twistedmatrix.com> writes:
>>> >>>>You could also find some other way to split the argument list but
>>> >>>>"+" doesn't seem particularly obscure in this context to me.  (If
>>> >>>>there's really a need to pass a literal "+" to a plugin we could add
>>> >>>>an escaping syntax as well.)
>>> >>>
>>> >>>I think if we are adding syntax, then we should also add escaping at
>>> >>>the
>>> >>>same time.
>>> >>>
>>> >>>On a related note, when designing this kind of syntax, I think it is
>>> >>>often valuable to explictly leave some of the space as an explict
>>> >>>error,
>>> >>>to leave freedom to extend the syntax in the future.
>>> >>
>>> >>I think this is 100% correct.  This is part of why I don't want the
>>> >>syntax added to `Options`.  If it's a feature of, say, a "compose"
>>> >>twistd plugin then you can always throw the whole "compose" twistd
>>> >>plugin in the trash and start again.  That gives you quite a lot of
>>> >>space for syntax changes. :)
>>> >>
>>> >>(And of course, not introducing a syntax at all leaves you even more
>>> >>room... but talking this crowd out of inventing weird syntaxes is
>>> >>probably an exercise in futility.)
>>> >
>>> >Much as I love weird syntaxes, using "+" as a separator for a 'compose'
>>> >plugin seems about as straightforward as I could imagine such a thing
>>> >working.  Do you have an alternate proposal that is less 'weird'?  I
>>> >wouldn't promise to accept it but I wouldn't want to go with something
>>> >unnecessarily weird just due to a failure of my imagination.
>>>
>>> It's possible this is a case of necessary weirdness - at least, if
>>> you're dead-set on some kind of option-based CLI interface to this
>>> functionality.
>>>
>>> Think about other CLI tools that try to offer this kind of composition.
>>> Only two really come to mind for me and one of those is not exactly well
>>> regarded for its novel syntax (hint - it rhymes with "schmestreamer).
>>>
>>> This is not to say that this kind of composition is a bad thing - or
>>> even that no other widely-used software supports the kind of invoke-
>>> several-things-of-stuff behavior that we're talking about providing
>>> access to here.
>>>
>>> However, I do think it is the case that most of the world tries to solve
>>> this problem without trying to force everything into a world-view framed
>>> by GNU getopt().
>>>
>>> With that in mind, here are some alternatives:
>>>
>>>   (0) The null proposal
>>>
>>>     $ twistd compose \
>>>         web --port 80 +
>>>         manhole --auth foo + \
>>>         logging --path /var/run
>>>
>>>   (1) Borrow `--` which already means "stop parsing options here".  It
>>> makes sense if you think about sub-commands as existing on a stack and
>>> `--` meaning "pop the stack".  Possibly not actually feasible since I
>>> think `Options` already knows what `--` means (by virtue of actually
>>> *using* getopt()) and uses it to separate options from positional
>>> arguments (and therefore it's not an unambiguous separator - but I
>>> haven't double-checked this).
>>>
>>>     $ twistd compose \
>>>         web --port 80 -- \
>>>         manhole --auth foo -- \
>>>         logging --path /var/run
>>>
>>>   (2) Put things into strings which already have well-defined escape
>>> syntax:
>>>
>>>     $ twistd compose \
>>>         'web --port 80' \
>>>         'manhole --auth foo' \
>>>         'logging --path /var/run'
>>>
>>>   (3) Load things from a file (really just a variation on (2)):
>>>
>>>     $ cat myapp.compose
>>>     web --port 80
>>>     manhole --auth foo
>>>     logging --path /var/run
>>>     $ twistd compose myapp.compose
>>>
>>> Note these aren't really syntax ideas.  Apart from (1), they're ideas
>>> for not needing a new syntax.  As soon as you actually invent a new
>>> syntax you invite comments like "Well, maybe you should use `;` instead
>>> of `+` because `;` is already kind of ingrained as a separator and
>>> people are used to having to escape it" (which, see, I put in quotes,
>>> because I'm totally not saying that, even if it is totally true) to
>>> which you can only really reply that your gut agrees or your gut
>>> disagrees and it's always a bummer when the best support you have for
>>> some programming decision is some gut feeling you had.
>>>
>>> I might actually be somewhat attracted to (3) because:
>>>
>>>   * I don't really want to build up giant piles of configuration on my
>>> command line and then rely on my shell history for being able to find it
>>> again.  myapp.compose is something I could even put in my version
>>> control system.
>>>
>>>   * Despite shell quoting and escaping rules being perfectly well
>>> defined, I'd really much rather not have to deal with an automatic extra
>>> layer of quotes.
>>>
>>> And a last point to consider about new syntaxes - what are the security
>>> considerations of a command like:
>>>
>>>     $ twistd compose \
>>>         web --port ${WEB_PORT} +
>>>         manhole --auth foo + \
>>>         logging --path /var/run
>>>
>>> I'll grant there's a bug there (the shell variable should be quoted -
>>> but I only know one person who consistently gets that right).
>>>
>>> Regardless, I think any proposal would greatly benefit from a much
>>> greater consideration of use-cases and examples than I've yet seen
>>> discussed in this thread.
>>>
>>> Jean-Paul
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150521/b54f8dd5/attachment-0001.html>

From mithrandi at mithrandi.net  Thu May 21 06:20:52 2015
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Thu, 21 May 2015 14:20:52 +0200
Subject: [Twisted-Python] Multiple plugins in "twistd"
In-Reply-To: <CAOA_4jB+Z_Akc5OBjQ5z4viXpn6BtwyekKz5eBHvrtxASEkwLw@mail.gmail.com>
References: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
 <20150519125921.21155.2042175335.divmod.xquotient.100@top>
 <1DBE6BD3-AA90-405E-8A67-E6DC0DA8D9D4@twistedmatrix.com>
 <87wq04mgcd.fsf@hermes.hocat.ca>
 <20150520111325.21155.473218630.divmod.xquotient.114@top>
 <D7346F9E-7BBE-4964-8C76-3F7AF48C047C@twistedmatrix.com>
 <20150521001713.21155.270918325.divmod.xquotient.157@top>
 <CAOA_4jB+Z_Akc5OBjQ5z4viXpn6BtwyekKz5eBHvrtxASEkwLw@mail.gmail.com>
Message-ID: <CAMcKhMRojzAAa7vkZC1J+ZEH7mx1iOHYenAZ3RP-1-B1fCFy9Q@mail.gmail.com>

On 21 May 2015 at 04:31, Moshe Zadka <zadka.moshe at gmail.com> wrote:
> [2a] Since the docstrings do refer to the parent attribute, and since I
> would be surprised if services just implemented the interface without
> inheriting from "Service", I wonder if people object *too* much if I "fix"
> it by documenting the parent attribute as part of the interface?

For what it's worth (not sure if a single anecdote is helpful), almost
none of my IService implementations inherit from Service (mainly
because multiple inheritance is awkward, and they already want to
inherit from axiom.item.Item). However, I'm pretty sure they all have
the "parent" attribute.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From adi at roiban.ro  Fri May 22 01:40:45 2015
From: adi at roiban.ro (Adi Roiban)
Date: Fri, 22 May 2015 08:40:45 +0100
Subject: [Twisted-Python] Need advice on how to move further with ticket
	7897
In-Reply-To: <20150520111044.21155.1787997368.divmod.xquotient.109@top>
References: <CA+2gYioDgfddT-NTrvk_yw4Z4V37mSPTpY0ck1vNwEAV+OhnjQ@mail.gmail.com>
 <20150520111044.21155.1787997368.divmod.xquotient.109@top>
Message-ID: <CAFycZ9d+13=9vDzZqJ5AOvJ9JJTsuW2D+Mxpa5YsR3YRr9dYjA@mail.gmail.com>

On 20 May 2015 at 12:10,  <exarkun at twistedmatrix.com> wrote:
> On 19 May, 04:38 pm, jerryguitarist at gmail.com wrote:
>>
>> Hi!
>>
>> I filed a ticket (Log the log events in twisted.internet.protocol.Factory
>> using the new logging system <https://twistedmatrix.com/trac/ticket/7897>)
>> and I have also submitted a patch for it. However, while working on the
>> patch, I had some concerns that I have already summarized in a ticket
>> comment. I would really appreciate it if someone could please take a look
>> and give me some advice as to how to move further with this ticket so that
>> I can start working on other patches for porting to twisted.logger. :-)
>
>
> I think this question may indicate a certain section of documentation that
> is missing for twisted.logger.
>
> Perhaps some folks who have ideas about how this new logging library should
> be used could look at that ticket and then clarify some existing
> twisted.logger docs or add something to them.
>
+1

I think that the trouble with twisted.logger documentation is that it
looks like an independent project and is documented as such.

It has no info/policy about how the logger and observers should be
used in Twisted core code.

To move things forward I suggest using a `_log` instance attribute to
emit log events.

It can be defined as the generic _log = Logger() class attribute
similar to the current patch

---------

http  and socks factory already define their own log() method with
different signatures.

Those method are more like observers as they write the events in a
file... outside of the old (or new) logging system.

Maybe we can refactor the http and socks code to emit all event using
_log() and use a dedicated log observer to persist the events in a
file.

---------

Having 'log' or '_log' in low level classes like Factory and Protocol
might conflict with existing code written by Twisted users... but this
might happen with any new method (public or private) added to the new
Twisted versions

With the new API docs formatting which hides private methods by
default, we might want to have the log method public so that users
will have a greater change to observer the method and prevent them
from overwriting the method.

Cheers

-- 
Adi Roiban


From mashiat.sarker at gmail.com  Fri May 22 08:56:01 2015
From: mashiat.sarker at gmail.com (Mashiat Sarker Shakkhar)
Date: Fri, 22 May 2015 10:56:01 -0400
Subject: [Twisted-Python] Trapping exceptions in Deferred
In-Reply-To: <72142586-56A5-4FE1-BD26-696437AE58D4@twistedmatrix.com>
References: <CAOfeCWWJqV02iGwWTbg17iE6XR4+KL2hTtu5kqgbtH8MOX5_ww@mail.gmail.com>
 <672BD626-F6F9-4E5C-800D-80F168E3407D@me.com>
 <CAOfeCWUwwkWzRLi7v3S0DS1ybptN71uUxfpkqzMAXQ-Cg5L-Fw@mail.gmail.com>
 <FD55BD40-CDBA-41F8-90A4-AFBDCCF36EFC@me.com>
 <CAOfeCWUmH3_fGhVLhVODuDJs9LENXtLNpABG+m3Xq14pJAkZGA@mail.gmail.com>
 <72142586-56A5-4FE1-BD26-696437AE58D4@twistedmatrix.com>
Message-ID: <CAOfeCWUr3DeW6a5S7zULcOyPe+eEmp9VxG8_y0dCnKQ+3j8Hiw@mail.gmail.com>

On Tue, May 12, 2015 at 3:31 PM, Christopher Armstrong <
radix at twistedmatrix.com> wrote:

> [...]
> Your code example is printing the error message and traceback _before_ you
> trap the failure. Are those print statements going to your logs? Could that
> be causing confusion?
>

To sum up the discussion on this matter - that is actually what was
happening. The exception was being printed as "Unhandled error" which
confused me. Thanks Christopher and Louis for your help.

Regards
Shakkhar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150522/7250ebc3/attachment.html>

From johnaherne at rocs.co.uk  Sat May 23 07:53:02 2015
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sat, 23 May 2015 14:53:02 +0100
Subject: [Twisted-Python] TLS windows wincertstore
Message-ID: <CAKmUHjaczEX4XRccVumOcBXXfM2YdYweroH9nHykcfAxLf8NjA@mail.gmail.com>

I see that aranbierbaum has done the work on implementing wincertstore
ticket 6371.

For which I am very grateful. Thank you aron

However, it seems to be waiting some final touches before it can land.

I assume that aron is using it for his own purposes so I was wondering
whether to take a copy of the patch and check it out. And if it works carry
on.

It would be nice to wait for a final say so on the patch but I assume aron
has plenty to do at the moment.

Maybe someone else has already checked it out and can give some assurance
that it works.

Thanks for any info.



-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150523/2c7f988b/attachment.html>

From commercials24 at yahoo.de  Sat May 23 15:27:06 2015
From: commercials24 at yahoo.de (peter)
Date: Sat, 23 May 2015 23:27:06 +0200
Subject: [Twisted-Python] irc DCC file receive, error: invalid argument
Message-ID: <5560F0AA.2040803@yahoo.de>

hi,


found this code online:
http://paste.pound-python.org/show/zeavfM7XjrXL2psPWxlv/

added some print statements and changed the logging to private/channel.


if i send the xdccbot a file from a second irc connection (x-chat) i get 
this error:
2015-05-23 22:30:01,384 : Bot connection made
2015-05-23 22:30:02,448 : Bot has signed on
2015-05-23 22:30:08,760 : Bot has joined channel #lala
2015-05-23 22:30:17,750 : connection failed during DCC download. reason: 
[Failure instance: Traceback (failure with no frames): <class 
'twisted.internet.error.ConnectError'>: An error occurred while 
connecting: 22: Invalid argument.

any ideas?




bot connect command:
python xdccbot.py irc.freenode.net lala lalala 123 90


the bot was designed to automatically message another irc user to send 
some file.
thats why the extra arguments.


From glyph at twistedmatrix.com  Sat May 23 19:16:49 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 23 May 2015 18:16:49 -0700
Subject: [Twisted-Python] TLS windows wincertstore
In-Reply-To: <CAKmUHjaczEX4XRccVumOcBXXfM2YdYweroH9nHykcfAxLf8NjA@mail.gmail.com>
References: <CAKmUHjaczEX4XRccVumOcBXXfM2YdYweroH9nHykcfAxLf8NjA@mail.gmail.com>
Message-ID: <7CC71CFC-3667-415F-B27C-FE3A6E8917C4@twistedmatrix.com>

On May 23, 2015, at 06:53, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> I see that aranbierbaum has done the work on implementing wincertstore ticket 6371.
> 
> For which I am very grateful. Thank you aron
> 
> However, it seems to be waiting some final touches before it can land.
> 
> I assume that aron is using it for his own purposes so I was wondering whether to take a copy of the patch and check it out. And if it works carry on.
> 
> It would be nice to wait for a final say so on the patch but I assume aron has plenty to do at the moment.
> 
> Maybe someone else has already checked it out and can give some assurance that it works.
> 
> Thanks for any info.

The correct next step here would be for you to take Aron's patch and address the review feedback mentioned on 6371.  It sounds like you want to wait around for the patch to be completed by someone else - if everyone does that, then no patches ever get finished :).

You may be concerned that it's somehow rude to pick up someone else's work and complete it.  It isn't - quite the opposite.  If a patch has gone more than a week without being acted upon, it is almost certainly not going to get any attention unless someone else picks it up.

If you are looking for assurance that it "works" - no, it doesn't.  If it were of sufficient quality to be included within Twisted and be said to "work" to that standard, it would already have been included.

Thanks for your interest, and I hope you'll step up to complete this work!

-glyph



From trac at twistedmatrix.com  Sun May 24 00:05:20 2015
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 24 May 2015 06:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1432447520.76.3552777303504222634@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150524/b42494c2/attachment.html>

From johnaherne at rocs.co.uk  Sun May 24 03:24:20 2015
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sun, 24 May 2015 10:24:20 +0100
Subject: [Twisted-Python] TLS windows wincertstore
Message-ID: <CAKmUHjYsHwcMSGKx=E-3OtJF_44VksdjLKC7Jz7iDS2p_FxuBw@mail.gmail.com>

Well, you are right I did not want to tread on his toes. And if he was just
about to make the changes it would have been offputting to find someone
else making slightly different changes.

Of course I am not in the same league as others making changes to twisted.
But what I will do is take the patch and try it out to see where I get to.

Once I see it working then I can see what to do next.

I'll also try to see if Aron is looking to finish it off or is too busy.

Thanks

-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150524/06569cc0/attachment.html>

From hawkowl at atleastfornow.net  Sun May 24 06:20:36 2015
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Sun, 24 May 2015 20:20:36 +0800
Subject: [Twisted-Python] Twisted 15.2.1 Release Announcement
Message-ID: <EDCB82A4-650B-45DC-AC58-7C13F872126B@atleastfornow.net>

On behalf of Twisted Matrix Laboratories, I am honoured to announce the release of Twisted 15.2.1.

This is a bugfix release for the 15.2 series that fixes a regression in the new logging framework.

You can find the downloads at <https://pypi.python.org/pypi/Twisted> (or alternatively <http://twistedmatrix.com/trac/wiki/Downloads>) .

Many thanks to everyone who had a part in this release - the supporters of the Twisted Software Foundation, the developers who contributed code as well as documentation, and all the people building great things with Twisted!

Twisted Regards,
HawkOwl
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150524/53324052/attachment-0001.pgp>

From malhar.vora at clogeny.com  Tue May 26 00:30:56 2015
From: malhar.vora at clogeny.com (Malhar Vora)
Date: Tue, 26 May 2015 12:00:56 +0530
Subject: [Twisted-Python] Filed to receive directory listing after
	successful login in FTPFactory
Message-ID: <CACpNGHDm=x8WuS4EtpvWW2ZiLGh4AQvtwCAuSwKh7g8zRfUjbg@mail.gmail.com>

Hi Guys,

I have following code.

-------------------------------------------------------------


from twisted.protocols.ftp import FTPFactory, FTPRealm, FTPShell
from twisted.cred.portal import Portal
from twisted.cred.checkers import AllowAnonymousAccess, FilePasswordDB
from twisted.internet import reactor
from twisted.cred.checkers import
InMemoryUsernamePasswordDatabaseDontUse as InMemoryDB
from twisted.python import log
from twisted.cred.credentials import UsernamePassword


import sys

users = {
    "user": "password"
}

im_memory_db_checker = InMemoryDB(**users)

p = Portal(FTPRealm('./'),
           (
               AllowAnonymousAccess(),
               im_memory_db_checker,
            )
          )

f = FTPFactory(p)

log.startLogging(sys.stdout)
reactor.listenTCP(21, f)
reactor.run()

-------------------------------------------------------------

While running above code, when I enter wrong credentials in my
FileZilla, it returns directory listing successfully but when I login
successfully it says :

*Failed to Response: 550 []: No such file or directory.
Error:	Failed to retrieve directory listing*

I have got this script from examples given on twisted site.

What am I missing ?, Please guide me.


Thank you,


-- 

*Regards,*
Malhar Vora
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150526/c1404d58/attachment.html>

From johnaherne at rocs.co.uk  Tue May 26 06:13:07 2015
From: johnaherne at rocs.co.uk (John Aherne)
Date: Tue, 26 May 2015 13:13:07 +0100
Subject: [Twisted-Python] TLS windows wincertstore
Message-ID: <CAKmUHjbr_vYJgEwpkwvdCax7xRghKo1YJxE4LOC4zA3pK3jaPg@mail.gmail.com>

I set up a development environment for 32 and 64bit windows.

But just running 32 bit python.

Ran the complete test suite successfully on installation.

Then looked at just running the tests for ssl

Eventually, on 32 bit all tests passed

On 64 bit I have one failure on test_inspectCertificate which cannot
produce an exact match on the hash.

There is a note against this that says it is liable to fail at some point.
But I don't know if that is the case here. I am mentioning it to hopefully
get some pointers.

The last review mentioned some tests failing. I am only testing on windows
and for 32 bit the ssl tests all succeed.

Were there any other tests that failed that I am not seeing.

Thanks


-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150526/618b5c02/attachment.html>

From chriswwolfe at gmail.com  Tue May 26 11:00:50 2015
From: chriswwolfe at gmail.com (Chris Wolfe)
Date: Tue, 26 May 2015 12:00:50 -0500
Subject: [Twisted-Python] revisiting onboarding
In-Reply-To: <64374D0B-3396-4B61-8DEC-82C9EDFB3EA3@twistedmatrix.com>
References: <00A8D2CB-A1A3-496F-8670-E9888990F3E6@twistedmatrix.com>
 <8761bcxxak.fsf@hermes.hocat.ca>
 <CAEKSqkuP5xjOy5Vdo4Giuj1HG5Xo6hvEAvBE88ZFCzniXvp1Uw@mail.gmail.com>
 <9DC27720-4877-466C-8148-2D5E5E1EA532@twistedmatrix.com>
 <CAEKSqksRBDowvEjUYZ6C7Y4QZsrzs_AsAT7+DvKieYyQ5b3vaw@mail.gmail.com>
 <64374D0B-3396-4B61-8DEC-82C9EDFB3EA3@twistedmatrix.com>
Message-ID: <CAEKSqkuBomAwHxKBZV9NH__tjnVP5fGssuUyovkq5gE5okMJBw@mail.gmail.com>

On Tue, Apr 28, 2015 at 5:08 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

> Can you send me an iCalendar invite of some kind to give you all the
> relevant permissions?  I would definitely like to volunteer to do it, but
> if we don't have a specific time, I will 100% guarantee you that I will
> forget :).
>
> -glyph
>
> P.S.: I've been setting a bad example, but we should generally be
> bottom-posting on this list, it makes the conversation easier to follow :).
>
> On Apr 28, 2015, at 2:54 PM, Chris Wolfe <chriswwolfe at gmail.com> wrote:
>
> Sure! I can only think of three things that need to be done:
>
> 1. Add a wiki page detailing the process you proposed. It may be helpful
> to display an example email showing what should be included in a new
> contributor request. The following pages should have links to the new
> policy:
>   - https://twistedmatrix.com/trac/wiki/TwistedDevelopment#Policies
>   - https://twistedmatrix.com/trac/wiki/ContributingToTwistedLabs
>
> I can create the wiki page and the example email. To do so, I'll need to
> get wiki permissions added to my trac account.
>
> 2. Activate the email address commit at twistedmatrix.com and compile a list
> of people to whom new commit requests should be sent for review. I can't do
> this.
>
> 3. Send an email to the general mailing list once the new pages are up to
> announce the new advancement path. I can do this.
>
> Is there anything I'm missing?
>
> - Chris // herrwolfe
>
> On Tue, Apr 28, 2015 at 3:25 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
> wrote:
>
>> I think we can consider it tacitly accepted by the community (nobody
>> seemed to object) but we still don't have anyone to implement it. Do you
>> want to step up to do that? :)
>>
>> -g
>>
>> On Apr 27, 2015, at 6:04 PM, Chris Wolfe <chriswwolfe at gmail.com> wrote:
>>
>> Hi,
>>
>> Has this proposal been accepted? Is there anything I can do to help
>> implement it?
>>
>> -Chris
>>
>> On Sun, Feb 8, 2015 at 9:01 AM, Tom Prince <tom.prince at ualberta.net>
>> wrote:
>>
>>> Glyph Lefkowitz <glyph at twistedmatrix.com> writes:
>>>
>>> > So I have a proposal for a scaled back process that nevertheless would
>>> give us something official-ish:
>>> > <..details...>
>>>
>>> I support this proposal.
>>>
>>>   Tom
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>
>>
>>
>> --
>> Chris Wolfe
>> chriswwolfe at gmail.com
>>
>>
>>
>
>
> --
> Chris Wolfe
> chriswwolfe at gmail.com
>
>
>
Hi,

I've added a draft wiki page detailing the contributor advancement path.
The page is located at
https://twistedmatrix.com/trac/wiki/Drafts/ContributorAdvancementPath.

If anyone has any feedback on the document, please feel free to either edit
the wiki or send me an email through the mailing list. If there aren't any
objections to what I've written by June 5, I will move it out of the drafts
section and link it up to the other documentation.

Thanks!
Chris

-- 
Chris Wolfe
chriswwolfe at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150526/3fb2b6e0/attachment.html>

From glyph at twistedmatrix.com  Tue May 26 16:40:00 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 26 May 2015 15:40:00 -0700
Subject: [Twisted-Python] revisiting onboarding
In-Reply-To: <CAEKSqkuBomAwHxKBZV9NH__tjnVP5fGssuUyovkq5gE5okMJBw@mail.gmail.com>
References: <00A8D2CB-A1A3-496F-8670-E9888990F3E6@twistedmatrix.com>
 <8761bcxxak.fsf@hermes.hocat.ca>
 <CAEKSqkuP5xjOy5Vdo4Giuj1HG5Xo6hvEAvBE88ZFCzniXvp1Uw@mail.gmail.com>
 <9DC27720-4877-466C-8148-2D5E5E1EA532@twistedmatrix.com>
 <CAEKSqksRBDowvEjUYZ6C7Y4QZsrzs_AsAT7+DvKieYyQ5b3vaw@mail.gmail.com>
 <64374D0B-3396-4B61-8DEC-82C9EDFB3EA3@twistedmatrix.com>
 <CAEKSqkuBomAwHxKBZV9NH__tjnVP5fGssuUyovkq5gE5okMJBw@mail.gmail.com>
Message-ID: <D37E57F4-B14F-4E15-8B24-0B53CA4EF716@twistedmatrix.com>


> On May 26, 2015, at 10:00 AM, Chris Wolfe <chriswwolfe at gmail.com> wrote:
> 
> I've added a draft wiki page detailing the contributor advancement path. The page is located at https://twistedmatrix.com/trac/wiki/Drafts/ContributorAdvancementPath <https://twistedmatrix.com/trac/wiki/Drafts/ContributorAdvancementPath>.
> 
> If anyone has any feedback on the document, please feel free to either edit the wiki or send me an email through the mailing list. If there aren't any objections to what I've written by June 5, I will move it out of the drafts section and link it up to the other documentation.

Thanks for doing this, Chris!  I am looking forward to folks filling this out :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150526/daa4049e/attachment.html>

From glyph at twistedmatrix.com  Tue May 26 16:53:20 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 26 May 2015 15:53:20 -0700
Subject: [Twisted-Python] TLS windows wincertstore
In-Reply-To: <CAKmUHjbr_vYJgEwpkwvdCax7xRghKo1YJxE4LOC4zA3pK3jaPg@mail.gmail.com>
References: <CAKmUHjbr_vYJgEwpkwvdCax7xRghKo1YJxE4LOC4zA3pK3jaPg@mail.gmail.com>
Message-ID: <6B80D848-1D79-4FB3-B175-20E202DCC928@twistedmatrix.com>


> On May 26, 2015, at 5:13 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> I set up a development environment for 32 and 64bit windows.
> 
> But just running 32 bit python.
> 
> Ran the complete test suite successfully on installation.
> 
> Then looked at just running the tests for ssl
> 
> Eventually, on 32 bit all tests passed
> 
> On 64 bit I have one failure on test_inspectCertificate which cannot produce an exact match on the hash.

There was a fix for this merged to trunk recently:

https://twistedmatrix.com/trac/changeset/44903

so you may want to try updating your checkout.

-g

> There is a note against this that says it is liable to fail at some point. But I don't know if that is the case here. I am mentioning it to hopefully get some pointers.
> 
> The last review mentioned some tests failing. I am only testing on windows and for 32 bit the ssl tests all succeed.
> 
> Were there any other tests that failed that I am not seeing.
> 
> Thanks
> 
> 
> -- 
> John Aherne
> 
> 
> 
> www.rocs.co.uk <http://www.rocs.co.uk/>
> 020 7223 7567
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150526/36869717/attachment.html>

From trac at twistedmatrix.com  Sun May 31 00:05:17 2015
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 31 May 2015 06:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1433052317.26.6959886076554421657@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150531/448a0660/attachment.html>

From glyph at twistedmatrix.com  Fri May  1 00:11:05 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 30 Apr 2015 23:11:05 -0700
Subject: [Twisted-Python] sorry about the win7 builder
Message-ID: <F08830B5-BFEF-4852-9E0A-3C815A86A7D6@twistedmatrix.com>

Looks like the win7 builder went offline while I wasn't paying attention.

I've gotten it security-updated and launched again, and it is presently chewing through the backlog on https://buildbot.twistedmatrix.com/builders/windows7-64-py2.7 <https://buildbot.twistedmatrix.com/builders/windows7-64-py2.7> - it should be current in a couple of hours.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150430/1abe10eb/attachment-0002.html>

From the2nd at otpme.org  Fri May  1 11:08:23 2015
From: the2nd at otpme.org (the2nd at otpme.org)
Date: Fri, 01 May 2015 19:08:23 +0200
Subject: [Twisted-Python] twisted ldaptor
Message-ID: <c812495f17c1111a9c3fb0ea408e089a@otpme.org>

Hi all,

i just want to ask if this is the correct list to ask questions about 
https://github.com/twisted/ldaptor.

regards
the2nd



From glyph at twistedmatrix.com  Fri May  1 19:19:29 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 1 May 2015 18:19:29 -0700
Subject: [Twisted-Python] twisted ldaptor
In-Reply-To: <c812495f17c1111a9c3fb0ea408e089a@otpme.org>
References: <c812495f17c1111a9c3fb0ea408e089a@otpme.org>
Message-ID: <6591E609-B659-4CF0-ABA7-85FDA647EAD0@twistedmatrix.com>


> On May 1, 2015, at 10:08 AM, the2nd at otpme.org wrote:
> 
> Hi all,
> 
> i just want to ask if this is the correct list to ask questions about https://github.com/twisted/ldaptor.
> 
> regards
> the2nd

Sure, this list works!

-glyph




From the2nd at otpme.org  Sat May  2 04:37:16 2015
From: the2nd at otpme.org (the2nd at otpme.org)
Date: Sat, 02 May 2015 12:37:16 +0200
Subject: [Twisted-Python] twisted ldaptor
In-Reply-To: <6591E609-B659-4CF0-ABA7-85FDA647EAD0@twistedmatrix.com>
References: <c812495f17c1111a9c3fb0ea408e089a@otpme.org>
 <6591E609-B659-4CF0-ABA7-85FDA647EAD0@twistedmatrix.com>
Message-ID: <1da4146a7fb5b0c50ef7fbe49b69e3d0@otpme.org>


Ok :)

i'm currently investigating how to add ldap server support to OTPme 
(https://www.otpme.org) as i want to extend it to be a complete 
authentication/authorization system including some kind of directory 
service. so i started working on integration with ldaptor. my first 
problem, adding search support, is partly solved now. i've checked 
ldifftree.py and after some debugging i got a search() method that is 
able to do an indexed search of OTPme's directory (which is not in svn 
yet) which allows fast search results for a directory with more than 
2048 users.

but as this is just a start there will be more problems to solve i 
guess.

one issue i have is that an ldapsearch against ldaptor which requests 
just some attributes instead of all always returns all object 
attributes.

for example the ldapsearch below returns the complete ldif of each found 
user in ldaptor (tested also with ldiftree.py):

ldapsearch -H ldap://localhost:8080 -b "ou=users,dc=domain,dc=intern" -w 
abcd -x '(uid=*)' givenName

Running the same search against my openldap server it returns just the 
dn and givenName attributes of each found user.

Is this a missing feature or do i just miss something in my db class?

another important part i haven't looked at yet is how to implement 
authentication. as OTPme focus on OTPs i dont want to add any user 
passwords to the ldap tree. the smoothest solution would be to get 
username+OTP from ldaptor to do authentication. maybe you can give me 
some hints in the right direction? :)

and the last question for now is related the licensing. OTPme is 
licensed under GPLv2. do i run into any licensing issues when using 
ldaptor with OTPme?

regards
the2nd



On 2015-05-02 03:19, Glyph Lefkowitz wrote:
>> On May 1, 2015, at 10:08 AM, the2nd at otpme.org wrote:
>> 
>> Hi all,
>> 
>> i just want to ask if this is the correct list to ask questions about 
>> https://github.com/twisted/ldaptor.
>> 
>> regards
>> the2nd
> 
> Sure, this list works!
> 
> -glyph
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From jesadjust at gmail.com  Sat May  2 09:54:05 2015
From: jesadjust at gmail.com (Jessica Tsui)
Date: Sat, 2 May 2015 23:54:05 +0800
Subject: [Twisted-Python] Urgent - reactor is not working out of a sudden
Message-ID: <CALgu0tjTzb-TDw0opvnrKOKTaMaeq+P++2GA=P4MVghdv0fD0g@mail.gmail.com>

I was working on my program and everything was fine, out of the blue the
python editor just told me that connectTCP and listenTCP cannot be
referenced in reactor.py. I tried to reinstall twisted but that didn't help
at all. How could I solve this?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150502/d0498bb4/attachment-0002.html>

From pierre at jaury.eu  Sat May  2 10:25:21 2015
From: pierre at jaury.eu (Pierre Jaury)
Date: Sat, 02 May 2015 18:25:21 +0200
Subject: [Twisted-Python] Urgent - reactor is not working out of a sudden
In-Reply-To: <CALgu0tjTzb-TDw0opvnrKOKTaMaeq+P++2GA=P4MVghdv0fD0g@mail.gmail.com>
References: <CALgu0tjTzb-TDw0opvnrKOKTaMaeq+P++2GA=P4MVghdv0fD0g@mail.gmail.com>
Message-ID: <5544FA71.9030504@jaury.eu>

Try looking for alternate reactor.py or reactor.pyc in your Python path
maybe?

kaiyou

Le 02/05/2015 17:54, Jessica Tsui a écrit :
> I was working on my program and everything was fine, out of the blue the
> python editor just told me that connectTCP and listenTCP cannot be
> referenced in reactor.py. I tried to reinstall twisted but that didn't
> help at all. How could I solve this?

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 473 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20150502/449b4edd/attachment.sig>

From itamar at itamarst.org  Sat May  2 10:31:33 2015
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sat, 02 May 2015 12:31:33 -0400
Subject: [Twisted-Python] Urgent - reactor is not working out of a sudden
In-Reply-To: <CALgu0tjTzb-TDw0opvnrKOKTaMaeq+P++2GA=P4MVghdv0fD0g@mail.gmail.com>
References: <CALgu0tjTzb-TDw0opvnrKOKTaMaeq+P++2GA=P4MVghdv0fD0g@mail.gmail.com>
Message-ID: <5544FBE5.5050901@itamarst.org>

On 05/02/2015 11:54 AM, Jessica Tsui wrote:
>
> I was working on my program and everything was fine, out of the blue 
> the python editor just told me that connectTCP and listenTCP cannot be 
> referenced in reactor.py. I tried to reinstall twisted but that didn't 
> help at all. How could I solve this?
>
>
reactor.py doesn't have those, yes - that's expected. Twisted does this 
terrible thing where it replaces "twisted.internet.reactor", which 
starts out as reactor.py, with a new object at import time. So your code 
should work even though the file itself is missing those functions. This 
is where it does that:

https://github.com/twisted/twisted/blob/trunk/twisted/internet/reactor.py#L36



From jesadjust at gmail.com  Sat May  2 10:44:30 2015
From: jesadjust at gmail.com (Jessica Tsui)
Date: Sun, 3 May 2015 00:44:30 +0800
Subject: [Twisted-Python] Urgent - reactor is not working out of a sudden
In-Reply-To: <5544FBE5.5050901@itamarst.org>
References: <CALgu0tjTzb-TDw0opvnrKOKTaMaeq+P++2GA=P4MVghdv0fD0g@mail.gmail.com>
 <5544FBE5.5050901@itamarst.org>
Message-ID: <CALgu0thmVzvGxeeNNifWWD9c4k=8zTHhK_f-gSnAmgw=tysdmw@mail.gmail.com>

Hi Itamar,
  I do understand that, however the case is that my code is not working all
of a sudden. It was fine a minute ago, server clients are connecting well
through listenTCP and connectTCP...however suddenly the program returns
failure in connection and when I look through the code the editor just says
that it cannot reference to connectTCP or listenTCP in reactor...which did
not happen before. I had no idea why.
On 3 May, 2015 12:32 am, "Itamar Turner-Trauring" <itamar at itamarst.org>
wrote:

> On 05/02/2015 11:54 AM, Jessica Tsui wrote:
>
>>
>> I was working on my program and everything was fine, out of the blue the
>> python editor just told me that connectTCP and listenTCP cannot be
>> referenced in reactor.py. I tried to reinstall twisted but that didn't help
>> at all. How could I solve this?
>>
>>
>>  reactor.py doesn't have those, yes - that's expected. Twisted does this
> terrible thing where it replaces "twisted.internet.reactor", which starts
> out as reactor.py, with a new object at import time. So your code should
> work even though the file itself is missing those functions. This is where
> it does that:
>
>
> https://github.com/twisted/twisted/blob/trunk/twisted/internet/reactor.py#L36
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150503/8342e55d/attachment-0002.html>

From itamar at itamarst.org  Sat May  2 12:22:30 2015
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sat, 02 May 2015 14:22:30 -0400
Subject: [Twisted-Python] Urgent - reactor is not working out of a sudden
In-Reply-To: <CALgu0thmVzvGxeeNNifWWD9c4k=8zTHhK_f-gSnAmgw=tysdmw@mail.gmail.com>
References: <CALgu0tjTzb-TDw0opvnrKOKTaMaeq+P++2GA=P4MVghdv0fD0g@mail.gmail.com>
 <5544FBE5.5050901@itamarst.org>
 <CALgu0thmVzvGxeeNNifWWD9c4k=8zTHhK_f-gSnAmgw=tysdmw@mail.gmail.com>
Message-ID: <554515E6.1050305@itamarst.org>

On 05/02/2015 12:44 PM, Jessica Tsui wrote:
>
> Hi Itamar,
>   I do understand that, however the case is that my code is not 
> working all of a sudden. It was fine a minute ago, server clients are 
> connecting well through listenTCP and connectTCP...however suddenly 
> the program returns failure in connection and when I look through the 
> code the editor just says that it cannot reference to connectTCP or 
> listenTCP in reactor...which did not happen before. I had no idea why.
>
>

Can you post a minimal reproducing example?



From jesadjust at gmail.com  Sat May  2 12:24:34 2015
From: jesadjust at gmail.com (Jess Tsui)
Date: Sun, 3 May 2015 02:24:34 +0800
Subject: [Twisted-Python] Urgent - reactor is not working out of a sudden
In-Reply-To: <554515E6.1050305@itamarst.org>
References: <CALgu0tjTzb-TDw0opvnrKOKTaMaeq+P++2GA=P4MVghdv0fD0g@mail.gmail.com>
 <5544FBE5.5050901@itamarst.org>
 <CALgu0thmVzvGxeeNNifWWD9c4k=8zTHhK_f-gSnAmgw=tysdmw@mail.gmail.com>
 <554515E6.1050305@itamarst.org>
Message-ID: <A7572C1A-214A-4EAA-9165-B67281342549@gmail.com>

Just fixed the issue by downgrading twisted to 15.0.0 and restarted the computer….thanks anyway :)

> On 3 May, 2015, at 2:22 am, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> 
> On 05/02/2015 12:44 PM, Jessica Tsui wrote:
>> 
>> Hi Itamar,
>>  I do understand that, however the case is that my code is not working all of a sudden. It was fine a minute ago, server clients are connecting well through listenTCP and connectTCP...however suddenly the program returns failure in connection and when I look through the code the editor just says that it cannot reference to connectTCP or listenTCP in reactor...which did not happen before. I had no idea why.
>> 
>> 
> 
> Can you post a minimal reproducing example?
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From trac at twistedmatrix.com  Sun May  3 00:05:17 2015
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 03 May 2015 06:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1430633117.85.8028048212725313492@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150503/c776b70c/attachment-0002.html>

From glyph at twistedmatrix.com  Sun May  3 01:11:26 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 3 May 2015 00:11:26 -0700
Subject: [Twisted-Python] Urgent - reactor is not working out of a sudden
In-Reply-To: <A7572C1A-214A-4EAA-9165-B67281342549@gmail.com>
References: <CALgu0tjTzb-TDw0opvnrKOKTaMaeq+P++2GA=P4MVghdv0fD0g@mail.gmail.com>
 <5544FBE5.5050901@itamarst.org>
 <CALgu0thmVzvGxeeNNifWWD9c4k=8zTHhK_f-gSnAmgw=tysdmw@mail.gmail.com>
 <554515E6.1050305@itamarst.org>
 <A7572C1A-214A-4EAA-9165-B67281342549@gmail.com>
Message-ID: <186AB490-0737-4F8F-8A88-CC47448310C4@twistedmatrix.com>


> On May 2, 2015, at 11:24 AM, Jess Tsui <jesadjust at gmail.com> wrote:
> 
> Just fixed the issue by downgrading twisted to 15.0.0 and restarted the computer….thanks anyway :)

It would be very helpful if you would help us diagnose this issue by re-upgrading to 15.1 and seeing if you can reproduce it.  How did you install Twisted?  How did you downgrade?

Sticking with older versions of Twisted means you won't get new features or security updates.  Having to downgrade like this indicates you won't be able to upgrade in the future, which will potentially mean you will miss out on lots of useful stuff.  Worse, if there's some bug in Twisted which caused this behavior, lots of _other_ people will miss out on the new stuff as well.  So please help us figure out how to get you re-upgraded to the current version :).

-glyph


From psi29a at gmail.com  Sun May  3 06:03:20 2015
From: psi29a at gmail.com (bret curtis)
Date: Sun, 3 May 2015 14:03:20 +0200
Subject: [Twisted-Python] twisted ldaptor
In-Reply-To: <1da4146a7fb5b0c50ef7fbe49b69e3d0@otpme.org>
References: <c812495f17c1111a9c3fb0ea408e089a@otpme.org>
 <6591E609-B659-4CF0-ABA7-85FDA647EAD0@twistedmatrix.com>
 <1da4146a7fb5b0c50ef7fbe49b69e3d0@otpme.org>
Message-ID: <CA+LhZ99=TRs-yXy5CNNMxDWanc+iUJ=Xb4eThsR1CYgyUp2WTA@mail.gmail.com>

Hello there,

if you wish to make a pull request, file a bug report or ask Ldaptor
specific questions, you can contact the developer directly here:
https://github.com/twisted/ldaptor/issues

Not everyone who works on Ldaptor is a member of this mailing list.

I'll try to answer inline:

On Sat, May 2, 2015 at 12:37 PM, <the2nd at otpme.org> wrote:

>
> i'm currently investigating how to add ldap server support to OTPme (
> https://www.otpme.org) as i want to extend it to be a complete
> authentication/authorization system including some kind of directory
> service. so i started working on integration with ldaptor. my first
> problem, adding search support, is partly solved now. i've checked
> ldifftree.py and after some debugging i got a search() method that is able
> to do an indexed search of OTPme's directory (which is not in svn yet)
> which allows fast search results for a directory with more than 2048 users.
>
>
Congratulations! :) How are you going about this? Are these additions
backwards compatible with OpenLDAP? Are you also writing test-cases to
cover these?


> but as this is just a start there will be more problems to solve i guess.
>

There always are, when I first started using Ldaptor, startTLS was broken
which was a requirement for me to do any work with it.


> one issue i have is that an ldapsearch against ldaptor which requests just
> some attributes instead of all always returns all object attributes.
> for example the ldapsearch below returns the complete ldif of each found
> user in ldaptor (tested also with ldiftree.py):
> ldapsearch -H ldap://localhost:8080 -b "ou=users,dc=domain,dc=intern" -w
> abcd -x '(uid=*)' givenName
> Running the same search against my openldap server it returns just the dn
> and givenName attributes of each found user.
> Is this a missing feature or do i just miss something in my db class?
>

Please file an issue on github with an example (ldif entries in a txt file
would work) that can be used to test with a real OpenLDAP server. Then the
ldapsearch like you provided above and a snippit of your ldaptor code so we
can try to reproduce it.


> another important part i haven't looked at yet is how to implement
> authentication. as OTPme focus on OTPs i dont want to add any user
> passwords to the ldap tree. the smoothest solution would be to get
> username+OTP from ldaptor to do authentication. maybe you can give me some
> hints in the right direction? :)


Another issue/question for github, there are others that have spent more
time in this area of the codebase.


> and the last question for now is related the licensing. OTPme is licensed
> under GPLv2. do i run into any licensing issues when using ldaptor with
> OTPme?
>
>
Ldaptor is MIT/Expat license, if you would like to commit code then that
too must be MIT/Expat otherwise it won't be accepted. As for using Ldaptor
to talk with OTPme, there shouldn't be a license problem as they are two
separate applications/services. What exactly is your concern there?



> regards
> the2nd
>
>
Cheers,
Bret
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150503/d9c6f0f3/attachment-0002.html>

From the2nd at otpme.org  Tue May  5 13:18:06 2015
From: the2nd at otpme.org (the2nd)
Date: Tue, 05 May 2015 21:18:06 +0200
Subject: [Twisted-Python] twisted ldaptor
In-Reply-To: <CA+LhZ99=TRs-yXy5CNNMxDWanc+iUJ=Xb4eThsR1CYgyUp2WTA@mail.gmail.com>
References: <c812495f17c1111a9c3fb0ea408e089a@otpme.org>
 <6591E609-B659-4CF0-ABA7-85FDA647EAD0@twistedmatrix.com>
 <1da4146a7fb5b0c50ef7fbe49b69e3d0@otpme.org>
 <CA+LhZ99=TRs-yXy5CNNMxDWanc+iUJ=Xb4eThsR1CYgyUp2WTA@mail.gmail.com>
Message-ID: <5549176E.10000@otpme.org>

Am 03.05.2015 um 14:03 schrieb bret curtis:
> Hello there,
>
> if you wish to make a pull request, file a bug report or ask Ldaptor 
> specific questions, you can contact the developer directly here:
> https://github.com/twisted/ldaptor/issues
>
> Not everyone who works on Ldaptor is a member of this mailing list.

Okay. I was not sure if it's okay to ask questions via the issue tracker. :)

>
> I'll try to answer inline:
>
> On Sat, May 2, 2015 at 12:37 PM, <the2nd at otpme.org 
> <mailto:the2nd at otpme.org>> wrote:
>
>
>     i'm currently investigating how to add ldap server support to
>     OTPme (https://www.otpme.org) as i want to extend it to be a
>     complete authentication/authorization system including some kind
>     of directory service. so i started working on integration with
>     ldaptor. my first problem, adding search support, is partly solved
>     now. i've checked ldifftree.py and after some debugging i got a
>     search() method that is able to do an indexed search of OTPme's
>     directory (which is not in svn yet) which allows fast search
>     results for a directory with more than 2048 users.
>
>
> Congratulations! :) How are you going about this? Are these additions 
> backwards compatible with OpenLDAP? Are you also writing test-cases to 
> cover these?

Thanks. :) But its still in an early stage.

Currently the ldap support is implemented on top of OTPme's users, 
groups, units etc. and will be read-only.

I've decided to implement it as OTPme extensions e.g. a "base" extension 
that handles object classes like "dcObject", "organizationalUnit", 
"inetOrgPerson" etc. and an "posix" extension for "posixAccount", 
"posixGroup" and so on. the extensions will also do things like 
uidNumber/gidNumber allocation etc.

An extension also automatically adds the needed objectClass if the 
attribute the admin adds to a user needs it. if the admin disables an 
extension (e.g. posix or maybe samba later) for a user the corresponding 
ldap attributes are no longer visible via ldap(tor) but not removed from 
the user so they can be re-enabled if needed. To resolve the attribute 
<> objectClass dependencies i've written a simple (and maybe incomplete 
;)) parser that can read openldap's schema files using 
http://www.python-ldap.org/doc/html/ldap-schema.html#module-ldap.schema

The OTPme specific attributes (tokens, timeout values etc.) are not 
implemented as ldap objects/attributes. The main reason for this is that 
i didn't had any plan about the features that OTPme will have as i 
started writing it a few months ago. I decided to learn python as my 
first language in december last year and just wanted write anything 
useful. it all started with the goal to implement 
http://motp.sourceforge.net/ in python. :)

So atm i haven't done anything more than writing a class (staring at the 
magic of ldiftree.py and friends ;)) that gets all needed objects, 
attributes etc. from the OTPme backend as ldif and that can do an 
indexed search using an OTPme function. This class basically works with 
ldaptor. The OTPme backend is implemented using flat files with some 
in-memory caching feature. It also supports AES encryption and i started 
writing an master/slave synchronization for it that should be later used 
to add some kind of cluster support to OTPme.

Maybe i'll implement all OTPme objects (tokens etc.) as ldap 
objects/attributes some day because this would make it possible to also 
get them from an external ldap server like openldap. But this also means 
that i need to create a OTPme schema that can be used with an ldap 
server like openldap. so i'm not sure if i'll go this road because not 
everyone can/wants to add a schema extension. Another idea would be to 
synchronize users from e.g. openldap and add them to OTPme/ldaptor. But 
all of this is not on my current todo.

Continuous integration is on my todo but as there are so many things to 
learn when one wants to learn wrinting software i haven't found the time 
yet.

>     but as this is just a start there will be more problems to solve i
>     guess.
>
>
> There always are, when I first started using Ldaptor, startTLS was 
> broken which was a requirement for me to do any work with it.
>
>     one issue i have is that an ldapsearch against ldaptor which
>     requests just some attributes instead of all always returns all
>     object attributes.
>     for example the ldapsearch below returns the complete ldif of each
>     found user in ldaptor (tested also with ldiftree.py):
>     ldapsearch -H ldap://localhost:8080 -b
>     "ou=users,dc=domain,dc=intern" -w abcd -x '(uid=*)' givenName
>     Running the same search against my openldap server it returns just
>     the dn and givenName attributes of each found user.
>     Is this a missing feature or do i just miss something in my db class?
>
>
> Please file an issue on github with an example (ldif entries in a txt 
> file would work) that can be used to test with a real OpenLDAP server. 
> Then the ldapsearch like you provided above and a snippit of your 
> ldaptor code so we can try to reproduce it.

Done: https://github.com/twisted/ldaptor/issues/38

>     another important part i haven't looked at yet is how to implement
>     authentication. as OTPme focus on OTPs i dont want to add any user
>     passwords to the ldap tree. the smoothest solution would be to get
>     username+OTP from ldaptor to do authentication. maybe you can give
>     me some hints in the right direction? :)
>
> Another issue/question for github, there are others that have spent 
> more time in this area of the codebase.
>

Done: https://github.com/twisted/ldaptor/issues/39

>
>     and the last question for now is related the licensing. OTPme is
>     licensed under GPLv2. do i run into any licensing issues when
>     using ldaptor with OTPme?
>
>
> Ldaptor is MIT/Expat license, if you would like to commit code then 
> that too must be MIT/Expat otherwise it won't be accepted. As for 
> using Ldaptor to talk with OTPme, there shouldn't be a license problem 
> as they are two separate applications/services. What exactly is your 
> concern there?

I dont have any special concern. I'm just new to all of this and wanted 
to make sure it's okay to use ldaptor it with an GPL'ed software.

And if i ever will (be able to ;)) commit any code to ldaptor i'm fine 
with the MIT/Expat license. :)

>
>     regards
>     the2nd
>
>
> Cheers,
> Bret
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150505/24eed37e/attachment-0002.html>

From timothy.gallagher at nuspire.com  Tue May  5 16:17:18 2015
From: timothy.gallagher at nuspire.com (Timothy Gallagher)
Date: Tue, 5 May 2015 22:17:18 +0000
Subject: [Twisted-Python] Twisted-Python Digest, Vol 132, Issue 23
In-Reply-To: <mailman.4757.1426829119.2222.twisted-python@twistedmatrix.com>
References: <mailman.4757.1426829119.2222.twisted-python@twistedmatrix.com>
Message-ID: <2E0A0B508EE01A488C1CC7275D3706B9D09C4B51@DC1EXCHANGE.nuspire.net>

Glyph I just saw this response in my junk mail.  Thank you for the help, I can work with this.

Tj

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of twisted-python-request at twistedmatrix.com
Sent: Friday, March 20, 2015 1:26 AM
To: twisted-python at twistedmatrix.com
Subject: Twisted-Python Digest, Vol 132, Issue 23

Send Twisted-Python mailing list submissions to
	twisted-python at twistedmatrix.com

To subscribe or unsubscribe via the World Wide Web, visit
	http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
or, via email, send a message with subject or body 'help' to
	twisted-python-request at twistedmatrix.com

You can reach the person managing the list at
	twisted-python-owner at twistedmatrix.com

When replying, please edit your Subject line so it is more specific than "Re: Contents of Twisted-Python digest..."


Today's Topics:

   1. custom FTP server is blocking (Paul Wiseman)
   2. Re: custom FTP server is blocking (Louis D. Burr)
   3. Re: __nonzero__ for Deferred (Glyph Lefkowitz)
   4. Re: Removing Python 2.6 Support after Twisted 15.1 (David Ripton)
   5. Re: twistechecker and twisted-dev-tools as part of	twisted
      main repo (Glyph)
   6. Re: twisted echo ssl client with .p12 (Glyph)


----------------------------------------------------------------------

Message: 1
Date: Thu, 19 Mar 2015 18:18:27 +0000
From: Paul Wiseman <poalman at gmail.com>
To: Twisted general discussion <twisted-python at twistedmatrix.com>
Subject: [Twisted-Python] custom FTP server is blocking
Message-ID:
	<CACgdh2i4n5CgwiOQ124YeM-Cyqp+3rMwHGFN7cnq5dt=C_Ne0A at mail.gmail.com>
Content-Type: text/plain; charset=UTF-8

I have some blocking going on in a custom twisted ftp server and I'm trying to pin point what exactly is doing it.

I think this line in openForReading on my FTPShell object could be the culprit:

_FileReader(urllib2.urlopen(result.link,timeout=settings.GLOBAL_TIMEOUT))

(_FileReader is twisted.protocols.ftp._FileReader and result.link a url string)

I'm guessing urllib2.urlopen blocks resolving the domain and connecting? What would be the twisted equivalent way of providing a file like object of the download stream to the FileReader that wouldn't block?

Regards,

Paul



------------------------------

Message: 2
Date: Thu, 19 Mar 2015 15:38:30 -0500
From: "Louis D. Burr" <ldanielburr at me.com>
To: Twisted general discussion <twisted-python at twistedmatrix.com>
Subject: Re: [Twisted-Python] custom FTP server is blocking
Message-ID: <3E9E76E8-E3D3-4905-86B1-0003192C2834 at me.com>
Content-Type: text/plain; charset=us-ascii

Hi Paul,

> On Mar 19, 2015, at 1:18 PM, Paul Wiseman <poalman at gmail.com> wrote:
> 
> I have some blocking going on in a custom twisted ftp server and I'm 
> trying to pin point what exactly is doing it.
> 
> I think this line in openForReading on my FTPShell object could be the culprit:
> 
> _FileReader(urllib2.urlopen(result.link,timeout=settings.GLOBAL_TIMEOU
> T))
> 

Yeah, urllib2.urlopen() blocks, so this is at least one place in your code that will cause you a problem.

> (_FileReader is twisted.protocols.ftp._FileReader and result.link a 
> url string)
> 
> I'm guessing urllib2.urlopen blocks resolving the domain and 
> connecting? What would be the twisted equivalent way of providing a 
> file like object of the download stream to the FileReader that 
> wouldn't block?
> 

You probably want to use twisted.web.client.Agent for this, as it allows you to perform non-blocking http requests.  If you can live with buffering the http response body into, say, a tempfile or an io.BytesIO instance, then you can just pass that to _FileReader as the fObj argument and call it a day.


Hope this helps,

--
L. Daniel Burr




------------------------------

Message: 3
Date: Thu, 19 Mar 2015 14:13:48 -0700
From: Glyph Lefkowitz <glyph at twistedmatrix.com>
To: Twisted general discussion <twisted-python at twistedmatrix.com>
Subject: Re: [Twisted-Python] __nonzero__ for Deferred
Message-ID: <18084B73-66AE-4F0A-857C-507D27537533 at twistedmatrix.com>
Content-Type: text/plain; charset=us-ascii


> On Mar 18, 2015, at 5:50 PM, exarkun at twistedmatrix.com wrote:
> 
> On 18 Mar, 10:03 pm, glyph at twistedmatrix.com wrote:
>> I'd like to deprecate and remove __nonzero__ on Deferreds. Occasionally I see code where someone (maybe even me) does "if d:" where they should have been doing "@d.addCallback def cb(result): if result: ...".
>> 
>> Anybody else have this issue?  Objections?
> 
> Er.  What?  It's a little early for april fools' day, isn't it?

> Seriously, this is weird.  Am I missing something?

Apparently?

> Can expand on what it would mean to deprecated a special method of a 
> class that doesn't even define it

Add such a method and cause it to emit a warning, then raise an exception.

> and what makes Deferred unique among all user-defined classes in this regard.

As I stated in my original message, there's a class of bug where someone does "if somethingThatReturnsDeferred()".  Particularly, "if checkPassword()" is a dangerous manifestation of this class of bug.  I'd like this to fail noisily instead of appearing to work.

In my opinion, having all user-defined classes implement true truthiness by default is a design error in the language.  It's a usually-harmless one except in a few cases, and this is one of those cases, which is why Deferred is not the same as the average user-defined class.

-glyph




------------------------------

Message: 4
Date: Thu, 19 Mar 2015 20:23:35 -0400
From: David Ripton <dripton at ripton.net>
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] Removing Python 2.6 Support after
	Twisted 15.1
Message-ID: <550B6887.4020703 at ripton.net>
Content-Type: text/plain; charset=utf-8

On 03/19/2015 08:05 AM, Phil Mayers wrote:
> On 18/03/15 23:57, Glyph Lefkowitz wrote:
> 
>> Rather than just suggest we preserve the status quo and stay on 2.6 
>> forever to do indefinite free work to support Red Hat's obsolescence
> 
> You *definitely* shouldn't do that. Push back on RedHat, and tell 
> customers to push back on RedHat. I say this to other projects.

Red Hat supports old versions of RHEL forever because they have customers that want that (because they have legacy apps that they want to keep working with minimal maintenance, but who still want security patches), and are willing to pay for it.  It's a good thing that someone provides that option, even if we don't all need it.

That doesn't mean Twisted needs to support old versions of RHEL forever.
 RHEL 7 has been out for a while, and comes with Python 2.7 as the default.  So even if Twisted drops support for Python 2.6, it'll still work on RHEL.  (Just not on old versions of RHEL.)

Furthermore, SCL makes Python 2.7 available (in /opt) on RHEL 5 and 6 and CentOS 6, without users needing to build it themselves.  So even those who are stuck with old versions can install SCL, then use pip to install new Twisted.

IOW, I wouldn't worry about it.  Drop support for Python 2.6 when it makes sense for Twisted.

-- 
David Ripton    dripton at ripton.net



------------------------------

Message: 5
Date: Thu, 19 Mar 2015 20:25:04 -0700
From: Glyph <glyph at twistedmatrix.com>
To: Twisted general discussion <twisted-python at twistedmatrix.com>
Subject: Re: [Twisted-Python] twistechecker and twisted-dev-tools as
	part of	twisted main repo
Message-ID: <790710C6-7461-4E4C-A796-381BD3ED2679 at twistedmatrix.com>
Content-Type: text/plain; charset=utf-8


> On Mar 19, 2015, at 8:41 AM, Christopher Armstrong <radix at twistedmatrix.com> wrote:
> 
> 
>> On Mar 19, 2015, at 4:45 AM, Adi Roiban <adi at roiban.ro> wrote:
>> 
>>> OK, cool.  I didn't realize that was ready for review.  I am liking 
>>> the process we have for Mimic for flagging PRs with keywords - 
>>> https://github.com/rackerlabs/mimic/pulls - but this needs 
>>> automation so as not to be unfriendly to non-committer contributors.
>>> 
>>> I'll try to get to it by the end of the week.
>> 
>> For twistedchecker I start using tags ... but I don't have 
>> permissions for twisted-infra repos.
>> 
>> Yes. GitHub PR are nice but horrible for implementing anything formal 
>> on top of it.
>> 
>> I was preparing to suggest someting similar also for Trac as 
>> sometimes I am not sure if a comment is 'do minor changes and merge' 
>> or 'do minor change and send them for review'
>> 
>> My suggestion is this:
>> 
>> when a PR is ready for review the author should leave a comment 
>> containing the `needs-review` marker. This will send a hook and a 
>> custom hook server will update the tags of the ticket.
>> 
> 
> 
> I suggest making the default, tagless state of a PR mean ?in review?, for a couple of reasons:
> 
> - having labels for both `needs-changes` and `in-review` means you can 
> enter an invalid state where both labels are applied
> - if the automation loses track of a PR, we don?t want people 
> filtering only for PRs with `label:in-review` and missing out on the 
> forgotten PR
> 
> so I propose tagless PRs be considered ?in review?, and a label only for `needs-changes`.

I like seeing the big green "ready for review" on Mimic PRs; it's more eye-catching.  We can have 2 labels though, so that if the automation breaks, we can have a periodic check that adds "in-review" to everything un-labeled.

-g


------------------------------

Message: 6
Date: Thu, 19 Mar 2015 22:25:10 -0700
From: Glyph <glyph at twistedmatrix.com>
To: Twisted general discussion <twisted-python at twistedmatrix.com>
Subject: Re: [Twisted-Python] twisted echo ssl client with .p12
Message-ID: <1AE7D177-6F83-4204-B088-3706F7E1B05F at twistedmatrix.com>
Content-Type: text/plain; charset="us-ascii"


> On Mar 19, 2015, at 8:36 AM, Louis D. Burr <ldanielburr at me.com> wrote:
> 
> Hi Timothy,
> 
>> On Mar 19, 2015, at 9:56 AM, Timothy Gallagher <timothy.gallagher at nuspire.com <mailto:timothy.gallagher at nuspire.com>> wrote:
>> 
>> Hello all,
>> I have a project that requires client server with ssl/tls including client certificate authentication.  Also the a requirement is that the client needs to use a .p12 file to house its keys.  I have the server part and client part down except I cannot find any code examples using a .p12 file to get the certificates.  Can this be done without having to hack into the ssl.ClientConextFactory?
> 
> Maybe http://stackoverflow.com/questions/6345786/python-reading-a-pkcs12-certificate-with-pyopenssl-crypto <http://stackoverflow.com/questions/6345786/python-reading-a-pkcs12-certificate-with-pyopenssl-crypto> will be useful to you.  Twisted uses pyopenssl under the covers, so the solution exarkun posted to StackOverflow should be applicable.
> 
> Hope this helps,
> 
> - L. Daniel Burr

You definitely shouldn't use ssl.ClientContextFactory.  It doesn't verify certificates, or provide any authentication of the server.  We should really remove and deprecate it :-\.

You should use ssl.optionsForClientTLS, and you should build it like this:

import getpass

from OpenSSL.crypto import load_pkcs12
from twisted.internet.ssl import (
    PrivateCertificate, KeyPair, Certificate, optionsForClientTLS
)

from twisted.internet.protocol import Factory, Protocol from twisted.internet.endpoints import SSL4ClientEndpoint from twisted.internet.defer import inlineCallbacks, Deferred from twisted.internet.task import react

@inlineCallbacks
def main(reactor, p12file, host, port=443):
    host = host.decode("utf-8")
    port = int(port)
    with open(p12file) as f:
        pkcs12 = load_pkcs12(f.read(), getpass.getpass())
        publicCertificate = Certificate(pkcs12.get_certificate())
        privateKey = KeyPair(pkcs12.get_privatekey())
        privateCertificate = PrivateCertificate.fromCertificateAndKeyPair(
            publicCertificate, privateKey
        )
    contextFactory = optionsForClientTLS(host,
                                         clientCertificate=privateCertificate)
    endpoint = SSL4ClientEndpoint(reactor, host, port, contextFactory)
    x = Deferred()
    class it(Protocol, object):
        def connectionMade(self):
            self.transport.write(b"GET / HTTP/1.1\r\n\r\n")
        def dataReceived(self, data):
            x.callback(Certificate.peerFromTransport(self.transport))
            self.transport.abortConnection()
    yield endpoint.connect(Factory.forProtocol(it))
    cert = yield x
    print(cert)

from sys import argv
react(main, argv[1:])

Hopefully that's a pretty complete answer :-).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20150319/5d5edec5/attachment.html>

------------------------------

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


End of Twisted-Python Digest, Vol 132, Issue 23
***********************************************




From glyph at twistedmatrix.com  Tue May  5 18:26:02 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 5 May 2015 17:26:02 -0700
Subject: [Twisted-Python] buildbot celebration!
Message-ID: <CE93F831-61A0-4F69-A10F-55CDEBE84858@twistedmatrix.com>

Thanks to the efforts of Adi Roiban and HawkOwl, we now have our first 100% supported green trunk run in a while:

https://buildbot.twistedmatrix.com/boxes-supported?branch=trunk&num_builds=10

Care and feeding for the build farm is an often thankless and invisible job; things can often start failing for irrelevant reasons outside of changes to Twisted and it requires work to get it back on track and keep our quality where it should be, so I just wanted to call it out specifically and say THANK YOU for fixing the builder configuration and getting us back to where we should be :).

Hooray!

-glyph


From rgacote at appropriatesolutions.com  Tue May  5 18:53:03 2015
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Tue, 5 May 2015 20:53:03 -0400
Subject: [Twisted-Python] buildbot celebration!
In-Reply-To: <CE93F831-61A0-4F69-A10F-55CDEBE84858@twistedmatrix.com>
References: <CE93F831-61A0-4F69-A10F-55CDEBE84858@twistedmatrix.com>
Message-ID: <CAG5tnzq0+qmsoaK6+yYAf4jwfB87KAdT20FgJ5nT72Qc=Oy72Q@mail.gmail.com>

So pretty to see all those green Windows builds...

On Tue, May 5, 2015 at 8:26 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

> Thanks to the efforts of Adi Roiban and HawkOwl, we now have our first
> 100% supported green trunk run in a while:
>
>
> https://buildbot.twistedmatrix.com/boxes-supported?branch=trunk&num_builds=10
>
> Care and feeding for the build farm is an often thankless and invisible
> job; things can often start failing for irrelevant reasons outside of
> changes to Twisted and it requires work to get it back on track and keep
> our quality where it should be, so I just wanted to call it out
> specifically and say THANK YOU for fixing the builder configuration and
> getting us back to where we should be :).
>
> Hooray!
>
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Raymond Cote, President
voice: +1.603.924.6079 email: rgacote at AppropriateSolutions.com skype:
ray.cote
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150505/55fb8805/attachment-0002.html>

From saoili at gmail.com  Wed May  6 02:26:25 2015
From: saoili at gmail.com (Saoili)
Date: Wed, 6 May 2015 09:26:25 +0100
Subject: [Twisted-Python] Fwd: Adding callbacks using loop variables
In-Reply-To: <CAMWNtQppK_1i_8vxOGkfo4r0zMWrnrK0sBywaR1OjzYn8L9bzA@mail.gmail.com>
References: <CAMWNtQppK_1i_8vxOGkfo4r0zMWrnrK0sBywaR1OjzYn8L9bzA@mail.gmail.com>
Message-ID: <CAMWNtQrMKDVj+UuXKphj7W1TvvkMPJOwRxsw3CuGK8V9B0DJyA@mail.gmail.com>

Hi folks,

I was going to ask a question, but a colleague resolved it for me. I
thought I'd share the result!

We often end up using lambda to add callbacks, especially where we want to
pass the response to a deferred into a function and it's not the first
parameter. However, if you do that inside a loop and one of the variables
you're passing is a loop variable, you're going to get the same value for
that loop variable in all of your callbacks (the last one). The solution is
to avoid calling lambda, either by reordering the expected params in
function you're calling, or by creating a small function that just reorders
what's passed to it and sends them to that function in the right order.

Hopefully that's useful to someone.
Sorcha


Eg. code BEFORE
            for loop_var in a_dict['loop_vars']:
                d = self.returns_a_deferred(loop_var["x"])
                d.addCallback(
                    lambda ret_val: self.do_another_thing(
                        other_param, loop_var.copy(), ret_val
                    )
                )
                _dlist.append(d)
            return defer.DeferredList(_dlist)

Eg. code AFTER
            def other_func(ret_val, other_param, loop_var):
                return self.do_other_thing(
                    other_param, loop_var, ret_val
                )

            for loop_var in a_dict['loop_vars']:
                d = self.returns_a_deferred(loop_var["x"])
                d.addCallback(other_func, other_param, loop_var)
                _dlist.append(d)
            return defer.DeferredList(_dlist)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150506/9c3bbf3b/attachment-0002.html>

From mithrandi at mithrandi.net  Wed May  6 04:15:44 2015
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Wed, 6 May 2015 12:15:44 +0200
Subject: [Twisted-Python] Fwd: Adding callbacks using loop variables
In-Reply-To: <CAMWNtQrMKDVj+UuXKphj7W1TvvkMPJOwRxsw3CuGK8V9B0DJyA@mail.gmail.com>
References: <CAMWNtQppK_1i_8vxOGkfo4r0zMWrnrK0sBywaR1OjzYn8L9bzA@mail.gmail.com>
 <CAMWNtQrMKDVj+UuXKphj7W1TvvkMPJOwRxsw3CuGK8V9B0DJyA@mail.gmail.com>
Message-ID: <CAMcKhMSL7f=ZbadgyZx=qQv2SCzAw4u81WQcseoUviN37g+B9w@mail.gmail.com>

On 6 May 2015 at 10:26, Saoili <saoili at gmail.com> wrote:
> Eg. code BEFORE
>             for loop_var in a_dict['loop_vars']:
>                 d = self.returns_a_deferred(loop_var["x"])
>                 d.addCallback(
>                     lambda ret_val: self.do_another_thing(
>                         other_param, loop_var.copy(), ret_val
>                     )
>                 )
>                 _dlist.append(d)
>             return defer.DeferredList(_dlist)
>
> Eg. code AFTER
>             def other_func(ret_val, other_param, loop_var):
>                 return self.do_other_thing(
>                     other_param, loop_var, ret_val
>                 )
>
>             for loop_var in a_dict['loop_vars']:
>                 d = self.returns_a_deferred(loop_var["x"])
>                 d.addCallback(other_func, other_param, loop_var)
>                 _dlist.append(d)
>             return defer.DeferredList(_dlist)

There's another common trick for dealing with this, that relies on the
fact that default argument values are evaluated when the lambda
expression itself (not the body of the lambda!) is initially
evaluated; basically, just add an extra parameter with a default value
of the loop variable. For example:

             for loop_var in a_dict['loop_vars']:
                 d = self.returns_a_deferred(loop_var["x"])
                 d.addCallback(
                     lambda ret_val, loop_var=loop_var: self.do_another_thing(
                         other_param, loop_var.copy(), ret_val
                     )
                 )
                 _dlist.append(d)
             return defer.DeferredList(_dlist)

However, separating the code out into a separate function may serve to
make the code clearer.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From tom.prince at ualberta.net  Wed May  6 05:21:26 2015
From: tom.prince at ualberta.net (Tom Prince)
Date: Wed, 06 May 2015 05:21:26 -0600
Subject: [Twisted-Python] Fwd: Adding callbacks using loop variables
In-Reply-To: <CAMWNtQrMKDVj+UuXKphj7W1TvvkMPJOwRxsw3CuGK8V9B0DJyA@mail.gmail.com>
References: <CAMWNtQppK_1i_8vxOGkfo4r0zMWrnrK0sBywaR1OjzYn8L9bzA@mail.gmail.com>
 <CAMWNtQrMKDVj+UuXKphj7W1TvvkMPJOwRxsw3CuGK8V9B0DJyA@mail.gmail.com>
Message-ID: <874mnqne89.fsf@hermes.hocat.ca>


Another option is

   for loop_var in a_dict['loop_vars']:
       d = self.returns_a_deferred(loop_var["x"])
       d.addCallback(
           lambda ret_val, loop_var=lopp_var:
               self.do_another_thing(
                  other_param, loop_var, ret_val)
           )
       )
       _dlist.append(d)
   return defer.DeferredList(_dlist)


This works because default values are evaluated at the point of definition.



From kebin70 at gmail.com  Wed May  6 12:04:45 2015
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Wed, 6 May 2015 11:04:45 -0700
Subject: [Twisted-Python] can QtWebKit fire a twisted deferred?
Message-ID: <CAA-sNEYn2ezkPAvj=w8Rmux++ZVBESx0VnUYynd6A_+r3n0B1g@mail.gmail.com>

'''

I know this is meant for pyqt but I've had little luck this that board.


The short answer is yes, but it's a total hack...and I'm wondering if
anybody has a more elegant solution.


Specifically I would like to be able to fire a defer from the javascript
instead of having to call alert.


Below is an example of how I currently gain access...not necessarily a
working version.

'''


url = 'http://www.google.com'


mo = """

    var observer = new MutationObserver(function(mutations) {

        for (var x = 0; x < mutations.length; x++) {

            if (mutations[x].addedNodes.length > 0) {

                alert('add nodes')

            }

        }

    });

    var config = { attributes: true, childList: true, characterData: false }

    var nti = document.querySelector('document.body')

    observer.observe(nti, config);

"""


page = QWebPage()

def alarmAction(qframe, msg):

    print 'deferred action', qframe, msg

def mutationHook():

    d = defer.Deferred()

    d.addCallback(alarmAction)

    page.javaScriptAlert = d.callback

    page.mainFrame().documentElement().evaluateJavaScript(mo)



page.loadFinished(mutationHook)

page.mainFrame().setUrl(url)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150506/df2789a0/attachment-0002.html>

From glyph at twistedmatrix.com  Wed May  6 16:35:31 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 6 May 2015 15:35:31 -0700
Subject: [Twisted-Python] can QtWebKit fire a twisted deferred?
In-Reply-To: <CAA-sNEYn2ezkPAvj=w8Rmux++ZVBESx0VnUYynd6A_+r3n0B1g@mail.gmail.com>
References: <CAA-sNEYn2ezkPAvj=w8Rmux++ZVBESx0VnUYynd6A_+r3n0B1g@mail.gmail.com>
Message-ID: <8DC2DF48-5B49-4937-BF02-A5F567B7E0F1@twistedmatrix.com>


> On May 6, 2015, at 11:04 AM, Kevin Mcintyre <kebin70 at gmail.com> wrote:
> 
> '''
> I know this is meant for pyqt but I've had little luck this that board.
> 
> The short answer is yes, but it's a total hack...and I'm wondering if anybody has a more elegant solution.  
> 
> Specifically I would like to be able to fire a defer from the javascript instead of having to call alert.
> 
> Below is an example of how I currently gain access...not necessarily a working version.
> '''  

I don't see any import of qt4reactor or Twisted (other than the implied import of Deferred) in this code.  Firing a Deferred in this way should be totally fine though; you don't actually need the reactor for Deferreds to work (it's just important that if it's going to interact with any other Twisted code it needs to run on the main thread).

Sorry I don't have a better suggestion, but I don't see much wrong with what you're doing here :).

-g

> url = 'http://www.google.com <http://www.google.com/>'
> 
> mo = """
>     var observer = new MutationObserver(function(mutations) {
>         for (var x = 0; x < mutations.length; x++) {
>             if (mutations[x].addedNodes.length > 0) {
>                 alert('add nodes')                
>             }
>         }
>     });
>     var config = { attributes: true, childList: true, characterData: false }
>     var nti = document.querySelector('document.body')
>     observer.observe(nti, config);            
> """
> 
> page = QWebPage()
> def alarmAction(qframe, msg):
>     print 'deferred action', qframe, msg
> def mutationHook():
>     d = defer.Deferred()
>     d.addCallback(alarmAction)
>     page.javaScriptAlert = d.callback
>     page.mainFrame().documentElement().evaluateJavaScript(mo)
>     
> page.loadFinished(mutationHook)
> page.mainFrame().setUrl(url)
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150506/6f0d0f47/attachment-0002.html>

From itamar at itamarst.org  Wed May  6 19:03:11 2015
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 06 May 2015 21:03:11 -0400
Subject: [Twisted-Python] Crochet 1.4.0: use Twisted anywhere!
Message-ID: <554AB9CF.7080709@itamarst.org>

Crochet is an MIT-licensed library that makes it easier to use Twisted 
from regular blocking code:

from __future__ import print_function
from twisted.names import client
from crochet import setup, wait_for
setup()

@wait_for(timeout=5.0)
def gethostbyname(name):
     """Use the Twisted DNS library."""
     d = client.lookupAddress(name)
     d.addCallback(lambda result: result[0][0].payload.dottedQuad())
     return d

if __name__ == '__main__':
     # Application code using the public API - notice it works in a normal
     # blocking manner, with no event loop visible:
     import sys
     name = sys.argv[1]
     ip = gethostbyname(name)
     print(name, "->", ip)


New in 1.4.0 is Python 3.4 support as well as support for using Crochet 
with uWSGI, and additional documentation on workarounds for various 
limitations of Crochet.

https://pypi.python.org/pypi/crochet for downloads.
https://crochet.readthedocs.org/ for documentation.


--Itamar Turner-Trauring




From kebin70 at gmail.com  Wed May  6 19:24:01 2015
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Wed, 6 May 2015 18:24:01 -0700
Subject: [Twisted-Python] can QtWebKit fire a twisted deferred?
In-Reply-To: <8DC2DF48-5B49-4937-BF02-A5F567B7E0F1@twistedmatrix.com>
References: <CAA-sNEYn2ezkPAvj=w8Rmux++ZVBESx0VnUYynd6A_+r3n0B1g@mail.gmail.com>
 <8DC2DF48-5B49-4937-BF02-A5F567B7E0F1@twistedmatrix.com>
Message-ID: <CAA-sNEacu0jywtUbE6Y=TRKLWLnfQW0-0m63SDum6KzzhiKvmA@mail.gmail.com>

That was pseudo code, I've been using qt5reactor to happy results.  All the
same good to know on deferreds working in non-twisted code...

My challenge is having only 2 hooks into the DOM - javaScriptAlert and
javaScriptConfirm that ultimately with QtWebEngine aren't available.

thank for the feedback.

On Wed, May 6, 2015 at 3:35 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On May 6, 2015, at 11:04 AM, Kevin Mcintyre <kebin70 at gmail.com> wrote:
>
> '''
> I know this is meant for pyqt but I've had little luck this that board.
>
> The short answer is yes, but it's a total hack...and I'm wondering if
> anybody has a more elegant solution.
>
> Specifically I would like to be able to fire a defer from the javascript
> instead of having to call alert.
>
> Below is an example of how I currently gain access...not necessarily a
> working version.
> '''
>
>
> I don't see any import of qt4reactor or Twisted (other than the implied
> import of Deferred) in this code.  Firing a Deferred in this way should be
> totally fine though; you don't actually need the reactor for Deferreds to
> work (it's just important that if it's going to interact with any *other* Twisted
> code it needs to run on the main thread).
>
> Sorry I don't have a better suggestion, but I don't see much wrong with
> what you're doing here :).
>
> -g
>
> url = 'http://www.google.com'
>
> mo = """
>     var observer = new MutationObserver(function(mutations) {
>         for (var x = 0; x < mutations.length; x++) {
>             if (mutations[x].addedNodes.length > 0) {
>                 alert('add nodes')
>             }
>         }
>     });
>     var config = { attributes: true, childList: true, characterData:
> false }
>     var nti = document.querySelector('document.body')
>     observer.observe(nti, config);
> """
>
> page = QWebPage()
> def alarmAction(qframe, msg):
>     print 'deferred action', qframe, msg
> def mutationHook():
>     d = defer.Deferred()
>     d.addCallback(alarmAction)
>     page.javaScriptAlert = d.callback
>     page.mainFrame().documentElement().evaluateJavaScript(mo)
>
>
> page.loadFinished(mutationHook)
> page.mainFrame().setUrl(url)
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150506/1c91139c/attachment-0002.html>

From glyph at twistedmatrix.com  Wed May  6 20:22:41 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 6 May 2015 19:22:41 -0700
Subject: [Twisted-Python] can QtWebKit fire a twisted deferred?
In-Reply-To: <CAA-sNEacu0jywtUbE6Y=TRKLWLnfQW0-0m63SDum6KzzhiKvmA@mail.gmail.com>
References: <CAA-sNEYn2ezkPAvj=w8Rmux++ZVBESx0VnUYynd6A_+r3n0B1g@mail.gmail.com>
 <8DC2DF48-5B49-4937-BF02-A5F567B7E0F1@twistedmatrix.com>
 <CAA-sNEacu0jywtUbE6Y=TRKLWLnfQW0-0m63SDum6KzzhiKvmA@mail.gmail.com>
Message-ID: <63B37B6C-35B9-4D0F-9E32-08DCCF23F83D@twistedmatrix.com>

> On May 6, 2015, at 6:24 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:
> 
> That was pseudo code, I've been using qt5reactor to happy results.  All the same good to know on deferreds working in non-twisted code...

pseudo-code can sometimes illustrate a point, but when working with a real, large, complex API like Qt, it's often useful to have a http://sscce.org <http://sscce.org/> available to make sure the point you are demonstrating is the same as the point you think you're demonstrating :).

> My challenge is having only 2 hooks into the DOM - javaScriptAlert and javaScriptConfirm that ultimately with QtWebEngine aren't available.

When working with JS containers like this myself in the past, and needing to communicate with them from the container, I generally use eval as input:

http://doc.qt.io/qt-5/qwebenginepage.html#runJavaScript-2 <http://doc.qt.io/qt-5/qwebenginepage.html#runJavaScript-2>

and then console messages as output:

http://doc.qt.io/qt-5/qwebenginepage.html#javaScriptConsoleMessage <http://doc.qt.io/qt-5/qwebenginepage.html#javaScriptConsoleMessage>

You should be able to speak to the JS running inside your container by emitting specially-formatted console messages, and firing Deferreds in response to those.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150506/e542e32c/attachment-0002.html>

From glyph at twistedmatrix.com  Wed May  6 20:23:35 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 6 May 2015 19:23:35 -0700
Subject: [Twisted-Python] Crochet 1.4.0: use Twisted anywhere!
In-Reply-To: <554AB9CF.7080709@itamarst.org>
References: <554AB9CF.7080709@itamarst.org>
Message-ID: <361F33AE-6964-491D-AACA-F4784F633EE2@twistedmatrix.com>


> On May 6, 2015, at 6:03 PM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> 
> New in 1.4.0 is Python 3.4 support as well as support for using Crochet with uWSGI, and additional documentation on workarounds for various limitations of Crochet.

Woohoo!  Exciting stuff!  Every new release of Crochet squashes another bogus excuse for not using Twisted ;-).

Thanks, Itamar!

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150506/63a17155/attachment-0002.html>

From hawkowl at atleastfornow.net  Thu May  7 00:13:46 2015
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Thu, 7 May 2015 14:13:46 +0800
Subject: [Twisted-Python] New Supported Platforms - Python 3.3 and Python
	3.4 on Debian 7
Message-ID: <75D0D6A4-A4CC-414A-91D7-552C630B226B@atleastfornow.net>

Hi everyone!

I'm pleased to announce that Twisted will have one more new supported Python version (3.4) as of Twisted 15.2. The debian7-py33 and debian7-py34 builders will shortly be moving from 'unsupported' to 'supported'.

- Hawkie


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20150507/bb6d8e69/attachment.sig>

From dynamicgl at gmail.com  Thu May  7 10:31:00 2015
From: dynamicgl at gmail.com (Gelin Yan)
Date: Fri, 8 May 2015 00:31:00 +0800
Subject: [Twisted-Python] New Supported Platforms - Python 3.3 and
 Python 3.4 on Debian 7
In-Reply-To: <75D0D6A4-A4CC-414A-91D7-552C630B226B@atleastfornow.net>
References: <75D0D6A4-A4CC-414A-91D7-552C630B226B@atleastfornow.net>
Message-ID: <CABkOF6THzY-4y1TtpwJ17qF02T7NtL9t7F1tXQf76kNtAWgVKw@mail.gmail.com>

On Thu, May 7, 2015 at 2:13 PM, HawkOwl <hawkowl at atleastfornow.net> wrote:

> Hi everyone!
>
> I'm pleased to announce that Twisted will have one more new supported
> Python version (3.4) as of Twisted 15.2. The debian7-py33 and debian7-py34
> builders will shortly be moving from 'unsupported' to 'supported'.
>
> - Hawkie
>
>
>
>
>
Hi HawkOwl

    May I know what level does twisted support for python 3? I am
interested in porting my system to python 3. To be frank, Twisted is the
main reason I am staying with python 2.x.

Regards

gelin yan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150508/c66725f4/attachment-0002.html>

From hawkowl at atleastfornow.net  Thu May  7 22:36:30 2015
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Fri, 8 May 2015 12:36:30 +0800
Subject: [Twisted-Python] New Supported Platforms - Python 3.3 and
	Python 3.4 on Debian 7
In-Reply-To: <CABkOF6THzY-4y1TtpwJ17qF02T7NtL9t7F1tXQf76kNtAWgVKw@mail.gmail.com>
References: <75D0D6A4-A4CC-414A-91D7-552C630B226B@atleastfornow.net>
 <CABkOF6THzY-4y1TtpwJ17qF02T7NtL9t7F1tXQf76kNtAWgVKw@mail.gmail.com>
Message-ID: <3669E840-667D-48DD-B6AA-016FC2B45C94@atleastfornow.net>


> On 8 May 2015, at 00:31, Gelin Yan <dynamicgl at gmail.com> wrote:
> 
> Hi HawkOwl
> 
>     May I know what level does twisted support for python 3? I am interested in porting my system to python 3. To be frank, Twisted is the main reason I am staying with python 2.x.
> 
> Regards
> 
> gelin yan
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

Hi,

Many parts are ported, but many parts are also equally unported :)

The best way to find out what may or may not work is to run your test suite against a trunk version of Twisted under Python 3, making sure that your code compiles (and fixing anything to operate on 2/3, which is rather easy for most things), and seeing what your tests say. :)

- Hawkie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20150508/eb2b08bb/attachment.sig>

From itamar at itamarst.org  Fri May  8 07:24:31 2015
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Fri, 08 May 2015 09:24:31 -0400
Subject: [Twisted-Python] New Supported Platforms - Python 3.3 and
 Python 3.4 on Debian 7
In-Reply-To: <3669E840-667D-48DD-B6AA-016FC2B45C94@atleastfornow.net>
References: <75D0D6A4-A4CC-414A-91D7-552C630B226B@atleastfornow.net>
 <CABkOF6THzY-4y1TtpwJ17qF02T7NtL9t7F1tXQf76kNtAWgVKw@mail.gmail.com>
 <3669E840-667D-48DD-B6AA-016FC2B45C94@atleastfornow.net>
Message-ID: <d95287b53e1352bb0c8cc2c4ebb99460@itamarst.org>

 

On 2015-05-08 00:36, HawkOwl wrote: 

> The best way to find out what may or may not work is to run your test suite against a trunk version of Twisted under Python 3, making sure that your code compiles (and fixing anything to operate on 2/3, which is rather easy for most things), and seeing what your tests say. :)

And specifically an *installed* version of Twisted. A checkout will
include unported modules. 

 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150508/407d5c39/attachment-0002.html>

From tobias.oberstein at tavendo.de  Fri May  8 12:27:36 2015
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Fri, 8 May 2015 11:27:36 -0700
Subject: [Twisted-Python] New Supported Platforms - Python 3.3 and
 Python	3.4 on Debian 7
In-Reply-To: <75D0D6A4-A4CC-414A-91D7-552C630B226B@atleastfornow.net>
References: <75D0D6A4-A4CC-414A-91D7-552C630B226B@atleastfornow.net>
Message-ID: <634914A010D0B943A035D226786325D44B576BBB8E@EXVMBX020-12.exch020.serverdata.net>

Awesome work, Hawkie!

Thanks for going through all nitty gritty details and - for getting everything reviewed/merged;)

Cheers,
/Tobias

> -----Ursprüngliche Nachricht-----
> Von: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] Im Auftrag von HawkOwl
> Gesendet: Donnerstag, 7. Mai 2015 08:14
> An: Twisted-Python
> Betreff: [Twisted-Python] New Supported Platforms - Python 3.3 and Python
> 3.4 on Debian 7
> 
> Hi everyone!
> 
> I'm pleased to announce that Twisted will have one more new supported
> Python version (3.4) as of Twisted 15.2. The debian7-py33 and debian7-py34
> builders will shortly be moving from 'unsupported' to 'supported'.
> 
> - Hawkie
> 




From glyph at twistedmatrix.com  Sat May  9 14:04:00 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 9 May 2015 13:04:00 -0700
Subject: [Twisted-Python] LoopingCall.withCount countCallable called
	with 0
In-Reply-To: <CALTAbWn8LqUnkpLcMVb50jo5Nv0XweOWkrdfDaK4HQxDSXOn+A@mail.gmail.com>
References: <CALTAbW=PEr3sn5E8bcCF13w-injhC9ojCJVrNb1biFRN7QNMOw@mail.gmail.com>
 <7F261C23-3DCA-4CA9-BF01-37C767E59988@twistedmatrix.com>
 <CALTAbWn8LqUnkpLcMVb50jo5Nv0XweOWkrdfDaK4HQxDSXOn+A@mail.gmail.com>
Message-ID: <721A24FE-3A86-416B-B0D9-C382B4067185@twistedmatrix.com>


> On Mar 26, 2015, at 2:06 AM, Dario Vinella <d.vinella at gmail.com> wrote:
> 
> Here it is a log where I print a dot when the calls arg is 1, the value if not 1, each dot is separated by 0.02s
> 
> https://gist.github.com/dvinella/73e5e45a04c428f037bf <https://gist.github.com/dvinella/73e5e45a04c428f037bf>
>  
> Thanks for reporting!  Can you open a ticket?
> 
> Sure, I'll open it!

I just wanted to follow up with this - https://twistedmatrix.com/trac/ticket/7836 <https://twistedmatrix.com/trac/ticket/7836> is the ticket in question and it is now fixed on trunk, pending the next release.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150509/425df47b/attachment-0002.html>

From trac at twistedmatrix.com  Sun May 10 00:05:21 2015
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 10 May 2015 06:05:21 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1431237921.2.932785446261603745@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150510/3758e0d2/attachment-0002.html>

From d.vinella at gmail.com  Sun May 10 01:38:59 2015
From: d.vinella at gmail.com (Dario Vinella)
Date: Sun, 10 May 2015 09:38:59 +0200
Subject: [Twisted-Python] LoopingCall.withCount countCallable called
	with 0
In-Reply-To: <721A24FE-3A86-416B-B0D9-C382B4067185@twistedmatrix.com>
References: <CALTAbW=PEr3sn5E8bcCF13w-injhC9ojCJVrNb1biFRN7QNMOw@mail.gmail.com>
 <7F261C23-3DCA-4CA9-BF01-37C767E59988@twistedmatrix.com>
 <CALTAbWn8LqUnkpLcMVb50jo5Nv0XweOWkrdfDaK4HQxDSXOn+A@mail.gmail.com>
 <721A24FE-3A86-416B-B0D9-C382B4067185@twistedmatrix.com>
Message-ID: <CALTAbWnpOa9jQ7oX3TRS52A1+p1qGcd6P6Tq3HNboX8m_A7Lfg@mail.gmail.com>

Thank you glyph and moshez for working on this!

2015-05-09 22:04 GMT+02:00 Glyph <glyph at twistedmatrix.com>:

>
> On Mar 26, 2015, at 2:06 AM, Dario Vinella <d.vinella at gmail.com> wrote:
>
> Here it is a log where I print a dot when the calls arg is 1, the value if
> not 1, each dot is separated by 0.02s
>
> https://gist.github.com/dvinella/73e5e45a04c428f037bf
>
>
>> Thanks for reporting!  Can you open a ticket?
>>
>
> Sure, I'll open it!
>
>
> I just wanted to follow up with this -
> https://twistedmatrix.com/trac/ticket/7836 is the ticket in question and
> it is now fixed on trunk, pending the next release.
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150510/b98e7839/attachment-0002.html>

From hawkowl at atleastfornow.net  Sun May 10 21:57:53 2015
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Mon, 11 May 2015 11:57:53 +0800
Subject: [Twisted-Python] INCOMPATIBLE CHANGE: Removing PAM support from
	Twisted
Message-ID: <5A610604-4AFA-43DE-A04F-D71DEF4B8CD7@atleastfornow.net>

As per https://twistedmatrix.com/trac/wiki/CompatibilityPolicy#ProcedureforExceptionstothisPolicy:

Twisted's PAM support is reliant on a library which a) doesn't materially exist anymore, b) is blocking, c) is uninstalled on all our buildbots if I'm correct and so therefore hasn't been tested for ages, and d) requires us to do insecure things (like setting euid as root). Since it's basically uninstallable (I can't even find a source tarball newer than 1999) and almost certainly doesn't work on any Python versions we support, I propose outright removal, rather than emitting deprecation warnings that literally nobody will see.

I have prepared a patch at https://github.com/twisted/twisted/compare/trunk...remove-pamauth-3728-2 . Under the deprecation policy's exclusions rule, this branch is given for people to make sure that their code does not break. Three other committers will need to also pitch support for this (although I don't think that'll be an issue ;) ). This patch not only removes PAM, but all of its (unusedness) in Conch.

The ticket is available at https://twistedmatrix.com/trac/ticket/3728 and will be put in review shortly. The buildbot results can be seen at https://buildbot.twistedmatrix.com/boxes-supported?branch=/branches/remove-pamauth-3728-2 .

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20150511/ed239d60/attachment.sig>

From glyph at twistedmatrix.com  Sun May 10 22:35:54 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 10 May 2015 21:35:54 -0700
Subject: [Twisted-Python] INCOMPATIBLE CHANGE: Removing PAM support from
	Twisted
In-Reply-To: <5A610604-4AFA-43DE-A04F-D71DEF4B8CD7@atleastfornow.net>
References: <5A610604-4AFA-43DE-A04F-D71DEF4B8CD7@atleastfornow.net>
Message-ID: <64880D45-B75D-45DD-B316-498008281DC1@twistedmatrix.com>


> On May 10, 2015, at 8:57 PM, HawkOwl <hawkowl at atleastfornow.net> wrote:
> 
> As per https://twistedmatrix.com/trac/wiki/CompatibilityPolicy#ProcedureforExceptionstothisPolicy:
> 
> Twisted's PAM support is reliant on a library which a) doesn't materially exist anymore, b) is blocking, c) is uninstalled on all our buildbots if I'm correct and so therefore hasn't been tested for ages, and d) requires us to do insecure things (like setting euid as root). Since it's basically uninstallable (I can't even find a source tarball newer than 1999) and almost certainly doesn't work on any Python versions we support, I propose outright removal, rather than emitting deprecation warnings that literally nobody will see.
> 
> I have prepared a patch at https://github.com/twisted/twisted/compare/trunk...remove-pamauth-3728-2 . Under the deprecation policy's exclusions rule, this branch is given for people to make sure that their code does not break. Three other committers will need to also pitch support for this (although I don't think that'll be an issue ;) ). This patch not only removes PAM, but all of its (unusedness) in Conch.
> 
> The ticket is available at https://twistedmatrix.com/trac/ticket/3728 and will be put in review shortly. The buildbot results can be seen at https://buildbot.twistedmatrix.com/boxes-supported?branch=/branches/remove-pamauth-3728-2 .


I'm very much in favor of an outright removal in this case, so consider me signed off.  Given the gnarly security implications of this thing I would take the unusual step of continuing to approve of removal even if we have a real-life user who might be impacted.

That said, lack of actual PAM support (and more generally, platform-integrated user authentication mechanisms) is a sore spot and we should add something less terrible when we can.

-glyph




From mithrandi at mithrandi.net  Sun May 10 23:52:36 2015
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Mon, 11 May 2015 07:52:36 +0200
Subject: [Twisted-Python] INCOMPATIBLE CHANGE: Removing PAM support from
	Twisted
In-Reply-To: <64880D45-B75D-45DD-B316-498008281DC1@twistedmatrix.com>
References: <5A610604-4AFA-43DE-A04F-D71DEF4B8CD7@atleastfornow.net>
 <64880D45-B75D-45DD-B316-498008281DC1@twistedmatrix.com>
Message-ID: <CAMcKhMTF90etXJkiXMAEnsJeXHeymVi5TrkSHsDiPEUgiLs2TA@mail.gmail.com>

On 11 May 2015 at 06:35, Glyph <glyph at twistedmatrix.com> wrote:
> I'm very much in favor of an outright removal in this case, so consider me signed off.  Given the gnarly security implications of this thing I would take the unusual step of continuing to approve of removal even if we have a real-life user who might be impacted.
>
> That said, lack of actual PAM support (and more generally, platform-integrated user authentication mechanisms) is a sore spot and we should add something less terrible when we can.

What glyph said :)
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From hawkowl at atleastfornow.net  Mon May 11 06:54:32 2015
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Mon, 11 May 2015 20:54:32 +0800
Subject: [Twisted-Python] Twisted 15.2 Prerelease Announcement
Message-ID: <FF06AE8A-9FE3-4C8A-86E3-81C4FA65C63F@atleastfornow.net>

Hello everyone! It's about time that the owl-themed release management simulation kicked into high-gear, and as such, I delivereth to you all the first prerelease of Twisted 15.2.

Bringing not only headlining features but also a lot of incremental improvements, this release has got plenty to like:

- twisted.logger has landed! This is a brand-new, feature-rich logging framework.
- Python 3.4 is now a supported platform for all the Py3 ported modules.
- twisted.trial.unittest.TestCase's assertEqual, assertTrue, and assertFalse methods now pass through the standard library's more informative failure messages.
- twisted.python.filepath.FilePath now supports Unicode (text) paths properly, and includes as{Bytes,Text}Mode methods for interacting with APIs that require a text/bytes-only FilePath.
- twisted.mail.smtp.sendmail now supports ESMTP and provides a high-level interface for sending mail.
- The following parts of Twisted are now ported to Python 3:
    - twisted.internet.process
    - twisted.cred.credentials
    - twisted.python.modules
    - twisted.internet.kqreactor
    - twisted.internet.endpoints.ProcessEndpoint
    - twisted.web.static

As usual, tarballs can be found at http://twistedmatrix.com/Releases/pre/15.2.0pre1/ , and the full NEWS file can be found at http://twistedmatrix.com/Releases/pre/15.2.0pre1/NEWS.txt .

On a personal note, I'd like to thank Tavendo for sponsoring a majority of my Py3 porting work, and everyone who reviewed tickets for getting it landed.

Please test out the new prerelease :)

Twisted regards,
Amber "Hawkie" Brown
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20150511/b64b001f/attachment.sig>

From glyph at twistedmatrix.com  Mon May 11 22:10:48 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 11 May 2015 21:10:48 -0700
Subject: [Twisted-Python] [Twisted-web] Twisted 15.2 Prerelease
	Announcement
In-Reply-To: <FF06AE8A-9FE3-4C8A-86E3-81C4FA65C63F@atleastfornow.net>
References: <FF06AE8A-9FE3-4C8A-86E3-81C4FA65C63F@atleastfornow.net>
Message-ID: <14CF8F3E-A3F7-4F93-9892-E3486C01B31B@twistedmatrix.com>


> On May 11, 2015, at 5:54 AM, HawkOwl <hawkowl at atleastfornow.net> wrote:
> 
> Hello everyone! It's about time that the owl-themed release management simulation kicked into high-gear, and as such, I delivereth to you all the first prerelease of Twisted 15.2.
> 
> Bringing not only headlining features but also a lot of incremental improvements, this release has got plenty to like:
> 
> - twisted.logger has landed! This is a brand-new, feature-rich logging framework.
> - Python 3.4 is now a supported platform for all the Py3 ported modules.
> - twisted.trial.unittest.TestCase's assertEqual, assertTrue, and assertFalse methods now pass through the standard library's more informative failure messages.
> - twisted.python.filepath.FilePath now supports Unicode (text) paths properly, and includes as{Bytes,Text}Mode methods for interacting with APIs that require a text/bytes-only FilePath.
> - twisted.mail.smtp.sendmail now supports ESMTP and provides a high-level interface for sending mail.
> - The following parts of Twisted are now ported to Python 3:
>    - twisted.internet.process
>    - twisted.cred.credentials
>    - twisted.python.modules
>    - twisted.internet.kqreactor
>    - twisted.internet.endpoints.ProcessEndpoint
>    - twisted.web.static
> 
> As usual, tarballs can be found at http://twistedmatrix.com/Releases/pre/15.2.0pre1/ , and the full NEWS file can be found at http://twistedmatrix.com/Releases/pre/15.2.0pre1/NEWS.txt .
> 
> On a personal note, I'd like to thank Tavendo for sponsoring a majority of my Py3 porting work, and everyone who reviewed tickets for getting it landed.
> 
> Please test out the new prerelease :)

Hooray!!!!  This release is a pretty big deal.  This new logging system has been in development for a long time, and the availability of twisted.internet.process on py3 is a pretty big new chunk of twisted.core to be available.

Thank you very much, Amber, for helping us get out timely releases on such a consistent basis.

Reminder, everyone, that you have a week from this announcement to test your software against the pre-release and test any regressions!

(Thanks also to my employer, Rackspace, for giving me the time to review many of these tickets.)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150511/ba5cdd2b/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 630 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20150511/ba5cdd2b/attachment.sig>

From mashiat.sarker at gmail.com  Tue May 12 08:53:33 2015
From: mashiat.sarker at gmail.com (Mashiat Sarker Shakkhar)
Date: Tue, 12 May 2015 10:53:33 -0400
Subject: [Twisted-Python] Trapping exceptions in Deferred
Message-ID: <CAOfeCWWJqV02iGwWTbg17iE6XR4+KL2hTtu5kqgbtH8MOX5_ww@mail.gmail.com>

Hi

If I want to trap a certain type of exception in a deferred call, how do I
specify it? For example, I see a failure like this:

    [HTTP11ClientProtocol (TLSMemoryBIOProtocol),client]
[<twisted.python.failure.Failure <class 'OpenSSL.SSL.Error'>>]

    [HTTP11ClientProtocol (TLSMemoryBIOProtocol),client] Traceback
(most recent call last):
    [HTTP11ClientProtocol (TLSMemoryBIOProtocol),client] Failure:
twisted.web._newclient.ResponseNeverReceived: [<twisted.python.
failure.Failure <class 'OpenSSL.SSL.Error'>>]

I want to trap all such failures. I tried
`failure.trap(twisted.web._newclient.ResponseNeverReceived)` but looks
like that did not work. My deferred callback looks like this:

Hi

If I want to trap a certain type of exception in a deferred call, how
do I specify it? For example, I see a failure like this:

    [HTTP11ClientProtocol (TLSMemoryBIOProtocol),client]
[<twisted.python.failure.Failure <class 'OpenSSL.SSL.Error'>>]

    [HTTP11ClientProtocol (TLSMemoryBIOProtocol),client] Traceback
(most recent call last):
    [HTTP11ClientProtocol (TLSMemoryBIOProtocol),client] Failure:
twisted.web._newclient.ResponseNeverReceived: [<twisted.python.
failure.Failure <class 'OpenSSL.SSL.Error'>>]

I want to trap all such failures. I tried
`failure.trap(twisted.web._newclient.ResponseNeverReceived)` but looks
like that did not work. My deferred callback looks like this:

    from twisted.internet.error import TimeoutError
    from twisted.web._newclient import ResponseNeverReceived
    def log_ignore_network_errors(failure):
        print failure.getErrorMessage()
        failure.printTraceback()
        failure.trap(TimeoutError, ResponseNeverReceived)

Apparently this does not catch all such errors. What am I doing wrong here?

Regards
Shakkhar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150512/7c4e1a36/attachment-0002.html>

From ldanielburr at me.com  Tue May 12 09:33:06 2015
From: ldanielburr at me.com (Louis D. Burr)
Date: Tue, 12 May 2015 10:33:06 -0500
Subject: [Twisted-Python] Trapping exceptions in Deferred
In-Reply-To: <CAOfeCWWJqV02iGwWTbg17iE6XR4+KL2hTtu5kqgbtH8MOX5_ww@mail.gmail.com>
References: <CAOfeCWWJqV02iGwWTbg17iE6XR4+KL2hTtu5kqgbtH8MOX5_ww@mail.gmail.com>
Message-ID: <672BD626-F6F9-4E5C-800D-80F168E3407D@me.com>

Hi Mashiat,

> On May 12, 2015, at 9:53 AM, Mashiat Sarker Shakkhar <mashiat.sarker at gmail.com> wrote:
> 
> Hi
> 
> If I want to trap a certain type of exception in a deferred call, how do I specify it? For example, I see a failure like this:
> 
>     [HTTP11ClientProtocol (TLSMemoryBIOProtocol),client] [<twisted.python.failure.Failure <class 'OpenSSL.SSL.Error'>>]
>     [HTTP11ClientProtocol (TLSMemoryBIOProtocol),client] Traceback (most recent call last):
>     [HTTP11ClientProtocol (TLSMemoryBIOProtocol),client] Failure: twisted.web._newclient.ResponseNeverReceived: [<twisted.python.
> failure.Failure <class 'OpenSSL.SSL.Error'>>]
> 
> I want to trap all such failures. I tried `failure.trap(twisted.web._newclient.ResponseNeverReceived)` but looks like that did not work. My deferred callback looks like this:
> 
>     from twisted.internet.error import TimeoutError
>     from twisted.web._newclient import ResponseNeverReceived
>     def log_ignore_network_errors(failure):
>         print failure.getErrorMessage()
>         failure.printTraceback()
>         failure.trap(TimeoutError, ResponseNeverReceived)
> 
> Apparently this does not catch all such errors. What am I doing wrong here?
> 
This code sample does not indicate that you have actually assigned log_ignore_network_errors as an errback on a Deferred anywhere.  If you can provide a working code example that demonstrates your issue, it will be easier to help you :)

L. Daniel Burr

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150512/2d5cb109/attachment-0002.html>

From mashiat.sarker at gmail.com  Tue May 12 10:48:00 2015
From: mashiat.sarker at gmail.com (Mashiat Sarker Shakkhar)
Date: Tue, 12 May 2015 12:48:00 -0400
Subject: [Twisted-Python] Trapping exceptions in Deferred
In-Reply-To: <672BD626-F6F9-4E5C-800D-80F168E3407D@me.com>
References: <CAOfeCWWJqV02iGwWTbg17iE6XR4+KL2hTtu5kqgbtH8MOX5_ww@mail.gmail.com>
 <672BD626-F6F9-4E5C-800D-80F168E3407D@me.com>
Message-ID: <CAOfeCWUwwkWzRLi7v3S0DS1ybptN71uUxfpkqzMAXQ-Cg5L-Fw@mail.gmail.com>

On Tue, May 12, 2015 at 11:33 AM, Louis D. Burr <ldanielburr at me.com> wrote:
>
> Hi Mashiat,

[...]

> This code sample does not indicate that you have actually assigned
log_ignore_network_errors as an errback on a Deferred anywhere.  If you can
provide a working code example that demonstrates your issue, it will be
easier to help you :)

Alright. Below you can find a code snippet that is similar to my actual
code. But my question is a little more generic - how do I catch exceptions
that are encapsulated in a failure? If the actual exception is
OpenSSL.SSL.Error,
and it is wrapped in twisted.web._newclient.ResponseNeverReceived, how
should my trap call look like?

```
imort json
import StringIO
from twisted.internet import reactor
from twisted.internet.error import TimeoutError
from twisted.web._newclient import ResponseNeverReceived
from twisted.web.client import Agent, HTTPConnectionPool
from twisted.web.client import FileBodyProducer

def some_callback(response):
    pass

def log_ignore_network_errors(failure):
    print failure.getErrorMessage()
    failure.printTraceback()
    failure.trap(TimeoutError, ResponseNeverReceived)

agent = Agent(reactor)
body = FileBodyProducer(StringIO(json.dumps({'key': 'value'})))
d = agent.request('POST', 'https://example.com', Headers({'Content-Type':
['application/json']}), body)
d.addCallback(some_callback)
d.addErrback(log_ignore_network_errors)
```

[...]
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150512/0cb62105/attachment-0002.html>

From ldanielburr at me.com  Tue May 12 11:38:51 2015
From: ldanielburr at me.com (Louis D. Burr)
Date: Tue, 12 May 2015 12:38:51 -0500
Subject: [Twisted-Python] Trapping exceptions in Deferred
In-Reply-To: <CAOfeCWUwwkWzRLi7v3S0DS1ybptN71uUxfpkqzMAXQ-Cg5L-Fw@mail.gmail.com>
References: <CAOfeCWWJqV02iGwWTbg17iE6XR4+KL2hTtu5kqgbtH8MOX5_ww@mail.gmail.com>
 <672BD626-F6F9-4E5C-800D-80F168E3407D@me.com>
 <CAOfeCWUwwkWzRLi7v3S0DS1ybptN71uUxfpkqzMAXQ-Cg5L-Fw@mail.gmail.com>
Message-ID: <FD55BD40-CDBA-41F8-90A4-AFBDCCF36EFC@me.com>

Hi Mashiat,

> On May 12, 2015, at 11:48 AM, Mashiat Sarker Shakkhar <mashiat.sarker at gmail.com> wrote:
> 
[...]
> Alright. Below you can find a code snippet that is similar to my actual code. But my question is a little more generic - how do I catch exceptions that are encapsulated in a failure? If the actual exception is OpenSSL.SSL.Error, and it is wrapped in twisted.web._newclient.ResponseNeverReceived, how should my trap call look like?
> 
> ```
> imort json
> import StringIO
> from twisted.internet import reactor
> from twisted.internet.error import TimeoutError
> from twisted.web._newclient import ResponseNeverReceived
> from twisted.web.client import Agent, HTTPConnectionPool
> from twisted.web.client import FileBodyProducer
> 
> def some_callback(response):
>     pass
> 
> def log_ignore_network_errors(failure):
>     print failure.getErrorMessage()
>     failure.printTraceback()
>     failure.trap(TimeoutError, ResponseNeverReceived)
> 
> agent = Agent(reactor)
> body = FileBodyProducer(StringIO(json.dumps({'key': 'value'})))
> d = agent.request('POST', 'https://example.com <https://example.com/>', Headers({'Content-Type': ['application/json']}), body)
> d.addCallback(some_callback)
> d.addErrback(log_ignore_network_errors)
> ```

Thanks for providing the example.  Your code as presented here catches both TimeoutError and ResponseNeverReceived, so I am not sure why you think it isn’t working.  What are you seeing that indicates that the ResponseNeverReceived error is not being trapped?

As far as identifying/catching exceptions wrapped by ResponseNeverReceived, you can iterate over the “reasons” attribute (https://twistedmatrix.com/documents/current/api/twisted.web._newclient.ResponseNeverReceived.html <https://twistedmatrix.com/documents/current/api/twisted.web._newclient.ResponseNeverReceived.html>) and call either “trap” or “check” on each failure instance contained therein.

For any instance of twisted.python.failure, you can look at the “value” attribute to obtain the exception instance.

Hope this helps,

L. Daniel Burr

    
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150512/92e8dbad/attachment-0002.html>

From mashiat.sarker at gmail.com  Tue May 12 12:25:56 2015
From: mashiat.sarker at gmail.com (Mashiat Sarker Shakkhar)
Date: Tue, 12 May 2015 14:25:56 -0400
Subject: [Twisted-Python] Trapping exceptions in Deferred
In-Reply-To: <FD55BD40-CDBA-41F8-90A4-AFBDCCF36EFC@me.com>
References: <CAOfeCWWJqV02iGwWTbg17iE6XR4+KL2hTtu5kqgbtH8MOX5_ww@mail.gmail.com>
 <672BD626-F6F9-4E5C-800D-80F168E3407D@me.com>
 <CAOfeCWUwwkWzRLi7v3S0DS1ybptN71uUxfpkqzMAXQ-Cg5L-Fw@mail.gmail.com>
 <FD55BD40-CDBA-41F8-90A4-AFBDCCF36EFC@me.com>
Message-ID: <CAOfeCWUmH3_fGhVLhVODuDJs9LENXtLNpABG+m3Xq14pJAkZGA@mail.gmail.com>

On Tue, May 12, 2015 at 1:38 PM, Louis D. Burr <ldanielburr at me.com> wrote:

> Hi Mashiat,
>

[...]


> Thanks for providing the example.  Your code as presented here catches
> both TimeoutError and ResponseNeverReceived, so I am not sure why you think
> it isn’t working.  What are you seeing that indicates that the
> ResponseNeverReceived error is not being trapped?
>

Because I still see the exception in my logs. I could not find any way to
reproduce the error - so I am playing a bit of a cat-and-mouse game here.
For one thing, the log message is not very helpful. OpenSSL.SSL.Error is
just a base class and I can't get Twisted to print stack trace for
unhandled exceptions.


>
> As far as identifying/catching exceptions wrapped by
> ResponseNeverReceived, you can iterate over the “reasons” attribute (
> https://twistedmatrix.com/documents/current/api/twisted.web._newclient.ResponseNeverReceived.html)
> and call either “trap” or “check” on each failure instance contained
> therein.
>
> For any instance of twisted.python.failure, you can look at the “value”
> attribute to obtain the exception instance.
>

Thanks a lot for the explanation. Let me see if I can obtain some more
information about the issue.

Regards
Shakkhar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150512/03133ab1/attachment-0002.html>

From rgacote at appropriatesolutions.com  Tue May 12 12:31:45 2015
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Tue, 12 May 2015 14:31:45 -0400
Subject: [Twisted-Python] Twisted 15.2 Prerelease Announcement
In-Reply-To: <FF06AE8A-9FE3-4C8A-86E3-81C4FA65C63F@atleastfornow.net>
References: <FF06AE8A-9FE3-4C8A-86E3-81C4FA65C63F@atleastfornow.net>
Message-ID: <CAG5tnzoWV9F2L6+2zeqc1khqzBr70VF-HQ-PVKcTV3hLQcUcTw@mail.gmail.com>

Great news on the release and the ever forward march to more Python 3
compatibility.
I'm finally starting to move over a lot of projects to Python 3.4 and plan
to try moving my first small Twisted project in about three months.
Looking forward to digging in.
--Ray


On Mon, May 11, 2015 at 8:54 AM, HawkOwl <hawkowl at atleastfornow.net> wrote:

> Hello everyone! It's about time that the owl-themed release management
> simulation kicked into high-gear, and as such, I delivereth to you all the
> first prerelease of Twisted 15.2.
>
> Bringing not only headlining features but also a lot of incremental
> improvements, this release has got plenty to like:
>
> - twisted.logger has landed! This is a brand-new, feature-rich logging
> framework.
> - Python 3.4 is now a supported platform for all the Py3 ported modules.
> - twisted.trial.unittest.TestCase's assertEqual, assertTrue, and
> assertFalse methods now pass through the standard library's more
> informative failure messages.
> - twisted.python.filepath.FilePath now supports Unicode (text) paths
> properly, and includes as{Bytes,Text}Mode methods for interacting with APIs
> that require a text/bytes-only FilePath.
> - twisted.mail.smtp.sendmail now supports ESMTP and provides a high-level
> interface for sending mail.
> - The following parts of Twisted are now ported to Python 3:
>     - twisted.internet.process
>     - twisted.cred.credentials
>     - twisted.python.modules
>     - twisted.internet.kqreactor
>     - twisted.internet.endpoints.ProcessEndpoint
>     - twisted.web.static
>
> As usual, tarballs can be found at
> http://twistedmatrix.com/Releases/pre/15.2.0pre1/ , and the full NEWS
> file can be found at
> http://twistedmatrix.com/Releases/pre/15.2.0pre1/NEWS.txt .
>
> On a personal note, I'd like to thank Tavendo for sponsoring a majority of
> my Py3 porting work, and everyone who reviewed tickets for getting it
> landed.
>
> Please test out the new prerelease :)
>
> Twisted regards,
> Amber "Hawkie" Brown
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Raymond Cote, President
voice: +1.603.924.6079 email: rgacote at AppropriateSolutions.com skype:
ray.cote
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150512/f02e8b81/attachment-0002.html>

From radix at twistedmatrix.com  Tue May 12 13:31:49 2015
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 12 May 2015 14:31:49 -0500
Subject: [Twisted-Python] Trapping exceptions in Deferred
In-Reply-To: <CAOfeCWUmH3_fGhVLhVODuDJs9LENXtLNpABG+m3Xq14pJAkZGA@mail.gmail.com>
References: <CAOfeCWWJqV02iGwWTbg17iE6XR4+KL2hTtu5kqgbtH8MOX5_ww@mail.gmail.com>
 <672BD626-F6F9-4E5C-800D-80F168E3407D@me.com>
 <CAOfeCWUwwkWzRLi7v3S0DS1ybptN71uUxfpkqzMAXQ-Cg5L-Fw@mail.gmail.com>
 <FD55BD40-CDBA-41F8-90A4-AFBDCCF36EFC@me.com>
 <CAOfeCWUmH3_fGhVLhVODuDJs9LENXtLNpABG+m3Xq14pJAkZGA@mail.gmail.com>
Message-ID: <72142586-56A5-4FE1-BD26-696437AE58D4@twistedmatrix.com>


> On May 12, 2015, at 1:25 PM, Mashiat Sarker Shakkhar <mashiat.sarker at gmail.com> wrote:
> 
> On Tue, May 12, 2015 at 1:38 PM, Louis D. Burr <ldanielburr at me.com <mailto:ldanielburr at me.com>> wrote:
> Hi Mashiat,
>  
> [...]
>  
> Thanks for providing the example.  Your code as presented here catches both TimeoutError and ResponseNeverReceived, so I am not sure why you think it isn’t working.  What are you seeing that indicates that the ResponseNeverReceived error is not being trapped?
> 
> Because I still see the exception in my logs. I could not find any way to reproduce the error - so I am playing a bit of a cat-and-mouse game here. For one thing, the log message is not very helpful. OpenSSL.SSL.Error is just a base class and I can't get Twisted to print stack trace for unhandled exceptions.

Your code example is printing the error message and traceback _before_ you trap the failure. Are those print statements going to your logs? Could that be causing confusion?

-Chris
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150512/bcc0cb67/attachment-0002.html>

From jerryguitarist at gmail.com  Wed May 13 01:07:32 2015
From: jerryguitarist at gmail.com (Eeshan Garg)
Date: Wed, 13 May 2015 12:37:32 +0530
Subject: [Twisted-Python] Need advice on how to move to the new logging
	system
Message-ID: <CA+2gYipBKp8OK4XaThw-51T3-nQ3RBFX+m3H5DfLu22NLCaejw@mail.gmail.com>

Hello everyone!

I am aware that I have sent an email with a similar subject line before,
but this time this involves a particular ticket (<
https://twistedmatrix.com/trac/ticket/7897>) that I have submitted for
review. The ticket is about logging the log events in
twisted.internet.protocol.Factory using the new logging system, and it is
one of the first tickets about modifying existing logging statements in the
Twisted code base to use the new system.

While working on this ticket, I ran into some issues that I have summarized
in a comment on the same ticket <
https://twistedmatrix.com/trac/ticket/7897#comment:2> and it would mean a
lot to me if someone could take a look.

I recall that HawkOwl had some concerns regarding moving to the new logging
system. And so I thought that it would be better if I share my thoughts on
the mailing list as well and not just on the particular ticket, so that
anybody who is interested in sharing their concerns can do so.

Regards,
Eeshan Garg
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150513/a476076e/attachment-0002.html>

From trac at twistedmatrix.com  Sun May 17 00:05:17 2015
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 17 May 2015 06:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1431842717.5.5295728595295334096@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150517/09faa7cf/attachment-0002.html>

From christianzlong2 at gmail.com  Mon May 18 11:19:15 2015
From: christianzlong2 at gmail.com (Christian Long)
Date: Mon, 18 May 2015 12:19:15 -0500
Subject: [Twisted-Python] Twisted on Windows, parts 2 and 3
Message-ID: <CAP3KJdjtrNxwq88NY_ehVMi+2c6sWJmwtYY=RY1z_yEVSwuxDg@mail.gmail.com>

I added to my series of posts about running Twisted on Windows.

Part 2 is about virtual service accounts

http://www.christianlong.com/blog/twisted-on-windows-2015-edition-part-2.html


Part 3 is about permissions

http://www.christianlong.com/blog/twisted-on-windows-2015-edition-part-3.html


Let me know if you have any corrections or improvements.

Christian



From rgacote at appropriatesolutions.com  Mon May 18 11:46:41 2015
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Mon, 18 May 2015 13:46:41 -0400
Subject: [Twisted-Python] Twisted on Windows, parts 2 and 3
In-Reply-To: <CAP3KJdjtrNxwq88NY_ehVMi+2c6sWJmwtYY=RY1z_yEVSwuxDg@mail.gmail.com>
References: <CAP3KJdjtrNxwq88NY_ehVMi+2c6sWJmwtYY=RY1z_yEVSwuxDg@mail.gmail.com>
Message-ID: <CAG5tnzqP1NkoPJpvkC44CmQbbsLg2819iyC_xBOLrKUOGdsUnA@mail.gmail.com>

Hi Christian:

Thanks for the three great articles (turned into my lunch-time reading).
I've been running Twisted on Windows with the built-in service module for
some time now -- but it has been a pain to build both a service and
non-service version of the app. Had bookmarked NSSM for research, but I'd
not yet had time to dig into the details.

Appreciate the detailed walk-through of installation and permissions
(always a trick on modern Windows).
Looking forward to reading the three articles several more times and
working through the details as an exercise.

Regards
--Ray

On Mon, May 18, 2015 at 1:19 PM, Christian Long <christianzlong2 at gmail.com>
wrote:

> I added to my series of posts about running Twisted on Windows.
>
> Part 2 is about virtual service accounts
>
>
> http://www.christianlong.com/blog/twisted-on-windows-2015-edition-part-2.html
>
>
> Part 3 is about permissions
>
>
> http://www.christianlong.com/blog/twisted-on-windows-2015-edition-part-3.html
>
>
> Let me know if you have any corrections or improvements.
>
> Christian
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Raymond Cote, President
voice: +1.603.924.6079 email: rgacote at AppropriateSolutions.com skype:
ray.cote
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150518/92a85bb6/attachment-0002.html>

From christianzlong2 at gmail.com  Mon May 18 12:26:49 2015
From: christianzlong2 at gmail.com (Christian Long)
Date: Mon, 18 May 2015 13:26:49 -0500
Subject: [Twisted-Python] Twisted on Windows, parts 2 and 3
In-Reply-To: <CAG5tnzqP1NkoPJpvkC44CmQbbsLg2819iyC_xBOLrKUOGdsUnA@mail.gmail.com>
References: <CAP3KJdjtrNxwq88NY_ehVMi+2c6sWJmwtYY=RY1z_yEVSwuxDg@mail.gmail.com>
 <CAG5tnzqP1NkoPJpvkC44CmQbbsLg2819iyC_xBOLrKUOGdsUnA@mail.gmail.com>
Message-ID: <CAP3KJdjQ4ektG4XKF5AxXKRQZea5fAWgBASj2X2tPUfXtAfeMg@mail.gmail.com>

Thanks for the kind words, and please send any corrections or improvements.

Christian

On Mon, May 18, 2015 at 12:46 PM, Ray Cote
<rgacote at appropriatesolutions.com> wrote:
> Hi Christian:
>
> Thanks for the three great articles (turned into my lunch-time reading).
> I've been running Twisted on Windows with the built-in service module for
> some time now -- but it has been a pain to build both a service and
> non-service version of the app. Had bookmarked NSSM for research, but I'd
> not yet had time to dig into the details.
>
> Appreciate the detailed walk-through of installation and permissions (always
> a trick on modern Windows).
> Looking forward to reading the three articles several more times and working
> through the details as an exercise.
>
> Regards
> --Ray
>
> On Mon, May 18, 2015 at 1:19 PM, Christian Long <christianzlong2 at gmail.com>
> wrote:
>>
>> I added to my series of posts about running Twisted on Windows.
>>
>> Part 2 is about virtual service accounts
>>
>>
>> http://www.christianlong.com/blog/twisted-on-windows-2015-edition-part-2.html
>>
>>
>> Part 3 is about permissions
>>
>>
>> http://www.christianlong.com/blog/twisted-on-windows-2015-edition-part-3.html
>>
>>
>> Let me know if you have any corrections or improvements.
>>
>> Christian
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
>
> --
> Raymond Cote, President
> voice: +1.603.924.6079 email: rgacote at AppropriateSolutions.com skype:
> ray.cote
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From werner at thieprojects.ch  Mon May 18 15:33:18 2015
From: werner at thieprojects.ch (Werner Thie)
Date: Mon, 18 May 2015 11:33:18 -1000
Subject: [Twisted-Python] Twisted on Windows, parts 2 and 3
In-Reply-To: <CAP3KJdjtrNxwq88NY_ehVMi+2c6sWJmwtYY=RY1z_yEVSwuxDg@mail.gmail.com>
References: <CAP3KJdjtrNxwq88NY_ehVMi+2c6sWJmwtYY=RY1z_yEVSwuxDg@mail.gmail.com>
Message-ID: <555A5A9E.90705@thieprojects.ch>

On 18/05/15 07:19, Christian Long wrote:
> I added to my series of posts about running Twisted on Windows.
>
> Part 2 is about virtual service accounts
>
> http://www.christianlong.com/blog/twisted-on-windows-2015-edition-part-2.html
>
>
> Part 3 is about permissions
>
> http://www.christianlong.com/blog/twisted-on-windows-2015-edition-part-3.html
>
>
> Let me know if you have any corrections or improvements.
>
> Christian
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

Hi Christian

thanks for your great articles, all the services I had to deploy on MSW 
I did with the help of NSSM, but didn't find the time to write it up so 
neatly.

Maholo nui, Werner



From hawkowl at atleastfornow.net  Tue May 19 00:14:45 2015
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Tue, 19 May 2015 14:14:45 +0800
Subject: [Twisted-Python] Twisted 15.2 Release Announcement
Message-ID: <EE0847B2-0F6E-4B21-A582-BE754B824A90@atleastfornow.net>

On behalf of Twisted Matrix Labs, I'm honoured to announce the release of Twisted 15.2.

Bringing not only headlining features but also a lot of incremental improvements, this release has got plenty to like:

- twisted.logger has landed! This is a brand-new, feature-rich logging framework.
- Python 3.4 is now a supported platform for all the Py3 ported modules.
- twisted.trial.unittest.TestCase's assertEqual, assertTrue, and assertFalse methods now pass through the standard library's more informative failure messages.
- twisted.python.filepath.FilePath now supports Unicode (text) paths properly, and includes as{Bytes,Text}Mode methods for interacting with APIs that require a text/bytes-only FilePath.
- twisted.mail.smtp.sendmail now supports ESMTP and provides a high-level interface for sending mail.
- The following parts of Twisted are now ported to Python 3:
   - twisted.internet.process
   - twisted.cred.credentials
   - twisted.python.modules
   - twisted.internet.kqreactor
   - twisted.internet.endpoints.ProcessEndpoint
   - twisted.web.static
- Over 50 tickets closed since 15.1.

You can find the downloads at https://pypi.python.org/pypi/Twisted (or alternatively http://twistedmatrix.com/trac/wiki/Downloads).

Many thanks to everyone who had a part in this release - the supporters of the Twisted Software Foundation, the developers who contributed code as well as documentation, and all the people building great things with Twisted!

Twisted Regards,
HawkOwl
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20150519/0f8c395b/attachment.sig>

From glyph at twistedmatrix.com  Tue May 19 02:43:06 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 19 May 2015 01:43:06 -0700
Subject: [Twisted-Python] Twisted on Windows, parts 2 and 3
In-Reply-To: <CAP3KJdjtrNxwq88NY_ehVMi+2c6sWJmwtYY=RY1z_yEVSwuxDg@mail.gmail.com>
References: <CAP3KJdjtrNxwq88NY_ehVMi+2c6sWJmwtYY=RY1z_yEVSwuxDg@mail.gmail.com>
Message-ID: <CDF23BC7-36E6-4CA8-8D59-5612151CAE94@twistedmatrix.com>

> On May 18, 2015, at 10:19, Christian Long <christianzlong2 at gmail.com> wrote:
> 
> I added to my series of posts about running Twisted on Windows.

Thanks again for writing these up, Christian!

-g


From wsanchez at wsanchez.net  Tue May 19 04:50:06 2015
From: wsanchez at wsanchez.net (=?utf-8?Q?Wilfredo_S=C3=A1nchez_Vega?=)
Date: Tue, 19 May 2015 13:50:06 +0300
Subject: [Twisted-Python] trial internals help?
Message-ID: <1F61BB80-9982-4648-91B4-E1B5784A1A6C@wsanchez.net>

  I took a stab at porting trial to use twisted.logger (http://tm.tl/7863) but I have a test failing:

	twisted.trial.test.test_reporter.TestErrorReporting.test_hiddenException

  I don’t quite know what that test is doing.  I added some additional output on my branch (branches/log-trial-7863) but that didn’t make me any smarter.

  Is anyone familiar with this code able to explain how I may have broken it?

	-wsv




From exarkun at twistedmatrix.com  Tue May 19 05:31:13 2015
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 19 May 2015 11:31:13 -0000
Subject: [Twisted-Python] trial internals help?
In-Reply-To: <1F61BB80-9982-4648-91B4-E1B5784A1A6C@wsanchez.net>
References: <1F61BB80-9982-4648-91B4-E1B5784A1A6C@wsanchez.net>
Message-ID: <20150519113113.21155.1818683239.divmod.xquotient.21@top>

On 10:50 am, wsanchez at wsanchez.net wrote:
>  I took a stab at porting trial to use twisted.logger 
>(http://tm.tl/7863) but I have a test failing:
>
>twisted.trial.test.test_reporter.TestErrorReporting.test_hiddenException
>
>  I don’t quite know what that test is doing.  I added some additional 
>output on my branch (branches/log-trial-7863) but that didn’t make me 
>any smarter.
>
>  Is anyone familiar with this code able to explain how I may have 
>broken it?
>
>         -wsv

Hi Wilfredo,

This looks like a test for the logging done in the implementation of 
`IReactorTime`.

The test runs another test, `testHiddenException`. 
`testHiddenException` uses `reactor.callLater` to run a function that 
raises an exception.  Then `testHiddenException` does a horrible thing 
to the reactor to make the delayed call run (and thus raise the 
exception which it then expects to be attributed to the running test as 
an error).  Then it *also* fails the test - I suppose because at some 
point there was a bug where "failure" results interfered with "error" 
results somehow.

I don't see how this test is particularly different from one like:

    def test_hiddenException(self):
        try:
            raise SomeException()
        except:
            log.deferr()
        self.fail("something else")

Does your branch need to port the `IReactorTime` exception handling to 
the new logging API?  Or maybe it needs to port the way Trial itself 
integrates with the logging system so that it can observe failures like 
this one?

Jean-Paul



From zadka.moshe at gmail.com  Tue May 19 06:07:23 2015
From: zadka.moshe at gmail.com (Moshe Zadka)
Date: Tue, 19 May 2015 12:07:23 +0000
Subject: [Twisted-Python] Multiple plugins in "twistd"
Message-ID: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>

Background

Currently, "twistd" assumes one-run-one-plugin. It would be nice to load up
multiple plug-ins in Twisted, for many reasons. These include: serving the
same in-memory content via separate protocols, adding manhole to other
plug-ins (so the end-deployer can add it to other things, as opposed to the
original implementor, and a catch-all category of "auxiliary services".

Auxiliary services are those which are not useful in and of themselves, but
add value to a service which does something else of use.

Examples of auxiliary services -- a logging service (that connects to some
logging protocol on start-up), a metrics service (that sends statistics to
a collector like statsd or riemann) or an error-sending service (to
something like Sentry).

Proposal

tl;dr: four new tickets (codenamed SUBCOMMANDS, SERVICES, MANHOLE and
PROVIDERS) and one old ticket (3538)

SUBCOMMANDS: Add '+' as a special character in t.p.usage.Options. This
behavior will be off by default, and controlled by an attribute on the
Options instance "allowMultipleSubcommands".

The attribute will only be checked when the first sub-command starts, to
allow setting it based on global flags. When the option is on, '-+' will be
passed as '+' to the Options instance, to allow sending plain '+' to
sub-commands.

Glyph thinks there's a ticket for it. I couldn't find it in "search for
tickets in 'core' whose description mentionds 'command'". Unless anyone can
find it, I'll open a new ticket.

SERVICES (depends on SUBCOMMANDS): In twistd, set the flag aMS if
'--allow-multiple-services' is given. Add to the application all services.

3538 (depends on SERVICES): If '--allow-multiple-services' is given, and
'--python <.tac file>' is given, process subcommands as usual.

PROVIDERS: Add a function,
       "providersInHierarchy(IService, IInterface) -> List[IInterface]"
that returns all services in the hierarchy which provide the interface.
This ticket does not depend on any other tickets.

MANHOLE (depends on PROVIDERS, SERVICES): Add a built-in twistd plugin
named "manhole". The plugin will expose manhole as PB/telnet with a
namespace that includes
  {'services': providersInHierarchy(manholeService, IService)}
This ticket technically could only depend on PROVIDERS, but to be useful,
it also depends on SERVICES
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150519/267e6213/attachment-0002.html>

From exarkun at twistedmatrix.com  Tue May 19 06:59:21 2015
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 19 May 2015 12:59:21 -0000
Subject: [Twisted-Python] Multiple plugins in "twistd"
In-Reply-To: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
References: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
Message-ID: <20150519125921.21155.2042175335.divmod.xquotient.100@top>

On 12:07 pm, zadka.moshe at gmail.com wrote:
>Background
>
>Currently, "twistd" assumes one-run-one-plugin. It would be nice to 
>load up
>multiple plug-ins in Twisted, for many reasons. These include: serving 
>the
>same in-memory content via separate protocols, adding manhole to other
>plug-ins (so the end-deployer can add it to other things, as opposed to 
>the
>original implementor, and a catch-all category of "auxiliary services".
>
>Auxiliary services are those which are not useful in and of themselves, 
>but
>add value to a service which does something else of use.
>
>Examples of auxiliary services -- a logging service (that connects to 
>some
>logging protocol on start-up), a metrics service (that sends statistics 
>to
>a collector like statsd or riemann) or an error-sending service (to
>something like Sentry).
>
>Proposal
>
>tl;dr: four new tickets (codenamed SUBCOMMANDS, SERVICES, MANHOLE and
>PROVIDERS) and one old ticket (3538)
>
>SUBCOMMANDS: Add '+' as a special character in t.p.usage.Options. This
>behavior will be off by default, and controlled by an attribute on the
>Options instance "allowMultipleSubcommands".
>
>The attribute will only be checked when the first sub-command starts, 
>to
>allow setting it based on global flags. When the option is on, '-+' 
>will be
>passed as '+' to the Options instance, to allow sending plain '+' to
>sub-commands.

Having a new, weird, fragile syntax is probably the least interesting 
part of this.  I suggest not doing this part - or at the very least, not 
doing it first and not making it a general part of `Options`.

There are lots of other ways to get the service object from more than 
one service plugin.  For example, read lines from a file.  Or have a 
variation of `--python` or something else similar using the existing 
option syntax `Options` supports.

The more interesting part to get right is the underlying model which you 
discuss elsewhere.
>
>Glyph thinks there's a ticket for it. I couldn't find it in "search for
>tickets in 'core' whose description mentionds 'command'". Unless anyone 
>can
>find it, I'll open a new ticket.

I think there is a ticket for being able to use multiple twistd plugins. 
I don't think there's a ticket for a general change to `Options`.
>
>SERVICES (depends on SUBCOMMANDS): In twistd, set the flag aMS if
>'--allow-multiple-services' is given. Add to the application all 
>services.

If you skip the `SUBCOMMANDS` ticket described above, then you can skip 
this too.
>3538 (depends on SERVICES): If '--allow-multiple-services' is given, 
>and
>'--python <.tac file>' is given, process subcommands as usual.

Or just process the tac file and the subcommand if they're both given - 
without requiring an extra option?  The current behavior, "silently 
ignore one of the arguments", doesn't seem particularly worth keeping to 
me.
>PROVIDERS: Add a function,
>       "providersInHierarchy(IService, IInterface) -> List[IInterface]"
>that returns all services in the hierarchy which provide the interface.
>This ticket does not depend on any other tickets.

The first argument needs to be `IServiceCollection` instead of 
`IService`.
>MANHOLE (depends on PROVIDERS, SERVICES): Add a built-in twistd plugin
>named "manhole". The plugin will expose manhole as PB/telnet with a
>namespace that includes
>  {'services': providersInHierarchy(manholeService, IService)}
>This ticket technically could only depend on PROVIDERS, but to be 
>useful,
>it also depends on SERVICES

Manhole is part of Conch now and the telnet manhole is deprecated (and 
the PB manhole really should be deprecated - using a structured protocol 
for manhole isn't a bad idea but the existing implementation is half 
broken, mostly untested, exposes tons of implementation details as part 
of the public interface, etc.  If this were a piece of widely used 
software it would probably be worth gradually renovating - but it's 
basically used by no one so starting fresh makes more sense).

So it's part of Conch.  And ... it exists already.  I'm pretty sure no 
one will object if you add a new name to the default namespace.

Thanks for taking this on.

Jean-Paul



From jerryguitarist at gmail.com  Tue May 19 10:38:18 2015
From: jerryguitarist at gmail.com (Eeshan Garg)
Date: Tue, 19 May 2015 22:08:18 +0530
Subject: [Twisted-Python] Need advice on how to move further with ticket 7897
Message-ID: <CA+2gYioDgfddT-NTrvk_yw4Z4V37mSPTpY0ck1vNwEAV+OhnjQ@mail.gmail.com>

Hi!

I filed a ticket (Log the log events in twisted.internet.protocol.Factory
using the new logging system <https://twistedmatrix.com/trac/ticket/7897>)
and I have also submitted a patch for it. However, while working on the
patch, I had some concerns that I have already summarized in a ticket
comment. I would really appreciate it if someone could please take a look
and give me some advice as to how to move further with this ticket so that
I can start working on other patches for porting to twisted.logger. :-)

About a week ago, I sent a similar email to the mailing list (quoted
below), but did not get a reply, so I thought I would send another one.

On Wed, May 13, 2015 at 12:37 PM, Eeshan Garg <jerryguitarist at gmail.com>
wrote:

> Hello everyone!
>
> I am aware that I have sent an email with a similar subject line before,
> but this time this involves a particular ticket (<
> https://twistedmatrix.com/trac/ticket/7897>) that I have submitted for
> review. The ticket is about logging the log events in
> twisted.internet.protocol.Factory using the new logging system, and it is
> one of the first tickets about modifying existing logging statements in the
> Twisted code base to use the new system.
>
> While working on this ticket, I ran into some issues that I have
> summarized in a comment on the same ticket <
> https://twistedmatrix.com/trac/ticket/7897#comment:2> and it would mean a
> lot to me if someone could take a look.
>
> I recall that HawkOwl had some concerns regarding moving to the new
> logging system. And so I thought that it would be better if I share my
> thoughts on the mailing list as well and not just on the particular ticket,
> so that anybody who is interested in sharing their concerns can do so.
>
> Regards,
> Eeshan Garg
>

Let me know what you think!

Thanks & regards,
Eeshan Garg
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150519/9222e734/attachment-0002.html>

From glyph at twistedmatrix.com  Tue May 19 13:02:20 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 19 May 2015 12:02:20 -0700
Subject: [Twisted-Python] Multiple plugins in "twistd"
In-Reply-To: <20150519125921.21155.2042175335.divmod.xquotient.100@top>
References: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
 <20150519125921.21155.2042175335.divmod.xquotient.100@top>
Message-ID: <1DBE6BD3-AA90-405E-8A67-E6DC0DA8D9D4@twistedmatrix.com>


> On May 19, 2015, at 05:59, exarkun at twistedmatrix.com wrote:
> 
> On 12:07 pm, zadka.moshe at gmail.com wrote:
>> Background
>> 
>> Currently, "twistd" assumes one-run-one-plugin. It would be nice to load up
>> multiple plug-ins in Twisted, for many reasons. These include: serving the
>> same in-memory content via separate protocols, adding manhole to other
>> plug-ins (so the end-deployer can add it to other things, as opposed to the
>> original implementor, and a catch-all category of "auxiliary services".
>> 
>> Auxiliary services are those which are not useful in and of themselves, but
>> add value to a service which does something else of use.
>> 
>> Examples of auxiliary services -- a logging service (that connects to some
>> logging protocol on start-up), a metrics service (that sends statistics to
>> a collector like statsd or riemann) or an error-sending service (to
>> something like Sentry).
>> 
>> Proposal
>> 
>> tl;dr: four new tickets (codenamed SUBCOMMANDS, SERVICES, MANHOLE and
>> PROVIDERS) and one old ticket (3538)
>> 
>> SUBCOMMANDS: Add '+' as a special character in t.p.usage.Options. This
>> behavior will be off by default, and controlled by an attribute on the
>> Options instance "allowMultipleSubcommands".
>> 
>> The attribute will only be checked when the first sub-command starts, to
>> allow setting it based on global flags. When the option is on, '-+' will be
>> passed as '+' to the Options instance, to allow sending plain '+' to
>> sub-commands.
> 
> Having a new, weird, fragile syntax is probably the least interesting part of this.  I suggest not doing this part - or at the very least, not doing it first and not making it a general part of `Options`.
> 
> There are lots of other ways to get the service object from more than one service plugin.  For example, read lines from a file.  Or have a variation of `--python` or something else similar using the existing option syntax `Options` supports.
> 
> The more interesting part to get right is the underlying model which you discuss elsewhere.

I love new, weird syntaxes, but I have to agree here.  Let's do it with a boring syntax with no compatibility implications first.  The boring syntax would actually be quite similar to the exciting one; a "compose" plugin.  Consider: "twistd compose web --path . + words --irc-port=6789".  There's no need to make this a general feature of Options to do it this way; just have the "compose" plugin take its argument list and pass it to two discrete other Options instances as lists of strings, looking for a "+" simply as the place to split the argument list.  You could also find some other way to split the argument list but "+" doesn't seem particularly obscure in this context to me.  (If there's really a need to pass a literal "+" to a plugin we could add an escaping syntax as well.)

>> Glyph thinks there's a ticket for it. I couldn't find it in "search for
>> tickets in 'core' whose description mentionds 'command'". Unless anyone can
>> find it, I'll open a new ticket.
> 
> I think there is a ticket for being able to use multiple twistd plugins. I don't think there's a ticket for a general change to `Options`.

I was referring to the multiple-twistd-plugin ticket.

>> SERVICES (depends on SUBCOMMANDS): In twistd, set the flag aMS if
>> '--allow-multiple-services' is given. Add to the application all services.
> 
> If you skip the `SUBCOMMANDS` ticket described above, then you can skip this too.
>> 3538 (depends on SERVICES): If '--allow-multiple-services' is given, and
>> '--python <.tac file>' is given, process subcommands as usual.
> 
> Or just process the tac file and the subcommand if they're both given - without requiring an extra option?  The current behavior, "silently ignore one of the arguments", doesn't seem particularly worth keeping to me.

It seems halfway plausible to me that someone could have some automation that chooses a plugin and/or a python file and expects that one or the other will be ignored.  So we should do the usual incompatibility-notification dance but I don't anticipate any objections.

>> PROVIDERS: Add a function,
>>      "providersInHierarchy(IService, IInterface) -> List[IInterface]"
>> that returns all services in the hierarchy which provide the interface.
>> This ticket does not depend on any other tickets.
> 
> The first argument needs to be `IServiceCollection` instead of `IService`.
>> MANHOLE (depends on PROVIDERS, SERVICES): Add a built-in twistd plugin
>> named "manhole". The plugin will expose manhole as PB/telnet with a
>> namespace that includes
>> {'services': providersInHierarchy(manholeService, IService)}
>> This ticket technically could only depend on PROVIDERS, but to be useful,
>> it also depends on SERVICES
> 
> Manhole is part of Conch now and the telnet manhole is deprecated (and the PB manhole really should be deprecated - using a structured protocol for manhole isn't a bad idea but the existing implementation is half broken, mostly untested, exposes tons of implementation details as part of the public interface, etc.  If this were a piece of widely used software it would probably be worth gradually renovating - but it's basically used by no one so starting fresh makes more sense).
> 
> So it's part of Conch.  And ... it exists already.  I'm pretty sure no one will object if you add a new name to the default namespace.
> 
> Thanks for taking this on.

Yeah.  It's great to have you around again, Moshe :).

-glyph




From tom.prince at ualberta.net  Tue May 19 15:01:54 2015
From: tom.prince at ualberta.net (Tom Prince)
Date: Tue, 19 May 2015 15:01:54 -0600
Subject: [Twisted-Python] Multiple plugins in "twistd"
In-Reply-To: <1DBE6BD3-AA90-405E-8A67-E6DC0DA8D9D4@twistedmatrix.com>
References: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
 <20150519125921.21155.2042175335.divmod.xquotient.100@top>
 <1DBE6BD3-AA90-405E-8A67-E6DC0DA8D9D4@twistedmatrix.com>
Message-ID: <87wq04mgcd.fsf@hermes.hocat.ca>

Glyph <glyph at twistedmatrix.com> writes:

> You could also find some other way to split the argument list but "+" doesn't seem particularly obscure in this context to me.  (If there's really a need to pass a literal "+" to a plugin we could add an escaping syntax as well.)

I think if we are adding syntax, then we should also add escaping at the
same time.

On a related note, when designing this kind of syntax, I think it is
often valuable to explictly leave some of the space as an explict error,
to leave freedom to extend the syntax in the future.

I wonder if there is any value in having a syntax that is nestable. I
don't see any specific use case, but I can imagine wanting ot pass
options to `compose` that are scoped to an individual plugin that it is
loading. And then, maybe you want to nest things so that those options
apply to a subset of plugins, which might naturally be implemented as
compos of a compose.

The suggestions in the last paragraph are perhaps somewhat contrived,
and certainly not something that should be *implemnted* in a first (or
even second pass). But considering the possiblity, and then picking a
syntax that might allow those kinds of extension (and then explictly
making the extension syntax an error) gives us the ability to add those
features without breaking backwards compatibility.

  Tom



From glyph at twistedmatrix.com  Tue May 19 15:35:44 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 19 May 2015 14:35:44 -0700
Subject: [Twisted-Python] Multiple plugins in "twistd"
In-Reply-To: <87wq04mgcd.fsf@hermes.hocat.ca>
References: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
 <20150519125921.21155.2042175335.divmod.xquotient.100@top>
 <1DBE6BD3-AA90-405E-8A67-E6DC0DA8D9D4@twistedmatrix.com>
 <87wq04mgcd.fsf@hermes.hocat.ca>
Message-ID: <56F1BE0D-0862-4C21-A873-7EDAB7EEAD5B@twistedmatrix.com>


> On May 19, 2015, at 14:01, Tom Prince <tom.prince at ualberta.net> wrote:
> 
> Glyph <glyph at twistedmatrix.com> writes:
> 
>> You could also find some other way to split the argument list but "+" doesn't seem particularly obscure in this context to me.  (If there's really a need to pass a literal "+" to a plugin we could add an escaping syntax as well.)
> 
> I think if we are adding syntax, then we should also add escaping at the
> same time.
> 
> On a related note, when designing this kind of syntax, I think it is
> often valuable to explictly leave some of the space as an explict error,
> to leave freedom to extend the syntax in the future.
> 
> I wonder if there is any value in having a syntax that is nestable. I
> don't see any specific use case, but I can imagine wanting ot pass
> options to `compose` that are scoped to an individual plugin that it is
> loading. And then, maybe you want to nest things so that those options
> apply to a subset of plugins, which might naturally be implemented as
> compos of a compose.
> 
> The suggestions in the last paragraph are perhaps somewhat contrived,
> and certainly not something that should be *implemnted* in a first (or
> even second pass). But considering the possiblity, and then picking a
> syntax that might allow those kinds of extension (and then explictly
> making the extension syntax an error) gives us the ability to add those
> features without breaking backwards compatibility.

We can un-escape '\+' as a token just fine, and if we do that, all of the weird use-cases you just described are possible.  I can't think of any options I'd want to pass to 'compose' myself, but it would be easy enough to add some flags to its parser.

-g




From farhan-twistedlistserv at offmail.us  Tue May 19 16:46:29 2015
From: farhan-twistedlistserv at offmail.us (Farhan Khan)
Date: Tue, 19 May 2015 18:46:29 -0400
Subject: [Twisted-Python] HTTP and SSH over SOCKS5
Message-ID: <7f22b23969c23ed13d434e3845e6c449@mail.offmail.us>

Hi,

I am working on a project that will require running several HTTP 
connections over a list of SOCKS5 proxies. I have found a lot of sample 
code that runs HTTP over a regular TCP socket, but none that demonstrate 
the functionality over SOCKS5. Is this possible in Twisted or would it 
have to be a protocol I would independently develop?

I plan on doing something similar to SSH, so it would be nice if the 
SOCKS5 module simply replaced the TCP socket's send/recv functions so 
that I could easily port the code over to SSH.

If I have to figure out SSH separately, that's okay. For starters just 
HTTP would be nice.

Thanks!
- Farhan




From zadka.moshe at gmail.com  Tue May 19 20:41:21 2015
From: zadka.moshe at gmail.com (Moshe Zadka)
Date: Wed, 20 May 2015 02:41:21 +0000
Subject: [Twisted-Python] Multiple plugins in "twistd"
In-Reply-To: <56F1BE0D-0862-4C21-A873-7EDAB7EEAD5B@twistedmatrix.com>
References: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
 <20150519125921.21155.2042175335.divmod.xquotient.100@top>
 <1DBE6BD3-AA90-405E-8A67-E6DC0DA8D9D4@twistedmatrix.com>
 <87wq04mgcd.fsf@hermes.hocat.ca>
 <56F1BE0D-0862-4C21-A873-7EDAB7EEAD5B@twistedmatrix.com>
Message-ID: <CAOA_4jAy8Lu1=y=ehrQc+ab4vQjgNifJM02ZEGvnzvo7WQHfMw@mail.gmail.com>

OK, so let me once again enumerate the tickets I'm going to open, because
it seems like we're reaching consensus:

[1] PROVIDES (pretty much as written: exarkun -- the idea is to walk up the
hierarchy and then back down, so I did mean IService -- go up until you
find a root, then go down and get all descendents)
[2] 3538 -- will do it with a flag to turn on .tac + plugin
[2.1] I'm assuming the deprecation dance is "flag to turn on" -> "flag to
turn on + warn if .tac+plugin and no flag" -> "make flag no-op" -> "warn on
flag" -> "remove flag". If someone doesn't want this dance, please let me
know preferred alternatives.
[3] MAKE -- API for "createServiceFromNameAndOptions" (basically,
compose-as-a-library)
[4] COMPOSE (implements twistd_compose plugin)

I think there's at least rough consensus that these four pieces are useful,
even if there's still some disagreement on the details, so maybe the next
step is to open the three to-be-opened tickets, and then to discuss the
details on the tickets. I'm going to do the ticket opening tomorrow, and
maybe even work on them during the SF Python Meetup (anyone in SF -- you
should [a] go and [b] say hi also [c] optionally, help me with that).

If anyone has serious objections to this plan, let me know!

Thanks,
Moshe Z.

On Tue, May 19, 2015 at 2:35 PM Glyph <glyph at twistedmatrix.com> wrote:

>
> > On May 19, 2015, at 14:01, Tom Prince <tom.prince at ualberta.net> wrote:
> >
> > Glyph <glyph at twistedmatrix.com> writes:
> >
> >> You could also find some other way to split the argument list but "+"
> doesn't seem particularly obscure in this context to me.  (If there's
> really a need to pass a literal "+" to a plugin we could add an escaping
> syntax as well.)
> >
> > I think if we are adding syntax, then we should also add escaping at the
> > same time.
> >
> > On a related note, when designing this kind of syntax, I think it is
> > often valuable to explictly leave some of the space as an explict error,
> > to leave freedom to extend the syntax in the future.
> >
> > I wonder if there is any value in having a syntax that is nestable. I
> > don't see any specific use case, but I can imagine wanting ot pass
> > options to `compose` that are scoped to an individual plugin that it is
> > loading. And then, maybe you want to nest things so that those options
> > apply to a subset of plugins, which might naturally be implemented as
> > compos of a compose.
> >
> > The suggestions in the last paragraph are perhaps somewhat contrived,
> > and certainly not something that should be *implemnted* in a first (or
> > even second pass). But considering the possiblity, and then picking a
> > syntax that might allow those kinds of extension (and then explictly
> > making the extension syntax an error) gives us the ability to add those
> > features without breaking backwards compatibility.
>
> We can un-escape '\+' as a token just fine, and if we do that, all of the
> weird use-cases you just described are possible.  I can't think of any
> options I'd want to pass to 'compose' myself, but it would be easy enough
> to add some flags to its parser.
>
> -g
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150520/dcd432b5/attachment-0002.html>

From glyph at twistedmatrix.com  Tue May 19 22:21:54 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 19 May 2015 21:21:54 -0700
Subject: [Twisted-Python] HTTP and SSH over SOCKS5
In-Reply-To: <7f22b23969c23ed13d434e3845e6c449@mail.offmail.us>
References: <7f22b23969c23ed13d434e3845e6c449@mail.offmail.us>
Message-ID: <2440AF91-B415-49F2-947A-F4C67A00E001@twistedmatrix.com>


> On May 19, 2015, at 15:46, Farhan Khan <farhan-twistedlistserv at offmail.us> wrote:
> 
> Hi,
> 
> I am working on a project that will require running several HTTP connections over a list of SOCKS5 proxies. I have found a lot of sample code that runs HTTP over a regular TCP socket, but none that demonstrate the functionality over SOCKS5. Is this possible in Twisted or would it have to be a protocol I would independently develop?
> 
> I plan on doing something similar to SSH, so it would be nice if the SOCKS5 module simply replaced the TCP socket's send/recv functions so that I could easily port the code over to SSH.
> 
> If I have to figure out SSH separately, that's okay. For starters just HTTP would be nice.

Have you investigated and read the docs for https://github.com/habnabit/txsocksx <https://github.com/habnabit/txsocksx> ?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150519/d70241fa/attachment-0002.html>

From psi29a at gmail.com  Wed May 20 01:01:23 2015
From: psi29a at gmail.com (bret curtis)
Date: Wed, 20 May 2015 09:01:23 +0200
Subject: [Twisted-Python] Twisted 15.2 Release Announcement
In-Reply-To: <EE0847B2-0F6E-4B21-A582-BE754B824A90@atleastfornow.net>
References: <EE0847B2-0F6E-4B21-A582-BE754B824A90@atleastfornow.net>
Message-ID: <CA+LhZ98gA-GOYEqAzXw9EJrta=B_=K+tjTxjb+njjWfZdoeTjg@mail.gmail.com>

Great job! :)

Cheers,
Bret

On Tue, May 19, 2015 at 8:14 AM, HawkOwl <hawkowl at atleastfornow.net> wrote:

> On behalf of Twisted Matrix Labs, I'm honoured to announce the release of
> Twisted 15.2.
>
> Bringing not only headlining features but also a lot of incremental
> improvements, this release has got plenty to like:
>
> - twisted.logger has landed! This is a brand-new, feature-rich logging
> framework.
> - Python 3.4 is now a supported platform for all the Py3 ported modules.
> - twisted.trial.unittest.TestCase's assertEqual, assertTrue, and
> assertFalse methods now pass through the standard library's more
> informative failure messages.
> - twisted.python.filepath.FilePath now supports Unicode (text) paths
> properly, and includes as{Bytes,Text}Mode methods for interacting with APIs
> that require a text/bytes-only FilePath.
> - twisted.mail.smtp.sendmail now supports ESMTP and provides a high-level
> interface for sending mail.
> - The following parts of Twisted are now ported to Python 3:
>    - twisted.internet.process
>    - twisted.cred.credentials
>    - twisted.python.modules
>    - twisted.internet.kqreactor
>    - twisted.internet.endpoints.ProcessEndpoint
>    - twisted.web.static
> - Over 50 tickets closed since 15.1.
>
> You can find the downloads at https://pypi.python.org/pypi/Twisted (or
> alternatively http://twistedmatrix.com/trac/wiki/Downloads).
>
> Many thanks to everyone who had a part in this release - the supporters of
> the Twisted Software Foundation, the developers who contributed code as
> well as documentation, and all the people building great things with
> Twisted!
>
> Twisted Regards,
> HawkOwl
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150520/dd19eae2/attachment-0002.html>

From techtonik at gmail.com  Wed May 20 01:16:54 2015
From: techtonik at gmail.com (anatoly techtonik)
Date: Wed, 20 May 2015 10:16:54 +0300
Subject: [Twisted-Python] Twisted 15.2 Release Announcement
In-Reply-To: <EE0847B2-0F6E-4B21-A582-BE754B824A90@atleastfornow.net>
References: <EE0847B2-0F6E-4B21-A582-BE754B824A90@atleastfornow.net>
Message-ID: <CAPkN8x+2oNXENN4NBDhz8oGoakZciBnGLYsuCRg8rbbNZFq7_w@mail.gmail.com>

On Tue, May 19, 2015 at 9:14 AM, HawkOwl <hawkowl at atleastfornow.net> wrote:
> - twisted.logger has landed! This is a brand-new, feature-rich logging framework.

https://twisted.readthedocs.org/en/latest/core/howto/logger.html?highlight=logger

Good stuff.



From hawkowl at atleastfornow.net  Wed May 20 02:22:14 2015
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Wed, 20 May 2015 16:22:14 +0800
Subject: [Twisted-Python] Twisted 15.2.1 Prerelease Announcement
Message-ID: <357F8FD4-5E08-4E8A-8DD8-1126DA398FF7@atleastfornow.net>

Hi everyone!

Twisted 15.2 has some minor regressions in the logging framework. These issues are fixed in 15.2.1, of which this is the prerelease of.

You can get the tarballs and the changelog from http://twistedmatrix.com/Releases/pre/15.2.1pre1/.

Please test it out, and if there's no issues, 15.2.1 will be released before the week's end.

- Hawkie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20150520/68cfe646/attachment.sig>

From exarkun at twistedmatrix.com  Wed May 20 05:08:32 2015
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 20 May 2015 11:08:32 -0000
Subject: [Twisted-Python] Multiple plugins in "twistd"
In-Reply-To: <CAOA_4jAy8Lu1=y=ehrQc+ab4vQjgNifJM02ZEGvnzvo7WQHfMw@mail.gmail.com>
References: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
 <20150519125921.21155.2042175335.divmod.xquotient.100@top>
 <1DBE6BD3-AA90-405E-8A67-E6DC0DA8D9D4@twistedmatrix.com>
 <87wq04mgcd.fsf@hermes.hocat.ca>
 <56F1BE0D-0862-4C21-A873-7EDAB7EEAD5B@twistedmatrix.com>
 <CAOA_4jAy8Lu1=y=ehrQc+ab4vQjgNifJM02ZEGvnzvo7WQHfMw@mail.gmail.com>
Message-ID: <20150520110832.21155.74837950.divmod.xquotient.107@top>

On 02:41 am, zadka.moshe at gmail.com wrote:
>OK, so let me once again enumerate the tickets I'm going to open, 
>because
>it seems like we're reaching consensus:
>
>[1] PROVIDES (pretty much as written: exarkun -- the idea is to walk up 
>the
>hierarchy and then back down, so I did mean IService -- go up until you
>find a root, then go down and get all descendents)

Oops.  You can't get children *or* a parent from IService.  But you can 
at least get children from IServiceCollection.

Jean-Paul
>[2] 3538 -- will do it with a flag to turn on .tac + plugin
>[2.1] I'm assuming the deprecation dance is "flag to turn on" -> "flag 
>to
>turn on + warn if .tac+plugin and no flag" -> "make flag no-op" -> 
>"warn on
>flag" -> "remove flag". If someone doesn't want this dance, please let 
>me
>know preferred alternatives.

Glyph referred to the alternative.  Here it is fully spelled out:

https://twistedmatrix.com/trac/wiki/CompatibilityPolicy#ProcedureforExceptionstothisPolicy

Alternatively, do it the nice way but not *quite* as you described:

  * Make a new flag like --python but that combines with plugins.
  * Deprecate --python
  * Remove --python

Three steps instead of five and only bother the user once instead of 
twice.

Thanks!

Jean-Paul
>[3] MAKE -- API for "createServiceFromNameAndOptions" (basically,
>compose-as-a-library)
>[4] COMPOSE (implements twistd_compose plugin)
>
>I think there's at least rough consensus that these four pieces are 
>useful,
>even if there's still some disagreement on the details, so maybe the 
>next
>step is to open the three to-be-opened tickets, and then to discuss the
>details on the tickets. I'm going to do the ticket opening tomorrow, 
>and
>maybe even work on them during the SF Python Meetup (anyone in SF -- 
>you
>should [a] go and [b] say hi also [c] optionally, help me with that).
>
>If anyone has serious objections to this plan, let me know!
>
>Thanks,
>Moshe Z.
>
>On Tue, May 19, 2015 at 2:35 PM Glyph <glyph at twistedmatrix.com> wrote:
>>
>> > On May 19, 2015, at 14:01, Tom Prince <tom.prince at ualberta.net> 
>>wrote:
>> >
>> > Glyph <glyph at twistedmatrix.com> writes:
>> >
>> >> You could also find some other way to split the argument list but 
>>"+"
>>doesn't seem particularly obscure in this context to me.  (If there's
>>really a need to pass a literal "+" to a plugin we could add an 
>>escaping
>>syntax as well.)
>> >
>> > I think if we are adding syntax, then we should also add escaping at 
>>the
>> > same time.
>> >
>> > On a related note, when designing this kind of syntax, I think it is
>> > often valuable to explictly leave some of the space as an explict 
>>error,
>> > to leave freedom to extend the syntax in the future.
>> >
>> > I wonder if there is any value in having a syntax that is nestable. 
>>I
>> > don't see any specific use case, but I can imagine wanting ot pass
>> > options to `compose` that are scoped to an individual plugin that it 
>>is
>> > loading. And then, maybe you want to nest things so that those 
>>options
>> > apply to a subset of plugins, which might naturally be implemented 
>>as
>> > compos of a compose.
>> >
>> > The suggestions in the last paragraph are perhaps somewhat 
>>contrived,
>> > and certainly not something that should be *implemnted* in a first 
>>(or
>> > even second pass). But considering the possiblity, and then picking 
>>a
>> > syntax that might allow those kinds of extension (and then explictly
>> > making the extension syntax an error) gives us the ability to add 
>>those
>> > features without breaking backwards compatibility.
>>
>>We can un-escape '\+' as a token just fine, and if we do that, all of 
>>the
>>weird use-cases you just described are possible.  I can't think of any
>>options I'd want to pass to 'compose' myself, but it would be easy 
>>enough
>>to add some flags to its parser.
>>
>>-g
>



From exarkun at twistedmatrix.com  Wed May 20 05:10:44 2015
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 20 May 2015 11:10:44 -0000
Subject: [Twisted-Python] Need advice on how to move further with ticket
 7897
In-Reply-To: <CA+2gYioDgfddT-NTrvk_yw4Z4V37mSPTpY0ck1vNwEAV+OhnjQ@mail.gmail.com>
References: <CA+2gYioDgfddT-NTrvk_yw4Z4V37mSPTpY0ck1vNwEAV+OhnjQ@mail.gmail.com>
Message-ID: <20150520111044.21155.1787997368.divmod.xquotient.109@top>

On 19 May, 04:38 pm, jerryguitarist at gmail.com wrote:
>Hi!
>
>I filed a ticket (Log the log events in 
>twisted.internet.protocol.Factory
>using the new logging system 
><https://twistedmatrix.com/trac/ticket/7897>)
>and I have also submitted a patch for it. However, while working on the
>patch, I had some concerns that I have already summarized in a ticket
>comment. I would really appreciate it if someone could please take a 
>look
>and give me some advice as to how to move further with this ticket so 
>that
>I can start working on other patches for porting to twisted.logger. :-)

I think this question may indicate a certain section of documentation 
that is missing for twisted.logger.

Perhaps some folks who have ideas about how this new logging library 
should be used could look at that ticket and then clarify some existing 
twisted.logger docs or add something to them.

Jean-Paul



From exarkun at twistedmatrix.com  Wed May 20 05:13:25 2015
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 20 May 2015 11:13:25 -0000
Subject: [Twisted-Python] Multiple plugins in "twistd"
In-Reply-To: <87wq04mgcd.fsf@hermes.hocat.ca>
References: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
 <20150519125921.21155.2042175335.divmod.xquotient.100@top>
 <1DBE6BD3-AA90-405E-8A67-E6DC0DA8D9D4@twistedmatrix.com>
 <87wq04mgcd.fsf@hermes.hocat.ca>
Message-ID: <20150520111325.21155.473218630.divmod.xquotient.114@top>

On 19 May, 09:01 pm, tom.prince at ualberta.net wrote:
>Glyph <glyph at twistedmatrix.com> writes:
>>You could also find some other way to split the argument list but "+" 
>>doesn't seem particularly obscure in this context to me.  (If there's 
>>really a need to pass a literal "+" to a plugin we could add an 
>>escaping syntax as well.)
>
>I think if we are adding syntax, then we should also add escaping at 
>the
>same time.
>
>On a related note, when designing this kind of syntax, I think it is
>often valuable to explictly leave some of the space as an explict 
>error,
>to leave freedom to extend the syntax in the future.

I think this is 100% correct.  This is part of why I don't want the 
syntax added to `Options`.  If it's a feature of, say, a "compose" 
twistd plugin then you can always throw the whole "compose" twistd 
plugin in the trash and start again.  That gives you quite a lot of 
space for syntax changes. :)

(And of course, not introducing a syntax at all leaves you even more 
room... but talking this crowd out of inventing weird syntaxes is 
probably an exercise in futility.)

Jean-Paul



From glyph at twistedmatrix.com  Wed May 20 13:29:16 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 20 May 2015 12:29:16 -0700
Subject: [Twisted-Python] Multiple plugins in "twistd"
In-Reply-To: <20150520111325.21155.473218630.divmod.xquotient.114@top>
References: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
 <20150519125921.21155.2042175335.divmod.xquotient.100@top>
 <1DBE6BD3-AA90-405E-8A67-E6DC0DA8D9D4@twistedmatrix.com>
 <87wq04mgcd.fsf@hermes.hocat.ca>
 <20150520111325.21155.473218630.divmod.xquotient.114@top>
Message-ID: <D7346F9E-7BBE-4964-8C76-3F7AF48C047C@twistedmatrix.com>


> On May 20, 2015, at 04:13, exarkun at twistedmatrix.com wrote:
> 
> On 19 May, 09:01 pm, tom.prince at ualberta.net wrote:
>> Glyph <glyph at twistedmatrix.com> writes:
>>> You could also find some other way to split the argument list but "+" doesn't seem particularly obscure in this context to me.  (If there's really a need to pass a literal "+" to a plugin we could add an escaping syntax as well.)
>> 
>> I think if we are adding syntax, then we should also add escaping at the
>> same time.
>> 
>> On a related note, when designing this kind of syntax, I think it is
>> often valuable to explictly leave some of the space as an explict error,
>> to leave freedom to extend the syntax in the future.
> 
> I think this is 100% correct.  This is part of why I don't want the syntax added to `Options`.  If it's a feature of, say, a "compose" twistd plugin then you can always throw the whole "compose" twistd plugin in the trash and start again.  That gives you quite a lot of space for syntax changes. :)
> 
> (And of course, not introducing a syntax at all leaves you even more room... but talking this crowd out of inventing weird syntaxes is probably an exercise in futility.)

Much as I love weird syntaxes, using "+" as a separator for a 'compose' plugin seems about as straightforward as I could imagine such a thing working.  Do you have an alternate proposal that is less 'weird'?  I wouldn't promise to accept it but I wouldn't want to go with something unnecessarily weird just due to a failure of my imagination.

-glyph


From glyph at twistedmatrix.com  Wed May 20 14:37:26 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 20 May 2015 13:37:26 -0700
Subject: [Twisted-Python] Multiple plugins in "twistd"
In-Reply-To: <20150520110832.21155.74837950.divmod.xquotient.107@top>
References: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
 <20150519125921.21155.2042175335.divmod.xquotient.100@top>
 <1DBE6BD3-AA90-405E-8A67-E6DC0DA8D9D4@twistedmatrix.com>
 <87wq04mgcd.fsf@hermes.hocat.ca>
 <56F1BE0D-0862-4C21-A873-7EDAB7EEAD5B@twistedmatrix.com>
 <CAOA_4jAy8Lu1=y=ehrQc+ab4vQjgNifJM02ZEGvnzvo7WQHfMw@mail.gmail.com>
 <20150520110832.21155.74837950.divmod.xquotient.107@top>
Message-ID: <A87DC643-9B9D-414C-831A-1CB4422EB06C@twistedmatrix.com>


> On May 20, 2015, at 04:08, exarkun at twistedmatrix.com wrote:
> 
> On 02:41 am, zadka.moshe at gmail.com wrote:
>> OK, so let me once again enumerate the tickets I'm going to open, because
>> it seems like we're reaching consensus:
>> 
>> [1] PROVIDES (pretty much as written: exarkun -- the idea is to walk up the
>> hierarchy and then back down, so I did mean IService -- go up until you
>> find a root, then go down and get all descendents)
> 
> Oops.  You can't get children *or* a parent from IService.  But you can at least get children from IServiceCollection.

I went to go check on this, and not only are you right, but the docstrings in the reference documentation for Service, IService, and IServiceCollection seem to be full of errors and missing copy/pasted stuff.  Moshe, if you could have a look at maybe cleaning this area up (in a separate ticket, of course) as you're working on service stuff?

-glyph


From exarkun at twistedmatrix.com  Wed May 20 18:17:13 2015
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 21 May 2015 00:17:13 -0000
Subject: [Twisted-Python] Multiple plugins in "twistd"
In-Reply-To: <D7346F9E-7BBE-4964-8C76-3F7AF48C047C@twistedmatrix.com>
References: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
 <20150519125921.21155.2042175335.divmod.xquotient.100@top>
 <1DBE6BD3-AA90-405E-8A67-E6DC0DA8D9D4@twistedmatrix.com>
 <87wq04mgcd.fsf@hermes.hocat.ca>
 <20150520111325.21155.473218630.divmod.xquotient.114@top>
 <D7346F9E-7BBE-4964-8C76-3F7AF48C047C@twistedmatrix.com>
Message-ID: <20150521001713.21155.270918325.divmod.xquotient.157@top>

On 07:29 pm, glyph at twistedmatrix.com wrote:
>
>>On May 20, 2015, at 04:13, exarkun at twistedmatrix.com wrote:
>>
>>On 19 May, 09:01 pm, tom.prince at ualberta.net wrote:
>>>Glyph <glyph at twistedmatrix.com> writes:
>>>>You could also find some other way to split the argument list but 
>>>>"+" doesn't seem particularly obscure in this context to me.  (If 
>>>>there's really a need to pass a literal "+" to a plugin we could add 
>>>>an escaping syntax as well.)
>>>
>>>I think if we are adding syntax, then we should also add escaping at 
>>>the
>>>same time.
>>>
>>>On a related note, when designing this kind of syntax, I think it is
>>>often valuable to explictly leave some of the space as an explict 
>>>error,
>>>to leave freedom to extend the syntax in the future.
>>
>>I think this is 100% correct.  This is part of why I don't want the 
>>syntax added to `Options`.  If it's a feature of, say, a "compose" 
>>twistd plugin then you can always throw the whole "compose" twistd 
>>plugin in the trash and start again.  That gives you quite a lot of 
>>space for syntax changes. :)
>>
>>(And of course, not introducing a syntax at all leaves you even more 
>>room... but talking this crowd out of inventing weird syntaxes is 
>>probably an exercise in futility.)
>
>Much as I love weird syntaxes, using "+" as a separator for a 'compose' 
>plugin seems about as straightforward as I could imagine such a thing 
>working.  Do you have an alternate proposal that is less 'weird'?  I 
>wouldn't promise to accept it but I wouldn't want to go with something 
>unnecessarily weird just due to a failure of my imagination.

It's possible this is a case of necessary weirdness - at least, if 
you're dead-set on some kind of option-based CLI interface to this 
functionality.

Think about other CLI tools that try to offer this kind of composition. 
Only two really come to mind for me and one of those is not exactly well 
regarded for its novel syntax (hint - it rhymes with "schmestreamer).

This is not to say that this kind of composition is a bad thing - or 
even that no other widely-used software supports the kind of invoke- 
several-things-of-stuff behavior that we're talking about providing 
access to here.

However, I do think it is the case that most of the world tries to solve 
this problem without trying to force everything into a world-view framed 
by GNU getopt().

With that in mind, here are some alternatives:

  (0) The null proposal

    $ twistd compose \
        web --port 80 +
        manhole --auth foo + \
        logging --path /var/run

  (1) Borrow `--` which already means "stop parsing options here".  It 
makes sense if you think about sub-commands as existing on a stack and 
`--` meaning "pop the stack".  Possibly not actually feasible since I 
think `Options` already knows what `--` means (by virtue of actually 
*using* getopt()) and uses it to separate options from positional 
arguments (and therefore it's not an unambiguous separator - but I 
haven't double-checked this).

    $ twistd compose \
        web --port 80 -- \
        manhole --auth foo -- \
        logging --path /var/run

  (2) Put things into strings which already have well-defined escape 
syntax:

    $ twistd compose \
        'web --port 80' \
        'manhole --auth foo' \
        'logging --path /var/run'

  (3) Load things from a file (really just a variation on (2)):

    $ cat myapp.compose
    web --port 80
    manhole --auth foo
    logging --path /var/run
    $ twistd compose myapp.compose

Note these aren't really syntax ideas.  Apart from (1), they're ideas 
for not needing a new syntax.  As soon as you actually invent a new 
syntax you invite comments like "Well, maybe you should use `;` instead 
of `+` because `;` is already kind of ingrained as a separator and 
people are used to having to escape it" (which, see, I put in quotes, 
because I'm totally not saying that, even if it is totally true) to 
which you can only really reply that your gut agrees or your gut 
disagrees and it's always a bummer when the best support you have for 
some programming decision is some gut feeling you had.

I might actually be somewhat attracted to (3) because:

  * I don't really want to build up giant piles of configuration on my 
command line and then rely on my shell history for being able to find it 
again.  myapp.compose is something I could even put in my version 
control system.

  * Despite shell quoting and escaping rules being perfectly well 
defined, I'd really much rather not have to deal with an automatic extra 
layer of quotes.

And a last point to consider about new syntaxes - what are the security 
considerations of a command like:

    $ twistd compose \
        web --port ${WEB_PORT} +
        manhole --auth foo + \
        logging --path /var/run

I'll grant there's a bug there (the shell variable should be quoted - 
but I only know one person who consistently gets that right).

Regardless, I think any proposal would greatly benefit from a much 
greater consideration of use-cases and examples than I've yet seen 
discussed in this thread.

Jean-Paul



From zadka.moshe at gmail.com  Wed May 20 20:31:41 2015
From: zadka.moshe at gmail.com (Moshe Zadka)
Date: Thu, 21 May 2015 02:31:41 +0000
Subject: [Twisted-Python] Multiple plugins in "twistd"
In-Reply-To: <20150521001713.21155.270918325.divmod.xquotient.157@top>
References: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
 <20150519125921.21155.2042175335.divmod.xquotient.100@top>
 <1DBE6BD3-AA90-405E-8A67-E6DC0DA8D9D4@twistedmatrix.com>
 <87wq04mgcd.fsf@hermes.hocat.ca>
 <20150520111325.21155.473218630.divmod.xquotient.114@top>
 <D7346F9E-7BBE-4964-8C76-3F7AF48C047C@twistedmatrix.com>
 <20150521001713.21155.270918325.divmod.xquotient.157@top>
Message-ID: <CAOA_4jB+Z_Akc5OBjQ5z4viXpn6BtwyekKz5eBHvrtxASEkwLw@mail.gmail.com>

Hi glyph and exarkun,

[1] The compose syntax is the least interesting part for me here, and seems
to cause the most bike-shedding, so I think I will punt on that. Instead, I
will write a function called "compose()" which can be used from .tac files
or possibly other plug-ins, leaving the issue of the syntax for a different
day.
[2] It seems like the biggest inconsistency in the docstrings is that they
mention the parent without having an attribute for it. (E.g., the docstring
for setServiceParent *says* "parent attribute is set", but there's no
"parent attribute" in the interface. Glyph, if you want to open a ticket
with the issues you found, please assign it to me -- otherwise, more
specificity is useful!
[2a] Since the docstrings do refer to the parent attribute, and since I
would be surprised if services just implemented the interface without
inheriting from "Service", I wonder if people object *too* much if I "fix"
it by documenting the parent attribute as part of the interface?
[3] I think that with the compose() function available in .tac files, maybe
needing .tac *with* subcommands is not quite as important? Maybe I'll leave
that off of the initial sprint.

So bottom line, current plans:
[4] Implement compose() as a function that takes an iterable-of-iterables,
treats them as command-line arguments for services, and builds a
MultiService() with them all.
[5] Document the parent attribute in IService (and possibly other issues,
depending on Glyph opening a bug for [2]
[6] Implement provides() the way I wanted to (now that parent is documented)

Since it seems like compose-as-a-function is the least controversial bit
here, I'll start with that while the other issues settle down.

Moshe Z.


On Wed, May 20, 2015 at 5:18 PM <exarkun at twistedmatrix.com> wrote:

> On 07:29 pm, glyph at twistedmatrix.com wrote:
> >
> >>On May 20, 2015, at 04:13, exarkun at twistedmatrix.com wrote:
> >>
> >>On 19 May, 09:01 pm, tom.prince at ualberta.net wrote:
> >>>Glyph <glyph at twistedmatrix.com> writes:
> >>>>You could also find some other way to split the argument list but
> >>>>"+" doesn't seem particularly obscure in this context to me.  (If
> >>>>there's really a need to pass a literal "+" to a plugin we could add
> >>>>an escaping syntax as well.)
> >>>
> >>>I think if we are adding syntax, then we should also add escaping at
> >>>the
> >>>same time.
> >>>
> >>>On a related note, when designing this kind of syntax, I think it is
> >>>often valuable to explictly leave some of the space as an explict
> >>>error,
> >>>to leave freedom to extend the syntax in the future.
> >>
> >>I think this is 100% correct.  This is part of why I don't want the
> >>syntax added to `Options`.  If it's a feature of, say, a "compose"
> >>twistd plugin then you can always throw the whole "compose" twistd
> >>plugin in the trash and start again.  That gives you quite a lot of
> >>space for syntax changes. :)
> >>
> >>(And of course, not introducing a syntax at all leaves you even more
> >>room... but talking this crowd out of inventing weird syntaxes is
> >>probably an exercise in futility.)
> >
> >Much as I love weird syntaxes, using "+" as a separator for a 'compose'
> >plugin seems about as straightforward as I could imagine such a thing
> >working.  Do you have an alternate proposal that is less 'weird'?  I
> >wouldn't promise to accept it but I wouldn't want to go with something
> >unnecessarily weird just due to a failure of my imagination.
>
> It's possible this is a case of necessary weirdness - at least, if
> you're dead-set on some kind of option-based CLI interface to this
> functionality.
>
> Think about other CLI tools that try to offer this kind of composition.
> Only two really come to mind for me and one of those is not exactly well
> regarded for its novel syntax (hint - it rhymes with "schmestreamer).
>
> This is not to say that this kind of composition is a bad thing - or
> even that no other widely-used software supports the kind of invoke-
> several-things-of-stuff behavior that we're talking about providing
> access to here.
>
> However, I do think it is the case that most of the world tries to solve
> this problem without trying to force everything into a world-view framed
> by GNU getopt().
>
> With that in mind, here are some alternatives:
>
>   (0) The null proposal
>
>     $ twistd compose \
>         web --port 80 +
>         manhole --auth foo + \
>         logging --path /var/run
>
>   (1) Borrow `--` which already means "stop parsing options here".  It
> makes sense if you think about sub-commands as existing on a stack and
> `--` meaning "pop the stack".  Possibly not actually feasible since I
> think `Options` already knows what `--` means (by virtue of actually
> *using* getopt()) and uses it to separate options from positional
> arguments (and therefore it's not an unambiguous separator - but I
> haven't double-checked this).
>
>     $ twistd compose \
>         web --port 80 -- \
>         manhole --auth foo -- \
>         logging --path /var/run
>
>   (2) Put things into strings which already have well-defined escape
> syntax:
>
>     $ twistd compose \
>         'web --port 80' \
>         'manhole --auth foo' \
>         'logging --path /var/run'
>
>   (3) Load things from a file (really just a variation on (2)):
>
>     $ cat myapp.compose
>     web --port 80
>     manhole --auth foo
>     logging --path /var/run
>     $ twistd compose myapp.compose
>
> Note these aren't really syntax ideas.  Apart from (1), they're ideas
> for not needing a new syntax.  As soon as you actually invent a new
> syntax you invite comments like "Well, maybe you should use `;` instead
> of `+` because `;` is already kind of ingrained as a separator and
> people are used to having to escape it" (which, see, I put in quotes,
> because I'm totally not saying that, even if it is totally true) to
> which you can only really reply that your gut agrees or your gut
> disagrees and it's always a bummer when the best support you have for
> some programming decision is some gut feeling you had.
>
> I might actually be somewhat attracted to (3) because:
>
>   * I don't really want to build up giant piles of configuration on my
> command line and then rely on my shell history for being able to find it
> again.  myapp.compose is something I could even put in my version
> control system.
>
>   * Despite shell quoting and escaping rules being perfectly well
> defined, I'd really much rather not have to deal with an automatic extra
> layer of quotes.
>
> And a last point to consider about new syntaxes - what are the security
> considerations of a command like:
>
>     $ twistd compose \
>         web --port ${WEB_PORT} +
>         manhole --auth foo + \
>         logging --path /var/run
>
> I'll grant there's a bug there (the shell variable should be quoted -
> but I only know one person who consistently gets that right).
>
> Regardless, I think any proposal would greatly benefit from a much
> greater consideration of use-cases and examples than I've yet seen
> discussed in this thread.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150521/cc7436b3/attachment-0002.html>

From zadka.moshe at gmail.com  Wed May 20 20:40:10 2015
From: zadka.moshe at gmail.com (Moshe Zadka)
Date: Thu, 21 May 2015 02:40:10 +0000
Subject: [Twisted-Python] Multiple plugins in "twistd"
In-Reply-To: <CAOA_4jB+Z_Akc5OBjQ5z4viXpn6BtwyekKz5eBHvrtxASEkwLw@mail.gmail.com>
References: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
 <20150519125921.21155.2042175335.divmod.xquotient.100@top>
 <1DBE6BD3-AA90-405E-8A67-E6DC0DA8D9D4@twistedmatrix.com>
 <87wq04mgcd.fsf@hermes.hocat.ca>
 <20150520111325.21155.473218630.divmod.xquotient.114@top>
 <D7346F9E-7BBE-4964-8C76-3F7AF48C047C@twistedmatrix.com>
 <20150521001713.21155.270918325.divmod.xquotient.157@top>
 <CAOA_4jB+Z_Akc5OBjQ5z4viXpn6BtwyekKz5eBHvrtxASEkwLw@mail.gmail.com>
Message-ID: <CAOA_4jDaJg50+5wfqy+ymRxqbovqjmYf142z5N2Z9Vq=NmHB+Q@mail.gmail.com>

FYI, https://twistedmatrix.com/trac/ticket/7907#ticket created.

On Wed, May 20, 2015 at 7:31 PM Moshe Zadka <zadka.moshe at gmail.com> wrote:

> Hi glyph and exarkun,
>
> [1] The compose syntax is the least interesting part for me here, and
> seems to cause the most bike-shedding, so I think I will punt on that.
> Instead, I will write a function called "compose()" which can be used from
> .tac files or possibly other plug-ins, leaving the issue of the syntax for
> a different day.
> [2] It seems like the biggest inconsistency in the docstrings is that they
> mention the parent without having an attribute for it. (E.g., the docstring
> for setServiceParent *says* "parent attribute is set", but there's no
> "parent attribute" in the interface. Glyph, if you want to open a ticket
> with the issues you found, please assign it to me -- otherwise, more
> specificity is useful!
> [2a] Since the docstrings do refer to the parent attribute, and since I
> would be surprised if services just implemented the interface without
> inheriting from "Service", I wonder if people object *too* much if I "fix"
> it by documenting the parent attribute as part of the interface?
> [3] I think that with the compose() function available in .tac files,
> maybe needing .tac *with* subcommands is not quite as important? Maybe I'll
> leave that off of the initial sprint.
>
> So bottom line, current plans:
> [4] Implement compose() as a function that takes an iterable-of-iterables,
> treats them as command-line arguments for services, and builds a
> MultiService() with them all.
> [5] Document the parent attribute in IService (and possibly other issues,
> depending on Glyph opening a bug for [2]
> [6] Implement provides() the way I wanted to (now that parent is
> documented)
>
> Since it seems like compose-as-a-function is the least controversial bit
> here, I'll start with that while the other issues settle down.
>
> Moshe Z.
>
>
> On Wed, May 20, 2015 at 5:18 PM <exarkun at twistedmatrix.com> wrote:
>
>> On 07:29 pm, glyph at twistedmatrix.com wrote:
>> >
>> >>On May 20, 2015, at 04:13, exarkun at twistedmatrix.com wrote:
>> >>
>> >>On 19 May, 09:01 pm, tom.prince at ualberta.net wrote:
>> >>>Glyph <glyph at twistedmatrix.com> writes:
>> >>>>You could also find some other way to split the argument list but
>> >>>>"+" doesn't seem particularly obscure in this context to me.  (If
>> >>>>there's really a need to pass a literal "+" to a plugin we could add
>> >>>>an escaping syntax as well.)
>> >>>
>> >>>I think if we are adding syntax, then we should also add escaping at
>> >>>the
>> >>>same time.
>> >>>
>> >>>On a related note, when designing this kind of syntax, I think it is
>> >>>often valuable to explictly leave some of the space as an explict
>> >>>error,
>> >>>to leave freedom to extend the syntax in the future.
>> >>
>> >>I think this is 100% correct.  This is part of why I don't want the
>> >>syntax added to `Options`.  If it's a feature of, say, a "compose"
>> >>twistd plugin then you can always throw the whole "compose" twistd
>> >>plugin in the trash and start again.  That gives you quite a lot of
>> >>space for syntax changes. :)
>> >>
>> >>(And of course, not introducing a syntax at all leaves you even more
>> >>room... but talking this crowd out of inventing weird syntaxes is
>> >>probably an exercise in futility.)
>> >
>> >Much as I love weird syntaxes, using "+" as a separator for a 'compose'
>> >plugin seems about as straightforward as I could imagine such a thing
>> >working.  Do you have an alternate proposal that is less 'weird'?  I
>> >wouldn't promise to accept it but I wouldn't want to go with something
>> >unnecessarily weird just due to a failure of my imagination.
>>
>> It's possible this is a case of necessary weirdness - at least, if
>> you're dead-set on some kind of option-based CLI interface to this
>> functionality.
>>
>> Think about other CLI tools that try to offer this kind of composition.
>> Only two really come to mind for me and one of those is not exactly well
>> regarded for its novel syntax (hint - it rhymes with "schmestreamer).
>>
>> This is not to say that this kind of composition is a bad thing - or
>> even that no other widely-used software supports the kind of invoke-
>> several-things-of-stuff behavior that we're talking about providing
>> access to here.
>>
>> However, I do think it is the case that most of the world tries to solve
>> this problem without trying to force everything into a world-view framed
>> by GNU getopt().
>>
>> With that in mind, here are some alternatives:
>>
>>   (0) The null proposal
>>
>>     $ twistd compose \
>>         web --port 80 +
>>         manhole --auth foo + \
>>         logging --path /var/run
>>
>>   (1) Borrow `--` which already means "stop parsing options here".  It
>> makes sense if you think about sub-commands as existing on a stack and
>> `--` meaning "pop the stack".  Possibly not actually feasible since I
>> think `Options` already knows what `--` means (by virtue of actually
>> *using* getopt()) and uses it to separate options from positional
>> arguments (and therefore it's not an unambiguous separator - but I
>> haven't double-checked this).
>>
>>     $ twistd compose \
>>         web --port 80 -- \
>>         manhole --auth foo -- \
>>         logging --path /var/run
>>
>>   (2) Put things into strings which already have well-defined escape
>> syntax:
>>
>>     $ twistd compose \
>>         'web --port 80' \
>>         'manhole --auth foo' \
>>         'logging --path /var/run'
>>
>>   (3) Load things from a file (really just a variation on (2)):
>>
>>     $ cat myapp.compose
>>     web --port 80
>>     manhole --auth foo
>>     logging --path /var/run
>>     $ twistd compose myapp.compose
>>
>> Note these aren't really syntax ideas.  Apart from (1), they're ideas
>> for not needing a new syntax.  As soon as you actually invent a new
>> syntax you invite comments like "Well, maybe you should use `;` instead
>> of `+` because `;` is already kind of ingrained as a separator and
>> people are used to having to escape it" (which, see, I put in quotes,
>> because I'm totally not saying that, even if it is totally true) to
>> which you can only really reply that your gut agrees or your gut
>> disagrees and it's always a bummer when the best support you have for
>> some programming decision is some gut feeling you had.
>>
>> I might actually be somewhat attracted to (3) because:
>>
>>   * I don't really want to build up giant piles of configuration on my
>> command line and then rely on my shell history for being able to find it
>> again.  myapp.compose is something I could even put in my version
>> control system.
>>
>>   * Despite shell quoting and escaping rules being perfectly well
>> defined, I'd really much rather not have to deal with an automatic extra
>> layer of quotes.
>>
>> And a last point to consider about new syntaxes - what are the security
>> considerations of a command like:
>>
>>     $ twistd compose \
>>         web --port ${WEB_PORT} +
>>         manhole --auth foo + \
>>         logging --path /var/run
>>
>> I'll grant there's a bug there (the shell variable should be quoted -
>> but I only know one person who consistently gets that right).
>>
>> Regardless, I think any proposal would greatly benefit from a much
>> greater consideration of use-cases and examples than I've yet seen
>> discussed in this thread.
>>
>> Jean-Paul
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150521/1828ba01/attachment-0002.html>

From zadka.moshe at gmail.com  Wed May 20 21:39:51 2015
From: zadka.moshe at gmail.com (Moshe Zadka)
Date: Thu, 21 May 2015 03:39:51 +0000
Subject: [Twisted-Python] Multiple plugins in "twistd"
In-Reply-To: <CAOA_4jDaJg50+5wfqy+ymRxqbovqjmYf142z5N2Z9Vq=NmHB+Q@mail.gmail.com>
References: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
 <20150519125921.21155.2042175335.divmod.xquotient.100@top>
 <1DBE6BD3-AA90-405E-8A67-E6DC0DA8D9D4@twistedmatrix.com>
 <87wq04mgcd.fsf@hermes.hocat.ca>
 <20150520111325.21155.473218630.divmod.xquotient.114@top>
 <D7346F9E-7BBE-4964-8C76-3F7AF48C047C@twistedmatrix.com>
 <20150521001713.21155.270918325.divmod.xquotient.157@top>
 <CAOA_4jB+Z_Akc5OBjQ5z4viXpn6BtwyekKz5eBHvrtxASEkwLw@mail.gmail.com>
 <CAOA_4jDaJg50+5wfqy+ymRxqbovqjmYf142z5N2Z9Vq=NmHB+Q@mail.gmail.com>
Message-ID: <CAOA_4jC7XSKaJ_Zwv41tGMzoJKOjMPzUhJLTS2B6po47tt1CvA@mail.gmail.com>

FYIFYI --  Patch attached. Docs are missing, but I'm sure JP/Glyph will be
happy to tell me what I've done wrong otherwise :-P

On Wed, May 20, 2015 at 7:40 PM Moshe Zadka <zadka.moshe at gmail.com> wrote:

> FYI, https://twistedmatrix.com/trac/ticket/7907#ticket created.
>
> On Wed, May 20, 2015 at 7:31 PM Moshe Zadka <zadka.moshe at gmail.com> wrote:
>
>> Hi glyph and exarkun,
>>
>> [1] The compose syntax is the least interesting part for me here, and
>> seems to cause the most bike-shedding, so I think I will punt on that.
>> Instead, I will write a function called "compose()" which can be used from
>> .tac files or possibly other plug-ins, leaving the issue of the syntax for
>> a different day.
>> [2] It seems like the biggest inconsistency in the docstrings is that
>> they mention the parent without having an attribute for it. (E.g., the
>> docstring for setServiceParent *says* "parent attribute is set", but
>> there's no "parent attribute" in the interface. Glyph, if you want to open
>> a ticket with the issues you found, please assign it to me -- otherwise,
>> more specificity is useful!
>> [2a] Since the docstrings do refer to the parent attribute, and since I
>> would be surprised if services just implemented the interface without
>> inheriting from "Service", I wonder if people object *too* much if I "fix"
>> it by documenting the parent attribute as part of the interface?
>> [3] I think that with the compose() function available in .tac files,
>> maybe needing .tac *with* subcommands is not quite as important? Maybe I'll
>> leave that off of the initial sprint.
>>
>> So bottom line, current plans:
>> [4] Implement compose() as a function that takes an
>> iterable-of-iterables, treats them as command-line arguments for services,
>> and builds a MultiService() with them all.
>> [5] Document the parent attribute in IService (and possibly other issues,
>> depending on Glyph opening a bug for [2]
>> [6] Implement provides() the way I wanted to (now that parent is
>> documented)
>>
>> Since it seems like compose-as-a-function is the least controversial bit
>> here, I'll start with that while the other issues settle down.
>>
>> Moshe Z.
>>
>>
>> On Wed, May 20, 2015 at 5:18 PM <exarkun at twistedmatrix.com> wrote:
>>
>>> On 07:29 pm, glyph at twistedmatrix.com wrote:
>>> >
>>> >>On May 20, 2015, at 04:13, exarkun at twistedmatrix.com wrote:
>>> >>
>>> >>On 19 May, 09:01 pm, tom.prince at ualberta.net wrote:
>>> >>>Glyph <glyph at twistedmatrix.com> writes:
>>> >>>>You could also find some other way to split the argument list but
>>> >>>>"+" doesn't seem particularly obscure in this context to me.  (If
>>> >>>>there's really a need to pass a literal "+" to a plugin we could add
>>> >>>>an escaping syntax as well.)
>>> >>>
>>> >>>I think if we are adding syntax, then we should also add escaping at
>>> >>>the
>>> >>>same time.
>>> >>>
>>> >>>On a related note, when designing this kind of syntax, I think it is
>>> >>>often valuable to explictly leave some of the space as an explict
>>> >>>error,
>>> >>>to leave freedom to extend the syntax in the future.
>>> >>
>>> >>I think this is 100% correct.  This is part of why I don't want the
>>> >>syntax added to `Options`.  If it's a feature of, say, a "compose"
>>> >>twistd plugin then you can always throw the whole "compose" twistd
>>> >>plugin in the trash and start again.  That gives you quite a lot of
>>> >>space for syntax changes. :)
>>> >>
>>> >>(And of course, not introducing a syntax at all leaves you even more
>>> >>room... but talking this crowd out of inventing weird syntaxes is
>>> >>probably an exercise in futility.)
>>> >
>>> >Much as I love weird syntaxes, using "+" as a separator for a 'compose'
>>> >plugin seems about as straightforward as I could imagine such a thing
>>> >working.  Do you have an alternate proposal that is less 'weird'?  I
>>> >wouldn't promise to accept it but I wouldn't want to go with something
>>> >unnecessarily weird just due to a failure of my imagination.
>>>
>>> It's possible this is a case of necessary weirdness - at least, if
>>> you're dead-set on some kind of option-based CLI interface to this
>>> functionality.
>>>
>>> Think about other CLI tools that try to offer this kind of composition.
>>> Only two really come to mind for me and one of those is not exactly well
>>> regarded for its novel syntax (hint - it rhymes with "schmestreamer).
>>>
>>> This is not to say that this kind of composition is a bad thing - or
>>> even that no other widely-used software supports the kind of invoke-
>>> several-things-of-stuff behavior that we're talking about providing
>>> access to here.
>>>
>>> However, I do think it is the case that most of the world tries to solve
>>> this problem without trying to force everything into a world-view framed
>>> by GNU getopt().
>>>
>>> With that in mind, here are some alternatives:
>>>
>>>   (0) The null proposal
>>>
>>>     $ twistd compose \
>>>         web --port 80 +
>>>         manhole --auth foo + \
>>>         logging --path /var/run
>>>
>>>   (1) Borrow `--` which already means "stop parsing options here".  It
>>> makes sense if you think about sub-commands as existing on a stack and
>>> `--` meaning "pop the stack".  Possibly not actually feasible since I
>>> think `Options` already knows what `--` means (by virtue of actually
>>> *using* getopt()) and uses it to separate options from positional
>>> arguments (and therefore it's not an unambiguous separator - but I
>>> haven't double-checked this).
>>>
>>>     $ twistd compose \
>>>         web --port 80 -- \
>>>         manhole --auth foo -- \
>>>         logging --path /var/run
>>>
>>>   (2) Put things into strings which already have well-defined escape
>>> syntax:
>>>
>>>     $ twistd compose \
>>>         'web --port 80' \
>>>         'manhole --auth foo' \
>>>         'logging --path /var/run'
>>>
>>>   (3) Load things from a file (really just a variation on (2)):
>>>
>>>     $ cat myapp.compose
>>>     web --port 80
>>>     manhole --auth foo
>>>     logging --path /var/run
>>>     $ twistd compose myapp.compose
>>>
>>> Note these aren't really syntax ideas.  Apart from (1), they're ideas
>>> for not needing a new syntax.  As soon as you actually invent a new
>>> syntax you invite comments like "Well, maybe you should use `;` instead
>>> of `+` because `;` is already kind of ingrained as a separator and
>>> people are used to having to escape it" (which, see, I put in quotes,
>>> because I'm totally not saying that, even if it is totally true) to
>>> which you can only really reply that your gut agrees or your gut
>>> disagrees and it's always a bummer when the best support you have for
>>> some programming decision is some gut feeling you had.
>>>
>>> I might actually be somewhat attracted to (3) because:
>>>
>>>   * I don't really want to build up giant piles of configuration on my
>>> command line and then rely on my shell history for being able to find it
>>> again.  myapp.compose is something I could even put in my version
>>> control system.
>>>
>>>   * Despite shell quoting and escaping rules being perfectly well
>>> defined, I'd really much rather not have to deal with an automatic extra
>>> layer of quotes.
>>>
>>> And a last point to consider about new syntaxes - what are the security
>>> considerations of a command like:
>>>
>>>     $ twistd compose \
>>>         web --port ${WEB_PORT} +
>>>         manhole --auth foo + \
>>>         logging --path /var/run
>>>
>>> I'll grant there's a bug there (the shell variable should be quoted -
>>> but I only know one person who consistently gets that right).
>>>
>>> Regardless, I think any proposal would greatly benefit from a much
>>> greater consideration of use-cases and examples than I've yet seen
>>> discussed in this thread.
>>>
>>> Jean-Paul
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150521/b54f8dd5/attachment-0002.html>

From mithrandi at mithrandi.net  Thu May 21 06:20:52 2015
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Thu, 21 May 2015 14:20:52 +0200
Subject: [Twisted-Python] Multiple plugins in "twistd"
In-Reply-To: <CAOA_4jB+Z_Akc5OBjQ5z4viXpn6BtwyekKz5eBHvrtxASEkwLw@mail.gmail.com>
References: <CAOA_4jAQ=5LzWjt5XehwtHs2i_9FexM0x=ot9Hnc=kfB8GTMvg@mail.gmail.com>
 <20150519125921.21155.2042175335.divmod.xquotient.100@top>
 <1DBE6BD3-AA90-405E-8A67-E6DC0DA8D9D4@twistedmatrix.com>
 <87wq04mgcd.fsf@hermes.hocat.ca>
 <20150520111325.21155.473218630.divmod.xquotient.114@top>
 <D7346F9E-7BBE-4964-8C76-3F7AF48C047C@twistedmatrix.com>
 <20150521001713.21155.270918325.divmod.xquotient.157@top>
 <CAOA_4jB+Z_Akc5OBjQ5z4viXpn6BtwyekKz5eBHvrtxASEkwLw@mail.gmail.com>
Message-ID: <CAMcKhMRojzAAa7vkZC1J+ZEH7mx1iOHYenAZ3RP-1-B1fCFy9Q@mail.gmail.com>

On 21 May 2015 at 04:31, Moshe Zadka <zadka.moshe at gmail.com> wrote:
> [2a] Since the docstrings do refer to the parent attribute, and since I
> would be surprised if services just implemented the interface without
> inheriting from "Service", I wonder if people object *too* much if I "fix"
> it by documenting the parent attribute as part of the interface?

For what it's worth (not sure if a single anecdote is helpful), almost
none of my IService implementations inherit from Service (mainly
because multiple inheritance is awkward, and they already want to
inherit from axiom.item.Item). However, I'm pretty sure they all have
the "parent" attribute.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From adi at roiban.ro  Fri May 22 01:40:45 2015
From: adi at roiban.ro (Adi Roiban)
Date: Fri, 22 May 2015 08:40:45 +0100
Subject: [Twisted-Python] Need advice on how to move further with ticket
	7897
In-Reply-To: <20150520111044.21155.1787997368.divmod.xquotient.109@top>
References: <CA+2gYioDgfddT-NTrvk_yw4Z4V37mSPTpY0ck1vNwEAV+OhnjQ@mail.gmail.com>
 <20150520111044.21155.1787997368.divmod.xquotient.109@top>
Message-ID: <CAFycZ9d+13=9vDzZqJ5AOvJ9JJTsuW2D+Mxpa5YsR3YRr9dYjA@mail.gmail.com>

On 20 May 2015 at 12:10,  <exarkun at twistedmatrix.com> wrote:
> On 19 May, 04:38 pm, jerryguitarist at gmail.com wrote:
>>
>> Hi!
>>
>> I filed a ticket (Log the log events in twisted.internet.protocol.Factory
>> using the new logging system <https://twistedmatrix.com/trac/ticket/7897>)
>> and I have also submitted a patch for it. However, while working on the
>> patch, I had some concerns that I have already summarized in a ticket
>> comment. I would really appreciate it if someone could please take a look
>> and give me some advice as to how to move further with this ticket so that
>> I can start working on other patches for porting to twisted.logger. :-)
>
>
> I think this question may indicate a certain section of documentation that
> is missing for twisted.logger.
>
> Perhaps some folks who have ideas about how this new logging library should
> be used could look at that ticket and then clarify some existing
> twisted.logger docs or add something to them.
>
+1

I think that the trouble with twisted.logger documentation is that it
looks like an independent project and is documented as such.

It has no info/policy about how the logger and observers should be
used in Twisted core code.

To move things forward I suggest using a `_log` instance attribute to
emit log events.

It can be defined as the generic _log = Logger() class attribute
similar to the current patch

---------

http  and socks factory already define their own log() method with
different signatures.

Those method are more like observers as they write the events in a
file... outside of the old (or new) logging system.

Maybe we can refactor the http and socks code to emit all event using
_log() and use a dedicated log observer to persist the events in a
file.

---------

Having 'log' or '_log' in low level classes like Factory and Protocol
might conflict with existing code written by Twisted users... but this
might happen with any new method (public or private) added to the new
Twisted versions

With the new API docs formatting which hides private methods by
default, we might want to have the log method public so that users
will have a greater change to observer the method and prevent them
from overwriting the method.

Cheers

-- 
Adi Roiban



From mashiat.sarker at gmail.com  Fri May 22 08:56:01 2015
From: mashiat.sarker at gmail.com (Mashiat Sarker Shakkhar)
Date: Fri, 22 May 2015 10:56:01 -0400
Subject: [Twisted-Python] Trapping exceptions in Deferred
In-Reply-To: <72142586-56A5-4FE1-BD26-696437AE58D4@twistedmatrix.com>
References: <CAOfeCWWJqV02iGwWTbg17iE6XR4+KL2hTtu5kqgbtH8MOX5_ww@mail.gmail.com>
 <672BD626-F6F9-4E5C-800D-80F168E3407D@me.com>
 <CAOfeCWUwwkWzRLi7v3S0DS1ybptN71uUxfpkqzMAXQ-Cg5L-Fw@mail.gmail.com>
 <FD55BD40-CDBA-41F8-90A4-AFBDCCF36EFC@me.com>
 <CAOfeCWUmH3_fGhVLhVODuDJs9LENXtLNpABG+m3Xq14pJAkZGA@mail.gmail.com>
 <72142586-56A5-4FE1-BD26-696437AE58D4@twistedmatrix.com>
Message-ID: <CAOfeCWUr3DeW6a5S7zULcOyPe+eEmp9VxG8_y0dCnKQ+3j8Hiw@mail.gmail.com>

On Tue, May 12, 2015 at 3:31 PM, Christopher Armstrong <
radix at twistedmatrix.com> wrote:

> [...]
> Your code example is printing the error message and traceback _before_ you
> trap the failure. Are those print statements going to your logs? Could that
> be causing confusion?
>

To sum up the discussion on this matter - that is actually what was
happening. The exception was being printed as "Unhandled error" which
confused me. Thanks Christopher and Louis for your help.

Regards
Shakkhar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150522/7250ebc3/attachment-0002.html>

From johnaherne at rocs.co.uk  Sat May 23 07:53:02 2015
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sat, 23 May 2015 14:53:02 +0100
Subject: [Twisted-Python] TLS windows wincertstore
Message-ID: <CAKmUHjaczEX4XRccVumOcBXXfM2YdYweroH9nHykcfAxLf8NjA@mail.gmail.com>

I see that aranbierbaum has done the work on implementing wincertstore
ticket 6371.

For which I am very grateful. Thank you aron

However, it seems to be waiting some final touches before it can land.

I assume that aron is using it for his own purposes so I was wondering
whether to take a copy of the patch and check it out. And if it works carry
on.

It would be nice to wait for a final say so on the patch but I assume aron
has plenty to do at the moment.

Maybe someone else has already checked it out and can give some assurance
that it works.

Thanks for any info.



-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150523/2c7f988b/attachment-0002.html>

From commercials24 at yahoo.de  Sat May 23 15:27:06 2015
From: commercials24 at yahoo.de (peter)
Date: Sat, 23 May 2015 23:27:06 +0200
Subject: [Twisted-Python] irc DCC file receive, error: invalid argument
Message-ID: <5560F0AA.2040803@yahoo.de>

hi,


found this code online:
http://paste.pound-python.org/show/zeavfM7XjrXL2psPWxlv/

added some print statements and changed the logging to private/channel.


if i send the xdccbot a file from a second irc connection (x-chat) i get 
this error:
2015-05-23 22:30:01,384 : Bot connection made
2015-05-23 22:30:02,448 : Bot has signed on
2015-05-23 22:30:08,760 : Bot has joined channel #lala
2015-05-23 22:30:17,750 : connection failed during DCC download. reason: 
[Failure instance: Traceback (failure with no frames): <class 
'twisted.internet.error.ConnectError'>: An error occurred while 
connecting: 22: Invalid argument.

any ideas?




bot connect command:
python xdccbot.py irc.freenode.net lala lalala 123 90


the bot was designed to automatically message another irc user to send 
some file.
thats why the extra arguments.



From glyph at twistedmatrix.com  Sat May 23 19:16:49 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 23 May 2015 18:16:49 -0700
Subject: [Twisted-Python] TLS windows wincertstore
In-Reply-To: <CAKmUHjaczEX4XRccVumOcBXXfM2YdYweroH9nHykcfAxLf8NjA@mail.gmail.com>
References: <CAKmUHjaczEX4XRccVumOcBXXfM2YdYweroH9nHykcfAxLf8NjA@mail.gmail.com>
Message-ID: <7CC71CFC-3667-415F-B27C-FE3A6E8917C4@twistedmatrix.com>

On May 23, 2015, at 06:53, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> I see that aranbierbaum has done the work on implementing wincertstore ticket 6371.
> 
> For which I am very grateful. Thank you aron
> 
> However, it seems to be waiting some final touches before it can land.
> 
> I assume that aron is using it for his own purposes so I was wondering whether to take a copy of the patch and check it out. And if it works carry on.
> 
> It would be nice to wait for a final say so on the patch but I assume aron has plenty to do at the moment.
> 
> Maybe someone else has already checked it out and can give some assurance that it works.
> 
> Thanks for any info.

The correct next step here would be for you to take Aron's patch and address the review feedback mentioned on 6371.  It sounds like you want to wait around for the patch to be completed by someone else - if everyone does that, then no patches ever get finished :).

You may be concerned that it's somehow rude to pick up someone else's work and complete it.  It isn't - quite the opposite.  If a patch has gone more than a week without being acted upon, it is almost certainly not going to get any attention unless someone else picks it up.

If you are looking for assurance that it "works" - no, it doesn't.  If it were of sufficient quality to be included within Twisted and be said to "work" to that standard, it would already have been included.

Thanks for your interest, and I hope you'll step up to complete this work!

-glyph




From trac at twistedmatrix.com  Sun May 24 00:05:20 2015
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 24 May 2015 06:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1432447520.76.3552777303504222634@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150524/b42494c2/attachment-0002.html>

From johnaherne at rocs.co.uk  Sun May 24 03:24:20 2015
From: johnaherne at rocs.co.uk (John Aherne)
Date: Sun, 24 May 2015 10:24:20 +0100
Subject: [Twisted-Python] TLS windows wincertstore
Message-ID: <CAKmUHjYsHwcMSGKx=E-3OtJF_44VksdjLKC7Jz7iDS2p_FxuBw@mail.gmail.com>

Well, you are right I did not want to tread on his toes. And if he was just
about to make the changes it would have been offputting to find someone
else making slightly different changes.

Of course I am not in the same league as others making changes to twisted.
But what I will do is take the patch and try it out to see where I get to.

Once I see it working then I can see what to do next.

I'll also try to see if Aron is looking to finish it off or is too busy.

Thanks

-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150524/06569cc0/attachment-0002.html>

From hawkowl at atleastfornow.net  Sun May 24 06:20:36 2015
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Sun, 24 May 2015 20:20:36 +0800
Subject: [Twisted-Python] Twisted 15.2.1 Release Announcement
Message-ID: <EDCB82A4-650B-45DC-AC58-7C13F872126B@atleastfornow.net>

On behalf of Twisted Matrix Laboratories, I am honoured to announce the release of Twisted 15.2.1.

This is a bugfix release for the 15.2 series that fixes a regression in the new logging framework.

You can find the downloads at <https://pypi.python.org/pypi/Twisted> (or alternatively <http://twistedmatrix.com/trac/wiki/Downloads>) .

Many thanks to everyone who had a part in this release - the supporters of the Twisted Software Foundation, the developers who contributed code as well as documentation, and all the people building great things with Twisted!

Twisted Regards,
HawkOwl
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20150524/53324052/attachment.sig>

From malhar.vora at clogeny.com  Tue May 26 00:30:56 2015
From: malhar.vora at clogeny.com (Malhar Vora)
Date: Tue, 26 May 2015 12:00:56 +0530
Subject: [Twisted-Python] Filed to receive directory listing after
	successful login in FTPFactory
Message-ID: <CACpNGHDm=x8WuS4EtpvWW2ZiLGh4AQvtwCAuSwKh7g8zRfUjbg@mail.gmail.com>

Hi Guys,

I have following code.

-------------------------------------------------------------


from twisted.protocols.ftp import FTPFactory, FTPRealm, FTPShell
from twisted.cred.portal import Portal
from twisted.cred.checkers import AllowAnonymousAccess, FilePasswordDB
from twisted.internet import reactor
from twisted.cred.checkers import
InMemoryUsernamePasswordDatabaseDontUse as InMemoryDB
from twisted.python import log
from twisted.cred.credentials import UsernamePassword


import sys

users = {
    "user": "password"
}

im_memory_db_checker = InMemoryDB(**users)

p = Portal(FTPRealm('./'),
           (
               AllowAnonymousAccess(),
               im_memory_db_checker,
            )
          )

f = FTPFactory(p)

log.startLogging(sys.stdout)
reactor.listenTCP(21, f)
reactor.run()

-------------------------------------------------------------

While running above code, when I enter wrong credentials in my
FileZilla, it returns directory listing successfully but when I login
successfully it says :

*Failed to Response: 550 []: No such file or directory.
Error:	Failed to retrieve directory listing*

I have got this script from examples given on twisted site.

What am I missing ?, Please guide me.


Thank you,


-- 

*Regards,*
Malhar Vora
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150526/c1404d58/attachment-0002.html>

From johnaherne at rocs.co.uk  Tue May 26 06:13:07 2015
From: johnaherne at rocs.co.uk (John Aherne)
Date: Tue, 26 May 2015 13:13:07 +0100
Subject: [Twisted-Python] TLS windows wincertstore
Message-ID: <CAKmUHjbr_vYJgEwpkwvdCax7xRghKo1YJxE4LOC4zA3pK3jaPg@mail.gmail.com>

I set up a development environment for 32 and 64bit windows.

But just running 32 bit python.

Ran the complete test suite successfully on installation.

Then looked at just running the tests for ssl

Eventually, on 32 bit all tests passed

On 64 bit I have one failure on test_inspectCertificate which cannot
produce an exact match on the hash.

There is a note against this that says it is liable to fail at some point.
But I don't know if that is the case here. I am mentioning it to hopefully
get some pointers.

The last review mentioned some tests failing. I am only testing on windows
and for 32 bit the ssl tests all succeed.

Were there any other tests that failed that I am not seeing.

Thanks


-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150526/618b5c02/attachment-0002.html>

From chriswwolfe at gmail.com  Tue May 26 11:00:50 2015
From: chriswwolfe at gmail.com (Chris Wolfe)
Date: Tue, 26 May 2015 12:00:50 -0500
Subject: [Twisted-Python] revisiting onboarding
In-Reply-To: <64374D0B-3396-4B61-8DEC-82C9EDFB3EA3@twistedmatrix.com>
References: <00A8D2CB-A1A3-496F-8670-E9888990F3E6@twistedmatrix.com>
 <8761bcxxak.fsf@hermes.hocat.ca>
 <CAEKSqkuP5xjOy5Vdo4Giuj1HG5Xo6hvEAvBE88ZFCzniXvp1Uw@mail.gmail.com>
 <9DC27720-4877-466C-8148-2D5E5E1EA532@twistedmatrix.com>
 <CAEKSqksRBDowvEjUYZ6C7Y4QZsrzs_AsAT7+DvKieYyQ5b3vaw@mail.gmail.com>
 <64374D0B-3396-4B61-8DEC-82C9EDFB3EA3@twistedmatrix.com>
Message-ID: <CAEKSqkuBomAwHxKBZV9NH__tjnVP5fGssuUyovkq5gE5okMJBw@mail.gmail.com>

On Tue, Apr 28, 2015 at 5:08 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

> Can you send me an iCalendar invite of some kind to give you all the
> relevant permissions?  I would definitely like to volunteer to do it, but
> if we don't have a specific time, I will 100% guarantee you that I will
> forget :).
>
> -glyph
>
> P.S.: I've been setting a bad example, but we should generally be
> bottom-posting on this list, it makes the conversation easier to follow :).
>
> On Apr 28, 2015, at 2:54 PM, Chris Wolfe <chriswwolfe at gmail.com> wrote:
>
> Sure! I can only think of three things that need to be done:
>
> 1. Add a wiki page detailing the process you proposed. It may be helpful
> to display an example email showing what should be included in a new
> contributor request. The following pages should have links to the new
> policy:
>   - https://twistedmatrix.com/trac/wiki/TwistedDevelopment#Policies
>   - https://twistedmatrix.com/trac/wiki/ContributingToTwistedLabs
>
> I can create the wiki page and the example email. To do so, I'll need to
> get wiki permissions added to my trac account.
>
> 2. Activate the email address commit at twistedmatrix.com and compile a list
> of people to whom new commit requests should be sent for review. I can't do
> this.
>
> 3. Send an email to the general mailing list once the new pages are up to
> announce the new advancement path. I can do this.
>
> Is there anything I'm missing?
>
> - Chris // herrwolfe
>
> On Tue, Apr 28, 2015 at 3:25 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
> wrote:
>
>> I think we can consider it tacitly accepted by the community (nobody
>> seemed to object) but we still don't have anyone to implement it. Do you
>> want to step up to do that? :)
>>
>> -g
>>
>> On Apr 27, 2015, at 6:04 PM, Chris Wolfe <chriswwolfe at gmail.com> wrote:
>>
>> Hi,
>>
>> Has this proposal been accepted? Is there anything I can do to help
>> implement it?
>>
>> -Chris
>>
>> On Sun, Feb 8, 2015 at 9:01 AM, Tom Prince <tom.prince at ualberta.net>
>> wrote:
>>
>>> Glyph Lefkowitz <glyph at twistedmatrix.com> writes:
>>>
>>> > So I have a proposal for a scaled back process that nevertheless would
>>> give us something official-ish:
>>> > <..details...>
>>>
>>> I support this proposal.
>>>
>>>   Tom
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>
>>
>>
>> --
>> Chris Wolfe
>> chriswwolfe at gmail.com
>>
>>
>>
>
>
> --
> Chris Wolfe
> chriswwolfe at gmail.com
>
>
>
Hi,

I've added a draft wiki page detailing the contributor advancement path.
The page is located at
https://twistedmatrix.com/trac/wiki/Drafts/ContributorAdvancementPath.

If anyone has any feedback on the document, please feel free to either edit
the wiki or send me an email through the mailing list. If there aren't any
objections to what I've written by June 5, I will move it out of the drafts
section and link it up to the other documentation.

Thanks!
Chris

-- 
Chris Wolfe
chriswwolfe at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150526/3fb2b6e0/attachment-0002.html>

From glyph at twistedmatrix.com  Tue May 26 16:40:00 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 26 May 2015 15:40:00 -0700
Subject: [Twisted-Python] revisiting onboarding
In-Reply-To: <CAEKSqkuBomAwHxKBZV9NH__tjnVP5fGssuUyovkq5gE5okMJBw@mail.gmail.com>
References: <00A8D2CB-A1A3-496F-8670-E9888990F3E6@twistedmatrix.com>
 <8761bcxxak.fsf@hermes.hocat.ca>
 <CAEKSqkuP5xjOy5Vdo4Giuj1HG5Xo6hvEAvBE88ZFCzniXvp1Uw@mail.gmail.com>
 <9DC27720-4877-466C-8148-2D5E5E1EA532@twistedmatrix.com>
 <CAEKSqksRBDowvEjUYZ6C7Y4QZsrzs_AsAT7+DvKieYyQ5b3vaw@mail.gmail.com>
 <64374D0B-3396-4B61-8DEC-82C9EDFB3EA3@twistedmatrix.com>
 <CAEKSqkuBomAwHxKBZV9NH__tjnVP5fGssuUyovkq5gE5okMJBw@mail.gmail.com>
Message-ID: <D37E57F4-B14F-4E15-8B24-0B53CA4EF716@twistedmatrix.com>


> On May 26, 2015, at 10:00 AM, Chris Wolfe <chriswwolfe at gmail.com> wrote:
> 
> I've added a draft wiki page detailing the contributor advancement path. The page is located at https://twistedmatrix.com/trac/wiki/Drafts/ContributorAdvancementPath <https://twistedmatrix.com/trac/wiki/Drafts/ContributorAdvancementPath>.
> 
> If anyone has any feedback on the document, please feel free to either edit the wiki or send me an email through the mailing list. If there aren't any objections to what I've written by June 5, I will move it out of the drafts section and link it up to the other documentation.

Thanks for doing this, Chris!  I am looking forward to folks filling this out :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150526/daa4049e/attachment-0002.html>

From glyph at twistedmatrix.com  Tue May 26 16:53:20 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 26 May 2015 15:53:20 -0700
Subject: [Twisted-Python] TLS windows wincertstore
In-Reply-To: <CAKmUHjbr_vYJgEwpkwvdCax7xRghKo1YJxE4LOC4zA3pK3jaPg@mail.gmail.com>
References: <CAKmUHjbr_vYJgEwpkwvdCax7xRghKo1YJxE4LOC4zA3pK3jaPg@mail.gmail.com>
Message-ID: <6B80D848-1D79-4FB3-B175-20E202DCC928@twistedmatrix.com>


> On May 26, 2015, at 5:13 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> I set up a development environment for 32 and 64bit windows.
> 
> But just running 32 bit python.
> 
> Ran the complete test suite successfully on installation.
> 
> Then looked at just running the tests for ssl
> 
> Eventually, on 32 bit all tests passed
> 
> On 64 bit I have one failure on test_inspectCertificate which cannot produce an exact match on the hash.

There was a fix for this merged to trunk recently:

https://twistedmatrix.com/trac/changeset/44903

so you may want to try updating your checkout.

-g

> There is a note against this that says it is liable to fail at some point. But I don't know if that is the case here. I am mentioning it to hopefully get some pointers.
> 
> The last review mentioned some tests failing. I am only testing on windows and for 32 bit the ssl tests all succeed.
> 
> Were there any other tests that failed that I am not seeing.
> 
> Thanks
> 
> 
> -- 
> John Aherne
> 
> 
> 
> www.rocs.co.uk <http://www.rocs.co.uk/>
> 020 7223 7567
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150526/36869717/attachment-0002.html>

From trac at twistedmatrix.com  Sun May 31 00:05:17 2015
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 31 May 2015 06:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1433052317.26.6959886076554421657@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20150531/448a0660/attachment-0002.html>

