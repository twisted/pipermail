From heikowu at ceosg.de  Sat May  1 03:56:09 2004
From: heikowu at ceosg.de (Heiko Wundram)
Date: Sat, 1 May 2004 09:56:09 +0200
Subject: [Twisted-Python] How to write binary data from a protocol?
In-Reply-To: <200405010234.16055.waldbie@attglobal.net>
References: <200405010234.16055.waldbie@attglobal.net>
Message-ID: <200405010956.10512.heikowu@ceosg.de>

Am Samstag, 1. Mai 2004 04:34 schrieb Carl Waldbieser:
> I tried calling self.transport.write(), but I received
> an error indicating that only string data is accepted.

Have a look at the struct module. To pack an integer (actually an unsigned 
long) as a 4 byte string, you would do:

self.transport.write(struct.pack("!L",5))

On the receiving side, you would read 4 bytes, and unpack them using:

struct.unpack("!L",data)[0]

But all the rest is best explained using the docs of the struct module...

Heiko.



From soso_pub at yahoo.com  Sat May  1 08:22:40 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Sat, 1 May 2004 05:22:40 -0700 (PDT)
Subject: [Twisted-Python] Deferring execution to a specific thread
Message-ID: <20040501122240.53292.qmail@web14806.mail.yahoo.com>

Hello everybody,

I looked at twisted interaction with threads but I
couldn't find a way to defer execution to a specific
thread. I need this because I have exactly one
connection (no more connections possible) to the
database and all database operations have to be placed
in the same thread.
Is there a way to handle situations like this? Any
suggestion appreciated.

Thanks,
Sorin



	
		
__________________________________
Do you Yahoo!?
Win a $20,000 Career Makeover at Yahoo! HotJobs  
http://hotjobs.sweepstakes.yahoo.com/careermakeover 



From sam at SpinwardStars.com  Sat May  1 12:23:54 2004
From: sam at SpinwardStars.com (Samuel Reynolds)
Date: Sat, 01 May 2004 10:23:54 -0600
Subject: [Twisted-Python] Deferring execution to a specific thread
In-Reply-To: <20040501122240.53292.qmail@web14806.mail.yahoo.com>
References: <20040501122240.53292.qmail@web14806.mail.yahoo.com>
Message-ID: <6.0.1.1.0.20040501101840.026bde88@pop.mindspring.com>

At 2004-05-01 05:22 AM -0700, you wrote:
>Hello everybody,
>
>I looked at twisted interaction with threads but I
>couldn't find a way to defer execution to a specific
>thread. I need this because I have exactly one
>connection (no more connections possible) to the
>database and all database operations have to be placed
>in the same thread.
>Is there a way to handle situations like this? Any
>suggestion appreciated.
>
>Thanks,
>Sorin

Maybe...
Post the deferred to a queue *and* return it to the caller;
only the query thread reads from that queue. On completion
of the query, mark the deferred complete (is that right, gurus?)
and delete it from the queue.

- Sam

__________________________________________________________
Spinward Stars, LLC                        Samuel Reynolds
Software Consulting and Development           303-805-1446
http://SpinwardStars.com/            sam at SpinwardStars.com 




From soso_pub at yahoo.com  Sat May  1 12:45:23 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Sat, 1 May 2004 09:45:23 -0700 (PDT)
Subject: [Twisted-Python] Deferring execution to a specific thread
In-Reply-To: <6.0.1.1.0.20040501101840.026bde88@pop.mindspring.com>
Message-ID: <20040501164523.28885.qmail@web14808.mail.yahoo.com>

Hi,

--- Samuel Reynolds <sam at SpinwardStars.com> wrote:
> Maybe...
> Post the deferred to a queue *and* return it to the
> caller;
> only the query thread reads from that queue. On
> completion
> of the query, mark the deferred complete (is that
> right, gurus?)
> and delete it from the queue.
> 
> - Sam

Yes, only that using deferToThread does not guarantee
that the operation will be deferred to the same
thread. 
I thought about limiting the thread pool to exactly 1
thread but it is no option because in the future I
might need othr usual worker threads.
Anyway, I solved it using a custom thread and call in
the main thread with callFromThread.
I thought there might be a way to defer to a specific
thread so I don't need to use custom threads but it's
alright like this also.

Sorin



	
		
__________________________________
Do you Yahoo!?
Win a $20,000 Career Makeover at Yahoo! HotJobs  
http://hotjobs.sweepstakes.yahoo.com/careermakeover 



From soso_pub at yahoo.com  Sat May  1 15:20:29 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Sat, 1 May 2004 12:20:29 -0700 (PDT)
Subject: [Twisted-Python] setUnjellyableForClass
Message-ID: <20040501192029.40622.qmail@web14811.mail.yahoo.com>

Hi all, 

Is it possible to skip this declaration for classes
that I want to pass remotely? I have many data holding
classes and I am not interested in security so it's
kinda verbose to call setUnjellyableForClass for every
class that I want to pass remotely.

Thanks,
Sorin


	
		
__________________________________
Do you Yahoo!?
Win a $20,000 Career Makeover at Yahoo! HotJobs  
http://hotjobs.sweepstakes.yahoo.com/careermakeover 



From andrew-twisted at puzzling.org  Tue May  4 08:10:54 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 4 May 2004 22:10:54 +1000
Subject: [Twisted-Python] newjelly -- mature or forgotten?
Message-ID: <20040504121054.GB32487@frobozz>

What's the status of newjelly?  Should we consider making it the real jelly
for the next major release?  It seems to have been forgotten about, although
it still passes the same tests that jelly does, and the pb and spread tests
also pass with newjelly, so I presume it's working fine... so why hasn't it
replaced the current jelly.py?

We have bug reports (and patches!) sitting in the issue tracker for jelly,
e.g. http://twistedmatrix.com/users/roundup.twistd/twisted/issue426.  That
one is, I think, fixed in newjelly, so I don't know if the better fix is to
apply the given patch, or to make newjelly the standard jelly.

Any thoughts?

-Andrew.




From golux at comcast.net  Thu May  6 17:57:13 2004
From: golux at comcast.net (Stephen C. Waterbury)
Date: Thu, 06 May 2004 17:57:13 -0400
Subject: [Twisted-Python] t.p.http handling of multipart/form-data
Message-ID: <409AB4B9.3050605@comcast.net>

Hey http rewriting team ...
(or more specifically foom, I think :)

I'm (for my sins, no doubt) using the multipart/form-data
implementation in t.p.http to transfer files, and it works
okay but could be improved.  I'm sure this is not at the
top of your priority list for the rewrite (or even *on* it,
probably :), but I'd just like to go on record as in favor
of a possible enhancement.  Let me know if I should put
this into the issue tracker as a feature request.

(1)  Access to enclosure headers

The way request arg processing works currently, it doesn't
parse the headers from the MIME enclosure, which includes some
useful stuff:  Content-Type, Content-Transfer-Encoding, and
Content-Disposition (which has the "filename" attribute that
browsers use for the local filename -- nice to have for some
use cases).  This is a documented deficiency of
cgi.parse_multipart -- it's recommended to use cgi.FieldStorage
to parse the nested parts (also for more "flexibility" in
handling of large data, according to the cgi module docs).
I discussed this earlier with Itamar, and IIRC he didn't want
to use FieldStorage because it blocked (right Itamar? :).

(2)  [not a big deal] Multiple enclosures.

This is just a "would be nice".  It's easy enough to do several
transfers, but a single one would be more efficient, especially
in the case of a lot of small files ... arguably there are lots
of ways to get around it (zip, etc.), which is why it's not
a high priority.

Cheers,
Steve




From golux at comcast.net  Thu May  6 18:50:33 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Thu, 06 May 2004 18:50:33 -0400
Subject: [Twisted-Python] t.p.http handling of multipart/form-data
In-Reply-To: <409AB4B9.3050605@comcast.net>
References: <409AB4B9.3050605@comcast.net>
Message-ID: <409AC139.80306@comcast.net>

Oops -- never mind, it's covered in Issue 77 ... I forgot
about that one.  Sorry about the wasted bandwidth!  :/



From itamar at itamarst.org  Fri May  7 18:14:32 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 07 May 2004 18:14:32 -0400
Subject: [Twisted-Python] New components questions
Message-ID: <1083968071.13457.170.camel@sheriffpony>

1. Currently, if c is a Componentized, IFoo(c, persist=False) will
bypass c.getComponent() and do standard lookup. Is it worth supporting
this at all? It'd make code cleaner if not, and integration with
zope.interface easier.

2. How do we package zope.interface package? We could:

  a. include copy of code, as e.g. twisted.interface, and have it
     replace itself with zope.interface if that exists. This opens
     us to possible _xmlplus style horribleness.
  b. install zope.interface in our setup.py if it doesn't exist.
  c. tell people to install it themselves.

3. Do we want our own adapter registry or not? Zope's global registry is
in zope.component, which is a whole new package we need to install and
backport to 2.2. And it has lots of other stuff which while interesting
and possibly useful means more cognitive overhead. My current code has
its own registry and does not require zope.component. The downside is
that if we have our own registry, code that uses both Twisted and
zope.component will cause adaptation to an interface will be slower
because it will need to check two registries.
 
-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From radix at twistedmatrix.com  Fri May  7 18:22:21 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 07 May 2004 18:22:21 -0400
Subject: [Twisted-Python] twisted on os x: cfreactor or kqreactor?
In-Reply-To: <Pine.OSX.4.58.0404230852200.21404@slither.local>
References: <Pine.OSX.4.58.0404230852200.21404@slither.local>
Message-ID: <409C0C1D.1050805@twistedmatrix.com>

rayg wrote:
> i just created a fink package for PyKQeue
...

Ahem. Pardon this repost, it was a moderator error.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040507/f15cf5ab/attachment.pgp 

From radix at twistedmatrix.com  Fri May  7 18:31:12 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 07 May 2004 18:31:12 -0400
Subject: [Twisted-Python] New components questions
In-Reply-To: <1083968071.13457.170.camel@sheriffpony>
References: <1083968071.13457.170.camel@sheriffpony>
Message-ID: <409C0E30.3080202@twistedmatrix.com>

Itamar Shtull-Trauring wrote:
> 1. Currently, if c is a Componentized, IFoo(c, persist=False) will
> bypass c.getComponent() and do standard lookup. Is it worth supporting
> this at all? It'd make code cleaner if not, and integration with
> zope.interface easier.

AFAIC, persist= argument to adaptation doesn't make sense and shouldn't 
be worried about much. Deprecated backwards compatibility would be 
*nice*, of course, but don't worry about it if it's a big problem and 
nobody pipes up about the fact they're using it.

> 2. How do we package zope.interface package? We could:
> 
>   a. include copy of code, as e.g. twisted.interface, and have it
>      replace itself with zope.interface if that exists. This opens
>      us to possible _xmlplus style horribleness.
>   b. install zope.interface in our setup.py if it doesn't exist.
>   c. tell people to install it themselves.

Definitely B or C... probably B, unless distutils grows automatic 
dependency downloading/management. :-P

> 3. Do we want our own adapter registry or not? Zope's global registry is
> in zope.component, which is a whole new package we need to install and
> backport to 2.2. And it has lots of other stuff which while interesting
> and possibly useful means more cognitive overhead. My current code has
> its own registry and does not require zope.component. The downside is
> that if we have our own registry, code that uses both Twisted and
> zope.component will cause adaptation to an interface will be slower
> because it will need to check two registries.

Is the current situation duplicating code? If a "registry" is basically 
just a big dict or something, then no big deal... but I think sharing 
code is a good idea, if there is a significant amount of code involved.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040507/0ae43eef/attachment.pgp 

From itamar at itamarst.org  Fri May  7 18:57:22 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 07 May 2004 18:57:22 -0400
Subject: [Twisted-Python] New components questions
In-Reply-To: <409C0E30.3080202@twistedmatrix.com>
References: <1083968071.13457.170.camel@sheriffpony>
	<409C0E30.3080202@twistedmatrix.com>
Message-ID: <1083970642.16865.180.camel@sheriffpony>

On Fri, 2004-05-07 at 18:31, Christopher Armstrong wrote:
> Itamar Shtull-Trauring wrote:
> > 1. Currently, if c is a Componentized, IFoo(c, persist=False) will
> > bypass c.getComponent() and do standard lookup. Is it worth supporting
> > this at all? It'd make code cleaner if not, and integration with
> > zope.interface easier.
> 
> AFAIC, persist= argument to adaptation doesn't make sense and shouldn't 
> be worried about much. Deprecated backwards compatibility would be 
> *nice*, of course, but don't worry about it if it's a big problem and 
> nobody pipes up about the fact they're using it.

I have full backwards compat already, though I'd encourage people to use
zope's code directly instead of the compat layer. Question is if this
specific backwards compat feature can be dropped (this will allow
Componentized to work with straight-off zope.interface correctly, right
now it only works via backwards-compat code). That is, I am asking if
persist=False can be dropped for Componentized.

> Is the current situation duplicating code? If a "registry" is basically 
> just a big dict or something, then no big deal... but I think sharing 
> code is a good idea, if there is a significant amount of code involved.

No, the zope.interface has the class definition for a registry,
zope.component just adds a little utility wrapper around it and provides
a global *instance* of the registry that apps can use.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From radix at twistedmatrix.com  Fri May  7 19:04:38 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 07 May 2004 19:04:38 -0400
Subject: [Twisted-Python] New components questions
In-Reply-To: <1083970642.16865.180.camel@sheriffpony>
References: <1083968071.13457.170.camel@sheriffpony>	<409C0E30.3080202@twistedmatrix.com>
	<1083970642.16865.180.camel@sheriffpony>
Message-ID: <409C1606.70809@twistedmatrix.com>

Itamar Shtull-Trauring wrote:
>>AFAIC, persist= argument to adaptation doesn't make sense and shouldn't 
>>be worried about much. Deprecated backwards compatibility would be 
>>*nice*, of course, but don't worry about it if it's a big problem and 
>>nobody pipes up about the fact they're using it.
> 
> 
> I have full backwards compat already, though I'd encourage people to use
> zope's code directly instead of the compat layer. Question is if this
> specific backwards compat feature can be dropped (this will allow
> Componentized to work with straight-off zope.interface correctly, right
> now it only works via backwards-compat code). That is, I am asking if
> persist=False can be dropped for Componentized.

I think so.

>>Is the current situation duplicating code? If a "registry" is basically 
>>just a big dict or something, then no big deal... but I think sharing 
>>code is a good idea, if there is a significant amount of code involved.
> 
> No, the zope.interface has the class definition for a registry,
> zope.component just adds a little utility wrapper around it and provides
> a global *instance* of the registry that apps can use.

Hmm. How about using their registry if it's available?

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040507/889c805e/attachment.pgp 

From foom at fuhm.net  Fri May  7 19:10:49 2004
From: foom at fuhm.net (James Y Knight)
Date: Fri, 7 May 2004 19:10:49 -0400
Subject: [Twisted-Python] New components questions
In-Reply-To: <1083968071.13457.170.camel@sheriffpony>
References: <1083968071.13457.170.camel@sheriffpony>
Message-ID: <C76F2EB4-A07B-11D8-9424-000A95A50FB2@fuhm.net>


On May 7, 2004, at 6:14 PM, Itamar Shtull-Trauring wrote:

> 1. Currently, if c is a Componentized, IFoo(c, persist=False) will
> bypass c.getComponent() and do standard lookup. Is it worth supporting
> this at all? It'd make code cleaner if not, and integration with
> zope.interface easier.

No. The only places I've seen persist=False used, it's been a pure 
optimization. E.g. "I know I never want persistence, don't bother 
checking for me". I don't think anyone would cry if it went away. At 
least, I *hope* noone has been insane enough to depend on it.

> 2. How do we package zope.interface package? We could:
>
>   a. include copy of code, as e.g. twisted.interface, and have it
>      replace itself with zope.interface if that exists. This opens
>      us to possible _xmlplus style horribleness.
>   b. install zope.interface in our setup.py if it doesn't exist.
>   c. tell people to install it themselves.

I'd say "b", especially since "c" doesn't appear to be possible at all 
right now? For packaged versions, we should of course not include 
zope.interface at all, but simply depend on its package.

> 3. Do we want our own adapter registry or not? Zope's global registry 
> is
> in zope.component, which is a whole new package we need to install and
> backport to 2.2. And it has lots of other stuff which while interesting
> and possibly useful means more cognitive overhead. My current code has
> its own registry and does not require zope.component. The downside is
> that if we have our own registry, code that uses both Twisted and
> zope.component will cause adaptation to an interface will be slower
> because it will need to check two registries.

Wait, isn't the recommended path for new code that uses twisted 
supposed to be "use zope directly, not our compatibility wrappers"? How 
can we say that if we don't use/support the standard zope registry? 
What is the actual downside to using their registry? You don't have to 
tell people about all the crazy stuff you can do with it, just the one 
"registry adapter" call that they actually need.

James




From itamar at itamarst.org  Fri May  7 19:15:41 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 07 May 2004 19:15:41 -0400
Subject: [Twisted-Python] New components questions
In-Reply-To: <C76F2EB4-A07B-11D8-9424-000A95A50FB2@fuhm.net>
References: <1083968071.13457.170.camel@sheriffpony>
	<C76F2EB4-A07B-11D8-9424-000A95A50FB2@fuhm.net>
Message-ID: <1083971740.13456.184.camel@sheriffpony>

On Fri, 2004-05-07 at 19:10, James Y Knight wrote:

> Wait, isn't the recommended path for new code that uses twisted 
> supposed to be "use zope directly, not our compatibility wrappers"? How 
> can we say that if we don't use/support the standard zope registry? 

I'd say "use zope.interface directly except for register() for
registering adapters, Componentized and Adapter which are in
t.p.components". And if I do what Chris suggested that will be alias for
zope's registry if it's installed.

> What is the actual downside to using their registry? You don't have to 
> tell people about all the crazy stuff you can do with it, just the one 
> "registry adapter" call that they actually need.

Need to backport another package to 2.2, distribute it and keep it
backported, mainly.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From foom at fuhm.net  Fri May  7 20:22:45 2004
From: foom at fuhm.net (James Y Knight)
Date: Fri, 7 May 2004 20:22:45 -0400
Subject: [Twisted-Python] New components questions
In-Reply-To: <1083971740.13456.184.camel@sheriffpony>
References: <1083968071.13457.170.camel@sheriffpony>
	<C76F2EB4-A07B-11D8-9424-000A95A50FB2@fuhm.net>
	<1083971740.13456.184.camel@sheriffpony>
Message-ID: <D4455045-A085-11D8-9424-000A95A50FB2@fuhm.net>

On May 7, 2004, at 7:15 PM, Itamar Shtull-Trauring wrote:
> I'd say "use zope.interface directly except for register() for
> registering adapters, Componentized and Adapter which are in
> t.p.components". And if I do what Chris suggested that will be alias 
> for
> zope's registry if it's installed.

That sounds good to me. And if such a time comes as we actually 
want/need the extra zope registry features, we can either backport it 
then, or else 2.2 will be obsolete and we'll have to backport it to 
2.3. ;) But in any case, old code will be automatically compatible.

James




From glyph at divmod.com  Fri May  7 22:17:24 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Fri, 07 May 2004 22:17:24 -0400
Subject: [Twisted-Python] New components questions
In-Reply-To: <D4455045-A085-11D8-9424-000A95A50FB2@fuhm.net>
References: <1083968071.13457.170.camel@sheriffpony>
	<C76F2EB4-A07B-11D8-9424-000A95A50FB2@fuhm.net>
	<1083971740.13456.184.camel@sheriffpony>
	<D4455045-A085-11D8-9424-000A95A50FB2@fuhm.net>
Message-ID: <1083982644.19334.49.camel@kazekage>

On Fri, 2004-05-07 at 20:22, James Y Knight wrote:
> On May 7, 2004, at 7:15 PM, Itamar Shtull-Trauring wrote:
> > I'd say "use zope.interface directly except for register() for
> > registering adapters, Componentized and Adapter which are in
> > t.p.components". And if I do what Chris suggested that will be alias 
> > for
> > zope's registry if it's installed.
> 
> That sounds good to me. And if such a time comes as we actually 
> want/need the extra zope registry features, we can either backport it 
> then, or else 2.2 will be obsolete and we'll have to backport it to 
> 2.3. ;) But in any case, old code will be automatically compatible.

Why do we not want to provide this kind of aliasing for the whole
interfaces package in order to avoid packaging issues?  I still think
that importing twisted.zope.interface is less problematic than importing
zope directly.  (It may be desireable for us to rev components less
frequently than zope, for example.)

What exactly about the _xmlplus mess made it a nightmare and why?  I
have vague memories of horribleness but I gave up too early to be
seriously scarred.




From glyph at divmod.com  Fri May  7 22:44:05 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Fri, 07 May 2004 22:44:05 -0400
Subject: [Twisted-Python] New components questions
In-Reply-To: <409C1606.70809@twistedmatrix.com>
References: <1083968071.13457.170.camel@sheriffpony>
	<409C0E30.3080202@twistedmatrix.com>
	<1083970642.16865.180.camel@sheriffpony>
	<409C1606.70809@twistedmatrix.com>
Message-ID: <1083984245.19334.102.camel@kazekage>

On Fri, 2004-05-07 at 19:04, Christopher Armstrong wrote:
> Itamar Shtull-Trauring wrote:

> > I have full backwards compat already, though I'd encourage people to use
> > zope's code directly instead of the compat layer. Question is if this
> > specific backwards compat feature can be dropped (this will allow
> > Componentized to work with straight-off zope.interface correctly, right
> > now it only works via backwards-compat code). That is, I am asking if
> > persist=False can be dropped for Componentized.
> I think so.

Yeah. agreed.  Just make sure that the _adapter_ can still say that it
doesn't want to be persistent; code that really, really seriously wants
to remove a persistent adapter after it's created one can do just that;
componentized.unsetComponent.

Is it possible that we can move to a new-style Componentized somewhere
else?  There are a lot of slightly-incompatible changes I'd like to
make, most especially to slotlessly subclass dict, so that the unweildy
names like 'setComponent' and 'unsetComponent' become 'x[IY] = y' and
'del x[IY]', and to save space on what should be as lightweight an
object as possible...

> Hmm. How about using their registry if it's available?

I do like this idea.  How do we determine if it's available though?  It
seems like there could be a lot of edge cases.

Thank you, Itamar, for doing all this work.




From itamar at itamarst.org  Fri May  7 22:57:04 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 07 May 2004 22:57:04 -0400
Subject: [Twisted-Python] New components questions
In-Reply-To: <1083982644.19334.49.camel@kazekage>
References: <1083968071.13457.170.camel@sheriffpony>
	<C76F2EB4-A07B-11D8-9424-000A95A50FB2@fuhm.net>
	<1083971740.13456.184.camel@sheriffpony>
	<D4455045-A085-11D8-9424-000A95A50FB2@fuhm.net>
	<1083982644.19334.49.camel@kazekage>
Message-ID: <1083985024.13457.190.camel@sheriffpony>

On Fri, 2004-05-07 at 22:17, Glyph Lefkowitz wrote:

> What exactly about the _xmlplus mess made it a nightmare and why?  I
> have vague memories of horribleness but I gave up too early to be
> seriously scarred.

1. User installs Twisted which has z.i v0.9
2. User runs software happily
3. User installs z.i v0.91, twisted now uses thaat
4. Software suddenly breaks due to change in z.i - but it's very
confusing why because as far as user is concerned they didn't change
*twisted*.

Except it's in practice unlikely.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From itamar at itamarst.org  Fri May  7 22:59:35 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 07 May 2004 22:59:35 -0400
Subject: [Twisted-Python] New components questions
In-Reply-To: <1083984245.19334.102.camel@kazekage>
References: <1083968071.13457.170.camel@sheriffpony>
	<409C0E30.3080202@twistedmatrix.com>
	<1083970642.16865.180.camel@sheriffpony>
	<409C1606.70809@twistedmatrix.com>
	<1083984245.19334.102.camel@kazekage>
Message-ID: <1083985174.25586.194.camel@sheriffpony>

On Fri, 2004-05-07 at 22:44, Glyph Lefkowitz wrote:

> Yeah. agreed.  Just make sure that the _adapter_ can still say that it
> doesn't want to be persistent; code that really, really seriously wants
> to remove a persistent adapter after it's created one can do just that;
> componentized.unsetComponent.

That's internal code in Adapter and Componentized, no? I won't be
touching that.

> Is it possible that we can move to a new-style Componentized somewhere
> else?  There are a lot of slightly-incompatible changes I'd like to
> make, most especially to slotlessly subclass dict, so that the unweildy
> names like 'setComponent' and 'unsetComponent' become 'x[IY] = y' and
> 'del x[IY]', and to save space on what should be as lightweight an
> object as possible...

Sure, think up a new name. To be honest, I think the way Componentized
interacts with Adapter is ugly. I haven't looked at it closely enough to
be sure exactly why - I just glanced at it, but really I'd think a
special method that returns some info to the Componentized would be
cleaner than checking attributes. Or something.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From itamar at itamarst.org  Fri May  7 23:28:02 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 07 May 2004 23:28:02 -0400
Subject: [Twisted-Python] Reading material
Message-ID: <1083986881.25587.201.camel@sheriffpony>

For PB developers:
http://research.sun.com/techrep/1994/smli_tr-94-29.pdf

For people working on networking in general:
http://web.mit.edu/Saltzer/www/publications/endtoend/endtoend.txt

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From itamar at itamarst.org  Fri May  7 23:32:45 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 07 May 2004 23:32:45 -0400
Subject: [Twisted-Python] You also want to read this
Message-ID: <1083987165.13457.203.camel@sheriffpony>

http://intertwingly.net/stories/2004/05/04/reality-is-corrosive.html




From gary at zope.com  Mon May 10 10:45:35 2004
From: gary at zope.com (Gary Poster)
Date: Mon, 10 May 2004 10:45:35 -0400
Subject: Dependency mgmt (was Re: [Twisted-Python] New components questions)
In-Reply-To: <409C0E30.3080202@twistedmatrix.com>
References: <1083968071.13457.170.camel@sheriffpony>
	<409C0E30.3080202@twistedmatrix.com>
Message-ID: <409F958F.2000609@zope.com>



Christopher Armstrong wrote:

> Itamar Shtull-Trauring wrote:
>
>> 2. How do we package zope.interface package? We could:
>>
>>   a. include copy of code, as e.g. twisted.interface, and have it
>>      replace itself with zope.interface if that exists. This opens
>>      us to possible _xmlplus style horribleness.
>>   b. install zope.interface in our setup.py if it doesn't exist.
>>   c. tell people to install it themselves.
>
>
> Definitely B or C... probably B, unless distutils grows automatic 
> dependency downloading/management. :-P
>
FWIW Fred Drake (PythonLabs/ZC) is working on zpkg: a packaging and 
dependency management tool, integrated with distutils.  I believe the 
intent is to propose this as a Python tool eventually (presumably with a 
less "z..."-like name?).  I know the immediate intent is to allow 
various different distributions of the Zope 3 code (including perhaps 
just the interface package for you all) to be distributed.

That description doesn't give it much justice, but this should begin to:

http://zope.org/Members/fdrake/zpkgtools/

I believe Fred is still actively seeking feedback, and requests feedback 
and questions on zope3-dev at zope.org.

Gary



From jsaker at americanrelay.com  Mon May 10 11:13:02 2004
From: jsaker at americanrelay.com (James R. Saker Jr.)
Date: Mon, 10 May 2004 10:13:02 -0500
Subject: [Twisted-Python] Missing something basic on defer and postgresql
Message-ID: <1084201982.26071.90.camel@localhost>

I think I'm missing something rather basic and would greatly appreciate
any suggestions.

After working through the Twisted RDBMS example (with no luck - the
second RDBMS example gets a deferred but fails to run
.addCallback(printResult), I thought I'd read more about deferreds in
its own section and made a simple postgresql example using the third
example in the Deferreds section. 

When I run this (with database = postgresql, dbname = mydb, table =
myuser), it yields the following:

Got to getData
got to gotResults with name = Joe

...but never runs addCallback(self, _toHTML). Apparently I'm missing
something pretty obvious about callbacks - and may be the same issue I
dealt with in the RDBMS example. Any suggestions? 

jamie


##~ begin dbserver.py
from twisted.enterprise import adbapi
from twisted.internet import reactor, defer
                                                                                                                    
dbpool = adbapi.ConnectionPool("psycopg", 'dbname=mydb user=postgres')
                                                                                                                    
class Getter:
   def gotResults(self, name):
      print "got to gotResults with name = %s" % name
      return dbpool.runQuery("SELECT age FROM myuser WHERE name = '%s'"
% name)
                                                                                                                    
   def _toHTML(self, r):
      print "Got to _toHTML"
      print "Result is: %s" % r
                                                                                                                    
   def getData(self, x):
      self.d = defer.Deferred()
      print "Got to getData"
      reactor.callLater(2, self.gotResults, x)
      self.d.addCallback(self._toHTML)
      return self.d
                                                                                                                    
def printData(d):
      "Got to printData"
      print d
                                                                                                                    
def printError(failure):
      import sys
      sys.stderr.write(str(failure))
                                                                                                                    
if __name__ == '__main__':
                                                                                                                    
      g = Getter()
      d = g.getData('Joe')
      d.addCallback(printData)
      d.addErrback(printError)
                                                                                                                    
reactor.callLater(4, reactor.stop); reactor.run()



##------------postgresql database table info----------------------------

mydb=# select * from myuser;
 pkid |  name  | age
------+--------+-----
    1 | Joe    |  36
    2 | Sally  |  15
    3 | Peanut |   5
(3 rows)

mydb=# SELECT age FROM myuser WHERE name = 'Joe';
 age
-----
  36
(1 row)







From glyph at divmod.com  Mon May 10 11:38:16 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 10 May 2004 11:38:16 -0400
Subject: [Twisted-Python] Missing something basic on defer and postgresql
In-Reply-To: <1084201982.26071.90.camel@localhost>
References: <1084201982.26071.90.camel@localhost>
Message-ID: <1084203496.2761.12.camel@kazekage>

On Mon, 2004-05-10 at 11:13, James R. Saker Jr. wrote:
> I think I'm missing something rather basic and would greatly appreciate
> any suggestions.

You're never calling self.d.callback() with a value, and thus self.d
never fires.

Perhaps you are interested in the Deferred returned from runQuery, not
creating your own?




From radix at twistedmatrix.com  Mon May 10 11:41:28 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 10 May 2004 11:41:28 -0400
Subject: [Twisted-Python] Missing something basic on defer and postgresql
In-Reply-To: <1084201982.26071.90.camel@localhost>
References: <1084201982.26071.90.camel@localhost>
Message-ID: <409FA2A8.7050109@twistedmatrix.com>

James R. Saker Jr. wrote:
> I think I'm missing something rather basic and would greatly appreciate
> any suggestions.
> 
> After working through the Twisted RDBMS example (with no luck - the
> second RDBMS example gets a deferred but fails to run
> .addCallback(printResult), I thought I'd read more about deferreds in
> its own section and made a simple postgresql example using the third
> example in the Deferreds section. 
> 
> When I run this (with database = postgresql, dbname = mydb, table =
> myuser), it yields the following:
> 
> Got to getData
> got to gotResults with name = Joe
> 
> ...but never runs addCallback(self, _toHTML). Apparently I'm missing
> something pretty obvious about callbacks - and may be the same issue I
> dealt with in the RDBMS example. Any suggestions? 
> 
> jamie


> ##~ begin dbserver.py
> from twisted.enterprise import adbapi
> from twisted.internet import reactor, defer
>                                                                                                                     
> dbpool = adbapi.ConnectionPool("psycopg", 'dbname=mydb user=postgres')
>                                                                                                                     
> class Getter:
>    def gotResults(self, name):
>       print "got to gotResults with name = %s" % name
>       return dbpool.runQuery("SELECT age FROM myuser WHERE name = '%s'"
> % name)
>                                                                                                                     
>    def _toHTML(self, r):
>       print "Got to _toHTML"
>       print "Result is: %s" % r
>                                                                                                                     
>    def getData(self, x):
>       self.d = defer.Deferred()
>       print "Got to getData"
>       reactor.callLater(2, self.gotResults, x)
>       self.d.addCallback(self._toHTML)
>       return self.d

Yeah, this is wrong. You've got two Deferreds here: the one you cerated 
manually in getData, and the one that runQuery returns. You're *throwing 
away* the one that runQuery returns, and you're never triggering a 
callback on the one that you're creating manually. It doesn't seem that 
there's a reason to create your own Deferred, anyway, so replace getData 
with this:

def getData(self, x):
     d = dbpool.runQuery("...") # no need for self.d, afaics
     d.addCallback(self._toHTML)
     return d

And get rid of gotResults.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040510/ae6a100c/attachment.pgp 

From radix at twistedmatrix.com  Mon May 10 11:44:28 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 10 May 2004 11:44:28 -0400
Subject: Dependency mgmt (was Re: [Twisted-Python] New components
	questions)
In-Reply-To: <409F958F.2000609@zope.com>
References: <1083968071.13457.170.camel@sheriffpony>	<409C0E30.3080202@twistedmatrix.com>
	<409F958F.2000609@zope.com>
Message-ID: <409FA35C.5090902@twistedmatrix.com>

Gary Poster wrote:
> FWIW Fred Drake (PythonLabs/ZC) is working on zpkg: a packaging and 

Yeah, I'm already aware, thanks.


-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040510/d81109cc/attachment.pgp 

From jsaker at americanrelay.com  Mon May 10 14:05:37 2004
From: jsaker at americanrelay.com (James R. Saker Jr.)
Date: Mon, 10 May 2004 13:05:37 -0500
Subject: [Twisted-Python] Indeed it works...
Message-ID: <1084212337.2195.2.camel@localhost>

Thanks Christopher and Glyph - indeed it works (this is all strange and
new to a long-time network engineer!)

Modified as Christopher suggested, it returns a tuple:

Result is: [(36,)]

Nifty... thanks!

Jamie







From behnel_ml at gkec.informatik.tu-darmstadt.de  Tue May 11 11:03:04 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Tue, 11 May 2004 17:03:04 +0200
Subject: [Twisted-Python] When do calls to transport.write() block ?
Message-ID: <40A0EB28.6060201@gkec.tu-darmstadt.de>

Hi everyone!

I have looked through quite a bit of Twisted's code by now, but I just can't manage to figure out how those transport.write()s work. The servers I looked through always come back to this without putting any special treatment into it.

My question is:

If a server starts sending as fast as it can, what will happen to the output queue? Will Twisted just eat up all memory with buffers? Will it start blocking? Will it open up a thread? What will it do?

Since this really is an important question, I'm sort of worried that it's not a big issue in the documentation...

Thanks for any hints,
Stefan




From behnel_ml at gkec.informatik.tu-darmstadt.de  Tue May 11 11:12:32 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Tue, 11 May 2004 17:12:32 +0200
Subject: [Twisted-Python] When do calls to transport.write() block ?
Message-ID: <40A0ED60.2070007@gkec.tu-darmstadt.de>

Hi everyone!

I have looked through quite a bit of Twisted's code by now, but I just can't manage to figure out how those transport.write()s work. The servers I looked through always come back to this without putting any special treatment into it.

My question is:

If a server starts sending as fast as it can, what will happen to the output queue? Will Twisted just eat up all memory with buffers? Will it start blocking? Will it open up a thread? What will it do?

Since this really is an important question, I'm sort of worried that it's not a big issue in the documentation...

Thanks for any hints,
Stefan





From itamar at itamarst.org  Tue May 11 11:21:10 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 11 May 2004 11:21:10 -0400
Subject: [Twisted-Python] When do calls to transport.write() block ?
In-Reply-To: <40A0ED60.2070007@gkec.tu-darmstadt.de>
References: <40A0ED60.2070007@gkec.tu-darmstadt.de>
Message-ID: <1084288870.9255.26.camel@sheriffpony>

On Tue, 2004-05-11 at 11:12, Stefan Behnel wrote:

> If a server starts sending as fast as it can, what will happen to the
> output queue? Will Twisted just eat up all memory with buffers? Will
> it start blocking? Will it open up a thread? What will it do?

It will eat up all your memory. You should, therefore, not do that.
Instead, use producers and consumers (this is e.g. how the web server
sends large files):

http://itamarst.org/writings/etech04/twisted_internet-101.html

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html





From behnel_ml at gkec.informatik.tu-darmstadt.de  Tue May 11 11:49:11 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Tue, 11 May 2004 17:49:11 +0200
Subject: [Twisted-Python] When do calls to transport.write() block ?
In-Reply-To: <1084288870.9255.26.camel@sheriffpony>
References: <40A0ED60.2070007@gkec.tu-darmstadt.de>
	<1084288870.9255.26.camel@sheriffpony>
Message-ID: <40A0F5F7.4020409@gkec.tu-darmstadt.de>

Thank you for your quick answer!

Itamar Shtull-Trauring wrote:
>>If a server starts sending as fast as it can, what will happen to the
>>output queue? Will Twisted just eat up all memory with buffers? Will
>>it start blocking? Will it open up a thread? What will it do?
> 
> It will eat up all your memory. You should, therefore, not do that.
> Instead, use producers and consumers (this is e.g. how the web server
> sends large files):
> 
> http://itamarst.org/writings/etech04/twisted_internet-101.html

That's about the idea I had about it, but I couldn't quite grasp it.

I'm curious though: wouldn't it be much more pythonic to allow users to register a generator with the transport? A generator usually does exactly what is expected from a pull-producer.

Do you/does anyone know if that's foreseen somewhere in Twisted, either now or in a later version?

Stefan



From itamar at itamarst.org  Tue May 11 12:04:23 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 11 May 2004 12:04:23 -0400
Subject: [Twisted-Python] When do calls to transport.write() block ?
In-Reply-To: <40A0F5F7.4020409@gkec.tu-darmstadt.de>
References: <40A0ED60.2070007@gkec.tu-darmstadt.de>
	<1084288870.9255.26.camel@sheriffpony>
	<40A0F5F7.4020409@gkec.tu-darmstadt.de>
Message-ID: <1084291462.9257.34.camel@sheriffpony>

On Tue, 2004-05-11 at 11:49, Stefan Behnel wrote:

> I'm curious though: wouldn't it be much more pythonic to allow users
> to register a generator with the transport? A generator usually does
> exactly what is expected from a pull-producer.

An iterator, you mean. Hmm, because even a pull producer may not have
data on hand, you'd need to have a special object which means "I don't
have data, sorry" that the iterator can return. And you'd still need API
for push producers. OTOH it probably would be more efficient.

What we were thinking of doing is getting rid of the concept of
producers altogether and just exposing "buffers empty and writable" and
"buffers full" callback events similar to dataReceived or
connectionLost.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From behnel_ml at gkec.informatik.tu-darmstadt.de  Tue May 11 12:50:19 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Tue, 11 May 2004 18:50:19 +0200
Subject: [Twisted-Python] When do calls to transport.write() block ?
In-Reply-To: <1084291462.9257.34.camel@sheriffpony>
References: <40A0ED60.2070007@gkec.tu-darmstadt.de>	<1084288870.9255.26.camel@sheriffpony>	<40A0F5F7.4020409@gkec.tu-darmstadt.de>
	<1084291462.9257.34.camel@sheriffpony>
Message-ID: <40A1044B.7010900@gkec.tu-darmstadt.de>

Hi!

Itamar Shtull-Trauring wrote:
> An iterator, you mean. Hmm, because even a pull producer may not have
> data on hand, you'd need to have a special object which means "I don't
> have data, sorry" that the iterator can return.

That would be "None", I guess. What else could it possibly mean to write None to the transport?


> And you'd still need API
> for push producers.

True. However, the registration methods could easily distinguish producers and iterators. So maybe this could be handled transparent for the API. It would not even break anything if the methods defaulted to using the object as a producer if it has the right methods and only check for iterator capabilities if it does not.


> What we were thinking of doing is getting rid of the concept of
> producers altogether and just exposing "buffers empty and writable" and
> "buffers full" callback events similar to dataReceived or
> connectionLost.

Sounds reasonable to me.

Thanks again for your help,
Stefan




From bob at redivi.com  Tue May 11 13:02:38 2004
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 11 May 2004 13:02:38 -0400
Subject: [Twisted-Python] When do calls to transport.write() block ?
In-Reply-To: <40A0F5F7.4020409@gkec.tu-darmstadt.de>
References: <40A0ED60.2070007@gkec.tu-darmstadt.de>
	<1084288870.9255.26.camel@sheriffpony>
	<40A0F5F7.4020409@gkec.tu-darmstadt.de>
Message-ID: <019959AA-A36D-11D8-BCDD-000A95686CD8@redivi.com>


On May 11, 2004, at 11:49 AM, Stefan Behnel wrote:

> Thank you for your quick answer!
>
> Itamar Shtull-Trauring wrote:
>>> If a server starts sending as fast as it can, what will happen to the
>>> output queue? Will Twisted just eat up all memory with buffers? Will
>>> it start blocking? Will it open up a thread? What will it do?
>> It will eat up all your memory. You should, therefore, not do that.
>> Instead, use producers and consumers (this is e.g. how the web server
>> sends large files):
>> http://itamarst.org/writings/etech04/twisted_internet-101.html
>
> That's about the idea I had about it, but I couldn't quite grasp it.
>
> I'm curious though: wouldn't it be much more pythonic to allow users 
> to register a generator with the transport? A generator usually does 
> exactly what is expected from a pull-producer.
>
> Do you/does anyone know if that's foreseen somewhere in Twisted, 
> either now or in a later version?

Generators/iterators aren't prevalent in Twisted because until 
relatively recently it didn't depend on Python 2.2 or later.

-bob




From jsaker at americanrelay.com  Wed May 12 15:52:34 2004
From: jsaker at americanrelay.com (James R. Saker Jr.)
Date: Wed, 12 May 2004 14:52:34 -0500
Subject: [Twisted-Python] adbapi/postgresql and xml-rpc
Message-ID: <1084391554.5169.24.camel@localhost>

Have a design question to pass to the list. I've gotten my distributed
app working - pulling snort data from a postgresql database via
twisted's adbapi and handling via xml-rpc - though xml-rpc is screaming
about not being able to serialize postgresql's timestamp format. 

For instance, this query works (using a query test client and a "take
any SQL string in and process it" xmlrpc method on the server local to
database):

# snipped python code setting things up. here's the xmlrpc call:
(answer,) = connection.remote("fetch", ('SELECT sid, cid, signature from
event LIMIT 5',))
print answer

prints:

[[1, 1, 1], [1, 2, 2], [1, 3, 1], [1, 4, 3], [1, 5, 1]]

(nice and easy to work with on client side)

but by adding the timestamp to the select query (SELECT sid, cid,
signature, timestamp...), I get the dreaded can't serialize output
error:

Traceback (most recent call last):
  File "x8.py", line 59, in ?
    (answer,) = connection.remote("fetch", ('SELECT sid, cid, signature,
timestamp from event LIMIT 5',))
## some deleted
  File "/usr/lib/python2.3/xmlrpclib.py", line 742, in close
    raise Fault(**self._stack[0])
xmlrpclib.Fault: <Fault 8002: "can't serialize output">


QUESTION: While I think I could build more precise queries on the server
side, e.g. xmlrpc_getAllSIDbyDate and massage timestamp and other
formats before dumping into xmlrpc, this might not be the most elegant
method. It makes every query something both ends have to be recoded for
- not just the client - simply because I can't get timestamp to pass
through XMLRPC. I've tried converting the tuples from the adbapi output
to strings before handing back but that has other issues.

Is this a limitation of XMLRPC that would merit using an approach like
PB instead? Eventually my text client will go the way of a Qt GUI and I
thought XMLRPC would make a nice lightweight distributed interface, but
the serialization issues are making me wonder if the approach is right.

Jamie






From golux at comcast.net  Wed May 12 16:30:57 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Wed, 12 May 2004 16:30:57 -0400
Subject: [Twisted-Python] adbapi/postgresql and xml-rpc
In-Reply-To: <1084391554.5169.24.camel@localhost>
References: <1084391554.5169.24.camel@localhost>
Message-ID: <40A28981.3060101@comcast.net>

James R. Saker Jr. wrote:

> QUESTION: While I think I could build more precise queries on the server
> side, e.g. xmlrpc_getAllSIDbyDate and massage timestamp and other
> formats before dumping into xmlrpc, this might not be the most elegant
> method. It makes every query something both ends have to be recoded for
> - not just the client - simply because I can't get timestamp to pass
> through XMLRPC. I've tried converting the tuples from the adbapi output
> to strings before handing back but that has other issues.
> 
> Is this a limitation of XMLRPC that would merit using an approach like
> PB instead? Eventually my text client will go the way of a Qt GUI and I
> thought XMLRPC would make a nice lightweight distributed interface, but
> the serialization issues are making me wonder if the approach is right.

I also send adbapi results over xml-rpc, using strftime to convert
the mxDateTimes to an ISO string format and then converting them
back to mx.DateTimes with DateTime.ISO.ParseDateTime.  Not elegant,
but it does the job.  Note that PB's jelly will also complain about
DateTimes.

Steve




From fog at initd.org  Wed May 12 18:25:24 2004
From: fog at initd.org (Federico Di Gregorio)
Date: Thu, 13 May 2004 00:25:24 +0200
Subject: [Twisted-Python] adbapi/postgresql and xml-rpc
In-Reply-To: <40A28981.3060101@comcast.net>
References: <1084391554.5169.24.camel@localhost> <40A28981.3060101@comcast.net>
Message-ID: <1084400724.2795.5.camel@localhost>

L? mercoled?, 2004/05/12 alle 16:30, -0400, Stephen Waterbury ha
scritto:
> > Is this a limitation of XMLRPC that would merit using an approach like
> > PB instead? Eventually my text client will go the way of a Qt GUI and I
> > thought XMLRPC would make a nice lightweight distributed interface, but
> > the serialization issues are making me wonder if the approach is right.
> 
> I also send adbapi results over xml-rpc, using strftime to convert
> the mxDateTimes to an ISO string format and then converting them
> back to mx.DateTimes with DateTime.ISO.ParseDateTime.  Not elegant,
> but it does the job.  Note that PB's jelly will also complain about

why don't you people switch to psycopg nd register a custom type
converter using new_type/register_type? you can easily nd automagically
convert dates and times to strings with a 3-lines callable object.

federico

-- 
Federico Di Gregorio                         http://people.initd.org/fog
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
  We are all dust, Saqi, so play the lute
                    We are all wind, Saqi, so bring wine. -- Omar Khayam
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Questa parte del messaggio =?ISO-8859-1?Q?=E8?= firmata
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040513/76f9d8ed/attachment.pgp 

From golux at comcast.net  Wed May 12 21:31:04 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Wed, 12 May 2004 21:31:04 -0400
Subject: [Twisted-Python] adbapi/postgresql and xml-rpc
In-Reply-To: <1084400724.2795.5.camel@localhost>
References: <1084391554.5169.24.camel@localhost> <40A28981.3060101@comcast.net>
	<1084400724.2795.5.camel@localhost>
Message-ID: <40A2CFD8.2060201@comcast.net>

Federico Di Gregorio wrote:
> L? mercoled?, 2004/05/12 alle 16:30, -0400, Stephen Waterbury ha
> scritto:
> 
>>>Is this a limitation of XMLRPC that would merit using an approach like
>>>PB instead? Eventually my text client will go the way of a Qt GUI and I
>>>thought XMLRPC would make a nice lightweight distributed interface, but
>>>the serialization issues are making me wonder if the approach is right.
>>
>>I also send adbapi results over xml-rpc, using strftime to convert
>>the mxDateTimes to an ISO string format and then converting them
>>back to mx.DateTimes with DateTime.ISO.ParseDateTime.  Not elegant,
>>but it does the job.  Note that PB's jelly will also complain about
> 
> why don't you people switch to psycopg nd register a custom type
> converter using new_type/register_type? you can easily nd automagically
> convert dates and times to strings with a 3-lines callable object.

Mine is part of a general type converter that I have (cook()/uncook())
that handles all types I need to serialize.  psycopg might make the 
implementation of my cook/uncook functions slightly more concise, but
right now they are independent of the specific dbapi that I use, so I
might want to keep it that way (more componentized ;).

- Steve




From soso_pub at yahoo.com  Thu May 13 14:18:07 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Thu, 13 May 2004 11:18:07 -0700 (PDT)
Subject: [Twisted-Python] Getting error code
Message-ID: <20040513181807.31293.qmail@web14803.mail.yahoo.com>

Hi,

Is there a way to extract the error code from a
Failure instance? For example when
clientConnectionFailed is called the 'value' field of
the Failure instance is 'Connection was refused by
other side: 10061: Unknown error.'. Can I get 10061
somehow as I don't feel safe  parsing this string.

Thanks,
Sorin



	
		
__________________________________
Do you Yahoo!?
Yahoo! Movies - Buy advance tickets for 'Shrek 2'
http://movies.yahoo.com/showtimes/movie?mid=1808405861 



From itamar at itamarst.org  Thu May 13 14:27:59 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 13 May 2004 14:27:59 -0400
Subject: [Twisted-Python] Getting error code
In-Reply-To: <20040513181807.31293.qmail@web14803.mail.yahoo.com>
References: <20040513181807.31293.qmail@web14803.mail.yahoo.com>
Message-ID: <1084472879.18231.102.camel@sheriffpony>

On Thu, 2004-05-13 at 14:18, Sorin C. wrote:

> Is there a way to extract the error code from a
> Failure instance? For example when
> clientConnectionFailed is called the 'value' field of
> the Failure instance is 'Connection was refused by
> other side: 10061: Unknown error.'. Can I get 10061
> somehow as I don't feel safe  parsing this string.

value.errno should do it. A better idea would be to go by exception
type, e.g. in this case you should be getting a
twisted.internet.error.ConnectionRefusedError or something instance as
the value object.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From jsaker at americanrelay.com  Thu May 13 14:42:37 2004
From: jsaker at americanrelay.com (James R. Saker Jr.)
Date: Thu, 13 May 2004 13:42:37 -0500
Subject: [Twisted-Python] XML-RPC & objects that won't serialize
Message-ID: <1084473757.11184.8.camel@localhost>


Steve writes:
>...then converting them back to mx.DateTimes with
DateTime.ISO.ParseDateTime.  Not elegant, but it does the job.  Note
that PB's jelly will also complain about DateTimes.

Yes; I also resorted to converting them before passing back to the
client. Was curious if there was a better way. Per Federico's post, I
actually started with psycopg but found several twisted references to
preferring pyPgSQL. I tested with about 110,000 records passed (in about
15-20 seconds - most of which tcpdump reports as data xfer activity) so
it's not impairing things much.

Overall, I'm really interested moving to a server-based ssh menu
interface (via conch presumably, though the documentation seems sparse
and stale and server examples somewhat limited; I've seen older posts
here on a similar thread. If I can get up to speed on all this, it might
be an area to volunteer my help) and a Qt client possibly implemented
through PB.

Twisted's terribly interested (and overwhelming at the same time).
Thanks all for being kind to this newb!

Jamie





From itamar at itamarst.org  Thu May 13 15:12:06 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 13 May 2004 15:12:06 -0400
Subject: [Twisted-Python] XML-RPC & objects that won't serialize
In-Reply-To: <1084473757.11184.8.camel@localhost>
References: <1084473757.11184.8.camel@localhost>
Message-ID: <1084475526.18231.141.camel@sheriffpony>

On Thu, 2004-05-13 at 14:42, James R. Saker Jr. wrote:

> I actually started with psycopg but found several twisted references to
> preferring pyPgSQL.

We had one of those (for no good reason!) in the enterpise howto. I got
rid of it yesterday.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From soso_pub at yahoo.com  Thu May 13 15:19:37 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Thu, 13 May 2004 12:19:37 -0700 (PDT)
Subject: [Twisted-Python] Getting error code
In-Reply-To: <1084472879.18231.102.camel@sheriffpony>
Message-ID: <20040513191937.6568.qmail@web14808.mail.yahoo.com>


--- Itamar Shtull-Trauring <itamar at itamarst.org>
wrote:
>  A better idea would be to
> go by exception
> type, e.g. in this case you should be getting a
> twisted.internet.error.ConnectionRefusedError or
> something instance as
> the value object.
 
Thanks, by type indeed is better.

Sorin



	
		
__________________________________
Do you Yahoo!?
Yahoo! Movies - Buy advance tickets for 'Shrek 2'
http://movies.yahoo.com/showtimes/movie?mid=1808405861 



From db3l at fitlinxx.com  Thu May 13 17:19:13 2004
From: db3l at fitlinxx.com (David Bolen)
Date: 13 May 2004 17:19:13 -0400
Subject: [Twisted-Python] PB locally logging errors from deferreds in
	remote_* methods
Message-ID: <uoeosrpny.fsf@fitlinxx.com>

I was wondering if anyone knew the rationale for why Twisted's PB logs
any errors (using log.err) that may be returned from a deferred that
has been returned in response to a remote_* call on a pb.Referenceable
object?  It seems like a fairly standard situation, where the error is
just something to be reflected back to the client.

For example, I've got a series of components in a system I'm working
on that were designed from the beginning to return deferreds from
their APIs, even when they operated locally (e.g., there's plenty of
use of defer.succeed() and defer.fail()).  This was specifically to
isolate calling code from the anticipated future case when some of
those components might be relocated remotely, and the application code
would be interacting with remote wrapper objects using PB to
communicate with the now relocated components.

So I'm working on the future case now, but found that whenever one of
my component entry points decided to return an error (which was always
done by sending a Failure up the deferred chain), while that error is
being reflected back to the wrapper object, my server side is also
logging the error on the console.

>From what I can see that's because pb.py uses _sendFailure as the
Errback for a deferred returned from a remote_* method, where
_sendFailure logs the error (with a prefix line as a log message, but
the failure object as an error message).  But to me this is like
logging every time a client application receives a proper error
notification to an API request.

If the remote_* methods were raise()ing the exceptions, I could
subclass pb.Error and then _sendError gets used instead, but there's
no equivalent on the deferred chain path.

For my own use, locally modifying pb.py to use _sendError in the
Errback rather than _sendFailure cleans it up, but I was wondering if
anyone else had noticed this and/or felt that _sendError was a more
appropriate Errback in the first place?  It doesn't feel right to
consider it a bug, since it feels more like a design decision, but I'd
think it would be nice to have at least as much control over the local
logging of errors in the deferred chain as you have with locally
raised exceptions.

Thanks.

-- David




From barry at python.org  Thu May 13 18:19:56 2004
From: barry at python.org (Barry Warsaw)
Date: Thu, 13 May 2004 18:19:56 -0400
Subject: [Twisted-Python] New email FeedParser
Message-ID: <1084486795.28228.812.camel@anthem.wooz.org>

At Pycon, I was talking with Glyph and others about the email parser in
Python 2.3.  Anthony Baxter, Thomas Wouters and I were having a little
email-sig sprint, and we all agreed about the major problems with the
current email parser.

- It can throw exceptions parsing some messages.  These exceptions can
be difficult to handle.

- You must slurp the entire message into memory before you can start
parsing it.

Over in the email-sig we've been talking and working on a new parser,
called the FeedParser which eliminates both of these problems.  This
parser also has the advantage of being much more RFC compliant, IMO
<2046 wink>.  In fact, we now have a new FeedParser.py in Python 2.4cvs
(slated to be email 3.0) which I think does a very good job of parsing
all manner of valid and invalid emails.

The old email.Parser.Parser interface continues to exist for backward
compatibility.  The docs have not been updated yet, but the unit tests
have.  Note that the FeedParser, if it encounters broken MIME, will add
'defects' to a message object and continue on as best it can.  You can
check the message's .defects attribute; if it exists it will be a list
of instances providing more information about what type(s) of defects
were encounter.

To use it, you instantiate an email.FeedParser.FeedParser and
continually call its .feed() method, which takes a single argument of
arbitrary length string data.  The data need not be a complete line,
although the FeedParser will split it into lines (using any of the three
common line endings), gulping input a line at a time.  Internally, the
parsing routines are generators that yield when they need more data
(feed() itself just returns).  When you've feed it all the data there's
ever going to be, you call .close() on the parser; the rest of the data
is consumed and you get back the root email object.

Because I think we're largely done with the FeedParser[1], and because
some of the Twisted guys were interested in this stuff, I'm sending this
message so you can grab the new parser and see if it's going to fit the
bill.  For now, you'll have to get it out of Python's cvs, but at some
point when we've addressed the other issues in the email package, we'll
make a distutils release.

Note that email 3.0 will be compatible with Python 2.3 but nothing
earlier.  Please follow up with any discussions to email-sig at python.org.

Enjoy,
-Barry

[1] Although see these messages for open issues:
http://mail.python.org/pipermail/email-sig/2004-May/000114.html
http://mail.python.org/pipermail/email-sig/2004-May/000118.html





From laforge49 at yahoo.co.in  Fri May 14 03:17:42 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Fri, 14 May 2004 08:17:42 +0100 (BST)
Subject: [Twisted-Python] bsddb?
Message-ID: <20040514071742.53917.qmail@web8306.mail.in.yahoo.com>

New to twisted, interested in porting a project, but I can't find anything on using bsddb.
 
I assume I need a dedicated thread. Has anyone else worked on this?
 
(I did a web search, but couldn't relate what I found to any code in the 1.2 release I just downloaded. I also read the May list archive.)
 
Thanks!
 
Bill

Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040514/1047b724/attachment.htm 

From matt at pollenation.net  Fri May 14 07:00:07 2004
From: matt at pollenation.net (Matt Goodall)
Date: Fri, 14 May 2004 12:00:07 +0100
Subject: [Twisted-Python] bsddb?
In-Reply-To: <20040514071742.53917.qmail@web8306.mail.in.yahoo.com>
References: <20040514071742.53917.qmail@web8306.mail.in.yahoo.com>
Message-ID: <1084532407.1449.18.camel@harold>

On Fri, 2004-05-14 at 08:17, Bill la Forge wrote:
> New to twisted, interested in porting a project, but I can't find
> anything on using bsddb.

Open a bdb at the start of the app, use it as necessary, close the bdb
at the end of the app. What could be easier ;-).

It's probably worth creating a Service
(http://twistedmatrix.com/documents/current/api/) to help manage the
bsddb resource.

>  I assume I need a dedicated thread. Has anyone else worked on this?

You probably only need a thread for operations that you know will take a
long time. Retrieving a single, keyed object should be so quick with
bsdbd that it's probably not with the effort/expense of a thread. On the
other hand, iterating an entire bdb will (possibly) take quite some
time, so a thread may be a good idea. (Note that Python's bsdbd is not
threadsafe so you will have to manage that yourself.)

I don't know enough about the bsddb api but I suspect it's possible to
avoid threads altogether by iterating an entire bdb in small chunks and
relinquishing control to the event loop at the end of each chunk to
allow other events to run.

>  (I did a web search, but couldn't relate what I found to any code in
> the 1.2 release I just downloaded. I also read the May list archive.)

You may find Atop (http://www.divmod.org/Home/Projects/Atop/index.html)
interesting.

Hope this helps.

Cheers, Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt at pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.




From laforge49 at yahoo.co.in  Fri May 14 08:27:08 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Fri, 14 May 2004 13:27:08 +0100 (BST)
Subject: [Twisted-Python] bsddb?
In-Reply-To: <1084532407.1449.18.camel@harold>
Message-ID: <20040514122708.86658.qmail@web8310.mail.in.yahoo.com>

But it blocks, mm?
 
I could break things into small chuncks, so I could likely get away with
not using a thread. But shouldn't it ideally be accessed from a thread?
 
I'll note that you can open bsddb (using the new interface, not the
one documented in Python) in a thread-safe way, but any given iteration
(using a cursor object) must be done from a single thread--cursors
are not thread-free.
 
One approach might be to create a cursor in a server thread and then
use a fixed-size queue to retrieve the iterations, but then you'll need
at least as many server threads as you have open cursors.
 
So the best approach might be to have a cursor manager which handles
many such cursors/queues running on a single thread. (Invoking the
manager, it returns a master queue for handling subsequent requests.)
But then it sounds like a dedicated thread is again the best approach.
 
It seems to me that a nice general solution would be a project in its own 
right. (I've found bsddb to be pretty powerful/useful/fast/handy.)
 
Ah, Atop looks interesting. Thanks!
 
Bill

Matt Goodall <matt at pollenation.net> wrote:
On Fri, 2004-05-14 at 08:17, Bill la Forge wrote:
> New to twisted, interested in porting a project, but I can't find
> anything on using bsddb.

Open a bdb at the start of the app, use it as necessary, close the bdb
at the end of the app. What could be easier ;-).

It's probably worth creating a Service
(http://twistedmatrix.com/documents/current/api/) to help manage the
bsddb resource.

> I assume I need a dedicated thread. Has anyone else worked on this?

You probably only need a thread for operations that you know will take a
long time. Retrieving a single, keyed object should be so quick with
bsdbd that it's probably not with the effort/expense of a thread. On the
other hand, iterating an entire bdb will (possibly) take quite some
time, so a thread may be a good idea. (Note that Python's bsdbd is not
threadsafe so you will have to manage that yourself.)

I don't know enough about the bsddb api but I suspect it's possible to
avoid threads altogether by iterating an entire bdb in small chunks and
relinquishing control to the event loop at the end of each chunk to
allow other events to run.

> (I did a web search, but couldn't relate what I found to any code in
> the 1.2 release I just downloaded. I also read the May list archive.)

You may find Atop (http://www.divmod.org/Home/Projects/Atop/index.html)
interesting.

Hope this helps.

Cheers, Matt

-- 
__
/ \__ Matt Goodall, Pollenation Internet Ltd
\__/ \ w: http://www.pollenation.net
__/ \__/ e: matt at pollenation.net
/ \__/ \ t: +44 (0)113 2252500
\__/ \__/
/ \ Any views expressed are my own and do not necessarily
\__/ reflect the views of my employer.


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040514/63bc01b3/attachment.htm 

From itamar at itamarst.org  Fri May 14 11:06:51 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 14 May 2004 11:06:51 -0400
Subject: [Twisted-Python] bsddb?
In-Reply-To: <20040514122708.86658.qmail@web8310.mail.in.yahoo.com>
References: <20040514122708.86658.qmail@web8310.mail.in.yahoo.com>
Message-ID: <1084547211.21482.488.camel@sheriffpony>

On Fri, 2004-05-14 at 08:27, Bill la Forge wrote:

> Ah, Atop looks interesting. Thanks!

Atop is designed so that each operation is either very quick and
non-blocking, *or* long running operations like iterating over results
that can be easily broken up (and which is which is very clear). As a
result atop works quite well without threads.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From glyph at divmod.com  Fri May 14 11:47:47 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Fri, 14 May 2004 11:47:47 -0400
Subject: [Twisted-Python] bsddb?
In-Reply-To: <1084547211.21482.488.camel@sheriffpony>
References: <20040514122708.86658.qmail@web8310.mail.in.yahoo.com>
	<1084547211.21482.488.camel@sheriffpony>
Message-ID: <40A4EA23.1000000@divmod.com>

Itamar Shtull-Trauring wrote:

> Atop is designed so that each operation is either very quick and
> non-blocking, *or* long running operations like iterating over results
> that can be easily broken up (and which is which is very clear). As a
> result atop works quite well without threads.

The flip side oft his is that it can be quite difficult to build complex 
  queries without deep structural knowledge of the database (and they 
are therefore somewhat fragile).  However, we're working on that.  A 
somewhat unsettling thing about using atop is you start to realize how 
incredibly inefficient some of the things that are really easy to say 
with SQL are, even in SQL DBs ;).

If an operation is synchronous in atop, it's fast. Right now this means, 
"if it's easy" - but a more advanced query mechanism will fix this.  If 
you have any ideas, please let me know.



From laforge49 at yahoo.co.in  Fri May 14 13:48:01 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Fri, 14 May 2004 18:48:01 +0100 (BST)
Subject: [Twisted-Python] atop (was bsddb?)
Message-ID: <20040514174801.57958.qmail@web8308.mail.in.yahoo.com>

I downloaded atop. The code is a bit denser than twisted, and I couldn't find much documentation.
 
Any pointers?
 
Also, are the mail archives available? 
 
Thanks!


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040514/dc97e79d/attachment.htm 

From alex-news at comcast.net  Fri May 14 15:56:58 2004
From: alex-news at comcast.net (Alexander May)
Date: Fri, 14 May 2004 15:56:58 -0400
Subject: [Twisted-Python] How do I run a twisted server directly
Message-ID: <E1BOioF-00036P-00@pyramid.twistedmatrix.com>

I am going step by step through the Twisted From Scratch documentation.  At
step labeled twistd, there is this listing:

http://twistedmatrix.com/documents/current/howto/listings/finger/finger11.py

At the end it uses:

application = service.Application('finger', uid=1, gid=1)
factory = FingerFactory(moshez='Happy and well')
internet.TCPServer(79, factory).setServiceParent(
    service.IServiceCollection(application))

Where as the previous code uses:

reactor.listenTCP(1079, FingerFactory(prefix='http://livejournal.com/~'))
reactor.run()

And then gets into twistd, which is great.  But I have two questions, one is
how do I run this code directly (i.e., without twistd), and how do I use a
debugger on code running under twistd.

Maybe the answer to my first question in look at twistd in an editor and
figure it out, and the answer to the second question is run twistd in the
debugger.  To be honest I haven't looked at twistd, as I am already
suffering for mind overload trying to understand the bits and pieces of this
framework.  Pretty cool stuff.

On a different unrelated subject, I am going to need to act as both a server
and a client for SOAP.  Can someone point me in the right direction on how
to do this in twisted.

Thanks,
Alex







From itamar at itamarst.org  Fri May 14 16:03:04 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 14 May 2004 16:03:04 -0400
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <E1BOioF-00036P-00@pyramid.twistedmatrix.com>
References: <E1BOioF-00036P-00@pyramid.twistedmatrix.com>
Message-ID: <1084564983.21482.558.camel@sheriffpony>

On Fri, 2004-05-14 at 15:56, Alexander May wrote:

> And then gets into twistd, which is great.  But I have two questions, one is
> how do I run this code directly (i.e., without twistd), and how do I use a
> debugger on code running under twistd.

You can run twistd with -b option to run under debugger (see twistd
--help).

-- 
Itamar Shtull-Trauring    http://itamarst.org





From alex-news at comcast.net  Fri May 14 16:17:19 2004
From: alex-news at comcast.net (Alexander May)
Date: Fri, 14 May 2004 16:17:19 -0400
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <1084564983.21482.558.camel@sheriffpony>
Message-ID: <E1BOj7u-0003EG-00@pyramid.twistedmatrix.com>

Thanks, I'll give that a try.  How about my first question, running it
directly without twistd.  Something along the lines of:

if '__main__' == __name__:
  # do something to start application directly


Thanks again,
Alex



-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Itamar
Shtull-Trauring
Sent: Friday, May 14, 2004 4:03 PM
To: Twisted discussion stuff
Subject: Re: [Twisted-Python] How do I run a twisted server directly

On Fri, 2004-05-14 at 15:56, Alexander May wrote:

> And then gets into twistd, which is great.  But I have two questions, 
> one is how do I run this code directly (i.e., without twistd), and how 
> do I use a debugger on code running under twistd.

You can run twistd with -b option to run under debugger (see twistd --help).

-- 
Itamar Shtull-Trauring    http://itamarst.org



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From radix at twistedmatrix.com  Fri May 14 16:33:01 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 14 May 2004 16:33:01 -0400
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <E1BOj7u-0003EG-00@pyramid.twistedmatrix.com>
References: <E1BOj7u-0003EG-00@pyramid.twistedmatrix.com>
Message-ID: <40A52CFD.6070609@twistedmatrix.com>

Alexander May wrote:
> Thanks, I'll give that a try.  How about my first question, running it
> directly without twistd.  Something along the lines of:
> 
> if '__main__' == __name__:
>   # do something to start application directly


Basically, Don't Do That. It's unlikely there's a good reason to. If you 
just want to learn how it works under the hood, then read twistd's 
source: twisted/scripts/twistd.py. twisted/application/app.py is also 
relevant.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040514/0554506d/attachment.pgp 

From alex-news at comcast.net  Fri May 14 20:20:24 2004
From: alex-news at comcast.net (Alexander May)
Date: Fri, 14 May 2004 20:20:24 -0400
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <40A52CFD.6070609@twistedmatrix.com>
Message-ID: <E1BOmvA-0004qW-00@pyramid.twistedmatrix.com>

> Basically, Don't Do That. It's unlikely there's a good reason to.

I'd like to use my IDE to debug rather than the python debugger.

Also, I ran twistd.py and got "Please use twistw on windows, not twistd"
(I'm on windows sometimes).  I then ran twistw.py and nothing happened.  I
looked at the file, and there were only class and function definitions.  I
added "run()" at the end of the file and it seems to work.  I'm using the
version 1.2.0 which was marked as "Twisted Stable Release" on the download
page.

Alex




-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Christopher
Armstrong
Sent: Friday, May 14, 2004 4:33 PM
To: Twisted discussion stuff
Subject: Re: [Twisted-Python] How do I run a twisted server directly

Alexander May wrote:
> Thanks, I'll give that a try.  How about my first question, running it 
> directly without twistd.  Something along the lines of:
> 
> if '__main__' == __name__:
>   # do something to start application directly


Basically, Don't Do That. It's unlikely there's a good reason to. If you
just want to learn how it works under the hood, then read twistd's
source: twisted/scripts/twistd.py. twisted/application/app.py is also
relevant.

--
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/




From radix at twistedmatrix.com  Fri May 14 20:25:27 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 14 May 2004 20:25:27 -0400
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <E1BOmvA-0004qW-00@pyramid.twistedmatrix.com>
References: <E1BOmvA-0004qW-00@pyramid.twistedmatrix.com>
Message-ID: <40A56377.7010901@twistedmatrix.com>

Alexander May wrote:
> Also, I ran twistd.py and got "Please use twistw on windows, not twistd"
> (I'm on windows sometimes).  I then ran twistw.py and nothing happened.  I
> looked at the file, and there were only class and function definitions.  I
> added "run()" at the end of the file and it seems to work.  I'm using the
> version 1.2.0 which was marked as "Twisted Stable Release" on the download
> page.

You should be calling C:\Python23\scripts\twistd (or something like 
that), not Lib\twisted\scripts\twistd.py. When you install the windows 
package for Twisted, there should be a start menu item that runs a shell 
with a properly set up environment so you can just type "twistd" or 
"mktap" and so on and it'll DTRT.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040514/0368399d/attachment.pgp 

From alex-news at comcast.net  Fri May 14 20:31:53 2004
From: alex-news at comcast.net (Alexander May)
Date: Fri, 14 May 2004 20:31:53 -0400
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <40A56377.7010901@twistedmatrix.com>
Message-ID: <E1BOn6J-00053v-00@pyramid.twistedmatrix.com>

Oops, thanks.  Any hope debugging in my IDE instead of pdb?


-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Christopher
Armstrong
Sent: Friday, May 14, 2004 8:25 PM
To: Twisted discussion stuff
Subject: Re: [Twisted-Python] How do I run a twisted server directly

Alexander May wrote:
> Also, I ran twistd.py and got "Please use twistw on windows, not twistd"
> (I'm on windows sometimes).  I then ran twistw.py and nothing 
> happened.  I looked at the file, and there were only class and 
> function definitions.  I added "run()" at the end of the file and it 
> seems to work.  I'm using the version 1.2.0 which was marked as 
> "Twisted Stable Release" on the download page.

You should be calling C:\Python23\scripts\twistd (or something like that),
not Lib\twisted\scripts\twistd.py. When you install the windows package for
Twisted, there should be a start menu item that runs a shell with a properly
set up environment so you can just type "twistd" or "mktap" and so on and
it'll DTRT.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/




From rc at pgdn.org  Fri May 14 21:43:00 2004
From: rc at pgdn.org (Robert Church)
Date: Fri, 14 May 2004 18:43:00 -0700
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <E1BOn6J-00053v-00@pyramid.twistedmatrix.com>
References: <E1BOn6J-00053v-00@pyramid.twistedmatrix.com>
Message-ID: <40A575A4.7050802@pgdn.org>

Alexander May wrote:
> Oops, thanks.  Any hope debugging in my IDE instead of pdb?

What's your IDE?




From alex-news at comcast.net  Fri May 14 22:02:45 2004
From: alex-news at comcast.net (Alexander May)
Date: Fri, 14 May 2004 22:02:45 -0400
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <40A575A4.7050802@pgdn.org>
Message-ID: <E1BOoWC-0007Di-00@pyramid.twistedmatrix.com>

I've use pythonwin for a while and I'm giving Komodo try right now.  I'll
try Python.NET soon too.

I cribbed from twistw and did this:

if '__main__' == __name__:
    from twisted.application import app
    import sys
    
    class ServerOptions(app.ServerOptions):
        optFlags = [['nodaemon','y',  "(for backwards compatability)."]]
    
    app.startApplication(application, 0)
    app.runReactorWithLogging(ServerOptions(), sys.stdout, sys.stderr)


Which seems to work.  I can start my application from the debugger and hit
breakpoints, etc.  

Presumably I've committed all sort of horrors writing this code.  Please
feel free to enlighten me to the error of my ways.  Also, I'm curious what
is the function of the following line of code (marked with a *) is which I
saw in twistw:

def runApp(config):
    passphrase = app.getPassphrase(config['encrypted'])
    app.installReactor(config['reactor'])
    application = app.getApplication(config, passphrase)
    oldstdout = sys.stdout
    oldstderr = sys.stderr
    startLogging(config['logfile'])
    app.initialLog()
    os.chdir(config['rundir'])
    service.IService(application).privilegedStartService()
    app.startApplication(application, not config['no_save'])
*   app.startApplication(internet.TimerService(0.1, lambda:None), 0)
    app.runReactorWithLogging(config, oldstdout, oldstderr)
    app.reportProfile(config['report-profile'],
                      service.IProcess(application).processName)
    log.msg("Server Shut Down.")


*    do nothing frequently?







 

 

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Robert Church
Sent: Friday, May 14, 2004 9:43 PM
To: Twisted discussion stuff
Subject: Re: [Twisted-Python] How do I run a twisted server directly

Alexander May wrote:
> Oops, thanks.  Any hope debugging in my IDE instead of pdb?

What's your IDE?


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From dp at ulaluma.com  Fri May 14 23:59:33 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Fri, 14 May 2004 23:59:33 -0400
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <E1BOoWC-0007Di-00@pyramid.twistedmatrix.com>
References: <E1BOoWC-0007Di-00@pyramid.twistedmatrix.com>
Message-ID: <46657C9A-A624-11D8-B31F-000A95864FC4@ulaluma.com>


On May 14, 2004, at 10:02 PM, Alexander May wrote:

> I've use pythonwin for a while and I'm giving Komodo try right now.  
> I'll
> try Python.NET soon too.

<snip>

>
> Which seems to work.  I can start my application from the debugger and 
> hit
> breakpoints, etc.
>
> Presumably I've committed all sort of horrors writing this code.  
> Please
> feel free to enlighten me to the error of my ways.  Also, I'm curious 
> what
> is the function of the following line of code (marked with a *) is 
> which I
> saw in twistw:

<snip>

Why are you assuming that you can't use twistd and komodo's debugger at 
the same time? The last time I looked at Komodo for debugging (which 
admittedly was at least two years ago) importing the debugging module 
at any time installed the trace hook and queried Komodo for 
breakpoints. Then, any time the trace hook wanted to break into the 
debugger, it made a synchronous, blocking call over xmlrpc into the 
Komodo process. The Komodo process would then delay 'returning' from 
that xmlrpc call until you pressed step or continue in the ui.

You should just be able to import the komodo debugging shim module at 
the top of your .tac file, start it using twistd, and debug just fine.

dp




From alex-news at comcast.net  Sat May 15 00:25:17 2004
From: alex-news at comcast.net (Alexander May)
Date: Sat, 15 May 2004 00:25:17 -0400
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <46657C9A-A624-11D8-B31F-000A95864FC4@ulaluma.com>
Message-ID: <E1BOqk8-0008Cg-00@pyramid.twistedmatrix.com>

> Why are you assuming that you can't use twistd and komodo's debugger at
the same time? 

I'm new to both twisted and Komodo, and never even considered that such on
option existed.  Thanks for the info, I'll see if I can manage it.  Is there
a similar mechanism for other IDEs?

Alex



-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Donovan
Preston
Sent: Saturday, May 15, 2004 12:00 AM
To: Twisted discussion stuff
Subject: Re: [Twisted-Python] How do I run a twisted server directly


On May 14, 2004, at 10:02 PM, Alexander May wrote:

> I've use pythonwin for a while and I'm giving Komodo try right now.  
> I'll
> try Python.NET soon too.

<snip>

>
> Which seems to work.  I can start my application from the debugger and 
> hit breakpoints, etc.
>
> Presumably I've committed all sort of horrors writing this code.  
> Please
> feel free to enlighten me to the error of my ways.  Also, I'm curious 
> what is the function of the following line of code (marked with a *) 
> is which I saw in twistw:

<snip>

Why are you assuming that you can't use twistd and komodo's debugger at the
same time? The last time I looked at Komodo for debugging (which admittedly
was at least two years ago) importing the debugging module at any time
installed the trace hook and queried Komodo for breakpoints. Then, any time
the trace hook wanted to break into the debugger, it made a synchronous,
blocking call over xmlrpc into the Komodo process. The Komodo process would
then delay 'returning' from that xmlrpc call until you pressed step or
continue in the ui.

You should just be able to import the komodo debugging shim module at the
top of your .tac file, start it using twistd, and debug just fine.

dp


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From alex-news at comcast.net  Sat May 15 01:05:43 2004
From: alex-news at comcast.net (Alexander May)
Date: Sat, 15 May 2004 01:05:43 -0400
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <46657C9A-A624-11D8-B31F-000A95864FC4@ulaluma.com>
Message-ID: <E1BOrNG-0000ko-00@pyramid.twistedmatrix.com>

> You should just be able to import the komodo debugging shim module at the
top of your .tac file, start it using twistd, and debug just fine.

You mentioned that it has been a while, but does callkomodo.py sound right?
Or is the "komodo debugging shim module" something else?  I've tried a few
things, none of which have worked well.  Of course it is way past my bedtime
so I'm no longer thinking straight.  

Also using this technique, will there be an issue when I move my code into
production?  Is the import meaningless if I'm not running under the
debugger?  Or will I have to remember to remove the import line for the
debug module.  Or can I conditional import it using __debug__ and pass the
-O flag through when using twistd?  I apologize for my lack of knowledge;
I've stayed happily ignorant of the workings of the debugger until now.

What does everybody else here use for a development environment/debugger
when writing twisted or twisted apps?  Any IDE users out there?  I don't
want to waste more time than I already have just setting up my environment. 

Alex



-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Donovan
Preston
Sent: Saturday, May 15, 2004 12:00 AM
To: Twisted discussion stuff
Subject: Re: [Twisted-Python] How do I run a twisted server directly


On May 14, 2004, at 10:02 PM, Alexander May wrote:

> I've use pythonwin for a while and I'm giving Komodo try right now.  
> I'll
> try Python.NET soon too.

<snip>

>
> Which seems to work.  I can start my application from the debugger and 
> hit breakpoints, etc.
>
> Presumably I've committed all sort of horrors writing this code.  
> Please
> feel free to enlighten me to the error of my ways.  Also, I'm curious 
> what is the function of the following line of code (marked with a *) 
> is which I saw in twistw:

<snip>

Why are you assuming that you can't use twistd and komodo's debugger at the
same time? The last time I looked at Komodo for debugging (which admittedly
was at least two years ago) importing the debugging module at any time
installed the trace hook and queried Komodo for breakpoints. Then, any time
the trace hook wanted to break into the debugger, it made a synchronous,
blocking call over xmlrpc into the Komodo process. The Komodo process would
then delay 'returning' from that xmlrpc call until you pressed step or
continue in the ui.

You should just be able to import the komodo debugging shim module at the
top of your .tac file, start it using twistd, and debug just fine.

dp


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From python at adytumsolutions.com  Sat May 15 01:17:36 2004
From: python at adytumsolutions.com (Duncan McGreggor)
Date: Sat, 15 May 2004 01:17:36 -0400
Subject: [Twisted-Python] Custom app using twisted
Message-ID: <2D512B60-A62F-11D8-923B-000393DB4358@adytumsolutions.com>

Don't know if this belongs on the list or not...

I've just written a python monitoring program for baby-sitting a bunch 
of servers (I wanted something easier to setup and maintain than 
Nagios)... but the inevitable has happened, and I want to make a 
go-cart run like a ferrari. I was thinking of using python's interface 
to 'select' a la Medusa, but as soon as I saw 'import asyncore', I 
thought "There's got to be a better way..."

Enter twisted.

I would like to be able to run n monitoring instances simultaneously 
(thus my interest in 'select') to make the code as close to real-time 
as is practical. However, this is my first dive into POSIX I/O at this 
level (I ordered a copy of "UNIX Systems Programming" (Robbins) 
yesterday, to help me learn and adjust).

* The monitoring libs that I've put together do everything from local 
process monitoring (crap like ps with commands.getoutput), httplib 
checks against sites, process checks on remote servers (ssh+ps with 
commands.getoutput), ping checks, etc.
* An instance of the monitoring class will only do one type of 
monitoring (either process check, remote process check, ping check, or 
site check)

I would like to write a version of this that's a twisted application, 
in the hopes that it will be more robust and enterprise-ready. I've 
started looking at the following:
twisted.application.service.IProcess
twisted.application.service.Process
and spawnProcess from twisted.internet.default.PosixReactorBase

But I am not sure how to get started yet... I want to write something 
that can be run with twistd. Can anyone offer guidance or suggestions 
as to the approach? Right now, I am locked on the example here: 
http://twistedmatrix.com/documents/current/howto/application.html ... 
Is this what I should be looking at for inspiration? Or another 
approach all together? I've not come across examples of twisted apps 
that are a narrow specialization like what I have in mind... the app 
would be a *kind* of server... that would regularly spawn processes and 
wait for return data, regularly instantiate python monitoring classes.

Am I thinking of this in a sane way?

Thanks for any input,

Duncan



--
Duncan M. McGreggor        mailto:duncan at adytum.us
Systems &                  p 301.698.5032
Applications Engineer      http://adytum.us
AdytumSolutions, Inc.




From andrew-twisted at puzzling.org  Sat May 15 01:34:12 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 15 May 2004 15:34:12 +1000
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <E1BOrNG-0000ko-00@pyramid.twistedmatrix.com>
References: <46657C9A-A624-11D8-B31F-000A95864FC4@ulaluma.com>
	<E1BOrNG-0000ko-00@pyramid.twistedmatrix.com>
Message-ID: <20040515053412.GC4397@frobozz>

On Sat, May 15, 2004 at 01:05:43AM -0400, Alexander May wrote:
[...]
> 
> What does everybody else here use for a development environment/debugger
> when writing twisted or twisted apps?  Any IDE users out there?  I don't
> want to waste more time than I already have just setting up my environment. 

I tend to simply use print statements, unit tests and pdb.  My "IDE" is vim
:)

I rarely find stepping through code with a debugger to be useful; I find
having a log file of carefully selected print statements, and ideally
automated unit tests that enable me to easily reproduce the problem without
having to manually set up every time, are best.

My debugging process usually involves a bit of reasoning about what's going
on, and testing hypotheses about causes by trying to trigger certain
behaviours -- or more often by seeing what my selectively placed print
statements do.  I don't find stepping through code with a debugger to be a
very efficient way to do this, because you spend most of your time stepping
over code you aren't interested in.

-Andrew.




From laforge49 at yahoo.co.in  Sat May 15 02:20:26 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Sat, 15 May 2004 07:20:26 +0100 (BST)
Subject: [Twisted-Python] Custom app using twisted
In-Reply-To: <2D512B60-A62F-11D8-923B-000393DB4358@adytumsolutions.com>
Message-ID: <20040515062026.38231.qmail@web8301.mail.in.yahoo.com>

Duncan,
 
Looks like we're in the same boat--this is my third day looking at 
Twisted. My approach is to skim the doc and read some code, sleep 
on it, then do it all again but a bit more carefully. And yes, my head 
hurts. ;-)
 
But I have enjoyed reading the reactor code. My only question there is if 
anyone is considering using heapq instead of insort, as heapq is really 
the algorithm of choice for processing dynamicly changing lists in order.
 
So while my head really hurts, at least I'm enjoying the code. And its a 
nice break from reading the docs, too.
 
Bill 

Duncan McGreggor <python at adytumsolutions.com> wrote:
But I am not sure how to get started yet... I want to write something 
that can be run with twistd. Can anyone offer guidance or suggestions 
as to the approach? Right now, I am locked on the example here: 
http://twistedmatrix.com/documents/current/howto/application.html ... 

Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040515/5958f1aa/attachment.htm 

From itamar at itamarst.org  Sat May 15 07:08:47 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 15 May 2004 07:08:47 -0400
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <E1BOoWC-0007Di-00@pyramid.twistedmatrix.com>
References: <E1BOoWC-0007Di-00@pyramid.twistedmatrix.com>
Message-ID: <1084591098.21481.611.camel@sheriffpony>

On Fri, 2004-05-14 at 22:02, Alexander May wrote:

> I cribbed from twistw and did this:

Looks fine.

> Presumably I've committed all sort of horrors writing this code.  Please
> feel free to enlighten me to the error of my ways.  Also, I'm curious what
> is the function of the following line of code (marked with a *) is which I
> saw in twistw:
> *   app.startApplication(internet.TimerService(0.1, lambda:None), 0)

This is so Ctrl-C will be responsive on Windows, otherwise it doesn't
happen until the event loop wakes up - which may be quite a while if no
networking is going on.




From laforge49 at yahoo.co.in  Sat May 15 08:10:16 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Sat, 15 May 2004 13:10:16 +0100 (BST)
Subject: [Twisted-Python] Where does the client stop the reactor?
Message-ID: <20040515121016.44795.qmail@web8307.mail.in.yahoo.com>

I've noticed that when running an example client, the reactor shuts down 
cleanly, but it does not when running an example server.
 
I've cludged some code for my testing that works fine for now, 
shutting down the reactor when there's no delayed calls:
 
def stopWhenIdle():
    count=len(reactor.getDelayedCalls())
    if count:
        reactor.callLater(1,stopWhenIdle)
    else:
        reactor.stop()

But where does the client normally stop the reactor?
 
Thanks!
 


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040515/23afc72c/attachment.htm 

From alex-news at comcast.net  Sat May 15 09:10:45 2004
From: alex-news at comcast.net (Alexander May)
Date: Sat, 15 May 2004 09:10:45 -0400
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <1084591098.21481.611.camel@sheriffpony>
Message-ID: <E1BOywg-0004Jn-00@pyramid.twistedmatrix.com>

Thanks.  

FYI - When I did this I stumbled on to something.  If I have scratch.py as
follows:

from twisted.application import service
application = service.Application('central-server')
 

Where the last line consists of a single space, then I get an error when I
run twistd -y scratch.py (call stack at end).  When I remove the space so
the last line is just a carriage return, it works fine.  I found it strange.
Perhaps it is a python thing I has just never stumbled on before.  Not a big
deal now that I know, but it drove me batty for a bit.

Also, why the preference for .tac extensions when running twistd, instead of
.py?

I'm slowly working my way through the docs, so if it's RTFM, I'll
understand.

Thanks again for all the help,
Alex


Call stack:

Traceback (most recent call last):
  File "C:\Python23\scripts\twistd.py", line 36, in ?
    run()
  File "C:\Python23\Lib\site-packages\twisted\scripts\twistw.py", line 61,
in run
    app.run(runApp, ServerOptions)
  File "C:\Python23\Lib\site-packages\twisted\application\app.py", line 204,
in run
    runApp(config)
  File "C:\Python23\Lib\site-packages\twisted\scripts\twistw.py", line 45,
in runApp
    application = app.getApplication(config, passphrase)
--- <exception caught here> ---
  File "C:\Python23\Lib\site-packages\twisted\application\app.py", line 117,
in getApplication
    application = service.loadApplication(filename, style, passphrase)
  File "C:\Python23\Lib\site-packages\twisted\application\service.py", line
291, in loadApplication
    application = sob.loadValueFromFile(filename, 'application', passphrase)
  File "C:\Python23\Lib\site-packages\twisted\persisted\sob.py", line 213,
in loadValueFromFile
    exec data in d, d
exceptions.SyntaxError: invalid syntax (line 5)

Failed to load application: invalid syntax (line 5)










From alex-news at comcast.net  Sat May 15 15:14:49 2004
From: alex-news at comcast.net (Alexander May)
Date: Sat, 15 May 2004 15:14:49 -0400
Subject: [Twisted-Python] Simple app pickle issue when stopping
Message-ID: <E1BP4cz-0006zn-00@pyramid.twistedmatrix.com>

Still trying to learn/understand twisted.  Mind exploding/getting
frustrated.  I created this very simple app:

#!/usr/bin/python
from twisted.application import internet, service from twisted.web import
resource, server

class SimpleResource(resource.Resource):
  def __init__(self):
    resource.Resource.__init__(self)
    self.isLeaf=1
  def render_GET(self, request):
    return 'simple'

application = service.Application('server') serviceCollection =
service.IServiceCollection(application)
internet.TCPServer(8080,server.Site(SimpleResource())).setServiceParent(serv
iceCollection)

Then I run "twistd -y scratch.py" and it starts up correctly.  Great.
I can go to http://localhost:8080 and see the web page "simple".  Wonderful.
I hit control^C to stop the server and I get pickling errors.  Not good.
Call stack listed below:

IF I go into the python interactive environment and import sratch (and
pickle), I can instantiate SimpleResrouce and pickle it with no problem.
Help!

Alex

Call stack:
C:\Documents and Settings\Alexander May\My
Documents\maygold-dev\central-server>twistd -y scratch.py
2004/05/15 14:51 Eastern Daylight Time [-] Log opened.
2004/05/15 14:51 Eastern Daylight Time [-] twistd 1.2.0
(C:\Python23\python.exe 2.3.3) starting up
2004/05/15 14:51 Eastern Daylight Time [-] reactor class:
twisted.internet.default.SelectReactor
2004/05/15 14:51 Eastern Daylight Time [-] twisted.web.server.Site starting
on 8080
2004/05/15 14:51 Eastern Daylight Time [-] Starting factory
<twisted.web.server.Site instance at 0x00C52B70>
2004/05/15 14:51 Eastern Daylight Time [HTTPChannel,0,127.0.0.1] 127.0.0.1 -
- [15/May/2004:18:51:26 +0000] "GET / HTTP 1.1" 200 6 "-" "Mozilla/4.0
(compatible; MSIE 6.0; Windows NT 5.1)"
2004/05/15 14:51 Eastern Daylight Time [-] (Port 8080 Closed)
2004/05/15 14:51 Eastern Daylight Time [-] Stopping factory
<twisted.web.server.Site instance at 0x00C52B70>
2004/05/15 14:51 Eastern Daylight Time [-] Saving server application to
server-shutdown.tap...
2004/05/15 14:51 Eastern Daylight Time [-] Traceback (most recent call
last):
          File "C:\Python23\Lib\site-packages\twisted\internet\defer.py",
line 227, in callback
            self._startRunCallbacks(result)
          File "C:\Python23\Lib\site-packages\twisted\internet\defer.py",
line 288, in _startRunCallbacks
            self._runCallbacks()
          File "C:\Python23\Lib\site-packages\twisted\internet\defer.py",
line 313, in _runCallbacks
            self.result = callback(self.result, *args, **kw)
          File "C:\Python23\Lib\site-packages\twisted\internet\base.py",
line 317, in _cbContinueSystemEvent
            self._continueSystemEvent(eventType)
        --- <exception caught here> ---
          File "C:\Python23\Lib\site-packages\twisted\internet\base.py",
line 325, in _continueSystemEvent
            callable(*args, **kw)
          File "C:\Python23\Lib\site-packages\twisted\persisted\sob.py",
line 135, in save
            self._saveTemp(filename, passphrase, dumpFunc)
          File "C:\Python23\Lib\site-packages\twisted\persisted\sob.py",
line 103, in _saveTemp
            dumpFunc(self.original, f)
          File "C:\Python23\Lib\site-packages\twisted\persisted\sob.py",
line 119, in dumpFunc
            pickle.dump(obj, file, 1)
        cPickle.PicklingError: Can't pickle __builtin__.SimpleResource:
attribute lookup __builtin__.SimpleResource faied

2004/05/15 14:51 Eastern Daylight Time [-] Main loop terminated.
2004/05/15 14:51 Eastern Daylight Time [-] Server Shut Down.





From exarkun at divmod.com  Sat May 15 16:34:20 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Sat, 15 May 2004 20:34:20 GMT
Subject: [Twisted-Python] Simple app pickle issue when stopping
In-Reply-To: <E1BP4cz-0006zn-00@pyramid.twistedmatrix.com>
Message-ID: <20040515203420.14915.194049309.divmod.quotient.62@ohm>

On Sat, 15 May 2004 15:14:49 -0400, "Alexander May" <alex-news at comcast.net> wrote:
>Still trying to learn/understand twisted.  Mind exploding/getting frustrated.  I created this very simple app:
> [snip]

  Instances are pickled by saving the name of their class and their associated state.  Since the SimpleResource class isn't defined in a real module, instances of it cannot be pickled (its name is a lie).  Move the class definition into a real module, then import it from your tac file.  The pickle problems should go away.
  Also, if pickling isn't important, you can just pass the -o flag to twistd and the application will not be saved on shutdown.

  Jp



From mesozoic at polynode.com  Sat May 15 16:39:53 2004
From: mesozoic at polynode.com (Alex Levy)
Date: Sat, 15 May 2004 16:39:53 -0400
Subject: [Twisted-Python] Re: Simple app pickle issue when stopping
In-Reply-To: <E1BP4cz-0006zn-00@pyramid.twistedmatrix.com>
References: <E1BP4cz-0006zn-00@pyramid.twistedmatrix.com>
Message-ID: <1084653593.1151.132.camel@hyla>

On Sat, 2004-05-15 at 15:14, Alexander May wrote:
> Still trying to learn/understand twisted.  Mind exploding/getting
> frustrated.  I created this very simple app:

--snip--

>           File "C:\Python23\Lib\site-packages\twisted\persisted\sob.py",
> line 119, in dumpFunc
>             pickle.dump(obj, file, 1)
>         cPickle.PicklingError: Can't pickle __builtin__.SimpleResource:
> attribute lookup __builtin__.SimpleResource faied

Try defining SimpleResource inside your own module, instead of in
scratch.py. That way, when it goes to pickle your resource, it looks up
'mymodule.SimpleResource' instead of '__builtin__.SimpleResource'.

Worth a try?

Separation of application code and deployment code is pretty important
for Twisted apps. The idea is that .tac and .rpy files (and other such
things) shouldn't have your actual application in them - they should
just be glue to get your application to work properly within a given
system.

-- 
Alex Levy
WWW: http://mesozoic.geecs.org/

"Never let your sense of morals prevent you from doing what is right."
-- Salvor Hardin, Isaac Asimov's _Foundation_
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040515/06273aec/attachment.pgp 

From glyph at divmod.com  Sat May 15 16:59:05 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Sat, 15 May 2004 16:59:05 -0400
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <20040515053412.GC4397@frobozz>
References: <46657C9A-A624-11D8-B31F-000A95864FC4@ulaluma.com>	<E1BOrNG-0000ko-00@pyramid.twistedmatrix.com>
	<20040515053412.GC4397@frobozz>
Message-ID: <40A68499.1020600@divmod.com>

Andrew Bennetts wrote:
> On Sat, May 15, 2004 at 01:05:43AM -0400, Alexander May wrote:
> [...]
> 
>>What does everybody else here use for a development environment/debugger
>>when writing twisted or twisted apps?  Any IDE users out there?  I don't
>>want to waste more time than I already have just setting up my environment. 

> I tend to simply use print statements, unit tests and pdb.  My "IDE" is vim
> :)

I use PDB.  My IDE is twisted-dev.el, which runs on the popular Emacs 
IDE platform :).

Since many of the unit tests I run are quite time-consuming (even on 
very fast hardware) I do avail myself of a debugger.  However, I haven't 
run an actual application under a debugger in years.  I press F9 
(twisted-dev-debug-tests) to run the current unit-test under the debugger.

What this does is simply communicate with twistd -b over standard 
input/output, and keep a buffer open with the code on the appropriate line.

Until somebody develops an IDE with some runtime modifications (such as 
smalltalk-style restartable exceptions) I doubt that I'll find any 
compelling reason to switch...



From jason at injektilo.org  Sat May 15 17:03:24 2004
From: jason at injektilo.org (Jason Diamond)
Date: Sat, 15 May 2004 14:03:24 -0700
Subject: [Twisted-Python] Learning Twisted
Message-ID: <40A6859C.9000602@injektilo.org>

Sorry for the length of this post but I learn best by trying to
explain what I'm learning (even if nobody's listening). Twisted seems
very cool but also *huge* and unlike any framework I've used before so
I thought I'd post my first experiences with it in the hopes that I
could be corrected where needed (and maybe even help people other new
like me).

Here's the deal: I want to write an IMAP4 client and Twisted's
IMAP4Client [1] looks much more featureful than Python's imaplib.

Since I'm writing a client, I started out by reading the "Writing a
TCP client" HOWTO [2] where I learned, by looking at the ircLogBot
example, that I needed to define a subclass of IMAP4Client and a
subclass of ClientFactory. This is what I came up with:

from twisted.internet import reactor, protocol
from twisted.protocols import imap4

class MyIMAP4Client(imap4.IMAP4Client):

    def connectionMade(self):
        imap4.IMAP4Client.connectionMade(self)
        print "connectionMade"

class MyIMAP4ClientFactory(protocol.ClientFactory):

    protocol = MyIMAP4Client

f = MyIMAP4ClientFactory()
reactor.connectTCP("server", 143, f)
reactor.run()

Running this works (I see "connectionMade" printed to the console).

IMAP4Client has a login method so I modified my connectionMade method
to look like this:

    def connectionMade(self):
        imap4.IMAP4Client.connectionMade(self)
        print "connectionMade"
        self.login("user", "password")

But I couldn't tell if it worked or not. That's when I read that login
returns a "deferred whose callback is invoked if login is
successful". So I read the "Using Deferreds" HOWTO [3] and learned
that I needed to pass in a function to addCallback on the deferred
returned by calling login. So connectionMade now looks like this:

    def connectionMade(self):
        imap4.IMAP4Client.connectionMade(self)
        print "connectionMade"
        d = self.login("user", "password")
        d.addCallback(loginCallback)

loginCallback looks like this:

def loginCallback(d):
    print "loginCallback:", d

Note that this is *not* a method of the MyIMAP4Client class. But it
worked! I got this printed to the console:

connectionMade
loginCallback: ([], 'OK LOGIN Ok.')

I don't know, however, what the tuple represents. What's that empty
list? In a perfect world, would this be explained in the IMAP4Client
documentation? (I'm assuming that every callback would be different.)

I thought it sucked that my loginCallback function wasn't a member of
my class but I thought I'd see what error I'd get if I made it one so
I changed the two methods to look like this:

    def loginCallback(self, d):
        print "loginCallback:", d

    def connectionMade(self):
        imap4.IMAP4Client.connectionMade(self)
        print "connectionMade"
        d = self.login("user", "password")
        d.addCallback(self.loginCallback)

And that worked, too! At this point, I don't understand *why* this
works but it's awfully nice that it does. ("Using Deferreds" shows one
example of a callback method but doesn't discuss it in any way.)

Next, I wanted to try actually doing something useful. So I called
self.select from loginCallback so that I could see how many messages
exist in my INBOX.

    def loginCallback(self, d):
        print "loginCallback:", d
        de = self.select("INBOX")
        de.addCallback(self.selectCallback)

    def selectCallback(self, d):
        print "selectCallback:", d

This is the output I got for selectCallback:

selectCallback: {'EXISTS': 323, 'PERMANENTFLAGS': ('$MDNSent', 
'NonJunk', '\\*',
 '\\Draft', '\\Answered', '\\Flagged', '\\Deleted', '\\Seen'), 
'READ-WRITE': 1,
'FLAGS': ('$MDNSent', 'NonJunk', '\\Draft', '\\Answered', '\\Flagged', 
'\\Delete
d', '\\Seen', '\\Recent'), 'UIDVALIDITY': 1076206465, 'RECENT': 0}

Apparently, the parameter to the select callback is a dict. The
documentation for select actually mentions some of the keys. It looks
like I could use the EXISTS key to get how many messages exist in my
INBOX:

    def selectCallback(self, d):
        print "I have %d messages in my INBOX." % d["EXISTS"]

Now all I have to do is logout (up until now, I've been terminating
the script with Ctrl-C):

    def selectCallback(self, d):
        print "I have %d messages in my INBOX." % d["EXISTS"]
        de = self.logout()
        de.addCallback(self.logoutCallback)

    def logoutCallback(self, d):
        sys.exit(0)

This isn't correct, however, since the call to sys.exit prints an
exception to the console and, more distressingly, does *not* exit the
script.

At this point I realize that I'm in some sort of event loop (started
by calling reactor.run) and need to tell this loop to stop. So I look
at the "Reactor basics" HOWTO [4] and find my way to IReactorCore [5]
which documents a stop method:

    def logoutCallback(self, d):
        reactor.stop()

This works wonderfully although I have no idea if the connection to
the server is actually being gracefully closed. So I override
connectionLost to find out:

    def connectionLost(self, reason):
        imap4.IMAP4Client.connectionLost(self)
        print "connectionLost"

Now "connectionLost" is the last thing I see on my console before the
script exits. Nice.

I also override both sendLine and lineReceived so that I can see the
conversation with the IMAP server to see if I'm actually logging out
before closing the connection:

    def sendLine(self, line):
        imap4.IMAP4Client.sendLine(self, line)
        print line

    def lineReceived(self, line):
        imap4.IMAP4Client.lineReceived(self, line)
        print line

Perfect.

Just for reference, here's the program I ended up with:

from twisted.internet import reactor, protocol
from twisted.protocols import imap4

debug = 0

class MyIMAP4Client(imap4.IMAP4Client):

    def connectionMade(self):
        imap4.IMAP4Client.connectionMade(self)
        if debug: print "connectionMade"
        d = self.login("user", "password")
        d.addCallback(self.loginCallback)

    def loginCallback(self, d):
        de = self.select("INBOX")
        de.addCallback(self.selectCallback)

    def selectCallback(self, d):
        print "I have %d messages in my INBOX." % d["EXISTS"]
        de = self.logout()
        de.addCallback(self.logoutCallback)

    def logoutCallback(self, d):
        reactor.stop()

    def connectionLost(self, reason):
        imap4.IMAP4Client.connectionLost(self)
        if debug: print "connectionLost"

    def sendLine(self, line):
        imap4.IMAP4Client.sendLine(self, line)
        if debug: print line

    def lineReceived(self, line):
        imap4.IMAP4Client.lineReceived(self, line)
        if debug: print line

class MyIMAP4ClientFactory(protocol.ClientFactory):

    protocol = MyIMAP4Client

f = MyIMAP4ClientFactory()
reactor.connectTCP("server", 143, f)
reactor.run()

So how'd I do for a Twisted newbie? Am I on the path to enlightenment?
Are there any obvious errors in what I've interpreted so far? Is this
a "good" implementation for this feature or is their a more
Twisted-ish approach I need to strive for?

Am I correct in assuming that the IMAP4Client documentation needs some
buffing up? (Maybe I can help with that.) I didn't look at any source
code (other than in the HOWTOs) in implementing this so I think that's
a good sign. But as I mentioned above, I'm not clear on how I know
what the signature for my callbacks should be or what the parameters
to those callbacks mean in some cases.

Also, it's not obvious to me how protocol implementors decide when to
have users override a method versus having them use callbacks. I know
I'm working on client code but knowing this might help me know how to
use their code. Is it a matter of personal preference? The ircLogBot
example didn't have any callbacks using deferreds but it looks like I
had no choice when using IMAP4Client.

Thanks for reading this far!

-- Jason

[1]
http://twistedmatrix.com/documents/current/api/twisted.protocols.imap4.IMAP4Client.html

[2]
http://twistedmatrix.com/documents/current/howto/clients

[3]
http://twistedmatrix.com/documents/current/howto/defer.html

[4]
http://twistedmatrix.com/documents/current/howto/reactor-basics.html

[5]
http://twistedmatrix.com/documents/TwistedDocs/TwistedDocs-1.2.0/api/twisted.internet.interfaces.IReactorCore.html




From glyph at divmod.com  Sat May 15 18:09:04 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Sat, 15 May 2004 18:09:04 -0400
Subject: [Twisted-Python] Learning Twisted
In-Reply-To: <40A6859C.9000602@injektilo.org>
References: <40A6859C.9000602@injektilo.org>
Message-ID: <40A69500.7010501@divmod.com>

Jason Diamond wrote:
> Sorry for the length of this post but I learn best by trying to
> explain what I'm learning (even if nobody's listening). Twisted seems
> very cool but also *huge* and unlike any framework I've used before so
> I thought I'd post my first experiences with it in the hopes that I
> could be corrected where needed (and maybe even help people other new
> like me).

Thank you for sending this post.  I wish every new user would give such 
great feedback!

> So how'd I do for a Twisted newbie? Am I on the path to enlightenment?
> Are there any obvious errors in what I've interpreted so far? Is this
> a "good" implementation for this feature or is their a more
> Twisted-ish approach I need to strive for?

Although I'm not an expert with the IMAP code, everything seemed right 
except this last part:

> f = MyIMAP4ClientFactory()
> reactor.connectTCP("server", 143, f)
> reactor.run()

If possible, you should try to run Twisted code under twistd, which 
means that you'd remove that code from your Python module, and put it 
into a separate .tac file that read something like:

from twisted.application.internet import TCPClient
from twisted.application.service import Application, IServiceCollection
application = Application("my client application")
f = MyIMAP4ClientFactory()
client = TCPClient("server", 143, f)
client.setServiceParent(application)

Even if you do have a need to put your code into its own script - and 
the twistd support for clients is admittedly weaker than that for 
servers - it's generally a good idea not to put it in the same script as 
  your code.

> Am I correct in assuming that the IMAP4Client documentation needs some
> buffing up? (Maybe I can help with that.) I didn't look at any source
> code (other than in the HOWTOs) in implementing this so I think that's
> a good sign. But as I mentioned above, I'm not clear on how I know
> what the signature for my callbacks should be or what the parameters
> to those callbacks mean in some cases.

Yes.  Pretty much every aspect of the documentation needs help.  It 
would be greatly appreciated!

> Also, it's not obvious to me how protocol implementors decide when to
> have users override a method versus having them use callbacks. I know
> I'm working on client code but knowing this might help me know how to
> use their code. Is it a matter of personal preference? The ircLogBot
> example didn't have any callbacks using deferreds but it looks like I
> had no choice when using IMAP4Client.

It's not purely preference, but there is some overlap.  Generally, what 
Deferreds are used for are when you've got some operation that happens 
once, with one result: you want to delete a message, for example, and 
get a notification when that deletion operation has completed.  Methods 
on objects are used when you are doing something more persistent, for 
example, connecting a client to a server - there is a potential for 
success or failure of that one operation, true, but the more interesting 
thing is the continuous stream of data being received from or sent to 
the other side of the connection.



From alex-news at comcast.net  Sat May 15 19:34:28 2004
From: alex-news at comcast.net (Alexander May)
Date: Sat, 15 May 2004 19:34:28 -0400
Subject: [Twisted-Python] Re: Simple app pickle issue when stopping
In-Reply-To: <1084653593.1151.132.camel@hyla>
Message-ID: <E1BP8gH-0000mD-00@pyramid.twistedmatrix.com>

Yes, that worked.  Thank you.

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Alex Levy
Sent: Saturday, May 15, 2004 4:40 PM
To: Twisted discussion stuff
Subject: [Twisted-Python] Re: Simple app pickle issue when stopping

On Sat, 2004-05-15 at 15:14, Alexander May wrote:
> Still trying to learn/understand twisted.  Mind exploding/getting 
> frustrated.  I created this very simple app:

--snip--

>           File 
> "C:\Python23\Lib\site-packages\twisted\persisted\sob.py",
> line 119, in dumpFunc
>             pickle.dump(obj, file, 1)
>         cPickle.PicklingError: Can't pickle __builtin__.SimpleResource:
> attribute lookup __builtin__.SimpleResource faied

Try defining SimpleResource inside your own module, instead of in
scratch.py. That way, when it goes to pickle your resource, it looks up
'mymodule.SimpleResource' instead of '__builtin__.SimpleResource'.

Worth a try?

Separation of application code and deployment code is pretty important for
Twisted apps. The idea is that .tac and .rpy files (and other such
things) shouldn't have your actual application in them - they should just be
glue to get your application to work properly within a given system.

--
Alex Levy
WWW: http://mesozoic.geecs.org/

"Never let your sense of morals prevent you from doing what is right."
-- Salvor Hardin, Isaac Asimov's _Foundation_




From radix at twistedmatrix.com  Sat May 15 19:36:07 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 15 May 2004 19:36:07 -0400
Subject: [Twisted-Python] Learning Twisted
In-Reply-To: <40A69500.7010501@divmod.com>
References: <40A6859C.9000602@injektilo.org> <40A69500.7010501@divmod.com>
Message-ID: <40A6A967.1050002@twistedmatrix.com>

Glyph Lefkowitz wrote:
> Jason Diamond wrote:
>> Also, it's not obvious to me how protocol implementors decide when to
>> have users override a method versus having them use callbacks. I know
>> I'm working on client code but knowing this might help me know how to
>> use their code. Is it a matter of personal preference? The ircLogBot
>> example didn't have any callbacks using deferreds but it looks like I
>> had no choice when using IMAP4Client.
> 
> It's not purely preference, but there is some overlap.  Generally, what 
> Deferreds are used for are when you've got some operation that happens 
> once, with one result: you want to delete a message, for example, and 
> get a notification when that deletion operation has completed.  Methods 
> on objects are used when you are doing something more persistent, for 
> example, connecting a client to a server - there is a potential for 
> success or failure of that one operation, true, but the more interesting 
> thing is the continuous stream of data being received from or sent to 
> the other side of the connection.

Also, the "request" vs "arbitrary events" distinction should be 
clarified: Deferreds (i.e., callbacks) are used when you want to expose 
an API that allows a request to be made for some operation to occur, and 
they'll get triggered when the operation is complete (or has errored). 
Methods to be overridden are there for when there's no 1:1 mapping of 
requests to responses, when these events can happen even without 
expecting them.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040515/e116b9a0/attachment.pgp 

From alex-news at comcast.net  Sat May 15 19:43:22 2004
From: alex-news at comcast.net (Alexander May)
Date: Sat, 15 May 2004 19:43:22 -0400
Subject: [Twisted-Python] Simple app pickle issue when stopping
In-Reply-To: <20040515203420.14915.194049309.divmod.quotient.62@ohm>
Message-ID: <E1BP8ou-0000sb-00@pyramid.twistedmatrix.com>

Thank you.  Soon, I'll be attaching to a database, and the pickling stuff
won't matter, so I'll use the -o flag as you suggest.

Anyone have any experience with gadfly and using it with twisted?  I'm
prototyping so I'm tempted to give it a try and avoid setting up a real
database (not that gadfly isn't real).  And while I'm off subject, anyone
have a suggestion for integrating authorization with windows (and probably
Linux down the road)? I'm reading the docs...

Thanks,
Alex


-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
exarkun at divmod.com
Sent: Saturday, May 15, 2004 4:34 PM
To: Twisted discussion stuff
Subject: Re: [Twisted-Python] Simple app pickle issue when stopping

On Sat, 15 May 2004 15:14:49 -0400, "Alexander May" <alex-news at comcast.net>
wrote:
>Still trying to learn/understand twisted.  Mind exploding/getting
frustrated.  I created this very simple app:
> [snip]

  Instances are pickled by saving the name of their class and their
associated state.  Since the SimpleResource class isn't defined in a real
module, instances of it cannot be pickled (its name is a lie).  Move the
class definition into a real module, then import it from your tac file.  The
pickle problems should go away.
  Also, if pickling isn't important, you can just pass the -o flag to twistd
and the application will not be saved on shutdown.

  Jp

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From laforge49 at yahoo.co.in  Sun May 16 07:49:56 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Sun, 16 May 2004 12:49:56 +0100 (BST)
Subject: [Twisted-Python] integrating CompStrm//adding background processing
Message-ID: <20040516114956.67585.qmail@web8309.mail.in.yahoo.com>

I've been working on integrating Compstrm 
( http://compstrm.sourceforge.net ) and, while integration was pretty 
easy, it got harder when I wanted to speed things up.
 
Basicly, compstrm uses yields to impliment a kind of light-weight 
threads. So I needed to add background processing to the main reactor 
loop. Here's the code I finally came up with:
 
from twisted.internet import reactor
def _runUntilCurrentNew():
    if reactor.poll:
        p=reactor.poll
        reactor.poll=None
        p()
    _runUntilCurrentOld()
 
_runUntilCurrentOld=reactor.runUntilCurrent
reactor.runUntilCurrent=_runUntilCurrentNew

reactor.poll=None
def _timeoutNew():
    if reactor.poll:
        return 0
    return _timeoutOld
 
_timeoutOld=reactor.timeout
reactor.timeout=_timeoutNew

Just using reactor.callLater, I could only get a speed of 90, in contrast to 
the asyncore integration which was doing better than 12,000.
 
By replacing runUntilCurrent and timeout, I managed to bump my speed up to better than 8,000, which seems reasonable, as Twisted is a bit 
more "heavy weight" than asyncore. ;-)
 
While I'm at it, here's my revised takedown code:

class whenNoDelayedCalls:
    "I check for when there are no delayed calls."
    
    def __init__(self,granularity=1.0,func=reactor.stop):
        self.func=func
        self.granularity=granularity
        reactor.callLater(granularity,self)
    def __call__(self):
        c=len(reactor.getDelayedCalls())
        if c or reactor.poll:
            reactor.callLater(self.granularity,self)
        else:
            self.func()
 
def pollLoop(granularity=1.0,func=reactor.stop):
    "I run the reactor until there are no more delayed calls."
    
    whenNoDelayedCalls(granularity,func)
    reactor.run()

This gives me an approximate equivalent to the asyncore poll loop,
at least when there's no threads or sockets running. ;-)
 


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040516/56a15f73/attachment.htm 

From glyph at divmod.com  Sun May 16 17:07:29 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Sun, 16 May 2004 17:07:29 -0400
Subject: [Twisted-Python] integrating CompStrm//adding background
	processing
In-Reply-To: <20040516114956.67585.qmail@web8309.mail.in.yahoo.com>
References: <20040516114956.67585.qmail@web8309.mail.in.yahoo.com>
Message-ID: <40A7D811.5000602@divmod.com>

Hi Bill,

Bill la Forge wrote:
> I've been working on integrating Compstrm
> ( http://compstrm.sourceforge.net ) and, while integration was pretty
> easy, it got harder when I wanted to speed things up.

I appreciate reports of performance issues, and I'm sure the reactor 
could be sped up a bit - but this report seemed a bit vague, and as far 
as a few helpful folks on #twisted could tell, wrong.

> Just using reactor.callLater, I could only get a speed of 90, in 
> contrast to
> the asyncore integration which was doing better than 12,000.

90 whats per what on what?  How exactly did you measure this?

We assumed you meant "90 trivial calls per second" and "on relatively 
recent hardware". The only test we did that made this radical kind of 
difference was inserting a 'print' statement into the "trivial" 
callback.  The numbers for callLaters-per-second on various hardware we 
had lying around, mostly around ~2GhZ athlons, were in the 15000-25000 
range.

> By replacing runUntilCurrent and timeout, I managed to bump my speed up 
> to better than 8,000, which seems reasonable, as Twisted is a bit
> more "heavy weight" than asyncore. ;-)

Also I'm not sure why your code would have sped up the reactor.  Would 
you mind sending your code in the form of two complete Python programs 
that will demonstrate the difference in speed between your newer 
callLater code and the existing reactor?



From python at adytumsolutions.com  Sun May 16 17:53:25 2004
From: python at adytumsolutions.com (Duncan McGreggor)
Date: Sun, 16 May 2004 17:53:25 -0400
Subject: [Twisted-Python] Custom app using twisted
In-Reply-To: <2D512B60-A62F-11D8-923B-000393DB4358@adytumsolutions.com>
References: <2D512B60-A62F-11D8-923B-000393DB4358@adytumsolutions.com>
Message-ID: <753E5A15-A783-11D8-A8DB-000393DB4358@adytumsolutions.com>


On May 15, 2004, at 1:17 AM, Duncan McGreggor wrote:

> But I am not sure how to get started yet... I want to write something 
> that can be run with twistd. Can anyone offer guidance or suggestions 
> as to the approach? Right now, I am locked on the example here: 
> http://twistedmatrix.com/documents/current/howto/application.html ... 
> Is this what I should be looking at for inspiration? Or another 
> approach all together? I've not come across examples of twisted apps 
> that are a narrow specialization like what I have in mind... the app 
> would be a *kind* of server... that would regularly spawn processes 
> and wait for return data, regularly instantiate python monitoring 
> classes.

In case any other twisted newbies are interested in learning to apply 
twisted in a similar manner, I am sharing a link I found the other day:
http://www.onlamp.com/pub/a/python/2004/02/12/advanced_nio.html?page=3

Though this example doesn't use twisted.application or the plug-in 
method (both of which I am exploring, and will use), it's code has 
given me ideas on how to proceed. It's simplicity and conceptual 
similarity to what I am doing is just what I needed :-)




From exarkun at divmod.com  Sun May 16 18:13:55 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Sun, 16 May 2004 18:13:55 -0400
Subject: [Twisted-Python] Learning Twisted
In-Reply-To: <40A6859C.9000602@injektilo.org>
References: <40A6859C.9000602@injektilo.org>
Message-ID: <40A7E7A3.7000603@divmod.com>

Jason Diamond wrote:

> Sorry for the length of this post but I learn best by trying to
> explain what I'm learning (even if nobody's listening). Twisted seems
> very cool but also *huge* and unlike any framework I've used before so
> I thought I'd post my first experiences with it in the hopes that I
> could be corrected where needed (and maybe even help people other new
> like me).

I'd like to repeat what Glyph said.  This is great feedback, I'd love to =

see more of it :)

>
> [snip]
>
> This is what I came up with:
>
> from twisted.internet import reactor, protocol
> from twisted.protocols import imap4
>
> class MyIMAP4Client(imap4.IMAP4Client):
>
>    def connectionMade(self):
>        imap4.IMAP4Client.connectionMade(self)
>        print "connectionMade"

  The above works (as you noticed ;) but isn't quite as good as hooking =

into the "serverGreeting" method, which is called after the IMAP4 server =

sends its initial message (I realize this isn't well documented).

>
> [snip]
>
> Note that this is *not* a method of the MyIMAP4Client class. But it
> worked! I got this printed to the console:
>
> connectionMade
> loginCallback: ([], 'OK LOGIN Ok.')
>
> I don't know, however, what the tuple represents. What's that empty
> list? In a perfect world, would this be explained in the IMAP4Client
> documentation? (I'm assuming that every callback would be different.)
>
  The callback value here is something of an implementation detail.  =

Deferreds (somewhat informally) often fall into one of two categories: =

those which will eventually be called back with an interesting value =

which is necessary for further computations, and those which will =

eventually be called back with a not-so-interesting value which only =

serves to indicate that the desired operation has completed.  login() =

falls into the second category.

> [snip]
>
> Am I correct in assuming that the IMAP4Client documentation needs some
> buffing up? (Maybe I can help with that.) I didn't look at any source
> code (other than in the HOWTOs) in implementing this so I think that's
> a good sign. But as I mentioned above, I'm not clear on how I know
> what the signature for my callbacks should be or what the parameters
> to those callbacks mean in some cases.

  Yep.  More documentation would be great.  The actual signature for =

callbacks is easy.  It's always a callable that takes one argument (by =

the way, this is why your code worked with both free functions and =

methods - it doesn't matter what kind of callable you use, as long as it =

takes one argument).  Further documentation about the specifics of what =

that one parameter means is definitely needed, though.

> [snip]
>
> Thanks for reading this far!
>
  Thanks for writing!

  Jp




From jason at injektilo.org  Sun May 16 21:32:51 2004
From: jason at injektilo.org (Jason Diamond)
Date: Sun, 16 May 2004 18:32:51 -0700
Subject: [Twisted-Python] Learning Twisted
In-Reply-To: <40A6A967.1050002@twistedmatrix.com>
References: <40A6859C.9000602@injektilo.org> <40A69500.7010501@divmod.com>
	<40A6A967.1050002@twistedmatrix.com>
Message-ID: <40A81643.4080701@injektilo.org>

Christopher Armstrong wrote:

> Glyph Lefkowitz wrote:
>
>> Jason Diamond wrote:
>>
>>> Also, it's not obvious to me how protocol implementors decide when to
>>> have users override a method versus having them use callbacks. I know
>>> I'm working on client code but knowing this might help me know how to
>>> use their code. Is it a matter of personal preference? The ircLogBot
>>> example didn't have any callbacks using deferreds but it looks like I
>>> had no choice when using IMAP4Client.
>>
>>
>> It's not purely preference, but there is some overlap.  Generally, 
>> what Deferreds are used for are when you've got some operation that 
>> happens once, with one result: you want to delete a message, for 
>> example, and get a notification when that deletion operation has 
>> completed.  Methods on objects are used when you are doing something 
>> more persistent, for example, connecting a client to a server - there 
>> is a potential for success or failure of that one operation, true, 
>> but the more interesting thing is the continuous stream of data being 
>> received from or sent to the other side of the connection.
>
>
> Also, the "request" vs "arbitrary events" distinction should be 
> clarified: Deferreds (i.e., callbacks) are used when you want to 
> expose an API that allows a request to be made for some operation to 
> occur, and they'll get triggered when the operation is complete (or 
> has errored). Methods to be overridden are there for when there's no 
> 1:1 mapping of requests to responses, when these events can happen 
> even without expecting them.

Ah! This makes perfect sense to me. So I can think of overridable 
methods as events that didn't require any action on my part to fire.

However, the ircLogBot example [1], implies that calling self.join will 
eventually invoke self.joined as if self.joined was the permanent 
callback for calling self.join. I like your explanation for the 
distinction between deferreds and methods but this seems to be blurring 
the two. What happens if an error occurred while trying to join a 
channel? (I'm not trying to pick anybody--I'm just trying to make sense 
of the examples that I'm seeing.)

-- Jason

[1]
http://twistedmatrix.com/documents/current/howto/clients#auto5




From jason at injektilo.org  Sun May 16 21:57:26 2004
From: jason at injektilo.org (Jason Diamond)
Date: Sun, 16 May 2004 18:57:26 -0700
Subject: [Twisted-Python] Learning Twisted
In-Reply-To: <40A69500.7010501@divmod.com>
References: <40A6859C.9000602@injektilo.org> <40A69500.7010501@divmod.com>
Message-ID: <40A81C06.1070204@injektilo.org>

Glyph Lefkowitz wrote:

> If possible, you should try to run Twisted code under twistd, which 
> means that you'd remove that code from your Python module, and put it 
> into a separate .tac file that read something like:
>
> from twisted.application.internet import TCPClient
> from twisted.application.service import Application, IServiceCollection
> application = Application("my client application")
> f = MyIMAP4ClientFactory()
> client = TCPClient("server", 143, f)
> client.setServiceParent(application)
>
> Even if you do have a need to put your code into its own script - and 
> the twistd support for clients is admittedly weaker than that for 
> servers - it's generally a good idea not to put it in the same script 
> as  your code.

Thanks for the tip, I started reading the "Twisted from Scratch" 
tutorial [1] and see why this is useful now. For my simple client 
explorations, though, it's spitting out a lot more output than I would 
expect. But still very informative!

-- Jason

[1]
http://twistedmatrix.com/documents/current/howto/tutorial




From jason at injektilo.org  Sun May 16 22:04:58 2004
From: jason at injektilo.org (Jason Diamond)
Date: Sun, 16 May 2004 19:04:58 -0700
Subject: [Twisted-Python] Learning Twisted
In-Reply-To: <40A7E7A3.7000603@divmod.com>
References: <40A6859C.9000602@injektilo.org> <40A7E7A3.7000603@divmod.com>
Message-ID: <40A81DCA.8030404@injektilo.org>

Jp Calderone wrote:

> Jason Diamond wrote:
>
>> This is what I came up with:
>>
>> from twisted.internet import reactor, protocol
>> from twisted.protocols import imap4
>>
>> class MyIMAP4Client(imap4.IMAP4Client):
>>
>>    def connectionMade(self):
>>        imap4.IMAP4Client.connectionMade(self)
>>        print "connectionMade"
>
>   The above works (as you noticed ;) but isn't quite as good as hooking =
> into the "serverGreeting" method, which is called after the IMAP4 
> server =
> sends its initial message (I realize this isn't well documented).

Cool! This makes perfect sense and I'll look for methods like 
serverGreeting from now on.

Here's my updated test:

from twisted.internet import reactor, protocol
from twisted.protocols import imap4

server = "xxx"
username = "yyy"
password = "zzz"

debug = 0

class MyIMAP4Client(imap4.IMAP4Client):

    def serverGreeting(self, caps):
        if debug: print "serverGreeting:", caps
        imap4.IMAP4Client.serverGreeting(self, caps)
        d = self.login(username, password)
        d.addCallback(self.loginCallback)

    def loginCallback(self, d):
        if debug: print "loginCallback:", d
        de = self.select("INBOX")
        de.addCallback(self.selectCallback)

    def selectCallback(self, d):
        if debug: print "selectCallback:", d
        print "I have %d messages in my INBOX." % d["EXISTS"]
        de = self.logout()
        de.addCallback(self.logoutCallback)

    def logoutCallback(self, d):
        if debug: print "logoutCallback:", d
        reactor.stop()

    def connectionLost(self, reason):
        if debug: print "connectionLost:", reason
        imap4.IMAP4Client.connectionLost(self)

    def sendLine(self, line):
        if debug: print "sendLine:", line
        imap4.IMAP4Client.sendLine(self, line)

    def lineReceived(self, line):
        if debug: print "lineReceived:", line
        imap4.IMAP4Client.lineReceived(self, line)

class MyIMAP4ClientFactory(protocol.ClientFactory):

    protocol = MyIMAP4Client

if __name__ == "__main__":
    f = MyIMAP4ClientFactory()
    reactor.connectTCP(server, 143, f)
    reactor.run()

>> [snip]
>>
>> Note that this is *not* a method of the MyIMAP4Client class. But it
>> worked! I got this printed to the console:
>>
>> connectionMade
>> loginCallback: ([], 'OK LOGIN Ok.')
>>
>> I don't know, however, what the tuple represents. What's that empty
>> list? In a perfect world, would this be explained in the IMAP4Client
>> documentation? (I'm assuming that every callback would be different.)
>>
>  The callback value here is something of an implementation detail.  =
> Deferreds (somewhat informally) often fall into one of two categories: =
> those which will eventually be called back with an interesting value =
> which is necessary for further computations, and those which will =
> eventually be called back with a not-so-interesting value which only =
> serves to indicate that the desired operation has completed.  login() =
> falls into the second category.

OK, this makes sense. But if the login callback doesn't have any useful 
information, why isn't it None (like the logout callback)? Or is that 
the implementation detail you're referring to that I should just forget 
about?

>> [snip]
>>
>> Am I correct in assuming that the IMAP4Client documentation needs some
>> buffing up? (Maybe I can help with that.) I didn't look at any source
>> code (other than in the HOWTOs) in implementing this so I think that's
>> a good sign. But as I mentioned above, I'm not clear on how I know
>> what the signature for my callbacks should be or what the parameters
>> to those callbacks mean in some cases.
>
>   Yep.  More documentation would be great.  The actual signature for =
> callbacks is easy.  It's always a callable that takes one argument (by =
> the way, this is why your code worked with both free functions and =
> methods - it doesn't matter what kind of callable you use, as long as 
> it =
> takes one argument).  Further documentation about the specifics of what =
> that one parameter means is definitely needed, though. 

I also just realized that a method attribute retrieved from an instance, 
even though it's declared as taking in two arguments (the first being 
self), returns a function that only has one argument--self is bound to 
the instance you used to grab the method.

-- Jason




From laforge49 at yahoo.co.in  Sun May 16 22:43:39 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Mon, 17 May 2004 03:43:39 +0100 (BST)
Subject: [Twisted-Python] integrating CompStrm//adding background
	processing
In-Reply-To: <40A7D811.5000602@divmod.com>
Message-ID: <20040517024339.42551.qmail@web8310.mail.in.yahoo.com>

Sorry for the confusion.
 
In the CompStrm project, I'm developing an alternative asyn programming 
style, in an attempt to make such code easier to read/maintain. Like 
flow, it is based on the yield statement. Unlike flow, it requires a 
mechanism for executing code in the background of the main thread.
 
So I'm not speeding up Twisted in any way. Rather, I'm adding a feature, 
all be it one that could be easily abused, by allowing for the inclusion of
an additional function call in the reactor main loop.
 
My initial approach, of using callLater for successive invocations, was 
flawed because of the limited granularity of time available on a PC. This 
means that I was only able to capture control for a very small number of
main loop cycles. But by inserting an additional method call, I am now 
able to perform a little background processing with every cycle.
 
As for the timing, I'm counting the number of items I can pass on an
async pipe between two virtual processes running in the background of
the main thread. Details for running over asyncore are available here:
http://compstrm.sourceforge.net/timing.html
 
Bill

Glyph Lefkowitz <glyph at divmod.com> wrote:
Hi Bill,

I appreciate reports of performance issues, and I'm sure the reactor 
could be sped up a bit - but this report seemed a bit vague, and as far 
as a few helpful folks on #twisted could tell, wrong.

> Just using reactor.callLater, I could only get a speed of 90, in 
> contrast to
> the asyncore integration which was doing better than 12,000.

90 whats per what on what? How exactly did you measure this?

We assumed you meant "90 trivial calls per second" and "on relatively 
recent hardware". The only test we did that made this radical kind of 
difference was inserting a 'print' statement into the "trivial" 
callback. The numbers for callLaters-per-second on various hardware we 
had lying around, mostly around ~2GhZ athlons, were in the 15000-25000 
range.


Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040517/35c64529/attachment.htm 

From glyph at divmod.com  Sun May 16 23:01:45 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Sun, 16 May 2004 23:01:45 -0400
Subject: [Twisted-Python] Learning Twisted
In-Reply-To: <40A81643.4080701@injektilo.org>
References: <40A6859C.9000602@injektilo.org>
	<40A69500.7010501@divmod.com>	<40A6A967.1050002@twistedmatrix.com>
	<40A81643.4080701@injektilo.org>
Message-ID: <40A82B19.4020103@divmod.com>

Jason Diamond wrote:

> 
> However, the ircLogBot example [1], implies that calling self.join will 
> eventually invoke self.joined as if self.joined was the permanent 
> callback for calling self.join. I like your explanation for the 
> distinction between deferreds and methods but this seems to be blurring 
> the two. What happens if an error occurred while trying to join a 
> channel? (I'm not trying to pick anybody--I'm just trying to make sense 
> of the examples that I'm seeing.)
> 
> -- Jason
> 
> [1]
> http://twistedmatrix.com/documents/current/howto/clients#auto5

Aah, but that taps into the deep mystery of IRC.  The server can send 
you a 'joined' notification *even if you didn't previously request to 
join a channel*.  Also there is no particular way to hook up a join 
request and a join notification; if you request to join #foobar 3 times, 
and then you only get one notification of having joined, it's not clear 
which request gets the callback; commands are not tagged.

Of course this varies between IRC servers, too.

Better-specified protocols will tend to have better-specified interfaces 
that make use of Deferreds more.



From itamar at itamarst.org  Sun May 16 23:29:26 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 16 May 2004 23:29:26 -0400
Subject: [Twisted-Python] integrating CompStrm//adding background
	processing
In-Reply-To: <20040517024339.42551.qmail@web8310.mail.in.yahoo.com>
References: <20040517024339.42551.qmail@web8310.mail.in.yahoo.com>
Message-ID: <1084764566.28823.7.camel@sheriffpony>

On Sun, 2004-05-16 at 22:43, Bill la Forge wrote:
 
> My initial approach, of using callLater for successive invocations,
> was 
> flawed because of the limited granularity of time available on a PC.

The suggested way for doing highly frequent calls to scheduled events in
twisted is twisted.internet.task.LoopingCall. It does not have this
flaw.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From laforge49 at yahoo.co.in  Mon May 17 00:14:08 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Mon, 17 May 2004 05:14:08 +0100 (BST)
Subject: [Twisted-Python] integrating CompStrm//adding background
	processing
In-Reply-To: <1084764566.28823.7.camel@sheriffpony>
Message-ID: <20040517041408.1995.qmail@web8308.mail.in.yahoo.com>

It isn't that I want to call a function with a particular frequency. Rather, 
I want to call a function once per main loop. Further, when the function
is available to be called, I want to run with a timeout of 0 to further
increase the frequency of calls. LoopingCall still uses callLater which 
simply can not deliver this type of service.
 
My view on things is that, while blocking I/O is best put in another 
thread, computations that can be broken into small pieces (putting
yield statements in every loop, for example) can run very nicely in the
background. Between each chunck of processing, you check for any
timer events and for I/O completions, of course. But you want to execute
these small chuncks AS FREQUENTLY AS POSSIBLE.
 
But like I said, I'm developing a new style of async programming. So
its bound to be something of a heresy. ;-)
 
Bill

Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
The suggested way for doing highly frequent calls to scheduled events in
twisted is twisted.internet.task.LoopingCall.
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040517/de7cf519/attachment.htm 

From radix at twistedmatrix.com  Mon May 17 01:07:21 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 17 May 2004 01:07:21 -0400
Subject: [Twisted-Python] integrating CompStrm//adding
	background	processing
In-Reply-To: <20040517041408.1995.qmail@web8308.mail.in.yahoo.com>
References: <20040517041408.1995.qmail@web8308.mail.in.yahoo.com>
Message-ID: <40A84889.5050503@twistedmatrix.com>

Bill la Forge wrote:
> It isn't that I want to call a function with a particular frequency. 
> Rather,
> I want to call a function once per main loop. Further, when the function
> is available to be called, I want to run with a timeout of 0 to further
> increase the frequency of calls. LoopingCall still uses callLater which
> simply can not deliver this type of service.
>  
> My view on things is that, while blocking I/O is best put in another
> thread, computations that can be broken into small pieces (putting
> yield statements in every loop, for example) can run very nicely in the
> background. Between each chunck of processing, you check for any
> timer events and for I/O completions, of course. But you want to execute
> these small chuncks AS FREQUENTLY AS POSSIBLE.
>  
> But like I said, I'm developing a new style of async programming. So
> its bound to be something of a heresy. ;-)

Indeed, it sounds like what you're doing doesn't make any sense. Why do 
you need to call something every mainloop iteration? That's exactly the 
worst way to write asynchronous code. Polling sucks. :)

Maybe you can explain more about what you're doing? What *applications* 
do you have in mind that this thing would be good for? (I notice that 
your web site's first sentence mentions how great it would be to create 
applications from components, but the web site doesn't mention anything 
at all about existing or even theoretical applications).


-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040517/bb01f9e4/attachment.pgp 

From laforge49 at yahoo.co.in  Mon May 17 04:00:33 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Mon, 17 May 2004 09:00:33 +0100 (BST)
Subject: [Twisted-Python] integrating CompStrm//adding background
	processing
In-Reply-To: <40A84889.5050503@twistedmatrix.com>
Message-ID: <20040517080033.39948.qmail@web8301.mail.in.yahoo.com>

If it looks like polling and acts like polling, when is it not polling?
--When its incrimental computing!
 
I've updated the project web pages to cover the Twisted integration:
    http://compstrm.sourceforge.net
But It really does not address this issue.
 
Polling, or rather, unnecessary polling is EVIL, especially in a 
framework like Twisted. Its an even greater sin than using BLOCKING
I/O for reading email files that could be very very large. ;-)
 
But polling is when you are checking something, like I/O completion.
That's NOT what is happening in CompStrm. Instead, CompStrm is
executing (hopefully!) useful application code, in small chunks.
 
When is this useful? Well, when you have some long-running 
application code, the alternative is to execute it on a separate thread.
Indeed, this is a good solution. Except that not everyone can debug
some of the nasties that occur. And then you've got all that overhead
and the delays that seem to be part of inter-task communication.
So you start optimizing to pass large chuncks between threads and,
woops, there goes your response time. (The old fast or cheap choice.)
 
CompStrm also integrates well with async I/O, allowing you to untwist
your logic a bit. Have you read anything about Stackless Python? This
is similar, but builds on Python Generators instead.
 
Does any of this help?
 
And as for applications, indeed, CompStrm developed from the latest 
requests my client has given me. I've got a client/server app with an
asynchronous interface used to compute just-in-time displays of multiple
streams. Now he wants the existing operations pushed into scripts.
With compstrm, I can have light-weight child processes sharing the
same I/O streams. I want to port all this to Twisted, but need several
additions: CompStrm and a good bsddb integration.
 
Now that I've completed the Twisted/CompStrm integration, I'll turn to
Twisted/bsddb integration. Be assured, I will not include CompStrm in
that integration!!! (It should be generally useful, and provide a means
of reading potentially large data using server threads, while minimizing
inter-thread overheads.)
 
Bill

Christopher Armstrong <radix at twistedmatrix.com> wrote:
Indeed, it sounds like what you're doing doesn't make any sense. Why do 
you need to call something every mainloop iteration? That's exactly the 
worst way to write asynchronous code. Polling sucks. :)

Maybe you can explain more about what you're doing? What *applications* 
do you have in mind that this thing would be good for? (I notice that 
your web site's first sentence mentions how great it would be to create 
applications from components, but the web site doesn't mention anything 
at all about existing or even theoretical applications).

Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040517/9e113290/attachment.htm 

From glyph at divmod.com  Mon May 17 08:08:28 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 17 May 2004 08:08:28 -0400
Subject: [Twisted-Python] integrating CompStrm//adding background
	processing
In-Reply-To: <20040517024339.42551.qmail@web8310.mail.in.yahoo.com>
References: <20040517024339.42551.qmail@web8310.mail.in.yahoo.com>
Message-ID: <1084795707.20695.5.camel@kazekage>

On Sun, 2004-05-16 at 22:43, Bill la Forge wrote:

> As for the timing, I'm counting the number of items I can pass on an
> async pipe between two virtual processes running in the background of
> the main thread. Details for running over asyncore are available here:
> http://compstrm.sourceforge.net/timing.html

That code doesn't run - for starters, there is no variable 'd' in
WriteMany.cs, endWrite does not appear to take an argument, I think
readCount() is supposed to be ReadCount() in test(); it also doesn't
appear to test the twcs module, but rather only the asyncore loop.  Can
you package some easy-to-run tests with your next release?





From glyph at divmod.com  Mon May 17 09:05:29 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 17 May 2004 09:05:29 -0400
Subject: [Twisted-Python] integrating CompStrm//adding background
	processing
In-Reply-To: <1084795707.20695.5.camel@kazekage>
References: <20040517024339.42551.qmail@web8310.mail.in.yahoo.com>
	<1084795707.20695.5.camel@kazekage>
Message-ID: <1084799128.20970.20.camel@kazekage>

On Mon, 2004-05-17 at 08:08, Glyph Lefkowitz wrote:
> On Sun, 2004-05-16 at 22:43, Bill la Forge wrote:
> 
> > As for the timing, I'm counting the number of items I can pass on an
> > async pipe between two virtual processes running in the background of
> > the main thread. Details for running over asyncore are available here:
> > http://compstrm.sourceforge.net/timing.html
> 
> That code doesn't run - for starters, there is no variable 'd' in
> WriteMany.cs, endWrite does not appear to take an argument, I think
> readCount() is supposed to be ReadCount() in test(); it also doesn't
> appear to test the twcs module, but rather only the asyncore loop.  Can
> you package some easy-to-run tests with your next release?

Well, this was an intriguing performance problem, and one that likely
impacts my work, so I went ahead and fixed the tests.  Attached is a
modified copy of twcs.py from the may 16th distribution of compstrm on
sf.net, a twcsperf.py that tests it, and a patch to Twisted that may be
good to consider including.  This patch special-cases a 0 argument to
callLater to bypass the incredibly expensive gettimeofday syscall that
we end up making as a result.  I _think_ this is safe but I haven't run
the test suite on it yet.

On my machine, running the tests twice in a row:

glyph at kazekage:~/Desktop% python twcsperf.py
Pristine Twisted
7.85587286949e-05
12729.3302299 per second
callLater-Patched Twisted
8.00807499886e-05
12487.3955369 per second
glyph at kazekage:~/Desktop% python twcsperf.py
Pristine Twisted
7.8611869812e-05
12720.7252848 per second
callLater-Patched Twisted
7.80673313141e-05
12809.4554171 per second

YMMV, but I believe this effectively eliminates any performance
difference for your use case.  (Without the patch, I was getting more
like "8000 per second".)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: twcs.py
Type: text/x-python
Size: 6093 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040517/83af88a9/attachment.py 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: special-case-zero.patch
Type: text/x-patch
Size: 718 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040517/83af88a9/attachment.bin 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: twcsperf.py
Type: text/x-python
Size: 990 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040517/83af88a9/attachment-0001.py 

From laforge49 at yahoo.co.in  Mon May 17 09:35:18 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Mon, 17 May 2004 14:35:18 +0100 (BST)
Subject: [Twisted-Python] integrating CompStrm//adding background
	processing
In-Reply-To: <1084799128.20970.20.camel@kazekage>
Message-ID: <20040517133518.42061.qmail@web8307.mail.in.yahoo.com>

Many thanks! I'll dig into this tomorrow. (I'm in India, so your day
is my night. ;-)
 
Bill

Glyph Lefkowitz <glyph at divmod.com> wrote:
On Mon, 2004-05-17 at 08:08, Glyph Lefkowitz wrote:
> On Sun, 2004-05-16 at 22:43, Bill la Forge wrote:
> 
> > As for the timing, I'm counting the number of items I can pass on an
> > async pipe between two virtual processes running in the background of
> > the main thread. Details for running over asyncore are available here:
> > http://compstrm.sourceforge.net/timing.html
> 
> That code doesn't run - for starters, there is no variable 'd' in
> WriteMany.cs, endWrite does not appear to take an argument, I think
> readCount() is supposed to be ReadCount() in test(); it also doesn't
> appear to test the twcs module, but rather only the asyncore loop. Can
> you package some easy-to-run tests with your next release?

Well, this was an intriguing performance problem, and one that likely
impacts my work, so I went ahead and fixed the tests. Attached is a
modified copy of twcs.py from the may 16th distribution of compstrm on
sf.net, a twcsperf.py that tests it, and a patch to Twisted that may be
good to consider including. This patch special-cases a 0 argument to
callLater to bypass the incredibly expensive gettimeofday syscall that
we end up making as a result. I _think_ this is safe but I haven't run
the test suite on it yet.


Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040517/8723fb8e/attachment.htm 

From laforge49 at yahoo.co.in  Mon May 17 10:14:57 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Mon, 17 May 2004 15:14:57 +0100 (BST)
Subject: [Twisted-Python] A problem with runUntilCurrent
Message-ID: <20040517141457.36366.qmail@web8310.mail.in.yahoo.com>

Glyph,
 
I couldn't resist digging into the code you sent. I noticed that you 
changed the code to use callLater. But there's a problem with that,
I suspect...
 
In base.runUntilCurrent, there's this while loop...
 
        while self._pendingTimedCalls and (self._pendingTimedCalls[-1].time <= now):
            call = self._pendingTimedCalls.pop()
.
.
.
 
This means that when you do a callLater with a delay of 0, 
runUntilCurrent will immediately call the delayed function, which then
calls callLater, and again the delayed function is immediately called, etc.
 
So the net result of the timing test you ran was that the reactor
main loop just hung until the test was completed.
 
So it ran fast. But it really didn't run at all. ;-(
 


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040517/c8b497e5/attachment.htm 

From radix at twistedmatrix.com  Mon May 17 10:20:58 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 17 May 2004 10:20:58 -0400
Subject: [Twisted-Python] A problem with runUntilCurrent
In-Reply-To: <20040517141457.36366.qmail@web8310.mail.in.yahoo.com>
References: <20040517141457.36366.qmail@web8310.mail.in.yahoo.com>
Message-ID: <40A8CA4A.3090003@twistedmatrix.com>

Bill la Forge wrote:

> This means that when you do a callLater with a delay of 0,
> runUntilCurrent will immediately call the delayed function, which then
> calls callLater, and again the delayed function is immediately called, etc.

No, callLater(0,) doesn't call the function synchronously, it calls it 
in the next reactor iteration. i.e., not "*right* now", but "ASAP".

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040517/3fdcc336/attachment.pgp 

From itamar at itamarst.org  Mon May 17 10:22:52 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 17 May 2004 10:22:52 -0400
Subject: [Twisted-Python] A problem with runUntilCurrent
In-Reply-To: <20040517141457.36366.qmail@web8310.mail.in.yahoo.com>
References: <20040517141457.36366.qmail@web8310.mail.in.yahoo.com>
Message-ID: <1084803771.29161.13.camel@sheriffpony>

On Mon, 2004-05-17 at 10:14, Bill la Forge wrote:

> This means that when you do a callLater with a delay of 0, 
> runUntilCurrent will immediately call the delayed function, which then
> calls callLater, and again the delayed function is immediately called,
> etc.

And that's why testImmediateThread failed. Attached is a fixed up patch
that solves that problem.


-------------- next part --------------
A non-text attachment was scrubbed...
Name: base.diff
Type: text/x-patch
Size: 1253 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040517/2242c411/attachment.bin 

From itamar at itamarst.org  Mon May 17 10:24:15 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 17 May 2004 10:24:15 -0400
Subject: [Twisted-Python] A problem with runUntilCurrent
In-Reply-To: <40A8CA4A.3090003@twistedmatrix.com>
References: <20040517141457.36366.qmail@web8310.mail.in.yahoo.com>
	<40A8CA4A.3090003@twistedmatrix.com>
Message-ID: <1084803855.29160.15.camel@sheriffpony>

On Mon, 2004-05-17 at 10:20, Christopher Armstrong wrote:

> No, callLater(0,) doesn't call the function synchronously, it calls it 
> in the next reactor iteration. i.e., not "*right* now", but "ASAP".

That's what it's *supposed* to do. But Glyph's code had a bug for the
following case: 

def infinite(): reactor.callLater(0, infinite)
reactor.callLater(0, infinite)

where it would just call infinite() over and over and over and over.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From laforge49 at yahoo.co.in  Mon May 17 11:04:38 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Mon, 17 May 2004 16:04:38 +0100 (BST)
Subject: [Twisted-Python] A problem with runUntilCurrent
In-Reply-To: <1084803771.29161.13.camel@sheriffpony>
Message-ID: <20040517150438.56987.qmail@web8307.mail.in.yahoo.com>

Itamar, 
 
This is also problematic. What this code does is limit the number of
calls that will be made by runUntilCurrent. However, if there's code
that does a callLater with a delay of 0, it will always execute that.
 
The problem now is that only callLater's with a delay of 0 will be
executed. Yes, now the main loop runs fine, but the other timeouts
are prevented from running. 
 
I'm thinking that what you need to do is to have runUntilCurrent first
extract all the pending timed calls that it plans to execute, creating
a sub-list, and then call them. It takes two loops, not one.
 
Bill

Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
On Mon, 2004-05-17 at 10:14, Bill la Forge wrote:

> This means that when you do a callLater with a delay of 0, 
> runUntilCurrent will immediately call the delayed function, which then
> calls callLater, and again the delayed function is immediately called,
> etc.

And that's why testImmediateThread failed. Attached is a fixed up patch
that solves that problem.


Index: base.py
===================================================================
--- base.py (revision 10658)
+++ base.py (working copy)
@@ -368,7 +368,11 @@
assert callable(_f), "%s is not callable" % _f
assert sys.maxint >= _seconds >= 0, \
"%s is not greater than or equal to 0 seconds" % (_seconds,)
- tple = DelayedCall(seconds() + _seconds, _f, args, kw,
+ if _seconds == 0:
+ tcc = 0
+ else:
+ tcc = seconds() + _seconds
+ tple = DelayedCall(tcc, _f, args, kw,
self._pendingTimedCalls.remove,
self._resetCallLater)
insort(self._pendingTimedCalls, tple)
@@ -416,7 +420,10 @@
count += 1
del self.threadCallQueue[:count]
now = seconds()
- while self._pendingTimedCalls and (self._pendingTimedCalls[-1].time <= now):
+ # make sure we don't run newly added calls, so we don't get into infinite loop
+ numCalls = len(self._pendingTimedCalls)
+ while numCalls and (self._pendingTimedCalls[-1].time <= now):
+ numCalls -= 1
call = self._pendingTimedCalls.pop()
try:
call.called = 1


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040517/cd589a6c/attachment.htm 

From itamar at itamarst.org  Mon May 17 11:21:18 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 17 May 2004 11:21:18 -0400
Subject: [Twisted-Python] A problem with runUntilCurrent
In-Reply-To: <20040517150438.56987.qmail@web8307.mail.in.yahoo.com>
References: <20040517150438.56987.qmail@web8307.mail.in.yahoo.com>
Message-ID: <1084807277.29160.18.camel@sheriffpony>

On Mon, 2004-05-17 at 11:04, Bill la Forge wrote:

> I'm thinking that what you need to do is to have runUntilCurrent first
> extract all the pending timed calls that it plans to execute, creating
> a sub-list, and then call them. It takes two loops, not one.

Ah yes. I'll look into doing that later.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From pje at telecommunity.com  Mon May 17 11:46:35 2004
From: pje at telecommunity.com (Phillip J. Eby)
Date: Mon, 17 May 2004 11:46:35 -0400
Subject: [Twisted-Python] A problem with runUntilCurrent
In-Reply-To: <20040517150438.56987.qmail@web8307.mail.in.yahoo.com>
References: <1084803771.29161.13.camel@sheriffpony>
Message-ID: <5.1.1.6.0.20040517113914.025daec0@mail.telecommunity.com>

At 04:04 PM 5/17/04 +0100, Bill la Forge wrote:
>Itamar,
>
>This is also problematic. What this code does is limit the number of
>calls that will be made by runUntilCurrent. However, if there's code
>that does a callLater with a delay of 0, it will always execute that.

What I don't understand is why that should be the case.  A delay of zero 
should equal the *current time* plus zero.  The 'now' variable, however, is 
fixed at the time when 'runUntilCurrent()' is called.  Therefore, as soon 
as any time has elapsed (i.e. time() advances one quantum), a newly 
scheduled callLater(0,) must be scheduled for a time that is *after* 'now', 
and therefore ineligible for call within the loop.

(I'm particularly puzzled, therefore, by the part of Itamar's patch that 
sets the scheduled time to zero for callLater(0,).)

The real problem here, if any, is likely the use of a low-resolution time() 
value.  On Windows, for example, the tick granularity is like 1/18th of a 
second, so a callLater(0,) loop will consume a huge amount of time.  On 
Windows, a scheduler should probably use the high-res clock() rather than 
the low-res time() in order to work around this, which will ensure that 
nothing scheduled during a 'runUntilCurrent()' call will be executed until 
the *next* 'runUntilCurrent()' call.




From itamar at itamarst.org  Mon May 17 11:59:28 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 17 May 2004 11:59:28 -0400
Subject: [Twisted-Python] A problem with runUntilCurrent
In-Reply-To: <20040517141457.36366.qmail@web8310.mail.in.yahoo.com>
References: <20040517141457.36366.qmail@web8310.mail.in.yahoo.com>
Message-ID: <1084809568.29162.20.camel@sheriffpony>

Another attempt at a patch.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: base.diff
Type: text/x-patch
Size: 1371 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040517/8834b312/attachment.bin 

From db3l at fitlinxx.com  Mon May 17 15:54:18 2004
From: db3l at fitlinxx.com (David Bolen)
Date: 17 May 2004 15:54:18 -0400
Subject: [Twisted-Python] Re: How do I run a twisted server directly
References: <1084591098.21481.611.camel@sheriffpony>
	<E1BOywg-0004Jn-00@pyramid.twistedmatrix.com>
Message-ID: <u4qqen82d.fsf@fitlinxx.com>

"Alexander May" <alex-news at comcast.net> writes:

> Where the last line consists of a single space, then I get an error when I
> run twistd -y scratch.py (call stack at end).  When I remove the space so
> the last line is just a carriage return, it works fine.  I found it strange.
> Perhaps it is a python thing I has just never stumbled on before.  Not a big
> deal now that I know, but it drove me batty for a bit.

It sounds like an existing Python issue having to do with the internal
compile function (which is also used by exec) not handling the case of
a file not terminating in a newline.  Programs that bring in modules
as text and then compile them can run into this (it used to happen to
me with the Installer package).  So it's not really something related
to twisted other than how it accesses the module specified with -y.  I
guess since as of Python 2.2, compile/exec is documented as needing
the newline you might argue twistd should be taking care of that.  And
yes, the fact that it shows up as a bland SyntaxError is not obvious.

This got fixed as part of SourceForge bug 501622.  The fix showed up
in Python 2.3. (See also http://sourceforge.net/tracker/index.php?func=detail&aid=501622&group_id=5470&atid=105470).

-- David




From alex-news at comcast.net  Mon May 17 18:07:47 2004
From: alex-news at comcast.net (Alexander May)
Date: Mon, 17 May 2004 18:07:47 -0400
Subject: [Twisted-Python] Re: How do I run a twisted server directly
In-Reply-To: <u4qqen82d.fsf@fitlinxx.com>
Message-ID: <E1BPqHW-0007L2-00@pyramid.twistedmatrix.com>

> This got fixed as part of SourceForge bug 501622.  The fix showed up in
Python 2.3. (See also
http://sourceforge.net/tracker/index.php?func=detail&aid=501622&group_id=547
0&atid=105470).

Thanks for the info.  I'm running Python 2.3.3.  It does still appear to be
an issue with python and not twisted.

C:\Documents and Settings\Alexander May\My
Documents\maygold-dev\central-server>python
Python 2.3.3 (#51, Dec 18 2003, 20:22:39) [MSC v.1200 32 bit (Intel)] on
win32
Type "help", "copyright", "credits" or "license" for more information.
>>> c=compile ('print "hello world"\n', 'filename', 'exec')
>>> exec c
hello world
>>> c=compile ('print "hello world"\n ', 'filename', 'exec')
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
  File "filename", line 2

SyntaxError: invalid syntax
>>> ^Z

Alex


-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of David Bolen
Sent: Monday, May 17, 2004 3:54 PM
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] Re: How do I run a twisted server directly

"Alexander May" <alex-news at comcast.net> writes:

> Where the last line consists of a single space, then I get an error 
> when I run twistd -y scratch.py (call stack at end).  When I remove 
> the space so the last line is just a carriage return, it works fine.  I
found it strange.
> Perhaps it is a python thing I has just never stumbled on before.  Not 
> a big deal now that I know, but it drove me batty for a bit.

It sounds like an existing Python issue having to do with the internal
compile function (which is also used by exec) not handling the case of a
file not terminating in a newline.  Programs that bring in modules as text
and then compile them can run into this (it used to happen to me with the
Installer package).  So it's not really something related to twisted other
than how it accesses the module specified with -y.  I guess since as of
Python 2.2, compile/exec is documented as needing the newline you might
argue twistd should be taking care of that.  And yes, the fact that it shows
up as a bland SyntaxError is not obvious.

This got fixed as part of SourceForge bug 501622.  The fix showed up in
Python 2.3. (See also
http://sourceforge.net/tracker/index.php?func=detail&aid=501622&group_id=547
0&atid=105470).

-- David


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From laforge49 at yahoo.co.in  Mon May 17 22:34:36 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Tue, 18 May 2004 03:34:36 +0100 (BST)
Subject: [Twisted-Python] A problem with runUntilCurrent
In-Reply-To: <1084809568.29162.20.camel@sheriffpony>
Message-ID: <20040518023436.88140.qmail@web8302.mail.in.yahoo.com>

A better than perfect patch!
 
Itamar, your latest patch has its flaws, as things are a bit off when
a non-zero delay is passed via callLater when callLater is called from
a delayed call. But any mistakes it makes are quickly fixed in the
next cycle, and this is likely an uncommon case as well.
 
Of greater importance than being perfect, then, is that your patch
is likely faster than a perfict patch would be. And this is one place
where speed is most critical.
 
I'll be doing another release in a day or so, and include this patch.
 
Thanks to you and the rest of the Twisted development team who
took the time to dig into my code and then make the changes to
Twisted!

Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
Another attempt at a patch.
Index: base.py


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040518/1b15f7ef/attachment.htm 

From itamar at itamarst.org  Mon May 17 22:49:49 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 17 May 2004 22:49:49 -0400
Subject: [Twisted-Python] A problem with runUntilCurrent
In-Reply-To: <20040518023436.88140.qmail@web8302.mail.in.yahoo.com>
References: <20040518023436.88140.qmail@web8302.mail.in.yahoo.com>
Message-ID: <1084848589.29158.30.camel@sheriffpony>

On Mon, 2004-05-17 at 22:34, Bill la Forge wrote:

> Itamar, your latest patch has its flaws, as things are a bit off when
> a non-zero delay is passed via callLater when callLater is called from
> a delayed call. But any mistakes it makes are quickly fixed in the
> next cycle, and this is likely an uncommon case as well.

Actually it's buggy in the phase of cancel(), and is failing the twisted
test suite...
 

-- 
Itamar Shtull-Trauring    http://itamarst.org





From laforge49 at yahoo.co.in  Mon May 17 23:34:59 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Tue, 18 May 2004 04:34:59 +0100 (BST)
Subject: [Twisted-Python] A problem with runUntilCurrent
In-Reply-To: <1084848589.29158.30.camel@sheriffpony>
Message-ID: <20040518033459.27605.qmail@web8307.mail.in.yahoo.com>

OK, then I'll hold off on my release.
 
Thanks for the heads up! 
 
Bill

Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
On Mon, 2004-05-17 at 22:34, Bill la Forge wrote:

> Itamar, your latest patch has its flaws, as things are a bit off when
> a non-zero delay is passed via callLater when callLater is called from
> a delayed call. But any mistakes it makes are quickly fixed in the
> next cycle, and this is likely an uncommon case as well.

Actually it's buggy in the phase of cancel(), and is failing the twisted
test suite...


-- 
Itamar Shtull-Trauring http://itamarst.org



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040518/650089cc/attachment.htm 

From glyph at divmod.com  Mon May 17 23:40:02 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 17 May 2004 23:40:02 -0400
Subject: [Twisted-Python] A problem with runUntilCurrent
In-Reply-To: <20040518023436.88140.qmail@web8302.mail.in.yahoo.com>
References: <20040518023436.88140.qmail@web8302.mail.in.yahoo.com>
Message-ID: <40A98592.9020503@divmod.com>

Bill la Forge wrote:
> Thanks to you and the rest of the Twisted development team who
> took the time to dig into my code and then make the changes to
> Twisted!

You're welcome :).

The reason that we did so is because your run-time patch requires 
talking to the reactor over private interfaces.  Normally this sort of 
thing can be overlooked in Python, but there are actually multiple 
implementations of the reactor, some of which may not work with those 
changes.  So a more efficient implementation of callLater(0,...) will 
allow your code to be compatible with Twisted and not just happen to 
work on the default reactor :).



From laforge49 at yahoo.co.in  Tue May 18 03:35:28 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Tue, 18 May 2004 08:35:28 +0100 (BST)
Subject: [Twisted-Python] thread migration and bsddb
Message-ID: <20040518073528.51254.qmail@web8304.mail.in.yahoo.com>

The 040518 release of CompStrm supports the movement of computational streams to a server thread and back to the main thread.
See http://compstrm.sourceforge.net/thread.html
 
Thread migration makes it very easy to do blocking I/O without comprimising the main thread.
 
Unfortunatly, this is still not good enough when working with bsddb, as cursors are NOT thread free. To reuse a cursor, you must be on the SAME thread it was created on. ;-(
 
A moderatly reasonable solution seems to be to have a thread dedicated to bsddb. Now the business logic can migrate to that thread, do a bunch of blocking I/O, and then migrate back to the main thread. It would then have the option of returning to the bsddb thread and resume processing with cursors it previously created.
 
Mmm. Looks like its time for me to "put to practice" more of what I've read about Twisted. I'm thinking that managing the bsddb thread might be a Twisted Service--lots better than having each business object instance create its own thread.
 


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040518/e5326956/attachment.htm 

From jason at injektilo.org  Tue May 18 03:51:08 2004
From: jason at injektilo.org (Jason Diamond)
Date: Tue, 18 May 2004 00:51:08 -0700
Subject: [Twisted-Python] More IMAP4Client/Deferred fun
Message-ID: <40A9C06C.2010609@injektilo.org>

Hi.

I'm now trying to move beyond the simple exercise I did yesterday and
turn my IMAP4 "client" into something that could be reusable from
other classes.

This is my current script:

 >>>
from twisted.internet import reactor, protocol
from twisted.protocols import imap4

server = "xxx"
username = "yyy"
password = "zzz"

debug = 0

class MyIMAP4Client(imap4.IMAP4Client):

    def serverGreeting(self, caps):
        if debug: print "serverGreeting:", caps
        imap4.IMAP4Client.serverGreeting(self, caps)
        d = self.login(username, password)
        d.addCallback(self.loginCallback)

    def loginCallback(self, d):
        if debug: print "loginCallback:", d
        de = self.select("INBOX")
        de.addCallback(self.selectCallback)

    def selectCallback(self, d):
        if debug: print "selectCallback:", d
        print "I have %d messages in my INBOX." % d["EXISTS"]
        de = self.logout()
        de.addCallback(self.logoutCallback)

    def logoutCallback(self, d):
        if debug: print "logoutCallback:", d
        reactor.stop()

    def connectionLost(self, reason):
        if debug: print "connectionLost:", reason
        imap4.IMAP4Client.connectionLost(self)

    def sendLine(self, line):
        if debug: print "sendLine:", line
        imap4.IMAP4Client.sendLine(self, line)

    def lineReceived(self, line):
        if debug: print "lineReceived:", line
        imap4.IMAP4Client.lineReceived(self, line)

class MyIMAP4ClientFactory(protocol.ClientFactory):

    protocol = MyIMAP4Client

if __name__ == "__main__":
    f = MyIMAP4ClientFactory()
    reactor.connectTCP(server, 143, f)
    reactor.run()
<<<

(Since this is a learning exercise, I'm trying to keep things simple
by including everything in one script.)

The problem with the above is that it prints to stdout in
selectCallback and then stops the reactor in logoutCallback.

I want to use this class from a Resource's render method. But instead
of printing to stdout, I want to "return" the value so that the render
method can use that value while outputting HTML. It's probably also
not a good idea to stop the reactor while serving a request.

The reactor will already be started by the time render gets invoked on
my resorce so I won't be calling reactor.run, right? But I will need to
connect to my IMAP server. So I tried modifying the script to connect
*after* the reactor started:

 >>>
if __name__ == "__main__":
    def connect(f):
        reactor.connectTCP(server, 143, f)
    f = MyIMAP4ClientFactory()
    reactor.callLater(0, connect, f)
    reactor.run()
<<<

This works just like before but feels weird to me. Is that the correct
usage for reactor.callLater? This was the only way I could figure out
how to invoke a functon *after* calling reactor.run. But this might be
a moot point since reactor.connectTCP probably just adds some events
to the queue and doesn't do anything until the reactor starts anyways,
right?

Looking at the documentation for connectTCP, I found out that it
returns an IConnector implementation but I'm not saving it to a
variable and doing anything with it so I'm not sure what it would buy
me and none of the methods on it look helpful here.

Anyways, I need to *not* print to the console:

 >>>
    def selectCallback(self, d):
        if debug: print "selectCallback:", d
        self.factory.count = d["EXISTS"]
        de = self.logout()
        de.addCallback(self.logoutCallback)
<<<

I'm now saving the count on the factory that created the protocol
instead of printing it directly to stdout.

At some point, I'm going to have to notify somebody that I've
retrieved the count so I figure I'm going to need a Deferred for
that. I modify the factory to hold on to a Deferred for me and set it
up to call a function to use the count:

 >>>
if __name__ == "__main__":
    def printCount(count):
        print count
    reactor.stop()
    f = MyIMAP4ClientFactory()
    f.deferred = defer.Deferred()
    f.deferred.addCallback(printCount)
    reactor.connectTCP(server, 143, f)
    reactor.run()
<<<

But now I need to tell the Deferred to actually make that callback so
I modify logoutCallback and connectionLost:

 >>>
    def logoutCallback(self, d):
        if debug: print "logoutCallback:", d

    def connectionLost(self, reason):
        if debug: print "connectionLost:", reason
        imap4.IMAP4Client.connectionLost(self)
        self.factory.deferred.callback(self.factory.count)
<<<

Now logoutCallback is no longer stopping the reactor. And
connectionLost is using the factory's deferred object to inform some
function what the actual count is. This works but it seems messy.

First of all, it seems like it would be nice if my module could expose
a free function to do all this for me:

 >>>
def getCount():
    f = MyIMAP4ClientFactory()
    f.deferred = defer.Deferred()
    reactor.connectTCP(server, 143, f)
    return f.deferred

if __name__ == "__main__":
    def printCount(count):
        print count
        reactor.stop()
    getCount().addCallback(printCount)
    reactor.run()
<<<

That's the best I can do. It works but I still don't feel all that
stoked on it. What am I doing wrong?

Is using my ClientFactory to hold data like this the correct thing to
do? In this case, there will only be one Protocol instance for this
ClientFactory, right?

Just for easy reference, here's the complete script in all its glory:

 >>>
from twisted.internet import defer, reactor, protocol
from twisted.protocols import imap4

server = "xxx"
username = "yyy"
password = "zzz"

debug = 0

class MyIMAP4Client(imap4.IMAP4Client):

    def serverGreeting(self, caps):
        if debug: print "serverGreeting:", caps
        imap4.IMAP4Client.serverGreeting(self, caps)
        d = self.login(username, password)
        d.addCallback(self.loginCallback)

    def loginCallback(self, d):
        if debug: print "loginCallback:", d
        de = self.select("INBOX")
        de.addCallback(self.selectCallback)

    def selectCallback(self, d):
        if debug: print "selectCallback:", d
        self.factory.count = d["EXISTS"]
        de = self.logout()
        de.addCallback(self.logoutCallback)

    def logoutCallback(self, d):
        if debug: print "logoutCallback:", d

    def connectionLost(self, reason):
        if debug: print "connectionLost:", reason
        imap4.IMAP4Client.connectionLost(self)
        self.factory.deferred.callback(self.factory.count)

    def sendLine(self, line):
        if debug: print "sendLine:", line
        imap4.IMAP4Client.sendLine(self, line)

    def lineReceived(self, line):
        if debug: print "lineReceived:", line
        imap4.IMAP4Client.lineReceived(self, line)

class MyIMAP4ClientFactory(protocol.ClientFactory):

    protocol = MyIMAP4Client

def getCount():
    f = MyIMAP4ClientFactory()
    f.deferred = defer.Deferred()
    reactor.connectTCP(server, 143, f)
    return f.deferred

if __name__ == "__main__":
    def printCount(count):
        print count
        reactor.stop()
    getCount().addCallback(printCount)
    reactor.run()
<<<

Any suggestions for improvements or corrections to my thinking would
be greatly appreciated!

Thanks.

-- Jason



From laforge49 at yahoo.co.in  Tue May 18 05:38:26 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Tue, 18 May 2004 10:38:26 +0100 (BST)
Subject: [Twisted-Python] A problem with runUntilCurrent
In-Reply-To: <40A98592.9020503@divmod.com>
Message-ID: <20040518093826.78365.qmail@web8311.mail.in.yahoo.com>

I'm not much good at patch files--lacking the tools.
 
But take a look at the attached hack (crafted manually). 
It works for me, with luck it should pass your regression tests.
(Its got the required 2 loops I was talking about.)
 
I'll note in passing that I'm only getting a measure of 7K with this code.
But that's probably as good as we can get without my patches.
Good enough, I suspect.
 
Bill

Glyph Lefkowitz <glyph at divmod.com> wrote: 
Bill la Forge wrote:
> Thanks to you and the rest of the Twisted development team who
> took the time to dig into my code and then make the changes to
> Twisted!

You're welcome :).

The reason that we did so is because your run-time patch requires 
talking to the reactor over private interfaces. Normally this sort of 
thing can be overlooked in Python, but there are actually multiple 
implementations of the reactor, some of which may not work with those 
changes. So a more efficient implementation of callLater(0,...) will 
allow your code to be compatible with Twisted and not just happen to 
work on the default reactor :).

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040518/989f66ab/attachment.htm 
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: notes.txt
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040518/989f66ab/attachment.txt 

From laforge49 at yahoo.co.in  Tue May 18 06:20:09 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Tue, 18 May 2004 11:20:09 +0100 (BST)
Subject: [Twisted-Python] A problem with runUntilCurrent
In-Reply-To: <20040518093826.78365.qmail@web8311.mail.in.yahoo.com>
Message-ID: <20040518102009.30655.qmail@web8303.mail.in.yahoo.com>

A few corrections:
 
1. I left the do=[] statment out of the patch. Its been added.
    (I may still have made a format error in this hand-crafted patch,
    so please take care!)
 
2. Most of the speed loss now is due to changes in my code for
    supporting thread migration. So speed is not an issue.
 
Bill

Bill la Forge <laforge49 at yahoo.co.in> wrote: 
I'm not much good at patch files--lacking the tools.
 
But take a look at the attached hack (crafted manually). 
It works for me, with luck it should pass your regression tests.
(Its got the required 2 loops I was talking about.)
 
I'll note in passing that I'm only getting a measure of 7K with this code.
But that's probably as good as we can get without my patches.
Good enough, I suspect.
 
Bill



Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040518/26999a53/attachment.htm 
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: notes.txt
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040518/26999a53/attachment.txt 

From exarkun at divmod.com  Tue May 18 09:56:43 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Tue, 18 May 2004 09:56:43 -0400
Subject: [Twisted-Python] thread migration and bsddb
In-Reply-To: <20040518073528.51254.qmail@web8304.mail.in.yahoo.com>
References: <20040518073528.51254.qmail@web8304.mail.in.yahoo.com>
Message-ID: <40AA161B.4060702@divmod.com>

Bill la Forge wrote:
> The 040518 release of CompStrm supports the movement of computational 
> streams to a server thread and back to the main thread.
> See http://compstrm.sourceforge.net/thread.html
>  
> Thread migration makes it very easy to do blocking I/O without 
> comprimising the main thread.
>  
> Unfortunatly, this is still not good enough when working with bsddb, as 
> cursors are NOT thread free. To reuse a cursor, you must be on the SAME 
> thread it was created on. ;-(

   http://www.sleepycat.com/docs/ref/program/mt.html :

   "Transactions and cursors may span threads, but only serially, that 
is, the application must serialize access to the DB_TXN and DBC handles."

   Jp



From laforge49 at yahoo.co.in  Tue May 18 11:54:04 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Tue, 18 May 2004 16:54:04 +0100 (BST)
Subject: [Twisted-Python] thread migration and bsddb
In-Reply-To: <40AA161B.4060702@divmod.com>
Message-ID: <20040518155404.84839.qmail@web8303.mail.in.yahoo.com>

Jp,
 
Thankyou very very much. I had grossly mis-read that page.
This means we can use the regular server threads rather than
a dedicated thread, making for a much cleaner implementation.
 
Bill

Jp Calderone <exarkun at divmod.com> wrote:
Bill la Forge wrote:
> The 040518 release of CompStrm supports the movement of computational 
> streams to a server thread and back to the main thread.
> See http://compstrm.sourceforge.net/thread.html
> 
> Thread migration makes it very easy to do blocking I/O without 
> comprimising the main thread.
> 
> Unfortunatly, this is still not good enough when working with bsddb, as 
> cursors are NOT thread free. To reuse a cursor, you must be on the SAME 
> thread it was created on. ;-(

http://www.sleepycat.com/docs/ref/program/mt.html :

"Transactions and cursors may span threads, but only serially, that 
is, the application must serialize access to the DB_TXN and DBC handles."

Jp

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040518/ba33c71a/attachment.htm 

From duncan at adytumsolutions.com  Sat May 15 00:54:04 2004
From: duncan at adytumsolutions.com (Duncan McGreggor)
Date: Sat, 15 May 2004 00:54:04 -0400
Subject: [Twisted-Python] Custom app using twisted
Message-ID: <E3F00D3B-A62B-11D8-923B-000393DB4358@adytumsolutions.com>

Don't know if this belongs on the list or not...

I've just written a python monitoring program for baby-sitting a bunch 
of servers (I wanted something easier to setup and maintain than 
Nagios)... but the inevitable has happened, and I want to make a 
go-cart run like a ferrari. I was thinking of using python's interface 
to 'select' a la Medusa, but as soon as I saw 'import asyncore', I 
thought "There's got to be a better way..."

Enter twisted.

I would like to be able to run n monitoring instances simultaneously 
(thus my interest in 'select') to make the code as close to real-time 
as is practical. However, this is my first dive into POSIX I/O at this 
level (I ordered a copy of "UNIX Systems Programming" (Robbins) 
yesterday, to help me learn and adjust).

* The monitoring libs that I've put together do everything from local 
process monitoring (crap like ps with commands.getoutput), httplib 
checks against sites, process checks on remote servers (ssh+ps with 
commands.getoutput), ping checks, etc.
* An instance of the monitoring class will only do one type of 
monitoring (either process check, remote process check, ping check, or 
site check)

I would like to write a version of this that's a twisted application, 
in the hopes that it will be more robust and enterprise-ready. I've 
started looking at the following:
twisted.application.service.IProcess
twisted.application.service.Process
and spawnProcess from twisted.internet.default.PosixReactorBase

But I am not sure how to get started yet... I want to write something 
that can be run with twistd. Can anyone offer guidance or suggestions 
as to the approach? Right now, I am locked on the example here: 
http://twistedmatrix.com/documents/current/howto/application.html ... 
Is this what I should be looking at for inspiration? Or another 
approach all together? I've not come across examples of twisted apps 
that are a narrow specialization like what I have in mind... the app 
would be a *kind* of server... that would regularly spawn processes and 
wait for return data, regularly instantiate python monitoring classes.

Am I thinking of this in a sane way?

Thanks for any input,

Duncan



--
Duncan M. McGreggor        mailto:duncan at adytum.us
Systems &                  p 301.698.5032
Applications Engineer      http://adytum.us
AdytumSolutions, Inc. 
      




From daniel at nextwindow.com  Tue May 18 20:28:40 2004
From: daniel at nextwindow.com (Daniel Newton)
Date: Wed, 19 May 2004 12:28:40 +1200
Subject: [Twisted-Python] How to get the IP address of a client using XML-RPC
Message-ID: <40AAAA38.9010208@nextwindow.com>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040519/543a83d2/attachment.htm 

From exarkun at divmod.com  Tue May 18 21:25:46 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Tue, 18 May 2004 21:25:46 -0400
Subject: [Twisted-Python] How to get the IP address of a client using
	XML-RPC
In-Reply-To: <40AAAA38.9010208@nextwindow.com>
References: <40AAAA38.9010208@nextwindow.com>
Message-ID: <40AAB79A.3070104@divmod.com>

Daniel Newton wrote:
> 
> I have a simple XML-PRC server similar to the example below:
> 
> from twisted.web import xmlrpc, server
> 
> class Example(xmlrpc.XMLRPC):
>     """An example object to be published."""
> 
>     def xmlrpc_add(self, a, b):
>         """Return sum of arguments."""
>         return a + b

       def xmlrpc_whatIsMyAddress(self):
           return self.transport.getPeer().host

> 
> if __name__ == '__main__':
>     from twisted.internet import reactor
>     r = Example()
>     reactor.listenTCP(7080, server.Site(r))
>     reactor.run()
> 
> I want to be able to get the address of the client that calls the xmlrpc 
> method can anyone help me with this?
> 
> thanks in advance
> 
> Daniel Newton
> 

   Jp



From laforge49 at yahoo.co.in  Wed May 19 00:03:27 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Wed, 19 May 2004 05:03:27 +0100 (BST)
Subject: [Twisted-Python] patch for background processing (delay 0)
Message-ID: <20040519040327.25303.qmail@web8305.mail.in.yahoo.com>

I do hereby consigne all copyrights for this patch to Glyph, as required 
by Twisted: http://www.twistedmatrix.com/developers/contributing
 
Appologies for not using diff, but I am not yet able to download the 
cygwin package. (perhaps Sunday bandwidth here will be better!)
 
The first part was developed by twisted:
 
    def callLater(self, _seconds, _f, *args, **kw):
        """See twisted.internet.interfaces.IReactorTime.callLater.
        """
        assert callable(_f), "%s is not callable" % _f
        assert sys.maxint >= _seconds >= 0, \
               "%s is not greater than or equal to 0 seconds" % (_seconds,)
# patch follows        
#        tple = DelayedCall(seconds() + _seconds, _f, args, kw,
        if _seconds != 0:
            ttc = _seconds + seconds()
        else:
            ttc = _seconds
        tple = DelayedCall(ttc, _f, args, kw,
# end of patch                           
                           self._pendingTimedCalls.remove,
                           self._resetCallLater)
        insort(self._pendingTimedCalls, tple)
        return tple

The second part is my contribution:
 
    def runUntilCurrent(self):
        """Run all pending timed calls.
        """
        if self.threadCallQueue:
            # Keep track of how many calls we actually make, as we're
            # making them, in case another call is added to the queue
            # while we're in this loop.
            count = 0
            for (f, a, kw) in self.threadCallQueue:
                try:
                    f(*a, **kw)
                except:
                    log.err()
                count += 1
            del self.threadCallQueue[:count]
        now = seconds()
# patch follows
#        while self._pendingTimedCalls and (self._pendingTimedCalls[-1].time <= now):
#            call = self._pendingTimedCalls.pop()
        do=[]
        while self._pendingTimedCalls and (self._pendingTimedCalls[-1].time <= now):
            do.append(self._pendingTimedCalls.pop())
        for call in do:
# end of patch
            try:
                call.called = 1
                call.func(*call.args, **call.kw)
            except:
                log.deferr()
                if hasattr(call, "creator"):
                    e = "\n"
                    e += " C: previous exception occurred in " + \
                         "a DelayedCall created here:\n"
                    e += " C:"
                    e += "".join(call.creator).rstrip().replace("\n","\n C:")
                    e += "\n"
                    log.msg(e)

Sincerly,
 


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040519/f889fb93/attachment.htm 

From glyph at divmod.com  Wed May 19 00:17:01 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 19 May 2004 00:17:01 -0400
Subject: [Twisted-Python] patch for background processing (delay 0)
In-Reply-To: <20040519040327.25303.qmail@web8305.mail.in.yahoo.com>
References: <20040519040327.25303.qmail@web8305.mail.in.yahoo.com>
Message-ID: <1084940220.23871.1.camel@kazekage>

On Wed, 2004-05-19 at 00:03, Bill la Forge wrote:
> I do hereby consigne all copyrights for this patch to Glyph, as
> required 
> by Twisted: http://www.twistedmatrix.com/developers/contributing
>  
> Appologies for not using diff, but I am not yet able to download the 
> cygwin package. (perhaps Sunday bandwidth here will be better!)

Thanks for sending it on soon anyway, and thanks for reading the
contribution guidelines.  Good luck with downloading cygwin!  I will try
to test and apply this over the weekend if nobody else does it sooner.




From exarkun at divmod.com  Wed May 19 00:39:49 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 19 May 2004 00:39:49 -0400
Subject: [Twisted-Python] patch for background processing (delay 0)
In-Reply-To: <20040519040327.25303.qmail@web8305.mail.in.yahoo.com>
References: <20040519040327.25303.qmail@web8305.mail.in.yahoo.com>
Message-ID: <40AAE515.9020900@divmod.com>

Bill la Forge wrote:
> I do hereby consigne all copyrights for this patch to Glyph, as required
> by Twisted: http://www.twistedmatrix.com/developers/contributing
>  
> Appologies for not using diff, but I am not yet able to download the
> cygwin package. (perhaps Sunday bandwidth here will be better!)
>  
> The first part was developed by twisted:
>  
>     def callLater(self, _seconds, _f, *args, **kw):
>         """See twisted.internet.interfaces.IReactorTime.callLater.
>         """
>         assert callable(_f), "%s is not callable" % _f
>         assert sys.maxint >= _seconds >= 0, \
>                "%s is not greater than or equal to 0 seconds" % (_seconds,)
> # patch follows       
> #        tple = DelayedCall(seconds() + _seconds, _f, args, kw,
>         if _seconds != 0:
>             ttc = _seconds + seconds()
>         else:
>             ttc = _seconds
>         tple = DelayedCall(ttc, _f, args, kw,
> # end of patch                          
>                            self._pendingTimedCalls.remove,
>                            self._resetCallLater)

   Additionally, I would suggest that _pendingTimedCalls.append(tple) be 
used instead of the insort() call when _seconds is 0.  This speeds up 
the case of a callLater(0) loop by about 10%.

>         insort(self._pendingTimedCalls, tple)
>         return tple
> The second part is my contribution:
>  
>     def runUntilCurrent(self):
>         """Run all pending timed calls.
>         """
>         if self.threadCallQueue:
>             # Keep track of how many calls we actually make, as we're
>             # making them, in case another call is added to the queue
>             # while we're in this loop.
>             count = 0
>             for (f, a, kw) in self.threadCallQueue:
>                 try:
>                     f(*a, **kw)
>                 except:
>                     log.err()
>                 count += 1
>             del self.threadCallQueue[:count]
>         now = seconds()
> # patch follows
> #        while self._pendingTimedCalls and 
> (self._pendingTimedCalls[-1].time <= now):
> #            call = self._pendingTimedCalls.pop()

   This approach might be a bit faster than pop in a loop

     i = bisect.bisect_left(self._pendingTimedCalls, now)
     do = self._pendingTimedCalls[i:]
     self._pendingtimedCalls = self._pendingTimedCalls[:i]

   or it may not be, given how much more memory it allocates.

>         do=[]
>         while self._pendingTimedCalls and 
> (self._pendingTimedCalls[-1].time <= now):
>             do.append(self._pendingTimedCalls.pop())
>         for call in do:
> # end of patch
>             try:
>                 call.called = 1
>                 call.func(*call.args, **call.kw)
>             except:
>                 log.deferr()
>                 if hasattr(call, "creator"):
>                     e = "\n"
>                     e += " C: previous exception occurred in " + \
>                          "a DelayedCall created here:\n"
>                     e += " C:"
>                     e += "".join(call.creator).rstrip().replace("\n","\n 
> C:")
>                     e += "\n"
>                     log.msg(e)
> Sincerly,
>  

   Thanks for the contribution :)  By the way, for a slightly less hefty 
download than cygwin, check out http://unxutils.sourceforge.net/ (kindly 
pointed out by bear in #twisted).  It includes a Windows-native diff tool.

   Jp



From laforge49 at yahoo.co.in  Wed May 19 00:53:49 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Wed, 19 May 2004 05:53:49 +0100 (BST)
Subject: [Twisted-Python] patch for background processing (delay 0)
In-Reply-To: <40AAE515.9020900@divmod.com>
Message-ID: <20040519045349.56821.qmail@web8308.mail.in.yahoo.com>


You're quite welcome. I just hope it passes the regression tests!
 
I did manage, finally, to download cygwin. (Been a few years since I've 
used it.) Here in India, bandwidth depends on a lot more than the dialup 
connection. ;-) (Though things have improved greatly in the last few 
years.)
 
As for speed, I still suspect that heapq may be faster than insort. I know 
there's a few places in the code base where the last element is 
inspected (timeout method comes to mind) that would need to be 
changed to the first element. 
 
And, of course, Heapq is mising the remove method (I've since coded it).
 
But then there's the resetter method... might be impacted and I can't 
figure it out. ;-(
 
Bill

Jp Calderone <exarkun at divmod.com> wrote:
Thanks for the contribution :) By the way, for a slightly less hefty 
download than cygwin, check out http://unxutils.sourceforge.net/ (kindly 
pointed out by bear in #twisted). It includes a Windows-native diff tool.

Jp


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040519/54a1d7e3/attachment.htm 

From bob at redivi.com  Wed May 19 01:10:58 2004
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 19 May 2004 01:10:58 -0400
Subject: [Twisted-Python] patch for background processing (delay 0)
In-Reply-To: <20040519045349.56821.qmail@web8308.mail.in.yahoo.com>
References: <20040519045349.56821.qmail@web8308.mail.in.yahoo.com>
Message-ID: <E9DE8A67-A952-11D8-A675-000A95686CD8@redivi.com>

In my heapq implementation of a similar timer mechanism (outside of 
Twisted), I did three things that twisted doesn't:
- cancelling a timer doesn't try and remove it from the heapq, instead 
it just marks the timer as dead.
- the time when it's supposed to fire is passed to the fire method so 
that the timer can determine whether it's supposed to actually fire or 
not (in the case of a time change it is actually added to the queue a 
second time without being removed so that I don't have to disrupt the 
heapq).
- it's two phase.. I have a list of newly added timers, and a heapq of 
waiting-to-fire timers.  At the end of the iteration I shove the list 
into the heapq and clear the list.  This prevents infinite callLater(0, 
...) situations.

-bob

On May 19, 2004, at 12:53 AM, Bill la Forge wrote:

>
> You're quite welcome. I just hope it passes the regression tests!
> ?
> I did manage, finally, to download cygwin. (Been a few years since I've
>  used it.) Here in India, bandwidth depends on a lot more than the 
> dialup
>  connection. ;-) (Though things have improved greatly in the last few
>  years.)
> ?
> As for speed, I still suspect that heapq may be faster than insort. I 
> know
>  there's a few places in?the code base where the last element is
>  inspected (timeout method comes to mind) that would need to be
>  changed to the first element.
>  ?
> And, of course, Heapq is mising the remove method (I've since coded 
> it).
> ?
> But then there's the resetter method... might be impacted and I can't
>  figure it out. ;-(
> ?
> Bill
>
> Jp Calderone <exarkun at divmod.com> wrote:
> Thanks for the contribution :) By the way, for a slightly less hefty
>  download than cygwin, check out http://unxutils.sourceforge.net/ 
> (kindly
>  pointed out by bear in #twisted). It includes a Windows-native diff 
> tool.
>
> Jp
>
>
> Bill la Forge
> http://www.geocities.com/laforge49/
>
> Yahoo! India Matrimony: Find your partner  online.
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 2357 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040519/48f4342f/attachment.bin 

From laforge49 at yahoo.co.in  Wed May 19 01:44:06 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Wed, 19 May 2004 06:44:06 +0100 (BST)
Subject: [Twisted-Python] patch for background processing (delay 0)
In-Reply-To: <E9DE8A67-A952-11D8-A675-000A95686CD8@redivi.com>
Message-ID: <20040519054406.19577.qmail@web8311.mail.in.yahoo.com>

Well, we're in the process of doing your third item, at least--making it two-phase.
 
Bill

Bob Ippolito <bob at redivi.com> wrote:
In my heapq implementation of a similar timer mechanism (outside of 
Twisted), I did three things that twisted doesn't:
- cancelling a timer doesn't try and remove it from the heapq, instead 
it just marks the timer as dead.
- the time when it's supposed to fire is passed to the fire method so 
that the timer can determine whether it's supposed to actually fire or 
not (in the case of a time change it is actually added to the queue a 
second time without being removed so that I don't have to disrupt the 
heapq).
- it's two phase.. I have a list of newly added timers, and a heapq of 
waiting-to-fire timers. At the end of the iteration I shove the list 
into the heapq and clear the list. This prevents infinite callLater(0, 
...) situations.

-bob


Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040519/f9032141/attachment.htm 

From laforge49 at yahoo.co.in  Wed May 19 02:23:30 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Wed, 19 May 2004 07:23:30 +0100 (BST)
Subject: [Twisted-Python] patch attached--for 0 delay callLater
Message-ID: <20040519062330.29748.qmail@web8302.mail.in.yahoo.com>

The attached notes.txt file contains a diff -u patch.
I consign the copyright to Glyph.
 
I've tested it best I can, but could someone run it through the regression 
tests? I'd like that assurance before updating my web pages. ;-)
 
Jp, I added one of your ideas anyway. But the bisect_left kept giving
strange errors.
 


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040519/596f4ddd/attachment.htm 
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: notes.txt
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040519/596f4ddd/attachment.txt 

From laforge49 at yahoo.co.in  Wed May 19 06:58:17 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Wed, 19 May 2004 11:58:17 +0100 (BST)
Subject: [Twisted-Python] patch for background processing (delay 0)
In-Reply-To: <1084940220.23871.1.camel@kazekage>
Message-ID: <20040519105817.88954.qmail@web8305.mail.in.yahoo.com>

Please note that this patch was replaced by a "real" one, which included
a suggestion from Jp as well.
 
Also, the archive dropped part of my email (patch attached...) where I 
again consigned the patch to you.
 
No problem with CygWin, I just had to find the right time slot--mid 
morning is generally best here.
 
Now, if it just passes the regression tests! (Got my fingers crossed!)
 
Bill

Glyph Lefkowitz <glyph at divmod.com> wrote:
I will try
to test and apply this over the weekend if nobody else does it sooner.
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040519/4cad84f4/attachment.htm 

From golux at comcast.net  Wed May 19 13:08:39 2004
From: golux at comcast.net (Stephen C. Waterbury)
Date: Wed, 19 May 2004 13:08:39 -0400
Subject: [Twisted-Python] Interacting plugins and mktap --append
Message-ID: <40AB9497.5070309@comcast.net>

Hi gang,

I'd like to have some interaction between 2 plugins,
and I'm wondering what's the most "archtecturally sound"
way of implementing that in the context of twistd/mktap.
Basically, I want to do

mktap foo
mktap --append=foo.tap blarg

and have blarg somehow obtain a reference to foo so
it can call foo's methods.  In my particular case, I have
a MultiService in foo that I'd like to add a blarg
service to, and also register some blarg stuff with
one of the foo MultiService's child Services.

Cheers,
Steve




From itamar at itamarst.org  Wed May 19 14:11:40 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 19 May 2004 14:11:40 -0400
Subject: [Twisted-Python] Interacting plugins and mktap --append
In-Reply-To: <40AB9497.5070309@comcast.net>
References: <40AB9497.5070309@comcast.net>
Message-ID: <1084989944.4158.60.camel@sheriffpony>

On Wed, 2004-05-19 at 13:08, Stephen C. Waterbury wrote:

> I'd like to have some interaction between 2 plugins,
> and I'm wondering what's the most "archtecturally sound"
> way of implementing that in the context of twistd/mktap.

Short answer is that mktap isn't the right tool for this sort of thing. 

The long answer probably involves Glyph writing a really long email so
I'll let him do that.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From golux at comcast.net  Wed May 19 14:18:10 2004
From: golux at comcast.net (Stephen C. Waterbury)
Date: Wed, 19 May 2004 14:18:10 -0400
Subject: [Twisted-Python] Interacting plugins and mktap --append
In-Reply-To: <1084989944.4158.60.camel@sheriffpony>
References: <40AB9497.5070309@comcast.net>
	<1084989944.4158.60.camel@sheriffpony>
Message-ID: <40ABA4E2.5010604@comcast.net>

Itamar Shtull-Trauring wrote:
> On Wed, 2004-05-19 at 13:08, Stephen C. Waterbury wrote:
> 
>>I'd like to have some interaction between 2 plugins,
>>and I'm wondering what's the most "archtecturally sound"
>>way of implementing that in the context of twistd/mktap.
> 
> Short answer is that mktap isn't the right tool for this sort of thing. 
> 
> The long answer probably involves Glyph writing a really long email so
> I'll let him do that.

Thanks for the quick reply, Itamar!  I'll do a q'n'd while
I await Glyph's treatise.  :)




From golux at comcast.net  Wed May 19 14:33:53 2004
From: golux at comcast.net (Stephen C. Waterbury)
Date: Wed, 19 May 2004 14:33:53 -0400
Subject: [Twisted-Python] Interacting plugins and mktap --append
In-Reply-To: <40ABA4E2.5010604@comcast.net>
References: <40AB9497.5070309@comcast.net>
	<1084989944.4158.60.camel@sheriffpony>
	<40ABA4E2.5010604@comcast.net>
Message-ID: <40ABA891.5090200@comcast.net>

Stephen C. Waterbury wrote:
> Itamar Shtull-Trauring wrote:
> 
>> On Wed, 2004-05-19 at 13:08, Stephen C. Waterbury wrote:
>>
>>> I'd like to have some interaction between 2 plugins,
>>> and I'm wondering what's the most "archtecturally sound"
>>> way of implementing that in the context of twistd/mktap.
>>
>> Short answer is that mktap isn't the right tool for this sort of thing.
>> The long answer probably involves Glyph writing a really long email so
>> I'll let him do that.
> 
> Thanks for the quick reply, Itamar!  I'll do a q'n'd while
> I await Glyph's treatise.  :)

Actually, thinking about it some more, I don't know why I
had locked onto the idea of using mktap that way.  I'm
thinking now it would make more sense to include extension
packages, additional services, etc. using configuration
options in footap.py.  So just use one plugin and make
it very configurable.  ;)




From soso_pub at yahoo.com  Wed May 19 16:17:25 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Wed, 19 May 2004 13:17:25 -0700 (PDT)
Subject: [Twisted-Python] Invalid 'reason' info
Message-ID: <20040519201725.9530.qmail@web14803.mail.yahoo.com>

Hi, 

If a reactor.connectTCP() is issued and the reactor is
stopped before connecting the following is the
'reason' send to clientConnectionFailed(self,
connector, reason):

reason.type = twisted.internet.error.ConnectError

reaseon.getErrorMessage() = An error occurred while
connecting: [Failure instance: Traceback:
twisted.internet.error.ConnectionLost, Connection to
the other side was lost in a non-clean fashion:
Connection lost.

The type is ok but the error message is not. It says
ConnectionLost which is wrong, from both information
and class type. 

Here is a quick testcode:

"""
from twisted.internet import reactor
from twisted.internet.protocol import ClientFactory

class Factory(ClientFactory):
    
    def clientConnectionFailed(self, connector,
reason):
        print 'clientConnectionFailed:',
str(reason.type), reason.getErrorMessage()
    
class Main:

    def start(self):
        
        reactor.connectTCP('localhost', 2175,
Factory())
        reactor.stop()
        reactor.run()
    
        
if __name__ == '__main__':
    Main().start()

"""

Side note: 2175 port is closed here si it is not
suppose to connect anyway.

Regards,
Sorin



	
		
__________________________________
Do you Yahoo!?
SBC Yahoo! - Internet access at a great low price.
http://promo.yahoo.com/sbc/



From itamar at itamarst.org  Wed May 19 16:39:29 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 19 May 2004 16:39:29 -0400
Subject: [Twisted-Python] Invalid 'reason' info
In-Reply-To: <20040519201725.9530.qmail@web14803.mail.yahoo.com>
References: <20040519201725.9530.qmail@web14803.mail.yahoo.com>
Message-ID: <1084999169.4156.66.camel@sheriffpony>

1. What operating system?

2. Does "trial twisted.test.test_tcp" pass all tests?





From soso_pub at yahoo.com  Wed May 19 17:06:56 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Wed, 19 May 2004 14:06:56 -0700 (PDT)
Subject: [Twisted-Python] Invalid 'reason' info
In-Reply-To: <1084999169.4156.66.camel@sheriffpony>
Message-ID: <20040519210656.59407.qmail@web14812.mail.yahoo.com>

Hi,

--- Itamar Shtull-Trauring <itamar at itamarst.org>
wrote:
> 1. What operating system?

Win 2k, Python 2.3.3, Twisted 1.2.0.

> 2. Does "trial twisted.test.test_tcp" pass all
> tests?

I ran it like this:
"""
>>> import twisted.trial.unittest as u
>>> import twisted.trial.reporter as rep
>>> t = u.TestSuite()
>>> t.addModule('twisted.test.test_tcp')
>>> t.run(rep.TextReporter())
"""

The results:
"""
Ran 19 tests in 14.041s

OK
"""

Sorin



	
		
__________________________________
Do you Yahoo!?
Yahoo! Domains ? Claim yours for only $14.70/year
http://smallbusiness.promotions.yahoo.com/offer 



From soso_pub at yahoo.com  Wed May 19 17:18:15 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Wed, 19 May 2004 14:18:15 -0700 (PDT)
Subject: [Twisted-Python] Twisted 1.3.0 Windows installers
Message-ID: <20040519211815.86179.qmail@web14802.mail.yahoo.com>

Hi,

I saw on the site that Twisted 1.3.0 was released.In
case someone forgot ;), the links to Windows
installers are not working.

Sorin



	
		
__________________________________
Do you Yahoo!?
Yahoo! Domains ? Claim yours for only $14.70/year
http://smallbusiness.promotions.yahoo.com/offer 



From glyph at divmod.com  Wed May 19 20:12:42 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 19 May 2004 20:12:42 -0400
Subject: [Twisted-Python] Interacting plugins and mktap --append
In-Reply-To: <40ABA891.5090200@comcast.net>
References: <40AB9497.5070309@comcast.net>
	<1084989944.4158.60.camel@sheriffpony> <40ABA4E2.5010604@comcast.net>
	<40ABA891.5090200@comcast.net>
Message-ID: <1085011962.3849.30.camel@kazekage>

On Wed, 2004-05-19 at 14:33, Stephen C. Waterbury wrote:

> Actually, thinking about it some more, I don't know why I
> had locked onto the idea of using mktap that way.  I'm
> thinking now it would make more sense to include extension
> packages, additional services, etc. using configuration
> options in footap.py.  So just use one plugin and make
> it very configurable.  ;)

I don't have time for the treatise at the moment, so I'll be brief :).

We're wrestling with a similar issue in Quotient right now, and
twisted's configuration infrastructure just isn't up to the task.  The
suggested work-around, effectively, is to build an easy-to-read
configuration minilanguage for your .tac, hopefully one that only
involves one or two python functions.  (I don't mean "parse a config
file", I mean, "use some tiny subset of python to configure your
application".)

In the large, this has problems, because different applications can't
easily be configured to work with each other without significant
plumbing work.  This is in particular unpleasant for web apps.  However,
there are larger problems for us to attack, such as developing some kind
of general shell infrastructure to allow people to log in over multiple
protocols which potentially access different applications through the
same objects...

So, in short, look in quotient/deployment.py and doc/sample.tac in the
_latest, brand-new release of Quotient_, 0.9.0, and there is an example
you can draw from.  In the future, we will try to generalize this
approach and separate port-binding configuration from application
configuration.

Almost everything in Quotient - and anything in a well-behaved Twisted
app these days - is based off of some kind of connection to storage,
whether it's a pickle, a SQL database, or something weird like Atop, and
a Realm which wraps that storage.  Once you're past the realm, almost
every protocol-level configuration option is beyond the scope of your
application.  The main thing that needs to be done is normalize how
protocols and factories find out about the realm, and to develop an API
to reliably, safely, and deterministically start up and shut down
storage.  This is do-able using the existing twisted.application stuff
but there needs to be a higher level convenience layer built.

And really, I'm not going to write that treatise, so I'll stop now ;-)






From daniel at nextwindow.net  Wed May 19 23:25:13 2004
From: daniel at nextwindow.net (Daniel Newton)
Date: Thu, 20 May 2004 15:25:13 +1200
Subject: [Twisted-Python] Re: How to get the IP address of a client using
	XML-RPC
In-Reply-To: <40AC23FE.5000302@nextwindow.com>
References: <40AC23FE.5000302@nextwindow.com>
Message-ID: <40AC2519.20004@nextwindow.net>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040520/7339d22f/attachment.htm 

From dripton at ripton.net  Wed May 19 23:54:55 2004
From: dripton at ripton.net (David Ripton)
Date: Wed, 19 May 2004 23:54:55 -0400
Subject: [Twisted-Python] pb.Copyable, round trip objects,
	and untrusted clients
Message-ID: <40AC2C0F.40300@ripton.net>

I'm working on a client-server game, with hidden information, using PB. 
  I don't want to trust the clients.

Because there is hidden information, it's important not to send anything 
to the client that it's player shouldn't see.  Doing that with PB is 
pretty straightforward.  If a class's data is always secret, don't make 
it Copyable.  If parts of a class are secret, censor them in getStateToCopy.

Obviously, the client should only be able to change the server's game 
state via a well-defined error-checked interface.  Also fairly 
straightforward, though error-prone since you need to forsee and test 
against every way to cheat.

There's a third hole to plug, which is passing an object from the server 
to the client as an argument of a client-side remote_* method, and later 
getting it back as an argument to a server-side perspective_* method. 
(e.g. the server passes the client a list of games in progress, and 
later the client passes back the game it wants to join.)  If the client 
changes the object before passing it back, it might trick the server 
into doing the wrong thing with it.

Anyway, it seems easy enough to avoid this problem, by just rewinding 
any changes the client has made to such objects.  At some point before 
sending an object to the client side, add it to a dict, keyed by its id. 
  When an object comes back from the client as an argument in a 
perspective_* call, use its id to lookup the server's copy of the object 
in the dict, and then reassign the current name to the good version of 
the object, losing any changes the client may have made.  In other 
words, the client is treated as if it only passed the object's id back, 
not its __dict__.  But the interface is simpler.

e.g.:

in Server
def __init__:
     self._paranoia = {}  # Maybe a weak dict instead
     #....

def paranoid_add(self, obj):
     self._paranoia[id(obj)] = obj
def paranoid_get(self, obj):
     return self._paranoia[id(obj)]

def form_game(self, whatever):
     game = Game.Game(args)
     self.paranoia_add(game)

Then in User (a pb.Avatar):
def perspective_join_game(self, game):
     game = self.server.paranoid_get(game)
     self.server.join_game(self.name, game)


This is simple and works, but it's annoyingly repetitive.  And plumbing 
code is infecting the application level.  And I know there are other 
object vs. id caches inside PB, so this feels redundant.  What's the 
right way to do this with Copyable?

Thanks.

-- 
David Ripton    dripton at ripton.net



From glyph at divmod.com  Thu May 20 00:40:54 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Thu, 20 May 2004 00:40:54 -0400
Subject: [Twisted-Python] pb.Copyable, round trip objects, and
	untrusted clients
In-Reply-To: <40AC2C0F.40300@ripton.net>
References: <40AC2C0F.40300@ripton.net>
Message-ID: <1085028054.4024.31.camel@kazekage>

On Wed, 2004-05-19 at 23:54, David Ripton wrote:

> This is simple and works, but it's annoyingly repetitive.  And plumbing 
> code is infecting the application level.  And I know there are other 
> object vs. id caches inside PB, so this feels redundant.  What's the 
> right way to do this with Copyable?

Use Cacheable - sort of.  That helps with the state-management issues. 
There are about ten other holes you didn't notice and rewinding changes
is an inherently unsafe way to conceptualize the problem.

If you're seriously interested in security with PB, you will need
newpb.  You should bother Brian Warner, since it seems like it's
*almost* there and he just needs a little more nudging.




From radix at twistedmatrix.com  Thu May 20 01:33:09 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 20 May 2004 01:33:09 -0400
Subject: [Twisted-Python] pb.Copyable, round trip objects,	and untrusted
	clients
In-Reply-To: <40AC2C0F.40300@ripton.net>
References: <40AC2C0F.40300@ripton.net>
Message-ID: <40AC4315.3040702@twistedmatrix.com>

David Ripton wrote:
> There's a third hole to plug, which is passing an object from the server 
> to the client as an argument of a client-side remote_* method, and later 
> getting it back as an argument to a server-side perspective_* method. 
> (e.g. the server passes the client a list of games in progress, and 
> later the client passes back the game it wants to join.)  If the client 
> changes the object before passing it back, it might trick the server 
> into doing the wrong thing with it.
> 
> Anyway, it seems easy enough to avoid this problem, by just rewinding 
> any changes the client has made to such objects.  At some point before 
> sending an object to the client side, add it to a dict, keyed by its id. 
>  When an object comes back from the client as an argument in a 
> perspective_* call, use its id to lookup the server's copy of the object 
> in the dict, and then reassign the current name to the good version of 
> the object, losing any changes the client may have made.  In other 
> words, the client is treated as if it only passed the object's id back, 
> not its __dict__.  But the interface is simpler.

It sounds like the client ought to just pass a string (e.g., the name of 
the game) or something representing the game it wants to play. IOW, 
whether it's a string or not, something that isn't possible to be munged 
in a way that would "mess up" the server in the first place.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040520/bfe79980/attachment.pgp 

From soso_pub at yahoo.com  Thu May 20 03:56:35 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Thu, 20 May 2004 00:56:35 -0700 (PDT)
Subject: [Twisted-Python] Invalid 'reason' info - possible cause
Message-ID: <20040520075635.40514.qmail@web14806.mail.yahoo.com>

Continuing, I think I found the piece of code triggers
the wrong reason:

>From twisted/internet/base.py:

"""
    def disconnectAll(self):
        """Disconnect every reader, and writer in the
system.
        """
        selectables = self.removeAll()
        for reader in selectables:
            log.callWithLogger(reader,
                               reader.connectionLost,
                               
failure.Failure(main.CONNECTION_LOST))

"""

It seems that for every kind of selectable object -
even if not connected - it is issued connection lost.
I am unable at this moment to sugest a fix as I am not
familiar with the internals of twisted so I hope a
core developer can look into this further.

Sorin



	
		
__________________________________
Do you Yahoo!?
Yahoo! Domains ? Claim yours for only $14.70/year
http://smallbusiness.promotions.yahoo.com/offer 



From jasper at peak.org  Thu May 20 05:25:20 2004
From: jasper at peak.org (Jasper Phillips)
Date: Thu, 20 May 2004 02:25:20 -0700 (PDT)
Subject: [Twisted-Python] pb.Copyable, round trip objects,	and untrusted
	clients
In-Reply-To: <40AC2C0F.40300@ripton.net>
References: <40AC2C0F.40300@ripton.net>
Message-ID: <Pine.LNX.4.53.0405200204510.7527@a.shell.peak.org>


On Wed, 19 May 2004, David Ripton wrote:

> I'm working on a client-server game, with hidden information, using PB. 
>   I don't want to trust the clients.

Titan, I presume?  Nice game!

I'm working on a game more akin to Civilization or Age of Wonders, but have
basically the same problem.


> Because there is hidden information, it's important not to send anything 
> to the client that it's player shouldn't see.  Doing that with PB is 
> pretty straightforward.  If a class's data is always secret, don't make 
> it Copyable.  If parts of a class are secret, censor them in getStateToCopy.

For me this was more complex, as what a Player knows is itself a true part
of the Game's State, potentially affecting Action/Event resolution.  I end
up calculating each Players state myself, and passing them explictly.

Plus this feels to me more like it should be part of the game itself, rather
than some oblique networking aspect.  Same end effect though.


> Obviously, the client should only be able to change the server's game 
> state via a well-defined error-checked interface.  Also fairly 
> straightforward, though error-prone since you need to forsee and test 
> against every way to cheat.

IMHO handling this can avoid the 3rd problem you mention.  I have Players
send Actions for a given Turn as the only API to change Game State.  These
actions don't take game object as args, but rather Ids as you suggest below.

I do send actual objects from the Game to Players, but IMHO this is a bit
error prone lest you accidentally leave in secret info.  I only do it so
that the clients can validate actions they plan sending against their
perceived State using the same mechanism as the Game.


> There's a third hole to plug, which is passing an object from the server 
> to the client as an argument of a client-side remote_* method, and later 
> getting it back as an argument to a server-side perspective_* method. 
> (e.g. the server passes the client a list of games in progress, and 
> later the client passes back the game it wants to join.)  If the client 
> changes the object before passing it back, it might trick the server 
> into doing the wrong thing with it.
> 
> Anyway, it seems easy enough to avoid this problem, by just rewinding 
> any changes the client has made to such objects.  At some point before 
> sending an object to the client side, add it to a dict, keyed by its id. 
>   When an object comes back from the client as an argument in a 
> perspective_* call, use its id to lookup the server's copy of the object 
> in the dict, and then reassign the current name to the good version of 
> the object, losing any changes the client may have made.  In other 
> words, the client is treated as if it only passed the object's id back, 
> not its __dict__.  But the interface is simpler.

IMHO it seems superflous to have the game update the information a client
sends, only to later access this same information for calculations.  Why not
just pass back the relavent Ids, and have the Game API look up their True
counterpart as needed?  This doesn't seem onerous to me.

-Jasper




From soso_pub at yahoo.com  Thu May 20 05:34:54 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Thu, 20 May 2004 02:34:54 -0700 (PDT)
Subject: [Twisted-Python] Hooking on unhandled exceptions
Message-ID: <20040520093454.21602.qmail@web14803.mail.yahoo.com>

Hi,

I want to catch all unhandled exceptions that usually
are caught and logged by the reactor. Is there a way
to hook into reactor to be notified about those
exceptions?

Thanks,
Sorin



	
		
__________________________________
Do you Yahoo!?
Yahoo! Domains ? Claim yours for only $14.70/year
http://smallbusiness.promotions.yahoo.com/offer 



From jasper at peak.org  Thu May 20 05:34:29 2004
From: jasper at peak.org (Jasper Phillips)
Date: Thu, 20 May 2004 02:34:29 -0700 (PDT)
Subject: [Twisted-Python] pb.Copyable, round trip objects, and	untrusted
	clients
In-Reply-To: <1085028054.4024.31.camel@kazekage>
References: <40AC2C0F.40300@ripton.net> <1085028054.4024.31.camel@kazekage>
Message-ID: <Pine.LNX.4.53.0405200225390.7527@a.shell.peak.org>


On Thu, 20 May 2004, Glyph Lefkowitz wrote:

> On Wed, 2004-05-19 at 23:54, David Ripton wrote:
> 
> > This is simple and works, but it's annoyingly repetitive.  And plumbing 
> > code is infecting the application level.  And I know there are other 
> > object vs. id caches inside PB, so this feels redundant.  What's the 
> > right way to do this with Copyable?
> 
> Use Cacheable - sort of.  That helps with the state-management issues. 

In a turn based game it might be clearer just to have explicit and
monolithic state pushes each turn.  Perhaps I just don't get Cacheable, but
if seems more usefull when you have a variety of independently varrying
state, a constant connection, and no clear "Turn" seperation.


> There are about ten other holes you didn't notice and rewinding changes
> is an inherently unsafe way to conceptualize the problem.

Ack!  Now you've got me scared!  Ten other Holes?!  Could you elaborate a
little more?


> If you're seriously interested in security with PB, you will need
> newpb.  You should bother Brian Warner, since it seems like it's
> *almost* there and he just needs a little more nudging.

<nudge nudgee="Brian Warner"/>
<nudge nudgee="Brian Warner"/>
<nudge nudgee="Brian Warner"/>

What's in newpb anyway?  I'd thought this was essentially handled with all
the Avatar/Mind/Realm newcred stuff?

-Jasper




From itamar at itamarst.org  Thu May 20 09:14:20 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 20 May 2004 09:14:20 -0400
Subject: [Twisted-Python] Hooking on unhandled exceptions
In-Reply-To: <20040520093454.21602.qmail@web14803.mail.yahoo.com>
References: <20040520093454.21602.qmail@web14803.mail.yahoo.com>
Message-ID: <1085058860.1387.75.camel@sheriffpony>

On Thu, 2004-05-20 at 05:34, Sorin C. wrote:

> I want to catch all unhandled exceptions that usually
> are caught and logged by the reactor. Is there a way
> to hook into reactor to be notified about those
> exceptions?

def errorObserver(d):
    if d.has_key("isFailure") and d["isFailure"]:
        f = d["failure"]
        # do stuff to f

from twisted.python import log
log.addObserver(errorObserver)

-- 
Itamar Shtull-Trauring    http://itamarst.org





From itamar at itamarst.org  Thu May 20 09:15:41 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 20 May 2004 09:15:41 -0400
Subject: [Twisted-Python] Invalid 'reason' info - possible cause
In-Reply-To: <20040520075635.40514.qmail@web14806.mail.yahoo.com>
References: <20040520075635.40514.qmail@web14806.mail.yahoo.com>
Message-ID: <1085058941.1387.78.camel@sheriffpony>

On Thu, 2004-05-20 at 03:56, Sorin C. wrote:

> It seems that for every kind of selectable object -
> even if not connected - it is issued connection lost.
> I am unable at this moment to sugest a fix as I am not
> familiar with the internals of twisted so I hope a
> core developer can look into this further.

That is expected behaviour. If you shut down reactor, it closes all
connection by force, i.e. it is not a clean close. The problem is you
run reactor.stop() immediately before reactor.run(), so reactor shuts
down immediately.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From soso_pub at yahoo.com  Thu May 20 10:15:53 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Thu, 20 May 2004 07:15:53 -0700 (PDT)
Subject: [Twisted-Python] Invalid 'reason' info - possible cause
In-Reply-To: <1085058941.1387.78.camel@sheriffpony>
Message-ID: <20040520141553.68871.qmail@web14809.mail.yahoo.com>

Hi,

--- Itamar Shtull-Trauring <itamar at itamarst.org>
wrote:
> That is expected behaviour. If you shut down
> reactor, it closes all
> connection by force, i.e. it is not a clean close.
Yes, I use reactor.stop() to shutdown the system (is
there a cleaner way?), but there still is an
inconsistency because the error type is ConnectError
and error description talks about ConnectionLost.

> The problem is you
> run reactor.stop() immediately before reactor.run(),
> so reactor shuts
> down immediately.
This was just a test sample to emulate the behavior;
in my application I started more services (one service
being connecting to another server) in system
initialization and if one service fails then I call
immediately reactor.stop().

Anyway, it doesn't matter anymore since I am using a
workaround now.

Thanks for pointing on how to hook on unhandled
exceptions.

Sorin



	
		
__________________________________
Do you Yahoo!?
Yahoo! Domains ? Claim yours for only $14.70/year
http://smallbusiness.promotions.yahoo.com/offer 



From dripton at ripton.net  Thu May 20 12:33:51 2004
From: dripton at ripton.net (David Ripton)
Date: Thu, 20 May 2004 09:33:51 -0700
Subject: [Twisted-Python] pb.Copyable, round trip objects,
	and untrusted clients
In-Reply-To: <40AC4315.3040702@twistedmatrix.com>
References: <40AC2C0F.40300@ripton.net> <40AC4315.3040702@twistedmatrix.com>
Message-ID: <20040520163351.GA13929@vidar.dreamhost.com>

On 2004.05.20 01:33:09 +0000, Christopher Armstrong wrote:
> It sounds like the client ought to just pass a string (e.g., the name of 
> the game) or something representing the game it wants to play. IOW, 
> whether it's a string or not, something that isn't possible to be munged 
> in a way that would "mess up" the server in the first place.

Yes, that's the way I solved the problem last time.  Stringify everything 
on one side.  Parse the strings on the other side.

If your goal is to have separate client and server programs rather than
a single distributed system, this is the way to do it.  If security is
your #1 goal, this is the way to do it.

If your goal is a minimal and easily maintained system, this is not the 
way to do it.  Not if you have a lot of complex state to track, anyway.
Remote references let you share the same representation on both sides,
avoiding most of the sync issues.  (Or at least delegating them to the
framework, where they can be handled consistently.)

-- 
David Ripton    dripton at ripton.net



From glyph at divmod.com  Thu May 20 12:58:10 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Thu, 20 May 2004 12:58:10 -0400
Subject: [Twisted-Python] pb.Copyable, round trip objects,
	and	untrusted clients
In-Reply-To: <Pine.LNX.4.53.0405200225390.7527@a.shell.peak.org>
References: <40AC2C0F.40300@ripton.net> <1085028054.4024.31.camel@kazekage>
	<Pine.LNX.4.53.0405200225390.7527@a.shell.peak.org>
Message-ID: <1085072289.4024.39.camel@kazekage>

On Thu, 2004-05-20 at 05:34, Jasper Phillips wrote:

> Ack!  Now you've got me scared!  Ten other Holes?!  Could you elaborate a
> little more?

There are no constraints on the type of any argument.  Players could
send lists where you expect strings.  Unicode where you expect lists. 
Tuples where you expect dicts.  etc, etc, etc.  Anywhere you have a
method like:

def remote_foo(self, x):
    self.foos.append(x)

e.g. where you save an object without first inspecting it to make sure
that it's what you expect and then store it, later, and in unrelated
code, you will see tracebacks.  Be creative.  Think of ways that you
could exploit this behavior as a user :).

None of this is anywhere as serious as the average protocol bug in a C
program, but it can still seriously disrupt service.

They can also send nasty circular structures which will put a lot of
load on the garbage collector, or may not even ever be collected.  This
is all in the protocol layer before it hits your code.  This is the main
issue that Brian and I set out to address with newpb and we came up with
some of the other hypothetical attacks against the current system along
the way.

> What's in newpb anyway?  I'd thought this was essentially handled with all
> the Avatar/Mind/Realm newcred stuff?

That's authentication.  Very different from security :).




From dripton at ripton.net  Thu May 20 12:56:59 2004
From: dripton at ripton.net (David Ripton)
Date: Thu, 20 May 2004 09:56:59 -0700
Subject: [Twisted-Python] pb.Copyable, round trip objects,
	and untrusted clients
In-Reply-To: <1085028054.4024.31.camel@kazekage>
References: <40AC2C0F.40300@ripton.net> <1085028054.4024.31.camel@kazekage>
Message-ID: <20040520165659.GB13929@vidar.dreamhost.com>

On 2004.05.20 00:40:54 +0000, Glyph Lefkowitz wrote:
> On Wed, 2004-05-19 at 23:54, David Ripton wrote:
> 
> > This is simple and works, but it's annoyingly repetitive.  And plumbing 
> > code is infecting the application level.  And I know there are other 
> > object vs. id caches inside PB, so this feels redundant.  What's the 
> > right way to do this with Copyable?
> 
> Use Cacheable - sort of.  That helps with the state-management issues. 

That was the answer I was kinda expecting, except for the "sort of"
part that indicates it's not the real answer.

Cacheable is heavier to use than Copyable, so I was hoping to 
develop with Copyable, then introduce Cacheable later if performance
demanded it.  I guess it's possible to do the same thing with security,
but that's much scarier.

> There are about ten other holes you didn't notice 

Got a list?

> and rewinding changes
> is an inherently unsafe way to conceptualize the problem.

Unsafe because you can easily forget to do it in a spot (agreed --
unless you build it into the framework), or unsafe because the client 
can exploit its copy of the Copyable server object in other ways?

> If you're seriously interested in security with PB, you will need
> newpb.  You should bother Brian Warner, since it seems like it's
> *almost* there and he just needs a little more nudging.

Hey Brian, nudge.  If there's anything I can do to help, email me.

-- 
David Ripton    dripton at ripton.net



From brian at dorseys.org  Thu May 20 13:01:07 2004
From: brian at dorseys.org (Brian Dorsey)
Date: Thu, 20 May 2004 10:01:07 -0700
Subject: [Twisted-Python] Looking for coach or participants for NorthWest
	Python Sprint
Message-ID: <20040520170107.GD7081@dorseys.org>



Hello Twisted folks!

The Seattle Python Interest Group (SeaPIG) is hosting a small sprint next month. I've included the full announcement below, but I wanted to send a note here to mention that we're definately going to have a group of people interested in learning Twisted, all of them (so far) being completely new to Twisted. So, if anyone is in the area, please join us! 

We'd especially love to see someone with a bit (or a lot) of Twisted experience, who'd be willing to coach us a bit. And, we'd love to see more new people to help us learn as well!

Take care,
-Brian

=============================================


SeaPIG (the Seattle Python Interest Group) is excited to announce the

                  NORTHWEST PYTHON SPRINT
                     June 19-20, 2004
                 Bellevue, Washington, USA

The cost is free thanks to our host Construx Software.  There will be a
large, comfortable room seating 50+ people at tables, wireless and wired
Internet access, and a projector for demonstrations.  We're currently
looking for coaches to lead sprints, as well as a count of the number
who might attend.  The main day is Saturday (9am-5pm), but we've also
reserved the room for Sunday in case people want more time.  There will
also be a time Saturday morning for lightning talks and demonstrations
(both non-commercial and commercial).

What is a sprint?  A sprint is a group of people who gather for a day or
more to work on a common software project.  The members choose
individual tasks and usually work solo or in pairs in the same room,
then get together periodically to compare notes.  We'll follow the model
that has worked successfully at the past several Python conferences:
several groups working on different projects in the same room.  Past
sprints have done development work on the Python core, Twisted,
Docutils, Webware, Zope, Chandler, etc.  Most projects have a variety of
tasks that need to be done -- coding modules, designing test suites,
squashing bugs, writing user documentation and developer documentation,
brainstorming design strategies, planning promotional activities, etc --
so there's something for every skill level.  You'll need to bring a
laptop, or if you don't have one you can pair with somebody who does.

So far there's one sprint scheduled, on Twisted.  A few Twisted newbies
will be writing an application to get their heads around this
asynchronous beast.  (We could really use somebody with more expertise
around, hint, hint.)

If you'd like to coach a sprint, sign up to attend,  propose a lightning
talk or demonstration, or just get more information, see our wiki page:

    http://seapig.org/NorthwestPythonSprint

or contact:

    Brian Dorsey <brian at dorseys.org>, 206-619-6975
    Mike Orr <mso at oz.net>, 206-240-4250

Construx is located at 11820 Northup Way #E200, Bellevue WA 98005.  It's
eight miles from downtown Seattle; twenty from Sea-Tac Airport.
Carpools and homestays are available if you contact us in advance.









From radix at twistedmatrix.com  Thu May 20 13:07:06 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 20 May 2004 13:07:06 -0400
Subject: [Twisted-Python] pb.Copyable, round trip objects,	and untrusted
	clients
In-Reply-To: <20040520163351.GA13929@vidar.dreamhost.com>
References: <40AC2C0F.40300@ripton.net> <40AC4315.3040702@twistedmatrix.com>
	<20040520163351.GA13929@vidar.dreamhost.com>
Message-ID: <40ACE5BA.4090202@twistedmatrix.com>

David Ripton wrote:
> On 2004.05.20 01:33:09 +0000, Christopher Armstrong wrote:
> 
>>It sounds like the client ought to just pass a string (e.g., the name of 
>>the game) or something representing the game it wants to play. IOW, 
>>whether it's a string or not, something that isn't possible to be munged 
>>in a way that would "mess up" the server in the first place.
> 
> 
> Yes, that's the way I solved the problem last time.  Stringify everything 
> on one side.  Parse the strings on the other side.
> 
> If your goal is to have separate client and server programs rather than
> a single distributed system, this is the way to do it.  If security is
> your #1 goal, this is the way to do it.
> 
> If your goal is a minimal and easily maintained system, this is not the 
> way to do it.  Not if you have a lot of complex state to track, anyway.
> Remote references let you share the same representation on both sides,
> avoiding most of the sync issues.  (Or at least delegating them to the
> framework, where they can be handled consistently.)

Well, your example didn't look like it had much use for using 
particularly complex state going both ways. Maybe you can explain this 
game-choosing process in a bit more detail? Without knowing any more, 
letting the user choose which game he wants to play sounds like it 
shouldn't be more complex than the server giving the client a list of 
strings of game-names (like "Bob's l33t Server") and the client sending 
back "Bob's l33t Server" in a request later on.

IOW, the poster who said that your second and third points are basically 
the same is correct; the API you're designing needs to be looked at 
specifically to see the optimal secure/easy solution.


-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040520/cf51c453/attachment.pgp 

From glyph at divmod.com  Thu May 20 13:16:05 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Thu, 20 May 2004 13:16:05 -0400
Subject: [Twisted-Python] pb.Copyable, round trip objects, and
	untrusted clients
In-Reply-To: <20040520165659.GB13929@vidar.dreamhost.com>
References: <40AC2C0F.40300@ripton.net> <1085028054.4024.31.camel@kazekage>
	<20040520165659.GB13929@vidar.dreamhost.com>
Message-ID: <1085073365.4024.43.camel@kazekage>

On Thu, 2004-05-20 at 12:56, David Ripton wrote:

> Unsafe because you can easily forget to do it in a spot (agreed --
> unless you build it into the framework), or unsafe because the client 
> can exploit its copy of the Copyable server object in other ways?

I meant that you can easily forget to do it.  Even if you build it into
the framework, you have to categorize all possible changes you want to
be able to rewind if you want to reverse them.  You can make it very
_easy_ to categorize them, but you still can't avoid uploading
potentially harmful object structures in the update of the data.  By
just not allowing changes in the first place, you don't have to worry
about that.




From jasper at peak.org  Thu May 20 19:32:45 2004
From: jasper at peak.org (Jasper Phillips)
Date: Thu, 20 May 2004 16:32:45 -0700 (PDT)
Subject: [Twisted-Python] pb.Copyable, round trip objects,	and	untrusted
	clients
In-Reply-To: <1085072289.4024.39.camel@kazekage>
References: <40AC2C0F.40300@ripton.net> <1085028054.4024.31.camel@kazekage>
	<Pine.LNX.4.53.0405200225390.7527@a.shell.peak.org>
	<1085072289.4024.39.camel@kazekage>
Message-ID: <Pine.LNX.4.53.0405201620590.12639@a.shell.peak.org>


On Thu, 20 May 2004, Glyph Lefkowitz wrote:

> On Thu, 2004-05-20 at 05:34, Jasper Phillips wrote:
> 
> > Ack!  Now you've got me scared!  Ten other Holes?!  Could you elaborate a
> > little more?
> 
> There are no constraints on the type of any argument.  Players could
> send lists where you expect strings.  Unicode where you expect lists. 
> Tuples where you expect dicts.  etc, etc, etc.

Good point.  I validate data players send before inserting them into Game
state, and toss them a remote exception if they don't validate.  This is
mostly for testing purposes, but should catch this kind of abuse as well.

> None of this is anywhere as serious as the average protocol bug in a C
> program, but it can still seriously disrupt service.

Indeed I know someone who's dealing with just such a bug right now!  I am
fervently greatfull that Twisted exists, and I don't have to muck with such
low level headaches. :-)

> They can also send nasty circular structures which will put a lot of
> load on the garbage collector, or may not even ever be collected.  This
> is all in the protocol layer before it hits your code.  This is the main
> issue that Brian and I set out to address with newpb and we came up with
> some of the other hypothetical attacks against the current system along
> the way.

Hmmm, I hadn't considered such a malicious denial of service style attack.
If I get to the point where such a thing could really be a problem I'll
consider myself beyond lucky!

> > What's in newpb anyway?  I'd thought this was essentially handled with all
> > the Avatar/Mind/Realm newcred stuff?
> 
> That's authentication.  Very different from security :).

Right, although it did change pb a bit too.  More security would be great,
as I have to admit I'm mostly ignoring the issue and crossing my fingers
that Twisted deals with it well.  Just not enough energy to do everything.

-Jasper




From laforge49 at yahoo.co.in  Thu May 20 22:33:19 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Fri, 21 May 2004 03:33:19 +0100 (BST)
Subject: [Twisted-Python] 1.3 installer links still broken
Message-ID: <20040521023319.5793.qmail@web8306.mail.in.yahoo.com>

Just a quick reminder that the 1.3 download links for windows installers on www.twistedmatrix.com are still broken.
 


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040521/ba4e136d/attachment.htm 

From dripton at ripton.net  Thu May 20 23:46:53 2004
From: dripton at ripton.net (David Ripton)
Date: Thu, 20 May 2004 20:46:53 -0700
Subject: [Twisted-Python] pb.Copyable, round trip objects,
	and untrusted clients
In-Reply-To: <40ACE5BA.4090202@twistedmatrix.com>
References: <40AC2C0F.40300@ripton.net> <40AC4315.3040702@twistedmatrix.com>
	<20040520163351.GA13929@vidar.dreamhost.com>
	<40ACE5BA.4090202@twistedmatrix.com>
Message-ID: <20040521034652.GA27428@vidar.dreamhost.com>

On 2004.05.20 13:07:06 +0000, Christopher Armstrong wrote:
> Well, your example didn't look like it had much use for using 
> particularly complex state going both ways. Maybe you can explain this 
> game-choosing process in a bit more detail? Without knowing any more, 
> letting the user choose which game he wants to play sounds like it 
> shouldn't be more complex than the server giving the client a list of 
> strings of game-names (like "Bob's l33t Server") and the client sending 
> back "Bob's l33t Server" in a request later on.

The full game has much more complex state, which I will resist spelling
out in detail.  I was just trying to show a minimal example. 

Yes, that particular event would only really require sending a list of 
dicts or tuples, with each dict or tuple holding the ~6 attributes of 
a single game that need to be displayed in a table, from server to 
client.  And then sending just the name or id of the one game that 
the user wants to join back to the server.  (Another event would send a
different subset of the game state.)

But there is a (small) code size cost to pass just the attributes of 
the Game class that are needed for that GUI display.  Passing the
whole Game class (censored in a global rather than event-specific way)
is simpler.  And if I decide to add another column to that table,
passing the whole object probably doesn't require a change to the 
remote call arguments, while passing the minimal bits does.  And it just
feels like better OO design to pass a whole object rather than ripping
out bits and pieces of it.

None of which matters much, if passing just dicts and strings and ints 
is secure, and passing copies of complex objects is not.  (This seems to
happen in every "distributed object system" I try.  Basic RPC works
[except in Java RMI, which appears to be an April Fool's joke]; 
anything more complex works for "Hello World" then falls over in
production.)

===================

Passing globally reusable game state from server to clients in a 
consistent, systematic way makes a lot more sense than providing 
minimal ad hoc local context for each distinct action.

There are two opposite ways to do this, which in the end generate 
mostly the same result.

A. Apply the (error-checked) action on the server, then use Copyable or 
Cacheable to copy the new state (except the hidden parts) over to the 
clients.  The clients hold a slightly delayed mirror image of the 
server's state.

B. Initialize separate objects of the same classes on the server and 
each client to the same starting state, then pass the same action that 
just ran on the server to each client (except hidden events).  If you 
assume that all actions are deterministic (meaning die rolls are 
separate actions), the same code running the same actions will 
generate the same end state.  The server and client are now more
like blind synchronized swimmers listening to the same coach.

B is more work up front.  However, assuming applying an action to a 
state to get the next state is cheap (and cheaply reversable), I think 
it's superior.  First, it uses more CPU on clients and less network 
bandwidth, which is a good tradeoff.  Second, you have the full event 
stream so you can easily undo/redo, either for real or to just step 
through previous game history.  Finally, client -> server traffic has 
to be small (attempted) actions, not full object dumps, because the 
server doesn't trust the client, so it has the beauty of symmetry.

> IOW, the poster who said that your second and third points are basically 
> the same is correct; the API you're designing needs to be looked at 
> specifically to see the optimal secure/easy solution.

Sure.

Upon further review, I'm back to throwing minimal action objects both
ways, eschewing Copyable and Cacheable completely in favor of manual
solutions involving dicts and lists of strings and ints.  Which is 
where I was a couple of weeks ago.  The grass is always greener...

The security issues in Copyable / Cacheable should knock me off this 
particular fence for long enough to have enough code written that I'm
unwilling to climb back up.

Thanks guys.

-- 
David Ripton    dripton at ripton.net



From dripton at ripton.net  Fri May 21 00:45:12 2004
From: dripton at ripton.net (David Ripton)
Date: Thu, 20 May 2004 21:45:12 -0700
Subject: [Twisted-Python] pb.Copyable, round trip objects,
	and untrusted clients
In-Reply-To: <Pine.LNX.4.53.0405200204510.7527@a.shell.peak.org>
References: <40AC2C0F.40300@ripton.net>
	<Pine.LNX.4.53.0405200204510.7527@a.shell.peak.org>
Message-ID: <20040521044512.GA28968@vidar.dreamhost.com>

On 2004.05.20 02:25:20 +0000, Jasper Phillips wrote:
> 
> On Wed, 19 May 2004, David Ripton wrote:
> 
> > I'm working on a client-server game, with hidden information, using PB. 
> >   I don't want to trust the clients.
> 
> Titan, I presume?  Nice game!

Yeah.  I don't have time to maintain 50k lines of Java code, so I need
to rewrite it in 5k lines of Python.  :->

> I'm working on a game more akin to Civilization or Age of Wonders, but have
> basically the same problem.

That if the Mongols upgrade early from horsies to tanks, Europe is toast,
but it's hard to make the game dynamic enough to show the Eiffel Yurt?

> > Because there is hidden information, it's important not to send anything 
> > to the client that it's player shouldn't see.  Doing that with PB is 
> > pretty straightforward.  If a class's data is always secret, don't make 
> > it Copyable.  If parts of a class are secret, censor them in getStateToCopy.
> 
> For me this was more complex, as what a Player knows is itself a true part
> of the Game's State, potentially affecting Action/Event resolution.  I end
> up calculating each Players state myself, and passing them explictly.

What happens if players conspire to share their secret information offline?
Is it okay if someone knows stuff but doesn't Officially Know it, or
does the whole game tend to fall over in the face of such weenie behavior?

If B, you've got a hard ceiling to the amount of security you can
program in, which is both annoying and refreshing (I don't need to fix 
this extremely theoretical security flaw, because there's a much larger 
one I can never fix.  It's like a security variant of Amdahl's Law.  If
your company insists on running Exchange, at least you don't need to worry 
about triply-redundant power supplies on the mail server.)

> Plus this feels to me more like it should be part of the game itself, rather
> than some oblique networking aspect.  Same end effect though.

I've decided to have the server and each client save the action stream
it's seen, which is somewhat similar.  I have code in the previous
version of this game to deduce and predict which stack hidden enemy 
units are in based on partial information.  But the AI isn't smart
enough to worry about what other players know, only what it knows, so
this is essentially local information.  I don't consider it part of the
server's game model.  (Maybe I should, from an everything-in-one-place
perspective.  It would make it easier to persist this information
rather than recompute it.)

Why is what other players know an important part of your game state?
The exact extents of other players' knowledge can't be public, so nobody
but the server can really use this information, right?  What does the
server do with it?  I guess it's useful for diplomacy, if you allow
bartering information.

> > Obviously, the client should only be able to change the server's game 
> > state via a well-defined error-checked interface.  Also fairly 
> > straightforward, though error-prone since you need to forsee and test 
> > against every way to cheat.
> 
> IMHO handling this can avoid the 3rd problem you mention.  I have Players
> send Actions for a given Turn as the only API to change Game State.  These
> actions don't take game object as args, but rather Ids as you suggest below.

I'm now back to wanting to do that in both directions.  Except using
strings instead of object IDs, since the parallel objects on the client 
and server will be distinct.  (But they will use the same class, which
is key to maintainability.  When you find yourself writing ClientGame
and ServerGame, scream until the urge passes, then decouple the concept
from its context until the need is gone.)

> I do send actual objects from the Game to Players, but IMHO this is a bit
> error prone lest you accidentally leave in secret info.  I only do it so
> that the clients can validate actions they plan sending against their
> perceived State using the same mechanism as the Game.

I want to make it symmetrical, so I want to build the client-side model
objects using the action stream, rather than copying them directly.  It
will be painfully boring, but I don't have *that* many actions, and
they're fully documented from last time I decided to go this way.

> IMHO it seems superflous to have the game update the information a client
> sends, only to later access this same information for calculations.  Why not
> just pass back the relavent Ids, and have the Game API look up their True
> counterpart as needed?  This doesn't seem onerous to me.

I wanted a way to bury this detail inside the framework, but it's not
currently practical so I'm flipping completely the other way.  I'd forgotten
how badly I want the ability to fast-forward and rewind through game history
by applying and undoing actions.  (Lets the AI free-run while giving the
ability to watch it as if it were moving more slowly.  Also lets you
review other people's savegames to pick up strategy hints.)

-- 
David Ripton    dripton at ripton.net



From radix at twistedmatrix.com  Fri May 21 00:52:55 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 21 May 2004 00:52:55 -0400
Subject: [Twisted-Python] pb.Copyable, round trip objects,	and untrusted
	clients
In-Reply-To: <20040521034652.GA27428@vidar.dreamhost.com>
References: <40AC2C0F.40300@ripton.net>
	<40AC4315.3040702@twistedmatrix.com>	<20040520163351.GA13929@vidar.dreamhost.com>	<40ACE5BA.4090202@twistedmatrix.com>
	<20040521034652.GA27428@vidar.dreamhost.com>
Message-ID: <40AD8B27.7090503@twistedmatrix.com>

David Ripton wrote:
> On 2004.05.20 13:07:06 +0000, Christopher Armstrong wrote:
> 
>>Well, your example didn't look like it had much use for using 
>>particularly complex state going both ways. Maybe you can explain this 
>>game-choosing process in a bit more detail? Without knowing any more, 
>>letting the user choose which game he wants to play sounds like it 
>>shouldn't be more complex than the server giving the client a list of 
>>strings of game-names (like "Bob's l33t Server") and the client sending 
>>back "Bob's l33t Server" in a request later on.
> 
> 
> The full game has much more complex state, which I will resist spelling
> out in detail.  I was just trying to show a minimal example. 
> 
> Yes, that particular event would only really require sending a list of 
> dicts or tuples, with each dict or tuple holding the ~6 attributes of 
> a single game that need to be displayed in a table, from server to 
> client.  And then sending just the name or id of the one game that 
> the user wants to join back to the server.  (Another event would send a
> different subset of the game state.)
> 
> But there is a (small) code size cost to pass just the attributes of 
> the Game class that are needed for that GUI display.  Passing the
> whole Game class (censored in a global rather than event-specific way)
> is simpler.  And if I decide to add another column to that table,
> passing the whole object probably doesn't require a change to the 
> remote call arguments, while passing the minimal bits does.  And it just
> feels like better OO design to pass a whole object rather than ripping
> out bits and pieces of it.

Ok, I'm going to debate this assumption of yours. It seems you're 
complaining about something that is barely a problem: let's talk about 
code size. Here's an example of how stuff could work.

In the client:

persp.callRemote("getCurrentGames").addCallback(_cbGotGames)

def _cbGotGames(self, games):
     # games is a list of complex objects, or whatever
     print "games are", games
     print "which one?"
     ui.whichGame(games).addCallback(_cbChosenGame)

def _cbChosenGame(self, game):
     #here's what you think saves a lot of code space:
     persp.callRemote("chooseGame", game)
     #as opposed to
     persp.callRemote("chooseGame", game.id())


Hmm, I count a single extra method call there. That doesn't seem like a 
whole lot to me. :-) This is not worth getting worked up over. 
Unfortunately, the Python community has somehow gotten into an obsession 
with syntax, and is trying to reduce tiny amounts of extra syntax at all 
costs.... but that's a rant for somewhere other than twisted-python.

 > None of which matters much, if passing just dicts and strings and ints
 > is secure, and passing copies of complex objects is not.  (This seems to
 > happen in every "distributed object system" I try.  Basic RPC works
 > [except in Java RMI, which appears to be an April Fool's joke];
 > anything more complex works for "Hello World" then falls over in
 > production.)

There's certainly applications using Copyable and Cacheable in 
production; I'm not sure what exactly you're talking about.

[snip]

I'll wait until you respond to this email before going over the points 
in the second section of your email.

>>IOW, the poster who said that your second and third points are basically 
>>the same is correct; the API you're designing needs to be looked at 
>>specifically to see the optimal secure/easy solution.
> 
> 
> Sure.
> 
> Upon further review, I'm back to throwing minimal action objects both
> ways, eschewing Copyable and Cacheable completely in favor of manual
> solutions involving dicts and lists of strings and ints.  Which is 
> where I was a couple of weeks ago.  The grass is always greener...
> 
> The security issues in Copyable / Cacheable should knock me off this 
> particular fence for long enough to have enough code written that I'm
> unwilling to climb back up.

Well, I'm defending my point in the name of sane, easy to implement 
design, and not primarily security. I'm not really sure what big 
security issues you're complaining about here. I think you're largely 
overreacting; Copyable and Cacheable are certainly useful, usable 
functionality. Of course, things aren't perfect, but we admit this with 
the newpb project. We are trying to solve all of the problems with the 
current PB there, especially security related. OTOH, I don't think 
you've pointed out any real problems with it. It mostly seems to be 
based on weird desires, to me. In fact, let me go back to your original 
post...


> Obviously, the client should only be able to change the server's 
 > game state via a well-defined error-checked interface.  Also fairly
 > straightforward, though error-prone since you need to forsee and
 > test against every way to cheat.
>
> There's a third hole to plug, which is passing an object from the server
 > to the client as an argument of a client-side remote_* method, and later
 > getting it back as an argument to a server-side perspective_* method.
 > (e.g. the server passes the client a list of games in progress, and
 > later the client passes back the game it wants to join.)  If the client
 > changes the object before passing it back, it might trick the server
 > into doing the wrong thing with it.

See, what it seems like you're saying here is "I want the client to be 
able to send me data that I don't care about and that it shouldn't be 
able to have control to change in the first place, but then I want to do 
extra work on the server to throw that data out". I should have made 
this point earlier, but I was rather tired when I last posted to this 
thread :). Anyway, that's what I'm hearing, and it doesn't really make 
sense to me.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040521/513cb3e0/attachment.pgp 

From glyph at divmod.com  Fri May 21 01:05:27 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Fri, 21 May 2004 01:05:27 -0400
Subject: [Twisted-Python] pb.Copyable, round trip objects, and
	untrusted clients
In-Reply-To: <20040521034652.GA27428@vidar.dreamhost.com>
References: <40AC2C0F.40300@ripton.net> <40AC4315.3040702@twistedmatrix.com>
	<20040520163351.GA13929@vidar.dreamhost.com>
	<40ACE5BA.4090202@twistedmatrix.com>
	<20040521034652.GA27428@vidar.dreamhost.com>
Message-ID: <1085115927.3258.74.camel@kazekage>

On Thu, 2004-05-20 at 23:46, David Ripton wrote:

> The security issues in Copyable / Cacheable should knock me off this 
> particular fence for long enough to have enough code written that I'm
> unwilling to climb back up.

Keep in mind that you still might get an unexpected object (a dict where
you expect a list) and if you're tossing around large amounts of state
that's potentially a problem.  The security issues are not with Copyable
or Cacheable in particular.

Subtext: hassle brian.  warner at lothar.com.  newpb needs to get done, and
done soon :).




From radix at twistedmatrix.com  Fri May 21 01:12:27 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 21 May 2004 01:12:27 -0400
Subject: [Twisted-Python] pb.Copyable, round trip objects, and	untrusted
	clients
In-Reply-To: <1085115927.3258.74.camel@kazekage>
References: <40AC2C0F.40300@ripton.net>
	<40AC4315.3040702@twistedmatrix.com>	<20040520163351.GA13929@vidar.dreamhost.com>	<40ACE5BA.4090202@twistedmatrix.com>	<20040521034652.GA27428@vidar.dreamhost.com>
	<1085115927.3258.74.camel@kazekage>
Message-ID: <40AD8FBB.8030604@twistedmatrix.com>

Glyph Lefkowitz wrote:
> On Thu, 2004-05-20 at 23:46, David Ripton wrote:
> 
> 
>>The security issues in Copyable / Cacheable should knock me off this 
>>particular fence for long enough to have enough code written that I'm
>>unwilling to climb back up.
> 
> 
> Keep in mind that you still might get an unexpected object (a dict where
> you expect a list) and if you're tossing around large amounts of state
> that's potentially a problem.  The security issues are not with Copyable
> or Cacheable in particular.

Just so it's clear, this is what I was trying to say as one of the 
points in my last message, near the end, but I might not have said it in 
quite a politic or coherent way :)


-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040521/3d43acf2/attachment.pgp 

From dripton at ripton.net  Fri May 21 02:16:39 2004
From: dripton at ripton.net (David Ripton)
Date: Fri, 21 May 2004 02:16:39 -0400
Subject: [Twisted-Python] pb.Copyable, round trip objects,	and untrusted
	clients
In-Reply-To: <40AD8B27.7090503@twistedmatrix.com>
References: <40AC2C0F.40300@ripton.net>	<40AC4315.3040702@twistedmatrix.com>	<20040520163351.GA13929@vidar.dreamhost.com>	<40ACE5BA.4090202@twistedmatrix.com>	<20040521034652.GA27428@vidar.dreamhost.com>
	<40AD8B27.7090503@twistedmatrix.com>
Message-ID: <40AD9EC7.9050307@ripton.net>

Christopher Armstrong wrote:

> Ok, I'm going to debate this assumption of yours. It seems you're 
> complaining about something that is barely a problem: let's talk about 
> code size. Here's an example of how stuff could work.
> 
> In the client:
> 
> persp.callRemote("getCurrentGames").addCallback(_cbGotGames)
> 
> def _cbGotGames(self, games):
>     # games is a list of complex objects, or whatever
>     print "games are", games
>     print "which one?"
>     ui.whichGame(games).addCallback(_cbChosenGame)
> 
> def _cbChosenGame(self, game):
>     #here's what you think saves a lot of code space:
>     persp.callRemote("chooseGame", game)
>     #as opposed to
>     persp.callRemote("chooseGame", game.id())
> 
> 
> Hmm, I count a single extra method call there. That doesn't seem like a 
> whole lot to me. :-) This is not worth getting worked up over. 

Probably not.  It's one more little piece of boilerplate all over. 
(Well, two -- the server has to lookup the game by id.)

I was worrying about code size more in the other subthread, the 
difference between

client.callRemote("send_game", game)

and

client.callRemote("send_stuff_about_game", game.name, game.owner, 
game.create_time, game.start_time, game.min_players, game.max_players, 
game.player_names)

Demonstrating the difference between passing complex objects and passing 
shredded bits of them.  This is what motivated my latest attempt to use 
Copyable instead of lots of little actions to manually push discrete 
changes to game state around.  (Which was probably a poor choice in any 
case; I really like the little discrete actions in most ways.)

Which is of course an exaggeration, because it would really be
client.callRemote("send_game_dict", game.as_dict())
Assuming we only need the atomic elements of game, not contained complex 
objects.  (Nested dicts get ugly fast.)  Also assuming it's okay to have 
one as_dict method that returns the superset of items we ever need, 
rather than a bunch of specialized versions.

> There's certainly applications using Copyable and Cacheable in 
> production; I'm not sure what exactly you're talking about.

I'm not saying they don't work.  I agree that they work quite well, up 
to a point.  Just not up to the point I wanted and mostly expected. 
(Based on reading optimistic docs, or perhaps reading docs optimistically.)

PB is a very nice framework, but the combination of live remote 
references to complex objects and untrusted clients is tough.  Which is 
fine -- I can just pretend Copyable and Cacheable aren't there, and be 
happy that it's so easy to pass dicts and strings.  If newpb solves this 
problem, great, but if not, PB is still the best RPC framework I have.

-- 
David Ripton    dripton at ripton.net



From jasper at peak.org  Fri May 21 04:39:41 2004
From: jasper at peak.org (Jasper Phillips)
Date: Fri, 21 May 2004 01:39:41 -0700 (PDT)
Subject: [Twisted-Python] pb.Copyable, round trip objects,	and untrusted
	clients
In-Reply-To: <20040521044512.GA28968@vidar.dreamhost.com>
References: <40AC2C0F.40300@ripton.net>
	<Pine.LNX.4.53.0405200204510.7527@a.shell.peak.org>
	<20040521044512.GA28968@vidar.dreamhost.com>
Message-ID: <Pine.LNX.4.53.0405210012100.15434@a.shell.peak.org>


On Thu, 20 May 2004, David Ripton wrote:

> On 2004.05.20 02:25:20 +0000, Jasper Phillips wrote:
> > 
> > Titan, I presume?  Nice game!
> 
> Yeah.  I don't have time to maintain 50k lines of Java code, so I need
> to rewrite it in 5k lines of Python.  :->

I used to write Java code for a living;  I came to hate it's shortcomings
and IMHO Python is purely superior.  Still, was Titan really 50k lines of
Java?!  Mind boggling.


> > I'm working on a game more akin to Civilization or Age of Wonders, but have
> > basically the same problem.
> 
> That if the Mongols upgrade early from horsies to tanks, Europe is toast,
> but it's hard to make the game dynamic enough to show the Eiffel Yurt?

Heh. :-)  I meant the code. ;-P  Besides, while my game is in the same genre
as Civ and AoW it's more influenced by boardgames and miniatures.


> > For me this was more complex, as what a Player knows is itself a true part
> > of the Game's State, potentially affecting Action/Event resolution.  I end
> > up calculating each Players state myself, and passing them explictly.
> 
> What happens if players conspire to share their secret information offline?
> Is it okay if someone knows stuff but doesn't Officially Know it, or
> does the whole game tend to fall over in the face of such weenie behavior?

It's ok, but won't have in game effects; such information is like secret
info only known to a few.  I'm considering a UI for information sharing, but
that'll just be for allies convenience.


> > Plus this feels to me more like it should be part of the game itself,
> > rather than some oblique networking aspect.  Same end effect though.
> 
> I've decided to have the server and each client save the action stream
> it's seen, which is somewhat similar.  I have code in the previous
> version of this game to deduce and predict which stack hidden enemy 
> units are in based on partial information.

I'm treating event history as game state, although I haven't implemented it
yet.  Not so much for the AIs use, but to model it's effects on future
events.  IMHO treating it as game state is also a simpler model.


> Why is what other players know an important part of your game state?
> The exact extents of other players' knowledge can't be public, so nobody
> but the server can really use this information, right?  What does the
> server do with it?  I guess it's useful for diplomacy, if you allow
> bartering information.

It can affect events and populations, and change how turns play out.  A
"player"'s knowledge represents roughly what an entire Faction knows, often
including population over which it rules.  For example knowledge of pending
invasion can spur population dispersal, unrest, etc.  Knowledge that a
foreign power is behind some act of espionage (whether true or untrue) can
affect public opinion and thus the practicality of war, etc.

Admitedly I'm not yet using this so it's just a nice potential, with the
main advantage IMHO being clearer code.


> > IMHO handling this can avoid the 3rd problem you mention.  I have
> > Players send Actions for a given Turn as the only API to change Game
> > State.  These actions don't take game object as args, but rather Ids as
> > you suggest below.
> 
> I'm now back to wanting to do that in both directions.  Except using
> strings instead of object IDs, since the parallel objects on the client 
> and server will be distinct.  (But they will use the same class, which
> is key to maintainability.  When you find yourself writing ClientGame
> and ServerGame, scream until the urge passes, then decouple the concept
> from its context until the need is gone.)

IMHO this seems overly complex.  I don't like maintaining parallel objects
or parallel calculation, as it smells like ClientGame/ServerGame...


> I want to make it symmetrical, so I want to build the client-side model
> objects using the action stream, rather than copying them directly.  It
> will be painfully boring, but I don't have *that* many actions, and
> they're fully documented from last time I decided to go this way.

Why?  I see no advantage to symmetry here.  IMHO the a trusted-server / 
untrusted-client asymetrical design is clearly called for.


> > IMHO it seems superflous to have the game update the information a
> > client sends, only to later access this same information for
> > calculations.  Why not just pass back the relavent Ids, and have the
> > Game API look up their True counterpart as needed?  This doesn't seem
> > onerous to me.
> 
> I wanted a way to bury this detail inside the framework, but it's not
> currently practical so I'm flipping completely the other way.  I'd forgotten
> how badly I want the ability to fast-forward and rewind through game history
> by applying and undoing actions.  (Lets the AI free-run while giving the
> ability to watch it as if it were moving more slowly.  Also lets you
> review other people's savegames to pick up strategy hints.)

I disagree that sending objects isn't practical, IMHO it just helps to
approach it slightly differently.  I'll try to explain what I mean by
roughly describing my game as an example;  if my design is crappy please feel
free to shoot holes in it! :-)

Much of my game's logic is based upon Copyable Actions which are used by
both Server and Client, e.g. MoveAction.  These have a .__call__(state)
which modifies the passed state as they see fit, as well as a
.validate(state) to ensure a move is legal.  Players create a list of such
Actions, and pass them to the Game server as their turn.  All the args for
Action are literals (such as Unit ids and movement direction), with Actions
knowing how to find the corresponding objects on passed in State.

With only literal args these Action objects can be passed safely to the
game, which will reconstitue it's own versions, validate them, then invoke
them by passing in it's True State.  Players are given their own PlayerState
view of TrueState each turn, with real (copies of) objects they can use for
display, UI and validation.

Basically it works like passing objects both ways, except it's safe.  The
costs are minor: referenceable objects must have Ids, Clients must create
Actions with 'object.id' instead of 'object', and Actions need to either
'object = state.getObject(objectId)' or use Game/State methods taking ids
for args.

IMHO Making all of this essentially part of the API is cleaner than having
bulk "Reconsitute Objects" methods.


Hope this is at least food for thought!  In any event I find talking about
my designs is a good way for me to step back and look at them from another
angle.

-Jasper




From jasper at peak.org  Fri May 21 05:07:14 2004
From: jasper at peak.org (Jasper Phillips)
Date: Fri, 21 May 2004 02:07:14 -0700 (PDT)
Subject: [Twisted-Python] pb.Copyable, round trip objects,	and untrusted
	clients
In-Reply-To: <40AD9EC7.9050307@ripton.net>
References: <40AC2C0F.40300@ripton.net> <40AC4315.3040702@twistedmatrix.com>
	<20040520163351.GA13929@vidar.dreamhost.com>
	<40ACE5BA.4090202@twistedmatrix.com>
	<20040521034652.GA27428@vidar.dreamhost.com>
	<40AD8B27.7090503@twistedmatrix.com> <40AD9EC7.9050307@ripton.net>
Message-ID: <Pine.LNX.4.53.0405210151520.15434@a.shell.peak.org>


On Fri, 21 May 2004, David Ripton wrote:
> I was worrying about code size more in the other subthread, the 
> difference between
> 
> client.callRemote("send_game", game)
> 
> and
> 
> client.callRemote("send_stuff_about_game", game.name, game.owner, 
> game.create_time, game.start_time, game.min_players, game.max_players, 
> game.player_names)

But you still have to init/set your Game object with all these args somehow on
the client side, right?  IMHO a more apt comparison is this:

game = Game( *manyArgs )
client.callRemote( "send_game", game )

triggering the server to:
game = reconstituteGame( game )

vs.

client.callRemote( "create_game", *manyArgs )

triggering the server to:
game = Game( *manyArgs )


IMHO the second is cleaner and less error prone.

-Jasper




From laforge49 at yahoo.co.in  Fri May 21 09:34:41 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Fri, 21 May 2004 14:34:41 +0100 (BST)
Subject: [Twisted-Python] Service.stopService
Message-ID: <20040521133441.1295.qmail@web8306.mail.in.yahoo.com>

I have a very simple application--I'm testing service start and stop.
Woops--stopService is never called. Why?
 
Here's my simpleService.py:
 
from twisted.application import service
class SimpleService(service.Service):
    def startService(self):
        service.Service.startService(self)
        print '***start'
    def stopService(self):
        service.Service.stopService(self)
        print '***stop'

And here's my twistd script:
 
from twisted.application import service
import simpleService
application = service.Application('testService', uid=1, gid=1)
serviceCollection=service.IServiceCollection(application)
w = simpleService.SimpleService()
s.setServiceParent(serviceCollection)

It logs ***start, just fine. But never ***stop!
 
Is something broken? Or should I be using addSystemEventTrigger???


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040521/1c29e609/attachment.htm 

From michael.l.schneider at ugsplm.com  Fri May 21 09:44:49 2004
From: michael.l.schneider at ugsplm.com (Schneider, Michael)
Date: Fri, 21 May 2004 09:44:49 -0400
Subject: [Twisted-Python] Twisted 1.3 Windows Installers???
Message-ID: <49199579A2BB32438A7572AF3DBB2FB505A217FE@uscimplm001.net.plm.eds.com>

Hello All,
 
Thanks for releasing 1.3,  Is there an ETA for the windows installers?
 
Thanks
Mike
 
 
----------------------------------------------------------------
Michael Schneider
Senior Software Engineering Consultant
UGS PLM Solutions - an EDS Company
 
"The Greatest Performance Improvement Is the transitioning from a non-working state to the working state"

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040521/ea90cf88/attachment.htm 

From exarkun at divmod.com  Fri May 21 09:54:43 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 21 May 2004 09:54:43 -0400
Subject: [Twisted-Python] Service.stopService
In-Reply-To: <20040521133441.1295.qmail@web8306.mail.in.yahoo.com>
References: <20040521133441.1295.qmail@web8306.mail.in.yahoo.com>
Message-ID: <40AE0A23.6020506@divmod.com>

Bill la Forge wrote:
> I have a very simple application--I'm testing service start and stop.
> Woops--stopService is never called. Why?
>  
> Here's my simpleService.py:
>  
> from twisted.application import service
> class SimpleService(service.Service):
>     def startService(self):
>         service.Service.startService(self)
>         print '***start'
>     def stopService(self):
>         service.Service.stopService(self)
>         print '***stop'
> And here's my twistd script:
>  
> from twisted.application import service
> import simpleService
> application = service.Application('testService', uid=1, gid=1)
> serviceCollection=service.IServiceCollection(application)
> w = simpleService.SimpleService()
> s.setServiceParent(serviceCollection)
> It logs ***start, just fine. But never ***stop!
>  
> Is something broken? Or should I be using addSystemEventTrigger???
> 

   I see different behavior.  After changing the last line to use "w" 
instead of "s":

exarkun at boson:~$ twistd -noy simple.tac
2004/05/21 09:52 EDT [-] Log opened.
2004/05/21 09:52 EDT [-] twistd 1.3.0rc1 (/usr/bin/python 2.3.3) starting up
2004/05/21 09:52 EDT [-] reactor class: 
twisted.internet.default.SelectReactor
2004/05/21 09:52 EDT [-] Loading simple.tac...
2004/05/21 09:52 EDT [-] Loaded.
2004/05/21 09:52 EDT [-] set uid/gid 1000/1000
2004/05/21 09:52 EDT [-] ***start
2004/05/21 09:52 EDT [-] Received SIGINT, shutting down.
2004/05/21 09:52 EDT [-] ***stop
2004/05/21 09:52 EDT [-] Main loop terminated.
2004/05/21 09:52 EDT [-] Server Shut Down.
exarkun at boson:~$

   Jp



From andrew-twisted at puzzling.org  Fri May 21 09:55:34 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 21 May 2004 23:55:34 +1000
Subject: [Twisted-Python] Service.stopService
In-Reply-To: <20040521133441.1295.qmail@web8306.mail.in.yahoo.com>
References: <20040521133441.1295.qmail@web8306.mail.in.yahoo.com>
Message-ID: <20040521135534.GI22686@frobozz>

On Fri, May 21, 2004 at 02:34:41PM +0100, Bill la Forge wrote:
>    I have a very simple application--I'm testing service start and stop.
>    Woops--stopService is never called. Why?
>     
[...]
>    And here's my twistd script:
>     
>    from twisted.application import service
>    import simpleService
>    application = service.Application('testService', uid=1, gid=1)
>    serviceCollection=service.IServiceCollection(application)
>    w = simpleService.SimpleService()
>    s.setServiceParent(serviceCollection)

This doesn't look like your real twistd script -- 's' isn't defined.  Did
your copy-and-paste screw something up?

-Andrew.




From laforge49 at yahoo.co.in  Fri May 21 10:05:39 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Fri, 21 May 2004 15:05:39 +0100 (BST)
Subject: [Twisted-Python] Service.stopService
In-Reply-To: <20040521135534.GI22686@frobozz>
Message-ID: <20040521140539.41560.qmail@web8307.mail.in.yahoo.com>


More like copy/paste/cleanup

I've since updated things... I'm thinking that perhaps the log is shutdown.

So I'm now writing files. I get the start file, but not the stop file:

from twisted.application import service
from twisted.internet import reactor

class SimpleService(service.Service):
    def startService(self):
        service.Service.startService(self)
        reactor.addSystemEventTrigger('before','shutdown',self.stopService)
        f=open('start.txt','w')
        f.close()
    def stopService(self):
        f=open('stop.txt','w')
        f.write('KillJoy was here?')
        f.close()
        service.Service.stopService(self)
        
from twisted.application import service
from twisted.internet import reactor

import simpleService

application = service.Application('testServer')
serviceCollection=service.IServiceCollection(application)
ss=simpleService.SimpleService()
ss.setServiceParent(serviceCollection)
reactor.stop()


C:\other\Bill\compstrm\compstrm\twbsd>twistd -noy testService.py
2004/05/21 19:29 India Standard Time [-] Log opened.
2004/05/21 19:29 India Standard Time [-] twistd 1.2.0 (C:\Python23\python.exe 2.
3.3) starting up
2004/05/21 19:29 India Standard Time [-] reactor class: twisted.internet.default
.SelectReactor
2004/05/21 19:29 India Standard Time [-] Main loop terminated.
2004/05/21 19:29 India Standard Time [-] Server Shut Down.

C:\other\Bill\compstrm\compstrm\twbsd>

Now, since its working for others, let me further report that I'm running on nt2000 with twisted 1.2.

Mmm. Perhaps I'd best reinstall. I may have messed up some twisted code while adding print statements. :-O

 


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040521/09f40a30/attachment.htm 

From laforge49 at yahoo.co.in  Fri May 21 10:20:08 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Fri, 21 May 2004 15:20:08 +0100 (BST)
Subject: [Twisted-Python] still no stop!
Message-ID: <20040521142008.94249.qmail@web8308.mail.in.yahoo.com>

I've uninstalled twisted and re-installed.
 
Still no 'stop'! Here's my latest (true) test:
 
from twisted.application import service
from twisted.internet import reactor
class SimpleService(service.Service):
    def startService(self):
        service.Service.startService(self)
        print '>>>start'
    def stopService(self):
        print '>>>stop'
        service.Service.stopService(self)
        
from twisted.application import service
from twisted.internet import reactor
import simpleService
application = service.Application('testServer')
serviceCollection=service.IServiceCollection(application)
ss=simpleService.SimpleService()
ss.setServiceParent(serviceCollection)
reactor.stop()

C:\other\Bill\compstrm\compstrm\twbsd>twistd -noy testService.py
2004/05/21 19:45 India Standard Time [-] Log opened.
2004/05/21 19:45 India Standard Time [-] twistd 1.2.0 (C:\Python23\python.exe 2.
3.3) starting up
2004/05/21 19:45 India Standard Time [-] reactor class: twisted.internet.default
.SelectReactor
2004/05/21 19:45 India Standard Time [-] >>>start
2004/05/21 19:45 India Standard Time [-] Main loop terminated.
2004/05/21 19:45 India Standard Time [-] Server Shut Down.
C:\other\Bill\compstrm\compstrm\twbsd>
 
Is this an NT200 problem???
 
;-(
 


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040521/fcc60f32/attachment.htm 

From radix at twistedmatrix.com  Fri May 21 10:27:13 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 21 May 2004 10:27:13 -0400
Subject: [Twisted-Python] still no stop!
In-Reply-To: <20040521142008.94249.qmail@web8308.mail.in.yahoo.com>
References: <20040521142008.94249.qmail@web8308.mail.in.yahoo.com>
Message-ID: <40AE11C1.1030509@twistedmatrix.com>

Bill la Forge wrote:
> I've uninstalled twisted and re-installed.
>  
> Still no 'stop'! Here's my latest (true) test:
>  
> from twisted.application import service
> from twisted.internet import reactor
> class SimpleService(service.Service):
>     def startService(self):
>         service.Service.startService(self)
>         print '>>>start'
>     def stopService(self):
>         print '>>>stop'
>         service.Service.stopService(self)
>        
> from twisted.application import service
> from twisted.internet import reactor
> import simpleService
> application = service.Application('testServer')
> serviceCollection=service.IServiceCollection(application)
> ss=simpleService.SimpleService()
> ss.setServiceParent(serviceCollection)
> reactor.stop()

Get rid of 'reactor.stop()'. I expect you misunderstood when exactly the 
.tac file is being executed; it happens before the reactor is started, 
so you're trying to stop the reactor before it starts, which is screwing 
things up. Just get rid of the reactor.stop(), run it as you were and 
hit ctrl-C; it works then.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040521/ce9b6086/attachment.pgp 

From itamar at itamarst.org  Fri May 21 10:26:53 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 21 May 2004 10:26:53 -0400
Subject: [Twisted-Python] still no stop!
In-Reply-To: <20040521142008.94249.qmail@web8308.mail.in.yahoo.com>
References: <20040521142008.94249.qmail@web8308.mail.in.yahoo.com>
Message-ID: <1085149613.9644.25.camel@sheriffpony>

On Fri, 2004-05-21 at 10:20, Bill la Forge wrote:

> ss=simpleService.SimpleService()
> ss.setServiceParent(serviceCollection)
> reactor.stop()

Don't do reactor.stop() inside a .tac. A .tac runs *before* event loop
starts, so you are essentially stopping event loop before it starts,
which can lead to broken behaviour.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From laforge49 at yahoo.co.in  Fri May 21 10:40:14 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Fri, 21 May 2004 15:40:14 +0100 (BST)
Subject: [Twisted-Python] still no stop!
In-Reply-To: <1085149613.9644.25.camel@sheriffpony>
Message-ID: <20040521144014.60750.qmail@web8309.mail.in.yahoo.com>

Thanks folks!
 
I spent half a day writing a server wrapper for bsdb config and quit, as
I needed a better understanding of twisted.
 
Then I spend half a day fooling around with this, starting with finger,
making and fixing a whole series of dumb-bunny mistakes.
 
Now that I have a minimal working server, its a snap to build it up,
XP style.
 
One thing that I've got to puzzle out is failed startup is a server family.
What's the best way to cleanup when some server children succeed
and then one fails? (Case in point, some databases open, but then
one fails to open, possibly due to a configuration error.)
 
Just throw in the towel and do a restore next time round? Raise an
exception (I think this is wrong)? Call reactor.stop() and cleanup 
during shutdown?
 
Bill

Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
Don't do reactor.stop() inside a .tac. A .tac runs *before* event loop
starts, so you are essentially stopping event loop before it starts,
which can lead to broken behaviour.

-- 
Itamar Shtull-Trauring http://itamarst.org

Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040521/a160d15f/attachment.htm 

From laforge49 at yahoo.co.in  Fri May 21 10:44:28 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Fri, 21 May 2004 15:44:28 +0100 (BST)
Subject: [Twisted-Python] still no stop!
In-Reply-To: <1085149613.9644.25.camel@sheriffpony>
Message-ID: <20040521144428.11889.qmail@web8310.mail.in.yahoo.com>


Gosh, I got to get my terms right. When I said server, I meant to say 

service. I have a minimal working service. I am dealing with issues 

regarding a family of services (one env parent service and with the dbs as 

child services). How to cleanup the successful services when one failed.


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040521/14583170/attachment.htm 

From corydodt at twistedmatrix.com  Fri May 21 11:23:55 2004
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Fri, 21 May 2004 08:23:55 -0700
Subject: [Twisted-Python] Win32 files uploaded
Message-ID: <40AE1F0B.6070104@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On http://twistedmatrix.com/products/download

Please note that these files have a version string that is inconsistent with
the tarballs on the same page.  The win32 files will report version "1.3.0"
(which is correct).  Some of the other files will say "1.3.0rc1" (which is not).

A new release is coming shortly to fix this discrepancy.  Thanks for your
patience.

C
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3-nr1 (Windows 2000)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFArh8L3A5SrXAiHQcRAt53AKCGbzsMCL2EJ0CMrPIF9LkoZtpKWwCgkm12
AhtrvUwzb1tCJTBMSSpIII4=
=yQyw
-----END PGP SIGNATURE-----



From laforge49 at yahoo.co.in  Fri May 21 12:12:18 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Fri, 21 May 2004 17:12:18 +0100 (BST)
Subject: [Twisted-Python] service takedown (one newbie to other newbies,
	methinks)
Message-ID: <20040521161218.43943.qmail@web8304.mail.in.yahoo.com>

If a service starts successfully, once initialization completes 
successfully, it's stopService will be called for proper cleanup.
 
However, if another service fails to successfully initialize, and it
is kind enough to call reactor.stop() rather than throw an exception,
then the first service can, at the end of its initialization, call
reactor.addSystemEventTrigger('before','shutdown',self.failedStartup),
then failedStartup() will be called and there is STILL a chance to
cleanup.
 
Here's the code, the script, and the twistd output:
 
from twisted.application import service
from twisted.internet import reactor
class SimpleService(service.Service):
    def startService(self):
        service.Service.startService(self)
        reactor.addSystemEventTrigger('before','shutdown',self.failedStartup)
        print '>>>start'
    def stopService(self):
        print '>>>stop'
        service.Service.stopService(self)
    def failedStartup(self):
        print 'Oh!!!!!!!!!!!!!!!!!!!!!'
        
class FailService(service.Service):
    def startService(self):
        reactor.stop()

from twisted.application import service
from twisted.internet import reactor
import simpleService
application = service.Application('testServer')
serviceCollection=service.IServiceCollection(application)
ss=simpleService.SimpleService()
ss.setServiceParent(serviceCollection)
fs=simpleService.FailService()
fs.setServiceParent(serviceCollection)

C:\other\Bill\compstrm\compstrm\twbsd>twistd -noy testService.py
2004/05/21 21:39 India Standard Time [-] Log opened.
2004/05/21 21:39 India Standard Time [-] twistd 1.2.0 (C:\Python23\python.exe 2.
3.3) starting up
2004/05/21 21:39 India Standard Time [-] reactor class: twisted.internet.default
.SelectReactor
2004/05/21 21:39 India Standard Time [-] >>>start
2004/05/21 21:39 India Standard Time [-] Oh!!!!!!!!!!!!!!!!!!!!!
2004/05/21 21:39 India Standard Time [-] Main loop terminated.
2004/05/21 21:39 India Standard Time [-] Server Shut Down.
C:\other\Bill\compstrm\compstrm\twbsd>


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040521/f61c4ff4/attachment.htm 

From itamar at itamarst.org  Fri May 21 12:18:42 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 21 May 2004 12:18:42 -0400
Subject: [Twisted-Python] service takedown (one newbie to other
	newbies, methinks)
In-Reply-To: <20040521161218.43943.qmail@web8304.mail.in.yahoo.com>
References: <20040521161218.43943.qmail@web8304.mail.in.yahoo.com>
Message-ID: <1085156322.9943.8.camel@sheriffpony>

On Fri, 2004-05-21 at 12:12, Bill la Forge wrote:

> However, if another service fails to successfully initialize, and it
> is kind enough to call reactor.stop() rather than throw an exception,

Obviously you should not do that then.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From exarkun at divmod.com  Fri May 21 12:56:48 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 21 May 2004 12:56:48 -0400
Subject: [Twisted-Python] service takedown (one newbie to other newbies,
	methinks)
In-Reply-To: <20040521161218.43943.qmail@web8304.mail.in.yahoo.com>
References: <20040521161218.43943.qmail@web8304.mail.in.yahoo.com>
Message-ID: <40AE34D0.7090606@divmod.com>

Bill la Forge wrote:
> If a service starts successfully, once initialization completes
> successfully, it's stopService will be called for proper cleanup.
>  
> However, if another service fails to successfully initialize, and it
> is kind enough to call reactor.stop() rather than throw an exception,
> then the first service can, at the end of its initialization, call
> reactor.addSystemEventTrigger('before','shutdown',self.failedStartup),
> then failedStartup() will be called and there is STILL a chance to
> cleanup.
>  

   I think a better solution would be to write an IServiceCollection 
(MultiService subclass, probably) that knows how to deal with exceptions 
raised from child services' startService methods.

   The idea is the same, but the framework gets to handle more of the 
redundant boilerplate (untested):

     class BlahMultiService(MultiService):
         def startService(self):
             self.running = True
             started = []
             for svc in self:
                 try:
                     svc.startService()
                 except:
                     err = Failure()
                     for svc in started[::-1]:
                         try:
                             svc.stopService()
                         except:
                             log.err()
                     self.startupHadError(err)

                 else:
                     started.append(svc)

         def startupHadError(self, failure):
             # Could raise an exception here, or log it, or
             # shut down the reactor, or whatever is appropriate

   Jp



From laforge49 at yahoo.co.in  Fri May 21 20:47:56 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Sat, 22 May 2004 01:47:56 +0100 (BST)
Subject: [Twisted-Python] service takedown (one newbie to other newbies,
	methinks)
In-Reply-To: <40AE34D0.7090606@divmod.com>
Message-ID: <20040522004756.64941.qmail@web8310.mail.in.yahoo.com>

Jp,
 
If I write a generic service, even a MultiService, for use in multiple
applications (as is my intent), then there is still a possibility that
some other service, specific to a particular application, or an unrelated 
generic service, may fail to initialize. So the need to capture the 
shutdown event remins.
 
Bill

Jp Calderone <exarkun at divmod.com> wrote:
I think a better solution would be to write an IServiceCollection 
(MultiService subclass, probably) that knows how to deal with exceptions 
raised from child services' startService methods.


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040522/78c8ade7/attachment.htm 

From glyph at divmod.com  Fri May 21 21:50:31 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Fri, 21 May 2004 21:50:31 -0400
Subject: [Twisted-Python] service takedown (one newbie to other
	newbies, methinks)
In-Reply-To: <20040522004756.64941.qmail@web8310.mail.in.yahoo.com>
References: <20040522004756.64941.qmail@web8310.mail.in.yahoo.com>
Message-ID: <1085190630.3258.106.camel@kazekage>

On Fri, 2004-05-21 at 20:47, Bill la Forge wrote:

> If I write a generic service, even a MultiService, for use in multiple
> applications (as is my intent), then there is still a possibility that
> some other service, specific to a particular application, or an
> unrelated 
> generic service, may fail to initialize. So the need to capture the 
> shutdown event remins.

Bill,

I appreciate your questions on these shutdown issues, since I think we
do still have a few semantic issues to nail down regarding startup and
shutdown.  However, I do think it's worth mentioning that you should
never depend too heavily on shutdown code if you are interested in
reliability: servers do crash, and machines do lose power, so a "clean"
shutdown should always be a convenience and not a necessity.

(A more serious issue that we need to address is making sure that you
can _attempt_ to bring up a new service inside an already running
reactor, fail to bring it up, and not interrupt existing,
already-running services or alter their state in some way; or, that you
can bring it up and bring it down with the same results.)




From laforge49 at yahoo.co.in  Fri May 21 22:07:54 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Sat, 22 May 2004 03:07:54 +0100 (BST)
Subject: [Twisted-Python] service takedown (one newbie to other newbies,
	methinks)
In-Reply-To: <1085190630.3258.106.camel@kazekage>
Message-ID: <20040522020754.8347.qmail@web8302.mail.in.yahoo.com>

Glyph,
 
You hit the nail square on on both points.
 
1. Things happen. In reviewing bsddb, I find that its gennerally 
recommended to run recover as part of the startup process.
This makes clean shutdowns a bit less critical. But still, I'm
thinking it should be attempted.
 
2. Sometimes services need to be shut down without taking down
Twisted. This is especially important if Twisted is also going to
provide an administration interface, as some administration activities
may be easier when the base service is off-line.
 
3. Support of non-critical service failure? A service may sometimes be
critical and othertimes not. Sounds like a configuration issue that
would be nice to standardize at some point. But perhaps the best
solution would be to leave it up to something else, perhaps a service
monitor service, which can decide when its not worth keeping Twisted
running, or perhaps putting it into a "I'm dead except for administration
services" mode.
 
One conclusion here is that perhaps a service should never say die
(er, stop). Its always better to separate a smart service from the smarts
needed to manage that service--a service should rarely be coupled to the
management logic.
 
Bill

Glyph Lefkowitz <glyph at divmod.com> wrote:
On Fri, 2004-05-21 at 20:47, Bill la Forge wrote:

> If I write a generic service, even a MultiService, for use in multiple
> applications (as is my intent), then there is still a possibility that
> some other service, specific to a particular application, or an
> unrelated 
> generic service, may fail to initialize. So the need to capture the 
> shutdown event remins.

Bill,

I appreciate your questions on these shutdown issues, since I think we
do still have a few semantic issues to nail down regarding startup and
shutdown. However, I do think it's worth mentioning that you should
never depend too heavily on shutdown code if you are interested in
reliability: servers do crash, and machines do lose power, so a "clean"
shutdown should always be a convenience and not a necessity.

(A more serious issue that we need to address is making sure that you
can _attempt_ to bring up a new service inside an already running
reactor, fail to bring it up, and not interrupt existing,
already-running services or alter their state in some way; or, that you
can bring it up and bring it down with the same results.)


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040522/0ab5507d/attachment.htm 

From laforge49 at yahoo.co.in  Sat May 22 01:33:36 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Sat, 22 May 2004 06:33:36 +0100 (BST)
Subject: [Twisted-Python] delay 0 patch for 1.3 base.py
Message-ID: <20040522053336.88506.qmail@web8310.mail.in.yahoo.com>

Here's the patch for callLater with delay of 0,
but now for 1.3. (Nice to see the windows installer
is now available!)

Again, I've tested it, but Twisted regression tests
remain to be done.

Again, I consign copyrights to Glyph.

Again, I'll update http://compstrm.sourceforge.net
as soon as I hear word that the regression tests
have succeeded. (I STILL have my fingers crossed!)



=====
Bill la Forge
http://www.geocities.com/laforge49/

________________________________________________________________________
Yahoo! India Matrimony: Find your partner online. http://yahoo.shaadi.com/india-matrimony/
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: delay0patch.txt
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040522/d6ddd5e1/attachment.txt 

From laforge49 at yahoo.co.in  Sat May 22 04:58:29 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Sat, 22 May 2004 09:58:29 +0100 (BST)
Subject: [Twisted-Python] service takedown (one newbie to other newbies,
	methinks)
In-Reply-To: <40AE34D0.7090606@divmod.com>
Message-ID: <20040522085829.66996.qmail@web8311.mail.in.yahoo.com>

One problem with BlahMultiService is that a service 
may need to defer on the stopService, though it seems
reasonable to expect an immediate return when
canceling
a service when startup has not yet completed.

So I'm adding a method--cancelService--which requires
an immediate return.

Another issue, I'm duplicating the code from 
twisted.application.internet._VolatileDataService,
because of the leading '_'. ;-(

Anyway, here's what I've come up with... --b

# moderately tested, minimally configurable
class TieredService(service.MultiService):
    def __init__(self,stopOnStartFailure=False):
        service.MultiService.__init__(self)
        self.stopOnStartFailure=stopOnStartFailure
    def __getstate__(self):
        d = service.Service.__getstate__(self)
        for attr in self.volatile:
            if d.has_key(attr):
                del d[attr]
        return d
    volitile=['shutdownTrigger','started']
    def startService(self):
        self.started=[]
        for service in self:
            try:
                service.startService()
            except:
                self.cancelService()
                return
            else:
                self.started.append(service)
       
self.shutdownTrigger=reactor.addSystemEventTrigger('before','shutdown',self.cancelService)
        reactor.callWhenRunning(self.nowRunning)
        service.Service.startService(self)
    def nowRunning(self):
       
reactor.removeSystemEventTrigger(self.shutdownTrigger)
        self.shutdownTrigger=None
        self.servicesStarted=None
    def cancelService(self):
        service.Service.stopService(self)
        for svc in self.started[::-1]:
            svc.cancelService()
        if self.stopOnStartFailure:
            reactor.stop()



--- Jp Calderone <exarkun at divmod.com> wrote:
>    I think a better solution would be to write an
> IServiceCollection 
> (MultiService subclass, probably) that knows how to
> deal with exceptions 
> raised from child services' startService methods.
> 
>    The idea is the same, but the framework gets to
> handle more of the 
> redundant boilerplate (untested):
> 
>      class BlahMultiService(MultiService):
>          def startService(self):
>              self.running = True
>              started = []
>              for svc in self:
>                  try:
>                      svc.startService()
>                  except:
>                      err = Failure()
>                      for svc in started[::-1]:
>                          try:
>                              svc.stopService()
>                          except:
>                              log.err()
>                      self.startupHadError(err)
> 
>                  else:
>                      started.append(svc)
> 
>          def startupHadError(self, failure):
>              # Could raise an exception here, or log
> it, or
>              # shut down the reactor, or whatever is
> appropriate
> 
>    Jp


________________________________________________________________________
Yahoo! India Matrimony: Find your partner online. http://yahoo.shaadi.com/india-matrimony/



From laforge49 at yahoo.co.in  Sat May 22 05:15:50 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Sat, 22 May 2004 10:15:50 +0100 (BST)
Subject: [Twisted-Python] service takedown (one newbie to other newbies,
	methinks)
In-Reply-To: <20040522085829.66996.qmail@web8311.mail.in.yahoo.com>
Message-ID: <20040522091550.54246.qmail@web8303.mail.in.yahoo.com>

GrumpBrumpGrumpGrump

2 bug fixes and one repaired omission later...
I MIGHT just have something I can use to implement
bsddb services. ;-)))) --b

from twisted.application import service
from twisted.internet import reactor
from twisted.python import log

class TieredService(service.MultiService):
    def __init__(self,stopOnStartFailure=False):
        service.MultiService.__init__(self)
        self.stopOnStartFailure=stopOnStartFailure
    def __getstate__(self):
        d = service.Service.__getstate__(self)
        for attr in self.volatile:
            if d.has_key(attr):
                del d[attr]
        return d
    volitile=['shutdownTrigger','started']
    def startService(self):
        self.started=[]
        for svc in self:
            try:
                svc.startService()
            except:
                log.err()
                self.cancelService()
                return
            else:
                self.started.append(svc)
        self.shutdownTrigger=reactor \
            .addSystemEventTrigger(
               
'before','shutdown',self.cancelService)
        reactor.callWhenRunning(self.nowRunning)
        service.Service.startService(self)
    def nowRunning(self):
        reactor.removeSystemEventTrigger(
            self.shutdownTrigger)
        self.shutdownTrigger=None
        self.started=None
    def cancelService(self):
        service.Service.stopService(self)
        for svc in self.started[::-1]:
            svc.cancelService()
        if self.stopOnStartFailure:
            reactor.stop()


=====
Bill la Forge
http://www.geocities.com/laforge49/

________________________________________________________________________
Yahoo! India Matrimony: Find your partner online. http://yahoo.shaadi.com/india-matrimony/



From laforge49 at yahoo.co.in  Sat May 22 06:58:04 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Sat, 22 May 2004 11:58:04 +0100 (BST)
Subject: [Twisted-Python] service takedown (one newbie to other newbies,
	methinks)
In-Reply-To: <20040522091550.54246.qmail@web8303.mail.in.yahoo.com>
Message-ID: <20040522105804.68857.qmail@web8303.mail.in.yahoo.com>

OK, I've got a better test environment for Tiered,
and found yet another bug. ;-)

I've also done a bit of refactoring. A terminology
change, actually. When the TieredService is started,
it initializes subordinate services. It only starts 
them when the reactor is actually running.

The idea is that its easy to immediately cancel
a service which is initialized, but not yet actively
being used. And I'm thinking (feedback requested!),
once a service is started, it is fair game to go
ahead and use it. Thus the delay in starting
subordinate services until the need for cancelation
is truely past.

Bill

from twisted.application import service
from twisted.internet import reactor
from twisted.python import log

class SubordinateService(service.Service):
    def __getstate__(self):
        d = service.Service.__getstate__(self)
        for attr in self.volatile:
            if d.has_key(attr):
                del d[attr]
        return d
    volatile=[]
    def initService(self):
        """
        Initialize the service, prior to starting.
        """
    def cancelService(self):
        """
        Immediate cancelation of the subordinate
service
        which has been initialized but not started.
        """

class TieredService(service.MultiService):
    """
    Subordinate services should raise an
    exception when unable to init.
    """
    def __init__(self,stopOnStartFailure=False):
        service.MultiService.__init__(self)
        self.stopOnStartFailure=stopOnStartFailure
    def __getstate__(self):
        d = service.Service.__getstate__(self)
        for attr in self.volatile:
            if d.has_key(attr):
                del d[attr]
        return d
    volatile=['shutdownTrigger','initialized']
    def startService(self):
        self.initialized=[]
        for svc in self:
            try:
                svc.initService()
            except:
                log.err()
                self._cancelService()
                return
            else:
                self.initialized.append(svc)
        self.shutdownTrigger=reactor \
            .addSystemEventTrigger(
                'before',
                'shutdown',
                self._cancelService)
        reactor.callWhenRunning(self._nowRunning)
        service.Service.startService(self)
    def _cancelService(self):
        """
        Immediate cancelation of the
        subordinate service(s).
        """
        service.Service.stopService(self)
        for svc in self.initialized[::-1]:
            svc.cancelService()
        if self.stopOnStartFailure:
            reactor.stop()
    def _nowRunning(self):
        reactor.removeSystemEventTrigger(
            self.shutdownTrigger)
        self.shutdownTrigger=None
        self.initialized=None
        service.MultiService.startService(self)


________________________________________________________________________
Yahoo! India Matrimony: Find your partner online. http://yahoo.shaadi.com/india-matrimony/



From dripton at ripton.net  Sat May 22 18:32:43 2004
From: dripton at ripton.net (David Ripton)
Date: Sat, 22 May 2004 18:32:43 -0400
Subject: [Twisted-Python] pb.Copyable, round trip objects,	and untrusted
	clients
In-Reply-To: <Pine.LNX.4.53.0405210012100.15434@a.shell.peak.org>
References: <40AC2C0F.40300@ripton.net>	<Pine.LNX.4.53.0405200204510.7527@a.shell.peak.org>	<20040521044512.GA28968@vidar.dreamhost.com>
	<Pine.LNX.4.53.0405210012100.15434@a.shell.peak.org>
Message-ID: <40AFD50B.9060704@ripton.net>

Jasper Phillips wrote:
> On Thu, 20 May 2004, David Ripton wrote:
> 
> 
>>On 2004.05.20 02:25:20 +0000, Jasper Phillips wrote:

> I used to write Java code for a living;  I came to hate it's shortcomings
> and IMHO Python is purely superior.  Still, was Titan really 50k lines of
> Java?!  Mind boggling.

We have way too many chrome features, and the code is far from minimal. 
    (There's a lot of duplication between client and server, for 
example.)  A tighter and still reasonably complete implementation could 
be done in 10k LOC in Java.  I think 5k LOC in Python is a reasonable 
target.

> I'm treating event history as game state, although I haven't implemented it
> yet.  Not so much for the AIs use, but to model it's effects on future
> events.  IMHO treating it as game state is also a simpler model.

So future events depend on the exact sequence of events used to reach 
the current state, not just the current state?  That sounds expensive.

>>>IMHO handling this can avoid the 3rd problem you mention.  I have
>>>Players send Actions for a given Turn as the only API to change Game
>>>State.  These actions don't take game object as args, but rather Ids as
>>>you suggest below.
>>
>>I'm now back to wanting to do that in both directions.  Except using
>>strings instead of object IDs, since the parallel objects on the client 
>>and server will be distinct.  (But they will use the same class, which
>>is key to maintainability.  When you find yourself writing ClientGame
>>and ServerGame, scream until the urge passes, then decouple the concept
>>from its context until the need is gone.)
> 
> 
> IMHO this seems overly complex.  I don't like maintaining parallel objects
> or parallel calculation, as it smells like ClientGame/ServerGame...

The problem with the separate ClientGame / ServerGame classes is that 
once you allow the big classes on each side to get coupled to their 
location, the small classes start coupling to those big classes, and 
pretty soon you have two slightly divergent copies of most of the code 
in the game, and double maintenance.

Having separate *objects* of the same classes on the two sides is fine, 
though.  In fact, in a game with hidden information, it's inevitable. 
The server Game object will hold the full state, and each client's Game 
object will hold a subset.  This is true whether the server sends 
censored copies of its state to clients, or whether it sends them 
subsets of the full event stream and lets clients generate their own 
censored copies.

>>I want to make it symmetrical, so I want to build the client-side model
>>objects using the action stream, rather than copying them directly.  It
>>will be painfully boring, but I don't have *that* many actions, and
>>they're fully documented from last time I decided to go this way.
> 
> 
> Why?  I see no advantage to symmetry here.  IMHO the a trusted-server / 
> untrusted-client asymetrical design is clearly called for.

It is a trusted server and untrusted client.  But the trust is expressed 
by which events each can see.  Symmetry just means less code, because 
things work the same both ways.  I don't think it's necessary, but I do 
think it's good if you can get it.

> I disagree that sending objects isn't practical, IMHO it just helps to
> approach it slightly differently.  I'll try to explain what I mean by
> roughly describing my game as an example;  if my design is crappy please feel
> free to shoot holes in it! :-)
> 
> Much of my game's logic is based upon Copyable Actions which are used by
> both Server and Client, e.g. MoveAction.  These have a .__call__(state)
> which modifies the passed state as they see fit, as well as a
> .validate(state) to ensure a move is legal.  Players create a list of such
> Actions, and pass them to the Game server as their turn.  

Standard command pattern, but cleaner in Python because of __call__.

Do your turns have phases, requiring certain actions to occur at certain 
times?

Can other players interrupt your turn with actions, or are their replies 
(e.g. strikebacks to your attacks) completely automated or deferred 
until their turns?

> All the args for
> Action are literals (such as Unit ids and movement direction), with Actions
> knowing how to find the corresponding objects on passed in State.
> 
> With only literal args these Action objects can be passed safely to the
> game, which will reconstitue it's own versions, validate them, then invoke
> them by passing in it's True State.  Players are given their own PlayerState
> view of TrueState each turn, with real (copies of) objects they can use for
> display, UI and validation.

It seems that only sending game state updates once per turn would reduce 
interactivity too much.  I want to see my opponents' (visible) moves as 
they happen, not batched up at the end of his turn.  Beware of 
sequential solitaire.

PlayerState / TrueState sounds like the ClientGame / ServerGame problem 
I was warning about.  It's not necessarily bad if they have the same 
interface and PlayerState just has a subset of the data, but look out 
for duplicate code.

> Basically it works like passing objects both ways, except it's safe.  The
> costs are minor: referenceable objects must have Ids, Clients must create
> Actions with 'object.id' instead of 'object', and Actions need to either
> 'object = state.getObject(objectId)' or use Game/State methods taking ids
> for args.

I agree that passing handles instead of references definitely works 
better.  I find that an unfortunate limitation of current PB, though not 
a major one since (as Christopher Armstrong pointed out) the amount of 
code needed to convert back and forth each time is small.

> IMHO Making all of this essentially part of the API is cleaner than having
> bulk "Reconsitute Objects" methods.

Yes.  Having direct support in PB for the idea of const (copy this 
object when I send it, but ignore any changes that were made to it on 
the other side if I get it back), so that you don't have to do any of 
this, would be even cleaner.  I don't know if there's much demand for 
this feature from other people, though.

Anyway, I'm looking forward to seeing your game at some point.

-- 
David Ripton     dripton at ripton.net



From soso_pub at yahoo.com  Sat May 22 18:46:24 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Sat, 22 May 2004 15:46:24 -0700 (PDT)
Subject: [Twisted-Python] Need cacheable help
Message-ID: <20040522224624.59301.qmail@web14803.mail.yahoo.com>

Hi all,

I plan to use heavily Cacheables in my client-server
application and I bumped into a problem. 
On the server side I have a Cacheable object which
internally uses a database module and on the client
side an equivalent RemoteCache which uses wxPython.
But in order to obtain a remote reference I have to
call setUnjellyableForClass on this two classes which
in turn requires that when this call is made the
classes have to be imported and the modules that they
use also imported. 
This basically means that now I have to make available
wxPython for server distribution and the database
module for client distribution though I don't use
them.
One solution would be build another layer on top of
these classes and this layer should deal with wxPython
and database module but would it be another possibilty
to overcome this problem? Any sugestion is
appreciated.

Thanks,
Sorin




	
		
__________________________________
Do you Yahoo!?
Yahoo! Domains ? Claim yours for only $14.70/year
http://smallbusiness.promotions.yahoo.com/offer 



From jasper at peak.org  Sun May 23 00:36:42 2004
From: jasper at peak.org (Jasper Phillips)
Date: Sat, 22 May 2004 21:36:42 -0700 (PDT)
Subject: [Twisted-Python] pb.Copyable, round trip objects,	and untrusted
	clients
In-Reply-To: <40AFD50B.9060704@ripton.net>
References: <40AC2C0F.40300@ripton.net>
	<Pine.LNX.4.53.0405200204510.7527@a.shell.peak.org>
	<20040521044512.GA28968@vidar.dreamhost.com>
	<Pine.LNX.4.53.0405210012100.15434@a.shell.peak.org>
	<40AFD50B.9060704@ripton.net>
Message-ID: <Pine.LNX.4.53.0405222047320.22984@a.shell.peak.org>


On Sat, 22 May 2004, David Ripton wrote:

> Jasper Phillips wrote:
> 
> > I'm treating event history as game state, although I haven't implemented it
> > yet.  Not so much for the AIs use, but to model it's effects on future
> > events.  IMHO treating it as game state is also a simpler model.
> 
> So future events depend on the exact sequence of events used to reach 
> the current state, not just the current state?  That sounds expensive.

Well, in theory they could, but in practice they can depend upon simpler
things, such as if two nations have ever been at war, how long ago was the
war, and how was it resolved.  I'm considering filtering past events and
Just storing those aspects that events switch on in a condensed format; e.g.
storing time since last war instead of whether there was war for each turn.

However, even this simpler approach is fairly complex, and is a prime target
for the feature axe...


> > IMHO this seems overly complex.  I don't like maintaining parallel objects
> > or parallel calculation, as it smells like ClientGame/ServerGame...

[snip]
> Having separate *objects* of the same classes on the two sides is fine, 
> though.  In fact, in a game with hidden information, it's inevitable. 
> The server Game object will hold the full state, and each client's Game 
> object will hold a subset.  This is true whether the server sends 
> censored copies of its state to clients, or whether it sends them 
> subsets of the full event stream and lets clients generate their own 
> censored copies.

True, so long as they're the same objects.  I still don't like
reconstructing them in parallel.  It seems error prone when combined with
hidden state, and doesn't allow for outcomes based upon hidden state
(although this is not a problem for Titan).


> > I disagree that sending objects isn't practical, IMHO it just helps to
> > approach it slightly differently.  I'll try to explain what I mean by
> > roughly describing my game as an example;  if my design is crappy please
> > feel free to shoot holes in it! :-)
> > 
> > Much of my game's logic is based upon Copyable Actions which are used by
> > both Server and Client, e.g. MoveAction.  These have a .__call__(state)
> > which modifies the passed state as they see fit, as well as a
> > .validate(state) to ensure a move is legal.  Players create a list of such
> > Actions, and pass them to the Game server as their turn.  
> 
> Standard command pattern, but cleaner in Python because of __call__.
> 
> Do your turns have phases, requiring certain actions to occur at certain 
> times?

There is a distinct sequence of events, with certain types of actions being
resolved before others.  This is handled by a TurnTask, who's job it is to
run all the Actions, and resolved conflicts between them.  It embodies the
customary phase order of boardgames.

> Can other players interrupt your turn with actions, or are their replies 
> (e.g. strikebacks to your attacks) completely automated or deferred 
> until their turns?

My game has simultaneous turns, classical Diplomacy style.  There are some
twists that allow reactions, but these are simultaneous as well.

> > With only literal args these Action objects can be passed safely to the
> > game, which will reconstitue it's own versions, validate them, then
> > invoke them by passing in it's True State.  Players are given their own
> > PlayerState view of TrueState each turn, with real (copies of) objects
> > they can use for display, UI and validation.
> 
> It seems that only sending game state updates once per turn would reduce 
> interactivity too much.  I want to see my opponents' (visible) moves as 
> they happen, not batched up at the end of his turn.  Beware of 
> sequential solitaire.

This is just a matter of semantics.  A Turn in my engine can be whatever you
want, for example each of a players moves in Titan could be a "Turn", with
updated state passed to all players after each one.  I prototyped the
Boardgame Binfa, which worked just like this.

> PlayerState / TrueState sounds like the ClientGame / ServerGame problem 
> I was warning about.  It's not necessarily bad if they have the same 
> interface and PlayerState just has a subset of the data, but look out 
> for duplicate code.

PlayerState is just a subset of TrueState, but with methods for determining
just what subset.  Methods that accept one accept the other, most notably
Action.validate().


> > IMHO Making all of this essentially part of the API is cleaner than having
> > bulk "Reconsitute Objects" methods.
> 
> Yes.  Having direct support in PB for the idea of const (copy this 
> object when I send it, but ignore any changes that were made to it on 
> the other side if I get it back), so that you don't have to do any of 
> this, would be even cleaner.  I don't know if there's much demand for 
> this feature from other people, though.

I suspect the mechanism necessary to specify the key field for these "const"
objects and where to find them would be as complex as just having clients
reference them by id, yet perhaps less clear.


> Anyway, I'm looking forward to seeing your game at some point.

I've got most of the core work done along with much of the game mechanics
and GUI, but not much game specific content.  I'll be done some time next
year, hopefully earlier than later.  When I have enough to start contracting
artists I'll start a website and stick it in my .sig, probably sometime in
the next several months.

I'm pondering LGPL'ing the underlying game framework (based on Twisted and
Pyui) at this time as well, although this is a fair amount of hassle and I'm
not sure anyone's interested.

-Jasper




From andrew at ellerton.net  Sun May 23 14:24:37 2004
From: andrew at ellerton.net (Ellers)
Date: Sun, 23 May 2004 20:24:37 +0200
Subject: [Twisted-Python] example stdin handling client that supports
	readline?
Message-ID: <opr8gtfbh3fpwr4c@mail.ellerton.net>

Dear All,
I'd like to write a command-line shell-like interface to an in-house database service we have.

The DB service provides a socket-based API with messages like

	0001-SQL-select * from customer|

(where | is a 0x00 char)

The server responds with messages likt

	0001-SQL-name|age|otherfields||Fred|23|etc

I've got the basics going OK.
And in a separate script I've got a basic shell-like program going, complete with readline support.

It looks a bit like:

	mysh$ select * from customer
	[would send select statement now]
	mysh$

etc

Question: how do I integrate stdin or command-driven input into the client code?

That is, because the server reactor object has control of the process, I don't see how I get read input from stdin?

I notice that there is a class

	twisted.internet.stdio.StandardIO

that provides a file descriptor wrapper around stdin etc.

This looks good, but I'm not sure how to connect this with the cool readline functionality, which seems to block and take care of all handling of stdin?

Is there an example of this sort of script out there?
I'm *sure* this sort of thing has been done 100 times before!

Thanks for any tips :)
Ellers



From daniel at nextwindow.net  Sun May 23 18:23:24 2004
From: daniel at nextwindow.net (Daniel Newton)
Date: Mon, 24 May 2004 10:23:24 +1200
Subject: [Twisted-Python] How do you get clients ip addys with xmlrpc
Message-ID: <40B1245C.6080507@nextwindow.net>

Some gave me this snippet of code:

/class Example(xmlrpc.XMLRPC):
//     """An example object to be published."""//
/
     def xmlrpc_whatIsMyAddress(self):
         return self.transport.getPeer().host
/ 
// if __name__ == '__main__':
//     from twisted.internet import reactor
//     r = Example()
//     reactor.listenTCP(7080, server.Site(r))
//     reactor.run()/

but it doesnt work ("Example instance has no attribute 'transport'")
the transport attribute is not there.. so where is it???






From andrew-twisted at puzzling.org  Sun May 23 18:59:22 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 24 May 2004 08:59:22 +1000
Subject: [Twisted-Python] example stdin handling client that supports
	readline?
In-Reply-To: <opr8gtfbh3fpwr4c@mail.ellerton.net>
References: <opr8gtfbh3fpwr4c@mail.ellerton.net>
Message-ID: <20040523225922.GB1081@frobozz>

On Sun, May 23, 2004 at 08:24:37PM +0200, Ellers wrote:
[...]
> I notice that there is a class
> 
> 	twisted.internet.stdio.StandardIO
> 
> that provides a file descriptor wrapper around stdin etc.
> 
> This looks good, but I'm not sure how to connect this with the cool 
> readline functionality, which seems to block and take care of all handling 
> of stdin?

I'm not aware of anyone using readline with Twisted.  A couple of options
spring to mind:
    - use curses (see doc/examples/cursesclient.py for an example of using
      curses in Twisted) to make your own readline-like functionality
    - run readline in a thread, and get it to call
      reactor.callFromThread(something.gotStdinLine, ...) everytime a user
      hits enter.
    - just write a GUI interface, and forget readline ;)

-Andrew.




From laforge49 at yahoo.co.in  Sun May 23 22:07:52 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Mon, 24 May 2004 03:07:52 +0100 (BST)
Subject: [Twisted-Python] example stdin handling client that supports
	readline?
In-Reply-To: <20040523225922.GB1081@frobozz>
Message-ID: <20040524020752.98980.qmail@web8311.mail.in.yahoo.com>

 --- Andrew Bennetts <andrew-twisted at puzzling.org>
wrote: 
> I'm not aware of anyone using readline with Twisted.

Well, the second example on 
http://compstrm.sourceforge.net/thread.html
comes close, as it uses raw_input.

Bill

=====
Bill la Forge
http://www.geocities.com/laforge49/

________________________________________________________________________
Yahoo! India Matrimony: Find your partner online. http://yahoo.shaadi.com/india-matrimony/



From andrew-twisted at puzzling.org  Sun May 23 22:15:50 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 24 May 2004 12:15:50 +1000
Subject: [Twisted-Python] example stdin handling client that supports
	readline?
In-Reply-To: <20040524020752.98980.qmail@web8311.mail.in.yahoo.com>
References: <20040523225922.GB1081@frobozz>
	<20040524020752.98980.qmail@web8311.mail.in.yahoo.com>
Message-ID: <20040524021550.GD1081@frobozz>

On Mon, May 24, 2004 at 03:07:52AM +0100, Bill la Forge wrote:
>  --- Andrew Bennetts <andrew-twisted at puzzling.org>
> wrote: 
> > I'm not aware of anyone using readline with Twisted.
> 
> Well, the second example on 
> http://compstrm.sourceforge.net/thread.html
> comes close, as it uses raw_input.

Right -- and it does it by running raw_input in a thread, which was one of
my suggestions :)

-Andrew.




From june at digicell.co.kr  Mon May 24 00:03:02 2004
From: june at digicell.co.kr (June Jae-jun Kang)
Date: Mon, 24 May 2004 13:03:02 +0900
Subject: [Twisted-Python] Can I benefit from multi-processor hardware?
Message-ID: <NS1BNaWlql9mji60d4Z0000000a@ns1>

Our current Windows server, written thoroughly in C++, 

is spawning a few threads in order to benefit from multi-processor hardware.

Coz our app logic is not so flexible, now we consider moving to Twisted.

Can we still benefit from multi-processor hardware with Twisted's basic
event-driven architecture?

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040524/b7018a36/attachment.htm 

From pje at telecommunity.com  Mon May 24 00:56:38 2004
From: pje at telecommunity.com (Phillip J. Eby)
Date: Mon, 24 May 2004 00:56:38 -0400
Subject: [Twisted-Python] Can I benefit from multi-processor
  hardware?
In-Reply-To: <NS1BNaWlql9mji60d4Z0000000a@ns1>
Message-ID: <5.1.1.6.0.20040524005206.01ebad00@mail.telecommunity.com>

At 01:03 PM 5/24/04 +0900, June Jae-jun Kang wrote:

>Can we still benefit from multi-processor hardware with Twisted s basic 
>event-driven architecture?

Only if you use multiple processes.  The Python interpreter has a global 
lock that's used to protect potentially shared data structures, so this 
inhibits multi-processor execution of pure Python code.  Portions of a 
Python program that are written in C or C++ can be free-threaded, but if 
you are doing code that's pure Python, you'll need multiple processes.

So, to take advantage of multi-processor hardware, you can do your 
calculation-intensive work in separate processes, with the network 
communications being handled by an event-driven front end.  Note that this 
is basically true for *any* Python program, not just Twisted.




From andrew-twisted at puzzling.org  Mon May 24 01:14:59 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 24 May 2004 15:14:59 +1000
Subject: [Twisted-Python] Can I benefit from multi-processor hardware?
In-Reply-To: <5.1.1.6.0.20040524005206.01ebad00@mail.telecommunity.com>
References: <NS1BNaWlql9mji60d4Z0000000a@ns1>
	<5.1.1.6.0.20040524005206.01ebad00@mail.telecommunity.com>
Message-ID: <20040524051459.GG1081@frobozz>

On Mon, May 24, 2004 at 12:56:38AM -0400, Phillip J. Eby wrote:
[...]
> 
> So, to take advantage of multi-processor hardware, you can do your 
> calculation-intensive work in separate processes, with the network 
> communications being handled by an event-driven front end.  Note that this 
> is basically true for *any* Python program, not just Twisted.

Or, potentially, inside free-threaded C or C++ extensions... it depends on
the situation.

I wrote a Twisted server on Windows that replaced a C++ one quite
comfortably, partly due to much of the work being talking to an SQL
database, which you can do in threads easily (see the twisted.enterprise
package), while handling the networking with Twisted.

-Andrew.




From mwh at python.net  Mon May 24 06:51:44 2004
From: mwh at python.net (Michael Hudson)
Date: Mon, 24 May 2004 11:51:44 +0100
Subject: [Twisted-Python] Re: example stdin handling client that supports
	readline?
References: <opr8gtfbh3fpwr4c@mail.ellerton.net>
	<20040523225922.GB1081@frobozz>
Message-ID: <2m1xlat7wf.fsf@starship.python.net>

Andrew Bennetts <andrew-twisted at puzzling.org> writes:

> On Sun, May 23, 2004 at 08:24:37PM +0200, Ellers wrote:
> [...]
>> I notice that there is a class
>> 
>> 	twisted.internet.stdio.StandardIO
>> 
>> that provides a file descriptor wrapper around stdin etc.
>> 
>> This looks good, but I'm not sure how to connect this with the cool 
>> readline functionality, which seems to block and take care of all handling 
>> of stdin?
>
> I'm not aware of anyone using readline with Twisted.  A couple of options
> spring to mind:
>     - use curses (see doc/examples/cursesclient.py for an example of using
>       curses in Twisted) to make your own readline-like functionality
>     - run readline in a thread, and get it to call
>       reactor.callFromThread(something.gotStdinLine, ...) everytime a user
>       hits enter.
>     - just write a GUI interface, and forget readline ;)

4) check out pyrepl from CVS and help me debug the currently rather
   hackish twisted support :-)

http://codespeak.net/pyrepl

Cheers,
mwh

-- 
  I'm not particularly fond of singing GSTQ because she stands for
  some things I don't, but it's not really worth letting politics
  getting in the way of a good bawling.     -- Dan Sheppard, ucam.chat




From radix at twistedmatrix.com  Mon May 24 07:06:22 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 24 May 2004 07:06:22 -0400
Subject: [Twisted-Python] Re: example stdin handling client that supports
	readline?
In-Reply-To: <2m1xlat7wf.fsf@starship.python.net>
References: <opr8gtfbh3fpwr4c@mail.ellerton.net>	<20040523225922.GB1081@frobozz>
	<2m1xlat7wf.fsf@starship.python.net>
Message-ID: <40B1D72E.1080901@twistedmatrix.com>

Michael Hudson wrote:
> Andrew Bennetts <andrew-twisted at puzzling.org> writes:

>>I'm not aware of anyone using readline with Twisted.  A couple of options
>>spring to mind:
>>    - use curses (see doc/examples/cursesclient.py for an example of using
>>      curses in Twisted) to make your own readline-like functionality
>>    - run readline in a thread, and get it to call
>>      reactor.callFromThread(something.gotStdinLine, ...) everytime a user
>>      hits enter.
>>    - just write a GUI interface, and forget readline ;)
> 
> 
> 4) check out pyrepl from CVS and help me debug the currently rather
>    hackish twisted support :-)
> 
> http://codespeak.net/pyrepl


Heeey, pyrepl is really cool... :-)

radix at radii ~/Projects/pyrepl/pyrepl% python python_reader.py

->> import sys; print sys.modules['twisted.internet.reactor']
<twisted.internet.default.SelectReactor instance at 0x40352e0c>
# woot, twisted's already being used :-)
->> from twisted.internet import reactor
->> from twisted.python.util import println
->> reactor.callLater(1, println, "\nhi!")
<twisted.internet.base.DelayedCall instance at 0x40522aac>
->>
     hi!

-- output there seems to do some weird stuff with whitespace, but 
anyway, this is pretty cool :-)



-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040524/31efa170/attachment.pgp 

From mwh at python.net  Mon May 24 08:13:32 2004
From: mwh at python.net (Michael Hudson)
Date: Mon, 24 May 2004 13:13:32 +0100
Subject: [Twisted-Python] Re: example stdin handling client that supports
	readline?
References: <opr8gtfbh3fpwr4c@mail.ellerton.net>
	<20040523225922.GB1081@frobozz>
	<2m1xlat7wf.fsf@starship.python.net>
	<40B1D72E.1080901@twistedmatrix.com>
Message-ID: <2mu0y6rpjn.fsf@starship.python.net>

Christopher Armstrong <radix at twistedmatrix.com> writes:

> Michael Hudson wrote:
>> Andrew Bennetts <andrew-twisted at puzzling.org> writes:
>
>>>I'm not aware of anyone using readline with Twisted.  A couple of options
>>>spring to mind:
>>>    - use curses (see doc/examples/cursesclient.py for an example of using
>>>      curses in Twisted) to make your own readline-like functionality
>>>    - run readline in a thread, and get it to call
>>>      reactor.callFromThread(something.gotStdinLine, ...) everytime a user
>>>      hits enter.
>>>    - just write a GUI interface, and forget readline ;)
>> 4) check out pyrepl from CVS and help me debug the currently rather
>>    hackish twisted support :-)
>> http://codespeak.net/pyrepl
>
>
> Heeey, pyrepl is really cool... :-)

Thanks :-)

It's also scary.  I was just saying on IRC:

<mwh> there are bits of code in pyrepl that make me go
<mwh> "i wrote this code?  wow.  i wonder how it works?"

This is mostly the low-level terminal manipulation stuff.

> radix at radii ~/Projects/pyrepl/pyrepl% python python_reader.py
>
> ->> import sys; print sys.modules['twisted.internet.reactor']
> <twisted.internet.default.SelectReactor instance at 0x40352e0c>
> # woot, twisted's already being used :-)
> ->> from twisted.internet import reactor
> ->> from twisted.python.util import println
> ->> reactor.callLater(1, println, "\nhi!")
> <twisted.internet.base.DelayedCall instance at 0x40522aac>
> ->>
>      hi!
>
> -- output there seems to do some weird stuff with whitespace, but
>    anyway, this is pretty cool :-)

Well, yeah, you're writing to the terminal when it's in raw mode.
pyrepl gets upset (cosmetically) when you do that.  Tracebacks are
really, really ugly...

Cheers,
mwh

-- 
  I hate leaving Windows95 boxes publically accessible, so shifting
  even to NT is a blessing in some ways.  At least I can reboot them
  remotely in a sane manner, rather than having to send them malformed
  packets.      -- http://bofhcam.org/journal/journal.html, 20/06/2000




From pp64 at codelock.com  Mon May 24 11:03:30 2004
From: pp64 at codelock.com (Pavel Pergamenshchik)
Date: Mon, 24 May 2004 11:03:30 -0400
Subject: [Twisted-Python] Can I benefit from multi-processor hardware?
In-Reply-To: <NS1BNaWlql9mji60d4Z0000000a@ns1>
References: <NS1BNaWlql9mji60d4Z0000000a@ns1>
Message-ID: <20040524110330.2252f95c@dunce>

On Mon, 24 May 2004 13:03:02 +0900
"June Jae-jun Kang" <june at digicell.co.kr> wrote:

> Our current Windows server, written thoroughly in C++, 
> 
> is spawning a few threads in order to benefit from multi-processor hardware.
> 
> Coz our app logic is not so flexible, now we consider moving to Twisted.
> 
> Can we still benefit from multi-processor hardware with Twisted's basic
> event-driven architecture?

Well, iocpreactor, which uses IO completion ports, could be extended to use a threadpool (running C code exclusively) to handle IO events. I am not sure whether that will give a performance gain, though, because the main thread might still be a bottleneck.
In any case, give iocpreactor a try. It is currently the only way for Twisted to scale up on Windows. It's a bit immature, so if you see anything weird, yell at me.



From itamar at itamarst.org  Mon May 24 11:05:15 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 24 May 2004 11:05:15 -0400
Subject: [Twisted-Python] *bsd buildbots, thanks to win32 buildbot people
Message-ID: <1085411115.9944.49.camel@sheriffpony>

Who runs these? and could you please install subversion?

Many thanks to "bear" and Cory for getting win32 buildbot going, and to
Pavel and Cory for fixing Win32 tests.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From E.A.M.Huijbers at student.tue.nl  Mon May 24 11:10:09 2004
From: E.A.M.Huijbers at student.tue.nl (E.A.M. Huijbers)
Date: Mon, 24 May 2004 17:10:09 +0200
Subject: [Twisted-Python] Writing a Jabber client
Message-ID: <40B21051.2050703@student.tue.nl>

Hi all,

I'm having trouble writing a Jabber client with Twisted. I came across a 
simple sample[0], and tried to build out from it, but for some reason 
it's barely working.

When I run the application in the attached script, the logon goes fine, 
and I can receive messages sent to the account, but it never seems to 
receive subscription requests. When I ran it on an account that already 
had some items on the contact list, I did receive <presence> messages to 
indcate that a user changed status, but I don't receive <presence 
type="subscribe"> messages...

Ultimately, I tacked a "/*" handler on to the code to see if I was 
receiving any packets at all, but the only thing that seems to trigger 
anything are messages.

This is very frustrating for me. Is it a problem with the code, or am I 
missing something in the Jabber protocol?

Any help would be greatly appreciated.

- Rico

P.S: Please don't mind the code, I know it's a bit (a lot) hackish right 
now, but my first step is to get it running. I'll make it beautiful 
afterwards ;) .

[0] http://randomthoughts.vandorp.ca/WK/blog/706?t=item

##### code starts here #####

from twisted.protocols.jabber import client, jid
from twisted.protocols import xmlstream
from twisted.xish import domish

from twisted.internet import reactor

name = 'Foo'
server='bar.com'
resource = 'PythonBot'
password = 'foobar'
me = '%s@%s/%s' % (name, server, resource)

thexmlstream = None
tryandregister = 1

def initOnline(xmlstream):
    global factory
    print 'Initializing...'
    xmlstream.addObserver('/message', gotMessage)
    xmlstream.addObserver('/presence', gotPresence)
    xmlstream.addObserver('/iq', gotIq)
    xmlstream.addObserver('/*', gotSomething)

def authd(xmlstream):
    thexmlstream = xmlstream
    print "we've authd!"
    print repr(xmlstream)

    #need to send presence so clients know we're
    #actually online
    presence = domish.Element(('jabber:client', 'presence'))
    presence.addElement('status').addContent('Online')
    xmlstream.send(presence)

    initOnline(xmlstream)

def gotMessage(el):
    print 'Got message: %s' % str(el.attributes)

def gotSomething(el):
    print 'Got something: %s -> %s' % (el.name, str(el.attributes))

def gotIq(el):
    print 'Got IQ: %s' % str(el.attributes)

def gotPresence(el):
    print 'We got a presence message!'
    print repr(el.attributes)
    try:
        t = el.attributes['type']
        if t == 'subscribe':
            # Grant every subscription request
            xmlstream.send(domish.Element(('jabber:client', 'presence'), 
attribs={
                'from': me,
                'to':el.attributes['from'],
                'type':'subscribed'
            }))
    except KeyError:
        # Big fat ignore
        pass

def invaliduserEvent(xmlstream):
    print 'Invalid user!'
    global tryandregister
    if tryandregister:
        tryandregister = 0
        print 'Attempting to register...'
        global factory
        factory.authenticator.registerAccount(name, password)
    else:
        global reactor
        reactor.stop()

def authfailedEvent(xmlstream):
    global reactor
    print 'Auth failed!'
    reactor.stop()

def registerfailedEvent(xmlstream):
    global reactor
    print 'Register failed!'
    reactor.stop()

myJid = jid.JID(me)
secret = password
factory = client.basicClientFactory(myJid,secret)

# Register authentication callbacks
factory.addBootstrap(xmlstream.STREAM_AUTHD_EVENT, authd)
factory.addBootstrap(client.BasicAuthenticator.INVALID_USER_EVENT, 
invaliduserEvent)
factory.addBootstrap(client.BasicAuthenticator.AUTH_FAILED_EVENT, 
authfailedEvent)
factory.addBootstrap(client.BasicAuthenticator.REGISTER_FAILED_EVENT, 
registerfailedEvent)

# Go!
reactor.connectTCP(server, 5222, factory)
reactor.run()



From andrew-twisted at puzzling.org  Mon May 24 11:41:12 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 25 May 2004 01:41:12 +1000
Subject: [Twisted-Python] *bsd buildbots, thanks to win32 buildbot people
In-Reply-To: <1085411115.9944.49.camel@sheriffpony>
References: <1085411115.9944.49.camel@sheriffpony>
Message-ID: <20040524154112.GL1081@frobozz>

On Mon, May 24, 2004 at 11:05:15AM -0400, Itamar Shtull-Trauring wrote:
[...]
> 
> Many thanks to "bear" and Cory for getting win32 buildbot going, and to
> Pavel and Cory for fixing Win32 tests.

Yes, thanks!  Seeing the win32 tests all passing in the buildbot was a nice
surprise -- it's good to see people are looking after various platforms.
Kudos to the win32 guys.

-Andrew.




From kevin at praxsys.com  Mon May 24 13:14:37 2004
From: kevin at praxsys.com (Kevin Koym)
Date: Mon, 24 May 2004 12:14:37 -0500
Subject: [Twisted-Python] twisted enterprise versus other OR tools
In-Reply-To: <20040524154112.GL1081@frobozz>
References: <1085411115.9944.49.camel@sheriffpony>
	<20040524154112.GL1081@frobozz>
Message-ID: <40B22D7D.3010704@praxsys.com>

I have been recently looking at Twisted Enterprise.  I am wondering-

Is there any other object /relational persistence mechanisms that are 
closer to
- php's propel http://propel.phpdb.org/
- apache's torque

I like the idea of having a lighter weight system, which it seems that 
twisted's enterprise provides, but I miss not having some of the 
modeling capabilities of these other tools vis a vis twisted 
enterprise.  I am wondering what is planned for its future, or perhaps, 
given my newness to python, perhaps I am looking at the wrong tool for 
object persistance into relational databases?  Are there others that are 
used on a higher end for lots more classes?  Given that the Java world 
has so many of these tools for object - relational mapping (versus 
pulling rows out of tables separate of business objects), I expect that 
there is another in the python world that I have missed (whether it is 
twisted.enterprise or otherwise).

Any thoughts appreciated.

Thanks,
Kevin

PS my bias is towards Apple's (formerly NeXT's) enterprise objects.  If 
you have a suggestion that hits close to it, please let me know.


-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3170 bytes
Desc: S/MIME Cryptographic Signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040524/bd4bb5c4/attachment.bin 

From developer at csrules.dyndns.org  Mon May 24 19:07:06 2004
From: developer at csrules.dyndns.org (darryl)
Date: Mon, 24 May 2004 16:07:06 -0700
Subject: [Twisted-Python] Writing a Jabber client
In-Reply-To: <40B21051.2050703@student.tue.nl>
References: <40B21051.2050703@student.tue.nl>
Message-ID: <40B2801A.9060707@csrules.dyndns.org>

E.A.M. Huijbers wrote:

> Hi all,
>
> I'm having trouble writing a Jabber client with Twisted. I came across 
> a simple sample[0], and tried to build out from it, but for some 
> reason it's barely working.
>
> When I run the application in the attached script, the logon goes 
> fine, and I can receive messages sent to the account, but it never 
> seems to receive subscription requests. When I ran it on an account 
> that already had some items on the contact list, I did receive 
> <presence> messages to indcate that a user changed status, but I don't 
> receive <presence type="subscribe"> messages...



That sample code is mine. I never played with subscriptions really but 
after trying it out right now it appears that it's not working :(

I don't know why yet, but i'll try and figure it out. We definately can 
receive normal presence messages but don't seem to see subscription 
requests....

Doesn't make sense at first blush.

-darryl

-- 
http://randomthoughts.vandorp.ca/WK/blog




From developer at csrules.dyndns.org  Mon May 24 19:56:22 2004
From: developer at csrules.dyndns.org (darryl)
Date: Mon, 24 May 2004 16:56:22 -0700
Subject: [Twisted-Python] Writing a Jabber client
In-Reply-To: <40B2801A.9060707@csrules.dyndns.org>
References: <40B21051.2050703@student.tue.nl>
	<40B2801A.9060707@csrules.dyndns.org>
Message-ID: <40B28BA6.5050908@csrules.dyndns.org>

darryl wrote:

> E.A.M. Huijbers wrote:
>
>> Hi all,
>>
>> I'm having trouble writing a Jabber client with Twisted. I came 
>> across a simple sample[0], and tried to build out from it, but for 
>> some reason it's barely working.
>>
>> When I run the application in the attached script, the logon goes 
>> fine, and I can receive messages sent to the account, but it never 
>> seems to receive subscription requests. When I ran it on an account 
>> that already had some items on the contact list, I did receive 
>> <presence> messages to indcate that a user changed status, but I 
>> don't receive <presence type="subscribe"> messages...
>
>
>
>
> That sample code is mine. I never played with subscriptions really but 
> after trying it out right now it appears that it's not working :(
>
> I don't know why yet, but i'll try and figure it out. We definately 
> can receive normal presence messages but don't seem to see 
> subscription requests....
>
> Doesn't make sense at first blush.
>
> -darryl
>
When in doubt read the protocol docs i guess:


7.3 Retrieving One's Roster on Login

   Upon connecting to the server and sending available presence, a
   client SHOULD request the roster before sending initial presence
   (however, because receiving the roster may not be desirable for all
   resources, e.g., a connection with limited bandwidth, the client's
   request for the roster is OPTIONAL).  If an available resource does
   not request the roster during a session, the server MUST NOT send it
   presence subscriptions and associated roster updates.  If an
   unavailable resource requests the roster, the server SHOULD return an
   <unexpected-request/> error to the resource.

Source:http://www.jabber.org/ietf/draft-ietf-xmpp-im-22.txt

So from reading this it appears unless you request a roster push when 
you login you will not recieve subscription requests.

-- 
http://randomthoughts.vandorp.ca/WK/blog




From E.A.M.Huijbers at student.tue.nl  Mon May 24 19:04:40 2004
From: E.A.M.Huijbers at student.tue.nl (E.A.M. Huijbers)
Date: Tue, 25 May 2004 01:04:40 +0200
Subject: [Twisted-Python] Writing a Jabber client
In-Reply-To: <40B28BA6.5050908@csrules.dyndns.org>
References: <40B21051.2050703@student.tue.nl>	<40B2801A.9060707@csrules.dyndns.org>
	<40B28BA6.5050908@csrules.dyndns.org>
Message-ID: <40B27F88.4080801@student.tue.nl>

darryl wrote:

> darryl wrote:
>
>> E.A.M. Huijbers wrote:
>>
>>> Hi all,
>>>
>>> I'm having trouble writing a Jabber client with Twisted. I came 
>>> across a simple sample[0], and tried to build out from it, but for 
>>> some reason it's barely working.
>>>
>>> When I run the application in the attached script, the logon goes 
>>> fine, and I can receive messages sent to the account, but it never 
>>> seems to receive subscription requests. When I ran it on an account 
>>> that already had some items on the contact list, I did receive 
>>> <presence> messages to indcate that a user changed status, but I 
>>> don't receive <presence type="subscribe"> messages...
>>
>>
>>
>>
>>
>> That sample code is mine. I never played with subscriptions really 
>> but after trying it out right now it appears that it's not working :(
>>
>> I don't know why yet, but i'll try and figure it out. We definately 
>> can receive normal presence messages but don't seem to see 
>> subscription requests....
>>
>> Doesn't make sense at first blush.
>>
>> -darryl
>>
> When in doubt read the protocol docs i guess:
>
>
> 7.3 Retrieving One's Roster on Login
>
>   Upon connecting to the server and sending available presence, a
>   client SHOULD request the roster before sending initial presence
>   (however, because receiving the roster may not be desirable for all
>   resources, e.g., a connection with limited bandwidth, the client's
>   request for the roster is OPTIONAL).  If an available resource does
>   not request the roster during a session, the server MUST NOT send it
>   presence subscriptions and associated roster updates.  If an
>   unavailable resource requests the roster, the server SHOULD return an
>   <unexpected-request/> error to the resource.
>
> Source:http://www.jabber.org/ietf/draft-ietf-xmpp-im-22.txt
>
> So from reading this it appears unless you request a roster push when 
> you login you will not recieve subscription requests.

That seems doesn't seem quite logical -- since I'm writing a bot, I 
don't want to see the roster myself, but I do want to grant subscription 
requests.
But it does explain why things are happening the way they are -- thanks!

Regards,
Rico




From dave at krondo.com  Mon May 24 23:14:24 2004
From: dave at krondo.com (Dave Peticolas)
Date: Mon, 24 May 2004 20:14:24 -0700
Subject: [Twisted-Python] twisted enterprise versus other OR tools
In-Reply-To: <40B22D7D.3010704@praxsys.com>
References: <1085411115.9944.49.camel@sheriffpony>
	<20040524154112.GL1081@frobozz>  <40B22D7D.3010704@praxsys.com>
Message-ID: <1085454864.1388.97.camel@oneiros>

On Mon, 2004-05-24 at 10:14, Kevin Koym wrote:
> I have been recently looking at Twisted Enterprise.  I am wondering-
> 
> Is there any other object /relational persistence mechanisms that are 
> closer to
> - php's propel http://propel.phpdb.org/
> - apache's torque
> 
> I like the idea of having a lighter weight system, which it seems that 
> twisted's enterprise provides, but I miss not having some of the 
> modeling capabilities of these other tools vis a vis twisted 
> enterprise.  I am wondering what is planned for its future, or perhaps, 
> given my newness to python, perhaps I am looking at the wrong tool for 
> object persistance into relational databases?  Are there others that are 
> used on a higher end for lots more classes?  Given that the Java world 
> has so many of these tools for object - relational mapping (versus 
> pulling rows out of tables separate of business objects), I expect that 
> there is another in the python world that I have missed (whether it is 
> twisted.enterprise or otherwise).
> 
> Any thoughts appreciated.
> 
> Thanks,
> Kevin
> 
> PS my bias is towards Apple's (formerly NeXT's) enterprise objects.  If 
> you have a suggestion that hits close to it, please let me know.

There are no current plans for expanding twisted.enterprise
(I am the current maintainer), but that doesn't mean the
possibility is closed off. However, have you looked at PEAK?
While not yet stable, it does seem to be aiming to support a
fuller relational-object mapping.

dave





From alex-news at comcast.net  Tue May 25 02:19:13 2004
From: alex-news at comcast.net (Alexander May)
Date: Tue, 25 May 2004 02:19:13 -0400
Subject: [Twisted-Python] Nevow and twisted.enterprise and deferreds
Message-ID: <E1BSVHb-0006ZA-00@pyramid.twistedmatrix.com>

I am using nevow and twisted enterprise and have a situation like this:

dbPool = adbapi.ConnectionPool('myDB')
...
class MyPage(rend.Page):
    ...
    def data_mydata(self, context, data):
        return dbPool.runQuery("select * from table")

    def render_myrender(self, context, data):
        ...

Happily, and a bit unexpectedly, it worked and the page rendered correctly.

My issue is if the sql statement fails for some reason the page rendering
just hangs.  Is there an endorsed way to capture the error and render some
html from it?  Right now I'd be happy to see the call stack, as I often do
when an exception occurs.

I traced through the call stack and found this in renderer.py

def _error(failure):
    # FIXME: this should *definitely* do something better
    # doing this leaves the connection hanging, but it's better
    # than nothing.
    print "FAILURE !",failure 

It looks like the errback is just set to _error.  I don't know if there is a
way to work around this.  I attempted a few things with my own errbacks to
no avail.  I'm sure much of this is due to my less than perfect
understanding of deferreds, and my current bleary eyed state.

I could have sworn that I read something about defereds and nevow, but I
can't seem to find it anymore.

Any help is appreciated.

Thanks,
Alex

PS: I'm using nevow 0.1 and twisted 1.2.










From andrew at ellerton.net  Tue May 25 02:26:43 2004
From: andrew at ellerton.net (Ellers)
Date: Tue, 25 May 2004 08:26:43 +0200
Subject: [Twisted-Python] Re: example stdin handling client that supports
	readline?
In-Reply-To: <2mu0y6rpjn.fsf@starship.python.net>
References: <opr8gtfbh3fpwr4c@mail.ellerton.net>
	<20040523225922.GB1081@frobozz>
	<2m1xlat7wf.fsf@starship.python.net>
	<40B1D72E.1080901@twistedmatrix.com>
	<2mu0y6rpjn.fsf@starship.python.net>
Message-ID: <opr8jlitnqfpwr4c@mail.ellerton.net>

On Mon, 24 May 2004 13:13:32 +0100, Michael Hudson <mwh at python.net> wrote:

> Christopher Armstrong <radix at twistedmatrix.com> writes:
>
>> Michael Hudson wrote:
>>> Andrew Bennetts <andrew-twisted at puzzling.org> writes:
>>
>>>> <snip>
>>
>> -- output there seems to do some weird stuff with whitespace, but
>>    anyway, this is pretty cool :-)
>
> Well, yeah, you're writing to the terminal when it's in raw mode.
> pyrepl gets upset (cosmetically) when you do that.  Tracebacks are
> really, really ugly...
>

Thanks to all for their replies!
I've got some great options to try now.
It also confirmed that the readline library is usually (always?) invoked in a blocking way, and that a char-by-char alternative approach is needed and even mostly done!
I figured that shells like bash somehow use readline while allowing input to flow in from other sources (eg pipes in the background etc), and without looking at the bash source I figured it would be doing this with select, not multiple threads.
Many thanks everyone, I really appreciated all your comments!
Ellers



From radix at twistedmatrix.com  Tue May 25 05:26:49 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 25 May 2004 05:26:49 -0400
Subject: [Twisted-Python] Nevow and twisted.enterprise and deferreds
In-Reply-To: <E1BSVHb-0006ZA-00@pyramid.twistedmatrix.com>
References: <E1BSVHb-0006ZA-00@pyramid.twistedmatrix.com>
Message-ID: <40B31159.8080609@twistedmatrix.com>

Alexander May wrote:
> I am using nevow and twisted enterprise and have a situation like this:
> 
> dbPool = adbapi.ConnectionPool('myDB')
> ...
> class MyPage(rend.Page):
>     ...
>     def data_mydata(self, context, data):
>         return dbPool.runQuery("select * from table")


Add an errback to this Deferred that you're returning. 
d.addErrback(self._cbQueryError), and make that method return nevow data 
that can be rendered.

>     def render_myrender(self, context, data):
>         ...
> 
> Happily, and a bit unexpectedly, it worked and the page rendered correctly.
> 
> My issue is if the sql statement fails for some reason the page rendering
> just hangs.  Is there an endorsed way to capture the error and render some
> html from it?  Right now I'd be happy to see the call stack, as I often do
> when an exception occurs.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040525/7fa81bf3/attachment.pgp 

From bertrand.croq at freeskop.com  Tue May 25 08:44:57 2004
From: bertrand.croq at freeskop.com (Bertrand Croq)
Date: Tue, 25 May 2004 14:44:57 +0200
Subject: [Twisted-Python] Two fixes
Message-ID: <20040525124457.GA15598@groumph.croq.org>

Hi,
 I am currently using Twisted to write a web site, and I wanted the site
to be able to download updates from its subversion repository. Doing
this, I found a bug: HTTPFactory.log does not check for a logFile
attribute before using it

 Here is a patch that fixes the problem

Index: protocols/http.py
===================================================================
--- protocols/http.py   (revision 10776)
+++ protocols/http.py   (working copy)
@@ -1120,13 +1120,14 @@

     def log(self, request):
         """Log a request's result to the logfile, by default in combined log format."""
-        line = '%s - - %s "%s" %d %s "%s" "%s"\n' % (
-            request.getClientIP(),
-            # request.getUser() or "-", # the remote user is almost never important
-            _logDateTime,
-            '%s %s %s' % (request.method, request.uri, request.clientproto),
-            request.code,
-            request.sentLength or "-",
-            request.getHeader("referer") or "-",
-            request.getHeader("user-agent") or "-")
-        self.logFile.write(line)
+       if hasattr(self, "logFile"):
+            line = '%s - - %s "%s" %d %s "%s" "%s"\n' % (
+                request.getClientIP(),
+                # request.getUser() or "-", # the remote user is almost never important
+                _logDateTime,
+                '%s %s %s' % (request.method, request.uri, request.clientproto),
+                request.code,
+                request.sentLength or "-",
+                request.getHeader("referer") or "-",
+                request.getHeader("user-agent") or "-")
+            self.logFile.write(line)


-- 
Bertrand Croq
FreesKop - Avenue Robert Schuman - 35170 BRUZ - France
http://www.freeskop.com/



From itamar at itamarst.org  Tue May 25 09:32:03 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 25 May 2004 09:32:03 -0400
Subject: [Twisted-Python] Two fixes
In-Reply-To: <20040525124457.GA15598@groumph.croq.org>
References: <20040525124457.GA15598@groumph.croq.org>
Message-ID: <1085491922.9946.208.camel@sheriffpony>

Please add this to http://twistedmatrix.com/bugs/ and assign to jknight.




From alex-news at comcast.net  Tue May 25 09:49:58 2004
From: alex-news at comcast.net (Alexander May)
Date: Tue, 25 May 2004 09:49:58 -0400
Subject: [Twisted-Python] Nevow and twisted.enterprise and deferreds
In-Reply-To: <40B31159.8080609@twistedmatrix.com>
Message-ID: <E1BScJo-0001hd-00@pyramid.twistedmatrix.com>

I could have sworn that I tried that last night, but I guess I didn't since
it works.  Thanks.

Is there a way to have a different render method called in the error case?
If not, I can always conditionally branch in the render method.

Alex



-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Christopher
Armstrong
Sent: Tuesday, May 25, 2004 5:27 AM
To: Twisted discussion stuff
Subject: Re: [Twisted-Python] Nevow and twisted.enterprise and deferreds

Alexander May wrote:
> I am using nevow and twisted enterprise and have a situation like this:
> 
> dbPool = adbapi.ConnectionPool('myDB') ...
> class MyPage(rend.Page):
>     ...
>     def data_mydata(self, context, data):
>         return dbPool.runQuery("select * from table")


Add an errback to this Deferred that you're returning. 
d.addErrback(self._cbQueryError), and make that method return nevow data
that can be rendered.

>     def render_myrender(self, context, data):
>         ...
> 
> Happily, and a bit unexpectedly, it worked and the page rendered
correctly.
> 
> My issue is if the sql statement fails for some reason the page 
> rendering just hangs.  Is there an endorsed way to capture the error 
> and render some html from it?  Right now I'd be happy to see the call 
> stack, as I often do when an exception occurs.

--
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/




From alex-news at comcast.net  Tue May 25 10:22:09 2004
From: alex-news at comcast.net (Alexander May)
Date: Tue, 25 May 2004 10:22:09 -0400
Subject: [Twisted-Python] Nevow and twisted.enterprise and deferreds
In-Reply-To: <E1BScJo-0001hd-00@pyramid.twistedmatrix.com>
Message-ID: <E1BScox-0002dL-00@pyramid.twistedmatrix.com>

PS: And is there an easy way to nicely render the exception call stack as is
common through much of twisted?

Thanks again,
Alex

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Alexander May
Sent: Tuesday, May 25, 2004 9:50 AM
To: 'Twisted discussion stuff'
Subject: RE: [Twisted-Python] Nevow and twisted.enterprise and deferreds

I could have sworn that I tried that last night, but I guess I didn't since
it works.  Thanks.

Is there a way to have a different render method called in the error case?
If not, I can always conditionally branch in the render method.

Alex



-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Christopher
Armstrong
Sent: Tuesday, May 25, 2004 5:27 AM
To: Twisted discussion stuff
Subject: Re: [Twisted-Python] Nevow and twisted.enterprise and deferreds

Alexander May wrote:
> I am using nevow and twisted enterprise and have a situation like this:
> 
> dbPool = adbapi.ConnectionPool('myDB') ...
> class MyPage(rend.Page):
>     ...
>     def data_mydata(self, context, data):
>         return dbPool.runQuery("select * from table")


Add an errback to this Deferred that you're returning. 
d.addErrback(self._cbQueryError), and make that method return nevow data
that can be rendered.

>     def render_myrender(self, context, data):
>         ...
> 
> Happily, and a bit unexpectedly, it worked and the page rendered
correctly.
> 
> My issue is if the sql statement fails for some reason the page 
> rendering just hangs.  Is there an endorsed way to capture the error 
> and render some html from it?  Right now I'd be happy to see the call 
> stack, as I often do when an exception occurs.

--
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From dp at ulaluma.com  Tue May 25 11:12:04 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Tue, 25 May 2004 11:12:04 -0400
Subject: [Twisted-Python] Nevow and twisted.enterprise and deferreds
In-Reply-To: <E1BSVHb-0006ZA-00@pyramid.twistedmatrix.com>
References: <E1BSVHb-0006ZA-00@pyramid.twistedmatrix.com>
Message-ID: <E1AED463-AE5D-11D8-BC16-000A95864FC4@ulaluma.com>


On May 25, 2004, at 2:19 AM, Alexander May wrote:

> I traced through the call stack and found this in renderer.py
>
> def _error(failure):
>     # FIXME: this should *definitely* do something better
>     # doing this leaves the connection hanging, but it's better
>     # than nothing.
>     print "FAILURE !",failure

Apparently you are using Nevow 0.1. You should either upgrade to the 
recently-but-quietly released 0.2 
(http://www.divmod.org/Home/Downloads.html) or just check out the SVN 
HEAD (svn co svn://divmod.org/svn/Nevow/trunk Nevow)

The code you found is completely gone now, and is replaced with a much 
easier to understand rendering inner loop, and proper error rendering 
upon deferred errback.

The only reason 0.2 hasn't been announced is because I haven't had time 
to write a release announcement, but I guess the cat is out of the bag 
now.

dp




From alex-news at comcast.net  Tue May 25 11:33:32 2004
From: alex-news at comcast.net (Alexander May)
Date: Tue, 25 May 2004 11:33:32 -0400
Subject: [Twisted-Python] Nevow and twisted.enterprise and deferreds
In-Reply-To: <E1AED463-AE5D-11D8-BC16-000A95864FC4@ulaluma.com>
Message-ID: <E1BSdwM-000414-00@pyramid.twistedmatrix.com>

Wonderful!  I'll give it try shortly.

Thanks again,
Alex


-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Donovan
Preston
Sent: Tuesday, May 25, 2004 11:12 AM
To: Twisted discussion stuff
Subject: Re: [Twisted-Python] Nevow and twisted.enterprise and deferreds


On May 25, 2004, at 2:19 AM, Alexander May wrote:

> I traced through the call stack and found this in renderer.py
>
> def _error(failure):
>     # FIXME: this should *definitely* do something better
>     # doing this leaves the connection hanging, but it's better
>     # than nothing.
>     print "FAILURE !",failure

Apparently you are using Nevow 0.1. You should either upgrade to the
recently-but-quietly released 0.2
(http://www.divmod.org/Home/Downloads.html) or just check out the SVN HEAD
(svn co svn://divmod.org/svn/Nevow/trunk Nevow)

The code you found is completely gone now, and is replaced with a much
easier to understand rendering inner loop, and proper error rendering upon
deferred errback.

The only reason 0.2 hasn't been announced is because I haven't had time to
write a release announcement, but I guess the cat is out of the bag now.

dp


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From jkocherhans at mac.com  Tue May 25 11:58:23 2004
From: jkocherhans at mac.com (Joseph Kocherhans)
Date: Tue, 25 May 2004 09:58:23 -0600
Subject: [Twisted-Python] Re: twisted enterprise versus other OR tools
In-Reply-To: <40B22D7D.3010704@praxsys.com>
References: <1085411115.9944.49.camel@sheriffpony>	<20040524154112.GL1081@frobozz>
	<40B22D7D.3010704@praxsys.com>
Message-ID: <40B36D1F.1020308@mac.com>

I haven't used it myself, but I hear Modeling is supposed to be very 
similar to EOF. http://modeling.sourceforge.net/

These might also be helpful:
http://toulouse.amber.org/archives/2003/02/04/real_objectrelational_mapping_for_python.html
http://toulouse.amber.org/archives/2003/04/21/evaluating_objectrelational_migration.html

joseph

Kevin Koym wrote:
> I have been recently looking at Twisted Enterprise.  I am wondering-
> 
> Is there any other object /relational persistence mechanisms that are 
> closer to
> - php's propel http://propel.phpdb.org/
> - apache's torque
> 
> I like the idea of having a lighter weight system, which it seems that 
> twisted's enterprise provides, but I miss not having some of the 
> modeling capabilities of these other tools vis a vis twisted 
> enterprise.  I am wondering what is planned for its future, or perhaps, 
> given my newness to python, perhaps I am looking at the wrong tool for 
> object persistance into relational databases?  Are there others that are 
> used on a higher end for lots more classes?  Given that the Java world 
> has so many of these tools for object - relational mapping (versus 
> pulling rows out of tables separate of business objects), I expect that 
> there is another in the python world that I have missed (whether it is 
> twisted.enterprise or otherwise).
> 
> Any thoughts appreciated.
> 
> Thanks,
> Kevin
> 
> PS my bias is towards Apple's (formerly NeXT's) enterprise objects.  If 
> you have a suggestion that hits close to it, please let me know.
> 
> 
> 
> ------------------------------------------------------------------------
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From ANUJS at Amdocs.com  Tue May 25 05:12:43 2004
From: ANUJS at Amdocs.com (Anuj Seth)
Date: Tue, 25 May 2004 12:12:43 +0300
Subject: [Twisted-Python] Newbie question about writing a client
Message-ID: <C07050497CCE8E468DE912D1A8D25885117543@cypmail1srv.corp.amdocs.com>

Hi,
The echo client in doc/examples sends a  hardcoded string from the call back "connectionMade".
How can i change it to send any string produced by some other source ?
For e.g., if i want to let the user enter some string and then send it to the echo server and then print the result back.

Thanks for any pointers,
Anuj.
-------------- next part --------------
-------------------------------------------------------------------------------------

The information contained in this message is proprietary of Amdocs,

protected from disclosure, and may be privileged.

The information is intended to be conveyed only to the designated recipient(s)

of the message. If the reader of this message is not the intended recipient,

you are hereby notified that any dissemination, use, distribution or copying of 

this communication is strictly prohibited and may be unlawful. 

If you have received this communication in error, please notify us immediately

by replying to the message and deleting it from your computer.

Thank you.

---------------------------------------------------------

From michael.l.schneider at ugsplm.com  Tue May 25 13:23:04 2004
From: michael.l.schneider at ugsplm.com (Schneider, Michael)
Date: Tue, 25 May 2004 13:23:04 -0400
Subject: [Twisted-Python] Java question
Message-ID: <49199579A2BB32438A7572AF3DBB2FB505A21810@uscimplm001.net.plm.eds.com>

Hello All,

I am using twisted in a distributed app, and a portion of the system 
is in Java.

This may be a little off topic, but is there a package for
Java that provides any of:
	- reactors
	- deferred
	- Protocol Objects like twisted


You get used to a paradigm, and would like to stay with it
as you move between languages :-)

Thanks,
Mike

 
----------------------------------------------------------------
Michael Schneider
Senior Software Engineering Consultant
UGS PLM Solutions - an EDS Company
 
"The Greatest Performance Improvement Is the transitioning from a non-working state to the working state"



From itamar at itamarst.org  Tue May 25 13:28:44 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 25 May 2004 13:28:44 -0400
Subject: [Twisted-Python] Java question
In-Reply-To: <49199579A2BB32438A7572AF3DBB2FB505A21810@uscimplm001.net.plm.eds.com>
References: <49199579A2BB32438A7572AF3DBB2FB505A21810@uscimplm001.net.plm.eds.com>
Message-ID: <1085506124.9943.219.camel@sheriffpony>

On Tue, 2004-05-25 at 13:23, Schneider, Michael wrote:

> This may be a little off topic, but is there a package for
> Java that provides any of:
> 	- reactors
> 	- deferred
> 	- Protocol Objects like twisted

I started some work on improving EIO, originally written by Zooko. It
doesn't have a concept of Deferreds yet, and some of the APIs will no
doubt change, but it's a start.

http://java.twistedmatrix.com/eio/

-- 
Itamar Shtull-Trauring    http://itamarst.org





From kevin at praxsys.com  Tue May 25 13:37:38 2004
From: kevin at praxsys.com (Kevin Koym)
Date: Tue, 25 May 2004 12:37:38 -0500
Subject: [Twisted-Python] Re: twisted enterprise versus other OR tools
In-Reply-To: <40B36D1F.1020308@mac.com>
References: <1085411115.9944.49.camel@sheriffpony>	<20040524154112.GL1081@frobozz>	<40B22D7D.3010704@praxsys.com>
	<40B36D1F.1020308@mac.com>
Message-ID: <40B38462.3090402@praxsys.com>

Joseph,

All I can say is "yippie"!  Thank you for showing this to me.  Sounds 
like the author of this framework has a very similar background to 
mine.  I will check this out.

As well, thank you to Steve and Dave as well for the leads on this.  The 
more that I read and write in python, the more I enjoy it.

Thanks.
Kevin

Joseph Kocherhans wrote:

> I haven't used it myself, but I hear Modeling is supposed to be very 
> similar to EOF. http://modeling.sourceforge.net/
>
> These might also be helpful:
> http://toulouse.amber.org/archives/2003/02/04/real_objectrelational_mapping_for_python.html 
>
> http://toulouse.amber.org/archives/2003/04/21/evaluating_objectrelational_migration.html 
>
>
> joseph
>
> Kevin Koym wrote:
>
>> I have been recently looking at Twisted Enterprise.  I am wondering-
>>
>> Is there any other object /relational persistence mechanisms that are 
>> closer to
>> - php's propel http://propel.phpdb.org/
>> - apache's torque
>>
>> I like the idea of having a lighter weight system, which it seems 
>> that twisted's enterprise provides, but I miss not having some of the 
>> modeling capabilities of these other tools vis a vis twisted 
>> enterprise.  I am wondering what is planned for its future, or 
>> perhaps, given my newness to python, perhaps I am looking at the 
>> wrong tool for object persistance into relational databases?  Are 
>> there others that are used on a higher end for lots more classes?  
>> Given that the Java world has so many of these tools for object - 
>> relational mapping (versus pulling rows out of tables separate of 
>> business objects), I expect that there is another in the python world 
>> that I have missed (whether it is twisted.enterprise or otherwise).
>>
>> Any thoughts appreciated.
>>
>> Thanks,
>> Kevin
>>
>> PS my bias is towards Apple's (formerly NeXT's) enterprise objects.  
>> If you have a suggestion that hits close to it, please let me know.
>>
>>
>>
>> ------------------------------------------------------------------------
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

-- 
Kevin Koym

Innovation

kevin at praxsys.com
+1.512.698.9328 cell in US


-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3170 bytes
Desc: S/MIME Cryptographic Signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040525/11cf6c0a/attachment.bin 

From orbitz at ezabel.com  Tue May 25 14:02:25 2004
From: orbitz at ezabel.com (orbitz at ezabel.com)
Date: Tue, 25 May 2004 14:02:25 -0400
Subject: [Twisted-Python] Newbie question about writing a client
In-Reply-To: <C07050497CCE8E468DE912D1A8D25885117543@cypmail1srv.corp.amdocs.com>
References: <C07050497CCE8E468DE912D1A8D25885117543@cypmail1srv.corp.amdocs.com>
Message-ID: <20040525140225.56a2c523.orbitz@ezabel.com>

There are several ways. You can make the string global (probably not what you
want).  Or you can make it part of the Protocol class, and set it during the
buildProtocol method in yoru factory. Or make it part of your factory and have
the protocol use that.  To do the last you coudl do something like:

f = EchoFactory()
f.sayWhat = 'This is what I want to say'
reactor.connectTCP(..., f)

Then your protocol can do:
def connectionMade(..):
  self.transport.write(self.factor.sayWhat)

Hope that helps.


On Tue, 25 May 2004 12:12:43 +0300
"Anuj Seth" <ANUJS at Amdocs.com> wrote:

> Hi,
> The echo client in doc/examples sends a  hardcoded string from the call back
> "connectionMade". How can i change it to send any string produced by some
> other source ? For e.g., if i want to let the user enter some string and then
> send it to the echo server and then print the result back.
> 
> Thanks for any pointers,
> Anuj.



From glyph at divmod.com  Wed May 26 01:59:02 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 26 May 2004 01:59:02 -0400
Subject: [Twisted-Python] Java question
In-Reply-To: <1085506124.9943.219.camel@sheriffpony>
References: <49199579A2BB32438A7572AF3DBB2FB505A21810@uscimplm001.net.plm.eds.com>
	<1085506124.9943.219.camel@sheriffpony>
Message-ID: <1085551142.9027.5.camel@kazekage>

On Tue, 2004-05-25 at 13:28, Itamar Shtull-Trauring wrote:

> I started some work on improving EIO, originally written by Zooko. It
> doesn't have a concept of Deferreds yet, and some of the APIs will no
> doubt change, but it's a start.

Maybe it's obvious, but a suggestion:

public class DeferredCallback {
	public Object callback(Object result) {}
	public Object errback(Failure failure) {}
}

public class Deferred  {
	public Object defer(DeferredCallback dc) {...}
}

That way,

foo.doIt().defer(new DeferredCallback() { public Object callback(Object
result) {
  doneWithIt();
} public Object errback(Failure f) {
  whatTheHeck();
} };

I think that looks nice.  Might also want a
DeferredCallback.fromRunnable, etc.





From laforge49 at yahoo.co.in  Wed May 26 08:26:56 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Wed, 26 May 2004 13:26:56 +0100 (BST)
Subject: [Twisted-Python] (Un)Twisted Clients and Servers (newbie)
Message-ID: <20040526122656.49421.qmail@web8305.mail.in.yahoo.com>

Finally wrote my first Twisted-based client and
server:
http://compstrm.sourceforge.net/twcs/csprotocol.html

Both the client and server are implemented as light-
weight processes, where pipes are used for reading
and writing to remote processes. This allows the
logic flow to be more straight-line.

I'm also "translucently" switching threads in the
client, using in-line method calls, so that reads
and writes to the client do not block the main thread.

(I'm trying to show how much clearer asynchronous
programming can be using Computational Streams.)



=====
Bill la Forge
http://www.geocities.com/laforge49/

________________________________________________________________________
Yahoo! India Matrimony: Find your partner online. http://yahoo.shaadi.com/india-matrimony/



From bob at redivi.com  Wed May 26 09:55:22 2004
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 26 May 2004 09:55:22 -0400
Subject: [Twisted-Python] (Un)Twisted Clients and Servers (newbie)
In-Reply-To: <20040526122656.49421.qmail@web8305.mail.in.yahoo.com>
References: <20040526122656.49421.qmail@web8305.mail.in.yahoo.com>
Message-ID: <552CDE24-AF1C-11D8-9DC7-000A95686CD8@redivi.com>

On May 26, 2004, at 8:26 AM, Bill la Forge wrote:

> Finally wrote my first Twisted-based client and
> server:
> http://compstrm.sourceforge.net/twcs/csprotocol.html
>
> Both the client and server are implemented as light-
> weight processes, where pipes are used for reading
> and writing to remote processes. This allows the
> logic flow to be more straight-line.
>
> I'm also "translucently" switching threads in the
> client, using in-line method calls, so that reads
> and writes to the client do not block the main thread.
>
> (I'm trying to show how much clearer asynchronous
> programming can be using Computational Streams.)

You really need to take a look at Stackless Python.  It's a much better 
fit for the programming paradigm you want, and tasklet communication is 
WAY faster than thread communication in Python.  I also think that the 
Communicating Sequential Processes model is much nicer than your 
Computational Streams model.

As far as switching between "async" and 'blocking", why don't you just 
yield BlockingMode and yield AsyncMode?  That would kill two birds with 
one stone.  What's the difference between yielding True, False, and 
None (that is rhetorical, I read the implementation)?  Personally I 
think you should use useful names, even if they are just aliases for 
built-in python datatypes.  For example, the following lines are much 
more self-documenting:

yield Cooperate
yield Stop
yield BlockingMode
yield AsyncMode

When I did a framework very similar to but much more simple than yours, 
I also made it possible to integrate with Deferred (to block on it and 
resume on success/err, and also to return a deferred instead of a 
generator using a function wrapper).

Translucent thread migration isn't the greatest idea, sometimes you 
need to tie data structures to the a threadstate (for C level code.. 
something like database cursors, or whatever).  It's usually better to 
keep the same code on the same thread whenever possible.  But of 
course, it's better just to not use them at all unless you are calling 
some blocking C code, because it doesn't do anything for you with 
Python bytecode.

-bob
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 2357 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040526/8720e89e/attachment.bin 

From laforge49 at yahoo.co.in  Wed May 26 11:17:46 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Wed, 26 May 2004 16:17:46 +0100 (BST)
Subject: [Twisted-Python] (Un)Twisted Clients and Servers (newbie)
In-Reply-To: <552CDE24-AF1C-11D8-9DC7-000A95686CD8@redivi.com>
Message-ID: <20040526151746.78471.qmail@web8305.mail.in.yahoo.com>

Bob,

Thanks for the feedback. Is Zope3 stackless? Or did I
misread that somewhere?

The old unix model of processes/pipes keeps coming 
back up, it seems. Occum made good use of it, and I
understand stackless does too. I think its the
ultimate
component model.

Just a side note, bsddb apparently doesn't care which
thread you use, as long as its sequential. This 
apparently changed (at least in the docs) in 4.2
(which is included with Python 2.3). (And was pointed
out to me a few days ago on this list!)

I agree that Python, being already a high-level 
language, is likely not the best choice for layering
another programming model on top of. And stackless
looks like its a speed Phreek's dream. Where's the
documentation for Stackless, in the download? I'd
like to read more about it than what I can find on
the web site.

Anyway, I've picked my horse--Medusa--and I had 
intended to ride it for a while. But Twisted looked
far richer/active/maintained. Is the world really
ready for Stackless? It could be a far better world...

(It really wouldn't take much to get me over there,
but I really really need a lot of what's already 
part of Twisted!)

Bill

 --- Bob Ippolito <bob at redivi.com> wrote: > On May 26,
2004, at 8:26 AM, Bill la Forge wrote:
> 
> > Finally wrote my first Twisted-based client and
> > server:
> >
> http://compstrm.sourceforge.net/twcs/csprotocol.html
> >
> > Both the client and server are implemented as
> light-
> > weight processes, where pipes are used for reading
> > and writing to remote processes. This allows the
> > logic flow to be more straight-line.
> >
> > I'm also "translucently" switching threads in the
> > client, using in-line method calls, so that reads
> > and writes to the client do not block the main
> thread.
> >
> > (I'm trying to show how much clearer asynchronous
> > programming can be using Computational Streams.)
> 
> You really need to take a look at Stackless Python. 
> It's a much better 
> fit for the programming paradigm you want, and
> tasklet communication is 
> WAY faster than thread communication in Python.  I
> also think that the 
> Communicating Sequential Processes model is much
> nicer than your 
> Computational Streams model.
> 
> As far as switching between "async" and 'blocking",
> why don't you just 
> yield BlockingMode and yield AsyncMode?  That would
> kill two birds with 
> one stone.  What's the difference between yielding
> True, False, and 
> None (that is rhetorical, I read the
> implementation)?  Personally I 
> think you should use useful names, even if they are
> just aliases for 
> built-in python datatypes.  For example, the
> following lines are much 
> more self-documenting:
> 
> yield Cooperate
> yield Stop
> yield BlockingMode
> yield AsyncMode
> 
> When I did a framework very similar to but much more
> simple than yours, 
> I also made it possible to integrate with Deferred
> (to block on it and 
> resume on success/err, and also to return a deferred
> instead of a 
> generator using a function wrapper).
> 
> Translucent thread migration isn't the greatest
> idea, sometimes you 
> need to tie data structures to the a threadstate
> (for C level code.. 
> something like database cursors, or whatever).  It's
> usually better to 
> keep the same code on the same thread whenever
> possible.  But of 
> course, it's better just to not use them at all
> unless you are calling 
> some blocking C code, because it doesn't do anything
> for you with 
> Python bytecode.
> 
> -bob


________________________________________________________________________
Yahoo! India Matrimony: Find your partner online. http://yahoo.shaadi.com/india-matrimony/



From bob at redivi.com  Wed May 26 12:50:14 2004
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 26 May 2004 12:50:14 -0400
Subject: [Twisted-Python] (Un)Twisted Clients and Servers (newbie)
In-Reply-To: <20040526151746.78471.qmail@web8305.mail.in.yahoo.com>
References: <20040526151746.78471.qmail@web8305.mail.in.yahoo.com>
Message-ID: <C2801F54-AF34-11D8-9DC7-000A95686CD8@redivi.com>

On May 26, 2004, at 11:17 AM, Bill la Forge wrote:

> Thanks for the feedback. Is Zope3 stackless? Or did I
> misread that somewhere?

No, it does not depend on or otherwise use Stackless as far as I have 
heard.  I believe you have misread.

> The old unix model of processes/pipes keeps coming
> back up, it seems. Occum made good use of it, and I
> understand stackless does too. I think its the
> ultimate
> component model.

Well unix pipes are awful to use directly, since they are just one big 
stream of bytes with no semantic information whatsoever.. but they are 
a good enough foundation to build something better.

> Just a side note, bsddb apparently doesn't care which
> thread you use, as long as its sequential. This
> apparently changed (at least in the docs) in 4.2
> (which is included with Python 2.3). (And was pointed
> out to me a few days ago on this list!)
>
> I agree that Python, being already a high-level
> language, is likely not the best choice for layering
> another programming model on top of. And stackless
> looks like its a speed Phreek's dream. Where's the
> documentation for Stackless, in the download? I'd
> like to read more about it than what I can find on
> the web site.

There isn't a whole lot of documentation.  Download it, compile it (if 
necessary, I think there are recent win32 binaries), look at some of 
the tests and code.  The stackless module has decent doc strings.

> Anyway, I've picked my horse--Medusa--and I had
> intended to ride it for a while. But Twisted looked
> far richer/active/maintained. Is the world really
> ready for Stackless? It could be a far better world...

Do you really care what the rest of the world is doing or is ready for? 
  If you really did, you'd probably be doing something in Java or C#.

> (It really wouldn't take much to get me over there,
> but I really really need a lot of what's already
> part of Twisted!)

Stackless Python is an alternative Python interpreter, not a networking 
framework.  Twisted works just fine under Stackless, and there is even 
from Stackless specific integration in the sandbox.

-bob




From radix at twistedmatrix.com  Wed May 26 12:53:18 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 26 May 2004 12:53:18 -0400
Subject: [Twisted-Python] (Un)Twisted Clients and Servers (newbie)
In-Reply-To: <C2801F54-AF34-11D8-9DC7-000A95686CD8@redivi.com>
References: <20040526151746.78471.qmail@web8305.mail.in.yahoo.com>
	<C2801F54-AF34-11D8-9DC7-000A95686CD8@redivi.com>
Message-ID: <40B4CB7E.5040709@twistedmatrix.com>

Bob Ippolito wrote:

> Stackless Python is an alternative Python interpreter, not a networking 
> framework.  Twisted works just fine under Stackless, and there is even 
> from Stackless specific integration in the sandbox.


Self plug: sandbox/radix/threadless.py

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040526/3f60bcb3/attachment.pgp 

From alex-news at comcast.net  Wed May 26 14:28:26 2004
From: alex-news at comcast.net (Alexander May)
Date: Wed, 26 May 2004 14:28:26 -0400
Subject: [Twisted-Python] How to organize a web application?
Message-ID: <E1BT38q-0001xu-00@pyramid.twistedmatrix.com>

I am looking for advice on how to organize a web application.  I've never
written a web application before, and would appreciate any insight into best
practices and overall structure.

I have html pages, html templates, an underlying database, and (hopefully)
an understanding of twisted and nevow.  What is the best way to glue all of
this together?

For example, what is the best way to associate derived rend.Page classes
with html templates?  I'll have all these different data and render
functions that could potentially be used by many different templates.  Do I
create one monster rend.Page derived class responsible for servicing all the
possible display an render functions?  That seems wrong.  What's the
alternative?

What is the best way to manage links?  The html page template will link to
each other, mostly at the discretion of the html designers (admittedly me at
first).  Should I utilize the underlying file system to define the link
structure as I might do for static html site?  If yes, should I use
static.File and create a special resource type for the html template and
then return rend.Page derived classes?  Or should I do something else all
together?

What is the best way to manage state (non database)?  Cookies or mugged URLS
mapped to closures seems like it would work well.  Perhaps someone has some
experience doing this?

I took a look at the Quotient source, and did not see any html templates at
all, so I assume all the html generation is occurring dynamically via Stan
or some other method.  Likewise for nevow Calendar example which has a
single html template and links to dynamically generated pages (I'll probably
need to do that too).

Thought and comments?

Thanks,
Alex








From glyph at divmod.com  Wed May 26 15:29:29 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 26 May 2004 15:29:29 -0400
Subject: [Twisted-Python] How to organize a web application?
In-Reply-To: <E1BT38q-0001xu-00@pyramid.twistedmatrix.com>
References: <E1BT38q-0001xu-00@pyramid.twistedmatrix.com>
Message-ID: <1085599769.9027.32.camel@kazekage>

On Wed, 2004-05-26 at 14:28, Alexander May wrote:
> I am looking for advice on how to organize a web application.  I've never
> written a web application before, and would appreciate any insight into best
> practices and overall structure.

This discussion would be better suited towards either the
twisted-web at twistedmatrix.com or divmod-dev at divmod.org mailing list.




From michael.l.schneider at ugsplm.com  Wed May 26 15:30:44 2004
From: michael.l.schneider at ugsplm.com (Schneider, Michael)
Date: Wed, 26 May 2004 15:30:44 -0400
Subject: [Twisted-Python] Java question
Message-ID: <49199579A2BB32438A7572AF3DBB2FB505A21815@uscimplm001.net.plm.eds.com>

Thank you Itamar,

I will download this and look at it.

Mike

 
----------------------------------------------------------------
Michael Schneider
Senior Software Engineering Consultant
UGS PLM Solutions - an EDS Company
 
"The Greatest Performance Improvement Is the transitioning from a non-working state to the working state"


> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com
> [mailto:twisted-python-bounces at twistedmatrix.com]On Behalf Of Itamar
> Shtull-Trauring
> Sent: Tuesday, May 25, 2004 1:29 PM
> To: Twisted discussion stuff
> Subject: Re: [Twisted-Python] Java question
> 
> 
> On Tue, 2004-05-25 at 13:23, Schneider, Michael wrote:
> 
> > This may be a little off topic, but is there a package for
> > Java that provides any of:
> > 	- reactors
> > 	- deferred
> > 	- Protocol Objects like twisted
> 
> I started some work on improving EIO, originally written by Zooko. It
> doesn't have a concept of Deferreds yet, and some of the APIs will no
> doubt change, but it's a start.
> 
> http://java.twistedmatrix.com/eio/
> 
> -- 
> Itamar Shtull-Trauring    http://itamarst.org
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From michael.l.schneider at ugsplm.com  Wed May 26 15:33:59 2004
From: michael.l.schneider at ugsplm.com (Schneider, Michael)
Date: Wed, 26 May 2004 15:33:59 -0400
Subject: [Twisted-Python] Lore question/ latex output question
Message-ID: <49199579A2BB32438A7572AF3DBB2FB505A21816@uscimplm001.net.plm.eds.com>


Hello All,

I have been using lore for a project that I have been working
on, and it is a great tool.

I have a quick question.  Does anyone know how
to get the <pre>...</pre> tags to appear as shaded
on the latex/pdf output?

The generated latex looks like

\\begin{verbatim}   is being output at the start of the pre

and 

\\end{verbatim} is being output at the end of the pre.

I am trying to get the same output format as html output.

Thank you very much,
Mike
 
----------------------------------------------------------------
Michael Schneider
Senior Software Engineering Consultant
UGS PLM Solutions - an EDS Company
 
"The Greatest Performance Improvement Is the transitioning from a non-working state to the working state"
> 



From stephen at thorne.id.au  Wed May 26 20:07:54 2004
From: stephen at thorne.id.au (stephen at thorne.id.au)
Date: Thu, 27 May 2004 00:07:54 GMT
Subject: [Twisted-Python] Lore question/ latex output question
In-Reply-To: <49199579A2BB32438A7572AF3DBB2FB505A21816@uscimplm001.net.plm.eds.com>
Message-ID: <20040527000754.2212.578121168.divmod.quotient.35@ohm>

On Wed, 26 May 2004 15:33:59 -0400, "Schneider, Michael" <michael.l.schneider at ugsplm.com> wrote:
>
> Hello All,
> 
> I have been using lore for a project that I have been working
> on, and it is a great tool.
> 
> I have a quick question.  Does anyone know how
> to get the <pre>...</pre> tags to appear as shaded
> on the latex/pdf output?
> 
> The generated latex looks like
> 
> \\begin{verbatim}   is being output at the start of the pre
> 
> and=20
> 
> \\end{verbatim} is being output at the end of the pre.
> 
> I am trying to get the same output format as html output.

I hacked up the latex spitter to allow me to change the latex, I recommend
reading the 'extending lore' part of the howtos if this doesn't provide you
enough context. What this following code (that I use) does is puts a box
around the verbatim text:

in my spitters.py:

class LivewiresLatexSpitter(latex.ChapterLatexSpitter):
    def visitNode_pre(self, node):
        self.writer('\n\n\\begin{fmpage}\n\\begin{verbatim}\n')
        buf = StringIO()
        latex.getLatexText(node, buf.write)
        s = buf.getvalue()
        self.writer(latex.text.removeLeadingTrailingBlanks(s))
        self.writer('\\end{verbatim}\n\\end{fmpage}\n\n\n')

in my book.tex:

\newlength{\fmwidth}
\setlength{\fmwidth}{\textwidth}
\addtolength{\fmwidth}{-.5in}

\newsavebox{\fmbox}
\newenvironment{fmpage}[0]
    { \begin{lrbox}{\fmbox}\begin{minipage}{\fmwidth}}
    {\end{minipage}\end{lrbox}\vspace{1em}\fbox{\usebox{\fmbox}}\vspace{1em}}

I'll be happy to tarball up my documentation tree and send it to you off-list
if you want a working example.

Stephen.



From laforge49 at yahoo.co.in  Thu May 27 01:38:05 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Thu, 27 May 2004 06:38:05 +0100 (BST)
Subject: [Twisted-Python] (Un)Twisted Clients and Servers (newbie)
In-Reply-To: <40B4CB7E.5040709@twistedmatrix.com>
Message-ID: <20040527053805.47421.qmail@web8312.mail.in.yahoo.com>

Bob Ippolito wrote:
> As far as switching between "async" and 'blocking",
> why don't you just yield BlockingMode and yield 
> AsyncMode?

Well, I'm doing something like that now. Here's my
updated client protocol. Now at least you don't need
to remember what to yield (a potential source of 
errors). Plus you save a few lines. Thanks for the 
suggestion.

class SCP(CSProtocol):
    """
    Simple Client Protocol
    """
    def cs(self):
        lf=LineFilter()
        lf.delimiter=chr(26)
        pushFilter(self,0,lf)
        inp=self.device[0]
        out=self.device[1]
        while True:
            yield inp.startRead()
            try:
                data=inp.endRead()
            except:
                break
            if data=='exit':
                break
            yield self.blockingIOMode()
            sys.stdout.write(data)
            txt=sys.stdin.readline()
            yield self.asyncIOMode()
            if not len(txt):
                break
            yield out.startWrite(txt)
            try:
                out.endWrite()
            except:
                break
        closeDevices(self)
        reactor.stop()


=====
Bill la Forge
http://www.geocities.com/laforge49/

________________________________________________________________________
Yahoo! India Matrimony: Find your partner online. http://yahoo.shaadi.com/india-matrimony/



From sysfrog at gmail.com  Thu May 27 17:25:39 2004
From: sysfrog at gmail.com (Guenther Starnberger)
Date: Thu, 27 May 2004 23:25:39 +0200
Subject: [Twisted-Python] Enterprise Rowobject and generating primary keys
Message-ID: <63c9dca20405271425353f98ff@mail.gmail.com>

Hi all,

I have a problem creating primary key values for enterprise rowobjects.

The KeyFactory class says "This is deprecated. Use the underlying
database to generate keys, or just roll your own.". As I am using
Postgresql the ideal solution would be to just use the 'nextval'
function (which is used as default value for the primary key in my
schema, therefore I could skip this column in my insert statement).

The problem now is, that I need to assign a value to the rowobject
primary key column, otherwise i get an exception from twisted
('instance has no attribute...'). Just excluding the primary key
column from my rowColumns attribute doesn't work either as this
results in twisted to hang. Manually selecting the nextval function
with the adbapi and using the result as primary key works, but this
solution isn't really nice.

Any other proposals for an elegant solution to create primary keys
when inserting new rowobjects?

cu
/gst



From cce at clarkevans.com  Thu May 27 20:03:59 2004
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 27 May 2004 20:03:59 -0400
Subject: [Twisted-Python] Enterprise Rowobject and generating primary keys
In-Reply-To: <63c9dca20405271425353f98ff@mail.gmail.com>
References: <63c9dca20405271425353f98ff@mail.gmail.com>
Message-ID: <20040528000358.GA77576@prometheusresearch.com>

as I remember, nextval is garuenteed to be unique (but 
definately not sequential) across transactions.  Why not
just fetch your own value and use it as the key?

def mykey()
   c = pgsql.cursor()
   c.execute("SELECT nextval('myseqence')")
   return c.fetchone()[0]

or is your question more subtle?

*bings*

Clark

On Thu, May 27, 2004 at 11:25:39PM +0200, Guenther Starnberger wrote:
| Hi all,
| 
| I have a problem creating primary key values for enterprise rowobjects.
| 
| The KeyFactory class says "This is deprecated. Use the underlying
| database to generate keys, or just roll your own.". As I am using
| Postgresql the ideal solution would be to just use the 'nextval'
| function (which is used as default value for the primary key in my
| schema, therefore I could skip this column in my insert statement).
| 
| The problem now is, that I need to assign a value to the rowobject
| primary key column, otherwise i get an exception from twisted
| ('instance has no attribute...'). Just excluding the primary key
| column from my rowColumns attribute doesn't work either as this
| results in twisted to hang. Manually selecting the nextval function
| with the adbapi and using the result as primary key works, but this
| solution isn't really nice.
| 
| Any other proposals for an elegant solution to create primary keys
| when inserting new rowobjects?
| 
| cu
| /gst
| 
| _______________________________________________
| Twisted-Python mailing list
| Twisted-Python at twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
| 

-- 
Clark C. Evans                     Prometheus Research, LLC
Chief Technology Officer           Turning Data Into Knowledge
cce at prometheusresearch.com         www.prometheusresearch.com
(main) 203.777.2550                (cell) 203.444.0557



From developer at csrules.dyndns.org  Thu May 27 23:28:35 2004
From: developer at csrules.dyndns.org (darryl)
Date: Thu, 27 May 2004 20:28:35 -0700
Subject: [Twisted-Python] Enterprise Rowobject and generating primary keys
In-Reply-To: <63c9dca20405271425353f98ff@mail.gmail.com>
References: <63c9dca20405271425353f98ff@mail.gmail.com>
Message-ID: <40B6B1E3.5010802@csrules.dyndns.org>

Guenther Starnberger wrote:

>
>Any other proposals for an elegant solution to create primary keys
>when inserting new rowobjects?
>
>cu
>/gst
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>  
>
There are some that believe that your primary key should come as a 
natural result of normalizing your data and sequences etc. are not 
really necessary at all. If that isn't an option and you don't like 
sequences, the your option is a UUID of some kind i guess.

-darryl

-- 

http://randomthoughts.vandorp.ca/WK/blog




From jsaker at americanrelay.com  Thu May 27 22:37:58 2004
From: jsaker at americanrelay.com (James R. Saker Jr.)
Date: Thu, 27 May 2004 21:37:58 -0500
Subject: [Twisted-Python] Twisted sshd examples?
Message-ID: <1085711878.14977.13.camel@localhost>

Anyone familiar with a good implementation of twisted's ssh server? I'm
looking to interface a menu application with SSH and instead of setting
the python app as the UNIX shell, I'd like twisted to handle sshd so my
application can permit different user logins (vs. being bound to a
particular user's shell via that approach).

The Twisted example provided
(http://www.twistedmatrix.com/documents/current/examples/sshsimpleserver.py) appears to fail and I wonder if its outdated as the current API doesn't reference realm under conch:

from twisted.conch import error, realm
...


Traceback (most recent call last):
  File "sshd.py", line 3, in ?
    from twisted.conch import error, realm
ImportError: cannot import name realm

Thanks...

Jamie





From laforge49 at yahoo.co.in  Thu May 27 23:58:52 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Fri, 28 May 2004 04:58:52 +0100 (BST)
Subject: [Twisted-Python] TieredServices
Message-ID: <20040528035852.83008.qmail@web8307.mail.in.yahoo.com>

I've cleaned up the TieredServices code for handling
partial failure during initialization of related
services.

Its posted to my web site, together with test code, at

http://compstrm.sourceforge.net/twcs/tieredservices.html

This code DOES NOT use anything from CompStrm.

Please consider this a contribution to Twisted, as
I'm consigning the copyright to Glyph so that it can
be included. (Consignment contingent on inclusion, of
course.)


=====
Bill la Forge
http://www.geocities.com/laforge49/

________________________________________________________________________
Yahoo! India Matrimony: Find your partner online. http://yahoo.shaadi.com/india-matrimony/



From z3p at twistedmatrix.com  Fri May 28 00:05:40 2004
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Fri, 28 May 2004 00:05:40 -0400
Subject: [Twisted-Python] Twisted sshd examples?
In-Reply-To: <1085711878.14977.13.camel@localhost>
References: <1085711878.14977.13.camel@localhost>
Message-ID: <1085717140.7393.2.camel@petra>

On Thu, 2004-05-27 at 22:37, James R. Saker Jr. wrote:
> Anyone familiar with a good implementation of twisted's ssh server? I'm
> looking to interface a menu application with SSH and instead of setting
> the python app as the UNIX shell, I'd like twisted to handle sshd so my
> application can permit different user logins (vs. being bound to a
> particular user's shell via that approach).
> 
> The Twisted example provided
> (http://www.twistedmatrix.com/documents/current/examples/sshsimpleserver.py) appears to fail and I wonder if its outdated as the current API doesn't reference realm under conch:

Yeah, that was a stupid bug.  The example in current SVN should work. 
You might also want to look at t.c.unix, which implements a bunch of the
stuff that you will want to implement for your application (namely, a
Session channel).

-p
-- 
       Paul Swartz
(o_    http://z3p.livejournal.com/
//\    z3p at twistedmatrix.com
V_/_   AIM: z3penguin  GPG:5CF0B1C9
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040528/c424d010/attachment.pgp 

From sysfrog at gmail.com  Fri May 28 05:44:23 2004
From: sysfrog at gmail.com (Guenther Starnberger)
Date: Fri, 28 May 2004 11:44:23 +0200
Subject: [Twisted-Python] Enterprise Rowobject and generating primary keys
In-Reply-To: <40B6B1E3.5010802@csrules.dyndns.org>
References: <63c9dca20405271425353f98ff@mail.gmail.com>
	<40B6B1E3.5010802@csrules.dyndns.org>
Message-ID: <63c9dca204052802441b5dbf1f@mail.gmail.com>

On Thu, 27 May 2004 20:28:35 -0700, darryl <developer at csrules.dyndns.org> wrote:

Hi,

> There are some that believe that your primary key should come as a
> natural result of normalizing your data and sequences etc. are not
> really necessary at all. If that isn't an option and you don't like
> sequences, the your option is a UUID of some kind i guess.

nice idea :) i hadn't thought of the possibility of using UUIDs as
primary keys. (which have the huge advantage that they are even unique
across different databases.)

cu
/gst



From cmg at dok.org  Fri May 28 13:17:30 2004
From: cmg at dok.org (Chris Green)
Date: Fri, 28 May 2004 13:17:30 -0400
Subject: [Twisted-Python] What does the LGPL mean in terms of python?
Message-ID: <m2pt8oh3o5.fsf@catbert.dok.org>

Hey folks,

I've checked out the archives but almost everything I've read just
amounted to "it's under the LGPL, read that".

I understand the LGPL with regards to the classic case of C libraries.
You can call the public functions, even add your own new public
functions but the code that is in the library itself has to be
released under the terms of the LGPL.  The examples in the LGPL of
using just the header file doesn't really map into python.

For example, is a subclass a derivative work? By the LGPL, it seems to
be since it's combined completely with the code that is under the
LGPL. 

Let's say I had ChatServer derived from TCPServer, is it the intent of
the licensing that my code must be placed under the LGPL?  

If subclassing is allowed to occur and those new classes can be placed
under any license the user desires, it seems that any licensing
inconvenience that doesn't involve cutting and pasting code can be
worked around by merely extending the existing classes.

If it's not allowed, I'm still not sure what the boundary lines are.

This would be great information to add to the FAQ and include with
the distribution as licensing clarifications and what the intent of
the licensing scheme is.

Thanks,
Chris

-- 
Chris Green <cmg at dok.org>
Warning: time of day goes back, taking countermeasures.





From jsaker at americanrelay.com  Fri May 28 14:39:39 2004
From: jsaker at americanrelay.com (James R. Saker Jr.)
Date: Fri, 28 May 2004 13:39:39 -0500
Subject: [Twisted-Python] Re: Twisted-Python Digest, Vol 2, Issue 38
In-Reply-To: <E1BTleH-0008J6-02@pyramid.twistedmatrix.com>
References: <E1BTleH-0008J6-02@pyramid.twistedmatrix.com>
Message-ID: <1085769579.27719.20.camel@localhost>

> From: Paul Swartz <z3p at twistedmatrix.com>
> Yeah, that was a stupid bug.  The example in current SVN should work. 
> You might also want to look at t.c.unix, which implements a bunch of the
> stuff that you will want to implement for your application (namely, a
> Session channel).

Cool - definitely will. The whole conch area seems to be rather
interesting - digging for more documentation on insults as well as I'm
not quite the "read the API and code" learner yet.

Now if someone could just show me the trick to learning this all faster,
I'd be set;-) scp python.twisted.* me at brian.self://long/term/memory/ !!!

Jamie





From glyph at divmod.com  Fri May 28 14:48:08 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Fri, 28 May 2004 14:48:08 -0400
Subject: [Twisted-Python] What does the LGPL mean in terms of python?
In-Reply-To: <m2pt8oh3o5.fsf@catbert.dok.org>
References: <m2pt8oh3o5.fsf@catbert.dok.org>
Message-ID: <1085770088.11747.47.camel@kazekage>

On Fri, 2004-05-28 at 13:17, Chris Green wrote:

> For example, is a subclass a derivative work? By the LGPL, it seems to
> be since it's combined completely with the code that is under the
> LGPL. 

Chris,

Thanks for your questions.  Your concerns are well-founded.  However,
they are thankfully soon to be irrelevant.

Googling the twisted-python archives will give you some background on
the intention and implications of the LGPL as it applies to Twisted. 
However, the LGPL was originally selected as Twisted was largely code
that I wrote personally and many of the interested parties were large
corporations with no experience, knowledge, or interest in open source. 
I wanted a license which was not terribly restrictive but still required
those companies to do investigation into the license, requiring in so
doing that they become at least marginally involved in the community
process.  In that, the confusing wording of the LGPL as it regards
Python code was an asset.  It would be a halfway accurate statement that
I selected the LGPL exactly because it doesn't make any sense.

Now we live in a different world than what Twisted was born into.  First
of all, middleware vendors know what Twisted is and who I am, which is a
bit of a shift :-).  More importantly, IBM, a massive bastion of
technological conservatism, has embraced open source.  By doing this,
they have sent a message to corporate lawyers everywhere that they need
to be aware of the free/open source software phenomenon and be able to
react appropriately to different licenses.  More and more companies are
aware of the need to interact with the community regardless of whether
it's necessary.

Finally, Twisted is no longer a personal effort of my own.  It is truly
a community project; in fact, I think I am falling far behind exarkun in
terms of number of lines committed :).  The community is large enough to
self-sustain without forcing new users to step forward because of an
inconvenient license.

For these reasons, and also to facilitate contribution by those who have
the right to release their own work as open source but NOT to consign
copyright to it (such as students at and employees of MIT), we are going
to be switching to an MIT-style (no pun intended) license soon.  The
real work is going to be filing the verbose license statement off every
source file in the tree and replacing it with a new one.

This has been a long time in coming - the decision was finally made at
PyCon this year and I'm sorry the change hasn't been implemented yet. 
On that note, I think we should change the license text at the top of
each file to simply refer to the TWISTED-LICENSE file in the
distribution or something like that, rather than including disclaimers
itself.




From cmg at dok.org  Fri May 28 15:16:06 2004
From: cmg at dok.org (Chris Green)
Date: Fri, 28 May 2004 15:16:06 -0400
Subject: [Twisted-Python] Re: What does the LGPL mean in terms of python?
References: <m2pt8oh3o5.fsf@catbert.dok.org>
	<1085770088.11747.47.camel@kazekage>
Message-ID: <m28yfcgy6h.fsf@catbert.dok.org>

Glyph Lefkowitz <glyph at divmod.com> writes:

> Thanks for your questions.  Your concerns are well-founded.  However,
> they are thankfully soon to be irrelevant.

Yay :) That's great news.  Having been on both sides of the
opensource/corporate use of opensource, I'm glad to know that the
project is so big that this has become an issue ;).

I'm very happy about the proposed license style.

Thanks,
Chris
-- 
Chris Green <cmg at dok.org>
You now have 14 minutes to reach minimum safe distance.




From glyph at divmod.com  Fri May 28 15:37:58 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Fri, 28 May 2004 15:37:58 -0400
Subject: [Twisted-Python] Re: What does the LGPL mean in terms of python?
In-Reply-To: <m28yfcgy6h.fsf@catbert.dok.org>
References: <m2pt8oh3o5.fsf@catbert.dok.org>
	<1085770088.11747.47.camel@kazekage> <m28yfcgy6h.fsf@catbert.dok.org>
Message-ID: <1085773078.4118.7.camel@kazekage>

> You now have 14 minutes to reach minimum safe distance.

And how far away is that!??




From cce at clarkevans.com  Fri May 28 21:22:15 2004
From: cce at clarkevans.com (Clark C. Evans)
Date: Fri, 28 May 2004 21:22:15 -0400
Subject: [Twisted-Python] What does the LGPL mean in terms of python?
In-Reply-To: <1085770088.11747.47.camel@kazekage>
References: <m2pt8oh3o5.fsf@catbert.dok.org>
	<1085770088.11747.47.camel@kazekage>
Message-ID: <20040529012215.GA16541@prometheusresearch.com>

On Fri, May 28, 2004 at 02:48:08PM -0400, Glyph Lefkowitz wrote:
| For these reasons, and also to facilitate contribution by those who have
| the right to release their own work as open source but NOT to consign
| copyright to it (such as students at and employees of MIT), we are going
| to be switching to an MIT-style (no pun intended) license soon.

This is great news.  I have the same issue here, I can now submit code
via any open source license, but the code I write belongs to the company
that pays the bills... and, for their contribution, they'd like to have
their name associated with the work.

Kind Regards,

Clark

-- 
Clark C. Evans                     Prometheus Research, LLC
Chief Technology Officer           Turning Data Into Knowledge
cce at prometheusresearch.com         www.prometheusresearch.com
(main) 203.777.2550                (cell) 203.444.0557



From radix at twistedmatrix.com  Fri May 28 23:06:10 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 28 May 2004 23:06:10 -0400
Subject: [Twisted-Python] What does the LGPL mean in terms of python?
In-Reply-To: <20040529012215.GA16541@prometheusresearch.com>
References: <m2pt8oh3o5.fsf@catbert.dok.org>	<1085770088.11747.47.camel@kazekage>
	<20040529012215.GA16541@prometheusresearch.com>
Message-ID: <40B7FE22.1090804@twistedmatrix.com>

Clark C. Evans wrote:
> On Fri, May 28, 2004 at 02:48:08PM -0400, Glyph Lefkowitz wrote:
> | For these reasons, and also to facilitate contribution by those who have
> | the right to release their own work as open source but NOT to consign
> | copyright to it (such as students at and employees of MIT), we are going
> | to be switching to an MIT-style (no pun intended) license soon.
> 
> This is great news.  I have the same issue here, I can now submit code
> via any open source license, but the code I write belongs to the company
> that pays the bills... and, for their contribution, they'd like to have
> their name associated with the work.

I'm curious, how will we specify who owns copyright of Twisted? 
Centralized in one place (COPYRIGHT?), so effectively everyone gets the 
same "amount" of copyright? Per-file? I'm not familiar with how 
multi-copyright-holder projects usually work.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040528/65c2e45f/attachment.pgp 

From glyph at twistedmatrix.com  Sat May 29 07:57:37 2004
From: glyph at twistedmatrix.com (glyph at twistedmatrix.com)
Date: Sat, 29 May 2004 17:27:37 +0530
Subject: [Twisted-Python] oh
Message-ID: <E1BU2TY-0008My-00@pyramid.twistedmatrix.com>

did you sent it to me?
-------------- next part --------------
A non-text attachment was scrubbed...
Name: unfolds.com
Type: application/octet-stream
Size: 25353 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040529/b9082622/attachment.obj 

From laforge49 at yahoo.co.in  Sat May 29 08:36:45 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Sat, 29 May 2004 13:36:45 +0100 (BST)
Subject: [Twisted-Python] 1.3 patch for 0 delay
Message-ID: <20040529123645.39989.qmail@web8306.mail.in.yahoo.com>

Glyph,

Did you perchance do the regression test for that
patch I sent?

Bill la Forge

--- base.1.3.py 2004-05-21 08:08:58.000000000 +0530
+++ base.py     2004-05-22 10:50:10.015124800 +0530
@@ -368,10 +368,16 @@
         assert callable(_f), "%s is not callable" %
_f
         assert sys.maxint >= _seconds >= 0, \
                "%s is not greater than or equal to 0
seconds" % (_seconds,)
-        tple = DelayedCall(seconds() + _seconds, _f,
args, kw,
-                          
self._pendingTimedCalls.remove,
-                           self._resetCallLater)
-        insort(self._pendingTimedCalls, tple)
+        if _seconds != 0:
+            tple = DelayedCall(_seconds + seconds(),
_f, args, kw,
+                              
self._pendingTimedCalls.remove,
+                               self._resetCallLater)
+            insort(self._pendingTimedCalls, tple)
+        else:
+            tple = DelayedCall(0, _f, args, kw,
+                              
self._pendingTimedCalls.remove,
+                               self._resetCallLater)
+            self._pendingTimedCalls.append(tple)
         return tple

     def _resetCallLater(self, tple):
@@ -415,9 +421,13 @@
                     log.err()
                 count += 1
             del self.threadCallQueue[:count]
+        if not self._pendingTimedCalls:
+            return
         now = seconds()
+        do=[]
         while self._pendingTimedCalls and
(self._pendingTimedCalls[-1].time <= now):
-            call = self._pendingTimedCalls.pop()
+            do.append(self._pendingTimedCalls.pop())
+        for call in do:
             try:
                 call.called = 1
                 call.func(*call.args, **call.kw)


=====
Bill la Forge
http://www.geocities.com/laforge49/

________________________________________________________________________
Yahoo! India Matrimony: Find your partner online. http://yahoo.shaadi.com/india-matrimony/
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: notes.txt
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040529/48672ccc/attachment.txt 

From radix at twistedmatrix.com  Sat May 29 11:55:57 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 29 May 2004 11:55:57 -0400
Subject: [Twisted-Python] oh
In-Reply-To: <E1BU2TY-0008My-00@pyramid.twistedmatrix.com>
References: <E1BU2TY-0008My-00@pyramid.twistedmatrix.com>
Message-ID: <40B8B28D.10805@twistedmatrix.com>

glyph at twistedmatrix.com wrote:
> did you sent it to me?

What you say !!!

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040529/e26d3b9c/attachment.pgp 

From cmg at dok.org  Sat May 29 12:16:40 2004
From: cmg at dok.org (Chris Green)
Date: Sat, 29 May 2004 12:16:40 -0400
Subject: [Twisted-Python] Re: What does the LGPL mean in terms of python?
References: <m2pt8oh3o5.fsf@catbert.dok.org>
	<1085770088.11747.47.camel@kazekage> <m28yfcgy6h.fsf@catbert.dok.org>
	<1085773078.4118.7.camel@kazekage>
Message-ID: <m2wu2vfbtj.fsf@catbert.dok.org>

Glyph Lefkowitz <glyph at divmod.com> writes:

>> You now have 14 minutes to reach minimum safe distance.
>
> And how far away is that!??

That was the message from a MacGuyver episode where a nuclear reactor
was undergoing meltdown so I'll say further than a stone's throw :)

-- 
Chris Green <cmg at dok.org>
Let not the sands of time get in your lunch.




From glyph at divmod.com  Sat May 29 15:36:51 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Sat, 29 May 2004 15:36:51 -0400
Subject: [Twisted-Python] oh
In-Reply-To: <40B8B28D.10805@twistedmatrix.com>
References: <E1BU2TY-0008My-00@pyramid.twistedmatrix.com>
	<40B8B28D.10805@twistedmatrix.com>
Message-ID: <1085859411.5815.6.camel@kazekage>

On Sat, 2004-05-29 at 11:55, Christopher Armstrong wrote:
> glyph at twistedmatrix.com wrote:
> > did you sent it to me?
> 
> What you say !!!

Check the headers on that message - I never sent anything like that
anywhere, let alone to twisted-python, and I don't see your in-reply-to
message on the list. (I bet it has a .pif or .scr attachment, huh?)




From radix at twistedmatrix.com  Sat May 29 17:12:59 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 29 May 2004 17:12:59 -0400
Subject: [Twisted-Python] oh
In-Reply-To: <1085859411.5815.6.camel@kazekage>
References: <E1BU2TY-0008My-00@pyramid.twistedmatrix.com>	<40B8B28D.10805@twistedmatrix.com>
	<1085859411.5815.6.camel@kazekage>
Message-ID: <40B8FCDB.9030209@twistedmatrix.com>

Glyph Lefkowitz wrote:
> On Sat, 2004-05-29 at 11:55, Christopher Armstrong wrote:
> 
>>glyph at twistedmatrix.com wrote:
>>
>>>did you sent it to me?
>>
>>What you say !!!
> 
> 
> Check the headers on that message - I never sent anything like that
> anywhere, let alone to twisted-python, and I don't see your in-reply-to
> message on the list. (I bet it has a .pif or .scr attachment, huh?)

Yeah, it did, it was obviously a forged trojan or whatever.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20040529/e5441598/attachment.pgp 

From laforge49 at yahoo.co.in  Sun May 30 07:03:10 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Sun, 30 May 2004 12:03:10 +0100 (BST)
Subject: [Twisted-Python] can you use log on a service thread
Message-ID: <20040530110310.32687.qmail@web8307.mail.in.yahoo.com>

Can you log from a service thread?

I looked at log and didn't see any thread locking or
anything, except for the following:

    threadable.synchronize(LogPublisher)
    threadable.whenThreaded(initThreads)

Is logging thread safe? There seems to be a lot of 
magic here.

=====
Bill la Forge
http://www.geocities.com/laforge49/

________________________________________________________________________
Yahoo! India Matrimony: Find your partner online. http://yahoo.shaadi.com/india-matrimony/



From itamar at itamarst.org  Sun May 30 21:47:44 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 30 May 2004 21:47:44 -0400
Subject: [Twisted-Python] can you use log on a service thread
In-Reply-To: <20040530110310.32687.qmail@web8307.mail.in.yahoo.com>
References: <20040530110310.32687.qmail@web8307.mail.in.yahoo.com>
Message-ID: <1085968064.4046.1.camel@sheriffpony>

On Sun, 2004-05-30 at 07:03, Bill la Forge wrote:

> Is logging thread safe? There seems to be a lot of 
> magic here.

Log observers get called in the thread that calls log.msg(). That is all
there is to it. If you want to make sure observers always run in reactor
thread, you can:

yourObserver = lambda **kwargs: reactor.callFromThread(yourObserver,
**kwargs)

before registering it, or something to that effect.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From mlist at asesoft.ro  Mon May 31 06:13:10 2004
From: mlist at asesoft.ro (MailingList)
Date: Mon, 31 May 2004 13:13:10 +0300
Subject: [Twisted-Python] (no subject)
Message-ID: <076101c446f7$e0236920$7560a8c0@asesoft.intl>


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20040531/3c8066d6/attachment.htm 

From heikowu at ceosg.de  Sat May  1 01:56:09 2004
From: heikowu at ceosg.de (Heiko Wundram)
Date: Sat, 1 May 2004 09:56:09 +0200
Subject: [Twisted-Python] How to write binary data from a protocol?
In-Reply-To: <200405010234.16055.waldbie@attglobal.net>
References: <200405010234.16055.waldbie@attglobal.net>
Message-ID: <200405010956.10512.heikowu@ceosg.de>

Am Samstag, 1. Mai 2004 04:34 schrieb Carl Waldbieser:
> I tried calling self.transport.write(), but I received
> an error indicating that only string data is accepted.

Have a look at the struct module. To pack an integer (actually an unsigned 
long) as a 4 byte string, you would do:

self.transport.write(struct.pack("!L",5))

On the receiving side, you would read 4 bytes, and unpack them using:

struct.unpack("!L",data)[0]

But all the rest is best explained using the docs of the struct module...

Heiko.



From soso_pub at yahoo.com  Sat May  1 06:22:40 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Sat, 1 May 2004 05:22:40 -0700 (PDT)
Subject: [Twisted-Python] Deferring execution to a specific thread
Message-ID: <20040501122240.53292.qmail@web14806.mail.yahoo.com>

Hello everybody,

I looked at twisted interaction with threads but I
couldn't find a way to defer execution to a specific
thread. I need this because I have exactly one
connection (no more connections possible) to the
database and all database operations have to be placed
in the same thread.
Is there a way to handle situations like this? Any
suggestion appreciated.

Thanks,
Sorin



	
		
__________________________________
Do you Yahoo!?
Win a $20,000 Career Makeover at Yahoo! HotJobs  
http://hotjobs.sweepstakes.yahoo.com/careermakeover 



From sam at SpinwardStars.com  Sat May  1 10:23:54 2004
From: sam at SpinwardStars.com (Samuel Reynolds)
Date: Sat, 01 May 2004 10:23:54 -0600
Subject: [Twisted-Python] Deferring execution to a specific thread
In-Reply-To: <20040501122240.53292.qmail@web14806.mail.yahoo.com>
References: <20040501122240.53292.qmail@web14806.mail.yahoo.com>
Message-ID: <6.0.1.1.0.20040501101840.026bde88@pop.mindspring.com>

At 2004-05-01 05:22 AM -0700, you wrote:
>Hello everybody,
>
>I looked at twisted interaction with threads but I
>couldn't find a way to defer execution to a specific
>thread. I need this because I have exactly one
>connection (no more connections possible) to the
>database and all database operations have to be placed
>in the same thread.
>Is there a way to handle situations like this? Any
>suggestion appreciated.
>
>Thanks,
>Sorin

Maybe...
Post the deferred to a queue *and* return it to the caller;
only the query thread reads from that queue. On completion
of the query, mark the deferred complete (is that right, gurus?)
and delete it from the queue.

- Sam

__________________________________________________________
Spinward Stars, LLC                        Samuel Reynolds
Software Consulting and Development           303-805-1446
http://SpinwardStars.com/            sam at SpinwardStars.com 




From soso_pub at yahoo.com  Sat May  1 10:45:23 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Sat, 1 May 2004 09:45:23 -0700 (PDT)
Subject: [Twisted-Python] Deferring execution to a specific thread
In-Reply-To: <6.0.1.1.0.20040501101840.026bde88@pop.mindspring.com>
Message-ID: <20040501164523.28885.qmail@web14808.mail.yahoo.com>

Hi,

--- Samuel Reynolds <sam at SpinwardStars.com> wrote:
> Maybe...
> Post the deferred to a queue *and* return it to the
> caller;
> only the query thread reads from that queue. On
> completion
> of the query, mark the deferred complete (is that
> right, gurus?)
> and delete it from the queue.
> 
> - Sam

Yes, only that using deferToThread does not guarantee
that the operation will be deferred to the same
thread. 
I thought about limiting the thread pool to exactly 1
thread but it is no option because in the future I
might need othr usual worker threads.
Anyway, I solved it using a custom thread and call in
the main thread with callFromThread.
I thought there might be a way to defer to a specific
thread so I don't need to use custom threads but it's
alright like this also.

Sorin



	
		
__________________________________
Do you Yahoo!?
Win a $20,000 Career Makeover at Yahoo! HotJobs  
http://hotjobs.sweepstakes.yahoo.com/careermakeover 



From soso_pub at yahoo.com  Sat May  1 13:20:29 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Sat, 1 May 2004 12:20:29 -0700 (PDT)
Subject: [Twisted-Python] setUnjellyableForClass
Message-ID: <20040501192029.40622.qmail@web14811.mail.yahoo.com>

Hi all, 

Is it possible to skip this declaration for classes
that I want to pass remotely? I have many data holding
classes and I am not interested in security so it's
kinda verbose to call setUnjellyableForClass for every
class that I want to pass remotely.

Thanks,
Sorin


	
		
__________________________________
Do you Yahoo!?
Win a $20,000 Career Makeover at Yahoo! HotJobs  
http://hotjobs.sweepstakes.yahoo.com/careermakeover 



From andrew-twisted at puzzling.org  Tue May  4 06:10:54 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 4 May 2004 22:10:54 +1000
Subject: [Twisted-Python] newjelly -- mature or forgotten?
Message-ID: <20040504121054.GB32487@frobozz>

What's the status of newjelly?  Should we consider making it the real jelly
for the next major release?  It seems to have been forgotten about, although
it still passes the same tests that jelly does, and the pb and spread tests
also pass with newjelly, so I presume it's working fine... so why hasn't it
replaced the current jelly.py?

We have bug reports (and patches!) sitting in the issue tracker for jelly,
e.g. http://twistedmatrix.com/users/roundup.twistd/twisted/issue426.  That
one is, I think, fixed in newjelly, so I don't know if the better fix is to
apply the given patch, or to make newjelly the standard jelly.

Any thoughts?

-Andrew.




From golux at comcast.net  Thu May  6 15:57:13 2004
From: golux at comcast.net (Stephen C. Waterbury)
Date: Thu, 06 May 2004 17:57:13 -0400
Subject: [Twisted-Python] t.p.http handling of multipart/form-data
Message-ID: <409AB4B9.3050605@comcast.net>

Hey http rewriting team ...
(or more specifically foom, I think :)

I'm (for my sins, no doubt) using the multipart/form-data
implementation in t.p.http to transfer files, and it works
okay but could be improved.  I'm sure this is not at the
top of your priority list for the rewrite (or even *on* it,
probably :), but I'd just like to go on record as in favor
of a possible enhancement.  Let me know if I should put
this into the issue tracker as a feature request.

(1)  Access to enclosure headers

The way request arg processing works currently, it doesn't
parse the headers from the MIME enclosure, which includes some
useful stuff:  Content-Type, Content-Transfer-Encoding, and
Content-Disposition (which has the "filename" attribute that
browsers use for the local filename -- nice to have for some
use cases).  This is a documented deficiency of
cgi.parse_multipart -- it's recommended to use cgi.FieldStorage
to parse the nested parts (also for more "flexibility" in
handling of large data, according to the cgi module docs).
I discussed this earlier with Itamar, and IIRC he didn't want
to use FieldStorage because it blocked (right Itamar? :).

(2)  [not a big deal] Multiple enclosures.

This is just a "would be nice".  It's easy enough to do several
transfers, but a single one would be more efficient, especially
in the case of a lot of small files ... arguably there are lots
of ways to get around it (zip, etc.), which is why it's not
a high priority.

Cheers,
Steve




From golux at comcast.net  Thu May  6 16:50:33 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Thu, 06 May 2004 18:50:33 -0400
Subject: [Twisted-Python] t.p.http handling of multipart/form-data
In-Reply-To: <409AB4B9.3050605@comcast.net>
References: <409AB4B9.3050605@comcast.net>
Message-ID: <409AC139.80306@comcast.net>

Oops -- never mind, it's covered in Issue 77 ... I forgot
about that one.  Sorry about the wasted bandwidth!  :/



From itamar at itamarst.org  Fri May  7 16:14:32 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 07 May 2004 18:14:32 -0400
Subject: [Twisted-Python] New components questions
Message-ID: <1083968071.13457.170.camel@sheriffpony>

1. Currently, if c is a Componentized, IFoo(c, persist=False) will
bypass c.getComponent() and do standard lookup. Is it worth supporting
this at all? It'd make code cleaner if not, and integration with
zope.interface easier.

2. How do we package zope.interface package? We could:

  a. include copy of code, as e.g. twisted.interface, and have it
     replace itself with zope.interface if that exists. This opens
     us to possible _xmlplus style horribleness.
  b. install zope.interface in our setup.py if it doesn't exist.
  c. tell people to install it themselves.

3. Do we want our own adapter registry or not? Zope's global registry is
in zope.component, which is a whole new package we need to install and
backport to 2.2. And it has lots of other stuff which while interesting
and possibly useful means more cognitive overhead. My current code has
its own registry and does not require zope.component. The downside is
that if we have our own registry, code that uses both Twisted and
zope.component will cause adaptation to an interface will be slower
because it will need to check two registries.
 
-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From radix at twistedmatrix.com  Fri May  7 16:22:21 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 07 May 2004 18:22:21 -0400
Subject: [Twisted-Python] twisted on os x: cfreactor or kqreactor?
In-Reply-To: <Pine.OSX.4.58.0404230852200.21404@slither.local>
References: <Pine.OSX.4.58.0404230852200.21404@slither.local>
Message-ID: <409C0C1D.1050805@twistedmatrix.com>

rayg wrote:
> i just created a fink package for PyKQeue
...

Ahem. Pardon this repost, it was a moderator error.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040507/f15cf5ab/attachment.sig>

From radix at twistedmatrix.com  Fri May  7 16:31:12 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 07 May 2004 18:31:12 -0400
Subject: [Twisted-Python] New components questions
In-Reply-To: <1083968071.13457.170.camel@sheriffpony>
References: <1083968071.13457.170.camel@sheriffpony>
Message-ID: <409C0E30.3080202@twistedmatrix.com>

Itamar Shtull-Trauring wrote:
> 1. Currently, if c is a Componentized, IFoo(c, persist=False) will
> bypass c.getComponent() and do standard lookup. Is it worth supporting
> this at all? It'd make code cleaner if not, and integration with
> zope.interface easier.

AFAIC, persist= argument to adaptation doesn't make sense and shouldn't 
be worried about much. Deprecated backwards compatibility would be 
*nice*, of course, but don't worry about it if it's a big problem and 
nobody pipes up about the fact they're using it.

> 2. How do we package zope.interface package? We could:
> 
>   a. include copy of code, as e.g. twisted.interface, and have it
>      replace itself with zope.interface if that exists. This opens
>      us to possible _xmlplus style horribleness.
>   b. install zope.interface in our setup.py if it doesn't exist.
>   c. tell people to install it themselves.

Definitely B or C... probably B, unless distutils grows automatic 
dependency downloading/management. :-P

> 3. Do we want our own adapter registry or not? Zope's global registry is
> in zope.component, which is a whole new package we need to install and
> backport to 2.2. And it has lots of other stuff which while interesting
> and possibly useful means more cognitive overhead. My current code has
> its own registry and does not require zope.component. The downside is
> that if we have our own registry, code that uses both Twisted and
> zope.component will cause adaptation to an interface will be slower
> because it will need to check two registries.

Is the current situation duplicating code? If a "registry" is basically 
just a big dict or something, then no big deal... but I think sharing 
code is a good idea, if there is a significant amount of code involved.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040507/0ae43eef/attachment.sig>

From itamar at itamarst.org  Fri May  7 16:57:22 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 07 May 2004 18:57:22 -0400
Subject: [Twisted-Python] New components questions
In-Reply-To: <409C0E30.3080202@twistedmatrix.com>
References: <1083968071.13457.170.camel@sheriffpony>
	<409C0E30.3080202@twistedmatrix.com>
Message-ID: <1083970642.16865.180.camel@sheriffpony>

On Fri, 2004-05-07 at 18:31, Christopher Armstrong wrote:
> Itamar Shtull-Trauring wrote:
> > 1. Currently, if c is a Componentized, IFoo(c, persist=False) will
> > bypass c.getComponent() and do standard lookup. Is it worth supporting
> > this at all? It'd make code cleaner if not, and integration with
> > zope.interface easier.
> 
> AFAIC, persist= argument to adaptation doesn't make sense and shouldn't 
> be worried about much. Deprecated backwards compatibility would be 
> *nice*, of course, but don't worry about it if it's a big problem and 
> nobody pipes up about the fact they're using it.

I have full backwards compat already, though I'd encourage people to use
zope's code directly instead of the compat layer. Question is if this
specific backwards compat feature can be dropped (this will allow
Componentized to work with straight-off zope.interface correctly, right
now it only works via backwards-compat code). That is, I am asking if
persist=False can be dropped for Componentized.

> Is the current situation duplicating code? If a "registry" is basically 
> just a big dict or something, then no big deal... but I think sharing 
> code is a good idea, if there is a significant amount of code involved.

No, the zope.interface has the class definition for a registry,
zope.component just adds a little utility wrapper around it and provides
a global *instance* of the registry that apps can use.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From radix at twistedmatrix.com  Fri May  7 17:04:38 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 07 May 2004 19:04:38 -0400
Subject: [Twisted-Python] New components questions
In-Reply-To: <1083970642.16865.180.camel@sheriffpony>
References: <1083968071.13457.170.camel@sheriffpony>	<409C0E30.3080202@twistedmatrix.com>
	<1083970642.16865.180.camel@sheriffpony>
Message-ID: <409C1606.70809@twistedmatrix.com>

Itamar Shtull-Trauring wrote:
>>AFAIC, persist= argument to adaptation doesn't make sense and shouldn't 
>>be worried about much. Deprecated backwards compatibility would be 
>>*nice*, of course, but don't worry about it if it's a big problem and 
>>nobody pipes up about the fact they're using it.
> 
> 
> I have full backwards compat already, though I'd encourage people to use
> zope's code directly instead of the compat layer. Question is if this
> specific backwards compat feature can be dropped (this will allow
> Componentized to work with straight-off zope.interface correctly, right
> now it only works via backwards-compat code). That is, I am asking if
> persist=False can be dropped for Componentized.

I think so.

>>Is the current situation duplicating code? If a "registry" is basically 
>>just a big dict or something, then no big deal... but I think sharing 
>>code is a good idea, if there is a significant amount of code involved.
> 
> No, the zope.interface has the class definition for a registry,
> zope.component just adds a little utility wrapper around it and provides
> a global *instance* of the registry that apps can use.

Hmm. How about using their registry if it's available?

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040507/889c805e/attachment.sig>

From foom at fuhm.net  Fri May  7 17:10:49 2004
From: foom at fuhm.net (James Y Knight)
Date: Fri, 7 May 2004 19:10:49 -0400
Subject: [Twisted-Python] New components questions
In-Reply-To: <1083968071.13457.170.camel@sheriffpony>
References: <1083968071.13457.170.camel@sheriffpony>
Message-ID: <C76F2EB4-A07B-11D8-9424-000A95A50FB2@fuhm.net>


On May 7, 2004, at 6:14 PM, Itamar Shtull-Trauring wrote:

> 1. Currently, if c is a Componentized, IFoo(c, persist=False) will
> bypass c.getComponent() and do standard lookup. Is it worth supporting
> this at all? It'd make code cleaner if not, and integration with
> zope.interface easier.

No. The only places I've seen persist=False used, it's been a pure 
optimization. E.g. "I know I never want persistence, don't bother 
checking for me". I don't think anyone would cry if it went away. At 
least, I *hope* noone has been insane enough to depend on it.

> 2. How do we package zope.interface package? We could:
>
>   a. include copy of code, as e.g. twisted.interface, and have it
>      replace itself with zope.interface if that exists. This opens
>      us to possible _xmlplus style horribleness.
>   b. install zope.interface in our setup.py if it doesn't exist.
>   c. tell people to install it themselves.

I'd say "b", especially since "c" doesn't appear to be possible at all 
right now? For packaged versions, we should of course not include 
zope.interface at all, but simply depend on its package.

> 3. Do we want our own adapter registry or not? Zope's global registry 
> is
> in zope.component, which is a whole new package we need to install and
> backport to 2.2. And it has lots of other stuff which while interesting
> and possibly useful means more cognitive overhead. My current code has
> its own registry and does not require zope.component. The downside is
> that if we have our own registry, code that uses both Twisted and
> zope.component will cause adaptation to an interface will be slower
> because it will need to check two registries.

Wait, isn't the recommended path for new code that uses twisted 
supposed to be "use zope directly, not our compatibility wrappers"? How 
can we say that if we don't use/support the standard zope registry? 
What is the actual downside to using their registry? You don't have to 
tell people about all the crazy stuff you can do with it, just the one 
"registry adapter" call that they actually need.

James




From itamar at itamarst.org  Fri May  7 17:15:41 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 07 May 2004 19:15:41 -0400
Subject: [Twisted-Python] New components questions
In-Reply-To: <C76F2EB4-A07B-11D8-9424-000A95A50FB2@fuhm.net>
References: <1083968071.13457.170.camel@sheriffpony>
	<C76F2EB4-A07B-11D8-9424-000A95A50FB2@fuhm.net>
Message-ID: <1083971740.13456.184.camel@sheriffpony>

On Fri, 2004-05-07 at 19:10, James Y Knight wrote:

> Wait, isn't the recommended path for new code that uses twisted 
> supposed to be "use zope directly, not our compatibility wrappers"? How 
> can we say that if we don't use/support the standard zope registry? 

I'd say "use zope.interface directly except for register() for
registering adapters, Componentized and Adapter which are in
t.p.components". And if I do what Chris suggested that will be alias for
zope's registry if it's installed.

> What is the actual downside to using their registry? You don't have to 
> tell people about all the crazy stuff you can do with it, just the one 
> "registry adapter" call that they actually need.

Need to backport another package to 2.2, distribute it and keep it
backported, mainly.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From foom at fuhm.net  Fri May  7 18:22:45 2004
From: foom at fuhm.net (James Y Knight)
Date: Fri, 7 May 2004 20:22:45 -0400
Subject: [Twisted-Python] New components questions
In-Reply-To: <1083971740.13456.184.camel@sheriffpony>
References: <1083968071.13457.170.camel@sheriffpony>
	<C76F2EB4-A07B-11D8-9424-000A95A50FB2@fuhm.net>
	<1083971740.13456.184.camel@sheriffpony>
Message-ID: <D4455045-A085-11D8-9424-000A95A50FB2@fuhm.net>

On May 7, 2004, at 7:15 PM, Itamar Shtull-Trauring wrote:
> I'd say "use zope.interface directly except for register() for
> registering adapters, Componentized and Adapter which are in
> t.p.components". And if I do what Chris suggested that will be alias 
> for
> zope's registry if it's installed.

That sounds good to me. And if such a time comes as we actually 
want/need the extra zope registry features, we can either backport it 
then, or else 2.2 will be obsolete and we'll have to backport it to 
2.3. ;) But in any case, old code will be automatically compatible.

James




From glyph at divmod.com  Fri May  7 20:17:24 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Fri, 07 May 2004 22:17:24 -0400
Subject: [Twisted-Python] New components questions
In-Reply-To: <D4455045-A085-11D8-9424-000A95A50FB2@fuhm.net>
References: <1083968071.13457.170.camel@sheriffpony>
	<C76F2EB4-A07B-11D8-9424-000A95A50FB2@fuhm.net>
	<1083971740.13456.184.camel@sheriffpony>
	<D4455045-A085-11D8-9424-000A95A50FB2@fuhm.net>
Message-ID: <1083982644.19334.49.camel@kazekage>

On Fri, 2004-05-07 at 20:22, James Y Knight wrote:
> On May 7, 2004, at 7:15 PM, Itamar Shtull-Trauring wrote:
> > I'd say "use zope.interface directly except for register() for
> > registering adapters, Componentized and Adapter which are in
> > t.p.components". And if I do what Chris suggested that will be alias 
> > for
> > zope's registry if it's installed.
> 
> That sounds good to me. And if such a time comes as we actually 
> want/need the extra zope registry features, we can either backport it 
> then, or else 2.2 will be obsolete and we'll have to backport it to 
> 2.3. ;) But in any case, old code will be automatically compatible.

Why do we not want to provide this kind of aliasing for the whole
interfaces package in order to avoid packaging issues?  I still think
that importing twisted.zope.interface is less problematic than importing
zope directly.  (It may be desireable for us to rev components less
frequently than zope, for example.)

What exactly about the _xmlplus mess made it a nightmare and why?  I
have vague memories of horribleness but I gave up too early to be
seriously scarred.




From glyph at divmod.com  Fri May  7 20:44:05 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Fri, 07 May 2004 22:44:05 -0400
Subject: [Twisted-Python] New components questions
In-Reply-To: <409C1606.70809@twistedmatrix.com>
References: <1083968071.13457.170.camel@sheriffpony>
	<409C0E30.3080202@twistedmatrix.com>
	<1083970642.16865.180.camel@sheriffpony>
	<409C1606.70809@twistedmatrix.com>
Message-ID: <1083984245.19334.102.camel@kazekage>

On Fri, 2004-05-07 at 19:04, Christopher Armstrong wrote:
> Itamar Shtull-Trauring wrote:

> > I have full backwards compat already, though I'd encourage people to use
> > zope's code directly instead of the compat layer. Question is if this
> > specific backwards compat feature can be dropped (this will allow
> > Componentized to work with straight-off zope.interface correctly, right
> > now it only works via backwards-compat code). That is, I am asking if
> > persist=False can be dropped for Componentized.
> I think so.

Yeah. agreed.  Just make sure that the _adapter_ can still say that it
doesn't want to be persistent; code that really, really seriously wants
to remove a persistent adapter after it's created one can do just that;
componentized.unsetComponent.

Is it possible that we can move to a new-style Componentized somewhere
else?  There are a lot of slightly-incompatible changes I'd like to
make, most especially to slotlessly subclass dict, so that the unweildy
names like 'setComponent' and 'unsetComponent' become 'x[IY] = y' and
'del x[IY]', and to save space on what should be as lightweight an
object as possible...

> Hmm. How about using their registry if it's available?

I do like this idea.  How do we determine if it's available though?  It
seems like there could be a lot of edge cases.

Thank you, Itamar, for doing all this work.




From itamar at itamarst.org  Fri May  7 20:57:04 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 07 May 2004 22:57:04 -0400
Subject: [Twisted-Python] New components questions
In-Reply-To: <1083982644.19334.49.camel@kazekage>
References: <1083968071.13457.170.camel@sheriffpony>
	<C76F2EB4-A07B-11D8-9424-000A95A50FB2@fuhm.net>
	<1083971740.13456.184.camel@sheriffpony>
	<D4455045-A085-11D8-9424-000A95A50FB2@fuhm.net>
	<1083982644.19334.49.camel@kazekage>
Message-ID: <1083985024.13457.190.camel@sheriffpony>

On Fri, 2004-05-07 at 22:17, Glyph Lefkowitz wrote:

> What exactly about the _xmlplus mess made it a nightmare and why?  I
> have vague memories of horribleness but I gave up too early to be
> seriously scarred.

1. User installs Twisted which has z.i v0.9
2. User runs software happily
3. User installs z.i v0.91, twisted now uses thaat
4. Software suddenly breaks due to change in z.i - but it's very
confusing why because as far as user is concerned they didn't change
*twisted*.

Except it's in practice unlikely.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From itamar at itamarst.org  Fri May  7 20:59:35 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 07 May 2004 22:59:35 -0400
Subject: [Twisted-Python] New components questions
In-Reply-To: <1083984245.19334.102.camel@kazekage>
References: <1083968071.13457.170.camel@sheriffpony>
	<409C0E30.3080202@twistedmatrix.com>
	<1083970642.16865.180.camel@sheriffpony>
	<409C1606.70809@twistedmatrix.com>
	<1083984245.19334.102.camel@kazekage>
Message-ID: <1083985174.25586.194.camel@sheriffpony>

On Fri, 2004-05-07 at 22:44, Glyph Lefkowitz wrote:

> Yeah. agreed.  Just make sure that the _adapter_ can still say that it
> doesn't want to be persistent; code that really, really seriously wants
> to remove a persistent adapter after it's created one can do just that;
> componentized.unsetComponent.

That's internal code in Adapter and Componentized, no? I won't be
touching that.

> Is it possible that we can move to a new-style Componentized somewhere
> else?  There are a lot of slightly-incompatible changes I'd like to
> make, most especially to slotlessly subclass dict, so that the unweildy
> names like 'setComponent' and 'unsetComponent' become 'x[IY] = y' and
> 'del x[IY]', and to save space on what should be as lightweight an
> object as possible...

Sure, think up a new name. To be honest, I think the way Componentized
interacts with Adapter is ugly. I haven't looked at it closely enough to
be sure exactly why - I just glanced at it, but really I'd think a
special method that returns some info to the Componentized would be
cleaner than checking attributes. Or something.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From itamar at itamarst.org  Fri May  7 21:28:02 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 07 May 2004 23:28:02 -0400
Subject: [Twisted-Python] Reading material
Message-ID: <1083986881.25587.201.camel@sheriffpony>

For PB developers:
http://research.sun.com/techrep/1994/smli_tr-94-29.pdf

For people working on networking in general:
http://web.mit.edu/Saltzer/www/publications/endtoend/endtoend.txt

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From itamar at itamarst.org  Fri May  7 21:32:45 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 07 May 2004 23:32:45 -0400
Subject: [Twisted-Python] You also want to read this
Message-ID: <1083987165.13457.203.camel@sheriffpony>

http://intertwingly.net/stories/2004/05/04/reality-is-corrosive.html




From gary at zope.com  Mon May 10 08:45:35 2004
From: gary at zope.com (Gary Poster)
Date: Mon, 10 May 2004 10:45:35 -0400
Subject: Dependency mgmt (was Re: [Twisted-Python] New components questions)
In-Reply-To: <409C0E30.3080202@twistedmatrix.com>
References: <1083968071.13457.170.camel@sheriffpony>
	<409C0E30.3080202@twistedmatrix.com>
Message-ID: <409F958F.2000609@zope.com>



Christopher Armstrong wrote:

> Itamar Shtull-Trauring wrote:
>
>> 2. How do we package zope.interface package? We could:
>>
>>   a. include copy of code, as e.g. twisted.interface, and have it
>>      replace itself with zope.interface if that exists. This opens
>>      us to possible _xmlplus style horribleness.
>>   b. install zope.interface in our setup.py if it doesn't exist.
>>   c. tell people to install it themselves.
>
>
> Definitely B or C... probably B, unless distutils grows automatic 
> dependency downloading/management. :-P
>
FWIW Fred Drake (PythonLabs/ZC) is working on zpkg: a packaging and 
dependency management tool, integrated with distutils.  I believe the 
intent is to propose this as a Python tool eventually (presumably with a 
less "z..."-like name?).  I know the immediate intent is to allow 
various different distributions of the Zope 3 code (including perhaps 
just the interface package for you all) to be distributed.

That description doesn't give it much justice, but this should begin to:

http://zope.org/Members/fdrake/zpkgtools/

I believe Fred is still actively seeking feedback, and requests feedback 
and questions on zope3-dev at zope.org.

Gary



From jsaker at americanrelay.com  Mon May 10 09:13:02 2004
From: jsaker at americanrelay.com (James R. Saker Jr.)
Date: Mon, 10 May 2004 10:13:02 -0500
Subject: [Twisted-Python] Missing something basic on defer and postgresql
Message-ID: <1084201982.26071.90.camel@localhost>

I think I'm missing something rather basic and would greatly appreciate
any suggestions.

After working through the Twisted RDBMS example (with no luck - the
second RDBMS example gets a deferred but fails to run
.addCallback(printResult), I thought I'd read more about deferreds in
its own section and made a simple postgresql example using the third
example in the Deferreds section. 

When I run this (with database = postgresql, dbname = mydb, table =
myuser), it yields the following:

Got to getData
got to gotResults with name = Joe

...but never runs addCallback(self, _toHTML). Apparently I'm missing
something pretty obvious about callbacks - and may be the same issue I
dealt with in the RDBMS example. Any suggestions? 

jamie


##~ begin dbserver.py
from twisted.enterprise import adbapi
from twisted.internet import reactor, defer
                                                                                                                    
dbpool = adbapi.ConnectionPool("psycopg", 'dbname=mydb user=postgres')
                                                                                                                    
class Getter:
   def gotResults(self, name):
      print "got to gotResults with name = %s" % name
      return dbpool.runQuery("SELECT age FROM myuser WHERE name = '%s'"
% name)
                                                                                                                    
   def _toHTML(self, r):
      print "Got to _toHTML"
      print "Result is: %s" % r
                                                                                                                    
   def getData(self, x):
      self.d = defer.Deferred()
      print "Got to getData"
      reactor.callLater(2, self.gotResults, x)
      self.d.addCallback(self._toHTML)
      return self.d
                                                                                                                    
def printData(d):
      "Got to printData"
      print d
                                                                                                                    
def printError(failure):
      import sys
      sys.stderr.write(str(failure))
                                                                                                                    
if __name__ == '__main__':
                                                                                                                    
      g = Getter()
      d = g.getData('Joe')
      d.addCallback(printData)
      d.addErrback(printError)
                                                                                                                    
reactor.callLater(4, reactor.stop); reactor.run()



##------------postgresql database table info----------------------------

mydb=# select * from myuser;
 pkid |  name  | age
------+--------+-----
    1 | Joe    |  36
    2 | Sally  |  15
    3 | Peanut |   5
(3 rows)

mydb=# SELECT age FROM myuser WHERE name = 'Joe';
 age
-----
  36
(1 row)







From glyph at divmod.com  Mon May 10 09:38:16 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 10 May 2004 11:38:16 -0400
Subject: [Twisted-Python] Missing something basic on defer and postgresql
In-Reply-To: <1084201982.26071.90.camel@localhost>
References: <1084201982.26071.90.camel@localhost>
Message-ID: <1084203496.2761.12.camel@kazekage>

On Mon, 2004-05-10 at 11:13, James R. Saker Jr. wrote:
> I think I'm missing something rather basic and would greatly appreciate
> any suggestions.

You're never calling self.d.callback() with a value, and thus self.d
never fires.

Perhaps you are interested in the Deferred returned from runQuery, not
creating your own?




From radix at twistedmatrix.com  Mon May 10 09:41:28 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 10 May 2004 11:41:28 -0400
Subject: [Twisted-Python] Missing something basic on defer and postgresql
In-Reply-To: <1084201982.26071.90.camel@localhost>
References: <1084201982.26071.90.camel@localhost>
Message-ID: <409FA2A8.7050109@twistedmatrix.com>

James R. Saker Jr. wrote:
> I think I'm missing something rather basic and would greatly appreciate
> any suggestions.
> 
> After working through the Twisted RDBMS example (with no luck - the
> second RDBMS example gets a deferred but fails to run
> .addCallback(printResult), I thought I'd read more about deferreds in
> its own section and made a simple postgresql example using the third
> example in the Deferreds section. 
> 
> When I run this (with database = postgresql, dbname = mydb, table =
> myuser), it yields the following:
> 
> Got to getData
> got to gotResults with name = Joe
> 
> ...but never runs addCallback(self, _toHTML). Apparently I'm missing
> something pretty obvious about callbacks - and may be the same issue I
> dealt with in the RDBMS example. Any suggestions? 
> 
> jamie


> ##~ begin dbserver.py
> from twisted.enterprise import adbapi
> from twisted.internet import reactor, defer
>                                                                                                                     
> dbpool = adbapi.ConnectionPool("psycopg", 'dbname=mydb user=postgres')
>                                                                                                                     
> class Getter:
>    def gotResults(self, name):
>       print "got to gotResults with name = %s" % name
>       return dbpool.runQuery("SELECT age FROM myuser WHERE name = '%s'"
> % name)
>                                                                                                                     
>    def _toHTML(self, r):
>       print "Got to _toHTML"
>       print "Result is: %s" % r
>                                                                                                                     
>    def getData(self, x):
>       self.d = defer.Deferred()
>       print "Got to getData"
>       reactor.callLater(2, self.gotResults, x)
>       self.d.addCallback(self._toHTML)
>       return self.d

Yeah, this is wrong. You've got two Deferreds here: the one you cerated 
manually in getData, and the one that runQuery returns. You're *throwing 
away* the one that runQuery returns, and you're never triggering a 
callback on the one that you're creating manually. It doesn't seem that 
there's a reason to create your own Deferred, anyway, so replace getData 
with this:

def getData(self, x):
     d = dbpool.runQuery("...") # no need for self.d, afaics
     d.addCallback(self._toHTML)
     return d

And get rid of gotResults.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040510/ae6a100c/attachment.sig>

From radix at twistedmatrix.com  Mon May 10 09:44:28 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 10 May 2004 11:44:28 -0400
Subject: Dependency mgmt (was Re: [Twisted-Python] New components
	questions)
In-Reply-To: <409F958F.2000609@zope.com>
References: <1083968071.13457.170.camel@sheriffpony>	<409C0E30.3080202@twistedmatrix.com>
	<409F958F.2000609@zope.com>
Message-ID: <409FA35C.5090902@twistedmatrix.com>

Gary Poster wrote:
> FWIW Fred Drake (PythonLabs/ZC) is working on zpkg: a packaging and 

Yeah, I'm already aware, thanks.


-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040510/d81109cc/attachment.sig>

From jsaker at americanrelay.com  Mon May 10 12:05:37 2004
From: jsaker at americanrelay.com (James R. Saker Jr.)
Date: Mon, 10 May 2004 13:05:37 -0500
Subject: [Twisted-Python] Indeed it works...
Message-ID: <1084212337.2195.2.camel@localhost>

Thanks Christopher and Glyph - indeed it works (this is all strange and
new to a long-time network engineer!)

Modified as Christopher suggested, it returns a tuple:

Result is: [(36,)]

Nifty... thanks!

Jamie







From behnel_ml at gkec.informatik.tu-darmstadt.de  Tue May 11 09:03:04 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Tue, 11 May 2004 17:03:04 +0200
Subject: [Twisted-Python] When do calls to transport.write() block ?
Message-ID: <40A0EB28.6060201@gkec.tu-darmstadt.de>

Hi everyone!

I have looked through quite a bit of Twisted's code by now, but I just can't manage to figure out how those transport.write()s work. The servers I looked through always come back to this without putting any special treatment into it.

My question is:

If a server starts sending as fast as it can, what will happen to the output queue? Will Twisted just eat up all memory with buffers? Will it start blocking? Will it open up a thread? What will it do?

Since this really is an important question, I'm sort of worried that it's not a big issue in the documentation...

Thanks for any hints,
Stefan




From behnel_ml at gkec.informatik.tu-darmstadt.de  Tue May 11 09:12:32 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Tue, 11 May 2004 17:12:32 +0200
Subject: [Twisted-Python] When do calls to transport.write() block ?
Message-ID: <40A0ED60.2070007@gkec.tu-darmstadt.de>

Hi everyone!

I have looked through quite a bit of Twisted's code by now, but I just can't manage to figure out how those transport.write()s work. The servers I looked through always come back to this without putting any special treatment into it.

My question is:

If a server starts sending as fast as it can, what will happen to the output queue? Will Twisted just eat up all memory with buffers? Will it start blocking? Will it open up a thread? What will it do?

Since this really is an important question, I'm sort of worried that it's not a big issue in the documentation...

Thanks for any hints,
Stefan





From itamar at itamarst.org  Tue May 11 09:21:10 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 11 May 2004 11:21:10 -0400
Subject: [Twisted-Python] When do calls to transport.write() block ?
In-Reply-To: <40A0ED60.2070007@gkec.tu-darmstadt.de>
References: <40A0ED60.2070007@gkec.tu-darmstadt.de>
Message-ID: <1084288870.9255.26.camel@sheriffpony>

On Tue, 2004-05-11 at 11:12, Stefan Behnel wrote:

> If a server starts sending as fast as it can, what will happen to the
> output queue? Will Twisted just eat up all memory with buffers? Will
> it start blocking? Will it open up a thread? What will it do?

It will eat up all your memory. You should, therefore, not do that.
Instead, use producers and consumers (this is e.g. how the web server
sends large files):

http://itamarst.org/writings/etech04/twisted_internet-101.html

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html





From behnel_ml at gkec.informatik.tu-darmstadt.de  Tue May 11 09:49:11 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Tue, 11 May 2004 17:49:11 +0200
Subject: [Twisted-Python] When do calls to transport.write() block ?
In-Reply-To: <1084288870.9255.26.camel@sheriffpony>
References: <40A0ED60.2070007@gkec.tu-darmstadt.de>
	<1084288870.9255.26.camel@sheriffpony>
Message-ID: <40A0F5F7.4020409@gkec.tu-darmstadt.de>

Thank you for your quick answer!

Itamar Shtull-Trauring wrote:
>>If a server starts sending as fast as it can, what will happen to the
>>output queue? Will Twisted just eat up all memory with buffers? Will
>>it start blocking? Will it open up a thread? What will it do?
> 
> It will eat up all your memory. You should, therefore, not do that.
> Instead, use producers and consumers (this is e.g. how the web server
> sends large files):
> 
> http://itamarst.org/writings/etech04/twisted_internet-101.html

That's about the idea I had about it, but I couldn't quite grasp it.

I'm curious though: wouldn't it be much more pythonic to allow users to register a generator with the transport? A generator usually does exactly what is expected from a pull-producer.

Do you/does anyone know if that's foreseen somewhere in Twisted, either now or in a later version?

Stefan



From itamar at itamarst.org  Tue May 11 10:04:23 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 11 May 2004 12:04:23 -0400
Subject: [Twisted-Python] When do calls to transport.write() block ?
In-Reply-To: <40A0F5F7.4020409@gkec.tu-darmstadt.de>
References: <40A0ED60.2070007@gkec.tu-darmstadt.de>
	<1084288870.9255.26.camel@sheriffpony>
	<40A0F5F7.4020409@gkec.tu-darmstadt.de>
Message-ID: <1084291462.9257.34.camel@sheriffpony>

On Tue, 2004-05-11 at 11:49, Stefan Behnel wrote:

> I'm curious though: wouldn't it be much more pythonic to allow users
> to register a generator with the transport? A generator usually does
> exactly what is expected from a pull-producer.

An iterator, you mean. Hmm, because even a pull producer may not have
data on hand, you'd need to have a special object which means "I don't
have data, sorry" that the iterator can return. And you'd still need API
for push producers. OTOH it probably would be more efficient.

What we were thinking of doing is getting rid of the concept of
producers altogether and just exposing "buffers empty and writable" and
"buffers full" callback events similar to dataReceived or
connectionLost.

-- 
Itamar Shtull-Trauring    http://itamarst.org
Looking for a job -- http://itamarst.org/resume.html




From behnel_ml at gkec.informatik.tu-darmstadt.de  Tue May 11 10:50:19 2004
From: behnel_ml at gkec.informatik.tu-darmstadt.de (Stefan Behnel)
Date: Tue, 11 May 2004 18:50:19 +0200
Subject: [Twisted-Python] When do calls to transport.write() block ?
In-Reply-To: <1084291462.9257.34.camel@sheriffpony>
References: <40A0ED60.2070007@gkec.tu-darmstadt.de>	<1084288870.9255.26.camel@sheriffpony>	<40A0F5F7.4020409@gkec.tu-darmstadt.de>
	<1084291462.9257.34.camel@sheriffpony>
Message-ID: <40A1044B.7010900@gkec.tu-darmstadt.de>

Hi!

Itamar Shtull-Trauring wrote:
> An iterator, you mean. Hmm, because even a pull producer may not have
> data on hand, you'd need to have a special object which means "I don't
> have data, sorry" that the iterator can return.

That would be "None", I guess. What else could it possibly mean to write None to the transport?


> And you'd still need API
> for push producers.

True. However, the registration methods could easily distinguish producers and iterators. So maybe this could be handled transparent for the API. It would not even break anything if the methods defaulted to using the object as a producer if it has the right methods and only check for iterator capabilities if it does not.


> What we were thinking of doing is getting rid of the concept of
> producers altogether and just exposing "buffers empty and writable" and
> "buffers full" callback events similar to dataReceived or
> connectionLost.

Sounds reasonable to me.

Thanks again for your help,
Stefan




From bob at redivi.com  Tue May 11 11:02:38 2004
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 11 May 2004 13:02:38 -0400
Subject: [Twisted-Python] When do calls to transport.write() block ?
In-Reply-To: <40A0F5F7.4020409@gkec.tu-darmstadt.de>
References: <40A0ED60.2070007@gkec.tu-darmstadt.de>
	<1084288870.9255.26.camel@sheriffpony>
	<40A0F5F7.4020409@gkec.tu-darmstadt.de>
Message-ID: <019959AA-A36D-11D8-BCDD-000A95686CD8@redivi.com>


On May 11, 2004, at 11:49 AM, Stefan Behnel wrote:

> Thank you for your quick answer!
>
> Itamar Shtull-Trauring wrote:
>>> If a server starts sending as fast as it can, what will happen to the
>>> output queue? Will Twisted just eat up all memory with buffers? Will
>>> it start blocking? Will it open up a thread? What will it do?
>> It will eat up all your memory. You should, therefore, not do that.
>> Instead, use producers and consumers (this is e.g. how the web server
>> sends large files):
>> http://itamarst.org/writings/etech04/twisted_internet-101.html
>
> That's about the idea I had about it, but I couldn't quite grasp it.
>
> I'm curious though: wouldn't it be much more pythonic to allow users 
> to register a generator with the transport? A generator usually does 
> exactly what is expected from a pull-producer.
>
> Do you/does anyone know if that's foreseen somewhere in Twisted, 
> either now or in a later version?

Generators/iterators aren't prevalent in Twisted because until 
relatively recently it didn't depend on Python 2.2 or later.

-bob




From jsaker at americanrelay.com  Wed May 12 13:52:34 2004
From: jsaker at americanrelay.com (James R. Saker Jr.)
Date: Wed, 12 May 2004 14:52:34 -0500
Subject: [Twisted-Python] adbapi/postgresql and xml-rpc
Message-ID: <1084391554.5169.24.camel@localhost>

Have a design question to pass to the list. I've gotten my distributed
app working - pulling snort data from a postgresql database via
twisted's adbapi and handling via xml-rpc - though xml-rpc is screaming
about not being able to serialize postgresql's timestamp format. 

For instance, this query works (using a query test client and a "take
any SQL string in and process it" xmlrpc method on the server local to
database):

# snipped python code setting things up. here's the xmlrpc call:
(answer,) = connection.remote("fetch", ('SELECT sid, cid, signature from
event LIMIT 5',))
print answer

prints:

[[1, 1, 1], [1, 2, 2], [1, 3, 1], [1, 4, 3], [1, 5, 1]]

(nice and easy to work with on client side)

but by adding the timestamp to the select query (SELECT sid, cid,
signature, timestamp...), I get the dreaded can't serialize output
error:

Traceback (most recent call last):
  File "x8.py", line 59, in ?
    (answer,) = connection.remote("fetch", ('SELECT sid, cid, signature,
timestamp from event LIMIT 5',))
## some deleted
  File "/usr/lib/python2.3/xmlrpclib.py", line 742, in close
    raise Fault(**self._stack[0])
xmlrpclib.Fault: <Fault 8002: "can't serialize output">


QUESTION: While I think I could build more precise queries on the server
side, e.g. xmlrpc_getAllSIDbyDate and massage timestamp and other
formats before dumping into xmlrpc, this might not be the most elegant
method. It makes every query something both ends have to be recoded for
- not just the client - simply because I can't get timestamp to pass
through XMLRPC. I've tried converting the tuples from the adbapi output
to strings before handing back but that has other issues.

Is this a limitation of XMLRPC that would merit using an approach like
PB instead? Eventually my text client will go the way of a Qt GUI and I
thought XMLRPC would make a nice lightweight distributed interface, but
the serialization issues are making me wonder if the approach is right.

Jamie






From golux at comcast.net  Wed May 12 14:30:57 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Wed, 12 May 2004 16:30:57 -0400
Subject: [Twisted-Python] adbapi/postgresql and xml-rpc
In-Reply-To: <1084391554.5169.24.camel@localhost>
References: <1084391554.5169.24.camel@localhost>
Message-ID: <40A28981.3060101@comcast.net>

James R. Saker Jr. wrote:

> QUESTION: While I think I could build more precise queries on the server
> side, e.g. xmlrpc_getAllSIDbyDate and massage timestamp and other
> formats before dumping into xmlrpc, this might not be the most elegant
> method. It makes every query something both ends have to be recoded for
> - not just the client - simply because I can't get timestamp to pass
> through XMLRPC. I've tried converting the tuples from the adbapi output
> to strings before handing back but that has other issues.
> 
> Is this a limitation of XMLRPC that would merit using an approach like
> PB instead? Eventually my text client will go the way of a Qt GUI and I
> thought XMLRPC would make a nice lightweight distributed interface, but
> the serialization issues are making me wonder if the approach is right.

I also send adbapi results over xml-rpc, using strftime to convert
the mxDateTimes to an ISO string format and then converting them
back to mx.DateTimes with DateTime.ISO.ParseDateTime.  Not elegant,
but it does the job.  Note that PB's jelly will also complain about
DateTimes.

Steve




From fog at initd.org  Wed May 12 16:25:24 2004
From: fog at initd.org (Federico Di Gregorio)
Date: Thu, 13 May 2004 00:25:24 +0200
Subject: [Twisted-Python] adbapi/postgresql and xml-rpc
In-Reply-To: <40A28981.3060101@comcast.net>
References: <1084391554.5169.24.camel@localhost> <40A28981.3060101@comcast.net>
Message-ID: <1084400724.2795.5.camel@localhost>

Lì mercoledì, 2004/05/12 alle 16:30, -0400, Stephen Waterbury ha
scritto:
> > Is this a limitation of XMLRPC that would merit using an approach like
> > PB instead? Eventually my text client will go the way of a Qt GUI and I
> > thought XMLRPC would make a nice lightweight distributed interface, but
> > the serialization issues are making me wonder if the approach is right.
> 
> I also send adbapi results over xml-rpc, using strftime to convert
> the mxDateTimes to an ISO string format and then converting them
> back to mx.DateTimes with DateTime.ISO.ParseDateTime.  Not elegant,
> but it does the job.  Note that PB's jelly will also complain about

why don't you people switch to psycopg nd register a custom type
converter using new_type/register_type? you can easily nd automagically
convert dates and times to strings with a 3-lines callable object.

federico

-- 
Federico Di Gregorio                         http://people.initd.org/fog
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
  We are all dust, Saqi, so play the lute
                    We are all wind, Saqi, so bring wine. -- Omar Khayam
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: Questa parte del messaggio è firmata
URL: </pipermail/twisted-python/attachments/20040513/76f9d8ed/attachment.sig>

From golux at comcast.net  Wed May 12 19:31:04 2004
From: golux at comcast.net (Stephen Waterbury)
Date: Wed, 12 May 2004 21:31:04 -0400
Subject: [Twisted-Python] adbapi/postgresql and xml-rpc
In-Reply-To: <1084400724.2795.5.camel@localhost>
References: <1084391554.5169.24.camel@localhost> <40A28981.3060101@comcast.net>
	<1084400724.2795.5.camel@localhost>
Message-ID: <40A2CFD8.2060201@comcast.net>

Federico Di Gregorio wrote:
> Lì mercoledì, 2004/05/12 alle 16:30, -0400, Stephen Waterbury ha
> scritto:
> 
>>>Is this a limitation of XMLRPC that would merit using an approach like
>>>PB instead? Eventually my text client will go the way of a Qt GUI and I
>>>thought XMLRPC would make a nice lightweight distributed interface, but
>>>the serialization issues are making me wonder if the approach is right.
>>
>>I also send adbapi results over xml-rpc, using strftime to convert
>>the mxDateTimes to an ISO string format and then converting them
>>back to mx.DateTimes with DateTime.ISO.ParseDateTime.  Not elegant,
>>but it does the job.  Note that PB's jelly will also complain about
> 
> why don't you people switch to psycopg nd register a custom type
> converter using new_type/register_type? you can easily nd automagically
> convert dates and times to strings with a 3-lines callable object.

Mine is part of a general type converter that I have (cook()/uncook())
that handles all types I need to serialize.  psycopg might make the 
implementation of my cook/uncook functions slightly more concise, but
right now they are independent of the specific dbapi that I use, so I
might want to keep it that way (more componentized ;).

- Steve




From soso_pub at yahoo.com  Thu May 13 12:18:07 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Thu, 13 May 2004 11:18:07 -0700 (PDT)
Subject: [Twisted-Python] Getting error code
Message-ID: <20040513181807.31293.qmail@web14803.mail.yahoo.com>

Hi,

Is there a way to extract the error code from a
Failure instance? For example when
clientConnectionFailed is called the 'value' field of
the Failure instance is 'Connection was refused by
other side: 10061: Unknown error.'. Can I get 10061
somehow as I don't feel safe  parsing this string.

Thanks,
Sorin



	
		
__________________________________
Do you Yahoo!?
Yahoo! Movies - Buy advance tickets for 'Shrek 2'
http://movies.yahoo.com/showtimes/movie?mid=1808405861 



From itamar at itamarst.org  Thu May 13 12:27:59 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 13 May 2004 14:27:59 -0400
Subject: [Twisted-Python] Getting error code
In-Reply-To: <20040513181807.31293.qmail@web14803.mail.yahoo.com>
References: <20040513181807.31293.qmail@web14803.mail.yahoo.com>
Message-ID: <1084472879.18231.102.camel@sheriffpony>

On Thu, 2004-05-13 at 14:18, Sorin C. wrote:

> Is there a way to extract the error code from a
> Failure instance? For example when
> clientConnectionFailed is called the 'value' field of
> the Failure instance is 'Connection was refused by
> other side: 10061: Unknown error.'. Can I get 10061
> somehow as I don't feel safe  parsing this string.

value.errno should do it. A better idea would be to go by exception
type, e.g. in this case you should be getting a
twisted.internet.error.ConnectionRefusedError or something instance as
the value object.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From jsaker at americanrelay.com  Thu May 13 12:42:37 2004
From: jsaker at americanrelay.com (James R. Saker Jr.)
Date: Thu, 13 May 2004 13:42:37 -0500
Subject: [Twisted-Python] XML-RPC & objects that won't serialize
Message-ID: <1084473757.11184.8.camel@localhost>


Steve writes:
>...then converting them back to mx.DateTimes with
DateTime.ISO.ParseDateTime.  Not elegant, but it does the job.  Note
that PB's jelly will also complain about DateTimes.

Yes; I also resorted to converting them before passing back to the
client. Was curious if there was a better way. Per Federico's post, I
actually started with psycopg but found several twisted references to
preferring pyPgSQL. I tested with about 110,000 records passed (in about
15-20 seconds - most of which tcpdump reports as data xfer activity) so
it's not impairing things much.

Overall, I'm really interested moving to a server-based ssh menu
interface (via conch presumably, though the documentation seems sparse
and stale and server examples somewhat limited; I've seen older posts
here on a similar thread. If I can get up to speed on all this, it might
be an area to volunteer my help) and a Qt client possibly implemented
through PB.

Twisted's terribly interested (and overwhelming at the same time).
Thanks all for being kind to this newb!

Jamie





From itamar at itamarst.org  Thu May 13 13:12:06 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 13 May 2004 15:12:06 -0400
Subject: [Twisted-Python] XML-RPC & objects that won't serialize
In-Reply-To: <1084473757.11184.8.camel@localhost>
References: <1084473757.11184.8.camel@localhost>
Message-ID: <1084475526.18231.141.camel@sheriffpony>

On Thu, 2004-05-13 at 14:42, James R. Saker Jr. wrote:

> I actually started with psycopg but found several twisted references to
> preferring pyPgSQL.

We had one of those (for no good reason!) in the enterpise howto. I got
rid of it yesterday.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From soso_pub at yahoo.com  Thu May 13 13:19:37 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Thu, 13 May 2004 12:19:37 -0700 (PDT)
Subject: [Twisted-Python] Getting error code
In-Reply-To: <1084472879.18231.102.camel@sheriffpony>
Message-ID: <20040513191937.6568.qmail@web14808.mail.yahoo.com>


--- Itamar Shtull-Trauring <itamar at itamarst.org>
wrote:
>  A better idea would be to
> go by exception
> type, e.g. in this case you should be getting a
> twisted.internet.error.ConnectionRefusedError or
> something instance as
> the value object.
 
Thanks, by type indeed is better.

Sorin



	
		
__________________________________
Do you Yahoo!?
Yahoo! Movies - Buy advance tickets for 'Shrek 2'
http://movies.yahoo.com/showtimes/movie?mid=1808405861 



From db3l at fitlinxx.com  Thu May 13 15:19:13 2004
From: db3l at fitlinxx.com (David Bolen)
Date: 13 May 2004 17:19:13 -0400
Subject: [Twisted-Python] PB locally logging errors from deferreds in
	remote_* methods
Message-ID: <uoeosrpny.fsf@fitlinxx.com>

I was wondering if anyone knew the rationale for why Twisted's PB logs
any errors (using log.err) that may be returned from a deferred that
has been returned in response to a remote_* call on a pb.Referenceable
object?  It seems like a fairly standard situation, where the error is
just something to be reflected back to the client.

For example, I've got a series of components in a system I'm working
on that were designed from the beginning to return deferreds from
their APIs, even when they operated locally (e.g., there's plenty of
use of defer.succeed() and defer.fail()).  This was specifically to
isolate calling code from the anticipated future case when some of
those components might be relocated remotely, and the application code
would be interacting with remote wrapper objects using PB to
communicate with the now relocated components.

So I'm working on the future case now, but found that whenever one of
my component entry points decided to return an error (which was always
done by sending a Failure up the deferred chain), while that error is
being reflected back to the wrapper object, my server side is also
logging the error on the console.

>From what I can see that's because pb.py uses _sendFailure as the
Errback for a deferred returned from a remote_* method, where
_sendFailure logs the error (with a prefix line as a log message, but
the failure object as an error message).  But to me this is like
logging every time a client application receives a proper error
notification to an API request.

If the remote_* methods were raise()ing the exceptions, I could
subclass pb.Error and then _sendError gets used instead, but there's
no equivalent on the deferred chain path.

For my own use, locally modifying pb.py to use _sendError in the
Errback rather than _sendFailure cleans it up, but I was wondering if
anyone else had noticed this and/or felt that _sendError was a more
appropriate Errback in the first place?  It doesn't feel right to
consider it a bug, since it feels more like a design decision, but I'd
think it would be nice to have at least as much control over the local
logging of errors in the deferred chain as you have with locally
raised exceptions.

Thanks.

-- David




From barry at python.org  Thu May 13 16:19:56 2004
From: barry at python.org (Barry Warsaw)
Date: Thu, 13 May 2004 18:19:56 -0400
Subject: [Twisted-Python] New email FeedParser
Message-ID: <1084486795.28228.812.camel@anthem.wooz.org>

At Pycon, I was talking with Glyph and others about the email parser in
Python 2.3.  Anthony Baxter, Thomas Wouters and I were having a little
email-sig sprint, and we all agreed about the major problems with the
current email parser.

- It can throw exceptions parsing some messages.  These exceptions can
be difficult to handle.

- You must slurp the entire message into memory before you can start
parsing it.

Over in the email-sig we've been talking and working on a new parser,
called the FeedParser which eliminates both of these problems.  This
parser also has the advantage of being much more RFC compliant, IMO
<2046 wink>.  In fact, we now have a new FeedParser.py in Python 2.4cvs
(slated to be email 3.0) which I think does a very good job of parsing
all manner of valid and invalid emails.

The old email.Parser.Parser interface continues to exist for backward
compatibility.  The docs have not been updated yet, but the unit tests
have.  Note that the FeedParser, if it encounters broken MIME, will add
'defects' to a message object and continue on as best it can.  You can
check the message's .defects attribute; if it exists it will be a list
of instances providing more information about what type(s) of defects
were encounter.

To use it, you instantiate an email.FeedParser.FeedParser and
continually call its .feed() method, which takes a single argument of
arbitrary length string data.  The data need not be a complete line,
although the FeedParser will split it into lines (using any of the three
common line endings), gulping input a line at a time.  Internally, the
parsing routines are generators that yield when they need more data
(feed() itself just returns).  When you've feed it all the data there's
ever going to be, you call .close() on the parser; the rest of the data
is consumed and you get back the root email object.

Because I think we're largely done with the FeedParser[1], and because
some of the Twisted guys were interested in this stuff, I'm sending this
message so you can grab the new parser and see if it's going to fit the
bill.  For now, you'll have to get it out of Python's cvs, but at some
point when we've addressed the other issues in the email package, we'll
make a distutils release.

Note that email 3.0 will be compatible with Python 2.3 but nothing
earlier.  Please follow up with any discussions to email-sig at python.org.

Enjoy,
-Barry

[1] Although see these messages for open issues:
http://mail.python.org/pipermail/email-sig/2004-May/000114.html
http://mail.python.org/pipermail/email-sig/2004-May/000118.html





From laforge49 at yahoo.co.in  Fri May 14 01:17:42 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Fri, 14 May 2004 08:17:42 +0100 (BST)
Subject: [Twisted-Python] bsddb?
Message-ID: <20040514071742.53917.qmail@web8306.mail.in.yahoo.com>

New to twisted, interested in porting a project, but I can't find anything on using bsddb.
 
I assume I need a dedicated thread. Has anyone else worked on this?
 
(I did a web search, but couldn't relate what I found to any code in the 1.2 release I just downloaded. I also read the May list archive.)
 
Thanks!
 
Bill

Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040514/1047b724/attachment.html>

From matt at pollenation.net  Fri May 14 05:00:07 2004
From: matt at pollenation.net (Matt Goodall)
Date: Fri, 14 May 2004 12:00:07 +0100
Subject: [Twisted-Python] bsddb?
In-Reply-To: <20040514071742.53917.qmail@web8306.mail.in.yahoo.com>
References: <20040514071742.53917.qmail@web8306.mail.in.yahoo.com>
Message-ID: <1084532407.1449.18.camel@harold>

On Fri, 2004-05-14 at 08:17, Bill la Forge wrote:
> New to twisted, interested in porting a project, but I can't find
> anything on using bsddb.

Open a bdb at the start of the app, use it as necessary, close the bdb
at the end of the app. What could be easier ;-).

It's probably worth creating a Service
(http://twistedmatrix.com/documents/current/api/) to help manage the
bsddb resource.

>  I assume I need a dedicated thread. Has anyone else worked on this?

You probably only need a thread for operations that you know will take a
long time. Retrieving a single, keyed object should be so quick with
bsdbd that it's probably not with the effort/expense of a thread. On the
other hand, iterating an entire bdb will (possibly) take quite some
time, so a thread may be a good idea. (Note that Python's bsdbd is not
threadsafe so you will have to manage that yourself.)

I don't know enough about the bsddb api but I suspect it's possible to
avoid threads altogether by iterating an entire bdb in small chunks and
relinquishing control to the event loop at the end of each chunk to
allow other events to run.

>  (I did a web search, but couldn't relate what I found to any code in
> the 1.2 release I just downloaded. I also read the May list archive.)

You may find Atop (http://www.divmod.org/Home/Projects/Atop/index.html)
interesting.

Hope this helps.

Cheers, Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt at pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.




From laforge49 at yahoo.co.in  Fri May 14 06:27:08 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Fri, 14 May 2004 13:27:08 +0100 (BST)
Subject: [Twisted-Python] bsddb?
In-Reply-To: <1084532407.1449.18.camel@harold>
Message-ID: <20040514122708.86658.qmail@web8310.mail.in.yahoo.com>

But it blocks, mm?
 
I could break things into small chuncks, so I could likely get away with
not using a thread. But shouldn't it ideally be accessed from a thread?
 
I'll note that you can open bsddb (using the new interface, not the
one documented in Python) in a thread-safe way, but any given iteration
(using a cursor object) must be done from a single thread--cursors
are not thread-free.
 
One approach might be to create a cursor in a server thread and then
use a fixed-size queue to retrieve the iterations, but then you'll need
at least as many server threads as you have open cursors.
 
So the best approach might be to have a cursor manager which handles
many such cursors/queues running on a single thread. (Invoking the
manager, it returns a master queue for handling subsequent requests.)
But then it sounds like a dedicated thread is again the best approach.
 
It seems to me that a nice general solution would be a project in its own 
right. (I've found bsddb to be pretty powerful/useful/fast/handy.)
 
Ah, Atop looks interesting. Thanks!
 
Bill

Matt Goodall <matt at pollenation.net> wrote:
On Fri, 2004-05-14 at 08:17, Bill la Forge wrote:
> New to twisted, interested in porting a project, but I can't find
> anything on using bsddb.

Open a bdb at the start of the app, use it as necessary, close the bdb
at the end of the app. What could be easier ;-).

It's probably worth creating a Service
(http://twistedmatrix.com/documents/current/api/) to help manage the
bsddb resource.

> I assume I need a dedicated thread. Has anyone else worked on this?

You probably only need a thread for operations that you know will take a
long time. Retrieving a single, keyed object should be so quick with
bsdbd that it's probably not with the effort/expense of a thread. On the
other hand, iterating an entire bdb will (possibly) take quite some
time, so a thread may be a good idea. (Note that Python's bsdbd is not
threadsafe so you will have to manage that yourself.)

I don't know enough about the bsddb api but I suspect it's possible to
avoid threads altogether by iterating an entire bdb in small chunks and
relinquishing control to the event loop at the end of each chunk to
allow other events to run.

> (I did a web search, but couldn't relate what I found to any code in
> the 1.2 release I just downloaded. I also read the May list archive.)

You may find Atop (http://www.divmod.org/Home/Projects/Atop/index.html)
interesting.

Hope this helps.

Cheers, Matt

-- 
__
/ \__ Matt Goodall, Pollenation Internet Ltd
\__/ \ w: http://www.pollenation.net
__/ \__/ e: matt at pollenation.net
/ \__/ \ t: +44 (0)113 2252500
\__/ \__/
/ \ Any views expressed are my own and do not necessarily
\__/ reflect the views of my employer.


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040514/63bc01b3/attachment.html>

From itamar at itamarst.org  Fri May 14 09:06:51 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 14 May 2004 11:06:51 -0400
Subject: [Twisted-Python] bsddb?
In-Reply-To: <20040514122708.86658.qmail@web8310.mail.in.yahoo.com>
References: <20040514122708.86658.qmail@web8310.mail.in.yahoo.com>
Message-ID: <1084547211.21482.488.camel@sheriffpony>

On Fri, 2004-05-14 at 08:27, Bill la Forge wrote:

> Ah, Atop looks interesting. Thanks!

Atop is designed so that each operation is either very quick and
non-blocking, *or* long running operations like iterating over results
that can be easily broken up (and which is which is very clear). As a
result atop works quite well without threads.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From glyph at divmod.com  Fri May 14 09:47:47 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Fri, 14 May 2004 11:47:47 -0400
Subject: [Twisted-Python] bsddb?
In-Reply-To: <1084547211.21482.488.camel@sheriffpony>
References: <20040514122708.86658.qmail@web8310.mail.in.yahoo.com>
	<1084547211.21482.488.camel@sheriffpony>
Message-ID: <40A4EA23.1000000@divmod.com>

Itamar Shtull-Trauring wrote:

> Atop is designed so that each operation is either very quick and
> non-blocking, *or* long running operations like iterating over results
> that can be easily broken up (and which is which is very clear). As a
> result atop works quite well without threads.

The flip side oft his is that it can be quite difficult to build complex 
  queries without deep structural knowledge of the database (and they 
are therefore somewhat fragile).  However, we're working on that.  A 
somewhat unsettling thing about using atop is you start to realize how 
incredibly inefficient some of the things that are really easy to say 
with SQL are, even in SQL DBs ;).

If an operation is synchronous in atop, it's fast. Right now this means, 
"if it's easy" - but a more advanced query mechanism will fix this.  If 
you have any ideas, please let me know.



From laforge49 at yahoo.co.in  Fri May 14 11:48:01 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Fri, 14 May 2004 18:48:01 +0100 (BST)
Subject: [Twisted-Python] atop (was bsddb?)
Message-ID: <20040514174801.57958.qmail@web8308.mail.in.yahoo.com>

I downloaded atop. The code is a bit denser than twisted, and I couldn't find much documentation.
 
Any pointers?
 
Also, are the mail archives available? 
 
Thanks!


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040514/dc97e79d/attachment.html>

From alex-news at comcast.net  Fri May 14 13:56:58 2004
From: alex-news at comcast.net (Alexander May)
Date: Fri, 14 May 2004 15:56:58 -0400
Subject: [Twisted-Python] How do I run a twisted server directly
Message-ID: <E1BOioF-00036P-00@pyramid.twistedmatrix.com>

I am going step by step through the Twisted From Scratch documentation.  At
step labeled twistd, there is this listing:

http://twistedmatrix.com/documents/current/howto/listings/finger/finger11.py

At the end it uses:

application = service.Application('finger', uid=1, gid=1)
factory = FingerFactory(moshez='Happy and well')
internet.TCPServer(79, factory).setServiceParent(
    service.IServiceCollection(application))

Where as the previous code uses:

reactor.listenTCP(1079, FingerFactory(prefix='http://livejournal.com/~'))
reactor.run()

And then gets into twistd, which is great.  But I have two questions, one is
how do I run this code directly (i.e., without twistd), and how do I use a
debugger on code running under twistd.

Maybe the answer to my first question in look at twistd in an editor and
figure it out, and the answer to the second question is run twistd in the
debugger.  To be honest I haven't looked at twistd, as I am already
suffering for mind overload trying to understand the bits and pieces of this
framework.  Pretty cool stuff.

On a different unrelated subject, I am going to need to act as both a server
and a client for SOAP.  Can someone point me in the right direction on how
to do this in twisted.

Thanks,
Alex







From itamar at itamarst.org  Fri May 14 14:03:04 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 14 May 2004 16:03:04 -0400
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <E1BOioF-00036P-00@pyramid.twistedmatrix.com>
References: <E1BOioF-00036P-00@pyramid.twistedmatrix.com>
Message-ID: <1084564983.21482.558.camel@sheriffpony>

On Fri, 2004-05-14 at 15:56, Alexander May wrote:

> And then gets into twistd, which is great.  But I have two questions, one is
> how do I run this code directly (i.e., without twistd), and how do I use a
> debugger on code running under twistd.

You can run twistd with -b option to run under debugger (see twistd
--help).

-- 
Itamar Shtull-Trauring    http://itamarst.org





From alex-news at comcast.net  Fri May 14 14:17:19 2004
From: alex-news at comcast.net (Alexander May)
Date: Fri, 14 May 2004 16:17:19 -0400
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <1084564983.21482.558.camel@sheriffpony>
Message-ID: <E1BOj7u-0003EG-00@pyramid.twistedmatrix.com>

Thanks, I'll give that a try.  How about my first question, running it
directly without twistd.  Something along the lines of:

if '__main__' == __name__:
  # do something to start application directly


Thanks again,
Alex



-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Itamar
Shtull-Trauring
Sent: Friday, May 14, 2004 4:03 PM
To: Twisted discussion stuff
Subject: Re: [Twisted-Python] How do I run a twisted server directly

On Fri, 2004-05-14 at 15:56, Alexander May wrote:

> And then gets into twistd, which is great.  But I have two questions, 
> one is how do I run this code directly (i.e., without twistd), and how 
> do I use a debugger on code running under twistd.

You can run twistd with -b option to run under debugger (see twistd --help).

-- 
Itamar Shtull-Trauring    http://itamarst.org



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From radix at twistedmatrix.com  Fri May 14 14:33:01 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 14 May 2004 16:33:01 -0400
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <E1BOj7u-0003EG-00@pyramid.twistedmatrix.com>
References: <E1BOj7u-0003EG-00@pyramid.twistedmatrix.com>
Message-ID: <40A52CFD.6070609@twistedmatrix.com>

Alexander May wrote:
> Thanks, I'll give that a try.  How about my first question, running it
> directly without twistd.  Something along the lines of:
> 
> if '__main__' == __name__:
>   # do something to start application directly


Basically, Don't Do That. It's unlikely there's a good reason to. If you 
just want to learn how it works under the hood, then read twistd's 
source: twisted/scripts/twistd.py. twisted/application/app.py is also 
relevant.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040514/0554506d/attachment.sig>

From alex-news at comcast.net  Fri May 14 18:20:24 2004
From: alex-news at comcast.net (Alexander May)
Date: Fri, 14 May 2004 20:20:24 -0400
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <40A52CFD.6070609@twistedmatrix.com>
Message-ID: <E1BOmvA-0004qW-00@pyramid.twistedmatrix.com>

> Basically, Don't Do That. It's unlikely there's a good reason to.

I'd like to use my IDE to debug rather than the python debugger.

Also, I ran twistd.py and got "Please use twistw on windows, not twistd"
(I'm on windows sometimes).  I then ran twistw.py and nothing happened.  I
looked at the file, and there were only class and function definitions.  I
added "run()" at the end of the file and it seems to work.  I'm using the
version 1.2.0 which was marked as "Twisted Stable Release" on the download
page.

Alex




-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Christopher
Armstrong
Sent: Friday, May 14, 2004 4:33 PM
To: Twisted discussion stuff
Subject: Re: [Twisted-Python] How do I run a twisted server directly

Alexander May wrote:
> Thanks, I'll give that a try.  How about my first question, running it 
> directly without twistd.  Something along the lines of:
> 
> if '__main__' == __name__:
>   # do something to start application directly


Basically, Don't Do That. It's unlikely there's a good reason to. If you
just want to learn how it works under the hood, then read twistd's
source: twisted/scripts/twistd.py. twisted/application/app.py is also
relevant.

--
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/




From radix at twistedmatrix.com  Fri May 14 18:25:27 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 14 May 2004 20:25:27 -0400
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <E1BOmvA-0004qW-00@pyramid.twistedmatrix.com>
References: <E1BOmvA-0004qW-00@pyramid.twistedmatrix.com>
Message-ID: <40A56377.7010901@twistedmatrix.com>

Alexander May wrote:
> Also, I ran twistd.py and got "Please use twistw on windows, not twistd"
> (I'm on windows sometimes).  I then ran twistw.py and nothing happened.  I
> looked at the file, and there were only class and function definitions.  I
> added "run()" at the end of the file and it seems to work.  I'm using the
> version 1.2.0 which was marked as "Twisted Stable Release" on the download
> page.

You should be calling C:\Python23\scripts\twistd (or something like 
that), not Lib\twisted\scripts\twistd.py. When you install the windows 
package for Twisted, there should be a start menu item that runs a shell 
with a properly set up environment so you can just type "twistd" or 
"mktap" and so on and it'll DTRT.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040514/0368399d/attachment.sig>

From alex-news at comcast.net  Fri May 14 18:31:53 2004
From: alex-news at comcast.net (Alexander May)
Date: Fri, 14 May 2004 20:31:53 -0400
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <40A56377.7010901@twistedmatrix.com>
Message-ID: <E1BOn6J-00053v-00@pyramid.twistedmatrix.com>

Oops, thanks.  Any hope debugging in my IDE instead of pdb?


-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Christopher
Armstrong
Sent: Friday, May 14, 2004 8:25 PM
To: Twisted discussion stuff
Subject: Re: [Twisted-Python] How do I run a twisted server directly

Alexander May wrote:
> Also, I ran twistd.py and got "Please use twistw on windows, not twistd"
> (I'm on windows sometimes).  I then ran twistw.py and nothing 
> happened.  I looked at the file, and there were only class and 
> function definitions.  I added "run()" at the end of the file and it 
> seems to work.  I'm using the version 1.2.0 which was marked as 
> "Twisted Stable Release" on the download page.

You should be calling C:\Python23\scripts\twistd (or something like that),
not Lib\twisted\scripts\twistd.py. When you install the windows package for
Twisted, there should be a start menu item that runs a shell with a properly
set up environment so you can just type "twistd" or "mktap" and so on and
it'll DTRT.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/




From rc at pgdn.org  Fri May 14 19:43:00 2004
From: rc at pgdn.org (Robert Church)
Date: Fri, 14 May 2004 18:43:00 -0700
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <E1BOn6J-00053v-00@pyramid.twistedmatrix.com>
References: <E1BOn6J-00053v-00@pyramid.twistedmatrix.com>
Message-ID: <40A575A4.7050802@pgdn.org>

Alexander May wrote:
> Oops, thanks.  Any hope debugging in my IDE instead of pdb?

What's your IDE?




From alex-news at comcast.net  Fri May 14 20:02:45 2004
From: alex-news at comcast.net (Alexander May)
Date: Fri, 14 May 2004 22:02:45 -0400
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <40A575A4.7050802@pgdn.org>
Message-ID: <E1BOoWC-0007Di-00@pyramid.twistedmatrix.com>

I've use pythonwin for a while and I'm giving Komodo try right now.  I'll
try Python.NET soon too.

I cribbed from twistw and did this:

if '__main__' == __name__:
    from twisted.application import app
    import sys
    
    class ServerOptions(app.ServerOptions):
        optFlags = [['nodaemon','y',  "(for backwards compatability)."]]
    
    app.startApplication(application, 0)
    app.runReactorWithLogging(ServerOptions(), sys.stdout, sys.stderr)


Which seems to work.  I can start my application from the debugger and hit
breakpoints, etc.  

Presumably I've committed all sort of horrors writing this code.  Please
feel free to enlighten me to the error of my ways.  Also, I'm curious what
is the function of the following line of code (marked with a *) is which I
saw in twistw:

def runApp(config):
    passphrase = app.getPassphrase(config['encrypted'])
    app.installReactor(config['reactor'])
    application = app.getApplication(config, passphrase)
    oldstdout = sys.stdout
    oldstderr = sys.stderr
    startLogging(config['logfile'])
    app.initialLog()
    os.chdir(config['rundir'])
    service.IService(application).privilegedStartService()
    app.startApplication(application, not config['no_save'])
*   app.startApplication(internet.TimerService(0.1, lambda:None), 0)
    app.runReactorWithLogging(config, oldstdout, oldstderr)
    app.reportProfile(config['report-profile'],
                      service.IProcess(application).processName)
    log.msg("Server Shut Down.")


*    do nothing frequently?







 

 

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Robert Church
Sent: Friday, May 14, 2004 9:43 PM
To: Twisted discussion stuff
Subject: Re: [Twisted-Python] How do I run a twisted server directly

Alexander May wrote:
> Oops, thanks.  Any hope debugging in my IDE instead of pdb?

What's your IDE?


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From dp at ulaluma.com  Fri May 14 21:59:33 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Fri, 14 May 2004 23:59:33 -0400
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <E1BOoWC-0007Di-00@pyramid.twistedmatrix.com>
References: <E1BOoWC-0007Di-00@pyramid.twistedmatrix.com>
Message-ID: <46657C9A-A624-11D8-B31F-000A95864FC4@ulaluma.com>


On May 14, 2004, at 10:02 PM, Alexander May wrote:

> I've use pythonwin for a while and I'm giving Komodo try right now.  
> I'll
> try Python.NET soon too.

<snip>

>
> Which seems to work.  I can start my application from the debugger and 
> hit
> breakpoints, etc.
>
> Presumably I've committed all sort of horrors writing this code.  
> Please
> feel free to enlighten me to the error of my ways.  Also, I'm curious 
> what
> is the function of the following line of code (marked with a *) is 
> which I
> saw in twistw:

<snip>

Why are you assuming that you can't use twistd and komodo's debugger at 
the same time? The last time I looked at Komodo for debugging (which 
admittedly was at least two years ago) importing the debugging module 
at any time installed the trace hook and queried Komodo for 
breakpoints. Then, any time the trace hook wanted to break into the 
debugger, it made a synchronous, blocking call over xmlrpc into the 
Komodo process. The Komodo process would then delay 'returning' from 
that xmlrpc call until you pressed step or continue in the ui.

You should just be able to import the komodo debugging shim module at 
the top of your .tac file, start it using twistd, and debug just fine.

dp




From alex-news at comcast.net  Fri May 14 22:25:17 2004
From: alex-news at comcast.net (Alexander May)
Date: Sat, 15 May 2004 00:25:17 -0400
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <46657C9A-A624-11D8-B31F-000A95864FC4@ulaluma.com>
Message-ID: <E1BOqk8-0008Cg-00@pyramid.twistedmatrix.com>

> Why are you assuming that you can't use twistd and komodo's debugger at
the same time? 

I'm new to both twisted and Komodo, and never even considered that such on
option existed.  Thanks for the info, I'll see if I can manage it.  Is there
a similar mechanism for other IDEs?

Alex



-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Donovan
Preston
Sent: Saturday, May 15, 2004 12:00 AM
To: Twisted discussion stuff
Subject: Re: [Twisted-Python] How do I run a twisted server directly


On May 14, 2004, at 10:02 PM, Alexander May wrote:

> I've use pythonwin for a while and I'm giving Komodo try right now.  
> I'll
> try Python.NET soon too.

<snip>

>
> Which seems to work.  I can start my application from the debugger and 
> hit breakpoints, etc.
>
> Presumably I've committed all sort of horrors writing this code.  
> Please
> feel free to enlighten me to the error of my ways.  Also, I'm curious 
> what is the function of the following line of code (marked with a *) 
> is which I saw in twistw:

<snip>

Why are you assuming that you can't use twistd and komodo's debugger at the
same time? The last time I looked at Komodo for debugging (which admittedly
was at least two years ago) importing the debugging module at any time
installed the trace hook and queried Komodo for breakpoints. Then, any time
the trace hook wanted to break into the debugger, it made a synchronous,
blocking call over xmlrpc into the Komodo process. The Komodo process would
then delay 'returning' from that xmlrpc call until you pressed step or
continue in the ui.

You should just be able to import the komodo debugging shim module at the
top of your .tac file, start it using twistd, and debug just fine.

dp


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From alex-news at comcast.net  Fri May 14 23:05:43 2004
From: alex-news at comcast.net (Alexander May)
Date: Sat, 15 May 2004 01:05:43 -0400
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <46657C9A-A624-11D8-B31F-000A95864FC4@ulaluma.com>
Message-ID: <E1BOrNG-0000ko-00@pyramid.twistedmatrix.com>

> You should just be able to import the komodo debugging shim module at the
top of your .tac file, start it using twistd, and debug just fine.

You mentioned that it has been a while, but does callkomodo.py sound right?
Or is the "komodo debugging shim module" something else?  I've tried a few
things, none of which have worked well.  Of course it is way past my bedtime
so I'm no longer thinking straight.  

Also using this technique, will there be an issue when I move my code into
production?  Is the import meaningless if I'm not running under the
debugger?  Or will I have to remember to remove the import line for the
debug module.  Or can I conditional import it using __debug__ and pass the
-O flag through when using twistd?  I apologize for my lack of knowledge;
I've stayed happily ignorant of the workings of the debugger until now.

What does everybody else here use for a development environment/debugger
when writing twisted or twisted apps?  Any IDE users out there?  I don't
want to waste more time than I already have just setting up my environment. 

Alex



-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Donovan
Preston
Sent: Saturday, May 15, 2004 12:00 AM
To: Twisted discussion stuff
Subject: Re: [Twisted-Python] How do I run a twisted server directly


On May 14, 2004, at 10:02 PM, Alexander May wrote:

> I've use pythonwin for a while and I'm giving Komodo try right now.  
> I'll
> try Python.NET soon too.

<snip>

>
> Which seems to work.  I can start my application from the debugger and 
> hit breakpoints, etc.
>
> Presumably I've committed all sort of horrors writing this code.  
> Please
> feel free to enlighten me to the error of my ways.  Also, I'm curious 
> what is the function of the following line of code (marked with a *) 
> is which I saw in twistw:

<snip>

Why are you assuming that you can't use twistd and komodo's debugger at the
same time? The last time I looked at Komodo for debugging (which admittedly
was at least two years ago) importing the debugging module at any time
installed the trace hook and queried Komodo for breakpoints. Then, any time
the trace hook wanted to break into the debugger, it made a synchronous,
blocking call over xmlrpc into the Komodo process. The Komodo process would
then delay 'returning' from that xmlrpc call until you pressed step or
continue in the ui.

You should just be able to import the komodo debugging shim module at the
top of your .tac file, start it using twistd, and debug just fine.

dp


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From python at adytumsolutions.com  Fri May 14 23:17:36 2004
From: python at adytumsolutions.com (Duncan McGreggor)
Date: Sat, 15 May 2004 01:17:36 -0400
Subject: [Twisted-Python] Custom app using twisted
Message-ID: <2D512B60-A62F-11D8-923B-000393DB4358@adytumsolutions.com>

Don't know if this belongs on the list or not...

I've just written a python monitoring program for baby-sitting a bunch 
of servers (I wanted something easier to setup and maintain than 
Nagios)... but the inevitable has happened, and I want to make a 
go-cart run like a ferrari. I was thinking of using python's interface 
to 'select' a la Medusa, but as soon as I saw 'import asyncore', I 
thought "There's got to be a better way..."

Enter twisted.

I would like to be able to run n monitoring instances simultaneously 
(thus my interest in 'select') to make the code as close to real-time 
as is practical. However, this is my first dive into POSIX I/O at this 
level (I ordered a copy of "UNIX Systems Programming" (Robbins) 
yesterday, to help me learn and adjust).

* The monitoring libs that I've put together do everything from local 
process monitoring (crap like ps with commands.getoutput), httplib 
checks against sites, process checks on remote servers (ssh+ps with 
commands.getoutput), ping checks, etc.
* An instance of the monitoring class will only do one type of 
monitoring (either process check, remote process check, ping check, or 
site check)

I would like to write a version of this that's a twisted application, 
in the hopes that it will be more robust and enterprise-ready. I've 
started looking at the following:
twisted.application.service.IProcess
twisted.application.service.Process
and spawnProcess from twisted.internet.default.PosixReactorBase

But I am not sure how to get started yet... I want to write something 
that can be run with twistd. Can anyone offer guidance or suggestions 
as to the approach? Right now, I am locked on the example here: 
http://twistedmatrix.com/documents/current/howto/application.html ... 
Is this what I should be looking at for inspiration? Or another 
approach all together? I've not come across examples of twisted apps 
that are a narrow specialization like what I have in mind... the app 
would be a *kind* of server... that would regularly spawn processes and 
wait for return data, regularly instantiate python monitoring classes.

Am I thinking of this in a sane way?

Thanks for any input,

Duncan



--
Duncan M. McGreggor        mailto:duncan at adytum.us
Systems &                  p 301.698.5032
Applications Engineer      http://adytum.us
AdytumSolutions, Inc.




From andrew-twisted at puzzling.org  Fri May 14 23:34:12 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 15 May 2004 15:34:12 +1000
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <E1BOrNG-0000ko-00@pyramid.twistedmatrix.com>
References: <46657C9A-A624-11D8-B31F-000A95864FC4@ulaluma.com>
	<E1BOrNG-0000ko-00@pyramid.twistedmatrix.com>
Message-ID: <20040515053412.GC4397@frobozz>

On Sat, May 15, 2004 at 01:05:43AM -0400, Alexander May wrote:
[...]
> 
> What does everybody else here use for a development environment/debugger
> when writing twisted or twisted apps?  Any IDE users out there?  I don't
> want to waste more time than I already have just setting up my environment. 

I tend to simply use print statements, unit tests and pdb.  My "IDE" is vim
:)

I rarely find stepping through code with a debugger to be useful; I find
having a log file of carefully selected print statements, and ideally
automated unit tests that enable me to easily reproduce the problem without
having to manually set up every time, are best.

My debugging process usually involves a bit of reasoning about what's going
on, and testing hypotheses about causes by trying to trigger certain
behaviours -- or more often by seeing what my selectively placed print
statements do.  I don't find stepping through code with a debugger to be a
very efficient way to do this, because you spend most of your time stepping
over code you aren't interested in.

-Andrew.




From laforge49 at yahoo.co.in  Sat May 15 00:20:26 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Sat, 15 May 2004 07:20:26 +0100 (BST)
Subject: [Twisted-Python] Custom app using twisted
In-Reply-To: <2D512B60-A62F-11D8-923B-000393DB4358@adytumsolutions.com>
Message-ID: <20040515062026.38231.qmail@web8301.mail.in.yahoo.com>

Duncan,
 
Looks like we're in the same boat--this is my third day looking at 
Twisted. My approach is to skim the doc and read some code, sleep 
on it, then do it all again but a bit more carefully. And yes, my head 
hurts. ;-)
 
But I have enjoyed reading the reactor code. My only question there is if 
anyone is considering using heapq instead of insort, as heapq is really 
the algorithm of choice for processing dynamicly changing lists in order.
 
So while my head really hurts, at least I'm enjoying the code. And its a 
nice break from reading the docs, too.
 
Bill 

Duncan McGreggor <python at adytumsolutions.com> wrote:
But I am not sure how to get started yet... I want to write something 
that can be run with twistd. Can anyone offer guidance or suggestions 
as to the approach? Right now, I am locked on the example here: 
http://twistedmatrix.com/documents/current/howto/application.html ... 

Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040515/5958f1aa/attachment.html>

From itamar at itamarst.org  Sat May 15 05:08:47 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 15 May 2004 07:08:47 -0400
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <E1BOoWC-0007Di-00@pyramid.twistedmatrix.com>
References: <E1BOoWC-0007Di-00@pyramid.twistedmatrix.com>
Message-ID: <1084591098.21481.611.camel@sheriffpony>

On Fri, 2004-05-14 at 22:02, Alexander May wrote:

> I cribbed from twistw and did this:

Looks fine.

> Presumably I've committed all sort of horrors writing this code.  Please
> feel free to enlighten me to the error of my ways.  Also, I'm curious what
> is the function of the following line of code (marked with a *) is which I
> saw in twistw:
> *   app.startApplication(internet.TimerService(0.1, lambda:None), 0)

This is so Ctrl-C will be responsive on Windows, otherwise it doesn't
happen until the event loop wakes up - which may be quite a while if no
networking is going on.




From laforge49 at yahoo.co.in  Sat May 15 06:10:16 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Sat, 15 May 2004 13:10:16 +0100 (BST)
Subject: [Twisted-Python] Where does the client stop the reactor?
Message-ID: <20040515121016.44795.qmail@web8307.mail.in.yahoo.com>

I've noticed that when running an example client, the reactor shuts down 
cleanly, but it does not when running an example server.
 
I've cludged some code for my testing that works fine for now, 
shutting down the reactor when there's no delayed calls:
 
def stopWhenIdle():
    count=len(reactor.getDelayedCalls())
    if count:
        reactor.callLater(1,stopWhenIdle)
    else:
        reactor.stop()

But where does the client normally stop the reactor?
 
Thanks!
 


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040515/23afc72c/attachment.html>

From alex-news at comcast.net  Sat May 15 07:10:45 2004
From: alex-news at comcast.net (Alexander May)
Date: Sat, 15 May 2004 09:10:45 -0400
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <1084591098.21481.611.camel@sheriffpony>
Message-ID: <E1BOywg-0004Jn-00@pyramid.twistedmatrix.com>

Thanks.  

FYI - When I did this I stumbled on to something.  If I have scratch.py as
follows:

from twisted.application import service
application = service.Application('central-server')
 

Where the last line consists of a single space, then I get an error when I
run twistd -y scratch.py (call stack at end).  When I remove the space so
the last line is just a carriage return, it works fine.  I found it strange.
Perhaps it is a python thing I has just never stumbled on before.  Not a big
deal now that I know, but it drove me batty for a bit.

Also, why the preference for .tac extensions when running twistd, instead of
.py?

I'm slowly working my way through the docs, so if it's RTFM, I'll
understand.

Thanks again for all the help,
Alex


Call stack:

Traceback (most recent call last):
  File "C:\Python23\scripts\twistd.py", line 36, in ?
    run()
  File "C:\Python23\Lib\site-packages\twisted\scripts\twistw.py", line 61,
in run
    app.run(runApp, ServerOptions)
  File "C:\Python23\Lib\site-packages\twisted\application\app.py", line 204,
in run
    runApp(config)
  File "C:\Python23\Lib\site-packages\twisted\scripts\twistw.py", line 45,
in runApp
    application = app.getApplication(config, passphrase)
--- <exception caught here> ---
  File "C:\Python23\Lib\site-packages\twisted\application\app.py", line 117,
in getApplication
    application = service.loadApplication(filename, style, passphrase)
  File "C:\Python23\Lib\site-packages\twisted\application\service.py", line
291, in loadApplication
    application = sob.loadValueFromFile(filename, 'application', passphrase)
  File "C:\Python23\Lib\site-packages\twisted\persisted\sob.py", line 213,
in loadValueFromFile
    exec data in d, d
exceptions.SyntaxError: invalid syntax (line 5)

Failed to load application: invalid syntax (line 5)










From alex-news at comcast.net  Sat May 15 13:14:49 2004
From: alex-news at comcast.net (Alexander May)
Date: Sat, 15 May 2004 15:14:49 -0400
Subject: [Twisted-Python] Simple app pickle issue when stopping
Message-ID: <E1BP4cz-0006zn-00@pyramid.twistedmatrix.com>

Still trying to learn/understand twisted.  Mind exploding/getting
frustrated.  I created this very simple app:

#!/usr/bin/python
from twisted.application import internet, service from twisted.web import
resource, server

class SimpleResource(resource.Resource):
  def __init__(self):
    resource.Resource.__init__(self)
    self.isLeaf=1
  def render_GET(self, request):
    return 'simple'

application = service.Application('server') serviceCollection =
service.IServiceCollection(application)
internet.TCPServer(8080,server.Site(SimpleResource())).setServiceParent(serv
iceCollection)

Then I run "twistd -y scratch.py" and it starts up correctly.  Great.
I can go to http://localhost:8080 and see the web page "simple".  Wonderful.
I hit control^C to stop the server and I get pickling errors.  Not good.
Call stack listed below:

IF I go into the python interactive environment and import sratch (and
pickle), I can instantiate SimpleResrouce and pickle it with no problem.
Help!

Alex

Call stack:
C:\Documents and Settings\Alexander May\My
Documents\maygold-dev\central-server>twistd -y scratch.py
2004/05/15 14:51 Eastern Daylight Time [-] Log opened.
2004/05/15 14:51 Eastern Daylight Time [-] twistd 1.2.0
(C:\Python23\python.exe 2.3.3) starting up
2004/05/15 14:51 Eastern Daylight Time [-] reactor class:
twisted.internet.default.SelectReactor
2004/05/15 14:51 Eastern Daylight Time [-] twisted.web.server.Site starting
on 8080
2004/05/15 14:51 Eastern Daylight Time [-] Starting factory
<twisted.web.server.Site instance at 0x00C52B70>
2004/05/15 14:51 Eastern Daylight Time [HTTPChannel,0,127.0.0.1] 127.0.0.1 -
- [15/May/2004:18:51:26 +0000] "GET / HTTP 1.1" 200 6 "-" "Mozilla/4.0
(compatible; MSIE 6.0; Windows NT 5.1)"
2004/05/15 14:51 Eastern Daylight Time [-] (Port 8080 Closed)
2004/05/15 14:51 Eastern Daylight Time [-] Stopping factory
<twisted.web.server.Site instance at 0x00C52B70>
2004/05/15 14:51 Eastern Daylight Time [-] Saving server application to
server-shutdown.tap...
2004/05/15 14:51 Eastern Daylight Time [-] Traceback (most recent call
last):
          File "C:\Python23\Lib\site-packages\twisted\internet\defer.py",
line 227, in callback
            self._startRunCallbacks(result)
          File "C:\Python23\Lib\site-packages\twisted\internet\defer.py",
line 288, in _startRunCallbacks
            self._runCallbacks()
          File "C:\Python23\Lib\site-packages\twisted\internet\defer.py",
line 313, in _runCallbacks
            self.result = callback(self.result, *args, **kw)
          File "C:\Python23\Lib\site-packages\twisted\internet\base.py",
line 317, in _cbContinueSystemEvent
            self._continueSystemEvent(eventType)
        --- <exception caught here> ---
          File "C:\Python23\Lib\site-packages\twisted\internet\base.py",
line 325, in _continueSystemEvent
            callable(*args, **kw)
          File "C:\Python23\Lib\site-packages\twisted\persisted\sob.py",
line 135, in save
            self._saveTemp(filename, passphrase, dumpFunc)
          File "C:\Python23\Lib\site-packages\twisted\persisted\sob.py",
line 103, in _saveTemp
            dumpFunc(self.original, f)
          File "C:\Python23\Lib\site-packages\twisted\persisted\sob.py",
line 119, in dumpFunc
            pickle.dump(obj, file, 1)
        cPickle.PicklingError: Can't pickle __builtin__.SimpleResource:
attribute lookup __builtin__.SimpleResource faied

2004/05/15 14:51 Eastern Daylight Time [-] Main loop terminated.
2004/05/15 14:51 Eastern Daylight Time [-] Server Shut Down.





From exarkun at divmod.com  Sat May 15 14:34:20 2004
From: exarkun at divmod.com (exarkun at divmod.com)
Date: Sat, 15 May 2004 20:34:20 GMT
Subject: [Twisted-Python] Simple app pickle issue when stopping
In-Reply-To: <E1BP4cz-0006zn-00@pyramid.twistedmatrix.com>
Message-ID: <20040515203420.14915.194049309.divmod.quotient.62@ohm>

On Sat, 15 May 2004 15:14:49 -0400, "Alexander May" <alex-news at comcast.net> wrote:
>Still trying to learn/understand twisted.  Mind exploding/getting frustrated.  I created this very simple app:
> [snip]

  Instances are pickled by saving the name of their class and their associated state.  Since the SimpleResource class isn't defined in a real module, instances of it cannot be pickled (its name is a lie).  Move the class definition into a real module, then import it from your tac file.  The pickle problems should go away.
  Also, if pickling isn't important, you can just pass the -o flag to twistd and the application will not be saved on shutdown.

  Jp



From mesozoic at polynode.com  Sat May 15 14:39:53 2004
From: mesozoic at polynode.com (Alex Levy)
Date: Sat, 15 May 2004 16:39:53 -0400
Subject: [Twisted-Python] Re: Simple app pickle issue when stopping
In-Reply-To: <E1BP4cz-0006zn-00@pyramid.twistedmatrix.com>
References: <E1BP4cz-0006zn-00@pyramid.twistedmatrix.com>
Message-ID: <1084653593.1151.132.camel@hyla>

On Sat, 2004-05-15 at 15:14, Alexander May wrote:
> Still trying to learn/understand twisted.  Mind exploding/getting
> frustrated.  I created this very simple app:

--snip--

>           File "C:\Python23\Lib\site-packages\twisted\persisted\sob.py",
> line 119, in dumpFunc
>             pickle.dump(obj, file, 1)
>         cPickle.PicklingError: Can't pickle __builtin__.SimpleResource:
> attribute lookup __builtin__.SimpleResource faied

Try defining SimpleResource inside your own module, instead of in
scratch.py. That way, when it goes to pickle your resource, it looks up
'mymodule.SimpleResource' instead of '__builtin__.SimpleResource'.

Worth a try?

Separation of application code and deployment code is pretty important
for Twisted apps. The idea is that .tac and .rpy files (and other such
things) shouldn't have your actual application in them - they should
just be glue to get your application to work properly within a given
system.

-- 
Alex Levy
WWW: http://mesozoic.geecs.org/

"Never let your sense of morals prevent you from doing what is right."
-- Salvor Hardin, Isaac Asimov's _Foundation_
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20040515/06273aec/attachment.sig>

From glyph at divmod.com  Sat May 15 14:59:05 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Sat, 15 May 2004 16:59:05 -0400
Subject: [Twisted-Python] How do I run a twisted server directly
In-Reply-To: <20040515053412.GC4397@frobozz>
References: <46657C9A-A624-11D8-B31F-000A95864FC4@ulaluma.com>	<E1BOrNG-0000ko-00@pyramid.twistedmatrix.com>
	<20040515053412.GC4397@frobozz>
Message-ID: <40A68499.1020600@divmod.com>

Andrew Bennetts wrote:
> On Sat, May 15, 2004 at 01:05:43AM -0400, Alexander May wrote:
> [...]
> 
>>What does everybody else here use for a development environment/debugger
>>when writing twisted or twisted apps?  Any IDE users out there?  I don't
>>want to waste more time than I already have just setting up my environment. 

> I tend to simply use print statements, unit tests and pdb.  My "IDE" is vim
> :)

I use PDB.  My IDE is twisted-dev.el, which runs on the popular Emacs 
IDE platform :).

Since many of the unit tests I run are quite time-consuming (even on 
very fast hardware) I do avail myself of a debugger.  However, I haven't 
run an actual application under a debugger in years.  I press F9 
(twisted-dev-debug-tests) to run the current unit-test under the debugger.

What this does is simply communicate with twistd -b over standard 
input/output, and keep a buffer open with the code on the appropriate line.

Until somebody develops an IDE with some runtime modifications (such as 
smalltalk-style restartable exceptions) I doubt that I'll find any 
compelling reason to switch...



From jason at injektilo.org  Sat May 15 15:03:24 2004
From: jason at injektilo.org (Jason Diamond)
Date: Sat, 15 May 2004 14:03:24 -0700
Subject: [Twisted-Python] Learning Twisted
Message-ID: <40A6859C.9000602@injektilo.org>

Sorry for the length of this post but I learn best by trying to
explain what I'm learning (even if nobody's listening). Twisted seems
very cool but also *huge* and unlike any framework I've used before so
I thought I'd post my first experiences with it in the hopes that I
could be corrected where needed (and maybe even help people other new
like me).

Here's the deal: I want to write an IMAP4 client and Twisted's
IMAP4Client [1] looks much more featureful than Python's imaplib.

Since I'm writing a client, I started out by reading the "Writing a
TCP client" HOWTO [2] where I learned, by looking at the ircLogBot
example, that I needed to define a subclass of IMAP4Client and a
subclass of ClientFactory. This is what I came up with:

from twisted.internet import reactor, protocol
from twisted.protocols import imap4

class MyIMAP4Client(imap4.IMAP4Client):

    def connectionMade(self):
        imap4.IMAP4Client.connectionMade(self)
        print "connectionMade"

class MyIMAP4ClientFactory(protocol.ClientFactory):

    protocol = MyIMAP4Client

f = MyIMAP4ClientFactory()
reactor.connectTCP("server", 143, f)
reactor.run()

Running this works (I see "connectionMade" printed to the console).

IMAP4Client has a login method so I modified my connectionMade method
to look like this:

    def connectionMade(self):
        imap4.IMAP4Client.connectionMade(self)
        print "connectionMade"
        self.login("user", "password")

But I couldn't tell if it worked or not. That's when I read that login
returns a "deferred whose callback is invoked if login is
successful". So I read the "Using Deferreds" HOWTO [3] and learned
that I needed to pass in a function to addCallback on the deferred
returned by calling login. So connectionMade now looks like this:

    def connectionMade(self):
        imap4.IMAP4Client.connectionMade(self)
        print "connectionMade"
        d = self.login("user", "password")
        d.addCallback(loginCallback)

loginCallback looks like this:

def loginCallback(d):
    print "loginCallback:", d

Note that this is *not* a method of the MyIMAP4Client class. But it
worked! I got this printed to the console:

connectionMade
loginCallback: ([], 'OK LOGIN Ok.')

I don't know, however, what the tuple represents. What's that empty
list? In a perfect world, would this be explained in the IMAP4Client
documentation? (I'm assuming that every callback would be different.)

I thought it sucked that my loginCallback function wasn't a member of
my class but I thought I'd see what error I'd get if I made it one so
I changed the two methods to look like this:

    def loginCallback(self, d):
        print "loginCallback:", d

    def connectionMade(self):
        imap4.IMAP4Client.connectionMade(self)
        print "connectionMade"
        d = self.login("user", "password")
        d.addCallback(self.loginCallback)

And that worked, too! At this point, I don't understand *why* this
works but it's awfully nice that it does. ("Using Deferreds" shows one
example of a callback method but doesn't discuss it in any way.)

Next, I wanted to try actually doing something useful. So I called
self.select from loginCallback so that I could see how many messages
exist in my INBOX.

    def loginCallback(self, d):
        print "loginCallback:", d
        de = self.select("INBOX")
        de.addCallback(self.selectCallback)

    def selectCallback(self, d):
        print "selectCallback:", d

This is the output I got for selectCallback:

selectCallback: {'EXISTS': 323, 'PERMANENTFLAGS': ('$MDNSent', 
'NonJunk', '\\*',
 '\\Draft', '\\Answered', '\\Flagged', '\\Deleted', '\\Seen'), 
'READ-WRITE': 1,
'FLAGS': ('$MDNSent', 'NonJunk', '\\Draft', '\\Answered', '\\Flagged', 
'\\Delete
d', '\\Seen', '\\Recent'), 'UIDVALIDITY': 1076206465, 'RECENT': 0}

Apparently, the parameter to the select callback is a dict. The
documentation for select actually mentions some of the keys. It looks
like I could use the EXISTS key to get how many messages exist in my
INBOX:

    def selectCallback(self, d):
        print "I have %d messages in my INBOX." % d["EXISTS"]

Now all I have to do is logout (up until now, I've been terminating
the script with Ctrl-C):

    def selectCallback(self, d):
        print "I have %d messages in my INBOX." % d["EXISTS"]
        de = self.logout()
        de.addCallback(self.logoutCallback)

    def logoutCallback(self, d):
        sys.exit(0)

This isn't correct, however, since the call to sys.exit prints an
exception to the console and, more distressingly, does *not* exit the
script.

At this point I realize that I'm in some sort of event loop (started
by calling reactor.run) and need to tell this loop to stop. So I look
at the "Reactor basics" HOWTO [4] and find my way to IReactorCore [5]
which documents a stop method:

    def logoutCallback(self, d):
        reactor.stop()

This works wonderfully although I have no idea if the connection to
the server is actually being gracefully closed. So I override
connectionLost to find out:

    def connectionLost(self, reason):
        imap4.IMAP4Client.connectionLost(self)
        print "connectionLost"

Now "connectionLost" is the last thing I see on my console before the
script exits. Nice.

I also override both sendLine and lineReceived so that I can see the
conversation with the IMAP server to see if I'm actually logging out
before closing the connection:

    def sendLine(self, line):
        imap4.IMAP4Client.sendLine(self, line)
        print line

    def lineReceived(self, line):
        imap4.IMAP4Client.lineReceived(self, line)
        print line

Perfect.

Just for reference, here's the program I ended up with:

from twisted.internet import reactor, protocol
from twisted.protocols import imap4

debug = 0

class MyIMAP4Client(imap4.IMAP4Client):

    def connectionMade(self):
        imap4.IMAP4Client.connectionMade(self)
        if debug: print "connectionMade"
        d = self.login("user", "password")
        d.addCallback(self.loginCallback)

    def loginCallback(self, d):
        de = self.select("INBOX")
        de.addCallback(self.selectCallback)

    def selectCallback(self, d):
        print "I have %d messages in my INBOX." % d["EXISTS"]
        de = self.logout()
        de.addCallback(self.logoutCallback)

    def logoutCallback(self, d):
        reactor.stop()

    def connectionLost(self, reason):
        imap4.IMAP4Client.connectionLost(self)
        if debug: print "connectionLost"

    def sendLine(self, line):
        imap4.IMAP4Client.sendLine(self, line)
        if debug: print line

    def lineReceived(self, line):
        imap4.IMAP4Client.lineReceived(self, line)
        if debug: print line

class MyIMAP4ClientFactory(protocol.ClientFactory):

    protocol = MyIMAP4Client

f = MyIMAP4ClientFactory()
reactor.connectTCP("server", 143, f)
reactor.run()

So how'd I do for a Twisted newbie? Am I on the path to enlightenment?
Are there any obvious errors in what I've interpreted so far? Is this
a "good" implementation for this feature or is their a more
Twisted-ish approach I need to strive for?

Am I correct in assuming that the IMAP4Client documentation needs some
buffing up? (Maybe I can help with that.) I didn't look at any source
code (other than in the HOWTOs) in implementing this so I think that's
a good sign. But as I mentioned above, I'm not clear on how I know
what the signature for my callbacks should be or what the parameters
to those callbacks mean in some cases.

Also, it's not obvious to me how protocol implementors decide when to
have users override a method versus having them use callbacks. I know
I'm working on client code but knowing this might help me know how to
use their code. Is it a matter of personal preference? The ircLogBot
example didn't have any callbacks using deferreds but it looks like I
had no choice when using IMAP4Client.

Thanks for reading this far!

-- Jason

[1]
http://twistedmatrix.com/documents/current/api/twisted.protocols.imap4.IMAP4Client.html

[2]
http://twistedmatrix.com/documents/current/howto/clients

[3]
http://twistedmatrix.com/documents/current/howto/defer.html

[4]
http://twistedmatrix.com/documents/current/howto/reactor-basics.html

[5]
http://twistedmatrix.com/documents/TwistedDocs/TwistedDocs-1.2.0/api/twisted.internet.interfaces.IReactorCore.html




From glyph at divmod.com  Sat May 15 16:09:04 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Sat, 15 May 2004 18:09:04 -0400
Subject: [Twisted-Python] Learning Twisted
In-Reply-To: <40A6859C.9000602@injektilo.org>
References: <40A6859C.9000602@injektilo.org>
Message-ID: <40A69500.7010501@divmod.com>

Jason Diamond wrote:
> Sorry for the length of this post but I learn best by trying to
> explain what I'm learning (even if nobody's listening). Twisted seems
> very cool but also *huge* and unlike any framework I've used before so
> I thought I'd post my first experiences with it in the hopes that I
> could be corrected where needed (and maybe even help people other new
> like me).

Thank you for sending this post.  I wish every new user would give such 
great feedback!

> So how'd I do for a Twisted newbie? Am I on the path to enlightenment?
> Are there any obvious errors in what I've interpreted so far? Is this
> a "good" implementation for this feature or is their a more
> Twisted-ish approach I need to strive for?

Although I'm not an expert with the IMAP code, everything seemed right 
except this last part:

> f = MyIMAP4ClientFactory()
> reactor.connectTCP("server", 143, f)
> reactor.run()

If possible, you should try to run Twisted code under twistd, which 
means that you'd remove that code from your Python module, and put it 
into a separate .tac file that read something like:

from twisted.application.internet import TCPClient
from twisted.application.service import Application, IServiceCollection
application = Application("my client application")
f = MyIMAP4ClientFactory()
client = TCPClient("server", 143, f)
client.setServiceParent(application)

Even if you do have a need to put your code into its own script - and 
the twistd support for clients is admittedly weaker than that for 
servers - it's generally a good idea not to put it in the same script as 
  your code.

> Am I correct in assuming that the IMAP4Client documentation needs some
> buffing up? (Maybe I can help with that.) I didn't look at any source
> code (other than in the HOWTOs) in implementing this so I think that's
> a good sign. But as I mentioned above, I'm not clear on how I know
> what the signature for my callbacks should be or what the parameters
> to those callbacks mean in some cases.

Yes.  Pretty much every aspect of the documentation needs help.  It 
would be greatly appreciated!

> Also, it's not obvious to me how protocol implementors decide when to
> have users override a method versus having them use callbacks. I know
> I'm working on client code but knowing this might help me know how to
> use their code. Is it a matter of personal preference? The ircLogBot
> example didn't have any callbacks using deferreds but it looks like I
> had no choice when using IMAP4Client.

It's not purely preference, but there is some overlap.  Generally, what 
Deferreds are used for are when you've got some operation that happens 
once, with one result: you want to delete a message, for example, and 
get a notification when that deletion operation has completed.  Methods 
on objects are used when you are doing something more persistent, for 
example, connecting a client to a server - there is a potential for 
success or failure of that one operation, true, but the more interesting 
thing is the continuous stream of data being received from or sent to 
the other side of the connection.



From alex-news at comcast.net  Sat May 15 17:34:28 2004
From: alex-news at comcast.net (Alexander May)
Date: Sat, 15 May 2004 19:34:28 -0400
Subject: [Twisted-Python] Re: Simple app pickle issue when stopping
In-Reply-To: <1084653593.1151.132.camel@hyla>
Message-ID: <E1BP8gH-0000mD-00@pyramid.twistedmatrix.com>

Yes, that worked.  Thank you.

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Alex Levy
Sent: Saturday, May 15, 2004 4:40 PM
To: Twisted discussion stuff
Subject: [Twisted-Python] Re: Simple app pickle issue when stopping

On Sat, 2004-05-15 at 15:14, Alexander May wrote:
> Still trying to learn/understand twisted.  Mind exploding/getting 
> frustrated.  I created this very simple app:

--snip--

>           File 
> "C:\Python23\Lib\site-packages\twisted\persisted\sob.py",
> line 119, in dumpFunc
>             pickle.dump(obj, file, 1)
>         cPickle.PicklingError: Can't pickle __builtin__.SimpleResource:
> attribute lookup __builtin__.SimpleResource faied

Try defining SimpleResource inside your own module, instead of in
scratch.py. That way, when it goes to pickle your resource, it looks up
'mymodule.SimpleResource' instead of '__builtin__.SimpleResource'.

Worth a try?

Separation of application code and deployment code is pretty important for
Twisted apps. The idea is that .tac and .rpy files (and other such
things) shouldn't have your actual application in them - they should just be
glue to get your application to work properly within a given system.

--
Alex Levy
WWW: http://mesozoic.geecs.org/

"Never let your sense of morals prevent you from doing what is right."
-- Salvor Hardin, Isaac Asimov's _Foundation_




From radix at twistedmatrix.com  Sat May 15 17:36:07 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 15 May 2004 19:36:07 -0400
Subject: [Twisted-Python] Learning Twisted
In-Reply-To: <40A69500.7010501@divmod.com>
References: <40A6859C.9000602@injektilo.org> <40A69500.7010501@divmod.com>
Message-ID: <40A6A967.1050002@twistedmatrix.com>

Glyph Lefkowitz wrote:
> Jason Diamond wrote:
>> Also, it's not obvious to me how protocol implementors decide when to
>> have users override a method versus having them use callbacks. I know
>> I'm working on client code but knowing this might help me know how to
>> use their code. Is it a matter of personal preference? The ircLogBot
>> example didn't have any callbacks using deferreds but it looks like I
>> had no choice when using IMAP4Client.
> 
> It's not purely preference, but there is some overlap.  Generally, what 
> Deferreds are used for are when you've got some operation that happens 
> once, with one result: you want to delete a message, for example, and 
> get a notification when that deletion operation has completed.  Methods 
> on objects are used when you are doing something more persistent, for 
> example, connecting a client to a server - there is a potential for 
> success or failure of that one operation, true, but the more interesting 
> thing is the continuous stream of data being received from or sent to 
> the other side of the connection.

Also, the "request" vs "arbitrary events" distinction should be 
clarified: Deferreds (i.e., callbacks) are used when you want to expose 
an API that allows a request to be made for some operation to occur, and 
they'll get triggered when the operation is complete (or has errored). 
Methods to be overridden are there for when there's no 1:1 mapping of 
requests to responses, when these events can happen even without 
expecting them.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040515/e116b9a0/attachment.sig>

From alex-news at comcast.net  Sat May 15 17:43:22 2004
From: alex-news at comcast.net (Alexander May)
Date: Sat, 15 May 2004 19:43:22 -0400
Subject: [Twisted-Python] Simple app pickle issue when stopping
In-Reply-To: <20040515203420.14915.194049309.divmod.quotient.62@ohm>
Message-ID: <E1BP8ou-0000sb-00@pyramid.twistedmatrix.com>

Thank you.  Soon, I'll be attaching to a database, and the pickling stuff
won't matter, so I'll use the -o flag as you suggest.

Anyone have any experience with gadfly and using it with twisted?  I'm
prototyping so I'm tempted to give it a try and avoid setting up a real
database (not that gadfly isn't real).  And while I'm off subject, anyone
have a suggestion for integrating authorization with windows (and probably
Linux down the road)? I'm reading the docs...

Thanks,
Alex


-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
exarkun at divmod.com
Sent: Saturday, May 15, 2004 4:34 PM
To: Twisted discussion stuff
Subject: Re: [Twisted-Python] Simple app pickle issue when stopping

On Sat, 15 May 2004 15:14:49 -0400, "Alexander May" <alex-news at comcast.net>
wrote:
>Still trying to learn/understand twisted.  Mind exploding/getting
frustrated.  I created this very simple app:
> [snip]

  Instances are pickled by saving the name of their class and their
associated state.  Since the SimpleResource class isn't defined in a real
module, instances of it cannot be pickled (its name is a lie).  Move the
class definition into a real module, then import it from your tac file.  The
pickle problems should go away.
  Also, if pickling isn't important, you can just pass the -o flag to twistd
and the application will not be saved on shutdown.

  Jp

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From laforge49 at yahoo.co.in  Sun May 16 05:49:56 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Sun, 16 May 2004 12:49:56 +0100 (BST)
Subject: [Twisted-Python] integrating CompStrm//adding background processing
Message-ID: <20040516114956.67585.qmail@web8309.mail.in.yahoo.com>

I've been working on integrating Compstrm 
( http://compstrm.sourceforge.net ) and, while integration was pretty 
easy, it got harder when I wanted to speed things up.
 
Basicly, compstrm uses yields to impliment a kind of light-weight 
threads. So I needed to add background processing to the main reactor 
loop. Here's the code I finally came up with:
 
from twisted.internet import reactor
def _runUntilCurrentNew():
    if reactor.poll:
        p=reactor.poll
        reactor.poll=None
        p()
    _runUntilCurrentOld()
 
_runUntilCurrentOld=reactor.runUntilCurrent
reactor.runUntilCurrent=_runUntilCurrentNew

reactor.poll=None
def _timeoutNew():
    if reactor.poll:
        return 0
    return _timeoutOld
 
_timeoutOld=reactor.timeout
reactor.timeout=_timeoutNew

Just using reactor.callLater, I could only get a speed of 90, in contrast to 
the asyncore integration which was doing better than 12,000.
 
By replacing runUntilCurrent and timeout, I managed to bump my speed up to better than 8,000, which seems reasonable, as Twisted is a bit 
more "heavy weight" than asyncore. ;-)
 
While I'm at it, here's my revised takedown code:

class whenNoDelayedCalls:
    "I check for when there are no delayed calls."
    
    def __init__(self,granularity=1.0,func=reactor.stop):
        self.func=func
        self.granularity=granularity
        reactor.callLater(granularity,self)
    def __call__(self):
        c=len(reactor.getDelayedCalls())
        if c or reactor.poll:
            reactor.callLater(self.granularity,self)
        else:
            self.func()
 
def pollLoop(granularity=1.0,func=reactor.stop):
    "I run the reactor until there are no more delayed calls."
    
    whenNoDelayedCalls(granularity,func)
    reactor.run()

This gives me an approximate equivalent to the asyncore poll loop,
at least when there's no threads or sockets running. ;-)
 


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040516/56a15f73/attachment.html>

From glyph at divmod.com  Sun May 16 15:07:29 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Sun, 16 May 2004 17:07:29 -0400
Subject: [Twisted-Python] integrating CompStrm//adding background
	processing
In-Reply-To: <20040516114956.67585.qmail@web8309.mail.in.yahoo.com>
References: <20040516114956.67585.qmail@web8309.mail.in.yahoo.com>
Message-ID: <40A7D811.5000602@divmod.com>

Hi Bill,

Bill la Forge wrote:
> I've been working on integrating Compstrm
> ( http://compstrm.sourceforge.net ) and, while integration was pretty
> easy, it got harder when I wanted to speed things up.

I appreciate reports of performance issues, and I'm sure the reactor 
could be sped up a bit - but this report seemed a bit vague, and as far 
as a few helpful folks on #twisted could tell, wrong.

> Just using reactor.callLater, I could only get a speed of 90, in 
> contrast to
> the asyncore integration which was doing better than 12,000.

90 whats per what on what?  How exactly did you measure this?

We assumed you meant "90 trivial calls per second" and "on relatively 
recent hardware". The only test we did that made this radical kind of 
difference was inserting a 'print' statement into the "trivial" 
callback.  The numbers for callLaters-per-second on various hardware we 
had lying around, mostly around ~2GhZ athlons, were in the 15000-25000 
range.

> By replacing runUntilCurrent and timeout, I managed to bump my speed up 
> to better than 8,000, which seems reasonable, as Twisted is a bit
> more "heavy weight" than asyncore. ;-)

Also I'm not sure why your code would have sped up the reactor.  Would 
you mind sending your code in the form of two complete Python programs 
that will demonstrate the difference in speed between your newer 
callLater code and the existing reactor?



From python at adytumsolutions.com  Sun May 16 15:53:25 2004
From: python at adytumsolutions.com (Duncan McGreggor)
Date: Sun, 16 May 2004 17:53:25 -0400
Subject: [Twisted-Python] Custom app using twisted
In-Reply-To: <2D512B60-A62F-11D8-923B-000393DB4358@adytumsolutions.com>
References: <2D512B60-A62F-11D8-923B-000393DB4358@adytumsolutions.com>
Message-ID: <753E5A15-A783-11D8-A8DB-000393DB4358@adytumsolutions.com>


On May 15, 2004, at 1:17 AM, Duncan McGreggor wrote:

> But I am not sure how to get started yet... I want to write something 
> that can be run with twistd. Can anyone offer guidance or suggestions 
> as to the approach? Right now, I am locked on the example here: 
> http://twistedmatrix.com/documents/current/howto/application.html ... 
> Is this what I should be looking at for inspiration? Or another 
> approach all together? I've not come across examples of twisted apps 
> that are a narrow specialization like what I have in mind... the app 
> would be a *kind* of server... that would regularly spawn processes 
> and wait for return data, regularly instantiate python monitoring 
> classes.

In case any other twisted newbies are interested in learning to apply 
twisted in a similar manner, I am sharing a link I found the other day:
http://www.onlamp.com/pub/a/python/2004/02/12/advanced_nio.html?page=3

Though this example doesn't use twisted.application or the plug-in 
method (both of which I am exploring, and will use), it's code has 
given me ideas on how to proceed. It's simplicity and conceptual 
similarity to what I am doing is just what I needed :-)




From exarkun at divmod.com  Sun May 16 16:13:55 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Sun, 16 May 2004 18:13:55 -0400
Subject: [Twisted-Python] Learning Twisted
In-Reply-To: <40A6859C.9000602@injektilo.org>
References: <40A6859C.9000602@injektilo.org>
Message-ID: <40A7E7A3.7000603@divmod.com>

Jason Diamond wrote:

> Sorry for the length of this post but I learn best by trying to
> explain what I'm learning (even if nobody's listening). Twisted seems
> very cool but also *huge* and unlike any framework I've used before so
> I thought I'd post my first experiences with it in the hopes that I
> could be corrected where needed (and maybe even help people other new
> like me).

I'd like to repeat what Glyph said.  This is great feedback, I'd love to =

see more of it :)

>
> [snip]
>
> This is what I came up with:
>
> from twisted.internet import reactor, protocol
> from twisted.protocols import imap4
>
> class MyIMAP4Client(imap4.IMAP4Client):
>
>    def connectionMade(self):
>        imap4.IMAP4Client.connectionMade(self)
>        print "connectionMade"

  The above works (as you noticed ;) but isn't quite as good as hooking =

into the "serverGreeting" method, which is called after the IMAP4 server =

sends its initial message (I realize this isn't well documented).

>
> [snip]
>
> Note that this is *not* a method of the MyIMAP4Client class. But it
> worked! I got this printed to the console:
>
> connectionMade
> loginCallback: ([], 'OK LOGIN Ok.')
>
> I don't know, however, what the tuple represents. What's that empty
> list? In a perfect world, would this be explained in the IMAP4Client
> documentation? (I'm assuming that every callback would be different.)
>
  The callback value here is something of an implementation detail.  =

Deferreds (somewhat informally) often fall into one of two categories: =

those which will eventually be called back with an interesting value =

which is necessary for further computations, and those which will =

eventually be called back with a not-so-interesting value which only =

serves to indicate that the desired operation has completed.  login() =

falls into the second category.

> [snip]
>
> Am I correct in assuming that the IMAP4Client documentation needs some
> buffing up? (Maybe I can help with that.) I didn't look at any source
> code (other than in the HOWTOs) in implementing this so I think that's
> a good sign. But as I mentioned above, I'm not clear on how I know
> what the signature for my callbacks should be or what the parameters
> to those callbacks mean in some cases.

  Yep.  More documentation would be great.  The actual signature for =

callbacks is easy.  It's always a callable that takes one argument (by =

the way, this is why your code worked with both free functions and =

methods - it doesn't matter what kind of callable you use, as long as it =

takes one argument).  Further documentation about the specifics of what =

that one parameter means is definitely needed, though.

> [snip]
>
> Thanks for reading this far!
>
  Thanks for writing!

  Jp




From jason at injektilo.org  Sun May 16 19:32:51 2004
From: jason at injektilo.org (Jason Diamond)
Date: Sun, 16 May 2004 18:32:51 -0700
Subject: [Twisted-Python] Learning Twisted
In-Reply-To: <40A6A967.1050002@twistedmatrix.com>
References: <40A6859C.9000602@injektilo.org> <40A69500.7010501@divmod.com>
	<40A6A967.1050002@twistedmatrix.com>
Message-ID: <40A81643.4080701@injektilo.org>

Christopher Armstrong wrote:

> Glyph Lefkowitz wrote:
>
>> Jason Diamond wrote:
>>
>>> Also, it's not obvious to me how protocol implementors decide when to
>>> have users override a method versus having them use callbacks. I know
>>> I'm working on client code but knowing this might help me know how to
>>> use their code. Is it a matter of personal preference? The ircLogBot
>>> example didn't have any callbacks using deferreds but it looks like I
>>> had no choice when using IMAP4Client.
>>
>>
>> It's not purely preference, but there is some overlap.  Generally, 
>> what Deferreds are used for are when you've got some operation that 
>> happens once, with one result: you want to delete a message, for 
>> example, and get a notification when that deletion operation has 
>> completed.  Methods on objects are used when you are doing something 
>> more persistent, for example, connecting a client to a server - there 
>> is a potential for success or failure of that one operation, true, 
>> but the more interesting thing is the continuous stream of data being 
>> received from or sent to the other side of the connection.
>
>
> Also, the "request" vs "arbitrary events" distinction should be 
> clarified: Deferreds (i.e., callbacks) are used when you want to 
> expose an API that allows a request to be made for some operation to 
> occur, and they'll get triggered when the operation is complete (or 
> has errored). Methods to be overridden are there for when there's no 
> 1:1 mapping of requests to responses, when these events can happen 
> even without expecting them.

Ah! This makes perfect sense to me. So I can think of overridable 
methods as events that didn't require any action on my part to fire.

However, the ircLogBot example [1], implies that calling self.join will 
eventually invoke self.joined as if self.joined was the permanent 
callback for calling self.join. I like your explanation for the 
distinction between deferreds and methods but this seems to be blurring 
the two. What happens if an error occurred while trying to join a 
channel? (I'm not trying to pick anybody--I'm just trying to make sense 
of the examples that I'm seeing.)

-- Jason

[1]
http://twistedmatrix.com/documents/current/howto/clients#auto5




From jason at injektilo.org  Sun May 16 19:57:26 2004
From: jason at injektilo.org (Jason Diamond)
Date: Sun, 16 May 2004 18:57:26 -0700
Subject: [Twisted-Python] Learning Twisted
In-Reply-To: <40A69500.7010501@divmod.com>
References: <40A6859C.9000602@injektilo.org> <40A69500.7010501@divmod.com>
Message-ID: <40A81C06.1070204@injektilo.org>

Glyph Lefkowitz wrote:

> If possible, you should try to run Twisted code under twistd, which 
> means that you'd remove that code from your Python module, and put it 
> into a separate .tac file that read something like:
>
> from twisted.application.internet import TCPClient
> from twisted.application.service import Application, IServiceCollection
> application = Application("my client application")
> f = MyIMAP4ClientFactory()
> client = TCPClient("server", 143, f)
> client.setServiceParent(application)
>
> Even if you do have a need to put your code into its own script - and 
> the twistd support for clients is admittedly weaker than that for 
> servers - it's generally a good idea not to put it in the same script 
> as  your code.

Thanks for the tip, I started reading the "Twisted from Scratch" 
tutorial [1] and see why this is useful now. For my simple client 
explorations, though, it's spitting out a lot more output than I would 
expect. But still very informative!

-- Jason

[1]
http://twistedmatrix.com/documents/current/howto/tutorial




From jason at injektilo.org  Sun May 16 20:04:58 2004
From: jason at injektilo.org (Jason Diamond)
Date: Sun, 16 May 2004 19:04:58 -0700
Subject: [Twisted-Python] Learning Twisted
In-Reply-To: <40A7E7A3.7000603@divmod.com>
References: <40A6859C.9000602@injektilo.org> <40A7E7A3.7000603@divmod.com>
Message-ID: <40A81DCA.8030404@injektilo.org>

Jp Calderone wrote:

> Jason Diamond wrote:
>
>> This is what I came up with:
>>
>> from twisted.internet import reactor, protocol
>> from twisted.protocols import imap4
>>
>> class MyIMAP4Client(imap4.IMAP4Client):
>>
>>    def connectionMade(self):
>>        imap4.IMAP4Client.connectionMade(self)
>>        print "connectionMade"
>
>   The above works (as you noticed ;) but isn't quite as good as hooking =
> into the "serverGreeting" method, which is called after the IMAP4 
> server =
> sends its initial message (I realize this isn't well documented).

Cool! This makes perfect sense and I'll look for methods like 
serverGreeting from now on.

Here's my updated test:

from twisted.internet import reactor, protocol
from twisted.protocols import imap4

server = "xxx"
username = "yyy"
password = "zzz"

debug = 0

class MyIMAP4Client(imap4.IMAP4Client):

    def serverGreeting(self, caps):
        if debug: print "serverGreeting:", caps
        imap4.IMAP4Client.serverGreeting(self, caps)
        d = self.login(username, password)
        d.addCallback(self.loginCallback)

    def loginCallback(self, d):
        if debug: print "loginCallback:", d
        de = self.select("INBOX")
        de.addCallback(self.selectCallback)

    def selectCallback(self, d):
        if debug: print "selectCallback:", d
        print "I have %d messages in my INBOX." % d["EXISTS"]
        de = self.logout()
        de.addCallback(self.logoutCallback)

    def logoutCallback(self, d):
        if debug: print "logoutCallback:", d
        reactor.stop()

    def connectionLost(self, reason):
        if debug: print "connectionLost:", reason
        imap4.IMAP4Client.connectionLost(self)

    def sendLine(self, line):
        if debug: print "sendLine:", line
        imap4.IMAP4Client.sendLine(self, line)

    def lineReceived(self, line):
        if debug: print "lineReceived:", line
        imap4.IMAP4Client.lineReceived(self, line)

class MyIMAP4ClientFactory(protocol.ClientFactory):

    protocol = MyIMAP4Client

if __name__ == "__main__":
    f = MyIMAP4ClientFactory()
    reactor.connectTCP(server, 143, f)
    reactor.run()

>> [snip]
>>
>> Note that this is *not* a method of the MyIMAP4Client class. But it
>> worked! I got this printed to the console:
>>
>> connectionMade
>> loginCallback: ([], 'OK LOGIN Ok.')
>>
>> I don't know, however, what the tuple represents. What's that empty
>> list? In a perfect world, would this be explained in the IMAP4Client
>> documentation? (I'm assuming that every callback would be different.)
>>
>  The callback value here is something of an implementation detail.  =
> Deferreds (somewhat informally) often fall into one of two categories: =
> those which will eventually be called back with an interesting value =
> which is necessary for further computations, and those which will =
> eventually be called back with a not-so-interesting value which only =
> serves to indicate that the desired operation has completed.  login() =
> falls into the second category.

OK, this makes sense. But if the login callback doesn't have any useful 
information, why isn't it None (like the logout callback)? Or is that 
the implementation detail you're referring to that I should just forget 
about?

>> [snip]
>>
>> Am I correct in assuming that the IMAP4Client documentation needs some
>> buffing up? (Maybe I can help with that.) I didn't look at any source
>> code (other than in the HOWTOs) in implementing this so I think that's
>> a good sign. But as I mentioned above, I'm not clear on how I know
>> what the signature for my callbacks should be or what the parameters
>> to those callbacks mean in some cases.
>
>   Yep.  More documentation would be great.  The actual signature for =
> callbacks is easy.  It's always a callable that takes one argument (by =
> the way, this is why your code worked with both free functions and =
> methods - it doesn't matter what kind of callable you use, as long as 
> it =
> takes one argument).  Further documentation about the specifics of what =
> that one parameter means is definitely needed, though. 

I also just realized that a method attribute retrieved from an instance, 
even though it's declared as taking in two arguments (the first being 
self), returns a function that only has one argument--self is bound to 
the instance you used to grab the method.

-- Jason




From laforge49 at yahoo.co.in  Sun May 16 20:43:39 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Mon, 17 May 2004 03:43:39 +0100 (BST)
Subject: [Twisted-Python] integrating CompStrm//adding background
	processing
In-Reply-To: <40A7D811.5000602@divmod.com>
Message-ID: <20040517024339.42551.qmail@web8310.mail.in.yahoo.com>

Sorry for the confusion.
 
In the CompStrm project, I'm developing an alternative asyn programming 
style, in an attempt to make such code easier to read/maintain. Like 
flow, it is based on the yield statement. Unlike flow, it requires a 
mechanism for executing code in the background of the main thread.
 
So I'm not speeding up Twisted in any way. Rather, I'm adding a feature, 
all be it one that could be easily abused, by allowing for the inclusion of
an additional function call in the reactor main loop.
 
My initial approach, of using callLater for successive invocations, was 
flawed because of the limited granularity of time available on a PC. This 
means that I was only able to capture control for a very small number of
main loop cycles. But by inserting an additional method call, I am now 
able to perform a little background processing with every cycle.
 
As for the timing, I'm counting the number of items I can pass on an
async pipe between two virtual processes running in the background of
the main thread. Details for running over asyncore are available here:
http://compstrm.sourceforge.net/timing.html
 
Bill

Glyph Lefkowitz <glyph at divmod.com> wrote:
Hi Bill,

I appreciate reports of performance issues, and I'm sure the reactor 
could be sped up a bit - but this report seemed a bit vague, and as far 
as a few helpful folks on #twisted could tell, wrong.

> Just using reactor.callLater, I could only get a speed of 90, in 
> contrast to
> the asyncore integration which was doing better than 12,000.

90 whats per what on what? How exactly did you measure this?

We assumed you meant "90 trivial calls per second" and "on relatively 
recent hardware". The only test we did that made this radical kind of 
difference was inserting a 'print' statement into the "trivial" 
callback. The numbers for callLaters-per-second on various hardware we 
had lying around, mostly around ~2GhZ athlons, were in the 15000-25000 
range.


Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040517/35c64529/attachment.html>

From glyph at divmod.com  Sun May 16 21:01:45 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Sun, 16 May 2004 23:01:45 -0400
Subject: [Twisted-Python] Learning Twisted
In-Reply-To: <40A81643.4080701@injektilo.org>
References: <40A6859C.9000602@injektilo.org>
	<40A69500.7010501@divmod.com>	<40A6A967.1050002@twistedmatrix.com>
	<40A81643.4080701@injektilo.org>
Message-ID: <40A82B19.4020103@divmod.com>

Jason Diamond wrote:

> 
> However, the ircLogBot example [1], implies that calling self.join will 
> eventually invoke self.joined as if self.joined was the permanent 
> callback for calling self.join. I like your explanation for the 
> distinction between deferreds and methods but this seems to be blurring 
> the two. What happens if an error occurred while trying to join a 
> channel? (I'm not trying to pick anybody--I'm just trying to make sense 
> of the examples that I'm seeing.)
> 
> -- Jason
> 
> [1]
> http://twistedmatrix.com/documents/current/howto/clients#auto5

Aah, but that taps into the deep mystery of IRC.  The server can send 
you a 'joined' notification *even if you didn't previously request to 
join a channel*.  Also there is no particular way to hook up a join 
request and a join notification; if you request to join #foobar 3 times, 
and then you only get one notification of having joined, it's not clear 
which request gets the callback; commands are not tagged.

Of course this varies between IRC servers, too.

Better-specified protocols will tend to have better-specified interfaces 
that make use of Deferreds more.



From itamar at itamarst.org  Sun May 16 21:29:26 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 16 May 2004 23:29:26 -0400
Subject: [Twisted-Python] integrating CompStrm//adding background
	processing
In-Reply-To: <20040517024339.42551.qmail@web8310.mail.in.yahoo.com>
References: <20040517024339.42551.qmail@web8310.mail.in.yahoo.com>
Message-ID: <1084764566.28823.7.camel@sheriffpony>

On Sun, 2004-05-16 at 22:43, Bill la Forge wrote:
 
> My initial approach, of using callLater for successive invocations,
> was 
> flawed because of the limited granularity of time available on a PC.

The suggested way for doing highly frequent calls to scheduled events in
twisted is twisted.internet.task.LoopingCall. It does not have this
flaw.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From laforge49 at yahoo.co.in  Sun May 16 22:14:08 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Mon, 17 May 2004 05:14:08 +0100 (BST)
Subject: [Twisted-Python] integrating CompStrm//adding background
	processing
In-Reply-To: <1084764566.28823.7.camel@sheriffpony>
Message-ID: <20040517041408.1995.qmail@web8308.mail.in.yahoo.com>

It isn't that I want to call a function with a particular frequency. Rather, 
I want to call a function once per main loop. Further, when the function
is available to be called, I want to run with a timeout of 0 to further
increase the frequency of calls. LoopingCall still uses callLater which 
simply can not deliver this type of service.
 
My view on things is that, while blocking I/O is best put in another 
thread, computations that can be broken into small pieces (putting
yield statements in every loop, for example) can run very nicely in the
background. Between each chunck of processing, you check for any
timer events and for I/O completions, of course. But you want to execute
these small chuncks AS FREQUENTLY AS POSSIBLE.
 
But like I said, I'm developing a new style of async programming. So
its bound to be something of a heresy. ;-)
 
Bill

Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
The suggested way for doing highly frequent calls to scheduled events in
twisted is twisted.internet.task.LoopingCall.
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040517/de7cf519/attachment.html>

From radix at twistedmatrix.com  Sun May 16 23:07:21 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 17 May 2004 01:07:21 -0400
Subject: [Twisted-Python] integrating CompStrm//adding
	background	processing
In-Reply-To: <20040517041408.1995.qmail@web8308.mail.in.yahoo.com>
References: <20040517041408.1995.qmail@web8308.mail.in.yahoo.com>
Message-ID: <40A84889.5050503@twistedmatrix.com>

Bill la Forge wrote:
> It isn't that I want to call a function with a particular frequency. 
> Rather,
> I want to call a function once per main loop. Further, when the function
> is available to be called, I want to run with a timeout of 0 to further
> increase the frequency of calls. LoopingCall still uses callLater which
> simply can not deliver this type of service.
>  
> My view on things is that, while blocking I/O is best put in another
> thread, computations that can be broken into small pieces (putting
> yield statements in every loop, for example) can run very nicely in the
> background. Between each chunck of processing, you check for any
> timer events and for I/O completions, of course. But you want to execute
> these small chuncks AS FREQUENTLY AS POSSIBLE.
>  
> But like I said, I'm developing a new style of async programming. So
> its bound to be something of a heresy. ;-)

Indeed, it sounds like what you're doing doesn't make any sense. Why do 
you need to call something every mainloop iteration? That's exactly the 
worst way to write asynchronous code. Polling sucks. :)

Maybe you can explain more about what you're doing? What *applications* 
do you have in mind that this thing would be good for? (I notice that 
your web site's first sentence mentions how great it would be to create 
applications from components, but the web site doesn't mention anything 
at all about existing or even theoretical applications).


-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040517/bb01f9e4/attachment.sig>

From laforge49 at yahoo.co.in  Mon May 17 02:00:33 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Mon, 17 May 2004 09:00:33 +0100 (BST)
Subject: [Twisted-Python] integrating CompStrm//adding background
	processing
In-Reply-To: <40A84889.5050503@twistedmatrix.com>
Message-ID: <20040517080033.39948.qmail@web8301.mail.in.yahoo.com>

If it looks like polling and acts like polling, when is it not polling?
--When its incrimental computing!
 
I've updated the project web pages to cover the Twisted integration:
    http://compstrm.sourceforge.net
But It really does not address this issue.
 
Polling, or rather, unnecessary polling is EVIL, especially in a 
framework like Twisted. Its an even greater sin than using BLOCKING
I/O for reading email files that could be very very large. ;-)
 
But polling is when you are checking something, like I/O completion.
That's NOT what is happening in CompStrm. Instead, CompStrm is
executing (hopefully!) useful application code, in small chunks.
 
When is this useful? Well, when you have some long-running 
application code, the alternative is to execute it on a separate thread.
Indeed, this is a good solution. Except that not everyone can debug
some of the nasties that occur. And then you've got all that overhead
and the delays that seem to be part of inter-task communication.
So you start optimizing to pass large chuncks between threads and,
woops, there goes your response time. (The old fast or cheap choice.)
 
CompStrm also integrates well with async I/O, allowing you to untwist
your logic a bit. Have you read anything about Stackless Python? This
is similar, but builds on Python Generators instead.
 
Does any of this help?
 
And as for applications, indeed, CompStrm developed from the latest 
requests my client has given me. I've got a client/server app with an
asynchronous interface used to compute just-in-time displays of multiple
streams. Now he wants the existing operations pushed into scripts.
With compstrm, I can have light-weight child processes sharing the
same I/O streams. I want to port all this to Twisted, but need several
additions: CompStrm and a good bsddb integration.
 
Now that I've completed the Twisted/CompStrm integration, I'll turn to
Twisted/bsddb integration. Be assured, I will not include CompStrm in
that integration!!! (It should be generally useful, and provide a means
of reading potentially large data using server threads, while minimizing
inter-thread overheads.)
 
Bill

Christopher Armstrong <radix at twistedmatrix.com> wrote:
Indeed, it sounds like what you're doing doesn't make any sense. Why do 
you need to call something every mainloop iteration? That's exactly the 
worst way to write asynchronous code. Polling sucks. :)

Maybe you can explain more about what you're doing? What *applications* 
do you have in mind that this thing would be good for? (I notice that 
your web site's first sentence mentions how great it would be to create 
applications from components, but the web site doesn't mention anything 
at all about existing or even theoretical applications).

Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040517/9e113290/attachment.html>

From glyph at divmod.com  Mon May 17 06:08:28 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 17 May 2004 08:08:28 -0400
Subject: [Twisted-Python] integrating CompStrm//adding background
	processing
In-Reply-To: <20040517024339.42551.qmail@web8310.mail.in.yahoo.com>
References: <20040517024339.42551.qmail@web8310.mail.in.yahoo.com>
Message-ID: <1084795707.20695.5.camel@kazekage>

On Sun, 2004-05-16 at 22:43, Bill la Forge wrote:

> As for the timing, I'm counting the number of items I can pass on an
> async pipe between two virtual processes running in the background of
> the main thread. Details for running over asyncore are available here:
> http://compstrm.sourceforge.net/timing.html

That code doesn't run - for starters, there is no variable 'd' in
WriteMany.cs, endWrite does not appear to take an argument, I think
readCount() is supposed to be ReadCount() in test(); it also doesn't
appear to test the twcs module, but rather only the asyncore loop.  Can
you package some easy-to-run tests with your next release?





From glyph at divmod.com  Mon May 17 07:05:29 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 17 May 2004 09:05:29 -0400
Subject: [Twisted-Python] integrating CompStrm//adding background
	processing
In-Reply-To: <1084795707.20695.5.camel@kazekage>
References: <20040517024339.42551.qmail@web8310.mail.in.yahoo.com>
	<1084795707.20695.5.camel@kazekage>
Message-ID: <1084799128.20970.20.camel@kazekage>

On Mon, 2004-05-17 at 08:08, Glyph Lefkowitz wrote:
> On Sun, 2004-05-16 at 22:43, Bill la Forge wrote:
> 
> > As for the timing, I'm counting the number of items I can pass on an
> > async pipe between two virtual processes running in the background of
> > the main thread. Details for running over asyncore are available here:
> > http://compstrm.sourceforge.net/timing.html
> 
> That code doesn't run - for starters, there is no variable 'd' in
> WriteMany.cs, endWrite does not appear to take an argument, I think
> readCount() is supposed to be ReadCount() in test(); it also doesn't
> appear to test the twcs module, but rather only the asyncore loop.  Can
> you package some easy-to-run tests with your next release?

Well, this was an intriguing performance problem, and one that likely
impacts my work, so I went ahead and fixed the tests.  Attached is a
modified copy of twcs.py from the may 16th distribution of compstrm on
sf.net, a twcsperf.py that tests it, and a patch to Twisted that may be
good to consider including.  This patch special-cases a 0 argument to
callLater to bypass the incredibly expensive gettimeofday syscall that
we end up making as a result.  I _think_ this is safe but I haven't run
the test suite on it yet.

On my machine, running the tests twice in a row:

glyph at kazekage:~/Desktop% python twcsperf.py
Pristine Twisted
7.85587286949e-05
12729.3302299 per second
callLater-Patched Twisted
8.00807499886e-05
12487.3955369 per second
glyph at kazekage:~/Desktop% python twcsperf.py
Pristine Twisted
7.8611869812e-05
12720.7252848 per second
callLater-Patched Twisted
7.80673313141e-05
12809.4554171 per second

YMMV, but I believe this effectively eliminates any performance
difference for your use case.  (Without the patch, I was getting more
like "8000 per second".)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: twcs.py
Type: text/x-python
Size: 6093 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20040517/83af88a9/attachment-0004.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: special-case-zero.patch
Type: text/x-patch
Size: 718 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20040517/83af88a9/attachment-0002.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: twcsperf.py
Type: text/x-python
Size: 990 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20040517/83af88a9/attachment-0005.py>

From laforge49 at yahoo.co.in  Mon May 17 07:35:18 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Mon, 17 May 2004 14:35:18 +0100 (BST)
Subject: [Twisted-Python] integrating CompStrm//adding background
	processing
In-Reply-To: <1084799128.20970.20.camel@kazekage>
Message-ID: <20040517133518.42061.qmail@web8307.mail.in.yahoo.com>

Many thanks! I'll dig into this tomorrow. (I'm in India, so your day
is my night. ;-)
 
Bill

Glyph Lefkowitz <glyph at divmod.com> wrote:
On Mon, 2004-05-17 at 08:08, Glyph Lefkowitz wrote:
> On Sun, 2004-05-16 at 22:43, Bill la Forge wrote:
> 
> > As for the timing, I'm counting the number of items I can pass on an
> > async pipe between two virtual processes running in the background of
> > the main thread. Details for running over asyncore are available here:
> > http://compstrm.sourceforge.net/timing.html
> 
> That code doesn't run - for starters, there is no variable 'd' in
> WriteMany.cs, endWrite does not appear to take an argument, I think
> readCount() is supposed to be ReadCount() in test(); it also doesn't
> appear to test the twcs module, but rather only the asyncore loop. Can
> you package some easy-to-run tests with your next release?

Well, this was an intriguing performance problem, and one that likely
impacts my work, so I went ahead and fixed the tests. Attached is a
modified copy of twcs.py from the may 16th distribution of compstrm on
sf.net, a twcsperf.py that tests it, and a patch to Twisted that may be
good to consider including. This patch special-cases a 0 argument to
callLater to bypass the incredibly expensive gettimeofday syscall that
we end up making as a result. I _think_ this is safe but I haven't run
the test suite on it yet.


Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040517/8723fb8e/attachment.html>

From laforge49 at yahoo.co.in  Mon May 17 08:14:57 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Mon, 17 May 2004 15:14:57 +0100 (BST)
Subject: [Twisted-Python] A problem with runUntilCurrent
Message-ID: <20040517141457.36366.qmail@web8310.mail.in.yahoo.com>

Glyph,
 
I couldn't resist digging into the code you sent. I noticed that you 
changed the code to use callLater. But there's a problem with that,
I suspect...
 
In base.runUntilCurrent, there's this while loop...
 
        while self._pendingTimedCalls and (self._pendingTimedCalls[-1].time <= now):
            call = self._pendingTimedCalls.pop()
.
.
.
 
This means that when you do a callLater with a delay of 0, 
runUntilCurrent will immediately call the delayed function, which then
calls callLater, and again the delayed function is immediately called, etc.
 
So the net result of the timing test you ran was that the reactor
main loop just hung until the test was completed.
 
So it ran fast. But it really didn't run at all. ;-(
 


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040517/c8b497e5/attachment.html>

From radix at twistedmatrix.com  Mon May 17 08:20:58 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 17 May 2004 10:20:58 -0400
Subject: [Twisted-Python] A problem with runUntilCurrent
In-Reply-To: <20040517141457.36366.qmail@web8310.mail.in.yahoo.com>
References: <20040517141457.36366.qmail@web8310.mail.in.yahoo.com>
Message-ID: <40A8CA4A.3090003@twistedmatrix.com>

Bill la Forge wrote:

> This means that when you do a callLater with a delay of 0,
> runUntilCurrent will immediately call the delayed function, which then
> calls callLater, and again the delayed function is immediately called, etc.

No, callLater(0,) doesn't call the function synchronously, it calls it 
in the next reactor iteration. i.e., not "*right* now", but "ASAP".

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040517/3fdcc336/attachment.sig>

From itamar at itamarst.org  Mon May 17 08:22:52 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 17 May 2004 10:22:52 -0400
Subject: [Twisted-Python] A problem with runUntilCurrent
In-Reply-To: <20040517141457.36366.qmail@web8310.mail.in.yahoo.com>
References: <20040517141457.36366.qmail@web8310.mail.in.yahoo.com>
Message-ID: <1084803771.29161.13.camel@sheriffpony>

On Mon, 2004-05-17 at 10:14, Bill la Forge wrote:

> This means that when you do a callLater with a delay of 0, 
> runUntilCurrent will immediately call the delayed function, which then
> calls callLater, and again the delayed function is immediately called,
> etc.

And that's why testImmediateThread failed. Attached is a fixed up patch
that solves that problem.


-------------- next part --------------
A non-text attachment was scrubbed...
Name: base.diff
Type: text/x-patch
Size: 1253 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20040517/2242c411/attachment-0002.bin>

From itamar at itamarst.org  Mon May 17 08:24:15 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 17 May 2004 10:24:15 -0400
Subject: [Twisted-Python] A problem with runUntilCurrent
In-Reply-To: <40A8CA4A.3090003@twistedmatrix.com>
References: <20040517141457.36366.qmail@web8310.mail.in.yahoo.com>
	<40A8CA4A.3090003@twistedmatrix.com>
Message-ID: <1084803855.29160.15.camel@sheriffpony>

On Mon, 2004-05-17 at 10:20, Christopher Armstrong wrote:

> No, callLater(0,) doesn't call the function synchronously, it calls it 
> in the next reactor iteration. i.e., not "*right* now", but "ASAP".

That's what it's *supposed* to do. But Glyph's code had a bug for the
following case: 

def infinite(): reactor.callLater(0, infinite)
reactor.callLater(0, infinite)

where it would just call infinite() over and over and over and over.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From laforge49 at yahoo.co.in  Mon May 17 09:04:38 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Mon, 17 May 2004 16:04:38 +0100 (BST)
Subject: [Twisted-Python] A problem with runUntilCurrent
In-Reply-To: <1084803771.29161.13.camel@sheriffpony>
Message-ID: <20040517150438.56987.qmail@web8307.mail.in.yahoo.com>

Itamar, 
 
This is also problematic. What this code does is limit the number of
calls that will be made by runUntilCurrent. However, if there's code
that does a callLater with a delay of 0, it will always execute that.
 
The problem now is that only callLater's with a delay of 0 will be
executed. Yes, now the main loop runs fine, but the other timeouts
are prevented from running. 
 
I'm thinking that what you need to do is to have runUntilCurrent first
extract all the pending timed calls that it plans to execute, creating
a sub-list, and then call them. It takes two loops, not one.
 
Bill

Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
On Mon, 2004-05-17 at 10:14, Bill la Forge wrote:

> This means that when you do a callLater with a delay of 0, 
> runUntilCurrent will immediately call the delayed function, which then
> calls callLater, and again the delayed function is immediately called,
> etc.

And that's why testImmediateThread failed. Attached is a fixed up patch
that solves that problem.


Index: base.py
===================================================================
--- base.py (revision 10658)
+++ base.py (working copy)
@@ -368,7 +368,11 @@
assert callable(_f), "%s is not callable" % _f
assert sys.maxint >= _seconds >= 0, \
"%s is not greater than or equal to 0 seconds" % (_seconds,)
- tple = DelayedCall(seconds() + _seconds, _f, args, kw,
+ if _seconds == 0:
+ tcc = 0
+ else:
+ tcc = seconds() + _seconds
+ tple = DelayedCall(tcc, _f, args, kw,
self._pendingTimedCalls.remove,
self._resetCallLater)
insort(self._pendingTimedCalls, tple)
@@ -416,7 +420,10 @@
count += 1
del self.threadCallQueue[:count]
now = seconds()
- while self._pendingTimedCalls and (self._pendingTimedCalls[-1].time <= now):
+ # make sure we don't run newly added calls, so we don't get into infinite loop
+ numCalls = len(self._pendingTimedCalls)
+ while numCalls and (self._pendingTimedCalls[-1].time <= now):
+ numCalls -= 1
call = self._pendingTimedCalls.pop()
try:
call.called = 1


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040517/cd589a6c/attachment.html>

From itamar at itamarst.org  Mon May 17 09:21:18 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 17 May 2004 11:21:18 -0400
Subject: [Twisted-Python] A problem with runUntilCurrent
In-Reply-To: <20040517150438.56987.qmail@web8307.mail.in.yahoo.com>
References: <20040517150438.56987.qmail@web8307.mail.in.yahoo.com>
Message-ID: <1084807277.29160.18.camel@sheriffpony>

On Mon, 2004-05-17 at 11:04, Bill la Forge wrote:

> I'm thinking that what you need to do is to have runUntilCurrent first
> extract all the pending timed calls that it plans to execute, creating
> a sub-list, and then call them. It takes two loops, not one.

Ah yes. I'll look into doing that later.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From pje at telecommunity.com  Mon May 17 09:46:35 2004
From: pje at telecommunity.com (Phillip J. Eby)
Date: Mon, 17 May 2004 11:46:35 -0400
Subject: [Twisted-Python] A problem with runUntilCurrent
In-Reply-To: <20040517150438.56987.qmail@web8307.mail.in.yahoo.com>
References: <1084803771.29161.13.camel@sheriffpony>
Message-ID: <5.1.1.6.0.20040517113914.025daec0@mail.telecommunity.com>

At 04:04 PM 5/17/04 +0100, Bill la Forge wrote:
>Itamar,
>
>This is also problematic. What this code does is limit the number of
>calls that will be made by runUntilCurrent. However, if there's code
>that does a callLater with a delay of 0, it will always execute that.

What I don't understand is why that should be the case.  A delay of zero 
should equal the *current time* plus zero.  The 'now' variable, however, is 
fixed at the time when 'runUntilCurrent()' is called.  Therefore, as soon 
as any time has elapsed (i.e. time() advances one quantum), a newly 
scheduled callLater(0,) must be scheduled for a time that is *after* 'now', 
and therefore ineligible for call within the loop.

(I'm particularly puzzled, therefore, by the part of Itamar's patch that 
sets the scheduled time to zero for callLater(0,).)

The real problem here, if any, is likely the use of a low-resolution time() 
value.  On Windows, for example, the tick granularity is like 1/18th of a 
second, so a callLater(0,) loop will consume a huge amount of time.  On 
Windows, a scheduler should probably use the high-res clock() rather than 
the low-res time() in order to work around this, which will ensure that 
nothing scheduled during a 'runUntilCurrent()' call will be executed until 
the *next* 'runUntilCurrent()' call.




From itamar at itamarst.org  Mon May 17 09:59:28 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 17 May 2004 11:59:28 -0400
Subject: [Twisted-Python] A problem with runUntilCurrent
In-Reply-To: <20040517141457.36366.qmail@web8310.mail.in.yahoo.com>
References: <20040517141457.36366.qmail@web8310.mail.in.yahoo.com>
Message-ID: <1084809568.29162.20.camel@sheriffpony>

Another attempt at a patch.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: base.diff
Type: text/x-patch
Size: 1371 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20040517/8834b312/attachment-0002.bin>

From db3l at fitlinxx.com  Mon May 17 13:54:18 2004
From: db3l at fitlinxx.com (David Bolen)
Date: 17 May 2004 15:54:18 -0400
Subject: [Twisted-Python] Re: How do I run a twisted server directly
References: <1084591098.21481.611.camel@sheriffpony>
	<E1BOywg-0004Jn-00@pyramid.twistedmatrix.com>
Message-ID: <u4qqen82d.fsf@fitlinxx.com>

"Alexander May" <alex-news at comcast.net> writes:

> Where the last line consists of a single space, then I get an error when I
> run twistd -y scratch.py (call stack at end).  When I remove the space so
> the last line is just a carriage return, it works fine.  I found it strange.
> Perhaps it is a python thing I has just never stumbled on before.  Not a big
> deal now that I know, but it drove me batty for a bit.

It sounds like an existing Python issue having to do with the internal
compile function (which is also used by exec) not handling the case of
a file not terminating in a newline.  Programs that bring in modules
as text and then compile them can run into this (it used to happen to
me with the Installer package).  So it's not really something related
to twisted other than how it accesses the module specified with -y.  I
guess since as of Python 2.2, compile/exec is documented as needing
the newline you might argue twistd should be taking care of that.  And
yes, the fact that it shows up as a bland SyntaxError is not obvious.

This got fixed as part of SourceForge bug 501622.  The fix showed up
in Python 2.3. (See also http://sourceforge.net/tracker/index.php?func=detail&aid=501622&group_id=5470&atid=105470).

-- David




From alex-news at comcast.net  Mon May 17 16:07:47 2004
From: alex-news at comcast.net (Alexander May)
Date: Mon, 17 May 2004 18:07:47 -0400
Subject: [Twisted-Python] Re: How do I run a twisted server directly
In-Reply-To: <u4qqen82d.fsf@fitlinxx.com>
Message-ID: <E1BPqHW-0007L2-00@pyramid.twistedmatrix.com>

> This got fixed as part of SourceForge bug 501622.  The fix showed up in
Python 2.3. (See also
http://sourceforge.net/tracker/index.php?func=detail&aid=501622&group_id=547
0&atid=105470).

Thanks for the info.  I'm running Python 2.3.3.  It does still appear to be
an issue with python and not twisted.

C:\Documents and Settings\Alexander May\My
Documents\maygold-dev\central-server>python
Python 2.3.3 (#51, Dec 18 2003, 20:22:39) [MSC v.1200 32 bit (Intel)] on
win32
Type "help", "copyright", "credits" or "license" for more information.
>>> c=compile ('print "hello world"\n', 'filename', 'exec')
>>> exec c
hello world
>>> c=compile ('print "hello world"\n ', 'filename', 'exec')
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
  File "filename", line 2

SyntaxError: invalid syntax
>>> ^Z

Alex


-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of David Bolen
Sent: Monday, May 17, 2004 3:54 PM
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] Re: How do I run a twisted server directly

"Alexander May" <alex-news at comcast.net> writes:

> Where the last line consists of a single space, then I get an error 
> when I run twistd -y scratch.py (call stack at end).  When I remove 
> the space so the last line is just a carriage return, it works fine.  I
found it strange.
> Perhaps it is a python thing I has just never stumbled on before.  Not 
> a big deal now that I know, but it drove me batty for a bit.

It sounds like an existing Python issue having to do with the internal
compile function (which is also used by exec) not handling the case of a
file not terminating in a newline.  Programs that bring in modules as text
and then compile them can run into this (it used to happen to me with the
Installer package).  So it's not really something related to twisted other
than how it accesses the module specified with -y.  I guess since as of
Python 2.2, compile/exec is documented as needing the newline you might
argue twistd should be taking care of that.  And yes, the fact that it shows
up as a bland SyntaxError is not obvious.

This got fixed as part of SourceForge bug 501622.  The fix showed up in
Python 2.3. (See also
http://sourceforge.net/tracker/index.php?func=detail&aid=501622&group_id=547
0&atid=105470).

-- David


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From laforge49 at yahoo.co.in  Mon May 17 20:34:36 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Tue, 18 May 2004 03:34:36 +0100 (BST)
Subject: [Twisted-Python] A problem with runUntilCurrent
In-Reply-To: <1084809568.29162.20.camel@sheriffpony>
Message-ID: <20040518023436.88140.qmail@web8302.mail.in.yahoo.com>

A better than perfect patch!
 
Itamar, your latest patch has its flaws, as things are a bit off when
a non-zero delay is passed via callLater when callLater is called from
a delayed call. But any mistakes it makes are quickly fixed in the
next cycle, and this is likely an uncommon case as well.
 
Of greater importance than being perfect, then, is that your patch
is likely faster than a perfict patch would be. And this is one place
where speed is most critical.
 
I'll be doing another release in a day or so, and include this patch.
 
Thanks to you and the rest of the Twisted development team who
took the time to dig into my code and then make the changes to
Twisted!

Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
Another attempt at a patch.
Index: base.py


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040518/1b15f7ef/attachment.html>

From itamar at itamarst.org  Mon May 17 20:49:49 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 17 May 2004 22:49:49 -0400
Subject: [Twisted-Python] A problem with runUntilCurrent
In-Reply-To: <20040518023436.88140.qmail@web8302.mail.in.yahoo.com>
References: <20040518023436.88140.qmail@web8302.mail.in.yahoo.com>
Message-ID: <1084848589.29158.30.camel@sheriffpony>

On Mon, 2004-05-17 at 22:34, Bill la Forge wrote:

> Itamar, your latest patch has its flaws, as things are a bit off when
> a non-zero delay is passed via callLater when callLater is called from
> a delayed call. But any mistakes it makes are quickly fixed in the
> next cycle, and this is likely an uncommon case as well.

Actually it's buggy in the phase of cancel(), and is failing the twisted
test suite...
 

-- 
Itamar Shtull-Trauring    http://itamarst.org





From laforge49 at yahoo.co.in  Mon May 17 21:34:59 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Tue, 18 May 2004 04:34:59 +0100 (BST)
Subject: [Twisted-Python] A problem with runUntilCurrent
In-Reply-To: <1084848589.29158.30.camel@sheriffpony>
Message-ID: <20040518033459.27605.qmail@web8307.mail.in.yahoo.com>

OK, then I'll hold off on my release.
 
Thanks for the heads up! 
 
Bill

Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
On Mon, 2004-05-17 at 22:34, Bill la Forge wrote:

> Itamar, your latest patch has its flaws, as things are a bit off when
> a non-zero delay is passed via callLater when callLater is called from
> a delayed call. But any mistakes it makes are quickly fixed in the
> next cycle, and this is likely an uncommon case as well.

Actually it's buggy in the phase of cancel(), and is failing the twisted
test suite...


-- 
Itamar Shtull-Trauring http://itamarst.org



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040518/650089cc/attachment.html>

From glyph at divmod.com  Mon May 17 21:40:02 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Mon, 17 May 2004 23:40:02 -0400
Subject: [Twisted-Python] A problem with runUntilCurrent
In-Reply-To: <20040518023436.88140.qmail@web8302.mail.in.yahoo.com>
References: <20040518023436.88140.qmail@web8302.mail.in.yahoo.com>
Message-ID: <40A98592.9020503@divmod.com>

Bill la Forge wrote:
> Thanks to you and the rest of the Twisted development team who
> took the time to dig into my code and then make the changes to
> Twisted!

You're welcome :).

The reason that we did so is because your run-time patch requires 
talking to the reactor over private interfaces.  Normally this sort of 
thing can be overlooked in Python, but there are actually multiple 
implementations of the reactor, some of which may not work with those 
changes.  So a more efficient implementation of callLater(0,...) will 
allow your code to be compatible with Twisted and not just happen to 
work on the default reactor :).



From laforge49 at yahoo.co.in  Tue May 18 01:35:28 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Tue, 18 May 2004 08:35:28 +0100 (BST)
Subject: [Twisted-Python] thread migration and bsddb
Message-ID: <20040518073528.51254.qmail@web8304.mail.in.yahoo.com>

The 040518 release of CompStrm supports the movement of computational streams to a server thread and back to the main thread.
See http://compstrm.sourceforge.net/thread.html
 
Thread migration makes it very easy to do blocking I/O without comprimising the main thread.
 
Unfortunatly, this is still not good enough when working with bsddb, as cursors are NOT thread free. To reuse a cursor, you must be on the SAME thread it was created on. ;-(
 
A moderatly reasonable solution seems to be to have a thread dedicated to bsddb. Now the business logic can migrate to that thread, do a bunch of blocking I/O, and then migrate back to the main thread. It would then have the option of returning to the bsddb thread and resume processing with cursors it previously created.
 
Mmm. Looks like its time for me to "put to practice" more of what I've read about Twisted. I'm thinking that managing the bsddb thread might be a Twisted Service--lots better than having each business object instance create its own thread.
 


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040518/e5326956/attachment.html>

From jason at injektilo.org  Tue May 18 01:51:08 2004
From: jason at injektilo.org (Jason Diamond)
Date: Tue, 18 May 2004 00:51:08 -0700
Subject: [Twisted-Python] More IMAP4Client/Deferred fun
Message-ID: <40A9C06C.2010609@injektilo.org>

Hi.

I'm now trying to move beyond the simple exercise I did yesterday and
turn my IMAP4 "client" into something that could be reusable from
other classes.

This is my current script:

 >>>
from twisted.internet import reactor, protocol
from twisted.protocols import imap4

server = "xxx"
username = "yyy"
password = "zzz"

debug = 0

class MyIMAP4Client(imap4.IMAP4Client):

    def serverGreeting(self, caps):
        if debug: print "serverGreeting:", caps
        imap4.IMAP4Client.serverGreeting(self, caps)
        d = self.login(username, password)
        d.addCallback(self.loginCallback)

    def loginCallback(self, d):
        if debug: print "loginCallback:", d
        de = self.select("INBOX")
        de.addCallback(self.selectCallback)

    def selectCallback(self, d):
        if debug: print "selectCallback:", d
        print "I have %d messages in my INBOX." % d["EXISTS"]
        de = self.logout()
        de.addCallback(self.logoutCallback)

    def logoutCallback(self, d):
        if debug: print "logoutCallback:", d
        reactor.stop()

    def connectionLost(self, reason):
        if debug: print "connectionLost:", reason
        imap4.IMAP4Client.connectionLost(self)

    def sendLine(self, line):
        if debug: print "sendLine:", line
        imap4.IMAP4Client.sendLine(self, line)

    def lineReceived(self, line):
        if debug: print "lineReceived:", line
        imap4.IMAP4Client.lineReceived(self, line)

class MyIMAP4ClientFactory(protocol.ClientFactory):

    protocol = MyIMAP4Client

if __name__ == "__main__":
    f = MyIMAP4ClientFactory()
    reactor.connectTCP(server, 143, f)
    reactor.run()
<<<

(Since this is a learning exercise, I'm trying to keep things simple
by including everything in one script.)

The problem with the above is that it prints to stdout in
selectCallback and then stops the reactor in logoutCallback.

I want to use this class from a Resource's render method. But instead
of printing to stdout, I want to "return" the value so that the render
method can use that value while outputting HTML. It's probably also
not a good idea to stop the reactor while serving a request.

The reactor will already be started by the time render gets invoked on
my resorce so I won't be calling reactor.run, right? But I will need to
connect to my IMAP server. So I tried modifying the script to connect
*after* the reactor started:

 >>>
if __name__ == "__main__":
    def connect(f):
        reactor.connectTCP(server, 143, f)
    f = MyIMAP4ClientFactory()
    reactor.callLater(0, connect, f)
    reactor.run()
<<<

This works just like before but feels weird to me. Is that the correct
usage for reactor.callLater? This was the only way I could figure out
how to invoke a functon *after* calling reactor.run. But this might be
a moot point since reactor.connectTCP probably just adds some events
to the queue and doesn't do anything until the reactor starts anyways,
right?

Looking at the documentation for connectTCP, I found out that it
returns an IConnector implementation but I'm not saving it to a
variable and doing anything with it so I'm not sure what it would buy
me and none of the methods on it look helpful here.

Anyways, I need to *not* print to the console:

 >>>
    def selectCallback(self, d):
        if debug: print "selectCallback:", d
        self.factory.count = d["EXISTS"]
        de = self.logout()
        de.addCallback(self.logoutCallback)
<<<

I'm now saving the count on the factory that created the protocol
instead of printing it directly to stdout.

At some point, I'm going to have to notify somebody that I've
retrieved the count so I figure I'm going to need a Deferred for
that. I modify the factory to hold on to a Deferred for me and set it
up to call a function to use the count:

 >>>
if __name__ == "__main__":
    def printCount(count):
        print count
    reactor.stop()
    f = MyIMAP4ClientFactory()
    f.deferred = defer.Deferred()
    f.deferred.addCallback(printCount)
    reactor.connectTCP(server, 143, f)
    reactor.run()
<<<

But now I need to tell the Deferred to actually make that callback so
I modify logoutCallback and connectionLost:

 >>>
    def logoutCallback(self, d):
        if debug: print "logoutCallback:", d

    def connectionLost(self, reason):
        if debug: print "connectionLost:", reason
        imap4.IMAP4Client.connectionLost(self)
        self.factory.deferred.callback(self.factory.count)
<<<

Now logoutCallback is no longer stopping the reactor. And
connectionLost is using the factory's deferred object to inform some
function what the actual count is. This works but it seems messy.

First of all, it seems like it would be nice if my module could expose
a free function to do all this for me:

 >>>
def getCount():
    f = MyIMAP4ClientFactory()
    f.deferred = defer.Deferred()
    reactor.connectTCP(server, 143, f)
    return f.deferred

if __name__ == "__main__":
    def printCount(count):
        print count
        reactor.stop()
    getCount().addCallback(printCount)
    reactor.run()
<<<

That's the best I can do. It works but I still don't feel all that
stoked on it. What am I doing wrong?

Is using my ClientFactory to hold data like this the correct thing to
do? In this case, there will only be one Protocol instance for this
ClientFactory, right?

Just for easy reference, here's the complete script in all its glory:

 >>>
from twisted.internet import defer, reactor, protocol
from twisted.protocols import imap4

server = "xxx"
username = "yyy"
password = "zzz"

debug = 0

class MyIMAP4Client(imap4.IMAP4Client):

    def serverGreeting(self, caps):
        if debug: print "serverGreeting:", caps
        imap4.IMAP4Client.serverGreeting(self, caps)
        d = self.login(username, password)
        d.addCallback(self.loginCallback)

    def loginCallback(self, d):
        if debug: print "loginCallback:", d
        de = self.select("INBOX")
        de.addCallback(self.selectCallback)

    def selectCallback(self, d):
        if debug: print "selectCallback:", d
        self.factory.count = d["EXISTS"]
        de = self.logout()
        de.addCallback(self.logoutCallback)

    def logoutCallback(self, d):
        if debug: print "logoutCallback:", d

    def connectionLost(self, reason):
        if debug: print "connectionLost:", reason
        imap4.IMAP4Client.connectionLost(self)
        self.factory.deferred.callback(self.factory.count)

    def sendLine(self, line):
        if debug: print "sendLine:", line
        imap4.IMAP4Client.sendLine(self, line)

    def lineReceived(self, line):
        if debug: print "lineReceived:", line
        imap4.IMAP4Client.lineReceived(self, line)

class MyIMAP4ClientFactory(protocol.ClientFactory):

    protocol = MyIMAP4Client

def getCount():
    f = MyIMAP4ClientFactory()
    f.deferred = defer.Deferred()
    reactor.connectTCP(server, 143, f)
    return f.deferred

if __name__ == "__main__":
    def printCount(count):
        print count
        reactor.stop()
    getCount().addCallback(printCount)
    reactor.run()
<<<

Any suggestions for improvements or corrections to my thinking would
be greatly appreciated!

Thanks.

-- Jason



From laforge49 at yahoo.co.in  Tue May 18 03:38:26 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Tue, 18 May 2004 10:38:26 +0100 (BST)
Subject: [Twisted-Python] A problem with runUntilCurrent
In-Reply-To: <40A98592.9020503@divmod.com>
Message-ID: <20040518093826.78365.qmail@web8311.mail.in.yahoo.com>

I'm not much good at patch files--lacking the tools.
 
But take a look at the attached hack (crafted manually). 
It works for me, with luck it should pass your regression tests.
(Its got the required 2 loops I was talking about.)
 
I'll note in passing that I'm only getting a measure of 7K with this code.
But that's probably as good as we can get without my patches.
Good enough, I suspect.
 
Bill

Glyph Lefkowitz <glyph at divmod.com> wrote: 
Bill la Forge wrote:
> Thanks to you and the rest of the Twisted development team who
> took the time to dig into my code and then make the changes to
> Twisted!

You're welcome :).

The reason that we did so is because your run-time patch requires 
talking to the reactor over private interfaces. Normally this sort of 
thing can be overlooked in Python, but there are actually multiple 
implementations of the reactor, some of which may not work with those 
changes. So a more efficient implementation of callLater(0,...) will 
allow your code to be compatible with Twisted and not just happen to 
work on the default reactor :).

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040518/989f66ab/attachment.html>
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: notes.txt
URL: </pipermail/twisted-python/attachments/20040518/989f66ab/attachment-0002.txt>

From laforge49 at yahoo.co.in  Tue May 18 04:20:09 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Tue, 18 May 2004 11:20:09 +0100 (BST)
Subject: [Twisted-Python] A problem with runUntilCurrent
In-Reply-To: <20040518093826.78365.qmail@web8311.mail.in.yahoo.com>
Message-ID: <20040518102009.30655.qmail@web8303.mail.in.yahoo.com>

A few corrections:
 
1. I left the do=[] statment out of the patch. Its been added.
    (I may still have made a format error in this hand-crafted patch,
    so please take care!)
 
2. Most of the speed loss now is due to changes in my code for
    supporting thread migration. So speed is not an issue.
 
Bill

Bill la Forge <laforge49 at yahoo.co.in> wrote: 
I'm not much good at patch files--lacking the tools.
 
But take a look at the attached hack (crafted manually). 
It works for me, with luck it should pass your regression tests.
(Its got the required 2 loops I was talking about.)
 
I'll note in passing that I'm only getting a measure of 7K with this code.
But that's probably as good as we can get without my patches.
Good enough, I suspect.
 
Bill



Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040518/26999a53/attachment.html>
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: notes.txt
URL: </pipermail/twisted-python/attachments/20040518/26999a53/attachment-0002.txt>

From exarkun at divmod.com  Tue May 18 07:56:43 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Tue, 18 May 2004 09:56:43 -0400
Subject: [Twisted-Python] thread migration and bsddb
In-Reply-To: <20040518073528.51254.qmail@web8304.mail.in.yahoo.com>
References: <20040518073528.51254.qmail@web8304.mail.in.yahoo.com>
Message-ID: <40AA161B.4060702@divmod.com>

Bill la Forge wrote:
> The 040518 release of CompStrm supports the movement of computational 
> streams to a server thread and back to the main thread.
> See http://compstrm.sourceforge.net/thread.html
>  
> Thread migration makes it very easy to do blocking I/O without 
> comprimising the main thread.
>  
> Unfortunatly, this is still not good enough when working with bsddb, as 
> cursors are NOT thread free. To reuse a cursor, you must be on the SAME 
> thread it was created on. ;-(

   http://www.sleepycat.com/docs/ref/program/mt.html :

   "Transactions and cursors may span threads, but only serially, that 
is, the application must serialize access to the DB_TXN and DBC handles."

   Jp



From laforge49 at yahoo.co.in  Tue May 18 09:54:04 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Tue, 18 May 2004 16:54:04 +0100 (BST)
Subject: [Twisted-Python] thread migration and bsddb
In-Reply-To: <40AA161B.4060702@divmod.com>
Message-ID: <20040518155404.84839.qmail@web8303.mail.in.yahoo.com>

Jp,
 
Thankyou very very much. I had grossly mis-read that page.
This means we can use the regular server threads rather than
a dedicated thread, making for a much cleaner implementation.
 
Bill

Jp Calderone <exarkun at divmod.com> wrote:
Bill la Forge wrote:
> The 040518 release of CompStrm supports the movement of computational 
> streams to a server thread and back to the main thread.
> See http://compstrm.sourceforge.net/thread.html
> 
> Thread migration makes it very easy to do blocking I/O without 
> comprimising the main thread.
> 
> Unfortunatly, this is still not good enough when working with bsddb, as 
> cursors are NOT thread free. To reuse a cursor, you must be on the SAME 
> thread it was created on. ;-(

http://www.sleepycat.com/docs/ref/program/mt.html :

"Transactions and cursors may span threads, but only serially, that 
is, the application must serialize access to the DB_TXN and DBC handles."

Jp

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040518/ba33c71a/attachment.html>

From duncan at adytumsolutions.com  Fri May 14 22:54:04 2004
From: duncan at adytumsolutions.com (Duncan McGreggor)
Date: Sat, 15 May 2004 00:54:04 -0400
Subject: [Twisted-Python] Custom app using twisted
Message-ID: <E3F00D3B-A62B-11D8-923B-000393DB4358@adytumsolutions.com>

Don't know if this belongs on the list or not...

I've just written a python monitoring program for baby-sitting a bunch 
of servers (I wanted something easier to setup and maintain than 
Nagios)... but the inevitable has happened, and I want to make a 
go-cart run like a ferrari. I was thinking of using python's interface 
to 'select' a la Medusa, but as soon as I saw 'import asyncore', I 
thought "There's got to be a better way..."

Enter twisted.

I would like to be able to run n monitoring instances simultaneously 
(thus my interest in 'select') to make the code as close to real-time 
as is practical. However, this is my first dive into POSIX I/O at this 
level (I ordered a copy of "UNIX Systems Programming" (Robbins) 
yesterday, to help me learn and adjust).

* The monitoring libs that I've put together do everything from local 
process monitoring (crap like ps with commands.getoutput), httplib 
checks against sites, process checks on remote servers (ssh+ps with 
commands.getoutput), ping checks, etc.
* An instance of the monitoring class will only do one type of 
monitoring (either process check, remote process check, ping check, or 
site check)

I would like to write a version of this that's a twisted application, 
in the hopes that it will be more robust and enterprise-ready. I've 
started looking at the following:
twisted.application.service.IProcess
twisted.application.service.Process
and spawnProcess from twisted.internet.default.PosixReactorBase

But I am not sure how to get started yet... I want to write something 
that can be run with twistd. Can anyone offer guidance or suggestions 
as to the approach? Right now, I am locked on the example here: 
http://twistedmatrix.com/documents/current/howto/application.html ... 
Is this what I should be looking at for inspiration? Or another 
approach all together? I've not come across examples of twisted apps 
that are a narrow specialization like what I have in mind... the app 
would be a *kind* of server... that would regularly spawn processes and 
wait for return data, regularly instantiate python monitoring classes.

Am I thinking of this in a sane way?

Thanks for any input,

Duncan



--
Duncan M. McGreggor        mailto:duncan at adytum.us
Systems &                  p 301.698.5032
Applications Engineer      http://adytum.us
AdytumSolutions, Inc. 
      




From daniel at nextwindow.com  Tue May 18 18:28:40 2004
From: daniel at nextwindow.com (Daniel Newton)
Date: Wed, 19 May 2004 12:28:40 +1200
Subject: [Twisted-Python] How to get the IP address of a client using XML-RPC
Message-ID: <40AAAA38.9010208@nextwindow.com>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040519/543a83d2/attachment.html>

From exarkun at divmod.com  Tue May 18 19:25:46 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Tue, 18 May 2004 21:25:46 -0400
Subject: [Twisted-Python] How to get the IP address of a client using
	XML-RPC
In-Reply-To: <40AAAA38.9010208@nextwindow.com>
References: <40AAAA38.9010208@nextwindow.com>
Message-ID: <40AAB79A.3070104@divmod.com>

Daniel Newton wrote:
> 
> I have a simple XML-PRC server similar to the example below:
> 
> from twisted.web import xmlrpc, server
> 
> class Example(xmlrpc.XMLRPC):
>     """An example object to be published."""
> 
>     def xmlrpc_add(self, a, b):
>         """Return sum of arguments."""
>         return a + b

       def xmlrpc_whatIsMyAddress(self):
           return self.transport.getPeer().host

> 
> if __name__ == '__main__':
>     from twisted.internet import reactor
>     r = Example()
>     reactor.listenTCP(7080, server.Site(r))
>     reactor.run()
> 
> I want to be able to get the address of the client that calls the xmlrpc 
> method can anyone help me with this?
> 
> thanks in advance
> 
> Daniel Newton
> 

   Jp



From laforge49 at yahoo.co.in  Tue May 18 22:03:27 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Wed, 19 May 2004 05:03:27 +0100 (BST)
Subject: [Twisted-Python] patch for background processing (delay 0)
Message-ID: <20040519040327.25303.qmail@web8305.mail.in.yahoo.com>

I do hereby consigne all copyrights for this patch to Glyph, as required 
by Twisted: http://www.twistedmatrix.com/developers/contributing
 
Appologies for not using diff, but I am not yet able to download the 
cygwin package. (perhaps Sunday bandwidth here will be better!)
 
The first part was developed by twisted:
 
    def callLater(self, _seconds, _f, *args, **kw):
        """See twisted.internet.interfaces.IReactorTime.callLater.
        """
        assert callable(_f), "%s is not callable" % _f
        assert sys.maxint >= _seconds >= 0, \
               "%s is not greater than or equal to 0 seconds" % (_seconds,)
# patch follows        
#        tple = DelayedCall(seconds() + _seconds, _f, args, kw,
        if _seconds != 0:
            ttc = _seconds + seconds()
        else:
            ttc = _seconds
        tple = DelayedCall(ttc, _f, args, kw,
# end of patch                           
                           self._pendingTimedCalls.remove,
                           self._resetCallLater)
        insort(self._pendingTimedCalls, tple)
        return tple

The second part is my contribution:
 
    def runUntilCurrent(self):
        """Run all pending timed calls.
        """
        if self.threadCallQueue:
            # Keep track of how many calls we actually make, as we're
            # making them, in case another call is added to the queue
            # while we're in this loop.
            count = 0
            for (f, a, kw) in self.threadCallQueue:
                try:
                    f(*a, **kw)
                except:
                    log.err()
                count += 1
            del self.threadCallQueue[:count]
        now = seconds()
# patch follows
#        while self._pendingTimedCalls and (self._pendingTimedCalls[-1].time <= now):
#            call = self._pendingTimedCalls.pop()
        do=[]
        while self._pendingTimedCalls and (self._pendingTimedCalls[-1].time <= now):
            do.append(self._pendingTimedCalls.pop())
        for call in do:
# end of patch
            try:
                call.called = 1
                call.func(*call.args, **call.kw)
            except:
                log.deferr()
                if hasattr(call, "creator"):
                    e = "\n"
                    e += " C: previous exception occurred in " + \
                         "a DelayedCall created here:\n"
                    e += " C:"
                    e += "".join(call.creator).rstrip().replace("\n","\n C:")
                    e += "\n"
                    log.msg(e)

Sincerly,
 


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040519/f889fb93/attachment.html>

From glyph at divmod.com  Tue May 18 22:17:01 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 19 May 2004 00:17:01 -0400
Subject: [Twisted-Python] patch for background processing (delay 0)
In-Reply-To: <20040519040327.25303.qmail@web8305.mail.in.yahoo.com>
References: <20040519040327.25303.qmail@web8305.mail.in.yahoo.com>
Message-ID: <1084940220.23871.1.camel@kazekage>

On Wed, 2004-05-19 at 00:03, Bill la Forge wrote:
> I do hereby consigne all copyrights for this patch to Glyph, as
> required 
> by Twisted: http://www.twistedmatrix.com/developers/contributing
>  
> Appologies for not using diff, but I am not yet able to download the 
> cygwin package. (perhaps Sunday bandwidth here will be better!)

Thanks for sending it on soon anyway, and thanks for reading the
contribution guidelines.  Good luck with downloading cygwin!  I will try
to test and apply this over the weekend if nobody else does it sooner.




From exarkun at divmod.com  Tue May 18 22:39:49 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 19 May 2004 00:39:49 -0400
Subject: [Twisted-Python] patch for background processing (delay 0)
In-Reply-To: <20040519040327.25303.qmail@web8305.mail.in.yahoo.com>
References: <20040519040327.25303.qmail@web8305.mail.in.yahoo.com>
Message-ID: <40AAE515.9020900@divmod.com>

Bill la Forge wrote:
> I do hereby consigne all copyrights for this patch to Glyph, as required
> by Twisted: http://www.twistedmatrix.com/developers/contributing
>  
> Appologies for not using diff, but I am not yet able to download the
> cygwin package. (perhaps Sunday bandwidth here will be better!)
>  
> The first part was developed by twisted:
>  
>     def callLater(self, _seconds, _f, *args, **kw):
>         """See twisted.internet.interfaces.IReactorTime.callLater.
>         """
>         assert callable(_f), "%s is not callable" % _f
>         assert sys.maxint >= _seconds >= 0, \
>                "%s is not greater than or equal to 0 seconds" % (_seconds,)
> # patch follows       
> #        tple = DelayedCall(seconds() + _seconds, _f, args, kw,
>         if _seconds != 0:
>             ttc = _seconds + seconds()
>         else:
>             ttc = _seconds
>         tple = DelayedCall(ttc, _f, args, kw,
> # end of patch                          
>                            self._pendingTimedCalls.remove,
>                            self._resetCallLater)

   Additionally, I would suggest that _pendingTimedCalls.append(tple) be 
used instead of the insort() call when _seconds is 0.  This speeds up 
the case of a callLater(0) loop by about 10%.

>         insort(self._pendingTimedCalls, tple)
>         return tple
> The second part is my contribution:
>  
>     def runUntilCurrent(self):
>         """Run all pending timed calls.
>         """
>         if self.threadCallQueue:
>             # Keep track of how many calls we actually make, as we're
>             # making them, in case another call is added to the queue
>             # while we're in this loop.
>             count = 0
>             for (f, a, kw) in self.threadCallQueue:
>                 try:
>                     f(*a, **kw)
>                 except:
>                     log.err()
>                 count += 1
>             del self.threadCallQueue[:count]
>         now = seconds()
> # patch follows
> #        while self._pendingTimedCalls and 
> (self._pendingTimedCalls[-1].time <= now):
> #            call = self._pendingTimedCalls.pop()

   This approach might be a bit faster than pop in a loop

     i = bisect.bisect_left(self._pendingTimedCalls, now)
     do = self._pendingTimedCalls[i:]
     self._pendingtimedCalls = self._pendingTimedCalls[:i]

   or it may not be, given how much more memory it allocates.

>         do=[]
>         while self._pendingTimedCalls and 
> (self._pendingTimedCalls[-1].time <= now):
>             do.append(self._pendingTimedCalls.pop())
>         for call in do:
> # end of patch
>             try:
>                 call.called = 1
>                 call.func(*call.args, **call.kw)
>             except:
>                 log.deferr()
>                 if hasattr(call, "creator"):
>                     e = "\n"
>                     e += " C: previous exception occurred in " + \
>                          "a DelayedCall created here:\n"
>                     e += " C:"
>                     e += "".join(call.creator).rstrip().replace("\n","\n 
> C:")
>                     e += "\n"
>                     log.msg(e)
> Sincerly,
>  

   Thanks for the contribution :)  By the way, for a slightly less hefty 
download than cygwin, check out http://unxutils.sourceforge.net/ (kindly 
pointed out by bear in #twisted).  It includes a Windows-native diff tool.

   Jp



From laforge49 at yahoo.co.in  Tue May 18 22:53:49 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Wed, 19 May 2004 05:53:49 +0100 (BST)
Subject: [Twisted-Python] patch for background processing (delay 0)
In-Reply-To: <40AAE515.9020900@divmod.com>
Message-ID: <20040519045349.56821.qmail@web8308.mail.in.yahoo.com>


You're quite welcome. I just hope it passes the regression tests!
 
I did manage, finally, to download cygwin. (Been a few years since I've 
used it.) Here in India, bandwidth depends on a lot more than the dialup 
connection. ;-) (Though things have improved greatly in the last few 
years.)
 
As for speed, I still suspect that heapq may be faster than insort. I know 
there's a few places in the code base where the last element is 
inspected (timeout method comes to mind) that would need to be 
changed to the first element. 
 
And, of course, Heapq is mising the remove method (I've since coded it).
 
But then there's the resetter method... might be impacted and I can't 
figure it out. ;-(
 
Bill

Jp Calderone <exarkun at divmod.com> wrote:
Thanks for the contribution :) By the way, for a slightly less hefty 
download than cygwin, check out http://unxutils.sourceforge.net/ (kindly 
pointed out by bear in #twisted). It includes a Windows-native diff tool.

Jp


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040519/54a1d7e3/attachment.html>

From bob at redivi.com  Tue May 18 23:10:58 2004
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 19 May 2004 01:10:58 -0400
Subject: [Twisted-Python] patch for background processing (delay 0)
In-Reply-To: <20040519045349.56821.qmail@web8308.mail.in.yahoo.com>
References: <20040519045349.56821.qmail@web8308.mail.in.yahoo.com>
Message-ID: <E9DE8A67-A952-11D8-A675-000A95686CD8@redivi.com>

In my heapq implementation of a similar timer mechanism (outside of 
Twisted), I did three things that twisted doesn't:
- cancelling a timer doesn't try and remove it from the heapq, instead 
it just marks the timer as dead.
- the time when it's supposed to fire is passed to the fire method so 
that the timer can determine whether it's supposed to actually fire or 
not (in the case of a time change it is actually added to the queue a 
second time without being removed so that I don't have to disrupt the 
heapq).
- it's two phase.. I have a list of newly added timers, and a heapq of 
waiting-to-fire timers.  At the end of the iteration I shove the list 
into the heapq and clear the list.  This prevents infinite callLater(0, 
...) situations.

-bob

On May 19, 2004, at 12:53 AM, Bill la Forge wrote:

>
> You're quite welcome. I just hope it passes the regression tests!
>  
> I did manage, finally, to download cygwin. (Been a few years since I've
>  used it.) Here in India, bandwidth depends on a lot more than the 
> dialup
>  connection. ;-) (Though things have improved greatly in the last few
>  years.)
>  
> As for speed, I still suspect that heapq may be faster than insort. I 
> know
>  there's a few places in the code base where the last element is
>  inspected (timeout method comes to mind) that would need to be
>  changed to the first element.
>   
> And, of course, Heapq is mising the remove method (I've since coded 
> it).
>  
> But then there's the resetter method... might be impacted and I can't
>  figure it out. ;-(
>  
> Bill
>
> Jp Calderone <exarkun at divmod.com> wrote:
> Thanks for the contribution :) By the way, for a slightly less hefty
>  download than cygwin, check out http://unxutils.sourceforge.net/ 
> (kindly
>  pointed out by bear in #twisted). It includes a Windows-native diff 
> tool.
>
> Jp
>
>
> Bill la Forge
> http://www.geocities.com/laforge49/
>
> Yahoo! India Matrimony: Find your partner  online.
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 2357 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20040519/48f4342f/attachment-0002.bin>

From laforge49 at yahoo.co.in  Tue May 18 23:44:06 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Wed, 19 May 2004 06:44:06 +0100 (BST)
Subject: [Twisted-Python] patch for background processing (delay 0)
In-Reply-To: <E9DE8A67-A952-11D8-A675-000A95686CD8@redivi.com>
Message-ID: <20040519054406.19577.qmail@web8311.mail.in.yahoo.com>

Well, we're in the process of doing your third item, at least--making it two-phase.
 
Bill

Bob Ippolito <bob at redivi.com> wrote:
In my heapq implementation of a similar timer mechanism (outside of 
Twisted), I did three things that twisted doesn't:
- cancelling a timer doesn't try and remove it from the heapq, instead 
it just marks the timer as dead.
- the time when it's supposed to fire is passed to the fire method so 
that the timer can determine whether it's supposed to actually fire or 
not (in the case of a time change it is actually added to the queue a 
second time without being removed so that I don't have to disrupt the 
heapq).
- it's two phase.. I have a list of newly added timers, and a heapq of 
waiting-to-fire timers. At the end of the iteration I shove the list 
into the heapq and clear the list. This prevents infinite callLater(0, 
...) situations.

-bob


Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040519/f9032141/attachment.html>

From laforge49 at yahoo.co.in  Wed May 19 00:23:30 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Wed, 19 May 2004 07:23:30 +0100 (BST)
Subject: [Twisted-Python] patch attached--for 0 delay callLater
Message-ID: <20040519062330.29748.qmail@web8302.mail.in.yahoo.com>

The attached notes.txt file contains a diff -u patch.
I consign the copyright to Glyph.
 
I've tested it best I can, but could someone run it through the regression 
tests? I'd like that assurance before updating my web pages. ;-)
 
Jp, I added one of your ideas anyway. But the bisect_left kept giving
strange errors.
 


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040519/596f4ddd/attachment.html>
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: notes.txt
URL: </pipermail/twisted-python/attachments/20040519/596f4ddd/attachment-0002.txt>

From laforge49 at yahoo.co.in  Wed May 19 04:58:17 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Wed, 19 May 2004 11:58:17 +0100 (BST)
Subject: [Twisted-Python] patch for background processing (delay 0)
In-Reply-To: <1084940220.23871.1.camel@kazekage>
Message-ID: <20040519105817.88954.qmail@web8305.mail.in.yahoo.com>

Please note that this patch was replaced by a "real" one, which included
a suggestion from Jp as well.
 
Also, the archive dropped part of my email (patch attached...) where I 
again consigned the patch to you.
 
No problem with CygWin, I just had to find the right time slot--mid 
morning is generally best here.
 
Now, if it just passes the regression tests! (Got my fingers crossed!)
 
Bill

Glyph Lefkowitz <glyph at divmod.com> wrote:
I will try
to test and apply this over the weekend if nobody else does it sooner.
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040519/4cad84f4/attachment.html>

From golux at comcast.net  Wed May 19 11:08:39 2004
From: golux at comcast.net (Stephen C. Waterbury)
Date: Wed, 19 May 2004 13:08:39 -0400
Subject: [Twisted-Python] Interacting plugins and mktap --append
Message-ID: <40AB9497.5070309@comcast.net>

Hi gang,

I'd like to have some interaction between 2 plugins,
and I'm wondering what's the most "archtecturally sound"
way of implementing that in the context of twistd/mktap.
Basically, I want to do

mktap foo
mktap --append=foo.tap blarg

and have blarg somehow obtain a reference to foo so
it can call foo's methods.  In my particular case, I have
a MultiService in foo that I'd like to add a blarg
service to, and also register some blarg stuff with
one of the foo MultiService's child Services.

Cheers,
Steve




From itamar at itamarst.org  Wed May 19 12:11:40 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 19 May 2004 14:11:40 -0400
Subject: [Twisted-Python] Interacting plugins and mktap --append
In-Reply-To: <40AB9497.5070309@comcast.net>
References: <40AB9497.5070309@comcast.net>
Message-ID: <1084989944.4158.60.camel@sheriffpony>

On Wed, 2004-05-19 at 13:08, Stephen C. Waterbury wrote:

> I'd like to have some interaction between 2 plugins,
> and I'm wondering what's the most "archtecturally sound"
> way of implementing that in the context of twistd/mktap.

Short answer is that mktap isn't the right tool for this sort of thing. 

The long answer probably involves Glyph writing a really long email so
I'll let him do that.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From golux at comcast.net  Wed May 19 12:18:10 2004
From: golux at comcast.net (Stephen C. Waterbury)
Date: Wed, 19 May 2004 14:18:10 -0400
Subject: [Twisted-Python] Interacting plugins and mktap --append
In-Reply-To: <1084989944.4158.60.camel@sheriffpony>
References: <40AB9497.5070309@comcast.net>
	<1084989944.4158.60.camel@sheriffpony>
Message-ID: <40ABA4E2.5010604@comcast.net>

Itamar Shtull-Trauring wrote:
> On Wed, 2004-05-19 at 13:08, Stephen C. Waterbury wrote:
> 
>>I'd like to have some interaction between 2 plugins,
>>and I'm wondering what's the most "archtecturally sound"
>>way of implementing that in the context of twistd/mktap.
> 
> Short answer is that mktap isn't the right tool for this sort of thing. 
> 
> The long answer probably involves Glyph writing a really long email so
> I'll let him do that.

Thanks for the quick reply, Itamar!  I'll do a q'n'd while
I await Glyph's treatise.  :)




From golux at comcast.net  Wed May 19 12:33:53 2004
From: golux at comcast.net (Stephen C. Waterbury)
Date: Wed, 19 May 2004 14:33:53 -0400
Subject: [Twisted-Python] Interacting plugins and mktap --append
In-Reply-To: <40ABA4E2.5010604@comcast.net>
References: <40AB9497.5070309@comcast.net>
	<1084989944.4158.60.camel@sheriffpony>
	<40ABA4E2.5010604@comcast.net>
Message-ID: <40ABA891.5090200@comcast.net>

Stephen C. Waterbury wrote:
> Itamar Shtull-Trauring wrote:
> 
>> On Wed, 2004-05-19 at 13:08, Stephen C. Waterbury wrote:
>>
>>> I'd like to have some interaction between 2 plugins,
>>> and I'm wondering what's the most "archtecturally sound"
>>> way of implementing that in the context of twistd/mktap.
>>
>> Short answer is that mktap isn't the right tool for this sort of thing.
>> The long answer probably involves Glyph writing a really long email so
>> I'll let him do that.
> 
> Thanks for the quick reply, Itamar!  I'll do a q'n'd while
> I await Glyph's treatise.  :)

Actually, thinking about it some more, I don't know why I
had locked onto the idea of using mktap that way.  I'm
thinking now it would make more sense to include extension
packages, additional services, etc. using configuration
options in footap.py.  So just use one plugin and make
it very configurable.  ;)




From soso_pub at yahoo.com  Wed May 19 14:17:25 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Wed, 19 May 2004 13:17:25 -0700 (PDT)
Subject: [Twisted-Python] Invalid 'reason' info
Message-ID: <20040519201725.9530.qmail@web14803.mail.yahoo.com>

Hi, 

If a reactor.connectTCP() is issued and the reactor is
stopped before connecting the following is the
'reason' send to clientConnectionFailed(self,
connector, reason):

reason.type = twisted.internet.error.ConnectError

reaseon.getErrorMessage() = An error occurred while
connecting: [Failure instance: Traceback:
twisted.internet.error.ConnectionLost, Connection to
the other side was lost in a non-clean fashion:
Connection lost.

The type is ok but the error message is not. It says
ConnectionLost which is wrong, from both information
and class type. 

Here is a quick testcode:

"""
from twisted.internet import reactor
from twisted.internet.protocol import ClientFactory

class Factory(ClientFactory):
    
    def clientConnectionFailed(self, connector,
reason):
        print 'clientConnectionFailed:',
str(reason.type), reason.getErrorMessage()
    
class Main:

    def start(self):
        
        reactor.connectTCP('localhost', 2175,
Factory())
        reactor.stop()
        reactor.run()
    
        
if __name__ == '__main__':
    Main().start()

"""

Side note: 2175 port is closed here si it is not
suppose to connect anyway.

Regards,
Sorin



	
		
__________________________________
Do you Yahoo!?
SBC Yahoo! - Internet access at a great low price.
http://promo.yahoo.com/sbc/



From itamar at itamarst.org  Wed May 19 14:39:29 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 19 May 2004 16:39:29 -0400
Subject: [Twisted-Python] Invalid 'reason' info
In-Reply-To: <20040519201725.9530.qmail@web14803.mail.yahoo.com>
References: <20040519201725.9530.qmail@web14803.mail.yahoo.com>
Message-ID: <1084999169.4156.66.camel@sheriffpony>

1. What operating system?

2. Does "trial twisted.test.test_tcp" pass all tests?





From soso_pub at yahoo.com  Wed May 19 15:06:56 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Wed, 19 May 2004 14:06:56 -0700 (PDT)
Subject: [Twisted-Python] Invalid 'reason' info
In-Reply-To: <1084999169.4156.66.camel@sheriffpony>
Message-ID: <20040519210656.59407.qmail@web14812.mail.yahoo.com>

Hi,

--- Itamar Shtull-Trauring <itamar at itamarst.org>
wrote:
> 1. What operating system?

Win 2k, Python 2.3.3, Twisted 1.2.0.

> 2. Does "trial twisted.test.test_tcp" pass all
> tests?

I ran it like this:
"""
>>> import twisted.trial.unittest as u
>>> import twisted.trial.reporter as rep
>>> t = u.TestSuite()
>>> t.addModule('twisted.test.test_tcp')
>>> t.run(rep.TextReporter())
"""

The results:
"""
Ran 19 tests in 14.041s

OK
"""

Sorin



	
		
__________________________________
Do you Yahoo!?
Yahoo! Domains � Claim yours for only $14.70/year
http://smallbusiness.promotions.yahoo.com/offer 



From soso_pub at yahoo.com  Wed May 19 15:18:15 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Wed, 19 May 2004 14:18:15 -0700 (PDT)
Subject: [Twisted-Python] Twisted 1.3.0 Windows installers
Message-ID: <20040519211815.86179.qmail@web14802.mail.yahoo.com>

Hi,

I saw on the site that Twisted 1.3.0 was released.In
case someone forgot ;), the links to Windows
installers are not working.

Sorin



	
		
__________________________________
Do you Yahoo!?
Yahoo! Domains � Claim yours for only $14.70/year
http://smallbusiness.promotions.yahoo.com/offer 



From glyph at divmod.com  Wed May 19 18:12:42 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 19 May 2004 20:12:42 -0400
Subject: [Twisted-Python] Interacting plugins and mktap --append
In-Reply-To: <40ABA891.5090200@comcast.net>
References: <40AB9497.5070309@comcast.net>
	<1084989944.4158.60.camel@sheriffpony> <40ABA4E2.5010604@comcast.net>
	<40ABA891.5090200@comcast.net>
Message-ID: <1085011962.3849.30.camel@kazekage>

On Wed, 2004-05-19 at 14:33, Stephen C. Waterbury wrote:

> Actually, thinking about it some more, I don't know why I
> had locked onto the idea of using mktap that way.  I'm
> thinking now it would make more sense to include extension
> packages, additional services, etc. using configuration
> options in footap.py.  So just use one plugin and make
> it very configurable.  ;)

I don't have time for the treatise at the moment, so I'll be brief :).

We're wrestling with a similar issue in Quotient right now, and
twisted's configuration infrastructure just isn't up to the task.  The
suggested work-around, effectively, is to build an easy-to-read
configuration minilanguage for your .tac, hopefully one that only
involves one or two python functions.  (I don't mean "parse a config
file", I mean, "use some tiny subset of python to configure your
application".)

In the large, this has problems, because different applications can't
easily be configured to work with each other without significant
plumbing work.  This is in particular unpleasant for web apps.  However,
there are larger problems for us to attack, such as developing some kind
of general shell infrastructure to allow people to log in over multiple
protocols which potentially access different applications through the
same objects...

So, in short, look in quotient/deployment.py and doc/sample.tac in the
_latest, brand-new release of Quotient_, 0.9.0, and there is an example
you can draw from.  In the future, we will try to generalize this
approach and separate port-binding configuration from application
configuration.

Almost everything in Quotient - and anything in a well-behaved Twisted
app these days - is based off of some kind of connection to storage,
whether it's a pickle, a SQL database, or something weird like Atop, and
a Realm which wraps that storage.  Once you're past the realm, almost
every protocol-level configuration option is beyond the scope of your
application.  The main thing that needs to be done is normalize how
protocols and factories find out about the realm, and to develop an API
to reliably, safely, and deterministically start up and shut down
storage.  This is do-able using the existing twisted.application stuff
but there needs to be a higher level convenience layer built.

And really, I'm not going to write that treatise, so I'll stop now ;-)






From daniel at nextwindow.net  Wed May 19 21:25:13 2004
From: daniel at nextwindow.net (Daniel Newton)
Date: Thu, 20 May 2004 15:25:13 +1200
Subject: [Twisted-Python] Re: How to get the IP address of a client using
	XML-RPC
In-Reply-To: <40AC23FE.5000302@nextwindow.com>
References: <40AC23FE.5000302@nextwindow.com>
Message-ID: <40AC2519.20004@nextwindow.net>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040520/7339d22f/attachment.html>

From dripton at ripton.net  Wed May 19 21:54:55 2004
From: dripton at ripton.net (David Ripton)
Date: Wed, 19 May 2004 23:54:55 -0400
Subject: [Twisted-Python] pb.Copyable, round trip objects,
	and untrusted clients
Message-ID: <40AC2C0F.40300@ripton.net>

I'm working on a client-server game, with hidden information, using PB. 
  I don't want to trust the clients.

Because there is hidden information, it's important not to send anything 
to the client that it's player shouldn't see.  Doing that with PB is 
pretty straightforward.  If a class's data is always secret, don't make 
it Copyable.  If parts of a class are secret, censor them in getStateToCopy.

Obviously, the client should only be able to change the server's game 
state via a well-defined error-checked interface.  Also fairly 
straightforward, though error-prone since you need to forsee and test 
against every way to cheat.

There's a third hole to plug, which is passing an object from the server 
to the client as an argument of a client-side remote_* method, and later 
getting it back as an argument to a server-side perspective_* method. 
(e.g. the server passes the client a list of games in progress, and 
later the client passes back the game it wants to join.)  If the client 
changes the object before passing it back, it might trick the server 
into doing the wrong thing with it.

Anyway, it seems easy enough to avoid this problem, by just rewinding 
any changes the client has made to such objects.  At some point before 
sending an object to the client side, add it to a dict, keyed by its id. 
  When an object comes back from the client as an argument in a 
perspective_* call, use its id to lookup the server's copy of the object 
in the dict, and then reassign the current name to the good version of 
the object, losing any changes the client may have made.  In other 
words, the client is treated as if it only passed the object's id back, 
not its __dict__.  But the interface is simpler.

e.g.:

in Server
def __init__:
     self._paranoia = {}  # Maybe a weak dict instead
     #....

def paranoid_add(self, obj):
     self._paranoia[id(obj)] = obj
def paranoid_get(self, obj):
     return self._paranoia[id(obj)]

def form_game(self, whatever):
     game = Game.Game(args)
     self.paranoia_add(game)

Then in User (a pb.Avatar):
def perspective_join_game(self, game):
     game = self.server.paranoid_get(game)
     self.server.join_game(self.name, game)


This is simple and works, but it's annoyingly repetitive.  And plumbing 
code is infecting the application level.  And I know there are other 
object vs. id caches inside PB, so this feels redundant.  What's the 
right way to do this with Copyable?

Thanks.

-- 
David Ripton    dripton at ripton.net



From glyph at divmod.com  Wed May 19 22:40:54 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Thu, 20 May 2004 00:40:54 -0400
Subject: [Twisted-Python] pb.Copyable, round trip objects, and
	untrusted clients
In-Reply-To: <40AC2C0F.40300@ripton.net>
References: <40AC2C0F.40300@ripton.net>
Message-ID: <1085028054.4024.31.camel@kazekage>

On Wed, 2004-05-19 at 23:54, David Ripton wrote:

> This is simple and works, but it's annoyingly repetitive.  And plumbing 
> code is infecting the application level.  And I know there are other 
> object vs. id caches inside PB, so this feels redundant.  What's the 
> right way to do this with Copyable?

Use Cacheable - sort of.  That helps with the state-management issues. 
There are about ten other holes you didn't notice and rewinding changes
is an inherently unsafe way to conceptualize the problem.

If you're seriously interested in security with PB, you will need
newpb.  You should bother Brian Warner, since it seems like it's
*almost* there and he just needs a little more nudging.




From radix at twistedmatrix.com  Wed May 19 23:33:09 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 20 May 2004 01:33:09 -0400
Subject: [Twisted-Python] pb.Copyable, round trip objects,	and untrusted
	clients
In-Reply-To: <40AC2C0F.40300@ripton.net>
References: <40AC2C0F.40300@ripton.net>
Message-ID: <40AC4315.3040702@twistedmatrix.com>

David Ripton wrote:
> There's a third hole to plug, which is passing an object from the server 
> to the client as an argument of a client-side remote_* method, and later 
> getting it back as an argument to a server-side perspective_* method. 
> (e.g. the server passes the client a list of games in progress, and 
> later the client passes back the game it wants to join.)  If the client 
> changes the object before passing it back, it might trick the server 
> into doing the wrong thing with it.
> 
> Anyway, it seems easy enough to avoid this problem, by just rewinding 
> any changes the client has made to such objects.  At some point before 
> sending an object to the client side, add it to a dict, keyed by its id. 
>  When an object comes back from the client as an argument in a 
> perspective_* call, use its id to lookup the server's copy of the object 
> in the dict, and then reassign the current name to the good version of 
> the object, losing any changes the client may have made.  In other 
> words, the client is treated as if it only passed the object's id back, 
> not its __dict__.  But the interface is simpler.

It sounds like the client ought to just pass a string (e.g., the name of 
the game) or something representing the game it wants to play. IOW, 
whether it's a string or not, something that isn't possible to be munged 
in a way that would "mess up" the server in the first place.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040520/bfe79980/attachment.sig>

From soso_pub at yahoo.com  Thu May 20 01:56:35 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Thu, 20 May 2004 00:56:35 -0700 (PDT)
Subject: [Twisted-Python] Invalid 'reason' info - possible cause
Message-ID: <20040520075635.40514.qmail@web14806.mail.yahoo.com>

Continuing, I think I found the piece of code triggers
the wrong reason:

>From twisted/internet/base.py:

"""
    def disconnectAll(self):
        """Disconnect every reader, and writer in the
system.
        """
        selectables = self.removeAll()
        for reader in selectables:
            log.callWithLogger(reader,
                               reader.connectionLost,
                               
failure.Failure(main.CONNECTION_LOST))

"""

It seems that for every kind of selectable object -
even if not connected - it is issued connection lost.
I am unable at this moment to sugest a fix as I am not
familiar with the internals of twisted so I hope a
core developer can look into this further.

Sorin



	
		
__________________________________
Do you Yahoo!?
Yahoo! Domains � Claim yours for only $14.70/year
http://smallbusiness.promotions.yahoo.com/offer 



From jasper at peak.org  Thu May 20 03:25:20 2004
From: jasper at peak.org (Jasper Phillips)
Date: Thu, 20 May 2004 02:25:20 -0700 (PDT)
Subject: [Twisted-Python] pb.Copyable, round trip objects,	and untrusted
	clients
In-Reply-To: <40AC2C0F.40300@ripton.net>
References: <40AC2C0F.40300@ripton.net>
Message-ID: <Pine.LNX.4.53.0405200204510.7527@a.shell.peak.org>


On Wed, 19 May 2004, David Ripton wrote:

> I'm working on a client-server game, with hidden information, using PB. 
>   I don't want to trust the clients.

Titan, I presume?  Nice game!

I'm working on a game more akin to Civilization or Age of Wonders, but have
basically the same problem.


> Because there is hidden information, it's important not to send anything 
> to the client that it's player shouldn't see.  Doing that with PB is 
> pretty straightforward.  If a class's data is always secret, don't make 
> it Copyable.  If parts of a class are secret, censor them in getStateToCopy.

For me this was more complex, as what a Player knows is itself a true part
of the Game's State, potentially affecting Action/Event resolution.  I end
up calculating each Players state myself, and passing them explictly.

Plus this feels to me more like it should be part of the game itself, rather
than some oblique networking aspect.  Same end effect though.


> Obviously, the client should only be able to change the server's game 
> state via a well-defined error-checked interface.  Also fairly 
> straightforward, though error-prone since you need to forsee and test 
> against every way to cheat.

IMHO handling this can avoid the 3rd problem you mention.  I have Players
send Actions for a given Turn as the only API to change Game State.  These
actions don't take game object as args, but rather Ids as you suggest below.

I do send actual objects from the Game to Players, but IMHO this is a bit
error prone lest you accidentally leave in secret info.  I only do it so
that the clients can validate actions they plan sending against their
perceived State using the same mechanism as the Game.


> There's a third hole to plug, which is passing an object from the server 
> to the client as an argument of a client-side remote_* method, and later 
> getting it back as an argument to a server-side perspective_* method. 
> (e.g. the server passes the client a list of games in progress, and 
> later the client passes back the game it wants to join.)  If the client 
> changes the object before passing it back, it might trick the server 
> into doing the wrong thing with it.
> 
> Anyway, it seems easy enough to avoid this problem, by just rewinding 
> any changes the client has made to such objects.  At some point before 
> sending an object to the client side, add it to a dict, keyed by its id. 
>   When an object comes back from the client as an argument in a 
> perspective_* call, use its id to lookup the server's copy of the object 
> in the dict, and then reassign the current name to the good version of 
> the object, losing any changes the client may have made.  In other 
> words, the client is treated as if it only passed the object's id back, 
> not its __dict__.  But the interface is simpler.

IMHO it seems superflous to have the game update the information a client
sends, only to later access this same information for calculations.  Why not
just pass back the relavent Ids, and have the Game API look up their True
counterpart as needed?  This doesn't seem onerous to me.

-Jasper




From soso_pub at yahoo.com  Thu May 20 03:34:54 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Thu, 20 May 2004 02:34:54 -0700 (PDT)
Subject: [Twisted-Python] Hooking on unhandled exceptions
Message-ID: <20040520093454.21602.qmail@web14803.mail.yahoo.com>

Hi,

I want to catch all unhandled exceptions that usually
are caught and logged by the reactor. Is there a way
to hook into reactor to be notified about those
exceptions?

Thanks,
Sorin



	
		
__________________________________
Do you Yahoo!?
Yahoo! Domains � Claim yours for only $14.70/year
http://smallbusiness.promotions.yahoo.com/offer 



From jasper at peak.org  Thu May 20 03:34:29 2004
From: jasper at peak.org (Jasper Phillips)
Date: Thu, 20 May 2004 02:34:29 -0700 (PDT)
Subject: [Twisted-Python] pb.Copyable, round trip objects, and	untrusted
	clients
In-Reply-To: <1085028054.4024.31.camel@kazekage>
References: <40AC2C0F.40300@ripton.net> <1085028054.4024.31.camel@kazekage>
Message-ID: <Pine.LNX.4.53.0405200225390.7527@a.shell.peak.org>


On Thu, 20 May 2004, Glyph Lefkowitz wrote:

> On Wed, 2004-05-19 at 23:54, David Ripton wrote:
> 
> > This is simple and works, but it's annoyingly repetitive.  And plumbing 
> > code is infecting the application level.  And I know there are other 
> > object vs. id caches inside PB, so this feels redundant.  What's the 
> > right way to do this with Copyable?
> 
> Use Cacheable - sort of.  That helps with the state-management issues. 

In a turn based game it might be clearer just to have explicit and
monolithic state pushes each turn.  Perhaps I just don't get Cacheable, but
if seems more usefull when you have a variety of independently varrying
state, a constant connection, and no clear "Turn" seperation.


> There are about ten other holes you didn't notice and rewinding changes
> is an inherently unsafe way to conceptualize the problem.

Ack!  Now you've got me scared!  Ten other Holes?!  Could you elaborate a
little more?


> If you're seriously interested in security with PB, you will need
> newpb.  You should bother Brian Warner, since it seems like it's
> *almost* there and he just needs a little more nudging.

<nudge nudgee="Brian Warner"/>
<nudge nudgee="Brian Warner"/>
<nudge nudgee="Brian Warner"/>

What's in newpb anyway?  I'd thought this was essentially handled with all
the Avatar/Mind/Realm newcred stuff?

-Jasper




From itamar at itamarst.org  Thu May 20 07:14:20 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 20 May 2004 09:14:20 -0400
Subject: [Twisted-Python] Hooking on unhandled exceptions
In-Reply-To: <20040520093454.21602.qmail@web14803.mail.yahoo.com>
References: <20040520093454.21602.qmail@web14803.mail.yahoo.com>
Message-ID: <1085058860.1387.75.camel@sheriffpony>

On Thu, 2004-05-20 at 05:34, Sorin C. wrote:

> I want to catch all unhandled exceptions that usually
> are caught and logged by the reactor. Is there a way
> to hook into reactor to be notified about those
> exceptions?

def errorObserver(d):
    if d.has_key("isFailure") and d["isFailure"]:
        f = d["failure"]
        # do stuff to f

from twisted.python import log
log.addObserver(errorObserver)

-- 
Itamar Shtull-Trauring    http://itamarst.org





From itamar at itamarst.org  Thu May 20 07:15:41 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 20 May 2004 09:15:41 -0400
Subject: [Twisted-Python] Invalid 'reason' info - possible cause
In-Reply-To: <20040520075635.40514.qmail@web14806.mail.yahoo.com>
References: <20040520075635.40514.qmail@web14806.mail.yahoo.com>
Message-ID: <1085058941.1387.78.camel@sheriffpony>

On Thu, 2004-05-20 at 03:56, Sorin C. wrote:

> It seems that for every kind of selectable object -
> even if not connected - it is issued connection lost.
> I am unable at this moment to sugest a fix as I am not
> familiar with the internals of twisted so I hope a
> core developer can look into this further.

That is expected behaviour. If you shut down reactor, it closes all
connection by force, i.e. it is not a clean close. The problem is you
run reactor.stop() immediately before reactor.run(), so reactor shuts
down immediately.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From soso_pub at yahoo.com  Thu May 20 08:15:53 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Thu, 20 May 2004 07:15:53 -0700 (PDT)
Subject: [Twisted-Python] Invalid 'reason' info - possible cause
In-Reply-To: <1085058941.1387.78.camel@sheriffpony>
Message-ID: <20040520141553.68871.qmail@web14809.mail.yahoo.com>

Hi,

--- Itamar Shtull-Trauring <itamar at itamarst.org>
wrote:
> That is expected behaviour. If you shut down
> reactor, it closes all
> connection by force, i.e. it is not a clean close.
Yes, I use reactor.stop() to shutdown the system (is
there a cleaner way?), but there still is an
inconsistency because the error type is ConnectError
and error description talks about ConnectionLost.

> The problem is you
> run reactor.stop() immediately before reactor.run(),
> so reactor shuts
> down immediately.
This was just a test sample to emulate the behavior;
in my application I started more services (one service
being connecting to another server) in system
initialization and if one service fails then I call
immediately reactor.stop().

Anyway, it doesn't matter anymore since I am using a
workaround now.

Thanks for pointing on how to hook on unhandled
exceptions.

Sorin



	
		
__________________________________
Do you Yahoo!?
Yahoo! Domains � Claim yours for only $14.70/year
http://smallbusiness.promotions.yahoo.com/offer 



From dripton at ripton.net  Thu May 20 10:33:51 2004
From: dripton at ripton.net (David Ripton)
Date: Thu, 20 May 2004 09:33:51 -0700
Subject: [Twisted-Python] pb.Copyable, round trip objects,
	and untrusted clients
In-Reply-To: <40AC4315.3040702@twistedmatrix.com>
References: <40AC2C0F.40300@ripton.net> <40AC4315.3040702@twistedmatrix.com>
Message-ID: <20040520163351.GA13929@vidar.dreamhost.com>

On 2004.05.20 01:33:09 +0000, Christopher Armstrong wrote:
> It sounds like the client ought to just pass a string (e.g., the name of 
> the game) or something representing the game it wants to play. IOW, 
> whether it's a string or not, something that isn't possible to be munged 
> in a way that would "mess up" the server in the first place.

Yes, that's the way I solved the problem last time.  Stringify everything 
on one side.  Parse the strings on the other side.

If your goal is to have separate client and server programs rather than
a single distributed system, this is the way to do it.  If security is
your #1 goal, this is the way to do it.

If your goal is a minimal and easily maintained system, this is not the 
way to do it.  Not if you have a lot of complex state to track, anyway.
Remote references let you share the same representation on both sides,
avoiding most of the sync issues.  (Or at least delegating them to the
framework, where they can be handled consistently.)

-- 
David Ripton    dripton at ripton.net



From glyph at divmod.com  Thu May 20 10:58:10 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Thu, 20 May 2004 12:58:10 -0400
Subject: [Twisted-Python] pb.Copyable, round trip objects,
	and	untrusted clients
In-Reply-To: <Pine.LNX.4.53.0405200225390.7527@a.shell.peak.org>
References: <40AC2C0F.40300@ripton.net> <1085028054.4024.31.camel@kazekage>
	<Pine.LNX.4.53.0405200225390.7527@a.shell.peak.org>
Message-ID: <1085072289.4024.39.camel@kazekage>

On Thu, 2004-05-20 at 05:34, Jasper Phillips wrote:

> Ack!  Now you've got me scared!  Ten other Holes?!  Could you elaborate a
> little more?

There are no constraints on the type of any argument.  Players could
send lists where you expect strings.  Unicode where you expect lists. 
Tuples where you expect dicts.  etc, etc, etc.  Anywhere you have a
method like:

def remote_foo(self, x):
    self.foos.append(x)

e.g. where you save an object without first inspecting it to make sure
that it's what you expect and then store it, later, and in unrelated
code, you will see tracebacks.  Be creative.  Think of ways that you
could exploit this behavior as a user :).

None of this is anywhere as serious as the average protocol bug in a C
program, but it can still seriously disrupt service.

They can also send nasty circular structures which will put a lot of
load on the garbage collector, or may not even ever be collected.  This
is all in the protocol layer before it hits your code.  This is the main
issue that Brian and I set out to address with newpb and we came up with
some of the other hypothetical attacks against the current system along
the way.

> What's in newpb anyway?  I'd thought this was essentially handled with all
> the Avatar/Mind/Realm newcred stuff?

That's authentication.  Very different from security :).




From dripton at ripton.net  Thu May 20 10:56:59 2004
From: dripton at ripton.net (David Ripton)
Date: Thu, 20 May 2004 09:56:59 -0700
Subject: [Twisted-Python] pb.Copyable, round trip objects,
	and untrusted clients
In-Reply-To: <1085028054.4024.31.camel@kazekage>
References: <40AC2C0F.40300@ripton.net> <1085028054.4024.31.camel@kazekage>
Message-ID: <20040520165659.GB13929@vidar.dreamhost.com>

On 2004.05.20 00:40:54 +0000, Glyph Lefkowitz wrote:
> On Wed, 2004-05-19 at 23:54, David Ripton wrote:
> 
> > This is simple and works, but it's annoyingly repetitive.  And plumbing 
> > code is infecting the application level.  And I know there are other 
> > object vs. id caches inside PB, so this feels redundant.  What's the 
> > right way to do this with Copyable?
> 
> Use Cacheable - sort of.  That helps with the state-management issues. 

That was the answer I was kinda expecting, except for the "sort of"
part that indicates it's not the real answer.

Cacheable is heavier to use than Copyable, so I was hoping to 
develop with Copyable, then introduce Cacheable later if performance
demanded it.  I guess it's possible to do the same thing with security,
but that's much scarier.

> There are about ten other holes you didn't notice 

Got a list?

> and rewinding changes
> is an inherently unsafe way to conceptualize the problem.

Unsafe because you can easily forget to do it in a spot (agreed --
unless you build it into the framework), or unsafe because the client 
can exploit its copy of the Copyable server object in other ways?

> If you're seriously interested in security with PB, you will need
> newpb.  You should bother Brian Warner, since it seems like it's
> *almost* there and he just needs a little more nudging.

Hey Brian, nudge.  If there's anything I can do to help, email me.

-- 
David Ripton    dripton at ripton.net



From brian at dorseys.org  Thu May 20 11:01:07 2004
From: brian at dorseys.org (Brian Dorsey)
Date: Thu, 20 May 2004 10:01:07 -0700
Subject: [Twisted-Python] Looking for coach or participants for NorthWest
	Python Sprint
Message-ID: <20040520170107.GD7081@dorseys.org>



Hello Twisted folks!

The Seattle Python Interest Group (SeaPIG) is hosting a small sprint next month. I've included the full announcement below, but I wanted to send a note here to mention that we're definately going to have a group of people interested in learning Twisted, all of them (so far) being completely new to Twisted. So, if anyone is in the area, please join us! 

We'd especially love to see someone with a bit (or a lot) of Twisted experience, who'd be willing to coach us a bit. And, we'd love to see more new people to help us learn as well!

Take care,
-Brian

=============================================


SeaPIG (the Seattle Python Interest Group) is excited to announce the

                  NORTHWEST PYTHON SPRINT
                     June 19-20, 2004
                 Bellevue, Washington, USA

The cost is free thanks to our host Construx Software.  There will be a
large, comfortable room seating 50+ people at tables, wireless and wired
Internet access, and a projector for demonstrations.  We're currently
looking for coaches to lead sprints, as well as a count of the number
who might attend.  The main day is Saturday (9am-5pm), but we've also
reserved the room for Sunday in case people want more time.  There will
also be a time Saturday morning for lightning talks and demonstrations
(both non-commercial and commercial).

What is a sprint?  A sprint is a group of people who gather for a day or
more to work on a common software project.  The members choose
individual tasks and usually work solo or in pairs in the same room,
then get together periodically to compare notes.  We'll follow the model
that has worked successfully at the past several Python conferences:
several groups working on different projects in the same room.  Past
sprints have done development work on the Python core, Twisted,
Docutils, Webware, Zope, Chandler, etc.  Most projects have a variety of
tasks that need to be done -- coding modules, designing test suites,
squashing bugs, writing user documentation and developer documentation,
brainstorming design strategies, planning promotional activities, etc --
so there's something for every skill level.  You'll need to bring a
laptop, or if you don't have one you can pair with somebody who does.

So far there's one sprint scheduled, on Twisted.  A few Twisted newbies
will be writing an application to get their heads around this
asynchronous beast.  (We could really use somebody with more expertise
around, hint, hint.)

If you'd like to coach a sprint, sign up to attend,  propose a lightning
talk or demonstration, or just get more information, see our wiki page:

    http://seapig.org/NorthwestPythonSprint

or contact:

    Brian Dorsey <brian at dorseys.org>, 206-619-6975
    Mike Orr <mso at oz.net>, 206-240-4250

Construx is located at 11820 Northup Way #E200, Bellevue WA 98005.  It's
eight miles from downtown Seattle; twenty from Sea-Tac Airport.
Carpools and homestays are available if you contact us in advance.









From radix at twistedmatrix.com  Thu May 20 11:07:06 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 20 May 2004 13:07:06 -0400
Subject: [Twisted-Python] pb.Copyable, round trip objects,	and untrusted
	clients
In-Reply-To: <20040520163351.GA13929@vidar.dreamhost.com>
References: <40AC2C0F.40300@ripton.net> <40AC4315.3040702@twistedmatrix.com>
	<20040520163351.GA13929@vidar.dreamhost.com>
Message-ID: <40ACE5BA.4090202@twistedmatrix.com>

David Ripton wrote:
> On 2004.05.20 01:33:09 +0000, Christopher Armstrong wrote:
> 
>>It sounds like the client ought to just pass a string (e.g., the name of 
>>the game) or something representing the game it wants to play. IOW, 
>>whether it's a string or not, something that isn't possible to be munged 
>>in a way that would "mess up" the server in the first place.
> 
> 
> Yes, that's the way I solved the problem last time.  Stringify everything 
> on one side.  Parse the strings on the other side.
> 
> If your goal is to have separate client and server programs rather than
> a single distributed system, this is the way to do it.  If security is
> your #1 goal, this is the way to do it.
> 
> If your goal is a minimal and easily maintained system, this is not the 
> way to do it.  Not if you have a lot of complex state to track, anyway.
> Remote references let you share the same representation on both sides,
> avoiding most of the sync issues.  (Or at least delegating them to the
> framework, where they can be handled consistently.)

Well, your example didn't look like it had much use for using 
particularly complex state going both ways. Maybe you can explain this 
game-choosing process in a bit more detail? Without knowing any more, 
letting the user choose which game he wants to play sounds like it 
shouldn't be more complex than the server giving the client a list of 
strings of game-names (like "Bob's l33t Server") and the client sending 
back "Bob's l33t Server" in a request later on.

IOW, the poster who said that your second and third points are basically 
the same is correct; the API you're designing needs to be looked at 
specifically to see the optimal secure/easy solution.


-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040520/cf51c453/attachment.sig>

From glyph at divmod.com  Thu May 20 11:16:05 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Thu, 20 May 2004 13:16:05 -0400
Subject: [Twisted-Python] pb.Copyable, round trip objects, and
	untrusted clients
In-Reply-To: <20040520165659.GB13929@vidar.dreamhost.com>
References: <40AC2C0F.40300@ripton.net> <1085028054.4024.31.camel@kazekage>
	<20040520165659.GB13929@vidar.dreamhost.com>
Message-ID: <1085073365.4024.43.camel@kazekage>

On Thu, 2004-05-20 at 12:56, David Ripton wrote:

> Unsafe because you can easily forget to do it in a spot (agreed --
> unless you build it into the framework), or unsafe because the client 
> can exploit its copy of the Copyable server object in other ways?

I meant that you can easily forget to do it.  Even if you build it into
the framework, you have to categorize all possible changes you want to
be able to rewind if you want to reverse them.  You can make it very
_easy_ to categorize them, but you still can't avoid uploading
potentially harmful object structures in the update of the data.  By
just not allowing changes in the first place, you don't have to worry
about that.




From jasper at peak.org  Thu May 20 17:32:45 2004
From: jasper at peak.org (Jasper Phillips)
Date: Thu, 20 May 2004 16:32:45 -0700 (PDT)
Subject: [Twisted-Python] pb.Copyable, round trip objects,	and	untrusted
	clients
In-Reply-To: <1085072289.4024.39.camel@kazekage>
References: <40AC2C0F.40300@ripton.net> <1085028054.4024.31.camel@kazekage>
	<Pine.LNX.4.53.0405200225390.7527@a.shell.peak.org>
	<1085072289.4024.39.camel@kazekage>
Message-ID: <Pine.LNX.4.53.0405201620590.12639@a.shell.peak.org>


On Thu, 20 May 2004, Glyph Lefkowitz wrote:

> On Thu, 2004-05-20 at 05:34, Jasper Phillips wrote:
> 
> > Ack!  Now you've got me scared!  Ten other Holes?!  Could you elaborate a
> > little more?
> 
> There are no constraints on the type of any argument.  Players could
> send lists where you expect strings.  Unicode where you expect lists. 
> Tuples where you expect dicts.  etc, etc, etc.

Good point.  I validate data players send before inserting them into Game
state, and toss them a remote exception if they don't validate.  This is
mostly for testing purposes, but should catch this kind of abuse as well.

> None of this is anywhere as serious as the average protocol bug in a C
> program, but it can still seriously disrupt service.

Indeed I know someone who's dealing with just such a bug right now!  I am
fervently greatfull that Twisted exists, and I don't have to muck with such
low level headaches. :-)

> They can also send nasty circular structures which will put a lot of
> load on the garbage collector, or may not even ever be collected.  This
> is all in the protocol layer before it hits your code.  This is the main
> issue that Brian and I set out to address with newpb and we came up with
> some of the other hypothetical attacks against the current system along
> the way.

Hmmm, I hadn't considered such a malicious denial of service style attack.
If I get to the point where such a thing could really be a problem I'll
consider myself beyond lucky!

> > What's in newpb anyway?  I'd thought this was essentially handled with all
> > the Avatar/Mind/Realm newcred stuff?
> 
> That's authentication.  Very different from security :).

Right, although it did change pb a bit too.  More security would be great,
as I have to admit I'm mostly ignoring the issue and crossing my fingers
that Twisted deals with it well.  Just not enough energy to do everything.

-Jasper




From laforge49 at yahoo.co.in  Thu May 20 20:33:19 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Fri, 21 May 2004 03:33:19 +0100 (BST)
Subject: [Twisted-Python] 1.3 installer links still broken
Message-ID: <20040521023319.5793.qmail@web8306.mail.in.yahoo.com>

Just a quick reminder that the 1.3 download links for windows installers on www.twistedmatrix.com are still broken.
 


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040521/ba4e136d/attachment.html>

From dripton at ripton.net  Thu May 20 21:46:53 2004
From: dripton at ripton.net (David Ripton)
Date: Thu, 20 May 2004 20:46:53 -0700
Subject: [Twisted-Python] pb.Copyable, round trip objects,
	and untrusted clients
In-Reply-To: <40ACE5BA.4090202@twistedmatrix.com>
References: <40AC2C0F.40300@ripton.net> <40AC4315.3040702@twistedmatrix.com>
	<20040520163351.GA13929@vidar.dreamhost.com>
	<40ACE5BA.4090202@twistedmatrix.com>
Message-ID: <20040521034652.GA27428@vidar.dreamhost.com>

On 2004.05.20 13:07:06 +0000, Christopher Armstrong wrote:
> Well, your example didn't look like it had much use for using 
> particularly complex state going both ways. Maybe you can explain this 
> game-choosing process in a bit more detail? Without knowing any more, 
> letting the user choose which game he wants to play sounds like it 
> shouldn't be more complex than the server giving the client a list of 
> strings of game-names (like "Bob's l33t Server") and the client sending 
> back "Bob's l33t Server" in a request later on.

The full game has much more complex state, which I will resist spelling
out in detail.  I was just trying to show a minimal example. 

Yes, that particular event would only really require sending a list of 
dicts or tuples, with each dict or tuple holding the ~6 attributes of 
a single game that need to be displayed in a table, from server to 
client.  And then sending just the name or id of the one game that 
the user wants to join back to the server.  (Another event would send a
different subset of the game state.)

But there is a (small) code size cost to pass just the attributes of 
the Game class that are needed for that GUI display.  Passing the
whole Game class (censored in a global rather than event-specific way)
is simpler.  And if I decide to add another column to that table,
passing the whole object probably doesn't require a change to the 
remote call arguments, while passing the minimal bits does.  And it just
feels like better OO design to pass a whole object rather than ripping
out bits and pieces of it.

None of which matters much, if passing just dicts and strings and ints 
is secure, and passing copies of complex objects is not.  (This seems to
happen in every "distributed object system" I try.  Basic RPC works
[except in Java RMI, which appears to be an April Fool's joke]; 
anything more complex works for "Hello World" then falls over in
production.)

===================

Passing globally reusable game state from server to clients in a 
consistent, systematic way makes a lot more sense than providing 
minimal ad hoc local context for each distinct action.

There are two opposite ways to do this, which in the end generate 
mostly the same result.

A. Apply the (error-checked) action on the server, then use Copyable or 
Cacheable to copy the new state (except the hidden parts) over to the 
clients.  The clients hold a slightly delayed mirror image of the 
server's state.

B. Initialize separate objects of the same classes on the server and 
each client to the same starting state, then pass the same action that 
just ran on the server to each client (except hidden events).  If you 
assume that all actions are deterministic (meaning die rolls are 
separate actions), the same code running the same actions will 
generate the same end state.  The server and client are now more
like blind synchronized swimmers listening to the same coach.

B is more work up front.  However, assuming applying an action to a 
state to get the next state is cheap (and cheaply reversable), I think 
it's superior.  First, it uses more CPU on clients and less network 
bandwidth, which is a good tradeoff.  Second, you have the full event 
stream so you can easily undo/redo, either for real or to just step 
through previous game history.  Finally, client -> server traffic has 
to be small (attempted) actions, not full object dumps, because the 
server doesn't trust the client, so it has the beauty of symmetry.

> IOW, the poster who said that your second and third points are basically 
> the same is correct; the API you're designing needs to be looked at 
> specifically to see the optimal secure/easy solution.

Sure.

Upon further review, I'm back to throwing minimal action objects both
ways, eschewing Copyable and Cacheable completely in favor of manual
solutions involving dicts and lists of strings and ints.  Which is 
where I was a couple of weeks ago.  The grass is always greener...

The security issues in Copyable / Cacheable should knock me off this 
particular fence for long enough to have enough code written that I'm
unwilling to climb back up.

Thanks guys.

-- 
David Ripton    dripton at ripton.net



From dripton at ripton.net  Thu May 20 22:45:12 2004
From: dripton at ripton.net (David Ripton)
Date: Thu, 20 May 2004 21:45:12 -0700
Subject: [Twisted-Python] pb.Copyable, round trip objects,
	and untrusted clients
In-Reply-To: <Pine.LNX.4.53.0405200204510.7527@a.shell.peak.org>
References: <40AC2C0F.40300@ripton.net>
	<Pine.LNX.4.53.0405200204510.7527@a.shell.peak.org>
Message-ID: <20040521044512.GA28968@vidar.dreamhost.com>

On 2004.05.20 02:25:20 +0000, Jasper Phillips wrote:
> 
> On Wed, 19 May 2004, David Ripton wrote:
> 
> > I'm working on a client-server game, with hidden information, using PB. 
> >   I don't want to trust the clients.
> 
> Titan, I presume?  Nice game!

Yeah.  I don't have time to maintain 50k lines of Java code, so I need
to rewrite it in 5k lines of Python.  :->

> I'm working on a game more akin to Civilization or Age of Wonders, but have
> basically the same problem.

That if the Mongols upgrade early from horsies to tanks, Europe is toast,
but it's hard to make the game dynamic enough to show the Eiffel Yurt?

> > Because there is hidden information, it's important not to send anything 
> > to the client that it's player shouldn't see.  Doing that with PB is 
> > pretty straightforward.  If a class's data is always secret, don't make 
> > it Copyable.  If parts of a class are secret, censor them in getStateToCopy.
> 
> For me this was more complex, as what a Player knows is itself a true part
> of the Game's State, potentially affecting Action/Event resolution.  I end
> up calculating each Players state myself, and passing them explictly.

What happens if players conspire to share their secret information offline?
Is it okay if someone knows stuff but doesn't Officially Know it, or
does the whole game tend to fall over in the face of such weenie behavior?

If B, you've got a hard ceiling to the amount of security you can
program in, which is both annoying and refreshing (I don't need to fix 
this extremely theoretical security flaw, because there's a much larger 
one I can never fix.  It's like a security variant of Amdahl's Law.  If
your company insists on running Exchange, at least you don't need to worry 
about triply-redundant power supplies on the mail server.)

> Plus this feels to me more like it should be part of the game itself, rather
> than some oblique networking aspect.  Same end effect though.

I've decided to have the server and each client save the action stream
it's seen, which is somewhat similar.  I have code in the previous
version of this game to deduce and predict which stack hidden enemy 
units are in based on partial information.  But the AI isn't smart
enough to worry about what other players know, only what it knows, so
this is essentially local information.  I don't consider it part of the
server's game model.  (Maybe I should, from an everything-in-one-place
perspective.  It would make it easier to persist this information
rather than recompute it.)

Why is what other players know an important part of your game state?
The exact extents of other players' knowledge can't be public, so nobody
but the server can really use this information, right?  What does the
server do with it?  I guess it's useful for diplomacy, if you allow
bartering information.

> > Obviously, the client should only be able to change the server's game 
> > state via a well-defined error-checked interface.  Also fairly 
> > straightforward, though error-prone since you need to forsee and test 
> > against every way to cheat.
> 
> IMHO handling this can avoid the 3rd problem you mention.  I have Players
> send Actions for a given Turn as the only API to change Game State.  These
> actions don't take game object as args, but rather Ids as you suggest below.

I'm now back to wanting to do that in both directions.  Except using
strings instead of object IDs, since the parallel objects on the client 
and server will be distinct.  (But they will use the same class, which
is key to maintainability.  When you find yourself writing ClientGame
and ServerGame, scream until the urge passes, then decouple the concept
from its context until the need is gone.)

> I do send actual objects from the Game to Players, but IMHO this is a bit
> error prone lest you accidentally leave in secret info.  I only do it so
> that the clients can validate actions they plan sending against their
> perceived State using the same mechanism as the Game.

I want to make it symmetrical, so I want to build the client-side model
objects using the action stream, rather than copying them directly.  It
will be painfully boring, but I don't have *that* many actions, and
they're fully documented from last time I decided to go this way.

> IMHO it seems superflous to have the game update the information a client
> sends, only to later access this same information for calculations.  Why not
> just pass back the relavent Ids, and have the Game API look up their True
> counterpart as needed?  This doesn't seem onerous to me.

I wanted a way to bury this detail inside the framework, but it's not
currently practical so I'm flipping completely the other way.  I'd forgotten
how badly I want the ability to fast-forward and rewind through game history
by applying and undoing actions.  (Lets the AI free-run while giving the
ability to watch it as if it were moving more slowly.  Also lets you
review other people's savegames to pick up strategy hints.)

-- 
David Ripton    dripton at ripton.net



From radix at twistedmatrix.com  Thu May 20 22:52:55 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 21 May 2004 00:52:55 -0400
Subject: [Twisted-Python] pb.Copyable, round trip objects,	and untrusted
	clients
In-Reply-To: <20040521034652.GA27428@vidar.dreamhost.com>
References: <40AC2C0F.40300@ripton.net>
	<40AC4315.3040702@twistedmatrix.com>	<20040520163351.GA13929@vidar.dreamhost.com>	<40ACE5BA.4090202@twistedmatrix.com>
	<20040521034652.GA27428@vidar.dreamhost.com>
Message-ID: <40AD8B27.7090503@twistedmatrix.com>

David Ripton wrote:
> On 2004.05.20 13:07:06 +0000, Christopher Armstrong wrote:
> 
>>Well, your example didn't look like it had much use for using 
>>particularly complex state going both ways. Maybe you can explain this 
>>game-choosing process in a bit more detail? Without knowing any more, 
>>letting the user choose which game he wants to play sounds like it 
>>shouldn't be more complex than the server giving the client a list of 
>>strings of game-names (like "Bob's l33t Server") and the client sending 
>>back "Bob's l33t Server" in a request later on.
> 
> 
> The full game has much more complex state, which I will resist spelling
> out in detail.  I was just trying to show a minimal example. 
> 
> Yes, that particular event would only really require sending a list of 
> dicts or tuples, with each dict or tuple holding the ~6 attributes of 
> a single game that need to be displayed in a table, from server to 
> client.  And then sending just the name or id of the one game that 
> the user wants to join back to the server.  (Another event would send a
> different subset of the game state.)
> 
> But there is a (small) code size cost to pass just the attributes of 
> the Game class that are needed for that GUI display.  Passing the
> whole Game class (censored in a global rather than event-specific way)
> is simpler.  And if I decide to add another column to that table,
> passing the whole object probably doesn't require a change to the 
> remote call arguments, while passing the minimal bits does.  And it just
> feels like better OO design to pass a whole object rather than ripping
> out bits and pieces of it.

Ok, I'm going to debate this assumption of yours. It seems you're 
complaining about something that is barely a problem: let's talk about 
code size. Here's an example of how stuff could work.

In the client:

persp.callRemote("getCurrentGames").addCallback(_cbGotGames)

def _cbGotGames(self, games):
     # games is a list of complex objects, or whatever
     print "games are", games
     print "which one?"
     ui.whichGame(games).addCallback(_cbChosenGame)

def _cbChosenGame(self, game):
     #here's what you think saves a lot of code space:
     persp.callRemote("chooseGame", game)
     #as opposed to
     persp.callRemote("chooseGame", game.id())


Hmm, I count a single extra method call there. That doesn't seem like a 
whole lot to me. :-) This is not worth getting worked up over. 
Unfortunately, the Python community has somehow gotten into an obsession 
with syntax, and is trying to reduce tiny amounts of extra syntax at all 
costs.... but that's a rant for somewhere other than twisted-python.

 > None of which matters much, if passing just dicts and strings and ints
 > is secure, and passing copies of complex objects is not.  (This seems to
 > happen in every "distributed object system" I try.  Basic RPC works
 > [except in Java RMI, which appears to be an April Fool's joke];
 > anything more complex works for "Hello World" then falls over in
 > production.)

There's certainly applications using Copyable and Cacheable in 
production; I'm not sure what exactly you're talking about.

[snip]

I'll wait until you respond to this email before going over the points 
in the second section of your email.

>>IOW, the poster who said that your second and third points are basically 
>>the same is correct; the API you're designing needs to be looked at 
>>specifically to see the optimal secure/easy solution.
> 
> 
> Sure.
> 
> Upon further review, I'm back to throwing minimal action objects both
> ways, eschewing Copyable and Cacheable completely in favor of manual
> solutions involving dicts and lists of strings and ints.  Which is 
> where I was a couple of weeks ago.  The grass is always greener...
> 
> The security issues in Copyable / Cacheable should knock me off this 
> particular fence for long enough to have enough code written that I'm
> unwilling to climb back up.

Well, I'm defending my point in the name of sane, easy to implement 
design, and not primarily security. I'm not really sure what big 
security issues you're complaining about here. I think you're largely 
overreacting; Copyable and Cacheable are certainly useful, usable 
functionality. Of course, things aren't perfect, but we admit this with 
the newpb project. We are trying to solve all of the problems with the 
current PB there, especially security related. OTOH, I don't think 
you've pointed out any real problems with it. It mostly seems to be 
based on weird desires, to me. In fact, let me go back to your original 
post...


> Obviously, the client should only be able to change the server's 
 > game state via a well-defined error-checked interface.  Also fairly
 > straightforward, though error-prone since you need to forsee and
 > test against every way to cheat.
>
> There's a third hole to plug, which is passing an object from the server
 > to the client as an argument of a client-side remote_* method, and later
 > getting it back as an argument to a server-side perspective_* method.
 > (e.g. the server passes the client a list of games in progress, and
 > later the client passes back the game it wants to join.)  If the client
 > changes the object before passing it back, it might trick the server
 > into doing the wrong thing with it.

See, what it seems like you're saying here is "I want the client to be 
able to send me data that I don't care about and that it shouldn't be 
able to have control to change in the first place, but then I want to do 
extra work on the server to throw that data out". I should have made 
this point earlier, but I was rather tired when I last posted to this 
thread :). Anyway, that's what I'm hearing, and it doesn't really make 
sense to me.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040521/513cb3e0/attachment.sig>

From glyph at divmod.com  Thu May 20 23:05:27 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Fri, 21 May 2004 01:05:27 -0400
Subject: [Twisted-Python] pb.Copyable, round trip objects, and
	untrusted clients
In-Reply-To: <20040521034652.GA27428@vidar.dreamhost.com>
References: <40AC2C0F.40300@ripton.net> <40AC4315.3040702@twistedmatrix.com>
	<20040520163351.GA13929@vidar.dreamhost.com>
	<40ACE5BA.4090202@twistedmatrix.com>
	<20040521034652.GA27428@vidar.dreamhost.com>
Message-ID: <1085115927.3258.74.camel@kazekage>

On Thu, 2004-05-20 at 23:46, David Ripton wrote:

> The security issues in Copyable / Cacheable should knock me off this 
> particular fence for long enough to have enough code written that I'm
> unwilling to climb back up.

Keep in mind that you still might get an unexpected object (a dict where
you expect a list) and if you're tossing around large amounts of state
that's potentially a problem.  The security issues are not with Copyable
or Cacheable in particular.

Subtext: hassle brian.  warner at lothar.com.  newpb needs to get done, and
done soon :).




From radix at twistedmatrix.com  Thu May 20 23:12:27 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 21 May 2004 01:12:27 -0400
Subject: [Twisted-Python] pb.Copyable, round trip objects, and	untrusted
	clients
In-Reply-To: <1085115927.3258.74.camel@kazekage>
References: <40AC2C0F.40300@ripton.net>
	<40AC4315.3040702@twistedmatrix.com>	<20040520163351.GA13929@vidar.dreamhost.com>	<40ACE5BA.4090202@twistedmatrix.com>	<20040521034652.GA27428@vidar.dreamhost.com>
	<1085115927.3258.74.camel@kazekage>
Message-ID: <40AD8FBB.8030604@twistedmatrix.com>

Glyph Lefkowitz wrote:
> On Thu, 2004-05-20 at 23:46, David Ripton wrote:
> 
> 
>>The security issues in Copyable / Cacheable should knock me off this 
>>particular fence for long enough to have enough code written that I'm
>>unwilling to climb back up.
> 
> 
> Keep in mind that you still might get an unexpected object (a dict where
> you expect a list) and if you're tossing around large amounts of state
> that's potentially a problem.  The security issues are not with Copyable
> or Cacheable in particular.

Just so it's clear, this is what I was trying to say as one of the 
points in my last message, near the end, but I might not have said it in 
quite a politic or coherent way :)


-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040521/3d43acf2/attachment.sig>

From dripton at ripton.net  Fri May 21 00:16:39 2004
From: dripton at ripton.net (David Ripton)
Date: Fri, 21 May 2004 02:16:39 -0400
Subject: [Twisted-Python] pb.Copyable, round trip objects,	and untrusted
	clients
In-Reply-To: <40AD8B27.7090503@twistedmatrix.com>
References: <40AC2C0F.40300@ripton.net>	<40AC4315.3040702@twistedmatrix.com>	<20040520163351.GA13929@vidar.dreamhost.com>	<40ACE5BA.4090202@twistedmatrix.com>	<20040521034652.GA27428@vidar.dreamhost.com>
	<40AD8B27.7090503@twistedmatrix.com>
Message-ID: <40AD9EC7.9050307@ripton.net>

Christopher Armstrong wrote:

> Ok, I'm going to debate this assumption of yours. It seems you're 
> complaining about something that is barely a problem: let's talk about 
> code size. Here's an example of how stuff could work.
> 
> In the client:
> 
> persp.callRemote("getCurrentGames").addCallback(_cbGotGames)
> 
> def _cbGotGames(self, games):
>     # games is a list of complex objects, or whatever
>     print "games are", games
>     print "which one?"
>     ui.whichGame(games).addCallback(_cbChosenGame)
> 
> def _cbChosenGame(self, game):
>     #here's what you think saves a lot of code space:
>     persp.callRemote("chooseGame", game)
>     #as opposed to
>     persp.callRemote("chooseGame", game.id())
> 
> 
> Hmm, I count a single extra method call there. That doesn't seem like a 
> whole lot to me. :-) This is not worth getting worked up over. 

Probably not.  It's one more little piece of boilerplate all over. 
(Well, two -- the server has to lookup the game by id.)

I was worrying about code size more in the other subthread, the 
difference between

client.callRemote("send_game", game)

and

client.callRemote("send_stuff_about_game", game.name, game.owner, 
game.create_time, game.start_time, game.min_players, game.max_players, 
game.player_names)

Demonstrating the difference between passing complex objects and passing 
shredded bits of them.  This is what motivated my latest attempt to use 
Copyable instead of lots of little actions to manually push discrete 
changes to game state around.  (Which was probably a poor choice in any 
case; I really like the little discrete actions in most ways.)

Which is of course an exaggeration, because it would really be
client.callRemote("send_game_dict", game.as_dict())
Assuming we only need the atomic elements of game, not contained complex 
objects.  (Nested dicts get ugly fast.)  Also assuming it's okay to have 
one as_dict method that returns the superset of items we ever need, 
rather than a bunch of specialized versions.

> There's certainly applications using Copyable and Cacheable in 
> production; I'm not sure what exactly you're talking about.

I'm not saying they don't work.  I agree that they work quite well, up 
to a point.  Just not up to the point I wanted and mostly expected. 
(Based on reading optimistic docs, or perhaps reading docs optimistically.)

PB is a very nice framework, but the combination of live remote 
references to complex objects and untrusted clients is tough.  Which is 
fine -- I can just pretend Copyable and Cacheable aren't there, and be 
happy that it's so easy to pass dicts and strings.  If newpb solves this 
problem, great, but if not, PB is still the best RPC framework I have.

-- 
David Ripton    dripton at ripton.net



From jasper at peak.org  Fri May 21 02:39:41 2004
From: jasper at peak.org (Jasper Phillips)
Date: Fri, 21 May 2004 01:39:41 -0700 (PDT)
Subject: [Twisted-Python] pb.Copyable, round trip objects,	and untrusted
	clients
In-Reply-To: <20040521044512.GA28968@vidar.dreamhost.com>
References: <40AC2C0F.40300@ripton.net>
	<Pine.LNX.4.53.0405200204510.7527@a.shell.peak.org>
	<20040521044512.GA28968@vidar.dreamhost.com>
Message-ID: <Pine.LNX.4.53.0405210012100.15434@a.shell.peak.org>


On Thu, 20 May 2004, David Ripton wrote:

> On 2004.05.20 02:25:20 +0000, Jasper Phillips wrote:
> > 
> > Titan, I presume?  Nice game!
> 
> Yeah.  I don't have time to maintain 50k lines of Java code, so I need
> to rewrite it in 5k lines of Python.  :->

I used to write Java code for a living;  I came to hate it's shortcomings
and IMHO Python is purely superior.  Still, was Titan really 50k lines of
Java?!  Mind boggling.


> > I'm working on a game more akin to Civilization or Age of Wonders, but have
> > basically the same problem.
> 
> That if the Mongols upgrade early from horsies to tanks, Europe is toast,
> but it's hard to make the game dynamic enough to show the Eiffel Yurt?

Heh. :-)  I meant the code. ;-P  Besides, while my game is in the same genre
as Civ and AoW it's more influenced by boardgames and miniatures.


> > For me this was more complex, as what a Player knows is itself a true part
> > of the Game's State, potentially affecting Action/Event resolution.  I end
> > up calculating each Players state myself, and passing them explictly.
> 
> What happens if players conspire to share their secret information offline?
> Is it okay if someone knows stuff but doesn't Officially Know it, or
> does the whole game tend to fall over in the face of such weenie behavior?

It's ok, but won't have in game effects; such information is like secret
info only known to a few.  I'm considering a UI for information sharing, but
that'll just be for allies convenience.


> > Plus this feels to me more like it should be part of the game itself,
> > rather than some oblique networking aspect.  Same end effect though.
> 
> I've decided to have the server and each client save the action stream
> it's seen, which is somewhat similar.  I have code in the previous
> version of this game to deduce and predict which stack hidden enemy 
> units are in based on partial information.

I'm treating event history as game state, although I haven't implemented it
yet.  Not so much for the AIs use, but to model it's effects on future
events.  IMHO treating it as game state is also a simpler model.


> Why is what other players know an important part of your game state?
> The exact extents of other players' knowledge can't be public, so nobody
> but the server can really use this information, right?  What does the
> server do with it?  I guess it's useful for diplomacy, if you allow
> bartering information.

It can affect events and populations, and change how turns play out.  A
"player"'s knowledge represents roughly what an entire Faction knows, often
including population over which it rules.  For example knowledge of pending
invasion can spur population dispersal, unrest, etc.  Knowledge that a
foreign power is behind some act of espionage (whether true or untrue) can
affect public opinion and thus the practicality of war, etc.

Admitedly I'm not yet using this so it's just a nice potential, with the
main advantage IMHO being clearer code.


> > IMHO handling this can avoid the 3rd problem you mention.  I have
> > Players send Actions for a given Turn as the only API to change Game
> > State.  These actions don't take game object as args, but rather Ids as
> > you suggest below.
> 
> I'm now back to wanting to do that in both directions.  Except using
> strings instead of object IDs, since the parallel objects on the client 
> and server will be distinct.  (But they will use the same class, which
> is key to maintainability.  When you find yourself writing ClientGame
> and ServerGame, scream until the urge passes, then decouple the concept
> from its context until the need is gone.)

IMHO this seems overly complex.  I don't like maintaining parallel objects
or parallel calculation, as it smells like ClientGame/ServerGame...


> I want to make it symmetrical, so I want to build the client-side model
> objects using the action stream, rather than copying them directly.  It
> will be painfully boring, but I don't have *that* many actions, and
> they're fully documented from last time I decided to go this way.

Why?  I see no advantage to symmetry here.  IMHO the a trusted-server / 
untrusted-client asymetrical design is clearly called for.


> > IMHO it seems superflous to have the game update the information a
> > client sends, only to later access this same information for
> > calculations.  Why not just pass back the relavent Ids, and have the
> > Game API look up their True counterpart as needed?  This doesn't seem
> > onerous to me.
> 
> I wanted a way to bury this detail inside the framework, but it's not
> currently practical so I'm flipping completely the other way.  I'd forgotten
> how badly I want the ability to fast-forward and rewind through game history
> by applying and undoing actions.  (Lets the AI free-run while giving the
> ability to watch it as if it were moving more slowly.  Also lets you
> review other people's savegames to pick up strategy hints.)

I disagree that sending objects isn't practical, IMHO it just helps to
approach it slightly differently.  I'll try to explain what I mean by
roughly describing my game as an example;  if my design is crappy please feel
free to shoot holes in it! :-)

Much of my game's logic is based upon Copyable Actions which are used by
both Server and Client, e.g. MoveAction.  These have a .__call__(state)
which modifies the passed state as they see fit, as well as a
.validate(state) to ensure a move is legal.  Players create a list of such
Actions, and pass them to the Game server as their turn.  All the args for
Action are literals (such as Unit ids and movement direction), with Actions
knowing how to find the corresponding objects on passed in State.

With only literal args these Action objects can be passed safely to the
game, which will reconstitue it's own versions, validate them, then invoke
them by passing in it's True State.  Players are given their own PlayerState
view of TrueState each turn, with real (copies of) objects they can use for
display, UI and validation.

Basically it works like passing objects both ways, except it's safe.  The
costs are minor: referenceable objects must have Ids, Clients must create
Actions with 'object.id' instead of 'object', and Actions need to either
'object = state.getObject(objectId)' or use Game/State methods taking ids
for args.

IMHO Making all of this essentially part of the API is cleaner than having
bulk "Reconsitute Objects" methods.


Hope this is at least food for thought!  In any event I find talking about
my designs is a good way for me to step back and look at them from another
angle.

-Jasper




From jasper at peak.org  Fri May 21 03:07:14 2004
From: jasper at peak.org (Jasper Phillips)
Date: Fri, 21 May 2004 02:07:14 -0700 (PDT)
Subject: [Twisted-Python] pb.Copyable, round trip objects,	and untrusted
	clients
In-Reply-To: <40AD9EC7.9050307@ripton.net>
References: <40AC2C0F.40300@ripton.net> <40AC4315.3040702@twistedmatrix.com>
	<20040520163351.GA13929@vidar.dreamhost.com>
	<40ACE5BA.4090202@twistedmatrix.com>
	<20040521034652.GA27428@vidar.dreamhost.com>
	<40AD8B27.7090503@twistedmatrix.com> <40AD9EC7.9050307@ripton.net>
Message-ID: <Pine.LNX.4.53.0405210151520.15434@a.shell.peak.org>


On Fri, 21 May 2004, David Ripton wrote:
> I was worrying about code size more in the other subthread, the 
> difference between
> 
> client.callRemote("send_game", game)
> 
> and
> 
> client.callRemote("send_stuff_about_game", game.name, game.owner, 
> game.create_time, game.start_time, game.min_players, game.max_players, 
> game.player_names)

But you still have to init/set your Game object with all these args somehow on
the client side, right?  IMHO a more apt comparison is this:

game = Game( *manyArgs )
client.callRemote( "send_game", game )

triggering the server to:
game = reconstituteGame( game )

vs.

client.callRemote( "create_game", *manyArgs )

triggering the server to:
game = Game( *manyArgs )


IMHO the second is cleaner and less error prone.

-Jasper




From laforge49 at yahoo.co.in  Fri May 21 07:34:41 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Fri, 21 May 2004 14:34:41 +0100 (BST)
Subject: [Twisted-Python] Service.stopService
Message-ID: <20040521133441.1295.qmail@web8306.mail.in.yahoo.com>

I have a very simple application--I'm testing service start and stop.
Woops--stopService is never called. Why?
 
Here's my simpleService.py:
 
from twisted.application import service
class SimpleService(service.Service):
    def startService(self):
        service.Service.startService(self)
        print '***start'
    def stopService(self):
        service.Service.stopService(self)
        print '***stop'

And here's my twistd script:
 
from twisted.application import service
import simpleService
application = service.Application('testService', uid=1, gid=1)
serviceCollection=service.IServiceCollection(application)
w = simpleService.SimpleService()
s.setServiceParent(serviceCollection)

It logs ***start, just fine. But never ***stop!
 
Is something broken? Or should I be using addSystemEventTrigger???


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040521/1c29e609/attachment.html>

From michael.l.schneider at ugsplm.com  Fri May 21 07:44:49 2004
From: michael.l.schneider at ugsplm.com (Schneider, Michael)
Date: Fri, 21 May 2004 09:44:49 -0400
Subject: [Twisted-Python] Twisted 1.3 Windows Installers???
Message-ID: <49199579A2BB32438A7572AF3DBB2FB505A217FE@uscimplm001.net.plm.eds.com>

Hello All,
 
Thanks for releasing 1.3,  Is there an ETA for the windows installers?
 
Thanks
Mike
 
 
----------------------------------------------------------------
Michael Schneider
Senior Software Engineering Consultant
UGS PLM Solutions - an EDS Company
 
"The Greatest Performance Improvement Is the transitioning from a non-working state to the working state"

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040521/ea90cf88/attachment.html>

From exarkun at divmod.com  Fri May 21 07:54:43 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 21 May 2004 09:54:43 -0400
Subject: [Twisted-Python] Service.stopService
In-Reply-To: <20040521133441.1295.qmail@web8306.mail.in.yahoo.com>
References: <20040521133441.1295.qmail@web8306.mail.in.yahoo.com>
Message-ID: <40AE0A23.6020506@divmod.com>

Bill la Forge wrote:
> I have a very simple application--I'm testing service start and stop.
> Woops--stopService is never called. Why?
>  
> Here's my simpleService.py:
>  
> from twisted.application import service
> class SimpleService(service.Service):
>     def startService(self):
>         service.Service.startService(self)
>         print '***start'
>     def stopService(self):
>         service.Service.stopService(self)
>         print '***stop'
> And here's my twistd script:
>  
> from twisted.application import service
> import simpleService
> application = service.Application('testService', uid=1, gid=1)
> serviceCollection=service.IServiceCollection(application)
> w = simpleService.SimpleService()
> s.setServiceParent(serviceCollection)
> It logs ***start, just fine. But never ***stop!
>  
> Is something broken? Or should I be using addSystemEventTrigger???
> 

   I see different behavior.  After changing the last line to use "w" 
instead of "s":

exarkun at boson:~$ twistd -noy simple.tac
2004/05/21 09:52 EDT [-] Log opened.
2004/05/21 09:52 EDT [-] twistd 1.3.0rc1 (/usr/bin/python 2.3.3) starting up
2004/05/21 09:52 EDT [-] reactor class: 
twisted.internet.default.SelectReactor
2004/05/21 09:52 EDT [-] Loading simple.tac...
2004/05/21 09:52 EDT [-] Loaded.
2004/05/21 09:52 EDT [-] set uid/gid 1000/1000
2004/05/21 09:52 EDT [-] ***start
2004/05/21 09:52 EDT [-] Received SIGINT, shutting down.
2004/05/21 09:52 EDT [-] ***stop
2004/05/21 09:52 EDT [-] Main loop terminated.
2004/05/21 09:52 EDT [-] Server Shut Down.
exarkun at boson:~$

   Jp



From andrew-twisted at puzzling.org  Fri May 21 07:55:34 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 21 May 2004 23:55:34 +1000
Subject: [Twisted-Python] Service.stopService
In-Reply-To: <20040521133441.1295.qmail@web8306.mail.in.yahoo.com>
References: <20040521133441.1295.qmail@web8306.mail.in.yahoo.com>
Message-ID: <20040521135534.GI22686@frobozz>

On Fri, May 21, 2004 at 02:34:41PM +0100, Bill la Forge wrote:
>    I have a very simple application--I'm testing service start and stop.
>    Woops--stopService is never called. Why?
>     
[...]
>    And here's my twistd script:
>     
>    from twisted.application import service
>    import simpleService
>    application = service.Application('testService', uid=1, gid=1)
>    serviceCollection=service.IServiceCollection(application)
>    w = simpleService.SimpleService()
>    s.setServiceParent(serviceCollection)

This doesn't look like your real twistd script -- 's' isn't defined.  Did
your copy-and-paste screw something up?

-Andrew.




From laforge49 at yahoo.co.in  Fri May 21 08:05:39 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Fri, 21 May 2004 15:05:39 +0100 (BST)
Subject: [Twisted-Python] Service.stopService
In-Reply-To: <20040521135534.GI22686@frobozz>
Message-ID: <20040521140539.41560.qmail@web8307.mail.in.yahoo.com>


More like copy/paste/cleanup

I've since updated things... I'm thinking that perhaps the log is shutdown.

So I'm now writing files. I get the start file, but not the stop file:

from twisted.application import service
from twisted.internet import reactor

class SimpleService(service.Service):
    def startService(self):
        service.Service.startService(self)
        reactor.addSystemEventTrigger('before','shutdown',self.stopService)
        f=open('start.txt','w')
        f.close()
    def stopService(self):
        f=open('stop.txt','w')
        f.write('KillJoy was here?')
        f.close()
        service.Service.stopService(self)
        
from twisted.application import service
from twisted.internet import reactor

import simpleService

application = service.Application('testServer')
serviceCollection=service.IServiceCollection(application)
ss=simpleService.SimpleService()
ss.setServiceParent(serviceCollection)
reactor.stop()


C:\other\Bill\compstrm\compstrm\twbsd>twistd -noy testService.py
2004/05/21 19:29 India Standard Time [-] Log opened.
2004/05/21 19:29 India Standard Time [-] twistd 1.2.0 (C:\Python23\python.exe 2.
3.3) starting up
2004/05/21 19:29 India Standard Time [-] reactor class: twisted.internet.default
.SelectReactor
2004/05/21 19:29 India Standard Time [-] Main loop terminated.
2004/05/21 19:29 India Standard Time [-] Server Shut Down.

C:\other\Bill\compstrm\compstrm\twbsd>

Now, since its working for others, let me further report that I'm running on nt2000 with twisted 1.2.

Mmm. Perhaps I'd best reinstall. I may have messed up some twisted code while adding print statements. :-O

 


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040521/09f40a30/attachment.html>

From laforge49 at yahoo.co.in  Fri May 21 08:20:08 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Fri, 21 May 2004 15:20:08 +0100 (BST)
Subject: [Twisted-Python] still no stop!
Message-ID: <20040521142008.94249.qmail@web8308.mail.in.yahoo.com>

I've uninstalled twisted and re-installed.
 
Still no 'stop'! Here's my latest (true) test:
 
from twisted.application import service
from twisted.internet import reactor
class SimpleService(service.Service):
    def startService(self):
        service.Service.startService(self)
        print '>>>start'
    def stopService(self):
        print '>>>stop'
        service.Service.stopService(self)
        
from twisted.application import service
from twisted.internet import reactor
import simpleService
application = service.Application('testServer')
serviceCollection=service.IServiceCollection(application)
ss=simpleService.SimpleService()
ss.setServiceParent(serviceCollection)
reactor.stop()

C:\other\Bill\compstrm\compstrm\twbsd>twistd -noy testService.py
2004/05/21 19:45 India Standard Time [-] Log opened.
2004/05/21 19:45 India Standard Time [-] twistd 1.2.0 (C:\Python23\python.exe 2.
3.3) starting up
2004/05/21 19:45 India Standard Time [-] reactor class: twisted.internet.default
.SelectReactor
2004/05/21 19:45 India Standard Time [-] >>>start
2004/05/21 19:45 India Standard Time [-] Main loop terminated.
2004/05/21 19:45 India Standard Time [-] Server Shut Down.
C:\other\Bill\compstrm\compstrm\twbsd>
 
Is this an NT200 problem???
 
;-(
 


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040521/fcc60f32/attachment.html>

From radix at twistedmatrix.com  Fri May 21 08:27:13 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 21 May 2004 10:27:13 -0400
Subject: [Twisted-Python] still no stop!
In-Reply-To: <20040521142008.94249.qmail@web8308.mail.in.yahoo.com>
References: <20040521142008.94249.qmail@web8308.mail.in.yahoo.com>
Message-ID: <40AE11C1.1030509@twistedmatrix.com>

Bill la Forge wrote:
> I've uninstalled twisted and re-installed.
>  
> Still no 'stop'! Here's my latest (true) test:
>  
> from twisted.application import service
> from twisted.internet import reactor
> class SimpleService(service.Service):
>     def startService(self):
>         service.Service.startService(self)
>         print '>>>start'
>     def stopService(self):
>         print '>>>stop'
>         service.Service.stopService(self)
>        
> from twisted.application import service
> from twisted.internet import reactor
> import simpleService
> application = service.Application('testServer')
> serviceCollection=service.IServiceCollection(application)
> ss=simpleService.SimpleService()
> ss.setServiceParent(serviceCollection)
> reactor.stop()

Get rid of 'reactor.stop()'. I expect you misunderstood when exactly the 
.tac file is being executed; it happens before the reactor is started, 
so you're trying to stop the reactor before it starts, which is screwing 
things up. Just get rid of the reactor.stop(), run it as you were and 
hit ctrl-C; it works then.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040521/ce9b6086/attachment.sig>

From itamar at itamarst.org  Fri May 21 08:26:53 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 21 May 2004 10:26:53 -0400
Subject: [Twisted-Python] still no stop!
In-Reply-To: <20040521142008.94249.qmail@web8308.mail.in.yahoo.com>
References: <20040521142008.94249.qmail@web8308.mail.in.yahoo.com>
Message-ID: <1085149613.9644.25.camel@sheriffpony>

On Fri, 2004-05-21 at 10:20, Bill la Forge wrote:

> ss=simpleService.SimpleService()
> ss.setServiceParent(serviceCollection)
> reactor.stop()

Don't do reactor.stop() inside a .tac. A .tac runs *before* event loop
starts, so you are essentially stopping event loop before it starts,
which can lead to broken behaviour.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From laforge49 at yahoo.co.in  Fri May 21 08:40:14 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Fri, 21 May 2004 15:40:14 +0100 (BST)
Subject: [Twisted-Python] still no stop!
In-Reply-To: <1085149613.9644.25.camel@sheriffpony>
Message-ID: <20040521144014.60750.qmail@web8309.mail.in.yahoo.com>

Thanks folks!
 
I spent half a day writing a server wrapper for bsdb config and quit, as
I needed a better understanding of twisted.
 
Then I spend half a day fooling around with this, starting with finger,
making and fixing a whole series of dumb-bunny mistakes.
 
Now that I have a minimal working server, its a snap to build it up,
XP style.
 
One thing that I've got to puzzle out is failed startup is a server family.
What's the best way to cleanup when some server children succeed
and then one fails? (Case in point, some databases open, but then
one fails to open, possibly due to a configuration error.)
 
Just throw in the towel and do a restore next time round? Raise an
exception (I think this is wrong)? Call reactor.stop() and cleanup 
during shutdown?
 
Bill

Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
Don't do reactor.stop() inside a .tac. A .tac runs *before* event loop
starts, so you are essentially stopping event loop before it starts,
which can lead to broken behaviour.

-- 
Itamar Shtull-Trauring http://itamarst.org

Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040521/a160d15f/attachment.html>

From laforge49 at yahoo.co.in  Fri May 21 08:44:28 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Fri, 21 May 2004 15:44:28 +0100 (BST)
Subject: [Twisted-Python] still no stop!
In-Reply-To: <1085149613.9644.25.camel@sheriffpony>
Message-ID: <20040521144428.11889.qmail@web8310.mail.in.yahoo.com>


Gosh, I got to get my terms right. When I said server, I meant to say 

service. I have a minimal working service. I am dealing with issues 

regarding a family of services (one env parent service and with the dbs as 

child services). How to cleanup the successful services when one failed.


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040521/14583170/attachment.html>

From corydodt at twistedmatrix.com  Fri May 21 09:23:55 2004
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Fri, 21 May 2004 08:23:55 -0700
Subject: [Twisted-Python] Win32 files uploaded
Message-ID: <40AE1F0B.6070104@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On http://twistedmatrix.com/products/download

Please note that these files have a version string that is inconsistent with
the tarballs on the same page.  The win32 files will report version "1.3.0"
(which is correct).  Some of the other files will say "1.3.0rc1" (which is not).

A new release is coming shortly to fix this discrepancy.  Thanks for your
patience.

C
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.3-nr1 (Windows 2000)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFArh8L3A5SrXAiHQcRAt53AKCGbzsMCL2EJ0CMrPIF9LkoZtpKWwCgkm12
AhtrvUwzb1tCJTBMSSpIII4=
=yQyw
-----END PGP SIGNATURE-----



From laforge49 at yahoo.co.in  Fri May 21 10:12:18 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Fri, 21 May 2004 17:12:18 +0100 (BST)
Subject: [Twisted-Python] service takedown (one newbie to other newbies,
	methinks)
Message-ID: <20040521161218.43943.qmail@web8304.mail.in.yahoo.com>

If a service starts successfully, once initialization completes 
successfully, it's stopService will be called for proper cleanup.
 
However, if another service fails to successfully initialize, and it
is kind enough to call reactor.stop() rather than throw an exception,
then the first service can, at the end of its initialization, call
reactor.addSystemEventTrigger('before','shutdown',self.failedStartup),
then failedStartup() will be called and there is STILL a chance to
cleanup.
 
Here's the code, the script, and the twistd output:
 
from twisted.application import service
from twisted.internet import reactor
class SimpleService(service.Service):
    def startService(self):
        service.Service.startService(self)
        reactor.addSystemEventTrigger('before','shutdown',self.failedStartup)
        print '>>>start'
    def stopService(self):
        print '>>>stop'
        service.Service.stopService(self)
    def failedStartup(self):
        print 'Oh!!!!!!!!!!!!!!!!!!!!!'
        
class FailService(service.Service):
    def startService(self):
        reactor.stop()

from twisted.application import service
from twisted.internet import reactor
import simpleService
application = service.Application('testServer')
serviceCollection=service.IServiceCollection(application)
ss=simpleService.SimpleService()
ss.setServiceParent(serviceCollection)
fs=simpleService.FailService()
fs.setServiceParent(serviceCollection)

C:\other\Bill\compstrm\compstrm\twbsd>twistd -noy testService.py
2004/05/21 21:39 India Standard Time [-] Log opened.
2004/05/21 21:39 India Standard Time [-] twistd 1.2.0 (C:\Python23\python.exe 2.
3.3) starting up
2004/05/21 21:39 India Standard Time [-] reactor class: twisted.internet.default
.SelectReactor
2004/05/21 21:39 India Standard Time [-] >>>start
2004/05/21 21:39 India Standard Time [-] Oh!!!!!!!!!!!!!!!!!!!!!
2004/05/21 21:39 India Standard Time [-] Main loop terminated.
2004/05/21 21:39 India Standard Time [-] Server Shut Down.
C:\other\Bill\compstrm\compstrm\twbsd>


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040521/f61c4ff4/attachment.html>

From itamar at itamarst.org  Fri May 21 10:18:42 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 21 May 2004 12:18:42 -0400
Subject: [Twisted-Python] service takedown (one newbie to other
	newbies, methinks)
In-Reply-To: <20040521161218.43943.qmail@web8304.mail.in.yahoo.com>
References: <20040521161218.43943.qmail@web8304.mail.in.yahoo.com>
Message-ID: <1085156322.9943.8.camel@sheriffpony>

On Fri, 2004-05-21 at 12:12, Bill la Forge wrote:

> However, if another service fails to successfully initialize, and it
> is kind enough to call reactor.stop() rather than throw an exception,

Obviously you should not do that then.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From exarkun at divmod.com  Fri May 21 10:56:48 2004
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 21 May 2004 12:56:48 -0400
Subject: [Twisted-Python] service takedown (one newbie to other newbies,
	methinks)
In-Reply-To: <20040521161218.43943.qmail@web8304.mail.in.yahoo.com>
References: <20040521161218.43943.qmail@web8304.mail.in.yahoo.com>
Message-ID: <40AE34D0.7090606@divmod.com>

Bill la Forge wrote:
> If a service starts successfully, once initialization completes
> successfully, it's stopService will be called for proper cleanup.
>  
> However, if another service fails to successfully initialize, and it
> is kind enough to call reactor.stop() rather than throw an exception,
> then the first service can, at the end of its initialization, call
> reactor.addSystemEventTrigger('before','shutdown',self.failedStartup),
> then failedStartup() will be called and there is STILL a chance to
> cleanup.
>  

   I think a better solution would be to write an IServiceCollection 
(MultiService subclass, probably) that knows how to deal with exceptions 
raised from child services' startService methods.

   The idea is the same, but the framework gets to handle more of the 
redundant boilerplate (untested):

     class BlahMultiService(MultiService):
         def startService(self):
             self.running = True
             started = []
             for svc in self:
                 try:
                     svc.startService()
                 except:
                     err = Failure()
                     for svc in started[::-1]:
                         try:
                             svc.stopService()
                         except:
                             log.err()
                     self.startupHadError(err)

                 else:
                     started.append(svc)

         def startupHadError(self, failure):
             # Could raise an exception here, or log it, or
             # shut down the reactor, or whatever is appropriate

   Jp



From laforge49 at yahoo.co.in  Fri May 21 18:47:56 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Sat, 22 May 2004 01:47:56 +0100 (BST)
Subject: [Twisted-Python] service takedown (one newbie to other newbies,
	methinks)
In-Reply-To: <40AE34D0.7090606@divmod.com>
Message-ID: <20040522004756.64941.qmail@web8310.mail.in.yahoo.com>

Jp,
 
If I write a generic service, even a MultiService, for use in multiple
applications (as is my intent), then there is still a possibility that
some other service, specific to a particular application, or an unrelated 
generic service, may fail to initialize. So the need to capture the 
shutdown event remins.
 
Bill

Jp Calderone <exarkun at divmod.com> wrote:
I think a better solution would be to write an IServiceCollection 
(MultiService subclass, probably) that knows how to deal with exceptions 
raised from child services' startService methods.


Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040522/78c8ade7/attachment.html>

From glyph at divmod.com  Fri May 21 19:50:31 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Fri, 21 May 2004 21:50:31 -0400
Subject: [Twisted-Python] service takedown (one newbie to other
	newbies, methinks)
In-Reply-To: <20040522004756.64941.qmail@web8310.mail.in.yahoo.com>
References: <20040522004756.64941.qmail@web8310.mail.in.yahoo.com>
Message-ID: <1085190630.3258.106.camel@kazekage>

On Fri, 2004-05-21 at 20:47, Bill la Forge wrote:

> If I write a generic service, even a MultiService, for use in multiple
> applications (as is my intent), then there is still a possibility that
> some other service, specific to a particular application, or an
> unrelated 
> generic service, may fail to initialize. So the need to capture the 
> shutdown event remins.

Bill,

I appreciate your questions on these shutdown issues, since I think we
do still have a few semantic issues to nail down regarding startup and
shutdown.  However, I do think it's worth mentioning that you should
never depend too heavily on shutdown code if you are interested in
reliability: servers do crash, and machines do lose power, so a "clean"
shutdown should always be a convenience and not a necessity.

(A more serious issue that we need to address is making sure that you
can _attempt_ to bring up a new service inside an already running
reactor, fail to bring it up, and not interrupt existing,
already-running services or alter their state in some way; or, that you
can bring it up and bring it down with the same results.)




From laforge49 at yahoo.co.in  Fri May 21 20:07:54 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Sat, 22 May 2004 03:07:54 +0100 (BST)
Subject: [Twisted-Python] service takedown (one newbie to other newbies,
	methinks)
In-Reply-To: <1085190630.3258.106.camel@kazekage>
Message-ID: <20040522020754.8347.qmail@web8302.mail.in.yahoo.com>

Glyph,
 
You hit the nail square on on both points.
 
1. Things happen. In reviewing bsddb, I find that its gennerally 
recommended to run recover as part of the startup process.
This makes clean shutdowns a bit less critical. But still, I'm
thinking it should be attempted.
 
2. Sometimes services need to be shut down without taking down
Twisted. This is especially important if Twisted is also going to
provide an administration interface, as some administration activities
may be easier when the base service is off-line.
 
3. Support of non-critical service failure? A service may sometimes be
critical and othertimes not. Sounds like a configuration issue that
would be nice to standardize at some point. But perhaps the best
solution would be to leave it up to something else, perhaps a service
monitor service, which can decide when its not worth keeping Twisted
running, or perhaps putting it into a "I'm dead except for administration
services" mode.
 
One conclusion here is that perhaps a service should never say die
(er, stop). Its always better to separate a smart service from the smarts
needed to manage that service--a service should rarely be coupled to the
management logic.
 
Bill

Glyph Lefkowitz <glyph at divmod.com> wrote:
On Fri, 2004-05-21 at 20:47, Bill la Forge wrote:

> If I write a generic service, even a MultiService, for use in multiple
> applications (as is my intent), then there is still a possibility that
> some other service, specific to a particular application, or an
> unrelated 
> generic service, may fail to initialize. So the need to capture the 
> shutdown event remins.

Bill,

I appreciate your questions on these shutdown issues, since I think we
do still have a few semantic issues to nail down regarding startup and
shutdown. However, I do think it's worth mentioning that you should
never depend too heavily on shutdown code if you are interested in
reliability: servers do crash, and machines do lose power, so a "clean"
shutdown should always be a convenience and not a necessity.

(A more serious issue that we need to address is making sure that you
can _attempt_ to bring up a new service inside an already running
reactor, fail to bring it up, and not interrupt existing,
already-running services or alter their state in some way; or, that you
can bring it up and bring it down with the same results.)


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

Bill la Forge
http://www.geocities.com/laforge49/
Yahoo! India Matrimony: Find your partner online.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040522/0ab5507d/attachment.html>

From laforge49 at yahoo.co.in  Fri May 21 23:33:36 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Sat, 22 May 2004 06:33:36 +0100 (BST)
Subject: [Twisted-Python] delay 0 patch for 1.3 base.py
Message-ID: <20040522053336.88506.qmail@web8310.mail.in.yahoo.com>

Here's the patch for callLater with delay of 0,
but now for 1.3. (Nice to see the windows installer
is now available!)

Again, I've tested it, but Twisted regression tests
remain to be done.

Again, I consign copyrights to Glyph.

Again, I'll update http://compstrm.sourceforge.net
as soon as I hear word that the regression tests
have succeeded. (I STILL have my fingers crossed!)



=====
Bill la Forge
http://www.geocities.com/laforge49/

________________________________________________________________________
Yahoo! India Matrimony: Find your partner online. http://yahoo.shaadi.com/india-matrimony/
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: delay0patch.txt
URL: </pipermail/twisted-python/attachments/20040522/d6ddd5e1/attachment-0002.txt>

From laforge49 at yahoo.co.in  Sat May 22 02:58:29 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Sat, 22 May 2004 09:58:29 +0100 (BST)
Subject: [Twisted-Python] service takedown (one newbie to other newbies,
	methinks)
In-Reply-To: <40AE34D0.7090606@divmod.com>
Message-ID: <20040522085829.66996.qmail@web8311.mail.in.yahoo.com>

One problem with BlahMultiService is that a service 
may need to defer on the stopService, though it seems
reasonable to expect an immediate return when
canceling
a service when startup has not yet completed.

So I'm adding a method--cancelService--which requires
an immediate return.

Another issue, I'm duplicating the code from 
twisted.application.internet._VolatileDataService,
because of the leading '_'. ;-(

Anyway, here's what I've come up with... --b

# moderately tested, minimally configurable
class TieredService(service.MultiService):
    def __init__(self,stopOnStartFailure=False):
        service.MultiService.__init__(self)
        self.stopOnStartFailure=stopOnStartFailure
    def __getstate__(self):
        d = service.Service.__getstate__(self)
        for attr in self.volatile:
            if d.has_key(attr):
                del d[attr]
        return d
    volitile=['shutdownTrigger','started']
    def startService(self):
        self.started=[]
        for service in self:
            try:
                service.startService()
            except:
                self.cancelService()
                return
            else:
                self.started.append(service)
       
self.shutdownTrigger=reactor.addSystemEventTrigger('before','shutdown',self.cancelService)
        reactor.callWhenRunning(self.nowRunning)
        service.Service.startService(self)
    def nowRunning(self):
       
reactor.removeSystemEventTrigger(self.shutdownTrigger)
        self.shutdownTrigger=None
        self.servicesStarted=None
    def cancelService(self):
        service.Service.stopService(self)
        for svc in self.started[::-1]:
            svc.cancelService()
        if self.stopOnStartFailure:
            reactor.stop()



--- Jp Calderone <exarkun at divmod.com> wrote:
>    I think a better solution would be to write an
> IServiceCollection 
> (MultiService subclass, probably) that knows how to
> deal with exceptions 
> raised from child services' startService methods.
> 
>    The idea is the same, but the framework gets to
> handle more of the 
> redundant boilerplate (untested):
> 
>      class BlahMultiService(MultiService):
>          def startService(self):
>              self.running = True
>              started = []
>              for svc in self:
>                  try:
>                      svc.startService()
>                  except:
>                      err = Failure()
>                      for svc in started[::-1]:
>                          try:
>                              svc.stopService()
>                          except:
>                              log.err()
>                      self.startupHadError(err)
> 
>                  else:
>                      started.append(svc)
> 
>          def startupHadError(self, failure):
>              # Could raise an exception here, or log
> it, or
>              # shut down the reactor, or whatever is
> appropriate
> 
>    Jp


________________________________________________________________________
Yahoo! India Matrimony: Find your partner online. http://yahoo.shaadi.com/india-matrimony/



From laforge49 at yahoo.co.in  Sat May 22 03:15:50 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Sat, 22 May 2004 10:15:50 +0100 (BST)
Subject: [Twisted-Python] service takedown (one newbie to other newbies,
	methinks)
In-Reply-To: <20040522085829.66996.qmail@web8311.mail.in.yahoo.com>
Message-ID: <20040522091550.54246.qmail@web8303.mail.in.yahoo.com>

GrumpBrumpGrumpGrump

2 bug fixes and one repaired omission later...
I MIGHT just have something I can use to implement
bsddb services. ;-)))) --b

from twisted.application import service
from twisted.internet import reactor
from twisted.python import log

class TieredService(service.MultiService):
    def __init__(self,stopOnStartFailure=False):
        service.MultiService.__init__(self)
        self.stopOnStartFailure=stopOnStartFailure
    def __getstate__(self):
        d = service.Service.__getstate__(self)
        for attr in self.volatile:
            if d.has_key(attr):
                del d[attr]
        return d
    volitile=['shutdownTrigger','started']
    def startService(self):
        self.started=[]
        for svc in self:
            try:
                svc.startService()
            except:
                log.err()
                self.cancelService()
                return
            else:
                self.started.append(svc)
        self.shutdownTrigger=reactor \
            .addSystemEventTrigger(
               
'before','shutdown',self.cancelService)
        reactor.callWhenRunning(self.nowRunning)
        service.Service.startService(self)
    def nowRunning(self):
        reactor.removeSystemEventTrigger(
            self.shutdownTrigger)
        self.shutdownTrigger=None
        self.started=None
    def cancelService(self):
        service.Service.stopService(self)
        for svc in self.started[::-1]:
            svc.cancelService()
        if self.stopOnStartFailure:
            reactor.stop()


=====
Bill la Forge
http://www.geocities.com/laforge49/

________________________________________________________________________
Yahoo! India Matrimony: Find your partner online. http://yahoo.shaadi.com/india-matrimony/



From laforge49 at yahoo.co.in  Sat May 22 04:58:04 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Sat, 22 May 2004 11:58:04 +0100 (BST)
Subject: [Twisted-Python] service takedown (one newbie to other newbies,
	methinks)
In-Reply-To: <20040522091550.54246.qmail@web8303.mail.in.yahoo.com>
Message-ID: <20040522105804.68857.qmail@web8303.mail.in.yahoo.com>

OK, I've got a better test environment for Tiered,
and found yet another bug. ;-)

I've also done a bit of refactoring. A terminology
change, actually. When the TieredService is started,
it initializes subordinate services. It only starts 
them when the reactor is actually running.

The idea is that its easy to immediately cancel
a service which is initialized, but not yet actively
being used. And I'm thinking (feedback requested!),
once a service is started, it is fair game to go
ahead and use it. Thus the delay in starting
subordinate services until the need for cancelation
is truely past.

Bill

from twisted.application import service
from twisted.internet import reactor
from twisted.python import log

class SubordinateService(service.Service):
    def __getstate__(self):
        d = service.Service.__getstate__(self)
        for attr in self.volatile:
            if d.has_key(attr):
                del d[attr]
        return d
    volatile=[]
    def initService(self):
        """
        Initialize the service, prior to starting.
        """
    def cancelService(self):
        """
        Immediate cancelation of the subordinate
service
        which has been initialized but not started.
        """

class TieredService(service.MultiService):
    """
    Subordinate services should raise an
    exception when unable to init.
    """
    def __init__(self,stopOnStartFailure=False):
        service.MultiService.__init__(self)
        self.stopOnStartFailure=stopOnStartFailure
    def __getstate__(self):
        d = service.Service.__getstate__(self)
        for attr in self.volatile:
            if d.has_key(attr):
                del d[attr]
        return d
    volatile=['shutdownTrigger','initialized']
    def startService(self):
        self.initialized=[]
        for svc in self:
            try:
                svc.initService()
            except:
                log.err()
                self._cancelService()
                return
            else:
                self.initialized.append(svc)
        self.shutdownTrigger=reactor \
            .addSystemEventTrigger(
                'before',
                'shutdown',
                self._cancelService)
        reactor.callWhenRunning(self._nowRunning)
        service.Service.startService(self)
    def _cancelService(self):
        """
        Immediate cancelation of the
        subordinate service(s).
        """
        service.Service.stopService(self)
        for svc in self.initialized[::-1]:
            svc.cancelService()
        if self.stopOnStartFailure:
            reactor.stop()
    def _nowRunning(self):
        reactor.removeSystemEventTrigger(
            self.shutdownTrigger)
        self.shutdownTrigger=None
        self.initialized=None
        service.MultiService.startService(self)


________________________________________________________________________
Yahoo! India Matrimony: Find your partner online. http://yahoo.shaadi.com/india-matrimony/



From dripton at ripton.net  Sat May 22 16:32:43 2004
From: dripton at ripton.net (David Ripton)
Date: Sat, 22 May 2004 18:32:43 -0400
Subject: [Twisted-Python] pb.Copyable, round trip objects,	and untrusted
	clients
In-Reply-To: <Pine.LNX.4.53.0405210012100.15434@a.shell.peak.org>
References: <40AC2C0F.40300@ripton.net>	<Pine.LNX.4.53.0405200204510.7527@a.shell.peak.org>	<20040521044512.GA28968@vidar.dreamhost.com>
	<Pine.LNX.4.53.0405210012100.15434@a.shell.peak.org>
Message-ID: <40AFD50B.9060704@ripton.net>

Jasper Phillips wrote:
> On Thu, 20 May 2004, David Ripton wrote:
> 
> 
>>On 2004.05.20 02:25:20 +0000, Jasper Phillips wrote:

> I used to write Java code for a living;  I came to hate it's shortcomings
> and IMHO Python is purely superior.  Still, was Titan really 50k lines of
> Java?!  Mind boggling.

We have way too many chrome features, and the code is far from minimal. 
    (There's a lot of duplication between client and server, for 
example.)  A tighter and still reasonably complete implementation could 
be done in 10k LOC in Java.  I think 5k LOC in Python is a reasonable 
target.

> I'm treating event history as game state, although I haven't implemented it
> yet.  Not so much for the AIs use, but to model it's effects on future
> events.  IMHO treating it as game state is also a simpler model.

So future events depend on the exact sequence of events used to reach 
the current state, not just the current state?  That sounds expensive.

>>>IMHO handling this can avoid the 3rd problem you mention.  I have
>>>Players send Actions for a given Turn as the only API to change Game
>>>State.  These actions don't take game object as args, but rather Ids as
>>>you suggest below.
>>
>>I'm now back to wanting to do that in both directions.  Except using
>>strings instead of object IDs, since the parallel objects on the client 
>>and server will be distinct.  (But they will use the same class, which
>>is key to maintainability.  When you find yourself writing ClientGame
>>and ServerGame, scream until the urge passes, then decouple the concept
>>from its context until the need is gone.)
> 
> 
> IMHO this seems overly complex.  I don't like maintaining parallel objects
> or parallel calculation, as it smells like ClientGame/ServerGame...

The problem with the separate ClientGame / ServerGame classes is that 
once you allow the big classes on each side to get coupled to their 
location, the small classes start coupling to those big classes, and 
pretty soon you have two slightly divergent copies of most of the code 
in the game, and double maintenance.

Having separate *objects* of the same classes on the two sides is fine, 
though.  In fact, in a game with hidden information, it's inevitable. 
The server Game object will hold the full state, and each client's Game 
object will hold a subset.  This is true whether the server sends 
censored copies of its state to clients, or whether it sends them 
subsets of the full event stream and lets clients generate their own 
censored copies.

>>I want to make it symmetrical, so I want to build the client-side model
>>objects using the action stream, rather than copying them directly.  It
>>will be painfully boring, but I don't have *that* many actions, and
>>they're fully documented from last time I decided to go this way.
> 
> 
> Why?  I see no advantage to symmetry here.  IMHO the a trusted-server / 
> untrusted-client asymetrical design is clearly called for.

It is a trusted server and untrusted client.  But the trust is expressed 
by which events each can see.  Symmetry just means less code, because 
things work the same both ways.  I don't think it's necessary, but I do 
think it's good if you can get it.

> I disagree that sending objects isn't practical, IMHO it just helps to
> approach it slightly differently.  I'll try to explain what I mean by
> roughly describing my game as an example;  if my design is crappy please feel
> free to shoot holes in it! :-)
> 
> Much of my game's logic is based upon Copyable Actions which are used by
> both Server and Client, e.g. MoveAction.  These have a .__call__(state)
> which modifies the passed state as they see fit, as well as a
> .validate(state) to ensure a move is legal.  Players create a list of such
> Actions, and pass them to the Game server as their turn.  

Standard command pattern, but cleaner in Python because of __call__.

Do your turns have phases, requiring certain actions to occur at certain 
times?

Can other players interrupt your turn with actions, or are their replies 
(e.g. strikebacks to your attacks) completely automated or deferred 
until their turns?

> All the args for
> Action are literals (such as Unit ids and movement direction), with Actions
> knowing how to find the corresponding objects on passed in State.
> 
> With only literal args these Action objects can be passed safely to the
> game, which will reconstitue it's own versions, validate them, then invoke
> them by passing in it's True State.  Players are given their own PlayerState
> view of TrueState each turn, with real (copies of) objects they can use for
> display, UI and validation.

It seems that only sending game state updates once per turn would reduce 
interactivity too much.  I want to see my opponents' (visible) moves as 
they happen, not batched up at the end of his turn.  Beware of 
sequential solitaire.

PlayerState / TrueState sounds like the ClientGame / ServerGame problem 
I was warning about.  It's not necessarily bad if they have the same 
interface and PlayerState just has a subset of the data, but look out 
for duplicate code.

> Basically it works like passing objects both ways, except it's safe.  The
> costs are minor: referenceable objects must have Ids, Clients must create
> Actions with 'object.id' instead of 'object', and Actions need to either
> 'object = state.getObject(objectId)' or use Game/State methods taking ids
> for args.

I agree that passing handles instead of references definitely works 
better.  I find that an unfortunate limitation of current PB, though not 
a major one since (as Christopher Armstrong pointed out) the amount of 
code needed to convert back and forth each time is small.

> IMHO Making all of this essentially part of the API is cleaner than having
> bulk "Reconsitute Objects" methods.

Yes.  Having direct support in PB for the idea of const (copy this 
object when I send it, but ignore any changes that were made to it on 
the other side if I get it back), so that you don't have to do any of 
this, would be even cleaner.  I don't know if there's much demand for 
this feature from other people, though.

Anyway, I'm looking forward to seeing your game at some point.

-- 
David Ripton     dripton at ripton.net



From soso_pub at yahoo.com  Sat May 22 16:46:24 2004
From: soso_pub at yahoo.com (Sorin C.)
Date: Sat, 22 May 2004 15:46:24 -0700 (PDT)
Subject: [Twisted-Python] Need cacheable help
Message-ID: <20040522224624.59301.qmail@web14803.mail.yahoo.com>

Hi all,

I plan to use heavily Cacheables in my client-server
application and I bumped into a problem. 
On the server side I have a Cacheable object which
internally uses a database module and on the client
side an equivalent RemoteCache which uses wxPython.
But in order to obtain a remote reference I have to
call setUnjellyableForClass on this two classes which
in turn requires that when this call is made the
classes have to be imported and the modules that they
use also imported. 
This basically means that now I have to make available
wxPython for server distribution and the database
module for client distribution though I don't use
them.
One solution would be build another layer on top of
these classes and this layer should deal with wxPython
and database module but would it be another possibilty
to overcome this problem? Any sugestion is
appreciated.

Thanks,
Sorin




	
		
__________________________________
Do you Yahoo!?
Yahoo! Domains � Claim yours for only $14.70/year
http://smallbusiness.promotions.yahoo.com/offer 



From jasper at peak.org  Sat May 22 22:36:42 2004
From: jasper at peak.org (Jasper Phillips)
Date: Sat, 22 May 2004 21:36:42 -0700 (PDT)
Subject: [Twisted-Python] pb.Copyable, round trip objects,	and untrusted
	clients
In-Reply-To: <40AFD50B.9060704@ripton.net>
References: <40AC2C0F.40300@ripton.net>
	<Pine.LNX.4.53.0405200204510.7527@a.shell.peak.org>
	<20040521044512.GA28968@vidar.dreamhost.com>
	<Pine.LNX.4.53.0405210012100.15434@a.shell.peak.org>
	<40AFD50B.9060704@ripton.net>
Message-ID: <Pine.LNX.4.53.0405222047320.22984@a.shell.peak.org>


On Sat, 22 May 2004, David Ripton wrote:

> Jasper Phillips wrote:
> 
> > I'm treating event history as game state, although I haven't implemented it
> > yet.  Not so much for the AIs use, but to model it's effects on future
> > events.  IMHO treating it as game state is also a simpler model.
> 
> So future events depend on the exact sequence of events used to reach 
> the current state, not just the current state?  That sounds expensive.

Well, in theory they could, but in practice they can depend upon simpler
things, such as if two nations have ever been at war, how long ago was the
war, and how was it resolved.  I'm considering filtering past events and
Just storing those aspects that events switch on in a condensed format; e.g.
storing time since last war instead of whether there was war for each turn.

However, even this simpler approach is fairly complex, and is a prime target
for the feature axe...


> > IMHO this seems overly complex.  I don't like maintaining parallel objects
> > or parallel calculation, as it smells like ClientGame/ServerGame...

[snip]
> Having separate *objects* of the same classes on the two sides is fine, 
> though.  In fact, in a game with hidden information, it's inevitable. 
> The server Game object will hold the full state, and each client's Game 
> object will hold a subset.  This is true whether the server sends 
> censored copies of its state to clients, or whether it sends them 
> subsets of the full event stream and lets clients generate their own 
> censored copies.

True, so long as they're the same objects.  I still don't like
reconstructing them in parallel.  It seems error prone when combined with
hidden state, and doesn't allow for outcomes based upon hidden state
(although this is not a problem for Titan).


> > I disagree that sending objects isn't practical, IMHO it just helps to
> > approach it slightly differently.  I'll try to explain what I mean by
> > roughly describing my game as an example;  if my design is crappy please
> > feel free to shoot holes in it! :-)
> > 
> > Much of my game's logic is based upon Copyable Actions which are used by
> > both Server and Client, e.g. MoveAction.  These have a .__call__(state)
> > which modifies the passed state as they see fit, as well as a
> > .validate(state) to ensure a move is legal.  Players create a list of such
> > Actions, and pass them to the Game server as their turn.  
> 
> Standard command pattern, but cleaner in Python because of __call__.
> 
> Do your turns have phases, requiring certain actions to occur at certain 
> times?

There is a distinct sequence of events, with certain types of actions being
resolved before others.  This is handled by a TurnTask, who's job it is to
run all the Actions, and resolved conflicts between them.  It embodies the
customary phase order of boardgames.

> Can other players interrupt your turn with actions, or are their replies 
> (e.g. strikebacks to your attacks) completely automated or deferred 
> until their turns?

My game has simultaneous turns, classical Diplomacy style.  There are some
twists that allow reactions, but these are simultaneous as well.

> > With only literal args these Action objects can be passed safely to the
> > game, which will reconstitue it's own versions, validate them, then
> > invoke them by passing in it's True State.  Players are given their own
> > PlayerState view of TrueState each turn, with real (copies of) objects
> > they can use for display, UI and validation.
> 
> It seems that only sending game state updates once per turn would reduce 
> interactivity too much.  I want to see my opponents' (visible) moves as 
> they happen, not batched up at the end of his turn.  Beware of 
> sequential solitaire.

This is just a matter of semantics.  A Turn in my engine can be whatever you
want, for example each of a players moves in Titan could be a "Turn", with
updated state passed to all players after each one.  I prototyped the
Boardgame Binfa, which worked just like this.

> PlayerState / TrueState sounds like the ClientGame / ServerGame problem 
> I was warning about.  It's not necessarily bad if they have the same 
> interface and PlayerState just has a subset of the data, but look out 
> for duplicate code.

PlayerState is just a subset of TrueState, but with methods for determining
just what subset.  Methods that accept one accept the other, most notably
Action.validate().


> > IMHO Making all of this essentially part of the API is cleaner than having
> > bulk "Reconsitute Objects" methods.
> 
> Yes.  Having direct support in PB for the idea of const (copy this 
> object when I send it, but ignore any changes that were made to it on 
> the other side if I get it back), so that you don't have to do any of 
> this, would be even cleaner.  I don't know if there's much demand for 
> this feature from other people, though.

I suspect the mechanism necessary to specify the key field for these "const"
objects and where to find them would be as complex as just having clients
reference them by id, yet perhaps less clear.


> Anyway, I'm looking forward to seeing your game at some point.

I've got most of the core work done along with much of the game mechanics
and GUI, but not much game specific content.  I'll be done some time next
year, hopefully earlier than later.  When I have enough to start contracting
artists I'll start a website and stick it in my .sig, probably sometime in
the next several months.

I'm pondering LGPL'ing the underlying game framework (based on Twisted and
Pyui) at this time as well, although this is a fair amount of hassle and I'm
not sure anyone's interested.

-Jasper




From andrew at ellerton.net  Sun May 23 12:24:37 2004
From: andrew at ellerton.net (Ellers)
Date: Sun, 23 May 2004 20:24:37 +0200
Subject: [Twisted-Python] example stdin handling client that supports
	readline?
Message-ID: <opr8gtfbh3fpwr4c@mail.ellerton.net>

Dear All,
I'd like to write a command-line shell-like interface to an in-house database service we have.

The DB service provides a socket-based API with messages like

	0001-SQL-select * from customer|

(where | is a 0x00 char)

The server responds with messages likt

	0001-SQL-name|age|otherfields||Fred|23|etc

I've got the basics going OK.
And in a separate script I've got a basic shell-like program going, complete with readline support.

It looks a bit like:

	mysh$ select * from customer
	[would send select statement now]
	mysh$

etc

Question: how do I integrate stdin or command-driven input into the client code?

That is, because the server reactor object has control of the process, I don't see how I get read input from stdin?

I notice that there is a class

	twisted.internet.stdio.StandardIO

that provides a file descriptor wrapper around stdin etc.

This looks good, but I'm not sure how to connect this with the cool readline functionality, which seems to block and take care of all handling of stdin?

Is there an example of this sort of script out there?
I'm *sure* this sort of thing has been done 100 times before!

Thanks for any tips :)
Ellers



From daniel at nextwindow.net  Sun May 23 16:23:24 2004
From: daniel at nextwindow.net (Daniel Newton)
Date: Mon, 24 May 2004 10:23:24 +1200
Subject: [Twisted-Python] How do you get clients ip addys with xmlrpc
Message-ID: <40B1245C.6080507@nextwindow.net>

Some gave me this snippet of code:

/class Example(xmlrpc.XMLRPC):
//     """An example object to be published."""//
/
     def xmlrpc_whatIsMyAddress(self):
         return self.transport.getPeer().host
/ 
// if __name__ == '__main__':
//     from twisted.internet import reactor
//     r = Example()
//     reactor.listenTCP(7080, server.Site(r))
//     reactor.run()/

but it doesnt work ("Example instance has no attribute 'transport'")
the transport attribute is not there.. so where is it???






From andrew-twisted at puzzling.org  Sun May 23 16:59:22 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 24 May 2004 08:59:22 +1000
Subject: [Twisted-Python] example stdin handling client that supports
	readline?
In-Reply-To: <opr8gtfbh3fpwr4c@mail.ellerton.net>
References: <opr8gtfbh3fpwr4c@mail.ellerton.net>
Message-ID: <20040523225922.GB1081@frobozz>

On Sun, May 23, 2004 at 08:24:37PM +0200, Ellers wrote:
[...]
> I notice that there is a class
> 
> 	twisted.internet.stdio.StandardIO
> 
> that provides a file descriptor wrapper around stdin etc.
> 
> This looks good, but I'm not sure how to connect this with the cool 
> readline functionality, which seems to block and take care of all handling 
> of stdin?

I'm not aware of anyone using readline with Twisted.  A couple of options
spring to mind:
    - use curses (see doc/examples/cursesclient.py for an example of using
      curses in Twisted) to make your own readline-like functionality
    - run readline in a thread, and get it to call
      reactor.callFromThread(something.gotStdinLine, ...) everytime a user
      hits enter.
    - just write a GUI interface, and forget readline ;)

-Andrew.




From laforge49 at yahoo.co.in  Sun May 23 20:07:52 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Mon, 24 May 2004 03:07:52 +0100 (BST)
Subject: [Twisted-Python] example stdin handling client that supports
	readline?
In-Reply-To: <20040523225922.GB1081@frobozz>
Message-ID: <20040524020752.98980.qmail@web8311.mail.in.yahoo.com>

 --- Andrew Bennetts <andrew-twisted at puzzling.org>
wrote: 
> I'm not aware of anyone using readline with Twisted.

Well, the second example on 
http://compstrm.sourceforge.net/thread.html
comes close, as it uses raw_input.

Bill

=====
Bill la Forge
http://www.geocities.com/laforge49/

________________________________________________________________________
Yahoo! India Matrimony: Find your partner online. http://yahoo.shaadi.com/india-matrimony/



From andrew-twisted at puzzling.org  Sun May 23 20:15:50 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 24 May 2004 12:15:50 +1000
Subject: [Twisted-Python] example stdin handling client that supports
	readline?
In-Reply-To: <20040524020752.98980.qmail@web8311.mail.in.yahoo.com>
References: <20040523225922.GB1081@frobozz>
	<20040524020752.98980.qmail@web8311.mail.in.yahoo.com>
Message-ID: <20040524021550.GD1081@frobozz>

On Mon, May 24, 2004 at 03:07:52AM +0100, Bill la Forge wrote:
>  --- Andrew Bennetts <andrew-twisted at puzzling.org>
> wrote: 
> > I'm not aware of anyone using readline with Twisted.
> 
> Well, the second example on 
> http://compstrm.sourceforge.net/thread.html
> comes close, as it uses raw_input.

Right -- and it does it by running raw_input in a thread, which was one of
my suggestions :)

-Andrew.




From june at digicell.co.kr  Sun May 23 22:03:02 2004
From: june at digicell.co.kr (June Jae-jun Kang)
Date: Mon, 24 May 2004 13:03:02 +0900
Subject: [Twisted-Python] Can I benefit from multi-processor hardware?
Message-ID: <NS1BNaWlql9mji60d4Z0000000a@ns1>

Our current Windows server, written thoroughly in C++, 

is spawning a few threads in order to benefit from multi-processor hardware.

Coz our app logic is not so flexible, now we consider moving to Twisted.

Can we still benefit from multi-processor hardware with Twisted's basic
event-driven architecture?

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040524/b7018a36/attachment.html>

From pje at telecommunity.com  Sun May 23 22:56:38 2004
From: pje at telecommunity.com (Phillip J. Eby)
Date: Mon, 24 May 2004 00:56:38 -0400
Subject: [Twisted-Python] Can I benefit from multi-processor
  hardware?
In-Reply-To: <NS1BNaWlql9mji60d4Z0000000a@ns1>
Message-ID: <5.1.1.6.0.20040524005206.01ebad00@mail.telecommunity.com>

At 01:03 PM 5/24/04 +0900, June Jae-jun Kang wrote:

>Can we still benefit from multi-processor hardware with Twisted s basic 
>event-driven architecture?

Only if you use multiple processes.  The Python interpreter has a global 
lock that's used to protect potentially shared data structures, so this 
inhibits multi-processor execution of pure Python code.  Portions of a 
Python program that are written in C or C++ can be free-threaded, but if 
you are doing code that's pure Python, you'll need multiple processes.

So, to take advantage of multi-processor hardware, you can do your 
calculation-intensive work in separate processes, with the network 
communications being handled by an event-driven front end.  Note that this 
is basically true for *any* Python program, not just Twisted.




From andrew-twisted at puzzling.org  Sun May 23 23:14:59 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 24 May 2004 15:14:59 +1000
Subject: [Twisted-Python] Can I benefit from multi-processor hardware?
In-Reply-To: <5.1.1.6.0.20040524005206.01ebad00@mail.telecommunity.com>
References: <NS1BNaWlql9mji60d4Z0000000a@ns1>
	<5.1.1.6.0.20040524005206.01ebad00@mail.telecommunity.com>
Message-ID: <20040524051459.GG1081@frobozz>

On Mon, May 24, 2004 at 12:56:38AM -0400, Phillip J. Eby wrote:
[...]
> 
> So, to take advantage of multi-processor hardware, you can do your 
> calculation-intensive work in separate processes, with the network 
> communications being handled by an event-driven front end.  Note that this 
> is basically true for *any* Python program, not just Twisted.

Or, potentially, inside free-threaded C or C++ extensions... it depends on
the situation.

I wrote a Twisted server on Windows that replaced a C++ one quite
comfortably, partly due to much of the work being talking to an SQL
database, which you can do in threads easily (see the twisted.enterprise
package), while handling the networking with Twisted.

-Andrew.




From mwh at python.net  Mon May 24 04:51:44 2004
From: mwh at python.net (Michael Hudson)
Date: Mon, 24 May 2004 11:51:44 +0100
Subject: [Twisted-Python] Re: example stdin handling client that supports
	readline?
References: <opr8gtfbh3fpwr4c@mail.ellerton.net>
	<20040523225922.GB1081@frobozz>
Message-ID: <2m1xlat7wf.fsf@starship.python.net>

Andrew Bennetts <andrew-twisted at puzzling.org> writes:

> On Sun, May 23, 2004 at 08:24:37PM +0200, Ellers wrote:
> [...]
>> I notice that there is a class
>> 
>> 	twisted.internet.stdio.StandardIO
>> 
>> that provides a file descriptor wrapper around stdin etc.
>> 
>> This looks good, but I'm not sure how to connect this with the cool 
>> readline functionality, which seems to block and take care of all handling 
>> of stdin?
>
> I'm not aware of anyone using readline with Twisted.  A couple of options
> spring to mind:
>     - use curses (see doc/examples/cursesclient.py for an example of using
>       curses in Twisted) to make your own readline-like functionality
>     - run readline in a thread, and get it to call
>       reactor.callFromThread(something.gotStdinLine, ...) everytime a user
>       hits enter.
>     - just write a GUI interface, and forget readline ;)

4) check out pyrepl from CVS and help me debug the currently rather
   hackish twisted support :-)

http://codespeak.net/pyrepl

Cheers,
mwh

-- 
  I'm not particularly fond of singing GSTQ because she stands for
  some things I don't, but it's not really worth letting politics
  getting in the way of a good bawling.     -- Dan Sheppard, ucam.chat




From radix at twistedmatrix.com  Mon May 24 05:06:22 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 24 May 2004 07:06:22 -0400
Subject: [Twisted-Python] Re: example stdin handling client that supports
	readline?
In-Reply-To: <2m1xlat7wf.fsf@starship.python.net>
References: <opr8gtfbh3fpwr4c@mail.ellerton.net>	<20040523225922.GB1081@frobozz>
	<2m1xlat7wf.fsf@starship.python.net>
Message-ID: <40B1D72E.1080901@twistedmatrix.com>

Michael Hudson wrote:
> Andrew Bennetts <andrew-twisted at puzzling.org> writes:

>>I'm not aware of anyone using readline with Twisted.  A couple of options
>>spring to mind:
>>    - use curses (see doc/examples/cursesclient.py for an example of using
>>      curses in Twisted) to make your own readline-like functionality
>>    - run readline in a thread, and get it to call
>>      reactor.callFromThread(something.gotStdinLine, ...) everytime a user
>>      hits enter.
>>    - just write a GUI interface, and forget readline ;)
> 
> 
> 4) check out pyrepl from CVS and help me debug the currently rather
>    hackish twisted support :-)
> 
> http://codespeak.net/pyrepl


Heeey, pyrepl is really cool... :-)

radix at radii ~/Projects/pyrepl/pyrepl% python python_reader.py

->> import sys; print sys.modules['twisted.internet.reactor']
<twisted.internet.default.SelectReactor instance at 0x40352e0c>
# woot, twisted's already being used :-)
->> from twisted.internet import reactor
->> from twisted.python.util import println
->> reactor.callLater(1, println, "\nhi!")
<twisted.internet.base.DelayedCall instance at 0x40522aac>
->>
     hi!

-- output there seems to do some weird stuff with whitespace, but 
anyway, this is pretty cool :-)



-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040524/31efa170/attachment.sig>

From mwh at python.net  Mon May 24 06:13:32 2004
From: mwh at python.net (Michael Hudson)
Date: Mon, 24 May 2004 13:13:32 +0100
Subject: [Twisted-Python] Re: example stdin handling client that supports
	readline?
References: <opr8gtfbh3fpwr4c@mail.ellerton.net>
	<20040523225922.GB1081@frobozz>
	<2m1xlat7wf.fsf@starship.python.net>
	<40B1D72E.1080901@twistedmatrix.com>
Message-ID: <2mu0y6rpjn.fsf@starship.python.net>

Christopher Armstrong <radix at twistedmatrix.com> writes:

> Michael Hudson wrote:
>> Andrew Bennetts <andrew-twisted at puzzling.org> writes:
>
>>>I'm not aware of anyone using readline with Twisted.  A couple of options
>>>spring to mind:
>>>    - use curses (see doc/examples/cursesclient.py for an example of using
>>>      curses in Twisted) to make your own readline-like functionality
>>>    - run readline in a thread, and get it to call
>>>      reactor.callFromThread(something.gotStdinLine, ...) everytime a user
>>>      hits enter.
>>>    - just write a GUI interface, and forget readline ;)
>> 4) check out pyrepl from CVS and help me debug the currently rather
>>    hackish twisted support :-)
>> http://codespeak.net/pyrepl
>
>
> Heeey, pyrepl is really cool... :-)

Thanks :-)

It's also scary.  I was just saying on IRC:

<mwh> there are bits of code in pyrepl that make me go
<mwh> "i wrote this code?  wow.  i wonder how it works?"

This is mostly the low-level terminal manipulation stuff.

> radix at radii ~/Projects/pyrepl/pyrepl% python python_reader.py
>
> ->> import sys; print sys.modules['twisted.internet.reactor']
> <twisted.internet.default.SelectReactor instance at 0x40352e0c>
> # woot, twisted's already being used :-)
> ->> from twisted.internet import reactor
> ->> from twisted.python.util import println
> ->> reactor.callLater(1, println, "\nhi!")
> <twisted.internet.base.DelayedCall instance at 0x40522aac>
> ->>
>      hi!
>
> -- output there seems to do some weird stuff with whitespace, but
>    anyway, this is pretty cool :-)

Well, yeah, you're writing to the terminal when it's in raw mode.
pyrepl gets upset (cosmetically) when you do that.  Tracebacks are
really, really ugly...

Cheers,
mwh

-- 
  I hate leaving Windows95 boxes publically accessible, so shifting
  even to NT is a blessing in some ways.  At least I can reboot them
  remotely in a sane manner, rather than having to send them malformed
  packets.      -- http://bofhcam.org/journal/journal.html, 20/06/2000




From pp64 at codelock.com  Mon May 24 09:03:30 2004
From: pp64 at codelock.com (Pavel Pergamenshchik)
Date: Mon, 24 May 2004 11:03:30 -0400
Subject: [Twisted-Python] Can I benefit from multi-processor hardware?
In-Reply-To: <NS1BNaWlql9mji60d4Z0000000a@ns1>
References: <NS1BNaWlql9mji60d4Z0000000a@ns1>
Message-ID: <20040524110330.2252f95c@dunce>

On Mon, 24 May 2004 13:03:02 +0900
"June Jae-jun Kang" <june at digicell.co.kr> wrote:

> Our current Windows server, written thoroughly in C++, 
> 
> is spawning a few threads in order to benefit from multi-processor hardware.
> 
> Coz our app logic is not so flexible, now we consider moving to Twisted.
> 
> Can we still benefit from multi-processor hardware with Twisted's basic
> event-driven architecture?

Well, iocpreactor, which uses IO completion ports, could be extended to use a threadpool (running C code exclusively) to handle IO events. I am not sure whether that will give a performance gain, though, because the main thread might still be a bottleneck.
In any case, give iocpreactor a try. It is currently the only way for Twisted to scale up on Windows. It's a bit immature, so if you see anything weird, yell at me.



From itamar at itamarst.org  Mon May 24 09:05:15 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 24 May 2004 11:05:15 -0400
Subject: [Twisted-Python] *bsd buildbots, thanks to win32 buildbot people
Message-ID: <1085411115.9944.49.camel@sheriffpony>

Who runs these? and could you please install subversion?

Many thanks to "bear" and Cory for getting win32 buildbot going, and to
Pavel and Cory for fixing Win32 tests.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From E.A.M.Huijbers at student.tue.nl  Mon May 24 09:10:09 2004
From: E.A.M.Huijbers at student.tue.nl (E.A.M. Huijbers)
Date: Mon, 24 May 2004 17:10:09 +0200
Subject: [Twisted-Python] Writing a Jabber client
Message-ID: <40B21051.2050703@student.tue.nl>

Hi all,

I'm having trouble writing a Jabber client with Twisted. I came across a 
simple sample[0], and tried to build out from it, but for some reason 
it's barely working.

When I run the application in the attached script, the logon goes fine, 
and I can receive messages sent to the account, but it never seems to 
receive subscription requests. When I ran it on an account that already 
had some items on the contact list, I did receive <presence> messages to 
indcate that a user changed status, but I don't receive <presence 
type="subscribe"> messages...

Ultimately, I tacked a "/*" handler on to the code to see if I was 
receiving any packets at all, but the only thing that seems to trigger 
anything are messages.

This is very frustrating for me. Is it a problem with the code, or am I 
missing something in the Jabber protocol?

Any help would be greatly appreciated.

- Rico

P.S: Please don't mind the code, I know it's a bit (a lot) hackish right 
now, but my first step is to get it running. I'll make it beautiful 
afterwards ;) .

[0] http://randomthoughts.vandorp.ca/WK/blog/706?t=item

##### code starts here #####

from twisted.protocols.jabber import client, jid
from twisted.protocols import xmlstream
from twisted.xish import domish

from twisted.internet import reactor

name = 'Foo'
server='bar.com'
resource = 'PythonBot'
password = 'foobar'
me = '%s@%s/%s' % (name, server, resource)

thexmlstream = None
tryandregister = 1

def initOnline(xmlstream):
    global factory
    print 'Initializing...'
    xmlstream.addObserver('/message', gotMessage)
    xmlstream.addObserver('/presence', gotPresence)
    xmlstream.addObserver('/iq', gotIq)
    xmlstream.addObserver('/*', gotSomething)

def authd(xmlstream):
    thexmlstream = xmlstream
    print "we've authd!"
    print repr(xmlstream)

    #need to send presence so clients know we're
    #actually online
    presence = domish.Element(('jabber:client', 'presence'))
    presence.addElement('status').addContent('Online')
    xmlstream.send(presence)

    initOnline(xmlstream)

def gotMessage(el):
    print 'Got message: %s' % str(el.attributes)

def gotSomething(el):
    print 'Got something: %s -> %s' % (el.name, str(el.attributes))

def gotIq(el):
    print 'Got IQ: %s' % str(el.attributes)

def gotPresence(el):
    print 'We got a presence message!'
    print repr(el.attributes)
    try:
        t = el.attributes['type']
        if t == 'subscribe':
            # Grant every subscription request
            xmlstream.send(domish.Element(('jabber:client', 'presence'), 
attribs={
                'from': me,
                'to':el.attributes['from'],
                'type':'subscribed'
            }))
    except KeyError:
        # Big fat ignore
        pass

def invaliduserEvent(xmlstream):
    print 'Invalid user!'
    global tryandregister
    if tryandregister:
        tryandregister = 0
        print 'Attempting to register...'
        global factory
        factory.authenticator.registerAccount(name, password)
    else:
        global reactor
        reactor.stop()

def authfailedEvent(xmlstream):
    global reactor
    print 'Auth failed!'
    reactor.stop()

def registerfailedEvent(xmlstream):
    global reactor
    print 'Register failed!'
    reactor.stop()

myJid = jid.JID(me)
secret = password
factory = client.basicClientFactory(myJid,secret)

# Register authentication callbacks
factory.addBootstrap(xmlstream.STREAM_AUTHD_EVENT, authd)
factory.addBootstrap(client.BasicAuthenticator.INVALID_USER_EVENT, 
invaliduserEvent)
factory.addBootstrap(client.BasicAuthenticator.AUTH_FAILED_EVENT, 
authfailedEvent)
factory.addBootstrap(client.BasicAuthenticator.REGISTER_FAILED_EVENT, 
registerfailedEvent)

# Go!
reactor.connectTCP(server, 5222, factory)
reactor.run()



From andrew-twisted at puzzling.org  Mon May 24 09:41:12 2004
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 25 May 2004 01:41:12 +1000
Subject: [Twisted-Python] *bsd buildbots, thanks to win32 buildbot people
In-Reply-To: <1085411115.9944.49.camel@sheriffpony>
References: <1085411115.9944.49.camel@sheriffpony>
Message-ID: <20040524154112.GL1081@frobozz>

On Mon, May 24, 2004 at 11:05:15AM -0400, Itamar Shtull-Trauring wrote:
[...]
> 
> Many thanks to "bear" and Cory for getting win32 buildbot going, and to
> Pavel and Cory for fixing Win32 tests.

Yes, thanks!  Seeing the win32 tests all passing in the buildbot was a nice
surprise -- it's good to see people are looking after various platforms.
Kudos to the win32 guys.

-Andrew.




From kevin at praxsys.com  Mon May 24 11:14:37 2004
From: kevin at praxsys.com (Kevin Koym)
Date: Mon, 24 May 2004 12:14:37 -0500
Subject: [Twisted-Python] twisted enterprise versus other OR tools
In-Reply-To: <20040524154112.GL1081@frobozz>
References: <1085411115.9944.49.camel@sheriffpony>
	<20040524154112.GL1081@frobozz>
Message-ID: <40B22D7D.3010704@praxsys.com>

I have been recently looking at Twisted Enterprise.  I am wondering-

Is there any other object /relational persistence mechanisms that are 
closer to
- php's propel http://propel.phpdb.org/
- apache's torque

I like the idea of having a lighter weight system, which it seems that 
twisted's enterprise provides, but I miss not having some of the 
modeling capabilities of these other tools vis a vis twisted 
enterprise.  I am wondering what is planned for its future, or perhaps, 
given my newness to python, perhaps I am looking at the wrong tool for 
object persistance into relational databases?  Are there others that are 
used on a higher end for lots more classes?  Given that the Java world 
has so many of these tools for object - relational mapping (versus 
pulling rows out of tables separate of business objects), I expect that 
there is another in the python world that I have missed (whether it is 
twisted.enterprise or otherwise).

Any thoughts appreciated.

Thanks,
Kevin

PS my bias is towards Apple's (formerly NeXT's) enterprise objects.  If 
you have a suggestion that hits close to it, please let me know.


-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3170 bytes
Desc: S/MIME Cryptographic Signature
URL: </pipermail/twisted-python/attachments/20040524/bd4bb5c4/attachment-0002.bin>

From developer at csrules.dyndns.org  Mon May 24 17:07:06 2004
From: developer at csrules.dyndns.org (darryl)
Date: Mon, 24 May 2004 16:07:06 -0700
Subject: [Twisted-Python] Writing a Jabber client
In-Reply-To: <40B21051.2050703@student.tue.nl>
References: <40B21051.2050703@student.tue.nl>
Message-ID: <40B2801A.9060707@csrules.dyndns.org>

E.A.M. Huijbers wrote:

> Hi all,
>
> I'm having trouble writing a Jabber client with Twisted. I came across 
> a simple sample[0], and tried to build out from it, but for some 
> reason it's barely working.
>
> When I run the application in the attached script, the logon goes 
> fine, and I can receive messages sent to the account, but it never 
> seems to receive subscription requests. When I ran it on an account 
> that already had some items on the contact list, I did receive 
> <presence> messages to indcate that a user changed status, but I don't 
> receive <presence type="subscribe"> messages...



That sample code is mine. I never played with subscriptions really but 
after trying it out right now it appears that it's not working :(

I don't know why yet, but i'll try and figure it out. We definately can 
receive normal presence messages but don't seem to see subscription 
requests....

Doesn't make sense at first blush.

-darryl

-- 
http://randomthoughts.vandorp.ca/WK/blog




From developer at csrules.dyndns.org  Mon May 24 17:56:22 2004
From: developer at csrules.dyndns.org (darryl)
Date: Mon, 24 May 2004 16:56:22 -0700
Subject: [Twisted-Python] Writing a Jabber client
In-Reply-To: <40B2801A.9060707@csrules.dyndns.org>
References: <40B21051.2050703@student.tue.nl>
	<40B2801A.9060707@csrules.dyndns.org>
Message-ID: <40B28BA6.5050908@csrules.dyndns.org>

darryl wrote:

> E.A.M. Huijbers wrote:
>
>> Hi all,
>>
>> I'm having trouble writing a Jabber client with Twisted. I came 
>> across a simple sample[0], and tried to build out from it, but for 
>> some reason it's barely working.
>>
>> When I run the application in the attached script, the logon goes 
>> fine, and I can receive messages sent to the account, but it never 
>> seems to receive subscription requests. When I ran it on an account 
>> that already had some items on the contact list, I did receive 
>> <presence> messages to indcate that a user changed status, but I 
>> don't receive <presence type="subscribe"> messages...
>
>
>
>
> That sample code is mine. I never played with subscriptions really but 
> after trying it out right now it appears that it's not working :(
>
> I don't know why yet, but i'll try and figure it out. We definately 
> can receive normal presence messages but don't seem to see 
> subscription requests....
>
> Doesn't make sense at first blush.
>
> -darryl
>
When in doubt read the protocol docs i guess:


7.3 Retrieving One's Roster on Login

   Upon connecting to the server and sending available presence, a
   client SHOULD request the roster before sending initial presence
   (however, because receiving the roster may not be desirable for all
   resources, e.g., a connection with limited bandwidth, the client's
   request for the roster is OPTIONAL).  If an available resource does
   not request the roster during a session, the server MUST NOT send it
   presence subscriptions and associated roster updates.  If an
   unavailable resource requests the roster, the server SHOULD return an
   <unexpected-request/> error to the resource.

Source:http://www.jabber.org/ietf/draft-ietf-xmpp-im-22.txt

So from reading this it appears unless you request a roster push when 
you login you will not recieve subscription requests.

-- 
http://randomthoughts.vandorp.ca/WK/blog




From E.A.M.Huijbers at student.tue.nl  Mon May 24 17:04:40 2004
From: E.A.M.Huijbers at student.tue.nl (E.A.M. Huijbers)
Date: Tue, 25 May 2004 01:04:40 +0200
Subject: [Twisted-Python] Writing a Jabber client
In-Reply-To: <40B28BA6.5050908@csrules.dyndns.org>
References: <40B21051.2050703@student.tue.nl>	<40B2801A.9060707@csrules.dyndns.org>
	<40B28BA6.5050908@csrules.dyndns.org>
Message-ID: <40B27F88.4080801@student.tue.nl>

darryl wrote:

> darryl wrote:
>
>> E.A.M. Huijbers wrote:
>>
>>> Hi all,
>>>
>>> I'm having trouble writing a Jabber client with Twisted. I came 
>>> across a simple sample[0], and tried to build out from it, but for 
>>> some reason it's barely working.
>>>
>>> When I run the application in the attached script, the logon goes 
>>> fine, and I can receive messages sent to the account, but it never 
>>> seems to receive subscription requests. When I ran it on an account 
>>> that already had some items on the contact list, I did receive 
>>> <presence> messages to indcate that a user changed status, but I 
>>> don't receive <presence type="subscribe"> messages...
>>
>>
>>
>>
>>
>> That sample code is mine. I never played with subscriptions really 
>> but after trying it out right now it appears that it's not working :(
>>
>> I don't know why yet, but i'll try and figure it out. We definately 
>> can receive normal presence messages but don't seem to see 
>> subscription requests....
>>
>> Doesn't make sense at first blush.
>>
>> -darryl
>>
> When in doubt read the protocol docs i guess:
>
>
> 7.3 Retrieving One's Roster on Login
>
>   Upon connecting to the server and sending available presence, a
>   client SHOULD request the roster before sending initial presence
>   (however, because receiving the roster may not be desirable for all
>   resources, e.g., a connection with limited bandwidth, the client's
>   request for the roster is OPTIONAL).  If an available resource does
>   not request the roster during a session, the server MUST NOT send it
>   presence subscriptions and associated roster updates.  If an
>   unavailable resource requests the roster, the server SHOULD return an
>   <unexpected-request/> error to the resource.
>
> Source:http://www.jabber.org/ietf/draft-ietf-xmpp-im-22.txt
>
> So from reading this it appears unless you request a roster push when 
> you login you will not recieve subscription requests.

That seems doesn't seem quite logical -- since I'm writing a bot, I 
don't want to see the roster myself, but I do want to grant subscription 
requests.
But it does explain why things are happening the way they are -- thanks!

Regards,
Rico




From dave at krondo.com  Mon May 24 21:14:24 2004
From: dave at krondo.com (Dave Peticolas)
Date: Mon, 24 May 2004 20:14:24 -0700
Subject: [Twisted-Python] twisted enterprise versus other OR tools
In-Reply-To: <40B22D7D.3010704@praxsys.com>
References: <1085411115.9944.49.camel@sheriffpony>
	<20040524154112.GL1081@frobozz>  <40B22D7D.3010704@praxsys.com>
Message-ID: <1085454864.1388.97.camel@oneiros>

On Mon, 2004-05-24 at 10:14, Kevin Koym wrote:
> I have been recently looking at Twisted Enterprise.  I am wondering-
> 
> Is there any other object /relational persistence mechanisms that are 
> closer to
> - php's propel http://propel.phpdb.org/
> - apache's torque
> 
> I like the idea of having a lighter weight system, which it seems that 
> twisted's enterprise provides, but I miss not having some of the 
> modeling capabilities of these other tools vis a vis twisted 
> enterprise.  I am wondering what is planned for its future, or perhaps, 
> given my newness to python, perhaps I am looking at the wrong tool for 
> object persistance into relational databases?  Are there others that are 
> used on a higher end for lots more classes?  Given that the Java world 
> has so many of these tools for object - relational mapping (versus 
> pulling rows out of tables separate of business objects), I expect that 
> there is another in the python world that I have missed (whether it is 
> twisted.enterprise or otherwise).
> 
> Any thoughts appreciated.
> 
> Thanks,
> Kevin
> 
> PS my bias is towards Apple's (formerly NeXT's) enterprise objects.  If 
> you have a suggestion that hits close to it, please let me know.

There are no current plans for expanding twisted.enterprise
(I am the current maintainer), but that doesn't mean the
possibility is closed off. However, have you looked at PEAK?
While not yet stable, it does seem to be aiming to support a
fuller relational-object mapping.

dave





From alex-news at comcast.net  Tue May 25 00:19:13 2004
From: alex-news at comcast.net (Alexander May)
Date: Tue, 25 May 2004 02:19:13 -0400
Subject: [Twisted-Python] Nevow and twisted.enterprise and deferreds
Message-ID: <E1BSVHb-0006ZA-00@pyramid.twistedmatrix.com>

I am using nevow and twisted enterprise and have a situation like this:

dbPool = adbapi.ConnectionPool('myDB')
...
class MyPage(rend.Page):
    ...
    def data_mydata(self, context, data):
        return dbPool.runQuery("select * from table")

    def render_myrender(self, context, data):
        ...

Happily, and a bit unexpectedly, it worked and the page rendered correctly.

My issue is if the sql statement fails for some reason the page rendering
just hangs.  Is there an endorsed way to capture the error and render some
html from it?  Right now I'd be happy to see the call stack, as I often do
when an exception occurs.

I traced through the call stack and found this in renderer.py

def _error(failure):
    # FIXME: this should *definitely* do something better
    # doing this leaves the connection hanging, but it's better
    # than nothing.
    print "FAILURE !",failure 

It looks like the errback is just set to _error.  I don't know if there is a
way to work around this.  I attempted a few things with my own errbacks to
no avail.  I'm sure much of this is due to my less than perfect
understanding of deferreds, and my current bleary eyed state.

I could have sworn that I read something about defereds and nevow, but I
can't seem to find it anymore.

Any help is appreciated.

Thanks,
Alex

PS: I'm using nevow 0.1 and twisted 1.2.










From andrew at ellerton.net  Tue May 25 00:26:43 2004
From: andrew at ellerton.net (Ellers)
Date: Tue, 25 May 2004 08:26:43 +0200
Subject: [Twisted-Python] Re: example stdin handling client that supports
	readline?
In-Reply-To: <2mu0y6rpjn.fsf@starship.python.net>
References: <opr8gtfbh3fpwr4c@mail.ellerton.net>
	<20040523225922.GB1081@frobozz>
	<2m1xlat7wf.fsf@starship.python.net>
	<40B1D72E.1080901@twistedmatrix.com>
	<2mu0y6rpjn.fsf@starship.python.net>
Message-ID: <opr8jlitnqfpwr4c@mail.ellerton.net>

On Mon, 24 May 2004 13:13:32 +0100, Michael Hudson <mwh at python.net> wrote:

> Christopher Armstrong <radix at twistedmatrix.com> writes:
>
>> Michael Hudson wrote:
>>> Andrew Bennetts <andrew-twisted at puzzling.org> writes:
>>
>>>> <snip>
>>
>> -- output there seems to do some weird stuff with whitespace, but
>>    anyway, this is pretty cool :-)
>
> Well, yeah, you're writing to the terminal when it's in raw mode.
> pyrepl gets upset (cosmetically) when you do that.  Tracebacks are
> really, really ugly...
>

Thanks to all for their replies!
I've got some great options to try now.
It also confirmed that the readline library is usually (always?) invoked in a blocking way, and that a char-by-char alternative approach is needed and even mostly done!
I figured that shells like bash somehow use readline while allowing input to flow in from other sources (eg pipes in the background etc), and without looking at the bash source I figured it would be doing this with select, not multiple threads.
Many thanks everyone, I really appreciated all your comments!
Ellers



From radix at twistedmatrix.com  Tue May 25 03:26:49 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 25 May 2004 05:26:49 -0400
Subject: [Twisted-Python] Nevow and twisted.enterprise and deferreds
In-Reply-To: <E1BSVHb-0006ZA-00@pyramid.twistedmatrix.com>
References: <E1BSVHb-0006ZA-00@pyramid.twistedmatrix.com>
Message-ID: <40B31159.8080609@twistedmatrix.com>

Alexander May wrote:
> I am using nevow and twisted enterprise and have a situation like this:
> 
> dbPool = adbapi.ConnectionPool('myDB')
> ...
> class MyPage(rend.Page):
>     ...
>     def data_mydata(self, context, data):
>         return dbPool.runQuery("select * from table")


Add an errback to this Deferred that you're returning. 
d.addErrback(self._cbQueryError), and make that method return nevow data 
that can be rendered.

>     def render_myrender(self, context, data):
>         ...
> 
> Happily, and a bit unexpectedly, it worked and the page rendered correctly.
> 
> My issue is if the sql statement fails for some reason the page rendering
> just hangs.  Is there an endorsed way to capture the error and render some
> html from it?  Right now I'd be happy to see the call stack, as I often do
> when an exception occurs.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040525/7fa81bf3/attachment.sig>

From bertrand.croq at freeskop.com  Tue May 25 06:44:57 2004
From: bertrand.croq at freeskop.com (Bertrand Croq)
Date: Tue, 25 May 2004 14:44:57 +0200
Subject: [Twisted-Python] Two fixes
Message-ID: <20040525124457.GA15598@groumph.croq.org>

Hi,
 I am currently using Twisted to write a web site, and I wanted the site
to be able to download updates from its subversion repository. Doing
this, I found a bug: HTTPFactory.log does not check for a logFile
attribute before using it

 Here is a patch that fixes the problem

Index: protocols/http.py
===================================================================
--- protocols/http.py   (revision 10776)
+++ protocols/http.py   (working copy)
@@ -1120,13 +1120,14 @@

     def log(self, request):
         """Log a request's result to the logfile, by default in combined log format."""
-        line = '%s - - %s "%s" %d %s "%s" "%s"\n' % (
-            request.getClientIP(),
-            # request.getUser() or "-", # the remote user is almost never important
-            _logDateTime,
-            '%s %s %s' % (request.method, request.uri, request.clientproto),
-            request.code,
-            request.sentLength or "-",
-            request.getHeader("referer") or "-",
-            request.getHeader("user-agent") or "-")
-        self.logFile.write(line)
+       if hasattr(self, "logFile"):
+            line = '%s - - %s "%s" %d %s "%s" "%s"\n' % (
+                request.getClientIP(),
+                # request.getUser() or "-", # the remote user is almost never important
+                _logDateTime,
+                '%s %s %s' % (request.method, request.uri, request.clientproto),
+                request.code,
+                request.sentLength or "-",
+                request.getHeader("referer") or "-",
+                request.getHeader("user-agent") or "-")
+            self.logFile.write(line)


-- 
Bertrand Croq
FreesKop - Avenue Robert Schuman - 35170 BRUZ - France
http://www.freeskop.com/



From itamar at itamarst.org  Tue May 25 07:32:03 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 25 May 2004 09:32:03 -0400
Subject: [Twisted-Python] Two fixes
In-Reply-To: <20040525124457.GA15598@groumph.croq.org>
References: <20040525124457.GA15598@groumph.croq.org>
Message-ID: <1085491922.9946.208.camel@sheriffpony>

Please add this to http://twistedmatrix.com/bugs/ and assign to jknight.




From alex-news at comcast.net  Tue May 25 07:49:58 2004
From: alex-news at comcast.net (Alexander May)
Date: Tue, 25 May 2004 09:49:58 -0400
Subject: [Twisted-Python] Nevow and twisted.enterprise and deferreds
In-Reply-To: <40B31159.8080609@twistedmatrix.com>
Message-ID: <E1BScJo-0001hd-00@pyramid.twistedmatrix.com>

I could have sworn that I tried that last night, but I guess I didn't since
it works.  Thanks.

Is there a way to have a different render method called in the error case?
If not, I can always conditionally branch in the render method.

Alex



-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Christopher
Armstrong
Sent: Tuesday, May 25, 2004 5:27 AM
To: Twisted discussion stuff
Subject: Re: [Twisted-Python] Nevow and twisted.enterprise and deferreds

Alexander May wrote:
> I am using nevow and twisted enterprise and have a situation like this:
> 
> dbPool = adbapi.ConnectionPool('myDB') ...
> class MyPage(rend.Page):
>     ...
>     def data_mydata(self, context, data):
>         return dbPool.runQuery("select * from table")


Add an errback to this Deferred that you're returning. 
d.addErrback(self._cbQueryError), and make that method return nevow data
that can be rendered.

>     def render_myrender(self, context, data):
>         ...
> 
> Happily, and a bit unexpectedly, it worked and the page rendered
correctly.
> 
> My issue is if the sql statement fails for some reason the page 
> rendering just hangs.  Is there an endorsed way to capture the error 
> and render some html from it?  Right now I'd be happy to see the call 
> stack, as I often do when an exception occurs.

--
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/




From alex-news at comcast.net  Tue May 25 08:22:09 2004
From: alex-news at comcast.net (Alexander May)
Date: Tue, 25 May 2004 10:22:09 -0400
Subject: [Twisted-Python] Nevow and twisted.enterprise and deferreds
In-Reply-To: <E1BScJo-0001hd-00@pyramid.twistedmatrix.com>
Message-ID: <E1BScox-0002dL-00@pyramid.twistedmatrix.com>

PS: And is there an easy way to nicely render the exception call stack as is
common through much of twisted?

Thanks again,
Alex

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Alexander May
Sent: Tuesday, May 25, 2004 9:50 AM
To: 'Twisted discussion stuff'
Subject: RE: [Twisted-Python] Nevow and twisted.enterprise and deferreds

I could have sworn that I tried that last night, but I guess I didn't since
it works.  Thanks.

Is there a way to have a different render method called in the error case?
If not, I can always conditionally branch in the render method.

Alex



-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Christopher
Armstrong
Sent: Tuesday, May 25, 2004 5:27 AM
To: Twisted discussion stuff
Subject: Re: [Twisted-Python] Nevow and twisted.enterprise and deferreds

Alexander May wrote:
> I am using nevow and twisted enterprise and have a situation like this:
> 
> dbPool = adbapi.ConnectionPool('myDB') ...
> class MyPage(rend.Page):
>     ...
>     def data_mydata(self, context, data):
>         return dbPool.runQuery("select * from table")


Add an errback to this Deferred that you're returning. 
d.addErrback(self._cbQueryError), and make that method return nevow data
that can be rendered.

>     def render_myrender(self, context, data):
>         ...
> 
> Happily, and a bit unexpectedly, it worked and the page rendered
correctly.
> 
> My issue is if the sql statement fails for some reason the page 
> rendering just hangs.  Is there an endorsed way to capture the error 
> and render some html from it?  Right now I'd be happy to see the call 
> stack, as I often do when an exception occurs.

--
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From dp at ulaluma.com  Tue May 25 09:12:04 2004
From: dp at ulaluma.com (Donovan Preston)
Date: Tue, 25 May 2004 11:12:04 -0400
Subject: [Twisted-Python] Nevow and twisted.enterprise and deferreds
In-Reply-To: <E1BSVHb-0006ZA-00@pyramid.twistedmatrix.com>
References: <E1BSVHb-0006ZA-00@pyramid.twistedmatrix.com>
Message-ID: <E1AED463-AE5D-11D8-BC16-000A95864FC4@ulaluma.com>


On May 25, 2004, at 2:19 AM, Alexander May wrote:

> I traced through the call stack and found this in renderer.py
>
> def _error(failure):
>     # FIXME: this should *definitely* do something better
>     # doing this leaves the connection hanging, but it's better
>     # than nothing.
>     print "FAILURE !",failure

Apparently you are using Nevow 0.1. You should either upgrade to the 
recently-but-quietly released 0.2 
(http://www.divmod.org/Home/Downloads.html) or just check out the SVN 
HEAD (svn co svn://divmod.org/svn/Nevow/trunk Nevow)

The code you found is completely gone now, and is replaced with a much 
easier to understand rendering inner loop, and proper error rendering 
upon deferred errback.

The only reason 0.2 hasn't been announced is because I haven't had time 
to write a release announcement, but I guess the cat is out of the bag 
now.

dp




From alex-news at comcast.net  Tue May 25 09:33:32 2004
From: alex-news at comcast.net (Alexander May)
Date: Tue, 25 May 2004 11:33:32 -0400
Subject: [Twisted-Python] Nevow and twisted.enterprise and deferreds
In-Reply-To: <E1AED463-AE5D-11D8-BC16-000A95864FC4@ulaluma.com>
Message-ID: <E1BSdwM-000414-00@pyramid.twistedmatrix.com>

Wonderful!  I'll give it try shortly.

Thanks again,
Alex


-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Donovan
Preston
Sent: Tuesday, May 25, 2004 11:12 AM
To: Twisted discussion stuff
Subject: Re: [Twisted-Python] Nevow and twisted.enterprise and deferreds


On May 25, 2004, at 2:19 AM, Alexander May wrote:

> I traced through the call stack and found this in renderer.py
>
> def _error(failure):
>     # FIXME: this should *definitely* do something better
>     # doing this leaves the connection hanging, but it's better
>     # than nothing.
>     print "FAILURE !",failure

Apparently you are using Nevow 0.1. You should either upgrade to the
recently-but-quietly released 0.2
(http://www.divmod.org/Home/Downloads.html) or just check out the SVN HEAD
(svn co svn://divmod.org/svn/Nevow/trunk Nevow)

The code you found is completely gone now, and is replaced with a much
easier to understand rendering inner loop, and proper error rendering upon
deferred errback.

The only reason 0.2 hasn't been announced is because I haven't had time to
write a release announcement, but I guess the cat is out of the bag now.

dp


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From jkocherhans at mac.com  Tue May 25 09:58:23 2004
From: jkocherhans at mac.com (Joseph Kocherhans)
Date: Tue, 25 May 2004 09:58:23 -0600
Subject: [Twisted-Python] Re: twisted enterprise versus other OR tools
In-Reply-To: <40B22D7D.3010704@praxsys.com>
References: <1085411115.9944.49.camel@sheriffpony>	<20040524154112.GL1081@frobozz>
	<40B22D7D.3010704@praxsys.com>
Message-ID: <40B36D1F.1020308@mac.com>

I haven't used it myself, but I hear Modeling is supposed to be very 
similar to EOF. http://modeling.sourceforge.net/

These might also be helpful:
http://toulouse.amber.org/archives/2003/02/04/real_objectrelational_mapping_for_python.html
http://toulouse.amber.org/archives/2003/04/21/evaluating_objectrelational_migration.html

joseph

Kevin Koym wrote:
> I have been recently looking at Twisted Enterprise.  I am wondering-
> 
> Is there any other object /relational persistence mechanisms that are 
> closer to
> - php's propel http://propel.phpdb.org/
> - apache's torque
> 
> I like the idea of having a lighter weight system, which it seems that 
> twisted's enterprise provides, but I miss not having some of the 
> modeling capabilities of these other tools vis a vis twisted 
> enterprise.  I am wondering what is planned for its future, or perhaps, 
> given my newness to python, perhaps I am looking at the wrong tool for 
> object persistance into relational databases?  Are there others that are 
> used on a higher end for lots more classes?  Given that the Java world 
> has so many of these tools for object - relational mapping (versus 
> pulling rows out of tables separate of business objects), I expect that 
> there is another in the python world that I have missed (whether it is 
> twisted.enterprise or otherwise).
> 
> Any thoughts appreciated.
> 
> Thanks,
> Kevin
> 
> PS my bias is towards Apple's (formerly NeXT's) enterprise objects.  If 
> you have a suggestion that hits close to it, please let me know.
> 
> 
> 
> ------------------------------------------------------------------------
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From ANUJS at Amdocs.com  Tue May 25 03:12:43 2004
From: ANUJS at Amdocs.com (Anuj Seth)
Date: Tue, 25 May 2004 12:12:43 +0300
Subject: [Twisted-Python] Newbie question about writing a client
Message-ID: <C07050497CCE8E468DE912D1A8D25885117543@cypmail1srv.corp.amdocs.com>

Hi,
The echo client in doc/examples sends a  hardcoded string from the call back "connectionMade".
How can i change it to send any string produced by some other source ?
For e.g., if i want to let the user enter some string and then send it to the echo server and then print the result back.

Thanks for any pointers,
Anuj.
-------------- next part --------------
-------------------------------------------------------------------------------------

The information contained in this message is proprietary of Amdocs,

protected from disclosure, and may be privileged.

The information is intended to be conveyed only to the designated recipient(s)

of the message. If the reader of this message is not the intended recipient,

you are hereby notified that any dissemination, use, distribution or copying of 

this communication is strictly prohibited and may be unlawful. 

If you have received this communication in error, please notify us immediately

by replying to the message and deleting it from your computer.

Thank you.

---------------------------------------------------------

From michael.l.schneider at ugsplm.com  Tue May 25 11:23:04 2004
From: michael.l.schneider at ugsplm.com (Schneider, Michael)
Date: Tue, 25 May 2004 13:23:04 -0400
Subject: [Twisted-Python] Java question
Message-ID: <49199579A2BB32438A7572AF3DBB2FB505A21810@uscimplm001.net.plm.eds.com>

Hello All,

I am using twisted in a distributed app, and a portion of the system 
is in Java.

This may be a little off topic, but is there a package for
Java that provides any of:
	- reactors
	- deferred
	- Protocol Objects like twisted


You get used to a paradigm, and would like to stay with it
as you move between languages :-)

Thanks,
Mike

 
----------------------------------------------------------------
Michael Schneider
Senior Software Engineering Consultant
UGS PLM Solutions - an EDS Company
 
"The Greatest Performance Improvement Is the transitioning from a non-working state to the working state"



From itamar at itamarst.org  Tue May 25 11:28:44 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 25 May 2004 13:28:44 -0400
Subject: [Twisted-Python] Java question
In-Reply-To: <49199579A2BB32438A7572AF3DBB2FB505A21810@uscimplm001.net.plm.eds.com>
References: <49199579A2BB32438A7572AF3DBB2FB505A21810@uscimplm001.net.plm.eds.com>
Message-ID: <1085506124.9943.219.camel@sheriffpony>

On Tue, 2004-05-25 at 13:23, Schneider, Michael wrote:

> This may be a little off topic, but is there a package for
> Java that provides any of:
> 	- reactors
> 	- deferred
> 	- Protocol Objects like twisted

I started some work on improving EIO, originally written by Zooko. It
doesn't have a concept of Deferreds yet, and some of the APIs will no
doubt change, but it's a start.

http://java.twistedmatrix.com/eio/

-- 
Itamar Shtull-Trauring    http://itamarst.org





From kevin at praxsys.com  Tue May 25 11:37:38 2004
From: kevin at praxsys.com (Kevin Koym)
Date: Tue, 25 May 2004 12:37:38 -0500
Subject: [Twisted-Python] Re: twisted enterprise versus other OR tools
In-Reply-To: <40B36D1F.1020308@mac.com>
References: <1085411115.9944.49.camel@sheriffpony>	<20040524154112.GL1081@frobozz>	<40B22D7D.3010704@praxsys.com>
	<40B36D1F.1020308@mac.com>
Message-ID: <40B38462.3090402@praxsys.com>

Joseph,

All I can say is "yippie"!  Thank you for showing this to me.  Sounds 
like the author of this framework has a very similar background to 
mine.  I will check this out.

As well, thank you to Steve and Dave as well for the leads on this.  The 
more that I read and write in python, the more I enjoy it.

Thanks.
Kevin

Joseph Kocherhans wrote:

> I haven't used it myself, but I hear Modeling is supposed to be very 
> similar to EOF. http://modeling.sourceforge.net/
>
> These might also be helpful:
> http://toulouse.amber.org/archives/2003/02/04/real_objectrelational_mapping_for_python.html 
>
> http://toulouse.amber.org/archives/2003/04/21/evaluating_objectrelational_migration.html 
>
>
> joseph
>
> Kevin Koym wrote:
>
>> I have been recently looking at Twisted Enterprise.  I am wondering-
>>
>> Is there any other object /relational persistence mechanisms that are 
>> closer to
>> - php's propel http://propel.phpdb.org/
>> - apache's torque
>>
>> I like the idea of having a lighter weight system, which it seems 
>> that twisted's enterprise provides, but I miss not having some of the 
>> modeling capabilities of these other tools vis a vis twisted 
>> enterprise.  I am wondering what is planned for its future, or 
>> perhaps, given my newness to python, perhaps I am looking at the 
>> wrong tool for object persistance into relational databases?  Are 
>> there others that are used on a higher end for lots more classes?  
>> Given that the Java world has so many of these tools for object - 
>> relational mapping (versus pulling rows out of tables separate of 
>> business objects), I expect that there is another in the python world 
>> that I have missed (whether it is twisted.enterprise or otherwise).
>>
>> Any thoughts appreciated.
>>
>> Thanks,
>> Kevin
>>
>> PS my bias is towards Apple's (formerly NeXT's) enterprise objects.  
>> If you have a suggestion that hits close to it, please let me know.
>>
>>
>>
>> ------------------------------------------------------------------------
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

-- 
Kevin Koym

Innovation

kevin at praxsys.com
+1.512.698.9328 cell in US


-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3170 bytes
Desc: S/MIME Cryptographic Signature
URL: </pipermail/twisted-python/attachments/20040525/11cf6c0a/attachment-0002.bin>

From orbitz at ezabel.com  Tue May 25 12:02:25 2004
From: orbitz at ezabel.com (orbitz at ezabel.com)
Date: Tue, 25 May 2004 14:02:25 -0400
Subject: [Twisted-Python] Newbie question about writing a client
In-Reply-To: <C07050497CCE8E468DE912D1A8D25885117543@cypmail1srv.corp.amdocs.com>
References: <C07050497CCE8E468DE912D1A8D25885117543@cypmail1srv.corp.amdocs.com>
Message-ID: <20040525140225.56a2c523.orbitz@ezabel.com>

There are several ways. You can make the string global (probably not what you
want).  Or you can make it part of the Protocol class, and set it during the
buildProtocol method in yoru factory. Or make it part of your factory and have
the protocol use that.  To do the last you coudl do something like:

f = EchoFactory()
f.sayWhat = 'This is what I want to say'
reactor.connectTCP(..., f)

Then your protocol can do:
def connectionMade(..):
  self.transport.write(self.factor.sayWhat)

Hope that helps.


On Tue, 25 May 2004 12:12:43 +0300
"Anuj Seth" <ANUJS at Amdocs.com> wrote:

> Hi,
> The echo client in doc/examples sends a  hardcoded string from the call back
> "connectionMade". How can i change it to send any string produced by some
> other source ? For e.g., if i want to let the user enter some string and then
> send it to the echo server and then print the result back.
> 
> Thanks for any pointers,
> Anuj.



From glyph at divmod.com  Tue May 25 23:59:02 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 26 May 2004 01:59:02 -0400
Subject: [Twisted-Python] Java question
In-Reply-To: <1085506124.9943.219.camel@sheriffpony>
References: <49199579A2BB32438A7572AF3DBB2FB505A21810@uscimplm001.net.plm.eds.com>
	<1085506124.9943.219.camel@sheriffpony>
Message-ID: <1085551142.9027.5.camel@kazekage>

On Tue, 2004-05-25 at 13:28, Itamar Shtull-Trauring wrote:

> I started some work on improving EIO, originally written by Zooko. It
> doesn't have a concept of Deferreds yet, and some of the APIs will no
> doubt change, but it's a start.

Maybe it's obvious, but a suggestion:

public class DeferredCallback {
	public Object callback(Object result) {}
	public Object errback(Failure failure) {}
}

public class Deferred  {
	public Object defer(DeferredCallback dc) {...}
}

That way,

foo.doIt().defer(new DeferredCallback() { public Object callback(Object
result) {
  doneWithIt();
} public Object errback(Failure f) {
  whatTheHeck();
} };

I think that looks nice.  Might also want a
DeferredCallback.fromRunnable, etc.





From laforge49 at yahoo.co.in  Wed May 26 06:26:56 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Wed, 26 May 2004 13:26:56 +0100 (BST)
Subject: [Twisted-Python] (Un)Twisted Clients and Servers (newbie)
Message-ID: <20040526122656.49421.qmail@web8305.mail.in.yahoo.com>

Finally wrote my first Twisted-based client and
server:
http://compstrm.sourceforge.net/twcs/csprotocol.html

Both the client and server are implemented as light-
weight processes, where pipes are used for reading
and writing to remote processes. This allows the
logic flow to be more straight-line.

I'm also "translucently" switching threads in the
client, using in-line method calls, so that reads
and writes to the client do not block the main thread.

(I'm trying to show how much clearer asynchronous
programming can be using Computational Streams.)



=====
Bill la Forge
http://www.geocities.com/laforge49/

________________________________________________________________________
Yahoo! India Matrimony: Find your partner online. http://yahoo.shaadi.com/india-matrimony/



From bob at redivi.com  Wed May 26 07:55:22 2004
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 26 May 2004 09:55:22 -0400
Subject: [Twisted-Python] (Un)Twisted Clients and Servers (newbie)
In-Reply-To: <20040526122656.49421.qmail@web8305.mail.in.yahoo.com>
References: <20040526122656.49421.qmail@web8305.mail.in.yahoo.com>
Message-ID: <552CDE24-AF1C-11D8-9DC7-000A95686CD8@redivi.com>

On May 26, 2004, at 8:26 AM, Bill la Forge wrote:

> Finally wrote my first Twisted-based client and
> server:
> http://compstrm.sourceforge.net/twcs/csprotocol.html
>
> Both the client and server are implemented as light-
> weight processes, where pipes are used for reading
> and writing to remote processes. This allows the
> logic flow to be more straight-line.
>
> I'm also "translucently" switching threads in the
> client, using in-line method calls, so that reads
> and writes to the client do not block the main thread.
>
> (I'm trying to show how much clearer asynchronous
> programming can be using Computational Streams.)

You really need to take a look at Stackless Python.  It's a much better 
fit for the programming paradigm you want, and tasklet communication is 
WAY faster than thread communication in Python.  I also think that the 
Communicating Sequential Processes model is much nicer than your 
Computational Streams model.

As far as switching between "async" and 'blocking", why don't you just 
yield BlockingMode and yield AsyncMode?  That would kill two birds with 
one stone.  What's the difference between yielding True, False, and 
None (that is rhetorical, I read the implementation)?  Personally I 
think you should use useful names, even if they are just aliases for 
built-in python datatypes.  For example, the following lines are much 
more self-documenting:

yield Cooperate
yield Stop
yield BlockingMode
yield AsyncMode

When I did a framework very similar to but much more simple than yours, 
I also made it possible to integrate with Deferred (to block on it and 
resume on success/err, and also to return a deferred instead of a 
generator using a function wrapper).

Translucent thread migration isn't the greatest idea, sometimes you 
need to tie data structures to the a threadstate (for C level code.. 
something like database cursors, or whatever).  It's usually better to 
keep the same code on the same thread whenever possible.  But of 
course, it's better just to not use them at all unless you are calling 
some blocking C code, because it doesn't do anything for you with 
Python bytecode.

-bob
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 2357 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20040526/8720e89e/attachment-0002.bin>

From laforge49 at yahoo.co.in  Wed May 26 09:17:46 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Wed, 26 May 2004 16:17:46 +0100 (BST)
Subject: [Twisted-Python] (Un)Twisted Clients and Servers (newbie)
In-Reply-To: <552CDE24-AF1C-11D8-9DC7-000A95686CD8@redivi.com>
Message-ID: <20040526151746.78471.qmail@web8305.mail.in.yahoo.com>

Bob,

Thanks for the feedback. Is Zope3 stackless? Or did I
misread that somewhere?

The old unix model of processes/pipes keeps coming 
back up, it seems. Occum made good use of it, and I
understand stackless does too. I think its the
ultimate
component model.

Just a side note, bsddb apparently doesn't care which
thread you use, as long as its sequential. This 
apparently changed (at least in the docs) in 4.2
(which is included with Python 2.3). (And was pointed
out to me a few days ago on this list!)

I agree that Python, being already a high-level 
language, is likely not the best choice for layering
another programming model on top of. And stackless
looks like its a speed Phreek's dream. Where's the
documentation for Stackless, in the download? I'd
like to read more about it than what I can find on
the web site.

Anyway, I've picked my horse--Medusa--and I had 
intended to ride it for a while. But Twisted looked
far richer/active/maintained. Is the world really
ready for Stackless? It could be a far better world...

(It really wouldn't take much to get me over there,
but I really really need a lot of what's already 
part of Twisted!)

Bill

 --- Bob Ippolito <bob at redivi.com> wrote: > On May 26,
2004, at 8:26 AM, Bill la Forge wrote:
> 
> > Finally wrote my first Twisted-based client and
> > server:
> >
> http://compstrm.sourceforge.net/twcs/csprotocol.html
> >
> > Both the client and server are implemented as
> light-
> > weight processes, where pipes are used for reading
> > and writing to remote processes. This allows the
> > logic flow to be more straight-line.
> >
> > I'm also "translucently" switching threads in the
> > client, using in-line method calls, so that reads
> > and writes to the client do not block the main
> thread.
> >
> > (I'm trying to show how much clearer asynchronous
> > programming can be using Computational Streams.)
> 
> You really need to take a look at Stackless Python. 
> It's a much better 
> fit for the programming paradigm you want, and
> tasklet communication is 
> WAY faster than thread communication in Python.  I
> also think that the 
> Communicating Sequential Processes model is much
> nicer than your 
> Computational Streams model.
> 
> As far as switching between "async" and 'blocking",
> why don't you just 
> yield BlockingMode and yield AsyncMode?  That would
> kill two birds with 
> one stone.  What's the difference between yielding
> True, False, and 
> None (that is rhetorical, I read the
> implementation)?  Personally I 
> think you should use useful names, even if they are
> just aliases for 
> built-in python datatypes.  For example, the
> following lines are much 
> more self-documenting:
> 
> yield Cooperate
> yield Stop
> yield BlockingMode
> yield AsyncMode
> 
> When I did a framework very similar to but much more
> simple than yours, 
> I also made it possible to integrate with Deferred
> (to block on it and 
> resume on success/err, and also to return a deferred
> instead of a 
> generator using a function wrapper).
> 
> Translucent thread migration isn't the greatest
> idea, sometimes you 
> need to tie data structures to the a threadstate
> (for C level code.. 
> something like database cursors, or whatever).  It's
> usually better to 
> keep the same code on the same thread whenever
> possible.  But of 
> course, it's better just to not use them at all
> unless you are calling 
> some blocking C code, because it doesn't do anything
> for you with 
> Python bytecode.
> 
> -bob


________________________________________________________________________
Yahoo! India Matrimony: Find your partner online. http://yahoo.shaadi.com/india-matrimony/



From bob at redivi.com  Wed May 26 10:50:14 2004
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 26 May 2004 12:50:14 -0400
Subject: [Twisted-Python] (Un)Twisted Clients and Servers (newbie)
In-Reply-To: <20040526151746.78471.qmail@web8305.mail.in.yahoo.com>
References: <20040526151746.78471.qmail@web8305.mail.in.yahoo.com>
Message-ID: <C2801F54-AF34-11D8-9DC7-000A95686CD8@redivi.com>

On May 26, 2004, at 11:17 AM, Bill la Forge wrote:

> Thanks for the feedback. Is Zope3 stackless? Or did I
> misread that somewhere?

No, it does not depend on or otherwise use Stackless as far as I have 
heard.  I believe you have misread.

> The old unix model of processes/pipes keeps coming
> back up, it seems. Occum made good use of it, and I
> understand stackless does too. I think its the
> ultimate
> component model.

Well unix pipes are awful to use directly, since they are just one big 
stream of bytes with no semantic information whatsoever.. but they are 
a good enough foundation to build something better.

> Just a side note, bsddb apparently doesn't care which
> thread you use, as long as its sequential. This
> apparently changed (at least in the docs) in 4.2
> (which is included with Python 2.3). (And was pointed
> out to me a few days ago on this list!)
>
> I agree that Python, being already a high-level
> language, is likely not the best choice for layering
> another programming model on top of. And stackless
> looks like its a speed Phreek's dream. Where's the
> documentation for Stackless, in the download? I'd
> like to read more about it than what I can find on
> the web site.

There isn't a whole lot of documentation.  Download it, compile it (if 
necessary, I think there are recent win32 binaries), look at some of 
the tests and code.  The stackless module has decent doc strings.

> Anyway, I've picked my horse--Medusa--and I had
> intended to ride it for a while. But Twisted looked
> far richer/active/maintained. Is the world really
> ready for Stackless? It could be a far better world...

Do you really care what the rest of the world is doing or is ready for? 
  If you really did, you'd probably be doing something in Java or C#.

> (It really wouldn't take much to get me over there,
> but I really really need a lot of what's already
> part of Twisted!)

Stackless Python is an alternative Python interpreter, not a networking 
framework.  Twisted works just fine under Stackless, and there is even 
from Stackless specific integration in the sandbox.

-bob




From radix at twistedmatrix.com  Wed May 26 10:53:18 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 26 May 2004 12:53:18 -0400
Subject: [Twisted-Python] (Un)Twisted Clients and Servers (newbie)
In-Reply-To: <C2801F54-AF34-11D8-9DC7-000A95686CD8@redivi.com>
References: <20040526151746.78471.qmail@web8305.mail.in.yahoo.com>
	<C2801F54-AF34-11D8-9DC7-000A95686CD8@redivi.com>
Message-ID: <40B4CB7E.5040709@twistedmatrix.com>

Bob Ippolito wrote:

> Stackless Python is an alternative Python interpreter, not a networking 
> framework.  Twisted works just fine under Stackless, and there is even 
> from Stackless specific integration in the sandbox.


Self plug: sandbox/radix/threadless.py

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040526/3f60bcb3/attachment.sig>

From alex-news at comcast.net  Wed May 26 12:28:26 2004
From: alex-news at comcast.net (Alexander May)
Date: Wed, 26 May 2004 14:28:26 -0400
Subject: [Twisted-Python] How to organize a web application?
Message-ID: <E1BT38q-0001xu-00@pyramid.twistedmatrix.com>

I am looking for advice on how to organize a web application.  I've never
written a web application before, and would appreciate any insight into best
practices and overall structure.

I have html pages, html templates, an underlying database, and (hopefully)
an understanding of twisted and nevow.  What is the best way to glue all of
this together?

For example, what is the best way to associate derived rend.Page classes
with html templates?  I'll have all these different data and render
functions that could potentially be used by many different templates.  Do I
create one monster rend.Page derived class responsible for servicing all the
possible display an render functions?  That seems wrong.  What's the
alternative?

What is the best way to manage links?  The html page template will link to
each other, mostly at the discretion of the html designers (admittedly me at
first).  Should I utilize the underlying file system to define the link
structure as I might do for static html site?  If yes, should I use
static.File and create a special resource type for the html template and
then return rend.Page derived classes?  Or should I do something else all
together?

What is the best way to manage state (non database)?  Cookies or mugged URLS
mapped to closures seems like it would work well.  Perhaps someone has some
experience doing this?

I took a look at the Quotient source, and did not see any html templates at
all, so I assume all the html generation is occurring dynamically via Stan
or some other method.  Likewise for nevow Calendar example which has a
single html template and links to dynamically generated pages (I'll probably
need to do that too).

Thought and comments?

Thanks,
Alex








From glyph at divmod.com  Wed May 26 13:29:29 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 26 May 2004 15:29:29 -0400
Subject: [Twisted-Python] How to organize a web application?
In-Reply-To: <E1BT38q-0001xu-00@pyramid.twistedmatrix.com>
References: <E1BT38q-0001xu-00@pyramid.twistedmatrix.com>
Message-ID: <1085599769.9027.32.camel@kazekage>

On Wed, 2004-05-26 at 14:28, Alexander May wrote:
> I am looking for advice on how to organize a web application.  I've never
> written a web application before, and would appreciate any insight into best
> practices and overall structure.

This discussion would be better suited towards either the
twisted-web at twistedmatrix.com or divmod-dev at divmod.org mailing list.




From michael.l.schneider at ugsplm.com  Wed May 26 13:30:44 2004
From: michael.l.schneider at ugsplm.com (Schneider, Michael)
Date: Wed, 26 May 2004 15:30:44 -0400
Subject: [Twisted-Python] Java question
Message-ID: <49199579A2BB32438A7572AF3DBB2FB505A21815@uscimplm001.net.plm.eds.com>

Thank you Itamar,

I will download this and look at it.

Mike

 
----------------------------------------------------------------
Michael Schneider
Senior Software Engineering Consultant
UGS PLM Solutions - an EDS Company
 
"The Greatest Performance Improvement Is the transitioning from a non-working state to the working state"


> -----Original Message-----
> From: twisted-python-bounces at twistedmatrix.com
> [mailto:twisted-python-bounces at twistedmatrix.com]On Behalf Of Itamar
> Shtull-Trauring
> Sent: Tuesday, May 25, 2004 1:29 PM
> To: Twisted discussion stuff
> Subject: Re: [Twisted-Python] Java question
> 
> 
> On Tue, 2004-05-25 at 13:23, Schneider, Michael wrote:
> 
> > This may be a little off topic, but is there a package for
> > Java that provides any of:
> > 	- reactors
> > 	- deferred
> > 	- Protocol Objects like twisted
> 
> I started some work on improving EIO, originally written by Zooko. It
> doesn't have a concept of Deferreds yet, and some of the APIs will no
> doubt change, but it's a start.
> 
> http://java.twistedmatrix.com/eio/
> 
> -- 
> Itamar Shtull-Trauring    http://itamarst.org
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From michael.l.schneider at ugsplm.com  Wed May 26 13:33:59 2004
From: michael.l.schneider at ugsplm.com (Schneider, Michael)
Date: Wed, 26 May 2004 15:33:59 -0400
Subject: [Twisted-Python] Lore question/ latex output question
Message-ID: <49199579A2BB32438A7572AF3DBB2FB505A21816@uscimplm001.net.plm.eds.com>


Hello All,

I have been using lore for a project that I have been working
on, and it is a great tool.

I have a quick question.  Does anyone know how
to get the <pre>...</pre> tags to appear as shaded
on the latex/pdf output?

The generated latex looks like

\\begin{verbatim}   is being output at the start of the pre

and 

\\end{verbatim} is being output at the end of the pre.

I am trying to get the same output format as html output.

Thank you very much,
Mike
 
----------------------------------------------------------------
Michael Schneider
Senior Software Engineering Consultant
UGS PLM Solutions - an EDS Company
 
"The Greatest Performance Improvement Is the transitioning from a non-working state to the working state"
> 



From stephen at thorne.id.au  Wed May 26 18:07:54 2004
From: stephen at thorne.id.au (stephen at thorne.id.au)
Date: Thu, 27 May 2004 00:07:54 GMT
Subject: [Twisted-Python] Lore question/ latex output question
In-Reply-To: <49199579A2BB32438A7572AF3DBB2FB505A21816@uscimplm001.net.plm.eds.com>
Message-ID: <20040527000754.2212.578121168.divmod.quotient.35@ohm>

On Wed, 26 May 2004 15:33:59 -0400, "Schneider, Michael" <michael.l.schneider at ugsplm.com> wrote:
>
> Hello All,
> 
> I have been using lore for a project that I have been working
> on, and it is a great tool.
> 
> I have a quick question.  Does anyone know how
> to get the <pre>...</pre> tags to appear as shaded
> on the latex/pdf output?
> 
> The generated latex looks like
> 
> \\begin{verbatim}   is being output at the start of the pre
> 
> and=20
> 
> \\end{verbatim} is being output at the end of the pre.
> 
> I am trying to get the same output format as html output.

I hacked up the latex spitter to allow me to change the latex, I recommend
reading the 'extending lore' part of the howtos if this doesn't provide you
enough context. What this following code (that I use) does is puts a box
around the verbatim text:

in my spitters.py:

class LivewiresLatexSpitter(latex.ChapterLatexSpitter):
    def visitNode_pre(self, node):
        self.writer('\n\n\\begin{fmpage}\n\\begin{verbatim}\n')
        buf = StringIO()
        latex.getLatexText(node, buf.write)
        s = buf.getvalue()
        self.writer(latex.text.removeLeadingTrailingBlanks(s))
        self.writer('\\end{verbatim}\n\\end{fmpage}\n\n\n')

in my book.tex:

\newlength{\fmwidth}
\setlength{\fmwidth}{\textwidth}
\addtolength{\fmwidth}{-.5in}

\newsavebox{\fmbox}
\newenvironment{fmpage}[0]
    { \begin{lrbox}{\fmbox}\begin{minipage}{\fmwidth}}
    {\end{minipage}\end{lrbox}\vspace{1em}\fbox{\usebox{\fmbox}}\vspace{1em}}

I'll be happy to tarball up my documentation tree and send it to you off-list
if you want a working example.

Stephen.



From laforge49 at yahoo.co.in  Wed May 26 23:38:05 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Thu, 27 May 2004 06:38:05 +0100 (BST)
Subject: [Twisted-Python] (Un)Twisted Clients and Servers (newbie)
In-Reply-To: <40B4CB7E.5040709@twistedmatrix.com>
Message-ID: <20040527053805.47421.qmail@web8312.mail.in.yahoo.com>

Bob Ippolito wrote:
> As far as switching between "async" and 'blocking",
> why don't you just yield BlockingMode and yield 
> AsyncMode?

Well, I'm doing something like that now. Here's my
updated client protocol. Now at least you don't need
to remember what to yield (a potential source of 
errors). Plus you save a few lines. Thanks for the 
suggestion.

class SCP(CSProtocol):
    """
    Simple Client Protocol
    """
    def cs(self):
        lf=LineFilter()
        lf.delimiter=chr(26)
        pushFilter(self,0,lf)
        inp=self.device[0]
        out=self.device[1]
        while True:
            yield inp.startRead()
            try:
                data=inp.endRead()
            except:
                break
            if data=='exit':
                break
            yield self.blockingIOMode()
            sys.stdout.write(data)
            txt=sys.stdin.readline()
            yield self.asyncIOMode()
            if not len(txt):
                break
            yield out.startWrite(txt)
            try:
                out.endWrite()
            except:
                break
        closeDevices(self)
        reactor.stop()


=====
Bill la Forge
http://www.geocities.com/laforge49/

________________________________________________________________________
Yahoo! India Matrimony: Find your partner online. http://yahoo.shaadi.com/india-matrimony/



From sysfrog at gmail.com  Thu May 27 15:25:39 2004
From: sysfrog at gmail.com (Guenther Starnberger)
Date: Thu, 27 May 2004 23:25:39 +0200
Subject: [Twisted-Python] Enterprise Rowobject and generating primary keys
Message-ID: <63c9dca20405271425353f98ff@mail.gmail.com>

Hi all,

I have a problem creating primary key values for enterprise rowobjects.

The KeyFactory class says "This is deprecated. Use the underlying
database to generate keys, or just roll your own.". As I am using
Postgresql the ideal solution would be to just use the 'nextval'
function (which is used as default value for the primary key in my
schema, therefore I could skip this column in my insert statement).

The problem now is, that I need to assign a value to the rowobject
primary key column, otherwise i get an exception from twisted
('instance has no attribute...'). Just excluding the primary key
column from my rowColumns attribute doesn't work either as this
results in twisted to hang. Manually selecting the nextval function
with the adbapi and using the result as primary key works, but this
solution isn't really nice.

Any other proposals for an elegant solution to create primary keys
when inserting new rowobjects?

cu
/gst



From cce at clarkevans.com  Thu May 27 18:03:59 2004
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 27 May 2004 20:03:59 -0400
Subject: [Twisted-Python] Enterprise Rowobject and generating primary keys
In-Reply-To: <63c9dca20405271425353f98ff@mail.gmail.com>
References: <63c9dca20405271425353f98ff@mail.gmail.com>
Message-ID: <20040528000358.GA77576@prometheusresearch.com>

as I remember, nextval is garuenteed to be unique (but 
definately not sequential) across transactions.  Why not
just fetch your own value and use it as the key?

def mykey()
   c = pgsql.cursor()
   c.execute("SELECT nextval('myseqence')")
   return c.fetchone()[0]

or is your question more subtle?

*bings*

Clark

On Thu, May 27, 2004 at 11:25:39PM +0200, Guenther Starnberger wrote:
| Hi all,
| 
| I have a problem creating primary key values for enterprise rowobjects.
| 
| The KeyFactory class says "This is deprecated. Use the underlying
| database to generate keys, or just roll your own.". As I am using
| Postgresql the ideal solution would be to just use the 'nextval'
| function (which is used as default value for the primary key in my
| schema, therefore I could skip this column in my insert statement).
| 
| The problem now is, that I need to assign a value to the rowobject
| primary key column, otherwise i get an exception from twisted
| ('instance has no attribute...'). Just excluding the primary key
| column from my rowColumns attribute doesn't work either as this
| results in twisted to hang. Manually selecting the nextval function
| with the adbapi and using the result as primary key works, but this
| solution isn't really nice.
| 
| Any other proposals for an elegant solution to create primary keys
| when inserting new rowobjects?
| 
| cu
| /gst
| 
| _______________________________________________
| Twisted-Python mailing list
| Twisted-Python at twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
| 

-- 
Clark C. Evans                     Prometheus Research, LLC
Chief Technology Officer           Turning Data Into Knowledge
cce at prometheusresearch.com         www.prometheusresearch.com
(main) 203.777.2550                (cell) 203.444.0557



From developer at csrules.dyndns.org  Thu May 27 21:28:35 2004
From: developer at csrules.dyndns.org (darryl)
Date: Thu, 27 May 2004 20:28:35 -0700
Subject: [Twisted-Python] Enterprise Rowobject and generating primary keys
In-Reply-To: <63c9dca20405271425353f98ff@mail.gmail.com>
References: <63c9dca20405271425353f98ff@mail.gmail.com>
Message-ID: <40B6B1E3.5010802@csrules.dyndns.org>

Guenther Starnberger wrote:

>
>Any other proposals for an elegant solution to create primary keys
>when inserting new rowobjects?
>
>cu
>/gst
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>  
>
There are some that believe that your primary key should come as a 
natural result of normalizing your data and sequences etc. are not 
really necessary at all. If that isn't an option and you don't like 
sequences, the your option is a UUID of some kind i guess.

-darryl

-- 

http://randomthoughts.vandorp.ca/WK/blog




From jsaker at americanrelay.com  Thu May 27 20:37:58 2004
From: jsaker at americanrelay.com (James R. Saker Jr.)
Date: Thu, 27 May 2004 21:37:58 -0500
Subject: [Twisted-Python] Twisted sshd examples?
Message-ID: <1085711878.14977.13.camel@localhost>

Anyone familiar with a good implementation of twisted's ssh server? I'm
looking to interface a menu application with SSH and instead of setting
the python app as the UNIX shell, I'd like twisted to handle sshd so my
application can permit different user logins (vs. being bound to a
particular user's shell via that approach).

The Twisted example provided
(http://www.twistedmatrix.com/documents/current/examples/sshsimpleserver.py) appears to fail and I wonder if its outdated as the current API doesn't reference realm under conch:

from twisted.conch import error, realm
...


Traceback (most recent call last):
  File "sshd.py", line 3, in ?
    from twisted.conch import error, realm
ImportError: cannot import name realm

Thanks...

Jamie





From laforge49 at yahoo.co.in  Thu May 27 21:58:52 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Fri, 28 May 2004 04:58:52 +0100 (BST)
Subject: [Twisted-Python] TieredServices
Message-ID: <20040528035852.83008.qmail@web8307.mail.in.yahoo.com>

I've cleaned up the TieredServices code for handling
partial failure during initialization of related
services.

Its posted to my web site, together with test code, at

http://compstrm.sourceforge.net/twcs/tieredservices.html

This code DOES NOT use anything from CompStrm.

Please consider this a contribution to Twisted, as
I'm consigning the copyright to Glyph so that it can
be included. (Consignment contingent on inclusion, of
course.)


=====
Bill la Forge
http://www.geocities.com/laforge49/

________________________________________________________________________
Yahoo! India Matrimony: Find your partner online. http://yahoo.shaadi.com/india-matrimony/



From z3p at twistedmatrix.com  Thu May 27 22:05:40 2004
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Fri, 28 May 2004 00:05:40 -0400
Subject: [Twisted-Python] Twisted sshd examples?
In-Reply-To: <1085711878.14977.13.camel@localhost>
References: <1085711878.14977.13.camel@localhost>
Message-ID: <1085717140.7393.2.camel@petra>

On Thu, 2004-05-27 at 22:37, James R. Saker Jr. wrote:
> Anyone familiar with a good implementation of twisted's ssh server? I'm
> looking to interface a menu application with SSH and instead of setting
> the python app as the UNIX shell, I'd like twisted to handle sshd so my
> application can permit different user logins (vs. being bound to a
> particular user's shell via that approach).
> 
> The Twisted example provided
> (http://www.twistedmatrix.com/documents/current/examples/sshsimpleserver.py) appears to fail and I wonder if its outdated as the current API doesn't reference realm under conch:

Yeah, that was a stupid bug.  The example in current SVN should work. 
You might also want to look at t.c.unix, which implements a bunch of the
stuff that you will want to implement for your application (namely, a
Session channel).

-p
-- 
       Paul Swartz
(o_    http://z3p.livejournal.com/
//\    z3p at twistedmatrix.com
V_/_   AIM: z3penguin  GPG:5CF0B1C9
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20040528/c424d010/attachment.sig>

From sysfrog at gmail.com  Fri May 28 03:44:23 2004
From: sysfrog at gmail.com (Guenther Starnberger)
Date: Fri, 28 May 2004 11:44:23 +0200
Subject: [Twisted-Python] Enterprise Rowobject and generating primary keys
In-Reply-To: <40B6B1E3.5010802@csrules.dyndns.org>
References: <63c9dca20405271425353f98ff@mail.gmail.com>
	<40B6B1E3.5010802@csrules.dyndns.org>
Message-ID: <63c9dca204052802441b5dbf1f@mail.gmail.com>

On Thu, 27 May 2004 20:28:35 -0700, darryl <developer at csrules.dyndns.org> wrote:

Hi,

> There are some that believe that your primary key should come as a
> natural result of normalizing your data and sequences etc. are not
> really necessary at all. If that isn't an option and you don't like
> sequences, the your option is a UUID of some kind i guess.

nice idea :) i hadn't thought of the possibility of using UUIDs as
primary keys. (which have the huge advantage that they are even unique
across different databases.)

cu
/gst



From cmg at dok.org  Fri May 28 11:17:30 2004
From: cmg at dok.org (Chris Green)
Date: Fri, 28 May 2004 13:17:30 -0400
Subject: [Twisted-Python] What does the LGPL mean in terms of python?
Message-ID: <m2pt8oh3o5.fsf@catbert.dok.org>

Hey folks,

I've checked out the archives but almost everything I've read just
amounted to "it's under the LGPL, read that".

I understand the LGPL with regards to the classic case of C libraries.
You can call the public functions, even add your own new public
functions but the code that is in the library itself has to be
released under the terms of the LGPL.  The examples in the LGPL of
using just the header file doesn't really map into python.

For example, is a subclass a derivative work? By the LGPL, it seems to
be since it's combined completely with the code that is under the
LGPL. 

Let's say I had ChatServer derived from TCPServer, is it the intent of
the licensing that my code must be placed under the LGPL?  

If subclassing is allowed to occur and those new classes can be placed
under any license the user desires, it seems that any licensing
inconvenience that doesn't involve cutting and pasting code can be
worked around by merely extending the existing classes.

If it's not allowed, I'm still not sure what the boundary lines are.

This would be great information to add to the FAQ and include with
the distribution as licensing clarifications and what the intent of
the licensing scheme is.

Thanks,
Chris

-- 
Chris Green <cmg at dok.org>
Warning: time of day goes back, taking countermeasures.





From jsaker at americanrelay.com  Fri May 28 12:39:39 2004
From: jsaker at americanrelay.com (James R. Saker Jr.)
Date: Fri, 28 May 2004 13:39:39 -0500
Subject: [Twisted-Python] Re: Twisted-Python Digest, Vol 2, Issue 38
In-Reply-To: <E1BTleH-0008J6-02@pyramid.twistedmatrix.com>
References: <E1BTleH-0008J6-02@pyramid.twistedmatrix.com>
Message-ID: <1085769579.27719.20.camel@localhost>

> From: Paul Swartz <z3p at twistedmatrix.com>
> Yeah, that was a stupid bug.  The example in current SVN should work. 
> You might also want to look at t.c.unix, which implements a bunch of the
> stuff that you will want to implement for your application (namely, a
> Session channel).

Cool - definitely will. The whole conch area seems to be rather
interesting - digging for more documentation on insults as well as I'm
not quite the "read the API and code" learner yet.

Now if someone could just show me the trick to learning this all faster,
I'd be set;-) scp python.twisted.* me at brian.self://long/term/memory/ !!!

Jamie





From glyph at divmod.com  Fri May 28 12:48:08 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Fri, 28 May 2004 14:48:08 -0400
Subject: [Twisted-Python] What does the LGPL mean in terms of python?
In-Reply-To: <m2pt8oh3o5.fsf@catbert.dok.org>
References: <m2pt8oh3o5.fsf@catbert.dok.org>
Message-ID: <1085770088.11747.47.camel@kazekage>

On Fri, 2004-05-28 at 13:17, Chris Green wrote:

> For example, is a subclass a derivative work? By the LGPL, it seems to
> be since it's combined completely with the code that is under the
> LGPL. 

Chris,

Thanks for your questions.  Your concerns are well-founded.  However,
they are thankfully soon to be irrelevant.

Googling the twisted-python archives will give you some background on
the intention and implications of the LGPL as it applies to Twisted. 
However, the LGPL was originally selected as Twisted was largely code
that I wrote personally and many of the interested parties were large
corporations with no experience, knowledge, or interest in open source. 
I wanted a license which was not terribly restrictive but still required
those companies to do investigation into the license, requiring in so
doing that they become at least marginally involved in the community
process.  In that, the confusing wording of the LGPL as it regards
Python code was an asset.  It would be a halfway accurate statement that
I selected the LGPL exactly because it doesn't make any sense.

Now we live in a different world than what Twisted was born into.  First
of all, middleware vendors know what Twisted is and who I am, which is a
bit of a shift :-).  More importantly, IBM, a massive bastion of
technological conservatism, has embraced open source.  By doing this,
they have sent a message to corporate lawyers everywhere that they need
to be aware of the free/open source software phenomenon and be able to
react appropriately to different licenses.  More and more companies are
aware of the need to interact with the community regardless of whether
it's necessary.

Finally, Twisted is no longer a personal effort of my own.  It is truly
a community project; in fact, I think I am falling far behind exarkun in
terms of number of lines committed :).  The community is large enough to
self-sustain without forcing new users to step forward because of an
inconvenient license.

For these reasons, and also to facilitate contribution by those who have
the right to release their own work as open source but NOT to consign
copyright to it (such as students at and employees of MIT), we are going
to be switching to an MIT-style (no pun intended) license soon.  The
real work is going to be filing the verbose license statement off every
source file in the tree and replacing it with a new one.

This has been a long time in coming - the decision was finally made at
PyCon this year and I'm sorry the change hasn't been implemented yet. 
On that note, I think we should change the license text at the top of
each file to simply refer to the TWISTED-LICENSE file in the
distribution or something like that, rather than including disclaimers
itself.




From cmg at dok.org  Fri May 28 13:16:06 2004
From: cmg at dok.org (Chris Green)
Date: Fri, 28 May 2004 15:16:06 -0400
Subject: [Twisted-Python] Re: What does the LGPL mean in terms of python?
References: <m2pt8oh3o5.fsf@catbert.dok.org>
	<1085770088.11747.47.camel@kazekage>
Message-ID: <m28yfcgy6h.fsf@catbert.dok.org>

Glyph Lefkowitz <glyph at divmod.com> writes:

> Thanks for your questions.  Your concerns are well-founded.  However,
> they are thankfully soon to be irrelevant.

Yay :) That's great news.  Having been on both sides of the
opensource/corporate use of opensource, I'm glad to know that the
project is so big that this has become an issue ;).

I'm very happy about the proposed license style.

Thanks,
Chris
-- 
Chris Green <cmg at dok.org>
You now have 14 minutes to reach minimum safe distance.




From glyph at divmod.com  Fri May 28 13:37:58 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Fri, 28 May 2004 15:37:58 -0400
Subject: [Twisted-Python] Re: What does the LGPL mean in terms of python?
In-Reply-To: <m28yfcgy6h.fsf@catbert.dok.org>
References: <m2pt8oh3o5.fsf@catbert.dok.org>
	<1085770088.11747.47.camel@kazekage> <m28yfcgy6h.fsf@catbert.dok.org>
Message-ID: <1085773078.4118.7.camel@kazekage>

> You now have 14 minutes to reach minimum safe distance.

And how far away is that!??




From cce at clarkevans.com  Fri May 28 19:22:15 2004
From: cce at clarkevans.com (Clark C. Evans)
Date: Fri, 28 May 2004 21:22:15 -0400
Subject: [Twisted-Python] What does the LGPL mean in terms of python?
In-Reply-To: <1085770088.11747.47.camel@kazekage>
References: <m2pt8oh3o5.fsf@catbert.dok.org>
	<1085770088.11747.47.camel@kazekage>
Message-ID: <20040529012215.GA16541@prometheusresearch.com>

On Fri, May 28, 2004 at 02:48:08PM -0400, Glyph Lefkowitz wrote:
| For these reasons, and also to facilitate contribution by those who have
| the right to release their own work as open source but NOT to consign
| copyright to it (such as students at and employees of MIT), we are going
| to be switching to an MIT-style (no pun intended) license soon.

This is great news.  I have the same issue here, I can now submit code
via any open source license, but the code I write belongs to the company
that pays the bills... and, for their contribution, they'd like to have
their name associated with the work.

Kind Regards,

Clark

-- 
Clark C. Evans                     Prometheus Research, LLC
Chief Technology Officer           Turning Data Into Knowledge
cce at prometheusresearch.com         www.prometheusresearch.com
(main) 203.777.2550                (cell) 203.444.0557



From radix at twistedmatrix.com  Fri May 28 21:06:10 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 28 May 2004 23:06:10 -0400
Subject: [Twisted-Python] What does the LGPL mean in terms of python?
In-Reply-To: <20040529012215.GA16541@prometheusresearch.com>
References: <m2pt8oh3o5.fsf@catbert.dok.org>	<1085770088.11747.47.camel@kazekage>
	<20040529012215.GA16541@prometheusresearch.com>
Message-ID: <40B7FE22.1090804@twistedmatrix.com>

Clark C. Evans wrote:
> On Fri, May 28, 2004 at 02:48:08PM -0400, Glyph Lefkowitz wrote:
> | For these reasons, and also to facilitate contribution by those who have
> | the right to release their own work as open source but NOT to consign
> | copyright to it (such as students at and employees of MIT), we are going
> | to be switching to an MIT-style (no pun intended) license soon.
> 
> This is great news.  I have the same issue here, I can now submit code
> via any open source license, but the code I write belongs to the company
> that pays the bills... and, for their contribution, they'd like to have
> their name associated with the work.

I'm curious, how will we specify who owns copyright of Twisted? 
Centralized in one place (COPYRIGHT?), so effectively everyone gets the 
same "amount" of copyright? Per-file? I'm not familiar with how 
multi-copyright-holder projects usually work.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040528/65c2e45f/attachment.sig>

From glyph at twistedmatrix.com  Sat May 29 05:57:37 2004
From: glyph at twistedmatrix.com (glyph at twistedmatrix.com)
Date: Sat, 29 May 2004 17:27:37 +0530
Subject: [Twisted-Python] oh
Message-ID: <E1BU2TY-0008My-00@pyramid.twistedmatrix.com>

did you sent it to me?
-------------- next part --------------
A non-text attachment was scrubbed...
Name: unfolds.com
Type: application/octet-stream
Size: 25353 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20040529/b9082622/attachment-0002.obj>

From laforge49 at yahoo.co.in  Sat May 29 06:36:45 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Sat, 29 May 2004 13:36:45 +0100 (BST)
Subject: [Twisted-Python] 1.3 patch for 0 delay
Message-ID: <20040529123645.39989.qmail@web8306.mail.in.yahoo.com>

Glyph,

Did you perchance do the regression test for that
patch I sent?

Bill la Forge

--- base.1.3.py 2004-05-21 08:08:58.000000000 +0530
+++ base.py     2004-05-22 10:50:10.015124800 +0530
@@ -368,10 +368,16 @@
         assert callable(_f), "%s is not callable" %
_f
         assert sys.maxint >= _seconds >= 0, \
                "%s is not greater than or equal to 0
seconds" % (_seconds,)
-        tple = DelayedCall(seconds() + _seconds, _f,
args, kw,
-                          
self._pendingTimedCalls.remove,
-                           self._resetCallLater)
-        insort(self._pendingTimedCalls, tple)
+        if _seconds != 0:
+            tple = DelayedCall(_seconds + seconds(),
_f, args, kw,
+                              
self._pendingTimedCalls.remove,
+                               self._resetCallLater)
+            insort(self._pendingTimedCalls, tple)
+        else:
+            tple = DelayedCall(0, _f, args, kw,
+                              
self._pendingTimedCalls.remove,
+                               self._resetCallLater)
+            self._pendingTimedCalls.append(tple)
         return tple

     def _resetCallLater(self, tple):
@@ -415,9 +421,13 @@
                     log.err()
                 count += 1
             del self.threadCallQueue[:count]
+        if not self._pendingTimedCalls:
+            return
         now = seconds()
+        do=[]
         while self._pendingTimedCalls and
(self._pendingTimedCalls[-1].time <= now):
-            call = self._pendingTimedCalls.pop()
+            do.append(self._pendingTimedCalls.pop())
+        for call in do:
             try:
                 call.called = 1
                 call.func(*call.args, **call.kw)


=====
Bill la Forge
http://www.geocities.com/laforge49/

________________________________________________________________________
Yahoo! India Matrimony: Find your partner online. http://yahoo.shaadi.com/india-matrimony/
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: notes.txt
URL: </pipermail/twisted-python/attachments/20040529/48672ccc/attachment-0002.txt>

From radix at twistedmatrix.com  Sat May 29 09:55:57 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 29 May 2004 11:55:57 -0400
Subject: [Twisted-Python] oh
In-Reply-To: <E1BU2TY-0008My-00@pyramid.twistedmatrix.com>
References: <E1BU2TY-0008My-00@pyramid.twistedmatrix.com>
Message-ID: <40B8B28D.10805@twistedmatrix.com>

glyph at twistedmatrix.com wrote:
> did you sent it to me?

What you say !!!

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040529/e26d3b9c/attachment.sig>

From cmg at dok.org  Sat May 29 10:16:40 2004
From: cmg at dok.org (Chris Green)
Date: Sat, 29 May 2004 12:16:40 -0400
Subject: [Twisted-Python] Re: What does the LGPL mean in terms of python?
References: <m2pt8oh3o5.fsf@catbert.dok.org>
	<1085770088.11747.47.camel@kazekage> <m28yfcgy6h.fsf@catbert.dok.org>
	<1085773078.4118.7.camel@kazekage>
Message-ID: <m2wu2vfbtj.fsf@catbert.dok.org>

Glyph Lefkowitz <glyph at divmod.com> writes:

>> You now have 14 minutes to reach minimum safe distance.
>
> And how far away is that!??

That was the message from a MacGuyver episode where a nuclear reactor
was undergoing meltdown so I'll say further than a stone's throw :)

-- 
Chris Green <cmg at dok.org>
Let not the sands of time get in your lunch.




From glyph at divmod.com  Sat May 29 13:36:51 2004
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Sat, 29 May 2004 15:36:51 -0400
Subject: [Twisted-Python] oh
In-Reply-To: <40B8B28D.10805@twistedmatrix.com>
References: <E1BU2TY-0008My-00@pyramid.twistedmatrix.com>
	<40B8B28D.10805@twistedmatrix.com>
Message-ID: <1085859411.5815.6.camel@kazekage>

On Sat, 2004-05-29 at 11:55, Christopher Armstrong wrote:
> glyph at twistedmatrix.com wrote:
> > did you sent it to me?
> 
> What you say !!!

Check the headers on that message - I never sent anything like that
anywhere, let alone to twisted-python, and I don't see your in-reply-to
message on the list. (I bet it has a .pif or .scr attachment, huh?)




From radix at twistedmatrix.com  Sat May 29 15:12:59 2004
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 29 May 2004 17:12:59 -0400
Subject: [Twisted-Python] oh
In-Reply-To: <1085859411.5815.6.camel@kazekage>
References: <E1BU2TY-0008My-00@pyramid.twistedmatrix.com>	<40B8B28D.10805@twistedmatrix.com>
	<1085859411.5815.6.camel@kazekage>
Message-ID: <40B8FCDB.9030209@twistedmatrix.com>

Glyph Lefkowitz wrote:
> On Sat, 2004-05-29 at 11:55, Christopher Armstrong wrote:
> 
>>glyph at twistedmatrix.com wrote:
>>
>>>did you sent it to me?
>>
>>What you say !!!
> 
> 
> Check the headers on that message - I never sent anything like that
> anywhere, let alone to twisted-python, and I don't see your in-reply-to
> message on the list. (I bet it has a .pif or .scr attachment, huh?)

Yeah, it did, it was obviously a forged trojan or whatever.

-- 
  Twisted | Christopher Armstrong: International Man of Twistery
   Radix  |          Release Manager,  Twisted Project
---------+           http://radix.twistedmatrix.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 256 bytes
Desc: OpenPGP digital signature
URL: </pipermail/twisted-python/attachments/20040529/e5441598/attachment.sig>

From laforge49 at yahoo.co.in  Sun May 30 05:03:10 2004
From: laforge49 at yahoo.co.in (=?iso-8859-1?q?Bill=20la=20Forge?=)
Date: Sun, 30 May 2004 12:03:10 +0100 (BST)
Subject: [Twisted-Python] can you use log on a service thread
Message-ID: <20040530110310.32687.qmail@web8307.mail.in.yahoo.com>

Can you log from a service thread?

I looked at log and didn't see any thread locking or
anything, except for the following:

    threadable.synchronize(LogPublisher)
    threadable.whenThreaded(initThreads)

Is logging thread safe? There seems to be a lot of 
magic here.

=====
Bill la Forge
http://www.geocities.com/laforge49/

________________________________________________________________________
Yahoo! India Matrimony: Find your partner online. http://yahoo.shaadi.com/india-matrimony/



From itamar at itamarst.org  Sun May 30 19:47:44 2004
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 30 May 2004 21:47:44 -0400
Subject: [Twisted-Python] can you use log on a service thread
In-Reply-To: <20040530110310.32687.qmail@web8307.mail.in.yahoo.com>
References: <20040530110310.32687.qmail@web8307.mail.in.yahoo.com>
Message-ID: <1085968064.4046.1.camel@sheriffpony>

On Sun, 2004-05-30 at 07:03, Bill la Forge wrote:

> Is logging thread safe? There seems to be a lot of 
> magic here.

Log observers get called in the thread that calls log.msg(). That is all
there is to it. If you want to make sure observers always run in reactor
thread, you can:

yourObserver = lambda **kwargs: reactor.callFromThread(yourObserver,
**kwargs)

before registering it, or something to that effect.

-- 
Itamar Shtull-Trauring    http://itamarst.org





From mlist at asesoft.ro  Mon May 31 04:13:10 2004
From: mlist at asesoft.ro (MailingList)
Date: Mon, 31 May 2004 13:13:10 +0300
Subject: [Twisted-Python] (no subject)
Message-ID: <076101c446f7$e0236920$7560a8c0@asesoft.intl>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20040531/3c8066d6/attachment.html>

