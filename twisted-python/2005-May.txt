From anthony at interlink.com.au  Sun May  1 04:46:46 2005
From: anthony at interlink.com.au (Anthony Baxter)
Date: Sun, 1 May 2005 18:46:46 +1000
Subject: [Twisted-Python] dbus + twisted
Message-ID: <200505011846.47927.anthony@interlink.com.au>

So it turns out that the python dbus bindings just use glib - this means
that if you're using gtk2reactor, you can use dbus and it all Just Works. 

This is very cool. It would be nice if there was a way to say (in dbus) 
"Give me any pending event" in a non-blocking way -- we could then 
write something similar to the current wxsupport module and use dbus
from any reactor. I'm not sure that this would be all that easy, as 
dbus supplies bindings to other event loops rather than to the raw 
network layer - but it's something that's probably worth looking into 
further...

Expect to see shtoom getting all dbussed up in the near future. ;)

Anthony
-- 
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From anthony at interlink.com.au  Sun May  1 09:22:05 2005
From: anthony at interlink.com.au (Anthony Baxter)
Date: Sun, 1 May 2005 23:22:05 +1000
Subject: [Twisted-Python] dbus + twisted
In-Reply-To: <200505011846.47927.anthony@interlink.com.au>
References: <200505011846.47927.anthony@interlink.com.au>
Message-ID: <200505012322.06763.anthony@interlink.com.au>

On Sunday 01 May 2005 18:46, Anthony Baxter wrote:
> So it turns out that the python dbus bindings just use glib - this means
> that if you're using gtk2reactor, you can use dbus and it all Just Works.

Hm. I spoke too soon. The server-side of it works fine (having code called
from dbus), but the client-side still needs work to make it work correctly 
with Twisted. Working on it...

Anthony
-- 
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From anthony at interlink.com.au  Mon May  2 08:56:17 2005
From: anthony at interlink.com.au (Anthony Baxter)
Date: Mon, 2 May 2005 22:56:17 +1000
Subject: [Twisted-Python] dbus + twisted
In-Reply-To: <200505012322.06763.anthony@interlink.com.au>
References: <200505011846.47927.anthony@interlink.com.au>
	<200505012322.06763.anthony@interlink.com.au>
Message-ID: <200505022256.17537.anthony@interlink.com.au>


So I've got a version of the client-side that seems to work fine checked into 
the sandbox/anthony/dbus directory. It's a bit messier than I'd like because 
of the design of the current bindings for dbus-python - I'll follow up with 
the dbus maintainers to figure out a better way to make it work. There's a
version of the example client and server modified to work with t_i_dbus.py
in the sandbox. Next up: test cases and docs. 

Get it from:
svn://svn.twistedmatrix.com/svn/Twisted/sandbox/anthony/dbus

I'm open to ideas on how to distribute this - as a separate project? It seems
to me like twisted.dbus is one place for it, or else twisted.internet.dbus? 

The code works with dbus-0.33 (the current released version) - dbus in CVS
looks like it's being chopped and changed a lot, so it's quite probably not 
going to work with that.

Also - currently the code will only work under gtk2reactor - the python dbus
bindings use the glib event loop. It would be nice to make the code event loop 
agnostic, but I suspect that would involve a whole pile of new code. 

Comments, bug reports, &c welcome. 
-- 
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From carolinaardohain at gmail.com  Mon May  2 10:43:05 2005
From: carolinaardohain at gmail.com (Carolina Ardohain)
Date: Mon, 2 May 2005 11:43:05 -0300
Subject: [Twisted-Python] Closing Jabber connection
Message-ID: <8ecf09605050207436633f5c3@mail.gmail.com>

I try to launch several jabber connections (BTW I use twisted 1.3).
When the login is successful there's no problem, but whe the password
is wrong I wanna to disconnect, I call connector.disconnect() but the
event client.BasicAuthenticator.AUTH_FAILED_EVENT keep calling again
and again. How I should close the connection so that event don't be
called anymore?

from twisted.protocols import jabber, xmlstream 
from twisted.protocols.jabber import client, jid
from twisted.internet import reactor, defer

class Connection:
    def __init__(self, who, myjid):
        self.jid = jid.JID(myjid)
        self.who = who

    def connect(self, passwd, port=5222):
        self.factory = client.basicClientFactory(self.jid, passwd)
        
        self.factory.addBootstrap(xmlstream.STREAM_AUTHD_EVENT,
self.onAuthSuccess)
        self.factory.addBootstrap(client.BasicAuthenticator.AUTH_FAILED_EVENT,
self.onAuthFailed)
        
        self.connector = reactor.connectTCP(self.jid.host, port, self.factory)
    
    def onAuthSuccess(self, stream):
        print "%s: Successful connection" % (self.who)
        self.stream = stream

    def onAuthFailed(self, stream):
        print "%s: Failed connection" % (self.who)
        self.connector.disconnect()

c1 = Connection('1', 'client1 at localhost/res1')
c2 = Connection('2', 'client2 at localhost/res1')
c1.connect('client1')
c2.connect('client22')

reactor.run()


The output is ('2' has wrong password)

1: Successful connection
2: Failed connection
2: Failed connection
2: Failed connection
2: Failed connection
....
2: Failed connection



From jmonteath at dkp.com  Mon May  2 13:34:43 2005
From: jmonteath at dkp.com (James Monteath)
Date: Mon, 02 May 2005 13:34:43 -0400
Subject: [Twisted-Python] Newbie reactor.crash()/reactor.stop() question
In-Reply-To: <20050430160122.15422.1513488416.divmod.quotient.10014@ohm>
References: <20050430160122.15422.1513488416.divmod.quotient.10014@ohm>
Message-ID: <427664B3.9060106@dkp.com>

Hi,

I have the exact same problem.  I am using the standard unittest, not 
the one found in Twisted, for the moment anyway.

All my tests work perfectly while using Twisted 1.3, calling 
reactor.crash() vs reactor.stop().  I originally had problems calling 
reactor. stop() with the python unittest framework, until I switched 
over to reactor.crash(). 

I then wanted to run the tests using Twisted 2.0.  The python process 
that starts the unittest will hang after all tests are done.   I can't 
kill the process using a CTRL-C at the command line and must use the 
kill -9 command.

Also, I noticed that the main part of the program does execute the last 
print statement found at:

if __name__ == "__main__":
    run()
    print( "This will print and then hang" )


The following is a bug that had similar behavior, which **may** explain 
the source of the issue:

http://twistedmatrix.com/bugs/issue994

I am using python 2.3.4 on SUSE 9.2,  and also new to Twisted...

James.



glyph at divmod.com wrote:

>
>
> On Sat, 30 Apr 2005 11:16:19 -0400, T Barket <thomas_barket at yahoo.com> 
> wrote:
>
>> Hello,
>
>
>> i have read i cannot stop and restart a reactor (which is what i 
>> would like
>> to do on the client side).
>
>
> It sounds like you may have found a bug (I'll look into it) but...
>
> If you want to use the reactor interactively, look into the various 
> incarnations of Manhole.  Stopping the reactor and starting it again 
> has lots of ugly side-effects which are hard to explain until you've 
> had a lot of experience working with the reactor the "right" way.
>
> (If you absolutely need it, of course, it should work, and we'll fix 
> it - but it's extremely rare that people actually need it, and pretty 
> common that people *think* they need it.)
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050502/b183adec/attachment.htm 

From corydodt at twistedmatrix.com  Mon May  2 14:49:27 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Mon, 02 May 2005 10:49:27 -0800
Subject: [Twisted-Python] Another win32 installer release
Message-ID: <42767637.5080909@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

As usual, they're here.  As usual, this is based on OFFICIAL, RELEASED
Twisted 2.0.0 but the *installers themselves* are considered RC's.

This fixes issue 991.  It also fixes issue 996 for Windows.  (Issue 996
pertains to other platforms as well.)

http://twisted.sf.net/Twisted_NoDocs-2.0.0.win32(installer-rc4)-py2.4.exe
http://twisted.sf.net/Twisted_NoDocs-2.0.0.win32(installer-rc4)-py2.3.exe

C

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.5 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFCdnVS3A5SrXAiHQcRAlVoAKCCbL5jqhNkceTkTRDrOZOS7ca0/QCgpgjo
oqUbR6/dFtdiTpxymCjOw4o=
=ebHv
-----END PGP SIGNATURE-----



From bear at code-bear.com  Mon May  2 14:22:30 2005
From: bear at code-bear.com (Mike Taylor)
Date: Mon, 2 May 2005 14:22:30 -0400
Subject: [Twisted-Python] Another win32 installer release
In-Reply-To: <42767637.5080909@twistedmatrix.com>
References: <42767637.5080909@twistedmatrix.com>
Message-ID: <9792e41ef41ab66c7f8782736fc19be3@code-bear.com>

I tested the python 2.4 installer and confirmed that issue 991 is fixed  
- thanks!

---
Bear
http://code-bear.com

Open Source Applications Foundation (OSAF)
http://www.osafoundation.org

PGP Fingerprint = 9996 719F 973D B11B E111  D770 9331 E822 40B3 CD29


On May 2, 2005, at 2:49 PM, Cory Dodt wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> As usual, they're here.  As usual, this is based on OFFICIAL, RELEASED
> Twisted 2.0.0 but the *installers themselves* are considered RC's.
>
> This fixes issue 991.  It also fixes issue 996 for Windows.  (Issue 996
> pertains to other platforms as well.)
>
> http://twisted.sf.net/Twisted_NoDocs-2.0.0.win32(installer-rc4)- 
> py2.4.exe
> http://twisted.sf.net/Twisted_NoDocs-2.0.0.win32(installer-rc4)- 
> py2.3.exe
>
> C
>
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.5 (MingW32)
> Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org
>
> iD8DBQFCdnVS3A5SrXAiHQcRAlVoAKCCbL5jqhNkceTkTRDrOZOS7ca0/QCgpgjo
> oqUbR6/dFtdiTpxymCjOw4o=
> =ebHv
> -----END PGP SIGNATURE-----
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050502/79a2f09b/attachment.pgp 

From jarrod.roberson at gmail.com  Mon May  2 20:24:40 2005
From: jarrod.roberson at gmail.com (jarrod roberson)
Date: Mon, 2 May 2005 20:24:40 -0400
Subject: [Twisted-Python] blocking and threads
In-Reply-To: <20050427142447.15422.447243835.divmod.quotient.3579@ohm>
References: <20050427140715.15292.qmail@web53101.mail.yahoo.com>
	<20050427142447.15422.447243835.divmod.quotient.3579@ohm>
Message-ID: <2389d47305050217247647bb9@mail.gmail.com>

On 4/27/05, Jp Calderone <exarkun at divmod.com> wrote:
> 
> 
> 
> For many projects, asynchronous disk file i/o isn't actually that 
> important. They either only do a little bit of it, or they can fragment it 
> over multiple reactor iterations manually without too much effort. 



can you explain the "fragement it over multiple reactor itertations" please?

I actually have a project that it is very import and we are trying to figure 
out the best way to do this type of thing
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050502/dfb7356b/attachment.htm 

From naewe.s at atlas.de  Tue May  3 03:42:13 2005
From: naewe.s at atlas.de (=?ISO-8859-15?Q?Stefan_N=E4we?=)
Date: Tue, 03 May 2005 09:42:13 +0200
Subject: [Twisted-Python] Q about handling CTRL-C correctly
Message-ID: <42772B55.8040709@atlas.de>

Hi.
I'm new to twisted.
I'm trying to create a simple twisted server that sends some telegrams
(created with struct.pack()) every second to the connected clients.
Attached is what I came up with so far.

My problem is, that I don't know how to handle CTRL-C correctly. If
I run my test server and press CTRL-C while a client is connected I get
something like:


2005/05/03 09:23     [__main__.SimpleFactory] Received SIGINT, shutting
down.


and that's it. The server simply keeps running. But I want it to
shutdown. I hope someone can help me.

Thanks

Stefan
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: test_twisted.py
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050503/1f828e97/attachment.txt 

From twisted at ralphm.ik.nu  Tue May  3 06:56:35 2005
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Tue, 3 May 2005 12:56:35 +0200
Subject: [Twisted-Python] Closing Jabber connection
In-Reply-To: <8ecf09605050207436633f5c3@mail.gmail.com>
References: <8ecf09605050207436633f5c3@mail.gmail.com>
Message-ID: <20050503105635.GA81824@ik.nu>

On Mon, May 02, 2005 at 11:43:05AM -0300, Carolina Ardohain wrote:
> I try to launch several jabber connections (BTW I use twisted 1.3).
> When the login is successful there's no problem, but whe the password
> is wrong I wanna to disconnect, I call connector.disconnect() but the
> event client.BasicAuthenticator.AUTH_FAILED_EVENT keep calling again
> and again. How I should close the connection so that event don't be
> called anymore?

Calling connector.disconnect() will only close the current connection.
Since the factory returned by client.basicClientFactory is derived from
twisted.internet.protocol.ReconnectingClientFactory, it will happily
retry connecting unless you tell it not to.

Solution: in onAuthFailed(), call self.factory.stopTrying().

By the way, as maintainer of the Jabber stuff in Twisted I can say that
there a fair number of issues in the twisted 1.3 implementation. All of
them have all been resolved in 2.0, and I strongly recommend you to
migrate your work to this.

-- 
Groetjes,

ralphm



From tim at se.linux.org  Tue May  3 07:14:43 2005
From: tim at se.linux.org (=?iso-8859-1?Q?Tim_Terleg=E5rd?=)
Date: Tue, 3 May 2005 13:14:43 +0200 (CEST)
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <20050503105635.GA81824@ik.nu>
Message-ID: <Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>

> By the way, as maintainer of the Jabber stuff in Twisted I can say that
> there a fair number of issues in the twisted 1.3 implementation. All of
> them have all been resolved in 2.0, and I strongly recommend you to
> migrate your work to this.

What are the (short-term and long-term) plans for this Jabber
implementation? Full jabber implementation? Implement as many JEPs as
possible?

Tim




From twisted at ralphm.ik.nu  Tue May  3 07:39:42 2005
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Tue, 3 May 2005 13:39:42 +0200
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>
References: <20050503105635.GA81824@ik.nu>
	<Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>
Message-ID: <20050503113942.GA82735@ik.nu>

On Tue, May 03, 2005 at 01:14:43PM +0200, Tim Terleg?rd wrote:
> > By the way, as maintainer of the Jabber stuff in Twisted I can say that
> > there a fair number of issues in the twisted 1.3 implementation. All of
> > them have all been resolved in 2.0, and I strongly recommend you to
> > migrate your work to this.
> 
> What are the (short-term and long-term) plans for this Jabber
> implementation? Full jabber implementation? Implement as many JEPs as
> possible?

Well, my first goal was to make sure the existing stuff works correctly.
An example is having a good stringprep implementation for JIDs.  This is
mostly done now.

The currently available code is usable to base any application on, but
everything deals in domish Element objects. There are no higher level
abstractions, yet, but some developers like it that way.

There is no real plan on how to proceed, also because I have no idea of
what is desired. So, any suggestions are welcome. Also, I am a bit
curious about what the Jabber support in Twisted is currently used for.
My current development efforts revolve around Idavoll (a generic publish
subscribe component following JEP-0060) and Mim?r (a Jabber enabled news
service).

-- 
Groetjes,

ralphm



From christopher.zorn at gmail.com  Tue May  3 08:49:17 2005
From: christopher.zorn at gmail.com (Christopher Zorn)
Date: Tue, 3 May 2005 08:49:17 -0400
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <20050503113942.GA82735@ik.nu>
References: <20050503105635.GA81824@ik.nu>
	<Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>
	<20050503113942.GA82735@ik.nu>
Message-ID: <149014b905050305495094e492@mail.gmail.com>

On 5/3/05, Ralph Meijer <twisted at ralphm.ik.nu> wrote:
> On Tue, May 03, 2005 at 01:14:43PM +0200, Tim Terleg?rd wrote:
> > > By the way, as maintainer of the Jabber stuff in Twisted I can say that
> > > there a fair number of issues in the twisted 1.3 implementation. All of
> > > them have all been resolved in 2.0, and I strongly recommend you to
> > > migrate your work to this.
> >
> > What are the (short-term and long-term) plans for this Jabber
> > implementation? Full jabber implementation? Implement as many JEPs as
> > possible?
> 
> Well, my first goal was to make sure the existing stuff works correctly.
> An example is having a good stringprep implementation for JIDs.  This is
> mostly done now.
> 
> The currently available code is usable to base any application on, but
> everything deals in domish Element objects. There are no higher level
> abstractions, yet, but some developers like it that way.
> 
> There is no real plan on how to proceed, also because I have no idea of
> what is desired. So, any suggestions are welcome. Also, I am a bit
> curious about what the Jabber support in Twisted is currently used for.
> My current development efforts revolve around Idavoll (a generic publish
> subscribe component following JEP-0060) and Mim?r (a Jabber enabled news
> service).
> 

I use it for various small projects, mostly bots and components. I
also use it for
punjab ( http://punjab.sf.net ). I would like to see other JEPS (muc
would be cool), maybe some server stuff, and an authenticator with
sasl. I may make an attempt with some of this stuff. I will submit
what I do to the list. Is that ok?


> --
> Groetjes,
> 
> ralphm
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From foom at fuhm.net  Tue May  3 10:11:36 2005
From: foom at fuhm.net (James Y Knight)
Date: Tue, 3 May 2005 10:11:36 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <76e33b8ec40fe63d6e5595971c19cfdd@fuhm.net>

Bug summary
______________________
Since 2005-04-25 14:26:00.540000:
  Bugs opened: 11   Bugs closed: 7   Total open bugs: 350 (+4)
   Urgent: 7 (+1)
   Bug: 137 (+2)
   Feature: 136 (+1)
   Wish: 70 (+0)

New / Reopened Bugs
______________________
                     ==== Urgent ====
[RELEASE MANAGEMENT] release 2.0.1  (4 days ago)
        http://twistedmatrix.com/bugs/issue1007 opened by jknight

ProtocolWrapper's behavior is unspecified  (6 days ago)
        http://twistedmatrix.com/bugs/issue1004 opened by exarkun

                     ==== Bug ====
twisted.news.news  (3 hours ago)
        http://twistedmatrix.com/bugs/issue1012 opened by manlio

[WEB] Missing return in HTTPPageGetter.handleStatus_301()?  (3 hours 
ago)
        http://twistedmatrix.com/bugs/issue1011 opened by jojo

[DEFERRED, DOCUMENTATION] Document defgen  (3 days ago)
        http://twistedmatrix.com/bugs/issue1009 opened by hypatia

[PB] CopiedFailure printTraceback method signature doesn't match 
Failure's  (4 days ago)
        http://twistedmatrix.com/bugs/issue1006 opened by micktwomey

[TRIAL] Trial sucks and is broken  (5 days ago)
        http://twistedmatrix.com/bugs/issue1005 opened by exarkun

[FTP] [PATCH] twisted.protocols.ftp enchanements  (7 days ago)
        http://twistedmatrix.com/bugs/issue1003 opened by mkerrin

                     ==== Feature ====
[WEB] Be more failure tolerant in HTTPClient.lineReceived?  (3 hours 
ago)
        http://twistedmatrix.com/bugs/issue1010 opened by jojo

[ENTERPRISE] Add runWithConnection to adbapi.ConnectionPool  (3 weeks 
ago)
CLOSED http://twistedmatrix.com/bugs/issue975 opened by mg

                     ==== Wish ====
[WIN32] Implement spawnProcess for IOCP reactor  (3 days ago)
        http://twistedmatrix.com/bugs/issue1008 opened by justinj

Bugs Closed
______________________
                     ==== Urgent ====
[XISH] Erroneous .encode('utf-8') in twisted.xish.domish  (1 week ago)
        http://twistedmatrix.com/bugs/issue1002 opened by ralphm, closed 
by ralphm

                     ==== Bug ====
[CORE, WIN32] twistenv.bat doesn't correctly set PATHEXT  (2 weeks ago)
        http://twistedmatrix.com/bugs/issue991 opened by exarkun, closed 
by moonfallen

[RELEASE MANAGEMENT] Better error message when missing twisted package  
(1 month ago)
        http://twistedmatrix.com/bugs/issue953 opened by ianb, closed by 
exarkun

[TRIAL] [TEST] setUpClass run even if class set to skip  (4 months ago)
        http://twistedmatrix.com/bugs/issue831 opened by exarkun, closed 
by exarkun

[TRIAL] when two test modules have the same classname, class name isn't 
reported second time  (4 months ago)
        http://twistedmatrix.com/bugs/issue832 opened by radix, closed 
by exarkun

                     ==== Feature ====
[ENTERPRISE] Add runWithConnection to adbapi.ConnectionPool  (3 weeks 
ago)
        http://twistedmatrix.com/bugs/issue975 opened by mg, closed by 
davep

                     ==== Wish ====
[PB] [PATCH] Return PB Exceptions that have registered unjellyable  (4 
months ago)
        http://twistedmatrix.com/bugs/issue844 opened by justinj, closed 
by exarkun




From projects at reedflute.com  Tue May  3 12:07:07 2005
From: projects at reedflute.com (Eugene Coetzee)
Date: Tue, 03 May 2005 18:07:07 +0200
Subject: [Twisted-Python] blocking and threads
In-Reply-To: <2389d47305050217247647bb9@mail.gmail.com>
References: <20050427140715.15292.qmail@web53101.mail.yahoo.com>	<20050427142447.15422.447243835.divmod.quotient.3579@ohm>
	<2389d47305050217247647bb9@mail.gmail.com>
Message-ID: <4277A1AB.6090406@reedflute.com>

jarrod roberson wrote:

>
>
> On 4/27/05, *Jp Calderone* <exarkun at divmod.com 
> <mailto:exarkun at divmod.com>> wrote:
>
>
>
>       For many projects, asynchronous disk file i/o isn't actually
>     that important.  They either only do a little bit of it, or they
>     can fragment it over multiple reactor iterations manually without
>     too much effort.  
>
>
>
> can you explain the "fragement it over multiple reactor itertations" 
> please?
>
see if this thread is helpful:

http://twistedmatrix.com/pipermail/twisted-python/2005-March/009950.html

I'm using this technique which boils down to reactor.callLater(0, 
recursive_function, args)

I also tried reactor.iterate()

(http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReactorCore.html#iterate 
)

- although this prevented blocking for some reason it had some 
undesirable side effects with my app.

regards,

Eugene Coetzee
 

-- 
--
===============================================
Reedflute Software Solutions

Telephone           -> +27 18 293 3236
General information -> info at reedflute.com
Project information -> projects at reedflute.com
Web                 -> www.reedflute.com
=============================================== 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050503/407fa384/attachment.htm 

From itamar at itamarst.org  Tue May  3 12:44:29 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 03 May 2005 12:44:29 -0400
Subject: [Twisted-Python] blocking and threads
In-Reply-To: <4277A1AB.6090406@reedflute.com>
References: <20050427140715.15292.qmail@web53101.mail.yahoo.com>
	<20050427142447.15422.447243835.divmod.quotient.3579@ohm>
	<2389d47305050217247647bb9@mail.gmail.com>
	<4277A1AB.6090406@reedflute.com>
Message-ID: <1115138670.8753.36.camel@localhost.localdomain>

On Tue, 2005-05-03 at 18:07 +0200, Eugene Coetzee wrote:

> I also tried reactor.iterate() 
> 
> (http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReactorCore.html#iterate )

Don't do that, reactor.iterate() is not something Twisted applications
should use.




From carolinaardohain at gmail.com  Tue May  3 13:21:08 2005
From: carolinaardohain at gmail.com (Carolina Ardohain)
Date: Tue, 3 May 2005 14:21:08 -0300
Subject: [Twisted-Python] Closing Jabber connection
In-Reply-To: <20050503105635.GA81824@ik.nu>
References: <8ecf09605050207436633f5c3@mail.gmail.com>
	<20050503105635.GA81824@ik.nu>
Message-ID: <8ecf096050503102110437542@mail.gmail.com>

Thank you.

> 
> Calling connector.disconnect() will only close the current connection.
> Since the factory returned by client.basicClientFactory is derived from
> twisted.internet.protocol.ReconnectingClientFactory, it will happily
> retry connecting unless you tell it not to.
> 
> Solution: in onAuthFailed(), call self.factory.stopTrying().
> 
> By the way, as maintainer of the Jabber stuff in Twisted I can say that
> there a fair number of issues in the twisted 1.3 implementation. All of
> them have all been resolved in 2.0, and I strongly recommend you to
> migrate your work to this.
> 
> --
> Groetjes,
> 
> ralphm
>



From stpeter at jabber.org  Tue May  3 14:21:04 2005
From: stpeter at jabber.org (Peter Saint-Andre)
Date: Tue, 3 May 2005 13:21:04 -0500
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <149014b905050305495094e492@mail.gmail.com>
References: <20050503105635.GA81824@ik.nu>
	<Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>
	<20050503113942.GA82735@ik.nu>
	<149014b905050305495094e492@mail.gmail.com>
Message-ID: <20050503182104.GD5579@jabber.org>

On Tue, May 03, 2005 at 08:49:17AM -0400, Christopher Zorn wrote:
> On 5/3/05, Ralph Meijer <twisted at ralphm.ik.nu> wrote:
> > On Tue, May 03, 2005 at 01:14:43PM +0200, Tim Terleg?rd wrote:
> >
> > > What are the (short-term and long-term) plans for this Jabber
> > > implementation? Full jabber implementation? Implement as many JEPs as
> > > possible?
> > 
> > There is no real plan on how to proceed, also because I have no idea of
> > what is desired. So, any suggestions are welcome. Also, I am a bit
> > curious about what the Jabber support in Twisted is currently used for.
> > My current development efforts revolve around Idavoll (a generic publish
> > subscribe component following JEP-0060) and Mim?r (a Jabber enabled news
> > service).
> 
> I use it for various small projects, mostly bots and components. I
> also use it for
> punjab ( http://punjab.sf.net ). I would like to see other JEPS (muc
> would be cool), maybe some server stuff, and an authenticator with
> sasl. I may make an attempt with some of this stuff. I will submit
> what I do to the list. Is that ok?

I think it would be good to clarify the overall objective. Lots of folks
are interested in building a full reference implementation of the XMPP
RFCs and various JEPs (probably those which have reached Draft in the
JSF's standards process) in Python, but that seems like a major server
effort rather than something which would necessarily go into Twisted.
But perhaps I'm wrong about that. ;-)

Peter




From glyph at divmod.com  Tue May  3 15:07:20 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Tue, 03 May 2005 15:07:20 -0400
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <20050503182104.GD5579@jabber.org>
References: <20050503105635.GA81824@ik.nu>	<Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>	<20050503113942.GA82735@ik.nu>	<149014b905050305495094e492@mail.gmail.com>
	<20050503182104.GD5579@jabber.org>
Message-ID: <4277CBE8.4090409@divmod.com>

Peter Saint-Andre wrote:

> I think it would be good to clarify the overall objective. Lots of folks
> are interested in building a full reference implementation of the XMPP
> RFCs and various JEPs (probably those which have reached Draft in the
> JSF's standards process) in Python, but that seems like a major server
> effort rather than something which would necessarily go into Twisted.
> But perhaps I'm wrong about that. ;-)

Twisted _is_ a major server effort.  What did you think it was? :)

Seriously though, I would like to see more stuff like this go into 
Twisted if possible.  The more functionality is built into the core, the 
more consistent that functionality will become over time, and the more 
different kinds of applications can access it.




From itamar at itamarst.org  Tue May  3 15:24:15 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 03 May 2005 15:24:15 -0400
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <4277CBE8.4090409@divmod.com>
References: <20050503105635.GA81824@ik.nu>
	<Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>
	<20050503113942.GA82735@ik.nu>	<149014b905050305495094e492@mail.gmail.com>
	<20050503182104.GD5579@jabber.org>  <4277CBE8.4090409@divmod.com>
Message-ID: <1115148255.8753.58.camel@localhost.localdomain>

On Tue, 2005-05-03 at 15:07 -0400, Glyph Lefkowitz wrote:

> Seriously though, I would like to see more stuff like this go into 
> Twisted if possible.  The more functionality is built into the core, the 
> more consistent that functionality will become over time, and the more 
> different kinds of applications can access it.

Plus these days it's no longer "the core", it's "the Twisted
chat/messaging project."




From stpeter at jabber.org  Tue May  3 16:17:34 2005
From: stpeter at jabber.org (Peter Saint-Andre)
Date: Tue, 3 May 2005 15:17:34 -0500
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <4277CBE8.4090409@divmod.com>
References: <20050503105635.GA81824@ik.nu>
	<Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>
	<20050503113942.GA82735@ik.nu>
	<149014b905050305495094e492@mail.gmail.com>
	<20050503182104.GD5579@jabber.org> <4277CBE8.4090409@divmod.com>
Message-ID: <20050503201734.GH5579@jabber.org>

On Tue, May 03, 2005 at 03:07:20PM -0400, Glyph Lefkowitz wrote:
> Peter Saint-Andre wrote:
> 
> >I think it would be good to clarify the overall objective. Lots of folks
> >are interested in building a full reference implementation of the XMPP
> >RFCs and various JEPs (probably those which have reached Draft in the
> >JSF's standards process) in Python, but that seems like a major server
> >effort rather than something which would necessarily go into Twisted.
> >But perhaps I'm wrong about that. ;-)
> 
> Twisted _is_ a major server effort.  What did you think it was? :)
> 
> Seriously though, I would like to see more stuff like this go into 
> Twisted if possible.  The more functionality is built into the core, the 
> more consistent that functionality will become over time, and the more 
> different kinds of applications can access it.

Well, perhaps I've always misunderstood what Twisted is all about. 
From my perspective it's always seemed like an interconnected set 
of libraries, not a dedicated HTTP serverr or XMPP server or IRC 
server or whatever. (Yes, I know it does all of those and more.)
So I thought that we'd build Jabber/XMPP support into some core 
level and then someone would come along and build a full-fledged
Jabber server on top of that in a separate effort.

Now it seems that Twisted Words is an effort to build a generic 
chat server of some kind, but I've not seen a roadmap for that,
and it's not clear to me what it means to build a generic chat
server. I know what it means to build a Jabber/XMPP server, and
what it means to build an IRC server. But as far as I know there
is no such thing as the "generic chat" protocol. :-) So will Words
implement, say, the IRC RFCs and the XMPP RFCs and various XMPP
extensions (defined in JEPs published by the JSF) and also SIP
and SIMPLE and some less-open chat protocols such as Oscar, MSN, 
etc.? If so, how is all that stuff supposed to work together?

Just curious. ;-)

As I said, I know of several folks in the Jabber community who
are quite interested in building a reference XMPP/Jabber server
in Python, and I'm wondering if Words is the place to point them.

Thanks!

Peter




From projects at reedflute.com  Tue May  3 16:51:15 2005
From: projects at reedflute.com (Eugene Coetzee)
Date: Tue, 03 May 2005 22:51:15 +0200
Subject: [Twisted-Python] blocking and threads
In-Reply-To: <1115138670.8753.36.camel@localhost.localdomain>
References: <20050427140715.15292.qmail@web53101.mail.yahoo.com>	<20050427142447.15422.447243835.divmod.quotient.3579@ohm>	<2389d47305050217247647bb9@mail.gmail.com>	<4277A1AB.6090406@reedflute.com>
	<1115138670.8753.36.camel@localhost.localdomain>
Message-ID: <4277E443.6080902@reedflute.com>

Itamar Shtull-Trauring wrote:

>On Tue, 2005-05-03 at 18:07 +0200, Eugene Coetzee wrote:
>
>  
>
>>I also tried reactor.iterate() 
>>
>>(http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReactorCore.html#iterate )
>>    
>>
>
>Don't do that, reactor.iterate() is not something Twisted applications
>should use.
>
>  
>
Ok, perhaps that was a bit of wishful thinking :-) 

It would have been kind of neat if one could call something like reactor.yield(thisfunc,delay) from within a time consuming loop instead of the recursive workaround or resorting to a multithreaded approach.



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050503/fcb38af3/attachment.htm 

From twisted at ralphm.ik.nu  Tue May  3 17:54:49 2005
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Tue, 3 May 2005 23:54:49 +0200
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <20050503201734.GH5579@jabber.org>
References: <20050503105635.GA81824@ik.nu>
	<Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>
	<20050503113942.GA82735@ik.nu>
	<149014b905050305495094e492@mail.gmail.com>
	<20050503182104.GD5579@jabber.org> <4277CBE8.4090409@divmod.com>
	<20050503201734.GH5579@jabber.org>
Message-ID: <20050503215449.GA98841@ik.nu>

On Tue, May 03, 2005 at 03:17:34PM -0500, Peter Saint-Andre wrote:
> [..]
>
> As I said, I know of several folks in the Jabber community who
> are quite interested in building a reference XMPP/Jabber server
> in Python, and I'm wondering if Words is the place to point them.

Besides that, one could argue that XMPP/Jabber doesn't belong in Words
alltogether because IM is just one possible use of XMPP/Jabber.

-- 
Groetjes,

ralphm



From glyph at divmod.com  Tue May  3 19:30:19 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Tue, 03 May 2005 19:30:19 -0400
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <20050503215449.GA98841@ik.nu>
References: <20050503105635.GA81824@ik.nu>	<Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>	<20050503113942.GA82735@ik.nu>	<149014b905050305495094e492@mail.gmail.com>	<20050503182104.GD5579@jabber.org>
	<4277CBE8.4090409@divmod.com>	<20050503201734.GH5579@jabber.org>
	<20050503215449.GA98841@ik.nu>
Message-ID: <4278098B.3080702@divmod.com>

Ralph Meijer wrote:
> On Tue, May 03, 2005 at 03:17:34PM -0500, Peter Saint-Andre wrote:
> 
>>[..]
>>
>>As I said, I know of several folks in the Jabber community who
>>are quite interested in building a reference XMPP/Jabber server
>>in Python, and I'm wondering if Words is the place to point them.
> 
> 
> Besides that, one could argue that XMPP/Jabber doesn't belong in Words
> alltogether because IM is just one possible use of XMPP/Jabber.

One could argue that, but one would also be wrong :)

Any protocol can be repurposed.  Just look at some of the ridiculous 
things being done with HTTP that are not at all related to the dubious 
heading of "hypertext", which is what "web" originally meant.  Or, 
consider how many proprietary ad-hoc systems use IRC as a message 
transport or router.  Nevertheless, we classify these protocols 
according to their original intentions; IRC is not going into 
Twisted.ORB any time soon.

Twisted Words is the place in Twisted for soft-real-time messaging 
protocols with human endpoints.  They don't have to be transporting 
plain text, and they don't have to be using TCP (or even IP!).

The ultimate goal is to provide a hub where messages can arrive over one 
protocol and be sent out over another.  That's why the client and server 
halves of the protocols are in the same place, although previous 
projects (gaim, jabber, ircd) have separated these domains with a brick 
wall.  A primary function of a Words server would be to act as a client 
to some other server so that it can provide a more civilized (say, 
Jabber, or Q2Q-Chat) interface to a legacy IRC or OSCAR server.  This 
usually involves  pretending to be at least one client.

This may even include a co-dependency with Twisted Web for, for example, 
routing XMLRPC requests over Jabber into regular HTTP XMLRPC requests. 
However, initially it would be good to just have a multi-protocol 
messaging abstraction available which would allow for that sort of 
application.

I wish I had more time to work on a roadmap but pretty much 150% of my 
time is spoken for right now.  I am probably stealing time from somebody 
just writing this email!  I hope that it has been useful.




From robin at wiretooth.com  Tue May  3 22:35:17 2005
From: robin at wiretooth.com (Robin Bryce)
Date: Wed, 04 May 2005 03:35:17 +0100
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <4278098B.3080702@divmod.com>
References: <20050503105635.GA81824@ik.nu>	<Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>	<20050503113942.GA82735@ik.nu>	<149014b905050305495094e492@mail.gmail.com>	<20050503182104.GD5579@jabber.org>	<4277CBE8.4090409@divmod.com>	<20050503201734.GH5579@jabber.org>	<20050503215449.GA98841@ik.nu>
	<4278098B.3080702@divmod.com>
Message-ID: <427834E5.3000303@wiretooth.com>

> This may even include a co-dependency with Twisted Web for, for
> example, routing XMLRPC requests over Jabber into regular HTTP XMLRPC
> requests. However, initially it would be good to just have a
> multi-protocol messaging abstraction available which would allow for
> that sort of application.

I'm working on an application that would probably benefit from this 
abstraction. An example case from this app is receiving an SMS, via the 
aggregators gateway (clickatell) over http, then forwarding it to 
another "user" via Jabber. Doing this has had me banging on the jabber 
Twisted.Words from the 2.0 release quite a bit.

Not sure if this adds to the conversation but I wanted to say "ooh, I'd 
like some of that please" re Glyphs comments.

Robin

Glyph Lefkowitz wrote:
> Ralph Meijer wrote:
> 
>> On Tue, May 03, 2005 at 03:17:34PM -0500, Peter Saint-Andre wrote:
>>
>>> [..]
>>>
>>> As I said, I know of several folks in the Jabber community who
>>> are quite interested in building a reference XMPP/Jabber server
>>> in Python, and I'm wondering if Words is the place to point them.
>>
>>
>>
>> Besides that, one could argue that XMPP/Jabber doesn't belong in Words
>> alltogether because IM is just one possible use of XMPP/Jabber.
> 
> 
> One could argue that, but one would also be wrong :)
> 
> Any protocol can be repurposed.  Just look at some of the ridiculous 
> things being done with HTTP that are not at all related to the dubious 
> heading of "hypertext", which is what "web" originally meant.  Or, 
> consider how many proprietary ad-hoc systems use IRC as a message 
> transport or router.  Nevertheless, we classify these protocols 
> according to their original intentions; IRC is not going into 
> Twisted.ORB any time soon.
> 
> Twisted Words is the place in Twisted for soft-real-time messaging 
> protocols with human endpoints.  They don't have to be transporting 
> plain text, and they don't have to be using TCP (or even IP!).
> 
> The ultimate goal is to provide a hub where messages can arrive over one 
> protocol and be sent out over another.  That's why the client and server 
> halves of the protocols are in the same place, although previous 
> projects (gaim, jabber, ircd) have separated these domains with a brick 
> wall.  A primary function of a Words server would be to act as a client 
> to some other server so that it can provide a more civilized (say, 
> Jabber, or Q2Q-Chat) interface to a legacy IRC or OSCAR server.  This 
> usually involves  pretending to be at least one client.
> 
> This may even include a co-dependency with Twisted Web for, for example, 
> routing XMLRPC requests over Jabber into regular HTTP XMLRPC requests. 
> However, initially it would be good to just have a multi-protocol 
> messaging abstraction available which would allow for that sort of 
> application.
> 
> I wish I had more time to work on a roadmap but pretty much 150% of my 
> time is spoken for right now.  I am probably stealing time from somebody 
> just writing this email!  I hope that it has been useful.
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From anthony at interlink.com.au  Tue May  3 23:10:04 2005
From: anthony at interlink.com.au (Anthony Baxter)
Date: Wed, 4 May 2005 13:10:04 +1000
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <4278098B.3080702@divmod.com>
References: <20050503105635.GA81824@ik.nu> <20050503215449.GA98841@ik.nu>
	<4278098B.3080702@divmod.com>
Message-ID: <200505041310.05103.anthony@interlink.com.au>

On Wednesday 04 May 2005 09:30, Glyph Lefkowitz wrote:
> > Besides that, one could argue that XMPP/Jabber doesn't belong in Words
> > alltogether because IM is just one possible use of XMPP/Jabber.
>
> One could argue that, but one would also be wrong :)
>
> Any protocol can be repurposed.  

*cough* SIMPLE *cough*

t.p.sip doesn't go into twisted.words, either. 


-- 
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From foom at fuhm.net  Tue May  3 23:47:31 2005
From: foom at fuhm.net (James Y Knight)
Date: Tue, 3 May 2005 23:47:31 -0400
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <200505041310.05103.anthony@interlink.com.au>
References: <20050503105635.GA81824@ik.nu> <20050503215449.GA98841@ik.nu>
	<4278098B.3080702@divmod.com>
	<200505041310.05103.anthony@interlink.com.au>
Message-ID: <2bdd861281b1d643f5ff0a512d79c879@fuhm.net>

On May 3, 2005, at 11:10 PM, Anthony Baxter wrote:
> On Wednesday 04 May 2005 09:30, Glyph Lefkowitz wrote:
>>> Besides that, one could argue that XMPP/Jabber doesn't belong in 
>>> Words
>>> alltogether because IM is just one possible use of XMPP/Jabber.
>>
>> One could argue that, but one would also be wrong :)
>>
>> Any protocol can be repurposed.
>
> *cough* SIMPLE *cough*
>
> t.p.sip doesn't go into twisted.words, either.

Boy am I sorry I looked up SIMPLE. And here I thought SOAP was funny 
for calling itself simple...at least its *name* isn't SIMPLE. What is 
it with these protocols calling themselves "simple"...

James




From anthony at interlink.com.au  Wed May  4 00:18:48 2005
From: anthony at interlink.com.au (Anthony Baxter)
Date: Wed, 4 May 2005 14:18:48 +1000
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <2bdd861281b1d643f5ff0a512d79c879@fuhm.net>
References: <20050503105635.GA81824@ik.nu>
	<200505041310.05103.anthony@interlink.com.au>
	<2bdd861281b1d643f5ff0a512d79c879@fuhm.net>
Message-ID: <200505041418.49361.anthony@interlink.com.au>

On Wednesday 04 May 2005 13:47, James Y Knight wrote:
> Boy am I sorry I looked up SIMPLE. And here I thought SOAP was funny
> for calling itself simple...at least its *name* isn't SIMPLE. What is
> it with these protocols calling themselves "simple"...

SIMPLE is seriously seriously nasty. A worse impedance mismatch I've
not seen in a long time.


-- 
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From glyph at divmod.com  Wed May  4 01:28:36 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 04 May 2005 01:28:36 -0400
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <200505041310.05103.anthony@interlink.com.au>
References: <20050503105635.GA81824@ik.nu> <20050503215449.GA98841@ik.nu>
	<4278098B.3080702@divmod.com>
	<200505041310.05103.anthony@interlink.com.au>
Message-ID: <42785D84.9040407@divmod.com>

Anthony Baxter wrote:
> On Wednesday 04 May 2005 09:30, Glyph Lefkowitz wrote:

>>Any protocol can be repurposed.  

> *cough* SIMPLE *cough*

... OK, so some protocols are repurposed and some have their purpose 
surgically removed ...

> t.p.sip doesn't go into twisted.words, either. 

It doesn't?  Why not?  "Chat" doesn't have to mean "text", does it? ;-)

Seriously though.  NAT traversal code would be welcome in words.  Maybe 
there's a common layer it depends upon?  If it made sense to put SIMPLE 
anywhere in Twisted, it would be in twisted.words.




From anthony at interlink.com.au  Wed May  4 01:51:16 2005
From: anthony at interlink.com.au (Anthony Baxter)
Date: Wed, 4 May 2005 15:51:16 +1000
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <42785D84.9040407@divmod.com>
References: <20050503105635.GA81824@ik.nu>
	<200505041310.05103.anthony@interlink.com.au>
	<42785D84.9040407@divmod.com>
Message-ID: <200505041551.18246.anthony@interlink.com.au>

On Wednesday 04 May 2005 15:28, Glyph Lefkowitz wrote:
> Seriously though.  NAT traversal code would be welcome in words.  Maybe
> there's a common layer it depends upon?  If it made sense to put SIMPLE
> anywhere in Twisted, it would be in twisted.words.

NAT traversal code (STUN, UPnP) would belong in something like 
twisted.internet, or maybe twisted.nat, or 
twisted.whichBitOfEnd2EndDidYouNotUnderstand

It's useful for far more than just chat. 

-- 
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From tv at twistedmatrix.com  Tue May  3 09:21:27 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 03 May 2005 16:21:27 +0300
Subject: [Twisted-Python] Q about handling CTRL-C correctly
In-Reply-To: <42772B55.8040709@atlas.de>
References: <42772B55.8040709@atlas.de>
Message-ID: <42777AD7.7080607@twistedmatrix.com>

Stefan N?we wrote:
> # global flag
> running = True

Get rid of that.

> class SimpleServer(Protocol):
>     def connectionMade(self):
> 		m = self.factory.msg()
> 		while running:
> 			self.transport.write(m.pack())
> 			sys.stderr.write(".")
> 			time.sleep(1)
> 		self.transport.loseConnection()

That's blocking code, right there. Don't use time.sleep with twisted.
See task.LoopingCall and reactor.callLater.



From Orjan.Reinholdsen at smarttrust.com  Wed May  4 04:23:53 2005
From: Orjan.Reinholdsen at smarttrust.com (=?iso-8859-1?Q?=D6rjan_Reinholdsen?=)
Date: Wed, 4 May 2005 10:23:53 +0200
Subject: [Twisted-Python] Issue with stopListening
Message-ID: <4773101DA1AAC7489360BBC1C04F84B90107AEF3@postman.smarttrust.com>

All,

I have written a Twisted server that will be used as a test server to test the client software ability to gracefully handle server shutdown and thereafter reconnect. For that purpose I need my twisted server to periodically stop listening on ports for a while, and then commence normal operation again. For some reason I don't seem to succeede since the twisted server never seems to stop listening on a port even if I call the stopListening method on the IListeningPort object.

Anyone got a clue to what I'm doing wrong?

Regards
/?rjan

----

[...]

ports = [8007,8008,8009]
listenPorts = []
for port in ports:
   print "Listening on port %d" % port
   listenPorts.append(reactor.listenTCP(port, myFactory)) 

length = len(listenPorts)
ptime = 10
dtime = 5

def Down(ticks):
   print "Stop listening on port %d" % ports[ticks%length] 
   listenPorts[ticks%length].stopListening()
   reactor.callLater(dtime, Up, ticks)

def Up(ticks):
   print "Start listening on port %d" % ports[ticks%length]
   listenPorts[ticks%length].startListening()
   reactor.callLater(ptime, Down, ticks+1)

reactor.callLater(ptime, Down, 0)
reactor.run()



From twisted at ralphm.ik.nu  Wed May  4 05:10:59 2005
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Wed, 4 May 2005 11:10:59 +0200
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <4278098B.3080702@divmod.com>
References: <20050503105635.GA81824@ik.nu>
	<Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>
	<20050503113942.GA82735@ik.nu>
	<149014b905050305495094e492@mail.gmail.com>
	<20050503182104.GD5579@jabber.org> <4277CBE8.4090409@divmod.com>
	<20050503201734.GH5579@jabber.org>
	<20050503215449.GA98841@ik.nu> <4278098B.3080702@divmod.com>
Message-ID: <20050504091059.GA11677@ik.nu>

On Tue, May 03, 2005 at 07:30:19PM -0400, Glyph Lefkowitz wrote:
> Ralph Meijer wrote:
> >On Tue, May 03, 2005 at 03:17:34PM -0500, Peter Saint-Andre wrote:
> >
> >>[..]
> >>
> >>As I said, I know of several folks in the Jabber community who
> >>are quite interested in building a reference XMPP/Jabber server
> >>in Python, and I'm wondering if Words is the place to point them.
> >
> >
> >Besides that, one could argue that XMPP/Jabber doesn't belong in Words
> >alltogether because IM is just one possible use of XMPP/Jabber.
> 
> One could argue that, but one would also be wrong :)
> 
> Any protocol can be repurposed.  Just look at some of the ridiculous 
> things being done with HTTP that are not at all related to the dubious 
> heading of "hypertext", which is what "web" originally meant.  Or, 
> consider how many proprietary ad-hoc systems use IRC as a message 
> transport or router.  Nevertheless, we classify these protocols 
> according to their original intentions; IRC is not going into 
> Twisted.ORB any time soon.

I can see your point and understand that people thinking of Jabber
believe it must be in Words, but my initial remark on it not belonging
there has more to do with that most of the current code doesn't belong
where it is now.

Yes, Jabber was originally designed for chat. I'd like to give a little
bit of background to let you see where I'm coming from, and then giving
my view about how the current organisation is not ideal. I hope you'll
forgive me for the length of it.

Since Jabber came to live back in 1999, much has changed. The base
protocols have been revised and transformed into 2 RFCs:

XMPP Core defines all basics about setting up an XML Stream using the
default binding to TCP, channel encryption using TLS, authentication
using SASL, the binding of a so-called 'resource' to a stream, the basic
semantics of XML Stanzas (<message/>, <iq/> and <presence/> in whatever
is the default namespace of the stream), a number of stream and stanza
error conditions and finally the stringprep profiles for Jabber IDs.

XMPP IM defines the core features for implementing Instant Messaging and
Presence applications. This is where the server-to-server namespace and
client-to-server namespace are defined for what is traditionally known
as Jabber, all on top of XMPP Core. It defines what the XML Stanzas in
these namespaces mean exactly and how they should be handled by servers
and clients, what rosters (buddy lists) are and how entities can block
selected communications.

Then, the Jabber Software Foundation (JSF) defines a set of Jabber
Enhancement Proposals. This set of documents, that started long before
the IETF XMPP Workgroup was formed, defines additional protocols and
best-practices on top of Jabber. Some assume XMPP IM as an environment,
some only require XMPP Core. Examples range from multi-user-chat,
sending XHTML messages and doing file transfers (all IM) to more general
protocol additions like service discovery, publish-subscribe and a HTTP
binding for XML Streams (as opposed to TCP).

In Twisted, the current implementation of what is called Jabber is split
between twisted.xish.xmlstream and twisted.words.protocols.jabber. In
xmlstream, the basic concept of an XML stream is covered, and hooks for
doing any kind of stream authentication. Everything else is in the
jabber module.

The jabber module only supports the legacy authentication method (not
XMPP!) for setting up client-to-server connections (client side only),
and there is no support for TLS, SASL or even error conditions. Recently
I did implement XMPP stringprep profiles, though. The client module also
has a raw implementation of abstracting the <iq/> stanza, by allowing
you to wait for the response to a query. Higher level support for the
other two stanzas, roster handling or blocking communication is not
there. There is also a framework for building server-side components,
but that is defined in a JEP, not by XMPP.

My feeling is that the current implementation needs a lot of work, and
I'd like to split that between implementing XMPP Core and XMPP IM. I
could agree that the latter would belong in Words, but the former
doesn't and that means that most of what is currently in Words needs to
go to somewhere else. Maybe that somewhere-else is xish, but I didn't
really like the moving xmlstream there, either. Maybe it'd be good to
have a new twisted subproject XMPP that implements XMPP Core, and moving
xmlstream there.

There is no support for server-to-server connections and the server side
of client-to-server and server component connections, yet. Having that,
would be really great, though.

While writing this, I decided I'd like to work on all this and help is
of course appreciated.

Thanks for your patience,

-- 
Groetjes,

ralphm



From radeex at gmail.com  Wed May  4 06:13:12 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 4 May 2005 20:13:12 +1000
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <20050504091059.GA11677@ik.nu>
References: <20050503105635.GA81824@ik.nu>
	<Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>
	<20050503113942.GA82735@ik.nu>
	<149014b905050305495094e492@mail.gmail.com>
	<20050503182104.GD5579@jabber.org> <4277CBE8.4090409@divmod.com>
	<20050503201734.GH5579@jabber.org> <20050503215449.GA98841@ik.nu>
	<4278098B.3080702@divmod.com> <20050504091059.GA11677@ik.nu>
Message-ID: <60ed19d40505040313671cef24@mail.gmail.com>

On 5/4/05, Ralph Meijer <twisted at ralphm.ik.nu> wrote:
> I can see your point and understand that people thinking of Jabber
> believe it must be in Words, but my initial remark on it not belonging
> there has more to do with that most of the current code doesn't belong
> where it is now.

In a puritanical "Each layer of abstraction should get its own
subproject" view, you're right, but I think that we shouldn't add
undue complexity to the project and confusion for people trying to
understand Twisted by adding more projects when they're unnecessary.
Therefore, I suggest keeping all of this stuff in twisted.words until
it'd actually be useful to users (developers) to split off. i.e., when
people start wanting to make apps based on XMPP that don't use any
chat stuff.

Anyway, good luck with the project, and thanks for your work on it so far.

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From teratorn at twistedmatrix.com  Wed May  4 08:28:12 2005
From: teratorn at twistedmatrix.com (Eric Mangold)
Date: Wed, 04 May 2005 22:28:12 +1000
Subject: [Twisted-Python] Issue with stopListening
In-Reply-To: <4773101DA1AAC7489360BBC1C04F84B90107AEF3@postman.smarttrust.com>
References: <4773101DA1AAC7489360BBC1C04F84B90107AEF3@postman.smarttrust.com>
Message-ID: <op.sp83lauuy3d107@aspen>

On Wed, 04 May 2005 18:23:53 +1000, ?rjan Reinholdsen  
<Orjan.Reinholdsen at smarttrust.com> wrote:

> All,
>
> I have written a Twisted server that will be used as a test server to  
> test the client software ability to gracefully handle server shutdown  
> and thereafter reconnect. For that purpose I need my twisted server to  
> periodically stop listening on ports for a while, and then commence  
> normal operation again. For some reason I don't seem to succeede since  
> the twisted server never seems to stop listening on a port even if I  
> call the stopListening method on the IListeningPort object.
>
> Anyone got a clue to what I'm doing wrong?

stopListening() may return a deferred, in which case you'll need to wait  
for it to fire before you can be sure that Twisted has stopped listening.  
Since you have multiple ports a DeferredList may help you here.

Perhaps that is the problem?

-Eric

>
> Regards
> /?rjan
>
> ----
>
> [...]
>
> ports = [8007,8008,8009]
> listenPorts = []
> for port in ports:
>    print "Listening on port %d" % port
>    listenPorts.append(reactor.listenTCP(port, myFactory))
>
> length = len(listenPorts)
> ptime = 10
> dtime = 5
>
> def Down(ticks):
>    print "Stop listening on port %d" % ports[ticks%length]
>    listenPorts[ticks%length].stopListening()
>    reactor.callLater(dtime, Up, ticks)
>
> def Up(ticks):
>    print "Start listening on port %d" % ports[ticks%length]
>    listenPorts[ticks%length].startListening()
>    reactor.callLater(ptime, Down, ticks+1)
>
> reactor.callLater(ptime, Down, 0)
> reactor.run()
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>





From christopher.zorn at gmail.com  Wed May  4 09:01:20 2005
From: christopher.zorn at gmail.com (Christopher Zorn)
Date: Wed, 4 May 2005 09:01:20 -0400
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <60ed19d40505040313671cef24@mail.gmail.com>
References: <20050503105635.GA81824@ik.nu> <20050503113942.GA82735@ik.nu>
	<149014b905050305495094e492@mail.gmail.com>
	<20050503182104.GD5579@jabber.org> <4277CBE8.4090409@divmod.com>
	<20050503201734.GH5579@jabber.org> <20050503215449.GA98841@ik.nu>
	<4278098B.3080702@divmod.com> <20050504091059.GA11677@ik.nu>
	<60ed19d40505040313671cef24@mail.gmail.com>
Message-ID: <149014b905050406017e9dde44@mail.gmail.com>

On 5/4/05, Christopher Armstrong <radeex at gmail.com> wrote:
> On 5/4/05, Ralph Meijer <twisted at ralphm.ik.nu> wrote:
> > I can see your point and understand that people thinking of Jabber
> > believe it must be in Words, but my initial remark on it not belonging
> > there has more to do with that most of the current code doesn't belong
> > where it is now.
> 
> In a puritanical "Each layer of abstraction should get its own
> subproject" view, you're right, but I think that we shouldn't add
> undue complexity to the project and confusion for people trying to
> understand Twisted by adding more projects when they're unnecessary.
> Therefore, I suggest keeping all of this stuff in twisted.words until
> it'd actually be useful to users (developers) to split off. i.e., when
> people start wanting to make apps based on XMPP that don't use any
> chat stuff.

FYI, all of my "jabber" based twisted apps besides punjab are NOT chat based. :)
And I would not consider idavoll "chat" either. 

> 
> Anyway, good luck with the project, and thanks for your work on it so far.
> 
> --
>   Twisted   |  Christopher Armstrong: International Man of Twistery
>    Radix    |    -- http://radix.twistedmatrix.com
>             |  Release Manager, Twisted Project
>   \\\V///   |    -- http://twistedmatrix.com
>    |o O|    |  Founding Member, Hobart Hacking Society
> w----v----w-+    -- http://hackingsociety.org/chapters/hash
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From tim at se.linux.org  Wed May  4 09:08:29 2005
From: tim at se.linux.org (=?iso-8859-1?Q?Tim_Terleg=E5rd?=)
Date: Wed, 4 May 2005 15:08:29 +0200 (CEST)
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <60ed19d40505040313671cef24@mail.gmail.com>
Message-ID: <Pine.LNX.4.44.0505041502450.11243-100000@naskur.se.linux.org>

> > I can see your point and understand that people thinking of Jabber
> > believe it must be in Words, but my initial remark on it not belonging
> > there has more to do with that most of the current code doesn't belong
> > where it is now.
>
> In a puritanical "Each layer of abstraction should get its own
> subproject" view, you're right, but I think that we shouldn't add
> undue complexity to the project and confusion for people trying to
> understand Twisted by adding more projects when they're unnecessary.
> Therefore, I suggest keeping all of this stuff in twisted.words until
> it'd actually be useful to users (developers) to split off. i.e., when
> people start wanting to make apps based on XMPP that don't use any
> chat stuff.

I think it depends on the goals of this implementation. If this is a
serious effort and we'd like this to be the "official" implementation of
jabber in python, then I think XMPP Core and XMPP IM deserves to be
seperate projects. Jabber with all JEPs would mean quite some code.
If this only will be a minimal chat implementation, then I think words
would suffice.

Tim




From glyph at divmod.com  Wed May  4 10:53:46 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 04 May 2005 10:53:46 -0400
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <20050504091059.GA11677@ik.nu>
References: <20050503105635.GA81824@ik.nu>	<Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>	<20050503113942.GA82735@ik.nu>	<149014b905050305495094e492@mail.gmail.com>	<20050503182104.GD5579@jabber.org>
	<4277CBE8.4090409@divmod.com>	<20050503201734.GH5579@jabber.org>	<20050503215449.GA98841@ik.nu>
	<4278098B.3080702@divmod.com> <20050504091059.GA11677@ik.nu>
Message-ID: <4278E1FA.1030904@divmod.com>

Let me reply to the last thing you said first:

Ralph Meijer wrote:

> There is no support for server-to-server connections and the server side
> of client-to-server and server component connections, yet. Having that,
> would be really great, though.

 > While writing this, I decided I'd like to work on all this and help is
 > of course appreciated.

Awesome.  I hope that my feelings about packaging and distribution don't 
discourage you!  Words badly needs a dedicated maintainer and Jabber 
would be a great place to start, and probably not a bad model to 
structure the whole messaging system around.

> On Tue, May 03, 2005 at 07:30:19PM -0400, Glyph Lefkowitz wrote:

>>Ralph Meijer wrote:

>>>On Tue, May 03, 2005 at 03:17:34PM -0500, Peter Saint-Andre wrote:

>>>>As I said, I know of several folks in the Jabber community who
>>>>are quite interested in building a reference XMPP/Jabber server
>>>>in Python, and I'm wondering if Words is the place to point them.

>>>Besides that, one could argue that XMPP/Jabber doesn't belong in Words
>>>alltogether because IM is just one possible use of XMPP/Jabber.

>>One could argue that, but one would also be wrong :)
>>
>>Any protocol can be repurposed.

> I can see your point and understand that people thinking of Jabber
> believe it must be in Words, but my initial remark on it not belonging
> there has more to do with that most of the current code doesn't belong
> where it is now.

> Yes, Jabber was originally designed for chat. I'd like to give a little
> bit of background to let you see where I'm coming from, and then giving
> my view about how the current organisation is not ideal. I hope you'll
> forgive me for the length of it.

I still don't understand why you think Jabber can be a chat project that 
grows beyond that scope but you don't think that Words can be a chat 
project that grows beyond that scope :).

> XMPP Core defines (...)

> XMPP IM defines  (...)

> Then, the Jabber Software Foundation (JSF) defines a set of Jabber
> Enhancement Proposals. (...)

Okay... I did know most of that ;)

> In Twisted, the current implementation of what is called Jabber is split
> between twisted.xish.xmlstream and twisted.words.protocols.jabber. In
> xmlstream, the basic concept of an XML stream is covered, and hooks for
> doing any kind of stream authentication. Everything else is in the
> jabber module.

This is the core problem, I think.

At this point, twisted.xish is simply support for the Jabber module in 
twisted.words, with no real legitimate life of its own.  I believe it 
should be moved into twisted.words as a (admittedly largeish) protocol 
support module rather than having a separate installer and a separate 
project page.  Factoring of XMPP IM/XMPP Core within Words would be a 
good idea, but this should not affect installation and deployment 
concerns, because there is no reason to use them separately right now.

We should separate the project back out if people start clamoring for a 
separate distributable, but I seriously doubt this will be the case.

> The jabber module only supports the legacy authentication method (not
> XMPP!) for setting up client-to-server connections (client side only),
> and there is no support for TLS, SASL or even error conditions. Recently
> I did implement XMPP stringprep profiles, though. The client module also
> has a raw implementation of abstracting the <iq/> stanza, by allowing
> you to wait for the response to a query. Higher level support for the
> other two stanzas, roster handling or blocking communication is not
> there. There is also a framework for building server-side components,
> but that is defined in a JEP, not by XMPP.

Obviously the implementation needs to be brought into line with more 
recent versions of all these specifications.  No argument there :).

> My feeling is that the current implementation needs a lot of work, and
> I'd like to split that between implementing XMPP Core and XMPP IM. I
> could agree that the latter would belong in Words, but the former
> doesn't

Again.  I disagree.  You spent a lot of text above talking about a lot 
of things which were allegedly supposed to back up this point, but I 
don't see how they're related.  Jabber is a chat protocol which has been 
expanded to a wider array of application domains, Words is a project to 
enable expanding chat protocols to handle a wider array of application 
domains.  We have already made a sort of policy decision at a global 
level to bundle protocol logic in the application modules that it 
supports, i.e. twisted FTP protocol and HTTP protocol support belong in 
twisted.web, NOT in some common protocol-abstractions-only package.  You 
might have an application which uses only the XMPP core parts of Words, 
but those sorts of applications are, in my experience, *extremely* rare, 
and should not distort the marketing of the project and normal 
experience of people downloading the code or hacking on it for the first 
time.  Internal factoring is a separate question to packaging; if I view 
them in the light of internal factoring, your ideas all seem good.  If I 
view them as packaging, they're all bad.

> and that means that most of what is currently in Words needs to
> go to somewhere else. Maybe that somewhere-else is xish, but I didn't
> really like the moving xmlstream there, either. Maybe it'd be good to
> have a new twisted subproject XMPP that implements XMPP Core, and moving
> xmlstream there.

To reiterate, what is currently in Words needs to stay in Words, and 
things which support it that are not otherwise used needs to move there 
next to them.  Twisted subprojects are organized around some set of 
application functionality that can be provided by the core.  Twisted 
Words' provided application is a multiprotocol chat server and client, 
with chatterbot support.  Like all Twisted projects, the code can be 
used at any level, whether it's to load into the provided application as 
a plug-in or to develop a new application on top of only a subset of a 
package.

There is a cultural feeling in the Jabber community, I think, that 
Jabber is somehow unique and should be segregated and separated from all 
the other "legacy" protocols that are "just chat".

All chat protocols support a range of functionality.  IRC really is used 
as a message routing platform, in some cases in actual serious 
applications.  As far as I know OSCAR is used both for chat and for some 
back-end message delivery at AOL.  Even just on the chat client, it has 
a range of extensions which is pretty impressive.  MSN's protocol is 
used for more than just messenger.  All these protocols have a message 
format and a chat layer and an extension layer, and equal support for 
all of them should not be precluded.  Jabber is not a beautiful and 
unique snowflake.  It is the all-singing all dancing chat of the world ;)

That said, Jabber does have advantages over these protocols in many 
ways.  As I said above, it would not bother me to see the bulk of the 
Twisted Words architected around it.  Still, it would be a mistake to 
break the project up into multiple pieces first.  A key hint that this 
is a bad place to break the project is that the design for both halves 
is going to be done by one person as one effort, rather than building an 
XMPP core application and then waiting a few months to a year and then 
building an XMPP IM extension to that - the useful bits are up in XMPP 
IM, and XMPP core is just support code for that.  It certainly may be 
useful support code for a wide range of other applications but it does 
not stand on its own yet.



From manlio_perillo at libero.it  Wed May  4 12:11:30 2005
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Wed, 04 May 2005 18:11:30 +0200
Subject: [Twisted-Python] twisted.news
Message-ID: <5.2.1.1.0.20050504180815.00b2d768@popmail.libero.it>

Regards and thanks for your work on Twisted.

I have noted that twisted.news isn't installed with the last version of the 
installer for Windows.
Why?


Manlio Perillo




From abe at fettig.net  Wed May  4 12:25:03 2005
From: abe at fettig.net (Abe Fettig)
Date: Wed, 04 May 2005 12:25:03 -0400
Subject: [Twisted-Python] twisted.news
In-Reply-To: <5.2.1.1.0.20050504180815.00b2d768@popmail.libero.it>
References: <5.2.1.1.0.20050504180815.00b2d768@popmail.libero.it>
Message-ID: <4278F75F.9010903@fettig.net>

Manlio Perillo wrote:
> Regards and thanks for your work on Twisted.
> 
> I have noted that twisted.news isn't installed with the last version of
> the installer for Windows.
> Why?

There was a bug in Twisted 2.0 where 'news' wasn't included in the list
of subprojects in setup.py. I assume this is the reason why news isn't
included in the Windows installer.

This has been fixed in svn:
http://svn.twistedmatrix.com/cvs?view=rev&rev=13387

Can whoever is building the installers upgrade to the latest setup.py?

Abe



From glyph at divmod.com  Wed May  4 12:45:36 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 04 May 2005 12:45:36 -0400
Subject: [Twisted-Python] twisted.news
In-Reply-To: <4278F75F.9010903@fettig.net>
References: <5.2.1.1.0.20050504180815.00b2d768@popmail.libero.it>
	<4278F75F.9010903@fettig.net>
Message-ID: <4278FC30.4030704@divmod.com>

Abe Fettig wrote:

> Can whoever is building the installers upgrade to the latest setup.py?

Perhaps a more correct answer would be to do a 2.0.1 release?



From twisted at ralphm.ik.nu  Wed May  4 14:51:38 2005
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Wed, 4 May 2005 20:51:38 +0200
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <4278E1FA.1030904@divmod.com>
References: <Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>
	<20050503113942.GA82735@ik.nu>
	<149014b905050305495094e492@mail.gmail.com>
	<20050503182104.GD5579@jabber.org> <4277CBE8.4090409@divmod.com>
	<20050503201734.GH5579@jabber.org>
	<20050503215449.GA98841@ik.nu> <4278098B.3080702@divmod.com>
	<20050504091059.GA11677@ik.nu> <4278E1FA.1030904@divmod.com>
Message-ID: <20050504185138.GA64419@ik.nu>

On Wed, May 04, 2005 at 10:53:46AM -0400, Glyph Lefkowitz wrote:
> Let me reply to the last thing you said first:
> 
> Ralph Meijer wrote:
> 
> >There is no support for server-to-server connections and the server side
> >of client-to-server and server component connections, yet. Having that,
> >would be really great, though.
> 
> > While writing this, I decided I'd like to work on all this and help is
> > of course appreciated.
> 
> Awesome.  I hope that my feelings about packaging and distribution don't 
> discourage you!  Words badly needs a dedicated maintainer and Jabber 
> would be a great place to start, and probably not a bad model to 
> structure the whole messaging system around.
> [..]

Thanks! I realize this is probably a bigger effort than I can imagine
now. I'm not wedded to any packaging structure, really. The most
important thing right now is getting the code out there.

Most of my longish message was thinking out loud and certainly helped me
to get an idea of a restructuring of the code. Also, I can follow the
reasoning of keeping it inside Words at the moment. We'll see where that
leaves Xish, but let's not get ahead of myself.

I must admit that I haven't really looked into the rest of Words, but if
I understand you correctly the development there is stagnant. That's a
shame, but we can see that in the Jabber community as well: there are
very few people that bother to work on Gateways to other IM networks.
The bright side to that story is that from what I can see, the
development that /is/ there is implemented using Twisted :-)

Let's get coding.

-- 
Groetjes,

ralphm



From mcfletch at rogers.com  Wed May  4 16:08:12 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Wed, 04 May 2005 16:08:12 -0400
Subject: [Twisted-Python] Evangelism notes...
Message-ID: <42792BAC.1050701@rogers.com>

As some of you know, I use Twisted to develop one of our products, a
fairly large Cable modem management application. I've developed and
released TwistedSNMP, and am, generally speaking comfortable with the
package.  I've also been using Twisted within the company for my other
projects.  I've just come back from a meeting where a decision was made
to completely rewrite a *delivered* application on our own dime for the
sole purpose of eliminating Twisted.

I found this rather disappointing.

I realise that the problem lay in part in my own "choice" (didn't
actually choose, it just happened) of projects with which to introduce
Twisted, but I felt it would be useful to share the experience with others.

The Project:

    * Cross-protocol server intended to act as a "web services"
      intermediary for payment-processing services from a number of
      different banking systems.
          o Fairly straightforward networking protocols on all sides
          o All protocols were custom (i.e. we had to write them) save
            the client-side interface (which was XMLRPC)
          o Seems like a perfect problem domain for Twisted
    * Initially coded using Twisted by me, then pair programming with a
      colleague as he took over lead on the project
          o If my goal had initially been to evangelise, I should have
            *started* the project with pair programming so that the
            system wasn't already in-place and mystifyingly complex
                + Even the Finger sample is mystifyingly complex if you
                  jump into it at the end of the process
                + Unfortunately, I didn't realise the project would be
                  passed on to someone else before completion, I'd
                  thought it would remain part of my portfolio within
                  the company
                + Even if we did start out together, we really should
                  have done some *formal* training on Twisted, rather
                  than relying on knowledge transfer via pair
                  programming.  Again, it started out just being a few
                  lines here and there, we didn't see much being done
                  beyond the base system.
          o He never, in the entire process, saw anything really come
            from Twisted (other than problems where the complexity of
            the system got in the way of doing the rather simple task
            (from his point of view)), since the low-level coding was
            already done when he started working with the system.
                + Probably would have been better to start him on the
                  much larger project, where Twisted represents far less
                  of the overall complexity of the application.
          o In particular, test-driven development with threading in the
            background for blocking operations caused significant headaches
    * Project was delivered, paid for, and has been running in
      production for a few weeks, but 2 reported bugs cropped up
          o To fix one, needed to update to 2.0 (deferred object
            cleanup)... this caused rather a lot of upset, as the
            sysadmins were upset about such a huge package needing to be
            updated (and they tried to do just the core packages first,
            which doubled the work-load involved in preparing that
            update versus using Sumo)
          o Fixing the other was no big deal, except that something in
            2.0 changed how the test-suite was running so that it now
            hung on completion...
    * Now, at this point there had been serious conversations just an
      hour earlier during a management meeting about replacing Twisted
      for 2 separate projects.  The entire company is watching as we go
      to fix the *trivial* error while we're together after the
      meeting... but the test suite won't complete.  Must be something
      wrong with the background thread not exiting thinks I.
          o What do we call to shutdown the threadpool?  I don't
            remember, let's check the reference docs... 20 minutes of
            searching for the 2.0 reference docs (with the entire
            company watching this)... finally ask on IRC... told to
            build them myself and contribute them.  Cute, but didn't
            really drive home the whole "robust, professional,
            well-documented platform on which to develop business
            systems" meme as much as I'd hoped.  (Some of that is
            definitely my fault, I was pretty frustrated by the time I
            went to IRC to ask where the documentation was).
          o Finally go with the 1.3 docs, hoping there's not some change
            to the API that's causing the problem (though that looks
            very probable at this point, the change to 2.0 being the
            primary difference between working and not).
    * Finally get the 1.3 docs, hack together a
      reactor.threadpool.stop() call with a dummy last-run-test-suite
      and get the test suite to run-and-exit...
          o Keep in mind, we've just had to introduce a glaringly ugly
            and fragile hack to get around something trivial.  There may
            be a better way to run the tests, but it's a bit late for
            thinking of that now...
    * Now that we can run the test suite and focus on what happens
      during it, we discover that the ESMTP client can't connect to a
      local SMTP host without authentication (or at least, it wouldn't
      with the code we were using across the network to a remote
      host)... no documentation on the ESMTP client, of course.[1]
    * At which point my colleague (lead on this project) got well and
      truly fed up and decided to dump Twisted and rewrite the project
      in plain-old-Python.

There's lots of points where, had I anticipated the problems, I might
have salvaged the project in its current state.  If I'd anticipated that
the problems would be non-trivial to fix, I could simply have returned
to my workstation and fixed them in a relaxed and pressure-free
environment.  I could have spelunked through the code to figure out the
interfaces in lieu of documentation.  That's fine for me, I already
understand Twisted enough to spelunk through and find what I want, but
it doesn't make a great argument when someone's simply mystified by all
the pieces scattered here and there that seem to be joined by nothing
more than hope and bailing wire.

I could have done better at evangelising. In the end, though, I had to
concede that stripping out Twisted and writing the code himself would
probably be faster and easier in the long run than trying to work around
problems in an under-documented "foreign" system (again, from his
viewpoint).

Especially given the small size of the project, a few simple select
loops and a thread can solve 90% of what Twisted is providing for him. 
Thinking back on that conversation; at that point the *only* failing
feature was the ESMTP-sending, and I'm pretty sure it would have
resolved to something like passing a None instead of a "" for the
username and password; but when it came right down to it, he's the one
maintaining the code, and as far as he can see, Twisted just gets in the
way.

Don't know if the other project will be rewritten as well.  Given
decision on this one, I'd imagine it will.  I'd also predict that
Twisted is now Techne non Grata wrt any new development where it's not
an explicit requirement (given that we're going to be eating costs on
rewriting a project to eliminate it).  Certainly I'll have a hard sell
going forward.

So, anyway, just felt the need to share that.  Sorry again for the sharp
post to IRC.

Peace, all,
Mike

[1] How did ESMTP get in there anyway, if it's a 1.3 codebase?  Well, it
shares common functionality with the big application, one piece of that
being the automated use of ESMTP.

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From itamar at itamarst.org  Wed May  4 16:27:46 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 04 May 2005 16:27:46 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <42792BAC.1050701@rogers.com>
References: <42792BAC.1050701@rogers.com>
Message-ID: <1115238466.8476.44.camel@localhost.localdomain>

On Wed, 2005-05-04 at 16:08 -0400, Mike C. Fletcher wrote:

>           o What do we call to shutdown the threadpool?  I don't
>             remember, let's check the reference docs... 20 minutes of
>             searching for the 2.0 reference docs (with the entire
>             company watching this)... finally ask on IRC... told to
>             build them myself and contribute them.  Cute, but didn't
>             really drive home the whole "robust, professional,
>             well-documented platform on which to develop business
>             systems" meme as much as I'd hoped. 

There's a problem with generating API docs with current release.
Something to do with zope.interface. We did not decide not to build them
just to annoy you.




From itamar at itamarst.org  Wed May  4 16:36:16 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 04 May 2005 16:36:16 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <42792BAC.1050701@rogers.com>
References: <42792BAC.1050701@rogers.com>
Message-ID: <1115238976.8476.54.camel@localhost.localdomain>

On Wed, 2005-05-04 at 16:08 -0400, Mike C. Fletcher wrote:

> Don't know if the other project will be rewritten as well.  Given
> decision on this one, I'd imagine it will.  I'd also predict that
> Twisted is now Techne non Grata wrt any new development where it's not
> an explicit requirement (given that we're going to be eating costs on
> rewriting a project to eliminate it).  Certainly I'll have a hard sell
> going forward.

Do you have any suggestions on how we can improve things? Besides "write
more docs" which is basically always a given.




From glyph at divmod.com  Wed May  4 16:50:50 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 04 May 2005 16:50:50 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <1115238466.8476.44.camel@localhost.localdomain>
References: <42792BAC.1050701@rogers.com>
	<1115238466.8476.44.camel@localhost.localdomain>
Message-ID: <427935AA.1060100@divmod.com>

Itamar Shtull-Trauring wrote:
> On Wed, 2005-05-04 at 16:08 -0400, Mike C. Fletcher wrote:

>>          o What do we call to shutdown the threadpool?  I don't
>>            remember, let's check the reference docs... 20 minutes of
>>            searching for the 2.0 reference docs (with the entire
>>            company watching this)... finally ask on IRC... told to
>>            build them myself and contribute them.  Cute, but didn't
>>            really drive home the whole "robust, professional,
>>            well-documented platform on which to develop business
>>            systems" meme as much as I'd hoped. 

> There's a problem with generating API docs with current release.
> Something to do with zope.interface. We did not decide not to build them
> just to annoy you.

Mike, I'm sorry that Twisted was a part of such a horrible experience 
for you!  Thanks for sharing the experience, but evangelism tip #1 that 
I get from the initial reading is from the real-time, public bit at the end.

   - Do not ever, ever use IRC in a public forum to solve a problem in 
real-time.  In fact, do not ever use any support mechanism in a public 
forum unless you or your company has a paid relationship with the people 
on the other end of the wire.

   - Do not ever expect to be able to fix a threading bug in less than 2 
days.




From golux at comcast.net  Wed May  4 17:01:47 2005
From: golux at comcast.net (Stephen Waterbury)
Date: Wed, 04 May 2005 17:01:47 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <1115238466.8476.44.camel@localhost.localdomain>
References: <42792BAC.1050701@rogers.com>
	<1115238466.8476.44.camel@localhost.localdomain>
Message-ID: <4279383B.4060505@comcast.net>

Itamar Shtull-Trauring wrote:
> On Wed, 2005-05-04 at 16:08 -0400, Mike C. Fletcher wrote:
> 
> 
>>          o What do we call to shutdown the threadpool?  I don't
>>            remember, let's check the reference docs... 20 minutes of
>>            searching for the 2.0 reference docs (with the entire
>>            company watching this)... finally ask on IRC... told to
>>            build them myself and contribute them.  Cute, but didn't
>>            really drive home the whole "robust, professional,
>>            well-documented platform on which to develop business
>>            systems" meme as much as I'd hoped. 
> 
> 
> There's a problem with generating API docs with current release.
> Something to do with zope.interface. We did not decide not to build them
> just to annoy you.

Don't get too defensive, Itamar.  Although I missed the IRC
conversation, Mike's email certainly described a situation
that anyone would have found frustrating -- and to me it did
not appear to be an indictment of Twisted so much as simply a
cautionary tale, and a useful one.  It's reality.

Mike knows (in retrospect) he would have done things differently
if he had anticipated the docs not being there (i.e., go to his
cubicle and quietly do the spelunking, away from skeptical eyes).

I daresay if I were selling Twisted or handing off a Twisted
app in my environment, the situation would be similar (God
forbid I ever get to that ... which is part of the reason I
haven't released yet ;).

Twisted's documentation is constantly improving (thanks to Mary
and all who contribute!), but it can still be daunting to the
uninitiated, largely because Twisted is non-trivial and
good technical writing is harder than it looks.

Mike's experience was a confluence of many small dysfunctions.
IOW, the makings of a classic tragedy -- not that it was a
*huge* tragedy, but I'm sure Mike would prefer to work
in an environment in which he can use Twisted and not be
second-guessed (at best), and as he ruefully points out, the
well is kind of poisoned now.

So what's to be learned?  The lesson for me is:  if you are in
a similar environment, go ahead and used Twisted -- to those who
know it, it is reasonably robust and scalable -- but be very,
very careful when demoing and/or introducing anyone else to your
app.  And if you encounter any bugs, no matter how insignificant
the might at first appear, for heaven's sake go back to your
cube for the spelunking, unless you are a Minion and know
exactly what you're doing!  ;)

Cheers,
Steve



From mcfletch at rogers.com  Wed May  4 17:09:14 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Wed, 04 May 2005 17:09:14 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <1115238466.8476.44.camel@localhost.localdomain>
References: <42792BAC.1050701@rogers.com>
	<1115238466.8476.44.camel@localhost.localdomain>
Message-ID: <427939FA.40305@rogers.com>

Itamar Shtull-Trauring wrote:

>On Wed, 2005-05-04 at 16:08 -0400, Mike C. Fletcher wrote:
>
>  
>
>>          o What do we call to shutdown the threadpool?  I don't
>>            remember, let's check the reference docs... 20 minutes of
>>            searching for the 2.0 reference docs (with the entire
>>            company watching this)... finally ask on IRC... told to
>>            build them myself and contribute them.  Cute, but didn't
>>            really drive home the whole "robust, professional,
>>            well-documented platform on which to develop business
>>            systems" meme as much as I'd hoped. 
>>    
>>
>
>There's a problem with generating API docs with current release.
>Something to do with zope.interface. We did not decide not to build them
>just to annoy you.
>  
>
Oh, I didn't think you did it just to be annoying :) , but now that you
bring up the possibility, I wonder ;) .  How did you know that *I* would
be the one to fall into the trap, that's what I want to know!  You are a
far more devious trickster than I would have imagined... :)

I was just expressing my frustration at losing "mind-share" for Twisted
within the company.  Just another of those "all things being fine, no
big deal, but not the right time to discover this" when people are in
the middle of debating dropping the system.  I'm not ticked off at you
guys, you do what you have time to do.  I *am* kind of annoyed at myself
for not handling the situation better.

I *would* suggest a link on the homepage just saying "documentation". 
Saying "old documents" implies that there are new ones somewhere. 
Having that link in the "Developers" menu would be good too, when the
new docs are out, update those links to point to them.  We would have
been fine with the 1.3 docs (it's what we eventually used) for solving
the first problem, but seeing "old documents" we had 3 people sitting
around suggesting ways to find the new documents relating to the version
we were using.

Enjoy yourself,
Mike

________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From bob at redivi.com  Wed May  4 17:09:55 2005
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 4 May 2005 17:09:55 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <42792BAC.1050701@rogers.com>
References: <42792BAC.1050701@rogers.com>
Message-ID: <1A5DF4BE-AEE0-43E6-B9EA-DE3E29DF0B70@redivi.com>

On May 4, 2005, at 4:08 PM, Mike C. Fletcher wrote:

>     * Project was delivered, paid for, and has been running in
>       production for a few weeks, but 2 reported bugs cropped up
>           o To fix one, needed to update to 2.0 (deferred object
>             cleanup)... this caused rather a lot of upset, as the
>             sysadmins were upset about such a huge package needing  
> to be
>             updated (and they tried to do just the core packages  
> first,
>             which doubled the work-load involved in preparing that
>             update versus using Sumo)
>           o Fixing the other was no big deal, except that something in
>             2.0 changed how the test-suite was running so that it now
>             hung on completion...

That's why it's better if you don't install Twisted, just make its  
source code part of your project.  That's what you should be doing  
for just about any dependency, especially those where you don't need  
extension modules.

>     * Now, at this point there had been serious conversations just an
>       hour earlier during a management meeting about replacing Twisted
>       for 2 separate projects.  The entire company is watching as  
> we go
>       to fix the *trivial* error while we're together after the
>       meeting... but the test suite won't complete.  Must be something
>       wrong with the background thread not exiting thinks I.

Debugging with an audience?  What the hell were you thinking?  Don't  
do that.

>     * At which point my colleague (lead on this project) got well and
>       truly fed up and decided to dump Twisted and rewrite the project
>       in plain-old-Python.

The deferred/generator stuff is probably "plain-old-looking" enough  
to be used by a programmer who isn't already used to the Twisted  
style of programming, with caveats of course.

-bob




From glyph at divmod.com  Wed May  4 17:33:40 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 04 May 2005 17:33:40 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <4279383B.4060505@comcast.net>
References: <42792BAC.1050701@rogers.com>	<1115238466.8476.44.camel@localhost.localdomain>
	<4279383B.4060505@comcast.net>
Message-ID: <42793FB4.2070304@divmod.com>

Stephen Waterbury wrote:

> Although I missed the IRC
> conversation, Mike's email certainly described a situation
> that anyone would have found frustrating -- and to me it did
> not appear to be an indictment of Twisted so much as simply a
> cautionary tale, and a useful one.  It's reality.

A grim reality indeed.  I myself have been in this situation (and even 
been accused of being a shyster!) and it is a very hard one to get out of.

As Steve points out, there is a general-purpose learning here, but there 
is also the issue that given Twisted's technological maturity, users are 
beginning to expect a certain level of polish and sophistication from 
our web presence, our marketing materials and our documentation which 
just isn't there.

Worse, this is a long-standing problem I don't see any effort underway 
to rectify it.  Other open-source projects have gotten to this point and 
found huge, helpful teams of busy bees to fix the website, keep the 
documents up to date, wrangle the release notes and annotate the 
development process.  Some projects are worse - I've recently had an 
experience with the linux cifs client project website that made me feel 
really good about our web presence :-) - but we could do better.

That said, as it is I think the Twisted team is doing a great job at 
making Twisted, and we don't have any more resources or people to spend 
on other stuff.  That's not to say we can't spot-fix the biggest 
problems with our website (like the API documentation problem) but ... 
where do these helpful people come from for other projects?  I would 
estimate that Twisted has tens of thousands of users by now, but the 
community is still oddly silent.

I'm genuinely baffled as to how to proceed.  Is there anyone out there 
who can contribute some significant time to updating our "professional" 
presence on the web and elsewhere?




From mcfletch at rogers.com  Wed May  4 17:36:14 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Wed, 04 May 2005 17:36:14 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <427935AA.1060100@divmod.com>
References: <42792BAC.1050701@rogers.com>	<1115238466.8476.44.camel@localhost.localdomain>
	<427935AA.1060100@divmod.com>
Message-ID: <4279404E.8070905@rogers.com>

Glyph Lefkowitz wrote:
...

> Mike, I'm sorry that Twisted was a part of such a horrible experience
> for you!  Thanks for sharing the experience, but evangelism tip #1
> that I get from the initial reading is from the real-time, public bit
> at the end.

Wasn't a truly horrible experience.  The company's fairly laid back, it
was just disappointing.

>   - Do not ever, ever use IRC in a public forum to solve a problem in
> real-time.  In fact, do not ever use any support mechanism in a public
> forum unless you or your company has a paid relationship with the
> people on the other end of the wire.

Um, I hope you're joking.  Do not *ever* use a public support mechanism
without a paid relationship?  So is everyone on IRC paid up?  Or is it
not a support mechanism?  Or is it just unwise to ever *use* Twisted
IRC; it should just be considered a waste of time?  Absolutes like that
are kind of extreme, no?  Maybe you meant to say only for real-time
problem solving... still seems to make the immediacy of the forum
somewhat pointless, no?  It did actually solve the problem, btw, and at
least the search for the docs was cut short at 20 minutes.

If that was intended more as a "who do you think you are, you've not
paid us anything", okay, accepted.  I'd been thinking of myself as a
member of the community trying to sell "our" product to the world, I
should have looked at it from the other side.

We've (and I've) *tried* to contribute back to the Twisted community
with introductory lectures at PyGTA, various pieces of documentation and
releasing TwistedSNMP, but it's perfectly true that we've made no
monetary arrangements for support.  Fact is that we operate on a
shoe-string budget to keep costs low for our customers and try to
participate actively in the Open Source community to compensate others
for the assistance we often get.  I apologise if I went over the line in
asking where the reference documents have moved ;) :) .

Seriously, I didn't even think of asking in IRC, it was suggested by
another colleague between stifling guffaws... maybe he was out to get me
by tricking me into exactly this folly ;) .

>   - Do not ever expect to be able to fix a threading bug in less than
> 2 days.

:)  That was obviously the root problem.

Peace, out,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From glyph at divmod.com  Wed May  4 17:42:53 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 04 May 2005 17:42:53 -0400
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <20050504185138.GA64419@ik.nu>
References: <Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>	<20050503113942.GA82735@ik.nu>	<149014b905050305495094e492@mail.gmail.com>	<20050503182104.GD5579@jabber.org>
	<4277CBE8.4090409@divmod.com>	<20050503201734.GH5579@jabber.org>	<20050503215449.GA98841@ik.nu>
	<4278098B.3080702@divmod.com>	<20050504091059.GA11677@ik.nu>
	<4278E1FA.1030904@divmod.com> <20050504185138.GA64419@ik.nu>
Message-ID: <427941DD.7060607@divmod.com>

Ralph Meijer wrote:
> On Wed, May 04, 2005 at 10:53:46AM -0400, Glyph Lefkowitz wrote:


> Thanks! I realize this is probably a bigger effort than I can imagine
> now. I'm not wedded to any packaging structure, really. The most
> important thing right now is getting the code out there.

I'd estimate ten years, as with any such project :) - 
http://www.norvig.com/21-days.html

> Most of my longish message was thinking out loud and certainly helped me
> to get an idea of a restructuring of the code. Also, I can follow the
> reasoning of keeping it inside Words at the moment. We'll see where that
> leaves Xish, but let's not get ahead of myself.

Double-awesome!

> I must admit that I haven't really looked into the rest of Words, but if
> I understand you correctly the development there is stagnant.

Yes.  I was the original developer, and as far as I know very little has 
happened since I was working on it.  The chat client part of words still 
  uses 1.0-era deprecated APIs, and has a gtk1 user interface!

Much of the code's design is also horrible, as it was written more as a 
proof of concept.  Still, I strongly believe that words is where a good 
bit of Twisted's potential lies.  A lot of what's being done with 
Twisted now could theoretically be done with apache, but once chat 
protocols start getting into the mix there are very few things that can 
compete.



From darran.edmundson at anu.edu.au  Wed May  4 17:42:52 2005
From: darran.edmundson at anu.edu.au (Darran Edmundson)
Date: Thu, 05 May 2005 07:42:52 +1000
Subject: [Twisted-Python] application release with Twisted included (was:
	Evangelism notes...)
In-Reply-To: <1A5DF4BE-AEE0-43E6-B9EA-DE3E29DF0B70@redivi.com>
References: <42792BAC.1050701@rogers.com>
	<1A5DF4BE-AEE0-43E6-B9EA-DE3E29DF0B70@redivi.com>
Message-ID: <427941DC.4010603@anu.edu.au>

Bob Ippolito wrote:
> That's why it's better if you don't install Twisted, just make its  
> source code part of your project.  That's what you should be doing  for 
> just about any dependency, especially those where you don't need  
> extension modules.

Could anyone offer advice on the best way to do this?   For example,
the setup.py of our twisted app creates a package hierarchy:
	- agdevicecontrol
		- agdevicecontrol.server
		- agdevicecontrol.client
		- agdevicecontrol.gui
		- agdevicecontrol.common
		- agdeviceconttrol.devices

This is all under subversion control and (inspired by Twisted) a few
hours away from having its tests run under Buildbot.  So now if we
want to include Twisted2.0 and the ZopeInterfaces dependencies
in our source release, should we just take a source snapshot and
add:
		- agdevicecontrol.twisted
		- agdevicecontrol.zopeinterfaces

And do we try to keep these in synch with the respective
CVS/SVN repositories?  Or since this is going out to end
users, stick with stable releases (almost rhetorical question).

As always, your advice is much appreciated.

Cheers,
Darran.

-- 
Darran Edmundson (darran.edmundson at anu.edu.au)
ANU Supercomputer Facility Vizlab
Australian National University, Canberra, ACT 2600
tel: +61 2 6125-0517  fax: +61 2 6125-5088



From itamar at itamarst.org  Wed May  4 17:47:56 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 04 May 2005 17:47:56 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <4279404E.8070905@rogers.com>
References: <42792BAC.1050701@rogers.com>
	<1115238466.8476.44.camel@localhost.localdomain>
	<427935AA.1060100@divmod.com>  <4279404E.8070905@rogers.com>
Message-ID: <1115243276.8476.65.camel@localhost.localdomain>

On Wed, 2005-05-04 at 17:36 -0400, Mike C. Fletcher wrote:

> >   - Do not ever, ever use IRC in a public forum to solve a problem in
> > real-time.  In fact, do not ever use any support mechanism in a public
> > forum unless you or your company has a paid relationship with the
> > people on the other end of the wire.
> 
> Um, I hope you're joking.  Do not *ever* use a public support mechanism
> without a paid relationship? 

I think he meant don't use it *in* a public forum, i.e. with people
("customers") looking over your shoulder. You should use IRC for
support, that's what it's there for.




From bob at redivi.com  Wed May  4 17:50:42 2005
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 4 May 2005 17:50:42 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <4279404E.8070905@rogers.com>
References: <42792BAC.1050701@rogers.com>	<1115238466.8476.44.camel@localhost.localdomain>
	<427935AA.1060100@divmod.com> <4279404E.8070905@rogers.com>
Message-ID: <A5EB704D-B9A5-4042-841A-F49022562CB4@redivi.com>


On May 4, 2005, at 5:36 PM, Mike C. Fletcher wrote:

> Glyph Lefkowitz wrote:
> ...
>
>
>>   - Do not ever, ever use IRC in a public forum to solve a problem in
>> real-time.  In fact, do not ever use any support mechanism in a  
>> public
>> forum unless you or your company has a paid relationship with the
>> people on the other end of the wire.
>>
>
> Um, I hope you're joking.  Do not *ever* use a public support  
> mechanism
> without a paid relationship?  So is everyone on IRC paid up?  Or is it
> not a support mechanism?  Or is it just unwise to ever *use* Twisted
> IRC; it should just be considered a waste of time?  Absolutes like  
> that
> are kind of extreme, no?  Maybe you meant to say only for real-time
> problem solving... still seems to make the immediacy of the forum
> somewhat pointless, no?  It did actually solve the problem, btw,  
> and at
> least the search for the docs was cut short at 20 minutes.

Presumably, this is what he meant:

Don't CC the IRC conversation to the rest of your company ("in a  
public forum").  The S:N ratio and mannerisms of IRC aren't  
appropriate to broadcast to the rest of the world (unless they are  
also acquainted with how IRC works, etc.).

Don't expect free help exactly when you need it ("in real-time").   
#twisted is quite helpful, and often does end up being free real-time  
help, but there aren't any guarantees.

-bob




From mcfletch at rogers.com  Wed May  4 17:54:02 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Wed, 04 May 2005 17:54:02 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <1A5DF4BE-AEE0-43E6-B9EA-DE3E29DF0B70@redivi.com>
References: <42792BAC.1050701@rogers.com>
	<1A5DF4BE-AEE0-43E6-B9EA-DE3E29DF0B70@redivi.com>
Message-ID: <4279447A.3000409@rogers.com>

Bob Ippolito wrote:
...

> That's why it's better if you don't install Twisted, just make its 
> source code part of your project.  That's what you should be doing 
> for just about any dependency, especially those where you don't need 
> extension modules.

Hmm, can't see that flying with our sysadmins, they want standard
packages with minimal apps that use them (NetBSD developer).

> Debugging with an audience?  What the hell were you thinking?  Don't 
> do that.

Pair programming *always* has an audience, in this particular case we
just had the third programmer looking over our shoulder because we'd
just been debating the merits of Twisted and he wanted to see how it
compared to his own experiences with Twisted.  Going back to my
"cubicle" (actually apartment) would have involved making the pair
programming remote (which is common in our company), the difference
being that I could do the looking up/spelunking *before* I called over
to start work ;) .

> The deferred/generator stuff is probably "plain-old-looking" enough 
> to be used by a programmer who isn't already used to the Twisted 
> style of programming, with caveats of course.

Quite possibly it would be, but I'm afraid the cow is already in the
corn for this project.  We'll see if they are won over by the beauty and
majesty of the big Twisted project when/if they start working on that.

Have fun,
Mike

________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From glyph at divmod.com  Wed May  4 17:55:04 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 04 May 2005 17:55:04 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <4279404E.8070905@rogers.com>
References: <42792BAC.1050701@rogers.com>	<1115238466.8476.44.camel@localhost.localdomain>	<427935AA.1060100@divmod.com>
	<4279404E.8070905@rogers.com>
Message-ID: <427944B8.4010001@divmod.com>

Mike C. Fletcher wrote:
> Glyph Lefkowitz wrote:

>>  - Do not ever, ever use IRC in a public forum
                                 ^^^^^^^^^^^^^^^^^
i.e. when YOU are in a public forum, like in front of the rest of your 
company :).

> Um, I hope you're joking.  Do not *ever* use a public support mechanism
> without a paid relationship?  So is everyone on IRC paid up?
    ...
> If that was intended more as a "who do you think you are, you've not
> paid us anything", okay, accepted.
    ...
> We've (and I've) *tried* to contribute back to the Twisted community
> with introductory lectures at PyGTA, various pieces of documentation and
> releasing TwistedSNMP, but it's perfectly true that we've made no
> monetary arrangements 

No no, you misunderstand!  Your contributions have been substantial, and 
I didn't mean to impugn them.  I don't mean, "don't use IRC" or "you've 
got no right", I mean, you are likely to get flak, humor, or random 
people being rude to you for no reason as you are to get support.  This 
can get you in trouble in a meeting.

#twisted is like a bunch of mechanics and automotive engineers (and 
various hangers-on) hanging around in a garage.  It's not a slum, but it 
is a garage, there are going to be parts lying all over the place and 
people are informal.  Going to IRC with the president of your company 
watching your screen is like inviting your auto mechanic and his 
girlfriend into your boss's limousine to discuss the company's car 
purchasing plans for the next year.

> Seriously, I didn't even think of asking in IRC, it was suggested by
> another colleague between stifling guffaws... maybe he was out to get me
> by tricking me into exactly this folly ;) .

Hmm... sounds like maybe he was...



From projects at reedflute.com  Wed May  4 17:57:45 2005
From: projects at reedflute.com (Eugene Coetzee)
Date: Wed, 04 May 2005 23:57:45 +0200
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <1A5DF4BE-AEE0-43E6-B9EA-DE3E29DF0B70@redivi.com>
References: <42792BAC.1050701@rogers.com>
	<1A5DF4BE-AEE0-43E6-B9EA-DE3E29DF0B70@redivi.com>
Message-ID: <42794559.9070105@reedflute.com>

Bob Ippolito wrote:

>
> Debugging with an audience? What the hell were you thinking? Don't do 
> that. 


Yeah- debugging is never pretty no matter if you are using Visual Basic 
"idiot proof" wizard tools or assembler written in encrypted sanskrit. 
What kind of IT outfit torture their developers by forcing them to debug 
"live" with the sword of managerial scrutiny hanging over their heads :-)

For me the moral of the story is that frameworks tend to make simple 
tasks complex and complex tasks simple. Perhaps Twisted wasn't the best 
choice to start with?


Web                 -> www.reedflute.com
=============================================== 




From darran.edmundson at anu.edu.au  Wed May  4 18:04:38 2005
From: darran.edmundson at anu.edu.au (Darran Edmundson)
Date: Thu, 05 May 2005 08:04:38 +1000
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <42793FB4.2070304@divmod.com>
References: <42792BAC.1050701@rogers.com>	<1115238466.8476.44.camel@localhost.localdomain>	<4279383B.4060505@comcast.net>
	<42793FB4.2070304@divmod.com>
Message-ID: <427946F6.1070901@anu.edu.au>

Glyph Lefkowitz wrote:

> That said, as it is I think the Twisted team is doing a great job at 
> making Twisted, and we don't have any more resources or people to spend 
> on other stuff.  That's not to say we can't spot-fix the biggest 
> problems with our website (like the API documentation problem) but ... 
> where do these helpful people come from for other projects?  I would 
> estimate that Twisted has tens of thousands of users by now, but the 
> community is still oddly silent.

Lacking community volunteers with the necessary writing and twisted
skillsets, the best option would be to have the documentation done
professionally by *good* technical writers.

How does one fund this?  As you say, there are tens of thousands of twisted
users by now,  many writing code inside corporations/universities which 
regularly
pay for software.  So start a fund:

- get an accurate estimate of the amount of money needed (ie., have 
*good* writers
   lined up and ready to start work under contract)
- prominently display the fund status (thermometer?) on the twisted home 
page
- solicit support from twisted users urging them to get their employers 
to contribute
- recognize contributions

I think you'd be pleasantly surprised by the response.  $150k shouldn't 
be too hard
to raise and, spent wisely, will go a long way towards solving the 
documentation/tutorial
problems.  Our group put $12.5k back into a specific open source project 
last year.
Money that was earned thanks to that same project.

Cheers,
Darran.

P.S.  Of course a paper book would also do wonders ...


-- 
Darran Edmundson (darran.edmundson at anu.edu.au)
ANU Supercomputer Facility Vizlab
Australian National University, Canberra, ACT 2600
tel: +61 2 6125-0517  fax: +61 2 6125-5088



From bob at redivi.com  Wed May  4 18:06:43 2005
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 4 May 2005 18:06:43 -0400
Subject: [Twisted-Python] application release with Twisted included (was:
	Evangelism notes...)
In-Reply-To: <427941DC.4010603@anu.edu.au>
References: <42792BAC.1050701@rogers.com>
	<1A5DF4BE-AEE0-43E6-B9EA-DE3E29DF0B70@redivi.com>
	<427941DC.4010603@anu.edu.au>
Message-ID: <8C0ADF74-1860-47D2-9113-66ED71FC34B3@redivi.com>


On May 4, 2005, at 5:42 PM, Darran Edmundson wrote:

> Bob Ippolito wrote:
>
>> That's why it's better if you don't install Twisted, just make  
>> its  source code part of your project.  That's what you should be  
>> doing  for just about any dependency, especially those where you  
>> don't need  extension modules.
>>
>
> Could anyone offer advice on the best way to do this?   For example,
> the setup.py of our twisted app creates a package hierarchy:
>     - agdevicecontrol
>         - agdevicecontrol.server
>         - agdevicecontrol.client
>         - agdevicecontrol.gui
>         - agdevicecontrol.common
>         - agdeviceconttrol.devices
>
> This is all under subversion control and (inspired by Twisted) a few
> hours away from having its tests run under Buildbot.  So now if we
> want to include Twisted2.0 and the ZopeInterfaces dependencies
> in our source release, should we just take a source snapshot and
> add:
>         - agdevicecontrol.twisted
>         - agdevicecontrol.zopeinterfaces

Don't try and change the Python module hierarchy.  Just make twisted  
a sibling of your package.  zopeinterfaces is a bit different because  
it *does* have extension module(s), and doesn't evolve very quickly,  
so it might be best to just require that to be installed.  If you  
only support one platform you could install a particular version of  
zope.interfaces with a --prefix that points somewhere in your  
repository (such that it's a sibling of your code) and just check  
that in.  Or you can go with something a bit more complicated with  
multiple platforms where you have a bootstrap script that mangles the  
sys.path so that it finds the appropriate platform specific modules.

This is a "__bootstrap__" module that I've used in the past that I  
have used before:

import os, sys
# change to current dir
curdir = os.path.dirname(os.path.abspath(__file__))
os.chdir(curdir)
# add dependencies and platform specific path for dependencies
sitepkg = os.path.join(curdir, 'site-packages')
uname = os.uname()
platdir = '%s-%s' % (uname[0].replace(' ', '_'), uname[-1].replace('  
', '_'))
sys.path[1:1] = [
     sitepkg,
     os.path.join(sitepkg, platdir),
     os.path.join(sitepkg, platdir, 'PIL'),
]

In this particular case, the layout looked like this:

site-packages/
     formless/
     nevow/
     twisted/
         ... these three are just checkouts of their respective  
projects at some point in time
     plat-Darwin-Power_Macintosh/
         mx/
         PIL/
         sqlite/
         _sqlite.so
     plat-Linux-i686/
         ... same stuff as in Darwin

The way it bootstraps is that I had a "start.sh" script that calls "./ 
twistd -o -y something.tac", where twistd is just a local copy of the  
twistd shell script that is modified to import __bootstrap__ before  
it does anything else.

If you didn't notice, zope.interfaces isn't here.. because this is a  
copy of Twisted 1.3.  nevow worked better that way at the time.  It  
still works just fine, and I don't have to worry about other  
applications on the server getting in the way because the environment  
is pretty isolated.  I can svn co the project on (almost) any Mac OS  
X or Linux machine with a Python 2.3 interpreter and just run it,  
without worrying about any other dependencies.

> And do we try to keep these in synch with the respective
> CVS/SVN repositories?  Or since this is going out to end
> users, stick with stable releases (almost rhetorical question).

That's up to you.  You might want to map external code (even specific  
revisions of external code) as just svn:externals, but since you  
don't have control over other people's repositories (i.e. they might  
be down when you need to checkout) it's probably a good idea to  
"checkpoint" specific releases and make sure they live in your repo  
somewhere.

-bob




From mcfletch at rogers.com  Wed May  4 18:12:58 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Wed, 04 May 2005 18:12:58 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <427944B8.4010001@divmod.com>
References: <42792BAC.1050701@rogers.com>	<1115238466.8476.44.camel@localhost.localdomain>	<427935AA.1060100@divmod.com>
	<4279404E.8070905@rogers.com> <427944B8.4010001@divmod.com>
Message-ID: <427948EA.5090001@rogers.com>

Glyph Lefkowitz wrote:
...

> #twisted is like a bunch of mechanics and automotive engineers (and
> various hangers-on) hanging around in a garage.  It's not a slum, but
> it is a garage, there are going to be parts lying all over the place
> and people are informal.  Going to IRC with the president of your
> company watching your screen is like inviting your auto mechanic and
> his girlfriend into your boss's limousine to discuss the company's car
> purchasing plans for the next year.

Our president, incidentally, is a leather-wearing biker (and a NetBSD
developer), but I'm sure the mechanic and his girlfriend would get over
their offense, eventually ;) .  Point taken, though.  No matter how laid
back the individuals, when trying to convince a group about the
viability of a product in a business setting it's not a good forum to
which to turn.

Have fun,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From bob at redivi.com  Wed May  4 18:14:08 2005
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 4 May 2005 18:14:08 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <4279447A.3000409@rogers.com>
References: <42792BAC.1050701@rogers.com>
	<1A5DF4BE-AEE0-43E6-B9EA-DE3E29DF0B70@redivi.com>
	<4279447A.3000409@rogers.com>
Message-ID: <CA955764-21EC-42DC-B5A7-18534DFF760A@redivi.com>


On May 4, 2005, at 5:54 PM, Mike C. Fletcher wrote:

> Bob Ippolito wrote:
> ...
>
>
>> That's why it's better if you don't install Twisted, just make its
>> source code part of your project.  That's what you should be doing
>> for just about any dependency, especially those where you don't need
>> extension modules.
>>
>
> Hmm, can't see that flying with our sysadmins, they want standard
> packages with minimal apps that use them (NetBSD developer).

Sysadmins be damned, the more self-contained an application is, the  
less trouble you'll have debugging, developing, and upgrading it.   
ESPECIALLY since Python can't reasonably do multiple-concurrent- 
versions (effectively our own DLL hell).

>> Debugging with an audience?  What the hell were you thinking?  Don't
>> do that.
>>
>
> Pair programming *always* has an audience, in this particular case we
> just had the third programmer looking over our shoulder because we'd
> just been debating the merits of Twisted and he wanted to see how it
> compared to his own experiences with Twisted.  Going back to my
> "cubicle" (actually apartment) would have involved making the pair
> programming remote (which is common in our company), the difference
> being that I could do the looking up/spelunking *before* I called over
> to start work ;) .

The way you said it kind of implied that more than 2 people were  
present, and that these were non-programmers.

-bob




From mary-twisted at puzzling.org  Wed May  4 18:27:57 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Thu, 5 May 2005 08:27:57 +1000
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <42793FB4.2070304@divmod.com>
References: <42792BAC.1050701@rogers.com>
	<1115238466.8476.44.camel@localhost.localdomain>
	<4279383B.4060505@comcast.net> <42793FB4.2070304@divmod.com>
Message-ID: <20050504222757.GD11357@sourdust.home.puzzling.org>

On Wed, May 04, 2005, Glyph Lefkowitz wrote:
> Worse, this is a long-standing problem I don't see any effort underway
> to rectify it.  Other open-source projects have gotten to this point
> and found huge, helpful teams of busy bees to fix the website, keep
> the documents up to date, wrangle the release notes and annotate the
> development process.

What particular projects do you have in mind here? I ask because it
could well be useful to actually go to them and say "hey, where did you
find these people?" In particular, it would be useful to ask that
question of things that will be used by programmers: Python itself,
other languages developed/maintained by communities, the graphical
toolkits and other big libraries... (answers from, say, the GNOME user
documentation people might still be useful, but I think slightly less
so, because that documentation can be written by non-programmers).

I can think of all kinds of answers ("they just appeared!", "we don't
merge features without review of their documentation," "we paid people,"
"we just love writing documentation," "there's these two crazy people
who just love writing documentation," "there's this one company who
employs our major developers and also employs some tech writers,") but I
don't know what the correct ones are.

-Mary



From srichter at cosmos.phy.tufts.edu  Wed May  4 19:40:56 2005
From: srichter at cosmos.phy.tufts.edu (Stephan Richter)
Date: Wed, 4 May 2005 19:40:56 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <42793FB4.2070304@divmod.com>
References: <42792BAC.1050701@rogers.com> <4279383B.4060505@comcast.net>
	<42793FB4.2070304@divmod.com>
Message-ID: <200505041940.56933.srichter@cosmos.phy.tufts.edu>

On Wednesday 04 May 2005 17:33, Glyph Lefkowitz wrote:
> That said, as it is I think the Twisted team is doing a great job at
> making Twisted, and we don't have any more resources or people to spend
> on other stuff. ?That's not to say we can't spot-fix the biggest
> problems with our website (like the API documentation problem) but ...
> where do these helpful people come from for other projects? ?I would
> estimate that Twisted has tens of thousands of users by now, but the
> community is still oddly silent.

In Zope 3 we simply made it a policy that documentation has to be provided 
with any code that is checked in.

Regards,
Stephan
-- 
Stephan Richter
CBU Physics & Chemistry (B.S.) / Tufts Physics (Ph.D. student)
Web2k - Web Software Design, Development and Training



From radeex at gmail.com  Wed May  4 19:57:49 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Thu, 5 May 2005 09:57:49 +1000
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <42793FB4.2070304@divmod.com>
References: <42792BAC.1050701@rogers.com>
	<1115238466.8476.44.camel@localhost.localdomain>
	<4279383B.4060505@comcast.net> <42793FB4.2070304@divmod.com>
Message-ID: <60ed19d40505041657480dc31c@mail.gmail.com>

On 5/5/05, Glyph Lefkowitz <glyph at divmod.com> wrote:
> Worse, this is a long-standing problem I don't see any effort underway
> to rectify it.  Other open-source projects have gotten to this point and
> found huge, helpful teams of busy bees to fix the website, keep the
> documents up to date, wrangle the release notes and annotate the
> development process.  Some projects are worse - I've recently had an
> experience with the linux cifs client project website that made me feel
> really good about our web presence :-) - but we could do better.
> 
> That said, as it is I think the Twisted team is doing a great job at
> making Twisted, and we don't have any more resources or people to spend
> on other stuff.  That's not to say we can't spot-fix the biggest
> problems with our website (like the API documentation problem) but ...
> where do these helpful people come from for other projects?  I would
> estimate that Twisted has tens of thousands of users by now, but the
> community is still oddly silent.
> 
> I'm genuinely baffled as to how to proceed.  Is there anyone out there
> who can contribute some significant time to updating our "professional"
> presence on the web and elsewhere?

(This contains my thoughts on Twisted's state in general, this thread,
and a response to this particular point from Glyph):

As it stands, I'm pretty embarassed about the state of Twisted, and
I'm really sympathetic for Mike. Personally, I'm truly sorry I had to
drop a lot of polish from the Twisted 2.0 release; I decided to make
it a higher priority to get it out the door (its release cycle was
nearing Debian scales) than to get API docs building, for example.

While there are a lot of docs, and people who claim "Twisted has no
docs!" should be stabbed in the face, the level of usefulness in the
docs isn't that, well, useful, despite Mary's excellent effort. Not
only that, the code is also really nasty in certain areas, trial being
particularly relevant, but certainly not the only area. Trial is
something I've worried about for a while and have eventually just lost
all hope of general usability for, if you're not a Twisted expert.

To respond to your question, glyph, the only thing I can imagine
helping Twisted a significant amount right now is if some company
employing a Twisted hacker would give that Twisted hacker half a day a
week to *generally* maintain Twisted. Just those 4.5 focussed hours a
week would help an amazing amount, I reckon. Not just working on the
web site and docs, but the code as well, like fixing bugs in the
tracker. Of course, most of those companies that employ us do pay us
for developing certain contributions to Twisted, but that's not really
benefitting the project as a whole, it's just benefitting very small
niches within it.

Unfortunately, all of the companies employing Twisted hackers (Divmod,
Nunatak, ITA, and some others) are either too poor or don't care
enough about Twisted to make that offer.

Barring that, maybe a horde of uni students with tons of time on their
hands could help.

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From njp at njp.us  Wed May  4 22:50:32 2005
From: njp at njp.us (Norm Petterson)
Date: Wed, 04 May 2005 22:50:32 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <427946F6.1070901@anu.edu.au>
References: <42792BAC.1050701@rogers.com>	<1115238466.8476.44.camel@localhost.localdomain>	<4279383B.4060505@comcast.net>	<42793FB4.2070304@divmod.com>
	<427946F6.1070901@anu.edu.au>
Message-ID: <427989F8.5040505@njp.us>

Darran Edmundson wrote:

> P.S.  Of course a paper book would also do wonders ...

+1 here...

I carry Alex Martelli's Python in a Nutshell around with me every day. 
Alex, if you're listening, how about a book on Twisted?

Several books introduce Twisted positively (e.g., Goerzen's recent 
Foundations of Python Network Programming), but the lack of a complete 
print reference has made me a little hesitant to emphasize my reliance 
on it in recent customer projects. Heck, I have enough trouble 
convincing my customers that Python is supportable (e.g., "we're a 
Microsoft shop here..."), so I hide my use of Twisted in the packaging. 
Thanks again, Cory, for ntsvc...

Keep up the good work,

Norm





From mesozoic at polynode.com  Thu May  5 00:07:51 2005
From: mesozoic at polynode.com (Alex Levy)
Date: Thu, 5 May 2005 00:07:51 -0400
Subject: [Twisted-Python] twistedmatrix.com gets a touch-up
Message-ID: <20050505040751.GC29859@perpetual.moxn.net>

Given the recent discussion of Twisted's "professional face", this seems
more than a little apropos.

twistedmatrix.com has been updated with some new CSS and a little more
color. I've tested it on Firefox/Win and IE6/Win, but it needs a lot more
scrutiny. Everyone, please throw it into your browser(s) of choice and give
a yell if something looks awry.

Thanks to Chris Armstrong for giving me permission to run amok in the
WebSite branch.

-- 
Alex Levy
WWW: http://mesozoic.geecs.org/
 
"Never let your sense of morals prevent you from doing what is right."
 -- Salvor Hardin, Isaac Asimov's _Foundation_



From bob at redivi.com  Thu May  5 00:19:56 2005
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 5 May 2005 00:19:56 -0400
Subject: [Twisted-Python] twistedmatrix.com gets a touch-up
In-Reply-To: <20050505040751.GC29859@perpetual.moxn.net>
References: <20050505040751.GC29859@perpetual.moxn.net>
Message-ID: <605BDB45-31CF-46E3-8FB1-6F5CD3A1C9CA@redivi.com>


On May 5, 2005, at 12:07 AM, Alex Levy wrote:

> Given the recent discussion of Twisted's "professional face", this  
> seems
> more than a little apropos.
>
> twistedmatrix.com has been updated with some new CSS and a little more
> color. I've tested it on Firefox/Win and IE6/Win, but it needs a  
> lot more
> scrutiny. Everyone, please throw it into your browser(s) of choice  
> and give
> a yell if something looks awry.

Man, what the hell are we going to complain about now that there are  
obvious documentation links on the front page!?  You suck :)

-bob




From tv at twistedmatrix.com  Thu May  5 02:12:34 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu, 05 May 2005 09:12:34 +0300
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <427989F8.5040505@njp.us>
References: <42792BAC.1050701@rogers.com>	<1115238466.8476.44.camel@localhost.localdomain>	<4279383B.4060505@comcast.net>	<42793FB4.2070304@divmod.com>	<427946F6.1070901@anu.edu.au>
	<427989F8.5040505@njp.us>
Message-ID: <4279B952.5000203@twistedmatrix.com>

Norm Petterson wrote:
>> P.S.  Of course a paper book would also do wonders ...
> 
> +1 here...

I've let this slip earlier, now might be a good time to do that again.
I'm in the pre-contract stage of bookwriting, with an enthusiastic
publisher. Watch This Space.



From tv at twistedmatrix.com  Thu May  5 02:30:24 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu, 05 May 2005 09:30:24 +0300
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <1A5DF4BE-AEE0-43E6-B9EA-DE3E29DF0B70@redivi.com>
References: <42792BAC.1050701@rogers.com>
	<1A5DF4BE-AEE0-43E6-B9EA-DE3E29DF0B70@redivi.com>
Message-ID: <4279BD80.9080702@twistedmatrix.com>

Bob Ippolito wrote:
> That's why it's better if you don't install Twisted, just make its  
> source code part of your project.  That's what you should be doing  for 
> just about any dependency, especially those where you don't need  
> extension modules.

Eww. -1 on that. As a Debian person, I tend to spend a lot of time
dekludging things where upstream includes 5 libraries with the project,
and will not use system-installed libraries. Not to speak of the bloat
in the size of the source tarballs, which is multiplied by a _lot_ when
it comes to Debian.



From pmezard at gmail.com  Thu May  5 05:52:18 2005
From: pmezard at gmail.com (Patrick =?utf-8?b?TcOpemFyZA==?=)
Date: Thu, 5 May 2005 09:52:18 +0000 (UTC)
Subject: [Twisted-Python] Reactors and New Asynchronous APIs
Message-ID: <loom.20050505T115111-651@post.gmane.org>

Hello,
I have several questions about twisted reactors and extending the twisted
framework with new asynchronous APIs.

1- What is the status of the IOCP reactor? Is it stable? If it is, is there any
reason for not selecting it as the default reactor for win32 NT platforms?

2- I am considering the integration of a custom database API (like Berkeley DB)
in a twisted application. I could easily wrap the API in a C++ python module and
access it synchronously from twisted, at least in a prototyping phase. 
Obviously, if the blocking calls are too long it would make the whole framework
completely useless. Then, the calls could be made from twisted managed threads.
Assuming the module code was written to minimize GIL contention it would 
probably greatly improve the situation. The most efficient solution would be
to plug the asynchronous API directly into the reactor: 

Is it possible to extend reactors with new asynchronous API implemented in
separate client modules?

With my little knowledge of the twisted framework and quick glances at the
selectreactor and iocpreactor implementation, I think the answer is no.
The practical solution would be to duplicate the reactor code and extend it
with the new API calls.

I do not know if it would be easy or not to provide a pluggable asynchronous
framework *at C module level*. Basically, the reactor is nothing else than a
thread-safe event queue with a (post/get)-event API. If this abstraction can be
implemented at C level, then plugging new asynchronous handlers would be clearly
doable, _iocp.c is a good example for that. Now, I am not really knowledgeable
(yet) about python C module coding, and I guess it is not exactly easy to bind
C callbacks from one python C module into another using normal python code as
glue. In the end, this is just another plugin/component system like COM to
write so...

Any thoughts?

Patrick M?zard





From mesozoic at polynode.com  Thu May  5 08:58:01 2005
From: mesozoic at polynode.com (Alex Levy)
Date: Thu, 05 May 2005 08:58:01 -0400
Subject: [Twisted-Python] Re: twistedmatrix.com gets a touch-up
In-Reply-To: <605BDB45-31CF-46E3-8FB1-6F5CD3A1C9CA@redivi.com>
References: <20050505040751.GC29859@perpetual.moxn.net>
	<605BDB45-31CF-46E3-8FB1-6F5CD3A1C9CA@redivi.com>
Message-ID: <427A1859.8010201@polynode.com>

Bob Ippolito wrote:
> Man, what the hell are we going to complain about now that there are  
> obvious documentation links on the front page!?  You suck :)

Those links weren't actually part of my changes, but that's besides the 
point. I'm sure you guys can find other things to groan about for a while ;)

-- 
Alex Levy
WWW: http://mesozoic.geecs.org

"Never let your sense of morals prevent you from doing what is right."
  -- Salvor Hardin, Isaac Asimov's _Foundation_




From justinjohnson at gmail.com  Thu May  5 09:33:06 2005
From: justinjohnson at gmail.com (Justin Johnson)
Date: Thu, 5 May 2005 08:33:06 -0500
Subject: [Twisted-Python] Reactors and New Asynchronous APIs
In-Reply-To: <loom.20050505T115111-651@post.gmane.org>
References: <loom.20050505T115111-651@post.gmane.org>
Message-ID: <94a776e7050505063361e5879e@mail.gmail.com>

On 5/5/05, Patrick M?zard <pmezard at gmail.com> wrote: 
> 
> Hello,
> I have several questions about twisted reactors and extending the twisted
> framework with new asynchronous APIs.
> 
> 1- What is the status of the IOCP reactor? Is it stable? If it is, is 
> there any
> reason for not selecting it as the default reactor for win32 NT platforms?

 The IOCP reactor doesn't support spawnProcess, among other things, which is 
why I currently can't use it. The author (PenguinOf in IRC) was also going 
to submit a list of bugs he knows about. Here are the notes I jotted notes 
down in IRC.

   1. always resets connection instead of closing it nicely 
   2. need half-close support 
   3. need fancy optimizations, like multiple threads and multiple 
   outstanding read requests per socket 
   4. redesign proactor 
   5. reactor.shutdown doesn't cancel


2- I am considering the integration of a custom database API (like Berkeley 
> DB)
> in a twisted application. I could easily wrap the API in a C++ python 
> module and
> access it synchronously from twisted, at least in a prototyping phase.
> Obviously, if the blocking calls are too long it would make the whole 
> framework
> completely useless. Then, the calls could be made from twisted managed 
> threads.
> Assuming the module code was written to minimize GIL contention it would
> probably greatly improve the situation. The most efficient solution would 
> be
> to plug the asynchronous API directly into the reactor:
> 
> Is it possible to extend reactors with new asynchronous API implemented in
> separate client modules?
> 
> With my little knowledge of the twisted framework and quick glances at the
> selectreactor and iocpreactor implementation, I think the answer is no.
> The practical solution would be to duplicate the reactor code and extend 
> it
> with the new API calls.
> 
> I do not know if it would be easy or not to provide a pluggable 
> asynchronous
> framework *at C module level*. Basically, the reactor is nothing else than 
> a
> thread-safe event queue with a (post/get)-event API. If this abstraction 
> can be
> implemented at C level, then plugging new asynchronous handlers would be 
> clearly
> doable, _iocp.c is a good example for that. Now, I am not really 
> knowledgeable
> (yet) about python C module coding, and I guess it is not exactly easy to 
> bind
> C callbacks from one python C module into another using normal python code 
> as
> glue. In the end, this is just another plugin/component system like COM to
> write so...
> 
> Any thoughts?
> 
> Patrick M?zard
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050505/5dc570e5/attachment.htm 

From bob at redivi.com  Thu May  5 09:39:42 2005
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 5 May 2005 09:39:42 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <4279BD80.9080702@twistedmatrix.com>
References: <42792BAC.1050701@rogers.com>
	<1A5DF4BE-AEE0-43E6-B9EA-DE3E29DF0B70@redivi.com>
	<4279BD80.9080702@twistedmatrix.com>
Message-ID: <8875358E-5653-407A-B21E-7B9A4C0EAE2F@redivi.com>


On May 5, 2005, at 2:30 AM, Tommi Virtanen wrote:

> Bob Ippolito wrote:
>
>> That's why it's better if you don't install Twisted, just make  
>> its  source code part of your project.  That's what you should be  
>> doing  for just about any dependency, especially those where you  
>> don't need  extension modules.
>>
>
> Eww. -1 on that. As a Debian person, I tend to spend a lot of time
> dekludging things where upstream includes 5 libraries with the  
> project,
> and will not use system-installed libraries. Not to speak of the bloat
> in the size of the source tarballs, which is multiplied by a _lot_  
> when
> it comes to Debian.

I'm not talking about open source software, I'm talking about  
deploying Twisted in the real world.

-bob




From bob at redivi.com  Thu May  5 09:46:23 2005
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 5 May 2005 09:46:23 -0400
Subject: [Twisted-Python] Reactors and New Asynchronous APIs
In-Reply-To: <loom.20050505T115111-651@post.gmane.org>
References: <loom.20050505T115111-651@post.gmane.org>
Message-ID: <3A740F41-7FE0-49C7-BB55-4727855384A6@redivi.com>


On May 5, 2005, at 5:52 AM, Patrick M?zard wrote:

> 2- I am considering the integration of a custom database API (like  
> Berkeley DB)
> in a twisted application. I could easily wrap the API in a C++  
> python module and
> access it synchronously from twisted, at least in a prototyping phase.
> Obviously, if the blocking calls are too long it would make the  
> whole framework
> completely useless. Then, the calls could be made from twisted  
> managed threads.
> Assuming the module code was written to minimize GIL contention it  
> would
> probably greatly improve the situation. The most efficient solution  
> would be
> to plug the asynchronous API directly into the reactor:
>
> Is it possible to extend reactors with new asynchronous API  
> implemented in
> separate client modules?

No, that's fundamentally impossible.  Unless you have some resource  
the API you're using understands (i.e. a file descriptor), then  
there's no way you're going to be able to wake up a blocking call to  
select(), WaitForMultipleObjects, or whatever.

What you probably want to do is run your code in a separate thread,  
and notify the main thread when something happens.  (e.g.  
callInThread, etc.).  See threadedselectreactor (in svn) for an  
inversion of this idea -- which runs (the blocking part of) Twisted  
in a separate thread and notifies your foreign event loop when  
something happens.

> With my little knowledge of the twisted framework and quick glances  
> at the
> selectreactor and iocpreactor implementation, I think the answer is  
> no.
> The practical solution would be to duplicate the reactor code and  
> extend it
> with the new API calls.
>
> I do not know if it would be easy or not to provide a pluggable  
> asynchronous
> framework *at C module level*. Basically, the reactor is nothing  
> else than a
> thread-safe event queue with a (post/get)-event API. If this  
> abstraction can be
> implemented at C level, then plugging new asynchronous handlers  
> would be clearly
> doable, _iocp.c is a good example for that. Now, I am not really  
> knowledgeable
> (yet) about python C module coding, and I guess it is not exactly  
> easy to bind
> C callbacks from one python C module into another using normal  
> python code as
> glue. In the end, this is just another plugin/component system like  
> COM to
> write so...

If the reactor just polled until something happened and spun 100%  
CPU, then sure, you could integrate whatever the hell "asynchronous"  
API you wanted.  That's not how anything (should) work in a multi- 
tasking operating system.  That's not even driven.

-bob




From tpherndon at optonline.net  Thu May  5 11:18:18 2005
From: tpherndon at optonline.net (T. Peter Herndon)
Date: Thu, 5 May 2005 11:18:18 -0400
Subject: [Twisted-Python] twistedmatrix.com gets a touch-up
In-Reply-To: <20050505040751.GC29859@perpetual.moxn.net>
References: <20050505040751.GC29859@perpetual.moxn.net>
Message-ID: <E6CC5A6E-E9E1-4240-B6E2-92D1101492B3@optonline.net>

It looks good in Safari 2.0, I like the color splashes.  The  
newsentry divs could stand to have the published date in the entry  
title.  But then, if no news updates are posted for a while, the page  
would start to look old and crufty.  E.g., New Viewer:  "Hmm,  
Twisted.  Nice website.  Oh, wait -- project must be dead, since the  
last news entry was published 18 months ago.  Oh, well, never mind."   
So, if you do put dates in, somebody needs to write news entries  
regularly (not necessarily frequently, just regularly).

My 2 cents,

---Peter Herndon
On May 5, 2005, at 12:07 AM, Alex Levy wrote:

> Given the recent discussion of Twisted's "professional face", this  
> seems
> more than a little apropos.
>
> twistedmatrix.com has been updated with some new CSS and a little more
> color. I've tested it on Firefox/Win and IE6/Win, but it needs a  
> lot more
> scrutiny. Everyone, please throw it into your browser(s) of choice  
> and give
> a yell if something looks awry.
>
> Thanks to Chris Armstrong for giving me permission to run amok in the
> WebSite branch.
>
> -- 
> Alex Levy
> WWW: http://mesozoic.geecs.org/
>
> "Never let your sense of morals prevent you from doing what is right."
>  -- Salvor Hardin, Isaac Asimov's _Foundation_
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>





From projects at reedflute.com  Thu May  5 12:08:38 2005
From: projects at reedflute.com (Eugene Coetzee)
Date: Thu, 05 May 2005 18:08:38 +0200
Subject: [Twisted-Python] twistedmatrix.com gets a touch-up
In-Reply-To: <E6CC5A6E-E9E1-4240-B6E2-92D1101492B3@optonline.net>
References: <20050505040751.GC29859@perpetual.moxn.net>
	<E6CC5A6E-E9E1-4240-B6E2-92D1101492B3@optonline.net>
Message-ID: <427A4506.2000807@reedflute.com>

T. Peter Herndon wrote:

> It looks good in Safari 2.0, I like the color splashes. 

Sure - it must have been done be the same genius in graphical arts who 
did www.kernel.org ;-)


Web                 -> www.reedflute.com
=============================================== 




From anthony at interlink.com.au  Thu May  5 12:16:17 2005
From: anthony at interlink.com.au (Anthony Baxter)
Date: Fri, 6 May 2005 02:16:17 +1000
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <60ed19d40505041657480dc31c@mail.gmail.com>
References: <42792BAC.1050701@rogers.com> <42793FB4.2070304@divmod.com>
	<60ed19d40505041657480dc31c@mail.gmail.com>
Message-ID: <200505060216.24080.anthony@interlink.com.au>

On Thursday 05 May 2005 09:57, Christopher Armstrong wrote:
> To respond to your question, glyph, the only thing I can imagine
> helping Twisted a significant amount right now is if some company
> employing a Twisted hacker would give that Twisted hacker half a day a
> week to *generally* maintain Twisted. Just those 4.5 focussed hours a
> week would help an amazing amount, I reckon. Not just working on the
> web site and docs, but the code as well, like fixing bugs in the
> tracker. Of course, most of those companies that employ us do pay us
> for developing certain contributions to Twisted, but that's not really
> benefitting the project as a whole, it's just benefitting very small
> niches within it.
>
> Unfortunately, all of the companies employing Twisted hackers (Divmod,
> Nunatak, ITA, and some others) are either too poor or don't care
> enough about Twisted to make that offer.

That's going to be a really hard thing to find. For instance, as far as I'm 
aware, there's no-one being paid to work on Python - I spend a small amount 
of work time on it, but certainly nowhere near half a day a week. (I 
generally take a half day or day off when it comes to cutting a release). 
If we can't find companies to fund work on Python (a much, much more
visible project, with a whole pile of companies relying on it) I don't hold 
out much chance for someone funding Twisted as a whole. 

Having said that, I *could* see people being able to justify time on various 
Twisted subprojects because they need it for work. 

And yes, trial needs to be dropped off a bridge. 

Anthony
-- 
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From stpeter at jabber.org  Thu May  5 12:32:42 2005
From: stpeter at jabber.org (Peter Saint-Andre)
Date: Thu, 5 May 2005 11:32:42 -0500
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <20050504222757.GD11357@sourdust.home.puzzling.org>
References: <42792BAC.1050701@rogers.com>
	<1115238466.8476.44.camel@localhost.localdomain>
	<4279383B.4060505@comcast.net> <42793FB4.2070304@divmod.com>
	<20050504222757.GD11357@sourdust.home.puzzling.org>
Message-ID: <20050505163242.GJ15714@jabber.org>

On Thu, May 05, 2005 at 08:27:57AM +1000, Mary Gardiner wrote:
> On Wed, May 04, 2005, Glyph Lefkowitz wrote:
> > Worse, this is a long-standing problem I don't see any effort underway
> > to rectify it.  Other open-source projects have gotten to this point
> > and found huge, helpful teams of busy bees to fix the website, keep
> > the documents up to date, wrangle the release notes and annotate the
> > development process.
> 
> What particular projects do you have in mind here? I ask because it
> could well be useful to actually go to them and say "hey, where did you
> find these people?" In particular, it would be useful to ask that
> question of things that will be used by programmers: Python itself,
> other languages developed/maintained by communities, the graphical
> toolkits and other big libraries... (answers from, say, the GNOME user
> documentation people might still be useful, but I think slightly less
> so, because that documentation can be written by non-programmers).
> 
> I can think of all kinds of answers ("they just appeared!", "we don't
> merge features without review of their documentation," "we paid people,"
> "we just love writing documentation," "there's these two crazy people
> who just love writing documentation," "there's this one company who
> employs our major developers and also employs some tech writers,") but I
> don't know what the correct ones are.

In my experience (on Jabber and a few smaller projects), the hardest
thing is finding people who want to write docs. Developers don't want 
to do it or don't have the time, and most folks who like to write are
not especially technical. They might write a howto for end users, but 
documenting something like Twisted is beyond their ken. In the Jabber
world I have been writing docs since mid-2000 but even so I mostly
focus on protocol documentation because writing docs for various
implementations (libraries, servers, clients) would be never-ending.

My $0.02.

Peter

-- 
Peter Saint-Andre
Jabber Software Foundation
http://www.jabber.org/people/stpeter.shtml




From bob at redivi.com  Thu May  5 12:46:48 2005
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 5 May 2005 12:46:48 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <20050505163242.GJ15714@jabber.org>
References: <42792BAC.1050701@rogers.com>
	<1115238466.8476.44.camel@localhost.localdomain>
	<4279383B.4060505@comcast.net> <42793FB4.2070304@divmod.com>
	<20050504222757.GD11357@sourdust.home.puzzling.org>
	<20050505163242.GJ15714@jabber.org>
Message-ID: <E9A89BE0-E0DC-4574-B66A-C06A44208F25@redivi.com>


On May 5, 2005, at 12:32 PM, Peter Saint-Andre wrote:

> On Thu, May 05, 2005 at 08:27:57AM +1000, Mary Gardiner wrote:
>
>> On Wed, May 04, 2005, Glyph Lefkowitz wrote:
>>
>>> Worse, this is a long-standing problem I don't see any effort  
>>> underway
>>> to rectify it.  Other open-source projects have gotten to this point
>>> and found huge, helpful teams of busy bees to fix the website, keep
>>> the documents up to date, wrangle the release notes and annotate the
>>> development process.
>>>
>>
>> What particular projects do you have in mind here? I ask because it
>> could well be useful to actually go to them and say "hey, where  
>> did you
>> find these people?" In particular, it would be useful to ask that
>> question of things that will be used by programmers: Python itself,
>> other languages developed/maintained by communities, the graphical
>> toolkits and other big libraries... (answers from, say, the GNOME  
>> user
>> documentation people might still be useful, but I think slightly less
>> so, because that documentation can be written by non-programmers).
>>
>> I can think of all kinds of answers ("they just appeared!", "we don't
>> merge features without review of their documentation," "we paid  
>> people,"
>> "we just love writing documentation," "there's these two crazy people
>> who just love writing documentation," "there's this one company who
>> employs our major developers and also employs some tech writers,")  
>> but I
>> don't know what the correct ones are.
>>
>
> In my experience (on Jabber and a few smaller projects), the hardest
> thing is finding people who want to write docs. Developers don't want
> to do it or don't have the time, and most folks who like to write are
> not especially technical. They might write a howto for end users, but
> documenting something like Twisted is beyond their ken. In the Jabber
> world I have been writing docs since mid-2000 but even so I mostly
> focus on protocol documentation because writing docs for various
> implementations (libraries, servers, clients) would be never-ending.

I think there's probably a lot of Twisted "end-user documentation"  
lying around in the form of presentations and tutorials given at  
various conferences.  If someone aggregates the links to all of that  
stuff, it would probably be a useful resource to new-ish users.

-bob




From grimmtooth at gmail.com  Thu May  5 12:54:46 2005
From: grimmtooth at gmail.com (Jeff Grimmett)
Date: Thu, 5 May 2005 12:54:46 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <E9A89BE0-E0DC-4574-B66A-C06A44208F25@redivi.com>
References: <42792BAC.1050701@rogers.com>
	<1115238466.8476.44.camel@localhost.localdomain>
	<4279383B.4060505@comcast.net> <42793FB4.2070304@divmod.com>
	<20050504222757.GD11357@sourdust.home.puzzling.org>
	<20050505163242.GJ15714@jabber.org>
	<E9A89BE0-E0DC-4574-B66A-C06A44208F25@redivi.com>
Message-ID: <8f4623fb050505095457c74d0b@mail.gmail.com>

On 5/5/05, Bob Ippolito <bob at redivi.com> wrote:

> I think there's probably a lot of Twisted "end-user documentation"
> lying around in the form of presentations and tutorials given at
> various conferences. If someone aggregates the links to all of that
> stuff, it would probably be a useful resource to new-ish users.
> 

Whatever happened to the idea of a twisted Wiki, anyway? That's the sort of 
thing it's good at.

-- 

Best,

Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050505/6358297b/attachment.htm 

From justinjohnson at gmail.com  Thu May  5 12:58:09 2005
From: justinjohnson at gmail.com (Justin Johnson)
Date: Thu, 5 May 2005 11:58:09 -0500
Subject: [Twisted-Python] Building Twisted on Windows
Message-ID: <94a776e7050505095845ce8174@mail.gmail.com>

Will someone who has experience building the latest Twisted code on Windows 
using Python2.4 please shed some light on the problems I'm experiencing, 
documented in http://twistedmatrix.com/bugs/issue1017?
 Thanks!
Justin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050505/6a70f30a/attachment.htm 

From jarrod.roberson at gmail.com  Thu May  5 13:05:40 2005
From: jarrod.roberson at gmail.com (jarrod roberson)
Date: Thu, 5 May 2005 13:05:40 -0400
Subject: [Twisted-Python] twistedmatrix.com gets a touch-up
In-Reply-To: <427A4506.2000807@reedflute.com>
References: <20050505040751.GC29859@perpetual.moxn.net>
	<E6CC5A6E-E9E1-4240-B6E2-92D1101492B3@optonline.net>
	<427A4506.2000807@reedflute.com>
Message-ID: <2389d47305050510057df12c11@mail.gmail.com>

Personally I like the very spartan no-graphics look and feel.

The one thing that is still needed is 2.x API Docs!

-- 
If you don't know what you want, you probably need a nap.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050505/34c36770/attachment.htm 

From exarkun at divmod.com  Thu May  5 13:25:09 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Thu, 05 May 2005 17:25:09 GMT
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <8f4623fb050505095457c74d0b@mail.gmail.com>
Message-ID: <20050505172509.15422.1369588982.divmod.quotient.20341@ohm>

On Thu, 5 May 2005 12:54:46 -0400, Jeff Grimmett <grimmtooth at gmail.com> wrote:
>On 5/5/05, Bob Ippolito <bob at redivi.com> wrote:
>
>> I think there's probably a lot of Twisted "end-user documentation"
>> lying around in the form of presentations and tutorials given at
>> various conferences. If someone aggregates the links to all of that
>> stuff, it would probably be a useful resource to new-ish users.
>>
>
>Whatever happened to the idea of a twisted Wiki, anyway? That's the sort of
>thing it's good at.

  There's lots of wiki software out there already.  Writing more won't solve any pressing problem, I think (in fact, it would just have to be documented...).  In the past, web-based content systems haven't been very successful with Twisted: people just don't update them frequently enough to be useful.  If enough people wanted to make a serious committment to getting a Twisted wiki established, I'm sure some hosting could be arranged, but just tossing up a wiki and hoping people contribute to it probably isn't going to fly.

  Jp



From aerkalov at gmail.com  Thu May  5 13:45:14 2005
From: aerkalov at gmail.com (Aleksandar Erkalovic)
Date: Thu, 5 May 2005 19:45:14 +0200
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <20050505172509.15422.1369588982.divmod.quotient.20341@ohm>
References: <8f4623fb050505095457c74d0b@mail.gmail.com>
	<20050505172509.15422.1369588982.divmod.quotient.20341@ohm>
Message-ID: <34ed656005050510455927c88f@mail.gmail.com>

> 
> There's lots of wiki software out there already. Writing more won't solve 
> any pressing problem, I think (in fact, it would just have to be 
> documented...). In the past, web-based content systems haven't been very 
> successful with Twisted: people just don't update them frequently enough to 
> be useful. If enough people wanted to make a serious committment to getting 
> a Twisted wiki established, I'm sure some hosting could be arranged, but 
> just tossing up a wiki and hoping people contribute to it probably isn't 
> going to fly.



well that is true. i am developing one "wiki like" software in twisted (and 
now nevow). 
but from the moment i started to write it i knew already on what machines 
will it be hosted, and now i have some 4 different servers (and around 100 
sites) in different countries hosting it. but that is all. no help from 
others, no feedback, no any chance that somebody can use it and run it on 
his machine. not to mention the fact that i have to do all administrative 
stuff, all the template modificatons, all the "oh my... i lost my password" 
jobs :)

anywho you can check it on http://tamtam.mi2.hr:8888/NoviTam/ and 2 years 
old version at http://tamtam.mi2.hr/TamTamDev/

-- 
http://aco.mi2.hr/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050505/560187b0/attachment.htm 

From mwh at python.net  Thu May  5 13:59:05 2005
From: mwh at python.net (Michael Hudson)
Date: Thu, 05 May 2005 18:59:05 +0100
Subject: [Twisted-Python] Re: Evangelism notes...
References: <42792BAC.1050701@rogers.com> <42793FB4.2070304@divmod.com>
	<60ed19d40505041657480dc31c@mail.gmail.com>
	<200505060216.24080.anthony@interlink.com.au>
Message-ID: <2mmzr9wo46.fsf@starship.python.net>

Anthony Baxter <anthony at interlink.com.au> writes:

> On Thursday 05 May 2005 09:57, Christopher Armstrong wrote:
>> To respond to your question, glyph, the only thing I can imagine
>> helping Twisted a significant amount right now is if some company
>> employing a Twisted hacker would give that Twisted hacker half a day a
>> week to *generally* maintain Twisted. Just those 4.5 focussed hours a
>> week would help an amazing amount, I reckon. Not just working on the
>> web site and docs, but the code as well, like fixing bugs in the
>> tracker. Of course, most of those companies that employ us do pay us
>> for developing certain contributions to Twisted, but that's not really
>> benefitting the project as a whole, it's just benefitting very small
>> niches within it.
>>
>> Unfortunately, all of the companies employing Twisted hackers (Divmod,
>> Nunatak, ITA, and some others) are either too poor or don't care
>> enough about Twisted to make that offer.
>
> That's going to be a really hard thing to find. For instance, as far as I'm 
> aware, there's no-one being paid to work on Python - I spend a small amount 
> of work time on it, but certainly nowhere near half a day a week. 

I understand that Guido has a certain amount of Python time written
into his contract, but much of this is spent attending conferences and
so on.

Python appears to have more worker bees than Twisted who do the kind
of general work radix was asking for, despite none of them being paid
to do it; this is probably mostly a function of just being a bigger,
more visible project (after all, every Twisted user is a Python user).

> (I generally take a half day or day off when it comes to cutting a
> release).  If we can't find companies to fund work on Python (a
> much, much more visible project, with a whole pile of companies
> relying on it) I don't hold out much chance for someone funding
> Twisted as a whole.

Of course, the PSF has a certain amount of money and while none of it
has been spent directly on Python so far, some of it has gone on
producing training material (for scientists).  I personally doubt that
the PSF would find funding the production of such material
sufficiently in line with its interests but if noone asks, we'll never
knows.

Cheers,
mwh

-- 
  <Aardappel> this "I hate c++" is so old
  <dash> it's as old as C++, yes
                                                -- from Twisted.Quotes




From grant at osafoundation.org  Thu May  5 14:49:20 2005
From: grant at osafoundation.org (Grant Baillie)
Date: Thu, 5 May 2005 11:49:20 -0700
Subject: [Twisted-Python] Hanging test cases (Was: Evangelism notes...)
In-Reply-To: <42792BAC.1050701@rogers.com>
References: <42792BAC.1050701@rogers.com>
Message-ID: <C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>

On May 4, 2005, at 1:08 PM, Mike C. Fletcher wrote:

>     * Project was delivered, paid for, and has been running in
>       production for a few weeks, but 2 reported bugs cropped up
>           o To fix one, needed to update to 2.0 (deferred object
>             cleanup)... this caused rather a lot of upset, as the
>             sysadmins were upset about such a huge package needing  
> to be
>             updated (and they tried to do just the core packages  
> first,
>             which doubled the work-load involved in preparing that
>             update versus using Sumo)
>           o Fixing the other was no big deal, except that something in
>             2.0 changed how the test-suite was running so that it now
>             hung on completion...

Did you ever figure out why? I have just run into similar behaviour  
myself after upgrading to 2.0. Here's an example that hangs for me on  
Mac OS X (10.4) after the final print:

---------------
from twisted.internet import reactor, defer, threads
from twisted.trial.util import deferredResult
from twisted.web.client import getPage
import time


def itFired(result):
     print "Deferred fired: %s" % result
     return result

d = getPage("http://www.example.com/").addBoth(itFired)

print "Returned: %s" % deferredResult(d)
print "Done; exiting"
---------------


So far as I can tell, the python threading module has an atexit  
handler that's hanging. Also, if I replace the deferToThread() with a  
twisted.web.client.getPage(), I still get the same hang.

--Grant

Grant Baillie
Open Source Applications Foundation




From grant at osafoundation.org  Thu May  5 15:05:23 2005
From: grant at osafoundation.org (Grant Baillie)
Date: Thu, 5 May 2005 12:05:23 -0700
Subject: [Twisted-Python] Hanging test cases (Was: Evangelism notes...)
In-Reply-To: <C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>
References: <42792BAC.1050701@rogers.com>
	<C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>
Message-ID: <1D4A97FB-6815-49A8-B570-BC569F7CDE98@osafoundation.org>


On May 5, 2005, at 11:49 AM, Grant Baillie wrote:

> So far as I can tell, the python threading module has an atexit  
> handler that's hanging. Also, if I replace the deferToThread() with  
> a twisted.web.client.getPage(), I still get the same hang.

Er, I'd already replaced the deferToThread() in an earlier version of  
that file with twisted.web.client.getPage(), for anyone following  
along at home.

I also found a hackaround, which is to insert the following before  
the call to getPage:

#---------------
import threading
# threading seems to install an atexit() handler that
# can wedge if you've run the reactor. So, we import it
# first....

import atexit

def runAndStop():
     if not reactor.running:
         reactor.callLater(0, reactor.stop)
         reactor.run()

# ... then our handler will be called before threading's.
atexit.register(runAndStop)
#---------------

I'm not sure if this is a problem in python, in twisted's use of  
threading, or in trial.deferredResult, though.

--Grant

Grant Baillie
Open Source Applications Foundation






From jkrushen at gmail.com  Thu May  5 15:06:41 2005
From: jkrushen at gmail.com (Jordan Krushen)
Date: Thu, 5 May 2005 12:06:41 -0700
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <8f4623fb050505095457c74d0b@mail.gmail.com>
References: <42792BAC.1050701@rogers.com>
	<1115238466.8476.44.camel@localhost.localdomain>
	<4279383B.4060505@comcast.net> <42793FB4.2070304@divmod.com>
	<20050504222757.GD11357@sourdust.home.puzzling.org>
	<20050505163242.GJ15714@jabber.org>
	<E9A89BE0-E0DC-4574-B66A-C06A44208F25@redivi.com>
	<8f4623fb050505095457c74d0b@mail.gmail.com>
Message-ID: <b811ba7305050512061ad573dd@mail.gmail.com>

On 5/5/05, Jeff Grimmett <grimmtooth at gmail.com> wrote:

> On 5/5/05, Bob Ippolito <bob at redivi.com> wrote:
> 
> > I think there's probably a lot of Twisted "end-user documentation"
> > lying around in the form of presentations and tutorials given at 
> > various conferences.  If someone aggregates the links to all of that
> > stuff, it would probably be a useful resource to new-ish users.

>  Whatever happened to the idea of a twisted Wiki, anyway? That's the sort of
> thing it's good at.

I was thinking more along the lines of an RSS/blog aggregator on the
main site, taking in the developers' (and possibly some users') blogs,
and filtering them for relevance.

I know I get a ton of value out of reading various Python-, Twisted-,
and PyObjC-related posts in the blogosphere (though I rather dislike
RSS).  There's a different feel to that kind of info; it tends to feel
more personally relevant.  It's relevant enough for *someone* to write
about it, one hopes it's relevant enough for someone else to read :)

Wouldn't require [much] new code to get working vs. a wiki, it'd be
constantly updated, and once set up, nobody would have to write any
more than they already do.

J.



From stpeter at jabber.org  Thu May  5 15:26:08 2005
From: stpeter at jabber.org (Peter Saint-Andre)
Date: Thu, 5 May 2005 14:26:08 -0500
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <b811ba7305050512061ad573dd@mail.gmail.com>
References: <42792BAC.1050701@rogers.com>
	<1115238466.8476.44.camel@localhost.localdomain>
	<4279383B.4060505@comcast.net> <42793FB4.2070304@divmod.com>
	<20050504222757.GD11357@sourdust.home.puzzling.org>
	<20050505163242.GJ15714@jabber.org>
	<E9A89BE0-E0DC-4574-B66A-C06A44208F25@redivi.com>
	<8f4623fb050505095457c74d0b@mail.gmail.com>
	<b811ba7305050512061ad573dd@mail.gmail.com>
Message-ID: <20050505192608.GO15714@jabber.org>

On Thu, May 05, 2005 at 12:06:41PM -0700, Jordan Krushen wrote:
> On 5/5/05, Jeff Grimmett <grimmtooth at gmail.com> wrote:
> 
> > On 5/5/05, Bob Ippolito <bob at redivi.com> wrote:
> > 
> > > I think there's probably a lot of Twisted "end-user documentation"
> > > lying around in the form of presentations and tutorials given at 
> > > various conferences.  If someone aggregates the links to all of that
> > > stuff, it would probably be a useful resource to new-ish users.
> 
> >  Whatever happened to the idea of a twisted Wiki, anyway? That's the sort of
> > thing it's good at.
> 
> I was thinking more along the lines of an RSS/blog aggregator on the
> main site, taking in the developers' (and possibly some users') blogs,
> and filtering them for relevance.

Planet Twisted, anyone?

http://www.planetplanet.org/

Ralph Meijer runs Planet Jabber, he might have some insights...

http://planet.jabber.org/

/psa




From bob at redivi.com  Thu May  5 15:26:23 2005
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 5 May 2005 15:26:23 -0400
Subject: [Twisted-Python] Hanging test cases (Was: Evangelism notes...)
In-Reply-To: <1D4A97FB-6815-49A8-B570-BC569F7CDE98@osafoundation.org>
References: <42792BAC.1050701@rogers.com>
	<C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>
	<1D4A97FB-6815-49A8-B570-BC569F7CDE98@osafoundation.org>
Message-ID: <3309BAEB-4EAF-4CBD-9C09-47893BBD7E9A@redivi.com>


On May 5, 2005, at 3:05 PM, Grant Baillie wrote:

>
> On May 5, 2005, at 11:49 AM, Grant Baillie wrote:
>
>
>> So far as I can tell, the python threading module has an atexit  
>> handler that's hanging. Also, if I replace the deferToThread()  
>> with a twisted.web.client.getPage(), I still get the same hang.
>>
>
> Er, I'd already replaced the deferToThread() in an earlier version  
> of that file with twisted.web.client.getPage(), for anyone  
> following along at home.
>
> I also found a hackaround, which is to insert the following before  
> the call to getPage:
>
> #---------------
> import threading
> # threading seems to install an atexit() handler that
> # can wedge if you've run the reactor. So, we import it
> # first....
>
> import atexit
>
> def runAndStop():
>     if not reactor.running:
>         reactor.callLater(0, reactor.stop)
>         reactor.run()
>
> # ... then our handler will be called before threading's.
> atexit.register(runAndStop)
> #---------------
>
> I'm not sure if this is a problem in python, in twisted's use of  
> threading, or in trial.deferredResult, though.

Almost definitely a combination of 2 and 3, with 3 being the one  
really at fault.  Trial is horribly, horribly broken by design and  
it's really just an accident that it works at all.  The expectations  
a lot of the tests have about the reactor are also broken, but that's  
mostly just a consequence of trial sucking.

-bob




From jarrod.roberson at gmail.com  Thu May  5 15:34:01 2005
From: jarrod.roberson at gmail.com (jarrod roberson)
Date: Thu, 5 May 2005 15:34:01 -0400
Subject: [Twisted-Python] Using Twisted inside mod_python
Message-ID: <2389d47305050512346f29e7cf@mail.gmail.com>

I want to embed a Twisted Server ( specifically a ZeroConf implemenation I 
wrote ) into Apache2.

I have it running from a PythonImport and attaching to an interpreter and 
all that goodness.
It prints out all the queries and answers it received to the apache log just 
fine. Apache works just fine serving normal stuff.

The problem is anytime I make any kind of method calls into my global object 
from a handler it just hangs Apache2 :-(

I have tried it with worker.c and prefork.c and both exhibit the same 
behavior.

Any suggestions?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050505/ef9eee4d/attachment.htm 

From jkrushen at gmail.com  Thu May  5 15:46:59 2005
From: jkrushen at gmail.com (Jordan Krushen)
Date: Thu, 5 May 2005 12:46:59 -0700
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <20050505192608.GO15714@jabber.org>
References: <42792BAC.1050701@rogers.com>
	<1115238466.8476.44.camel@localhost.localdomain>
	<4279383B.4060505@comcast.net> <42793FB4.2070304@divmod.com>
	<20050504222757.GD11357@sourdust.home.puzzling.org>
	<20050505163242.GJ15714@jabber.org>
	<E9A89BE0-E0DC-4574-B66A-C06A44208F25@redivi.com>
	<8f4623fb050505095457c74d0b@mail.gmail.com>
	<b811ba7305050512061ad573dd@mail.gmail.com>
	<20050505192608.GO15714@jabber.org>
Message-ID: <b811ba7305050512461acd6f08@mail.gmail.com>

On 5/5/05, Peter Saint-Andre <stpeter at jabber.org> wrote:

> On Thu, May 05, 2005 at 12:06:41PM -0700, Jordan Krushen wrote:
> >
> > I was thinking more along the lines of an RSS/blog aggregator on the
> > main site, taking in the developers' (and possibly some users') blogs,
> > and filtering them for relevance.

> Planet Twisted, anyone?
> 
> http://www.planetplanet.org/

Well, see, that needs a link on the Twisted site :)

J.



From itamar at itamarst.org  Thu May  5 15:47:45 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 05 May 2005 15:47:45 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <20050505192608.GO15714@jabber.org>
References: <42792BAC.1050701@rogers.com>
	<1115238466.8476.44.camel@localhost.localdomain>
	<4279383B.4060505@comcast.net> <42793FB4.2070304@divmod.com>
	<20050504222757.GD11357@sourdust.home.puzzling.org>
	<20050505163242.GJ15714@jabber.org>
	<E9A89BE0-E0DC-4574-B66A-C06A44208F25@redivi.com>
	<8f4623fb050505095457c74d0b@mail.gmail.com>
	<b811ba7305050512061ad573dd@mail.gmail.com>
	<20050505192608.GO15714@jabber.org>
Message-ID: <1115322466.8187.33.camel@localhost.localdomain>

On Thu, 2005-05-05 at 14:26 -0500, Peter Saint-Andre wrote:

> Planet Twisted, anyone?

http://planet.twistedmatrix.com has been up for quite a while :)





From bob at redivi.com  Thu May  5 15:54:36 2005
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 5 May 2005 15:54:36 -0400
Subject: [Twisted-Python] Using Twisted inside mod_python
In-Reply-To: <2389d47305050512346f29e7cf@mail.gmail.com>
References: <2389d47305050512346f29e7cf@mail.gmail.com>
Message-ID: <27F22758-A0C9-4415-8378-3A05FB1364E0@redivi.com>


On May 5, 2005, at 3:34 PM, jarrod roberson wrote:

> I want to embed a Twisted Server ( specifically a ZeroConf  
> implemenation I wrote ) into Apache2.
>
> I have it running from a PythonImport and attaching to an  
> interpreter and all that goodness.
> It prints out all the queries and answers it received to the apache  
> log just fine. Apache works just fine serving normal stuff.
>
> The problem is anytime I make any kind of method calls into my  
> global object from a handler it just hangs Apache2 :-(
>
> I have tried it with worker.c and prefork.c and both exhibit the  
> same behavior.
>
> Any suggestions?

I don't think this is going to work.  At all.  Twisted needs more  
control than it's allowed to have from Apache.  You'll need to run  
all your Twisted stuff in a separate process and ProxyPass it to  
Apache (or some similar decoupling).

-bob




From stpeter at jabber.org  Thu May  5 16:05:10 2005
From: stpeter at jabber.org (Peter Saint-Andre)
Date: Thu, 5 May 2005 15:05:10 -0500
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <1115322466.8187.33.camel@localhost.localdomain>
References: <1115238466.8476.44.camel@localhost.localdomain>
	<4279383B.4060505@comcast.net> <42793FB4.2070304@divmod.com>
	<20050504222757.GD11357@sourdust.home.puzzling.org>
	<20050505163242.GJ15714@jabber.org>
	<E9A89BE0-E0DC-4574-B66A-C06A44208F25@redivi.com>
	<8f4623fb050505095457c74d0b@mail.gmail.com>
	<b811ba7305050512061ad573dd@mail.gmail.com>
	<20050505192608.GO15714@jabber.org>
	<1115322466.8187.33.camel@localhost.localdomain>
Message-ID: <20050505200510.GB19191@jabber.org>

On Thu, May 05, 2005 at 03:47:45PM -0400, Itamar Shtull-Trauring wrote:
> On Thu, 2005-05-05 at 14:26 -0500, Peter Saint-Andre wrote:
> 
> > Planet Twisted, anyone?
> 
> http://planet.twistedmatrix.com has been up for quite a while :)

I stand corrected. :-)

Peter




From bob at redivi.com  Thu May  5 16:05:37 2005
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 5 May 2005 16:05:37 -0400
Subject: [Twisted-Python] Using Twisted inside mod_python
In-Reply-To: <2389d473050505130126da9815@mail.gmail.com>
References: <2389d47305050512346f29e7cf@mail.gmail.com>
	<27F22758-A0C9-4415-8378-3A05FB1364E0@redivi.com>
	<2389d473050505130126da9815@mail.gmail.com>
Message-ID: <F6362F3A-7BA8-4479-AEAB-47135C58D182@redivi.com>


On May 5, 2005, at 4:01 PM, jarrod roberson wrote:

>
>
> On 5/5/05, Bob Ippolito <bob at redivi.com> wrote:
> On May 5, 2005, at 3:34 PM, jarrod roberson wrote:
>
> > I want to embed a Twisted Server ( specifically a ZeroConf
> > implemenation I wrote ) into Apache2.
> >
> > I have it running from a PythonImport and attaching to an
> > interpreter and all that goodness.
> > It prints out all the queries and answers it received to the apache
> > log just fine. Apache works just fine serving normal stuff.
> >
> > The problem is anytime I make any kind of method calls into my
> > global object from a handler it just hangs Apache2 :-(
> >
> > I have tried it with worker.c and prefork.c and both exhibit the
> > same behavior.
> >
> > Any suggestions?
>
> I don't think this is going to work.  At all.  Twisted needs more
> control than it's allowed to have from Apache.  You'll need to run
> all your Twisted stuff in a separate process and ProxyPass it to
> Apache (or some similar decoupling).
>
> -bob
>
>
> that was what I was afraid of but did not want to hear :-(
>
> can I at least use a Perspective Broker client from a handler you  
> think?

No, not unless you write a Perspective Broker client that doesn't  
depend on Twisted.

-bob




From mary-twisted at puzzling.org  Thu May  5 16:50:02 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Fri, 6 May 2005 06:50:02 +1000
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <b811ba7305050512461acd6f08@mail.gmail.com>
References: <1115238466.8476.44.camel@localhost.localdomain>
	<4279383B.4060505@comcast.net> <42793FB4.2070304@divmod.com>
	<20050504222757.GD11357@sourdust.home.puzzling.org>
	<20050505163242.GJ15714@jabber.org>
	<E9A89BE0-E0DC-4574-B66A-C06A44208F25@redivi.com>
	<8f4623fb050505095457c74d0b@mail.gmail.com>
	<b811ba7305050512061ad573dd@mail.gmail.com>
	<20050505192608.GO15714@jabber.org>
	<b811ba7305050512461acd6f08@mail.gmail.com>
Message-ID: <20050505205002.GG25625@sourdust.home.puzzling.org>

On Thu, May 05, 2005, Jordan Krushen wrote:
> On 5/5/05, Peter Saint-Andre <stpeter at jabber.org> wrote:
> > Planet Twisted, anyone?
> >  
> > http://www.planetplanet.org/
> 
> Well, see, that needs a link on the Twisted site :)

The Planet software itself, unless it's had a very radical re-write very
recently, does not use Twisted, so there's no reason to link to the
software.

http://planet.twistedmatrix.com/ does exist (as Itamar has already
pointed out) and could probably do with a link from somewhere.

-Mary



From mary-twisted at puzzling.org  Thu May  5 16:51:54 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Fri, 6 May 2005 06:51:54 +1000
Subject: [Twisted-Python] Re: Evangelism notes...
In-Reply-To: <2mmzr9wo46.fsf@starship.python.net>
References: <42792BAC.1050701@rogers.com> <42793FB4.2070304@divmod.com>
	<60ed19d40505041657480dc31c@mail.gmail.com>
	<200505060216.24080.anthony@interlink.com.au>
	<2mmzr9wo46.fsf@starship.python.net>
Message-ID: <20050505205154.GH25625@sourdust.home.puzzling.org>

On Thu, May 05, 2005, Michael Hudson wrote:
> Python appears to have more worker bees than Twisted who do the kind
> of general work radix was asking for, despite none of them being paid
> to do it; this is probably mostly a function of just being a bigger,
> more visible project (after all, every Twisted user is a Python user).

This probably shouldn't be assumed though. If that's all it is, OK,
damn. But if there's something about the Python community which is
qualitatively different and which encourages the kind of work being
discussed, Twisted should consider emulating it.

-Mary



From srichter at cosmos.phy.tufts.edu  Thu May  5 17:22:50 2005
From: srichter at cosmos.phy.tufts.edu (Stephan Richter)
Date: Thu, 5 May 2005 17:22:50 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <1115238976.8476.54.camel@localhost.localdomain>
References: <42792BAC.1050701@rogers.com>
	<1115238976.8476.54.camel@localhost.localdomain>
Message-ID: <200505051722.51259.srichter@cosmos.phy.tufts.edu>

On Wednesday 04 May 2005 16:36, Itamar Shtull-Trauring wrote:
> On Wed, 2005-05-04 at 16:08 -0400, Mike C. Fletcher wrote:
> > Don't know if the other project will be rewritten as well. ?Given
> > decision on this one, I'd imagine it will. ?I'd also predict that
> > Twisted is now Techne non Grata wrt any new development where it's not
> > an explicit requirement (given that we're going to be eating costs on
> > rewriting a project to eliminate it). ?Certainly I'll have a hard sell
> > going forward.
>
> Do you have any suggestions on how we can improve things? Besides "write
> more docs" which is basically always a given.

When we developed Zope 3, we put **huge** emphasis on documentation. As 
mentioned in the other mail, we made it a policy. Here are the things we did:

- We (mainly Jim) used a slide show and later plain text files to document how 
we imagined a feature to work. Basically we wrote Sci-Fi stories. Thus 
documentation was available before code.

- We also used a proposal process for larger features. This had a similar 
effect to the Sci-Fi presentation in that it documented the API before 
implementation. Many proposal authors made a point to update the proposal 
after the implementation, so that they would reflect the latest API. 

- We decided that Interfaces would be used for API documentation and public 
interfaces would always be found in the package's interfaces.py module, so 
people would always know where to go.

- We later developed a very custom (on purpose) API doc tool that would not 
only document interfaces, but their interaction with the system. For every 
interface you can see its adapters and views, or which utility provides the 
inspected interface. The doc tool was later enhanced to also provide 
documentation for any object, ZCML and plain text files.

- First we used regular unit tests for testing documentation, but eventually 
moved to file-based doctests, since they fulfill both XP requirements for 
tests: testing and documenting. I can't overstress the success. Every 
recently created or refactored package has now a README.txt file clearly 
documenting the API and it is never outdated, because it is part of the test 
suite. 

- We had two people write a book and find a publisher. My book is even 
semi-freely available as one can use it for non-commercial purposes.

So, what's next? This E-mail is not suppose to show what's Zope 3 did better 
than Twisted or vice versa, but demonstrate some concrete things that can be 
done to improve the documentation situation:

- I strongly suggest that Twisted starts using file-based doctests. I have 
demonstrated how this can be done with the current trial test runner in the 
following patch submission: http://twistedmatrix.com/bugs/issue1000

Also, I think twisted needs to start distinguishing between unit and 
functional tests.

- Develop a tool that clearly shows the available adapters for a given 
interface. epyrun will not pick this up, so it is important.

- Maybe it would be good to have a documentation sprint; since most (a lot) of 
the Twisted developers are in Boston, it would be good to do it here; I would 
be willing to come and help people getting started with writing file-based 
doctests.

Regards,
Stephan
-- 
Stephan Richter
CBU Physics & Chemistry (B.S.) / Tufts Physics (Ph.D. student)
Web2k - Web Software Design, Development and Training



From grant at osafoundation.org  Thu May  5 17:44:46 2005
From: grant at osafoundation.org (Grant Baillie)
Date: Thu, 5 May 2005 14:44:46 -0700
Subject: [Twisted-Python] Hanging test cases (Was: Evangelism notes...)
In-Reply-To: <3309BAEB-4EAF-4CBD-9C09-47893BBD7E9A@redivi.com>
References: <42792BAC.1050701@rogers.com>
	<C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>
	<1D4A97FB-6815-49A8-B570-BC569F7CDE98@osafoundation.org>
	<3309BAEB-4EAF-4CBD-9C09-47893BBD7E9A@redivi.com>
Message-ID: <E3CBCA0E-0001-4D41-9544-8B715AFB243C@osafoundation.org>

On May 5, 2005, at 12:26 PM, Bob Ippolito wrote:

>> I'm not sure if this is a problem in python, in twisted's use of  
>> threading, or in trial.deferredResult, though.
>>
>
> Almost definitely a combination of 2 and 3, with 3 being the one  
> really at fault.  Trial is horribly, horribly broken by design and  
> it's really just an accident that it works at all.  The  
> expectations a lot of the tests have about the reactor are also  
> broken, but that's mostly just a consequence of trial sucking.

Thanks for the info. I'll go ahead and file a bug, unless someone  
tells me not to. FWIW, I'm happy with my workaround (I'm really only  
using it to keep my doc/unittests relatively uncomplicated).

--Grant

Grant Baillie
Open Source Applications Foundation
http://www.osafoundation.org






From andy at thecablelounge.com  Thu May  5 22:01:19 2005
From: andy at thecablelounge.com (Andy Gayton)
Date: Fri, 06 May 2005 12:01:19 +1000
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <42792BAC.1050701@rogers.com>
References: <42792BAC.1050701@rogers.com>
Message-ID: <427ACFEF.4000100@thecablelounge.com>


Hey Mike, this thread has been given a thrashing and should probably be 
let go off, but it hits a pretty emotional issue for me - so here goes 
my 2c's worth :)

I've been in similiar situations before, always with selling 
(evangelising) python though - I dream of the day I can be selling 
twisted over vanilla python :)

Mike C. Fletcher wrote:
>                 + Even the Finger sample is mystifyingly complex if you
>                   jump into it at the end of the process

certainly - that's why there is the Finger sample - your lead programmer 
never took 2 hours to work through the Finger sample?  I often find this 
with python -

me: 'these problems we're having - they go away if you use python'

reluctant workplace: 'but we don't have the skills in house to support 
python'

me: 'python's has be designed to be useful as an educational language - 
i've found programmers can be at least as productive as they are 
currently using python within 3 days.  here are some great tutorial links.'

reluctant workplace: 'we'll see'

me: 'these problems we're having - they go away if you use python'

reluctant workplace: 'but we don't have the skills in house to support 
python'

me: 'did you even open one of those tutorial links i sent you?'

reluctant workplace: 'no'

>                 + Probably would have been better to start him on the
>                   much larger project, where Twisted represents far less
>                   of the overall complexity of the application.

i've found it a losing battle trying to spoon feed even bright people 
who aren't eager to try out new and interesting ways of solving problems.

>           o What do we call to shutdown the threadpool?  I don't
>             remember, let's check the reference docs... 20 minutes of
>             searching for the 2.0 reference docs (with the entire
>             company watching this)... finally ask on IRC... told to
>             build them myself and contribute them.  Cute, but didn't
>             really drive home the whole "robust, professional,
>             well-documented platform on which to develop business
>             systems" meme as much as I'd hoped.

Not having a go at all you at all - but I don't believe there is a 
solution on earth, paid for, or volunteer, you would have come out ok 
in this situation.

It sounds like your company had an axe to grind.

I can't think of many paid support contracts I've had access to that 
could even get a problem being worked on within 20mins - let alone solved.

> I could have done better at evangelising. In the end, though, I had to
> concede that stripping out Twisted and writing the code himself would
> probably be faster and easier in the long run than trying to work around
> problems in an under-documented "foreign" system (again, from his
> viewpoint).

possibly, twisted can't always be the right hammer.  vanilla python is 
still brilliant.  just hoping your company hasn't shut the door for when 
twisted could be needed.

good luck in the future, for both of us:)

Andy.



From exarkun at divmod.com  Fri May  6 02:00:50 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 06 May 2005 06:00:50 GMT
Subject: [Twisted-Python] Hanging test cases (Was: Evangelism notes...)
In-Reply-To: <C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>
Message-ID: <20050506060050.15422.1130296805.divmod.quotient.21435@ohm>

On Thu, 5 May 2005 11:49:20 -0700, Grant Baillie <grant at osafoundation.org> wrote:
>On May 4, 2005, at 1:08 PM, Mike C. Fletcher wrote:
>>     * Project was delivered, paid for, and has been running in
>>       production for a few weeks, but 2 reported bugs cropped up
>>           o To fix one, needed to update to 2.0 (deferred object
>>             cleanup)... this caused rather a lot of upset, as the
>>             sysadmins were upset about such a huge package needing  to be
>>             updated (and they tried to do just the core packages  first,
>>             which doubled the work-load involved in preparing that
>>             update versus using Sumo)
>>           o Fixing the other was no big deal, except that something in
>>             2.0 changed how the test-suite was running so that it now
>>             hung on completion...
>
>Did you ever figure out why? I have just run into similar behaviour  myself 
>after upgrading to 2.0. Here's an example that hangs for me on  Mac OS X 
>(10.4) after the final print:
>
>---------------
>from twisted.internet import reactor, defer, threads
>from twisted.trial.util import deferredResult
>from twisted.web.client import getPage
>import time
>
>
>def itFired(result):
>     print "Deferred fired: %s" % result
>     return result
>
>d = getPage("http://www.example.com/").addBoth(itFired)
>
>print "Returned: %s" % deferredResult(d)
>print "Done; exiting"
>---------------
>
>
>So far as I can tell, the python threading module has an atexit  handler 
>that's hanging. Also, if I replace the deferToThread() with a 
>twisted.web.client.getPage(), I still get the same hang.

  So as to be entirely clear, I'm going to limit this response to just one idea.  If more details are desired, I can post a followup later (as long as someone asks for one).  Anyway, for now, here's the meat of this post:


      Do

      _____not_____

      use

      deferredResult

      (or deferredError or wait)

  As someone who pushed for their existence, I apologize.

  Jp



From teratorn at twistedmatrix.com  Fri May  6 03:59:57 2005
From: teratorn at twistedmatrix.com (Eric Mangold)
Date: Fri, 06 May 2005 17:59:57 +1000
Subject: [Twisted-Python] Blocking on deferreds during unit tests (e.g.
	deferredResult)
Message-ID: <op.sqcgh7jny3d107@aspen>

I'm starting a new thread on this because It's very important to me, and  
we need to have some kind of resolution on this issue.

On Fri, 06 May 2005 16:00:50 +1000, Jp Calderone <exarkun at divmod.com>  
wrote:
[...]
>       Do
>
>       _____not_____
>
>       use
>
>       deferredResult
>
>       (or deferredError or wait)
>
>   As someone who pushed for their existence, I apologize.
>
>   Jp

I would like to have more details on this considering that I use  
deferredResult and deferredError quite extensively, and very much  
appreciate their existence. If methods suck this bad we need to deprecate  
them and provide something better.

Is there a better way to synchronously spin the reactor until a deferred  
fires? There any many cases in which I prefer to do that instead of  
returning a deferred from the test case method.

-Eric



From sergtrejo at gmail.com  Fri May  6 06:08:26 2005
From: sergtrejo at gmail.com (Sergio Trejo)
Date: Fri, 6 May 2005 00:08:26 -1000
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <8875358E-5653-407A-B21E-7B9A4C0EAE2F@redivi.com>
References: <42792BAC.1050701@rogers.com>
	<1A5DF4BE-AEE0-43E6-B9EA-DE3E29DF0B70@redivi.com>
	<4279BD80.9080702@twistedmatrix.com>
	<8875358E-5653-407A-B21E-7B9A4C0EAE2F@redivi.com>
Message-ID: <7c3d693605050603087e80835@mail.gmail.com>

On 5/5/05, Bob Ippolito <bob at redivi.com> wrote:
> I'm not talking about open source software, I'm talking about
> deploying Twisted in the real world.
> 
> -bob

I'm confused. Could you provide some semantics behind your definition
of the "real world"? Can open source software be used in this "real
world"?

Serg



From ronaldoussoren at mac.com  Fri May  6 07:05:56 2005
From: ronaldoussoren at mac.com (Ronald Oussoren)
Date: Fri, 6 May 2005 13:05:56 +0200
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <7c3d693605050603087e80835@mail.gmail.com>
References: <42792BAC.1050701@rogers.com>
	<1A5DF4BE-AEE0-43E6-B9EA-DE3E29DF0B70@redivi.com>
	<4279BD80.9080702@twistedmatrix.com>
	<8875358E-5653-407A-B21E-7B9A4C0EAE2F@redivi.com>
	<7c3d693605050603087e80835@mail.gmail.com>
Message-ID: <A9B1EDF9-A31B-4E23-9A57-E3AB9576CD5E@mac.com>


On 6-mei-2005, at 12:08, Sergio Trejo wrote:

> On 5/5/05, Bob Ippolito <bob at redivi.com> wrote:
>
>> I'm not talking about open source software, I'm talking about
>> deploying Twisted in the real world.
>>
>> -bob
>>
>
> I'm confused. Could you provide some semantics behind your definition
> of the "real world"? Can open source software be used in this "real
> world"?

When I install software in a production environment I prefer self- 
contained installations. That increases diskusage, but takes away  
some headages: what if server1 requires Twisted 1.3 and doesn't work  
with Twisted 2.0 and server2 requires Twisted 2.0?

Ronald




From grimmtooth at gmail.com  Wed May  4 20:40:34 2005
From: grimmtooth at gmail.com (Jeff Grimmett)
Date: Wed, 4 May 2005 20:40:34 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <1115238976.8476.54.camel@localhost.localdomain>
References: <42792BAC.1050701@rogers.com>
	<1115238976.8476.54.camel@localhost.localdomain>
Message-ID: <8f4623fb050504174011b553e3@mail.gmail.com>

On 5/4/05, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
> 
> 
> Do you have any suggestions on how we can improve things? Besides "write
> more docs" which is basically always a given.
> 

OK, I'll bite at that one. Let me preface it with these two points:

1) On my development team, I'm the QA lead. We've encountered this same 
issue, with a different face, in the form of the lack of sufficient design 
documentation and code documentation of changes after the fact. It has 
caused serious issues down the road, both in software quality and in the 
quality of testing that QA provided. We've implemented some solutions that 
appear to work, and it's from that series of experiences that I am speaking.

2) I BELIEVE that this solution has been considered and discarded. I have 
suspicions why, which I will not speak of, but it's so OBVIOUS that I can't 
believe that a group of intelligent people would not have considered it. So 
I fear that I will be speaking to a wall here. So be it. 

My unsolicited advice: write the docs either before or during development. 

AFTER development is too late. Most developers have no interest in 
documentation (it's genetic or something) and want to move on to more "good 
stuff." It's OK, I understand, as everyone that enjoys coding understands it 
at a gut level. But the issue needs to be acknowledged before it can be 
dealt with.

The gist of the response I often seen with regards to Twisted documentation 
is along the lines of "I don't see the issue here - if you don't like the 
docs, write some." It seems to be a denial of the responsibility to write 
good documentation. *** I'm not saying that is in fact the case! *** I am 
saying that there is a perception. As one of my past bosses told me, 
"perception is everything in some circumstances." 

Here are the pitfalls (as I see them, YMMV) of retroactively writing 
documentation:

1) If the person writing the docs is not the person that designed and 
implemented, the *intent* of the class/module/etc being documented is not 
clear.

2) If the person writing the docs is not the person that implemented, then 
the person that implemented must be found, interrogated, and gone back to 
multiple times to get the docs right. (And if getting it right is not the 
goal, why bother?)

3) If the intent of the module/class/etc is not known beforehand, how does 
one determine if it is working right?

I don't mean to criticize, but this is in my eyes the greatest weakness of 
Twisted. My experiences with it, when it works, is that it works 
wonderfully. I can't commit to using it for anything critical, though, 
because I spend more time working around such gems as """I am a connector""" 
than I do in getting anything useful done.

I tell you: if it gets to the point where I SERIOUSLY consider writing my 
own simple frame work to get a job done as a TIME SAVING MEASURE then there 
is a problem, and I do not believe I am alone in this perception.

Take this in the spirit it is offered. I want to use Twisted for what I do, 
and I want it to succeed. 

-- 

Best,

Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050504/eb9dccd1/attachment.htm 

From grimmtooth at gmail.com  Wed May  4 20:51:05 2005
From: grimmtooth at gmail.com (Jeff Grimmett)
Date: Wed, 4 May 2005 20:51:05 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <42793FB4.2070304@divmod.com>
References: <42792BAC.1050701@rogers.com>
	<1115238466.8476.44.camel@localhost.localdomain>
	<4279383B.4060505@comcast.net> <42793FB4.2070304@divmod.com>
Message-ID: <8f4623fb0505041751249bd4b6@mail.gmail.com>

On 5/4/05, Glyph Lefkowitz <glyph at divmod.com> wrote:

> where do these helpful people come from for other projects? I would
> estimate that Twisted has tens of thousands of users by now, but the
> community is still oddly silent.


My feeling is that a big part of the problem is that Twisted is so darned 
obscure in places that most people don't feel up to the task. Other - far, 
far lesser, of course - projects get enthusiastic help because they are less 
complex and, well, mystical (for lack of a better word) than Twisted.

For example:

1) I create a subclass of an existing Twisted class in order to add some 
helpful debugging.
2) I run my code but... the debugging code is not being executed!
3) But ... if that's the case, the code shouldn't even RUN!
4) Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!!!!

I had just such an experience. Grumpy, I was.

But it illustrates the point: I'm no idiot (last I checked). But I cannot 
explain how it is possible that the code even worked, and thus I feel 
completely inadequate to the task of even STARTING to help with 
documentation. Where should I start? If I can't explain the workings of a 
ten-line web server, what hope do I have of providing accurate input to 
documentation? 

-- 

Best,

Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050504/756bdf98/attachment.htm 

From glyph at divmod.com  Fri May  6 14:24:46 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Fri, 06 May 2005 14:24:46 -0400
Subject: [Twisted-Python] Blocking on deferreds during unit tests (e.g.
	deferredResult)
In-Reply-To: <op.sqcgh7jny3d107@aspen>
References: <op.sqcgh7jny3d107@aspen>
Message-ID: <427BB66E.5070509@divmod.com>

Eric Mangold wrote:
> I'm starting a new thread on this because It's very important to me, 
> and  we need to have some kind of resolution on this issue.

> Is there a better way to synchronously spin the reactor until a 
> deferred  fires?

Yep.  Write a unit test framework that uses Stackless and create a 
tasklet for each deferred that you want to run.

> There any many cases in which I prefer to do that 
> instead of  returning a deferred from the test case method.

Without language support, this is an exercise in futility.  Don't do it. 
  Trial is broken, and everyone laments it, but the *reason* that it's 
broken (the root cause, anyway, if not the only reason) is that it bends 
over backwards to accomodate this use-case when _every_ _other_ _part_ 
of Twisted is very explicit that this is a bad, bad thing to do and you 
should never do it because it doesn't work.

I am sorry that so many people want to block on deferreds in test 
methods, but I can guarantee you that support for doing it *WILL* be 
removed in a future version of Twisted.  If we don't eventually kill 
this feature, our test suite is never going to work reliably.



From projects at reedflute.com  Fri May  6 14:49:36 2005
From: projects at reedflute.com (Eugene Coetzee)
Date: Fri, 06 May 2005 20:49:36 +0200
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <8f4623fb050504174011b553e3@mail.gmail.com>
References: <42792BAC.1050701@rogers.com>	<1115238976.8476.54.camel@localhost.localdomain>
	<8f4623fb050504174011b553e3@mail.gmail.com>
Message-ID: <427BBC40.4060702@reedflute.com>

Jeff Grimmett wrote:

>
> My unsolicited advice: write the docs either before or during 
> development.
>
dont know why you are so reluctant to say that. It also saves one from 
doing a lot of unproductive coding when the basic design can be put down 
on paper and analysed by peers to eliminate bad ideas from the beginning 
- I suppose that was the original motivation for something like UML - 
please don't shoot me :-)

>
> Here are the pitfalls (as I see them, YMMV) of retroactively writing 
> documentation:
>
> 1) If the person writing the docs is not the person that designed and 
> implemented, the *intent* of the class/module/etc being documented is 
> not clear.
>
> 2) If the person writing the docs is not the person that implemented, 
> then the person that implemented must be found, interrogated, and gone 
> back to multiple times to get the docs right. (And if getting it right 
> is not the goal, why bother?)
>
> 3) If the intent of the module/class/etc is not known beforehand, how 
> does one determine if it is working right?
>
That sums it up pretty well.

> I don't mean to criticize, but this is in my eyes the greatest 
> weakness of Twisted. My experiences with it, when it works, is that it 
> works wonderfully.

Twisted is a superb framework. Once I took a few days of and hacked my 
way through its enigmatic depths I also whispered to myself ... 
eureka... I'm not sure though that documentation is the *only* problem. 
My experience tells me that basic concepts around the "networking layer" 
is intimidating  to a lot of  developers.

> I tell you: if it gets to the point where I SERIOUSLY consider writing 
> my own simple frame work to get a job done as a TIME SAVING MEASURE 
> then there is a problem, and I do not believe I am alone in this 
> perception.
>
I normally ask myself how long will it take to understand this stuff - 
given the state of the documentation. Then I compare it to how long it 
would take to write it myself. Lets be frank - "open source" assumes to 
an extent that you would actually "read the source" as part of the 
documentation. To me the detail (like the API) is not the problem.

I would love to see high level conceptual documentation to give me a 
better idea of  basic concepts  like the "reactor", "application", 
"service", "transport","protocol", "factory" - what they are supposed to 
do and how they are  to fit together.

regards,

Eugene Coetzee

Web                 -> www.reedflute.com
=============================================== 




From grimmtooth at gmail.com  Fri May  6 15:29:50 2005
From: grimmtooth at gmail.com (Jeff Grimmett)
Date: Fri, 6 May 2005 15:29:50 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <427BBC40.4060702@reedflute.com>
References: <42792BAC.1050701@rogers.com>
	<1115238976.8476.54.camel@localhost.localdomain>
	<8f4623fb050504174011b553e3@mail.gmail.com>
	<427BBC40.4060702@reedflute.com>
Message-ID: <8f4623fb0505061229ce3b57@mail.gmail.com>

On 5/6/05, Eugene Coetzee <projects at reedflute.com> wrote:

> Twisted is a superb framework. Once I took a few days of and hacked my
> way through its enigmatic depths I also whispered to myself ...
> eureka... I'm not sure though that documentation is the *only* problem.


Maybe maybe not. But right now the documentation is like a lightning rod. No 
matter what your agenda, if you want to (for whatever reason) discourage 
against the use of Twisted in a project, all you have to do is point to the 
documentation and the frazzled bunch of geeks trying to figure it all out 
:-)

My experience tells me that basic concepts around the "networking layer"
> is intimidating to a lot of developers.


It would not hurt to have some nice top level documents to address that. 
That's the sort of thing you'd derive from design documentation. 

I normally ask myself how long will it take to understand this stuff -
> given the state of the documentation. Then I compare it to how long it
> would take to write it myself. Lets be frank - "open source" assumes to
> an extent that you would actually "read the source" as part of the
> documentation. To me the detail (like the API) is not the problem.


I would have to disagree on that on a fine point. Twisted is not "open 
source software that happens to be a network framework". It is a "network 
framework that is also open source software". I didn't start looking at 
Twisted because it was open source. I started looking at it because I was 
interested in a better answer than I currently had for networking.

AS SUCH ... I expect the API, like any library I use, to be properly 
documented so I can start using it. I do not wish to investigate the source 
code as a recreational thing. I have a job to do and I want to get it done 
on time, on budget, and done well. Making source code delving a prerequisite 
to use of the software is bad form, in my opinion.

Yes, I find having the source code useful. Usually it's because the 
documentation leaves a fine point unclear; examining the source may resolve 
the confusion. But the source code should not be a crutch to support 
incomplete documentation - not if you want to go toe to toe with the big 
dogs.

I would love to see high level conceptual documentation to give me a
> better idea of basic concepts like the "reactor", "application",
> "service", "transport","protocol", "factory" - what they are supposed to
> do and how they are to fit together.


:: nod nod nod nod ::

-- 

Best,

Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050506/179f548e/attachment.htm 

From srichter at cosmos.phy.tufts.edu  Fri May  6 17:03:44 2005
From: srichter at cosmos.phy.tufts.edu (Stephan Richter)
Date: Fri, 6 May 2005 17:03:44 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <8f4623fb050504174011b553e3@mail.gmail.com>
References: <42792BAC.1050701@rogers.com>
	<1115238976.8476.54.camel@localhost.localdomain>
	<8f4623fb050504174011b553e3@mail.gmail.com>
Message-ID: <200505061703.45357.srichter@cosmos.phy.tufts.edu>

On Wednesday 04 May 2005 20:40, Jeff Grimmett wrote:
> My unsolicited advice: write the docs either before or during development.

That's exactely what we do in Zope 3 and I have been advocating this in all my 
mails with concrete suggestions.

Regards,
Stephan
-- 
Stephan Richter
CBU Physics & Chemistry (B.S.) / Tufts Physics (Ph.D. student)
Web2k - Web Software Design, Development and Training



From db3l at fitlinxx.com  Fri May  6 17:11:12 2005
From: db3l at fitlinxx.com (David Bolen)
Date: 06 May 2005 17:11:12 -0400
Subject: [Twisted-Python] Re: Hanging test cases (Was: Evangelism notes...)
References: <C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>
	<20050506060050.15422.1130296805.divmod.quotient.21435@ohm>
Message-ID: <uk6mcjc0f.fsf@fitlinxx.com>

Jp Calderone <exarkun at divmod.com> writes:

>   So as to be entirely clear, I'm going to limit this response to
>   just one idea.  If more details are desired, I can post a followup
>   later (as long as someone asks for one).  Anyway, for now, here's
>   the meat of this post:
> 
> 
>       Do
> 
>       _____not_____
> 
>       use
> 
>       deferredResult
> 
>       (or deferredError or wait)
> 
>   As someone who pushed for their existence, I apologize.

Just to be clear, IMHO, I'd qualify this by saying something like in
final production code or non-test code or something.  We make heavy
use of these functions in our unit tests and they are invaluable ways
to simplify the structure of such tests when each test is the only
thing going on and there's no problem iterating the reactor beneath a
blocking call.  We've also cheated and used them for pure startup code
in GUI apps that are quick 'n dirty example interfaces into our main
Twisted system, and again they can simplify such efforts.

But I do agree they really have no place in final production code.

-- David




From projects at reedflute.com  Fri May  6 17:18:37 2005
From: projects at reedflute.com (Eugene Coetzee)
Date: Fri, 06 May 2005 23:18:37 +0200
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <8f4623fb0505061229ce3b57@mail.gmail.com>
References: <42792BAC.1050701@rogers.com>	<1115238976.8476.54.camel@localhost.localdomain>	<8f4623fb050504174011b553e3@mail.gmail.com>	<427BBC40.4060702@reedflute.com>
	<8f4623fb0505061229ce3b57@mail.gmail.com>
Message-ID: <427BDF2D.2080203@reedflute.com>

Jeff Grimmett wrote:

>  
> Yes, I find having the source code useful. Usually it's because the 
> documentation leaves a fine point unclear; examining the source may 
> resolve the confusion.

Perhaps we disagree radically about the usefulness of having the source 
code,being able to read it, and the ablility to recompile and rebuild 
the framework yourself.

> But the source code should not be a crutch to support incomplete 
> documentation - not if you want to go toe to toe with the big dogs.
>
I googled around with "networking framework" a few times in my life. Who 
are the "big dogs"  when it comes to  networking frameworks. In the past 
I wrote everything myself using raw C++ sockets,  MFC or vanilla 
java.net. I have also been bitten badly by the "big dogs" - having to 
dig through a MSDN "knowledge base" of thousands of "known bugs" before 
I finally discovered that it *could* be fixed with next release. I 
honestly cannot say that Twisted is outclassed in this area, at least I 
can fix the bugs myself.

Eugene Coetzee

Web                 -> www.reedflute.com
=============================================== 




From bob at redivi.com  Fri May  6 17:40:06 2005
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 6 May 2005 17:40:06 -0400
Subject: [Twisted-Python] Re: Hanging test cases (Was: Evangelism notes...)
In-Reply-To: <uk6mcjc0f.fsf@fitlinxx.com>
References: <C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>
	<20050506060050.15422.1130296805.divmod.quotient.21435@ohm>
	<uk6mcjc0f.fsf@fitlinxx.com>
Message-ID: <6EA197D2-A573-4175-A0FB-9C5005389D68@redivi.com>

On May 6, 2005, at 5:11 PM, David Bolen wrote:

> Jp Calderone <exarkun at divmod.com> writes:
>
>
>>   So as to be entirely clear, I'm going to limit this response to
>>   just one idea.  If more details are desired, I can post a followup
>>   later (as long as someone asks for one).  Anyway, for now, here's
>>   the meat of this post:
>>
>>
>>       Do
>>
>>       _____not_____
>>
>>       use
>>
>>       deferredResult
>>
>>       (or deferredError or wait)
>>
>>   As someone who pushed for their existence, I apologize.
>>
>
> Just to be clear, IMHO, I'd qualify this by saying something like in
> final production code or non-test code or something.  We make heavy
> use of these functions in our unit tests and they are invaluable ways
> to simplify the structure of such tests when each test is the only
> thing going on and there's no problem iterating the reactor beneath a
> blocking call.  We've also cheated and used them for pure startup code
> in GUI apps that are quick 'n dirty example interfaces into our main
> Twisted system, and again they can simplify such efforts.
>
> But I do agree they really have no place in final production code.

Sorry, but Jp is right.  They have no place in any code.  Their  
existence is a mistake and should be corrected ASAP.  They severely  
violate the reactor interface.

Something almost as easy would probably be waitDeferred and  
deferredGenerator in twisted.internet.defer (I don't know when they  
went in, but they're probably in 2.0).  See the waitDeferred's doc  
string for information.

The only way they could be "fixed" is if their implementation did  
something more like this:

def deferredResult(d):
     """untested because this code should not exist"""
     res = []
     def cb(result):
         res.append(result)
         reactor.stop()
     d.addBoth(cb)
     reactor.run()
     res = res.pop()
     if isinstance(res, Failure):
        failure.raiseException()
     return res

However, if their implementation did that, then the tests would  
probably break (because the tests are WRONG) or be a hell of a lot  
slower and even less reliable because there is no more timeout.

-bob




From michal at dkp.com  Fri May  6 18:07:40 2005
From: michal at dkp.com (Michal Eldar)
Date: Fri, 06 May 2005 18:07:40 -0400
Subject: [Twisted-Python] adbapi, PostgreSQL and Unicode
Message-ID: <427BEAAC.2060208@dkp.com>

I keep getting - Unhandled error in Deferred

I'm trying to perform an INSERT on my db (using adbapi with *pgdb* module).
INSERT which comprises *Unicode* string
e.g. -
unicodeChar1 = u"Character=[\N{GREEK CAPITAL LETTER GAMMA}]"

the db is defined to Unicode
*client_encoding* value is set to *Unicode* when checking its value in 
*cp_openfun *called function
execute the same INSERT directly with *pgdb *works great

Does anyone has experience with adbapi with Unicode db ?!?!
Do I need to define something special for this to happen ??

Thanks for your help,
Michal Eldar




From db3l at fitlinxx.com  Fri May  6 18:51:06 2005
From: db3l at fitlinxx.com (David Bolen)
Date: 06 May 2005 18:51:06 -0400
Subject: [Twisted-Python] Re: Hanging test cases (Was: Evangelism notes...)
References: <C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>
	<20050506060050.15422.1130296805.divmod.quotient.21435@ohm>
	<uk6mcjc0f.fsf@fitlinxx.com>
	<6EA197D2-A573-4175-A0FB-9C5005389D68@redivi.com>
Message-ID: <ufyx0j7dw.fsf@fitlinxx.com>

Bob Ippolito <bob at redivi.com> writes:

with respect to deferredResult/deferredError:

> Sorry, but Jp is right.  They have no place in any code.  Their
> existence is a mistake and should be corrected ASAP.  They severely
> violate the reactor interface.

Hmm, then perhaps it's the reactor interface that could use some
improving rather than removing this high level functionality?  Or is
everyone just saying that the implementation (versus the concept) of
the current functions is done wrong.  Or maybe I'm just missing what
major mess having this sort of interface is exposing.

Given Glyph's recent response, I might also clarify that while our
heaviest use of these functions are within unit tests, we aren't using
trial, so any linkage between poor behavior of these implementations
and trial is not something I'm referring to or worry about breaking.

What I do think is that there is a very good and practical reason to
be able to unwind deferrable operations into a blocking structure for
a wide variety of test conditions, and losing that capability would
make writing tested Twisted code (at least for our situation) much
more fragile and error prone (the tests themselves).  And that's not
quite the same as the newer waitForDeferred stuff in 2.0 that
integrates with generators.  While slick, it still doesn't work as
well for easily maintainable tests in many of our situations.

If there's a problem with the current implementation, or with how the
current implementation may abuse the public reactor interface, then
I'm all for cleaning it up, fixing it or making it part of the reactor
itself in some way, as long as the public mechanism remains.  I mean,
after all, at some point the reactor itself really is just sitting
there iterating itself, so I find little reason not to permit some
access to hook into that mechanism when appropriate.

For example, in our system we may very heavy use of our own components
all of which implement their entire API via deferrable interfaces.
Interacting with multiple such components during a test is thus a
multi-stage deferrable process.  Having these blocking calls permits a
test method to say something like:

    self.user = deferredResult(self.umgr.user())
    self.user.email = 'test at dom.ain'
    deferredResult(self.umgr.saveUser(self.user))

in order to test being able to save a new user object into the system.
Part of the test is that the calls themselves should succeed, so the
natural result of deferredResult raising an exception on an errback is
just right.  And while clearly readable, the test still tests that the
deferrable aspect of the interfaces will work properly (e.g, with
deferredResult generating the exception if it doesn't get passed a
deferred).

Sure, I could write the user() and saveUser() calls with a callback
chain, and then I'd have to nest the call to saveUser based on the
user callback, probably something like:

    def fail(failure):
        self.fail(failure)

    def gotUser(user):
        self.user = user
        self.user.email = 'test at dom.ain'
        return self.umgr.saveUser(self.user)

    d = self.umgr.user()
    d.addCallback(gotUser)
    d.addErrback(fail)

but I see no advantage (*in the context of such a test*) to doing it
this way, and I see a real loss of clarity and maintainability for the
test itself.

Since each component in our system has a deferrable interface, any
test which is going to interact with multiple components would quickly
evolve a fairly deep callback system in the test, without much benefit
that I can see.

I'm all for fixing an implementation or cleaning up an interface if
it's being misused, but I certainly find value in the particular
external interface that deferred{Result,Error} deliver - so much so
that we would (and in fact did) implement them locally before finding
that they already existed.

-- David




From bob at redivi.com  Fri May  6 19:33:16 2005
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 6 May 2005 19:33:16 -0400
Subject: [Twisted-Python] Re: Hanging test cases (Was: Evangelism notes...)
In-Reply-To: <ufyx0j7dw.fsf@fitlinxx.com>
References: <C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>
	<20050506060050.15422.1130296805.divmod.quotient.21435@ohm>
	<uk6mcjc0f.fsf@fitlinxx.com>
	<6EA197D2-A573-4175-A0FB-9C5005389D68@redivi.com>
	<ufyx0j7dw.fsf@fitlinxx.com>
Message-ID: <BDDD7C2C-EB8A-4601-8545-565ABEC46EAD@redivi.com>

On May 6, 2005, at 6:51 PM, David Bolen wrote:

> Bob Ippolito <bob at redivi.com> writes:
>
> with respect to deferredResult/deferredError:
>
>
>> Sorry, but Jp is right.  They have no place in any code.  Their
>> existence is a mistake and should be corrected ASAP.  They severely
>> violate the reactor interface.
>>
>
> Hmm, then perhaps it's the reactor interface that could use some
> improving rather than removing this high level functionality?  Or is
> everyone just saying that the implementation (versus the concept) of
> the current functions is done wrong.  Or maybe I'm just missing what
> major mess having this sort of interface is exposing.

The reactor interface is not what needs improving, it's the way that  
these functions work.  They iterate the reactor when the reactor is  
in a stopped state.  The reactor should either be running, or not  
running.  There are basically two fundamental issues:

(1) Reactors can only be (meaningfully/predictably/etc) iterated if  
Twisted rules the universe AND the implementation of that reactor is  
amenable to that feature.  This is not a tautology.
(2) Reactors need to fire various startup/shutdown events.  Reactors  
shouldn't be doing ANYTHING unless they are in a running state.

The current deferredResult/deferredError breaks both of these  
conditions.
(1) It iterates the reactor (which is a historically public, but  
conceptually broken interface)
(2) It iterates the reactor in a STOPPED state.  The reactor is never  
"running" during these tests.  Startup/Shutdown does not happen!

The fact that the doc strings talk about re-entrancy of certain  
reactor functions and whatnot scares the shit out of me.  They should  
not have to be re-entrant.  What their current implementation is  
doing is really really broken.

The problem, for tests, is that using a properly written  
deferredResult / deferredError the reactor would startup/shutdown  
violently throughout the course of a single test, and will break the  
hell out of it if it has anything to do with services/etc.  So, while  
for SOME deferreds it would work fine, but for others, it wouldn't.   
Basically, unless you can encapsulate the entire test in a single  
deferred, then it shouldn't be using deferredResult/deferredError.

Therefore, what SHOULD happen is that trial should let you write  
tests that return deferreds, and it should let you write it in the  
deferredGenerator style (so it doesn't suck so much).

Trial *could*, in theory, put the reactor into a "started" state at  
the beginning of every tests and a "stopped" state at the end, but  
then you're testing in a strange environment that doesn't really  
mimic how Twisted actually works, and it still breaks (1) which makes  
it unsuitable for testing the reactors where Twisted does not rule  
the universe.  Testing this theory would require changes to the  
reactor interface to make some parts of if re-entrant (bleargh).

> Given Glyph's recent response, I might also clarify that while our
> heaviest use of these functions are within unit tests, we aren't using
> trial, so any linkage between poor behavior of these implementations
> and trial is not something I'm referring to or worry about breaking.
>
> What I do think is that there is a very good and practical reason to
> be able to unwind deferrable operations into a blocking structure for
> a wide variety of test conditions, and losing that capability would
> make writing tested Twisted code (at least for our situation) much
> more fragile and error prone (the tests themselves).  And that's not
> quite the same as the newer waitForDeferred stuff in 2.0 that
> integrates with generators.  While slick, it still doesn't work as
> well for easily maintainable tests in many of our situations.

Well, it causes you to write two lines of code instead of one.  That  
sucks, but so what?  You don't have to write big callback chains..   
It's conceptually identical, it's just that you have to throw in some  
extra boiler plate that says THIS IS A DEFERRED.  If the way we say  
that wasn't so ugly, it might actually be a good thing from a  
readability standpoint :)

I'm not *entirely* sure why "waitForDeferred" is really necessary at  
all, though "deferredGenerator" certainly is.  In the interest of not- 
wearing-off-your-fingerprints one might write a "deferredGenerator"  
specifically for trial (or maybe in general) that just makes sure  
you're yielding a Deferred.

I *think* that it does this so that it can assume the last thing you  
yield is the result.  I would say that you should wrap the result  
instead of wrap every intermediate thing, since the intermediate  
things you do in such a deferred generator should far outnumber the  
times that you return from it.  Perhaps whoever wrote it had a good  
reason that I just don't understand, but when I wrote something  
equivalent a few years ago I wrote it such that there wasn't quite so  
much boilerplate.

> For example, in our system we may very heavy use of our own components
> all of which implement their entire API via deferrable interfaces.
> Interacting with multiple such components during a test is thus a
> multi-stage deferrable process.  Having these blocking calls permits a
> test method to say something like:
>
>     self.user = deferredResult(self.umgr.user())
>     self.user.email = 'test at dom.ain'
>     deferredResult(self.umgr.saveUser(self.user))

# let's assume I've aliased waitForDeferred to "wait"

d = waitForDeferred(self.umgr.user())
yield d
self.user = d.getResult()
self.user.email = 'test at dom.ain'
d = waitForDeferred(self.umgr.saveUser(self.user))
yield d
d.getResult()

So, the test is 6 lines instead of 3.  Which sucks, but it's  
correct.  For tests that do more stuff, it probably should be even  
less of a problem.

If Python grows an extended iteration protocol, where yield becomes  
an expression, you could make it 3 lines again.  This might actually  
happen in Python 2.5.

> Sure, I could write the user() and saveUser() calls with a callback
> chain, and then I'd have to nest the call to saveUser based on the
> user callback, probably something like:
>
>     def fail(failure):
>         self.fail(failure)
>
>     def gotUser(user):
>         self.user = user
>         self.user.email = 'test at dom.ain'
>         return self.umgr.saveUser(self.user)
>
>     d = self.umgr.user()
>     d.addCallback(gotUser)
>     d.addErrback(fail)
>
> but I see no advantage (*in the context of such a test*) to doing it
> this way, and I see a real loss of clarity and maintainability for the
> test itself.

Well, let's say your database thing is a service, that maintains some  
kind of ephemeral state that's required in some way.  If  
deferredResult were properly written, this ephemeral state would hit  
the bit bucket on each deferredResult, probably breaking your code  
even though the test are "correct".

If you add such a component to the system, you might have to rewrite  
all of your tests, because it would not be possible to fix the way  
deferredResult works.

> Since each component in our system has a deferrable interface, any
> test which is going to interact with multiple components would quickly
> evolve a fairly deep callback system in the test, without much benefit
> that I can see.

So, use deferredGenerator / waitForDeferred.

-bob





From db3l at fitlinxx.com  Fri May  6 20:19:45 2005
From: db3l at fitlinxx.com (David Bolen)
Date: 06 May 2005 20:19:45 -0400
Subject: [Twisted-Python] Re: Hanging test cases (Was: Evangelism notes...)
References: <C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>
	<20050506060050.15422.1130296805.divmod.quotient.21435@ohm>
	<uk6mcjc0f.fsf@fitlinxx.com>
	<6EA197D2-A573-4175-A0FB-9C5005389D68@redivi.com>
	<ufyx0j7dw.fsf@fitlinxx.com>
	<BDDD7C2C-EB8A-4601-8545-565ABEC46EAD@redivi.com>
Message-ID: <u1x8jkhum.fsf@fitlinxx.com>

Bob Ippolito <bob at redivi.com> writes:

> (1) Reactors can only be (meaningfully/predictably/etc) iterated if
> Twisted rules the universe AND the implementation of that reactor is
> amenable to that feature.  This is not a tautology.
> (2) Reactors need to fire various startup/shutdown events.  Reactors
> shouldn't be doing ANYTHING unless they are in a running state.
> 
> The current deferredResult/deferredError breaks both of these
> conditions.
> (1) It iterates the reactor (which is a historically public, but
> conceptually broken interface)
> (2) It iterates the reactor in a STOPPED state.  The reactor is never
> "running" during these tests.  Startup/Shutdown does not happen!

This seems like an internal implementation issue to me - when a
reactor is "running" (I've called run()), it's basically stuck in a
loop doing runUntilCurrent and then doIteration.  That's precisely
what iterate does.

Now, I agree that if you have tests that never initiate the run, that
you skip over some startup events.  But except for the uppermost
tests, what is being tested is a specific unit test for a piece of the
system that should be testable in isolation.  If the item under test
has a dependency on startup events, the test should arrange for them.

> The fact that the doc strings talk about re-entrancy of certain
> reactor functions and whatnot scares the shit out of me.  They should
> not have to be re-entrant.  What their current implementation is
> doing is really really broken.

Not sure which doc strings those are, but I don't see a re-entrancy
problem in the sort of scenario I'm looking at - rather than:

        reactor.run which calls
           reactor.runUntilCurrent/doIteration which causes
               my deferrable stuff to operate

I have

        deferredResult which calls
           reactor.iterate which uses
               reactor.runUntilCurrent/doIteration which causes
                   my deferrable stuff to operate
       
I don't think there's any more room for re-entrancy issues than in a normal
running reactor.

Maybe this is a key difference with trial?  If trial has a top level
reactor.run that is always above any test, then I do see how you could
get re-entrancy problems, since you'd be re-entering reactor.iterate
from within an existing reactor.iterate call.

I guess that's true of any nested use of deferredResult too, but we
don't nest our deferredResult calls - no real need since any
deferrable is directly wrapped with the deferredResult call, and
deferredResult is only used in the tests, so what they are calling is
always production code that is written properly with callbacks and
what not.

> The problem, for tests, is that using a properly written
> deferredResult / deferredError the reactor would startup/shutdown
> violently throughout the course of a single test, and will break the
> hell out of it if it has anything to do with services/etc.  So, while
> for SOME deferreds it would work fine, but for others, it wouldn't.
> Basically, unless you can encapsulate the entire test in a single
> deferred, then it shouldn't be using deferredResult/deferredError.

I still don't necessarily see that (the last sentence).  We use
multiple deferrable operations in single tests, but never more than
one at a time (e.g., no recursive or nested uses).  But certainly more
than a single deferrable operation within a single test.

I would, however, agree that I'd prefer even more the ability to
completely start/stop a reactor during the course of a test, but would
still like to be able to iterate it manually during the test to
provide a natural blocking flow to the test.

But in my current scenario, the majority of my components under test
are having interfaces tested that are not impacted by startup/shutdown
(and we don't use any services, in the Twisted sense, for example).

> Therefore, what SHOULD happen is that trial should let you write
> tests that return deferreds, and it should let you write it in the
> deferredGenerator style (so it doesn't suck so much).

I don't think I'd disagree with that - we pretty much stayed away from
trial since I wasn't comfortable with it initially, so we're a pure
Unittest approach, which certainly doesn't provide any framework for
something like that.

> Trial *could*, in theory, put the reactor into a "started" state at
> the beginning of every tests and a "stopped" state at the end, but
> then you're testing in a strange environment that doesn't really
> mimic how Twisted actually works, and it still breaks (1) which makes
> it unsuitable for testing the reactors where Twisted does not rule
> the universe.  Testing this theory would require changes to the
> reactor interface to make some parts of if re-entrant (bleargh).

Yeah, that's a tough problem, although one that would also simplify
the fact that we often run the tests under the unittest GUI, and
occasionally have to fight cross-test pollution from the reactor
persisting across test runs, which is a wart from the current
restrictions.

> Well, it causes you to write two lines of code instead of one.  That
> sucks, but so what?  You don't have to write big callback chains..
> It's conceptually identical, it's just that you have to throw in some
> extra boiler plate that says THIS IS A DEFERRED.  If the way we say
> that wasn't so ugly, it might actually be a good thing from a
> readability standpoint :)

Well, seeing "deferredResult" sort of already says "THIS IS A
DEFERRED" in the test.  And it's less the number of lines than the
inversion of the logic.  In my example, it's tougher to read through
that test and see the underlying core test of the user() and
saveUser() calls.  This is true really of any deferred code in
general, so I find the ability to simplify things in the test level an
improvement.  As you say, the way we "say" this currently is ugly.

> >     self.user = deferredResult(self.umgr.user())
> >     self.user.email = 'test at dom.ain'
> >     deferredResult(self.umgr.saveUser(self.user))
> 
> # let's assume I've aliased waitForDeferred to "wait"
> 
> d = waitForDeferred(self.umgr.user())
> yield d
> self.user = d.getResult()
> self.user.email = 'test at dom.ain'
> d = waitForDeferred(self.umgr.saveUser(self.user))
> yield d
> d.getResult()
> 
> So, the test is 6 lines instead of 3.  Which sucks, but it's  correct.
> For tests that do more stuff, it probably should be even  less of a
> problem.

Except that you didn't include the additional code I'd now have to
write to actually turn that into a generator which is iterated over by
the test in order to actually process the deferrable yields.  (Unless
this is something trial does automatically somehow).

That's what I meant by saying that the integration into generators is
slick (and goes a good way to linearizing what is normally a callback
chain), but still isn't quite as simple as the interface provided by
the deferred{Result,Error} functions.

> Well, let's say your database thing is a service, that maintains some
> kind of ephemeral state that's required in some way.  If
> deferredResult were properly written, this ephemeral state would hit
> the bit bucket on each deferredResult, probably breaking your code
> even though the test are "correct".

I might be getting lost on the "properly written" part, but if I were
testing a component that did have state triggered during reactor
startup/shutdown (which is what I think you're referring to), that
test would likely be using direct calls to the component to trigger
the startup/shutdown actions as part of the test setup/teardown, but
without using the reactor.

That's because the test would be focused on the component and not on
Twisted itself (which in the context of such a test would be a
"system" component that I'm trusting would do the right thing).  This
is clearly different than when testing Twisted itself.

Now that would cover the lion's share of the component tests but
somewhere there's the question of who plugs the components interface
into the twisted events and is that done right.  And I agree that's
messy right now, but it's such a small bit of initialization code that
even if it doesn't get full coverage in the tests it's not hard to
validate.  But I'd certainly welcome ways to test that more fully.

So my tests should be fine for what they are testing (the component).

> If you add such a component to the system, you might have to rewrite
> all of your tests, because it would not be possible to fix the way
> deferredResult works.

I'm not following this.

> So, use deferredGenerator / waitForDeferred.

Once we move to 2.0 we might consider that (I'm not quite up for
back-porting into 1.3 that we're using now), but I still think that
would complicate the tests (in terms of the overhead to actually run
each test like a generator) - but different people can have different
views on what is more maintainable.

Since we're not running our entire test bed under control of a single
"reactor.run" call (I presume that's more of what trial does?), even
using the generator would effectively be iterating the reactor
somewhere along the line.

I don't know - maybe my use case is just limited enough (non trial, no
nesting, etc...) that I don't see any true exposures through
deferred{Result,Error} while I'm getting benefits.

-- David




From grimmtooth at gmail.com  Fri May  6 21:15:41 2005
From: grimmtooth at gmail.com (Jeff Grimmett)
Date: Fri, 6 May 2005 21:15:41 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <427BDF2D.2080203@reedflute.com>
References: <42792BAC.1050701@rogers.com>
	<1115238976.8476.54.camel@localhost.localdomain>
	<8f4623fb050504174011b553e3@mail.gmail.com>
	<427BBC40.4060702@reedflute.com>
	<8f4623fb0505061229ce3b57@mail.gmail.com>
	<427BDF2D.2080203@reedflute.com>
Message-ID: <8f4623fb0505061815533174e4@mail.gmail.com>

On 5/6/05, Eugene Coetzee <projects at reedflute.com> wrote:

> Perhaps we disagree radically about the usefulness of having the source
> code,being able to read it, and the ablility to recompile and rebuild
> the framework yourself.


I find it very useful. But isn't that beside the point of the discussion? Is 
Twisted or is it not a complete product? Why should I not expect the API to 
be well documented? 

Open source is not the reason for this. It provides, in this case, a 
possible way around an obstacle, but at a terrible cost in wasted time, 
multiplied by every person that uses the library. All those man-hours are 
lost to some project, somewhere.

Twisted should not be considered a time sink. I find that distasteful. It's 
a wonderful framework that has potential in everything I do these days. It 
should not have this stigma attached to it.


> But the source code should not be a crutch to support incomplete
> > documentation - not if you want to go toe to toe with the big dogs.


I googled around with "networking framework" a few times in my life. Who
> are the "big dogs" when it comes to networking frameworks. In the past
> I wrote everything myself using raw C++ sockets, MFC or vanilla
> java.net <http://java.net>. I have also been bitten badly by the "big 
> dogs" - having to
> dig through a MSDN "knowledge base" of thousands of "known bugs" before
> I finally discovered that it *could* be fixed with next release. I
> honestly cannot say that Twisted is outclassed in this area, at least I
> can fix the bugs myself.


Somewhere in this discussion I mentioned that perception is an important 
factor here. It matters not if .NET or Java or Ruby have lesser abilities 
than Twisted, not if potential developers are daunted by the perceived lack 
of information and an obscure channel towards enlightenment. Heck, I'm 
reading about "Rails" on PYTHON blogs, fercryinoutloud.
-- 

Best,

Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050506/431552b4/attachment.htm 

From radeex at gmail.com  Fri May  6 23:24:07 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Sat, 7 May 2005 13:24:07 +1000
Subject: [Twisted-Python] Blocking on deferreds during unit tests (e.g.
	deferredResult)
In-Reply-To: <427BB66E.5070509@divmod.com>
References: <op.sqcgh7jny3d107@aspen> <427BB66E.5070509@divmod.com>
Message-ID: <60ed19d40505062024fe69940@mail.gmail.com>

On 5/7/05, Glyph Lefkowitz <glyph at divmod.com> wrote:
> Eric Mangold wrote:
> > I'm starting a new thread on this because It's very important to me,
> > and  we need to have some kind of resolution on this issue.
> 
> > Is there a better way to synchronously spin the reactor until a
> > deferred  fires?
> 
> Yep.  Write a unit test framework that uses Stackless and create a
> tasklet for each deferred that you want to run.

I'd suggest 1) not writing a unit test framework, and instead using
trial, and 2) instead of using stackless, use greenlet + my
gthreadless module that integrates greenlets and Deferreds
(sandbox/radix/gthreadless.py).

Alternatively, if you don't want to use greenlet, as Bob said, just
use deferred generators
(twisted.internet.defer.{deferredGenerator,waitForDeferred}).

HTH, HAND :-)

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From dangoor at gmail.com  Sat May  7 11:02:09 2005
From: dangoor at gmail.com (Kevin Dangoor)
Date: Sat, 7 May 2005 11:02:09 -0400
Subject: [Twisted-Python] Blocking on deferreds during unit tests (e.g.
	deferredResult)
In-Reply-To: <60ed19d40505062024fe69940@mail.gmail.com>
References: <op.sqcgh7jny3d107@aspen> <427BB66E.5070509@divmod.com>
	<60ed19d40505062024fe69940@mail.gmail.com>
Message-ID: <3f085ecd050507080273093f6a@mail.gmail.com>

On 5/6/05, Christopher Armstrong <radeex at gmail.com> wrote:
> I'd suggest 1) not writing a unit test framework, and instead using
> trial, and 2) instead of using stackless, use greenlet + my
> gthreadless module that integrates greenlets and Deferreds
> (sandbox/radix/gthreadless.py).

gthreadless looks quite cool! From things I've seen along the way, it
seems that many people are turned off by the callback style of
programming required by an async framework like Twisted. Using
gthreadless, your code looks just like normal synchronous code.

I'm only a little familiar with greenlet. Is there any significant
disadvantage to using this approach extensively? For example, is the
overhead very large?

Using gthreadless, one could interface sqlobject and Twisted's db
interface to take advantage of the work done in Twisted Enterprise to
make sqlobject-style database access safe for Twisted. (It's
undoubtedly possible without gthreadless, but it seems like it would
be a lot easier)

Kevin



From zooko at zooko.com  Fri May  6 07:19:18 2005
From: zooko at zooko.com (Zooko)
Date: Fri, 6 May 2005 11:19:18 +0000 (UTC)
Subject: [Twisted-Python] verbal violence humor (was: Evangelism notes...)
References: <42792BAC.1050701@rogers.com> <42793FB4.2070304@divmod.com>
	<60ed19d40505041657480dc31c@mail.gmail.com>
	<200505060216.24080.anthony@interlink.com.au>
	<2mmzr9wo46.fsf@starship.python.net>
	<20050505205154.GH25625@sourdust.home.puzzling.org>
Message-ID: <loom.20050506T131028-119@post.gmane.org>

One detail:

The social scene around Twisted currently features a lot of "verbal violence
humor".  This is very frequent on the IRC channel, and probably its
practitioners don't notice how often it occurs (because shared social customs
quickly become unnoticed by their practitioners).  In this e-mail thread,
someone wrote that people who say Twisted has no docs ought to be stabbed in the
face.  Obviously, this was intended as humor, but I believe that this social
custom, along with as other related social customs in Twistedland, deter people
from some other cultures from participating.

NB: I'm not saying it's "bad".  I'm not saying it's unfunny.  I'm not even
necessarily saying that you folks should try to change it -- maybe it works for
you and the "social exclusion" factor is not a big enough problem to warrant a
change.  All I'm saying is that verbal violence humor, interpersonal aggression
humor, and such customs limit the growth of your project by turning off people
from outside your own specific (sub-)culture.

Regards,

Zooko




From exarkun at divmod.com  Sat May  7 18:35:11 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sat, 07 May 2005 22:35:11 GMT
Subject: [Twisted-Python] Blocking on deferreds during unit tests (e.g.
	deferredResult)
In-Reply-To: <3f085ecd050507080273093f6a@mail.gmail.com>
Message-ID: <20050507223511.15422.1879524808.divmod.quotient.24702@ohm>

On Sat, 7 May 2005 11:02:09 -0400, Kevin Dangoor <dangoor at gmail.com> wrote:
>On 5/6/05, Christopher Armstrong <radeex at gmail.com> wrote:
>> I'd suggest 1) not writing a unit test framework, and instead using
>> trial, and 2) instead of using stackless, use greenlet + my
>> gthreadless module that integrates greenlets and Deferreds
>> (sandbox/radix/gthreadless.py).
>
>gthreadless looks quite cool! From things I've seen along the way, it
>seems that many people are turned off by the callback style of
>programming required by an async framework like Twisted. Using
>gthreadless, your code looks just like normal synchronous code.
>
>I'm only a little familiar with greenlet. Is there any significant
>disadvantage to using this approach extensively? For example, is the
>overhead very large?

  The main advantage is also the main disadvantage: when using gthreadless, rather than function callbacks, it becomes less obvious where context switches occur, leading to an increased likelihood of introducing concurrency-related bugs (primarily due to switches out of non-atomic operations).

  Unlike pre-emptive threads, such programming errors can be avoided entirely without the use of locks, but doing so may require more skill and attention to detail than would be required when writing the same code without gthreadless.

  This is somewhat unfortunate, since programmers least familiar with the concurrency problems solved by Twisted's current mechanisms -- function callbacks -- seem to be the most likely to be attracted by solutions like gthreadless while at the same time being the least prepared to develop software correctly with them.

  Of course, this isn't to say gthreadless isn't useful or an improvement over explicit use of Deferreds, just that caution needs to be taken in its use.  gthreadless documentation to the effect of the above paragraphs might go some ways towards letting people use it correctly, too (though since the module is still only in Chris' sandbox, I don't expect him to go out and write this right away; conversely, if someone were to contribute documentation, this might help gthreadless get released, either as part of Twisted or in a stand-alone capacity).

  Jp



From bob at redivi.com  Sat May  7 18:36:32 2005
From: bob at redivi.com (Bob Ippolito)
Date: Sat, 7 May 2005 18:36:32 -0400
Subject: [Twisted-Python] Re: Hanging test cases (Was: Evangelism notes...)
In-Reply-To: <u1x8jkhum.fsf@fitlinxx.com>
References: <C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>
	<20050506060050.15422.1130296805.divmod.quotient.21435@ohm>
	<uk6mcjc0f.fsf@fitlinxx.com>
	<6EA197D2-A573-4175-A0FB-9C5005389D68@redivi.com>
	<ufyx0j7dw.fsf@fitlinxx.com>
	<BDDD7C2C-EB8A-4601-8545-565ABEC46EAD@redivi.com>
	<u1x8jkhum.fsf@fitlinxx.com>
Message-ID: <44BAC89C-B47C-43ED-A154-763127D4DFC0@redivi.com>

On May 6, 2005, at 8:19 PM, David Bolen wrote:

> Bob Ippolito <bob at redivi.com> writes:
>
>
>> (1) Reactors can only be (meaningfully/predictably/etc) iterated if
>> Twisted rules the universe AND the implementation of that reactor is
>> amenable to that feature.  This is not a tautology.
>> (2) Reactors need to fire various startup/shutdown events.  Reactors
>> shouldn't be doing ANYTHING unless they are in a running state.
>>
>> The current deferredResult/deferredError breaks both of these
>> conditions.
>> (1) It iterates the reactor (which is a historically public, but
>> conceptually broken interface)
>> (2) It iterates the reactor in a STOPPED state.  The reactor is never
>> "running" during these tests.  Startup/Shutdown does not happen!
>>
>
> This seems like an internal implementation issue to me - when a
> reactor is "running" (I've called run()), it's basically stuck in a
> loop doing runUntilCurrent and then doIteration.  That's precisely
> what iterate does.

This is an implementation detail.  runUntilCurrent, doIteration, and  
iterate should not be public API.

> Now, I agree that if you have tests that never initiate the run, that
> you skip over some startup events.  But except for the uppermost
> tests, what is being tested is a specific unit test for a piece of the
> system that should be testable in isolation.  If the item under test
> has a dependency on startup events, the test should arrange for them.

The reactor itself needs startup/shutdown events.  As you've noticed,  
the thread pool depends on them.

>> The problem, for tests, is that using a properly written
>> deferredResult / deferredError the reactor would startup/shutdown
>> violently throughout the course of a single test, and will break the
>> hell out of it if it has anything to do with services/etc.  So, while
>> for SOME deferreds it would work fine, but for others, it wouldn't.
>> Basically, unless you can encapsulate the entire test in a single
>> deferred, then it shouldn't be using deferredResult/deferredError.
>>
>
> I still don't necessarily see that (the last sentence).  We use
> multiple deferrable operations in single tests, but never more than
> one at a time (e.g., no recursive or nested uses).  But certainly more
> than a single deferrable operation within a single test.
>
> I would, however, agree that I'd prefer even more the ability to
> completely start/stop a reactor during the course of a test, but would
> still like to be able to iterate it manually during the test to
> provide a natural blocking flow to the test.

We all want things that aren't really possible to do :)

> But in my current scenario, the majority of my components under test
> are having interfaces tested that are not impacted by startup/shutdown
> (and we don't use any services, in the Twisted sense, for example).

However if some implementation detail of twisted changes to take  
advantage of reactor startup/shutdown events internally then all of  
your tests would break even though the application would work.   
Having tests that fail in theory but work in practice is uh, bad.

>> Therefore, what SHOULD happen is that trial should let you write
>> tests that return deferreds, and it should let you write it in the
>> deferredGenerator style (so it doesn't suck so much).
>>
>
> I don't think I'd disagree with that - we pretty much stayed away from
> trial since I wasn't comfortable with it initially, so we're a pure
> Unittest approach, which certainly doesn't provide any framework for
> something like that.

Staying away from trial isn't really a bad idea.  It's obviously  
broken.  However, bringing the broken functionality from trial back  
into unittest doesn't make it any better :)

>>>     self.user = deferredResult(self.umgr.user())
>>>     self.user.email = 'test at dom.ain'
>>>     deferredResult(self.umgr.saveUser(self.user))
>>>
>>
>> # let's assume I've aliased waitForDeferred to "wait"
>>
>> d = waitForDeferred(self.umgr.user())
>> yield d
>> self.user = d.getResult()
>> self.user.email = 'test at dom.ain'
>> d = waitForDeferred(self.umgr.saveUser(self.user))
>> yield d
>> d.getResult()
>>
>> So, the test is 6 lines instead of 3.  Which sucks, but it's   
>> correct.
>> For tests that do more stuff, it probably should be even  less of a
>> problem.
>>
>
> Except that you didn't include the additional code I'd now have to
> write to actually turn that into a generator which is iterated over by
> the test in order to actually process the deferrable yields.  (Unless
> this is something trial does automatically somehow).

Trial could and should (but doesn't currently) do that automatically  
if your test function returns an iterator instead of None.

> That's what I meant by saying that the integration into generators is
> slick (and goes a good way to linearizing what is normally a callback
> chain), but still isn't quite as simple as the interface provided by
> the deferred{Result,Error} functions.

Using Twisted isn't as simple as using urllib to suck down a web  
page, and using ascii strings is easier than using unicode...

>> Well, let's say your database thing is a service, that maintains some
>> kind of ephemeral state that's required in some way.  If
>> deferredResult were properly written, this ephemeral state would hit
>> the bit bucket on each deferredResult, probably breaking your code
>> even though the test are "correct".
>>
>
> I might be getting lost on the "properly written" part, but if I were
> testing a component that did have state triggered during reactor
> startup/shutdown (which is what I think you're referring to), that
> test would likely be using direct calls to the component to trigger
> the startup/shutdown actions as part of the test setup/teardown, but
> without using the reactor.

That's assuming you actually know about all of the services necessary  
to make something work, and that these services can startup/shutdown  
properly in this manner.  The more special crap you write in a test  
the less useful the test is because it's testing something in an  
entirely different way than it actually works.

>> So, use deferredGenerator / waitForDeferred.
>>
>
> Once we move to 2.0 we might consider that (I'm not quite up for
> back-porting into 1.3 that we're using now), but I still think that
> would complicate the tests (in terms of the overhead to actually run
> each test like a generator) - but different people can have different
> views on what is more maintainable.

Move to 2.0 ASAP.  Don't backport to 1.3.

> Since we're not running our entire test bed under control of a single
> "reactor.run" call (I presume that's more of what trial does?), even
> using the generator would effectively be iterating the reactor
> somewhere along the line.

Trial doesn't use reactor.run at all, that's why it's broken.  Using  
the generator would be iterating the reactor but it would be not  
broken.  A good implementation of test would start and stop the  
reactor at the beginning and end of every test so that you (probably)  
don't end up with side-effects due to the order that the tests run.

> I don't know - maybe my use case is just limited enough (non trial, no
> nesting, etc...) that I don't see any true exposures through
> deferred{Result,Error} while I'm getting benefits.

You're right, some things don't break in horrible ways when you use  
deferred{Result,Error}.  Sometimes you can concatenate a str and a  
unicode and it Just Works too, but it only works if the str contains  
characters that can be decoded by the default encoding, whatever that  
happens to be at the time :)

-bob




From exarkun at divmod.com  Sat May  7 19:13:16 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sat, 07 May 2005 23:13:16 GMT
Subject: [Twisted-Python] Re: Hanging test cases (Was: Evangelism notes...)
In-Reply-To: <u1x8jkhum.fsf@fitlinxx.com>
Message-ID: <20050507231316.15422.715887765.divmod.quotient.24760@ohm>

On 06 May 2005 20:19:45 -0400, David Bolen <db3l at fitlinxx.com> wrote:
>Bob Ippolito <bob at redivi.com> writes:
>
>> (1) Reactors can only be (meaningfully/predictably/etc) iterated if
>> Twisted rules the universe AND the implementation of that reactor is
>> amenable to that feature.  This is not a tautology.
>> (2) Reactors need to fire various startup/shutdown events.  Reactors
>> shouldn't be doing ANYTHING unless they are in a running state.
>>
>> The current deferredResult/deferredError breaks both of these
>> conditions.
>> (1) It iterates the reactor (which is a historically public, but
>> conceptually broken interface)
>> (2) It iterates the reactor in a STOPPED state.  The reactor is never
>> "running" during these tests.  Startup/Shutdown does not happen!
>
>This seems like an internal implementation issue to me - when a
>reactor is "running" (I've called run()), it's basically stuck in a
>loop doing runUntilCurrent and then doIteration.  That's precisely
>what iterate does.
>

  It's an implementation detail, yes, but not an internal one.  For the reactor to operate properly, it *must* be started up and shut down.  That's simply a requirement of the interface.  It's not even a particularly unusual one: many libraries require you call some initialization function before proceeding to other APIs they provide.

  With recent versions of Twisted, many reactors don't actually depend terribly heavily on being started up, so you may be able to call iterate() without calling run() first and see something resembling correct behavior.  However, you should note that future versions of Twisted may introduce new startup requirements which break programs which assume reactors do not need an explicit startup event.  Additionally, third-party reactors may depend on the startup event now, thus breaking when used with code that only uses iterate().

  The shutdown event is much more important these days.  People who have noticed Twisted programs and tests which hang at shutdown can attest to this.

> [snip]
>
>I guess that's true of any nested use of deferredResult too, but we
>don't nest our deferredResult calls - no real need since any
>deferrable is directly wrapped with the deferredResult call, and
>deferredResult is only used in the tests, so what they are calling is
>always production code that is written properly with callbacks and
>what not.

  This is one of the cases, yes.

>
>> [snip]
>
>I still don't necessarily see that (the last sentence).  We use
>multiple deferrable operations in single tests, but never more than
>one at a time (e.g., no recursive or nested uses).  But certainly more
>than a single deferrable operation within a single test.
>
>I would, however, agree that I'd prefer even more the ability to
>completely start/stop a reactor during the course of a test, but would
>still like to be able to iterate it manually during the test to
>provide a natural blocking flow to the test.

  Your application code all deals with Deferred callbacks.  Why is it a stretch to have your test code do the same?

>
>But in my current scenario, the majority of my components under test
>are having interfaces tested that are not impacted by startup/shutdown
>(and we don't use any services, in the Twisted sense, for example).

  That you know of.  With current releases of Twisted.

> [snip]
>
>Yeah, that's a tough problem, although one that would also simplify
>the fact that we often run the tests under the unittest GUI, and
>occasionally have to fight cross-test pollution from the reactor
>persisting across test runs, which is a wart from the current
>restrictions.

  This is one reason you should use trial, even though it is broken.  Trial will be fixed by Twisted developers who (at least occassionally) have a firm grasp of how it can correctly interact with the reactor, so by using it you benefit from this understanding.  By using unittest, you are forced to get all the things right that trial will someday get right, or accept a broken test harness.

  If you have feature requirements that trial does not satisfy, make some feature requests :)  We are quite aware that trial is not yet feature complete and will welcome suggestions for features that make it a more useful tool.

> [snip]
> 
>That's what I meant by saying that the integration into generators is
>slick (and goes a good way to linearizing what is normally a callback
>chain), but still isn't quite as simple as the interface provided by
>the deferred{Result,Error} functions.

  I don't think anyone is trying to suggest that it is simpler.  However, it has the advantage of being correct.  Given the choice between simplicity and correctness, I am inclined towards correctness.

>
>> Well, let's say your database thing is a service, that maintains some
>> kind of ephemeral state that's required in some way.  If
>> deferredResult were properly written, this ephemeral state would hit
>> the bit bucket on each deferredResult, probably breaking your code
>> even though the test are "correct".
>
>I might be getting lost on the "properly written" part, but if I were
>testing a component that did have state triggered during reactor
>startup/shutdown (which is what I think you're referring to), that
>test would likely be using direct calls to the component to trigger
>the startup/shutdown actions as part of the test setup/teardown, but
>without using the reactor.

  You can definitely do this.  The problem is that the reactor may have internal setup and tear down of which you are not aware and which will cause problems if skipped.

> [snip]
>
>I don't know - maybe my use case is just limited enough (non trial, no
>nesting, etc...) that I don't see any true exposures through
>deferred{Result,Error} while I'm getting benefits.

  It may be the case that none of the bugs in trial synchronous result utilities cause problems for you.  If they don't, I can understand how it would not be a big priority for you to move away from them (after all, I'm sure you have plenty of things that *are* causing you problems now that you would much rather spend time on).  I recommend simply keeping this conversation in mind if and when you run into problems with your use of deferredResult and deferredError in the future and that you not let such problems take you by surprise.  You can rest relatively easily in the knowledge that deferredResult and friends will not disappear from Twisted overnight.  Broken as they are, they are clearly part of a public API and so will remain long enough to satisfy backwards compatibility requirements.

  Jp



From radeex at gmail.com  Sat May  7 21:31:34 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Sun, 8 May 2005 11:31:34 +1000
Subject: [Twisted-Python] Blocking on deferreds during unit tests (e.g.
	deferredResult)
In-Reply-To: <20050507223511.15422.1879524808.divmod.quotient.24702@ohm>
References: <3f085ecd050507080273093f6a@mail.gmail.com>
	<20050507223511.15422.1879524808.divmod.quotient.24702@ohm>
Message-ID: <60ed19d405050718312a5c9ae9@mail.gmail.com>

On 5/8/05, Jp Calderone <exarkun at divmod.com> wrote:
> On Sat, 7 May 2005 11:02:09 -0400, Kevin Dangoor <dangoor at gmail.com> wrote:
> >I'm only a little familiar with greenlet. Is there any significant
> >disadvantage to using this approach extensively? For example, is the
> >overhead very large?
> 
>   The main advantage is also the main disadvantage: when using gthreadless, 
> rather than function callbacks, it becomes less obvious where context switches 
> occur, leading to an increased likelihood of introducing concurrency-related 
> bugs (primarily due to switches out of non-atomic operations).

If you replace all occurences of "gthreadless" there with "greenlets
in general", then you're correct. However, if one is talking about
gthreadless, this argument is not true.

All context switches still *are* obvious. Every asynchronous operation
is still wrapped in a blockOn(), just like deferred generators.
gthreadless is basically deferred generators with much nicer syntax.


-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From radeex at gmail.com  Sat May  7 21:37:10 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Sun, 8 May 2005 11:37:10 +1000
Subject: [Twisted-Python] Re: Hanging test cases (Was: Evangelism notes...)
In-Reply-To: <u1x8jkhum.fsf@fitlinxx.com>
References: <C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>
	<20050506060050.15422.1130296805.divmod.quotient.21435@ohm>
	<uk6mcjc0f.fsf@fitlinxx.com>
	<6EA197D2-A573-4175-A0FB-9C5005389D68@redivi.com>
	<ufyx0j7dw.fsf@fitlinxx.com>
	<BDDD7C2C-EB8A-4601-8545-565ABEC46EAD@redivi.com>
	<u1x8jkhum.fsf@fitlinxx.com>
Message-ID: <60ed19d405050718373b3463d4@mail.gmail.com>

On 06 May 2005 20:19:45 -0400, David Bolen <db3l at fitlinxx.com> wrote:
> Bob Ippolito <bob at redivi.com> writes:
> > >     self.user = deferredResult(self.umgr.user())
> > >     self.user.email = 'test at dom.ain'
> > >     deferredResult(self.umgr.saveUser(self.user))
> >
> > # let's assume I've aliased waitForDeferred to "wait"
> >
> > d = waitForDeferred(self.umgr.user())
> > yield d
> > self.user = d.getResult()
> > self.user.email = 'test at dom.ain'
> > d = waitForDeferred(self.umgr.saveUser(self.user))
> > yield d
> > d.getResult()
> >
> > So, the test is 6 lines instead of 3.  Which sucks, but it's  correct.
> > For tests that do more stuff, it probably should be even  less of a
> > problem.
> 
> Except that you didn't include the additional code I'd now have to
> write to actually turn that into a generator which is iterated over by
> the test in order to actually process the deferrable yields.  (Unless
> this is something trial does automatically somehow).

Uhhh, maybe I'm missing something here, but as I understand it (I
probably should, being the guy who wrote deferredgenerators), that
code is:

    testCase = deferredGenerator(testCase)

after the definition of the method, or even:

    @deferredGenerator

before the definition of the method.

HTH

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From mary-twisted at puzzling.org  Sun May  8 05:45:00 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sun, 8 May 2005 19:45:00 +1000
Subject: [Twisted-Python] Call for documentation reviewers
Message-ID: <20050508094500.GG10207@sourdust.home.puzzling.org>

Hey,

They have been some people here pretty keen to have better
documentation.

One concrete thing you could do right now to help that take place is to
review existing documentation for me. Steps:

 1. Write a brief description of your general Twisted user profile (how
    much do you know about Twisted? what have you used it for?) Note I
    don't care what this profile is exactly, it can range from "novice
    programmer" to "author of reactor framework."

 2. Find an existing howto or document.

 3. Read through it.
    3a. Note any and all points where you are completely lost.
    3b. Note any and all points where you think something could be
        clearer.
    3c. Run the examples. Do they work? Do they make sense? What lines
        of code don't you understand?

 4. Having developed a probably extensive list of criticisms, file a bug
    against the documenation at http://twistedmatrix.com/bugs/ , put in your
    user profile and all your criticisms, and assign it to "hypatia".

 5. If at any stage you are inspired to write additions to the document
    you are reviewing, also attach them to the bug.

I will really really really try to make an effort to improve documents
based on reviews as outlined above. If you file one and I don't, poke me
with a stick. Participatory criticisms like this are very constructive
compared to "I wish someone would do something" level criticisms,
especially since Twisted is an almost entirely volunteer effort.
Volunteering yourself is so much more effective than volunteering other
people :) (Thanks to the people who have already filed docs bugs coming
out of this discussion.)

-Mary



From andrew-twisted at puzzling.org  Sun May  8 07:05:53 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 8 May 2005 21:05:53 +1000
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <427BBC40.4060702@reedflute.com>
References: <42792BAC.1050701@rogers.com>
	<1115238976.8476.54.camel@localhost.localdomain>
	<8f4623fb050504174011b553e3@mail.gmail.com>
	<427BBC40.4060702@reedflute.com>
Message-ID: <20050508110553.GA6728@frobozz>

On Fri, May 06, 2005 at 08:49:36PM +0200, Eugene Coetzee wrote:
[...]
> 
> I would love to see high level conceptual documentation to give me a 
> better idea of  basic concepts  like the "reactor", "application", 
> "service", "transport","protocol", "factory" - what they are supposed to 
> do and how they are  to fit together.

The glossary helps address this, although I think most people don't realise
it's there:
    http://twistedmatrix.com/projects/core/documentation/howto/glossary.html

I'd be interested to know if you think that helps, and whether you knew
about it and had read it before.

I agree that a nice overview (with a diagram or two) would help.

-Andrew.




From itamar at itamarst.org  Sun May  8 11:05:02 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 08 May 2005 11:05:02 -0400
Subject: [Twisted-Python] Blocking on deferreds during unit tests (e.g.
	deferredResult)
In-Reply-To: <3f085ecd050507080273093f6a@mail.gmail.com>
References: <op.sqcgh7jny3d107@aspen> <427BB66E.5070509@divmod.com>
	<60ed19d40505062024fe69940@mail.gmail.com>
	<3f085ecd050507080273093f6a@mail.gmail.com>
Message-ID: <1115564702.8059.28.camel@localhost.localdomain>

On Sat, 2005-05-07 at 11:02 -0400, Kevin Dangoor wrote:

> Using gthreadless, one could interface sqlobject and Twisted's db
> interface to take advantage of the work done in Twisted Enterprise to
> make sqlobject-style database access safe for Twisted. (It's
> undoubtedly possible without gthreadless, but it seems like it would
> be a lot easier)

Nope, that wouldn't work. greenlets do *not* make blocking APIs ot
block.




From macosxservertiger at gmail.com  Sun May  8 11:15:12 2005
From: macosxservertiger at gmail.com (Max)
Date: Sun, 8 May 2005 17:15:12 +0200
Subject: [Twisted-Python] Twisted on Mac OS X 10.4
Message-ID: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>

Hi,
do you know how to install Twisted on Mac OS X 10.4 Tiger?
I need it to deploy Punjab...
Thank you
Max



From jadestorm at nc.rr.com  Sun May  8 11:33:09 2005
From: jadestorm at nc.rr.com (Daniel Henninger)
Date: Sun, 8 May 2005 11:33:09 -0400 (EDT)
Subject: [Twisted-Python] Twisted on Mac OS X 10.4
In-Reply-To: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>
References: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>
Message-ID: <50771.10.0.0.9.1115566389.squirrel@www.vorpalcloud.org>

I had put together a twisted fink package for 10.3.  I don't have 10.4 yet
so that isn't yet a possibility.  ;D  Is that how you had folk install
twisted before?  fink?  or something else?

Daniel

-- 
"The most addictive drug in the world is music."
     - The Lost Boyz

> Hi,
> do you know how to install Twisted on Mac OS X 10.4 Tiger?
> I need it to deploy Punjab...
> Thank you
> Max
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>





From macosxservertiger at gmail.com  Sun May  8 12:03:48 2005
From: macosxservertiger at gmail.com (Max)
Date: Sun, 8 May 2005 18:03:48 +0200
Subject: [Twisted-Python] Twisted on Mac OS X 10.4
In-Reply-To: <50771.10.0.0.9.1115566389.squirrel@www.vorpalcloud.org>
References: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>
	<50771.10.0.0.9.1115566389.squirrel@www.vorpalcloud.org>
Message-ID: <10473CEC-ACC1-476D-AB6D-339E3A9D54E5@gmail.com>

Actually I didn't even know Twisted existed before having 10.4  
Server. Because I want to extend the iChat server, I need Twisted to  
run Punjab.
I hope you can do the package for 10.4 asap.
Thanks
Max




Il giorno 08/mag/05, alle ore 17:33, Daniel Henninger ha scritto:

> I had put together a twisted fink package for 10.3.  I don't have  
> 10.4 yet
> so that isn't yet a possibility.  ;D  Is that how you had folk install
> twisted before?  fink?  or something else?
>
> Daniel
>
> -- 
> "The most addictive drug in the world is music."
>      - The Lost Boyz
>
>
>> Hi,
>> do you know how to install Twisted on Mac OS X 10.4 Tiger?
>> I need it to deploy Punjab...
>> Thank you
>> Max
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>>
>>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From jadestorm at nc.rr.com  Sun May  8 12:30:36 2005
From: jadestorm at nc.rr.com (Daniel Henninger)
Date: Sun, 8 May 2005 12:30:36 -0400 (EDT)
Subject: [Twisted-Python] Twisted on Mac OS X 10.4
In-Reply-To: <10473CEC-ACC1-476D-AB6D-339E3A9D54E5@gmail.com>
References: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>
	<50771.10.0.0.9.1115566389.squirrel@www.vorpalcloud.org>
	<10473CEC-ACC1-476D-AB6D-339E3A9D54E5@gmail.com>
Message-ID: <51084.10.0.0.9.1115569836.squirrel@www.vorpalcloud.org>

Yeah, it should be trivial once I have tiger in hand.  Supposedly that's
targetted for next week.

Daniel

-- 
"The most addictive drug in the world is music."
     - The Lost Boyz

> Actually I didn't even know Twisted existed before having 10.4
> Server. Because I want to extend the iChat server, I need Twisted to
> run Punjab.
> I hope you can do the package for 10.4 asap.
> Thanks
> Max
>
>
>
>
> Il giorno 08/mag/05, alle ore 17:33, Daniel Henninger ha scritto:
>
>> I had put together a twisted fink package for 10.3.  I don't have
>> 10.4 yet
>> so that isn't yet a possibility.  ;D  Is that how you had folk install
>> twisted before?  fink?  or something else?
>>
>> Daniel
>>
>> --
>> "The most addictive drug in the world is music."
>>      - The Lost Boyz
>>
>>
>>> Hi,
>>> do you know how to install Twisted on Mac OS X 10.4 Tiger?
>>> I need it to deploy Punjab...
>>> Thank you
>>> Max
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>>
>>>
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>





From daverz at gmail.com  Sun May  8 12:33:21 2005
From: daverz at gmail.com (Dave Cook)
Date: Sun, 8 May 2005 09:33:21 -0700
Subject: [Twisted-Python] Twisted on Mac OS X 10.4
In-Reply-To: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>
References: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>
Message-ID: <7a59f02505050809334e7984fe@mail.gmail.com>

On 5/8/05, Max <macosxservertiger at gmail.com> wrote:

> do you know how to install Twisted on Mac OS X 10.4 Tiger?

python setup.py install didn't work?  Well, I guess I'll find out as I
just installed 10.4 last night.  Was kind of disappointed that Apple
didn't upgrade to Python 2.4.

Dave Cook



From projects at reedflute.com  Sun May  8 12:38:54 2005
From: projects at reedflute.com (Eugene Coetzee)
Date: Sun, 08 May 2005 18:38:54 +0200
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <20050508110553.GA6728@frobozz>
References: <42792BAC.1050701@rogers.com>	<1115238976.8476.54.camel@localhost.localdomain>	<8f4623fb050504174011b553e3@mail.gmail.com>	<427BBC40.4060702@reedflute.com>
	<20050508110553.GA6728@frobozz>
Message-ID: <427E409E.7030105@reedflute.com>

Andrew Bennetts wrote:

>On Fri, May 06, 2005 at 08:49:36PM +0200, Eugene Coetzee wrote:
>[...]
>  
>
>>I would love to see high level conceptual documentation to give me a 
>>better idea of  basic concepts  like the "reactor", "application", 
>>"service", "transport","protocol", "factory" - what they are supposed to 
>>do and how they are  to fit together.
>>    
>>
>
>The glossary helps address this, although I think most people don't realise
>it's there:
>    http://twistedmatrix.com/projects/core/documentation/howto/glossary.html
>
>I'd be interested to know if you think that helps, and whether you knew
>about it and had read it before.
>  
>
No - I didn't read it before and there is no excuse for that :-)

It certainly helps, although it may be a bit minimalistic. 

>I agree that a nice overview (with a diagram or two) would help.
>
>  
>
Certainly.

I also find the "howto's" useful in attempting to explaining the design 
philosphy in a haphazard way - but there are a lot of thing that could 
better be explained in a more complete, systematic and elaborate overview.


regards,

Eugene Coetzee

Web                 -> www.reedflute.com
=============================================== 




From jarrod.roberson at gmail.com  Sun May  8 12:41:07 2005
From: jarrod.roberson at gmail.com (jarrod roberson)
Date: Sun, 8 May 2005 12:41:07 -0400
Subject: [Twisted-Python] Twisted on Mac OS X 10.4
In-Reply-To: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>
References: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>
Message-ID: <2389d473050508094127e7212f@mail.gmail.com>

On 5/8/05, Max <macosxservertiger at gmail.com> wrote:
> 
> Hi,
> do you know how to install Twisted on Mac OS X 10.4 Tiger?
> I need it to deploy Punjab...
> Thank you
> Max



get it and then run >>python setup.py install


-- 
If you don't know what you want, you probably need a nap.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050508/7b7ca94e/attachment.htm 

From dreid at dreid.org  Sun May  8 14:09:00 2005
From: dreid at dreid.org (David Reid)
Date: Sun, 08 May 2005 11:09:00 -0700
Subject: [Twisted-Python] Twisted on Mac OS X 10.4
In-Reply-To: <7a59f02505050809334e7984fe@mail.gmail.com>
References: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>
	<7a59f02505050809334e7984fe@mail.gmail.com>
Message-ID: <427E55BC.1050701@dreid.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


Dave Cook wrote:
> On 5/8/05, Max <macosxservertiger at gmail.com> wrote:
> 
> 
>>do you know how to install Twisted on Mac OS X 10.4 Tiger?
> 
> 
> python setup.py install didn't work?  Well, I guess I'll find out as I
> just installed 10.4 last night.  Was kind of disappointed that Apple
> didn't upgrade to Python 2.4.
> 
> Dave Cook
> 

If for some strange reason python setup.py install doesn't work you can
always just put the twisted directory in your path, either with a
symlink, copying it, appending it to the PYTHONPATH variable, or using a
.pth file.

- -David Reid
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.5 (GNU/Linux)

iD8DBQFCflW8rsrO6aeULcgRApRsAKCAIQ+1nYlgWPHdmwhEnp+rSINxmwCeIGD7
WgCDScEGcgoeuFuDMsCMTeA=
=zCms
-----END PGP SIGNATURE-----



From bob at redivi.com  Sun May  8 14:33:10 2005
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 8 May 2005 14:33:10 -0400
Subject: [Twisted-Python] Twisted on Mac OS X 10.4
In-Reply-To: <427E55BC.1050701@dreid.org>
References: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>
	<7a59f02505050809334e7984fe@mail.gmail.com>
	<427E55BC.1050701@dreid.org>
Message-ID: <7ADDD47F-1045-47C5-8435-FD82847C8832@redivi.com>

On May 8, 2005, at 2:09 PM, David Reid wrote:

> Dave Cook wrote:
>
>> On 5/8/05, Max <macosxservertiger at gmail.com> wrote:
>>
>>> do you know how to install Twisted on Mac OS X 10.4 Tiger?
>>
>> python setup.py install didn't work?  Well, I guess I'll find out  
>> as I
>> just installed 10.4 last night.  Was kind of disappointed that Apple
>> didn't upgrade to Python 2.4.
>
> If for some strange reason python setup.py install doesn't work you  
> can
> always just put the twisted directory in your path, either with a
> symlink, copying it, appending it to the PYTHONPATH variable, or  
> using a
> .pth file.

"sudo python setup.py install" should work fine.  symlinking or pth  
files would also work just fine (but neither would get you the twistd  
script, etc. without also modifying PATH).

DO NOT USE PYTHONPATH.  All of the alternatives suck less.

-bob




From macosxservertiger at gmail.com  Sun May  8 15:25:27 2005
From: macosxservertiger at gmail.com (Max server)
Date: Sun, 8 May 2005 21:25:27 +0200
Subject: [Twisted-Python] Twisted on Mac OS X 10.4
In-Reply-To: <7ADDD47F-1045-47C5-8435-FD82847C8832@redivi.com>
References: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>
	<7a59f02505050809334e7984fe@mail.gmail.com>
	<427E55BC.1050701@dreid.org>
	<7ADDD47F-1045-47C5-8435-FD82847C8832@redivi.com>
Message-ID: <c615ac0805050812259d38133@mail.gmail.com>

I tried installing it on a 10.4 Server and got the following

Traceback (most recent call last):
  File "setup.py", line 20, in ?
    from twisted import copyright
  File "./twisted/__init__.py", line 21, in ?
    raise ImportError, "you need zope.interface installed
(http://zope.org/Products/ZopeInterface/)"
ImportError: you need zope.interface installed
(http://zope.org/Products/ZopeInterface/)

Then I downloaded ZopeInterface 3.0.1 from
http://zope.org/Products/ZopeInterface/ and tried to install it but
had the following error -of course xcode 2 is installed-

running install
running build
running build_py
creating build
creating build/lib.darwin-8.0.0-Power_Macintosh-2.3
creating build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope
copying Dependencies/zope-ZopeInterface-3.0.1/zope/__init__.py ->
build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope
creating build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/__init__.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/_flatten.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/adapter.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/advice.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/declarations.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/document.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/exceptions.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/interface.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/interfaces.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/ro.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/verify.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
creating build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/common
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/common/__init__.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/common
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/common/idatetime.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/common
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/common/interfaces.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/common
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/common/mapping.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/common
creating build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/common/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/common/tests/__init__.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/common/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/common/tests/basemapping.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/common/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/common/tests/test_idatetime.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/common/tests
creating build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/__init__.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/dummy.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/ifoo.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/m1.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/m2.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/odd.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/test_adapter.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/test_advice.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/test_declarations.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/test_document.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/test_element.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/test_interface.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/test_odd_declarations.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/test_sorting.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/test_verify.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/unitfixtures.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
creating build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/testing
copying Dependencies/zope.testing-ZopeInterface-3.0.1/zope.testing/__init__.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/testing
copying Dependencies/zope.testing-ZopeInterface-3.0.1/zope.testing/cleanup.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/testing
copying Dependencies/zope.testing-ZopeInterface-3.0.1/zope.testing/doctest.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/testing
copying Dependencies/zope.testing-ZopeInterface-3.0.1/zope.testing/doctestunit.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/testing
copying Dependencies/zope.testing-ZopeInterface-3.0.1/zope.testing/loggingsupport.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/testing
copying Dependencies/zope.testing-ZopeInterface-3.0.1/zope.testing/loghandler.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/testing
copying Dependencies/zope.testing-ZopeInterface-3.0.1/zope.testing/tests.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/testing
copying Dependencies/zope-ZopeInterface-3.0.1/zope/PUBLICATION.cfg ->
build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope
copying Dependencies/zope-ZopeInterface-3.0.1/zope/README.txt ->
build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/adapter.txt
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/DEPENDENCIES.cfg
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/human.txt
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/PUBLICATION.cfg
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/README.txt
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/SETUP.cfg
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/foodforthought.txt
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
running build_ext
building 'zope.interface._zope_interface_coptimizations' extension
creating build/temp.darwin-8.0.0-Power_Macintosh-2.3
creating build/temp.darwin-8.0.0-Power_Macintosh-2.3/Dependencies
creating build/temp.darwin-8.0.0-Power_Macintosh-2.3/Dependencies/zope.interface-ZopeInterface-3.0.1
creating build/temp.darwin-8.0.0-Power_Macintosh-2.3/Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface
gcc -fno-strict-aliasing -Wno-long-double -no-cpp-precomp
-mno-fused-madd -fno-common -dynamic -DNDEBUG -g -O3 -Wall
-Wstrict-prototypes
-IDependencies/zope.interface-ZopeInterface-3.0.1/zope.interface
-I/System/Library/Frameworks/Python.framework/Versions/2.3/include/python2.3
-c Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/_zope_interface_coptimizations.c
-o build/temp.darwin-8.0.0-Power_Macintosh-2.3/Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/_zope_interface_coptimizations.o
Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/_zope_interface_coptimizations.c:339:
error: static declaration of 'SpecType' follows non-static declaration
Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/_zope_interface_coptimizations.c:73:
error: previous declaration of 'SpecType' was here
error: command 'gcc' failed with exit status 1





On 5/8/05, Bob Ippolito <bob at redivi.com> wrote:
> On May 8, 2005, at 2:09 PM, David Reid wrote:
> 
> > Dave Cook wrote:
> >
> >> On 5/8/05, Max <macosxservertiger at gmail.com> wrote:
> >>
> >>> do you know how to install Twisted on Mac OS X 10.4 Tiger?
> >>
> >> python setup.py install didn't work?  Well, I guess I'll find out
> >> as I
> >> just installed 10.4 last night.  Was kind of disappointed that Apple
> >> didn't upgrade to Python 2.4.
> >
> > If for some strange reason python setup.py install doesn't work you
> > can
> > always just put the twisted directory in your path, either with a
> > symlink, copying it, appending it to the PYTHONPATH variable, or
> > using a
> > .pth file.
> 
> "sudo python setup.py install" should work fine.  symlinking or pth
> files would also work just fine (but neither would get you the twistd
> script, etc. without also modifying PATH).
> 
> DO NOT USE PYTHONPATH.  All of the alternatives suck less.
> 
> -bob
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From mary-twisted at puzzling.org  Sun May  8 16:42:11 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Mon, 9 May 2005 06:42:11 +1000
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <427E409E.7030105@reedflute.com>
References: <42792BAC.1050701@rogers.com>
	<1115238976.8476.54.camel@localhost.localdomain>
	<8f4623fb050504174011b553e3@mail.gmail.com>
	<427BBC40.4060702@reedflute.com> <20050508110553.GA6728@frobozz>
	<427E409E.7030105@reedflute.com>
Message-ID: <20050508204211.GC26815@sourdust.home.puzzling.org>

On Sun, May 08, 2005, Eugene Coetzee wrote:
> It certainly helps, although it may be a bit minimalistic. 

A review would be appreciated :) Also, any suggestions on how to make
the glossary easier to find? 

-Mary



From robin at wiretooth.com  Sun May  8 22:45:33 2005
From: robin at wiretooth.com (Robin Bryce)
Date: Mon, 09 May 2005 03:45:33 +0100
Subject: [Twisted-Python] Questionaire: How twisted are you ? (Was:
	Evangelism notes...)
In-Reply-To: <20050508204211.GC26815@sourdust.home.puzzling.org>
References: <42792BAC.1050701@rogers.com>	<1115238976.8476.54.camel@localhost.localdomain>	<8f4623fb050504174011b553e3@mail.gmail.com>	<427BBC40.4060702@reedflute.com>
	<20050508110553.GA6728@frobozz>	<427E409E.7030105@reedflute.com>
	<20050508204211.GC26815@sourdust.home.puzzling.org>
Message-ID: <427ECECD.6000207@wiretooth.com>

In the spirit of just having a go and testing out my twisted knowledge 
on this list I thought I'd start a questionaire, with answers, inspired by:

> I would love to see high level conceptual documentation to give me a
> better idea of  basic concepts  like the "reactor", "application",
> "service", "transport","protocol", "factory" - what they are supposed
> to do and how they are  to fit together.

I am by no stretch of the imagination qualified to advertise these 
answers as authoratative. Buyer beware, and if you don't like mine give 
me a fat -ve 10 for my twisted score and show me your answer ;-)

Authoritative intro material is at:

http://twistedmatrix.com/projects/core/documentation/howto/basics.html
http://twistedmatrix.com/projects/core/documentation/howto/glossary.html

Q1. How do you run a twisted program ?

In as many ways as there are pebbles on a beach ;-)

There are lots of great examples in the docs that get you to the point 
where you have a python file that will create an application instance at 
global scope. Once you've got this far the simplest way to run your 
twisted program is to add the following to that file:

from twisted.internet import reactor
reactor.run()

And then at the command prompt

python myapplication.py

Once you're comfortable with the basics of Services, the Application, 
Factory's and Protocols you're going to start caring about things like 
persistence, daemonization, privilege scheding, plugins etc. At that 
point it's time to look at 'twistd'. If you remove the lines from 
myapplication.py that were added above then you can run your application 
directly from the prompt with:

twistd -oy myapplication.py

Then you will get the almost the same result. The primary difference is 
that your now running your program as a daemon.

twistd is a program that loads twisted applications from many different 
formats, including .py, and starts the application instance it finds there.

Q2. What is an application ?

Most twisted programs begin with an application instance. Twisted 
defines a helper function for creating an application instance so that 
it includes all the bits of functionality that allow it to be driven by 
the twisted framework. This function is found in the module 
twisted.application.service and is called 'Application'.

Most twisted programs define a python file that makes a call to the 
'Application' function at global scope. Just doing this, and nothing 
else, will not get you very interesting results, for that you need to 
look at adding 'Services'.

If you've already got a python file that defines an application instance 
this way - in addition to some example code - and you just want to know 
the simplest way to run your program, then the answer you're after is 
almost certainly:

# add these lines to myprogram.py
from twisted.internet import reactor
reactor.run()

$ python myprogram.py

But see Q1. for a little more on this.

This is the most suitable way if you want to single step through your 
program in a debugger to find out how twisted works. There are many 
other ways to run your program but it's safe to ignore them until you 
decide you want them.

Q3. What's a Service ?

'Services' collect together the bits that make it possible for cool 
networking stuff to happen in a single thread without blocking[1]. You 
don't have to use them to use the twisted framework but they can help. 
If you are using an application instance then you almost certainly want 
to use Services as well.

You add Service's to your application instance (see Q2 for creating 
one). Each service typically manages a discrete network service. The 
twisted framework starts and stops all Services in an application in a 
well defined way when your program is executed. This includes provision 
for giving your services a chance to do stuff before privilege scheding 
happens.

To define what your service is you will usually want to subclass 
twisted.application.service.Service and override any, or all of:

privilegedStartService, startService, stopService.

During a single run of your program each of these methods is called 
exactly once and in exactly that order. If you need to bind to 
privileged ports then privilegedStartService is where you need to do it.

The bits that are used to piece together Service behavior are 
principally: Factory's, Protocols, and Defereds. The parameters involved 
in binding these bits together are things like hostnames, portnumbers, 
database passwords, and (arguably) the networking protocol the service 
is dealing with. Collecting these things together into a service can be 
done by hand, often, it can be easier, more flexible, and much more 
extensible if Adapters are used to do the binding.

[1] Note carefully the word 'possible' in relation to 'without 
blocking'. The twisted framework can not guarantee your program will not 
block. Twisted just gives you a set of concurrency primitives to help 
you write your program so it doesn't block. To understand how to write a 
twisted program so it never blocks you need to learn to love 'Defered's. 
Concurrency primitives in python essentially boil down to a choice 
between callbacks or generators. The twisted framework supports both (as 
of 2.0) but the callback style is the most established. Generators 
didn't arrive   in python until 2.2.

Q4. What's a MultiService ?

At some point you will almost certainly decide that subclassing 
MultiService is going to help you. It's not. To quote moshez:

"duuuuuude. don't. inherit. multiservice."

[And certainly don't inherit from both MultiService and Componentized at 
the same time ;-)]

MultiService is an internal class that is used by the framework to 
manage the order in which all services, added to the application 
instance by you, are started and stoped. The fraze "added to the 
application instance" is potentially misleading but from the birds eye 
perspective this is essentially what you do when you add Services.

You almost certainly do want to subclass Service. But don't be fooled 
into subclassing MultiService.

Q4 What's a Factory ?

Q5 What's a Protocol ?

Q6 How do I get my Factory to open a connection ?

Q7. How do I get my Factory to serve a connection ?

Q8. How do I cancel my attempt to open a connection ?

Q9. What's a plugin ?

Q10. Ok, I'm feeling brave, what is an Application realy and why can't 
it be subclassable ?

You can't subclass it because it is a function. But that doesn't tell 
you anything useful.

The value returned by the function 
twisted.application.service.Appliction is an instance of 
twisted.python.components.Componentized.

Componentized is a class that provides interface aggregation facilities 
in a persistable way. When you call Application you are creating an 
instance of Componentized that aggregates instances of the following 
together:

* twisted.application.service.MultiService
* twisted.application.service.Process
* twisted.persisted.sob.Persitent

The twisted framework uses interfaces and adapters to reduce the 
tendency for functional dependencies to snarl up the implementation of 
the framework. To do this it needs your application to support interface 
aggregation and to provide the basic interfaces that enable it to drive 
your program the Twisted way.

In these terms the function Application produces an instance that 
supports the interfaces IService, IMultiService, IPersitable and 
IProcess. MultiService implements IService and IMultiService[1], 
Persistent implements IPersistable, and Process implements IProcess.

These are the basic guarantees about the application instance that 
enable the twisted framework to drive your application.

You can't specialize of the above instances either - unless you are 
prepared to mimic the behavior of Application. You're only route for 
specializing your application is by adding services. ie., via some 
variation of:

IService(MySerivce()).setServiceParent(IMultiService(application))


It's not unusual or unreasonable to write a replacement for Application. 
A perfectly acceptable example is:

def MyApplication():

       a = MyService()
       a.setName("myapplication")
       ret = service.MultiService()
       a.setServiceParent(ret)

       return ret

Reading up on adapters & interfaces in the python / Zope3 sense can give 
you an extra perspective when looking at the twisted docs on Adapters 
and interfaces. Twisted 2.0 actually uses Zope3 interfaces. And if 
you're reading this answer then there is a good chance taking the time 
to do this will help you.

http://www.python.org/peps/pep-0246.html
http://mail.zope.org/pipermail/zope3-dev/2005-January/013064.html

[1]It is required that the IService interface and the IMultiService 
interface are implemented by the same underlying object (or at least it 
is by the application unit tests).

You really probably don't want to read any more of this answer. For one 
thing Componentized looks like it's going to be superseded by Faceted 
which does similar things but much much better.

 From the doc string of Componentized:

"I am a mixin to allow you to be adapted in various ways persistently."

Componentized caches addaptions in a persitable way. Your applications 
root service, the MultiService instance above is effectively a 
persistably cached adaption from None to IMultiService and to IService.

Well you did ask ;->

When you do:

IService(application)

You are retreiving the IService interface for you application that 
happens to be implemented by twisted.application.service.MultiService

Depending on the feedback I'm keen to see/provide answers to Q4-Q8, 
Don't feel confident at all about Q9.

Cheers,

Robin

Mary Gardiner wrote:
> On Sun, May 08, 2005, Eugene Coetzee wrote:
> 
>>It certainly helps, although it may be a bit minimalistic. 
> 
> 
> A review would be appreciated :) Also, any suggestions on how to make
> the glossary easier to find? 
> 
> -Mary
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From leslie at exoweb.net  Sun May  8 22:01:17 2005
From: leslie at exoweb.net (Leslie Huyan)
Date: Mon, 09 May 2005 10:01:17 +0800
Subject: [Twisted-Python] How can I change the default behaviour?
In-Reply-To: <427E55BC.1050701@dreid.org>
References: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>	<7a59f02505050809334e7984fe@mail.gmail.com>
	<427E55BC.1050701@dreid.org>
Message-ID: <427EC46D.2030708@exoweb.net>

Hi:
    I encountered one problem to dig into twisted.
    If I have 2 methods in the call back chain, however I don't want the 
result of the first one to pass to the second one as its arguments, what 
should I do?
    For example:
    defer.addCallbacks(request.write, html)
    defer.addCallbacks(request.setHeader, key, value)

Thank you.



From bob at redivi.com  Sun May  8 22:19:55 2005
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 8 May 2005 22:19:55 -0400
Subject: [Twisted-Python] How can I change the default behaviour?
In-Reply-To: <427EC46D.2030708@exoweb.net>
References: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>	<7a59f02505050809334e7984fe@mail.gmail.com>
	<427E55BC.1050701@dreid.org> <427EC46D.2030708@exoweb.net>
Message-ID: <1B4E42E9-E357-4ADC-BB55-9939229A0001@redivi.com>

On May 8, 2005, at 10:01 PM, Leslie Huyan wrote:

>    I encountered one problem to dig into twisted.
>    If I have 2 methods in the call back chain, however I don't want  
> the result of the first one to pass to the second one as its  
> arguments, what should I do?
>    For example:
>    defer.addCallbacks(request.write, html)
>    defer.addCallbacks(request.setHeader, key, value)

The solution to this problem is to write a callback that does what  
you need to do and attach that to the deferred:

def doStuff(result):
     request.write(html)
     request.setHeader(key, value)
     return result
defer.addCallback(doStuff)

By the way, your example is not going to work (at all) because the  
method you want is "addCallback" and the first argument passed to the  
callback is going to be the deferred result.  request.write(result,  
html) and request.setHeader(result, key, value) aren't going to do  
what you want.

-bob




From radeex at gmail.com  Sun May  8 22:20:05 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Mon, 9 May 2005 12:20:05 +1000
Subject: [Twisted-Python] How can I change the default behaviour?
In-Reply-To: <427EC46D.2030708@exoweb.net>
References: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>
	<7a59f02505050809334e7984fe@mail.gmail.com>
	<427E55BC.1050701@dreid.org> <427EC46D.2030708@exoweb.net>
Message-ID: <60ed19d40505081920695b2de@mail.gmail.com>

For this particular example, I would suggest just putting them in a
single method, since request.write doesn't return a Deferred and you
don't need to wait for anything before doing the setHeader.

def gotResult(html):
    request.write(html)
    request.setHeader(key, value)
d.addCallback(gotResult)

In the general case, though, you can do something like

def gotResult(r):
    request.write(r)
    return r
d.addCallback(gotResult)
d.addCallback(anotherCallback)

On 5/9/05, Leslie Huyan <leslie at exoweb.net> wrote:
> Hi:
>     I encountered one problem to dig into twisted.
>     If I have 2 methods in the call back chain, however I don't want the
> result of the first one to pass to the second one as its arguments, what
> should I do?
>     For example:
>     defer.addCallbacks(request.write, html)
>     defer.addCallbacks(request.setHeader, key, value)
> 
> Thank you.


-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From leslie at exoweb.net  Sun May  8 23:28:11 2005
From: leslie at exoweb.net (Leslie Huyan)
Date: Mon, 09 May 2005 11:28:11 +0800
Subject: [Twisted-Python] How can I change the default behaviour?
In-Reply-To: <60ed19d40505081920695b2de@mail.gmail.com>
References: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>	<7a59f02505050809334e7984fe@mail.gmail.com>	<427E55BC.1050701@dreid.org>
	<427EC46D.2030708@exoweb.net>
	<60ed19d40505081920695b2de@mail.gmail.com>
Message-ID: <427ED8CB.5060506@exoweb.net>

Hi:
That's reasonable, I put them in a single method and it works. So I 
should make my methods to fit for the default behaviour rather than 
change it. (one result pass to be  next args)
Thank you.

leslie
Christopher Armstrong wrote:

>For this particular example, I would suggest just putting them in a
>single method, since request.write doesn't return a Deferred and you
>don't need to wait for anything before doing the setHeader.
>
>def gotResult(html):
>    request.write(html)
>    request.setHeader(key, value)
>d.addCallback(gotResult)
>
>In the general case, though, you can do something like
>
>def gotResult(r):
>    request.write(r)
>    return r
>d.addCallback(gotResult)
>d.addCallback(anotherCallback)
>
>On 5/9/05, Leslie Huyan <leslie at exoweb.net> wrote:
>  
>
>>Hi:
>>    I encountered one problem to dig into twisted.
>>    If I have 2 methods in the call back chain, however I don't want the
>>result of the first one to pass to the second one as its arguments, what
>>should I do?
>>    For example:
>>    defer.addCallbacks(request.write, html)
>>    defer.addCallbacks(request.setHeader, key, value)
>>
>>Thank you.
>>    
>>
>
>
>  
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050509/08796464/attachment.htm 

From naewe.s at atlas.de  Mon May  9 06:17:54 2005
From: naewe.s at atlas.de (=?ISO-8859-15?Q?Stefan_N=E4we?=)
Date: Mon, 09 May 2005 12:17:54 +0200
Subject: [Twisted-Python] Q about handling CTRL-C correctly
In-Reply-To: <42777AD7.7080607@twistedmatrix.com>
References: <42772B55.8040709@atlas.de> <42777AD7.7080607@twistedmatrix.com>
Message-ID: <427F38D2.6040406@atlas.de>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Tommi Virtanen schrieb:
>> class SimpleServer(Protocol):
>>     def connectionMade(self):
>>         m = self.factory.msg()
>>         while running:
>>             self.transport.write(m.pack())
>>             sys.stderr.write(".")
>>             time.sleep(1)
>>         self.transport.loseConnection()
> 
> That's blocking code, right there. Don't use time.sleep with twisted.

OK.

> See task.LoopingCall and reactor.callLater.

task.LoopingCall did the job.

THX

Stefan
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.0 (Cygwin)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFCfzjSsDu9QQ7KHU4RAuLyAJ4/aJ2DJczHGOiFN9tEfwQJ8+nQnQCfWqyC
MduFQL3dI4EMVR68MC9hPJM=
=obJJ
-----END PGP SIGNATURE-----




From mwh at python.net  Mon May  9 09:09:22 2005
From: mwh at python.net (Michael Hudson)
Date: Mon, 09 May 2005 14:09:22 +0100
Subject: [Twisted-Python] Re: Evangelism notes...
References: <42792BAC.1050701@rogers.com> <42793FB4.2070304@divmod.com>
	<60ed19d40505041657480dc31c@mail.gmail.com>
	<200505060216.24080.anthony@interlink.com.au>
	<2mmzr9wo46.fsf@starship.python.net>
	<20050505205154.GH25625@sourdust.home.puzzling.org>
Message-ID: <2mekcgv94t.fsf@starship.python.net>

Mary Gardiner <mary-twisted at puzzling.org> writes:

> On Thu, May 05, 2005, Michael Hudson wrote:
>> Python appears to have more worker bees than Twisted who do the kind
>> of general work radix was asking for, despite none of them being paid
>> to do it; this is probably mostly a function of just being a bigger,
>> more visible project (after all, every Twisted user is a Python user).
>
> This probably shouldn't be assumed though. If that's all it is, OK,
> damn.

Well, maybe it's just luck, or statistics of small numbers.  After
all, Python doesn't have very many worker bees compared to the long
list of people who have checkin rights.

> But if there's something about the Python community which is
> qualitatively different and which encourages the kind of work being
> discussed, Twisted should consider emulating it.

The (maybe just perceived, maybe real) barrier to entry is probably
higher for twisted.  Maybe you need more simple-to-fix bugs :)

Cheers,
mwh

-- 
  If you give someone Fortran, he has Fortran.
  If you give someone Lisp, he has any language he pleases.
    -- Guy L. Steele Jr, quoted by David Rush in comp.lang.scheme.scsh




From foom at fuhm.net  Mon May  9 11:27:25 2005
From: foom at fuhm.net (James Y Knight)
Date: Mon, 9 May 2005 11:27:25 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <3003268B-788F-4808-A0CC-9B901ECA932E@fuhm.net>

Bug summary
______________________
Since 2005-05-03 14:10:29.270000:
Bugs opened: 16   Bugs closed: 2   Total open bugs: 364 (+14)
   Urgent: 9 (+2)
   Bug: 147 (+10)
   Feature: 138 (+2)
   Wish: 70 (+0)

New / Reopened Bugs
______________________
                     ==== Bug ====
[TRIAL] trial's default timeout isn't enforced  (yesterday)
        http://twistedmatrix.com/bugs/issue1028 opened by warner

[CONCH] Can't logout of an SFTP server  (yesterday)
        http://twistedmatrix.com/bugs/issue1027 opened by mkerrin

[DOCUMENTATION] Use twistd more in 'Twisted from Scratch'  (yesterday)
        http://twistedmatrix.com/bugs/issue1024 opened by hypatia

[DOCUMENTATION] Suggestions to make documentation more accessible  (4  
days ago)
CLOSED http://twistedmatrix.com/bugs/issue1015 opened by Predictive

[DOCUMENTATION] Improve index pages of documentation  (yesterday)
        http://twistedmatrix.com/bugs/issue1026 opened by hypatia

[DOCUMENTATION] Work more explanation into the earlier parts of  
'Twisted from Scratch'  (yesterday)
        http://twistedmatrix.com/bugs/issue1025 opened by hypatia

[DOCUMENTATION] Explain Deferred for users familiar with callbacks   
(yesterday)
        http://twistedmatrix.com/bugs/issue1022 opened by hypatia

[DOCUMENTATION] Improve description of async operations  (yesterday)
        http://twistedmatrix.com/bugs/issue1021 opened by hypatia

/projects/index.html in website  (2 days ago)
        http://twistedmatrix.com/bugs/issue1019 opened by mikewarren

win32 build instructions incorrect  (3 days ago)
        http://twistedmatrix.com/bugs/issue1017 opened by justinj

[WEBSITE] Two quirks noticed with the new WebSite  (3 days ago)
        http://twistedmatrix.com/bugs/issue1018 opened by mesozoic

setup.py all --help causes infinite loop  (4 days ago)
        http://twistedmatrix.com/bugs/issue1016 opened by justinj

Windows batch file arguments  (4 days ago)
        http://twistedmatrix.com/bugs/issue1013 opened by nicktrout

                     ==== Feature ====
[DOCUMENTATION] [NEED HELP] Evangelise async design  (yesterday)
        http://twistedmatrix.com/bugs/issue1020 opened by hypatia

[DOCUMENTATION] Use a sexy protocol in Twisted from scratch  (yesterday)
        http://twistedmatrix.com/bugs/issue1023 opened by hypatia

Proposal for Twisted documentation enhancement  (4 days ago)
        http://twistedmatrix.com/bugs/issue1014 opened by dialtone

Bugs Closed
______________________
                     ==== Bug ====
[DOCUMENTATION] Suggestions to make documentation more accessible  (4  
days ago)
        http://twistedmatrix.com/bugs/issue1015 opened by Predictive,  
closed by hypatia

                     ==== Feature ====
[TRIAL] Add doctest support to trial  (11 months ago)
        http://twistedmatrix.com/bugs/issue618 opened by spiv, closed  
by jknight





From projects at reedflute.com  Mon May  9 12:25:51 2005
From: projects at reedflute.com (Eugene Coetzee)
Date: Mon, 09 May 2005 18:25:51 +0200
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <20050508204211.GC26815@sourdust.home.puzzling.org>
References: <42792BAC.1050701@rogers.com>	<1115238976.8476.54.camel@localhost.localdomain>	<8f4623fb050504174011b553e3@mail.gmail.com>	<427BBC40.4060702@reedflute.com>
	<20050508110553.GA6728@frobozz>	<427E409E.7030105@reedflute.com>
	<20050508204211.GC26815@sourdust.home.puzzling.org>
Message-ID: <427F8F0F.8090009@reedflute.com>

Mary Gardiner wrote:

>On Sun, May 08, 2005, Eugene Coetzee wrote:
>  
>
>>It certainly helps, although it may be a bit minimalistic. 
>>    
>>
>
>A review would be appreciated :)
>
I will much rather review 
http://twistedmatrix.com/documents/current/howto/tutorial/intro and 
http://twistedmatrix.com/documents/current/howto/tutorial/factory for 
you. I have a few issues with some some of the information in there.

> Also, any suggestions on how to make
>the glossary easier to find? 
>
>  
>
I would suggest linking to 
http://twistedmatrix.com/documents/current/howto/glossary from 
http://twistedmatrix.com/documents/


regards,

Eugene Coetzee

-- 
--
===============================================
Reedflute Software Solutions

Telephone           -> +27 18 293 3236
General information -> info at reedflute.com
Project information -> projects at reedflute.com
Web                 -> www.reedflute.com
=============================================== 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050509/7c5cf29c/attachment.htm 

From mcfletch at rogers.com  Mon May  9 13:42:40 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Mon, 09 May 2005 13:42:40 -0400
Subject: [Twisted-Python] I could swear I've seen this pattern *somewhere*
	in Twisted...
Message-ID: <427FA110.1040102@rogers.com>

I have a little utility module "parallel", that dispatches a callable
for "count" items in parallel, collecting them as would a DeferredList
(attached for reference).  The idea here is that you want only count
items to be actively processing at any given time, and you want to be
notified when the entire suite of items completes processing (just like
a DeferredList).

I use this when I have, for instance, 10,000 items to dispatch as part
of a "batch" process, but I don't want to negatively impact the
responsiveness of the user's front-end to the system by adding 10,000
active operations to the internal Twisted queues.  The *correct*
solution for these problems would probably be to have a
priority-handling mechanism, to allow those 10,000 items not to
interfere with high-priority events, but until we have that, it's
necessary to do these kinds of things to keep the system responsive with
large batch operations occurring in the background.

My question being (yay, finally got around to it), where is this pattern
in Twisted.  As I said in the subject, I think I've seen *something*
described as implementing this pattern, and I'd rather use a standard
mechanism than something I've constructed myself.

Enjoy all,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: parallel.py
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050509/af028d2e/attachment.txt 

From itamar at itamarst.org  Mon May  9 15:03:16 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 09 May 2005 15:03:16 -0400
Subject: [Twisted-Python] I could swear I've seen this pattern
	*somewhere* in Twisted...
In-Reply-To: <427FA110.1040102@rogers.com>
References: <427FA110.1040102@rogers.com>
Message-ID: <1115665396.8846.30.camel@localhost.localdomain>

On Mon, 2005-05-09 at 13:42 -0400, Mike C. Fletcher wrote:
> I have a little utility module "parallel", that dispatches a callable
> for "count" items in parallel, collecting them as would a DeferredList
> (attached for reference).  The idea here is that you want only count
> items to be actively processing at any given time, and you want to be
> notified when the entire suite of items completes processing (just like
> a DeferredList).

Hm. Would t.i.defer.DeferredSemaphore do what you want? There's also
DeferredQueue (courtesy of JP, 2.0 and later).




From mary-twisted at puzzling.org  Mon May  9 17:12:06 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 10 May 2005 07:12:06 +1000
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <427F8F0F.8090009@reedflute.com>
References: <42792BAC.1050701@rogers.com>
	<1115238976.8476.54.camel@localhost.localdomain>
	<8f4623fb050504174011b553e3@mail.gmail.com>
	<427BBC40.4060702@reedflute.com> <20050508110553.GA6728@frobozz>
	<427E409E.7030105@reedflute.com>
	<20050508204211.GC26815@sourdust.home.puzzling.org>
	<427F8F0F.8090009@reedflute.com>
Message-ID: <20050509211206.GA9899@sourdust.home.puzzling.org>

On Mon, May 09, 2005, Eugene Coetzee wrote:
> Mary Gardiner wrote:
> >A review would be appreciated :)
> >
> I will much rather review 
> http://twistedmatrix.com/documents/current/howto/tutorial/intro and 
> http://twistedmatrix.com/documents/current/howto/tutorial/factory for 
> you. I have a few issues with some some of the information in there.

Any reviews you can do would be greatly appreciated.

> >Also, any suggestions on how to make
> >the glossary easier to find? 
> >
> I would suggest linking to 
> http://twistedmatrix.com/documents/current/howto/glossary from 
> http://twistedmatrix.com/documents/

There's a more general problem here about needing to do something about
/documents/ - it hasn't been touched since the 1.3 release!

-Mary



From bob at redivi.com  Mon May  9 17:22:42 2005
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 9 May 2005 17:22:42 -0400
Subject: [Twisted-Python] Twisted on Mac OS X 10.4
In-Reply-To: <c615ac0805050812259d38133@mail.gmail.com>
References: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>
	<7a59f02505050809334e7984fe@mail.gmail.com>
	<427E55BC.1050701@dreid.org>
	<7ADDD47F-1045-47C5-8435-FD82847C8832@redivi.com>
	<c615ac0805050812259d38133@mail.gmail.com>
Message-ID: <BD0BAECB-0DBD-4DE6-A41C-4430EDAF5448@redivi.com>


On May 8, 2005, at 3:25 PM, Max server wrote:

> I tried installing it on a 10.4 Server and got the following
>
> Traceback (most recent call last):
>   File "setup.py", line 20, in ?
>     from twisted import copyright
>   File "./twisted/__init__.py", line 21, in ?
>     raise ImportError, "you need zope.interface installed
> (http://zope.org/Products/ZopeInterface/)"
> ImportError: you need zope.interface installed
> (http://zope.org/Products/ZopeInterface/)
>
> Then I downloaded ZopeInterface 3.0.1 from
> http://zope.org/Products/ZopeInterface/ and tried to install it but
> had the following error -of course xcode 2 is installed-

That's an issue you should bring up with the zope.interface guys.  It  
sounds like it's not compatible with gcc4 and/or the headers in  
Tiger.  You can install a version that was built on Panther (i.e.  
from http://pythonmac.org/packages/) or you can try switching your  
compiler to gcc 3.3 with "sudo gcc_select 3.3" before building  
zope.interface.

-bob




From bear at code-bear.com  Mon May  9 20:13:19 2005
From: bear at code-bear.com (Mike Taylor)
Date: Mon, 9 May 2005 20:13:19 -0400
Subject: [Twisted-Python] Twisted on Mac OS X 10.4
In-Reply-To: <BD0BAECB-0DBD-4DE6-A41C-4430EDAF5448@redivi.com>
References: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>
	<7a59f02505050809334e7984fe@mail.gmail.com>
	<427E55BC.1050701@dreid.org>
	<7ADDD47F-1045-47C5-8435-FD82847C8832@redivi.com>
	<c615ac0805050812259d38133@mail.gmail.com>
	<BD0BAECB-0DBD-4DE6-A41C-4430EDAF5448@redivi.com>
Message-ID: <69d5fbfd5e0ff841561e075984c17c58@code-bear.com>

On May 9, 2005, at 5:22 PM, Bob Ippolito wrote:

>
> On May 8, 2005, at 3:25 PM, Max server wrote:
>
>> I tried installing it on a 10.4 Server and got the following
>>
>> Traceback (most recent call last):
>>   File "setup.py", line 20, in ?
>>     from twisted import copyright
>>   File "./twisted/__init__.py", line 21, in ?
>>     raise ImportError, "you need zope.interface installed
>> (http://zope.org/Products/ZopeInterface/)"
>> ImportError: you need zope.interface installed
>> (http://zope.org/Products/ZopeInterface/)
>>
>> Then I downloaded ZopeInterface 3.0.1 from
>> http://zope.org/Products/ZopeInterface/ and tried to install it but
>> had the following error -of course xcode 2 is installed-
>
> That's an issue you should bring up with the zope.interface guys.  It 
> sounds like it's not compatible with gcc4 and/or the headers in Tiger. 
>  You can install a version that was built on Panther (i.e. from 
> http://pythonmac.org/packages/) or you can try switching your compiler 
> to gcc 3.3 with "sudo gcc_select 3.3" before building zope.interface.
>
> -bob
>

I ran into this yesterday and sent the zope interface team a patch file 
to fix it.

---
Bear
http://code-bear.com

Open Source Applications Foundation (OSAF)
http://www.osafoundation.org

PGP Fingerprint = 9996 719F 973D B11B E111  D770 9331 E822 40B3 CD29



-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050509/a1db626e/attachment.pgp 

From mcfletch at rogers.com  Mon May  9 21:02:42 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Mon, 09 May 2005 21:02:42 -0400
Subject: [Twisted-Python] I could swear I've seen this pattern	*somewhere*
	in Twisted...
In-Reply-To: <1115665396.8846.30.camel@localhost.localdomain>
References: <427FA110.1040102@rogers.com>
	<1115665396.8846.30.camel@localhost.localdomain>
Message-ID: <42800832.4070709@rogers.com>

Itamar Shtull-Trauring wrote:

>On Mon, 2005-05-09 at 13:42 -0400, Mike C. Fletcher wrote:
>  
>
>>I have a little utility module "parallel", that dispatches a callable
>>for "count" items in parallel, collecting them as would a DeferredList
>>(attached for reference).  The idea here is that you want only count
>>items to be actively processing at any given time, and you want to be
>>notified when the entire suite of items completes processing (just like
>>a DeferredList).
>>    
>>
>
>Hm. Would t.i.defer.DeferredSemaphore do what you want? There's also
>DeferredQueue (courtesy of JP, 2.0 and later).
>  
>
DeferredSemaphore certainly makes it much simpler!  Attached so that
others can see how much it simplifies the pattern. Not quite short
enough to be "too short to bother wrapping in a function", but far less
involved all-in-all, and really too short even to bother with a class.

Thanks,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: parallel.py
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050509/8a75f996/attachment.txt 

From foom at fuhm.net  Mon May  9 22:47:54 2005
From: foom at fuhm.net (James Y Knight)
Date: Mon, 9 May 2005 22:47:54 -0400
Subject: [Twisted-Python] I could swear I've seen this pattern	*somewhere*
	in Twisted...
In-Reply-To: <42800832.4070709@rogers.com>
References: <427FA110.1040102@rogers.com>
	<1115665396.8846.30.camel@localhost.localdomain>
	<42800832.4070709@rogers.com>
Message-ID: <09C25CBA-1DC5-4B1A-9EA7-8FFF4D7E914D@fuhm.net>

How about this? sem.run simplifies things a lot.
Note also consumeErrors=True to DL.  You probably always want that,  
as it causes the errors to not get propagated to the toplevel error  
printer, but rather only reported by the DL.

def parallel( iterable, count, callable, *args, **named ):
     sem = defer.DeferredSemaphore(count)
     dl = [sem.run(callable, item, *args, **named) for item in iterable]
     return defer.DeferredList(dl, consumeErrors=True)

James



From exarkun at divmod.com  Mon May  9 23:04:54 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Tue, 10 May 2005 03:04:54 GMT
Subject: [Twisted-Python] I could swear I've seen this pattern	*somewhere*
	in Twisted...
In-Reply-To: <42800832.4070709@rogers.com>
Message-ID: <20050510030454.15422.298300077.divmod.quotient.29233@ohm>

On Mon, 09 May 2005 21:02:42 -0400, "Mike C. Fletcher" <mcfletch at rogers.com> wrote:
>Itamar Shtull-Trauring wrote:
>
>>On Mon, 2005-05-09 at 13:42 -0400, Mike C. Fletcher wrote:
>>
>>
>>>I have a little utility module "parallel", that dispatches a callable
>>>for "count" items in parallel, collecting them as would a DeferredList
>>>(attached for reference).  The idea here is that you want only count
>>>items to be actively processing at any given time, and you want to be
>>>notified when the entire suite of items completes processing (just like
>>>a DeferredList).
>>>
>>>
>>
>>Hm. Would t.i.defer.DeferredSemaphore do what you want? There's also
>>DeferredQueue (courtesy of JP, 2.0 and later).
>>
>>
>DeferredSemaphore certainly makes it much simpler!  Attached so that
>others can see how much it simplifies the pattern. Not quite short
>enough to be "too short to bother wrapping in a function", but far less
>involved all-in-all, and really too short even to bother with a class.
>
>Thanks,
>Mike

  I'd be interested to hear about the relative performance of your two solutions.  I would expect DeferredSemaphore to create many more Deferreds, and thus perhaps perform less well.

  Also, Glyph and I did some work for Quotient today on some code which may be applicable to this kind of problem.  Here's an example:

    from twisted.internet import defer
    from atop.tpython import Cooperator

    def parallel(iterable, count, callable, *args, **named):
        source = iter(iterable)
        def work():
            for elem in source:
                yield callable(elem, *args, **named)
        coop = Cooperator()
        tasks = []
        for i in range(count):
            tasks.append(coop.coiterate(work()))
        return defer.DeferredList(tasks)

  Note that this returns a DeferredList of each "task", rather than of each result.  If results are desired as well, adding a callback (before yielding) to the result of callable() inside work() which saved the result, then adding a callback to the DeferredList which discarded the list of task results and returned the saved results would accomplish this.

  Note also that Cooperator is in a branch at the moment.  It'll most likely be in Quotient trunk sometime tomorrow.

  Jp



From mcfletch at rogers.com  Tue May 10 00:12:29 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Tue, 10 May 2005 00:12:29 -0400
Subject: [Twisted-Python] I could swear I've seen this pattern	*somewhere*
	in Twisted...
In-Reply-To: <09C25CBA-1DC5-4B1A-9EA7-8FFF4D7E914D@fuhm.net>
References: <427FA110.1040102@rogers.com>
	<1115665396.8846.30.camel@localhost.localdomain>
	<42800832.4070709@rogers.com>
	<09C25CBA-1DC5-4B1A-9EA7-8FFF4D7E914D@fuhm.net>
Message-ID: <428034AD.1030102@rogers.com>

James Y Knight wrote:

> How about this? sem.run simplifies things a lot.
> Note also consumeErrors=True to DL.  You probably always want that, 
> as it causes the errors to not get propagated to the toplevel error 
> printer, but rather only reported by the DL.
>
> def parallel( iterable, count, callable, *args, **named ):
>     sem = defer.DeferredSemaphore(count)
>     dl = [sem.run(callable, item, *args, **named) for item in iterable]
>     return defer.DeferredList(dl, consumeErrors=True)

Well, guess that gets it down to the level where it's no longer
necessary to have it wrapped in a function.  That's great.

I didn't even think to look at the base classes when I was reading the
code for DeferredSemaphore.  This is why reference documents are good
things :) .

BTW, anyone know what all this funky stuff in the definition of run is for?

    def run(*args, **kwargs):
        ...
        if len(args) < 2:
            if not args:
                raise TypeError("run() takes at least 2 arguments, none
given.")
            raise TypeError("%s.run() takes at least 2 arguments, 1
given" % (
                args[0].__class__.__name__,))
        self, f = args[:2]
        args = args[2:]

why not just:

    def run( self, f, *args, **kwargs ):

?

Thanks,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From mcfletch at rogers.com  Tue May 10 00:30:12 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Tue, 10 May 2005 00:30:12 -0400
Subject: [Twisted-Python] I could swear I've seen this pattern	*somewhere*
	in Twisted...
In-Reply-To: <20050510030454.15422.298300077.divmod.quotient.29233@ohm>
References: <20050510030454.15422.298300077.divmod.quotient.29233@ohm>
Message-ID: <428038D4.1010408@rogers.com>

Jp Calderone wrote:

> I'd be interested to hear about the relative performance of your two
> solutions.  I would expect DeferredSemaphore to create many more
> Deferreds, and thus perhaps perform less well.

Hmm, never really worried about raw performance overhead of the
scheduling operations... should I be?  I'd been under the impression
that the deferred objects were rather lightweight.  Within our apps I'm
more concerned about getting the queues so full that they can't get
through to process the high-priority events.

>  Also, Glyph and I did some work for Quotient today on some code which
> may be applicable to this kind of problem.  Here's an example:
>
>    from twisted.internet import defer
>    from atop.tpython import Cooperator
>
>    def parallel(iterable, count, callable, *args, **named):
>        source = iter(iterable)
>        def work():
>            for elem in source:
>                yield callable(elem, *args, **named)
>        coop = Cooperator()
>        tasks = []
>        for i in range(count):
>            tasks.append(coop.coiterate(work()))
>        return defer.DeferredList(tasks)
>
>  Note that this returns a DeferredList of each "task", rather than of
> each result.  If results are desired as well, adding a callback
> (before yielding) to the result of callable() inside work() which
> saved the result, then adding a callback to the DeferredList which
> discarded the list of task results and returned the saved results
> would accomplish this.
>
>  Note also that Cooperator is in a branch at the moment.  It'll most
> likely be in Quotient trunk sometime tomorrow.

Seems okay, but Jame's implementation of parallel with
DeferredSemaphore.run seems less complex as an implementation (to me
anyway), but then I haven't really gotten into the whole "flow" Twisted
sub-culture yet :) .

Your version really does highlight the possibility of just passing in an
"iterapply" instance instead of defining the "work" function inside
(especially given the need to alter the work function to retrieve the
results).  I am curious, though, doesn't your version cause the source
to be iterated over count times in total?  I *think* you want to share
the work() instance among the coop.coiterate calls (at least, you would
if I understand how everything works from their names).

Have fun,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From Thomas.Jung at iisb.fraunhofer.de  Tue May 10 04:25:10 2005
From: Thomas.Jung at iisb.fraunhofer.de (Thomas Jung)
Date: Tue, 10 May 2005 10:25:10 +0200
Subject: [Twisted-Python] need help with waitForDeferred...
Message-ID: <200505101025.10696.Thomas.Jung@iisb.fraunhofer.de>

Hi everybody,

I am new to twisted, and still experimenting.
Found the following code somewhere, looks very interesting,
but when I run the script (python 2.3.3), just nothing happens....
What am I missing ?

Any hint greatly appreciated, thank you !



from twisted.internet import reactor
from twisted.internet import defer

waitFor = defer.waitForDeferred

def getSomeDeferred():
    d = defer.Deferred()
    reactor.callLater(
        2, d.callback, 'This is a string that yells "foo!"')
    return d

def anotherDeferred(needle, haystack):
    d = defer.Deferred()
    reactor.callLater(
        2, d.callback, haystack.find(needle))
    return d

@defer.deferredGenerator
def find(needle):
    d = waitFor(getSomeDeferred())
    yield d
    haystack = d.getResult()
    print 'I got my first deferred result'
    d = waitFor(anotherDeferred(needle, haystack))
    yield d
    print 'I found', repr(needle), 'at character', d.getResult()
    return

find('foo!')
reactor.run()




-- 
Thomas Jung
Fraunhofer-Institut IISB
91058 Erlangen, Schottkystr. 10
+49 9131 761264



From manlio_perillo at libero.it  Tue May 10 04:50:08 2005
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue, 10 May 2005 10:50:08 +0200
Subject: [Twisted-Python] I could swear I've seen this
	pattern	*somewhere* in Twisted...
In-Reply-To: <20050510030454.15422.298300077.divmod.quotient.29233@ohm>
References: <42800832.4070709@rogers.com>
Message-ID: <5.2.1.1.0.20050510104848.00b31498@popmail.libero.it>

At 03.04 10/05/2005 +0000, you wrote:
>On Mon, 09 May 2005 21:02:42 -0400, "Mike C. Fletcher" 
><mcfletch at rogers.com> wrote:
>>Itamar Shtull-Trauring wrote:
>>
>>>On Mon, 2005-05-09 at 13:42 -0400, Mike C. Fletcher wrote:
>>>
>>>
>>>>I have a little utility module "parallel", that dispatches a callable
>>>>for "count" items in parallel, collecting them as would a DeferredList
>>>>(attached for reference).  The idea here is that you want only count
>>>>items to be actively processing at any given time, and you want to be
>>>>notified when the entire suite of items completes processing (just like
>>>>a DeferredList).
>>>>
>>>
>>>Hm. Would t.i.defer.DeferredSemaphore do what you want? There's also
>>>DeferredQueue (courtesy of JP, 2.0 and later).
>>>
>>DeferredSemaphore certainly makes it much simpler!  Attached so that
>>others can see how much it simplifies the pattern. Not quite short
>>enough to be "too short to bother wrapping in a function", but far less
>>involved all-in-all, and really too short even to bother with a class.
>>
>>Thanks,
>>Mike
>
>  I'd be interested to hear about the relative performance of your two 
> solutions.  I would expect DeferredSemaphore to create many more 
> Deferreds, and thus perhaps perform less well.
>
>  Also, Glyph and I did some work for Quotient today on some code which 
> may be applicable to this kind of problem.  Here's an example:
>
>    from twisted.internet import defer
>    from atop.tpython import Cooperator
>
>    def parallel(iterable, count, callable, *args, **named):
>        source = iter(iterable)
>        def work():
>            for elem in source:
>                yield callable(elem, *args, **named)
>        coop = Cooperator()
>        tasks = []
>        for i in range(count):
>            tasks.append(coop.coiterate(work()))
>        return defer.DeferredList(tasks)
>
>  Note that this returns a DeferredList of each "task", rather than of 
> each result.  If results are desired as well, adding a callback (before 
> yielding) to the result of callable() inside work() which saved the 
> result, then adding a callback to the DeferredList which discarded the 
> list of task results and returned the saved results would accomplish this.
>
>  Note also that Cooperator is in a branch at the moment.  It'll most 
> likely be in Quotient trunk sometime tomorrow.


Regards.

I don't know if it is pertinent, but I have written this recipe:
http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/410986



Manlio Perillo




From andrew-twisted at puzzling.org  Tue May 10 05:18:41 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 10 May 2005 19:18:41 +1000
Subject: [Twisted-Python] need help with waitForDeferred...
In-Reply-To: <200505101025.10696.Thomas.Jung@iisb.fraunhofer.de>
References: <200505101025.10696.Thomas.Jung@iisb.fraunhofer.de>
Message-ID: <20050510091841.GD29662@frobozz>

On Tue, May 10, 2005 at 10:25:10AM +0200, Thomas Jung wrote:
> Hi everybody,
> 
> I am new to twisted, and still experimenting.
> Found the following code somewhere, looks very interesting,
> but when I run the script (python 2.3.3), just nothing happens....
> What am I missing ?
[...]
> 
> @defer.deferredGenerator
> def find(needle):

The @decorator syntax is new in Python 2.4, so you'd get a SyntaxError if
you tried to run this under Python 2.3.

It works as expected for me with Python 2.4 and Twisted 2.0: it prints

    I got my first deferred result
    I found 'foo!' at character 29

and then hangs.

-Andrew.




From Thomas.Jung at iisb.fraunhofer.de  Tue May 10 05:44:22 2005
From: Thomas.Jung at iisb.fraunhofer.de (Thomas Jung)
Date: Tue, 10 May 2005 11:44:22 +0200
Subject: [Twisted-Python] need help with waitForDeferred...
In-Reply-To: <20050510091841.GD29662@frobozz>
References: <200505101025.10696.Thomas.Jung@iisb.fraunhofer.de>
	<20050510091841.GD29662@frobozz>
Message-ID: <200505101144.22707.Thomas.Jung@iisb.fraunhofer.de>

On Tuesday 10 May 2005 11:18, Andrew Bennetts wrote:
> On Tue, May 10, 2005 at 10:25:10AM +0200, Thomas Jung wrote:
> > Hi everybody,
> >
> > I am new to twisted, and still experimenting.
> > Found the following code somewhere, looks very interesting,
> > but when I run the script (python 2.3.3), just nothing happens....
> > What am I missing ?
>
> [...]
>
> > @defer.deferredGenerator
> > def find(needle):
>
> The @decorator syntax is new in Python 2.4, so you'd get a SyntaxError if
> you tried to run this under Python 2.3.
>
> It works as expected for me with Python 2.4 and Twisted 2.0: it prints
>
>     I got my first deferred result
>     I found 'foo!' at character 29
>
> and then hangs.
>
> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


too stupid ... just replaced that @ by a # ...
updated to 2.4.1, everything fine.

Thanks a lot !


-- 
Dr. Thomas Jung
Fraunhofer-Institut IISB
91058 Erlangen, Schottkystr. 10
+49 9131 761264



From Thomas.Jung at iisb.fraunhofer.de  Tue May 10 06:26:38 2005
From: Thomas.Jung at iisb.fraunhofer.de (Thomas Jung)
Date: Tue, 10 May 2005 12:26:38 +0200
Subject: [Twisted-Python] how to cancel a long running job on a server ?
Message-ID: <200505101226.38855.Thomas.Jung@iisb.fraunhofer.de>

Hello,

another newbie question:

I have a server, where I can remotely call a function like remote_calc(), 
using the perspective broker,
which returns giving a result.
Sometimes, I want to cancel that computation, calling e.g. remote_cancel() 
(which remains to be implemented.....)

How can I have remote_calc() not to return before the result is done, and 
still be able to call remote_cancel while its running ?

I tried this:
=============================================================

from twisted.spread import pb
from twisted.internet import reactor,defer,threads

@defer.deferredGenerator
def calc(adeferred):
    print "this is calc..."
    d=defer.waitForDeferred(adeferred)
    yield d
    result=d.getResult()
    print "calc: result=",result
    return


def do_calc():
    print "do_calc starting..."
    for i in range(10000):
        for j in range(10000):
            pass
    print "do_calc done..."
    return 456


class ServerObject(pb.Root):

    def remote_cancel(self):
        print "this is server::cancel..."

    def remote_calc(self,result):
        print "server::calc: ..."

       # thought this would wait until done, but doesnt....

        calc(threads.deferToThread(do_calc))
        print "server::calc: returning"
        return 123


if __name__ == '__main__':
    factory = pb.PBServerFactory(ServerObject())
    reactor.listenTCP(8800, factory)
    reactor.run()

===============================================================================

My expectation was that the call to "calc" in remote_calc would block, but it 
does not.
And if I dont defer the calculation to a thread, remote_cancel is not done 
until calculation finishes ...

Maybe there is some completely different way to do this in twisted ?

Thanks for any hint !



-- 
Dr. Thomas Jung
Fraunhofer-Institut IISB
91058 Erlangen, Schottkystr. 10
+49 9131 761264



From dangoor at gmail.com  Tue May 10 08:27:27 2005
From: dangoor at gmail.com (Kevin Dangoor)
Date: Tue, 10 May 2005 08:27:27 -0400
Subject: [Twisted-Python] Blocking on deferreds during unit tests (e.g.
	deferredResult)
In-Reply-To: <1115564702.8059.28.camel@localhost.localdomain>
References: <op.sqcgh7jny3d107@aspen> <427BB66E.5070509@divmod.com>
	<60ed19d40505062024fe69940@mail.gmail.com>
	<3f085ecd050507080273093f6a@mail.gmail.com>
	<1115564702.8059.28.camel@localhost.localdomain>
Message-ID: <3f085ecd05051005274c3088e1@mail.gmail.com>

On 5/8/05, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
> On Sat, 2005-05-07 at 11:02 -0400, Kevin Dangoor wrote:
> 
> > Using gthreadless, one could interface sqlobject and Twisted's db
> > interface to take advantage of the work done in Twisted Enterprise to
> > make sqlobject-style database access safe for Twisted. (It's
> > undoubtedly possible without gthreadless, but it seems like it would
> > be a lot easier)
> 
> Nope, that wouldn't work. greenlets do *not* make blocking APIs ot
> block.

I understand that... The Twisted Enterprise database api, if I
understand correctly, uses the Twisted threadpool to wrap otherwise
blocking database calls behind new calls that return deferreds.
sqlobject, on the otherhand, was written in a traditional
(non-callback) style.

My thought was to use gthreadless to create an interface between
Twisted Enterprise (ADBAPI?) and sqlobject. For sqlobject, it would
look just like the blocking interface it was used to. But, it would be
able to take advantage of the thread management already done by
ADBAPI.

Kevin



From exarkun at divmod.com  Tue May 10 09:01:17 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Tue, 10 May 2005 13:01:17 GMT
Subject: [Twisted-Python] Blocking on deferreds during unit tests (e.g.
	deferredResult)
In-Reply-To: <3f085ecd05051005274c3088e1@mail.gmail.com>
Message-ID: <20050510130117.15422.1382701427.divmod.quotient.30085@ohm>

On Tue, 10 May 2005 08:27:27 -0400, Kevin Dangoor <dangoor at gmail.com> wrote:
>On 5/8/05, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>> On Sat, 2005-05-07 at 11:02 -0400, Kevin Dangoor wrote:
>>
>> > Using gthreadless, one could interface sqlobject and Twisted's db
>> > interface to take advantage of the work done in Twisted Enterprise to
>> > make sqlobject-style database access safe for Twisted. (It's
>> > undoubtedly possible without gthreadless, but it seems like it would
>> > be a lot easier)
>>
>> Nope, that wouldn't work. greenlets do *not* make blocking APIs ot
>> block.
>
>I understand that... The Twisted Enterprise database api, if I
>understand correctly, uses the Twisted threadpool to wrap otherwise
>blocking database calls behind new calls that return deferreds.
>sqlobject, on the otherhand, was written in a traditional
>(non-callback) style.
>
>My thought was to use gthreadless to create an interface between
>Twisted Enterprise (ADBAPI?) and sqlobject. For sqlobject, it would
>look just like the blocking interface it was used to. But, it would be
>able to take advantage of the thread management already done by
>ADBAPI.

  SQLObject doesn't implement DB-API, so it is not usable with t.e.adbapi.  The interface it presents is not very amenable to isolation in a separate thread, so any mechanism to using it asynchronously will be awkward.

  Jp



From itamar at itamarst.org  Tue May 10 10:28:40 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 10 May 2005 10:28:40 -0400
Subject: [Twisted-Python] how to cancel a long running job on a server ?
In-Reply-To: <200505101226.38855.Thomas.Jung@iisb.fraunhofer.de>
References: <200505101226.38855.Thomas.Jung@iisb.fraunhofer.de>
Message-ID: <1115735320.8769.19.camel@localhost.localdomain>

On Tue, 2005-05-10 at 12:26 +0200, Thomas Jung wrote:

> I have a server, where I can remotely call a function like remote_calc(), 
> using the perspective broker,
> which returns giving a result.
> Sometimes, I want to cancel that computation, calling e.g. remote_cancel() 
> (which remains to be implemented.....)
> 
> How can I have remote_calc() not to return before the result is done, and 
> still be able to call remote_cancel while its running ?
>     def remote_calc(self,result):
>         print "server::calc: ..."
> 
>        # thought this would wait until done, but doesnt....
> 
>         calc(threads.deferToThread(do_calc))
>         print "server::calc: returning"
>         return 123

You probably want to return the result of calc() here - if you return
deferred from PB function it will know not to return until Deferred has
result.




From radeex at gmail.com  Tue May 10 19:50:57 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 11 May 2005 09:50:57 +1000
Subject: [Twisted-Python] Blocking on deferreds during unit tests (e.g.
	deferredResult)
In-Reply-To: <3f085ecd05051005274c3088e1@mail.gmail.com>
References: <op.sqcgh7jny3d107@aspen> <427BB66E.5070509@divmod.com>
	<60ed19d40505062024fe69940@mail.gmail.com>
	<3f085ecd050507080273093f6a@mail.gmail.com>
	<1115564702.8059.28.camel@localhost.localdomain>
	<3f085ecd05051005274c3088e1@mail.gmail.com>
Message-ID: <60ed19d4050510165059c07a2e@mail.gmail.com>

On 5/10/05, Kevin Dangoor <dangoor at gmail.com> wrote:
> I understand that... The Twisted Enterprise database api, if I
> understand correctly, uses the Twisted threadpool to wrap otherwise
> blocking database calls behind new calls that return deferreds.
> sqlobject, on the otherhand, was written in a traditional
> (non-callback) style.
> 
> My thought was to use gthreadless to create an interface between
> Twisted Enterprise (ADBAPI?) and sqlobject. For sqlobject, it would
> look just like the blocking interface it was used to. But, it would be
> able to take advantage of the thread management already done by
> ADBAPI.


This won't work because gthreadless doesn't allow you to write
interfaces that look synchronous. It only lets *you* use asynchronous
interfaces in a synchronous-looking way. That is to say, your code
that wants to be synchronous-looking still isn't 100% transparent; you
need to call blockOn() around every Deferred you get. And a
gthreadless-function always returns a Deferred itself, so there's
really no way you could use the SQLObject code to talk to an
asynchronous backend.


-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From mary-twisted at puzzling.org  Tue May 10 21:00:30 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Wed, 11 May 2005 11:00:30 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r13763 - fix broken link to
	divmod.org.
In-Reply-To: <E1DVfXS-0007yh-00@wolfwood>
References: <E1DVfXS-0007yh-00@wolfwood>
Message-ID: <20050511010030.GB16760@home.puzzling.org>

On Tue, May 10, 2005, Stephen Thorne wrote:
> Author: stephen
> Date: Tue May 10 18:57:26 2005
> New Revision: 13763
> 
> Modified:
>    trunk/doc/web/howto/woven.xhtml
> Log:
> fix broken link to divmod.org.

I'll get to this eventually if you don't, but that actually needs to be
fixed in about six documents. (I feel better about our need to set up
redirects on tm.comn now that I know that divmod.org hasn't done it
either.)

-Mary



From Thomas.Jung at iisb.fraunhofer.de  Wed May 11 05:38:10 2005
From: Thomas.Jung at iisb.fraunhofer.de (Thomas Jung)
Date: Wed, 11 May 2005 11:38:10 +0200
Subject: [Twisted-Python] how to cancel a long running job on a server ?
In-Reply-To: <1115735320.8769.19.camel@localhost.localdomain>
References: <200505101226.38855.Thomas.Jung@iisb.fraunhofer.de>
	<1115735320.8769.19.camel@localhost.localdomain>
Message-ID: <200505111138.10465.Thomas.Jung@iisb.fraunhofer.de>

On Tuesday 10 May 2005 16:28, Itamar Shtull-Trauring wrote:
> On Tue, 2005-05-10 at 12:26 +0200, Thomas Jung wrote:
> > I have a server, where I can remotely call a function like remote_calc(),
> > using the perspective broker,
> > which returns giving a result.
> > Sometimes, I want to cancel that computation, calling e.g.
> > remote_cancel() (which remains to be implemented.....)
> >
> > How can I have remote_calc() not to return before the result is done, and
> > still be able to call remote_cancel while its running ?
> >     def remote_calc(self,result):
> >         print "server::calc: ..."
> >
> >        # thought this would wait until done, but doesnt....
> >
> >         calc(threads.deferToThread(do_calc))
> >         print "server::calc: returning"
> >         return 123
>
> You probably want to return the result of calc() here - if you return
> deferred from PB function it will know not to return until Deferred has
> result.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



Thanks !

I could not believe that you can even return a deferred from a remote server 
... thats really great !





From matt at pollenation.net  Wed May 11 08:51:28 2005
From: matt at pollenation.net (Matt Goodall)
Date: Wed, 11 May 2005 13:51:28 +0100
Subject: [Twisted-Python] adbapi, PostgreSQL and Unicode
In-Reply-To: <427BEAAC.2060208@dkp.com>
References: <427BEAAC.2060208@dkp.com>
Message-ID: <4281FFD0.6010707@pollenation.net>

Michal Eldar wrote:

> I keep getting - Unhandled error in Deferred

You should attach an errback to the deferred and handle, or at least
log, the exception. That's what "Unhandled error in Deferred" means ;-).

>
> I'm trying to perform an INSERT on my db (using adbapi with *pgdb*
> module).
> INSERT which comprises *Unicode* string
> e.g. -
> unicodeChar1 = u"Character=[\N{GREEK CAPITAL LETTER GAMMA}]"
>
> the db is defined to Unicode
> *client_encoding* value is set to *Unicode* when checking its value in
> *cp_openfun *called function
> execute the same INSERT directly with *pgdb *works great
>
> Does anyone has experience with adbapi with Unicode db ?!?!

Yes, but only using psycopg and pgasync. It works fine for me.

> Do I need to define something special for this to happen ?? 

You shouldn't need to. adbapi is nothing more that a wrapper around the
real (blocking) database module that dispatches db calls to a thread.

Attach the errback first and find out what the exception actually is
before trying to fix anything. It could be something as simple as a typo
that you haven't spotted or it could be something subtle. It's
impossible to know at this stage.

I suspect you're building the a complete SQL string and passing that to
execute() when you should be passing a SQL string with insertion markers
and a tuple/dict of args. But, that's just a guess ;-).

Hope this helps.

Cheers, Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt at pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.




From mailinglists at smartology.nl  Wed May 11 09:28:17 2005
From: mailinglists at smartology.nl (Remy Cool)
Date: Wed, 11 May 2005 15:28:17 +0200
Subject: [Twisted-Python] adbapi, PostgreSQL and Unicode
In-Reply-To: <4281FFD0.6010707@pollenation.net>
References: <427BEAAC.2060208@dkp.com> <4281FFD0.6010707@pollenation.net>
Message-ID: <42820871.6020906@smartology.nl>

Matt Goodall wrote:
> Michal Eldar wrote:
> 
> 
>>I keep getting - Unhandled error in Deferred
> 
> 
> You should attach an errback to the deferred and handle, or at least
> log, the exception. That's what "Unhandled error in Deferred" means ;-).
> 
> 
>>I'm trying to perform an INSERT on my db (using adbapi with *pgdb*
>>module).
>>INSERT which comprises *Unicode* string
>>e.g. -
>>unicodeChar1 = u"Character=[\N{GREEK CAPITAL LETTER GAMMA}]"
>>
>>the db is defined to Unicode
>>*client_encoding* value is set to *Unicode* when checking its value in
>>*cp_openfun *called function
>>execute the same INSERT directly with *pgdb *works great
>>
>>Does anyone has experience with adbapi with Unicode db ?!?!

<snip>

I also use pgdb with adbapi and unicode without problems. Insert's with
unicode strings should not be problem even if the database is set to
SQLASCII. The pgdb module inspects the string before sending it to the
postgres machinery. If it's a unicode string (isinstance('the string',
unicode) ) it's encoded to utf-8.

I've submitted a patch to Darcy at pygresql.org for enhanced unicode
support for pgdb. This patch takes care of the client_encoding stuff and
makes it possible to fetch unicode strings from select queries.

-- Remy --




From itamar at itamarst.org  Wed May 11 13:02:29 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 11 May 2005 13:02:29 -0400
Subject: [Twisted-Python] how to cancel a long running job on a server ?
In-Reply-To: <200505111138.10465.Thomas.Jung@iisb.fraunhofer.de>
References: <200505101226.38855.Thomas.Jung@iisb.fraunhofer.de>
	<1115735320.8769.19.camel@localhost.localdomain>
	<200505111138.10465.Thomas.Jung@iisb.fraunhofer.de>
Message-ID: <1115830950.8381.22.camel@localhost.localdomain>

On Wed, 2005-05-11 at 11:38 +0200, Thomas Jung wrote:

> I could not believe that you can even return a deferred from a remote server 
> ... thats really great !

It's not that the PB protocol knows about Deferreds, it doesn't, but
rather the PB implementation in Twisted does the right thing when you
return a Deferred.




From db3l at fitlinxx.com  Wed May 11 19:28:59 2005
From: db3l at fitlinxx.com (David Bolen)
Date: 11 May 2005 19:28:59 -0400
Subject: [Twisted-Python] Re: Hanging test cases (Was: Evangelism notes...)
References: <u1x8jkhum.fsf@fitlinxx.com>
	<20050507231316.15422.715887765.divmod.quotient.24760@ohm>
Message-ID: <umzr1cpfo.fsf@fitlinxx.com>

Jp Calderone <exarkun at divmod.com> writes:

(...)  
> It may be the case that none of the bugs in trial synchronous
> result utilities cause problems for you.  If they don't, I can
> understand how it would not be a big priority for you to move away
> from them (after all, I'm sure you have plenty of things that *are*
> causing you problems now that you would much rather spend time on).
> I recommend simply keeping this conversation in mind if and when you
> run into problems with your use of deferredResult and deferredError
> in the future and that you not let such problems take you by
> surprise.  You can rest relatively easily in the knowledge that
> deferredResult and friends will not disappear from Twisted
> overnight.  Broken as they are, they are clearly part of a public
> API and so will remain long enough to satisfy backwards
> compatibility requirements.

Seems like as good a way as any to end this thread for me, since I
definitely agree with the above.  And yes, I'm aware (or believe I am)
of the risks I may be incurring by using these methods, as well as
using unittest rather than trial, and will certainly continue to
follow Twisted actively to hopefully catch changes that may impact my
current choices.

-- David





From db3l at fitlinxx.com  Wed May 11 19:34:15 2005
From: db3l at fitlinxx.com (David Bolen)
Date: 11 May 2005 19:34:15 -0400
Subject: [Twisted-Python] Re: Hanging test cases (Was: Evangelism notes...)
References: <C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>
	<20050506060050.15422.1130296805.divmod.quotient.21435@ohm>
	<uk6mcjc0f.fsf@fitlinxx.com>
	<6EA197D2-A573-4175-A0FB-9C5005389D68@redivi.com>
	<ufyx0j7dw.fsf@fitlinxx.com>
	<BDDD7C2C-EB8A-4601-8545-565ABEC46EAD@redivi.com>
	<u1x8jkhum.fsf@fitlinxx.com>
	<60ed19d405050718373b3463d4@mail.gmail.com>
Message-ID: <uis1pcp6w.fsf@fitlinxx.com>

Christopher Armstrong <radeex at gmail.com> writes:

> Uhhh, maybe I'm missing something here, but as I understand it (I
> probably should, being the guy who wrote deferredgenerators), that
> code is:
> 
>     testCase = deferredGenerator(testCase)
> 
> after the definition of the method, or even:
> 
>     @deferredGenerator
> 
> before the definition of the method.

But then who actually performs the iteration over the test case to
trigger the generator?  Clearly some top level code needs to invoke
the reactor.run() and at some point iterate over testCase while
beneath a running reactor.  We're just using unittest, so something
would need to be added to serve as the basic framework for that sort
of test.

I'm guessing from your uncertainty that trial - which I haven't kept
up with changes for 2.0 - probably provides a mode to do this
automatically, so if I were using trial you'd be correct and it
wouldn't be that much more work to integrate the new deferred
generator support into the tests.

Note that independent of use in tests, I'm definitely intrigued by
these techniques (as I was in the early flow support in Twisted 1.x)
so when we start the migration to 2.0 we'll probably look at
incorporating this approach into the code base when reasonable.

-- David




From grant at osafoundation.org  Wed May 11 19:47:02 2005
From: grant at osafoundation.org (Grant Baillie)
Date: Wed, 11 May 2005 16:47:02 -0700
Subject: [Twisted-Python] Re: Hanging test cases (Was: Evangelism notes...)
In-Reply-To: <umzr1cpfo.fsf@fitlinxx.com>
References: <u1x8jkhum.fsf@fitlinxx.com>
	<20050507231316.15422.715887765.divmod.quotient.24760@ohm>
	<umzr1cpfo.fsf@fitlinxx.com>
Message-ID: <CF8709DF-9B11-4A6A-BE6B-C773AA936815@osafoundation.org>

On May 11, 2005, at 4:28 PM, David Bolen wrote:

> Jp Calderone <exarkun at divmod.com> writes:
>
> (...)
>
>> It may be the case that none of the bugs in trial synchronous
>> result utilities cause problems for you.  If they don't, I can
>> understand how it would not be a big priority for you to move away
>> from them (after all, I'm sure you have plenty of things that *are*
>> causing you problems now that you would much rather spend time on).
>> I recommend simply keeping this conversation in mind if and when you
>> run into problems with your use of deferredResult and deferredError
>> in the future and that you not let such problems take you by
>> surprise.  You can rest relatively easily in the knowledge that
>> deferredResult and friends will not disappear from Twisted
>> overnight.  Broken as they are, they are clearly part of a public
>> API and so will remain long enough to satisfy backwards
>> compatibility requirements.
>>
>
> Seems like as good a way as any to end this thread for me, since I
> definitely agree with the above.  And yes, I'm aware (or believe I am)
> of the risks I may be incurring by using these methods, as well as
> using unittest rather than trial, and will certainly continue to
> follow Twisted actively to hopefully catch changes that may impact my
> current choices.

I'll chime in with a "me, too" here.

It might also be nice to add some kind of warning to the __doc__  
strings for the 3 methods in question. There are caveats in wait()'s  
doc, but they weren't sufficient to scare me away, for one :).

--Grant

Grant Baillie
Open Source Applications Foundation
http://www.osafoundation.org






From radeex at gmail.com  Wed May 11 19:47:48 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Thu, 12 May 2005 09:47:48 +1000
Subject: [Twisted-Python] Re: Hanging test cases (Was: Evangelism notes...)
In-Reply-To: <uis1pcp6w.fsf@fitlinxx.com>
References: <C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>
	<20050506060050.15422.1130296805.divmod.quotient.21435@ohm>
	<uk6mcjc0f.fsf@fitlinxx.com>
	<6EA197D2-A573-4175-A0FB-9C5005389D68@redivi.com>
	<ufyx0j7dw.fsf@fitlinxx.com>
	<BDDD7C2C-EB8A-4601-8545-565ABEC46EAD@redivi.com>
	<u1x8jkhum.fsf@fitlinxx.com>
	<60ed19d405050718373b3463d4@mail.gmail.com>
	<uis1pcp6w.fsf@fitlinxx.com>
Message-ID: <60ed19d4050511164768c8e159@mail.gmail.com>

On 11 May 2005 19:34:15 -0400, David Bolen <db3l at fitlinxx.com> wrote:
> Christopher Armstrong <radeex at gmail.com> writes:
> >     testCase = deferredGenerator(testCase)
> >
> > after the definition of the method, or even:
> >
> >     @deferredGenerator
> >
> > before the definition of the method.
> 
> But then who actually performs the iteration over the test case to
> trigger the generator?  Clearly some top level code needs to invoke
> the reactor.run() and at some point iterate over testCase while
> beneath a running reactor.  We're just using unittest, so something
> would need to be added to serve as the basic framework for that sort
> of test.

deferredGenerator does the iteration. This is how defgen works: you
define a generator. It should yield waitForDeferred instances. Then
you wrap that generator function with deferredGenerator.
deferredGenerator wraps that function such that, when called, returns
a Deferred (not a generator object!). The original generator will be
exhausted (doing the magic wait-for-deferred stuff along the way) and
the Deferred returned from your function will result in the last item
yielded from the generator. Since trial supports test methods
returning deferreds, this Just Works.

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From andrea at cpushare.com  Wed May 11 20:16:25 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu, 12 May 2005 02:16:25 +0200
Subject: [Twisted-Python] pending twisted fixes
Message-ID: <20050512001625.GP6313@g5.random>

Hello,

These are the pending fixes for twisted that I'm maintaining on my tree.

On the client side to still allow 1.3.0 I've a file called
twisted_bugs.py and I import from there instead of twisted.* depending
on twisted.copyright.version. I've found very easy to fix a single bug
locally by cut-and-pasting a twisted function and by fixing it locally
while still not altering the 2.0 behaviour, it's pratically a local 2.0
backport which lives in its own file. Perhaps this would have been a
better approach than an upgrade to 2.0 in the rogers.com incident.
Hotfixes seems quite easy this way and sure less invasive than a full
upgrade (i.e. no risk of API breakage and no annoyance to the sysadm).
This is just a reminder just in case other incident happens that seems
to require 2.0 upgrade.

from twisted.copyright import version
twisted_bug_workaround = False
if '1.3.0' in version:
	twisted_bug_workaround = True

from twisted.internet import reactor # to stop it
if not twisted_bug_workaround:
	from twisted.protocols.basic import Int32StringReceiver
	from twisted.internet.protocol import ReconnectingClientFactory
else:
	from cpushare.twisted_bugs import Int32StringReceiver
	from cpushare.twisted_bugs import ReconnectingClientFactory

Full working example of the 1.3.0 hotfixes is available in the download
section of my site.

The transport.disconnecting was said not to be available for all
twisted transports, but then it should be added to the others instead of
my rejecting my patch with that argument (those basic.py protocols are
broken without this fix, so it's better that they fail with a visible
exception than subtly at runtime), or another method should be
implemented to know if the transport has disconnected already.

Keep up the great work, thanks!

Index: Twisted/twisted/protocols/basic.py
===================================================================
--- Twisted/twisted/protocols/basic.py	(revision 13717)
+++ Twisted/twisted/protocols/basic.py	(working copy)
@@ -166,9 +166,23 @@
         """
         return error.ConnectionLost('Line length exceeded')
     
+class PauseProducer(object):
+    paused = False
 
+    def pauseProducing(self):
+        self.paused = True
+        self.transport.pauseProducing()
 
-class LineReceiver(protocol.Protocol):
+    def resumeProducing(self):
+        self.paused = False
+        self.transport.resumeProducing()
+        self.dataReceived('')
+
+    def stopProducing(self):
+        self.paused = True
+        self.transport.stopProducing()
+
+class LineReceiver(protocol.Protocol, PauseProducer):
     """A protocol that receives lines and/or raw data, depending on mode.
     
     In line mode, each line that's received becomes a callback to
@@ -188,7 +202,6 @@
     __buffer = ''
     delimiter = '\r\n'
     MAX_LENGTH = 16384
-    paused = False
     
     def clearLineBuffer(self):
         """Clear buffered data."""
@@ -279,21 +292,8 @@
         """
         return self.transport.loseConnection()
 
-    def pauseProducing(self):
-        self.paused = True
-        self.transport.pauseProducing()
 
-    def resumeProducing(self):
-        self.paused = False
-        self.dataReceived('')
-        self.transport.resumeProducing()
-
-    def stopProducing(self):
-        self.paused = True
-        self.transport.stopProducing()
-
-
-class Int32StringReceiver(protocol.Protocol):
+class Int32StringReceiver(protocol.Protocol, PauseProducer):
     """A receiver for int32-prefixed strings.
 
     An int32 string is a string prefixed by 4 bytes, the 32-bit length of
@@ -314,7 +314,7 @@
         """Convert int32 prefixed strings into calls to stringReceived.
         """
         self.recvd = self.recvd + recd
-        while len(self.recvd) > 3:
+        while len(self.recvd) > 3 and not self.paused and not self.transport.disconnecting:
             length ,= struct.unpack("!i",self.recvd[:4])
             if length > self.MAX_LENGTH:
                 self.transport.loseConnection()
@@ -331,7 +331,7 @@
         self.transport.write(struct.pack("!i",len(data))+data)
 
 
-class Int16StringReceiver(protocol.Protocol):
+class Int16StringReceiver(protocol.Protocol, PauseProducer):
     """A receiver for int16-prefixed strings.
 
     An int16 string is a string prefixed by 2 bytes, the 16-bit length of
@@ -351,7 +351,7 @@
         """Convert int16 prefixed strings into calls to stringReceived.
         """
         self.recvd = self.recvd + recd
-        while len(self.recvd) > 1:
+        while len(self.recvd) > 1 and not self.paused and not self.transport.disconnecting:
             length = (ord(self.recvd[0]) * 256) + ord(self.recvd[1])
             if len(self.recvd) < length+2:
                 break
Index: Twisted/twisted/lore/latex.py
===================================================================
--- Twisted/twisted/lore/latex.py	(revision 13717)
+++ Twisted/twisted/lore/latex.py	(working copy)
@@ -104,7 +104,7 @@
 
     baseLevel = 0
     try:
-        diaHack = not not os.popen('which dia').read()
+        diaHack = not not os.popen('which dia 2>/dev/null').read()
     except:
         # That's a no, then.
         diaHack = 0



From glyph at divmod.com  Thu May 12 01:02:14 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Thu, 12 May 2005 01:02:14 -0400
Subject: [Twisted-Python] pending twisted fixes
In-Reply-To: <20050512001625.GP6313@g5.random>
References: <20050512001625.GP6313@g5.random>
Message-ID: <20050512184758.15422.1332721614.divmod.quotient.34976@ohm>

Andrea Arcangeli wrote:

> These are the pending fixes for twisted that I'm maintaining on my tree.

Thanks for reporting these, especially the fix backports.  I guess 
Twisted is a big enough project now that we need to start doing 
maintenance release trees!

> The transport.disconnecting was said not to be available for all
> twisted transports, but then it should be added to the others instead of
> my rejecting my patch with that argument (those basic.py protocols are
> broken without this fix, so it's better that they fail with a visible
> exception than subtly at runtime), or another method should be
> implemented to know if the transport has disconnected already.

Hmm.  True enough.

I've seen this problem before but not thought too hard about it. 
Considering it now, I think the right solution is to add a 
'disconnecting' attribute to ITransport, and fix all current Twisted 
ITransport implementations to include it.  I know that this is about to 
become an issue for me with Q2Q.

(Also, should we maybe have a distinction between IStreamTransport and 
IDatagramTransport, rather than just ITCPTransport/IUDPTransport?  or at 
least some attributes to introspect, like ".reliable" and ".ordered"?)




From glyph at divmod.com  Thu May 12 00:57:00 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Thu, 12 May 2005 00:57:00 -0400
Subject: [Twisted-Python] Re: Hanging test cases (Was: Evangelism notes...)
In-Reply-To: <CF8709DF-9B11-4A6A-BE6B-C773AA936815@osafoundation.org>
References: <u1x8jkhum.fsf@fitlinxx.com>	<20050507231316.15422.715887765.divmod.quotient.24760@ohm>	<umzr1cpfo.fsf@fitlinxx.com>
	<CF8709DF-9B11-4A6A-BE6B-C773AA936815@osafoundation.org>
Message-ID: <20050512184830.15422.942852393.divmod.quotient.34977@ohm>

Grant Baillie wrote:

> It might also be nice to add some kind of warning to the __doc__  
> strings for the 3 methods in question. There are caveats in wait()'s  
> doc, but they weren't sufficient to scare me away, for one :).

I apologize for the lack of enthusiasm of those warnings.  The 
unfortunate problem is that currently _all_ of trial is subtly broken, 
so there is nothing that we could suggest as a decent alternative, and 
thus can only deprecate so hard :-(.

The recent rewrite at least allows for returning Deferreds, which is 
what the future public API will eventually look like, but all it does 
when you return a Deferred is call wait() on it.  (JP got me up to speed 
  today on some bugs that are unique to returning Deferreds in this way, 
actually...)



From Sl_Church at sbcglobal.net  Thu May 12 15:54:58 2005
From: Sl_Church at sbcglobal.net (Shawn Church)
Date: Thu, 12 May 2005 12:54:58 -0700
Subject: [Twisted-Python] Unit Testing in twisted 2.0
Message-ID: <4283B492.2030301@sbcglobal.net>

I've been following the recent thread on the problems with twisted.trial
and since it is evidently broken I am hesitant about using it.  Instead
I create a class that performs all of my tests and sets class attributes
with the results.  I can then create this class once (at the module
level) and then use the standard unittest module to check the results. 
For example (this is untested code, I'm just trying to briefly
illustrate the approach I'm taking):

class PerformTests:
    def __init__(self):
       self.reactorStartedResults=False
       self.reactorStoppedResults=False

       reactor.callLater(0,self.reactorStarted)
       reactor.run()
       self.reactorStoppedResults=True

    def reactorStarted(self):
       self.reactorStartedResults=True

       # Issue another test here with .addboth(self.nextTestMethodName)
or stop reactor:
       reactor.stop()
      
   

performTests=PerformTests()

class Test(unittest.TestCase):
    def testReactorStart(self):
        self.assert_(performTests.self.reactorStartedResults)

    def testReactorStopped(self):
        self.assert_(performTests.self.reactorStoppedResults)

   # other tests


Should I use twisted.trial despite it's problems?  If not, is there a
better way to implement unit testing then the approach illustrated
above?  Any suggestions will be appreciated.


Thanks,


Shawn Church
sl_church at sbcglobal.net




From michal at dkp.com  Fri May 13 14:33:19 2005
From: michal at dkp.com (Michal Eldar)
Date: Fri, 13 May 2005 14:33:19 -0400
Subject: [Twisted-Python] adbapi, PostgreSQL and Unicode
In-Reply-To: <42820871.6020906@smartology.nl>
References: <427BEAAC.2060208@dkp.com> <4281FFD0.6010707@pollenation.net>
	<42820871.6020906@smartology.nl>
Message-ID: <4284F2EF.3030406@dkp.com>

Remy Cool wrote:

>Matt Goodall wrote:
>  
>
>>Michal Eldar wrote:
>>
>>
>>    
>>
>>>I keep getting - Unhandled error in Deferred
>>>      
>>>
>>You should attach an errback to the deferred and handle, or at least
>>log, the exception. That's what "Unhandled error in Deferred" means ;-).
>>
>>
>>    
>>
>>>I'm trying to perform an INSERT on my db (using adbapi with *pgdb*
>>>module).
>>>INSERT which comprises *Unicode* string
>>>e.g. -
>>>unicodeChar1 = u"Character=[\N{GREEK CAPITAL LETTER GAMMA}]"
>>>
>>>the db is defined to Unicode
>>>*client_encoding* value is set to *Unicode* when checking its value in
>>>*cp_openfun *called function
>>>execute the same INSERT directly with *pgdb *works great
>>>
>>>Does anyone has experience with adbapi with Unicode db ?!?!
>>>      
>>>
>
><snip>
>
>I also use pgdb with adbapi and unicode without problems. Insert's with
>unicode strings should not be problem even if the database is set to
>SQLASCII. The pgdb module inspects the string before sending it to the
>postgres machinery. If it's a unicode string (isinstance('the string',
>unicode) ) it's encoded to utf-8.
>
>I've submitted a patch to Darcy at pygresql.org for enhanced unicode
>support for pgdb. This patch takes care of the client_encoding stuff and
>makes it possible to fetch unicode strings from select queries.
>
>-- Remy --
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>  
>
First of all - Thanks !!! It was a nice surprise to find responses to my 
quesion :)

I read about Unicode in the Twisted Archive and a link to the FAQ gave 
me the solution:
I'm suppose to *encode* the unicode string before I'm passing it over...
This was THE difference when working with Twisted.
http://twistedmatrix.com/pipermail/twisted-python/2005-April/010198.html
http://twistedmatrix.com/projects/core/documentation/howto/faq.html#auto25

Matt - I did try to attach an errback, but it failed to print the error, 
because it probably included some non-ascii chars... I don't know why 
Twisted don't show an appropriate error about this problem
Remi - is it not possible to retrieve Unicode string from SELECT query 
with pgdb ? what is the behaviour nowadays?

Cheers! and Thanks again,
Michal



From foom at fuhm.net  Fri May 13 16:58:02 2005
From: foom at fuhm.net (James Y Knight)
Date: Fri, 13 May 2005 16:58:02 -0400
Subject: [Twisted-Python] adbapi, PostgreSQL and Unicode
In-Reply-To: <4284F2EF.3030406@dkp.com>
References: <427BEAAC.2060208@dkp.com> <4281FFD0.6010707@pollenation.net>
	<42820871.6020906@smartology.nl> <4284F2EF.3030406@dkp.com>
Message-ID: <053D47C6-0F88-46C2-A82C-90D07E5B7373@fuhm.net>


On May 13, 2005, at 2:33 PM, Michal Eldar wrote:

> Remy Cool wrote:
>
> First of all - Thanks !!! It was a nice surprise to find responses  
> to my quesion :)
>
> I read about Unicode in the Twisted Archive and a link to the FAQ  
> gave me the solution:
> I'm suppose to *encode* the unicode string before I'm passing it  
> over...
> This was THE difference when working with Twisted.
> http://twistedmatrix.com/pipermail/twisted-python/2005-April/ 
> 010198.html
> http://twistedmatrix.com/projects/core/documentation/howto/ 
> faq.html#auto25
>

Actually, that doesn't really apply to ADBAPI. Twisted's ADBAPI  
doesn't care what you pass to its runQuery/etc methods -- it simply  
passes that on to the database. It can be a unicode string or any  
random object, as long as the database adapter accepts it. It's hard  
to say what might be going wrong without a traceback, of course.

James



From zratchet at mindspring.com  Fri May 13 17:01:46 2005
From: zratchet at mindspring.com (C Ratchet)
Date: Fri, 13 May 2005 16:01:46 -0500
Subject: [Twisted-Python] Need help implementing Twisted
Message-ID: <7F670ABF-6A8B-4A2A-8C00-702366349A6E@mindspring.com>

Hello,

I'm looking for some developers who can help implement Twisted  
functionality for
my Snowball Fight game at http://snowballz.literati.org

We're probably going to use Tofu, which is the Soya3D network layer  
based on Twisted.
http://oomadness.tuxfamily.org/en/tofu/index.html

If anyone's interested in helping out just reply to this mail.

Thanks
Ratchet




From tim at se.linux.org  Fri May 13 17:57:17 2005
From: tim at se.linux.org (=?iso-8859-1?Q?Tim_Terleg=E5rd?=)
Date: Fri, 13 May 2005 23:57:17 +0200 (CEST)
Subject: [Twisted-Python] Twisted projects
Message-ID: <Pine.LNX.4.44.0505132351240.11252-100000@naskur.se.linux.org>

What about having a page on twistedmatrix.com that shows projects based
on Twisted? I think that would be really nice. A sourceforge for Twisted
projects is perhaps a bit too much, a simple listing of projects would
be nice. Would be great if people could add their own projects.

Tim




From mary-twisted at puzzling.org  Fri May 13 19:19:30 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat, 14 May 2005 09:19:30 +1000
Subject: [Twisted-Python] Twisted projects
In-Reply-To: <Pine.LNX.4.44.0505132351240.11252-100000@naskur.se.linux.org>
References: <Pine.LNX.4.44.0505132351240.11252-100000@naskur.se.linux.org>
Message-ID: <20050513231930.GM10222@sourdust.home.puzzling.org>

On Fri, May 13, 2005, Tim Terleg?rd wrote:
> What about having a page on twistedmatrix.com that shows projects based
> on Twisted? I think that would be really nice. A sourceforge for Twisted
> projects is perhaps a bit too much, a simple listing of projects would
> be nice. Would be great if people could add their own projects.

It exists: http://twistedmatrix.com/services/success

-Mary



From andrea at cpushare.com  Sat May 14 08:21:05 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sat, 14 May 2005 14:21:05 +0200
Subject: [Twisted-Python] pending twisted fixes
In-Reply-To: <20050512184758.15422.1332721614.divmod.quotient.34976@ohm>
References: <20050512001625.GP6313@g5.random>
	<20050512184758.15422.1332721614.divmod.quotient.34976@ohm>
Message-ID: <20050514122105.GG13985@g5.random>

On Thu, May 12, 2005 at 01:02:14AM -0400, Glyph Lefkowitz wrote:
> Andrea Arcangeli wrote:
> 
> >These are the pending fixes for twisted that I'm maintaining on my tree.
> 
> Thanks for reporting these, especially the fix backports.  I guess 

You're very welcome! Thanks for the great twisted work.

> Twisted is a big enough project now that we need to start doing 
> maintenance release trees!

So far my project has been more experimental than twisted, so on the
server side I'm surfing the SVN wave of all projects I depend on ;).
Lack of maintainance release is not a big deal for me as long as SVN
trunk remains usable in semi-production. I keep all installed versions
in a backup directory, so I can downgrade to the previous binaries of
all packages in a few seconds if something breaks.

On the client side hotfixing has been so easy to add that perhaps a more
official list of all potential serious bugs might be enough too. So if
one is affected he can apply the hotfix without even requiring the end
user to upgrade (i.e. avoiding the annoyance from the admin at the
rogers incident).

Infact I was surprised about the rogers decision of rewriting in pure
python. I would understand pure C/C++ to boost performance and increase
the developer base, but pure python isn't going to be better than
python+twisted. I guess they're more used to thread programming than
async driven programming, but thread programming is generally more
complex than async programming. And async programming is quite close to
thread programming, it's simpler because it's like if we were to hold
implicitly a big lock before rescheduling the next context.

On a related note, I wonder how complex it would be to really support
multiple threads listening in epoll and requiring each context to take
its locks, so then different contexts could scale in smp. This would
break all apps, but it could be an optional mode that the app enables
only if it supports multithreading. But anyway I don't need it right
now, this is just a random idea, performance is more than good enough,
if there's a performance problem it's only in the interfaces and
apparently that has been partly addressed by taking zope.interfaces.

> I've seen this problem before but not thought too hard about it. 
> Considering it now, I think the right solution is to add a 
> 'disconnecting' attribute to ITransport, and fix all current Twisted 
> ITransport implementations to include it.  I know that this is about to 
> become an issue for me with Q2Q.

This sounds fine with me ;)

> (Also, should we maybe have a distinction between IStreamTransport and 
> IDatagramTransport, rather than just ITCPTransport/IUDPTransport?  or at 
> least some attributes to introspect, like ".reliable" and ".ordered"?)

Abstracting this bit at the highlevel sounds good too. .stream may also
be a good candidate. .reliable and .ordered are two of the properties
that a stream has, the syscall uses SOCK_STREAM too.

Thanks!



From robin at wiretooth.com  Sun May 15 19:05:03 2005
From: robin at wiretooth.com (Robin Bryce)
Date: Mon, 16 May 2005 00:05:03 +0100
Subject: [Twisted-Python] pending twisted fixes
In-Reply-To: <20050514122105.GG13985@g5.random>
References: <20050512001625.GP6313@g5.random>	<20050512184758.15422.1332721614.divmod.quotient.34976@ohm>
	<20050514122105.GG13985@g5.random>
Message-ID: <4287D59F.4080408@wiretooth.com>

> On a related note, I wonder how complex it would be to really support
> multiple threads listening in epoll and requiring each context to take
> its locks, so then different contexts could scale in smp. 

I thought python's GIL lock made scaling like this for smp impossible ?



From luc.stepniewski at adelux.fr  Sun May 15 19:23:54 2005
From: luc.stepniewski at adelux.fr (Luc Stepniewski)
Date: Mon, 16 May 2005 01:23:54 +0200
Subject: [Twisted-Python] Twisted projects
In-Reply-To: <Pine.LNX.4.44.0505132351240.11252-100000@naskur.se.linux.org>
References: <Pine.LNX.4.44.0505132351240.11252-100000@naskur.se.linux.org>
Message-ID: <200505160123.55015.luc.stepniewski@adelux.fr>

On Friday 13 May 2005 23:57, Tim Terleg?rd wrote:
> What about having a page on twistedmatrix.com that shows projects based
> on Twisted? I think that would be really nice. A sourceforge for Twisted
> projects is perhaps a bit too much, a simple listing of projects would
> be nice. Would be great if people could add their own projects.

It exists, and people can add their own projects, to the twisted forum (that 
nobody accessed for quite some time, so I add them myself :-)

On http://twisted.banquise.org/index.php?t=thread&frm_id=14&rid=0

Luc
-- 
Luc Stepniewski <luc.stepniewski at adelux.fr>
Adelux - Securite, Linux  Public key: <http://lstep.free.fr/pubkey.txt>
Key BC0E3C2A fingerprint = A4FA466C68D27E46B427  07D083ED6340BC0E3C2A



From bob at redivi.com  Sun May 15 22:06:34 2005
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 15 May 2005 22:06:34 -0400
Subject: [Twisted-Python] pending twisted fixes
In-Reply-To: <4287D59F.4080408@wiretooth.com>
References: <20050512001625.GP6313@g5.random>	<20050512184758.15422.1332721614.divmod.quotient.34976@ohm>
	<20050514122105.GG13985@g5.random> <4287D59F.4080408@wiretooth.com>
Message-ID: <0EE98997-126D-460D-ACBC-7F296FF0C2B8@redivi.com>


On May 15, 2005, at 7:05 PM, Robin Bryce wrote:

>> On a related note, I wonder how complex it would be to really support
>> multiple threads listening in epoll and requiring each context to  
>> take
>> its locks, so then different contexts could scale in smp.
>>
>
> I thought python's GIL lock made scaling like this for smp  
> impossible ?

No.  epoll isn't Python bytecode, so it can block without holding the  
GIL.

-bob




From jean-marc.pouchoulon at ac-montpellier.fr  Mon May 16 08:45:20 2005
From: jean-marc.pouchoulon at ac-montpellier.fr (jean-marc.pouchoulon at ac-montpellier.fr)
Date: Mon, 16 May 2005 14:45:20 +0200
Subject: [Twisted-Python] ldaptor examples failed + python-ldap examples
	with twisted
Message-ID: <428895E0.8040701@ac-montpellier.fr>

Bonjour,

    I try to run ldaptor examples with python2.4.1 , twisted 2.0, nevow 
0.4.1, fedora core 3.
.05_form gives me  "Deferred instance has no attribute 'original'" and 
some warnings.

    Does anyone has an updated code ? ( I used the latest code I've got 
from svn )

    I search also python-ldap examples with twisted.

    Thanks.


NB : Twisted 2.0 rc4  windows installer never finished on my PC... 
(french xp sp2)

   



From exarkun at divmod.com  Mon May 16 09:12:38 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 16 May 2005 13:12:38 GMT
Subject: [Twisted-Python] ldaptor examples failed + python-ldap examples
	with twisted
In-Reply-To: <428895E0.8040701@ac-montpellier.fr>
Message-ID: <20050516131238.559.1775941084.divmod.quotient.1866@ohm>

On Mon, 16 May 2005 14:45:20 +0200, jean-marc.pouchoulon at ac-montpellier.fr wrote:
>Bonjour,
>
>    I try to run ldaptor examples with python2.4.1 , twisted 2.0, nevow 
>0.4.1, fedora core 3.
>.05_form gives me  "Deferred instance has no attribute 'original'" and some 
>warnings.
>
>    Does anyone has an updated code ? ( I used the latest code I've got from 
>svn )
>
>    I search also python-ldap examples with twisted.
>
>    Thanks.
>
>
>NB : Twisted 2.0 rc4  windows installer never finished on my PC... (french 
>xp sp2)
>

  That exception generally means "Twisted isn't installed", so I'd take another look at why the installer didn't finish.

  Also, there's a mailing list devoted to web development with Twisted:

    http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

  Jp



From jean-marc.pouchoulon at ac-montpellier.fr  Mon May 16 09:34:19 2005
From: jean-marc.pouchoulon at ac-montpellier.fr (jean-marc.pouchoulon at ac-montpellier.fr)
Date: Mon, 16 May 2005 15:34:19 +0200
Subject: [Twisted-Python] ldaptor examples failed + python-ldap examples
	with twisted
In-Reply-To: <20050516131238.559.1775941084.divmod.quotient.1866@ohm>
References: <20050516131238.559.1775941084.divmod.quotient.1866@ohm>
Message-ID: <4288A15B.2050808@ac-montpellier.fr>


>
>  That exception generally means "Twisted isn't installed", so I'd take 
> another look at why the installer didn't finish.


Twisted is installed ( the previous examples works correctly )....
I try to install twisted 2.0 on another  windows machine and this time 
the installer finished his work.


>
>  Also, there's a mailing list devoted to web development with Twisted:
>
>    http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

Ok  I will post.





From jean-marc.pouchoulon at ac-montpellier.fr  Mon May 16 09:34:27 2005
From: jean-marc.pouchoulon at ac-montpellier.fr (jean-marc.pouchoulon at ac-montpellier.fr)
Date: Mon, 16 May 2005 15:34:27 +0200
Subject: [Twisted-Python] ldaptor examples failed + python-ldap examples
	with twisted
In-Reply-To: <20050516131238.559.1775941084.divmod.quotient.1866@ohm>
References: <20050516131238.559.1775941084.divmod.quotient.1866@ohm>
Message-ID: <4288A163.5020200@ac-montpellier.fr>


>
>  That exception generally means "Twisted isn't installed", so I'd take 
> another look at why the installer didn't finish.


Twisted is installed ( the previous examples works correctly )....
I try to install twisted 2.0 on another  windows machine and this time 
the installer finished his work.


>
>  Also, there's a mailing list devoted to web development with Twisted:
>
>    http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

Ok  I will post.
thanks





From wyvern at crm3.com  Mon May 16 19:50:08 2005
From: wyvern at crm3.com (Jan Van Uytven)
Date: Mon, 16 May 2005 16:50:08 -0700
Subject: [Twisted-Python] Twistd thread problem
Message-ID: <428931B0.5060901@crm3.com>

Hi all,

I coded an SMTP proxy that receives incoming e-mail requests and pushes 
the received e-mail onto a Queue were it is processed by a worker thread 
that finishes by sending the e-mail on to another SMTP server.

The server part of the proxy was written in Twisted, but the worker 
thread uses smtplib to fire off the processed e-mails (I didn't know how 
to use the twisted smtp client in a thread).

When I run the application using twistd -noy <appname>, it works great. 
When I try to daemonize it (twistd -oy <appname>) the server part works, 
but the worker thread doesn't. It creates and then I suspect it 
immediately dies, as no error is returned upon creation. A debug of the 
queue reveals that the thread is not pulling items off it. A debugging 
statement placed at the top of the thread never runs, and the twistd log 
reports nothing wrong. I'm using reactor.callInThread to start the 
worker function.

I tried running twistd --spew -oy <appname> and captured the log it 
produced. I did a filter for anything with 'thread' in it, this is the 
result:

2005/05/16 09:15 PDT [-] function ? in 
/usr/lib/python2.3/site-packages/twisted/python/threadpool.py, line 11
2005/05/16 09:15 PDT [-] function WorkerStop in 
/usr/lib/python2.3/site-packages/twisted/python/threadpool.py, line 23
2005/05/16 09:15 PDT [-] function init in 
/usr/lib/python2.3/site-packages/twisted/python/threadable.py, line 219
2005/05/16 09:15 PDT [-] function ThreadPool in 
/usr/lib/python2.3/site-packages/twisted/python/threadpool.py, line 31
2005/05/16 09:15 PDT [-] function ThreadSafeList in 
/usr/lib/python2.3/site-packages/twisted/python/threadpool.py, line 199
2005/05/16 09:15 PDT [-] function init in 
/usr/lib/python2.3/site-packages/twisted/python/threadable.py, line 219
2005/05/16 09:15 PDT [-] method __init__ of 
twisted.python.threadpool.ThreadPool at -1216569236
2005/05/16 09:15 PDT [-] method start of 
twisted.python.threadpool.ThreadPool at -1216569236
2005/05/16 09:15 PDT [-] method adjustPoolsize of 
twisted.python.threadpool.ThreadPool at -1216569236
2005/05/16 09:15 PDT [-] method _startSomeWorkers of 
twisted.python.threadpool.ThreadPool at -1216569236
2005/05/16 09:15 PDT [-] method callInThread of 
twisted.python.threadpool.ThreadPool at -1216569236
2005/05/16 09:15 PDT [-] method _startSomeWorkers of 
twisted.python.threadpool.ThreadPool at -1216569236
2005/05/16 09:15 PDT [-] method startAWorker of 
twisted.python.threadpool.ThreadPool at -1216569236
2005/05/16 09:15 PDT [-] method __init__ of threading.Thread at -1216568116
2005/05/16 09:15 PDT [-] method __init__ of threading.Thread at -1216568116
2005/05/16 09:15 PDT [-] method _set_daemon of threading.Thread at 
-1216568116
2005/05/16 09:15 PDT [-] function currentThread in 
/usr/lib/python2.3/threading.py, line 669
2005/05/16 09:15 PDT [-] method isDaemon of threading._MainThread at 
-1214935060
2005/05/16 09:15 PDT [-] function Condition in 
/usr/lib/python2.3/threading.py, line 147
2005/05/16 09:15 PDT [-] method __init__ of threading._Condition at 
-1216567604
2005/05/16 09:15 PDT [-] method __init__ of threading._Condition at 
-1216567604
2005/05/16 09:15 PDT [-] method start of threading.Thread at -1216568116
2005/05/16 09:15 PDT [-] method _note of threading.Thread at -1216568116
2005/05/16 09:15 PDT [-] method run of threading.Thread at -1216568116
2005/05/16 09:15 PDT [-] method _worker of 
twisted.python.threadpool.ThreadPool at -1216569236
2005/05/16 09:15 PDT [-] function currentThread in 
/usr/lib/python2.3/threading.py, line 669
2005/05/16 09:15 PDT [-] function threadMailer in twisted-copyuser.py, 
line 201
2005/05/16 09:15 PDT [-] method acquire of 
twisted.python.threadable._XLock at -1216639284
2005/05/16 09:15 PDT [-] method release of 
twisted.python.threadable._XLock at -1216639284
2005/05/16 09:15 PDT [-] method acquire of 
twisted.python.threadable._XLock at -1216639284
2005/05/16 09:15 PDT [-] method release of 
twisted.python.threadable._XLock at -1216639284
2005/05/16 09:15 PDT [-] method acquire of 
twisted.python.threadable._XLock at -1216639284
2005/05/16 09:15 PDT [-] method release of 
twisted.python.threadable._XLock at -1216639284
2005/05/16 09:15 PDT [-] function registerAsIOThread in 
/usr/lib/python2.3/site-packages/twisted/python/threadable.py, line 262

Why would the worker thread act differently with twistd daemonized? Any 
suggestions, advice, or hints would be welcome.

Thanks,

Jan

-- 
Jan Van Uytven
Computer Systems & Network Engineer
Convergent Media Network
wyvern at crm3.com

Only in silence the word,
only in dark the light,
only in dying life:
Bright the hawk's flight 
on the empty sky.

- Ursula K. LeGuin, 'A Wizard of Earthsea'

*** LEGAL STUFF ***
This electronic message transmission, including any attached files, 
contains information which may be confidential and/or privileged.
The information is intended to be for the SOLE use of the individual or 
entity named above. If you are not the intended recipient, be aware 
that any review, disclosure, copying, distribution or use of the 
contents of this information is prohibited. This message is not to be 
forwarded for any reason without prior consent of the sender. 

If you have received this electronic transmission in error, please 
notify the sender immediately by telephone (250) 386-4266 or by a 
'reply to sender' only message and destroy all electronic and hard 
copies of the communication, including attachments, without reading 
or saving in any manner.




From exarkun at divmod.com  Mon May 16 20:44:11 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Tue, 17 May 2005 00:44:11 GMT
Subject: [Twisted-Python] Twistd thread problem
In-Reply-To: <428931B0.5060901@crm3.com>
Message-ID: <20050517004411.559.303342290.divmod.quotient.2315@ohm>

On Mon, 16 May 2005 16:50:08 -0700, Jan Van Uytven <wyvern at crm3.com> wrote:
>Hi all,
>
>I coded an SMTP proxy that receives incoming e-mail requests and pushes the 
>received e-mail onto a Queue were it is processed by a worker thread that 
>finishes by sending the e-mail on to another SMTP server.
>
>The server part of the proxy was written in Twisted, but the worker thread 
>uses smtplib to fire off the processed e-mails (I didn't know how to use the 
>twisted smtp client in a thread).
>
>When I run the application using twistd -noy <appname>, it works great. When 
>I try to daemonize it (twistd -oy <appname>) the server part works, but the 
>worker thread doesn't. It creates and then I suspect it immediately dies, as 
>no error is returned upon creation. A debug of the queue reveals that the 
>thread is not pulling items off it. A debugging statement placed at the top 
>of the thread never runs, and the twistd log reports nothing wrong. I'm 
>using reactor.callInThread to start the worker function.
>
> [snip]
>
>Why would the worker thread act differently with twistd daemonized? Any 
>suggestions, advice, or hints would be welcome.
>
>Thanks,
>
>Jan
>

    Try changing the code so that it does not try to start any worker threads until after the reactor starts running (eg, using a Service or with reactor.callWhenRunning).

  Jp



From tv at twistedmatrix.com  Tue May 17 00:01:17 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 17 May 2005 07:01:17 +0300
Subject: [Twisted-Python] ldaptor examples failed + python-ldap examples
	with twisted
In-Reply-To: <428895E0.8040701@ac-montpellier.fr>
References: <428895E0.8040701@ac-montpellier.fr>
Message-ID: <42896C8D.9030402@twistedmatrix.com>

jean-marc.pouchoulon at ac-montpellier.fr wrote:
>    I try to run ldaptor examples with python2.4.1 , twisted 2.0, nevow
> 0.4.1, fedora core 3.
> .05_form gives me  "Deferred instance has no attribute 'original'" and
> some warnings.

That's a Twisted error, not an Ldaptor error.

Also, the addressbook example is pretty horribly out of date, sorry.



From brendonh at gmail.com  Tue May 17 02:46:47 2005
From: brendonh at gmail.com (Brendon Hogger)
Date: Tue, 17 May 2005 14:46:47 +0800
Subject: [Twisted-Python] Simpler twistedmatrix.com doc indexes
Message-ID: <f0388c6f0505162346730c0467@mail.gmail.com>

Hi there.
            I've been playing around with using lore and microdom to
generate better indexes for the Twisted documentation, and also to
move everything into a single /doc tree. The results, at least until I
break it all again, are here:

http://microdev.dyndns.org:8080/doc/

I'm looking for feedback on whether this is any easier to use, and
what could be improved.

There are some issues I already know about:
 - Links to non-html resources are broken
 - Core HOWTO list is gigantic and messy
 - "Other" docs are strangely laid out

Thanks,
Brendon



From mary-twisted at puzzling.org  Tue May 17 02:54:16 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 17 May 2005 16:54:16 +1000
Subject: [Twisted-Python] Simpler twistedmatrix.com doc indexes
In-Reply-To: <f0388c6f0505162346730c0467@mail.gmail.com>
References: <f0388c6f0505162346730c0467@mail.gmail.com>
Message-ID: <20050517065416.GA30430@home.puzzling.org>

On Tue, May 17, 2005, Brendon Hogger wrote:
> Hi there.
>             I've been playing around with using lore and microdom to
> generate better indexes for the Twisted documentation, and also to
> move everything into a single /doc tree. The results, at least until I
> break it all again, are here:
> 
> http://microdev.dyndns.org:8080/doc/
> 
> I'm looking for feedback on whether this is any easier to use, and
> what could be improved.

It looks good... but we don't actually really *have* a master doc index
any more (yes http://twistedmatrix.com/documents still exists, but the
docs there are 1.3). Do you suggest we restore it?

-Mary



From brendonh at gmail.com  Tue May 17 03:00:54 2005
From: brendonh at gmail.com (Brendon Hogger)
Date: Tue, 17 May 2005 15:00:54 +0800
Subject: [Twisted-Python] Simpler twistedmatrix.com doc indexes
In-Reply-To: <20050517065416.GA30430@home.puzzling.org>
References: <f0388c6f0505162346730c0467@mail.gmail.com>
	<20050517065416.GA30430@home.puzzling.org>
Message-ID: <f0388c6f050517000047f59e1b@mail.gmail.com>

> It looks good... but we don't actually really *have* a master doc index
> any more (yes http://twistedmatrix.com/documents still exists, but the
> docs there are 1.3). Do you suggest we restore it?

Yes. I think it's much easier to get an idea of what's available when
it's all collected together in one place. It seems fairly common to
hear people say that Twisted is lacking documentation because they
just don't stumble across it.

- Brendon



From mailinglists at smartology.nl  Tue May 17 03:18:32 2005
From: mailinglists at smartology.nl (Remy Cool)
Date: Tue, 17 May 2005 09:18:32 +0200
Subject: [Twisted-Python] adbapi, PostgreSQL and Unicode
In-Reply-To: <4284F2EF.3030406@dkp.com>
References: <427BEAAC.2060208@dkp.com>
	<4281FFD0.6010707@pollenation.net>	<42820871.6020906@smartology.nl>
	<4284F2EF.3030406@dkp.com>
Message-ID: <42899AC8.40201@smartology.nl>

Michal Eldar wrote:
> Remy Cool wrote:
> 
>> Matt Goodall wrote:
>>
>>> Michal Eldar wrote:
>>>
>>>> I keep getting - Unhandled error in Deferred
>>>>     
>>>
>>> You should attach an errback to the deferred and handle, or at least
>>> log, the exception. That's what "Unhandled error in Deferred" means ;-).
>>>
>>>> I'm trying to perform an INSERT on my db (using adbapi with *pgdb*
>>>> module).
>>>> INSERT which comprises *Unicode* string
>>>> e.g. -
>>>> unicodeChar1 = u"Character=[\N{GREEK CAPITAL LETTER GAMMA}]"
>>>>
>>>> the db is defined to Unicode
>>>> *client_encoding* value is set to *Unicode* when checking its value in
>>>> *cp_openfun *called function
>>>> execute the same INSERT directly with *pgdb *works great
>>>>
>>>> Does anyone has experience with adbapi with Unicode db ?!?!

>>
>>
>> <snip>
>>
>> I also use pgdb with adbapi and unicode without problems. Insert's with
>> unicode strings should not be problem even if the database is set to
>> SQLASCII. The pgdb module inspects the string before sending it to the
>> postgres machinery. If it's a unicode string (isinstance('the string',
>> unicode) ) it's encoded to utf-8.
>>
>> I've submitted a patch to Darcy at pygresql.org for enhanced unicode
>> support for pgdb. This patch takes care of the client_encoding stuff and
>> makes it possible to fetch unicode strings from select queries.

> First of all - Thanks !!! It was a nice surprise to find responses to my
> quesion :)
> 
> I read about Unicode in the Twisted Archive and a link to the FAQ gave
> me the solution:
> I'm suppose to *encode* the unicode string before I'm passing it over...
> This was THE difference when working with Twisted.
> http://twistedmatrix.com/pipermail/twisted-python/2005-April/010198.html
> http://twistedmatrix.com/projects/core/documentation/howto/faq.html#auto25
> 
> Matt - I did try to attach an errback, but it failed to print the error,
> because it probably included some non-ascii chars... I don't know why
> Twisted don't show an appropriate error about this problem
> Remi - is it not possible to retrieve Unicode string from SELECT query
> with pgdb ? what is the behaviour nowadays?

The standard behaviour of pgdb is that unicode strings are automagically
encoded to utf-8 when inserting something in the database and you get
plain python strings for select queries. I've looked at the code of
other python database connectors and added (transparent) functionality
to pgdb so that it can it return unicode strings if you want it to.






From mary-twisted at puzzling.org  Tue May 17 04:30:43 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 17 May 2005 18:30:43 +1000
Subject: [Twisted-Python] Simpler twistedmatrix.com doc indexes
In-Reply-To: <f0388c6f050517000047f59e1b@mail.gmail.com>
References: <f0388c6f0505162346730c0467@mail.gmail.com>
	<20050517065416.GA30430@home.puzzling.org>
	<f0388c6f050517000047f59e1b@mail.gmail.com>
Message-ID: <20050517083043.GB18930@sourdust.home.puzzling.org>

On Tue, May 17, 2005, Brendon Hogger wrote:
> > It looks good... but we don't actually really *have* a master doc index
> > any more (yes http://twistedmatrix.com/documents still exists, but the
> > docs there are 1.3). Do you suggest we restore it?
> 
> Yes. I think it's much easier to get an idea of what's available when
> it's all collected together in one place. It seems fairly common to
> hear people say that Twisted is lacking documentation because they
> just don't stumble across it.

Can you file a bug at http://twistedmatrix.com/bugs/ about making these
changes and assign it to me (hypatia) please, when you've finished
experimenting? Source files appreciated, and thanks very much for your
work on this.

-Mary



From simon at hedberg.net  Tue May 17 05:37:59 2005
From: simon at hedberg.net (Simon)
Date: Tue, 17 May 2005 11:37:59 +0200
Subject: [Twisted-Python] Simpler twistedmatrix.com doc indexes
In-Reply-To: <f0388c6f050517000047f59e1b@mail.gmail.com>
Message-ID: <000201c55ac4$1ccb9100$506271d5@hp>

Hi Brendon,
I would suggest you make the main doc page much simpler. I'd like to see
it focus on the core docs and perhaps provide some form of preferred or
recommended learning path. If the intention is to help people new to
Twisted I think we have to narrow the selection down so it don't become
too overwhelming. At least my learning experience with Twisted was to
take it a chunk at a time. Trying to grip the whole project is just too
much to start with.
I'm not saying your index is bad, just that it'd probably be good to add
some intro page.

/Simon

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Brendon
Hogger
Sent: den 17 maj 2005 09:01
To: Twisted general discussion
Subject: Re: [Twisted-Python] Simpler twistedmatrix.com doc indexes


> It looks good... but we don't actually really *have* a master doc 
> index any more (yes http://twistedmatrix.com/documents still exists, 
> but the docs there are 1.3). Do you suggest we restore it?

Yes. I think it's much easier to get an idea of what's available when
it's all collected together in one place. It seems fairly common to hear
people say that Twisted is lacking documentation because they just don't
stumble across it.

- Brendon

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From brendonh at gmail.com  Tue May 17 06:10:08 2005
From: brendonh at gmail.com (Brendon Hogger)
Date: Tue, 17 May 2005 18:10:08 +0800
Subject: [Twisted-Python] Simpler twistedmatrix.com doc indexes
In-Reply-To: <f0388c6f0505170308543302b5@mail.gmail.com>
References: <f0388c6f050517000047f59e1b@mail.gmail.com>
	<000201c55ac4$1ccb9100$506271d5@hp>
	<f0388c6f0505170308543302b5@mail.gmail.com>
Message-ID: <f0388c6f050517031066c91371@mail.gmail.com>

> I'd like to see it focus on the core docs and perhaps
> provide some form of preferred or recommended learning path.

I agree, the problem is that I don't actually know what the best
learning path would be. Any suggestions?

- Brendon



From teratorn at twistedmatrix.com  Tue May 17 09:55:57 2005
From: teratorn at twistedmatrix.com (Eric Mangold)
Date: Tue, 17 May 2005 23:55:57 +1000
Subject: [Twisted-Python] Unit Testing in twisted 2.0
In-Reply-To: <4283B492.2030301@sbcglobal.net>
References: <4283B492.2030301@sbcglobal.net>
Message-ID: <op.sqxabj1cy3d107@aspen>

On Fri, 13 May 2005 05:54:58 +1000, Shawn Church <Sl_Church at sbcglobal.net>  
wrote:

> I've been following the recent thread on the problems with twisted.trial
> and since it is evidently broken I am hesitant about using it.  Instead
> I create a class that performs all of my tests and sets class attributes
> with the results.  I can then create this class once (at the module
> level) and then use the standard unittest module to check the results.
> For example (this is untested code, I'm just trying to briefly
> illustrate the approach I'm taking):
>
> class PerformTests:
>     def __init__(self):
>        self.reactorStartedResults=False
>        self.reactorStoppedResults=False
>
>        reactor.callLater(0,self.reactorStarted)
>        reactor.run()
>        self.reactorStoppedResults=True
>
>     def reactorStarted(self):
>        self.reactorStartedResults=True
>
>        # Issue another test here with .addboth(self.nextTestMethodName)
> or stop reactor:
>        reactor.stop()
>
> performTests=PerformTests()
>
> class Test(unittest.TestCase):
>     def testReactorStart(self):
>         self.assert_(performTests.self.reactorStartedResults)
>
>     def testReactorStopped(self):
>         self.assert_(performTests.self.reactorStoppedResults)
>
>    # other tests
>
>
> Should I use twisted.trial despite it's problems?  If not, is there a
> better way to implement unit testing then the approach illustrated
> above?  Any suggestions will be appreciated.

I would say just use trial. It mostly works.

-Eric

> Thanks,
>
>
> Shawn Church
> sl_church at sbcglobal.net
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>





From robin at wiretooth.com  Tue May 17 19:24:17 2005
From: robin at wiretooth.com (Robin Bryce)
Date: Wed, 18 May 2005 00:24:17 +0100
Subject: [Twisted-Python] pending twisted fixes
In-Reply-To: <0EE98997-126D-460D-ACBC-7F296FF0C2B8@redivi.com>
References: <20050512001625.GP6313@g5.random>	<20050512184758.15422.1332721614.divmod.quotient.34976@ohm>
	<20050514122105.GG13985@g5.random> <4287D59F.4080408@wiretooth.com>
	<0EE98997-126D-460D-ACBC-7F296FF0C2B8@redivi.com>
Message-ID: <428A7D21.4000100@wiretooth.com>

Ah, thanks Bob. Makes sense now :)

Bob Ippolito wrote:
> 
> On May 15, 2005, at 7:05 PM, Robin Bryce wrote:
> 
>>> On a related note, I wonder how complex it would be to really support
>>> multiple threads listening in epoll and requiring each context to  take
>>> its locks, so then different contexts could scale in smp.
>>>
>>
>> I thought python's GIL lock made scaling like this for smp  impossible ?
> 
> 
> No.  epoll isn't Python bytecode, so it can block without holding the  GIL.
> 
> -bob
> 



From mcfletch at rogers.com  Wed May 18 09:31:44 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Wed, 18 May 2005 09:31:44 -0400
Subject: [Twisted-Python] Anyone seeing hanging of Twisted HTTPS servers?
Message-ID: <428B43C0.3050104@rogers.com>

We've recently picked up 3 or 4 minute blocks on one of our servers. 
Wondering if anyone else has seen these.

We have a "zombiechecker" script that downloads the front page of the
web front-end every minute (restarting the entire server if it can't
connect).  After 20 or 30 minutes (sometimes a few hours) we see 3 or 4
of those checks queued, the connection has been accepted, but the server
appears to be frozen (the reactor doesn't appear to be processing
anything, neither web front-end or the processing back-end).  After the
3 or 4 minutes frozen, the server starts processing the back-end
operations and eventually gets around to replying to the web front-end
requests.  Most of the time we see an error in the logs like this just
as the blockage is clearing:

Traceback (most recent call last):
  File "/home/mcfletch/cvs/twisted/python/log.py", line 41, in
callWithContext
    return context.call({ILogContext: newCtx}, func, *args, **kw)
  File "/home/mcfletch/cvs/twisted/python/context.py", line 52, in
callWithContext
    return self.currentContext().callWithContext(ctx, func, *args, **kw)
  File "/home/mcfletch/cvs/twisted/python/context.py", line 31, in
callWithContext
    return func(*args,**kw)
  File "/home/mcfletch/cvs/twisted/internet/selectreactor.py", line 139,
in _doReadOrWrite
    why = getattr(selectable, method)()
--- <exception caught here> ---
  File "/home/mcfletch/cvs/twisted/internet/tcp.py", line 111, in doRead
    return Connection.doRead(self)
  File "/home/mcfletch/cvs/twisted/internet/tcp.py", line 343, in doRead
    data = self.socket.recv(self.bufferSize)
OpenSSL.SSL.Error: [('SSL routines', 'SSL23_READ', 'ssl handshake failure')]

but the web front-end query still goes through (possibly because
web.client is retrying?).

Anyway, just wondering if anyone else has seen it or whether we're off
in funky land. In the meantime I'm going to try turning on every bit of
logging in the system while I'm off at a meeting and see if I can
discover the precise point where it's hanging.

Oh, FreeBSD 5.3-RC2, Python 2.3.4, Twisted 2.0, Nevow from CVS.

Thanks all,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From andrew-twisted at puzzling.org  Wed May 18 09:59:23 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 18 May 2005 23:59:23 +1000
Subject: [Twisted-Python] Anyone seeing hanging of Twisted HTTPS servers?
In-Reply-To: <428B43C0.3050104@rogers.com>
References: <428B43C0.3050104@rogers.com>
Message-ID: <20050518135923.GO27700@frobozz>

On Wed, May 18, 2005 at 09:31:44AM -0400, Mike C. Fletcher wrote:
[...]
> 
> Anyway, just wondering if anyone else has seen it or whether we're off
> in funky land. In the meantime I'm going to try turning on every bit of
> logging in the system while I'm off at a meeting and see if I can
> discover the precise point where it's hanging.

If you really want lots of logging, pass --spew to twistd :)

> Oh, FreeBSD 5.3-RC2, Python 2.3.4, Twisted 2.0, Nevow from CVS.

Potentially relevant as well is the version of PyOpenSSL -- I don't know
much about the SSL stuff in Twisted, but it's possible the bug lies there.

-Andrew.




From simon at hedberg.net  Wed May 18 10:25:14 2005
From: simon at hedberg.net (Simon)
Date: Wed, 18 May 2005 16:25:14 +0200
Subject: [Twisted-Python] Simpler twistedmatrix.com doc indexes
In-Reply-To: <f0388c6f050517031066c91371@mail.gmail.com>
Message-ID: <000001c55bb5$69a6e280$506271d5@hp>

Hi,
I saw that you've integrated the HOWTO's in the docs index page now. As
I said on IRC i've made a outline of the HOWTO index that I feel might
be a bit more intuitive. See the attached notes and the result in html.

/Simon
(STemplar)

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Brendon
Hogger
Sent: den 17 maj 2005 12:10
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] Simpler twistedmatrix.com doc indexes


> I'd like to see it focus on the core docs and perhaps
> provide some form of preferred or recommended learning path.

I agree, the problem is that I don't actually know what the best
learning path would be. Any suggestions?

- Brendon

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: twisted-doc-remake.txt
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050518/d11ef9f0/attachment.txt 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050518/d11ef9f0/attachment.html 

From cmoad at indiana.edu  Wed May 18 10:37:06 2005
From: cmoad at indiana.edu (Charles Moad)
Date: Wed, 18 May 2005 09:37:06 -0500
Subject: [Twisted-Python] Anyone seeing hanging of Twisted HTTPS servers?
In-Reply-To: <20050518135923.GO27700@frobozz>
References: <428B43C0.3050104@rogers.com> <20050518135923.GO27700@frobozz>
Message-ID: <428B5312.5080302@indiana.edu>

I am getting this same error (with the request going through fine) with
version 0.6 of PyOpenSSL.

-Charlie

Andrew Bennetts wrote:
> On Wed, May 18, 2005 at 09:31:44AM -0400, Mike C. Fletcher wrote:
> [...]
> 
>>Anyway, just wondering if anyone else has seen it or whether we're off
>>in funky land. In the meantime I'm going to try turning on every bit of
>>logging in the system while I'm off at a meeting and see if I can
>>discover the precise point where it's hanging.
> 
> 
> If you really want lots of logging, pass --spew to twistd :)
> 
> 
>>Oh, FreeBSD 5.3-RC2, Python 2.3.4, Twisted 2.0, Nevow from CVS.
> 
> 
> Potentially relevant as well is the version of PyOpenSSL -- I don't know
> much about the SSL stuff in Twisted, but it's possible the bug lies there.
> 
> -Andrew.
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From orbitz at ezabel.com  Wed May 18 13:57:52 2005
From: orbitz at ezabel.com (orbitz at ezabel.com)
Date: Wed, 18 May 2005 13:57:52 -0400
Subject: [Twisted-Python] Twistd thread problem
In-Reply-To: <428931B0.5060901@crm3.com>
References: <428931B0.5060901@crm3.com>
Message-ID: <9c78c12df892cc1b36503f8f3b12cc0e@ezabel.com>

If your making a proxy you shouldn't a queue or worker threads.  Just 
connect to the destination and send your incoming data to it and it's 
outgoing data back to the client.  This can all be done in one thread.  
Even if you don't do it like this you also don't need a thread to send 
the data, sending smtp is fairly trivial you can do it by hand, or use 
the smtp client that comes with twisted (might as well learn sometime).

On May 16, 2005, at 7:50 PM, Jan Van Uytven wrote:

> Hi all,
>
> I coded an SMTP proxy that receives incoming e-mail requests and 
> pushes the received e-mail onto a Queue were it is processed by a 
> worker thread that finishes by sending the e-mail on to another SMTP 
> server.
>
> The server part of the proxy was written in Twisted, but the worker 
> thread uses smtplib to fire off the processed e-mails (I didn't know 
> how to use the twisted smtp client in a thread).
>
> When I run the application using twistd -noy <appname>, it works 
> great. When I try to daemonize it (twistd -oy <appname>) the server 
> part works, but the worker thread doesn't. It creates and then I 
> suspect it immediately dies, as no error is returned upon creation. A 
> debug of the queue reveals that the thread is not pulling items off 
> it. A debugging statement placed at the top of the thread never runs, 
> and the twistd log reports nothing wrong. I'm using 
> reactor.callInThread to start the worker function.
>
> I tried running twistd --spew -oy <appname> and captured the log it 
> produced. I did a filter for anything with 'thread' in it, this is the 
> result:
>
> 2005/05/16 09:15 PDT [-] function ? in 
> /usr/lib/python2.3/site-packages/twisted/python/threadpool.py, line 11
> 2005/05/16 09:15 PDT [-] function WorkerStop in 
> /usr/lib/python2.3/site-packages/twisted/python/threadpool.py, line 23
> 2005/05/16 09:15 PDT [-] function init in 
> /usr/lib/python2.3/site-packages/twisted/python/threadable.py, line 
> 219
> 2005/05/16 09:15 PDT [-] function ThreadPool in 
> /usr/lib/python2.3/site-packages/twisted/python/threadpool.py, line 31
> 2005/05/16 09:15 PDT [-] function ThreadSafeList in 
> /usr/lib/python2.3/site-packages/twisted/python/threadpool.py, line 
> 199
> 2005/05/16 09:15 PDT [-] function init in 
> /usr/lib/python2.3/site-packages/twisted/python/threadable.py, line 
> 219
> 2005/05/16 09:15 PDT [-] method __init__ of 
> twisted.python.threadpool.ThreadPool at -1216569236
> 2005/05/16 09:15 PDT [-] method start of 
> twisted.python.threadpool.ThreadPool at -1216569236
> 2005/05/16 09:15 PDT [-] method adjustPoolsize of 
> twisted.python.threadpool.ThreadPool at -1216569236
> 2005/05/16 09:15 PDT [-] method _startSomeWorkers of 
> twisted.python.threadpool.ThreadPool at -1216569236
> 2005/05/16 09:15 PDT [-] method callInThread of 
> twisted.python.threadpool.ThreadPool at -1216569236
> 2005/05/16 09:15 PDT [-] method _startSomeWorkers of 
> twisted.python.threadpool.ThreadPool at -1216569236
> 2005/05/16 09:15 PDT [-] method startAWorker of 
> twisted.python.threadpool.ThreadPool at -1216569236
> 2005/05/16 09:15 PDT [-] method __init__ of threading.Thread at 
> -1216568116
> 2005/05/16 09:15 PDT [-] method __init__ of threading.Thread at 
> -1216568116
> 2005/05/16 09:15 PDT [-] method _set_daemon of threading.Thread at 
> -1216568116
> 2005/05/16 09:15 PDT [-] function currentThread in 
> /usr/lib/python2.3/threading.py, line 669
> 2005/05/16 09:15 PDT [-] method isDaemon of threading._MainThread at 
> -1214935060
> 2005/05/16 09:15 PDT [-] function Condition in 
> /usr/lib/python2.3/threading.py, line 147
> 2005/05/16 09:15 PDT [-] method __init__ of threading._Condition at 
> -1216567604
> 2005/05/16 09:15 PDT [-] method __init__ of threading._Condition at 
> -1216567604
> 2005/05/16 09:15 PDT [-] method start of threading.Thread at 
> -1216568116
> 2005/05/16 09:15 PDT [-] method _note of threading.Thread at 
> -1216568116
> 2005/05/16 09:15 PDT [-] method run of threading.Thread at -1216568116
> 2005/05/16 09:15 PDT [-] method _worker of 
> twisted.python.threadpool.ThreadPool at -1216569236
> 2005/05/16 09:15 PDT [-] function currentThread in 
> /usr/lib/python2.3/threading.py, line 669
> 2005/05/16 09:15 PDT [-] function threadMailer in twisted-copyuser.py, 
> line 201
> 2005/05/16 09:15 PDT [-] method acquire of 
> twisted.python.threadable._XLock at -1216639284
> 2005/05/16 09:15 PDT [-] method release of 
> twisted.python.threadable._XLock at -1216639284
> 2005/05/16 09:15 PDT [-] method acquire of 
> twisted.python.threadable._XLock at -1216639284
> 2005/05/16 09:15 PDT [-] method release of 
> twisted.python.threadable._XLock at -1216639284
> 2005/05/16 09:15 PDT [-] method acquire of 
> twisted.python.threadable._XLock at -1216639284
> 2005/05/16 09:15 PDT [-] method release of 
> twisted.python.threadable._XLock at -1216639284
> 2005/05/16 09:15 PDT [-] function registerAsIOThread in 
> /usr/lib/python2.3/site-packages/twisted/python/threadable.py, line 
> 262
>
> Why would the worker thread act differently with twistd daemonized? 
> Any suggestions, advice, or hints would be welcome.
>
> Thanks,
>
> Jan
>
> -- 
> Jan Van Uytven
> Computer Systems & Network Engineer
> Convergent Media Network
> wyvern at crm3.com
>
> Only in silence the word,
> only in dark the light,
> only in dying life:
> Bright the hawk's flight on the empty sky.
>
> - Ursula K. LeGuin, 'A Wizard of Earthsea'
>
> *** LEGAL STUFF ***
> This electronic message transmission, including any attached files, 
> contains information which may be confidential and/or privileged.
> The information is intended to be for the SOLE use of the individual 
> or entity named above. If you are not the intended recipient, be aware 
> that any review, disclosure, copying, distribution or use of the 
> contents of this information is prohibited. This message is not to be 
> forwarded for any reason without prior consent of the sender.
> If you have received this electronic transmission in error, please 
> notify the sender immediately by telephone (250) 386-4266 or by a 
> 'reply to sender' only message and destroy all electronic and hard 
> copies of the communication, including attachments, without reading or 
> saving in any manner.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From bv at bnl.gov  Wed May 18 14:25:35 2005
From: bv at bnl.gov (Brett Viren)
Date: Wed, 18 May 2005 14:25:35 -0400
Subject: [Twisted-Python] Alarm collection and display system?
Message-ID: <ir4u0l0l7c0.fsf@minos.phy.bnl.gov>

Hi,

Our experiment has need for a pseudo real-time (prompt) networked
alarm collection and display system.  Before just diving in and
writing something I thought I'd best try to see if anything is out
there and Twisted certainly seems a fertile enough framework to have
had at least one such system sprouted already.

What we have is several, independent processes all of which can raise
problems of varying degrees of severity.  Most of the alarm producers
are written in differing languages and frameworks and are scattered
over different computers (some in different states).  

We want to centralize these alarms and then serve them to one or more
consumers.  Ideally alarms are "pushed" to consumers rather than
needing to poll so as to minimize latency between production and
consumption.  But, because some consumers will be behind firewalls the
consumers should initiate the connection.

Anything already fit this bill or come close?  If we do end up rolling
our own, any suggestions to get us started in the right direction?

Thanks,
-Brett.






From radeex at gmail.com  Wed May 18 19:24:37 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Thu, 19 May 2005 09:24:37 +1000
Subject: [Twisted-Python] Anyone seeing hanging of Twisted HTTPS servers?
In-Reply-To: <428B5312.5080302@indiana.edu>
References: <428B43C0.3050104@rogers.com> <20050518135923.GO27700@frobozz>
	<428B5312.5080302@indiana.edu>
Message-ID: <60ed19d4050518162434ad4c88@mail.gmail.com>

On 5/19/05, Charles Moad <cmoad at indiana.edu> wrote:
> I am getting this same error (with the request going through fine) with
> version 0.6 of PyOpenSSL.

Pretty much all Twisted https servers will get this error very often.
It's just spurious debugging info, afaict, and we have never had any
kind of hanging in our web app at work. I'd bet the hanging is
something else. I suggest running 'strace -p <pid>' (or whatever the
FreeBSD equivalent is) on the process when you know that it's hanging,
and see what it's doing, perhaps blocking on a syscall.

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From glyph at divmod.com  Wed May 18 19:32:17 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 18 May 2005 19:32:17 -0400
Subject: [Twisted-Python] Alarm collection and display system?
In-Reply-To: <ir4u0l0l7c0.fsf@minos.phy.bnl.gov>
References: <ir4u0l0l7c0.fsf@minos.phy.bnl.gov>
Message-ID: <428BD081.7050103@divmod.com>

Brett Viren wrote:

> We want to centralize these alarms and then serve them to one or more
> consumers.  Ideally alarms are "pushed" to consumers rather than
> needing to poll so as to minimize latency between production and
> consumption.  But, because some consumers will be behind firewalls the
> consumers should initiate the connection.
> 
> Anything already fit this bill or come close?  If we do end up rolling
> our own, any suggestions to get us started in the right direction?

The obvious solution is just to roll your own and keep sockets always 
open from the consumers behind firewalls, and push notifications down 
those channels.

I'm also working on something like this, a protocol called "Q2Q", but 
it's heavily in development now so I wouldn't suggest it if you have any 
deadlines.



From leszczynscy at yahoo.com  Wed May 18 19:44:35 2005
From: leszczynscy at yahoo.com (Andrzej Leszczynski)
Date: Wed, 18 May 2005 16:44:35 -0700 (PDT)
Subject: [Twisted-Python] ldaptor based LDAP server
In-Reply-To: 6667
Message-ID: <20050518234435.24622.qmail@web30502.mail.mud.yahoo.com>

Hi,
I am looking for a Python barebones for a simple LDAP
server project. It does not have to be Twisted based,
but it would be wonderful if it is. I need a very
simple server which is listening on some port and
accepts following LDAP messages:
	-bind
	-search
	-unbind

There are not going to be a actual LDAP database
backend. All what happens is parsing above and reply
with some simple content based on the some parameters
from the request.

I am just wondering with using ldaptor's protocol
components I could easily come up with such a server?
What do you think, would it be feasible with that?

Thanks in advance,

AndyL




From cmoad at indiana.edu  Wed May 18 20:50:46 2005
From: cmoad at indiana.edu (Charles Moad)
Date: Wed, 18 May 2005 19:50:46 -0500
Subject: [Twisted-Python] Anyone seeing hanging of Twisted HTTPS servers?
In-Reply-To: <60ed19d4050518162434ad4c88@mail.gmail.com>
References: <428B43C0.3050104@rogers.com> <20050518135923.GO27700@frobozz>
	<428B5312.5080302@indiana.edu>
	<60ed19d4050518162434ad4c88@mail.gmail.com>
Message-ID: <30BF17EC-4950-4270-B58F-E1AB58ACC176@indiana.edu>

     I just posted to say I get this message, but I do not experience  
a hang.  Except for bloating my log, it doesn't affect anything.

-Charlie

On May 18, 2005, at 6:24 PM, Christopher Armstrong wrote:

> On 5/19/05, Charles Moad <cmoad at indiana.edu> wrote:
>
>> I am getting this same error (with the request going through fine)  
>> with
>> version 0.6 of PyOpenSSL.
>>
>
> Pretty much all Twisted https servers will get this error very often.
> It's just spurious debugging info, afaict, and we have never had any
> kind of hanging in our web app at work. I'd bet the hanging is
> something else. I suggest running 'strace -p <pid>' (or whatever the
> FreeBSD equivalent is) on the process when you know that it's hanging,
> and see what it's doing, perhaps blocking on a syscall.
>
> -- 
>   Twisted   |  Christopher Armstrong: International Man of Twistery
>    Radix    |    -- http://radix.twistedmatrix.com
>             |  Release Manager, Twisted Project
>   \\\V///   |    -- http://twistedmatrix.com
>    |o O|    |  Founding Member, Hobart Hacking Society
> w----v----w-+    -- http://hackingsociety.org/chapters/hash
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From visceras at hotmail.com  Thu May 19 08:33:27 2005
From: visceras at hotmail.com (Alberto Trujillo)
Date: Thu, 19 May 2005 12:33:27 +0000
Subject: [Twisted-Python] Using form
Message-ID: <BAY24-F18538742B64B474E1AEDC1C5080@phx.gbl>

Hello:

I'm working with twisted since a few days ago, and although I have read the 
tutorial, still I have some question about the class Request.
Well, I have implemented project.rpy that have a form and use the method 
post the send the information to commit.rpy.

<form action="commit.rpy?action=""" + action + """&type=project&id=""" + 
projid + """ method="post">
<table align="center" width="750" border="0" cellpadding="3" cellspacing="1" 
bgcolor="#353535">
      <tr>
        <td bgcolor=#FFFFFF width="30%">
          User ID
        <td>
        <td bgcolor=#FFFFFF width="70%">
          <input name='user_id' type='text' value='""" + userid + """'>
      </tr>
      <tr>
        <td bgcolor=#FFFFFF width="30%">
          Project Name
        <td>
        <td bgcolor=#FFFFFF width="70%">
          <input name='project_name' type='text' value='""" + name + """'>
      </tr>

...

</table>
</form>

This a part of my code. The problem is how can I get the information in 
commit.rpy, and why all the information that I send using the method Post, 
is attached in the URL. I don't want that.

Thank you very much.





From mcfletch at rogers.com  Thu May 19 12:20:54 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Thu, 19 May 2005 12:20:54 -0400
Subject: [Twisted-Python] Anyone seeing hanging of Twisted HTTPS servers?
In-Reply-To: <60ed19d4050518162434ad4c88@mail.gmail.com>
References: <428B43C0.3050104@rogers.com>
	<20050518135923.GO27700@frobozz>	<428B5312.5080302@indiana.edu>
	<60ed19d4050518162434ad4c88@mail.gmail.com>
Message-ID: <428CBCE6.3010005@rogers.com>

Christopher Armstrong wrote:

>On 5/19/05, Charles Moad <cmoad at indiana.edu> wrote:
>  
>
>>I am getting this same error (with the request going through fine) with
>>version 0.6 of PyOpenSSL.
>>    
>>
>
>Pretty much all Twisted https servers will get this error very often.
>It's just spurious debugging info, afaict, and we have never had any
>kind of hanging in our web app at work. I'd bet the hanging is
>something else. I suggest running 'strace -p <pid>' (or whatever the
>FreeBSD equivalent is) on the process when you know that it's hanging,
>and see what it's doing, perhaps blocking on a syscall.
>  
>
Okay, eliminates that from consideration.  Thanks all for the reports. 
BTW, I'm also running 0.6 of PyOpenSSL.

Regarding systrace, I'd love to, but so far I've not been able to catch
the dratted thing in the condition more than once or twice, and it's
normally almost finished the hang by the time I get around to working on
it.  Suppose I should just sit here watching it for a few hours, or rig
up a monitor of some form.

Thanks again, all,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From foom at fuhm.net  Thu May 19 12:50:33 2005
From: foom at fuhm.net (James Y Knight)
Date: Thu, 19 May 2005 12:50:33 -0400
Subject: [Twisted-Python] Anyone seeing hanging of Twisted HTTPS servers?
In-Reply-To: <428CBCE6.3010005@rogers.com>
References: <428B43C0.3050104@rogers.com>
	<20050518135923.GO27700@frobozz>	<428B5312.5080302@indiana.edu>
	<60ed19d4050518162434ad4c88@mail.gmail.com>
	<428CBCE6.3010005@rogers.com>
Message-ID: <C945921D-A0CD-4B91-A64B-36A356DA9E76@fuhm.net>

On May 19, 2005, at 12:20 PM, Mike C. Fletcher wrote:

> Regarding systrace, I'd love to, but so far I've not been able to  
> catch
> the dratted thing in the condition more than once or twice, and it's
> normally almost finished the hang by the time I get around to  
> working on
> it.  Suppose I should just sit here watching it for a few hours, or  
> rig
> up a monitor of some form.
>

I think it's probably more likely that it's not hanging in C code at  
all, but in a bit of application python code. What I'd do is add a  
"watchdog" timer, something like this. Of course, this won't work if  
it's blocking in a C call somewhere because the python signal handler  
won't be called until the C call returns. But even that might give  
you some useful information on what the problem is.

import signal, pdb, sys
from twisted.internet import task

def timeout(*args):
   sys.stderr.write("SIGALRM timeout, breaking into debugger.\n")
   import pdb; pdb.set_trace()

signal.signal(signal.SIGALRM, timeout)

task.LoopingCall(signal.alarm, 10).start(1)

James



From itamar at itamarst.org  Thu May 19 13:41:19 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 19 May 2005 13:41:19 -0400
Subject: [Twisted-Python] Using form
In-Reply-To: <BAY24-F18538742B64B474E1AEDC1C5080@phx.gbl>
References: <BAY24-F18538742B64B474E1AEDC1C5080@phx.gbl>
Message-ID: <1116524479.9449.27.camel@localhost.localdomain>

On Thu, 2005-05-19 at 12:33 +0000, Alberto Trujillo wrote:

> I'm working with twisted since a few days ago, and although I have read the 
> tutorial, still I have some question about the class Request.

Please ask web questions on the twisted-web mailing list.




From maitland at vanu.com  Thu May 19 13:56:31 2005
From: maitland at vanu.com (maitland at vanu.com)
Date: Thu, 19 May 2005 13:56:31 -0400
Subject: [Twisted-Python] using yield in unittest.TestCase
Message-ID: <20050519175631.GB21108@flyingdutchmen.vanu.com>

Hi all-

I've been trying to unit test some code that uses a lot of generators
and Callbacks, so I would like to be able yield my Callbacks and check
them out.  However, whenever I stick a yield in my test case (in a
subclass of trial.unittest.TestCase), the test automatically passes
and, as far as I can tell, doesn't actually get evaluated at all.

Is this a known issue?  Does anybody know of a way I can work around
it?

Thanks,
-Maitland



From exarkun at divmod.com  Thu May 19 14:43:30 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Thu, 19 May 2005 18:43:30 GMT
Subject: [Twisted-Python] using yield in unittest.TestCase
In-Reply-To: <20050519175631.GB21108@flyingdutchmen.vanu.com>
Message-ID: <20050519184330.559.213507192.divmod.quotient.4605@ohm>

On Thu, 19 May 2005 13:56:31 -0400, maitland at vanu.com wrote:
>Hi all-
>
>I've been trying to unit test some code that uses a lot of generators
>and Callbacks, so I would like to be able yield my Callbacks and check
>them out.  However, whenever I stick a yield in my test case (in a
>subclass of trial.unittest.TestCase), the test automatically passes
>and, as far as I can tell, doesn't actually get evaluated at all.
>
>Is this a known issue?  Does anybody know of a way I can work around
>it?
>

    As you're probably aware, putting a yield into a function definition turns the function into a generator function.  As you are also probably aware, calling a generator function returns a generator, but doesn't execute any code in the generator function: only when the generator is iterated is the generator function executed.


    So trial calls your test method and gets back a generator.  It doesn't know a thing about generators.  So it ignores it and moves on.  The test passes because it didn't raise an exception.

    If you're trying to use the new Deferred generator feature to use use a generator function to manipulate a Deferred, you need to decorate your test method with deferredGenerator:

        def testFoo(self):
            ...
        testFoo = deferredGenerator(testFoo)

    If you're trying to use flow, you probably shouldn't.  It's unclear to me what the path to support flow in trial is.

    If you're trying to do something else... I'm confused.

  Jp



From mcfletch at rogers.com  Thu May 19 14:57:44 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Thu, 19 May 2005 14:57:44 -0400
Subject: [Twisted-Python] Anyone seeing hanging of Twisted HTTPS servers?
In-Reply-To: <C945921D-A0CD-4B91-A64B-36A356DA9E76@fuhm.net>
References: <428B43C0.3050104@rogers.com>
	<20050518135923.GO27700@frobozz>	<428B5312.5080302@indiana.edu>
	<60ed19d4050518162434ad4c88@mail.gmail.com>
	<428CBCE6.3010005@rogers.com>
	<C945921D-A0CD-4B91-A64B-36A356DA9E76@fuhm.net>
Message-ID: <428CE1A8.901@rogers.com>

James Y Knight wrote:
...

> I think it's probably more likely that it's not hanging in C code at
> all, but in a bit of application python code. What I'd do is add a
> "watchdog" timer, something like this. Of course, this won't work if
> it's blocking in a C call somewhere because the python signal handler
> won't be called until the C call returns. But even that might give you
> some useful information on what the problem is.
>
> import signal, pdb, sys
> from twisted.internet import task
>
> def timeout(*args):
> sys.stderr.write("SIGALRM timeout, breaking into debugger.\n")
> import pdb; pdb.set_trace()
>
> signal.signal(signal.SIGALRM, timeout)
>
> task.LoopingCall(signal.alarm, 10).start(1)

That's really nice. However, it seems that the alarm handler drops into
the database thread, rather than the foreground thread. Still, it does
make it possible to simply log the heck out of everything and force an
exit of the whole application to see where in the log it's stopping.

Thanks,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From maitland at vanu.com  Thu May 19 15:12:58 2005
From: maitland at vanu.com (maitland at vanu.com)
Date: Thu, 19 May 2005 15:12:58 -0400
Subject: [Twisted-Python] using yield in unittest.TestCase
In-Reply-To: <20050519184330.559.213507192.divmod.quotient.4605@ohm>
References: <20050519175631.GB21108@flyingdutchmen.vanu.com>
	<20050519184330.559.213507192.divmod.quotient.4605@ohm>
Message-ID: <20050519191258.GA24128@flyingdutchmen.vanu.com>

Jp-

That makes sense.  I'm using flow, so maybe I see if I can port over
to deferredGenerators.

Thanks,
-Maitland

On Thu, May 19, 2005 at 06:43:30PM +0000, Jp Calderone wrote:
> On Thu, 19 May 2005 13:56:31 -0400, maitland at vanu.com wrote:
> >Hi all-
> >
> >I've been trying to unit test some code that uses a lot of generators
> >and Callbacks, so I would like to be able yield my Callbacks and check
> >them out.  However, whenever I stick a yield in my test case (in a
> >subclass of trial.unittest.TestCase), the test automatically passes
> >and, as far as I can tell, doesn't actually get evaluated at all.
> >
> >Is this a known issue?  Does anybody know of a way I can work around
> >it?
> >
> 
>    As you're probably aware, putting a yield into a function definition 
>    turns the function into a generator function.  As you are also probably 
>    aware, calling a generator function returns a generator, but doesn't 
>    execute any code in the generator function: only when the generator is 
>    iterated is the generator function executed.
> 
> 
>    So trial calls your test method and gets back a generator.  It doesn't 
>    know a thing about generators.  So it ignores it and moves on.  The test 
>    passes because it didn't raise an exception.
> 
>    If you're trying to use the new Deferred generator feature to use use a 
>    generator function to manipulate a Deferred, you need to decorate your 
>    test method with deferredGenerator:
> 
>        def testFoo(self):
>            ...
>        testFoo = deferredGenerator(testFoo)
> 
>    If you're trying to use flow, you probably shouldn't.  It's unclear to 
>    me what the path to support flow in trial is.
> 
>    If you're trying to do something else... I'm confused.
> 
>  Jp
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From tv at twistedmatrix.com  Thu May 19 15:15:09 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu, 19 May 2005 22:15:09 +0300
Subject: [Twisted-Python] ldaptor based LDAP server
In-Reply-To: <20050518234435.24622.qmail@web30502.mail.mud.yahoo.com>
References: <20050518234435.24622.qmail@web30502.mail.mud.yahoo.com>
Message-ID: <428CE5BD.3030608@twistedmatrix.com>

Andrzej Leszczynski wrote:
> I am looking for a Python barebones for a simple LDAP
> server project. It does not have to be Twisted based,
> but it would be wonderful if it is. I need a very
> simple server which is listening on some port and
> accepts following LDAP messages:
> 	-bind
> 	-search
> 	-unbind

Well, ldaptor/protocols/ldap/ldapserver.py is for you then.

> There are not going to be a actual LDAP database
> backend. All what happens is parsing above and reply
> with some simple content based on the some parameters
> from the request.
> 
> I am just wondering with using ldaptor's protocol
> components I could easily come up with such a server?
> What do you think, would it be feasible with that?

If you want to reuse ldaptor search logic, search filter
handling, etc, subclass LDAPServer and provide an
IConnectedLDAPEntry adapter from the subclass to something
that implements the actual data storage. That way, you get
to use ldaptor's implementation of search etc; you just
provide a tree-like data structure of LDAP entries.

If you want full control of everything, and are willing
to really implement bind,search&unbind yourself pretty
much from scratch, subclass BaseLDAPServer and provide
methods
  handle_LDAPBindRequest
  handle_LDAPSearchRequest
  handle_LDAPUnbindRequest
see LDAPServer for hints on that.



From thomas at apestaart.org  Fri May 20 12:36:55 2005
From: thomas at apestaart.org (Thomas Vander Stichele)
Date: Fri, 20 May 2005 18:36:55 +0200
Subject: [Twisted-Python] twisted and network condition testing
Message-ID: <1116607015.26257.17.camel@otto.amantes>

Hi,

While working on Flumotion I've realized there are quite a few
conditions in real-life networks that I need to deal with and my
experience is fairly limited.  What can I say, I lived in a perfect
world before :)

All sorts of things trip up our application: machine lockups (where the
other end doesn't realize the connection is broken), temporary routing
problems, adsl connections being dropped, ...

After doing a lot of ad-hoc hacking to solve all those issues, I've
realized I'd better work on my understanding of the problem first, and
see how twisted behaves under these conditions, and what can be done.

I'm sure other people writing networked apps have gone through similar
issues, so what I'd like to know is:

- are there any good resources that explain all of the things that could
go wrong, what sort of conditions are similar (e.g. I assume you can use
iptables rules to simulate routing problems), which I need to worry
about, ... Any good networking overview book I should be taking to
heart ?
- have people done this sort of thing with Twisted ?
- are there any tools people are familiar with to simulate networking
problems ? In the case of machine lockup, my best idea right now for
example is to actually have a vmware virtual host lock up its kernel
with a silly kernel module.

Any help is appreciated,
Thomas

Dave/Dina : future TV today ! - http://www.davedina.org/
<-*- thomas (dot) apestaart (dot) org -*->
Another Love Song
That is written
Still nothing said
<-*- thomas (at) apestaart (dot) org -*->
URGent, best radio on the net - 24/7 ! - http://urgent.fm/






From npk.gangadhar at gmail.com  Fri May 20 13:59:01 2005
From: npk.gangadhar at gmail.com (Gangadhar NPK)
Date: Fri, 20 May 2005 23:29:01 +0530
Subject: [Twisted-Python] Twistd thread problem
In-Reply-To: <9c78c12df892cc1b36503f8f3b12cc0e@ezabel.com>
References: <428931B0.5060901@crm3.com>
	<9c78c12df892cc1b36503f8f3b12cc0e@ezabel.com>
Message-ID: <61b4e70f0505201059551003b1@mail.gmail.com>

All,
I am still trying to get a grip of what Twisted is and how to use it.
So my opinions might not be completely accurate.
But, this is not regarding Twisted anycase.
Orbitz, can you please state why do you think it is not a good idea to
use a worker thread. If the OP wanted to create a high volume SMTP
proxy with each worker thread handling every invocation from the smtp
client (smtplib in this case), then don't you think this can scale
better than a single thread, wherein the remaining clients are waiting
in the wait queue (if something like that exists, am not sure about
that) while one smtp data transfer is being done.
Also, if the OP chose to use a master-servant model wherein the master
thread keeps a tab on each of the worker thread to see the status and
(may be) notify the user (via a ui) of the status, the thread model
will work ?
Please share your thoughts on this.
Thank You
Gangadhar

On 5/18/05, orbitz at ezabel.com <orbitz at ezabel.com> wrote:
> If your making a proxy you shouldn't a queue or worker threads.  Just
> connect to the destination and send your incoming data to it and it's
> outgoing data back to the client.  This can all be done in one thread.
> Even if you don't do it like this you also don't need a thread to send
> the data, sending smtp is fairly trivial you can do it by hand, or use
> the smtp client that comes with twisted (might as well learn sometime).
> 
> On May 16, 2005, at 7:50 PM, Jan Van Uytven wrote:
> 
> > Hi all,
> >
> > I coded an SMTP proxy that receives incoming e-mail requests and
> > pushes the received e-mail onto a Queue were it is processed by a
> > worker thread that finishes by sending the e-mail on to another SMTP
> > server.
> >
> > The server part of the proxy was written in Twisted, but the worker
> > thread uses smtplib to fire off the processed e-mails (I didn't know
> > how to use the twisted smtp client in a thread).
> >
> > When I run the application using twistd -noy <appname>, it works
> > great. When I try to daemonize it (twistd -oy <appname>) the server
> > part works, but the worker thread doesn't. It creates and then I
> > suspect it immediately dies, as no error is returned upon creation. A
> > debug of the queue reveals that the thread is not pulling items off
> > it. A debugging statement placed at the top of the thread never runs,
> > and the twistd log reports nothing wrong. I'm using
> > reactor.callInThread to start the worker function.
> >
> > I tried running twistd --spew -oy <appname> and captured the log it
> > produced. I did a filter for anything with 'thread' in it, this is the
> > result:
> >
> > 2005/05/16 09:15 PDT [-] function ? in
> > /usr/lib/python2.3/site-packages/twisted/python/threadpool.py, line 11
> > 2005/05/16 09:15 PDT [-] function WorkerStop in
> > /usr/lib/python2.3/site-packages/twisted/python/threadpool.py, line 23
> > 2005/05/16 09:15 PDT [-] function init in
> > /usr/lib/python2.3/site-packages/twisted/python/threadable.py, line
> > 219
> > 2005/05/16 09:15 PDT [-] function ThreadPool in
> > /usr/lib/python2.3/site-packages/twisted/python/threadpool.py, line 31
> > 2005/05/16 09:15 PDT [-] function ThreadSafeList in
> > /usr/lib/python2.3/site-packages/twisted/python/threadpool.py, line
> > 199
> > 2005/05/16 09:15 PDT [-] function init in
> > /usr/lib/python2.3/site-packages/twisted/python/threadable.py, line
> > 219
> > 2005/05/16 09:15 PDT [-] method __init__ of
> > twisted.python.threadpool.ThreadPool at -1216569236
> > 2005/05/16 09:15 PDT [-] method start of
> > twisted.python.threadpool.ThreadPool at -1216569236
> > 2005/05/16 09:15 PDT [-] method adjustPoolsize of
> > twisted.python.threadpool.ThreadPool at -1216569236
> > 2005/05/16 09:15 PDT [-] method _startSomeWorkers of
> > twisted.python.threadpool.ThreadPool at -1216569236
> > 2005/05/16 09:15 PDT [-] method callInThread of
> > twisted.python.threadpool.ThreadPool at -1216569236
> > 2005/05/16 09:15 PDT [-] method _startSomeWorkers of
> > twisted.python.threadpool.ThreadPool at -1216569236
> > 2005/05/16 09:15 PDT [-] method startAWorker of
> > twisted.python.threadpool.ThreadPool at -1216569236
> > 2005/05/16 09:15 PDT [-] method __init__ of threading.Thread at
> > -1216568116
> > 2005/05/16 09:15 PDT [-] method __init__ of threading.Thread at
> > -1216568116
> > 2005/05/16 09:15 PDT [-] method _set_daemon of threading.Thread at
> > -1216568116
> > 2005/05/16 09:15 PDT [-] function currentThread in
> > /usr/lib/python2.3/threading.py, line 669
> > 2005/05/16 09:15 PDT [-] method isDaemon of threading._MainThread at
> > -1214935060
> > 2005/05/16 09:15 PDT [-] function Condition in
> > /usr/lib/python2.3/threading.py, line 147
> > 2005/05/16 09:15 PDT [-] method __init__ of threading._Condition at
> > -1216567604
> > 2005/05/16 09:15 PDT [-] method __init__ of threading._Condition at
> > -1216567604
> > 2005/05/16 09:15 PDT [-] method start of threading.Thread at
> > -1216568116
> > 2005/05/16 09:15 PDT [-] method _note of threading.Thread at
> > -1216568116
> > 2005/05/16 09:15 PDT [-] method run of threading.Thread at -1216568116
> > 2005/05/16 09:15 PDT [-] method _worker of
> > twisted.python.threadpool.ThreadPool at -1216569236
> > 2005/05/16 09:15 PDT [-] function currentThread in
> > /usr/lib/python2.3/threading.py, line 669
> > 2005/05/16 09:15 PDT [-] function threadMailer in twisted-copyuser.py,
> > line 201
> > 2005/05/16 09:15 PDT [-] method acquire of
> > twisted.python.threadable._XLock at -1216639284
> > 2005/05/16 09:15 PDT [-] method release of
> > twisted.python.threadable._XLock at -1216639284
> > 2005/05/16 09:15 PDT [-] method acquire of
> > twisted.python.threadable._XLock at -1216639284
> > 2005/05/16 09:15 PDT [-] method release of
> > twisted.python.threadable._XLock at -1216639284
> > 2005/05/16 09:15 PDT [-] method acquire of
> > twisted.python.threadable._XLock at -1216639284
> > 2005/05/16 09:15 PDT [-] method release of
> > twisted.python.threadable._XLock at -1216639284
> > 2005/05/16 09:15 PDT [-] function registerAsIOThread in
> > /usr/lib/python2.3/site-packages/twisted/python/threadable.py, line
> > 262
> >
> > Why would the worker thread act differently with twistd daemonized?
> > Any suggestions, advice, or hints would be welcome.
> >
> > Thanks,
> >
> > Jan
> >
> > --
> > Jan Van Uytven
> > Computer Systems & Network Engineer
> > Convergent Media Network
> > wyvern at crm3.com
> >
> > Only in silence the word,
> > only in dark the light,
> > only in dying life:
> > Bright the hawk's flight on the empty sky.
> >
> > - Ursula K. LeGuin, 'A Wizard of Earthsea'
> >
> > *** LEGAL STUFF ***
> > This electronic message transmission, including any attached files,
> > contains information which may be confidential and/or privileged.
> > The information is intended to be for the SOLE use of the individual
> > or entity named above. If you are not the intended recipient, be aware
> > that any review, disclosure, copying, distribution or use of the
> > contents of this information is prohibited. This message is not to be
> > forwarded for any reason without prior consent of the sender.
> > If you have received this electronic transmission in error, please
> > notify the sender immediately by telephone (250) 386-4266 or by a
> > 'reply to sender' only message and destroy all electronic and hard
> > copies of the communication, including attachments, without reading or
> > saving in any manner.
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From npk.gangadhar at gmail.com  Fri May 20 14:09:40 2005
From: npk.gangadhar at gmail.com (Gangadhar NPK)
Date: Fri, 20 May 2005 23:39:40 +0530
Subject: [Twisted-Python] Alarm collection and display system?
In-Reply-To: <428BD081.7050103@divmod.com>
References: <ir4u0l0l7c0.fsf@minos.phy.bnl.gov> <428BD081.7050103@divmod.com>
Message-ID: <61b4e70f05052011094a078865@mail.gmail.com>

Hi Brett,
Let me restate the problem (in an oversimplified way, sorry about that)
 - the ability for disparate systems scattered across the network to
push messages to interested consumers distributed across the network
in a (near) real-time fashion.
Did I get it right ?
If that is the case, then as Glyph suggested, keep your consumers
available to get messages from the producers.
As an aside, can you share how you plan to go about creating a
distributed subscription service - I mean, how do the consumers
provide information for producers to know about the subscription
status. If you think it is not right to send to the list, can you
atleast (if possible) mail me atleast.
Thank You
Gangadhar


On 5/19/05, Glyph Lefkowitz <glyph at divmod.com> wrote:
> Brett Viren wrote:
> 
> > We want to centralize these alarms and then serve them to one or more
> > consumers.  Ideally alarms are "pushed" to consumers rather than
> > needing to poll so as to minimize latency between production and
> > consumption.  But, because some consumers will be behind firewalls the
> > consumers should initiate the connection.
> >
> > Anything already fit this bill or come close?  If we do end up rolling
> > our own, any suggestions to get us started in the right direction?
> 
> The obvious solution is just to roll your own and keep sockets always
> open from the consumers behind firewalls, and push notifications down
> those channels.
> 
> I'm also working on something like this, a protocol called "Q2Q", but
> it's heavily in development now so I wouldn't suggest it if you have any
> deadlines.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From Henning.Ramm at mediapro-gmbh.de  Fri May 20 14:54:57 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Fri, 20 May 2005 20:54:57 +0200
Subject: [Twisted-Python] Alarm collection and display system?
Message-ID: <F92274058556DE42B94B148EEFB9183949E6EA@exchange-03.suedkurier.de>

>Let me restate the problem (in an oversimplified way, sorry about that)
> - the ability for disparate systems scattered across the network to
>push messages to interested consumers distributed across the network
>in a (near) real-time fashion.

I thought about using chat clients (IRC, twisted.words or the like) for that purpose, so that...
- all error "producers" can just send messages to an chat server
- all interested users just start their chat client
- different workflows (= different interested people) could just use different channels ("rooms")
- someone who will handle a problem could just type "I'll handle that", avoiding several people jumping without knowing of each other
- people who aren't at work don't get flooded with error mails (like we have it today)

Perhaps one must enhance a chat software to handle special messages in a special way.


Best regards,
Henning Hraban Ramm
S?dkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From bv at bnl.gov  Fri May 20 14:58:30 2005
From: bv at bnl.gov (Brett Viren)
Date: Fri, 20 May 2005 14:58:30 -0400
Subject: [Twisted-Python] Alarm collection and display system?
In-Reply-To: <61b4e70f05052011094a078865@mail.gmail.com> (Gangadhar NPK's
	message of "Fri, 20 May 2005 23:39:40 +0530")
References: <ir4u0l0l7c0.fsf@minos.phy.bnl.gov> <428BD081.7050103@divmod.com>
	<61b4e70f05052011094a078865@mail.gmail.com>
Message-ID: <ir4u0kxenc9.fsf@minos.phy.bnl.gov>

Gangadhar NPK <npk.gangadhar at gmail.com> writes:

> Hi Brett,
> Let me restate the problem (in an oversimplified way, sorry about that)
>  - the ability for disparate systems scattered across the network to
> push messages to interested consumers distributed across the network
> in a (near) real-time fashion.
> Did I get it right ?

Yep, exactly.

> If that is the case, then as Glyph suggested, keep your consumers
> available to get messages from the producers.

Yes, sage advice.  

> As an aside, can you share how you plan to go about creating a
> distributed subscription service - I mean, how do the consumers
> provide information for producers to know about the subscription
> status.

The idea was to *not* distribute the subscription service, but rather
to centralize it into a single, well known, server, (actually, a
"proxy server" might be the more proper term).  All producers deliver
messages to this single proxy which then delivers them to any
connected consumers.  The producers don't know or care who the
consumers are.  Very simple (I hope).

My first choice would be to use XML-RPC for the protocol.  Since there
are a plethora of XML-RPC implementations it should make it easier to
glue in this protocol to the disparate producers.

-Brett.



From theshz at gmail.com  Fri May 20 19:04:50 2005
From: theshz at gmail.com (theshz)
Date: Fri, 20 May 2005 16:04:50 -0700
Subject: [Twisted-Python] how to write an interactive client?
References: <ir4u0l0l7c0.fsf@minos.phy.bnl.gov>
	<428BD081.7050103@divmod.com><61b4e70f05052011094a078865@mail.gmail.com>
	<ir4u0kxenc9.fsf@minos.phy.bnl.gov>
Message-ID: <001201c55d90$546f6ef0$800101df@sv.us.sonicwall.com>

Hi, I've written a simple twisted server, which accepts client connections,
and respond with some simple text depending on what the client sends. This
is working fine if I use telnet to connect to the server, and enter the
commands one at a time. I'd like to write a twisted client to simulate this,
i.e., the client has a list of commands to send, it will send one at a time,
(may be wait a little bit between the commands,) and print out the responses
from the server. I couldn't seem to get beyond the first command, following
code seems to send all the commands at the end, rather than one at a time,
how can I add sleep in between? Thanks:

from twisted.internet.protocol import ReconnectingClientFactory
from twisted.protocols import basic
from twisted.internet import reactor
from sys import stdout
import time

class MyClientProtocol(basic.LineReceiver):
 def lineReceived(self,data):
  stdout.write("Server:" + data+"\n"),

 def connectionMade(self):
      stdout.write("connectionMade\n")
      self.transport.write("start:\r\n")
      self.transport.write("command1:\r\n")
      self.transport.write("command2:\r\n")
      self.transport.write("command3:\r\n")
      self.transport.write("end:\r\n")


class MyClientFactory(ReconnectingClientFactory):
 def startedConnecting(self, connector):
  stdout.write("Started to connect\n")

 def buildProtocol(self,addr):
  stdout.write("Connected\nResetting reconnection delay")
  self.resetDelay()
  return MyClientProtocol()

 def clientConnectionLost(self, connector, reason):
  stdout.write("Lost connection, reason:" + reason)
  ReconnectingClientFactory.clientConnectionList(self, connector, reason)

 def clientConnectionFailed(self, connector,reason):
  stdout.write("Connection failed, reason:" + reason)
  ReconnectingClientFactory.clientConnectionFailed(self, connector, reason)

def main():
 reactor.connectTCP("localhost",82828, MyClientFactory())
 reactor.run()

if __name__ == '__main__':
 main()




From exarkun at divmod.com  Fri May 20 19:26:00 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 20 May 2005 23:26:00 GMT
Subject: [Twisted-Python] how to write an interactive client?
In-Reply-To: <001201c55d90$546f6ef0$800101df@sv.us.sonicwall.com>
Message-ID: <20050520232600.559.607604854.divmod.quotient.5672@ohm>

On Fri, 20 May 2005 16:04:50 -0700, theshz <theshz at gmail.com> wrote:
>Hi, I've written a simple twisted server, which accepts client connections,
>and respond with some simple text depending on what the client sends. This
>is working fine if I use telnet to connect to the server, and enter the
>commands one at a time. I'd like to write a twisted client to simulate this,
>i.e., the client has a list of commands to send, it will send one at a time,
>(may be wait a little bit between the commands,) and print out the responses
>from the server. I couldn't seem to get beyond the first command, following
>code seems to send all the commands at the end, rather than one at a time,
>how can I add sleep in between? Thanks:
>
>from twisted.internet.protocol import ReconnectingClientFactory
>from twisted.protocols import basic
>from twisted.internet import reactor
>from sys import stdout
>import time
>
>class MyClientProtocol(basic.LineReceiver):
> def lineReceived(self,data):
>  stdout.write("Server:" + data+"\n"),
>
> def connectionMade(self):
>      stdout.write("connectionMade\n")
>      self.transport.write("start:\r\n")
>      self.transport.write("command1:\r\n")
>      self.transport.write("command2:\r\n")
>      self.transport.write("command3:\r\n")
>      self.transport.write("end:\r\n")
>

  Try this version of connectionMade, along with this definition of lineReceived:

    lines = ["command1", "command2", "command3", "end"]
    def connectionMade(self):
        print "connectionMade"
        self.lines = self.lines[:]
        self.sendLine("start:")

    def lineReceived(self, line):
        print "Got a line:", repr(line)
        if self.lines:
            self.sendLine(self.lines.pop(0) + ":")

  Of course, there are other ways to do this.  You could respond to timing events instead of network events:

    lines = ["command1", "command2", "command3", "end"]
    def connectionMade(self):
        print "connectionMade"
        self.lines = self.lines[:]
        self.sendCommand()

    def sendCommand(self):
        self.sendLine(self.lines.pop(0) + ":")
        if self.lines:
            reactor.callLater(3, self.sendCommand)

  Or you could respond to events from stdin, or from another connected protocol, or a GUI, or ....

  Hope this helps,

  Jp



From radeex at gmail.com  Sat May 21 04:29:47 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Sat, 21 May 2005 18:29:47 +1000
Subject: [Twisted-Python] Twistd thread problem
In-Reply-To: <61b4e70f0505201059551003b1@mail.gmail.com>
References: <428931B0.5060901@crm3.com>
	<9c78c12df892cc1b36503f8f3b12cc0e@ezabel.com>
	<61b4e70f0505201059551003b1@mail.gmail.com>
Message-ID: <60ed19d40505210129bd98eb6@mail.gmail.com>

On 5/21/05, Gangadhar NPK <npk.gangadhar at gmail.com> wrote:
> Orbitz, can you please state why do you think it is not a good idea to
> use a worker thread. If the OP wanted to create a high volume SMTP
> proxy with each worker thread handling every invocation from the smtp
> client (smtplib in this case), then don't you think this can scale
> better than a single thread, wherein the remaining clients are waiting
> in the wait queue (if something like that exists, am not sure about
> that) while one smtp data transfer is being done.
> Also, if the OP chose to use a master-servant model wherein the master
> thread keeps a tab on each of the worker thread to see the status and
> (may be) notify the user (via a ui) of the status, the thread model
> will work ?

There's no reason to use a thread because all network I/O is
non-blocking in Twisted. There is no "wait queue"; as soon as you
write data to the transport, it either gets sent immediately or
buffered and execution continues on. There's no performance reason to
use a thread and it just complicates things when you can use the
non-blocking SMTP code.

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From nico at tekNico.net  Sat May 21 15:32:48 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Sat, 21 May 2005 21:32:48 +0200
Subject: [Twisted-Python] Re: Anyone seeing hanging of Twisted HTTPS servers?
In-Reply-To: <60ed19d4050518162434ad4c88@mail.gmail.com>
References: <428B43C0.3050104@rogers.com>
	<20050518135923.GO27700@frobozz>	<428B5312.5080302@indiana.edu>
	<60ed19d4050518162434ad4c88@mail.gmail.com>
Message-ID: <428F8CE0.4040200@tekNico.net>

>> I am getting this same error (with the request going through fine) with
>> version 0.6 of PyOpenSSL.

> Pretty much all Twisted https servers will get this error very often.
> It's just spurious debugging info, afaict,

In fact, any old garbage goes to any SSL protected port, you get this nasty
traceback in the logs. Really has to go, patch included:


--- trunk/twisted/internet/tcp.py       2005-05-06 23:17:03.000000000 +0200
+++ trunk-mod/twisted/internet/tcp.py   2005-05-21 21:29:10.000000000 +0200
@@ -125,7 +125,7 @@
             log.err()
             return main.CONNECTION_LOST
         except SSL.Error:
-            log.err()
+#            log.err()
             return main.CONNECTION_LOST

     def doWrite(self):


-- 
Nicola Larosa - nico at tekNico.net

How can I in five minutes shift a lifetime's hidden pain?
 -- Julia Fordham, Girlfriend, Porcelain, 1989




From npk.gangadhar at gmail.com  Sat May 21 15:40:44 2005
From: npk.gangadhar at gmail.com (Gangadhar NPK)
Date: Sun, 22 May 2005 01:10:44 +0530
Subject: [Twisted-Python] Alarm collection and display system?
In-Reply-To: <ir4u0kxenc9.fsf@minos.phy.bnl.gov>
References: <ir4u0l0l7c0.fsf@minos.phy.bnl.gov> <428BD081.7050103@divmod.com>
	<61b4e70f05052011094a078865@mail.gmail.com>
	<ir4u0kxenc9.fsf@minos.phy.bnl.gov>
Message-ID: <61b4e70f050521124066d948f2@mail.gmail.com>

So this is a subscription model, with a single point aggregator right ?
The *proxy* aggregates the messages from the producers, while the
consumers subscribe with the proxy regarding the message(s) they are
interested in and the messages are pushed to them by the proxy.

On 5/21/05, Brett Viren <bv at bnl.gov> wrote:
> Gangadhar NPK <npk.gangadhar at gmail.com> writes:
> 
> > Hi Brett,
> > Let me restate the problem (in an oversimplified way, sorry about that)
> >  - the ability for disparate systems scattered across the network to
> > push messages to interested consumers distributed across the network
> > in a (near) real-time fashion.
> > Did I get it right ?
> 
> Yep, exactly.
> 
> > If that is the case, then as Glyph suggested, keep your consumers
> > available to get messages from the producers.
> 
> Yes, sage advice.
> 
> > As an aside, can you share how you plan to go about creating a
> > distributed subscription service - I mean, how do the consumers
> > provide information for producers to know about the subscription
> > status.
> 
> The idea was to *not* distribute the subscription service, but rather
> to centralize it into a single, well known, server, (actually, a
> "proxy server" might be the more proper term).  All producers deliver
> messages to this single proxy which then delivers them to any
> connected consumers.  The producers don't know or care who the
> consumers are.  Very simple (I hope).
> 
> My first choice would be to use XML-RPC for the protocol.  Since there
> are a plethora of XML-RPC implementations it should make it easier to
> glue in this protocol to the disparate producers.
> 
> -Brett.
>



From james at delx.cjb.net  Sat May 21 22:37:36 2005
From: james at delx.cjb.net (James Bunton)
Date: Sun, 22 May 2005 12:37:36 +1000
Subject: [Twisted-Python] epoll reactor
Message-ID: <7de0074150447caff309f6515f7d08ac@delx.cjb.net>

Hi all

I've implemented an epoll reactor using the level triggered mechanism.
Please check it out and let me know if there's anything I've done wrong.
This is the first time I've played with twisted reactor internals 
before. :)

http://msn-transport.jabberstudio.org/tarballs/epoll-0.1.tar.gz

There's a README file in the tarball with instructions on setting it up.

Enjoy! :)

---

James




From boomberschloss at yahoo.com  Sun May 22 11:46:46 2005
From: boomberschloss at yahoo.com (Joachim Boomberschloss)
Date: Sun, 22 May 2005 08:46:46 -0700 (PDT)
Subject: [Twisted-Python] cleanup in twisted
Message-ID: <20050522154646.64757.qmail@web53101.mail.yahoo.com>

Hi!

I just jotted down a little mechanism for cleaning-up
in Twisted, and I wanted to see if:
1. other people think it's needed
2. other people manage to use it

What this does is enable one to define a __cleanup__
method which gets call either when the instance is
deleted, or when the reactor shuts down. It can return
a dereffed that delays the shutdown. The benefit is
being able to define communication-related stuff in
the cleanup method, which is not so useful to do in
__del__.

The current implementation uses pyDispatcher, but it
could easily be rewritten without it.

Feedback is welcomed!

Joe.

#----------------------------------------------------------------------------------------------------

from twisted.internet import reactor, defer, task

from dispatch import dispatcher, robustapply

#----------------------------------------------------------------------------------------------------

class CleanUpper:

	# our pydispatcher cleanup event
	ABOUT_TO_SHUTDOWN = "*about to shutdown*"

	def __init__(self):
		self._deferreds_to_wait_for_before_shutdown = []

		# register with twisted a special callback that
		# fires a pydispatcher event.
		reactor.addSystemEventTrigger('before', 'shutdown',
self._shutdown_handler)

	def _shutdown_handler(self):
		"""this simply dispatches a pydispatcher event"""
		results = dispatcher.send(
			signal = self.ABOUT_TO_SHUTDOWN,
			sender = self)
		# any deferred registered by cleanup handlers should
be waited for
		dl = defer.DeferredList([response for handler,
response in results if isinstance(response,
defer.Deferred)])
		return dl

	# PUBLIC METHODS
--------------------------------------------------------------------------

	def register(self, functionToRunBeforeShutdown):
		"""makes the given function get called prior to
communication infrastructure shutdown"""
		# register the given function with pydispatcher
		dispatcher.connect(
			functionToRunBeforeShutdown,
			signal = self.ABOUT_TO_SHUTDOWN,
			sender = self)

#----------------------------------------------------------------------------------------------------

# create an instance of CleanUpper
# and make its register method global
_c = CleanUpper()
register = _c.register
unregister = _c.unregister

#----------------------------------------------------------------------------------------------------

class Cleanuppable:
	""" Inherit from this if you want to do your cleanup
before
	    Twisted shuts down and not (only) when you get
deleted.
	    If you inherit from this do not implement
__del__, only
	    __cleanup__!
	"""

	def __init__(self):
		self._cleanuppable_state = "normal"		# normal,
deleted, or cleanupped
		self._cleanuppable_deferred = None
		# register cleanup method
	
register(self._cleanuppable_internal_cleanup_handler)

	def _cleanuppable_apply_cleanup(self):
		if hasattr(self, "__cleanup__"):
			# call user-defined cleanup method
			return robustapply.robustApply(self.__cleanup__)

	def _cleanuppable_internal_cleanup_handler(self):
		try:
			if self._cleanuppable_state == "normal":
				return self._cleanuppable_apply_cleanup()
			if self._cleanuppable_state == "deleted" and
self._cleanuppable_deferred is not None:
				return self._cleanuppable_deferred
		finally:
			self._cleanuppable_state = "cleanupped"

	def __del__(self):
		if self._cleanuppable_state == "normal":
			self._cleanuppable_state = "deleted"
			response = self._cleanuppable_apply_cleanup()
			if isinstance(response, defer.Deferred):
				self._cleanuppable_deferred = response

#----------------------------------------------------------------------------------------------------


__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From bob at redivi.com  Sun May 22 12:10:33 2005
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 22 May 2005 09:10:33 -0700
Subject: [Twisted-Python] cleanup in twisted
In-Reply-To: <20050522154646.64757.qmail@web53101.mail.yahoo.com>
References: <20050522154646.64757.qmail@web53101.mail.yahoo.com>
Message-ID: <0FF4E1D9-11BA-47E1-8385-5B4D98191480@redivi.com>


On May 22, 2005, at 8:46 AM, Joachim Boomberschloss wrote:

> I just jotted down a little mechanism for cleaning-up
> in Twisted, and I wanted to see if:
> 1. other people think it's needed
> 2. other people manage to use it
>
> What this does is enable one to define a __cleanup__
> method which gets call either when the instance is
> deleted, or when the reactor shuts down. It can return
> a dereffed that delays the shutdown. The benefit is
> being able to define communication-related stuff in
> the cleanup method, which is not so useful to do in
> __del__.

This is just begging for object leaks, because __del__ disables  
aspects of cyclic GC.

-bob




From exarkun at divmod.com  Sun May 22 12:25:56 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sun, 22 May 2005 16:25:56 GMT
Subject: [Twisted-Python] cleanup in twisted
In-Reply-To: <0FF4E1D9-11BA-47E1-8385-5B4D98191480@redivi.com>
Message-ID: <20050522162556.559.97287833.divmod.quotient.7085@ohm>

On Sun, 22 May 2005 09:10:33 -0700, Bob Ippolito <bob at redivi.com> wrote:
>
>On May 22, 2005, at 8:46 AM, Joachim Boomberschloss wrote:
>>I just jotted down a little mechanism for cleaning-up
>>in Twisted, and I wanted to see if:
>>1. other people think it's needed
>>2. other people manage to use it
>>
>>What this does is enable one to define a __cleanup__
>>method which gets call either when the instance is
>>deleted, or when the reactor shuts down. It can return
>>a dereffed that delays the shutdown. The benefit is
>>being able to define communication-related stuff in
>>the cleanup method, which is not so useful to do in
>>__del__.
>
>This is just begging for object leaks, because __del__ disables  aspects of 
>cyclic GC.
>


>From the posted code:

    class Cleanuppable:
        """ Inherit from this if you want to do your cleanup before
        Twisted shuts down and not (only) when you get deleted.
        If you inherit from this do not implement __del__, only
        __cleanup__!
        """

Jp



From bob at redivi.com  Sun May 22 12:40:27 2005
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 22 May 2005 09:40:27 -0700
Subject: [Twisted-Python] cleanup in twisted
In-Reply-To: <20050522162556.559.97287833.divmod.quotient.7085@ohm>
References: <20050522162556.559.97287833.divmod.quotient.7085@ohm>
Message-ID: <05C963DF-8E3D-4E8D-A5C9-F1819D237F01@redivi.com>


On May 22, 2005, at 4:25 PM, Jp Calderone wrote:

> On Sun, 22 May 2005 09:10:33 -0700, Bob Ippolito <bob at redivi.com>  
> wrote:
>
>>
>> On May 22, 2005, at 8:46 AM, Joachim Boomberschloss wrote:
>>
>>> I just jotted down a little mechanism for cleaning-up
>>> in Twisted, and I wanted to see if:
>>> 1. other people think it's needed
>>> 2. other people manage to use it
>>>
>>> What this does is enable one to define a __cleanup__
>>> method which gets call either when the instance is
>>> deleted, or when the reactor shuts down. It can return
>>> a dereffed that delays the shutdown. The benefit is
>>> being able to define communication-related stuff in
>>> the cleanup method, which is not so useful to do in
>>> __del__.
>>>
>>
>> This is just begging for object leaks, because __del__ disables   
>> aspects of cyclic GC.
>>
>>
>
>
>
>> From the posted code:
>>
>
>    class Cleanuppable:
>        """ Inherit from this if you want to do your cleanup before
>        Twisted shuts down and not (only) when you get deleted.
>        If you inherit from this do not implement __del__, only
>        __cleanup__!
>        """

It says do not implement __del__ because it implements __del__.

UTSL :)

-bob




From gmcdonald at infocomp.com  Sun May 22 20:34:03 2005
From: gmcdonald at infocomp.com (Grant McDonald)
Date: Mon, 23 May 2005 10:34:03 +1000
Subject: [Twisted-Python] Zope interfaces
Message-ID: <61DA7719C45FD31185280008C733EF6E04AC4D88@XCHANGE>

Hi All,
 
I have just tried running my 1.3.0 application in 2.0.0 (rc2 I think?) and I
received the following message:
 
    raise ImportError, "you need zope.interface installed
(http://zope.org/Products/ZopeInterface/)"
ImportError: you need zope.interface installed (
http://zope.org/Products/ZopeInterface/
<http://zope.org/Products/ZopeInterface/> )
 
>From this I understand that I need to install zope interfaces even if I
don't use them, is that correct? (I imagine this is because other code in
twisted uses them)
 
___________________________________________
Grant McDonald                       InfoComp Pty Ltd
Programmer                           Level 1, 63 Market St, Wollongong 
 
Ph: (+61) 2 4298 9100
Fax: (+61) 2 4298 9199
Email: gmcdonald at infocomp.com 
___________________________________________
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050523/e5c84c72/attachment.htm 

From bob at redivi.com  Sun May 22 20:55:23 2005
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 22 May 2005 17:55:23 -0700
Subject: [Twisted-Python] Zope interfaces
In-Reply-To: <61DA7719C45FD31185280008C733EF6E04AC4D88@XCHANGE>
References: <61DA7719C45FD31185280008C733EF6E04AC4D88@XCHANGE>
Message-ID: <A24F410F-A76E-4A49-B57A-AE60843F0727@redivi.com>


On May 22, 2005, at 5:34 PM, Grant McDonald wrote:

> I have just tried running my 1.3.0 application in 2.0.0 (rc2 I  
> think?) and I received the following message:
>
>
>
>     raise ImportError, "you need zope.interface installed (http:// 
> zope.org/Products/ZopeInterface/)"
>
> ImportError: you need zope.interface installed (http://zope.org/ 
> Products/ZopeInterface/)
>
>
>
> From this I understand that I need to install zope interfaces even  
> if I don?t use them, is that correct? (I imagine this is because  
> other code in twisted uses them)

Yes.

-bob




From mary-twisted at puzzling.org  Sun May 22 20:56:38 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Mon, 23 May 2005 10:56:38 +1000
Subject: [Twisted-Python] Zope interfaces
In-Reply-To: <61DA7719C45FD31185280008C733EF6E04AC4D88@XCHANGE>
References: <61DA7719C45FD31185280008C733EF6E04AC4D88@XCHANGE>
Message-ID: <20050523005638.GA8738@home.puzzling.org>

On Mon, May 23, 2005, Grant McDonald wrote:
> From this I understand that I need to install zope interfaces even if I
> don't use them, is that correct? (I imagine this is because other code in
> twisted uses them)

This is correct.

-Mary



From nkeric at gmail.com  Mon May 23 01:49:21 2005
From: nkeric at gmail.com (Eric Hsu)
Date: Mon, 23 May 2005 13:49:21 +0800
Subject: [Twisted-Python] How to create a new service and listen on a new
	port?
Message-ID: <43c0d2b5050522224949079041@mail.gmail.com>

Hi all,

This is my first post here, and I'm not a native English speaker, so
please bear with me :)
I'm trying to implement something like this:

 * A UDP server listening on port1 for incoming request
 * A client sends the requset to port1
 * The server confirms the request and creates another (different) UDP
service on a new port (port2)
 * The client then would be able to connect to port2 and do some other things...

By reading this "Writing a New Plug-In for mktap"
 - http://twistedmatrix.com/projects/core/documentation/howto/plugin.html

I've implemented a UDP server and could run it with "twisted -f".
Now the server receives request on port1, and creates a new service at
port2 for client to connect to it.

I implemented this as the following:

class FooServer(DatagramProtocol):
    def datagramReceived(self, data, addr):
        # do something to verify the request and send the client with
a confirm msg
        reactor.listenUDP(port2, AnotherService())
        reactor.run()

class AnotherService(DatagramProtocol):
     # ...

I got this up and run under windows cmd console, however, whenever I
try to stop the server with Ctrl + c or close the cmd console, the
server died in a dead loop which keeps produces tone of error
messages. The only way to quit that console is to "kill" it...

I know there must be something wrong. I would like to know:
  * How could I accomplish this in a more elegant/"formal" way?

I'm very new to twisted and this mailing list, if someone has asked
similar question before, please tell me how to find it. (BTW, how
could I search the mailinglist?)

Thanks in advance! :D



From mark at junklight.com  Mon May 23 04:28:29 2005
From: mark at junklight.com (mark)
Date: Mon, 23 May 2005 09:28:29 +0100
Subject: [Twisted-Python] How to create a new service and listen on a new
	port?
In-Reply-To: <43c0d2b5050522224949079041@mail.gmail.com>
References: <43c0d2b5050522224949079041@mail.gmail.com>
Message-ID: <EFF1CEBA-0EB1-4B83-86CC-AB2F0FE7E0E0@junklight.com>

Killing the process is quite normal in early stage development.  
Twisted even helps with this by writing a pid file if you demonize it.

There are a number of more elegant techniques. If you intend to  
always run it from the command line as a non demon then write a  
control-c handler that gracefully stops your process.

def ctrlCHandler(*whatever):
     print "Interupted"
     for thread in threads:
         thread.stop()
         thread.join()

signal.signal(signal.SIGINT, ctrlCHandler)

(this is from a non-twisted application with threads :-) - I don't  
know if the signal thingy works on windows either)

The other option is to build a stop mechanism - I'm not sure from  
your description what your app does but you could send it a 'STOP'  
datagram for example that would cause it to stop nicely. Or when you  
have your client connection set up allow the client to terminate the  
process in a similar way.

you should be able to search the list at http://gmane.org/ although I  
find gmane has a very poor UI and I find its search a bit mysterious  
too.

cheers

mark



On 23 May 2005, at 06:49, Eric Hsu wrote:

> Hi all,
>
> This is my first post here, and I'm not a native English speaker, so
> please bear with me :)
> I'm trying to implement something like this:
>
>  * A UDP server listening on port1 for incoming request
>  * A client sends the requset to port1
>  * The server confirms the request and creates another (different) UDP
> service on a new port (port2)
>  * The client then would be able to connect to port2 and do some  
> other things...
>
> By reading this "Writing a New Plug-In for mktap"
>  - http://twistedmatrix.com/projects/core/documentation/howto/ 
> plugin.html
>
> I've implemented a UDP server and could run it with "twisted -f".
> Now the server receives request on port1, and creates a new service at
> port2 for client to connect to it.
>
> I implemented this as the following:
>
> class FooServer(DatagramProtocol):
>     def datagramReceived(self, data, addr):
>         # do something to verify the request and send the client with
> a confirm msg
>         reactor.listenUDP(port2, AnotherService())
>         reactor.run()
>
> class AnotherService(DatagramProtocol):
>      # ...
>
> I got this up and run under windows cmd console, however, whenever I
> try to stop the server with Ctrl + c or close the cmd console, the
> server died in a dead loop which keeps produces tone of error
> messages. The only way to quit that console is to "kill" it...
>
> I know there must be something wrong. I would like to know:
>   * How could I accomplish this in a more elegant/"formal" way?
>
> I'm very new to twisted and this mailing list, if someone has asked
> similar question before, please tell me how to find it. (BTW, how
> could I search the mailinglist?)
>
> Thanks in advance! :D
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From nkeric at gmail.com  Mon May 23 04:47:07 2005
From: nkeric at gmail.com (Eric Hsu)
Date: Mon, 23 May 2005 16:47:07 +0800
Subject: [Twisted-Python] How to create a new service and listen on a new
	port?
In-Reply-To: <EFF1CEBA-0EB1-4B83-86CC-AB2F0FE7E0E0@junklight.com>
References: <43c0d2b5050522224949079041@mail.gmail.com>
	<EFF1CEBA-0EB1-4B83-86CC-AB2F0FE7E0E0@junklight.com>
Message-ID: <43c0d2b50505230147295c6338@mail.gmail.com>

Hi mark, big thanks for your quick reply :)
I guess I haven't make myself clear enough (sorry for my poor English... )
I'm not looking for a way to shutdown/stop my server :p

My question is, should I implement my requirments in the following way? (Use 
the "raw" reactor to create a new service and listen on a new port?)

[code]
class FooServer(DatagramProtocol):
def datagramReceived(self, data, addr):
# do something to verify the request and send the client with
a confirm msg
reactor.listenUDP(port2, AnotherService())
reactor.run()

class AnotherService(DatagramProtocol):
 # ...
[/code]

 I've already write my server as a "plugin" to the twisted framework (as the 
tutorial tought me), now I want to create a new service within my server, is 
there a more elegant/"formal" way?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050523/56220cd2/attachment.htm 

From nkeric at gmail.com  Mon May 23 05:31:33 2005
From: nkeric at gmail.com (Eric Hsu)
Date: Mon, 23 May 2005 17:31:33 +0800
Subject: [Twisted-Python] How to create a new service and listen on a new
	port?
In-Reply-To: <769FBCBE-8E4E-48DE-885F-6A0F5962609E@junklight.com>
References: <43c0d2b5050522224949079041@mail.gmail.com>
	<EFF1CEBA-0EB1-4B83-86CC-AB2F0FE7E0E0@junklight.com>
	<43c0d2b50505230147295c6338@mail.gmail.com>
	<769FBCBE-8E4E-48DE-885F-6A0F5962609E@junklight.com>
Message-ID: <43c0d2b50505230231404f7da3@mail.gmail.com>

2005/5/23, mark <mark at junklight.com>:
> Ah,
> 
> my mistake for not reading properly. :-)

Never mind : )

> 
> I guess one answer is to run AnotherService on port 2 from the start.
[snip]
> then both services will be running and you can just service both
> ports. I am not sure quite what you are trying to do but from the
> comments in your code why do you not simply send the confirm message
> back via the FooServer?
> 

Well, I need to create the AnotherService instances on many ports
(port2, port3...) for each verified clients dynamically...

Here is a scenario:

 * client1 sends the request to server on port1
 * server verifies the client's request, and allocates a new port2
with the AnotherService binded to it, then tells the client1 that it
has allocated port2 for it
 * client1 happily communicates with server on port2 and enjoys the
AnotherService...

 * client2 sends another request to server on port1
 * server verifies the request too, and allocates port3 for client2
 * client2 communicates with server on port3 and enjoys yet another
AnotherService instance...

That's all I want to do...

I'm reading this tutorial:
http://twistedmatrix.com/projects/core/documentation/howto/application.html

It seems that it's possible to have multiple services tie to one application? 
However, I would like to know is there a good way to dynamically
create new services on new ports?

best regards

- Eric



From boomberschloss at yahoo.com  Mon May 23 05:40:53 2005
From: boomberschloss at yahoo.com (Joachim Boomberschloss)
Date: Mon, 23 May 2005 02:40:53 -0700 (PDT)
Subject: [Twisted-Python] cleanup in twisted
In-Reply-To: 6667
Message-ID: <20050523094053.11904.qmail@web53108.mail.yahoo.com>


--- Bob Ippolito <bob at redivi.com> wrote:
> 
> On May 22, 2005, at 8:46 AM, Joachim Boomberschloss
> wrote:
> 
> > I just jotted down a little mechanism for
> cleaning-up
> > in Twisted, and I wanted to see if:
> > 1. other people think it's needed
> > 2. other people manage to use it
> >
> > What this does is enable one to define a
> __cleanup__
> > method which gets call either when the instance is
> > deleted, or when the reactor shuts down. It can
> return
> > a dereffed that delays the shutdown. The benefit
> is
> > being able to define communication-related stuff
> in
> > the cleanup method, which is not so useful to do
> in
> > __del__.
> 
> This is just begging for object leaks, because
> __del__ disables  
> aspects of cyclic GC.

Hmmpf. What does this mean, and is there a simple way
of resolving it?

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From exarkun at divmod.com  Mon May 23 05:41:43 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 23 May 2005 09:41:43 GMT
Subject: [Twisted-Python] How to create a new service and listen on a new
	port?
In-Reply-To: <43c0d2b5050522224949079041@mail.gmail.com>
Message-ID: <20050523094143.559.1531852400.divmod.quotient.7609@ohm>

On Mon, 23 May 2005 13:49:21 +0800, Eric Hsu <nkeric at gmail.com> wrote:
>Hi all,
>
>This is my first post here, and I'm not a native English speaker, so
>please bear with me :)
>I'm trying to implement something like this:
>
> * A UDP server listening on port1 for incoming request
> * A client sends the requset to port1
> * The server confirms the request and creates another (different) UDP
>service on a new port (port2)
> * The client then would be able to connect to port2 and do some other things...
>
>By reading this "Writing a New Plug-In for mktap"
> - http://twistedmatrix.com/projects/core/documentation/howto/plugin.html
>
>I've implemented a UDP server and could run it with "twisted -f".
>Now the server receives request on port1, and creates a new service at
>port2 for client to connect to it.
>
>I implemented this as the following:
>
>class FooServer(DatagramProtocol):
>    def datagramReceived(self, data, addr):
>        # do something to verify the request and send the client with
>a confirm msg
>        reactor.listenUDP(port2, AnotherService())
>        reactor.run()
>

  Since nothing is likely to call datagramReceived unless the reactor is running, and calling reactor.run() while the reactor is running is a terribly broken thing to do, the above code is likely mistaken in calling reactor.run().

  I bet shutdown behavioor will become much nicer if you remove the call to reactor.run() here, and in any other similar places.

  twistd will start and stop the reactor for you.

Jp



From exarkun at divmod.com  Mon May 23 05:56:48 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 23 May 2005 09:56:48 GMT
Subject: [Twisted-Python] cleanup in twisted
In-Reply-To: <20050523094053.11904.qmail@web53108.mail.yahoo.com>
Message-ID: <20050523095648.559.1869734899.divmod.quotient.7617@ohm>

On Mon, 23 May 2005 02:40:53 -0700 (PDT), Joachim Boomberschloss <boomberschloss at yahoo.com> wrote:
>
>--- Bob Ippolito <bob at redivi.com> wrote:
>>
>> On May 22, 2005, at 8:46 AM, Joachim Boomberschloss
>> wrote:
>>
>> > I just jotted down a little mechanism for
>> cleaning-up
>> > in Twisted, and I wanted to see if:
>> > 1. other people think it's needed
>> > 2. other people manage to use it
>> >
>> > What this does is enable one to define a
>> __cleanup__
>> > method which gets call either when the instance is
>> > deleted, or when the reactor shuts down. It can
>> return
>> > a dereffed that delays the shutdown. The benefit
>> is
>> > being able to define communication-related stuff
>> in
>> > the cleanup method, which is not so useful to do
>> in
>> > __del__.
>>
>> This is just begging for object leaks, because
>> __del__ disables
>> aspects of cyclic GC.
>
>Hmmpf. What does this mean, and is there a simple way
>of resolving it?
>

  If you construct a reference cycle which contains an object which has a __del__ method, the entire cycle becomes "garbage" - Python cannot free any of the objects or call any of their __del__ methods.  Instead, it puts them into the gc module's `garbage' list and leaves them there forever.

  There's no simple way to resolve this (except to not implement __del__, of course ;).

  A non-simple way to resolve it is to use weakref callbacks instead of __del__.  Weakref callbacks have some nasty bugs in versions of Python older than 2.3.5 (more, the further back you go), and they're trickier to use than __del__.  They don't create garbage cycles, though.

  Jp



From nkeric at gmail.com  Mon May 23 06:50:34 2005
From: nkeric at gmail.com (Eric Hsu)
Date: Mon, 23 May 2005 18:50:34 +0800
Subject: [Twisted-Python] How to create a new service and listen on a new
	port?
In-Reply-To: <20050523094143.559.1531852400.divmod.quotient.7609@ohm>
References: <43c0d2b5050522224949079041@mail.gmail.com>
	<20050523094143.559.1531852400.divmod.quotient.7609@ohm>
Message-ID: <43c0d2b5050523035061035df1@mail.gmail.com>

2005/5/23, Jp Calderone <exarkun at divmod.com>:
>   Since nothing is likely to call datagramReceived unless the reactor is running, and calling reactor.run() while the reactor is running is a terribly broken thing to do, the above code is likely mistaken in calling reactor.run().
> 
>   I bet shutdown behavioor will become much nicer if you remove the call to reactor.run() here, and in any other similar places.
> 
>   twistd will start and stop the reactor for you.
> 
> Jp

Mmm... you're right! However, it seems that without reactor.run(), the
newly created AnotherService instance would not serve the client as
expected... but it will with reactor.run().. that's why I'm looking
for a better/elegant/formal way to achieve what I want, any ideas?

best regards

- Eric



From james at delx.cjb.net  Mon May 23 08:08:43 2005
From: james at delx.cjb.net (James Bunton)
Date: Mon, 23 May 2005 22:08:43 +1000
Subject: [Twisted-Python] epoll reactor
In-Reply-To: <7de0074150447caff309f6515f7d08ac@delx.cjb.net>
References: <7de0074150447caff309f6515f7d08ac@delx.cjb.net>
Message-ID: <45ce393f7a960352b42857f3f99b9491@delx.cjb.net>

Well, I got it to work properly now :)

http://msn-transport.jabberstudio.org/tarballs/epoll-0.2.tar.gz

It's now uses the epoll edge triggered flag, and doesn't chew 99% CPU 
like the first one accidentally did.

---

James



On 22/05/2005, at 12:37 PM, James Bunton wrote:

> Hi all
>
> I've implemented an epoll reactor using the level triggered mechanism.
> Please check it out and let me know if there's anything I've done 
> wrong.
> This is the first time I've played with twisted reactor internals 
> before. :)
>
> http://msn-transport.jabberstudio.org/tarballs/epoll-0.1.tar.gz
>
> There's a README file in the tarball with instructions on setting it 
> up.
>
> Enjoy! :)
>
> ---
>
> James




From boomberschloss at yahoo.com  Mon May 23 08:12:49 2005
From: boomberschloss at yahoo.com (Joachim Boomberschloss)
Date: Mon, 23 May 2005 05:12:49 -0700 (PDT)
Subject: [Twisted-Python] cleanup in twisted
In-Reply-To: 6667
Message-ID: <20050523121249.57909.qmail@web53110.mail.yahoo.com>


--- Jp Calderone <exarkun at divmod.com> wrote:
> On Mon, 23 May 2005 02:40:53 -0700 (PDT), Joachim
> Boomberschloss <boomberschloss at yahoo.com> wrote:
> >
> >--- Bob Ippolito <bob at redivi.com> wrote:
> >>
> >> On May 22, 2005, at 8:46 AM, Joachim
> Boomberschloss
> >> wrote:
> >>
> >> > I just jotted down a little mechanism for
> >> cleaning-up
> >> > in Twisted, and I wanted to see if:
> >> > 1. other people think it's needed
> >> > 2. other people manage to use it
> >> >
> >> > What this does is enable one to define a
> >> __cleanup__
> >> > method which gets call either when the instance
> is
> >> > deleted, or when the reactor shuts down. It can
> >> return
> >> > a dereffed that delays the shutdown. The
> benefit
> >> is
> >> > being able to define communication-related
> stuff
> >> in
> >> > the cleanup method, which is not so useful to
> do
> >> in
> >> > __del__.
> >>
> >> This is just begging for object leaks, because
> >> __del__ disables
> >> aspects of cyclic GC.
> >
> >Hmmpf. What does this mean, and is there a simple
> way
> >of resolving it?
> >
> 
>   If you construct a reference cycle which contains
> an object which has a __del__ method, the entire
> cycle becomes "garbage" - Python cannot free any of
> the objects or call any of their __del__ methods. 
> Instead, it puts them into the gc module's `garbage'
> list and leaves them there forever.
> 
>   There's no simple way to resolve this (except to
> not implement __del__, of course ;).
> 
>   A non-simple way to resolve it is to use weakref
> callbacks instead of __del__.  Weakref callbacks
> have some nasty bugs in versions of Python older
> than 2.3.5 (more, the further back you go), and
> they're trickier to use than __del__.  They don't
> create garbage cycles, though.
> 

Can you point me to an example of this (preferably in
Twisted)? Is this whole cleanup thing worth my time
fixing it in your opinion?

Joe.


		
Yahoo! Mail
Stay connected, organized, and protected. Take the tour:
http://tour.mail.yahoo.com/mailtour.html




From exarkun at divmod.com  Mon May 23 09:17:36 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 23 May 2005 13:17:36 GMT
Subject: [Twisted-Python] cleanup in twisted
In-Reply-To: <20050523121249.57909.qmail@web53110.mail.yahoo.com>
Message-ID: <20050523131736.559.1154883193.divmod.quotient.7699@ohm>

On Mon, 23 May 2005 05:12:49 -0700 (PDT), Joachim Boomberschloss <boomberschloss at yahoo.com> wrote:
>
>--- Jp Calderone <exarkun at divmod.com> wrote:
>> On Mon, 23 May 2005 02:40:53 -0700 (PDT), Joachim
>> Boomberschloss <boomberschloss at yahoo.com> wrote:
>> >
>> >--- Bob Ippolito <bob at redivi.com> wrote:
>> >>
>> >> On May 22, 2005, at 8:46 AM, Joachim
>> Boomberschloss
>> >> wrote:
>> >>
>> >> > I just jotted down a little mechanism for
>> >> cleaning-up
>> >> > in Twisted, and I wanted to see if:
>> >> > 1. other people think it's needed
>> >> > 2. other people manage to use it
>> >> >
>> >> > What this does is enable one to define a
>> >> __cleanup__
>> >> > method which gets call either when the instance
>> is
>> >> > deleted, or when the reactor shuts down. It can
>> >> return
>> >> > a dereffed that delays the shutdown. The
>> benefit
>> >> is
>> >> > being able to define communication-related
>> stuff
>> >> in
>> >> > the cleanup method, which is not so useful to
>> do
>> >> in
>> >> > __del__.
>> >>
>> >> This is just begging for object leaks, because
>> >> __del__ disables
>> >> aspects of cyclic GC.
>> >
>> >Hmmpf. What does this mean, and is there a simple
>> way
>> >of resolving it?
>> >
>>
>>   If you construct a reference cycle which contains
>> an object which has a __del__ method, the entire
>> cycle becomes "garbage" - Python cannot free any of
>> the objects or call any of their __del__ methods.
>> Instead, it puts them into the gc module's `garbage'
>> list and leaves them there forever.
>>
>>   There's no simple way to resolve this (except to
>> not implement __del__, of course ;).
>>
>>   A non-simple way to resolve it is to use weakref
>> callbacks instead of __del__.  Weakref callbacks
>> have some nasty bugs in versions of Python older
>> than 2.3.5 (more, the further back you go), and
>> they're trickier to use than __del__.  They don't
>> create garbage cycles, though.
>>
>
>Can you point me to an example of this (preferably in
>Twisted)? Is this whole cleanup thing worth my time
>fixing it in your opinion?
>

Twisted doesn't make use of it, due to the instabilities in previous Python versions (which Twisted still supports).

Another technique I didn't mention is to move the __del__ implementation off of the object which might participate in a cycle and onto a subsidiary object.  Deferreds do this in Twisted 2.0.  As a general technique, this doesn't make much sense, since it depends on knowledge of the structure of specific object graphs (ie, you need to know where cycles will form and where they will not).

I'm not sure if it's worth the effort.  I don't exactly see the attraction of the functionality being provided.  I tend to find that explicit cleanup is not overly burdensome.  Perhaps you can share some examples of how you see it being used?

Jp



From exarkun at divmod.com  Mon May 23 09:23:20 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 23 May 2005 13:23:20 GMT
Subject: [Twisted-Python] epoll reactor
In-Reply-To: <45ce393f7a960352b42857f3f99b9491@delx.cjb.net>
Message-ID: <20050523132320.559.95707105.divmod.quotient.7702@ohm>

On Mon, 23 May 2005 22:08:43 +1000, James Bunton <james at delx.cjb.net> wrote:
>Well, I got it to work properly now :)
>
>http://msn-transport.jabberstudio.org/tarballs/epoll-0.2.tar.gz
>
>It's now uses the epoll edge triggered flag, and doesn't chew 99% CPU like 
>the first one accidentally did.
>

  Neat.  There has been a level-triggered epoll reactor in my sandbox for some time, but I was never able to get the edge triggered version to work.

  Hmm, running the Twisted test suite with this version doesn't do too well either.  A few tests fail here and there before it gets totally wedged on 
twisted.test.test_pb.ConnectionTestCase.testIdentityConnector.

  You can try this yourself by adding an entry for this reactor to the dictionary at the top of twisted.application.app, then running "trial -R -r epoll twisted", where "epoll" is the key you add to that dict.

  Jp



From anthony at interlink.com.au  Mon May 23 12:58:17 2005
From: anthony at interlink.com.au (Anthony Baxter)
Date: Tue, 24 May 2005 02:58:17 +1000
Subject: [Twisted-Python] cleanup in twisted
In-Reply-To: <20050523095648.559.1869734899.divmod.quotient.7617@ohm>
References: <20050523095648.559.1869734899.divmod.quotient.7617@ohm>
Message-ID: <200505240258.18997.anthony@interlink.com.au>

On Monday 23 May 2005 19:56, Jp Calderone wrote:
>   A non-simple way to resolve it is to use weakref callbacks instead of
> __del__.  Weakref callbacks have some nasty bugs in versions of Python
> older than 2.3.5 (more, the further back you go), and they're trickier to
> use than __del__.  They don't create garbage cycles, though.

Which reminds me that I should try and make that patch that removes 
deferred's __del__ method and replaces it with a weakref work... 

Anthony

-- 
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From josh.subscriptions at kantei.com  Mon May 23 13:07:43 2005
From: josh.subscriptions at kantei.com (Josh Zeidner)
Date: Mon, 23 May 2005 10:07:43 -0700
Subject: [Twisted-Python] Zope interfaces
In-Reply-To: <61DA7719C45FD31185280008C733EF6E04AC4D88@XCHANGE>
References: <61DA7719C45FD31185280008C733EF6E04AC4D88@XCHANGE>
Message-ID: <42920DDF.4080804@kantei.com>

Hello All,

Im a twisted newbie and I am very interested in what is available in 
terms of Zope support. Any info or links would be very useful to me. 
Also, anyone interested in FIX for Twisted? Thanks, Josh Zeidner


Grant McDonald wrote:

> Hi All,
>
> I have just tried running my 1.3.0 application in 2.0.0 (rc2 I think?) 
> and I received the following message:
>
> raise ImportError, "you need zope.interface installed 
> (http://zope.org/Products/ZopeInterface/)"
>
> ImportError: you need zope.interface installed 
> (http://zope.org/Products/ZopeInterface/)
>
> From this I understand that I need to install zope interfaces even if 
> I don?t use them, is that correct? (I imagine this is because other 
> code in twisted uses them)
>
> ___________________________________________
>
> *Grant McDonald InfoComp Pty Ltd***
>
> Programmer Level 1, 63 Market St, Wollongong
>
> Ph: (+61) 2 4298 9100
>
> Fax: (+61) 2 4298 9199
>
> Email: gmcdonald at infocomp.com
>
> ___________________________________________
>
> Important notice: This message is intended for the individual(s) and 
> entity(s) addressed. The information contained in this transmission 
> and any attached, may be confidential and may also be the subject of 
> legal privilege, public interest immunity or legal professional 
> privilege. Any review, retransmission, dissemination or other use of, 
> taking of any action in reliance upon this information by person or 
> entities other than the recipient is prohibited and requires 
> authorization from the sender. If you are not the addressee indicated 
> in this message (or responsible for delivery of the message to such 
> person) you may not copy or deliver this message to anyone. In such 
> cases you should destroy this message and kindly notify the sender by 
> reply email.
>
> WARNING: Although Infocomp has taken reasonable precautions so that no 
> viruses are present in this e-mail, the company cannot accept 
> responsibility for any loss or damage arising from the use of e-mail 
> attachments.
>
>------------------------------------------------------------------------
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>  
>




From itamar at itamarst.org  Mon May 23 13:19:06 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 23 May 2005 13:19:06 -0400
Subject: [Twisted-Python] Zope interfaces
In-Reply-To: <42920DDF.4080804@kantei.com>
References: <61DA7719C45FD31185280008C733EF6E04AC4D88@XCHANGE>
	<42920DDF.4080804@kantei.com>
Message-ID: <1116868746.8468.49.camel@localhost.localdomain>

On Mon, 2005-05-23 at 10:07 -0700, Josh Zeidner wrote:

> Im a twisted newbie and I am very interested in what is available in 
> terms of Zope support. Any info or links would be very useful to me. 
> Also, anyone interested in FIX for Twisted? Thanks, Josh Zeidner

Zope3 can run on top of Twisted; this may still be in a private
repository, or it may already be in a branch.

For Zope2, there's something called ZAsync, not sure exactly what it
does: http://www.zope.org/Members/poster/zasync




From natester at gmail.com  Mon May 23 13:58:40 2005
From: natester at gmail.com (Nathaniel Haggard)
Date: Mon, 23 May 2005 11:58:40 -0600
Subject: [Twisted-Python] twisted.plugin plugin framework
Message-ID: <4adac7a30505231058554386b2@mail.gmail.com>

1.  What is/was the purpose of twisted.plugin?  

2.  "mypkg" is a directory containing __init__.py

__init__.py contains:

import twisted.plugin
import zope.interface as z
import twisted.plugin as p

class Beta:
        z.implements(p.IPlugin)

class Gamma:
        """This is the doc string"""

        __implements__ = p.IPlugin

-----------------

Trying to load the package with getPlugins returns an empty generator
as far as I can tell


import twisted.plugin
import mypkg

l = twisted.plugin.getPlugins(twisted.plugin.IPlugin, mypkg)
print dir(l)
for i in l:
        .....

Actually twisted.plugin.getCache doesn't return anything for
getPlugins to get.  Am I setting up the package incorrectly?



From matt at pollenation.net  Mon May 23 15:24:58 2005
From: matt at pollenation.net (Matt Goodall)
Date: Mon, 23 May 2005 20:24:58 +0100
Subject: [Twisted-Python] twisted.plugin plugin framework
In-Reply-To: <4adac7a30505231058554386b2@mail.gmail.com>
References: <4adac7a30505231058554386b2@mail.gmail.com>
Message-ID: <42922E0A.4000206@pollenation.net>

Nathaniel Haggard wrote:
> 1.  What is/was the purpose of twisted.plugin?  

It is for loading plugins! ;-)

> 
> 2.  "mypkg" is a directory containing __init__.py
> 
> __init__.py contains:
> 
> import twisted.plugin
> import zope.interface as z
> import twisted.plugin as p
> 
> class Beta:
>         z.implements(p.IPlugin)
> 
> class Gamma:
>         """This is the doc string"""
> 
>         __implements__ = p.IPlugin
> 
> -----------------
> 
> Trying to load the package with getPlugins returns an empty generator
> as far as I can tell

OK, the main thing is that t.plugin loads *instances* of IPlugin
implementing classes. It does not find classes with an implements(IPlug)
and create instances for you.

Something like:

    class Beta:
        z.implements(p.IPlugin)

    betaPlugin = Beta()

will /probably/ be enough for t.plugin to find them. However, you almost
certainly want your plugins to implement another, application specific,
more interesting interface too, i.e.

    class ISomething(Interface):
        pass

    class Beta:
        z.implements(p.IPlugin, ISomething)

    betaPlugin = Beta()

You can then search for ISomething plugins, which is much more
meaningful than searching for any (i.e IPlugin) plugin.

    plugins = twisted.plugin.getPlugins(ISomething, mypkg)

Hope that helps.

Cheers, Matt

> 
> 
> import twisted.plugin
> import mypkg
> 
> l = twisted.plugin.getPlugins(twisted.plugin.IPlugin, mypkg)
> print dir(l)
> for i in l:
>         .....
> 
> Actually twisted.plugin.getCache doesn't return anything for
> getPlugins to get.  Am I setting up the package incorrectly?
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt at pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \	       Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.



From foom at fuhm.net  Mon May 23 17:34:02 2005
From: foom at fuhm.net (James Y Knight)
Date: Mon, 23 May 2005 17:34:02 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <B839176B-C764-4DEF-94C0-986A2864CDD3@fuhm.net>

Bug summary
______________________
Since 2005-05-09 15:24:45.360000:
Bugs opened: 20   Bugs closed: 15   Total open bugs: 369 (+5)
   Urgent: 7 (-2)
   Bug: 149 (+2)
   Feature: 139 (+1)
   Wish: 74 (+4)

New / Reopened Bugs
______________________
                     ==== Urgent ====
trial randomly exits prematurely for no good reason  (1 week ago)
CLOSED http://twistedmatrix.com/bugs/issue1036 opened by exarkun

                     ==== Bug ====
[WEBSITE] http://twistedmatrix.com/documents/ has 1.3 documentation  
linked as current one  (2 weeks ago)
        http://twistedmatrix.com/bugs/issue1029 opened by itamarst

iocpreactor does not cancel pending operations on shutdown  (1 week ago)
        http://twistedmatrix.com/bugs/issue1039 opened by PenguinOfDoom

extra reference needed to show main window when using qtreactor  (7  
days ago)
        http://twistedmatrix.com/bugs/issue1041 opened by insanekane

FTPFileListProtocol doesn't match lines on all FTP servers  (3 days ago)
        http://twistedmatrix.com/bugs/issue1048 opened by orbitz

[DOCUMENTATION] Changes to HOWTO index page  (5 days ago)
        http://twistedmatrix.com/bugs/issue1043 opened by STemplar

[WEBSITE] Link to API docs misleading  (5 days ago)
        http://twistedmatrix.com/bugs/issue1045 opened by osuchw

[WEBSITE] twisted-versions.txt should be in svn  (1 week ago)
        http://twistedmatrix.com/bugs/issue1035 opened by dreid

[WEBSITE] Unification of products and projects.  (1 week ago)
        http://twistedmatrix.com/bugs/issue1034 opened by dreid

                     ==== Feature ====
[CORE] Add blockingCallFromThread to twisted.internet.threads  (5  
days ago)
        http://twistedmatrix.com/bugs/issue1042 opened by spiv

[WORDS] Update words to new cred APIs  (1 week ago)
CLOSED http://twistedmatrix.com/bugs/issue1031 opened by exarkun

[WORDS] Improve IRCClient API  (1 week ago)
        http://twistedmatrix.com/bugs/issue1030 opened by exarkun

[WORDS] Update words to new PB API  (1 week ago)
        http://twistedmatrix.com/bugs/issue1032 opened by exarkun

[WORDS] Remove Words' use of deprecated t.web.widgets  (1 week ago)
        http://twistedmatrix.com/bugs/issue1033 opened by exarkun

iocpreactor needs to support TCP half-close  (1 week ago)
        http://twistedmatrix.com/bugs/issue1038 opened by PenguinOfDoom

[TRIAL] reactor interface predicate support in trial  (1 week ago)
        http://twistedmatrix.com/bugs/issue1037 opened by exarkun

                     ==== Wish ====
[XISH] xmlstream patch to get ready for TLS and SASL authenticators   
(3 days ago)
        http://twistedmatrix.com/bugs/issue1046 opened by tofu

[WORDS, XISH] Can we add a NAMESPACE module  (3 days ago)
        http://twistedmatrix.com/bugs/issue1047 opened by tofu

Cred needs pam checker, and tehre is already one  (5 days ago)
        http://twistedmatrix.com/bugs/issue1044 opened by liiwi

Starting threads in a tac file blocks everything  (7 days ago)
        http://twistedmatrix.com/bugs/issue1040 opened by exarkun

Bugs Closed
______________________
                     ==== Urgent ====
trial randomly exits prematurely for no good reason  (1 week ago)
        http://twistedmatrix.com/bugs/issue1036 opened by exarkun,  
closed by exarkun

[DOCUMENTATION] [PATCH] epyrun doesn't like  
t.python.util.moduleMovedForSplit  (5 months ago)
        http://twistedmatrix.com/bugs/issue828 opened by marienz,  
closed by jknight

[DOCUMENTATION] epyrun dies with an internal error  (1 month ago)
        http://twistedmatrix.com/bugs/issue973 opened by Ycros,  
closed by spiv

                     ==== Bug ====
[CORE] Possible re-entrancy bug in LineReceiver.resumeProducing?  (3  
months ago)
        http://twistedmatrix.com/bugs/issue899 opened by spiv, closed  
by exarkun

[WORDS] Use "Application-GUID" instead of "Application-Name" in  
_checkFileInvitation of msn.py  (2 months ago)
        http://twistedmatrix.com/bugs/issue908 opened by cphsu,  
closed by exarkun

[CONCH] Can't logout of an SFTP server  (2 weeks ago)
        http://twistedmatrix.com/bugs/issue1027 opened by mkerrin,  
closed by z3p

[TRIAL] trial's default timeout isn't enforced  (2 weeks ago)
        http://twistedmatrix.com/bugs/issue1028 opened by warner,  
closed by exarkun

HTTP multipart/form-data from Opera 7.52 raises error  (10 months ago)
        http://twistedmatrix.com/bugs/issue649 opened by dotz, closed  
by jknight

                     ==== Feature ====
[WORDS] Update words to new cred APIs  (1 week ago)
        http://twistedmatrix.com/bugs/issue1031 opened by exarkun,  
closed by exarkun

Pluggable Application loaders  (8 months ago)
        http://twistedmatrix.com/bugs/issue720 opened by exarkun,  
closed by exarkun

[PATCH] Unregister handlers for EventDispatcher  (4 months ago)
        http://twistedmatrix.com/bugs/issue838 opened by ww, closed  
by exarkun

twisted.web2 HTTP Server Enhancements  (1 month ago)
        http://twistedmatrix.com/bugs/issue999 opened by srichter,  
closed by srichter

Common Access Logging Observer for twisted.web2  (1 month ago)
        http://twistedmatrix.com/bugs/issue1000 opened by srichter,  
closed by srichter

[WEB] mod_gzip type functionality for Twisted Web  (22 months ago)
        http://twistedmatrix.com/bugs/issue104 opened by Nafai,  
closed by jknight

[WEB] SCGI server protocol implementation  (8 months ago)
        http://twistedmatrix.com/bugs/issue704 opened by fog, closed  
by jknight





From andrew-twisted at puzzling.org  Mon May 23 18:53:33 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 24 May 2005 08:53:33 +1000
Subject: [Twisted-Python] cleanup in twisted
In-Reply-To: <200505240258.18997.anthony@interlink.com.au>
References: <20050523095648.559.1869734899.divmod.quotient.7617@ohm>
	<200505240258.18997.anthony@interlink.com.au>
Message-ID: <20050523225333.GK5425@frobozz>

On Tue, May 24, 2005 at 02:58:17AM +1000, Anthony Baxter wrote:
> On Monday 23 May 2005 19:56, Jp Calderone wrote:
> >   A non-simple way to resolve it is to use weakref callbacks instead of
> > __del__.  Weakref callbacks have some nasty bugs in versions of Python
> > older than 2.3.5 (more, the further back you go), and they're trickier to
> > use than __del__.  They don't create garbage cycles, though.
> 
> Which reminds me that I should try and make that patch that removes 
> deferred's __del__ method and replaces it with a weakref work... 

Deferreds in SVN no longer have a __del__; instead they hold a reference to
in ._debugInfo to a DebugInfo object that has a __del__ and is not part of a
cycle.

-Andrew.




From radeex at gmail.com  Mon May 23 19:09:18 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Tue, 24 May 2005 09:09:18 +1000
Subject: [Twisted-Python] Zope interfaces
In-Reply-To: <1116868746.8468.49.camel@localhost.localdomain>
References: <61DA7719C45FD31185280008C733EF6E04AC4D88@XCHANGE>
	<42920DDF.4080804@kantei.com>
	<1116868746.8468.49.camel@localhost.localdomain>
Message-ID: <60ed19d405052316092c79d783@mail.gmail.com>

On 5/24/05, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
> On Mon, 2005-05-23 at 10:07 -0700, Josh Zeidner wrote:
> 
> > Im a twisted newbie and I am very interested in what is available in
> > terms of Zope support. Any info or links would be very useful to me.
> > Also, anyone interested in FIX for Twisted? Thanks, Josh Zeidner
> 
> Zope3 can run on top of Twisted; this may still be in a private
> repository, or it may already be in a branch.
> 
> For Zope2, there's something called ZAsync, not sure exactly what it
> does: http://www.zope.org/Members/poster/zasync

Note, though, that Twisted's usage of Zope Interface has nothing at
all to do with this zope+twisted integration that itamar is talking
about.

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From james at delx.cjb.net  Tue May 24 09:13:51 2005
From: james at delx.cjb.net (James Bunton)
Date: Tue, 24 May 2005 23:13:51 +1000
Subject: [Twisted-Python] epoll reactor
In-Reply-To: <20050523132320.559.95707105.divmod.quotient.7702@ohm>
References: <20050523132320.559.95707105.divmod.quotient.7702@ohm>
Message-ID: <bee5dcb46af6143e3f904a953f502e37@delx.cjb.net>

On 23/05/2005, at 11:23 PM, Jp Calderone wrote:

> On Mon, 23 May 2005 22:08:43 +1000, James Bunton <james at delx.cjb.net> 
> wrote:
>> Well, I got it to work properly now :)
>>
>> http://msn-transport.jabberstudio.org/tarballs/epoll-0.2.tar.gz
>>
>> It's now uses the epoll edge triggered flag, and doesn't chew 99% CPU 
>> like the first one accidentally did.
>>
>
>  Neat.  There has been a level-triggered epoll reactor in my sandbox 
> for some time, but I was never able to get the edge triggered version 
> to work.
>
>  Hmm, running the Twisted test suite with this version doesn't do too 
> well either.  A few tests fail here and there before it gets totally 
> wedged on 
> twisted.test.test_pb.ConnectionTestCase.testIdentityConnector.
>
>  You can try this yourself by adding an entry for this reactor to the 
> dictionary at the top of twisted.application.app, then running "trial 
> -R -r epoll twisted", where "epoll" is the key you add to that dict.
>
>  Jp

A lot of these seem to fail when using the 'poll' and reactor also.
Broken tests or two broken reactors do you think?

But there are a few there I can fix. Thanks for the pointer :)

---

James




From exarkun at divmod.com  Tue May 24 09:48:07 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Tue, 24 May 2005 13:48:07 GMT
Subject: [Twisted-Python] epoll reactor
In-Reply-To: <bee5dcb46af6143e3f904a953f502e37@delx.cjb.net>
Message-ID: <20050524134807.559.1535540660.divmod.quotient.8568@ohm>

On Tue, 24 May 2005 23:13:51 +1000, James Bunton <james at delx.cjb.net> wrote:
>On 23/05/2005, at 11:23 PM, Jp Calderone wrote:
>>On Mon, 23 May 2005 22:08:43 +1000, James Bunton <james at delx.cjb.net> 
>>wrote:
>>>Well, I got it to work properly now :)
>>>
>>>http://msn-transport.jabberstudio.org/tarballs/epoll-0.2.tar.gz
>>>
>>>It's now uses the epoll edge triggered flag, and doesn't chew 99% CPU like 
>>>the first one accidentally did.
>>
>>  Neat.  There has been a level-triggered epoll reactor in my sandbox for 
>>some time, but I was never able to get the edge triggered version to work.
>>
>>  Hmm, running the Twisted test suite with this version doesn't do too well 
>>either.  A few tests fail here and there before it gets totally wedged on 
>>twisted.test.test_pb.ConnectionTestCase.testIdentityConnector.
>>
>>  You can try this yourself by adding an entry for this reactor to the 
>>dictionary at the top of twisted.application.app, then running "trial -R -r 
>>epoll twisted", where "epoll" is the key you add to that dict.
>>
>>  Jp
>
>A lot of these seem to fail when using the 'poll' and reactor also.
>Broken tests or two broken reactors do you think?
>
>But there are a few there I can fix. Thanks for the pointer :)

The poll reactor seems to be doing okay on the buildslave:

  http://twistedmatrix.com/buildbot/

Maybe it's skipping some tests that are running on your machine?

Jp



From nico at tekNico.net  Wed May 25 01:36:36 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 25 May 2005 07:36:36 +0200
Subject: [Twisted-Python] Twisted as subprocess
Message-ID: <42940EE4.9010901@tekNico.net>

I need to turn reactor.spawnProcess on its head.

That is, I need to run a Twisted-based program as a subprocess, getting
requests on stdin and giving responses on stdout. How do I hook up the
protocol and the rest?

It's going to be spawned by the snmpd daemon of net-snmp, via the
pass_persist directive in snmpd.conf .

-- 
Nicola Larosa - nico at tekNico.net

How can I in five minutes shift a lifetime's hidden pain?
 -- Julia Fordham, Girlfriend, Porcelain, 1989




From andrew-twisted at puzzling.org  Wed May 25 01:42:23 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 25 May 2005 15:42:23 +1000
Subject: [Twisted-Python] Twisted as subprocess
In-Reply-To: <42940EE4.9010901@tekNico.net>
References: <42940EE4.9010901@tekNico.net>
Message-ID: <20050525054223.GE26269@frobozz>

On Wed, May 25, 2005 at 07:36:36AM +0200, Nicola Larosa wrote:
> I need to turn reactor.spawnProcess on its head.
> 
> That is, I need to run a Twisted-based program as a subprocess, getting
> requests on stdin and giving responses on stdout. How do I hook up the
> protocol and the rest?

Use twisted.internet.stdio

-Andrew.




From nico at tekNico.net  Wed May 25 02:10:37 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 25 May 2005 08:10:37 +0200
Subject: [Twisted-Python] Re: Twisted as subprocess
In-Reply-To: <20050525054223.GE26269@frobozz>
References: <42940EE4.9010901@tekNico.net> <20050525054223.GE26269@frobozz>
Message-ID: <429416DD.2040500@tekNico.net>

>> I need to turn reactor.spawnProcess on its head.
>>
>> That is, I need to run a Twisted-based program as a subprocess, getting
>> requests on stdin and giving responses on stdout. How do I hook up the
>> protocol and the rest?

> Use twisted.internet.stdio

Thanks, couldn't rgrep it in the sources to save my life. And there's an
example too (stdin.py), woohoo!

BTW, that was fast. :-)

-- 
Nicola Larosa - nico at tekNico.net

How can I in five minutes shift a lifetime's hidden pain?
 -- Julia Fordham, Girlfriend, Porcelain, 1989




From andrew-twisted at puzzling.org  Wed May 25 02:27:57 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 25 May 2005 16:27:57 +1000
Subject: [Twisted-Python] Re: Twisted as subprocess
In-Reply-To: <429416DD.2040500@tekNico.net>
References: <42940EE4.9010901@tekNico.net> <20050525054223.GE26269@frobozz>
	<429416DD.2040500@tekNico.net>
Message-ID: <20050525062757.GH26269@frobozz>

On Wed, May 25, 2005 at 08:10:37AM +0200, Nicola Larosa wrote:
> >> I need to turn reactor.spawnProcess on its head.
> >>
> >> That is, I need to run a Twisted-based program as a subprocess, getting
> >> requests on stdin and giving responses on stdout. How do I hook up the
> >> protocol and the rest?
> 
> > Use twisted.internet.stdio
> 
> Thanks, couldn't rgrep it in the sources to save my life. And there's an
> example too (stdin.py), woohoo!
> 
> BTW, that was fast. :-)

It helped that my answer was so lazy ;)

-Andrew.




From roland.hedberg at adm.umu.se  Wed May 25 03:15:58 2005
From: roland.hedberg at adm.umu.se (Roland Hedberg)
Date: Wed, 25 May 2005 09:15:58 +0200
Subject: [Twisted-Python] Sending arguments to application 
Message-ID: <648FE2DC-EFBB-46E5-B9A8-5ED4C57DF326@adm.umu.se>

Hi!

I using the variant "twistd -y foo.py" and I would like to be able to  
send arguments to foo.py in the same command.

The preferable way would be something like

"twistd -y foo.py arg1 arg2"

But that doesn't work, twistd complains.

If it can be done some other way, how ?

-- Roland



From jraghul85 at hotmail.com  Wed May 25 06:20:54 2005
From: jraghul85 at hotmail.com (Raghul Jagan)
Date: Wed, 25 May 2005 15:50:54 +0530
Subject: [Twisted-Python] Twisted server connection loss with Mysql
Message-ID: <BAY12-F832526F5B5785508C06A8AD0E0@phx.gbl>

Dear Friends,

                       I am using a twisted server to connect the mysql 
database using "adbapi".When I start my server the connection to the mysql 
established and the run as a separate thread. Suppose If the database is 
restarted or there is a response delay, then the twisted server losses the 
connection and when I tried by quering the database it reports the error 
giving "Loss in mysql connection".
                               I also tried  using the twisted 2.0 
version,but no way it does not connects automatically.

                  Friends, Please give a solution for this problem.

_________________________________________________________________
Get yourself a brand new Mobile. 
http://adfarm.mediaplex.com/ad/ck/4686-26272-10936-378?ck=BuyNewMobile 
Find,Compare & BUY IT NOW on eBay.in!




From johannes.beigel at brainbot.com  Wed May 25 06:29:42 2005
From: johannes.beigel at brainbot.com (Johannes Beigel)
Date: Wed, 25 May 2005 12:29:42 +0200
Subject: [Twisted-Python] Handle Control-C
Message-ID: <1117016982.19990.16.camel@localhost.localdomain>

Is there a (preferred) way to handle breaks with Control-C?

I'm aware of reactor.addSystemEventTrigger("before", "shutdown",...),
but I'd like to do some stuff with a fully running reactor and then call
reactor.stop() manually after some Deferreds come back.

-jojo





From andrew-twisted at puzzling.org  Wed May 25 07:44:07 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 25 May 2005 21:44:07 +1000
Subject: [Twisted-Python] Twisted server connection loss with Mysql
In-Reply-To: <BAY12-F832526F5B5785508C06A8AD0E0@phx.gbl>
References: <BAY12-F832526F5B5785508C06A8AD0E0@phx.gbl>
Message-ID: <20050525114407.GA2398@frobozz>

On Wed, May 25, 2005 at 03:50:54PM +0530, Raghul Jagan wrote:
> Dear Friends,
> 
>                       I am using a twisted server to connect the mysql 
> database using "adbapi".When I start my server the connection to the mysql 
> established and the run as a separate thread. Suppose If the database is 
> restarted or there is a response delay, then the twisted server losses the 
> connection and when I tried by quering the database it reports the error 
> giving "Loss in mysql connection".
>                               I also tried  using the twisted 2.0 
> version,but no way it does not connects automatically.
> 
>                  Friends, Please give a solution for this problem.

Pass cp_reconnect=1 to your adbapi.ConnectionPool, and it should reconnect
automatically.

-Andrew.



From exarkun at divmod.com  Wed May 25 07:48:57 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 25 May 2005 11:48:57 GMT
Subject: [Twisted-Python] Handle Control-C
In-Reply-To: <1117016982.19990.16.camel@localhost.localdomain>
Message-ID: <20050525114857.559.928643277.divmod.quotient.9351@ohm>

On Wed, 25 May 2005 12:29:42 +0200, Johannes Beigel <johannes.beigel at brainbot.com> wrote:
>Is there a (preferred) way to handle breaks with Control-C?
>
>I'm aware of reactor.addSystemEventTrigger("before", "shutdown",...),
>but I'd like to do some stuff with a fully running reactor and then call
>reactor.stop() manually after some Deferreds come back.

Your before shutdown trigger can return a Deferred.  The reactor won't go away until after the Deferred fires.

Jp



From boomberschloss at yahoo.com  Wed May 25 08:21:20 2005
From: boomberschloss at yahoo.com (Joachim Boomberschloss)
Date: Wed, 25 May 2005 05:21:20 -0700 (PDT)
Subject: [Twisted-Python] cleanup in twisted
In-Reply-To: 6667
Message-ID: <20050525122120.64271.qmail@web53109.mail.yahoo.com>


--- Jp Calderone <exarkun at divmod.com> wrote:
> On Mon, 23 May 2005 05:12:49 -0700 (PDT), Joachim
> Boomberschloss <boomberschloss at yahoo.com> wrote:
> >
> >--- Jp Calderone <exarkun at divmod.com> wrote:
> >> On Mon, 23 May 2005 02:40:53 -0700 (PDT), Joachim
> >> Boomberschloss <boomberschloss at yahoo.com> wrote:
> >> >
> >> >--- Bob Ippolito <bob at redivi.com> wrote:
> >> >>
> >> >> On May 22, 2005, at 8:46 AM, Joachim
> >> Boomberschloss
> >> >> wrote:
> >> >>
> >> >> > I just jotted down a little mechanism for
> >> >> cleaning-up
> >> >> > in Twisted, and I wanted to see if:
> >> >> > 1. other people think it's needed
> >> >> > 2. other people manage to use it
> >> >> >
> >> >> > What this does is enable one to define a
> >> >> __cleanup__
> >> >> > method which gets call either when the
> instance
> >> is
> >> >> > deleted, or when the reactor shuts down. It
> can
> >> >> return
> >> >> > a dereffed that delays the shutdown. The
> >> benefit
> >> >> is
> >> >> > being able to define communication-related
> >> stuff
> >> >> in
> >> >> > the cleanup method, which is not so useful
> to
> >> do
> >> >> in
> >> >> > __del__.
> >> >>
> >> >> This is just begging for object leaks, because
> >> >> __del__ disables
> >> >> aspects of cyclic GC.
> >> >
> >> >Hmmpf. What does this mean, and is there a
> simple
> >> way
> >> >of resolving it?
> >> >
> >>
> >>   If you construct a reference cycle which
> contains
> >> an object which has a __del__ method, the entire
> >> cycle becomes "garbage" - Python cannot free any
> of
> >> the objects or call any of their __del__ methods.
> >> Instead, it puts them into the gc module's
> `garbage'
> >> list and leaves them there forever.
> >>
> >>   There's no simple way to resolve this (except
> to
> >> not implement __del__, of course ;).
> >>
> >>   A non-simple way to resolve it is to use
> weakref
> >> callbacks instead of __del__.  Weakref callbacks
> >> have some nasty bugs in versions of Python older
> >> than 2.3.5 (more, the further back you go), and
> >> they're trickier to use than __del__.  They don't
> >> create garbage cycles, though.
> >>
> >
> >Can you point me to an example of this (preferably
> in
> >Twisted)? Is this whole cleanup thing worth my time
> >fixing it in your opinion?
> >
> 
> Twisted doesn't make use of it, due to the
> instabilities in previous Python versions (which
> Twisted still supports).
> 
> Another technique I didn't mention is to move the
> __del__ implementation off of the object which might
> participate in a cycle and onto a subsidiary object.
>  Deferreds do this in Twisted 2.0.  As a general
> technique, this doesn't make much sense, since it
> depends on knowledge of the structure of specific
> object graphs (ie, you need to know where cycles
> will form and where they will not).
> 
> I'm not sure if it's worth the effort.  I don't
> exactly see the attraction of the functionality
> being provided.  I tend to find that explicit
> cleanup is not overly burdensome.  Perhaps you can
> share some examples of how you see it being used?

Well, the attraction is this: I ran into situations in
which it is desirable for an object to do some
communication-related cleanup when deleted, either
when the program shuts down or when it is no longer
referenced. For example, I have objects responsible
for maintaining communication with some servers, and I
want them to inform the server when they cease to
maintain communication with it. This should be done
either when the service is no longer necessary and the
object (the maintainer) is deleted, or when the
program shuts down, so basically, the functionality
required is to be able to define communication-related
stuff (i.e. things that aren't instantaneous and
involve deferreds) to be done either when the object
is deleted or when twisted shuts down. The latter is
easy to do, but the former isn't, and come to think of
it, my solution isn't good regardless of reference
cycles, because, since the cleanup method is spawned
from __del__, it has to do the cleanup instantaneously
or the cleanup process won't be able to refer to the
object at a later stage. Basically what is needed is
to be able to defer the destruction of the object both
at program shutdown, which is easy, and before object
deletion, which I don't know how to do. Any thoughts
(either about the attractiveness of the functionality
or about how to achieve it)?

Joe.


		
__________________________________ 
Yahoo! Mail 
Stay connected, organized, and protected. Take the tour: 
http://tour.mail.yahoo.com/mailtour.html 




From exarkun at divmod.com  Wed May 25 08:58:51 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 25 May 2005 12:58:51 GMT
Subject: [Twisted-Python] cleanup in twisted
In-Reply-To: <20050525122120.64271.qmail@web53109.mail.yahoo.com>
Message-ID: <20050525125851.559.745604057.divmod.quotient.9393@ohm>

On Wed, 25 May 2005 05:21:20 -0700 (PDT), Joachim Boomberschloss <boomberschloss at yahoo.com> wrote:
>
>--- Jp Calderone <exarkun at divmod.com> wrote:
>> On Mon, 23 May 2005 05:12:49 -0700 (PDT), Joachim
>> Boomberschloss <boomberschloss at yahoo.com> wrote:
>> >
>> >--- Jp Calderone <exarkun at divmod.com> wrote:
>> >> On Mon, 23 May 2005 02:40:53 -0700 (PDT), Joachim
>> >> Boomberschloss <boomberschloss at yahoo.com> wrote:
>> >> >
>> >> >--- Bob Ippolito <bob at redivi.com> wrote:
>> >> >>
>> >> >> On May 22, 2005, at 8:46 AM, Joachim
>> >> Boomberschloss
>> >> >> wrote:
>> >> >>
>> >> >> > I just jotted down a little mechanism for
>> >> >> cleaning-up
>> >> >> > in Twisted, and I wanted to see if:
>> >> >> > 1. other people think it's needed
>> >> >> > 2. other people manage to use it
>> >> >> >
>> >> >> > What this does is enable one to define a
>> >> >> __cleanup__
>> >> >> > method which gets call either when the
>> instance
>> >> is
>> >> >> > deleted, or when the reactor shuts down. It
>> can
>> >> >> return
>> >> >> > a dereffed that delays the shutdown. The
>> >> benefit
>> >> >> is
>> >> >> > being able to define communication-related
>> >> stuff
>> >> >> in
>> >> >> > the cleanup method, which is not so useful
>> to
>> >> do
>> >> >> in
>> >> >> > __del__.
>> >> >>
>> >> >> This is just begging for object leaks, because
>> >> >> __del__ disables
>> >> >> aspects of cyclic GC.
>> >> >
>> >> >Hmmpf. What does this mean, and is there a
>> simple
>> >> way
>> >> >of resolving it?
>> >> >
>> >>
>> >>   If you construct a reference cycle which
>> contains
>> >> an object which has a __del__ method, the entire
>> >> cycle becomes "garbage" - Python cannot free any
>> of
>> >> the objects or call any of their __del__ methods.
>> >> Instead, it puts them into the gc module's
>> `garbage'
>> >> list and leaves them there forever.
>> >>
>> >>   There's no simple way to resolve this (except
>> to
>> >> not implement __del__, of course ;).
>> >>
>> >>   A non-simple way to resolve it is to use
>> weakref
>> >> callbacks instead of __del__.  Weakref callbacks
>> >> have some nasty bugs in versions of Python older
>> >> than 2.3.5 (more, the further back you go), and
>> >> they're trickier to use than __del__.  They don't
>> >> create garbage cycles, though.
>> >>
>> >
>> >Can you point me to an example of this (preferably
>> in
>> >Twisted)? Is this whole cleanup thing worth my time
>> >fixing it in your opinion?
>> >
>>
>> Twisted doesn't make use of it, due to the
>> instabilities in previous Python versions (which
>> Twisted still supports).
>>
>> Another technique I didn't mention is to move the
>> __del__ implementation off of the object which might
>> participate in a cycle and onto a subsidiary object.
>>  Deferreds do this in Twisted 2.0.  As a general
>> technique, this doesn't make much sense, since it
>> depends on knowledge of the structure of specific
>> object graphs (ie, you need to know where cycles
>> will form and where they will not).
>>
>> I'm not sure if it's worth the effort.  I don't
>> exactly see the attraction of the functionality
>> being provided.  I tend to find that explicit
>> cleanup is not overly burdensome.  Perhaps you can
>> share some examples of how you see it being used?
>
>Well, the attraction is this: I ran into situations in
>which it is desirable for an object to do some
>communication-related cleanup when deleted, either
>when the program shuts down or when it is no longer
>referenced. For example, I have objects responsible
>for maintaining communication with some servers, and I
>want them to inform the server when they cease to
>maintain communication with it. This should be done
>either when the service is no longer necessary and the
>object (the maintainer) is deleted, or when the
>program shuts down, so basically, the functionality
>required is to be able to define communication-related
>stuff (i.e. things that aren't instantaneous and
>involve deferreds) to be done either when the object
>is deleted or when twisted shuts down. The latter is
>easy to do, but the former isn't, and come to think of
>it, my solution isn't good regardless of reference
>cycles, because, since the cleanup method is spawned
>from __del__, it has to do the cleanup instantaneously
>or the cleanup process won't be able to refer to the
>object at a later stage. Basically what is needed is
>to be able to defer the destruction of the object both
>at program shutdown, which is easy, and before object
>deletion, which I don't know how to do. Any thoughts
>(either about the attractiveness of the functionality
>or about how to achieve it)?
>

Rescuing an object from garbage collection is easier than you may expect:

  exarkun at boson:~$ python
  Python 2.4.1 (#2, Mar 30 2005, 21:51:10) 
  [GCC 3.3.5 (Debian 1:3.3.5-8ubuntu2)] on linux2
  Type "help", "copyright", "credits" or "license" for more information.
  >>> L = []
  >>> class Foo:
  ...     def __del__(self):
  ...             L.append(self)
  ... 
  >>> f = Foo()
  >>> del f
  >>> L
  [<__main__.Foo instance at 0xb7dff34c>]
  >>> 

Of course, for it to ever be collected, you'll need to take it out of that list.

Jp



From boomberschloss at yahoo.com  Wed May 25 09:12:16 2005
From: boomberschloss at yahoo.com (Joachim Boomberschloss)
Date: Wed, 25 May 2005 06:12:16 -0700 (PDT)
Subject: [Twisted-Python] cleanup in twisted
In-Reply-To: <20050525125851.559.745604057.divmod.quotient.9393@ohm>
Message-ID: <20050525131216.40438.qmail@web53103.mail.yahoo.com>


--- Jp Calderone <exarkun at divmod.com> wrote:

> On Wed, 25 May 2005 05:21:20 -0700 (PDT), Joachim
> Boomberschloss <boomberschloss at yahoo.com> wrote:
> >
> > ...
> >>
> >> I'm not sure if it's worth the effort.  I don't
> >> exactly see the attraction of the functionality
> >> being provided.  I tend to find that explicit
> >> cleanup is not overly burdensome.  Perhaps you
> can
> >> share some examples of how you see it being used?
> >
> >Well, the attraction is this: I ran into situations
> in
> >which it is desirable for an object to do some
> >communication-related cleanup when deleted, either
> >when the program shuts down or when it is no longer
> >referenced. For example, I have objects responsible
> >for maintaining communication with some servers,
> and I
> >want them to inform the server when they cease to
> >maintain communication with it. This should be done
> >either when the service is no longer necessary and
> the
> >object (the maintainer) is deleted, or when the
> >program shuts down, so basically, the functionality
> >required is to be able to define
> communication-related
> >stuff (i.e. things that aren't instantaneous and
> >involve deferreds) to be done either when the
> object
> >is deleted or when twisted shuts down. The latter
> is
> >easy to do, but the former isn't, and come to think
> of
> >it, my solution isn't good regardless of reference
> >cycles, because, since the cleanup method is
> spawned
> >from __del__, it has to do the cleanup
> instantaneously
> >or the cleanup process won't be able to refer to
> the
> >object at a later stage. Basically what is needed
> is
> >to be able to defer the destruction of the object
> both
> >at program shutdown, which is easy, and before
> object
> >deletion, which I don't know how to do. Any
> thoughts
> >(either about the attractiveness of the
> functionality
> >or about how to achieve it)?
> >
> 
> Rescuing an object from garbage collection is easier
> than you may expect:
> 
>   exarkun at boson:~$ python
>   Python 2.4.1 (#2, Mar 30 2005, 21:51:10) 
>   [GCC 3.3.5 (Debian 1:3.3.5-8ubuntu2)] on linux2
>   Type "help", "copyright", "credits" or "license"
> for more information.
>   >>> L = []
>   >>> class Foo:
>   ...     def __del__(self):
>   ...             L.append(self)
>   ... 
>   >>> f = Foo()
>   >>> del f
>   >>> L
>   [<__main__.Foo instance at 0xb7dff34c>]
>   >>> 
> 
> Of course, for it to ever be collected, you'll need
> to take it out of that list.
> 

Hmmm. Good to know. I thought this sort of thing was
considered illegal in Python. This resolves deferring
the destruction, but not the problem with reference
cycles. Is there any way to do it without __del__?

I thought of one crazy option: create a reference
cycle intentionally in the class' __init__, and then
run a looping call that will check gc.garbage from
time to time. If the object appears there, then we
know that it's safe to delete it; we can call the
__cleanup__ method and afterwards break the reference
cycle and delete the object.

Joe.


		
__________________________________
Discover Yahoo! 
Find restaurants, movies, travel and more fun for the weekend. Check it out! 
http://discover.yahoo.com/weekend.html 




From exarkun at divmod.com  Wed May 25 09:27:27 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 25 May 2005 13:27:27 GMT
Subject: [Twisted-Python] cleanup in twisted
In-Reply-To: <20050525131216.40438.qmail@web53103.mail.yahoo.com>
Message-ID: <20050525132727.559.1013261196.divmod.quotient.9413@ohm>

On Wed, 25 May 2005 06:12:16 -0700 (PDT), Joachim Boomberschloss <boomberschloss at yahoo.com> wrote:
>
>--- Jp Calderone <exarkun at divmod.com> wrote:
>
>> [snip]
>>
>> Rescuing an object from garbage collection is easier
>> than you may expect:
>>
>>   exarkun at boson:~$ python
>>   Python 2.4.1 (#2, Mar 30 2005, 21:51:10)
>>   [GCC 3.3.5 (Debian 1:3.3.5-8ubuntu2)] on linux2
>>   Type "help", "copyright", "credits" or "license"
>> for more information.
>>   >>> L = []
>>   >>> class Foo:
>>   ...     def __del__(self):
>>   ...             L.append(self)
>>   ...
>>   >>> f = Foo()
>>   >>> del f
>>   >>> L
>>   [<__main__.Foo instance at 0xb7dff34c>]
>>   >>>
>>
>> Of course, for it to ever be collected, you'll need
>> to take it out of that list.
>>
>
>Hmmm. Good to know. I thought this sort of thing was
>considered illegal in Python. This resolves deferring
>the destruction, but not the problem with reference
>cycles. Is there any way to do it without __del__?

The garbage collector goes to great lengths to make sure it works :)

Well, here's an example of how you'd use weakrefs.  It may or may not apply to your case:

  exarkun at boson:~$ python
  Python 2.4.1 (#2, Mar 30 2005, 21:51:10) 
  [GCC 3.3.5 (Debian 1:3.3.5-8ubuntu2)] on linux2
  Type "help", "copyright", "credits" or "license" for more information.
  >>> import weakref
  >>> def cleanup(handle):
  ...     print 'Cleaned up', handle
  ... 
  >>> class Foo:
  ...     def __init__(self, x, y, z):
  ...         self.x, self.y, self.z = x, y, z
  ...         self._cleanup = weakref.ref(
  ...             self, lambda deadref: cleanup(x))
  ... 
  >>> f = Foo('hello', 'world', 42)
  >>> del f
  Cleaned up hello
  >>> 

The main point here is the isolation of the objects needed for actual cleanup from the object which may participate in a cycle. In this way, it is similar to moving the __del__ implementation onto a separate class.

Since the cleanup callback does not have access to the instance, it is somewhat more limited.  For example, if the `x' attribute of a Foo instance is ever changed, the callback will still be invoked with the original value.

Jp



From james at delx.cjb.net  Wed May 25 09:30:52 2005
From: james at delx.cjb.net (James Bunton)
Date: Wed, 25 May 2005 23:30:52 +1000
Subject: [Twisted-Python] epoll reactor
In-Reply-To: <20050524134807.559.1535540660.divmod.quotient.8568@ohm>
References: <20050524134807.559.1535540660.divmod.quotient.8568@ohm>
Message-ID: <98310e0a7ff4b2b883d9afa5eaf4305d@delx.cjb.net>

On 24/05/2005, at 11:48 PM, Jp Calderone wrote:

> On Tue, 24 May 2005 23:13:51 +1000, James Bunton <james at delx.cjb.net> 
> wrote:
>> On 23/05/2005, at 11:23 PM, Jp Calderone wrote:
>>> On Mon, 23 May 2005 22:08:43 +1000, James Bunton 
>>> <james at delx.cjb.net> wrote:
>>>> Well, I got it to work properly now :)
>>>>
>>>> http://msn-transport.jabberstudio.org/tarballs/epoll-0.2.tar.gz
>>>>
>>>> It's now uses the epoll edge triggered flag, and doesn't chew 99% 
>>>> CPU like the first one accidentally did.
>>>
>>>  Neat.  There has been a level-triggered epoll reactor in my sandbox 
>>> for some time, but I was never able to get the edge triggered 
>>> version to work.
>>>
>>>  Hmm, running the Twisted test suite with this version doesn't do 
>>> too well either.  A few tests fail here and there before it gets 
>>> totally wedged on 
>>> twisted.test.test_pb.ConnectionTestCase.testIdentityConnector.
>>>
>>>  You can try this yourself by adding an entry for this reactor to 
>>> the dictionary at the top of twisted.application.app, then running 
>>> "trial -R -r epoll twisted", where "epoll" is the key you add to 
>>> that dict.
>>>
>>>  Jp
>>
>> A lot of these seem to fail when using the 'poll' and reactor also.
>> Broken tests or two broken reactors do you think?
>>
>> But there are a few there I can fix. Thanks for the pointer :)
>
> The poll reactor seems to be doing okay on the buildslave:
>
>  http://twistedmatrix.com/buildbot/
>
> Maybe it's skipping some tests that are running on your machine?
>
> Jp

Do you know how I can tell which tests are ok to skip? And how to skip 
them?
The buildbot page didn't seem to say what tests were actually run, only 
the warnings that occurred.

http://msn-transport.jabberstudio.org/tarballs/epoll-0.3.tar.gz
That should do a little better with the tests. It still fails some, but 
they seem to be the same ones that poll fails also.

---

James




From exarkun at divmod.com  Wed May 25 09:52:39 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 25 May 2005 13:52:39 GMT
Subject: [Twisted-Python] epoll reactor
In-Reply-To: <98310e0a7ff4b2b883d9afa5eaf4305d@delx.cjb.net>
Message-ID: <20050525135239.559.805993620.divmod.quotient.9429@ohm>

On Wed, 25 May 2005 23:30:52 +1000, James Bunton <james at delx.cjb.net> wrote:
>On 24/05/2005, at 11:48 PM, Jp Calderone wrote:
>>On Tue, 24 May 2005 23:13:51 +1000, James Bunton <james at delx.cjb.net> 
>>wrote:
>>>On 23/05/2005, at 11:23 PM, Jp Calderone wrote:
>>>>On Mon, 23 May 2005 22:08:43 +1000, James Bunton <james at delx.cjb.net> 
>>>>wrote:
>>>>>Well, I got it to work properly now :)
>>>>>
>>>>>http://msn-transport.jabberstudio.org/tarballs/epoll-0.2.tar.gz
>>>>>
>>>>>It's now uses the epoll edge triggered flag, and doesn't chew 99% CPU 
>>>>>like the first one accidentally did.
>>>>
>>>>  Neat.  There has been a level-triggered epoll reactor in my sandbox for 
>>>>some time, but I was never able to get the edge triggered version to 
>>>>work.
>>>>
>>>>  Hmm, running the Twisted test suite with this version doesn't do too 
>>>>well either.  A few tests fail here and there before it gets totally 
>>>>wedged on twisted.test.test_pb.ConnectionTestCase.testIdentityConnector.
>>>>
>>>>  You can try this yourself by adding an entry for this reactor to the 
>>>>dictionary at the top of twisted.application.app, then running "trial -R 
>>>>-r epoll twisted", where "epoll" is the key you add to that dict.
>>>>
>>>>  Jp
>>>
>>>A lot of these seem to fail when using the 'poll' and reactor also.
>>>Broken tests or two broken reactors do you think?
>>>
>>>But there are a few there I can fix. Thanks for the pointer :)
>>
>>The poll reactor seems to be doing okay on the buildslave:
>>
>>  http://twistedmatrix.com/buildbot/
>>
>>Maybe it's skipping some tests that are running on your machine?
>>
>>Jp
>
>Do you know how I can tell which tests are ok to skip? And how to skip them?
>The buildbot page didn't seem to say what tests were actually run, only the 
>warnings that occurred.

If you check out the "problems" link, it lists which tests are being skipped.  One such page is at <http://twistedmatrix.com/buildbot/reactors/builds/389/poll/2>.

>
>http://msn-transport.jabberstudio.org/tarballs/epoll-0.3.tar.gz
>That should do a little better with the tests. It still fails some, but they 
>seem to be the same ones that poll fails also.

Cool, I'll give it a try later today.

Jp



From andrew-twisted at puzzling.org  Wed May 25 09:56:56 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 25 May 2005 23:56:56 +1000
Subject: [Twisted-Python] epoll reactor
In-Reply-To: <98310e0a7ff4b2b883d9afa5eaf4305d@delx.cjb.net>
References: <20050524134807.559.1535540660.divmod.quotient.8568@ohm>
	<98310e0a7ff4b2b883d9afa5eaf4305d@delx.cjb.net>
Message-ID: <20050525135656.GL26269@frobozz>

On Wed, May 25, 2005 at 11:30:52PM +1000, James Bunton wrote:
[...]
> The buildbot page didn't seem to say what tests were actually run, only 
> the warnings that occurred.

The buildbot page does give the full test output in the "log" links, as well
as the full test.log file in the "test.log" links.  The "problems" and
"warnings" links are filtered versions of the "log" output.

-Andrew.




From corydodt at twistedmatrix.com  Wed May 25 11:03:32 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Wed, 25 May 2005 08:03:32 -0700
Subject: [Twisted-Python] Sending arguments to application
In-Reply-To: <648FE2DC-EFBB-46E5-B9A8-5ED4C57DF326@adm.umu.se>
References: <648FE2DC-EFBB-46E5-B9A8-5ED4C57DF326@adm.umu.se>
Message-ID: <429493C4.1040405@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

That's just not how twistd -y works.  The argument is supposed to be something
called a "TAC" file, which is just a config file that happens to have Python
syntax.  In other words, you put your arguments inside it.  You can name the
file .py if you want to, but conceptually it's still supposed to be a config file.

If you want another way of configuring your application, you need to provide
your own main entry point, and use something (probably twisted.python.usage)
to process the command-line arguments.

C


Roland Hedberg wrote:
| Hi!
|
| I using the variant "twistd -y foo.py" and I would like to be able to
| send arguments to foo.py in the same command.
|
| The preferable way would be something like
|
| "twistd -y foo.py arg1 arg2"
|
| But that doesn't work, twistd complains.
|
| If it can be done some other way, how ?
|
| -- Roland
|
| _______________________________________________
| Twisted-Python mailing list
| Twisted-Python at twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFClJPE3A5SrXAiHQcRAmEOAJ9uzbwF0rVjL7z1S3xPry3DHwPQngCgpp1K
oE33gI5ZMR+E4doPe53XRUI=
=Ak7g
-----END PGP SIGNATURE-----



From ian at ianduggan.net  Wed May 25 13:19:21 2005
From: ian at ianduggan.net (Ian Duggan)
Date: Wed, 25 May 2005 10:19:21 -0700
Subject: [Twisted-Python] Sending arguments to application
In-Reply-To: <648FE2DC-EFBB-46E5-B9A8-5ED4C57DF326@adm.umu.se>
References: <648FE2DC-EFBB-46E5-B9A8-5ED4C57DF326@adm.umu.se>
Message-ID: <200505251019.22164.ian@ianduggan.net>


On Wednesday 25 May 2005 00:15, Roland Hedberg wrote:
> I using the variant "twistd -y foo.py" and I would like to be able to
> send arguments to foo.py in the same command.
>
> The preferable way would be something like
>
> "twistd -y foo.py arg1 arg2"
>
> But that doesn't work, twistd complains.
>
> If it can be done some other way, how ?

I wanted the functionality of twistd as well as the ability to pass arguments 
to my script too. I managed to do something that worked for my by turning 
things inside out and having my script execute twistd as needed. 

The trick was to use an if/else around the __name__ == __main__ statement.

from twisted.python import usage
import twisted.scripts.twistd as td

# setup command parsing here

if __name__ == '__main__':
    #run twistd here
    tdcmds = ["-o", "-y", __file__]
    config = parse_options()

    # add more options to tdcmds
    ....

    # all
    tdoptions = td.ServerOptions()
    tdoptions.parseOptions(tdcmds)
    td.runApp(tdoptions)

else:
    # setup the application object -- gets run when twistd loads this file
    application = service.Application('sampleserver')
    serviceCollection = service.IServiceCollection(application)
    internet.UDPServer(config['port'], SampleProtocol()
                                        ).setServiceParent(serviceCollection)


--Ian
-------------- next part --------------
A non-text attachment was scrubbed...
Name: sample.py
Type: application/x-python
Size: 3059 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050525/3cb4cd90/attachment.bin 

From james at delx.cjb.net  Wed May 25 16:11:26 2005
From: james at delx.cjb.net (James Bunton)
Date: Thu, 26 May 2005 06:11:26 +1000
Subject: [Twisted-Python] epoll reactor
In-Reply-To: <20050525135656.GL26269@frobozz>
References: <20050524134807.559.1535540660.divmod.quotient.8568@ohm>
	<98310e0a7ff4b2b883d9afa5eaf4305d@delx.cjb.net>
	<20050525135656.GL26269@frobozz>
Message-ID: <190bf2c1de5b2f4cb4217a682317c261@delx.cjb.net>


On 25/05/2005, at 11:56 PM, Andrew Bennetts wrote:

> On Wed, May 25, 2005 at 11:30:52PM +1000, James Bunton wrote:
> [...]
>> The buildbot page didn't seem to say what tests were actually run, 
>> only
>> the warnings that occurred.
>
> The buildbot page does give the full test output in the "log" links, 
> as well
> as the full test.log file in the "test.log" links.  The "problems" and
> "warnings" links are filtered versions of the "log" output.
>
> -Andrew.

I thought they were all the same link :)
Thanks

---

James




From theshz at gmail.com  Thu May 26 02:37:50 2005
From: theshz at gmail.com (theshz)
Date: Wed, 25 May 2005 23:37:50 -0700
Subject: [Twisted-Python] generating and handling events
References: <20050520232600.559.607604854.divmod.quotient.5672@ohm>
Message-ID: <001901c561bd$70d94e90$053310ac@sv.us.sonicwall.com>

Hi, from the documentation I could only find examples where the events are
related more to Deferred, i.e., a method call that may take sometime. I'm a
little confused about the difference between this and the "traditional" kind
of event handling. Are they the same with just different terminology? By
"traditional", I mean that in part of the code, I generate an event, say a
"step 1 finished event", somewhere else there is a handler waiting for this
event. The reactor is responsible for dispatching this event to that
handler, which hopefull starts step 2. Or even more, like publish-subscribe:
multiple handers can register for the same event. In other words, these
events are generated internally, not necessarily by such delays like
network, file access, or user input. Is this doable in Twisted?

Thanks.

Z.




From bob at redivi.com  Thu May 26 04:00:30 2005
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 26 May 2005 01:00:30 -0700
Subject: [Twisted-Python] generating and handling events
In-Reply-To: <001901c561bd$70d94e90$053310ac@sv.us.sonicwall.com>
References: <20050520232600.559.607604854.divmod.quotient.5672@ohm>
	<001901c561bd$70d94e90$053310ac@sv.us.sonicwall.com>
Message-ID: <0832951E-EADD-4A8F-BF74-93E1C9F2D6B8@redivi.com>

On May 25, 2005, at 11:37 PM, theshz wrote:

> Hi, from the documentation I could only find examples where the  
> events are
> related more to Deferred, i.e., a method call that may take  
> sometime. I'm a
> little confused about the difference between this and the  
> "traditional" kind
> of event handling. Are they the same with just different  
> terminology? By
> "traditional", I mean that in part of the code, I generate an  
> event, say a
> "step 1 finished event", somewhere else there is a handler waiting  
> for this
> event. The reactor is responsible for dispatching this event to that
> handler, which hopefull starts step 2. Or even more, like publish- 
> subscribe:
> multiple handers can register for the same event. In other words,  
> these
> events are generated internally, not necessarily by such delays like
> network, file access, or user input. Is this doable in Twisted?

Deferreds are just objects that have a list of (result, error)  
callback pairs.  When the result or error is available, it's passed  
to the first appropriate callback.  The result or error returned by  
that callback is sent to the next, etc.  Its job is to pass that  
*single* result on to everything in its callback chain either one or  
zero times, and then it should be garbage collected because its job  
is done.

The way this would works is like this (bare bones example without any  
error handling, etc.):

###

from twisted.internet import defer, reactor

def step1():
     d = defer.Deferred()
     # In two seconds, call the callback with the result 42
     reactor.callLater(2.0, d.callback, 7)
     return d

def step2(resultOfStep1):
     d = defer.Deferred()
     # In two seconds, call the callback with the result of the
     # argument times 6
     reactor.callLater(2.0, d.callback, resultOfStep1 * 6)
     return d

def doAllSteps():
     # step1 returns a deferred
     d = step1()
     # step 2 takes the result of step1 as an argument
     # so we can use it as the callback for the deferred,
     # since the callback always receives the result as the
     # first argument
     d = d.addCallback(step2)
     # the other thing to note is that step2 returns a deferred, which
     # will automatically be chained, so we can just return it here
     # as our deferred
     return d

def main():
     def printResultAndQuit(result):
         print "the answer is:", result
         reactor.stop()

     d = doAllSteps()
     d.addCallback(printResultAndQuit)

     # this should think for about 4 seconds,
     # print the answer to everything, and then
     # return.
     reactor.run()

if __name__ == '__main__':
     main()

###

It is an excellent primitive for building a notification system on  
top of, but it isn't one.  As you can see in Twisted's source, there  
is rarely a need for an event dispatching system, so one doesn't  
really exist (there is one on the reactor for startup and shutdown  
events, but that's about it).  In almost all cases the "problem" is  
solved by:
(a) having some particular name for a method to be implemented in a  
subclass (e.g. subclass LineReceiver and implement lineReceived)
(b) using a delegate that implements some method with a particular  
name (e.g. protocols telling their transport to lose connection, or  
transports notifying their protocol of a lost connection)
(c) using deferreds (i.e. twisted.web.server.Request.notifyFinish)

The only one that looks like traditional publish-subscribe is really  
the reactor's system events (twisted.internet.interfaces.IReactorCore)

-bob




From michele.petrazzo at unipex.it  Thu May 26 08:29:44 2005
From: michele.petrazzo at unipex.it (Michele Petrazzo)
Date: Thu, 26 May 2005 14:29:44 +0200
Subject: [Twisted-Python] threadedselectreactor
Message-ID: <4295C138.8040708@unipex.it>

I found some messages that explain the new threadedselectreactor 
function, but on the last package 2.0.1 I don't found that file. Where 
can I download this new function/file?
And after, is this a stable or only an unstable version?

Thanks,
Michele



From andrew-twisted at puzzling.org  Thu May 26 08:50:48 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 26 May 2005 22:50:48 +1000
Subject: [Twisted-Python] threadedselectreactor
In-Reply-To: <4295C138.8040708@unipex.it>
References: <4295C138.8040708@unipex.it>
Message-ID: <20050526125048.GW26269@frobozz>

On Thu, May 26, 2005 at 02:29:44PM +0200, Michele Petrazzo wrote:
> I found some messages that explain the new threadedselectreactor 
> function, but on the last package 2.0.1 I don't found that file. Where 
> can I download this new function/file?
> And after, is this a stable or only an unstable version?

2.0.1 only contains bugfixes for 2.0.  threadedselectreactor is a new
feature, not a bugfix, so isn't in 2.0.1.  It should be in 2.1, when that
gets released.

-Andrew.




From boomberschloss at yahoo.com  Thu May 26 10:21:00 2005
From: boomberschloss at yahoo.com (Joachim Boomberschloss)
Date: Thu, 26 May 2005 07:21:00 -0700 (PDT)
Subject: [Twisted-Python] cleanup in twisted
In-Reply-To: 6667
Message-ID: <20050526142100.97199.qmail@web53108.mail.yahoo.com>


--- Jp Calderone <exarkun at divmod.com> wrote:
> On Wed, 25 May 2005 06:12:16 -0700 (PDT), Joachim
> Boomberschloss <boomberschloss at yahoo.com> wrote:
> >
> >--- Jp Calderone <exarkun at divmod.com> wrote:
> >
> >> [snip]
> >>
> >> Rescuing an object from garbage collection is
> easier
> >> than you may expect:
> >>
> >>   exarkun at boson:~$ python
> >>   Python 2.4.1 (#2, Mar 30 2005, 21:51:10)
> >>   [GCC 3.3.5 (Debian 1:3.3.5-8ubuntu2)] on linux2
> >>   Type "help", "copyright", "credits" or
> "license"
> >> for more information.
> >>   >>> L = []
> >>   >>> class Foo:
> >>   ...     def __del__(self):
> >>   ...             L.append(self)
> >>   ...
> >>   >>> f = Foo()
> >>   >>> del f
> >>   >>> L
> >>   [<__main__.Foo instance at 0xb7dff34c>]
> >>   >>>
> >>
> >> Of course, for it to ever be collected, you'll
> need
> >> to take it out of that list.
> >>
> >
> >Hmmm. Good to know. I thought this sort of thing
> was
> >considered illegal in Python. This resolves
> deferring
> >the destruction, but not the problem with reference
> >cycles. Is there any way to do it without __del__?
> 
> The garbage collector goes to great lengths to make
> sure it works :)
> 
> Well, here's an example of how you'd use weakrefs. 
> It may or may not apply to your case:
> 
>   exarkun at boson:~$ python
>   Python 2.4.1 (#2, Mar 30 2005, 21:51:10) 
>   [GCC 3.3.5 (Debian 1:3.3.5-8ubuntu2)] on linux2
>   Type "help", "copyright", "credits" or "license"
> for more information.
>   >>> import weakref
>   >>> def cleanup(handle):
>   ...     print 'Cleaned up', handle
>   ... 
>   >>> class Foo:
>   ...     def __init__(self, x, y, z):
>   ...         self.x, self.y, self.z = x, y, z
>   ...         self._cleanup = weakref.ref(
>   ...             self, lambda deadref: cleanup(x))
>   ... 
>   >>> f = Foo('hello', 'world', 42)
>   >>> del f
>   Cleaned up hello
>   >>> 
> 
> The main point here is the isolation of the objects
> needed for actual cleanup from the object which may
> participate in a cycle. In this way, it is similar
> to moving the __del__ implementation onto a separate
> class.
> 
> Since the cleanup callback does not have access to
> the instance, it is somewhat more limited.  For
> example, if the `x' attribute of a Foo instance is
> ever changed, the callback will still be invoked
> with the original value.
> 

Got it. Well, indeed, this is not exactly what I need
because of the limitation you mentioned, but I think I
found a solution: to have a global object that points
to all instances of Cleanuppable, and a LoopingCall
that checks every minute or so whether this global
object is the only referrer to each Cleanuppable
instance, in which case it activates the __cleanup__
method of the Cleanuppable, and waits for the
procedure to complete, then deletes the instance. This
is somewhat unelegant (because of the arbitrariness of
the LoopingCall as opposed to being dependent on the
garbage collection process), but I think it should be
completely satisfactory functionality-wise.

This brings me back to the question of attractiveness,
which makes me suspect that I am missing some point.
What I thought was that it would be very convenient to
be able to specify once, using a simple Twisted-style
idiom, what should happen with an object when it is no
longer needed, which, because of the way Twisted
works, should be given a chance to execute before the
reactor shuts down, but similarly when the object
simply dies out normally (i.e. the point here is being
able to use deferred to specify a non-instantaneous
cleanup procedure). An example of this would be an
object that interacts with a remote server that should
notify the server before retiring from the
interaction.

I think the method I proposed including the missing
element I described above handles this nicely. I'm not
sure what you meant by explicit cleanup.

Joe.

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From lc278 at cornell.edu  Thu May 26 12:10:06 2005
From: lc278 at cornell.edu (Laran Evans)
Date: Thu, 26 May 2005 12:10:06 -0400
Subject: [Twisted-Python] clustering or process group replication
Message-ID: <4295F4DE.8020403@cornell.edu>

Has any work been done to enable process group communication similar to 
what Spread (spread.org), Ensemble, Horus, Isis, Eternal etc. offer?

- Laran




From itamar at itamarst.org  Thu May 26 12:25:17 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 26 May 2005 12:25:17 -0400
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <4295F4DE.8020403@cornell.edu>
References: <4295F4DE.8020403@cornell.edu>
Message-ID: <1117124718.8747.41.camel@localhost.localdomain>

On Thu, 2005-05-26 at 12:10 -0400, Laran Evans wrote:
> Has any work been done to enable process group communication similar to 
> what Spread (spread.org), Ensemble, Horus, Isis, Eternal etc. offer?

I've built a reliable multicast (1->N ordered reliable message delivery,
NACK-based, with congestion control) system for work using Twisted and
the Fusion C++ Twisted bindings (http://itamarst.org/software/), but it
is not open source.

-- 
Itamar Shtull-Trauring <itamar at itamarst.org>
http://itamarst.org




From lc278 at cornell.edu  Thu May 26 12:34:56 2005
From: lc278 at cornell.edu (Laran Evans)
Date: Thu, 26 May 2005 12:34:56 -0400
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <1117124718.8747.41.camel@localhost.localdomain>
References: <4295F4DE.8020403@cornell.edu>
	<1117124718.8747.41.camel@localhost.localdomain>
Message-ID: <4295FAB0.9000608@cornell.edu>

Would there be any value to developing such a system? Have you found 
what you built for work valuable?

Itamar Shtull-Trauring wrote:
> On Thu, 2005-05-26 at 12:10 -0400, Laran Evans wrote:
> 
>>Has any work been done to enable process group communication similar to 
>>what Spread (spread.org), Ensemble, Horus, Isis, Eternal etc. offer?
> 
> 
> I've built a reliable multicast (1->N ordered reliable message delivery,
> NACK-based, with congestion control) system for work using Twisted and
> the Fusion C++ Twisted bindings (http://itamarst.org/software/), but it
> is not open source.
> 




From mike at mkp.ca  Thu May 26 13:34:57 2005
From: mike at mkp.ca (Mike Pelletier)
Date: Thu, 26 May 2005 13:34:57 -0400
Subject: [Twisted-Python] adbapi and pymssql
Message-ID: <200505261334.58599.mike@mkp.ca>

I am attempting to use pymssql in an new Twisted app I am developing for a 
client (so please don't ask for a lot of detail).  pymssql claims to 
implement "most" of ADBAPI 2.0 and it's not on the list of known supported 
back ends, so I realize I'm pressing my luck a bit here.

Bare pymssql seemed to work well, so I pressed on and attempted to use it with 
adbapi.  Here is what I am using for testing:

from twisted.internet import reactor
from twisted.enterprise import adbapi
from agent.db import makeDbpool

def printResultAndDie(*result):
    print "result:", result
    reactor.stop()

def printErrorAndDie(error):
    error.printTraceback()
    reactor.stop()

import sys
dbpool = makeDbpool()
query = " ".join(sys.argv[1:])
print query
d = dbpool.runQuery(query)
d.addCallbacks(printResultAndDie, printErrorAndDie)
reactor.run()

This reports an error, though it appears on the server that the transaction 
was completely successful.  The exception is thrown by adbapi.py:310, 
"self._rollback(trans)".  This line is itself in an exception handler, and it 
is handling an exception thrown by line 306, "trans._connection.commit()".

A little further testing suggested to me that there is nothing obviously wrong 
with pymssql's commit or rollback features.  The problem seems to be line 
305: "trans.close()".  I guess pymssql doesn't support commits and rollbacks 
after that, which seems almost reasonable.  (Mind, I am in much deeper than I 
have any actual understanding.)

I have locally modified _runinteraction.  I would *really* appreciate it if 
someone took a look at my changes.  I don't understand why close() is 
supposed to be called before commit() or rollback(), so maybe this is a 
completely wrongheaded move on my part.  Here is my version:

    def _runInteraction(self, interaction, *args, **kw):
        trans = Transaction(self)
        try:
            try:
                result = interaction(trans, *args, **kw)
                trans._connection.commit()
            except:
                self._rollback(trans)
                raise
        finally:
            trans.close()
        return result

And for comparison, the original:

    def _runInteraction(self, interaction, *args, **kw):
        trans = Transaction(self)
        try:
            result = interaction(trans, *args, **kw)
            trans.close()
            trans._connection.commit()
            return result
        except:
            self._rollback(trans)
            raise

Thanks in advance!

Mike.



From itamar at itamarst.org  Thu May 26 15:48:51 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 26 May 2005 15:48:51 -0400
Subject: [Twisted-Python] adbapi and pymssql
In-Reply-To: <200505261334.58599.mike@mkp.ca>
References: <200505261334.58599.mike@mkp.ca>
Message-ID: <1117136932.12130.1.camel@localhost.localdomain>

On Thu, 2005-05-26 at 13:34 -0400, Mike Pelletier wrote:

> I have locally modified _runinteraction.  I would *really* appreciate it if 
> someone took a look at my changes.  I don't understand why close() is 
> supposed to be called before commit() or rollback(), so maybe this is a 
> completely wrongheaded move on my part.  Here is my version:

Could you submit a patch with bug description
http://twistedmatrix.com/bugs/? Thanks.




From incoming at pronet-romania.com  Thu May 26 16:31:17 2005
From: incoming at pronet-romania.com (Tibi Dondera)
Date: Thu, 26 May 2005 22:31:17 +0200
Subject: [Twisted-Python] Chat by html application
In-Reply-To: <1117136932.12130.1.camel@localhost.localdomain>
Message-ID: <008f01c56231$df2412d0$f300a8c0@mobile>

Hello all,

I'm trying to develop a chat application through a browser, using
twisted (if possible)
What I want to do:
 - a user logs in the website
 - he goes to the "chat page"
 - he has the "classic" chat interface (sent messages, list of online
users, "send a message" field). All of these are simple "divs"
 - when he sends a message, a post with the message is submitted to the
server, and registered in a temporary database table (or in memory, is
there some "temporary" memory that I can use in twisted for this purpose
?)
 - for refreshing the chat area, there is an open HTTPRequest in the
background. Twisted will do the following:
     - accept the HTTPrequest connection
     - keep it alive (i.e. do not send the answer, but maybe send some
empty chars to force the browser to keep the connection open)
     - when a new message (from the other users) is available, send it
to the user and close the connection.
 - in the user's browser, when the connection is closed (either with a
message, or after a certain timeout, that cannot be avoided anyway), a
new one will be opened, until the user quits the chat.

Questions:
- Is this a plausible solution ?
- Has this already been implemented (or at least partly) ?
- Can this actually be done with twisted ?
- Can I develop this on Windows ? (production will be on linux, but
still, I prefer developing local, and currently on windows)
- Can you give me any pointers to some existing code, or where to start
? (maybe jabber for twisted ?)
- How will a twisted http server coexist with my existing apache server
on the 80 port ?
- Must I subscribe to the twisted-http mailing list instead and ask this
question there ?

Thanks for any help.

Tibi Dondera





From pradu at pradu.it  Thu May 26 16:34:55 2005
From: pradu at pradu.it (Alessandro Praduroux)
Date: Thu, 26 May 2005 22:34:55 +0200
Subject: [Twisted-Python] adbapi and pymssql
In-Reply-To: <200505261334.58599.mike@mkp.ca>
References: <200505261334.58599.mike@mkp.ca>
Message-ID: <200505262234.55318.pradu@pradu.it>

Nothing to do with your problem here, but I just want to report my experience 
interacting with MSSQL.

I have a small job scheduling application written with twisted + nevow for one 
of my customer and the database is MSSQL 2000. I am using the sybase module 
built against freetds with a very small patch to fix a rollback/commit issue, 
and it's working without a problem on production servers using adbapi since a 
year or so.

http://www.object-craft.com.au/projects/sybase/

just my 0.02 $

Pradu

Alle 19:34, gioved? 26 maggio 2005, Mike Pelletier ha scritto:
> I am attempting to use pymssql in an new Twisted app I am developing for a
> client (so please don't ask for a lot of detail).  pymssql claims to
> implement "most" of ADBAPI 2.0 and it's not on the list of known supported
> back ends, so I realize I'm pressing my luck a bit here.
>
> Thanks in advance!
>
> Mike.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
Linux developer & sysadmin
http://www.pradu.it
pradu at pradu.it



From jason.mobarak at gmail.com  Thu May 26 16:39:39 2005
From: jason.mobarak at gmail.com (Jason Mobarak)
Date: Thu, 26 May 2005 14:39:39 -0600
Subject: [Twisted-Python] Chat by html application
In-Reply-To: <008f01c56231$df2412d0$f300a8c0@mobile>
References: <1117136932.12130.1.camel@localhost.localdomain>
	<008f01c56231$df2412d0$f300a8c0@mobile>
Message-ID: <b194c9190505261339679a95ab@mail.gmail.com>

Use Nevow... see the Chatola example, it already does some of this.

http://nevow.org/
http://divmod.org/users/wiki.twistd/nevow/moin.cgi
http://divmod.org/projects/nevow

On 5/26/05, Tibi Dondera <incoming at pronet-romania.com> wrote:
> Hello all,
> 
> I'm trying to develop a chat application through a browser, using
> twisted (if possible)
> What I want to do:
>  - a user logs in the website
>  - he goes to the "chat page"
>  - he has the "classic" chat interface (sent messages, list of online
> users, "send a message" field). All of these are simple "divs"
>  - when he sends a message, a post with the message is submitted to the
> server, and registered in a temporary database table (or in memory, is
> there some "temporary" memory that I can use in twisted for this purpose
> ?)
>  - for refreshing the chat area, there is an open HTTPRequest in the
> background. Twisted will do the following:
>      - accept the HTTPrequest connection
>      - keep it alive (i.e. do not send the answer, but maybe send some
> empty chars to force the browser to keep the connection open)
>      - when a new message (from the other users) is available, send it
> to the user and close the connection.
>  - in the user's browser, when the connection is closed (either with a
> message, or after a certain timeout, that cannot be avoided anyway), a
> new one will be opened, until the user quits the chat.
> 
> Questions:
> - Is this a plausible solution ?
> - Has this already been implemented (or at least partly) ?
> - Can this actually be done with twisted ?
> - Can I develop this on Windows ? (production will be on linux, but
> still, I prefer developing local, and currently on windows)
> - Can you give me any pointers to some existing code, or where to start
> ? (maybe jabber for twisted ?)
> - How will a twisted http server coexist with my existing apache server
> on the 80 port ?
> - Must I subscribe to the twisted-http mailing list instead and ask this
> question there ?
> 
> Thanks for any help.
> 
> Tibi Dondera
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From jason.mobarak at gmail.com  Thu May 26 16:40:28 2005
From: jason.mobarak at gmail.com (Jason Mobarak)
Date: Thu, 26 May 2005 14:40:28 -0600
Subject: [Twisted-Python] Chat by html application
In-Reply-To: <b194c9190505261339679a95ab@mail.gmail.com>
References: <1117136932.12130.1.camel@localhost.localdomain>
	<008f01c56231$df2412d0$f300a8c0@mobile>
	<b194c9190505261339679a95ab@mail.gmail.com>
Message-ID: <b194c919050526134056ba0031@mail.gmail.com>

...and your nevow related questions should be directed at the
twisted-web mailing list.

On 5/26/05, Jason Mobarak <jason.mobarak at gmail.com> wrote:
> Use Nevow... see the Chatola example, it already does some of this.
> 
> http://nevow.org/
> http://divmod.org/users/wiki.twistd/nevow/moin.cgi
> http://divmod.org/projects/nevow
> 
> On 5/26/05, Tibi Dondera <incoming at pronet-romania.com> wrote:
> > Hello all,
> >
> > I'm trying to develop a chat application through a browser, using
> > twisted (if possible)
> > What I want to do:
> >  - a user logs in the website
> >  - he goes to the "chat page"
> >  - he has the "classic" chat interface (sent messages, list of online
> > users, "send a message" field). All of these are simple "divs"
> >  - when he sends a message, a post with the message is submitted to the
> > server, and registered in a temporary database table (or in memory, is
> > there some "temporary" memory that I can use in twisted for this purpose
> > ?)
> >  - for refreshing the chat area, there is an open HTTPRequest in the
> > background. Twisted will do the following:
> >      - accept the HTTPrequest connection
> >      - keep it alive (i.e. do not send the answer, but maybe send some
> > empty chars to force the browser to keep the connection open)
> >      - when a new message (from the other users) is available, send it
> > to the user and close the connection.
> >  - in the user's browser, when the connection is closed (either with a
> > message, or after a certain timeout, that cannot be avoided anyway), a
> > new one will be opened, until the user quits the chat.
> >
> > Questions:
> > - Is this a plausible solution ?
> > - Has this already been implemented (or at least partly) ?
> > - Can this actually be done with twisted ?
> > - Can I develop this on Windows ? (production will be on linux, but
> > still, I prefer developing local, and currently on windows)
> > - Can you give me any pointers to some existing code, or where to start
> > ? (maybe jabber for twisted ?)
> > - How will a twisted http server coexist with my existing apache server
> > on the 80 port ?
> > - Must I subscribe to the twisted-http mailing list instead and ask this
> > question there ?
> >
> > Thanks for any help.
> >
> > Tibi Dondera
> >
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
>



From ian at ianduggan.net  Thu May 26 16:52:06 2005
From: ian at ianduggan.net (Ian Duggan)
Date: Thu, 26 May 2005 13:52:06 -0700
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <4295FAB0.9000608@cornell.edu>
References: <4295F4DE.8020403@cornell.edu>
	<1117124718.8747.41.camel@localhost.localdomain>
	<4295FAB0.9000608@cornell.edu>
Message-ID: <200505261352.06873.ian@ianduggan.net>


I'd be interested in something like this as well, mostly in regards to 
clustering various twisted servers I am working on.

--Ian


On Thursday 26 May 2005 09:34, Laran Evans wrote:
> Would there be any value to developing such a system? Have you found
> what you built for work valuable?
>
> Itamar Shtull-Trauring wrote:
> > On Thu, 2005-05-26 at 12:10 -0400, Laran Evans wrote:
> >>Has any work been done to enable process group communication similar to
> >>what Spread (spread.org), Ensemble, Horus, Isis, Eternal etc. offer?
> >
> > I've built a reliable multicast (1->N ordered reliable message delivery,
> > NACK-based, with congestion control) system for work using Twisted and
> > the Fusion C++ Twisted bindings (http://itamarst.org/software/), but it
> > is not open source.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From mike at mkp.ca  Thu May 26 16:53:35 2005
From: mike at mkp.ca (Mike Pelletier)
Date: Thu, 26 May 2005 16:53:35 -0400
Subject: [Twisted-Python] adbapi and pymssql
In-Reply-To: <200505262234.55318.pradu@pradu.it>
References: <200505261334.58599.mike@mkp.ca>
	<200505262234.55318.pradu@pradu.it>
Message-ID: <200505261653.37873.mike@mkp.ca>

On Thu May 26 2005 04:34 pm, you wrote:
> I have a small job scheduling application written with twisted + nevow for
> one of my customer and the database is MSSQL 2000. I am using the sybase
> module built against freetds with a very small patch to fix a
> rollback/commit issue, and it's working without a problem on production
> servers using adbapi since a year or so.

Thanks a TON!  I did not really even know I had an option to choose another 
database module, I thought pymssql would be my only option.  But, since 
pymssql seems to be just a thin layer on top of freetds, your solution is 
probably very relevant to my problem.

Could you go into more detail about the rollback/commit issue you encountered, 
and how you dealt with it?  I expect the problem probably isn't really with 
Twisted at all.  My patch was developed through blind thrashing.

Thanks!

Mike.



From darran.edmundson at anu.edu.au  Thu May 26 20:48:19 2005
From: darran.edmundson at anu.edu.au (Darran Edmundson)
Date: Fri, 27 May 2005 10:48:19 +1000
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <4295FAB0.9000608@cornell.edu>
References: <4295F4DE.8020403@cornell.edu>
	<1117124718.8747.41.camel@localhost.localdomain>
	<4295FAB0.9000608@cornell.edu>
Message-ID: <7A9CC12E-E88B-4788-A3BE-13C961B35B49@anu.edu.au>


On 27/05/2005, at 2:34 AM, Laran Evans wrote:

> Would there be any value to developing such a system? Have you  
> found what you built for work valuable?
>
> Itamar Shtull-Trauring wrote:
>
>> I've built a reliable multicast (1->N ordered reliable message  
>> delivery,
>> NACK-based, with congestion control) system for work using Twisted  
>> and
>> the Fusion C++ Twisted bindings (http://itamarst.org/software/),  
>> but it
>> is not open source.
>>
>

Useful?  Wow, this is *exactly* what we are after for use within the  
Access Grid (www.accessgrid.org).
This community has invested a lot of time in getting multicast  
connectivity between the 200+ sites
currently involved.  Ie., we've got the network backbone.  At the  
moment we are only using multicast
for the RTP media transport (the old mbone tools vic and rat, the  
newer VideoPresence tool VP).  It would
be great though to have a framework reliable message delivery over  
multicast for some of the
lighter weight collaborative tools we are building.  At the moment,  
AccessGrid uses a centralized
VenueServer and TCP for coordinating sessions.

Cheers,
darran.

Darran Edmundson (darran.edmundson at anu.edu.au)
ANU Supercomputer Facility Vizlab
Australian National University, Canberra, ACT 2600
tel: +61 2 6125-0517  fax: +61 2 6125-5088





From lc278 at cornell.edu  Thu May 26 21:52:20 2005
From: lc278 at cornell.edu (Laran Evans)
Date: Thu, 26 May 2005 21:52:20 -0400
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <7A9CC12E-E88B-4788-A3BE-13C961B35B49@anu.edu.au>
References: <4295F4DE.8020403@cornell.edu>	<1117124718.8747.41.camel@localhost.localdomain>	<4295FAB0.9000608@cornell.edu>
	<7A9CC12E-E88B-4788-A3BE-13C961B35B49@anu.edu.au>
Message-ID: <42967D54.4010503@cornell.edu>

Hmmm. Well, it sounds like there's a bit of interest here. I'm game for 
starting a discussion about what such a toolkit might look like if 
anyone else is interested.

There are plenty of toolkits that do this sort of thing. But I'm 
interested in building one from scratch. And it seems like there's 
already a lot to Twister to plug into.

If any of the Twister admins have any suggestions, objections or 
otherwise they would be appreciated. If you're not interested in 
building something like this into Twister it can always be done in parallel.

- Laran

Darran Edmundson wrote:
> 
> On 27/05/2005, at 2:34 AM, Laran Evans wrote:
> 
>> Would there be any value to developing such a system? Have you  found 
>> what you built for work valuable?
>>
>> Itamar Shtull-Trauring wrote:
>>
>>> I've built a reliable multicast (1->N ordered reliable message  
>>> delivery,
>>> NACK-based, with congestion control) system for work using Twisted  and
>>> the Fusion C++ Twisted bindings (http://itamarst.org/software/),  but it
>>> is not open source.
>>>
>>
> 
> Useful?  Wow, this is *exactly* what we are after for use within the  
> Access Grid (www.accessgrid.org).
> This community has invested a lot of time in getting multicast  
> connectivity between the 200+ sites
> currently involved.  Ie., we've got the network backbone.  At the  
> moment we are only using multicast
> for the RTP media transport (the old mbone tools vic and rat, the  newer 
> VideoPresence tool VP).  It would
> be great though to have a framework reliable message delivery over  
> multicast for some of the
> lighter weight collaborative tools we are building.  At the moment,  
> AccessGrid uses a centralized
> VenueServer and TCP for coordinating sessions.
> 
> Cheers,
> darran.
> 
> Darran Edmundson (darran.edmundson at anu.edu.au)
> ANU Supercomputer Facility Vizlab
> Australian National University, Canberra, ACT 2600
> tel: +61 2 6125-0517  fax: +61 2 6125-5088
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
- Laran Evans




From darran.edmundson at anu.edu.au  Thu May 26 22:07:41 2005
From: darran.edmundson at anu.edu.au (Darran Edmundson)
Date: Fri, 27 May 2005 12:07:41 +1000
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <42967D54.4010503@cornell.edu>
References: <4295F4DE.8020403@cornell.edu>	<1117124718.8747.41.camel@localhost.localdomain>	<4295FAB0.9000608@cornell.edu>
	<7A9CC12E-E88B-4788-A3BE-13C961B35B49@anu.edu.au>
	<42967D54.4010503@cornell.edu>
Message-ID: <E5FA10CE-4D31-4DBA-AAEC-E98959878213@anu.edu.au>


On 27/05/2005, at 11:52 AM, Laran Evans wrote:

> Hmmm. Well, it sounds like there's a bit of interest here. I'm game  
> for starting a discussion about what such a toolkit might look like  
> if anyone else is interested.
>
> There are plenty of toolkits that do this sort of thing. But I'm  
> interested in building one from scratch. And it seems like there's  
> already a lot to Twister to plug into.
>
> If any of the Twister admins have any suggestions, objections or  
> otherwise they would be appreciated. If you're not interested in  
> building something like this into Twister it can always be done in  
> parallel.
>
>

Our guys here at the ANU Supercomputer Facility are using "MCLv3: an  
Open Source
Implementation of the ALC and NORM Reliable Multicast Protocols":
      http://www.inrialpes.fr/planete/people/roca/mcl/ldpc_infos.html
in their software for replication of kernel images out to the 1600  
processors
on our new SGI Altix system.  They are really happy with the library.

On my personal to-do list is creating python bindings for MCLv3
which I then planned to use with twisted for some Access Grid work ...

Cheers,
darran.

Darran Edmundson (darran.edmundson at anu.edu.au)
ANU Supercomputer Facility Vizlab
Australian National University, Canberra, ACT 2600
tel: +61 2 6125-0517  fax: +61 2 6125-5088





From lc278 at cornell.edu  Thu May 26 22:46:45 2005
From: lc278 at cornell.edu (Laran Evans)
Date: Thu, 26 May 2005 22:46:45 -0400
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <E5FA10CE-4D31-4DBA-AAEC-E98959878213@anu.edu.au>
References: <4295F4DE.8020403@cornell.edu>	<1117124718.8747.41.camel@localhost.localdomain>	<4295FAB0.9000608@cornell.edu>	<7A9CC12E-E88B-4788-A3BE-13C961B35B49@anu.edu.au>	<42967D54.4010503@cornell.edu>
	<E5FA10CE-4D31-4DBA-AAEC-E98959878213@anu.edu.au>
Message-ID: <42968A15.1090200@cornell.edu>

Is MCLv3 also being used for the accessgrid work?

I'm curious. Why was MCLv3 chosen?

- Laran

Darran Edmundson wrote:
> 
> On 27/05/2005, at 11:52 AM, Laran Evans wrote:
> 
>> Hmmm. Well, it sounds like there's a bit of interest here. I'm game  
>> for starting a discussion about what such a toolkit might look like  
>> if anyone else is interested.
>>
>> There are plenty of toolkits that do this sort of thing. But I'm  
>> interested in building one from scratch. And it seems like there's  
>> already a lot to Twister to plug into.
>>
>> If any of the Twister admins have any suggestions, objections or  
>> otherwise they would be appreciated. If you're not interested in  
>> building something like this into Twister it can always be done in  
>> parallel.
>>
>>
> 
> Our guys here at the ANU Supercomputer Facility are using "MCLv3: an  
> Open Source
> Implementation of the ALC and NORM Reliable Multicast Protocols":
>      http://www.inrialpes.fr/planete/people/roca/mcl/ldpc_infos.html
> in their software for replication of kernel images out to the 1600  
> processors
> on our new SGI Altix system.  They are really happy with the library.
> 
> On my personal to-do list is creating python bindings for MCLv3
> which I then planned to use with twisted for some Access Grid work ...
> 
> Cheers,
> darran.
> 
> Darran Edmundson (darran.edmundson at anu.edu.au)
> ANU Supercomputer Facility Vizlab
> Australian National University, Canberra, ACT 2600
> tel: +61 2 6125-0517  fax: +61 2 6125-5088
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
- Laran Evans




From darran.edmundson at anu.edu.au  Thu May 26 23:48:00 2005
From: darran.edmundson at anu.edu.au (Darran Edmundson)
Date: Fri, 27 May 2005 13:48:00 +1000
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <42968A15.1090200@cornell.edu>
References: <4295F4DE.8020403@cornell.edu>	<1117124718.8747.41.camel@localhost.localdomain>	<4295FAB0.9000608@cornell.edu>	<7A9CC12E-E88B-4788-A3BE-13C961B35B49@anu.edu.au>	<42967D54.4010503@cornell.edu>
	<E5FA10CE-4D31-4DBA-AAEC-E98959878213@anu.edu.au>
	<42968A15.1090200@cornell.edu>
Message-ID: <7F93DBED-ABA4-4D72-8906-05DCE5DA3F6B@anu.edu.au>


On 27/05/2005, at 12:46 PM, Laran Evans wrote:

> Is MCLv3 also being used for the accessgrid work?
>

No, that's what I want to implement.  In the current model,
the VenueServer acts as a common data store.  Fine for
little things but obviously doesn't allow impromptu "ah,
here's a 100Mb dataset for everyone to preview".


> I'm curious. Why was MCLv3 chosen?

By virtue of being the first library they found that
fulfilled their needs ;-)

Our guys have a 400Mb compressed node image that
the want to distribute.  It is transmitted in 1k packets (FEC
algorithm takes a list of pointers so no need to actually break
the data up), each 32Mb chunk being verified against a SHA1
hash.  Note, there is *no* feedback from the clients, we just
set a duplication factor of 1.5, a number empirically determined
to give reliable transfer on the local network.

Cheers,
Darran.



From pradu at pradu.it  Fri May 27 03:09:21 2005
From: pradu at pradu.it (Alessandro Praduroux)
Date: Fri, 27 May 2005 09:09:21 +0200
Subject: [Twisted-Python] adbapi and pymssql
In-Reply-To: <200505261653.37873.mike@mkp.ca>
References: <200505261334.58599.mike@mkp.ca>
	<200505262234.55318.pradu@pradu.it>
	<200505261653.37873.mike@mkp.ca>
Message-ID: <200505270909.21630.pradu@pradu.it>

The problem as I recall was related to the fact that a commit() not coupled 
with a begin() threw an exception, while all other DBAPI implementations were 
resilient to this kind of problem. So I use a slightly modified version of 
Sybase (that I'll send to you separately to avoid traffic on the list, if 
anyone else is interested I'll post it here too, I lost the original patch 
but I have the full package and I'm too lazy to recreate the patch).

A little disclaimer: freetds and thus Sybase.py do not yet implement query 
parameters, if you try using them you will get an error until the freetds 
people figure out how to implement this. I don't know if the mssql module 
implement a workaround for this, Sybase.py doesn't (but it should be fairly 
easy to do it in a compatible way).

HTH

Alle 22:53, gioved? 26 maggio 2005, Mike Pelletier ha scritto:
> On Thu May 26 2005 04:34 pm, you wrote:
> > I have a small job scheduling application written with twisted + nevow
> > for one of my customer and the database is MSSQL 2000. I am using the
> > sybase module built against freetds with a very small patch to fix a
> > rollback/commit issue, and it's working without a problem on production
> > servers using adbapi since a year or so.
>
> Thanks a TON!  I did not really even know I had an option to choose another
> database module, I thought pymssql would be my only option.  But, since
> pymssql seems to be just a thin layer on top of freetds, your solution is
> probably very relevant to my problem.
>
> Could you go into more detail about the rollback/commit issue you
> encountered, and how you dealt with it?  I expect the problem probably
> isn't really with Twisted at all.  My patch was developed through blind
> thrashing.
>
> Thanks!
>
> Mike.

-- 
Linux developer & sysadmin
http://www.pradu.it
pradu at pradu.it



From nkeric at gmail.com  Fri May 27 04:17:01 2005
From: nkeric at gmail.com (Eric Hsu)
Date: Fri, 27 May 2005 16:17:01 +0800
Subject: [Twisted-Python] How to create a new service and listen on a new
	port?
In-Reply-To: <43c0d2b5050523035061035df1@mail.gmail.com>
References: <43c0d2b5050522224949079041@mail.gmail.com>
	<20050523094143.559.1531852400.divmod.quotient.7609@ohm>
	<43c0d2b5050523035061035df1@mail.gmail.com>
Message-ID: <43c0d2b5050527011744ad7956@mail.gmail.com>

Now I've figured out the solution!
Just remove the "reactor.run()" as Jp suggestion!

Here is the sample code which fulfills my requirements:

class AClass(DatagramProtocol):
    def datagramReceived(self, data, addr):
        # do something...
        anotherService1 = reactor.listenUDP(port1, AnotherService())
        anotherService2 = reactor.listenUDP(port2, AnotherService())
        # ...
        anotherServiceN = reactor.listenUDP(portN, AnotherService())

        # if we want to stop one of the AnotherServiceS, just
        anotherServiceX.stopListening()
        
class AnotherService(DatagramProtocol):
     def datagramReceived(self, data, addr):
        # blah blah blah...

Thank you all guys!


2005/5/23, Eric Hsu <nkeric at gmail.com>:
> 2005/5/23, Jp Calderone <exarkun at divmod.com>:
> >   Since nothing is likely to call datagramReceived unless the reactor is running, and calling reactor.run() while the reactor is running is a terribly broken thing to do, the above code is likely mistaken in calling reactor.run().
> >
> >   I bet shutdown behavioor will become much nicer if you remove the call to reactor.run() here, and in any other similar places.
> >
> >   twistd will start and stop the reactor for you.
> >
> > Jp
>



From sc at linux.it  Fri May 27 12:07:26 2005
From: sc at linux.it (Stefano Canepa)
Date: Fri, 27 May 2005 18:07:26 +0200
Subject: [Twisted-Python] Some questions from a newby
Message-ID: <1117210046.11739.8.camel@localhost.localdomain>

Dear all,
	I am new to twisted and have some questions I cannot find answer in the
twisted documentation or using google.
1) in writing a server, what is better to write a twisted application to
be run using twistd -y or a python app using a reactor?
2) how do I use configuration without using a tac?

TIA
Stefano

-- 
Stefano Canepa - email: sc at linux.it - www: http://www.stefanocanepa.it
Three great virtues of a programmer: laziness, impatience and hubris.
Le tre grandi virt? di un programmatore: pigrizia, impazienza e arroganza.
                                                              (Larry Wall)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050527/43983ca5/attachment.pgp 

From Sl_Church at sbcglobal.net  Fri May 27 12:20:26 2005
From: Sl_Church at sbcglobal.net (Shawn Church)
Date: Fri, 27 May 2005 09:20:26 -0700
Subject: [Twisted-Python] threadedselectreactor
In-Reply-To: <4295C138.8040708@unipex.it>
References: <4295C138.8040708@unipex.it>
Message-ID: <429748CA.5050102@sbcglobal.net>

I got it by doing an svn co on the current development trunk
(instructions for doing this are at
http://twistedmatrix.com/developers/cvs) and then I copied the
threadedselectreactor.py file to the proper location in site-packages. 
You can also use web svn and just download the file by following this
link and selecting the revision you wish to download:

   
http://svn.twistedmatrix.com/cvs/trunk/twisted/internet/threadedselectreactor.py


Hope that helps.  BTW twistedselectreactor.py seems to work great for
what I need (although I am new to twisted and do not have much basis for
comparison.)


regards,


Shawn Church

Michele Petrazzo wrote:

> I found some messages that explain the new threadedselectreactor
> function, but on the last package 2.0.1 I don't found that file. Where
> can I download this new function/file?
> And after, is this a stable or only an unstable version?
>
> Thanks,
> Michele
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From Harald.Nyman at astrazeneca.com  Fri May 27 12:45:23 2005
From: Harald.Nyman at astrazeneca.com (Harald.Nyman at astrazeneca.com)
Date: Fri, 27 May 2005 18:45:23 +0200
Subject: [Twisted-Python] Chat by html application
Message-ID: <9F028CC77827D611ACEE0002A5F12F0708551629@semldsntmsx208.seml.astrazeneca.net>

Hi Tibi,

Nevow is probably the best. But there are other ways too. I've been
doing this for several years with a Tomcat servlet, and then there was
no Nevow. After converting to Pythonism, I switched to a Twisted server.
Haven't learned Nevow yet, despite good intentions..., but I think this
may be similar. It's essentially doing all of "What I want to do:"
below, only I'm not using it mainly for chat, but for distributing
HTML or Javascript, for viewing things together during a phone meeting.

 - the browser's background HTTPRequest sits in a threaded applet
 - someone switches on "collaboration" in his browser - the others see
   his name being added to the "virtual meeting"
 - one user drags a pointer (image) in his browser -> the pointer moves
   in the other browsers

See also some A's to your Q's, below.
Harald


On 5/26/05, Tibi Dondera <incoming at pronet-romania.com> wrote:
> Hello all,
> 
> I'm trying to develop a chat application through a browser, using
> twisted (if possible)
> What I want to do:
>  - a user logs in the website
>  - he goes to the "chat page"
>  - he has the "classic" chat interface (sent messages, list of online
> users, "send a message" field). All of these are simple "divs"
>  - when he sends a message, a post with the message is submitted to the
> server, and registered in a temporary database table (or in memory, is
> there some "temporary" memory that I can use in twisted for this purpose
> ?)
>  - for refreshing the chat area, there is an open HTTPRequest in the
> background. Twisted will do the following:
>      - accept the HTTPrequest connection
>      - keep it alive (i.e. do not send the answer, but maybe send some
> empty chars to force the browser to keep the connection open)
>      - when a new message (from the other users) is available, send it
> to the user and close the connection.
>  - in the user's browser, when the connection is closed (either with a
> message, or after a certain timeout, that cannot be avoided anyway), a
> new one will be opened, until the user quits the chat.
> 
> Questions:
> - Is this a plausible solution ?

Yes, IMHO.

> - Has this already been implemented (or at least partly) ?
> - Can this actually be done with twisted ?

Yes.

> - Can I develop this on Windows ? (production will be on linux, but
> still, I prefer developing local, and currently on windows)

Hmm.. I develop "on Windows", but with a VMWare Linux server on the
same laptop. Works great, but costs a bit. Should work with the server
on Windows, too(?)

> - Can you give me any pointers to some existing code, or where to start
> ? (maybe jabber for twisted ?)

Here's a few fragments from my server code -

class Servlet(resource.Resource):
    ...
# Send queued output to browser's background listener
    def render_GET(self, request):
        self.request = request
        session = request.getSession()
    ...
        anything = 0
        while not session.outqueue.empty():
            x = session.outqueue.get()
            request.transport.write(x)
            anything = 1
        if anything:
            request.finish()
        return server.NOT_DONE_YET
 
    def render_POST(self, request):  
        session = request.getSession()
# Browser sends a dictionary as text
        msgDict = eval(request.args['message'][0])
        request.finish()
        
        message = msgDict['message']
        mSplit = message.split()
        ... # Do work here
        return server.NOT_DONE_YET

> - How will a twisted http server coexist with my existing apache server
> on the 80 port ?

Not well, I guess. I use a different port for the Twisted server.

> - Must I subscribe to the twisted-http mailing list instead and ask this
> question there ?

Twisted-web would be better, yes. I'm posting this one there too, with all
due apologies...

> 
> Thanks for any help.
> 
> Tibi Dondera



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From michele.petrazzo at unipex.it  Fri May 27 13:30:31 2005
From: michele.petrazzo at unipex.it (Michele Petrazzo)
Date: Fri, 27 May 2005 19:30:31 +0200
Subject: [Twisted-Python] threadedselectreactor
In-Reply-To: <429748CA.5050102@sbcglobal.net>
References: <4295C138.8040708@unipex.it> <429748CA.5050102@sbcglobal.net>
Message-ID: <42975937.4070504@unipex.it>

Shawn Church wrote:
> You can also use web svn and just download the file by following this
>  link and selecting the revision you wish to download:
> 
> http://svn.twistedmatrix.com/cvs/trunk/twisted/internet/threadedselectreactor.py
> 
> 

Thanks!
I had downloaded this file, but I not didn't find any documentation for
use it. I try a threadedselectreactor.install(), but twisted say me that
there is another reactror installed.
Can you create a simple example?

Thanks,
Michele





From ian at ianduggan.net  Fri May 27 13:32:27 2005
From: ian at ianduggan.net (Ian Duggan)
Date: Fri, 27 May 2005 10:32:27 -0700
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <7F93DBED-ABA4-4D72-8906-05DCE5DA3F6B@anu.edu.au>
References: <4295F4DE.8020403@cornell.edu> <42968A15.1090200@cornell.edu>
	<7F93DBED-ABA4-4D72-8906-05DCE5DA3F6B@anu.edu.au>
Message-ID: <200505271032.27874.ian@ianduggan.net>


What would be the steps involved in integrating a few of the various protocols 
involved here. Is there a chance of having a common API, or do the "large 
blocks on the internet" variants need something different than something 
optimized for "small blocks on the lan". 

I don't have a really good notion of all these things, but I'm considering 
trying to integrate the spread.org stuff into twisted to achieve clustering 
of servers into a logical virtual server, for redundancy. There might be a 
simpler way to do the same thing. I'm still exploring.

Does anyone know of an example API for integrating several of the protocols 
into the same framework? How do these types of protocols break down into 
categories? 

--Ian




From lc278 at cornell.edu  Fri May 27 13:53:11 2005
From: lc278 at cornell.edu (Laran Evans)
Date: Fri, 27 May 2005 13:53:11 -0400
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <200505271032.27874.ian@ianduggan.net>
References: <4295F4DE.8020403@cornell.edu>
	<42968A15.1090200@cornell.edu>	<7F93DBED-ABA4-4D72-8906-05DCE5DA3F6B@anu.edu.au>
	<200505271032.27874.ian@ianduggan.net>
Message-ID: <42975E87.5000007@cornell.edu>

Well, there are a couple of things to consider. Here are a few.

1/. How many processes in the group. Most protocols work well in groups 
up to a few hundred. When you get over a thousand or so things start to 
get complicated. And above that there are protocols which use epidemic 
techniques, so-called "gossip" or "rumor"-based protocols. Bimodal 
multicast is one such protocol.

2/. Network environment. Protocols that run exclusively on a LAN can 
make certain assumptions that WAN-inclusive protocols can't. So, some 
protocols shift things around a bit, intentionally slowing things down 
to accomodate the WAN nodes. So the whole system runs some factor 
slower, but reliability is maintained.

Beyond that there are all sorts of techniques, each of which makes 
certain assumptions. So, which protocol to utilize depends on what type 
of environment you want to create for applications.

Spread's definitely a solid choice. JGroups, Ensemble, Horus, Isis, 
Totem, Transis and Eternal are all top-notch as well, each of which 
provides slightly different properties. There has been some talk lately 
on the JGroups mailing list about adding python extensions to JGroups. 
JGroups is what's used for clustering in Tomcat and JBoss I believe. 
Though I could be wrong about that.

There's one design in which I'm quite interested which was initially 
proposed for an international stock exchange. You can read about that 
protocol here:
http://portal.acm.org/citation.cfm?doid=380749.380771.
This particular design is specifically designed to work on the Internet. 
  And is based on TRMP.

So, I hope this helps.

- Laran

Ian Duggan wrote:
> What would be the steps involved in integrating a few of the various protocols 
> involved here. Is there a chance of having a common API, or do the "large 
> blocks on the internet" variants need something different than something 
> optimized for "small blocks on the lan". 
> 
> I don't have a really good notion of all these things, but I'm considering 
> trying to integrate the spread.org stuff into twisted to achieve clustering 
> of servers into a logical virtual server, for redundancy. There might be a 
> simpler way to do the same thing. I'm still exploring.
> 
> Does anyone know of an example API for integrating several of the protocols 
> into the same framework? How do these types of protocols break down into 
> categories? 
> 
> --Ian
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
- Laran Evans




From bob at redivi.com  Fri May 27 13:56:44 2005
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 27 May 2005 10:56:44 -0700
Subject: [Twisted-Python] threadedselectreactor
In-Reply-To: <42975937.4070504@unipex.it>
References: <4295C138.8040708@unipex.it> <429748CA.5050102@sbcglobal.net>
	<42975937.4070504@unipex.it>
Message-ID: <2A6126B2-AF8A-42E6-8944-2165B3311534@redivi.com>


On May 27, 2005, at 10:30 AM, Michele Petrazzo wrote:

> Shawn Church wrote:
>
>> You can also use web svn and just download the file by following this
>>  link and selecting the revision you wish to download:
>> http://svn.twistedmatrix.com/cvs/trunk/twisted/internet/ 
>> threadedselectreactor.py
>>
>
> Thanks!
> I had downloaded this file, but I not didn't find any documentation  
> for
> use it. I try a threadedselectreactor.install(), but twisted say me  
> that
> there is another reactror installed.
> Can you create a simple example?

http://svn.twistedmatrix.com/cvs/trunk/doc/core/examples/threadedselect/

-bob




From golux at comcast.net  Fri May 27 14:09:59 2005
From: golux at comcast.net (Stephen Waterbury)
Date: Fri, 27 May 2005 14:09:59 -0400
Subject: [Twisted-Python] Some questions from a newby
In-Reply-To: <1117210046.11739.8.camel@localhost.localdomain>
References: <1117210046.11739.8.camel@localhost.localdomain>
Message-ID: <42976277.6050701@comcast.net>

Stefano Canepa wrote:
> 1) in writing a server, what is better to write a twisted application to
> be run using twistd -y or a python app using a reactor?

Definitely the former.

> 2) how do I use configuration without using a tac?

I roll my own.  YMMV.

- Steve



From ross at sourcelabs.com  Fri May 27 14:35:46 2005
From: ross at sourcelabs.com (Ross Jekel)
Date: Fri, 27 May 2005 11:35:46 -0700
Subject: [Twisted-Python] xmlBlaster/twisted experience?
Message-ID: <1117218946.6801.7.camel@linux.site>

Has anyone out there used xmlBlaster with Twisted? They seem like a good
match. I'm considering taking the pyBlaster interface which basically
implements a standalone async threading xmlrpc client/server to handle
interfacing with xmlBlaster and rewriting it in twisted.

Before I do so, has anyone done this already? If not, I'll write what I
need and either try to get it in the xmlBlaster distribution and/or
distribute it here.

Any hints on the best way to do this would be appreciated.

Thanks,
Ross




From ian at ianduggan.net  Fri May 27 14:39:50 2005
From: ian at ianduggan.net (Ian Duggan)
Date: Fri, 27 May 2005 11:39:50 -0700
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <42975E87.5000007@cornell.edu>
References: <4295F4DE.8020403@cornell.edu>
	<200505271032.27874.ian@ianduggan.net>
	<42975E87.5000007@cornell.edu>
Message-ID: <200505271139.51008.ian@ianduggan.net>


> Well, there are a couple of things to consider. Here are a few.

Thanks, this is great.

> Spread's definitely a solid choice. JGroups, Ensemble, Horus, Isis,
> Totem, Transis and Eternal are all top-notch as well, each of which
> provides slightly different properties. There has been some talk lately
> on the JGroups mailing list about adding python extensions to JGroups.
> JGroups is what's used for clustering in Tomcat and JBoss I believe.
> Though I could be wrong about that.

I just took a peek at JGroups. It looks like their API includes a lot of 
switches you can tweak. Would that be a good starting point? It looks like 
it's used in some significant stuff.

http://www.jgroups.org/javagroupsnew/docs/success.html

Their overview page (http://www.jgroups.org/javagroupsnew/docs/overview.html) 
makes a decent case for their approach. I wonder if doing a mixin/layered 
approach to building protocols adds much overhead?

Transport protocols: UDP (IP Multicast), TCP, JMS
Fragmentation of large messages
Reliable unicast and multicast message transmission. Lost messages are 
retransmitted
Failure detection: crashed members are excluded from the membership
Ordering protocols: Atomic (all-or-none message delivery), Fifo, Causal, Total 
Order (sequencer or token based)
Membership
Encryption

As for the others, I would need to read more about them. Do you know of any 
sort of comparison matrix that includes these projects? Ensemble is work that 
happened after Horus, right? Does that means it's more complete/featureful 
and should be considered over Horus? Ie, has Horus added new things since 
they split?

--Ian



From catalin at dazoot.ro  Fri May 27 15:28:06 2005
From: catalin at dazoot.ro (Catalin Constantin)
Date: Fri, 27 May 2005 22:28:06 +0300
Subject: [Twisted-Python] xmlrpc deferred
Message-ID: <652481677.20050527222806@bounce-software.com>

Hi there,

I have the following xmlrpc method:

class FeederResource(xmlrpc.XMLRPC):
        def __init__(self):
                xmlrpc.XMLRPC.__init__(self)
                self.feeder=Feeder()
                
        def xmlrpc_getList(self, id):
                return self.feeder.get_urls(id)

The thing is that the self.feeder.get_urls takes too long to execute
and while the request is running all the others are blocked.
I want that while it computes the result the other XML RPC methods to
be available.

I wanted to use deferrals but i found no viable example.

Eg what i've tried to do:
        def xmlrpc_getList(self, id):
                log.debug("getList is here for id %s" % id)
                d = defer.Deferred()
                d.addCallback(self.feeder.get_urls)
                return d


My method feeder.get_urls is never called !

Where do i do wrong !

10x for your help !

-- 
Catalin Constantin
Dazoot Software
http://www.dazoot.ro




From Sl_Church at sbcglobal.net  Fri May 27 15:35:00 2005
From: Sl_Church at sbcglobal.net (Shawn Church)
Date: Fri, 27 May 2005 12:35:00 -0700
Subject: [Twisted-Python] threadedselectreactor
In-Reply-To: <42975937.4070504@unipex.it>
References: <4295C138.8040708@unipex.it> <429748CA.5050102@sbcglobal.net>
	<42975937.4070504@unipex.it>
Message-ID: <42977664.4000707@sbcglobal.net>



Michele Petrazzo wrote:

> I had downloaded this file, but I not didn't find any documentation for
> use it. I try a threadedselectreactor.install(), but twisted say me that
> there is another reactror installed.

Read the examples Bob referenced.  The examples are one reason why I
co'd the entire trunk.  Another reason is so if I need a specific fix
for any part of twisted I can just update my working copy and copy the
file(s) as needed.

For this specific problem you should check the ORDER of your import
statements.  They should be:

    from twisted.internet import threadedselectreactor
    threadedselectreactor.install()
    from twisted.internet import reactor

After your main module imports the above, subsequent modules should just
use "from twisted.internet import reactor"
if they need to call any reactor methods.  I could be wrong about this
but it seems to work for me.

Good luck :)


Shawn Church
http://SChurchComputers.com




From sc at linux.it  Fri May 27 15:35:57 2005
From: sc at linux.it (Stefano Canepa)
Date: Fri, 27 May 2005 21:35:57 +0200
Subject: [Twisted-Python] Some questions from a newby
In-Reply-To: <42976277.6050701@comcast.net>
References: <1117210046.11739.8.camel@localhost.localdomain>
	<42976277.6050701@comcast.net>
Message-ID: <1117222557.7538.0.camel@localhost.localdomain>

Il giorno ven, 27/05/2005 alle 14.09 -0400, Stephen Waterbury ha
scritto:
> Stefano Canepa wrote:
> > 1) in writing a server, what is better to write a twisted application to
> > be run using twistd -y or a python app using a reactor?
> 
> Definitely the former.
>
> > 2) how do I use configuration without using a tac?
> 
> I roll my own.  YMMV.
> 
> - Steve

Thanks for your answer.
Stefano

-- 
Stefano Canepa - email: sc at linux.it - www: http://www.stefanocanepa.it
Three great virtues of a programmer: laziness, impatience and hubris.
Le tre grandi virt? di un programmatore: pigrizia, impazienza e arroganza.
                                                              (Larry Wall)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050527/2a27f62a/attachment.pgp 

From itamar at itamarst.org  Fri May 27 15:47:11 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 27 May 2005 15:47:11 -0400
Subject: [Twisted-Python] xmlrpc deferred
In-Reply-To: <652481677.20050527222806@bounce-software.com>
References: <652481677.20050527222806@bounce-software.com>
Message-ID: <1117223231.8727.34.camel@localhost.localdomain>

On Fri, 2005-05-27 at 22:28 +0300, Catalin Constantin wrote:

> The thing is that the self.feeder.get_urls takes too long to execute
> and while the request is running all the others are blocked.
> I want that while it computes the result the other XML RPC methods to
> be available.
> 
> I wanted to use deferrals but i found no viable example.

Deferreds do not magically make a calculation not block. Once you have
made your calculation not block ("take a long time"), e.g. by splitting
it up into small processing chunks separated by reactor.callLater(0,),
Deferreds provide a way to easily get the "result" of a non-blocking
function.




From exarkun at divmod.com  Fri May 27 15:46:21 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 27 May 2005 19:46:21 GMT
Subject: [Twisted-Python] xmlrpc deferred
In-Reply-To: <652481677.20050527222806@bounce-software.com>
Message-ID: <20050527194848.559.1189256091.divmod.quotient.11293@ohm>

On Fri, 27 May 2005 22:28:06 +0300, Catalin Constantin <catalin at dazoot.ro> wrote:
>Hi there,
>
>I have the following xmlrpc method:
>
>class FeederResource(xmlrpc.XMLRPC):
>        def __init__(self):
>                xmlrpc.XMLRPC.__init__(self)
>                self.feeder=Feeder()
>
>        def xmlrpc_getList(self, id):
>                return self.feeder.get_urls(id)
>
>The thing is that the self.feeder.get_urls takes too long to execute
>and while the request is running all the others are blocked.
>I want that while it computes the result the other XML RPC methods to
>be available.

The only answer here is to make get_urls() take less time.

What is it doing?  Is it blocking on network I/O?  Querying a database?  Prompting for user input?   _It_ should be creating and returned a Deferred (and later calling it back with a result), most likely, since it is the long-running operation.

>
>I wanted to use deferrals but i found no viable example.
>
>Eg what i've tried to do:
>        def xmlrpc_getList(self, id):
>                log.debug("getList is here for id %s" % id)
>                d = defer.Deferred()
>                d.addCallback(self.feeder.get_urls)
>                return d

Deferred don't make things asynchronous, cooperative, or non-blocking.  They only make dealing with callbacks more convenient.  If you add a blocking function as the callback to a Deferred, it will block the reactor just as effectively as if you called it yourself (bacause all that happens inside the Deferred is that the function gets called).

>
>My method feeder.get_urls is never called !
>

In the above code, nothing ever "fires" the Deferred - calls .callback() on it - so, never having a result, it never bothers to invoke any of its callbacks.  Deferred just hook results up to callbacks.

Jp



From catalin at dazoot.ro  Fri May 27 15:56:49 2005
From: catalin at dazoot.ro (Catalin Constantin)
Date: Fri, 27 May 2005 22:56:49 +0300
Subject: [Twisted-Python] xmlrpc deferred
In-Reply-To: <20050527194848.559.1189256091.divmod.quotient.11293@ohm>
References: <652481677.20050527222806@bounce-software.com>
	<20050527194848.559.1189256091.divmod.quotient.11293@ohm>
Message-ID: <30791919.20050527225649@bounce-software.com>

Friday, May 27, 2005, 10:46:21 PM, Jp Calderone wrote:
> On Fri, 27 May 2005 22:28:06 +0300, Catalin Constantin <catalin at dazoot.ro> wrote:
>>Hi there,
>>
>>I have the following xmlrpc method:
>>
>>class FeederResource(xmlrpc.XMLRPC):
>>        def __init__(self):
>>                xmlrpc.XMLRPC.__init__(self)
>>                self.feeder=Feeder()
>>
>>        def xmlrpc_getList(self, id):
>>                return self.feeder.get_urls(id)
>>
>>The thing is that the self.feeder.get_urls takes too long to execute
>>and while the request is running all the others are blocked.
>>I want that while it computes the result the other XML RPC methods to
>>be available.

> The only answer here is to make get_urls() take less time.

I can't :)

> What is it doing?  Is it blocking on network I/O?  Querying a
> database?  Prompting for user input?   _It_ should be creating and
> returned a Deferred (and later calling it back with a result), most
> likely, since it is the long-running operation.

Mainly, database queries.

>>
>>I wanted to use deferrals but i found no viable example.
>>
>>Eg what i've tried to do:
>>        def xmlrpc_getList(self, id):
>>                log.debug("getList is here for id %s" % id)
>>                d = defer.Deferred()
>>                d.addCallback(self.feeder.get_urls)
>>                return d

> Deferred don't make things asynchronous, cooperative, or
> non-blocking.  They only make dealing with callbacks more
> convenient.  If you add a blocking function as the callback to a
> Deferred, it will block the reactor just as effectively as if you
> called it yourself (bacause all that happens inside the Deferred is
> that the function gets called).

Ok, i got this now.
Is there any suggested way to make the call to that method in a
separate thread and return the result after the thread is done, and meanwhile
the other XMLRPC methods not to be blocked ?

What bothers me is that while the call to getList is not done all the
other functionality of the app is on hold.



>>
>>My method feeder.get_urls is never called !
>>

> In the above code, nothing ever "fires" the Deferred - calls
> .callback() on it - so, never having a result, it never bothers to
> invoke any of its callbacks.  Deferred just hook results up to
> callbacks.

> Jp

> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
Catalin Constantin
Dazoot Software
http://www.dazoot.ro




From glyph at divmod.com  Fri May 27 16:08:10 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Fri, 27 May 2005 16:08:10 -0400
Subject: [Twisted-Python] xmlrpc deferred
In-Reply-To: <30791919.20050527225649@bounce-software.com>
References: <652481677.20050527222806@bounce-software.com>	<20050527194848.559.1189256091.divmod.quotient.11293@ohm>
	<30791919.20050527225649@bounce-software.com>
Message-ID: <42977E2A.7030605@divmod.com>

Catalin Constantin wrote:
> Friday, May 27, 2005, 10:46:21 PM, Jp Calderone wrote:

>>What is it doing?

> Mainly, database queries.

> Is there any suggested way to make the call to that method in a
> separate thread and return the result after the thread is done, and meanwhile
> the other XMLRPC methods not to be blocked ?

twisted.enterprise.adbapi




From itamar at itamarst.org  Fri May 27 16:11:43 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 27 May 2005 16:11:43 -0400
Subject: [Twisted-Python] xmlrpc deferred
In-Reply-To: <30791919.20050527225649@bounce-software.com>
References: <652481677.20050527222806@bounce-software.com>
	<20050527194848.559.1189256091.divmod.quotient.11293@ohm>
	<30791919.20050527225649@bounce-software.com>
Message-ID: <1117224704.8727.42.camel@localhost.localdomain>

On Fri, 2005-05-27 at 22:56 +0300, Catalin Constantin wrote:

> Ok, i got this now.
> Is there any suggested way to make the call to that method in a
> separate thread and return the result after the thread is done, and meanwhile
> the other XMLRPC methods not to be blocked ?

Yes; specifically for database calls check twisted.enterprise.adbapi
(specifically runInteraction). There is documentation in the RDBMS
(enterprsie) howto.




From exarkun at divmod.com  Fri May 27 16:11:47 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 27 May 2005 20:11:47 GMT
Subject: [Twisted-Python] xmlrpc deferred
In-Reply-To: <30791919.20050527225649@bounce-software.com>
Message-ID: <20050527201147.559.32129599.divmod.quotient.11304@ohm>

On Fri, 27 May 2005 22:56:49 +0300, Catalin Constantin <catalin at dazoot.ro> wrote:
>Friday, May 27, 2005, 10:46:21 PM, Jp Calderone wrote:
>> On Fri, 27 May 2005 22:28:06 +0300, Catalin Constantin <catalin at dazoot.ro> wrote:
>>>Hi there,
>>>
>>>I have the following xmlrpc method:
>>>
>>>class FeederResource(xmlrpc.XMLRPC):
>>>        def __init__(self):
>>>                xmlrpc.XMLRPC.__init__(self)
>>>                self.feeder=Feeder()
>>>
>>>        def xmlrpc_getList(self, id):
>>>                return self.feeder.get_urls(id)
>>>
>>>The thing is that the self.feeder.get_urls takes too long to execute
>>>and while the request is running all the others are blocked.
>>>I want that while it computes the result the other XML RPC methods to
>>>be available.
>
>> The only answer here is to make get_urls() take less time.
>
>I can't :)
>
>> What is it doing?  Is it blocking on network I/O?  Querying a
>> database?  Prompting for user input?   _It_ should be creating and
>> returned a Deferred (and later calling it back with a result), most
>> likely, since it is the long-running operation.
>
>Mainly, database queries.

If the database doesn't provide an async API, threads may be the only reasonable solution.  If the database adapter is a DB-API 2.0 module, this is already available for you: twisted.enterprise.adbapi.  Otherwise, you may need to use the "low level" Twisted threading API, twisted.internet.threads.deferToThread(), or even reactor.callInThread() and reactor.callFromThread(), depending on your particular needs.

> [snip]
>
>What bothers me is that while the call to getList is not done all the
>other functionality of the app is on hold.
>

Yep.  Any time you have a function that takes a long time to run, this is going to happen.  The reactor needs to get execution time to process events, and it can't get that if application code (ie, your code) doesn't return quickly.

Jp



From dave at krondo.com  Fri May 27 21:25:00 2005
From: dave at krondo.com (Dave Peticolas)
Date: Fri, 27 May 2005 18:25:00 -0700
Subject: [Twisted-Python] adbapi and pymssql
In-Reply-To: <200505270909.21630.pradu@pradu.it>
References: <200505261334.58599.mike@mkp.ca>
	<200505262234.55318.pradu@pradu.it> <200505261653.37873.mike@mkp.ca>
	<200505270909.21630.pradu@pradu.it>
Message-ID: <1117243500.4072.90.camel@oneiros>

On Fri, 2005-05-27 at 09:09 +0200, Alessandro Praduroux wrote:
> The problem as I recall was related to the fact that a commit() not coupled 
> with a begin() threw an exception, while all other DBAPI implementations were 
> resilient to this kind of problem. So I use a slightly modified version of 
> Sybase (that I'll send to you separately to avoid traffic on the list, if 
> anyone else is interested I'll post it here too, I lost the original patch 
> but I have the full package and I'm too lazy to recreate the patch).
> 
> A little disclaimer: freetds and thus Sybase.py do not yet implement query 
> parameters, if you try using them you will get an error until the freetds 
> people figure out how to implement this. I don't know if the mssql module 
> implement a workaround for this, Sybase.py doesn't (but it should be fairly 
> easy to do it in a compatible way).

As far as I can tell, begin() isn't actually a part of the DBAPI
standard: http://www.python.org/peps/pep-0249.html

That would explain why most DBAPI implementations do not require it :)

dave





From lc278 at cornell.edu  Fri May 27 23:44:31 2005
From: lc278 at cornell.edu (Laran Evans)
Date: Fri, 27 May 2005 23:44:31 -0400
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <200505271139.51008.ian@ianduggan.net>
References: <4295F4DE.8020403@cornell.edu>	<200505271032.27874.ian@ianduggan.net>	<42975E87.5000007@cornell.edu>
	<200505271139.51008.ian@ianduggan.net>
Message-ID: <4297E91F.9030909@cornell.edu>

Ian Duggan wrote:
> I just took a peek at JGroups. It looks like their API includes a lot of 
> switches you can tweak. Would that be a good starting point? It looks like 
> it's used in some significant stuff.
> 
> http://www.jgroups.org/javagroupsnew/docs/success.html
> 
> Their overview page (http://www.jgroups.org/javagroupsnew/docs/overview.html) 
> makes a decent case for their approach. I wonder if doing a mixin/layered 
> approach to building protocols adds much overhead?

There is a paper out there that makes the statement that each layer you 
add to a system adds 10% overhead. So, by that rationale, stacking 
protocols is scalable only to a certain point. But, what that paper's 
really referring to is adding a programming language on top of the 
underlying hardware adds 10%, which is pretty silly because, yeah, you 
have to add overhead to provide a whole new set of capabilities. But 
without the capabilities provided by the programming language, your 
underlying hardware wouldn't be worth much.

So, I don't think layering protocols adds much overhead at all. But 
there are better ways and not so good ways to do it. And I'm not a huge 
fan of the way JGroups and in fact Horus and Ensemble do it, basically 
the lego block approach because a given layer can only be stacked on top 
  or below certain other layers. You can't just stack anything on top of 
anything else. So, there's a certain learning curve involved in 
understanding how the layers interact.

I think a better approach is a more functional approach, utility methods 
for things like splitting and joining buffers, sequencing, sending via 
various types of sockets etc. There is actually another paper out there 
which talks about this. Here's a link to it: 
http://portal.acm.org/citation.cfm?doid=323647.323645. I found this 
paper very helpful.

JGroups has numerous configurations out of the box, all of which can be 
found in the conf directory of the JGroups source from CVS.

One of the difficult things about JGroups in my opinion is that there 
are so many different configuration possibilities. It's a bit difficult 
to know exactly what to use. Though, for some I'm sure that flexibility 
is a nice "feature". All personal taste I suppose.

> As for the others, I would need to read more about them. Do you know of any 
> sort of comparison matrix that includes these projects? Ensemble is work that 
> happened after Horus, right? Does that means it's more complete/featureful 
> and should be considered over Horus? Ie, has Horus added new things since 
> they split?

To specifically understand Horus vs. Ensemble, read this:
http://dsl.cs.technion.ac.il/projects/Ensemble/overview.html

There is a good paper which compares a number of the major group 
communication toolkits available. Here's a link:
http://portal.acm.org/citation.cfm?doid=503112.503113

There's another paper which I believe is similar. Though I haven't yet 
had a chance to read it. Here's a link to that one:
http://portal.acm.org/citation.cfm?doid=1041680.1041682

Hope this all helps.

- Laran




From catalin at dazoot.ro  Sat May 28 03:41:44 2005
From: catalin at dazoot.ro (Catalin Constantin)
Date: Sat, 28 May 2005 10:41:44 +0300
Subject: [Twisted-Python] xmlrpc deferred
In-Reply-To: <42977E2A.7030605@divmod.com>
References: <652481677.20050527222806@bounce-software.com>
	<20050527194848.559.1189256091.divmod.quotient.11293@ohm>
	<30791919.20050527225649@bounce-software.com>
	<42977E2A.7030605@divmod.com>
Message-ID: <1144140919.20050528104144@bounce-software.com>

not a good option in this case !

Friday, May 27, 2005, 11:08:10 PM, Glyph Lefkowitz wrote:
> twisted.enterprise.adbapi


-- 
Catalin Constantin
Dazoot Software
http://www.dazoot.ro




From catalin at dazoot.ro  Sat May 28 03:57:44 2005
From: catalin at dazoot.ro (Catalin Constantin)
Date: Sat, 28 May 2005 10:57:44 +0300
Subject: [Twisted-Python] xmlrpc deferred
In-Reply-To: <20050527201147.559.32129599.divmod.quotient.11304@ohm>
References: <30791919.20050527225649@bounce-software.com>
	<20050527201147.559.32129599.divmod.quotient.11304@ohm>
Message-ID: <637785464.20050528105744@bounce-software.com>

thank you for your reply !

i've figured it out !

        def handleResult(self, ulist):
                return ulist
                
        def xmlrpc_getList(self, id):
                d = threads.deferToThread(self.feeder.get_urls, id)
                d.addCallback(self.handleResult)
                return d

it works !

very nice indeed :D

Friday, May 27, 2005, 11:11:47 PM, Jp Calderone wrote:
> If the database doesn't provide an async API, threads may be the
> only reasonable solution.  If the database adapter is a DB-API 2.0
> module, this is already available for you:
> twisted.enterprise.adbapi.  Otherwise, you may need to use the
> "low level" Twisted threading API,
> twisted.internet.threads.deferToThread(), or even
> reactor.callInThread() and
> reactor.callFromThread(), depending on your particular needs.


-- 
Catalin Constantin
Dazoot Software
http://www.dazoot.ro




From michele.petrazzo at unipex.it  Sat May 28 06:22:14 2005
From: michele.petrazzo at unipex.it (Michele Petrazzo)
Date: Sat, 28 May 2005 12:22:14 +0200
Subject: [Twisted-Python] threadedselectreactor
In-Reply-To: <42975937.4070504@unipex.it>
References: <4295C138.8040708@unipex.it> <429748CA.5050102@sbcglobal.net>
	<42975937.4070504@unipex.it>
Message-ID: <42984656.9000000@unipex.it>

Michele Petrazzo wrote:

Thanks to all,
my old projects work very very well with new threadselectreactor!

Thanks,
Michele



From itamar at itamarst.org  Sat May 28 12:37:38 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 28 May 2005 12:37:38 -0400
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <42975E87.5000007@cornell.edu>
References: <4295F4DE.8020403@cornell.edu> <42968A15.1090200@cornell.edu>
	<7F93DBED-ABA4-4D72-8906-05DCE5DA3F6B@anu.edu.au>
	<200505271032.27874.ian@ianduggan.net> <42975E87.5000007@cornell.edu>
Message-ID: <1117298258.7946.28.camel@localhost.localdomain>

On Fri, 2005-05-27 at 13:53 -0400, Laran Evans wrote:

> Beyond that there are all sorts of techniques, each of which makes 
> certain assumptions. So, which protocol to utilize depends on what type 
> of environment you want to create for applications.

The IETF reliable mulitcast working group has an overview of the
different dimensions and building blocks, specs for some of the
different types, etc.:

http://www.ietf.org/html.charters/rmt-charter.html






From jarrod.roberson at gmail.com  Sat May 28 16:42:31 2005
From: jarrod.roberson at gmail.com (jarrod roberson)
Date: Sat, 28 May 2005 16:42:31 -0400
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <4295F4DE.8020403@cornell.edu>
References: <4295F4DE.8020403@cornell.edu>
Message-ID: <2389d4730505281342a88942f@mail.gmail.com>

On 5/26/05, Laran Evans <lc278 at cornell.edu> wrote:
> 
> Has any work been done to enable process group communication similar to
> what Spread (spread.org <http://spread.org>), Ensemble, Horus, Isis, 
> Eternal etc. offer?
> 
> - Laran


We are working on something similar for a project at work also.
We are using ZeroConf ( aka formerly Apple Rendezvous now Apple Bonjour ) 
for cluster discovery
and a Perspective Broker interface for exchanging information.

We considered reliable multi-cast but decided against it because our 
clusters are not going to be very big and
are going to use a kind of inversion of control pattern instead of 
distributing all the data everywhere.

But I am interested in a COMMON IDIOM for clustering twisted servers, I 
would definately say ZeroConf needs to be
the discovery mechanism, no need to re-invent that wheel and a Twisted 
implemenation is easy


-- 
If you don't know what you want, you probably need a nap.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050528/4e33b943/attachment.htm 

From july.lzu at gmail.com  Sun May 29 14:49:59 2005
From: july.lzu at gmail.com (july july)
Date: Mon, 30 May 2005 02:49:59 +0800
Subject: [Twisted-Python] how to write an interactive client?
In-Reply-To: <20050520232600.559.607604854.divmod.quotient.5672@ohm>
References: <001201c55d90$546f6ef0$800101df@sv.us.sonicwall.com>
	<20050520232600.559.607604854.divmod.quotient.5672@ohm>
Message-ID: <89cf12820505291149705e88cb@mail.gmail.com>

On 5/21/05, Jp Calderone <exarkun at divmod.com> wrote:
> On Fri, 20 May 2005 16:04:50 -0700, theshz <theshz at gmail.com> wrote:
> >Hi, I've written a simple twisted server, which accepts client connections,
> >and respond with some simple text depending on what the client sends. This
> >is working fine if I use telnet to connect to the server, and enter the
> >commands one at a time. I'd like to write a twisted client to simulate this,
> >i.e., the client has a list of commands to send, it will send one at a time,
> >(may be wait a little bit between the commands,) and print out the responses
> >from the server. I couldn't seem to get beyond the first command, following
> >code seems to send all the commands at the end, rather than one at a time,
> >how can I add sleep in between? Thanks:
> >
> >from twisted.internet.protocol import ReconnectingClientFactory
> >from twisted.protocols import basic
> >from twisted.internet import reactor
> >from sys import stdout
> >import time
> >
> >class MyClientProtocol(basic.LineReceiver):
> > def lineReceived(self,data):
> >  stdout.write("Server:" + data+"\n"),
> >
> > def connectionMade(self):
> >      stdout.write("connectionMade\n")
> >      self.transport.write("start:\r\n")
> >      self.transport.write("command1:\r\n")
> >      self.transport.write("command2:\r\n")
> >      self.transport.write("command3:\r\n")
> >      self.transport.write("end:\r\n")
> >
> 
>  Try this version of connectionMade, along with this definition of lineReceived:
> 
>    lines = ["command1", "command2", "command3", "end"]
>    def connectionMade(self):
>        print "connectionMade"
>        self.lines = self.lines[:]
>        self.sendLine("start:")
> 
>    def lineReceived(self, line):
>        print "Got a line:", repr(line)
>        if self.lines:
>            self.sendLine(self.lines.pop(0) + ":")
> 
>  Of course, there are other ways to do this.  You could respond to timing events instead of network events:
> 
>    lines = ["command1", "command2", "command3", "end"]
>    def connectionMade(self):
>        print "connectionMade"
>        self.lines = self.lines[:]
>        self.sendCommand()
> 
>    def sendCommand(self):
>        self.sendLine(self.lines.pop(0) + ":")
>        if self.lines:
>            reactor.callLater(3, self.sendCommand)
> 
>  Or you could respond to events from stdin, or from another connected protocol, or a GUI, or ....
> 
>  Hope this helps,
> 
>  Jp
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
okey , I think it's hard to parse command line in twisted reactor
event loopst . In my programs ,  I always 'import cmd' and in between
command , use reacotr.run() to send a message ,and waiting for a
replay when the replay comes back, the protocol() will terminate the
connection . and back into cmd loop.
Hope this helps,   ZP



From incoming at pronet-romania.com  Sun May 29 14:59:19 2005
From: incoming at pronet-romania.com (Tibi Dondera)
Date: Sun, 29 May 2005 20:59:19 +0200
Subject: [Twisted-Python] Chat by html application
In-Reply-To: <9F028CC77827D611ACEE0002A5F12F0708551629@semldsntmsx208.seml.astrazeneca.net>
Message-ID: <019101c56480$855af790$f300a8c0@mobile>

Thank you all for your help, I'll check out chatola and folow your other
advices, and also switch this discussion to twisted-web.

_________________
Tibi DONDERA


-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
Harald.Nyman at astrazeneca.com
Sent: Friday, 27 May 2005 18:45
To: twisted-python at twistedmatrix.com; twisted-web at twistedmatrix.com
Subject: RE: [Twisted-Python] Chat by html application


Hi Tibi,

Nevow is probably the best. But there are other ways too. I've been
doing this for several years with a Tomcat servlet, and then there was
no Nevow. After converting to Pythonism, I switched to a Twisted server.
Haven't learned Nevow yet, despite good intentions..., but I think this
may be similar. It's essentially doing all of "What I want to do:"
below, only I'm not using it mainly for chat, but for distributing HTML
or Javascript, for viewing things together during a phone meeting.

 - the browser's background HTTPRequest sits in a threaded applet
 - someone switches on "collaboration" in his browser - the others see
   his name being added to the "virtual meeting"
 - one user drags a pointer (image) in his browser -> the pointer moves
   in the other browsers

See also some A's to your Q's, below.
Harald


On 5/26/05, Tibi Dondera <incoming at pronet-romania.com> wrote:
> Hello all,
> 
> I'm trying to develop a chat application through a browser, using 
> twisted (if possible) What I want to do:
>  - a user logs in the website
>  - he goes to the "chat page"
>  - he has the "classic" chat interface (sent messages, list of online
> users, "send a message" field). All of these are simple "divs"
>  - when he sends a message, a post with the message is submitted to
the
> server, and registered in a temporary database table (or in memory, is
> there some "temporary" memory that I can use in twisted for this
purpose
> ?)
>  - for refreshing the chat area, there is an open HTTPRequest in the
> background. Twisted will do the following:
>      - accept the HTTPrequest connection
>      - keep it alive (i.e. do not send the answer, but maybe send some
> empty chars to force the browser to keep the connection open)
>      - when a new message (from the other users) is available, send it
> to the user and close the connection.
>  - in the user's browser, when the connection is closed (either with a
> message, or after a certain timeout, that cannot be avoided anyway), a
> new one will be opened, until the user quits the chat.
> 
> Questions:
> - Is this a plausible solution ?

Yes, IMHO.

> - Has this already been implemented (or at least partly) ?
> - Can this actually be done with twisted ?

Yes.

> - Can I develop this on Windows ? (production will be on linux, but 
> still, I prefer developing local, and currently on windows)

Hmm.. I develop "on Windows", but with a VMWare Linux server on the same
laptop. Works great, but costs a bit. Should work with the server on
Windows, too(?)

> - Can you give me any pointers to some existing code, or where to 
> start ? (maybe jabber for twisted ?)

Here's a few fragments from my server code -

class Servlet(resource.Resource):
    ...
# Send queued output to browser's background listener
    def render_GET(self, request):
        self.request = request
        session = request.getSession()
    ...
        anything = 0
        while not session.outqueue.empty():
            x = session.outqueue.get()
            request.transport.write(x)
            anything = 1
        if anything:
            request.finish()
        return server.NOT_DONE_YET
 
    def render_POST(self, request):  
        session = request.getSession()
# Browser sends a dictionary as text
        msgDict = eval(request.args['message'][0])
        request.finish()
        
        message = msgDict['message']
        mSplit = message.split()
        ... # Do work here
        return server.NOT_DONE_YET

> - How will a twisted http server coexist with my existing apache 
> server on the 80 port ?

Not well, I guess. I use a different port for the Twisted server.

> - Must I subscribe to the twisted-http mailing list instead and ask 
> this question there ?

Twisted-web would be better, yes. I'm posting this one there too, with
all due apologies...

> 
> Thanks for any help.
> 
> Tibi Dondera



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From qwejohn at hotmail.com  Mon May 30 07:28:47 2005
From: qwejohn at hotmail.com (John Que)
Date: Mon, 30 May 2005 14:28:47 +0300
Subject: [Twisted-Python] using http server in twisted 
Message-ID: <BAY14-F66BB5AD5EC3B7D923410DAF030@phx.gbl>

Hello,

I am trying the exmaple in the python docs -
http://twistedmatrix.com/users/warner/doc-latest/web/howto/using-twistedweb.xhtml

Configuring and Using the Twisted.Web Server - Twisted Web Development.

it says there:

"You can also create a Site instance by hand, passing it a Resource object 
which will serve as the root of the site:

from twisted.web import server, resource
from twisted.internet import reactor

class Simple(resource.Resource):
    isLeaf = True
    def render_GET(self, request):
        return "<html>Hello, world!</html>"

site = server.Site(Simple())
reactor.listenTCP(8080, site)
reactor.run()   "

So I prepared a script named myhttp exactly like this and ran ./myhttp

I had made sure with netstat that indeed port 8080 was free before running 
the script and after
running the script it was in a listening state.

But when pointing the Mozilla browser to http://localhost:8080 (or  
http://127.0.0.1:8080)
I got the following error:

"Method Not Allowed
Your browser approached me (at /) with the method "GET". I only allow the 
method here."

I had also made sure that there in no problem with iptables and that the 
iptable service is down.

Any idea ?

Am I missing something?

Any help will be appreciated.

Regards,
John

_________________________________________________________________
FREE pop-up blocking with the new MSN Toolbar - get it now! 
http://toolbar.msn.click-url.com/go/onm00200415ave/direct/01/




From mark at junklight.com  Mon May 30 07:45:47 2005
From: mark at junklight.com (mark)
Date: Mon, 30 May 2005 12:45:47 +0100
Subject: [Twisted-Python] using http server in twisted 
In-Reply-To: <BAY14-F66BB5AD5EC3B7D923410DAF030@phx.gbl>
References: <BAY14-F66BB5AD5EC3B7D923410DAF030@phx.gbl>
Message-ID: <747208FB-0AF4-473C-9EB1-FA38D3C0BC31@junklight.com>

Hi,

I run my app in very much the same way and it works fine. A rapid cut  
and paste test of your example works just fine here as well. I would  
suggest that there is something else running on port 8080 (or  
blocking/fire-walling it)

cheers

mark

On 30 May 2005, at 12:28, John Que wrote:

> So I prepared a script named myhttp exactly like this and ran ./myhttp
>
> I had made sure with netstat that indeed port 8080 was free before  
> running the script and after
> running the script it was in a listening state.
>
> But when pointing the Mozilla browser to http://localhost:8080 (or   
> http://127.0.0.1:8080)
> I got the following error:
>
> "Method Not Allowed
> Your browser approached me (at /) with the method "GET". I only  
> allow the method here."
>
> I had also made sure that there in no problem with iptables and  
> that the iptable service is down.
>
> Any idea ?
>




From michele.petrazzo at unipex.it  Mon May 30 08:35:40 2005
From: michele.petrazzo at unipex.it (Michele Petrazzo)
Date: Mon, 30 May 2005 14:35:40 +0200
Subject: [Twisted-Python] wxpython, threadselectreactor and thread
Message-ID: <429B089C.4010002@unipex.it>

I have a wxpython application that work with twsited 2.0 on win and
linux. In these days I'm "porting" it from twisted 1.3 to 2.0 +
threadselectreactor, but not all work well.
Into my application I use:
callLater
threads.deferToThread with some addCallBack

Three problems:

1) Sometime then I open and close my application I receive this error:

Unhandled exception in thread started by <bound method
Thread.__bootstrap of <Thread(Thread-1, stopped daemon)>>
Traceback (most recent call last):
   File "C:\Python23\lib\threading.py", line 451, in __bootstrap
     self.__stop()
   File "C:\Python23\lib\threading.py", line 460, in __stop
     self.__block.notifyAll()
   File "C:\Python23\lib\threading.py", line 256, in notifyAll
     self.notify(len(self.__waiters))
   File "C:\Python23\lib\threading.py", line 238, in notify
     currentThread() # for side-effect
TypeError: 'NoneType' object is not callable

2) Then I call with threads.deferToThread a method that make a blocking
work, and after it open a new frame, the frame is opened, but if I want
to close the first frame and the second frame (with the "X" on the
frame), the application don't close. Into the task manager (on win) or
into /proc/"pid" I see that the process (python.exe) are alive and have
three threads. I attach a simple code that reproduce this problem.

3) Why into your demo the reactor.stop() work and into my code I receive
this error:
RuntimeError: can't stop reactor that isn't running
I use the same code initialization of the demo.

Thanks a lot,
Michele

-------------- next part --------------
A non-text attachment was scrubbed...
Name: wx_f.py
Type: text/x-python
Size: 1798 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20050530/7eab8511/attachment.py 

From qwejohn at hotmail.com  Mon May 30 09:04:04 2005
From: qwejohn at hotmail.com (John Que)
Date: Mon, 30 May 2005 16:04:04 +0300
Subject: [Twisted-Python] using http server in twisted
In-Reply-To: <747208FB-0AF4-473C-9EB1-FA38D3C0BC31@junklight.com>
Message-ID: <BAY14-F13692841E4B72CF441733AF030@phx.gbl>

Hello,
Thanks; this is stange; I checked again with netstat and 8080 was free 
before running
the script and held afterwards.
And the iptables service is are down. and again I get the same error . Could 
it be that
something else in the environment is not OK?
Any idea?

Regards,
John


>From: mark <mark at junklight.com>
>Reply-To: Twisted general discussion <twisted-python at twistedmatrix.com>
>To: Twisted general discussion <twisted-python at twistedmatrix.com>
>Subject: Re: [Twisted-Python] using http server in twisted Date: Mon, 30 
>May 2005 12:45:47 +0100
>
>Hi,
>
>I run my app in very much the same way and it works fine. A rapid cut  and 
>paste test of your example works just fine here as well. I would  suggest 
>that there is something else running on port 8080 (or  
>blocking/fire-walling it)
>
>cheers
>
>mark
>
>On 30 May 2005, at 12:28, John Que wrote:
>
>>So I prepared a script named myhttp exactly like this and ran ./myhttp
>>
>>I had made sure with netstat that indeed port 8080 was free before  
>>running the script and after
>>running the script it was in a listening state.
>>
>>But when pointing the Mozilla browser to http://localhost:8080 (or   
>>http://127.0.0.1:8080)
>>I got the following error:
>>
>>"Method Not Allowed
>>Your browser approached me (at /) with the method "GET". I only  allow the 
>>method here."
>>
>>I had also made sure that there in no problem with iptables and  that the 
>>iptable service is down.
>>
>>Any idea ?
>>
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

_________________________________________________________________
FREE pop-up blocking with the new MSN Toolbar - get it now! 
http://toolbar.msn.click-url.com/go/onm00200415ave/direct/01/




From itamar at itamarst.org  Mon May 30 11:17:56 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 30 May 2005 11:17:56 -0400
Subject: [Twisted-Python] wxpython, threadselectreactor and thread
In-Reply-To: <429B089C.4010002@unipex.it>
References: <429B089C.4010002@unipex.it>
Message-ID: <1117466277.7750.17.camel@localhost.localdomain>

On Mon, 2005-05-30 at 14:35 +0200, Michele Petrazzo wrote:

> 3) Why into your demo the reactor.stop() work and into my code I receive
> this error:
> RuntimeError: can't stop reactor that isn't running
> I use the same code initialization of the demo.

You are not calling reactor.run() anywhere, as far as I can tell.




From bob at redivi.com  Mon May 30 12:12:49 2005
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 30 May 2005 09:12:49 -0700
Subject: [Twisted-Python] wxpython, threadselectreactor and thread
In-Reply-To: <1117466277.7750.17.camel@localhost.localdomain>
References: <429B089C.4010002@unipex.it>
	<1117466277.7750.17.camel@localhost.localdomain>
Message-ID: <499D05BC-1249-4324-BA65-A77835A5A051@redivi.com>


On May 30, 2005, at 8:17 AM, Itamar Shtull-Trauring wrote:

> On Mon, 2005-05-30 at 14:35 +0200, Michele Petrazzo wrote:
>
>
>> 3) Why into your demo the reactor.stop() work and into my code I  
>> receive
>> this error:
>> RuntimeError: can't stop reactor that isn't running
>> I use the same code initialization of the demo.
>>
>
> You are not calling reactor.run() anywhere, as far as I can tell.

That shouldn't be the problem.. reactor.interleave() is being  
called.  reactor.interleave is effectively a non-blocking version of  
stop.

-bob




From bob at redivi.com  Mon May 30 12:14:57 2005
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 30 May 2005 09:14:57 -0700
Subject: [Twisted-Python] wxpython, threadselectreactor and thread
In-Reply-To: <429B089C.4010002@unipex.it>
References: <429B089C.4010002@unipex.it>
Message-ID: <4CF776C7-A7EB-4E0D-ABEE-2B02A9D5A6EA@redivi.com>


On May 30, 2005, at 5:35 AM, Michele Petrazzo wrote:

> I have a wxpython application that work with twsited 2.0 on win and
> linux. In these days I'm "porting" it from twisted 1.3 to 2.0 +
> threadselectreactor, but not all work well.
> Into my application I use:
> callLater
> threads.deferToThread with some addCallBack

This example segfaults on Mac OS X (python 2.4.1, twisted svn,  
wxPython 2.6).  I'm going to blame wxPython unless you can prove that  
threadedselectreactor has some weird interaction with threads in an  
otherwise sane environment.  Are you sure that it's allowed to create  
frames in a separate thread like that?

-bob




From Sl_Church at sbcglobal.net  Mon May 30 12:22:25 2005
From: Sl_Church at sbcglobal.net (Shawn Church)
Date: Mon, 30 May 2005 09:22:25 -0700
Subject: [Twisted-Python] wxpython, threadselectreactor and thread
In-Reply-To: <1117466277.7750.17.camel@localhost.localdomain>
References: <429B089C.4010002@unipex.it>
	<1117466277.7750.17.camel@localhost.localdomain>
Message-ID: <429B3DC1.6020805@sbcglobal.net>



Itamar Shtull-Trauring wrote:

>On Mon, 2005-05-30 at 14:35 +0200, Michele Petrazzo wrote:
>
>  
>
>>3) Why into your demo the reactor.stop() work and into my code I receive
>>this error:
>>RuntimeError: can't stop reactor that isn't running
>>I use the same code initialization of the demo.
>>    
>>
>
>You are not calling reactor.run() anywhere, as far as I can tell.
>
>
>  
>
My understanding is you call reactor.interleave **NOT** reactor.run with
threadedselectreactor.   For wx I use reactor.interleave(wx.CallAfter)
in my App.OnInit method and it works fine. There IS an issue with the wx
MainLoop not exiting when my last frame is closed (I think this is
because wx still "sees" the reactor thread) so I use wx.GetApp().Exit()
to terminate the wx MainLoop manually.


Shawn Church
http://SChurchComputers.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20050530/3c39692a/attachment.htm 

From bob at redivi.com  Mon May 30 12:28:02 2005
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 30 May 2005 09:28:02 -0700
Subject: [Twisted-Python] wxpython, threadselectreactor and thread
In-Reply-To: <499D05BC-1249-4324-BA65-A77835A5A051@redivi.com>
References: <429B089C.4010002@unipex.it>
	<1117466277.7750.17.camel@localhost.localdomain>
	<499D05BC-1249-4324-BA65-A77835A5A051@redivi.com>
Message-ID: <C0833A96-DDED-4E51-940B-3525C31E5FA6@redivi.com>


On May 30, 2005, at 9:12 AM, Bob Ippolito wrote:

>
> On May 30, 2005, at 8:17 AM, Itamar Shtull-Trauring wrote:
>
>
>> On Mon, 2005-05-30 at 14:35 +0200, Michele Petrazzo wrote:
>>
>>
>>
>>> 3) Why into your demo the reactor.stop() work and into my code I  
>>> receive
>>> this error:
>>> RuntimeError: can't stop reactor that isn't running
>>> I use the same code initialization of the demo.
>>>
>>>
>>
>> You are not calling reactor.run() anywhere, as far as I can tell.
>>
>
> That shouldn't be the problem.. reactor.interleave() is being  
> called.  reactor.interleave is effectively a non-blocking version  
> of stop.

That should be, non-blocking version of *run*.

-bob




From solipsis at pitrou.net  Mon May 30 12:30:47 2005
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Mon, 30 May 2005 18:30:47 +0200
Subject: [Twisted-Python] wxpython, threadselectreactor and thread
In-Reply-To: <4CF776C7-A7EB-4E0D-ABEE-2B02A9D5A6EA@redivi.com>
References: <429B089C.4010002@unipex.it>
	<4CF776C7-A7EB-4E0D-ABEE-2B02A9D5A6EA@redivi.com>
Message-ID: <1117470647.32443.6.camel@p-dhcp-333-72.rd.francetelecom.fr>


> This example segfaults on Mac OS X (python 2.4.1, twisted svn,  
> wxPython 2.6).  I'm going to blame wxPython unless you can prove that  
> threadedselectreactor has some weird interaction with threads in an  
> otherwise sane environment.  Are you sure that it's allowed to create  
> frames in a separate thread like that?

It is generally not allowed to make wx calls (except wx.CallAfter and
the like) from another thread than the wx main loop. It can be the
source of non-deterministic crashes (depending on the platform).

Regards

Antoine.





From mark at junklight.com  Mon May 30 13:41:25 2005
From: mark at junklight.com (mark)
Date: Mon, 30 May 2005 18:41:25 +0100
Subject: [Twisted-Python] using http server in twisted
In-Reply-To: <BAY14-F13692841E4B72CF441733AF030@phx.gbl>
References: <BAY14-F13692841E4B72CF441733AF030@phx.gbl>
Message-ID: <C46DAFF0-B9E7-4991-9C56-BFC8B6A9697E@junklight.com>

A quick "spotlight" reveals that the error message is coming from the  
file /Twisted-1.3.0/twisted/web/server.py

I'd have a read of the comments in there.

I'm using Twisted 2.0.1 so it might be different. Having said that I  
would have thought that example should work.


On 30 May 2005, at 14:04, John Que wrote:

>>> Your browser approached me




From foom at fuhm.net  Tue May 31 00:59:47 2005
From: foom at fuhm.net (James Y Knight)
Date: Tue, 31 May 2005 00:59:47 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <F28F9D96-8FA9-4673-B81D-A0DB8FBD641C@fuhm.net>

Bug summary
______________________
Since 2005-05-23 21:32:22.460000:
Bugs opened: 20   Bugs closed: 12   Total open bugs: 377 (+8)
   Urgent: 6 (-1)
   Bug: 155 (+6)
   Feature: 141 (+2)
   Wish: 75 (+1)

New / Reopened Bugs
______________________
                     ==== Urgent ====
Release 2.1  (4 days ago)
        http://twistedmatrix.com/bugs/issue1055 opened by jknight

                     ==== Bug ====
[CORE, DOCUMENTATION] Deferred doc fix  (3 days ago)
        http://twistedmatrix.com/bugs/issue1063 opened by bruce

Deferred debugging error  (3 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1061 opened by bruce

tcp port __repr__ fix  (3 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1060 opened by bruce

[CORE] UNIX Port creation has race condition in permission setting  
code  (8 hours ago)
        http://twistedmatrix.com/bugs/issue1068 opened by exarkun

[CORE] On case insensitive filesystems, twisted.plugin should load  
plugin modules ending in .PY (and variations)  (2 days ago)
        http://twistedmatrix.com/bugs/issue1066 opened by exarkun

epyrun doesn't work  (yesterday)
        http://twistedmatrix.com/bugs/issue1067 opened by marienz

pymssql compatibility issue  (4 days ago)
        http://twistedmatrix.com/bugs/issue1056 opened by mike

pbsimple.py code is missing from the "Using Perspective Broker" howto  
on web site  (4 days ago)
        http://twistedmatrix.com/bugs/issue1053 opened by mg

Incorrect and misleading arg name msSinceEpoch  (4 days ago)
        http://twistedmatrix.com/bugs/issue1057 opened by justinj

[CORE, DOCUMENTATION] organized-finger.tac references non-existent  
ServerContextFactory  (3 days ago)
        http://twistedmatrix.com/bugs/issue1058 opened by exarkun

[PATCH] Light editing of "Using Application" for flow and continuity   
(5 days ago)
        http://twistedmatrix.com/bugs/issue1052 opened by waterbug

HTTP server doesn't handle cookies containing '='  (6 days ago)
        http://twistedmatrix.com/bugs/issue1051 opened by abram

                     ==== Feature ====
Helper class for multiple deferreds  (3 days ago)
        http://twistedmatrix.com/bugs/issue1064 opened by jtrask

No easy way to intercept failed connection from pb.PBClientFactory   
(6 days ago)
        http://twistedmatrix.com/bugs/issue1049 opened by lstep

[WORDS, XISH] client XMPP authenticator  (6 days ago)
        http://twistedmatrix.com/bugs/issue1050 opened by tofu

                     ==== Wish ====
twistd.pid vs. chdir  (3 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1065 opened by bruce

Naming the thread pools, especially for adbapi's ConnectionPool  (3  
days ago)
        http://twistedmatrix.com/bugs/issue1062 opened by bruce

quiet those deprecation warnings for deployment uses of deprecated  
code via mktap  (3 days ago)
        http://twistedmatrix.com/bugs/issue1059 opened by bruce

new twisted app -- hellanzb  (4 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1054 opened by pjenvey



Bugs Closed
______________________
                     ==== Urgent ====
[CORE] gtk2 reactor broken for actual GUI apps  (1 month ago)
        http://twistedmatrix.com/bugs/issue994 opened by warner,  
closed by jknight

[RELEASE MANAGEMENT] release 2.0.1  (1 month ago)
        http://twistedmatrix.com/bugs/issue1007 opened by jknight,  
closed by radix

                     ==== Bug ====
Deferred debugging error  (3 days ago)
        http://twistedmatrix.com/bugs/issue1061 opened by bruce,  
closed by exarkun

tcp port __repr__ fix  (3 days ago)
        http://twistedmatrix.com/bugs/issue1060 opened by bruce,  
closed by exarkun

[WEB] deprecated use of IPv4Address in http.py  (9 months ago)
        http://twistedmatrix.com/bugs/issue666 opened by acapnotic,  
closed by jknight

[WEB] [PATCH] Missing return in HTTPPageGetter.handleStatus_301()?   
(3 weeks ago)
        http://twistedmatrix.com/bugs/issue1011 opened by jojo,  
closed by jknight

win32 build instructions incorrect  (3 weeks ago)
        http://twistedmatrix.com/bugs/issue1017 opened by justinj,  
closed by moonfallen

twisted.news.news  (3 weeks ago)
        http://twistedmatrix.com/bugs/issue1012 opened by manlio,  
closed by moonfallen

                     ==== Feature ====
[TWISTD] twistd -y should disable persist-on-exit by default  (15  
months ago)
        http://twistedmatrix.com/bugs/issue539 opened by jknight,  
closed by jknight

                     ==== Wish ====
twistd.pid vs. chdir  (3 days ago)
        http://twistedmatrix.com/bugs/issue1065 opened by bruce,  
closed by exarkun

[CONCH] Conch-enabled Manhole  (22 months ago)
        http://twistedmatrix.com/bugs/issue110 opened by z3p, closed  
by exarkun

new twisted app -- hellanzb  (4 days ago)
        http://twistedmatrix.com/bugs/issue1054 opened by pjenvey,  
closed by exarkun





From duncan.mcgreggor at gmail.com  Tue May 31 03:23:04 2005
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Tue, 31 May 2005 07:23:04 +0000 (UTC)
Subject: [Twisted-Python] Re: how to write an interactive client?
References: <ir4u0l0l7c0.fsf@minos.phy.bnl.gov>
	<428BD081.7050103@divmod.com><61b4e70f05052011094a078865@mail.gmail.com>
	<ir4u0kxenc9.fsf@minos.phy.bnl.gov>
	<001201c55d90$546f6ef0$800101df@sv.us.sonicwall.com>
Message-ID: <loom.20050531T091620-622@post.gmane.org>

theshz <theshz <at> gmail.com> writes:

> 
> Hi, I've written a simple twisted server, which accepts client connections,
> and respond with some simple text depending on what the client sends. This
> is working fine if I use telnet to connect to the server, and enter the
> commands one at a time. I'd like to write a twisted client to simulate this,

Why do you want to simulate this?

You might be interested in the source code of imagination. There is some 
test/demo code in the repository you might find interesting.

I'm working on a project that borrows heavily from this code but has its 
own parser grammer writtn with pyparsing.




From qwejohn at hotmail.com  Tue May 31 07:35:47 2005
From: qwejohn at hotmail.com (John Que)
Date: Tue, 31 May 2005 14:35:47 +0300
Subject: [Twisted-Python] using http server in twisted
In-Reply-To: <C46DAFF0-B9E7-4991-9C56-BFC8B6A9697E@junklight.com>
Message-ID: <BAY14-F168974F397F7B756E32E35AF040@phx.gbl>


Hello,
I was wrong; it should have been render_GET and not render_get . Sorry.

John

>From: mark <mark at junklight.com>
>Reply-To: Twisted general discussion <twisted-python at twistedmatrix.com>
>To: Twisted general discussion <twisted-python at twistedmatrix.com>
>Subject: Re: [Twisted-Python] using http server in twisted
>Date: Mon, 30 May 2005 18:41:25 +0100
>
>A quick "spotlight" reveals that the error message is coming from the  file 
>/Twisted-1.3.0/twisted/web/server.py
>
>I'd have a read of the comments in there.
>
>I'm using Twisted 2.0.1 so it might be different. Having said that I  would 
>have thought that example should work.
>
>
>On 30 May 2005, at 14:04, John Que wrote:
>
>>>>Your browser approached me
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

_________________________________________________________________
Express yourself instantly with MSN Messenger! Download today it's FREE! 
http://messenger.msn.click-url.com/go/onm00200471ave/direct/01/




From michele.petrazzo at unipex.it  Tue May 31 07:17:29 2005
From: michele.petrazzo at unipex.it (Michele Petrazzo)
Date: Tue, 31 May 2005 13:17:29 +0200
Subject: [Twisted-Python] wxpython, threadselectreactor and thread
In-Reply-To: <4CF776C7-A7EB-4E0D-ABEE-2B02A9D5A6EA@redivi.com>
References: <429B089C.4010002@unipex.it>
	<4CF776C7-A7EB-4E0D-ABEE-2B02A9D5A6EA@redivi.com>
Message-ID: <429C47C9.3080102@unipex.it>

Bob Ippolito wrote:
> 
> On May 30, 2005, at 5:35 AM, Michele Petrazzo wrote:
> 
>> I have a wxpython application that work with twsited 2.0 on win and
>> linux. In these days I'm "porting" it from twisted 1.3 to 2.0 +
>> threadselectreactor, but not all work well.
>> Into my application I use:
>> callLater
>> threads.deferToThread with some addCallBack
> 
> 
> This example segfaults on Mac OS X (python 2.4.1, twisted svn,  wxPython 
> 2.6).  I'm going to blame wxPython unless you can prove that  
> threadedselectreactor has some weird interaction with threads in an  
> otherwise sane environment.  Are you sure that it's allowed to create  
> frames in a separate thread like that?
> 
> -bob
> 

You are right, on my linux-box I receive a:
Xlib: unexpected async reply (sequence 0x4a2)!
Xlib: sequence lost (0x104a2 > 0x4e8) in reply type 0x0!

But on win it work, sorry!

My first problem leave, so sometime, but I don't understand when, on
both of my systems (win, lin), I receive e thread error (the first
question on my first mail).

If someone want try my application, for reproduce the problem, I can
publish it on a web site. It's only a little problem: it's an hylafax
client, so for work you must have a hylafax server.

Thanks,
Michele



From seba.tutu at laposte.net  Tue May 31 07:45:49 2005
From: seba.tutu at laposte.net (seba.tutu)
Date: Tue, 31 May 2005 13:45:49 +0200
Subject: [Twisted-Python] ftp server cannot access below directory
Message-ID: <IHCRCD$644DE3A08DD58E2BD2D6610DF5CBC6D8@laposte.net>

Hi,

I was trying to implement a very basic ftp server using the
twisted framework (version 2).

The server is running under WinXP. I launch the programm under
the twisted shell using twistd -y name_program.py 

The client is linux partly because for the test it appears
that  I need a passice connection.

I manage to login and to type basic command (like help, bin)...

As soon as I ask for a ls, there is a message 550 : Cannot
accsees below / directoey : Permission denied. The directory
exists.

If it does not exist there is anyway a very different message
that pops up and the connextion is forced to close.

Obviuosly there is something that I do not get right for the
file systeme authorisation.

I have looked for examples but have not found any helping further.

I you can point me to some usefull links or information I
would greatly appreciate.

Regards.
Sebastien.



The basic code is below.
I use passice client and the connection is OK but I have a
trouble the clie

# FTp server for test

from twisted.internet.protocol import Protocol, ServerFactory
from twisted.protocols import ftp
from twisted.application import service, internet
from twisted.cred import checkers,portal

#To run under the twisted shell: twistd -y name_program.py 

# definition du royaume
realm=ftp.FTPRealm("./seb")

# Attention, il sera necessaire d'utiliser une connection
passive !!!! 
checker=checkers.InMemoryUsernamePasswordDatabaseDontUse()
checker.addUser("q","q")

portal=portal.Portal(realm)
portal.registerChecker(checker)

factory = ftp.FTPFactory(portal)
# definition de l'application
application = service.Application("ftp")

# definition du serveur et attache au service associe !!!
myServer=internet.TCPServer(21, factory)
myServer.setServiceParent(application)



Acc?dez au courrier ?lectronique de La Poste : www.laposte.net ; 
3615 LAPOSTENET (0,34?/mn) ; t?l : 08 92 68 13 50 (0,34?/mn)






From lc278 at cornell.edu  Tue May 31 09:39:50 2005
From: lc278 at cornell.edu (Laran Evans)
Date: Tue, 31 May 2005 09:39:50 -0400
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <2389d4730505281342a88942f@mail.gmail.com>
References: <4295F4DE.8020403@cornell.edu>
	<2389d4730505281342a88942f@mail.gmail.com>
Message-ID: <429C6926.7000801@cornell.edu>

jarrod roberson wrote:
> We are working on something similar for a project at work also.
> We are using ZeroConf ( aka formerly Apple Rendezvous now Apple Bonjour 
> ) for cluster discovery
> and a Perspective Broker interface for exchanging information.

 From what I've read about ZeroConf it seems like a LAN-only discovery 
mechanism. For clustering a web-server LAN only is fine. But there are 
certainly cases where it would be valuable to integrate WAN nodes.

If I were to build a toolkit I would want it to be able to run optimally 
on a LAN while maintaining the ability to achieve reliability and high 
performance on a WAN as well.

The folks at the AccessGrid at least would I'm sure appreciate that ability.

> We considered reliable multi-cast but decided against it because our 
> clusters are not going to be very big and
> are going to use a kind of inversion of control pattern instead of 
> distributing all the data everywhere.

The keyword in reliable multicast is "reliable". As soon as you have 2 
processes that you need to keep in sync, some form of reliable 
communication is necessary. And by virtue of the fact that there is more 
than one process, sending messages falls under the title of multi-cast.

So, I'm very interested to know how you integrated the IOC pattern to 
achieve reliability. This sounds a bit like a push vs. pull paradigm. If 
  that's the case I can point you to a paper which discusses the 
achievable properties of push, pull and push-pull scenarios.

> But I am interested in a COMMON IDIOM for clustering twisted servers, I 
> would definately say ZeroConf needs to be
> the discovery mechanism, no need to re-invent that wheel and a Twisted 
> implemenation is easy

ZeroConf does definitely look solid. And I'm 100% with you on 
not-reinventing the wheel. So I'll finish reading some of the ZeroConf 
specs to see what it can do.

- Laran




From trepca at gmail.com  Tue May 31 11:49:26 2005
From: trepca at gmail.com (Sebastjan Trepca)
Date: Tue, 31 May 2005 17:49:26 +0200
Subject: [Twisted-Python] twisted.mail.imap4.MessageSet object & imap4
	server example
Message-ID: <cd329af80505310849313e0b0b@mail.gmail.com>

Hi!

1. I don't understand how to use this object. When the fetch method is
called, this object is passed containing the requested messages which
you then return, right? But is there any easy way to just iterate
through it and get the requested UIDis, even if LAST is not set.

2. Where could I find some IMAP4 server examples? 

Thank you.

Regards, Sebastjan



From michele.petrazzo at unipex.it  Tue May 31 12:58:22 2005
From: michele.petrazzo at unipex.it (Michele Petrazzo)
Date: Tue, 31 May 2005 18:58:22 +0200
Subject: [Twisted-Python] wxpython, threadselectreactor and thread
In-Reply-To: <429B089C.4010002@unipex.it>
References: <429B089C.4010002@unipex.it>
Message-ID: <429C97AE.2050900@unipex.it>

Michele Petrazzo wrote:
> 
> 1) Sometime then I open and close my application I receive this
> error:
> 
> Unhandled exception in thread started by <bound method 
> Thread.__bootstrap of <Thread(Thread-1, stopped daemon)>> Traceback
> (most recent call last): File "C:\Python23\lib\threading.py", line
> 451, in __bootstrap self.__stop() File
> "C:\Python23\lib\threading.py", line 460, in __stop 
> self.__block.notifyAll() File "C:\Python23\lib\threading.py", line
> 256, in notifyAll self.notify(len(self.__waiters)) File
> "C:\Python23\lib\threading.py", line 238, in notify currentThread() #
> for side-effect TypeError: 'NoneType' object is not callable
> 

After a lot of tries, I see that this problem, depend on _sendToMain
method of ThreadedSelectReactor class.

If I put a simple try: SomeCode except: print 'exception on
_sendToMain', I see that I have no more errors, but only a simple print.

I don't know why this error occur, but I hope that this little hack can
help the developers.

Michele



From abe at fettig.net  Tue May 31 17:52:46 2005
From: abe at fettig.net (Abe Fettig)
Date: Tue, 31 May 2005 17:52:46 -0400
Subject: [Twisted-Python] Using twisted.conch.recvline
Message-ID: <429CDCAE.6020609@fettig.net>

Hello all,

I'm trying to figure out how to hook up the necessary classes in
twisted.conch.recvline to add line-editing and history to a simple ssh
app. It was easy to modify
http://twistedmatrix.com/projects/conch/documentation/examples/sshsimpleserver.py
to use a custom protocol (a simple command-line interface that sends web
services requests to a JotSpot wiki), but I can't figure out how
recvline is meant to be used. Could someone (Jp?) show me how you'd go
about bolting recvline onto sshsimpleserver?

Thanks!

Abe



From anthony at interlink.com.au  Sun May  1 02:46:46 2005
From: anthony at interlink.com.au (Anthony Baxter)
Date: Sun, 1 May 2005 18:46:46 +1000
Subject: [Twisted-Python] dbus + twisted
Message-ID: <200505011846.47927.anthony@interlink.com.au>

So it turns out that the python dbus bindings just use glib - this means
that if you're using gtk2reactor, you can use dbus and it all Just Works. 

This is very cool. It would be nice if there was a way to say (in dbus) 
"Give me any pending event" in a non-blocking way -- we could then 
write something similar to the current wxsupport module and use dbus
from any reactor. I'm not sure that this would be all that easy, as 
dbus supplies bindings to other event loops rather than to the raw 
network layer - but it's something that's probably worth looking into 
further...

Expect to see shtoom getting all dbussed up in the near future. ;)

Anthony
-- 
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From anthony at interlink.com.au  Sun May  1 07:22:05 2005
From: anthony at interlink.com.au (Anthony Baxter)
Date: Sun, 1 May 2005 23:22:05 +1000
Subject: [Twisted-Python] dbus + twisted
In-Reply-To: <200505011846.47927.anthony@interlink.com.au>
References: <200505011846.47927.anthony@interlink.com.au>
Message-ID: <200505012322.06763.anthony@interlink.com.au>

On Sunday 01 May 2005 18:46, Anthony Baxter wrote:
> So it turns out that the python dbus bindings just use glib - this means
> that if you're using gtk2reactor, you can use dbus and it all Just Works.

Hm. I spoke too soon. The server-side of it works fine (having code called
from dbus), but the client-side still needs work to make it work correctly 
with Twisted. Working on it...

Anthony
-- 
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From anthony at interlink.com.au  Mon May  2 06:56:17 2005
From: anthony at interlink.com.au (Anthony Baxter)
Date: Mon, 2 May 2005 22:56:17 +1000
Subject: [Twisted-Python] dbus + twisted
In-Reply-To: <200505012322.06763.anthony@interlink.com.au>
References: <200505011846.47927.anthony@interlink.com.au>
	<200505012322.06763.anthony@interlink.com.au>
Message-ID: <200505022256.17537.anthony@interlink.com.au>


So I've got a version of the client-side that seems to work fine checked into 
the sandbox/anthony/dbus directory. It's a bit messier than I'd like because 
of the design of the current bindings for dbus-python - I'll follow up with 
the dbus maintainers to figure out a better way to make it work. There's a
version of the example client and server modified to work with t_i_dbus.py
in the sandbox. Next up: test cases and docs. 

Get it from:
svn://svn.twistedmatrix.com/svn/Twisted/sandbox/anthony/dbus

I'm open to ideas on how to distribute this - as a separate project? It seems
to me like twisted.dbus is one place for it, or else twisted.internet.dbus? 

The code works with dbus-0.33 (the current released version) - dbus in CVS
looks like it's being chopped and changed a lot, so it's quite probably not 
going to work with that.

Also - currently the code will only work under gtk2reactor - the python dbus
bindings use the glib event loop. It would be nice to make the code event loop 
agnostic, but I suspect that would involve a whole pile of new code. 

Comments, bug reports, &c welcome. 
-- 
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From carolinaardohain at gmail.com  Mon May  2 08:43:05 2005
From: carolinaardohain at gmail.com (Carolina Ardohain)
Date: Mon, 2 May 2005 11:43:05 -0300
Subject: [Twisted-Python] Closing Jabber connection
Message-ID: <8ecf09605050207436633f5c3@mail.gmail.com>

I try to launch several jabber connections (BTW I use twisted 1.3).
When the login is successful there's no problem, but whe the password
is wrong I wanna to disconnect, I call connector.disconnect() but the
event client.BasicAuthenticator.AUTH_FAILED_EVENT keep calling again
and again. How I should close the connection so that event don't be
called anymore?

from twisted.protocols import jabber, xmlstream 
from twisted.protocols.jabber import client, jid
from twisted.internet import reactor, defer

class Connection:
    def __init__(self, who, myjid):
        self.jid = jid.JID(myjid)
        self.who = who

    def connect(self, passwd, port=5222):
        self.factory = client.basicClientFactory(self.jid, passwd)
        
        self.factory.addBootstrap(xmlstream.STREAM_AUTHD_EVENT,
self.onAuthSuccess)
        self.factory.addBootstrap(client.BasicAuthenticator.AUTH_FAILED_EVENT,
self.onAuthFailed)
        
        self.connector = reactor.connectTCP(self.jid.host, port, self.factory)
    
    def onAuthSuccess(self, stream):
        print "%s: Successful connection" % (self.who)
        self.stream = stream

    def onAuthFailed(self, stream):
        print "%s: Failed connection" % (self.who)
        self.connector.disconnect()

c1 = Connection('1', 'client1 at localhost/res1')
c2 = Connection('2', 'client2 at localhost/res1')
c1.connect('client1')
c2.connect('client22')

reactor.run()


The output is ('2' has wrong password)

1: Successful connection
2: Failed connection
2: Failed connection
2: Failed connection
2: Failed connection
....
2: Failed connection



From jmonteath at dkp.com  Mon May  2 11:34:43 2005
From: jmonteath at dkp.com (James Monteath)
Date: Mon, 02 May 2005 13:34:43 -0400
Subject: [Twisted-Python] Newbie reactor.crash()/reactor.stop() question
In-Reply-To: <20050430160122.15422.1513488416.divmod.quotient.10014@ohm>
References: <20050430160122.15422.1513488416.divmod.quotient.10014@ohm>
Message-ID: <427664B3.9060106@dkp.com>

Hi,

I have the exact same problem.  I am using the standard unittest, not 
the one found in Twisted, for the moment anyway.

All my tests work perfectly while using Twisted 1.3, calling 
reactor.crash() vs reactor.stop().  I originally had problems calling 
reactor. stop() with the python unittest framework, until I switched 
over to reactor.crash(). 

I then wanted to run the tests using Twisted 2.0.  The python process 
that starts the unittest will hang after all tests are done.   I can't 
kill the process using a CTRL-C at the command line and must use the 
kill -9 command.

Also, I noticed that the main part of the program does execute the last 
print statement found at:

if __name__ == "__main__":
    run()
    print( "This will print and then hang" )


The following is a bug that had similar behavior, which **may** explain 
the source of the issue:

http://twistedmatrix.com/bugs/issue994

I am using python 2.3.4 on SUSE 9.2,  and also new to Twisted...

James.



glyph at divmod.com wrote:

>
>
> On Sat, 30 Apr 2005 11:16:19 -0400, T Barket <thomas_barket at yahoo.com> 
> wrote:
>
>> Hello,
>
>
>> i have read i cannot stop and restart a reactor (which is what i 
>> would like
>> to do on the client side).
>
>
> It sounds like you may have found a bug (I'll look into it) but...
>
> If you want to use the reactor interactively, look into the various 
> incarnations of Manhole.  Stopping the reactor and starting it again 
> has lots of ugly side-effects which are hard to explain until you've 
> had a lot of experience working with the reactor the "right" way.
>
> (If you absolutely need it, of course, it should work, and we'll fix 
> it - but it's extremely rare that people actually need it, and pretty 
> common that people *think* they need it.)
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050502/b183adec/attachment.html>

From corydodt at twistedmatrix.com  Mon May  2 12:49:27 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Mon, 02 May 2005 10:49:27 -0800
Subject: [Twisted-Python] Another win32 installer release
Message-ID: <42767637.5080909@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

As usual, they're here.  As usual, this is based on OFFICIAL, RELEASED
Twisted 2.0.0 but the *installers themselves* are considered RC's.

This fixes issue 991.  It also fixes issue 996 for Windows.  (Issue 996
pertains to other platforms as well.)

http://twisted.sf.net/Twisted_NoDocs-2.0.0.win32(installer-rc4)-py2.4.exe
http://twisted.sf.net/Twisted_NoDocs-2.0.0.win32(installer-rc4)-py2.3.exe

C

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.5 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFCdnVS3A5SrXAiHQcRAlVoAKCCbL5jqhNkceTkTRDrOZOS7ca0/QCgpgjo
oqUbR6/dFtdiTpxymCjOw4o=
=ebHv
-----END PGP SIGNATURE-----



From bear at code-bear.com  Mon May  2 12:22:30 2005
From: bear at code-bear.com (Mike Taylor)
Date: Mon, 2 May 2005 14:22:30 -0400
Subject: [Twisted-Python] Another win32 installer release
In-Reply-To: <42767637.5080909@twistedmatrix.com>
References: <42767637.5080909@twistedmatrix.com>
Message-ID: <9792e41ef41ab66c7f8782736fc19be3@code-bear.com>

I tested the python 2.4 installer and confirmed that issue 991 is fixed  
- thanks!

---
Bear
http://code-bear.com

Open Source Applications Foundation (OSAF)
http://www.osafoundation.org

PGP Fingerprint = 9996 719F 973D B11B E111  D770 9331 E822 40B3 CD29


On May 2, 2005, at 2:49 PM, Cory Dodt wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> As usual, they're here.  As usual, this is based on OFFICIAL, RELEASED
> Twisted 2.0.0 but the *installers themselves* are considered RC's.
>
> This fixes issue 991.  It also fixes issue 996 for Windows.  (Issue 996
> pertains to other platforms as well.)
>
> http://twisted.sf.net/Twisted_NoDocs-2.0.0.win32(installer-rc4)- 
> py2.4.exe
> http://twisted.sf.net/Twisted_NoDocs-2.0.0.win32(installer-rc4)- 
> py2.3.exe
>
> C
>
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.2.5 (MingW32)
> Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org
>
> iD8DBQFCdnVS3A5SrXAiHQcRAlVoAKCCbL5jqhNkceTkTRDrOZOS7ca0/QCgpgjo
> oqUbR6/dFtdiTpxymCjOw4o=
> =ebHv
> -----END PGP SIGNATURE-----
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20050502/79a2f09b/attachment.sig>

From jarrod.roberson at gmail.com  Mon May  2 18:24:40 2005
From: jarrod.roberson at gmail.com (jarrod roberson)
Date: Mon, 2 May 2005 20:24:40 -0400
Subject: [Twisted-Python] blocking and threads
In-Reply-To: <20050427142447.15422.447243835.divmod.quotient.3579@ohm>
References: <20050427140715.15292.qmail@web53101.mail.yahoo.com>
	<20050427142447.15422.447243835.divmod.quotient.3579@ohm>
Message-ID: <2389d47305050217247647bb9@mail.gmail.com>

On 4/27/05, Jp Calderone <exarkun at divmod.com> wrote:
> 
> 
> 
> For many projects, asynchronous disk file i/o isn't actually that 
> important. They either only do a little bit of it, or they can fragment it 
> over multiple reactor iterations manually without too much effort. 



can you explain the "fragement it over multiple reactor itertations" please?

I actually have a project that it is very import and we are trying to figure 
out the best way to do this type of thing
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050502/dfb7356b/attachment.html>

From naewe.s at atlas.de  Tue May  3 01:42:13 2005
From: naewe.s at atlas.de (=?ISO-8859-15?Q?Stefan_N=E4we?=)
Date: Tue, 03 May 2005 09:42:13 +0200
Subject: [Twisted-Python] Q about handling CTRL-C correctly
Message-ID: <42772B55.8040709@atlas.de>

Hi.
I'm new to twisted.
I'm trying to create a simple twisted server that sends some telegrams
(created with struct.pack()) every second to the connected clients.
Attached is what I came up with so far.

My problem is, that I don't know how to handle CTRL-C correctly. If
I run my test server and press CTRL-C while a client is connected I get
something like:


2005/05/03 09:23     [__main__.SimpleFactory] Received SIGINT, shutting
down.


and that's it. The server simply keeps running. But I want it to
shutdown. I hope someone can help me.

Thanks

Stefan
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: test_twisted.py
URL: </pipermail/twisted-python/attachments/20050503/1f828e97/attachment.ksh>

From twisted at ralphm.ik.nu  Tue May  3 04:56:35 2005
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Tue, 3 May 2005 12:56:35 +0200
Subject: [Twisted-Python] Closing Jabber connection
In-Reply-To: <8ecf09605050207436633f5c3@mail.gmail.com>
References: <8ecf09605050207436633f5c3@mail.gmail.com>
Message-ID: <20050503105635.GA81824@ik.nu>

On Mon, May 02, 2005 at 11:43:05AM -0300, Carolina Ardohain wrote:
> I try to launch several jabber connections (BTW I use twisted 1.3).
> When the login is successful there's no problem, but whe the password
> is wrong I wanna to disconnect, I call connector.disconnect() but the
> event client.BasicAuthenticator.AUTH_FAILED_EVENT keep calling again
> and again. How I should close the connection so that event don't be
> called anymore?

Calling connector.disconnect() will only close the current connection.
Since the factory returned by client.basicClientFactory is derived from
twisted.internet.protocol.ReconnectingClientFactory, it will happily
retry connecting unless you tell it not to.

Solution: in onAuthFailed(), call self.factory.stopTrying().

By the way, as maintainer of the Jabber stuff in Twisted I can say that
there a fair number of issues in the twisted 1.3 implementation. All of
them have all been resolved in 2.0, and I strongly recommend you to
migrate your work to this.

-- 
Groetjes,

ralphm



From tim at se.linux.org  Tue May  3 05:14:43 2005
From: tim at se.linux.org (=?iso-8859-1?Q?Tim_Terleg=E5rd?=)
Date: Tue, 3 May 2005 13:14:43 +0200 (CEST)
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <20050503105635.GA81824@ik.nu>
Message-ID: <Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>

> By the way, as maintainer of the Jabber stuff in Twisted I can say that
> there a fair number of issues in the twisted 1.3 implementation. All of
> them have all been resolved in 2.0, and I strongly recommend you to
> migrate your work to this.

What are the (short-term and long-term) plans for this Jabber
implementation? Full jabber implementation? Implement as many JEPs as
possible?

Tim




From twisted at ralphm.ik.nu  Tue May  3 05:39:42 2005
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Tue, 3 May 2005 13:39:42 +0200
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>
References: <20050503105635.GA81824@ik.nu>
	<Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>
Message-ID: <20050503113942.GA82735@ik.nu>

On Tue, May 03, 2005 at 01:14:43PM +0200, Tim Terlegård wrote:
> > By the way, as maintainer of the Jabber stuff in Twisted I can say that
> > there a fair number of issues in the twisted 1.3 implementation. All of
> > them have all been resolved in 2.0, and I strongly recommend you to
> > migrate your work to this.
> 
> What are the (short-term and long-term) plans for this Jabber
> implementation? Full jabber implementation? Implement as many JEPs as
> possible?

Well, my first goal was to make sure the existing stuff works correctly.
An example is having a good stringprep implementation for JIDs.  This is
mostly done now.

The currently available code is usable to base any application on, but
everything deals in domish Element objects. There are no higher level
abstractions, yet, but some developers like it that way.

There is no real plan on how to proceed, also because I have no idea of
what is desired. So, any suggestions are welcome. Also, I am a bit
curious about what the Jabber support in Twisted is currently used for.
My current development efforts revolve around Idavoll (a generic publish
subscribe component following JEP-0060) and Mimír (a Jabber enabled news
service).

-- 
Groetjes,

ralphm



From christopher.zorn at gmail.com  Tue May  3 06:49:17 2005
From: christopher.zorn at gmail.com (Christopher Zorn)
Date: Tue, 3 May 2005 08:49:17 -0400
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <20050503113942.GA82735@ik.nu>
References: <20050503105635.GA81824@ik.nu>
	<Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>
	<20050503113942.GA82735@ik.nu>
Message-ID: <149014b905050305495094e492@mail.gmail.com>

On 5/3/05, Ralph Meijer <twisted at ralphm.ik.nu> wrote:
> On Tue, May 03, 2005 at 01:14:43PM +0200, Tim Terlegård wrote:
> > > By the way, as maintainer of the Jabber stuff in Twisted I can say that
> > > there a fair number of issues in the twisted 1.3 implementation. All of
> > > them have all been resolved in 2.0, and I strongly recommend you to
> > > migrate your work to this.
> >
> > What are the (short-term and long-term) plans for this Jabber
> > implementation? Full jabber implementation? Implement as many JEPs as
> > possible?
> 
> Well, my first goal was to make sure the existing stuff works correctly.
> An example is having a good stringprep implementation for JIDs.  This is
> mostly done now.
> 
> The currently available code is usable to base any application on, but
> everything deals in domish Element objects. There are no higher level
> abstractions, yet, but some developers like it that way.
> 
> There is no real plan on how to proceed, also because I have no idea of
> what is desired. So, any suggestions are welcome. Also, I am a bit
> curious about what the Jabber support in Twisted is currently used for.
> My current development efforts revolve around Idavoll (a generic publish
> subscribe component following JEP-0060) and Mimír (a Jabber enabled news
> service).
> 

I use it for various small projects, mostly bots and components. I
also use it for
punjab ( http://punjab.sf.net ). I would like to see other JEPS (muc
would be cool), maybe some server stuff, and an authenticator with
sasl. I may make an attempt with some of this stuff. I will submit
what I do to the list. Is that ok?


> --
> Groetjes,
> 
> ralphm
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From foom at fuhm.net  Tue May  3 08:11:36 2005
From: foom at fuhm.net (James Y Knight)
Date: Tue, 3 May 2005 10:11:36 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <76e33b8ec40fe63d6e5595971c19cfdd@fuhm.net>

Bug summary
______________________
Since 2005-04-25 14:26:00.540000:
  Bugs opened: 11   Bugs closed: 7   Total open bugs: 350 (+4)
   Urgent: 7 (+1)
   Bug: 137 (+2)
   Feature: 136 (+1)
   Wish: 70 (+0)

New / Reopened Bugs
______________________
                     ==== Urgent ====
[RELEASE MANAGEMENT] release 2.0.1  (4 days ago)
        http://twistedmatrix.com/bugs/issue1007 opened by jknight

ProtocolWrapper's behavior is unspecified  (6 days ago)
        http://twistedmatrix.com/bugs/issue1004 opened by exarkun

                     ==== Bug ====
twisted.news.news  (3 hours ago)
        http://twistedmatrix.com/bugs/issue1012 opened by manlio

[WEB] Missing return in HTTPPageGetter.handleStatus_301()?  (3 hours 
ago)
        http://twistedmatrix.com/bugs/issue1011 opened by jojo

[DEFERRED, DOCUMENTATION] Document defgen  (3 days ago)
        http://twistedmatrix.com/bugs/issue1009 opened by hypatia

[PB] CopiedFailure printTraceback method signature doesn't match 
Failure's  (4 days ago)
        http://twistedmatrix.com/bugs/issue1006 opened by micktwomey

[TRIAL] Trial sucks and is broken  (5 days ago)
        http://twistedmatrix.com/bugs/issue1005 opened by exarkun

[FTP] [PATCH] twisted.protocols.ftp enchanements  (7 days ago)
        http://twistedmatrix.com/bugs/issue1003 opened by mkerrin

                     ==== Feature ====
[WEB] Be more failure tolerant in HTTPClient.lineReceived?  (3 hours 
ago)
        http://twistedmatrix.com/bugs/issue1010 opened by jojo

[ENTERPRISE] Add runWithConnection to adbapi.ConnectionPool  (3 weeks 
ago)
CLOSED http://twistedmatrix.com/bugs/issue975 opened by mg

                     ==== Wish ====
[WIN32] Implement spawnProcess for IOCP reactor  (3 days ago)
        http://twistedmatrix.com/bugs/issue1008 opened by justinj

Bugs Closed
______________________
                     ==== Urgent ====
[XISH] Erroneous .encode('utf-8') in twisted.xish.domish  (1 week ago)
        http://twistedmatrix.com/bugs/issue1002 opened by ralphm, closed 
by ralphm

                     ==== Bug ====
[CORE, WIN32] twistenv.bat doesn't correctly set PATHEXT  (2 weeks ago)
        http://twistedmatrix.com/bugs/issue991 opened by exarkun, closed 
by moonfallen

[RELEASE MANAGEMENT] Better error message when missing twisted package  
(1 month ago)
        http://twistedmatrix.com/bugs/issue953 opened by ianb, closed by 
exarkun

[TRIAL] [TEST] setUpClass run even if class set to skip  (4 months ago)
        http://twistedmatrix.com/bugs/issue831 opened by exarkun, closed 
by exarkun

[TRIAL] when two test modules have the same classname, class name isn't 
reported second time  (4 months ago)
        http://twistedmatrix.com/bugs/issue832 opened by radix, closed 
by exarkun

                     ==== Feature ====
[ENTERPRISE] Add runWithConnection to adbapi.ConnectionPool  (3 weeks 
ago)
        http://twistedmatrix.com/bugs/issue975 opened by mg, closed by 
davep

                     ==== Wish ====
[PB] [PATCH] Return PB Exceptions that have registered unjellyable  (4 
months ago)
        http://twistedmatrix.com/bugs/issue844 opened by justinj, closed 
by exarkun




From projects at reedflute.com  Tue May  3 10:07:07 2005
From: projects at reedflute.com (Eugene Coetzee)
Date: Tue, 03 May 2005 18:07:07 +0200
Subject: [Twisted-Python] blocking and threads
In-Reply-To: <2389d47305050217247647bb9@mail.gmail.com>
References: <20050427140715.15292.qmail@web53101.mail.yahoo.com>	<20050427142447.15422.447243835.divmod.quotient.3579@ohm>
	<2389d47305050217247647bb9@mail.gmail.com>
Message-ID: <4277A1AB.6090406@reedflute.com>

jarrod roberson wrote:

>
>
> On 4/27/05, *Jp Calderone* <exarkun at divmod.com 
> <mailto:exarkun at divmod.com>> wrote:
>
>
>
>       For many projects, asynchronous disk file i/o isn't actually
>     that important.  They either only do a little bit of it, or they
>     can fragment it over multiple reactor iterations manually without
>     too much effort.  
>
>
>
> can you explain the "fragement it over multiple reactor itertations" 
> please?
>
see if this thread is helpful:

http://twistedmatrix.com/pipermail/twisted-python/2005-March/009950.html

I'm using this technique which boils down to reactor.callLater(0, 
recursive_function, args)

I also tried reactor.iterate()

(http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReactorCore.html#iterate 
)

- although this prevented blocking for some reason it had some 
undesirable side effects with my app.

regards,

Eugene Coetzee
 

-- 
--
===============================================
Reedflute Software Solutions

Telephone           -> +27 18 293 3236
General information -> info at reedflute.com
Project information -> projects at reedflute.com
Web                 -> www.reedflute.com
=============================================== 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050503/407fa384/attachment.html>

From itamar at itamarst.org  Tue May  3 10:44:29 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 03 May 2005 12:44:29 -0400
Subject: [Twisted-Python] blocking and threads
In-Reply-To: <4277A1AB.6090406@reedflute.com>
References: <20050427140715.15292.qmail@web53101.mail.yahoo.com>
	<20050427142447.15422.447243835.divmod.quotient.3579@ohm>
	<2389d47305050217247647bb9@mail.gmail.com>
	<4277A1AB.6090406@reedflute.com>
Message-ID: <1115138670.8753.36.camel@localhost.localdomain>

On Tue, 2005-05-03 at 18:07 +0200, Eugene Coetzee wrote:

> I also tried reactor.iterate() 
> 
> (http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReactorCore.html#iterate )

Don't do that, reactor.iterate() is not something Twisted applications
should use.




From carolinaardohain at gmail.com  Tue May  3 11:21:08 2005
From: carolinaardohain at gmail.com (Carolina Ardohain)
Date: Tue, 3 May 2005 14:21:08 -0300
Subject: [Twisted-Python] Closing Jabber connection
In-Reply-To: <20050503105635.GA81824@ik.nu>
References: <8ecf09605050207436633f5c3@mail.gmail.com>
	<20050503105635.GA81824@ik.nu>
Message-ID: <8ecf096050503102110437542@mail.gmail.com>

Thank you.

> 
> Calling connector.disconnect() will only close the current connection.
> Since the factory returned by client.basicClientFactory is derived from
> twisted.internet.protocol.ReconnectingClientFactory, it will happily
> retry connecting unless you tell it not to.
> 
> Solution: in onAuthFailed(), call self.factory.stopTrying().
> 
> By the way, as maintainer of the Jabber stuff in Twisted I can say that
> there a fair number of issues in the twisted 1.3 implementation. All of
> them have all been resolved in 2.0, and I strongly recommend you to
> migrate your work to this.
> 
> --
> Groetjes,
> 
> ralphm
>



From stpeter at jabber.org  Tue May  3 12:21:04 2005
From: stpeter at jabber.org (Peter Saint-Andre)
Date: Tue, 3 May 2005 13:21:04 -0500
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <149014b905050305495094e492@mail.gmail.com>
References: <20050503105635.GA81824@ik.nu>
	<Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>
	<20050503113942.GA82735@ik.nu>
	<149014b905050305495094e492@mail.gmail.com>
Message-ID: <20050503182104.GD5579@jabber.org>

On Tue, May 03, 2005 at 08:49:17AM -0400, Christopher Zorn wrote:
> On 5/3/05, Ralph Meijer <twisted at ralphm.ik.nu> wrote:
> > On Tue, May 03, 2005 at 01:14:43PM +0200, Tim Terleg?rd wrote:
> >
> > > What are the (short-term and long-term) plans for this Jabber
> > > implementation? Full jabber implementation? Implement as many JEPs as
> > > possible?
> > 
> > There is no real plan on how to proceed, also because I have no idea of
> > what is desired. So, any suggestions are welcome. Also, I am a bit
> > curious about what the Jabber support in Twisted is currently used for.
> > My current development efforts revolve around Idavoll (a generic publish
> > subscribe component following JEP-0060) and Mim?r (a Jabber enabled news
> > service).
> 
> I use it for various small projects, mostly bots and components. I
> also use it for
> punjab ( http://punjab.sf.net ). I would like to see other JEPS (muc
> would be cool), maybe some server stuff, and an authenticator with
> sasl. I may make an attempt with some of this stuff. I will submit
> what I do to the list. Is that ok?

I think it would be good to clarify the overall objective. Lots of folks
are interested in building a full reference implementation of the XMPP
RFCs and various JEPs (probably those which have reached Draft in the
JSF's standards process) in Python, but that seems like a major server
effort rather than something which would necessarily go into Twisted.
But perhaps I'm wrong about that. ;-)

Peter




From glyph at divmod.com  Tue May  3 13:07:20 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Tue, 03 May 2005 15:07:20 -0400
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <20050503182104.GD5579@jabber.org>
References: <20050503105635.GA81824@ik.nu>	<Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>	<20050503113942.GA82735@ik.nu>	<149014b905050305495094e492@mail.gmail.com>
	<20050503182104.GD5579@jabber.org>
Message-ID: <4277CBE8.4090409@divmod.com>

Peter Saint-Andre wrote:

> I think it would be good to clarify the overall objective. Lots of folks
> are interested in building a full reference implementation of the XMPP
> RFCs and various JEPs (probably those which have reached Draft in the
> JSF's standards process) in Python, but that seems like a major server
> effort rather than something which would necessarily go into Twisted.
> But perhaps I'm wrong about that. ;-)

Twisted _is_ a major server effort.  What did you think it was? :)

Seriously though, I would like to see more stuff like this go into 
Twisted if possible.  The more functionality is built into the core, the 
more consistent that functionality will become over time, and the more 
different kinds of applications can access it.




From itamar at itamarst.org  Tue May  3 13:24:15 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 03 May 2005 15:24:15 -0400
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <4277CBE8.4090409@divmod.com>
References: <20050503105635.GA81824@ik.nu>
	<Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>
	<20050503113942.GA82735@ik.nu>	<149014b905050305495094e492@mail.gmail.com>
	<20050503182104.GD5579@jabber.org>  <4277CBE8.4090409@divmod.com>
Message-ID: <1115148255.8753.58.camel@localhost.localdomain>

On Tue, 2005-05-03 at 15:07 -0400, Glyph Lefkowitz wrote:

> Seriously though, I would like to see more stuff like this go into 
> Twisted if possible.  The more functionality is built into the core, the 
> more consistent that functionality will become over time, and the more 
> different kinds of applications can access it.

Plus these days it's no longer "the core", it's "the Twisted
chat/messaging project."




From stpeter at jabber.org  Tue May  3 14:17:34 2005
From: stpeter at jabber.org (Peter Saint-Andre)
Date: Tue, 3 May 2005 15:17:34 -0500
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <4277CBE8.4090409@divmod.com>
References: <20050503105635.GA81824@ik.nu>
	<Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>
	<20050503113942.GA82735@ik.nu>
	<149014b905050305495094e492@mail.gmail.com>
	<20050503182104.GD5579@jabber.org> <4277CBE8.4090409@divmod.com>
Message-ID: <20050503201734.GH5579@jabber.org>

On Tue, May 03, 2005 at 03:07:20PM -0400, Glyph Lefkowitz wrote:
> Peter Saint-Andre wrote:
> 
> >I think it would be good to clarify the overall objective. Lots of folks
> >are interested in building a full reference implementation of the XMPP
> >RFCs and various JEPs (probably those which have reached Draft in the
> >JSF's standards process) in Python, but that seems like a major server
> >effort rather than something which would necessarily go into Twisted.
> >But perhaps I'm wrong about that. ;-)
> 
> Twisted _is_ a major server effort.  What did you think it was? :)
> 
> Seriously though, I would like to see more stuff like this go into 
> Twisted if possible.  The more functionality is built into the core, the 
> more consistent that functionality will become over time, and the more 
> different kinds of applications can access it.

Well, perhaps I've always misunderstood what Twisted is all about. 
From my perspective it's always seemed like an interconnected set 
of libraries, not a dedicated HTTP serverr or XMPP server or IRC 
server or whatever. (Yes, I know it does all of those and more.)
So I thought that we'd build Jabber/XMPP support into some core 
level and then someone would come along and build a full-fledged
Jabber server on top of that in a separate effort.

Now it seems that Twisted Words is an effort to build a generic 
chat server of some kind, but I've not seen a roadmap for that,
and it's not clear to me what it means to build a generic chat
server. I know what it means to build a Jabber/XMPP server, and
what it means to build an IRC server. But as far as I know there
is no such thing as the "generic chat" protocol. :-) So will Words
implement, say, the IRC RFCs and the XMPP RFCs and various XMPP
extensions (defined in JEPs published by the JSF) and also SIP
and SIMPLE and some less-open chat protocols such as Oscar, MSN, 
etc.? If so, how is all that stuff supposed to work together?

Just curious. ;-)

As I said, I know of several folks in the Jabber community who
are quite interested in building a reference XMPP/Jabber server
in Python, and I'm wondering if Words is the place to point them.

Thanks!

Peter




From projects at reedflute.com  Tue May  3 14:51:15 2005
From: projects at reedflute.com (Eugene Coetzee)
Date: Tue, 03 May 2005 22:51:15 +0200
Subject: [Twisted-Python] blocking and threads
In-Reply-To: <1115138670.8753.36.camel@localhost.localdomain>
References: <20050427140715.15292.qmail@web53101.mail.yahoo.com>	<20050427142447.15422.447243835.divmod.quotient.3579@ohm>	<2389d47305050217247647bb9@mail.gmail.com>	<4277A1AB.6090406@reedflute.com>
	<1115138670.8753.36.camel@localhost.localdomain>
Message-ID: <4277E443.6080902@reedflute.com>

Itamar Shtull-Trauring wrote:

>On Tue, 2005-05-03 at 18:07 +0200, Eugene Coetzee wrote:
>
>  
>
>>I also tried reactor.iterate() 
>>
>>(http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReactorCore.html#iterate )
>>    
>>
>
>Don't do that, reactor.iterate() is not something Twisted applications
>should use.
>
>  
>
Ok, perhaps that was a bit of wishful thinking :-) 

It would have been kind of neat if one could call something like reactor.yield(thisfunc,delay) from within a time consuming loop instead of the recursive workaround or resorting to a multithreaded approach.



-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050503/fcb38af3/attachment.html>

From twisted at ralphm.ik.nu  Tue May  3 15:54:49 2005
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Tue, 3 May 2005 23:54:49 +0200
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <20050503201734.GH5579@jabber.org>
References: <20050503105635.GA81824@ik.nu>
	<Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>
	<20050503113942.GA82735@ik.nu>
	<149014b905050305495094e492@mail.gmail.com>
	<20050503182104.GD5579@jabber.org> <4277CBE8.4090409@divmod.com>
	<20050503201734.GH5579@jabber.org>
Message-ID: <20050503215449.GA98841@ik.nu>

On Tue, May 03, 2005 at 03:17:34PM -0500, Peter Saint-Andre wrote:
> [..]
>
> As I said, I know of several folks in the Jabber community who
> are quite interested in building a reference XMPP/Jabber server
> in Python, and I'm wondering if Words is the place to point them.

Besides that, one could argue that XMPP/Jabber doesn't belong in Words
alltogether because IM is just one possible use of XMPP/Jabber.

-- 
Groetjes,

ralphm



From glyph at divmod.com  Tue May  3 17:30:19 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Tue, 03 May 2005 19:30:19 -0400
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <20050503215449.GA98841@ik.nu>
References: <20050503105635.GA81824@ik.nu>	<Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>	<20050503113942.GA82735@ik.nu>	<149014b905050305495094e492@mail.gmail.com>	<20050503182104.GD5579@jabber.org>
	<4277CBE8.4090409@divmod.com>	<20050503201734.GH5579@jabber.org>
	<20050503215449.GA98841@ik.nu>
Message-ID: <4278098B.3080702@divmod.com>

Ralph Meijer wrote:
> On Tue, May 03, 2005 at 03:17:34PM -0500, Peter Saint-Andre wrote:
> 
>>[..]
>>
>>As I said, I know of several folks in the Jabber community who
>>are quite interested in building a reference XMPP/Jabber server
>>in Python, and I'm wondering if Words is the place to point them.
> 
> 
> Besides that, one could argue that XMPP/Jabber doesn't belong in Words
> alltogether because IM is just one possible use of XMPP/Jabber.

One could argue that, but one would also be wrong :)

Any protocol can be repurposed.  Just look at some of the ridiculous 
things being done with HTTP that are not at all related to the dubious 
heading of "hypertext", which is what "web" originally meant.  Or, 
consider how many proprietary ad-hoc systems use IRC as a message 
transport or router.  Nevertheless, we classify these protocols 
according to their original intentions; IRC is not going into 
Twisted.ORB any time soon.

Twisted Words is the place in Twisted for soft-real-time messaging 
protocols with human endpoints.  They don't have to be transporting 
plain text, and they don't have to be using TCP (or even IP!).

The ultimate goal is to provide a hub where messages can arrive over one 
protocol and be sent out over another.  That's why the client and server 
halves of the protocols are in the same place, although previous 
projects (gaim, jabber, ircd) have separated these domains with a brick 
wall.  A primary function of a Words server would be to act as a client 
to some other server so that it can provide a more civilized (say, 
Jabber, or Q2Q-Chat) interface to a legacy IRC or OSCAR server.  This 
usually involves  pretending to be at least one client.

This may even include a co-dependency with Twisted Web for, for example, 
routing XMLRPC requests over Jabber into regular HTTP XMLRPC requests. 
However, initially it would be good to just have a multi-protocol 
messaging abstraction available which would allow for that sort of 
application.

I wish I had more time to work on a roadmap but pretty much 150% of my 
time is spoken for right now.  I am probably stealing time from somebody 
just writing this email!  I hope that it has been useful.




From robin at wiretooth.com  Tue May  3 20:35:17 2005
From: robin at wiretooth.com (Robin Bryce)
Date: Wed, 04 May 2005 03:35:17 +0100
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <4278098B.3080702@divmod.com>
References: <20050503105635.GA81824@ik.nu>	<Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>	<20050503113942.GA82735@ik.nu>	<149014b905050305495094e492@mail.gmail.com>	<20050503182104.GD5579@jabber.org>	<4277CBE8.4090409@divmod.com>	<20050503201734.GH5579@jabber.org>	<20050503215449.GA98841@ik.nu>
	<4278098B.3080702@divmod.com>
Message-ID: <427834E5.3000303@wiretooth.com>

> This may even include a co-dependency with Twisted Web for, for
> example, routing XMLRPC requests over Jabber into regular HTTP XMLRPC
> requests. However, initially it would be good to just have a
> multi-protocol messaging abstraction available which would allow for
> that sort of application.

I'm working on an application that would probably benefit from this 
abstraction. An example case from this app is receiving an SMS, via the 
aggregators gateway (clickatell) over http, then forwarding it to 
another "user" via Jabber. Doing this has had me banging on the jabber 
Twisted.Words from the 2.0 release quite a bit.

Not sure if this adds to the conversation but I wanted to say "ooh, I'd 
like some of that please" re Glyphs comments.

Robin

Glyph Lefkowitz wrote:
> Ralph Meijer wrote:
> 
>> On Tue, May 03, 2005 at 03:17:34PM -0500, Peter Saint-Andre wrote:
>>
>>> [..]
>>>
>>> As I said, I know of several folks in the Jabber community who
>>> are quite interested in building a reference XMPP/Jabber server
>>> in Python, and I'm wondering if Words is the place to point them.
>>
>>
>>
>> Besides that, one could argue that XMPP/Jabber doesn't belong in Words
>> alltogether because IM is just one possible use of XMPP/Jabber.
> 
> 
> One could argue that, but one would also be wrong :)
> 
> Any protocol can be repurposed.  Just look at some of the ridiculous 
> things being done with HTTP that are not at all related to the dubious 
> heading of "hypertext", which is what "web" originally meant.  Or, 
> consider how many proprietary ad-hoc systems use IRC as a message 
> transport or router.  Nevertheless, we classify these protocols 
> according to their original intentions; IRC is not going into 
> Twisted.ORB any time soon.
> 
> Twisted Words is the place in Twisted for soft-real-time messaging 
> protocols with human endpoints.  They don't have to be transporting 
> plain text, and they don't have to be using TCP (or even IP!).
> 
> The ultimate goal is to provide a hub where messages can arrive over one 
> protocol and be sent out over another.  That's why the client and server 
> halves of the protocols are in the same place, although previous 
> projects (gaim, jabber, ircd) have separated these domains with a brick 
> wall.  A primary function of a Words server would be to act as a client 
> to some other server so that it can provide a more civilized (say, 
> Jabber, or Q2Q-Chat) interface to a legacy IRC or OSCAR server.  This 
> usually involves  pretending to be at least one client.
> 
> This may even include a co-dependency with Twisted Web for, for example, 
> routing XMLRPC requests over Jabber into regular HTTP XMLRPC requests. 
> However, initially it would be good to just have a multi-protocol 
> messaging abstraction available which would allow for that sort of 
> application.
> 
> I wish I had more time to work on a roadmap but pretty much 150% of my 
> time is spoken for right now.  I am probably stealing time from somebody 
> just writing this email!  I hope that it has been useful.
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From anthony at interlink.com.au  Tue May  3 21:10:04 2005
From: anthony at interlink.com.au (Anthony Baxter)
Date: Wed, 4 May 2005 13:10:04 +1000
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <4278098B.3080702@divmod.com>
References: <20050503105635.GA81824@ik.nu> <20050503215449.GA98841@ik.nu>
	<4278098B.3080702@divmod.com>
Message-ID: <200505041310.05103.anthony@interlink.com.au>

On Wednesday 04 May 2005 09:30, Glyph Lefkowitz wrote:
> > Besides that, one could argue that XMPP/Jabber doesn't belong in Words
> > alltogether because IM is just one possible use of XMPP/Jabber.
>
> One could argue that, but one would also be wrong :)
>
> Any protocol can be repurposed.  

*cough* SIMPLE *cough*

t.p.sip doesn't go into twisted.words, either. 


-- 
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From foom at fuhm.net  Tue May  3 21:47:31 2005
From: foom at fuhm.net (James Y Knight)
Date: Tue, 3 May 2005 23:47:31 -0400
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <200505041310.05103.anthony@interlink.com.au>
References: <20050503105635.GA81824@ik.nu> <20050503215449.GA98841@ik.nu>
	<4278098B.3080702@divmod.com>
	<200505041310.05103.anthony@interlink.com.au>
Message-ID: <2bdd861281b1d643f5ff0a512d79c879@fuhm.net>

On May 3, 2005, at 11:10 PM, Anthony Baxter wrote:
> On Wednesday 04 May 2005 09:30, Glyph Lefkowitz wrote:
>>> Besides that, one could argue that XMPP/Jabber doesn't belong in 
>>> Words
>>> alltogether because IM is just one possible use of XMPP/Jabber.
>>
>> One could argue that, but one would also be wrong :)
>>
>> Any protocol can be repurposed.
>
> *cough* SIMPLE *cough*
>
> t.p.sip doesn't go into twisted.words, either.

Boy am I sorry I looked up SIMPLE. And here I thought SOAP was funny 
for calling itself simple...at least its *name* isn't SIMPLE. What is 
it with these protocols calling themselves "simple"...

James




From anthony at interlink.com.au  Tue May  3 22:18:48 2005
From: anthony at interlink.com.au (Anthony Baxter)
Date: Wed, 4 May 2005 14:18:48 +1000
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <2bdd861281b1d643f5ff0a512d79c879@fuhm.net>
References: <20050503105635.GA81824@ik.nu>
	<200505041310.05103.anthony@interlink.com.au>
	<2bdd861281b1d643f5ff0a512d79c879@fuhm.net>
Message-ID: <200505041418.49361.anthony@interlink.com.au>

On Wednesday 04 May 2005 13:47, James Y Knight wrote:
> Boy am I sorry I looked up SIMPLE. And here I thought SOAP was funny
> for calling itself simple...at least its *name* isn't SIMPLE. What is
> it with these protocols calling themselves "simple"...

SIMPLE is seriously seriously nasty. A worse impedance mismatch I've
not seen in a long time.


-- 
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From glyph at divmod.com  Tue May  3 23:28:36 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 04 May 2005 01:28:36 -0400
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <200505041310.05103.anthony@interlink.com.au>
References: <20050503105635.GA81824@ik.nu> <20050503215449.GA98841@ik.nu>
	<4278098B.3080702@divmod.com>
	<200505041310.05103.anthony@interlink.com.au>
Message-ID: <42785D84.9040407@divmod.com>

Anthony Baxter wrote:
> On Wednesday 04 May 2005 09:30, Glyph Lefkowitz wrote:

>>Any protocol can be repurposed.  

> *cough* SIMPLE *cough*

... OK, so some protocols are repurposed and some have their purpose 
surgically removed ...

> t.p.sip doesn't go into twisted.words, either. 

It doesn't?  Why not?  "Chat" doesn't have to mean "text", does it? ;-)

Seriously though.  NAT traversal code would be welcome in words.  Maybe 
there's a common layer it depends upon?  If it made sense to put SIMPLE 
anywhere in Twisted, it would be in twisted.words.




From anthony at interlink.com.au  Tue May  3 23:51:16 2005
From: anthony at interlink.com.au (Anthony Baxter)
Date: Wed, 4 May 2005 15:51:16 +1000
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <42785D84.9040407@divmod.com>
References: <20050503105635.GA81824@ik.nu>
	<200505041310.05103.anthony@interlink.com.au>
	<42785D84.9040407@divmod.com>
Message-ID: <200505041551.18246.anthony@interlink.com.au>

On Wednesday 04 May 2005 15:28, Glyph Lefkowitz wrote:
> Seriously though.  NAT traversal code would be welcome in words.  Maybe
> there's a common layer it depends upon?  If it made sense to put SIMPLE
> anywhere in Twisted, it would be in twisted.words.

NAT traversal code (STUN, UPnP) would belong in something like 
twisted.internet, or maybe twisted.nat, or 
twisted.whichBitOfEnd2EndDidYouNotUnderstand

It's useful for far more than just chat. 

-- 
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From tv at twistedmatrix.com  Tue May  3 07:21:27 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 03 May 2005 16:21:27 +0300
Subject: [Twisted-Python] Q about handling CTRL-C correctly
In-Reply-To: <42772B55.8040709@atlas.de>
References: <42772B55.8040709@atlas.de>
Message-ID: <42777AD7.7080607@twistedmatrix.com>

Stefan Näwe wrote:
> # global flag
> running = True

Get rid of that.

> class SimpleServer(Protocol):
>     def connectionMade(self):
> 		m = self.factory.msg()
> 		while running:
> 			self.transport.write(m.pack())
> 			sys.stderr.write(".")
> 			time.sleep(1)
> 		self.transport.loseConnection()

That's blocking code, right there. Don't use time.sleep with twisted.
See task.LoopingCall and reactor.callLater.



From Orjan.Reinholdsen at smarttrust.com  Wed May  4 02:23:53 2005
From: Orjan.Reinholdsen at smarttrust.com (=?iso-8859-1?Q?=D6rjan_Reinholdsen?=)
Date: Wed, 4 May 2005 10:23:53 +0200
Subject: [Twisted-Python] Issue with stopListening
Message-ID: <4773101DA1AAC7489360BBC1C04F84B90107AEF3@postman.smarttrust.com>

All,

I have written a Twisted server that will be used as a test server to test the client software ability to gracefully handle server shutdown and thereafter reconnect. For that purpose I need my twisted server to periodically stop listening on ports for a while, and then commence normal operation again. For some reason I don't seem to succeede since the twisted server never seems to stop listening on a port even if I call the stopListening method on the IListeningPort object.

Anyone got a clue to what I'm doing wrong?

Regards
/Örjan

----

[...]

ports = [8007,8008,8009]
listenPorts = []
for port in ports:
   print "Listening on port %d" % port
   listenPorts.append(reactor.listenTCP(port, myFactory)) 

length = len(listenPorts)
ptime = 10
dtime = 5

def Down(ticks):
   print "Stop listening on port %d" % ports[ticks%length] 
   listenPorts[ticks%length].stopListening()
   reactor.callLater(dtime, Up, ticks)

def Up(ticks):
   print "Start listening on port %d" % ports[ticks%length]
   listenPorts[ticks%length].startListening()
   reactor.callLater(ptime, Down, ticks+1)

reactor.callLater(ptime, Down, 0)
reactor.run()



From twisted at ralphm.ik.nu  Wed May  4 03:10:59 2005
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Wed, 4 May 2005 11:10:59 +0200
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <4278098B.3080702@divmod.com>
References: <20050503105635.GA81824@ik.nu>
	<Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>
	<20050503113942.GA82735@ik.nu>
	<149014b905050305495094e492@mail.gmail.com>
	<20050503182104.GD5579@jabber.org> <4277CBE8.4090409@divmod.com>
	<20050503201734.GH5579@jabber.org>
	<20050503215449.GA98841@ik.nu> <4278098B.3080702@divmod.com>
Message-ID: <20050504091059.GA11677@ik.nu>

On Tue, May 03, 2005 at 07:30:19PM -0400, Glyph Lefkowitz wrote:
> Ralph Meijer wrote:
> >On Tue, May 03, 2005 at 03:17:34PM -0500, Peter Saint-Andre wrote:
> >
> >>[..]
> >>
> >>As I said, I know of several folks in the Jabber community who
> >>are quite interested in building a reference XMPP/Jabber server
> >>in Python, and I'm wondering if Words is the place to point them.
> >
> >
> >Besides that, one could argue that XMPP/Jabber doesn't belong in Words
> >alltogether because IM is just one possible use of XMPP/Jabber.
> 
> One could argue that, but one would also be wrong :)
> 
> Any protocol can be repurposed.  Just look at some of the ridiculous 
> things being done with HTTP that are not at all related to the dubious 
> heading of "hypertext", which is what "web" originally meant.  Or, 
> consider how many proprietary ad-hoc systems use IRC as a message 
> transport or router.  Nevertheless, we classify these protocols 
> according to their original intentions; IRC is not going into 
> Twisted.ORB any time soon.

I can see your point and understand that people thinking of Jabber
believe it must be in Words, but my initial remark on it not belonging
there has more to do with that most of the current code doesn't belong
where it is now.

Yes, Jabber was originally designed for chat. I'd like to give a little
bit of background to let you see where I'm coming from, and then giving
my view about how the current organisation is not ideal. I hope you'll
forgive me for the length of it.

Since Jabber came to live back in 1999, much has changed. The base
protocols have been revised and transformed into 2 RFCs:

XMPP Core defines all basics about setting up an XML Stream using the
default binding to TCP, channel encryption using TLS, authentication
using SASL, the binding of a so-called 'resource' to a stream, the basic
semantics of XML Stanzas (<message/>, <iq/> and <presence/> in whatever
is the default namespace of the stream), a number of stream and stanza
error conditions and finally the stringprep profiles for Jabber IDs.

XMPP IM defines the core features for implementing Instant Messaging and
Presence applications. This is where the server-to-server namespace and
client-to-server namespace are defined for what is traditionally known
as Jabber, all on top of XMPP Core. It defines what the XML Stanzas in
these namespaces mean exactly and how they should be handled by servers
and clients, what rosters (buddy lists) are and how entities can block
selected communications.

Then, the Jabber Software Foundation (JSF) defines a set of Jabber
Enhancement Proposals. This set of documents, that started long before
the IETF XMPP Workgroup was formed, defines additional protocols and
best-practices on top of Jabber. Some assume XMPP IM as an environment,
some only require XMPP Core. Examples range from multi-user-chat,
sending XHTML messages and doing file transfers (all IM) to more general
protocol additions like service discovery, publish-subscribe and a HTTP
binding for XML Streams (as opposed to TCP).

In Twisted, the current implementation of what is called Jabber is split
between twisted.xish.xmlstream and twisted.words.protocols.jabber. In
xmlstream, the basic concept of an XML stream is covered, and hooks for
doing any kind of stream authentication. Everything else is in the
jabber module.

The jabber module only supports the legacy authentication method (not
XMPP!) for setting up client-to-server connections (client side only),
and there is no support for TLS, SASL or even error conditions. Recently
I did implement XMPP stringprep profiles, though. The client module also
has a raw implementation of abstracting the <iq/> stanza, by allowing
you to wait for the response to a query. Higher level support for the
other two stanzas, roster handling or blocking communication is not
there. There is also a framework for building server-side components,
but that is defined in a JEP, not by XMPP.

My feeling is that the current implementation needs a lot of work, and
I'd like to split that between implementing XMPP Core and XMPP IM. I
could agree that the latter would belong in Words, but the former
doesn't and that means that most of what is currently in Words needs to
go to somewhere else. Maybe that somewhere-else is xish, but I didn't
really like the moving xmlstream there, either. Maybe it'd be good to
have a new twisted subproject XMPP that implements XMPP Core, and moving
xmlstream there.

There is no support for server-to-server connections and the server side
of client-to-server and server component connections, yet. Having that,
would be really great, though.

While writing this, I decided I'd like to work on all this and help is
of course appreciated.

Thanks for your patience,

-- 
Groetjes,

ralphm



From radeex at gmail.com  Wed May  4 04:13:12 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 4 May 2005 20:13:12 +1000
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <20050504091059.GA11677@ik.nu>
References: <20050503105635.GA81824@ik.nu>
	<Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>
	<20050503113942.GA82735@ik.nu>
	<149014b905050305495094e492@mail.gmail.com>
	<20050503182104.GD5579@jabber.org> <4277CBE8.4090409@divmod.com>
	<20050503201734.GH5579@jabber.org> <20050503215449.GA98841@ik.nu>
	<4278098B.3080702@divmod.com> <20050504091059.GA11677@ik.nu>
Message-ID: <60ed19d40505040313671cef24@mail.gmail.com>

On 5/4/05, Ralph Meijer <twisted at ralphm.ik.nu> wrote:
> I can see your point and understand that people thinking of Jabber
> believe it must be in Words, but my initial remark on it not belonging
> there has more to do with that most of the current code doesn't belong
> where it is now.

In a puritanical "Each layer of abstraction should get its own
subproject" view, you're right, but I think that we shouldn't add
undue complexity to the project and confusion for people trying to
understand Twisted by adding more projects when they're unnecessary.
Therefore, I suggest keeping all of this stuff in twisted.words until
it'd actually be useful to users (developers) to split off. i.e., when
people start wanting to make apps based on XMPP that don't use any
chat stuff.

Anyway, good luck with the project, and thanks for your work on it so far.

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From teratorn at twistedmatrix.com  Wed May  4 06:28:12 2005
From: teratorn at twistedmatrix.com (Eric Mangold)
Date: Wed, 04 May 2005 22:28:12 +1000
Subject: [Twisted-Python] Issue with stopListening
In-Reply-To: <4773101DA1AAC7489360BBC1C04F84B90107AEF3@postman.smarttrust.com>
References: <4773101DA1AAC7489360BBC1C04F84B90107AEF3@postman.smarttrust.com>
Message-ID: <op.sp83lauuy3d107@aspen>

On Wed, 04 May 2005 18:23:53 +1000, Örjan Reinholdsen  
<Orjan.Reinholdsen at smarttrust.com> wrote:

> All,
>
> I have written a Twisted server that will be used as a test server to  
> test the client software ability to gracefully handle server shutdown  
> and thereafter reconnect. For that purpose I need my twisted server to  
> periodically stop listening on ports for a while, and then commence  
> normal operation again. For some reason I don't seem to succeede since  
> the twisted server never seems to stop listening on a port even if I  
> call the stopListening method on the IListeningPort object.
>
> Anyone got a clue to what I'm doing wrong?

stopListening() may return a deferred, in which case you'll need to wait  
for it to fire before you can be sure that Twisted has stopped listening.  
Since you have multiple ports a DeferredList may help you here.

Perhaps that is the problem?

-Eric

>
> Regards
> /Örjan
>
> ----
>
> [...]
>
> ports = [8007,8008,8009]
> listenPorts = []
> for port in ports:
>    print "Listening on port %d" % port
>    listenPorts.append(reactor.listenTCP(port, myFactory))
>
> length = len(listenPorts)
> ptime = 10
> dtime = 5
>
> def Down(ticks):
>    print "Stop listening on port %d" % ports[ticks%length]
>    listenPorts[ticks%length].stopListening()
>    reactor.callLater(dtime, Up, ticks)
>
> def Up(ticks):
>    print "Start listening on port %d" % ports[ticks%length]
>    listenPorts[ticks%length].startListening()
>    reactor.callLater(ptime, Down, ticks+1)
>
> reactor.callLater(ptime, Down, 0)
> reactor.run()
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>





From christopher.zorn at gmail.com  Wed May  4 07:01:20 2005
From: christopher.zorn at gmail.com (Christopher Zorn)
Date: Wed, 4 May 2005 09:01:20 -0400
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <60ed19d40505040313671cef24@mail.gmail.com>
References: <20050503105635.GA81824@ik.nu> <20050503113942.GA82735@ik.nu>
	<149014b905050305495094e492@mail.gmail.com>
	<20050503182104.GD5579@jabber.org> <4277CBE8.4090409@divmod.com>
	<20050503201734.GH5579@jabber.org> <20050503215449.GA98841@ik.nu>
	<4278098B.3080702@divmod.com> <20050504091059.GA11677@ik.nu>
	<60ed19d40505040313671cef24@mail.gmail.com>
Message-ID: <149014b905050406017e9dde44@mail.gmail.com>

On 5/4/05, Christopher Armstrong <radeex at gmail.com> wrote:
> On 5/4/05, Ralph Meijer <twisted at ralphm.ik.nu> wrote:
> > I can see your point and understand that people thinking of Jabber
> > believe it must be in Words, but my initial remark on it not belonging
> > there has more to do with that most of the current code doesn't belong
> > where it is now.
> 
> In a puritanical "Each layer of abstraction should get its own
> subproject" view, you're right, but I think that we shouldn't add
> undue complexity to the project and confusion for people trying to
> understand Twisted by adding more projects when they're unnecessary.
> Therefore, I suggest keeping all of this stuff in twisted.words until
> it'd actually be useful to users (developers) to split off. i.e., when
> people start wanting to make apps based on XMPP that don't use any
> chat stuff.

FYI, all of my "jabber" based twisted apps besides punjab are NOT chat based. :)
And I would not consider idavoll "chat" either. 

> 
> Anyway, good luck with the project, and thanks for your work on it so far.
> 
> --
>   Twisted   |  Christopher Armstrong: International Man of Twistery
>    Radix    |    -- http://radix.twistedmatrix.com
>             |  Release Manager, Twisted Project
>   \\\V///   |    -- http://twistedmatrix.com
>    |o O|    |  Founding Member, Hobart Hacking Society
> w----v----w-+    -- http://hackingsociety.org/chapters/hash
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From tim at se.linux.org  Wed May  4 07:08:29 2005
From: tim at se.linux.org (=?iso-8859-1?Q?Tim_Terleg=E5rd?=)
Date: Wed, 4 May 2005 15:08:29 +0200 (CEST)
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <60ed19d40505040313671cef24@mail.gmail.com>
Message-ID: <Pine.LNX.4.44.0505041502450.11243-100000@naskur.se.linux.org>

> > I can see your point and understand that people thinking of Jabber
> > believe it must be in Words, but my initial remark on it not belonging
> > there has more to do with that most of the current code doesn't belong
> > where it is now.
>
> In a puritanical "Each layer of abstraction should get its own
> subproject" view, you're right, but I think that we shouldn't add
> undue complexity to the project and confusion for people trying to
> understand Twisted by adding more projects when they're unnecessary.
> Therefore, I suggest keeping all of this stuff in twisted.words until
> it'd actually be useful to users (developers) to split off. i.e., when
> people start wanting to make apps based on XMPP that don't use any
> chat stuff.

I think it depends on the goals of this implementation. If this is a
serious effort and we'd like this to be the "official" implementation of
jabber in python, then I think XMPP Core and XMPP IM deserves to be
seperate projects. Jabber with all JEPs would mean quite some code.
If this only will be a minimal chat implementation, then I think words
would suffice.

Tim




From glyph at divmod.com  Wed May  4 08:53:46 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 04 May 2005 10:53:46 -0400
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <20050504091059.GA11677@ik.nu>
References: <20050503105635.GA81824@ik.nu>	<Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>	<20050503113942.GA82735@ik.nu>	<149014b905050305495094e492@mail.gmail.com>	<20050503182104.GD5579@jabber.org>
	<4277CBE8.4090409@divmod.com>	<20050503201734.GH5579@jabber.org>	<20050503215449.GA98841@ik.nu>
	<4278098B.3080702@divmod.com> <20050504091059.GA11677@ik.nu>
Message-ID: <4278E1FA.1030904@divmod.com>

Let me reply to the last thing you said first:

Ralph Meijer wrote:

> There is no support for server-to-server connections and the server side
> of client-to-server and server component connections, yet. Having that,
> would be really great, though.

 > While writing this, I decided I'd like to work on all this and help is
 > of course appreciated.

Awesome.  I hope that my feelings about packaging and distribution don't 
discourage you!  Words badly needs a dedicated maintainer and Jabber 
would be a great place to start, and probably not a bad model to 
structure the whole messaging system around.

> On Tue, May 03, 2005 at 07:30:19PM -0400, Glyph Lefkowitz wrote:

>>Ralph Meijer wrote:

>>>On Tue, May 03, 2005 at 03:17:34PM -0500, Peter Saint-Andre wrote:

>>>>As I said, I know of several folks in the Jabber community who
>>>>are quite interested in building a reference XMPP/Jabber server
>>>>in Python, and I'm wondering if Words is the place to point them.

>>>Besides that, one could argue that XMPP/Jabber doesn't belong in Words
>>>alltogether because IM is just one possible use of XMPP/Jabber.

>>One could argue that, but one would also be wrong :)
>>
>>Any protocol can be repurposed.

> I can see your point and understand that people thinking of Jabber
> believe it must be in Words, but my initial remark on it not belonging
> there has more to do with that most of the current code doesn't belong
> where it is now.

> Yes, Jabber was originally designed for chat. I'd like to give a little
> bit of background to let you see where I'm coming from, and then giving
> my view about how the current organisation is not ideal. I hope you'll
> forgive me for the length of it.

I still don't understand why you think Jabber can be a chat project that 
grows beyond that scope but you don't think that Words can be a chat 
project that grows beyond that scope :).

> XMPP Core defines (...)

> XMPP IM defines  (...)

> Then, the Jabber Software Foundation (JSF) defines a set of Jabber
> Enhancement Proposals. (...)

Okay... I did know most of that ;)

> In Twisted, the current implementation of what is called Jabber is split
> between twisted.xish.xmlstream and twisted.words.protocols.jabber. In
> xmlstream, the basic concept of an XML stream is covered, and hooks for
> doing any kind of stream authentication. Everything else is in the
> jabber module.

This is the core problem, I think.

At this point, twisted.xish is simply support for the Jabber module in 
twisted.words, with no real legitimate life of its own.  I believe it 
should be moved into twisted.words as a (admittedly largeish) protocol 
support module rather than having a separate installer and a separate 
project page.  Factoring of XMPP IM/XMPP Core within Words would be a 
good idea, but this should not affect installation and deployment 
concerns, because there is no reason to use them separately right now.

We should separate the project back out if people start clamoring for a 
separate distributable, but I seriously doubt this will be the case.

> The jabber module only supports the legacy authentication method (not
> XMPP!) for setting up client-to-server connections (client side only),
> and there is no support for TLS, SASL or even error conditions. Recently
> I did implement XMPP stringprep profiles, though. The client module also
> has a raw implementation of abstracting the <iq/> stanza, by allowing
> you to wait for the response to a query. Higher level support for the
> other two stanzas, roster handling or blocking communication is not
> there. There is also a framework for building server-side components,
> but that is defined in a JEP, not by XMPP.

Obviously the implementation needs to be brought into line with more 
recent versions of all these specifications.  No argument there :).

> My feeling is that the current implementation needs a lot of work, and
> I'd like to split that between implementing XMPP Core and XMPP IM. I
> could agree that the latter would belong in Words, but the former
> doesn't

Again.  I disagree.  You spent a lot of text above talking about a lot 
of things which were allegedly supposed to back up this point, but I 
don't see how they're related.  Jabber is a chat protocol which has been 
expanded to a wider array of application domains, Words is a project to 
enable expanding chat protocols to handle a wider array of application 
domains.  We have already made a sort of policy decision at a global 
level to bundle protocol logic in the application modules that it 
supports, i.e. twisted FTP protocol and HTTP protocol support belong in 
twisted.web, NOT in some common protocol-abstractions-only package.  You 
might have an application which uses only the XMPP core parts of Words, 
but those sorts of applications are, in my experience, *extremely* rare, 
and should not distort the marketing of the project and normal 
experience of people downloading the code or hacking on it for the first 
time.  Internal factoring is a separate question to packaging; if I view 
them in the light of internal factoring, your ideas all seem good.  If I 
view them as packaging, they're all bad.

> and that means that most of what is currently in Words needs to
> go to somewhere else. Maybe that somewhere-else is xish, but I didn't
> really like the moving xmlstream there, either. Maybe it'd be good to
> have a new twisted subproject XMPP that implements XMPP Core, and moving
> xmlstream there.

To reiterate, what is currently in Words needs to stay in Words, and 
things which support it that are not otherwise used needs to move there 
next to them.  Twisted subprojects are organized around some set of 
application functionality that can be provided by the core.  Twisted 
Words' provided application is a multiprotocol chat server and client, 
with chatterbot support.  Like all Twisted projects, the code can be 
used at any level, whether it's to load into the provided application as 
a plug-in or to develop a new application on top of only a subset of a 
package.

There is a cultural feeling in the Jabber community, I think, that 
Jabber is somehow unique and should be segregated and separated from all 
the other "legacy" protocols that are "just chat".

All chat protocols support a range of functionality.  IRC really is used 
as a message routing platform, in some cases in actual serious 
applications.  As far as I know OSCAR is used both for chat and for some 
back-end message delivery at AOL.  Even just on the chat client, it has 
a range of extensions which is pretty impressive.  MSN's protocol is 
used for more than just messenger.  All these protocols have a message 
format and a chat layer and an extension layer, and equal support for 
all of them should not be precluded.  Jabber is not a beautiful and 
unique snowflake.  It is the all-singing all dancing chat of the world ;)

That said, Jabber does have advantages over these protocols in many 
ways.  As I said above, it would not bother me to see the bulk of the 
Twisted Words architected around it.  Still, it would be a mistake to 
break the project up into multiple pieces first.  A key hint that this 
is a bad place to break the project is that the design for both halves 
is going to be done by one person as one effort, rather than building an 
XMPP core application and then waiting a few months to a year and then 
building an XMPP IM extension to that - the useful bits are up in XMPP 
IM, and XMPP core is just support code for that.  It certainly may be 
useful support code for a wide range of other applications but it does 
not stand on its own yet.



From manlio_perillo at libero.it  Wed May  4 10:11:30 2005
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Wed, 04 May 2005 18:11:30 +0200
Subject: [Twisted-Python] twisted.news
Message-ID: <5.2.1.1.0.20050504180815.00b2d768@popmail.libero.it>

Regards and thanks for your work on Twisted.

I have noted that twisted.news isn't installed with the last version of the 
installer for Windows.
Why?


Manlio Perillo




From abe at fettig.net  Wed May  4 10:25:03 2005
From: abe at fettig.net (Abe Fettig)
Date: Wed, 04 May 2005 12:25:03 -0400
Subject: [Twisted-Python] twisted.news
In-Reply-To: <5.2.1.1.0.20050504180815.00b2d768@popmail.libero.it>
References: <5.2.1.1.0.20050504180815.00b2d768@popmail.libero.it>
Message-ID: <4278F75F.9010903@fettig.net>

Manlio Perillo wrote:
> Regards and thanks for your work on Twisted.
> 
> I have noted that twisted.news isn't installed with the last version of
> the installer for Windows.
> Why?

There was a bug in Twisted 2.0 where 'news' wasn't included in the list
of subprojects in setup.py. I assume this is the reason why news isn't
included in the Windows installer.

This has been fixed in svn:
http://svn.twistedmatrix.com/cvs?view=rev&rev=13387

Can whoever is building the installers upgrade to the latest setup.py?

Abe



From glyph at divmod.com  Wed May  4 10:45:36 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 04 May 2005 12:45:36 -0400
Subject: [Twisted-Python] twisted.news
In-Reply-To: <4278F75F.9010903@fettig.net>
References: <5.2.1.1.0.20050504180815.00b2d768@popmail.libero.it>
	<4278F75F.9010903@fettig.net>
Message-ID: <4278FC30.4030704@divmod.com>

Abe Fettig wrote:

> Can whoever is building the installers upgrade to the latest setup.py?

Perhaps a more correct answer would be to do a 2.0.1 release?



From twisted at ralphm.ik.nu  Wed May  4 12:51:38 2005
From: twisted at ralphm.ik.nu (Ralph Meijer)
Date: Wed, 4 May 2005 20:51:38 +0200
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <4278E1FA.1030904@divmod.com>
References: <Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>
	<20050503113942.GA82735@ik.nu>
	<149014b905050305495094e492@mail.gmail.com>
	<20050503182104.GD5579@jabber.org> <4277CBE8.4090409@divmod.com>
	<20050503201734.GH5579@jabber.org>
	<20050503215449.GA98841@ik.nu> <4278098B.3080702@divmod.com>
	<20050504091059.GA11677@ik.nu> <4278E1FA.1030904@divmod.com>
Message-ID: <20050504185138.GA64419@ik.nu>

On Wed, May 04, 2005 at 10:53:46AM -0400, Glyph Lefkowitz wrote:
> Let me reply to the last thing you said first:
> 
> Ralph Meijer wrote:
> 
> >There is no support for server-to-server connections and the server side
> >of client-to-server and server component connections, yet. Having that,
> >would be really great, though.
> 
> > While writing this, I decided I'd like to work on all this and help is
> > of course appreciated.
> 
> Awesome.  I hope that my feelings about packaging and distribution don't 
> discourage you!  Words badly needs a dedicated maintainer and Jabber 
> would be a great place to start, and probably not a bad model to 
> structure the whole messaging system around.
> [..]

Thanks! I realize this is probably a bigger effort than I can imagine
now. I'm not wedded to any packaging structure, really. The most
important thing right now is getting the code out there.

Most of my longish message was thinking out loud and certainly helped me
to get an idea of a restructuring of the code. Also, I can follow the
reasoning of keeping it inside Words at the moment. We'll see where that
leaves Xish, but let's not get ahead of myself.

I must admit that I haven't really looked into the rest of Words, but if
I understand you correctly the development there is stagnant. That's a
shame, but we can see that in the Jabber community as well: there are
very few people that bother to work on Gateways to other IM networks.
The bright side to that story is that from what I can see, the
development that /is/ there is implemented using Twisted :-)

Let's get coding.

-- 
Groetjes,

ralphm



From mcfletch at rogers.com  Wed May  4 14:08:12 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Wed, 04 May 2005 16:08:12 -0400
Subject: [Twisted-Python] Evangelism notes...
Message-ID: <42792BAC.1050701@rogers.com>

As some of you know, I use Twisted to develop one of our products, a
fairly large Cable modem management application. I've developed and
released TwistedSNMP, and am, generally speaking comfortable with the
package.  I've also been using Twisted within the company for my other
projects.  I've just come back from a meeting where a decision was made
to completely rewrite a *delivered* application on our own dime for the
sole purpose of eliminating Twisted.

I found this rather disappointing.

I realise that the problem lay in part in my own "choice" (didn't
actually choose, it just happened) of projects with which to introduce
Twisted, but I felt it would be useful to share the experience with others.

The Project:

    * Cross-protocol server intended to act as a "web services"
      intermediary for payment-processing services from a number of
      different banking systems.
          o Fairly straightforward networking protocols on all sides
          o All protocols were custom (i.e. we had to write them) save
            the client-side interface (which was XMLRPC)
          o Seems like a perfect problem domain for Twisted
    * Initially coded using Twisted by me, then pair programming with a
      colleague as he took over lead on the project
          o If my goal had initially been to evangelise, I should have
            *started* the project with pair programming so that the
            system wasn't already in-place and mystifyingly complex
                + Even the Finger sample is mystifyingly complex if you
                  jump into it at the end of the process
                + Unfortunately, I didn't realise the project would be
                  passed on to someone else before completion, I'd
                  thought it would remain part of my portfolio within
                  the company
                + Even if we did start out together, we really should
                  have done some *formal* training on Twisted, rather
                  than relying on knowledge transfer via pair
                  programming.  Again, it started out just being a few
                  lines here and there, we didn't see much being done
                  beyond the base system.
          o He never, in the entire process, saw anything really come
            from Twisted (other than problems where the complexity of
            the system got in the way of doing the rather simple task
            (from his point of view)), since the low-level coding was
            already done when he started working with the system.
                + Probably would have been better to start him on the
                  much larger project, where Twisted represents far less
                  of the overall complexity of the application.
          o In particular, test-driven development with threading in the
            background for blocking operations caused significant headaches
    * Project was delivered, paid for, and has been running in
      production for a few weeks, but 2 reported bugs cropped up
          o To fix one, needed to update to 2.0 (deferred object
            cleanup)... this caused rather a lot of upset, as the
            sysadmins were upset about such a huge package needing to be
            updated (and they tried to do just the core packages first,
            which doubled the work-load involved in preparing that
            update versus using Sumo)
          o Fixing the other was no big deal, except that something in
            2.0 changed how the test-suite was running so that it now
            hung on completion...
    * Now, at this point there had been serious conversations just an
      hour earlier during a management meeting about replacing Twisted
      for 2 separate projects.  The entire company is watching as we go
      to fix the *trivial* error while we're together after the
      meeting... but the test suite won't complete.  Must be something
      wrong with the background thread not exiting thinks I.
          o What do we call to shutdown the threadpool?  I don't
            remember, let's check the reference docs... 20 minutes of
            searching for the 2.0 reference docs (with the entire
            company watching this)... finally ask on IRC... told to
            build them myself and contribute them.  Cute, but didn't
            really drive home the whole "robust, professional,
            well-documented platform on which to develop business
            systems" meme as much as I'd hoped.  (Some of that is
            definitely my fault, I was pretty frustrated by the time I
            went to IRC to ask where the documentation was).
          o Finally go with the 1.3 docs, hoping there's not some change
            to the API that's causing the problem (though that looks
            very probable at this point, the change to 2.0 being the
            primary difference between working and not).
    * Finally get the 1.3 docs, hack together a
      reactor.threadpool.stop() call with a dummy last-run-test-suite
      and get the test suite to run-and-exit...
          o Keep in mind, we've just had to introduce a glaringly ugly
            and fragile hack to get around something trivial.  There may
            be a better way to run the tests, but it's a bit late for
            thinking of that now...
    * Now that we can run the test suite and focus on what happens
      during it, we discover that the ESMTP client can't connect to a
      local SMTP host without authentication (or at least, it wouldn't
      with the code we were using across the network to a remote
      host)... no documentation on the ESMTP client, of course.[1]
    * At which point my colleague (lead on this project) got well and
      truly fed up and decided to dump Twisted and rewrite the project
      in plain-old-Python.

There's lots of points where, had I anticipated the problems, I might
have salvaged the project in its current state.  If I'd anticipated that
the problems would be non-trivial to fix, I could simply have returned
to my workstation and fixed them in a relaxed and pressure-free
environment.  I could have spelunked through the code to figure out the
interfaces in lieu of documentation.  That's fine for me, I already
understand Twisted enough to spelunk through and find what I want, but
it doesn't make a great argument when someone's simply mystified by all
the pieces scattered here and there that seem to be joined by nothing
more than hope and bailing wire.

I could have done better at evangelising. In the end, though, I had to
concede that stripping out Twisted and writing the code himself would
probably be faster and easier in the long run than trying to work around
problems in an under-documented "foreign" system (again, from his
viewpoint).

Especially given the small size of the project, a few simple select
loops and a thread can solve 90% of what Twisted is providing for him. 
Thinking back on that conversation; at that point the *only* failing
feature was the ESMTP-sending, and I'm pretty sure it would have
resolved to something like passing a None instead of a "" for the
username and password; but when it came right down to it, he's the one
maintaining the code, and as far as he can see, Twisted just gets in the
way.

Don't know if the other project will be rewritten as well.  Given
decision on this one, I'd imagine it will.  I'd also predict that
Twisted is now Techne non Grata wrt any new development where it's not
an explicit requirement (given that we're going to be eating costs on
rewriting a project to eliminate it).  Certainly I'll have a hard sell
going forward.

So, anyway, just felt the need to share that.  Sorry again for the sharp
post to IRC.

Peace, all,
Mike

[1] How did ESMTP get in there anyway, if it's a 1.3 codebase?  Well, it
shares common functionality with the big application, one piece of that
being the automated use of ESMTP.

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From itamar at itamarst.org  Wed May  4 14:27:46 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 04 May 2005 16:27:46 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <42792BAC.1050701@rogers.com>
References: <42792BAC.1050701@rogers.com>
Message-ID: <1115238466.8476.44.camel@localhost.localdomain>

On Wed, 2005-05-04 at 16:08 -0400, Mike C. Fletcher wrote:

>           o What do we call to shutdown the threadpool?  I don't
>             remember, let's check the reference docs... 20 minutes of
>             searching for the 2.0 reference docs (with the entire
>             company watching this)... finally ask on IRC... told to
>             build them myself and contribute them.  Cute, but didn't
>             really drive home the whole "robust, professional,
>             well-documented platform on which to develop business
>             systems" meme as much as I'd hoped. 

There's a problem with generating API docs with current release.
Something to do with zope.interface. We did not decide not to build them
just to annoy you.




From itamar at itamarst.org  Wed May  4 14:36:16 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 04 May 2005 16:36:16 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <42792BAC.1050701@rogers.com>
References: <42792BAC.1050701@rogers.com>
Message-ID: <1115238976.8476.54.camel@localhost.localdomain>

On Wed, 2005-05-04 at 16:08 -0400, Mike C. Fletcher wrote:

> Don't know if the other project will be rewritten as well.  Given
> decision on this one, I'd imagine it will.  I'd also predict that
> Twisted is now Techne non Grata wrt any new development where it's not
> an explicit requirement (given that we're going to be eating costs on
> rewriting a project to eliminate it).  Certainly I'll have a hard sell
> going forward.

Do you have any suggestions on how we can improve things? Besides "write
more docs" which is basically always a given.




From glyph at divmod.com  Wed May  4 14:50:50 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 04 May 2005 16:50:50 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <1115238466.8476.44.camel@localhost.localdomain>
References: <42792BAC.1050701@rogers.com>
	<1115238466.8476.44.camel@localhost.localdomain>
Message-ID: <427935AA.1060100@divmod.com>

Itamar Shtull-Trauring wrote:
> On Wed, 2005-05-04 at 16:08 -0400, Mike C. Fletcher wrote:

>>          o What do we call to shutdown the threadpool?  I don't
>>            remember, let's check the reference docs... 20 minutes of
>>            searching for the 2.0 reference docs (with the entire
>>            company watching this)... finally ask on IRC... told to
>>            build them myself and contribute them.  Cute, but didn't
>>            really drive home the whole "robust, professional,
>>            well-documented platform on which to develop business
>>            systems" meme as much as I'd hoped. 

> There's a problem with generating API docs with current release.
> Something to do with zope.interface. We did not decide not to build them
> just to annoy you.

Mike, I'm sorry that Twisted was a part of such a horrible experience 
for you!  Thanks for sharing the experience, but evangelism tip #1 that 
I get from the initial reading is from the real-time, public bit at the end.

   - Do not ever, ever use IRC in a public forum to solve a problem in 
real-time.  In fact, do not ever use any support mechanism in a public 
forum unless you or your company has a paid relationship with the people 
on the other end of the wire.

   - Do not ever expect to be able to fix a threading bug in less than 2 
days.




From golux at comcast.net  Wed May  4 15:01:47 2005
From: golux at comcast.net (Stephen Waterbury)
Date: Wed, 04 May 2005 17:01:47 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <1115238466.8476.44.camel@localhost.localdomain>
References: <42792BAC.1050701@rogers.com>
	<1115238466.8476.44.camel@localhost.localdomain>
Message-ID: <4279383B.4060505@comcast.net>

Itamar Shtull-Trauring wrote:
> On Wed, 2005-05-04 at 16:08 -0400, Mike C. Fletcher wrote:
> 
> 
>>          o What do we call to shutdown the threadpool?  I don't
>>            remember, let's check the reference docs... 20 minutes of
>>            searching for the 2.0 reference docs (with the entire
>>            company watching this)... finally ask on IRC... told to
>>            build them myself and contribute them.  Cute, but didn't
>>            really drive home the whole "robust, professional,
>>            well-documented platform on which to develop business
>>            systems" meme as much as I'd hoped. 
> 
> 
> There's a problem with generating API docs with current release.
> Something to do with zope.interface. We did not decide not to build them
> just to annoy you.

Don't get too defensive, Itamar.  Although I missed the IRC
conversation, Mike's email certainly described a situation
that anyone would have found frustrating -- and to me it did
not appear to be an indictment of Twisted so much as simply a
cautionary tale, and a useful one.  It's reality.

Mike knows (in retrospect) he would have done things differently
if he had anticipated the docs not being there (i.e., go to his
cubicle and quietly do the spelunking, away from skeptical eyes).

I daresay if I were selling Twisted or handing off a Twisted
app in my environment, the situation would be similar (God
forbid I ever get to that ... which is part of the reason I
haven't released yet ;).

Twisted's documentation is constantly improving (thanks to Mary
and all who contribute!), but it can still be daunting to the
uninitiated, largely because Twisted is non-trivial and
good technical writing is harder than it looks.

Mike's experience was a confluence of many small dysfunctions.
IOW, the makings of a classic tragedy -- not that it was a
*huge* tragedy, but I'm sure Mike would prefer to work
in an environment in which he can use Twisted and not be
second-guessed (at best), and as he ruefully points out, the
well is kind of poisoned now.

So what's to be learned?  The lesson for me is:  if you are in
a similar environment, go ahead and used Twisted -- to those who
know it, it is reasonably robust and scalable -- but be very,
very careful when demoing and/or introducing anyone else to your
app.  And if you encounter any bugs, no matter how insignificant
the might at first appear, for heaven's sake go back to your
cube for the spelunking, unless you are a Minion and know
exactly what you're doing!  ;)

Cheers,
Steve



From mcfletch at rogers.com  Wed May  4 15:09:14 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Wed, 04 May 2005 17:09:14 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <1115238466.8476.44.camel@localhost.localdomain>
References: <42792BAC.1050701@rogers.com>
	<1115238466.8476.44.camel@localhost.localdomain>
Message-ID: <427939FA.40305@rogers.com>

Itamar Shtull-Trauring wrote:

>On Wed, 2005-05-04 at 16:08 -0400, Mike C. Fletcher wrote:
>
>  
>
>>          o What do we call to shutdown the threadpool?  I don't
>>            remember, let's check the reference docs... 20 minutes of
>>            searching for the 2.0 reference docs (with the entire
>>            company watching this)... finally ask on IRC... told to
>>            build them myself and contribute them.  Cute, but didn't
>>            really drive home the whole "robust, professional,
>>            well-documented platform on which to develop business
>>            systems" meme as much as I'd hoped. 
>>    
>>
>
>There's a problem with generating API docs with current release.
>Something to do with zope.interface. We did not decide not to build them
>just to annoy you.
>  
>
Oh, I didn't think you did it just to be annoying :) , but now that you
bring up the possibility, I wonder ;) .  How did you know that *I* would
be the one to fall into the trap, that's what I want to know!  You are a
far more devious trickster than I would have imagined... :)

I was just expressing my frustration at losing "mind-share" for Twisted
within the company.  Just another of those "all things being fine, no
big deal, but not the right time to discover this" when people are in
the middle of debating dropping the system.  I'm not ticked off at you
guys, you do what you have time to do.  I *am* kind of annoyed at myself
for not handling the situation better.

I *would* suggest a link on the homepage just saying "documentation". 
Saying "old documents" implies that there are new ones somewhere. 
Having that link in the "Developers" menu would be good too, when the
new docs are out, update those links to point to them.  We would have
been fine with the 1.3 docs (it's what we eventually used) for solving
the first problem, but seeing "old documents" we had 3 people sitting
around suggesting ways to find the new documents relating to the version
we were using.

Enjoy yourself,
Mike

________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From bob at redivi.com  Wed May  4 15:09:55 2005
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 4 May 2005 17:09:55 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <42792BAC.1050701@rogers.com>
References: <42792BAC.1050701@rogers.com>
Message-ID: <1A5DF4BE-AEE0-43E6-B9EA-DE3E29DF0B70@redivi.com>

On May 4, 2005, at 4:08 PM, Mike C. Fletcher wrote:

>     * Project was delivered, paid for, and has been running in
>       production for a few weeks, but 2 reported bugs cropped up
>           o To fix one, needed to update to 2.0 (deferred object
>             cleanup)... this caused rather a lot of upset, as the
>             sysadmins were upset about such a huge package needing  
> to be
>             updated (and they tried to do just the core packages  
> first,
>             which doubled the work-load involved in preparing that
>             update versus using Sumo)
>           o Fixing the other was no big deal, except that something in
>             2.0 changed how the test-suite was running so that it now
>             hung on completion...

That's why it's better if you don't install Twisted, just make its  
source code part of your project.  That's what you should be doing  
for just about any dependency, especially those where you don't need  
extension modules.

>     * Now, at this point there had been serious conversations just an
>       hour earlier during a management meeting about replacing Twisted
>       for 2 separate projects.  The entire company is watching as  
> we go
>       to fix the *trivial* error while we're together after the
>       meeting... but the test suite won't complete.  Must be something
>       wrong with the background thread not exiting thinks I.

Debugging with an audience?  What the hell were you thinking?  Don't  
do that.

>     * At which point my colleague (lead on this project) got well and
>       truly fed up and decided to dump Twisted and rewrite the project
>       in plain-old-Python.

The deferred/generator stuff is probably "plain-old-looking" enough  
to be used by a programmer who isn't already used to the Twisted  
style of programming, with caveats of course.

-bob




From glyph at divmod.com  Wed May  4 15:33:40 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 04 May 2005 17:33:40 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <4279383B.4060505@comcast.net>
References: <42792BAC.1050701@rogers.com>	<1115238466.8476.44.camel@localhost.localdomain>
	<4279383B.4060505@comcast.net>
Message-ID: <42793FB4.2070304@divmod.com>

Stephen Waterbury wrote:

> Although I missed the IRC
> conversation, Mike's email certainly described a situation
> that anyone would have found frustrating -- and to me it did
> not appear to be an indictment of Twisted so much as simply a
> cautionary tale, and a useful one.  It's reality.

A grim reality indeed.  I myself have been in this situation (and even 
been accused of being a shyster!) and it is a very hard one to get out of.

As Steve points out, there is a general-purpose learning here, but there 
is also the issue that given Twisted's technological maturity, users are 
beginning to expect a certain level of polish and sophistication from 
our web presence, our marketing materials and our documentation which 
just isn't there.

Worse, this is a long-standing problem I don't see any effort underway 
to rectify it.  Other open-source projects have gotten to this point and 
found huge, helpful teams of busy bees to fix the website, keep the 
documents up to date, wrangle the release notes and annotate the 
development process.  Some projects are worse - I've recently had an 
experience with the linux cifs client project website that made me feel 
really good about our web presence :-) - but we could do better.

That said, as it is I think the Twisted team is doing a great job at 
making Twisted, and we don't have any more resources or people to spend 
on other stuff.  That's not to say we can't spot-fix the biggest 
problems with our website (like the API documentation problem) but ... 
where do these helpful people come from for other projects?  I would 
estimate that Twisted has tens of thousands of users by now, but the 
community is still oddly silent.

I'm genuinely baffled as to how to proceed.  Is there anyone out there 
who can contribute some significant time to updating our "professional" 
presence on the web and elsewhere?




From mcfletch at rogers.com  Wed May  4 15:36:14 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Wed, 04 May 2005 17:36:14 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <427935AA.1060100@divmod.com>
References: <42792BAC.1050701@rogers.com>	<1115238466.8476.44.camel@localhost.localdomain>
	<427935AA.1060100@divmod.com>
Message-ID: <4279404E.8070905@rogers.com>

Glyph Lefkowitz wrote:
...

> Mike, I'm sorry that Twisted was a part of such a horrible experience
> for you!  Thanks for sharing the experience, but evangelism tip #1
> that I get from the initial reading is from the real-time, public bit
> at the end.

Wasn't a truly horrible experience.  The company's fairly laid back, it
was just disappointing.

>   - Do not ever, ever use IRC in a public forum to solve a problem in
> real-time.  In fact, do not ever use any support mechanism in a public
> forum unless you or your company has a paid relationship with the
> people on the other end of the wire.

Um, I hope you're joking.  Do not *ever* use a public support mechanism
without a paid relationship?  So is everyone on IRC paid up?  Or is it
not a support mechanism?  Or is it just unwise to ever *use* Twisted
IRC; it should just be considered a waste of time?  Absolutes like that
are kind of extreme, no?  Maybe you meant to say only for real-time
problem solving... still seems to make the immediacy of the forum
somewhat pointless, no?  It did actually solve the problem, btw, and at
least the search for the docs was cut short at 20 minutes.

If that was intended more as a "who do you think you are, you've not
paid us anything", okay, accepted.  I'd been thinking of myself as a
member of the community trying to sell "our" product to the world, I
should have looked at it from the other side.

We've (and I've) *tried* to contribute back to the Twisted community
with introductory lectures at PyGTA, various pieces of documentation and
releasing TwistedSNMP, but it's perfectly true that we've made no
monetary arrangements for support.  Fact is that we operate on a
shoe-string budget to keep costs low for our customers and try to
participate actively in the Open Source community to compensate others
for the assistance we often get.  I apologise if I went over the line in
asking where the reference documents have moved ;) :) .

Seriously, I didn't even think of asking in IRC, it was suggested by
another colleague between stifling guffaws... maybe he was out to get me
by tricking me into exactly this folly ;) .

>   - Do not ever expect to be able to fix a threading bug in less than
> 2 days.

:)  That was obviously the root problem.

Peace, out,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From glyph at divmod.com  Wed May  4 15:42:53 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 04 May 2005 17:42:53 -0400
Subject: Jabber (was Re: [Twisted-Python] Closing Jabber connection)
In-Reply-To: <20050504185138.GA64419@ik.nu>
References: <Pine.LNX.4.44.0505031308340.32627-100000@naskur.se.linux.org>	<20050503113942.GA82735@ik.nu>	<149014b905050305495094e492@mail.gmail.com>	<20050503182104.GD5579@jabber.org>
	<4277CBE8.4090409@divmod.com>	<20050503201734.GH5579@jabber.org>	<20050503215449.GA98841@ik.nu>
	<4278098B.3080702@divmod.com>	<20050504091059.GA11677@ik.nu>
	<4278E1FA.1030904@divmod.com> <20050504185138.GA64419@ik.nu>
Message-ID: <427941DD.7060607@divmod.com>

Ralph Meijer wrote:
> On Wed, May 04, 2005 at 10:53:46AM -0400, Glyph Lefkowitz wrote:


> Thanks! I realize this is probably a bigger effort than I can imagine
> now. I'm not wedded to any packaging structure, really. The most
> important thing right now is getting the code out there.

I'd estimate ten years, as with any such project :) - 
http://www.norvig.com/21-days.html

> Most of my longish message was thinking out loud and certainly helped me
> to get an idea of a restructuring of the code. Also, I can follow the
> reasoning of keeping it inside Words at the moment. We'll see where that
> leaves Xish, but let's not get ahead of myself.

Double-awesome!

> I must admit that I haven't really looked into the rest of Words, but if
> I understand you correctly the development there is stagnant.

Yes.  I was the original developer, and as far as I know very little has 
happened since I was working on it.  The chat client part of words still 
  uses 1.0-era deprecated APIs, and has a gtk1 user interface!

Much of the code's design is also horrible, as it was written more as a 
proof of concept.  Still, I strongly believe that words is where a good 
bit of Twisted's potential lies.  A lot of what's being done with 
Twisted now could theoretically be done with apache, but once chat 
protocols start getting into the mix there are very few things that can 
compete.



From darran.edmundson at anu.edu.au  Wed May  4 15:42:52 2005
From: darran.edmundson at anu.edu.au (Darran Edmundson)
Date: Thu, 05 May 2005 07:42:52 +1000
Subject: [Twisted-Python] application release with Twisted included (was:
	Evangelism notes...)
In-Reply-To: <1A5DF4BE-AEE0-43E6-B9EA-DE3E29DF0B70@redivi.com>
References: <42792BAC.1050701@rogers.com>
	<1A5DF4BE-AEE0-43E6-B9EA-DE3E29DF0B70@redivi.com>
Message-ID: <427941DC.4010603@anu.edu.au>

Bob Ippolito wrote:
> That's why it's better if you don't install Twisted, just make its  
> source code part of your project.  That's what you should be doing  for 
> just about any dependency, especially those where you don't need  
> extension modules.

Could anyone offer advice on the best way to do this?   For example,
the setup.py of our twisted app creates a package hierarchy:
	- agdevicecontrol
		- agdevicecontrol.server
		- agdevicecontrol.client
		- agdevicecontrol.gui
		- agdevicecontrol.common
		- agdeviceconttrol.devices

This is all under subversion control and (inspired by Twisted) a few
hours away from having its tests run under Buildbot.  So now if we
want to include Twisted2.0 and the ZopeInterfaces dependencies
in our source release, should we just take a source snapshot and
add:
		- agdevicecontrol.twisted
		- agdevicecontrol.zopeinterfaces

And do we try to keep these in synch with the respective
CVS/SVN repositories?  Or since this is going out to end
users, stick with stable releases (almost rhetorical question).

As always, your advice is much appreciated.

Cheers,
Darran.

-- 
Darran Edmundson (darran.edmundson at anu.edu.au)
ANU Supercomputer Facility Vizlab
Australian National University, Canberra, ACT 2600
tel: +61 2 6125-0517  fax: +61 2 6125-5088



From itamar at itamarst.org  Wed May  4 15:47:56 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 04 May 2005 17:47:56 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <4279404E.8070905@rogers.com>
References: <42792BAC.1050701@rogers.com>
	<1115238466.8476.44.camel@localhost.localdomain>
	<427935AA.1060100@divmod.com>  <4279404E.8070905@rogers.com>
Message-ID: <1115243276.8476.65.camel@localhost.localdomain>

On Wed, 2005-05-04 at 17:36 -0400, Mike C. Fletcher wrote:

> >   - Do not ever, ever use IRC in a public forum to solve a problem in
> > real-time.  In fact, do not ever use any support mechanism in a public
> > forum unless you or your company has a paid relationship with the
> > people on the other end of the wire.
> 
> Um, I hope you're joking.  Do not *ever* use a public support mechanism
> without a paid relationship? 

I think he meant don't use it *in* a public forum, i.e. with people
("customers") looking over your shoulder. You should use IRC for
support, that's what it's there for.




From bob at redivi.com  Wed May  4 15:50:42 2005
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 4 May 2005 17:50:42 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <4279404E.8070905@rogers.com>
References: <42792BAC.1050701@rogers.com>	<1115238466.8476.44.camel@localhost.localdomain>
	<427935AA.1060100@divmod.com> <4279404E.8070905@rogers.com>
Message-ID: <A5EB704D-B9A5-4042-841A-F49022562CB4@redivi.com>


On May 4, 2005, at 5:36 PM, Mike C. Fletcher wrote:

> Glyph Lefkowitz wrote:
> ...
>
>
>>   - Do not ever, ever use IRC in a public forum to solve a problem in
>> real-time.  In fact, do not ever use any support mechanism in a  
>> public
>> forum unless you or your company has a paid relationship with the
>> people on the other end of the wire.
>>
>
> Um, I hope you're joking.  Do not *ever* use a public support  
> mechanism
> without a paid relationship?  So is everyone on IRC paid up?  Or is it
> not a support mechanism?  Or is it just unwise to ever *use* Twisted
> IRC; it should just be considered a waste of time?  Absolutes like  
> that
> are kind of extreme, no?  Maybe you meant to say only for real-time
> problem solving... still seems to make the immediacy of the forum
> somewhat pointless, no?  It did actually solve the problem, btw,  
> and at
> least the search for the docs was cut short at 20 minutes.

Presumably, this is what he meant:

Don't CC the IRC conversation to the rest of your company ("in a  
public forum").  The S:N ratio and mannerisms of IRC aren't  
appropriate to broadcast to the rest of the world (unless they are  
also acquainted with how IRC works, etc.).

Don't expect free help exactly when you need it ("in real-time").   
#twisted is quite helpful, and often does end up being free real-time  
help, but there aren't any guarantees.

-bob




From mcfletch at rogers.com  Wed May  4 15:54:02 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Wed, 04 May 2005 17:54:02 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <1A5DF4BE-AEE0-43E6-B9EA-DE3E29DF0B70@redivi.com>
References: <42792BAC.1050701@rogers.com>
	<1A5DF4BE-AEE0-43E6-B9EA-DE3E29DF0B70@redivi.com>
Message-ID: <4279447A.3000409@rogers.com>

Bob Ippolito wrote:
...

> That's why it's better if you don't install Twisted, just make its 
> source code part of your project.  That's what you should be doing 
> for just about any dependency, especially those where you don't need 
> extension modules.

Hmm, can't see that flying with our sysadmins, they want standard
packages with minimal apps that use them (NetBSD developer).

> Debugging with an audience?  What the hell were you thinking?  Don't 
> do that.

Pair programming *always* has an audience, in this particular case we
just had the third programmer looking over our shoulder because we'd
just been debating the merits of Twisted and he wanted to see how it
compared to his own experiences with Twisted.  Going back to my
"cubicle" (actually apartment) would have involved making the pair
programming remote (which is common in our company), the difference
being that I could do the looking up/spelunking *before* I called over
to start work ;) .

> The deferred/generator stuff is probably "plain-old-looking" enough 
> to be used by a programmer who isn't already used to the Twisted 
> style of programming, with caveats of course.

Quite possibly it would be, but I'm afraid the cow is already in the
corn for this project.  We'll see if they are won over by the beauty and
majesty of the big Twisted project when/if they start working on that.

Have fun,
Mike

________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From glyph at divmod.com  Wed May  4 15:55:04 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 04 May 2005 17:55:04 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <4279404E.8070905@rogers.com>
References: <42792BAC.1050701@rogers.com>	<1115238466.8476.44.camel@localhost.localdomain>	<427935AA.1060100@divmod.com>
	<4279404E.8070905@rogers.com>
Message-ID: <427944B8.4010001@divmod.com>

Mike C. Fletcher wrote:
> Glyph Lefkowitz wrote:

>>  - Do not ever, ever use IRC in a public forum
                                 ^^^^^^^^^^^^^^^^^
i.e. when YOU are in a public forum, like in front of the rest of your 
company :).

> Um, I hope you're joking.  Do not *ever* use a public support mechanism
> without a paid relationship?  So is everyone on IRC paid up?
    ...
> If that was intended more as a "who do you think you are, you've not
> paid us anything", okay, accepted.
    ...
> We've (and I've) *tried* to contribute back to the Twisted community
> with introductory lectures at PyGTA, various pieces of documentation and
> releasing TwistedSNMP, but it's perfectly true that we've made no
> monetary arrangements 

No no, you misunderstand!  Your contributions have been substantial, and 
I didn't mean to impugn them.  I don't mean, "don't use IRC" or "you've 
got no right", I mean, you are likely to get flak, humor, or random 
people being rude to you for no reason as you are to get support.  This 
can get you in trouble in a meeting.

#twisted is like a bunch of mechanics and automotive engineers (and 
various hangers-on) hanging around in a garage.  It's not a slum, but it 
is a garage, there are going to be parts lying all over the place and 
people are informal.  Going to IRC with the president of your company 
watching your screen is like inviting your auto mechanic and his 
girlfriend into your boss's limousine to discuss the company's car 
purchasing plans for the next year.

> Seriously, I didn't even think of asking in IRC, it was suggested by
> another colleague between stifling guffaws... maybe he was out to get me
> by tricking me into exactly this folly ;) .

Hmm... sounds like maybe he was...



From projects at reedflute.com  Wed May  4 15:57:45 2005
From: projects at reedflute.com (Eugene Coetzee)
Date: Wed, 04 May 2005 23:57:45 +0200
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <1A5DF4BE-AEE0-43E6-B9EA-DE3E29DF0B70@redivi.com>
References: <42792BAC.1050701@rogers.com>
	<1A5DF4BE-AEE0-43E6-B9EA-DE3E29DF0B70@redivi.com>
Message-ID: <42794559.9070105@reedflute.com>

Bob Ippolito wrote:

>
> Debugging with an audience? What the hell were you thinking? Don't do 
> that. 


Yeah- debugging is never pretty no matter if you are using Visual Basic 
"idiot proof" wizard tools or assembler written in encrypted sanskrit. 
What kind of IT outfit torture their developers by forcing them to debug 
"live" with the sword of managerial scrutiny hanging over their heads :-)

For me the moral of the story is that frameworks tend to make simple 
tasks complex and complex tasks simple. Perhaps Twisted wasn't the best 
choice to start with?


Web                 -> www.reedflute.com
=============================================== 




From darran.edmundson at anu.edu.au  Wed May  4 16:04:38 2005
From: darran.edmundson at anu.edu.au (Darran Edmundson)
Date: Thu, 05 May 2005 08:04:38 +1000
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <42793FB4.2070304@divmod.com>
References: <42792BAC.1050701@rogers.com>	<1115238466.8476.44.camel@localhost.localdomain>	<4279383B.4060505@comcast.net>
	<42793FB4.2070304@divmod.com>
Message-ID: <427946F6.1070901@anu.edu.au>

Glyph Lefkowitz wrote:

> That said, as it is I think the Twisted team is doing a great job at 
> making Twisted, and we don't have any more resources or people to spend 
> on other stuff.  That's not to say we can't spot-fix the biggest 
> problems with our website (like the API documentation problem) but ... 
> where do these helpful people come from for other projects?  I would 
> estimate that Twisted has tens of thousands of users by now, but the 
> community is still oddly silent.

Lacking community volunteers with the necessary writing and twisted
skillsets, the best option would be to have the documentation done
professionally by *good* technical writers.

How does one fund this?  As you say, there are tens of thousands of twisted
users by now,  many writing code inside corporations/universities which 
regularly
pay for software.  So start a fund:

- get an accurate estimate of the amount of money needed (ie., have 
*good* writers
   lined up and ready to start work under contract)
- prominently display the fund status (thermometer?) on the twisted home 
page
- solicit support from twisted users urging them to get their employers 
to contribute
- recognize contributions

I think you'd be pleasantly surprised by the response.  $150k shouldn't 
be too hard
to raise and, spent wisely, will go a long way towards solving the 
documentation/tutorial
problems.  Our group put $12.5k back into a specific open source project 
last year.
Money that was earned thanks to that same project.

Cheers,
Darran.

P.S.  Of course a paper book would also do wonders ...


-- 
Darran Edmundson (darran.edmundson at anu.edu.au)
ANU Supercomputer Facility Vizlab
Australian National University, Canberra, ACT 2600
tel: +61 2 6125-0517  fax: +61 2 6125-5088



From bob at redivi.com  Wed May  4 16:06:43 2005
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 4 May 2005 18:06:43 -0400
Subject: [Twisted-Python] application release with Twisted included (was:
	Evangelism notes...)
In-Reply-To: <427941DC.4010603@anu.edu.au>
References: <42792BAC.1050701@rogers.com>
	<1A5DF4BE-AEE0-43E6-B9EA-DE3E29DF0B70@redivi.com>
	<427941DC.4010603@anu.edu.au>
Message-ID: <8C0ADF74-1860-47D2-9113-66ED71FC34B3@redivi.com>


On May 4, 2005, at 5:42 PM, Darran Edmundson wrote:

> Bob Ippolito wrote:
>
>> That's why it's better if you don't install Twisted, just make  
>> its  source code part of your project.  That's what you should be  
>> doing  for just about any dependency, especially those where you  
>> don't need  extension modules.
>>
>
> Could anyone offer advice on the best way to do this?   For example,
> the setup.py of our twisted app creates a package hierarchy:
>     - agdevicecontrol
>         - agdevicecontrol.server
>         - agdevicecontrol.client
>         - agdevicecontrol.gui
>         - agdevicecontrol.common
>         - agdeviceconttrol.devices
>
> This is all under subversion control and (inspired by Twisted) a few
> hours away from having its tests run under Buildbot.  So now if we
> want to include Twisted2.0 and the ZopeInterfaces dependencies
> in our source release, should we just take a source snapshot and
> add:
>         - agdevicecontrol.twisted
>         - agdevicecontrol.zopeinterfaces

Don't try and change the Python module hierarchy.  Just make twisted  
a sibling of your package.  zopeinterfaces is a bit different because  
it *does* have extension module(s), and doesn't evolve very quickly,  
so it might be best to just require that to be installed.  If you  
only support one platform you could install a particular version of  
zope.interfaces with a --prefix that points somewhere in your  
repository (such that it's a sibling of your code) and just check  
that in.  Or you can go with something a bit more complicated with  
multiple platforms where you have a bootstrap script that mangles the  
sys.path so that it finds the appropriate platform specific modules.

This is a "__bootstrap__" module that I've used in the past that I  
have used before:

import os, sys
# change to current dir
curdir = os.path.dirname(os.path.abspath(__file__))
os.chdir(curdir)
# add dependencies and platform specific path for dependencies
sitepkg = os.path.join(curdir, 'site-packages')
uname = os.uname()
platdir = '%s-%s' % (uname[0].replace(' ', '_'), uname[-1].replace('  
', '_'))
sys.path[1:1] = [
     sitepkg,
     os.path.join(sitepkg, platdir),
     os.path.join(sitepkg, platdir, 'PIL'),
]

In this particular case, the layout looked like this:

site-packages/
     formless/
     nevow/
     twisted/
         ... these three are just checkouts of their respective  
projects at some point in time
     plat-Darwin-Power_Macintosh/
         mx/
         PIL/
         sqlite/
         _sqlite.so
     plat-Linux-i686/
         ... same stuff as in Darwin

The way it bootstraps is that I had a "start.sh" script that calls "./ 
twistd -o -y something.tac", where twistd is just a local copy of the  
twistd shell script that is modified to import __bootstrap__ before  
it does anything else.

If you didn't notice, zope.interfaces isn't here.. because this is a  
copy of Twisted 1.3.  nevow worked better that way at the time.  It  
still works just fine, and I don't have to worry about other  
applications on the server getting in the way because the environment  
is pretty isolated.  I can svn co the project on (almost) any Mac OS  
X or Linux machine with a Python 2.3 interpreter and just run it,  
without worrying about any other dependencies.

> And do we try to keep these in synch with the respective
> CVS/SVN repositories?  Or since this is going out to end
> users, stick with stable releases (almost rhetorical question).

That's up to you.  You might want to map external code (even specific  
revisions of external code) as just svn:externals, but since you  
don't have control over other people's repositories (i.e. they might  
be down when you need to checkout) it's probably a good idea to  
"checkpoint" specific releases and make sure they live in your repo  
somewhere.

-bob




From mcfletch at rogers.com  Wed May  4 16:12:58 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Wed, 04 May 2005 18:12:58 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <427944B8.4010001@divmod.com>
References: <42792BAC.1050701@rogers.com>	<1115238466.8476.44.camel@localhost.localdomain>	<427935AA.1060100@divmod.com>
	<4279404E.8070905@rogers.com> <427944B8.4010001@divmod.com>
Message-ID: <427948EA.5090001@rogers.com>

Glyph Lefkowitz wrote:
...

> #twisted is like a bunch of mechanics and automotive engineers (and
> various hangers-on) hanging around in a garage.  It's not a slum, but
> it is a garage, there are going to be parts lying all over the place
> and people are informal.  Going to IRC with the president of your
> company watching your screen is like inviting your auto mechanic and
> his girlfriend into your boss's limousine to discuss the company's car
> purchasing plans for the next year.

Our president, incidentally, is a leather-wearing biker (and a NetBSD
developer), but I'm sure the mechanic and his girlfriend would get over
their offense, eventually ;) .  Point taken, though.  No matter how laid
back the individuals, when trying to convince a group about the
viability of a product in a business setting it's not a good forum to
which to turn.

Have fun,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From bob at redivi.com  Wed May  4 16:14:08 2005
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 4 May 2005 18:14:08 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <4279447A.3000409@rogers.com>
References: <42792BAC.1050701@rogers.com>
	<1A5DF4BE-AEE0-43E6-B9EA-DE3E29DF0B70@redivi.com>
	<4279447A.3000409@rogers.com>
Message-ID: <CA955764-21EC-42DC-B5A7-18534DFF760A@redivi.com>


On May 4, 2005, at 5:54 PM, Mike C. Fletcher wrote:

> Bob Ippolito wrote:
> ...
>
>
>> That's why it's better if you don't install Twisted, just make its
>> source code part of your project.  That's what you should be doing
>> for just about any dependency, especially those where you don't need
>> extension modules.
>>
>
> Hmm, can't see that flying with our sysadmins, they want standard
> packages with minimal apps that use them (NetBSD developer).

Sysadmins be damned, the more self-contained an application is, the  
less trouble you'll have debugging, developing, and upgrading it.   
ESPECIALLY since Python can't reasonably do multiple-concurrent- 
versions (effectively our own DLL hell).

>> Debugging with an audience?  What the hell were you thinking?  Don't
>> do that.
>>
>
> Pair programming *always* has an audience, in this particular case we
> just had the third programmer looking over our shoulder because we'd
> just been debating the merits of Twisted and he wanted to see how it
> compared to his own experiences with Twisted.  Going back to my
> "cubicle" (actually apartment) would have involved making the pair
> programming remote (which is common in our company), the difference
> being that I could do the looking up/spelunking *before* I called over
> to start work ;) .

The way you said it kind of implied that more than 2 people were  
present, and that these were non-programmers.

-bob




From mary-twisted at puzzling.org  Wed May  4 16:27:57 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Thu, 5 May 2005 08:27:57 +1000
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <42793FB4.2070304@divmod.com>
References: <42792BAC.1050701@rogers.com>
	<1115238466.8476.44.camel@localhost.localdomain>
	<4279383B.4060505@comcast.net> <42793FB4.2070304@divmod.com>
Message-ID: <20050504222757.GD11357@sourdust.home.puzzling.org>

On Wed, May 04, 2005, Glyph Lefkowitz wrote:
> Worse, this is a long-standing problem I don't see any effort underway
> to rectify it.  Other open-source projects have gotten to this point
> and found huge, helpful teams of busy bees to fix the website, keep
> the documents up to date, wrangle the release notes and annotate the
> development process.

What particular projects do you have in mind here? I ask because it
could well be useful to actually go to them and say "hey, where did you
find these people?" In particular, it would be useful to ask that
question of things that will be used by programmers: Python itself,
other languages developed/maintained by communities, the graphical
toolkits and other big libraries... (answers from, say, the GNOME user
documentation people might still be useful, but I think slightly less
so, because that documentation can be written by non-programmers).

I can think of all kinds of answers ("they just appeared!", "we don't
merge features without review of their documentation," "we paid people,"
"we just love writing documentation," "there's these two crazy people
who just love writing documentation," "there's this one company who
employs our major developers and also employs some tech writers,") but I
don't know what the correct ones are.

-Mary



From srichter at cosmos.phy.tufts.edu  Wed May  4 17:40:56 2005
From: srichter at cosmos.phy.tufts.edu (Stephan Richter)
Date: Wed, 4 May 2005 19:40:56 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <42793FB4.2070304@divmod.com>
References: <42792BAC.1050701@rogers.com> <4279383B.4060505@comcast.net>
	<42793FB4.2070304@divmod.com>
Message-ID: <200505041940.56933.srichter@cosmos.phy.tufts.edu>

On Wednesday 04 May 2005 17:33, Glyph Lefkowitz wrote:
> That said, as it is I think the Twisted team is doing a great job at
> making Twisted, and we don't have any more resources or people to spend
> on other stuff.  That's not to say we can't spot-fix the biggest
> problems with our website (like the API documentation problem) but ...
> where do these helpful people come from for other projects?  I would
> estimate that Twisted has tens of thousands of users by now, but the
> community is still oddly silent.

In Zope 3 we simply made it a policy that documentation has to be provided 
with any code that is checked in.

Regards,
Stephan
-- 
Stephan Richter
CBU Physics & Chemistry (B.S.) / Tufts Physics (Ph.D. student)
Web2k - Web Software Design, Development and Training



From radeex at gmail.com  Wed May  4 17:57:49 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Thu, 5 May 2005 09:57:49 +1000
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <42793FB4.2070304@divmod.com>
References: <42792BAC.1050701@rogers.com>
	<1115238466.8476.44.camel@localhost.localdomain>
	<4279383B.4060505@comcast.net> <42793FB4.2070304@divmod.com>
Message-ID: <60ed19d40505041657480dc31c@mail.gmail.com>

On 5/5/05, Glyph Lefkowitz <glyph at divmod.com> wrote:
> Worse, this is a long-standing problem I don't see any effort underway
> to rectify it.  Other open-source projects have gotten to this point and
> found huge, helpful teams of busy bees to fix the website, keep the
> documents up to date, wrangle the release notes and annotate the
> development process.  Some projects are worse - I've recently had an
> experience with the linux cifs client project website that made me feel
> really good about our web presence :-) - but we could do better.
> 
> That said, as it is I think the Twisted team is doing a great job at
> making Twisted, and we don't have any more resources or people to spend
> on other stuff.  That's not to say we can't spot-fix the biggest
> problems with our website (like the API documentation problem) but ...
> where do these helpful people come from for other projects?  I would
> estimate that Twisted has tens of thousands of users by now, but the
> community is still oddly silent.
> 
> I'm genuinely baffled as to how to proceed.  Is there anyone out there
> who can contribute some significant time to updating our "professional"
> presence on the web and elsewhere?

(This contains my thoughts on Twisted's state in general, this thread,
and a response to this particular point from Glyph):

As it stands, I'm pretty embarassed about the state of Twisted, and
I'm really sympathetic for Mike. Personally, I'm truly sorry I had to
drop a lot of polish from the Twisted 2.0 release; I decided to make
it a higher priority to get it out the door (its release cycle was
nearing Debian scales) than to get API docs building, for example.

While there are a lot of docs, and people who claim "Twisted has no
docs!" should be stabbed in the face, the level of usefulness in the
docs isn't that, well, useful, despite Mary's excellent effort. Not
only that, the code is also really nasty in certain areas, trial being
particularly relevant, but certainly not the only area. Trial is
something I've worried about for a while and have eventually just lost
all hope of general usability for, if you're not a Twisted expert.

To respond to your question, glyph, the only thing I can imagine
helping Twisted a significant amount right now is if some company
employing a Twisted hacker would give that Twisted hacker half a day a
week to *generally* maintain Twisted. Just those 4.5 focussed hours a
week would help an amazing amount, I reckon. Not just working on the
web site and docs, but the code as well, like fixing bugs in the
tracker. Of course, most of those companies that employ us do pay us
for developing certain contributions to Twisted, but that's not really
benefitting the project as a whole, it's just benefitting very small
niches within it.

Unfortunately, all of the companies employing Twisted hackers (Divmod,
Nunatak, ITA, and some others) are either too poor or don't care
enough about Twisted to make that offer.

Barring that, maybe a horde of uni students with tons of time on their
hands could help.

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From njp at njp.us  Wed May  4 20:50:32 2005
From: njp at njp.us (Norm Petterson)
Date: Wed, 04 May 2005 22:50:32 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <427946F6.1070901@anu.edu.au>
References: <42792BAC.1050701@rogers.com>	<1115238466.8476.44.camel@localhost.localdomain>	<4279383B.4060505@comcast.net>	<42793FB4.2070304@divmod.com>
	<427946F6.1070901@anu.edu.au>
Message-ID: <427989F8.5040505@njp.us>

Darran Edmundson wrote:

> P.S.  Of course a paper book would also do wonders ...

+1 here...

I carry Alex Martelli's Python in a Nutshell around with me every day. 
Alex, if you're listening, how about a book on Twisted?

Several books introduce Twisted positively (e.g., Goerzen's recent 
Foundations of Python Network Programming), but the lack of a complete 
print reference has made me a little hesitant to emphasize my reliance 
on it in recent customer projects. Heck, I have enough trouble 
convincing my customers that Python is supportable (e.g., "we're a 
Microsoft shop here..."), so I hide my use of Twisted in the packaging. 
Thanks again, Cory, for ntsvc...

Keep up the good work,

Norm





From mesozoic at polynode.com  Wed May  4 22:07:51 2005
From: mesozoic at polynode.com (Alex Levy)
Date: Thu, 5 May 2005 00:07:51 -0400
Subject: [Twisted-Python] twistedmatrix.com gets a touch-up
Message-ID: <20050505040751.GC29859@perpetual.moxn.net>

Given the recent discussion of Twisted's "professional face", this seems
more than a little apropos.

twistedmatrix.com has been updated with some new CSS and a little more
color. I've tested it on Firefox/Win and IE6/Win, but it needs a lot more
scrutiny. Everyone, please throw it into your browser(s) of choice and give
a yell if something looks awry.

Thanks to Chris Armstrong for giving me permission to run amok in the
WebSite branch.

-- 
Alex Levy
WWW: http://mesozoic.geecs.org/
 
"Never let your sense of morals prevent you from doing what is right."
 -- Salvor Hardin, Isaac Asimov's _Foundation_



From bob at redivi.com  Wed May  4 22:19:56 2005
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 5 May 2005 00:19:56 -0400
Subject: [Twisted-Python] twistedmatrix.com gets a touch-up
In-Reply-To: <20050505040751.GC29859@perpetual.moxn.net>
References: <20050505040751.GC29859@perpetual.moxn.net>
Message-ID: <605BDB45-31CF-46E3-8FB1-6F5CD3A1C9CA@redivi.com>


On May 5, 2005, at 12:07 AM, Alex Levy wrote:

> Given the recent discussion of Twisted's "professional face", this  
> seems
> more than a little apropos.
>
> twistedmatrix.com has been updated with some new CSS and a little more
> color. I've tested it on Firefox/Win and IE6/Win, but it needs a  
> lot more
> scrutiny. Everyone, please throw it into your browser(s) of choice  
> and give
> a yell if something looks awry.

Man, what the hell are we going to complain about now that there are  
obvious documentation links on the front page!?  You suck :)

-bob




From tv at twistedmatrix.com  Thu May  5 00:12:34 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu, 05 May 2005 09:12:34 +0300
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <427989F8.5040505@njp.us>
References: <42792BAC.1050701@rogers.com>	<1115238466.8476.44.camel@localhost.localdomain>	<4279383B.4060505@comcast.net>	<42793FB4.2070304@divmod.com>	<427946F6.1070901@anu.edu.au>
	<427989F8.5040505@njp.us>
Message-ID: <4279B952.5000203@twistedmatrix.com>

Norm Petterson wrote:
>> P.S.  Of course a paper book would also do wonders ...
> 
> +1 here...

I've let this slip earlier, now might be a good time to do that again.
I'm in the pre-contract stage of bookwriting, with an enthusiastic
publisher. Watch This Space.



From tv at twistedmatrix.com  Thu May  5 00:30:24 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu, 05 May 2005 09:30:24 +0300
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <1A5DF4BE-AEE0-43E6-B9EA-DE3E29DF0B70@redivi.com>
References: <42792BAC.1050701@rogers.com>
	<1A5DF4BE-AEE0-43E6-B9EA-DE3E29DF0B70@redivi.com>
Message-ID: <4279BD80.9080702@twistedmatrix.com>

Bob Ippolito wrote:
> That's why it's better if you don't install Twisted, just make its  
> source code part of your project.  That's what you should be doing  for 
> just about any dependency, especially those where you don't need  
> extension modules.

Eww. -1 on that. As a Debian person, I tend to spend a lot of time
dekludging things where upstream includes 5 libraries with the project,
and will not use system-installed libraries. Not to speak of the bloat
in the size of the source tarballs, which is multiplied by a _lot_ when
it comes to Debian.



From pmezard at gmail.com  Thu May  5 03:52:18 2005
From: pmezard at gmail.com (Patrick =?utf-8?b?TcOpemFyZA==?=)
Date: Thu, 5 May 2005 09:52:18 +0000 (UTC)
Subject: [Twisted-Python] Reactors and New Asynchronous APIs
Message-ID: <loom.20050505T115111-651@post.gmane.org>

Hello,
I have several questions about twisted reactors and extending the twisted
framework with new asynchronous APIs.

1- What is the status of the IOCP reactor? Is it stable? If it is, is there any
reason for not selecting it as the default reactor for win32 NT platforms?

2- I am considering the integration of a custom database API (like Berkeley DB)
in a twisted application. I could easily wrap the API in a C++ python module and
access it synchronously from twisted, at least in a prototyping phase. 
Obviously, if the blocking calls are too long it would make the whole framework
completely useless. Then, the calls could be made from twisted managed threads.
Assuming the module code was written to minimize GIL contention it would 
probably greatly improve the situation. The most efficient solution would be
to plug the asynchronous API directly into the reactor: 

Is it possible to extend reactors with new asynchronous API implemented in
separate client modules?

With my little knowledge of the twisted framework and quick glances at the
selectreactor and iocpreactor implementation, I think the answer is no.
The practical solution would be to duplicate the reactor code and extend it
with the new API calls.

I do not know if it would be easy or not to provide a pluggable asynchronous
framework *at C module level*. Basically, the reactor is nothing else than a
thread-safe event queue with a (post/get)-event API. If this abstraction can be
implemented at C level, then plugging new asynchronous handlers would be clearly
doable, _iocp.c is a good example for that. Now, I am not really knowledgeable
(yet) about python C module coding, and I guess it is not exactly easy to bind
C callbacks from one python C module into another using normal python code as
glue. In the end, this is just another plugin/component system like COM to
write so...

Any thoughts?

Patrick Mézard





From mesozoic at polynode.com  Thu May  5 06:58:01 2005
From: mesozoic at polynode.com (Alex Levy)
Date: Thu, 05 May 2005 08:58:01 -0400
Subject: [Twisted-Python] Re: twistedmatrix.com gets a touch-up
In-Reply-To: <605BDB45-31CF-46E3-8FB1-6F5CD3A1C9CA@redivi.com>
References: <20050505040751.GC29859@perpetual.moxn.net>
	<605BDB45-31CF-46E3-8FB1-6F5CD3A1C9CA@redivi.com>
Message-ID: <427A1859.8010201@polynode.com>

Bob Ippolito wrote:
> Man, what the hell are we going to complain about now that there are  
> obvious documentation links on the front page!?  You suck :)

Those links weren't actually part of my changes, but that's besides the 
point. I'm sure you guys can find other things to groan about for a while ;)

-- 
Alex Levy
WWW: http://mesozoic.geecs.org

"Never let your sense of morals prevent you from doing what is right."
  -- Salvor Hardin, Isaac Asimov's _Foundation_




From justinjohnson at gmail.com  Thu May  5 07:33:06 2005
From: justinjohnson at gmail.com (Justin Johnson)
Date: Thu, 5 May 2005 08:33:06 -0500
Subject: [Twisted-Python] Reactors and New Asynchronous APIs
In-Reply-To: <loom.20050505T115111-651@post.gmane.org>
References: <loom.20050505T115111-651@post.gmane.org>
Message-ID: <94a776e7050505063361e5879e@mail.gmail.com>

On 5/5/05, Patrick Mézard <pmezard at gmail.com> wrote: 
> 
> Hello,
> I have several questions about twisted reactors and extending the twisted
> framework with new asynchronous APIs.
> 
> 1- What is the status of the IOCP reactor? Is it stable? If it is, is 
> there any
> reason for not selecting it as the default reactor for win32 NT platforms?

 The IOCP reactor doesn't support spawnProcess, among other things, which is 
why I currently can't use it. The author (PenguinOf in IRC) was also going 
to submit a list of bugs he knows about. Here are the notes I jotted notes 
down in IRC.

   1. always resets connection instead of closing it nicely 
   2. need half-close support 
   3. need fancy optimizations, like multiple threads and multiple 
   outstanding read requests per socket 
   4. redesign proactor 
   5. reactor.shutdown doesn't cancel


2- I am considering the integration of a custom database API (like Berkeley 
> DB)
> in a twisted application. I could easily wrap the API in a C++ python 
> module and
> access it synchronously from twisted, at least in a prototyping phase.
> Obviously, if the blocking calls are too long it would make the whole 
> framework
> completely useless. Then, the calls could be made from twisted managed 
> threads.
> Assuming the module code was written to minimize GIL contention it would
> probably greatly improve the situation. The most efficient solution would 
> be
> to plug the asynchronous API directly into the reactor:
> 
> Is it possible to extend reactors with new asynchronous API implemented in
> separate client modules?
> 
> With my little knowledge of the twisted framework and quick glances at the
> selectreactor and iocpreactor implementation, I think the answer is no.
> The practical solution would be to duplicate the reactor code and extend 
> it
> with the new API calls.
> 
> I do not know if it would be easy or not to provide a pluggable 
> asynchronous
> framework *at C module level*. Basically, the reactor is nothing else than 
> a
> thread-safe event queue with a (post/get)-event API. If this abstraction 
> can be
> implemented at C level, then plugging new asynchronous handlers would be 
> clearly
> doable, _iocp.c is a good example for that. Now, I am not really 
> knowledgeable
> (yet) about python C module coding, and I guess it is not exactly easy to 
> bind
> C callbacks from one python C module into another using normal python code 
> as
> glue. In the end, this is just another plugin/component system like COM to
> write so...
> 
> Any thoughts?
> 
> Patrick Mézard
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050505/5dc570e5/attachment.html>

From bob at redivi.com  Thu May  5 07:39:42 2005
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 5 May 2005 09:39:42 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <4279BD80.9080702@twistedmatrix.com>
References: <42792BAC.1050701@rogers.com>
	<1A5DF4BE-AEE0-43E6-B9EA-DE3E29DF0B70@redivi.com>
	<4279BD80.9080702@twistedmatrix.com>
Message-ID: <8875358E-5653-407A-B21E-7B9A4C0EAE2F@redivi.com>


On May 5, 2005, at 2:30 AM, Tommi Virtanen wrote:

> Bob Ippolito wrote:
>
>> That's why it's better if you don't install Twisted, just make  
>> its  source code part of your project.  That's what you should be  
>> doing  for just about any dependency, especially those where you  
>> don't need  extension modules.
>>
>
> Eww. -1 on that. As a Debian person, I tend to spend a lot of time
> dekludging things where upstream includes 5 libraries with the  
> project,
> and will not use system-installed libraries. Not to speak of the bloat
> in the size of the source tarballs, which is multiplied by a _lot_  
> when
> it comes to Debian.

I'm not talking about open source software, I'm talking about  
deploying Twisted in the real world.

-bob




From bob at redivi.com  Thu May  5 07:46:23 2005
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 5 May 2005 09:46:23 -0400
Subject: [Twisted-Python] Reactors and New Asynchronous APIs
In-Reply-To: <loom.20050505T115111-651@post.gmane.org>
References: <loom.20050505T115111-651@post.gmane.org>
Message-ID: <3A740F41-7FE0-49C7-BB55-4727855384A6@redivi.com>


On May 5, 2005, at 5:52 AM, Patrick Mézard wrote:

> 2- I am considering the integration of a custom database API (like  
> Berkeley DB)
> in a twisted application. I could easily wrap the API in a C++  
> python module and
> access it synchronously from twisted, at least in a prototyping phase.
> Obviously, if the blocking calls are too long it would make the  
> whole framework
> completely useless. Then, the calls could be made from twisted  
> managed threads.
> Assuming the module code was written to minimize GIL contention it  
> would
> probably greatly improve the situation. The most efficient solution  
> would be
> to plug the asynchronous API directly into the reactor:
>
> Is it possible to extend reactors with new asynchronous API  
> implemented in
> separate client modules?

No, that's fundamentally impossible.  Unless you have some resource  
the API you're using understands (i.e. a file descriptor), then  
there's no way you're going to be able to wake up a blocking call to  
select(), WaitForMultipleObjects, or whatever.

What you probably want to do is run your code in a separate thread,  
and notify the main thread when something happens.  (e.g.  
callInThread, etc.).  See threadedselectreactor (in svn) for an  
inversion of this idea -- which runs (the blocking part of) Twisted  
in a separate thread and notifies your foreign event loop when  
something happens.

> With my little knowledge of the twisted framework and quick glances  
> at the
> selectreactor and iocpreactor implementation, I think the answer is  
> no.
> The practical solution would be to duplicate the reactor code and  
> extend it
> with the new API calls.
>
> I do not know if it would be easy or not to provide a pluggable  
> asynchronous
> framework *at C module level*. Basically, the reactor is nothing  
> else than a
> thread-safe event queue with a (post/get)-event API. If this  
> abstraction can be
> implemented at C level, then plugging new asynchronous handlers  
> would be clearly
> doable, _iocp.c is a good example for that. Now, I am not really  
> knowledgeable
> (yet) about python C module coding, and I guess it is not exactly  
> easy to bind
> C callbacks from one python C module into another using normal  
> python code as
> glue. In the end, this is just another plugin/component system like  
> COM to
> write so...

If the reactor just polled until something happened and spun 100%  
CPU, then sure, you could integrate whatever the hell "asynchronous"  
API you wanted.  That's not how anything (should) work in a multi- 
tasking operating system.  That's not even driven.

-bob




From tpherndon at optonline.net  Thu May  5 09:18:18 2005
From: tpherndon at optonline.net (T. Peter Herndon)
Date: Thu, 5 May 2005 11:18:18 -0400
Subject: [Twisted-Python] twistedmatrix.com gets a touch-up
In-Reply-To: <20050505040751.GC29859@perpetual.moxn.net>
References: <20050505040751.GC29859@perpetual.moxn.net>
Message-ID: <E6CC5A6E-E9E1-4240-B6E2-92D1101492B3@optonline.net>

It looks good in Safari 2.0, I like the color splashes.  The  
newsentry divs could stand to have the published date in the entry  
title.  But then, if no news updates are posted for a while, the page  
would start to look old and crufty.  E.g., New Viewer:  "Hmm,  
Twisted.  Nice website.  Oh, wait -- project must be dead, since the  
last news entry was published 18 months ago.  Oh, well, never mind."   
So, if you do put dates in, somebody needs to write news entries  
regularly (not necessarily frequently, just regularly).

My 2 cents,

---Peter Herndon
On May 5, 2005, at 12:07 AM, Alex Levy wrote:

> Given the recent discussion of Twisted's "professional face", this  
> seems
> more than a little apropos.
>
> twistedmatrix.com has been updated with some new CSS and a little more
> color. I've tested it on Firefox/Win and IE6/Win, but it needs a  
> lot more
> scrutiny. Everyone, please throw it into your browser(s) of choice  
> and give
> a yell if something looks awry.
>
> Thanks to Chris Armstrong for giving me permission to run amok in the
> WebSite branch.
>
> -- 
> Alex Levy
> WWW: http://mesozoic.geecs.org/
>
> "Never let your sense of morals prevent you from doing what is right."
>  -- Salvor Hardin, Isaac Asimov's _Foundation_
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>





From projects at reedflute.com  Thu May  5 10:08:38 2005
From: projects at reedflute.com (Eugene Coetzee)
Date: Thu, 05 May 2005 18:08:38 +0200
Subject: [Twisted-Python] twistedmatrix.com gets a touch-up
In-Reply-To: <E6CC5A6E-E9E1-4240-B6E2-92D1101492B3@optonline.net>
References: <20050505040751.GC29859@perpetual.moxn.net>
	<E6CC5A6E-E9E1-4240-B6E2-92D1101492B3@optonline.net>
Message-ID: <427A4506.2000807@reedflute.com>

T. Peter Herndon wrote:

> It looks good in Safari 2.0, I like the color splashes. 

Sure - it must have been done be the same genius in graphical arts who 
did www.kernel.org ;-)


Web                 -> www.reedflute.com
=============================================== 




From anthony at interlink.com.au  Thu May  5 10:16:17 2005
From: anthony at interlink.com.au (Anthony Baxter)
Date: Fri, 6 May 2005 02:16:17 +1000
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <60ed19d40505041657480dc31c@mail.gmail.com>
References: <42792BAC.1050701@rogers.com> <42793FB4.2070304@divmod.com>
	<60ed19d40505041657480dc31c@mail.gmail.com>
Message-ID: <200505060216.24080.anthony@interlink.com.au>

On Thursday 05 May 2005 09:57, Christopher Armstrong wrote:
> To respond to your question, glyph, the only thing I can imagine
> helping Twisted a significant amount right now is if some company
> employing a Twisted hacker would give that Twisted hacker half a day a
> week to *generally* maintain Twisted. Just those 4.5 focussed hours a
> week would help an amazing amount, I reckon. Not just working on the
> web site and docs, but the code as well, like fixing bugs in the
> tracker. Of course, most of those companies that employ us do pay us
> for developing certain contributions to Twisted, but that's not really
> benefitting the project as a whole, it's just benefitting very small
> niches within it.
>
> Unfortunately, all of the companies employing Twisted hackers (Divmod,
> Nunatak, ITA, and some others) are either too poor or don't care
> enough about Twisted to make that offer.

That's going to be a really hard thing to find. For instance, as far as I'm 
aware, there's no-one being paid to work on Python - I spend a small amount 
of work time on it, but certainly nowhere near half a day a week. (I 
generally take a half day or day off when it comes to cutting a release). 
If we can't find companies to fund work on Python (a much, much more
visible project, with a whole pile of companies relying on it) I don't hold 
out much chance for someone funding Twisted as a whole. 

Having said that, I *could* see people being able to justify time on various 
Twisted subprojects because they need it for work. 

And yes, trial needs to be dropped off a bridge. 

Anthony
-- 
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From stpeter at jabber.org  Thu May  5 10:32:42 2005
From: stpeter at jabber.org (Peter Saint-Andre)
Date: Thu, 5 May 2005 11:32:42 -0500
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <20050504222757.GD11357@sourdust.home.puzzling.org>
References: <42792BAC.1050701@rogers.com>
	<1115238466.8476.44.camel@localhost.localdomain>
	<4279383B.4060505@comcast.net> <42793FB4.2070304@divmod.com>
	<20050504222757.GD11357@sourdust.home.puzzling.org>
Message-ID: <20050505163242.GJ15714@jabber.org>

On Thu, May 05, 2005 at 08:27:57AM +1000, Mary Gardiner wrote:
> On Wed, May 04, 2005, Glyph Lefkowitz wrote:
> > Worse, this is a long-standing problem I don't see any effort underway
> > to rectify it.  Other open-source projects have gotten to this point
> > and found huge, helpful teams of busy bees to fix the website, keep
> > the documents up to date, wrangle the release notes and annotate the
> > development process.
> 
> What particular projects do you have in mind here? I ask because it
> could well be useful to actually go to them and say "hey, where did you
> find these people?" In particular, it would be useful to ask that
> question of things that will be used by programmers: Python itself,
> other languages developed/maintained by communities, the graphical
> toolkits and other big libraries... (answers from, say, the GNOME user
> documentation people might still be useful, but I think slightly less
> so, because that documentation can be written by non-programmers).
> 
> I can think of all kinds of answers ("they just appeared!", "we don't
> merge features without review of their documentation," "we paid people,"
> "we just love writing documentation," "there's these two crazy people
> who just love writing documentation," "there's this one company who
> employs our major developers and also employs some tech writers,") but I
> don't know what the correct ones are.

In my experience (on Jabber and a few smaller projects), the hardest
thing is finding people who want to write docs. Developers don't want 
to do it or don't have the time, and most folks who like to write are
not especially technical. They might write a howto for end users, but 
documenting something like Twisted is beyond their ken. In the Jabber
world I have been writing docs since mid-2000 but even so I mostly
focus on protocol documentation because writing docs for various
implementations (libraries, servers, clients) would be never-ending.

My $0.02.

Peter

-- 
Peter Saint-Andre
Jabber Software Foundation
http://www.jabber.org/people/stpeter.shtml




From bob at redivi.com  Thu May  5 10:46:48 2005
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 5 May 2005 12:46:48 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <20050505163242.GJ15714@jabber.org>
References: <42792BAC.1050701@rogers.com>
	<1115238466.8476.44.camel@localhost.localdomain>
	<4279383B.4060505@comcast.net> <42793FB4.2070304@divmod.com>
	<20050504222757.GD11357@sourdust.home.puzzling.org>
	<20050505163242.GJ15714@jabber.org>
Message-ID: <E9A89BE0-E0DC-4574-B66A-C06A44208F25@redivi.com>


On May 5, 2005, at 12:32 PM, Peter Saint-Andre wrote:

> On Thu, May 05, 2005 at 08:27:57AM +1000, Mary Gardiner wrote:
>
>> On Wed, May 04, 2005, Glyph Lefkowitz wrote:
>>
>>> Worse, this is a long-standing problem I don't see any effort  
>>> underway
>>> to rectify it.  Other open-source projects have gotten to this point
>>> and found huge, helpful teams of busy bees to fix the website, keep
>>> the documents up to date, wrangle the release notes and annotate the
>>> development process.
>>>
>>
>> What particular projects do you have in mind here? I ask because it
>> could well be useful to actually go to them and say "hey, where  
>> did you
>> find these people?" In particular, it would be useful to ask that
>> question of things that will be used by programmers: Python itself,
>> other languages developed/maintained by communities, the graphical
>> toolkits and other big libraries... (answers from, say, the GNOME  
>> user
>> documentation people might still be useful, but I think slightly less
>> so, because that documentation can be written by non-programmers).
>>
>> I can think of all kinds of answers ("they just appeared!", "we don't
>> merge features without review of their documentation," "we paid  
>> people,"
>> "we just love writing documentation," "there's these two crazy people
>> who just love writing documentation," "there's this one company who
>> employs our major developers and also employs some tech writers,")  
>> but I
>> don't know what the correct ones are.
>>
>
> In my experience (on Jabber and a few smaller projects), the hardest
> thing is finding people who want to write docs. Developers don't want
> to do it or don't have the time, and most folks who like to write are
> not especially technical. They might write a howto for end users, but
> documenting something like Twisted is beyond their ken. In the Jabber
> world I have been writing docs since mid-2000 but even so I mostly
> focus on protocol documentation because writing docs for various
> implementations (libraries, servers, clients) would be never-ending.

I think there's probably a lot of Twisted "end-user documentation"  
lying around in the form of presentations and tutorials given at  
various conferences.  If someone aggregates the links to all of that  
stuff, it would probably be a useful resource to new-ish users.

-bob




From grimmtooth at gmail.com  Thu May  5 10:54:46 2005
From: grimmtooth at gmail.com (Jeff Grimmett)
Date: Thu, 5 May 2005 12:54:46 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <E9A89BE0-E0DC-4574-B66A-C06A44208F25@redivi.com>
References: <42792BAC.1050701@rogers.com>
	<1115238466.8476.44.camel@localhost.localdomain>
	<4279383B.4060505@comcast.net> <42793FB4.2070304@divmod.com>
	<20050504222757.GD11357@sourdust.home.puzzling.org>
	<20050505163242.GJ15714@jabber.org>
	<E9A89BE0-E0DC-4574-B66A-C06A44208F25@redivi.com>
Message-ID: <8f4623fb050505095457c74d0b@mail.gmail.com>

On 5/5/05, Bob Ippolito <bob at redivi.com> wrote:

> I think there's probably a lot of Twisted "end-user documentation"
> lying around in the form of presentations and tutorials given at
> various conferences. If someone aggregates the links to all of that
> stuff, it would probably be a useful resource to new-ish users.
> 

Whatever happened to the idea of a twisted Wiki, anyway? That's the sort of 
thing it's good at.

-- 

Best,

Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050505/6358297b/attachment.html>

From justinjohnson at gmail.com  Thu May  5 10:58:09 2005
From: justinjohnson at gmail.com (Justin Johnson)
Date: Thu, 5 May 2005 11:58:09 -0500
Subject: [Twisted-Python] Building Twisted on Windows
Message-ID: <94a776e7050505095845ce8174@mail.gmail.com>

Will someone who has experience building the latest Twisted code on Windows 
using Python2.4 please shed some light on the problems I'm experiencing, 
documented in http://twistedmatrix.com/bugs/issue1017?
 Thanks!
Justin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050505/6a70f30a/attachment.html>

From jarrod.roberson at gmail.com  Thu May  5 11:05:40 2005
From: jarrod.roberson at gmail.com (jarrod roberson)
Date: Thu, 5 May 2005 13:05:40 -0400
Subject: [Twisted-Python] twistedmatrix.com gets a touch-up
In-Reply-To: <427A4506.2000807@reedflute.com>
References: <20050505040751.GC29859@perpetual.moxn.net>
	<E6CC5A6E-E9E1-4240-B6E2-92D1101492B3@optonline.net>
	<427A4506.2000807@reedflute.com>
Message-ID: <2389d47305050510057df12c11@mail.gmail.com>

Personally I like the very spartan no-graphics look and feel.

The one thing that is still needed is 2.x API Docs!

-- 
If you don't know what you want, you probably need a nap.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050505/34c36770/attachment.html>

From exarkun at divmod.com  Thu May  5 11:25:09 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Thu, 05 May 2005 17:25:09 GMT
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <8f4623fb050505095457c74d0b@mail.gmail.com>
Message-ID: <20050505172509.15422.1369588982.divmod.quotient.20341@ohm>

On Thu, 5 May 2005 12:54:46 -0400, Jeff Grimmett <grimmtooth at gmail.com> wrote:
>On 5/5/05, Bob Ippolito <bob at redivi.com> wrote:
>
>> I think there's probably a lot of Twisted "end-user documentation"
>> lying around in the form of presentations and tutorials given at
>> various conferences. If someone aggregates the links to all of that
>> stuff, it would probably be a useful resource to new-ish users.
>>
>
>Whatever happened to the idea of a twisted Wiki, anyway? That's the sort of
>thing it's good at.

  There's lots of wiki software out there already.  Writing more won't solve any pressing problem, I think (in fact, it would just have to be documented...).  In the past, web-based content systems haven't been very successful with Twisted: people just don't update them frequently enough to be useful.  If enough people wanted to make a serious committment to getting a Twisted wiki established, I'm sure some hosting could be arranged, but just tossing up a wiki and hoping people contribute to it probably isn't going to fly.

  Jp



From aerkalov at gmail.com  Thu May  5 11:45:14 2005
From: aerkalov at gmail.com (Aleksandar Erkalovic)
Date: Thu, 5 May 2005 19:45:14 +0200
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <20050505172509.15422.1369588982.divmod.quotient.20341@ohm>
References: <8f4623fb050505095457c74d0b@mail.gmail.com>
	<20050505172509.15422.1369588982.divmod.quotient.20341@ohm>
Message-ID: <34ed656005050510455927c88f@mail.gmail.com>

> 
> There's lots of wiki software out there already. Writing more won't solve 
> any pressing problem, I think (in fact, it would just have to be 
> documented...). In the past, web-based content systems haven't been very 
> successful with Twisted: people just don't update them frequently enough to 
> be useful. If enough people wanted to make a serious committment to getting 
> a Twisted wiki established, I'm sure some hosting could be arranged, but 
> just tossing up a wiki and hoping people contribute to it probably isn't 
> going to fly.



well that is true. i am developing one "wiki like" software in twisted (and 
now nevow). 
but from the moment i started to write it i knew already on what machines 
will it be hosted, and now i have some 4 different servers (and around 100 
sites) in different countries hosting it. but that is all. no help from 
others, no feedback, no any chance that somebody can use it and run it on 
his machine. not to mention the fact that i have to do all administrative 
stuff, all the template modificatons, all the "oh my... i lost my password" 
jobs :)

anywho you can check it on http://tamtam.mi2.hr:8888/NoviTam/ and 2 years 
old version at http://tamtam.mi2.hr/TamTamDev/

-- 
http://aco.mi2.hr/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050505/560187b0/attachment.html>

From mwh at python.net  Thu May  5 11:59:05 2005
From: mwh at python.net (Michael Hudson)
Date: Thu, 05 May 2005 18:59:05 +0100
Subject: [Twisted-Python] Re: Evangelism notes...
References: <42792BAC.1050701@rogers.com> <42793FB4.2070304@divmod.com>
	<60ed19d40505041657480dc31c@mail.gmail.com>
	<200505060216.24080.anthony@interlink.com.au>
Message-ID: <2mmzr9wo46.fsf@starship.python.net>

Anthony Baxter <anthony at interlink.com.au> writes:

> On Thursday 05 May 2005 09:57, Christopher Armstrong wrote:
>> To respond to your question, glyph, the only thing I can imagine
>> helping Twisted a significant amount right now is if some company
>> employing a Twisted hacker would give that Twisted hacker half a day a
>> week to *generally* maintain Twisted. Just those 4.5 focussed hours a
>> week would help an amazing amount, I reckon. Not just working on the
>> web site and docs, but the code as well, like fixing bugs in the
>> tracker. Of course, most of those companies that employ us do pay us
>> for developing certain contributions to Twisted, but that's not really
>> benefitting the project as a whole, it's just benefitting very small
>> niches within it.
>>
>> Unfortunately, all of the companies employing Twisted hackers (Divmod,
>> Nunatak, ITA, and some others) are either too poor or don't care
>> enough about Twisted to make that offer.
>
> That's going to be a really hard thing to find. For instance, as far as I'm 
> aware, there's no-one being paid to work on Python - I spend a small amount 
> of work time on it, but certainly nowhere near half a day a week. 

I understand that Guido has a certain amount of Python time written
into his contract, but much of this is spent attending conferences and
so on.

Python appears to have more worker bees than Twisted who do the kind
of general work radix was asking for, despite none of them being paid
to do it; this is probably mostly a function of just being a bigger,
more visible project (after all, every Twisted user is a Python user).

> (I generally take a half day or day off when it comes to cutting a
> release).  If we can't find companies to fund work on Python (a
> much, much more visible project, with a whole pile of companies
> relying on it) I don't hold out much chance for someone funding
> Twisted as a whole.

Of course, the PSF has a certain amount of money and while none of it
has been spent directly on Python so far, some of it has gone on
producing training material (for scientists).  I personally doubt that
the PSF would find funding the production of such material
sufficiently in line with its interests but if noone asks, we'll never
knows.

Cheers,
mwh

-- 
  <Aardappel> this "I hate c++" is so old
  <dash> it's as old as C++, yes
                                                -- from Twisted.Quotes




From grant at osafoundation.org  Thu May  5 12:49:20 2005
From: grant at osafoundation.org (Grant Baillie)
Date: Thu, 5 May 2005 11:49:20 -0700
Subject: [Twisted-Python] Hanging test cases (Was: Evangelism notes...)
In-Reply-To: <42792BAC.1050701@rogers.com>
References: <42792BAC.1050701@rogers.com>
Message-ID: <C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>

On May 4, 2005, at 1:08 PM, Mike C. Fletcher wrote:

>     * Project was delivered, paid for, and has been running in
>       production for a few weeks, but 2 reported bugs cropped up
>           o To fix one, needed to update to 2.0 (deferred object
>             cleanup)... this caused rather a lot of upset, as the
>             sysadmins were upset about such a huge package needing  
> to be
>             updated (and they tried to do just the core packages  
> first,
>             which doubled the work-load involved in preparing that
>             update versus using Sumo)
>           o Fixing the other was no big deal, except that something in
>             2.0 changed how the test-suite was running so that it now
>             hung on completion...

Did you ever figure out why? I have just run into similar behaviour  
myself after upgrading to 2.0. Here's an example that hangs for me on  
Mac OS X (10.4) after the final print:

---------------
from twisted.internet import reactor, defer, threads
from twisted.trial.util import deferredResult
from twisted.web.client import getPage
import time


def itFired(result):
     print "Deferred fired: %s" % result
     return result

d = getPage("http://www.example.com/").addBoth(itFired)

print "Returned: %s" % deferredResult(d)
print "Done; exiting"
---------------


So far as I can tell, the python threading module has an atexit  
handler that's hanging. Also, if I replace the deferToThread() with a  
twisted.web.client.getPage(), I still get the same hang.

--Grant

Grant Baillie
Open Source Applications Foundation




From grant at osafoundation.org  Thu May  5 13:05:23 2005
From: grant at osafoundation.org (Grant Baillie)
Date: Thu, 5 May 2005 12:05:23 -0700
Subject: [Twisted-Python] Hanging test cases (Was: Evangelism notes...)
In-Reply-To: <C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>
References: <42792BAC.1050701@rogers.com>
	<C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>
Message-ID: <1D4A97FB-6815-49A8-B570-BC569F7CDE98@osafoundation.org>


On May 5, 2005, at 11:49 AM, Grant Baillie wrote:

> So far as I can tell, the python threading module has an atexit  
> handler that's hanging. Also, if I replace the deferToThread() with  
> a twisted.web.client.getPage(), I still get the same hang.

Er, I'd already replaced the deferToThread() in an earlier version of  
that file with twisted.web.client.getPage(), for anyone following  
along at home.

I also found a hackaround, which is to insert the following before  
the call to getPage:

#---------------
import threading
# threading seems to install an atexit() handler that
# can wedge if you've run the reactor. So, we import it
# first....

import atexit

def runAndStop():
     if not reactor.running:
         reactor.callLater(0, reactor.stop)
         reactor.run()

# ... then our handler will be called before threading's.
atexit.register(runAndStop)
#---------------

I'm not sure if this is a problem in python, in twisted's use of  
threading, or in trial.deferredResult, though.

--Grant

Grant Baillie
Open Source Applications Foundation






From jkrushen at gmail.com  Thu May  5 13:06:41 2005
From: jkrushen at gmail.com (Jordan Krushen)
Date: Thu, 5 May 2005 12:06:41 -0700
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <8f4623fb050505095457c74d0b@mail.gmail.com>
References: <42792BAC.1050701@rogers.com>
	<1115238466.8476.44.camel@localhost.localdomain>
	<4279383B.4060505@comcast.net> <42793FB4.2070304@divmod.com>
	<20050504222757.GD11357@sourdust.home.puzzling.org>
	<20050505163242.GJ15714@jabber.org>
	<E9A89BE0-E0DC-4574-B66A-C06A44208F25@redivi.com>
	<8f4623fb050505095457c74d0b@mail.gmail.com>
Message-ID: <b811ba7305050512061ad573dd@mail.gmail.com>

On 5/5/05, Jeff Grimmett <grimmtooth at gmail.com> wrote:

> On 5/5/05, Bob Ippolito <bob at redivi.com> wrote:
> 
> > I think there's probably a lot of Twisted "end-user documentation"
> > lying around in the form of presentations and tutorials given at 
> > various conferences.  If someone aggregates the links to all of that
> > stuff, it would probably be a useful resource to new-ish users.

>  Whatever happened to the idea of a twisted Wiki, anyway? That's the sort of
> thing it's good at.

I was thinking more along the lines of an RSS/blog aggregator on the
main site, taking in the developers' (and possibly some users') blogs,
and filtering them for relevance.

I know I get a ton of value out of reading various Python-, Twisted-,
and PyObjC-related posts in the blogosphere (though I rather dislike
RSS).  There's a different feel to that kind of info; it tends to feel
more personally relevant.  It's relevant enough for *someone* to write
about it, one hopes it's relevant enough for someone else to read :)

Wouldn't require [much] new code to get working vs. a wiki, it'd be
constantly updated, and once set up, nobody would have to write any
more than they already do.

J.



From stpeter at jabber.org  Thu May  5 13:26:08 2005
From: stpeter at jabber.org (Peter Saint-Andre)
Date: Thu, 5 May 2005 14:26:08 -0500
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <b811ba7305050512061ad573dd@mail.gmail.com>
References: <42792BAC.1050701@rogers.com>
	<1115238466.8476.44.camel@localhost.localdomain>
	<4279383B.4060505@comcast.net> <42793FB4.2070304@divmod.com>
	<20050504222757.GD11357@sourdust.home.puzzling.org>
	<20050505163242.GJ15714@jabber.org>
	<E9A89BE0-E0DC-4574-B66A-C06A44208F25@redivi.com>
	<8f4623fb050505095457c74d0b@mail.gmail.com>
	<b811ba7305050512061ad573dd@mail.gmail.com>
Message-ID: <20050505192608.GO15714@jabber.org>

On Thu, May 05, 2005 at 12:06:41PM -0700, Jordan Krushen wrote:
> On 5/5/05, Jeff Grimmett <grimmtooth at gmail.com> wrote:
> 
> > On 5/5/05, Bob Ippolito <bob at redivi.com> wrote:
> > 
> > > I think there's probably a lot of Twisted "end-user documentation"
> > > lying around in the form of presentations and tutorials given at 
> > > various conferences.  If someone aggregates the links to all of that
> > > stuff, it would probably be a useful resource to new-ish users.
> 
> >  Whatever happened to the idea of a twisted Wiki, anyway? That's the sort of
> > thing it's good at.
> 
> I was thinking more along the lines of an RSS/blog aggregator on the
> main site, taking in the developers' (and possibly some users') blogs,
> and filtering them for relevance.

Planet Twisted, anyone?

http://www.planetplanet.org/

Ralph Meijer runs Planet Jabber, he might have some insights...

http://planet.jabber.org/

/psa




From bob at redivi.com  Thu May  5 13:26:23 2005
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 5 May 2005 15:26:23 -0400
Subject: [Twisted-Python] Hanging test cases (Was: Evangelism notes...)
In-Reply-To: <1D4A97FB-6815-49A8-B570-BC569F7CDE98@osafoundation.org>
References: <42792BAC.1050701@rogers.com>
	<C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>
	<1D4A97FB-6815-49A8-B570-BC569F7CDE98@osafoundation.org>
Message-ID: <3309BAEB-4EAF-4CBD-9C09-47893BBD7E9A@redivi.com>


On May 5, 2005, at 3:05 PM, Grant Baillie wrote:

>
> On May 5, 2005, at 11:49 AM, Grant Baillie wrote:
>
>
>> So far as I can tell, the python threading module has an atexit  
>> handler that's hanging. Also, if I replace the deferToThread()  
>> with a twisted.web.client.getPage(), I still get the same hang.
>>
>
> Er, I'd already replaced the deferToThread() in an earlier version  
> of that file with twisted.web.client.getPage(), for anyone  
> following along at home.
>
> I also found a hackaround, which is to insert the following before  
> the call to getPage:
>
> #---------------
> import threading
> # threading seems to install an atexit() handler that
> # can wedge if you've run the reactor. So, we import it
> # first....
>
> import atexit
>
> def runAndStop():
>     if not reactor.running:
>         reactor.callLater(0, reactor.stop)
>         reactor.run()
>
> # ... then our handler will be called before threading's.
> atexit.register(runAndStop)
> #---------------
>
> I'm not sure if this is a problem in python, in twisted's use of  
> threading, or in trial.deferredResult, though.

Almost definitely a combination of 2 and 3, with 3 being the one  
really at fault.  Trial is horribly, horribly broken by design and  
it's really just an accident that it works at all.  The expectations  
a lot of the tests have about the reactor are also broken, but that's  
mostly just a consequence of trial sucking.

-bob




From jarrod.roberson at gmail.com  Thu May  5 13:34:01 2005
From: jarrod.roberson at gmail.com (jarrod roberson)
Date: Thu, 5 May 2005 15:34:01 -0400
Subject: [Twisted-Python] Using Twisted inside mod_python
Message-ID: <2389d47305050512346f29e7cf@mail.gmail.com>

I want to embed a Twisted Server ( specifically a ZeroConf implemenation I 
wrote ) into Apache2.

I have it running from a PythonImport and attaching to an interpreter and 
all that goodness.
It prints out all the queries and answers it received to the apache log just 
fine. Apache works just fine serving normal stuff.

The problem is anytime I make any kind of method calls into my global object 
from a handler it just hangs Apache2 :-(

I have tried it with worker.c and prefork.c and both exhibit the same 
behavior.

Any suggestions?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050505/ef9eee4d/attachment.html>

From jkrushen at gmail.com  Thu May  5 13:46:59 2005
From: jkrushen at gmail.com (Jordan Krushen)
Date: Thu, 5 May 2005 12:46:59 -0700
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <20050505192608.GO15714@jabber.org>
References: <42792BAC.1050701@rogers.com>
	<1115238466.8476.44.camel@localhost.localdomain>
	<4279383B.4060505@comcast.net> <42793FB4.2070304@divmod.com>
	<20050504222757.GD11357@sourdust.home.puzzling.org>
	<20050505163242.GJ15714@jabber.org>
	<E9A89BE0-E0DC-4574-B66A-C06A44208F25@redivi.com>
	<8f4623fb050505095457c74d0b@mail.gmail.com>
	<b811ba7305050512061ad573dd@mail.gmail.com>
	<20050505192608.GO15714@jabber.org>
Message-ID: <b811ba7305050512461acd6f08@mail.gmail.com>

On 5/5/05, Peter Saint-Andre <stpeter at jabber.org> wrote:

> On Thu, May 05, 2005 at 12:06:41PM -0700, Jordan Krushen wrote:
> >
> > I was thinking more along the lines of an RSS/blog aggregator on the
> > main site, taking in the developers' (and possibly some users') blogs,
> > and filtering them for relevance.

> Planet Twisted, anyone?
> 
> http://www.planetplanet.org/

Well, see, that needs a link on the Twisted site :)

J.



From itamar at itamarst.org  Thu May  5 13:47:45 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 05 May 2005 15:47:45 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <20050505192608.GO15714@jabber.org>
References: <42792BAC.1050701@rogers.com>
	<1115238466.8476.44.camel@localhost.localdomain>
	<4279383B.4060505@comcast.net> <42793FB4.2070304@divmod.com>
	<20050504222757.GD11357@sourdust.home.puzzling.org>
	<20050505163242.GJ15714@jabber.org>
	<E9A89BE0-E0DC-4574-B66A-C06A44208F25@redivi.com>
	<8f4623fb050505095457c74d0b@mail.gmail.com>
	<b811ba7305050512061ad573dd@mail.gmail.com>
	<20050505192608.GO15714@jabber.org>
Message-ID: <1115322466.8187.33.camel@localhost.localdomain>

On Thu, 2005-05-05 at 14:26 -0500, Peter Saint-Andre wrote:

> Planet Twisted, anyone?

http://planet.twistedmatrix.com has been up for quite a while :)





From bob at redivi.com  Thu May  5 13:54:36 2005
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 5 May 2005 15:54:36 -0400
Subject: [Twisted-Python] Using Twisted inside mod_python
In-Reply-To: <2389d47305050512346f29e7cf@mail.gmail.com>
References: <2389d47305050512346f29e7cf@mail.gmail.com>
Message-ID: <27F22758-A0C9-4415-8378-3A05FB1364E0@redivi.com>


On May 5, 2005, at 3:34 PM, jarrod roberson wrote:

> I want to embed a Twisted Server ( specifically a ZeroConf  
> implemenation I wrote ) into Apache2.
>
> I have it running from a PythonImport and attaching to an  
> interpreter and all that goodness.
> It prints out all the queries and answers it received to the apache  
> log just fine. Apache works just fine serving normal stuff.
>
> The problem is anytime I make any kind of method calls into my  
> global object from a handler it just hangs Apache2 :-(
>
> I have tried it with worker.c and prefork.c and both exhibit the  
> same behavior.
>
> Any suggestions?

I don't think this is going to work.  At all.  Twisted needs more  
control than it's allowed to have from Apache.  You'll need to run  
all your Twisted stuff in a separate process and ProxyPass it to  
Apache (or some similar decoupling).

-bob




From stpeter at jabber.org  Thu May  5 14:05:10 2005
From: stpeter at jabber.org (Peter Saint-Andre)
Date: Thu, 5 May 2005 15:05:10 -0500
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <1115322466.8187.33.camel@localhost.localdomain>
References: <1115238466.8476.44.camel@localhost.localdomain>
	<4279383B.4060505@comcast.net> <42793FB4.2070304@divmod.com>
	<20050504222757.GD11357@sourdust.home.puzzling.org>
	<20050505163242.GJ15714@jabber.org>
	<E9A89BE0-E0DC-4574-B66A-C06A44208F25@redivi.com>
	<8f4623fb050505095457c74d0b@mail.gmail.com>
	<b811ba7305050512061ad573dd@mail.gmail.com>
	<20050505192608.GO15714@jabber.org>
	<1115322466.8187.33.camel@localhost.localdomain>
Message-ID: <20050505200510.GB19191@jabber.org>

On Thu, May 05, 2005 at 03:47:45PM -0400, Itamar Shtull-Trauring wrote:
> On Thu, 2005-05-05 at 14:26 -0500, Peter Saint-Andre wrote:
> 
> > Planet Twisted, anyone?
> 
> http://planet.twistedmatrix.com has been up for quite a while :)

I stand corrected. :-)

Peter




From bob at redivi.com  Thu May  5 14:05:37 2005
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 5 May 2005 16:05:37 -0400
Subject: [Twisted-Python] Using Twisted inside mod_python
In-Reply-To: <2389d473050505130126da9815@mail.gmail.com>
References: <2389d47305050512346f29e7cf@mail.gmail.com>
	<27F22758-A0C9-4415-8378-3A05FB1364E0@redivi.com>
	<2389d473050505130126da9815@mail.gmail.com>
Message-ID: <F6362F3A-7BA8-4479-AEAB-47135C58D182@redivi.com>


On May 5, 2005, at 4:01 PM, jarrod roberson wrote:

>
>
> On 5/5/05, Bob Ippolito <bob at redivi.com> wrote:
> On May 5, 2005, at 3:34 PM, jarrod roberson wrote:
>
> > I want to embed a Twisted Server ( specifically a ZeroConf
> > implemenation I wrote ) into Apache2.
> >
> > I have it running from a PythonImport and attaching to an
> > interpreter and all that goodness.
> > It prints out all the queries and answers it received to the apache
> > log just fine. Apache works just fine serving normal stuff.
> >
> > The problem is anytime I make any kind of method calls into my
> > global object from a handler it just hangs Apache2 :-(
> >
> > I have tried it with worker.c and prefork.c and both exhibit the
> > same behavior.
> >
> > Any suggestions?
>
> I don't think this is going to work.  At all.  Twisted needs more
> control than it's allowed to have from Apache.  You'll need to run
> all your Twisted stuff in a separate process and ProxyPass it to
> Apache (or some similar decoupling).
>
> -bob
>
>
> that was what I was afraid of but did not want to hear :-(
>
> can I at least use a Perspective Broker client from a handler you  
> think?

No, not unless you write a Perspective Broker client that doesn't  
depend on Twisted.

-bob




From mary-twisted at puzzling.org  Thu May  5 14:50:02 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Fri, 6 May 2005 06:50:02 +1000
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <b811ba7305050512461acd6f08@mail.gmail.com>
References: <1115238466.8476.44.camel@localhost.localdomain>
	<4279383B.4060505@comcast.net> <42793FB4.2070304@divmod.com>
	<20050504222757.GD11357@sourdust.home.puzzling.org>
	<20050505163242.GJ15714@jabber.org>
	<E9A89BE0-E0DC-4574-B66A-C06A44208F25@redivi.com>
	<8f4623fb050505095457c74d0b@mail.gmail.com>
	<b811ba7305050512061ad573dd@mail.gmail.com>
	<20050505192608.GO15714@jabber.org>
	<b811ba7305050512461acd6f08@mail.gmail.com>
Message-ID: <20050505205002.GG25625@sourdust.home.puzzling.org>

On Thu, May 05, 2005, Jordan Krushen wrote:
> On 5/5/05, Peter Saint-Andre <stpeter at jabber.org> wrote:
> > Planet Twisted, anyone?
> >  
> > http://www.planetplanet.org/
> 
> Well, see, that needs a link on the Twisted site :)

The Planet software itself, unless it's had a very radical re-write very
recently, does not use Twisted, so there's no reason to link to the
software.

http://planet.twistedmatrix.com/ does exist (as Itamar has already
pointed out) and could probably do with a link from somewhere.

-Mary



From mary-twisted at puzzling.org  Thu May  5 14:51:54 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Fri, 6 May 2005 06:51:54 +1000
Subject: [Twisted-Python] Re: Evangelism notes...
In-Reply-To: <2mmzr9wo46.fsf@starship.python.net>
References: <42792BAC.1050701@rogers.com> <42793FB4.2070304@divmod.com>
	<60ed19d40505041657480dc31c@mail.gmail.com>
	<200505060216.24080.anthony@interlink.com.au>
	<2mmzr9wo46.fsf@starship.python.net>
Message-ID: <20050505205154.GH25625@sourdust.home.puzzling.org>

On Thu, May 05, 2005, Michael Hudson wrote:
> Python appears to have more worker bees than Twisted who do the kind
> of general work radix was asking for, despite none of them being paid
> to do it; this is probably mostly a function of just being a bigger,
> more visible project (after all, every Twisted user is a Python user).

This probably shouldn't be assumed though. If that's all it is, OK,
damn. But if there's something about the Python community which is
qualitatively different and which encourages the kind of work being
discussed, Twisted should consider emulating it.

-Mary



From srichter at cosmos.phy.tufts.edu  Thu May  5 15:22:50 2005
From: srichter at cosmos.phy.tufts.edu (Stephan Richter)
Date: Thu, 5 May 2005 17:22:50 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <1115238976.8476.54.camel@localhost.localdomain>
References: <42792BAC.1050701@rogers.com>
	<1115238976.8476.54.camel@localhost.localdomain>
Message-ID: <200505051722.51259.srichter@cosmos.phy.tufts.edu>

On Wednesday 04 May 2005 16:36, Itamar Shtull-Trauring wrote:
> On Wed, 2005-05-04 at 16:08 -0400, Mike C. Fletcher wrote:
> > Don't know if the other project will be rewritten as well.  Given
> > decision on this one, I'd imagine it will.  I'd also predict that
> > Twisted is now Techne non Grata wrt any new development where it's not
> > an explicit requirement (given that we're going to be eating costs on
> > rewriting a project to eliminate it).  Certainly I'll have a hard sell
> > going forward.
>
> Do you have any suggestions on how we can improve things? Besides "write
> more docs" which is basically always a given.

When we developed Zope 3, we put **huge** emphasis on documentation. As 
mentioned in the other mail, we made it a policy. Here are the things we did:

- We (mainly Jim) used a slide show and later plain text files to document how 
we imagined a feature to work. Basically we wrote Sci-Fi stories. Thus 
documentation was available before code.

- We also used a proposal process for larger features. This had a similar 
effect to the Sci-Fi presentation in that it documented the API before 
implementation. Many proposal authors made a point to update the proposal 
after the implementation, so that they would reflect the latest API. 

- We decided that Interfaces would be used for API documentation and public 
interfaces would always be found in the package's interfaces.py module, so 
people would always know where to go.

- We later developed a very custom (on purpose) API doc tool that would not 
only document interfaces, but their interaction with the system. For every 
interface you can see its adapters and views, or which utility provides the 
inspected interface. The doc tool was later enhanced to also provide 
documentation for any object, ZCML and plain text files.

- First we used regular unit tests for testing documentation, but eventually 
moved to file-based doctests, since they fulfill both XP requirements for 
tests: testing and documenting. I can't overstress the success. Every 
recently created or refactored package has now a README.txt file clearly 
documenting the API and it is never outdated, because it is part of the test 
suite. 

- We had two people write a book and find a publisher. My book is even 
semi-freely available as one can use it for non-commercial purposes.

So, what's next? This E-mail is not suppose to show what's Zope 3 did better 
than Twisted or vice versa, but demonstrate some concrete things that can be 
done to improve the documentation situation:

- I strongly suggest that Twisted starts using file-based doctests. I have 
demonstrated how this can be done with the current trial test runner in the 
following patch submission: http://twistedmatrix.com/bugs/issue1000

Also, I think twisted needs to start distinguishing between unit and 
functional tests.

- Develop a tool that clearly shows the available adapters for a given 
interface. epyrun will not pick this up, so it is important.

- Maybe it would be good to have a documentation sprint; since most (a lot) of 
the Twisted developers are in Boston, it would be good to do it here; I would 
be willing to come and help people getting started with writing file-based 
doctests.

Regards,
Stephan
-- 
Stephan Richter
CBU Physics & Chemistry (B.S.) / Tufts Physics (Ph.D. student)
Web2k - Web Software Design, Development and Training



From grant at osafoundation.org  Thu May  5 15:44:46 2005
From: grant at osafoundation.org (Grant Baillie)
Date: Thu, 5 May 2005 14:44:46 -0700
Subject: [Twisted-Python] Hanging test cases (Was: Evangelism notes...)
In-Reply-To: <3309BAEB-4EAF-4CBD-9C09-47893BBD7E9A@redivi.com>
References: <42792BAC.1050701@rogers.com>
	<C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>
	<1D4A97FB-6815-49A8-B570-BC569F7CDE98@osafoundation.org>
	<3309BAEB-4EAF-4CBD-9C09-47893BBD7E9A@redivi.com>
Message-ID: <E3CBCA0E-0001-4D41-9544-8B715AFB243C@osafoundation.org>

On May 5, 2005, at 12:26 PM, Bob Ippolito wrote:

>> I'm not sure if this is a problem in python, in twisted's use of  
>> threading, or in trial.deferredResult, though.
>>
>
> Almost definitely a combination of 2 and 3, with 3 being the one  
> really at fault.  Trial is horribly, horribly broken by design and  
> it's really just an accident that it works at all.  The  
> expectations a lot of the tests have about the reactor are also  
> broken, but that's mostly just a consequence of trial sucking.

Thanks for the info. I'll go ahead and file a bug, unless someone  
tells me not to. FWIW, I'm happy with my workaround (I'm really only  
using it to keep my doc/unittests relatively uncomplicated).

--Grant

Grant Baillie
Open Source Applications Foundation
http://www.osafoundation.org






From andy at thecablelounge.com  Thu May  5 20:01:19 2005
From: andy at thecablelounge.com (Andy Gayton)
Date: Fri, 06 May 2005 12:01:19 +1000
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <42792BAC.1050701@rogers.com>
References: <42792BAC.1050701@rogers.com>
Message-ID: <427ACFEF.4000100@thecablelounge.com>


Hey Mike, this thread has been given a thrashing and should probably be 
let go off, but it hits a pretty emotional issue for me - so here goes 
my 2c's worth :)

I've been in similiar situations before, always with selling 
(evangelising) python though - I dream of the day I can be selling 
twisted over vanilla python :)

Mike C. Fletcher wrote:
>                 + Even the Finger sample is mystifyingly complex if you
>                   jump into it at the end of the process

certainly - that's why there is the Finger sample - your lead programmer 
never took 2 hours to work through the Finger sample?  I often find this 
with python -

me: 'these problems we're having - they go away if you use python'

reluctant workplace: 'but we don't have the skills in house to support 
python'

me: 'python's has be designed to be useful as an educational language - 
i've found programmers can be at least as productive as they are 
currently using python within 3 days.  here are some great tutorial links.'

reluctant workplace: 'we'll see'

me: 'these problems we're having - they go away if you use python'

reluctant workplace: 'but we don't have the skills in house to support 
python'

me: 'did you even open one of those tutorial links i sent you?'

reluctant workplace: 'no'

>                 + Probably would have been better to start him on the
>                   much larger project, where Twisted represents far less
>                   of the overall complexity of the application.

i've found it a losing battle trying to spoon feed even bright people 
who aren't eager to try out new and interesting ways of solving problems.

>           o What do we call to shutdown the threadpool?  I don't
>             remember, let's check the reference docs... 20 minutes of
>             searching for the 2.0 reference docs (with the entire
>             company watching this)... finally ask on IRC... told to
>             build them myself and contribute them.  Cute, but didn't
>             really drive home the whole "robust, professional,
>             well-documented platform on which to develop business
>             systems" meme as much as I'd hoped.

Not having a go at all you at all - but I don't believe there is a 
solution on earth, paid for, or volunteer, you would have come out ok 
in this situation.

It sounds like your company had an axe to grind.

I can't think of many paid support contracts I've had access to that 
could even get a problem being worked on within 20mins - let alone solved.

> I could have done better at evangelising. In the end, though, I had to
> concede that stripping out Twisted and writing the code himself would
> probably be faster and easier in the long run than trying to work around
> problems in an under-documented "foreign" system (again, from his
> viewpoint).

possibly, twisted can't always be the right hammer.  vanilla python is 
still brilliant.  just hoping your company hasn't shut the door for when 
twisted could be needed.

good luck in the future, for both of us:)

Andy.



From exarkun at divmod.com  Fri May  6 00:00:50 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 06 May 2005 06:00:50 GMT
Subject: [Twisted-Python] Hanging test cases (Was: Evangelism notes...)
In-Reply-To: <C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>
Message-ID: <20050506060050.15422.1130296805.divmod.quotient.21435@ohm>

On Thu, 5 May 2005 11:49:20 -0700, Grant Baillie <grant at osafoundation.org> wrote:
>On May 4, 2005, at 1:08 PM, Mike C. Fletcher wrote:
>>     * Project was delivered, paid for, and has been running in
>>       production for a few weeks, but 2 reported bugs cropped up
>>           o To fix one, needed to update to 2.0 (deferred object
>>             cleanup)... this caused rather a lot of upset, as the
>>             sysadmins were upset about such a huge package needing  to be
>>             updated (and they tried to do just the core packages  first,
>>             which doubled the work-load involved in preparing that
>>             update versus using Sumo)
>>           o Fixing the other was no big deal, except that something in
>>             2.0 changed how the test-suite was running so that it now
>>             hung on completion...
>
>Did you ever figure out why? I have just run into similar behaviour  myself 
>after upgrading to 2.0. Here's an example that hangs for me on  Mac OS X 
>(10.4) after the final print:
>
>---------------
>from twisted.internet import reactor, defer, threads
>from twisted.trial.util import deferredResult
>from twisted.web.client import getPage
>import time
>
>
>def itFired(result):
>     print "Deferred fired: %s" % result
>     return result
>
>d = getPage("http://www.example.com/").addBoth(itFired)
>
>print "Returned: %s" % deferredResult(d)
>print "Done; exiting"
>---------------
>
>
>So far as I can tell, the python threading module has an atexit  handler 
>that's hanging. Also, if I replace the deferToThread() with a 
>twisted.web.client.getPage(), I still get the same hang.

  So as to be entirely clear, I'm going to limit this response to just one idea.  If more details are desired, I can post a followup later (as long as someone asks for one).  Anyway, for now, here's the meat of this post:


      Do

      _____not_____

      use

      deferredResult

      (or deferredError or wait)

  As someone who pushed for their existence, I apologize.

  Jp



From teratorn at twistedmatrix.com  Fri May  6 01:59:57 2005
From: teratorn at twistedmatrix.com (Eric Mangold)
Date: Fri, 06 May 2005 17:59:57 +1000
Subject: [Twisted-Python] Blocking on deferreds during unit tests (e.g.
	deferredResult)
Message-ID: <op.sqcgh7jny3d107@aspen>

I'm starting a new thread on this because It's very important to me, and  
we need to have some kind of resolution on this issue.

On Fri, 06 May 2005 16:00:50 +1000, Jp Calderone <exarkun at divmod.com>  
wrote:
[...]
>       Do
>
>       _____not_____
>
>       use
>
>       deferredResult
>
>       (or deferredError or wait)
>
>   As someone who pushed for their existence, I apologize.
>
>   Jp

I would like to have more details on this considering that I use  
deferredResult and deferredError quite extensively, and very much  
appreciate their existence. If methods suck this bad we need to deprecate  
them and provide something better.

Is there a better way to synchronously spin the reactor until a deferred  
fires? There any many cases in which I prefer to do that instead of  
returning a deferred from the test case method.

-Eric



From sergtrejo at gmail.com  Fri May  6 04:08:26 2005
From: sergtrejo at gmail.com (Sergio Trejo)
Date: Fri, 6 May 2005 00:08:26 -1000
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <8875358E-5653-407A-B21E-7B9A4C0EAE2F@redivi.com>
References: <42792BAC.1050701@rogers.com>
	<1A5DF4BE-AEE0-43E6-B9EA-DE3E29DF0B70@redivi.com>
	<4279BD80.9080702@twistedmatrix.com>
	<8875358E-5653-407A-B21E-7B9A4C0EAE2F@redivi.com>
Message-ID: <7c3d693605050603087e80835@mail.gmail.com>

On 5/5/05, Bob Ippolito <bob at redivi.com> wrote:
> I'm not talking about open source software, I'm talking about
> deploying Twisted in the real world.
> 
> -bob

I'm confused. Could you provide some semantics behind your definition
of the "real world"? Can open source software be used in this "real
world"?

Serg



From ronaldoussoren at mac.com  Fri May  6 05:05:56 2005
From: ronaldoussoren at mac.com (Ronald Oussoren)
Date: Fri, 6 May 2005 13:05:56 +0200
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <7c3d693605050603087e80835@mail.gmail.com>
References: <42792BAC.1050701@rogers.com>
	<1A5DF4BE-AEE0-43E6-B9EA-DE3E29DF0B70@redivi.com>
	<4279BD80.9080702@twistedmatrix.com>
	<8875358E-5653-407A-B21E-7B9A4C0EAE2F@redivi.com>
	<7c3d693605050603087e80835@mail.gmail.com>
Message-ID: <A9B1EDF9-A31B-4E23-9A57-E3AB9576CD5E@mac.com>


On 6-mei-2005, at 12:08, Sergio Trejo wrote:

> On 5/5/05, Bob Ippolito <bob at redivi.com> wrote:
>
>> I'm not talking about open source software, I'm talking about
>> deploying Twisted in the real world.
>>
>> -bob
>>
>
> I'm confused. Could you provide some semantics behind your definition
> of the "real world"? Can open source software be used in this "real
> world"?

When I install software in a production environment I prefer self- 
contained installations. That increases diskusage, but takes away  
some headages: what if server1 requires Twisted 1.3 and doesn't work  
with Twisted 2.0 and server2 requires Twisted 2.0?

Ronald




From grimmtooth at gmail.com  Wed May  4 18:40:34 2005
From: grimmtooth at gmail.com (Jeff Grimmett)
Date: Wed, 4 May 2005 20:40:34 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <1115238976.8476.54.camel@localhost.localdomain>
References: <42792BAC.1050701@rogers.com>
	<1115238976.8476.54.camel@localhost.localdomain>
Message-ID: <8f4623fb050504174011b553e3@mail.gmail.com>

On 5/4/05, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
> 
> 
> Do you have any suggestions on how we can improve things? Besides "write
> more docs" which is basically always a given.
> 

OK, I'll bite at that one. Let me preface it with these two points:

1) On my development team, I'm the QA lead. We've encountered this same 
issue, with a different face, in the form of the lack of sufficient design 
documentation and code documentation of changes after the fact. It has 
caused serious issues down the road, both in software quality and in the 
quality of testing that QA provided. We've implemented some solutions that 
appear to work, and it's from that series of experiences that I am speaking.

2) I BELIEVE that this solution has been considered and discarded. I have 
suspicions why, which I will not speak of, but it's so OBVIOUS that I can't 
believe that a group of intelligent people would not have considered it. So 
I fear that I will be speaking to a wall here. So be it. 

My unsolicited advice: write the docs either before or during development. 

AFTER development is too late. Most developers have no interest in 
documentation (it's genetic or something) and want to move on to more "good 
stuff." It's OK, I understand, as everyone that enjoys coding understands it 
at a gut level. But the issue needs to be acknowledged before it can be 
dealt with.

The gist of the response I often seen with regards to Twisted documentation 
is along the lines of "I don't see the issue here - if you don't like the 
docs, write some." It seems to be a denial of the responsibility to write 
good documentation. *** I'm not saying that is in fact the case! *** I am 
saying that there is a perception. As one of my past bosses told me, 
"perception is everything in some circumstances." 

Here are the pitfalls (as I see them, YMMV) of retroactively writing 
documentation:

1) If the person writing the docs is not the person that designed and 
implemented, the *intent* of the class/module/etc being documented is not 
clear.

2) If the person writing the docs is not the person that implemented, then 
the person that implemented must be found, interrogated, and gone back to 
multiple times to get the docs right. (And if getting it right is not the 
goal, why bother?)

3) If the intent of the module/class/etc is not known beforehand, how does 
one determine if it is working right?

I don't mean to criticize, but this is in my eyes the greatest weakness of 
Twisted. My experiences with it, when it works, is that it works 
wonderfully. I can't commit to using it for anything critical, though, 
because I spend more time working around such gems as """I am a connector""" 
than I do in getting anything useful done.

I tell you: if it gets to the point where I SERIOUSLY consider writing my 
own simple frame work to get a job done as a TIME SAVING MEASURE then there 
is a problem, and I do not believe I am alone in this perception.

Take this in the spirit it is offered. I want to use Twisted for what I do, 
and I want it to succeed. 

-- 

Best,

Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050504/eb9dccd1/attachment.html>

From grimmtooth at gmail.com  Wed May  4 18:51:05 2005
From: grimmtooth at gmail.com (Jeff Grimmett)
Date: Wed, 4 May 2005 20:51:05 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <42793FB4.2070304@divmod.com>
References: <42792BAC.1050701@rogers.com>
	<1115238466.8476.44.camel@localhost.localdomain>
	<4279383B.4060505@comcast.net> <42793FB4.2070304@divmod.com>
Message-ID: <8f4623fb0505041751249bd4b6@mail.gmail.com>

On 5/4/05, Glyph Lefkowitz <glyph at divmod.com> wrote:

> where do these helpful people come from for other projects? I would
> estimate that Twisted has tens of thousands of users by now, but the
> community is still oddly silent.


My feeling is that a big part of the problem is that Twisted is so darned 
obscure in places that most people don't feel up to the task. Other - far, 
far lesser, of course - projects get enthusiastic help because they are less 
complex and, well, mystical (for lack of a better word) than Twisted.

For example:

1) I create a subclass of an existing Twisted class in order to add some 
helpful debugging.
2) I run my code but... the debugging code is not being executed!
3) But ... if that's the case, the code shouldn't even RUN!
4) Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!!!!

I had just such an experience. Grumpy, I was.

But it illustrates the point: I'm no idiot (last I checked). But I cannot 
explain how it is possible that the code even worked, and thus I feel 
completely inadequate to the task of even STARTING to help with 
documentation. Where should I start? If I can't explain the workings of a 
ten-line web server, what hope do I have of providing accurate input to 
documentation? 

-- 

Best,

Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050504/756bdf98/attachment.html>

From glyph at divmod.com  Fri May  6 12:24:46 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Fri, 06 May 2005 14:24:46 -0400
Subject: [Twisted-Python] Blocking on deferreds during unit tests (e.g.
	deferredResult)
In-Reply-To: <op.sqcgh7jny3d107@aspen>
References: <op.sqcgh7jny3d107@aspen>
Message-ID: <427BB66E.5070509@divmod.com>

Eric Mangold wrote:
> I'm starting a new thread on this because It's very important to me, 
> and  we need to have some kind of resolution on this issue.

> Is there a better way to synchronously spin the reactor until a 
> deferred  fires?

Yep.  Write a unit test framework that uses Stackless and create a 
tasklet for each deferred that you want to run.

> There any many cases in which I prefer to do that 
> instead of  returning a deferred from the test case method.

Without language support, this is an exercise in futility.  Don't do it. 
  Trial is broken, and everyone laments it, but the *reason* that it's 
broken (the root cause, anyway, if not the only reason) is that it bends 
over backwards to accomodate this use-case when _every_ _other_ _part_ 
of Twisted is very explicit that this is a bad, bad thing to do and you 
should never do it because it doesn't work.

I am sorry that so many people want to block on deferreds in test 
methods, but I can guarantee you that support for doing it *WILL* be 
removed in a future version of Twisted.  If we don't eventually kill 
this feature, our test suite is never going to work reliably.



From projects at reedflute.com  Fri May  6 12:49:36 2005
From: projects at reedflute.com (Eugene Coetzee)
Date: Fri, 06 May 2005 20:49:36 +0200
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <8f4623fb050504174011b553e3@mail.gmail.com>
References: <42792BAC.1050701@rogers.com>	<1115238976.8476.54.camel@localhost.localdomain>
	<8f4623fb050504174011b553e3@mail.gmail.com>
Message-ID: <427BBC40.4060702@reedflute.com>

Jeff Grimmett wrote:

>
> My unsolicited advice: write the docs either before or during 
> development.
>
dont know why you are so reluctant to say that. It also saves one from 
doing a lot of unproductive coding when the basic design can be put down 
on paper and analysed by peers to eliminate bad ideas from the beginning 
- I suppose that was the original motivation for something like UML - 
please don't shoot me :-)

>
> Here are the pitfalls (as I see them, YMMV) of retroactively writing 
> documentation:
>
> 1) If the person writing the docs is not the person that designed and 
> implemented, the *intent* of the class/module/etc being documented is 
> not clear.
>
> 2) If the person writing the docs is not the person that implemented, 
> then the person that implemented must be found, interrogated, and gone 
> back to multiple times to get the docs right. (And if getting it right 
> is not the goal, why bother?)
>
> 3) If the intent of the module/class/etc is not known beforehand, how 
> does one determine if it is working right?
>
That sums it up pretty well.

> I don't mean to criticize, but this is in my eyes the greatest 
> weakness of Twisted. My experiences with it, when it works, is that it 
> works wonderfully.

Twisted is a superb framework. Once I took a few days of and hacked my 
way through its enigmatic depths I also whispered to myself ... 
eureka... I'm not sure though that documentation is the *only* problem. 
My experience tells me that basic concepts around the "networking layer" 
is intimidating  to a lot of  developers.

> I tell you: if it gets to the point where I SERIOUSLY consider writing 
> my own simple frame work to get a job done as a TIME SAVING MEASURE 
> then there is a problem, and I do not believe I am alone in this 
> perception.
>
I normally ask myself how long will it take to understand this stuff - 
given the state of the documentation. Then I compare it to how long it 
would take to write it myself. Lets be frank - "open source" assumes to 
an extent that you would actually "read the source" as part of the 
documentation. To me the detail (like the API) is not the problem.

I would love to see high level conceptual documentation to give me a 
better idea of  basic concepts  like the "reactor", "application", 
"service", "transport","protocol", "factory" - what they are supposed to 
do and how they are  to fit together.

regards,

Eugene Coetzee

Web                 -> www.reedflute.com
=============================================== 




From grimmtooth at gmail.com  Fri May  6 13:29:50 2005
From: grimmtooth at gmail.com (Jeff Grimmett)
Date: Fri, 6 May 2005 15:29:50 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <427BBC40.4060702@reedflute.com>
References: <42792BAC.1050701@rogers.com>
	<1115238976.8476.54.camel@localhost.localdomain>
	<8f4623fb050504174011b553e3@mail.gmail.com>
	<427BBC40.4060702@reedflute.com>
Message-ID: <8f4623fb0505061229ce3b57@mail.gmail.com>

On 5/6/05, Eugene Coetzee <projects at reedflute.com> wrote:

> Twisted is a superb framework. Once I took a few days of and hacked my
> way through its enigmatic depths I also whispered to myself ...
> eureka... I'm not sure though that documentation is the *only* problem.


Maybe maybe not. But right now the documentation is like a lightning rod. No 
matter what your agenda, if you want to (for whatever reason) discourage 
against the use of Twisted in a project, all you have to do is point to the 
documentation and the frazzled bunch of geeks trying to figure it all out 
:-)

My experience tells me that basic concepts around the "networking layer"
> is intimidating to a lot of developers.


It would not hurt to have some nice top level documents to address that. 
That's the sort of thing you'd derive from design documentation. 

I normally ask myself how long will it take to understand this stuff -
> given the state of the documentation. Then I compare it to how long it
> would take to write it myself. Lets be frank - "open source" assumes to
> an extent that you would actually "read the source" as part of the
> documentation. To me the detail (like the API) is not the problem.


I would have to disagree on that on a fine point. Twisted is not "open 
source software that happens to be a network framework". It is a "network 
framework that is also open source software". I didn't start looking at 
Twisted because it was open source. I started looking at it because I was 
interested in a better answer than I currently had for networking.

AS SUCH ... I expect the API, like any library I use, to be properly 
documented so I can start using it. I do not wish to investigate the source 
code as a recreational thing. I have a job to do and I want to get it done 
on time, on budget, and done well. Making source code delving a prerequisite 
to use of the software is bad form, in my opinion.

Yes, I find having the source code useful. Usually it's because the 
documentation leaves a fine point unclear; examining the source may resolve 
the confusion. But the source code should not be a crutch to support 
incomplete documentation - not if you want to go toe to toe with the big 
dogs.

I would love to see high level conceptual documentation to give me a
> better idea of basic concepts like the "reactor", "application",
> "service", "transport","protocol", "factory" - what they are supposed to
> do and how they are to fit together.


:: nod nod nod nod ::

-- 

Best,

Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050506/179f548e/attachment.html>

From srichter at cosmos.phy.tufts.edu  Fri May  6 15:03:44 2005
From: srichter at cosmos.phy.tufts.edu (Stephan Richter)
Date: Fri, 6 May 2005 17:03:44 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <8f4623fb050504174011b553e3@mail.gmail.com>
References: <42792BAC.1050701@rogers.com>
	<1115238976.8476.54.camel@localhost.localdomain>
	<8f4623fb050504174011b553e3@mail.gmail.com>
Message-ID: <200505061703.45357.srichter@cosmos.phy.tufts.edu>

On Wednesday 04 May 2005 20:40, Jeff Grimmett wrote:
> My unsolicited advice: write the docs either before or during development.

That's exactely what we do in Zope 3 and I have been advocating this in all my 
mails with concrete suggestions.

Regards,
Stephan
-- 
Stephan Richter
CBU Physics & Chemistry (B.S.) / Tufts Physics (Ph.D. student)
Web2k - Web Software Design, Development and Training



From db3l at fitlinxx.com  Fri May  6 15:11:12 2005
From: db3l at fitlinxx.com (David Bolen)
Date: 06 May 2005 17:11:12 -0400
Subject: [Twisted-Python] Re: Hanging test cases (Was: Evangelism notes...)
References: <C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>
	<20050506060050.15422.1130296805.divmod.quotient.21435@ohm>
Message-ID: <uk6mcjc0f.fsf@fitlinxx.com>

Jp Calderone <exarkun at divmod.com> writes:

>   So as to be entirely clear, I'm going to limit this response to
>   just one idea.  If more details are desired, I can post a followup
>   later (as long as someone asks for one).  Anyway, for now, here's
>   the meat of this post:
> 
> 
>       Do
> 
>       _____not_____
> 
>       use
> 
>       deferredResult
> 
>       (or deferredError or wait)
> 
>   As someone who pushed for their existence, I apologize.

Just to be clear, IMHO, I'd qualify this by saying something like in
final production code or non-test code or something.  We make heavy
use of these functions in our unit tests and they are invaluable ways
to simplify the structure of such tests when each test is the only
thing going on and there's no problem iterating the reactor beneath a
blocking call.  We've also cheated and used them for pure startup code
in GUI apps that are quick 'n dirty example interfaces into our main
Twisted system, and again they can simplify such efforts.

But I do agree they really have no place in final production code.

-- David




From projects at reedflute.com  Fri May  6 15:18:37 2005
From: projects at reedflute.com (Eugene Coetzee)
Date: Fri, 06 May 2005 23:18:37 +0200
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <8f4623fb0505061229ce3b57@mail.gmail.com>
References: <42792BAC.1050701@rogers.com>	<1115238976.8476.54.camel@localhost.localdomain>	<8f4623fb050504174011b553e3@mail.gmail.com>	<427BBC40.4060702@reedflute.com>
	<8f4623fb0505061229ce3b57@mail.gmail.com>
Message-ID: <427BDF2D.2080203@reedflute.com>

Jeff Grimmett wrote:

>  
> Yes, I find having the source code useful. Usually it's because the 
> documentation leaves a fine point unclear; examining the source may 
> resolve the confusion.

Perhaps we disagree radically about the usefulness of having the source 
code,being able to read it, and the ablility to recompile and rebuild 
the framework yourself.

> But the source code should not be a crutch to support incomplete 
> documentation - not if you want to go toe to toe with the big dogs.
>
I googled around with "networking framework" a few times in my life. Who 
are the "big dogs"  when it comes to  networking frameworks. In the past 
I wrote everything myself using raw C++ sockets,  MFC or vanilla 
java.net. I have also been bitten badly by the "big dogs" - having to 
dig through a MSDN "knowledge base" of thousands of "known bugs" before 
I finally discovered that it *could* be fixed with next release. I 
honestly cannot say that Twisted is outclassed in this area, at least I 
can fix the bugs myself.

Eugene Coetzee

Web                 -> www.reedflute.com
=============================================== 




From bob at redivi.com  Fri May  6 15:40:06 2005
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 6 May 2005 17:40:06 -0400
Subject: [Twisted-Python] Re: Hanging test cases (Was: Evangelism notes...)
In-Reply-To: <uk6mcjc0f.fsf@fitlinxx.com>
References: <C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>
	<20050506060050.15422.1130296805.divmod.quotient.21435@ohm>
	<uk6mcjc0f.fsf@fitlinxx.com>
Message-ID: <6EA197D2-A573-4175-A0FB-9C5005389D68@redivi.com>

On May 6, 2005, at 5:11 PM, David Bolen wrote:

> Jp Calderone <exarkun at divmod.com> writes:
>
>
>>   So as to be entirely clear, I'm going to limit this response to
>>   just one idea.  If more details are desired, I can post a followup
>>   later (as long as someone asks for one).  Anyway, for now, here's
>>   the meat of this post:
>>
>>
>>       Do
>>
>>       _____not_____
>>
>>       use
>>
>>       deferredResult
>>
>>       (or deferredError or wait)
>>
>>   As someone who pushed for their existence, I apologize.
>>
>
> Just to be clear, IMHO, I'd qualify this by saying something like in
> final production code or non-test code or something.  We make heavy
> use of these functions in our unit tests and they are invaluable ways
> to simplify the structure of such tests when each test is the only
> thing going on and there's no problem iterating the reactor beneath a
> blocking call.  We've also cheated and used them for pure startup code
> in GUI apps that are quick 'n dirty example interfaces into our main
> Twisted system, and again they can simplify such efforts.
>
> But I do agree they really have no place in final production code.

Sorry, but Jp is right.  They have no place in any code.  Their  
existence is a mistake and should be corrected ASAP.  They severely  
violate the reactor interface.

Something almost as easy would probably be waitDeferred and  
deferredGenerator in twisted.internet.defer (I don't know when they  
went in, but they're probably in 2.0).  See the waitDeferred's doc  
string for information.

The only way they could be "fixed" is if their implementation did  
something more like this:

def deferredResult(d):
     """untested because this code should not exist"""
     res = []
     def cb(result):
         res.append(result)
         reactor.stop()
     d.addBoth(cb)
     reactor.run()
     res = res.pop()
     if isinstance(res, Failure):
        failure.raiseException()
     return res

However, if their implementation did that, then the tests would  
probably break (because the tests are WRONG) or be a hell of a lot  
slower and even less reliable because there is no more timeout.

-bob




From michal at dkp.com  Fri May  6 16:07:40 2005
From: michal at dkp.com (Michal Eldar)
Date: Fri, 06 May 2005 18:07:40 -0400
Subject: [Twisted-Python] adbapi, PostgreSQL and Unicode
Message-ID: <427BEAAC.2060208@dkp.com>

I keep getting - Unhandled error in Deferred

I'm trying to perform an INSERT on my db (using adbapi with *pgdb* module).
INSERT which comprises *Unicode* string
e.g. -
unicodeChar1 = u"Character=[\N{GREEK CAPITAL LETTER GAMMA}]"

the db is defined to Unicode
*client_encoding* value is set to *Unicode* when checking its value in 
*cp_openfun *called function
execute the same INSERT directly with *pgdb *works great

Does anyone has experience with adbapi with Unicode db ?!?!
Do I need to define something special for this to happen ??

Thanks for your help,
Michal Eldar




From db3l at fitlinxx.com  Fri May  6 16:51:06 2005
From: db3l at fitlinxx.com (David Bolen)
Date: 06 May 2005 18:51:06 -0400
Subject: [Twisted-Python] Re: Hanging test cases (Was: Evangelism notes...)
References: <C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>
	<20050506060050.15422.1130296805.divmod.quotient.21435@ohm>
	<uk6mcjc0f.fsf@fitlinxx.com>
	<6EA197D2-A573-4175-A0FB-9C5005389D68@redivi.com>
Message-ID: <ufyx0j7dw.fsf@fitlinxx.com>

Bob Ippolito <bob at redivi.com> writes:

with respect to deferredResult/deferredError:

> Sorry, but Jp is right.  They have no place in any code.  Their
> existence is a mistake and should be corrected ASAP.  They severely
> violate the reactor interface.

Hmm, then perhaps it's the reactor interface that could use some
improving rather than removing this high level functionality?  Or is
everyone just saying that the implementation (versus the concept) of
the current functions is done wrong.  Or maybe I'm just missing what
major mess having this sort of interface is exposing.

Given Glyph's recent response, I might also clarify that while our
heaviest use of these functions are within unit tests, we aren't using
trial, so any linkage between poor behavior of these implementations
and trial is not something I'm referring to or worry about breaking.

What I do think is that there is a very good and practical reason to
be able to unwind deferrable operations into a blocking structure for
a wide variety of test conditions, and losing that capability would
make writing tested Twisted code (at least for our situation) much
more fragile and error prone (the tests themselves).  And that's not
quite the same as the newer waitForDeferred stuff in 2.0 that
integrates with generators.  While slick, it still doesn't work as
well for easily maintainable tests in many of our situations.

If there's a problem with the current implementation, or with how the
current implementation may abuse the public reactor interface, then
I'm all for cleaning it up, fixing it or making it part of the reactor
itself in some way, as long as the public mechanism remains.  I mean,
after all, at some point the reactor itself really is just sitting
there iterating itself, so I find little reason not to permit some
access to hook into that mechanism when appropriate.

For example, in our system we may very heavy use of our own components
all of which implement their entire API via deferrable interfaces.
Interacting with multiple such components during a test is thus a
multi-stage deferrable process.  Having these blocking calls permits a
test method to say something like:

    self.user = deferredResult(self.umgr.user())
    self.user.email = 'test at dom.ain'
    deferredResult(self.umgr.saveUser(self.user))

in order to test being able to save a new user object into the system.
Part of the test is that the calls themselves should succeed, so the
natural result of deferredResult raising an exception on an errback is
just right.  And while clearly readable, the test still tests that the
deferrable aspect of the interfaces will work properly (e.g, with
deferredResult generating the exception if it doesn't get passed a
deferred).

Sure, I could write the user() and saveUser() calls with a callback
chain, and then I'd have to nest the call to saveUser based on the
user callback, probably something like:

    def fail(failure):
        self.fail(failure)

    def gotUser(user):
        self.user = user
        self.user.email = 'test at dom.ain'
        return self.umgr.saveUser(self.user)

    d = self.umgr.user()
    d.addCallback(gotUser)
    d.addErrback(fail)

but I see no advantage (*in the context of such a test*) to doing it
this way, and I see a real loss of clarity and maintainability for the
test itself.

Since each component in our system has a deferrable interface, any
test which is going to interact with multiple components would quickly
evolve a fairly deep callback system in the test, without much benefit
that I can see.

I'm all for fixing an implementation or cleaning up an interface if
it's being misused, but I certainly find value in the particular
external interface that deferred{Result,Error} deliver - so much so
that we would (and in fact did) implement them locally before finding
that they already existed.

-- David




From bob at redivi.com  Fri May  6 17:33:16 2005
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 6 May 2005 19:33:16 -0400
Subject: [Twisted-Python] Re: Hanging test cases (Was: Evangelism notes...)
In-Reply-To: <ufyx0j7dw.fsf@fitlinxx.com>
References: <C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>
	<20050506060050.15422.1130296805.divmod.quotient.21435@ohm>
	<uk6mcjc0f.fsf@fitlinxx.com>
	<6EA197D2-A573-4175-A0FB-9C5005389D68@redivi.com>
	<ufyx0j7dw.fsf@fitlinxx.com>
Message-ID: <BDDD7C2C-EB8A-4601-8545-565ABEC46EAD@redivi.com>

On May 6, 2005, at 6:51 PM, David Bolen wrote:

> Bob Ippolito <bob at redivi.com> writes:
>
> with respect to deferredResult/deferredError:
>
>
>> Sorry, but Jp is right.  They have no place in any code.  Their
>> existence is a mistake and should be corrected ASAP.  They severely
>> violate the reactor interface.
>>
>
> Hmm, then perhaps it's the reactor interface that could use some
> improving rather than removing this high level functionality?  Or is
> everyone just saying that the implementation (versus the concept) of
> the current functions is done wrong.  Or maybe I'm just missing what
> major mess having this sort of interface is exposing.

The reactor interface is not what needs improving, it's the way that  
these functions work.  They iterate the reactor when the reactor is  
in a stopped state.  The reactor should either be running, or not  
running.  There are basically two fundamental issues:

(1) Reactors can only be (meaningfully/predictably/etc) iterated if  
Twisted rules the universe AND the implementation of that reactor is  
amenable to that feature.  This is not a tautology.
(2) Reactors need to fire various startup/shutdown events.  Reactors  
shouldn't be doing ANYTHING unless they are in a running state.

The current deferredResult/deferredError breaks both of these  
conditions.
(1) It iterates the reactor (which is a historically public, but  
conceptually broken interface)
(2) It iterates the reactor in a STOPPED state.  The reactor is never  
"running" during these tests.  Startup/Shutdown does not happen!

The fact that the doc strings talk about re-entrancy of certain  
reactor functions and whatnot scares the shit out of me.  They should  
not have to be re-entrant.  What their current implementation is  
doing is really really broken.

The problem, for tests, is that using a properly written  
deferredResult / deferredError the reactor would startup/shutdown  
violently throughout the course of a single test, and will break the  
hell out of it if it has anything to do with services/etc.  So, while  
for SOME deferreds it would work fine, but for others, it wouldn't.   
Basically, unless you can encapsulate the entire test in a single  
deferred, then it shouldn't be using deferredResult/deferredError.

Therefore, what SHOULD happen is that trial should let you write  
tests that return deferreds, and it should let you write it in the  
deferredGenerator style (so it doesn't suck so much).

Trial *could*, in theory, put the reactor into a "started" state at  
the beginning of every tests and a "stopped" state at the end, but  
then you're testing in a strange environment that doesn't really  
mimic how Twisted actually works, and it still breaks (1) which makes  
it unsuitable for testing the reactors where Twisted does not rule  
the universe.  Testing this theory would require changes to the  
reactor interface to make some parts of if re-entrant (bleargh).

> Given Glyph's recent response, I might also clarify that while our
> heaviest use of these functions are within unit tests, we aren't using
> trial, so any linkage between poor behavior of these implementations
> and trial is not something I'm referring to or worry about breaking.
>
> What I do think is that there is a very good and practical reason to
> be able to unwind deferrable operations into a blocking structure for
> a wide variety of test conditions, and losing that capability would
> make writing tested Twisted code (at least for our situation) much
> more fragile and error prone (the tests themselves).  And that's not
> quite the same as the newer waitForDeferred stuff in 2.0 that
> integrates with generators.  While slick, it still doesn't work as
> well for easily maintainable tests in many of our situations.

Well, it causes you to write two lines of code instead of one.  That  
sucks, but so what?  You don't have to write big callback chains..   
It's conceptually identical, it's just that you have to throw in some  
extra boiler plate that says THIS IS A DEFERRED.  If the way we say  
that wasn't so ugly, it might actually be a good thing from a  
readability standpoint :)

I'm not *entirely* sure why "waitForDeferred" is really necessary at  
all, though "deferredGenerator" certainly is.  In the interest of not- 
wearing-off-your-fingerprints one might write a "deferredGenerator"  
specifically for trial (or maybe in general) that just makes sure  
you're yielding a Deferred.

I *think* that it does this so that it can assume the last thing you  
yield is the result.  I would say that you should wrap the result  
instead of wrap every intermediate thing, since the intermediate  
things you do in such a deferred generator should far outnumber the  
times that you return from it.  Perhaps whoever wrote it had a good  
reason that I just don't understand, but when I wrote something  
equivalent a few years ago I wrote it such that there wasn't quite so  
much boilerplate.

> For example, in our system we may very heavy use of our own components
> all of which implement their entire API via deferrable interfaces.
> Interacting with multiple such components during a test is thus a
> multi-stage deferrable process.  Having these blocking calls permits a
> test method to say something like:
>
>     self.user = deferredResult(self.umgr.user())
>     self.user.email = 'test at dom.ain'
>     deferredResult(self.umgr.saveUser(self.user))

# let's assume I've aliased waitForDeferred to "wait"

d = waitForDeferred(self.umgr.user())
yield d
self.user = d.getResult()
self.user.email = 'test at dom.ain'
d = waitForDeferred(self.umgr.saveUser(self.user))
yield d
d.getResult()

So, the test is 6 lines instead of 3.  Which sucks, but it's  
correct.  For tests that do more stuff, it probably should be even  
less of a problem.

If Python grows an extended iteration protocol, where yield becomes  
an expression, you could make it 3 lines again.  This might actually  
happen in Python 2.5.

> Sure, I could write the user() and saveUser() calls with a callback
> chain, and then I'd have to nest the call to saveUser based on the
> user callback, probably something like:
>
>     def fail(failure):
>         self.fail(failure)
>
>     def gotUser(user):
>         self.user = user
>         self.user.email = 'test at dom.ain'
>         return self.umgr.saveUser(self.user)
>
>     d = self.umgr.user()
>     d.addCallback(gotUser)
>     d.addErrback(fail)
>
> but I see no advantage (*in the context of such a test*) to doing it
> this way, and I see a real loss of clarity and maintainability for the
> test itself.

Well, let's say your database thing is a service, that maintains some  
kind of ephemeral state that's required in some way.  If  
deferredResult were properly written, this ephemeral state would hit  
the bit bucket on each deferredResult, probably breaking your code  
even though the test are "correct".

If you add such a component to the system, you might have to rewrite  
all of your tests, because it would not be possible to fix the way  
deferredResult works.

> Since each component in our system has a deferrable interface, any
> test which is going to interact with multiple components would quickly
> evolve a fairly deep callback system in the test, without much benefit
> that I can see.

So, use deferredGenerator / waitForDeferred.

-bob





From db3l at fitlinxx.com  Fri May  6 18:19:45 2005
From: db3l at fitlinxx.com (David Bolen)
Date: 06 May 2005 20:19:45 -0400
Subject: [Twisted-Python] Re: Hanging test cases (Was: Evangelism notes...)
References: <C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>
	<20050506060050.15422.1130296805.divmod.quotient.21435@ohm>
	<uk6mcjc0f.fsf@fitlinxx.com>
	<6EA197D2-A573-4175-A0FB-9C5005389D68@redivi.com>
	<ufyx0j7dw.fsf@fitlinxx.com>
	<BDDD7C2C-EB8A-4601-8545-565ABEC46EAD@redivi.com>
Message-ID: <u1x8jkhum.fsf@fitlinxx.com>

Bob Ippolito <bob at redivi.com> writes:

> (1) Reactors can only be (meaningfully/predictably/etc) iterated if
> Twisted rules the universe AND the implementation of that reactor is
> amenable to that feature.  This is not a tautology.
> (2) Reactors need to fire various startup/shutdown events.  Reactors
> shouldn't be doing ANYTHING unless they are in a running state.
> 
> The current deferredResult/deferredError breaks both of these
> conditions.
> (1) It iterates the reactor (which is a historically public, but
> conceptually broken interface)
> (2) It iterates the reactor in a STOPPED state.  The reactor is never
> "running" during these tests.  Startup/Shutdown does not happen!

This seems like an internal implementation issue to me - when a
reactor is "running" (I've called run()), it's basically stuck in a
loop doing runUntilCurrent and then doIteration.  That's precisely
what iterate does.

Now, I agree that if you have tests that never initiate the run, that
you skip over some startup events.  But except for the uppermost
tests, what is being tested is a specific unit test for a piece of the
system that should be testable in isolation.  If the item under test
has a dependency on startup events, the test should arrange for them.

> The fact that the doc strings talk about re-entrancy of certain
> reactor functions and whatnot scares the shit out of me.  They should
> not have to be re-entrant.  What their current implementation is
> doing is really really broken.

Not sure which doc strings those are, but I don't see a re-entrancy
problem in the sort of scenario I'm looking at - rather than:

        reactor.run which calls
           reactor.runUntilCurrent/doIteration which causes
               my deferrable stuff to operate

I have

        deferredResult which calls
           reactor.iterate which uses
               reactor.runUntilCurrent/doIteration which causes
                   my deferrable stuff to operate
       
I don't think there's any more room for re-entrancy issues than in a normal
running reactor.

Maybe this is a key difference with trial?  If trial has a top level
reactor.run that is always above any test, then I do see how you could
get re-entrancy problems, since you'd be re-entering reactor.iterate
from within an existing reactor.iterate call.

I guess that's true of any nested use of deferredResult too, but we
don't nest our deferredResult calls - no real need since any
deferrable is directly wrapped with the deferredResult call, and
deferredResult is only used in the tests, so what they are calling is
always production code that is written properly with callbacks and
what not.

> The problem, for tests, is that using a properly written
> deferredResult / deferredError the reactor would startup/shutdown
> violently throughout the course of a single test, and will break the
> hell out of it if it has anything to do with services/etc.  So, while
> for SOME deferreds it would work fine, but for others, it wouldn't.
> Basically, unless you can encapsulate the entire test in a single
> deferred, then it shouldn't be using deferredResult/deferredError.

I still don't necessarily see that (the last sentence).  We use
multiple deferrable operations in single tests, but never more than
one at a time (e.g., no recursive or nested uses).  But certainly more
than a single deferrable operation within a single test.

I would, however, agree that I'd prefer even more the ability to
completely start/stop a reactor during the course of a test, but would
still like to be able to iterate it manually during the test to
provide a natural blocking flow to the test.

But in my current scenario, the majority of my components under test
are having interfaces tested that are not impacted by startup/shutdown
(and we don't use any services, in the Twisted sense, for example).

> Therefore, what SHOULD happen is that trial should let you write
> tests that return deferreds, and it should let you write it in the
> deferredGenerator style (so it doesn't suck so much).

I don't think I'd disagree with that - we pretty much stayed away from
trial since I wasn't comfortable with it initially, so we're a pure
Unittest approach, which certainly doesn't provide any framework for
something like that.

> Trial *could*, in theory, put the reactor into a "started" state at
> the beginning of every tests and a "stopped" state at the end, but
> then you're testing in a strange environment that doesn't really
> mimic how Twisted actually works, and it still breaks (1) which makes
> it unsuitable for testing the reactors where Twisted does not rule
> the universe.  Testing this theory would require changes to the
> reactor interface to make some parts of if re-entrant (bleargh).

Yeah, that's a tough problem, although one that would also simplify
the fact that we often run the tests under the unittest GUI, and
occasionally have to fight cross-test pollution from the reactor
persisting across test runs, which is a wart from the current
restrictions.

> Well, it causes you to write two lines of code instead of one.  That
> sucks, but so what?  You don't have to write big callback chains..
> It's conceptually identical, it's just that you have to throw in some
> extra boiler plate that says THIS IS A DEFERRED.  If the way we say
> that wasn't so ugly, it might actually be a good thing from a
> readability standpoint :)

Well, seeing "deferredResult" sort of already says "THIS IS A
DEFERRED" in the test.  And it's less the number of lines than the
inversion of the logic.  In my example, it's tougher to read through
that test and see the underlying core test of the user() and
saveUser() calls.  This is true really of any deferred code in
general, so I find the ability to simplify things in the test level an
improvement.  As you say, the way we "say" this currently is ugly.

> >     self.user = deferredResult(self.umgr.user())
> >     self.user.email = 'test at dom.ain'
> >     deferredResult(self.umgr.saveUser(self.user))
> 
> # let's assume I've aliased waitForDeferred to "wait"
> 
> d = waitForDeferred(self.umgr.user())
> yield d
> self.user = d.getResult()
> self.user.email = 'test at dom.ain'
> d = waitForDeferred(self.umgr.saveUser(self.user))
> yield d
> d.getResult()
> 
> So, the test is 6 lines instead of 3.  Which sucks, but it's  correct.
> For tests that do more stuff, it probably should be even  less of a
> problem.

Except that you didn't include the additional code I'd now have to
write to actually turn that into a generator which is iterated over by
the test in order to actually process the deferrable yields.  (Unless
this is something trial does automatically somehow).

That's what I meant by saying that the integration into generators is
slick (and goes a good way to linearizing what is normally a callback
chain), but still isn't quite as simple as the interface provided by
the deferred{Result,Error} functions.

> Well, let's say your database thing is a service, that maintains some
> kind of ephemeral state that's required in some way.  If
> deferredResult were properly written, this ephemeral state would hit
> the bit bucket on each deferredResult, probably breaking your code
> even though the test are "correct".

I might be getting lost on the "properly written" part, but if I were
testing a component that did have state triggered during reactor
startup/shutdown (which is what I think you're referring to), that
test would likely be using direct calls to the component to trigger
the startup/shutdown actions as part of the test setup/teardown, but
without using the reactor.

That's because the test would be focused on the component and not on
Twisted itself (which in the context of such a test would be a
"system" component that I'm trusting would do the right thing).  This
is clearly different than when testing Twisted itself.

Now that would cover the lion's share of the component tests but
somewhere there's the question of who plugs the components interface
into the twisted events and is that done right.  And I agree that's
messy right now, but it's such a small bit of initialization code that
even if it doesn't get full coverage in the tests it's not hard to
validate.  But I'd certainly welcome ways to test that more fully.

So my tests should be fine for what they are testing (the component).

> If you add such a component to the system, you might have to rewrite
> all of your tests, because it would not be possible to fix the way
> deferredResult works.

I'm not following this.

> So, use deferredGenerator / waitForDeferred.

Once we move to 2.0 we might consider that (I'm not quite up for
back-porting into 1.3 that we're using now), but I still think that
would complicate the tests (in terms of the overhead to actually run
each test like a generator) - but different people can have different
views on what is more maintainable.

Since we're not running our entire test bed under control of a single
"reactor.run" call (I presume that's more of what trial does?), even
using the generator would effectively be iterating the reactor
somewhere along the line.

I don't know - maybe my use case is just limited enough (non trial, no
nesting, etc...) that I don't see any true exposures through
deferred{Result,Error} while I'm getting benefits.

-- David




From grimmtooth at gmail.com  Fri May  6 19:15:41 2005
From: grimmtooth at gmail.com (Jeff Grimmett)
Date: Fri, 6 May 2005 21:15:41 -0400
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <427BDF2D.2080203@reedflute.com>
References: <42792BAC.1050701@rogers.com>
	<1115238976.8476.54.camel@localhost.localdomain>
	<8f4623fb050504174011b553e3@mail.gmail.com>
	<427BBC40.4060702@reedflute.com>
	<8f4623fb0505061229ce3b57@mail.gmail.com>
	<427BDF2D.2080203@reedflute.com>
Message-ID: <8f4623fb0505061815533174e4@mail.gmail.com>

On 5/6/05, Eugene Coetzee <projects at reedflute.com> wrote:

> Perhaps we disagree radically about the usefulness of having the source
> code,being able to read it, and the ablility to recompile and rebuild
> the framework yourself.


I find it very useful. But isn't that beside the point of the discussion? Is 
Twisted or is it not a complete product? Why should I not expect the API to 
be well documented? 

Open source is not the reason for this. It provides, in this case, a 
possible way around an obstacle, but at a terrible cost in wasted time, 
multiplied by every person that uses the library. All those man-hours are 
lost to some project, somewhere.

Twisted should not be considered a time sink. I find that distasteful. It's 
a wonderful framework that has potential in everything I do these days. It 
should not have this stigma attached to it.


> But the source code should not be a crutch to support incomplete
> > documentation - not if you want to go toe to toe with the big dogs.


I googled around with "networking framework" a few times in my life. Who
> are the "big dogs" when it comes to networking frameworks. In the past
> I wrote everything myself using raw C++ sockets, MFC or vanilla
> java.net <http://java.net>. I have also been bitten badly by the "big 
> dogs" - having to
> dig through a MSDN "knowledge base" of thousands of "known bugs" before
> I finally discovered that it *could* be fixed with next release. I
> honestly cannot say that Twisted is outclassed in this area, at least I
> can fix the bugs myself.


Somewhere in this discussion I mentioned that perception is an important 
factor here. It matters not if .NET or Java or Ruby have lesser abilities 
than Twisted, not if potential developers are daunted by the perceived lack 
of information and an obscure channel towards enlightenment. Heck, I'm 
reading about "Rails" on PYTHON blogs, fercryinoutloud.
-- 

Best,

Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050506/431552b4/attachment.html>

From radeex at gmail.com  Fri May  6 21:24:07 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Sat, 7 May 2005 13:24:07 +1000
Subject: [Twisted-Python] Blocking on deferreds during unit tests (e.g.
	deferredResult)
In-Reply-To: <427BB66E.5070509@divmod.com>
References: <op.sqcgh7jny3d107@aspen> <427BB66E.5070509@divmod.com>
Message-ID: <60ed19d40505062024fe69940@mail.gmail.com>

On 5/7/05, Glyph Lefkowitz <glyph at divmod.com> wrote:
> Eric Mangold wrote:
> > I'm starting a new thread on this because It's very important to me,
> > and  we need to have some kind of resolution on this issue.
> 
> > Is there a better way to synchronously spin the reactor until a
> > deferred  fires?
> 
> Yep.  Write a unit test framework that uses Stackless and create a
> tasklet for each deferred that you want to run.

I'd suggest 1) not writing a unit test framework, and instead using
trial, and 2) instead of using stackless, use greenlet + my
gthreadless module that integrates greenlets and Deferreds
(sandbox/radix/gthreadless.py).

Alternatively, if you don't want to use greenlet, as Bob said, just
use deferred generators
(twisted.internet.defer.{deferredGenerator,waitForDeferred}).

HTH, HAND :-)

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From dangoor at gmail.com  Sat May  7 09:02:09 2005
From: dangoor at gmail.com (Kevin Dangoor)
Date: Sat, 7 May 2005 11:02:09 -0400
Subject: [Twisted-Python] Blocking on deferreds during unit tests (e.g.
	deferredResult)
In-Reply-To: <60ed19d40505062024fe69940@mail.gmail.com>
References: <op.sqcgh7jny3d107@aspen> <427BB66E.5070509@divmod.com>
	<60ed19d40505062024fe69940@mail.gmail.com>
Message-ID: <3f085ecd050507080273093f6a@mail.gmail.com>

On 5/6/05, Christopher Armstrong <radeex at gmail.com> wrote:
> I'd suggest 1) not writing a unit test framework, and instead using
> trial, and 2) instead of using stackless, use greenlet + my
> gthreadless module that integrates greenlets and Deferreds
> (sandbox/radix/gthreadless.py).

gthreadless looks quite cool! From things I've seen along the way, it
seems that many people are turned off by the callback style of
programming required by an async framework like Twisted. Using
gthreadless, your code looks just like normal synchronous code.

I'm only a little familiar with greenlet. Is there any significant
disadvantage to using this approach extensively? For example, is the
overhead very large?

Using gthreadless, one could interface sqlobject and Twisted's db
interface to take advantage of the work done in Twisted Enterprise to
make sqlobject-style database access safe for Twisted. (It's
undoubtedly possible without gthreadless, but it seems like it would
be a lot easier)

Kevin



From zooko at zooko.com  Fri May  6 05:19:18 2005
From: zooko at zooko.com (Zooko)
Date: Fri, 6 May 2005 11:19:18 +0000 (UTC)
Subject: [Twisted-Python] verbal violence humor (was: Evangelism notes...)
References: <42792BAC.1050701@rogers.com> <42793FB4.2070304@divmod.com>
	<60ed19d40505041657480dc31c@mail.gmail.com>
	<200505060216.24080.anthony@interlink.com.au>
	<2mmzr9wo46.fsf@starship.python.net>
	<20050505205154.GH25625@sourdust.home.puzzling.org>
Message-ID: <loom.20050506T131028-119@post.gmane.org>

One detail:

The social scene around Twisted currently features a lot of "verbal violence
humor".  This is very frequent on the IRC channel, and probably its
practitioners don't notice how often it occurs (because shared social customs
quickly become unnoticed by their practitioners).  In this e-mail thread,
someone wrote that people who say Twisted has no docs ought to be stabbed in the
face.  Obviously, this was intended as humor, but I believe that this social
custom, along with as other related social customs in Twistedland, deter people
from some other cultures from participating.

NB: I'm not saying it's "bad".  I'm not saying it's unfunny.  I'm not even
necessarily saying that you folks should try to change it -- maybe it works for
you and the "social exclusion" factor is not a big enough problem to warrant a
change.  All I'm saying is that verbal violence humor, interpersonal aggression
humor, and such customs limit the growth of your project by turning off people
from outside your own specific (sub-)culture.

Regards,

Zooko




From exarkun at divmod.com  Sat May  7 16:35:11 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sat, 07 May 2005 22:35:11 GMT
Subject: [Twisted-Python] Blocking on deferreds during unit tests (e.g.
	deferredResult)
In-Reply-To: <3f085ecd050507080273093f6a@mail.gmail.com>
Message-ID: <20050507223511.15422.1879524808.divmod.quotient.24702@ohm>

On Sat, 7 May 2005 11:02:09 -0400, Kevin Dangoor <dangoor at gmail.com> wrote:
>On 5/6/05, Christopher Armstrong <radeex at gmail.com> wrote:
>> I'd suggest 1) not writing a unit test framework, and instead using
>> trial, and 2) instead of using stackless, use greenlet + my
>> gthreadless module that integrates greenlets and Deferreds
>> (sandbox/radix/gthreadless.py).
>
>gthreadless looks quite cool! From things I've seen along the way, it
>seems that many people are turned off by the callback style of
>programming required by an async framework like Twisted. Using
>gthreadless, your code looks just like normal synchronous code.
>
>I'm only a little familiar with greenlet. Is there any significant
>disadvantage to using this approach extensively? For example, is the
>overhead very large?

  The main advantage is also the main disadvantage: when using gthreadless, rather than function callbacks, it becomes less obvious where context switches occur, leading to an increased likelihood of introducing concurrency-related bugs (primarily due to switches out of non-atomic operations).

  Unlike pre-emptive threads, such programming errors can be avoided entirely without the use of locks, but doing so may require more skill and attention to detail than would be required when writing the same code without gthreadless.

  This is somewhat unfortunate, since programmers least familiar with the concurrency problems solved by Twisted's current mechanisms -- function callbacks -- seem to be the most likely to be attracted by solutions like gthreadless while at the same time being the least prepared to develop software correctly with them.

  Of course, this isn't to say gthreadless isn't useful or an improvement over explicit use of Deferreds, just that caution needs to be taken in its use.  gthreadless documentation to the effect of the above paragraphs might go some ways towards letting people use it correctly, too (though since the module is still only in Chris' sandbox, I don't expect him to go out and write this right away; conversely, if someone were to contribute documentation, this might help gthreadless get released, either as part of Twisted or in a stand-alone capacity).

  Jp



From bob at redivi.com  Sat May  7 16:36:32 2005
From: bob at redivi.com (Bob Ippolito)
Date: Sat, 7 May 2005 18:36:32 -0400
Subject: [Twisted-Python] Re: Hanging test cases (Was: Evangelism notes...)
In-Reply-To: <u1x8jkhum.fsf@fitlinxx.com>
References: <C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>
	<20050506060050.15422.1130296805.divmod.quotient.21435@ohm>
	<uk6mcjc0f.fsf@fitlinxx.com>
	<6EA197D2-A573-4175-A0FB-9C5005389D68@redivi.com>
	<ufyx0j7dw.fsf@fitlinxx.com>
	<BDDD7C2C-EB8A-4601-8545-565ABEC46EAD@redivi.com>
	<u1x8jkhum.fsf@fitlinxx.com>
Message-ID: <44BAC89C-B47C-43ED-A154-763127D4DFC0@redivi.com>

On May 6, 2005, at 8:19 PM, David Bolen wrote:

> Bob Ippolito <bob at redivi.com> writes:
>
>
>> (1) Reactors can only be (meaningfully/predictably/etc) iterated if
>> Twisted rules the universe AND the implementation of that reactor is
>> amenable to that feature.  This is not a tautology.
>> (2) Reactors need to fire various startup/shutdown events.  Reactors
>> shouldn't be doing ANYTHING unless they are in a running state.
>>
>> The current deferredResult/deferredError breaks both of these
>> conditions.
>> (1) It iterates the reactor (which is a historically public, but
>> conceptually broken interface)
>> (2) It iterates the reactor in a STOPPED state.  The reactor is never
>> "running" during these tests.  Startup/Shutdown does not happen!
>>
>
> This seems like an internal implementation issue to me - when a
> reactor is "running" (I've called run()), it's basically stuck in a
> loop doing runUntilCurrent and then doIteration.  That's precisely
> what iterate does.

This is an implementation detail.  runUntilCurrent, doIteration, and  
iterate should not be public API.

> Now, I agree that if you have tests that never initiate the run, that
> you skip over some startup events.  But except for the uppermost
> tests, what is being tested is a specific unit test for a piece of the
> system that should be testable in isolation.  If the item under test
> has a dependency on startup events, the test should arrange for them.

The reactor itself needs startup/shutdown events.  As you've noticed,  
the thread pool depends on them.

>> The problem, for tests, is that using a properly written
>> deferredResult / deferredError the reactor would startup/shutdown
>> violently throughout the course of a single test, and will break the
>> hell out of it if it has anything to do with services/etc.  So, while
>> for SOME deferreds it would work fine, but for others, it wouldn't.
>> Basically, unless you can encapsulate the entire test in a single
>> deferred, then it shouldn't be using deferredResult/deferredError.
>>
>
> I still don't necessarily see that (the last sentence).  We use
> multiple deferrable operations in single tests, but never more than
> one at a time (e.g., no recursive or nested uses).  But certainly more
> than a single deferrable operation within a single test.
>
> I would, however, agree that I'd prefer even more the ability to
> completely start/stop a reactor during the course of a test, but would
> still like to be able to iterate it manually during the test to
> provide a natural blocking flow to the test.

We all want things that aren't really possible to do :)

> But in my current scenario, the majority of my components under test
> are having interfaces tested that are not impacted by startup/shutdown
> (and we don't use any services, in the Twisted sense, for example).

However if some implementation detail of twisted changes to take  
advantage of reactor startup/shutdown events internally then all of  
your tests would break even though the application would work.   
Having tests that fail in theory but work in practice is uh, bad.

>> Therefore, what SHOULD happen is that trial should let you write
>> tests that return deferreds, and it should let you write it in the
>> deferredGenerator style (so it doesn't suck so much).
>>
>
> I don't think I'd disagree with that - we pretty much stayed away from
> trial since I wasn't comfortable with it initially, so we're a pure
> Unittest approach, which certainly doesn't provide any framework for
> something like that.

Staying away from trial isn't really a bad idea.  It's obviously  
broken.  However, bringing the broken functionality from trial back  
into unittest doesn't make it any better :)

>>>     self.user = deferredResult(self.umgr.user())
>>>     self.user.email = 'test at dom.ain'
>>>     deferredResult(self.umgr.saveUser(self.user))
>>>
>>
>> # let's assume I've aliased waitForDeferred to "wait"
>>
>> d = waitForDeferred(self.umgr.user())
>> yield d
>> self.user = d.getResult()
>> self.user.email = 'test at dom.ain'
>> d = waitForDeferred(self.umgr.saveUser(self.user))
>> yield d
>> d.getResult()
>>
>> So, the test is 6 lines instead of 3.  Which sucks, but it's   
>> correct.
>> For tests that do more stuff, it probably should be even  less of a
>> problem.
>>
>
> Except that you didn't include the additional code I'd now have to
> write to actually turn that into a generator which is iterated over by
> the test in order to actually process the deferrable yields.  (Unless
> this is something trial does automatically somehow).

Trial could and should (but doesn't currently) do that automatically  
if your test function returns an iterator instead of None.

> That's what I meant by saying that the integration into generators is
> slick (and goes a good way to linearizing what is normally a callback
> chain), but still isn't quite as simple as the interface provided by
> the deferred{Result,Error} functions.

Using Twisted isn't as simple as using urllib to suck down a web  
page, and using ascii strings is easier than using unicode...

>> Well, let's say your database thing is a service, that maintains some
>> kind of ephemeral state that's required in some way.  If
>> deferredResult were properly written, this ephemeral state would hit
>> the bit bucket on each deferredResult, probably breaking your code
>> even though the test are "correct".
>>
>
> I might be getting lost on the "properly written" part, but if I were
> testing a component that did have state triggered during reactor
> startup/shutdown (which is what I think you're referring to), that
> test would likely be using direct calls to the component to trigger
> the startup/shutdown actions as part of the test setup/teardown, but
> without using the reactor.

That's assuming you actually know about all of the services necessary  
to make something work, and that these services can startup/shutdown  
properly in this manner.  The more special crap you write in a test  
the less useful the test is because it's testing something in an  
entirely different way than it actually works.

>> So, use deferredGenerator / waitForDeferred.
>>
>
> Once we move to 2.0 we might consider that (I'm not quite up for
> back-porting into 1.3 that we're using now), but I still think that
> would complicate the tests (in terms of the overhead to actually run
> each test like a generator) - but different people can have different
> views on what is more maintainable.

Move to 2.0 ASAP.  Don't backport to 1.3.

> Since we're not running our entire test bed under control of a single
> "reactor.run" call (I presume that's more of what trial does?), even
> using the generator would effectively be iterating the reactor
> somewhere along the line.

Trial doesn't use reactor.run at all, that's why it's broken.  Using  
the generator would be iterating the reactor but it would be not  
broken.  A good implementation of test would start and stop the  
reactor at the beginning and end of every test so that you (probably)  
don't end up with side-effects due to the order that the tests run.

> I don't know - maybe my use case is just limited enough (non trial, no
> nesting, etc...) that I don't see any true exposures through
> deferred{Result,Error} while I'm getting benefits.

You're right, some things don't break in horrible ways when you use  
deferred{Result,Error}.  Sometimes you can concatenate a str and a  
unicode and it Just Works too, but it only works if the str contains  
characters that can be decoded by the default encoding, whatever that  
happens to be at the time :)

-bob




From exarkun at divmod.com  Sat May  7 17:13:16 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sat, 07 May 2005 23:13:16 GMT
Subject: [Twisted-Python] Re: Hanging test cases (Was: Evangelism notes...)
In-Reply-To: <u1x8jkhum.fsf@fitlinxx.com>
Message-ID: <20050507231316.15422.715887765.divmod.quotient.24760@ohm>

On 06 May 2005 20:19:45 -0400, David Bolen <db3l at fitlinxx.com> wrote:
>Bob Ippolito <bob at redivi.com> writes:
>
>> (1) Reactors can only be (meaningfully/predictably/etc) iterated if
>> Twisted rules the universe AND the implementation of that reactor is
>> amenable to that feature.  This is not a tautology.
>> (2) Reactors need to fire various startup/shutdown events.  Reactors
>> shouldn't be doing ANYTHING unless they are in a running state.
>>
>> The current deferredResult/deferredError breaks both of these
>> conditions.
>> (1) It iterates the reactor (which is a historically public, but
>> conceptually broken interface)
>> (2) It iterates the reactor in a STOPPED state.  The reactor is never
>> "running" during these tests.  Startup/Shutdown does not happen!
>
>This seems like an internal implementation issue to me - when a
>reactor is "running" (I've called run()), it's basically stuck in a
>loop doing runUntilCurrent and then doIteration.  That's precisely
>what iterate does.
>

  It's an implementation detail, yes, but not an internal one.  For the reactor to operate properly, it *must* be started up and shut down.  That's simply a requirement of the interface.  It's not even a particularly unusual one: many libraries require you call some initialization function before proceeding to other APIs they provide.

  With recent versions of Twisted, many reactors don't actually depend terribly heavily on being started up, so you may be able to call iterate() without calling run() first and see something resembling correct behavior.  However, you should note that future versions of Twisted may introduce new startup requirements which break programs which assume reactors do not need an explicit startup event.  Additionally, third-party reactors may depend on the startup event now, thus breaking when used with code that only uses iterate().

  The shutdown event is much more important these days.  People who have noticed Twisted programs and tests which hang at shutdown can attest to this.

> [snip]
>
>I guess that's true of any nested use of deferredResult too, but we
>don't nest our deferredResult calls - no real need since any
>deferrable is directly wrapped with the deferredResult call, and
>deferredResult is only used in the tests, so what they are calling is
>always production code that is written properly with callbacks and
>what not.

  This is one of the cases, yes.

>
>> [snip]
>
>I still don't necessarily see that (the last sentence).  We use
>multiple deferrable operations in single tests, but never more than
>one at a time (e.g., no recursive or nested uses).  But certainly more
>than a single deferrable operation within a single test.
>
>I would, however, agree that I'd prefer even more the ability to
>completely start/stop a reactor during the course of a test, but would
>still like to be able to iterate it manually during the test to
>provide a natural blocking flow to the test.

  Your application code all deals with Deferred callbacks.  Why is it a stretch to have your test code do the same?

>
>But in my current scenario, the majority of my components under test
>are having interfaces tested that are not impacted by startup/shutdown
>(and we don't use any services, in the Twisted sense, for example).

  That you know of.  With current releases of Twisted.

> [snip]
>
>Yeah, that's a tough problem, although one that would also simplify
>the fact that we often run the tests under the unittest GUI, and
>occasionally have to fight cross-test pollution from the reactor
>persisting across test runs, which is a wart from the current
>restrictions.

  This is one reason you should use trial, even though it is broken.  Trial will be fixed by Twisted developers who (at least occassionally) have a firm grasp of how it can correctly interact with the reactor, so by using it you benefit from this understanding.  By using unittest, you are forced to get all the things right that trial will someday get right, or accept a broken test harness.

  If you have feature requirements that trial does not satisfy, make some feature requests :)  We are quite aware that trial is not yet feature complete and will welcome suggestions for features that make it a more useful tool.

> [snip]
> 
>That's what I meant by saying that the integration into generators is
>slick (and goes a good way to linearizing what is normally a callback
>chain), but still isn't quite as simple as the interface provided by
>the deferred{Result,Error} functions.

  I don't think anyone is trying to suggest that it is simpler.  However, it has the advantage of being correct.  Given the choice between simplicity and correctness, I am inclined towards correctness.

>
>> Well, let's say your database thing is a service, that maintains some
>> kind of ephemeral state that's required in some way.  If
>> deferredResult were properly written, this ephemeral state would hit
>> the bit bucket on each deferredResult, probably breaking your code
>> even though the test are "correct".
>
>I might be getting lost on the "properly written" part, but if I were
>testing a component that did have state triggered during reactor
>startup/shutdown (which is what I think you're referring to), that
>test would likely be using direct calls to the component to trigger
>the startup/shutdown actions as part of the test setup/teardown, but
>without using the reactor.

  You can definitely do this.  The problem is that the reactor may have internal setup and tear down of which you are not aware and which will cause problems if skipped.

> [snip]
>
>I don't know - maybe my use case is just limited enough (non trial, no
>nesting, etc...) that I don't see any true exposures through
>deferred{Result,Error} while I'm getting benefits.

  It may be the case that none of the bugs in trial synchronous result utilities cause problems for you.  If they don't, I can understand how it would not be a big priority for you to move away from them (after all, I'm sure you have plenty of things that *are* causing you problems now that you would much rather spend time on).  I recommend simply keeping this conversation in mind if and when you run into problems with your use of deferredResult and deferredError in the future and that you not let such problems take you by surprise.  You can rest relatively easily in the knowledge that deferredResult and friends will not disappear from Twisted overnight.  Broken as they are, they are clearly part of a public API and so will remain long enough to satisfy backwards compatibility requirements.

  Jp



From radeex at gmail.com  Sat May  7 19:31:34 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Sun, 8 May 2005 11:31:34 +1000
Subject: [Twisted-Python] Blocking on deferreds during unit tests (e.g.
	deferredResult)
In-Reply-To: <20050507223511.15422.1879524808.divmod.quotient.24702@ohm>
References: <3f085ecd050507080273093f6a@mail.gmail.com>
	<20050507223511.15422.1879524808.divmod.quotient.24702@ohm>
Message-ID: <60ed19d405050718312a5c9ae9@mail.gmail.com>

On 5/8/05, Jp Calderone <exarkun at divmod.com> wrote:
> On Sat, 7 May 2005 11:02:09 -0400, Kevin Dangoor <dangoor at gmail.com> wrote:
> >I'm only a little familiar with greenlet. Is there any significant
> >disadvantage to using this approach extensively? For example, is the
> >overhead very large?
> 
>   The main advantage is also the main disadvantage: when using gthreadless, 
> rather than function callbacks, it becomes less obvious where context switches 
> occur, leading to an increased likelihood of introducing concurrency-related 
> bugs (primarily due to switches out of non-atomic operations).

If you replace all occurences of "gthreadless" there with "greenlets
in general", then you're correct. However, if one is talking about
gthreadless, this argument is not true.

All context switches still *are* obvious. Every asynchronous operation
is still wrapped in a blockOn(), just like deferred generators.
gthreadless is basically deferred generators with much nicer syntax.


-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From radeex at gmail.com  Sat May  7 19:37:10 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Sun, 8 May 2005 11:37:10 +1000
Subject: [Twisted-Python] Re: Hanging test cases (Was: Evangelism notes...)
In-Reply-To: <u1x8jkhum.fsf@fitlinxx.com>
References: <C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>
	<20050506060050.15422.1130296805.divmod.quotient.21435@ohm>
	<uk6mcjc0f.fsf@fitlinxx.com>
	<6EA197D2-A573-4175-A0FB-9C5005389D68@redivi.com>
	<ufyx0j7dw.fsf@fitlinxx.com>
	<BDDD7C2C-EB8A-4601-8545-565ABEC46EAD@redivi.com>
	<u1x8jkhum.fsf@fitlinxx.com>
Message-ID: <60ed19d405050718373b3463d4@mail.gmail.com>

On 06 May 2005 20:19:45 -0400, David Bolen <db3l at fitlinxx.com> wrote:
> Bob Ippolito <bob at redivi.com> writes:
> > >     self.user = deferredResult(self.umgr.user())
> > >     self.user.email = 'test at dom.ain'
> > >     deferredResult(self.umgr.saveUser(self.user))
> >
> > # let's assume I've aliased waitForDeferred to "wait"
> >
> > d = waitForDeferred(self.umgr.user())
> > yield d
> > self.user = d.getResult()
> > self.user.email = 'test at dom.ain'
> > d = waitForDeferred(self.umgr.saveUser(self.user))
> > yield d
> > d.getResult()
> >
> > So, the test is 6 lines instead of 3.  Which sucks, but it's  correct.
> > For tests that do more stuff, it probably should be even  less of a
> > problem.
> 
> Except that you didn't include the additional code I'd now have to
> write to actually turn that into a generator which is iterated over by
> the test in order to actually process the deferrable yields.  (Unless
> this is something trial does automatically somehow).

Uhhh, maybe I'm missing something here, but as I understand it (I
probably should, being the guy who wrote deferredgenerators), that
code is:

    testCase = deferredGenerator(testCase)

after the definition of the method, or even:

    @deferredGenerator

before the definition of the method.

HTH

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From mary-twisted at puzzling.org  Sun May  8 03:45:00 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sun, 8 May 2005 19:45:00 +1000
Subject: [Twisted-Python] Call for documentation reviewers
Message-ID: <20050508094500.GG10207@sourdust.home.puzzling.org>

Hey,

They have been some people here pretty keen to have better
documentation.

One concrete thing you could do right now to help that take place is to
review existing documentation for me. Steps:

 1. Write a brief description of your general Twisted user profile (how
    much do you know about Twisted? what have you used it for?) Note I
    don't care what this profile is exactly, it can range from "novice
    programmer" to "author of reactor framework."

 2. Find an existing howto or document.

 3. Read through it.
    3a. Note any and all points where you are completely lost.
    3b. Note any and all points where you think something could be
        clearer.
    3c. Run the examples. Do they work? Do they make sense? What lines
        of code don't you understand?

 4. Having developed a probably extensive list of criticisms, file a bug
    against the documenation at http://twistedmatrix.com/bugs/ , put in your
    user profile and all your criticisms, and assign it to "hypatia".

 5. If at any stage you are inspired to write additions to the document
    you are reviewing, also attach them to the bug.

I will really really really try to make an effort to improve documents
based on reviews as outlined above. If you file one and I don't, poke me
with a stick. Participatory criticisms like this are very constructive
compared to "I wish someone would do something" level criticisms,
especially since Twisted is an almost entirely volunteer effort.
Volunteering yourself is so much more effective than volunteering other
people :) (Thanks to the people who have already filed docs bugs coming
out of this discussion.)

-Mary



From andrew-twisted at puzzling.org  Sun May  8 05:05:53 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 8 May 2005 21:05:53 +1000
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <427BBC40.4060702@reedflute.com>
References: <42792BAC.1050701@rogers.com>
	<1115238976.8476.54.camel@localhost.localdomain>
	<8f4623fb050504174011b553e3@mail.gmail.com>
	<427BBC40.4060702@reedflute.com>
Message-ID: <20050508110553.GA6728@frobozz>

On Fri, May 06, 2005 at 08:49:36PM +0200, Eugene Coetzee wrote:
[...]
> 
> I would love to see high level conceptual documentation to give me a 
> better idea of  basic concepts  like the "reactor", "application", 
> "service", "transport","protocol", "factory" - what they are supposed to 
> do and how they are  to fit together.

The glossary helps address this, although I think most people don't realise
it's there:
    http://twistedmatrix.com/projects/core/documentation/howto/glossary.html

I'd be interested to know if you think that helps, and whether you knew
about it and had read it before.

I agree that a nice overview (with a diagram or two) would help.

-Andrew.




From itamar at itamarst.org  Sun May  8 09:05:02 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 08 May 2005 11:05:02 -0400
Subject: [Twisted-Python] Blocking on deferreds during unit tests (e.g.
	deferredResult)
In-Reply-To: <3f085ecd050507080273093f6a@mail.gmail.com>
References: <op.sqcgh7jny3d107@aspen> <427BB66E.5070509@divmod.com>
	<60ed19d40505062024fe69940@mail.gmail.com>
	<3f085ecd050507080273093f6a@mail.gmail.com>
Message-ID: <1115564702.8059.28.camel@localhost.localdomain>

On Sat, 2005-05-07 at 11:02 -0400, Kevin Dangoor wrote:

> Using gthreadless, one could interface sqlobject and Twisted's db
> interface to take advantage of the work done in Twisted Enterprise to
> make sqlobject-style database access safe for Twisted. (It's
> undoubtedly possible without gthreadless, but it seems like it would
> be a lot easier)

Nope, that wouldn't work. greenlets do *not* make blocking APIs ot
block.




From macosxservertiger at gmail.com  Sun May  8 09:15:12 2005
From: macosxservertiger at gmail.com (Max)
Date: Sun, 8 May 2005 17:15:12 +0200
Subject: [Twisted-Python] Twisted on Mac OS X 10.4
Message-ID: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>

Hi,
do you know how to install Twisted on Mac OS X 10.4 Tiger?
I need it to deploy Punjab...
Thank you
Max



From jadestorm at nc.rr.com  Sun May  8 09:33:09 2005
From: jadestorm at nc.rr.com (Daniel Henninger)
Date: Sun, 8 May 2005 11:33:09 -0400 (EDT)
Subject: [Twisted-Python] Twisted on Mac OS X 10.4
In-Reply-To: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>
References: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>
Message-ID: <50771.10.0.0.9.1115566389.squirrel@www.vorpalcloud.org>

I had put together a twisted fink package for 10.3.  I don't have 10.4 yet
so that isn't yet a possibility.  ;D  Is that how you had folk install
twisted before?  fink?  or something else?

Daniel

-- 
"The most addictive drug in the world is music."
     - The Lost Boyz

> Hi,
> do you know how to install Twisted on Mac OS X 10.4 Tiger?
> I need it to deploy Punjab...
> Thank you
> Max
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>





From macosxservertiger at gmail.com  Sun May  8 10:03:48 2005
From: macosxservertiger at gmail.com (Max)
Date: Sun, 8 May 2005 18:03:48 +0200
Subject: [Twisted-Python] Twisted on Mac OS X 10.4
In-Reply-To: <50771.10.0.0.9.1115566389.squirrel@www.vorpalcloud.org>
References: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>
	<50771.10.0.0.9.1115566389.squirrel@www.vorpalcloud.org>
Message-ID: <10473CEC-ACC1-476D-AB6D-339E3A9D54E5@gmail.com>

Actually I didn't even know Twisted existed before having 10.4  
Server. Because I want to extend the iChat server, I need Twisted to  
run Punjab.
I hope you can do the package for 10.4 asap.
Thanks
Max




Il giorno 08/mag/05, alle ore 17:33, Daniel Henninger ha scritto:

> I had put together a twisted fink package for 10.3.  I don't have  
> 10.4 yet
> so that isn't yet a possibility.  ;D  Is that how you had folk install
> twisted before?  fink?  or something else?
>
> Daniel
>
> -- 
> "The most addictive drug in the world is music."
>      - The Lost Boyz
>
>
>> Hi,
>> do you know how to install Twisted on Mac OS X 10.4 Tiger?
>> I need it to deploy Punjab...
>> Thank you
>> Max
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>>
>>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From jadestorm at nc.rr.com  Sun May  8 10:30:36 2005
From: jadestorm at nc.rr.com (Daniel Henninger)
Date: Sun, 8 May 2005 12:30:36 -0400 (EDT)
Subject: [Twisted-Python] Twisted on Mac OS X 10.4
In-Reply-To: <10473CEC-ACC1-476D-AB6D-339E3A9D54E5@gmail.com>
References: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>
	<50771.10.0.0.9.1115566389.squirrel@www.vorpalcloud.org>
	<10473CEC-ACC1-476D-AB6D-339E3A9D54E5@gmail.com>
Message-ID: <51084.10.0.0.9.1115569836.squirrel@www.vorpalcloud.org>

Yeah, it should be trivial once I have tiger in hand.  Supposedly that's
targetted for next week.

Daniel

-- 
"The most addictive drug in the world is music."
     - The Lost Boyz

> Actually I didn't even know Twisted existed before having 10.4
> Server. Because I want to extend the iChat server, I need Twisted to
> run Punjab.
> I hope you can do the package for 10.4 asap.
> Thanks
> Max
>
>
>
>
> Il giorno 08/mag/05, alle ore 17:33, Daniel Henninger ha scritto:
>
>> I had put together a twisted fink package for 10.3.  I don't have
>> 10.4 yet
>> so that isn't yet a possibility.  ;D  Is that how you had folk install
>> twisted before?  fink?  or something else?
>>
>> Daniel
>>
>> --
>> "The most addictive drug in the world is music."
>>      - The Lost Boyz
>>
>>
>>> Hi,
>>> do you know how to install Twisted on Mac OS X 10.4 Tiger?
>>> I need it to deploy Punjab...
>>> Thank you
>>> Max
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>>
>>>
>>>
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>





From daverz at gmail.com  Sun May  8 10:33:21 2005
From: daverz at gmail.com (Dave Cook)
Date: Sun, 8 May 2005 09:33:21 -0700
Subject: [Twisted-Python] Twisted on Mac OS X 10.4
In-Reply-To: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>
References: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>
Message-ID: <7a59f02505050809334e7984fe@mail.gmail.com>

On 5/8/05, Max <macosxservertiger at gmail.com> wrote:

> do you know how to install Twisted on Mac OS X 10.4 Tiger?

python setup.py install didn't work?  Well, I guess I'll find out as I
just installed 10.4 last night.  Was kind of disappointed that Apple
didn't upgrade to Python 2.4.

Dave Cook



From projects at reedflute.com  Sun May  8 10:38:54 2005
From: projects at reedflute.com (Eugene Coetzee)
Date: Sun, 08 May 2005 18:38:54 +0200
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <20050508110553.GA6728@frobozz>
References: <42792BAC.1050701@rogers.com>	<1115238976.8476.54.camel@localhost.localdomain>	<8f4623fb050504174011b553e3@mail.gmail.com>	<427BBC40.4060702@reedflute.com>
	<20050508110553.GA6728@frobozz>
Message-ID: <427E409E.7030105@reedflute.com>

Andrew Bennetts wrote:

>On Fri, May 06, 2005 at 08:49:36PM +0200, Eugene Coetzee wrote:
>[...]
>  
>
>>I would love to see high level conceptual documentation to give me a 
>>better idea of  basic concepts  like the "reactor", "application", 
>>"service", "transport","protocol", "factory" - what they are supposed to 
>>do and how they are  to fit together.
>>    
>>
>
>The glossary helps address this, although I think most people don't realise
>it's there:
>    http://twistedmatrix.com/projects/core/documentation/howto/glossary.html
>
>I'd be interested to know if you think that helps, and whether you knew
>about it and had read it before.
>  
>
No - I didn't read it before and there is no excuse for that :-)

It certainly helps, although it may be a bit minimalistic. 

>I agree that a nice overview (with a diagram or two) would help.
>
>  
>
Certainly.

I also find the "howto's" useful in attempting to explaining the design 
philosphy in a haphazard way - but there are a lot of thing that could 
better be explained in a more complete, systematic and elaborate overview.


regards,

Eugene Coetzee

Web                 -> www.reedflute.com
=============================================== 




From jarrod.roberson at gmail.com  Sun May  8 10:41:07 2005
From: jarrod.roberson at gmail.com (jarrod roberson)
Date: Sun, 8 May 2005 12:41:07 -0400
Subject: [Twisted-Python] Twisted on Mac OS X 10.4
In-Reply-To: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>
References: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>
Message-ID: <2389d473050508094127e7212f@mail.gmail.com>

On 5/8/05, Max <macosxservertiger at gmail.com> wrote:
> 
> Hi,
> do you know how to install Twisted on Mac OS X 10.4 Tiger?
> I need it to deploy Punjab...
> Thank you
> Max



get it and then run >>python setup.py install


-- 
If you don't know what you want, you probably need a nap.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050508/7b7ca94e/attachment.html>

From dreid at dreid.org  Sun May  8 12:09:00 2005
From: dreid at dreid.org (David Reid)
Date: Sun, 08 May 2005 11:09:00 -0700
Subject: [Twisted-Python] Twisted on Mac OS X 10.4
In-Reply-To: <7a59f02505050809334e7984fe@mail.gmail.com>
References: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>
	<7a59f02505050809334e7984fe@mail.gmail.com>
Message-ID: <427E55BC.1050701@dreid.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


Dave Cook wrote:
> On 5/8/05, Max <macosxservertiger at gmail.com> wrote:
> 
> 
>>do you know how to install Twisted on Mac OS X 10.4 Tiger?
> 
> 
> python setup.py install didn't work?  Well, I guess I'll find out as I
> just installed 10.4 last night.  Was kind of disappointed that Apple
> didn't upgrade to Python 2.4.
> 
> Dave Cook
> 

If for some strange reason python setup.py install doesn't work you can
always just put the twisted directory in your path, either with a
symlink, copying it, appending it to the PYTHONPATH variable, or using a
.pth file.

- -David Reid
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.5 (GNU/Linux)

iD8DBQFCflW8rsrO6aeULcgRApRsAKCAIQ+1nYlgWPHdmwhEnp+rSINxmwCeIGD7
WgCDScEGcgoeuFuDMsCMTeA=
=zCms
-----END PGP SIGNATURE-----



From bob at redivi.com  Sun May  8 12:33:10 2005
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 8 May 2005 14:33:10 -0400
Subject: [Twisted-Python] Twisted on Mac OS X 10.4
In-Reply-To: <427E55BC.1050701@dreid.org>
References: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>
	<7a59f02505050809334e7984fe@mail.gmail.com>
	<427E55BC.1050701@dreid.org>
Message-ID: <7ADDD47F-1045-47C5-8435-FD82847C8832@redivi.com>

On May 8, 2005, at 2:09 PM, David Reid wrote:

> Dave Cook wrote:
>
>> On 5/8/05, Max <macosxservertiger at gmail.com> wrote:
>>
>>> do you know how to install Twisted on Mac OS X 10.4 Tiger?
>>
>> python setup.py install didn't work?  Well, I guess I'll find out  
>> as I
>> just installed 10.4 last night.  Was kind of disappointed that Apple
>> didn't upgrade to Python 2.4.
>
> If for some strange reason python setup.py install doesn't work you  
> can
> always just put the twisted directory in your path, either with a
> symlink, copying it, appending it to the PYTHONPATH variable, or  
> using a
> .pth file.

"sudo python setup.py install" should work fine.  symlinking or pth  
files would also work just fine (but neither would get you the twistd  
script, etc. without also modifying PATH).

DO NOT USE PYTHONPATH.  All of the alternatives suck less.

-bob




From macosxservertiger at gmail.com  Sun May  8 13:25:27 2005
From: macosxservertiger at gmail.com (Max server)
Date: Sun, 8 May 2005 21:25:27 +0200
Subject: [Twisted-Python] Twisted on Mac OS X 10.4
In-Reply-To: <7ADDD47F-1045-47C5-8435-FD82847C8832@redivi.com>
References: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>
	<7a59f02505050809334e7984fe@mail.gmail.com>
	<427E55BC.1050701@dreid.org>
	<7ADDD47F-1045-47C5-8435-FD82847C8832@redivi.com>
Message-ID: <c615ac0805050812259d38133@mail.gmail.com>

I tried installing it on a 10.4 Server and got the following

Traceback (most recent call last):
  File "setup.py", line 20, in ?
    from twisted import copyright
  File "./twisted/__init__.py", line 21, in ?
    raise ImportError, "you need zope.interface installed
(http://zope.org/Products/ZopeInterface/)"
ImportError: you need zope.interface installed
(http://zope.org/Products/ZopeInterface/)

Then I downloaded ZopeInterface 3.0.1 from
http://zope.org/Products/ZopeInterface/ and tried to install it but
had the following error -of course xcode 2 is installed-

running install
running build
running build_py
creating build
creating build/lib.darwin-8.0.0-Power_Macintosh-2.3
creating build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope
copying Dependencies/zope-ZopeInterface-3.0.1/zope/__init__.py ->
build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope
creating build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/__init__.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/_flatten.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/adapter.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/advice.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/declarations.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/document.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/exceptions.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/interface.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/interfaces.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/ro.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/verify.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
creating build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/common
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/common/__init__.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/common
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/common/idatetime.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/common
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/common/interfaces.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/common
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/common/mapping.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/common
creating build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/common/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/common/tests/__init__.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/common/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/common/tests/basemapping.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/common/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/common/tests/test_idatetime.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/common/tests
creating build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/__init__.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/dummy.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/ifoo.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/m1.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/m2.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/odd.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/test_adapter.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/test_advice.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/test_declarations.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/test_document.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/test_element.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/test_interface.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/test_odd_declarations.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/test_sorting.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/test_verify.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/unitfixtures.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
creating build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/testing
copying Dependencies/zope.testing-ZopeInterface-3.0.1/zope.testing/__init__.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/testing
copying Dependencies/zope.testing-ZopeInterface-3.0.1/zope.testing/cleanup.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/testing
copying Dependencies/zope.testing-ZopeInterface-3.0.1/zope.testing/doctest.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/testing
copying Dependencies/zope.testing-ZopeInterface-3.0.1/zope.testing/doctestunit.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/testing
copying Dependencies/zope.testing-ZopeInterface-3.0.1/zope.testing/loggingsupport.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/testing
copying Dependencies/zope.testing-ZopeInterface-3.0.1/zope.testing/loghandler.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/testing
copying Dependencies/zope.testing-ZopeInterface-3.0.1/zope.testing/tests.py
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/testing
copying Dependencies/zope-ZopeInterface-3.0.1/zope/PUBLICATION.cfg ->
build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope
copying Dependencies/zope-ZopeInterface-3.0.1/zope/README.txt ->
build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/adapter.txt
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/DEPENDENCIES.cfg
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/human.txt
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/PUBLICATION.cfg
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/README.txt
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/SETUP.cfg
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface
copying Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/tests/foodforthought.txt
-> build/lib.darwin-8.0.0-Power_Macintosh-2.3/zope/interface/tests
running build_ext
building 'zope.interface._zope_interface_coptimizations' extension
creating build/temp.darwin-8.0.0-Power_Macintosh-2.3
creating build/temp.darwin-8.0.0-Power_Macintosh-2.3/Dependencies
creating build/temp.darwin-8.0.0-Power_Macintosh-2.3/Dependencies/zope.interface-ZopeInterface-3.0.1
creating build/temp.darwin-8.0.0-Power_Macintosh-2.3/Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface
gcc -fno-strict-aliasing -Wno-long-double -no-cpp-precomp
-mno-fused-madd -fno-common -dynamic -DNDEBUG -g -O3 -Wall
-Wstrict-prototypes
-IDependencies/zope.interface-ZopeInterface-3.0.1/zope.interface
-I/System/Library/Frameworks/Python.framework/Versions/2.3/include/python2.3
-c Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/_zope_interface_coptimizations.c
-o build/temp.darwin-8.0.0-Power_Macintosh-2.3/Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/_zope_interface_coptimizations.o
Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/_zope_interface_coptimizations.c:339:
error: static declaration of 'SpecType' follows non-static declaration
Dependencies/zope.interface-ZopeInterface-3.0.1/zope.interface/_zope_interface_coptimizations.c:73:
error: previous declaration of 'SpecType' was here
error: command 'gcc' failed with exit status 1





On 5/8/05, Bob Ippolito <bob at redivi.com> wrote:
> On May 8, 2005, at 2:09 PM, David Reid wrote:
> 
> > Dave Cook wrote:
> >
> >> On 5/8/05, Max <macosxservertiger at gmail.com> wrote:
> >>
> >>> do you know how to install Twisted on Mac OS X 10.4 Tiger?
> >>
> >> python setup.py install didn't work?  Well, I guess I'll find out
> >> as I
> >> just installed 10.4 last night.  Was kind of disappointed that Apple
> >> didn't upgrade to Python 2.4.
> >
> > If for some strange reason python setup.py install doesn't work you
> > can
> > always just put the twisted directory in your path, either with a
> > symlink, copying it, appending it to the PYTHONPATH variable, or
> > using a
> > .pth file.
> 
> "sudo python setup.py install" should work fine.  symlinking or pth
> files would also work just fine (but neither would get you the twistd
> script, etc. without also modifying PATH).
> 
> DO NOT USE PYTHONPATH.  All of the alternatives suck less.
> 
> -bob
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From mary-twisted at puzzling.org  Sun May  8 14:42:11 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Mon, 9 May 2005 06:42:11 +1000
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <427E409E.7030105@reedflute.com>
References: <42792BAC.1050701@rogers.com>
	<1115238976.8476.54.camel@localhost.localdomain>
	<8f4623fb050504174011b553e3@mail.gmail.com>
	<427BBC40.4060702@reedflute.com> <20050508110553.GA6728@frobozz>
	<427E409E.7030105@reedflute.com>
Message-ID: <20050508204211.GC26815@sourdust.home.puzzling.org>

On Sun, May 08, 2005, Eugene Coetzee wrote:
> It certainly helps, although it may be a bit minimalistic. 

A review would be appreciated :) Also, any suggestions on how to make
the glossary easier to find? 

-Mary



From robin at wiretooth.com  Sun May  8 20:45:33 2005
From: robin at wiretooth.com (Robin Bryce)
Date: Mon, 09 May 2005 03:45:33 +0100
Subject: [Twisted-Python] Questionaire: How twisted are you ? (Was:
	Evangelism notes...)
In-Reply-To: <20050508204211.GC26815@sourdust.home.puzzling.org>
References: <42792BAC.1050701@rogers.com>	<1115238976.8476.54.camel@localhost.localdomain>	<8f4623fb050504174011b553e3@mail.gmail.com>	<427BBC40.4060702@reedflute.com>
	<20050508110553.GA6728@frobozz>	<427E409E.7030105@reedflute.com>
	<20050508204211.GC26815@sourdust.home.puzzling.org>
Message-ID: <427ECECD.6000207@wiretooth.com>

In the spirit of just having a go and testing out my twisted knowledge 
on this list I thought I'd start a questionaire, with answers, inspired by:

> I would love to see high level conceptual documentation to give me a
> better idea of  basic concepts  like the "reactor", "application",
> "service", "transport","protocol", "factory" - what they are supposed
> to do and how they are  to fit together.

I am by no stretch of the imagination qualified to advertise these 
answers as authoratative. Buyer beware, and if you don't like mine give 
me a fat -ve 10 for my twisted score and show me your answer ;-)

Authoritative intro material is at:

http://twistedmatrix.com/projects/core/documentation/howto/basics.html
http://twistedmatrix.com/projects/core/documentation/howto/glossary.html

Q1. How do you run a twisted program ?

In as many ways as there are pebbles on a beach ;-)

There are lots of great examples in the docs that get you to the point 
where you have a python file that will create an application instance at 
global scope. Once you've got this far the simplest way to run your 
twisted program is to add the following to that file:

from twisted.internet import reactor
reactor.run()

And then at the command prompt

python myapplication.py

Once you're comfortable with the basics of Services, the Application, 
Factory's and Protocols you're going to start caring about things like 
persistence, daemonization, privilege scheding, plugins etc. At that 
point it's time to look at 'twistd'. If you remove the lines from 
myapplication.py that were added above then you can run your application 
directly from the prompt with:

twistd -oy myapplication.py

Then you will get the almost the same result. The primary difference is 
that your now running your program as a daemon.

twistd is a program that loads twisted applications from many different 
formats, including .py, and starts the application instance it finds there.

Q2. What is an application ?

Most twisted programs begin with an application instance. Twisted 
defines a helper function for creating an application instance so that 
it includes all the bits of functionality that allow it to be driven by 
the twisted framework. This function is found in the module 
twisted.application.service and is called 'Application'.

Most twisted programs define a python file that makes a call to the 
'Application' function at global scope. Just doing this, and nothing 
else, will not get you very interesting results, for that you need to 
look at adding 'Services'.

If you've already got a python file that defines an application instance 
this way - in addition to some example code - and you just want to know 
the simplest way to run your program, then the answer you're after is 
almost certainly:

# add these lines to myprogram.py
from twisted.internet import reactor
reactor.run()

$ python myprogram.py

But see Q1. for a little more on this.

This is the most suitable way if you want to single step through your 
program in a debugger to find out how twisted works. There are many 
other ways to run your program but it's safe to ignore them until you 
decide you want them.

Q3. What's a Service ?

'Services' collect together the bits that make it possible for cool 
networking stuff to happen in a single thread without blocking[1]. You 
don't have to use them to use the twisted framework but they can help. 
If you are using an application instance then you almost certainly want 
to use Services as well.

You add Service's to your application instance (see Q2 for creating 
one). Each service typically manages a discrete network service. The 
twisted framework starts and stops all Services in an application in a 
well defined way when your program is executed. This includes provision 
for giving your services a chance to do stuff before privilege scheding 
happens.

To define what your service is you will usually want to subclass 
twisted.application.service.Service and override any, or all of:

privilegedStartService, startService, stopService.

During a single run of your program each of these methods is called 
exactly once and in exactly that order. If you need to bind to 
privileged ports then privilegedStartService is where you need to do it.

The bits that are used to piece together Service behavior are 
principally: Factory's, Protocols, and Defereds. The parameters involved 
in binding these bits together are things like hostnames, portnumbers, 
database passwords, and (arguably) the networking protocol the service 
is dealing with. Collecting these things together into a service can be 
done by hand, often, it can be easier, more flexible, and much more 
extensible if Adapters are used to do the binding.

[1] Note carefully the word 'possible' in relation to 'without 
blocking'. The twisted framework can not guarantee your program will not 
block. Twisted just gives you a set of concurrency primitives to help 
you write your program so it doesn't block. To understand how to write a 
twisted program so it never blocks you need to learn to love 'Defered's. 
Concurrency primitives in python essentially boil down to a choice 
between callbacks or generators. The twisted framework supports both (as 
of 2.0) but the callback style is the most established. Generators 
didn't arrive   in python until 2.2.

Q4. What's a MultiService ?

At some point you will almost certainly decide that subclassing 
MultiService is going to help you. It's not. To quote moshez:

"duuuuuude. don't. inherit. multiservice."

[And certainly don't inherit from both MultiService and Componentized at 
the same time ;-)]

MultiService is an internal class that is used by the framework to 
manage the order in which all services, added to the application 
instance by you, are started and stoped. The fraze "added to the 
application instance" is potentially misleading but from the birds eye 
perspective this is essentially what you do when you add Services.

You almost certainly do want to subclass Service. But don't be fooled 
into subclassing MultiService.

Q4 What's a Factory ?

Q5 What's a Protocol ?

Q6 How do I get my Factory to open a connection ?

Q7. How do I get my Factory to serve a connection ?

Q8. How do I cancel my attempt to open a connection ?

Q9. What's a plugin ?

Q10. Ok, I'm feeling brave, what is an Application realy and why can't 
it be subclassable ?

You can't subclass it because it is a function. But that doesn't tell 
you anything useful.

The value returned by the function 
twisted.application.service.Appliction is an instance of 
twisted.python.components.Componentized.

Componentized is a class that provides interface aggregation facilities 
in a persistable way. When you call Application you are creating an 
instance of Componentized that aggregates instances of the following 
together:

* twisted.application.service.MultiService
* twisted.application.service.Process
* twisted.persisted.sob.Persitent

The twisted framework uses interfaces and adapters to reduce the 
tendency for functional dependencies to snarl up the implementation of 
the framework. To do this it needs your application to support interface 
aggregation and to provide the basic interfaces that enable it to drive 
your program the Twisted way.

In these terms the function Application produces an instance that 
supports the interfaces IService, IMultiService, IPersitable and 
IProcess. MultiService implements IService and IMultiService[1], 
Persistent implements IPersistable, and Process implements IProcess.

These are the basic guarantees about the application instance that 
enable the twisted framework to drive your application.

You can't specialize of the above instances either - unless you are 
prepared to mimic the behavior of Application. You're only route for 
specializing your application is by adding services. ie., via some 
variation of:

IService(MySerivce()).setServiceParent(IMultiService(application))


It's not unusual or unreasonable to write a replacement for Application. 
A perfectly acceptable example is:

def MyApplication():

       a = MyService()
       a.setName("myapplication")
       ret = service.MultiService()
       a.setServiceParent(ret)

       return ret

Reading up on adapters & interfaces in the python / Zope3 sense can give 
you an extra perspective when looking at the twisted docs on Adapters 
and interfaces. Twisted 2.0 actually uses Zope3 interfaces. And if 
you're reading this answer then there is a good chance taking the time 
to do this will help you.

http://www.python.org/peps/pep-0246.html
http://mail.zope.org/pipermail/zope3-dev/2005-January/013064.html

[1]It is required that the IService interface and the IMultiService 
interface are implemented by the same underlying object (or at least it 
is by the application unit tests).

You really probably don't want to read any more of this answer. For one 
thing Componentized looks like it's going to be superseded by Faceted 
which does similar things but much much better.

 From the doc string of Componentized:

"I am a mixin to allow you to be adapted in various ways persistently."

Componentized caches addaptions in a persitable way. Your applications 
root service, the MultiService instance above is effectively a 
persistably cached adaption from None to IMultiService and to IService.

Well you did ask ;->

When you do:

IService(application)

You are retreiving the IService interface for you application that 
happens to be implemented by twisted.application.service.MultiService

Depending on the feedback I'm keen to see/provide answers to Q4-Q8, 
Don't feel confident at all about Q9.

Cheers,

Robin

Mary Gardiner wrote:
> On Sun, May 08, 2005, Eugene Coetzee wrote:
> 
>>It certainly helps, although it may be a bit minimalistic. 
> 
> 
> A review would be appreciated :) Also, any suggestions on how to make
> the glossary easier to find? 
> 
> -Mary
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From leslie at exoweb.net  Sun May  8 20:01:17 2005
From: leslie at exoweb.net (Leslie Huyan)
Date: Mon, 09 May 2005 10:01:17 +0800
Subject: [Twisted-Python] How can I change the default behaviour?
In-Reply-To: <427E55BC.1050701@dreid.org>
References: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>	<7a59f02505050809334e7984fe@mail.gmail.com>
	<427E55BC.1050701@dreid.org>
Message-ID: <427EC46D.2030708@exoweb.net>

Hi:
    I encountered one problem to dig into twisted.
    If I have 2 methods in the call back chain, however I don't want the 
result of the first one to pass to the second one as its arguments, what 
should I do?
    For example:
    defer.addCallbacks(request.write, html)
    defer.addCallbacks(request.setHeader, key, value)

Thank you.



From bob at redivi.com  Sun May  8 20:19:55 2005
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 8 May 2005 22:19:55 -0400
Subject: [Twisted-Python] How can I change the default behaviour?
In-Reply-To: <427EC46D.2030708@exoweb.net>
References: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>	<7a59f02505050809334e7984fe@mail.gmail.com>
	<427E55BC.1050701@dreid.org> <427EC46D.2030708@exoweb.net>
Message-ID: <1B4E42E9-E357-4ADC-BB55-9939229A0001@redivi.com>

On May 8, 2005, at 10:01 PM, Leslie Huyan wrote:

>    I encountered one problem to dig into twisted.
>    If I have 2 methods in the call back chain, however I don't want  
> the result of the first one to pass to the second one as its  
> arguments, what should I do?
>    For example:
>    defer.addCallbacks(request.write, html)
>    defer.addCallbacks(request.setHeader, key, value)

The solution to this problem is to write a callback that does what  
you need to do and attach that to the deferred:

def doStuff(result):
     request.write(html)
     request.setHeader(key, value)
     return result
defer.addCallback(doStuff)

By the way, your example is not going to work (at all) because the  
method you want is "addCallback" and the first argument passed to the  
callback is going to be the deferred result.  request.write(result,  
html) and request.setHeader(result, key, value) aren't going to do  
what you want.

-bob




From radeex at gmail.com  Sun May  8 20:20:05 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Mon, 9 May 2005 12:20:05 +1000
Subject: [Twisted-Python] How can I change the default behaviour?
In-Reply-To: <427EC46D.2030708@exoweb.net>
References: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>
	<7a59f02505050809334e7984fe@mail.gmail.com>
	<427E55BC.1050701@dreid.org> <427EC46D.2030708@exoweb.net>
Message-ID: <60ed19d40505081920695b2de@mail.gmail.com>

For this particular example, I would suggest just putting them in a
single method, since request.write doesn't return a Deferred and you
don't need to wait for anything before doing the setHeader.

def gotResult(html):
    request.write(html)
    request.setHeader(key, value)
d.addCallback(gotResult)

In the general case, though, you can do something like

def gotResult(r):
    request.write(r)
    return r
d.addCallback(gotResult)
d.addCallback(anotherCallback)

On 5/9/05, Leslie Huyan <leslie at exoweb.net> wrote:
> Hi:
>     I encountered one problem to dig into twisted.
>     If I have 2 methods in the call back chain, however I don't want the
> result of the first one to pass to the second one as its arguments, what
> should I do?
>     For example:
>     defer.addCallbacks(request.write, html)
>     defer.addCallbacks(request.setHeader, key, value)
> 
> Thank you.


-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From leslie at exoweb.net  Sun May  8 21:28:11 2005
From: leslie at exoweb.net (Leslie Huyan)
Date: Mon, 09 May 2005 11:28:11 +0800
Subject: [Twisted-Python] How can I change the default behaviour?
In-Reply-To: <60ed19d40505081920695b2de@mail.gmail.com>
References: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>	<7a59f02505050809334e7984fe@mail.gmail.com>	<427E55BC.1050701@dreid.org>
	<427EC46D.2030708@exoweb.net>
	<60ed19d40505081920695b2de@mail.gmail.com>
Message-ID: <427ED8CB.5060506@exoweb.net>

Hi:
That's reasonable, I put them in a single method and it works. So I 
should make my methods to fit for the default behaviour rather than 
change it. (one result pass to be  next args)
Thank you.

leslie
Christopher Armstrong wrote:

>For this particular example, I would suggest just putting them in a
>single method, since request.write doesn't return a Deferred and you
>don't need to wait for anything before doing the setHeader.
>
>def gotResult(html):
>    request.write(html)
>    request.setHeader(key, value)
>d.addCallback(gotResult)
>
>In the general case, though, you can do something like
>
>def gotResult(r):
>    request.write(r)
>    return r
>d.addCallback(gotResult)
>d.addCallback(anotherCallback)
>
>On 5/9/05, Leslie Huyan <leslie at exoweb.net> wrote:
>  
>
>>Hi:
>>    I encountered one problem to dig into twisted.
>>    If I have 2 methods in the call back chain, however I don't want the
>>result of the first one to pass to the second one as its arguments, what
>>should I do?
>>    For example:
>>    defer.addCallbacks(request.write, html)
>>    defer.addCallbacks(request.setHeader, key, value)
>>
>>Thank you.
>>    
>>
>
>
>  
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050509/08796464/attachment.html>

From naewe.s at atlas.de  Mon May  9 04:17:54 2005
From: naewe.s at atlas.de (=?ISO-8859-15?Q?Stefan_N=E4we?=)
Date: Mon, 09 May 2005 12:17:54 +0200
Subject: [Twisted-Python] Q about handling CTRL-C correctly
In-Reply-To: <42777AD7.7080607@twistedmatrix.com>
References: <42772B55.8040709@atlas.de> <42777AD7.7080607@twistedmatrix.com>
Message-ID: <427F38D2.6040406@atlas.de>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Tommi Virtanen schrieb:
>> class SimpleServer(Protocol):
>>     def connectionMade(self):
>>         m = self.factory.msg()
>>         while running:
>>             self.transport.write(m.pack())
>>             sys.stderr.write(".")
>>             time.sleep(1)
>>         self.transport.loseConnection()
> 
> That's blocking code, right there. Don't use time.sleep with twisted.

OK.

> See task.LoopingCall and reactor.callLater.

task.LoopingCall did the job.

THX

Stefan
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.0 (Cygwin)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFCfzjSsDu9QQ7KHU4RAuLyAJ4/aJ2DJczHGOiFN9tEfwQJ8+nQnQCfWqyC
MduFQL3dI4EMVR68MC9hPJM=
=obJJ
-----END PGP SIGNATURE-----




From mwh at python.net  Mon May  9 07:09:22 2005
From: mwh at python.net (Michael Hudson)
Date: Mon, 09 May 2005 14:09:22 +0100
Subject: [Twisted-Python] Re: Evangelism notes...
References: <42792BAC.1050701@rogers.com> <42793FB4.2070304@divmod.com>
	<60ed19d40505041657480dc31c@mail.gmail.com>
	<200505060216.24080.anthony@interlink.com.au>
	<2mmzr9wo46.fsf@starship.python.net>
	<20050505205154.GH25625@sourdust.home.puzzling.org>
Message-ID: <2mekcgv94t.fsf@starship.python.net>

Mary Gardiner <mary-twisted at puzzling.org> writes:

> On Thu, May 05, 2005, Michael Hudson wrote:
>> Python appears to have more worker bees than Twisted who do the kind
>> of general work radix was asking for, despite none of them being paid
>> to do it; this is probably mostly a function of just being a bigger,
>> more visible project (after all, every Twisted user is a Python user).
>
> This probably shouldn't be assumed though. If that's all it is, OK,
> damn.

Well, maybe it's just luck, or statistics of small numbers.  After
all, Python doesn't have very many worker bees compared to the long
list of people who have checkin rights.

> But if there's something about the Python community which is
> qualitatively different and which encourages the kind of work being
> discussed, Twisted should consider emulating it.

The (maybe just perceived, maybe real) barrier to entry is probably
higher for twisted.  Maybe you need more simple-to-fix bugs :)

Cheers,
mwh

-- 
  If you give someone Fortran, he has Fortran.
  If you give someone Lisp, he has any language he pleases.
    -- Guy L. Steele Jr, quoted by David Rush in comp.lang.scheme.scsh




From foom at fuhm.net  Mon May  9 09:27:25 2005
From: foom at fuhm.net (James Y Knight)
Date: Mon, 9 May 2005 11:27:25 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <3003268B-788F-4808-A0CC-9B901ECA932E@fuhm.net>

Bug summary
______________________
Since 2005-05-03 14:10:29.270000:
Bugs opened: 16   Bugs closed: 2   Total open bugs: 364 (+14)
   Urgent: 9 (+2)
   Bug: 147 (+10)
   Feature: 138 (+2)
   Wish: 70 (+0)

New / Reopened Bugs
______________________
                     ==== Bug ====
[TRIAL] trial's default timeout isn't enforced  (yesterday)
        http://twistedmatrix.com/bugs/issue1028 opened by warner

[CONCH] Can't logout of an SFTP server  (yesterday)
        http://twistedmatrix.com/bugs/issue1027 opened by mkerrin

[DOCUMENTATION] Use twistd more in 'Twisted from Scratch'  (yesterday)
        http://twistedmatrix.com/bugs/issue1024 opened by hypatia

[DOCUMENTATION] Suggestions to make documentation more accessible  (4  
days ago)
CLOSED http://twistedmatrix.com/bugs/issue1015 opened by Predictive

[DOCUMENTATION] Improve index pages of documentation  (yesterday)
        http://twistedmatrix.com/bugs/issue1026 opened by hypatia

[DOCUMENTATION] Work more explanation into the earlier parts of  
'Twisted from Scratch'  (yesterday)
        http://twistedmatrix.com/bugs/issue1025 opened by hypatia

[DOCUMENTATION] Explain Deferred for users familiar with callbacks   
(yesterday)
        http://twistedmatrix.com/bugs/issue1022 opened by hypatia

[DOCUMENTATION] Improve description of async operations  (yesterday)
        http://twistedmatrix.com/bugs/issue1021 opened by hypatia

/projects/index.html in website  (2 days ago)
        http://twistedmatrix.com/bugs/issue1019 opened by mikewarren

win32 build instructions incorrect  (3 days ago)
        http://twistedmatrix.com/bugs/issue1017 opened by justinj

[WEBSITE] Two quirks noticed with the new WebSite  (3 days ago)
        http://twistedmatrix.com/bugs/issue1018 opened by mesozoic

setup.py all --help causes infinite loop  (4 days ago)
        http://twistedmatrix.com/bugs/issue1016 opened by justinj

Windows batch file arguments  (4 days ago)
        http://twistedmatrix.com/bugs/issue1013 opened by nicktrout

                     ==== Feature ====
[DOCUMENTATION] [NEED HELP] Evangelise async design  (yesterday)
        http://twistedmatrix.com/bugs/issue1020 opened by hypatia

[DOCUMENTATION] Use a sexy protocol in Twisted from scratch  (yesterday)
        http://twistedmatrix.com/bugs/issue1023 opened by hypatia

Proposal for Twisted documentation enhancement  (4 days ago)
        http://twistedmatrix.com/bugs/issue1014 opened by dialtone

Bugs Closed
______________________
                     ==== Bug ====
[DOCUMENTATION] Suggestions to make documentation more accessible  (4  
days ago)
        http://twistedmatrix.com/bugs/issue1015 opened by Predictive,  
closed by hypatia

                     ==== Feature ====
[TRIAL] Add doctest support to trial  (11 months ago)
        http://twistedmatrix.com/bugs/issue618 opened by spiv, closed  
by jknight





From projects at reedflute.com  Mon May  9 10:25:51 2005
From: projects at reedflute.com (Eugene Coetzee)
Date: Mon, 09 May 2005 18:25:51 +0200
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <20050508204211.GC26815@sourdust.home.puzzling.org>
References: <42792BAC.1050701@rogers.com>	<1115238976.8476.54.camel@localhost.localdomain>	<8f4623fb050504174011b553e3@mail.gmail.com>	<427BBC40.4060702@reedflute.com>
	<20050508110553.GA6728@frobozz>	<427E409E.7030105@reedflute.com>
	<20050508204211.GC26815@sourdust.home.puzzling.org>
Message-ID: <427F8F0F.8090009@reedflute.com>

Mary Gardiner wrote:

>On Sun, May 08, 2005, Eugene Coetzee wrote:
>  
>
>>It certainly helps, although it may be a bit minimalistic. 
>>    
>>
>
>A review would be appreciated :)
>
I will much rather review 
http://twistedmatrix.com/documents/current/howto/tutorial/intro and 
http://twistedmatrix.com/documents/current/howto/tutorial/factory for 
you. I have a few issues with some some of the information in there.

> Also, any suggestions on how to make
>the glossary easier to find? 
>
>  
>
I would suggest linking to 
http://twistedmatrix.com/documents/current/howto/glossary from 
http://twistedmatrix.com/documents/


regards,

Eugene Coetzee

-- 
--
===============================================
Reedflute Software Solutions

Telephone           -> +27 18 293 3236
General information -> info at reedflute.com
Project information -> projects at reedflute.com
Web                 -> www.reedflute.com
=============================================== 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050509/7c5cf29c/attachment.html>

From mcfletch at rogers.com  Mon May  9 11:42:40 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Mon, 09 May 2005 13:42:40 -0400
Subject: [Twisted-Python] I could swear I've seen this pattern *somewhere*
	in Twisted...
Message-ID: <427FA110.1040102@rogers.com>

I have a little utility module "parallel", that dispatches a callable
for "count" items in parallel, collecting them as would a DeferredList
(attached for reference).  The idea here is that you want only count
items to be actively processing at any given time, and you want to be
notified when the entire suite of items completes processing (just like
a DeferredList).

I use this when I have, for instance, 10,000 items to dispatch as part
of a "batch" process, but I don't want to negatively impact the
responsiveness of the user's front-end to the system by adding 10,000
active operations to the internal Twisted queues.  The *correct*
solution for these problems would probably be to have a
priority-handling mechanism, to allow those 10,000 items not to
interfere with high-priority events, but until we have that, it's
necessary to do these kinds of things to keep the system responsive with
large batch operations occurring in the background.

My question being (yay, finally got around to it), where is this pattern
in Twisted.  As I said in the subject, I think I've seen *something*
described as implementing this pattern, and I'd rather use a standard
mechanism than something I've constructed myself.

Enjoy all,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: parallel.py
URL: </pipermail/twisted-python/attachments/20050509/af028d2e/attachment.ksh>

From itamar at itamarst.org  Mon May  9 13:03:16 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 09 May 2005 15:03:16 -0400
Subject: [Twisted-Python] I could swear I've seen this pattern
	*somewhere* in Twisted...
In-Reply-To: <427FA110.1040102@rogers.com>
References: <427FA110.1040102@rogers.com>
Message-ID: <1115665396.8846.30.camel@localhost.localdomain>

On Mon, 2005-05-09 at 13:42 -0400, Mike C. Fletcher wrote:
> I have a little utility module "parallel", that dispatches a callable
> for "count" items in parallel, collecting them as would a DeferredList
> (attached for reference).  The idea here is that you want only count
> items to be actively processing at any given time, and you want to be
> notified when the entire suite of items completes processing (just like
> a DeferredList).

Hm. Would t.i.defer.DeferredSemaphore do what you want? There's also
DeferredQueue (courtesy of JP, 2.0 and later).




From mary-twisted at puzzling.org  Mon May  9 15:12:06 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 10 May 2005 07:12:06 +1000
Subject: [Twisted-Python] Evangelism notes...
In-Reply-To: <427F8F0F.8090009@reedflute.com>
References: <42792BAC.1050701@rogers.com>
	<1115238976.8476.54.camel@localhost.localdomain>
	<8f4623fb050504174011b553e3@mail.gmail.com>
	<427BBC40.4060702@reedflute.com> <20050508110553.GA6728@frobozz>
	<427E409E.7030105@reedflute.com>
	<20050508204211.GC26815@sourdust.home.puzzling.org>
	<427F8F0F.8090009@reedflute.com>
Message-ID: <20050509211206.GA9899@sourdust.home.puzzling.org>

On Mon, May 09, 2005, Eugene Coetzee wrote:
> Mary Gardiner wrote:
> >A review would be appreciated :)
> >
> I will much rather review 
> http://twistedmatrix.com/documents/current/howto/tutorial/intro and 
> http://twistedmatrix.com/documents/current/howto/tutorial/factory for 
> you. I have a few issues with some some of the information in there.

Any reviews you can do would be greatly appreciated.

> >Also, any suggestions on how to make
> >the glossary easier to find? 
> >
> I would suggest linking to 
> http://twistedmatrix.com/documents/current/howto/glossary from 
> http://twistedmatrix.com/documents/

There's a more general problem here about needing to do something about
/documents/ - it hasn't been touched since the 1.3 release!

-Mary



From bob at redivi.com  Mon May  9 15:22:42 2005
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 9 May 2005 17:22:42 -0400
Subject: [Twisted-Python] Twisted on Mac OS X 10.4
In-Reply-To: <c615ac0805050812259d38133@mail.gmail.com>
References: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>
	<7a59f02505050809334e7984fe@mail.gmail.com>
	<427E55BC.1050701@dreid.org>
	<7ADDD47F-1045-47C5-8435-FD82847C8832@redivi.com>
	<c615ac0805050812259d38133@mail.gmail.com>
Message-ID: <BD0BAECB-0DBD-4DE6-A41C-4430EDAF5448@redivi.com>


On May 8, 2005, at 3:25 PM, Max server wrote:

> I tried installing it on a 10.4 Server and got the following
>
> Traceback (most recent call last):
>   File "setup.py", line 20, in ?
>     from twisted import copyright
>   File "./twisted/__init__.py", line 21, in ?
>     raise ImportError, "you need zope.interface installed
> (http://zope.org/Products/ZopeInterface/)"
> ImportError: you need zope.interface installed
> (http://zope.org/Products/ZopeInterface/)
>
> Then I downloaded ZopeInterface 3.0.1 from
> http://zope.org/Products/ZopeInterface/ and tried to install it but
> had the following error -of course xcode 2 is installed-

That's an issue you should bring up with the zope.interface guys.  It  
sounds like it's not compatible with gcc4 and/or the headers in  
Tiger.  You can install a version that was built on Panther (i.e.  
from http://pythonmac.org/packages/) or you can try switching your  
compiler to gcc 3.3 with "sudo gcc_select 3.3" before building  
zope.interface.

-bob




From bear at code-bear.com  Mon May  9 18:13:19 2005
From: bear at code-bear.com (Mike Taylor)
Date: Mon, 9 May 2005 20:13:19 -0400
Subject: [Twisted-Python] Twisted on Mac OS X 10.4
In-Reply-To: <BD0BAECB-0DBD-4DE6-A41C-4430EDAF5448@redivi.com>
References: <46E0B559-28DB-4F57-95CE-C82F51CFCD02@gmail.com>
	<7a59f02505050809334e7984fe@mail.gmail.com>
	<427E55BC.1050701@dreid.org>
	<7ADDD47F-1045-47C5-8435-FD82847C8832@redivi.com>
	<c615ac0805050812259d38133@mail.gmail.com>
	<BD0BAECB-0DBD-4DE6-A41C-4430EDAF5448@redivi.com>
Message-ID: <69d5fbfd5e0ff841561e075984c17c58@code-bear.com>

On May 9, 2005, at 5:22 PM, Bob Ippolito wrote:

>
> On May 8, 2005, at 3:25 PM, Max server wrote:
>
>> I tried installing it on a 10.4 Server and got the following
>>
>> Traceback (most recent call last):
>>   File "setup.py", line 20, in ?
>>     from twisted import copyright
>>   File "./twisted/__init__.py", line 21, in ?
>>     raise ImportError, "you need zope.interface installed
>> (http://zope.org/Products/ZopeInterface/)"
>> ImportError: you need zope.interface installed
>> (http://zope.org/Products/ZopeInterface/)
>>
>> Then I downloaded ZopeInterface 3.0.1 from
>> http://zope.org/Products/ZopeInterface/ and tried to install it but
>> had the following error -of course xcode 2 is installed-
>
> That's an issue you should bring up with the zope.interface guys.  It 
> sounds like it's not compatible with gcc4 and/or the headers in Tiger. 
>  You can install a version that was built on Panther (i.e. from 
> http://pythonmac.org/packages/) or you can try switching your compiler 
> to gcc 3.3 with "sudo gcc_select 3.3" before building zope.interface.
>
> -bob
>

I ran into this yesterday and sent the zope interface team a patch file 
to fix it.

---
Bear
http://code-bear.com

Open Source Applications Foundation (OSAF)
http://www.osafoundation.org

PGP Fingerprint = 9996 719F 973D B11B E111  D770 9331 E822 40B3 CD29



-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 186 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20050509/a1db626e/attachment.sig>

From mcfletch at rogers.com  Mon May  9 19:02:42 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Mon, 09 May 2005 21:02:42 -0400
Subject: [Twisted-Python] I could swear I've seen this pattern	*somewhere*
	in Twisted...
In-Reply-To: <1115665396.8846.30.camel@localhost.localdomain>
References: <427FA110.1040102@rogers.com>
	<1115665396.8846.30.camel@localhost.localdomain>
Message-ID: <42800832.4070709@rogers.com>

Itamar Shtull-Trauring wrote:

>On Mon, 2005-05-09 at 13:42 -0400, Mike C. Fletcher wrote:
>  
>
>>I have a little utility module "parallel", that dispatches a callable
>>for "count" items in parallel, collecting them as would a DeferredList
>>(attached for reference).  The idea here is that you want only count
>>items to be actively processing at any given time, and you want to be
>>notified when the entire suite of items completes processing (just like
>>a DeferredList).
>>    
>>
>
>Hm. Would t.i.defer.DeferredSemaphore do what you want? There's also
>DeferredQueue (courtesy of JP, 2.0 and later).
>  
>
DeferredSemaphore certainly makes it much simpler!  Attached so that
others can see how much it simplifies the pattern. Not quite short
enough to be "too short to bother wrapping in a function", but far less
involved all-in-all, and really too short even to bother with a class.

Thanks,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: parallel.py
URL: </pipermail/twisted-python/attachments/20050509/8a75f996/attachment.ksh>

From foom at fuhm.net  Mon May  9 20:47:54 2005
From: foom at fuhm.net (James Y Knight)
Date: Mon, 9 May 2005 22:47:54 -0400
Subject: [Twisted-Python] I could swear I've seen this pattern	*somewhere*
	in Twisted...
In-Reply-To: <42800832.4070709@rogers.com>
References: <427FA110.1040102@rogers.com>
	<1115665396.8846.30.camel@localhost.localdomain>
	<42800832.4070709@rogers.com>
Message-ID: <09C25CBA-1DC5-4B1A-9EA7-8FFF4D7E914D@fuhm.net>

How about this? sem.run simplifies things a lot.
Note also consumeErrors=True to DL.  You probably always want that,  
as it causes the errors to not get propagated to the toplevel error  
printer, but rather only reported by the DL.

def parallel( iterable, count, callable, *args, **named ):
     sem = defer.DeferredSemaphore(count)
     dl = [sem.run(callable, item, *args, **named) for item in iterable]
     return defer.DeferredList(dl, consumeErrors=True)

James



From exarkun at divmod.com  Mon May  9 21:04:54 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Tue, 10 May 2005 03:04:54 GMT
Subject: [Twisted-Python] I could swear I've seen this pattern	*somewhere*
	in Twisted...
In-Reply-To: <42800832.4070709@rogers.com>
Message-ID: <20050510030454.15422.298300077.divmod.quotient.29233@ohm>

On Mon, 09 May 2005 21:02:42 -0400, "Mike C. Fletcher" <mcfletch at rogers.com> wrote:
>Itamar Shtull-Trauring wrote:
>
>>On Mon, 2005-05-09 at 13:42 -0400, Mike C. Fletcher wrote:
>>
>>
>>>I have a little utility module "parallel", that dispatches a callable
>>>for "count" items in parallel, collecting them as would a DeferredList
>>>(attached for reference).  The idea here is that you want only count
>>>items to be actively processing at any given time, and you want to be
>>>notified when the entire suite of items completes processing (just like
>>>a DeferredList).
>>>
>>>
>>
>>Hm. Would t.i.defer.DeferredSemaphore do what you want? There's also
>>DeferredQueue (courtesy of JP, 2.0 and later).
>>
>>
>DeferredSemaphore certainly makes it much simpler!  Attached so that
>others can see how much it simplifies the pattern. Not quite short
>enough to be "too short to bother wrapping in a function", but far less
>involved all-in-all, and really too short even to bother with a class.
>
>Thanks,
>Mike

  I'd be interested to hear about the relative performance of your two solutions.  I would expect DeferredSemaphore to create many more Deferreds, and thus perhaps perform less well.

  Also, Glyph and I did some work for Quotient today on some code which may be applicable to this kind of problem.  Here's an example:

    from twisted.internet import defer
    from atop.tpython import Cooperator

    def parallel(iterable, count, callable, *args, **named):
        source = iter(iterable)
        def work():
            for elem in source:
                yield callable(elem, *args, **named)
        coop = Cooperator()
        tasks = []
        for i in range(count):
            tasks.append(coop.coiterate(work()))
        return defer.DeferredList(tasks)

  Note that this returns a DeferredList of each "task", rather than of each result.  If results are desired as well, adding a callback (before yielding) to the result of callable() inside work() which saved the result, then adding a callback to the DeferredList which discarded the list of task results and returned the saved results would accomplish this.

  Note also that Cooperator is in a branch at the moment.  It'll most likely be in Quotient trunk sometime tomorrow.

  Jp



From mcfletch at rogers.com  Mon May  9 22:12:29 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Tue, 10 May 2005 00:12:29 -0400
Subject: [Twisted-Python] I could swear I've seen this pattern	*somewhere*
	in Twisted...
In-Reply-To: <09C25CBA-1DC5-4B1A-9EA7-8FFF4D7E914D@fuhm.net>
References: <427FA110.1040102@rogers.com>
	<1115665396.8846.30.camel@localhost.localdomain>
	<42800832.4070709@rogers.com>
	<09C25CBA-1DC5-4B1A-9EA7-8FFF4D7E914D@fuhm.net>
Message-ID: <428034AD.1030102@rogers.com>

James Y Knight wrote:

> How about this? sem.run simplifies things a lot.
> Note also consumeErrors=True to DL.  You probably always want that, 
> as it causes the errors to not get propagated to the toplevel error 
> printer, but rather only reported by the DL.
>
> def parallel( iterable, count, callable, *args, **named ):
>     sem = defer.DeferredSemaphore(count)
>     dl = [sem.run(callable, item, *args, **named) for item in iterable]
>     return defer.DeferredList(dl, consumeErrors=True)

Well, guess that gets it down to the level where it's no longer
necessary to have it wrapped in a function.  That's great.

I didn't even think to look at the base classes when I was reading the
code for DeferredSemaphore.  This is why reference documents are good
things :) .

BTW, anyone know what all this funky stuff in the definition of run is for?

    def run(*args, **kwargs):
        ...
        if len(args) < 2:
            if not args:
                raise TypeError("run() takes at least 2 arguments, none
given.")
            raise TypeError("%s.run() takes at least 2 arguments, 1
given" % (
                args[0].__class__.__name__,))
        self, f = args[:2]
        args = args[2:]

why not just:

    def run( self, f, *args, **kwargs ):

?

Thanks,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From mcfletch at rogers.com  Mon May  9 22:30:12 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Tue, 10 May 2005 00:30:12 -0400
Subject: [Twisted-Python] I could swear I've seen this pattern	*somewhere*
	in Twisted...
In-Reply-To: <20050510030454.15422.298300077.divmod.quotient.29233@ohm>
References: <20050510030454.15422.298300077.divmod.quotient.29233@ohm>
Message-ID: <428038D4.1010408@rogers.com>

Jp Calderone wrote:

> I'd be interested to hear about the relative performance of your two
> solutions.  I would expect DeferredSemaphore to create many more
> Deferreds, and thus perhaps perform less well.

Hmm, never really worried about raw performance overhead of the
scheduling operations... should I be?  I'd been under the impression
that the deferred objects were rather lightweight.  Within our apps I'm
more concerned about getting the queues so full that they can't get
through to process the high-priority events.

>  Also, Glyph and I did some work for Quotient today on some code which
> may be applicable to this kind of problem.  Here's an example:
>
>    from twisted.internet import defer
>    from atop.tpython import Cooperator
>
>    def parallel(iterable, count, callable, *args, **named):
>        source = iter(iterable)
>        def work():
>            for elem in source:
>                yield callable(elem, *args, **named)
>        coop = Cooperator()
>        tasks = []
>        for i in range(count):
>            tasks.append(coop.coiterate(work()))
>        return defer.DeferredList(tasks)
>
>  Note that this returns a DeferredList of each "task", rather than of
> each result.  If results are desired as well, adding a callback
> (before yielding) to the result of callable() inside work() which
> saved the result, then adding a callback to the DeferredList which
> discarded the list of task results and returned the saved results
> would accomplish this.
>
>  Note also that Cooperator is in a branch at the moment.  It'll most
> likely be in Quotient trunk sometime tomorrow.

Seems okay, but Jame's implementation of parallel with
DeferredSemaphore.run seems less complex as an implementation (to me
anyway), but then I haven't really gotten into the whole "flow" Twisted
sub-culture yet :) .

Your version really does highlight the possibility of just passing in an
"iterapply" instance instead of defining the "work" function inside
(especially given the need to alter the work function to retrieve the
results).  I am curious, though, doesn't your version cause the source
to be iterated over count times in total?  I *think* you want to share
the work() instance among the coop.coiterate calls (at least, you would
if I understand how everything works from their names).

Have fun,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From Thomas.Jung at iisb.fraunhofer.de  Tue May 10 02:25:10 2005
From: Thomas.Jung at iisb.fraunhofer.de (Thomas Jung)
Date: Tue, 10 May 2005 10:25:10 +0200
Subject: [Twisted-Python] need help with waitForDeferred...
Message-ID: <200505101025.10696.Thomas.Jung@iisb.fraunhofer.de>

Hi everybody,

I am new to twisted, and still experimenting.
Found the following code somewhere, looks very interesting,
but when I run the script (python 2.3.3), just nothing happens....
What am I missing ?

Any hint greatly appreciated, thank you !



from twisted.internet import reactor
from twisted.internet import defer

waitFor = defer.waitForDeferred

def getSomeDeferred():
    d = defer.Deferred()
    reactor.callLater(
        2, d.callback, 'This is a string that yells "foo!"')
    return d

def anotherDeferred(needle, haystack):
    d = defer.Deferred()
    reactor.callLater(
        2, d.callback, haystack.find(needle))
    return d

@defer.deferredGenerator
def find(needle):
    d = waitFor(getSomeDeferred())
    yield d
    haystack = d.getResult()
    print 'I got my first deferred result'
    d = waitFor(anotherDeferred(needle, haystack))
    yield d
    print 'I found', repr(needle), 'at character', d.getResult()
    return

find('foo!')
reactor.run()




-- 
Thomas Jung
Fraunhofer-Institut IISB
91058 Erlangen, Schottkystr. 10
+49 9131 761264



From manlio_perillo at libero.it  Tue May 10 02:50:08 2005
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue, 10 May 2005 10:50:08 +0200
Subject: [Twisted-Python] I could swear I've seen this
	pattern	*somewhere* in Twisted...
In-Reply-To: <20050510030454.15422.298300077.divmod.quotient.29233@ohm>
References: <42800832.4070709@rogers.com>
Message-ID: <5.2.1.1.0.20050510104848.00b31498@popmail.libero.it>

At 03.04 10/05/2005 +0000, you wrote:
>On Mon, 09 May 2005 21:02:42 -0400, "Mike C. Fletcher" 
><mcfletch at rogers.com> wrote:
>>Itamar Shtull-Trauring wrote:
>>
>>>On Mon, 2005-05-09 at 13:42 -0400, Mike C. Fletcher wrote:
>>>
>>>
>>>>I have a little utility module "parallel", that dispatches a callable
>>>>for "count" items in parallel, collecting them as would a DeferredList
>>>>(attached for reference).  The idea here is that you want only count
>>>>items to be actively processing at any given time, and you want to be
>>>>notified when the entire suite of items completes processing (just like
>>>>a DeferredList).
>>>>
>>>
>>>Hm. Would t.i.defer.DeferredSemaphore do what you want? There's also
>>>DeferredQueue (courtesy of JP, 2.0 and later).
>>>
>>DeferredSemaphore certainly makes it much simpler!  Attached so that
>>others can see how much it simplifies the pattern. Not quite short
>>enough to be "too short to bother wrapping in a function", but far less
>>involved all-in-all, and really too short even to bother with a class.
>>
>>Thanks,
>>Mike
>
>  I'd be interested to hear about the relative performance of your two 
> solutions.  I would expect DeferredSemaphore to create many more 
> Deferreds, and thus perhaps perform less well.
>
>  Also, Glyph and I did some work for Quotient today on some code which 
> may be applicable to this kind of problem.  Here's an example:
>
>    from twisted.internet import defer
>    from atop.tpython import Cooperator
>
>    def parallel(iterable, count, callable, *args, **named):
>        source = iter(iterable)
>        def work():
>            for elem in source:
>                yield callable(elem, *args, **named)
>        coop = Cooperator()
>        tasks = []
>        for i in range(count):
>            tasks.append(coop.coiterate(work()))
>        return defer.DeferredList(tasks)
>
>  Note that this returns a DeferredList of each "task", rather than of 
> each result.  If results are desired as well, adding a callback (before 
> yielding) to the result of callable() inside work() which saved the 
> result, then adding a callback to the DeferredList which discarded the 
> list of task results and returned the saved results would accomplish this.
>
>  Note also that Cooperator is in a branch at the moment.  It'll most 
> likely be in Quotient trunk sometime tomorrow.


Regards.

I don't know if it is pertinent, but I have written this recipe:
http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/410986



Manlio Perillo




From andrew-twisted at puzzling.org  Tue May 10 03:18:41 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 10 May 2005 19:18:41 +1000
Subject: [Twisted-Python] need help with waitForDeferred...
In-Reply-To: <200505101025.10696.Thomas.Jung@iisb.fraunhofer.de>
References: <200505101025.10696.Thomas.Jung@iisb.fraunhofer.de>
Message-ID: <20050510091841.GD29662@frobozz>

On Tue, May 10, 2005 at 10:25:10AM +0200, Thomas Jung wrote:
> Hi everybody,
> 
> I am new to twisted, and still experimenting.
> Found the following code somewhere, looks very interesting,
> but when I run the script (python 2.3.3), just nothing happens....
> What am I missing ?
[...]
> 
> @defer.deferredGenerator
> def find(needle):

The @decorator syntax is new in Python 2.4, so you'd get a SyntaxError if
you tried to run this under Python 2.3.

It works as expected for me with Python 2.4 and Twisted 2.0: it prints

    I got my first deferred result
    I found 'foo!' at character 29

and then hangs.

-Andrew.




From Thomas.Jung at iisb.fraunhofer.de  Tue May 10 03:44:22 2005
From: Thomas.Jung at iisb.fraunhofer.de (Thomas Jung)
Date: Tue, 10 May 2005 11:44:22 +0200
Subject: [Twisted-Python] need help with waitForDeferred...
In-Reply-To: <20050510091841.GD29662@frobozz>
References: <200505101025.10696.Thomas.Jung@iisb.fraunhofer.de>
	<20050510091841.GD29662@frobozz>
Message-ID: <200505101144.22707.Thomas.Jung@iisb.fraunhofer.de>

On Tuesday 10 May 2005 11:18, Andrew Bennetts wrote:
> On Tue, May 10, 2005 at 10:25:10AM +0200, Thomas Jung wrote:
> > Hi everybody,
> >
> > I am new to twisted, and still experimenting.
> > Found the following code somewhere, looks very interesting,
> > but when I run the script (python 2.3.3), just nothing happens....
> > What am I missing ?
>
> [...]
>
> > @defer.deferredGenerator
> > def find(needle):
>
> The @decorator syntax is new in Python 2.4, so you'd get a SyntaxError if
> you tried to run this under Python 2.3.
>
> It works as expected for me with Python 2.4 and Twisted 2.0: it prints
>
>     I got my first deferred result
>     I found 'foo!' at character 29
>
> and then hangs.
>
> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


too stupid ... just replaced that @ by a # ...
updated to 2.4.1, everything fine.

Thanks a lot !


-- 
Dr. Thomas Jung
Fraunhofer-Institut IISB
91058 Erlangen, Schottkystr. 10
+49 9131 761264



From Thomas.Jung at iisb.fraunhofer.de  Tue May 10 04:26:38 2005
From: Thomas.Jung at iisb.fraunhofer.de (Thomas Jung)
Date: Tue, 10 May 2005 12:26:38 +0200
Subject: [Twisted-Python] how to cancel a long running job on a server ?
Message-ID: <200505101226.38855.Thomas.Jung@iisb.fraunhofer.de>

Hello,

another newbie question:

I have a server, where I can remotely call a function like remote_calc(), 
using the perspective broker,
which returns giving a result.
Sometimes, I want to cancel that computation, calling e.g. remote_cancel() 
(which remains to be implemented.....)

How can I have remote_calc() not to return before the result is done, and 
still be able to call remote_cancel while its running ?

I tried this:
=============================================================

from twisted.spread import pb
from twisted.internet import reactor,defer,threads

@defer.deferredGenerator
def calc(adeferred):
    print "this is calc..."
    d=defer.waitForDeferred(adeferred)
    yield d
    result=d.getResult()
    print "calc: result=",result
    return


def do_calc():
    print "do_calc starting..."
    for i in range(10000):
        for j in range(10000):
            pass
    print "do_calc done..."
    return 456


class ServerObject(pb.Root):

    def remote_cancel(self):
        print "this is server::cancel..."

    def remote_calc(self,result):
        print "server::calc: ..."

       # thought this would wait until done, but doesnt....

        calc(threads.deferToThread(do_calc))
        print "server::calc: returning"
        return 123


if __name__ == '__main__':
    factory = pb.PBServerFactory(ServerObject())
    reactor.listenTCP(8800, factory)
    reactor.run()

===============================================================================

My expectation was that the call to "calc" in remote_calc would block, but it 
does not.
And if I dont defer the calculation to a thread, remote_cancel is not done 
until calculation finishes ...

Maybe there is some completely different way to do this in twisted ?

Thanks for any hint !



-- 
Dr. Thomas Jung
Fraunhofer-Institut IISB
91058 Erlangen, Schottkystr. 10
+49 9131 761264



From dangoor at gmail.com  Tue May 10 06:27:27 2005
From: dangoor at gmail.com (Kevin Dangoor)
Date: Tue, 10 May 2005 08:27:27 -0400
Subject: [Twisted-Python] Blocking on deferreds during unit tests (e.g.
	deferredResult)
In-Reply-To: <1115564702.8059.28.camel@localhost.localdomain>
References: <op.sqcgh7jny3d107@aspen> <427BB66E.5070509@divmod.com>
	<60ed19d40505062024fe69940@mail.gmail.com>
	<3f085ecd050507080273093f6a@mail.gmail.com>
	<1115564702.8059.28.camel@localhost.localdomain>
Message-ID: <3f085ecd05051005274c3088e1@mail.gmail.com>

On 5/8/05, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
> On Sat, 2005-05-07 at 11:02 -0400, Kevin Dangoor wrote:
> 
> > Using gthreadless, one could interface sqlobject and Twisted's db
> > interface to take advantage of the work done in Twisted Enterprise to
> > make sqlobject-style database access safe for Twisted. (It's
> > undoubtedly possible without gthreadless, but it seems like it would
> > be a lot easier)
> 
> Nope, that wouldn't work. greenlets do *not* make blocking APIs ot
> block.

I understand that... The Twisted Enterprise database api, if I
understand correctly, uses the Twisted threadpool to wrap otherwise
blocking database calls behind new calls that return deferreds.
sqlobject, on the otherhand, was written in a traditional
(non-callback) style.

My thought was to use gthreadless to create an interface between
Twisted Enterprise (ADBAPI?) and sqlobject. For sqlobject, it would
look just like the blocking interface it was used to. But, it would be
able to take advantage of the thread management already done by
ADBAPI.

Kevin



From exarkun at divmod.com  Tue May 10 07:01:17 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Tue, 10 May 2005 13:01:17 GMT
Subject: [Twisted-Python] Blocking on deferreds during unit tests (e.g.
	deferredResult)
In-Reply-To: <3f085ecd05051005274c3088e1@mail.gmail.com>
Message-ID: <20050510130117.15422.1382701427.divmod.quotient.30085@ohm>

On Tue, 10 May 2005 08:27:27 -0400, Kevin Dangoor <dangoor at gmail.com> wrote:
>On 5/8/05, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>> On Sat, 2005-05-07 at 11:02 -0400, Kevin Dangoor wrote:
>>
>> > Using gthreadless, one could interface sqlobject and Twisted's db
>> > interface to take advantage of the work done in Twisted Enterprise to
>> > make sqlobject-style database access safe for Twisted. (It's
>> > undoubtedly possible without gthreadless, but it seems like it would
>> > be a lot easier)
>>
>> Nope, that wouldn't work. greenlets do *not* make blocking APIs ot
>> block.
>
>I understand that... The Twisted Enterprise database api, if I
>understand correctly, uses the Twisted threadpool to wrap otherwise
>blocking database calls behind new calls that return deferreds.
>sqlobject, on the otherhand, was written in a traditional
>(non-callback) style.
>
>My thought was to use gthreadless to create an interface between
>Twisted Enterprise (ADBAPI?) and sqlobject. For sqlobject, it would
>look just like the blocking interface it was used to. But, it would be
>able to take advantage of the thread management already done by
>ADBAPI.

  SQLObject doesn't implement DB-API, so it is not usable with t.e.adbapi.  The interface it presents is not very amenable to isolation in a separate thread, so any mechanism to using it asynchronously will be awkward.

  Jp



From itamar at itamarst.org  Tue May 10 08:28:40 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 10 May 2005 10:28:40 -0400
Subject: [Twisted-Python] how to cancel a long running job on a server ?
In-Reply-To: <200505101226.38855.Thomas.Jung@iisb.fraunhofer.de>
References: <200505101226.38855.Thomas.Jung@iisb.fraunhofer.de>
Message-ID: <1115735320.8769.19.camel@localhost.localdomain>

On Tue, 2005-05-10 at 12:26 +0200, Thomas Jung wrote:

> I have a server, where I can remotely call a function like remote_calc(), 
> using the perspective broker,
> which returns giving a result.
> Sometimes, I want to cancel that computation, calling e.g. remote_cancel() 
> (which remains to be implemented.....)
> 
> How can I have remote_calc() not to return before the result is done, and 
> still be able to call remote_cancel while its running ?
>     def remote_calc(self,result):
>         print "server::calc: ..."
> 
>        # thought this would wait until done, but doesnt....
> 
>         calc(threads.deferToThread(do_calc))
>         print "server::calc: returning"
>         return 123

You probably want to return the result of calc() here - if you return
deferred from PB function it will know not to return until Deferred has
result.




From radeex at gmail.com  Tue May 10 17:50:57 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 11 May 2005 09:50:57 +1000
Subject: [Twisted-Python] Blocking on deferreds during unit tests (e.g.
	deferredResult)
In-Reply-To: <3f085ecd05051005274c3088e1@mail.gmail.com>
References: <op.sqcgh7jny3d107@aspen> <427BB66E.5070509@divmod.com>
	<60ed19d40505062024fe69940@mail.gmail.com>
	<3f085ecd050507080273093f6a@mail.gmail.com>
	<1115564702.8059.28.camel@localhost.localdomain>
	<3f085ecd05051005274c3088e1@mail.gmail.com>
Message-ID: <60ed19d4050510165059c07a2e@mail.gmail.com>

On 5/10/05, Kevin Dangoor <dangoor at gmail.com> wrote:
> I understand that... The Twisted Enterprise database api, if I
> understand correctly, uses the Twisted threadpool to wrap otherwise
> blocking database calls behind new calls that return deferreds.
> sqlobject, on the otherhand, was written in a traditional
> (non-callback) style.
> 
> My thought was to use gthreadless to create an interface between
> Twisted Enterprise (ADBAPI?) and sqlobject. For sqlobject, it would
> look just like the blocking interface it was used to. But, it would be
> able to take advantage of the thread management already done by
> ADBAPI.


This won't work because gthreadless doesn't allow you to write
interfaces that look synchronous. It only lets *you* use asynchronous
interfaces in a synchronous-looking way. That is to say, your code
that wants to be synchronous-looking still isn't 100% transparent; you
need to call blockOn() around every Deferred you get. And a
gthreadless-function always returns a Deferred itself, so there's
really no way you could use the SQLObject code to talk to an
asynchronous backend.


-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From mary-twisted at puzzling.org  Tue May 10 19:00:30 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Wed, 11 May 2005 11:00:30 +1000
Subject: [Twisted-Python] Re: [Twisted-commits] r13763 - fix broken link to
	divmod.org.
In-Reply-To: <E1DVfXS-0007yh-00@wolfwood>
References: <E1DVfXS-0007yh-00@wolfwood>
Message-ID: <20050511010030.GB16760@home.puzzling.org>

On Tue, May 10, 2005, Stephen Thorne wrote:
> Author: stephen
> Date: Tue May 10 18:57:26 2005
> New Revision: 13763
> 
> Modified:
>    trunk/doc/web/howto/woven.xhtml
> Log:
> fix broken link to divmod.org.

I'll get to this eventually if you don't, but that actually needs to be
fixed in about six documents. (I feel better about our need to set up
redirects on tm.comn now that I know that divmod.org hasn't done it
either.)

-Mary



From Thomas.Jung at iisb.fraunhofer.de  Wed May 11 03:38:10 2005
From: Thomas.Jung at iisb.fraunhofer.de (Thomas Jung)
Date: Wed, 11 May 2005 11:38:10 +0200
Subject: [Twisted-Python] how to cancel a long running job on a server ?
In-Reply-To: <1115735320.8769.19.camel@localhost.localdomain>
References: <200505101226.38855.Thomas.Jung@iisb.fraunhofer.de>
	<1115735320.8769.19.camel@localhost.localdomain>
Message-ID: <200505111138.10465.Thomas.Jung@iisb.fraunhofer.de>

On Tuesday 10 May 2005 16:28, Itamar Shtull-Trauring wrote:
> On Tue, 2005-05-10 at 12:26 +0200, Thomas Jung wrote:
> > I have a server, where I can remotely call a function like remote_calc(),
> > using the perspective broker,
> > which returns giving a result.
> > Sometimes, I want to cancel that computation, calling e.g.
> > remote_cancel() (which remains to be implemented.....)
> >
> > How can I have remote_calc() not to return before the result is done, and
> > still be able to call remote_cancel while its running ?
> >     def remote_calc(self,result):
> >         print "server::calc: ..."
> >
> >        # thought this would wait until done, but doesnt....
> >
> >         calc(threads.deferToThread(do_calc))
> >         print "server::calc: returning"
> >         return 123
>
> You probably want to return the result of calc() here - if you return
> deferred from PB function it will know not to return until Deferred has
> result.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



Thanks !

I could not believe that you can even return a deferred from a remote server 
... thats really great !





From matt at pollenation.net  Wed May 11 06:51:28 2005
From: matt at pollenation.net (Matt Goodall)
Date: Wed, 11 May 2005 13:51:28 +0100
Subject: [Twisted-Python] adbapi, PostgreSQL and Unicode
In-Reply-To: <427BEAAC.2060208@dkp.com>
References: <427BEAAC.2060208@dkp.com>
Message-ID: <4281FFD0.6010707@pollenation.net>

Michal Eldar wrote:

> I keep getting - Unhandled error in Deferred

You should attach an errback to the deferred and handle, or at least
log, the exception. That's what "Unhandled error in Deferred" means ;-).

>
> I'm trying to perform an INSERT on my db (using adbapi with *pgdb*
> module).
> INSERT which comprises *Unicode* string
> e.g. -
> unicodeChar1 = u"Character=[\N{GREEK CAPITAL LETTER GAMMA}]"
>
> the db is defined to Unicode
> *client_encoding* value is set to *Unicode* when checking its value in
> *cp_openfun *called function
> execute the same INSERT directly with *pgdb *works great
>
> Does anyone has experience with adbapi with Unicode db ?!?!

Yes, but only using psycopg and pgasync. It works fine for me.

> Do I need to define something special for this to happen ?? 

You shouldn't need to. adbapi is nothing more that a wrapper around the
real (blocking) database module that dispatches db calls to a thread.

Attach the errback first and find out what the exception actually is
before trying to fix anything. It could be something as simple as a typo
that you haven't spotted or it could be something subtle. It's
impossible to know at this stage.

I suspect you're building the a complete SQL string and passing that to
execute() when you should be passing a SQL string with insertion markers
and a tuple/dict of args. But, that's just a guess ;-).

Hope this helps.

Cheers, Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt at pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.




From mailinglists at smartology.nl  Wed May 11 07:28:17 2005
From: mailinglists at smartology.nl (Remy Cool)
Date: Wed, 11 May 2005 15:28:17 +0200
Subject: [Twisted-Python] adbapi, PostgreSQL and Unicode
In-Reply-To: <4281FFD0.6010707@pollenation.net>
References: <427BEAAC.2060208@dkp.com> <4281FFD0.6010707@pollenation.net>
Message-ID: <42820871.6020906@smartology.nl>

Matt Goodall wrote:
> Michal Eldar wrote:
> 
> 
>>I keep getting - Unhandled error in Deferred
> 
> 
> You should attach an errback to the deferred and handle, or at least
> log, the exception. That's what "Unhandled error in Deferred" means ;-).
> 
> 
>>I'm trying to perform an INSERT on my db (using adbapi with *pgdb*
>>module).
>>INSERT which comprises *Unicode* string
>>e.g. -
>>unicodeChar1 = u"Character=[\N{GREEK CAPITAL LETTER GAMMA}]"
>>
>>the db is defined to Unicode
>>*client_encoding* value is set to *Unicode* when checking its value in
>>*cp_openfun *called function
>>execute the same INSERT directly with *pgdb *works great
>>
>>Does anyone has experience with adbapi with Unicode db ?!?!

<snip>

I also use pgdb with adbapi and unicode without problems. Insert's with
unicode strings should not be problem even if the database is set to
SQLASCII. The pgdb module inspects the string before sending it to the
postgres machinery. If it's a unicode string (isinstance('the string',
unicode) ) it's encoded to utf-8.

I've submitted a patch to Darcy at pygresql.org for enhanced unicode
support for pgdb. This patch takes care of the client_encoding stuff and
makes it possible to fetch unicode strings from select queries.

-- Remy --




From itamar at itamarst.org  Wed May 11 11:02:29 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 11 May 2005 13:02:29 -0400
Subject: [Twisted-Python] how to cancel a long running job on a server ?
In-Reply-To: <200505111138.10465.Thomas.Jung@iisb.fraunhofer.de>
References: <200505101226.38855.Thomas.Jung@iisb.fraunhofer.de>
	<1115735320.8769.19.camel@localhost.localdomain>
	<200505111138.10465.Thomas.Jung@iisb.fraunhofer.de>
Message-ID: <1115830950.8381.22.camel@localhost.localdomain>

On Wed, 2005-05-11 at 11:38 +0200, Thomas Jung wrote:

> I could not believe that you can even return a deferred from a remote server 
> ... thats really great !

It's not that the PB protocol knows about Deferreds, it doesn't, but
rather the PB implementation in Twisted does the right thing when you
return a Deferred.




From db3l at fitlinxx.com  Wed May 11 17:28:59 2005
From: db3l at fitlinxx.com (David Bolen)
Date: 11 May 2005 19:28:59 -0400
Subject: [Twisted-Python] Re: Hanging test cases (Was: Evangelism notes...)
References: <u1x8jkhum.fsf@fitlinxx.com>
	<20050507231316.15422.715887765.divmod.quotient.24760@ohm>
Message-ID: <umzr1cpfo.fsf@fitlinxx.com>

Jp Calderone <exarkun at divmod.com> writes:

(...)  
> It may be the case that none of the bugs in trial synchronous
> result utilities cause problems for you.  If they don't, I can
> understand how it would not be a big priority for you to move away
> from them (after all, I'm sure you have plenty of things that *are*
> causing you problems now that you would much rather spend time on).
> I recommend simply keeping this conversation in mind if and when you
> run into problems with your use of deferredResult and deferredError
> in the future and that you not let such problems take you by
> surprise.  You can rest relatively easily in the knowledge that
> deferredResult and friends will not disappear from Twisted
> overnight.  Broken as they are, they are clearly part of a public
> API and so will remain long enough to satisfy backwards
> compatibility requirements.

Seems like as good a way as any to end this thread for me, since I
definitely agree with the above.  And yes, I'm aware (or believe I am)
of the risks I may be incurring by using these methods, as well as
using unittest rather than trial, and will certainly continue to
follow Twisted actively to hopefully catch changes that may impact my
current choices.

-- David





From db3l at fitlinxx.com  Wed May 11 17:34:15 2005
From: db3l at fitlinxx.com (David Bolen)
Date: 11 May 2005 19:34:15 -0400
Subject: [Twisted-Python] Re: Hanging test cases (Was: Evangelism notes...)
References: <C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>
	<20050506060050.15422.1130296805.divmod.quotient.21435@ohm>
	<uk6mcjc0f.fsf@fitlinxx.com>
	<6EA197D2-A573-4175-A0FB-9C5005389D68@redivi.com>
	<ufyx0j7dw.fsf@fitlinxx.com>
	<BDDD7C2C-EB8A-4601-8545-565ABEC46EAD@redivi.com>
	<u1x8jkhum.fsf@fitlinxx.com>
	<60ed19d405050718373b3463d4@mail.gmail.com>
Message-ID: <uis1pcp6w.fsf@fitlinxx.com>

Christopher Armstrong <radeex at gmail.com> writes:

> Uhhh, maybe I'm missing something here, but as I understand it (I
> probably should, being the guy who wrote deferredgenerators), that
> code is:
> 
>     testCase = deferredGenerator(testCase)
> 
> after the definition of the method, or even:
> 
>     @deferredGenerator
> 
> before the definition of the method.

But then who actually performs the iteration over the test case to
trigger the generator?  Clearly some top level code needs to invoke
the reactor.run() and at some point iterate over testCase while
beneath a running reactor.  We're just using unittest, so something
would need to be added to serve as the basic framework for that sort
of test.

I'm guessing from your uncertainty that trial - which I haven't kept
up with changes for 2.0 - probably provides a mode to do this
automatically, so if I were using trial you'd be correct and it
wouldn't be that much more work to integrate the new deferred
generator support into the tests.

Note that independent of use in tests, I'm definitely intrigued by
these techniques (as I was in the early flow support in Twisted 1.x)
so when we start the migration to 2.0 we'll probably look at
incorporating this approach into the code base when reasonable.

-- David




From grant at osafoundation.org  Wed May 11 17:47:02 2005
From: grant at osafoundation.org (Grant Baillie)
Date: Wed, 11 May 2005 16:47:02 -0700
Subject: [Twisted-Python] Re: Hanging test cases (Was: Evangelism notes...)
In-Reply-To: <umzr1cpfo.fsf@fitlinxx.com>
References: <u1x8jkhum.fsf@fitlinxx.com>
	<20050507231316.15422.715887765.divmod.quotient.24760@ohm>
	<umzr1cpfo.fsf@fitlinxx.com>
Message-ID: <CF8709DF-9B11-4A6A-BE6B-C773AA936815@osafoundation.org>

On May 11, 2005, at 4:28 PM, David Bolen wrote:

> Jp Calderone <exarkun at divmod.com> writes:
>
> (...)
>
>> It may be the case that none of the bugs in trial synchronous
>> result utilities cause problems for you.  If they don't, I can
>> understand how it would not be a big priority for you to move away
>> from them (after all, I'm sure you have plenty of things that *are*
>> causing you problems now that you would much rather spend time on).
>> I recommend simply keeping this conversation in mind if and when you
>> run into problems with your use of deferredResult and deferredError
>> in the future and that you not let such problems take you by
>> surprise.  You can rest relatively easily in the knowledge that
>> deferredResult and friends will not disappear from Twisted
>> overnight.  Broken as they are, they are clearly part of a public
>> API and so will remain long enough to satisfy backwards
>> compatibility requirements.
>>
>
> Seems like as good a way as any to end this thread for me, since I
> definitely agree with the above.  And yes, I'm aware (or believe I am)
> of the risks I may be incurring by using these methods, as well as
> using unittest rather than trial, and will certainly continue to
> follow Twisted actively to hopefully catch changes that may impact my
> current choices.

I'll chime in with a "me, too" here.

It might also be nice to add some kind of warning to the __doc__  
strings for the 3 methods in question. There are caveats in wait()'s  
doc, but they weren't sufficient to scare me away, for one :).

--Grant

Grant Baillie
Open Source Applications Foundation
http://www.osafoundation.org






From radeex at gmail.com  Wed May 11 17:47:48 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Thu, 12 May 2005 09:47:48 +1000
Subject: [Twisted-Python] Re: Hanging test cases (Was: Evangelism notes...)
In-Reply-To: <uis1pcp6w.fsf@fitlinxx.com>
References: <C5144E94-92C5-40F5-9D2E-9941B62B3E49@osafoundation.org>
	<20050506060050.15422.1130296805.divmod.quotient.21435@ohm>
	<uk6mcjc0f.fsf@fitlinxx.com>
	<6EA197D2-A573-4175-A0FB-9C5005389D68@redivi.com>
	<ufyx0j7dw.fsf@fitlinxx.com>
	<BDDD7C2C-EB8A-4601-8545-565ABEC46EAD@redivi.com>
	<u1x8jkhum.fsf@fitlinxx.com>
	<60ed19d405050718373b3463d4@mail.gmail.com>
	<uis1pcp6w.fsf@fitlinxx.com>
Message-ID: <60ed19d4050511164768c8e159@mail.gmail.com>

On 11 May 2005 19:34:15 -0400, David Bolen <db3l at fitlinxx.com> wrote:
> Christopher Armstrong <radeex at gmail.com> writes:
> >     testCase = deferredGenerator(testCase)
> >
> > after the definition of the method, or even:
> >
> >     @deferredGenerator
> >
> > before the definition of the method.
> 
> But then who actually performs the iteration over the test case to
> trigger the generator?  Clearly some top level code needs to invoke
> the reactor.run() and at some point iterate over testCase while
> beneath a running reactor.  We're just using unittest, so something
> would need to be added to serve as the basic framework for that sort
> of test.

deferredGenerator does the iteration. This is how defgen works: you
define a generator. It should yield waitForDeferred instances. Then
you wrap that generator function with deferredGenerator.
deferredGenerator wraps that function such that, when called, returns
a Deferred (not a generator object!). The original generator will be
exhausted (doing the magic wait-for-deferred stuff along the way) and
the Deferred returned from your function will result in the last item
yielded from the generator. Since trial supports test methods
returning deferreds, this Just Works.

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From andrea at cpushare.com  Wed May 11 18:16:25 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu, 12 May 2005 02:16:25 +0200
Subject: [Twisted-Python] pending twisted fixes
Message-ID: <20050512001625.GP6313@g5.random>

Hello,

These are the pending fixes for twisted that I'm maintaining on my tree.

On the client side to still allow 1.3.0 I've a file called
twisted_bugs.py and I import from there instead of twisted.* depending
on twisted.copyright.version. I've found very easy to fix a single bug
locally by cut-and-pasting a twisted function and by fixing it locally
while still not altering the 2.0 behaviour, it's pratically a local 2.0
backport which lives in its own file. Perhaps this would have been a
better approach than an upgrade to 2.0 in the rogers.com incident.
Hotfixes seems quite easy this way and sure less invasive than a full
upgrade (i.e. no risk of API breakage and no annoyance to the sysadm).
This is just a reminder just in case other incident happens that seems
to require 2.0 upgrade.

from twisted.copyright import version
twisted_bug_workaround = False
if '1.3.0' in version:
	twisted_bug_workaround = True

from twisted.internet import reactor # to stop it
if not twisted_bug_workaround:
	from twisted.protocols.basic import Int32StringReceiver
	from twisted.internet.protocol import ReconnectingClientFactory
else:
	from cpushare.twisted_bugs import Int32StringReceiver
	from cpushare.twisted_bugs import ReconnectingClientFactory

Full working example of the 1.3.0 hotfixes is available in the download
section of my site.

The transport.disconnecting was said not to be available for all
twisted transports, but then it should be added to the others instead of
my rejecting my patch with that argument (those basic.py protocols are
broken without this fix, so it's better that they fail with a visible
exception than subtly at runtime), or another method should be
implemented to know if the transport has disconnected already.

Keep up the great work, thanks!

Index: Twisted/twisted/protocols/basic.py
===================================================================
--- Twisted/twisted/protocols/basic.py	(revision 13717)
+++ Twisted/twisted/protocols/basic.py	(working copy)
@@ -166,9 +166,23 @@
         """
         return error.ConnectionLost('Line length exceeded')
     
+class PauseProducer(object):
+    paused = False
 
+    def pauseProducing(self):
+        self.paused = True
+        self.transport.pauseProducing()
 
-class LineReceiver(protocol.Protocol):
+    def resumeProducing(self):
+        self.paused = False
+        self.transport.resumeProducing()
+        self.dataReceived('')
+
+    def stopProducing(self):
+        self.paused = True
+        self.transport.stopProducing()
+
+class LineReceiver(protocol.Protocol, PauseProducer):
     """A protocol that receives lines and/or raw data, depending on mode.
     
     In line mode, each line that's received becomes a callback to
@@ -188,7 +202,6 @@
     __buffer = ''
     delimiter = '\r\n'
     MAX_LENGTH = 16384
-    paused = False
     
     def clearLineBuffer(self):
         """Clear buffered data."""
@@ -279,21 +292,8 @@
         """
         return self.transport.loseConnection()
 
-    def pauseProducing(self):
-        self.paused = True
-        self.transport.pauseProducing()
 
-    def resumeProducing(self):
-        self.paused = False
-        self.dataReceived('')
-        self.transport.resumeProducing()
-
-    def stopProducing(self):
-        self.paused = True
-        self.transport.stopProducing()
-
-
-class Int32StringReceiver(protocol.Protocol):
+class Int32StringReceiver(protocol.Protocol, PauseProducer):
     """A receiver for int32-prefixed strings.
 
     An int32 string is a string prefixed by 4 bytes, the 32-bit length of
@@ -314,7 +314,7 @@
         """Convert int32 prefixed strings into calls to stringReceived.
         """
         self.recvd = self.recvd + recd
-        while len(self.recvd) > 3:
+        while len(self.recvd) > 3 and not self.paused and not self.transport.disconnecting:
             length ,= struct.unpack("!i",self.recvd[:4])
             if length > self.MAX_LENGTH:
                 self.transport.loseConnection()
@@ -331,7 +331,7 @@
         self.transport.write(struct.pack("!i",len(data))+data)
 
 
-class Int16StringReceiver(protocol.Protocol):
+class Int16StringReceiver(protocol.Protocol, PauseProducer):
     """A receiver for int16-prefixed strings.
 
     An int16 string is a string prefixed by 2 bytes, the 16-bit length of
@@ -351,7 +351,7 @@
         """Convert int16 prefixed strings into calls to stringReceived.
         """
         self.recvd = self.recvd + recd
-        while len(self.recvd) > 1:
+        while len(self.recvd) > 1 and not self.paused and not self.transport.disconnecting:
             length = (ord(self.recvd[0]) * 256) + ord(self.recvd[1])
             if len(self.recvd) < length+2:
                 break
Index: Twisted/twisted/lore/latex.py
===================================================================
--- Twisted/twisted/lore/latex.py	(revision 13717)
+++ Twisted/twisted/lore/latex.py	(working copy)
@@ -104,7 +104,7 @@
 
     baseLevel = 0
     try:
-        diaHack = not not os.popen('which dia').read()
+        diaHack = not not os.popen('which dia 2>/dev/null').read()
     except:
         # That's a no, then.
         diaHack = 0



From glyph at divmod.com  Wed May 11 23:02:14 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Thu, 12 May 2005 01:02:14 -0400
Subject: [Twisted-Python] pending twisted fixes
In-Reply-To: <20050512001625.GP6313@g5.random>
References: <20050512001625.GP6313@g5.random>
Message-ID: <20050512184758.15422.1332721614.divmod.quotient.34976@ohm>

Andrea Arcangeli wrote:

> These are the pending fixes for twisted that I'm maintaining on my tree.

Thanks for reporting these, especially the fix backports.  I guess 
Twisted is a big enough project now that we need to start doing 
maintenance release trees!

> The transport.disconnecting was said not to be available for all
> twisted transports, but then it should be added to the others instead of
> my rejecting my patch with that argument (those basic.py protocols are
> broken without this fix, so it's better that they fail with a visible
> exception than subtly at runtime), or another method should be
> implemented to know if the transport has disconnected already.

Hmm.  True enough.

I've seen this problem before but not thought too hard about it. 
Considering it now, I think the right solution is to add a 
'disconnecting' attribute to ITransport, and fix all current Twisted 
ITransport implementations to include it.  I know that this is about to 
become an issue for me with Q2Q.

(Also, should we maybe have a distinction between IStreamTransport and 
IDatagramTransport, rather than just ITCPTransport/IUDPTransport?  or at 
least some attributes to introspect, like ".reliable" and ".ordered"?)




From glyph at divmod.com  Wed May 11 22:57:00 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Thu, 12 May 2005 00:57:00 -0400
Subject: [Twisted-Python] Re: Hanging test cases (Was: Evangelism notes...)
In-Reply-To: <CF8709DF-9B11-4A6A-BE6B-C773AA936815@osafoundation.org>
References: <u1x8jkhum.fsf@fitlinxx.com>	<20050507231316.15422.715887765.divmod.quotient.24760@ohm>	<umzr1cpfo.fsf@fitlinxx.com>
	<CF8709DF-9B11-4A6A-BE6B-C773AA936815@osafoundation.org>
Message-ID: <20050512184830.15422.942852393.divmod.quotient.34977@ohm>

Grant Baillie wrote:

> It might also be nice to add some kind of warning to the __doc__  
> strings for the 3 methods in question. There are caveats in wait()'s  
> doc, but they weren't sufficient to scare me away, for one :).

I apologize for the lack of enthusiasm of those warnings.  The 
unfortunate problem is that currently _all_ of trial is subtly broken, 
so there is nothing that we could suggest as a decent alternative, and 
thus can only deprecate so hard :-(.

The recent rewrite at least allows for returning Deferreds, which is 
what the future public API will eventually look like, but all it does 
when you return a Deferred is call wait() on it.  (JP got me up to speed 
  today on some bugs that are unique to returning Deferreds in this way, 
actually...)



From Sl_Church at sbcglobal.net  Thu May 12 13:54:58 2005
From: Sl_Church at sbcglobal.net (Shawn Church)
Date: Thu, 12 May 2005 12:54:58 -0700
Subject: [Twisted-Python] Unit Testing in twisted 2.0
Message-ID: <4283B492.2030301@sbcglobal.net>

I've been following the recent thread on the problems with twisted.trial
and since it is evidently broken I am hesitant about using it.  Instead
I create a class that performs all of my tests and sets class attributes
with the results.  I can then create this class once (at the module
level) and then use the standard unittest module to check the results. 
For example (this is untested code, I'm just trying to briefly
illustrate the approach I'm taking):

class PerformTests:
    def __init__(self):
       self.reactorStartedResults=False
       self.reactorStoppedResults=False

       reactor.callLater(0,self.reactorStarted)
       reactor.run()
       self.reactorStoppedResults=True

    def reactorStarted(self):
       self.reactorStartedResults=True

       # Issue another test here with .addboth(self.nextTestMethodName)
or stop reactor:
       reactor.stop()
      
   

performTests=PerformTests()

class Test(unittest.TestCase):
    def testReactorStart(self):
        self.assert_(performTests.self.reactorStartedResults)

    def testReactorStopped(self):
        self.assert_(performTests.self.reactorStoppedResults)

   # other tests


Should I use twisted.trial despite it's problems?  If not, is there a
better way to implement unit testing then the approach illustrated
above?  Any suggestions will be appreciated.


Thanks,


Shawn Church
sl_church at sbcglobal.net




From michal at dkp.com  Fri May 13 12:33:19 2005
From: michal at dkp.com (Michal Eldar)
Date: Fri, 13 May 2005 14:33:19 -0400
Subject: [Twisted-Python] adbapi, PostgreSQL and Unicode
In-Reply-To: <42820871.6020906@smartology.nl>
References: <427BEAAC.2060208@dkp.com> <4281FFD0.6010707@pollenation.net>
	<42820871.6020906@smartology.nl>
Message-ID: <4284F2EF.3030406@dkp.com>

Remy Cool wrote:

>Matt Goodall wrote:
>  
>
>>Michal Eldar wrote:
>>
>>
>>    
>>
>>>I keep getting - Unhandled error in Deferred
>>>      
>>>
>>You should attach an errback to the deferred and handle, or at least
>>log, the exception. That's what "Unhandled error in Deferred" means ;-).
>>
>>
>>    
>>
>>>I'm trying to perform an INSERT on my db (using adbapi with *pgdb*
>>>module).
>>>INSERT which comprises *Unicode* string
>>>e.g. -
>>>unicodeChar1 = u"Character=[\N{GREEK CAPITAL LETTER GAMMA}]"
>>>
>>>the db is defined to Unicode
>>>*client_encoding* value is set to *Unicode* when checking its value in
>>>*cp_openfun *called function
>>>execute the same INSERT directly with *pgdb *works great
>>>
>>>Does anyone has experience with adbapi with Unicode db ?!?!
>>>      
>>>
>
><snip>
>
>I also use pgdb with adbapi and unicode without problems. Insert's with
>unicode strings should not be problem even if the database is set to
>SQLASCII. The pgdb module inspects the string before sending it to the
>postgres machinery. If it's a unicode string (isinstance('the string',
>unicode) ) it's encoded to utf-8.
>
>I've submitted a patch to Darcy at pygresql.org for enhanced unicode
>support for pgdb. This patch takes care of the client_encoding stuff and
>makes it possible to fetch unicode strings from select queries.
>
>-- Remy --
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>  
>
First of all - Thanks !!! It was a nice surprise to find responses to my 
quesion :)

I read about Unicode in the Twisted Archive and a link to the FAQ gave 
me the solution:
I'm suppose to *encode* the unicode string before I'm passing it over...
This was THE difference when working with Twisted.
http://twistedmatrix.com/pipermail/twisted-python/2005-April/010198.html
http://twistedmatrix.com/projects/core/documentation/howto/faq.html#auto25

Matt - I did try to attach an errback, but it failed to print the error, 
because it probably included some non-ascii chars... I don't know why 
Twisted don't show an appropriate error about this problem
Remi - is it not possible to retrieve Unicode string from SELECT query 
with pgdb ? what is the behaviour nowadays?

Cheers! and Thanks again,
Michal



From foom at fuhm.net  Fri May 13 14:58:02 2005
From: foom at fuhm.net (James Y Knight)
Date: Fri, 13 May 2005 16:58:02 -0400
Subject: [Twisted-Python] adbapi, PostgreSQL and Unicode
In-Reply-To: <4284F2EF.3030406@dkp.com>
References: <427BEAAC.2060208@dkp.com> <4281FFD0.6010707@pollenation.net>
	<42820871.6020906@smartology.nl> <4284F2EF.3030406@dkp.com>
Message-ID: <053D47C6-0F88-46C2-A82C-90D07E5B7373@fuhm.net>


On May 13, 2005, at 2:33 PM, Michal Eldar wrote:

> Remy Cool wrote:
>
> First of all - Thanks !!! It was a nice surprise to find responses  
> to my quesion :)
>
> I read about Unicode in the Twisted Archive and a link to the FAQ  
> gave me the solution:
> I'm suppose to *encode* the unicode string before I'm passing it  
> over...
> This was THE difference when working with Twisted.
> http://twistedmatrix.com/pipermail/twisted-python/2005-April/ 
> 010198.html
> http://twistedmatrix.com/projects/core/documentation/howto/ 
> faq.html#auto25
>

Actually, that doesn't really apply to ADBAPI. Twisted's ADBAPI  
doesn't care what you pass to its runQuery/etc methods -- it simply  
passes that on to the database. It can be a unicode string or any  
random object, as long as the database adapter accepts it. It's hard  
to say what might be going wrong without a traceback, of course.

James



From zratchet at mindspring.com  Fri May 13 15:01:46 2005
From: zratchet at mindspring.com (C Ratchet)
Date: Fri, 13 May 2005 16:01:46 -0500
Subject: [Twisted-Python] Need help implementing Twisted
Message-ID: <7F670ABF-6A8B-4A2A-8C00-702366349A6E@mindspring.com>

Hello,

I'm looking for some developers who can help implement Twisted  
functionality for
my Snowball Fight game at http://snowballz.literati.org

We're probably going to use Tofu, which is the Soya3D network layer  
based on Twisted.
http://oomadness.tuxfamily.org/en/tofu/index.html

If anyone's interested in helping out just reply to this mail.

Thanks
Ratchet




From tim at se.linux.org  Fri May 13 15:57:17 2005
From: tim at se.linux.org (=?iso-8859-1?Q?Tim_Terleg=E5rd?=)
Date: Fri, 13 May 2005 23:57:17 +0200 (CEST)
Subject: [Twisted-Python] Twisted projects
Message-ID: <Pine.LNX.4.44.0505132351240.11252-100000@naskur.se.linux.org>

What about having a page on twistedmatrix.com that shows projects based
on Twisted? I think that would be really nice. A sourceforge for Twisted
projects is perhaps a bit too much, a simple listing of projects would
be nice. Would be great if people could add their own projects.

Tim




From mary-twisted at puzzling.org  Fri May 13 17:19:30 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat, 14 May 2005 09:19:30 +1000
Subject: [Twisted-Python] Twisted projects
In-Reply-To: <Pine.LNX.4.44.0505132351240.11252-100000@naskur.se.linux.org>
References: <Pine.LNX.4.44.0505132351240.11252-100000@naskur.se.linux.org>
Message-ID: <20050513231930.GM10222@sourdust.home.puzzling.org>

On Fri, May 13, 2005, Tim Terlegård wrote:
> What about having a page on twistedmatrix.com that shows projects based
> on Twisted? I think that would be really nice. A sourceforge for Twisted
> projects is perhaps a bit too much, a simple listing of projects would
> be nice. Would be great if people could add their own projects.

It exists: http://twistedmatrix.com/services/success

-Mary



From andrea at cpushare.com  Sat May 14 06:21:05 2005
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sat, 14 May 2005 14:21:05 +0200
Subject: [Twisted-Python] pending twisted fixes
In-Reply-To: <20050512184758.15422.1332721614.divmod.quotient.34976@ohm>
References: <20050512001625.GP6313@g5.random>
	<20050512184758.15422.1332721614.divmod.quotient.34976@ohm>
Message-ID: <20050514122105.GG13985@g5.random>

On Thu, May 12, 2005 at 01:02:14AM -0400, Glyph Lefkowitz wrote:
> Andrea Arcangeli wrote:
> 
> >These are the pending fixes for twisted that I'm maintaining on my tree.
> 
> Thanks for reporting these, especially the fix backports.  I guess 

You're very welcome! Thanks for the great twisted work.

> Twisted is a big enough project now that we need to start doing 
> maintenance release trees!

So far my project has been more experimental than twisted, so on the
server side I'm surfing the SVN wave of all projects I depend on ;).
Lack of maintainance release is not a big deal for me as long as SVN
trunk remains usable in semi-production. I keep all installed versions
in a backup directory, so I can downgrade to the previous binaries of
all packages in a few seconds if something breaks.

On the client side hotfixing has been so easy to add that perhaps a more
official list of all potential serious bugs might be enough too. So if
one is affected he can apply the hotfix without even requiring the end
user to upgrade (i.e. avoiding the annoyance from the admin at the
rogers incident).

Infact I was surprised about the rogers decision of rewriting in pure
python. I would understand pure C/C++ to boost performance and increase
the developer base, but pure python isn't going to be better than
python+twisted. I guess they're more used to thread programming than
async driven programming, but thread programming is generally more
complex than async programming. And async programming is quite close to
thread programming, it's simpler because it's like if we were to hold
implicitly a big lock before rescheduling the next context.

On a related note, I wonder how complex it would be to really support
multiple threads listening in epoll and requiring each context to take
its locks, so then different contexts could scale in smp. This would
break all apps, but it could be an optional mode that the app enables
only if it supports multithreading. But anyway I don't need it right
now, this is just a random idea, performance is more than good enough,
if there's a performance problem it's only in the interfaces and
apparently that has been partly addressed by taking zope.interfaces.

> I've seen this problem before but not thought too hard about it. 
> Considering it now, I think the right solution is to add a 
> 'disconnecting' attribute to ITransport, and fix all current Twisted 
> ITransport implementations to include it.  I know that this is about to 
> become an issue for me with Q2Q.

This sounds fine with me ;)

> (Also, should we maybe have a distinction between IStreamTransport and 
> IDatagramTransport, rather than just ITCPTransport/IUDPTransport?  or at 
> least some attributes to introspect, like ".reliable" and ".ordered"?)

Abstracting this bit at the highlevel sounds good too. .stream may also
be a good candidate. .reliable and .ordered are two of the properties
that a stream has, the syscall uses SOCK_STREAM too.

Thanks!



From robin at wiretooth.com  Sun May 15 17:05:03 2005
From: robin at wiretooth.com (Robin Bryce)
Date: Mon, 16 May 2005 00:05:03 +0100
Subject: [Twisted-Python] pending twisted fixes
In-Reply-To: <20050514122105.GG13985@g5.random>
References: <20050512001625.GP6313@g5.random>	<20050512184758.15422.1332721614.divmod.quotient.34976@ohm>
	<20050514122105.GG13985@g5.random>
Message-ID: <4287D59F.4080408@wiretooth.com>

> On a related note, I wonder how complex it would be to really support
> multiple threads listening in epoll and requiring each context to take
> its locks, so then different contexts could scale in smp. 

I thought python's GIL lock made scaling like this for smp impossible ?



From luc.stepniewski at adelux.fr  Sun May 15 17:23:54 2005
From: luc.stepniewski at adelux.fr (Luc Stepniewski)
Date: Mon, 16 May 2005 01:23:54 +0200
Subject: [Twisted-Python] Twisted projects
In-Reply-To: <Pine.LNX.4.44.0505132351240.11252-100000@naskur.se.linux.org>
References: <Pine.LNX.4.44.0505132351240.11252-100000@naskur.se.linux.org>
Message-ID: <200505160123.55015.luc.stepniewski@adelux.fr>

On Friday 13 May 2005 23:57, Tim Terlegård wrote:
> What about having a page on twistedmatrix.com that shows projects based
> on Twisted? I think that would be really nice. A sourceforge for Twisted
> projects is perhaps a bit too much, a simple listing of projects would
> be nice. Would be great if people could add their own projects.

It exists, and people can add their own projects, to the twisted forum (that 
nobody accessed for quite some time, so I add them myself :-)

On http://twisted.banquise.org/index.php?t=thread&frm_id=14&rid=0

Luc
-- 
Luc Stepniewski <luc.stepniewski at adelux.fr>
Adelux - Securite, Linux  Public key: <http://lstep.free.fr/pubkey.txt>
Key BC0E3C2A fingerprint = A4FA466C68D27E46B427  07D083ED6340BC0E3C2A



From bob at redivi.com  Sun May 15 20:06:34 2005
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 15 May 2005 22:06:34 -0400
Subject: [Twisted-Python] pending twisted fixes
In-Reply-To: <4287D59F.4080408@wiretooth.com>
References: <20050512001625.GP6313@g5.random>	<20050512184758.15422.1332721614.divmod.quotient.34976@ohm>
	<20050514122105.GG13985@g5.random> <4287D59F.4080408@wiretooth.com>
Message-ID: <0EE98997-126D-460D-ACBC-7F296FF0C2B8@redivi.com>


On May 15, 2005, at 7:05 PM, Robin Bryce wrote:

>> On a related note, I wonder how complex it would be to really support
>> multiple threads listening in epoll and requiring each context to  
>> take
>> its locks, so then different contexts could scale in smp.
>>
>
> I thought python's GIL lock made scaling like this for smp  
> impossible ?

No.  epoll isn't Python bytecode, so it can block without holding the  
GIL.

-bob




From jean-marc.pouchoulon at ac-montpellier.fr  Mon May 16 06:45:20 2005
From: jean-marc.pouchoulon at ac-montpellier.fr (jean-marc.pouchoulon at ac-montpellier.fr)
Date: Mon, 16 May 2005 14:45:20 +0200
Subject: [Twisted-Python] ldaptor examples failed + python-ldap examples
	with twisted
Message-ID: <428895E0.8040701@ac-montpellier.fr>

Bonjour,

    I try to run ldaptor examples with python2.4.1 , twisted 2.0, nevow 
0.4.1, fedora core 3.
.05_form gives me  "Deferred instance has no attribute 'original'" and 
some warnings.

    Does anyone has an updated code ? ( I used the latest code I've got 
from svn )

    I search also python-ldap examples with twisted.

    Thanks.


NB : Twisted 2.0 rc4  windows installer never finished on my PC... 
(french xp sp2)

   



From exarkun at divmod.com  Mon May 16 07:12:38 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 16 May 2005 13:12:38 GMT
Subject: [Twisted-Python] ldaptor examples failed + python-ldap examples
	with twisted
In-Reply-To: <428895E0.8040701@ac-montpellier.fr>
Message-ID: <20050516131238.559.1775941084.divmod.quotient.1866@ohm>

On Mon, 16 May 2005 14:45:20 +0200, jean-marc.pouchoulon at ac-montpellier.fr wrote:
>Bonjour,
>
>    I try to run ldaptor examples with python2.4.1 , twisted 2.0, nevow 
>0.4.1, fedora core 3.
>.05_form gives me  "Deferred instance has no attribute 'original'" and some 
>warnings.
>
>    Does anyone has an updated code ? ( I used the latest code I've got from 
>svn )
>
>    I search also python-ldap examples with twisted.
>
>    Thanks.
>
>
>NB : Twisted 2.0 rc4  windows installer never finished on my PC... (french 
>xp sp2)
>

  That exception generally means "Twisted isn't installed", so I'd take another look at why the installer didn't finish.

  Also, there's a mailing list devoted to web development with Twisted:

    http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

  Jp



From jean-marc.pouchoulon at ac-montpellier.fr  Mon May 16 07:34:19 2005
From: jean-marc.pouchoulon at ac-montpellier.fr (jean-marc.pouchoulon at ac-montpellier.fr)
Date: Mon, 16 May 2005 15:34:19 +0200
Subject: [Twisted-Python] ldaptor examples failed + python-ldap examples
	with twisted
In-Reply-To: <20050516131238.559.1775941084.divmod.quotient.1866@ohm>
References: <20050516131238.559.1775941084.divmod.quotient.1866@ohm>
Message-ID: <4288A15B.2050808@ac-montpellier.fr>


>
>  That exception generally means "Twisted isn't installed", so I'd take 
> another look at why the installer didn't finish.


Twisted is installed ( the previous examples works correctly )....
I try to install twisted 2.0 on another  windows machine and this time 
the installer finished his work.


>
>  Also, there's a mailing list devoted to web development with Twisted:
>
>    http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

Ok  I will post.





From jean-marc.pouchoulon at ac-montpellier.fr  Mon May 16 07:34:27 2005
From: jean-marc.pouchoulon at ac-montpellier.fr (jean-marc.pouchoulon at ac-montpellier.fr)
Date: Mon, 16 May 2005 15:34:27 +0200
Subject: [Twisted-Python] ldaptor examples failed + python-ldap examples
	with twisted
In-Reply-To: <20050516131238.559.1775941084.divmod.quotient.1866@ohm>
References: <20050516131238.559.1775941084.divmod.quotient.1866@ohm>
Message-ID: <4288A163.5020200@ac-montpellier.fr>


>
>  That exception generally means "Twisted isn't installed", so I'd take 
> another look at why the installer didn't finish.


Twisted is installed ( the previous examples works correctly )....
I try to install twisted 2.0 on another  windows machine and this time 
the installer finished his work.


>
>  Also, there's a mailing list devoted to web development with Twisted:
>
>    http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

Ok  I will post.
thanks





From wyvern at crm3.com  Mon May 16 17:50:08 2005
From: wyvern at crm3.com (Jan Van Uytven)
Date: Mon, 16 May 2005 16:50:08 -0700
Subject: [Twisted-Python] Twistd thread problem
Message-ID: <428931B0.5060901@crm3.com>

Hi all,

I coded an SMTP proxy that receives incoming e-mail requests and pushes 
the received e-mail onto a Queue were it is processed by a worker thread 
that finishes by sending the e-mail on to another SMTP server.

The server part of the proxy was written in Twisted, but the worker 
thread uses smtplib to fire off the processed e-mails (I didn't know how 
to use the twisted smtp client in a thread).

When I run the application using twistd -noy <appname>, it works great. 
When I try to daemonize it (twistd -oy <appname>) the server part works, 
but the worker thread doesn't. It creates and then I suspect it 
immediately dies, as no error is returned upon creation. A debug of the 
queue reveals that the thread is not pulling items off it. A debugging 
statement placed at the top of the thread never runs, and the twistd log 
reports nothing wrong. I'm using reactor.callInThread to start the 
worker function.

I tried running twistd --spew -oy <appname> and captured the log it 
produced. I did a filter for anything with 'thread' in it, this is the 
result:

2005/05/16 09:15 PDT [-] function ? in 
/usr/lib/python2.3/site-packages/twisted/python/threadpool.py, line 11
2005/05/16 09:15 PDT [-] function WorkerStop in 
/usr/lib/python2.3/site-packages/twisted/python/threadpool.py, line 23
2005/05/16 09:15 PDT [-] function init in 
/usr/lib/python2.3/site-packages/twisted/python/threadable.py, line 219
2005/05/16 09:15 PDT [-] function ThreadPool in 
/usr/lib/python2.3/site-packages/twisted/python/threadpool.py, line 31
2005/05/16 09:15 PDT [-] function ThreadSafeList in 
/usr/lib/python2.3/site-packages/twisted/python/threadpool.py, line 199
2005/05/16 09:15 PDT [-] function init in 
/usr/lib/python2.3/site-packages/twisted/python/threadable.py, line 219
2005/05/16 09:15 PDT [-] method __init__ of 
twisted.python.threadpool.ThreadPool at -1216569236
2005/05/16 09:15 PDT [-] method start of 
twisted.python.threadpool.ThreadPool at -1216569236
2005/05/16 09:15 PDT [-] method adjustPoolsize of 
twisted.python.threadpool.ThreadPool at -1216569236
2005/05/16 09:15 PDT [-] method _startSomeWorkers of 
twisted.python.threadpool.ThreadPool at -1216569236
2005/05/16 09:15 PDT [-] method callInThread of 
twisted.python.threadpool.ThreadPool at -1216569236
2005/05/16 09:15 PDT [-] method _startSomeWorkers of 
twisted.python.threadpool.ThreadPool at -1216569236
2005/05/16 09:15 PDT [-] method startAWorker of 
twisted.python.threadpool.ThreadPool at -1216569236
2005/05/16 09:15 PDT [-] method __init__ of threading.Thread at -1216568116
2005/05/16 09:15 PDT [-] method __init__ of threading.Thread at -1216568116
2005/05/16 09:15 PDT [-] method _set_daemon of threading.Thread at 
-1216568116
2005/05/16 09:15 PDT [-] function currentThread in 
/usr/lib/python2.3/threading.py, line 669
2005/05/16 09:15 PDT [-] method isDaemon of threading._MainThread at 
-1214935060
2005/05/16 09:15 PDT [-] function Condition in 
/usr/lib/python2.3/threading.py, line 147
2005/05/16 09:15 PDT [-] method __init__ of threading._Condition at 
-1216567604
2005/05/16 09:15 PDT [-] method __init__ of threading._Condition at 
-1216567604
2005/05/16 09:15 PDT [-] method start of threading.Thread at -1216568116
2005/05/16 09:15 PDT [-] method _note of threading.Thread at -1216568116
2005/05/16 09:15 PDT [-] method run of threading.Thread at -1216568116
2005/05/16 09:15 PDT [-] method _worker of 
twisted.python.threadpool.ThreadPool at -1216569236
2005/05/16 09:15 PDT [-] function currentThread in 
/usr/lib/python2.3/threading.py, line 669
2005/05/16 09:15 PDT [-] function threadMailer in twisted-copyuser.py, 
line 201
2005/05/16 09:15 PDT [-] method acquire of 
twisted.python.threadable._XLock at -1216639284
2005/05/16 09:15 PDT [-] method release of 
twisted.python.threadable._XLock at -1216639284
2005/05/16 09:15 PDT [-] method acquire of 
twisted.python.threadable._XLock at -1216639284
2005/05/16 09:15 PDT [-] method release of 
twisted.python.threadable._XLock at -1216639284
2005/05/16 09:15 PDT [-] method acquire of 
twisted.python.threadable._XLock at -1216639284
2005/05/16 09:15 PDT [-] method release of 
twisted.python.threadable._XLock at -1216639284
2005/05/16 09:15 PDT [-] function registerAsIOThread in 
/usr/lib/python2.3/site-packages/twisted/python/threadable.py, line 262

Why would the worker thread act differently with twistd daemonized? Any 
suggestions, advice, or hints would be welcome.

Thanks,

Jan

-- 
Jan Van Uytven
Computer Systems & Network Engineer
Convergent Media Network
wyvern at crm3.com

Only in silence the word,
only in dark the light,
only in dying life:
Bright the hawk's flight 
on the empty sky.

- Ursula K. LeGuin, 'A Wizard of Earthsea'

*** LEGAL STUFF ***
This electronic message transmission, including any attached files, 
contains information which may be confidential and/or privileged.
The information is intended to be for the SOLE use of the individual or 
entity named above. If you are not the intended recipient, be aware 
that any review, disclosure, copying, distribution or use of the 
contents of this information is prohibited. This message is not to be 
forwarded for any reason without prior consent of the sender. 

If you have received this electronic transmission in error, please 
notify the sender immediately by telephone (250) 386-4266 or by a 
'reply to sender' only message and destroy all electronic and hard 
copies of the communication, including attachments, without reading 
or saving in any manner.




From exarkun at divmod.com  Mon May 16 18:44:11 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Tue, 17 May 2005 00:44:11 GMT
Subject: [Twisted-Python] Twistd thread problem
In-Reply-To: <428931B0.5060901@crm3.com>
Message-ID: <20050517004411.559.303342290.divmod.quotient.2315@ohm>

On Mon, 16 May 2005 16:50:08 -0700, Jan Van Uytven <wyvern at crm3.com> wrote:
>Hi all,
>
>I coded an SMTP proxy that receives incoming e-mail requests and pushes the 
>received e-mail onto a Queue were it is processed by a worker thread that 
>finishes by sending the e-mail on to another SMTP server.
>
>The server part of the proxy was written in Twisted, but the worker thread 
>uses smtplib to fire off the processed e-mails (I didn't know how to use the 
>twisted smtp client in a thread).
>
>When I run the application using twistd -noy <appname>, it works great. When 
>I try to daemonize it (twistd -oy <appname>) the server part works, but the 
>worker thread doesn't. It creates and then I suspect it immediately dies, as 
>no error is returned upon creation. A debug of the queue reveals that the 
>thread is not pulling items off it. A debugging statement placed at the top 
>of the thread never runs, and the twistd log reports nothing wrong. I'm 
>using reactor.callInThread to start the worker function.
>
> [snip]
>
>Why would the worker thread act differently with twistd daemonized? Any 
>suggestions, advice, or hints would be welcome.
>
>Thanks,
>
>Jan
>

    Try changing the code so that it does not try to start any worker threads until after the reactor starts running (eg, using a Service or with reactor.callWhenRunning).

  Jp



From tv at twistedmatrix.com  Mon May 16 22:01:17 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 17 May 2005 07:01:17 +0300
Subject: [Twisted-Python] ldaptor examples failed + python-ldap examples
	with twisted
In-Reply-To: <428895E0.8040701@ac-montpellier.fr>
References: <428895E0.8040701@ac-montpellier.fr>
Message-ID: <42896C8D.9030402@twistedmatrix.com>

jean-marc.pouchoulon at ac-montpellier.fr wrote:
>    I try to run ldaptor examples with python2.4.1 , twisted 2.0, nevow
> 0.4.1, fedora core 3.
> .05_form gives me  "Deferred instance has no attribute 'original'" and
> some warnings.

That's a Twisted error, not an Ldaptor error.

Also, the addressbook example is pretty horribly out of date, sorry.



From brendonh at gmail.com  Tue May 17 00:46:47 2005
From: brendonh at gmail.com (Brendon Hogger)
Date: Tue, 17 May 2005 14:46:47 +0800
Subject: [Twisted-Python] Simpler twistedmatrix.com doc indexes
Message-ID: <f0388c6f0505162346730c0467@mail.gmail.com>

Hi there.
            I've been playing around with using lore and microdom to
generate better indexes for the Twisted documentation, and also to
move everything into a single /doc tree. The results, at least until I
break it all again, are here:

http://microdev.dyndns.org:8080/doc/

I'm looking for feedback on whether this is any easier to use, and
what could be improved.

There are some issues I already know about:
 - Links to non-html resources are broken
 - Core HOWTO list is gigantic and messy
 - "Other" docs are strangely laid out

Thanks,
Brendon



From mary-twisted at puzzling.org  Tue May 17 00:54:16 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 17 May 2005 16:54:16 +1000
Subject: [Twisted-Python] Simpler twistedmatrix.com doc indexes
In-Reply-To: <f0388c6f0505162346730c0467@mail.gmail.com>
References: <f0388c6f0505162346730c0467@mail.gmail.com>
Message-ID: <20050517065416.GA30430@home.puzzling.org>

On Tue, May 17, 2005, Brendon Hogger wrote:
> Hi there.
>             I've been playing around with using lore and microdom to
> generate better indexes for the Twisted documentation, and also to
> move everything into a single /doc tree. The results, at least until I
> break it all again, are here:
> 
> http://microdev.dyndns.org:8080/doc/
> 
> I'm looking for feedback on whether this is any easier to use, and
> what could be improved.

It looks good... but we don't actually really *have* a master doc index
any more (yes http://twistedmatrix.com/documents still exists, but the
docs there are 1.3). Do you suggest we restore it?

-Mary



From brendonh at gmail.com  Tue May 17 01:00:54 2005
From: brendonh at gmail.com (Brendon Hogger)
Date: Tue, 17 May 2005 15:00:54 +0800
Subject: [Twisted-Python] Simpler twistedmatrix.com doc indexes
In-Reply-To: <20050517065416.GA30430@home.puzzling.org>
References: <f0388c6f0505162346730c0467@mail.gmail.com>
	<20050517065416.GA30430@home.puzzling.org>
Message-ID: <f0388c6f050517000047f59e1b@mail.gmail.com>

> It looks good... but we don't actually really *have* a master doc index
> any more (yes http://twistedmatrix.com/documents still exists, but the
> docs there are 1.3). Do you suggest we restore it?

Yes. I think it's much easier to get an idea of what's available when
it's all collected together in one place. It seems fairly common to
hear people say that Twisted is lacking documentation because they
just don't stumble across it.

- Brendon



From mailinglists at smartology.nl  Tue May 17 01:18:32 2005
From: mailinglists at smartology.nl (Remy Cool)
Date: Tue, 17 May 2005 09:18:32 +0200
Subject: [Twisted-Python] adbapi, PostgreSQL and Unicode
In-Reply-To: <4284F2EF.3030406@dkp.com>
References: <427BEAAC.2060208@dkp.com>
	<4281FFD0.6010707@pollenation.net>	<42820871.6020906@smartology.nl>
	<4284F2EF.3030406@dkp.com>
Message-ID: <42899AC8.40201@smartology.nl>

Michal Eldar wrote:
> Remy Cool wrote:
> 
>> Matt Goodall wrote:
>>
>>> Michal Eldar wrote:
>>>
>>>> I keep getting - Unhandled error in Deferred
>>>>     
>>>
>>> You should attach an errback to the deferred and handle, or at least
>>> log, the exception. That's what "Unhandled error in Deferred" means ;-).
>>>
>>>> I'm trying to perform an INSERT on my db (using adbapi with *pgdb*
>>>> module).
>>>> INSERT which comprises *Unicode* string
>>>> e.g. -
>>>> unicodeChar1 = u"Character=[\N{GREEK CAPITAL LETTER GAMMA}]"
>>>>
>>>> the db is defined to Unicode
>>>> *client_encoding* value is set to *Unicode* when checking its value in
>>>> *cp_openfun *called function
>>>> execute the same INSERT directly with *pgdb *works great
>>>>
>>>> Does anyone has experience with adbapi with Unicode db ?!?!

>>
>>
>> <snip>
>>
>> I also use pgdb with adbapi and unicode without problems. Insert's with
>> unicode strings should not be problem even if the database is set to
>> SQLASCII. The pgdb module inspects the string before sending it to the
>> postgres machinery. If it's a unicode string (isinstance('the string',
>> unicode) ) it's encoded to utf-8.
>>
>> I've submitted a patch to Darcy at pygresql.org for enhanced unicode
>> support for pgdb. This patch takes care of the client_encoding stuff and
>> makes it possible to fetch unicode strings from select queries.

> First of all - Thanks !!! It was a nice surprise to find responses to my
> quesion :)
> 
> I read about Unicode in the Twisted Archive and a link to the FAQ gave
> me the solution:
> I'm suppose to *encode* the unicode string before I'm passing it over...
> This was THE difference when working with Twisted.
> http://twistedmatrix.com/pipermail/twisted-python/2005-April/010198.html
> http://twistedmatrix.com/projects/core/documentation/howto/faq.html#auto25
> 
> Matt - I did try to attach an errback, but it failed to print the error,
> because it probably included some non-ascii chars... I don't know why
> Twisted don't show an appropriate error about this problem
> Remi - is it not possible to retrieve Unicode string from SELECT query
> with pgdb ? what is the behaviour nowadays?

The standard behaviour of pgdb is that unicode strings are automagically
encoded to utf-8 when inserting something in the database and you get
plain python strings for select queries. I've looked at the code of
other python database connectors and added (transparent) functionality
to pgdb so that it can it return unicode strings if you want it to.






From mary-twisted at puzzling.org  Tue May 17 02:30:43 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 17 May 2005 18:30:43 +1000
Subject: [Twisted-Python] Simpler twistedmatrix.com doc indexes
In-Reply-To: <f0388c6f050517000047f59e1b@mail.gmail.com>
References: <f0388c6f0505162346730c0467@mail.gmail.com>
	<20050517065416.GA30430@home.puzzling.org>
	<f0388c6f050517000047f59e1b@mail.gmail.com>
Message-ID: <20050517083043.GB18930@sourdust.home.puzzling.org>

On Tue, May 17, 2005, Brendon Hogger wrote:
> > It looks good... but we don't actually really *have* a master doc index
> > any more (yes http://twistedmatrix.com/documents still exists, but the
> > docs there are 1.3). Do you suggest we restore it?
> 
> Yes. I think it's much easier to get an idea of what's available when
> it's all collected together in one place. It seems fairly common to
> hear people say that Twisted is lacking documentation because they
> just don't stumble across it.

Can you file a bug at http://twistedmatrix.com/bugs/ about making these
changes and assign it to me (hypatia) please, when you've finished
experimenting? Source files appreciated, and thanks very much for your
work on this.

-Mary



From simon at hedberg.net  Tue May 17 03:37:59 2005
From: simon at hedberg.net (Simon)
Date: Tue, 17 May 2005 11:37:59 +0200
Subject: [Twisted-Python] Simpler twistedmatrix.com doc indexes
In-Reply-To: <f0388c6f050517000047f59e1b@mail.gmail.com>
Message-ID: <000201c55ac4$1ccb9100$506271d5@hp>

Hi Brendon,
I would suggest you make the main doc page much simpler. I'd like to see
it focus on the core docs and perhaps provide some form of preferred or
recommended learning path. If the intention is to help people new to
Twisted I think we have to narrow the selection down so it don't become
too overwhelming. At least my learning experience with Twisted was to
take it a chunk at a time. Trying to grip the whole project is just too
much to start with.
I'm not saying your index is bad, just that it'd probably be good to add
some intro page.

/Simon

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Brendon
Hogger
Sent: den 17 maj 2005 09:01
To: Twisted general discussion
Subject: Re: [Twisted-Python] Simpler twistedmatrix.com doc indexes


> It looks good... but we don't actually really *have* a master doc 
> index any more (yes http://twistedmatrix.com/documents still exists, 
> but the docs there are 1.3). Do you suggest we restore it?

Yes. I think it's much easier to get an idea of what's available when
it's all collected together in one place. It seems fairly common to hear
people say that Twisted is lacking documentation because they just don't
stumble across it.

- Brendon

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From brendonh at gmail.com  Tue May 17 04:10:08 2005
From: brendonh at gmail.com (Brendon Hogger)
Date: Tue, 17 May 2005 18:10:08 +0800
Subject: [Twisted-Python] Simpler twistedmatrix.com doc indexes
In-Reply-To: <f0388c6f0505170308543302b5@mail.gmail.com>
References: <f0388c6f050517000047f59e1b@mail.gmail.com>
	<000201c55ac4$1ccb9100$506271d5@hp>
	<f0388c6f0505170308543302b5@mail.gmail.com>
Message-ID: <f0388c6f050517031066c91371@mail.gmail.com>

> I'd like to see it focus on the core docs and perhaps
> provide some form of preferred or recommended learning path.

I agree, the problem is that I don't actually know what the best
learning path would be. Any suggestions?

- Brendon



From teratorn at twistedmatrix.com  Tue May 17 07:55:57 2005
From: teratorn at twistedmatrix.com (Eric Mangold)
Date: Tue, 17 May 2005 23:55:57 +1000
Subject: [Twisted-Python] Unit Testing in twisted 2.0
In-Reply-To: <4283B492.2030301@sbcglobal.net>
References: <4283B492.2030301@sbcglobal.net>
Message-ID: <op.sqxabj1cy3d107@aspen>

On Fri, 13 May 2005 05:54:58 +1000, Shawn Church <Sl_Church at sbcglobal.net>  
wrote:

> I've been following the recent thread on the problems with twisted.trial
> and since it is evidently broken I am hesitant about using it.  Instead
> I create a class that performs all of my tests and sets class attributes
> with the results.  I can then create this class once (at the module
> level) and then use the standard unittest module to check the results.
> For example (this is untested code, I'm just trying to briefly
> illustrate the approach I'm taking):
>
> class PerformTests:
>     def __init__(self):
>        self.reactorStartedResults=False
>        self.reactorStoppedResults=False
>
>        reactor.callLater(0,self.reactorStarted)
>        reactor.run()
>        self.reactorStoppedResults=True
>
>     def reactorStarted(self):
>        self.reactorStartedResults=True
>
>        # Issue another test here with .addboth(self.nextTestMethodName)
> or stop reactor:
>        reactor.stop()
>
> performTests=PerformTests()
>
> class Test(unittest.TestCase):
>     def testReactorStart(self):
>         self.assert_(performTests.self.reactorStartedResults)
>
>     def testReactorStopped(self):
>         self.assert_(performTests.self.reactorStoppedResults)
>
>    # other tests
>
>
> Should I use twisted.trial despite it's problems?  If not, is there a
> better way to implement unit testing then the approach illustrated
> above?  Any suggestions will be appreciated.

I would say just use trial. It mostly works.

-Eric

> Thanks,
>
>
> Shawn Church
> sl_church at sbcglobal.net
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>





From robin at wiretooth.com  Tue May 17 17:24:17 2005
From: robin at wiretooth.com (Robin Bryce)
Date: Wed, 18 May 2005 00:24:17 +0100
Subject: [Twisted-Python] pending twisted fixes
In-Reply-To: <0EE98997-126D-460D-ACBC-7F296FF0C2B8@redivi.com>
References: <20050512001625.GP6313@g5.random>	<20050512184758.15422.1332721614.divmod.quotient.34976@ohm>
	<20050514122105.GG13985@g5.random> <4287D59F.4080408@wiretooth.com>
	<0EE98997-126D-460D-ACBC-7F296FF0C2B8@redivi.com>
Message-ID: <428A7D21.4000100@wiretooth.com>

Ah, thanks Bob. Makes sense now :)

Bob Ippolito wrote:
> 
> On May 15, 2005, at 7:05 PM, Robin Bryce wrote:
> 
>>> On a related note, I wonder how complex it would be to really support
>>> multiple threads listening in epoll and requiring each context to  take
>>> its locks, so then different contexts could scale in smp.
>>>
>>
>> I thought python's GIL lock made scaling like this for smp  impossible ?
> 
> 
> No.  epoll isn't Python bytecode, so it can block without holding the  GIL.
> 
> -bob
> 



From mcfletch at rogers.com  Wed May 18 07:31:44 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Wed, 18 May 2005 09:31:44 -0400
Subject: [Twisted-Python] Anyone seeing hanging of Twisted HTTPS servers?
Message-ID: <428B43C0.3050104@rogers.com>

We've recently picked up 3 or 4 minute blocks on one of our servers. 
Wondering if anyone else has seen these.

We have a "zombiechecker" script that downloads the front page of the
web front-end every minute (restarting the entire server if it can't
connect).  After 20 or 30 minutes (sometimes a few hours) we see 3 or 4
of those checks queued, the connection has been accepted, but the server
appears to be frozen (the reactor doesn't appear to be processing
anything, neither web front-end or the processing back-end).  After the
3 or 4 minutes frozen, the server starts processing the back-end
operations and eventually gets around to replying to the web front-end
requests.  Most of the time we see an error in the logs like this just
as the blockage is clearing:

Traceback (most recent call last):
  File "/home/mcfletch/cvs/twisted/python/log.py", line 41, in
callWithContext
    return context.call({ILogContext: newCtx}, func, *args, **kw)
  File "/home/mcfletch/cvs/twisted/python/context.py", line 52, in
callWithContext
    return self.currentContext().callWithContext(ctx, func, *args, **kw)
  File "/home/mcfletch/cvs/twisted/python/context.py", line 31, in
callWithContext
    return func(*args,**kw)
  File "/home/mcfletch/cvs/twisted/internet/selectreactor.py", line 139,
in _doReadOrWrite
    why = getattr(selectable, method)()
--- <exception caught here> ---
  File "/home/mcfletch/cvs/twisted/internet/tcp.py", line 111, in doRead
    return Connection.doRead(self)
  File "/home/mcfletch/cvs/twisted/internet/tcp.py", line 343, in doRead
    data = self.socket.recv(self.bufferSize)
OpenSSL.SSL.Error: [('SSL routines', 'SSL23_READ', 'ssl handshake failure')]

but the web front-end query still goes through (possibly because
web.client is retrying?).

Anyway, just wondering if anyone else has seen it or whether we're off
in funky land. In the meantime I'm going to try turning on every bit of
logging in the system while I'm off at a meeting and see if I can
discover the precise point where it's hanging.

Oh, FreeBSD 5.3-RC2, Python 2.3.4, Twisted 2.0, Nevow from CVS.

Thanks all,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From andrew-twisted at puzzling.org  Wed May 18 07:59:23 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 18 May 2005 23:59:23 +1000
Subject: [Twisted-Python] Anyone seeing hanging of Twisted HTTPS servers?
In-Reply-To: <428B43C0.3050104@rogers.com>
References: <428B43C0.3050104@rogers.com>
Message-ID: <20050518135923.GO27700@frobozz>

On Wed, May 18, 2005 at 09:31:44AM -0400, Mike C. Fletcher wrote:
[...]
> 
> Anyway, just wondering if anyone else has seen it or whether we're off
> in funky land. In the meantime I'm going to try turning on every bit of
> logging in the system while I'm off at a meeting and see if I can
> discover the precise point where it's hanging.

If you really want lots of logging, pass --spew to twistd :)

> Oh, FreeBSD 5.3-RC2, Python 2.3.4, Twisted 2.0, Nevow from CVS.

Potentially relevant as well is the version of PyOpenSSL -- I don't know
much about the SSL stuff in Twisted, but it's possible the bug lies there.

-Andrew.




From simon at hedberg.net  Wed May 18 08:25:14 2005
From: simon at hedberg.net (Simon)
Date: Wed, 18 May 2005 16:25:14 +0200
Subject: [Twisted-Python] Simpler twistedmatrix.com doc indexes
In-Reply-To: <f0388c6f050517031066c91371@mail.gmail.com>
Message-ID: <000001c55bb5$69a6e280$506271d5@hp>

Hi,
I saw that you've integrated the HOWTO's in the docs index page now. As
I said on IRC i've made a outline of the HOWTO index that I feel might
be a bit more intuitive. See the attached notes and the result in html.

/Simon
(STemplar)

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Brendon
Hogger
Sent: den 17 maj 2005 12:10
To: twisted-python at twistedmatrix.com
Subject: Re: [Twisted-Python] Simpler twistedmatrix.com doc indexes


> I'd like to see it focus on the core docs and perhaps
> provide some form of preferred or recommended learning path.

I agree, the problem is that I don't actually know what the best
learning path would be. Any suggestions?

- Brendon

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: twisted-doc-remake.txt
URL: </pipermail/twisted-python/attachments/20050518/d11ef9f0/attachment-0002.txt>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050518/d11ef9f0/attachment-0002.html>

From cmoad at indiana.edu  Wed May 18 08:37:06 2005
From: cmoad at indiana.edu (Charles Moad)
Date: Wed, 18 May 2005 09:37:06 -0500
Subject: [Twisted-Python] Anyone seeing hanging of Twisted HTTPS servers?
In-Reply-To: <20050518135923.GO27700@frobozz>
References: <428B43C0.3050104@rogers.com> <20050518135923.GO27700@frobozz>
Message-ID: <428B5312.5080302@indiana.edu>

I am getting this same error (with the request going through fine) with
version 0.6 of PyOpenSSL.

-Charlie

Andrew Bennetts wrote:
> On Wed, May 18, 2005 at 09:31:44AM -0400, Mike C. Fletcher wrote:
> [...]
> 
>>Anyway, just wondering if anyone else has seen it or whether we're off
>>in funky land. In the meantime I'm going to try turning on every bit of
>>logging in the system while I'm off at a meeting and see if I can
>>discover the precise point where it's hanging.
> 
> 
> If you really want lots of logging, pass --spew to twistd :)
> 
> 
>>Oh, FreeBSD 5.3-RC2, Python 2.3.4, Twisted 2.0, Nevow from CVS.
> 
> 
> Potentially relevant as well is the version of PyOpenSSL -- I don't know
> much about the SSL stuff in Twisted, but it's possible the bug lies there.
> 
> -Andrew.
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From orbitz at ezabel.com  Wed May 18 11:57:52 2005
From: orbitz at ezabel.com (orbitz at ezabel.com)
Date: Wed, 18 May 2005 13:57:52 -0400
Subject: [Twisted-Python] Twistd thread problem
In-Reply-To: <428931B0.5060901@crm3.com>
References: <428931B0.5060901@crm3.com>
Message-ID: <9c78c12df892cc1b36503f8f3b12cc0e@ezabel.com>

If your making a proxy you shouldn't a queue or worker threads.  Just 
connect to the destination and send your incoming data to it and it's 
outgoing data back to the client.  This can all be done in one thread.  
Even if you don't do it like this you also don't need a thread to send 
the data, sending smtp is fairly trivial you can do it by hand, or use 
the smtp client that comes with twisted (might as well learn sometime).

On May 16, 2005, at 7:50 PM, Jan Van Uytven wrote:

> Hi all,
>
> I coded an SMTP proxy that receives incoming e-mail requests and 
> pushes the received e-mail onto a Queue were it is processed by a 
> worker thread that finishes by sending the e-mail on to another SMTP 
> server.
>
> The server part of the proxy was written in Twisted, but the worker 
> thread uses smtplib to fire off the processed e-mails (I didn't know 
> how to use the twisted smtp client in a thread).
>
> When I run the application using twistd -noy <appname>, it works 
> great. When I try to daemonize it (twistd -oy <appname>) the server 
> part works, but the worker thread doesn't. It creates and then I 
> suspect it immediately dies, as no error is returned upon creation. A 
> debug of the queue reveals that the thread is not pulling items off 
> it. A debugging statement placed at the top of the thread never runs, 
> and the twistd log reports nothing wrong. I'm using 
> reactor.callInThread to start the worker function.
>
> I tried running twistd --spew -oy <appname> and captured the log it 
> produced. I did a filter for anything with 'thread' in it, this is the 
> result:
>
> 2005/05/16 09:15 PDT [-] function ? in 
> /usr/lib/python2.3/site-packages/twisted/python/threadpool.py, line 11
> 2005/05/16 09:15 PDT [-] function WorkerStop in 
> /usr/lib/python2.3/site-packages/twisted/python/threadpool.py, line 23
> 2005/05/16 09:15 PDT [-] function init in 
> /usr/lib/python2.3/site-packages/twisted/python/threadable.py, line 
> 219
> 2005/05/16 09:15 PDT [-] function ThreadPool in 
> /usr/lib/python2.3/site-packages/twisted/python/threadpool.py, line 31
> 2005/05/16 09:15 PDT [-] function ThreadSafeList in 
> /usr/lib/python2.3/site-packages/twisted/python/threadpool.py, line 
> 199
> 2005/05/16 09:15 PDT [-] function init in 
> /usr/lib/python2.3/site-packages/twisted/python/threadable.py, line 
> 219
> 2005/05/16 09:15 PDT [-] method __init__ of 
> twisted.python.threadpool.ThreadPool at -1216569236
> 2005/05/16 09:15 PDT [-] method start of 
> twisted.python.threadpool.ThreadPool at -1216569236
> 2005/05/16 09:15 PDT [-] method adjustPoolsize of 
> twisted.python.threadpool.ThreadPool at -1216569236
> 2005/05/16 09:15 PDT [-] method _startSomeWorkers of 
> twisted.python.threadpool.ThreadPool at -1216569236
> 2005/05/16 09:15 PDT [-] method callInThread of 
> twisted.python.threadpool.ThreadPool at -1216569236
> 2005/05/16 09:15 PDT [-] method _startSomeWorkers of 
> twisted.python.threadpool.ThreadPool at -1216569236
> 2005/05/16 09:15 PDT [-] method startAWorker of 
> twisted.python.threadpool.ThreadPool at -1216569236
> 2005/05/16 09:15 PDT [-] method __init__ of threading.Thread at 
> -1216568116
> 2005/05/16 09:15 PDT [-] method __init__ of threading.Thread at 
> -1216568116
> 2005/05/16 09:15 PDT [-] method _set_daemon of threading.Thread at 
> -1216568116
> 2005/05/16 09:15 PDT [-] function currentThread in 
> /usr/lib/python2.3/threading.py, line 669
> 2005/05/16 09:15 PDT [-] method isDaemon of threading._MainThread at 
> -1214935060
> 2005/05/16 09:15 PDT [-] function Condition in 
> /usr/lib/python2.3/threading.py, line 147
> 2005/05/16 09:15 PDT [-] method __init__ of threading._Condition at 
> -1216567604
> 2005/05/16 09:15 PDT [-] method __init__ of threading._Condition at 
> -1216567604
> 2005/05/16 09:15 PDT [-] method start of threading.Thread at 
> -1216568116
> 2005/05/16 09:15 PDT [-] method _note of threading.Thread at 
> -1216568116
> 2005/05/16 09:15 PDT [-] method run of threading.Thread at -1216568116
> 2005/05/16 09:15 PDT [-] method _worker of 
> twisted.python.threadpool.ThreadPool at -1216569236
> 2005/05/16 09:15 PDT [-] function currentThread in 
> /usr/lib/python2.3/threading.py, line 669
> 2005/05/16 09:15 PDT [-] function threadMailer in twisted-copyuser.py, 
> line 201
> 2005/05/16 09:15 PDT [-] method acquire of 
> twisted.python.threadable._XLock at -1216639284
> 2005/05/16 09:15 PDT [-] method release of 
> twisted.python.threadable._XLock at -1216639284
> 2005/05/16 09:15 PDT [-] method acquire of 
> twisted.python.threadable._XLock at -1216639284
> 2005/05/16 09:15 PDT [-] method release of 
> twisted.python.threadable._XLock at -1216639284
> 2005/05/16 09:15 PDT [-] method acquire of 
> twisted.python.threadable._XLock at -1216639284
> 2005/05/16 09:15 PDT [-] method release of 
> twisted.python.threadable._XLock at -1216639284
> 2005/05/16 09:15 PDT [-] function registerAsIOThread in 
> /usr/lib/python2.3/site-packages/twisted/python/threadable.py, line 
> 262
>
> Why would the worker thread act differently with twistd daemonized? 
> Any suggestions, advice, or hints would be welcome.
>
> Thanks,
>
> Jan
>
> -- 
> Jan Van Uytven
> Computer Systems & Network Engineer
> Convergent Media Network
> wyvern at crm3.com
>
> Only in silence the word,
> only in dark the light,
> only in dying life:
> Bright the hawk's flight on the empty sky.
>
> - Ursula K. LeGuin, 'A Wizard of Earthsea'
>
> *** LEGAL STUFF ***
> This electronic message transmission, including any attached files, 
> contains information which may be confidential and/or privileged.
> The information is intended to be for the SOLE use of the individual 
> or entity named above. If you are not the intended recipient, be aware 
> that any review, disclosure, copying, distribution or use of the 
> contents of this information is prohibited. This message is not to be 
> forwarded for any reason without prior consent of the sender.
> If you have received this electronic transmission in error, please 
> notify the sender immediately by telephone (250) 386-4266 or by a 
> 'reply to sender' only message and destroy all electronic and hard 
> copies of the communication, including attachments, without reading or 
> saving in any manner.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From bv at bnl.gov  Wed May 18 12:25:35 2005
From: bv at bnl.gov (Brett Viren)
Date: Wed, 18 May 2005 14:25:35 -0400
Subject: [Twisted-Python] Alarm collection and display system?
Message-ID: <ir4u0l0l7c0.fsf@minos.phy.bnl.gov>

Hi,

Our experiment has need for a pseudo real-time (prompt) networked
alarm collection and display system.  Before just diving in and
writing something I thought I'd best try to see if anything is out
there and Twisted certainly seems a fertile enough framework to have
had at least one such system sprouted already.

What we have is several, independent processes all of which can raise
problems of varying degrees of severity.  Most of the alarm producers
are written in differing languages and frameworks and are scattered
over different computers (some in different states).  

We want to centralize these alarms and then serve them to one or more
consumers.  Ideally alarms are "pushed" to consumers rather than
needing to poll so as to minimize latency between production and
consumption.  But, because some consumers will be behind firewalls the
consumers should initiate the connection.

Anything already fit this bill or come close?  If we do end up rolling
our own, any suggestions to get us started in the right direction?

Thanks,
-Brett.






From radeex at gmail.com  Wed May 18 17:24:37 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Thu, 19 May 2005 09:24:37 +1000
Subject: [Twisted-Python] Anyone seeing hanging of Twisted HTTPS servers?
In-Reply-To: <428B5312.5080302@indiana.edu>
References: <428B43C0.3050104@rogers.com> <20050518135923.GO27700@frobozz>
	<428B5312.5080302@indiana.edu>
Message-ID: <60ed19d4050518162434ad4c88@mail.gmail.com>

On 5/19/05, Charles Moad <cmoad at indiana.edu> wrote:
> I am getting this same error (with the request going through fine) with
> version 0.6 of PyOpenSSL.

Pretty much all Twisted https servers will get this error very often.
It's just spurious debugging info, afaict, and we have never had any
kind of hanging in our web app at work. I'd bet the hanging is
something else. I suggest running 'strace -p <pid>' (or whatever the
FreeBSD equivalent is) on the process when you know that it's hanging,
and see what it's doing, perhaps blocking on a syscall.

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From glyph at divmod.com  Wed May 18 17:32:17 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Wed, 18 May 2005 19:32:17 -0400
Subject: [Twisted-Python] Alarm collection and display system?
In-Reply-To: <ir4u0l0l7c0.fsf@minos.phy.bnl.gov>
References: <ir4u0l0l7c0.fsf@minos.phy.bnl.gov>
Message-ID: <428BD081.7050103@divmod.com>

Brett Viren wrote:

> We want to centralize these alarms and then serve them to one or more
> consumers.  Ideally alarms are "pushed" to consumers rather than
> needing to poll so as to minimize latency between production and
> consumption.  But, because some consumers will be behind firewalls the
> consumers should initiate the connection.
> 
> Anything already fit this bill or come close?  If we do end up rolling
> our own, any suggestions to get us started in the right direction?

The obvious solution is just to roll your own and keep sockets always 
open from the consumers behind firewalls, and push notifications down 
those channels.

I'm also working on something like this, a protocol called "Q2Q", but 
it's heavily in development now so I wouldn't suggest it if you have any 
deadlines.



From leszczynscy at yahoo.com  Wed May 18 17:44:35 2005
From: leszczynscy at yahoo.com (Andrzej Leszczynski)
Date: Wed, 18 May 2005 16:44:35 -0700 (PDT)
Subject: [Twisted-Python] ldaptor based LDAP server
In-Reply-To: 6667
Message-ID: <20050518234435.24622.qmail@web30502.mail.mud.yahoo.com>

Hi,
I am looking for a Python barebones for a simple LDAP
server project. It does not have to be Twisted based,
but it would be wonderful if it is. I need a very
simple server which is listening on some port and
accepts following LDAP messages:
	-bind
	-search
	-unbind

There are not going to be a actual LDAP database
backend. All what happens is parsing above and reply
with some simple content based on the some parameters
from the request.

I am just wondering with using ldaptor's protocol
components I could easily come up with such a server?
What do you think, would it be feasible with that?

Thanks in advance,

AndyL




From cmoad at indiana.edu  Wed May 18 18:50:46 2005
From: cmoad at indiana.edu (Charles Moad)
Date: Wed, 18 May 2005 19:50:46 -0500
Subject: [Twisted-Python] Anyone seeing hanging of Twisted HTTPS servers?
In-Reply-To: <60ed19d4050518162434ad4c88@mail.gmail.com>
References: <428B43C0.3050104@rogers.com> <20050518135923.GO27700@frobozz>
	<428B5312.5080302@indiana.edu>
	<60ed19d4050518162434ad4c88@mail.gmail.com>
Message-ID: <30BF17EC-4950-4270-B58F-E1AB58ACC176@indiana.edu>

     I just posted to say I get this message, but I do not experience  
a hang.  Except for bloating my log, it doesn't affect anything.

-Charlie

On May 18, 2005, at 6:24 PM, Christopher Armstrong wrote:

> On 5/19/05, Charles Moad <cmoad at indiana.edu> wrote:
>
>> I am getting this same error (with the request going through fine)  
>> with
>> version 0.6 of PyOpenSSL.
>>
>
> Pretty much all Twisted https servers will get this error very often.
> It's just spurious debugging info, afaict, and we have never had any
> kind of hanging in our web app at work. I'd bet the hanging is
> something else. I suggest running 'strace -p <pid>' (or whatever the
> FreeBSD equivalent is) on the process when you know that it's hanging,
> and see what it's doing, perhaps blocking on a syscall.
>
> -- 
>   Twisted   |  Christopher Armstrong: International Man of Twistery
>    Radix    |    -- http://radix.twistedmatrix.com
>             |  Release Manager, Twisted Project
>   \\\V///   |    -- http://twistedmatrix.com
>    |o O|    |  Founding Member, Hobart Hacking Society
> w----v----w-+    -- http://hackingsociety.org/chapters/hash
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From visceras at hotmail.com  Thu May 19 06:33:27 2005
From: visceras at hotmail.com (Alberto Trujillo)
Date: Thu, 19 May 2005 12:33:27 +0000
Subject: [Twisted-Python] Using form
Message-ID: <BAY24-F18538742B64B474E1AEDC1C5080@phx.gbl>

Hello:

I'm working with twisted since a few days ago, and although I have read the 
tutorial, still I have some question about the class Request.
Well, I have implemented project.rpy that have a form and use the method 
post the send the information to commit.rpy.

<form action="commit.rpy?action=""" + action + """&type=project&id=""" + 
projid + """ method="post">
<table align="center" width="750" border="0" cellpadding="3" cellspacing="1" 
bgcolor="#353535">
      <tr>
        <td bgcolor=#FFFFFF width="30%">
          User ID
        <td>
        <td bgcolor=#FFFFFF width="70%">
          <input name='user_id' type='text' value='""" + userid + """'>
      </tr>
      <tr>
        <td bgcolor=#FFFFFF width="30%">
          Project Name
        <td>
        <td bgcolor=#FFFFFF width="70%">
          <input name='project_name' type='text' value='""" + name + """'>
      </tr>

...

</table>
</form>

This a part of my code. The problem is how can I get the information in 
commit.rpy, and why all the information that I send using the method Post, 
is attached in the URL. I don't want that.

Thank you very much.





From mcfletch at rogers.com  Thu May 19 10:20:54 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Thu, 19 May 2005 12:20:54 -0400
Subject: [Twisted-Python] Anyone seeing hanging of Twisted HTTPS servers?
In-Reply-To: <60ed19d4050518162434ad4c88@mail.gmail.com>
References: <428B43C0.3050104@rogers.com>
	<20050518135923.GO27700@frobozz>	<428B5312.5080302@indiana.edu>
	<60ed19d4050518162434ad4c88@mail.gmail.com>
Message-ID: <428CBCE6.3010005@rogers.com>

Christopher Armstrong wrote:

>On 5/19/05, Charles Moad <cmoad at indiana.edu> wrote:
>  
>
>>I am getting this same error (with the request going through fine) with
>>version 0.6 of PyOpenSSL.
>>    
>>
>
>Pretty much all Twisted https servers will get this error very often.
>It's just spurious debugging info, afaict, and we have never had any
>kind of hanging in our web app at work. I'd bet the hanging is
>something else. I suggest running 'strace -p <pid>' (or whatever the
>FreeBSD equivalent is) on the process when you know that it's hanging,
>and see what it's doing, perhaps blocking on a syscall.
>  
>
Okay, eliminates that from consideration.  Thanks all for the reports. 
BTW, I'm also running 0.6 of PyOpenSSL.

Regarding systrace, I'd love to, but so far I've not been able to catch
the dratted thing in the condition more than once or twice, and it's
normally almost finished the hang by the time I get around to working on
it.  Suppose I should just sit here watching it for a few hours, or rig
up a monitor of some form.

Thanks again, all,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From foom at fuhm.net  Thu May 19 10:50:33 2005
From: foom at fuhm.net (James Y Knight)
Date: Thu, 19 May 2005 12:50:33 -0400
Subject: [Twisted-Python] Anyone seeing hanging of Twisted HTTPS servers?
In-Reply-To: <428CBCE6.3010005@rogers.com>
References: <428B43C0.3050104@rogers.com>
	<20050518135923.GO27700@frobozz>	<428B5312.5080302@indiana.edu>
	<60ed19d4050518162434ad4c88@mail.gmail.com>
	<428CBCE6.3010005@rogers.com>
Message-ID: <C945921D-A0CD-4B91-A64B-36A356DA9E76@fuhm.net>

On May 19, 2005, at 12:20 PM, Mike C. Fletcher wrote:

> Regarding systrace, I'd love to, but so far I've not been able to  
> catch
> the dratted thing in the condition more than once or twice, and it's
> normally almost finished the hang by the time I get around to  
> working on
> it.  Suppose I should just sit here watching it for a few hours, or  
> rig
> up a monitor of some form.
>

I think it's probably more likely that it's not hanging in C code at  
all, but in a bit of application python code. What I'd do is add a  
"watchdog" timer, something like this. Of course, this won't work if  
it's blocking in a C call somewhere because the python signal handler  
won't be called until the C call returns. But even that might give  
you some useful information on what the problem is.

import signal, pdb, sys
from twisted.internet import task

def timeout(*args):
   sys.stderr.write("SIGALRM timeout, breaking into debugger.\n")
   import pdb; pdb.set_trace()

signal.signal(signal.SIGALRM, timeout)

task.LoopingCall(signal.alarm, 10).start(1)

James



From itamar at itamarst.org  Thu May 19 11:41:19 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 19 May 2005 13:41:19 -0400
Subject: [Twisted-Python] Using form
In-Reply-To: <BAY24-F18538742B64B474E1AEDC1C5080@phx.gbl>
References: <BAY24-F18538742B64B474E1AEDC1C5080@phx.gbl>
Message-ID: <1116524479.9449.27.camel@localhost.localdomain>

On Thu, 2005-05-19 at 12:33 +0000, Alberto Trujillo wrote:

> I'm working with twisted since a few days ago, and although I have read the 
> tutorial, still I have some question about the class Request.

Please ask web questions on the twisted-web mailing list.




From maitland at vanu.com  Thu May 19 11:56:31 2005
From: maitland at vanu.com (maitland at vanu.com)
Date: Thu, 19 May 2005 13:56:31 -0400
Subject: [Twisted-Python] using yield in unittest.TestCase
Message-ID: <20050519175631.GB21108@flyingdutchmen.vanu.com>

Hi all-

I've been trying to unit test some code that uses a lot of generators
and Callbacks, so I would like to be able yield my Callbacks and check
them out.  However, whenever I stick a yield in my test case (in a
subclass of trial.unittest.TestCase), the test automatically passes
and, as far as I can tell, doesn't actually get evaluated at all.

Is this a known issue?  Does anybody know of a way I can work around
it?

Thanks,
-Maitland



From exarkun at divmod.com  Thu May 19 12:43:30 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Thu, 19 May 2005 18:43:30 GMT
Subject: [Twisted-Python] using yield in unittest.TestCase
In-Reply-To: <20050519175631.GB21108@flyingdutchmen.vanu.com>
Message-ID: <20050519184330.559.213507192.divmod.quotient.4605@ohm>

On Thu, 19 May 2005 13:56:31 -0400, maitland at vanu.com wrote:
>Hi all-
>
>I've been trying to unit test some code that uses a lot of generators
>and Callbacks, so I would like to be able yield my Callbacks and check
>them out.  However, whenever I stick a yield in my test case (in a
>subclass of trial.unittest.TestCase), the test automatically passes
>and, as far as I can tell, doesn't actually get evaluated at all.
>
>Is this a known issue?  Does anybody know of a way I can work around
>it?
>

    As you're probably aware, putting a yield into a function definition turns the function into a generator function.  As you are also probably aware, calling a generator function returns a generator, but doesn't execute any code in the generator function: only when the generator is iterated is the generator function executed.


    So trial calls your test method and gets back a generator.  It doesn't know a thing about generators.  So it ignores it and moves on.  The test passes because it didn't raise an exception.

    If you're trying to use the new Deferred generator feature to use use a generator function to manipulate a Deferred, you need to decorate your test method with deferredGenerator:

        def testFoo(self):
            ...
        testFoo = deferredGenerator(testFoo)

    If you're trying to use flow, you probably shouldn't.  It's unclear to me what the path to support flow in trial is.

    If you're trying to do something else... I'm confused.

  Jp



From mcfletch at rogers.com  Thu May 19 12:57:44 2005
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Thu, 19 May 2005 14:57:44 -0400
Subject: [Twisted-Python] Anyone seeing hanging of Twisted HTTPS servers?
In-Reply-To: <C945921D-A0CD-4B91-A64B-36A356DA9E76@fuhm.net>
References: <428B43C0.3050104@rogers.com>
	<20050518135923.GO27700@frobozz>	<428B5312.5080302@indiana.edu>
	<60ed19d4050518162434ad4c88@mail.gmail.com>
	<428CBCE6.3010005@rogers.com>
	<C945921D-A0CD-4B91-A64B-36A356DA9E76@fuhm.net>
Message-ID: <428CE1A8.901@rogers.com>

James Y Knight wrote:
...

> I think it's probably more likely that it's not hanging in C code at
> all, but in a bit of application python code. What I'd do is add a
> "watchdog" timer, something like this. Of course, this won't work if
> it's blocking in a C call somewhere because the python signal handler
> won't be called until the C call returns. But even that might give you
> some useful information on what the problem is.
>
> import signal, pdb, sys
> from twisted.internet import task
>
> def timeout(*args):
> sys.stderr.write("SIGALRM timeout, breaking into debugger.\n")
> import pdb; pdb.set_trace()
>
> signal.signal(signal.SIGALRM, timeout)
>
> task.LoopingCall(signal.alarm, 10).start(1)

That's really nice. However, it seems that the alarm handler drops into
the database thread, rather than the foreground thread. Still, it does
make it possible to simply log the heck out of everything and force an
exit of the whole application to see where in the log it's stopping.

Thanks,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From maitland at vanu.com  Thu May 19 13:12:58 2005
From: maitland at vanu.com (maitland at vanu.com)
Date: Thu, 19 May 2005 15:12:58 -0400
Subject: [Twisted-Python] using yield in unittest.TestCase
In-Reply-To: <20050519184330.559.213507192.divmod.quotient.4605@ohm>
References: <20050519175631.GB21108@flyingdutchmen.vanu.com>
	<20050519184330.559.213507192.divmod.quotient.4605@ohm>
Message-ID: <20050519191258.GA24128@flyingdutchmen.vanu.com>

Jp-

That makes sense.  I'm using flow, so maybe I see if I can port over
to deferredGenerators.

Thanks,
-Maitland

On Thu, May 19, 2005 at 06:43:30PM +0000, Jp Calderone wrote:
> On Thu, 19 May 2005 13:56:31 -0400, maitland at vanu.com wrote:
> >Hi all-
> >
> >I've been trying to unit test some code that uses a lot of generators
> >and Callbacks, so I would like to be able yield my Callbacks and check
> >them out.  However, whenever I stick a yield in my test case (in a
> >subclass of trial.unittest.TestCase), the test automatically passes
> >and, as far as I can tell, doesn't actually get evaluated at all.
> >
> >Is this a known issue?  Does anybody know of a way I can work around
> >it?
> >
> 
>    As you're probably aware, putting a yield into a function definition 
>    turns the function into a generator function.  As you are also probably 
>    aware, calling a generator function returns a generator, but doesn't 
>    execute any code in the generator function: only when the generator is 
>    iterated is the generator function executed.
> 
> 
>    So trial calls your test method and gets back a generator.  It doesn't 
>    know a thing about generators.  So it ignores it and moves on.  The test 
>    passes because it didn't raise an exception.
> 
>    If you're trying to use the new Deferred generator feature to use use a 
>    generator function to manipulate a Deferred, you need to decorate your 
>    test method with deferredGenerator:
> 
>        def testFoo(self):
>            ...
>        testFoo = deferredGenerator(testFoo)
> 
>    If you're trying to use flow, you probably shouldn't.  It's unclear to 
>    me what the path to support flow in trial is.
> 
>    If you're trying to do something else... I'm confused.
> 
>  Jp
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From tv at twistedmatrix.com  Thu May 19 13:15:09 2005
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu, 19 May 2005 22:15:09 +0300
Subject: [Twisted-Python] ldaptor based LDAP server
In-Reply-To: <20050518234435.24622.qmail@web30502.mail.mud.yahoo.com>
References: <20050518234435.24622.qmail@web30502.mail.mud.yahoo.com>
Message-ID: <428CE5BD.3030608@twistedmatrix.com>

Andrzej Leszczynski wrote:
> I am looking for a Python barebones for a simple LDAP
> server project. It does not have to be Twisted based,
> but it would be wonderful if it is. I need a very
> simple server which is listening on some port and
> accepts following LDAP messages:
> 	-bind
> 	-search
> 	-unbind

Well, ldaptor/protocols/ldap/ldapserver.py is for you then.

> There are not going to be a actual LDAP database
> backend. All what happens is parsing above and reply
> with some simple content based on the some parameters
> from the request.
> 
> I am just wondering with using ldaptor's protocol
> components I could easily come up with such a server?
> What do you think, would it be feasible with that?

If you want to reuse ldaptor search logic, search filter
handling, etc, subclass LDAPServer and provide an
IConnectedLDAPEntry adapter from the subclass to something
that implements the actual data storage. That way, you get
to use ldaptor's implementation of search etc; you just
provide a tree-like data structure of LDAP entries.

If you want full control of everything, and are willing
to really implement bind,search&unbind yourself pretty
much from scratch, subclass BaseLDAPServer and provide
methods
  handle_LDAPBindRequest
  handle_LDAPSearchRequest
  handle_LDAPUnbindRequest
see LDAPServer for hints on that.



From thomas at apestaart.org  Fri May 20 10:36:55 2005
From: thomas at apestaart.org (Thomas Vander Stichele)
Date: Fri, 20 May 2005 18:36:55 +0200
Subject: [Twisted-Python] twisted and network condition testing
Message-ID: <1116607015.26257.17.camel@otto.amantes>

Hi,

While working on Flumotion I've realized there are quite a few
conditions in real-life networks that I need to deal with and my
experience is fairly limited.  What can I say, I lived in a perfect
world before :)

All sorts of things trip up our application: machine lockups (where the
other end doesn't realize the connection is broken), temporary routing
problems, adsl connections being dropped, ...

After doing a lot of ad-hoc hacking to solve all those issues, I've
realized I'd better work on my understanding of the problem first, and
see how twisted behaves under these conditions, and what can be done.

I'm sure other people writing networked apps have gone through similar
issues, so what I'd like to know is:

- are there any good resources that explain all of the things that could
go wrong, what sort of conditions are similar (e.g. I assume you can use
iptables rules to simulate routing problems), which I need to worry
about, ... Any good networking overview book I should be taking to
heart ?
- have people done this sort of thing with Twisted ?
- are there any tools people are familiar with to simulate networking
problems ? In the case of machine lockup, my best idea right now for
example is to actually have a vmware virtual host lock up its kernel
with a silly kernel module.

Any help is appreciated,
Thomas

Dave/Dina : future TV today ! - http://www.davedina.org/
<-*- thomas (dot) apestaart (dot) org -*->
Another Love Song
That is written
Still nothing said
<-*- thomas (at) apestaart (dot) org -*->
URGent, best radio on the net - 24/7 ! - http://urgent.fm/






From npk.gangadhar at gmail.com  Fri May 20 11:59:01 2005
From: npk.gangadhar at gmail.com (Gangadhar NPK)
Date: Fri, 20 May 2005 23:29:01 +0530
Subject: [Twisted-Python] Twistd thread problem
In-Reply-To: <9c78c12df892cc1b36503f8f3b12cc0e@ezabel.com>
References: <428931B0.5060901@crm3.com>
	<9c78c12df892cc1b36503f8f3b12cc0e@ezabel.com>
Message-ID: <61b4e70f0505201059551003b1@mail.gmail.com>

All,
I am still trying to get a grip of what Twisted is and how to use it.
So my opinions might not be completely accurate.
But, this is not regarding Twisted anycase.
Orbitz, can you please state why do you think it is not a good idea to
use a worker thread. If the OP wanted to create a high volume SMTP
proxy with each worker thread handling every invocation from the smtp
client (smtplib in this case), then don't you think this can scale
better than a single thread, wherein the remaining clients are waiting
in the wait queue (if something like that exists, am not sure about
that) while one smtp data transfer is being done.
Also, if the OP chose to use a master-servant model wherein the master
thread keeps a tab on each of the worker thread to see the status and
(may be) notify the user (via a ui) of the status, the thread model
will work ?
Please share your thoughts on this.
Thank You
Gangadhar

On 5/18/05, orbitz at ezabel.com <orbitz at ezabel.com> wrote:
> If your making a proxy you shouldn't a queue or worker threads.  Just
> connect to the destination and send your incoming data to it and it's
> outgoing data back to the client.  This can all be done in one thread.
> Even if you don't do it like this you also don't need a thread to send
> the data, sending smtp is fairly trivial you can do it by hand, or use
> the smtp client that comes with twisted (might as well learn sometime).
> 
> On May 16, 2005, at 7:50 PM, Jan Van Uytven wrote:
> 
> > Hi all,
> >
> > I coded an SMTP proxy that receives incoming e-mail requests and
> > pushes the received e-mail onto a Queue were it is processed by a
> > worker thread that finishes by sending the e-mail on to another SMTP
> > server.
> >
> > The server part of the proxy was written in Twisted, but the worker
> > thread uses smtplib to fire off the processed e-mails (I didn't know
> > how to use the twisted smtp client in a thread).
> >
> > When I run the application using twistd -noy <appname>, it works
> > great. When I try to daemonize it (twistd -oy <appname>) the server
> > part works, but the worker thread doesn't. It creates and then I
> > suspect it immediately dies, as no error is returned upon creation. A
> > debug of the queue reveals that the thread is not pulling items off
> > it. A debugging statement placed at the top of the thread never runs,
> > and the twistd log reports nothing wrong. I'm using
> > reactor.callInThread to start the worker function.
> >
> > I tried running twistd --spew -oy <appname> and captured the log it
> > produced. I did a filter for anything with 'thread' in it, this is the
> > result:
> >
> > 2005/05/16 09:15 PDT [-] function ? in
> > /usr/lib/python2.3/site-packages/twisted/python/threadpool.py, line 11
> > 2005/05/16 09:15 PDT [-] function WorkerStop in
> > /usr/lib/python2.3/site-packages/twisted/python/threadpool.py, line 23
> > 2005/05/16 09:15 PDT [-] function init in
> > /usr/lib/python2.3/site-packages/twisted/python/threadable.py, line
> > 219
> > 2005/05/16 09:15 PDT [-] function ThreadPool in
> > /usr/lib/python2.3/site-packages/twisted/python/threadpool.py, line 31
> > 2005/05/16 09:15 PDT [-] function ThreadSafeList in
> > /usr/lib/python2.3/site-packages/twisted/python/threadpool.py, line
> > 199
> > 2005/05/16 09:15 PDT [-] function init in
> > /usr/lib/python2.3/site-packages/twisted/python/threadable.py, line
> > 219
> > 2005/05/16 09:15 PDT [-] method __init__ of
> > twisted.python.threadpool.ThreadPool at -1216569236
> > 2005/05/16 09:15 PDT [-] method start of
> > twisted.python.threadpool.ThreadPool at -1216569236
> > 2005/05/16 09:15 PDT [-] method adjustPoolsize of
> > twisted.python.threadpool.ThreadPool at -1216569236
> > 2005/05/16 09:15 PDT [-] method _startSomeWorkers of
> > twisted.python.threadpool.ThreadPool at -1216569236
> > 2005/05/16 09:15 PDT [-] method callInThread of
> > twisted.python.threadpool.ThreadPool at -1216569236
> > 2005/05/16 09:15 PDT [-] method _startSomeWorkers of
> > twisted.python.threadpool.ThreadPool at -1216569236
> > 2005/05/16 09:15 PDT [-] method startAWorker of
> > twisted.python.threadpool.ThreadPool at -1216569236
> > 2005/05/16 09:15 PDT [-] method __init__ of threading.Thread at
> > -1216568116
> > 2005/05/16 09:15 PDT [-] method __init__ of threading.Thread at
> > -1216568116
> > 2005/05/16 09:15 PDT [-] method _set_daemon of threading.Thread at
> > -1216568116
> > 2005/05/16 09:15 PDT [-] function currentThread in
> > /usr/lib/python2.3/threading.py, line 669
> > 2005/05/16 09:15 PDT [-] method isDaemon of threading._MainThread at
> > -1214935060
> > 2005/05/16 09:15 PDT [-] function Condition in
> > /usr/lib/python2.3/threading.py, line 147
> > 2005/05/16 09:15 PDT [-] method __init__ of threading._Condition at
> > -1216567604
> > 2005/05/16 09:15 PDT [-] method __init__ of threading._Condition at
> > -1216567604
> > 2005/05/16 09:15 PDT [-] method start of threading.Thread at
> > -1216568116
> > 2005/05/16 09:15 PDT [-] method _note of threading.Thread at
> > -1216568116
> > 2005/05/16 09:15 PDT [-] method run of threading.Thread at -1216568116
> > 2005/05/16 09:15 PDT [-] method _worker of
> > twisted.python.threadpool.ThreadPool at -1216569236
> > 2005/05/16 09:15 PDT [-] function currentThread in
> > /usr/lib/python2.3/threading.py, line 669
> > 2005/05/16 09:15 PDT [-] function threadMailer in twisted-copyuser.py,
> > line 201
> > 2005/05/16 09:15 PDT [-] method acquire of
> > twisted.python.threadable._XLock at -1216639284
> > 2005/05/16 09:15 PDT [-] method release of
> > twisted.python.threadable._XLock at -1216639284
> > 2005/05/16 09:15 PDT [-] method acquire of
> > twisted.python.threadable._XLock at -1216639284
> > 2005/05/16 09:15 PDT [-] method release of
> > twisted.python.threadable._XLock at -1216639284
> > 2005/05/16 09:15 PDT [-] method acquire of
> > twisted.python.threadable._XLock at -1216639284
> > 2005/05/16 09:15 PDT [-] method release of
> > twisted.python.threadable._XLock at -1216639284
> > 2005/05/16 09:15 PDT [-] function registerAsIOThread in
> > /usr/lib/python2.3/site-packages/twisted/python/threadable.py, line
> > 262
> >
> > Why would the worker thread act differently with twistd daemonized?
> > Any suggestions, advice, or hints would be welcome.
> >
> > Thanks,
> >
> > Jan
> >
> > --
> > Jan Van Uytven
> > Computer Systems & Network Engineer
> > Convergent Media Network
> > wyvern at crm3.com
> >
> > Only in silence the word,
> > only in dark the light,
> > only in dying life:
> > Bright the hawk's flight on the empty sky.
> >
> > - Ursula K. LeGuin, 'A Wizard of Earthsea'
> >
> > *** LEGAL STUFF ***
> > This electronic message transmission, including any attached files,
> > contains information which may be confidential and/or privileged.
> > The information is intended to be for the SOLE use of the individual
> > or entity named above. If you are not the intended recipient, be aware
> > that any review, disclosure, copying, distribution or use of the
> > contents of this information is prohibited. This message is not to be
> > forwarded for any reason without prior consent of the sender.
> > If you have received this electronic transmission in error, please
> > notify the sender immediately by telephone (250) 386-4266 or by a
> > 'reply to sender' only message and destroy all electronic and hard
> > copies of the communication, including attachments, without reading or
> > saving in any manner.
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From npk.gangadhar at gmail.com  Fri May 20 12:09:40 2005
From: npk.gangadhar at gmail.com (Gangadhar NPK)
Date: Fri, 20 May 2005 23:39:40 +0530
Subject: [Twisted-Python] Alarm collection and display system?
In-Reply-To: <428BD081.7050103@divmod.com>
References: <ir4u0l0l7c0.fsf@minos.phy.bnl.gov> <428BD081.7050103@divmod.com>
Message-ID: <61b4e70f05052011094a078865@mail.gmail.com>

Hi Brett,
Let me restate the problem (in an oversimplified way, sorry about that)
 - the ability for disparate systems scattered across the network to
push messages to interested consumers distributed across the network
in a (near) real-time fashion.
Did I get it right ?
If that is the case, then as Glyph suggested, keep your consumers
available to get messages from the producers.
As an aside, can you share how you plan to go about creating a
distributed subscription service - I mean, how do the consumers
provide information for producers to know about the subscription
status. If you think it is not right to send to the list, can you
atleast (if possible) mail me atleast.
Thank You
Gangadhar


On 5/19/05, Glyph Lefkowitz <glyph at divmod.com> wrote:
> Brett Viren wrote:
> 
> > We want to centralize these alarms and then serve them to one or more
> > consumers.  Ideally alarms are "pushed" to consumers rather than
> > needing to poll so as to minimize latency between production and
> > consumption.  But, because some consumers will be behind firewalls the
> > consumers should initiate the connection.
> >
> > Anything already fit this bill or come close?  If we do end up rolling
> > our own, any suggestions to get us started in the right direction?
> 
> The obvious solution is just to roll your own and keep sockets always
> open from the consumers behind firewalls, and push notifications down
> those channels.
> 
> I'm also working on something like this, a protocol called "Q2Q", but
> it's heavily in development now so I wouldn't suggest it if you have any
> deadlines.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From Henning.Ramm at mediapro-gmbh.de  Fri May 20 12:54:57 2005
From: Henning.Ramm at mediapro-gmbh.de (Henning.Ramm at mediapro-gmbh.de)
Date: Fri, 20 May 2005 20:54:57 +0200
Subject: [Twisted-Python] Alarm collection and display system?
Message-ID: <F92274058556DE42B94B148EEFB9183949E6EA@exchange-03.suedkurier.de>

>Let me restate the problem (in an oversimplified way, sorry about that)
> - the ability for disparate systems scattered across the network to
>push messages to interested consumers distributed across the network
>in a (near) real-time fashion.

I thought about using chat clients (IRC, twisted.words or the like) for that purpose, so that...
- all error "producers" can just send messages to an chat server
- all interested users just start their chat client
- different workflows (= different interested people) could just use different channels ("rooms")
- someone who will handle a problem could just type "I'll handle that", avoiding several people jumping without knowing of each other
- people who aren't at work don't get flooded with error mails (like we have it today)

Perhaps one must enhance a chat software to handle special messages in a special way.


Best regards,
Henning Hraban Ramm
Südkurier Medienhaus / MediaPro
Support/Admin/Development Dept.



From bv at bnl.gov  Fri May 20 12:58:30 2005
From: bv at bnl.gov (Brett Viren)
Date: Fri, 20 May 2005 14:58:30 -0400
Subject: [Twisted-Python] Alarm collection and display system?
In-Reply-To: <61b4e70f05052011094a078865@mail.gmail.com> (Gangadhar NPK's
	message of "Fri, 20 May 2005 23:39:40 +0530")
References: <ir4u0l0l7c0.fsf@minos.phy.bnl.gov> <428BD081.7050103@divmod.com>
	<61b4e70f05052011094a078865@mail.gmail.com>
Message-ID: <ir4u0kxenc9.fsf@minos.phy.bnl.gov>

Gangadhar NPK <npk.gangadhar at gmail.com> writes:

> Hi Brett,
> Let me restate the problem (in an oversimplified way, sorry about that)
>  - the ability for disparate systems scattered across the network to
> push messages to interested consumers distributed across the network
> in a (near) real-time fashion.
> Did I get it right ?

Yep, exactly.

> If that is the case, then as Glyph suggested, keep your consumers
> available to get messages from the producers.

Yes, sage advice.  

> As an aside, can you share how you plan to go about creating a
> distributed subscription service - I mean, how do the consumers
> provide information for producers to know about the subscription
> status.

The idea was to *not* distribute the subscription service, but rather
to centralize it into a single, well known, server, (actually, a
"proxy server" might be the more proper term).  All producers deliver
messages to this single proxy which then delivers them to any
connected consumers.  The producers don't know or care who the
consumers are.  Very simple (I hope).

My first choice would be to use XML-RPC for the protocol.  Since there
are a plethora of XML-RPC implementations it should make it easier to
glue in this protocol to the disparate producers.

-Brett.



From theshz at gmail.com  Fri May 20 17:04:50 2005
From: theshz at gmail.com (theshz)
Date: Fri, 20 May 2005 16:04:50 -0700
Subject: [Twisted-Python] how to write an interactive client?
References: <ir4u0l0l7c0.fsf@minos.phy.bnl.gov>
	<428BD081.7050103@divmod.com><61b4e70f05052011094a078865@mail.gmail.com>
	<ir4u0kxenc9.fsf@minos.phy.bnl.gov>
Message-ID: <001201c55d90$546f6ef0$800101df@sv.us.sonicwall.com>

Hi, I've written a simple twisted server, which accepts client connections,
and respond with some simple text depending on what the client sends. This
is working fine if I use telnet to connect to the server, and enter the
commands one at a time. I'd like to write a twisted client to simulate this,
i.e., the client has a list of commands to send, it will send one at a time,
(may be wait a little bit between the commands,) and print out the responses
from the server. I couldn't seem to get beyond the first command, following
code seems to send all the commands at the end, rather than one at a time,
how can I add sleep in between? Thanks:

from twisted.internet.protocol import ReconnectingClientFactory
from twisted.protocols import basic
from twisted.internet import reactor
from sys import stdout
import time

class MyClientProtocol(basic.LineReceiver):
 def lineReceived(self,data):
  stdout.write("Server:" + data+"\n"),

 def connectionMade(self):
      stdout.write("connectionMade\n")
      self.transport.write("start:\r\n")
      self.transport.write("command1:\r\n")
      self.transport.write("command2:\r\n")
      self.transport.write("command3:\r\n")
      self.transport.write("end:\r\n")


class MyClientFactory(ReconnectingClientFactory):
 def startedConnecting(self, connector):
  stdout.write("Started to connect\n")

 def buildProtocol(self,addr):
  stdout.write("Connected\nResetting reconnection delay")
  self.resetDelay()
  return MyClientProtocol()

 def clientConnectionLost(self, connector, reason):
  stdout.write("Lost connection, reason:" + reason)
  ReconnectingClientFactory.clientConnectionList(self, connector, reason)

 def clientConnectionFailed(self, connector,reason):
  stdout.write("Connection failed, reason:" + reason)
  ReconnectingClientFactory.clientConnectionFailed(self, connector, reason)

def main():
 reactor.connectTCP("localhost",82828, MyClientFactory())
 reactor.run()

if __name__ == '__main__':
 main()




From exarkun at divmod.com  Fri May 20 17:26:00 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 20 May 2005 23:26:00 GMT
Subject: [Twisted-Python] how to write an interactive client?
In-Reply-To: <001201c55d90$546f6ef0$800101df@sv.us.sonicwall.com>
Message-ID: <20050520232600.559.607604854.divmod.quotient.5672@ohm>

On Fri, 20 May 2005 16:04:50 -0700, theshz <theshz at gmail.com> wrote:
>Hi, I've written a simple twisted server, which accepts client connections,
>and respond with some simple text depending on what the client sends. This
>is working fine if I use telnet to connect to the server, and enter the
>commands one at a time. I'd like to write a twisted client to simulate this,
>i.e., the client has a list of commands to send, it will send one at a time,
>(may be wait a little bit between the commands,) and print out the responses
>from the server. I couldn't seem to get beyond the first command, following
>code seems to send all the commands at the end, rather than one at a time,
>how can I add sleep in between? Thanks:
>
>from twisted.internet.protocol import ReconnectingClientFactory
>from twisted.protocols import basic
>from twisted.internet import reactor
>from sys import stdout
>import time
>
>class MyClientProtocol(basic.LineReceiver):
> def lineReceived(self,data):
>  stdout.write("Server:" + data+"\n"),
>
> def connectionMade(self):
>      stdout.write("connectionMade\n")
>      self.transport.write("start:\r\n")
>      self.transport.write("command1:\r\n")
>      self.transport.write("command2:\r\n")
>      self.transport.write("command3:\r\n")
>      self.transport.write("end:\r\n")
>

  Try this version of connectionMade, along with this definition of lineReceived:

    lines = ["command1", "command2", "command3", "end"]
    def connectionMade(self):
        print "connectionMade"
        self.lines = self.lines[:]
        self.sendLine("start:")

    def lineReceived(self, line):
        print "Got a line:", repr(line)
        if self.lines:
            self.sendLine(self.lines.pop(0) + ":")

  Of course, there are other ways to do this.  You could respond to timing events instead of network events:

    lines = ["command1", "command2", "command3", "end"]
    def connectionMade(self):
        print "connectionMade"
        self.lines = self.lines[:]
        self.sendCommand()

    def sendCommand(self):
        self.sendLine(self.lines.pop(0) + ":")
        if self.lines:
            reactor.callLater(3, self.sendCommand)

  Or you could respond to events from stdin, or from another connected protocol, or a GUI, or ....

  Hope this helps,

  Jp



From radeex at gmail.com  Sat May 21 02:29:47 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Sat, 21 May 2005 18:29:47 +1000
Subject: [Twisted-Python] Twistd thread problem
In-Reply-To: <61b4e70f0505201059551003b1@mail.gmail.com>
References: <428931B0.5060901@crm3.com>
	<9c78c12df892cc1b36503f8f3b12cc0e@ezabel.com>
	<61b4e70f0505201059551003b1@mail.gmail.com>
Message-ID: <60ed19d40505210129bd98eb6@mail.gmail.com>

On 5/21/05, Gangadhar NPK <npk.gangadhar at gmail.com> wrote:
> Orbitz, can you please state why do you think it is not a good idea to
> use a worker thread. If the OP wanted to create a high volume SMTP
> proxy with each worker thread handling every invocation from the smtp
> client (smtplib in this case), then don't you think this can scale
> better than a single thread, wherein the remaining clients are waiting
> in the wait queue (if something like that exists, am not sure about
> that) while one smtp data transfer is being done.
> Also, if the OP chose to use a master-servant model wherein the master
> thread keeps a tab on each of the worker thread to see the status and
> (may be) notify the user (via a ui) of the status, the thread model
> will work ?

There's no reason to use a thread because all network I/O is
non-blocking in Twisted. There is no "wait queue"; as soon as you
write data to the transport, it either gets sent immediately or
buffered and execution continues on. There's no performance reason to
use a thread and it just complicates things when you can use the
non-blocking SMTP code.

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From nico at tekNico.net  Sat May 21 13:32:48 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Sat, 21 May 2005 21:32:48 +0200
Subject: [Twisted-Python] Re: Anyone seeing hanging of Twisted HTTPS servers?
In-Reply-To: <60ed19d4050518162434ad4c88@mail.gmail.com>
References: <428B43C0.3050104@rogers.com>
	<20050518135923.GO27700@frobozz>	<428B5312.5080302@indiana.edu>
	<60ed19d4050518162434ad4c88@mail.gmail.com>
Message-ID: <428F8CE0.4040200@tekNico.net>

>> I am getting this same error (with the request going through fine) with
>> version 0.6 of PyOpenSSL.

> Pretty much all Twisted https servers will get this error very often.
> It's just spurious debugging info, afaict,

In fact, any old garbage goes to any SSL protected port, you get this nasty
traceback in the logs. Really has to go, patch included:


--- trunk/twisted/internet/tcp.py       2005-05-06 23:17:03.000000000 +0200
+++ trunk-mod/twisted/internet/tcp.py   2005-05-21 21:29:10.000000000 +0200
@@ -125,7 +125,7 @@
             log.err()
             return main.CONNECTION_LOST
         except SSL.Error:
-            log.err()
+#            log.err()
             return main.CONNECTION_LOST

     def doWrite(self):


-- 
Nicola Larosa - nico at tekNico.net

How can I in five minutes shift a lifetime's hidden pain?
 -- Julia Fordham, Girlfriend, Porcelain, 1989




From npk.gangadhar at gmail.com  Sat May 21 13:40:44 2005
From: npk.gangadhar at gmail.com (Gangadhar NPK)
Date: Sun, 22 May 2005 01:10:44 +0530
Subject: [Twisted-Python] Alarm collection and display system?
In-Reply-To: <ir4u0kxenc9.fsf@minos.phy.bnl.gov>
References: <ir4u0l0l7c0.fsf@minos.phy.bnl.gov> <428BD081.7050103@divmod.com>
	<61b4e70f05052011094a078865@mail.gmail.com>
	<ir4u0kxenc9.fsf@minos.phy.bnl.gov>
Message-ID: <61b4e70f050521124066d948f2@mail.gmail.com>

So this is a subscription model, with a single point aggregator right ?
The *proxy* aggregates the messages from the producers, while the
consumers subscribe with the proxy regarding the message(s) they are
interested in and the messages are pushed to them by the proxy.

On 5/21/05, Brett Viren <bv at bnl.gov> wrote:
> Gangadhar NPK <npk.gangadhar at gmail.com> writes:
> 
> > Hi Brett,
> > Let me restate the problem (in an oversimplified way, sorry about that)
> >  - the ability for disparate systems scattered across the network to
> > push messages to interested consumers distributed across the network
> > in a (near) real-time fashion.
> > Did I get it right ?
> 
> Yep, exactly.
> 
> > If that is the case, then as Glyph suggested, keep your consumers
> > available to get messages from the producers.
> 
> Yes, sage advice.
> 
> > As an aside, can you share how you plan to go about creating a
> > distributed subscription service - I mean, how do the consumers
> > provide information for producers to know about the subscription
> > status.
> 
> The idea was to *not* distribute the subscription service, but rather
> to centralize it into a single, well known, server, (actually, a
> "proxy server" might be the more proper term).  All producers deliver
> messages to this single proxy which then delivers them to any
> connected consumers.  The producers don't know or care who the
> consumers are.  Very simple (I hope).
> 
> My first choice would be to use XML-RPC for the protocol.  Since there
> are a plethora of XML-RPC implementations it should make it easier to
> glue in this protocol to the disparate producers.
> 
> -Brett.
>



From james at delx.cjb.net  Sat May 21 20:37:36 2005
From: james at delx.cjb.net (James Bunton)
Date: Sun, 22 May 2005 12:37:36 +1000
Subject: [Twisted-Python] epoll reactor
Message-ID: <7de0074150447caff309f6515f7d08ac@delx.cjb.net>

Hi all

I've implemented an epoll reactor using the level triggered mechanism.
Please check it out and let me know if there's anything I've done wrong.
This is the first time I've played with twisted reactor internals 
before. :)

http://msn-transport.jabberstudio.org/tarballs/epoll-0.1.tar.gz

There's a README file in the tarball with instructions on setting it up.

Enjoy! :)

---

James




From boomberschloss at yahoo.com  Sun May 22 09:46:46 2005
From: boomberschloss at yahoo.com (Joachim Boomberschloss)
Date: Sun, 22 May 2005 08:46:46 -0700 (PDT)
Subject: [Twisted-Python] cleanup in twisted
Message-ID: <20050522154646.64757.qmail@web53101.mail.yahoo.com>

Hi!

I just jotted down a little mechanism for cleaning-up
in Twisted, and I wanted to see if:
1. other people think it's needed
2. other people manage to use it

What this does is enable one to define a __cleanup__
method which gets call either when the instance is
deleted, or when the reactor shuts down. It can return
a dereffed that delays the shutdown. The benefit is
being able to define communication-related stuff in
the cleanup method, which is not so useful to do in
__del__.

The current implementation uses pyDispatcher, but it
could easily be rewritten without it.

Feedback is welcomed!

Joe.

#----------------------------------------------------------------------------------------------------

from twisted.internet import reactor, defer, task

from dispatch import dispatcher, robustapply

#----------------------------------------------------------------------------------------------------

class CleanUpper:

	# our pydispatcher cleanup event
	ABOUT_TO_SHUTDOWN = "*about to shutdown*"

	def __init__(self):
		self._deferreds_to_wait_for_before_shutdown = []

		# register with twisted a special callback that
		# fires a pydispatcher event.
		reactor.addSystemEventTrigger('before', 'shutdown',
self._shutdown_handler)

	def _shutdown_handler(self):
		"""this simply dispatches a pydispatcher event"""
		results = dispatcher.send(
			signal = self.ABOUT_TO_SHUTDOWN,
			sender = self)
		# any deferred registered by cleanup handlers should
be waited for
		dl = defer.DeferredList([response for handler,
response in results if isinstance(response,
defer.Deferred)])
		return dl

	# PUBLIC METHODS
--------------------------------------------------------------------------

	def register(self, functionToRunBeforeShutdown):
		"""makes the given function get called prior to
communication infrastructure shutdown"""
		# register the given function with pydispatcher
		dispatcher.connect(
			functionToRunBeforeShutdown,
			signal = self.ABOUT_TO_SHUTDOWN,
			sender = self)

#----------------------------------------------------------------------------------------------------

# create an instance of CleanUpper
# and make its register method global
_c = CleanUpper()
register = _c.register
unregister = _c.unregister

#----------------------------------------------------------------------------------------------------

class Cleanuppable:
	""" Inherit from this if you want to do your cleanup
before
	    Twisted shuts down and not (only) when you get
deleted.
	    If you inherit from this do not implement
__del__, only
	    __cleanup__!
	"""

	def __init__(self):
		self._cleanuppable_state = "normal"		# normal,
deleted, or cleanupped
		self._cleanuppable_deferred = None
		# register cleanup method
	
register(self._cleanuppable_internal_cleanup_handler)

	def _cleanuppable_apply_cleanup(self):
		if hasattr(self, "__cleanup__"):
			# call user-defined cleanup method
			return robustapply.robustApply(self.__cleanup__)

	def _cleanuppable_internal_cleanup_handler(self):
		try:
			if self._cleanuppable_state == "normal":
				return self._cleanuppable_apply_cleanup()
			if self._cleanuppable_state == "deleted" and
self._cleanuppable_deferred is not None:
				return self._cleanuppable_deferred
		finally:
			self._cleanuppable_state = "cleanupped"

	def __del__(self):
		if self._cleanuppable_state == "normal":
			self._cleanuppable_state = "deleted"
			response = self._cleanuppable_apply_cleanup()
			if isinstance(response, defer.Deferred):
				self._cleanuppable_deferred = response

#----------------------------------------------------------------------------------------------------


__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From bob at redivi.com  Sun May 22 10:10:33 2005
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 22 May 2005 09:10:33 -0700
Subject: [Twisted-Python] cleanup in twisted
In-Reply-To: <20050522154646.64757.qmail@web53101.mail.yahoo.com>
References: <20050522154646.64757.qmail@web53101.mail.yahoo.com>
Message-ID: <0FF4E1D9-11BA-47E1-8385-5B4D98191480@redivi.com>


On May 22, 2005, at 8:46 AM, Joachim Boomberschloss wrote:

> I just jotted down a little mechanism for cleaning-up
> in Twisted, and I wanted to see if:
> 1. other people think it's needed
> 2. other people manage to use it
>
> What this does is enable one to define a __cleanup__
> method which gets call either when the instance is
> deleted, or when the reactor shuts down. It can return
> a dereffed that delays the shutdown. The benefit is
> being able to define communication-related stuff in
> the cleanup method, which is not so useful to do in
> __del__.

This is just begging for object leaks, because __del__ disables  
aspects of cyclic GC.

-bob




From exarkun at divmod.com  Sun May 22 10:25:56 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Sun, 22 May 2005 16:25:56 GMT
Subject: [Twisted-Python] cleanup in twisted
In-Reply-To: <0FF4E1D9-11BA-47E1-8385-5B4D98191480@redivi.com>
Message-ID: <20050522162556.559.97287833.divmod.quotient.7085@ohm>

On Sun, 22 May 2005 09:10:33 -0700, Bob Ippolito <bob at redivi.com> wrote:
>
>On May 22, 2005, at 8:46 AM, Joachim Boomberschloss wrote:
>>I just jotted down a little mechanism for cleaning-up
>>in Twisted, and I wanted to see if:
>>1. other people think it's needed
>>2. other people manage to use it
>>
>>What this does is enable one to define a __cleanup__
>>method which gets call either when the instance is
>>deleted, or when the reactor shuts down. It can return
>>a dereffed that delays the shutdown. The benefit is
>>being able to define communication-related stuff in
>>the cleanup method, which is not so useful to do in
>>__del__.
>
>This is just begging for object leaks, because __del__ disables  aspects of 
>cyclic GC.
>


>From the posted code:

    class Cleanuppable:
        """ Inherit from this if you want to do your cleanup before
        Twisted shuts down and not (only) when you get deleted.
        If you inherit from this do not implement __del__, only
        __cleanup__!
        """

Jp



From bob at redivi.com  Sun May 22 10:40:27 2005
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 22 May 2005 09:40:27 -0700
Subject: [Twisted-Python] cleanup in twisted
In-Reply-To: <20050522162556.559.97287833.divmod.quotient.7085@ohm>
References: <20050522162556.559.97287833.divmod.quotient.7085@ohm>
Message-ID: <05C963DF-8E3D-4E8D-A5C9-F1819D237F01@redivi.com>


On May 22, 2005, at 4:25 PM, Jp Calderone wrote:

> On Sun, 22 May 2005 09:10:33 -0700, Bob Ippolito <bob at redivi.com>  
> wrote:
>
>>
>> On May 22, 2005, at 8:46 AM, Joachim Boomberschloss wrote:
>>
>>> I just jotted down a little mechanism for cleaning-up
>>> in Twisted, and I wanted to see if:
>>> 1. other people think it's needed
>>> 2. other people manage to use it
>>>
>>> What this does is enable one to define a __cleanup__
>>> method which gets call either when the instance is
>>> deleted, or when the reactor shuts down. It can return
>>> a dereffed that delays the shutdown. The benefit is
>>> being able to define communication-related stuff in
>>> the cleanup method, which is not so useful to do in
>>> __del__.
>>>
>>
>> This is just begging for object leaks, because __del__ disables   
>> aspects of cyclic GC.
>>
>>
>
>
>
>> From the posted code:
>>
>
>    class Cleanuppable:
>        """ Inherit from this if you want to do your cleanup before
>        Twisted shuts down and not (only) when you get deleted.
>        If you inherit from this do not implement __del__, only
>        __cleanup__!
>        """

It says do not implement __del__ because it implements __del__.

UTSL :)

-bob




From gmcdonald at infocomp.com  Sun May 22 18:34:03 2005
From: gmcdonald at infocomp.com (Grant McDonald)
Date: Mon, 23 May 2005 10:34:03 +1000
Subject: [Twisted-Python] Zope interfaces
Message-ID: <61DA7719C45FD31185280008C733EF6E04AC4D88@XCHANGE>

Hi All,
 
I have just tried running my 1.3.0 application in 2.0.0 (rc2 I think?) and I
received the following message:
 
    raise ImportError, "you need zope.interface installed
(http://zope.org/Products/ZopeInterface/)"
ImportError: you need zope.interface installed (
http://zope.org/Products/ZopeInterface/
<http://zope.org/Products/ZopeInterface/> )
 
>From this I understand that I need to install zope interfaces even if I
don't use them, is that correct? (I imagine this is because other code in
twisted uses them)
 
___________________________________________
Grant McDonald                       InfoComp Pty Ltd
Programmer                           Level 1, 63 Market St, Wollongong 
 
Ph: (+61) 2 4298 9100
Fax: (+61) 2 4298 9199
Email: gmcdonald at infocomp.com 
___________________________________________
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050523/e5c84c72/attachment.html>

From bob at redivi.com  Sun May 22 18:55:23 2005
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 22 May 2005 17:55:23 -0700
Subject: [Twisted-Python] Zope interfaces
In-Reply-To: <61DA7719C45FD31185280008C733EF6E04AC4D88@XCHANGE>
References: <61DA7719C45FD31185280008C733EF6E04AC4D88@XCHANGE>
Message-ID: <A24F410F-A76E-4A49-B57A-AE60843F0727@redivi.com>


On May 22, 2005, at 5:34 PM, Grant McDonald wrote:

> I have just tried running my 1.3.0 application in 2.0.0 (rc2 I  
> think?) and I received the following message:
>
>
>
>     raise ImportError, "you need zope.interface installed (http:// 
> zope.org/Products/ZopeInterface/)"
>
> ImportError: you need zope.interface installed (http://zope.org/ 
> Products/ZopeInterface/)
>
>
>
> From this I understand that I need to install zope interfaces even  
> if I don’t use them, is that correct? (I imagine this is because  
> other code in twisted uses them)

Yes.

-bob




From mary-twisted at puzzling.org  Sun May 22 18:56:38 2005
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Mon, 23 May 2005 10:56:38 +1000
Subject: [Twisted-Python] Zope interfaces
In-Reply-To: <61DA7719C45FD31185280008C733EF6E04AC4D88@XCHANGE>
References: <61DA7719C45FD31185280008C733EF6E04AC4D88@XCHANGE>
Message-ID: <20050523005638.GA8738@home.puzzling.org>

On Mon, May 23, 2005, Grant McDonald wrote:
> From this I understand that I need to install zope interfaces even if I
> don't use them, is that correct? (I imagine this is because other code in
> twisted uses them)

This is correct.

-Mary



From nkeric at gmail.com  Sun May 22 23:49:21 2005
From: nkeric at gmail.com (Eric Hsu)
Date: Mon, 23 May 2005 13:49:21 +0800
Subject: [Twisted-Python] How to create a new service and listen on a new
	port?
Message-ID: <43c0d2b5050522224949079041@mail.gmail.com>

Hi all,

This is my first post here, and I'm not a native English speaker, so
please bear with me :)
I'm trying to implement something like this:

 * A UDP server listening on port1 for incoming request
 * A client sends the requset to port1
 * The server confirms the request and creates another (different) UDP
service on a new port (port2)
 * The client then would be able to connect to port2 and do some other things...

By reading this "Writing a New Plug-In for mktap"
 - http://twistedmatrix.com/projects/core/documentation/howto/plugin.html

I've implemented a UDP server and could run it with "twisted -f".
Now the server receives request on port1, and creates a new service at
port2 for client to connect to it.

I implemented this as the following:

class FooServer(DatagramProtocol):
    def datagramReceived(self, data, addr):
        # do something to verify the request and send the client with
a confirm msg
        reactor.listenUDP(port2, AnotherService())
        reactor.run()

class AnotherService(DatagramProtocol):
     # ...

I got this up and run under windows cmd console, however, whenever I
try to stop the server with Ctrl + c or close the cmd console, the
server died in a dead loop which keeps produces tone of error
messages. The only way to quit that console is to "kill" it...

I know there must be something wrong. I would like to know:
  * How could I accomplish this in a more elegant/"formal" way?

I'm very new to twisted and this mailing list, if someone has asked
similar question before, please tell me how to find it. (BTW, how
could I search the mailinglist?)

Thanks in advance! :D



From mark at junklight.com  Mon May 23 02:28:29 2005
From: mark at junklight.com (mark)
Date: Mon, 23 May 2005 09:28:29 +0100
Subject: [Twisted-Python] How to create a new service and listen on a new
	port?
In-Reply-To: <43c0d2b5050522224949079041@mail.gmail.com>
References: <43c0d2b5050522224949079041@mail.gmail.com>
Message-ID: <EFF1CEBA-0EB1-4B83-86CC-AB2F0FE7E0E0@junklight.com>

Killing the process is quite normal in early stage development.  
Twisted even helps with this by writing a pid file if you demonize it.

There are a number of more elegant techniques. If you intend to  
always run it from the command line as a non demon then write a  
control-c handler that gracefully stops your process.

def ctrlCHandler(*whatever):
     print "Interupted"
     for thread in threads:
         thread.stop()
         thread.join()

signal.signal(signal.SIGINT, ctrlCHandler)

(this is from a non-twisted application with threads :-) - I don't  
know if the signal thingy works on windows either)

The other option is to build a stop mechanism - I'm not sure from  
your description what your app does but you could send it a 'STOP'  
datagram for example that would cause it to stop nicely. Or when you  
have your client connection set up allow the client to terminate the  
process in a similar way.

you should be able to search the list at http://gmane.org/ although I  
find gmane has a very poor UI and I find its search a bit mysterious  
too.

cheers

mark



On 23 May 2005, at 06:49, Eric Hsu wrote:

> Hi all,
>
> This is my first post here, and I'm not a native English speaker, so
> please bear with me :)
> I'm trying to implement something like this:
>
>  * A UDP server listening on port1 for incoming request
>  * A client sends the requset to port1
>  * The server confirms the request and creates another (different) UDP
> service on a new port (port2)
>  * The client then would be able to connect to port2 and do some  
> other things...
>
> By reading this "Writing a New Plug-In for mktap"
>  - http://twistedmatrix.com/projects/core/documentation/howto/ 
> plugin.html
>
> I've implemented a UDP server and could run it with "twisted -f".
> Now the server receives request on port1, and creates a new service at
> port2 for client to connect to it.
>
> I implemented this as the following:
>
> class FooServer(DatagramProtocol):
>     def datagramReceived(self, data, addr):
>         # do something to verify the request and send the client with
> a confirm msg
>         reactor.listenUDP(port2, AnotherService())
>         reactor.run()
>
> class AnotherService(DatagramProtocol):
>      # ...
>
> I got this up and run under windows cmd console, however, whenever I
> try to stop the server with Ctrl + c or close the cmd console, the
> server died in a dead loop which keeps produces tone of error
> messages. The only way to quit that console is to "kill" it...
>
> I know there must be something wrong. I would like to know:
>   * How could I accomplish this in a more elegant/"formal" way?
>
> I'm very new to twisted and this mailing list, if someone has asked
> similar question before, please tell me how to find it. (BTW, how
> could I search the mailinglist?)
>
> Thanks in advance! :D
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From nkeric at gmail.com  Mon May 23 02:47:07 2005
From: nkeric at gmail.com (Eric Hsu)
Date: Mon, 23 May 2005 16:47:07 +0800
Subject: [Twisted-Python] How to create a new service and listen on a new
	port?
In-Reply-To: <EFF1CEBA-0EB1-4B83-86CC-AB2F0FE7E0E0@junklight.com>
References: <43c0d2b5050522224949079041@mail.gmail.com>
	<EFF1CEBA-0EB1-4B83-86CC-AB2F0FE7E0E0@junklight.com>
Message-ID: <43c0d2b50505230147295c6338@mail.gmail.com>

Hi mark, big thanks for your quick reply :)
I guess I haven't make myself clear enough (sorry for my poor English... )
I'm not looking for a way to shutdown/stop my server :p

My question is, should I implement my requirments in the following way? (Use 
the "raw" reactor to create a new service and listen on a new port?)

[code]
class FooServer(DatagramProtocol):
def datagramReceived(self, data, addr):
# do something to verify the request and send the client with
a confirm msg
reactor.listenUDP(port2, AnotherService())
reactor.run()

class AnotherService(DatagramProtocol):
 # ...
[/code]

 I've already write my server as a "plugin" to the twisted framework (as the 
tutorial tought me), now I want to create a new service within my server, is 
there a more elegant/"formal" way?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050523/56220cd2/attachment.html>

From nkeric at gmail.com  Mon May 23 03:31:33 2005
From: nkeric at gmail.com (Eric Hsu)
Date: Mon, 23 May 2005 17:31:33 +0800
Subject: [Twisted-Python] How to create a new service and listen on a new
	port?
In-Reply-To: <769FBCBE-8E4E-48DE-885F-6A0F5962609E@junklight.com>
References: <43c0d2b5050522224949079041@mail.gmail.com>
	<EFF1CEBA-0EB1-4B83-86CC-AB2F0FE7E0E0@junklight.com>
	<43c0d2b50505230147295c6338@mail.gmail.com>
	<769FBCBE-8E4E-48DE-885F-6A0F5962609E@junklight.com>
Message-ID: <43c0d2b50505230231404f7da3@mail.gmail.com>

2005/5/23, mark <mark at junklight.com>:
> Ah,
> 
> my mistake for not reading properly. :-)

Never mind : )

> 
> I guess one answer is to run AnotherService on port 2 from the start.
[snip]
> then both services will be running and you can just service both
> ports. I am not sure quite what you are trying to do but from the
> comments in your code why do you not simply send the confirm message
> back via the FooServer?
> 

Well, I need to create the AnotherService instances on many ports
(port2, port3...) for each verified clients dynamically...

Here is a scenario:

 * client1 sends the request to server on port1
 * server verifies the client's request, and allocates a new port2
with the AnotherService binded to it, then tells the client1 that it
has allocated port2 for it
 * client1 happily communicates with server on port2 and enjoys the
AnotherService...

 * client2 sends another request to server on port1
 * server verifies the request too, and allocates port3 for client2
 * client2 communicates with server on port3 and enjoys yet another
AnotherService instance...

That's all I want to do...

I'm reading this tutorial:
http://twistedmatrix.com/projects/core/documentation/howto/application.html

It seems that it's possible to have multiple services tie to one application? 
However, I would like to know is there a good way to dynamically
create new services on new ports?

best regards

- Eric



From boomberschloss at yahoo.com  Mon May 23 03:40:53 2005
From: boomberschloss at yahoo.com (Joachim Boomberschloss)
Date: Mon, 23 May 2005 02:40:53 -0700 (PDT)
Subject: [Twisted-Python] cleanup in twisted
In-Reply-To: 6667
Message-ID: <20050523094053.11904.qmail@web53108.mail.yahoo.com>


--- Bob Ippolito <bob at redivi.com> wrote:
> 
> On May 22, 2005, at 8:46 AM, Joachim Boomberschloss
> wrote:
> 
> > I just jotted down a little mechanism for
> cleaning-up
> > in Twisted, and I wanted to see if:
> > 1. other people think it's needed
> > 2. other people manage to use it
> >
> > What this does is enable one to define a
> __cleanup__
> > method which gets call either when the instance is
> > deleted, or when the reactor shuts down. It can
> return
> > a dereffed that delays the shutdown. The benefit
> is
> > being able to define communication-related stuff
> in
> > the cleanup method, which is not so useful to do
> in
> > __del__.
> 
> This is just begging for object leaks, because
> __del__ disables  
> aspects of cyclic GC.

Hmmpf. What does this mean, and is there a simple way
of resolving it?

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From exarkun at divmod.com  Mon May 23 03:41:43 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 23 May 2005 09:41:43 GMT
Subject: [Twisted-Python] How to create a new service and listen on a new
	port?
In-Reply-To: <43c0d2b5050522224949079041@mail.gmail.com>
Message-ID: <20050523094143.559.1531852400.divmod.quotient.7609@ohm>

On Mon, 23 May 2005 13:49:21 +0800, Eric Hsu <nkeric at gmail.com> wrote:
>Hi all,
>
>This is my first post here, and I'm not a native English speaker, so
>please bear with me :)
>I'm trying to implement something like this:
>
> * A UDP server listening on port1 for incoming request
> * A client sends the requset to port1
> * The server confirms the request and creates another (different) UDP
>service on a new port (port2)
> * The client then would be able to connect to port2 and do some other things...
>
>By reading this "Writing a New Plug-In for mktap"
> - http://twistedmatrix.com/projects/core/documentation/howto/plugin.html
>
>I've implemented a UDP server and could run it with "twisted -f".
>Now the server receives request on port1, and creates a new service at
>port2 for client to connect to it.
>
>I implemented this as the following:
>
>class FooServer(DatagramProtocol):
>    def datagramReceived(self, data, addr):
>        # do something to verify the request and send the client with
>a confirm msg
>        reactor.listenUDP(port2, AnotherService())
>        reactor.run()
>

  Since nothing is likely to call datagramReceived unless the reactor is running, and calling reactor.run() while the reactor is running is a terribly broken thing to do, the above code is likely mistaken in calling reactor.run().

  I bet shutdown behavioor will become much nicer if you remove the call to reactor.run() here, and in any other similar places.

  twistd will start and stop the reactor for you.

Jp



From exarkun at divmod.com  Mon May 23 03:56:48 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 23 May 2005 09:56:48 GMT
Subject: [Twisted-Python] cleanup in twisted
In-Reply-To: <20050523094053.11904.qmail@web53108.mail.yahoo.com>
Message-ID: <20050523095648.559.1869734899.divmod.quotient.7617@ohm>

On Mon, 23 May 2005 02:40:53 -0700 (PDT), Joachim Boomberschloss <boomberschloss at yahoo.com> wrote:
>
>--- Bob Ippolito <bob at redivi.com> wrote:
>>
>> On May 22, 2005, at 8:46 AM, Joachim Boomberschloss
>> wrote:
>>
>> > I just jotted down a little mechanism for
>> cleaning-up
>> > in Twisted, and I wanted to see if:
>> > 1. other people think it's needed
>> > 2. other people manage to use it
>> >
>> > What this does is enable one to define a
>> __cleanup__
>> > method which gets call either when the instance is
>> > deleted, or when the reactor shuts down. It can
>> return
>> > a dereffed that delays the shutdown. The benefit
>> is
>> > being able to define communication-related stuff
>> in
>> > the cleanup method, which is not so useful to do
>> in
>> > __del__.
>>
>> This is just begging for object leaks, because
>> __del__ disables
>> aspects of cyclic GC.
>
>Hmmpf. What does this mean, and is there a simple way
>of resolving it?
>

  If you construct a reference cycle which contains an object which has a __del__ method, the entire cycle becomes "garbage" - Python cannot free any of the objects or call any of their __del__ methods.  Instead, it puts them into the gc module's `garbage' list and leaves them there forever.

  There's no simple way to resolve this (except to not implement __del__, of course ;).

  A non-simple way to resolve it is to use weakref callbacks instead of __del__.  Weakref callbacks have some nasty bugs in versions of Python older than 2.3.5 (more, the further back you go), and they're trickier to use than __del__.  They don't create garbage cycles, though.

  Jp



From nkeric at gmail.com  Mon May 23 04:50:34 2005
From: nkeric at gmail.com (Eric Hsu)
Date: Mon, 23 May 2005 18:50:34 +0800
Subject: [Twisted-Python] How to create a new service and listen on a new
	port?
In-Reply-To: <20050523094143.559.1531852400.divmod.quotient.7609@ohm>
References: <43c0d2b5050522224949079041@mail.gmail.com>
	<20050523094143.559.1531852400.divmod.quotient.7609@ohm>
Message-ID: <43c0d2b5050523035061035df1@mail.gmail.com>

2005/5/23, Jp Calderone <exarkun at divmod.com>:
>   Since nothing is likely to call datagramReceived unless the reactor is running, and calling reactor.run() while the reactor is running is a terribly broken thing to do, the above code is likely mistaken in calling reactor.run().
> 
>   I bet shutdown behavioor will become much nicer if you remove the call to reactor.run() here, and in any other similar places.
> 
>   twistd will start and stop the reactor for you.
> 
> Jp

Mmm... you're right! However, it seems that without reactor.run(), the
newly created AnotherService instance would not serve the client as
expected... but it will with reactor.run().. that's why I'm looking
for a better/elegant/formal way to achieve what I want, any ideas?

best regards

- Eric



From james at delx.cjb.net  Mon May 23 06:08:43 2005
From: james at delx.cjb.net (James Bunton)
Date: Mon, 23 May 2005 22:08:43 +1000
Subject: [Twisted-Python] epoll reactor
In-Reply-To: <7de0074150447caff309f6515f7d08ac@delx.cjb.net>
References: <7de0074150447caff309f6515f7d08ac@delx.cjb.net>
Message-ID: <45ce393f7a960352b42857f3f99b9491@delx.cjb.net>

Well, I got it to work properly now :)

http://msn-transport.jabberstudio.org/tarballs/epoll-0.2.tar.gz

It's now uses the epoll edge triggered flag, and doesn't chew 99% CPU 
like the first one accidentally did.

---

James



On 22/05/2005, at 12:37 PM, James Bunton wrote:

> Hi all
>
> I've implemented an epoll reactor using the level triggered mechanism.
> Please check it out and let me know if there's anything I've done 
> wrong.
> This is the first time I've played with twisted reactor internals 
> before. :)
>
> http://msn-transport.jabberstudio.org/tarballs/epoll-0.1.tar.gz
>
> There's a README file in the tarball with instructions on setting it 
> up.
>
> Enjoy! :)
>
> ---
>
> James




From boomberschloss at yahoo.com  Mon May 23 06:12:49 2005
From: boomberschloss at yahoo.com (Joachim Boomberschloss)
Date: Mon, 23 May 2005 05:12:49 -0700 (PDT)
Subject: [Twisted-Python] cleanup in twisted
In-Reply-To: 6667
Message-ID: <20050523121249.57909.qmail@web53110.mail.yahoo.com>


--- Jp Calderone <exarkun at divmod.com> wrote:
> On Mon, 23 May 2005 02:40:53 -0700 (PDT), Joachim
> Boomberschloss <boomberschloss at yahoo.com> wrote:
> >
> >--- Bob Ippolito <bob at redivi.com> wrote:
> >>
> >> On May 22, 2005, at 8:46 AM, Joachim
> Boomberschloss
> >> wrote:
> >>
> >> > I just jotted down a little mechanism for
> >> cleaning-up
> >> > in Twisted, and I wanted to see if:
> >> > 1. other people think it's needed
> >> > 2. other people manage to use it
> >> >
> >> > What this does is enable one to define a
> >> __cleanup__
> >> > method which gets call either when the instance
> is
> >> > deleted, or when the reactor shuts down. It can
> >> return
> >> > a dereffed that delays the shutdown. The
> benefit
> >> is
> >> > being able to define communication-related
> stuff
> >> in
> >> > the cleanup method, which is not so useful to
> do
> >> in
> >> > __del__.
> >>
> >> This is just begging for object leaks, because
> >> __del__ disables
> >> aspects of cyclic GC.
> >
> >Hmmpf. What does this mean, and is there a simple
> way
> >of resolving it?
> >
> 
>   If you construct a reference cycle which contains
> an object which has a __del__ method, the entire
> cycle becomes "garbage" - Python cannot free any of
> the objects or call any of their __del__ methods. 
> Instead, it puts them into the gc module's `garbage'
> list and leaves them there forever.
> 
>   There's no simple way to resolve this (except to
> not implement __del__, of course ;).
> 
>   A non-simple way to resolve it is to use weakref
> callbacks instead of __del__.  Weakref callbacks
> have some nasty bugs in versions of Python older
> than 2.3.5 (more, the further back you go), and
> they're trickier to use than __del__.  They don't
> create garbage cycles, though.
> 

Can you point me to an example of this (preferably in
Twisted)? Is this whole cleanup thing worth my time
fixing it in your opinion?

Joe.


		
Yahoo! Mail
Stay connected, organized, and protected. Take the tour:
http://tour.mail.yahoo.com/mailtour.html




From exarkun at divmod.com  Mon May 23 07:17:36 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 23 May 2005 13:17:36 GMT
Subject: [Twisted-Python] cleanup in twisted
In-Reply-To: <20050523121249.57909.qmail@web53110.mail.yahoo.com>
Message-ID: <20050523131736.559.1154883193.divmod.quotient.7699@ohm>

On Mon, 23 May 2005 05:12:49 -0700 (PDT), Joachim Boomberschloss <boomberschloss at yahoo.com> wrote:
>
>--- Jp Calderone <exarkun at divmod.com> wrote:
>> On Mon, 23 May 2005 02:40:53 -0700 (PDT), Joachim
>> Boomberschloss <boomberschloss at yahoo.com> wrote:
>> >
>> >--- Bob Ippolito <bob at redivi.com> wrote:
>> >>
>> >> On May 22, 2005, at 8:46 AM, Joachim
>> Boomberschloss
>> >> wrote:
>> >>
>> >> > I just jotted down a little mechanism for
>> >> cleaning-up
>> >> > in Twisted, and I wanted to see if:
>> >> > 1. other people think it's needed
>> >> > 2. other people manage to use it
>> >> >
>> >> > What this does is enable one to define a
>> >> __cleanup__
>> >> > method which gets call either when the instance
>> is
>> >> > deleted, or when the reactor shuts down. It can
>> >> return
>> >> > a dereffed that delays the shutdown. The
>> benefit
>> >> is
>> >> > being able to define communication-related
>> stuff
>> >> in
>> >> > the cleanup method, which is not so useful to
>> do
>> >> in
>> >> > __del__.
>> >>
>> >> This is just begging for object leaks, because
>> >> __del__ disables
>> >> aspects of cyclic GC.
>> >
>> >Hmmpf. What does this mean, and is there a simple
>> way
>> >of resolving it?
>> >
>>
>>   If you construct a reference cycle which contains
>> an object which has a __del__ method, the entire
>> cycle becomes "garbage" - Python cannot free any of
>> the objects or call any of their __del__ methods.
>> Instead, it puts them into the gc module's `garbage'
>> list and leaves them there forever.
>>
>>   There's no simple way to resolve this (except to
>> not implement __del__, of course ;).
>>
>>   A non-simple way to resolve it is to use weakref
>> callbacks instead of __del__.  Weakref callbacks
>> have some nasty bugs in versions of Python older
>> than 2.3.5 (more, the further back you go), and
>> they're trickier to use than __del__.  They don't
>> create garbage cycles, though.
>>
>
>Can you point me to an example of this (preferably in
>Twisted)? Is this whole cleanup thing worth my time
>fixing it in your opinion?
>

Twisted doesn't make use of it, due to the instabilities in previous Python versions (which Twisted still supports).

Another technique I didn't mention is to move the __del__ implementation off of the object which might participate in a cycle and onto a subsidiary object.  Deferreds do this in Twisted 2.0.  As a general technique, this doesn't make much sense, since it depends on knowledge of the structure of specific object graphs (ie, you need to know where cycles will form and where they will not).

I'm not sure if it's worth the effort.  I don't exactly see the attraction of the functionality being provided.  I tend to find that explicit cleanup is not overly burdensome.  Perhaps you can share some examples of how you see it being used?

Jp



From exarkun at divmod.com  Mon May 23 07:23:20 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Mon, 23 May 2005 13:23:20 GMT
Subject: [Twisted-Python] epoll reactor
In-Reply-To: <45ce393f7a960352b42857f3f99b9491@delx.cjb.net>
Message-ID: <20050523132320.559.95707105.divmod.quotient.7702@ohm>

On Mon, 23 May 2005 22:08:43 +1000, James Bunton <james at delx.cjb.net> wrote:
>Well, I got it to work properly now :)
>
>http://msn-transport.jabberstudio.org/tarballs/epoll-0.2.tar.gz
>
>It's now uses the epoll edge triggered flag, and doesn't chew 99% CPU like 
>the first one accidentally did.
>

  Neat.  There has been a level-triggered epoll reactor in my sandbox for some time, but I was never able to get the edge triggered version to work.

  Hmm, running the Twisted test suite with this version doesn't do too well either.  A few tests fail here and there before it gets totally wedged on 
twisted.test.test_pb.ConnectionTestCase.testIdentityConnector.

  You can try this yourself by adding an entry for this reactor to the dictionary at the top of twisted.application.app, then running "trial -R -r epoll twisted", where "epoll" is the key you add to that dict.

  Jp



From anthony at interlink.com.au  Mon May 23 10:58:17 2005
From: anthony at interlink.com.au (Anthony Baxter)
Date: Tue, 24 May 2005 02:58:17 +1000
Subject: [Twisted-Python] cleanup in twisted
In-Reply-To: <20050523095648.559.1869734899.divmod.quotient.7617@ohm>
References: <20050523095648.559.1869734899.divmod.quotient.7617@ohm>
Message-ID: <200505240258.18997.anthony@interlink.com.au>

On Monday 23 May 2005 19:56, Jp Calderone wrote:
>   A non-simple way to resolve it is to use weakref callbacks instead of
> __del__.  Weakref callbacks have some nasty bugs in versions of Python
> older than 2.3.5 (more, the further back you go), and they're trickier to
> use than __del__.  They don't create garbage cycles, though.

Which reminds me that I should try and make that patch that removes 
deferred's __del__ method and replaces it with a weakref work... 

Anthony

-- 
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From josh.subscriptions at kantei.com  Mon May 23 11:07:43 2005
From: josh.subscriptions at kantei.com (Josh Zeidner)
Date: Mon, 23 May 2005 10:07:43 -0700
Subject: [Twisted-Python] Zope interfaces
In-Reply-To: <61DA7719C45FD31185280008C733EF6E04AC4D88@XCHANGE>
References: <61DA7719C45FD31185280008C733EF6E04AC4D88@XCHANGE>
Message-ID: <42920DDF.4080804@kantei.com>

Hello All,

Im a twisted newbie and I am very interested in what is available in 
terms of Zope support. Any info or links would be very useful to me. 
Also, anyone interested in FIX for Twisted? Thanks, Josh Zeidner


Grant McDonald wrote:

> Hi All,
>
> I have just tried running my 1.3.0 application in 2.0.0 (rc2 I think?) 
> and I received the following message:
>
> raise ImportError, "you need zope.interface installed 
> (http://zope.org/Products/ZopeInterface/)"
>
> ImportError: you need zope.interface installed 
> (http://zope.org/Products/ZopeInterface/)
>
> From this I understand that I need to install zope interfaces even if 
> I don’t use them, is that correct? (I imagine this is because other 
> code in twisted uses them)
>
> ___________________________________________
>
> *Grant McDonald InfoComp Pty Ltd***
>
> Programmer Level 1, 63 Market St, Wollongong
>
> Ph: (+61) 2 4298 9100
>
> Fax: (+61) 2 4298 9199
>
> Email: gmcdonald at infocomp.com
>
> ___________________________________________
>
> Important notice: This message is intended for the individual(s) and 
> entity(s) addressed. The information contained in this transmission 
> and any attached, may be confidential and may also be the subject of 
> legal privilege, public interest immunity or legal professional 
> privilege. Any review, retransmission, dissemination or other use of, 
> taking of any action in reliance upon this information by person or 
> entities other than the recipient is prohibited and requires 
> authorization from the sender. If you are not the addressee indicated 
> in this message (or responsible for delivery of the message to such 
> person) you may not copy or deliver this message to anyone. In such 
> cases you should destroy this message and kindly notify the sender by 
> reply email.
>
> WARNING: Although Infocomp has taken reasonable precautions so that no 
> viruses are present in this e-mail, the company cannot accept 
> responsibility for any loss or damage arising from the use of e-mail 
> attachments.
>
>------------------------------------------------------------------------
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>  
>




From itamar at itamarst.org  Mon May 23 11:19:06 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 23 May 2005 13:19:06 -0400
Subject: [Twisted-Python] Zope interfaces
In-Reply-To: <42920DDF.4080804@kantei.com>
References: <61DA7719C45FD31185280008C733EF6E04AC4D88@XCHANGE>
	<42920DDF.4080804@kantei.com>
Message-ID: <1116868746.8468.49.camel@localhost.localdomain>

On Mon, 2005-05-23 at 10:07 -0700, Josh Zeidner wrote:

> Im a twisted newbie and I am very interested in what is available in 
> terms of Zope support. Any info or links would be very useful to me. 
> Also, anyone interested in FIX for Twisted? Thanks, Josh Zeidner

Zope3 can run on top of Twisted; this may still be in a private
repository, or it may already be in a branch.

For Zope2, there's something called ZAsync, not sure exactly what it
does: http://www.zope.org/Members/poster/zasync




From natester at gmail.com  Mon May 23 11:58:40 2005
From: natester at gmail.com (Nathaniel Haggard)
Date: Mon, 23 May 2005 11:58:40 -0600
Subject: [Twisted-Python] twisted.plugin plugin framework
Message-ID: <4adac7a30505231058554386b2@mail.gmail.com>

1.  What is/was the purpose of twisted.plugin?  

2.  "mypkg" is a directory containing __init__.py

__init__.py contains:

import twisted.plugin
import zope.interface as z
import twisted.plugin as p

class Beta:
        z.implements(p.IPlugin)

class Gamma:
        """This is the doc string"""

        __implements__ = p.IPlugin

-----------------

Trying to load the package with getPlugins returns an empty generator
as far as I can tell


import twisted.plugin
import mypkg

l = twisted.plugin.getPlugins(twisted.plugin.IPlugin, mypkg)
print dir(l)
for i in l:
        .....

Actually twisted.plugin.getCache doesn't return anything for
getPlugins to get.  Am I setting up the package incorrectly?



From matt at pollenation.net  Mon May 23 13:24:58 2005
From: matt at pollenation.net (Matt Goodall)
Date: Mon, 23 May 2005 20:24:58 +0100
Subject: [Twisted-Python] twisted.plugin plugin framework
In-Reply-To: <4adac7a30505231058554386b2@mail.gmail.com>
References: <4adac7a30505231058554386b2@mail.gmail.com>
Message-ID: <42922E0A.4000206@pollenation.net>

Nathaniel Haggard wrote:
> 1.  What is/was the purpose of twisted.plugin?  

It is for loading plugins! ;-)

> 
> 2.  "mypkg" is a directory containing __init__.py
> 
> __init__.py contains:
> 
> import twisted.plugin
> import zope.interface as z
> import twisted.plugin as p
> 
> class Beta:
>         z.implements(p.IPlugin)
> 
> class Gamma:
>         """This is the doc string"""
> 
>         __implements__ = p.IPlugin
> 
> -----------------
> 
> Trying to load the package with getPlugins returns an empty generator
> as far as I can tell

OK, the main thing is that t.plugin loads *instances* of IPlugin
implementing classes. It does not find classes with an implements(IPlug)
and create instances for you.

Something like:

    class Beta:
        z.implements(p.IPlugin)

    betaPlugin = Beta()

will /probably/ be enough for t.plugin to find them. However, you almost
certainly want your plugins to implement another, application specific,
more interesting interface too, i.e.

    class ISomething(Interface):
        pass

    class Beta:
        z.implements(p.IPlugin, ISomething)

    betaPlugin = Beta()

You can then search for ISomething plugins, which is much more
meaningful than searching for any (i.e IPlugin) plugin.

    plugins = twisted.plugin.getPlugins(ISomething, mypkg)

Hope that helps.

Cheers, Matt

> 
> 
> import twisted.plugin
> import mypkg
> 
> l = twisted.plugin.getPlugins(twisted.plugin.IPlugin, mypkg)
> print dir(l)
> for i in l:
>         .....
> 
> Actually twisted.plugin.getCache doesn't return anything for
> getPlugins to get.  Am I setting up the package incorrectly?
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt at pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \	       Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.



From foom at fuhm.net  Mon May 23 15:34:02 2005
From: foom at fuhm.net (James Y Knight)
Date: Mon, 23 May 2005 17:34:02 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <B839176B-C764-4DEF-94C0-986A2864CDD3@fuhm.net>

Bug summary
______________________
Since 2005-05-09 15:24:45.360000:
Bugs opened: 20   Bugs closed: 15   Total open bugs: 369 (+5)
   Urgent: 7 (-2)
   Bug: 149 (+2)
   Feature: 139 (+1)
   Wish: 74 (+4)

New / Reopened Bugs
______________________
                     ==== Urgent ====
trial randomly exits prematurely for no good reason  (1 week ago)
CLOSED http://twistedmatrix.com/bugs/issue1036 opened by exarkun

                     ==== Bug ====
[WEBSITE] http://twistedmatrix.com/documents/ has 1.3 documentation  
linked as current one  (2 weeks ago)
        http://twistedmatrix.com/bugs/issue1029 opened by itamarst

iocpreactor does not cancel pending operations on shutdown  (1 week ago)
        http://twistedmatrix.com/bugs/issue1039 opened by PenguinOfDoom

extra reference needed to show main window when using qtreactor  (7  
days ago)
        http://twistedmatrix.com/bugs/issue1041 opened by insanekane

FTPFileListProtocol doesn't match lines on all FTP servers  (3 days ago)
        http://twistedmatrix.com/bugs/issue1048 opened by orbitz

[DOCUMENTATION] Changes to HOWTO index page  (5 days ago)
        http://twistedmatrix.com/bugs/issue1043 opened by STemplar

[WEBSITE] Link to API docs misleading  (5 days ago)
        http://twistedmatrix.com/bugs/issue1045 opened by osuchw

[WEBSITE] twisted-versions.txt should be in svn  (1 week ago)
        http://twistedmatrix.com/bugs/issue1035 opened by dreid

[WEBSITE] Unification of products and projects.  (1 week ago)
        http://twistedmatrix.com/bugs/issue1034 opened by dreid

                     ==== Feature ====
[CORE] Add blockingCallFromThread to twisted.internet.threads  (5  
days ago)
        http://twistedmatrix.com/bugs/issue1042 opened by spiv

[WORDS] Update words to new cred APIs  (1 week ago)
CLOSED http://twistedmatrix.com/bugs/issue1031 opened by exarkun

[WORDS] Improve IRCClient API  (1 week ago)
        http://twistedmatrix.com/bugs/issue1030 opened by exarkun

[WORDS] Update words to new PB API  (1 week ago)
        http://twistedmatrix.com/bugs/issue1032 opened by exarkun

[WORDS] Remove Words' use of deprecated t.web.widgets  (1 week ago)
        http://twistedmatrix.com/bugs/issue1033 opened by exarkun

iocpreactor needs to support TCP half-close  (1 week ago)
        http://twistedmatrix.com/bugs/issue1038 opened by PenguinOfDoom

[TRIAL] reactor interface predicate support in trial  (1 week ago)
        http://twistedmatrix.com/bugs/issue1037 opened by exarkun

                     ==== Wish ====
[XISH] xmlstream patch to get ready for TLS and SASL authenticators   
(3 days ago)
        http://twistedmatrix.com/bugs/issue1046 opened by tofu

[WORDS, XISH] Can we add a NAMESPACE module  (3 days ago)
        http://twistedmatrix.com/bugs/issue1047 opened by tofu

Cred needs pam checker, and tehre is already one  (5 days ago)
        http://twistedmatrix.com/bugs/issue1044 opened by liiwi

Starting threads in a tac file blocks everything  (7 days ago)
        http://twistedmatrix.com/bugs/issue1040 opened by exarkun

Bugs Closed
______________________
                     ==== Urgent ====
trial randomly exits prematurely for no good reason  (1 week ago)
        http://twistedmatrix.com/bugs/issue1036 opened by exarkun,  
closed by exarkun

[DOCUMENTATION] [PATCH] epyrun doesn't like  
t.python.util.moduleMovedForSplit  (5 months ago)
        http://twistedmatrix.com/bugs/issue828 opened by marienz,  
closed by jknight

[DOCUMENTATION] epyrun dies with an internal error  (1 month ago)
        http://twistedmatrix.com/bugs/issue973 opened by Ycros,  
closed by spiv

                     ==== Bug ====
[CORE] Possible re-entrancy bug in LineReceiver.resumeProducing?  (3  
months ago)
        http://twistedmatrix.com/bugs/issue899 opened by spiv, closed  
by exarkun

[WORDS] Use "Application-GUID" instead of "Application-Name" in  
_checkFileInvitation of msn.py  (2 months ago)
        http://twistedmatrix.com/bugs/issue908 opened by cphsu,  
closed by exarkun

[CONCH] Can't logout of an SFTP server  (2 weeks ago)
        http://twistedmatrix.com/bugs/issue1027 opened by mkerrin,  
closed by z3p

[TRIAL] trial's default timeout isn't enforced  (2 weeks ago)
        http://twistedmatrix.com/bugs/issue1028 opened by warner,  
closed by exarkun

HTTP multipart/form-data from Opera 7.52 raises error  (10 months ago)
        http://twistedmatrix.com/bugs/issue649 opened by dotz, closed  
by jknight

                     ==== Feature ====
[WORDS] Update words to new cred APIs  (1 week ago)
        http://twistedmatrix.com/bugs/issue1031 opened by exarkun,  
closed by exarkun

Pluggable Application loaders  (8 months ago)
        http://twistedmatrix.com/bugs/issue720 opened by exarkun,  
closed by exarkun

[PATCH] Unregister handlers for EventDispatcher  (4 months ago)
        http://twistedmatrix.com/bugs/issue838 opened by ww, closed  
by exarkun

twisted.web2 HTTP Server Enhancements  (1 month ago)
        http://twistedmatrix.com/bugs/issue999 opened by srichter,  
closed by srichter

Common Access Logging Observer for twisted.web2  (1 month ago)
        http://twistedmatrix.com/bugs/issue1000 opened by srichter,  
closed by srichter

[WEB] mod_gzip type functionality for Twisted Web  (22 months ago)
        http://twistedmatrix.com/bugs/issue104 opened by Nafai,  
closed by jknight

[WEB] SCGI server protocol implementation  (8 months ago)
        http://twistedmatrix.com/bugs/issue704 opened by fog, closed  
by jknight





From andrew-twisted at puzzling.org  Mon May 23 16:53:33 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 24 May 2005 08:53:33 +1000
Subject: [Twisted-Python] cleanup in twisted
In-Reply-To: <200505240258.18997.anthony@interlink.com.au>
References: <20050523095648.559.1869734899.divmod.quotient.7617@ohm>
	<200505240258.18997.anthony@interlink.com.au>
Message-ID: <20050523225333.GK5425@frobozz>

On Tue, May 24, 2005 at 02:58:17AM +1000, Anthony Baxter wrote:
> On Monday 23 May 2005 19:56, Jp Calderone wrote:
> >   A non-simple way to resolve it is to use weakref callbacks instead of
> > __del__.  Weakref callbacks have some nasty bugs in versions of Python
> > older than 2.3.5 (more, the further back you go), and they're trickier to
> > use than __del__.  They don't create garbage cycles, though.
> 
> Which reminds me that I should try and make that patch that removes 
> deferred's __del__ method and replaces it with a weakref work... 

Deferreds in SVN no longer have a __del__; instead they hold a reference to
in ._debugInfo to a DebugInfo object that has a __del__ and is not part of a
cycle.

-Andrew.




From radeex at gmail.com  Mon May 23 17:09:18 2005
From: radeex at gmail.com (Christopher Armstrong)
Date: Tue, 24 May 2005 09:09:18 +1000
Subject: [Twisted-Python] Zope interfaces
In-Reply-To: <1116868746.8468.49.camel@localhost.localdomain>
References: <61DA7719C45FD31185280008C733EF6E04AC4D88@XCHANGE>
	<42920DDF.4080804@kantei.com>
	<1116868746.8468.49.camel@localhost.localdomain>
Message-ID: <60ed19d405052316092c79d783@mail.gmail.com>

On 5/24/05, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
> On Mon, 2005-05-23 at 10:07 -0700, Josh Zeidner wrote:
> 
> > Im a twisted newbie and I am very interested in what is available in
> > terms of Zope support. Any info or links would be very useful to me.
> > Also, anyone interested in FIX for Twisted? Thanks, Josh Zeidner
> 
> Zope3 can run on top of Twisted; this may still be in a private
> repository, or it may already be in a branch.
> 
> For Zope2, there's something called ZAsync, not sure exactly what it
> does: http://www.zope.org/Members/poster/zasync

Note, though, that Twisted's usage of Zope Interface has nothing at
all to do with this zope+twisted integration that itamar is talking
about.

-- 
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |  Founding Member, Hobart Hacking Society
w----v----w-+    -- http://hackingsociety.org/chapters/hash



From james at delx.cjb.net  Tue May 24 07:13:51 2005
From: james at delx.cjb.net (James Bunton)
Date: Tue, 24 May 2005 23:13:51 +1000
Subject: [Twisted-Python] epoll reactor
In-Reply-To: <20050523132320.559.95707105.divmod.quotient.7702@ohm>
References: <20050523132320.559.95707105.divmod.quotient.7702@ohm>
Message-ID: <bee5dcb46af6143e3f904a953f502e37@delx.cjb.net>

On 23/05/2005, at 11:23 PM, Jp Calderone wrote:

> On Mon, 23 May 2005 22:08:43 +1000, James Bunton <james at delx.cjb.net> 
> wrote:
>> Well, I got it to work properly now :)
>>
>> http://msn-transport.jabberstudio.org/tarballs/epoll-0.2.tar.gz
>>
>> It's now uses the epoll edge triggered flag, and doesn't chew 99% CPU 
>> like the first one accidentally did.
>>
>
>  Neat.  There has been a level-triggered epoll reactor in my sandbox 
> for some time, but I was never able to get the edge triggered version 
> to work.
>
>  Hmm, running the Twisted test suite with this version doesn't do too 
> well either.  A few tests fail here and there before it gets totally 
> wedged on 
> twisted.test.test_pb.ConnectionTestCase.testIdentityConnector.
>
>  You can try this yourself by adding an entry for this reactor to the 
> dictionary at the top of twisted.application.app, then running "trial 
> -R -r epoll twisted", where "epoll" is the key you add to that dict.
>
>  Jp

A lot of these seem to fail when using the 'poll' and reactor also.
Broken tests or two broken reactors do you think?

But there are a few there I can fix. Thanks for the pointer :)

---

James




From exarkun at divmod.com  Tue May 24 07:48:07 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Tue, 24 May 2005 13:48:07 GMT
Subject: [Twisted-Python] epoll reactor
In-Reply-To: <bee5dcb46af6143e3f904a953f502e37@delx.cjb.net>
Message-ID: <20050524134807.559.1535540660.divmod.quotient.8568@ohm>

On Tue, 24 May 2005 23:13:51 +1000, James Bunton <james at delx.cjb.net> wrote:
>On 23/05/2005, at 11:23 PM, Jp Calderone wrote:
>>On Mon, 23 May 2005 22:08:43 +1000, James Bunton <james at delx.cjb.net> 
>>wrote:
>>>Well, I got it to work properly now :)
>>>
>>>http://msn-transport.jabberstudio.org/tarballs/epoll-0.2.tar.gz
>>>
>>>It's now uses the epoll edge triggered flag, and doesn't chew 99% CPU like 
>>>the first one accidentally did.
>>
>>  Neat.  There has been a level-triggered epoll reactor in my sandbox for 
>>some time, but I was never able to get the edge triggered version to work.
>>
>>  Hmm, running the Twisted test suite with this version doesn't do too well 
>>either.  A few tests fail here and there before it gets totally wedged on 
>>twisted.test.test_pb.ConnectionTestCase.testIdentityConnector.
>>
>>  You can try this yourself by adding an entry for this reactor to the 
>>dictionary at the top of twisted.application.app, then running "trial -R -r 
>>epoll twisted", where "epoll" is the key you add to that dict.
>>
>>  Jp
>
>A lot of these seem to fail when using the 'poll' and reactor also.
>Broken tests or two broken reactors do you think?
>
>But there are a few there I can fix. Thanks for the pointer :)

The poll reactor seems to be doing okay on the buildslave:

  http://twistedmatrix.com/buildbot/

Maybe it's skipping some tests that are running on your machine?

Jp



From nico at tekNico.net  Tue May 24 23:36:36 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 25 May 2005 07:36:36 +0200
Subject: [Twisted-Python] Twisted as subprocess
Message-ID: <42940EE4.9010901@tekNico.net>

I need to turn reactor.spawnProcess on its head.

That is, I need to run a Twisted-based program as a subprocess, getting
requests on stdin and giving responses on stdout. How do I hook up the
protocol and the rest?

It's going to be spawned by the snmpd daemon of net-snmp, via the
pass_persist directive in snmpd.conf .

-- 
Nicola Larosa - nico at tekNico.net

How can I in five minutes shift a lifetime's hidden pain?
 -- Julia Fordham, Girlfriend, Porcelain, 1989




From andrew-twisted at puzzling.org  Tue May 24 23:42:23 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 25 May 2005 15:42:23 +1000
Subject: [Twisted-Python] Twisted as subprocess
In-Reply-To: <42940EE4.9010901@tekNico.net>
References: <42940EE4.9010901@tekNico.net>
Message-ID: <20050525054223.GE26269@frobozz>

On Wed, May 25, 2005 at 07:36:36AM +0200, Nicola Larosa wrote:
> I need to turn reactor.spawnProcess on its head.
> 
> That is, I need to run a Twisted-based program as a subprocess, getting
> requests on stdin and giving responses on stdout. How do I hook up the
> protocol and the rest?

Use twisted.internet.stdio

-Andrew.




From nico at tekNico.net  Wed May 25 00:10:37 2005
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 25 May 2005 08:10:37 +0200
Subject: [Twisted-Python] Re: Twisted as subprocess
In-Reply-To: <20050525054223.GE26269@frobozz>
References: <42940EE4.9010901@tekNico.net> <20050525054223.GE26269@frobozz>
Message-ID: <429416DD.2040500@tekNico.net>

>> I need to turn reactor.spawnProcess on its head.
>>
>> That is, I need to run a Twisted-based program as a subprocess, getting
>> requests on stdin and giving responses on stdout. How do I hook up the
>> protocol and the rest?

> Use twisted.internet.stdio

Thanks, couldn't rgrep it in the sources to save my life. And there's an
example too (stdin.py), woohoo!

BTW, that was fast. :-)

-- 
Nicola Larosa - nico at tekNico.net

How can I in five minutes shift a lifetime's hidden pain?
 -- Julia Fordham, Girlfriend, Porcelain, 1989




From andrew-twisted at puzzling.org  Wed May 25 00:27:57 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 25 May 2005 16:27:57 +1000
Subject: [Twisted-Python] Re: Twisted as subprocess
In-Reply-To: <429416DD.2040500@tekNico.net>
References: <42940EE4.9010901@tekNico.net> <20050525054223.GE26269@frobozz>
	<429416DD.2040500@tekNico.net>
Message-ID: <20050525062757.GH26269@frobozz>

On Wed, May 25, 2005 at 08:10:37AM +0200, Nicola Larosa wrote:
> >> I need to turn reactor.spawnProcess on its head.
> >>
> >> That is, I need to run a Twisted-based program as a subprocess, getting
> >> requests on stdin and giving responses on stdout. How do I hook up the
> >> protocol and the rest?
> 
> > Use twisted.internet.stdio
> 
> Thanks, couldn't rgrep it in the sources to save my life. And there's an
> example too (stdin.py), woohoo!
> 
> BTW, that was fast. :-)

It helped that my answer was so lazy ;)

-Andrew.




From roland.hedberg at adm.umu.se  Wed May 25 01:15:58 2005
From: roland.hedberg at adm.umu.se (Roland Hedberg)
Date: Wed, 25 May 2005 09:15:58 +0200
Subject: [Twisted-Python] Sending arguments to application 
Message-ID: <648FE2DC-EFBB-46E5-B9A8-5ED4C57DF326@adm.umu.se>

Hi!

I using the variant "twistd -y foo.py" and I would like to be able to  
send arguments to foo.py in the same command.

The preferable way would be something like

"twistd -y foo.py arg1 arg2"

But that doesn't work, twistd complains.

If it can be done some other way, how ?

-- Roland



From jraghul85 at hotmail.com  Wed May 25 04:20:54 2005
From: jraghul85 at hotmail.com (Raghul Jagan)
Date: Wed, 25 May 2005 15:50:54 +0530
Subject: [Twisted-Python] Twisted server connection loss with Mysql
Message-ID: <BAY12-F832526F5B5785508C06A8AD0E0@phx.gbl>

Dear Friends,

                       I am using a twisted server to connect the mysql 
database using "adbapi".When I start my server the connection to the mysql 
established and the run as a separate thread. Suppose If the database is 
restarted or there is a response delay, then the twisted server losses the 
connection and when I tried by quering the database it reports the error 
giving "Loss in mysql connection".
                               I also tried  using the twisted 2.0 
version,but no way it does not connects automatically.

                  Friends, Please give a solution for this problem.

_________________________________________________________________
Get yourself a brand new Mobile. 
http://adfarm.mediaplex.com/ad/ck/4686-26272-10936-378?ck=BuyNewMobile 
Find,Compare & BUY IT NOW on eBay.in!




From johannes.beigel at brainbot.com  Wed May 25 04:29:42 2005
From: johannes.beigel at brainbot.com (Johannes Beigel)
Date: Wed, 25 May 2005 12:29:42 +0200
Subject: [Twisted-Python] Handle Control-C
Message-ID: <1117016982.19990.16.camel@localhost.localdomain>

Is there a (preferred) way to handle breaks with Control-C?

I'm aware of reactor.addSystemEventTrigger("before", "shutdown",...),
but I'd like to do some stuff with a fully running reactor and then call
reactor.stop() manually after some Deferreds come back.

-jojo





From andrew-twisted at puzzling.org  Wed May 25 05:44:07 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 25 May 2005 21:44:07 +1000
Subject: [Twisted-Python] Twisted server connection loss with Mysql
In-Reply-To: <BAY12-F832526F5B5785508C06A8AD0E0@phx.gbl>
References: <BAY12-F832526F5B5785508C06A8AD0E0@phx.gbl>
Message-ID: <20050525114407.GA2398@frobozz>

On Wed, May 25, 2005 at 03:50:54PM +0530, Raghul Jagan wrote:
> Dear Friends,
> 
>                       I am using a twisted server to connect the mysql 
> database using "adbapi".When I start my server the connection to the mysql 
> established and the run as a separate thread. Suppose If the database is 
> restarted or there is a response delay, then the twisted server losses the 
> connection and when I tried by quering the database it reports the error 
> giving "Loss in mysql connection".
>                               I also tried  using the twisted 2.0 
> version,but no way it does not connects automatically.
> 
>                  Friends, Please give a solution for this problem.

Pass cp_reconnect=1 to your adbapi.ConnectionPool, and it should reconnect
automatically.

-Andrew.



From exarkun at divmod.com  Wed May 25 05:48:57 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 25 May 2005 11:48:57 GMT
Subject: [Twisted-Python] Handle Control-C
In-Reply-To: <1117016982.19990.16.camel@localhost.localdomain>
Message-ID: <20050525114857.559.928643277.divmod.quotient.9351@ohm>

On Wed, 25 May 2005 12:29:42 +0200, Johannes Beigel <johannes.beigel at brainbot.com> wrote:
>Is there a (preferred) way to handle breaks with Control-C?
>
>I'm aware of reactor.addSystemEventTrigger("before", "shutdown",...),
>but I'd like to do some stuff with a fully running reactor and then call
>reactor.stop() manually after some Deferreds come back.

Your before shutdown trigger can return a Deferred.  The reactor won't go away until after the Deferred fires.

Jp



From boomberschloss at yahoo.com  Wed May 25 06:21:20 2005
From: boomberschloss at yahoo.com (Joachim Boomberschloss)
Date: Wed, 25 May 2005 05:21:20 -0700 (PDT)
Subject: [Twisted-Python] cleanup in twisted
In-Reply-To: 6667
Message-ID: <20050525122120.64271.qmail@web53109.mail.yahoo.com>


--- Jp Calderone <exarkun at divmod.com> wrote:
> On Mon, 23 May 2005 05:12:49 -0700 (PDT), Joachim
> Boomberschloss <boomberschloss at yahoo.com> wrote:
> >
> >--- Jp Calderone <exarkun at divmod.com> wrote:
> >> On Mon, 23 May 2005 02:40:53 -0700 (PDT), Joachim
> >> Boomberschloss <boomberschloss at yahoo.com> wrote:
> >> >
> >> >--- Bob Ippolito <bob at redivi.com> wrote:
> >> >>
> >> >> On May 22, 2005, at 8:46 AM, Joachim
> >> Boomberschloss
> >> >> wrote:
> >> >>
> >> >> > I just jotted down a little mechanism for
> >> >> cleaning-up
> >> >> > in Twisted, and I wanted to see if:
> >> >> > 1. other people think it's needed
> >> >> > 2. other people manage to use it
> >> >> >
> >> >> > What this does is enable one to define a
> >> >> __cleanup__
> >> >> > method which gets call either when the
> instance
> >> is
> >> >> > deleted, or when the reactor shuts down. It
> can
> >> >> return
> >> >> > a dereffed that delays the shutdown. The
> >> benefit
> >> >> is
> >> >> > being able to define communication-related
> >> stuff
> >> >> in
> >> >> > the cleanup method, which is not so useful
> to
> >> do
> >> >> in
> >> >> > __del__.
> >> >>
> >> >> This is just begging for object leaks, because
> >> >> __del__ disables
> >> >> aspects of cyclic GC.
> >> >
> >> >Hmmpf. What does this mean, and is there a
> simple
> >> way
> >> >of resolving it?
> >> >
> >>
> >>   If you construct a reference cycle which
> contains
> >> an object which has a __del__ method, the entire
> >> cycle becomes "garbage" - Python cannot free any
> of
> >> the objects or call any of their __del__ methods.
> >> Instead, it puts them into the gc module's
> `garbage'
> >> list and leaves them there forever.
> >>
> >>   There's no simple way to resolve this (except
> to
> >> not implement __del__, of course ;).
> >>
> >>   A non-simple way to resolve it is to use
> weakref
> >> callbacks instead of __del__.  Weakref callbacks
> >> have some nasty bugs in versions of Python older
> >> than 2.3.5 (more, the further back you go), and
> >> they're trickier to use than __del__.  They don't
> >> create garbage cycles, though.
> >>
> >
> >Can you point me to an example of this (preferably
> in
> >Twisted)? Is this whole cleanup thing worth my time
> >fixing it in your opinion?
> >
> 
> Twisted doesn't make use of it, due to the
> instabilities in previous Python versions (which
> Twisted still supports).
> 
> Another technique I didn't mention is to move the
> __del__ implementation off of the object which might
> participate in a cycle and onto a subsidiary object.
>  Deferreds do this in Twisted 2.0.  As a general
> technique, this doesn't make much sense, since it
> depends on knowledge of the structure of specific
> object graphs (ie, you need to know where cycles
> will form and where they will not).
> 
> I'm not sure if it's worth the effort.  I don't
> exactly see the attraction of the functionality
> being provided.  I tend to find that explicit
> cleanup is not overly burdensome.  Perhaps you can
> share some examples of how you see it being used?

Well, the attraction is this: I ran into situations in
which it is desirable for an object to do some
communication-related cleanup when deleted, either
when the program shuts down or when it is no longer
referenced. For example, I have objects responsible
for maintaining communication with some servers, and I
want them to inform the server when they cease to
maintain communication with it. This should be done
either when the service is no longer necessary and the
object (the maintainer) is deleted, or when the
program shuts down, so basically, the functionality
required is to be able to define communication-related
stuff (i.e. things that aren't instantaneous and
involve deferreds) to be done either when the object
is deleted or when twisted shuts down. The latter is
easy to do, but the former isn't, and come to think of
it, my solution isn't good regardless of reference
cycles, because, since the cleanup method is spawned
from __del__, it has to do the cleanup instantaneously
or the cleanup process won't be able to refer to the
object at a later stage. Basically what is needed is
to be able to defer the destruction of the object both
at program shutdown, which is easy, and before object
deletion, which I don't know how to do. Any thoughts
(either about the attractiveness of the functionality
or about how to achieve it)?

Joe.


		
__________________________________ 
Yahoo! Mail 
Stay connected, organized, and protected. Take the tour: 
http://tour.mail.yahoo.com/mailtour.html 




From exarkun at divmod.com  Wed May 25 06:58:51 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 25 May 2005 12:58:51 GMT
Subject: [Twisted-Python] cleanup in twisted
In-Reply-To: <20050525122120.64271.qmail@web53109.mail.yahoo.com>
Message-ID: <20050525125851.559.745604057.divmod.quotient.9393@ohm>

On Wed, 25 May 2005 05:21:20 -0700 (PDT), Joachim Boomberschloss <boomberschloss at yahoo.com> wrote:
>
>--- Jp Calderone <exarkun at divmod.com> wrote:
>> On Mon, 23 May 2005 05:12:49 -0700 (PDT), Joachim
>> Boomberschloss <boomberschloss at yahoo.com> wrote:
>> >
>> >--- Jp Calderone <exarkun at divmod.com> wrote:
>> >> On Mon, 23 May 2005 02:40:53 -0700 (PDT), Joachim
>> >> Boomberschloss <boomberschloss at yahoo.com> wrote:
>> >> >
>> >> >--- Bob Ippolito <bob at redivi.com> wrote:
>> >> >>
>> >> >> On May 22, 2005, at 8:46 AM, Joachim
>> >> Boomberschloss
>> >> >> wrote:
>> >> >>
>> >> >> > I just jotted down a little mechanism for
>> >> >> cleaning-up
>> >> >> > in Twisted, and I wanted to see if:
>> >> >> > 1. other people think it's needed
>> >> >> > 2. other people manage to use it
>> >> >> >
>> >> >> > What this does is enable one to define a
>> >> >> __cleanup__
>> >> >> > method which gets call either when the
>> instance
>> >> is
>> >> >> > deleted, or when the reactor shuts down. It
>> can
>> >> >> return
>> >> >> > a dereffed that delays the shutdown. The
>> >> benefit
>> >> >> is
>> >> >> > being able to define communication-related
>> >> stuff
>> >> >> in
>> >> >> > the cleanup method, which is not so useful
>> to
>> >> do
>> >> >> in
>> >> >> > __del__.
>> >> >>
>> >> >> This is just begging for object leaks, because
>> >> >> __del__ disables
>> >> >> aspects of cyclic GC.
>> >> >
>> >> >Hmmpf. What does this mean, and is there a
>> simple
>> >> way
>> >> >of resolving it?
>> >> >
>> >>
>> >>   If you construct a reference cycle which
>> contains
>> >> an object which has a __del__ method, the entire
>> >> cycle becomes "garbage" - Python cannot free any
>> of
>> >> the objects or call any of their __del__ methods.
>> >> Instead, it puts them into the gc module's
>> `garbage'
>> >> list and leaves them there forever.
>> >>
>> >>   There's no simple way to resolve this (except
>> to
>> >> not implement __del__, of course ;).
>> >>
>> >>   A non-simple way to resolve it is to use
>> weakref
>> >> callbacks instead of __del__.  Weakref callbacks
>> >> have some nasty bugs in versions of Python older
>> >> than 2.3.5 (more, the further back you go), and
>> >> they're trickier to use than __del__.  They don't
>> >> create garbage cycles, though.
>> >>
>> >
>> >Can you point me to an example of this (preferably
>> in
>> >Twisted)? Is this whole cleanup thing worth my time
>> >fixing it in your opinion?
>> >
>>
>> Twisted doesn't make use of it, due to the
>> instabilities in previous Python versions (which
>> Twisted still supports).
>>
>> Another technique I didn't mention is to move the
>> __del__ implementation off of the object which might
>> participate in a cycle and onto a subsidiary object.
>>  Deferreds do this in Twisted 2.0.  As a general
>> technique, this doesn't make much sense, since it
>> depends on knowledge of the structure of specific
>> object graphs (ie, you need to know where cycles
>> will form and where they will not).
>>
>> I'm not sure if it's worth the effort.  I don't
>> exactly see the attraction of the functionality
>> being provided.  I tend to find that explicit
>> cleanup is not overly burdensome.  Perhaps you can
>> share some examples of how you see it being used?
>
>Well, the attraction is this: I ran into situations in
>which it is desirable for an object to do some
>communication-related cleanup when deleted, either
>when the program shuts down or when it is no longer
>referenced. For example, I have objects responsible
>for maintaining communication with some servers, and I
>want them to inform the server when they cease to
>maintain communication with it. This should be done
>either when the service is no longer necessary and the
>object (the maintainer) is deleted, or when the
>program shuts down, so basically, the functionality
>required is to be able to define communication-related
>stuff (i.e. things that aren't instantaneous and
>involve deferreds) to be done either when the object
>is deleted or when twisted shuts down. The latter is
>easy to do, but the former isn't, and come to think of
>it, my solution isn't good regardless of reference
>cycles, because, since the cleanup method is spawned
>from __del__, it has to do the cleanup instantaneously
>or the cleanup process won't be able to refer to the
>object at a later stage. Basically what is needed is
>to be able to defer the destruction of the object both
>at program shutdown, which is easy, and before object
>deletion, which I don't know how to do. Any thoughts
>(either about the attractiveness of the functionality
>or about how to achieve it)?
>

Rescuing an object from garbage collection is easier than you may expect:

  exarkun at boson:~$ python
  Python 2.4.1 (#2, Mar 30 2005, 21:51:10) 
  [GCC 3.3.5 (Debian 1:3.3.5-8ubuntu2)] on linux2
  Type "help", "copyright", "credits" or "license" for more information.
  >>> L = []
  >>> class Foo:
  ...     def __del__(self):
  ...             L.append(self)
  ... 
  >>> f = Foo()
  >>> del f
  >>> L
  [<__main__.Foo instance at 0xb7dff34c>]
  >>> 

Of course, for it to ever be collected, you'll need to take it out of that list.

Jp



From boomberschloss at yahoo.com  Wed May 25 07:12:16 2005
From: boomberschloss at yahoo.com (Joachim Boomberschloss)
Date: Wed, 25 May 2005 06:12:16 -0700 (PDT)
Subject: [Twisted-Python] cleanup in twisted
In-Reply-To: <20050525125851.559.745604057.divmod.quotient.9393@ohm>
Message-ID: <20050525131216.40438.qmail@web53103.mail.yahoo.com>


--- Jp Calderone <exarkun at divmod.com> wrote:

> On Wed, 25 May 2005 05:21:20 -0700 (PDT), Joachim
> Boomberschloss <boomberschloss at yahoo.com> wrote:
> >
> > ...
> >>
> >> I'm not sure if it's worth the effort.  I don't
> >> exactly see the attraction of the functionality
> >> being provided.  I tend to find that explicit
> >> cleanup is not overly burdensome.  Perhaps you
> can
> >> share some examples of how you see it being used?
> >
> >Well, the attraction is this: I ran into situations
> in
> >which it is desirable for an object to do some
> >communication-related cleanup when deleted, either
> >when the program shuts down or when it is no longer
> >referenced. For example, I have objects responsible
> >for maintaining communication with some servers,
> and I
> >want them to inform the server when they cease to
> >maintain communication with it. This should be done
> >either when the service is no longer necessary and
> the
> >object (the maintainer) is deleted, or when the
> >program shuts down, so basically, the functionality
> >required is to be able to define
> communication-related
> >stuff (i.e. things that aren't instantaneous and
> >involve deferreds) to be done either when the
> object
> >is deleted or when twisted shuts down. The latter
> is
> >easy to do, but the former isn't, and come to think
> of
> >it, my solution isn't good regardless of reference
> >cycles, because, since the cleanup method is
> spawned
> >from __del__, it has to do the cleanup
> instantaneously
> >or the cleanup process won't be able to refer to
> the
> >object at a later stage. Basically what is needed
> is
> >to be able to defer the destruction of the object
> both
> >at program shutdown, which is easy, and before
> object
> >deletion, which I don't know how to do. Any
> thoughts
> >(either about the attractiveness of the
> functionality
> >or about how to achieve it)?
> >
> 
> Rescuing an object from garbage collection is easier
> than you may expect:
> 
>   exarkun at boson:~$ python
>   Python 2.4.1 (#2, Mar 30 2005, 21:51:10) 
>   [GCC 3.3.5 (Debian 1:3.3.5-8ubuntu2)] on linux2
>   Type "help", "copyright", "credits" or "license"
> for more information.
>   >>> L = []
>   >>> class Foo:
>   ...     def __del__(self):
>   ...             L.append(self)
>   ... 
>   >>> f = Foo()
>   >>> del f
>   >>> L
>   [<__main__.Foo instance at 0xb7dff34c>]
>   >>> 
> 
> Of course, for it to ever be collected, you'll need
> to take it out of that list.
> 

Hmmm. Good to know. I thought this sort of thing was
considered illegal in Python. This resolves deferring
the destruction, but not the problem with reference
cycles. Is there any way to do it without __del__?

I thought of one crazy option: create a reference
cycle intentionally in the class' __init__, and then
run a looping call that will check gc.garbage from
time to time. If the object appears there, then we
know that it's safe to delete it; we can call the
__cleanup__ method and afterwards break the reference
cycle and delete the object.

Joe.


		
__________________________________
Discover Yahoo! 
Find restaurants, movies, travel and more fun for the weekend. Check it out! 
http://discover.yahoo.com/weekend.html 




From exarkun at divmod.com  Wed May 25 07:27:27 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 25 May 2005 13:27:27 GMT
Subject: [Twisted-Python] cleanup in twisted
In-Reply-To: <20050525131216.40438.qmail@web53103.mail.yahoo.com>
Message-ID: <20050525132727.559.1013261196.divmod.quotient.9413@ohm>

On Wed, 25 May 2005 06:12:16 -0700 (PDT), Joachim Boomberschloss <boomberschloss at yahoo.com> wrote:
>
>--- Jp Calderone <exarkun at divmod.com> wrote:
>
>> [snip]
>>
>> Rescuing an object from garbage collection is easier
>> than you may expect:
>>
>>   exarkun at boson:~$ python
>>   Python 2.4.1 (#2, Mar 30 2005, 21:51:10)
>>   [GCC 3.3.5 (Debian 1:3.3.5-8ubuntu2)] on linux2
>>   Type "help", "copyright", "credits" or "license"
>> for more information.
>>   >>> L = []
>>   >>> class Foo:
>>   ...     def __del__(self):
>>   ...             L.append(self)
>>   ...
>>   >>> f = Foo()
>>   >>> del f
>>   >>> L
>>   [<__main__.Foo instance at 0xb7dff34c>]
>>   >>>
>>
>> Of course, for it to ever be collected, you'll need
>> to take it out of that list.
>>
>
>Hmmm. Good to know. I thought this sort of thing was
>considered illegal in Python. This resolves deferring
>the destruction, but not the problem with reference
>cycles. Is there any way to do it without __del__?

The garbage collector goes to great lengths to make sure it works :)

Well, here's an example of how you'd use weakrefs.  It may or may not apply to your case:

  exarkun at boson:~$ python
  Python 2.4.1 (#2, Mar 30 2005, 21:51:10) 
  [GCC 3.3.5 (Debian 1:3.3.5-8ubuntu2)] on linux2
  Type "help", "copyright", "credits" or "license" for more information.
  >>> import weakref
  >>> def cleanup(handle):
  ...     print 'Cleaned up', handle
  ... 
  >>> class Foo:
  ...     def __init__(self, x, y, z):
  ...         self.x, self.y, self.z = x, y, z
  ...         self._cleanup = weakref.ref(
  ...             self, lambda deadref: cleanup(x))
  ... 
  >>> f = Foo('hello', 'world', 42)
  >>> del f
  Cleaned up hello
  >>> 

The main point here is the isolation of the objects needed for actual cleanup from the object which may participate in a cycle. In this way, it is similar to moving the __del__ implementation onto a separate class.

Since the cleanup callback does not have access to the instance, it is somewhat more limited.  For example, if the `x' attribute of a Foo instance is ever changed, the callback will still be invoked with the original value.

Jp



From james at delx.cjb.net  Wed May 25 07:30:52 2005
From: james at delx.cjb.net (James Bunton)
Date: Wed, 25 May 2005 23:30:52 +1000
Subject: [Twisted-Python] epoll reactor
In-Reply-To: <20050524134807.559.1535540660.divmod.quotient.8568@ohm>
References: <20050524134807.559.1535540660.divmod.quotient.8568@ohm>
Message-ID: <98310e0a7ff4b2b883d9afa5eaf4305d@delx.cjb.net>

On 24/05/2005, at 11:48 PM, Jp Calderone wrote:

> On Tue, 24 May 2005 23:13:51 +1000, James Bunton <james at delx.cjb.net> 
> wrote:
>> On 23/05/2005, at 11:23 PM, Jp Calderone wrote:
>>> On Mon, 23 May 2005 22:08:43 +1000, James Bunton 
>>> <james at delx.cjb.net> wrote:
>>>> Well, I got it to work properly now :)
>>>>
>>>> http://msn-transport.jabberstudio.org/tarballs/epoll-0.2.tar.gz
>>>>
>>>> It's now uses the epoll edge triggered flag, and doesn't chew 99% 
>>>> CPU like the first one accidentally did.
>>>
>>>  Neat.  There has been a level-triggered epoll reactor in my sandbox 
>>> for some time, but I was never able to get the edge triggered 
>>> version to work.
>>>
>>>  Hmm, running the Twisted test suite with this version doesn't do 
>>> too well either.  A few tests fail here and there before it gets 
>>> totally wedged on 
>>> twisted.test.test_pb.ConnectionTestCase.testIdentityConnector.
>>>
>>>  You can try this yourself by adding an entry for this reactor to 
>>> the dictionary at the top of twisted.application.app, then running 
>>> "trial -R -r epoll twisted", where "epoll" is the key you add to 
>>> that dict.
>>>
>>>  Jp
>>
>> A lot of these seem to fail when using the 'poll' and reactor also.
>> Broken tests or two broken reactors do you think?
>>
>> But there are a few there I can fix. Thanks for the pointer :)
>
> The poll reactor seems to be doing okay on the buildslave:
>
>  http://twistedmatrix.com/buildbot/
>
> Maybe it's skipping some tests that are running on your machine?
>
> Jp

Do you know how I can tell which tests are ok to skip? And how to skip 
them?
The buildbot page didn't seem to say what tests were actually run, only 
the warnings that occurred.

http://msn-transport.jabberstudio.org/tarballs/epoll-0.3.tar.gz
That should do a little better with the tests. It still fails some, but 
they seem to be the same ones that poll fails also.

---

James




From exarkun at divmod.com  Wed May 25 07:52:39 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Wed, 25 May 2005 13:52:39 GMT
Subject: [Twisted-Python] epoll reactor
In-Reply-To: <98310e0a7ff4b2b883d9afa5eaf4305d@delx.cjb.net>
Message-ID: <20050525135239.559.805993620.divmod.quotient.9429@ohm>

On Wed, 25 May 2005 23:30:52 +1000, James Bunton <james at delx.cjb.net> wrote:
>On 24/05/2005, at 11:48 PM, Jp Calderone wrote:
>>On Tue, 24 May 2005 23:13:51 +1000, James Bunton <james at delx.cjb.net> 
>>wrote:
>>>On 23/05/2005, at 11:23 PM, Jp Calderone wrote:
>>>>On Mon, 23 May 2005 22:08:43 +1000, James Bunton <james at delx.cjb.net> 
>>>>wrote:
>>>>>Well, I got it to work properly now :)
>>>>>
>>>>>http://msn-transport.jabberstudio.org/tarballs/epoll-0.2.tar.gz
>>>>>
>>>>>It's now uses the epoll edge triggered flag, and doesn't chew 99% CPU 
>>>>>like the first one accidentally did.
>>>>
>>>>  Neat.  There has been a level-triggered epoll reactor in my sandbox for 
>>>>some time, but I was never able to get the edge triggered version to 
>>>>work.
>>>>
>>>>  Hmm, running the Twisted test suite with this version doesn't do too 
>>>>well either.  A few tests fail here and there before it gets totally 
>>>>wedged on twisted.test.test_pb.ConnectionTestCase.testIdentityConnector.
>>>>
>>>>  You can try this yourself by adding an entry for this reactor to the 
>>>>dictionary at the top of twisted.application.app, then running "trial -R 
>>>>-r epoll twisted", where "epoll" is the key you add to that dict.
>>>>
>>>>  Jp
>>>
>>>A lot of these seem to fail when using the 'poll' and reactor also.
>>>Broken tests or two broken reactors do you think?
>>>
>>>But there are a few there I can fix. Thanks for the pointer :)
>>
>>The poll reactor seems to be doing okay on the buildslave:
>>
>>  http://twistedmatrix.com/buildbot/
>>
>>Maybe it's skipping some tests that are running on your machine?
>>
>>Jp
>
>Do you know how I can tell which tests are ok to skip? And how to skip them?
>The buildbot page didn't seem to say what tests were actually run, only the 
>warnings that occurred.

If you check out the "problems" link, it lists which tests are being skipped.  One such page is at <http://twistedmatrix.com/buildbot/reactors/builds/389/poll/2>.

>
>http://msn-transport.jabberstudio.org/tarballs/epoll-0.3.tar.gz
>That should do a little better with the tests. It still fails some, but they 
>seem to be the same ones that poll fails also.

Cool, I'll give it a try later today.

Jp



From andrew-twisted at puzzling.org  Wed May 25 07:56:56 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 25 May 2005 23:56:56 +1000
Subject: [Twisted-Python] epoll reactor
In-Reply-To: <98310e0a7ff4b2b883d9afa5eaf4305d@delx.cjb.net>
References: <20050524134807.559.1535540660.divmod.quotient.8568@ohm>
	<98310e0a7ff4b2b883d9afa5eaf4305d@delx.cjb.net>
Message-ID: <20050525135656.GL26269@frobozz>

On Wed, May 25, 2005 at 11:30:52PM +1000, James Bunton wrote:
[...]
> The buildbot page didn't seem to say what tests were actually run, only 
> the warnings that occurred.

The buildbot page does give the full test output in the "log" links, as well
as the full test.log file in the "test.log" links.  The "problems" and
"warnings" links are filtered versions of the "log" output.

-Andrew.




From corydodt at twistedmatrix.com  Wed May 25 09:03:32 2005
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Wed, 25 May 2005 08:03:32 -0700
Subject: [Twisted-Python] Sending arguments to application
In-Reply-To: <648FE2DC-EFBB-46E5-B9A8-5ED4C57DF326@adm.umu.se>
References: <648FE2DC-EFBB-46E5-B9A8-5ED4C57DF326@adm.umu.se>
Message-ID: <429493C4.1040405@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

That's just not how twistd -y works.  The argument is supposed to be something
called a "TAC" file, which is just a config file that happens to have Python
syntax.  In other words, you put your arguments inside it.  You can name the
file .py if you want to, but conceptually it's still supposed to be a config file.

If you want another way of configuring your application, you need to provide
your own main entry point, and use something (probably twisted.python.usage)
to process the command-line arguments.

C


Roland Hedberg wrote:
| Hi!
|
| I using the variant "twistd -y foo.py" and I would like to be able to
| send arguments to foo.py in the same command.
|
| The preferable way would be something like
|
| "twistd -y foo.py arg1 arg2"
|
| But that doesn't work, twistd complains.
|
| If it can be done some other way, how ?
|
| -- Roland
|
| _______________________________________________
| Twisted-Python mailing list
| Twisted-Python at twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (MingW32)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFClJPE3A5SrXAiHQcRAmEOAJ9uzbwF0rVjL7z1S3xPry3DHwPQngCgpp1K
oE33gI5ZMR+E4doPe53XRUI=
=Ak7g
-----END PGP SIGNATURE-----



From ian at ianduggan.net  Wed May 25 11:19:21 2005
From: ian at ianduggan.net (Ian Duggan)
Date: Wed, 25 May 2005 10:19:21 -0700
Subject: [Twisted-Python] Sending arguments to application
In-Reply-To: <648FE2DC-EFBB-46E5-B9A8-5ED4C57DF326@adm.umu.se>
References: <648FE2DC-EFBB-46E5-B9A8-5ED4C57DF326@adm.umu.se>
Message-ID: <200505251019.22164.ian@ianduggan.net>


On Wednesday 25 May 2005 00:15, Roland Hedberg wrote:
> I using the variant "twistd -y foo.py" and I would like to be able to
> send arguments to foo.py in the same command.
>
> The preferable way would be something like
>
> "twistd -y foo.py arg1 arg2"
>
> But that doesn't work, twistd complains.
>
> If it can be done some other way, how ?

I wanted the functionality of twistd as well as the ability to pass arguments 
to my script too. I managed to do something that worked for my by turning 
things inside out and having my script execute twistd as needed. 

The trick was to use an if/else around the __name__ == __main__ statement.

from twisted.python import usage
import twisted.scripts.twistd as td

# setup command parsing here

if __name__ == '__main__':
    #run twistd here
    tdcmds = ["-o", "-y", __file__]
    config = parse_options()

    # add more options to tdcmds
    ....

    # all
    tdoptions = td.ServerOptions()
    tdoptions.parseOptions(tdcmds)
    td.runApp(tdoptions)

else:
    # setup the application object -- gets run when twistd loads this file
    application = service.Application('sampleserver')
    serviceCollection = service.IServiceCollection(application)
    internet.UDPServer(config['port'], SampleProtocol()
                                        ).setServiceParent(serviceCollection)


--Ian
-------------- next part --------------
A non-text attachment was scrubbed...
Name: sample.py
Type: application/x-python
Size: 3059 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20050525/3cb4cd90/attachment-0002.bin>

From james at delx.cjb.net  Wed May 25 14:11:26 2005
From: james at delx.cjb.net (James Bunton)
Date: Thu, 26 May 2005 06:11:26 +1000
Subject: [Twisted-Python] epoll reactor
In-Reply-To: <20050525135656.GL26269@frobozz>
References: <20050524134807.559.1535540660.divmod.quotient.8568@ohm>
	<98310e0a7ff4b2b883d9afa5eaf4305d@delx.cjb.net>
	<20050525135656.GL26269@frobozz>
Message-ID: <190bf2c1de5b2f4cb4217a682317c261@delx.cjb.net>


On 25/05/2005, at 11:56 PM, Andrew Bennetts wrote:

> On Wed, May 25, 2005 at 11:30:52PM +1000, James Bunton wrote:
> [...]
>> The buildbot page didn't seem to say what tests were actually run, 
>> only
>> the warnings that occurred.
>
> The buildbot page does give the full test output in the "log" links, 
> as well
> as the full test.log file in the "test.log" links.  The "problems" and
> "warnings" links are filtered versions of the "log" output.
>
> -Andrew.

I thought they were all the same link :)
Thanks

---

James




From theshz at gmail.com  Thu May 26 00:37:50 2005
From: theshz at gmail.com (theshz)
Date: Wed, 25 May 2005 23:37:50 -0700
Subject: [Twisted-Python] generating and handling events
References: <20050520232600.559.607604854.divmod.quotient.5672@ohm>
Message-ID: <001901c561bd$70d94e90$053310ac@sv.us.sonicwall.com>

Hi, from the documentation I could only find examples where the events are
related more to Deferred, i.e., a method call that may take sometime. I'm a
little confused about the difference between this and the "traditional" kind
of event handling. Are they the same with just different terminology? By
"traditional", I mean that in part of the code, I generate an event, say a
"step 1 finished event", somewhere else there is a handler waiting for this
event. The reactor is responsible for dispatching this event to that
handler, which hopefull starts step 2. Or even more, like publish-subscribe:
multiple handers can register for the same event. In other words, these
events are generated internally, not necessarily by such delays like
network, file access, or user input. Is this doable in Twisted?

Thanks.

Z.




From bob at redivi.com  Thu May 26 02:00:30 2005
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 26 May 2005 01:00:30 -0700
Subject: [Twisted-Python] generating and handling events
In-Reply-To: <001901c561bd$70d94e90$053310ac@sv.us.sonicwall.com>
References: <20050520232600.559.607604854.divmod.quotient.5672@ohm>
	<001901c561bd$70d94e90$053310ac@sv.us.sonicwall.com>
Message-ID: <0832951E-EADD-4A8F-BF74-93E1C9F2D6B8@redivi.com>

On May 25, 2005, at 11:37 PM, theshz wrote:

> Hi, from the documentation I could only find examples where the  
> events are
> related more to Deferred, i.e., a method call that may take  
> sometime. I'm a
> little confused about the difference between this and the  
> "traditional" kind
> of event handling. Are they the same with just different  
> terminology? By
> "traditional", I mean that in part of the code, I generate an  
> event, say a
> "step 1 finished event", somewhere else there is a handler waiting  
> for this
> event. The reactor is responsible for dispatching this event to that
> handler, which hopefull starts step 2. Or even more, like publish- 
> subscribe:
> multiple handers can register for the same event. In other words,  
> these
> events are generated internally, not necessarily by such delays like
> network, file access, or user input. Is this doable in Twisted?

Deferreds are just objects that have a list of (result, error)  
callback pairs.  When the result or error is available, it's passed  
to the first appropriate callback.  The result or error returned by  
that callback is sent to the next, etc.  Its job is to pass that  
*single* result on to everything in its callback chain either one or  
zero times, and then it should be garbage collected because its job  
is done.

The way this would works is like this (bare bones example without any  
error handling, etc.):

###

from twisted.internet import defer, reactor

def step1():
     d = defer.Deferred()
     # In two seconds, call the callback with the result 42
     reactor.callLater(2.0, d.callback, 7)
     return d

def step2(resultOfStep1):
     d = defer.Deferred()
     # In two seconds, call the callback with the result of the
     # argument times 6
     reactor.callLater(2.0, d.callback, resultOfStep1 * 6)
     return d

def doAllSteps():
     # step1 returns a deferred
     d = step1()
     # step 2 takes the result of step1 as an argument
     # so we can use it as the callback for the deferred,
     # since the callback always receives the result as the
     # first argument
     d = d.addCallback(step2)
     # the other thing to note is that step2 returns a deferred, which
     # will automatically be chained, so we can just return it here
     # as our deferred
     return d

def main():
     def printResultAndQuit(result):
         print "the answer is:", result
         reactor.stop()

     d = doAllSteps()
     d.addCallback(printResultAndQuit)

     # this should think for about 4 seconds,
     # print the answer to everything, and then
     # return.
     reactor.run()

if __name__ == '__main__':
     main()

###

It is an excellent primitive for building a notification system on  
top of, but it isn't one.  As you can see in Twisted's source, there  
is rarely a need for an event dispatching system, so one doesn't  
really exist (there is one on the reactor for startup and shutdown  
events, but that's about it).  In almost all cases the "problem" is  
solved by:
(a) having some particular name for a method to be implemented in a  
subclass (e.g. subclass LineReceiver and implement lineReceived)
(b) using a delegate that implements some method with a particular  
name (e.g. protocols telling their transport to lose connection, or  
transports notifying their protocol of a lost connection)
(c) using deferreds (i.e. twisted.web.server.Request.notifyFinish)

The only one that looks like traditional publish-subscribe is really  
the reactor's system events (twisted.internet.interfaces.IReactorCore)

-bob




From michele.petrazzo at unipex.it  Thu May 26 06:29:44 2005
From: michele.petrazzo at unipex.it (Michele Petrazzo)
Date: Thu, 26 May 2005 14:29:44 +0200
Subject: [Twisted-Python] threadedselectreactor
Message-ID: <4295C138.8040708@unipex.it>

I found some messages that explain the new threadedselectreactor 
function, but on the last package 2.0.1 I don't found that file. Where 
can I download this new function/file?
And after, is this a stable or only an unstable version?

Thanks,
Michele



From andrew-twisted at puzzling.org  Thu May 26 06:50:48 2005
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 26 May 2005 22:50:48 +1000
Subject: [Twisted-Python] threadedselectreactor
In-Reply-To: <4295C138.8040708@unipex.it>
References: <4295C138.8040708@unipex.it>
Message-ID: <20050526125048.GW26269@frobozz>

On Thu, May 26, 2005 at 02:29:44PM +0200, Michele Petrazzo wrote:
> I found some messages that explain the new threadedselectreactor 
> function, but on the last package 2.0.1 I don't found that file. Where 
> can I download this new function/file?
> And after, is this a stable or only an unstable version?

2.0.1 only contains bugfixes for 2.0.  threadedselectreactor is a new
feature, not a bugfix, so isn't in 2.0.1.  It should be in 2.1, when that
gets released.

-Andrew.




From boomberschloss at yahoo.com  Thu May 26 08:21:00 2005
From: boomberschloss at yahoo.com (Joachim Boomberschloss)
Date: Thu, 26 May 2005 07:21:00 -0700 (PDT)
Subject: [Twisted-Python] cleanup in twisted
In-Reply-To: 6667
Message-ID: <20050526142100.97199.qmail@web53108.mail.yahoo.com>


--- Jp Calderone <exarkun at divmod.com> wrote:
> On Wed, 25 May 2005 06:12:16 -0700 (PDT), Joachim
> Boomberschloss <boomberschloss at yahoo.com> wrote:
> >
> >--- Jp Calderone <exarkun at divmod.com> wrote:
> >
> >> [snip]
> >>
> >> Rescuing an object from garbage collection is
> easier
> >> than you may expect:
> >>
> >>   exarkun at boson:~$ python
> >>   Python 2.4.1 (#2, Mar 30 2005, 21:51:10)
> >>   [GCC 3.3.5 (Debian 1:3.3.5-8ubuntu2)] on linux2
> >>   Type "help", "copyright", "credits" or
> "license"
> >> for more information.
> >>   >>> L = []
> >>   >>> class Foo:
> >>   ...     def __del__(self):
> >>   ...             L.append(self)
> >>   ...
> >>   >>> f = Foo()
> >>   >>> del f
> >>   >>> L
> >>   [<__main__.Foo instance at 0xb7dff34c>]
> >>   >>>
> >>
> >> Of course, for it to ever be collected, you'll
> need
> >> to take it out of that list.
> >>
> >
> >Hmmm. Good to know. I thought this sort of thing
> was
> >considered illegal in Python. This resolves
> deferring
> >the destruction, but not the problem with reference
> >cycles. Is there any way to do it without __del__?
> 
> The garbage collector goes to great lengths to make
> sure it works :)
> 
> Well, here's an example of how you'd use weakrefs. 
> It may or may not apply to your case:
> 
>   exarkun at boson:~$ python
>   Python 2.4.1 (#2, Mar 30 2005, 21:51:10) 
>   [GCC 3.3.5 (Debian 1:3.3.5-8ubuntu2)] on linux2
>   Type "help", "copyright", "credits" or "license"
> for more information.
>   >>> import weakref
>   >>> def cleanup(handle):
>   ...     print 'Cleaned up', handle
>   ... 
>   >>> class Foo:
>   ...     def __init__(self, x, y, z):
>   ...         self.x, self.y, self.z = x, y, z
>   ...         self._cleanup = weakref.ref(
>   ...             self, lambda deadref: cleanup(x))
>   ... 
>   >>> f = Foo('hello', 'world', 42)
>   >>> del f
>   Cleaned up hello
>   >>> 
> 
> The main point here is the isolation of the objects
> needed for actual cleanup from the object which may
> participate in a cycle. In this way, it is similar
> to moving the __del__ implementation onto a separate
> class.
> 
> Since the cleanup callback does not have access to
> the instance, it is somewhat more limited.  For
> example, if the `x' attribute of a Foo instance is
> ever changed, the callback will still be invoked
> with the original value.
> 

Got it. Well, indeed, this is not exactly what I need
because of the limitation you mentioned, but I think I
found a solution: to have a global object that points
to all instances of Cleanuppable, and a LoopingCall
that checks every minute or so whether this global
object is the only referrer to each Cleanuppable
instance, in which case it activates the __cleanup__
method of the Cleanuppable, and waits for the
procedure to complete, then deletes the instance. This
is somewhat unelegant (because of the arbitrariness of
the LoopingCall as opposed to being dependent on the
garbage collection process), but I think it should be
completely satisfactory functionality-wise.

This brings me back to the question of attractiveness,
which makes me suspect that I am missing some point.
What I thought was that it would be very convenient to
be able to specify once, using a simple Twisted-style
idiom, what should happen with an object when it is no
longer needed, which, because of the way Twisted
works, should be given a chance to execute before the
reactor shuts down, but similarly when the object
simply dies out normally (i.e. the point here is being
able to use deferred to specify a non-instantaneous
cleanup procedure). An example of this would be an
object that interacts with a remote server that should
notify the server before retiring from the
interaction.

I think the method I proposed including the missing
element I described above handles this nicely. I'm not
sure what you meant by explicit cleanup.

Joe.

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From lc278 at cornell.edu  Thu May 26 10:10:06 2005
From: lc278 at cornell.edu (Laran Evans)
Date: Thu, 26 May 2005 12:10:06 -0400
Subject: [Twisted-Python] clustering or process group replication
Message-ID: <4295F4DE.8020403@cornell.edu>

Has any work been done to enable process group communication similar to 
what Spread (spread.org), Ensemble, Horus, Isis, Eternal etc. offer?

- Laran




From itamar at itamarst.org  Thu May 26 10:25:17 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 26 May 2005 12:25:17 -0400
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <4295F4DE.8020403@cornell.edu>
References: <4295F4DE.8020403@cornell.edu>
Message-ID: <1117124718.8747.41.camel@localhost.localdomain>

On Thu, 2005-05-26 at 12:10 -0400, Laran Evans wrote:
> Has any work been done to enable process group communication similar to 
> what Spread (spread.org), Ensemble, Horus, Isis, Eternal etc. offer?

I've built a reliable multicast (1->N ordered reliable message delivery,
NACK-based, with congestion control) system for work using Twisted and
the Fusion C++ Twisted bindings (http://itamarst.org/software/), but it
is not open source.

-- 
Itamar Shtull-Trauring <itamar at itamarst.org>
http://itamarst.org




From lc278 at cornell.edu  Thu May 26 10:34:56 2005
From: lc278 at cornell.edu (Laran Evans)
Date: Thu, 26 May 2005 12:34:56 -0400
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <1117124718.8747.41.camel@localhost.localdomain>
References: <4295F4DE.8020403@cornell.edu>
	<1117124718.8747.41.camel@localhost.localdomain>
Message-ID: <4295FAB0.9000608@cornell.edu>

Would there be any value to developing such a system? Have you found 
what you built for work valuable?

Itamar Shtull-Trauring wrote:
> On Thu, 2005-05-26 at 12:10 -0400, Laran Evans wrote:
> 
>>Has any work been done to enable process group communication similar to 
>>what Spread (spread.org), Ensemble, Horus, Isis, Eternal etc. offer?
> 
> 
> I've built a reliable multicast (1->N ordered reliable message delivery,
> NACK-based, with congestion control) system for work using Twisted and
> the Fusion C++ Twisted bindings (http://itamarst.org/software/), but it
> is not open source.
> 




From mike at mkp.ca  Thu May 26 11:34:57 2005
From: mike at mkp.ca (Mike Pelletier)
Date: Thu, 26 May 2005 13:34:57 -0400
Subject: [Twisted-Python] adbapi and pymssql
Message-ID: <200505261334.58599.mike@mkp.ca>

I am attempting to use pymssql in an new Twisted app I am developing for a 
client (so please don't ask for a lot of detail).  pymssql claims to 
implement "most" of ADBAPI 2.0 and it's not on the list of known supported 
back ends, so I realize I'm pressing my luck a bit here.

Bare pymssql seemed to work well, so I pressed on and attempted to use it with 
adbapi.  Here is what I am using for testing:

from twisted.internet import reactor
from twisted.enterprise import adbapi
from agent.db import makeDbpool

def printResultAndDie(*result):
    print "result:", result
    reactor.stop()

def printErrorAndDie(error):
    error.printTraceback()
    reactor.stop()

import sys
dbpool = makeDbpool()
query = " ".join(sys.argv[1:])
print query
d = dbpool.runQuery(query)
d.addCallbacks(printResultAndDie, printErrorAndDie)
reactor.run()

This reports an error, though it appears on the server that the transaction 
was completely successful.  The exception is thrown by adbapi.py:310, 
"self._rollback(trans)".  This line is itself in an exception handler, and it 
is handling an exception thrown by line 306, "trans._connection.commit()".

A little further testing suggested to me that there is nothing obviously wrong 
with pymssql's commit or rollback features.  The problem seems to be line 
305: "trans.close()".  I guess pymssql doesn't support commits and rollbacks 
after that, which seems almost reasonable.  (Mind, I am in much deeper than I 
have any actual understanding.)

I have locally modified _runinteraction.  I would *really* appreciate it if 
someone took a look at my changes.  I don't understand why close() is 
supposed to be called before commit() or rollback(), so maybe this is a 
completely wrongheaded move on my part.  Here is my version:

    def _runInteraction(self, interaction, *args, **kw):
        trans = Transaction(self)
        try:
            try:
                result = interaction(trans, *args, **kw)
                trans._connection.commit()
            except:
                self._rollback(trans)
                raise
        finally:
            trans.close()
        return result

And for comparison, the original:

    def _runInteraction(self, interaction, *args, **kw):
        trans = Transaction(self)
        try:
            result = interaction(trans, *args, **kw)
            trans.close()
            trans._connection.commit()
            return result
        except:
            self._rollback(trans)
            raise

Thanks in advance!

Mike.



From itamar at itamarst.org  Thu May 26 13:48:51 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 26 May 2005 15:48:51 -0400
Subject: [Twisted-Python] adbapi and pymssql
In-Reply-To: <200505261334.58599.mike@mkp.ca>
References: <200505261334.58599.mike@mkp.ca>
Message-ID: <1117136932.12130.1.camel@localhost.localdomain>

On Thu, 2005-05-26 at 13:34 -0400, Mike Pelletier wrote:

> I have locally modified _runinteraction.  I would *really* appreciate it if 
> someone took a look at my changes.  I don't understand why close() is 
> supposed to be called before commit() or rollback(), so maybe this is a 
> completely wrongheaded move on my part.  Here is my version:

Could you submit a patch with bug description
http://twistedmatrix.com/bugs/? Thanks.




From incoming at pronet-romania.com  Thu May 26 14:31:17 2005
From: incoming at pronet-romania.com (Tibi Dondera)
Date: Thu, 26 May 2005 22:31:17 +0200
Subject: [Twisted-Python] Chat by html application
In-Reply-To: <1117136932.12130.1.camel@localhost.localdomain>
Message-ID: <008f01c56231$df2412d0$f300a8c0@mobile>

Hello all,

I'm trying to develop a chat application through a browser, using
twisted (if possible)
What I want to do:
 - a user logs in the website
 - he goes to the "chat page"
 - he has the "classic" chat interface (sent messages, list of online
users, "send a message" field). All of these are simple "divs"
 - when he sends a message, a post with the message is submitted to the
server, and registered in a temporary database table (or in memory, is
there some "temporary" memory that I can use in twisted for this purpose
?)
 - for refreshing the chat area, there is an open HTTPRequest in the
background. Twisted will do the following:
     - accept the HTTPrequest connection
     - keep it alive (i.e. do not send the answer, but maybe send some
empty chars to force the browser to keep the connection open)
     - when a new message (from the other users) is available, send it
to the user and close the connection.
 - in the user's browser, when the connection is closed (either with a
message, or after a certain timeout, that cannot be avoided anyway), a
new one will be opened, until the user quits the chat.

Questions:
- Is this a plausible solution ?
- Has this already been implemented (or at least partly) ?
- Can this actually be done with twisted ?
- Can I develop this on Windows ? (production will be on linux, but
still, I prefer developing local, and currently on windows)
- Can you give me any pointers to some existing code, or where to start
? (maybe jabber for twisted ?)
- How will a twisted http server coexist with my existing apache server
on the 80 port ?
- Must I subscribe to the twisted-http mailing list instead and ask this
question there ?

Thanks for any help.

Tibi Dondera





From pradu at pradu.it  Thu May 26 14:34:55 2005
From: pradu at pradu.it (Alessandro Praduroux)
Date: Thu, 26 May 2005 22:34:55 +0200
Subject: [Twisted-Python] adbapi and pymssql
In-Reply-To: <200505261334.58599.mike@mkp.ca>
References: <200505261334.58599.mike@mkp.ca>
Message-ID: <200505262234.55318.pradu@pradu.it>

Nothing to do with your problem here, but I just want to report my experience 
interacting with MSSQL.

I have a small job scheduling application written with twisted + nevow for one 
of my customer and the database is MSSQL 2000. I am using the sybase module 
built against freetds with a very small patch to fix a rollback/commit issue, 
and it's working without a problem on production servers using adbapi since a 
year or so.

http://www.object-craft.com.au/projects/sybase/

just my 0.02 $

Pradu

Alle 19:34, giovedì 26 maggio 2005, Mike Pelletier ha scritto:
> I am attempting to use pymssql in an new Twisted app I am developing for a
> client (so please don't ask for a lot of detail).  pymssql claims to
> implement "most" of ADBAPI 2.0 and it's not on the list of known supported
> back ends, so I realize I'm pressing my luck a bit here.
>
> Thanks in advance!
>
> Mike.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
Linux developer & sysadmin
http://www.pradu.it
pradu at pradu.it



From jason.mobarak at gmail.com  Thu May 26 14:39:39 2005
From: jason.mobarak at gmail.com (Jason Mobarak)
Date: Thu, 26 May 2005 14:39:39 -0600
Subject: [Twisted-Python] Chat by html application
In-Reply-To: <008f01c56231$df2412d0$f300a8c0@mobile>
References: <1117136932.12130.1.camel@localhost.localdomain>
	<008f01c56231$df2412d0$f300a8c0@mobile>
Message-ID: <b194c9190505261339679a95ab@mail.gmail.com>

Use Nevow... see the Chatola example, it already does some of this.

http://nevow.org/
http://divmod.org/users/wiki.twistd/nevow/moin.cgi
http://divmod.org/projects/nevow

On 5/26/05, Tibi Dondera <incoming at pronet-romania.com> wrote:
> Hello all,
> 
> I'm trying to develop a chat application through a browser, using
> twisted (if possible)
> What I want to do:
>  - a user logs in the website
>  - he goes to the "chat page"
>  - he has the "classic" chat interface (sent messages, list of online
> users, "send a message" field). All of these are simple "divs"
>  - when he sends a message, a post with the message is submitted to the
> server, and registered in a temporary database table (or in memory, is
> there some "temporary" memory that I can use in twisted for this purpose
> ?)
>  - for refreshing the chat area, there is an open HTTPRequest in the
> background. Twisted will do the following:
>      - accept the HTTPrequest connection
>      - keep it alive (i.e. do not send the answer, but maybe send some
> empty chars to force the browser to keep the connection open)
>      - when a new message (from the other users) is available, send it
> to the user and close the connection.
>  - in the user's browser, when the connection is closed (either with a
> message, or after a certain timeout, that cannot be avoided anyway), a
> new one will be opened, until the user quits the chat.
> 
> Questions:
> - Is this a plausible solution ?
> - Has this already been implemented (or at least partly) ?
> - Can this actually be done with twisted ?
> - Can I develop this on Windows ? (production will be on linux, but
> still, I prefer developing local, and currently on windows)
> - Can you give me any pointers to some existing code, or where to start
> ? (maybe jabber for twisted ?)
> - How will a twisted http server coexist with my existing apache server
> on the 80 port ?
> - Must I subscribe to the twisted-http mailing list instead and ask this
> question there ?
> 
> Thanks for any help.
> 
> Tibi Dondera
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From jason.mobarak at gmail.com  Thu May 26 14:40:28 2005
From: jason.mobarak at gmail.com (Jason Mobarak)
Date: Thu, 26 May 2005 14:40:28 -0600
Subject: [Twisted-Python] Chat by html application
In-Reply-To: <b194c9190505261339679a95ab@mail.gmail.com>
References: <1117136932.12130.1.camel@localhost.localdomain>
	<008f01c56231$df2412d0$f300a8c0@mobile>
	<b194c9190505261339679a95ab@mail.gmail.com>
Message-ID: <b194c919050526134056ba0031@mail.gmail.com>

...and your nevow related questions should be directed at the
twisted-web mailing list.

On 5/26/05, Jason Mobarak <jason.mobarak at gmail.com> wrote:
> Use Nevow... see the Chatola example, it already does some of this.
> 
> http://nevow.org/
> http://divmod.org/users/wiki.twistd/nevow/moin.cgi
> http://divmod.org/projects/nevow
> 
> On 5/26/05, Tibi Dondera <incoming at pronet-romania.com> wrote:
> > Hello all,
> >
> > I'm trying to develop a chat application through a browser, using
> > twisted (if possible)
> > What I want to do:
> >  - a user logs in the website
> >  - he goes to the "chat page"
> >  - he has the "classic" chat interface (sent messages, list of online
> > users, "send a message" field). All of these are simple "divs"
> >  - when he sends a message, a post with the message is submitted to the
> > server, and registered in a temporary database table (or in memory, is
> > there some "temporary" memory that I can use in twisted for this purpose
> > ?)
> >  - for refreshing the chat area, there is an open HTTPRequest in the
> > background. Twisted will do the following:
> >      - accept the HTTPrequest connection
> >      - keep it alive (i.e. do not send the answer, but maybe send some
> > empty chars to force the browser to keep the connection open)
> >      - when a new message (from the other users) is available, send it
> > to the user and close the connection.
> >  - in the user's browser, when the connection is closed (either with a
> > message, or after a certain timeout, that cannot be avoided anyway), a
> > new one will be opened, until the user quits the chat.
> >
> > Questions:
> > - Is this a plausible solution ?
> > - Has this already been implemented (or at least partly) ?
> > - Can this actually be done with twisted ?
> > - Can I develop this on Windows ? (production will be on linux, but
> > still, I prefer developing local, and currently on windows)
> > - Can you give me any pointers to some existing code, or where to start
> > ? (maybe jabber for twisted ?)
> > - How will a twisted http server coexist with my existing apache server
> > on the 80 port ?
> > - Must I subscribe to the twisted-http mailing list instead and ask this
> > question there ?
> >
> > Thanks for any help.
> >
> > Tibi Dondera
> >
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
>



From ian at ianduggan.net  Thu May 26 14:52:06 2005
From: ian at ianduggan.net (Ian Duggan)
Date: Thu, 26 May 2005 13:52:06 -0700
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <4295FAB0.9000608@cornell.edu>
References: <4295F4DE.8020403@cornell.edu>
	<1117124718.8747.41.camel@localhost.localdomain>
	<4295FAB0.9000608@cornell.edu>
Message-ID: <200505261352.06873.ian@ianduggan.net>


I'd be interested in something like this as well, mostly in regards to 
clustering various twisted servers I am working on.

--Ian


On Thursday 26 May 2005 09:34, Laran Evans wrote:
> Would there be any value to developing such a system? Have you found
> what you built for work valuable?
>
> Itamar Shtull-Trauring wrote:
> > On Thu, 2005-05-26 at 12:10 -0400, Laran Evans wrote:
> >>Has any work been done to enable process group communication similar to
> >>what Spread (spread.org), Ensemble, Horus, Isis, Eternal etc. offer?
> >
> > I've built a reliable multicast (1->N ordered reliable message delivery,
> > NACK-based, with congestion control) system for work using Twisted and
> > the Fusion C++ Twisted bindings (http://itamarst.org/software/), but it
> > is not open source.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From mike at mkp.ca  Thu May 26 14:53:35 2005
From: mike at mkp.ca (Mike Pelletier)
Date: Thu, 26 May 2005 16:53:35 -0400
Subject: [Twisted-Python] adbapi and pymssql
In-Reply-To: <200505262234.55318.pradu@pradu.it>
References: <200505261334.58599.mike@mkp.ca>
	<200505262234.55318.pradu@pradu.it>
Message-ID: <200505261653.37873.mike@mkp.ca>

On Thu May 26 2005 04:34 pm, you wrote:
> I have a small job scheduling application written with twisted + nevow for
> one of my customer and the database is MSSQL 2000. I am using the sybase
> module built against freetds with a very small patch to fix a
> rollback/commit issue, and it's working without a problem on production
> servers using adbapi since a year or so.

Thanks a TON!  I did not really even know I had an option to choose another 
database module, I thought pymssql would be my only option.  But, since 
pymssql seems to be just a thin layer on top of freetds, your solution is 
probably very relevant to my problem.

Could you go into more detail about the rollback/commit issue you encountered, 
and how you dealt with it?  I expect the problem probably isn't really with 
Twisted at all.  My patch was developed through blind thrashing.

Thanks!

Mike.



From darran.edmundson at anu.edu.au  Thu May 26 18:48:19 2005
From: darran.edmundson at anu.edu.au (Darran Edmundson)
Date: Fri, 27 May 2005 10:48:19 +1000
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <4295FAB0.9000608@cornell.edu>
References: <4295F4DE.8020403@cornell.edu>
	<1117124718.8747.41.camel@localhost.localdomain>
	<4295FAB0.9000608@cornell.edu>
Message-ID: <7A9CC12E-E88B-4788-A3BE-13C961B35B49@anu.edu.au>


On 27/05/2005, at 2:34 AM, Laran Evans wrote:

> Would there be any value to developing such a system? Have you  
> found what you built for work valuable?
>
> Itamar Shtull-Trauring wrote:
>
>> I've built a reliable multicast (1->N ordered reliable message  
>> delivery,
>> NACK-based, with congestion control) system for work using Twisted  
>> and
>> the Fusion C++ Twisted bindings (http://itamarst.org/software/),  
>> but it
>> is not open source.
>>
>

Useful?  Wow, this is *exactly* what we are after for use within the  
Access Grid (www.accessgrid.org).
This community has invested a lot of time in getting multicast  
connectivity between the 200+ sites
currently involved.  Ie., we've got the network backbone.  At the  
moment we are only using multicast
for the RTP media transport (the old mbone tools vic and rat, the  
newer VideoPresence tool VP).  It would
be great though to have a framework reliable message delivery over  
multicast for some of the
lighter weight collaborative tools we are building.  At the moment,  
AccessGrid uses a centralized
VenueServer and TCP for coordinating sessions.

Cheers,
darran.

Darran Edmundson (darran.edmundson at anu.edu.au)
ANU Supercomputer Facility Vizlab
Australian National University, Canberra, ACT 2600
tel: +61 2 6125-0517  fax: +61 2 6125-5088





From lc278 at cornell.edu  Thu May 26 19:52:20 2005
From: lc278 at cornell.edu (Laran Evans)
Date: Thu, 26 May 2005 21:52:20 -0400
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <7A9CC12E-E88B-4788-A3BE-13C961B35B49@anu.edu.au>
References: <4295F4DE.8020403@cornell.edu>	<1117124718.8747.41.camel@localhost.localdomain>	<4295FAB0.9000608@cornell.edu>
	<7A9CC12E-E88B-4788-A3BE-13C961B35B49@anu.edu.au>
Message-ID: <42967D54.4010503@cornell.edu>

Hmmm. Well, it sounds like there's a bit of interest here. I'm game for 
starting a discussion about what such a toolkit might look like if 
anyone else is interested.

There are plenty of toolkits that do this sort of thing. But I'm 
interested in building one from scratch. And it seems like there's 
already a lot to Twister to plug into.

If any of the Twister admins have any suggestions, objections or 
otherwise they would be appreciated. If you're not interested in 
building something like this into Twister it can always be done in parallel.

- Laran

Darran Edmundson wrote:
> 
> On 27/05/2005, at 2:34 AM, Laran Evans wrote:
> 
>> Would there be any value to developing such a system? Have you  found 
>> what you built for work valuable?
>>
>> Itamar Shtull-Trauring wrote:
>>
>>> I've built a reliable multicast (1->N ordered reliable message  
>>> delivery,
>>> NACK-based, with congestion control) system for work using Twisted  and
>>> the Fusion C++ Twisted bindings (http://itamarst.org/software/),  but it
>>> is not open source.
>>>
>>
> 
> Useful?  Wow, this is *exactly* what we are after for use within the  
> Access Grid (www.accessgrid.org).
> This community has invested a lot of time in getting multicast  
> connectivity between the 200+ sites
> currently involved.  Ie., we've got the network backbone.  At the  
> moment we are only using multicast
> for the RTP media transport (the old mbone tools vic and rat, the  newer 
> VideoPresence tool VP).  It would
> be great though to have a framework reliable message delivery over  
> multicast for some of the
> lighter weight collaborative tools we are building.  At the moment,  
> AccessGrid uses a centralized
> VenueServer and TCP for coordinating sessions.
> 
> Cheers,
> darran.
> 
> Darran Edmundson (darran.edmundson at anu.edu.au)
> ANU Supercomputer Facility Vizlab
> Australian National University, Canberra, ACT 2600
> tel: +61 2 6125-0517  fax: +61 2 6125-5088
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
- Laran Evans




From darran.edmundson at anu.edu.au  Thu May 26 20:07:41 2005
From: darran.edmundson at anu.edu.au (Darran Edmundson)
Date: Fri, 27 May 2005 12:07:41 +1000
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <42967D54.4010503@cornell.edu>
References: <4295F4DE.8020403@cornell.edu>	<1117124718.8747.41.camel@localhost.localdomain>	<4295FAB0.9000608@cornell.edu>
	<7A9CC12E-E88B-4788-A3BE-13C961B35B49@anu.edu.au>
	<42967D54.4010503@cornell.edu>
Message-ID: <E5FA10CE-4D31-4DBA-AAEC-E98959878213@anu.edu.au>


On 27/05/2005, at 11:52 AM, Laran Evans wrote:

> Hmmm. Well, it sounds like there's a bit of interest here. I'm game  
> for starting a discussion about what such a toolkit might look like  
> if anyone else is interested.
>
> There are plenty of toolkits that do this sort of thing. But I'm  
> interested in building one from scratch. And it seems like there's  
> already a lot to Twister to plug into.
>
> If any of the Twister admins have any suggestions, objections or  
> otherwise they would be appreciated. If you're not interested in  
> building something like this into Twister it can always be done in  
> parallel.
>
>

Our guys here at the ANU Supercomputer Facility are using "MCLv3: an  
Open Source
Implementation of the ALC and NORM Reliable Multicast Protocols":
      http://www.inrialpes.fr/planete/people/roca/mcl/ldpc_infos.html
in their software for replication of kernel images out to the 1600  
processors
on our new SGI Altix system.  They are really happy with the library.

On my personal to-do list is creating python bindings for MCLv3
which I then planned to use with twisted for some Access Grid work ...

Cheers,
darran.

Darran Edmundson (darran.edmundson at anu.edu.au)
ANU Supercomputer Facility Vizlab
Australian National University, Canberra, ACT 2600
tel: +61 2 6125-0517  fax: +61 2 6125-5088





From lc278 at cornell.edu  Thu May 26 20:46:45 2005
From: lc278 at cornell.edu (Laran Evans)
Date: Thu, 26 May 2005 22:46:45 -0400
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <E5FA10CE-4D31-4DBA-AAEC-E98959878213@anu.edu.au>
References: <4295F4DE.8020403@cornell.edu>	<1117124718.8747.41.camel@localhost.localdomain>	<4295FAB0.9000608@cornell.edu>	<7A9CC12E-E88B-4788-A3BE-13C961B35B49@anu.edu.au>	<42967D54.4010503@cornell.edu>
	<E5FA10CE-4D31-4DBA-AAEC-E98959878213@anu.edu.au>
Message-ID: <42968A15.1090200@cornell.edu>

Is MCLv3 also being used for the accessgrid work?

I'm curious. Why was MCLv3 chosen?

- Laran

Darran Edmundson wrote:
> 
> On 27/05/2005, at 11:52 AM, Laran Evans wrote:
> 
>> Hmmm. Well, it sounds like there's a bit of interest here. I'm game  
>> for starting a discussion about what such a toolkit might look like  
>> if anyone else is interested.
>>
>> There are plenty of toolkits that do this sort of thing. But I'm  
>> interested in building one from scratch. And it seems like there's  
>> already a lot to Twister to plug into.
>>
>> If any of the Twister admins have any suggestions, objections or  
>> otherwise they would be appreciated. If you're not interested in  
>> building something like this into Twister it can always be done in  
>> parallel.
>>
>>
> 
> Our guys here at the ANU Supercomputer Facility are using "MCLv3: an  
> Open Source
> Implementation of the ALC and NORM Reliable Multicast Protocols":
>      http://www.inrialpes.fr/planete/people/roca/mcl/ldpc_infos.html
> in their software for replication of kernel images out to the 1600  
> processors
> on our new SGI Altix system.  They are really happy with the library.
> 
> On my personal to-do list is creating python bindings for MCLv3
> which I then planned to use with twisted for some Access Grid work ...
> 
> Cheers,
> darran.
> 
> Darran Edmundson (darran.edmundson at anu.edu.au)
> ANU Supercomputer Facility Vizlab
> Australian National University, Canberra, ACT 2600
> tel: +61 2 6125-0517  fax: +61 2 6125-5088
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
- Laran Evans




From darran.edmundson at anu.edu.au  Thu May 26 21:48:00 2005
From: darran.edmundson at anu.edu.au (Darran Edmundson)
Date: Fri, 27 May 2005 13:48:00 +1000
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <42968A15.1090200@cornell.edu>
References: <4295F4DE.8020403@cornell.edu>	<1117124718.8747.41.camel@localhost.localdomain>	<4295FAB0.9000608@cornell.edu>	<7A9CC12E-E88B-4788-A3BE-13C961B35B49@anu.edu.au>	<42967D54.4010503@cornell.edu>
	<E5FA10CE-4D31-4DBA-AAEC-E98959878213@anu.edu.au>
	<42968A15.1090200@cornell.edu>
Message-ID: <7F93DBED-ABA4-4D72-8906-05DCE5DA3F6B@anu.edu.au>


On 27/05/2005, at 12:46 PM, Laran Evans wrote:

> Is MCLv3 also being used for the accessgrid work?
>

No, that's what I want to implement.  In the current model,
the VenueServer acts as a common data store.  Fine for
little things but obviously doesn't allow impromptu "ah,
here's a 100Mb dataset for everyone to preview".


> I'm curious. Why was MCLv3 chosen?

By virtue of being the first library they found that
fulfilled their needs ;-)

Our guys have a 400Mb compressed node image that
the want to distribute.  It is transmitted in 1k packets (FEC
algorithm takes a list of pointers so no need to actually break
the data up), each 32Mb chunk being verified against a SHA1
hash.  Note, there is *no* feedback from the clients, we just
set a duplication factor of 1.5, a number empirically determined
to give reliable transfer on the local network.

Cheers,
Darran.



From pradu at pradu.it  Fri May 27 01:09:21 2005
From: pradu at pradu.it (Alessandro Praduroux)
Date: Fri, 27 May 2005 09:09:21 +0200
Subject: [Twisted-Python] adbapi and pymssql
In-Reply-To: <200505261653.37873.mike@mkp.ca>
References: <200505261334.58599.mike@mkp.ca>
	<200505262234.55318.pradu@pradu.it>
	<200505261653.37873.mike@mkp.ca>
Message-ID: <200505270909.21630.pradu@pradu.it>

The problem as I recall was related to the fact that a commit() not coupled 
with a begin() threw an exception, while all other DBAPI implementations were 
resilient to this kind of problem. So I use a slightly modified version of 
Sybase (that I'll send to you separately to avoid traffic on the list, if 
anyone else is interested I'll post it here too, I lost the original patch 
but I have the full package and I'm too lazy to recreate the patch).

A little disclaimer: freetds and thus Sybase.py do not yet implement query 
parameters, if you try using them you will get an error until the freetds 
people figure out how to implement this. I don't know if the mssql module 
implement a workaround for this, Sybase.py doesn't (but it should be fairly 
easy to do it in a compatible way).

HTH

Alle 22:53, giovedì 26 maggio 2005, Mike Pelletier ha scritto:
> On Thu May 26 2005 04:34 pm, you wrote:
> > I have a small job scheduling application written with twisted + nevow
> > for one of my customer and the database is MSSQL 2000. I am using the
> > sybase module built against freetds with a very small patch to fix a
> > rollback/commit issue, and it's working without a problem on production
> > servers using adbapi since a year or so.
>
> Thanks a TON!  I did not really even know I had an option to choose another
> database module, I thought pymssql would be my only option.  But, since
> pymssql seems to be just a thin layer on top of freetds, your solution is
> probably very relevant to my problem.
>
> Could you go into more detail about the rollback/commit issue you
> encountered, and how you dealt with it?  I expect the problem probably
> isn't really with Twisted at all.  My patch was developed through blind
> thrashing.
>
> Thanks!
>
> Mike.

-- 
Linux developer & sysadmin
http://www.pradu.it
pradu at pradu.it



From nkeric at gmail.com  Fri May 27 02:17:01 2005
From: nkeric at gmail.com (Eric Hsu)
Date: Fri, 27 May 2005 16:17:01 +0800
Subject: [Twisted-Python] How to create a new service and listen on a new
	port?
In-Reply-To: <43c0d2b5050523035061035df1@mail.gmail.com>
References: <43c0d2b5050522224949079041@mail.gmail.com>
	<20050523094143.559.1531852400.divmod.quotient.7609@ohm>
	<43c0d2b5050523035061035df1@mail.gmail.com>
Message-ID: <43c0d2b5050527011744ad7956@mail.gmail.com>

Now I've figured out the solution!
Just remove the "reactor.run()" as Jp suggestion!

Here is the sample code which fulfills my requirements:

class AClass(DatagramProtocol):
    def datagramReceived(self, data, addr):
        # do something...
        anotherService1 = reactor.listenUDP(port1, AnotherService())
        anotherService2 = reactor.listenUDP(port2, AnotherService())
        # ...
        anotherServiceN = reactor.listenUDP(portN, AnotherService())

        # if we want to stop one of the AnotherServiceS, just
        anotherServiceX.stopListening()
        
class AnotherService(DatagramProtocol):
     def datagramReceived(self, data, addr):
        # blah blah blah...

Thank you all guys!


2005/5/23, Eric Hsu <nkeric at gmail.com>:
> 2005/5/23, Jp Calderone <exarkun at divmod.com>:
> >   Since nothing is likely to call datagramReceived unless the reactor is running, and calling reactor.run() while the reactor is running is a terribly broken thing to do, the above code is likely mistaken in calling reactor.run().
> >
> >   I bet shutdown behavioor will become much nicer if you remove the call to reactor.run() here, and in any other similar places.
> >
> >   twistd will start and stop the reactor for you.
> >
> > Jp
>



From sc at linux.it  Fri May 27 10:07:26 2005
From: sc at linux.it (Stefano Canepa)
Date: Fri, 27 May 2005 18:07:26 +0200
Subject: [Twisted-Python] Some questions from a newby
Message-ID: <1117210046.11739.8.camel@localhost.localdomain>

Dear all,
	I am new to twisted and have some questions I cannot find answer in the
twisted documentation or using google.
1) in writing a server, what is better to write a twisted application to
be run using twistd -y or a python app using a reactor?
2) how do I use configuration without using a tac?

TIA
Stefano

-- 
Stefano Canepa - email: sc at linux.it - www: http://www.stefanocanepa.it
Three great virtues of a programmer: laziness, impatience and hubris.
Le tre grandi virtù di un programmatore: pigrizia, impazienza e arroganza.
                                                              (Larry Wall)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20050527/43983ca5/attachment.sig>

From Sl_Church at sbcglobal.net  Fri May 27 10:20:26 2005
From: Sl_Church at sbcglobal.net (Shawn Church)
Date: Fri, 27 May 2005 09:20:26 -0700
Subject: [Twisted-Python] threadedselectreactor
In-Reply-To: <4295C138.8040708@unipex.it>
References: <4295C138.8040708@unipex.it>
Message-ID: <429748CA.5050102@sbcglobal.net>

I got it by doing an svn co on the current development trunk
(instructions for doing this are at
http://twistedmatrix.com/developers/cvs) and then I copied the
threadedselectreactor.py file to the proper location in site-packages. 
You can also use web svn and just download the file by following this
link and selecting the revision you wish to download:

   
http://svn.twistedmatrix.com/cvs/trunk/twisted/internet/threadedselectreactor.py


Hope that helps.  BTW twistedselectreactor.py seems to work great for
what I need (although I am new to twisted and do not have much basis for
comparison.)


regards,


Shawn Church

Michele Petrazzo wrote:

> I found some messages that explain the new threadedselectreactor
> function, but on the last package 2.0.1 I don't found that file. Where
> can I download this new function/file?
> And after, is this a stable or only an unstable version?
>
> Thanks,
> Michele
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From Harald.Nyman at astrazeneca.com  Fri May 27 10:45:23 2005
From: Harald.Nyman at astrazeneca.com (Harald.Nyman at astrazeneca.com)
Date: Fri, 27 May 2005 18:45:23 +0200
Subject: [Twisted-Python] Chat by html application
Message-ID: <9F028CC77827D611ACEE0002A5F12F0708551629@semldsntmsx208.seml.astrazeneca.net>

Hi Tibi,

Nevow is probably the best. But there are other ways too. I've been
doing this for several years with a Tomcat servlet, and then there was
no Nevow. After converting to Pythonism, I switched to a Twisted server.
Haven't learned Nevow yet, despite good intentions..., but I think this
may be similar. It's essentially doing all of "What I want to do:"
below, only I'm not using it mainly for chat, but for distributing
HTML or Javascript, for viewing things together during a phone meeting.

 - the browser's background HTTPRequest sits in a threaded applet
 - someone switches on "collaboration" in his browser - the others see
   his name being added to the "virtual meeting"
 - one user drags a pointer (image) in his browser -> the pointer moves
   in the other browsers

See also some A's to your Q's, below.
Harald


On 5/26/05, Tibi Dondera <incoming at pronet-romania.com> wrote:
> Hello all,
> 
> I'm trying to develop a chat application through a browser, using
> twisted (if possible)
> What I want to do:
>  - a user logs in the website
>  - he goes to the "chat page"
>  - he has the "classic" chat interface (sent messages, list of online
> users, "send a message" field). All of these are simple "divs"
>  - when he sends a message, a post with the message is submitted to the
> server, and registered in a temporary database table (or in memory, is
> there some "temporary" memory that I can use in twisted for this purpose
> ?)
>  - for refreshing the chat area, there is an open HTTPRequest in the
> background. Twisted will do the following:
>      - accept the HTTPrequest connection
>      - keep it alive (i.e. do not send the answer, but maybe send some
> empty chars to force the browser to keep the connection open)
>      - when a new message (from the other users) is available, send it
> to the user and close the connection.
>  - in the user's browser, when the connection is closed (either with a
> message, or after a certain timeout, that cannot be avoided anyway), a
> new one will be opened, until the user quits the chat.
> 
> Questions:
> - Is this a plausible solution ?

Yes, IMHO.

> - Has this already been implemented (or at least partly) ?
> - Can this actually be done with twisted ?

Yes.

> - Can I develop this on Windows ? (production will be on linux, but
> still, I prefer developing local, and currently on windows)

Hmm.. I develop "on Windows", but with a VMWare Linux server on the
same laptop. Works great, but costs a bit. Should work with the server
on Windows, too(?)

> - Can you give me any pointers to some existing code, or where to start
> ? (maybe jabber for twisted ?)

Here's a few fragments from my server code -

class Servlet(resource.Resource):
    ...
# Send queued output to browser's background listener
    def render_GET(self, request):
        self.request = request
        session = request.getSession()
    ...
        anything = 0
        while not session.outqueue.empty():
            x = session.outqueue.get()
            request.transport.write(x)
            anything = 1
        if anything:
            request.finish()
        return server.NOT_DONE_YET
 
    def render_POST(self, request):  
        session = request.getSession()
# Browser sends a dictionary as text
        msgDict = eval(request.args['message'][0])
        request.finish()
        
        message = msgDict['message']
        mSplit = message.split()
        ... # Do work here
        return server.NOT_DONE_YET

> - How will a twisted http server coexist with my existing apache server
> on the 80 port ?

Not well, I guess. I use a different port for the Twisted server.

> - Must I subscribe to the twisted-http mailing list instead and ask this
> question there ?

Twisted-web would be better, yes. I'm posting this one there too, with all
due apologies...

> 
> Thanks for any help.
> 
> Tibi Dondera



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From michele.petrazzo at unipex.it  Fri May 27 11:30:31 2005
From: michele.petrazzo at unipex.it (Michele Petrazzo)
Date: Fri, 27 May 2005 19:30:31 +0200
Subject: [Twisted-Python] threadedselectreactor
In-Reply-To: <429748CA.5050102@sbcglobal.net>
References: <4295C138.8040708@unipex.it> <429748CA.5050102@sbcglobal.net>
Message-ID: <42975937.4070504@unipex.it>

Shawn Church wrote:
> You can also use web svn and just download the file by following this
>  link and selecting the revision you wish to download:
> 
> http://svn.twistedmatrix.com/cvs/trunk/twisted/internet/threadedselectreactor.py
> 
> 

Thanks!
I had downloaded this file, but I not didn't find any documentation for
use it. I try a threadedselectreactor.install(), but twisted say me that
there is another reactror installed.
Can you create a simple example?

Thanks,
Michele





From ian at ianduggan.net  Fri May 27 11:32:27 2005
From: ian at ianduggan.net (Ian Duggan)
Date: Fri, 27 May 2005 10:32:27 -0700
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <7F93DBED-ABA4-4D72-8906-05DCE5DA3F6B@anu.edu.au>
References: <4295F4DE.8020403@cornell.edu> <42968A15.1090200@cornell.edu>
	<7F93DBED-ABA4-4D72-8906-05DCE5DA3F6B@anu.edu.au>
Message-ID: <200505271032.27874.ian@ianduggan.net>


What would be the steps involved in integrating a few of the various protocols 
involved here. Is there a chance of having a common API, or do the "large 
blocks on the internet" variants need something different than something 
optimized for "small blocks on the lan". 

I don't have a really good notion of all these things, but I'm considering 
trying to integrate the spread.org stuff into twisted to achieve clustering 
of servers into a logical virtual server, for redundancy. There might be a 
simpler way to do the same thing. I'm still exploring.

Does anyone know of an example API for integrating several of the protocols 
into the same framework? How do these types of protocols break down into 
categories? 

--Ian




From lc278 at cornell.edu  Fri May 27 11:53:11 2005
From: lc278 at cornell.edu (Laran Evans)
Date: Fri, 27 May 2005 13:53:11 -0400
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <200505271032.27874.ian@ianduggan.net>
References: <4295F4DE.8020403@cornell.edu>
	<42968A15.1090200@cornell.edu>	<7F93DBED-ABA4-4D72-8906-05DCE5DA3F6B@anu.edu.au>
	<200505271032.27874.ian@ianduggan.net>
Message-ID: <42975E87.5000007@cornell.edu>

Well, there are a couple of things to consider. Here are a few.

1/. How many processes in the group. Most protocols work well in groups 
up to a few hundred. When you get over a thousand or so things start to 
get complicated. And above that there are protocols which use epidemic 
techniques, so-called "gossip" or "rumor"-based protocols. Bimodal 
multicast is one such protocol.

2/. Network environment. Protocols that run exclusively on a LAN can 
make certain assumptions that WAN-inclusive protocols can't. So, some 
protocols shift things around a bit, intentionally slowing things down 
to accomodate the WAN nodes. So the whole system runs some factor 
slower, but reliability is maintained.

Beyond that there are all sorts of techniques, each of which makes 
certain assumptions. So, which protocol to utilize depends on what type 
of environment you want to create for applications.

Spread's definitely a solid choice. JGroups, Ensemble, Horus, Isis, 
Totem, Transis and Eternal are all top-notch as well, each of which 
provides slightly different properties. There has been some talk lately 
on the JGroups mailing list about adding python extensions to JGroups. 
JGroups is what's used for clustering in Tomcat and JBoss I believe. 
Though I could be wrong about that.

There's one design in which I'm quite interested which was initially 
proposed for an international stock exchange. You can read about that 
protocol here:
http://portal.acm.org/citation.cfm?doid=380749.380771.
This particular design is specifically designed to work on the Internet. 
  And is based on TRMP.

So, I hope this helps.

- Laran

Ian Duggan wrote:
> What would be the steps involved in integrating a few of the various protocols 
> involved here. Is there a chance of having a common API, or do the "large 
> blocks on the internet" variants need something different than something 
> optimized for "small blocks on the lan". 
> 
> I don't have a really good notion of all these things, but I'm considering 
> trying to integrate the spread.org stuff into twisted to achieve clustering 
> of servers into a logical virtual server, for redundancy. There might be a 
> simpler way to do the same thing. I'm still exploring.
> 
> Does anyone know of an example API for integrating several of the protocols 
> into the same framework? How do these types of protocols break down into 
> categories? 
> 
> --Ian
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
- Laran Evans




From bob at redivi.com  Fri May 27 11:56:44 2005
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 27 May 2005 10:56:44 -0700
Subject: [Twisted-Python] threadedselectreactor
In-Reply-To: <42975937.4070504@unipex.it>
References: <4295C138.8040708@unipex.it> <429748CA.5050102@sbcglobal.net>
	<42975937.4070504@unipex.it>
Message-ID: <2A6126B2-AF8A-42E6-8944-2165B3311534@redivi.com>


On May 27, 2005, at 10:30 AM, Michele Petrazzo wrote:

> Shawn Church wrote:
>
>> You can also use web svn and just download the file by following this
>>  link and selecting the revision you wish to download:
>> http://svn.twistedmatrix.com/cvs/trunk/twisted/internet/ 
>> threadedselectreactor.py
>>
>
> Thanks!
> I had downloaded this file, but I not didn't find any documentation  
> for
> use it. I try a threadedselectreactor.install(), but twisted say me  
> that
> there is another reactror installed.
> Can you create a simple example?

http://svn.twistedmatrix.com/cvs/trunk/doc/core/examples/threadedselect/

-bob




From golux at comcast.net  Fri May 27 12:09:59 2005
From: golux at comcast.net (Stephen Waterbury)
Date: Fri, 27 May 2005 14:09:59 -0400
Subject: [Twisted-Python] Some questions from a newby
In-Reply-To: <1117210046.11739.8.camel@localhost.localdomain>
References: <1117210046.11739.8.camel@localhost.localdomain>
Message-ID: <42976277.6050701@comcast.net>

Stefano Canepa wrote:
> 1) in writing a server, what is better to write a twisted application to
> be run using twistd -y or a python app using a reactor?

Definitely the former.

> 2) how do I use configuration without using a tac?

I roll my own.  YMMV.

- Steve



From ross at sourcelabs.com  Fri May 27 12:35:46 2005
From: ross at sourcelabs.com (Ross Jekel)
Date: Fri, 27 May 2005 11:35:46 -0700
Subject: [Twisted-Python] xmlBlaster/twisted experience?
Message-ID: <1117218946.6801.7.camel@linux.site>

Has anyone out there used xmlBlaster with Twisted? They seem like a good
match. I'm considering taking the pyBlaster interface which basically
implements a standalone async threading xmlrpc client/server to handle
interfacing with xmlBlaster and rewriting it in twisted.

Before I do so, has anyone done this already? If not, I'll write what I
need and either try to get it in the xmlBlaster distribution and/or
distribute it here.

Any hints on the best way to do this would be appreciated.

Thanks,
Ross




From ian at ianduggan.net  Fri May 27 12:39:50 2005
From: ian at ianduggan.net (Ian Duggan)
Date: Fri, 27 May 2005 11:39:50 -0700
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <42975E87.5000007@cornell.edu>
References: <4295F4DE.8020403@cornell.edu>
	<200505271032.27874.ian@ianduggan.net>
	<42975E87.5000007@cornell.edu>
Message-ID: <200505271139.51008.ian@ianduggan.net>


> Well, there are a couple of things to consider. Here are a few.

Thanks, this is great.

> Spread's definitely a solid choice. JGroups, Ensemble, Horus, Isis,
> Totem, Transis and Eternal are all top-notch as well, each of which
> provides slightly different properties. There has been some talk lately
> on the JGroups mailing list about adding python extensions to JGroups.
> JGroups is what's used for clustering in Tomcat and JBoss I believe.
> Though I could be wrong about that.

I just took a peek at JGroups. It looks like their API includes a lot of 
switches you can tweak. Would that be a good starting point? It looks like 
it's used in some significant stuff.

http://www.jgroups.org/javagroupsnew/docs/success.html

Their overview page (http://www.jgroups.org/javagroupsnew/docs/overview.html) 
makes a decent case for their approach. I wonder if doing a mixin/layered 
approach to building protocols adds much overhead?

Transport protocols: UDP (IP Multicast), TCP, JMS
Fragmentation of large messages
Reliable unicast and multicast message transmission. Lost messages are 
retransmitted
Failure detection: crashed members are excluded from the membership
Ordering protocols: Atomic (all-or-none message delivery), Fifo, Causal, Total 
Order (sequencer or token based)
Membership
Encryption

As for the others, I would need to read more about them. Do you know of any 
sort of comparison matrix that includes these projects? Ensemble is work that 
happened after Horus, right? Does that means it's more complete/featureful 
and should be considered over Horus? Ie, has Horus added new things since 
they split?

--Ian



From catalin at dazoot.ro  Fri May 27 13:28:06 2005
From: catalin at dazoot.ro (Catalin Constantin)
Date: Fri, 27 May 2005 22:28:06 +0300
Subject: [Twisted-Python] xmlrpc deferred
Message-ID: <652481677.20050527222806@bounce-software.com>

Hi there,

I have the following xmlrpc method:

class FeederResource(xmlrpc.XMLRPC):
        def __init__(self):
                xmlrpc.XMLRPC.__init__(self)
                self.feeder=Feeder()
                
        def xmlrpc_getList(self, id):
                return self.feeder.get_urls(id)

The thing is that the self.feeder.get_urls takes too long to execute
and while the request is running all the others are blocked.
I want that while it computes the result the other XML RPC methods to
be available.

I wanted to use deferrals but i found no viable example.

Eg what i've tried to do:
        def xmlrpc_getList(self, id):
                log.debug("getList is here for id %s" % id)
                d = defer.Deferred()
                d.addCallback(self.feeder.get_urls)
                return d


My method feeder.get_urls is never called !

Where do i do wrong !

10x for your help !

-- 
Catalin Constantin
Dazoot Software
http://www.dazoot.ro




From Sl_Church at sbcglobal.net  Fri May 27 13:35:00 2005
From: Sl_Church at sbcglobal.net (Shawn Church)
Date: Fri, 27 May 2005 12:35:00 -0700
Subject: [Twisted-Python] threadedselectreactor
In-Reply-To: <42975937.4070504@unipex.it>
References: <4295C138.8040708@unipex.it> <429748CA.5050102@sbcglobal.net>
	<42975937.4070504@unipex.it>
Message-ID: <42977664.4000707@sbcglobal.net>



Michele Petrazzo wrote:

> I had downloaded this file, but I not didn't find any documentation for
> use it. I try a threadedselectreactor.install(), but twisted say me that
> there is another reactror installed.

Read the examples Bob referenced.  The examples are one reason why I
co'd the entire trunk.  Another reason is so if I need a specific fix
for any part of twisted I can just update my working copy and copy the
file(s) as needed.

For this specific problem you should check the ORDER of your import
statements.  They should be:

    from twisted.internet import threadedselectreactor
    threadedselectreactor.install()
    from twisted.internet import reactor

After your main module imports the above, subsequent modules should just
use "from twisted.internet import reactor"
if they need to call any reactor methods.  I could be wrong about this
but it seems to work for me.

Good luck :)


Shawn Church
http://SChurchComputers.com




From sc at linux.it  Fri May 27 13:35:57 2005
From: sc at linux.it (Stefano Canepa)
Date: Fri, 27 May 2005 21:35:57 +0200
Subject: [Twisted-Python] Some questions from a newby
In-Reply-To: <42976277.6050701@comcast.net>
References: <1117210046.11739.8.camel@localhost.localdomain>
	<42976277.6050701@comcast.net>
Message-ID: <1117222557.7538.0.camel@localhost.localdomain>

Il giorno ven, 27/05/2005 alle 14.09 -0400, Stephen Waterbury ha
scritto:
> Stefano Canepa wrote:
> > 1) in writing a server, what is better to write a twisted application to
> > be run using twistd -y or a python app using a reactor?
> 
> Definitely the former.
>
> > 2) how do I use configuration without using a tac?
> 
> I roll my own.  YMMV.
> 
> - Steve

Thanks for your answer.
Stefano

-- 
Stefano Canepa - email: sc at linux.it - www: http://www.stefanocanepa.it
Three great virtues of a programmer: laziness, impatience and hubris.
Le tre grandi virtù di un programmatore: pigrizia, impazienza e arroganza.
                                                              (Larry Wall)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20050527/2a27f62a/attachment.sig>

From itamar at itamarst.org  Fri May 27 13:47:11 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 27 May 2005 15:47:11 -0400
Subject: [Twisted-Python] xmlrpc deferred
In-Reply-To: <652481677.20050527222806@bounce-software.com>
References: <652481677.20050527222806@bounce-software.com>
Message-ID: <1117223231.8727.34.camel@localhost.localdomain>

On Fri, 2005-05-27 at 22:28 +0300, Catalin Constantin wrote:

> The thing is that the self.feeder.get_urls takes too long to execute
> and while the request is running all the others are blocked.
> I want that while it computes the result the other XML RPC methods to
> be available.
> 
> I wanted to use deferrals but i found no viable example.

Deferreds do not magically make a calculation not block. Once you have
made your calculation not block ("take a long time"), e.g. by splitting
it up into small processing chunks separated by reactor.callLater(0,),
Deferreds provide a way to easily get the "result" of a non-blocking
function.




From exarkun at divmod.com  Fri May 27 13:46:21 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 27 May 2005 19:46:21 GMT
Subject: [Twisted-Python] xmlrpc deferred
In-Reply-To: <652481677.20050527222806@bounce-software.com>
Message-ID: <20050527194848.559.1189256091.divmod.quotient.11293@ohm>

On Fri, 27 May 2005 22:28:06 +0300, Catalin Constantin <catalin at dazoot.ro> wrote:
>Hi there,
>
>I have the following xmlrpc method:
>
>class FeederResource(xmlrpc.XMLRPC):
>        def __init__(self):
>                xmlrpc.XMLRPC.__init__(self)
>                self.feeder=Feeder()
>
>        def xmlrpc_getList(self, id):
>                return self.feeder.get_urls(id)
>
>The thing is that the self.feeder.get_urls takes too long to execute
>and while the request is running all the others are blocked.
>I want that while it computes the result the other XML RPC methods to
>be available.

The only answer here is to make get_urls() take less time.

What is it doing?  Is it blocking on network I/O?  Querying a database?  Prompting for user input?   _It_ should be creating and returned a Deferred (and later calling it back with a result), most likely, since it is the long-running operation.

>
>I wanted to use deferrals but i found no viable example.
>
>Eg what i've tried to do:
>        def xmlrpc_getList(self, id):
>                log.debug("getList is here for id %s" % id)
>                d = defer.Deferred()
>                d.addCallback(self.feeder.get_urls)
>                return d

Deferred don't make things asynchronous, cooperative, or non-blocking.  They only make dealing with callbacks more convenient.  If you add a blocking function as the callback to a Deferred, it will block the reactor just as effectively as if you called it yourself (bacause all that happens inside the Deferred is that the function gets called).

>
>My method feeder.get_urls is never called !
>

In the above code, nothing ever "fires" the Deferred - calls .callback() on it - so, never having a result, it never bothers to invoke any of its callbacks.  Deferred just hook results up to callbacks.

Jp



From catalin at dazoot.ro  Fri May 27 13:56:49 2005
From: catalin at dazoot.ro (Catalin Constantin)
Date: Fri, 27 May 2005 22:56:49 +0300
Subject: [Twisted-Python] xmlrpc deferred
In-Reply-To: <20050527194848.559.1189256091.divmod.quotient.11293@ohm>
References: <652481677.20050527222806@bounce-software.com>
	<20050527194848.559.1189256091.divmod.quotient.11293@ohm>
Message-ID: <30791919.20050527225649@bounce-software.com>

Friday, May 27, 2005, 10:46:21 PM, Jp Calderone wrote:
> On Fri, 27 May 2005 22:28:06 +0300, Catalin Constantin <catalin at dazoot.ro> wrote:
>>Hi there,
>>
>>I have the following xmlrpc method:
>>
>>class FeederResource(xmlrpc.XMLRPC):
>>        def __init__(self):
>>                xmlrpc.XMLRPC.__init__(self)
>>                self.feeder=Feeder()
>>
>>        def xmlrpc_getList(self, id):
>>                return self.feeder.get_urls(id)
>>
>>The thing is that the self.feeder.get_urls takes too long to execute
>>and while the request is running all the others are blocked.
>>I want that while it computes the result the other XML RPC methods to
>>be available.

> The only answer here is to make get_urls() take less time.

I can't :)

> What is it doing?  Is it blocking on network I/O?  Querying a
> database?  Prompting for user input?   _It_ should be creating and
> returned a Deferred (and later calling it back with a result), most
> likely, since it is the long-running operation.

Mainly, database queries.

>>
>>I wanted to use deferrals but i found no viable example.
>>
>>Eg what i've tried to do:
>>        def xmlrpc_getList(self, id):
>>                log.debug("getList is here for id %s" % id)
>>                d = defer.Deferred()
>>                d.addCallback(self.feeder.get_urls)
>>                return d

> Deferred don't make things asynchronous, cooperative, or
> non-blocking.  They only make dealing with callbacks more
> convenient.  If you add a blocking function as the callback to a
> Deferred, it will block the reactor just as effectively as if you
> called it yourself (bacause all that happens inside the Deferred is
> that the function gets called).

Ok, i got this now.
Is there any suggested way to make the call to that method in a
separate thread and return the result after the thread is done, and meanwhile
the other XMLRPC methods not to be blocked ?

What bothers me is that while the call to getList is not done all the
other functionality of the app is on hold.



>>
>>My method feeder.get_urls is never called !
>>

> In the above code, nothing ever "fires" the Deferred - calls
> .callback() on it - so, never having a result, it never bothers to
> invoke any of its callbacks.  Deferred just hook results up to
> callbacks.

> Jp

> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
Catalin Constantin
Dazoot Software
http://www.dazoot.ro




From glyph at divmod.com  Fri May 27 14:08:10 2005
From: glyph at divmod.com (Glyph Lefkowitz)
Date: Fri, 27 May 2005 16:08:10 -0400
Subject: [Twisted-Python] xmlrpc deferred
In-Reply-To: <30791919.20050527225649@bounce-software.com>
References: <652481677.20050527222806@bounce-software.com>	<20050527194848.559.1189256091.divmod.quotient.11293@ohm>
	<30791919.20050527225649@bounce-software.com>
Message-ID: <42977E2A.7030605@divmod.com>

Catalin Constantin wrote:
> Friday, May 27, 2005, 10:46:21 PM, Jp Calderone wrote:

>>What is it doing?

> Mainly, database queries.

> Is there any suggested way to make the call to that method in a
> separate thread and return the result after the thread is done, and meanwhile
> the other XMLRPC methods not to be blocked ?

twisted.enterprise.adbapi




From itamar at itamarst.org  Fri May 27 14:11:43 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 27 May 2005 16:11:43 -0400
Subject: [Twisted-Python] xmlrpc deferred
In-Reply-To: <30791919.20050527225649@bounce-software.com>
References: <652481677.20050527222806@bounce-software.com>
	<20050527194848.559.1189256091.divmod.quotient.11293@ohm>
	<30791919.20050527225649@bounce-software.com>
Message-ID: <1117224704.8727.42.camel@localhost.localdomain>

On Fri, 2005-05-27 at 22:56 +0300, Catalin Constantin wrote:

> Ok, i got this now.
> Is there any suggested way to make the call to that method in a
> separate thread and return the result after the thread is done, and meanwhile
> the other XMLRPC methods not to be blocked ?

Yes; specifically for database calls check twisted.enterprise.adbapi
(specifically runInteraction). There is documentation in the RDBMS
(enterprsie) howto.




From exarkun at divmod.com  Fri May 27 14:11:47 2005
From: exarkun at divmod.com (Jp Calderone)
Date: Fri, 27 May 2005 20:11:47 GMT
Subject: [Twisted-Python] xmlrpc deferred
In-Reply-To: <30791919.20050527225649@bounce-software.com>
Message-ID: <20050527201147.559.32129599.divmod.quotient.11304@ohm>

On Fri, 27 May 2005 22:56:49 +0300, Catalin Constantin <catalin at dazoot.ro> wrote:
>Friday, May 27, 2005, 10:46:21 PM, Jp Calderone wrote:
>> On Fri, 27 May 2005 22:28:06 +0300, Catalin Constantin <catalin at dazoot.ro> wrote:
>>>Hi there,
>>>
>>>I have the following xmlrpc method:
>>>
>>>class FeederResource(xmlrpc.XMLRPC):
>>>        def __init__(self):
>>>                xmlrpc.XMLRPC.__init__(self)
>>>                self.feeder=Feeder()
>>>
>>>        def xmlrpc_getList(self, id):
>>>                return self.feeder.get_urls(id)
>>>
>>>The thing is that the self.feeder.get_urls takes too long to execute
>>>and while the request is running all the others are blocked.
>>>I want that while it computes the result the other XML RPC methods to
>>>be available.
>
>> The only answer here is to make get_urls() take less time.
>
>I can't :)
>
>> What is it doing?  Is it blocking on network I/O?  Querying a
>> database?  Prompting for user input?   _It_ should be creating and
>> returned a Deferred (and later calling it back with a result), most
>> likely, since it is the long-running operation.
>
>Mainly, database queries.

If the database doesn't provide an async API, threads may be the only reasonable solution.  If the database adapter is a DB-API 2.0 module, this is already available for you: twisted.enterprise.adbapi.  Otherwise, you may need to use the "low level" Twisted threading API, twisted.internet.threads.deferToThread(), or even reactor.callInThread() and reactor.callFromThread(), depending on your particular needs.

> [snip]
>
>What bothers me is that while the call to getList is not done all the
>other functionality of the app is on hold.
>

Yep.  Any time you have a function that takes a long time to run, this is going to happen.  The reactor needs to get execution time to process events, and it can't get that if application code (ie, your code) doesn't return quickly.

Jp



From dave at krondo.com  Fri May 27 19:25:00 2005
From: dave at krondo.com (Dave Peticolas)
Date: Fri, 27 May 2005 18:25:00 -0700
Subject: [Twisted-Python] adbapi and pymssql
In-Reply-To: <200505270909.21630.pradu@pradu.it>
References: <200505261334.58599.mike@mkp.ca>
	<200505262234.55318.pradu@pradu.it> <200505261653.37873.mike@mkp.ca>
	<200505270909.21630.pradu@pradu.it>
Message-ID: <1117243500.4072.90.camel@oneiros>

On Fri, 2005-05-27 at 09:09 +0200, Alessandro Praduroux wrote:
> The problem as I recall was related to the fact that a commit() not coupled 
> with a begin() threw an exception, while all other DBAPI implementations were 
> resilient to this kind of problem. So I use a slightly modified version of 
> Sybase (that I'll send to you separately to avoid traffic on the list, if 
> anyone else is interested I'll post it here too, I lost the original patch 
> but I have the full package and I'm too lazy to recreate the patch).
> 
> A little disclaimer: freetds and thus Sybase.py do not yet implement query 
> parameters, if you try using them you will get an error until the freetds 
> people figure out how to implement this. I don't know if the mssql module 
> implement a workaround for this, Sybase.py doesn't (but it should be fairly 
> easy to do it in a compatible way).

As far as I can tell, begin() isn't actually a part of the DBAPI
standard: http://www.python.org/peps/pep-0249.html

That would explain why most DBAPI implementations do not require it :)

dave





From lc278 at cornell.edu  Fri May 27 21:44:31 2005
From: lc278 at cornell.edu (Laran Evans)
Date: Fri, 27 May 2005 23:44:31 -0400
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <200505271139.51008.ian@ianduggan.net>
References: <4295F4DE.8020403@cornell.edu>	<200505271032.27874.ian@ianduggan.net>	<42975E87.5000007@cornell.edu>
	<200505271139.51008.ian@ianduggan.net>
Message-ID: <4297E91F.9030909@cornell.edu>

Ian Duggan wrote:
> I just took a peek at JGroups. It looks like their API includes a lot of 
> switches you can tweak. Would that be a good starting point? It looks like 
> it's used in some significant stuff.
> 
> http://www.jgroups.org/javagroupsnew/docs/success.html
> 
> Their overview page (http://www.jgroups.org/javagroupsnew/docs/overview.html) 
> makes a decent case for their approach. I wonder if doing a mixin/layered 
> approach to building protocols adds much overhead?

There is a paper out there that makes the statement that each layer you 
add to a system adds 10% overhead. So, by that rationale, stacking 
protocols is scalable only to a certain point. But, what that paper's 
really referring to is adding a programming language on top of the 
underlying hardware adds 10%, which is pretty silly because, yeah, you 
have to add overhead to provide a whole new set of capabilities. But 
without the capabilities provided by the programming language, your 
underlying hardware wouldn't be worth much.

So, I don't think layering protocols adds much overhead at all. But 
there are better ways and not so good ways to do it. And I'm not a huge 
fan of the way JGroups and in fact Horus and Ensemble do it, basically 
the lego block approach because a given layer can only be stacked on top 
  or below certain other layers. You can't just stack anything on top of 
anything else. So, there's a certain learning curve involved in 
understanding how the layers interact.

I think a better approach is a more functional approach, utility methods 
for things like splitting and joining buffers, sequencing, sending via 
various types of sockets etc. There is actually another paper out there 
which talks about this. Here's a link to it: 
http://portal.acm.org/citation.cfm?doid=323647.323645. I found this 
paper very helpful.

JGroups has numerous configurations out of the box, all of which can be 
found in the conf directory of the JGroups source from CVS.

One of the difficult things about JGroups in my opinion is that there 
are so many different configuration possibilities. It's a bit difficult 
to know exactly what to use. Though, for some I'm sure that flexibility 
is a nice "feature". All personal taste I suppose.

> As for the others, I would need to read more about them. Do you know of any 
> sort of comparison matrix that includes these projects? Ensemble is work that 
> happened after Horus, right? Does that means it's more complete/featureful 
> and should be considered over Horus? Ie, has Horus added new things since 
> they split?

To specifically understand Horus vs. Ensemble, read this:
http://dsl.cs.technion.ac.il/projects/Ensemble/overview.html

There is a good paper which compares a number of the major group 
communication toolkits available. Here's a link:
http://portal.acm.org/citation.cfm?doid=503112.503113

There's another paper which I believe is similar. Though I haven't yet 
had a chance to read it. Here's a link to that one:
http://portal.acm.org/citation.cfm?doid=1041680.1041682

Hope this all helps.

- Laran




From catalin at dazoot.ro  Sat May 28 01:41:44 2005
From: catalin at dazoot.ro (Catalin Constantin)
Date: Sat, 28 May 2005 10:41:44 +0300
Subject: [Twisted-Python] xmlrpc deferred
In-Reply-To: <42977E2A.7030605@divmod.com>
References: <652481677.20050527222806@bounce-software.com>
	<20050527194848.559.1189256091.divmod.quotient.11293@ohm>
	<30791919.20050527225649@bounce-software.com>
	<42977E2A.7030605@divmod.com>
Message-ID: <1144140919.20050528104144@bounce-software.com>

not a good option in this case !

Friday, May 27, 2005, 11:08:10 PM, Glyph Lefkowitz wrote:
> twisted.enterprise.adbapi


-- 
Catalin Constantin
Dazoot Software
http://www.dazoot.ro




From catalin at dazoot.ro  Sat May 28 01:57:44 2005
From: catalin at dazoot.ro (Catalin Constantin)
Date: Sat, 28 May 2005 10:57:44 +0300
Subject: [Twisted-Python] xmlrpc deferred
In-Reply-To: <20050527201147.559.32129599.divmod.quotient.11304@ohm>
References: <30791919.20050527225649@bounce-software.com>
	<20050527201147.559.32129599.divmod.quotient.11304@ohm>
Message-ID: <637785464.20050528105744@bounce-software.com>

thank you for your reply !

i've figured it out !

        def handleResult(self, ulist):
                return ulist
                
        def xmlrpc_getList(self, id):
                d = threads.deferToThread(self.feeder.get_urls, id)
                d.addCallback(self.handleResult)
                return d

it works !

very nice indeed :D

Friday, May 27, 2005, 11:11:47 PM, Jp Calderone wrote:
> If the database doesn't provide an async API, threads may be the
> only reasonable solution.  If the database adapter is a DB-API 2.0
> module, this is already available for you:
> twisted.enterprise.adbapi.  Otherwise, you may need to use the
> "low level" Twisted threading API,
> twisted.internet.threads.deferToThread(), or even
> reactor.callInThread() and
> reactor.callFromThread(), depending on your particular needs.


-- 
Catalin Constantin
Dazoot Software
http://www.dazoot.ro




From michele.petrazzo at unipex.it  Sat May 28 04:22:14 2005
From: michele.petrazzo at unipex.it (Michele Petrazzo)
Date: Sat, 28 May 2005 12:22:14 +0200
Subject: [Twisted-Python] threadedselectreactor
In-Reply-To: <42975937.4070504@unipex.it>
References: <4295C138.8040708@unipex.it> <429748CA.5050102@sbcglobal.net>
	<42975937.4070504@unipex.it>
Message-ID: <42984656.9000000@unipex.it>

Michele Petrazzo wrote:

Thanks to all,
my old projects work very very well with new threadselectreactor!

Thanks,
Michele



From itamar at itamarst.org  Sat May 28 10:37:38 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 28 May 2005 12:37:38 -0400
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <42975E87.5000007@cornell.edu>
References: <4295F4DE.8020403@cornell.edu> <42968A15.1090200@cornell.edu>
	<7F93DBED-ABA4-4D72-8906-05DCE5DA3F6B@anu.edu.au>
	<200505271032.27874.ian@ianduggan.net> <42975E87.5000007@cornell.edu>
Message-ID: <1117298258.7946.28.camel@localhost.localdomain>

On Fri, 2005-05-27 at 13:53 -0400, Laran Evans wrote:

> Beyond that there are all sorts of techniques, each of which makes 
> certain assumptions. So, which protocol to utilize depends on what type 
> of environment you want to create for applications.

The IETF reliable mulitcast working group has an overview of the
different dimensions and building blocks, specs for some of the
different types, etc.:

http://www.ietf.org/html.charters/rmt-charter.html






From jarrod.roberson at gmail.com  Sat May 28 14:42:31 2005
From: jarrod.roberson at gmail.com (jarrod roberson)
Date: Sat, 28 May 2005 16:42:31 -0400
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <4295F4DE.8020403@cornell.edu>
References: <4295F4DE.8020403@cornell.edu>
Message-ID: <2389d4730505281342a88942f@mail.gmail.com>

On 5/26/05, Laran Evans <lc278 at cornell.edu> wrote:
> 
> Has any work been done to enable process group communication similar to
> what Spread (spread.org <http://spread.org>), Ensemble, Horus, Isis, 
> Eternal etc. offer?
> 
> - Laran


We are working on something similar for a project at work also.
We are using ZeroConf ( aka formerly Apple Rendezvous now Apple Bonjour ) 
for cluster discovery
and a Perspective Broker interface for exchanging information.

We considered reliable multi-cast but decided against it because our 
clusters are not going to be very big and
are going to use a kind of inversion of control pattern instead of 
distributing all the data everywhere.

But I am interested in a COMMON IDIOM for clustering twisted servers, I 
would definately say ZeroConf needs to be
the discovery mechanism, no need to re-invent that wheel and a Twisted 
implemenation is easy


-- 
If you don't know what you want, you probably need a nap.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050528/4e33b943/attachment.html>

From july.lzu at gmail.com  Sun May 29 12:49:59 2005
From: july.lzu at gmail.com (july july)
Date: Mon, 30 May 2005 02:49:59 +0800
Subject: [Twisted-Python] how to write an interactive client?
In-Reply-To: <20050520232600.559.607604854.divmod.quotient.5672@ohm>
References: <001201c55d90$546f6ef0$800101df@sv.us.sonicwall.com>
	<20050520232600.559.607604854.divmod.quotient.5672@ohm>
Message-ID: <89cf12820505291149705e88cb@mail.gmail.com>

On 5/21/05, Jp Calderone <exarkun at divmod.com> wrote:
> On Fri, 20 May 2005 16:04:50 -0700, theshz <theshz at gmail.com> wrote:
> >Hi, I've written a simple twisted server, which accepts client connections,
> >and respond with some simple text depending on what the client sends. This
> >is working fine if I use telnet to connect to the server, and enter the
> >commands one at a time. I'd like to write a twisted client to simulate this,
> >i.e., the client has a list of commands to send, it will send one at a time,
> >(may be wait a little bit between the commands,) and print out the responses
> >from the server. I couldn't seem to get beyond the first command, following
> >code seems to send all the commands at the end, rather than one at a time,
> >how can I add sleep in between? Thanks:
> >
> >from twisted.internet.protocol import ReconnectingClientFactory
> >from twisted.protocols import basic
> >from twisted.internet import reactor
> >from sys import stdout
> >import time
> >
> >class MyClientProtocol(basic.LineReceiver):
> > def lineReceived(self,data):
> >  stdout.write("Server:" + data+"\n"),
> >
> > def connectionMade(self):
> >      stdout.write("connectionMade\n")
> >      self.transport.write("start:\r\n")
> >      self.transport.write("command1:\r\n")
> >      self.transport.write("command2:\r\n")
> >      self.transport.write("command3:\r\n")
> >      self.transport.write("end:\r\n")
> >
> 
>  Try this version of connectionMade, along with this definition of lineReceived:
> 
>    lines = ["command1", "command2", "command3", "end"]
>    def connectionMade(self):
>        print "connectionMade"
>        self.lines = self.lines[:]
>        self.sendLine("start:")
> 
>    def lineReceived(self, line):
>        print "Got a line:", repr(line)
>        if self.lines:
>            self.sendLine(self.lines.pop(0) + ":")
> 
>  Of course, there are other ways to do this.  You could respond to timing events instead of network events:
> 
>    lines = ["command1", "command2", "command3", "end"]
>    def connectionMade(self):
>        print "connectionMade"
>        self.lines = self.lines[:]
>        self.sendCommand()
> 
>    def sendCommand(self):
>        self.sendLine(self.lines.pop(0) + ":")
>        if self.lines:
>            reactor.callLater(3, self.sendCommand)
> 
>  Or you could respond to events from stdin, or from another connected protocol, or a GUI, or ....
> 
>  Hope this helps,
> 
>  Jp
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
okey , I think it's hard to parse command line in twisted reactor
event loopst . In my programs ,  I always 'import cmd' and in between
command , use reacotr.run() to send a message ,and waiting for a
replay when the replay comes back, the protocol() will terminate the
connection . and back into cmd loop.
Hope this helps,   ZP



From incoming at pronet-romania.com  Sun May 29 12:59:19 2005
From: incoming at pronet-romania.com (Tibi Dondera)
Date: Sun, 29 May 2005 20:59:19 +0200
Subject: [Twisted-Python] Chat by html application
In-Reply-To: <9F028CC77827D611ACEE0002A5F12F0708551629@semldsntmsx208.seml.astrazeneca.net>
Message-ID: <019101c56480$855af790$f300a8c0@mobile>

Thank you all for your help, I'll check out chatola and folow your other
advices, and also switch this discussion to twisted-web.

_________________
Tibi DONDERA


-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of
Harald.Nyman at astrazeneca.com
Sent: Friday, 27 May 2005 18:45
To: twisted-python at twistedmatrix.com; twisted-web at twistedmatrix.com
Subject: RE: [Twisted-Python] Chat by html application


Hi Tibi,

Nevow is probably the best. But there are other ways too. I've been
doing this for several years with a Tomcat servlet, and then there was
no Nevow. After converting to Pythonism, I switched to a Twisted server.
Haven't learned Nevow yet, despite good intentions..., but I think this
may be similar. It's essentially doing all of "What I want to do:"
below, only I'm not using it mainly for chat, but for distributing HTML
or Javascript, for viewing things together during a phone meeting.

 - the browser's background HTTPRequest sits in a threaded applet
 - someone switches on "collaboration" in his browser - the others see
   his name being added to the "virtual meeting"
 - one user drags a pointer (image) in his browser -> the pointer moves
   in the other browsers

See also some A's to your Q's, below.
Harald


On 5/26/05, Tibi Dondera <incoming at pronet-romania.com> wrote:
> Hello all,
> 
> I'm trying to develop a chat application through a browser, using 
> twisted (if possible) What I want to do:
>  - a user logs in the website
>  - he goes to the "chat page"
>  - he has the "classic" chat interface (sent messages, list of online
> users, "send a message" field). All of these are simple "divs"
>  - when he sends a message, a post with the message is submitted to
the
> server, and registered in a temporary database table (or in memory, is
> there some "temporary" memory that I can use in twisted for this
purpose
> ?)
>  - for refreshing the chat area, there is an open HTTPRequest in the
> background. Twisted will do the following:
>      - accept the HTTPrequest connection
>      - keep it alive (i.e. do not send the answer, but maybe send some
> empty chars to force the browser to keep the connection open)
>      - when a new message (from the other users) is available, send it
> to the user and close the connection.
>  - in the user's browser, when the connection is closed (either with a
> message, or after a certain timeout, that cannot be avoided anyway), a
> new one will be opened, until the user quits the chat.
> 
> Questions:
> - Is this a plausible solution ?

Yes, IMHO.

> - Has this already been implemented (or at least partly) ?
> - Can this actually be done with twisted ?

Yes.

> - Can I develop this on Windows ? (production will be on linux, but 
> still, I prefer developing local, and currently on windows)

Hmm.. I develop "on Windows", but with a VMWare Linux server on the same
laptop. Works great, but costs a bit. Should work with the server on
Windows, too(?)

> - Can you give me any pointers to some existing code, or where to 
> start ? (maybe jabber for twisted ?)

Here's a few fragments from my server code -

class Servlet(resource.Resource):
    ...
# Send queued output to browser's background listener
    def render_GET(self, request):
        self.request = request
        session = request.getSession()
    ...
        anything = 0
        while not session.outqueue.empty():
            x = session.outqueue.get()
            request.transport.write(x)
            anything = 1
        if anything:
            request.finish()
        return server.NOT_DONE_YET
 
    def render_POST(self, request):  
        session = request.getSession()
# Browser sends a dictionary as text
        msgDict = eval(request.args['message'][0])
        request.finish()
        
        message = msgDict['message']
        mSplit = message.split()
        ... # Do work here
        return server.NOT_DONE_YET

> - How will a twisted http server coexist with my existing apache 
> server on the 80 port ?

Not well, I guess. I use a different port for the Twisted server.

> - Must I subscribe to the twisted-http mailing list instead and ask 
> this question there ?

Twisted-web would be better, yes. I'm posting this one there too, with
all due apologies...

> 
> Thanks for any help.
> 
> Tibi Dondera



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From qwejohn at hotmail.com  Mon May 30 05:28:47 2005
From: qwejohn at hotmail.com (John Que)
Date: Mon, 30 May 2005 14:28:47 +0300
Subject: [Twisted-Python] using http server in twisted 
Message-ID: <BAY14-F66BB5AD5EC3B7D923410DAF030@phx.gbl>

Hello,

I am trying the exmaple in the python docs -
http://twistedmatrix.com/users/warner/doc-latest/web/howto/using-twistedweb.xhtml

Configuring and Using the Twisted.Web Server - Twisted Web Development.

it says there:

"You can also create a Site instance by hand, passing it a Resource object 
which will serve as the root of the site:

from twisted.web import server, resource
from twisted.internet import reactor

class Simple(resource.Resource):
    isLeaf = True
    def render_GET(self, request):
        return "<html>Hello, world!</html>"

site = server.Site(Simple())
reactor.listenTCP(8080, site)
reactor.run()   "

So I prepared a script named myhttp exactly like this and ran ./myhttp

I had made sure with netstat that indeed port 8080 was free before running 
the script and after
running the script it was in a listening state.

But when pointing the Mozilla browser to http://localhost:8080 (or  
http://127.0.0.1:8080)
I got the following error:

"Method Not Allowed
Your browser approached me (at /) with the method "GET". I only allow the 
method here."

I had also made sure that there in no problem with iptables and that the 
iptable service is down.

Any idea ?

Am I missing something?

Any help will be appreciated.

Regards,
John

_________________________________________________________________
FREE pop-up blocking with the new MSN Toolbar - get it now! 
http://toolbar.msn.click-url.com/go/onm00200415ave/direct/01/




From mark at junklight.com  Mon May 30 05:45:47 2005
From: mark at junklight.com (mark)
Date: Mon, 30 May 2005 12:45:47 +0100
Subject: [Twisted-Python] using http server in twisted 
In-Reply-To: <BAY14-F66BB5AD5EC3B7D923410DAF030@phx.gbl>
References: <BAY14-F66BB5AD5EC3B7D923410DAF030@phx.gbl>
Message-ID: <747208FB-0AF4-473C-9EB1-FA38D3C0BC31@junklight.com>

Hi,

I run my app in very much the same way and it works fine. A rapid cut  
and paste test of your example works just fine here as well. I would  
suggest that there is something else running on port 8080 (or  
blocking/fire-walling it)

cheers

mark

On 30 May 2005, at 12:28, John Que wrote:

> So I prepared a script named myhttp exactly like this and ran ./myhttp
>
> I had made sure with netstat that indeed port 8080 was free before  
> running the script and after
> running the script it was in a listening state.
>
> But when pointing the Mozilla browser to http://localhost:8080 (or   
> http://127.0.0.1:8080)
> I got the following error:
>
> "Method Not Allowed
> Your browser approached me (at /) with the method "GET". I only  
> allow the method here."
>
> I had also made sure that there in no problem with iptables and  
> that the iptable service is down.
>
> Any idea ?
>




From michele.petrazzo at unipex.it  Mon May 30 06:35:40 2005
From: michele.petrazzo at unipex.it (Michele Petrazzo)
Date: Mon, 30 May 2005 14:35:40 +0200
Subject: [Twisted-Python] wxpython, threadselectreactor and thread
Message-ID: <429B089C.4010002@unipex.it>

I have a wxpython application that work with twsited 2.0 on win and
linux. In these days I'm "porting" it from twisted 1.3 to 2.0 +
threadselectreactor, but not all work well.
Into my application I use:
callLater
threads.deferToThread with some addCallBack

Three problems:

1) Sometime then I open and close my application I receive this error:

Unhandled exception in thread started by <bound method
Thread.__bootstrap of <Thread(Thread-1, stopped daemon)>>
Traceback (most recent call last):
   File "C:\Python23\lib\threading.py", line 451, in __bootstrap
     self.__stop()
   File "C:\Python23\lib\threading.py", line 460, in __stop
     self.__block.notifyAll()
   File "C:\Python23\lib\threading.py", line 256, in notifyAll
     self.notify(len(self.__waiters))
   File "C:\Python23\lib\threading.py", line 238, in notify
     currentThread() # for side-effect
TypeError: 'NoneType' object is not callable

2) Then I call with threads.deferToThread a method that make a blocking
work, and after it open a new frame, the frame is opened, but if I want
to close the first frame and the second frame (with the "X" on the
frame), the application don't close. Into the task manager (on win) or
into /proc/"pid" I see that the process (python.exe) are alive and have
three threads. I attach a simple code that reproduce this problem.

3) Why into your demo the reactor.stop() work and into my code I receive
this error:
RuntimeError: can't stop reactor that isn't running
I use the same code initialization of the demo.

Thanks a lot,
Michele

-------------- next part --------------
A non-text attachment was scrubbed...
Name: wx_f.py
Type: text/x-python
Size: 1798 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20050530/7eab8511/attachment-0002.py>

From qwejohn at hotmail.com  Mon May 30 07:04:04 2005
From: qwejohn at hotmail.com (John Que)
Date: Mon, 30 May 2005 16:04:04 +0300
Subject: [Twisted-Python] using http server in twisted
In-Reply-To: <747208FB-0AF4-473C-9EB1-FA38D3C0BC31@junklight.com>
Message-ID: <BAY14-F13692841E4B72CF441733AF030@phx.gbl>

Hello,
Thanks; this is stange; I checked again with netstat and 8080 was free 
before running
the script and held afterwards.
And the iptables service is are down. and again I get the same error . Could 
it be that
something else in the environment is not OK?
Any idea?

Regards,
John


>From: mark <mark at junklight.com>
>Reply-To: Twisted general discussion <twisted-python at twistedmatrix.com>
>To: Twisted general discussion <twisted-python at twistedmatrix.com>
>Subject: Re: [Twisted-Python] using http server in twisted Date: Mon, 30 
>May 2005 12:45:47 +0100
>
>Hi,
>
>I run my app in very much the same way and it works fine. A rapid cut  and 
>paste test of your example works just fine here as well. I would  suggest 
>that there is something else running on port 8080 (or  
>blocking/fire-walling it)
>
>cheers
>
>mark
>
>On 30 May 2005, at 12:28, John Que wrote:
>
>>So I prepared a script named myhttp exactly like this and ran ./myhttp
>>
>>I had made sure with netstat that indeed port 8080 was free before  
>>running the script and after
>>running the script it was in a listening state.
>>
>>But when pointing the Mozilla browser to http://localhost:8080 (or   
>>http://127.0.0.1:8080)
>>I got the following error:
>>
>>"Method Not Allowed
>>Your browser approached me (at /) with the method "GET". I only  allow the 
>>method here."
>>
>>I had also made sure that there in no problem with iptables and  that the 
>>iptable service is down.
>>
>>Any idea ?
>>
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

_________________________________________________________________
FREE pop-up blocking with the new MSN Toolbar - get it now! 
http://toolbar.msn.click-url.com/go/onm00200415ave/direct/01/




From itamar at itamarst.org  Mon May 30 09:17:56 2005
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 30 May 2005 11:17:56 -0400
Subject: [Twisted-Python] wxpython, threadselectreactor and thread
In-Reply-To: <429B089C.4010002@unipex.it>
References: <429B089C.4010002@unipex.it>
Message-ID: <1117466277.7750.17.camel@localhost.localdomain>

On Mon, 2005-05-30 at 14:35 +0200, Michele Petrazzo wrote:

> 3) Why into your demo the reactor.stop() work and into my code I receive
> this error:
> RuntimeError: can't stop reactor that isn't running
> I use the same code initialization of the demo.

You are not calling reactor.run() anywhere, as far as I can tell.




From bob at redivi.com  Mon May 30 10:12:49 2005
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 30 May 2005 09:12:49 -0700
Subject: [Twisted-Python] wxpython, threadselectreactor and thread
In-Reply-To: <1117466277.7750.17.camel@localhost.localdomain>
References: <429B089C.4010002@unipex.it>
	<1117466277.7750.17.camel@localhost.localdomain>
Message-ID: <499D05BC-1249-4324-BA65-A77835A5A051@redivi.com>


On May 30, 2005, at 8:17 AM, Itamar Shtull-Trauring wrote:

> On Mon, 2005-05-30 at 14:35 +0200, Michele Petrazzo wrote:
>
>
>> 3) Why into your demo the reactor.stop() work and into my code I  
>> receive
>> this error:
>> RuntimeError: can't stop reactor that isn't running
>> I use the same code initialization of the demo.
>>
>
> You are not calling reactor.run() anywhere, as far as I can tell.

That shouldn't be the problem.. reactor.interleave() is being  
called.  reactor.interleave is effectively a non-blocking version of  
stop.

-bob




From bob at redivi.com  Mon May 30 10:14:57 2005
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 30 May 2005 09:14:57 -0700
Subject: [Twisted-Python] wxpython, threadselectreactor and thread
In-Reply-To: <429B089C.4010002@unipex.it>
References: <429B089C.4010002@unipex.it>
Message-ID: <4CF776C7-A7EB-4E0D-ABEE-2B02A9D5A6EA@redivi.com>


On May 30, 2005, at 5:35 AM, Michele Petrazzo wrote:

> I have a wxpython application that work with twsited 2.0 on win and
> linux. In these days I'm "porting" it from twisted 1.3 to 2.0 +
> threadselectreactor, but not all work well.
> Into my application I use:
> callLater
> threads.deferToThread with some addCallBack

This example segfaults on Mac OS X (python 2.4.1, twisted svn,  
wxPython 2.6).  I'm going to blame wxPython unless you can prove that  
threadedselectreactor has some weird interaction with threads in an  
otherwise sane environment.  Are you sure that it's allowed to create  
frames in a separate thread like that?

-bob




From Sl_Church at sbcglobal.net  Mon May 30 10:22:25 2005
From: Sl_Church at sbcglobal.net (Shawn Church)
Date: Mon, 30 May 2005 09:22:25 -0700
Subject: [Twisted-Python] wxpython, threadselectreactor and thread
In-Reply-To: <1117466277.7750.17.camel@localhost.localdomain>
References: <429B089C.4010002@unipex.it>
	<1117466277.7750.17.camel@localhost.localdomain>
Message-ID: <429B3DC1.6020805@sbcglobal.net>



Itamar Shtull-Trauring wrote:

>On Mon, 2005-05-30 at 14:35 +0200, Michele Petrazzo wrote:
>
>  
>
>>3) Why into your demo the reactor.stop() work and into my code I receive
>>this error:
>>RuntimeError: can't stop reactor that isn't running
>>I use the same code initialization of the demo.
>>    
>>
>
>You are not calling reactor.run() anywhere, as far as I can tell.
>
>
>  
>
My understanding is you call reactor.interleave **NOT** reactor.run with
threadedselectreactor.   For wx I use reactor.interleave(wx.CallAfter)
in my App.OnInit method and it works fine. There IS an issue with the wx
MainLoop not exiting when my last frame is closed (I think this is
because wx still "sees" the reactor thread) so I use wx.GetApp().Exit()
to terminate the wx MainLoop manually.


Shawn Church
http://SChurchComputers.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20050530/3c39692a/attachment.html>

From bob at redivi.com  Mon May 30 10:28:02 2005
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 30 May 2005 09:28:02 -0700
Subject: [Twisted-Python] wxpython, threadselectreactor and thread
In-Reply-To: <499D05BC-1249-4324-BA65-A77835A5A051@redivi.com>
References: <429B089C.4010002@unipex.it>
	<1117466277.7750.17.camel@localhost.localdomain>
	<499D05BC-1249-4324-BA65-A77835A5A051@redivi.com>
Message-ID: <C0833A96-DDED-4E51-940B-3525C31E5FA6@redivi.com>


On May 30, 2005, at 9:12 AM, Bob Ippolito wrote:

>
> On May 30, 2005, at 8:17 AM, Itamar Shtull-Trauring wrote:
>
>
>> On Mon, 2005-05-30 at 14:35 +0200, Michele Petrazzo wrote:
>>
>>
>>
>>> 3) Why into your demo the reactor.stop() work and into my code I  
>>> receive
>>> this error:
>>> RuntimeError: can't stop reactor that isn't running
>>> I use the same code initialization of the demo.
>>>
>>>
>>
>> You are not calling reactor.run() anywhere, as far as I can tell.
>>
>
> That shouldn't be the problem.. reactor.interleave() is being  
> called.  reactor.interleave is effectively a non-blocking version  
> of stop.

That should be, non-blocking version of *run*.

-bob




From solipsis at pitrou.net  Mon May 30 10:30:47 2005
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Mon, 30 May 2005 18:30:47 +0200
Subject: [Twisted-Python] wxpython, threadselectreactor and thread
In-Reply-To: <4CF776C7-A7EB-4E0D-ABEE-2B02A9D5A6EA@redivi.com>
References: <429B089C.4010002@unipex.it>
	<4CF776C7-A7EB-4E0D-ABEE-2B02A9D5A6EA@redivi.com>
Message-ID: <1117470647.32443.6.camel@p-dhcp-333-72.rd.francetelecom.fr>


> This example segfaults on Mac OS X (python 2.4.1, twisted svn,  
> wxPython 2.6).  I'm going to blame wxPython unless you can prove that  
> threadedselectreactor has some weird interaction with threads in an  
> otherwise sane environment.  Are you sure that it's allowed to create  
> frames in a separate thread like that?

It is generally not allowed to make wx calls (except wx.CallAfter and
the like) from another thread than the wx main loop. It can be the
source of non-deterministic crashes (depending on the platform).

Regards

Antoine.





From mark at junklight.com  Mon May 30 11:41:25 2005
From: mark at junklight.com (mark)
Date: Mon, 30 May 2005 18:41:25 +0100
Subject: [Twisted-Python] using http server in twisted
In-Reply-To: <BAY14-F13692841E4B72CF441733AF030@phx.gbl>
References: <BAY14-F13692841E4B72CF441733AF030@phx.gbl>
Message-ID: <C46DAFF0-B9E7-4991-9C56-BFC8B6A9697E@junklight.com>

A quick "spotlight" reveals that the error message is coming from the  
file /Twisted-1.3.0/twisted/web/server.py

I'd have a read of the comments in there.

I'm using Twisted 2.0.1 so it might be different. Having said that I  
would have thought that example should work.


On 30 May 2005, at 14:04, John Que wrote:

>>> Your browser approached me




From foom at fuhm.net  Mon May 30 22:59:47 2005
From: foom at fuhm.net (James Y Knight)
Date: Tue, 31 May 2005 00:59:47 -0400
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <F28F9D96-8FA9-4673-B81D-A0DB8FBD641C@fuhm.net>

Bug summary
______________________
Since 2005-05-23 21:32:22.460000:
Bugs opened: 20   Bugs closed: 12   Total open bugs: 377 (+8)
   Urgent: 6 (-1)
   Bug: 155 (+6)
   Feature: 141 (+2)
   Wish: 75 (+1)

New / Reopened Bugs
______________________
                     ==== Urgent ====
Release 2.1  (4 days ago)
        http://twistedmatrix.com/bugs/issue1055 opened by jknight

                     ==== Bug ====
[CORE, DOCUMENTATION] Deferred doc fix  (3 days ago)
        http://twistedmatrix.com/bugs/issue1063 opened by bruce

Deferred debugging error  (3 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1061 opened by bruce

tcp port __repr__ fix  (3 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1060 opened by bruce

[CORE] UNIX Port creation has race condition in permission setting  
code  (8 hours ago)
        http://twistedmatrix.com/bugs/issue1068 opened by exarkun

[CORE] On case insensitive filesystems, twisted.plugin should load  
plugin modules ending in .PY (and variations)  (2 days ago)
        http://twistedmatrix.com/bugs/issue1066 opened by exarkun

epyrun doesn't work  (yesterday)
        http://twistedmatrix.com/bugs/issue1067 opened by marienz

pymssql compatibility issue  (4 days ago)
        http://twistedmatrix.com/bugs/issue1056 opened by mike

pbsimple.py code is missing from the "Using Perspective Broker" howto  
on web site  (4 days ago)
        http://twistedmatrix.com/bugs/issue1053 opened by mg

Incorrect and misleading arg name msSinceEpoch  (4 days ago)
        http://twistedmatrix.com/bugs/issue1057 opened by justinj

[CORE, DOCUMENTATION] organized-finger.tac references non-existent  
ServerContextFactory  (3 days ago)
        http://twistedmatrix.com/bugs/issue1058 opened by exarkun

[PATCH] Light editing of "Using Application" for flow and continuity   
(5 days ago)
        http://twistedmatrix.com/bugs/issue1052 opened by waterbug

HTTP server doesn't handle cookies containing '='  (6 days ago)
        http://twistedmatrix.com/bugs/issue1051 opened by abram

                     ==== Feature ====
Helper class for multiple deferreds  (3 days ago)
        http://twistedmatrix.com/bugs/issue1064 opened by jtrask

No easy way to intercept failed connection from pb.PBClientFactory   
(6 days ago)
        http://twistedmatrix.com/bugs/issue1049 opened by lstep

[WORDS, XISH] client XMPP authenticator  (6 days ago)
        http://twistedmatrix.com/bugs/issue1050 opened by tofu

                     ==== Wish ====
twistd.pid vs. chdir  (3 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1065 opened by bruce

Naming the thread pools, especially for adbapi's ConnectionPool  (3  
days ago)
        http://twistedmatrix.com/bugs/issue1062 opened by bruce

quiet those deprecation warnings for deployment uses of deprecated  
code via mktap  (3 days ago)
        http://twistedmatrix.com/bugs/issue1059 opened by bruce

new twisted app -- hellanzb  (4 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1054 opened by pjenvey



Bugs Closed
______________________
                     ==== Urgent ====
[CORE] gtk2 reactor broken for actual GUI apps  (1 month ago)
        http://twistedmatrix.com/bugs/issue994 opened by warner,  
closed by jknight

[RELEASE MANAGEMENT] release 2.0.1  (1 month ago)
        http://twistedmatrix.com/bugs/issue1007 opened by jknight,  
closed by radix

                     ==== Bug ====
Deferred debugging error  (3 days ago)
        http://twistedmatrix.com/bugs/issue1061 opened by bruce,  
closed by exarkun

tcp port __repr__ fix  (3 days ago)
        http://twistedmatrix.com/bugs/issue1060 opened by bruce,  
closed by exarkun

[WEB] deprecated use of IPv4Address in http.py  (9 months ago)
        http://twistedmatrix.com/bugs/issue666 opened by acapnotic,  
closed by jknight

[WEB] [PATCH] Missing return in HTTPPageGetter.handleStatus_301()?   
(3 weeks ago)
        http://twistedmatrix.com/bugs/issue1011 opened by jojo,  
closed by jknight

win32 build instructions incorrect  (3 weeks ago)
        http://twistedmatrix.com/bugs/issue1017 opened by justinj,  
closed by moonfallen

twisted.news.news  (3 weeks ago)
        http://twistedmatrix.com/bugs/issue1012 opened by manlio,  
closed by moonfallen

                     ==== Feature ====
[TWISTD] twistd -y should disable persist-on-exit by default  (15  
months ago)
        http://twistedmatrix.com/bugs/issue539 opened by jknight,  
closed by jknight

                     ==== Wish ====
twistd.pid vs. chdir  (3 days ago)
        http://twistedmatrix.com/bugs/issue1065 opened by bruce,  
closed by exarkun

[CONCH] Conch-enabled Manhole  (22 months ago)
        http://twistedmatrix.com/bugs/issue110 opened by z3p, closed  
by exarkun

new twisted app -- hellanzb  (4 days ago)
        http://twistedmatrix.com/bugs/issue1054 opened by pjenvey,  
closed by exarkun





From duncan.mcgreggor at gmail.com  Tue May 31 01:23:04 2005
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Tue, 31 May 2005 07:23:04 +0000 (UTC)
Subject: [Twisted-Python] Re: how to write an interactive client?
References: <ir4u0l0l7c0.fsf@minos.phy.bnl.gov>
	<428BD081.7050103@divmod.com><61b4e70f05052011094a078865@mail.gmail.com>
	<ir4u0kxenc9.fsf@minos.phy.bnl.gov>
	<001201c55d90$546f6ef0$800101df@sv.us.sonicwall.com>
Message-ID: <loom.20050531T091620-622@post.gmane.org>

theshz <theshz <at> gmail.com> writes:

> 
> Hi, I've written a simple twisted server, which accepts client connections,
> and respond with some simple text depending on what the client sends. This
> is working fine if I use telnet to connect to the server, and enter the
> commands one at a time. I'd like to write a twisted client to simulate this,

Why do you want to simulate this?

You might be interested in the source code of imagination. There is some 
test/demo code in the repository you might find interesting.

I'm working on a project that borrows heavily from this code but has its 
own parser grammer writtn with pyparsing.




From qwejohn at hotmail.com  Tue May 31 05:35:47 2005
From: qwejohn at hotmail.com (John Que)
Date: Tue, 31 May 2005 14:35:47 +0300
Subject: [Twisted-Python] using http server in twisted
In-Reply-To: <C46DAFF0-B9E7-4991-9C56-BFC8B6A9697E@junklight.com>
Message-ID: <BAY14-F168974F397F7B756E32E35AF040@phx.gbl>


Hello,
I was wrong; it should have been render_GET and not render_get . Sorry.

John

>From: mark <mark at junklight.com>
>Reply-To: Twisted general discussion <twisted-python at twistedmatrix.com>
>To: Twisted general discussion <twisted-python at twistedmatrix.com>
>Subject: Re: [Twisted-Python] using http server in twisted
>Date: Mon, 30 May 2005 18:41:25 +0100
>
>A quick "spotlight" reveals that the error message is coming from the  file 
>/Twisted-1.3.0/twisted/web/server.py
>
>I'd have a read of the comments in there.
>
>I'm using Twisted 2.0.1 so it might be different. Having said that I  would 
>have thought that example should work.
>
>
>On 30 May 2005, at 14:04, John Que wrote:
>
>>>>Your browser approached me
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

_________________________________________________________________
Express yourself instantly with MSN Messenger! Download today it's FREE! 
http://messenger.msn.click-url.com/go/onm00200471ave/direct/01/




From michele.petrazzo at unipex.it  Tue May 31 05:17:29 2005
From: michele.petrazzo at unipex.it (Michele Petrazzo)
Date: Tue, 31 May 2005 13:17:29 +0200
Subject: [Twisted-Python] wxpython, threadselectreactor and thread
In-Reply-To: <4CF776C7-A7EB-4E0D-ABEE-2B02A9D5A6EA@redivi.com>
References: <429B089C.4010002@unipex.it>
	<4CF776C7-A7EB-4E0D-ABEE-2B02A9D5A6EA@redivi.com>
Message-ID: <429C47C9.3080102@unipex.it>

Bob Ippolito wrote:
> 
> On May 30, 2005, at 5:35 AM, Michele Petrazzo wrote:
> 
>> I have a wxpython application that work with twsited 2.0 on win and
>> linux. In these days I'm "porting" it from twisted 1.3 to 2.0 +
>> threadselectreactor, but not all work well.
>> Into my application I use:
>> callLater
>> threads.deferToThread with some addCallBack
> 
> 
> This example segfaults on Mac OS X (python 2.4.1, twisted svn,  wxPython 
> 2.6).  I'm going to blame wxPython unless you can prove that  
> threadedselectreactor has some weird interaction with threads in an  
> otherwise sane environment.  Are you sure that it's allowed to create  
> frames in a separate thread like that?
> 
> -bob
> 

You are right, on my linux-box I receive a:
Xlib: unexpected async reply (sequence 0x4a2)!
Xlib: sequence lost (0x104a2 > 0x4e8) in reply type 0x0!

But on win it work, sorry!

My first problem leave, so sometime, but I don't understand when, on
both of my systems (win, lin), I receive e thread error (the first
question on my first mail).

If someone want try my application, for reproduce the problem, I can
publish it on a web site. It's only a little problem: it's an hylafax
client, so for work you must have a hylafax server.

Thanks,
Michele



From seba.tutu at laposte.net  Tue May 31 05:45:49 2005
From: seba.tutu at laposte.net (seba.tutu)
Date: Tue, 31 May 2005 13:45:49 +0200
Subject: [Twisted-Python] ftp server cannot access below directory
Message-ID: <IHCRCD$644DE3A08DD58E2BD2D6610DF5CBC6D8@laposte.net>

Hi,

I was trying to implement a very basic ftp server using the
twisted framework (version 2).

The server is running under WinXP. I launch the programm under
the twisted shell using twistd -y name_program.py 

The client is linux partly because for the test it appears
that  I need a passice connection.

I manage to login and to type basic command (like help, bin)...

As soon as I ask for a ls, there is a message 550 : Cannot
accsees below / directoey : Permission denied. The directory
exists.

If it does not exist there is anyway a very different message
that pops up and the connextion is forced to close.

Obviuosly there is something that I do not get right for the
file systeme authorisation.

I have looked for examples but have not found any helping further.

I you can point me to some usefull links or information I
would greatly appreciate.

Regards.
Sebastien.



The basic code is below.
I use passice client and the connection is OK but I have a
trouble the clie

# FTp server for test

from twisted.internet.protocol import Protocol, ServerFactory
from twisted.protocols import ftp
from twisted.application import service, internet
from twisted.cred import checkers,portal

#To run under the twisted shell: twistd -y name_program.py 

# definition du royaume
realm=ftp.FTPRealm("./seb")

# Attention, il sera necessaire d'utiliser une connection
passive !!!! 
checker=checkers.InMemoryUsernamePasswordDatabaseDontUse()
checker.addUser("q","q")

portal=portal.Portal(realm)
portal.registerChecker(checker)

factory = ftp.FTPFactory(portal)
# definition de l'application
application = service.Application("ftp")

# definition du serveur et attache au service associe !!!
myServer=internet.TCPServer(21, factory)
myServer.setServiceParent(application)



Accédez au courrier électronique de La Poste : www.laposte.net ; 
3615 LAPOSTENET (0,34/mn) ; tél : 08 92 68 13 50 (0,34/mn)






From lc278 at cornell.edu  Tue May 31 07:39:50 2005
From: lc278 at cornell.edu (Laran Evans)
Date: Tue, 31 May 2005 09:39:50 -0400
Subject: [Twisted-Python] clustering or process group replication
In-Reply-To: <2389d4730505281342a88942f@mail.gmail.com>
References: <4295F4DE.8020403@cornell.edu>
	<2389d4730505281342a88942f@mail.gmail.com>
Message-ID: <429C6926.7000801@cornell.edu>

jarrod roberson wrote:
> We are working on something similar for a project at work also.
> We are using ZeroConf ( aka formerly Apple Rendezvous now Apple Bonjour 
> ) for cluster discovery
> and a Perspective Broker interface for exchanging information.

 From what I've read about ZeroConf it seems like a LAN-only discovery 
mechanism. For clustering a web-server LAN only is fine. But there are 
certainly cases where it would be valuable to integrate WAN nodes.

If I were to build a toolkit I would want it to be able to run optimally 
on a LAN while maintaining the ability to achieve reliability and high 
performance on a WAN as well.

The folks at the AccessGrid at least would I'm sure appreciate that ability.

> We considered reliable multi-cast but decided against it because our 
> clusters are not going to be very big and
> are going to use a kind of inversion of control pattern instead of 
> distributing all the data everywhere.

The keyword in reliable multicast is "reliable". As soon as you have 2 
processes that you need to keep in sync, some form of reliable 
communication is necessary. And by virtue of the fact that there is more 
than one process, sending messages falls under the title of multi-cast.

So, I'm very interested to know how you integrated the IOC pattern to 
achieve reliability. This sounds a bit like a push vs. pull paradigm. If 
  that's the case I can point you to a paper which discusses the 
achievable properties of push, pull and push-pull scenarios.

> But I am interested in a COMMON IDIOM for clustering twisted servers, I 
> would definately say ZeroConf needs to be
> the discovery mechanism, no need to re-invent that wheel and a Twisted 
> implemenation is easy

ZeroConf does definitely look solid. And I'm 100% with you on 
not-reinventing the wheel. So I'll finish reading some of the ZeroConf 
specs to see what it can do.

- Laran




From trepca at gmail.com  Tue May 31 09:49:26 2005
From: trepca at gmail.com (Sebastjan Trepca)
Date: Tue, 31 May 2005 17:49:26 +0200
Subject: [Twisted-Python] twisted.mail.imap4.MessageSet object & imap4
	server example
Message-ID: <cd329af80505310849313e0b0b@mail.gmail.com>

Hi!

1. I don't understand how to use this object. When the fetch method is
called, this object is passed containing the requested messages which
you then return, right? But is there any easy way to just iterate
through it and get the requested UIDis, even if LAST is not set.

2. Where could I find some IMAP4 server examples? 

Thank you.

Regards, Sebastjan



From michele.petrazzo at unipex.it  Tue May 31 10:58:22 2005
From: michele.petrazzo at unipex.it (Michele Petrazzo)
Date: Tue, 31 May 2005 18:58:22 +0200
Subject: [Twisted-Python] wxpython, threadselectreactor and thread
In-Reply-To: <429B089C.4010002@unipex.it>
References: <429B089C.4010002@unipex.it>
Message-ID: <429C97AE.2050900@unipex.it>

Michele Petrazzo wrote:
> 
> 1) Sometime then I open and close my application I receive this
> error:
> 
> Unhandled exception in thread started by <bound method 
> Thread.__bootstrap of <Thread(Thread-1, stopped daemon)>> Traceback
> (most recent call last): File "C:\Python23\lib\threading.py", line
> 451, in __bootstrap self.__stop() File
> "C:\Python23\lib\threading.py", line 460, in __stop 
> self.__block.notifyAll() File "C:\Python23\lib\threading.py", line
> 256, in notifyAll self.notify(len(self.__waiters)) File
> "C:\Python23\lib\threading.py", line 238, in notify currentThread() #
> for side-effect TypeError: 'NoneType' object is not callable
> 

After a lot of tries, I see that this problem, depend on _sendToMain
method of ThreadedSelectReactor class.

If I put a simple try: SomeCode except: print 'exception on
_sendToMain', I see that I have no more errors, but only a simple print.

I don't know why this error occur, but I hope that this little hack can
help the developers.

Michele



From abe at fettig.net  Tue May 31 15:52:46 2005
From: abe at fettig.net (Abe Fettig)
Date: Tue, 31 May 2005 17:52:46 -0400
Subject: [Twisted-Python] Using twisted.conch.recvline
Message-ID: <429CDCAE.6020609@fettig.net>

Hello all,

I'm trying to figure out how to hook up the necessary classes in
twisted.conch.recvline to add line-editing and history to a simple ssh
app. It was easy to modify
http://twistedmatrix.com/projects/conch/documentation/examples/sshsimpleserver.py
to use a custom protocol (a simple command-line interface that sends web
services requests to a JotSpot wiki), but I can't figure out how
recvline is meant to be used. Could someone (Jp?) show me how you'd go
about bolting recvline onto sshsimpleserver?

Thanks!

Abe



