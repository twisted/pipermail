From twisted at itamarst.org  Tue Jan  1 12:40:54 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 01 Jan 2002 19:40:54 +0200
Subject: [Twisted-Python] Return of the "write immediately" patch
Message-ID: <3C31F4A6.4090201@itamarst.org>

Last time I tried this, my benchmarks were being screwed up by a bug in 
twisted's threading. This time I'm getting consistent results - an 
improvement in write performance (large writes over loopback) of 22%!


Index: twisted/internet/abstract.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/abstract.py,v
retrieving revision 1.11
diff -c -r1.11 abstract.py
*** twisted/internet/abstract.py	30 Oct 2001 23:55:39 -0000	1.11
--- twisted/internet/abstract.py	1 Jan 2002 17:40:27 -0000
***************
*** 106,112 ****
           if not self.connected:
               return
           if data:
!             self.unsent = self.unsent + data
               if self.producer is not None:
                   if len(self.unsent) > self.bufferSize:
                       self.producerPaused = 1
--- 106,118 ----
           if not self.connected:
               return
           if data:
!             if not self.unsent:
!                 l = self.writeSomeData(data)
!                 if l < 0 or l == len(data):
!                     return
!                 self.unsent = data[l:]
!             else:
!                 self.unsent = self.unsent + data
               if self.producer is not None:
                   if len(self.unsent) > self.bufferSize:
                       self.producerPaused = 1




From sune-twisted at mel.interspace.dk  Wed Jan  2 11:49:10 2002
From: sune-twisted at mel.interspace.dk (Sune Kirkeby)
Date: Wed, 2 Jan 2002 17:49:10 +0100
Subject: [Twisted-Python] [patch] mktap web --resource
Message-ID: <20020102174909.A26812@mel.interspace.dk>

Hi, all!

Attached is a short patch to add a --resource option to "mktap web",
here is the --help for it:

  -r, --resource=  <class> is the name (including module) of a subclass of
                   twisted.web.resource.Resource to publish.

So you can have any subclass of t.w.r.Resource be the 'root' of your
web-server.


I have also been working on a few other things:

- an async Pytho-only PostgreSQL interface (not t.e.adbapi
  compatible, since I am not usre I like it's interface and need
  to play a bit before I figure out how I would like an async
  SQL-database interface to behave.)

- a SQLResultWidget, very dull right now but I will probably hack
  some BoboDTML support into it.

first-post-but-not-like-/.-ly yrs,

-- 
Sune Kirkeby | /* we're still looking for the end of the
             |  * server's header ... (does that make header
             |  * parsing an "out of body experience" ?  */
             |                          -- jcc.c in junkex source-code



From sune-twisted at mel.interspace.dk  Wed Jan  2 12:00:40 2002
From: sune-twisted at mel.interspace.dk (Sune Kirkeby)
Date: Wed, 2 Jan 2002 18:00:40 +0100
Subject: [Twisted-Python] [patch] mktap web --resource
In-Reply-To: <20020102174909.A26812@mel.interspace.dk>; from sune-twisted@mel.interspace.dk on Wed, Jan 02, 2002 at 05:49:10PM +0100
References: <20020102174909.A26812@mel.interspace.dk>
Message-ID: <20020102180040.A27070@mel.interspace.dk>

[ Sune Kirkeby ]
> Attached is a short patch

and-here-it-really-is'ly

-- 
Sune Kirkeby | Help stamp out and abolish redundancy
             | and repetition.
-------------- next part --------------
diff --exclude-from=diffignore -Naur Twisted-0.12.3/twisted/tap/web.py Twisted/twisted/tap/web.py
--- Twisted-0.12.3/twisted/tap/web.py	Wed Nov 28 08:17:29 2001
+++ Twisted/twisted/tap/web.py	Wed Jan  2 17:31:02 2002
@@ -73,6 +73,18 @@
 
     opt_s = opt_static
 
+    def opt_resource(self, path):
+        """<class> is the name (including module) of a subclass of
+        twisted.web.resource.Resource to publish."""
+
+        i = string.rindex(path, '.')
+        module_name, klass_name = path[:i], path[i+1:]
+
+        module = __import__(module_name)
+        klass = getattr(module, klass_name)
+        self.root = klass()
+
+    opt_r = opt_resource
 
 def getPorts(app, config):
     ports = []

From sune-twisted at mel.interspace.dk  Wed Jan  2 12:07:17 2002
From: sune-twisted at mel.interspace.dk (Sune Kirkeby)
Date: Wed, 2 Jan 2002 18:07:17 +0100
Subject: [Twisted-Python] [patch] mktap web --resource
In-Reply-To: <20020102174909.A26812@mel.interspace.dk>; from sune-twisted@mel.interspace.dk on Wed, Jan 02, 2002 at 05:49:10PM +0100
References: <20020102174909.A26812@mel.interspace.dk>
Message-ID: <20020102180717.A27178@mel.interspace.dk>

[ Sune Kirkeby ]
> I have also been working on a few other things:

Which reminds me:  Is there no anonymous CVS access to the twisted
repository?  It would be nice to have.

talking-with-myself'ly

-- 
Sune Kirkeby | Hailstorms tend to be distructive.  And one should not need
             | to use a passport in one's own country.
             |                           -- David Sugar on arch at dotgnu.org



From sune at mel.interspace.dk  Wed Jan  2 11:55:54 2002
From: sune at mel.interspace.dk (Sune Kirkeby)
Date: Wed, 2 Jan 2002 17:55:54 +0100
Subject: [Twisted-Python] [patch] mktap web --resource
In-Reply-To: <20020102174909.A26812@mel.interspace.dk>; from sune-twisted@mel.interspace.dk on Wed, Jan 02, 2002 at 05:49:10PM +0100
References: <20020102174909.A26812@mel.interspace.dk>
Message-ID: <20020102175554.A26964@mel.interspace.dk>

[ Sune Kirkeby ]
> Attached is a short patch

and-here-it-really-is'ly

-- 
Sune Kirkeby | STUPIDITY -- Quitters Never Win, Winners Never Quit,
             | But Those Who Never Win AND Never Quit Are Idiots.
-------------- next part --------------
diff --exclude-from=diffignore -Naur Twisted-0.12.3/twisted/tap/web.py Twisted/twisted/tap/web.py
--- Twisted-0.12.3/twisted/tap/web.py	Wed Nov 28 08:17:29 2001
+++ Twisted/twisted/tap/web.py	Wed Jan  2 17:31:02 2002
@@ -73,6 +73,18 @@
 
     opt_s = opt_static
 
+    def opt_resource(self, path):
+        """<class> is the name (including module) of a subclass of
+        twisted.web.resource.Resource to publish."""
+
+        i = string.rindex(path, '.')
+        module_name, klass_name = path[:i], path[i+1:]
+
+        module = __import__(module_name)
+        klass = getattr(module, klass_name)
+        self.root = klass()
+
+    opt_r = opt_resource
 
 def getPorts(app, config):
     ports = []

From glyph at twistedmatrix.com  Wed Jan  2 12:13:45 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 02 Jan 2002 11:13:45 -0600
Subject: [Twisted-Python] [patch] mktap web --resource
In-Reply-To: <20020102180717.A27178@mel.interspace.dk>
References: <20020102174909.A26812@mel.interspace.dk> 
	<20020102180717.A27178@mel.interspace.dk>
Message-ID: <1009991625.1908.12.camel@zelda>

On Wed, 2002-01-02 at 11:07, Sune Kirkeby wrote:
> Which reminds me:  Is there no anonymous CVS access to the twisted
> repository?  It would be nice to have.

You can chalk this up to random neurotic behavior on my part.  I'm a bit
paranoid.  However, somewhat more sane Twisted developers than I are
working on rectifying the problem.

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From twisted at itamarst.org  Wed Jan  2 12:18:25 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 02 Jan 2002 19:18:25 +0200
Subject: [Twisted-Python] [patch] mktap web --resource
References: <20020102174909.A26812@mel.interspace.dk> 	<20020102180717.A27178@mel.interspace.dk> <1009991625.1908.12.camel@zelda>
Message-ID: <3C3340E1.5060502@itamarst.org>

Glyph Lefkowitz wrote:


> You can chalk this up to random neurotic behavior on my part.  I'm a bit
> paranoid.  However, somewhat more sane Twisted developers than I are
> working on rectifying the problem.


Really? Nice to know - is this ViewCVS tarballs or real anonymous pserver CVS?







From twisted at itamarst.org  Wed Jan  2 12:20:15 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 02 Jan 2002 19:20:15 +0200
Subject: [Twisted-Python] [patch] mktap web --resource
References: <20020102174909.A26812@mel.interspace.dk>
Message-ID: <3C33414F.6020409@itamarst.org>

Sune Kirkeby wrote:

> - an async Pytho-only PostgreSQL interface (not t.e.adbapi
>   compatible, since I am not usre I like it's interface and need
>   to play a bit before I figure out how I would like an async
>   SQL-database interface to behave.)

Very cool! There's pypgsql's libpq wrapper which does async, but it's C, and 
the API is basically the same as the C. Any chance for async large object 
support as well?




From ivo at amaze.nl  Wed Jan  2 12:46:42 2002
From: ivo at amaze.nl (Ivo van der Wijk)
Date: Wed, 2 Jan 2002 18:46:42 +0100
Subject: [Twisted-Python] IRC protocol rewrite?
Message-ID: <20020102184642.A29692@amaze.nl>

Hi All,

I'm currently investigating the IRC Protocol as implemented by twisted,
to see if I perhaps can use it in my irc client, or if it perhaps can
use code from my irc protocol parsing.

However, I noticed some bugs and (imho) design failures in the current
implementation, which makes the code not very usefull for any other 
use than what it's currently used for (twisted irc client + server?)

For example, channels are hardcoded as starting with '#', i.e.
IRCClient.join prepends a '#' to the channelname. Hoewever, most servers
support alernative style channels such as &channel (local channels),
+channel (modeless channels), and perhaps more.

Furthermore, IMHO, the IRCClient class implements too many protocols
in one class. IRC, CTCP and DCC are distinct protocols, and each belong
in their own class.

Lastly, the current parsemsg routine can't handle ipv6 addresses in certain 
replies, i.e. a 311 (whois) reply like:

:irc.xs4all.nl 311 VladDrac [p] -patrick 3ffe:2500:900:2000:1337:1337:1337:1337 *:foo

will be parsed incorrectly. I may provide a patch for this later.

Is replacing the current IRC protocol with a (non-api-compatible) new
protocol discussable? If so, I'll make some suggestions on how I would
implement the protocol.

Cheers,

	Ivo

-- 
Drs. I.R. van der Wijk                              -=-
Brouwersgracht 132                      Amaze Internet Services V.O.F.
1013 HA Amsterdam, NL                               -=-
Tel: +31-20-4688336                       Linux/Web/Zope/SQL/MMBase
Fax: +31-20-4688337                           Network Solutions
Web:     http://www.amaze.nl/                    Consultancy
Email:   ivo at amaze.nl                               -=-



From carmstro at twistedmatrix.com  Wed Jan  2 13:50:25 2002
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Wed, 2 Jan 2002 12:50:25 -0600
Subject: [Twisted-Python] [patch] mktap web --resource
In-Reply-To: <20020102174909.A26812@mel.interspace.dk>
References: <20020102174909.A26812@mel.interspace.dk>
Message-ID: <20020102185024.GA20144@twistedmatrix.com>

On Wed, Jan 02, 2002 at 05:49:10PM +0100, Sune Kirkeby wrote:
> Hi, all!
> 
> Attached is a short patch to add a --resource option to "mktap web",
> here is the --help for it:
> 
>   -r, --resource=  <class> is the name (including module) of a subclass of
>                    twisted.web.resource.Resource to publish.
> 
> So you can have any subclass of t.w.r.Resource be the 'root' of your
> web-server.

I implemented this a long time ago with the '-m' option, which took a python
filename and a classname, but itamar shwacked it because no one was using
it. I'm not sure if it should be brought back or not, but you may want to
look into using plugins.

How's that config interface coming, which should obsolete all of this? ;-)

bugging-people-about-code-but-doing-none-myself-ly yours,

radix




From sune-twisted at mel.interspace.dk  Wed Jan  2 15:32:34 2002
From: sune-twisted at mel.interspace.dk (Sune Kirkeby)
Date: Wed, 2 Jan 2002 21:32:34 +0100
Subject: [Twisted-Python] Bug in t.w.w.WidgetPage
Message-ID: <20020102213234.A30425@mel.interspace.dk>

Hi all,

I think there might be a bug lurking in t.w.w.WidgetPage's handling
of Deferreds.  Take a look at t.w.w.WidgetPage.callback:

    def callback(self, result, position, decNeedsHeaders):
        if result != FORGET_IT:
            self.needsHeaders = self.needsHeaders - decNeedsHeaders
        else:
            result = [FORGET_IT]
        for i in xrange(len(result)):
            if isinstance(result[i], defer.Deferred):
                self._addDeferred(result[i], position+i)
        # print 'CALLBACK:',self.lst, position, result
        if not isinstance(result, types.ListType):
            result = [result]
        self.lst[position:position+1] = result
        assert self.position <= position
        self.keepRendering()
        for r in result:
            if isinstance(r, defer.Deferred):
                r.arm()

Now consider this sequence of events:

(1) We initialize a t.w.w.WidgetPage with two Deferreds (head and
    foot), so in our WidgetPage (let us call it foo) we have
    foo.lst = [head, foot].

(2) mouth is now almost done, so it defers the rest of it's
    computation, and callback's with a string 'Hello, ' and
    a Deferred (let us call it mouth).

(3) After foo.callback is done we now have that
    foo.lst = ['Hello, ', mouth, foot].

(4) Now foot is done and callback's with a string 'World!'.

(5) After foo.callback is done this time we have that
    foo.lst = ['Hello, ', 'World!', foot]

Whoa!  We just put our foot in our mouth!  So to speak :-)

-- 
Sune Kirkeby | In general, they do what you want, unless you want
             | consistency.       --Larry Wall in the perl man page



From glyph at twistedmatrix.com  Wed Jan  2 17:32:11 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 02 Jan 2002 16:32:11 -0600
Subject: [Twisted-Python] IRC protocol rewrite?
In-Reply-To: <20020102184642.A29692@amaze.nl>
References: <20020102184642.A29692@amaze.nl>
Message-ID: <1010010731.1908.21.camel@zelda>

On Wed, 2002-01-02 at 11:46, Ivo van der Wijk wrote:
> Hi All,
> 
> I'm currently investigating the IRC Protocol as implemented by twisted,
> to see if I perhaps can use it in my irc client, or if it perhaps can
> use code from my irc protocol parsing.
> 
> However, I noticed some bugs and (imho) design failures in the current
> implementation, which makes the code not very usefull for any other 
> use than what it's currently used for (twisted irc client + server?)
> 
> For example, channels are hardcoded as starting with '#', i.e.
> IRCClient.join prepends a '#' to the channelname. Hoewever, most servers
> support alernative style channels such as &channel (local channels),
> +channel (modeless channels), and perhaps more.

This is an intentional design failure :).

The feature-set of IRC is highly idiosyncratic, and difficult to
represent in terms of "real" abstractions -- for example, the notion of
a "modeless" channel doesn't particularly make sense outside of the
world of IRC's implementation; there are no gradations between "modeful"
and "modeless" channels, unless you have a Services implementation w/
ChanServ and mode lock.  "local" channels don't either, considering that
they are really just a way to introduce an artificial barrier between
servers.  The whole point of the R in IRC is to avoid that :)

I have to agree that for the client, it's probably a bad idea to enforce
restrictions like that, since it's designed to connect to other IRC
servers, and be generally useful to connect to external services which
may be set up in bizarre configurations.

On the server, however, I would like to drop support for as many IRCisms
as reasonably possible, so that we can implement a richer set of
functionality; probably through the "services" idiom, since that allows
for fairly arbitrary specification of inputs (as opposed to the limited
set of client-understood modes that one may specify, and the 26
allowable characters).

> Furthermore, IMHO, the IRCClient class implements too many protocols
> in one class. IRC, CTCP and DCC are distinct protocols, and each belong
> in their own class.

I disagree.  IRC is a poorly specified protocol in its RFC, so the
"usual" extensions are a part of any reasonable IRC implementation these
days.  Unless you can come up with a requirement for functionality that
would require them being in different classes, I think they should stay
where they are.

> Lastly, the current parsemsg routine can't handle ipv6 addresses in certain 
> replies, i.e. a 311 (whois) reply like:
> 
> :irc.xs4all.nl 311 VladDrac [p] -patrick 3ffe:2500:900:2000:1337:1337:1337:1337 *:foo
> 
> will be parsed incorrectly. I may provide a patch for this later.

Whoops.  That definitely sounds like it needs to be fixed :)

> Is replacing the current IRC protocol with a (non-api-compatible) new
> protocol discussable? If so, I'll make some suggestions on how I would
> implement the protocol.

Certainly discussable, especially since the IRC support is not as good
as it could be.  If you replace it with something non-API-compatible,
I'd like to hear from the authors of code that this would break, and
certainly refactor any code currently in Twisted to work the new way.

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From sune-twisted at mel.interspace.dk  Wed Jan  2 17:33:51 2002
From: sune-twisted at mel.interspace.dk (Sune Kirkeby)
Date: Wed, 2 Jan 2002 23:33:51 +0100
Subject: [Twisted-Python] Bug in t.w.w.WidgetPage
In-Reply-To: <20020102213234.A30425@mel.interspace.dk>; from sune-twisted@mel.interspace.dk on Wed, Jan 02, 2002 at 09:32:34PM +0100
References: <20020102213234.A30425@mel.interspace.dk>
Message-ID: <20020102233351.A32086@mel.interspace.dk>

[ Sune Kirkeby ]
> I think there might be a bug lurking in t.w.w.WidgetPage's
> handling of Deferreds.

And here is a patch to fix it.  The patch does away with Deferred
holding their positions in lst, instead a Deferred now hold a
sentinel, that is put into lst with the Deferred.

When we need the position in callback we go looking for the sentinel
the Deferred gave us.  This also allows us to stop keeping data we
have written to the request (i.e. lst now only holds the Deferreds
and strings that have not been sent).

Also, the patch adds NOT_DONE_YET support to WidgetPage.  This works
by Deferreds callback'ing with a tuple (NOT_DONE_YET,
partial_result) which is insert into lst before the Deferred.

So, now Deferreds can callback to WidgetPage multiple times with
partial results. (Not sure if this is abusing the Deferred protocol,
but it solves an itch I had :-).

Comments?

-- 
Sune Kirkeby | Teori er n?r vi har forst?et alting, men intet virker. Praksis
             | er n?r alting virker, men ingen forst?r hvorfor. Hos os
             | er de to ting forenet: Intet virker og ingen forst?r hvorfor!



From sune-twisted at mel.interspace.dk  Wed Jan  2 17:37:08 2002
From: sune-twisted at mel.interspace.dk (Sune Kirkeby)
Date: Wed, 2 Jan 2002 23:37:08 +0100
Subject: [Twisted-Python] Bug in t.w.w.WidgetPage
In-Reply-To: <20020102233351.A32086@mel.interspace.dk>; from sune-twisted@mel.interspace.dk on Wed, Jan 02, 2002 at 11:33:51PM +0100
References: <20020102213234.A30425@mel.interspace.dk> <20020102233351.A32086@mel.interspace.dk>
Message-ID: <20020102233708.B32086@mel.interspace.dk>

[ Sune Kirkeby ]
> And here is a patch to fix it.

s/WidgetPage/RenderSession/g, in my previous two mails.

i-need-a-mua-that-reads-my-mind-and-attach-patches'ly,

-- 
Sune Kirkeby | Your superior intellect is no match for
             | our puny weapons.
-------------- next part --------------
diff --exclude-from=diffignore -Naur Twisted-CVS/twisted/web/widgets.py Twisted/twisted/web/widgets.py
--- Twisted-CVS/twisted/web/widgets.py	Wed Dec 12 13:00:14 2001
+++ Twisted/twisted/web/widgets.py	Wed Jan  2 23:17:53 2002
@@ -474,72 +474,122 @@
         return html.PRE(io.getvalue())
 
 class RenderSession:
+    """I handle rendering of a list of deferreds, outputting their
+    results in correct order."""
+
+    class Sentinel:
+        pass
+
     def __init__(self, lst, request):
         self.lst = lst
         self.request = request
-        self.position = 0
         self.needsHeaders = 0
-        pos = 0
+        self.beforeBody = 1
+
         toArm = []
-        # You might want to set a header from a deferred, in which case you
-        # have to set an attribute -- needsHeader.
-        for item in lst:
+        for i in range(len(self.lst)):
+            item = self.lst[i]
             if isinstance(item, defer.Deferred):
-                self._addDeferred(item, pos)
+                self.lst[i] = (self._addDeferred(item), item)
                 toArm.append(item)
-            pos = pos + 1
+    
         self.keepRendering()
-        # print "RENDER: DONE WITH INITIAL PASS"
         for item in toArm:
             item.arm()
 
-    def _addDeferred(self, deferred, position):
+    def _addDeferred(self, deferred):
+        sentinel = self.Sentinel()
         if hasattr(deferred, 'needsHeader'):
+            # You might want to set a header from a deferred, in which
+            # case you have to set an attribute -- needsHeader.
             self.needsHeaders = self.needsHeaders + 1
-            args = (position, 1)
+            args = (sentinel, 1)
         else:
-            args = (position, 0)
+            args = (sentinel, 0)
         deferred.addCallbacks(self.callback, self.callback,
                               callbackArgs=args, errbackArgs=args)
+        return sentinel
 
-    def callback(self, result, position, decNeedsHeaders):
+    def callback(self, result, sentinel, decNeedsHeaders):
         if result != FORGET_IT:
             self.needsHeaders = self.needsHeaders - decNeedsHeaders
         else:
             result = [FORGET_IT]
-        for i in xrange(len(result)):
-            if isinstance(result[i], defer.Deferred):
-                self._addDeferred(result[i], position+i)
-        # print 'CALLBACK:',self.lst, position, result
-        if not isinstance(result, types.ListType):
+        
+        # Make sure result is a sequence,
+        if not type(result) in (types.ListType, types.TupleType):
             result = [result]
-        self.lst[position:position+1] = result
-        assert self.position <= position
+
+        # If the deferred does not wish to produce it's result all at
+        # once, it can give us a partial result as
+        #  (NOT_DONE_YET, partial_result)
+        if result[0] is NOT_DONE_YET:
+            done = 0
+            result = result[1]
+            if not type(result) in (types.ListType, types.TupleType):
+                result = [result]
+        else:
+            done = 1
+
+        toArm = []
+        for i in xrange(len(result)):
+            item = result[i]
+            if isinstance(item, defer.Deferred):
+                result[i] = (self._addDeferred(item), item)
+                toArm.append(item)
+
+        for position in range(len(self.lst)):
+            item = self.lst[position]
+            if type(item) is types.TupleType and len(item) > 0:
+                if item[0] is sentinel:
+                    break
+        else:
+            raise 'Sentinel for Deferred not found!'
+
+        if done:
+            self.lst[position:position+1] = result
+        else:
+            self.lst[position:position] = result
+
+        # Consolidate strings to minimize length of list,
+        for i in range(1, len(self.lst)):
+            last = type(self.lst[i-1]) is types.StringType
+            this = type(self.lst[i]) is types.StringType
+            if last and this:
+                self.lst[i-1:i+1] = [self.lst[i-1] + self.lst[i]]
+
         self.keepRendering()
-        for r in result:
-            if isinstance(r, defer.Deferred):
-                r.arm()
+        for r in toArm:
+            r.arm()
 
 
     def keepRendering(self):
         if self.needsHeaders:
-            # short circuit actual rendering process until we're sure no more
-            # deferreds need to set headers...
+            # short circuit actual rendering process until we're sure no
+            # more deferreds need to set headers...
             return
+
         assert self.lst is not None, "This shouldn't happen."
         while 1:
-            item = self.lst[self.position]
-            if self.position == 0 and item == FORGET_IT:
-                # If I haven't moved yet, and the widget wants to take over the page, let it do so!
+            item = self.lst[0]
+            if self.beforeBody and item == FORGET_IT:
+                # If I haven't moved yet, and the widget wants to take
+                # over the page, let it do so!
                 return
+            
             if isinstance(item, types.StringType):
+                self.beforeBody = 0
                 self.request.write(item)
-            elif isinstance(item, defer.Deferred):
-                return
+            elif type(item) is types.TupleType and len(item) > 0:
+                if isinstance(item[0], self.Sentinel):
+                    return
             else:
-                self.request.write("RENDERING UNKNOWN: %s" % html.PRE(repr(item)))
-            self.position = self.position + 1
-            if self.position == len(self.lst):
+                self.beforeBody = 0
+                unknown = html.PRE(repr(item))
+                self.request.write("RENDERING UNKNOWN: %s" % unknown)
+
+            del self.lst[0]
+            if len(self.lst) == 0:
                 self.lst = None
                 self.request.finish()
                 return

From acapnotic at twistedmatrix.com  Wed Jan  2 17:38:00 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 02 Jan 2002 14:38:00 -0800
Subject: [Twisted-Python] IRC protocol rewrite?
In-Reply-To: <20020102184642.A29692@amaze.nl>
References: <20020102184642.A29692@amaze.nl>
Message-ID: <1010011080.4106.4.camel@troglodyte>

On Wed, 2002-01-02 at 09:46, Ivo van der Wijk wrote:
> However, I noticed some bugs and (imho) design failures in the current
> implementation, which makes the code not very usefull for any other 
> use than what it's currently used for (twisted irc client + server?)

(And Tendril.  Don't forget Tendril, in twisted.words.tendril.)
I'm interested in hearing what makes it "not very useful" though.  I
didn't really get a sense of that from your message.

> For example, channels are hardcoded as starting with '#', i.e.
> IRCClient.join prepends a '#' to the channelname. Hoewever, most servers
> support alernative style channels such as &channel (local channels),
> +channel (modeless channels), and perhaps more.

Valid point.  Of course, nobody actually uses those in real life
anymore, but it'd be fine to support it in the interest of completeness.

> Furthermore, IMHO, the IRCClient class implements too many protocols
> in one class. IRC, CTCP and DCC are distinct protocols, and each belong
> in their own class.

There's some sense to this too.  As a Protocol class, IRCClient is
overfeatured (as a "client", maybe it's okay).  I'm not quite sure how
to split off the CTCP stuff though, as intertwined as the CTCP messages
are with IRC.  Would you define IRCClient not only as a Protocol, but as
a Transport for CTCP?  Eaugh...  A somewhat more mundane option would be
to just put all the ctcp* methods in a mixin class.  That might make the
organization a little tidier, but it wouldn't change the interface at
all, so I'm not sure if that would satisfy your concerns or not.

As for DCC, it's in seperate protocol classes already.

> Lastly, the current parsemsg routine can't handle ipv6 addresses in certain 
> replies, i.e. a 311 (whois) reply like:
> 
> :irc.xs4all.nl 311 VladDrac [p] -patrick 3ffe:2500:900:2000:1337:1337:1337:1337 *:foo
> 
> will be parsed incorrectly. I may provide a patch for this later.

Eh?  It's not immediately obvious to me what will break.  But patches
are always fine.  =)

> Is replacing the current IRC protocol with a (non-api-compatible) new
> protocol discussable? If so, I'll make some suggestions on how I would
> implement the protocol.

IMO, speaking as the guy who's probably spent the most time with it,
it's certainly discussable.  Unless there was some message I didn't read
from the BDFL about an API freeze. ;)  

"Oh no, it's a trap!"-ly,

 - Kevin (Acapnotic)

-- 
The moon is waning gibbous, 86.8% illuminated, 18.3 days old.





From glyph at twistedmatrix.com  Wed Jan  2 17:46:08 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 02 Jan 2002 16:46:08 -0600
Subject: [Twisted-Python] Bug in t.w.w.WidgetPage
In-Reply-To: <20020102233351.A32086@mel.interspace.dk>
References: <20020102213234.A30425@mel.interspace.dk> 
	<20020102233351.A32086@mel.interspace.dk>
Message-ID: <1010011568.571.24.camel@zelda>

On Wed, 2002-01-02 at 16:33, Sune Kirkeby wrote:
> [ Sune Kirkeby ]
> > I think there might be a bug lurking in t.w.w.WidgetPage's
> > handling of Deferreds.
> 
> And here is a patch to fix it.
...
> Comments?

I haven't had time to review it yet, but thanks a lot!  This is a bug
that I'd suspected was in twisted.web for some time now, but hadn't had
time to verify or test for.

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From ivo at amaze.nl  Wed Jan  2 18:18:34 2002
From: ivo at amaze.nl (Ivo van der Wijk)
Date: Thu, 3 Jan 2002 00:18:34 +0100
Subject: [Twisted-Python] IRC protocol rewrite?
In-Reply-To: <1010011080.4106.4.camel@troglodyte>; from acapnotic@twistedmatrix.com on Wed, Jan 02, 2002 at 02:38:00PM -0800
References: <20020102184642.A29692@amaze.nl> <1010011080.4106.4.camel@troglodyte>
Message-ID: <20020103001834.B29692@amaze.nl>

On Wed, Jan 02, 2002 at 02:38:00PM -0800, Kevin Turner wrote:
> On Wed, 2002-01-02 at 09:46, Ivo van der Wijk wrote:
> > However, I noticed some bugs and (imho) design failures in the current
> > implementation, which makes the code not very usefull for any other 
> > use than what it's currently used for (twisted irc client + server?)
> 
> (And Tendril.  Don't forget Tendril, in twisted.words.tendril.)
> I'm interested in hearing what makes it "not very useful" though.  I
> didn't really get a sense of that from your message.
> 

The current implementation is rather specific. For example, it assumes
only #-like channels exist, it takes actions/decisions the client builder
would rather like to implement (i.e. irc_ERR_NICKNAMEINUSE will generate
a new nickname by appending a _ - who says I want this in my client?),
ctcp_PING immediately sends a ping reply - this won't work with my
ignore list, etc.

I'm not saying this is wrong behaviour, it just does not belong at this
level in the protocol. I just want a basic abstraction of the server
connecting/disconnecting, server messages receiving (dispatching) and
sending. Anything else should be implemented in a derived/separate class.

> > For example, channels are hardcoded as starting with '#', i.e.
> > IRCClient.join prepends a '#' to the channelname. Hoewever, most servers
> > support alernative style channels such as &channel (local channels),
> > +channel (modeless channels), and perhaps more.
> 
> Valid point.  Of course, nobody actually uses those in real life
> anymore, but it'd be fine to support it in the interest of completeness.
> 

IRCops tend to visit channels like &ERRORS and &NOTICES (at least ircnet
supports this) to view server messages. Besides, you simply don't adhere to
the 'protocol' (eventhough it's poorly documented). And we have MIRC for
that, right? :)

> > Furthermore, IMHO, the IRCClient class implements too many protocols
> > in one class. IRC, CTCP and DCC are distinct protocols, and each belong
> > in their own class.
> 
> There's some sense to this too.  As a Protocol class, IRCClient is
> overfeatured (as a "client", maybe it's okay).  I'm not quite sure how
> to split off the CTCP stuff though, as intertwined as the CTCP messages
> are with IRC.  Would you define IRCClient not only as a Protocol, but as
> a Transport for CTCP?  Eaugh...  A somewhat more mundane option would be
> to just put all the ctcp* methods in a mixin class.  That might make the
> organization a little tidier, but it wouldn't change the interface at
> all, so I'm not sure if that would satisfy your concerns or not.
> 

The name IRCClient is a bit misleading, but the basic IRC protocol *is*
the transport for CTCP! CTCP is a separate protocol encoded in ^A's in
PRIVMSG/NOTICE. Also, CTCP is way less documented than the irc protocol,
and clients are (somewhat) free to make their own CTCP extension (i.e.
you coud send whiteboard drawing commands over ctcp or communicate 
gameplay over ctcp over irc. Some clients (zircon?) actually do this)

> As for DCC, it's in seperate protocol classes already.
> 

There's is quite some DCC support in the IRCClient class that I have here
(twisted 0.12.3), i.e. ctcpQuery_DCC which initiates DCC, maintains a list
of sessions, etc

> > Lastly, the current parsemsg routine can't handle ipv6 addresses in certain 
> > replies, i.e. a 311 (whois) reply like:
> > 
> > :irc.xs4all.nl 311 VladDrac [p] -patrick 3ffe:2500:900:2000:1337:1337:1337:1337 *:foo
> > 
> > will be parsed incorrectly. I may provide a patch for this later.
> 
> Eh?  It's not immediately obvious to me what will break.  But patches
> are always fine.  =)
>

>>> parsemsg(":irc.xs4all.nl 311 VladDrac [p] -patrick 3ffe:2500:900:2000:1337:1337:1337:1337 *:foo")
('irc.xs4all.nl', '311', ['VladDrac', '[p]', '-patrick', '3ffe', '2500:900:2000:1337:1337:1337:1337 *:foo'])

It's the assumption that a ':' will start the remainder of the argument
list, which is not true if one of the arguments is a ipv6 address.

> > Is replacing the current IRC protocol with a (non-api-compatible) new
> > protocol discussable? If so, I'll make some suggestions on how I would
> > implement the protocol.
> 
> IMO, speaking as the guy who's probably spent the most time with it,
> it's certainly discussable.  Unless there was some message I didn't read
> from the BDFL about an API freeze. ;)  
> 

Ok :)

	Ivo

-- 
Drs. I.R. van der Wijk                              -=-
Brouwersgracht 132                      Amaze Internet Services V.O.F.
1013 HA Amsterdam, NL                               -=-
Tel: +31-20-4688336                       Linux/Web/Zope/SQL/MMBase
Fax: +31-20-4688337                           Network Solutions
Web:     http://www.amaze.nl/                    Consultancy
Email:   ivo at amaze.nl                               -=-



From acapnotic at twistedmatrix.com  Wed Jan  2 19:11:34 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 02 Jan 2002 16:11:34 -0800
Subject: [Twisted-Python] IRC protocol rewrite?
In-Reply-To: <20020103001834.B29692@amaze.nl>
References: <20020102184642.A29692@amaze.nl>
	<1010011080.4106.4.camel@troglodyte>  <20020103001834.B29692@amaze.nl>
Message-ID: <1010016694.4110.8.camel@troglodyte>

On Wed, 2002-01-02 at 15:18, Ivo van der Wijk wrote:

> it takes actions/decisions the client builder
> would rather like to implement (i.e. irc_ERR_NICKNAMEINUSE will generate
> a new nickname by appending a _ - who says I want this in my client?),
> ctcp_PING immediately sends a ping reply - this won't work with my
> ignore list, etc.

Ah, this is the information I was looking for.  (The bit about
supporting & channels is a minor detail, worth fixing but not  grounds
for reimplementation.)  In reply, let me just say that subclassing is a
wonderful and powerful thing.  You are invited, encouraged even, to
override any methods which don't do what you want in your subclass. 
Default implementations are provided in the base class for things like
irc_ERR_NICKNAMEINUSE because every IRC client needs to have *some*
implementation of them, or else it will likely be so broken that it
won't be able to sign on.  But again, don't hesitate to override the
default methods with something else.  This class uses the
"""getattr(self, "prefix_%s" % command)()""" idiom, so you can always
add methods for more IRC or CTCP message types (i.e. Zircon extensions)
in your subclass too.

> There's is quite some DCC support in the IRCClient class that I have here
> (twisted 0.12.3), i.e. ctcpQuery_DCC which initiates DCC, maintains a list
> of sessions, etc

That's because it's a CTCP query which initiates the DCC connection. 
The DCC connection itself (as opposed to things talking about DCC
connections) has its own class and instance.

As for maintaining a list of sessions, I think that this does belong in
a "client" implementation, but I agree that this is not state that a
"protocol" class should be concerned with.  It's only there because I
couldn't see another way for a subclass to figure out which DCC sessions
were created, which is something you probably want to know for your
interface.  Perhaps the default ctcpQuery_DCC method should pass back
the DCC session as its return value?

-- 
The moon is waning gibbous, 86.3% illuminated, 18.3 days old.





From ivo at amaze.nl  Thu Jan  3 08:34:35 2002
From: ivo at amaze.nl (Ivo van der Wijk)
Date: Thu, 3 Jan 2002 14:34:35 +0100
Subject: [Twisted-Python] IRC protocol rewrite?
In-Reply-To: <1010016694.4110.8.camel@troglodyte>; from acapnotic@twistedmatrix.com on Wed, Jan 02, 2002 at 04:11:34PM -0800
References: <20020102184642.A29692@amaze.nl> <1010011080.4106.4.camel@troglodyte> <20020103001834.B29692@amaze.nl> <1010016694.4110.8.camel@troglodyte>
Message-ID: <20020103143435.E29692@amaze.nl>

On Wed, Jan 02, 2002 at 04:11:34PM -0800, Kevin Turner wrote:
> On Wed, 2002-01-02 at 15:18, Ivo van der Wijk wrote:
> 
> > it takes actions/decisions the client builder
> > would rather like to implement (i.e. irc_ERR_NICKNAMEINUSE will generate
> > a new nickname by appending a _ - who says I want this in my client?),
> > ctcp_PING immediately sends a ping reply - this won't work with my
> > ignore list, etc.
> 
> Ah, this is the information I was looking for.  (The bit about
> supporting & channels is a minor detail, worth fixing but not  grounds
> for reimplementation.)  In reply, let me just say that subclassing is a
> wonderful and powerful thing.  You are invited, encouraged even, to
> override any methods which don't do what you want in your subclass. 
> Default implementations are provided in the base class for things like
> irc_ERR_NICKNAMEINUSE because every IRC client needs to have *some*
> implementation of them, or else it will likely be so broken that it
> won't be able to sign on.  But again, don't hesitate to override the
> default methods with something else.  This class uses the
> """getattr(self, "prefix_%s" % command)()""" idiom, so you can always
> add methods for more IRC or CTCP message types (i.e. Zircon extensions)
> in your subclass too.
> 

Well, sure, I can override anything. But in this specific case I'd have
to override so much (and stick with redundant unused code), that I'd rather
re-implement things.

Proposal: I will implement the protocol the way I see it for my irc client,
somewhat based on the current code / the twisted philosophy (my client
needs a rewrite in that area anyway), and if others think my code is 
leaner/better/whatever than the current, we may consider replacing the
current irc protocol with it.

> > There's is quite some DCC support in the IRCClient class that I have here
> > (twisted 0.12.3), i.e. ctcpQuery_DCC which initiates DCC, maintains a list
> > of sessions, etc
> 
> That's because it's a CTCP query which initiates the DCC connection. 
> The DCC connection itself (as opposed to things talking about DCC
> connections) has its own class and instance.
> 

IMHO, this would be like an IP layer building (and maintaining) TCP sessions. 
>From the purists point of view, if I want the basic irc protocol (i.e. for 
some web messaging interface), I would have the redundant ctcp, dcc etc code 
as well. Sure, having it lingering and not using it around won't break 
anything, but the nice thing about OO is that you can encapsulate specific 
functionality into objects, extend them with extra (higher-level) features, 
etc.

> As for maintaining a list of sessions, I think that this does belong in
> a "client" implementation, but I agree that this is not state that a
> "protocol" class should be concerned with.  It's only there because I
> couldn't see another way for a subclass to figure out which DCC sessions
> were created, which is something you probably want to know for your
> interface.  Perhaps the default ctcpQuery_DCC method should pass back
> the DCC session as its return value?

That would be better, yes.

Cheers,

	Ivo

-- 
Drs. I.R. van der Wijk                              -=-
Brouwersgracht 132                      Amaze Internet Services V.O.F.
1013 HA Amsterdam, NL                               -=-
Tel: +31-20-4688336                       Linux/Web/Zope/SQL/MMBase
Fax: +31-20-4688337                           Network Solutions
Web:     http://www.amaze.nl/                    Consultancy
Email:   ivo at amaze.nl                               -=-



From sune-twisted at mel.interspace.dk  Fri Jan  4 14:06:19 2002
From: sune-twisted at mel.interspace.dk (Sune Kirkeby)
Date: Fri, 4 Jan 2002 20:06:19 +0100
Subject: [Twisted-Python] [patch] mktap web --resource
In-Reply-To: <3C33414F.6020409@itamarst.org>; from twisted@itamarst.org on Wed, Jan 02, 2002 at 07:20:15PM +0200
References: <20020102174909.A26812@mel.interspace.dk> <3C33414F.6020409@itamarst.org>
Message-ID: <20020104200619.A9428@mel.interspace.dk>

[ Itamar Shtull-Trauring ]
> Any chance for async large object support as well?

Yup, as time permits I hope to implement it.  For now I guess I will
spend more time experimenting with async DB-access in generel,
though.

-- 
Sune Kirkeby | Teori er n?r vi har forst?et alting, men intet virker. Praksis
             | er n?r alting virker, men ingen forst?r hvorfor. Hos os
             | er de to ting forenet: Intet virker og ingen forst?r hvorfor!



From jasbahr at crash.org  Sat Jan  5 14:44:25 2002
From: jasbahr at crash.org (Jason L. Asbahr)
Date: Sat, 5 Jan 2002 13:44:25 -0600
Subject: [Twisted-Python] PB for Java status report
In-Reply-To: <3BEFCA35.4050904@itamarst.org>
Message-ID: <EIEFLCFECLLBKGPNJJIMOEHCHNAA.jasbahr@crash.org>

Hey, Itamar!  Ok, I want to hack Java applet clients for Twisted.  Where
should I look for your PB for Java source?

Thanks!

Jason



-----Original Message-----
From: twisted-python-admin at twistedmatrix.com
[mailto:twisted-python-admin at twistedmatrix.com]On Behalf Of Itamar
Shtull-Trauring
Sent: Monday, November 12, 2001 7:10 AM
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] PB for Java status report


It's now possible to create Referenceables in Java - meanwhile simple 
remote_xxx style ones only, no support for Perspectives or Viewables yet.

In other words, you can now create PB services in Java as well - I think 
it's pluggable enough that you could integrate this with any Java server 
architecture that uses streams (which is probably all of them :).



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From twisted at itamarst.org  Sun Jan  6 05:48:32 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 06 Jan 2002 12:48:32 +0200
Subject: [Twisted-Python] PB for Java status report
References: <EIEFLCFECLLBKGPNJJIMOEHCHNAA.jasbahr@crash.org>
Message-ID: <3C382B80.4000701@itamarst.org>

Jason L. Asbahr wrote:

> Hey, Itamar!  Ok, I want to hack Java applet clients for Twisted.  Where
> should I look for your PB for Java source?


Well, I know Jason found it, but if anyone else is interested -

A link to the latest version (I just released 0.3) can usually to be found 
on the twistedmatrix.com news section.

For those of you with CVS access, you can checkout TwistedJava from 
zaibach's cvs server.




From tv at twistedmatrix.com  Sun Jan  6 12:22:13 2002
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: 06 Jan 2002 19:22:13 +0200
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/internet main.py,1.51,1.52 poll.py,1.4,1.5
In-Reply-To: <E16NCJY-0005zi-00@zaibach.twistedmatrix.com>
References: <E16NCJY-0005zi-00@zaibach.twistedmatrix.com>
Message-ID: <87hepzv1h6.fsf@ki.yok.utu.fi>

Itamar Shtull-Trauring <itamarst at twistedmatrix.com> writes:

> Update of /cvs/Twisted/twisted/internet
> In directory zaibach:/tmp/cvs-serv23038
> 
> Modified Files:
> 	main.py poll.py 
> Log Message:
> made removing selectables at shutdown more generic so that poll-based event loop shutdown will work
> 
> diff -b -u -d -r1.51 -r1.52
> --- main.py	25 Dec 2001 13:22:13 -0000	1.51
> +++ main.py	6 Jan 2002 12:22:10 -0000	1.52
> @@ -242,11 +242,8 @@
>              log.msg('Select loop terminated.')
>  
>      finally:
> -        for reader in reads.keys():
> -            if reads.has_key(reader):
> -                del reads[reader]
> -            if writes.has_key(reader):
> -                del writes[reader]
> +        selectables = removeAll()
> +        for reader in selectables:
>              log.logOwner.own(reader)
>              try:
>                  reader.connectionLost()
> @@ -297,6 +294,17 @@
>      if writes.has_key(writer):
>          del writes[writer]
>  
> +def removeAll():
> +    """Remove all readers and writers, and return list of Selectables."""
> +    readers = reads.keys()
> +    for reader in readers:
> +        if reads.has_key(reader):
> +            del reads[reader]
> +        if writes.has_key(reader):
> +            del writes[reader]
> +    return readers
> +    
> +    
>  class _Win32Waker(styles.Ephemeral):
>      """I am a workaround for the lack of pipes on win32.

	What if you have fd 42 that is only a writer, not a reader?
        That removeAll() won't process it.

        readers = uniq(reads.keys(), writes.keys()) ?

        This does not affect the poll as readers and writers are
        "united" there.

-- 
tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}



From twisted at itamarst.org  Tue Jan  8 09:00:05 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 08 Jan 2002 16:00:05 +0200
Subject: [Twisted-Python] Use asyncore dispatchers with Twisted
Message-ID: <3C3AFB65.6000100@itamarst.org>

Yes, it is possible - you can use servers or clients written for asyncore 
together with twisted, using the following module. Should I check it in? If 
so, should it be in examples/ or twisted.internet, and what's a good module 
name?


===================================================================
"""Use asyncore dispatchers with Twisted.

If you have an asyncore dispatcher, you can still use it with twisted.
Just import this module, and don't run asyncore.loop() -- instead start
the twisted event loop, either by calling twisted.internet.main.run(),
or the usual way by calling an Application instance's run() method.
"""

import asyncore

from twisted.internet import main


class AsyncoreLooper:
     """Run the asyncore event loop for asyncore dispatchers."""

     def timeout(self):
         if asyncore.socket_map:
             return 0.0
         else:
             return None

     def runUntilCurrent(self):
         asyncore.poll(0.001)

asyncoreLooper = AsyncoreLooper()
main.addDelayed(asyncoreLooper)

if __name__ == '__main__':
     # example, run debugging SMTP proxy (included with 2.1)
     # telnet to port 8025 to try it out.
     import smtpd
     d = smtpd.DebuggingServer(("localhost", 8025), ("gateway1.att.net", 25))
     main.run()




From glyph at twistedmatrix.com  Tue Jan  8 12:40:27 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 08 Jan 2002 11:40:27 -0600
Subject: [Twisted-Python] Use asyncore dispatchers with Twisted
In-Reply-To: <3C3AFB65.6000100@itamarst.org>
References: <3C3AFB65.6000100@itamarst.org>
Message-ID: <1010511627.3924.5.camel@zelda>

There has GOT to be a better way to do this :)

On Tue, 2002-01-08 at 08:00, Itamar Shtull-Trauring wrote:
> Yes, it is possible - you can use servers or clients written for asyncore 
> together with twisted, using the following module. Should I check it in? If 
> so, should it be in examples/ or twisted.internet, and what's a good module 
> name?
> 
> 
> ===================================================================
> """Use asyncore dispatchers with Twisted.
> 
> If you have an asyncore dispatcher, you can still use it with twisted.
> Just import this module, and don't run asyncore.loop() -- instead start
> the twisted event loop, either by calling twisted.internet.main.run(),
> or the usual way by calling an Application instance's run() method.
> """
> 
> import asyncore
> 
> from twisted.internet import main
> 
> 
> class AsyncoreLooper:
>      """Run the asyncore event loop for asyncore dispatchers."""
> 
>      def timeout(self):
>          if asyncore.socket_map:
>              return 0.0
>          else:
>              return None
> 
>      def runUntilCurrent(self):
>          asyncore.poll(0.001)
> 
> asyncoreLooper = AsyncoreLooper()
> main.addDelayed(asyncoreLooper)
> 
> if __name__ == '__main__':
>      # example, run debugging SMTP proxy (included with 2.1)
>      # telnet to port 8025 to try it out.
>      import smtpd
>      d = smtpd.DebuggingServer(("localhost", 8025), ("gateway1.att.net", 25))
>      main.run()
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From twisted at itamarst.org  Tue Jan  8 17:43:14 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 09 Jan 2002 00:43:14 +0200
Subject: [Twisted-Python] Use asyncore dispatchers with Twisted
References: <3C3AFB65.6000100@itamarst.org> <1010511627.3924.5.camel@zelda>
Message-ID: <3C3B7602.3040401@itamarst.org>

Glyph Lefkowitz wrote:

> There has GOT to be a better way to do this :)

Well, two other possibilities:

1) Wrap each dispatcher with a Selectable and plug those in to the 
twisted event loop. I think we'd still need a Delayed to deal with the 
difference between twisted's addReader() and asyncore's readable() (in 
twisted you set yourself, in asyncore the event loop does that for you.)

2) Make asyncore twisted's core event loop - very icky, and possible 
conflicts with other event loops, such as GUI toolkits.

I actually think this way isn't bad - consider that asyncore.loop() does 
basically the same thing as this code. The drawbacks are of course two 
select() calls per loop, and the hardcoded select() timeout - but with 
0.0 it started sucking up all my CPU.

Anyway, the idea is to embrace and assimilate - once we've got them 
hooked with Twisted's *other* cool stuff they'll end up rewriting as a 
Protocol anyway ;)




From twisted at itamarst.org  Sun Jan 13 04:40:37 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 13 Jan 2002 11:40:37 +0200
Subject: [Twisted-Python] Per-connection and per-protocol stats
Message-ID: <3C415615.1030901@itamarst.org>

As I mentioned before in the metrics message, I want to have for each 
protocol events stats, per server and per server connection. This is the 
code I currently use (comments on the hits per second algorithm and in 
general are welcome.) I also have a web Resource for this so I can view 
stats with a nice interface.


======================================
"""Event monitoring support"""

import operator

from twisted.python import threadable, delay


class ProtocolMonitor:
     """Monitor a server that serves connections.

     Accepts a list of event names which the protocol can then log with
     log_event.
     """

     def __init__(self, name, eventNames):
         self.name = name
         self.eventNames = eventNames
         self.connections = {}
         self.eventcounters = EventCounters(eventNames)

     def install(self):
         """Make sure reset() is run every 0.1 seconds."""
         from twisted.internet import main
         self.looper = delay.Delayed()
         self.looper.ticktime = 0.1
         self.looper.loop(self.reset, 1)
         main.addDelayed(self.looper)

     def uninstall(self):
         """Uninstall Delayed."""
         from twisted.internet import main
         main.removeDelayed(self.looper)
         del self.looper

     def reset(self):
         """Runs once a second, resets all EventCounters."""
         for e in self.connections.values():
             e.reset()
         self.eventcounters.reset()

     def log_connectionOpened(self, conn):
         self.connections[conn] = EventCounters(self.eventNames)

     def log_connectionClosed(self, conn):
         del self.connections[conn]

     def log_event(self, conn, name):
         """First parameter should be a Protocol, second an event"""
         assert name in self.eventNames
         self.eventcounters.increment(name)
         if self.connections.has_key(conn):
             self.connections[conn].increment(name)

     synchronized = ["log_connectionOpened", "log_connectionClosed", 
"log_event", "reset"]


class EventCounters:
     """Stores a number of event counters, and how many a second.

     Algorithm for determining how many events a second:

     Divide each second into 10 (N) equal parts. Make an 11 (N+1) items long
     list L containing how many events in each part of the second, plus the
     last part of the previous second.

         L = [0] * 11

     When a new event is added, increment last item in list:

         L[-1] += 1

     Every 0.1 (1.0/N) seconds, remove first item in L and append 0:

         del L[0]; L.append(0)

     To calculate how many events in the past second, sum up last 10 (N)
     parts of L and 0.5 of the first item in L. This gives us how many hits
     in the past 0.95 to 1.05 seconds (1-1.0/2N to 1+1.0/2N seconds),
     depending on when we run this function:

         (0.5 * L[0]) + reduce(operator.add, L[1:])

     """

     def __init__(self, eventNames, ):
         self.eventNames = eventNames
         self.counters = {}
         self.secondCounters = {}
         for name in eventNames:
             self.counters[name] = 0
             self.secondCounters[name] = [0] * 10

     def increment(self, name):
         self.counters[name] += 1
         self.secondCounters[name][-1] += 1

     def reset(self):
         """Should be called every 0.1 seconds."""
         for name in self.eventNames:
             del self.secondCounters[name][0]
             self.secondCounters[name].append(0)

     def getInfo(self):
         """Return a dictionary.

         The key is an event name and the value a tuple:
         (counters, counters per second)."""
         result = {}
         for name in self.eventNames:
             l = self.secondCounters[name]
             perSecond = (0.5 * l[0]) + reduce(operator.add, l[1:])
             result[name] = (self.counters[name], perSecond)
         return result

     synchronized = ["increment", "reset", "getInfo"]


threadable.synchronize(ProtocolMonitor)
threadable.synchronize(EventCounters)




From twisted at itamarst.org  Sun Jan 13 08:20:55 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 13 Jan 2002 15:20:55 +0200
Subject: [Twisted-Python] Changelog
Message-ID: <3C4189B7.40000@itamarst.org>

we now have a changelog, a log of changes. use the changelog. the changelog 
is to be used. enter new stuff in the changelog.




From glyph at twistedmatrix.com  Sun Jan 13 15:09:57 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 13 Jan 2002 14:09:57 -0600
Subject: [Twisted-Python] Changelog
In-Reply-To: <3C4189B7.40000@itamarst.org>
References: <3C4189B7.40000@itamarst.org>
Message-ID: <1010952598.417.1.camel@zelda>

Well, this was a surprise to me :-)

I just fixed it to actually be in Change Log format.

Since we've been back and forth on this issue previously -- changelog
vs. commits list vs. "Just use `cvs log`" -- I'm going to offer a
suggestion for the use of this file so it doesn't become the sprawling
monstrosity that some previous ChangeLogs I've worked on have been.

If you're adding a feature, detail it carefully in the ChangeLog and
describe it in detail, once.  Bugfixes, unless they're sufficiently
major to constitute functionality by themselves, shouldn't be described.

The ChangeLog should be a high-level, non-technical overview of what is
changing, to help users and developers figure out when they need to
upgrade.

This does *not* mean that anybody should stop writing detailed commit
messages to the mailing list.  Those should be lower granularity to
explain to other developers what each commit is for.

On Sun, 2002-01-13 at 07:20, Itamar Shtull-Trauring wrote:
> we now have a changelog, a log of changes. use the changelog. the changelog 
> is to be used. enter new stuff in the changelog.

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From acapnotic at twistedmatrix.com  Sun Jan 13 15:40:03 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 13 Jan 2002 12:40:03 -0800
Subject: [Twisted-Python] Changelog
In-Reply-To: <1010952598.417.1.camel@zelda>
References: <3C4189B7.40000@itamarst.org>  <1010952598.417.1.camel@zelda>
Message-ID: <1010954405.1190.0.camel@troglodyte>

On Sun, 2002-01-13 at 12:09, Glyph Lefkowitz wrote:
> The ChangeLog should be a high-level, non-technical overview of what is
> changing, to help users and developers figure out when they need to
> upgrade.

That sounds more like a NEWS file.  And we do keep a "What's new in
%(version)?" section in the README, but we delete it with every release,
which isn't so useful if you skipped a version or two between upgrades. 
What brought about the ChangeLog was Itamar wondering "What changed in
the last three days while the commits list was borked?" which isn't a
high-level new-features-only sort of question.  That question could be
answered by asking CVS, but people have their preferences.



From sean at ninjaneering.com  Sun Jan 13 18:29:25 2002
From: sean at ninjaneering.com (Sean Riley)
Date: Sun, 13 Jan 2002 17:29:25 -0600
Subject: [Twisted-Python] web widgets
Message-ID: <HOEEKPCOKELHCNIJNMAGKEFCCEAA.sean@ninjaneering.com>

some observations of web widgets..

the "page" variable of the Gadget class was confusing to me.. I initially
assumed that it was an instance of a Page object - rather than a class
object. Maybe renaming it to something like "pageClass" would be more
explicit?

"Gadget" is also pretty ambiguous before it is placed in context. I would
maybe prefer GadgetResource to make the context of it explicit - but i know
how glyph dislikes compound class names. This would impress the standard
twisted.web terminology on the naming within web.widgets...  GadgetResource
would be symetrical to "WidgetResource" which does exist - although i am not
sure if it is used?

"Page" is derived from Resource also which suggests to me it could be called
"PageResource".

User classes inheriting from both Gadget and Widget seems to be a very
common pattern - such as all the classes in both twisted.forum.gadgets and
twisted.metrics.gadgets. This would suggest another class in the framework
that fills this niche. This could also refactor all the "if isinstance(self,
widget)" code which is polluting Gadget into this new class. This would
become a convenient place for users to simply derive classes from.. I don't
know what to call it - GadgetWidget or WidgetGadget are just too
meaningless. It is really a renderable collection of widgets.. any ideas?
WidgetResource? WidgetGadgetResource? GadgetWidgetResource? Wadget? Gidget?
Watchamacallit?


attached is a class diagram for web widgets done in dia :)


----
"If it's not running programs or fusing atoms, it's just bending space.",
Ken Macleod
"That's it, I'm outta here.", Homer Simpson's Brain
Sean Riley
sean at ninjaneering.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: widgets.dia
Type: application/octet-stream
Size: 1886 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020113/b9dae726/attachment.obj 

From carmstro at twistedmatrix.com  Sun Jan 13 21:53:45 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 13 Jan 2002 21:53:45 -0500
Subject: [Twisted-Python] web widgets
In-Reply-To: <HOEEKPCOKELHCNIJNMAGKEFCCEAA.sean@ninjaneering.com>
References: <HOEEKPCOKELHCNIJNMAGKEFCCEAA.sean@ninjaneering.com>
Message-ID: <1010976826.2676.1.camel@radii>

On Sun, 2002-01-13 at 18:29, Sean Riley wrote:
> some observations of web widgets..
> 
> the "page" variable of the Gadget class was confusing to me.. I initially
> assumed that it was an instance of a Page object - rather than a class
> object. Maybe renaming it to something like "pageClass" would be more
> explicit?

Good point. I'll change it, (making sure to keep backwards
compatibility) if no one objects.

[snip..]

> User classes inheriting from both Gadget and Widget seems to be a very
> common pattern - such as all the classes in both twisted.forum.gadgets and
> twisted.metrics.gadgets. This would suggest another class in the framework
> that fills this niche. This could also refactor all the "if isinstance(self,
> widget)" code which is polluting Gadget into this new class. This would
> become a convenient place for users to simply derive classes from.. I don't
> know what to call it - GadgetWidget or WidgetGadget are just too
> meaningless. It is really a renderable collection of widgets.. any ideas?
> WidgetResource? WidgetGadgetResource? GadgetWidgetResource? Wadget? Gidget?
> Watchamacallit?

I've been thinking out loud about just having Gadget subclass Widget. I
think it would probably make things clearer for newbies, and I doubt it
would create any sort of performance problem, so I don't think there's
really a need to create a separate GadgetWidget class. 

If no one objects, I'll make that change in CVS. It won't affect any old
code, I don't think; there'll just be an ambiguous superclass in code
that subclasses both Gadget and Widget.

> attached is a class diagram for web widgets done in dia :)

Diagrams are cool. Thanks. :)

Anyway, please, keep the suggestions/groanings coming. WebWidgets has a
ways to go before it really becomes easy to use, and I think we really
need to put an effort into it (although we should only expect it to be
easy to use for people who are familiar with class programming in Python
:)).

-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From j.her at t-online.de  Mon Jan 14 13:34:55 2002
From: j.her at t-online.de (Juergen Hermann)
Date: Mon, 14 Jan 2002 19:34:55 +0100
Subject: [Twisted-Python] Changelog
In-Reply-To: <1010954405.1190.0.camel@troglodyte>
Message-ID: <16QBvq-1iV9PcC@fwd10.sul.t-online.com>

On 13 Jan 2002 12:40:03 -0800, Kevin Turner wrote:

>What brought about the ChangeLog was Itamar wondering "What changed in
>the last three days while the commits list was borked?" which isn't a
>high-level new-features-only sort of question.  That question could be
>answered by asking CVS, but people have their preferences.

cvs2cl very nicely answers this fine-grained question, for the whole
project, w/o having to read an endless "cvs log".

Ciao, J?rgen





From corydodt at yahoo.com  Tue Jan 15 00:13:19 2002
From: corydodt at yahoo.com (Cory Dodt)
Date: Mon, 14 Jan 2002 21:13:19 -0800 (PST)
Subject: [Twisted-Python] Experiences with twisted.spread: representing an ACL
Message-ID: <20020115051319.37386.qmail@web10002.mail.yahoo.com>

I am working on a networked backup server which is so new it doesn't even
have a project page up on SF yet, although it might by the end of the
week.  To build this I am using spread and passport instead of building my
own protocol.    I'm having trouble with some of the concepts in spread,
and at this point I'm still too naive to know whether I'm missing the
point of something or whether passport is actually missing something I
need.

I want to implement access control lists.  For each Identity, I want to
assign a simple list of strings which more or less represent the ability
to access a Perspective.  For example:

useracl=[ "store_files",
        "read_files",
        "encrypt",
        "create_lbu" ]

There is a StoreFilesService, a ReadFilesService, and a CreateLBUService,
and a Perspective for each.  The "encrypt" permission is a modifier to
Store and Read files, so I'm not sure how to implement that yet but I'll
cross that bridge when I come to it.

I have subclassed the Authorizer thus:

class Authorizer(passport.Authorizer):
    def addIdentity(self, identity):
        if self.identities.has_key(identity.name):
            raise passport.KeyError("Already have an identity by that
name.")
        self.identities[identity.name] = identity
        if identity.permissions == None:
            raise MissingPermissionsException(identity)
        # create all perspectives the user should have
        for permission in identity.acl:
            svc=servicelist.services[permission](permission, tap.the_app)
            svc.createPerspective(identity.name).setIdentity(identity)
           
identity.addKeyForPerspective(svc.getPerspectiveNamed(identity.name))

Does passport already has something like the ACL mechanism which allows
you to easily bind an ACL to a user?  Is my solution the most parsimonious
or do I really have to subclass the Authorizer to achieve this?  It seems
like I should be able to throw in a callback somewhere that creates the
eligible service/perspective pairs when a user is added to the system.

Second, if I modify a user's ACL, for example to grant a permission,
where's the callback to create a new s/p pair for that permission?  I have
a suspicion that this is already taken care of somewhere in passport and
I'm just missing the point.

That's all for now, thanks.  

C

__________________________________________________
Do You Yahoo!?
Send FREE video emails in Yahoo! Mail!
http://promo.yahoo.com/videomail/



From corydodt at yahoo.com  Tue Jan 15 00:15:35 2002
From: corydodt at yahoo.com (Cory Dodt)
Date: Mon, 14 Jan 2002 21:15:35 -0800 (PST)
Subject: [Twisted-Python] representing groups
Message-ID: <20020115051536.96483.qmail@web10007.mail.yahoo.com>

Since this is not really related to ACL's, I've decided to make this a
separate thread on its own.  I want to know how to represent groups in
passport.  A group would simply be a group of Identities, but who owns
them?  Who's responsible for making sure all Identities are in at least
one group?  How do you check if a particular object is owned by a group?

Or are these questions not solved yet?

Thanks! 

C

__________________________________________________
Do You Yahoo!?
Send FREE video emails in Yahoo! Mail!
http://promo.yahoo.com/videomail/



From glyph at twistedmatrix.com  Tue Jan 15 00:53:05 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 14 Jan 2002 23:53:05 -0600
Subject: [Twisted-Python] Experiences with twisted.spread: representing
	an ACL
In-Reply-To: <20020115051319.37386.qmail@web10002.mail.yahoo.com>
References: <20020115051319.37386.qmail@web10002.mail.yahoo.com>
Message-ID: <1011073985.941.4.camel@zelda>

First of all, let me apologize for not having documented this stuff more
thoroughly.  I'm glad you're making an effort to use this
infrastructure, and please have the patience to help me complete it -- I
need use-cases like yours to make the system more general.

Passport is in the process of a major overhaul, to make it possible to
store perspectives in a database.  This is changing some of the basic
APIs, so some of the answers to this (and your other thread) will be a
bit vague.

On Mon, 2002-01-14 at 23:13, Cory Dodt wrote:
> I am working on a networked backup server which is so new it doesn't even
> have a project page up on SF yet, although it might by the end of the
> week.  To build this I am using spread and passport instead of building my
> own protocol.    I'm having trouble with some of the concepts in spread,
> and at this point I'm still too naive to know whether I'm missing the
> point of something or whether passport is actually missing something I
> need.

Passport has what you need, but it's different than you think, I think.

> I want to implement access control lists.  For each Identity, I want to
> assign a simple list of strings which more or less represent the ability
> to access a Perspective.  For example:
> 
> useracl=[ "store_files",
>         "read_files",
>         "encrypt",
>         "create_lbu" ]
> 
> There is a StoreFilesService, a ReadFilesService, and a CreateLBUService,
> and a Perspective for each.  The "encrypt" permission is a modifier to
> Store and Read files, so I'm not sure how to implement that yet but I'll
> cross that bridge when I come to it.

If you have an ACL, implement it as an ACL.

A perspective is a conglomeration of state for a particular service.  If
storing files, reading files, and creating LBUs all access the same
repository of data, and all exist within an encapsulation boundary of
some kind, they should probably all be one service that glues them
together.

> I have subclassed the Authorizer thus:
> 
> class Authorizer(passport.Authorizer):
>     def addIdentity(self, identity):
>         if self.identities.has_key(identity.name):
>             raise passport.KeyError("Already have an identity by that
> name.")
>         self.identities[identity.name] = identity
>         if identity.permissions == None:
>             raise MissingPermissionsException(identity)
>         # create all perspectives the user should have
>         for permission in identity.acl:
>             svc=servicelist.services[permission](permission, tap.the_app)
>             svc.createPerspective(identity.name).setIdentity(identity)
>            
> identity.addKeyForPerspective(svc.getPerspectiveNamed(identity.name))
> 
> Does passport already has something like the ACL mechanism which allows
> you to easily bind an ACL to a user?  Is my solution the most parsimonious
> or do I really have to subclass the Authorizer to achieve this?  It seems
> like I should be able to throw in a callback somewhere that creates the
> eligible service/perspective pairs when a user is added to the system.

It looks here like you want to add state (and potentially behavior) to
Identity, which is not its purpose.  The goal of the Identity/Passport
distinction is to provide a very sharp boundary between different sorts
of functionality (for example, a chat system and your backup software)
but allow your users to have access to each.

The reason you would add stuff to Identity is to add a new kind of
authentication mechanism, for example, or to store them in an LDAP data
repository.

A perspective is a capability, not an ACL.  An identity should be
nothing more than an index of all perspectives available to a particular
authentication token.  Any information about or behavior for that
identity is "application specific" can be reflected in a Perspective
attached to it.

Rather than trying to cram each operation into a Perspective of its own,
you could just implement your ACLs internal to the Perspective, and test
them with perspective.hasAbilityTo("some acl")... an implementation of a
generalized, database-backed ACL system would be pretty handy, if you
felt like contributing such a thing to Twisted :).

> Second, if I modify a user's ACL, for example to grant a permission,
> where's the callback to create a new s/p pair for that permission?  I have
> a suspicion that this is already taken care of somewhere in passport and
> I'm just missing the point.

Service.createPerspective is the current way to do that.

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From glyph at twistedmatrix.com  Tue Jan 15 00:55:00 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 14 Jan 2002 23:55:00 -0600
Subject: [Twisted-Python] representing groups
In-Reply-To: <20020115051536.96483.qmail@web10007.mail.yahoo.com>
References: <20020115051536.96483.qmail@web10007.mail.yahoo.com>
Message-ID: <1011074101.941.6.camel@zelda>

On Mon, 2002-01-14 at 23:15, Cory Dodt wrote:
> Since this is not really related to ACL's, I've decided to make this a
> separate thread on its own.  I want to know how to represent groups in
> passport.  A group would simply be a group of Identities, but who owns
> them?  Who's responsible for making sure all Identities are in at least
> one group?  How do you check if a particular object is owned by a group?
> 
> Or are these questions not solved yet?

I'd love to come up with an abstract representation of a "group" that
made sense across applications, but there are lots of questions about
groups that are quite application-specific.  (For a simple example --
sometimes a group can contain other groups, sometimes it can contain
only users.)  As I said in my last email, I'd recommend putting a Group
object of some sort into your Service, and organizing your Perspectives
with it.  The Identities can then be tracked for which group they're in
in your application because each perspective stores an identity name.

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From twisted at itamarst.org  Wed Jan 16 09:53:08 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 16 Jan 2002 16:53:08 +0200
Subject: [Twisted-Python] Bug reports
Message-ID: <3C4593D4.7040303@itamarst.org>

Until we have a bug tracker, some bug reports, so we don't forget:

1. protocol.Factory's startFactory method is called twice on start up.

2. Various SQL code doesn't use SQL quoting (that means you, Sean :)

3. The new Perspective code has a bug, where if you ask an identity for a 
non-existent service/perspective pair, it raises a KeyError which is not 
caught anywhere. You can test this by switching pbechoclient.py to connect 
to service "foo" instead of "pbecho". This is some wierd Deferred thing, and 
I have no idea where to deal with it.




From sean at twistedmatrix.com  Wed Jan 16 18:24:05 2002
From: sean at twistedmatrix.com (Sean Riley)
Date: Wed, 16 Jan 2002 17:24:05 -0600
Subject: [Twisted-Python] Bug reports
In-Reply-To: <3C4593D4.7040303@itamarst.org>
Message-ID: <HOEEKPCOKELHCNIJNMAGOEFMCEAA.sean@twistedmatrix.com>

>> 2. Various SQL code doesn't use SQL quoting (that means you, Sean :)

fixed. i added a utility method twisted.enterprise.adbapi.safe() which
double quotes single quotes (') and added it to all strings in SQL
statements in enterprise, forum and metrics.




From liiwi at iki.fi  Sun Jan 20 14:07:26 2002
From: liiwi at iki.fi (Jaakko Niemi)
Date: Sun, 20 Jan 2002 21:07:26 +0200
Subject: [Twisted-Python] patchlet
Message-ID: <87lmes96z5.fsf@jumper.lonesom.pp.fi>

To get the Debian package build include protocols.ldap. Hmm,
perhaps setup.py should just look what's in there.

--- setup.py~   Fri Sep 14 04:22:48 2001
+++ setup.py    Sun Jan 20 20:44:56 2002
@@ -59,6 +59,7 @@
         "twisted.manhole.ui",
         "twisted.persisted",
         "twisted.protocols",
+        "twisted.protocols.ldap",
         "twisted.python",
         "twisted.reality",
         "twisted.reality.ui",



From mbac at netgraft.com  Mon Jan 21 13:35:08 2002
From: mbac at netgraft.com (Michael Bacarella)
Date: Mon, 21 Jan 2002 12:35:08 -0600
Subject: [Twisted-Python] FTP Client protocol for Twisted..
Message-ID: <20020121123508.A15847@romulus.netgraft.com>

Hi, I just joined the list.

For your public enjoyment I present an FTPClient protocol
implementation for Twisted. The class definition:

	http://m.bacarella.com/playground/ftpclient.py

Example code:

	http://m.bacarella.com/playground/exftpclient.py

ftpclient.py should go into twisted/protocols to use
the example. You may decide that it's better to suck it
into a different file. The example simply logs into
ftp.uu.net (anonymous), retrieves and prints a directory
listing, and then exits.

I developed it because I wanted to use Twisted for an
IRC bot which needed to be able to index FTP sites, so I
basically stopped once it met my needs. Sorry if it's
missing some features..

Comments or suggestions are welcome.

-- 
Michael Bacarella              | 545 Eighth Ave #401
                               | New York, NY 10018
Systems Analysis & Support     | mike at bacarella.com
Managed Services               | 212 946-1038




From twisted at itamarst.org  Mon Jan 21 16:27:19 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 21 Jan 2002 23:27:19 +0200
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/spread banana.py,1.13,1.14 jelly.py,1.12,1.13 pb.py,1.51,1.52
References: <E16Slwx-0003MY-00@zaibach.twistedmatrix.com>
Message-ID: <3C4C87B7.3020901@itamarst.org>

Sean just added unicode to banana and jelly.

1. Will this run on 1.5.2?

2. You had better encode the data before writing it - as far as I can 
see from the patch you do not. I suggest UTF-8.

3. As glyph pointed out, do we even need unicode support in Banana? 
Keeping it in jelly (u'foo' --> ['unicode', u'foo'.encode("UTF8")] would 
be the transform) would work just as well, without requiring people who 
implement banana to deal with it.




From corydodt at yahoo.com  Tue Jan 22 02:44:51 2002
From: corydodt at yahoo.com (Cory Dodt)
Date: Mon, 21 Jan 2002 23:44:51 -0800 (PST)
Subject: [Twisted-Python] man page -g, deb stuff
In-Reply-To: <E16RBeG-0000Hn-00@zaibach.twistedmatrix.com>
Message-ID: <20020122074451.81769.qmail@web10008.mail.yahoo.com>

The man page for twistd in the .deb package does not contain the new -g
option or any info about plugins.

Also of note:

+ the .deb does not contain twistd-debug
+ the .deb does not contain any of the .tac's in examples/


Just keeping you honest:-)

C

__________________________________________________
Do You Yahoo!?
Send FREE video emails in Yahoo! Mail!
http://promo.yahoo.com/videomail/



From twisted at itamarst.org  Tue Jan 22 08:21:17 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 22 Jan 2002 15:21:17 +0200
Subject: [Twisted-Python] man page -g, deb stuff
References: <20020122074451.81769.qmail@web10008.mail.yahoo.com>
Message-ID: <3C4D674D.8030701@itamarst.org>

Cory Dodt wrote:


> + the .deb does not contain any of the .tac's in examples/

All of these .tac files are for systems that are currently experimental. 
They probably should be included however.




From twisted at itamarst.org  Tue Jan 22 08:24:20 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 22 Jan 2002 15:24:20 +0200
Subject: [Twisted-Python] patchlet
References: <87lmes96z5.fsf@jumper.lonesom.pp.fi>
Message-ID: <3C4D6804.1030801@itamarst.org>

Jaakko Niemi wrote:

> To get the Debian package build include protocols.ldap.


Done, thanks for the bug report.





From twisted at itamarst.org  Wed Jan 23 11:55:21 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 23 Jan 2002 18:55:21 +0200
Subject: [Twisted-Python] Sample app for docs
Message-ID: <3C4EEAF9.7090800@itamarst.org>

How about a finger daemon?

We can have a web frontend, and use PB to set .plans, and store the .plans 
in PostgreSQL.




From jason at crash.org  Wed Jan 23 13:03:25 2002
From: jason at crash.org (Jason Asbahr)
Date: Wed, 23 Jan 2002 12:03:25 -0600
Subject: [Twisted-Python] Sample app for docs
In-Reply-To: <3C4EEAF9.7090800@itamarst.org>
Message-ID: <7EF21908-102B-11D6-8D48-000393753460@crash.org>

That's a good idea -- we could also demonstrate how first to save to 
files (which many initial users of Twisted will do) and then demonstrate 
how to migrate to a database...

J


On Wednesday, January 23, 2002, at 10:55 AM, Itamar Shtull-Trauring 
wrote:

> How about a finger daemon?
>
> We can have a web frontend, and use PB to set .plans, and store the 
> .plans in PostgreSQL.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From twisted at itamarst.org  Wed Jan 23 15:45:07 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 23 Jan 2002 22:45:07 +0200
Subject: [Twisted-Python] Sample app for docs
References: <7EF21908-102B-11D6-8D48-000393753460@crash.org>
Message-ID: <3C4F20D3.3080906@itamarst.org>

And of course there's the marketing aspect, too:
"Twisted, the world's most sophisticated finger daemon"




From andrew-twisted at puzzling.org  Wed Jan 23 19:23:34 2002
From: andrew-twisted at puzzling.org (andrew-twisted at puzzling.org)
Date: Thu, 24 Jan 2002 11:23:34 +1100
Subject: [Twisted-Python] Sample app for docs
In-Reply-To: <7EF21908-102B-11D6-8D48-000393753460@crash.org>
References: <3C4EEAF9.7090800@itamarst.org> <7EF21908-102B-11D6-8D48-000393753460@crash.org>
Message-ID: <20020124002334.GA30430@ritsuko.xware.cx>

On Wed, Jan 23, 2002 at 12:03:25PM -0600, Jason Asbahr wrote:
> 
> That's a good idea -- we could also demonstrate how first to save to 
> files (which many initial users of Twisted will do) and then demonstrate 
> how to migrate to a database...

Perhaps you could also demonstrate using the metrics module to report stats?

-Andrew.




From corydodt at yahoo.com  Fri Jan 25 03:31:27 2002
From: corydodt at yahoo.com (Cory Dodt)
Date: Fri, 25 Jan 2002 00:31:27 -0800 (PST)
Subject: [Twisted-Python] Throwing exceptions to the client
Message-ID: <20020125083127.66090.qmail@web10005.mail.yahoo.com>

Still working on my ACL problem.  

Use case: client connects, calls a perspective_method which is not in its
ACL.  In my test client, I call 
    perspective.createUsers(['cdodt'])

1) 

At the server, perpsective method calls 
    self.assertPermission("create_users")
This assertion fails, so assertPermission throws PermissionDenied.

When this happens, client gets a string with the traceback.  This looked
cool at first, until I tried to handle the error with my failure callback.
 In order to differentiate between PermissionDenied and, for example,
UserAlreadyExists errors, I would have to parse what I get back from the
server.  Parsing strings to find out what happened puts us back at the
protocol layer, and is something my code shouldn't have to do.

MUCH nicer would be if the server tossed the real exception to the client,
not a string.  Referenceable, perhaps.  Is it possible to make this happen
when an exception gets raised?

2)

Another workable solution would be for the perspective_method to return an
exception instead of throwing it.

radix clued me in on Referenceables, so I'm working on making my exception
Referencable.  That's when I noticed that the example code is missing
Referenceables.  Ref'ables and Copyables seem to be fairly intrinsic to
pb, so they should probably show up in the examples somewhere.

Thanks,

C



__________________________________________________
Do You Yahoo!?
Great stuff seeking new owners in Yahoo! Auctions! 
http://auctions.yahoo.com



From twisted at itamarst.org  Fri Jan 25 06:27:22 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 25 Jan 2002 13:27:22 +0200
Subject: [Twisted-Python] Throwing exceptions to the client
References: <20020125083127.66090.qmail@web10005.mail.yahoo.com>
Message-ID: <3C51411A.8050400@itamarst.org>

Cory Dodt wrote:

 > MUCH nicer would be if the server tossed the real exception to the
 > client, not a string.  Referenceable, perhaps.  Is it possible to
 > make this happen when an exception gets raised?

We were discussing having Failures being sent to the client for errors, 
instead of strings, probably as Copyables - but first I gotta do 
Copyables for Java PB. Patches accepted :)

Until then - perhaps you should have a special return code indicating 
the method failed? E.g. have response code such as SUCCESS = 1, FAILURE 
= 2, NOACCESS = 0 or something, instead of depending on exceptions.






From twisted at itamarst.org  Sat Jan 26 10:00:12 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 26 Jan 2002 17:00:12 +0200
Subject: [Twisted-Python] [Fwd: [ZODB-Dev] ANNOUNCE: Python 10 Birds of a Feather session on a Python persistence framework]
Message-ID: <3C52C47C.4090805@itamarst.org>

This sounds interesting for us, since you could use it to have your .tap 
always uptodate, instead of just saving on shutdown. and other 
interesting uses. The correct day is actually Wednesday.


-------- Original Message --------
Subject: [ZODB-Dev] ANNOUNCE: Python 10 Birds of a Feather session on a 
Python persistence framework
Date: Fri, 25 Jan 2002 19:12:39 -0500
From: Jim Fulton <jim at zope.com>
Reply-To: jim at zope.com
Organization: Zope Corporation
To: zodb-dev at zope.org

We plan to have a Birds of a Feather (BOF) session at the Python 10
Conference, http://python10.org, on a Python persistence framework.

The Zope object database, ZODB, includes frameworks
for persistence and transaction management.  These frameworks
depend very little on the rest of ZODB and will be factored
out of ZODB and made into separate packages in the next generation
of ZODB, ZODB 4.

The ZODB persistence framework provides significant benefits to
Python programmers:

- Objects are automatically loaded and stored. The programmer
   doesn't have to keep tack of when objects have been
   modified. The objects track modification and notify the
   transaction manager of changes. The transaction manager
   coordinates storing data.  Data are loaded when needed, with
   loads triggered by access from other objects.

- An object cache automates moving data out of memory when no
   longer needed. A cache invalidation protocol helps to keep object
   consistence across multiple applications or application
   threads.

We would like to see these benefits made available for other
databases. We'd especially like to see a persistence framework
using relational databases, reusing object-relational mapping
efforts, such as MiddleKit and others.

We'd like to kick off an effort to design a persistence framework
to encompass ZODB, relational databases, and other persistence
systems.

The BOF will begin with a presentation of the ZODB Persistence
framework.

The time and location are TBD. Check the BOF schedule when you get to
the conference.

Jim

--
Jim Fulton           mailto:jim at zope.com       Python Powered!
CTO                  (888) 344-4332            http://www.python.org
Zope Corporation     http://www.zope.com       http://www.zope.org

_______________________________________________
For more information about ZODB, see the ZODB Wiki:
http://www.zope.org/Wikis/ZODB/

ZODB-Dev mailing list  -  ZODB-Dev at zope.org
http://lists.zope.org/mailman/listinfo/zodb-dev




From twisted at itamarst.org  Mon Jan 28 09:40:49 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 28 Jan 2002 16:40:49 +0200
Subject: [Twisted-Python] Pure Python SNMP framework for Python
Message-ID: <3C5562F1.702@itamarst.org>

I looked at the asyncore code - porting to twisted would probably take 10 
minutes.

<http://pysnmp.sourceforge.net/>




From jason at crash.org  Mon Jan 28 21:47:13 2002
From: jason at crash.org (Jason Asbahr)
Date: Mon, 28 Jan 2002 20:47:13 -0600
Subject: [Twisted-Python] Behold: Shirts
Message-ID: <7F71ABFE-1462-11D6-9D26-000393753460@crash.org>

Glyph has set up a CafePress storefront -- now you too can be proudly 
emblazoned with the Twisted Logo!

http://www.cafepress.com/twistedlabs


Jason

(I went ahead and paid the outrageous 2nd day air shipping to make sure 
my shirt arrives before IPC 10...)




From slt5v at cc.usu.edu  Tue Jan 29 04:50:22 2002
From: slt5v at cc.usu.edu (Travis B. Hartwell)
Date: Tue, 29 Jan 2002 02:50:22 -0700
Subject: [Twisted-Python] CVS manhole Traceback
Message-ID: <20020129095022.GB1258@cc.usu.edu>

Hey all,
  I was wanting to use manhole to connect to a new pb service I am
  creating (a contact manager), but I am getting a traceback when I try
  to run manhole.  Also, it dumps core if I don't have my $DISPLAY
  variable set. :)  Anyway, here is the traceback (latest CVS, etc.)

  Traceback (most recent call last):
    File "./manhole", line 57, in ?
        from twisted.manhole.ui import gtkmanhole
    File "/home/slt5v/data/projects/Twisted/twisted/manhole/ui/gtkmanhole.py", line 39, in ?
	import spelunk_gnome
    File "/home/slt5v/data/projects/Twisted/twisted/manhole/ui/spelunk_gnome.py", line 679, in ?
        Explorer, 'twisted.python.explorer')
    File "twisted/spread/flavors.py", line 68, in setCopierForClassTree
  NameError: global name 'types' is not defined

  Any ideas?

Naf
		      



From glyph at twistedmatrix.com  Tue Jan 29 04:56:47 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 29 Jan 2002 03:56:47 -0600
Subject: [Twisted-Python] CVS manhole Traceback
In-Reply-To: <20020129095022.GB1258@cc.usu.edu>
References: <20020129095022.GB1258@cc.usu.edu>
Message-ID: <1012298207.8390.24.camel@zelda>

Thanks for reporting.  My bug: it's fixed now.

On Tue, 2002-01-29 at 03:50, Travis B. Hartwell wrote:
> Hey all,
>   I was wanting to use manhole to connect to a new pb service I am
>   creating (a contact manager), but I am getting a traceback when I try
>   to run manhole.  Also, it dumps core if I don't have my $DISPLAY
>   variable set. :)  Anyway, here is the traceback (latest CVS, etc.)

-- 
"Cannot stand to be one of many -- I'm not what they are."
        -Guster, "Rocketship"
                glyph lefkowitz; ninjaneer, freelance demiurge
    glyph @ [ninjaneering|twistedmatrix].com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 232 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020129/d7a2ccc0/attachment.pgp 

From andrew-twisted at puzzling.org  Tue Jan 29 18:56:40 2002
From: andrew-twisted at puzzling.org (andrew-twisted at puzzling.org)
Date: Wed, 30 Jan 2002 10:56:40 +1100
Subject: [Twisted-Python] Factory.startFactory being called twice.
Message-ID: <20020129235640.GA22614@ritsuko.xware.cx>

Hi all,

I recently upgraded to 0.14.0, but I'm still seeing Factory.startFactory()
being called twice when I start my server.

If I start my server with the following code (adapted from simpleserv.py):

    app = Application('spam')
    app.listenTCP(1234,MyFactory())
    app.run(save=0)
 
Then by using traceback.format_stack() in MyFactory.startFactory I can see
that it gets called twice, here:

    app.run(save=0)
  File "F:\Python22\Lib\site-packages\twisted\internet\app.py", line 350, in run
    port.startListening()
  File "F:\Python22\Lib\site-packages\twisted\internet\tcp.py", line 395, in startListening
    self.factory.startFactory()

and here:

    app.run(save=0)
  File "F:\Python22\Lib\site-packages\twisted\internet\app.py", line 357, in run
    port.factory.startFactory()

I'm currently using 
    if not hasattr(self, 'once'):
        self.once = 1
	# ...

To workaround it, but it'd be nice to not need to do this.

The docs suggest that it will get called twice, "both after an application
has been unserialized and before all the ports begin accepting connections."
Which is fine, except that I'm not unserialising...

It's a minor glitch in an otherwise beautiful system :)

-Andrew.




From twisted at itamarst.org  Wed Jan 30 08:11:11 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 30 Jan 2002 15:11:11 +0200
Subject: [Twisted-Python] ANN: Perspective Broker for Java, v0.4
Message-ID: <3C57F0EF.4040806@itamarst.org>

Hi all,

I've released a new version of PB for Java. The new version is required for 
compatability with Twisted 0.14. The new version also adds support for using 
and sending Copyables from Java, jellying instances (not that you'd want to 
do this), and sending String objects over PB and Jelly.

You can download it from: http://itamarst.org/software/




From andrew-twisted at puzzling.org  Wed Jan 30 10:21:08 2002
From: andrew-twisted at puzzling.org (andrew-twisted at puzzling.org)
Date: Thu, 31 Jan 2002 02:21:08 +1100
Subject: [Twisted-Python] twisted.enterprise docs suck
Message-ID: <20020130152108.GA6098@ritsuko.xware.cx>

Because the twisted.enterprise docs currently suck (i.e. I couldn't figure
it out without help :), I decided to write a small tutorial that should
hopefully explain things a bit better.

I've put a copy up at http://poetry.puzzling.org/twisted_db.html.  I'd
appreciate any feedback anyone has, in particular:
  * Have I stuffed up anything major?
  * Is my terminology ok (e.g. "...dispatch queries to your ConnectionPool...")
  * Am I demonstrating "best practice" use of twisted.enterprise, or should
    I be structuring my code differently?

If someone wants to place this (or an edited version of it) on
twistedmatrix.com, or distribute it with Twisted, or both, they are welcome.

Regards,

-Andrew.




From twisted at itamarst.org  Wed Jan 30 11:07:59 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 30 Jan 2002 18:07:59 +0200
Subject: [Twisted-Python] Factory.startFactory being called twice.
References: <20020129235640.GA22614@ritsuko.xware.cx>
Message-ID: <3C581A5F.8000906@itamarst.org>

andrew-twisted at puzzling.org wrote:

> I recently upgraded to 0.14.0, but I'm still seeing Factory.startFactory()
> being called twice when I start my server.

OK, I fixed it in CVS. I tested, and now it only runs once, both when 
loading from a .tap and when being run directly.

Here's the patch:


Index: twisted/internet/tcp.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/tcp.py,v
retrieving revision 1.42
diff -c -r1.42 tcp.py
*** twisted/internet/tcp.py	29 Jan 2002 17:25:25 -0000	1.42
--- twisted/internet/tcp.py	30 Jan 2002 16:13:11 -0000
***************
*** 392,398 ****
           self.fileno = self.socket.fileno
           self.numberAccepts = 100
           self.startReading()
-         self.factory.startFactory()

       def approveConnection(self, sock, addr):
           """Check that this is a connection we are willing to accept.
--- 392,397 ----





From jason at crash.org  Thu Jan 31 13:46:54 2002
From: jason at crash.org (Jason Asbahr)
Date: Thu, 31 Jan 2002 12:46:54 -0600
Subject: [Twisted-Python] Fwd: [wearables] commercial survey - IEEE Pervasive Computing
Message-ID: <E59F4B2E-167A-11D6-9390-000393753460@crash.org>

Excuse the forward, but this touches on some of the personal information 
space considerations of Twisted.  For additional illustration, may I 
suggest adding a Bruce Sterling book of short stories to your reading 
list, "A Good Old-Fashioned Future".  In particular, the story "Maneki 
Neko" illustrates a future application of portable machines and 
Memex/Twisted/ReputationNetwork systems for distributed gift-culture 
collectives.  Like ours.  :-)

Jason



Begin forwarded message:

> From: "David P. Reed" <dpreed at reed.com>
> Date: Thu Jan 31, 2002  12:20:41 PM US/Central
> To: rhodes at alum.mit.edu, "Thad E. Starner" <thad at cc.gatech.edu>
> Cc: wearables at cc.gatech.edu
> Subject: Re: [wearables] commercial survey - IEEE Pervasive Computing
>
> Though I'm still quite excited about the potential of self-contained 
> general purpose wearables, I have to say that the capabilities of my 
> Kyocera QCP6035 Smartphone, the Samsung palmphone and the upcoming Treo 
> are impressively general, and because they can be augmented by 
> intelligence on the Internet quite easily (having escaped the walled 
> garden of WAP), they can be quite general purpose.  Already they can do 
> something quite cool - you can attach a small GPS receiver (Pharos) to 
> them and get live location info that drives the navigation through 
> geographic data on the Internet.  There are no car-mount or portable 
> GPS navigation systems that can access up-to-date maps and directions - 
> they run off of internal data only.
>
> Thus the commercial world surrounding the Palm OS-based phones is 
> actually poised ready to go beyond PIMs into new apps.  The big limit 
> is the bitrate on CDMA and GSM nets that is available (very low, so it 
> pays to have local cache).
>
> The real problem inhibiting the market is the odd idea that what you 
> want to do with a mobile device is the class of things you do sitting 
> at a desk in your study or office.  I don't want to browse the Web in 
> general - or compose documents or read long Microsoft word attachments.
>
> But the Palm phones are plenty powerful enough to do cool things in 
> conjunction with general purpose intelligence elsewhere.
>
>
> At 09:56 AM 1/31/2002 -0800, Bradley Rhodes wrote:
>
>> >Computer enthusiasts have been known to rewrite a MP3 player's
>> >interface software to allow the uploading and downloading of any
>> >type of data, effectively making the device into the equivalent
>> >of a large floppy disk.  More recently, these devices are
>> >merging with PDAs and cellular phones to create a wide variety
>> >of available products.  IDC expects sales of portable devices
>> >with digital audio playback capability to grow to 15 million
>> >units by 2005.  In a sense, these devic
>>
>> It's not just computer enthusiasts anymore. The iPod is both an
>> MP3 player or, at the flip of a switch, a firewire 5G hard
>> drive. A friend of mine uses it both to play music and to store
>> all her personal email, so she can read email at work without
>> tainting company disk with it.
>>
>> You touched on the question of general-purpose, but I'd love to
>> see it addressed further. The average PC owner has a web browser,
>> email reader, full office suite and game machine all in one
>> box. Because of inherent interface constraints, the Palm Pilot is
>> only widely used for PIM applications: short memos, calendar,
>> phone and to-do lists. Wearables have even more interface
>> constraints than pen-based systems, which implies to me they'll
>> be even more task specific, at least until we get a bluetooth
>> equivalent that lets you have task-specific interfaces all
>> sharing one processor/memory/battery attached to the belt
>> somewhere.
>>
>> Comments?
>>
>> Brad
>>
>> --
>> Bradley Rhodes
>> Intelligence Augmentation | Software Agents | Wearable Computing
>> http://www.bradleyrhodes.com/
>
> - David
> --------------------------------------------
> WWW Page: http://www.reed.com/dpr.html
>
>
>




From glyph at twistedmatrix.com  Thu Jan 31 18:23:20 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 31 Jan 2002 17:23:20 -0600
Subject: [Twisted-Python] twisted.enterprise docs suck
In-Reply-To: <20020130152108.GA6098@ritsuko.xware.cx>
References: <20020130152108.GA6098@ritsuko.xware.cx>
Message-ID: <1012519400.15360.40.camel@zelda>


On Wed, 2002-01-30 at 09:21, andrew-twisted at puzzling.org wrote:
> Because the twisted.enterprise docs currently suck (i.e. I couldn't figure
> it out without help :), I decided to write a small tutorial that should
> hopefully explain things a bit better.

Thank you VERY much!  Anybody else out there want to write some
tutorials?

> I've put a copy up at http://poetry.puzzling.org/twisted_db.html.  I'd
> appreciate any feedback anyone has, in particular:
>   * Have I stuffed up anything major?

Not really, the example looks nice 'n' simple, illustrating that ADBAPI
is not a very big API at all :)

>   * Is my terminology ok (e.g. "...dispatch queries to your ConnectionPool...")

Sounds fine to me.

>   * Am I demonstrating "best practice" use of twisted.enterprise, or should
>     I be structuring my code differently?

There is one slight modification I'd make.  Typically, a method that
calls runOperation will return its result, since presumably you are
writing external code that uses the service and expects some way to hook
into results being available :-).

> If someone wants to place this (or an edited version of it) on
> twistedmatrix.com, or distribute it with Twisted, or both, they are welcome.

Will do.  We've got lots of docs to write, and we'll integrate these as
soon as I have some time.  Thanks for relieving a bit of that burden!

-- 
"Cannot stand to be one of many -- I'm not what they are."
        -Guster, "Rocketship"
                glyph lefkowitz; ninjaneer, freelance demiurge
    glyph @ [ninjaneering|twistedmatrix].com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 232 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20020131/bc0526d6/attachment.pgp 

From andrew at puzzling.org  Thu Jan 31 20:21:33 2002
From: andrew at puzzling.org (Andrew Bennetts)
Date: Fri, 1 Feb 2002 12:21:33 +1100
Subject: [Twisted-Python] twisted.enterprise docs suck
In-Reply-To: <1012519400.15360.40.camel@zelda>
References: <20020130152108.GA6098@ritsuko.xware.cx> <1012519400.15360.40.camel@zelda>
Message-ID: <20020201012133.GA19968@ritsuko.xware.cx>

Glyph wrote:
> >   * Am I demonstrating "best practice" use of twisted.enterprise, or should
> >     I be structuring my code differently?
> 
> There is one slight modification I'd make.  Typically, a method that
> calls runOperation will return its result, since presumably you are
> writing external code that uses the service and expects some way to hook
> into results being available :-).

Ok, so how about if I change the last example to:

    class AgeDatabase(adbapi.Augmentation):
        """A simple example that can retrieve an age from the database"""
        def getAge(self, name):
            # Define the query
            sql = """SELECT Age FROM People WHERE name = ?"""
            # Run the query, and set a callback to run when done
            return self.runOperation(sql, name)


    def gotAge(resultlist, name):
        """Callback for handling the result of the query"""
	age = resultlist[0][0]          # First field of first record
	print "%s is %d years old" % (name, age)

    db = MyDatabase(dbpool)

    # These will *not* block.  Hooray!
    db.getAge("Andrew").addCallbacks(gotAge, db.operationError, 
                                     callbackArgs=name).arm()
    db.getAge("Glyph").addCallbacks(gotAge, db.operationError,
                                    callbackArgs=name).arm()

If this looks sane to you, I'll update the example and the surrounding text at
poetry.puzzling.org/twisted_db.html.

> > If someone wants to place this (or an edited version of it) on
> > twistedmatrix.com, or distribute it with Twisted, or both, they are welcome.
> 
> Will do.  We've got lots of docs to write, and we'll integrate these as
> soon as I have some time.  Thanks for relieving a bit of that burden!

Actually, it was suggested to me that I should be more explicit with my
licencing of that document.  I haven't had time to probably examine
documentation licences, so I'll just state this instead: I donate the copyright
to that tutorial to the Twisted developers (i.e. Twisted Matrix Laboratories).
Basically, do what you like, I won't sue :)

-Andrew.




From twisted at itamarst.org  Tue Jan  1 10:40:54 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 01 Jan 2002 19:40:54 +0200
Subject: [Twisted-Python] Return of the "write immediately" patch
Message-ID: <3C31F4A6.4090201@itamarst.org>

Last time I tried this, my benchmarks were being screwed up by a bug in 
twisted's threading. This time I'm getting consistent results - an 
improvement in write performance (large writes over loopback) of 22%!


Index: twisted/internet/abstract.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/abstract.py,v
retrieving revision 1.11
diff -c -r1.11 abstract.py
*** twisted/internet/abstract.py	30 Oct 2001 23:55:39 -0000	1.11
--- twisted/internet/abstract.py	1 Jan 2002 17:40:27 -0000
***************
*** 106,112 ****
           if not self.connected:
               return
           if data:
!             self.unsent = self.unsent + data
               if self.producer is not None:
                   if len(self.unsent) > self.bufferSize:
                       self.producerPaused = 1
--- 106,118 ----
           if not self.connected:
               return
           if data:
!             if not self.unsent:
!                 l = self.writeSomeData(data)
!                 if l < 0 or l == len(data):
!                     return
!                 self.unsent = data[l:]
!             else:
!                 self.unsent = self.unsent + data
               if self.producer is not None:
                   if len(self.unsent) > self.bufferSize:
                       self.producerPaused = 1




From sune-twisted at mel.interspace.dk  Wed Jan  2 09:49:10 2002
From: sune-twisted at mel.interspace.dk (Sune Kirkeby)
Date: Wed, 2 Jan 2002 17:49:10 +0100
Subject: [Twisted-Python] [patch] mktap web --resource
Message-ID: <20020102174909.A26812@mel.interspace.dk>

Hi, all!

Attached is a short patch to add a --resource option to "mktap web",
here is the --help for it:

  -r, --resource=  <class> is the name (including module) of a subclass of
                   twisted.web.resource.Resource to publish.

So you can have any subclass of t.w.r.Resource be the 'root' of your
web-server.


I have also been working on a few other things:

- an async Pytho-only PostgreSQL interface (not t.e.adbapi
  compatible, since I am not usre I like it's interface and need
  to play a bit before I figure out how I would like an async
  SQL-database interface to behave.)

- a SQLResultWidget, very dull right now but I will probably hack
  some BoboDTML support into it.

first-post-but-not-like-/.-ly yrs,

-- 
Sune Kirkeby | /* we're still looking for the end of the
             |  * server's header ... (does that make header
             |  * parsing an "out of body experience" ?  */
             |                          -- jcc.c in junkex source-code



From sune-twisted at mel.interspace.dk  Wed Jan  2 10:00:40 2002
From: sune-twisted at mel.interspace.dk (Sune Kirkeby)
Date: Wed, 2 Jan 2002 18:00:40 +0100
Subject: [Twisted-Python] [patch] mktap web --resource
In-Reply-To: <20020102174909.A26812@mel.interspace.dk>; from sune-twisted@mel.interspace.dk on Wed, Jan 02, 2002 at 05:49:10PM +0100
References: <20020102174909.A26812@mel.interspace.dk>
Message-ID: <20020102180040.A27070@mel.interspace.dk>

[ Sune Kirkeby ]
> Attached is a short patch

and-here-it-really-is'ly

-- 
Sune Kirkeby | Help stamp out and abolish redundancy
             | and repetition.
-------------- next part --------------
diff --exclude-from=diffignore -Naur Twisted-0.12.3/twisted/tap/web.py Twisted/twisted/tap/web.py
--- Twisted-0.12.3/twisted/tap/web.py	Wed Nov 28 08:17:29 2001
+++ Twisted/twisted/tap/web.py	Wed Jan  2 17:31:02 2002
@@ -73,6 +73,18 @@
 
     opt_s = opt_static
 
+    def opt_resource(self, path):
+        """<class> is the name (including module) of a subclass of
+        twisted.web.resource.Resource to publish."""
+
+        i = string.rindex(path, '.')
+        module_name, klass_name = path[:i], path[i+1:]
+
+        module = __import__(module_name)
+        klass = getattr(module, klass_name)
+        self.root = klass()
+
+    opt_r = opt_resource
 
 def getPorts(app, config):
     ports = []

From sune-twisted at mel.interspace.dk  Wed Jan  2 10:07:17 2002
From: sune-twisted at mel.interspace.dk (Sune Kirkeby)
Date: Wed, 2 Jan 2002 18:07:17 +0100
Subject: [Twisted-Python] [patch] mktap web --resource
In-Reply-To: <20020102174909.A26812@mel.interspace.dk>; from sune-twisted@mel.interspace.dk on Wed, Jan 02, 2002 at 05:49:10PM +0100
References: <20020102174909.A26812@mel.interspace.dk>
Message-ID: <20020102180717.A27178@mel.interspace.dk>

[ Sune Kirkeby ]
> I have also been working on a few other things:

Which reminds me:  Is there no anonymous CVS access to the twisted
repository?  It would be nice to have.

talking-with-myself'ly

-- 
Sune Kirkeby | Hailstorms tend to be distructive.  And one should not need
             | to use a passport in one's own country.
             |                           -- David Sugar on arch at dotgnu.org



From sune at mel.interspace.dk  Wed Jan  2 09:55:54 2002
From: sune at mel.interspace.dk (Sune Kirkeby)
Date: Wed, 2 Jan 2002 17:55:54 +0100
Subject: [Twisted-Python] [patch] mktap web --resource
In-Reply-To: <20020102174909.A26812@mel.interspace.dk>; from sune-twisted@mel.interspace.dk on Wed, Jan 02, 2002 at 05:49:10PM +0100
References: <20020102174909.A26812@mel.interspace.dk>
Message-ID: <20020102175554.A26964@mel.interspace.dk>

[ Sune Kirkeby ]
> Attached is a short patch

and-here-it-really-is'ly

-- 
Sune Kirkeby | STUPIDITY -- Quitters Never Win, Winners Never Quit,
             | But Those Who Never Win AND Never Quit Are Idiots.
-------------- next part --------------
diff --exclude-from=diffignore -Naur Twisted-0.12.3/twisted/tap/web.py Twisted/twisted/tap/web.py
--- Twisted-0.12.3/twisted/tap/web.py	Wed Nov 28 08:17:29 2001
+++ Twisted/twisted/tap/web.py	Wed Jan  2 17:31:02 2002
@@ -73,6 +73,18 @@
 
     opt_s = opt_static
 
+    def opt_resource(self, path):
+        """<class> is the name (including module) of a subclass of
+        twisted.web.resource.Resource to publish."""
+
+        i = string.rindex(path, '.')
+        module_name, klass_name = path[:i], path[i+1:]
+
+        module = __import__(module_name)
+        klass = getattr(module, klass_name)
+        self.root = klass()
+
+    opt_r = opt_resource
 
 def getPorts(app, config):
     ports = []

From glyph at twistedmatrix.com  Wed Jan  2 10:13:45 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 02 Jan 2002 11:13:45 -0600
Subject: [Twisted-Python] [patch] mktap web --resource
In-Reply-To: <20020102180717.A27178@mel.interspace.dk>
References: <20020102174909.A26812@mel.interspace.dk> 
	<20020102180717.A27178@mel.interspace.dk>
Message-ID: <1009991625.1908.12.camel@zelda>

On Wed, 2002-01-02 at 11:07, Sune Kirkeby wrote:
> Which reminds me:  Is there no anonymous CVS access to the twisted
> repository?  It would be nice to have.

You can chalk this up to random neurotic behavior on my part.  I'm a bit
paranoid.  However, somewhat more sane Twisted developers than I are
working on rectifying the problem.

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From twisted at itamarst.org  Wed Jan  2 10:18:25 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 02 Jan 2002 19:18:25 +0200
Subject: [Twisted-Python] [patch] mktap web --resource
References: <20020102174909.A26812@mel.interspace.dk> 	<20020102180717.A27178@mel.interspace.dk> <1009991625.1908.12.camel@zelda>
Message-ID: <3C3340E1.5060502@itamarst.org>

Glyph Lefkowitz wrote:


> You can chalk this up to random neurotic behavior on my part.  I'm a bit
> paranoid.  However, somewhat more sane Twisted developers than I are
> working on rectifying the problem.


Really? Nice to know - is this ViewCVS tarballs or real anonymous pserver CVS?







From twisted at itamarst.org  Wed Jan  2 10:20:15 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 02 Jan 2002 19:20:15 +0200
Subject: [Twisted-Python] [patch] mktap web --resource
References: <20020102174909.A26812@mel.interspace.dk>
Message-ID: <3C33414F.6020409@itamarst.org>

Sune Kirkeby wrote:

> - an async Pytho-only PostgreSQL interface (not t.e.adbapi
>   compatible, since I am not usre I like it's interface and need
>   to play a bit before I figure out how I would like an async
>   SQL-database interface to behave.)

Very cool! There's pypgsql's libpq wrapper which does async, but it's C, and 
the API is basically the same as the C. Any chance for async large object 
support as well?




From ivo at amaze.nl  Wed Jan  2 10:46:42 2002
From: ivo at amaze.nl (Ivo van der Wijk)
Date: Wed, 2 Jan 2002 18:46:42 +0100
Subject: [Twisted-Python] IRC protocol rewrite?
Message-ID: <20020102184642.A29692@amaze.nl>

Hi All,

I'm currently investigating the IRC Protocol as implemented by twisted,
to see if I perhaps can use it in my irc client, or if it perhaps can
use code from my irc protocol parsing.

However, I noticed some bugs and (imho) design failures in the current
implementation, which makes the code not very usefull for any other 
use than what it's currently used for (twisted irc client + server?)

For example, channels are hardcoded as starting with '#', i.e.
IRCClient.join prepends a '#' to the channelname. Hoewever, most servers
support alernative style channels such as &channel (local channels),
+channel (modeless channels), and perhaps more.

Furthermore, IMHO, the IRCClient class implements too many protocols
in one class. IRC, CTCP and DCC are distinct protocols, and each belong
in their own class.

Lastly, the current parsemsg routine can't handle ipv6 addresses in certain 
replies, i.e. a 311 (whois) reply like:

:irc.xs4all.nl 311 VladDrac [p] -patrick 3ffe:2500:900:2000:1337:1337:1337:1337 *:foo

will be parsed incorrectly. I may provide a patch for this later.

Is replacing the current IRC protocol with a (non-api-compatible) new
protocol discussable? If so, I'll make some suggestions on how I would
implement the protocol.

Cheers,

	Ivo

-- 
Drs. I.R. van der Wijk                              -=-
Brouwersgracht 132                      Amaze Internet Services V.O.F.
1013 HA Amsterdam, NL                               -=-
Tel: +31-20-4688336                       Linux/Web/Zope/SQL/MMBase
Fax: +31-20-4688337                           Network Solutions
Web:     http://www.amaze.nl/                    Consultancy
Email:   ivo at amaze.nl                               -=-



From carmstro at twistedmatrix.com  Wed Jan  2 11:50:25 2002
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Wed, 2 Jan 2002 12:50:25 -0600
Subject: [Twisted-Python] [patch] mktap web --resource
In-Reply-To: <20020102174909.A26812@mel.interspace.dk>
References: <20020102174909.A26812@mel.interspace.dk>
Message-ID: <20020102185024.GA20144@twistedmatrix.com>

On Wed, Jan 02, 2002 at 05:49:10PM +0100, Sune Kirkeby wrote:
> Hi, all!
> 
> Attached is a short patch to add a --resource option to "mktap web",
> here is the --help for it:
> 
>   -r, --resource=  <class> is the name (including module) of a subclass of
>                    twisted.web.resource.Resource to publish.
> 
> So you can have any subclass of t.w.r.Resource be the 'root' of your
> web-server.

I implemented this a long time ago with the '-m' option, which took a python
filename and a classname, but itamar shwacked it because no one was using
it. I'm not sure if it should be brought back or not, but you may want to
look into using plugins.

How's that config interface coming, which should obsolete all of this? ;-)

bugging-people-about-code-but-doing-none-myself-ly yours,

radix




From sune-twisted at mel.interspace.dk  Wed Jan  2 13:32:34 2002
From: sune-twisted at mel.interspace.dk (Sune Kirkeby)
Date: Wed, 2 Jan 2002 21:32:34 +0100
Subject: [Twisted-Python] Bug in t.w.w.WidgetPage
Message-ID: <20020102213234.A30425@mel.interspace.dk>

Hi all,

I think there might be a bug lurking in t.w.w.WidgetPage's handling
of Deferreds.  Take a look at t.w.w.WidgetPage.callback:

    def callback(self, result, position, decNeedsHeaders):
        if result != FORGET_IT:
            self.needsHeaders = self.needsHeaders - decNeedsHeaders
        else:
            result = [FORGET_IT]
        for i in xrange(len(result)):
            if isinstance(result[i], defer.Deferred):
                self._addDeferred(result[i], position+i)
        # print 'CALLBACK:',self.lst, position, result
        if not isinstance(result, types.ListType):
            result = [result]
        self.lst[position:position+1] = result
        assert self.position <= position
        self.keepRendering()
        for r in result:
            if isinstance(r, defer.Deferred):
                r.arm()

Now consider this sequence of events:

(1) We initialize a t.w.w.WidgetPage with two Deferreds (head and
    foot), so in our WidgetPage (let us call it foo) we have
    foo.lst = [head, foot].

(2) mouth is now almost done, so it defers the rest of it's
    computation, and callback's with a string 'Hello, ' and
    a Deferred (let us call it mouth).

(3) After foo.callback is done we now have that
    foo.lst = ['Hello, ', mouth, foot].

(4) Now foot is done and callback's with a string 'World!'.

(5) After foo.callback is done this time we have that
    foo.lst = ['Hello, ', 'World!', foot]

Whoa!  We just put our foot in our mouth!  So to speak :-)

-- 
Sune Kirkeby | In general, they do what you want, unless you want
             | consistency.       --Larry Wall in the perl man page



From glyph at twistedmatrix.com  Wed Jan  2 15:32:11 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 02 Jan 2002 16:32:11 -0600
Subject: [Twisted-Python] IRC protocol rewrite?
In-Reply-To: <20020102184642.A29692@amaze.nl>
References: <20020102184642.A29692@amaze.nl>
Message-ID: <1010010731.1908.21.camel@zelda>

On Wed, 2002-01-02 at 11:46, Ivo van der Wijk wrote:
> Hi All,
> 
> I'm currently investigating the IRC Protocol as implemented by twisted,
> to see if I perhaps can use it in my irc client, or if it perhaps can
> use code from my irc protocol parsing.
> 
> However, I noticed some bugs and (imho) design failures in the current
> implementation, which makes the code not very usefull for any other 
> use than what it's currently used for (twisted irc client + server?)
> 
> For example, channels are hardcoded as starting with '#', i.e.
> IRCClient.join prepends a '#' to the channelname. Hoewever, most servers
> support alernative style channels such as &channel (local channels),
> +channel (modeless channels), and perhaps more.

This is an intentional design failure :).

The feature-set of IRC is highly idiosyncratic, and difficult to
represent in terms of "real" abstractions -- for example, the notion of
a "modeless" channel doesn't particularly make sense outside of the
world of IRC's implementation; there are no gradations between "modeful"
and "modeless" channels, unless you have a Services implementation w/
ChanServ and mode lock.  "local" channels don't either, considering that
they are really just a way to introduce an artificial barrier between
servers.  The whole point of the R in IRC is to avoid that :)

I have to agree that for the client, it's probably a bad idea to enforce
restrictions like that, since it's designed to connect to other IRC
servers, and be generally useful to connect to external services which
may be set up in bizarre configurations.

On the server, however, I would like to drop support for as many IRCisms
as reasonably possible, so that we can implement a richer set of
functionality; probably through the "services" idiom, since that allows
for fairly arbitrary specification of inputs (as opposed to the limited
set of client-understood modes that one may specify, and the 26
allowable characters).

> Furthermore, IMHO, the IRCClient class implements too many protocols
> in one class. IRC, CTCP and DCC are distinct protocols, and each belong
> in their own class.

I disagree.  IRC is a poorly specified protocol in its RFC, so the
"usual" extensions are a part of any reasonable IRC implementation these
days.  Unless you can come up with a requirement for functionality that
would require them being in different classes, I think they should stay
where they are.

> Lastly, the current parsemsg routine can't handle ipv6 addresses in certain 
> replies, i.e. a 311 (whois) reply like:
> 
> :irc.xs4all.nl 311 VladDrac [p] -patrick 3ffe:2500:900:2000:1337:1337:1337:1337 *:foo
> 
> will be parsed incorrectly. I may provide a patch for this later.

Whoops.  That definitely sounds like it needs to be fixed :)

> Is replacing the current IRC protocol with a (non-api-compatible) new
> protocol discussable? If so, I'll make some suggestions on how I would
> implement the protocol.

Certainly discussable, especially since the IRC support is not as good
as it could be.  If you replace it with something non-API-compatible,
I'd like to hear from the authors of code that this would break, and
certainly refactor any code currently in Twisted to work the new way.

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From sune-twisted at mel.interspace.dk  Wed Jan  2 15:33:51 2002
From: sune-twisted at mel.interspace.dk (Sune Kirkeby)
Date: Wed, 2 Jan 2002 23:33:51 +0100
Subject: [Twisted-Python] Bug in t.w.w.WidgetPage
In-Reply-To: <20020102213234.A30425@mel.interspace.dk>; from sune-twisted@mel.interspace.dk on Wed, Jan 02, 2002 at 09:32:34PM +0100
References: <20020102213234.A30425@mel.interspace.dk>
Message-ID: <20020102233351.A32086@mel.interspace.dk>

[ Sune Kirkeby ]
> I think there might be a bug lurking in t.w.w.WidgetPage's
> handling of Deferreds.

And here is a patch to fix it.  The patch does away with Deferred
holding their positions in lst, instead a Deferred now hold a
sentinel, that is put into lst with the Deferred.

When we need the position in callback we go looking for the sentinel
the Deferred gave us.  This also allows us to stop keeping data we
have written to the request (i.e. lst now only holds the Deferreds
and strings that have not been sent).

Also, the patch adds NOT_DONE_YET support to WidgetPage.  This works
by Deferreds callback'ing with a tuple (NOT_DONE_YET,
partial_result) which is insert into lst before the Deferred.

So, now Deferreds can callback to WidgetPage multiple times with
partial results. (Not sure if this is abusing the Deferred protocol,
but it solves an itch I had :-).

Comments?

-- 
Sune Kirkeby | Teori er når vi har forstået alting, men intet virker. Praksis
             | er når alting virker, men ingen forstår hvorfor. Hos os
             | er de to ting forenet: Intet virker og ingen forstår hvorfor!



From sune-twisted at mel.interspace.dk  Wed Jan  2 15:37:08 2002
From: sune-twisted at mel.interspace.dk (Sune Kirkeby)
Date: Wed, 2 Jan 2002 23:37:08 +0100
Subject: [Twisted-Python] Bug in t.w.w.WidgetPage
In-Reply-To: <20020102233351.A32086@mel.interspace.dk>; from sune-twisted@mel.interspace.dk on Wed, Jan 02, 2002 at 11:33:51PM +0100
References: <20020102213234.A30425@mel.interspace.dk> <20020102233351.A32086@mel.interspace.dk>
Message-ID: <20020102233708.B32086@mel.interspace.dk>

[ Sune Kirkeby ]
> And here is a patch to fix it.

s/WidgetPage/RenderSession/g, in my previous two mails.

i-need-a-mua-that-reads-my-mind-and-attach-patches'ly,

-- 
Sune Kirkeby | Your superior intellect is no match for
             | our puny weapons.
-------------- next part --------------
diff --exclude-from=diffignore -Naur Twisted-CVS/twisted/web/widgets.py Twisted/twisted/web/widgets.py
--- Twisted-CVS/twisted/web/widgets.py	Wed Dec 12 13:00:14 2001
+++ Twisted/twisted/web/widgets.py	Wed Jan  2 23:17:53 2002
@@ -474,72 +474,122 @@
         return html.PRE(io.getvalue())
 
 class RenderSession:
+    """I handle rendering of a list of deferreds, outputting their
+    results in correct order."""
+
+    class Sentinel:
+        pass
+
     def __init__(self, lst, request):
         self.lst = lst
         self.request = request
-        self.position = 0
         self.needsHeaders = 0
-        pos = 0
+        self.beforeBody = 1
+
         toArm = []
-        # You might want to set a header from a deferred, in which case you
-        # have to set an attribute -- needsHeader.
-        for item in lst:
+        for i in range(len(self.lst)):
+            item = self.lst[i]
             if isinstance(item, defer.Deferred):
-                self._addDeferred(item, pos)
+                self.lst[i] = (self._addDeferred(item), item)
                 toArm.append(item)
-            pos = pos + 1
+    
         self.keepRendering()
-        # print "RENDER: DONE WITH INITIAL PASS"
         for item in toArm:
             item.arm()
 
-    def _addDeferred(self, deferred, position):
+    def _addDeferred(self, deferred):
+        sentinel = self.Sentinel()
         if hasattr(deferred, 'needsHeader'):
+            # You might want to set a header from a deferred, in which
+            # case you have to set an attribute -- needsHeader.
             self.needsHeaders = self.needsHeaders + 1
-            args = (position, 1)
+            args = (sentinel, 1)
         else:
-            args = (position, 0)
+            args = (sentinel, 0)
         deferred.addCallbacks(self.callback, self.callback,
                               callbackArgs=args, errbackArgs=args)
+        return sentinel
 
-    def callback(self, result, position, decNeedsHeaders):
+    def callback(self, result, sentinel, decNeedsHeaders):
         if result != FORGET_IT:
             self.needsHeaders = self.needsHeaders - decNeedsHeaders
         else:
             result = [FORGET_IT]
-        for i in xrange(len(result)):
-            if isinstance(result[i], defer.Deferred):
-                self._addDeferred(result[i], position+i)
-        # print 'CALLBACK:',self.lst, position, result
-        if not isinstance(result, types.ListType):
+        
+        # Make sure result is a sequence,
+        if not type(result) in (types.ListType, types.TupleType):
             result = [result]
-        self.lst[position:position+1] = result
-        assert self.position <= position
+
+        # If the deferred does not wish to produce it's result all at
+        # once, it can give us a partial result as
+        #  (NOT_DONE_YET, partial_result)
+        if result[0] is NOT_DONE_YET:
+            done = 0
+            result = result[1]
+            if not type(result) in (types.ListType, types.TupleType):
+                result = [result]
+        else:
+            done = 1
+
+        toArm = []
+        for i in xrange(len(result)):
+            item = result[i]
+            if isinstance(item, defer.Deferred):
+                result[i] = (self._addDeferred(item), item)
+                toArm.append(item)
+
+        for position in range(len(self.lst)):
+            item = self.lst[position]
+            if type(item) is types.TupleType and len(item) > 0:
+                if item[0] is sentinel:
+                    break
+        else:
+            raise 'Sentinel for Deferred not found!'
+
+        if done:
+            self.lst[position:position+1] = result
+        else:
+            self.lst[position:position] = result
+
+        # Consolidate strings to minimize length of list,
+        for i in range(1, len(self.lst)):
+            last = type(self.lst[i-1]) is types.StringType
+            this = type(self.lst[i]) is types.StringType
+            if last and this:
+                self.lst[i-1:i+1] = [self.lst[i-1] + self.lst[i]]
+
         self.keepRendering()
-        for r in result:
-            if isinstance(r, defer.Deferred):
-                r.arm()
+        for r in toArm:
+            r.arm()
 
 
     def keepRendering(self):
         if self.needsHeaders:
-            # short circuit actual rendering process until we're sure no more
-            # deferreds need to set headers...
+            # short circuit actual rendering process until we're sure no
+            # more deferreds need to set headers...
             return
+
         assert self.lst is not None, "This shouldn't happen."
         while 1:
-            item = self.lst[self.position]
-            if self.position == 0 and item == FORGET_IT:
-                # If I haven't moved yet, and the widget wants to take over the page, let it do so!
+            item = self.lst[0]
+            if self.beforeBody and item == FORGET_IT:
+                # If I haven't moved yet, and the widget wants to take
+                # over the page, let it do so!
                 return
+            
             if isinstance(item, types.StringType):
+                self.beforeBody = 0
                 self.request.write(item)
-            elif isinstance(item, defer.Deferred):
-                return
+            elif type(item) is types.TupleType and len(item) > 0:
+                if isinstance(item[0], self.Sentinel):
+                    return
             else:
-                self.request.write("RENDERING UNKNOWN: %s" % html.PRE(repr(item)))
-            self.position = self.position + 1
-            if self.position == len(self.lst):
+                self.beforeBody = 0
+                unknown = html.PRE(repr(item))
+                self.request.write("RENDERING UNKNOWN: %s" % unknown)
+
+            del self.lst[0]
+            if len(self.lst) == 0:
                 self.lst = None
                 self.request.finish()
                 return

From acapnotic at twistedmatrix.com  Wed Jan  2 15:38:00 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 02 Jan 2002 14:38:00 -0800
Subject: [Twisted-Python] IRC protocol rewrite?
In-Reply-To: <20020102184642.A29692@amaze.nl>
References: <20020102184642.A29692@amaze.nl>
Message-ID: <1010011080.4106.4.camel@troglodyte>

On Wed, 2002-01-02 at 09:46, Ivo van der Wijk wrote:
> However, I noticed some bugs and (imho) design failures in the current
> implementation, which makes the code not very usefull for any other 
> use than what it's currently used for (twisted irc client + server?)

(And Tendril.  Don't forget Tendril, in twisted.words.tendril.)
I'm interested in hearing what makes it "not very useful" though.  I
didn't really get a sense of that from your message.

> For example, channels are hardcoded as starting with '#', i.e.
> IRCClient.join prepends a '#' to the channelname. Hoewever, most servers
> support alernative style channels such as &channel (local channels),
> +channel (modeless channels), and perhaps more.

Valid point.  Of course, nobody actually uses those in real life
anymore, but it'd be fine to support it in the interest of completeness.

> Furthermore, IMHO, the IRCClient class implements too many protocols
> in one class. IRC, CTCP and DCC are distinct protocols, and each belong
> in their own class.

There's some sense to this too.  As a Protocol class, IRCClient is
overfeatured (as a "client", maybe it's okay).  I'm not quite sure how
to split off the CTCP stuff though, as intertwined as the CTCP messages
are with IRC.  Would you define IRCClient not only as a Protocol, but as
a Transport for CTCP?  Eaugh...  A somewhat more mundane option would be
to just put all the ctcp* methods in a mixin class.  That might make the
organization a little tidier, but it wouldn't change the interface at
all, so I'm not sure if that would satisfy your concerns or not.

As for DCC, it's in seperate protocol classes already.

> Lastly, the current parsemsg routine can't handle ipv6 addresses in certain 
> replies, i.e. a 311 (whois) reply like:
> 
> :irc.xs4all.nl 311 VladDrac [p] -patrick 3ffe:2500:900:2000:1337:1337:1337:1337 *:foo
> 
> will be parsed incorrectly. I may provide a patch for this later.

Eh?  It's not immediately obvious to me what will break.  But patches
are always fine.  =)

> Is replacing the current IRC protocol with a (non-api-compatible) new
> protocol discussable? If so, I'll make some suggestions on how I would
> implement the protocol.

IMO, speaking as the guy who's probably spent the most time with it,
it's certainly discussable.  Unless there was some message I didn't read
from the BDFL about an API freeze. ;)  

"Oh no, it's a trap!"-ly,

 - Kevin (Acapnotic)

-- 
The moon is waning gibbous, 86.8% illuminated, 18.3 days old.





From glyph at twistedmatrix.com  Wed Jan  2 15:46:08 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 02 Jan 2002 16:46:08 -0600
Subject: [Twisted-Python] Bug in t.w.w.WidgetPage
In-Reply-To: <20020102233351.A32086@mel.interspace.dk>
References: <20020102213234.A30425@mel.interspace.dk> 
	<20020102233351.A32086@mel.interspace.dk>
Message-ID: <1010011568.571.24.camel@zelda>

On Wed, 2002-01-02 at 16:33, Sune Kirkeby wrote:
> [ Sune Kirkeby ]
> > I think there might be a bug lurking in t.w.w.WidgetPage's
> > handling of Deferreds.
> 
> And here is a patch to fix it.
...
> Comments?

I haven't had time to review it yet, but thanks a lot!  This is a bug
that I'd suspected was in twisted.web for some time now, but hadn't had
time to verify or test for.

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From ivo at amaze.nl  Wed Jan  2 16:18:34 2002
From: ivo at amaze.nl (Ivo van der Wijk)
Date: Thu, 3 Jan 2002 00:18:34 +0100
Subject: [Twisted-Python] IRC protocol rewrite?
In-Reply-To: <1010011080.4106.4.camel@troglodyte>; from acapnotic@twistedmatrix.com on Wed, Jan 02, 2002 at 02:38:00PM -0800
References: <20020102184642.A29692@amaze.nl> <1010011080.4106.4.camel@troglodyte>
Message-ID: <20020103001834.B29692@amaze.nl>

On Wed, Jan 02, 2002 at 02:38:00PM -0800, Kevin Turner wrote:
> On Wed, 2002-01-02 at 09:46, Ivo van der Wijk wrote:
> > However, I noticed some bugs and (imho) design failures in the current
> > implementation, which makes the code not very usefull for any other 
> > use than what it's currently used for (twisted irc client + server?)
> 
> (And Tendril.  Don't forget Tendril, in twisted.words.tendril.)
> I'm interested in hearing what makes it "not very useful" though.  I
> didn't really get a sense of that from your message.
> 

The current implementation is rather specific. For example, it assumes
only #-like channels exist, it takes actions/decisions the client builder
would rather like to implement (i.e. irc_ERR_NICKNAMEINUSE will generate
a new nickname by appending a _ - who says I want this in my client?),
ctcp_PING immediately sends a ping reply - this won't work with my
ignore list, etc.

I'm not saying this is wrong behaviour, it just does not belong at this
level in the protocol. I just want a basic abstraction of the server
connecting/disconnecting, server messages receiving (dispatching) and
sending. Anything else should be implemented in a derived/separate class.

> > For example, channels are hardcoded as starting with '#', i.e.
> > IRCClient.join prepends a '#' to the channelname. Hoewever, most servers
> > support alernative style channels such as &channel (local channels),
> > +channel (modeless channels), and perhaps more.
> 
> Valid point.  Of course, nobody actually uses those in real life
> anymore, but it'd be fine to support it in the interest of completeness.
> 

IRCops tend to visit channels like &ERRORS and &NOTICES (at least ircnet
supports this) to view server messages. Besides, you simply don't adhere to
the 'protocol' (eventhough it's poorly documented). And we have MIRC for
that, right? :)

> > Furthermore, IMHO, the IRCClient class implements too many protocols
> > in one class. IRC, CTCP and DCC are distinct protocols, and each belong
> > in their own class.
> 
> There's some sense to this too.  As a Protocol class, IRCClient is
> overfeatured (as a "client", maybe it's okay).  I'm not quite sure how
> to split off the CTCP stuff though, as intertwined as the CTCP messages
> are with IRC.  Would you define IRCClient not only as a Protocol, but as
> a Transport for CTCP?  Eaugh...  A somewhat more mundane option would be
> to just put all the ctcp* methods in a mixin class.  That might make the
> organization a little tidier, but it wouldn't change the interface at
> all, so I'm not sure if that would satisfy your concerns or not.
> 

The name IRCClient is a bit misleading, but the basic IRC protocol *is*
the transport for CTCP! CTCP is a separate protocol encoded in ^A's in
PRIVMSG/NOTICE. Also, CTCP is way less documented than the irc protocol,
and clients are (somewhat) free to make their own CTCP extension (i.e.
you coud send whiteboard drawing commands over ctcp or communicate 
gameplay over ctcp over irc. Some clients (zircon?) actually do this)

> As for DCC, it's in seperate protocol classes already.
> 

There's is quite some DCC support in the IRCClient class that I have here
(twisted 0.12.3), i.e. ctcpQuery_DCC which initiates DCC, maintains a list
of sessions, etc

> > Lastly, the current parsemsg routine can't handle ipv6 addresses in certain 
> > replies, i.e. a 311 (whois) reply like:
> > 
> > :irc.xs4all.nl 311 VladDrac [p] -patrick 3ffe:2500:900:2000:1337:1337:1337:1337 *:foo
> > 
> > will be parsed incorrectly. I may provide a patch for this later.
> 
> Eh?  It's not immediately obvious to me what will break.  But patches
> are always fine.  =)
>

>>> parsemsg(":irc.xs4all.nl 311 VladDrac [p] -patrick 3ffe:2500:900:2000:1337:1337:1337:1337 *:foo")
('irc.xs4all.nl', '311', ['VladDrac', '[p]', '-patrick', '3ffe', '2500:900:2000:1337:1337:1337:1337 *:foo'])

It's the assumption that a ':' will start the remainder of the argument
list, which is not true if one of the arguments is a ipv6 address.

> > Is replacing the current IRC protocol with a (non-api-compatible) new
> > protocol discussable? If so, I'll make some suggestions on how I would
> > implement the protocol.
> 
> IMO, speaking as the guy who's probably spent the most time with it,
> it's certainly discussable.  Unless there was some message I didn't read
> from the BDFL about an API freeze. ;)  
> 

Ok :)

	Ivo

-- 
Drs. I.R. van der Wijk                              -=-
Brouwersgracht 132                      Amaze Internet Services V.O.F.
1013 HA Amsterdam, NL                               -=-
Tel: +31-20-4688336                       Linux/Web/Zope/SQL/MMBase
Fax: +31-20-4688337                           Network Solutions
Web:     http://www.amaze.nl/                    Consultancy
Email:   ivo at amaze.nl                               -=-



From acapnotic at twistedmatrix.com  Wed Jan  2 17:11:34 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 02 Jan 2002 16:11:34 -0800
Subject: [Twisted-Python] IRC protocol rewrite?
In-Reply-To: <20020103001834.B29692@amaze.nl>
References: <20020102184642.A29692@amaze.nl>
	<1010011080.4106.4.camel@troglodyte>  <20020103001834.B29692@amaze.nl>
Message-ID: <1010016694.4110.8.camel@troglodyte>

On Wed, 2002-01-02 at 15:18, Ivo van der Wijk wrote:

> it takes actions/decisions the client builder
> would rather like to implement (i.e. irc_ERR_NICKNAMEINUSE will generate
> a new nickname by appending a _ - who says I want this in my client?),
> ctcp_PING immediately sends a ping reply - this won't work with my
> ignore list, etc.

Ah, this is the information I was looking for.  (The bit about
supporting & channels is a minor detail, worth fixing but not  grounds
for reimplementation.)  In reply, let me just say that subclassing is a
wonderful and powerful thing.  You are invited, encouraged even, to
override any methods which don't do what you want in your subclass. 
Default implementations are provided in the base class for things like
irc_ERR_NICKNAMEINUSE because every IRC client needs to have *some*
implementation of them, or else it will likely be so broken that it
won't be able to sign on.  But again, don't hesitate to override the
default methods with something else.  This class uses the
"""getattr(self, "prefix_%s" % command)()""" idiom, so you can always
add methods for more IRC or CTCP message types (i.e. Zircon extensions)
in your subclass too.

> There's is quite some DCC support in the IRCClient class that I have here
> (twisted 0.12.3), i.e. ctcpQuery_DCC which initiates DCC, maintains a list
> of sessions, etc

That's because it's a CTCP query which initiates the DCC connection. 
The DCC connection itself (as opposed to things talking about DCC
connections) has its own class and instance.

As for maintaining a list of sessions, I think that this does belong in
a "client" implementation, but I agree that this is not state that a
"protocol" class should be concerned with.  It's only there because I
couldn't see another way for a subclass to figure out which DCC sessions
were created, which is something you probably want to know for your
interface.  Perhaps the default ctcpQuery_DCC method should pass back
the DCC session as its return value?

-- 
The moon is waning gibbous, 86.3% illuminated, 18.3 days old.





From ivo at amaze.nl  Thu Jan  3 06:34:35 2002
From: ivo at amaze.nl (Ivo van der Wijk)
Date: Thu, 3 Jan 2002 14:34:35 +0100
Subject: [Twisted-Python] IRC protocol rewrite?
In-Reply-To: <1010016694.4110.8.camel@troglodyte>; from acapnotic@twistedmatrix.com on Wed, Jan 02, 2002 at 04:11:34PM -0800
References: <20020102184642.A29692@amaze.nl> <1010011080.4106.4.camel@troglodyte> <20020103001834.B29692@amaze.nl> <1010016694.4110.8.camel@troglodyte>
Message-ID: <20020103143435.E29692@amaze.nl>

On Wed, Jan 02, 2002 at 04:11:34PM -0800, Kevin Turner wrote:
> On Wed, 2002-01-02 at 15:18, Ivo van der Wijk wrote:
> 
> > it takes actions/decisions the client builder
> > would rather like to implement (i.e. irc_ERR_NICKNAMEINUSE will generate
> > a new nickname by appending a _ - who says I want this in my client?),
> > ctcp_PING immediately sends a ping reply - this won't work with my
> > ignore list, etc.
> 
> Ah, this is the information I was looking for.  (The bit about
> supporting & channels is a minor detail, worth fixing but not  grounds
> for reimplementation.)  In reply, let me just say that subclassing is a
> wonderful and powerful thing.  You are invited, encouraged even, to
> override any methods which don't do what you want in your subclass. 
> Default implementations are provided in the base class for things like
> irc_ERR_NICKNAMEINUSE because every IRC client needs to have *some*
> implementation of them, or else it will likely be so broken that it
> won't be able to sign on.  But again, don't hesitate to override the
> default methods with something else.  This class uses the
> """getattr(self, "prefix_%s" % command)()""" idiom, so you can always
> add methods for more IRC or CTCP message types (i.e. Zircon extensions)
> in your subclass too.
> 

Well, sure, I can override anything. But in this specific case I'd have
to override so much (and stick with redundant unused code), that I'd rather
re-implement things.

Proposal: I will implement the protocol the way I see it for my irc client,
somewhat based on the current code / the twisted philosophy (my client
needs a rewrite in that area anyway), and if others think my code is 
leaner/better/whatever than the current, we may consider replacing the
current irc protocol with it.

> > There's is quite some DCC support in the IRCClient class that I have here
> > (twisted 0.12.3), i.e. ctcpQuery_DCC which initiates DCC, maintains a list
> > of sessions, etc
> 
> That's because it's a CTCP query which initiates the DCC connection. 
> The DCC connection itself (as opposed to things talking about DCC
> connections) has its own class and instance.
> 

IMHO, this would be like an IP layer building (and maintaining) TCP sessions. 
>From the purists point of view, if I want the basic irc protocol (i.e. for 
some web messaging interface), I would have the redundant ctcp, dcc etc code 
as well. Sure, having it lingering and not using it around won't break 
anything, but the nice thing about OO is that you can encapsulate specific 
functionality into objects, extend them with extra (higher-level) features, 
etc.

> As for maintaining a list of sessions, I think that this does belong in
> a "client" implementation, but I agree that this is not state that a
> "protocol" class should be concerned with.  It's only there because I
> couldn't see another way for a subclass to figure out which DCC sessions
> were created, which is something you probably want to know for your
> interface.  Perhaps the default ctcpQuery_DCC method should pass back
> the DCC session as its return value?

That would be better, yes.

Cheers,

	Ivo

-- 
Drs. I.R. van der Wijk                              -=-
Brouwersgracht 132                      Amaze Internet Services V.O.F.
1013 HA Amsterdam, NL                               -=-
Tel: +31-20-4688336                       Linux/Web/Zope/SQL/MMBase
Fax: +31-20-4688337                           Network Solutions
Web:     http://www.amaze.nl/                    Consultancy
Email:   ivo at amaze.nl                               -=-



From sune-twisted at mel.interspace.dk  Fri Jan  4 12:06:19 2002
From: sune-twisted at mel.interspace.dk (Sune Kirkeby)
Date: Fri, 4 Jan 2002 20:06:19 +0100
Subject: [Twisted-Python] [patch] mktap web --resource
In-Reply-To: <3C33414F.6020409@itamarst.org>; from twisted@itamarst.org on Wed, Jan 02, 2002 at 07:20:15PM +0200
References: <20020102174909.A26812@mel.interspace.dk> <3C33414F.6020409@itamarst.org>
Message-ID: <20020104200619.A9428@mel.interspace.dk>

[ Itamar Shtull-Trauring ]
> Any chance for async large object support as well?

Yup, as time permits I hope to implement it.  For now I guess I will
spend more time experimenting with async DB-access in generel,
though.

-- 
Sune Kirkeby | Teori er når vi har forstået alting, men intet virker. Praksis
             | er når alting virker, men ingen forstår hvorfor. Hos os
             | er de to ting forenet: Intet virker og ingen forstår hvorfor!



From jasbahr at crash.org  Sat Jan  5 12:44:25 2002
From: jasbahr at crash.org (Jason L. Asbahr)
Date: Sat, 5 Jan 2002 13:44:25 -0600
Subject: [Twisted-Python] PB for Java status report
In-Reply-To: <3BEFCA35.4050904@itamarst.org>
Message-ID: <EIEFLCFECLLBKGPNJJIMOEHCHNAA.jasbahr@crash.org>

Hey, Itamar!  Ok, I want to hack Java applet clients for Twisted.  Where
should I look for your PB for Java source?

Thanks!

Jason



-----Original Message-----
From: twisted-python-admin at twistedmatrix.com
[mailto:twisted-python-admin at twistedmatrix.com]On Behalf Of Itamar
Shtull-Trauring
Sent: Monday, November 12, 2001 7:10 AM
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] PB for Java status report


It's now possible to create Referenceables in Java - meanwhile simple 
remote_xxx style ones only, no support for Perspectives or Viewables yet.

In other words, you can now create PB services in Java as well - I think 
it's pluggable enough that you could integrate this with any Java server 
architecture that uses streams (which is probably all of them :).



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From twisted at itamarst.org  Sun Jan  6 03:48:32 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 06 Jan 2002 12:48:32 +0200
Subject: [Twisted-Python] PB for Java status report
References: <EIEFLCFECLLBKGPNJJIMOEHCHNAA.jasbahr@crash.org>
Message-ID: <3C382B80.4000701@itamarst.org>

Jason L. Asbahr wrote:

> Hey, Itamar!  Ok, I want to hack Java applet clients for Twisted.  Where
> should I look for your PB for Java source?


Well, I know Jason found it, but if anyone else is interested -

A link to the latest version (I just released 0.3) can usually to be found 
on the twistedmatrix.com news section.

For those of you with CVS access, you can checkout TwistedJava from 
zaibach's cvs server.




From tv at twistedmatrix.com  Sun Jan  6 10:22:13 2002
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: 06 Jan 2002 19:22:13 +0200
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/internet main.py,1.51,1.52 poll.py,1.4,1.5
In-Reply-To: <E16NCJY-0005zi-00@zaibach.twistedmatrix.com>
References: <E16NCJY-0005zi-00@zaibach.twistedmatrix.com>
Message-ID: <87hepzv1h6.fsf@ki.yok.utu.fi>

Itamar Shtull-Trauring <itamarst at twistedmatrix.com> writes:

> Update of /cvs/Twisted/twisted/internet
> In directory zaibach:/tmp/cvs-serv23038
> 
> Modified Files:
> 	main.py poll.py 
> Log Message:
> made removing selectables at shutdown more generic so that poll-based event loop shutdown will work
> 
> diff -b -u -d -r1.51 -r1.52
> --- main.py	25 Dec 2001 13:22:13 -0000	1.51
> +++ main.py	6 Jan 2002 12:22:10 -0000	1.52
> @@ -242,11 +242,8 @@
>              log.msg('Select loop terminated.')
>  
>      finally:
> -        for reader in reads.keys():
> -            if reads.has_key(reader):
> -                del reads[reader]
> -            if writes.has_key(reader):
> -                del writes[reader]
> +        selectables = removeAll()
> +        for reader in selectables:
>              log.logOwner.own(reader)
>              try:
>                  reader.connectionLost()
> @@ -297,6 +294,17 @@
>      if writes.has_key(writer):
>          del writes[writer]
>  
> +def removeAll():
> +    """Remove all readers and writers, and return list of Selectables."""
> +    readers = reads.keys()
> +    for reader in readers:
> +        if reads.has_key(reader):
> +            del reads[reader]
> +        if writes.has_key(reader):
> +            del writes[reader]
> +    return readers
> +    
> +    
>  class _Win32Waker(styles.Ephemeral):
>      """I am a workaround for the lack of pipes on win32.

	What if you have fd 42 that is only a writer, not a reader?
        That removeAll() won't process it.

        readers = uniq(reads.keys(), writes.keys()) ?

        This does not affect the poll as readers and writers are
        "united" there.

-- 
tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}



From twisted at itamarst.org  Tue Jan  8 07:00:05 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 08 Jan 2002 16:00:05 +0200
Subject: [Twisted-Python] Use asyncore dispatchers with Twisted
Message-ID: <3C3AFB65.6000100@itamarst.org>

Yes, it is possible - you can use servers or clients written for asyncore 
together with twisted, using the following module. Should I check it in? If 
so, should it be in examples/ or twisted.internet, and what's a good module 
name?


===================================================================
"""Use asyncore dispatchers with Twisted.

If you have an asyncore dispatcher, you can still use it with twisted.
Just import this module, and don't run asyncore.loop() -- instead start
the twisted event loop, either by calling twisted.internet.main.run(),
or the usual way by calling an Application instance's run() method.
"""

import asyncore

from twisted.internet import main


class AsyncoreLooper:
     """Run the asyncore event loop for asyncore dispatchers."""

     def timeout(self):
         if asyncore.socket_map:
             return 0.0
         else:
             return None

     def runUntilCurrent(self):
         asyncore.poll(0.001)

asyncoreLooper = AsyncoreLooper()
main.addDelayed(asyncoreLooper)

if __name__ == '__main__':
     # example, run debugging SMTP proxy (included with 2.1)
     # telnet to port 8025 to try it out.
     import smtpd
     d = smtpd.DebuggingServer(("localhost", 8025), ("gateway1.att.net", 25))
     main.run()




From glyph at twistedmatrix.com  Tue Jan  8 10:40:27 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 08 Jan 2002 11:40:27 -0600
Subject: [Twisted-Python] Use asyncore dispatchers with Twisted
In-Reply-To: <3C3AFB65.6000100@itamarst.org>
References: <3C3AFB65.6000100@itamarst.org>
Message-ID: <1010511627.3924.5.camel@zelda>

There has GOT to be a better way to do this :)

On Tue, 2002-01-08 at 08:00, Itamar Shtull-Trauring wrote:
> Yes, it is possible - you can use servers or clients written for asyncore 
> together with twisted, using the following module. Should I check it in? If 
> so, should it be in examples/ or twisted.internet, and what's a good module 
> name?
> 
> 
> ===================================================================
> """Use asyncore dispatchers with Twisted.
> 
> If you have an asyncore dispatcher, you can still use it with twisted.
> Just import this module, and don't run asyncore.loop() -- instead start
> the twisted event loop, either by calling twisted.internet.main.run(),
> or the usual way by calling an Application instance's run() method.
> """
> 
> import asyncore
> 
> from twisted.internet import main
> 
> 
> class AsyncoreLooper:
>      """Run the asyncore event loop for asyncore dispatchers."""
> 
>      def timeout(self):
>          if asyncore.socket_map:
>              return 0.0
>          else:
>              return None
> 
>      def runUntilCurrent(self):
>          asyncore.poll(0.001)
> 
> asyncoreLooper = AsyncoreLooper()
> main.addDelayed(asyncoreLooper)
> 
> if __name__ == '__main__':
>      # example, run debugging SMTP proxy (included with 2.1)
>      # telnet to port 8025 to try it out.
>      import smtpd
>      d = smtpd.DebuggingServer(("localhost", 8025), ("gateway1.att.net", 25))
>      main.run()
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From twisted at itamarst.org  Tue Jan  8 15:43:14 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 09 Jan 2002 00:43:14 +0200
Subject: [Twisted-Python] Use asyncore dispatchers with Twisted
References: <3C3AFB65.6000100@itamarst.org> <1010511627.3924.5.camel@zelda>
Message-ID: <3C3B7602.3040401@itamarst.org>

Glyph Lefkowitz wrote:

> There has GOT to be a better way to do this :)

Well, two other possibilities:

1) Wrap each dispatcher with a Selectable and plug those in to the 
twisted event loop. I think we'd still need a Delayed to deal with the 
difference between twisted's addReader() and asyncore's readable() (in 
twisted you set yourself, in asyncore the event loop does that for you.)

2) Make asyncore twisted's core event loop - very icky, and possible 
conflicts with other event loops, such as GUI toolkits.

I actually think this way isn't bad - consider that asyncore.loop() does 
basically the same thing as this code. The drawbacks are of course two 
select() calls per loop, and the hardcoded select() timeout - but with 
0.0 it started sucking up all my CPU.

Anyway, the idea is to embrace and assimilate - once we've got them 
hooked with Twisted's *other* cool stuff they'll end up rewriting as a 
Protocol anyway ;)




From twisted at itamarst.org  Sun Jan 13 02:40:37 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 13 Jan 2002 11:40:37 +0200
Subject: [Twisted-Python] Per-connection and per-protocol stats
Message-ID: <3C415615.1030901@itamarst.org>

As I mentioned before in the metrics message, I want to have for each 
protocol events stats, per server and per server connection. This is the 
code I currently use (comments on the hits per second algorithm and in 
general are welcome.) I also have a web Resource for this so I can view 
stats with a nice interface.


======================================
"""Event monitoring support"""

import operator

from twisted.python import threadable, delay


class ProtocolMonitor:
     """Monitor a server that serves connections.

     Accepts a list of event names which the protocol can then log with
     log_event.
     """

     def __init__(self, name, eventNames):
         self.name = name
         self.eventNames = eventNames
         self.connections = {}
         self.eventcounters = EventCounters(eventNames)

     def install(self):
         """Make sure reset() is run every 0.1 seconds."""
         from twisted.internet import main
         self.looper = delay.Delayed()
         self.looper.ticktime = 0.1
         self.looper.loop(self.reset, 1)
         main.addDelayed(self.looper)

     def uninstall(self):
         """Uninstall Delayed."""
         from twisted.internet import main
         main.removeDelayed(self.looper)
         del self.looper

     def reset(self):
         """Runs once a second, resets all EventCounters."""
         for e in self.connections.values():
             e.reset()
         self.eventcounters.reset()

     def log_connectionOpened(self, conn):
         self.connections[conn] = EventCounters(self.eventNames)

     def log_connectionClosed(self, conn):
         del self.connections[conn]

     def log_event(self, conn, name):
         """First parameter should be a Protocol, second an event"""
         assert name in self.eventNames
         self.eventcounters.increment(name)
         if self.connections.has_key(conn):
             self.connections[conn].increment(name)

     synchronized = ["log_connectionOpened", "log_connectionClosed", 
"log_event", "reset"]


class EventCounters:
     """Stores a number of event counters, and how many a second.

     Algorithm for determining how many events a second:

     Divide each second into 10 (N) equal parts. Make an 11 (N+1) items long
     list L containing how many events in each part of the second, plus the
     last part of the previous second.

         L = [0] * 11

     When a new event is added, increment last item in list:

         L[-1] += 1

     Every 0.1 (1.0/N) seconds, remove first item in L and append 0:

         del L[0]; L.append(0)

     To calculate how many events in the past second, sum up last 10 (N)
     parts of L and 0.5 of the first item in L. This gives us how many hits
     in the past 0.95 to 1.05 seconds (1-1.0/2N to 1+1.0/2N seconds),
     depending on when we run this function:

         (0.5 * L[0]) + reduce(operator.add, L[1:])

     """

     def __init__(self, eventNames, ):
         self.eventNames = eventNames
         self.counters = {}
         self.secondCounters = {}
         for name in eventNames:
             self.counters[name] = 0
             self.secondCounters[name] = [0] * 10

     def increment(self, name):
         self.counters[name] += 1
         self.secondCounters[name][-1] += 1

     def reset(self):
         """Should be called every 0.1 seconds."""
         for name in self.eventNames:
             del self.secondCounters[name][0]
             self.secondCounters[name].append(0)

     def getInfo(self):
         """Return a dictionary.

         The key is an event name and the value a tuple:
         (counters, counters per second)."""
         result = {}
         for name in self.eventNames:
             l = self.secondCounters[name]
             perSecond = (0.5 * l[0]) + reduce(operator.add, l[1:])
             result[name] = (self.counters[name], perSecond)
         return result

     synchronized = ["increment", "reset", "getInfo"]


threadable.synchronize(ProtocolMonitor)
threadable.synchronize(EventCounters)




From twisted at itamarst.org  Sun Jan 13 06:20:55 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 13 Jan 2002 15:20:55 +0200
Subject: [Twisted-Python] Changelog
Message-ID: <3C4189B7.40000@itamarst.org>

we now have a changelog, a log of changes. use the changelog. the changelog 
is to be used. enter new stuff in the changelog.




From glyph at twistedmatrix.com  Sun Jan 13 13:09:57 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 13 Jan 2002 14:09:57 -0600
Subject: [Twisted-Python] Changelog
In-Reply-To: <3C4189B7.40000@itamarst.org>
References: <3C4189B7.40000@itamarst.org>
Message-ID: <1010952598.417.1.camel@zelda>

Well, this was a surprise to me :-)

I just fixed it to actually be in Change Log format.

Since we've been back and forth on this issue previously -- changelog
vs. commits list vs. "Just use `cvs log`" -- I'm going to offer a
suggestion for the use of this file so it doesn't become the sprawling
monstrosity that some previous ChangeLogs I've worked on have been.

If you're adding a feature, detail it carefully in the ChangeLog and
describe it in detail, once.  Bugfixes, unless they're sufficiently
major to constitute functionality by themselves, shouldn't be described.

The ChangeLog should be a high-level, non-technical overview of what is
changing, to help users and developers figure out when they need to
upgrade.

This does *not* mean that anybody should stop writing detailed commit
messages to the mailing list.  Those should be lower granularity to
explain to other developers what each commit is for.

On Sun, 2002-01-13 at 07:20, Itamar Shtull-Trauring wrote:
> we now have a changelog, a log of changes. use the changelog. the changelog 
> is to be used. enter new stuff in the changelog.

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From acapnotic at twistedmatrix.com  Sun Jan 13 13:40:03 2002
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 13 Jan 2002 12:40:03 -0800
Subject: [Twisted-Python] Changelog
In-Reply-To: <1010952598.417.1.camel@zelda>
References: <3C4189B7.40000@itamarst.org>  <1010952598.417.1.camel@zelda>
Message-ID: <1010954405.1190.0.camel@troglodyte>

On Sun, 2002-01-13 at 12:09, Glyph Lefkowitz wrote:
> The ChangeLog should be a high-level, non-technical overview of what is
> changing, to help users and developers figure out when they need to
> upgrade.

That sounds more like a NEWS file.  And we do keep a "What's new in
%(version)?" section in the README, but we delete it with every release,
which isn't so useful if you skipped a version or two between upgrades. 
What brought about the ChangeLog was Itamar wondering "What changed in
the last three days while the commits list was borked?" which isn't a
high-level new-features-only sort of question.  That question could be
answered by asking CVS, but people have their preferences.



From sean at ninjaneering.com  Sun Jan 13 16:29:25 2002
From: sean at ninjaneering.com (Sean Riley)
Date: Sun, 13 Jan 2002 17:29:25 -0600
Subject: [Twisted-Python] web widgets
Message-ID: <HOEEKPCOKELHCNIJNMAGKEFCCEAA.sean@ninjaneering.com>

some observations of web widgets..

the "page" variable of the Gadget class was confusing to me.. I initially
assumed that it was an instance of a Page object - rather than a class
object. Maybe renaming it to something like "pageClass" would be more
explicit?

"Gadget" is also pretty ambiguous before it is placed in context. I would
maybe prefer GadgetResource to make the context of it explicit - but i know
how glyph dislikes compound class names. This would impress the standard
twisted.web terminology on the naming within web.widgets...  GadgetResource
would be symetrical to "WidgetResource" which does exist - although i am not
sure if it is used?

"Page" is derived from Resource also which suggests to me it could be called
"PageResource".

User classes inheriting from both Gadget and Widget seems to be a very
common pattern - such as all the classes in both twisted.forum.gadgets and
twisted.metrics.gadgets. This would suggest another class in the framework
that fills this niche. This could also refactor all the "if isinstance(self,
widget)" code which is polluting Gadget into this new class. This would
become a convenient place for users to simply derive classes from.. I don't
know what to call it - GadgetWidget or WidgetGadget are just too
meaningless. It is really a renderable collection of widgets.. any ideas?
WidgetResource? WidgetGadgetResource? GadgetWidgetResource? Wadget? Gidget?
Watchamacallit?


attached is a class diagram for web widgets done in dia :)


----
"If it's not running programs or fusing atoms, it's just bending space.",
Ken Macleod
"That's it, I'm outta here.", Homer Simpson's Brain
Sean Riley
sean at ninjaneering.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: widgets.dia
Type: application/octet-stream
Size: 1886 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20020113/b9dae726/attachment-0002.obj>

From carmstro at twistedmatrix.com  Sun Jan 13 19:53:45 2002
From: carmstro at twistedmatrix.com (Christopher Armstrong)
Date: 13 Jan 2002 21:53:45 -0500
Subject: [Twisted-Python] web widgets
In-Reply-To: <HOEEKPCOKELHCNIJNMAGKEFCCEAA.sean@ninjaneering.com>
References: <HOEEKPCOKELHCNIJNMAGKEFCCEAA.sean@ninjaneering.com>
Message-ID: <1010976826.2676.1.camel@radii>

On Sun, 2002-01-13 at 18:29, Sean Riley wrote:
> some observations of web widgets..
> 
> the "page" variable of the Gadget class was confusing to me.. I initially
> assumed that it was an instance of a Page object - rather than a class
> object. Maybe renaming it to something like "pageClass" would be more
> explicit?

Good point. I'll change it, (making sure to keep backwards
compatibility) if no one objects.

[snip..]

> User classes inheriting from both Gadget and Widget seems to be a very
> common pattern - such as all the classes in both twisted.forum.gadgets and
> twisted.metrics.gadgets. This would suggest another class in the framework
> that fills this niche. This could also refactor all the "if isinstance(self,
> widget)" code which is polluting Gadget into this new class. This would
> become a convenient place for users to simply derive classes from.. I don't
> know what to call it - GadgetWidget or WidgetGadget are just too
> meaningless. It is really a renderable collection of widgets.. any ideas?
> WidgetResource? WidgetGadgetResource? GadgetWidgetResource? Wadget? Gidget?
> Watchamacallit?

I've been thinking out loud about just having Gadget subclass Widget. I
think it would probably make things clearer for newbies, and I doubt it
would create any sort of performance problem, so I don't think there's
really a need to create a separate GadgetWidget class. 

If no one objects, I'll make that change in CVS. It won't affect any old
code, I don't think; there'll just be an ambiguous superclass in code
that subclasses both Gadget and Widget.

> attached is a class diagram for web widgets done in dia :)

Diagrams are cool. Thanks. :)

Anyway, please, keep the suggestions/groanings coming. WebWidgets has a
ways to go before it really becomes easy to use, and I think we really
need to put an effort into it (although we should only expect it to be
easy to use for people who are familiar with class programming in Python
:)).

-- 
                                Chris Armstrong
                         << radix at twistedmatrix.com >>
                http://twistedmatrix.com/users/carmstro.twistd/




From j.her at t-online.de  Mon Jan 14 11:34:55 2002
From: j.her at t-online.de (Juergen Hermann)
Date: Mon, 14 Jan 2002 19:34:55 +0100
Subject: [Twisted-Python] Changelog
In-Reply-To: <1010954405.1190.0.camel@troglodyte>
Message-ID: <16QBvq-1iV9PcC@fwd10.sul.t-online.com>

On 13 Jan 2002 12:40:03 -0800, Kevin Turner wrote:

>What brought about the ChangeLog was Itamar wondering "What changed in
>the last three days while the commits list was borked?" which isn't a
>high-level new-features-only sort of question.  That question could be
>answered by asking CVS, but people have their preferences.

cvs2cl very nicely answers this fine-grained question, for the whole
project, w/o having to read an endless "cvs log".

Ciao, Jürgen





From corydodt at yahoo.com  Mon Jan 14 22:13:19 2002
From: corydodt at yahoo.com (Cory Dodt)
Date: Mon, 14 Jan 2002 21:13:19 -0800 (PST)
Subject: [Twisted-Python] Experiences with twisted.spread: representing an ACL
Message-ID: <20020115051319.37386.qmail@web10002.mail.yahoo.com>

I am working on a networked backup server which is so new it doesn't even
have a project page up on SF yet, although it might by the end of the
week.  To build this I am using spread and passport instead of building my
own protocol.    I'm having trouble with some of the concepts in spread,
and at this point I'm still too naive to know whether I'm missing the
point of something or whether passport is actually missing something I
need.

I want to implement access control lists.  For each Identity, I want to
assign a simple list of strings which more or less represent the ability
to access a Perspective.  For example:

useracl=[ "store_files",
        "read_files",
        "encrypt",
        "create_lbu" ]

There is a StoreFilesService, a ReadFilesService, and a CreateLBUService,
and a Perspective for each.  The "encrypt" permission is a modifier to
Store and Read files, so I'm not sure how to implement that yet but I'll
cross that bridge when I come to it.

I have subclassed the Authorizer thus:

class Authorizer(passport.Authorizer):
    def addIdentity(self, identity):
        if self.identities.has_key(identity.name):
            raise passport.KeyError("Already have an identity by that
name.")
        self.identities[identity.name] = identity
        if identity.permissions == None:
            raise MissingPermissionsException(identity)
        # create all perspectives the user should have
        for permission in identity.acl:
            svc=servicelist.services[permission](permission, tap.the_app)
            svc.createPerspective(identity.name).setIdentity(identity)
           
identity.addKeyForPerspective(svc.getPerspectiveNamed(identity.name))

Does passport already has something like the ACL mechanism which allows
you to easily bind an ACL to a user?  Is my solution the most parsimonious
or do I really have to subclass the Authorizer to achieve this?  It seems
like I should be able to throw in a callback somewhere that creates the
eligible service/perspective pairs when a user is added to the system.

Second, if I modify a user's ACL, for example to grant a permission,
where's the callback to create a new s/p pair for that permission?  I have
a suspicion that this is already taken care of somewhere in passport and
I'm just missing the point.

That's all for now, thanks.  

C

__________________________________________________
Do You Yahoo!?
Send FREE video emails in Yahoo! Mail!
http://promo.yahoo.com/videomail/



From corydodt at yahoo.com  Mon Jan 14 22:15:35 2002
From: corydodt at yahoo.com (Cory Dodt)
Date: Mon, 14 Jan 2002 21:15:35 -0800 (PST)
Subject: [Twisted-Python] representing groups
Message-ID: <20020115051536.96483.qmail@web10007.mail.yahoo.com>

Since this is not really related to ACL's, I've decided to make this a
separate thread on its own.  I want to know how to represent groups in
passport.  A group would simply be a group of Identities, but who owns
them?  Who's responsible for making sure all Identities are in at least
one group?  How do you check if a particular object is owned by a group?

Or are these questions not solved yet?

Thanks! 

C

__________________________________________________
Do You Yahoo!?
Send FREE video emails in Yahoo! Mail!
http://promo.yahoo.com/videomail/



From glyph at twistedmatrix.com  Mon Jan 14 22:53:05 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 14 Jan 2002 23:53:05 -0600
Subject: [Twisted-Python] Experiences with twisted.spread: representing
	an ACL
In-Reply-To: <20020115051319.37386.qmail@web10002.mail.yahoo.com>
References: <20020115051319.37386.qmail@web10002.mail.yahoo.com>
Message-ID: <1011073985.941.4.camel@zelda>

First of all, let me apologize for not having documented this stuff more
thoroughly.  I'm glad you're making an effort to use this
infrastructure, and please have the patience to help me complete it -- I
need use-cases like yours to make the system more general.

Passport is in the process of a major overhaul, to make it possible to
store perspectives in a database.  This is changing some of the basic
APIs, so some of the answers to this (and your other thread) will be a
bit vague.

On Mon, 2002-01-14 at 23:13, Cory Dodt wrote:
> I am working on a networked backup server which is so new it doesn't even
> have a project page up on SF yet, although it might by the end of the
> week.  To build this I am using spread and passport instead of building my
> own protocol.    I'm having trouble with some of the concepts in spread,
> and at this point I'm still too naive to know whether I'm missing the
> point of something or whether passport is actually missing something I
> need.

Passport has what you need, but it's different than you think, I think.

> I want to implement access control lists.  For each Identity, I want to
> assign a simple list of strings which more or less represent the ability
> to access a Perspective.  For example:
> 
> useracl=[ "store_files",
>         "read_files",
>         "encrypt",
>         "create_lbu" ]
> 
> There is a StoreFilesService, a ReadFilesService, and a CreateLBUService,
> and a Perspective for each.  The "encrypt" permission is a modifier to
> Store and Read files, so I'm not sure how to implement that yet but I'll
> cross that bridge when I come to it.

If you have an ACL, implement it as an ACL.

A perspective is a conglomeration of state for a particular service.  If
storing files, reading files, and creating LBUs all access the same
repository of data, and all exist within an encapsulation boundary of
some kind, they should probably all be one service that glues them
together.

> I have subclassed the Authorizer thus:
> 
> class Authorizer(passport.Authorizer):
>     def addIdentity(self, identity):
>         if self.identities.has_key(identity.name):
>             raise passport.KeyError("Already have an identity by that
> name.")
>         self.identities[identity.name] = identity
>         if identity.permissions == None:
>             raise MissingPermissionsException(identity)
>         # create all perspectives the user should have
>         for permission in identity.acl:
>             svc=servicelist.services[permission](permission, tap.the_app)
>             svc.createPerspective(identity.name).setIdentity(identity)
>            
> identity.addKeyForPerspective(svc.getPerspectiveNamed(identity.name))
> 
> Does passport already has something like the ACL mechanism which allows
> you to easily bind an ACL to a user?  Is my solution the most parsimonious
> or do I really have to subclass the Authorizer to achieve this?  It seems
> like I should be able to throw in a callback somewhere that creates the
> eligible service/perspective pairs when a user is added to the system.

It looks here like you want to add state (and potentially behavior) to
Identity, which is not its purpose.  The goal of the Identity/Passport
distinction is to provide a very sharp boundary between different sorts
of functionality (for example, a chat system and your backup software)
but allow your users to have access to each.

The reason you would add stuff to Identity is to add a new kind of
authentication mechanism, for example, or to store them in an LDAP data
repository.

A perspective is a capability, not an ACL.  An identity should be
nothing more than an index of all perspectives available to a particular
authentication token.  Any information about or behavior for that
identity is "application specific" can be reflected in a Perspective
attached to it.

Rather than trying to cram each operation into a Perspective of its own,
you could just implement your ACLs internal to the Perspective, and test
them with perspective.hasAbilityTo("some acl")... an implementation of a
generalized, database-backed ACL system would be pretty handy, if you
felt like contributing such a thing to Twisted :).

> Second, if I modify a user's ACL, for example to grant a permission,
> where's the callback to create a new s/p pair for that permission?  I have
> a suspicion that this is already taken care of somewhere in passport and
> I'm just missing the point.

Service.createPerspective is the current way to do that.

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From glyph at twistedmatrix.com  Mon Jan 14 22:55:00 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 14 Jan 2002 23:55:00 -0600
Subject: [Twisted-Python] representing groups
In-Reply-To: <20020115051536.96483.qmail@web10007.mail.yahoo.com>
References: <20020115051536.96483.qmail@web10007.mail.yahoo.com>
Message-ID: <1011074101.941.6.camel@zelda>

On Mon, 2002-01-14 at 23:15, Cory Dodt wrote:
> Since this is not really related to ACL's, I've decided to make this a
> separate thread on its own.  I want to know how to represent groups in
> passport.  A group would simply be a group of Identities, but who owns
> them?  Who's responsible for making sure all Identities are in at least
> one group?  How do you check if a particular object is owned by a group?
> 
> Or are these questions not solved yet?

I'd love to come up with an abstract representation of a "group" that
made sense across applications, but there are lots of questions about
groups that are quite application-specific.  (For a simple example --
sometimes a group can contain other groups, sometimes it can contain
only users.)  As I said in my last email, I'd recommend putting a Group
object of some sort into your Service, and organizing your Perspectives
with it.  The Identities can then be tracked for which group they're in
in your application because each perspective stores an identity name.

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From twisted at itamarst.org  Wed Jan 16 07:53:08 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 16 Jan 2002 16:53:08 +0200
Subject: [Twisted-Python] Bug reports
Message-ID: <3C4593D4.7040303@itamarst.org>

Until we have a bug tracker, some bug reports, so we don't forget:

1. protocol.Factory's startFactory method is called twice on start up.

2. Various SQL code doesn't use SQL quoting (that means you, Sean :)

3. The new Perspective code has a bug, where if you ask an identity for a 
non-existent service/perspective pair, it raises a KeyError which is not 
caught anywhere. You can test this by switching pbechoclient.py to connect 
to service "foo" instead of "pbecho". This is some wierd Deferred thing, and 
I have no idea where to deal with it.




From sean at twistedmatrix.com  Wed Jan 16 16:24:05 2002
From: sean at twistedmatrix.com (Sean Riley)
Date: Wed, 16 Jan 2002 17:24:05 -0600
Subject: [Twisted-Python] Bug reports
In-Reply-To: <3C4593D4.7040303@itamarst.org>
Message-ID: <HOEEKPCOKELHCNIJNMAGOEFMCEAA.sean@twistedmatrix.com>

>> 2. Various SQL code doesn't use SQL quoting (that means you, Sean :)

fixed. i added a utility method twisted.enterprise.adbapi.safe() which
double quotes single quotes (') and added it to all strings in SQL
statements in enterprise, forum and metrics.




From liiwi at iki.fi  Sun Jan 20 12:07:26 2002
From: liiwi at iki.fi (Jaakko Niemi)
Date: Sun, 20 Jan 2002 21:07:26 +0200
Subject: [Twisted-Python] patchlet
Message-ID: <87lmes96z5.fsf@jumper.lonesom.pp.fi>

To get the Debian package build include protocols.ldap. Hmm,
perhaps setup.py should just look what's in there.

--- setup.py~   Fri Sep 14 04:22:48 2001
+++ setup.py    Sun Jan 20 20:44:56 2002
@@ -59,6 +59,7 @@
         "twisted.manhole.ui",
         "twisted.persisted",
         "twisted.protocols",
+        "twisted.protocols.ldap",
         "twisted.python",
         "twisted.reality",
         "twisted.reality.ui",



From mbac at netgraft.com  Mon Jan 21 11:35:08 2002
From: mbac at netgraft.com (Michael Bacarella)
Date: Mon, 21 Jan 2002 12:35:08 -0600
Subject: [Twisted-Python] FTP Client protocol for Twisted..
Message-ID: <20020121123508.A15847@romulus.netgraft.com>

Hi, I just joined the list.

For your public enjoyment I present an FTPClient protocol
implementation for Twisted. The class definition:

	http://m.bacarella.com/playground/ftpclient.py

Example code:

	http://m.bacarella.com/playground/exftpclient.py

ftpclient.py should go into twisted/protocols to use
the example. You may decide that it's better to suck it
into a different file. The example simply logs into
ftp.uu.net (anonymous), retrieves and prints a directory
listing, and then exits.

I developed it because I wanted to use Twisted for an
IRC bot which needed to be able to index FTP sites, so I
basically stopped once it met my needs. Sorry if it's
missing some features..

Comments or suggestions are welcome.

-- 
Michael Bacarella              | 545 Eighth Ave #401
                               | New York, NY 10018
Systems Analysis & Support     | mike at bacarella.com
Managed Services               | 212 946-1038




From twisted at itamarst.org  Mon Jan 21 14:27:19 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 21 Jan 2002 23:27:19 +0200
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/spread banana.py,1.13,1.14 jelly.py,1.12,1.13 pb.py,1.51,1.52
References: <E16Slwx-0003MY-00@zaibach.twistedmatrix.com>
Message-ID: <3C4C87B7.3020901@itamarst.org>

Sean just added unicode to banana and jelly.

1. Will this run on 1.5.2?

2. You had better encode the data before writing it - as far as I can 
see from the patch you do not. I suggest UTF-8.

3. As glyph pointed out, do we even need unicode support in Banana? 
Keeping it in jelly (u'foo' --> ['unicode', u'foo'.encode("UTF8")] would 
be the transform) would work just as well, without requiring people who 
implement banana to deal with it.




From corydodt at yahoo.com  Tue Jan 22 00:44:51 2002
From: corydodt at yahoo.com (Cory Dodt)
Date: Mon, 21 Jan 2002 23:44:51 -0800 (PST)
Subject: [Twisted-Python] man page -g, deb stuff
In-Reply-To: <E16RBeG-0000Hn-00@zaibach.twistedmatrix.com>
Message-ID: <20020122074451.81769.qmail@web10008.mail.yahoo.com>

The man page for twistd in the .deb package does not contain the new -g
option or any info about plugins.

Also of note:

+ the .deb does not contain twistd-debug
+ the .deb does not contain any of the .tac's in examples/


Just keeping you honest:-)

C

__________________________________________________
Do You Yahoo!?
Send FREE video emails in Yahoo! Mail!
http://promo.yahoo.com/videomail/



From twisted at itamarst.org  Tue Jan 22 06:21:17 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 22 Jan 2002 15:21:17 +0200
Subject: [Twisted-Python] man page -g, deb stuff
References: <20020122074451.81769.qmail@web10008.mail.yahoo.com>
Message-ID: <3C4D674D.8030701@itamarst.org>

Cory Dodt wrote:


> + the .deb does not contain any of the .tac's in examples/

All of these .tac files are for systems that are currently experimental. 
They probably should be included however.




From twisted at itamarst.org  Tue Jan 22 06:24:20 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 22 Jan 2002 15:24:20 +0200
Subject: [Twisted-Python] patchlet
References: <87lmes96z5.fsf@jumper.lonesom.pp.fi>
Message-ID: <3C4D6804.1030801@itamarst.org>

Jaakko Niemi wrote:

> To get the Debian package build include protocols.ldap.


Done, thanks for the bug report.





From twisted at itamarst.org  Wed Jan 23 09:55:21 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 23 Jan 2002 18:55:21 +0200
Subject: [Twisted-Python] Sample app for docs
Message-ID: <3C4EEAF9.7090800@itamarst.org>

How about a finger daemon?

We can have a web frontend, and use PB to set .plans, and store the .plans 
in PostgreSQL.




From jason at crash.org  Wed Jan 23 11:03:25 2002
From: jason at crash.org (Jason Asbahr)
Date: Wed, 23 Jan 2002 12:03:25 -0600
Subject: [Twisted-Python] Sample app for docs
In-Reply-To: <3C4EEAF9.7090800@itamarst.org>
Message-ID: <7EF21908-102B-11D6-8D48-000393753460@crash.org>

That's a good idea -- we could also demonstrate how first to save to 
files (which many initial users of Twisted will do) and then demonstrate 
how to migrate to a database...

J


On Wednesday, January 23, 2002, at 10:55 AM, Itamar Shtull-Trauring 
wrote:

> How about a finger daemon?
>
> We can have a web frontend, and use PB to set .plans, and store the 
> .plans in PostgreSQL.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From twisted at itamarst.org  Wed Jan 23 13:45:07 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 23 Jan 2002 22:45:07 +0200
Subject: [Twisted-Python] Sample app for docs
References: <7EF21908-102B-11D6-8D48-000393753460@crash.org>
Message-ID: <3C4F20D3.3080906@itamarst.org>

And of course there's the marketing aspect, too:
"Twisted, the world's most sophisticated finger daemon"




From andrew-twisted at puzzling.org  Wed Jan 23 17:23:34 2002
From: andrew-twisted at puzzling.org (andrew-twisted at puzzling.org)
Date: Thu, 24 Jan 2002 11:23:34 +1100
Subject: [Twisted-Python] Sample app for docs
In-Reply-To: <7EF21908-102B-11D6-8D48-000393753460@crash.org>
References: <3C4EEAF9.7090800@itamarst.org> <7EF21908-102B-11D6-8D48-000393753460@crash.org>
Message-ID: <20020124002334.GA30430@ritsuko.xware.cx>

On Wed, Jan 23, 2002 at 12:03:25PM -0600, Jason Asbahr wrote:
> 
> That's a good idea -- we could also demonstrate how first to save to 
> files (which many initial users of Twisted will do) and then demonstrate 
> how to migrate to a database...

Perhaps you could also demonstrate using the metrics module to report stats?

-Andrew.




From corydodt at yahoo.com  Fri Jan 25 01:31:27 2002
From: corydodt at yahoo.com (Cory Dodt)
Date: Fri, 25 Jan 2002 00:31:27 -0800 (PST)
Subject: [Twisted-Python] Throwing exceptions to the client
Message-ID: <20020125083127.66090.qmail@web10005.mail.yahoo.com>

Still working on my ACL problem.  

Use case: client connects, calls a perspective_method which is not in its
ACL.  In my test client, I call 
    perspective.createUsers(['cdodt'])

1) 

At the server, perpsective method calls 
    self.assertPermission("create_users")
This assertion fails, so assertPermission throws PermissionDenied.

When this happens, client gets a string with the traceback.  This looked
cool at first, until I tried to handle the error with my failure callback.
 In order to differentiate between PermissionDenied and, for example,
UserAlreadyExists errors, I would have to parse what I get back from the
server.  Parsing strings to find out what happened puts us back at the
protocol layer, and is something my code shouldn't have to do.

MUCH nicer would be if the server tossed the real exception to the client,
not a string.  Referenceable, perhaps.  Is it possible to make this happen
when an exception gets raised?

2)

Another workable solution would be for the perspective_method to return an
exception instead of throwing it.

radix clued me in on Referenceables, so I'm working on making my exception
Referencable.  That's when I noticed that the example code is missing
Referenceables.  Ref'ables and Copyables seem to be fairly intrinsic to
pb, so they should probably show up in the examples somewhere.

Thanks,

C



__________________________________________________
Do You Yahoo!?
Great stuff seeking new owners in Yahoo! Auctions! 
http://auctions.yahoo.com



From twisted at itamarst.org  Fri Jan 25 04:27:22 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 25 Jan 2002 13:27:22 +0200
Subject: [Twisted-Python] Throwing exceptions to the client
References: <20020125083127.66090.qmail@web10005.mail.yahoo.com>
Message-ID: <3C51411A.8050400@itamarst.org>

Cory Dodt wrote:

 > MUCH nicer would be if the server tossed the real exception to the
 > client, not a string.  Referenceable, perhaps.  Is it possible to
 > make this happen when an exception gets raised?

We were discussing having Failures being sent to the client for errors, 
instead of strings, probably as Copyables - but first I gotta do 
Copyables for Java PB. Patches accepted :)

Until then - perhaps you should have a special return code indicating 
the method failed? E.g. have response code such as SUCCESS = 1, FAILURE 
= 2, NOACCESS = 0 or something, instead of depending on exceptions.






From twisted at itamarst.org  Sat Jan 26 08:00:12 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 26 Jan 2002 17:00:12 +0200
Subject: [Twisted-Python] [Fwd: [ZODB-Dev] ANNOUNCE: Python 10 Birds of a Feather session on a Python persistence framework]
Message-ID: <3C52C47C.4090805@itamarst.org>

This sounds interesting for us, since you could use it to have your .tap 
always uptodate, instead of just saving on shutdown. and other 
interesting uses. The correct day is actually Wednesday.


-------- Original Message --------
Subject: [ZODB-Dev] ANNOUNCE: Python 10 Birds of a Feather session on a 
Python persistence framework
Date: Fri, 25 Jan 2002 19:12:39 -0500
From: Jim Fulton <jim at zope.com>
Reply-To: jim at zope.com
Organization: Zope Corporation
To: zodb-dev at zope.org

We plan to have a Birds of a Feather (BOF) session at the Python 10
Conference, http://python10.org, on a Python persistence framework.

The Zope object database, ZODB, includes frameworks
for persistence and transaction management.  These frameworks
depend very little on the rest of ZODB and will be factored
out of ZODB and made into separate packages in the next generation
of ZODB, ZODB 4.

The ZODB persistence framework provides significant benefits to
Python programmers:

- Objects are automatically loaded and stored. The programmer
   doesn't have to keep tack of when objects have been
   modified. The objects track modification and notify the
   transaction manager of changes. The transaction manager
   coordinates storing data.  Data are loaded when needed, with
   loads triggered by access from other objects.

- An object cache automates moving data out of memory when no
   longer needed. A cache invalidation protocol helps to keep object
   consistence across multiple applications or application
   threads.

We would like to see these benefits made available for other
databases. We'd especially like to see a persistence framework
using relational databases, reusing object-relational mapping
efforts, such as MiddleKit and others.

We'd like to kick off an effort to design a persistence framework
to encompass ZODB, relational databases, and other persistence
systems.

The BOF will begin with a presentation of the ZODB Persistence
framework.

The time and location are TBD. Check the BOF schedule when you get to
the conference.

Jim

--
Jim Fulton           mailto:jim at zope.com       Python Powered!
CTO                  (888) 344-4332            http://www.python.org
Zope Corporation     http://www.zope.com       http://www.zope.org

_______________________________________________
For more information about ZODB, see the ZODB Wiki:
http://www.zope.org/Wikis/ZODB/

ZODB-Dev mailing list  -  ZODB-Dev at zope.org
http://lists.zope.org/mailman/listinfo/zodb-dev




From twisted at itamarst.org  Mon Jan 28 07:40:49 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 28 Jan 2002 16:40:49 +0200
Subject: [Twisted-Python] Pure Python SNMP framework for Python
Message-ID: <3C5562F1.702@itamarst.org>

I looked at the asyncore code - porting to twisted would probably take 10 
minutes.

<http://pysnmp.sourceforge.net/>




From jason at crash.org  Mon Jan 28 19:47:13 2002
From: jason at crash.org (Jason Asbahr)
Date: Mon, 28 Jan 2002 20:47:13 -0600
Subject: [Twisted-Python] Behold: Shirts
Message-ID: <7F71ABFE-1462-11D6-9D26-000393753460@crash.org>

Glyph has set up a CafePress storefront -- now you too can be proudly 
emblazoned with the Twisted Logo!

http://www.cafepress.com/twistedlabs


Jason

(I went ahead and paid the outrageous 2nd day air shipping to make sure 
my shirt arrives before IPC 10...)




From slt5v at cc.usu.edu  Tue Jan 29 02:50:22 2002
From: slt5v at cc.usu.edu (Travis B. Hartwell)
Date: Tue, 29 Jan 2002 02:50:22 -0700
Subject: [Twisted-Python] CVS manhole Traceback
Message-ID: <20020129095022.GB1258@cc.usu.edu>

Hey all,
  I was wanting to use manhole to connect to a new pb service I am
  creating (a contact manager), but I am getting a traceback when I try
  to run manhole.  Also, it dumps core if I don't have my $DISPLAY
  variable set. :)  Anyway, here is the traceback (latest CVS, etc.)

  Traceback (most recent call last):
    File "./manhole", line 57, in ?
        from twisted.manhole.ui import gtkmanhole
    File "/home/slt5v/data/projects/Twisted/twisted/manhole/ui/gtkmanhole.py", line 39, in ?
	import spelunk_gnome
    File "/home/slt5v/data/projects/Twisted/twisted/manhole/ui/spelunk_gnome.py", line 679, in ?
        Explorer, 'twisted.python.explorer')
    File "twisted/spread/flavors.py", line 68, in setCopierForClassTree
  NameError: global name 'types' is not defined

  Any ideas?

Naf
		      



From glyph at twistedmatrix.com  Tue Jan 29 02:56:47 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 29 Jan 2002 03:56:47 -0600
Subject: [Twisted-Python] CVS manhole Traceback
In-Reply-To: <20020129095022.GB1258@cc.usu.edu>
References: <20020129095022.GB1258@cc.usu.edu>
Message-ID: <1012298207.8390.24.camel@zelda>

Thanks for reporting.  My bug: it's fixed now.

On Tue, 2002-01-29 at 03:50, Travis B. Hartwell wrote:
> Hey all,
>   I was wanting to use manhole to connect to a new pb service I am
>   creating (a contact manager), but I am getting a traceback when I try
>   to run manhole.  Also, it dumps core if I don't have my $DISPLAY
>   variable set. :)  Anyway, here is the traceback (latest CVS, etc.)

-- 
"Cannot stand to be one of many -- I'm not what they are."
        -Guster, "Rocketship"
                glyph lefkowitz; ninjaneer, freelance demiurge
    glyph @ [ninjaneering|twistedmatrix].com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 232 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20020129/d7a2ccc0/attachment.sig>

From andrew-twisted at puzzling.org  Tue Jan 29 16:56:40 2002
From: andrew-twisted at puzzling.org (andrew-twisted at puzzling.org)
Date: Wed, 30 Jan 2002 10:56:40 +1100
Subject: [Twisted-Python] Factory.startFactory being called twice.
Message-ID: <20020129235640.GA22614@ritsuko.xware.cx>

Hi all,

I recently upgraded to 0.14.0, but I'm still seeing Factory.startFactory()
being called twice when I start my server.

If I start my server with the following code (adapted from simpleserv.py):

    app = Application('spam')
    app.listenTCP(1234,MyFactory())
    app.run(save=0)
 
Then by using traceback.format_stack() in MyFactory.startFactory I can see
that it gets called twice, here:

    app.run(save=0)
  File "F:\Python22\Lib\site-packages\twisted\internet\app.py", line 350, in run
    port.startListening()
  File "F:\Python22\Lib\site-packages\twisted\internet\tcp.py", line 395, in startListening
    self.factory.startFactory()

and here:

    app.run(save=0)
  File "F:\Python22\Lib\site-packages\twisted\internet\app.py", line 357, in run
    port.factory.startFactory()

I'm currently using 
    if not hasattr(self, 'once'):
        self.once = 1
	# ...

To workaround it, but it'd be nice to not need to do this.

The docs suggest that it will get called twice, "both after an application
has been unserialized and before all the ports begin accepting connections."
Which is fine, except that I'm not unserialising...

It's a minor glitch in an otherwise beautiful system :)

-Andrew.




From twisted at itamarst.org  Wed Jan 30 06:11:11 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 30 Jan 2002 15:11:11 +0200
Subject: [Twisted-Python] ANN: Perspective Broker for Java, v0.4
Message-ID: <3C57F0EF.4040806@itamarst.org>

Hi all,

I've released a new version of PB for Java. The new version is required for 
compatability with Twisted 0.14. The new version also adds support for using 
and sending Copyables from Java, jellying instances (not that you'd want to 
do this), and sending String objects over PB and Jelly.

You can download it from: http://itamarst.org/software/




From andrew-twisted at puzzling.org  Wed Jan 30 08:21:08 2002
From: andrew-twisted at puzzling.org (andrew-twisted at puzzling.org)
Date: Thu, 31 Jan 2002 02:21:08 +1100
Subject: [Twisted-Python] twisted.enterprise docs suck
Message-ID: <20020130152108.GA6098@ritsuko.xware.cx>

Because the twisted.enterprise docs currently suck (i.e. I couldn't figure
it out without help :), I decided to write a small tutorial that should
hopefully explain things a bit better.

I've put a copy up at http://poetry.puzzling.org/twisted_db.html.  I'd
appreciate any feedback anyone has, in particular:
  * Have I stuffed up anything major?
  * Is my terminology ok (e.g. "...dispatch queries to your ConnectionPool...")
  * Am I demonstrating "best practice" use of twisted.enterprise, or should
    I be structuring my code differently?

If someone wants to place this (or an edited version of it) on
twistedmatrix.com, or distribute it with Twisted, or both, they are welcome.

Regards,

-Andrew.




From twisted at itamarst.org  Wed Jan 30 09:07:59 2002
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 30 Jan 2002 18:07:59 +0200
Subject: [Twisted-Python] Factory.startFactory being called twice.
References: <20020129235640.GA22614@ritsuko.xware.cx>
Message-ID: <3C581A5F.8000906@itamarst.org>

andrew-twisted at puzzling.org wrote:

> I recently upgraded to 0.14.0, but I'm still seeing Factory.startFactory()
> being called twice when I start my server.

OK, I fixed it in CVS. I tested, and now it only runs once, both when 
loading from a .tap and when being run directly.

Here's the patch:


Index: twisted/internet/tcp.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/tcp.py,v
retrieving revision 1.42
diff -c -r1.42 tcp.py
*** twisted/internet/tcp.py	29 Jan 2002 17:25:25 -0000	1.42
--- twisted/internet/tcp.py	30 Jan 2002 16:13:11 -0000
***************
*** 392,398 ****
           self.fileno = self.socket.fileno
           self.numberAccepts = 100
           self.startReading()
-         self.factory.startFactory()

       def approveConnection(self, sock, addr):
           """Check that this is a connection we are willing to accept.
--- 392,397 ----





From jason at crash.org  Thu Jan 31 11:46:54 2002
From: jason at crash.org (Jason Asbahr)
Date: Thu, 31 Jan 2002 12:46:54 -0600
Subject: [Twisted-Python] Fwd: [wearables] commercial survey - IEEE Pervasive Computing
Message-ID: <E59F4B2E-167A-11D6-9390-000393753460@crash.org>

Excuse the forward, but this touches on some of the personal information 
space considerations of Twisted.  For additional illustration, may I 
suggest adding a Bruce Sterling book of short stories to your reading 
list, "A Good Old-Fashioned Future".  In particular, the story "Maneki 
Neko" illustrates a future application of portable machines and 
Memex/Twisted/ReputationNetwork systems for distributed gift-culture 
collectives.  Like ours.  :-)

Jason



Begin forwarded message:

> From: "David P. Reed" <dpreed at reed.com>
> Date: Thu Jan 31, 2002  12:20:41 PM US/Central
> To: rhodes at alum.mit.edu, "Thad E. Starner" <thad at cc.gatech.edu>
> Cc: wearables at cc.gatech.edu
> Subject: Re: [wearables] commercial survey - IEEE Pervasive Computing
>
> Though I'm still quite excited about the potential of self-contained 
> general purpose wearables, I have to say that the capabilities of my 
> Kyocera QCP6035 Smartphone, the Samsung palmphone and the upcoming Treo 
> are impressively general, and because they can be augmented by 
> intelligence on the Internet quite easily (having escaped the walled 
> garden of WAP), they can be quite general purpose.  Already they can do 
> something quite cool - you can attach a small GPS receiver (Pharos) to 
> them and get live location info that drives the navigation through 
> geographic data on the Internet.  There are no car-mount or portable 
> GPS navigation systems that can access up-to-date maps and directions - 
> they run off of internal data only.
>
> Thus the commercial world surrounding the Palm OS-based phones is 
> actually poised ready to go beyond PIMs into new apps.  The big limit 
> is the bitrate on CDMA and GSM nets that is available (very low, so it 
> pays to have local cache).
>
> The real problem inhibiting the market is the odd idea that what you 
> want to do with a mobile device is the class of things you do sitting 
> at a desk in your study or office.  I don't want to browse the Web in 
> general - or compose documents or read long Microsoft word attachments.
>
> But the Palm phones are plenty powerful enough to do cool things in 
> conjunction with general purpose intelligence elsewhere.
>
>
> At 09:56 AM 1/31/2002 -0800, Bradley Rhodes wrote:
>
>> >Computer enthusiasts have been known to rewrite a MP3 player's
>> >interface software to allow the uploading and downloading of any
>> >type of data, effectively making the device into the equivalent
>> >of a large floppy disk.  More recently, these devices are
>> >merging with PDAs and cellular phones to create a wide variety
>> >of available products.  IDC expects sales of portable devices
>> >with digital audio playback capability to grow to 15 million
>> >units by 2005.  In a sense, these devic
>>
>> It's not just computer enthusiasts anymore. The iPod is both an
>> MP3 player or, at the flip of a switch, a firewire 5G hard
>> drive. A friend of mine uses it both to play music and to store
>> all her personal email, so she can read email at work without
>> tainting company disk with it.
>>
>> You touched on the question of general-purpose, but I'd love to
>> see it addressed further. The average PC owner has a web browser,
>> email reader, full office suite and game machine all in one
>> box. Because of inherent interface constraints, the Palm Pilot is
>> only widely used for PIM applications: short memos, calendar,
>> phone and to-do lists. Wearables have even more interface
>> constraints than pen-based systems, which implies to me they'll
>> be even more task specific, at least until we get a bluetooth
>> equivalent that lets you have task-specific interfaces all
>> sharing one processor/memory/battery attached to the belt
>> somewhere.
>>
>> Comments?
>>
>> Brad
>>
>> --
>> Bradley Rhodes
>> Intelligence Augmentation | Software Agents | Wearable Computing
>> http://www.bradleyrhodes.com/
>
> - David
> --------------------------------------------
> WWW Page: http://www.reed.com/dpr.html
>
>
>




From glyph at twistedmatrix.com  Thu Jan 31 16:23:20 2002
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 31 Jan 2002 17:23:20 -0600
Subject: [Twisted-Python] twisted.enterprise docs suck
In-Reply-To: <20020130152108.GA6098@ritsuko.xware.cx>
References: <20020130152108.GA6098@ritsuko.xware.cx>
Message-ID: <1012519400.15360.40.camel@zelda>


On Wed, 2002-01-30 at 09:21, andrew-twisted at puzzling.org wrote:
> Because the twisted.enterprise docs currently suck (i.e. I couldn't figure
> it out without help :), I decided to write a small tutorial that should
> hopefully explain things a bit better.

Thank you VERY much!  Anybody else out there want to write some
tutorials?

> I've put a copy up at http://poetry.puzzling.org/twisted_db.html.  I'd
> appreciate any feedback anyone has, in particular:
>   * Have I stuffed up anything major?

Not really, the example looks nice 'n' simple, illustrating that ADBAPI
is not a very big API at all :)

>   * Is my terminology ok (e.g. "...dispatch queries to your ConnectionPool...")

Sounds fine to me.

>   * Am I demonstrating "best practice" use of twisted.enterprise, or should
>     I be structuring my code differently?

There is one slight modification I'd make.  Typically, a method that
calls runOperation will return its result, since presumably you are
writing external code that uses the service and expects some way to hook
into results being available :-).

> If someone wants to place this (or an edited version of it) on
> twistedmatrix.com, or distribute it with Twisted, or both, they are welcome.

Will do.  We've got lots of docs to write, and we'll integrate these as
soon as I have some time.  Thanks for relieving a bit of that burden!

-- 
"Cannot stand to be one of many -- I'm not what they are."
        -Guster, "Rocketship"
                glyph lefkowitz; ninjaneer, freelance demiurge
    glyph @ [ninjaneering|twistedmatrix].com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 232 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20020131/bc0526d6/attachment.sig>

From andrew at puzzling.org  Thu Jan 31 18:21:33 2002
From: andrew at puzzling.org (Andrew Bennetts)
Date: Fri, 1 Feb 2002 12:21:33 +1100
Subject: [Twisted-Python] twisted.enterprise docs suck
In-Reply-To: <1012519400.15360.40.camel@zelda>
References: <20020130152108.GA6098@ritsuko.xware.cx> <1012519400.15360.40.camel@zelda>
Message-ID: <20020201012133.GA19968@ritsuko.xware.cx>

Glyph wrote:
> >   * Am I demonstrating "best practice" use of twisted.enterprise, or should
> >     I be structuring my code differently?
> 
> There is one slight modification I'd make.  Typically, a method that
> calls runOperation will return its result, since presumably you are
> writing external code that uses the service and expects some way to hook
> into results being available :-).

Ok, so how about if I change the last example to:

    class AgeDatabase(adbapi.Augmentation):
        """A simple example that can retrieve an age from the database"""
        def getAge(self, name):
            # Define the query
            sql = """SELECT Age FROM People WHERE name = ?"""
            # Run the query, and set a callback to run when done
            return self.runOperation(sql, name)


    def gotAge(resultlist, name):
        """Callback for handling the result of the query"""
	age = resultlist[0][0]          # First field of first record
	print "%s is %d years old" % (name, age)

    db = MyDatabase(dbpool)

    # These will *not* block.  Hooray!
    db.getAge("Andrew").addCallbacks(gotAge, db.operationError, 
                                     callbackArgs=name).arm()
    db.getAge("Glyph").addCallbacks(gotAge, db.operationError,
                                    callbackArgs=name).arm()

If this looks sane to you, I'll update the example and the surrounding text at
poetry.puzzling.org/twisted_db.html.

> > If someone wants to place this (or an edited version of it) on
> > twistedmatrix.com, or distribute it with Twisted, or both, they are welcome.
> 
> Will do.  We've got lots of docs to write, and we'll integrate these as
> soon as I have some time.  Thanks for relieving a bit of that burden!

Actually, it was suggested to me that I should be more explicit with my
licencing of that document.  I haven't had time to probably examine
documentation licences, so I'll just state this instead: I donate the copyright
to that tutorial to the Twisted developers (i.e. Twisted Matrix Laboratories).
Basically, do what you like, I won't sue :)

-Andrew.




